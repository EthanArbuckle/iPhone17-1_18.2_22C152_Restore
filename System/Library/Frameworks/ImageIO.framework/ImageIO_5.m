void sub_18880AE64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;

  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a36);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a45);
  }
  if (a55) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a55);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if (*(char *)(v57 - 225) < 0) {
    operator delete(*(void **)(v57 - 248));
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a49);
  }
  if (*(char *)(v57 - 201) < 0) {
    operator delete(*(void **)(v57 - 224));
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (*(char *)(v57 - 169) < 0) {
    operator delete(*(void **)(v57 - 192));
  }
  if (*(char *)(v57 - 137) < 0) {
    operator delete(*(void **)(v57 - 160));
  }
  __cxa_begin_catch(a1);
  if (!a15) {
LABEL_22:
  }
    __cxa_rethrow();
  *(void *)(v57 - 160) = 0;
  *(void *)(v57 - 152) = 0;
  (*(void (**)(uint64_t))(*(void *)v55 + 56))(v55);
  if ((*(unsigned int (**)(void))(**(void **)(v57 - 160) + 40))(*(void *)(v57 - 160)) == 2)
  {
    (*(void (**)(void))(**(void **)(v57 - 160) + 248))(*(void *)(v57 - 160));
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v57 - 192) + 680))(&a28);
    v59 = (std::__shared_weak_count *)a29;
    if (!a29) {
      goto LABEL_26;
    }
  }
  else
  {
    if ((*(unsigned int (**)(void))(**(void **)(v57 - 160) + 40))(*(void *)(v57 - 160)) != 4)
    {
LABEL_39:
      v68 = *(std::__shared_weak_count **)(v57 - 152);
      if (v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
      }
      goto LABEL_22;
    }
    (*(void (**)(void))(**(void **)(v57 - 160) + 240))(*(void *)(v57 - 160));
    v61 = *(void *)(v57 - 192);
    (*(void (**)(uint64_t))(*(void *)v55 + 88))(v55);
    v62 = (*(uint64_t (**)(void))(**(void **)(v57 - 224) + 192))(*(void *)(v57 - 224));
    v63 = v55;
    (*(void (**)(uint64_t))(*(void *)v63 + 88))(v63);
    v64 = (*(uint64_t (**)(void))(**(void **)(v57 - 248) + 208))(*(void *)(v57 - 248));
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v63 + 72))(&a54, v63);
    v65 = (*(uint64_t (**)(void *))(*(void *)a54 + 192))(a54);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v63 + 72))(&a48, v63);
    v66 = (*(uint64_t (**)(void *))(*(void *)a48 + 208))(a48);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v61 + 672))(&a26, v61, v62, v64, v65, v66);
    if (a27) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a27);
    }
    if (a49) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a49);
    }
    if (a55) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a55);
    }
    v67 = *(std::__shared_weak_count **)(v57 - 240);
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    v59 = *(std::__shared_weak_count **)(v57 - 216);
    if (!v59)
    {
LABEL_26:
      v60 = *(std::__shared_weak_count **)(v57 - 184);
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
      goto LABEL_39;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  goto LABEL_26;
}

void sub_18880B794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54)
{
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  v55 = *(std::__shared_weak_count **)(v54 - 240);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  v56 = *(std::__shared_weak_count **)(v54 - 216);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  v57 = *(std::__shared_weak_count **)(v54 - 184);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  v58 = *(std::__shared_weak_count **)(v54 - 152);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  __cxa_end_catch();
  JUMPOUT(0x18880B824);
}

uint64_t XMPUtils::FindCnstNode(void *a1, uint64_t *a2, std::string::size_type *a3, _DWORD *a4, int *a5)
{
  long long v120 = 0uLL;
  AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v120);
  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a3, (uint64_t)a1);
  uint64_t v9 = *a2;
  if ((*(unsigned char *)(*a2 + 56) & 0x10) != 0)
  {
    if (!XMPUtils::HandleConstAliasStep(a1, a3, a2, 0))
    {
LABEL_237:
      uint64_t v91 = 0;
      goto LABEL_238;
    }
    v97 = a4;
    uint64_t v9 = *a2;
    unint64_t v10 = 2;
  }
  else
  {
    v97 = a4;
    unint64_t v10 = 1;
  }
  uint64_t v11 = a2[1] - v9;
  if (v10 < v11 >> 5)
  {
    uint64_t v12 = v11 >> 5;
    uint64_t v98 = v11 >> 5;
    while (2)
    {
      if (!*a3) {
        goto LABEL_237;
      }
      memset(&__str, 0, sizeof(__str));
      uint64_t v13 = *a2 + 32 * v10;
      if (*(char *)(v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v13;
        __str.__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
      }
      memset(&v118, 0, sizeof(v118));
      uint64_t v15 = *a2;
      uint64_t v16 = *a2 + 32 * v10;
      if (*(char *)(v16 - 9) < 0)
      {
        std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)(v16 - 32), *(void *)(v16 - 24));
        uint64_t v15 = *a2;
      }
      else
      {
        long long v17 = *(_OWORD *)(v16 - 32);
        v118.__r_.__value_.__r.__words[2] = *(void *)(v16 - 16);
        *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v17;
      }
      switch(*(_DWORD *)(v15 + 32 * v10 + 24))
      {
        case 1:
          std::string::size_type v18 = std::string::find(&__str, 58, 0);
          memset(&v117, 0, sizeof(v117));
          std::string::basic_string(&v117, &__str, 0, v18, (std::allocator<char> *)&v114);
          (*(void (**)(std::string *__return_ptr))(*(void *)v120 + 80))(&v114);
          size = (std::__shared_weak_count *)v114.__r_.__value_.__l.__size_;
          std::string::size_type v20 = v114.__r_.__value_.__r.__words[0];
          if ((*(unsigned int (**)(void))(*(void *)*a3 + 40))() != 4)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 102;
            exception[1] = "Named children only allowed for schemas and structs";
            *((unsigned char *)exception + 16) = 0;
          }
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 240))(&v114);
          std::string::size_type v21 = v114.__r_.__value_.__r.__words[0];
          uint64_t v22 = (*(uint64_t (**)(std::string::size_type))(*(void *)v20 + 192))(v20);
          uint64_t v23 = (*(uint64_t (**)(std::string::size_type))(*(void *)v20 + 208))(v20);
          p_str = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(void *)v21 + 648))(__p, v21, v22, v23, (std::string::size_type)p_str->__r_.__value_.__r.__words + v18 + 1, -1);
          long long v25 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          v26 = (std::__shared_weak_count *)a3[1];
          *(_OWORD *)a3 = v25;
          uint64_t v12 = v98;
          if (!v26) {
            goto LABEL_99;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          v27 = (std::__shared_weak_count *)__p[1];
          if (!__p[1]) {
            goto LABEL_99;
          }
          goto LABEL_98;
        case 2:
          v52 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v52->__r_.__value_.__s.__data_[0] != 63) {
            __assert_rtn("FindCnstNode", "XMPUtils.cpp", 954, "stepStr[0]=='?'");
          }
          std::string::basic_string(&v117, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v114);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v117;
          std::string::size_type v53 = std::string::find(&__str, 58, 0);
          memset(&v117, 0, sizeof(v117));
          std::string::basic_string(&v117, &__str, 0, v53, (std::allocator<char> *)&v114);
          (*(void (**)(std::string *__return_ptr))(*(void *)v120 + 80))(&v114);
          size = (std::__shared_weak_count *)v114.__r_.__value_.__l.__size_;
          std::string::size_type v54 = v114.__r_.__value_.__r.__words[0];
          std::string::size_type v55 = *a3;
          uint64_t v56 = (*(uint64_t (**)(std::string::size_type))(*(void *)v114.__r_.__value_.__l.__data_ + 192))(v114.__r_.__value_.__r.__words[0]);
          uint64_t v57 = (*(uint64_t (**)(std::string::size_type))(*(void *)v54 + 208))(v54);
          v58 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(void *)v55 + 128))(&v114, v55, v56, v57, (std::string::size_type)v58->__r_.__value_.__r.__words + v53 + 1, -1);
          long long v59 = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = 0uLL;
          v27 = (std::__shared_weak_count *)a3[1];
          *(_OWORD *)a3 = v59;
          uint64_t v12 = v98;
          if (v27)
          {
LABEL_98:
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
LABEL_99:
            if (v114.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v114.__r_.__value_.__l.__size_);
            }
          }
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v117.__r_.__value_.__l.__data_);
          }
          goto LABEL_181;
        case 3:
          if ((*(unsigned int (**)(void))(*(void *)*a3 + 40))() != 2) {
            goto LABEL_244;
          }
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 248))(&v114);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v45 = __str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_ <= 1 || *__str.__r_.__value_.__l.__data_ != 91) {
              goto LABEL_242;
            }
          }
          else
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) < 2u || __str.__r_.__value_.__s.__data_[0] != 91) {
              goto LABEL_242;
            }
            std::string::size_type v45 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          std::string::size_type v78 = v45 - 1;
          if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (*(unsigned char *)(__str.__r_.__value_.__r.__words[0] + v78) == 93)
            {
              std::string::size_type v79 = __str.__r_.__value_.__l.__size_;
              goto LABEL_165;
            }
          }
          else if (__str.__r_.__value_.__s.__data_[v78] == 93)
          {
            std::string::size_type v79 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_165:
            std::string::size_type v80 = v79 - 2;
            if (!v80) {
              goto LABEL_245;
            }
            int v81 = 0;
            v82 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v82 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            v83 = &v82->__r_.__value_.__s.__data_[1];
            do
            {
              int v85 = *v83++;
              int v84 = v85;
              if ((v85 - 48) >= 0xA) {
                __assert_rtn("FindCnstNode", "XMPUtils.cpp", 918, "('0' <= stepStr[chNum]) && (stepStr[chNum] <= '9')");
              }
              int v81 = v84 + 10 * v81 - 48;
              --v80;
            }
            while (v80);
            if (v81 < 1)
            {
LABEL_245:
              v94 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)v94 = 102;
              v94[1] = "Array index must be larger than one";
              *((unsigned char *)v94 + 16) = 0;
            }
            std::string::size_type v86 = std::string::find(&v118, 58, 0);
            memset(&v117, 0, sizeof(v117));
            std::string::basic_string(&v117, &v118, 0, v86, (std::allocator<char> *)__p);
            (*(void (**)(void **__return_ptr))(*(void *)v120 + 80))(__p);
            size = (std::__shared_weak_count *)__p[1];
            (*(void (**)(void **__return_ptr))(*(void *)v114.__r_.__value_.__l.__data_ + 656))(__p);
            long long v87 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            v88 = (std::__shared_weak_count *)a3[1];
            *(_OWORD *)a3 = v87;
            if (v88)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v88);
              if (__p[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
              }
            }
            if (a5) {
              *a5 = v81;
            }
LABEL_177:
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v117.__r_.__value_.__l.__data_);
            }
            if (v114.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v114.__r_.__value_.__l.__size_);
            }
LABEL_181:
            if (size) {
              std::__shared_weak_count::__release_shared[abi:ne180100](size);
            }
            goto LABEL_183;
          }
LABEL_242:
          __assert_rtn("FindCnstNode", "XMPUtils.cpp", 916, "(stepStr.length() >= 2) && (*( stepStr.begin()) == '[') && (stepStr[stepStr.length()-1] == ']')");
        case 4:
          if ((*(unsigned int (**)(void))(*(void *)*a3 + 40))() != 2) {
            goto LABEL_244;
          }
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 248))(&v114);
          std::string::size_type v46 = std::string::find(&v118, 58, 0);
          memset(&v117, 0, sizeof(v117));
          std::string::basic_string(&v117, &v118, 0, v46, (std::allocator<char> *)__p);
          (*(void (**)(void **__return_ptr))(*(void *)v120 + 80))(__p);
          size = (std::__shared_weak_count *)__p[1];
          std::string::size_type v48 = *a3;
          v47 = (std::__shared_weak_count *)a3[1];
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v48 && (*(unsigned int (**)(std::string::size_type))(*(void *)v48 + 40))(v48) == 2)
          {
            (*(void (**)(void **__return_ptr, std::string::size_type))(*(void *)v48 + 248))(__p, v48);
            uint64_t v49 = (*(uint64_t (**)(char *))(*(void *)((char *)__p[0] + *(void *)(*(void *)__p[0] - 688))
                                                    + 560))((char *)__p[0] + *(void *)(*(void *)__p[0] - 688));
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
            if (!v49)
            {
              v96 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)v96 = 102;
              v96[1] = "Array index overflow";
              *((unsigned char *)v96 + 16) = 0;
            }
            (*(void (**)(void **__return_ptr))(*(void *)v114.__r_.__value_.__l.__data_ + 656))(__p);
            long long v50 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            v51 = (std::__shared_weak_count *)a3[1];
            *(_OWORD *)a3 = v50;
            if (v51)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v51);
              if (__p[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
              }
            }
            if (a5) {
              *a5 = v49;
            }
          }
          if (v47) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          }
          goto LABEL_177;
        case 5:
          if ((*(unsigned int (**)(void))(*(void *)*a3 + 40))() != 2)
          {
LABEL_244:
            v93 = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)v93 = 102;
            v93[1] = "Indexes allowed for arrays only";
            *((unsigned char *)v93 + 16) = 0;
          }
          uint64_t v115 = 0;
          v116 = 0;
          (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 248))(&v115);
          memset(&v117, 0, sizeof(v117));
          memset(&v114, 0, sizeof(v114));
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v113 = 0;
          SplitNameAndValue((uint64_t)&__str, (uint64_t)&v117, &v114);
          std::string::size_type v29 = *a3;
          v28 = (std::__shared_weak_count *)a3[1];
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::size_type v30 = std::string::find(&v117, 58, 0);
          memset(&v111, 0, sizeof(v111));
          std::string::basic_string(&v111, &v117, 0, v30, (std::allocator<char> *)&__s1);
          (*(void (**)(void **__return_ptr))(*(void *)v120 + 80))(&__s1);
          uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)__s1 + 192))(__s1);
          MEMORY[0x18C11BE10](__p, v31);
          if (__n) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__n);
          }
          if (!v29 || (*(unsigned int (**)(std::string::size_type))(*(void *)v29 + 40))(v29) != 2)
          {
            char v77 = 0;
            goto LABEL_196;
          }
          uint64_t v109 = 0;
          v110 = 0;
          (*(void (**)(uint64_t *__return_ptr, std::string::size_type))(*(void *)v29 + 248))(&v109, v29);
          uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)(v109 + *(void *)(*(void *)v109 - 688)) + 560))(v109 + *(void *)(*(void *)v109 - 688));
          if (!v32)
          {
            char v34 = 0;
            goto LABEL_193;
          }
          unint64_t v33 = v32;
          char v34 = 0;
          uint64_t v35 = 1;
          break;
        case 6:
          memset(&v117, 0, sizeof(v117));
          memset(&v114, 0, sizeof(v114));
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v113 = 0;
          SplitNameAndValue((uint64_t)&__str, (uint64_t)&v117, &v114);
          std::string::size_type v61 = *a3;
          v60 = (std::__shared_weak_count *)a3[1];
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::size_type v62 = std::string::find(&v117, 58, 0);
          memset(&v111, 0, sizeof(v111));
          std::string::basic_string(&v111, &v117, 0, v62, (std::allocator<char> *)&__s1);
          (*(void (**)(void **__return_ptr))(*(void *)v120 + 80))(&__s1);
          uint64_t v63 = (*(uint64_t (**)(void *))(*(void *)__s1 + 192))(__s1);
          MEMORY[0x18C11BE10](__p, v63);
          if (__n) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__n);
          }
          if (!v61 || (*(unsigned int (**)(std::string::size_type))(*(void *)v61 + 40))(v61) != 2)
          {
            int v74 = 1;
            goto LABEL_216;
          }
          uint64_t v115 = 0;
          v116 = 0;
          (*(void (**)(uint64_t *__return_ptr, std::string::size_type))(*(void *)v61 + 248))(&v115, v61);
          uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)(v115 + *(void *)(*(void *)v115 - 688)) + 560))(v115 + *(void *)(*(void *)v115 - 688));
          if (!v64)
          {
            char v66 = 0;
            goto LABEL_211;
          }
          unint64_t v65 = v64;
          char v66 = 0;
          uint64_t v67 = 1;
          while (2)
          {
            uint64_t v109 = 0;
            v110 = 0;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v115 + 656))(&v109);
            if ((*(unsigned int (**)(uint64_t))(*(void *)v109 + 40))(v109) != 4)
            {
              int v74 = 1;
              goto LABEL_139;
            }
            uint64_t v107 = 0;
            v108 = 0;
            (*(void (**)(void **__return_ptr))(*(void *)v109 + 240))(&__s1);
            (*(void (**)(uint64_t *__return_ptr))(*(void *)__s1 + 648))(&v107);
            if (__n) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__n);
            }
            if (!v107 || (*(unsigned int (**)(uint64_t))(*(void *)v107 + 40))(v107) != 1)
            {
              int v74 = 14;
              goto LABEL_137;
            }
            __s1 = 0;
            size_t __n = 0;
            uint64_t v105 = 0;
            (*(void (**)(long long *__return_ptr))(*(void *)v107 + 232))(&v102);
            (*(void (**)(long long *__return_ptr))(*(void *)v102 + 504))(&v106);
            v68 = (char *)(*(uint64_t (**)(void))(*(void *)v106 + 192))(v106);
            std::string::basic_string[abi:ne180100]<0>(&__s1, v68);
            if (*((void *)&v106 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v106 + 1));
            }
            if (*((void *)&v102 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v102 + 1));
            }
            uint64_t v69 = HIBYTE(v105);
            if (v105 >= 0) {
              size_t v70 = HIBYTE(v105);
            }
            else {
              size_t v70 = __n;
            }
            std::string::size_type v71 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
            if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v71 = v114.__r_.__value_.__l.__size_;
            }
            if (v70 != v71) {
              goto LABEL_145;
            }
            if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v72 = &v114;
            }
            else {
              v72 = (std::string *)v114.__r_.__value_.__r.__words[0];
            }
            if (SHIBYTE(v105) < 0)
            {
              if (memcmp(__s1, v72, __n))
              {
                int v74 = 0;
                goto LABEL_155;
              }
            }
            else if (HIBYTE(v105))
            {
              p_s1 = &__s1;
              while (*(unsigned __int8 *)p_s1 == v72->__r_.__value_.__s.__data_[0])
              {
                p_s1 = (void **)((char *)p_s1 + 1);
                v72 = (std::string *)((char *)v72 + 1);
                if (!--v69) {
                  goto LABEL_149;
                }
              }
LABEL_145:
              int v74 = 0;
              if ((v105 & 0x8000000000000000) == 0) {
                goto LABEL_137;
              }
LABEL_155:
              operator delete(__s1);
              goto LABEL_137;
            }
LABEL_149:
            if (a5) {
              *a5 = v67;
            }
            (*(void (**)(long long *__return_ptr))(*(void *)v115 + 656))(&v106);
            long long v75 = v106;
            long long v106 = 0uLL;
            v76 = (std::__shared_weak_count *)a3[1];
            *(_OWORD *)a3 = v75;
            if (v76)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
              if (*((void *)&v106 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v106 + 1));
              }
            }
            char v66 = 1;
            int v74 = 12;
            if (v105 < 0) {
              goto LABEL_155;
            }
LABEL_137:
            if (v108) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v108);
            }
LABEL_139:
            if (v110) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v110);
            }
            if (!v74 || v74 == 14)
            {
              if (++v67 > v65)
              {
                int v74 = 0;
                uint64_t v12 = v98;
                goto LABEL_212;
              }
              continue;
            }
            break;
          }
          uint64_t v12 = v98;
          if (v74 != 12) {
            goto LABEL_212;
          }
LABEL_211:
          int v74 = 0;
LABEL_212:
          if (v116) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v116);
          }
          if (!v74) {
            int v74 = (v66 & 1) == 0;
          }
LABEL_216:
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v111.__r_.__value_.__l.__data_);
          }
          if (v60) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          }
          if (SHIBYTE(v113) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v117.__r_.__value_.__l.__data_);
            if (!v74) {
              goto LABEL_183;
            }
          }
          else if (!v74)
          {
            goto LABEL_183;
          }
LABEL_184:
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v118.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (v74) {
            goto LABEL_237;
          }
          if (++v10 == v12) {
            goto LABEL_230;
          }
          continue;
        default:
          goto LABEL_183;
      }
      break;
    }
    while (1)
    {
      uint64_t v107 = 0;
      v108 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v109 + 656))(&v107);
      long long v106 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)v107 + 128))(&v106);
      if ((void)v106)
      {
        __s1 = 0;
        size_t __n = 0;
        uint64_t v105 = 0;
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v106 + 232))(&v100);
        (*(void (**)(long long *__return_ptr))(*(void *)v100 + 504))(&v102);
        v36 = (char *)(*(uint64_t (**)(void))(*(void *)v102 + 192))(v102);
        std::string::basic_string[abi:ne180100]<0>(&__s1, v36);
        if (*((void *)&v102 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v102 + 1));
        }
        if (v101) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v101);
        }
        uint64_t v37 = HIBYTE(v105);
        if (v105 >= 0) {
          size_t v38 = HIBYTE(v105);
        }
        else {
          size_t v38 = __n;
        }
        std::string::size_type v39 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v39 = v114.__r_.__value_.__l.__size_;
        }
        if (v38 == v39)
        {
          if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v40 = &v114;
          }
          else {
            v40 = (std::string *)v114.__r_.__value_.__r.__words[0];
          }
          if (SHIBYTE(v105) < 0)
          {
            if (!memcmp(__s1, v40, __n))
            {
LABEL_55:
              if (a5) {
                *a5 = v35;
              }
              (*(void (**)(long long *__return_ptr))(*(void *)v109 + 656))(&v102);
              long long v43 = v102;
              long long v102 = 0uLL;
              v44 = (std::__shared_weak_count *)a3[1];
              *(_OWORD *)a3 = v43;
              if (v44)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v44);
                if (*((void *)&v102 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v102 + 1));
                }
              }
              char v34 = 1;
              int v42 = 9;
              if ((v105 & 0x8000000000000000) == 0) {
                goto LABEL_62;
              }
            }
            else
            {
              int v42 = 0;
            }
LABEL_61:
            operator delete(__s1);
            goto LABEL_62;
          }
          if (!HIBYTE(v105)) {
            goto LABEL_55;
          }
          v41 = &__s1;
          while (*(unsigned __int8 *)v41 == v40->__r_.__value_.__s.__data_[0])
          {
            v41 = (void **)((char *)v41 + 1);
            v40 = (std::string *)((char *)v40 + 1);
            if (!--v37) {
              goto LABEL_55;
            }
          }
        }
        int v42 = 0;
        if (v105 < 0) {
          goto LABEL_61;
        }
      }
      else
      {
        int v42 = 11;
      }
LABEL_62:
      if (*((void *)&v106 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v106 + 1));
      }
      if (v108) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v108);
      }
      if ((v42 == 11 || !v42) && ++v35 <= v33) {
        continue;
      }
LABEL_193:
      if (v110) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v110);
      }
      char v77 = v34;
      uint64_t v12 = v98;
LABEL_196:
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (SHIBYTE(v113) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v117.__r_.__value_.__l.__data_);
      }
      if (v116) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v116);
      }
      if ((v77 & 1) == 0)
      {
        int v74 = 1;
        goto LABEL_184;
      }
LABEL_183:
      int v74 = 0;
      goto LABEL_184;
    }
  }
LABEL_230:
  std::string::size_type v89 = *a3;
  if (!*a3) {
    goto LABEL_237;
  }
  if (v97)
  {
    v90 = (std::__shared_weak_count *)a3[1];
    __str.__r_.__value_.__r.__words[0] = v89;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
    if (v90) {
      atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    _DWORD *v97 = XMPUtils::GetIXMPOptions((uint64_t *)&__str);
    if (v90) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v90);
    }
  }
  uint64_t v91 = 1;
LABEL_238:
  if (*((void *)&v120 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v120 + 1));
  }
  return v91;
}

void sub_18880CEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  v52 = *(std::__shared_weak_count **)(v50 - 192);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (*(char *)(v50 - 161) < 0) {
    operator delete(*(void **)(v50 - 184));
  }
  if (*(char *)(v50 - 137) < 0) {
    operator delete(*(void **)(v50 - 160));
  }
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  std::string::size_type v53 = *(std::__shared_weak_count **)(v50 - 96);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPUtils::GetIXMPOptions(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 184))(v2))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 128))(&v32);
    v3 = v32;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v3) {
      int v4 = 80;
    }
    else {
      int v4 = 16;
    }
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 128))(&v32);
    v5 = v32;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v5) {
      LODWORD(v6) = v4 | 0x80;
    }
    else {
      LODWORD(v6) = v4;
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 88))(&__p);
  v7 = (char *)(*(uint64_t (**)(void *))(*(void *)__p + 192))(__p);
  std::string::basic_string[abi:ne180100]<0>(&v32, v7);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  __p = 0;
  std::string::size_type v30 = 0;
  uint64_t v31 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 72))(&v35);
  v8 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 192))(v35);
  std::string::basic_string[abi:ne180100]<0>(&__p, v8);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 56))(&v35);
  uint64_t v9 = v36;
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 168))()) {
    uint64_t v6 = v6 | 0x20;
  }
  else {
    uint64_t v6 = v6;
  }
  int v10 = (*(uint64_t (**)(void))(*(void *)*a1 + 40))();
  uint64_t v11 = *a1;
  if (v10 != 1)
  {
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
    uint64_t v16 = *a1;
    if (v15 != 2)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 40))(v16) == 4)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 56))(&v35);
        uint64_t v21 = v35;
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        if (v21) {
          uint64_t v6 = v6 | 0x100;
        }
      }
      goto LABEL_28;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v16 + 248))(&v35);
    uint64_t v18 = v35;
    long long v17 = v36;
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 640))(v35);
    unsigned int v20 = v6 | 0x200;
    if (v19 != 1)
    {
      if (v19 == 2)
      {
        unsigned int v20 = v6 | 0x600;
      }
      else
      {
        if (v19 != 4)
        {
          char v28 = 0;
          uint64_t v6 = v6 | 0x200;
          if (v17) {
LABEL_62:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_63:
          if ((v28 & 1) == 0) {
            uint64_t v6 = 0;
          }
          goto LABEL_28;
        }
        unsigned int v20 = v6 | 0xE00;
      }
    }
    BOOL v22 = (*(unsigned int (**)(uint64_t))(*(void *)v18 + 640))(v18) == 4;
    if ((*(uint64_t (**)(uint64_t))(*(void *)(v18 + *(void *)(*(void *)v18 - 688)) + 560))(v18 + *(void *)(*(void *)v18 - 688)))
    {
      uint64_t v23 = 1;
      while (1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v18 + 656))(&v35, v18, v23);
        uint64_t v25 = v35;
        v24 = v36;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 40))(v35) != 1) {
          break;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t, const char *, uint64_t))(*(void *)v25 + 128))(&v35, v25, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
        uint64_t v26 = v35;
        if (v36)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          if (!v26) {
            break;
          }
        }
        else if (!v35)
        {
          break;
        }
        char v27 = 0;
        if (v24) {
          goto LABEL_55;
        }
LABEL_56:
        if ((v27 & 1) == 0
          && ++v23 <= (unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)(v18
                                                                                       + *(void *)(*(void *)v18 - 688))
                                                                           + 560))(v18 + *(void *)(*(void *)v18 - 688)))
        {
          continue;
        }
        goto LABEL_58;
      }
      BOOL v22 = 0;
      char v27 = 1;
      if (!v24) {
        goto LABEL_56;
      }
LABEL_55:
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      goto LABEL_56;
    }
LABEL_58:
    if (v22) {
      uint64_t v6 = v20 | 0x1000;
    }
    else {
      uint64_t v6 = v20;
    }
    char v28 = 1;
    if (v17) {
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 232))(&v35);
  uint64_t v12 = v36;
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 520))(v35);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v13) {
    uint64_t v6 = v6 | 2;
  }
  else {
    uint64_t v6 = v6;
  }
LABEL_28:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  return v6;
}

void sub_18880D8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

uint64_t XMPUtils::GetNodeChildCount(void *a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 40))(*a1);
  uint64_t v3 = *a1;
  if (v2 == 2)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v3 + 248))(v7);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 40))(v3) != 4) {
      return 0;
    }
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 240))(v7);
  }
  int v4 = (std::__shared_weak_count *)v7[1];
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(v7[0] + *(void *)(*(void *)v7[0] - 688)) + 560))();
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v5;
}

void XMPUtils::FindChildNode(uint64_t *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  uint64_t v11 = (std::__shared_weak_count *)a1[1];
  uint64_t v30 = *a1;
  uint64_t v31 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 IXMPOptions = XMPUtils::GetIXMPOptions(&v30);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if ((IXMPOptions & 0x300) == 0x200)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Named children not allowed for arrays";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v28 = 0;
  std::string::size_type v29 = 0;
  int v13 = (std::__shared_weak_count *)a1[1];
  uint64_t v30 = *a1;
  uint64_t v31 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  XMPUtils::GetNodeChildIterator(&v30, &v28);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = v28;
  if (v28)
  {
    int v24 = a4;
    int v15 = v29;
    uint64_t v16 = 1;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v14 + 48))(&v30, v14);
      uint64_t v18 = v30;
      long long v17 = v31;
      if (v30)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v30 + 72))(&v30, v30);
        int v19 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 192))(v30);
        if (!strcmp(v19, a2))
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v18 + 88))(&v26, v18);
          uint64_t v21 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 192))(v26);
          BOOL v20 = strcmp(v21, a3) == 0;
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
        }
        else
        {
          BOOL v20 = 0;
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        if (v20) {
          break;
        }
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v14 + 56))(&v30, v14);
      uint64_t v14 = v30;
      BOOL v22 = v31;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      ++v16;
      int v15 = v22;
      if (!v14)
      {
        std::string::size_type v29 = v22;
        a4 = v24;
        goto LABEL_26;
      }
    }
    std::string::size_type v29 = v15;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *a6 = v18;
    a6[1] = (uint64_t)v17;
    if (a5) {
      *a5 = v16;
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  else
  {
LABEL_26:
    if (a4) {
      AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode((AdobeXMPCore::ISimpleNode_v1 *)a3, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, (const char *)0xFFFFFFFFFFFFFFFFLL, 0, (const char *)0xFFFFFFFFFFFFFFFFLL);
    }
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_18880DE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void XMPUtils::ComposeArrayItemPath(char *a1, char *a2, int a3, std::string *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    XMPUtils::ComposeArrayItemPath();
  }
  if (!a2 || !*a2) {
    XMPUtils::ComposeArrayItemPath();
  }
  if (!a4) {
    XMPUtils::ComposeArrayItemPath();
  }
  memset(v10, 0, sizeof(v10));
  ExpandXPath(a1, a2, v10);
  if (a3 <= -2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Array index out of bounds";
    *((unsigned char *)exception + 16) = 0;
  }
  size_t v7 = strlen(a2);
  memset(&v9, 0, sizeof(v9));
  std::string::reserve(&v9, v7 + 34);
  MEMORY[0x18C11BE10](&v9, a2);
  if (a3 == -1)
  {
    std::string::append(&v9, "[last()]");
  }
  else
  {
    *(_OWORD *)std::string __str = 0u;
    long long v12 = 0u;
    snprintf(__str, 0x20uLL, "[%d]", a3);
    std::string::append(&v9, __str);
  }
  std::string::operator=(a4, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  *(void *)std::string __str = v10;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
}

void sub_18880E0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a20 = &a17;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void XMPUtils::ComposeStructFieldPath(char *a1, char *a2, char *a3, unsigned char *a4, std::string *a5)
{
  if (!a1 || !a3) {
    XMPUtils::ComposeStructFieldPath();
  }
  if (!a2 || !*a2) {
    XMPUtils::ComposeStructFieldPath();
  }
  if (!a4 || !*a4) {
    XMPUtils::ComposeStructFieldPath();
  }
  if (!a5) {
    XMPUtils::ComposeStructFieldPath();
  }
  memset(v19, 0, sizeof(v19));
  ExpandXPath(a1, a2, v19);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  ExpandXPath(a3, a4, (uint64_t *)&v16);
  if (v17 - (void)v16 != 64)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "The fieldName must be simple";
    *((unsigned char *)exception + 16) = 0;
  }
  size_t v9 = strlen(a2);
  if (*((char *)v16 + 55) < 0) {
    int v10 = v16[5];
  }
  else {
    int v10 = (void *)*((unsigned __int8 *)v16 + 55);
  }
  memset(&__str, 0, sizeof(__str));
  std::string::reserve(&__str, (std::string::size_type)v10 + v9 + 1);
  MEMORY[0x18C11BE10](&__str, a2);
  std::string::push_back(&__str, 47);
  int v11 = *((char *)v16 + 55);
  if (v11 >= 0) {
    long long v12 = (const std::string::value_type *)(v16 + 4);
  }
  else {
    long long v12 = (const std::string::value_type *)v16[4];
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *((unsigned __int8 *)v16 + 55);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[5];
  }
  std::string::append(&__str, v12, v13);
  std::string::operator=(a5, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  uint64_t v16 = (void **)v19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_18880E280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = &a19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void XMPUtils::ComposeQualifierPath(char *a1, char *a2, char *a3, unsigned char *a4, std::string *a5)
{
  if (!a1 || !a3) {
    XMPUtils::ComposeQualifierPath();
  }
  if (!a2 || !*a2) {
    XMPUtils::ComposeQualifierPath();
  }
  if (!a4 || !*a4) {
    XMPUtils::ComposeQualifierPath();
  }
  if (!a5) {
    XMPUtils::ComposeQualifierPath();
  }
  memset(v19, 0, sizeof(v19));
  ExpandXPath(a1, a2, v19);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  ExpandXPath(a3, a4, (uint64_t *)&v16);
  if (v17 - (void)v16 != 64)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "The qualifier name must be simple";
    *((unsigned char *)exception + 16) = 0;
  }
  size_t v9 = strlen(a2);
  if (*((char *)v16 + 55) < 0) {
    int v10 = v16[5];
  }
  else {
    int v10 = (void *)*((unsigned __int8 *)v16 + 55);
  }
  memset(&__str, 0, sizeof(__str));
  std::string::reserve(&__str, (std::string::size_type)v10 + v9 + 2);
  MEMORY[0x18C11BE10](&__str, a2);
  std::string::append(&__str, "/?");
  int v11 = *((char *)v16 + 55);
  if (v11 >= 0) {
    long long v12 = (const std::string::value_type *)(v16 + 4);
  }
  else {
    long long v12 = (const std::string::value_type *)v16[4];
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *((unsigned __int8 *)v16 + 55);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[5];
  }
  std::string::append(&__str, v12, v13);
  std::string::operator=(a5, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  uint64_t v16 = (void **)v19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_18880E460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = &a19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void XMPUtils::ConvertFromBool(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    JUMPOUT(0x18C11BE10);
  }
  XMPUtils::ConvertFromBool();
}

uint64_t XMPUtils::ConvertFromInt(uint64_t a1, const char *a2, std::string *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a2 || !this) {
    XMPUtils::ConvertFromInt();
  }
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (*a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = "%d";
  }
  *(_OWORD *)std::string __str = 0u;
  long long v9 = 0u;
  snprintf(__str, 0x20uLL, v6, a1);
  return MEMORY[0x18C11BE10](this, __str);
}

uint64_t XMPUtils::ConvertFromInt64(uint64_t a1, const char *a2, std::string *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a2 || !this) {
    XMPUtils::ConvertFromInt64();
  }
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (*a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = "%lld";
  }
  *(_OWORD *)std::string __str = 0u;
  long long v9 = 0u;
  snprintf(__str, 0x20uLL, v6, a1);
  return MEMORY[0x18C11BE10](this, __str);
}

uint64_t XMPUtils::ConvertFromFloat(const char *a1, std::string *this, double a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a1 || !this) {
    XMPUtils::ConvertFromFloat();
  }
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (*a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = "%f";
  }
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v9 = 0u;
  snprintf(__str, 0x40uLL, v6, *(void *)&a3);
  return MEMORY[0x18C11BE10](this, __str);
}

void XMPUtils::ConvertFromDate(long long *a1, std::string *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    XMPUtils::ConvertFromDate();
  }
  int v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v12 = 0u;
  long long v3 = a1[1];
  long long v9 = *a1;
  *(_OWORD *)long long v10 = v3;
  *(void *)&v10[16] = *((void *)a1 + 4);
  VerifyDateTimeFlags((uint64_t)&v9);
  int v4 = DWORD1(v9);
  if (DWORD1(v9))
  {
    if (SDWORD1(v9) < 1)
    {
      int v4 = 1;
    }
    else
    {
      if (DWORD1(v9) < 0xD) {
        goto LABEL_11;
      }
      int v4 = 12;
    }
  }
  else
  {
    int v4 = 1;
    if (!DWORD2(v9) && !v10[9])
    {
      int v4 = 0;
      goto LABEL_11;
    }
  }
  DWORD1(v9) = v4;
LABEL_11:
  if (!DWORD2(v9))
  {
    if (!v10[9])
    {
      if (v4) {
        snprintf(__str, 0x64uLL, "%.4d-%02d");
      }
      else {
        snprintf(__str, 0x64uLL, "%.4d");
      }
      goto LABEL_25;
    }
    goto LABEL_16;
  }
  if (SDWORD2(v9) < 1)
  {
LABEL_16:
    int v5 = 1;
    goto LABEL_17;
  }
  if (DWORD2(v9) >= 0x20)
  {
    int v5 = 31;
LABEL_17:
    DWORD2(v9) = v5;
  }
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Invalid partial date";
    *((unsigned char *)exception + 16) = 0;
  }
  if (v10[9]) {
    FormatFullDateTime((unsigned int *)&v9, __str);
  }
  else {
    snprintf(__str, 0x64uLL, "%.4d-%02d-%02d");
  }
LABEL_25:
  MEMORY[0x18C11BE10](a2, __str);
  if (!v10[10]) {
    return;
  }
  if (*(_DWORD *)&v10[12] > 0x17u) {
    goto LABEL_40;
  }
  if ((*(_DWORD *)&v10[16] & 0x80000000) != 0) {
    goto LABEL_40;
  }
  if (*(int *)&v10[16] > 59) {
    goto LABEL_40;
  }
  int v6 = v10[11];
  if (v10[11] < -1 || v10[11] > 1) {
    goto LABEL_40;
  }
  if (!v10[11])
  {
    if (!*(void *)&v10[12])
    {
      std::string::push_back(a2, 90);
      return;
    }
LABEL_40:
    v8 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v8 = 4;
    v8[1] = "Invalid time zone values";
    *((unsigned char *)v8 + 16) = 0;
  }
  snprintf(__str, 0x64uLL, "+%02d:%02d", *(_DWORD *)&v10[12], *(_DWORD *)&v10[16]);
  if (v6 < 0) {
    __str[0] = 45;
  }
  std::string::append(a2, __str);
}

uint64_t VerifyDateTimeFlags(uint64_t result)
{
  if (*(_DWORD *)result || *(_DWORD *)(result + 4) || *(_DWORD *)(result + 8)) {
    *(unsigned char *)(result + 24) = 1;
  }
  if (*(_DWORD *)(result + 12) || *(_DWORD *)(result + 16) || *(_DWORD *)(result + 20) || *(_DWORD *)(result + 36)) {
    *(unsigned char *)(result + 25) = 1;
  }
  if (*(unsigned char *)(result + 27) || *(_DWORD *)(result + 28) || *(_DWORD *)(result + 32))
  {
    *(unsigned char *)(result + 26) = 1;
LABEL_14:
    *(unsigned char *)(result + 25) = 1;
    return result;
  }
  if (*(unsigned char *)(result + 26)) {
    goto LABEL_14;
  }
  return result;
}

size_t FormatFullDateTime(unsigned int *a1, char *a2)
{
  AdjustTimeOverflow((uint64_t)a1);
  unsigned int v4 = a1[9];
  uint64_t v5 = *a1;
  if (!(a1[5] | v4)) {
    return snprintf(a2, 0x64uLL, "%.4d-%02d-%02dT%02d:%02d");
  }
  if (!v4) {
    return snprintf(a2, 0x64uLL, "%.4d-%02d-%02dT%02d:%02d:%02d", v5);
  }
  snprintf(a2, 0x64uLL, "%.4d-%02d-%02dT%02d:%02d:%02d.%09d", v5, a1[1], a1[2], a1[3], a1[4], a1[5], v4);
  a2[99] = 0;
  size_t result = strlen(a2);
  for (i = &a2[result]; ; char *i = 0)
  {
    int v8 = *--i;
    if (v8 != 48) {
      break;
    }
  }
  return result;
}

uint64_t XMPUtils::ConvertToBool(XMPUtils *this, const char *a2)
{
  if (!this || !*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    exception[1] = "Empty convert-from string";
    *((unsigned char *)exception + 16) = 0;
  }
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  uint64_t v2 = HIBYTE(v17);
  if (v17 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (void **)__p;
  }
  while (1)
  {
    BOOL v4 = (v2 & 0x80u) != 0;
    if ((v2 & 0x80) != 0) {
      break;
    }
    if (p_p == (void **)((char *)&__p + v2))
    {
      if (v2 != 1)
      {
        if (v2 != 4)
        {
          if (v2 != 5) {
            goto LABEL_51;
          }
          if (__p != 1936482662 || BYTE4(__p) != 101) {
            goto LABEL_51;
          }
          return 0;
        }
        if (__p == 1702195828) {
          return 1;
        }
LABEL_51:
        long long v14 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)long long v14 = 4;
        v14[1] = "Invalid Boolean string";
        *((unsigned char *)v14 + 16) = 0;
      }
      uint64_t v9 = 1;
      switch(__p)
      {
        case '1':
          return v9;
        case 'f':
          return 0;
        case 't':
          return v9;
      }
      long long v10 = &__p;
LABEL_45:
      if (*v10 == 48)
      {
        uint64_t v9 = 0;
        if (v4) {
          goto LABEL_47;
        }
        return v9;
      }
      goto LABEL_51;
    }
LABEL_10:
    int v6 = *(unsigned __int8 *)p_p;
    if ((v6 - 65) <= 0x19)
    {
      *(unsigned char *)p_p = v6 + 32;
      uint64_t v2 = HIBYTE(v17);
    }
    p_p = (void **)((char *)p_p + 1);
  }
  uint64_t v5 = v16;
  if (p_p != (void **)((char *)__p + v16)) {
    goto LABEL_10;
  }
  if (v16 == 1)
  {
    int v8 = *(unsigned __int8 *)__p;
    if (v8 == 116 || (uint64_t v5 = v16, v8 == 49))
    {
      uint64_t v9 = 1;
      goto LABEL_47;
    }
LABEL_35:
    if (v5 == 5)
    {
      if (*(_DWORD *)__p == 1936482662 && *((unsigned char *)__p + 4) == 101) {
        goto LABEL_43;
      }
      uint64_t v5 = v16;
    }
    if (v5 != 1) {
      goto LABEL_51;
    }
    long long v10 = __p;
    if (*(unsigned char *)__p != 102)
    {
      if (v16 != 1) {
        goto LABEL_51;
      }
      goto LABEL_45;
    }
LABEL_43:
    uint64_t v9 = 0;
    goto LABEL_47;
  }
  if (v16 != 4 || *(_DWORD *)__p != 1702195828) {
    goto LABEL_35;
  }
  uint64_t v9 = 1;
LABEL_47:
  operator delete(__p);
  return v9;
}

void sub_18880ED44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPUtils::ConvertToInt64(XMPUtils *this, const char *a2)
{
  if (!this || !*(unsigned char *)this)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    int v6 = "Empty convert-from string";
    goto LABEL_10;
  }
  if (!strncmp((const char *)this, "0x", 2uLL)) {
    int v3 = sscanf((const char *)this, "%llx%c");
  }
  else {
    int v3 = sscanf((const char *)this, "%lld%c");
  }
  if (v3 != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    int v6 = "Invalid integer string";
LABEL_10:
    exception[1] = v6;
    *((unsigned char *)exception + 16) = 0;
  }
  return 0;
}

uint64_t XMPUtils::ConvertToDate(char *__s, uint64_t a2)
{
  if (!__s || !*__s)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    long long v43 = "Empty convert-from string";
    goto LABEL_103;
  }
  unint64_t v44 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0;
  size_t v4 = strlen(__s);
  unint64_t v5 = 0;
  if (*__s == 84) {
    goto LABEL_4;
  }
  if (v4 >= 2 && (__s[1] == 58 || v4 >= 3 && __s[2] == 58))
  {
LABEL_5:
    *(unsigned char *)(a2 + 25) = 1;
    int v6 = GatherInt(__s, &v44, "Invalid hour in date string");
    unint64_t v7 = v44;
    if (__s[v44] != 58)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      long long v43 = "Invalid date string, after hour";
      goto LABEL_103;
    }
    if (v6 >= 23) {
      int v8 = 23;
    }
    else {
      int v8 = v6;
    }
    *(_DWORD *)(a2 + 12) = v8;
    unint64_t v44 = v7 + 1;
    uint64_t result = GatherInt(__s, &v44, "Invalid minute in date string");
    unint64_t v10 = v44;
    int v11 = __s[v44];
    if (((v11 - 43) > 0x2F || ((1 << (v11 - 43)) & 0x800000008005) == 0) && v11 != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      long long v43 = "Invalid date string, after minute";
      goto LABEL_103;
    }
    if ((int)result >= 59) {
      int v14 = 59;
    }
    else {
      int v14 = result;
    }
    *(_DWORD *)(a2 + 16) = v14;
    int v15 = __s[v10];
    if (v15 == 58)
    {
      unint64_t v44 = v10 + 1;
      uint64_t result = GatherInt(__s, &v44, "Invalid whole seconds in date string");
      unint64_t v10 = v44;
      unsigned int v16 = __s[v44] - 43;
      if ((v16 > 0x2F || ((1 << v16) & 0x80000000000DLL) == 0) && __s[v44])
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        long long v43 = "Invalid date string, after whole seconds";
        goto LABEL_103;
      }
      int v17 = (int)result >= 59 ? 59 : result;
      *(_DWORD *)(a2 + 20) = v17;
      int v15 = __s[v10];
      if (v15 == 46)
      {
        unint64_t v18 = v10 + 1;
        unint64_t v44 = v10 + 1;
        uint64_t result = GatherInt(__s, &v44, "Invalid fractional seconds in date string");
        unint64_t v19 = v44;
        unsigned int v20 = __s[v44] - 43;
        if ((v20 > 0x2F || ((1 << v20) & 0x800000000005) == 0) && __s[v44])
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          long long v43 = "Invalid date string, after fractional second";
          goto LABEL_103;
        }
        unint64_t v21 = v44 - v18;
        if (v44 - v18 < 0xA)
        {
          if (v21 != 9)
          {
            uint64_t v30 = 0;
            uint64x2_t v31 = (uint64x2_t)vdupq_n_s64(v10 - v44 + 9);
            v32.i64[1] = 0x100000001;
            v32.i64[0] = result | 0x100000000;
            v33.i64[0] = 0xA0000000ALL;
            v33.i64[1] = 0xA0000000ALL;
            do
            {
              int8x16_t v34 = (int8x16_t)v32;
              int32x4_t v32 = vmulq_s32(v32, v33);
              v30 += 4;
            }
            while (((v10 - v44 + 13) & 0xFFFFFFFFFFFFFFFCLL) != v30);
            int8x16_t v35 = (int8x16_t)vdupq_n_s64(v30 - 4);
            int8x16_t v36 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v35, (int8x16_t)xmmword_18898C840), v31), (int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v35, (int8x16_t)xmmword_1889AE100), v31)), v34, (int8x16_t)v32);
            *(int32x2_t *)v36.i8 = vmul_s32(*(int32x2_t *)v36.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
            uint64_t result = (v36.i32[0] * v36.i32[1]);
          }
          if ((int)result >= 1000000000)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 4;
            long long v43 = "Fractional second is out of range";
            goto LABEL_103;
          }
        }
        else
        {
          do
          {
            uint64_t result = ((int)result / 10);
            --v21;
          }
          while (v21 > 9);
        }
        *(_DWORD *)(a2 + 36) = result;
        int v15 = __s[v19];
        unint64_t v10 = v19;
      }
    }
    if (!v15) {
      return result;
    }
    char v37 = 1;
    *(unsigned char *)(a2 + 26) = 1;
    int v38 = __s[v10];
    if (v38 != 43)
    {
      if (v38 != 45)
      {
        if (v38 != 90)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          long long v43 = "Time zone must begin with 'Z', '+', or '-'";
          goto LABEL_103;
        }
        unint64_t v39 = v10 + 1;
        goto LABEL_87;
      }
      char v37 = -1;
    }
    *(unsigned char *)(a2 + 27) = v37;
    unint64_t v44 = v10 + 1;
    int v40 = GatherInt(__s, &v44, "Invalid time zone hour in date string");
    unint64_t v41 = v44;
    if (__s[v44] != 58)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      long long v43 = "Invalid date string, after time zone hour";
      goto LABEL_103;
    }
    if (v40 >= 24)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      long long v43 = "Time zone hour is out of range";
      goto LABEL_103;
    }
    *(_DWORD *)(a2 + 28) = v40;
    unint64_t v44 = v41 + 1;
    uint64_t result = GatherInt(__s, &v44, "Invalid time zone minute in date string");
    if ((int)result >= 60)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      long long v43 = "Time zone minute is out of range";
      goto LABEL_103;
    }
    *(_DWORD *)(a2 + 32) = result;
    unint64_t v39 = v44;
LABEL_87:
    if (!__s[v39]) {
      return result;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    long long v43 = "Invalid date string, extra chars at end";
LABEL_103:
    exception[1] = v43;
    *((unsigned char *)exception + 16) = 0;
  }
  *(unsigned char *)(a2 + 24) = 1;
  if (*__s == 45) {
    unint64_t v44 = 1;
  }
  uint64_t result = GatherInt(__s, &v44, "Invalid year in date string");
  unint64_t v22 = v44;
  if (__s[v44] && __s[v44] != 45)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    long long v43 = "Invalid date string, after year";
    goto LABEL_103;
  }
  if (*__s == 45) {
    int v23 = -(int)result;
  }
  else {
    int v23 = result;
  }
  *(_DWORD *)a2 = v23;
  if (__s[v22])
  {
    unint64_t v44 = v22 + 1;
    uint64_t result = GatherInt(__s, &v44, "Invalid month in date string");
    unint64_t v24 = v44;
    if (__s[v44] && __s[v44] != 45)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      long long v43 = "Invalid date string, after month";
      goto LABEL_103;
    }
    int v25 = (int)result >= 12 ? 12 : result;
    BOOL v26 = (int)result >= 1 || *(_DWORD *)a2 == 0;
    int v27 = v26 ? v25 : 1;
    *(_DWORD *)(a2 + 4) = v27;
    if (__s[v24])
    {
      unint64_t v44 = v24 + 1;
      uint64_t result = GatherInt(__s, &v44, "Invalid day in date string");
      unint64_t v5 = v44;
      if (__s[v44] && __s[v44] != 84)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        long long v43 = "Invalid date string, after day";
        goto LABEL_103;
      }
      int v28 = (int)result >= 31 ? 31 : result;
      *(_DWORD *)(a2 + 8) = v28;
      if (__s[v5])
      {
        int v29 = *(_DWORD *)(a2 + 4);
        if (*(_DWORD *)a2 || v29 | v28)
        {
          if (v29 <= 0) {
            *(_DWORD *)(a2 + 4) = 1;
          }
          if (v28 <= 0) {
            *(_DWORD *)(a2 + 8) = 1;
          }
        }
        if (__s[v5] != 84)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          long long v43 = "Invalid date string, missing 'T' after date";
          goto LABEL_103;
        }
LABEL_4:
        unint64_t v44 = v5 + 1;
        goto LABEL_5;
      }
    }
  }
  return result;
}

uint64_t GatherInt(const char *a1, unint64_t *a2, const char *a3)
{
  uint64_t v3 = *a2;
  int v4 = a1[*a2];
  if ((v4 - 48) > 9) {
    goto LABEL_9;
  }
  uint64_t v6 = 0;
  uint64_t result = 0;
  int v8 = &a1[v3 + 1];
  do
  {
    uint64_t result = (v4 - 48) + 10 * result;
    if (result >= 0x80000000)
    {
      uint64_t v9 = a3;
      exception = __cxa_allocate_exception(0x18uLL);
      int v11 = 5;
      goto LABEL_8;
    }
    int v4 = v8[v6++];
  }
  while ((v4 - 48) < 0xA);
  if (!v6)
  {
LABEL_9:
    uint64_t v9 = a3;
    exception = __cxa_allocate_exception(0x18uLL);
    int v11 = 4;
LABEL_8:
    *(_DWORD *)exception = v11;
    exception[1] = v9;
    *((unsigned char *)exception + 16) = 0;
  }
  *a2 = v3 + v6;
  return result;
}

void XMPUtils::PackageForJPEG(const std::string *lpsrc, uint64_t a2, std::string *a3, std::string *a4)
{
  int v4 = a4;
  unint64_t v5 = a3;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  if (sUseNewCoreAPIs)
  {
    if (!v8) {
      __cxa_bad_cast();
    }
    XMPUtils::PackageForJPEG(v8, a2, v5, v4);
    return;
  }
  if (!a2 || !a3 || !a4) {
    XMPUtils::PackageForJPEG();
  }
  {
    XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen = 1;
  }
  memset(&__str, 0, sizeof(__str));
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v90 = 0u;
  memset(v89, 0, sizeof(v89));
  long long v88 = 0u;
  memset(v87, 0, sizeof(v87));
  XMPMeta::XMPMeta((XMPMeta *)v87);
  memset(v86, 0, sizeof(v86));
  long long v85 = 0u;
  memset(v84, 0, sizeof(v84));
  memset(v83, 0, sizeof(v83));
  XMPMeta::XMPMeta((XMPMeta *)v83);
  std::string::erase((std::string *)a2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::erase(v5, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::erase(v4, 0, 0xFFFFFFFFFFFFFFFFLL);
  (*(void (**)(const std::string *, std::string *, uint64_t, uint64_t, const char *, const char *, void))(lpsrc->__r_.__value_.__r.__words[0] + 208))(lpsrc, &__str, 2112, 1, "", "", 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ >= 0xFDE9)
    {
      DWORD2(v88) = lpsrc[9].__r_.__value_.__r.__words[2];
      std::string::operator=(v89, lpsrc + 10);
      std::string::operator=(&v89[1], lpsrc + 11);
      CloneOffspring((const XMP_Node *)&lpsrc[9].__r_.__value_.__r.__words[1], (void **)&v88, 0);
      if (XMPMeta::DoesPropertyExist((XMPMeta *)v87, "http://ns.adobe.com/xap/1.0/", "Thumbnails"))
      {
        XMPMeta::DeleteProperty((XMPMeta *)v87, "http://ns.adobe.com/xap/1.0/", "Thumbnails");
        XMPMeta::SerializeToBuffer((uint64_t)v87, &__str, 0x840u, 1u, "", "", 0);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
    {
      XMPMeta::SetProperty((XMPMeta *)v87, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP", "123456789-123456789-123456789-12", 0);
      *(void *)__dst.state = 0;
      uint64_t SchemaNode = FindSchemaNode(&v88, "http://ns.adobe.com/camera-raw-settings/1.0/", 0, &__dst);
      uint64_t v14 = SchemaNode;
      if (SchemaNode)
      {
        *(void *)(SchemaNode + 64) = v84;
        uint64_t v15 = v86[0];
        if (v86[0] >= v86[1])
        {
          uint64_t v23 = (uint64_t)(v86[0] - *((void *)&v85 + 1)) >> 3;
          if ((unint64_t)(v23 + 1) >> 61) {
            std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = (uint64_t)(v86[1] - *((void *)&v85 + 1)) >> 2;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if (v86[1] - *((void *)&v85 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25) {
            BOOL v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)&v86[1], v25);
          }
          else {
            BOOL v26 = 0;
          }
          int v27 = (uint64_t *)&v26[8 * v23];
          int v28 = &v26[8 * v25];
          uint64_t *v27 = v14;
          unsigned int v16 = v27 + 1;
          uint64_t v30 = (char *)*((void *)&v85 + 1);
          int v29 = (char *)v86[0];
          if (v86[0] != *((void *)&v85 + 1))
          {
            do
            {
              uint64_t v31 = *((void *)v29 - 1);
              v29 -= 8;
              *--int v27 = v31;
            }
            while (v29 != v30);
            int v29 = (char *)*((void *)&v85 + 1);
          }
          *((void *)&v85 + 1) = v27;
          v86[0] = v16;
          v86[1] = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)v86[0] = SchemaNode;
          unsigned int v16 = (void *)(v15 + 8);
        }
        v86[0] = v16;
        uint64_t v32 = *(void *)__dst.state;
        uint64_t v33 = v91 - (*(void *)__dst.state + 8);
        if ((void)v91 != *(void *)__dst.state + 8) {
          memmove(*(void **)__dst.state, (const void *)(*(void *)__dst.state + 8), v91 - (*(void *)__dst.state + 8));
        }
        *(void *)&long long v91 = v32 + v33;
        XMPMeta::SerializeToBuffer((uint64_t)v87, &__str, 0x840u, 1u, "", "", 0);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
      {
        if (MoveOneProperty((XMPMeta *)v87, (XMPMeta *)v83, "http://ns.adobe.com/photoshop/1.0/", "photoshop:History"))XMPMeta::SerializeToBuffer((uint64_t)v87, &__str, 0x840u, 1u, "", "", 0); {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
        }
        {
          v76 = v5;
          int v81 = 0;
          uint64_t v82 = 0;
          *(void *)std::string::size_type v80 = &v81;
          if ((void)v91 != *((void *)&v90 + 1))
          {
            uint64_t v34 = (uint64_t)(v91 - *((void *)&v90 + 1)) >> 3;
            while (1)
            {
              uint64_t v77 = v34 - 1;
              uint64_t v35 = *(void *)(*((void *)&v90 + 1) + 8 * (v34 - 1));
              uint64_t v36 = *(void *)(v35 + 80) - *(void *)(v35 + 72);
              if (v36) {
                break;
              }
LABEL_124:
              uint64_t v34 = v77;
              if (!v77) {
                goto LABEL_125;
              }
            }
            uint64_t v37 = v36 >> 3;
            while (1)
            {
              --v37;
              uint64_t v38 = *(void *)(*(void *)(v35 + 72) + 8 * v37);
              int v39 = *(char *)(v35 + 39);
              if (v39 < 0)
              {
                if (*(void *)(v35 + 24) != 29) {
                  break;
                }
                int v40 = *(uint64_t **)(v35 + 16);
              }
              else
              {
                int v40 = (uint64_t *)(v35 + 16);
                if (v39 != 29) {
                  break;
                }
              }
              uint64_t v41 = *v40;
              uint64_t v42 = v40[1];
              uint64_t v43 = v40[2];
              uint64_t v44 = *(uint64_t *)((char *)v40 + 21);
              BOOL v45 = v41 == 0x6E2F2F3A70747468 && v42 == 0x2E65626F64612E73;
              BOOL v46 = v45 && v43 == 0x2F706D782F6D6F63;
              if (!v46 || v44 != 0x2F65746F6E2F706DLL) {
                break;
              }
              std::string::size_type v54 = (void *)(v38 + 16);
              int v55 = *(char *)(v38 + 39);
              if (v55 < 0)
              {
                if (*(void *)(v38 + 24) != 22) {
                  break;
                }
                std::string::size_type v54 = (void *)*v54;
              }
              else if (v55 != 22)
              {
                break;
              }
              uint64_t v56 = (void *)*v54;
              uint64_t v57 = v54[1];
              uint64_t v58 = *(void *)((char *)v54 + 14);
              BOOL v59 = v56 == (void *)0x3A65746F4E706D78 && v57 == 0x6E65747845736148;
              if (!v59 || v58 != 0x504D586465646E65) {
                break;
              }
LABEL_108:
              if (!v37) {
                goto LABEL_124;
              }
            }
            unint64_t v48 = EstimateSizeForJPEG((const XMP_Node *)v38);
            *(void *)__dst.state = v48;
            *(void *)&__dst.state[2] = v35 + 16;
            *(void *)__dst.count = v38 + 16;
            uint64_t v49 = v81;
            uint64_t v50 = &v81;
            if (v81)
            {
              uint64_t v50 = &v81;
              do
              {
                unint64_t v51 = v49[4];
                BOOL v52 = v48 >= v51;
                if (v48 >= v51) {
                  std::string::size_type v53 = v49 + 1;
                }
                else {
                  std::string::size_type v53 = v49;
                }
                if (!v52) {
                  uint64_t v50 = v49;
                }
                uint64_t v49 = (void *)*v53;
              }
              while (*v53);
            }
            std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__emplace_hint_multi<std::pair<unsigned long const,std::pair<std::string *,std::string *>> &>((uint64_t **)v80, v50, (uint64_t)&__dst);
            goto LABEL_108;
          }
LABEL_125:
          std::string::size_type v61 = "moved";
          std::string::size_type v62 = "MoveLargestProperty";
LABEL_126:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_ >= 0xFDE9 && v82 != 0)
            {
              while (1)
              {
                unint64_t v65 = *(uint64_t **)v80;
                char v66 = *(uint64_t **)(*(void *)v80 + 8);
                uint64_t v67 = *(uint64_t **)v80;
                if (v66)
                {
                  do
                  {
                    v68 = v66;
                    char v66 = (uint64_t *)*v66;
                  }
                  while (v66);
                }
                else
                {
                  do
                  {
                    v68 = (uint64_t *)v67[2];
                    BOOL v45 = *v68 == (void)v67;
                    uint64_t v67 = v68;
                  }
                  while (!v45);
                }
                while (v68 != (uint64_t *)&v81)
                {
                  unint64_t v65 = v68;
                  uint64_t v69 = (uint64_t *)v68[1];
                  size_t v70 = v68;
                  if (v69)
                  {
                    do
                    {
                      v68 = v69;
                      uint64_t v69 = (uint64_t *)*v69;
                    }
                    while (v69);
                  }
                  else
                  {
                    do
                    {
                      v68 = (uint64_t *)v70[2];
                      BOOL v45 = *v68 == (void)v70;
                      size_t v70 = v68;
                    }
                    while (!v45);
                  }
                }
                std::string::size_type v71 = (char *)v65[5];
                if (v71[23] < 0) {
                  std::string::size_type v71 = *(char **)v71;
                }
                v72 = (char *)v65[6];
                if (v72[23] < 0) {
                  v72 = *(char **)v72;
                }
                std::string::size_type v73 = v65[4];
                if (!MoveOneProperty((XMPMeta *)v87, (XMPMeta *)v83, v71, v72)) {
                  break;
                }
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)v80, v65);
                operator delete(v65);
                if (!v73)
                {
                  int v75 = 2985;
                  std::string::size_type v62 = "PackageForJPEG";
                  std::string::size_type v61 = "propSize > 0";
LABEL_160:
                  __assert_rtn(v62, "XMPUtils.cpp", v75, v61);
                }
                if (size >= v73) {
                  size -= v73;
                }
                else {
                  std::string::size_type size = 0;
                }
                if (size < 0xFDE9 || !v82)
                {
                  XMPMeta::SerializeToBuffer((uint64_t)v87, &__str, 0x840u, 1u, "", "", 0);
                  goto LABEL_126;
                }
              }
              int v75 = 1893;
              goto LABEL_160;
            }
          }
          std::__tree<unsigned long long>::destroy((uint64_t)v80, v81);
          unint64_t v5 = v76;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 110;
            exception[1] = "Can't reduce XMP enough for JPEG file";
            *((unsigned char *)exception + 16) = 0;
          }
        }
      }
    }
  }
  if (*((void *)&v85 + 1) == v86[0])
  {
    std::string::operator=((std::string *)a2, &__str);
  }
  else
  {
    XMPMeta::SerializeToBuffer((uint64_t)v83, &__str, 0x850u, 0, "", "", 0);
    std::string::operator=(v5, &__str);
    *(void *)std::string::size_type v80 = 0;
    memset(&__dst, 0, sizeof(__dst));
    int v81 = 0;
    MD5Init(&__dst);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      unsigned int v10 = __str.__r_.__value_.__r.__words[1];
    }
    MD5Update(&__dst, (unsigned __int8 *)p_str, v10);
    MD5Final(v80, &__dst);
    std::string::reserve(v4, 0x20uLL);
    for (uint64_t i = 0; i != 16; ++i)
    {
      unint64_t v12 = v80[i];
      std::string::push_back(v4, a0123456789abcd[v12 >> 4]);
      std::string::push_back(v4, a0123456789abcd[v12 & 0xF]);
    }
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0) {
      int v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    }
    XMPMeta::SetProperty((XMPMeta *)v87, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP", (char *)v4, 0);
    XMPMeta::SerializeToBuffer((uint64_t)v87, &__str, 0x840u, 1u, "", "", 0);
    std::string::operator=((std::string *)a2, &__str);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v17 = *(void *)(a2 + 8);
    if (XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen) {
      unint64_t v18 = 19;
    }
    else {
      unint64_t v18 = 0;
    }
    if (v17 > v18 && v17 <= 0xFDE8)
    {
      uint64_t v19 = -19;
      if (!XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen) {
        uint64_t v19 = 0;
      }
      unint64_t v20 = *(void *)a2 + v17;
      goto LABEL_50;
    }
LABEL_161:
    __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3042, "(stdStr->size() > kTrailerLen) && (stdStr->size() <= kStdXMPLimit)");
  }
  unint64_t v17 = *(unsigned __int8 *)(a2 + 23);
  if (XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen) {
    unint64_t v18 = 19;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18 >= v17) {
    goto LABEL_161;
  }
  uint64_t v19 = -19;
  if (!XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen) {
    uint64_t v19 = 0;
  }
  unint64_t v20 = a2 + v17;
LABEL_50:
  if (strcmp((const char *)(v20 + v19), "<?xpacket end=\"w\"?>")) {
    __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3044, "(strcmp((packetEnd),(kPacketTrailer)) == 0)");
  }
  std::string::erase((std::string *)a2, v17 - v18, 0xFFFFFFFFFFFFFFFFLL);
  if (65000 - v17 >= 0x7FF) {
    std::string::size_type v22 = 2047;
  }
  else {
    std::string::size_type v22 = 65000 - v17;
  }
  std::string::append((std::string *)a2, v22, 32);
  std::string::append((std::string *)a2, "<?xpacket end=\"w\"?>");
  XMPMeta::~XMPMeta((XMPMeta *)v83);
  XMPMeta::~XMPMeta((XMPMeta *)v87);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_188810048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void XMPUtils::PackageForJPEG(void *a1, uint64_t a2, std::string *a3, std::string *a4)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3 || (unint64_t v5 = a4) == 0) {
    XMPUtils::PackageForJPEG();
  }
  {
    XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen = 1;
  }
  memset(&__str, 0, sizeof(__str));
  long long v90 = 0u;
  long long v89 = 0u;
  long long v88 = 0u;
  long long v87 = 0u;
  memset(v86, 0, sizeof(v86));
  XMPMeta2::XMPMeta2((XMPMeta2 *)v86);
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  memset(v81, 0, sizeof(v81));
  XMPMeta2::XMPMeta2((XMPMeta2 *)v81);
  std::string::erase((std::string *)a2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::erase(a3, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::erase(v5, 0, 0xFFFFFFFFFFFFFFFFLL);
  (*(void (**)(void *, std::string *, uint64_t, uint64_t, const char *, const char *, void))(*a1 + 208))(a1, &__str, 2112, 1, "", "", 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ >= 0xFDE9)
    {
      (*(void (**)(std::vector<std::string> *__return_ptr))(*(void *)(a1[50]
                                                                                 + *(void *)(*(void *)a1[50] - 544))
                                                                     + 264))(&v80);
      (*((void (**)(MD5_CTX *__return_ptr))v80.__begin_->__r_.__value_.__l.__data_ + 32))(&__v);
      long long v12 = *(_OWORD *)__v.state;
      *(void *)__v.state = 0;
      *(void *)&__v.state[2] = 0;
      long long v13 = (std::__shared_weak_count *)*((void *)&v87 + 1);
      long long v87 = v12;
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        if (*(void *)&__v.state[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__v.state[2]);
        }
      }
      if (v80.__end_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v80.__end_);
      }
      if (XMPMeta2::DoesPropertyExist((XMPMeta2 *)v86, "http://ns.adobe.com/xap/1.0/", "Thumbnails"))
      {
        XMPMeta2::DeleteProperty((XMPMeta2 *)v86, "http://ns.adobe.com/xap/1.0/", "Thumbnails");
        XMPMeta2::SerializeToBuffer((uint64_t)v86, (uint64_t)&__str);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
    {
      XMPMeta2::SetProperty((XMPMeta2 *)v86, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP", "123456789-123456789-123456789-12", 0);
      uint64_t v14 = (void *)v87;
      if ((void)v87) {
        uint64_t v14 = (void *)(v87 + *(void *)(*(void *)v87 - 792));
      }
      uint64_t v15 = (std::__shared_weak_count *)*((void *)&v87 + 1);
      if (*((void *)&v87 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v87 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v68 = v15;
      memset(&v80, 0, sizeof(v80));
      long long v78 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)((char *)v14 + *(void *)(*v14 - 688)) + 552))(&v78);
      for (uint64_t i = v78; (void)v78; uint64_t i = v78)
      {
        while (1)
        {
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          (*(void (**)(MD5_CTX *__return_ptr))(*(void *)i + 48))(&__v);
          (*(void (**)(uint64_t *__return_ptr))(**(void **)__v.state + 264))(&v76);
          if (*(void *)&__v.state[2]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__v.state[2]);
          }
          (*(void (**)(MD5_CTX *__return_ptr))(*(void *)v76 + 88))(&__v);
          unint64_t v17 = (const char *)(*(uint64_t (**)(void))(**(void **)__v.state + 192))(*(void *)__v.state);
          int v18 = strcmp(v17, "http://ns.adobe.com/camera-raw-settings/1.0/");
          if (*(void *)&__v.state[2]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__v.state[2]);
          }
          if (!v18)
          {
            (*(void (**)(void, uint64_t *))(*(void *)(v82 + *(void *)(*(void *)v82 - 688)) + 520))(v82 + *(void *)(*(void *)v82 - 688), &v76);
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v76 + 72))(&v71);
            uint64_t v19 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v71 + 192))(v71);
            std::string::basic_string[abi:ne180100]<0>(__p, v19);
            std::vector<std::string>::pointer end = v80.__end_;
            if (v80.__end_ >= v80.__end_cap_.__value_)
            {
              unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v80.__end_ - (char *)v80.__begin_) >> 3);
              unint64_t v23 = v22 + 1;
              if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 3) > v23) {
                unint64_t v23 = 0x5555555555555556 * (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v24 = v23;
              }
              *(void *)&__v.buffer[8] = &v80.__end_cap_;
              if (v24) {
                unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v80.__end_cap_, v24);
              }
              else {
                unint64_t v25 = 0;
              }
              BOOL v26 = &v25[24 * v22];
              *(void *)__v.state = v25;
              *(void *)&__v.state[2] = v26;
              *(void *)__v.buffer = &v25[24 * v24];
              long long v27 = *(_OWORD *)__p;
              *((void *)v26 + 2) = v74;
              *(_OWORD *)BOOL v26 = v27;
              __p[1] = 0;
              std::string::size_type v74 = 0;
              __p[0] = 0;
              *(void *)__v.count = v26 + 24;
              std::vector<std::string>::__swap_out_circular_buffer(&v80, (std::__split_buffer<std::string> *)&__v);
              int v28 = v80.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              v80.__end_ = v28;
              if (SHIBYTE(v74) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v21 = *(_OWORD *)__p;
              v80.__end_->__r_.__value_.__r.__words[2] = v74;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v21;
              __p[1] = 0;
              std::string::size_type v74 = 0;
              __p[0] = 0;
              v80.__end_ = end + 1;
            }
            if (v72) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v72);
            }
          }
          if (v77) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v77);
          }
          (*(void (**)(MD5_CTX *__return_ptr))(*(void *)v78 + 56))(&__v);
          long long v29 = *(_OWORD *)__v.state;
          *(void *)__v.state = 0;
          *(void *)&__v.state[2] = 0;
          uint64_t v30 = (std::__shared_weak_count *)*((void *)&v78 + 1);
          long long v78 = v29;
          if (v30) {
            break;
          }
          uint64_t i = v29;
          if (!(void)v29) {
            goto LABEL_61;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        if (*(void *)&__v.state[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__v.state[2]);
        }
      }
LABEL_61:
      if (*((void *)&v78 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
      }
      if (v80.__end_ != v80.__begin_)
      {
        uint64_t v31 = 0;
        int64_t v32 = v80.__end_ - v80.__begin_;
        do
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)(v87 + *(void *)(*(void *)v87 - 792)) + 672))(&v69);
          if (v70) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          }
          v31 += 24;
          --v32;
        }
        while (v32);
        if (v80.__end_ != v80.__begin_) {
          XMPMeta2::SerializeToBuffer((uint64_t)v86, (uint64_t)&__str);
        }
      }
      *(void *)__v.state = &v80;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      if (v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
      {
        if (MoveOneProperty((uint64_t)v86, (uint64_t)v81, (uint64_t)"http://ns.adobe.com/photoshop/1.0/", (uint64_t)"History"))
        {
          XMPMeta2::SerializeToBuffer((uint64_t)v86, (uint64_t)&__str);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
        {
          v80.__end_ = 0;
          v80.__end_cap_.__value_ = 0;
          v80.__begin_ = (std::vector<std::string>::pointer)&v80.__end_;
          uint64_t v33 = (void *)v87;
          if ((void)v87) {
            uint64_t v33 = (void *)(v87 + *(void *)(*(void *)v87 - 792));
          }
          uint64_t v34 = (std::__shared_weak_count *)*((void *)&v87 + 1);
          if (*((void *)&v87 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v87 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          __p[0] = 0;
          __p[1] = 0;
          (*(void (**)(void **__return_ptr))(*(void *)((char *)v33 + *(void *)(*v33 - 688)) + 552))(__p);
          for (j = __p[0]; __p[0]; j = __p[0])
          {
            while (1)
            {
              (*(void (**)(long long *__return_ptr))(*(void *)j + 48))(&v78);
              (*(void (**)(MD5_CTX *__return_ptr))(*(void *)v78 + 88))(&__v);
              uint64_t v36 = (const char *)(*(uint64_t (**)(void))(**(void **)__v.state + 192))(*(void *)__v.state);
              if (!strcmp(v36, "http://ns.adobe.com/xmp/note/"))
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v78 + 72))(&v76);
                uint64_t v38 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v76 + 192))(v76);
                BOOL v37 = strcmp(v38, "HasExtendedXMP") == 0;
                if (v77) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v77);
                }
              }
              else
              {
                BOOL v37 = 0;
              }
              if (*(void *)&__v.state[2]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__v.state[2]);
              }
              if (!v37)
              {
                unint64_t v39 = EstimateSizeForJPEG(&v78);
                (*(void (**)(MD5_CTX *__return_ptr))(*(void *)v78 + 88))(&__v);
                uint64_t v40 = (*(uint64_t (**)(void))(**(void **)__v.state + 192))(*(void *)__v.state);
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v78 + 72))(&v76);
                uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 192))(v76);
                if (v77) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v77);
                }
                if (*(void *)&__v.state[2]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__v.state[2]);
                }
                *(void *)__v.state = v39;
                *(void *)&__v.state[2] = v40;
                *(void *)__v.count = v41;
                p_std::vector<std::string>::pointer end = &v80.__end_;
                std::vector<std::string>::pointer v43 = v80.__end_;
                if (v80.__end_)
                {
                  p_std::vector<std::string>::pointer end = &v80.__end_;
                  do
                  {
                    std::string::size_type size = v43[1].__r_.__value_.__l.__size_;
                    BOOL v45 = v39 >= size;
                    if (v39 >= size) {
                      BOOL v46 = (std::string::__raw *)&v43->__r_.__value_.__r.__words[1];
                    }
                    else {
                      BOOL v46 = (std::string::__raw *)v43;
                    }
                    if (!v45) {
                      p_std::vector<std::string>::pointer end = (std::vector<std::string>::pointer *)v43;
                    }
                    std::vector<std::string>::pointer v43 = (std::vector<std::string>::pointer)v46->__words[0];
                  }
                  while (v46->__words[0]);
                }
                std::__tree<std::__value_type<unsigned long,std::pair<char const*,char const*>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<char const*,char const*>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<char const*,char const*>>>>::__emplace_hint_multi<std::pair<unsigned long const,std::pair<char const*,char const*>> &>((uint64_t **)&v80, p_end, (uint64_t)&__v);
              }
              if (*((void *)&v78 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
              }
              (*(void (**)(MD5_CTX *__return_ptr))(*(void *)__p[0] + 56))(&__v);
              long long v47 = *(_OWORD *)__v.state;
              *(void *)__v.state = 0;
              *(void *)&__v.state[2] = 0;
              unint64_t v48 = (std::__shared_weak_count *)__p[1];
              *(_OWORD *)__p = v47;
              if (v48) {
                break;
              }
              j = (void *)v47;
              if (!(void)v47) {
                goto LABEL_111;
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
            if (*(void *)&__v.state[2]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__v.state[2]);
            }
          }
LABEL_111:
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
          if (v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          }
          uint64_t v49 = "MoveLargestProperty";
LABEL_116:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v50 = __str.__r_.__value_.__l.__size_;
            BOOL v51 = __str.__r_.__value_.__l.__size_ < 0xFDE9 || v80.__end_cap_.__value_ == 0;
            if (!v51)
            {
              while (1)
              {
                std::vector<std::string>::pointer begin = v80.__begin_;
                std::string::size_type v53 = (std::vector<std::string> *)v80.__begin_->__r_.__value_.__l.__size_;
                std::vector<std::string>::pointer v54 = v80.__begin_;
                if (v53)
                {
                  do
                  {
                    value = v53;
                    std::string::size_type v53 = (std::vector<std::string> *)v53->__begin_;
                  }
                  while (v53);
                }
                else
                {
                  do
                  {
                    value = (std::vector<std::string> *)v54->__r_.__value_.__r.__words[2];
                    BOOL v51 = value->__begin_ == v54;
                    std::vector<std::string>::pointer v54 = (std::vector<std::string>::pointer)value;
                  }
                  while (!v51);
                }
                while (value != (std::vector<std::string> *)&v80.__end_)
                {
                  std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)value;
                  uint64_t v56 = (std::string::__raw *)value->__end_;
                  uint64_t v57 = value;
                  if (v56)
                  {
                    do
                    {
                      value = (std::vector<std::string> *)v56;
                      uint64_t v56 = (std::string::__raw *)v56->__words[0];
                    }
                    while (v56);
                  }
                  else
                  {
                    do
                    {
                      value = (std::vector<std::string> *)v57->__end_cap_.__value_;
                      BOOL v51 = value->__begin_ == (std::vector<std::string>::pointer)v57;
                      uint64_t v57 = value;
                    }
                    while (!v51);
                  }
                }
                std::string::size_type v58 = begin[1].__r_.__value_.__l.__size_;
                if (!MoveOneProperty((uint64_t)v86, (uint64_t)v81, begin[1].__r_.__value_.__r.__words[2], (uint64_t)begin[2].__r_.__value_.__l.__data_))break; {
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)&v80, (uint64_t *)begin);
                }
                operator delete(begin);
                if (!v58)
                {
                  int v66 = 3202;
                  uint64_t v49 = "PackageForJPEG";
                  uint64_t v67 = "propSize > 0";
LABEL_172:
                  __assert_rtn(v49, "XMPUtils.cpp", v66, v67);
                }
                if (v50 >= v58) {
                  v50 -= v58;
                }
                else {
                  std::string::size_type v50 = 0;
                }
                if (v50 < 0xFDE9 || !v80.__end_cap_.__value_)
                {
                  XMPMeta2::SerializeToBuffer((uint64_t)v86, (uint64_t)&__str);
                  goto LABEL_116;
                }
              }
              int v66 = 1857;
              uint64_t v67 = "moved";
              goto LABEL_172;
            }
          }
          std::__tree<unsigned long long>::destroy((uint64_t)&v80, v80.__end_->__r_.__value_.__r.__words);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 110;
            exception[1] = "Can't reduce XMP enough for JPEG file";
            *((unsigned char *)exception + 16) = 0;
          }
        }
      }
    }
  }
  if ((*(uint64_t (**)(void))(*(void *)(v82 + *(void *)(*(void *)v82 - 688)) + 560))(v82 + *(void *)(*(void *)v82 - 688)))
  {
    XMPMeta2::SerializeToBuffer((uint64_t)v81, (uint64_t)&__str);
    std::string::operator=(a3, &__str);
    v80.__begin_ = 0;
    memset(&__v, 0, sizeof(__v));
    v80.__end_ = 0;
    MD5Init(&__v);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      unsigned int v9 = __str.__r_.__value_.__r.__words[1];
    }
    MD5Update(&__v, (unsigned __int8 *)p_str, v9);
    MD5Final((unsigned __int8 *)&v80, &__v);
    std::string::reserve(v5, 0x20uLL);
    for (uint64_t k = 0; k != 16; ++k)
    {
      unint64_t v11 = *((unsigned __int8 *)&v80.__begin_ + k);
      std::string::push_back(v5, a0123456789abcd[v11 >> 4]);
      std::string::push_back(v5, a0123456789abcd[v11 & 0xF]);
    }
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0) {
      unint64_t v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
    }
    XMPMeta2::SetProperty((XMPMeta2 *)v86, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP", (char *)v5, 0);
    XMPMeta2::SerializeToBuffer((uint64_t)v86, (uint64_t)&__str);
    std::string::operator=((std::string *)a2, &__str);
  }
  else
  {
    std::string::operator=((std::string *)a2, &__str);
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    unint64_t v59 = *(unsigned __int8 *)(a2 + 23);
    if (XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen) {
      unint64_t v60 = 19;
    }
    else {
      unint64_t v60 = 0;
    }
    if (v60 < v59)
    {
      uint64_t v61 = -19;
      if (!XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen) {
        uint64_t v61 = 0;
      }
      unint64_t v62 = a2 + v59;
      goto LABEL_160;
    }
LABEL_173:
    __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3260, "(stdStr->size() > kTrailerLen) && (stdStr->size() <= kStdXMPLimit)");
  }
  unint64_t v59 = *(void *)(a2 + 8);
  if (XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen) {
    unint64_t v60 = 19;
  }
  else {
    unint64_t v60 = 0;
  }
  if (v59 <= v60 || v59 > 0xFDE8) {
    goto LABEL_173;
  }
  uint64_t v61 = -19;
  if (!XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen) {
    uint64_t v61 = 0;
  }
  unint64_t v62 = *(void *)a2 + v59;
LABEL_160:
  if (strcmp((const char *)(v62 + v61), "<?xpacket end=\"w\"?>")) {
    __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3262, "(strcmp((packetEnd),(kPacketTrailer)) == 0)");
  }
  std::string::erase((std::string *)a2, v59 - v60, 0xFFFFFFFFFFFFFFFFLL);
  if (65000 - v59 >= 0x7FF) {
    std::string::size_type v64 = 2047;
  }
  else {
    std::string::size_type v64 = 65000 - v59;
  }
  std::string::append((std::string *)a2, v64, 32);
  std::string::append((std::string *)a2, "<?xpacket end=\"w\"?>");
  XMPMeta2::~XMPMeta2((XMPMeta2 *)v81);
  XMPMeta2::~XMPMeta2((XMPMeta2 *)v86);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_188811128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,void *a40,uint64_t a41,char a42)
{
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::__tree<unsigned long long>::destroy((uint64_t)&a39, a40);
  XMPMeta2::~XMPMeta2((XMPMeta2 *)&a42);
  XMPMeta2::~XMPMeta2((XMPMeta2 *)&STACK[0x2C0]);
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MoveOneProperty(XMPMeta *a1, XMPMeta *a2, char *__s, char *a4)
{
  MD5_CTX __dst = 0;
  uint64_t result = FindSchemaNode((void *)a1 + 28, __s, 0, 0);
  if (result)
  {
    int v8 = (void *)result;
    uint64_t result = FindChildNode(result, a4, 0, &__dst);
    if (result)
    {
      uint64_t v9 = result;
      uint64_t SchemaNode = FindSchemaNode((void *)a2 + 28, __s, 1, 0);
      *(void *)(v9 + 64) = SchemaNode;
      *(_DWORD *)(SchemaNode + 8) &= ~0x8000u;
      unint64_t v11 = *(uint64_t **)(SchemaNode + 80);
      unint64_t v12 = *(void *)(SchemaNode + 88);
      if ((unint64_t)v11 >= v12)
      {
        uint64_t v14 = *(void *)(SchemaNode + 72);
        uint64_t v15 = ((uint64_t)v11 - v14) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v12 - v14;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(SchemaNode + 88, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = (uint64_t *)&v19[8 * v15];
        long long v21 = &v19[8 * v18];
        *unint64_t v20 = v9;
        long long v13 = v20 + 1;
        unint64_t v23 = *(char **)(SchemaNode + 72);
        unint64_t v22 = *(char **)(SchemaNode + 80);
        if (v22 != v23)
        {
          do
          {
            uint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *--unint64_t v20 = v24;
          }
          while (v22 != v23);
          unint64_t v22 = *(char **)(SchemaNode + 72);
        }
        *(void *)(SchemaNode + 72) = v20;
        *(void *)(SchemaNode + 80) = v13;
        *(void *)(SchemaNode + 88) = v21;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *unint64_t v11 = v9;
        long long v13 = v11 + 1;
      }
      *(void *)(SchemaNode + 80) = v13;
      unint64_t v25 = (char *)__dst;
      BOOL v26 = (unsigned char *)v8[10];
      int64_t v27 = v26 - ((unsigned char *)__dst + 8);
      if (v26 != (char *)__dst + 8) {
        memmove(__dst, (char *)__dst + 8, v26 - ((unsigned char *)__dst + 8));
      }
      v8[10] = &v25[v27];
      DeleteEmptySchema(v8);
      return 1;
    }
  }
  return result;
}

BOOL MoveOneProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *(void **)(a1 + 400);
  if (v7) {
    int v8 = (char *)v7 + *(void *)(*v7 - 544);
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 408);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    (*(void (**)(uint64_t *__return_ptr, char *))(*(void *)v8 + 240))(&v22, v8);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v22 + 648))(&v24);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    BOOL v10 = v24 != 0;
    if (v24)
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v24 + 264))(&v22);
      unint64_t v11 = *(void **)(a2 + 400);
      if (v11) {
        unint64_t v12 = (char *)v11 + *(void *)(*v11 - 792);
      }
      else {
        unint64_t v12 = 0;
      }
      long long v13 = *(std::__shared_weak_count **)(a2 + 408);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 648))(&v20, v12, a3, -1, a4, -1);
      uint64_t v14 = v20;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (v14)
      {
        (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12
                                                                                                  + 672))(&v18, v12, a3, -1, a4, -1);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
      }
      (*(void (**)(char *, uint64_t *))(*(void *)&v12[*(void *)(*(void *)v12 - 688)] + 520))(&v12[*(void *)(*(void *)v12 - 688)], &v22);
      (*(void (**)(uint64_t *__return_ptr, char *))(*(void *)v8 + 240))(&v20, v8);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v20 + 672))(&v16);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v10;
}

void sub_1888117A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPUtils::MergeFromJPEG(XMPUtils *this, XMPMeta *a2, const XMPMeta *a3)
{
  XMPUtils::ApplyTemplate(this, a2, (const XMPMeta *)3);
  int v4 = *(uint64_t (**)(XMPUtils *, const char *, const char *))(*(void *)this + 80);

  return v4(this, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP");
}

uint64_t XMPUtils::ConvertToUTCTime(uint64_t a1)
{
  if (!a1) {
    XMPUtils::ConvertToUTCTime();
  }
  uint64_t result = VerifyDateTimeFlags(a1);
  if (*(unsigned char *)(a1 + 26))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 28);
    if (v3 >= 0x18) {
      XMPUtils::ConvertToUTCTime();
    }
    unsigned int v4 = *(_DWORD *)(a1 + 32);
    if (v4 >= 0x3C) {
      XMPUtils::ConvertToUTCTime();
    }
    int v5 = *(unsigned __int8 *)(a1 + 27);
    if ((v5 - 2) <= 0xFC) {
      XMPUtils::ConvertToUTCTime();
    }
    int v6 = v4 | v3;
    if (*(unsigned char *)(a1 + 27))
    {
      if (v6)
      {
        if (v5 == 255)
        {
          unsigned int v7 = *(_DWORD *)(a1 + 12) + v3;
          unsigned int v8 = *(_DWORD *)(a1 + 16) + v4;
          goto LABEL_14;
        }
        if (v5 == 1)
        {
          unsigned int v7 = *(_DWORD *)(a1 + 12) - v3;
          unsigned int v8 = *(_DWORD *)(a1 + 16) - v4;
LABEL_14:
          *(_DWORD *)(a1 + 12) = v7;
          *(_DWORD *)(a1 + 16) = v8;
        }
LABEL_15:
        uint64_t result = AdjustTimeOverflow(a1);
        *(unsigned char *)(a1 + 35) = 0;
        *(void *)(a1 + 27) = 0;
        return result;
      }
    }
    else if (!v6)
    {
      goto LABEL_15;
    }
    XMPUtils::ConvertToUTCTime();
  }
  return result;
}

uint64_t AdjustTimeOverflow(uint64_t result)
{
  v1 = (_DWORD *)result;
  int v2 = *(_DWORD *)(result + 4);
  if (!*(void *)result)
  {
    int v2 = 0;
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    if (!*(_DWORD *)(result + 8)) {
      goto LABEL_32;
    }
    goto LABEL_5;
  }
  int v4 = *(_DWORD *)result;
  int v3 = *(_DWORD *)(result + 4);
  if (v2 <= 0)
  {
LABEL_5:
    if (v2 <= -11) {
      int v6 = -11;
    }
    else {
      int v6 = v2;
    }
    if (v2 >= -11) {
      int v7 = v2;
    }
    else {
      int v7 = v2 + 1;
    }
    unsigned int v8 = (v6 - v7) / 0xCu;
    if (v2 < -11) {
      ++v8;
    }
    int v4 = *(_DWORD *)result + ~v8;
    int v3 = v2 + 12 * v8 + 12;
    *(_DWORD *)uint64_t result = v4;
    *(_DWORD *)(result + 4) = v3;
  }
  if (v3 >= 13)
  {
    if (v3 >= 24) {
      int v9 = 24;
    }
    else {
      int v9 = v3;
    }
    unsigned int v10 = v3 - v9 + 11;
    v4 += v10 / 0xC + 1;
    int v3 = v3 - 12 * (v10 / 0xC) - 12;
    *(_DWORD *)uint64_t result = v4;
    *(_DWORD *)(result + 4) = v3;
  }
  int v5 = *(_DWORD *)(result + 8);
  if (v5 <= 0)
  {
    do
    {
      if (v3 > 1)
      {
        --v3;
      }
      else
      {
        _DWORD *v1 = --v4;
        v3 += 11;
      }
      uint64_t result = DaysInMonth(v4, v3);
      v5 += result;
    }
    while (v5 < 1);
    v1[1] = v3;
    v1[2] = v5;
  }
  else
  {
    uint64_t result = DaysInMonth(v4, v3);
  }
  if (v5 > (int)result)
  {
    do
    {
      if (v3 < 12)
      {
        ++v3;
      }
      else
      {
        _DWORD *v1 = ++v4;
        v3 -= 11;
      }
      v5 -= result;
      uint64_t result = DaysInMonth(v4, v3);
    }
    while (v5 > (int)result);
    v1[1] = v3;
    v1[2] = v5;
  }
LABEL_32:
  int v11 = v1[3];
  if (v11 < 0)
  {
    if (v11 <= -24) {
      int v12 = -24;
    }
    else {
      int v12 = v1[3];
    }
    if (v11 >= 0xFFFFFFE8) {
      int v13 = v1[3];
    }
    else {
      int v13 = v11 + 1;
    }
    unsigned int v14 = (v12 - v13) / 0x18u;
    if (v11 < 0xFFFFFFE8) {
      ++v14;
    }
    v5 += ~v14;
    v11 += 24 * v14 + 24;
    v1[2] = v5;
    v1[3] = v11;
  }
  if (v11 >= 24)
  {
    if (v11 >= 47) {
      int v15 = 47;
    }
    else {
      int v15 = v11;
    }
    unsigned int v16 = (v11 - v15 + 23) / 0x18u;
    v5 += v16 + 1;
    int v11 = v11 - 24 * v16 - 24;
    v1[2] = v5;
    v1[3] = v11;
  }
  int v17 = v1[4];
  if (v17 < 0)
  {
    if (v17 <= -60) {
      int v18 = -60;
    }
    else {
      int v18 = v1[4];
    }
    if (v17 >= 0xFFFFFFC4) {
      int v19 = v1[4];
    }
    else {
      int v19 = v17 + 1;
    }
    unsigned int v20 = (v18 - v19) / 0x3Cu;
    if (v17 < 0xFFFFFFC4) {
      ++v20;
    }
    v11 += ~v20;
    v17 += 60 * v20 + 60;
    v1[3] = v11;
    v1[4] = v17;
  }
  if (v17 >= 60)
  {
    if (v17 >= 119) {
      int v21 = 119;
    }
    else {
      int v21 = v17;
    }
    unsigned int v22 = (v17 - v21 + 59) / 0x3Cu;
    v11 += v22 + 1;
    int v17 = v17 - 60 * v22 - 60;
    v1[3] = v11;
    v1[4] = v17;
  }
  int v23 = v1[5];
  if (v23 < 0)
  {
    if (v23 <= -60) {
      int v24 = -60;
    }
    else {
      int v24 = v1[5];
    }
    if (v23 >= 0xFFFFFFC4) {
      int v25 = v1[5];
    }
    else {
      int v25 = v23 + 1;
    }
    unsigned int v26 = (v24 - v25) / 0x3Cu;
    if (v23 < 0xFFFFFFC4) {
      ++v26;
    }
    v17 += ~v26;
    v23 += 60 * v26 + 60;
    v1[4] = v17;
    v1[5] = v23;
  }
  if (v23 >= 60)
  {
    if (v23 >= 119) {
      int v27 = 119;
    }
    else {
      int v27 = v23;
    }
    unsigned int v28 = (v23 - v27 + 59) / 0x3Cu;
    v17 += v28 + 1;
    int v23 = v23 - 60 * v28 - 60;
    v1[4] = v17;
    v1[5] = v23;
  }
  int v29 = v1[9];
  if (v29 < 0)
  {
    if (v29 <= -1000000000) {
      int v30 = -1000000000;
    }
    else {
      int v30 = v1[9];
    }
    if (v29 >= 0xC4653600) {
      int v31 = v1[9];
    }
    else {
      int v31 = v29 + 1;
    }
    unsigned int v32 = (v30 - v31) / 0x3B9ACA00u;
    if (v29 < 0xC4653600) {
      ++v32;
    }
    v23 += ~v32;
    v29 += 1000000000 * v32 + 1000000000;
    v1[5] = v23;
    v1[9] = v29;
  }
  if (v29 > 999999999)
  {
    if (v29 >= 1999999999) {
      int v33 = 1999999999;
    }
    else {
      int v33 = v29;
    }
    unsigned int v34 = (~v33 + v29 + 1000000000) / 0x3B9ACA00u;
    v23 += v34 + 1;
    v1[5] = v23;
    v1[9] = v29 - 1000000000 * v34 - 1000000000;
  }
  if (v23 < 0)
  {
    if (v23 <= -60) {
      int v35 = -60;
    }
    else {
      int v35 = v23;
    }
    if (v23 >= 0xFFFFFFC4) {
      int v36 = v23;
    }
    else {
      int v36 = v23 + 1;
    }
    unsigned int v37 = (v35 - v36) / 0x3Cu;
    if (v23 < 0xFFFFFFC4) {
      ++v37;
    }
    v17 += ~v37;
    v23 += 60 * v37 + 60;
    v1[4] = v17;
    v1[5] = v23;
  }
  if (v23 >= 60)
  {
    if (v23 >= 119) {
      int v38 = 119;
    }
    else {
      int v38 = v23;
    }
    unsigned int v39 = (v23 - v38 + 59) / 0x3Cu;
    v17 += v39 + 1;
    v1[4] = v17;
    v1[5] = v23 - 60 * v39 - 60;
  }
  if (v17 < 0)
  {
    if (v17 <= -60) {
      int v40 = -60;
    }
    else {
      int v40 = v17;
    }
    if (v17 >= 0xFFFFFFC4) {
      int v41 = v17;
    }
    else {
      int v41 = v17 + 1;
    }
    unsigned int v42 = (v40 - v41) / 0x3Cu;
    if (v17 < 0xFFFFFFC4) {
      ++v42;
    }
    v11 += ~v42;
    v17 += 60 * v42 + 60;
    v1[3] = v11;
    v1[4] = v17;
  }
  if (v17 >= 60)
  {
    if (v17 >= 119) {
      int v43 = 119;
    }
    else {
      int v43 = v17;
    }
    unsigned int v44 = (v17 - v43 + 59) / 0x3Cu;
    v11 += v44 + 1;
    v1[3] = v11;
    v1[4] = v17 - 60 * v44 - 60;
  }
  if (v11 < 0)
  {
    if (v11 <= -24) {
      int v45 = -24;
    }
    else {
      int v45 = v11;
    }
    if (v11 >= 0xFFFFFFE8) {
      int v46 = v11;
    }
    else {
      int v46 = v11 + 1;
    }
    unsigned int v47 = (v45 - v46) / 0x18u;
    if (v11 < 0xFFFFFFE8) {
      ++v47;
    }
    v5 += ~v47;
    v11 += 24 * v47 + 24;
    v1[2] = v5;
    v1[3] = v11;
  }
  if (v11 >= 24)
  {
    if (v11 >= 47) {
      int v48 = 47;
    }
    else {
      int v48 = v11;
    }
    unsigned int v49 = (v11 - v48 + 23) / 0x18u;
    v5 += v49 + 1;
    v1[2] = v5;
    v1[3] = v11 - 24 * v49 - 24;
  }
  if (!(v4 | v3))
  {
    if (!v5) {
      return result;
    }
    goto LABEL_141;
  }
  if (v3 <= 0)
  {
LABEL_141:
    if (v3 <= -11) {
      int v50 = -11;
    }
    else {
      int v50 = v3;
    }
    if (v3 >= -11) {
      int v51 = v3;
    }
    else {
      int v51 = v3 + 1;
    }
    unsigned int v52 = (v50 - v51) / 0xCu;
    if (v3 < -11) {
      ++v52;
    }
    v4 += ~v52;
    v3 += 12 * v52 + 12;
    _DWORD *v1 = v4;
    v1[1] = v3;
  }
  if (v3 >= 13)
  {
    if (v3 >= 24) {
      int v53 = 24;
    }
    else {
      int v53 = v3;
    }
    unsigned int v54 = v3 - v53 + 11;
    v4 += v54 / 0xC + 1;
    int v3 = v3 - 12 * (v54 / 0xC) - 12;
    _DWORD *v1 = v4;
    v1[1] = v3;
  }
  if (v5 <= 0)
  {
    do
    {
      if (v3 > 1)
      {
        --v3;
      }
      else
      {
        _DWORD *v1 = --v4;
        v3 += 11;
      }
      uint64_t result = DaysInMonth(v4, v3);
      v5 += result;
    }
    while (v5 < 1);
    v1[1] = v3;
    v1[2] = v5;
  }
  else
  {
    uint64_t result = DaysInMonth(v4, v3);
  }
  if (v5 > (int)result)
  {
    do
    {
      if (v3 < 12)
      {
        ++v3;
      }
      else
      {
        _DWORD *v1 = ++v4;
        v3 -= 11;
      }
      v5 -= result;
      uint64_t result = DaysInMonth(v4, v3);
    }
    while (v5 > (int)result);
    v1[1] = v3;
    v1[2] = v5;
  }
  return result;
}

std::string *XMPUtils::Trim(std::string *this)
{
  uint64_t v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type v3 = this->__r_.__value_.__r.__words[0];
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) == 0) {
    int v5 = this;
  }
  else {
    int v5 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((v2 & 0x80u) == 0) {
    std::string::size_type v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = this->__r_.__value_.__l.__size_;
  }
  int v7 = *(char *)(XMPUtils::WhiteSpaceStrPtr + 23);
  if (v7 >= 0) {
    unsigned int v8 = (void *)XMPUtils::WhiteSpaceStrPtr;
  }
  else {
    unsigned int v8 = *(void **)XMPUtils::WhiteSpaceStrPtr;
  }
  if (v7 >= 0) {
    size_t v9 = *(unsigned __int8 *)(XMPUtils::WhiteSpaceStrPtr + 23);
  }
  else {
    size_t v9 = *(void *)(XMPUtils::WhiteSpaceStrPtr + 8);
  }
  do
  {
    if (!v6)
    {
      if ((v2 & 0x80u) == 0) {
        int v19 = (char *)this + v2;
      }
      else {
        int v19 = (char *)(v3 + size);
      }
      std::string::size_type v20 = v19 - (char *)v5;
LABEL_37:
      std::string::erase(this, 0, v20);
      return this;
    }
    std::string::size_type v10 = v6;
    if (!v9) {
      break;
    }
    int v11 = memchr(v8, *((char *)&v5[-1].__r_.__value_.__r.__words[2] + v6 + 7), v9);
    std::string::size_type v6 = v10 - 1;
  }
  while (v11);
  std::string::erase(this, v10, 0xFFFFFFFFFFFFFFFFLL);
  int v12 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v12 >= 0) {
    int v13 = this;
  }
  else {
    int v13 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v12 >= 0) {
    std::string::size_type v14 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = this->__r_.__value_.__l.__size_;
  }
  int v15 = *(char *)(XMPUtils::WhiteSpaceStrPtr + 23);
  if (v15 >= 0) {
    unsigned int v16 = (void *)XMPUtils::WhiteSpaceStrPtr;
  }
  else {
    unsigned int v16 = *(void **)XMPUtils::WhiteSpaceStrPtr;
  }
  if (v15 >= 0) {
    size_t v17 = *(unsigned __int8 *)(XMPUtils::WhiteSpaceStrPtr + 23);
  }
  else {
    size_t v17 = *(void *)(XMPUtils::WhiteSpaceStrPtr + 8);
  }
  if (v14)
  {
    int v18 = v13;
    if (v17)
    {
      while (memchr(v16, v18->__r_.__value_.__s.__data_[0], v17))
      {
        int v18 = (std::string *)((char *)v18 + 1);
        if (!--v14) {
          return this;
        }
      }
    }
    std::string::size_type v20 = (char *)v18 - (char *)v13;
    if ((char *)v18 - (char *)v13 != -1) {
      goto LABEL_37;
    }
  }
  return this;
}

uint64_t XMPUtils::MapXMPErrorToIError(uint64_t result, int *a2, _DWORD *a3)
{
  if (!v4 & v3)
  {
    int v5 = 1;
    uint64_t result = 6;
  }
  else
  {
    switch((int)result)
    {
      case 'e':
      case 'f':
      case 'g':
        int v5 = 100;
        break;
      case 'h':
        int v5 = 1;
        uint64_t result = 5;
        break;
      case 'i':
        int v5 = 100;
        uint64_t result = 104;
        break;
      case 'j':
        int v5 = 101;
        uint64_t result = 3;
        break;
      case 'k':
        int v5 = 102;
        uint64_t result = 1;
        break;
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
        int v5 = 1;
        uint64_t result = 10000;
        break;
      default:
        JUMPOUT(0);
    }
  }
  *a3 = result;
  *a2 = v5;
  return result;
}

uint64_t EstimateSizeForJPEG(const XMP_Node *a1)
{
  if (*((char *)a1 + 39) < 0) {
    uint64_t v1 = *((void *)a1 + 3);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)a1 + 39);
  }
  int v2 = *(_DWORD *)(*((void *)a1 + 8) + 8);
  int v3 = *((_DWORD *)a1 + 2);
  if ((v3 & 0x1F00) != 0)
  {
    uint64_t v4 = 2 * v1;
    std::string::size_type v6 = (const XMP_Node **)*((void *)a1 + 9);
    int v5 = (const XMP_Node **)*((void *)a1 + 10);
    if ((v3 & 0x200) != 0)
    {
      uint64_t v13 = v4 + 24;
      if ((v2 & 0x200) != 0) {
        uint64_t v13 = 19;
      }
      uint64_t v14 = (char *)v5 - (char *)v6;
      uint64_t v7 = 17 * (v14 >> 3) + v13;
      if (v14)
      {
        if ((unint64_t)(v14 >> 3) <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v14 >> 3;
        }
        do
        {
          unsigned int v16 = *v6++;
          v7 += EstimateSizeForJPEG(v16);
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      if ((v2 & 0x200) != 0) {
        uint64_t v7 = 25;
      }
      else {
        uint64_t v7 = v4 + 30;
      }
      if (v5 != v6)
      {
        if ((unint64_t)(v5 - v6) <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v5 - v6;
        }
        do
        {
          size_t v9 = *v6++;
          v7 += EstimateSizeForJPEG(v9);
          --v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    uint64_t v10 = v1 + 3;
    if ((v2 & 0x200) != 0) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    if (*((char *)a1 + 63) < 0) {
      uint64_t v12 = *((void *)a1 + 6);
    }
    else {
      uint64_t v12 = *((unsigned __int8 *)a1 + 63);
    }
    return v12 + v11;
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__emplace_hint_multi<std::pair<unsigned long const,std::pair<std::string *,std::string *>> &>(uint64_t **a1, void *a2, uint64_t a3)
{
  std::string::size_type v6 = (uint64_t *)operator new(0x38uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  v6[6] = *(void *)(a3 + 16);
  uint64_t v9 = 0;
  leaf = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__find_leaf(a1, a2, &v9, v6 + 4);
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v9, leaf, v6);
  return v6;
}

void sub_188812498(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__find_leaf(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a1 + 1;
  if (a1 + 1 != a2 && a2[4] < *a4)
  {
    while (1)
    {
      int v5 = (void *)*v4;
      a2 = v4;
      if (!*v4) {
        break;
      }
      while (1)
      {
        uint64_t v4 = v5;
        if (v5[4] >= *a4) {
          break;
        }
        int v5 = (void *)v5[1];
        if (!v5) {
          goto LABEL_19;
        }
      }
    }
LABEL_20:
    *a3 = v4;
    return a2;
  }
  uint64_t v6 = *a2;
  if ((void *)*a1 == a2)
  {
    uint64_t v8 = a2;
  }
  else
  {
    if (v6)
    {
      uint64_t v7 = (void *)*a2;
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)v7[1];
      }
      while (v7);
    }
    else
    {
      uint64_t v9 = a2;
      do
      {
        uint64_t v8 = (void *)v9[2];
        BOOL v10 = *v8 == (void)v9;
        uint64_t v9 = v8;
      }
      while (v10);
    }
    if (*a4 < v8[4])
    {
      while (1)
      {
        uint64_t v11 = (void *)*v4;
        a2 = v4;
        if (!*v4) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v4 = v11;
          if (*a4 < v11[4]) {
            break;
          }
          uint64_t v11 = (void *)v11[1];
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v6)
  {
    *a3 = v8;
    return v8 + 1;
  }
  else
  {
    *a3 = a2;
  }
  return a2;
}

uint64_t EstimateSizeForJPEG(void *a1)
{
  long long v32 = 0uLL;
  double DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v32);
  (*(void (**)(uint64_t *__return_ptr, double))(*(void *)*a1 + 72))(&v30, DefaultNameSpacePrefixMap);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 208))(v30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v4 = v32;
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 88))(&v29);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v29 + 192))(v29);
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 88))(&v28);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v28 + 208))(v28);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 88))(&v30, v4, v5, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 208))(v30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v30 = *a1;
  int v31 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int IXMPOptions = XMPUtils::GetIXMPOptions(&v30);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 56))(&v30);
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
  uint64_t v11 = v3 + 1;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v12 = v11 + v7;
  if (IXMPOptions > 0xFF)
  {
    if ((IXMPOptions & 0x200) != 0)
    {
      uint64_t v30 = 0;
      int v31 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 248))(&v30);
      if (v10 == 2) {
        uint64_t v22 = 19;
      }
      else {
        uint64_t v22 = 2 * v12 + 24;
      }
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)(v30 + *(void *)(*(void *)v30 - 688)) + 560))(v30 + *(void *)(*(void *)v30 - 688));
      long long v29 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)(v30 + *(void *)(*(void *)v30 - 688)) + 552))(&v29);
      uint64_t v15 = 17 * v23 + v22;
      for (uint64_t i = v29; i; v15 += v25)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)i + 48))(&v28);
        uint64_t v25 = EstimateSizeForJPEG(&v28);
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v29 + 56))(&v28);
        long long v26 = v28;
        long long v28 = 0uLL;
        int v27 = (std::__shared_weak_count *)*((void *)&v29 + 1);
        long long v29 = v26;
        if (v27)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          if (*((void *)&v28 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
          }
          uint64_t i = v29;
        }
        else
        {
          uint64_t i = v26;
        }
      }
    }
    else
    {
      uint64_t v30 = 0;
      int v31 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 240))(&v30);
      if (v10 == 2) {
        uint64_t v15 = 25;
      }
      else {
        uint64_t v15 = 2 * v12 + 30;
      }
      (*(void (**)(uint64_t))(*(void *)(v30 + *(void *)(*(void *)v30 - 688)) + 560))(v30 + *(void *)(*(void *)v30 - 688));
      long long v29 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)(v30 + *(void *)(*(void *)v30 - 688)) + 552))(&v29);
      for (uint64_t j = v29; j; v15 += v19)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)j + 48))(&v28);
        uint64_t v19 = EstimateSizeForJPEG(&v28);
        if (*((void *)&v28 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v29 + 56))(&v28);
        long long v20 = v28;
        long long v28 = 0uLL;
        int v21 = (std::__shared_weak_count *)*((void *)&v29 + 1);
        long long v29 = v20;
        if (v21)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          if (*((void *)&v28 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
          }
          uint64_t j = v29;
        }
        else
        {
          uint64_t j = v20;
        }
      }
    }
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    unsigned int v16 = v31;
    if (v31) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v10 == 2) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v12 + 3;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 232))(&v29);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v29 + 504))(&v30);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 208))(v30);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    uint64_t v15 = v14 + v13;
    unsigned int v16 = (std::__shared_weak_count *)*((void *)&v29 + 1);
    if (*((void *)&v29 + 1)) {
LABEL_22:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  return v15;
}

void sub_188812C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::pair<char const*,char const*>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<char const*,char const*>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<char const*,char const*>>>>::__emplace_hint_multi<std::pair<unsigned long const,std::pair<char const*,char const*>> &>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x38uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  v6[6] = *(void *)(a3 + 16);
  uint64_t v9 = 0;
  leaf = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__find_leaf(a1, a2, &v9, v6 + 4);
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v9, leaf, v6);
  return v6;
}

void sub_188812D78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t DaysInMonth(int a1, int a2)
{
  LODWORD(v2) = a1;
  uint64_t result = DaysInMonth(int,int)::daysInMonth[a2];
  if (a2 == 2)
  {
    uint64_t v2 = (int)v2 >= 0 ? (int)v2 : 1 - (int)v2;
    if ((v2 & 3) == 0)
    {
      unint64_t v4 = 0x8F5C28F5C28F5C29 * v2;
      unint64_t v5 = __ROR8__(v4, 2);
      unint64_t v6 = __ROR8__(v4, 4);
      if (v5 <= 0x28F5C28F5C28F5CLL && v6 >= 0xA3D70A3D70A3D8) {
        return result;
      }
      else {
        return (result + 1);
      }
    }
  }
  return result;
}

void std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void XMPUtils::SetNode()
{
  __assert_rtn("SetNode", "XMPUtils.cpp", 74, "node->GetNodeType() == INode::kNTSimple");
}

void XMPUtils::HandleConstAliasStep()
{
  __assert_rtn("HandleConstAliasStep", "XMPUtils.cpp", 293, "aliasPos != sRegisteredAliasMap->end()");
}

void XMPUtils::HandleAliasStep()
{
  __assert_rtn("HandleAliasStep", "XMPUtils.cpp", 359, "aliasPos != sRegisteredAliasMap->end()");
}

void XMPUtils::ComposeArrayItemPath()
{
  __assert_rtn("ComposeArrayItemPath", "XMPUtils.cpp", 1946, "schemaNS != 0");
}

{
  __assert_rtn("ComposeArrayItemPath", "XMPUtils.cpp", 1947, "(arrayName != 0) && (*arrayName != 0)");
}

{
  __assert_rtn("ComposeArrayItemPath", "XMPUtils.cpp", 1948, "_fullPath != 0");
}

void XMPUtils::ComposeStructFieldPath()
{
  __assert_rtn("ComposeStructFieldPath", "XMPUtils.cpp", 1987, "(schemaNS != 0) && (fieldNS != 0)");
}

{
  __assert_rtn("ComposeStructFieldPath", "XMPUtils.cpp", 1988, "(structName != 0) && (*structName != 0)");
}

{
  __assert_rtn("ComposeStructFieldPath", "XMPUtils.cpp", 1989, "(fieldName != 0) && (*fieldName != 0)");
}

{
  __assert_rtn("ComposeStructFieldPath", "XMPUtils.cpp", 1990, "_fullPath != 0");
}

void XMPUtils::ComposeQualifierPath()
{
  __assert_rtn("ComposeQualifierPath", "XMPUtils.cpp", 2024, "(schemaNS != 0) && (qualNS != 0)");
}

{
  __assert_rtn("ComposeQualifierPath", "XMPUtils.cpp", 2025, "(propName != 0) && (*propName != 0)");
}

{
  __assert_rtn("ComposeQualifierPath", "XMPUtils.cpp", 2026, "(qualName != 0) && (*qualName != 0)");
}

{
  __assert_rtn("ComposeQualifierPath", "XMPUtils.cpp", 2027, "_fullPath != 0");
}

void XMPUtils::ConvertFromBool()
{
  __assert_rtn("ConvertFromBool", "XMPUtils.cpp", 2136, "strValue != 0");
}

void XMPUtils::ConvertFromInt()
{
  __assert_rtn("ConvertFromInt", "XMPUtils.cpp", 2155, "(format != 0) && (strValue != 0)");
}

void XMPUtils::ConvertFromInt64()
{
  __assert_rtn("ConvertFromInt64", "XMPUtils.cpp", 2180, "(format != 0) && (strValue != 0)");
}

void XMPUtils::ConvertFromFloat()
{
  __assert_rtn("ConvertFromFloat", "XMPUtils.cpp", 2205, "(format != 0) && (strValue != 0)");
}

void XMPUtils::ConvertFromDate()
{
  __assert_rtn("ConvertFromDate", "XMPUtils.cpp", 2251, "strValue != 0");
}

void XMPUtils::PackageForJPEG()
{
  __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 2858, "(stdStr != 0) && (extStr != 0) && (digestStr != 0)");
}

{
  __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3066, "(stdStr != 0) && (extStr != 0) && (digestStr != 0)");
}

void XMPUtils::ConvertToUTCTime()
{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3436, "time != 0");
}

{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3442, "(0 <= time->tzHour) && (time->tzHour <= 23)");
}

{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3443, "(0 <= time->tzMinute) && (time->tzMinute <= 59)");
}

{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3444, "(-1 <= time->tzSign) && (time->tzSign <= +1)");
}

{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3446, "(time->tzSign == 0) ? ((time->tzHour == 0) && (time->tzMinute == 0)) : ((time->tzHour != 0) || (time->tzMinute != 0))");
}

uint64_t GenericErrorCallback::NotifyClient(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((result & 1) == 0
    || *((unsigned char *)a3 + 16)
    || (*((unsigned char *)a3 + 16) = 1, (unsigned int v9 = *(_DWORD *)(a1 + 8)) != 0)
    && ((unsigned int v10 = *(unsigned __int8 *)(a1 + 16), v10 > a2)
     || (v10 >= a2 ? (unsigned int v11 = *(_DWORD *)(a1 + 12) + 1) : (*(unsigned char *)(a1 + 16) = a2, unsigned int v11 = 1),
         *(_DWORD *)(a1 + 12) = v11,
         v11 > v9)))
  {
    if (a2) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 24))(a1, a4, a2, *a3, *((void *)a3 + 1));
    if (a2 || (result & 1) == 0)
    {
LABEL_13:
      exception = __cxa_allocate_exception(0x18uLL);
      char v13 = *((unsigned char *)a3 + 16);
      *(_OWORD *)exception = *(_OWORD *)a3;
      exception[16] = v13;
    }
  }
  return result;
}

void XMPFiles::XMPFiles(XMPFiles *this)
{
  *(void *)this = &unk_1ED4E5C18;
  *((_DWORD *)this + 2) = 0;
  XMP_ReadWriteLock::XMP_ReadWriteLock((XMPFiles *)((char *)this + 16));
  *((_DWORD *)this + 56) = 538976288;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 38) = 1;
  *((unsigned char *)this + 312) = 0;
  *((void *)this + 37) = &unk_1ED4EF0A0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 48) = 0;
  if (sProgressDefault(void)::onceToken != -1) {
    dispatch_once(&sProgressDefault(void)::onceToken, &__block_literal_global_24);
  }
  if (*(void *)(gProgressDefault + 8)) {
    operator new();
  }
  if (_MergedGlobals != -1) {
    dispatch_once(&_MergedGlobals, &__block_literal_global_42);
  }
  if (*(void *)(qword_1EB2C0378 + 32))
  {
    *((void *)this + 40) = *(void *)(qword_1EB2C0378 + 24);
    *((void *)this + 41) = *(void *)(qword_1EB2C0378 + 32);
    *((void *)this + 42) = *(void *)(qword_1EB2C0378 + 40);
    *((_DWORD *)this + 76) = *(_DWORD *)(qword_1EB2C0378 + 8);
  }
}

void sub_188813858(_Unwind_Exception *a1, int a2)
{
  uint64_t v8 = v6;
  MEMORY[0x18C11C0E0](v8, 0x1080C40740E08D0);
  unsigned int v10 = (void **)(v2 + 368);
  if (a2 == 1)
  {
    unsigned int v11 = (unsigned int *)__cxa_begin_catch(a1);
    uint64_t v12 = (void *)(v2 + 368);
    if (*(char *)(v2 + 391) < 0) {
      uint64_t v12 = *v10;
    }
    GenericErrorCallback::NotifyClient(v5, 1, v11, (uint64_t)v12);
    __cxa_end_catch();
    JUMPOUT(0x1888137F4);
  }
  if (*(char *)(v2 + 391) < 0) {
    operator delete(*v10);
  }
  *(void *)(v2 + 296) = v4;
  if (*(char *)(v2 + 367) < 0) {
    operator delete(*(void **)(v2 + 344));
  }
  XMP_ReadWriteLock::~XMP_ReadWriteLock(v3);
  _Unwind_Resume(a1);
}

void XMPFiles::ErrorCallbackInfo::~ErrorCallbackInfo(void **this)
{
  *this = &unk_1ED4EF0A0;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1ED4EF0A0;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }

  JUMPOUT(0x18C11C0E0);
}

void XMPFiles::~XMPFiles(XMPFiles *this)
{
  *(void *)this = &unk_1ED4E5C18;
  if (*((int *)this + 2) >= 1) {
    __assert_rtn("~XMPFiles", "XMPFiles.cpp", 411, "this->clientRefs <= 0");
  }
  uint64_t v2 = *((void *)this + 31);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 31) = 0;
  }
  if (*((char *)this + 391) < 0)
  {
    if (!*((void *)this + 47)) {
      goto LABEL_10;
    }
  }
  else if (!*((unsigned char *)this + 391))
  {
    goto LABEL_10;
  }
  uint64_t v3 = *((void *)this + 29);
  if (v3)
  {
    XMPFiles_IO::Close(*((XMPFiles_IO **)this + 29));
    (*(void (**)(uint64_t))(*(void *)v3 + 72))(v3);
    *((void *)this + 29) = 0;
  }
LABEL_10:
  uint64_t v4 = *((void *)this + 36);
  if (v4) {
    MEMORY[0x18C11C0E0](v4, 0x1080C40740E08D0);
  }
  uint64_t v5 = (void *)*((void *)this + 32);
  if (v5) {
    free(v5);
  }
  if (*((char *)this + 391) < 0) {
    operator delete(*((void **)this + 46));
  }
  *((void *)this + 37) = &unk_1ED4EF0A0;
  if (*((char *)this + 367) < 0) {
    operator delete(*((void **)this + 43));
  }
  XMP_ReadWriteLock::~XMP_ReadWriteLock((XMPFiles *)((char *)this + 16));
}

{
  uint64_t vars8;

  XMPFiles::~XMPFiles(this);

  JUMPOUT(0x18C11C0E0);
}

uint64_t CloseLocalFile(uint64_t result)
{
  uint64_t v1 = result;
  if (*(char *)(result + 391) < 0)
  {
    if (!*(void *)(result + 376)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(result + 391))
  {
    return result;
  }
  uint64_t v2 = *(void *)(result + 232);
  if (v2)
  {
    XMPFiles_IO::Close(*(XMPFiles_IO **)(result + 232));
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 72))(v2);
    *(void *)(v1 + 232) = 0;
  }
  return result;
}

uint64_t FileIsExcluded(Host_IO *a1, const char *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t result = Host_IO::GetFileMode(a1, a2);
  *a3 = result;
  if ((result - 2) < 2)
  {
    uint64_t v25 = 0;
    unsigned int v11 = 117;
    uint64_t v12 = "XMPFiles: path specified is not a file";
    goto LABEL_9;
  }
  if (result)
  {
    if (result != 1) {
      FileIsExcluded();
    }
    size_t v9 = strlen((const char *)a1);
    if (v9)
    {
      while (*((unsigned char *)a1 + v9) != 46)
      {
        if (!--v9)
        {
          unsigned int v10 = a1;
          goto LABEL_13;
        }
      }
      unsigned int v10 = (Host_IO *)((char *)a1 + v9);
    }
    else
    {
      unsigned int v10 = a1;
LABEL_13:
      if (*(unsigned char *)v10 != 46) {
        goto LABEL_28;
      }
    }
    MEMORY[0x18C11BE10](a2, (char *)v10 + 1);
    if (a2[23] < 0)
    {
      uint64_t v13 = *((void *)a2 + 1);
      if (!v13)
      {
LABEL_28:
        size_t v17 = kKnownRejectedFiles[0];
        if (!kKnownRejectedFiles[0]) {
          return 0;
        }
        uint64_t v18 = *((unsigned __int8 *)a2 + 23);
        for (uint64_t i = off_1E90FF228; ; ++i)
        {
          size_t v20 = strlen(v17);
          size_t v21 = v20;
          if ((v18 & 0x80) != 0)
          {
            if (v20 != *((void *)a2 + 1)) {
              goto LABEL_37;
            }
            if (v20 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v22 = *(const char **)a2;
          }
          else
          {
            uint64_t v22 = a2;
            if (v21 != v18) {
              goto LABEL_37;
            }
          }
          if (!memcmp(v22, v17, v21))
          {
            uint64_t v25 = 0;
            unsigned int v11 = 118;
            uint64_t v12 = "XMPFiles: rejected file extension specified";
LABEL_9:
            v24[1] = v12;
            v24[0] = v11;
            if (a4) {
              GenericErrorCallback::NotifyClient(a4, 0, (unsigned int *)v24, (uint64_t)a1);
            }
            return 1;
          }
LABEL_37:
          uint64_t v23 = *i;
          size_t v17 = v23;
          if (!v23) {
            return 0;
          }
        }
      }
    }
    else
    {
      uint64_t v13 = *((unsigned __int8 *)a2 + 23);
      if (!a2[23]) {
        goto LABEL_28;
      }
    }
    uint64_t v14 = 0;
    do
    {
      long long v15 = a2;
      if (a2[23] < 0) {
        long long v15 = *(const char **)a2;
      }
      if (v15[v14] - 65 <= 0x19)
      {
        unsigned int v16 = a2;
        if (a2[23] < 0) {
          unsigned int v16 = *(const char **)a2;
        }
        v16[v14] += 32;
      }
      ++v14;
    }
    while (v13 != v14);
    goto LABEL_28;
  }
  return result;
}

uint64_t DoOpenFile(uint64_t a1, uint64_t a2, Host_IO *a3, uint64_t a4, int a5)
{
  if (a2)
  {
    if (!*(unsigned char *)a3) {
      goto LABEL_3;
    }
LABEL_9:
    DoOpenFile();
  }
  if (!*(unsigned char *)a3) {
    goto LABEL_9;
  }
LABEL_3:
  if ((a5 & 0x202) == 0x200)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    uint64_t v23 = "OptimizeFileLayout requires OpenForUpdate";
    goto LABEL_52;
  }
  if (*(void *)(a1 + 248))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    uint64_t v23 = "File already open";
LABEL_52:
    exception[1] = v23;
    *((unsigned char *)exception + 16) = 0;
  }
  unsigned int v10 = a5 & 0xFFFFFFF7;
  if (*(char *)(a1 + 391) < 0)
  {
    if (!*(void *)(a1 + 376)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(a1 + 391))
  {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(a1 + 232);
  if (v11)
  {
    XMPFiles_IO::Close(*(XMPFiles_IO **)(a1 + 232));
    (*(void (**)(uint64_t))(*(void *)v11 + 72))(v11);
    *(void *)(a1 + 232) = 0;
  }
LABEL_13:
  *(void *)(a1 + 232) = a2;
  MEMORY[0x18C11BE10](a1 + 368, a3);
  uint64_t IsExcluded = MEMORY[0x18C11BE10](a1 + 344, a3);
  *(_DWORD *)(a1 + 224) = 538976288;
  *(_DWORD *)(a1 + 240) = v10;
  char v28 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 391)) {
      goto LABEL_15;
    }
LABEL_19:
    char v28 = 1;
    if ((a5 & 0x40) != 0) {
      goto LABEL_39;
    }
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 376)) {
    goto LABEL_19;
  }
LABEL_15:
  uint64_t IsExcluded = FileIsExcluded(a3, (const char *)__p, &v28, a1 + 296);
  if (IsExcluded)
  {
LABEL_41:
    uint64_t v19 = 0;
    goto LABEL_42;
  }
  if ((a5 & 0x40) != 0)
  {
LABEL_39:
    if (!v28)
    {
      v25[0] = 111;
      v25[1] = "XMPFiles: file does not exist";
      v25[2] = 0;
      GenericErrorCallback::NotifyClient(a1 + 296, 0, (unsigned int *)v25, (uint64_t)a3);
    }
    goto LABEL_41;
  }
LABEL_20:
  Instance = (Common::HandlerRegistry *)Common::HandlerRegistry::getInstance((Common::HandlerRegistry *)IsExcluded);
  uint64_t v14 = Common::HandlerRegistry::selectSmartHandler(Instance, (XMPFiles *)a1, a3, a4, a5 & 0xFFFFFFF7);
  if (!v14) {
    goto LABEL_39;
  }
  long long v15 = v14[2];
  int v16 = *((_DWORD *)v14 + 1);
  if (!*(void *)(a1 + 232) && (v16 & 0x800) == 0 && (v16 & 0x100) == 0 && (v16 & 0x1000) == 0) {
    __assert_rtn("DoOpenFile", "XMPFiles.cpp", 1091, "(thiz->ioRef != 0) || (handlerFlags & kXMPFiles_UsesSidecarXMP) || (handlerFlags & kXMPFiles_HandlerOwnsFile) || (handlerFlags & kXMPFiles_FolderBasedFormat)");
  }
  if (*(_DWORD *)(a1 + 224) == 538976288) {
    *(_DWORD *)(a1 + 224) = *(_DWORD *)v14;
  }
  size_t v17 = (unsigned __int8 *)((uint64_t (*)(uint64_t))v15)(a1);
  uint64_t v18 = v17;
  if (v16 != *((_DWORD *)v17 + 4)) {
    __assert_rtn("DoOpenFile", "XMPFiles.cpp", 1095, "handlerFlags == handler->handlerFlags");
  }
  *(void *)(a1 + 248) = v17;
  if ((a5 & 2) != 0
    && (v16 & 0x1000) != 0
    && ((*(uint64_t (**)(unsigned __int8 *))(*(void *)v17 + 40))(v17) & 1) == 0)
  {
    int v24 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)int v24 = 112;
    v24[1] = "Open, file permission error";
    *((unsigned char *)v24 + 16) = 0;
  }
  (*(void (**)(unsigned __int8 *))(*(void *)v18 + 48))(v18);
  if (v18[21]) {
    FillPacketInfo(v18 + 56, (uint64_t)(v18 + 32));
  }
  uint64_t v19 = 1;
  if ((a5 & 2) == 0 && (v16 & 0x100) == 0 && (v16 & 0x10000) == 0)
  {
    if (*(char *)(a1 + 391) < 0)
    {
      if (!*(void *)(a1 + 376)) {
        goto LABEL_42;
      }
    }
    else if (!*(unsigned char *)(a1 + 391))
    {
      goto LABEL_42;
    }
    uint64_t v21 = *(void *)(a1 + 232);
    if (v21)
    {
      XMPFiles_IO::Close(*(XMPFiles_IO **)(a1 + 232));
      (*(void (**)(uint64_t))(*(void *)v21 + 72))(v21);
      *(void *)(a1 + 232) = 0;
    }
  }
LABEL_42:
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  return v19;
}

void sub_188814140(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v3 = *(void *)(v1 + 248);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)(v1 + 248) = 0;
  if ((v2 & 0x100) == 0) {
    CloseLocalFile(v1);
  }
  __cxa_rethrow();
}

void sub_18881418C()
{
}

void sub_1888141A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPFiles::OpenFile(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a1 + 288) = 0;
  return DoOpenFile(a1, a2, (Host_IO *)"", a3, a4);
}

void XMPFiles::CloseFile(XMPFiles *this, char a2)
{
  uint64_t v4 = (void *)((char *)this + 248);
  uint64_t v3 = *((void *)this + 31);
  if (!v3) {
    return;
  }
  int v5 = *(unsigned __int8 *)(v3 + 23);
  unsigned int v6 = *((_DWORD *)this + 60);
  int v7 = *(_DWORD *)(v3 + 16);
  if (*(unsigned char *)(v3 + 23)) {
    unsigned int v8 = a2 & ((*((_DWORD *)this + 60) & 2u) >> 1);
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 == 1 && (*(_DWORD *)(v3 + 16) & 0x300) == 0x100)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 2;
    exception[1] = "XMPFiles::CloseFile - Safe update not supported";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v9 = *((void *)this + 36);
  if (v9)
  {
    if (*((char *)this + 391) < 0)
    {
      if (!*((void *)this + 47)) {
        goto LABEL_14;
      }
    }
    else if (!*((unsigned char *)this + 391))
    {
      goto LABEL_14;
    }
    uint64_t v10 = *((void *)this + 29);
    if (v10) {
      *(void *)(v10 + 80) = v9;
    }
  }
LABEL_14:
  if ((v7 & 0x100) != 0) {
    char v11 = 0;
  }
  else {
    char v11 = v8;
  }
  if (v11)
  {
    uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 29) + 40))(*((void *)this + 29));
    if (!v12)
    {
      long long v26 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)long long v26 = 9;
      v26[1] = "XMPFiles::CloseFile, cannot create temp";
      *((unsigned char *)v26 + 16) = 0;
    }
    if ((v7 & 4) != 0)
    {
      (*(void (**)(void, uint64_t))(*(void *)*v4 + 80))(*v4, v12);
    }
    else
    {
      uint64_t v13 = *((void *)this + 29);
      (*(void (**)(uint64_t, void, void))(*(void *)v13 + 16))(v13, 0, 0);
      uint64_t v14 = (XMP_ProgressTracker *)*((void *)this + 36);
      if (v14 && (*(unsigned char *)(*v4 + 17) & 0x20) != 0)
      {
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
        XMP_ProgressTracker::BeginWork(v14, (float)v15);
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
      XIO::Copy(v13, v12);
      *((void *)this + 29) = v12;
      (*(void (**)(void, void))(**((void **)this + 31) + 72))(*((void *)this + 31), 0);
      *((void *)this + 29) = v13;
      uint64_t v19 = (XMP_ProgressTracker *)*((void *)this + 36);
      if (v19 && (*(unsigned char *)(*v4 + 17) & 0x20) != 0) {
        XMP_ProgressTracker::WorkComplete(v19, v16, v17, v18);
      }
    }
    (*(void (**)(void))(**((void **)this + 29) + 48))(*((void *)this + 29));
    if (*((char *)this + 391) < 0)
    {
      if (!*((void *)this + 47)) {
        goto LABEL_42;
      }
    }
    else if (!*((unsigned char *)this + 391))
    {
LABEL_42:
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
LABEL_44:
      *uint64_t v4 = 0;
      goto LABEL_45;
    }
    uint64_t v21 = *((void *)this + 29);
    if (v21)
    {
      XMPFiles_IO::Close(*((XMPFiles_IO **)this + 29));
      (*(void (**)(uint64_t))(*(void *)v21 + 72))(v21);
      *((void *)this + 29) = 0;
    }
    goto LABEL_42;
  }
  if (!((v6 >> 9) & 1 | v5) || ((*(void (**)(uint64_t))(*(void *)v3 + 72))(v3), (uint64_t v3 = *v4) != 0)) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 31) = 0;
  if (*((char *)this + 391) < 0)
  {
    if (!*((void *)this + 47)) {
      goto LABEL_45;
    }
    goto LABEL_37;
  }
  if (*((unsigned char *)this + 391))
  {
LABEL_37:
    uint64_t v20 = *((void *)this + 29);
    if (!v20) {
      goto LABEL_45;
    }
    XMPFiles_IO::Close(*((XMPFiles_IO **)this + 29));
    (*(void (**)(uint64_t))(*(void *)v20 + 72))(v20);
    uint64_t v4 = (void *)((char *)this + 232);
    goto LABEL_44;
  }
LABEL_45:
  int v22 = *((char *)this + 391);
  if ((v22 & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 391)) {
      goto LABEL_51;
    }
LABEL_49:
    uint64_t v23 = *((void *)this + 29);
    if (v23)
    {
      XMPFiles_IO::Close(*((XMPFiles_IO **)this + 29));
      (*(void (**)(uint64_t))(*(void *)v23 + 72))(v23);
      *((void *)this + 29) = 0;
      LOBYTE(v22) = *((unsigned char *)this + 391);
    }
    goto LABEL_51;
  }
  if (*((void *)this + 47)) {
    goto LABEL_49;
  }
LABEL_51:
  if ((v22 & 0x80) != 0)
  {
    **((unsigned char **)this + 46) = 0;
    *((void *)this + 47) = 0;
  }
  else
  {
    *((unsigned char *)this + 368) = 0;
    *((unsigned char *)this + 391) = 0;
  }
  if (*((char *)this + 367) < 0)
  {
    **((unsigned char **)this + 43) = 0;
    *((void *)this + 44) = 0;
  }
  else
  {
    *((unsigned char *)this + 344) = 0;
    *((unsigned char *)this + 367) = 0;
  }
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 56) = 538976288;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  int v24 = (void *)*((void *)this + 32);
  if (v24) {
    free(v24);
  }
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
}

void sub_1888146F4(void *a1)
{
  __cxa_begin_catch(a1);
  (*(void (**)(void))(**(void **)(v1 + 232) + 56))(*(void *)(v1 + 232));
  *(void *)(v1 + 232) = v2;
  __cxa_rethrow();
}

void sub_18881472C(void *a1)
{
  __cxa_end_catch();
  __cxa_begin_catch(a1);
  if (*v2)
  {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    *uint64_t v2 = 0;
  }
  uint64_t v4 = *(void *)(v1 + 232);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  CloseLocalFile(v1);
  XMPFiles::ClearFilePath(v1);
  *(void *)(v1 + 248) = 0;
  *(_DWORD *)(v1 + 224) = 538976288;
  *(void *)(v1 + 232) = 0;
  *(_DWORD *)(v1 + 240) = 0;
  int v5 = *(void **)(v1 + 256);
  if (v5) {
    free(v5);
  }
  *(void *)(v1 + 256) = 0;
  *(_DWORD *)(v1 + 264) = 0;
  __cxa_rethrow();
}

void sub_1888147F4()
{
}

void sub_188814854()
{
}

uint64_t XMPFiles::ClearFilePath(uint64_t this)
{
  if (*(char *)(this + 391) < 0)
  {
    **(unsigned char **)(this + 368) = 0;
    *(void *)(this + 376) = 0;
  }
  else
  {
    *(unsigned char *)(this + 368) = 0;
    *(unsigned char *)(this + 391) = 0;
  }
  if (*(char *)(this + 367) < 0)
  {
    **(unsigned char **)(this + 344) = 0;
    *(void *)(this + 352) = 0;
  }
  else
  {
    *(unsigned char *)(this + 344) = 0;
    *(unsigned char *)(this + 367) = 0;
  }
  return this;
}

uint64_t XMPFiles::PutXMP(uint64_t a1, uint64_t a2)
{
  return DoPutXMP(a1, a2, 1);
}

uint64_t DoPutXMP(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 248);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 3;
    __n128 v18 = "XMPFiles::PutXMP - No open file";
    goto LABEL_37;
  }
  if ((*(unsigned char *)(a1 + 240) & 2) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 3;
    __n128 v18 = "XMPFiles::PutXMP - Not open for update";
    goto LABEL_37;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 16);
  if (!*(unsigned char *)(v3 + 22)) {
    (*(void (**)(void))(*(void *)v3 + 56))(*(void *)(a1 + 248));
  }
  if (*(_DWORD *)(v3 + 40) == -1) {
    int v8 = 0;
  }
  else {
    int v8 = *(_DWORD *)(v3 + 40);
  }
  BOOL v9 = (unint64_t)(*(void *)(v3 + 32) - 1) >= 0xFFFFFFFFFFFFFFFELL || v8 == 0;
  int v10 = !v9;
  if (v9)
  {
    if (v7)
    {
      int v11 = *(unsigned __int8 *)(v3 + 20);
      if (v11 != 1) {
        goto LABEL_19;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      __n128 v18 = "XMPFiles::PutXMP - No standard character form";
    }
    else
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 2;
      __n128 v18 = "XMPFiles::PutXMP - Can't inject XMP";
    }
LABEL_37:
    exception[1] = v18;
    *((unsigned char *)exception + 16) = 0;
  }
  int v11 = *(unsigned __int8 *)(v3 + 20);
  if (v11 == 1) {
    int v11 = *(unsigned __int8 *)(v3 + 48);
  }
LABEL_19:
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3) | v11;
  uint64_t v13 = v12 | (v7 >> 5) & 0x20;
  if (v10 && *(_DWORD *)(a1 + 224) == 538976288)
  {
    unsigned int v14 = v12 | 0x20;
    if (*(unsigned char *)(v3 + 49)) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = v14;
    }
  }
  int v15 = v10 & (v7 >> 3);
  if ((v7 & 2) == 0) {
    int v15 = 1;
  }
  if ((v7 & 0x800) != 0 || !v15)
  {
    TXMPMeta<std::string>::SerializeToBuffer(a2, v3 + 56, v13, 0);
  }
  else
  {
    TXMPMeta<std::string>::SerializeToBuffer(a2, v3 + 56, v13 | 0x200, v8);
    if (*(char *)(v3 + 79) < 0) {
      uint64_t v16 = *(void *)(v3 + 64);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v3 + 79);
    }
    if (v16 != v8) {
      __assert_rtn("DoPutXMP", "XMPFiles.cpp", 1619, "xmpPacket.size() == oldPacketLength");
    }
  }
  if (a3) {
    TXMPMeta<std::string>::Clone(a2, 0);
  }
  return 1;
}

void sub_188814BDC(_Unwind_Exception *a1)
{
}

void sub_188814BFC(void *a1)
{
  __cxa_begin_catch(a1);
  if ((v1 & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x188814B58);
  }
  __cxa_rethrow();
}

void sub_188814C14()
{
}

uint64_t XMPFiles::PutXMP(XMPFiles *this, const char *a2, uint64_t a3)
{
  v7[0] = 0;
  v7[1] = 0;
  TXMPMeta<std::string>::TXMPMeta(v7);
  TXMPMeta<std::string>::SetErrorCallback((uint64_t)v7, (uint64_t)ErrorCallbackForXMPMeta, (uint64_t)this + 296, 1);
  TXMPMeta<std::string>::ParseFromBuffer((uint64_t)v7, (uint64_t)a2, a3, 0);
  XMPFiles::PutXMP((uint64_t)this, (uint64_t)v7);
  return TXMPMeta<std::string>::~TXMPMeta(v7);
}

void sub_188814CB0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = (unsigned int *)__cxa_begin_catch(exception_object);
    uint64_t v4 = (void *)(v2 + 368);
    if (*(char *)(v2 + 391) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    GenericErrorCallback::NotifyClient(v2 + 296, 2, v3, (uint64_t)v4);
    __cxa_end_catch();
    JUMPOUT(0x188814C9CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ErrorCallbackForXMPMeta(uint64_t a1, uint64_t a2, unsigned int a3, const char *a4)
{
  v5[1] = a4;
  v5[2] = 0;
  v5[0] = a3;
  GenericErrorCallback::NotifyClient(a1, a2, (unsigned int *)v5, 0);
  return 1;
}

uint64_t XMPFiles::CanPutXMP(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 248);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 3;
    exception[1] = "XMPFiles::CanPutXMP - No open file";
    *((unsigned char *)exception + 16) = 0;
  }
  if ((*(unsigned char *)(a1 + 240) & 2) == 0) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 + 16);
  if (v4) {
    return 1;
  }
  if (!*(unsigned char *)(v2 + 21)) {
    return 0;
  }
  if ((v4 & 2) != 0) {
    return 1;
  }
  else {
    return DoPutXMP(a1, a2, 0);
  }
}

uint64_t XMPFiles::CanPutXMP(XMPFiles *this, const char *a2, uint64_t a3)
{
  v8[0] = 0;
  v8[1] = 0;
  TXMPMeta<std::string>::TXMPMeta(v8);
  TXMPMeta<std::string>::SetErrorCallback((uint64_t)v8, (uint64_t)ErrorCallbackForXMPMeta, (uint64_t)this + 296, 1);
  TXMPMeta<std::string>::ParseFromBuffer((uint64_t)v8, (uint64_t)a2, a3, 0);
  uint64_t CanPutXMP = XMPFiles::CanPutXMP((uint64_t)this, (uint64_t)v8);
  TXMPMeta<std::string>::~TXMPMeta(v8);
  return CanPutXMP;
}

void sub_188814EC8(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = (unsigned int *)__cxa_begin_catch(exception_object);
    int v4 = (void *)(v2 + 368);
    if (*(char *)(v2 + 391) < 0) {
      int v4 = (void *)*v4;
    }
    GenericErrorCallback::NotifyClient(v2 + 296, 2, v3, (uint64_t)v4);
    __cxa_end_catch();
    JUMPOUT(0x188814EB0);
  }
  _Unwind_Resume(exception_object);
}

BOOL XMPFiles::ErrorCallbackInfo::CanNotify(XMPFiles::ErrorCallbackInfo *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && !*((void *)this + 3)) {
    XMPFiles::ErrorCallbackInfo::CanNotify();
  }
  return v1 != 0;
}

BOOL XMPFiles::ErrorCallbackInfo::ClientCallbackWrapper(XMPFiles::ErrorCallbackInfo *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v8 = a2;
  if (!a2)
  {
    int v8 = (char *)this + 48;
    if (*((char *)this + 71) < 0) {
      int v8 = *(const char **)v8;
    }
  }
  return (*((unsigned int (**)(void, void, const char *, uint64_t, uint64_t, const char *))this + 3))(*((void *)this + 4), *((void *)this + 5), v8, a3, a4, a5) != 0;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E53BF7A0, MEMORY[0x1E4FBA1D0]);
}

void sub_188815084(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void FileIsExcluded()
{
  __assert_rtn("FileIsExcluded", "XMPFiles.cpp", 509, "(*clientMode == Host_IO::kFMode_IsFile) || (*clientMode == Host_IO::kFMode_DoesNotExist)");
}

void DoOpenFile()
{
  __assert_rtn("DoOpenFile", "XMPFiles.cpp", 970, "(clientIO == 0) ? (clientPath[0] != 0) : (clientPath[0] == 0)");
}

void XMPFiles::ErrorCallbackInfo::CanNotify()
{
  __assert_rtn("CanNotify", "XMPFiles.cpp", 1824, "(this->clientProc == 0) || (this->wrapperProc != 0)");
}

void *AdobeXMPCore_Int::IMetadata_I::GetInterfacePointer(AdobeXMPCore_Int::IMetadata_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x634D657461646174)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634D657461646174, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 856));
    }
  }
  else
  {
    this = AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal((void *)((char *)this + *(void *)(*this - 864)), a2, a3, 0);
    if (this) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = a4 == 0;
    }
    if (!v6)
    {
      unsigned int v7 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634D657461646174, a2, v7);
    }
  }
  return this;
}

void sub_18881528C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IMetadata_I::GetInterfacePointer(AdobeXMPCore_Int::IMetadata_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(void *)(*(void *)this - 848)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(void *)(*(void *)this - 720)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(void *)(*(void *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IMetadata_I::getInterfacePointer(AdobeXMPCore_Int::IMetadata_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IMetadata_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IMetadata_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IMetadata_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IMetadata_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  BOOL v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IMetadata_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 792))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IMetadata_I::getInterfacePointer(AdobeXMPCore_Int::IMetadata_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IMetadata_I::getInterfacePointer((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IMetadata_I::getInterfacePointer((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(void *)(*(void *)this - 856)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IMetadata_I::getInterfacePointer((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(void *)(*(void *)this - 728)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IMetadata_I::getInterfacePointer((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(void *)(*(void *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IMetadata_I::getAboutURI(AdobeXMPCore_Int::IMetadata_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IMetadata_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(void *)(*(void *)this - 856), (void (*)(char **__return_ptr, void *))AdobeXMPCore::IMetadata_v1::GetAboutURI, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IMetadata_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  int v8 = 0;
  BOOL v9 = 0;
  int v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_188815740(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    unsigned int v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *int v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188815724);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888158BC(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IMetadata_v1::GetAboutURI(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 736))();
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::GetActualIStructureNode(AdobeXMPCore_Int::IStructureNode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 792);
}

uint64_t virtual thunk to'AdobeXMPCommon_Int::ISharedObject_I::GetISharedObject_I(AdobeXMPCommon_Int::ISharedObject_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 40);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::GetActualINode(AdobeXMPCore_Int::INode_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 312)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 312)) - 544);
}

uint64_t AdobeXMPCore_Int::INode_I::GetActualINode(AdobeXMPCore_Int::INode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 544);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::GetINode_I(AdobeXMPCore_Int::INode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 320);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::GetActualICompositeNode(AdobeXMPCore_Int::ICompositeNode_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 616)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 616)) - 688);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::GetActualICompositeNode(AdobeXMPCore_Int::ICompositeNode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 688);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::GetICompositeNode_I(AdobeXMPCore_Int::ICompositeNode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 624);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::GetActualIStructureNode(AdobeXMPCore_Int::IStructureNode_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 736)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 736)) - 792);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::GetIStructureNode_I(AdobeXMPCore_Int::IStructureNode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 744);
}

uint64_t AdobeXMPCommon_Int::IThreadSafe_I::isThreadSafe(AdobeXMPCommon_Int::IThreadSafe_I *this)
{
  return (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 72)) + 16))((char *)this + *(void *)(*(void *)this - 72));
}

uint64_t AdobeXMPCore_Int::IMetadata_I::GetISharedObject_I(AdobeXMPCore_Int::IMetadata_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 888);
}

uint64_t AdobeXMPCore_Int::IMetadata_I::GetActualIMetadata(AdobeXMPCore_Int::IMetadata_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 856);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IMetadata_I::GetISharedObject_I(AdobeXMPCore_Int::IMetadata_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 40)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 40)) - 888);
}

void AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IMetadata_I,void *,void *,unsigned long long,unsigned int>(void *a1, char **a2)
{
  exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
  uint64_t v6 = *exception_ptr;
  uint64_t v5 = (std::__shared_weak_count *)exception_ptr[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __cxa_begin_catch(a1);
  unsigned int v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6);
  *a2 = v7;
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v7[*(void *)(*(void *)v7 - 56)] + 16))(&v7[*(void *)(*(void *)v7 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  __cxa_end_catch();
}

uint64_t AdobeXMPCommon::IUTF8String_v1::MakeShared@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (this) {
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return this;
}

void AdobeXMPCommon::IUTF8StringProxy::Acquire(AdobeXMPCommon::IUTF8StringProxy *this)
{
}

void AdobeXMPCommon::IUTF8StringProxy::Release(AdobeXMPCommon::IUTF8StringProxy *this)
{
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::GetISharedObject_I(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 3) + *(void *)(**((void **)this + 3) - 56)) + 16))();
}

void AdobeXMPCommon::IUTF8StringProxy::~IUTF8StringProxy(AdobeXMPCommon::IUTF8StringProxy *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x18C11C0E0);
}

void *AdobeXMPCommon::IUTF8StringProxy::append@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::append, 0, (uint64_t)a2, a3);
  (*(void (**)(char *))(*(void *)&v6[*(void *)(*(void *)v6 - 56)] + 8))(&v6[*(void *)(*(void *)v6 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v10, (void *)this + 1);
  uint64_t v8 = v10[0];
  if (v10[0]) {
    uint64_t v8 = v10[0] + *(void *)(*(void *)v10[0] - 408);
  }
  uint64_t v9 = v10[1];
  *a4 = v8;
  a4[1] = v9;
  return result;
}

void *AdobeXMPCommon::IUTF8StringProxy::append@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 24);
  if (*a2) {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 216))(*a2);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v9, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::append, 0, v10, a3, a4);
  (*(void (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 8))(&v11[*(void *)(*(void *)v11 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v15, (void *)(a1 + 8));
  uint64_t v13 = v15[0];
  if (v15[0]) {
    uint64_t v13 = v15[0] + *(void *)(*(void *)v15[0] - 408);
  }
  uint64_t v14 = v15[1];
  *a5 = v13;
  a5[1] = v14;
  return result;
}

void *AdobeXMPCommon::IUTF8StringProxy::assign@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::assign, 0, (uint64_t)a2, a3);
  (*(void (**)(char *))(*(void *)&v6[*(void *)(*(void *)v6 - 56)] + 8))(&v6[*(void *)(*(void *)v6 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v10, (void *)this + 1);
  uint64_t v8 = v10[0];
  if (v10[0]) {
    uint64_t v8 = v10[0] + *(void *)(*(void *)v10[0] - 408);
  }
  uint64_t v9 = v10[1];
  *a4 = v8;
  a4[1] = v9;
  return result;
}

void *AdobeXMPCommon::IUTF8StringProxy::assign@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 24);
  if (*a2) {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 216))(*a2);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v9, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::assign, 0, v10, a3, a4);
  (*(void (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 8))(&v11[*(void *)(*(void *)v11 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v15, (void *)(a1 + 8));
  uint64_t v13 = v15[0];
  if (v15[0]) {
    uint64_t v13 = v15[0] + *(void *)(*(void *)v15[0] - 408);
  }
  uint64_t v14 = v15[1];
  *a5 = v13;
  a5[1] = v14;
  return result;
}

void *AdobeXMPCommon::IUTF8StringProxy::insert@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, const char *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned int v7 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,char const*,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::insert, 0, a3, (uint64_t)a2, a4);
  (*(void (**)(char *))(*(void *)&v7[*(void *)(*(void *)v7 - 56)] + 8))(&v7[*(void *)(*(void *)v7 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v11, (void *)this + 1);
  uint64_t v9 = v11[0];
  if (v11[0]) {
    uint64_t v9 = v11[0] + *(void *)(*(void *)v11[0] - 408);
  }
  uint64_t v10 = v11[1];
  *a5 = v9;
  a5[1] = v10;
  return result;
}

void *AdobeXMPCommon::IUTF8StringProxy::insert@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v11 = *(void *)(a1 + 24);
  if (*a3) {
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 216))(*a3);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v11, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::insert, 0, a2, v12, a4, a5);
  (*(void (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 8))(&v13[*(void *)(*(void *)v13 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v17, (void *)(a1 + 8));
  uint64_t v15 = v17[0];
  if (v17[0]) {
    uint64_t v15 = v17[0] + *(void *)(*(void *)v17[0] - 408);
  }
  uint64_t v16 = v17[1];
  *a6 = v15;
  a6[1] = v16;
  return result;
}

void *AdobeXMPCommon::IUTF8StringProxy::erase@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::erase, 0, a2, a3);
  (*(void (**)(char *))(*(void *)&v6[*(void *)(*(void *)v6 - 56)] + 8))(&v6[*(void *)(*(void *)v6 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v10, (void *)this + 1);
  uint64_t v8 = v10[0];
  if (v10[0]) {
    uint64_t v8 = v10[0] + *(void *)(*(void *)v10[0] - 408);
  }
  uint64_t v9 = v10[1];
  *a4 = v8;
  a4[1] = v9;
  return result;
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::resize(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t a2)
{
  return AdobeXMPCommon::CallSafeFunctionReturningVoid<AdobeXMPCommon::IUTF8String_v1,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::resize, 0, a2);
}

void *AdobeXMPCommon::IUTF8StringProxy::replace@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, const char *a2@<X3>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v8 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long,char const*,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::replace, 0, a3, a4, (uint64_t)a2, a5);
  (*(void (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 8))(&v8[*(void *)(*(void *)v8 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v12, (void *)this + 1);
  uint64_t v10 = v12[0];
  if (v12[0]) {
    uint64_t v10 = v12[0] + *(void *)(*(void *)v12[0] - 408);
  }
  uint64_t v11 = v12[1];
  *a6 = v10;
  a6[1] = v11;
  return result;
}

void *AdobeXMPCommon::IUTF8StringProxy::replace@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = *(void *)(a1 + 24);
  if (*a4) {
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*a4 + 216))(*a4);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v13, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::replace, 0, a2, a3, v14, a5, a6);
  (*(void (**)(char *))(*(void *)&v15[*(void *)(*(void *)v15 - 56)] + 8))(&v15[*(void *)(*(void *)v15 - 56)]);
  uint64_t result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v19, (void *)(a1 + 8));
  uint64_t v17 = v19[0];
  if (v19[0]) {
    uint64_t v17 = v19[0] + *(void *)(*(void *)v19[0] - 408);
  }
  uint64_t v18 = v19[1];
  *a7 = v17;
  a7[1] = v18;
  return result;
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::copy(AdobeXMPCommon::IUTF8StringProxy *this, char *a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char *,unsigned long long,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::copy, 0, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::find(AdobeXMPCommon::IUTF8StringProxy *this, const char *a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::find, 0, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::find(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (*a2) {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 216))(*a2);
  }
  else {
    uint64_t v7 = 0;
  }

  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::find, 0, v7, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::rfind(AdobeXMPCommon::IUTF8StringProxy *this, const char *a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::rfind, 0, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::rfind(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (*a2) {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 216))(*a2);
  }
  else {
    uint64_t v7 = 0;
  }

  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v6, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::rfind, 0, v7, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::compare(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,char const*,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::compare, 0, a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::compare(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a1 + 24);
  if (*a4) {
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*a4 + 216))(*a4);
  }
  else {
    uint64_t v11 = 0;
  }

  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v10, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::compare, 0, a2, a3, v11, a5, a6);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::substr@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(*((void *)this + 3), (uint64_t (*)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::substr, 0, a2, a3, a4);
}

BOOL AdobeXMPCommon::IUTF8StringProxy::empty(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,BOOL,unsigned int>(*((void *)this + 3), (uint64_t (*)(void *, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IUTF8String_v1::empty, 0);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::c_str(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 192))();
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::clear(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 200))();
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::size(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 208))();
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::GetActualIUTF8String(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return *((void *)this + 3);
}

void AdobeXMPCommon::IUTF8StringProxy::assign()
{
}

{
  __assert_rtn("assign", "IUTF8String.cpp", 88, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::append()
{
}

{
  __assert_rtn("append", "IUTF8String.cpp", 64, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::insert()
{
}

{
  __assert_rtn("insert", "IUTF8String.cpp", 112, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::erase()
{
}

void AdobeXMPCommon::IUTF8StringProxy::resize()
{
}

void AdobeXMPCommon::IUTF8StringProxy::replace()
{
}

{
  __assert_rtn("replace", "IUTF8String.cpp", 158, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::copy()
{
}

void AdobeXMPCommon::IUTF8StringProxy::find()
{
}

{
  __assert_rtn("find", "IUTF8String.cpp", 189, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::rfind()
{
}

{
  __assert_rtn("rfind", "IUTF8String.cpp", 209, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::compare()
{
}

{
  __assert_rtn("compare", "IUTF8String.cpp", 229, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::substr()
{
}

void AdobeXMPCommon::IUTF8StringProxy::empty()
{
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::GetInterfacePointer(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3) {
    uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 64);
  }
  else {
    uint64_t v4 = 0;
  }
  return AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(v4, (uint64_t (*)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IVersionable::getInterfacePointer, 0, a2, a3);
}

void AdobeXMPCommon::IUTF8StringProxy::getInterfacePointer()
{
}

void virtual thunk to'AdobeXMPCommon::IUTF8StringProxy::~IUTF8StringProxy(AdobeXMPCommon::IUTF8StringProxy *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x18C11C0E0);
}

uint64_t virtual thunk to'AdobeXMPCommon::IUTF8StringProxy::GetInterfacePointer(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)((char *)this + *(void *)(*(void *)this - 32) + 24);
  if (v3) {
    uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 64);
  }
  else {
    uint64_t v4 = 0;
  }
  return AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(v4, (uint64_t (*)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IVersionable::getInterfacePointer, 0, a2, a3);
}

void virtual thunk to'AdobeXMPCommon::IUTF8StringProxy::getInterfacePointer()
{
}

void AdobeXMPCommon::IUTF8StringProxy::~IUTF8StringProxy(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 408)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[3];
  uint64_t v4 = *((void *)this + 3) + *(void *)(**((void **)this + 3) - 56);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  uint64_t v9 = 0;
  uint64_t v6 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v6 + a2);
  }
  uint64_t result = v5(v6, a4, a5, &v9);
  if (v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v9, exception);
  }
  return result;
}

void sub_188817248(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::append(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 240))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 248))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

double AdobeXMPCommon::IError_v1::MakeShared@<D0>(AdobeXMPCommon::IError_v1 *this@<X0>, _OWORD *a2@<X8>)
{
  AdobeXMPCommon::IError_v1::MakeShared((uint64_t)this, &v5);
  double result = *(double *)&v5;
  *a2 = v5;
  return result;
}

uint64_t std::shared_ptr<AdobeXMPCommon::IError_v1 const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2;
  uint64_t v10 = 0;
  uint64_t v7 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  }
  uint64_t result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_1888173F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::assign(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 224))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 232))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,char const*,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2;
  uint64_t v10 = 0;
  uint64_t v7 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  }
  uint64_t result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_188817534(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::insert(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 256))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 264))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a2;
  uint64_t v11 = 0;
  uint64_t v8 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v8 + a2);
  }
  uint64_t result = v7(v8, a4, a5, a6, a7, &v11);
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v11, exception);
  }
  return result;
}

void sub_188817638(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v5 = a2;
  uint64_t v9 = 0;
  uint64_t v6 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    long long v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v6 + a2);
  }
  uint64_t result = v5(v6, a4, a5, &v9);
  if (v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v9, exception);
  }
  return result;
}

void sub_188817734(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::erase(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 272))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t AdobeXMPCommon::CallSafeFunctionReturningVoid<AdobeXMPCommon::IUTF8String_v1,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v8 = 0;
  long long v5 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, AdobeXMPCommon::IError_v1 **))(*v5 + a2);
  }
  uint64_t result = v4(v5, a4, &v8);
  if (v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v8, exception);
  }
  return result;
}

void sub_188817828(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::resize(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 280))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long,char const*,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a2;
  uint64_t v11 = 0;
  uint64_t v8 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v8 + a2);
  }
  uint64_t result = v7(v8, a4, a5, a6, a7, &v11);
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v11, exception);
  }
  return result;
}

void sub_18881792C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::replace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 288))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 296))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  uint64_t v12 = 0;
  uint64_t v9 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v9 + a2);
  }
  uint64_t result = v8(v9, a4, a5, a6, a7, a8, &v12);
  if (v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v12, exception);
  }
  return result;
}

void sub_188817A34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char *,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2;
  uint64_t v10 = 0;
  uint64_t v7 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  }
  uint64_t result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_188817B34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::copy(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 304))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2;
  uint64_t v10 = 0;
  uint64_t v7 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  }
  uint64_t result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_188817C34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::find(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 320))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2;
  uint64_t v10 = 0;
  uint64_t v7 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  }
  uint64_t result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_188817D34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::rfind(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 328))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 336))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,char const*,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a2;
  uint64_t v11 = 0;
  uint64_t v8 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v8 + a2);
  }
  uint64_t result = v7(v8, a4, a5, a6, a7, &v11);
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v11, exception);
  }
  return result;
}

void sub_188817E90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::compare(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 344))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 352))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  uint64_t v12 = 0;
  uint64_t v9 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v9 + a2);
  }
  uint64_t result = v8(v9, a4, a5, a6, a7, a8, &v12);
  if (v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v12, exception);
  }
  return result;
}

void sub_188817F98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = a2;
  uint64_t v12 = 0;
  uint64_t v8 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v8 + a2);
  }
  uint64_t v9 = v6(v8, a4, a5, &v12);
  if (v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v12, exception);
  }
  return AdobeXMPCommon::IUTF8String_v1::MakeShared(v9, a6);
}

void sub_1888180A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::substr(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 360))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

BOOL AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,BOOL,unsigned int>(uint64_t a1, uint64_t (*a2)(void *, AdobeXMPCommon::IError_v1 **), uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v8 = 0;
  uint64_t v4 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v3 = *(uint64_t (**)(void *, AdobeXMPCommon::IError_v1 **))(*v4 + a2);
  }
  int v5 = v3(v4, &v8);
  if (v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v8, exception);
  }
  return v5 != 0;
}

void sub_188818198(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::empty(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 368))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(uint64_t a1, uint64_t (*a2)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = a2;
  uint64_t v9 = 0;
  uint64_t v6 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    int v5 = *(uint64_t (**)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v6 + a2);
  }
  uint64_t result = v5(v6, a4, a5, &v9);
  if (v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v9, exception);
  }
  return result;
}

void sub_188818294(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IVersionable::getInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18881834C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<AdobeXMPCommon::IUTF8StringProxy *,std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__shared_ptr_default_delete<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy>,std::allocator<AdobeXMPCommon::IUTF8StringProxy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCommon::IUTF8StringProxy *,std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__shared_ptr_default_delete<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy>,std::allocator<AdobeXMPCommon::IUTF8StringProxy>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCommon::IUTF8StringProxy *,std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__shared_ptr_default_delete<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy>,std::allocator<AdobeXMPCommon::IUTF8StringProxy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

void TIFF_Manager::TIFF_Manager(TIFF_Manager *this)
{
  *(void *)this = &unk_1ED4DF250;
  *((void *)this + 10) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_DWORD *)((char *)this + 71) = 0;
  if ((sFirstCTor & 1) == 0)
  {
    uint64_t v1 = 0;
    sFirstCTor = 1;
    do
    {
      uint64_t v2 = (unsigned __int16 *)*(&sKnownTags + v1);
      unsigned int v5 = *v2;
      uint64_t v3 = v2 + 1;
      unsigned int v4 = v5;
      while (v4 != 0xFFFF)
      {
        unsigned int v6 = *v3++;
        BOOL v7 = v4 >= v6;
        unsigned int v4 = v6;
        if (v7) {
          TIFF_Manager::TIFF_Manager();
        }
      }
      ++v1;
    }
    while (v1 != 5);
  }
}

uint64_t TIFF_Manager::CheckTIFFHeader(TIFF_Manager *this, unsigned int *a2, unsigned int a3)
{
  if (a3 <= 7)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    uint64_t v17 = "The TIFF is too small";
    goto LABEL_14;
  }
  unsigned int v4 = bswap32(*a2);
  unsigned int v5 = PutDoubleBE;
  unsigned int v6 = PutFloatBE;
  BOOL v7 = PutUns32BE;
  uint64_t v8 = PutUns16BE;
  uint64_t v9 = GetDoubleBE;
  uint64_t v10 = GetFloatBE;
  uint64_t v11 = GetUns32BE;
  uint64_t v12 = GetUns16BE;
  if (v4 == 1229531648)
  {
    char v14 = 0;
    unsigned int v5 = PutDoubleLE;
    unsigned int v6 = PutFloatLE;
    BOOL v7 = PutUns32LE;
    uint64_t v8 = PutUns16LE;
    uint64_t v9 = GetDoubleLE;
    uint64_t v10 = GetFloatLE;
    uint64_t v11 = GetUns32LE;
    uint64_t v12 = GetUns16LE;
    char v13 = 1;
  }
  else
  {
    if (v4 != 1296891946)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 206;
      uint64_t v17 = "Unrecognized TIFF prefix";
LABEL_14:
      exception[1] = v17;
      *((unsigned char *)exception + 16) = 0;
    }
    char v13 = 0;
    char v14 = 1;
  }
  *((unsigned char *)this + 72) = v14;
  *((unsigned char *)this + 73) = v13;
  *((void *)this + 1) = v12;
  *((void *)this + 2) = v11;
  *((void *)this + 3) = v10;
  *((void *)this + 4) = v9;
  *((void *)this + 5) = v8;
  *((void *)this + 6) = v7;
  *((void *)this + 7) = v6;
  *((void *)this + 8) = v5;
  uint64_t result = v11(a2 + 1);
  if (result && (a3 < 0xE || result < 8 || (unint64_t)a3 - 6 < result))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    uint64_t v17 = "Invalid primary IFD offset";
    goto LABEL_14;
  }
  return result;
}

uint64_t GetUns16BE(unsigned __int16 *a1)
{
  return bswap32(*a1) >> 16;
}

uint64_t GetUns32BE(unsigned int *a1)
{
  return bswap32(*a1);
}

float GetFloatBE(unsigned int *a1)
{
  return COERCE_FLOAT(bswap32(*a1));
}

double GetDoubleBE(unint64_t *a1)
{
  return COERCE_DOUBLE(bswap64(*a1));
}

uint64_t PutUns16BE(uint64_t result, _WORD *a2)
{
  *a2 = __rev16(result);
  return result;
}

uint64_t PutUns32BE(uint64_t result, _DWORD *a2)
{
  *a2 = bswap32(result);
  return result;
}

_DWORD *PutFloatBE(float a1, _DWORD *result)
{
  *uint64_t result = bswap32(LODWORD(a1));
  return result;
}

void *PutDoubleBE(double a1, void *result)
{
  *uint64_t result = bswap64(*(unint64_t *)&a1);
  return result;
}

uint64_t GetUns16LE(unsigned __int16 *a1)
{
  return *a1;
}

{
  return *a1;
}

uint64_t GetUns32LE(unsigned int *a1)
{
  return *a1;
}

{
  return *a1;
}

float GetFloatLE(const void *a1)
{
  return *(float *)a1;
}

{
  return *(float *)a1;
}

double GetDoubleLE(const void *a1)
{
  return *(double *)a1;
}

{
  return *(double *)a1;
}

uint64_t PutUns16LE(uint64_t result, _WORD *a2)
{
  *a2 = result;
  return result;
}

{
  *a2 = result;
  return result;
}

uint64_t PutUns32LE(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  return result;
}

{
  *a2 = result;
  return result;
}

float *PutFloatLE(float a1, float *result)
{
  *uint64_t result = a1;
  return result;
}

{
  *uint64_t result = a1;
  return result;
}

double *PutDoubleLE(double a1, double *result)
{
  *uint64_t result = a1;
  return result;
}

{
  *uint64_t result = a1;
  return result;
}

uint64_t TIFF_Manager::SetTag_Byte(TIFF_Manager *this, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = a4;
  return (*(uint64_t (**)(TIFF_Manager *, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)this + 32))(this, a2, a3, 1, 1, &v5);
}

uint64_t TIFF_Manager::SetTag_Short(void (**this)(uint64_t, __int16 *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v8 = 0;
  this[5](a4, &v8);
  return (*((uint64_t (**)(void (**)(uint64_t, __int16 *), uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))*this
          + 4))(this, a2, a3, 3, 1, &v8);
}

uint64_t TIFF_Manager::SetTag_Long(void (**this)(uint64_t, int *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = 0;
  this[6](a4, &v8);
  return (*((uint64_t (**)(void (**)(uint64_t, int *), uint64_t, uint64_t, uint64_t, uint64_t, int *))*this
          + 4))(this, a2, a3, 4, 1, &v8);
}

uint64_t TIFF_Manager::SetTag_Rational(void (**this)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 0;
  this[6](a4, &v10);
  this[6](a5, (uint64_t *)((char *)&v10 + 4));
  return (*((uint64_t (**)(void (**)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))*this
          + 4))(this, a2, a3, 5, 1, &v10);
}

uint64_t TIFF_Manager::SetTag_SRational(void (**this)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = 0;
  this[6](a4, &v10);
  this[6](a5, (uint64_t *)((char *)&v10 + 4));
  return (*((uint64_t (**)(void (**)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))*this
          + 4))(this, a2, a3, 10, 1, &v10);
}

uint64_t TIFF_Manager::SetTag_ASCII(TIFF_Manager *this, uint64_t a2, uint64_t a3, const char *__s)
{
  uint64_t v8 = strlen(__s) + 1;
  uint64_t v9 = *(uint64_t (**)(TIFF_Manager *, uint64_t, uint64_t, uint64_t, uint64_t, const char *))(*(void *)this
                                                                                                  + 32);

  return v9(this, a2, a3, 2, v8, __s);
}

uint64_t TIFF_Manager::DecodeString(uint64_t a1, unsigned __int8 *a2, unint64_t a3, std::string *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v8 = a3 - 8;
  if (a3 < 8) {
    return 0;
  }
  uint64_t v10 = a2 + 8;
  int v9 = *a2;
  if (v9 == 85)
  {
    if (v8 >= 2)
    {
      unint64_t v12 = v8 >> 1;
      int v13 = (unsigned __int16)*v10;
      if (v13 == 65279 || (BOOL v14 = *(unsigned char *)(a1 + 72) != 0, v13 == 65534))
      {
        BOOL v14 = *v10 == 254;
        if (!--v12) {
          return 0;
        }
        uint64_t v10 = a2 + 10;
      }
      if (v14) {
        uint64_t v15 = &UTF16BE_to_UTF8;
      }
      else {
        uint64_t v15 = &UTF16LE_to_UTF8;
      }
      uint64_t v16 = (void (*)(_WORD *, unint64_t, std::string::value_type *, uint64_t, uint64_t *, std::string::size_type *))*v15;
      std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
      std::string::reserve(this, 2 * v12);
      if (v12)
      {
        bzero(__s, 0x3E8uLL);
        std::string::size_type __n = 0;
        uint64_t v18 = 0;
        do
        {
          v16(v10, v12, __s, 1000, &v18, &__n);
          std::string::append(this, __s, __n);
          v10 += v18;
          v12 -= v18;
        }
        while (v12);
      }
      return 1;
    }
  }
  else if (v9 == 65)
  {
    MEMORY[0x18C11BE20](this, a2 + 8, v8);
    return 1;
  }
  return 0;
}

BOOL IsOffsetValid(unsigned int a1, unsigned int a2, unsigned int a3)
{
  return a2 <= a1 && a1 < a3;
}

uint64_t TIFF_Manager::EncodeString(uint64_t a1, const std::string::value_type *a2, int a3, std::string *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (a3 == 1)
  {
    MEMORY[0x18C11BE20](this, "ASCII", 8);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (size != 8) {
      TIFF_Manager::EncodeString();
    }
    int v10 = a2[23];
    if (v10 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)a2;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      std::string::size_type v12 = *((void *)a2 + 1);
    }
    std::string::append(this, v11, v12);
  }
  else
  {
    if (a3 != 2)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      if (a3 == 3)
      {
        *(_DWORD *)exception = 8;
        uint64_t v21 = "Encoding to JIS is not implemented";
      }
      else
      {
        *(_DWORD *)exception = 4;
        uint64_t v21 = "Invalid TIFF string encoding";
      }
      exception[1] = v21;
      *((unsigned char *)exception + 16) = 0;
    }
    MEMORY[0x18C11BE20](this, "UNICODE", 8);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v8 = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (v8 != 8) {
      TIFF_Manager::EncodeString();
    }
    memset(&__p, 0, sizeof(__p));
    uint64_t v13 = *((void *)a2 + 1);
    if (a2[23] >= 0)
    {
      uint64_t v14 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = *(const std::string::value_type **)a2;
      uint64_t v14 = v13;
    }
    uint64_t v15 = &UTF8_to_UTF16BE;
    if (!*(unsigned char *)(a1 + 72)) {
      uint64_t v15 = &UTF8_to_UTF16LE;
    }
    uint64_t v16 = (void (*)(const std::string::value_type *, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *))*v15;
    std::string::erase(&__p, 0, 0xFFFFFFFFFFFFFFFFLL);
    std::string::reserve(&__p, 2 * v14);
    if (v14)
    {
      bzero(__s, 0x7D0uLL);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      do
      {
        v16(a2, v14, __s, 1000, &v24, &v23);
        std::string::append(&__p, __s, 2 * v23);
        a2 += v24;
        v14 -= v24;
      }
      while (v14);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(this, (const std::string::value_type *)p_p, v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return 1;
}

void sub_188818EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x188818E54);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TIFF_Manager::NotifyClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    return GenericErrorCallback::NotifyClient(result, a2, (unsigned int *)a3, 0);
  }
  else if (a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    char v6 = *(unsigned char *)(a3 + 16);
    *(_OWORD *)exception = *(_OWORD *)a3;
    exception[16] = v6;
  }
  return result;
}

uint64_t TIFF_Manager::SetErrorCallback(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

void TIFF_Manager::TIFF_Manager()
{
}

void TIFF_Manager::EncodeString()
{
  __assert_rtn("EncodeString", "TIFF_Support.cpp", 432, "encodedStr->size() == 8");
}

{
  __assert_rtn("EncodeString", "TIFF_Support.cpp", 441, "encodedStr->size() == 8");
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, unsigned __int8 a3)
{
  uint64_t v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(void *)this + 264))(this, a2, 1, &v4);
}

{
  uint64_t v4;

  uint64_t v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(void *)this + 264))(this, a2, 8, &v4);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, unsigned __int8 a3)
{
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 24);
  uint64_t v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(void *)v3 + 264))(v3, a2, 1, &v5);
}

{
  char *v3;
  uint64_t v5;

  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 56);
  uint64_t v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(void *)v3 + 264))(v3, a2, 8, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(void *)this + 264))(this, a2, 2, &v4);
}

{
  uint64_t v4;

  uint64_t v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(void *)this + 264))(this, a2, 4, &v4);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 32);
  uint64_t v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(void *)v3 + 264))(v3, a2, 2, &v5);
}

{
  char *v3;
  uint64_t v5;

  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 40);
  uint64_t v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(void *)v3 + 264))(v3, a2, 4, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, double a3)
{
  double v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, double *))(*(void *)this + 264))(this, a2, 16, &v4);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, double a3)
{
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 48);
  double v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, double *))(*(void *)v3 + 264))(v3, a2, 16, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const char *a3)
{
  double v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, const char **))(*(void *)this + 264))(this, a2, 32, &v4);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const char *a3)
{
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 64);
  double v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, const char **))(*(void *)v3 + 264))(v3, a2, 32, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const void *a3)
{
  double v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, const void **))(*(void *)this + 264))(this, a2, 64, &v4);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const void *a3)
{
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 72);
  double v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, const void **))(*(void *)v3 + 264))(v3, a2, 64, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::setParameter(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, void *a5)
{
  if (a3 == 1) {
    *a4 = *(_DWORD *)a4 != 0;
  }
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore_Int::IConfigurable_I,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue const&>(a5, a1, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AdobeXMPCore_Int::IConfigurable_I::SetParameter, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurable_I.cpp", 63, a2, a3, (uint64_t)a4);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore_Int::IConfigurable_I,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue const&>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = a3;
  *a1 = 0;
  int v10 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v10 + a3);
  }
  return v9(v10, a7, a8, a9);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 264))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::setParameter(void *a1, uint64_t a2, uint64_t a3, BOOL *a4, void *a5)
{
  return AdobeXMPCore_Int::IConfigurable_I::setParameter((uint64_t)a1 + *(void *)(*a1 - 168), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, BOOL *a3)
{
  BOOL v5 = 0;
  uint64_t result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, BOOL *))(*(void *)this + 272))(this, a2, 1, &v5);
  *a3 = v5;
  return result;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, BOOL *a3)
{
  double v4 = (char *)this + *(void *)(*(void *)this - 88);
  BOOL v6 = 0;
  uint64_t result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, BOOL *))(*(void *)v4 + 272))(v4, a2, 1, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = 0;
  uint64_t result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, unint64_t *))(*(void *)this + 272))(this, a2, 2, &v5);
  *a3 = v5;
  return result;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, unint64_t *a3)
{
  double v4 = (char *)this + *(void *)(*(void *)this - 96);
  unint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, unint64_t *))(*(void *)v4 + 272))(v4, a2, 2, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = 0;
  uint64_t result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(void *)this + 272))(this, a2, 4, &v5);
  *a3 = v5;
  return result;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, uint64_t *a3)
{
  double v4 = (char *)this + *(void *)(*(void *)this - 104);
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(void *)v4 + 272))(v4, a2, 4, &v6);
  *a3 = v6;
  return result;
}

double AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, double *a3)
{
  double v5 = 0.0;
  (*(void (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, double *))(*(void *)this + 272))(this, a2, 16, &v5);
  double result = v5;
  *a3 = v5;
  return result;
}

double virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, double *a3)
{
  double v4 = (char *)this + *(void *)(*(void *)this - 112);
  double v6 = 0.0;
  (*(void (**)(char *, const unint64_t *, uint64_t, double *))(*(void *)v4 + 272))(v4, a2, 16, &v6);
  double result = v6;
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, char *a3)
{
  uint64_t v5 = 0;
  uint64_t result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(void *)this + 272))(this, a2, 8, &v5);
  *a3 = v5;
  return result;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, char *a3)
{
  double v4 = (char *)this + *(void *)(*(void *)this - 120);
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(void *)v4 + 272))(v4, a2, 8, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const char **a3)
{
  uint64_t v5 = 0;
  uint64_t result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, const char **))(*(void *)this + 272))(this, a2, 32, &v5);
  *a3 = v5;
  return result;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const char **a3)
{
  double v4 = (char *)this + *(void *)(*(void *)this - 128);
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, const char **))(*(void *)v4 + 272))(v4, a2, 32, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const void **a3)
{
  uint64_t v5 = 0;
  uint64_t result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, const void **))(*(void *)this + 272))(this, a2, 64, &v5);
  *a3 = v5;
  return result;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const void **a3)
{
  double v4 = (char *)this + *(void *)(*(void *)this - 136);
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, const void **))(*(void *)v4 + 272))(v4, a2, 64, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::getParameter(uint64_t a1, uint64_t a2, unsigned int a3, BOOL *a4, void *a5)
{
  uint64_t result = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore_Int::IConfigurable_I,unsigned int,BOOL,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue &>(a5, a1, 0, (uint64_t (*)(void *, uint64_t, void, uint64_t))AdobeXMPCore_Int::IConfigurable_I::GetParameter, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurable_I.cpp", 117, a2, a3, (uint64_t)a4);
  if (a3 == 1) {
    *a4 = *(_DWORD *)a4 != 0;
  }
  return result;
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore_Int::IConfigurable_I,unsigned int,BOOL,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue &>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  int v10 = a4;
  *a1 = 0;
  uint64_t v11 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    int v10 = *(uint64_t (**)(void *, uint64_t, void, uint64_t))(*v11 + a4);
  }
  return v10(v11, a8, a9, a10);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 272))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::getParameter(void *a1, uint64_t a2, unsigned int a3, BOOL *a4, void *a5)
{
  return AdobeXMPCore_Int::IConfigurable_I::getParameter((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::removeParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurable,unsigned int,BOOL,unsigned long long const&>(a3, (uint64_t)this + *(void *)(*(void *)this - 216), 0, (uint64_t (*)(void *, uint64_t))AdobeXMPCommon::IConfigurable::RemoveParameter, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurable_I.cpp", 125, (uint64_t)a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurable,unsigned int,BOOL,unsigned long long const&>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a1 = 0;
  std::string::size_type v8 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t))(*v8 + a4);
  }
  return a4(v8, a8);
}

uint64_t AdobeXMPCommon::IConfigurable::RemoveParameter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::removeParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::IConfigurable_I::removeParameter((AdobeXMPCore_Int::IConfigurable_I *)((char *)this + *(void *)(*(void *)this - 176)), a2, a3);
}

void AdobeXMPCore_Int::IConfigurable_I::getAllParameters(AdobeXMPCore_Int::IConfigurable_I *this, unint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 216)) + 128))((char *)this + *(void *)(*(void *)this - 216));
  std::string __p = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 216)) + 120))(&__p);
  uint64_t v5 = __p;
  if (v4)
  {
    uint64_t v6 = (unint64_t *)__p;
    do
    {
      unint64_t v7 = *v6++;
      *a2++ = v7;
      --v4;
    }
    while (v4);
  }
  else if (!__p)
  {
    return;
  }
  int v9 = v5;
  operator delete(v5);
}

void virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::getAllParameters(AdobeXMPCore_Int::IConfigurable_I *this, unint64_t *a2)
{
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::getDataType(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IConfigurable,unsigned int,AdobeXMPCommon::IConfigurable::eDataType,unsigned long long const&>(a3, (uint64_t)this + *(void *)(*(void *)this - 216), 0, (uint64_t (*)(void *, uint64_t))AdobeXMPCommon::IConfigurable::GetDataType, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurable_I.cpp", 138, (uint64_t)a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IConfigurable,unsigned int,AdobeXMPCommon::IConfigurable::eDataType,unsigned long long const&>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a1 = 0;
  std::string::size_type v8 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t))(*v8 + a4);
  }
  return a4(v8, a8);
}

uint64_t AdobeXMPCommon::IConfigurable::GetDataType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::getDataType(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::IConfigurable_I::getDataType((AdobeXMPCore_Int::IConfigurable_I *)((char *)this + *(void *)(*(void *)this - 200)), a2, a3);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::ValidateKey(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2)
{
  return 0;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::ModifyKey(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2)
{
  return *a2;
}

uint64_t OUTLINED_FUNCTION_1()
{
  return v0;
}

void OUTLINED_FUNCTION_2()
{
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v0 + 8), 1uLL, memory_order_relaxed);
}

void *OUTLINED_FUNCTION_3(void *a1)
{
  return __cxa_get_exception_ptr(a1);
}

void AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore_Int::IConfigurable_I,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue const&>(void *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)OUTLINED_FUNCTION_3(a1) + 1);
  if (v3) {
    OUTLINED_FUNCTION_2();
  }
  __cxa_begin_catch(v2);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = OUTLINED_FUNCTION_1();
  void *v1 = v5(v4);
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = (*(uint64_t (**)(void))(v6 + 16))();
  (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  __cxa_end_catch();
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::assign(AdobeXMPCore_Int::IUTF8String_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,char const*,unsigned long long>(a4, (uint64_t)this + *(void *)(*(void *)this - 408), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::assign, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 17, (uint64_t)a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,char const*,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  std::string::size_type v8 = a3;
  *a1 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    std::string::size_type v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_18881A7C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18881A7A8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18881A940(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::assign(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IUTF8String_v1 *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v9 = *(void *)(*(void *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t)a2, &v13);
  long long v12 = v13;
  uint64_t v10 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a5, (uint64_t)this + v9, (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::assign, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 22, (uint64_t)&v12, a3, a4);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  return v10;
}

void sub_18881AA38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v9)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  uint64_t v9 = a3;
  *a1 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v10 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v9 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t))(*v10 + a3);
  }
  v9(&v14, v10, a7, a8, a9);
  if (v14)
  {
    uint64_t v11 = (*(uint64_t (**)(char *))(*(void *)&v14[*(void *)(*(void *)v14 - 56)] + 16))(&v14[*(void *)(*(void *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
    long long v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v14[*(void *)(*(void *)v14 - 64)]
                                                              + 16))(&v14[*(void *)(*(void *)v14 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    long long v12 = 0;
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v12;
}

void sub_18881ABD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18881ABB4);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18881AD4C(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::append(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,char const*,unsigned long long>(a4, (uint64_t)a1 + *(void *)(*a1 - 408), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::append, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 27, a2, a3);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::append(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IUTF8String_v1 *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v9 = *(void *)(*(void *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t)a2, &v13);
  long long v12 = v13;
  uint64_t v10 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a5, (uint64_t)this + v9, (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::append, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 32, (uint64_t)&v12, a3, a4);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  return v10;
}

void sub_18881AED0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::insert(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,char const*,unsigned long long>(a5, (uint64_t)this + *(void *)(*(void *)this - 408), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::insert, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 37, a2, (uint64_t)a3, a4);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,char const*,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v9)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  uint64_t v9 = a3;
  *a1 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v10 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v9 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t))(*v10 + a3);
  }
  v9(&v14, v10, a7, a8, a9);
  if (v14)
  {
    uint64_t v11 = (*(uint64_t (**)(char *))(*(void *)&v14[*(void *)(*(void *)v14 - 56)] + 16))(&v14[*(void *)(*(void *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
    long long v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v14[*(void *)(*(void *)v14 - 64)]
                                                              + 16))(&v14[*(void *)(*(void *)v14 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    long long v12 = 0;
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v12;
}

void sub_18881B104(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18881B0E8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18881B280(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::insert(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, const AdobeXMPCommon::IUTF8String_v1 *a3, uint64_t a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  uint64_t v11 = *(void *)(*(void *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t)a3, &v15);
  long long v14 = v15;
  uint64_t v12 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a6, (uint64_t)this + v11, (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::insert, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 42, a2, (uint64_t)&v14, a4, a5);
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
  return v12;
}

void sub_18881B37C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v10)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  std::__shared_weak_count *v16;

  uint64_t v10 = a3;
  *a1 = 0;
  long long v15 = 0;
  uint64_t v16 = 0;
  uint64_t v11 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v10 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + a3);
  }
  v10(&v15, v11, a7, a8, a9, a10);
  if (v15)
  {
    uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)&v15[*(void *)(*(void *)v15 - 56)] + 16))(&v15[*(void *)(*(void *)v15 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
    long long v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v15[*(void *)(*(void *)v15 - 64)]
                                                              + 16))(&v15[*(void *)(*(void *)v15 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    long long v13 = 0;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return v13;
}

void sub_18881B514(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    long long v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18881B4F8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18881B690(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::erase(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(a4, (uint64_t)this + *(void *)(*(void *)this - 408), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::erase, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 47, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  std::string::size_type v8 = a3;
  *a1 = 0;
  long long v13 = 0;
  long long v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    std::string::size_type v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_18881B8A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    long long v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18881B884);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18881BA1C(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::resize(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCommon::IUTF8String_v1,unsigned long long>(a3, (uint64_t)this + *(void *)(*(void *)this - 408), (uint64_t (*)(void *, uint64_t))AdobeXMPCommon::IUTF8String_v1::resize, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 54, a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCommon::IUTF8String_v1,unsigned long long>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  uint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(uint64_t (**)(void *, uint64_t))(*v7 + a3);
  }
  return a3(v7, a7);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::replace(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const char *a4, unint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(void *)(*(void *)this - 408), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::replace, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 59, a2, a3, (uint64_t)a4, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v10)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  std::__shared_weak_count *v16;

  uint64_t v10 = a3;
  *a1 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v11 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v10 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + a3);
  }
  v10(&v15, v11, a7, a8, a9, a10);
  if (v15)
  {
    uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)&v15[*(void *)(*(void *)v15 - 56)] + 16))(&v15[*(void *)(*(void *)v15 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
    long long v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v15[*(void *)(*(void *)v15 - 64)]
                                                              + 16))(&v15[*(void *)(*(void *)v15 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    long long v13 = 0;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return v13;
}

void sub_18881BDFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    long long v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18881BDE0);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18881BF78(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::replace(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IUTF8String_v1 *a4, uint64_t a5, uint64_t a6, const AdobeXMPCommon::IError_v1 **a7)
{
  uint64_t v13 = *(void *)(*(void *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t)a4, &v17);
  long long v16 = v17;
  uint64_t v14 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a7, (uint64_t)this + v13, (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::replace, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 64, a2, a3, (uint64_t)&v16, a5, a6);
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  return v14;
}

void sub_18881C088(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void (*v11)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  uint64_t v11 = a3;
  *a1 = 0;
  uint64_t v12 = (void *)(a2 + (a4 >> 1));
  long long v16 = 0;
  long long v17 = 0;
  if (a4) {
    uint64_t v11 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a3);
  }
  v11(&v16, v12, a7, a8, a9, a10, a11);
  if (v16)
  {
    uint64_t v13 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v16[*(void *)(*(void *)v16 - 64)]
                                                              + 16))(&v16[*(void *)(*(void *)v16 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  return v14;
}

void sub_18881C224(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    long long v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18881C208);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18881C3A0(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::copy(AdobeXMPCore_Int::IUTF8String_I *this, char *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char *,unsigned long long,unsigned long long>(a5, (uint64_t)this + *(void *)(*(void *)this - 408), 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::copy, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 71, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char *,unsigned long long,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = a4;
  *a1 = 0;
  uint64_t v11 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v11 + a4);
  }
  return v10(v11, a8, a9, a10);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::find(AdobeXMPCore_Int::IUTF8String_I *this, const char *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(a5, (uint64_t)this + *(void *)(*(void *)this - 408), 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::find, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 78, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = a4;
  *a1 = 0;
  uint64_t v11 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v11 + a4);
  }
  return v10(v11, a8, a9, a10);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::find(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IUTF8String_v1 *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v9 = *(void *)(*(void *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t)a2, &v13);
  long long v12 = v13;
  uint64_t v10 = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a5, (uint64_t)this + v9, 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::find, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 85, (uint64_t)&v12, a3, a4);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  return v10;
}

void sub_18881C858(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = a4;
  *a1 = 0;
  uint64_t v11 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v11 + a4);
  }
  return v10(v11, a8, a9, a10);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::rfind(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(a5, (uint64_t)a1 + *(void *)(*a1 - 408), 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::rfind, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 92, a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::rfind(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IUTF8String_v1 *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v9 = *(void *)(*(void *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t)a2, &v13);
  long long v12 = v13;
  uint64_t v10 = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a5, (uint64_t)this + v9, 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::rfind, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 99, (uint64_t)&v12, a3, a4);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  return v10;
}

void sub_18881CB3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::compare(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(void *)(*(void *)this - 408), 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::compare, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 106, a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,char const*,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a4;
  *a1 = 0;
  long long v12 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a4);
  }
  return v11(v12, a8, a9, a10, a11);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::compare(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IUTF8String_v1 *a4, uint64_t a5, uint64_t a6, const AdobeXMPCommon::IError_v1 **a7)
{
  uint64_t v13 = *(void *)(*(void *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t)a4, &v17);
  long long v16 = v17;
  uint64_t v14 = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a7, (uint64_t)this + v13, 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::compare, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 113, a2, a3, (uint64_t)&v16, a5, a6);
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  return v14;
}

void sub_18881CE48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  long long v12 = a4;
  *a1 = 0;
  uint64_t v13 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    long long v12 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v13 + a4);
  }
  return v12(v13, a8, a9, a10, a11, a12);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::substr(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(a4, (uint64_t)this + *(void *)(*(void *)this - 408), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCommon::IUTF8String_v1::substr, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 118, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  std::string::size_type v8 = a3;
  *a1 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    std::string::size_type v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_18881D1B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    long long v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18881D198);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18881D330(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::empty(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(void *)(*(void *)this - 408), 0, (uint64_t (*)(void *))AdobeXMPCommon::IUTF8String_v1::empty, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned int,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

void *AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointer(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x6E55544638537472)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6E55544638537472, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 408));
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6E55544638537472, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_18881D640(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointer(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IUTF8String_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::getInterfacePointer(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IUTF8String_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 134, a2, a3);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IUTF8String_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IUTF8String_I::getInterfacePointer(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IUTF8String_I::getInterfacePointer((AdobeXMPCore_Int::IUTF8String_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::GetActualIUTF8String(AdobeXMPCore_Int::IUTF8String_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 408);
}

void XMP_Node::SetValue(XMP_Node *this, char *__s)
{
  uint64_t v4 = (char **)((char *)this + 16);
  int v5 = *((unsigned __int8 *)this + 39);
  if (*((char *)this + 39) < 0)
  {
    if (*((void *)this + 3) != 20) {
      goto LABEL_27;
    }
    uint64_t v6 = *v4;
  }
  else
  {
    uint64_t v6 = (char *)this + 16;
    if (v5 != 20) {
      goto LABEL_27;
    }
  }
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *((void *)v6 + 1);
  int v9 = *((_DWORD *)v6 + 4);
  BOOL v11 = v7 == 0x747365543A706D78 && v8 == 0x6F4E747265737341 && v9 == 2036754804;
  if (v11 && !strcmp(__s, "DoIt!"))
  {
    if ((v5 & 0x80) != 0)
    {
      if (*((void *)this + 3) != 20) {
        goto LABEL_27;
      }
      long long v12 = (char **)*v4;
    }
    else
    {
      long long v12 = v4;
      if (v5 != 20) {
        goto LABEL_27;
      }
    }
    uint64_t v13 = (uint64_t)*v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *((unsigned int *)v12 + 4);
    if (v13 == 0x747365543A706D78 && v14 == (char *)0x6F4E747265737341 && v15 == 2036754804) {
      XMP_Node::SetValue();
    }
  }
LABEL_27:
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v26 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (v26 >= 0) {
    std::string::size_type v18 = (char *)__p;
  }
  else {
    std::string::size_type v18 = (char *)__p[0];
  }
  unsigned int v19 = *v18;
  if (!*v18) {
    goto LABEL_42;
  }
  do
  {
    if ((char)v19 < 1) {
      goto LABEL_40;
    }
    do
    {
      if (v19 > 0x1F)
      {
        if (v19 != 127) {
          goto LABEL_35;
        }
LABEL_38:
        *std::string::size_type v18 = 32;
        goto LABEL_35;
      }
      if (v19 > 0xD || ((1 << v19) & 0x2600) == 0) {
        goto LABEL_38;
      }
LABEL_35:
      int v20 = *++v18;
      unsigned int v19 = v20;
    }
    while (v20 > 0);
    if (!v19) {
      break;
    }
LABEL_40:
    v28[0] = 0;
    unint64_t v27 = 0;
    CodePoint_from_UTF8(v18, 4uLL, v28, &v27);
    if (v28[0] >> 1 == 0x7FFF)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 205;
      exception[1] = "U+FFFE and U+FFFF are not allowed in XML";
      *((unsigned char *)exception + 16) = 0;
    }
    v18 += v27;
    unsigned int v19 = *v18;
  }
  while (*v18);
LABEL_42:
  if ((*((unsigned char *)this + 8) & 0x20) == 0) {
    goto LABEL_50;
  }
  int v21 = *((char *)this + 39);
  if (v21 < 0)
  {
    if (*((void *)this + 3) != 8) {
      goto LABEL_50;
    }
    uint64_t v4 = (char **)*v4;
  }
  else if (v21 != 8)
  {
    goto LABEL_50;
  }
  if (*v4 == (char *)0x676E616C3A6C6D78) {
    NormalizeLangValue((unsigned __int8 *)__p);
  }
LABEL_50:
  uint64_t v22 = *((void *)this + 7);
  long long v23 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)__p;
  *((void *)this + 7) = v26;
  *(_OWORD *)std::string __p = v23;
  uint64_t v26 = v22;
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
}

void sub_18881DB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL XMPMeta::GetProperty(XMPMeta *this, char *a2, char *a3, const char **a4, unsigned int *a5, unsigned int *a6)
{
  if (!a2 || !a3) {
    XMPMeta::GetProperty();
  }
  if (!a4 || !a5 || !a6) {
    XMPMeta::GetProperty();
  }
  memset(v15, 0, sizeof(v15));
  ExpandXPath(a2, a3, (uint64_t *)v15);
  uint64_t Node = FindNode((void *)this + 28, v15, 0, 0, 0);
  if (Node)
  {
    BOOL v11 = (const char *)(Node + 40);
    if (*(char *)(Node + 63) < 0) {
      BOOL v11 = *(const char **)v11;
    }
    *a4 = v11;
    if (*(char *)(Node + 63) < 0) {
      uint64_t v12 = *(void *)(Node + 48);
    }
    else {
      LODWORD(v12) = *(unsigned __int8 *)(Node + 63);
    }
    *a5 = v12;
    *a6 = *(_DWORD *)(Node + 8);
  }
  BOOL v13 = Node != 0;
  long long v16 = v15;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  return v13;
}

void sub_18881DC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t XMPMeta::GetArrayItem(XMPMeta *this, char *a2, char *a3, int a4, const char **a5, unsigned int *a6, unsigned int *a7)
{
  if (!a2 || !a3) {
    XMPMeta::GetArrayItem();
  }
  if (!a5 || !a7) {
    XMPMeta::GetArrayItem();
  }
  if (a4 <= 0 && a4 != -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Array index must be larger than zero";
    *((unsigned char *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeArrayItemPath(a2, a3, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v13 = (*(uint64_t (**)(XMPMeta *, char *, std::string *, const char **, unsigned int *, unsigned int *))(*(void *)this + 16))(this, a2, p_p, a5, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_18881DD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta::GetStructField(XMPMeta *this, char *a2, char *a3, char *a4, char *a5, const char **a6, unsigned int *a7, unsigned int *a8)
{
  if (!a5 || !a2 || !a3 || !a4) {
    XMPMeta::GetStructField();
  }
  if (!a6 || !a8) {
    XMPMeta::GetStructField();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeStructFieldPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v14 = (*(uint64_t (**)(XMPMeta *, char *, std::string *, const char **, unsigned int *, unsigned int *))(*(void *)this + 16))(this, a2, p_p, a6, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_18881DE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta::GetQualifier(XMPMeta *this, char *a2, char *a3, char *a4, char *a5, const char **a6, unsigned int *a7, unsigned int *a8)
{
  if (!a5 || !a2 || !a3 || !a4) {
    XMPMeta::GetQualifier();
  }
  if (!a6 || !a8) {
    XMPMeta::GetQualifier();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeQualifierPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v14 = (*(uint64_t (**)(XMPMeta *, char *, std::string *, const char **, unsigned int *, unsigned int *))(*(void *)this + 16))(this, a2, p_p, a6, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_18881DF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty(XMPMeta *this, char *a2, char *a3, char *a4, unsigned int a5)
{
  if (!a2 || !a3) {
    XMPMeta::SetProperty();
  }
  unsigned int v9 = VerifySetOptions(a5, a4);
  memset(v12, 0, sizeof(v12));
  ExpandXPath(a2, a3, (uint64_t *)v12);
  uint64_t Node = (XMP_Node *)FindNode((void *)this + 28, v12, 1, v9, 0);
  if (!Node)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified property does not exist";
    *((unsigned char *)exception + 16) = 0;
  }
  SetNode(Node, a4, v9);
  uint64_t v13 = v12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_18881E064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void SetNode(XMP_Node *this, char *__s, unsigned int a3)
{
  unsigned int v3 = a3;
  if ((a3 & 0x20000000) != 0)
  {
    unsigned int v3 = a3 & 0xDFFFFFFF;
    *((_DWORD *)this + 2) = a3 & 0xDFFFFFFF;
    std::string::erase((std::string *)((char *)this + 40), 0, 0xFFFFFFFFFFFFFFFFLL);
    XMP_Node::RemoveChildren(this);
    XMP_Node::RemoveQualifiers(this);
  }
  int v6 = *((_DWORD *)this + 2) | v3;
  *((_DWORD *)this + 2) = v6;
  if (__s)
  {
    if ((v6 & 0x1F00) == 0)
    {
      if (*((void *)this + 9) != *((void *)this + 10)) {
        SetNode();
      }
      XMP_Node::SetValue(this, __s);
      return;
    }
    goto LABEL_20;
  }
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 63)) {
      goto LABEL_11;
    }
LABEL_20:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v10 = "Composite nodes can't have values";
LABEL_22:
    exception[1] = v10;
    *((unsigned char *)exception + 16) = 0;
  }
  if (*((void *)this + 6)) {
    goto LABEL_20;
  }
LABEL_11:
  int v7 = v6 & 0x1F00;
  if (v7) {
    BOOL v8 = (v3 & 0x1F00) == v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v10 = "Requested and existing composite form mismatch";
    goto LABEL_22;
  }

  XMP_Node::RemoveChildren(this);
}

void XMPMeta::SetArrayItem(XMPMeta *this, char *a2, char *a3, int a4, char *a5, int a6)
{
  if (!a2 || !a3) {
    XMPMeta::SetArrayItem();
  }
  memset(v12, 0, sizeof(v12));
  ExpandXPath(a2, a3, (uint64_t *)v12);
  uint64_t Node = (XMP_Node *)FindNode((void *)this + 28, v12, 0, 0, 0);
  if (!Node)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified array does not exist";
    *((unsigned char *)exception + 16) = 0;
  }
  DoSetArrayItem(Node, a4, a5, a6);
  uint64_t v13 = v12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_18881E290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void DoSetArrayItem(XMP_Node *a1, int a2, char *a3, int a4)
{
  int v6 = a4 & 0xC000;
  int v7 = (void *)((char *)a1 + 72);
  uint64_t v8 = (*((void *)a1 + 10) - *((void *)a1 + 9)) >> 3;
  unsigned int v9 = VerifySetOptions(a4 & 0xFFFF3FFF, a3);
  if (a2 == -1) {
    int v10 = v8;
  }
  else {
    int v10 = a2;
  }
  BOOL v11 = v10 == 0;
  BOOL v12 = v6 == 0x8000;
  BOOL v13 = !v12 || !v11;
  if (v12 && v11) {
    int v14 = 0x4000;
  }
  else {
    int v14 = v6;
  }
  if (!v13) {
    int v10 = 1;
  }
  if (v10 == v8 && v14 == 0x8000) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = v14;
  }
  int v16 = v10 + (v10 == v8 && v14 == 0x8000);
  if (v16 == v8 + 1)
  {
    if (v15 < 0x8000) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 104;
    unsigned int v19 = "Can't insert before or after implicit new item";
LABEL_24:
    exception[1] = v19;
    *((unsigned char *)exception + 16) = 0;
  }
  if (v16 < 1 || v16 > (int)v8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 104;
    unsigned int v19 = "Array index out of bounds";
    goto LABEL_24;
  }
  if (v15) {
    operator new();
  }
  SetNode(*(XMP_Node **)(*v7 + 8 * (v16 - 1)), a3, v9);
}

void sub_18881E52C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void XMPMeta::AppendArrayItem(XMPMeta *this, char *a2, char *a3, unsigned int a4, char *a5, int a6)
{
  if (!a2 || !a3) {
    XMPMeta::AppendArrayItem();
  }
  int v11 = VerifySetOptions(a4, 0);
  if ((v11 & 0xFFFFE1FF) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    exception[1] = "Only array form flags allowed for arrayOptions";
    *((unsigned char *)exception + 16) = 0;
  }
  int v12 = v11;
  memset(v18, 0, sizeof(v18));
  ExpandXPath(a2, a3, (uint64_t *)v18);
  BOOL v13 = (void *)((char *)this + 224);
  uint64_t Node = (XMP_Node *)FindNode(v13, v18, 0, 0, 0);
  if (!Node)
  {
    if (v12)
    {
      uint64_t Node = (XMP_Node *)FindNode(v13, v18, 1, v12, 0);
      if (Node) {
        goto LABEL_9;
      }
      unsigned int v15 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)unsigned int v15 = 102;
      int v16 = "Failure creating array node";
    }
    else
    {
      unsigned int v15 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)unsigned int v15 = 103;
      int v16 = "Explicit arrayOptions required to create new array";
    }
LABEL_14:
    v15[1] = v16;
    *((unsigned char *)v15 + 16) = 0;
  }
  if ((*((unsigned char *)Node + 9) & 2) == 0)
  {
    unsigned int v15 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)unsigned int v15 = 102;
    int v16 = "The named property is not an array";
    goto LABEL_14;
  }
LABEL_9:
  DoSetArrayItem(Node, -1, a5, a6 | 0x8000);
  unsigned int v19 = v18;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_18881E6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void XMPMeta::SetStructField(XMPMeta *this, char *a2, char *a3, char *a4, char *a5, const char *a6, uint64_t a7)
{
  if (!a5 || !a2 || !a3 || !a4) {
    XMPMeta::SetStructField();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeStructFieldPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta *, char *, std::string *, const char *, uint64_t))(*(void *)this + 48))(this, a2, p_p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18881E7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetQualifier(XMPMeta *this, char *a2, char *a3, char *a4, char *a5, const char *a6, uint64_t a7)
{
  if (!a5 || !a2 || !a3 || !a4) {
    XMPMeta::SetQualifier();
  }
  memset(v17, 0, sizeof(v17));
  ExpandXPath(a2, a3, (uint64_t *)v17);
  if (!FindNode((void *)this + 28, v17, 0, 0, 0))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified property does not exist";
    *((unsigned char *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeQualifierPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta *, char *, std::string *, const char *, uint64_t))(*(void *)this + 48))(this, a2, p_p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_18881E948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void XMPMeta::DeleteProperty(XMPMeta *this, char *a2, char *a3)
{
  if (!a2 || !a3) {
    XMPMeta::DeleteProperty();
  }
  memset(v21, 0, sizeof(v21));
  ExpandXPath(a2, a3, (uint64_t *)v21);
  MD5_CTX __dst = 0;
  uint64_t Node = FindNode((void *)this + 28, v21, 0, 0, (char **)&__dst);
  uint64_t v5 = Node;
  if (Node)
  {
    uint64_t v6 = *(void *)(Node + 64);
    if ((*(unsigned char *)(Node + 8) & 0x20) == 0)
    {
      int v7 = (char *)__dst;
      uint64_t v8 = *(unsigned char **)(v6 + 80);
      int64_t v9 = v8 - ((unsigned char *)__dst + 8);
      if (v8 != (char *)__dst + 8) {
        memmove(__dst, (char *)__dst + 8, v8 - ((unsigned char *)__dst + 8));
      }
      *(void *)(v6 + 80) = &v7[v9];
      DeleteEmptySchema((void *)v6);
LABEL_25:
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      goto LABEL_26;
    }
    int v10 = (void *)(Node + 16);
    int v11 = *(char *)(Node + 39);
    if (v11 < 0)
    {
      if (*(void *)(Node + 24) != 8) {
        goto LABEL_20;
      }
      int v10 = (void *)*v10;
    }
    else if (v11 != 8)
    {
      goto LABEL_20;
    }
    if (*v10 == 0x676E616C3A6C6D78)
    {
      int v14 = *(_DWORD *)(v6 + 8);
      if ((v14 & 0x40) == 0)
      {
        unsigned int v19 = "parentNode->options & kXMP_PropHasLang";
        int v20 = 685;
        goto LABEL_29;
      }
      int v13 = v14 ^ 0x40;
LABEL_19:
      *(_DWORD *)(v6 + 8) = v13;
      goto LABEL_20;
    }
    if (*v10 == 0x657079743A666472)
    {
      int v12 = *(_DWORD *)(v6 + 8);
      if ((v12 & 0x80) == 0)
      {
        unsigned int v19 = "parentNode->options & kXMP_PropHasType";
        int v20 = 688;
        goto LABEL_29;
      }
      int v13 = v12 ^ 0x80;
      goto LABEL_19;
    }
LABEL_20:
    unsigned int v15 = (char *)__dst;
    int v16 = *(unsigned char **)(v6 + 104);
    int64_t v17 = v16 - ((unsigned char *)__dst + 8);
    if (v16 != (char *)__dst + 8) {
      memmove(__dst, (char *)__dst + 8, v16 - ((unsigned char *)__dst + 8));
    }
    *(void *)(v6 + 104) = &v15[v17];
    int v18 = *(_DWORD *)(v6 + 8);
    if ((v18 & 0x10) != 0)
    {
      if (*(char **)(v6 + 96) == &v15[v17]) {
        *(_DWORD *)(v6 + 8) = v18 ^ 0x10;
      }
      goto LABEL_25;
    }
    unsigned int v19 = "parentNode->options & kXMP_PropHasQualifiers";
    int v20 = 693;
LABEL_29:
    __assert_rtn("DeleteProperty", "XMPMeta-GetSet.cpp", v20, v19);
  }
LABEL_26:
  MD5_CTX __dst = v21;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
}

void sub_18881EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void XMPMeta::DeleteArrayItem(XMPMeta *this, char *a2, char *a3, int a4)
{
  if (!a2 || !a3) {
    XMPMeta::DeleteArrayItem();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeArrayItemPath(a2, a3, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta *, char *, std::string *))(*(void *)this + 80))(this, a2, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18881EC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta::DeleteStructField(XMPMeta *this, char *a2, char *a3, char *a4, char *a5)
{
  if (!a5 || !a2 || !a3 || !a4) {
    XMPMeta::DeleteStructField();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeStructFieldPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta *, char *, std::string *))(*(void *)this + 80))(this, a2, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18881ED28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta::DeleteQualifier(XMPMeta *this, char *a2, char *a3, char *a4, char *a5)
{
  if (!a5 || !a2 || !a3 || !a4) {
    XMPMeta::DeleteQualifier();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeQualifierPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta *, char *, std::string *))(*(void *)this + 80))(this, a2, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18881EE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL XMPMeta::DoesPropertyExist(XMPMeta *this, char *a2, char *a3)
{
  if (!a2 || !a3) {
    XMPMeta::DoesPropertyExist();
  }
  memset(v6, 0, sizeof(v6));
  ExpandXPath(a2, a3, (uint64_t *)v6);
  BOOL v4 = FindNode((void *)this + 28, v6, 0, 0, 0) != 0;
  int v7 = v6;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  return v4;
}

void sub_18881EEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL XMPMeta::GetLocalizedText(XMPMeta *this, char *a2, char *a3, char *__s, char *a5, const char **a6, unsigned int *a7, const char **a8, unsigned int *a9, unsigned int *a10)
{
  if (!a5 || !a2 || !a3 || !__s) {
    XMPMeta::GetLocalizedText();
  }
  if (!a6 || !a7) {
    XMPMeta::GetLocalizedText();
  }
  if (!a8 || !a9 || !a10) {
    XMPMeta::GetLocalizedText();
  }
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v33 = 0;
  std::string::basic_string[abi:ne180100]<0>(v32, __s);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v31 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  NormalizeLangValue((unsigned __int8 *)v32);
  int64_t v17 = __p;
  NormalizeLangValue((unsigned __int8 *)__p);
  if (v33 >= 0) {
    int v18 = v32;
  }
  else {
    int v18 = (void **)v32[0];
  }
  if (v31 < 0) {
    int64_t v17 = (void **)__p[0];
  }
  memset(v29, 0, sizeof(v29));
  ExpandXPath(a2, a3, (uint64_t *)v29);
  uint64_t Node = (const XMP_Node *)FindNode((void *)this + 28, v29, 0, 0, 0);
  if (Node)
  {
    unsigned int v34 = 0;
    int v20 = ChooseLocalizedText(Node, (const char *)v18, (const char *)v17, &v34);
    BOOL v21 = v20 != 0;
    if (v20)
    {
      uint64_t v22 = v34;
      uint64_t v23 = **((void **)v34 + 12);
      uint64_t v24 = (const char *)(v23 + 40);
      if (*(char *)(v23 + 63) < 0) {
        uint64_t v24 = *(const char **)v24;
      }
      *a6 = v24;
      uint64_t v25 = **((void **)v22 + 12);
      if (*(char *)(v25 + 63) < 0) {
        uint64_t v25 = *(void *)(v25 + 48);
      }
      else {
        LODWORD(v25) = *(unsigned __int8 *)(v25 + 63);
      }
      *a7 = v25;
      uint64_t v26 = (char *)v22 + 40;
      if (*((char *)v22 + 63) < 0) {
        uint64_t v26 = *(const char **)v26;
      }
      *a8 = v26;
      if (*((char *)v22 + 63) < 0) {
        uint64_t v27 = *((void *)v22 + 6);
      }
      else {
        LODWORD(v27) = *((unsigned __int8 *)v22 + 63);
      }
      *a9 = v27;
      *a10 = *((_DWORD *)v22 + 2);
    }
  }
  else
  {
    BOOL v21 = 0;
  }
  unsigned int v34 = (XMP_Node *)v29;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
  return v21;
}

void sub_18881F0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24)
{
  a24 = &a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t ChooseLocalizedText(const XMP_Node *a1, const char *a2, const char *__s, const XMP_Node **a4)
{
  int64_t v9 = (const XMP_Node **)*((void *)a1 + 9);
  uint64_t v8 = (char *)*((void *)a1 + 10);
  if ((*((_DWORD *)a1 + 2) & 0x1000) == 0 && (v9 != (const XMP_Node **)v8 || (*((_DWORD *)a1 + 2) & 0x800) == 0))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v46 = "Localized text array is not alt-text";
LABEL_70:
    exception[1] = v46;
    *((unsigned char *)exception + 16) = 0;
  }
  if (v9 == (const XMP_Node **)v8)
  {
    uint64_t v22 = 0;
    uint64_t result = 0;
    goto LABEL_54;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v8 - (char *)v9;
  uint64_t v13 = (v12 >> 3) - 1;
  if ((unint64_t)(v12 >> 3) <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v12 >> 3;
  }
  do
  {
    unsigned int v15 = v9[v11];
    if ((*((unsigned char *)v15 + 9) & 0x1F) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      int v46 = "Alt-text array item is not simple";
      goto LABEL_70;
    }
    int v16 = (uint64_t *)*((void *)v15 + 12);
    if (v16 == *((uint64_t **)v15 + 13)) {
      goto LABEL_68;
    }
    uint64_t v17 = *v16;
    int v18 = (void *)(v17 + 16);
    int v19 = *(char *)(v17 + 39);
    if (v19 < 0)
    {
      if (*(void *)(v17 + 24) != 8) {
        goto LABEL_68;
      }
      int v18 = (void *)*v18;
    }
    else if (v19 != 8)
    {
      goto LABEL_68;
    }
    if (*v18 != 0x676E616C3A6C6D78)
    {
LABEL_68:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      int v46 = "Alt-text array item has no language qualifier";
      goto LABEL_70;
    }
    ++v11;
  }
  while (v14 != v11);
  unint64_t v48 = v12 >> 3;
  size_t v20 = strlen(__s);
  uint64_t v21 = 0;
  do
  {
    uint64_t v22 = v9[v21];
    uint64_t v23 = **((void **)v22 + 12);
    uint64_t v24 = (void *)(v23 + 40);
    if (*(char *)(v23 + 63) < 0)
    {
      if (v20 != *(void *)(v23 + 48)) {
        goto LABEL_28;
      }
      if (v20 == -1) {
LABEL_71:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      uint64_t v24 = (void *)*v24;
    }
    else
    {
      if (v20 != *(unsigned __int8 *)(v23 + 63)) {
        goto LABEL_28;
      }
      if (v20 == -1) {
        goto LABEL_71;
      }
    }
    if (!memcmp(v24, __s, v20))
    {
      uint64_t result = 1;
      goto LABEL_54;
    }
LABEL_28:
    ++v21;
  }
  while (v14 != v21);
  uint64_t v47 = v13;
  unsigned int v49 = a4;
  if (!*a2)
  {
LABEL_39:
    uint64_t v32 = 0;
    a4 = v49;
    while (1)
    {
      uint64_t v22 = v9[v32];
      uint64_t v33 = **((void **)v22 + 12);
      unsigned int v34 = (uint64_t *)(v33 + 40);
      int v35 = *(char *)(v33 + 63);
      if (v35 < 0)
      {
        if (*(void *)(v33 + 48) != 9) {
          goto LABEL_49;
        }
        unsigned int v34 = (uint64_t *)*v34;
      }
      else if (v35 != 9)
      {
        goto LABEL_49;
      }
      int v36 = (uint64_t *)*v34;
      int v37 = *((unsigned __int8 *)v34 + 8);
      if (v36 == (uint64_t *)0x6C75616665642D78 && v37 == 116)
      {
        uint64_t result = 4;
LABEL_54:
        *a4 = v22;
        return result;
      }
LABEL_49:
      if (v14 == ++v32)
      {
        uint64_t v22 = *v9;
        uint64_t result = 5;
        goto LABEL_54;
      }
    }
  }
  size_t v25 = strlen(a2);
  uint64_t v26 = 0;
  uint64_t v27 = -8;
  while (1)
  {
    char v28 = v9[v26];
    uint64_t v29 = **((void **)v28 + 12);
    if (*(char *)(v29 + 63) < 0)
    {
      uint64_t v30 = *(const char **)(v29 + 40);
      size_t v31 = *(void *)(v29 + 48);
    }
    else
    {
      uint64_t v30 = (const char *)(v29 + 40);
      size_t v31 = *(unsigned __int8 *)(v29 + 63);
    }
    if (v31 >= v25 && !strncmp(v30, a2, v25) && (v31 == v25 || v30[v25] == 45)) {
      break;
    }
    ++v26;
    v27 -= 8;
    if (v14 == v26) {
      goto LABEL_39;
    }
  }
  *unsigned int v49 = v28;
  if (v26 + 1 >= v48) {
    return 2;
  }
  uint64_t v40 = v47 - v26;
  uint64_t v41 = *((void *)a1 + 9) - v27;
  do
  {
    uint64_t v42 = **(void **)(*(void *)v41 + 96);
    if (*(char *)(v42 + 63) < 0)
    {
      int v43 = *(const char **)(v42 + 40);
      size_t v44 = *(void *)(v42 + 48);
    }
    else
    {
      int v43 = (const char *)(v42 + 40);
      size_t v44 = *(unsigned __int8 *)(v42 + 63);
    }
    if (v44 >= v25 && !strncmp(v43, a2, v25) && (v44 == v25 || v43[v25] == 45)) {
      return 3;
    }
    v41 += 8;
    uint64_t result = 2;
    --v40;
  }
  while (v40);
  return result;
}

void XMPMeta::SetLocalizedText(XMPMeta *this, char *a2, char *a3, char *__s, char *a5, char *a6)
{
  if (!a2 || !a3 || !__s || !a5) {
    XMPMeta::SetLocalizedText();
  }
  v73[0] = 0;
  v73[1] = 0;
  uint64_t v74 = 0;
  std::string::basic_string[abi:ne180100]<0>(v73, __s);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v72 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  NormalizeLangValue((unsigned __int8 *)v73);
  uint64_t v11 = __p;
  NormalizeLangValue((unsigned __int8 *)__p);
  if (v74 >= 0) {
    uint64_t v12 = v73;
  }
  else {
    uint64_t v12 = (void **)v73[0];
  }
  if (v72 < 0) {
    uint64_t v11 = (void **)__p[0];
  }
  memset(v70, 0, sizeof(v70));
  ExpandXPath(a2, a3, (uint64_t *)v70);
  uint64_t Node = FindNode((void *)this + 28, v70, 1, 3584, 0);
  uint64_t v14 = (XMP_Node *)Node;
  if (!Node)
  {
    int v16 = "Failed to find or create array node";
    goto LABEL_138;
  }
  int v15 = *(_DWORD *)(Node + 8);
  if ((v15 & 0x1000) == 0)
  {
    int v16 = "Localized text array is not alt-text";
    if ((v15 & 0x800) != 0)
    {
      uint64_t v17 = (void *)(Node + 72);
      if (*(void *)(Node + 72) == *(void *)(Node + 80))
      {
        uint64_t v18 = 0;
        BOOL v19 = 0;
        *(_DWORD *)(Node + 8) = v15 | 0x1000;
        goto LABEL_54;
      }
    }
LABEL_138:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = v16;
    *((unsigned char *)exception + 16) = 0;
  }
  size_t v20 = *(uint64_t **)(Node + 72);
  uint64_t v17 = (void *)(Node + 72);
  uint64_t v21 = *(void *)(Node + 80) - (void)v20;
  if (!v21)
  {
    uint64_t v18 = 0;
    BOOL v19 = 0;
    goto LABEL_54;
  }
  unint64_t v22 = 0;
  unint64_t v23 = v21 >> 3;
  if ((unint64_t)(v21 >> 3) <= 1) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = v21 >> 3;
  }
  BOOL v19 = 1;
  while (1)
  {
    uint64_t v18 = v20[v22];
    if ((*(unsigned char *)(v18 + 8) & 0x40) == 0) {
      __assert_rtn("SetLocalizedText", "XMPMeta-GetSet.cpp", 931, "(((currItem->options) & kXMP_PropHasLang) != 0)");
    }
    size_t v25 = *(uint64_t **)(v18 + 96);
    if (v25 == *(uint64_t **)(v18 + 104)) {
      goto LABEL_136;
    }
    uint64_t v26 = *v25;
    uint64_t v27 = (void *)(v26 + 16);
    int v28 = *(char *)(v26 + 39);
    if (v28 < 0)
    {
      if (*(void *)(v26 + 24) != 8) {
        goto LABEL_136;
      }
      uint64_t v27 = (void *)*v27;
    }
    else if (v28 != 8)
    {
      goto LABEL_136;
    }
    if (*v27 != 0x676E616C3A6C6D78)
    {
LABEL_136:
      uint64_t v67 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)uint64_t v67 = 102;
      v67[1] = "Language qualifier must be first";
      *((unsigned char *)v67 + 16) = 0;
    }
    uint64_t v29 = (uint64_t *)(v26 + 40);
    int v30 = *(char *)(v26 + 63);
    if (v30 < 0) {
      break;
    }
    if (v30 == 9) {
      goto LABEL_33;
    }
LABEL_37:
    BOOL v19 = ++v22 < v23;
    if (v24 == v22)
    {
      uint64_t v18 = 0;
      if (v22 < v23) {
        goto LABEL_42;
      }
      goto LABEL_54;
    }
  }
  if (*(void *)(v26 + 48) != 9) {
    goto LABEL_37;
  }
  uint64_t v29 = (uint64_t *)*v29;
LABEL_33:
  size_t v31 = (uint64_t *)*v29;
  int v32 = *((unsigned __int8 *)v29 + 8);
  if (v31 != (uint64_t *)0x6C75616665642D78 || v32 != 116) {
    goto LABEL_37;
  }
  uint64_t v24 = v22;
  if (v19)
  {
LABEL_42:
    if (v24)
    {
      uint64_t v34 = v20[v24];
      uint64_t v35 = **(void **)(v34 + 96);
      int v36 = (uint64_t *)(v35 + 40);
      int v37 = *(char *)(v35 + 63);
      if (v37 < 0)
      {
        if (*(void *)(v35 + 48) != 9) {
          goto LABEL_134;
        }
        int v36 = (uint64_t *)*v36;
      }
      else if (v37 != 9)
      {
        goto LABEL_134;
      }
      int v38 = (uint64_t *)*v36;
      int v39 = *((unsigned __int8 *)v36 + 8);
      if (v38 != (uint64_t *)0x6C75616665642D78 || v39 != 116) {
LABEL_134:
      }
        __assert_rtn("SetLocalizedText", "XMPMeta-GetSet.cpp", 943, "arrayNode->children[itemNum]->qualifiers[0]->value == \"x-default\"");
      uint64_t v41 = *v20;
      *size_t v20 = v34;
      *(void *)(*v17 + 8 * v24) = v41;
    }
  }
LABEL_54:
  int v75 = 0;
  int v42 = ChooseLocalizedText((const XMP_Node *)Node, (const char *)v12, (const char *)v11, &v75);
  int v43 = v75;
  int v44 = strcmp((const char *)v11, "x-default");
  switch(v42)
  {
    case 0:
      AppendLangItem(v14, "x-default", a6);
    case 1:
      if (!v44)
      {
        if (!v18 || !v19 || (XMP_Node *)v18 != v43) {
          __assert_rtn("SetLocalizedText", "XMPMeta-GetSet.cpp", 977, "xdItem != __null && haveXDefault && (xdItem == itemNode)");
        }
        uint64_t v56 = *((void *)v14 + 10) - *((void *)v14 + 9);
        if (!v56)
        {
LABEL_121:
          int v43 = (XMP_Node *)v18;
          goto LABEL_124;
        }
        uint64_t v57 = 0;
        unint64_t v58 = v56 >> 3;
        if (v58 <= 1) {
          uint64_t v59 = 1;
        }
        else {
          uint64_t v59 = v58;
        }
        while (1)
        {
          uint64_t v60 = *(void *)(*v17 + 8 * v57);
          if (v60 == v18) {
            goto LABEL_120;
          }
          uint64_t v61 = *(unsigned __int8 *)(v60 + 63);
          if ((v61 & 0x80u) == 0) {
            uint64_t v62 = *(unsigned __int8 *)(v60 + 63);
          }
          else {
            uint64_t v62 = *(void *)(v60 + 48);
          }
          uint64_t v63 = *(unsigned __int8 *)(v18 + 63);
          int v64 = (char)v63;
          if ((v63 & 0x80u) != 0) {
            uint64_t v63 = *(void *)(v18 + 48);
          }
          if (v62 != v63) {
            goto LABEL_120;
          }
          unint64_t v65 = (const void **)(v60 + 40);
          int v66 = v64 >= 0 ? (unsigned __int8 *)(v18 + 40) : *(unsigned __int8 **)(v18 + 40);
          if ((v61 & 0x80) == 0) {
            break;
          }
          if (!memcmp(*v65, v66, *(void *)(v60 + 48))) {
            goto LABEL_119;
          }
LABEL_120:
          if (++v57 == v59) {
            goto LABEL_121;
          }
        }
        if (*(unsigned char *)(v60 + 63))
        {
          while (*(unsigned __int8 *)v65 == *v66)
          {
            unint64_t v65 = (const void **)((char *)v65 + 1);
            ++v66;
            if (!--v61) {
              goto LABEL_119;
            }
          }
          goto LABEL_120;
        }
LABEL_119:
        XMP_Node::SetValue((XMP_Node *)v60, a6);
        goto LABEL_120;
      }
      if (v18 && v19 && (XMP_Node *)v18 != v43)
      {
        uint64_t v52 = *(unsigned __int8 *)(v18 + 63);
        size_t v46 = *(void *)(v18 + 48);
        if ((v52 & 0x80u) == 0) {
          uint64_t v53 = *(unsigned __int8 *)(v18 + 63);
        }
        else {
          uint64_t v53 = *(void *)(v18 + 48);
        }
        uint64_t v54 = *((unsigned __int8 *)v43 + 63);
        int v55 = (char)v54;
        if ((v54 & 0x80u) != 0) {
          uint64_t v54 = *((void *)v43 + 6);
        }
        if (v53 == v54)
        {
          int v50 = (const void **)(v18 + 40);
          if (v55 >= 0) {
            int v51 = (unsigned __int8 *)v43 + 40;
          }
          else {
            int v51 = (unsigned __int8 *)*((void *)v43 + 5);
          }
          if ((v52 & 0x80) == 0)
          {
            if (!*(unsigned char *)(v18 + 63)) {
              goto LABEL_123;
            }
            do
            {
              if (*(unsigned __int8 *)v50 != *v51) {
                goto LABEL_124;
              }
              int v50 = (const void **)((char *)v50 + 1);
              ++v51;
              --v52;
            }
            while (v52);
            goto LABEL_123;
          }
LABEL_122:
          if (!memcmp(*v50, v51, v46)) {
LABEL_123:
          }
            XMP_Node::SetValue((XMP_Node *)v18, a6);
        }
      }
LABEL_124:
      XMP_Node::SetValue(v43, a6);
      if (!v19 && *((void *)v14 + 10) - *((void *)v14 + 9) == 8) {
        AppendLangItem(v14, "x-default", a6);
      }
      int v75 = (XMP_Node *)v70;
      std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      if (SHIBYTE(v72) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v74) < 0) {
        operator delete(v73[0]);
      }
      return;
    case 2:
      if (!v18 || !v19 || (XMP_Node *)v18 == v43) {
        goto LABEL_124;
      }
      uint64_t v45 = *(unsigned __int8 *)(v18 + 63);
      size_t v46 = *(void *)(v18 + 48);
      if ((v45 & 0x80u) == 0) {
        uint64_t v47 = *(unsigned __int8 *)(v18 + 63);
      }
      else {
        uint64_t v47 = *(void *)(v18 + 48);
      }
      uint64_t v48 = *((unsigned __int8 *)v43 + 63);
      int v49 = (char)v48;
      if ((v48 & 0x80u) != 0) {
        uint64_t v48 = *((void *)v43 + 6);
      }
      if (v47 != v48) {
        goto LABEL_124;
      }
      int v50 = (const void **)(v18 + 40);
      if (v49 >= 0) {
        int v51 = (unsigned __int8 *)v43 + 40;
      }
      else {
        int v51 = (unsigned __int8 *)*((void *)v43 + 5);
      }
      if ((v45 & 0x80) != 0) {
        goto LABEL_122;
      }
      if (!*(unsigned char *)(v18 + 63)) {
        goto LABEL_123;
      }
      while (*(unsigned __int8 *)v50 == *v51)
      {
        int v50 = (const void **)((char *)v50 + 1);
        ++v51;
        if (!--v45) {
          goto LABEL_123;
        }
      }
      goto LABEL_124;
    case 3:
      AppendLangItem(v14, (const char *)v11, a6);
    case 4:
      if (*((void *)v14 + 10) - *((void *)v14 + 9) == 8) {
        XMP_Node::SetValue((XMP_Node *)v18, a6);
      }
      AppendLangItem(v14, (const char *)v11, a6);
    case 5:
      AppendLangItem(v14, (const char *)v11, a6);
    default:
      uint64_t v69 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)uint64_t v69 = 9;
      v69[1] = "Unexpected result from ChooseLocalizedText";
      *((unsigned char *)v69 + 16) = 0;
  }
}

void sub_18881FBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24)
{
  a24 = &a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void AppendLangItem(XMP_Node *a1, const char *a2, const char *a3)
{
}

void sub_18881FEC4(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void XMPMeta::DeleteLocalizedText(XMPMeta *this, char *a2, char *a3, char *__s, char *a5)
{
  if (!a2 || !a3 || !__s || !a5) {
    XMPMeta::DeleteLocalizedText();
  }
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v71 = 0;
  std::string::basic_string[abi:ne180100]<0>(v70, __s);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v69 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  NormalizeLangValue((unsigned __int8 *)v70);
  int64_t v9 = __p;
  NormalizeLangValue((unsigned __int8 *)__p);
  if (v71 >= 0) {
    int v10 = v70;
  }
  else {
    int v10 = (void **)v70[0];
  }
  if (v69 < 0) {
    int64_t v9 = (void **)__p[0];
  }
  memset(v67, 0, sizeof(v67));
  ExpandXPath(a2, a3, (uint64_t *)v67);
  uint64_t Node = (const XMP_Node *)FindNode((void *)this + 28, v67, 0, 0, 0);
  uint64_t v12 = Node;
  if (!Node) {
    goto LABEL_108;
  }
  uint64_t v14 = *((void *)Node + 9);
  uint64_t v13 = *((void *)Node + 10);
  uint64_t v72 = 0;
  if (ChooseLocalizedText(Node, (const char *)v10, (const char *)v9, &v72) != 1) {
    goto LABEL_108;
  }
  if (v13 == v14)
  {
LABEL_18:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "XMP_Enforce failed: (itemIndex < arraySize) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Tool"
                   "kit-SDK/XMPCore/source/XMPMeta-GetSet.cpp at line 1068";
    *((unsigned char *)exception + 16) = 0;
  }
  unint64_t v15 = 0;
  unint64_t v16 = v13 - v14;
  unint64_t v17 = (v13 - v14) >> 3;
  uint64_t v18 = (XMP_Node **)*((void *)v12 + 9);
  BOOL v19 = v72;
  if (v17 <= 1) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = v17;
  }
  while (v18[v15] != v72)
  {
    if (v20 == ++v15) {
      goto LABEL_18;
    }
  }
  unint64_t v22 = (uint64_t *)*((void *)v72 + 12);
  if (v22 == *((uint64_t **)v72 + 13)) {
    goto LABEL_26;
  }
  uint64_t v23 = *v22;
  uint64_t v24 = (void *)(v23 + 16);
  int v25 = *(char *)(v23 + 39);
  if ((v25 & 0x80000000) == 0)
  {
    if (v25 != 8) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (*(void *)(v23 + 24) != 8)
  {
LABEL_26:
    if (!v15) {
      goto LABEL_101;
    }
    uint64_t v26 = *v18;
    uint64_t v27 = *((unsigned __int8 *)*v18 + 63);
    if ((v27 & 0x80u) == 0) {
      uint64_t v28 = *((unsigned __int8 *)*v18 + 63);
    }
    else {
      uint64_t v28 = *((void *)*v18 + 6);
    }
    uint64_t v29 = *((unsigned __int8 *)v72 + 63);
    int v30 = (char)v29;
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *((void *)v72 + 6);
    }
    if (v28 != v29) {
      goto LABEL_101;
    }
    size_t v31 = (const void **)((char *)v26 + 40);
    if (v30 >= 0) {
      int v32 = (unsigned __int8 *)v72 + 40;
    }
    else {
      int v32 = (unsigned __int8 *)*((void *)v72 + 5);
    }
    if ((v27 & 0x80) != 0)
    {
      if (memcmp(*v31, v32, *((void *)*v18 + 6))) {
        goto LABEL_101;
      }
    }
    else if (*((unsigned char *)*v18 + 63))
    {
      while (*(unsigned __int8 *)v31 == *v32)
      {
        size_t v31 = (const void **)((char *)v31 + 1);
        ++v32;
        if (!--v27) {
          goto LABEL_45;
        }
      }
      goto LABEL_101;
    }
LABEL_45:
    uint64_t v35 = **((void **)v26 + 12);
    int v36 = (void *)(v35 + 16);
    int v37 = *(char *)(v35 + 39);
    if (v37 < 0)
    {
      if (*(void *)(v35 + 24) != 8) {
        goto LABEL_101;
      }
      int v36 = (void *)*v36;
    }
    else if (v37 != 8)
    {
      goto LABEL_101;
    }
    if (*v36 == 0x676E616C3A6C6D78)
    {
      int v38 = (uint64_t *)(v35 + 40);
      int v39 = *(char *)(v35 + 63);
      if ((v39 & 0x80000000) == 0)
      {
        if (v39 != 9) {
          goto LABEL_101;
        }
        goto LABEL_97;
      }
      if (*(void *)(v35 + 48) == 9)
      {
        int v38 = (uint64_t *)*v38;
LABEL_97:
        unint64_t v58 = (uint64_t *)*v38;
        int v59 = *((unsigned __int8 *)v38 + 8);
        if (v58 != (uint64_t *)0x6C75616665642D78 || v59 != 116) {
          goto LABEL_101;
        }
        unint64_t v48 = 0;
LABEL_114:
        int v64 = (uint64_t *)&v18[v15];
        unint64_t v65 = (uint64_t *)*((void *)v12 + 10);
        uint64_t v66 = (char *)v65 - (char *)(v64 + 1);
        if (v65 != v64 + 1) {
          memmove(&v18[v15], v64 + 1, (char *)v65 - (char *)(v64 + 1));
        }
        uint64_t v56 = (uint64_t *)((char *)v64 + v66);
        *((void *)v12 + 10) = (char *)v64 + v66;
        uint64_t v57 = (uint64_t *)&v18[v48];
        goto LABEL_117;
      }
    }
LABEL_101:
    uint64_t v57 = (uint64_t *)&v18[v15];
    uint64_t v61 = (uint64_t *)*((void *)v12 + 10);
    uint64_t v62 = (char *)v61 - (char *)(v57 + 1);
    if (v61 != v57 + 1) {
      memmove(&v18[v15], v57 + 1, (char *)v61 - (char *)(v57 + 1));
    }
    uint64_t v26 = 0;
    char v63 = 1;
    goto LABEL_104;
  }
  uint64_t v24 = (void *)*v24;
LABEL_25:
  if (*v24 != 0x676E616C3A6C6D78) {
    goto LABEL_26;
  }
  uint64_t v33 = (uint64_t *)(v23 + 40);
  int v34 = *(char *)(v23 + 63);
  if (v34 < 0)
  {
    if (*(void *)(v23 + 48) != 9) {
      goto LABEL_26;
    }
    uint64_t v33 = (uint64_t *)*v33;
  }
  else if (v34 != 9)
  {
    goto LABEL_26;
  }
  uint64_t v40 = (uint64_t *)*v33;
  int v41 = *((unsigned __int8 *)v33 + 8);
  BOOL v43 = v40 != (uint64_t *)0x6C75616665642D78 || v41 != 116;
  if (!v15 || v43)
  {
    if (v43) {
      goto LABEL_26;
    }
  }
  else
  {
    int v44 = *v18;
    *uint64_t v18 = v72;
    *(void *)(*((void *)v12 + 9) + 8 * v15) = v44;
    unint64_t v15 = 0;
    uint64_t v18 = (XMP_Node **)*((void *)v12 + 9);
  }
  if (v16 < 9) {
    goto LABEL_101;
  }
  int v45 = *((char *)v19 + 63);
  if (v45 >= 0) {
    uint64_t v46 = *((unsigned __int8 *)v19 + 63);
  }
  else {
    uint64_t v46 = *((void *)v19 + 6);
  }
  if (v17 <= 2) {
    uint64_t v47 = 2;
  }
  else {
    uint64_t v47 = v17;
  }
  unint64_t v48 = 1;
  while (1)
  {
    uint64_t v26 = v18[v48];
    uint64_t v49 = *((unsigned __int8 *)v26 + 63);
    if ((v49 & 0x80u) == 0) {
      uint64_t v50 = *((unsigned __int8 *)v26 + 63);
    }
    else {
      uint64_t v50 = *((void *)v26 + 6);
    }
    if (v50 != v46) {
      goto LABEL_88;
    }
    int v51 = v45 >= 0 ? (char *)v19 + 40 : (char *)*((void *)v19 + 5);
    if ((v49 & 0x80) != 0) {
      break;
    }
    if (!*((unsigned char *)v26 + 63)) {
      goto LABEL_91;
    }
    uint64_t v52 = 0;
    while (*((unsigned __int8 *)v26 + v52 + 40) == v51[v52])
    {
      if (v49 == ++v52)
      {
        if (!v26) {
          goto LABEL_101;
        }
        goto LABEL_91;
      }
    }
LABEL_88:
    if (++v48 == v47) {
      goto LABEL_101;
    }
  }
  if (memcmp(*((const void **)v26 + 5), v51, *((void *)v26 + 6))) {
    goto LABEL_88;
  }
LABEL_91:
  uint64_t v53 = (uint64_t *)&v18[v48];
  if (v15 >= v48) {
    goto LABEL_114;
  }
  uint64_t v54 = (uint64_t *)*((void *)v12 + 10);
  uint64_t v55 = (char *)v54 - (char *)(v53 + 1);
  if (v54 != v53 + 1) {
    memmove(&v18[v48], v53 + 1, (char *)v54 - (char *)(v53 + 1));
  }
  uint64_t v56 = (uint64_t *)((char *)v53 + v55);
  *((void *)v12 + 10) = (char *)v53 + v55;
  uint64_t v57 = (uint64_t *)&v18[v15];
LABEL_117:
  uint64_t v62 = (char *)v56 - (char *)(v57 + 1);
  if (v56 != v57 + 1) {
    memmove(v57, v57 + 1, (char *)v56 - (char *)(v57 + 1));
  }
  char v63 = 0;
LABEL_104:
  *((void *)v12 + 10) = (char *)v57 + v62;
  if (v19) {
    (*(void (**)(XMP_Node *))(*(void *)v19 + 8))(v19);
  }
  if ((v63 & 1) == 0) {
    (*(void (**)(XMP_Node *))(*(void *)v26 + 8))(v26);
  }
LABEL_108:
  uint64_t v72 = (XMP_Node *)v67;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  if (SHIBYTE(v69) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete(v70[0]);
  }
}

void sub_1888204CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24)
{
  a24 = &a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t XMPMeta::GetProperty_Bool(XMPMeta *this, const char *a2, const char *a3, BOOL *a4, unsigned int *a5)
{
  if (!a2 || !a3) {
    XMPMeta::GetProperty_Bool();
  }
  if (!a4 || !a5) {
    XMPMeta::GetProperty_Bool();
  }
  uint64_t v12 = 0;
  int v11 = 0;
  uint64_t v8 = (*(uint64_t (**)(XMPMeta *))(*(void *)this + 16))(this);
  if (v8)
  {
    if ((*((unsigned char *)a5 + 1) & 0x1F) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Property must be simple";
      *((unsigned char *)exception + 16) = 0;
    }
    *a4 = XMPUtils::ConvertToBool(v12, v7);
  }
  return v8;
}

uint64_t XMPMeta::GetProperty_Int(XMPMeta *this, const char *a2, const char *a3, int *a4, unsigned int *a5)
{
  uint64_t v8 = 0;
  uint64_t result = XMPMeta::GetProperty_Int64(this, a2, a3, &v8, a5);
  if (result)
  {
    if (v8 != (int)v8)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 5;
      exception[1] = "Overflow condition";
      *((unsigned char *)exception + 16) = 0;
    }
    *a4 = v8;
  }
  return result;
}

uint64_t XMPMeta::GetProperty_Int64(XMPMeta *this, const char *a2, const char *a3, uint64_t *a4, unsigned int *a5)
{
  if (!a2 || !a3) {
    XMPMeta::GetProperty_Int64();
  }
  if (!a4 || !a5) {
    XMPMeta::GetProperty_Int64();
  }
  memset(__n, 0, sizeof(__n));
  uint64_t v7 = (*(uint64_t (**)(XMPMeta *))(*(void *)this + 16))(this);
  if (v7)
  {
    if ((*((unsigned char *)a5 + 1) & 0x1F) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Property must be simple";
      *((unsigned char *)exception + 16) = 0;
    }
    memset(&v12, 0, sizeof(v12));
    std::string::append(&v12, *(const std::string::value_type **)&__n[1], __n[0]);
    XMPUtils::Trim(&v12);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v9 = &v12;
    }
    else {
      int64_t v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    *a4 = XMPUtils::ConvertToInt64((XMPUtils *)v9, v8);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  return v7;
}

void sub_18882078C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta::GetProperty_Date(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || !a3) {
    XMPMeta::GetProperty_Date();
  }
  if (!a4 || !a5) {
    XMPMeta::GetProperty_Date();
  }
  __s = 0;
  int v10 = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (v7)
  {
    if ((*(unsigned char *)(a5 + 1) & 0x1F) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Property must be simple";
      *((unsigned char *)exception + 16) = 0;
    }
    XMPUtils::ConvertToDate(__s, a4);
  }
  return v7;
}

void XMPMeta::SetProperty_Bool(XMPMeta *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || !a3) {
    XMPMeta::SetProperty_Bool();
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  XMPUtils::ConvertFromBool(a4, (uint64_t)__p);
  if (v11 >= 0) {
    int64_t v9 = __p;
  }
  else {
    int64_t v9 = (void **)__p[0];
  }
  (*(void (**)(XMPMeta *, const char *, const char *, void **, uint64_t))(*(void *)this + 48))(this, a2, a3, v9, a5);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_18882093C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty_Int(XMPMeta *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || !a3) {
    XMPMeta::SetProperty_Int();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromInt(a4, "", &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta *, const char *, const char *, std::string *, uint64_t))(*(void *)this + 48))(this, a2, a3, p_p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_188820A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty_Int64(XMPMeta *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || !a3) {
    XMPMeta::SetProperty_Int64();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromInt64(a4, "", &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta *, const char *, const char *, std::string *, uint64_t))(*(void *)this + 48))(this, a2, a3, p_p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_188820AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty_Float(XMPMeta *this, const char *a2, const char *a3, double a4, uint64_t a5)
{
  if (!a2 || !a3) {
    XMPMeta::SetProperty_Float();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromFloat("", &__p, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta *, const char *, const char *, std::string *, uint64_t))(*(void *)this + 48))(this, a2, a3, p_p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_188820BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty_Date(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  if (!a2 || !a3) {
    XMPMeta::SetProperty_Date();
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromDate(a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, p_p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_188820CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMP_Node::SetValue()
{
  __assert_rtn("SetValue", "XMPMeta-GetSet.cpp", 130, "this->name != \"xmp:TestAssertNotify\"");
}

void XMPMeta::GetProperty()
{
  __assert_rtn("GetProperty", "XMPMeta-GetSet.cpp", 422, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty", "XMPMeta-GetSet.cpp", 423, "(propValue != 0) && (valueSize != 0) && (options != 0)");
}

void XMPMeta::GetArrayItem()
{
  __assert_rtn("GetArrayItem", "XMPMeta-GetSet.cpp", 452, "(schemaNS != 0) && (arrayName != 0)");
}

{
  __assert_rtn("GetArrayItem", "XMPMeta-GetSet.cpp", 453, "(itemValue != 0) && (options != 0)");
}

void XMPMeta::GetStructField()
{
  __assert_rtn("GetStructField", "XMPMeta-GetSet.cpp", 480, "(fieldValue != 0) && (options != 0)");
}

{
  __assert_rtn("GetStructField", "XMPMeta-GetSet.cpp", 479, "(schemaNS != 0) && (structName != 0) && (fieldNS != 0) && (fieldName != 0)");
}

void XMPMeta::GetQualifier()
{
  __assert_rtn("GetQualifier", "XMPMeta-GetSet.cpp", 503, "(qualValue != 0) && (options != 0)");
}

{
  __assert_rtn("GetQualifier", "XMPMeta-GetSet.cpp", 502, "(schemaNS != 0) && (propName != 0) && (qualNS != 0) && (qualName != 0)");
}

void XMPMeta::SetProperty()
{
  __assert_rtn("SetProperty", "XMPMeta-GetSet.cpp", 524, "(schemaNS != 0) && (propName != 0)");
}

void SetNode()
{
}

void XMPMeta::SetArrayItem()
{
  __assert_rtn("SetArrayItem", "XMPMeta-GetSet.cpp", 550, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta::AppendArrayItem()
{
  __assert_rtn("AppendArrayItem", "XMPMeta-GetSet.cpp", 573, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta::SetStructField()
{
  __assert_rtn("SetStructField", "XMPMeta-GetSet.cpp", 622, "(schemaNS != 0) && (structName != 0) && (fieldNS != 0) && (fieldName != 0)");
}

void XMPMeta::SetQualifier()
{
  __assert_rtn("SetQualifier", "XMPMeta-GetSet.cpp", 643, "(schemaNS != 0) && (propName != 0) && (qualNS != 0) && (qualName != 0)");
}

void XMPMeta::DeleteProperty()
{
  __assert_rtn("DeleteProperty", "XMPMeta-GetSet.cpp", 665, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::DeleteArrayItem()
{
  __assert_rtn("DeleteArrayItem", "XMPMeta-GetSet.cpp", 712, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta::DeleteStructField()
{
  __assert_rtn("DeleteStructField", "XMPMeta-GetSet.cpp", 731, "(schemaNS != 0) && (structName != 0) && (fieldNS != 0) && (fieldName != 0)");
}

void XMPMeta::DeleteQualifier()
{
  __assert_rtn("DeleteQualifier", "XMPMeta-GetSet.cpp", 750, "(schemaNS != 0) && (propName != 0) && (qualNS != 0) && (qualName != 0)");
}

void XMPMeta::DoesPropertyExist()
{
  __assert_rtn("DoesPropertyExist", "XMPMeta-GetSet.cpp", 767, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::GetLocalizedText()
{
  __assert_rtn("GetLocalizedText", "XMPMeta-GetSet.cpp", 850, "(actualLang != 0) && (langSize != 0)");
}

{
  __assert_rtn("GetLocalizedText", "XMPMeta-GetSet.cpp", 851, "(itemValue != 0) && (valueSize != 0) && (options != 0)");
}

{
  __assert_rtn("GetLocalizedText", "XMPMeta-GetSet.cpp", 849, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta::SetLocalizedText()
{
  __assert_rtn("SetLocalizedText", "XMPMeta-GetSet.cpp", 898, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta::DeleteLocalizedText()
{
  __assert_rtn("DeleteLocalizedText", "XMPMeta-GetSet.cpp", 1039, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta::GetProperty_Bool()
{
  __assert_rtn("GetProperty_Bool", "XMPMeta-GetSet.cpp", 1141, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty_Bool", "XMPMeta-GetSet.cpp", 1142, "(propValue != 0) && (options != 0)");
}

void XMPMeta::GetProperty_Int64()
{
  __assert_rtn("GetProperty_Int64", "XMPMeta-GetSet.cpp", 1192, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty_Int64", "XMPMeta-GetSet.cpp", 1193, "(propValue != 0) && (options != 0)");
}

void XMPMeta::GetProperty_Date()
{
  __assert_rtn("GetProperty_Date", "XMPMeta-GetSet.cpp", 1250, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty_Date", "XMPMeta-GetSet.cpp", 1251, "(propValue != 0) && (options != 0)");
}

void XMPMeta::SetProperty_Bool()
{
  __assert_rtn("SetProperty_Bool", "XMPMeta-GetSet.cpp", 1276, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::SetProperty_Int()
{
  __assert_rtn("SetProperty_Int", "XMPMeta-GetSet.cpp", 1295, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::SetProperty_Int64()
{
  __assert_rtn("SetProperty_Int64", "XMPMeta-GetSet.cpp", 1314, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::SetProperty_Float()
{
  __assert_rtn("SetProperty_Float", "XMPMeta-GetSet.cpp", 1333, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::SetProperty_Date()
{
  __assert_rtn("SetProperty_Date", "XMPMeta-GetSet.cpp", 1352, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta2::XMPMeta2(XMPMeta2 *this)
{
  XMPMeta::XMPMeta(this);
  *(void *)uint64_t v1 = &unk_1ED4E5C38;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  *((_OWORD *)v1 + 27) = 0u;
  *((_OWORD *)v1 + 28) = 0u;
  AdobeXMPCore::IMetadata_v1::CreateMetadata(v1);
}

void sub_188821444(_Unwind_Exception *a1)
{
  unsigned int v3 = (std::__shared_weak_count *)*((void *)v1 + 57);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)v1 + 55);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 53);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v1 + 51);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  XMPMeta::~XMPMeta(v1);
  _Unwind_Resume(a1);
}

void XMPMeta2::~XMPMeta2(XMPMeta2 *this)
{
  *(void *)this = &unk_1ED4E5C38;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  XMPMeta::~XMPMeta(this);
}

{
  uint64_t vars8;

  XMPMeta2::~XMPMeta2(this);

  JUMPOUT(0x18C11C0E0);
}

uint64_t XMPMeta2::GetProperty(XMPMeta2 *this, char *a2, char *a3, const char **a4, unsigned int *a5, unsigned int *a6)
{
  if (!a2 || !a3) {
    XMPMeta2::GetProperty();
  }
  if (!a4 || !a5 || !a6) {
    XMPMeta2::GetProperty();
  }
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  ExpandXPath(a2, a3, &v118);
  long long v117 = 0uLL;
  AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v117);
  long long v116 = 0uLL;
  int v10 = (void *)*((void *)this + 50);
  if (v10) {
    uint64_t v11 = (char *)v10 + *(void *)(*v10 - 544);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *((void *)this + 51);
  *(void *)&long long v116 = v11;
  *((void *)&v116 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v118;
  if ((*(unsigned char *)(v118 + 56) & 0x10) != 0)
  {
    if (!XMPUtils::HandleConstAliasStep((void *)this + 50, &v116, &v118, 0))
    {
LABEL_247:
      uint64_t v90 = 0;
      goto LABEL_248;
    }
    long long v94 = a4;
    long long v95 = a5;
    uint64_t v13 = v118;
    unint64_t v14 = 2;
  }
  else
  {
    long long v94 = a4;
    long long v95 = a5;
    unint64_t v14 = 1;
  }
  uint64_t v15 = v119 - v13;
  if (v14 < v15 >> 5)
  {
    uint64_t v16 = v15 >> 5;
    while (2)
    {
      if (!(void)v116) {
        goto LABEL_247;
      }
      memset(&__str, 0, sizeof(__str));
      unint64_t v17 = (long long *)(v118 + 32 * v14);
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v18 = *v17;
        __str.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
      }
      memset(&v114, 0, sizeof(v114));
      uint64_t v19 = v118;
      uint64_t v20 = v118 + 32 * v14;
      if (*(char *)(v20 - 9) < 0)
      {
        std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)(v20 - 32), *(void *)(v20 - 24));
        uint64_t v19 = v118;
      }
      else
      {
        long long v21 = *(_OWORD *)(v20 - 32);
        v114.__r_.__value_.__r.__words[2] = *(void *)(v20 - 16);
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v21;
      }
      switch(*(_DWORD *)(v19 + 32 * v14 + 24))
      {
        case 1:
          std::string::size_type v22 = std::string::find(&__str, 58, 0);
          memset(&v113, 0, sizeof(v113));
          std::string::basic_string(&v113, &__str, 0, v22, (std::allocator<char> *)&v110);
          (*(void (**)(std::string *__return_ptr))(*(void *)v117 + 80))(&v110);
          std::string::size_type size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
          std::string::size_type v24 = v110.__r_.__value_.__r.__words[0];
          if ((*(unsigned int (**)(void))(*(void *)v116 + 40))(v116) == 4)
          {
            *(_OWORD *)&v110.__r_.__value_.__l.__data_ = 0uLL;
            (*(void (**)(std::string *__return_ptr))(*(void *)v116 + 240))(&v110);
            std::string::size_type v25 = v110.__r_.__value_.__r.__words[0];
            uint64_t v26 = (*(uint64_t (**)(std::string::size_type))(*(void *)v24 + 192))(v24);
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(void *)v25 + 648))(__p, v25, v26, -1, (std::string::size_type)p_str->__r_.__value_.__r.__words + v22 + 1, -1);
            long long v28 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v29 = (std::__shared_weak_count *)*((void *)&v116 + 1);
            long long v116 = v28;
            if (v29)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
              int v30 = (std::__shared_weak_count *)__p[1];
              if (__p[1]) {
LABEL_104:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
            if (v110.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v110.__r_.__value_.__l.__size_);
            }
LABEL_107:
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v113.__r_.__value_.__l.__data_);
            }
            goto LABEL_187;
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          int v75 = 1;
          if (size) {
            goto LABEL_188;
          }
          goto LABEL_228;
        case 2:
          uint64_t v54 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v54 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (v54->__r_.__value_.__s.__data_[0] != 63) {
            __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 243, "stepStr[0]=='?'");
          }
          std::string::basic_string(&v113, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v110);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v113;
          std::string::size_type v55 = std::string::find(&__str, 58, 0);
          memset(&v113, 0, sizeof(v113));
          std::string::basic_string(&v113, &__str, 0, v55, (std::allocator<char> *)&v110);
          (*(void (**)(std::string *__return_ptr))(*(void *)v117 + 80))(&v110);
          std::string::size_type size = (std::__shared_weak_count *)v110.__r_.__value_.__l.__size_;
          std::string::size_type v56 = v110.__r_.__value_.__r.__words[0];
          uint64_t v57 = v116;
          uint64_t v58 = (*(uint64_t (**)(std::string::size_type))(*(void *)v110.__r_.__value_.__l.__data_ + 192))(v110.__r_.__value_.__r.__words[0]);
          uint64_t v59 = (*(uint64_t (**)(std::string::size_type))(*(void *)v56 + 208))(v56);
          uint64_t v60 = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v60 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(void *)v57 + 128))(&v110, v57, v58, v59, (std::string::size_type)v60->__r_.__value_.__r.__words + v55 + 1, -1);
          long long v61 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = 0uLL;
          int v30 = (std::__shared_weak_count *)*((void *)&v116 + 1);
          long long v116 = v61;
          if (v30) {
            goto LABEL_104;
          }
          goto LABEL_107;
        case 3:
          if ((*(unsigned int (**)(void))(*(void *)v116 + 40))(v116) != 2) {
            goto LABEL_227;
          }
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(std::string *__return_ptr))(*(void *)v116 + 248))(&v110);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v47 = __str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_ <= 1 || *__str.__r_.__value_.__l.__data_ != 91) {
              goto LABEL_256;
            }
          }
          else
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) < 2u || __str.__r_.__value_.__s.__data_[0] != 91) {
              goto LABEL_256;
            }
            std::string::size_type v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          std::string::size_type v79 = v47 - 1;
          if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (*(unsigned char *)(__str.__r_.__value_.__r.__words[0] + v79) == 93)
            {
              std::string::size_type v80 = __str.__r_.__value_.__l.__size_;
              goto LABEL_173;
            }
          }
          else if (__str.__r_.__value_.__s.__data_[v79] == 93)
          {
            std::string::size_type v80 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_173:
            std::string::size_type v81 = v80 - 2;
            if (!v81) {
              goto LABEL_258;
            }
            int v82 = 0;
            long long v83 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v83 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            long long v84 = &v83->__r_.__value_.__s.__data_[1];
            do
            {
              int v86 = *v84++;
              int v85 = v86;
              if ((v86 - 48) >= 0xA) {
                __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 209, "('0' <= stepStr[chNum]) && (stepStr[chNum] <= '9')");
              }
              int v82 = v85 + 10 * v82 - 48;
              --v81;
            }
            while (v81);
            if (v82 < 1)
            {
LABEL_258:
              exception = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)exception = 102;
              exception[1] = "Array index must be larger than one";
              *((unsigned char *)exception + 16) = 0;
            }
            std::string::size_type v87 = std::string::find(&v114, 58, 0);
            memset(&v113, 0, sizeof(v113));
            std::string::basic_string(&v113, &v114, 0, v87, (std::allocator<char> *)__p);
            (*(void (**)(void **__return_ptr))(*(void *)v117 + 80))(__p);
            std::string::size_type size = (std::__shared_weak_count *)__p[1];
            (*(void (**)(void **__return_ptr))(*(void *)v110.__r_.__value_.__l.__data_ + 656))(__p);
            long long v88 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            long long v89 = (std::__shared_weak_count *)*((void *)&v116 + 1);
            long long v116 = v88;
            if (v89)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v89);
              uint64_t v53 = (std::__shared_weak_count *)__p[1];
              if (__p[1]) {
LABEL_182:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100](v53);
            }
LABEL_183:
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v113.__r_.__value_.__l.__data_);
            }
            if (v110.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v110.__r_.__value_.__l.__size_);
            }
LABEL_187:
            int v75 = 0;
            if (size) {
LABEL_188:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](size);
            goto LABEL_228;
          }
LABEL_256:
          __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 207, "(stepStr.length() >= 2) && (*( stepStr.begin()) == '[') && (stepStr[stepStr.length()-1] == ']')");
        case 4:
          if ((*(unsigned int (**)(void))(*(void *)v116 + 40))(v116) != 2) {
            goto LABEL_227;
          }
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(std::string *__return_ptr))(*(void *)v116 + 248))(&v110);
          std::string::size_type v48 = std::string::find(&v114, 58, 0);
          memset(&v113, 0, sizeof(v113));
          std::string::basic_string(&v113, &v114, 0, v48, (std::allocator<char> *)__p);
          (*(void (**)(void **__return_ptr))(*(void *)v117 + 80))(__p);
          std::string::size_type size = (std::__shared_weak_count *)__p[1];
          long long v49 = v116;
          if (*((void *)&v116 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          if ((void)v49 && (*(unsigned int (**)(void))(*(void *)v49 + 40))(v49) == 2)
          {
            (*(void (**)(void **__return_ptr, void))(*(void *)v49 + 248))(__p, v49);
            uint64_t v50 = (*(uint64_t (**)(char *))(*(void *)((char *)__p[0] + *(void *)(*(void *)__p[0] - 688))
                                                    + 560))((char *)__p[0] + *(void *)(*(void *)__p[0] - 688));
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
            if (!v50)
            {
              long long v93 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)long long v93 = 102;
              v93[1] = "Array index overflow";
              *((unsigned char *)v93 + 16) = 0;
            }
            (*(void (**)(void **__return_ptr))(*(void *)v110.__r_.__value_.__l.__data_ + 656))(__p);
            long long v51 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v52 = (std::__shared_weak_count *)*((void *)&v116 + 1);
            long long v116 = v51;
            if (v52)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v52);
              if (__p[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
              }
            }
          }
          if (!*((void *)&v49 + 1)) {
            goto LABEL_183;
          }
          uint64_t v53 = (std::__shared_weak_count *)*((void *)&v49 + 1);
          goto LABEL_182;
        case 5:
          if ((*(unsigned int (**)(void))(*(void *)v116 + 40))(v116) != 2) {
            goto LABEL_227;
          }
          uint64_t v111 = 0;
          v112 = 0;
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v116 + 248))(&v111);
          memset(&v113, 0, sizeof(v113));
          memset(&v110, 0, sizeof(v110));
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v109 = 0;
          SplitNameAndValue((uint64_t)&__str, (uint64_t)&v113, &v110);
          long long v31 = v116;
          if (*((void *)&v116 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          std::string::size_type v32 = std::string::find(&v113, 58, 0);
          memset(&v107, 0, sizeof(v107));
          std::string::basic_string(&v107, &v113, 0, v32, (std::allocator<char> *)&__s1);
          (*(void (**)(void **__return_ptr))(*(void *)v117 + 80))(&__s1);
          uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)__s1 + 192))(__s1);
          MEMORY[0x18C11BE10](__p, v33);
          if (__n) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__n);
          }
          if (!(void)v31 || (*(unsigned int (**)(void))(*(void *)v31 + 40))(v31) != 2)
          {
            char v78 = 0;
            goto LABEL_213;
          }
          uint64_t v105 = 0;
          long long v106 = 0;
          (*(void (**)(uint64_t *__return_ptr, void))(*(void *)v31 + 248))(&v105, v31);
          uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)(v105 + *(void *)(*(void *)v105 - 688)) + 560))(v105 + *(void *)(*(void *)v105 - 688));
          if (!v34)
          {
            char v36 = 0;
            goto LABEL_210;
          }
          unint64_t v35 = v34;
          char v36 = 0;
          uint64_t v37 = 1;
          break;
        case 6:
          memset(&v113, 0, sizeof(v113));
          memset(&v110, 0, sizeof(v110));
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v109 = 0;
          SplitNameAndValue((uint64_t)&__str, (uint64_t)&v113, &v110);
          long long v62 = v116;
          if (*((void *)&v116 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          std::string::size_type v63 = std::string::find(&v113, 58, 0);
          memset(&v107, 0, sizeof(v107));
          std::string::basic_string(&v107, &v113, 0, v63, (std::allocator<char> *)&__s1);
          (*(void (**)(void **__return_ptr))(*(void *)v117 + 80))(&__s1);
          uint64_t v64 = (*(uint64_t (**)(void *))(*(void *)__s1 + 192))(__s1);
          MEMORY[0x18C11BE10](__p, v64);
          if (__n) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__n);
          }
          if (!(void)v62 || (*(unsigned int (**)(void))(*(void *)v62 + 40))(v62) != 2)
          {
            int v75 = 1;
            goto LABEL_196;
          }
          uint64_t v111 = 0;
          v112 = 0;
          (*(void (**)(uint64_t *__return_ptr, void))(*(void *)v62 + 248))(&v111, v62);
          uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)(v111 + *(void *)(*(void *)v111 - 688)) + 560))(v111 + *(void *)(*(void *)v111 - 688));
          if (!v65)
          {
            char v67 = 0;
            goto LABEL_191;
          }
          unint64_t v66 = v65;
          char v67 = 0;
          uint64_t v68 = 1;
          while (2)
          {
            uint64_t v105 = 0;
            long long v106 = 0;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v111 + 656))(&v105);
            if ((*(unsigned int (**)(uint64_t))(*(void *)v105 + 40))(v105) != 4)
            {
              int v75 = 1;
              goto LABEL_145;
            }
            uint64_t v103 = 0;
            v104 = 0;
            (*(void (**)(void **__return_ptr))(*(void *)v105 + 240))(&__s1);
            (*(void (**)(uint64_t *__return_ptr))(*(void *)__s1 + 648))(&v103);
            if (__n) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__n);
            }
            if (!v103 || (*(unsigned int (**)(uint64_t))(*(void *)v103 + 40))(v103) != 1)
            {
              int v75 = 14;
              goto LABEL_143;
            }
            __s1 = 0;
            size_t __n = 0;
            uint64_t v101 = 0;
            (*(void (**)(long long *__return_ptr))(*(void *)v103 + 232))(&v98);
            (*(void (**)(long long *__return_ptr))(*(void *)v98 + 504))(&v102);
            uint64_t v69 = (char *)(*(uint64_t (**)(void))(*(void *)v102 + 192))(v102);
            std::string::basic_string[abi:ne180100]<0>(&__s1, v69);
            if (*((void *)&v102 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v102 + 1));
            }
            if (*((void *)&v98 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v98 + 1));
            }
            uint64_t v70 = HIBYTE(v101);
            if (v101 >= 0) {
              size_t v71 = HIBYTE(v101);
            }
            else {
              size_t v71 = __n;
            }
            std::string::size_type v72 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v72 = v110.__r_.__value_.__l.__size_;
            }
            if (v71 != v72) {
              goto LABEL_151;
            }
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v73 = &v110;
            }
            else {
              std::string::size_type v73 = (std::string *)v110.__r_.__value_.__r.__words[0];
            }
            if (SHIBYTE(v101) < 0)
            {
              if (memcmp(__s1, v73, __n))
              {
                int v75 = 0;
                goto LABEL_159;
              }
            }
            else if (HIBYTE(v101))
            {
              p_s1 = &__s1;
              while (*(unsigned __int8 *)p_s1 == v73->__r_.__value_.__s.__data_[0])
              {
                p_s1 = (void **)((char *)p_s1 + 1);
                std::string::size_type v73 = (std::string *)((char *)v73 + 1);
                if (!--v70) {
                  goto LABEL_155;
                }
              }
LABEL_151:
              int v75 = 0;
              if ((v101 & 0x8000000000000000) == 0) {
                goto LABEL_143;
              }
LABEL_159:
              operator delete(__s1);
              goto LABEL_143;
            }
LABEL_155:
            (*(void (**)(long long *__return_ptr))(*(void *)v111 + 656))(&v102);
            long long v76 = v102;
            long long v102 = 0uLL;
            uint64_t v77 = (std::__shared_weak_count *)*((void *)&v116 + 1);
            long long v116 = v76;
            if (v77)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
              if (*((void *)&v102 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v102 + 1));
              }
            }
            char v67 = 1;
            int v75 = 12;
            if (v101 < 0) {
              goto LABEL_159;
            }
LABEL_143:
            if (v104) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v104);
            }
LABEL_145:
            if (v106) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v106);
            }
            if (!v75 || v75 == 14)
            {
              if (++v68 > v66) {
                goto LABEL_191;
              }
              continue;
            }
            break;
          }
          if (v75 != 12) {
            goto LABEL_192;
          }
LABEL_191:
          int v75 = 0;
LABEL_192:
          if (v112) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v112);
          }
          if (!v75) {
            int v75 = (v67 & 1) == 0;
          }
LABEL_196:
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v107.__r_.__value_.__l.__data_);
          }
          if (*((void *)&v62 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v62 + 1));
          }
          if (SHIBYTE(v109) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v113.__r_.__value_.__l.__data_);
            if (!v75) {
              goto LABEL_226;
            }
          }
          else if (!v75)
          {
            goto LABEL_226;
          }
LABEL_228:
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (v75) {
            goto LABEL_247;
          }
          if (++v14 == v16) {
            goto LABEL_236;
          }
          continue;
        default:
          goto LABEL_226;
      }
      break;
    }
    while (1)
    {
      uint64_t v103 = 0;
      v104 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v105 + 656))(&v103);
      long long v102 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)v103 + 128))(&v102);
      if ((void)v102)
      {
        __s1 = 0;
        size_t __n = 0;
        uint64_t v101 = 0;
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v102 + 232))(&v96);
        (*(void (**)(long long *__return_ptr))(*(void *)v96 + 504))(&v98);
        int v38 = (char *)(*(uint64_t (**)(void))(*(void *)v98 + 192))(v98);
        std::string::basic_string[abi:ne180100]<0>(&__s1, v38);
        if (*((void *)&v98 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v98 + 1));
        }
        if (v97) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v97);
        }
        uint64_t v39 = HIBYTE(v101);
        if (v101 >= 0) {
          size_t v40 = HIBYTE(v101);
        }
        else {
          size_t v40 = __n;
        }
        std::string::size_type v41 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v41 = v110.__r_.__value_.__l.__size_;
        }
        if (v40 == v41)
        {
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v42 = &v110;
          }
          else {
            int v42 = (std::string *)v110.__r_.__value_.__r.__words[0];
          }
          if (SHIBYTE(v101) < 0)
          {
            if (!memcmp(__s1, v42, __n))
            {
LABEL_65:
              (*(void (**)(long long *__return_ptr))(*(void *)v105 + 656))(&v98);
              long long v45 = v98;
              long long v98 = 0uLL;
              uint64_t v46 = (std::__shared_weak_count *)*((void *)&v116 + 1);
              long long v116 = v45;
              if (v46)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v46);
                if (*((void *)&v98 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v98 + 1));
                }
              }
              char v36 = 1;
              int v44 = 9;
              if ((v101 & 0x8000000000000000) == 0) {
                goto LABEL_70;
              }
            }
            else
            {
              int v44 = 0;
            }
LABEL_69:
            operator delete(__s1);
            goto LABEL_70;
          }
          if (!HIBYTE(v101)) {
            goto LABEL_65;
          }
          BOOL v43 = &__s1;
          while (*(unsigned __int8 *)v43 == v42->__r_.__value_.__s.__data_[0])
          {
            BOOL v43 = (void **)((char *)v43 + 1);
            int v42 = (std::string *)((char *)v42 + 1);
            if (!--v39) {
              goto LABEL_65;
            }
          }
        }
        int v44 = 0;
        if (v101 < 0) {
          goto LABEL_69;
        }
      }
      else
      {
        int v44 = 11;
      }
LABEL_70:
      if (*((void *)&v102 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v102 + 1));
      }
      if (v104) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v104);
      }
      if ((v44 == 11 || !v44) && ++v37 <= v35) {
        continue;
      }
LABEL_210:
      if (v106) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      }
      char v78 = v36;
LABEL_213:
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
      if (SHIBYTE(v109) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (v112) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v112);
      }
      if (v78) {
LABEL_226:
      }
        int v75 = 0;
      else {
LABEL_227:
      }
        int v75 = 1;
      goto LABEL_228;
    }
  }
LABEL_236:
  if (!(void)v116) {
    goto LABEL_247;
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v116;
  if (*((void *)&v116 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *a6 = XMPUtils::GetIXMPOptions((uint64_t *)&__str);
  if (__str.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
  }
  if ((*(unsigned int (**)(void))(*(void *)v116 + 40))(v116) == 1)
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(std::string *__return_ptr))(*(void *)v116 + 232))(&v114);
    (*(void (**)(std::string *__return_ptr))(*(void *)v114.__r_.__value_.__l.__data_ + 504))(&__str);
    if (v114.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v114.__r_.__value_.__l.__size_);
    }
    void *v94 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_
                                                                           + 192))(__str.__r_.__value_.__r.__words[0]);
    *long long v95 = (*(uint64_t (**)(std::string::size_type))(*(void *)__str.__r_.__value_.__l.__data_ + 208))(__str.__r_.__value_.__r.__words[0]);
    if (__str.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v90 = 1;
LABEL_248:
  if (*((void *)&v116 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v116 + 1));
  }
  if (*((void *)&v117 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v117 + 1));
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  return v90;
}

void sub_188822C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,std::__shared_weak_count *a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (*(char *)(v56 - 185) < 0) {
    operator delete(*(void **)(v56 - 208));
  }
  if (*(char *)(v56 - 153) < 0) {
    operator delete(*(void **)(v56 - 176));
  }
  uint64_t v58 = *(std::__shared_weak_count **)(v56 - 136);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  uint64_t v59 = *(std::__shared_weak_count **)(v56 - 120);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  *(void *)(v56 - 176) = v56 - 112;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 176));
  _Unwind_Resume(a1);
}

uint64_t XMPMeta2::CountArrayItems(XMPMeta2 *this, char *a2, char *a3)
{
  if (!a2 || !a3) {
    XMPMeta2::CountArrayItems();
  }
  memset(v12, 0, sizeof(v12));
  ExpandXPath(a2, a3, v12);
  int v10 = 0;
  uint64_t v11 = 0;
  int v9 = 0;
  if (XMPUtils::FindCnstNode((void *)this + 50, v12, (std::string::size_type *)&v10, &v9, 0))
  {
    if ((v9 & 0x200) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "The named property is not an array";
      *((unsigned char *)exception + 16) = 0;
    }
    uint64_t v7 = v10;
    uint64_t v8 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t NodeChildCount = XMPUtils::GetNodeChildCount(&v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    uint64_t NodeChildCount = 0;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  int v10 = (void **)v12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v10);
  return NodeChildCount;
}

void sub_1888230F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = (void **)&a14;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void XMPMeta2::ParseFromBuffer(XMPMeta2 *this, const char *a2, unsigned int a3, char a4)
{
  uint64_t v6 = *((void *)this + 56);
  if (!v6) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)"", 0);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if ((a4 & 2) == 0)
  {
    uint64_t v7 = *(void *)(*(uint64_t (**)(void))(**((void **)this + 54) + 232))(*((void *)this + 54));
    (*(void (**)(void))(v7 + 288))();
    uint64_t v8 = *((void *)this + 54);
    uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 56) + 192))(*((void *)this + 56));
    uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 56) + 208))(*((void *)this + 56));
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 200))(&v15, v8, v9, v10);
    long long v11 = v15;
    long long v15 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 51);
    *((_OWORD *)this + 25) = v11;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    (*(void (**)(void))(**((void **)this + 56) + 200))(*((void *)this + 56));
  }
}

void XMPMeta2::SerializeToBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  AdobeXMPCore::IDOMImplementationRegistry_v1::GetDOMImplementationRegistry(&v12);
  uint64_t v10 = 0;
  long long v11 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 48))(&v10);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 224))(v10);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 408);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 264))(&v8);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  if (v8)
  {
    uint64_t v6 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 192))(v8);
    std::string::append((std::string *)a2, v6);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_188823528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta2::Erase(XMPMeta2 *this)
{
  uint64_t v2 = *((void *)this + 43);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 43) = 0;
  }
  unsigned int v3 = *(uint64_t (**)(void))(*(void *)(*((void *)this + 50) + *(void *)(**((void **)this + 50) - 544)) + 224);

  return v3();
}

uint64_t XMPMeta2::DoesPropertyExist(XMPMeta2 *this, char *a2, char *a3)
{
  if (!a2 || !a3) {
    XMPMeta2::DoesPropertyExist();
  }
  memset(v9, 0, sizeof(v9));
  ExpandXPath(a2, a3, v9);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v6 = 0;
  Cnstuint64_t Node = XMPUtils::FindCnstNode((void *)this + 50, v9, (std::string::size_type *)&v7, &v6, 0);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v7 = (void **)v9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v7);
  return CnstNode;
}

void sub_1888236BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, std::__shared_weak_count *a11, char a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  a10 = (void **)&a12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void XMPMeta2::SetProperty(XMPMeta2 *this, char *a2, char *a3, char *a4, unsigned int a5)
{
  if (!a2 || !a3) {
    XMPMeta2::SetProperty();
  }
  unsigned int v9 = VerifySetOptions(a5, a4);
  memset(v13, 0, sizeof(v13));
  ExpandXPath(a2, a3, v13);
  long long v11 = 0;
  uint64_t v12 = 0;
  if ((XMPUtils::FindNode((void *)this + 50, v13, 1, v9, (uint64_t)&v11, 0, 0) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified property does not exist";
    *((unsigned char *)exception + 16) = 0;
  }
  XMPUtils::SetNode(&v11, a4, v9);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  long long v11 = (void **)v13;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1888237EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void XMPMeta2::SetArrayItem(XMPMeta2 *this, char *a2, char *a3, int a4, char *a5, unsigned int a6)
{
  if (!a2 || !a3) {
    XMPMeta2::SetArrayItem();
  }
  memset(v15, 0, sizeof(v15));
  ExpandXPath(a2, a3, v15);
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  if ((XMPUtils::FindNode((void *)this + 50, v15, 0, a6, (uint64_t)&v13, 0, 0) & 1) == 0
    || (*v13)[5]((void **)v13) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified array does not exist";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  (*v13)[31]((void **)&v11);
  XMPUtils::DoSetArrayItem(&v11, a4, a5, a6);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v13 = (unsigned int (***)(void **))v15;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_188823978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = (void **)&a14;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void XMPMeta2::AppendArrayItem(XMPMeta2 *this, char *a2, char *a3, unsigned int a4, char *a5, int a6)
{
  if (!a2 || !a3) {
    XMPMeta2::AppendArrayItem();
  }
  unsigned int v11 = VerifySetOptions(a4, 0);
  if ((v11 & 0xFFFFE1FF) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    exception[1] = "Only array form flags allowed for arrayOptions";
    *((unsigned char *)exception + 16) = 0;
  }
  unsigned int v12 = v11;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  ExpandXPath(a2, a3, &v26);
  std::string::size_type v24 = 0;
  std::string::size_type v25 = 0;
  long long v23 = 0uLL;
  uint64_t v22 = 0;
  uint64_t v13 = (void *)((char *)this + 400);
  if (XMPUtils::FindCnstNode(v13, &v26, &v24, (_DWORD *)&v22 + 1, 0))
  {
    if ((*(unsigned int (**)(std::string::size_type))(*(void *)v24 + 40))(v24) != 2)
    {
      unint64_t v14 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)unint64_t v14 = 102;
      long long v15 = "The named property is not an array";
      goto LABEL_27;
    }
  }
  else
  {
    if (!v12)
    {
      unint64_t v14 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)unint64_t v14 = 103;
      long long v15 = "Explicit arrayOptions required to create new array";
LABEL_27:
      v14[1] = v15;
      *((unsigned char *)v14 + 16) = 0;
    }
    memset(v21, 0, sizeof(v21));
    uint64_t v16 = v27;
    if (*(char *)(v27 - 9) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v21, *(const std::string::value_type **)(v27 - 32), *(void *)(v27 - 24));
    }
    else
    {
      long long v17 = *(_OWORD *)(v27 - 32);
      *(void *)&v21[16] = *(void *)(v27 - 16);
      *(_OWORD *)long long v21 = v17;
    }
    *(_DWORD *)&v21[24] = *(_DWORD *)(v16 - 8);
    memset(&__p, 0, sizeof(__p));
    if ((v21[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v21, *(std::string::size_type *)&v21[8]);
    }
    else {
      std::string __p = *(std::string *)v21;
    }
    if ((XMPUtils::FindNode(v13, &v26, 1, v12, (uint64_t)&v24, &v22, 0) & 1) == 0)
    {
      uint64_t v19 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)uint64_t v19 = 102;
      v19[1] = "Failure creating array node";
      *((unsigned char *)v19 + 16) = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v21[23] & 0x80000000) != 0) {
      operator delete(*(void **)v21);
    }
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v24 + 248))(v21);
  long long v23 = *(_OWORD *)v21;
  XMPUtils::DoSetArrayItem(&v23, -1, a5, a6 | 0x8000);
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)long long v21 = &v26;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
}

void sub_188823C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 80);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::string __p = (void *)(v26 - 72);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void XMPMeta2::SetQualifier(XMPMeta2 *this, char *a2, char *a3, char *a4, char *a5, const char *a6, uint64_t a7)
{
  if (!a5 || !a2 || !a3 || !a4) {
    XMPMeta2::SetQualifier();
  }
  memset(v19, 0, sizeof(v19));
  ExpandXPath(a2, a3, v19);
  std::string::size_type v17 = 0;
  long long v18 = 0;
  if ((XMPUtils::FindCnstNode((void *)this + 50, v19, &v17, 0, 0) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified property does not exist";
    *((unsigned char *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeQualifierPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(XMPMeta2 *, char *, std::string *, const char *, uint64_t))(*(void *)this + 48))(this, a2, p_p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_188823E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  std::string __p = &a17;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void XMPMeta2::Clone(XMPMeta2 *this, XMPMeta *lpsrc, int a3)
{
  if (!lpsrc
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    unsigned int v11 = "Null clone pointer";
    goto LABEL_12;
  }
  if (a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    unsigned int v11 = "No options are defined yet";
LABEL_12:
    exception[1] = v11;
    *((unsigned char *)exception + 16) = 0;
  }
  int v6 = v5;
  uint64_t v7 = v5[50] + *(void *)(*(void *)v5[50] - 544);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 224))(v7, 1, 1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*((void *)this + 50)
                                                            + *(void *)(**((void **)this + 50) - 544))
                                                + 264))(&v12);
  (*(void (**)(long long *__return_ptr))(*(void *)v12 + 256))(&v14);
  long long v8 = v14;
  long long v14 = 0uLL;
  unsigned int v9 = (std::__shared_weak_count *)v6[51];
  *((_OWORD *)v6 + 25) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v14 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1888240A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta2::DeleteProperty(XMPMeta2 *this, char *a2, char *a3)
{
  void (***v35)(uint64_t *__return_ptr);
  std::__shared_weak_count *v36;
  uint64_t v37[3];

  if (!a2 || !a3) {
    XMPMeta2::DeleteProperty();
  }
  memset(v37, 0, sizeof(v37));
  ExpandXPath(a2, a3, v37);
  unint64_t v35 = 0;
  char v36 = 0;
  uint64_t v34 = 0;
  if (XMPUtils::FindCnstNode((void *)this + 50, v37, (std::string::size_type *)&v35, (_DWORD *)&v34 + 1, (int *)&v34)&& v35)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    (*v35)[7](&v32);
    uint64_t v4 = v32;
    if ((v34 & 0x2000000000) != 0)
    {
      (*v35)[11](&v28);
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 192))(v28);
      (*v35)[11](&v26);
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 208))(v26);
      (*v35)[9](&v24);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 192))(v24);
      (*v35)[9](&v22);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 208))(v22);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 152))(&v30, v4, v6, v7, v8, v9);
      uint64_t v10 = v31;
      if (!v31) {
        goto LABEL_11;
      }
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 40))(v32) == 2)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 248))(&v28);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v28 + 680))(&v20);
        uint64_t v5 = v21;
        if (!v21)
        {
LABEL_17:
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          goto LABEL_19;
        }
LABEL_16:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 40))(v32) != 4)
      {
LABEL_19:
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        goto LABEL_21;
      }
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 240))(&v28);
      uint64_t v11 = v28;
      (*v35)[11](&v26);
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 192))(v26);
      (*v35)[11](&v24);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 208))(v24);
      (*v35)[9](&v22);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 192))(v22);
      (*v35)[9](&v16);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 208))(v16);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 672))(&v18, v11, v12, v13, v14, v15);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      uint64_t v10 = v17;
      if (!v17)
      {
LABEL_11:
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        uint64_t v5 = v27;
        if (!v27) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_11;
  }
LABEL_21:
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  unint64_t v35 = (void (***)(uint64_t *__return_ptr))v37;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_188824630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 88);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::string::size_type v25 = *(std::__shared_weak_count **)(v22 - 64);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)(v22 - 72) = v22 - 56;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 72));
  _Unwind_Resume(a1);
}

void XMPMeta2::GetObjectName(XMPMeta2 *this, const char **a2, unsigned int *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 50) + 736))(&v6);
  *a2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 192))(v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 50) + 736))(&v6);
  *a3 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 208))(v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

uint64_t XMPMeta2::SetObjectName(XMPMeta2 *this, char *a2)
{
  char v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = a2;
    do
    {
      if (v4 >= 1)
      {
        do
        {
          int v7 = *++v5;
          int v6 = v7;
        }
        while (v7 > 0);
        if ((v6 & 0x80000000) == 0) {
          break;
        }
      }
      unsigned int v10 = 0;
      unint64_t v9 = 0;
      CodePoint_from_UTF8(v5, 4uLL, &v10, &v9);
      v5 += v9;
      char v4 = *v5;
    }
    while (*v5);
  }
  return (*(uint64_t (**)(void, char *, uint64_t))(**((void **)this + 50) + 744))(*((void *)this + 50), a2, -1);
}

BOOL XMPMeta2::GetLocalizedText(XMPMeta2 *this, char *a2, char *a3, char *__s, char *a5, const char **a6, unsigned int *a7, const char **a8, unsigned int *a9, unsigned int *a10)
{
  void (***v34)(uint64_t *__return_ptr);
  std::__shared_weak_count *v35;
  uint64_t v36[3];
  void *__p[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;

  if (!a2 || !a3 || !__s || !a5) {
    XMPMeta2::GetLocalizedText();
  }
  if (!a6 || !a7) {
    XMPMeta2::GetLocalizedText();
  }
  if (!a8 || !a9 || !a10) {
    XMPMeta2::GetLocalizedText();
  }
  v39[0] = 0;
  v39[1] = 0;
  size_t v40 = 0;
  std::string::basic_string[abi:ne180100]<0>(v39, __s);
  __p[0] = 0;
  __p[1] = 0;
  int v38 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  NormalizeLangValue((unsigned __int8 *)v39);
  std::string::size_type v17 = __p;
  NormalizeLangValue((unsigned __int8 *)__p);
  if (v40 >= 0) {
    uint64_t v18 = (char *)v39;
  }
  else {
    uint64_t v18 = (char *)v39[0];
  }
  if (v38 < 0) {
    std::string::size_type v17 = (void **)__p[0];
  }
  memset(v36, 0, sizeof(v36));
  ExpandXPath(a2, a3, v36);
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v31 = 0;
  if ((XMPUtils::FindCnstNode((void *)this + 50, v36, (std::string::size_type *)&v34, &v31, 0) & 1) == 0)
  {
    BOOL v20 = 0;
    goto LABEL_40;
  }
  (*v34)[31](&v29);
  int v19 = ChooseIXMPLocalizedText((uint64_t)&v29, &v31, v18, (const char *)v17, &v32);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  BOOL v20 = v19 != 0;
  if (!v19)
  {
    long long v23 = v33;
    if (!v33) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v21 = v32;
  size_t v22 = strlen((const char *)xmlNameSpace);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, size_t, const char *, uint64_t))(*(void *)v21 + 128))(&v27, v21, xmlNameSpace, v22, "lang", -1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v27 + 232))(&v29);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v29 + 504))(&v27);
  *a6 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 192))(v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v29 + 504))(&v27);
  *a7 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 208))(v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v21 + 232))(&v25, v21);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v25 + 504))(&v27);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  *a8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 192))(v27);
  *a9 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 208))(v27);
  long long v23 = v33;
  uint64_t v25 = v21;
  uint64_t v26 = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a10 = XMPUtils::GetIXMPOptions(&v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v23) {
LABEL_39:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_40:
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  uint64_t v34 = (void (***)(uint64_t *__return_ptr))v36;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
  return v20;
}

void sub_188824D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char *a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  a19 = &a21;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t ChooseIXMPLocalizedText(uint64_t a1, _DWORD *a2, char *a3, const char *a4, void *a5)
{
  uint64_t v10 = *(void *)a1 + *(void *)(**(void **)a1 - 688);
  unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 560))(v10);
  std::string __p = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "lang");
  if ((*a2 & 0x1000) == 0)
  {
    if (v11) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = (*a2 & 0x800) == 0;
    }
    if (v12)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Localized text array is not alt-text";
      *((unsigned char *)exception + 16) = 0;
    }
    goto LABEL_70;
  }
  if (!v11)
  {
LABEL_70:
    uint64_t v26 = 0;
    uint64_t v43 = 0;
    goto LABEL_110;
  }
  uint64_t v68 = a5;
  __s = a3;
  uint64_t v14 = 0;
  unint64_t v15 = 1;
  uint64_t v16 = "Alt-text array item is not simple";
  do
  {
    (*(void (**)(long long *__return_ptr))(**(void **)a1 + 656))(&v75);
    uint64_t v18 = (std::__shared_weak_count *)*((void *)&v75 + 1);
    uint64_t v17 = v75;
    long long v75 = 0uLL;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (*((void *)&v75 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 40))(v17) != 1) {
      goto LABEL_147;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v17 + 184))(v17)) {
      goto LABEL_146;
    }
    size_t v19 = strlen((const char *)xmlNameSpace);
    if (v78 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v78 >= 0) {
      uint64_t v21 = HIBYTE(v78);
    }
    else {
      uint64_t v21 = v77;
    }
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, size_t, void *, uint64_t))(*(void *)v17 + 128))(&v75, v17, xmlNameSpace, v19, p_p, v21);
    uint64_t v22 = v75;
    if (*((void *)&v75 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
    }
    if (!v22)
    {
LABEL_146:
      uint64_t v16 = "Alt-text array item has no language qualifier";
LABEL_147:
      char v67 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)char v67 = 102;
      v67[1] = v16;
      *((unsigned char *)v67 + 16) = 0;
    }
    ++v15;
    uint64_t v14 = v18;
  }
  while (v15 <= v11);
  long long v23 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 1;
  do
  {
    (*(void (**)(long long *__return_ptr))(**(void **)a1 + 656))(&v75);
    uint64_t v26 = (std::__shared_weak_count *)*((void *)&v75 + 1);
    uint64_t v27 = v75;
    long long v75 = 0uLL;
    if (v18)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (*((void *)&v75 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
      }
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v27 + 112))(&v71, v27);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v71 + 48))(&v73);
    (*(void (**)(long long *__return_ptr))(*(void *)v73 + 232))(&v75);
    long long v28 = v75;
    long long v75 = 0uLL;
    if (v24)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      if (*((void *)&v75 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
      }
    }
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    if (v72) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    }
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v27 + 232))(&v75, v27);
    uint64_t v70 = (std::__shared_weak_count *)*((void *)&v75 + 1);
    long long v75 = 0uLL;
    if (v23)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      if (*((void *)&v75 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
      }
    }
    (*(void (**)(long long *__return_ptr, void))(*(void *)v28 + 504))(&v75, v28);
    uint64_t v29 = (const char *)(*(uint64_t (**)(void))(*(void *)v75 + 192))(v75);
    int v30 = strcmp(v29, a4);
    if (*((void *)&v75 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
    }
    if (!v30)
    {
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v44 = (std::__shared_weak_count *)v68[1];
      void *v68 = v27;
      v68[1] = v26;
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      uint64_t v43 = 1;
      uint64_t v33 = (std::__shared_weak_count *)*((void *)&v28 + 1);
      goto LABEL_106;
    }
    ++v25;
    long long v23 = v70;
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    uint64_t v18 = v26;
  }
  while (v25 <= v11);
  if (*__s)
  {
    size_t v31 = strlen(__s);
    unint64_t v32 = 2;
    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    while (1)
    {
      uint64_t v34 = v26;
      (*(void (**)(long long *__return_ptr))(**(void **)a1 + 656))(&v75);
      uint64_t v26 = (std::__shared_weak_count *)*((void *)&v75 + 1);
      uint64_t v35 = v75;
      long long v75 = 0uLL;
      if (v34)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        if (*((void *)&v75 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
        }
      }
      size_t v36 = strlen((const char *)xmlNameSpace);
      if (v78 >= 0) {
        uint64_t v37 = &__p;
      }
      else {
        uint64_t v37 = __p;
      }
      if (v78 >= 0) {
        uint64_t v38 = HIBYTE(v78);
      }
      else {
        uint64_t v38 = v77;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, size_t, void *, uint64_t))(*(void *)v35 + 128))(&v73, v35, xmlNameSpace, v36, v37, v38);
      (*(void (**)(long long *__return_ptr))(*(void *)v73 + 232))(&v75);
      long long v39 = v75;
      long long v75 = 0uLL;
      if (v33)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        if (*((void *)&v75 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
        }
      }
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      uint64_t v33 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      (*(void (**)(long long *__return_ptr, void))(*(void *)v39 + 504))(&v75, v39);
      size_t v40 = (const char *)(*(uint64_t (**)(void))(*(void *)v75 + 192))(v75);
      if (*((void *)&v75 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
      }
      (*(void (**)(long long *__return_ptr, void))(*(void *)v39 + 504))(&v75, v39);
      unint64_t v41 = (*(uint64_t (**)(void))(*(void *)v75 + 208))(v75);
      if (*((void *)&v75 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
      }
      if (v41 >= v31 && !strncmp(v40, __s, v31) && (v41 == v31 || v40[v31] == 45)) {
        break;
      }
      if (v32++ > v11) {
        goto LABEL_77;
      }
    }
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v58 = (std::__shared_weak_count *)v68[1];
    void *v68 = v35;
    v68[1] = v26;
    if (v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v58);
    }
    if (v32 <= v11)
    {
      while (1)
      {
        uint64_t v59 = v26;
        (*(void (**)(long long *__return_ptr))(**(void **)a1 + 656))(&v75);
        uint64_t v26 = (std::__shared_weak_count *)*((void *)&v75 + 1);
        uint64_t v60 = v75;
        long long v75 = 0uLL;
        if (v59)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          if (*((void *)&v75 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
          }
        }
        size_t v61 = strlen((const char *)xmlNameSpace);
        if (v78 >= 0) {
          long long v62 = &__p;
        }
        else {
          long long v62 = __p;
        }
        if (v78 >= 0) {
          uint64_t v63 = HIBYTE(v78);
        }
        else {
          uint64_t v63 = v77;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, size_t, void *, uint64_t))(*(void *)v60 + 128))(&v73, v60, xmlNameSpace, v61, v62, v63);
        (*(void (**)(long long *__return_ptr))(*(void *)v73 + 232))(&v75);
        long long v64 = v75;
        long long v75 = 0uLL;
        if (v33)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          if (*((void *)&v75 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
          }
        }
        if (v74) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v74);
        }
        uint64_t v33 = (std::__shared_weak_count *)*((void *)&v64 + 1);
        (*(void (**)(long long *__return_ptr, void))(*(void *)v64 + 504))(&v75, v64);
        uint64_t v65 = (const char *)(*(uint64_t (**)(void))(*(void *)v75 + 192))(v75);
        if (*((void *)&v75 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
        }
        (*(void (**)(long long *__return_ptr, void))(*(void *)v64 + 504))(&v75, v64);
        unint64_t v66 = (*(uint64_t (**)(void))(*(void *)v75 + 208))(v75);
        if (*((void *)&v75 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
        }
        if (v66 >= v31 && !strncmp(v65, __s, v31) && (v66 == v31 || v65[v31] == 45)) {
          break;
        }
        ++v32;
        uint64_t v43 = 2;
        if (v32 > v11) {
          goto LABEL_106;
        }
      }
      uint64_t v43 = 3;
    }
    else
    {
      uint64_t v43 = 2;
    }
  }
  else
  {
    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v28 + 1);
LABEL_77:
    unint64_t v45 = 1;
    uint64_t v46 = v26;
    while (1)
    {
      (*(void (**)(long long *__return_ptr))(**(void **)a1 + 656))(&v75);
      uint64_t v26 = (std::__shared_weak_count *)*((void *)&v75 + 1);
      uint64_t v47 = v75;
      long long v75 = 0uLL;
      if (v46)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        if (*((void *)&v75 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
        }
      }
      size_t v48 = strlen((const char *)xmlNameSpace);
      if (v78 >= 0) {
        long long v49 = &__p;
      }
      else {
        long long v49 = __p;
      }
      if (v78 >= 0) {
        uint64_t v50 = HIBYTE(v78);
      }
      else {
        uint64_t v50 = v77;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, size_t, void *, uint64_t))(*(void *)v47 + 128))(&v73, v47, xmlNameSpace, v48, v49, v50);
      (*(void (**)(long long *__return_ptr))(*(void *)v73 + 232))(&v75);
      long long v51 = v75;
      long long v75 = 0uLL;
      if (v33)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        if (*((void *)&v75 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
        }
      }
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      (*(void (**)(long long *__return_ptr, void))(*(void *)v51 + 504))(&v75, v51);
      uint64_t v52 = (const char *)(*(uint64_t (**)(void))(*(void *)v75 + 192))(v75);
      int v53 = strcmp(v52, "x-default");
      if (*((void *)&v75 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
      }
      if (v53) {
        break;
      }
      ++v45;
      uint64_t v33 = (std::__shared_weak_count *)*((void *)&v51 + 1);
      uint64_t v46 = v26;
      if (v45 > v11)
      {
        (*(void (**)(long long *__return_ptr))(**(void **)a1 + 656))(&v75);
        long long v54 = v75;
        long long v75 = 0uLL;
        std::string::size_type v55 = (std::__shared_weak_count *)v68[1];
        *(_OWORD *)uint64_t v68 = v54;
        if (v55)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
          if (*((void *)&v75 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
          }
        }
        uint64_t v43 = 5;
        goto LABEL_105;
      }
    }
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v56 = (std::__shared_weak_count *)v68[1];
    void *v68 = v47;
    v68[1] = v26;
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    uint64_t v43 = 4;
LABEL_105:
    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v51 + 1);
  }
LABEL_106:
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
LABEL_110:
  if (SHIBYTE(v78) < 0) {
    operator delete(__p);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  return v43;
}

void sub_188825A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    if (!v26) {
      goto LABEL_6;
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
LABEL_6:
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta2::DeleteLocalizedText(XMPMeta2 *this, char *a2, char *a3, char *__s, char *a5)
{
  void (*v40)(uint64_t *__return_ptr, uint64_t, unint64_t);
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  int v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void (***v65)(uint64_t *__return_ptr);
  std::__shared_weak_count *v66;
  uint64_t v67[3];
  void *v68[2];
  uint64_t v69;
  void *v70[2];
  uint64_t v71;

  if (!a2 || !a3 || !__s || !a5) {
    XMPMeta2::DeleteLocalizedText();
  }
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v71 = 0;
  std::string::basic_string[abi:ne180100]<0>(v70, __s);
  v68[0] = 0;
  v68[1] = 0;
  uint64_t v69 = 0;
  std::string::basic_string[abi:ne180100]<0>(v68, a5);
  NormalizeLangValue((unsigned __int8 *)v70);
  unint64_t v9 = (const char *)v68;
  NormalizeLangValue((unsigned __int8 *)v68);
  if (v71 >= 0) {
    uint64_t v10 = (char *)v70;
  }
  else {
    uint64_t v10 = (char *)v70[0];
  }
  if (v69 < 0) {
    unint64_t v9 = (const char *)v68[0];
  }
  memset(v67, 0, sizeof(v67));
  ExpandXPath(a2, a3, v67);
  uint64_t v65 = 0;
  unint64_t v66 = 0;
  uint64_t v63 = 0;
  long long v64 = 0;
  long long v62 = 0;
  if (XMPUtils::FindCnstNode((void *)this + 50, v67, (std::string::size_type *)&v65, &v62, 0))
  {
    (*v65)[31](&v60);
    uint64_t v12 = v60;
    unint64_t v11 = v61;
    unint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(v60 + *(void *)(*(void *)v60 - 688)) + 560))(v60 + *(void *)(*(void *)v60 - 688));
    (*(void (**)(uint64_t *__return_ptr))(*(void *)(v12 + *(void *)(*(void *)v12 - 544)) + 248))(&v60);
    int v14 = ChooseIXMPLocalizedText((uint64_t)&v60, &v62, v10, v9, &v63);
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    uint64_t v60 = 0;
    size_t v61 = 0;
    uint64_t v15 = v63;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v63 + 232))(&v58, v63);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v58 + 504))(&v60);
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v14 != 1) {
      goto LABEL_89;
    }
    if (!v13)
    {
LABEL_22:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 7;
      exception[1] = "XMP_Enforce failed: (itemIndex <= arraySize) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-T"
                     "oolkit-SDK/XMPCore/source/XMPMeta2-GetSet.cpp at line 882";
      *((unsigned char *)exception + 16) = 0;
    }
    unint64_t v16 = 1;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v12 + 656))(&v58, v12, v16);
      uint64_t v17 = v58;
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      if (v17 == v15) {
        break;
      }
      if (++v16 > v13) {
        goto LABEL_22;
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 184))(v15))
    {
      size_t v19 = strlen((const char *)xmlNameSpace);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, size_t, const char *, uint64_t))(*(void *)v15 + 128))(&v56, v15, xmlNameSpace, v19, "lang", -1);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v56 + 232))(&v58);
      uint64_t v21 = v58;
      BOOL v20 = v59;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v21 + 504))(&v58, v21);
      uint64_t v22 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 192))(v58);
      int v23 = strcmp(v22, "x-default");
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      if (v16 != 1 && !v23)
      {
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v12 + 656))(&v58, v12, v16);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 656))(&v56, v12, 1);
        uint64_t v25 = v56;
        uint64_t v24 = v57;
        uint64_t v26 = v59;
        uint64_t v56 = v58;
        uint64_t v57 = v59;
        uint64_t v58 = v25;
        uint64_t v59 = v24;
        if (v57)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          uint64_t v24 = v59;
        }
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        unint64_t v16 = 1;
        goto LABEL_44;
      }
      if (!v23)
      {
LABEL_44:
        if (v13 < 2)
        {
          uint64_t v29 = 0;
          unint64_t v30 = 2;
          goto LABEL_78;
        }
        uint64_t v29 = 0;
        unint64_t v30 = 2;
        while (1)
        {
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v12 + 656))(&v56, v12, v30);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v56 + 232))(&v58);
          if (v57) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          }
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v58 + 504))(&v56);
          size_t v31 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 192))(v56);
          unint64_t v32 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v60 + 192))(v60);
          int v33 = strcmp(v31, v32);
          if (v57) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          }
          if (!v33)
          {
            (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v12 + 656))(&v56, v12, v30);
            uint64_t v34 = v57;
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            if (v29)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
              if (v57) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              }
            }
            uint64_t v29 = v34;
          }
          if (v59) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          }
          if (!v33) {
            goto LABEL_77;
          }
          if (++v30 > v13) {
            goto LABEL_78;
          }
        }
      }
    }
    else
    {
      BOOL v20 = 0;
    }
    if (v16 < 2)
    {
      uint64_t v29 = 0;
      goto LABEL_83;
    }
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 656))(&v54, v12, 1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v54 + 232))(&v56);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v56 + 504))(&v58);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    uint64_t v27 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 192))(v58);
    long long v28 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v60 + 192))(v60);
    if (!strcmp(v27, v28))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 656))(&v52, v12, 1);
      size_t v35 = strlen((const char *)xmlNameSpace);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, size_t, const char *, uint64_t))(*(void *)v52 + 128))(&v54, v52, xmlNameSpace, v35, "lang", -1);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v54 + 232))(&v56);
      uint64_t v36 = v56;
      uint64_t v37 = v57;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      if (v20)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v36 + 504))(&v56, v36);
      uint64_t v38 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 192))(v56);
      int v39 = strcmp(v38, "x-default");
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
      if (v39)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 656))(&v56, v12, 1);
        uint64_t v29 = v57;
        unint64_t v30 = 1;
      }
      BOOL v20 = v37;
    }
    else
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
LABEL_77:
    if (v30)
    {
LABEL_78:
      size_t v40 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v12 + 680);
      if (v16 >= v30)
      {
        v40(&v44, v12, v16);
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v12 + 680))(&v42, v12, v30);
        unint64_t v41 = v43;
        if (!v43) {
          goto LABEL_85;
        }
      }
      else
      {
        v40(&v48, v12, v30);
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v12 + 680))(&v46, v12, v16);
        unint64_t v41 = v47;
        if (!v47) {
          goto LABEL_85;
        }
      }
      goto LABEL_84;
    }
LABEL_83:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v12 + 680))(&v50, v12, v16);
    unint64_t v41 = v51;
    if (!v51)
    {
LABEL_85:
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
LABEL_89:
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      goto LABEL_93;
    }
LABEL_84:
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    goto LABEL_85;
  }
LABEL_93:
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  uint64_t v65 = (void (***)(uint64_t *__return_ptr))v67;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (SHIBYTE(v69) < 0) {
    operator delete(v68[0]);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete(v70[0]);
  }
}

void sub_18882669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  size_t v35 = *(std::__shared_weak_count **)(v33 - 160);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  *(void *)(v33 - 168) = v33 - 152;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 168));
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  if (*(char *)(v33 - 81) < 0) {
    operator delete(*(void **)(v33 - 104));
  }
  _Unwind_Resume(a1);
}

void XMPMeta2::SetLocalizedText(XMPMeta2 *this, char *a2, char *a3, char *__s, char *a5, char *a6)
{
  if (!a2 || !a3 || !__s || !a5) {
    XMPMeta2::SetLocalizedText();
  }
  v89[0] = 0;
  v89[1] = 0;
  uint64_t v90 = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, __s);
  v87[0] = 0;
  v87[1] = 0;
  uint64_t v88 = 0;
  std::string::basic_string[abi:ne180100]<0>(v87, a5);
  NormalizeLangValue((unsigned __int8 *)v89);
  NormalizeLangValue((unsigned __int8 *)v87);
  if (v90 >= 0) {
    unint64_t v11 = (char *)v89;
  }
  else {
    unint64_t v11 = (char *)v89[0];
  }
  if (v88 >= 0) {
    uint64_t v12 = v87;
  }
  else {
    uint64_t v12 = (void **)v87[0];
  }
  __s1 = (char *)v12;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  ExpandXPath(a2, a3, &v84);
  std::string::size_type v82 = 0;
  long long v83 = 0;
  long long v81 = 0uLL;
  unint64_t v13 = (void *)((char *)this + 400);
  int v80 = 0;
  if ((XMPUtils::FindCnstNode(v13, &v84, &v82, 0, 0) & 1) == 0)
  {
    memset(v79, 0, sizeof(v79));
    uint64_t v14 = v85;
    if (*(char *)(v85 - 9) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v79, *(const std::string::value_type **)(v85 - 32), *(void *)(v85 - 24));
    }
    else
    {
      long long v15 = *(_OWORD *)(v85 - 32);
      *(void *)&v79[16] = *(void *)(v85 - 16);
      *(_OWORD *)std::string::size_type v79 = v15;
    }
    *(_DWORD *)&v79[24] = *(_DWORD *)(v14 - 8);
    memset(&v78, 0, sizeof(v78));
    if ((v79[23] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)v79, *(std::string::size_type *)&v79[8]);
    }
    else {
      std::string v78 = *(std::string *)v79;
    }
    LODWORD(v77) = 0;
    if ((XMPUtils::FindNode(v13, &v84, 1, 0xA00u, (uint64_t)&v82, &v77, 0) & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Failure creating array node";
      *((unsigned char *)exception + 16) = 0;
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if ((v79[23] & 0x80000000) != 0) {
      operator delete(*(void **)v79);
    }
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v82 + 248))(v79);
  unint64_t v16 = *(std::__shared_weak_count **)&v79[8];
  uint64_t v17 = *(void *)v79;
  long long v81 = *(_OWORD *)v79;
  if (*(void *)v79) {
    uint64_t v18 = *(void *)v79 + *(void *)(**(void **)v79 - 544);
  }
  else {
    uint64_t v18 = 0;
  }
  *(void *)std::string::size_type v79 = v18;
  if (*(void *)&v79[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v79[8] + 8), 1uLL, memory_order_relaxed);
  }
  int IXMPOptions = XMPUtils::GetIXMPOptions((uint64_t *)v79);
  int v80 = IXMPOptions;
  if (*(void *)&v79[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v79[8]);
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + *(void *)(*(void *)v17 - 688)) + 560))(v17 + *(void *)(*(void *)v17 - 688));
  if ((IXMPOptions & 0x1000) == 0)
  {
    if ((IXMPOptions & 0x800) == 0 || v20)
    {
      uint64_t v68 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)uint64_t v68 = 102;
      v68[1] = "Localized text array is not alt-text";
      *((unsigned char *)v68 + 16) = 0;
    }
    int v80 = IXMPOptions | 0x1000;
  }
  uint64_t v71 = a6;
  *(_OWORD *)std::string::size_type v79 = 0uLL;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + *(void *)(*(void *)v17 - 688)) + 560))(v17 + *(void *)(*(void *)v17 - 688));
  if (v21)
  {
    unint64_t v22 = v21;
    uint64_t v70 = v11;
    char v23 = 0;
    uint64_t v24 = 0;
    for (unint64_t i = 1; i <= v22; ++i)
    {
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = 0uLL;
      (*(void (**)(std::string *__return_ptr, uint64_t, unint64_t))(*(void *)v17 + 656))(&v78, v17, i);
      long long v77 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
      if (v78.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v78.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      if ((XMPUtils::GetIXMPOptions((uint64_t *)&v77) & 0x40) == 0) {
        __assert_rtn("SetLocalizedText", "XMPMeta2-GetSet.cpp", 1011, "(((XMPUtils::GetIXMPOptions(currItem)) & kXMP_PropHasLang) != 0)");
      }
      if (*((void *)&v77 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
      }
      if (((*(uint64_t (**)(std::string::size_type))(*(void *)v78.__r_.__value_.__l.__data_ + 184))(v78.__r_.__value_.__r.__words[0]) & 1) == 0)
      {
        uint64_t v65 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)uint64_t v65 = 102;
        v65[1] = "Language qualifier must be first";
        *((unsigned char *)v65 + 16) = 0;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v78.__r_.__value_.__l.__data_ + 112))(&v73);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 48))(&v75);
      (*(void (**)(long long *__return_ptr))(*(void *)v75 + 232))(&v77);
      uint64_t v26 = (std::__shared_weak_count *)*((void *)&v77 + 1);
      uint64_t v27 = v77;
      long long v77 = 0uLL;
      if (v24)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        if (*((void *)&v77 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
        }
      }
      if (v76) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v76);
      }
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)(v27 + *(void *)(*(void *)v27 - 544)) + 72))(&v77);
      long long v28 = (const char *)(*(uint64_t (**)(void))(*(void *)v77 + 192))(v77);
      int v29 = strcmp(v28, "lang");
      if (*((void *)&v77 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
      }
      if (v29)
      {
        unint64_t v66 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)unint64_t v66 = 102;
        v66[1] = "Language qualifier must be first";
        *((unsigned char *)v66 + 16) = 0;
      }
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v27 + 504))(&v77, v27);
      unint64_t v30 = (const char *)(*(uint64_t (**)(void))(*(void *)v77 + 192))(v77);
      int v31 = strcmp(v30, "x-default");
      if (*((void *)&v77 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
      }
      if (!v31)
      {
        long long v32 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
        if (v78.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v78.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = *(std::__shared_weak_count **)&v79[8];
        *(_OWORD *)std::string::size_type v79 = v32;
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        char v23 = 1;
      }
      if (v78.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78.__r_.__value_.__l.__size_);
      }
      if (!v31) {
        break;
      }
      uint64_t v24 = v26;
    }
    unint64_t v11 = v70;
    if (i != 1 && (v23 & 1) != 0)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v27 + 504))(&v78, v27);
      uint64_t v34 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(void *)v78.__r_.__value_.__l.__data_
                                                                            + 192))(v78.__r_.__value_.__r.__words[0]);
      if (strcmp(v34, "x-default")) {
        __assert_rtn("SetLocalizedText", "XMPMeta2-GetSet.cpp", 1028, "(strcmp((firstQualifier->GetValue()->c_str()),(\"x-default\")) == 0)");
      }
      if (v78.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78.__r_.__value_.__l.__size_);
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v17 + 656))(&v75, v17, i);
      size_t v35 = strlen((const char *)xmlNameSpace);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, size_t, const char *, uint64_t))(*(void *)v75 + 128))(&v77, v75, xmlNameSpace, v35, "lang", -1);
      (*(void (**)(std::string *__return_ptr))(*(void *)v77 + 232))(&v78);
      std::string::size_type size = v78.__r_.__value_.__l.__size_;
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = 0uLL;
      if (*((void *)&v77 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
      }
      if (v76) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v76);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      uint64_t v26 = (std::__shared_weak_count *)size;
    }
  }
  else
  {
    char v23 = 0;
    uint64_t v26 = 0;
  }
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = 0uLL;
  if (*(void *)v79 && (*(unsigned int (**)(void))(**(void **)v79 + 40))(*(void *)v79) == 1)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v79 + 232))(&v75);
    (*(void (**)(long long *__return_ptr))(*(void *)v75 + 504))(&v77);
    uint64_t v37 = (std::__shared_weak_count *)*((void *)&v77 + 1);
    uint64_t v38 = v77;
    long long v77 = 0uLL;
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v37 = 0;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)(v17 + *(void *)(*(void *)v17 - 544)) + 248))(&v77);
  int v39 = ChooseIXMPLocalizedText((uint64_t)&v77, &v80, v11, __s1, &v78);
  if (*((void *)&v77 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
  }
  if (v78.__r_.__value_.__r.__words[0]
    && (*(unsigned int (**)(std::string::size_type))(*(void *)v78.__r_.__value_.__l.__data_ + 40))(v78.__r_.__value_.__r.__words[0]) == 1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v78.__r_.__value_.__l.__data_ + 232))(&v75);
    (*(void (**)(long long *__return_ptr))(*(void *)v75 + 504))(&v77);
    size_t v40 = (std::__shared_weak_count *)*((void *)&v77 + 1);
    uint64_t v41 = v77;
    long long v77 = 0uLL;
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
  }
  else
  {
    uint64_t v41 = 0;
    size_t v40 = 0;
  }
  int v42 = strcmp(__s1, "x-default");
  switch(v39)
  {
    case 0:
      AppendIXMPLangItem(&v81);
    case 1:
      if (v42)
      {
        if (*(void *)v79 == v78.__r_.__value_.__r.__words[0]) {
          int v47 = 0;
        }
        else {
          int v47 = v23 & (*(void *)v79 != 0);
        }
        if (v47 == 1)
        {
          size_t v48 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 192))(v38);
          long long v49 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v41 + 192))(v41);
          if (!strcmp(v48, v49))
          {
            long long v77 = *(_OWORD *)v79;
            if (*(void *)&v79[8]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v79[8] + 8), 1uLL, memory_order_relaxed);
            }
            int v50 = XMPUtils::GetIXMPOptions((uint64_t *)&v77);
            XMPUtils::SetNode(v79, v71, v50);
            if (*((void *)&v77 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
            }
          }
        }
        long long v77 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
        if (v78.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v78.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
LABEL_119:
        int v51 = XMPUtils::GetIXMPOptions((uint64_t *)&v77);
        XMPUtils::SetNode(&v78, v71, v51);
        if (*((void *)&v77 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
        }
        if ((v23 & 1) == 0
          && (*(uint64_t (**)(uint64_t))(*(void *)(v17 + *(void *)(*(void *)v17 - 688)) + 560))(v17 + *(void *)(*(void *)v17 - 688)) == 1)
        {
          AppendIXMPLangItem(&v81);
        }
      }
      else
      {
        if (*(void *)v79 == v78.__r_.__value_.__r.__words[0]) {
          char v52 = v23 & (*(void *)v79 != 0);
        }
        else {
          char v52 = 0;
        }
        if ((v52 & 1) == 0) {
          __assert_rtn("SetLocalizedText", "XMPMeta2-GetSet.cpp", 1065, "xdItem && haveXDefault && (xdItem.get() == itemNode.get())");
        }
        uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + *(void *)(*(void *)v17 - 688)) + 560))(v17 + *(void *)(*(void *)v17 - 688));
        if (v53)
        {
          unint64_t v54 = v53;
          for (unint64_t j = 1; j <= v54; ++j)
          {
            long long v77 = 0uLL;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v17 + 656))(&v75, v17, j);
            (*(void (**)(long long *__return_ptr))(*(void *)v75 + 232))(&v77);
            if (v76) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            }
            if ((void)v77) {
              uint64_t v56 = v77 + *(void *)(*(void *)v77 - 544);
            }
            else {
              uint64_t v56 = 0;
            }
            if (v56 != *(void *)v79)
            {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)v77 + 504))(&v75);
              uint64_t v57 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v75 + 192))(v75);
              uint64_t v58 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 192))(v38);
              int v59 = strcmp(v57, v58);
              if (v76) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v76);
              }
              if (!v59)
              {
                uint64_t v60 = (void *)v77;
                if ((void)v77) {
                  uint64_t v61 = v77 + *(void *)(*(void *)v77 - 544);
                }
                else {
                  uint64_t v61 = 0;
                }
                uint64_t v75 = v61;
                long long v76 = (std::__shared_weak_count *)*((void *)&v77 + 1);
                if (*((void *)&v77 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v77 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                if (v60) {
                  uint64_t v62 = (uint64_t)v60 + *(void *)(*v60 - 544);
                }
                else {
                  uint64_t v62 = 0;
                }
                uint64_t v73 = v62;
                uint64_t v74 = (std::__shared_weak_count *)*((void *)&v77 + 1);
                if (*((void *)&v77 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v77 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                int v63 = XMPUtils::GetIXMPOptions(&v73);
                XMPUtils::SetNode(&v75, v71, v63);
                if (v74) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v74);
                }
                if (v76) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v76);
                }
              }
            }
            if (*((void *)&v77 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
            }
          }
        }
        long long v77 = *(_OWORD *)v79;
        if (*(void *)&v79[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v79[8] + 8), 1uLL, memory_order_relaxed);
        }
        int v64 = XMPUtils::GetIXMPOptions((uint64_t *)&v77);
        XMPUtils::SetNode(v79, v71, v64);
        if (*((void *)&v77 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
        }
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (v78.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78.__r_.__value_.__l.__size_);
      }
      if (*(void *)&v79[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v79[8]);
      }
      if (v26)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        unint64_t v16 = (std::__shared_weak_count *)*((void *)&v81 + 1);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v83) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v83);
      }
      *(void *)std::string::size_type v79 = &v84;
      std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v79);
      if (SHIBYTE(v88) < 0) {
        operator delete(v87[0]);
      }
      if (SHIBYTE(v90) < 0) {
        operator delete(v89[0]);
      }
      return;
    case 2:
      if (*(void *)v79 != 0 && (v23 & 1) != 0 && *(void *)v79 != v78.__r_.__value_.__r.__words[0])
      {
        int v44 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 192))(v38);
        unint64_t v45 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v41 + 192))(v41);
        if (!strcmp(v44, v45))
        {
          long long v77 = *(_OWORD *)v79;
          if (*(void *)&v79[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v79[8] + 8), 1uLL, memory_order_relaxed);
          }
          int v46 = XMPUtils::GetIXMPOptions((uint64_t *)&v77);
          XMPUtils::SetNode(v79, v71, v46);
          if (*((void *)&v77 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
          }
        }
      }
      long long v77 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
      if (v78.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v78.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_119;
    case 3:
      AppendIXMPLangItem(&v81);
    case 4:
      if ((*(uint64_t (**)(uint64_t))(*(void *)(v17 + *(void *)(*(void *)v17 - 688)) + 560))(v17 + *(void *)(*(void *)v17 - 688)) == 1)
      {
        long long v77 = *(_OWORD *)v79;
        if (*(void *)&v79[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v79[8] + 8), 1uLL, memory_order_relaxed);
        }
        int v43 = XMPUtils::GetIXMPOptions((uint64_t *)&v77);
        XMPUtils::SetNode(v79, v71, v43);
        if (*((void *)&v77 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
        }
      }
      AppendIXMPLangItem(&v81);
    case 5:
      AppendIXMPLangItem(&v81);
    default:
      uint64_t v69 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)uint64_t v69 = 9;
      v69[1] = "Unexpected result from ChooseLocalizedText";
      *((unsigned char *)v69 + 16) = 0;
  }
}

void sub_1888279C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, std::__shared_weak_count *a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,std::__shared_weak_count *a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,std::__shared_weak_count *a38)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  std::string __p = (void *)(v41 - 160);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v41 - 113) < 0) {
    operator delete(*(void **)(v41 - 136));
  }
  if (*(char *)(v41 - 89) < 0) {
    operator delete(*(void **)(v41 - 112));
  }
  _Unwind_Resume(a1);
}

void AppendIXMPLangItem(void *a1)
{
  v9[2] = 0;
  uint64_t v9[3] = 0;
  (*(void (**)(void *__return_ptr))(*(void *)(*a1 + *(void *)(*(void *)*a1 - 544)) + 88))(v9);
  uint64_t v2 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(void))(*(void *)v9[0] + 192))(v9[0]);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*a1 + *(void *)(*(void *)*a1 - 544)) + 88))(&v8);
  unsigned int v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 208))(v8);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*a1 + *(void *)(*(void *)*a1 - 544)) + 72))(&v7);
  char v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 192))(v7);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*a1 + *(void *)(*(void *)*a1 - 544)) + 72))(&v6);
  uint64_t v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 208))(v6);
  AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v2, v3, v4, v5, "", (const char *)0xFFFFFFFFFFFFFFFFLL);
}

void sub_188828264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void XMPMeta2::DumpObject(XMPMeta2 *this, uint64_t (*a2)(uint64_t, unsigned __int8 *, uint64_t), void *a3)
{
  if (!a2) {
    XMPMeta2::DumpObject();
  }
  long long v40 = 0uLL;
  double DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v40);
  if (!((unsigned int (*)(void *, const char *, uint64_t, double))a2)(a3, "Dumping XMPMeta object \"", 24, DefaultNameSpacePrefixMap))
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 50) + 736))(&v35);
    uint64_t v7 = (char *)(*(uint64_t (**)(std::string::size_type))(*(void *)v35.__r_.__value_.__l.__data_ + 192))(v35.__r_.__value_.__r.__words[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    DumpClearString((uint64_t)__p, a2, (uint64_t)a3);
    if (SHIBYTE(v39) < 0) {
      operator delete(__p[0]);
    }
    if (v35.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35.__r_.__value_.__l.__size_);
    }
    if (!a2((uint64_t)a3, "\"  ", 3))
    {
      uint64_t v8 = (void *)*((void *)this + 50);
      if (v8) {
        unint64_t v9 = (char *)v8 + *(void *)(*v8 - 544);
      }
      else {
        unint64_t v9 = 0;
      }
      uint64_t v10 = (atomic_ullong *)*((void *)this + 51);
      __p[0] = v9;
      __p[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
      }
      unsigned int IXMPOptions = XMPUtils::GetIXMPOptions((uint64_t *)__p);
      DumpNodeOptions(IXMPOptions, (uint64_t (*)(void *, const char *, uint64_t))a2, a3);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      if (!a2((uint64_t)a3, "\n", 1))
      {
        uint64_t v12 = *((void *)this + 50) + *(void *)(**((void **)this + 50) - 544);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 184))(v12))
        {
          if (a2((uint64_t)a3, "** bad root qualifiers **", 25)
            || a2((uint64_t)a3, "\n", 1))
          {
            goto LABEL_86;
          }
          __p[0] = 0;
          __p[1] = 0;
          (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 50)
                                                                  + *(void *)(**((void **)this + 50) - 544))
                                                      + 112))(__p);
          for (unint64_t i = __p[0]; __p[0]; unint64_t i = __p[0])
          {
            while (1)
            {
              (*(void (**)(void **__return_ptr))(*(void *)i + 48))(v29);
              *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)v29;
              v29[0] = 0;
              v29[1] = 0;
              DumpIXMPPropertyTree((uint64_t *)&v35, 3, 0, a2, a3);
              if (v35.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35.__r_.__value_.__l.__size_);
              }
              if (v29[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29[1]);
              }
              (*(void (**)(std::string *__return_ptr))(*(void *)__p[0] + 56))(&v35);
              long long v14 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
              *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
              long long v15 = (std::__shared_weak_count *)__p[1];
              *(_OWORD *)std::string __p = v14;
              if (v15) {
                break;
              }
              unint64_t i = (void *)v14;
              if (!(void)v14) {
                goto LABEL_30;
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            if (v35.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35.__r_.__value_.__l.__size_);
            }
          }
LABEL_30:
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
        }
        __p[1] = 0;
        uint64_t v39 = 0;
        __p[0] = &__p[1];
        if ((*(uint64_t (**)(void))(*(void *)(*((void *)this + 50) + *(void *)(**((void **)this + 50) - 688))
                                  + 560))())
        {
          long long v37 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)(*((void *)this + 50)
                                                                     + *(void *)(**((void **)this + 50) - 688))
                                                         + 552))(&v37);
          uint64_t v16 = v37;
          if ((void)v37)
          {
            while (1)
            {
              long long v36 = 0uLL;
              (*(void (**)(long long *__return_ptr))(*(void *)v16 + 48))(&v36);
              (*(void (**)(void **__return_ptr))(*(void *)v36 + 88))(v29);
              uint64_t v17 = (char *)(*(uint64_t (**)(void *))(*(void *)v29[0] + 192))(v29[0]);
              std::string::basic_string[abi:ne180100]<0>(&v35, v17);
              uint64_t v18 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__count_unique<std::string>((uint64_t)__p, (const void **)&v35.__r_.__value_.__l.__data_);
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v35.__r_.__value_.__l.__data_);
              }
              if (v29[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29[1]);
              }
              if (!v18)
              {
                if (a2((uint64_t)a3, "\n", 1) || a2((uint64_t)a3, "   ", 3)) {
                  goto LABEL_66;
                }
                memset(&v35, 0, sizeof(v35));
                uint64_t v20 = v40;
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v36 + 88))(&v33);
                uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 192))(v33);
                (*(void (**)(void ***__return_ptr))(*(void *)v36 + 88))(&v31);
                uint64_t v22 = (*((uint64_t (**)(void **))*v31 + 26))(v31);
                (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v20 + 88))(v29, v20, v21, v22);
                char v23 = (char *)(*(uint64_t (**)(void *))(*(void *)v29[0] + 192))(v29[0]);
                std::string::basic_string[abi:ne180100]<0>(&v35, v23);
                if (v29[1]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29[1]);
                }
                if (v32) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                }
                if (v34) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
                }
                std::string::append(&v35, ":");
                if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v24 = &v35;
                }
                else {
                  uint64_t v24 = (std::string *)v35.__r_.__value_.__r.__words[0];
                }
                std::string::basic_string[abi:ne180100]<0>(v29, (char *)v24);
                DumpClearString((uint64_t)v29, a2, (uint64_t)a3);
                if (v30 < 0) {
                  operator delete(v29[0]);
                }
                if (a2((uint64_t)a3, "  ", 2)) {
                  goto LABEL_64;
                }
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v36 + 88))(&v33);
                uint64_t v25 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v33 + 192))(v33);
                std::string::basic_string[abi:ne180100]<0>(v29, v25);
                DumpClearString((uint64_t)v29, a2, (uint64_t)a3);
                if (v30 < 0) {
                  operator delete(v29[0]);
                }
                if (v34) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
                }
                if (a2((uint64_t)a3, "  ", 2)
                  || (DumpNodeOptions(0x80000000, (uint64_t (*)(void *, const char *, uint64_t))a2, a3),
                      a2((uint64_t)a3, "\n", 1)))
                {
LABEL_64:
                  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v35.__r_.__value_.__l.__data_);
                  }
LABEL_66:
                  int v19 = 0;
                  goto LABEL_67;
                }
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v36 + 88))(&v33);
                long long v28 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v33 + 192))(v33);
                std::string::basic_string[abi:ne180100]<0>(v29, v28);
                int v31 = v29;
                *((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)v29, (uint64_t)&std::piecewise_construct, (_OWORD **)&v31)+ 56) = 1;
                if (v30 < 0) {
                  operator delete(v29[0]);
                }
                if (v34) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
                }
                if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v35.__r_.__value_.__l.__data_);
                }
              }
              *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v36;
              if (*((void *)&v36 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              DumpIXMPPropertyTree((uint64_t *)&v35, 2, 0, a2, a3);
              if (v35.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35.__r_.__value_.__l.__size_);
              }
              int v19 = 1;
LABEL_67:
              if (*((void *)&v36 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
              }
              if (!v19) {
                break;
              }
              (*(void (**)(std::string *__return_ptr))(*(void *)v37 + 56))(&v35);
              long long v26 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
              *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
              uint64_t v27 = (std::__shared_weak_count *)*((void *)&v37 + 1);
              long long v37 = v26;
              if (v27)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                if (v35.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35.__r_.__value_.__l.__size_);
                }
                uint64_t v16 = v37;
                if (!(void)v37) {
                  break;
                }
              }
              else
              {
                uint64_t v16 = v26;
                if (!(void)v26) {
                  break;
                }
              }
            }
          }
          if (*((void *)&v37 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
          }
        }
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)__p, (char *)__p[1]);
      }
    }
  }
LABEL_86:
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
}

void sub_188828CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,char *a32,int a33,__int16 a34,char a35,char a36)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)&a31, a32);
  uint64_t v38 = *(std::__shared_weak_count **)(v36 - 104);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

void DumpIXMPPropertyTree(uint64_t *a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t, unsigned __int8 *, uint64_t), void *a5)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (!*a1) {
    return;
  }
  *(_OWORD *)std::string __str = 0u;
  long long v82 = 0u;
  unsigned int IXMPOptions = XMPUtils::GetIXMPOptions(a1);
  long long v79 = 0uLL;
  double DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v79);
  long long v76 = 0;
  size_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v12 = v79;
  (*(void (**)(std::string *__return_ptr, double))(*(void *)*a1 + 88))(&v73, DefaultNameSpacePrefixMap);
  uint64_t v13 = (*(uint64_t (**)(std::string::size_type))(*(void *)v73.__r_.__value_.__l.__data_ + 192))(v73.__r_.__value_.__r.__words[0]);
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 88))(&v80);
  uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v80 + 208))(v80);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 88))(__p, v12, v13, v14);
  long long v15 = (char *)(*(uint64_t (**)(void *))(*(void *)__p[0] + 192))(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v76, v15);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  if (v73.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73.__r_.__value_.__l.__size_);
  }
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v75 = 0;
  if (v78 >= 0) {
    size_t v16 = HIBYTE(v78);
  }
  else {
    size_t v16 = v77;
  }
  memset(&v73, 0, sizeof(v73));
  uint64_t v17 = &v73;
  std::string::basic_string[abi:ne180100]((uint64_t)&v73, v16 + 1);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v17 = (std::string *)v73.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if (v78 >= 0) {
      uint64_t v18 = &v76;
    }
    else {
      uint64_t v18 = v76;
    }
    memmove(v17, v18, v16);
  }
  *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 58;
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 72))(&v80);
  int v19 = (const std::string::value_type *)(*(uint64_t (**)(void))(*(void *)v80 + 192))(v80);
  uint64_t v20 = std::string::append(&v73, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v75 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (*((void *)&v80 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v73.__r_.__value_.__l.__data_);
    if (!a2) {
      goto LABEL_27;
    }
LABEL_24:
    uint64_t v22 = a2;
    while (!a4((uint64_t)a5, "   ", 3))
    {
      if (!--v22) {
        goto LABEL_27;
      }
    }
    goto LABEL_161;
  }
  if (a2) {
    goto LABEL_24;
  }
LABEL_27:
  if (a3)
  {
    if (a4((uint64_t)a5, "[", 1)) {
      goto LABEL_161;
    }
    snprintf(__str, 0x20uLL, "%ld", a3);
    HIBYTE(v82) = 0;
    size_t v23 = strlen(__str);
    if (a4((uint64_t)a5, (unsigned __int8 *)__str, v23) || a4((uint64_t)a5, "]", 1)) {
      goto LABEL_161;
    }
  }
  else
  {
    if ((IXMPOptions & 0x20) != 0 && a4((uint64_t)a5, "? ", 2)) {
      goto LABEL_161;
    }
    DumpClearString((uint64_t)__p, a4, (uint64_t)a5);
  }
  if ((IXMPOptions & 0x1F00) != 0) {
    goto LABEL_169;
  }
  if (a4((uint64_t)a5, " = \"", 4)) {
    goto LABEL_161;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 232))(&v80);
  int v31 = (std::__shared_weak_count *)*((void *)&v80 + 1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v80 + 504))(&v71);
  long long v32 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v71 + 192))(v71);
  std::string::basic_string[abi:ne180100]<0>(&v73, v32);
  DumpClearString((uint64_t)&v73, a4, (uint64_t)a5);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (a4((uint64_t)a5, "\"", 1)) {
    goto LABEL_161;
  }
  if (IXMPOptions)
  {
LABEL_169:
    if (a4((uint64_t)a5, "  ", 2)) {
      goto LABEL_161;
    }
    DumpNodeOptions(IXMPOptions, (uint64_t (*)(void *, const char *, uint64_t))a4, a5);
    BOOL v69 = (IXMPOptions & 0x40) == 0;
    if ((IXMPOptions & 0x40) != 0)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 112))(&v73);
      std::string::size_type size = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      (*(void (**)(std::string *__return_ptr))(*(void *)v73.__r_.__value_.__l.__data_ + 48))(&v73);
      uint64_t v25 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      (*(void (**)(std::string *__return_ptr))(*(void *)v73.__r_.__value_.__l.__data_ + 232))(&v73);
      long long v26 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      uint64_t v27 = (void *)v73.__r_.__value_.__r.__words[0];
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (size) {
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
      if (!(*(unsigned int (**)(void))(*(void *)*a1 + 184))()) {
        goto LABEL_170;
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)((char *)v27 + *(void *)(*v27 - 544)) + 72))(&v73);
      long long v28 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(void *)v73.__r_.__value_.__l.__data_
                                                                            + 192))(v73.__r_.__value_.__r.__words[0]);
      int v29 = strcmp(v28, "lang");
      if (v73.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73.__r_.__value_.__l.__size_);
      }
      if (v29)
      {
LABEL_170:
        if (a4((uint64_t)a5, "  ** bad lang flag **", 21)) {
          goto LABEL_159;
        }
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    if ((IXMPOptions & 0x1F00) != 0)
    {
      if ((IXMPOptions & 0x200) != 0)
      {
        if ((IXMPOptions & 0x100) == 0) {
          goto LABEL_75;
        }
      }
      else if ((IXMPOptions & 0x1F00) == 0x100)
      {
        goto LABEL_75;
      }
      unsigned int v30 = a4((uint64_t)a5, "  ** bad comp flags **", 22);
      goto LABEL_74;
    }
  }
  else
  {
    BOOL v69 = 1;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 40))() == 2)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 248))(&v73);
    uint64_t v33 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
    uint64_t v34 = (*(uint64_t (**)(std::string::size_type))(*(void *)(v73.__r_.__value_.__r.__words[0]
                                                                        + *(void *)(*(void *)v73.__r_.__value_.__l.__data_
                                                                                    - 688))
                                                            + 560))(v73.__r_.__value_.__r.__words[0] + *(void *)(*(void *)v73.__r_.__value_.__l.__data_ - 688));
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 40))() == 4)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 240))(&v73);
    std::string v35 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
    uint64_t v34 = (*(uint64_t (**)(std::string::size_type))(*(void *)(v73.__r_.__value_.__r.__words[0]
                                                                        + *(void *)(*(void *)v73.__r_.__value_.__l.__data_
                                                                                    - 688))
                                                            + 560))(v73.__r_.__value_.__r.__words[0] + *(void *)(*(void *)v73.__r_.__value_.__l.__data_ - 688));
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  if (v34)
  {
    unsigned int v30 = a4((uint64_t)a5, "  ** bad children **", 20);
LABEL_74:
    if (v30) {
      goto LABEL_161;
    }
  }
LABEL_75:
  if (!a4((uint64_t)a5, "\n", 1))
  {
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 184))())
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 112))(&v73);
      std::string::size_type v36 = v73.__r_.__value_.__l.__size_;
      std::string::size_type v37 = v73.__r_.__value_.__r.__words[0];
      if (v73.__r_.__value_.__r.__words[0])
      {
        uint64_t v38 = 0;
        while (1)
        {
          uint64_t v68 = (std::__shared_weak_count *)v36;
          long long v80 = 0uLL;
          (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v37 + 48))(&v73, v37);
          long long v80 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
          char v39 = XMPUtils::GetIXMPOptions((uint64_t *)&v80);
          (*(void (**)(std::string *__return_ptr))(*(void *)v80 + 56))(&v73);
          long long v40 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
          char v67 = v39;
          if (v73.__r_.__value_.__r.__words[0])
          {
            (*(void (**)(std::string *__return_ptr))(*(void *)v80 + 56))(&v73);
            uint64_t v41 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
            (*(void (**)(std::string *__return_ptr))(*(void *)v73.__r_.__value_.__l.__data_ + 56))(&v73);
            BOOL v42 = v73.__r_.__value_.__r.__words[0] != *a1;
            if (v73.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73.__r_.__value_.__l.__size_);
            }
            if (v41) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
            }
          }
          else
          {
            BOOL v42 = 0;
          }
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          if (v42 && a4((uint64_t)a5, "** bad parent link => ", 22)) {
            break;
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)v80 + 72))(&v73);
          int v43 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(void *)v73.__r_.__value_.__l.__data_
                                                                                + 192))(v73.__r_.__value_.__r.__words[0]);
          int v44 = strcmp(v43, "[]");
          if (v73.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73.__r_.__value_.__l.__size_);
          }
          if (!v44 && a4((uint64_t)a5, "** bad qual name => ", 20)
            || (v67 & 0x20) == 0 && a4((uint64_t)a5, "** bad qual flag => ", 20))
          {
            break;
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)v80 + 72))(&v73);
          unint64_t v45 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(void *)v73.__r_.__value_.__l.__data_
                                                                                + 192))(v73.__r_.__value_.__r.__words[0]);
          int v46 = strcmp(v45, "lang");
          if (v73.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73.__r_.__value_.__l.__size_);
          }
          BOOL v47 = v38-- != 0;
          int v48 = v47 || v69;
          BOOL v49 = v46 || v48 == 0;
          if (!v49 && a4((uint64_t)a5, "** bad lang qual => ", 20)) {
            break;
          }
          DumpIXMPPropertyTree(&v80, (a2 + 2), 0, a4, a5);
          if (*((void *)&v80 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
          }
          (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v37 + 56))(&v73, v37);
          int v50 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
          std::string::size_type v37 = v73.__r_.__value_.__r.__words[0];
          if (v68) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v68);
          }
          std::string::size_type v36 = (std::string::size_type)v50;
          if (!v37) {
            goto LABEL_115;
          }
        }
        if (*((void *)&v80 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
        }
        long long v26 = v68;
        goto LABEL_159;
      }
      int v50 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
LABEL_115:
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
    }
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 40))() == 2)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 248))(&v73);
      int v51 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      (*(void (**)(std::string *__return_ptr))(*(void *)(v73.__r_.__value_.__r.__words[0]
                                                                    + *(void *)(*(void *)v73.__r_.__value_.__l.__data_
                                                                                - 688))
                                                        + 552))(&v73);
      char v52 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      std::string::size_type v53 = v73.__r_.__value_.__r.__words[0];
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
    }
    else
    {
      std::string::size_type v53 = 0;
      char v52 = 0;
    }
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 40))() == 4)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)*a1 + 240))(&v73);
      unint64_t v54 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      (*(void (**)(std::string *__return_ptr))(*(void *)(v73.__r_.__value_.__r.__words[0]
                                                                    + *(void *)(*(void *)v73.__r_.__value_.__l.__data_
                                                                                - 688))
                                                        + 552))(&v73);
      long long v26 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      std::string::size_type v53 = v73.__r_.__value_.__r.__words[0];
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
    }
    else
    {
      long long v26 = v52;
    }
    if (v53)
    {
      unsigned int v70 = a2 + 1;
      uint64_t v55 = 1;
      uint64_t v56 = v26;
      do
      {
        long long v80 = 0uLL;
        (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v53 + 48))(&v73, v53);
        long long v80 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
        char v57 = XMPUtils::GetIXMPOptions((uint64_t *)&v80);
        if (!(void)v80)
        {
          int v63 = 10;
          goto LABEL_150;
        }
        (*(void (**)(std::string *__return_ptr))(*(void *)v80 + 56))(&v73);
        std::string::size_type v58 = v73.__r_.__value_.__r.__words[0];
        uint64_t v59 = *a1;
        if (v73.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73.__r_.__value_.__l.__size_);
        }
        if ((v58 == v59 || !a4((uint64_t)a5, "** bad parent link => ", 22))
          && ((v57 & 0x20) == 0 || !a4((uint64_t)a5, "** bad qual flag => ", 20)))
        {
          if ((IXMPOptions & 0x200) != 0)
          {
            (*(void (**)(std::string *__return_ptr))(*(void *)v80 + 72))(&v73);
            int v64 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(void *)v73.__r_.__value_.__l.__data_
                                                                                  + 192))(v73.__r_.__value_.__r.__words[0]);
            int v65 = strcmp(v64, "[]");
            if (v73.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73.__r_.__value_.__l.__size_);
            }
            uint64_t v62 = v55;
            if (v65) {
              goto LABEL_145;
            }
            unsigned int v66 = a4((uint64_t)a5, "** bad item name => ", 20);
            uint64_t v62 = v55;
            if (!v66) {
              goto LABEL_145;
            }
          }
          else
          {
            (*(void (**)(std::string *__return_ptr))(*(void *)v80 + 72))(&v73);
            uint64_t v60 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(void *)v73.__r_.__value_.__l.__data_
                                                                                  + 192))(v73.__r_.__value_.__r.__words[0]);
            int v61 = strcmp(v60, "[]");
            if (v73.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v73.__r_.__value_.__l.__size_);
            }
            if (v61 || !a4((uint64_t)a5, "** bad field name => ", 21))
            {
              uint64_t v62 = 0;
LABEL_145:
              DumpIXMPPropertyTree(&v80, v70, v62, a4, a5);
              int v63 = 0;
              goto LABEL_150;
            }
          }
        }
        int v63 = 1;
LABEL_150:
        if (*((void *)&v80 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
        }
        if (v63 != 10 && v63)
        {
          long long v26 = v56;
          break;
        }
        (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v53 + 56))(&v73, v53);
        long long v26 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
        std::string::size_type v53 = v73.__r_.__value_.__r.__words[0];
        if (v56) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v56);
        }
        ++v55;
        uint64_t v56 = v26;
      }
      while (v53);
    }
LABEL_159:
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
  }
LABEL_161:
  if (SHIBYTE(v75) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete(v76);
  }
  if (*((void *)&v79 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
  }
}

void sub_188829F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37)
{
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta2::SetErrorCallback(XMPMeta2 *this, unsigned __int8 (*a2)(BOOL (*)(void *, unsigned __int8, int, const char *), void *, unsigned __int8, int, const char *), BOOL (*a3)(void *, unsigned __int8, int, const char *), void *a4, int a5)
{
  if (!a2) {
    XMPMeta2::SetErrorCallback();
  }
  *((_DWORD *)this + 91) = 0;
  *((unsigned char *)this + 368) = 0;
  *((void *)this + 47) = a2;
  *((void *)this + 48) = a3;
  *((void *)this + 49) = a4;
  *((_DWORD *)this + 90) = a5;
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**((void **)this + 54) + 232))(*((void *)this + 54))
                           + 288);

  return v5();
}

uint64_t XMPMeta2::ResetErrorCallbackLimit(XMPMeta2 *this, int a2)
{
  *((_DWORD *)this + 90) = a2;
  *((_DWORD *)this + 91) = 0;
  *((unsigned char *)this + 368) = 0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**((void **)this + 54) + 232))(*((void *)this + 54))
                           + 288);

  return v2();
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

_OWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v12 = 0;
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *unint64_t v9 = 0;
    *((unsigned char *)v7 + 56) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void XMPMeta2::GetProperty()
{
  __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 160, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 161, "(propValue != 0) && (valueSize != 0) && (options != 0)");
}

void XMPMeta2::CountArrayItems()
{
  __assert_rtn("CountArrayItems", "XMPMeta2-GetSet.cpp", 358, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta2::DoesPropertyExist()
{
  __assert_rtn("DoesPropertyExist", "XMPMeta2-GetSet.cpp", 437, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta2::SetProperty()
{
  __assert_rtn("SetProperty", "XMPMeta2-GetSet.cpp", 459, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta2::SetArrayItem()
{
  __assert_rtn("SetArrayItem", "XMPMeta2-GetSet.cpp", 485, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta2::AppendArrayItem()
{
  __assert_rtn("AppendArrayItem", "XMPMeta2-GetSet.cpp", 516, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta2::SetQualifier()
{
  __assert_rtn("SetQualifier", "XMPMeta2-GetSet.cpp", 572, "(schemaNS != 0) && (propName != 0) && (qualNS != 0) && (qualName != 0)");
}

void XMPMeta2::DeleteProperty()
{
  __assert_rtn("DeleteProperty", "XMPMeta2-GetSet.cpp", 615, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta2::GetLocalizedText()
{
  __assert_rtn("GetLocalizedText", "XMPMeta2-GetSet.cpp", 812, "(actualLang != 0) && (langSize != 0)");
}

{
  __assert_rtn("GetLocalizedText", "XMPMeta2-GetSet.cpp", 813, "(itemValue != 0) && (valueSize != 0) && (options != 0)");
}

{
  __assert_rtn("GetLocalizedText", "XMPMeta2-GetSet.cpp", 811, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta2::DeleteLocalizedText()
{
  __assert_rtn("DeleteLocalizedText", "XMPMeta2-GetSet.cpp", 853, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta2::SetLocalizedText()
{
  __assert_rtn("SetLocalizedText", "XMPMeta2-GetSet.cpp", 957, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta2::DumpObject()
{
  __assert_rtn("DumpObject", "XMPMeta2-GetSet.cpp", 1253, "outProc != 0");
}

void XMPMeta2::SetErrorCallback()
{
  __assert_rtn("SetErrorCallback", "XMPMeta2-GetSet.cpp", 1326, "wrapperProc != 0");
}

void PNG_MetaHandlerCTor(XMPFiles *a1)
{
}

void sub_18882A7C8(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C4021871BE3);
  _Unwind_Resume(a1);
}

BOOL PNG_CheckFormat(int a1, uint64_t a2, uint64_t a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  if (a1 != 1347307296) {
    PNG_CheckFormat();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3) < 8) {
    return 0;
  }
  v5[0] = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)a3 + 16))(a3, 0, 0);
  (**(void (***)(uint64_t, void *, uint64_t, void))a3)(a3, v5, 8, 0);
  return v5[0] == 0xA1A0A0D474E5089;
}

void XMPFileHandler::XMPFileHandler(XMPFileHandler *this)
{
  *(void *)this = &unk_1ED4E2FA8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 1;
  *(_DWORD *)((char *)this + 21) = 0;
  *((void *)this + 4) = -1;
  *((_DWORD *)this + 10) = -1;
  *(void *)((char *)this + 44) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  TXMPMeta<std::string>::TXMPMeta((char *)this + 80);
}

void sub_18882A9A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void XMPFileHandler::~XMPFileHandler(void **this)
{
  *this = &unk_1ED4E2FA8;
  TXMPMeta<std::string>::~TXMPMeta(this + 10);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
}

void PNG_MetaHandler::~PNG_MetaHandler(void **this)
{
  XMPFileHandler::~XMPFileHandler(this);

  JUMPOUT(0x18C11C0E0);
}

uint64_t PNG_MetaHandler::CacheFileData(PNG_MetaHandler *this)
{
  *((unsigned char *)this + 21) = 0;
  uint64_t result = *(void *)(*((void *)this + 1) + 232);
  if (result)
  {
    uint64_t result = PNG_Support::FindAndReadXMPChunk(result, (uint64_t)this + 56);
    if (result)
    {
      if (*((char *)this + 79) < 0) {
        uint64_t v3 = *((void *)this + 8);
      }
      else {
        LODWORD(v3) = *((unsigned __int8 *)this + 79);
      }
      *((_DWORD *)this + 10) = v3;
      *((unsigned char *)this + 21) = 1;
    }
  }
  return result;
}

void PNG_MetaHandler::ProcessXMP(PNG_MetaHandler *this)
{
  *((unsigned char *)this + 22) = 1;
  uint64_t v2 = *((unsigned __int8 *)this + 79);
  if (*((char *)this + 79) < 0)
  {
    if (!*((void *)this + 8)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 79))
  {
    return;
  }
  if (!*((unsigned char *)this + 21)) {
    PNG_MetaHandler::ProcessXMP();
  }
  if ((v2 & 0x80) != 0)
  {
    uint64_t v3 = (char *)*((void *)this + 7);
    uint64_t v2 = *((void *)this + 8);
  }
  else
  {
    uint64_t v3 = (char *)this + 56;
  }
  TXMPMeta<std::string>::ParseFromBuffer((uint64_t)this + 80, (uint64_t)v3, v2, 0);
  *((unsigned char *)this + 21) = 1;
}

void PNG_MetaHandler::UpdateFile(PNG_MetaHandler *this, int a2)
{
  if (*((unsigned char *)this + 23))
  {
    if (a2)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 2;
      exception[1] = "PNG_MetaHandler::UpdateFile: Safe update not supported";
      *((unsigned char *)exception + 16) = 0;
    }
    if (*((char *)this + 79) < 0)
    {
      uint64_t v3 = (char *)*((void *)this + 7);
      uint64_t v4 = *((void *)this + 8);
      if (!v4) {
        return;
      }
    }
    else
    {
      uint64_t v3 = (char *)this + 56;
      uint64_t v4 = *((unsigned __int8 *)this + 79);
      if (!*((unsigned char *)this + 79)) {
        return;
      }
    }
    uint64_t v5 = *(void *)(*((void *)this + 1) + 232);
    if (v5)
    {
      uint64_t v9 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      uint64_t v7 = &unk_1ED4E61B0;
      uint64_t v8 = 0;
      uint64_t v10 = &unk_1ED4E61D0;
      DWORD2(v11) = 0;
      BYTE8(v12) = 0;
      memset(v13, 0, sizeof(v13));
      if (PNG_Support::OpenPNG(v5, (uint64_t)&v7))
      {
        if (v9 >= v4)
        {
          PNG_Support::WriteBuffer(v5, &v8, v4, (uint64_t)v3);
          PNG_Support::UpdateChunkCRC();
        }
        PNG_MetaHandler::SafeWriteFile(this);
        *((unsigned char *)this + 23) = 0;
      }
      uint64_t v7 = &unk_1ED4E61B0;
      uint64_t v14 = (void **)v13;
      std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](&v14);
    }
  }
}

void sub_18882ACA0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 72) = v1;
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t PNG_MetaHandler::SafeWriteFile(PNG_MetaHandler *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 232);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Failure creating PNG temp file";
    *((unsigned char *)exception + 16) = 0;
  }
  (*(void (**)(PNG_MetaHandler *, uint64_t))(*(void *)this + 80))(this, v3);
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  return 1;
}

void PNG_Support::ChunkState::~ChunkState(PNG_Support::ChunkState *this)
{
  *(void *)this = &unk_1ED4E61B0;
  uint64_t v1 = (void **)((char *)this + 64);
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_1ED4E61B0;
  uint64_t v2 = (void **)((char *)this + 64);
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x18C11C0E0](this, 0x10A1C40219FC1CALL);
}

void PNG_MetaHandler::WriteTempFile(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 232);
  void v11[2] = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  v11[0] = &unk_1ED4E61B0;
  v11[1] = 0;
  v11[3] = &unk_1ED4E61D0;
  DWORD2(v12) = 0;
  BYTE8(v13) = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  if (PNG_Support::OpenPNG(v3, (uint64_t)v11))
  {
    (*(void (**)(uint64_t, void))(*(void *)a2 + 32))(a2, 0);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 8))(a2, "\x89PNG\r\n\x1A\n", 8);
    uint64_t v4 = v14;
    for (uint64_t i = v15; v4 != i; v4 += 40)
    {
      *(void *)&unsigned char v10[24] = 0;
      uint64_t v9 = (void **)&unk_1ED4E61D0;
      long long v6 = *(_OWORD *)(v4 + 8);
      *(_OWORD *)&v10[9] = *(_OWORD *)(v4 + 17);
      *(_OWORD *)uint64_t v10 = v6;
      if (!v10[24])
      {
        if ((PNG_Support::CopyChunk(v3, a2, (uint64_t)&v9) & 1) == 0)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 9;
          exception[1] = "PNG chunk copy failed.";
          *((unsigned char *)exception + 16) = 0;
        }
        if (PNG_Support::CheckIHDRChunkHeader((PNG_Support *)&v9, v7)) {
          PNG_Support::WriteXMPChunk();
        }
      }
    }
  }
  v11[0] = &unk_1ED4E61B0;
  uint64_t v9 = (void **)&v14;
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_18882B000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void PNG_Support::ChunkData::~ChunkData(PNG_Support::ChunkData *this)
{
}

void std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = v4 - 40;
      uint64_t v7 = v4 - 40;
      uint64_t v8 = v4 - 40;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 40;
        (*v9)(v7);
        v6 -= 40;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void PNG_CheckFormat()
{
  __assert_rtn("PNG_CheckFormat", "PNG_Handler.cpp", 48, "format == kXMP_PNGFile");
}

void PNG_MetaHandler::ProcessXMP()
{
}

void RDF_Parser::FixupQualifiedNode(RDF_Parser *this, XMP_Node *a2)
{
  if ((*((unsigned char *)a2 + 9) & 1) == 0
    || (v3 = (uint64_t *)*((void *)a2 + 9), uint64_t v4 = (uint64_t *)*((void *)a2 + 10), v3 == v4))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    long long v93 = "XMP_Enforce failed: ((xmpParent->options & kXMP_PropValueIsStruct) && (! xmpParent->children.empty())) in /Lib"
          "rary/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ParseRDF.cpp at line 613";
    goto LABEL_125;
  }
  uint64_t v6 = *v3;
  uint64_t v7 = *v3 + 16;
  int v8 = *(char *)(*v3 + 39);
  if (v8 < 0)
  {
    if (*(void *)(v6 + 24) != 9)
    {
LABEL_124:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 7;
      long long v93 = "XMP_Enforce failed: (valueNode->name == \"rdf:value\") in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-"
            "Toolkit-SDK/XMPCore/source/ParseRDF.cpp at line 616";
LABEL_125:
      exception[1] = v93;
      *((unsigned char *)exception + 16) = 0;
    }
    uint64_t v7 = *(void *)v7;
  }
  else if (v8 != 9)
  {
    goto LABEL_124;
  }
  uint64_t v9 = *(void *)v7;
  int v10 = *(unsigned __int8 *)(v7 + 8);
  if (v9 != 0x756C61763A666472 || v10 != 101) {
    goto LABEL_124;
  }
  long long v12 = (void **)((char *)a2 + 96);
  std::vector<_MPEntry *>::reserve((void **)a2 + 12, ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3)+ v4- v3+ ((uint64_t)(*(void *)(v6 + 104) - *(void *)(v6 + 96)) >> 3));
  uint64_t v14 = *(void *)(v6 + 96);
  uint64_t v13 = *(void *)(v6 + 104);
  if ((*(unsigned char *)(v6 + 8) & 0x40) == 0)
  {
    uint64_t v15 = 0;
    goto LABEL_47;
  }
  uint64_t v16 = *(uint64_t **)(v6 + 96);
  if ((*((unsigned char *)a2 + 8) & 0x40) != 0)
  {
    uint64_t v95 = 203;
    uint64_t v96 = "Duplicate xml:lang for rdf:value element";
    uint64_t v97 = 0;
    GenericErrorCallback::NotifyClient(*(void *)this, 0, (unsigned int *)&v95, 0);
    uint64_t v17 = *v12;
    uint64_t v18 = *(void *)*v12;
    int v19 = (void *)(v18 + 16);
    int v20 = *(char *)(v18 + 39);
    if (v20 < 0)
    {
      if (*(void *)(v18 + 24) != 8) {
        goto LABEL_121;
      }
      int v19 = (void *)*v19;
    }
    else if (v20 != 8)
    {
LABEL_121:
      RDF_Parser::FixupQualifiedNode();
    }
    if (*v19 != 0x676E616C3A6C6D78) {
      goto LABEL_121;
    }
    long long v21 = (char *)*((void *)a2 + 13);
    int64_t v22 = v21 - (char *)(v17 + 1);
    if (v21 != (char *)(v17 + 1)) {
      memmove(*v12, v17 + 1, v21 - (char *)(v17 + 1));
    }
    *((void *)a2 + 13) = (char *)v17 + v22;
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    uint64_t v16 = *(uint64_t **)(v6 + 96);
  }
  uint64_t v23 = *v16;
  uint64_t v95 = v23;
  uint64_t v24 = (void *)(v23 + 16);
  int v25 = *(char *)(v23 + 39);
  if (v25 < 0)
  {
    if (*(void *)(v23 + 24) != 8) {
      goto LABEL_120;
    }
    uint64_t v24 = (void *)*v24;
  }
  else if (v25 != 8)
  {
LABEL_120:
    RDF_Parser::FixupQualifiedNode();
  }
  if (*v24 != 0x676E616C3A6C6D78) {
    goto LABEL_120;
  }
  *(void *)(v23 + 64) = a2;
  *((_DWORD *)a2 + 2) |= 0x40u;
  *(_DWORD *)(v6 + 8) &= ~0x40u;
  long long v26 = (uint64_t *)*((void *)a2 + 12);
  if (v26 == *((uint64_t **)a2 + 13))
  {
    unint64_t v27 = *((void *)a2 + 14);
    if ((unint64_t)v26 >= v27)
    {
      unint64_t v29 = v27 - (void)v26;
      unint64_t v30 = (uint64_t)(v27 - (void)v26) >> 2;
      if (v30 <= 1) {
        unint64_t v30 = 1;
      }
      if (v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      long long v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a2 + 112, v31);
      uint64_t v34 = &v32[v33];
      *long long v32 = v95;
      long long v28 = v32 + 1;
      std::string::size_type v36 = (char *)*((void *)a2 + 12);
      std::string v35 = (char *)*((void *)a2 + 13);
      if (v35 != v36)
      {
        do
        {
          uint64_t v37 = *((void *)v35 - 1);
          v35 -= 8;
          *--long long v32 = v37;
        }
        while (v35 != v36);
        std::string v35 = (char *)*v12;
      }
      *((void *)a2 + 12) = v32;
      *((void *)a2 + 13) = v28;
      *((void *)a2 + 14) = v34;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      uint64_t *v26 = v23;
      long long v28 = v26 + 1;
    }
    *((void *)a2 + 13) = v28;
  }
  else
  {
    std::vector<XMP_Node *>::insert((uint64_t)a2 + 96, *((char **)a2 + 12), (char *)&v95);
  }
  **(void **)(v6 + 96) = 0;
  uint64_t v15 = 1;
LABEL_47:
  for (uint64_t i = (v13 - v14) >> 3; v15 != i; ++v15)
  {
    uint64_t v39 = *(void *)(*(void *)(v6 + 96) + 8 * v15);
    MD5_CTX __dst = 0;
    long long v40 = (char *)(v39 + 16);
    if (*(char *)(v39 + 39) < 0) {
      long long v40 = *(char **)v40;
    }
    if (FindQualifierNode((uint64_t)a2, v40, 0, &__dst))
    {
      uint64_t v95 = 203;
      uint64_t v96 = "Duplicate qualifier node";
      uint64_t v97 = 0;
      GenericErrorCallback::NotifyClient(*(void *)this, 0, (unsigned int *)&v95, 0);
      uint64_t v41 = (char *)__dst;
      uint64_t v42 = *(void *)__dst;
      int v43 = (unsigned char *)*((void *)a2 + 13);
      int64_t v44 = v43 - ((unsigned char *)__dst + 8);
      if (v43 != (char *)__dst + 8) {
        memmove(__dst, (char *)__dst + 8, v43 - ((unsigned char *)__dst + 8));
      }
      *((void *)a2 + 13) = &v41[v44];
      if (v42) {
        (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
      }
    }
    *(void *)(v39 + 64) = a2;
    int v46 = (char *)*((void *)a2 + 13);
    unint64_t v45 = *((void *)a2 + 14);
    if ((unint64_t)v46 >= v45)
    {
      uint64_t v48 = (v46 - (unsigned char *)*v12) >> 3;
      if ((unint64_t)(v48 + 1) >> 61) {
LABEL_122:
      }
        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
      uint64_t v49 = v45 - (void)*v12;
      uint64_t v50 = v49 >> 2;
      if (v49 >> 2 <= (unint64_t)(v48 + 1)) {
        uint64_t v50 = v48 + 1;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      if (v51) {
        char v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a2 + 112, v51);
      }
      else {
        char v52 = 0;
      }
      std::string::size_type v53 = &v52[8 * v48];
      *(void *)std::string::size_type v53 = v39;
      BOOL v47 = v53 + 8;
      uint64_t v55 = (char *)*((void *)a2 + 12);
      unint64_t v54 = (char *)*((void *)a2 + 13);
      if (v54 != v55)
      {
        do
        {
          uint64_t v56 = *((void *)v54 - 1);
          v54 -= 8;
          *((void *)v53 - 1) = v56;
          v53 -= 8;
        }
        while (v54 != v55);
        unint64_t v54 = (char *)*v12;
      }
      *((void *)a2 + 12) = v53;
      *((void *)a2 + 13) = v47;
      *((void *)a2 + 14) = &v52[8 * v51];
      if (v54) {
        operator delete(v54);
      }
    }
    else
    {
      *(void *)int v46 = v39;
      BOOL v47 = v46 + 8;
    }
    *((void *)a2 + 13) = v47;
    *(void *)(*(void *)(v6 + 96) + 8 * v15) = 0;
  }
  *(void *)(v6 + 104) = *(void *)(v6 + 96);
  uint64_t v57 = *((void *)a2 + 10) - *((void *)a2 + 9);
  if (v57 != 8)
  {
    uint64_t v58 = v57 >> 3;
    for (uint64_t j = 1; j != v58; ++j)
    {
      MD5_CTX __dst = 0;
      uint64_t v60 = *(void *)(*((void *)a2 + 9) + 8 * j);
      MD5_CTX __dst = (void *)v60;
      int v61 = *(char *)(v60 + 39);
      if (v61 < 0)
      {
        uint64_t v62 = *(char **)(v60 + 16);
        if (*(void *)(v60 + 24) == 8)
        {
LABEL_76:
          BOOL v63 = *(void *)v62 == 0x676E616C3A6C6D78;
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v62 = (char *)(v60 + 16);
        if (v61 == 8) {
          goto LABEL_76;
        }
      }
      BOOL v63 = 0;
LABEL_79:
      if (FindQualifierNode((uint64_t)a2, v62, 0, 0))
      {
        uint64_t v96 = "Duplicate qualifier";
        uint64_t v97 = 0;
        uint64_t v95 = 203;
        GenericErrorCallback::NotifyClient(*(void *)this, 0, (unsigned int *)&v95, 0);
        if (__dst) {
          (*(void (**)(void *))(*(void *)__dst + 8))(__dst);
        }
      }
      else
      {
        int v64 = __dst;
        *((_DWORD *)__dst + 2) |= 0x20u;
        v64[8] = a2;
        if (!v63)
        {
          unsigned int v66 = v64 + 2;
          int v67 = *((char *)v64 + 39);
          if (v67 < 0)
          {
            if (v64[3] != 8)
            {
LABEL_92:
              BOOL v69 = (char *)*((void *)a2 + 13);
              unint64_t v68 = *((void *)a2 + 14);
              if ((unint64_t)v69 >= v68)
              {
                uint64_t v71 = (v69 - (unsigned char *)*v12) >> 3;
                if ((unint64_t)(v71 + 1) >> 61) {
                  goto LABEL_122;
                }
                uint64_t v72 = v68 - (void)*v12;
                uint64_t v73 = v72 >> 2;
                if (v72 >> 2 <= (unint64_t)(v71 + 1)) {
                  uint64_t v73 = v71 + 1;
                }
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v74 = v73;
                }
                if (v74)
                {
                  std::string::size_type v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a2 + 112, v74);
                  int v64 = __dst;
                }
                else
                {
                  std::string::size_type v75 = 0;
                }
                long long v76 = &v75[8 * v71];
                *(void *)long long v76 = v64;
                unsigned int v70 = v76 + 8;
                uint64_t v78 = (char *)*((void *)a2 + 12);
                size_t v77 = (char *)*((void *)a2 + 13);
                if (v77 != v78)
                {
                  do
                  {
                    uint64_t v79 = *((void *)v77 - 1);
                    v77 -= 8;
                    *((void *)v76 - 1) = v79;
                    v76 -= 8;
                  }
                  while (v77 != v78);
                  size_t v77 = (char *)*v12;
                }
                *((void *)a2 + 12) = v76;
                *((void *)a2 + 13) = v70;
                *((void *)a2 + 14) = &v75[8 * v74];
                if (v77) {
                  operator delete(v77);
                }
              }
              else
              {
                *(void *)BOOL v69 = v64;
                unsigned int v70 = v69 + 8;
              }
              *((void *)a2 + 13) = v70;
              goto LABEL_109;
            }
            unsigned int v66 = (void *)*v66;
          }
          else if (v67 != 8)
          {
            goto LABEL_92;
          }
          if (*v66 == 0x657079743A666472) {
            *((_DWORD *)a2 + 2) |= 0x80u;
          }
          goto LABEL_92;
        }
        *((_DWORD *)a2 + 2) |= 0x40u;
        int v65 = (char *)*((void *)a2 + 12);
        if (v65 == *((char **)a2 + 13)) {
          goto LABEL_92;
        }
        std::vector<XMP_Node *>::insert((uint64_t)a2 + 96, v65, (char *)&__dst);
      }
LABEL_109:
      *(void *)(*((void *)a2 + 9) + 8 * j) = 0;
    }
  }
  int v80 = *((_DWORD *)a2 + 2);
  if (*((void *)a2 + 12) != *((void *)a2 + 13))
  {
    v80 |= 0x10u;
    *((_DWORD *)a2 + 2) = v80;
  }
  if ((v80 & 0x10000100) == 0) {
    RDF_Parser::FixupQualifiedNode();
  }
  unsigned int v81 = v80 & 0xEFFFFEFF;
  *((_DWORD *)a2 + 2) = v81;
  *((_DWORD *)a2 + 2) = *(_DWORD *)(v6 + 8) | v81;
  uint64_t v82 = *((void *)a2 + 7);
  long long v83 = *(_OWORD *)((char *)a2 + 40);
  uint64_t v84 = *(void *)(v6 + 56);
  *(_OWORD *)((char *)a2 + 40) = *(_OWORD *)(v6 + 40);
  *((void *)a2 + 7) = v84;
  *(_OWORD *)(v6 + 40) = v83;
  *(void *)(v6 + 56) = v82;
  **((void **)a2 + 9) = 0;
  uint64_t v85 = *((void *)a2 + 9);
  *((void *)a2 + 9) = *(void *)(v6 + 72);
  *(void *)(v6 + 72) = v85;
  uint64_t v86 = *((void *)a2 + 10);
  *((void *)a2 + 10) = *(void *)(v6 + 80);
  *(void *)(v6 + 80) = v86;
  uint64_t v87 = *((void *)a2 + 11);
  *((void *)a2 + 11) = *(void *)(v6 + 88);
  *(void *)(v6 + 88) = v87;
  uint64_t v88 = (uint64_t *)*((void *)a2 + 9);
  uint64_t v89 = *((void *)a2 + 10) - (void)v88;
  if (!v89) {
    goto LABEL_117;
  }
  uint64_t v90 = v89 >> 3;
  do
  {
    uint64_t v91 = *v88++;
    *(void *)(v91 + 64) = a2;
    --v90;
  }
  while (v90);
  if (v6) {
LABEL_117:
  }
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

void RDF_Parser::ParseTypeResourcePropertyElement(RDF_Parser *this, XMP_Node *a2, const XML_Node ***a3, int a4)
{
  uint64_t v6 = RDF_Parser::AddChildNode(this, a2, (const XML_Node *)a3, "", a4);
  if (v6)
  {
    uint64_t v7 = (XMP_Node *)v6;
    *(_DWORD *)(v6 + 8) |= 0x100u;
    int v8 = a3[13];
    for (uint64_t i = a3[14]; v8 != i; ++v8)
    {
      int v10 = *v8;
      long long v11 = (unsigned __int16 *)((char *)*v8 + 40);
      if (*((char *)*v8 + 63) < 0)
      {
        uint64_t v14 = *((void *)v10 + 6);
        if (v14 == 8)
        {
          if (**(void **)v11 == 0x676E616C3A6C6D78) {
            goto LABEL_33;
          }
          uint64_t v14 = *((void *)v10 + 6);
        }
        else if (v14 == 13 {
               && **(void **)v11 == 0x737261703A666472
        }
               && *(void *)(*(void *)v11 + 5) == 0x6570795465737261)
        {
          continue;
        }
        if (v14 == 6)
        {
          long long v11 = *(unsigned __int16 **)v11;
LABEL_26:
          int v16 = *(_DWORD *)v11;
          int v17 = v11[2];
          if (v16 == 979788914 && v17 == 17481) {
            continue;
          }
        }
      }
      else
      {
        int v12 = *((unsigned __int8 *)*v8 + 63);
        if (v12 == 6) {
          goto LABEL_26;
        }
        if (v12 == 8)
        {
          if (*(void *)v11 == 0x676E616C3A6C6D78)
          {
LABEL_33:
            RDF_Parser::AddQualifierNode(this, v7, v10);
            continue;
          }
        }
        else if (v12 == 13 {
               && *(void *)v11 == 0x737261703A666472
        }
               && *(void *)((char *)*v8 + 45) == 0x6570795465737261)
        {
          continue;
        }
      }
      v19[1] = "Invalid attribute for ParseTypeResource property element";
      void v19[2] = 0;
      v19[0] = 202;
      GenericErrorCallback::NotifyClient(*(void *)this, 0, (unsigned int *)v19, 0);
    }
    RDF_Parser::PropertyElementList(this, v7, (const XML_Node *)a3, 0);
    if ((*((unsigned char *)v7 + 11) & 0x10) != 0) {
      RDF_Parser::FixupQualifiedNode(this, v7);
    }
  }
}

void RDF_Parser::AddChildNode()
{
  __assert_rtn("AddChildNode", "ParseRDF.cpp", 472, "xmpParent->parent == 0");
}

void RDF_Parser::FixupQualifiedNode()
{
}

{
  __assert_rtn("FixupQualifiedNode", "ParseRDF.cpp", 637, "langQual->name == \"xml:lang\"");
}

{
  __assert_rtn("FixupQualifiedNode", "ParseRDF.cpp", 631, "xmpParent->qualifiers[0]->name == \"xml:lang\"");
}

void RDF_Parser::NodeElementList()
{
}

void RDF_Parser::NodeElementAttrs()
{
  __assert_rtn("NodeElementAttrs", "ParseRDF.cpp", 853, "xmpParent->parent == 0");
}

void XMPUtils::ApplyTemplate_v2(XMPUtils *this, XMPMeta *a2, const XMPMeta *a3)
{
  if (this)
  {
    unsigned int v3 = a3;
    if (!v6) {
      __cxa_bad_cast();
    }
    uint64_t v7 = v6;
    double DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v64);
    uint64_t v9 = (*(uint64_t (**)(void, double))(*(void *)v64 + 128))(v64, DefaultNameSpacePrefixMap);
    if (*((void *)&v64 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
    }
    if ((v3 & 0x10) != 0)
    {
      v66[0] = 0uLL;
      int v10 = (void *)v5[50];
      if (v10) {
        long long v11 = (char *)v10 + *(void *)(*v10 - 544);
      }
      else {
        long long v11 = 0;
      }
      uint64_t v12 = v5[51];
      *(void *)&long long v64 = v11;
      *((void *)&v64 + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      XMPUtils::GetNodeChildIterator(&v64, v66);
      if (*((void *)&v64 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
      }
      long long v64 = 0uLL;
      uint64_t v65 = 0;
      uint64_t v13 = *(void **)&v66[0];
      if (*(void *)&v66[0])
      {
        while (1)
        {
          long long v63 = 0uLL;
          (*(void (**)(void **__return_ptr))(*(void *)v13 + 48))(v61);
          __n128 v14 = *(__n128 *)v61;
          long long v63 = *(_OWORD *)v61;
          v61[0] = 0;
          v61[1] = 0;
          int64_t v62 = 0;
          (*(void (**)(std::string *__return_ptr, __n128))(*(void *)v14.n128_u64[0] + 88))(&v59, v14);
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v9 + 40))(&__p, v9, &v59);
          uint64_t v15 = (char *)(*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_
                                                                          + 192))(__p.__r_.__value_.__r.__words[0]);
          std::string::basic_string[abi:ne180100]<0>(v61, v15);
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          if (v59.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.__r_.__value_.__l.__size_);
          }
          memset(&__p, 0, sizeof(__p));
          if (v62 >= 0) {
            size_t v16 = HIBYTE(v62);
          }
          else {
            size_t v16 = (size_t)v61[1];
          }
          memset(&v59, 0, sizeof(v59));
          std::string::basic_string[abi:ne180100]((uint64_t)&v59, v16 + 1);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v17 = &v59;
          }
          else {
            int v17 = (std::string *)v59.__r_.__value_.__r.__words[0];
          }
          if (v16)
          {
            if (v62 >= 0) {
              uint64_t v18 = v61;
            }
            else {
              uint64_t v18 = (void **)v61[0];
            }
            memmove(v17, v18, v16);
          }
          *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 58;
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 72))(&v57);
          int v19 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(void *)v57 + 192))(v57);
          int v20 = std::string::append(&v59, v19);
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v59.__r_.__value_.__l.__data_);
            if ((v3 & 1) == 0)
            {
LABEL_35:
              (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 88))(&v57);
              int64_t v22 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v57 + 192))(v57);
              std::string::basic_string[abi:ne180100]<0>(&v59, v22);
              BOOL v23 = IsInternalProperty((unint64_t *)&v59, (unint64_t *)&__p);
              if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v59.__r_.__value_.__l.__data_);
              }
              if (v58) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v58);
              }
              if (v23) {
                goto LABEL_48;
              }
            }
          }
          else if ((v3 & 1) == 0)
          {
            goto LABEL_35;
          }
          uint64_t v24 = v7[50] + *(void *)(*(void *)v7[50] - 792);
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 688))(v24);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 88))(&v57);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 72))(&v55);
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(void *)v25 + 736))(&v59, v25, &v57, &v55);
          std::string::size_type v26 = v59.__r_.__value_.__r.__words[0];
          if (v59.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.__r_.__value_.__l.__size_);
          }
          if (v56) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          if (!v26) {
            std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::push_back[abi:ne180100]((uint64_t *)&v64, &v63);
          }
LABEL_48:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v62) < 0) {
            operator delete(v61[0]);
          }
          if (*((void *)&v63 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
          }
          (*(void (**)(void **__return_ptr))(**(void **)&v66[0] + 56))(v61);
          unint64_t v27 = (std::__shared_weak_count *)*((void *)&v66[0] + 1);
          v66[0] = *(_OWORD *)v61;
          if (v27)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
            uint64_t v13 = *(void **)&v66[0];
            if (!*(void *)&v66[0]) {
              goto LABEL_58;
            }
          }
          else
          {
            uint64_t v13 = v61[0];
            if (!v61[0])
            {
LABEL_58:
              if (*((void *)&v64 + 1) != (void)v64)
              {
                uint64_t v28 = 0;
                unint64_t v29 = 0;
                do
                {
                  uint64_t v30 = v5[50] + *(void *)(*(void *)v5[50] - 792);
                  uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 688))(v30);
                  (*(void (**)(void **__return_ptr))(**(void **)(v64 + v28) + 88))(v61);
                  (*(void (**)(std::string *__return_ptr))(**(void **)(v64 + v28) + 72))(&__p);
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, std::string *))(*(void *)v31 + 744))(&v53, v31, v61, &__p);
                  if (v54) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                  }
                  if (__p.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                  }
                  if (v61[1]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v61[1]);
                  }
                  ++v29;
                  v28 += 16;
                }
                while (v29 < (uint64_t)(*((void *)&v64 + 1) - v64) >> 4);
              }
              break;
            }
          }
        }
      }
      v61[0] = &v64;
      std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
      if (*((void *)&v66[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66[0] + 1));
      }
    }
    if (((v3 & 6) != 0) | ((v3 & 8) >> 3))
    {
      v66[0] = 0uLL;
      long long v32 = (void *)v7[50];
      if (v32) {
        uint64_t v33 = (char *)v32 + *(void *)(*v32 - 544);
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = v7[51];
      *(void *)&long long v64 = v33;
      *((void *)&v64 + 1) = v34;
      if (v34) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      }
      XMPUtils::GetNodeChildIterator(&v64, v66);
      if (*((void *)&v64 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
      }
      uint64_t v35 = *(void *)&v66[0];
      if (*(void *)&v66[0])
      {
        while (1)
        {
          (*(void (**)(long long *__return_ptr))(*(void *)v35 + 48))(&v64);
          long long v36 = v64;
          long long v64 = 0uLL;
          uint64_t v65 = 0;
          (*(void (**)(std::string *__return_ptr, void))(*(void *)v36 + 88))(&__p, v36);
          (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v9 + 40))(v61, v9, &__p);
          uint64_t v37 = (char *)(*(uint64_t (**)(void *))(*(void *)v61[0] + 192))(v61[0]);
          std::string::basic_string[abi:ne180100]<0>(&v64, v37);
          if (v61[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v61[1]);
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          v61[0] = 0;
          v61[1] = 0;
          int64_t v62 = 0;
          if (v65 >= 0) {
            size_t v38 = HIBYTE(v65);
          }
          else {
            size_t v38 = *((void *)&v64 + 1);
          }
          memset(&__p, 0, sizeof(__p));
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v38 + 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (v38)
          {
            if (v65 >= 0) {
              long long v40 = &v64;
            }
            else {
              long long v40 = (long long *)v64;
            }
            memmove(p_p, v40, v38);
          }
          *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v38) = 58;
          (*(void (**)(std::string *__return_ptr, void))(*(void *)v36 + 72))(&v59, v36);
          uint64_t v41 = (const std::string::value_type *)(*(uint64_t (**)(std::string::size_type))(*(void *)v59.__r_.__value_.__l.__data_ + 192))(v59.__r_.__value_.__r.__words[0]);
          uint64_t v42 = std::string::append(&__p, v41);
          long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          int64_t v62 = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)int v61 = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          if (v59.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          memset(&__p, 0, sizeof(__p));
          (*(void (**)(std::string *__return_ptr, void))(*(void *)v36 + 88))(&v59, v36);
          int64_t v44 = (char *)(*(uint64_t (**)(std::string::size_type))(*(void *)v59.__r_.__value_.__l.__data_
                                                                          + 192))(v59.__r_.__value_.__r.__words[0]);
          if (v62 >= 0) {
            unint64_t v45 = v61;
          }
          else {
            unint64_t v45 = (void **)v61[0];
          }
          ExpandXPath(v44, v45, (uint64_t *)&__p);
          if (v59.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.__r_.__value_.__l.__size_);
          }
          long long v63 = 0uLL;
          int v46 = (void *)v5[50];
          if (v46) {
            BOOL v47 = (char *)v46 + *(void *)(*v46 - 544);
          }
          else {
            BOOL v47 = 0;
          }
          uint64_t v48 = v5[51];
          *(void *)&long long v63 = v47;
          *((void *)&v63 + 1) = v48;
          if (v48) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
          }
          if (v3) {
            goto LABEL_113;
          }
          (*(void (**)(uint64_t *__return_ptr, void))(*(void *)v36 + 88))(&v57, v36);
          uint64_t v49 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v57 + 192))(v57);
          std::string::basic_string[abi:ne180100]<0>(&v59, v49);
          BOOL v50 = IsInternalProperty((unint64_t *)&v59, (unint64_t *)v61);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          if (!v50)
          {
LABEL_113:
            long long v52 = v36;
            if (*((void *)&v36 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            AppendSubtree((uint64_t *)&v52, (uint64_t *)&v63, (v3 & 8) != 0, (v3 & 6) != 0, ((v3 & 0x10) == 0) & (v3 >> 2));
            if (*((void *)&v52 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
            }
          }
          if (*((void *)&v63 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
          }
          v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
          if (SHIBYTE(v62) < 0) {
            operator delete(v61[0]);
          }
          if (SHIBYTE(v65) < 0) {
            break;
          }
          if (*((void *)&v36 + 1)) {
            goto LABEL_123;
          }
LABEL_124:
          (*(void (**)(long long *__return_ptr))(**(void **)&v66[0] + 56))(&v64);
          unint64_t v51 = (std::__shared_weak_count *)*((void *)&v66[0] + 1);
          v66[0] = v64;
          if (v51)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v51);
            uint64_t v35 = *(void *)&v66[0];
            if (!*(void *)&v66[0]) {
              goto LABEL_130;
            }
          }
          else
          {
            uint64_t v35 = v64;
            if (!(void)v64) {
              goto LABEL_130;
            }
          }
        }
        operator delete((void *)v64);
        if (!*((void *)&v36 + 1)) {
          goto LABEL_124;
        }
LABEL_123:
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
        goto LABEL_124;
      }
LABEL_130:
      if (*((void *)&v66[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66[0] + 1));
      }
    }
  }
}

void sub_18882C9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v41 = *(std::__shared_weak_count **)(v39 - 136);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    __n128 v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<dispatch_queue_s,void (*)(dispatch_object_s *)>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_18882CD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void AppendSubtree(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v135[0] = 0;
  v135[1] = 0;
  uint64_t v136 = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 72))(&v138);
  uint64_t v10 = (char *)(*(uint64_t (**)(void))(*(void *)v138 + 192))(v138);
  std::string::basic_string[abi:ne180100]<0>(v135, v10);
  if (*((void *)&v138 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
  }
  v133[0] = 0;
  v133[1] = 0;
  uint64_t v134 = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 88))(&v138);
  unint64_t v11 = (char *)(*(uint64_t (**)(void))(*(void *)v138 + 192))(v138);
  std::string::basic_string[abi:ne180100]<0>(v133, v11);
  if (*((void *)&v138 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
  }
  v131[0] = 0;
  v131[1] = 0;
  uint64_t v132 = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 72))(&v138);
  uint64_t v12 = (char *)(*(uint64_t (**)(void))(*(void *)v138 + 192))(v138);
  std::string::basic_string[abi:ne180100]<0>(v131, v12);
  if (*((void *)&v138 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
  }
  v129[0] = 0;
  v129[1] = 0;
  uint64_t v130 = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 88))(&v138);
  unint64_t v13 = (char *)(*(uint64_t (**)(void))(*(void *)v138 + 192))(v138);
  std::string::basic_string[abi:ne180100]<0>(v129, v13);
  if (*((void *)&v138 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
  }
  uint64_t v128 = 0;
  long long v127 = 0uLL;
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 72))(&v138);
  __n128 v14 = (const char *)(*(uint64_t (**)(void))(*(void *)v138 + 192))(v138);
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 88))(__p);
  uint64_t v15 = (char *)(*(uint64_t (**)(void *))(*(void *)__p[0] + 192))(__p[0]);
  XMPUtils::FindChildNode(a2, v14, v15, 0, &v128, (uint64_t *)&v127);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (*((void *)&v138 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
  }
  XMPUtils::GetIXMPOptions(a1);
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 40))() != 1)
  {
    if (!XMPUtils::GetNodeChildCount(a1)) {
      goto LABEL_19;
    }
    goto LABEL_28;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 232))(&v138);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v138 + 1);
  (*(void (**)(void **__return_ptr))(*(void *)v138 + 504))(__p);
  char v17 = (*(uint64_t (**)(void *))(*(void *)__p[0] + 184))(__p[0]);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if ((v17 & 1) == 0)
  {
LABEL_28:
    if (!(void)v127)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 264))(&v138);
      long long v29 = v138;
      long long v138 = 0uLL;
      uint64_t v30 = (std::__shared_weak_count *)*((void *)&v127 + 1);
      long long v127 = v29;
      if (v30)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        if (*((void *)&v138 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
        }
        uint64_t v31 = v127;
      }
      else
      {
        uint64_t v31 = v29;
      }
      uint64_t v37 = *(unsigned int (**)(void))(*(void *)*a2 + 40);
      if (v31)
      {
        if (v37() == 4)
        {
          (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 240))(&v138);
          (*(void (**)(void, long long *))(*(void *)v138 + 656))(v138, &v127);
        }
        else
        {
          if ((*(unsigned int (**)(void))(*(void *)*a2 + 40))() != 2) {
            goto LABEL_96;
          }
          (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 248))(&v138);
          (*(void (**)(void, long long *, uint64_t))(*(void *)v138 + 664))(v138, &v127, v128);
        }
        goto LABEL_94;
      }
      if (v37() == 4)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 240))(&v138);
        uint64_t v38 = (*(uint64_t (**)(void))(*(void *)v138 + 688))(v138);
        (*(void (**)(void **__return_ptr))(*(void *)*a1 + 88))(__p);
        (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 72))(&v140);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, long long *))(*(void *)v38 + 744))(&v123, v38, __p, &v140);
        int v19 = v124;
        if (!v124) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a2 + 40))() != 2) {
        goto LABEL_96;
      }
      (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 248))(&v138);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v138 + 680))(&v121);
      int v20 = v122;
      if (!v122) {
        goto LABEL_94;
      }
LABEL_26:
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      goto LABEL_94;
    }
    __int16 IXMPOptions = XMPUtils::GetIXMPOptions(a1);
    long long v138 = v127;
    if (*((void *)&v127 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v22 = XMPUtils::GetIXMPOptions((uint64_t *)&v138);
    int v23 = IXMPOptions & 0x1F00;
    if (*((void *)&v138 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
    }
    if ((IXMPOptions & 0x1F00) != 0) {
      char v24 = a3;
    }
    else {
      char v24 = 0;
    }
    if ((v24 & 1) == 0 && a4)
    {
      if ((void)v127)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 240))(&v138);
        uint64_t v25 = (*(uint64_t (**)(void))(*(void *)v138 + 688))(v138);
        (*(void (**)(void **__return_ptr))(*(void *)v127 + 88))(__p);
        (*(void (**)(long long *__return_ptr))(*(void *)v127 + 72))(&v140);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, long long *))(*(void *)v25 + 744))(&v119, v25, __p, &v140);
        if (v120) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v120);
        }
        if (*((void *)&v140 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        if (*((void *)&v138 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
        }
      }
      (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 264))(&v138);
      long long v26 = v138;
      long long v138 = 0uLL;
      unint64_t v27 = (std::__shared_weak_count *)*((void *)&v127 + 1);
      long long v127 = v26;
      if (v27)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        if (*((void *)&v138 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
        }
        uint64_t v28 = v127;
        if (!(void)v127) {
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v28 = v26;
        if (!(void)v26) {
          goto LABEL_96;
        }
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v28 + 56))(&v138);
      if ((void)v138 == *a2)
      {
        if (*((void *)&v138 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
        }
      }
      else
      {
        int v40 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 40))(*a2);
        if (*((void *)&v138 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
        }
        if (v40 == 4)
        {
          (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 240))(&v138);
          (*(void (**)(void, long long *))(*(void *)(v138 + *(void *)(*(void *)v138 - 688)) + 520))(v138 + *(void *)(*(void *)v138 - 688), &v127);
          goto LABEL_150;
        }
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v127 + 56))(&v138);
      if ((void)v138 != *a2)
      {
        int v49 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 40))(*a2);
        if (*((void *)&v138 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
        }
        if (v49 != 2) {
          goto LABEL_152;
        }
        (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 248))(&v138);
        (*(void (**)(void, long long *, uint64_t))(*(void *)v138 + 664))(v138, &v127, v128);
      }
LABEL_150:
      if (*((void *)&v138 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
      }
LABEL_152:
      long long v138 = v127;
      if (*((void *)&v127 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if ((XMPUtils::GetIXMPOptions((uint64_t *)&v138) & 0x1F00) != 0)
      {
        *(_OWORD *)std::string __p = v127;
        if (*((void *)&v127 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        BOOL v50 = XMPUtils::GetNodeChildCount(__p) == 0;
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
      }
      else
      {
        BOOL v50 = 0;
      }
      if (*((void *)&v138 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
      }
      if (!v50) {
        goto LABEL_96;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a2 + 40))() == 4)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 240))(&v138);
        uint64_t v51 = (*(uint64_t (**)(void))(*(void *)v138 + 688))(v138);
        (*(void (**)(void **__return_ptr))(*(void *)v127 + 88))(__p);
        (*(void (**)(long long *__return_ptr))(*(void *)v127 + 72))(&v140);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, long long *))(*(void *)v51 + 744))(&v117, v51, __p, &v140);
        int v19 = v118;
        if (!v118)
        {
LABEL_23:
          if (*((void *)&v140 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
          }
          int v20 = (std::__shared_weak_count *)__p[1];
          if (__p[1]) {
            goto LABEL_26;
          }
LABEL_94:
          uint64_t v39 = (std::__shared_weak_count *)*((void *)&v138 + 1);
          if (!*((void *)&v138 + 1)) {
            goto LABEL_96;
          }
          goto LABEL_95;
        }
LABEL_22:
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        goto LABEL_23;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a2 + 40))() != 2) {
        goto LABEL_96;
      }
      (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 248))(&v138);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v138 + 680))(&v115);
      int v20 = v116;
      if (!v116) {
        goto LABEL_94;
      }
      goto LABEL_26;
    }
    if ((IXMPOptions & 0x1F00) == 0 || v23 != (v22 & 0x1F00)) {
      goto LABEL_96;
    }
    if (v23 == 256)
    {
      __p[0] = 0;
      __p[1] = 0;
      XMPUtils::GetNodeChildIterator(a1, __p);
      long long v32 = __p[0];
      if (__p[0])
      {
        do
        {
          while (1)
          {
            (*(void (**)(long long *__return_ptr))(*(void *)v32 + 48))(&v138);
            uint64_t v33 = (std::__shared_weak_count *)*((void *)&v138 + 1);
            long long v114 = v138;
            if (*((void *)&v138 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v138 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            AppendSubtree(&v114, &v127, a3, a4, a5);
            if (*((void *)&v114 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v114 + 1));
            }
            if (a5)
            {
              long long v138 = v127;
              if (*((void *)&v127 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t NodeChildCount = XMPUtils::GetNodeChildCount(&v138);
              if (*((void *)&v138 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
              }
              if (!NodeChildCount)
              {
                (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 240))(&v138);
                uint64_t v35 = (*(uint64_t (**)(void))(*(void *)v138 + 688))(v138);
                (*(void (**)(long long *__return_ptr))(*(void *)v127 + 88))(&v140);
                (*(void (**)(long long *__return_ptr))(*(void *)v127 + 72))(&v137);
                (*(void (**)(uint64_t *__return_ptr, uint64_t, long long *, long long *))(*(void *)v35 + 744))(&v112, v35, &v140, &v137);
                if (v113) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v113);
                }
                if (*((void *)&v137 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v137 + 1));
                }
                if (*((void *)&v140 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
                }
                if (*((void *)&v138 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
                }
              }
            }
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            (*(void (**)(long long *__return_ptr))(*(void *)__p[0] + 56))(&v138);
            long long v36 = (std::__shared_weak_count *)__p[1];
            *(_OWORD *)std::string __p = v138;
            if (!v36) {
              break;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            long long v32 = __p[0];
            if (!__p[0]) {
              goto LABEL_141;
            }
          }
          long long v32 = (void *)v138;
        }
        while ((void)v138);
      }
      goto LABEL_141;
    }
    if ((IXMPOptions & 0x1000) == 0)
    {
      if ((IXMPOptions & 0x200) == 0) {
        goto LABEL_96;
      }
      __p[0] = 0;
      __p[1] = 0;
      XMPUtils::GetNodeChildIterator(a1, __p);
      uint64_t v41 = __p[0];
      if (__p[0])
      {
        do
        {
          while (1)
          {
            long long v140 = 0uLL;
            (*(void (**)(long long *__return_ptr))(*(void *)v41 + 48))(&v138);
            long long v42 = v138;
            long long v140 = v138;
            long long v138 = 0uLL;
            (*(void (**)(long long *__return_ptr))(*(void *)v127 + 248))(&v138);
            uint64_t v43 = (*(uint64_t (**)(void))(*(void *)(v138 + *(void *)(*(void *)v138 - 688)) + 560))(v138 + *(void *)(*(void *)v138 - 688));
            if (!v43) {
              goto LABEL_132;
            }
            unint64_t v44 = v43;
            uint64_t v45 = 0;
            while (1)
            {
              long long v137 = 0uLL;
              (*(void (**)(long long *__return_ptr))(*(void *)v138 + 656))(&v137);
              long long v97 = v137;
              if (*((void *)&v137 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v137 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              long long v96 = v42;
              if (*((void *)&v42 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              BOOL v46 = ItemValuesMatch((uint64_t *)&v97, (uint64_t *)&v96);
              if (*((void *)&v96 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v96 + 1));
              }
              if (*((void *)&v97 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
              }
              if (*((void *)&v137 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v137 + 1));
              }
              if (v46) {
                break;
              }
              unint64_t v47 = v45 + 2;
              ++v45;
              if (v47 > v44) {
                goto LABEL_132;
              }
            }
            if (v44 == v45) {
LABEL_132:
            }
              CloneIXMPSubtree((uint64_t)&v140, (uint64_t)&v127);
            if (*((void *)&v138 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
            }
            if (*((void *)&v42 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
            }
            (*(void (**)(long long *__return_ptr))(*(void *)__p[0] + 56))(&v138);
            uint64_t v48 = (std::__shared_weak_count *)__p[1];
            *(_OWORD *)std::string __p = v138;
            if (!v48) {
              break;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
            uint64_t v41 = __p[0];
            if (!__p[0]) {
              goto LABEL_141;
            }
          }
          uint64_t v41 = (void *)v138;
        }
        while ((void)v138);
      }
LABEL_141:
      uint64_t v39 = (std::__shared_weak_count *)__p[1];
      if (!__p[1]) {
        goto LABEL_96;
      }
      goto LABEL_95;
    }
    if ((a3 & 1) == 0) {
      __assert_rtn("AppendSubtree", "XMPUtils2.cpp", 413, "mergeCompound");
    }
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 248))(&v138);
    int v90 = a4;
    uint64_t v91 = (std::__shared_weak_count *)*((void *)&v138 + 1);
    uint64_t v52 = v138;
    uint64_t v53 = XMPUtils::GetNodeChildCount(a1);
    unint64_t v54 = v53;
    if (!v53 || !(void)v127)
    {
LABEL_290:
      uint64_t v39 = v91;
      if (!v91) {
        goto LABEL_96;
      }
LABEL_95:
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      goto LABEL_96;
    }
    uint64_t v55 = 1;
    uint64_t v92 = v52;
    uint64_t v93 = v53;
    while (1)
    {
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v52 + 656))(&v138, v52, v55);
      long long v111 = v138;
      uint64_t v109 = 0;
      std::string v110 = 0;
      uint64_t v56 = (AdobeXMPCore::INode_v1 *)v138;
      (*(void (**)(long long *__return_ptr, void))(*(void *)v138 + 232))(&v138, v138);
      uint64_t v57 = (std::__shared_weak_count *)*((void *)&v138 + 1);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v138 + 504))(&v109);
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
      if (((*(uint64_t (**)(AdobeXMPCore::INode_v1 *))(*(void *)v56 + 184))(v56) & 1) == 0) {
        goto LABEL_280;
      }
      (*(void (**)(long long *__return_ptr, AdobeXMPCore::INode_v1 *, const char *, uint64_t, const char *, uint64_t))(*(void *)v56 + 128))(&v138, v56, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
      uint64_t v58 = (std::__shared_weak_count *)*((void *)&v138 + 1);
      uint64_t v59 = v138;
      if ((void)v138)
      {
        if ((*(unsigned int (**)(void))(*(void *)v138 + 40))(v138) == 1) {
          break;
        }
      }
LABEL_278:
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
LABEL_280:
      if (v110) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v110);
      }
      if (*((void *)&v111 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v111 + 1));
      }
      if (++v55 > v54 || !(void)v127) {
        goto LABEL_290;
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v108 = 0;
    uint64_t v95 = v58;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v59 + 232))(&v138, v59);
    uint64_t v60 = (std::__shared_weak_count *)*((void *)&v138 + 1);
    (*(void (**)(long long *__return_ptr))(*(void *)v138 + 504))(&v140);
    int v61 = (char *)(*(uint64_t (**)(void))(*(void *)v140 + 192))(v140);
    std::string::basic_string[abi:ne180100]<0>(__p, v61);
    if (*((void *)&v140 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
    }
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v127 + 248))(&v105);
    uint64_t v63 = v105;
    int64_t v62 = v106;
    uint64_t v105 = 0;
    long long v106 = 0;
    if (v63) {
      uint64_t v64 = v63 + *(void *)(*(void *)v63 - 544);
    }
    else {
      uint64_t v64 = 0;
    }
    *(void *)&long long v138 = v64;
    *((void *)&v138 + 1) = v62;
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v94 = v62;
    __int16 v65 = XMPUtils::GetIXMPOptions((uint64_t *)&v138);
    if (*((void *)&v138 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
    }
    if ((v65 & 0x200) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Language item must be used on array";
      *((unsigned char *)exception + 16) = 0;
    }
    int v66 = (*(uint64_t (**)(uint64_t))(*(void *)(v63 + *(void *)(*(void *)v63 - 688)) + 560))(v63 + *(void *)(*(void *)v63 - 688));
    uint64_t v67 = (v66 + 1);
    uint64_t v68 = 1;
    if (v66 >= 1)
    {
      while (1)
      {
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v63 + 656))(&v138, v63, v68);
        long long v69 = v138;
        if ((*(uint64_t (**)(void))(*(void *)v138 + 184))(v138)) {
          break;
        }
        int v78 = 4;
LABEL_220:
        if (*((void *)&v69 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
        }
        if (v78 == 2) {
          goto LABEL_231;
        }
        if (++v68 == v67)
        {
          LODWORD(v68) = v67;
          goto LABEL_231;
        }
      }
      (*(void (**)(long long *__return_ptr, void, const char *, uint64_t, const char *, uint64_t))(*(void *)v69 + 128))(&v138, v69, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
      long long v70 = v138;
      if ((void)v138 && (*(unsigned int (**)(void))(*(void *)v138 + 40))(v138) == 1)
      {
        long long v138 = 0uLL;
        uint64_t v139 = 0;
        (*(void (**)(long long *__return_ptr, void))(*(void *)v70 + 232))(&v140, v70);
        uint64_t v71 = (std::__shared_weak_count *)*((void *)&v140 + 1);
        (*(void (**)(long long *__return_ptr))(*(void *)v140 + 504))(&v137);
        uint64_t v72 = (char *)(*(uint64_t (**)(void))(*(void *)v137 + 192))(v137);
        std::string::basic_string[abi:ne180100]<0>(&v138, v72);
        if (*((void *)&v137 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v137 + 1));
        }
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        if (v139 >= 0) {
          uint64_t v73 = (void *)HIBYTE(v139);
        }
        else {
          uint64_t v73 = (void *)*((void *)&v138 + 1);
        }
        unint64_t v74 = (void *)HIBYTE(v108);
        if (v108 < 0) {
          unint64_t v74 = __p[1];
        }
        if (v73 != v74) {
          goto LABEL_225;
        }
        if (v108 >= 0) {
          std::string::size_type v75 = __p;
        }
        else {
          std::string::size_type v75 = (void **)__p[0];
        }
        if (v139 < 0)
        {
          uint64_t v79 = (void *)v138;
          int v78 = 2 * (memcmp((const void *)v138, v75, *((size_t *)&v138 + 1)) == 0);
LABEL_229:
          operator delete(v79);
        }
        else if (HIBYTE(v139))
        {
          long long v76 = (unsigned __int8 *)&v138;
          uint64_t v77 = HIBYTE(v139);
          while (*v76 == *(unsigned __int8 *)v75)
          {
            ++v76;
            std::string::size_type v75 = (void **)((char *)v75 + 1);
            if (!--v77)
            {
              int v78 = 2;
              goto LABEL_226;
            }
          }
LABEL_225:
          int v78 = 0;
LABEL_226:
          if (v139 < 0)
          {
            uint64_t v79 = (void *)v138;
            goto LABEL_229;
          }
        }
        else
        {
          int v78 = 2;
        }
      }
      else
      {
        int v78 = 4;
      }
      if (*((void *)&v70 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
      }
      goto LABEL_220;
    }
LABEL_231:
    if (v68 == v67) {
      int v80 = -1;
    }
    else {
      int v80 = v68;
    }
    if (v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
    }
    unint64_t v54 = v93;
    if (v106) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v109 + 184))(v109))
    {
      if (v80 == -1 || !a5) {
        goto LABEL_275;
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v127 + 248))(&v138);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v138 + 680))(&v103);
      if (v104) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v104);
      }
      if (*((void *)&v138 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
      }
      long long v138 = v127;
      if (*((void *)&v127 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v81 = XMPUtils::GetNodeChildCount(&v138);
      if (*((void *)&v138 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
      }
      if (v81) {
        goto LABEL_275;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a2 + 40))() == 4)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 240))(&v138);
        uint64_t v82 = (*(uint64_t (**)(void))(*(void *)v138 + 688))(v138);
        (*(void (**)(long long *__return_ptr))(*(void *)v127 + 88))(&v140);
        (*(void (**)(long long *__return_ptr))(*(void *)v127 + 72))(&v137);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, long long *, long long *))(*(void *)v82 + 744))(&v101, v82, &v140, &v137);
        if (v102) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
        if (*((void *)&v137 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v137 + 1));
        }
        goto LABEL_271;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a2 + 40))() == 2)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 248))(&v138);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v138 + 680))(&v99);
        uint64_t v88 = v100;
        if (!v100)
        {
LABEL_273:
          if (*((void *)&v138 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
          }
          goto LABEL_275;
        }
LABEL_272:
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
        goto LABEL_273;
      }
    }
    else
    {
      if (v80 == -1)
      {
        long long v138 = 0uLL;
        AdobeXMPCore::INode_v1::GetSimpleQualifier(v56, (uint64_t)&v138);
        (*(void (**)(long long *__return_ptr))(*(void *)v138 + 504))(&v140);
        uint64_t v86 = (const char *)(*(uint64_t (**)(void))(*(void *)v140 + 192))(v140);
        if (!strcmp(v86, "x-default"))
        {
          long long v137 = v127;
          if (*((void *)&v127 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          BOOL v87 = XMPUtils::GetNodeChildCount(&v137) == 0;
          if (*((void *)&v137 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v137 + 1));
          }
        }
        else
        {
          BOOL v87 = 1;
        }
        if (*((void *)&v140 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
        }
        if (!v87)
        {
          long long v140 = 0uLL;
          (*(void (**)(uint64_t *__return_ptr, AdobeXMPCore::INode_v1 *))(*(void *)v56 + 88))(&v105, v56);
          (*(void (**)(uint64_t *__return_ptr, AdobeXMPCore::INode_v1 *))(*(void *)v56 + 72))(&v98, v56);
          AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode((uint64_t)&v105, (uint64_t)&v98, &v109);
        }
        CloneIXMPSubtree((uint64_t)&v111, (uint64_t)&v127);
        goto LABEL_273;
      }
      if (v90)
      {
        long long v138 = 0uLL;
        (*(void (**)(long long *__return_ptr))(*(void *)v127 + 248))(&v140);
        (*(void (**)(long long *__return_ptr))(*(void *)v140 + 656))(&v138);
        if (*((void *)&v140 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v140 + 1));
        }
        (*(void (**)(long long *__return_ptr))(*(void *)v138 + 232))(&v140);
        uint64_t v83 = v140;
        uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)v109 + 192))(v109);
        uint64_t v85 = (*(uint64_t (**)(uint64_t))(*(void *)v109 + 208))(v109);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83 + 512))(v83, v84, v85);
LABEL_271:
        uint64_t v88 = (std::__shared_weak_count *)*((void *)&v140 + 1);
        if (!*((void *)&v140 + 1)) {
          goto LABEL_273;
        }
        goto LABEL_272;
      }
    }
LABEL_275:
    if (SHIBYTE(v108) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v58 = v95;
    uint64_t v52 = v92;
    goto LABEL_278;
  }
LABEL_19:
  if (*a1 && a5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 240))(&v138);
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v138 + 688))(v138);
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 88))(__p);
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 72))(&v140);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, long long *))(*(void *)v18 + 744))(&v125, v18, __p, &v140);
    int v19 = v126;
    if (!v126) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_96:
  if (*((void *)&v127 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v127 + 1));
  }
  if (SHIBYTE(v130) < 0) {
    operator delete(v129[0]);
  }
  if (SHIBYTE(v132) < 0) {
    operator delete(v131[0]);
  }
  if (SHIBYTE(v134) < 0) {
    operator delete(v133[0]);
  }
  if (SHIBYTE(v136) < 0) {
    operator delete(v135[0]);
  }
}

void sub_18882EDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57)
{
  uint64_t v59 = *(std::__shared_weak_count **)(v57 - 120);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a57);
  }
  if (*(char *)(v57 - 217) < 0) {
    operator delete(*(void **)(v57 - 240));
  }
  if (*(char *)(v57 - 193) < 0) {
    operator delete(*(void **)(v57 - 216));
  }
  if (*(char *)(v57 - 169) < 0) {
    operator delete(*(void **)(v57 - 192));
  }
  if (*(char *)(v57 - 145) < 0) {
    operator delete(*(void **)(v57 - 168));
  }
  _Unwind_Resume(exception_object);
}

void XMPUtils::DuplicateSubtree_v2(XMPUtils *this, const XMPMeta *lpsrc, XMPMeta *a3, char *a4, char *a5, char *a6, const char *a7)
{
  if (!lpsrc) {
    return;
  }
  int v7 = (int)a7;
  if (!v13) {
    return;
  }
  __n128 v14 = v13;
  if (!v15) {
    __cxa_bad_cast();
  }
  memset(v56, 0, sizeof(v56));
  memset(v55, 0, sizeof(v55));
  std::string::size_type v53 = 0;
  unint64_t v54 = 0;
  long long v52 = 0uLL;
  if (!a3 || !*(unsigned char *)a3)
  {
    uint64_t v16 = "(sourceNS != 0) && (*sourceNS != 0)";
    int v17 = 653;
    goto LABEL_130;
  }
  if (!a4 || !*a4)
  {
    uint64_t v16 = "(sourceRoot != 0) && (*sourceRoot != 0)";
    int v17 = 654;
    goto LABEL_130;
  }
  uint64_t v16 = "(dest != 0) && (destNS != 0) && (destRoot != 0)";
  int v17 = 655;
  if (!a5 || !a6) {
LABEL_130:
  }
    __assert_rtn("DuplicateSubtree_v2", "XMPUtils2.cpp", v17, v16);
  uint64_t v18 = v15;
  if (!*a5) {
    a5 = (char *)a3;
  }
  if (!*a6) {
    a6 = a4;
  }
  int v19 = strcmp((const char *)a3, "*");
  int v20 = strcmp(a5, "*");
  if (v19) {
    BOOL v21 = v20 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  char v22 = v21;
  if (v18 == v14 && (v22 & 1) != 0)
  {
    int v40 = "Can't duplicate tree onto itself";
    goto LABEL_135;
  }
  if (!(v20 | v19))
  {
    int v40 = "Use Clone for full tree to full tree";
LABEL_135:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = v40;
    *((unsigned char *)exception + 16) = 0;
  }
  if (!v19)
  {
    ExpandXPath(a5, a6, (uint64_t *)v55);
    LODWORD(v49) = 0;
    if ((XMPUtils::FindCnstNode(v14 + 50, (uint64_t *)v55, (std::string::size_type *)&v52, &v49, 0) & 1) != 0
      && (v49 & 0x100) != 0)
    {
      long long v50 = v52;
      if (*((void *)&v52 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t NodeChildCount = XMPUtils::GetNodeChildCount(&v50);
      if (*((void *)&v50 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
      }
      if (!NodeChildCount)
      {
LABEL_50:
        std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v53, (uint64_t)(v18 + 50));
        std::string::size_type v28 = v53;
        unint64_t v27 = v54;
        if (v54) {
          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*(unsigned int (**)(std::string::size_type))(*(void *)v28 + 40))(v28) == 1)
        {
          long long v50 = 0uLL;
          (*(void (**)(long long *__return_ptr, std::string::size_type))(*(void *)v28 + 232))(&v50, v28);
          long long v60 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)v52 + 88))(&v59);
          (*(void (**)(long long *__return_ptr))(*(void *)v52 + 72))(&v58);
          (*(void (**)(long long *__return_ptr))(*(void *)v50 + 504))(&v57);
          AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode((uint64_t)&v59, (uint64_t)&v58, &v57);
        }
        if ((*(unsigned int (**)(std::string::size_type))(*(void *)v28 + 40))(v28) == 2)
        {
          long long v50 = 0uLL;
          (*(void (**)(long long *__return_ptr, std::string::size_type))(*(void *)v28 + 248))(&v50, v28);
          long long v60 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)v52 + 88))(&v59);
          (*(void (**)(long long *__return_ptr))(*(void *)v52 + 72))(&v58);
          (*(void (**)(void))(*(void *)v50 + 640))(v50);
          AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode(&v59, &v58);
        }
        long long v50 = 0uLL;
        (*(void (**)(long long *__return_ptr, std::string::size_type))(*(void *)v28 + 240))(&v50, v28);
        long long v60 = 0uLL;
        (*(void (**)(long long *__return_ptr))(*(void *)v52 + 240))(&v60);
        long long v59 = 0uLL;
        (*(void (**)(long long *__return_ptr))(*(void *)(v50 + *(void *)(*(void *)v50 - 688)) + 552))(&v59);
        while (1)
        {
          uint64_t v33 = v59;
          if (!(void)v59) {
            break;
          }
          while (1)
          {
            long long v58 = 0uLL;
            (*(void (**)(long long *__return_ptr))(*(void *)v33 + 48))(&v57);
            (*(void (**)(long long *__return_ptr))(*(void *)v57 + 264))(&v58);
            if (*((void *)&v57 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
            }
            (*(void (**)(void, long long *))(*(void *)(v60 + *(void *)(*(void *)v60 - 688)) + 520))(v60 + *(void *)(*(void *)v60 - 688), &v58);
            if (*((void *)&v58 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
            }
            (*(void (**)(long long *__return_ptr))(*(void *)v59 + 56))(&v58);
            long long v34 = v58;
            long long v58 = 0uLL;
            uint64_t v35 = (std::__shared_weak_count *)*((void *)&v59 + 1);
            long long v59 = v34;
            if (v35) {
              break;
            }
            uint64_t v33 = v34;
            if (!(void)v34) {
              goto LABEL_98;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          if (*((void *)&v58 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
          }
        }
LABEL_98:
        if (*((void *)&v59 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
        }
        std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v52, (uint64_t)&v60);
        if (*((void *)&v60 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
        }
        if (*((void *)&v50 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
        }
        if ((*(unsigned int (**)(std::string::size_type))(*(void *)v28 + 184))(v28))
        {
          long long v50 = 0uLL;
          (*(void (**)(long long *__return_ptr, std::string::size_type))(*(void *)v28 + 112))(&v50, v28);
          while (1)
          {
            uint64_t v36 = v50;
            if (!(void)v50) {
              break;
            }
            while (1)
            {
              long long v60 = 0uLL;
              (*(void (**)(long long *__return_ptr))(*(void *)v36 + 48))(&v59);
              (*(void (**)(long long *__return_ptr))(*(void *)v59 + 264))(&v60);
              if (*((void *)&v59 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
              }
              (*(void (**)(void, long long *))(*(void *)v52 + 136))(v52, &v60);
              if (*((void *)&v60 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
              }
              (*(void (**)(long long *__return_ptr))(*(void *)v50 + 56))(&v60);
              long long v37 = v60;
              long long v60 = 0uLL;
              uint64_t v38 = (std::__shared_weak_count *)*((void *)&v50 + 1);
              long long v50 = v37;
              if (v38) {
                break;
              }
              uint64_t v36 = v37;
              if (!(void)v37) {
                goto LABEL_116;
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            if (*((void *)&v60 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
            }
          }
LABEL_116:
          if (*((void *)&v50 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
          }
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        goto LABEL_120;
      }
      if ((v7 & 0x20000000) != 0)
      {
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)v52 + 224))(v52, 1, 1);
        goto LABEL_50;
      }
      long long v42 = "Destination must be an empty struct";
    }
    else
    {
      long long v42 = "Destination must be an existing struct";
    }
    BOOL v46 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)BOOL v46 = 102;
    v46[1] = v42;
    *((unsigned char *)v46 + 16) = 0;
  }
  if (v20)
  {
    ExpandXPath((char *)a3, a4, v56);
    ExpandXPath(a5, a6, (uint64_t *)v55);
    long long v50 = 0uLL;
    if (XMPUtils::FindCnstNode(v18 + 50, v56, &v53, 0, 0))
    {
      if (XMPUtils::FindCnstNode(v14 + 50, (uint64_t *)v55, (std::string::size_type *)&v52, 0, 0))
      {
        unint64_t v44 = "Destination subtree must not exist";
      }
      else
      {
        if (XMPUtils::FindNode(v14 + 50, (uint64_t *)v55, 1, 0, (uint64_t)&v52, 0, 0))
        {
          if (v18 != v14) {
            goto LABEL_39;
          }
          int v23 = (std::__shared_weak_count *)*((void *)&v52 + 1);
          uint64_t v24 = v52;
          if (*((void *)&v52 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          if (v24)
          {
            do
            {
              if (v24 == v53)
              {
                uint64_t v39 = __cxa_allocate_exception(0x18uLL);
                *(_DWORD *)uint64_t v39 = 102;
                v39[1] = "Destination subtree is within the source subtree";
                *((unsigned char *)v39 + 16) = 0;
              }
              (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v24 + 56))(&v60, v24);
              uint64_t v25 = (std::__shared_weak_count *)*((void *)&v60 + 1);
              uint64_t v24 = v60;
              long long v60 = 0uLL;
              if (v23)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                if (*((void *)&v60 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
                }
              }
              int v23 = v25;
            }
            while (v24);
            if (v25) {
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t v25 = v23;
            if (v23) {
LABEL_38:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
LABEL_39:
          if ((*(unsigned int (**)(std::string::size_type))(*(void *)v53 + 40))(v53) == 1)
          {
            long long v60 = 0uLL;
            (*(void (**)(long long *__return_ptr))(*(void *)v53 + 232))(&v60);
            long long v59 = 0uLL;
            (*(void (**)(long long *__return_ptr))(*(void *)v52 + 88))(&v58);
            (*(void (**)(long long *__return_ptr))(*(void *)v52 + 72))(&v57);
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v60 + 504))(&v49);
            AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode((uint64_t)&v58, (uint64_t)&v57, &v49);
          }
          if ((*(unsigned int (**)(std::string::size_type))(*(void *)v53 + 40))(v53) == 2)
          {
            long long v60 = 0uLL;
            (*(void (**)(long long *__return_ptr))(*(void *)v53 + 248))(&v60);
            long long v59 = 0uLL;
            (*(void (**)(long long *__return_ptr))(*(void *)v52 + 88))(&v58);
            (*(void (**)(long long *__return_ptr))(*(void *)v52 + 72))(&v57);
            (*(void (**)(void))(*(void *)v60 + 640))(v60);
            AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode(&v58, &v57);
          }
          long long v60 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)v53 + 240))(&v60);
          long long v59 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)v52 + 88))(&v58);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v52 + 72))(&v48);
          AdobeXMPCore_Int::IStructureNode_I::CreateStructureNode(&v58, &v48);
        }
        unint64_t v44 = "Can't create destination root node";
      }
    }
    else
    {
      unint64_t v44 = "Can't find source subtree";
    }
    uint64_t v45 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)uint64_t v45 = 102;
    v45[1] = v44;
    *((unsigned char *)v45 + 16) = 0;
  }
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  ExpandXPath((char *)a3, a4, (uint64_t *)&v50);
  long long v59 = 0uLL;
  LODWORD(v49) = 0;
  XMPUtils::FindCnstNode(v18 + 50, (uint64_t *)&v50, (std::string::size_type *)&v59, &v49, 0);
  if (!(void)v59 || (v49 & 0x100) == 0)
  {
    uint64_t v43 = "Source must be an existing struct";
    goto LABEL_145;
  }
  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v52, (uint64_t)(v14 + 50));
  long long v60 = v52;
  if (*((void *)&v52 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = XMPUtils::GetNodeChildCount(&v60);
  if (*((void *)&v60 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
  }
  if (!v29) {
    goto LABEL_63;
  }
  if ((v7 & 0x20000000) == 0)
  {
    uint64_t v43 = "Destination tree must be empty";
LABEL_145:
    unint64_t v47 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)unint64_t v47 = 102;
    v47[1] = v43;
    *((unsigned char *)v47 + 16) = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)v52 + 224))(v52, 1, 1);
LABEL_63:
  long long v58 = 0uLL;
  long long v60 = v59;
  if (*((void *)&v59 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  XMPUtils::GetNodeChildIterator(&v60, &v58);
  uint64_t v30 = (std::__shared_weak_count *)*((void *)&v60 + 1);
  if (!*((void *)&v60 + 1)) {
    goto LABEL_67;
  }
  while (1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
LABEL_67:
    uint64_t v31 = v58;
    if (!(void)v58) {
      break;
    }
    while (1)
    {
      long long v57 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)v31 + 48))(&v60);
      long long v32 = (std::__shared_weak_count *)*((void *)&v60 + 1);
      (*(void (**)(long long *__return_ptr))(*(void *)v60 + 264))(&v57);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if ((*(unsigned int (**)(void))(*(void *)v52 + 40))(v52) == 4)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v52 + 240))(&v60);
        (*(void (**)(void, long long *))(*(void *)(v60 + *(void *)(*(void *)v60 - 688)) + 520))(v60 + *(void *)(*(void *)v60 - 688), &v57);
        if (*((void *)&v60 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
        }
      }
      if (*((void *)&v57 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v58 + 56))(&v60);
      uint64_t v30 = (std::__shared_weak_count *)*((void *)&v58 + 1);
      long long v58 = v60;
      if (v30) {
        break;
      }
      uint64_t v31 = v60;
      if (!(void)v60) {
        goto LABEL_77;
      }
    }
  }
LABEL_77:
  if (*((void *)&v58 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
  }
  if (*((void *)&v59 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
  }
  *(void *)&long long v60 = &v50;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
LABEL_120:
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  *(void *)&long long v50 = v55;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v55[0] = (void **)v56;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](v55);
}

void sub_188830A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,void **a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v29 = *(std::__shared_weak_count **)(v27 - 88);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  *(void *)(v27 - 112) = &a23;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 112));
  a23 = (void **)&a26;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void XMPUtils::RemoveProperties_v2(XMPUtils *this, XMPMeta *a2, char *a3, const char *a4)
{
  if (!this) {
    return;
  }
  __int16 v4 = (__int16)a4;
  if (!v7) {
    return;
  }
  if (!a2 || !a3) {
    XMPUtils::RemoveProperties_v2();
  }
  uint64_t v8 = v7;
  if (*a3)
  {
    if (!*(unsigned char *)a2)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      exception[1] = "Property name requires schema namespace";
      *((unsigned char *)exception + 16) = 0;
    }
    unint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    ExpandXPath((char *)a2, a3, (uint64_t *)&v54);
    int v53 = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    if (!XMPUtils::FindNode(v8 + 50, (uint64_t *)&v54, 0, 0, (uint64_t)&__p, &v53, 0)
      || (v4 & 1) == 0 && IsInternalProperty(v54, v54 + 4))
    {
      goto LABEL_79;
    }
    v52[0] = 0;
    v52[1] = 0;
    (*(void (**)(char **__return_ptr))(*(void *)__p.__r_.__value_.__l.__data_ + 56))(v52);
    if ((*(unsigned int (**)(char *))(*(void *)v52[0] + 40))(v52[0]) == 4)
    {
      (*(void (**)(size_t *__return_ptr))(*(void *)v52[0] + 240))(&__n);
      uint64_t v9 = (*(uint64_t (**)(size_t))(*(void *)__n + 688))(__n);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)__p.__r_.__value_.__l.__data_ + 88))(&v46);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)__p.__r_.__value_.__l.__data_ + 72))(&v44);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(void *)v9 + 744))(&v50, v9, &v46, &v44);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      uint64_t v10 = v47;
      if (!v47) {
        goto LABEL_17;
      }
    }
    else
    {
      if ((*(unsigned int (**)(char *))(*(void *)v52[0] + 40))(v52[0]) != 2)
      {
LABEL_77:
        if (v52[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52[1]);
        }
LABEL_79:
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        return;
      }
      (*(void (**)(size_t *__return_ptr))(*(void *)v52[0] + 248))(&__n);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)__n + 680))(&v42);
      uint64_t v10 = v43;
      if (!v43)
      {
LABEL_17:
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        goto LABEL_77;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_17;
  }
  if (*(unsigned char *)a2)
  {
    unint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(std::string *__return_ptr))(*(void *)(v7[50] + *(void *)(*(void *)v7[50] - 688))
                                                      + 552))(&__p);
    while (1)
    {
      std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        break;
      }
      while (1)
      {
        v52[0] = 0;
        v52[1] = 0;
        (*(void (**)(char **__return_ptr))(*(void *)v12 + 48))(v52);
        (*(void (**)(size_t *__return_ptr))(*(void *)v52[0] + 88))(&__n);
        unint64_t v13 = (const char *)(*(uint64_t (**)(size_t))(*(void *)__n + 192))(__n);
        int v14 = strcmp(v13, (const char *)a2);
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        if (!v14) {
          std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>>::push_back[abi:ne180100]((uint64_t *)&v54, (long long *)v52);
        }
        if (v52[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52[1]);
        }
        (*(void (**)(char **__return_ptr))(*(void *)__p.__r_.__value_.__l.__data_ + 56))(v52);
        long long v15 = *(_OWORD *)v52;
        v52[0] = 0;
        v52[1] = 0;
        std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
        if (size) {
          break;
        }
        std::string::size_type v12 = v15;
        if (!(void)v15) {
          goto LABEL_33;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
      if (v52[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52[1]);
      }
    }
LABEL_33:
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (v55 != v54)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      do
      {
        uint64_t v19 = v8[50] + *(void *)(*(void *)v8[50] - 792);
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 688))(v19);
        (*(void (**)(std::string *__return_ptr))(*(void *)v54[v17] + 88))(&__p);
        (*(void (**)(char **__return_ptr))(*(void *)v54[v17] + 72))(v52);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, char **))(*(void *)v20 + 744))(&v40, v20, &__p, v52);
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
        if (v52[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52[1]);
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        ++v18;
        v17 += 2;
      }
      while (v18 < ((char *)v55 - (char *)v54) >> 4);
    }
    if ((v4 & 0x800) == 0
      || (v52[0] = 0,
          LODWORD(__n) = 0,
          XMPMeta::GetNamespacePrefix(a2, (const char **)v52, (const char **)&__n, v11),
          uint64_t v21 = sRegisteredAliasMap + 8,
          char v22 = *(void **)sRegisteredAliasMap,
          *(void *)sRegisteredAliasMap == sRegisteredAliasMap + 8))
    {
LABEL_70:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
      std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      return;
    }
    while (1)
    {
      int v23 = *((char *)v22 + 55);
      uint64_t v24 = (const char *)(v22 + 4);
      if (v23 < 0) {
        uint64_t v24 = (const char *)v22[4];
      }
      if (strncmp(v24, v52[0], __n)) {
        goto LABEL_64;
      }
      uint64_t v25 = v23;
      if ((v23 & 0x80) != 0)
      {
        long long v26 = (unsigned char *)v22[4];
        uint64_t v25 = v22[5];
        if (v25)
        {
LABEL_51:
          uint64_t v27 = &v26[v25];
          std::string::size_type v28 = v26;
          while (*v28 != 58)
          {
            ++v28;
            if (!--v25)
            {
              std::string::size_type v28 = v27;
              break;
            }
          }
          uint64_t v29 = v28 - v26;
          if (v28 == v27) {
            uint64_t v29 = -1;
          }
          goto LABEL_60;
        }
      }
      else
      {
        long long v26 = v22 + 4;
        if ((_BYTE)v23) {
          goto LABEL_51;
        }
      }
      uint64_t v29 = -1;
LABEL_60:
      uint64_t v30 = (void *)v8[50];
      uint64_t v31 = *(void *)(*v30 - 792);
      std::string::basic_string(&__p, (const std::string *)(v22 + 4), v29 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v46);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)v30 + v31) + 672))(&v38);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_64:
      long long v32 = (void *)v22[1];
      if (v32)
      {
        do
        {
          uint64_t v33 = v32;
          long long v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (void *)v22[2];
          BOOL v34 = *v33 == (void)v22;
          char v22 = v33;
        }
        while (!v34);
      }
      char v22 = v33;
      if (v33 == (void *)v21) {
        goto LABEL_70;
      }
    }
  }
  uint64_t v35 = *(void (**)(void))(*(void *)(v7[50] + *(void *)(*(void *)v7[50] - 544)) + 224);

  v35();
}

void sub_1888315E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v27 - 120);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::string __p = (void *)(v27 - 104);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<dispatch_queue_s,void (*)(dispatch_object_s *)>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1888317F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::INode_v1::GetSimpleQualifier(AdobeXMPCore::INode_v1 *this@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)this + 128))(&v6);
  unint64_t v5 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if ((void)v6)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v6 + 232))(&v6);
    *(_OWORD *)a2 = v6;
    if (!v5) {
      return;
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    if (!v5) {
      return;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1888318A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void CloneIXMPSubtree(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  long long v6 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a1 + 264))(&v5);
  if (!v5) {
    goto LABEL_8;
  }
  if ((*(unsigned int (**)(void))(**(void **)a2 + 40))() == 2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 248))(&v3);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)(v3 + *(void *)(*(void *)v3 - 688)) + 520))(v3 + *(void *)(*(void *)v3 - 688), &v5);
  }
  else
  {
    if ((*(unsigned int (**)(void))(**(void **)a2 + 40))() != 4) {
      goto LABEL_8;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 240))(&v3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 656))(v3, a2);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
LABEL_8:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_188831A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL ItemValuesMatch(uint64_t *a1, uint64_t *a2)
{
  BOOL v2 = (*a1 | *a2) == 0;
  if (*a1) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return v2;
  }
  __int16 IXMPOptions = XMPUtils::GetIXMPOptions(a1);
  __int16 v7 = XMPUtils::GetIXMPOptions(a2);
  if ((IXMPOptions & 0x1F00) != (v7 & 0x1F00)) {
    return 0;
  }
  if ((IXMPOptions & 0x1F00) == 0x100)
  {
    uint64_t NodeChildCount = XMPUtils::GetNodeChildCount(a1);
    if (NodeChildCount == XMPUtils::GetNodeChildCount(a2))
    {
      long long v68 = 0uLL;
      XMPUtils::GetNodeChildIterator(a1, &v68);
      v66[0] = 0;
      v66[1] = 0;
      XMPUtils::GetNodeChildIterator(a2, v66);
      uint64_t v19 = v68;
      if ((void)v68)
      {
        do
        {
          (*(void (**)(long long *__return_ptr))(*(void *)v19 + 48))(&v70);
          long long v20 = v70;
          long long v70 = 0uLL;
          uint64_t v21 = (std::__shared_weak_count *)a2[1];
          std::string __p = (void *)*a2;
          uint64_t v64 = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t *__return_ptr, void))(*(void *)v20 + 88))(&v72, v20);
          char v22 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v72 + 192))(v72);
          (*(void (**)(uint64_t *__return_ptr, void))(*(void *)v20 + 72))(&v61, v20);
          int v23 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v61 + 192))(v61);
          XMPUtils::FindChildNode((uint64_t *)&__p, v22, v23, 0, 0, (uint64_t *)&v70);
          if (v62) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          }
          if (v73) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v73);
          }
          if (v64) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v64);
          }
          uint64_t v24 = v70;
          if ((void)v70)
          {
            long long v60 = v20;
            if (*((void *)&v20 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v58 = v24;
            long long v59 = (std::__shared_weak_count *)*((void *)&v70 + 1);
            if (*((void *)&v70 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v25 = ItemValuesMatch(&v60, &v58);
            if (v59) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v59);
            }
            char v26 = v25 ^ 1;
            if (*((void *)&v60 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
            }
          }
          else
          {
            char v26 = 1;
          }
          if (*((void *)&v70 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
          }
          if (*((void *)&v20 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
          }
          if (v26) {
            break;
          }
          (*(void (**)(long long *__return_ptr))(*(void *)v68 + 56))(&v70);
          uint64_t v27 = (std::__shared_weak_count *)*((void *)&v68 + 1);
          long long v68 = v70;
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          (*(void (**)(long long *__return_ptr))(*(void *)v66[0] + 56))(&v70);
          std::string::size_type v28 = (std::__shared_weak_count *)v66[1];
          *(_OWORD *)int v66 = v70;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          uint64_t v19 = v68;
        }
        while ((void)v68);
        char v29 = v26 ^ 1;
      }
      else
      {
        char v29 = 1;
      }
      if (v66[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66[1]);
      }
      if (*((void *)&v68 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
      }
      if (v29) {
        return 1;
      }
    }
    return 0;
  }
  if ((IXMPOptions & 0x1F00) != 0)
  {
    if ((IXMPOptions & 0x200) == 0) {
      ItemValuesMatch();
    }
    unint64_t v30 = XMPUtils::GetNodeChildCount(a1);
    unint64_t v31 = XMPUtils::GetNodeChildCount(a2);
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 248))(&v70);
    long long v32 = v70;
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 248))(&v70);
    int v53 = (std::__shared_weak_count *)*((void *)&v70 + 1);
    if (!v30)
    {
LABEL_88:
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      if (*((void *)&v32 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
      }
      return 1;
    }
    uint64_t v33 = v70;
    uint64_t v34 = 1;
    unint64_t v54 = v30;
    while (1)
    {
      (*(void (**)(long long *__return_ptr, void, uint64_t))(*(void *)v32 + 656))(&v70, v32, v34);
      uint64_t v35 = (std::__shared_weak_count *)*((void *)&v70 + 1);
      if (v31)
      {
        uint64_t v36 = v70;
        unint64_t v37 = 2;
        do
        {
          (*(void (**)(long long *__return_ptr, uint64_t, unint64_t))(*(void *)v33 + 656))(&v70, v33, v37 - 1);
          long long v38 = v70;
          uint64_t v56 = v36;
          long long v57 = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v55 = v38;
          if (*((void *)&v38 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          char v39 = ItemValuesMatch(&v56, &v55);
          if (*((void *)&v55 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
          }
          if (v57) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          }
          if (*((void *)&v38 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
          }
          if (v37 > v31) {
            char v40 = 1;
          }
          else {
            char v40 = v39;
          }
          ++v37;
        }
        while ((v40 & 1) == 0);
        char v41 = v39 ^ 1;
        unint64_t v30 = v54;
        if (v35) {
LABEL_82:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      else
      {
        char v41 = 1;
        if (*((void *)&v70 + 1)) {
          goto LABEL_82;
        }
      }
      if (v41)
      {
        if (v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        }
        if (*((void *)&v32 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
        }
        return 0;
      }
      if (++v34 > v30) {
        goto LABEL_88;
      }
    }
  }
  char v8 = v7;
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 232))(&v68);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v68 + 1);
  (*(void (**)(void **__return_ptr))(*(void *)v68 + 504))(v66);
  uint64_t v10 = (char *)(*(uint64_t (**)(void *))(*(void *)v66[0] + 192))(v66[0]);
  std::string::basic_string[abi:ne180100]<0>(&v70, v10);
  if (v66[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66[1]);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  long long v68 = 0uLL;
  uint64_t v69 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 232))(v66);
  unint64_t v11 = (std::__shared_weak_count *)v66[1];
  (*(void (**)(void **__return_ptr))(*(void *)v66[0] + 504))(&__p);
  uint64_t v12 = (char *)(*(uint64_t (**)(void *))(*(void *)__p + 192))(__p);
  std::string::basic_string[abi:ne180100]<0>(&v68, v12);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v13 = HIBYTE(v71);
  if (v71 >= 0) {
    uint64_t v14 = HIBYTE(v71);
  }
  else {
    uint64_t v14 = *((void *)&v70 + 1);
  }
  uint64_t v15 = HIBYTE(v69);
  if (v69 < 0) {
    uint64_t v15 = *((void *)&v68 + 1);
  }
  if (v14 != v15) {
    goto LABEL_127;
  }
  if (v69 >= 0) {
    uint64_t v16 = &v68;
  }
  else {
    uint64_t v16 = (long long *)v68;
  }
  if (v71 < 0)
  {
    if (memcmp((const void *)v70, v16, *((size_t *)&v70 + 1)))
    {
LABEL_127:
      char v51 = 0;
      BOOL v2 = 0;
      goto LABEL_128;
    }
  }
  else if (HIBYTE(v71))
  {
    long long v17 = (unsigned __int8 *)&v70;
    while (*v17 == *(unsigned __int8 *)v16)
    {
      ++v17;
      uint64_t v16 = (long long *)((char *)v16 + 1);
      if (!--v13) {
        goto LABEL_104;
      }
    }
    goto LABEL_127;
  }
LABEL_104:
  if ((IXMPOptions & 0x40) != (v8 & 0x40)) {
    goto LABEL_127;
  }
  if ((IXMPOptions & 0x40) == 0) {
    goto LABEL_135;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 128))(v66);
  unint64_t v43 = (unint64_t)v66[0];
  uint64_t v42 = (std::__shared_weak_count *)v66[1];
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 128))(v66);
  uint64_t v44 = v66[0];
  uint64_t v45 = (std::__shared_weak_count *)v66[1];
  BOOL v2 = (v43 | (unint64_t)v66[0]) == 0;
  BOOL v46 = 1;
  if (v43 && v66[0])
  {
    v66[0] = 0;
    v66[1] = 0;
    uint64_t v67 = 0;
    (*(void (**)(void **__return_ptr, unint64_t))(*(void *)v43 + 232))(&__p, v43);
    unint64_t v47 = v64;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)__p + 504))(&v72);
    uint64_t v48 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v72 + 192))(v72);
    std::string::basic_string[abi:ne180100]<0>(v66, v48);
    if (v73) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v73);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    std::string __p = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v44 + 232))(&v72, v44);
    uint64_t v49 = v73;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 504))(&v61);
    uint64_t v50 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v61 + 192))(v61);
    std::string::basic_string[abi:ne180100]<0>(&__p, v50);
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
    BOOL v46 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)v66, (unsigned __int8 *)&__p);
    if (SHIBYTE(v65) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v67) < 0) {
      operator delete(v66[0]);
    }
    BOOL v2 = 0;
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v46) {
    char v51 = 0;
  }
  else {
LABEL_135:
  }
    char v51 = 1;
LABEL_128:
  if (SHIBYTE(v69) < 0) {
    operator delete((void *)v68);
  }
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)v70);
  }
  if (v51) {
    return 1;
  }
  return v2;
}

void sub_1888324A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v40 - 121) < 0) {
    operator delete(*(void **)(v40 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_1888326C0()
{
  if (!v0) {
    JUMPOUT(0x188832680);
  }
  JUMPOUT(0x188832678);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void XMPUtils::RemoveProperties_v2()
{
  __assert_rtn("RemoveProperties_v2", "XMPUtils2.cpp", 832, "(schemaNS != 0) && (propName != 0)");
}

void ItemValuesMatch()
{
}

{
  __assert_rtn("ItemValuesMatch", "XMPUtils-FileInfo.cpp", 688, "leftForm & kXMP_PropValueIsArray");
}

uint64_t XMPFiles_IO::New_XMPFiles_IO(Host_IO *a1, const char *a2, uint64_t a3)
{
  int FileMode = Host_IO::GetFileMode(a1, a2);
  if (FileMode)
  {
    if (FileMode != 1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 117;
      exception[1] = "New_XMPFiles_IO, path must be a file or not exist";
      *((unsigned char *)exception + 16) = 0;
    }
    int v7 = Host_IO::Open(a1, a2);
    if (v7 != -1)
    {
      Host_IO::Seek(v7, 0, 0);
      operator new();
    }
  }
  v10[0] = 111;
  v10[1] = "New_XMPFiles_IO, file does not exist";
  void v10[2] = 0;
  if (a3) {
    GenericErrorCallback::NotifyClient(a3, 0, (unsigned int *)v10, (uint64_t)a1);
  }
  return 0;
}

void sub_188832A1C()
{
}

void sub_188832A8C()
{
}

uint64_t XMPFiles_IO::XMPFiles_IO(uint64_t a1, Host_IO *a2, char *__s, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &unk_1ED4DEE68;
  *(unsigned char *)(a1 + 8) = a4;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), __s);
  *(_DWORD *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a6;
  *(void *)(a1 + 88) = a5;
  if (a2 == -1) {
    __assert_rtn("XMPFiles_IO", "XMPFiles_IO.cpp", 105, "this->fileRef != Host_IO::noFileRef");
  }
  *(void *)(a1 + 56) = Host_IO::Length(a2);
  return a1;
}

void sub_188832B5C()
{
}

void sub_188832BA8()
{
}

void XMPFiles_IO::~XMPFiles_IO(XMPFiles_IO *this, const char *a2)
{
  *(void *)this = &unk_1ED4DEE68;
  if (*((void *)this + 9)) {
    XMPFiles_IO::DeleteTemp((uint64_t)this, a2);
  }
  uint64_t v3 = *((unsigned int *)this + 10);
  if (v3 != -1) {
    Host_IO::Close(v3);
  }
  if (*((unsigned char *)this + 64))
  {
    uint64_t v4 = (XMPFiles_IO *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
    {
      if (!*((void *)this + 3)) {
        goto LABEL_12;
      }
      uint64_t v4 = *(Host_IO **)v4;
    }
    else if (!*((unsigned char *)this + 39))
    {
      goto LABEL_12;
    }
    Host_IO::Delete(v4, a2);
  }
LABEL_12:
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  XMPFiles_IO::~XMPFiles_IO(this, a2);

  JUMPOUT(0x18C11C0E0);
}

uint64_t XMPFiles_IO::Read(XMPFiles_IO *this, void *a2, uint64_t a3, int a4)
{
  int v5 = *((_DWORD *)this + 10);
  if (v5 == -1)
  {
    uint64_t v16 = "this->fileRef != Host_IO::noFileRef";
    int v17 = 147;
    goto LABEL_14;
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9 != Host_IO::Seek(v5, 0, 1u))
  {
    uint64_t v16 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    int v17 = 148;
    goto LABEL_14;
  }
  uint64_t v10 = *((void *)this + 7);
  if (v10 != Host_IO::Length((Host_IO *)*((unsigned int *)this + 10)))
  {
    uint64_t v16 = "this->currLength == Host_IO::Length(this->fileRef)";
    int v17 = 149;
    goto LABEL_14;
  }
  uint64_t v11 = *((void *)this + 6);
  uint64_t v12 = *((void *)this + 7);
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v14 < 0 != v13)
  {
    uint64_t v16 = "this->currOffset <= this->currLength";
    int v17 = 150;
LABEL_14:
    __assert_rtn("Read", "XMPFiles_IO.cpp", v17, v16);
  }
  if (v14 < a3)
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 7;
      exception[1] = "XMPFiles_IO::Read, not enough data";
      *((unsigned char *)exception + 16) = 0;
    }
    a3 = v14;
  }
  if (Host_IO::Read((Host_IO *)*((unsigned int *)this + 10), a2, a3) != a3)
  {
    unint64_t v18 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)unint64_t v18 = 7;
    v18[1] = "XMP_Enforce failed: (amountRead == count) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/"
             "source/XMPFiles_IO.cpp at line 158";
    *((unsigned char *)v18 + 16) = 0;
  }
  *((void *)this + 6) += a3;
  return a3;
}

void sub_188832E80(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = (unsigned int *)__cxa_begin_catch(exception_object);
    uint64_t v4 = *(void *)(v2 + 88);
    if (v4)
    {
      int v5 = (void *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        int v5 = (void *)*v5;
      }
      GenericErrorCallback::NotifyClient(v4, 2, v3, (uint64_t)v5);
      __cxa_end_catch();
      JUMPOUT(0x188832DACLL);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_188832ED4()
{
}

void XMPFiles_IO::Write(XMPFiles_IO *this, const void *a2, size_t a3)
{
  int v4 = *((_DWORD *)this + 10);
  if (v4 == -1)
  {
    long long v15 = "this->fileRef != Host_IO::noFileRef";
    int v16 = 174;
    goto LABEL_15;
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7 != Host_IO::Seek(v4, 0, 1u))
  {
    long long v15 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    int v16 = 175;
    goto LABEL_15;
  }
  uint64_t v8 = *((void *)this + 7);
  if (v8 != Host_IO::Length((Host_IO *)*((unsigned int *)this + 10)))
  {
    long long v15 = "this->currLength == Host_IO::Length(this->fileRef)";
    int v16 = 176;
    goto LABEL_15;
  }
  if (*((void *)this + 6) > *((void *)this + 7))
  {
    long long v15 = "this->currOffset <= this->currLength";
    int v16 = 177;
LABEL_15:
    __assert_rtn("Write", "XMPFiles_IO.cpp", v16, v15);
  }
  if (*((unsigned char *)this + 8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 112;
    exception[1] = "New_XMPFiles_IO, write not permitted on read only file";
    *((unsigned char *)exception + 16) = 0;
  }
  Host_IO::Write((Host_IO *)*((unsigned int *)this + 10), a2, a3);
  uint64_t v12 = (XMP_ProgressTracker *)*((void *)this + 10);
  if (v12)
  {
    v9.n128_f32[0] = (float)a3;
    XMP_ProgressTracker::AddWorkDone(v12, v9, v10, v11);
  }
  uint64_t v13 = *((void *)this + 7);
  uint64_t v14 = *((void *)this + 6) + a3;
  *((void *)this + 6) = v14;
  if (v14 > v13) {
    *((void *)this + 7) = v14;
  }
}

void sub_188833024(void *a1)
{
  __cxa_begin_catch(a1);
  *(void *)(v1 + 48) = Host_IO::Seek(*(_DWORD *)(v1 + 40), 0, 1u);
  *(void *)(v1 + 56) = Host_IO::Length((Host_IO *)*(unsigned int *)(v1 + 40));
  __cxa_rethrow();
}

void sub_18883305C(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2) {
    _Unwind_Resume(a1);
  }
  int v5 = (unsigned int *)__cxa_begin_catch(a1);
  uint64_t v6 = *(void *)(v2 + 88);
  if (!v6) {
    __cxa_rethrow();
  }
  uint64_t v7 = (void *)(v2 + 16);
  if (*(char *)(v2 + 39) < 0) {
    uint64_t v7 = (void *)*v7;
  }
  GenericErrorCallback::NotifyClient(v6, 2, v5, (uint64_t)v7);
  __cxa_end_catch();
}

void sub_1888330D0()
{
}

off_t XMPFiles_IO::Seek(uint64_t a1, off_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == -1)
  {
    uint64_t v14 = "this->fileRef != Host_IO::noFileRef";
    int v15 = 210;
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7 != Host_IO::Seek(v4, 0, 1u))
  {
    uint64_t v14 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    int v15 = 211;
    goto LABEL_17;
  }
  __n128 v9 = (off_t *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8 != Host_IO::Length((Host_IO *)*(unsigned int *)(a1 + 40)))
  {
    uint64_t v14 = "this->currLength == Host_IO::Length(this->fileRef)";
    int v15 = 212;
LABEL_17:
    __assert_rtn("Seek", "XMPFiles_IO.cpp", v15, v14);
  }
  __n128 v10 = (void *)(a1 + 48);
  if (a3 != 1)
  {
    off_t v11 = a2;
    if (a3 != 2) {
      goto LABEL_8;
    }
    __n128 v10 = (void *)(a1 + 56);
  }
  off_t v11 = *v10 + a2;
LABEL_8:
  if (v11 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "XMP_Enforce failed: (newOffset >= 0) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK"
                   "/source/XMPFiles_IO.cpp at line 220";
    *((unsigned char *)exception + 16) = 0;
  }
  if (v11 > *v9)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      int v17 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)int v17 = 7;
      v17[1] = "XMPFiles_IO::Seek, read-only seek beyond EOF";
      *((unsigned char *)v17 + 16) = 0;
    }
    Host_IO::SetEOF((Host_IO *)*(unsigned int *)(a1 + 40), v11);
    a2 = 0;
    *__n128 v9 = v11;
    a3 = 2;
  }
  off_t v12 = Host_IO::Seek(*(_DWORD *)(a1 + 40), a2, a3);
  *(void *)(a1 + 48) = v12;
  if (v12 != v11) {
    __assert_rtn("Seek", "XMPFiles_IO.cpp", 232, "this->currOffset == newOffset");
  }
  return v11;
}

void sub_1888332A0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = (unsigned int *)__cxa_begin_catch(exception_object);
    uint64_t v4 = *(void *)(v2 + 88);
    if (v4)
    {
      int v5 = (void *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0) {
        int v5 = (void *)*v5;
      }
      GenericErrorCallback::NotifyClient(v4, 2, v3, (uint64_t)v5);
      __cxa_end_catch();
      JUMPOUT(0x1888331B8);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1888332F4()
{
}

uint64_t XMPFiles_IO::Length(XMPFiles_IO *this)
{
  int v2 = *((_DWORD *)this + 10);
  if (v2 == -1)
  {
    uint64_t v6 = "this->fileRef != Host_IO::noFileRef";
    int v7 = 246;
    goto LABEL_8;
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3 != Host_IO::Seek(v2, 0, 1u))
  {
    uint64_t v6 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    int v7 = 247;
    goto LABEL_8;
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4 != Host_IO::Length((Host_IO *)*((unsigned int *)this + 10)))
  {
    uint64_t v6 = "this->currLength == Host_IO::Length(this->fileRef)";
    int v7 = 248;
LABEL_8:
    __assert_rtn("Length", "XMPFiles_IO.cpp", v7, v6);
  }
  return *((void *)this + 7);
}

off_t XMPFiles_IO::Truncate(XMPFiles_IO *this, off_t a2)
{
  int v3 = *((_DWORD *)this + 10);
  if (v3 == -1)
  {
    __n128 v10 = "this->fileRef != Host_IO::noFileRef";
    int v11 = 261;
    goto LABEL_14;
  }
  uint64_t v5 = *((void *)this + 6);
  if (v5 != Host_IO::Seek(v3, 0, 1u))
  {
    __n128 v10 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    int v11 = 262;
    goto LABEL_14;
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6 != Host_IO::Length((Host_IO *)*((unsigned int *)this + 10)))
  {
    __n128 v10 = "this->currLength == Host_IO::Length(this->fileRef)";
    int v11 = 263;
    goto LABEL_14;
  }
  if (*((unsigned char *)this + 8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 112;
    exception[1] = "New_XMPFiles_IO, truncate not permitted on read only file";
    *((unsigned char *)exception + 16) = 0;
  }
  if (*((void *)this + 7) < a2)
  {
    uint64_t v13 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)uint64_t v13 = 7;
    v13[1] = "XMP_Enforce failed: (length <= this->currLength) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolk"
             "it-SDK/source/XMPFiles_IO.cpp at line 268";
    *((unsigned char *)v13 + 16) = 0;
  }
  Host_IO::SetEOF((Host_IO *)*((unsigned int *)this + 10), a2);
  *((void *)this + 7) = a2;
  off_t v7 = *((void *)this + 6);
  if (v7 > a2)
  {
    *((void *)this + 6) = a2;
    off_t v7 = a2;
  }
  Host_IO::Seek(*((_DWORD *)this + 10), v7, 0);
  uint64_t v8 = *((void *)this + 6);
  off_t result = Host_IO::Seek(*((_DWORD *)this + 10), 0, 1u);
  if (v8 != result)
  {
    __n128 v10 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    int v11 = 276;
LABEL_14:
    __assert_rtn("Truncate", "XMPFiles_IO.cpp", v11, v10);
  }
  return result;
}

void sub_188833584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  int v15 = (unsigned int *)__cxa_begin_catch(exception_object);
  uint64_t v16 = *(void *)(v14 + 88);
  if (!v16) {
    __cxa_rethrow();
  }
  int v17 = (void *)(v14 + 16);
  if (*(char *)(v14 + 39) < 0) {
    int v17 = (void *)*v17;
  }
  GenericErrorCallback::NotifyClient(v16, 2, v15, (uint64_t)v17);
  __cxa_end_catch();
}

void sub_1888335E8()
{
}

uint64_t XMPFiles_IO::DeriveTemp(XMPFiles_IO *this)
{
  if (*((_DWORD *)this + 10) == -1) {
    __assert_rtn("DeriveTemp", "XMPFiles_IO.cpp", 288, "this->fileRef != Host_IO::noFileRef");
  }
  uint64_t v2 = *((void *)this + 9);
  if (!v2)
  {
    if (*((unsigned char *)this + 8))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      exception[1] = "XMPFiles_IO::DeriveTemp, can't derive from read-only";
      *((unsigned char *)exception + 16) = 0;
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = 0;
    int v3 = (XMPFiles_IO *)((char *)this + 16);
    if (*((char *)this + 39) < 0) {
      int v3 = *(Host_IO **)v3;
    }
    Host_IO::CreateTemp(v3, (uint64_t)&v11);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v11;
    uint64_t v14 = v12;
    if (v12 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)v11;
    }
    uint64_t v5 = XMPFiles_IO::New_XMPFiles_IO((Host_IO *)v4, 0, 0);
    uint64_t v2 = v5;
    if (!v5)
    {
      if (v14 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      Host_IO::Delete((Host_IO *)v8, v6);
      __n128 v9 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)__n128 v9 = 9;
      v9[1] = "XMPFiles_IO::DeriveTemp, can't open temp file";
      *((unsigned char *)v9 + 16) = 0;
    }
    *(unsigned char *)(v5 + 64) = 1;
    *((void *)this + 9) = v5;
    *(void *)(v5 + 80) = *((void *)this + 10);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
  return v2;
}

void sub_188833774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, void **__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2 == 1)
  {
    uint64_t v19 = (unsigned int *)__cxa_begin_catch(a1);
    uint64_t v20 = *(void *)(v18 + 88);
    if (v20)
    {
      if (a18 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      GenericErrorCallback::NotifyClient(v20, 2, v19, (uint64_t)p_p);
      __cxa_end_catch();
      JUMPOUT(0x1888336ACLL);
    }
    __cxa_rethrow();
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_188833834()
{
}

off_t XMPFiles_IO::AbsorbTemp(XMPFiles_IO *this)
{
  if (*((_DWORD *)this + 10) == -1) {
    __assert_rtn("AbsorbTemp", "XMPFiles_IO.cpp", 323, "this->fileRef != Host_IO::noFileRef");
  }
  uint64_t v2 = (char *)*((void *)this + 9);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "XMPFiles_IO::AbsorbTemp, no temp to absorb";
    *((unsigned char *)exception + 16) = 0;
  }
  if (!v2[64]) {
    __assert_rtn("AbsorbTemp", "XMPFiles_IO.cpp", 329, "temp->isTemp");
  }
  XMPFiles_IO::Close(this);
  XMPFiles_IO::Close((XMPFiles_IO *)v2);
  uint64_t v4 = (XMPFiles_IO *)((char *)this + 16);
  uint64_t v5 = (std::__fs::filesystem::path *)((char *)this + 16);
  if (*((char *)this + 39) < 0) {
    uint64_t v5 = *(std::__fs::filesystem::path **)v4;
  }
  uint64_t v6 = (const std::__fs::filesystem::path *)(v2 + 16);
  if (v2[39] < 0) {
    uint64_t v6 = (const std::__fs::filesystem::path *)v6->__pn_.__r_.__value_.__r.__words[0];
  }
  Host_IO::SwapData(v5, v6, v3);
  (*(void (**)(XMPFiles_IO *))(*(void *)this + 56))(this);
  if (*((char *)this + 39) < 0) {
    uint64_t v4 = *(Host_IO **)v4;
  }
  off_t v7 = (Host_IO *)Host_IO::Open(v4, 0);
  *((_DWORD *)this + 10) = v7;
  off_t result = Host_IO::Length(v7);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = result;
  return result;
}

void sub_18883398C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  int v15 = (unsigned int *)__cxa_begin_catch(exception_object);
  uint64_t v16 = *(void *)(v14 + 88);
  if (!v16) {
    __cxa_rethrow();
  }
  int v17 = (void *)(v14 + 16);
  if (*(char *)(v14 + 39) < 0) {
    int v17 = (void *)*v17;
  }
  GenericErrorCallback::NotifyClient(v16, 2, v15, (uint64_t)v17);
  __cxa_end_catch();
}

void sub_1888339F0()
{
}

uint64_t XMPFiles_IO::Close(XMPFiles_IO *this)
{
  uint64_t result = *((unsigned int *)this + 10);
  if (result != -1)
  {
    uint64_t result = Host_IO::Close(result);
    *((_DWORD *)this + 10) = -1;
  }
  return result;
}

uint64_t XMPFiles_IO::DeleteTemp(uint64_t this, const char *a2)
{
  uint64_t v2 = *(void *)(this + 72);
  if (v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(unsigned int *)(v2 + 40);
    if (v4 != -1)
    {
      Host_IO::Close(v4);
      *(_DWORD *)(v2 + 40) = -1;
    }
    if (*(char *)(v2 + 39) < 0)
    {
      if (!*(void *)(v2 + 24))
      {
LABEL_10:
        this = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 72))(v2);
        *(void *)(v3 + 72) = 0;
        return this;
      }
      uint64_t v5 = *(Host_IO **)(v2 + 16);
    }
    else
    {
      uint64_t v5 = (Host_IO *)(v2 + 16);
      if (!*(unsigned char *)(v2 + 39)) {
        goto LABEL_10;
      }
    }
    Host_IO::Delete(v5, a2);
    std::string::erase((std::string *)(v2 + 16), 0, 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_10;
  }
  return this;
}

void AdobeXMPCore_Int::DOMParserImpl::DOMParserImpl(AdobeXMPCore_Int::DOMParserImpl *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 368)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 304)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 216)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 224)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 232)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 312)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 320)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 376)) = a2[8];
  uint64_t v3 = (AdobeXMPCore_Int::ISharedMutex *)a2[9];
  *(void *)((char *)this + *(void *)(*(void *)this - 384)) = v3;
  AdobeXMPCore_Int::ISharedMutex::CreateSharedMutex(v3);
}

void AdobeXMPCore_Int::DOMParserImpl::Clone(AdobeXMPCore_Int::DOMParserImpl *this)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(AdobeXMPCore_Int::DOMParserImpl *))(*(void *)this + 312))(this);
  if (v2)
  {
    memset(v14, 0, sizeof(v14));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v14, (char *)this + 8, 0);
    uint64_t v3 = *(void *)this;
    uint64_t v4 = (void *)(*(void *)this - 376);
    uint64_t v5 = *(void *)v2;
    v2[*(void *)(v5 - 376) + 48] = *((unsigned char *)this + *v4 + 48);
    v2[*(void *)(v5 - 376) + 49] = *((unsigned char *)this + *v4 + 49);
    if (*(void *)((char *)this + *v4 + 32)) {
      operator new();
    }
    if (*(void *)((char *)this + *(void *)(v3 - 376) + 40)) {
      operator new();
    }
    uint64_t v6 = (char *)this + *(void *)(v3 - 376);
    off_t v7 = (char *)*((void *)v6 + 1);
    uint64_t v8 = v6 + 16;
    if (v7 != v6 + 16)
    {
      do
      {
        __n128 v9 = (uint64_t **)&v2[*(void *)(*(void *)v2 - 376) + 8];
        int v15 = v7 + 32;
        __n128 v10 = std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v9, (unint64_t *)v7 + 4, (uint64_t)&std::piecewise_construct, &v15);
        *((_DWORD *)v10 + 10) = *((_DWORD *)v7 + 10);
        v10[6] = (uint64_t *)*((void *)v7 + 6);
        long long v11 = (char *)*((void *)v7 + 1);
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            long long v11 = *(char **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (char *)*((void *)v7 + 2);
            BOOL v13 = *(void *)v12 == (void)v7;
            off_t v7 = v12;
          }
          while (!v13);
        }
        off_t v7 = v12;
      }
      while (v12 != v8);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v14);
  }
  AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::DOMParserImpl>(v2, 1, v14);
}

void sub_188834214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x18C11C0E0](v2, 0x1020C4062D53EE8);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::DOMParserImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 384)])(&a1[*(void *)(*(void *)a1 - 384)]);
    std::shared_ptr<AdobeXMPCore_Int::DOMParserImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMParserImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_1888343E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::DOMParserImpl::Parse(AdobeXMPCore_Int::DOMParserImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 368))
                                                + 264))(&v7);
  if (v7)
  {
    uint64_t v4 = (AdobeXMPCore::IMetadata_v1 *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
    if ((v4 - 1) < 2)
    {
      *a2 = 0;
      a2[1] = 0;
      AdobeXMPCore::IMetadata_v1::CreateMetadata(v4);
    }
    if (v4 == 4)
    {
      uint64_t v5 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7
                                                                                    + *(void *)(*(void *)v7 - 64))
                                                                        + 16))(v7 + *(void *)(*(void *)v7 - 64), 0x634D657461646174, 1);
      uint64_t v6 = (uint64_t)v5;
      if (v5)
      {
        (**(void (***)(char *))&v5[*(void *)(*(void *)v5 - 56)])(&v5[*(void *)(*(void *)v5 - 56)]);
        std::shared_ptr<AdobeXMPCore::IMetadata_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IMetadata_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a2, v6);
      }
      *a2 = 0;
      a2[1] = 0;
      AdobeXMPCore::IMetadata_v1::CreateMetadata(0);
    }
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
  }
  *a2 = 0;
  a2[1] = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1888347DC()
{
  if (*(void *)(v0 + 8)) {
    JUMPOUT(0x1888347F0);
  }
  JUMPOUT(0x1888347FCLL);
}

void sub_1888347F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::DOMParserImpl::ParseWithSpecificAction(void *a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v75 = 0;
  long long v76 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)a1 + *(void *)(*a1 - 368)) + 264))(&v75);
  if (v75)
  {
    switch(a4)
    {
      case 0:
        if (!*a5)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2);
        }
        int v7 = (*(uint64_t (**)(void))(*(void *)*a5 + 40))(*a5);
        if (v7 != 2 && v7 != 4)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 5, 2);
        }
        uint64_t v9 = *a5 + *(void *)(*(void *)*a5 - 64);
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 0x63436D704E6F6465, 1);
        long long v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75
                                                                                         + *(void *)(*(void *)v75 - 64))
                                                                             + 16))(v75 + *(void *)(*(void *)v75 - 64), 0x634D657461646174, 1);
        uint64_t v12 = v11;
        if (!v11)
        {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 520))(v10, &v75);
          break;
        }
        long long v85 = 0uLL;
        (*(void (**)(long long *__return_ptr))(*(void *)((char *)v11 + *(void *)(*v11 - 688)) + 552))(&v85);
        while ((void)v85)
        {
          exception_object[0] = 0;
          exception_object[1] = 0;
          (*(void (**)(_Unwind_Exception **__return_ptr))(*(void *)v85 + 48))(exception_object);
          (*(void (**)(long long *__return_ptr))(*(void *)v85 + 56))(&v83);
          long long v13 = v83;
          long long v83 = 0uLL;
          uint64_t v14 = (std::__shared_weak_count *)*((void *)&v85 + 1);
          long long v85 = v13;
          if (v14)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            if (*((void *)&v83 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
            }
          }
          int v15 = (void *)(*(uint64_t (**)(void *))(*v12 + 776))(v12);
          uint64_t v16 = *(void *)(*v15 - 864);
          (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 88))(&v81);
          (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 72))(&v79);
          (*(void (**)(long long *__return_ptr))(*(void *)((char *)v15 + v16) + 744))(&v83);
          long long v17 = v83;
          long long v83 = 0uLL;
          uint64_t v18 = (std::__shared_weak_count *)exception_object[1];
          *(_OWORD *)exception_object = v17;
          if (v18)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
            if (*((void *)&v83 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
            }
          }
          if (v80) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v80);
          }
          if (v82) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v82);
          }
          (*(void (**)(uint64_t, _Unwind_Exception **))(*(void *)v10 + 520))(v10, exception_object);
          if (exception_object[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)exception_object[1]);
          }
        }
        goto LABEL_140;
      case 1:
        if (!*a5)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2);
        }
        int v54 = (*(uint64_t (**)(void))(*(void *)*a5 + 40))(*a5);
        if (v54 == 2) {
          goto LABEL_116;
        }
        if (v54 != 4)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 5, 2);
        }
        uint64_t v55 = *a5 + *(void *)(*(void *)*a5 - 64);
        uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v55 + 16))(v55, 0x635374724E6F6465, 1);
        long long v57 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75
                                                                                         + *(void *)(*(void *)v75 - 64))
                                                                             + 16))(v75 + *(void *)(*(void *)v75 - 64), 0x634D657461646174, 1);
        uint64_t v58 = v57;
        if (v57)
        {
          long long v85 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)((char *)v57 + *(void *)(*v57 - 688)) + 552))(&v85);
          while ((void)v85)
          {
            exception_object[0] = 0;
            exception_object[1] = 0;
            (*(void (**)(_Unwind_Exception **__return_ptr))(*(void *)v85 + 48))(exception_object);
            (*(void (**)(long long *__return_ptr))(*(void *)v85 + 56))(&v83);
            long long v59 = v83;
            long long v83 = 0uLL;
            long long v60 = (std::__shared_weak_count *)*((void *)&v85 + 1);
            long long v85 = v59;
            if (v60)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v60);
              if (*((void *)&v83 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
              }
            }
            uint64_t v61 = (void *)(*(uint64_t (**)(void *))(*v58 + 776))(v58);
            uint64_t v62 = *(void *)(*v61 - 864);
            (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 88))(&v81);
            (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 72))(&v79);
            (*(void (**)(long long *__return_ptr))(*(void *)((char *)v61 + v62) + 744))(&v83);
            long long v63 = v83;
            long long v83 = 0uLL;
            uint64_t v64 = (std::__shared_weak_count *)exception_object[1];
            *(_OWORD *)exception_object = v63;
            if (v64)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v64);
              if (*((void *)&v83 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
              }
            }
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            if (v82) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v82);
            }
            (*(void (**)(uint64_t *__return_ptr, uint64_t, _Unwind_Exception **))(*(void *)v56 + 664))(&v77, v56, exception_object);
            if (v78) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v78);
            }
            if (exception_object[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)exception_object[1]);
            }
          }
        }
        else
        {
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v56 + 664))(&v85, v56, &v75);
        }
        goto LABEL_140;
      case 2:
        if (!*a5)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2);
        }
        int v30 = (*(uint64_t (**)(void))(*(void *)*a5 + 40))(*a5);
        if (v30 == 2)
        {
LABEL_116:
          uint64_t v69 = *a5 + *(void *)(*(void *)*a5 - 64);
          long long v70 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v69 + 16))(v69, 0x634172724E6F6465, 1);
          AdobeXMPCore_Int::ReplaceChildren(v70, &v75);
          break;
        }
        if (v30 != 4)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 5, 2);
        }
        uint64_t v31 = *a5 + *(void *)(*(void *)*a5 - 64);
        uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31 + 16))(v31, 0x635374724E6F6465, 1);
        uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75
                                                                                         + *(void *)(*(void *)v75 - 64))
                                                                             + 16))(v75 + *(void *)(*(void *)v75 - 64), 0x634D657461646174, 1);
        uint64_t v34 = v33;
        if (v33)
        {
          long long v85 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)((char *)v33 + *(void *)(*v33 - 688)) + 552))(&v85);
          while ((void)v85)
          {
            exception_object[0] = 0;
            exception_object[1] = 0;
            (*(void (**)(_Unwind_Exception **__return_ptr))(*(void *)v85 + 48))(exception_object);
            (*(void (**)(long long *__return_ptr))(*(void *)v85 + 56))(&v83);
            long long v35 = v83;
            long long v83 = 0uLL;
            uint64_t v36 = (std::__shared_weak_count *)*((void *)&v85 + 1);
            long long v85 = v35;
            if (v36)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              if (*((void *)&v83 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
              }
            }
            unint64_t v37 = (void *)(*(uint64_t (**)(void *))(*v34 + 776))(v34);
            uint64_t v38 = *(void *)(*v37 - 864);
            (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 88))(&v81);
            (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 72))(&v79);
            (*(void (**)(long long *__return_ptr))(*(void *)((char *)v37 + v38) + 744))(&v83);
            long long v39 = v83;
            long long v83 = 0uLL;
            uint64_t v40 = (std::__shared_weak_count *)exception_object[1];
            *(_OWORD *)exception_object = v39;
            if (v40)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
              if (*((void *)&v83 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
              }
            }
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            if (v82) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v82);
            }
            uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 688))(v32);
            (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 88))(&v81);
            (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 72))(&v79);
            (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(void *)v41 + 736))(&v83, v41, &v81, &v79);
            uint64_t v42 = v83;
            if (*((void *)&v83 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
            }
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            if (v82) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v82);
            }
            uint64_t v43 = *(void *)v32;
            if (v42)
            {
              (*(void (**)(uint64_t *__return_ptr, uint64_t, _Unwind_Exception **))(v43 + 664))(&v77, v32, exception_object);
              if (v78) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v78);
              }
            }
            else
            {
              (*(void (**)(uint64_t, _Unwind_Exception **))(*(void *)(v32 + *(void *)(v43 - 688)) + 520))(v32 + *(void *)(v43 - 688), exception_object);
            }
            if (exception_object[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)exception_object[1]);
            }
          }
          goto LABEL_140;
        }
        uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 688))(v32);
        (*(void (**)(_Unwind_Exception **__return_ptr))(*(void *)v75 + 88))(exception_object);
        (*(void (**)(long long *__return_ptr))(*(void *)v75 + 72))(&v83);
        (*(void (**)(long long *__return_ptr, uint64_t, _Unwind_Exception **, long long *))(*(void *)v72
                                                                                                  + 736))(&v85, v72, exception_object, &v83);
        uint64_t v73 = v85;
        if (*((void *)&v85 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
        }
        if (*((void *)&v83 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
        }
        if (exception_object[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)exception_object[1]);
        }
        uint64_t v74 = *(void *)v32;
        if (v73)
        {
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(v74 + 664))(&v85, v32, &v75);
          goto LABEL_140;
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)(v32 + *(void *)(v74 - 688)) + 520))(v32 + *(void *)(v74 - 688), &v75);
        break;
      case 3:
        if (!*a5)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2);
        }
        if (((*(uint64_t (**)(void))(*(void *)*a5 + 160))(*a5) & 1) == 0)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 6, 2);
        }
        uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 + *(void *)(*(void *)v75 - 64))
                                                                   + 16))(v75 + *(void *)(*(void *)v75 - 64), 0x634D657461646174, 1);
        uint64_t v45 = (*(uint64_t (**)(void))(*(void *)*a5 + 280))(*a5);
        BOOL v46 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v45 + 528))(v45);
        uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v46[*(void *)(*(void *)v46 - 64)]
                                                                  + 16))(&v46[*(void *)(*(void *)v46 - 64)], 0x634172724E6F6465, 1);
        if (!v44)
        {
          uint64_t v71 = (*(uint64_t (**)(void))(*(void *)*a5 + 176))();
          goto LABEL_119;
        }
        long long v85 = 0uLL;
        (*(void (**)(long long *__return_ptr))(*(void *)(v44 + *(void *)(*(void *)v44 - 688)) + 552))(&v85);
        while ((void)v85)
        {
          exception_object[0] = 0;
          exception_object[1] = 0;
          (*(void (**)(_Unwind_Exception **__return_ptr))(*(void *)v85 + 48))(exception_object);
          (*(void (**)(long long *__return_ptr))(*(void *)v85 + 56))(&v83);
          long long v47 = v83;
          long long v83 = 0uLL;
          uint64_t v48 = (std::__shared_weak_count *)*((void *)&v85 + 1);
          long long v85 = v47;
          if (v48)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
            if (*((void *)&v83 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
            }
          }
          uint64_t v49 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v44 + 776))(v44);
          uint64_t v50 = *(void *)(*v49 - 864);
          (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 88))(&v81);
          (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 72))(&v79);
          (*(void (**)(long long *__return_ptr))(*(void *)((char *)v49 + v50) + 744))(&v83);
          long long v51 = v83;
          long long v83 = 0uLL;
          long long v52 = (std::__shared_weak_count *)exception_object[1];
          *(_OWORD *)exception_object = v51;
          if (v52)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
            if (*((void *)&v83 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
            }
          }
          if (v80) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v80);
          }
          if (v82) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v82);
          }
          uint64_t v53 = (*(uint64_t (**)(void))(*(void *)*a5 + 176))();
          (*(void (**)(uint64_t, _Unwind_Exception **, uint64_t))(*(void *)v22 + 664))(v22, exception_object, v53);
          if (exception_object[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)exception_object[1]);
          }
        }
        goto LABEL_140;
      case 4:
        if (!*a5)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2);
        }
        if (((*(uint64_t (**)(void))(*(void *)*a5 + 160))(*a5) & 1) == 0)
        {
          long long v85 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 6, 2);
        }
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v75 + *(void *)(*(void *)v75 - 64))
                                                                   + 16))(v75 + *(void *)(*(void *)v75 - 64), 0x634D657461646174, 1);
        uint64_t v20 = (*(uint64_t (**)(void))(*(void *)*a5 + 280))(*a5);
        uint64_t v21 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 528))(v20);
        uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v21[*(void *)(*(void *)v21 - 64)]
                                                                  + 16))(&v21[*(void *)(*(void *)v21 - 64)], 0x634172724E6F6465, 1);
        if (v19)
        {
          long long v85 = 0uLL;
          (*(void (**)(long long *__return_ptr))(*(void *)(v19 + *(void *)(*(void *)v19 - 688)) + 552))(&v85);
          uint64_t v23 = (*(uint64_t (**)(void))(*(void *)*a5 + 176))();
          while ((void)v85)
          {
            exception_object[0] = 0;
            exception_object[1] = 0;
            (*(void (**)(_Unwind_Exception **__return_ptr))(*(void *)v85 + 48))(exception_object);
            (*(void (**)(long long *__return_ptr))(*(void *)v85 + 56))(&v83);
            long long v24 = v83;
            long long v83 = 0uLL;
            char v25 = (std::__shared_weak_count *)*((void *)&v85 + 1);
            long long v85 = v24;
            if (v25)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
              if (*((void *)&v83 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
              }
            }
            char v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 776))(v19);
            uint64_t v27 = *(void *)(*v26 - 864);
            (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 88))(&v81);
            (*(void (**)(uint64_t *__return_ptr))(exception_object[0]->exception_class + 72))(&v79);
            (*(void (**)(long long *__return_ptr))(*(void *)((char *)v26 + v27) + 744))(&v83);
            long long v28 = v83;
            long long v83 = 0uLL;
            char v29 = (std::__shared_weak_count *)exception_object[1];
            *(_OWORD *)exception_object = v28;
            if (v29)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
              if (*((void *)&v83 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
              }
            }
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            if (v82) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v82);
            }
            (*(void (**)(uint64_t, _Unwind_Exception **, uint64_t))(*(void *)v22 + 664))(v22, exception_object, v23 + 1);
            uint64_t v23 = (*(uint64_t (**)(_Unwind_Exception *))(exception_object[0]->exception_class + 176))(exception_object[0]);
            if (exception_object[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)exception_object[1]);
            }
          }
LABEL_140:
          long long v68 = (std::__shared_weak_count *)*((void *)&v85 + 1);
          if (*((void *)&v85 + 1)) {
LABEL_141:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        }
        else
        {
          uint64_t v71 = (*(uint64_t (**)(void))(*(void *)*a5 + 176))() + 1;
LABEL_119:
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v22 + 664))(v22, &v75, v71);
        }
        break;
      case 5:
        if (*a5)
        {
          if ((*(unsigned int (**)(void))(*(void *)*a5 + 160))(*a5))
          {
            int v65 = (*(uint64_t (**)(void))(*(void *)*a5 + 40))();
            if (v65 != (*(unsigned int (**)(uint64_t))(*(void *)v75 + 40))(v75))
            {
              long long v85 = 0uLL;
              AdobeXMPCore_Int::IError_I::CreateError(100, 6, 2);
            }
          }
        }
        uint64_t v67 = v75;
        int v66 = v76;
        if (v76) {
          atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v68 = (std::__shared_weak_count *)a5[1];
        *a5 = v67;
        a5[1] = v66;
        if (!v68) {
          break;
        }
        goto LABEL_141;
      default:
        long long v85 = 0uLL;
        AdobeXMPCore_Int::IError_I::CreateError(1, 10000, 2);
    }
  }
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
}

void sub_1888372D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 56);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::DOMParserImpl::GetMutex@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *virtual thunk to'AdobeXMPCore_Int::DOMParserImpl::GetMutex@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (char *)this + *(void *)(*this - 280);
  uint64_t v4 = *((void *)v2 + 1);
  uint64_t v3 = *((void *)v2 + 2);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AdobeXMPCore_Int::IDOMParser_I::CreateDOMParser()
{
  uint64_t v0 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x80);
  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ClientDOMParserWrapperImpl(v0);
}

void sub_188837400(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 120)])(&a1[*(void *)(*(void *)a1 - 120)]);
    std::shared_ptr<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_1888375A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::DOMParserImpl::SetErrorCallback(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::GetActualIDOMParser(AdobeXMPCore_Int::IDOMParser_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 304);
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMParser_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 320);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IDOMParser_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMParser_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 40)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 40)) - 320);
}

void AdobeXMPCore_Int::ReplaceChildren(char *a1, void *a2)
{
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)&a1[*(void *)(*(void *)a1 - 544)] + 224))(&a1[*(void *)(*(void *)a1 - 544)], 1, 1);
  uint64_t v4 = *a2 + *(void *)(*(void *)*a2 - 64);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 0x634D657461646174, 1);
  uint64_t v6 = v5;
  if (v5)
  {
    long long v20 = 0uLL;
    (*(void (**)(long long *__return_ptr))(*(void *)((char *)v5 + *(void *)(*v5 - 688)) + 552))(&v20);
    while ((void)v20)
    {
      long long v19 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)v20 + 48))(&v19);
      (*(void (**)(long long *__return_ptr))(*(void *)v20 + 56))(&v18);
      long long v7 = v18;
      long long v18 = 0uLL;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v20 + 1);
      long long v20 = v7;
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (*((void *)&v18 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
        }
      }
      uint64_t v9 = (void *)(*(uint64_t (**)(void *))(*v6 + 776))(v6);
      uint64_t v10 = *(void *)(*v9 - 864);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 88))(&v16);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 72))(&v14);
      (*(void (**)(long long *__return_ptr))(*(void *)((char *)v9 + v10) + 744))(&v18);
      long long v11 = v18;
      long long v18 = 0uLL;
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v19 + 1);
      long long v19 = v11;
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        if (*((void *)&v18 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
        }
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      (*(void (**)(char *, long long *))(*(void *)&a1[*(void *)(*(void *)a1 - 688)] + 520))(&a1[*(void *)(*(void *)a1 - 688)], &v19);
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
  else
  {
    long long v13 = *(void (**)(void))(*(void *)&a1[*(void *)(*(void *)a1 - 688)] + 520);
    v13();
  }
}

void sub_1888379F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  long long v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::set[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(uint64_t *a1, void *a2, void *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(a1, a2, a3);
  return a1;
}

void sub_188837A84(_Unwind_Exception *a1)
{
  std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v5, v6, v4 + 4, v4 + 4);
      long long v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__find_equal<unsigned long long>(a1, a2, &v12, &v11, a3);
  long long v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v6);
    long long v7 = (uint64_t *)(**MemoryAllocator)(MemoryAllocator, 40);
    v7[4] = *a4;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v12, v8, v7);
  }
  return v7;
}

void *std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__find_equal<unsigned long long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    long long v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          long long v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        long long v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(result, *a2);
    uint64_t v4 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(v3, a2[1]);
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v4) + 8);
    return v5();
  }
  return result;
}

void *std::map<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType>>>::map[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__tree_node<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,void *> *,long>>>(void *a1, void *a2, void *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
  std::map<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType>>>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__tree_node<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,void *> *,long>>>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_188837E30(_Unwind_Exception *a1)
{
  std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType>>>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__tree_node<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,void *> *,long>>>(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unint64_t v6 = (void *)(result + 8);
    do
    {
      uint64_t result = std::__tree<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType> const&>(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v6 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__find_equal<unsigned long long>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = *(void *)v6;
  if (!*(void *)v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v6);
    uint64_t v7 = (**MemoryAllocator)(MemoryAllocator, 48);
    *(_OWORD *)(v7 + 32) = *a4;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    uint64_t v12 = (**MemoryAllocator)(MemoryAllocator, 56);
    *(void *)(v12 + 32) = **a4;
    *(_DWORD *)(v12 + 40) = 0;
    *(void *)(v12 + 48) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::shared_ptr<AdobeXMPCore_Int::DOMParserImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMParserImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1888380EC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 384) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188838154(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::DOMParserImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 384);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMParserImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMParserImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::DOMParserImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMParserImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore::IMetadata_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IMetadata_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1888382EC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 56) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188838350(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore::IMetadata_v1 *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 56);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore::IMetadata_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IMetadata_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IMetadata_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IMetadata_v1>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore::IMetadata_v1 *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IMetadata_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IMetadata_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1888384E4(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 120) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188838548(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 120);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void *OUTLINED_FUNCTION_0_1()
{
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  return __cxa_begin_catch(v0);
}

void AdobeXMPCore_Int::DOMParserImpl::Parse(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__cxa_get_exception_ptr(a1) + 1);
  if (v2)
  {
    OUTLINED_FUNCTION_0_1();
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    __cxa_begin_catch(a1);
  }
}

void AdobeXMPCore_Int::ReplaceChildren(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__cxa_get_exception_ptr(a1) + 1);
  if (v2)
  {
    OUTLINED_FUNCTION_0_1();
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    __cxa_begin_catch(a1);
  }

  __cxa_end_catch();
}

void *AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointer(AdobeXMPCore_Int::IPathSegment_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x6350617468536567)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6350617468536567, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 160));
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6350617468536567, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_188838824(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointer(AdobeXMPCore_Int::IPathSegment_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IPathSegment_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getInterfacePointer(AdobeXMPCore_Int::IPathSegment_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPathSegment_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPathSegment_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPathSegment_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  BOOL v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IPathSegment_I::getInterfacePointer(AdobeXMPCore_Int::IPathSegment_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IPathSegment_I::getInterfacePointer((AdobeXMPCore_Int::IPathSegment_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getNameSpace(AdobeXMPCore_Int::IPathSegment_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPathSegment_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(void *)(*(void *)this - 160), (void (*)(char **__return_ptr, void *))AdobeXMPCore::IPathSegment_v1::GetNameSpace, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPathSegment_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  unint64_t v8 = 0;
  BOOL v9 = 0;
  uint64_t v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_188838C00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    BOOL v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188838BE4);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_188838D7C(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IPathSegment_v1::GetNameSpace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getName(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPathSegment_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)a1 + *(void *)(*a1 - 160), (void (*)(char **__return_ptr, void *))AdobeXMPCore::IPathSegment_v1::GetName, 0);
}

uint64_t AdobeXMPCore::IPathSegment_v1::GetName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getType(AdobeXMPCore_Int::IPathSegment_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IPathSegment_v1,unsigned int,AdobeXMPCore::IPathSegment_v1::ePathSegmentType>(a2, (uint64_t)this + *(void *)(*(void *)this - 160), 0, (uint64_t (*)(void *))AdobeXMPCore::IPathSegment_v1::GetType, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IPathSegment_v1,unsigned int,AdobeXMPCore::IPathSegment_v1::ePathSegmentType>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCore::IPathSegment_v1::GetType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getValue(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPathSegment_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)a1 + *(void *)(*a1 - 160), (void (*)(char **__return_ptr, void *))AdobeXMPCore::IPathSegment_v1::GetValue, 0);
}

uint64_t AdobeXMPCore::IPathSegment_v1::GetValue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::GetActualIPathSegment(AdobeXMPCore_Int::IPathSegment_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 160);
}

void AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPathSegment_I,void *,void *,unsigned long long,unsigned int>(void *a1, void *a2)
{
  exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
  uint64_t v6 = *exception_ptr;
  uint64_t v5 = (std::__shared_weak_count *)exception_ptr[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __cxa_begin_catch(a1);
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6);
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
  (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  __cxa_end_catch();
}

void IterNode::~IterNode(void **this)
{
  uint64_t v2 = this + 8;
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 5;
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void IterInfo::~IterInfo(void **this)
{
  uint64_t v3 = this + 18;
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 15;
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  uint64_t v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void std::_AllocatorDestroyRangeReverse<std::allocator<IterNode>,std::reverse_iterator<IterNode*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator_traits<std::allocator<IterNode>>::destroy[abi:ne180100]<IterNode,void>(v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void AdvanceIterPos()
{
  __assert_rtn("AdvanceIterPos", "XMPIterator.cpp", 254, "(info.currPos == info.endPos) || (info.currPos->visitStage == kIter_BeforeVisit)");
}

uint64_t ImportPhotoData(uint64_t a1, PhotoDataUtils *a2, unsigned int (***a3)(void, uint64_t, void **), uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v22 = 0;
  __s1 = 0;
  uint64_t v24 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 36864, &v22))
  {
    BOOL v12 = WORD1(v22) == 7;
  }
  else
  {
    BOOL v12 = 0;
  }
  if (v12 && HIDWORD(v22) == 4) {
    unsigned int v14 = strncmp(__s1, "0230", 4uLL) >> 31;
  }
  else {
    LOBYTE(v14) = 1;
  }
  v21[0] = 0;
  v21[1] = 0;
  TXMPMeta<std::string>::TXMPMeta(v21);
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal")) {
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "DateTimeOriginal", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSLatitude")) {
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSLatitude", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSLongitude")) {
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSLongitude", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSTimeStamp")) {
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSTimeStamp", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSAltitude")) {
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSAltitude", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef")) {
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings")) {
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, 0, 0);
  }
  TXMPUtils<std::string>::RemoveProperties(a5, (XMPMeta *)"http://ns.adobe.com/tiff/1.0/", 0, (const char *)1);
  TXMPUtils<std::string>::RemoveProperties(a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", 0, (const char *)1);
  if ((v14 & 1) == 0) {
    TXMPUtils<std::string>::RemoveProperties(a5, (XMPMeta *)"http://cipa.jp/exif/1.0/", 0, (const char *)1);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal")) {
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "DateTimeOriginal", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSLatitude")) {
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSLatitude", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSLongitude")) {
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSLongitude", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSTimeStamp")) {
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSTimeStamp", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSAltitude")) {
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSAltitude", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef")) {
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef", 0, 0, 0);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings")) {
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, 0, 0);
  }
  PhotoDataUtils::ImportPSIR(a3, a5, a4);
  unsigned int v15 = a6 & 2;
  if ((a6 & 2) != 0) {
    PhotoDataUtils::Import2WayIPTC(a2, a5, a4);
  }
  unsigned int v16 = a6 & 4;
  if (v16) {
    PhotoDataUtils::Import2WayExif (a1, a5);
  }
  if ((v16 >> 2) | (v15 >> 1)) {
    PhotoDataUtils::Import3WayItems(a1, (uint64_t)a2, a5, a4);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/photoshop/1.0/", "DateCreated"))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v20 = 0;
    if (TXMPMeta<std::string>::GetProperty(a5, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal", (uint64_t)__p, 0))
    {
      if (v20 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      TXMPMeta<std::string>::SetProperty(a5, "http://ns.adobe.com/photoshop/1.0/", "DateCreated", (uint64_t)v17, 0);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
  }
  return TXMPMeta<std::string>::~TXMPMeta(v21);
}

void sub_1888398AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  TXMPMeta<std::string>::~TXMPMeta(&a15);
  _Unwind_Resume(a1);
}

uint64_t ExportPhotoData(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 != 1246774599 && a1 != 1347634208 && a1 != 1414088262) {
    ExportPhotoData();
  }
  uint64_t v9 = a3;
  if (a1 == 1414088262
    && a3
    && (*(unsigned int (**)(uint64_t, void, uint64_t, void))(*(void *)a3 + 24))(a3, 0, 50706, 0))
  {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v9 + 40))(v9, 0, 33723);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v9 + 40))(v9, 0, 34377);
    int v12 = 0;
    a4 = 0;
    long long v13 = 0;
    a5 = 0;
LABEL_19:
    PhotoDataUtils::ExportExif (a2, v9);
    goto LABEL_20;
  }
  if (a4)
  {
    PhotoDataUtils::ExportIPTC(a2, a4);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)a4 + 24))(a4);
    }
    long long v13 = *(unsigned __int8 **)(a4 + 32);
    a4 = *(unsigned int *)(a4 + 40);
    if (a5) {
      PhotoDataUtils::SetIPTCDigest(v13, a4, a5);
    }
    if (v9) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v13 = 0;
    int v12 = 0;
    if (v9) {
      goto LABEL_19;
    }
  }
LABEL_20:
  if (a5) {
    PhotoDataUtils::ExportPSIR(a2, a5);
  }
  switch(a1)
  {
    case 1246774599:
      char v14 = v12 ^ 1;
      if (!a5) {
        char v14 = 1;
      }
      if ((v14 & 1) == 0) {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a5 + 8))(a5, 1028, v13, a4);
      }
      break;
    case 1414088262:
      if (!v9) {
        ExportPhotoData();
      }
      if (v12) {
        (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(void *)v9 + 32))(v9, 0, 33723, 7, a4, v13);
      }
      if (a5 && (*(unsigned int (**)(uint64_t))(*(void *)a5 + 24))(a5))
      {
        uint64_t v19 = 0;
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a5 + 56))(a5, &v19);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 0, 34377, 7, v15, v19);
      }
      goto LABEL_44;
    case 1347634208:
      if (!a5) {
        ExportPhotoData();
      }
      if (v12) {
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a5 + 8))(a5, 1028, v13, a4);
      }
      if (v9)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 184))(v9))
        {
          uint64_t v19 = 0;
          uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)v9 + 224))(v9, &v19, 0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 8))(a5, 1058, v19, v16);
        }
        goto LABEL_44;
      }
LABEL_48:
      LOBYTE(v9) = 1;
      goto LABEL_49;
  }
  if (!v9) {
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v19 = 0;
  __s1 = 0;
  uint64_t v21 = 0;
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 24))(v9, 2, 36864, &v19);
  LOBYTE(v9) = 1;
  if (v17 && WORD1(v19) == 7 && HIDWORD(v19) == 4) {
    LODWORD(v9) = strncmp(__s1, "0230", 4uLL) >> 31;
  }
LABEL_49:
  uint64_t v19 = 0;
  __s1 = 0;
  TXMPMeta<std::string>::TXMPMeta(&v19);
  if (TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings")) {
    TXMPUtils<std::string>::DuplicateSubtree(a2, (uint64_t)&v19, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, 0, 0);
  }
  TXMPUtils<std::string>::RemoveProperties(a2, (XMPMeta *)"http://ns.adobe.com/tiff/1.0/", 0, (const char *)1);
  TXMPUtils<std::string>::RemoveProperties(a2, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", 0, (const char *)1);
  if ((v9 & 1) == 0) {
    TXMPUtils<std::string>::RemoveProperties(a2, (XMPMeta *)"http://cipa.jp/exif/1.0/", 0, (const char *)1);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)&v19, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings")) {
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)&v19, a2, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, 0, 0);
  }
  return TXMPMeta<std::string>::~TXMPMeta(&v19);
}

void sub_188839E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TXMPMeta<std::string>::~TXMPMeta(va);
  _Unwind_Resume(a1);
}

void ExportPhotoData()
{
  __assert_rtn("ExportPhotoData", "ReconcileLegacy.cpp", 113, "(destFormat == kXMP_JPEGFile) || (destFormat == kXMP_TIFFFile) || (destFormat == kXMP_PhotoshopFile)");
}

{
  __assert_rtn("ExportPhotoData", "ReconcileLegacy.cpp", 160, "exif != 0");
}

{
  __assert_rtn("ExportPhotoData", "ReconcileLegacy.cpp", 172, "psir != 0");
}

BOOL AdobeXMPCore_Int::ErrorNotifierWrapperImpl_v1::Notify(uint64_t a1, void *a2)
{
  int v5 = 0;
  int v2 = (*(uint64_t (**)(void, void, int *))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *a2, &v5);
  if (v5) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v2 == 0;
  }
  return !v3;
}

void *AdobeXMPCore_Int::CreateErrorNotifierWrapperImpl(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x10);
    *uint64_t result = &unk_1ED4EDC90;
    result[1] = v1;
  }
  return result;
}

uint64_t AdobeXMPCore_Int::SharedMutexImpl::TryLock(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  return 0;
}

uint64_t AdobeXMPCore_Int::SharedMutexImpl::LockShared(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  return 0;
}

uint64_t AdobeXMPCore_Int::SharedMutexImpl::TryLockShared(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  return 0;
}

uint64_t AdobeXMPCore_Int::SharedMutexImpl::UnlockShared(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  return 0;
}

void AdobeXMPCore_Int::SharedMutexImpl::~SharedMutexImpl(AdobeXMPCore_Int::SharedMutexImpl *this)
{
}

{
  uint64_t vars8;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedMutexImpl *)((char *)this + 8), (uint64_t *)&off_1ED4DD568);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::SharedMutexImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SharedMutexImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::SharedMutexImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SharedMutexImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void *AdobeXMPCore_Int::INameSpacePrefixMap_I::GetInterfacePointer(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::INameSpacePrefixMap_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x634E5350724D6170)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634E5350724D6170, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 48));
    }
  }
  else
  {
    if (a4)
    {
      int v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634E5350724D6170, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_18883A1F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::getInterfacePointer(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INameSpacePrefixMap_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCommon::IVersionable::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INameSpacePrefixMap_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCommon::IVersionable::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::insert(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(void *)(*(void *)this - 48), 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::INameSpacePrefixMap_v1::Insert, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 52, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long,char const*,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a4;
  *a1 = 0;
  int v12 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a4);
  }
  return v11(v12, a8, a9, a10, a11);
}

uint64_t AdobeXMPCore::INameSpacePrefixMap_v1::Insert(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::insert(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::insert((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(void *)(*(void *)this - 176)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::remove(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  int v5 = (char *)this + *(void *)(*(void *)this - 48);
  uint64_t v6 = AdobeXMPCore::INameSpacePrefixMap_v1::RemovePrefix;
  if (*((_DWORD *)v5 + 3) == a2) {
    uint64_t v6 = AdobeXMPCore::INameSpacePrefixMap_v1::RemoveNameSpace;
  }
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long>(a5, (uint64_t)v5, 0, (uint64_t (*)(void *, uint64_t, uint64_t))v6, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 60, (uint64_t)a3, a4);
}

uint64_t AdobeXMPCore::INameSpacePrefixMap_v1::RemovePrefix(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t AdobeXMPCore::INameSpacePrefixMap_v1::RemoveNameSpace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::remove(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::remove((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(void *)(*(void *)this - 184)), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::isPresent(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  int v5 = (char *)this + *(void *)(*(void *)this - 48);
  uint64_t v6 = AdobeXMPCore::INameSpacePrefixMap_v1::IsPrefixPresent;
  if (*((_DWORD *)v5 + 3) == a2) {
    uint64_t v6 = AdobeXMPCore::INameSpacePrefixMap_v1::IsNameSpacePresent;
  }
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long>(a5, (uint64_t)v5, 0, (uint64_t (*)(void *, uint64_t, uint64_t))v6, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 68, (uint64_t)a3, a4);
}

uint64_t AdobeXMPCore::INameSpacePrefixMap_v1::IsPrefixPresent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t AdobeXMPCore::INameSpacePrefixMap_v1::IsNameSpacePresent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::isPresent(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::isPresent((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(void *)(*(void *)this - 192)), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::get(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v6 = (char *)this + *(void *)(*(void *)this - 48);
  if (*((_DWORD *)v6 + 3) == a2) {
    uint64_t v7 = AdobeXMPCore::INameSpacePrefixMap_v1::GetPrefix;
  }
  else {
    uint64_t v7 = AdobeXMPCore::INameSpacePrefixMap_v1::GetNameSpace;
  }
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,char const*,unsigned long long>(a5, (uint64_t)v6, (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))v7, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 76, (uint64_t)a3, a4);
}

uint64_t AdobeXMPCore::INameSpacePrefixMap_v1::GetNameSpace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t AdobeXMPCore::INameSpacePrefixMap_v1::GetPrefix(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,char const*,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  uint64_t v8 = a3;
  *a1 = 0;
  long long v13 = 0;
  char v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    unint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_18883AC94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    char v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18883AC78);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18883AE10(_Unwind_Exception *a1)
{
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::get(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::get((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(void *)(*(void *)this - 200)), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::clone(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCore::INameSpacePrefixMap_v1*,AdobeXMPCore::INameSpacePrefixMap_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 48), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INameSpacePrefixMap_v1::Clone, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCore::INameSpacePrefixMap_v1*,AdobeXMPCore::INameSpacePrefixMap_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x634E5350724D6170, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18883B004(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    char v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18883AFE8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18883B180(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INameSpacePrefixMap_v1::Clone(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::clone(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::clone((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(void *)(*(void *)this - 208)), a2);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::GetActualINameSpacePrefixMap(AdobeXMPCore_Int::INameSpacePrefixMap_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 48);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::GetActualINameSpacePrefixMap(AdobeXMPCore_Int::INameSpacePrefixMap_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 160)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 160)) - 48);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::GetINameSpacePrefixMap_I(AdobeXMPCore_Int::INameSpacePrefixMap_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 168);
}

double PerfUtils::GetElapsedSeconds(PerfUtils *this, uint64_t a2)
{
  if (dword_1E90FFF7C)
  {
    double v4 = *(double *)&PerfUtils::GetElapsedSeconds(unsigned long long,unsigned long long)::sConversionFactor;
  }
  else
  {
    mach_timebase_info((mach_timebase_info_t)&PerfUtils::GetElapsedSeconds(unsigned long long,unsigned long long)::sTimebaseInfo);
    LODWORD(v6) = PerfUtils::GetElapsedSeconds(unsigned long long,unsigned long long)::sTimebaseInfo;
    LODWORD(v5) = dword_1E90FFF7C;
    double v4 = (double)v5 / (double)v6 / 1000000000.0;
    PerfUtils::GetElapsedSeconds(unsigned long long,unsigned long long)::sConversionFactor = *(void *)&v4;
  }
  return v4 * (double)(unint64_t)(a2 - (void)this);
}

double MD5Init(MD5_CTX *a1)
{
  *(void *)a1->count = 0;
  double result = -3.59869635e230;
  *(_OWORD *)a1->state = xmmword_1889AEB80;
  return result;
}

void *MD5Update(MD5_CTX *a1, unsigned __int8 *__src, unsigned int a3)
{
  unint64_t v6 = ((unint64_t)a1->count[0] >> 3) & 0x3F;
  *(void *)a1->count += __PAIR64__(a3 >> 29, 8 * a3);
  unsigned int v7 = 64 - v6;
  if (64 - (int)v6 <= a3)
  {
    memcpy(&a1->buffer[v6], __src, (64 - v6));
    MD5Transform(a1->state, (const char *)a1->buffer);
    unsigned int v9 = v6 ^ 0x7F;
    if ((v6 ^ 0x7F) >= a3)
    {
      uint64_t v8 = 0;
    }
    else
    {
      do
      {
        MD5Transform(a1->state, (const char *)&__src[v9 - 63]);
        v9 += 64;
      }
      while (v9 < a3);
      uint64_t v8 = 0;
      unsigned int v7 = v9 - 63;
    }
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v8 = v6;
  }

  return memcpy(&a1->buffer[v8], &__src[v7], a3 - v7);
}

int8x16_t MD5Transform(unsigned int *a1, const char *a2)
{
  int8x16x4_t v96 = vld4q_s8(a2);
  unsigned int v2 = a1[1];
  unsigned int v4 = a1[2];
  unsigned int v3 = a1[3];
  uint16x8_t v5 = vmovl_u8(*(uint8x8_t *)v96.val[0].i8);
  int8x16_t v6 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v5.i8);
  uint16x8_t v7 = vmovl_high_u8((uint8x16_t)v96.val[0]);
  uint16x8_t v8 = vmovl_high_u8((uint8x16_t)v96.val[1]);
  uint16x8_t v9 = vmovl_u8(*(uint8x8_t *)v96.val[1].i8);
  int8x16_t v10 = vorrq_s8((int8x16_t)vshll_high_n_u16(v8, 8uLL), (int8x16_t)vmovl_high_u16(v7));
  int8x16_t v11 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v8.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v7.i8));
  int8x16_t v12 = vorrq_s8((int8x16_t)vshll_high_n_u16(v9, 8uLL), (int8x16_t)vmovl_high_u16(v5));
  int8x16_t v13 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v9.i8, 8uLL), v6);
  _Q3 = vmovl_u8(*(uint8x8_t *)v96.val[2].i8);
  _Q4 = vmovl_high_u8((uint8x16_t)v96.val[2]);
  __asm { SHLL2           V5.4S, V4.8H, #0x10 }
  int8x16_t v21 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q4.i8, 0x10uLL);
  __asm { SHLL2           V4.4S, V3.8H, #0x10 }
  int8x16_t v23 = vorrq_s8(v13, (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL));
  int8x16_t v24 = vorrq_s8(v12, _Q4);
  int8x16_t v25 = vorrq_s8(v10, _Q5);
  uint16x8_t v26 = vmovl_high_u8((uint8x16_t)v96.val[3]);
  uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v96.val[3].i8);
  int8x16_t v28 = vorrq_s8(v23, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8), 0x18uLL));
  HIDWORD(v29) = *a1 + (v4 & v2) + (v3 & ~v2) + v28.i32[0] - 680876936;
  LODWORD(v29) = HIDWORD(v29);
  int v30 = (v29 >> 25) + v2;
  HIDWORD(v29) = v3 + v28.i32[1] + (v4 & ~v30) + (v30 & v2) - 389564586;
  LODWORD(v29) = HIDWORD(v29);
  int v31 = (v29 >> 20) + v30;
  HIDWORD(v29) = v4 + v28.i32[2] + (v2 & ~v31) + (v31 & v30) + 606105819;
  LODWORD(v29) = HIDWORD(v29);
  int8x16_t v32 = vorrq_s8(v24, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v27), 0x18uLL));
  int v33 = (v29 >> 15) + v31;
  HIDWORD(v29) = v2 + v28.i32[3] + (v30 & ~v33) + (v33 & v31) - 1044525330;
  LODWORD(v29) = HIDWORD(v29);
  int v34 = (v29 >> 10) + v33;
  HIDWORD(v29) = v32.i32[0] + v30 + (v31 & ~v34) + (v34 & v33) - 176418897;
  LODWORD(v29) = HIDWORD(v29);
  int v35 = (v29 >> 25) + v34;
  HIDWORD(v29) = v32.i32[1] + v31 + (v33 & ~v35) + (v35 & v34) + 1200080426;
  LODWORD(v29) = HIDWORD(v29);
  int v36 = (v29 >> 20) + v35;
  HIDWORD(v29) = v32.i32[2] + v33 + (v34 & ~v36) + (v36 & v35) - 1473231341;
  LODWORD(v29) = HIDWORD(v29);
  int8x16_t v37 = vorrq_s8(vorrq_s8(v11, v21), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8), 0x18uLL));
  int v38 = (v29 >> 15) + v36;
  HIDWORD(v29) = v32.i32[3] + v34 + (v35 & ~v38) + (v38 & v36) - 45705983;
  LODWORD(v29) = HIDWORD(v29);
  int v39 = (v29 >> 10) + v38;
  HIDWORD(v29) = v37.i32[0] + v35 + (v36 & ~v39) + (v39 & v38) + 1770035416;
  LODWORD(v29) = HIDWORD(v29);
  int v40 = (v29 >> 25) + v39;
  HIDWORD(v29) = v37.i32[1] + v36 + (v38 & ~v40) + (v40 & v39) - 1958414417;
  LODWORD(v29) = HIDWORD(v29);
  int v41 = (v29 >> 20) + v40;
  HIDWORD(v29) = v37.i32[2] + v38 + (v39 & ~v41) + (v41 & v40) - 42063;
  LODWORD(v29) = HIDWORD(v29);
  int8x16_t result = vorrq_s8(v25, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v26), 0x18uLL));
  int v43 = (v29 >> 15) + v41;
  HIDWORD(v29) = v37.i32[3] + v39 + (v40 & ~v43) + (v43 & v41) - 1990404162;
  LODWORD(v29) = HIDWORD(v29);
  int v44 = (v29 >> 10) + v43;
  HIDWORD(v29) = result.i32[0] + v40 + (v41 & ~v44) + (v44 & v43) + 1804603682;
  LODWORD(v29) = HIDWORD(v29);
  int v45 = (v29 >> 25) + v44;
  HIDWORD(v29) = result.i32[1] + v41 + (v43 & ~v45) + (v45 & v44) - 40341101;
  LODWORD(v29) = HIDWORD(v29);
  int v46 = (v29 >> 20) + v45;
  HIDWORD(v29) = result.i32[2] + v43 + (v44 & ~v46) + (v46 & v45) - 1502002290;
  LODWORD(v29) = HIDWORD(v29);
  int v47 = (v29 >> 15) + v46;
  HIDWORD(v29) = result.i32[3] + v44 + (v45 & ~v47) + (v47 & v46) + 1236535329;
  LODWORD(v29) = HIDWORD(v29);
  int v48 = (v29 >> 10) + v47;
  HIDWORD(v29) = v28.i32[1] + v45 + (v47 & ~v46) - 165796510 + (v48 & v46);
  LODWORD(v29) = HIDWORD(v29);
  int v49 = (v29 >> 27) + v48;
  HIDWORD(v29) = v32.i32[2] + v46 + (v48 & ~v47) - 1069501632 + (v49 & v47);
  LODWORD(v29) = HIDWORD(v29);
  int v50 = (v29 >> 23) + v49;
  HIDWORD(v29) = v37.i32[3] + v47 + (v49 & ~v48) + 643717713 + (v50 & v48);
  LODWORD(v29) = HIDWORD(v29);
  int v51 = (v29 >> 18) + v50;
  HIDWORD(v29) = v28.i32[0] + v48 + (v50 & ~v49) - 373897302 + (v51 & v49);
  LODWORD(v29) = HIDWORD(v29);
  int v52 = (v29 >> 12) + v51;
  HIDWORD(v29) = v32.i32[1] + v49 + (v51 & ~v50) - 701558691 + (v52 & v50);
  LODWORD(v29) = HIDWORD(v29);
  int v53 = (v29 >> 27) + v52;
  HIDWORD(v29) = v37.i32[2] + v50 + (v52 & ~v51) + 38016083 + (v53 & v51);
  LODWORD(v29) = HIDWORD(v29);
  int v54 = (v29 >> 23) + v53;
  HIDWORD(v29) = result.i32[3] + v51 + (v53 & ~v52) - 660478335 + (v54 & v52);
  LODWORD(v29) = HIDWORD(v29);
  int v55 = (v29 >> 18) + v54;
  HIDWORD(v29) = v32.i32[0] + v52 + (v54 & ~v53) - 405537848 + (v55 & v53);
  LODWORD(v29) = HIDWORD(v29);
  int v56 = (v29 >> 12) + v55;
  HIDWORD(v29) = v37.i32[1] + v53 + (v55 & ~v54) + 568446438 + (v56 & v54);
  LODWORD(v29) = HIDWORD(v29);
  int v57 = (v29 >> 27) + v56;
  HIDWORD(v29) = result.i32[2] + v54 + (v56 & ~v55) - 1019803690 + (v57 & v55);
  LODWORD(v29) = HIDWORD(v29);
  int v58 = (v29 >> 23) + v57;
  HIDWORD(v29) = v28.i32[3] + v55 + (v57 & ~v56) - 187363961 + (v58 & v56);
  LODWORD(v29) = HIDWORD(v29);
  int v59 = (v29 >> 18) + v58;
  HIDWORD(v29) = v37.i32[0] + v56 + (v58 & ~v57) + 1163531501 + (v59 & v57);
  LODWORD(v29) = HIDWORD(v29);
  int v60 = (v29 >> 12) + v59;
  HIDWORD(v29) = result.i32[1] + v57 + (v59 & ~v58) - 1444681467 + (v60 & v58);
  LODWORD(v29) = HIDWORD(v29);
  int v61 = (v29 >> 27) + v60;
  HIDWORD(v29) = v28.i32[2] + v58 + (v60 & ~v59) - 51403784 + (v61 & v59);
  LODWORD(v29) = HIDWORD(v29);
  int v62 = (v29 >> 23) + v61;
  HIDWORD(v29) = v32.i32[3] + v59 + (v61 & ~v60) + 1735328473 + (v62 & v60);
  LODWORD(v29) = HIDWORD(v29);
  int v63 = (v29 >> 18) + v62;
  HIDWORD(v29) = result.i32[0] + v60 + (v62 & ~v61) - 1926607734 + (v63 & v61);
  LODWORD(v29) = HIDWORD(v29);
  int v64 = (v29 >> 12) + v63;
  HIDWORD(v29) = v32.i32[1] + v61 - 378558 + (v64 ^ v63 ^ v62);
  LODWORD(v29) = HIDWORD(v29);
  int v65 = (v29 >> 28) + v64;
  HIDWORD(v29) = v37.i32[0] + v62 - 2022574463 + (v64 ^ v63 ^ v65);
  LODWORD(v29) = HIDWORD(v29);
  int v66 = (v29 >> 21) + v65;
  HIDWORD(v29) = v37.i32[3] + v63 + 1839030562 + (v65 ^ v64 ^ v66);
  LODWORD(v29) = HIDWORD(v29);
  int v67 = (v29 >> 16) + v66;
  HIDWORD(v29) = result.i32[2] + v64 - 35309556 + (v66 ^ v65 ^ v67);
  LODWORD(v29) = HIDWORD(v29);
  int v68 = (v29 >> 9) + v67;
  HIDWORD(v29) = v28.i32[1] + v65 - 1530992060 + (v67 ^ v66 ^ v68);
  LODWORD(v29) = HIDWORD(v29);
  int v69 = (v29 >> 28) + v68;
  HIDWORD(v29) = v32.i32[0] + v66 + 1272893353 + (v68 ^ v67 ^ v69);
  LODWORD(v29) = HIDWORD(v29);
  int v70 = (v29 >> 21) + v69;
  HIDWORD(v29) = v32.i32[3] + v67 - 155497632 + (v69 ^ v68 ^ v70);
  LODWORD(v29) = HIDWORD(v29);
  int v71 = (v29 >> 16) + v70;
  HIDWORD(v29) = v37.i32[2] + v68 - 1094730640 + (v70 ^ v69 ^ v71);
  LODWORD(v29) = HIDWORD(v29);
  int v72 = (v29 >> 9) + v71;
  HIDWORD(v29) = result.i32[1] + v69 + 681279174 + (v71 ^ v70 ^ v72);
  LODWORD(v29) = HIDWORD(v29);
  int v73 = (v29 >> 28) + v72;
  HIDWORD(v29) = v28.i32[0] + v70 - 358537222 + (v72 ^ v71 ^ v73);
  LODWORD(v29) = HIDWORD(v29);
  int v74 = (v29 >> 21) + v73;
  HIDWORD(v29) = v28.i32[3] + v71 - 722521979 + (v73 ^ v72 ^ v74);
  LODWORD(v29) = HIDWORD(v29);
  int v75 = (v29 >> 16) + v74;
  HIDWORD(v29) = v32.i32[2] + v72 + 76029189 + (v74 ^ v73 ^ v75);
  LODWORD(v29) = HIDWORD(v29);
  int v76 = (v29 >> 9) + v75;
  HIDWORD(v29) = v37.i32[1] + v73 - 640364487 + (v75 ^ v74 ^ v76);
  LODWORD(v29) = HIDWORD(v29);
  int v77 = (v29 >> 28) + v76;
  HIDWORD(v29) = result.i32[0] + v74 - 421815835 + (v76 ^ v75 ^ v77);
  LODWORD(v29) = HIDWORD(v29);
  int v78 = (v29 >> 21) + v77;
  HIDWORD(v29) = result.i32[3] + v75 + 530742520 + (v77 ^ v76 ^ v78);
  LODWORD(v29) = HIDWORD(v29);
  int v79 = (v29 >> 16) + v78;
  HIDWORD(v29) = v28.i32[2] + v76 - 995338651 + (v78 ^ v77 ^ v79);
  LODWORD(v29) = HIDWORD(v29);
  int v80 = (v29 >> 9) + v79;
  HIDWORD(v29) = v28.i32[0] + v77 - 198630844 + ((v80 | ~v78) ^ v79);
  LODWORD(v29) = HIDWORD(v29);
  int v81 = (v29 >> 26) + v80;
  HIDWORD(v29) = v32.i32[3] + v78 + 1126891415 + ((v81 | ~v79) ^ v80);
  LODWORD(v29) = HIDWORD(v29);
  int v82 = (v29 >> 22) + v81;
  HIDWORD(v29) = result.i32[2] + v79 - 1416354905 + ((v82 | ~v80) ^ v81);
  LODWORD(v29) = HIDWORD(v29);
  int v83 = (v29 >> 17) + v82;
  HIDWORD(v29) = v32.i32[1] + v80 - 57434055 + ((v83 | ~v81) ^ v82);
  LODWORD(v29) = HIDWORD(v29);
  int v84 = (v29 >> 11) + v83;
  HIDWORD(v29) = result.i32[0] + v81 + 1700485571 + ((v84 | ~v82) ^ v83);
  LODWORD(v29) = HIDWORD(v29);
  int v85 = (v29 >> 26) + v84;
  HIDWORD(v29) = v28.i32[3] + v82 - 1894986606 + ((v85 | ~v83) ^ v84);
  LODWORD(v29) = HIDWORD(v29);
  int v86 = (v29 >> 22) + v85;
  HIDWORD(v29) = v37.i32[2] + v83 - 1051523 + ((v86 | ~v84) ^ v85);
  LODWORD(v29) = HIDWORD(v29);
  int v87 = (v29 >> 17) + v86;
  HIDWORD(v29) = v28.i32[1] + v84 - 2054922799 + ((v87 | ~v85) ^ v86);
  LODWORD(v29) = HIDWORD(v29);
  int v88 = (v29 >> 11) + v87;
  HIDWORD(v29) = v37.i32[0] + v85 + 1873313359 + ((v88 | ~v86) ^ v87);
  LODWORD(v29) = HIDWORD(v29);
  int v89 = (v29 >> 26) + v88;
  HIDWORD(v29) = result.i32[3] + v86 - 30611744 + ((v89 | ~v87) ^ v88);
  LODWORD(v29) = HIDWORD(v29);
  int v90 = (v29 >> 22) + v89;
  HIDWORD(v29) = v32.i32[2] + v87 - 1560198380 + ((v90 | ~v88) ^ v89);
  LODWORD(v29) = HIDWORD(v29);
  int v91 = (v29 >> 17) + v90;
  HIDWORD(v29) = result.i32[1] + v88 + 1309151649 + ((v91 | ~v89) ^ v90);
  LODWORD(v29) = HIDWORD(v29);
  int v92 = (v29 >> 11) + v91;
  HIDWORD(v29) = v32.i32[0] + v89 - 145523070 + ((v92 | ~v90) ^ v91);
  LODWORD(v29) = HIDWORD(v29);
  int v93 = (v29 >> 26) + v92;
  HIDWORD(v29) = v37.i32[3] + v90 - 1120210379 + ((v93 | ~v91) ^ v92);
  LODWORD(v29) = HIDWORD(v29);
  int v94 = (v29 >> 22) + v93;
  HIDWORD(v29) = v28.i32[2] + v91 + 718787259 + ((v94 | ~v92) ^ v93);
  LODWORD(v29) = HIDWORD(v29);
  int v95 = (v29 >> 17) + v94;
  HIDWORD(v29) = v37.i32[1] + v92 - 343485551 + ((v95 | ~v93) ^ v94);
  LODWORD(v29) = HIDWORD(v29);
  *a1 += v93;
  a1[1] = v95 + v2 + (v29 >> 11);
  a1[2] = v95 + v4;
  a1[3] = v94 + v3;
  return result;
}

double MD5Final(unsigned __int8 *a1, MD5_CTX *a2)
{
  uint64_t v4 = 0;
  v10[1] = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  do
  {
    *(_DWORD *)((char *)v10 + v4 * 4) = a2->count[v4];
    ++v4;
  }
  while (v4 != 2);
  UINT4 v5 = (a2->count[0] >> 3) & 0x3F;
  if (v5 >= 0x38) {
    int v6 = 120;
  }
  else {
    int v6 = 56;
  }
  MD5Update(a2, PADDING, v6 - v5);
  MD5Update(a2, (unsigned __int8 *)v10, 8u);
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint16x8_t v8 = &a1[i * 4 + 1];
    *(_WORD *)(v8 - 1) = a2->state[i];
    v8[1] = HIWORD(a2->state[i]);
    void v8[2] = HIBYTE(a2->state[i]);
  }
  *(void *)&a2->buffer[56] = 0;
  double result = 0.0;
  *(_OWORD *)&a2->buffer[24] = 0u;
  *(_OWORD *)&a2->buffer[40] = 0u;
  *(_OWORD *)a2->count = 0u;
  *(_OWORD *)&a2->buffer[8] = 0u;
  *(_OWORD *)a2->state = 0u;
  return result;
}

void AdobeXMPCore_Int::SimpleNodeImpl::SimpleNodeImpl(AdobeXMPCore_Int::SimpleNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, const char *a3, const char *a4, unint64_t a5, const char *a6)
{
  *((void *)this + 21) = &unk_1ED4C7610;
  *(void *)this = &unk_1ED4C6E70;
  *((void *)this + 4) = &unk_1ED4C70E0;
  *(void *)((char *)this + unk_1ED4C6E28) = &unk_1ED4C7140;
  *((void *)this + 18) = &unk_1ED4C81C0;
  *((void *)this + 5) = &unk_1ED4C86F0;
  *(void *)this = &unk_1ED4C8B60;
  *((void *)this + 4) = &unk_1ED4C8D80;
  *((void *)this + 21) = &unk_1ED4C8E68;
  *(void *)((char *)this + unk_1ED4C84C8 + 40) = &unk_1ED4C8DE0;
  *(void *)((char *)this + *(void *)(*((void *)this + 5) - 560) + 40) = &unk_1ED4C8E68;
  *(void *)this = &unk_1ED4C78E8;
  *(void *)((char *)this + unk_1ED4C78A8) = &unk_1ED4C7B68;
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = &unk_1ED4C8138;
  *(void *)((char *)this + *(void *)(*(void *)this - 640)) = &unk_1ED4C7E18;
  *(void *)((char *)this + *(void *)(*(void *)this - 648)) = &unk_1ED4C80B0;
  *(void *)((char *)this + *(void *)(*(void *)this - 656)) = &unk_1ED4C8138;
  *((void *)this + 18) = &unk_1ED4C8290;
  *((void *)this + 19) = 0;
  *(void *)this = &unk_1ED4C82F0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = &unk_1ED4C8418;
  AdobeXMPCore_Int::NodeImpl::NodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this + 40), (const char *)&off_1ED4DD348, a2, a3);
}

void sub_18883C398(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::NodeImpl::~NodeImpl(v3, (uint64_t *)&off_1ED4DD348);
  AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl(v1, (uint64_t *)&off_1ED4DD3B0);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DD398);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NodeImpl::~NodeImpl(AdobeXMPCore_Int::NodeImpl *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 664)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 544)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 552)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 560)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 672)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 688)) = a2[9];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  UINT4 v5 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint16x8_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void AdobeXMPCore_Int::SimpleNodeImpl::GetValue(AdobeXMPCore_Int::SimpleNodeImpl *this@<X0>, void *a2@<X8>)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 712) + 8, 0);
  uint64_t v4 = *((void *)this + 2);
  *a2 = *((void *)this + 1);
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
}

void AdobeXMPCore_Int::SimpleNodeImpl::SetValue(AdobeXMPCore_Int::SimpleNodeImpl *this, const char *a2)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 712) + 8, 1);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 56))(&v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  (*(void (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 688)) + 560))((char *)this + *(void *)(*(void *)this - 688));
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
}

void sub_18883C8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::IsURIType(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 712) + 8, 0);
  uint64_t v2 = *((unsigned __int8 *)this + 24);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::SetURIType(AdobeXMPCore_Int::SimpleNodeImpl *this, char a2)
{
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 712) + 8, 1);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  *((unsigned char *)this + 24) = a2;
  return (*(uint64_t (**)(void))(*(void *)((char *)this + *(void *)(*(void *)this - 688)) + 560))();
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::GetNodeType(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  return 1;
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::HasContent(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 712) + 8, 0);
  uint64_t v2 = (*(unsigned int (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1)) ^ 1;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

void sub_18883CA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::SimpleNodeImpl::ClearContents(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(void *)(*(void *)this - 712) + 8, 1);
  (*(void (**)(void))(**((void **)this + 1) + 200))(*((void *)this + 1));
  (*(void (**)(void))(*(void *)((char *)this + *(void *)(*(void *)this - 688)) + 560))();
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void sub_18883CB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::ClearContents(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  AdobeXMPCore_Int::SimpleNodeImpl::ClearContents((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                     + *(void *)(*(void *)this
                                                                                                 - 704)));
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::CloneContents@<X0>(AdobeXMPCore_Int::SimpleNodeImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (!a2
    || (uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1)),
        !result)
    || !a3 && a4)
  {
    v18[2] = 0;
    v18[3] = 0;
    uint64_t v10 = *(void *)this;
    int8x16_t v11 = (char *)this + *(void *)(*(void *)this - 688);
    uint64_t v12 = *((void *)v11 + 2);
    v18[0] = *((void *)v11 + 1);
    v18[1] = v12;
    if (v12)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      uint64_t v10 = *(void *)this;
    }
    int8x16_t v13 = (char *)this + *(void *)(v10 - 688);
    uint64_t v14 = *((void *)v13 + 4);
    v17[0] = *((void *)v13 + 3);
    v17[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *((void *)this + 2);
    v16[0] = *((void *)this + 1);
    v16[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode((uint64_t)v18, (uint64_t)v17, v16);
  }
  *a5 = 0;
  a5[1] = 0;
  return result;
}

void sub_18883CD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode(uint64_t a1, uint64_t a2, void *a3)
{
  int v6 = (AdobeXMPCore_Int::SimpleNodeImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xC0);
  uint16x8_t v7 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(void))(**(void **)a1 + 192))();
  uint16x8_t v8 = (const char *)(*(uint64_t (**)(void))(**(void **)a1 + 208))();
  uint16x8_t v9 = (const char *)(*(uint64_t (**)(void))(**(void **)a2 + 192))();
  unint64_t v10 = (*(uint64_t (**)(void))(**(void **)a2 + 208))();
  if (*a3)
  {
    int8x16_t v11 = (const char *)(*(uint64_t (**)(void))(*(void *)*a3 + 192))(*a3);
    if (*a3) {
      (*(void (**)(void))(*(void *)*a3 + 208))(*a3);
    }
  }
  else
  {
    int8x16_t v11 = 0;
  }
  AdobeXMPCore_Int::SimpleNodeImpl::SimpleNodeImpl(v6, v7, v8, v9, v10, v11);
}

void sub_18883CF6C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::CloneContents@<X0>(AdobeXMPCore_Int::SimpleNodeImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return AdobeXMPCore_Int::SimpleNodeImpl::CloneContents((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this + *(void *)(*(void *)this - 712)), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::SimpleNodeImpl::ConvertToSimpleNode(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  (**(void (***)(char *))((char *)this + *(void *)(*(void *)this - 688)))((char *)this + *(void *)(*(void *)this - 688));
  std::shared_ptr<AdobeXMPCore_Int::SimpleNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::SimpleNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v2, (uint64_t)this);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::SimpleNodeImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 688)])(&a1[*(void *)(*(void *)a1 - 688)]);
    std::shared_ptr<AdobeXMPCore_Int::SimpleNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::SimpleNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_18883D1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::ConvertToSimpleNode(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  AdobeXMPCore_Int::SimpleNodeImpl::ConvertToSimpleNode((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                           + *(void *)(*(void *)this - 272)));
}

void AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(AdobeXMPCore::ISimpleNode_v1 *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  int8x16_t v11 = (AdobeXMPCore_Int::SimpleNodeImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xC0);
  AdobeXMPCore_Int::SimpleNodeImpl::SimpleNodeImpl(v11, this, a2, a3, (unint64_t)a4, a5);
}

void sub_18883D2F8(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::GetActualISimpleNode(AdobeXMPCore_Int::ISimpleNode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 632);
}

void AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl(AdobeXMPCore_Int::ThreadSafeImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x18C11C0E0);
}

void AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::~NodeImpl((AdobeXMPCore_Int::NodeImpl *)(v2 + 40), (uint64_t *)&off_1ED4DD348);
  AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this + 168), (uint64_t *)&off_1ED4DD3B0);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this + 144), (uint64_t *)&off_1ED4DD398);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(this);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(void *)(*(void *)this - 24)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(void *)(*(void *)this - 24)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(void *)(*(void *)this - 56)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(void *)(*(void *)this - 56)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(void *a1)
{
  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)a1
                                                                                       + *(void *)(*a1 - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)a1
                                                                                       + *(void *)(*a1 - 48)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(AdobeXMPCore_Int::SimpleNodeImpl *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 680)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 632)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 544)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 640)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 648)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 656)) = a2[9];
  *(void *)((char *)this + *(void *)(*(void *)this - 688)) = a2[10];
  *(void *)((char *)this + *(void *)(*(void *)this - 696)) = a2[11];
  *(void *)((char *)this + *(void *)(*(void *)this - 712)) = a2[12];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::shared_ptr<AdobeXMPCore_Int::SimpleNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::SimpleNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18883D9A8(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 688) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_18883DA10(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::SimpleNodeImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 688);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  UINT4 v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::SimpleNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SimpleNodeImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::SimpleNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SimpleNodeImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::SimpleNodeImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::SimpleNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SimpleNodeImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void *AdobeXMPCore_Int::UTF8StringImpl::append@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, char *__src@<X1>, size_t a3@<X2>, void *a4@<X8>)
{
  if (__src && a3)
  {
    if (a3 == -1) {
      a3 = strlen(__src);
    }
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append((uint64_t *)this + 3, __src, a3);
  }

  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a4);
}

uint64_t *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append(uint64_t *a1, void *__src, size_t __len)
{
  if (*((char *)a1 + 23) < 0)
  {
    size_t v7 = a1[1];
    unint64_t v6 = (a1[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    unint64_t v6 = 22;
    size_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  if (v6 - v7 >= __len)
  {
    if (__len)
    {
      uint16x8_t v8 = a1;
      if ((*((unsigned char *)a1 + 23) & 0x80) != 0) {
        uint16x8_t v8 = (uint64_t *)*a1;
      }
      memmove((char *)v8 + v7, __src, __len);
      uint64_t v9 = v7 + __len;
      if (*((char *)a1 + 23) < 0) {
        a1[1] = v9;
      }
      else {
        *((unsigned char *)a1 + 23) = v9 & 0x7F;
      }
      *((unsigned char *)v8 + v9) = 0;
    }
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by_and_replace((AdobeXMPCore_Int::IMemoryAllocator_I *)a1, v6, __len - v6 + v7, v7, v7, 0, __len, __src);
  }
  return a1;
}

void *AdobeXMPCore_Int::UTF8StringImpl::append@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, void *a2@<X1>, unint64_t a3@<X2>, size_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v13 = a3;
  if (a4 && *a2)
  {
    unint64_t v9 = AdobeXMPCore_Int::ValidateSrcPosParameter(a2, &v13);
    unint64_t v10 = (void *)((*(uint64_t (**)(void))(*(void *)*a2 + 192))() + v13);
    if (v9 - v13 >= a4) {
      size_t v11 = a4;
    }
    else {
      size_t v11 = v9 - v13;
    }
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append((uint64_t *)this + 3, v10, v11);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a5);
}

unint64_t AdobeXMPCore_Int::ValidateSrcPosParameter(void *a1, unint64_t *a2)
{
  unint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 208))(*a1);
  unint64_t v6 = result;
  if (*a2 > result)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2);
  }
  return result;
}

void sub_18883DF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void *AdobeXMPCore_Int::UTF8StringImpl::assign@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, size_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v13 = a3;
  if (a4 && *a2)
  {
    unint64_t v9 = AdobeXMPCore_Int::ValidateSrcPosParameter(a2, &v13);
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 192))();
    if (v9 - v13 >= a4) {
      size_t v11 = a4;
    }
    else {
      size_t v11 = v9 - v13;
    }
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__assign_external((void **)(a1 + 24), (void *)(v10 + v13), v11);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    **(unsigned char **)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 47) = 0;
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer((AdobeXMPCore_Int::UTF8StringImpl *)a1, a5);
}

void *AdobeXMPCore_Int::UTF8StringImpl::insert@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, char *a2@<X2>, unint64_t a3@<X1>, size_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v10 = a3;
  if (a2)
  {
    size_t v7 = a4;
    if (a4)
    {
      AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v10);
      if (v7 == -1) {
        size_t v7 = strlen(a2);
      }
      std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::insert((uint64_t *)this + 3, v10, a2, v7);
    }
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a5);
}

unint64_t AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(AdobeXMPCore_Int::UTF8StringImpl *this, unint64_t *a2)
{
  unint64_t result = (*(uint64_t (**)(AdobeXMPCore_Int::UTF8StringImpl *))(*(void *)this + 208))(this);
  unint64_t v6 = result;
  if (*a2 > result)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2);
  }
  return result;
}

void sub_18883E340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::insert(uint64_t *a1, size_t a2, char *__src, size_t __len)
{
  uint64_t v5 = __src;
  size_t v8 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v8 >= a2)
    {
      unint64_t v9 = 22;
      unint64_t v10 = *((unsigned __int8 *)a1 + 23);
      goto LABEL_6;
    }
LABEL_24:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v10 = a1[1];
  if (v10 < a2) {
    goto LABEL_24;
  }
  unint64_t v9 = (a1[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_6:
  if (v9 - v10 >= __len)
  {
    if (__len)
    {
      size_t v11 = a1;
      if ((v8 & 0x80) != 0) {
        size_t v11 = (uint64_t *)*a1;
      }
      if (v10 != a2)
      {
        uint64_t v12 = (char *)v11 + a2;
        if ((char *)v11 + v10 <= __src || v12 > __src) {
          size_t v14 = 0;
        }
        else {
          size_t v14 = __len;
        }
        uint64_t v5 = &__src[v14];
        memmove(&v12[__len], v12, v10 - a2);
      }
      memmove((char *)v11 + a2, v5, __len);
      uint64_t v15 = v10 + __len;
      if (*((char *)a1 + 23) < 0) {
        a1[1] = v15;
      }
      else {
        *((unsigned char *)a1 + 23) = v15 & 0x7F;
      }
      *((unsigned char *)v11 + v15) = 0;
    }
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by_and_replace((AdobeXMPCore_Int::IMemoryAllocator_I *)a1, v9, v10 + __len - v9, v10, a2, 0, __len, __src);
  }
  return a1;
}

void *AdobeXMPCore_Int::UTF8StringImpl::insert@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, unint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, size_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v15 = a4;
  unint64_t v16 = a2;
  if (a5 && *a3)
  {
    AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v16);
    unint64_t v10 = AdobeXMPCore_Int::ValidateSrcPosParameter(a3, &v15);
    size_t v11 = v16;
    uint64_t v12 = (char *)((*(uint64_t (**)(void))(*(void *)*a3 + 192))() + v15);
    if (v10 - v15 >= a5) {
      size_t v13 = a5;
    }
    else {
      size_t v13 = v10 - v15;
    }
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::insert((uint64_t *)this + 3, v11, v12, v13);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a6);
}

void *AdobeXMPCore_Int::UTF8StringImpl::erase@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = a2;
  if (a3)
  {
    AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v8);
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::erase((uint64_t *)this + 3, v8, a3);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a4);
}

uint64_t *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::erase(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  if (*((char *)a1 + 23) < 0) {
    unint64_t v4 = a1[1];
  }
  else {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  if (v4 < a2) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (a3 == -1)
  {
    if ((*((unsigned char *)a1 + 23) & 0x80) != 0)
    {
      uint64_t v5 = (uint64_t *)*a1;
      a1[1] = a2;
    }
    else
    {
      *((unsigned char *)a1 + 23) = a2 & 0x7F;
      uint64_t v5 = a1;
    }
    *((unsigned char *)v5 + a2) = 0;
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__erase_external_with_move(a1, a2, a3);
  }
  return a1;
}

AdobeXMPCore_Int::IMemoryAllocator_I *AdobeXMPCore_Int::UTF8StringImpl::resize(AdobeXMPCore_Int::UTF8StringImpl *this, unint64_t a2)
{
  unint64_t v5 = a2;
  if (a2 >= 0x7FFFFFFFFFFFFFF7)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
  }
  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::resize((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this + 24), a2, 0);
}

void sub_18883E870()
{
}

void sub_18883E90C(_Unwind_Exception *a1)
{
}

void *AdobeXMPCore_Int::UTF8StringImpl::replace@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, char *a2@<X3>, unint64_t a3@<X1>, size_t a4@<X2>, size_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v12 = a3;
  if (a4)
  {
    if (a2)
    {
      size_t v9 = a5;
      if (a5)
      {
        AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v12);
        if (v9 == -1) {
          size_t v9 = strlen(a2);
        }
        std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::replace((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this + 24), v12, a4, a2, v9);
      }
    }
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a6);
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::replace(AdobeXMPCore_Int::IMemoryAllocator_I *a1, size_t a2, size_t a3, char *__src, size_t __len)
{
  size_t v5 = __len;
  unint64_t v6 = __src;
  size_t v7 = a2;
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v9 = *((void *)a1 + 1);
    size_t v10 = v9 - a2;
    if (v9 >= a2)
    {
      if (v10 >= a3) {
        size_t v11 = a3;
      }
      else {
        size_t v11 = v9 - a2;
      }
      unint64_t v12 = (*((void *)a1 + 2) & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 - v9 + v12 < __len) {
        goto LABEL_13;
      }
      size_t v13 = *(AdobeXMPCore_Int::IMemoryAllocator_I **)a1;
      goto LABEL_16;
    }
LABEL_39:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v9 = *((unsigned __int8 *)a1 + 23);
  size_t v10 = v9 - a2;
  if (v9 < a2) {
    goto LABEL_39;
  }
  if (v10 >= a3) {
    size_t v11 = a3;
  }
  else {
    size_t v11 = *((unsigned __int8 *)a1 + 23) - a2;
  }
  if (v11 - v9 + 22 < __len)
  {
    unint64_t v12 = 22;
LABEL_13:
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by_and_replace(a1, v12, v9 + __len - (v12 + v11), v9, v7, v11, __len, __src);
    return a1;
  }
  size_t v13 = a1;
LABEL_16:
  if (__len == v11)
  {
    size_t v11 = __len;
  }
  else
  {
    size_t v14 = v10 - v11;
    if (v10 != v11)
    {
      size_t v15 = (size_t)v13 + v7;
      size_t v16 = __len - v11;
      if (__len < v11)
      {
        if (__len) {
          memmove((char *)v13 + v7, __src, __len);
        }
        memmove((void *)(v15 + v5), (const void *)(v15 + v11), v14);
        size_t v17 = v9 + v16;
        goto LABEL_34;
      }
      if ((char *)v13 + v9 > __src && v15 + 1 <= (unint64_t)__src)
      {
        if (v15 + v11 <= (unint64_t)__src)
        {
          unint64_t v6 = &__src[v16];
        }
        else
        {
          if (v11) {
            memmove((char *)v13 + v7, __src, v11);
          }
          v7 += v11;
          v6 += v5;
          v5 -= v11;
          size_t v11 = 0;
        }
      }
      memmove((char *)v13 + v7 + v5, (char *)v13 + v7 + v11, v14);
    }
  }
  if (v5) {
    memmove((char *)v13 + v7, v6, v5);
  }
  size_t v17 = v5 - v11 + v9;
LABEL_34:
  if (*((char *)a1 + 23) < 0) {
    *((void *)a1 + 1) = v17;
  }
  else {
    *((unsigned char *)a1 + 23) = v17 & 0x7F;
  }
  *((unsigned char *)v13 + v17) = 0;
  return a1;
}

void *AdobeXMPCore_Int::UTF8StringImpl::replace@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, void *a4@<X3>, unint64_t a5@<X4>, size_t a6@<X5>, void *a7@<X8>)
{
  unint64_t v17 = a5;
  unint64_t v18 = a2;
  if (a6 && a3 && *a4)
  {
    AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v18);
    unint64_t v12 = AdobeXMPCore_Int::ValidateSrcPosParameter(a4, &v17);
    size_t v13 = v18;
    size_t v14 = (char *)((*(uint64_t (**)(void))(*(void *)*a4 + 192))() + v17);
    if (v12 - v17 >= a6) {
      size_t v15 = a6;
    }
    else {
      size_t v15 = v12 - v17;
    }
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::replace((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this + 24), v13, a3, v14, v15);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a7);
}

size_t AdobeXMPCore_Int::UTF8StringImpl::copy(uint64_t **this, char *a2, size_t a3, unint64_t a4)
{
  size_t result = 0;
  unint64_t v8 = a4;
  if (a2)
  {
    if (a3)
    {
      AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter((AdobeXMPCore_Int::UTF8StringImpl *)this, &v8);
      return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::copy(this + 3, a2, a3, v8);
    }
  }
  return result;
}

size_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::copy(uint64_t **a1, void *__dst, size_t a3, unint64_t a4)
{
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v9 = (unint64_t)a1[1];
    BOOL v5 = v9 >= a4;
    size_t v10 = v9 - a4;
    if (!v5) {
LABEL_17:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v10 >= a3) {
      size_t v7 = a3;
    }
    else {
      size_t v7 = v10;
    }
    a1 = (uint64_t **)*a1;
    if (v7) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
    BOOL v5 = v4 >= a4;
    size_t v6 = v4 - a4;
    if (!v5) {
      goto LABEL_17;
    }
    if (v6 >= a3) {
      size_t v7 = a3;
    }
    else {
      size_t v7 = v6;
    }
    if (v7) {
LABEL_8:
    }
      memmove(__dst, (char *)a1 + a4, v7);
  }
  return v7;
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::find(AdobeXMPCore_Int::UTF8StringImpl *this, char *a2, unint64_t a3, int64_t a4)
{
  if (a2 && a4) {
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::find((uint64_t *)this + 3, a2, a3, a4);
  }
  else {
    return -1;
  }
}

uint64_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::find(uint64_t *a1, char *a2, unint64_t a3, int64_t a4)
{
  uint64_t v6 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v6 = *a1;
    unint64_t v7 = a1[1];
  }
  else
  {
    unint64_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  if (v7 < a3) {
    return -1;
  }
  if (a4)
  {
    unint64_t v8 = (void *)(v6 + a3);
    unint64_t v9 = (char *)(v6 + v7);
    int64_t v10 = v7 - a3;
    if (v10 >= a4)
    {
      int v13 = *a2;
      do
      {
        uint64_t v14 = v10 - a4;
        if (v14 == -1) {
          break;
        }
        size_t v15 = (char *)memchr(v8, v13, v14 + 1);
        if (!v15) {
          break;
        }
        size_t v11 = v15;
        if (!memcmp(v15, a2, a4)) {
          goto LABEL_9;
        }
        unint64_t v8 = v11 + 1;
        int64_t v10 = v9 - (v11 + 1);
      }
      while (v10 >= a4);
    }
    size_t v11 = v9;
LABEL_9:
    if (v11 == v9) {
      return -1;
    }
    else {
      return (uint64_t)&v11[-v6];
    }
  }
  return a3;
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::find(uint64_t a1, void *a2, unint64_t a3, int64_t a4)
{
  if (!*a2) {
    return -1;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 208))(*a2);
  if (!a4 || !v8) {
    return -1;
  }
  unint64_t v9 = (char *)(*(uint64_t (**)(void))(*(void *)*a2 + 192))();

  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::find((uint64_t *)(a1 + 24), v9, a3, a4);
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::rfind(AdobeXMPCore_Int::UTF8StringImpl *this, char *a2, unint64_t a3, unint64_t a4)
{
  if (a2 && a4) {
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::rfind((unsigned __int8 *)this + 24, (unsigned __int8 *)a2, a3, a4);
  }
  else {
    return -1;
  }
}

uint64_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::rfind(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  if ((char)a1[23] < 0)
  {
    BOOL v5 = a1;
    a1 = *(unsigned __int8 **)a1;
    unint64_t v4 = *((void *)v5 + 1);
  }
  else
  {
    unint64_t v4 = a1[23];
  }
  if (v4 >= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v7 = v4 - v6;
  unint64_t v8 = v6 + a4;
  if (v7 <= a4) {
    unint64_t v8 = v4;
  }
  unint64_t v9 = &a1[v8];
  if (a4 && v8)
  {
    int64_t v10 = a1;
    size_t v11 = &a1[v8];
    do
    {
      if (*v10 == *a2)
      {
        uint64_t v12 = 1;
        while (a4 != v12)
        {
          if (&v10[v12] == v9) {
            goto LABEL_22;
          }
          int v13 = v10[v12];
          int v14 = a2[v12++];
          if (v13 != v14) {
            goto LABEL_13;
          }
        }
        size_t v11 = v10;
      }
LABEL_13:
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    size_t v11 = &a1[v8];
  }
LABEL_22:
  if (v11 != v9 || a4 == 0) {
    return v11 - a1;
  }
  else {
    return -1;
  }
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::rfind(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  if (!*a2) {
    return -1;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 208))(*a2);
  if (!a4 || !v8) {
    return -1;
  }
  unint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)*a2 + 192))();

  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::rfind((unsigned __int8 *)(a1 + 24), v9, a3, a4);
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::compare(AdobeXMPCore_Int::UTF8StringImpl *this, unint64_t a2, size_t a3, char *a4, size_t a5)
{
  unint64_t v18 = a2;
  if (!a4) {
    return 0xFFFFFFFFLL;
  }
  AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v18);
  unint64_t v9 = (uint64_t *)((char *)this + 24);
  if (a5 == -1) {
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare((uint64_t **)v9, v18, a3, a4);
  }
  if (*((char *)this + 47) < 0)
  {
    unint64_t v14 = *((void *)this + 4);
    BOOL v11 = v14 >= v18;
    unint64_t v12 = v14 - v18;
    if (!v11) {
LABEL_26:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v12 >= a3) {
      unint64_t v12 = a3;
    }
    unint64_t v9 = (uint64_t *)*v9;
  }
  else
  {
    unint64_t v10 = *((unsigned __int8 *)this + 47);
    BOOL v11 = v10 >= v18;
    unint64_t v12 = v10 - v18;
    if (!v11) {
      goto LABEL_26;
    }
    if (v12 >= a3) {
      unint64_t v12 = a3;
    }
  }
  size_t v15 = (char *)v9 + v18;
  if (v12 >= a5) {
    size_t v16 = a5;
  }
  else {
    size_t v16 = v12;
  }
  if (v12 < a5) {
    unsigned int v17 = -1;
  }
  else {
    unsigned int v17 = v12 > a5;
  }
  LODWORD(result) = memcmp(v15, a4, v16);
  if (result) {
    return result;
  }
  else {
    return v17;
  }
}

uint64_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare(uint64_t **a1, unint64_t a2, size_t a3, char *__s)
{
  size_t v8 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v8 == -1 || (v13 = (unint64_t)a1[1], BOOL v10 = v13 >= a2, v14 = v13 - a2, !v10)) {
LABEL_24:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v14 >= a3) {
      size_t v12 = a3;
    }
    else {
      size_t v12 = v14;
    }
    a1 = (uint64_t **)*a1;
  }
  else
  {
    if (v8 == -1) {
      goto LABEL_24;
    }
    unint64_t v9 = *((unsigned __int8 *)a1 + 23);
    BOOL v10 = v9 >= a2;
    size_t v11 = v9 - a2;
    if (!v10) {
      goto LABEL_24;
    }
    if (v11 >= a3) {
      size_t v12 = a3;
    }
    else {
      size_t v12 = v11;
    }
  }
  size_t v15 = (char *)a1 + a2;
  if (v12 >= v8) {
    size_t v16 = v8;
  }
  else {
    size_t v16 = v12;
  }
  if (v12 < v8) {
    unsigned int v17 = -1;
  }
  else {
    unsigned int v17 = v12 > v8;
  }
  LODWORD(result) = memcmp(v15, __s, v16);
  if (result) {
    return result;
  }
  else {
    return v17;
  }
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::compare(uint64_t a1, unint64_t a2, size_t a3, void *a4, unint64_t a5, size_t a6)
{
  unint64_t v20 = a5;
  unint64_t v21 = a2;
  if (!*a4) {
    return 0xFFFFFFFFLL;
  }
  AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter((AdobeXMPCore_Int::UTF8StringImpl *)a1, &v21);
  AdobeXMPCore_Int::ValidateSrcPosParameter(a4, &v20);
  BOOL v10 = (void *)(a1 + 24);
  unint64_t v11 = v21;
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a4 + 192))();
  if (*(char *)(a1 + 47) < 0)
  {
    if (a6 == -1 || (v17 = *(void *)(a1 + 32), BOOL v14 = v17 >= v11, v15 = v17 - v11, !v14)) {
LABEL_26:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v15 >= a3) {
      size_t v15 = a3;
    }
    BOOL v10 = (void *)*v10;
  }
  else
  {
    if (a6 == -1) {
      goto LABEL_26;
    }
    unint64_t v13 = *(unsigned __int8 *)(a1 + 47);
    BOOL v14 = v13 >= v11;
    size_t v15 = v13 - v11;
    if (!v14) {
      goto LABEL_26;
    }
    if (v15 >= a3) {
      size_t v15 = a3;
    }
  }
  if (v15 >= a6) {
    size_t v18 = a6;
  }
  else {
    size_t v18 = v15;
  }
  if (v15 < a6) {
    unsigned int v19 = -1;
  }
  else {
    unsigned int v19 = v15 > a6;
  }
  LODWORD(result) = memcmp((char *)v10 + v11, (const void *)(v12 + v20), v18);
  if (result) {
    return result;
  }
  else {
    return v19;
  }
}

void AdobeXMPCore_Int::UTF8StringImpl::substr(AdobeXMPCore_Int::UTF8StringImpl *this, unint64_t a2, const char *a3)
{
  v9[0] = a2;
  AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, v9);
  uint64_t v5 = (*(uint64_t (**)(AdobeXMPCore_Int::UTF8StringImpl *))(*(void *)this + 192))(this);
  unint64_t v6 = v9[0];
  uint64_t v7 = (*(uint64_t (**)(AdobeXMPCore_Int::UTF8StringImpl *))(*(void *)this + 208))(this);
  if (v7 - v9[0] >= (unint64_t)a3) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = (const char *)(v7 - v9[0]);
  }
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)(v5 + v6), v8);
}

void sub_18883F444(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a12 = 0;
  a13 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(2, 1, 2);
}

void sub_18883F4D8(_Unwind_Exception *a1)
{
}

BOOL AdobeXMPCore_Int::UTF8StringImpl::empty(AdobeXMPCore_Int::UTF8StringImpl *this)
{
  if (*((char *)this + 47) < 0) {
    uint64_t v1 = *((void *)this + 4);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 47);
  }
  return v1 == 0;
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::clear(uint64_t this)
{
  if (*(char *)(this + 47) < 0)
  {
    **(unsigned char **)(this + 24) = 0;
    *(void *)(this + 32) = 0;
  }
  else
  {
    *(unsigned char *)(this + 24) = 0;
    *(unsigned char *)(this + 47) = 0;
  }
  return this;
}

void virtual thunk to'AdobeXMPCore_Int::UTF8StringImpl::~UTF8StringImpl(AdobeXMPCore_Int::UTF8StringImpl *this)
{
  uint64_t v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DD478);
}

{
  AdobeXMPCore_Int::UTF8StringImpl::~UTF8StringImpl((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this
                                                                                       + *(void *)(*(void *)this - 24)));
}

void **std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__assign_external(void **a1, char *__s)
{
  size_t v4 = strlen(__s);

  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__assign_external(a1, __s, v4);
}

void *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__erase_external_with_move(void *result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    int v4 = *((char *)result + 23);
    if (v4 < 0)
    {
      unint64_t v6 = (void *)*result;
      uint64_t v5 = result[1];
    }
    else
    {
      uint64_t v5 = *((unsigned __int8 *)result + 23);
      unint64_t v6 = result;
    }
    if (v5 - a2 >= a3) {
      unint64_t v7 = a3;
    }
    else {
      unint64_t v7 = v5 - a2;
    }
    if (v5 - a2 > a3)
    {
      uint64_t result = memmove((char *)v6 + a2, (char *)v6 + a2 + v7, v5 - a2 - v7);
      LOBYTE(v4) = *((unsigned char *)v3 + 23);
    }
    uint64_t v8 = v5 - v7;
    if ((v4 & 0x80) != 0) {
      v3[1] = v8;
    }
    else {
      *((unsigned char *)v3 + 23) = v8 & 0x7F;
    }
    *((unsigned char *)v6 + v8) = 0;
  }
  return result;
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::resize(AdobeXMPCore_Int::IMemoryAllocator_I *result, unint64_t a2, int a3)
{
  if (*((char *)result + 23) < 0)
  {
    unint64_t v3 = *((void *)result + 1);
    if (v3 >= a2)
    {
      *((void *)result + 1) = a2;
      uint64_t result = *(AdobeXMPCore_Int::IMemoryAllocator_I **)result;
      goto LABEL_7;
    }
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append(result, a2 - v3, a3);
  }
  unint64_t v3 = *((unsigned __int8 *)result + 23);
  if (v3 < a2) {
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append(result, a2 - v3, a3);
  }
  *((unsigned char *)result + 23) = a2 & 0x7F;
LABEL_7:
  *((unsigned char *)result + a2) = 0;
  return result;
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append(AdobeXMPCore_Int::IMemoryAllocator_I *a1, size_t __len, int __c)
{
  if (__len)
  {
    LODWORD(v6) = *((char *)a1 + 23);
    if ((v6 & 0x80000000) != 0)
    {
      size_t v7 = *((void *)a1 + 1);
      unint64_t v9 = *((void *)a1 + 2);
      unint64_t v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      unint64_t v6 = HIBYTE(v9);
    }
    else
    {
      size_t v7 = *((unsigned __int8 *)a1 + 23);
      unint64_t v8 = 22;
    }
    if (v8 - v7 < __len)
    {
      std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by(a1, v8, __len - v8 + v7, v7, v7, 0, 0);
      *((void *)a1 + 1) = v7;
      LOBYTE(v6) = *((unsigned char *)a1 + 23);
    }
    BOOL v10 = a1;
    if ((v6 & 0x80) != 0) {
      BOOL v10 = *(AdobeXMPCore_Int::IMemoryAllocator_I **)a1;
    }
    memset((char *)v10 + v7, __c, __len);
    uint64_t v11 = v7 + __len;
    if (*((char *)a1 + 23) < 0) {
      *((void *)a1 + 1) = v11;
    }
    else {
      *((unsigned char *)a1 + 23) = v11 & 0x7F;
    }
    *((unsigned char *)v10 + v11) = 0;
  }
  return a1;
}

char *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by(AdobeXMPCore_Int::IMemoryAllocator_I *a1, unint64_t a2, unint64_t a3, uint64_t a4, size_t a5, uint64_t a6, uint64_t a7)
{
  if (0x7FFFFFFFFFFFFFF7 - a2 < a3) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v13 = (char *)a1;
  if (*((char *)a1 + 23) < 0) {
    unint64_t v13 = *(char **)a1;
  }
  unint64_t v14 = a3 + a2;
  if (a3 + a2 <= 2 * a2) {
    unint64_t v14 = 2 * a2;
  }
  uint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17) {
    uint64_t v15 = v14 | 7;
  }
  if (v14 >= 0x17) {
    uint64_t v16 = v15 + 1;
  }
  else {
    uint64_t v16 = 23;
  }
  if (a2 <= 0x3FFFFFFFFFFFFFF2) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0x7FFFFFFFFFFFFFF7;
  }
  MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  uint64_t result = (char *)(**MemoryAllocator)(MemoryAllocator, v17);
  unint64_t v20 = result;
  if (a5) {
    uint64_t result = (char *)memmove(result, v13, a5);
  }
  if (a4 != a6 + a5) {
    uint64_t result = (char *)memmove(&v20[a5 + a7], &v13[a5 + a6], a4 - (a6 + a5));
  }
  if (a2 != 22)
  {
    uint64_t v21 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)result);
    uint64_t result = (char *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v21 + 8))(v21, v13);
  }
  *(void *)a1 = v20;
  *((void *)a1 + 2) = v17 | 0x8000000000000000;
  return result;
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::UTF8StringImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::UTF8StringImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::UTF8StringImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::UTF8StringImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t OUTLINED_FUNCTION_0_2@<X0>(uint64_t a1@<X8>)
{
  return a1 + v1;
}

void OUTLINED_FUNCTION_2_0(uint64_t a1@<X8>)
{
  void *v1 = a1;
  *int v4 = v1 + 1;
  *uint64_t v2 = v3 + 8;
  v1[1] = *(void *)(v3 + 8);
}

void AdobeXMPCore_Int::UTF8StringImpl::resize()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = OUTLINED_FUNCTION_0_2(v1);
  (*(void (**)(uint64_t, const char *, uint64_t))(v3 + 120))(v2, "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/UTF8StringImpl.cpp", 112);
  uint64_t v4 = OUTLINED_FUNCTION_0_2(*v0);
  (*(void (**)(uint64_t, const char *, uint64_t))(v5 + 112))(v4, "failed to allocate required memory", -1);
  unint64_t v6 = (void *)*v0;
  if (*v0) {
    unint64_t v6 = (void *)((char *)v6 + *(void *)(*v6 - 304));
  }
  OUTLINED_FUNCTION_2_0((uint64_t)v6);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
}

void AdobeXMPCore_Int::UTF8StringImpl::substr()
{
  OUTLINED_FUNCTION_1_0();
  uint64_t v2 = OUTLINED_FUNCTION_0_2(v1);
  (*(void (**)(uint64_t, const char *, uint64_t))(v3 + 120))(v2, "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/UTF8StringImpl.cpp", 203);
  uint64_t v4 = OUTLINED_FUNCTION_0_2(*v0);
  (*(void (**)(uint64_t, const char *, uint64_t))(v5 + 112))(v4, "failed to allocate required memory", -1);
  unint64_t v6 = (void *)*v0;
  if (*v0) {
    unint64_t v6 = (void *)((char *)v6 + *(void *)(*v6 - 304));
  }
  OUTLINED_FUNCTION_2_0((uint64_t)v6);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
}

void AdobeXMPCore_Int::DOMSerializerImpl::DOMSerializerImpl(AdobeXMPCore_Int::DOMSerializerImpl *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 344)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 288)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 216)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 224)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 232)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 296)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 304)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 352)) = a2[8];
  uint64_t v3 = (AdobeXMPCore_Int::ISharedMutex *)a2[9];
  *(void *)((char *)this + *(void *)(*(void *)this - 360)) = v3;
  AdobeXMPCore_Int::ISharedMutex::CreateSharedMutex(v3);
}

uint64_t AdobeXMPCore_Int::DOMSerializerImpl::GetMutex@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *virtual thunk to'AdobeXMPCore_Int::DOMSerializerImpl::GetMutex@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (char *)this + *(void *)(*this - 280);
  uint64_t v4 = *((void *)v2 + 1);
  uint64_t v3 = *((void *)v2 + 2);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AdobeXMPCore_Int::DOMSerializerImpl::Clone(AdobeXMPCore_Int::DOMSerializerImpl *this)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(AdobeXMPCore_Int::DOMSerializerImpl *))(*(void *)this + 288))(this);
  if (v2)
  {
    memset(v14, 0, sizeof(v14));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v14, (char *)this + 8, 0);
    uint64_t v3 = *(void *)this;
    uint64_t v4 = (void *)(*(void *)this - 352);
    uint64_t v5 = *(void *)v2;
    v2[*(void *)(v5 - 352) + 48] = *((unsigned char *)this + *v4 + 48);
    v2[*(void *)(v5 - 352) + 49] = *((unsigned char *)this + *v4 + 49);
    if (*(void *)((char *)this + *v4 + 32)) {
      operator new();
    }
    if (*(void *)((char *)this + *(void *)(v3 - 352) + 40)) {
      operator new();
    }
    unint64_t v6 = (char *)this + *(void *)(v3 - 352);
    uint64_t v7 = (char *)*((void *)v6 + 1);
    unint64_t v8 = v6 + 16;
    if (v7 != v6 + 16)
    {
      do
      {
        unint64_t v9 = (uint64_t **)&v2[*(void *)(*(void *)v2 - 352) + 8];
        uint64_t v15 = v7 + 32;
        BOOL v10 = std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v9, (unint64_t *)v7 + 4, (uint64_t)&std::piecewise_construct, &v15);
        *((_DWORD *)v10 + 10) = *((_DWORD *)v7 + 10);
        v10[6] = (uint64_t *)*((void *)v7 + 6);
        uint64_t v11 = (char *)*((void *)v7 + 1);
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = *(char **)v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (char *)*((void *)v7 + 2);
            BOOL v13 = *(void *)v12 == (void)v7;
            uint64_t v7 = v12;
          }
          while (!v13);
        }
        uint64_t v7 = v12;
      }
      while (v12 != v8);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v14);
  }
  AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::DOMSerializerImpl>(v2, 1, v14);
}

void sub_1888402DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x18C11C0E0](v2, 0x1020C4062D53EE8);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::DOMSerializerImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 360)])(&a1[*(void *)(*(void *)a1 - 360)]);
    std::shared_ptr<AdobeXMPCore_Int::DOMSerializerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMSerializerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_1888404AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::IDOMSerializer_I::CreateDOMSerializer()
{
  uint64_t v0 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x78);
  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ClientDOMSerializerWrapperImpl(v0);
}

void sub_188840550(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 120)])(&a1[*(void *)(*(void *)a1 - 120)]);
    std::shared_ptr<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_1888406F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::GetActualIDOMSerializer(AdobeXMPCore_Int::IDOMSerializer_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 288);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMSerializer_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 304);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IDOMSerializer_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMSerializer_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 40)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 40)) - 304);
}

void std::shared_ptr<AdobeXMPCore_Int::DOMSerializerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMSerializerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188840804(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 360) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_18884086C(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::DOMSerializerImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 360);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMSerializerImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMSerializerImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::DOMSerializerImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMSerializerImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188840A04(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 120) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188840A68(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void *AdobeXMPCore_Int::ICoreObjectFactory_I::GetInterfacePointer(AdobeXMPCore_Int::ICoreObjectFactory_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICoreObjectFactory_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::ICoreObjectFactory_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x6E4F626A46616374)
  {
    if (a3 != 1)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6E4F626A46616374, a3, exception);
    }
    uint64_t v4 = -64;
    return (void *)((char *)this + *(void *)(*this + v4));
  }
  if (a2 == 0x634F626A46616374)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        BOOL v10 = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634F626A46616374, a3, v10);
      }
      uint64_t v4 = -216;
      return (void *)((char *)this + *(void *)(*this + v4));
    }
  }
  else
  {
    if (a4)
    {
      unint64_t v8 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634F626A46616374, a2, v8);
    }
    return 0;
  }
  return this;
}

void sub_188840CAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ICoreObjectFactory_I::getInterfacePointer(AdobeXMPCore_Int::ICoreObjectFactory_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICoreObjectFactory_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCommon::IVersionable::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreObjectFactory_I.cpp", 23, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICoreObjectFactory_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  unint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::ICoreObjectFactory_I::GetActualICoreObjectFactory(AdobeXMPCore_Int::ICoreObjectFactory_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 216);
}

uint64_t AdobeXMPCore_Int::CompositeNodeImpl::GetNodeTypeAtPath(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 512))(&v3);
  if (v3) {
    uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_188840F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::GetNodeTypeAtPath(void *a1)
{
  return AdobeXMPCore_Int::CompositeNodeImpl::GetNodeTypeAtPath((uint64_t)a1 + *(void *)(*a1 - 552));
}

char *AdobeXMPCore_Int::CompositeNodeImpl::GetNodeAtPath@<X0>(char *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*a2)
  {
    uint64_t v3 = (uint64_t)result;
    (**(void (***)(char *))&result[*(void *)(*(void *)result - 744)])(&result[*(void *)(*(void *)result - 744)]);
    std::shared_ptr<AdobeXMPCore_Int::CompositeNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::CompositeNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v4, v3);
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void sub_188841B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  int v30 = *(std::__shared_weak_count **)(v28 - 104);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (*v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v27);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

char *virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::GetNodeAtPath@<X0>(char *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return AdobeXMPCore_Int::CompositeNodeImpl::GetNodeAtPath(&a1[*(void *)(*(void *)a1 - 560)], a2, a3);
}

void AdobeXMPCore_Int::CompositeNodeImpl::InsertNodeAtPath()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 10000, 2);
}

void sub_188841E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::InsertNodeAtPath()
{
}

void AdobeXMPCore_Int::CompositeNodeImpl::ReplaceNodeAtPath()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 10000, 2);
}

void sub_188841FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::ReplaceNodeAtPath()
{
}

void AdobeXMPCore_Int::CompositeNodeImpl::RemoveNodeAtPath(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 512))(a1);
  if (!*a2) {
    return;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a2 + 280))(*a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 528))(v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 280))(v4);
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 168))())
  {
    (*(void (**)(long long *__return_ptr))(*(void *)((char *)v5 + *(void *)(*v5 - 544)) + 240))(&v22);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v22 + 688))(v22);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 88))(&v20);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 72))(&v18);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 744))(&v23, v6, &v20, &v18);
    long long v7 = v23;
    long long v23 = 0uLL;
    unint64_t v8 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (*((void *)&v23 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
      }
    }
    unint64_t v9 = v19;
    if (!v19) {
      goto LABEL_19;
    }
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 160))())
  {
    long long v23 = 0uLL;
    (*(void (**)(long long *__return_ptr))(*(void *)((char *)v5 + *(void *)(*v5 - 544)) + 248))(&v23);
    uint64_t v10 = v23;
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*a2 + 176))();
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 680))(&v22, v10, v11);
    long long v12 = v22;
    long long v22 = 0uLL;
    BOOL v13 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v12;
    if (v13)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
    }
    unint64_t v14 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    if (*((void *)&v23 + 1)) {
      goto LABEL_22;
    }
    return;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)((char *)v5 + *(void *)(*v5 - 544)) + 240))(&v23);
  uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v23 + 688))(v23);
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 88))(&v22);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 72))(&v20);
  (*(void (**)(long long *__return_ptr, uint64_t, long long *, uint64_t *))(*(void *)v15 + 744))(&v23, v15, &v22, &v20);
  long long v16 = v23;
  long long v23 = 0uLL;
  uint64_t v17 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    if (*((void *)&v23 + 1)) {
      goto LABEL_18;
    }
  }
LABEL_19:
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  unint64_t v14 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
}

void sub_1888424C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  long long v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::RemoveNodeAtPath(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t AdobeXMPCore_Int::CompositeNodeImpl::CheckSuitabilityToBeUsedAsChildNode(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 48))(*a2))
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(100, 3, 2);
  }
  return 1;
}

void sub_18884286C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::INode_I::GetSimpleQualifier(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 512))(&v3);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 232))(v3);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_188842934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCommon::IUTF8String_v1::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)a2 + 208))();
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 168);

  return v6(a1, 0, v4, a2, 0, v5);
}

void std::shared_ptr<AdobeXMPCore_Int::CompositeNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::CompositeNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188842A8C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 744) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188842AF4(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::CompositeNodeImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 744);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::CompositeNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CompositeNodeImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::CompositeNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CompositeNodeImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::CompositeNodeImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::CompositeNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CompositeNodeImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t Host_IO::Writable(Host_IO *this, const char *a2)
{
  int v2 = (int)a2;
  memset(&v12, 0, sizeof(v12));
  if (stat((const char *)this, &v12))
  {
    if (!v2) {
      return 1;
    }
    memset(&v12, 0, 24);
    std::string::basic_string[abi:ne180100]<0>(&v12, (char *)this);
    std::string::size_type v5 = std::string::rfind((const std::string *)&v12, 47, 0xFFFFFFFFFFFFFFFFLL);
    if (v5 == -1)
    {
      MEMORY[0x18C11BE10](&v12, ".");
    }
    else
    {
      if (v5) {
        std::string::basic_string(&v11, (const std::string *)&v12, 0, v5, (std::allocator<char> *)&v13);
      }
      else {
        std::string::basic_string(&v11, (const std::string *)&v12, 0, 1uLL, (std::allocator<char> *)&v13);
      }
      if (SHIBYTE(v12.st_gid) < 0) {
        operator delete(*(void **)&v12.st_dev);
      }
      *(_OWORD *)&v12.st_dev = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      *(void *)&v12.st_uid = *((void *)&v11.__r_.__value_.__l + 2);
    }
    if ((v12.st_gid & 0x80000000) == 0) {
      unint64_t v9 = &v12;
    }
    else {
      unint64_t v9 = *(stat **)&v12.st_dev;
    }
    uint64_t v8 = Host_IO::Writable((Host_IO *)v9, (const char *)1, v6);
  }
  else
  {
    if (Host_IO::GetFileMode(this, v4) - 1 > 1) {
      return 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, (char *)this);
    if ((v12.st_gid & 0x80000000) == 0) {
      long long v7 = &v12;
    }
    else {
      long long v7 = *(stat **)&v12.st_dev;
    }
    uint64_t v8 = access((const char *)v7, 2) == 0;
  }
  if (SHIBYTE(v12.st_gid) < 0) {
    operator delete(*(void **)&v12.st_dev);
  }
  return v8;
}

void sub_188842D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Host_IO::GetFileMode(Host_IO *this, const char *a2)
{
  memset(&v6, 0, sizeof(v6));
  if (stat((const char *)this, &v6))
  {
    return 0;
  }
  else
  {
    int v3 = v6.st_mode & 0xF000;
    if (v3 == 0x4000) {
      unsigned __int8 v4 = 2;
    }
    else {
      unsigned __int8 v4 = 3;
    }
    if (v3 == 0x8000) {
      return 1;
    }
    else {
      return v4;
    }
  }
}

BOOL Host_IO::Create(Host_IO *this, const char *a2)
{
  memset(&v9, 0, sizeof(v9));
  int v4 = stat((const char *)this, &v9);
  if (!v4)
  {
    if (Host_IO::GetFileMode(this, v3) == 1) {
      return v4 != 0;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    uint64_t v8 = "Host_IO::Create, path exists but is not a file";
LABEL_8:
    exception[1] = v8;
    *((unsigned char *)exception + 16) = 0;
  }
  int v5 = open((const char *)this, 2562, 420);
  if (v5 == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    uint64_t v8 = "Host_IO::Create, cannot create file";
    goto LABEL_8;
  }
  close(v5);
  return v4 != 0;
}

uint64_t Host_IO::GetModifyDate(const char *a1, uint64_t a2)
{
  memset(&v7, 0, sizeof(v7));
  if (stat(a1, &v7)) {
    return 0;
  }
  int v5 = v7.st_mode & 0xF000;
  if (v5 != 0x8000 && v5 != 0x4000) {
    return 0;
  }
  uint64_t v3 = 1;
  if (a2)
  {
    memset(&v8, 0, sizeof(v8));
    gmtime_r(&v7.st_mtimespec.tv_sec, &v8);
    *(int32x2_t *)a2 = vrev64_s32(vadd_s32(*(int32x2_t *)&v8.tm_mon, (int32x2_t)0x76C00000001));
    *(unsigned char *)(a2 + 24) = 1;
    int8x16_t v6 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v8.tm_sec);
    *(int8x16_t *)(a2 + 8) = vextq_s8(v6, v6, 8uLL);
    *(_DWORD *)(a2 + 36) = 0;
    *(_WORD *)(a2 + 25) = 257;
    *(void *)(a2 + 27) = 0;
    *(unsigned char *)(a2 + 35) = 0;
  }
  return v3;
}

BOOL Host_IO::CreateTemp@<W0>(Host_IO *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  ConjureDerivedPath((char *)this, (std::string *)a2);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      goto LABEL_12;
    }
    int v4 = *(const char **)a2;
  }
  else
  {
    int v4 = (const char *)a2;
    if (!*(unsigned char *)(a2 + 23))
    {
LABEL_12:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      exception[1] = "Host_IO::CreateTemp, cannot create temp file path";
      *((unsigned char *)exception + 16) = 0;
    }
  }
  memset(&v9, 0, sizeof(v9));
  if (!stat(v4, &v9)) {
    __assert_rtn("CreateTemp", "Host_IO-POSIX.cpp", 194, "! Host_IO::Exists(tempPath.c_str())");
  }
  if (*(char *)(a2 + 23) >= 0) {
    int8x16_t v6 = (Host_IO *)a2;
  }
  else {
    int8x16_t v6 = *(Host_IO **)a2;
  }
  return Host_IO::Create(v6, v5);
}

void sub_1888430AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double ConjureDerivedPath@<D0>(char *__s@<X0>, std::string *a2@<X8>)
{
  memset(&v11, 0, sizeof(v11));
  std::string::basic_string[abi:ne180100]<0>(&v11, __s);
  std::string::append(&v11, "._nn_");
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v11;
  }
  else {
    int v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  size_t v5 = (size_t)v4 + strlen(__s);
  unsigned int v6 = 48;
  while (2)
  {
    *(unsigned char *)(v5 + 2) = v6;
    unsigned int v7 = 48;
    do
    {
      *(unsigned char *)(v5 + 3) = v7;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        tm v8 = &v11;
      }
      else {
        tm v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
      }
      memset(&v12, 0, sizeof(v12));
      if (stat((const char *)v8, &v12))
      {
        double result = *(double *)&v11.__r_.__value_.__l.__data_;
        *a2 = v11;
        return result;
      }
      BOOL v9 = v7++ > 0x38;
    }
    while (!v9);
    BOOL v9 = v6++ > 0x38;
    if (!v9) {
      continue;
    }
    break;
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_1888431E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Host_IO::Open(Host_IO *this, const char *a2)
{
  char v2 = (char)a2;
  if (a2) {
    uint64_t v3 = open((const char *)this, 0, 432);
  }
  else {
    uint64_t v3 = open((const char *)this, 2, 432);
  }
  uint64_t v4 = v3;
  if (v3 == -1)
  {
    int v5 = *__error();
    if (v5 == 2) {
      return v4;
    }
    if (v5 == 13)
    {
LABEL_12:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 112;
      tm v8 = "Host_IO::Open, file permission error";
      goto LABEL_15;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    tm v8 = "Host_IO::Open, other failure";
LABEL_15:
    exception[1] = v8;
    *((unsigned char *)exception + 16) = 0;
  }
  if (v2) {
    return v4;
  }
  memset(&v9, 0, sizeof(v9));
  if (fstat(v3, &v9) == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    tm v8 = "Host_IO::Open, fstat failed.";
    goto LABEL_15;
  }
  if ((v9.st_mode & 0x80) == 0) {
    goto LABEL_12;
  }
  return v4;
}

uint64_t Host_IO::Close(uint64_t this)
{
  if (this != -1)
  {
    this = close(this);
    if (this)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 11;
      exception[1] = "Host_IO::Close, close failure";
      *((unsigned char *)exception + 16) = 0;
    }
  }
  return this;
}

void Host_IO::SwapData(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2, const char *a3)
{
  memset(&v12, 0, sizeof(v12));
  ConjureDerivedPath((char *)this, &v12);
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v12.__r_.__value_.__s + 23))
    {
      int v5 = &v12;
      goto LABEL_6;
    }
LABEL_17:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Cannot create temp file path";
    *((unsigned char *)exception + 16) = 0;
  }
  if (!v12.__r_.__value_.__l.__size_) {
    goto LABEL_17;
  }
  int v5 = (std::string *)v12.__r_.__value_.__r.__words[0];
LABEL_6:
  memset(&v13, 0, sizeof(v13));
  if (!stat((const char *)v5, &v13)) {
    __assert_rtn("SwapData", "Host_IO-POSIX.cpp", 257, "! Host_IO::Exists(thirdPath.c_str())");
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v7 = (const std::__fs::filesystem::path *)&v12;
  }
  else {
    unsigned int v7 = (const std::__fs::filesystem::path *)v12.__r_.__value_.__r.__words[0];
  }
  Host_IO::Rename(this, v7, v6);
  Host_IO::Rename(a2, this, v8);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = (const std::__fs::filesystem::path *)&v12;
  }
  else {
    uint64_t v10 = (const std::__fs::filesystem::path *)v12.__r_.__value_.__r.__words[0];
  }
  Host_IO::Rename(v10, a2, v9);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_188843498(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const std::__fs::filesystem::path *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  Host_IO::Rename(v15, v16, v17);
  if (a15 >= 0) {
    unsigned int v19 = (const std::__fs::filesystem::path *)&a10;
  }
  else {
    unsigned int v19 = a10;
  }
  Host_IO::Rename(v19, v15, v18);
  __cxa_rethrow();
}

void sub_1888434CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1888434D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const std::__fs::filesystem::path *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  if (a15 >= 0) {
    uint64_t v17 = (const std::__fs::filesystem::path *)&a10;
  }
  else {
    uint64_t v17 = a10;
  }
  Host_IO::Rename(v17, v15, v16);
  __cxa_rethrow();
}

void sub_188843500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void Host_IO::Rename(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2, const char *a3)
{
  memset(&v9, 0, sizeof(v9));
  if (!stat((const char *)a2, &v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    tm v8 = "Host_IO::Rename, new path exists";
    goto LABEL_6;
  }
  rename(this, a2, v5);
  if (v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    tm v8 = "Host_IO::Rename, rename failure";
LABEL_6:
    exception[1] = v8;
    *((unsigned char *)exception + 16) = 0;
  }
}

uint64_t Host_IO::Delete(Host_IO *this, const char *a2)
{
  uint64_t result = Host_IO::GetFileMode(this, a2);
  switch((int)result)
  {
    case 1:
      uint64_t result = unlink((const char *)this);
      if (!result) {
        return result;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 11;
      int v5 = "Host_IO::Delete, unlink failure";
      break;
    case 2:
      uint64_t result = rmdir((const char *)this);
      if (!result) {
        return result;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 11;
      int v5 = "Host_IO::Delete, rmdir failure";
      break;
    case 3:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 11;
      int v5 = "Host_IO::Delete, can't delete 'other' file";
      break;
    default:
      return result;
  }
  exception[1] = v5;
  *((unsigned char *)exception + 16) = 0;
}

off_t Host_IO::Seek(int a1, off_t a2, unsigned int a3)
{
  if (a3 >= 3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    int v5 = "Host_IO::Seek, Invalid seek mode";
    goto LABEL_6;
  }
  off_t result = lseek(a1, a2, a3);
  if (result == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    int v5 = "Host_IO::Seek, lseek failure";
LABEL_6:
    exception[1] = v5;
    *((unsigned char *)exception + 16) = 0;
  }
  return result;
}

ssize_t Host_IO::Read(Host_IO *this, void *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    int v5 = "Host_IO::Read, request too large";
    goto LABEL_6;
  }
  ssize_t result = read((int)this, a2, a3);
  if (result == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 114;
    int v5 = "Host_IO::Read, read failure";
LABEL_6:
    exception[1] = v5;
    *((unsigned char *)exception + 16) = 0;
  }
  return result;
}

ssize_t Host_IO::Write(Host_IO *this, const void *a2, size_t __nbyte)
{
  if ((__nbyte & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    int v6 = "Host_IO::Write, request too large";
    goto LABEL_8;
  }
  int v3 = __nbyte;
  ssize_t result = write((int)this, a2, __nbyte);
  if (result != v3)
  {
    int v7 = *__error();
    exception = __cxa_allocate_exception(0x18uLL);
    if (v7 == 28)
    {
      *(_DWORD *)exception = 113;
      int v6 = "Host_IO::Write, disk full";
    }
    else
    {
      *(_DWORD *)exception = 115;
      int v6 = "Host_IO::Write, write failure";
    }
LABEL_8:
    exception[1] = v6;
    *((unsigned char *)exception + 16) = 0;
  }
  return result;
}

off_t Host_IO::Length(Host_IO *this)
{
  int v1 = (int)this;
  off_t v2 = lseek((int)this, 0, 1);
  off_t v3 = lseek(v1, 0, 2);
  if (v2 == -1 || v3 == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    exception[1] = "Host_IO::Length, lseek failure";
    *((unsigned char *)exception + 16) = 0;
  }
  off_t v5 = v3;
  lseek(v1, v2, 0);
  return v5;
}

uint64_t Host_IO::SetEOF(Host_IO *this, off_t a2)
{
  uint64_t result = ftruncate((int)this, a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    exception[1] = "Host_IO::SetEOF, ftruncate failure";
    *((unsigned char *)exception + 16) = 0;
  }
  return result;
}

void *AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointer(AdobeXMPCore_Int::ICompositeNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x63436D704E6F6465)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63436D704E6F6465, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 688));
    }
  }
  else
  {
    this = AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal((void *)((char *)this + *(void *)(*this - 696)), a2, a3, 0);
    if (this) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = a4 == 0;
    }
    if (!v6)
    {
      int v7 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63436D704E6F6465, a2, v7);
    }
  }
  return this;
}

void sub_188843A64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointer(AdobeXMPCore_Int::ICompositeNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::getInterfacePointer(AdobeXMPCore_Int::ICompositeNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICompositeNode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 25, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICompositeNode_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  stat v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 640))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::getInterfacePointer(AdobeXMPCore_Int::ICompositeNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ICompositeNode_I::getInterfacePointer((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::ICompositeNode_I::getInterfacePointer((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::getNodeTypeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 688);
  AdobeXMPCore::IPath_v1::MakeShared(a2, a2, &v9);
  long long v8 = v9;
  uint64_t v6 = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::ICompositeNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a3, (uint64_t)this + v5, 0, (uint64_t (*)(void *, uint64_t))AdobeXMPCore::ICompositeNode_v1::GetNodeTypeAtPath, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 57, (uint64_t)&v8);
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  return v6;
}

void sub_188843D74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::ICompositeNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a1 = 0;
  long long v8 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t))(*v8 + a4);
  }
  return a4(v8, a8);
}

uint64_t AdobeXMPCore::ICompositeNode_v1::GetNodeTypeAtPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 504))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::getNodeTypeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::getNodeTypeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 632)), a2, a3);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::getNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 688);
  AdobeXMPCore::IPath_v1::MakeShared(a2, a2, &v9);
  long long v8 = v9;
  uint64_t v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::ICompositeNode_v1::GetNodeAtPath, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 64, (uint64_t)&v8);
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  return v6;
}

void sub_188843FC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore::ICompositeNode_v1::GetNodeAtPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 512))();
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  std::string v11 = 0;
  std::string v12 = 0;
  int v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18884417C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    long long v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188844160);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888442F8(_Unwind_Exception *a1)
{
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::getNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::getNodeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 640)), a2, a3);
}

void AdobeXMPCore_Int::ICompositeNode_I::appendNode(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 688);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v6);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ICompositeNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (uint64_t (*)(void *, uint64_t))AdobeXMPCore::ICompositeNode_v1::AppendNode, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 69, (uint64_t)&v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1888443C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ICompositeNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  int v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(uint64_t (**)(void *, uint64_t))(*v7 + a3);
  }
  return a3(v7, a7);
}

uint64_t AdobeXMPCore::ICompositeNode_v1::AppendNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 520))();
}

void virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::appendNode(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
}

void AdobeXMPCore_Int::ICompositeNode_I::insertNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::IPath_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7 = *(void *)(*(void *)this - 688);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v10);
  AdobeXMPCore::IPath_v1::MakeShared(a3, v8, &v12);
  long long v9 = v12;
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ICompositeNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a4, (uint64_t)this + v7, (uint64_t (*)(void *, uint64_t, uint64_t))AdobeXMPCore::ICompositeNode_v1::InsertNodeAtPath, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 74, (uint64_t)&v10, (uint64_t)&v9);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_188844624(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ICompositeNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  *a1 = 0;
  long long v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a3);
  }
  return v8(v9, a7, a8);
}

uint64_t AdobeXMPCore::ICompositeNode_v1::InsertNodeAtPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 528))();
}

void virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::insertNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::IPath_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::replaceNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::IPath_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7 = *(void *)(*(void *)this - 688);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v12);
  AdobeXMPCore::IPath_v1::MakeShared(a3, v8, &v14);
  long long v11 = v14;
  uint64_t v9 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a4, (uint64_t)this + v7, (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCore::ICompositeNode_v1::ReplaceNodeAtPath, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 79, (uint64_t)&v12, (uint64_t)&v11);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v9;
}

void sub_1888448A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  uint64_t v8 = a3;
  *a1 = 0;
  stat v13 = 0;
  long long v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    long long v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    long long v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_188844A4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    long long v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    long long v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188844A30);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_188844BC8(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::ICompositeNode_v1::ReplaceNodeAtPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 536))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::replaceNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::IPath_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ICompositeNode_I::replaceNodeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 664)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::removeNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 688);
  AdobeXMPCore::IPath_v1::MakeShared(a2, a2, &v9);
  long long v8 = v9;
  uint64_t v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::ICompositeNode_v1::RemoveNodeAtPath, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 84, (uint64_t)&v8);
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  return v6;
}

void sub_188844CD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore::ICompositeNode_v1::RemoveNodeAtPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 544))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::removeNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::removeNodeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 672)), a2, a3);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::iterator(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INodeIterator_v1 *,AdobeXMPCore::INodeIterator_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 688), (void (*)(char **__return_ptr, void *))AdobeXMPCore::ICompositeNode_v1::Iterator, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INodeIterator_v1 *,AdobeXMPCore::INodeIterator_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  long long v8 = 0;
  long long v9 = 0;
  uint64_t v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x634E6F6465497420, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_188844F04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    long long v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    long long v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188844EE8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_188845080(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::ICompositeNode_v1::Iterator(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 552))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::iterator(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ICompositeNode_I::iterator((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(void *)(*(void *)this - 680)), a2);
}

uint64_t UTF8_to_UTF16Nat(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = (unsigned char *)result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        if (v10 >= v11) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v10;
        }
        while (((char)v13[v15] & 0x80000000) == 0)
        {
          a3[v15] = v13[v15];
          ++v15;
          v14 += 2;
          if (v16 == v15)
          {
            v13 += v15;
            a3 = (unsigned __int16 *)((char *)a3 + v14);
            unint64_t v15 = v16;
            goto LABEL_11;
          }
        }
        v13 += v15;
        a3 = (unsigned __int16 *)((char *)a3 + v14);
LABEL_11:
        v11 -= v15;
        v10 -= v15;
        if (v10 && v11)
        {
          do
          {
            unsigned int v21 = 0;
            unint64_t v19 = 0;
            unint64_t v20 = 0;
            if (((char)*v13 & 0x80000000) == 0) {
              break;
            }
            uint64_t result = (uint64_t)CodePoint_from_UTF8_Multi(v13, v10, &v21, &v20);
            unint64_t v17 = v20;
            if (!v20) {
              goto LABEL_23;
            }
            uint64_t result = v21;
            if (HIWORD(v21))
            {
              uint64_t result = CodePoint_to_UTF16Nat_Surrogate(v21, a3, v11, &v19);
              unint64_t v18 = v19;
              if (!v19) {
                goto LABEL_23;
              }
              unint64_t v17 = v20;
            }
            else
            {
              *a3 = v21;
              unint64_t v18 = 1;
            }
            v13 += v17;
            v11 -= v18;
            a3 += v18;
            v10 -= v17;
            if (!v10) {
              break;
            }
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_23:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned char *UTF8_to_UTF32Nat(unsigned char *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        if (v10 >= v11) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v10;
        }
        while (((char)v13[v15] & 0x80000000) == 0)
        {
          a3[v15] = v13[v15];
          ++v15;
          v14 += 4;
          if (v16 == v15)
          {
            v13 += v15;
            a3 = (unsigned int *)((char *)a3 + v14);
            unint64_t v15 = v16;
            goto LABEL_11;
          }
        }
        v13 += v15;
        a3 = (unsigned int *)((char *)a3 + v14);
LABEL_11:
        unint64_t v17 = v11 - v15;
        v10 -= v15;
        if (v10 && v17)
        {
          while (1)
          {
            unint64_t v19 = 0;
            if (((char)*v13 & 0x80000000) == 0) {
              break;
            }
            uint64_t result = CodePoint_from_UTF8_Multi(v13, v10, a3, &v19);
            if (!v19)
            {
              unint64_t v11 = v17;
              goto LABEL_26;
            }
            v10 -= v19;
            v13 += v19;
            unint64_t v11 = v17 - 1;
            ++a3;
            if (v10) {
              BOOL v18 = v17 == 1;
            }
            else {
              BOOL v18 = 1;
            }
            --v17;
            if (v18) {
              goto LABEL_22;
            }
          }
        }
        unint64_t v11 = v17;
LABEL_22:
        ;
      }
      while (v10 && v11);
    }
  }
LABEL_26:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF16Nat_to_UTF8(uint64_t result, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = (unsigned __int16 *)result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        unint64_t v14 = 0;
        if (v10 >= v11) {
          unint64_t v15 = v11;
        }
        else {
          unint64_t v15 = v10;
        }
        while (1)
        {
          unsigned int v16 = *v13;
          if (v16 > 0x7F) {
            break;
          }
          a3[v14] = v16;
          ++v13;
          if (v15 == ++v14)
          {
            a3 += v14;
            unint64_t v14 = v15;
            goto LABEL_11;
          }
        }
        a3 += v14;
LABEL_11:
        v11 -= v14;
        v10 -= v14;
        if (v10 && v11)
        {
          do
          {
            unint64_t v20 = 0;
            uint64_t result = *v13;
            if (result < 0x80 || (result & 0xF800) == 55296) {
              break;
            }
            uint64_t result = CodePoint_to_UTF8_Multi(result, a3, v11, &v20);
            if (!v20) {
              goto LABEL_29;
            }
            v11 -= v20;
            ++v13;
            a3 += v20;
            if (!--v10) {
              break;
            }
          }
          while (v11);
        }
        for (; v10 && v11; v10 -= v20)
        {
          unsigned int v19 = 0;
          unint64_t v20 = 0;
          unint64_t v18 = 0;
          if ((unsigned __int16)((unsigned __int16)(*v13 + 0x2000) >> 11) <= 0x1Eu) {
            break;
          }
          uint64_t result = (uint64_t)CodePoint_from_UTF16Nat_Surrogate(v13, v10, &v19, &v20);
          if (!v20) {
            goto LABEL_29;
          }
          uint64_t result = CodePoint_to_UTF8_Multi(v19, a3, v11, &v18);
          if (!v18) {
            goto LABEL_29;
          }
          v13 += v20;
          v11 -= v18;
          a3 += v18;
        }
      }
      while (v10 && v11);
    }
  }
LABEL_29:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF32Nat_to_UTF8(uint64_t result, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = (unsigned int *)result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        if (v10 >= v11) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v10;
        }
        while (1)
        {
          unsigned int v17 = v13[v15];
          if (v17 > 0x7F) {
            break;
          }
          a3[v15++] = v17;
          v14 += 4;
          if (v16 == v15)
          {
            a3 += v15;
            stat v13 = (unsigned int *)((char *)v13 + v14);
            goto LABEL_11;
          }
        }
        a3 += v15;
        stat v13 = (unsigned int *)((char *)v13 + v14);
        unint64_t v16 = v15;
LABEL_11:
        v11 -= v16;
        v10 -= v16;
        if (v10 && v11)
        {
          do
          {
            unint64_t v18 = 0;
            uint64_t result = *v13;
            if (result <= 0x7F) {
              break;
            }
            uint64_t result = CodePoint_to_UTF8_Multi(result, a3, v11, &v18);
            if (!v18) {
              goto LABEL_19;
            }
            v11 -= v18;
            ++v13;
            a3 += v18;
            if (!--v10) {
              break;
            }
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_19:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t CodePoint_to_UTF16Nat(uint64_t result, unsigned __int16 *a2, unint64_t a3, unint64_t *a4)
{
  if (!a3)
  {
    unint64_t v4 = 0;
LABEL_10:
    *a4 = v4;
    return result;
  }
  if (result >> 11 <= 0x1A)
  {
LABEL_9:
    *a2 = result;
    unint64_t v4 = 1;
    goto LABEL_10;
  }
  if (!WORD1(result))
  {
    if (result >> 13 <= 6)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      exception[1] = "Bad UTF-32 - surrogate code point";
      *((unsigned char *)exception + 16) = 0;
    }
    goto LABEL_9;
  }

  return CodePoint_to_UTF16Nat_Surrogate(result, a2, a3, a4);
}

uint64_t CodePoint_to_UTF16Swp(uint64_t result, unsigned __int16 *a2, unint64_t a3, unint64_t *a4)
{
  if (!a3)
  {
    unint64_t v4 = 0;
LABEL_10:
    *a4 = v4;
    return result;
  }
  if (result >> 11 <= 0x1A)
  {
LABEL_9:
    *a2 = bswap32(result) >> 16;
    unint64_t v4 = 1;
    goto LABEL_10;
  }
  if (!WORD1(result))
  {
    if (result >> 13 <= 6)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      exception[1] = "Bad UTF-32 - surrogate code point";
      *((unsigned char *)exception + 16) = 0;
    }
    goto LABEL_9;
  }

  return CodePoint_to_UTF16Swp_Surrogate(result, a2, a3, a4);
}

unsigned __int16 *CodePoint_from_UTF16Nat(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  if (a2)
  {
    unsigned int v4 = *result;
    if ((v4 & 0xF800) == 0xD800) {
      return CodePoint_from_UTF16Nat_Surrogate(result, a2, a3, a4);
    }
    *a3 = v4;
    unint64_t v5 = 1;
  }
  else
  {
    unint64_t v5 = 0;
  }
  *a4 = v5;
  return result;
}

unsigned __int16 *CodePoint_from_UTF16Swp(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  if (a2)
  {
    unsigned int v4 = bswap32(*result);
    if (v4 >> 27 == 27) {
      return CodePoint_from_UTF16Swp_Surrogate(result, a2, a3, a4);
    }
    *a3 = HIWORD(v4);
    unint64_t v5 = 1;
  }
  else
  {
    unint64_t v5 = 0;
  }
  *a4 = v5;
  return result;
}

uint64_t UTF8_to_UTF16Swp(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = (unsigned char *)result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        if (v10 >= v11) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v10;
        }
        while (((char)v13[v15] & 0x80000000) == 0)
        {
          a3[v15] = v13[v15] << 8;
          ++v15;
          v14 += 2;
          if (v16 == v15)
          {
            v13 += v15;
            a3 = (unsigned __int16 *)((char *)a3 + v14);
            unint64_t v15 = v16;
            goto LABEL_11;
          }
        }
        v13 += v15;
        a3 = (unsigned __int16 *)((char *)a3 + v14);
LABEL_11:
        v11 -= v15;
        v10 -= v15;
        if (v10 && v11)
        {
          do
          {
            unsigned int v21 = 0;
            unint64_t v19 = 0;
            unint64_t v20 = 0;
            if (((char)*v13 & 0x80000000) == 0) {
              break;
            }
            uint64_t result = (uint64_t)CodePoint_from_UTF8_Multi(v13, v10, &v21, &v20);
            unint64_t v17 = v20;
            if (!v20) {
              goto LABEL_23;
            }
            uint64_t result = v21;
            if (HIWORD(v21))
            {
              uint64_t result = CodePoint_to_UTF16Swp_Surrogate(v21, a3, v11, &v19);
              unint64_t v18 = v19;
              if (!v19) {
                goto LABEL_23;
              }
              unint64_t v17 = v20;
            }
            else
            {
              *a3 = bswap32(v21) >> 16;
              unint64_t v18 = 1;
            }
            v13 += v17;
            v11 -= v18;
            a3 += v18;
            v10 -= v17;
            if (!v10) {
              break;
            }
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_23:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned char *UTF8_to_UTF32Swp(unsigned char *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        if (v10 >= v11) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v10;
        }
        while (1)
        {
          int v17 = (char)v13[v15];
          if (v17 < 0) {
            break;
          }
          a3[v15++] = v17 << 24;
          v14 += 4;
          if (v16 == v15)
          {
            v13 += v15;
            a3 = (unsigned int *)((char *)a3 + v14);
            unint64_t v15 = v16;
            goto LABEL_11;
          }
        }
        v13 += v15;
        a3 = (unsigned int *)((char *)a3 + v14);
LABEL_11:
        unint64_t v18 = v11 - v15;
        v10 -= v15;
        if (v10 && v18)
        {
          while (1)
          {
            unint64_t v22 = 0;
            unsigned int v21 = 0;
            if (((char)*v13 & 0x80000000) == 0) {
              break;
            }
            uint64_t result = CodePoint_from_UTF8_Multi(v13, v10, &v21, &v22);
            unint64_t v19 = v22;
            if (!v22)
            {
              unint64_t v11 = v18;
              goto LABEL_26;
            }
            *a3++ = bswap32(v21);
            v10 -= v19;
            v13 += v19;
            unint64_t v11 = v18 - 1;
            if (v10) {
              BOOL v20 = v18 == 1;
            }
            else {
              BOOL v20 = 1;
            }
            --v18;
            if (v20) {
              goto LABEL_22;
            }
          }
        }
        unint64_t v11 = v18;
LABEL_22:
        ;
      }
      while (v10 && v11);
    }
  }
LABEL_26:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF16Swp_to_UTF8(uint64_t result, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = (unsigned __int16 *)result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        unint64_t v14 = 0;
        if (v10 >= v11) {
          unint64_t v15 = v11;
        }
        else {
          unint64_t v15 = v10;
        }
        while (1)
        {
          unsigned int v16 = bswap32(*v13) >> 16;
          if (v16 > 0x7F) {
            break;
          }
          a3[v14] = v16;
          ++v13;
          if (v15 == ++v14)
          {
            a3 += v14;
            unint64_t v14 = v15;
            goto LABEL_11;
          }
        }
        a3 += v14;
LABEL_11:
        v11 -= v14;
        v10 -= v14;
        if (v10 && v11)
        {
          do
          {
            unint64_t v20 = 0;
            uint64_t result = bswap32(*v13) >> 16;
            if (result < 0x80 || (result & 0xF800) == 55296) {
              break;
            }
            uint64_t result = CodePoint_to_UTF8_Multi(result, a3, v11, &v20);
            if (!v20) {
              goto LABEL_29;
            }
            v11 -= v20;
            ++v13;
            a3 += v20;
            if (!--v10) {
              break;
            }
          }
          while (v11);
        }
        for (; v10 && v11; v10 -= v20)
        {
          unsigned int v19 = 0;
          unint64_t v20 = 0;
          unint64_t v18 = 0;
          if ((unsigned __int16)((unsigned __int16)((*v13 << 8) + 0x2000) >> 11) <= 0x1Eu) {
            break;
          }
          uint64_t result = (uint64_t)CodePoint_from_UTF16Swp_Surrogate(v13, v10, &v19, &v20);
          if (!v20) {
            goto LABEL_29;
          }
          uint64_t result = CodePoint_to_UTF8_Multi(v19, a3, v11, &v18);
          if (!v18) {
            goto LABEL_29;
          }
          v13 += v20;
          v11 -= v18;
          a3 += v18;
        }
      }
      while (v10 && v11);
    }
  }
LABEL_29:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF32Swp_to_UTF8(uint64_t result, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = (unsigned int *)result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        unint64_t v14 = 0;
        if (v10 >= v11) {
          unint64_t v15 = v11;
        }
        else {
          unint64_t v15 = v10;
        }
        while (1)
        {
          unsigned int v16 = bswap32(*v13);
          if (v16 > 0x7F) {
            break;
          }
          a3[v14] = v16;
          ++v13;
          if (v15 == ++v14)
          {
            a3 += v14;
            goto LABEL_11;
          }
        }
        a3 += v14;
        unint64_t v15 = v14;
LABEL_11:
        v11 -= v15;
        v10 -= v15;
        if (v10 && v11)
        {
          do
          {
            unint64_t v17 = 0;
            uint64_t result = bswap32(*v13);
            if (result <= 0x7F) {
              break;
            }
            uint64_t result = CodePoint_to_UTF8_Multi(result, a3, v11, &v17);
            if (!v17) {
              goto LABEL_19;
            }
            v11 -= v17;
            ++v13;
            a3 += v17;
            if (!--v10) {
              break;
            }
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_19:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned __int16 *UTF16Nat_to_UTF32Nat(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        if (v10 >= v11) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v10;
        }
        while (1)
        {
          unsigned int v17 = *v13;
          if ((v17 & 0xF800) == 0xD800) {
            break;
          }
          a3[v15] = v17;
          ++v13;
          ++v15;
          v14 += 4;
          if (v16 == v15)
          {
            a3 = (unsigned int *)((char *)a3 + v14);
            unint64_t v15 = v16;
            goto LABEL_11;
          }
        }
        a3 = (unsigned int *)((char *)a3 + v14);
LABEL_11:
        unint64_t v18 = v11 - v15;
        v10 -= v15;
        if (v10 && v18)
        {
          while (1)
          {
            unint64_t v20 = 0;
            if ((unsigned __int16)((unsigned __int16)(*v13 + 0x2000) >> 11) <= 0x1Eu) {
              break;
            }
            uint64_t result = CodePoint_from_UTF16Nat_Surrogate(v13, v10, a3, &v20);
            if (!v20)
            {
              unint64_t v11 = v18;
              goto LABEL_26;
            }
            v10 -= v20;
            v13 += v20;
            unint64_t v11 = v18 - 1;
            ++a3;
            if (v10) {
              BOOL v19 = v18 == 1;
            }
            else {
              BOOL v19 = 1;
            }
            --v18;
            if (v19) {
              goto LABEL_22;
            }
          }
        }
        unint64_t v11 = v18;
LABEL_22:
        ;
      }
      while (v10 && v11);
    }
  }
LABEL_26:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned __int16 *UTF16Nat_to_UTF32Swp(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        unint64_t v14 = 0;
        if (v10 >= v11) {
          unint64_t v15 = v11;
        }
        else {
          unint64_t v15 = v10;
        }
        while (1)
        {
          unsigned int v16 = *v13;
          if ((v16 & 0xF800) == 0xD800) {
            break;
          }
          *a3++ = bswap32(v16);
          ++v13;
          if (v15 == ++v14)
          {
            unint64_t v14 = v15;
            break;
          }
        }
        v11 -= v14;
        v10 -= v14;
        if (v10 && v11)
        {
          do
          {
            unint64_t v19 = 0;
            unsigned int v18 = 0;
            if ((unsigned __int16)((unsigned __int16)(*v13 + 0x2000) >> 11) <= 0x1Eu) {
              break;
            }
            uint64_t result = CodePoint_from_UTF16Nat_Surrogate(v13, v10, &v18, &v19);
            unint64_t v17 = v19;
            if (!v19) {
              goto LABEL_18;
            }
            *a3++ = bswap32(v18);
            v13 += v17;
            --v11;
            v10 -= v17;
            if (!v10) {
              break;
            }
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_18:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned __int16 *UTF16Swp_to_UTF32Nat(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        if (v10 >= v11) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v10;
        }
        while (1)
        {
          unsigned int v17 = bswap32(*v13);
          if (v17 >> 27 == 27) {
            break;
          }
          a3[v15] = HIWORD(v17);
          ++v13;
          ++v15;
          v14 += 4;
          if (v16 == v15)
          {
            a3 = (unsigned int *)((char *)a3 + v14);
            unint64_t v15 = v16;
            goto LABEL_11;
          }
        }
        a3 = (unsigned int *)((char *)a3 + v14);
LABEL_11:
        unint64_t v18 = v11 - v15;
        v10 -= v15;
        if (v10 && v18)
        {
          while (1)
          {
            unint64_t v20 = 0;
            if ((unsigned __int16)((unsigned __int16)((*v13 << 8) + 0x2000) >> 11) <= 0x1Eu) {
              break;
            }
            uint64_t result = CodePoint_from_UTF16Swp_Surrogate(v13, v10, a3, &v20);
            if (!v20)
            {
              unint64_t v11 = v18;
              goto LABEL_26;
            }
            v10 -= v20;
            v13 += v20;
            unint64_t v11 = v18 - 1;
            ++a3;
            if (v10) {
              BOOL v19 = v18 == 1;
            }
            else {
              BOOL v19 = 1;
            }
            --v18;
            if (v19) {
              goto LABEL_22;
            }
          }
        }
        unint64_t v11 = v18;
LABEL_22:
        ;
      }
      while (v10 && v11);
    }
  }
LABEL_26:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned __int16 *UTF16Swp_to_UTF32Swp(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = a4;
  if (a2)
  {
    unint64_t v10 = a2;
    unint64_t v11 = a4;
    if (a4)
    {
      stat v13 = result;
      unint64_t v11 = a4;
      unint64_t v10 = a2;
      do
      {
        unint64_t v14 = 0;
        if (v10 >= v11) {
          unint64_t v15 = v11;
        }
        else {
          unint64_t v15 = v10;
        }
        while (1)
        {
          int v16 = *v13;
          if ((v16 & 0xF8) == 0xD8) {
            break;
          }
          *a3++ = v16 << 16;
          ++v13;
          if (v15 == ++v14)
          {
            unint64_t v14 = v15;
            break;
          }
        }
        v11 -= v14;
        v10 -= v14;
        if (v10 && v11)
        {
          do
          {
            unint64_t v19 = 0;
            unsigned int v18 = 0;
            if ((unsigned __int16)((unsigned __int16)((*v13 << 8) + 0x2000) >> 11) <= 0x1Eu) {
              break;
            }
            uint64_t result = CodePoint_from_UTF16Swp_Surrogate(v13, v10, &v18, &v19);
            unint64_t v17 = v19;
            if (!v19) {
              goto LABEL_18;
            }
            *a3++ = bswap32(v18);
            v13 += v17;
            --v11;
            v10 -= v17;
            if (!v10) {
              break;
            }
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_18:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF32Nat_to_UTF16Nat(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9 = a2;
  unint64_t v10 = a4;
  if (a2)
  {
    unint64_t v9 = a2;
    unint64_t v10 = a4;
    if (a4)
    {
      uint64_t v12 = (unsigned int *)result;
      unint64_t v10 = a4;
      unint64_t v9 = a2;
      do
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        if (v9 >= v10) {
          unint64_t v16 = v10;
        }
        else {
          unint64_t v16 = v9;
        }
        while (1)
        {
          unsigned int v17 = v12[v15];
          if (HIWORD(v17)) {
            break;
          }
          a3[v15++] = v17;
          v14 += 2;
          v13 += 4;
          if (v16 == v15)
          {
            a3 = (unsigned __int16 *)((char *)a3 + v14);
            uint64_t v12 = (unsigned int *)((char *)v12 + v13);
            goto LABEL_11;
          }
        }
        a3 = (unsigned __int16 *)((char *)a3 + v14);
        uint64_t v12 = (unsigned int *)((char *)v12 + v13);
        unint64_t v16 = v15;
LABEL_11:
        unint64_t v18 = v9 - v16;
        if (v9 == v16 || v10 == v16)
        {
          v9 -= v16;
          v10 -= v16;
          if (!v18) {
            break;
          }
        }
        else
        {
          uint64_t v19 = -(uint64_t)v9;
          while (1)
          {
            unint64_t v23 = 0;
            uint64_t result = *v12;
            if (!WORD1(result)) {
              break;
            }
            uint64_t result = CodePoint_to_UTF16Nat_Surrogate(result, a3, v10 - v16, &v23);
            if (!v23)
            {
              v10 -= v16;
              unint64_t v9 = -(uint64_t)(v16 + v19);
              goto LABEL_26;
            }
            ++v12;
            v10 -= 2;
            a3 += 2;
            uint64_t v20 = v19 + 1;
            if (~v16 != v19)
            {
              ++v19;
              if (v10 != v16) {
                continue;
              }
            }
            v10 -= v16;
            unint64_t v21 = v16 + v20;
            goto LABEL_22;
          }
          v10 -= v16;
          unint64_t v21 = v16 + v19;
LABEL_22:
          unint64_t v9 = -(uint64_t)v21;
          if (!v9) {
            break;
          }
        }
      }
      while (v10);
    }
  }
LABEL_26:
  *a5 = a2 - v9;
  *a6 = a4 - v10;
  return result;
}

uint64_t UTF32Nat_to_UTF16Swp(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9 = a2;
  unint64_t v10 = a4;
  if (a2)
  {
    unint64_t v9 = a2;
    unint64_t v10 = a4;
    if (a4)
    {
      uint64_t v12 = (unsigned int *)result;
      unint64_t v10 = a4;
      unint64_t v9 = a2;
      do
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        if (v9 >= v10) {
          unint64_t v15 = v10;
        }
        else {
          unint64_t v15 = v9;
        }
        while (1)
        {
          unsigned int v16 = v12[v14];
          if (HIWORD(v16)) {
            break;
          }
          *a3++ = bswap32(v16) >> 16;
          ++v14;
          v13 += 4;
          if (v15 == v14)
          {
            uint64_t v12 = (unsigned int *)((char *)v12 + v13);
            goto LABEL_11;
          }
        }
        uint64_t v12 = (unsigned int *)((char *)v12 + v13);
        unint64_t v15 = v14;
LABEL_11:
        unint64_t v17 = v9 - v15;
        if (v9 == v15 || v10 == v15)
        {
          v9 -= v15;
          v10 -= v15;
          if (!v17) {
            break;
          }
        }
        else
        {
          uint64_t v18 = -(uint64_t)v9;
          while (1)
          {
            unint64_t v22 = 0;
            uint64_t result = *v12;
            if (!WORD1(result)) {
              break;
            }
            uint64_t result = CodePoint_to_UTF16Swp_Surrogate(result, a3, v10 - v15, &v22);
            if (!v22)
            {
              v10 -= v15;
              unint64_t v9 = -(uint64_t)(v15 + v18);
              goto LABEL_26;
            }
            ++v12;
            v10 -= 2;
            a3 += 2;
            uint64_t v19 = v18 + 1;
            if (~v15 != v18)
            {
              ++v18;
              if (v10 != v15) {
                continue;
              }
            }
            v10 -= v15;
            unint64_t v20 = v15 + v19;
            goto LABEL_22;
          }
          v10 -= v15;
          unint64_t v20 = v15 + v18;
LABEL_22:
          unint64_t v9 = -(uint64_t)v20;
          if (!v9) {
            break;
          }
        }
      }
      while (v10);
    }
  }
LABEL_26:
  *a5 = a2 - v9;
  *a6 = a4 - v10;
  return result;
}

uint64_t UTF32Swp_to_UTF16Nat(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9 = a2;
  unint64_t v10 = a4;
  if (a2)
  {
    unint64_t v9 = a2;
    unint64_t v10 = a4;
    if (a4)
    {
      uint64_t v12 = (unsigned int *)result;
      unint64_t v10 = a4;
      unint64_t v9 = a2;
      do
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        if (v9 >= v10) {
          unint64_t v15 = v10;
        }
        else {
          unint64_t v15 = v9;
        }
        while (1)
        {
          unsigned int v16 = bswap32(*v12);
          if (HIWORD(v16)) {
            break;
          }
          a3[v14] = v16;
          ++v12;
          ++v14;
          v13 += 2;
          if (v15 == v14)
          {
            a3 = (unsigned __int16 *)((char *)a3 + v13);
            goto LABEL_11;
          }
        }
        a3 = (unsigned __int16 *)((char *)a3 + v13);
        unint64_t v15 = v14;
LABEL_11:
        unint64_t v17 = v9 - v15;
        if (v9 == v15 || v10 == v15)
        {
          v9 -= v15;
          v10 -= v15;
          if (!v17) {
            break;
          }
        }
        else
        {
          uint64_t v18 = -(uint64_t)v9;
          while (1)
          {
            unint64_t v22 = 0;
            uint64_t result = bswap32(*v12);
            if (!WORD1(result)) {
              break;
            }
            uint64_t result = CodePoint_to_UTF16Nat_Surrogate(result, a3, v10 - v15, &v22);
            if (!v22)
            {
              v10 -= v15;
              unint64_t v9 = -(uint64_t)(v15 + v18);
              goto LABEL_26;
            }
            ++v12;
            v10 -= 2;
            a3 += 2;
            uint64_t v19 = v18 + 1;
            if (~v15 != v18)
            {
              ++v18;
              if (v10 != v15) {
                continue;
              }
            }
            v10 -= v15;
            unint64_t v20 = v15 + v19;
            goto LABEL_22;
          }
          v10 -= v15;
          unint64_t v20 = v15 + v18;
LABEL_22:
          unint64_t v9 = -(uint64_t)v20;
          if (!v9) {
            break;
          }
        }
      }
      while (v10);
    }
  }
LABEL_26:
  *a5 = a2 - v9;
  *a6 = a4 - v10;
  return result;
}

uint64_t UTF32Swp_to_UTF16Swp(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v8 = a2;
  unint64_t v9 = a4;
  if (a2)
  {
    unint64_t v8 = a2;
    unint64_t v9 = a4;
    if (a4)
    {
      unint64_t v11 = (unsigned int *)result;
      uint64_t v12 = swap32to16Offset;
      unint64_t v9 = a4;
      unint64_t v8 = a2;
      do
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        if (v8 >= v9) {
          unint64_t v15 = v9;
        }
        else {
          unint64_t v15 = v8;
        }
        while (!(bswap32(*v11) >> 16))
        {
          a3[v14++] = *((_WORD *)v11++ + v12);
          v13 += 2;
          if (v15 == v14)
          {
            a3 = (unsigned __int16 *)((char *)a3 + v13);
            unint64_t v14 = v15;
            goto LABEL_11;
          }
        }
        a3 = (unsigned __int16 *)((char *)a3 + v13);
LABEL_11:
        unint64_t v16 = v8 - v14;
        if (v8 == v14 || v9 == v14)
        {
          v8 -= v14;
          v9 -= v14;
          if (!v16) {
            break;
          }
        }
        else
        {
          uint64_t v17 = -(uint64_t)v8;
          while (1)
          {
            unint64_t v22 = 0;
            uint64_t result = bswap32(*v11);
            if (!WORD1(result)) {
              break;
            }
            uint64_t result = CodePoint_to_UTF16Swp_Surrogate(result, a3, v9 - v14, &v22);
            if (!v22)
            {
              v9 -= v14;
              unint64_t v8 = -(uint64_t)(v14 + v17);
              goto LABEL_26;
            }
            ++v11;
            v9 -= 2;
            a3 += 2;
            uint64_t v18 = v17 + 1;
            if (~v14 != v17)
            {
              ++v17;
              if (v9 != v14) {
                continue;
              }
            }
            v9 -= v14;
            unint64_t v19 = v14 + v18;
            goto LABEL_22;
          }
          v9 -= v14;
          unint64_t v19 = v14 + v17;
LABEL_22:
          unint64_t v8 = -(uint64_t)v19;
          if (!v8) {
            break;
          }
        }
      }
      while (v9);
    }
  }
LABEL_26:
  *a5 = a2 - v8;
  *a6 = a4 - v9;
  return result;
}

void ToUTF16(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  off_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = &UTF8_to_UTF16LE;
  if (v9) {
    unint64_t v8 = &UTF8_to_UTF16BE;
  }
  unint64_t v10 = (void (*)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *))*v8;
  std::string::erase(v2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::reserve(v3, 2 * v5);
  if (v5)
  {
    bzero(__s, 0x4000uLL);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      v10(v7, v5, __s, 0x2000, &v13, &v12);
      if (!v12)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 205;
        exception[1] = "Incomplete Unicode at end of string";
        *((unsigned char *)exception + 16) = 0;
      }
      std::string::append(v3, __s, 2 * v12);
      v7 += v13;
      v5 -= v13;
    }
    while (v5);
  }
}

void ToUTF32(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  off_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = &UTF8_to_UTF32LE;
  if (v9) {
    unint64_t v8 = &UTF8_to_UTF32BE;
  }
  unint64_t v10 = (void (*)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *))*v8;
  std::string::erase(v2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::reserve(v3, 4 * v5);
  if (v5)
  {
    bzero(__s, 0x4000uLL);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      v10(v7, v5, __s, 4096, &v13, &v12);
      if (!v12)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 205;
        exception[1] = "Incomplete Unicode at end of string";
        *((unsigned char *)exception + 16) = 0;
      }
      std::string::append(v3, __s, 4 * v12);
      v7 += v13;
      v5 -= v13;
    }
    while (v5);
  }
}

void FromUTF16(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  off_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = &UTF16LE_to_UTF8;
  if (v9) {
    unint64_t v8 = &UTF16BE_to_UTF8;
  }
  unint64_t v10 = (void (*)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, std::string::size_type *))*v8;
  std::string::erase(v2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::reserve(v3, 2 * v5);
  if (v5)
  {
    bzero(__s, 0x4000uLL);
    std::string::size_type __n = 0;
    uint64_t v13 = 0;
    do
    {
      v10(v7, v5, __s, 0x4000, &v13, &__n);
      if (!__n)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 205;
        exception[1] = "Incomplete Unicode at end of string";
        *((unsigned char *)exception + 16) = 0;
      }
      std::string::append(v3, __s, __n);
      v7 += 2 * v13;
      v5 -= v13;
    }
    while (v5);
  }
}

uint64_t CodePoint_to_UTF8_Multi(uint64_t result, unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  if (result >= 0x110000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    unint64_t v10 = "Bad UTF-32 - out of range";
    goto LABEL_16;
  }
  if (result >> 11 == 27)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    unint64_t v10 = "Bad UTF-32 - surrogate code point";
LABEL_16:
    exception[1] = v10;
    *((unsigned char *)exception + 16) = 0;
  }
  unint64_t v4 = 0;
  if (result)
  {
    unsigned int v5 = result;
    do
    {
      ++v4;
      BOOL v6 = v5 >= 0x3F;
      BOOL v7 = v5 == 63;
      v5 >>= 6;
    }
    while (!v7 && v6);
  }
  if (result >> (6 * v4 - 6) > (0x80u >> v4) - 1) {
    ++v4;
  }
  if (v4 <= a3)
  {
    unint64_t v8 = v4 - 1;
    if (v4 != 1)
    {
      do
      {
        a2[v8] = result & 0x3F | 0x80;
        uint64_t result = result >> 6;
        --v8;
      }
      while (v8);
    }
    *a2 = result | (-1 << (8 - v4));
  }
  else
  {
    unint64_t v4 = 0;
  }
  *a4 = v4;
  return result;
}

unsigned char *CodePoint_from_UTF8_Multi(unsigned char *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  if (((char)*result & 0x80000000) == 0) {
    goto LABEL_17;
  }
  unint64_t v4 = 0;
  LOBYTE(v5) = *result;
  do
  {
    ++v4;
    unsigned int v5 = 2 * (v5 & 0x7F);
  }
  while (v5 > 0x7F);
  if (v4 - 5 < 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_17:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    unint64_t v11 = "Invalid UTF-8 sequence length";
    goto LABEL_16;
  }
  if (v4 <= a2)
  {
    int v6 = *result & ~(-1 << (7 - v4));
    uint64_t v7 = 1;
    do
    {
      char v8 = result[v7];
      if ((v8 & 0xC0) != 0x80)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        unint64_t v11 = "Invalid UTF-8 data byte";
        goto LABEL_16;
      }
      unsigned int v9 = v8 & 0x3F | (v6 << 6);
      ++v7;
      int v6 = v9;
    }
    while (v4 != v7);
    if (v9 >> 11 < 0x1B) {
      goto LABEL_13;
    }
    if (v9 >> 13 <= 6)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      unint64_t v11 = "Bad UTF-8 - surrogate code point";
    }
    else
    {
      if (v9 < 0x110000)
      {
LABEL_13:
        *a3 = v9;
        goto LABEL_14;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      unint64_t v11 = "Bad UTF-8 - out of range";
    }
LABEL_16:
    exception[1] = v11;
    *((unsigned char *)exception + 16) = 0;
  }
  unint64_t v4 = 0;
LABEL_14:
  *a4 = v4;
  return result;
}

uint64_t CodePoint_to_UTF16Nat_Surrogate(uint64_t result, unsigned __int16 *a2, unint64_t a3, unint64_t *a4)
{
  if (result >= 0x110000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Bad UTF-32 - out of range";
    *((unsigned char *)exception + 16) = 0;
  }
  if (a3 >= 2)
  {
    *a2 = ((result + 16711680) >> 10) | 0xD800;
    a2[1] = result & 0x3FF | 0xDC00;
    unint64_t v4 = 2;
  }
  else
  {
    unint64_t v4 = 0;
  }
  *a4 = v4;
  return result;
}

unsigned __int16 *CodePoint_from_UTF16Nat_Surrogate(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4 = *result;
  if (v4 >> 10 >= 0x37)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    char v8 = "Bad UTF-16 - leading low surrogate";
    goto LABEL_9;
  }
  if (a2 >= 2)
  {
    unsigned __int16 v6 = result[1];
    if ((unsigned __int16)((unsigned __int16)(v6 + 0x2000) >> 10) > 0x3Eu)
    {
      *a3 = (v6 & 0x3FF | ((v4 & 0x3FF) << 10)) + 0x10000;
      unint64_t v5 = 2;
      goto LABEL_6;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    char v8 = "Bad UTF-16 - missing low surrogate";
LABEL_9:
    exception[1] = v8;
    *((unsigned char *)exception + 16) = 0;
  }
  unint64_t v5 = 0;
LABEL_6:
  *a4 = v5;
  return result;
}

uint64_t CodePoint_to_UTF16Swp_Surrogate(uint64_t result, unsigned __int16 *a2, unint64_t a3, unint64_t *a4)
{
  if (result >= 0x110000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Bad UTF-32 - out of range";
    *((unsigned char *)exception + 16) = 0;
  }
  if (a3 >= 2)
  {
    *a2 = bswap32(((result + 16711680) >> 10) | 0xD800) >> 16;
    a2[1] = __rev16(result & 0x3FF | 0xDC00);
    unint64_t v4 = 2;
  }
  else
  {
    unint64_t v4 = 0;
  }
  *a4 = v4;
  return result;
}

unsigned __int16 *CodePoint_from_UTF16Swp_Surrogate(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4 = bswap32(*result);
  if (v4 >> 26 >= 0x37)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    char v8 = "Bad UTF-16 - leading low surrogate";
    goto LABEL_9;
  }
  if (a2 >= 2)
  {
    unsigned int v6 = bswap32(result[1]) >> 16;
    if ((unsigned __int16)((unsigned __int16)(v6 + 0x2000) >> 10) > 0x3Eu)
    {
      *a3 = (v6 & 0x3FF | ((HIWORD(v4) & 0x3FF) << 10)) + 0x10000;
      unint64_t v5 = 2;
      goto LABEL_6;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    char v8 = "Bad UTF-16 - missing low surrogate";
LABEL_9:
    exception[1] = v8;
    *((unsigned char *)exception + 16) = 0;
  }
  unint64_t v5 = 0;
LABEL_6:
  *a4 = v5;
  return result;
}

uint64_t WXMPMeta_RegisterNamespace_1(XMPMeta *a1, char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void), unsigned int *a5)
{
  *(void *)a5 = 0;
  if (!a1 || !*(unsigned char *)a1)
  {
    unsigned int v9 = "Empty namespace URI";
    goto LABEL_10;
  }
  if (!a2 || !*a2)
  {
    unsigned int v9 = "Empty suggested prefix";
LABEL_10:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    exception[1] = v9;
    *((unsigned char *)exception + 16) = 0;
  }
  memset(v11, 0, sizeof(v11));
  uint64_t result = XMPMeta::RegisterNamespace(a1, a2, (const char **)&v11[4], (const char **)v11, a5);
  a5[8] = result;
  if (a3) {
    return a4(a3, *(void *)&v11[4], *(unsigned int *)v11);
  }
  return result;
}

void sub_1888471FC(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = "XMP";
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
      char v8 = "";
      if (v7) {
        char v8 = (const char *)v7;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      char v8 = "Caught unknown exception";
    }
    *(void *)uint64_t v2 = v8;
  }
  __cxa_end_catch();
  JUMPOUT(0x1888471A8);
}

void WXMPMeta_GetProperty_1(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void), uint64_t a7)
{
  unint64_t v21 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(void *)a7 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v18 = "Empty schema namespace URI";
    goto LABEL_15;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v18 = "Empty property name";
LABEL_15:
    exception[1] = v18;
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (a5) {
    unint64_t v14 = a5;
  }
  else {
    unint64_t v14 = &v19;
  }
  int v15 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, uint64_t *, char *, uint64_t *))(*(void *)a1 + 16))(a1, a2, a3, &v20, (char *)&v19 + 4, v14);
  char v16 = v15 ^ 1;
  *(_DWORD *)(a7 + 32) = v15;
  if (!a4) {
    char v16 = 1;
  }
  if ((v16 & 1) == 0) {
    a6(a4, v20, HIDWORD(v19));
  }
  XMP_AutoLock::~XMP_AutoLock(&v21);
}

void sub_1888473EC(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    *(void *)(v2 + 8) = "XMP";
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x188847378);
    }
    *(_DWORD *)(v2 + 32) = 13;
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
    unint64_t v5 = "";
    if (v7) {
      unint64_t v5 = (const char *)v7;
    }
  }
  *(void *)uint64_t v2 = v5;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1888474A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_GetArrayItem_1(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(uint64_t, uint64_t, void), uint64_t a8)
{
  unint64_t v23 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(void *)a8 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v20 = "Empty schema namespace URI";
    goto LABEL_15;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v20 = "Empty array name";
LABEL_15:
    exception[1] = v20;
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a6) {
    char v16 = a6;
  }
  else {
    char v16 = &v21;
  }
  int v17 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, uint64_t, uint64_t *, char *, uint64_t *))(*(void *)a1 + 24))(a1, a2, a3, a4, &v22, (char *)&v21 + 4, v16);
  char v18 = v17 ^ 1;
  *(_DWORD *)(a8 + 32) = v17;
  if (!a5) {
    char v18 = 1;
  }
  if ((v18 & 1) == 0) {
    a7(a5, v22, HIDWORD(v21));
  }
  XMP_AutoLock::~XMP_AutoLock(&v23);
}

void sub_188847610(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    *(void *)(v2 + 8) = "XMP";
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x18884759CLL);
    }
    *(_DWORD *)(v2 + 32) = 13;
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
    unint64_t v5 = "";
    if (v7) {
      unint64_t v5 = (const char *)v7;
    }
  }
  *(void *)uint64_t v2 = v5;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1888476C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_SetProperty_1(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((unsigned char *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_AppendArrayItem_1(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  char v16 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a7 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    int v15 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v15 = "Empty array name";
LABEL_8:
    exception[1] = v15;
    *((unsigned char *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, a3, a4, a5, a6);
  XMP_AutoLock::~XMP_AutoLock(&v16);
}

void WXMPMeta_SetStructField_1(uint64_t a1, char *a2, char *a3, char *a4, char *a5, const char *a6, uint64_t a7, void *a8)
{
  char v18 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a8 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    int v17 = "Empty schema namespace URI";
    goto LABEL_14;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v17 = "Empty struct name";
    goto LABEL_14;
  }
  if (!a4 || !*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    int v17 = "Empty field namespace URI";
    goto LABEL_14;
  }
  if (!a5 || !*a5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v17 = "Empty field name";
LABEL_14:
    exception[1] = v17;
    *((unsigned char *)exception + 16) = 0;
  }
  XMPMeta::SetStructField((XMPMeta *)a1, a2, a3, a4, a5, a6, a7);
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void WXMPMeta_SetQualifier_1(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, uint64_t a6, uint64_t a7, void *a8)
{
  char v18 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a8 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    int v17 = "Empty schema namespace URI";
    goto LABEL_14;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v17 = "Empty property name";
    goto LABEL_14;
  }
  if (!a4 || !*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    int v17 = "Empty qualifier namespace URI";
    goto LABEL_14;
  }
  if (!a5 || !*a5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v17 = "Empty qualifier name";
LABEL_14:
    exception[1] = v17;
    *((unsigned char *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, unsigned char *, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, a4, a5, a6, a7);
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void WXMPMeta_DeleteProperty_1(uint64_t a1, unsigned char *a2, unsigned char *a3, void *a4)
{
  unint64_t v10 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a4 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    unsigned int v9 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    unsigned int v9 = "Empty property name";
LABEL_8:
    exception[1] = v9;
    *((unsigned char *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)a1 + 80))(a1, a2, a3);
  XMP_AutoLock::~XMP_AutoLock(&v10);
}

void WXMPMeta_DoesPropertyExist_1(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v10 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(void *)a4 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    unsigned int v9 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    unsigned int v9 = "Empty property name";
LABEL_8:
    exception[1] = v9;
    *((unsigned char *)exception + 16) = 0;
  }
  *(_DWORD *)(a4 + 32) = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)a1 + 112))(a1, a2, a3);
  XMP_AutoLock::~XMP_AutoLock(&v10);
}

void sub_1888481A4(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
      char v8 = "";
      if (v7) {
        char v8 = (const char *)v7;
      }
      *(void *)uint64_t v2 = v8;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x188848138);
}

void sub_188848258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_GetLocalizedText_1(uint64_t a1, unsigned char *a2, unsigned char *a3, const char *a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t *a8, void (*a9)(uint64_t, uint64_t, void), uint64_t a10)
{
  uint16x8_t v27 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(void *)a10 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v22 = "Empty schema namespace URI";
    goto LABEL_21;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v22 = "Empty array name";
    goto LABEL_21;
  }
  if (a4) {
    char v18 = a4;
  }
  else {
    char v18 = "";
  }
  if (!a5 || !*a5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    uint64_t v22 = "Empty specific language";
LABEL_21:
    exception[1] = v22;
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v26 = 0;
  unsigned int v25 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v19 = &v23;
  if (a8) {
    uint64_t v19 = a8;
  }
  int v20 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, const char *, unsigned char *, uint64_t *, unsigned int *, uint64_t *, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a3, v18, a5, &v26, &v25, &v24, (char *)&v23 + 4, v19);
  *(_DWORD *)(a10 + 32) = v20;
  if (v20)
  {
    if (a6) {
      a9(a6, v26, v25);
    }
    if (a7) {
      a9(a7, v24, HIDWORD(v23));
    }
  }
  XMP_AutoLock::~XMP_AutoLock(&v27);
}

void sub_18884842C(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    *(void *)(v2 + 8) = "XMP";
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x188848398);
    }
    *(_DWORD *)(v2 + 32) = 13;
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
    unint64_t v5 = "";
    if (v7) {
      unint64_t v5 = (const char *)v7;
    }
  }
  *(void *)uint64_t v2 = v5;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1888484E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_SetLocalizedText_1(uint64_t a1, unsigned char *a2, unsigned char *a3, const char *a4, unsigned char *a5, const char *a6, uint64_t a7, void *a8)
{
  int v20 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a8 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v19 = "Empty schema namespace URI";
    goto LABEL_17;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v19 = "Empty array name";
    goto LABEL_17;
  }
  if (a4) {
    char v16 = a4;
  }
  else {
    char v16 = "";
  }
  if (!a5 || !*a5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    uint64_t v19 = "Empty specific language";
LABEL_17:
    exception[1] = v19;
    *((unsigned char *)exception + 16) = 0;
  }
  if (a6) {
    int v17 = a6;
  }
  else {
    int v17 = "";
  }
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, const char *, unsigned char *, const char *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3, v16, a5, v17, a7);
  XMP_AutoLock::~XMP_AutoLock(&v20);
}

void WXMPMeta_GetProperty_Bool_1(uint64_t a1, const char *a2, const char *a3, BOOL *a4, unsigned int *a5, uint64_t a6)
{
  char v18 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(void *)a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    int v15 = "Empty schema namespace URI";
    goto LABEL_13;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v15 = "Empty property name";
LABEL_13:
    exception[1] = v15;
    *((unsigned char *)exception + 16) = 0;
  }
  int v17 = 0;
  if (a5) {
    uint64_t v12 = a5;
  }
  else {
    uint64_t v12 = (unsigned int *)&v17;
  }
  BOOL v16 = 0;
  int Property_Bool = XMPMeta::GetProperty_Bool((XMPMeta *)a1, a2, a3, &v16, v12);
  if (a4) {
    *a4 = v16;
  }
  *(_DWORD *)(a6 + 32) = Property_Bool;
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void sub_18884882C(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
      char v8 = "";
      if (v7) {
        char v8 = (const char *)v7;
      }
      *(void *)uint64_t v2 = v8;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x1888487BCLL);
}

void sub_1888488E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_GetProperty_Int_1(uint64_t a1, const char *a2, const char *a3, int *a4, unsigned int *a5, uint64_t a6)
{
  int v17 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(void *)a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    int v15 = "Empty schema namespace URI";
    goto LABEL_14;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v15 = "Empty property name";
LABEL_14:
    exception[1] = v15;
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v16 = 0;
  if (a4) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = (int *)&v16 + 1;
  }
  if (a5) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = (unsigned int *)&v16;
  }
  *(_DWORD *)(a6 + 32) = XMPMeta::GetProperty_Int((XMPMeta *)a1, a2, a3, v12, v13);
  XMP_AutoLock::~XMP_AutoLock(&v17);
}

void sub_1888489FC(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    *(void *)(v2 + 8) = "XMP";
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x18884898CLL);
    }
    *(_DWORD *)(v2 + 32) = 13;
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
    unint64_t v5 = "";
    if (v7) {
      unint64_t v5 = (const char *)v7;
    }
  }
  *(void *)uint64_t v2 = v5;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_188848AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_GetProperty_Date_1(uint64_t a1, unsigned char *a2, unsigned char *a3, long long *a4, int *a5, uint64_t a6)
{
  int v17 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(void *)a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    int v15 = "Empty schema namespace URI";
    goto LABEL_15;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    int v15 = "Empty property name";
LABEL_15:
    exception[1] = v15;
    *((unsigned char *)exception + 16) = 0;
  }
  {
    qword_1E90FFFA8 = 0;
    WXMPMeta_GetProperty_Date_1::voidDateTime = 0u;
    unk_1E90FFF98 = 0u;
  }
  int v16 = 0;
  if (a4) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = &WXMPMeta_GetProperty_Date_1::voidDateTime;
  }
  if (a5) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = &v16;
  }
  *(_DWORD *)(a6 + 32) = XMPMeta::GetProperty_Date(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)v12, (uint64_t)v13);
  XMP_AutoLock::~XMP_AutoLock(&v17);
}

void sub_188848C20(void *a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
      char v8 = "";
      if (v7) {
        char v8 = (const char *)v7;
      }
      *(void *)uint64_t v2 = v8;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x188848B74);
}

void sub_188848CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_SetProperty_Bool_1(uint64_t a1, const char *a2, const char *a3, int a4, uint64_t a5, void *a6)
{
  unint64_t v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((unsigned char *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Bool((XMPMeta *)a1, a2, a3, a4 != 0, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_SetProperty_Int_1(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((unsigned char *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Int((XMPMeta *)a1, a2, a3, a4, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_SetProperty_Int64_1(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((unsigned char *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Int64((XMPMeta *)a1, a2, a3, a4, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_SetProperty_Float_1(uint64_t a1, const char *a2, const char *a3, uint64_t a4, void *a5, double a6)
{
  unint64_t v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a5 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((unsigned char *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Float((XMPMeta *)a1, a2, a3, a6, a4);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_SetProperty_Date_1(uint64_t a1, unsigned char *a2, unsigned char *a3, long long *a4, uint64_t a5, void *a6)
{
  unint64_t v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((unsigned char *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Date(a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_Clone_1(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 16;
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *a3 = 0;
  if (sUseNewCoreAPIs) {
    operator new();
  }
  operator new();
}

void sub_188849690(void *a1, int a2)
{
  MEMORY[0x18C11C0E0](v3, 0x10B3C4030275F38);
  if (a2 == 3)
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v6;
    uint64_t v7 = (const char *)*((void *)v6 + 1);
    if (!v7) {
      uint64_t v7 = "";
    }
    *(void *)uint64_t v2 = v7;
    *(void *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    char v8 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      uint64_t v9 = (*(uint64_t (**)(void *))(*(void *)v8 + 16))(v8);
      unint64_t v10 = "";
      if (v9) {
        unint64_t v10 = (const char *)v9;
      }
      *(void *)uint64_t v2 = v10;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x18884964CLL);
}

void sub_1888497F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_CountArrayItems_1(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v10 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(void *)a4 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v9 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v9 = "Empty array name";
LABEL_8:
    exception[1] = v9;
    *((unsigned char *)exception + 16) = 0;
  }
  *(_DWORD *)(a4 + 32) = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)a1 + 184))(a1, a2, a3);
  XMP_AutoLock::~XMP_AutoLock(&v10);
}

void sub_188849908(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    unint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      unint64_t v5 = "";
    }
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    unsigned int v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
      char v8 = "";
      if (v7) {
        char v8 = (const char *)v7;
      }
      *(void *)uint64_t v2 = v8;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(void *)uint64_t v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x18884989CLL);
}

void sub_1888499BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_SerializeToBuffer_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, void (*a8)(uint64_t, void *, uint64_t), void *a9)
{
  uint64_t v24 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *a9 = 0;
  if (a5) {
    int v17 = a5;
  }
  else {
    int v17 = "";
  }
  if (a6) {
    char v18 = a6;
  }
  else {
    char v18 = "";
  }
  std::string __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)a1 + 208))(a1, &__p, a3, a4, v17, v18, a7);
  if (a2)
  {
    if (v23 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v23 >= 0) {
      uint64_t v20 = HIBYTE(v23);
    }
    else {
      uint64_t v20 = v22;
    }
    a8(a2, p_p, v20);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  XMP_AutoLock::~XMP_AutoLock(&v24);
}

void sub_188849AF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a2 == 3)
  {
    char v18 = __cxa_begin_catch(a1);
    *(_DWORD *)(v14 + 32) = *(_DWORD *)v18;
    *(void *)(v14 + 8) = "XMP";
    uint64_t v19 = v18[1];
    if (!v19) {
      uint64_t v19 = v15;
    }
  }
  else
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v14 + 32) = 14;
      *(void *)uint64_t v14 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_12:
      JUMPOUT(0x188849AC8);
    }
    *(_DWORD *)(v14 + 32) = 13;
    uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
    if (v21) {
      uint64_t v19 = v21;
    }
    else {
      uint64_t v19 = v15;
    }
  }
  *(void *)uint64_t v14 = v19;
  __cxa_end_catch();
  goto LABEL_12;
}

void sub_188849BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_Initialize_1_cold_1(void *a1, uint64_t a2)
{
  uint64_t v3 = __cxa_begin_catch(a1);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)v3;
  uint64_t v4 = (const char *)*((void *)v3 + 1);
  if (!v4) {
    uint64_t v4 = "";
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = "XMP";

  __cxa_end_catch();
}

void AdobeXMPCore_Int::NodeImpl::NodeImpl(AdobeXMPCore_Int::NodeImpl *this, const char *a2, AdobeXMPCore_Int::IUTF8String_I *a3, const char *a4)
{
  uint64_t v4 = *(void *)a2;
  *(void *)this = *(void *)a2;
  *(void *)((char *)this + *(void *)(v4 - 664)) = *((void *)a2 + 1);
  *(void *)((char *)this + *(void *)(*(void *)this - 544)) = *((void *)a2 + 2);
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = *((void *)a2 + 3);
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = *((void *)a2 + 4);
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = *((void *)a2 + 5);
  *(void *)((char *)this + *(void *)(*(void *)this - 552)) = *((void *)a2 + 6);
  *(void *)((char *)this + *(void *)(*(void *)this - 560)) = *((void *)a2 + 7);
  *(void *)((char *)this + *(void *)(*(void *)this - 672)) = *((void *)a2 + 8);
  *(void *)((char *)this + *(void *)(*(void *)this - 688)) = *((void *)a2 + 9);
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a3, a4);
}

void sub_188849FB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *AdobeXMPCore_Int::VerifyNameSpace(unsigned char *this, const char *a2)
{
  uint64_t v4 = a2;
  if (!this || !a2 || a2 == (const char *)-1 && !*this)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
  }
  return this;
}

void sub_18884A274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::VerifyName(uint64_t this, const char *a2)
{
  uint64_t v2 = (char *)this;
  if (!this) {
    goto LABEL_64;
  }
  uint64_t v3 = a2;
  if (!a2) {
    goto LABEL_64;
  }
  if (a2 == (const char *)-1)
  {
    if (*(unsigned char *)this)
    {
      this = strlen((const char *)this);
      uint64_t v3 = (const char *)this;
      goto LABEL_6;
    }
LABEL_64:
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
  }
LABEL_6:
  if (v3 != (const char *)2)
  {
    this = strncmp(v2, "[]", 2uLL);
    if (this)
    {
      if ((uint64_t)v3 <= 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        uint64_t v7 = "Empty XML name";
LABEL_66:
        *(_DWORD *)exception = 102;
        exception[1] = v7;
        *((unsigned char *)exception + 16) = 0;
      }
      if (*v2 < 0)
      {
        unsigned int v17 = 0;
        unint64_t v16 = 0;
        this = (uint64_t)CodePoint_from_UTF8(v2, 4uLL, &v17, &v16);
        unint64_t v5 = &v2[v16];
        if (v17 - 192 >= 0x17
          && v17 - 216 >= 0x1F
          && v17 - 248 >= 0x208
          && v17 - 880 >= 0xE
          && v17 - 895 >= 0x1C81
          && (v17 & 0xFFFFFFFE) != 0x200C
          && v17 - 8304 >= 0x120
          && v17 - 11264 >= 0x3F0
          && v17 - 12289 >= 0xA7FF
          && v17 - 63744 >= 0x4D0
          && v17 - 65008 >= 0x20E
          && (v17 - 0x10000) >> 17 > 6)
        {
          goto LABEL_13;
        }
      }
      else
      {
        int v4 = *v2;
        unint64_t v5 = v2 + 1;
        if ((v4 - 97) >= 0x1A && v4 != 95 && (v4 - 65) >= 0x1A)
        {
LABEL_13:
          exception = __cxa_allocate_exception(0x18uLL);
          uint64_t v7 = "Bad XML name";
          goto LABEL_66;
        }
      }
      char v8 = &v3[(void)v2];
      while (v5 < v8)
      {
        if (*v5 < 0)
        {
          unsigned int v17 = 0;
          unint64_t v16 = 0;
          this = (uint64_t)CodePoint_from_UTF8(v5, 4uLL, &v17, &v16);
          v5 += v16;
          if (v17 - 192 >= 0x17 && v17 - 216 >= 0x1F)
          {
            BOOL v15 = v17 - 248 >= 0x208 && v17 - 880 >= 0xE;
            if (v15
              && v17 - 895 >= 0x1C81
              && (v17 & 0xFFFFFFFE) != 0x200C
              && v17 - 8304 >= 0x120
              && v17 - 11264 >= 0x3F0
              && v17 - 12289 >= 0xA7FF
              && v17 - 63744 >= 0x4D0
              && v17 - 768 >= 0x70
              && v17 - 65008 >= 0x20E
              && v17 - 0x10000 >= 0xE0000
              && v17 - 8255 >= 2
              && v17 != 183)
            {
              goto LABEL_13;
            }
          }
        }
        else
        {
          int v9 = *v5++;
          if ((v9 - 97) >= 0x1A && v9 != 95 && (v9 - 65) >= 0x1A)
          {
            unsigned int v11 = v9 - 48;
            unsigned int v12 = v9 - 45;
            if (v11 >= 0xA && v12 >= 2) {
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  return this;
}

void sub_18884A81C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a12 = 0;
  a13 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(100, 102, 2);
}

void sub_18884A9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  __cxa_end_catch();
  JUMPOUT(0x18884AA14);
}

void AdobeXMPCore_Int::NodeImpl::ChangeParent(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore::INode_v1 *a2)
{
  memset(v13, 0, sizeof(v13));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v13, (char *)this + *(void *)(*(void *)this - 688) + 8, 1);
  int v4 = (AdobeXMPCore::INode_v1 *)*((void *)this + 7);
  if (!v4)
  {
    unint64_t v8 = atomic_load((unint64_t *)this + 11);
    if (v8 >= 2)
    {
      uint64_t v9 = *((void *)this + 6);
      if (v9)
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 280))(v9);
        (*(void (**)(uint64_t))(*(void *)v10 + 576))(v10);
      }
      if (!a2) {
        goto LABEL_14;
      }
      uint64_t v11 = (*(uint64_t (**)(AdobeXMPCore::INode_v1 *))(*(void *)a2 + 280))(a2);
      (*(void (**)(uint64_t))(*(void *)v11 + 560))(v11);
LABEL_13:
      uint64_t v12 = (*(uint64_t (**)(AdobeXMPCore::INode_v1 *))(*(void *)a2 + 280))(a2);
      (*(void (**)(uint64_t))(*(void *)v12 + 560))(v12);
      goto LABEL_14;
    }
LABEL_12:
    if (!a2) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v4 == a2) {
    goto LABEL_16;
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = atomic_load((unint64_t *)this + 11);
  if (v6 >= 2)
  {
    uint64_t v7 = *(void *)(*(uint64_t (**)(void))(**((void **)this + 6) + 280))(*((void *)this + 6));
    (*(void (**)(void))(v7 + 576))();
    goto LABEL_12;
  }
LABEL_14:
  *((void *)this + 6) = a2;
  AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(this, 0);
  if (!*((void *)this + 6))
  {
    *((unsigned char *)this + 96) = 0;
    *((void *)this + 5) = 0;
  }
LABEL_16:
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v13);
}

void sub_18884AC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(AdobeXMPCore_Int::NodeImpl *this, char a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (a2)
  {
    if (v3)
    {
      unint64_t v4 = atomic_load((unint64_t *)((char *)this + *(void *)(*(void *)this - 672) + 8));
      if (v4 <= 2)
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
        *((void *)this + 7) = 0;
        *((void *)this + 8) = 0;
        if (v5)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
      }
    }
  }
  else if (!v3)
  {
    unint64_t v6 = atomic_load((unint64_t *)((char *)this + *(void *)(*(void *)this - 672) + 8));
    if (v6 >= 2)
    {
      uint64_t v7 = (char *)*((void *)this + 6);
      if (v7) {
        AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore::INode_v1>(v7, 1, &v8);
      }
    }
  }
}

uint64_t AdobeXMPCore_Int::NodeImpl::GetRawParentPointer(AdobeXMPCore_Int::NodeImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  uint64_t v2 = *((void *)this + 6);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

void AdobeXMPCore_Int::NodeImpl::GetParent(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
  memset(v7, 0, sizeof(v7));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  unint64_t v4 = (char *)*((void *)this + 6);
  if (v4)
  {
    uint64_t v5 = *(void *)v4;
    if (*((unsigned char *)this + 96))
    {
      uint64_t v6 = (*(uint64_t (**)(char *))(v5 + 280))(v4);
      unint64_t v4 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 528))(v6);
      uint64_t v5 = *(void *)v4;
    }
    (**(void (***)(char *))&v4[*(void *)(v5 - 56)])(&v4[*(void *)(v5 - 56)]);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a2, (uint64_t)v4);
  }
  *a2 = 0;
  a2[1] = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
}

void sub_18884AF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore::INode_v1>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 56)])(&a1[*(void *)(*(void *)a1 - 56)]);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_18884B104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetParent(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
}

void AdobeXMPCore_Int::NodeImpl::SetName(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore_Int *a2, char *a3)
{
  AdobeXMPCore_Int::VerifyName((uint64_t)a2, a3);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3);
}

void sub_18884B6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 56);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v20 - 40);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::SetName(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore_Int *a2, char *a3)
{
}

void AdobeXMPCore_Int::NodeImpl::GetName(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
  if ((*(unsigned int (**)(AdobeXMPCore_Int::NodeImpl *))(*(void *)this + 160))(this))
  {
    unint64_t v4 = *(void (**)(void))(**((void **)this + 6) + 72);
    v4();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v6, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
    uint64_t v5 = *((void *)this + 4);
    *a2 = *((void *)this + 3);
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v6);
  }
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetName(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
}

void AdobeXMPCore_Int::NodeImpl::SetNameSpace(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore_Int *a2, char *a3)
{
  AdobeXMPCore_Int::VerifyNameSpace(a2, a3);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3);
}

void sub_18884BE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 56);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v20 - 40);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::SetNameSpace(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore_Int *a2, char *a3)
{
}

void AdobeXMPCore_Int::NodeImpl::GetNameSpace(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
  if ((*(unsigned int (**)(AdobeXMPCore_Int::NodeImpl *))(*(void *)this + 160))(this))
  {
    unint64_t v4 = *(void (**)(void))(**((void **)this + 6) + 88);
    v4();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v6, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
    uint64_t v5 = *((void *)this + 2);
    *a2 = *((void *)this + 1);
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v6);
  }
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetNameSpace(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
}

void AdobeXMPCore_Int::NodeImpl::GetPath(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  for (uint64_t i = (char *)this + *(void *)(*(void *)this - 544);
        ;
        uint64_t i = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 528))(v4))
  {
    uint64_t v10 = i;
    if (!i) {
      break;
    }
    uint64_t v4 = (*(uint64_t (**)(char *))(*(void *)i + 280))(i);
    std::vector<AdobeXMPCore::INode_v1 const*,AdobeXMPCore_Int::TAllocator<AdobeXMPCore::INode_v1 const*>>::push_back[abi:ne180100]((AdobeXMPCore_Int::IMemoryAllocator_I *)&v11, &v10);
  }
  uint64_t v5 = (void *)(v12 - 8);
  if (v11 != v12 && (unint64_t)v5 > v11)
  {
    unint64_t v7 = v11 + 8;
    do
    {
      uint64_t v8 = *(void *)(v7 - 8);
      *(void *)(v7 - 8) = *v5;
      *v5-- = v8;
      BOOL v9 = v7 >= (unint64_t)v5;
      v7 += 8;
    }
    while (!v9);
  }
  *a2 = 0;
  a2[1] = 0;
  AdobeXMPCore::IPath_v1::CreatePath(0);
}

void sub_18884C348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  a17 = &a14;
  std::vector<AdobeXMPCore::INode_v1 const*,AdobeXMPCore_Int::TAllocator<AdobeXMPCore::INode_v1 const*>>::__destroy_vector::operator()[abi:ne180100]((AdobeXMPCore_Int::IMemoryAllocator_I *)&a17);
  _Unwind_Resume(a1);
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::vector<AdobeXMPCore::INode_v1 const*,AdobeXMPCore_Int::TAllocator<AdobeXMPCore::INode_v1 const*>>::push_back[abi:ne180100](AdobeXMPCore_Int::IMemoryAllocator_I *result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 2);
  uint64_t v5 = (void *)*((void *)result + 1);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *(void *)result) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - *(void *)result;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t v23 = (char *)result + 16;
    if (v10)
    {
      MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(result);
      uint64_t v12 = (**MemoryAllocator)(MemoryAllocator, 8 * v10);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (void *)(v12 + 8 * v7);
    uint64_t v14 = v12 + 8 * v10;
    uint64_t v22 = v14;
    *uint64_t v13 = *a2;
    uint64_t v6 = v13 + 1;
    v21.i64[1] = (uint64_t)(v13 + 1);
    uint64_t v16 = *(void *)v3;
    unint64_t v15 = *((void *)v3 + 1);
    if (v15 == *(void *)v3)
    {
      int64x2_t v18 = vdupq_n_s64(v15);
    }
    else
    {
      do
      {
        uint64_t v17 = *(void *)(v15 - 8);
        v15 -= 8;
        *--uint64_t v13 = v17;
      }
      while (v15 != v16);
      int64x2_t v18 = *(int64x2_t *)v3;
      uint64_t v6 = (void *)v21.i64[1];
      uint64_t v14 = v22;
    }
    *(void *)uint64_t v3 = v13;
    *((void *)v3 + 1) = v6;
    int64x2_t v21 = v18;
    uint64_t v19 = *((void *)v3 + 2);
    *((void *)v3 + 2) = v14;
    uint64_t v22 = v19;
    uint64_t v20 = v18.i64[0];
    uint64_t result = std::__split_buffer<AdobeXMPCore::INode_v1 const*,AdobeXMPCore_Int::TAllocator<AdobeXMPCore::INode_v1 const*> &>::~__split_buffer((AdobeXMPCore_Int::IMemoryAllocator_I *)&v20);
  }
  else
  {
    void *v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  *((void *)v3 + 1) = v6;
  return result;
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetPath(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
}

void AdobeXMPCore_Int::NodeImpl::GetQualifier(AdobeXMPCore_Int::NodeImpl *this@<X0>, const char *a2@<X1>, const char *a3@<X3>, uint64_t a4@<X2>, uint64_t a5@<X4>, void *a6@<X8>)
{
  memset(v12, 0, sizeof(v12));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v12, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  if (*((void *)this + 9))
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v12);
    (*(void (**)(void, const char *, uint64_t, const char *, uint64_t))(**((void **)this + 9) + 648))(*((void *)this + 9), a2, a4, a3, a5);
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v12);
  }
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetQualifier(AdobeXMPCore_Int::NodeImpl *this@<X0>, const char *a2@<X1>, const char *a3@<X3>, uint64_t a4@<X2>, uint64_t a5@<X4>, void *a6@<X8>)
{
}

void AdobeXMPCore_Int::NodeImpl::GetQualifier(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, a1 + *(void *)(*(void *)a1 - 688) + 8, 0);
  if (*(void *)(a1 + 72))
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
    uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 688))(*(void *)(a1 + 72));
    (*(void (**)(void))(v4 + 736))();
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  }
}

uint64_t AdobeXMPCore_Int::NodeImpl::InsertQualifier(AdobeXMPCore_Int::NodeImpl *a1, uint64_t a2)
{
  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(a1);
  (*(void (**)(void *, uint64_t))(**((void **)a1 + 9) + 656))(*((void **)a1 + 9), a2);
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)a2 + 280))() + 552);

  return v4();
}

void AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(void *)(*(void *)this - 688) + 8, 1);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
  if (!*((void *)this + 9)) {
    AdobeXMPCore::IStructureNode_v1::CreateStructureNode((AdobeXMPCore::IStructureNode_v1 *)"http://qualifiers", (char *)0xC, "_qualifiers_", (const char *)0xC);
  }
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::InsertQualifier(void *a1, uint64_t a2)
{
  return AdobeXMPCore_Int::NodeImpl::InsertQualifier((AdobeXMPCore_Int::NodeImpl *)((char *)a1 + *(void *)(*a1 - 176)), a2);
}

uint64_t AdobeXMPCore_Int::NodeImpl::ReplaceQualifier@<X0>(AdobeXMPCore_Int::NodeImpl *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(a1);
  *a3 = 0;
  a3[1] = 0;
  (*(void (**)(void))(**((void **)a1 + 9) + 664))();
  uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)a2 + 280))();
  return (*(uint64_t (**)(void))(v6 + 552))();
}

void sub_18884CA5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::ReplaceQualifier@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return AdobeXMPCore_Int::NodeImpl::ReplaceQualifier((AdobeXMPCore_Int::NodeImpl *)((char *)a1 + *(void *)(*a1 - 184)), a2, a3);
}

uint64_t AdobeXMPCore_Int::NodeImpl::RemoveQualifier(AdobeXMPCore_Int::NodeImpl *this, const char *a2, unint64_t a3, const char *a4)
{
  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(this);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 9) + 672);

  return v5();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::RemoveQualifier(AdobeXMPCore_Int::NodeImpl *this, const char *a2, unint64_t a3, const char *a4)
{
  uint64_t v4 = (AdobeXMPCore_Int::NodeImpl *)((char *)this + *(void *)(*(void *)this - 192));
  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(v4);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)v4 + 9) + 672);

  return v5();
}

uint64_t AdobeXMPCore_Int::NodeImpl::RemoveQualifier(AdobeXMPCore_Int::NodeImpl *a1)
{
  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(a1);
  uint64_t v2 = (void *)(*(uint64_t (**)(void *))(**((void **)a1 + 9) + 688))(*((void **)a1 + 9));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)((char *)v2 + *(void *)(*v2 - 808)) + 520);

  return v3();
}

BOOL AdobeXMPCore_Int::NodeImpl::IsArrayItem(AdobeXMPCore_Int::NodeImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  BOOL v2 = *((void *)this + 5) != 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

BOOL virtual thunk to'AdobeXMPCore_Int::NodeImpl::IsArrayItem(AdobeXMPCore_Int::NodeImpl *this)
{
  return AdobeXMPCore_Int::NodeImpl::IsArrayItem((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                              + *(void *)(*(void *)this - 200)));
}

BOOL AdobeXMPCore_Int::NodeImpl::HasQualifiers(AdobeXMPCore_Int::NodeImpl *this)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  uint64_t v2 = *((void *)this + 9);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 9) + *(void *)(**((void **)this + 9) - 688);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 560))(v3) != 0;
}

BOOL virtual thunk to'AdobeXMPCore_Int::NodeImpl::HasQualifiers(AdobeXMPCore_Int::NodeImpl *this)
{
  return AdobeXMPCore_Int::NodeImpl::HasQualifiers((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                                + *(void *)(*(void *)this - 224)));
}

uint64_t AdobeXMPCore_Int::NodeImpl::IsEmpty(AdobeXMPCore_Int::NodeImpl *this)
{
  if ((*(uint64_t (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 544)) + 192))((char *)this + *(void *)(*(void *)this - 544))) {
    return 0;
  }
  else {
    return (*(unsigned int (**)(AdobeXMPCore_Int::NodeImpl *))(*(void *)this + 184))(this) ^ 1;
  }
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::IsEmpty(AdobeXMPCore_Int::NodeImpl *this)
{
  return AdobeXMPCore_Int::NodeImpl::IsEmpty((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                          + *(void *)(*(void *)this - 240)));
}

BOOL AdobeXMPCore_Int::NodeImpl::HasChanged(AdobeXMPCore_Int::NodeImpl *this)
{
  unint64_t v1 = atomic_load((unint64_t *)this + 11);
  return v1 != 0;
}

BOOL virtual thunk to'AdobeXMPCore_Int::NodeImpl::HasChanged(AdobeXMPCore_Int::NodeImpl *this)
{
  unint64_t v1 = atomic_load((unint64_t *)((char *)this + *(void *)(*(void *)this - 248) + 88));
  return v1 != 0;
}

void AdobeXMPCore_Int::NodeImpl::AcknowledgeChanges(AdobeXMPCore_Int::NodeImpl *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v6, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  unint64_t v2 = atomic_load((unint64_t *)this + 11);
  if (v2 >= 2)
  {
    uint64_t v3 = *((void *)this + 6);
    if (v3)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 280))(v3);
      (*(void (**)(uint64_t))(*(void *)v4 + 576))(v4);
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v6);
  (*(void (**)(AdobeXMPCore_Int::NodeImpl *))(*(void *)this + 624))(this);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v6, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  uint64_t v5 = (char *)*((void *)this + 9);
  if (v5) {
    (*(void (**)(char *))(*(void *)&v5[*(void *)(*(void *)v5 - 544)] + 216))(&v5[*(void *)(*(void *)v5 - 544)]);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v6);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v6, (char *)this + *(void *)(*(void *)this - 688) + 8, 1);
  atomic_store(0, (unint64_t *)this + 11);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v6);
}

void sub_18884D0EC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::AcknowledgeChanges(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::AcknowledgeChanges((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                              + *(void *)(*(void *)this - 256)));
}

uint64_t AdobeXMPCore_Int::NodeImpl::Clear(uint64_t this, int a2, int a3)
{
  uint64_t v4 = this;
  if (a3)
  {
    uint64_t v5 = *(char **)(this + 72);
    if (v5) {
      this = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v5[*(void *)(*(void *)v5 - 544)]
    }
                                                                 + 224))(&v5[*(void *)(*(void *)v5 - 544)], 1, 1);
  }
  if (a2)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 608))(v4);
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 560);
    return v6(v4);
  }
  return this;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::Clear(AdobeXMPCore_Int::NodeImpl *this, int a2, int a3)
{
  return AdobeXMPCore_Int::NodeImpl::Clear((uint64_t)this + *(void *)(*(void *)this - 264), a2, a3);
}

void AdobeXMPCore_Int::NodeImpl::Clone(AdobeXMPCore_Int::NodeImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  memset(v18, 0, sizeof(v18));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v18, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  uint64_t v8 = (char *)*((void *)this + 9);
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 688)] + 560))(&v8[*(void *)(*(void *)v8 - 688)]);
    long long v17 = 0uLL;
    if (v9)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)(*((void *)this + 9)
                                                                + *(void *)(**((void **)this + 9) - 544))
                                                    + 264))(&v15);
      if (v15
        && ((*(void (**)(long long *__return_ptr))(*(void *)v15 + 240))(&v14), long long v17 = v14, (void)v14))
      {
        uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(v14 + *(void *)(*(void *)v14 - 688)) + 560))(v14 + *(void *)(*(void *)v14 - 688));
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    long long v17 = 0uLL;
  }
  *a4 = 0;
  a4[1] = 0;
  (*(void (**)(AdobeXMPCore_Int::NodeImpl *, uint64_t, uint64_t, uint64_t))(*(void *)this + 616))(this, a2, a3, v10);
  if (*a4)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*a4 + 280))(*a4);
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a4 + 168))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 552))(v11, v12);
    if (*a4)
    {
      if ((void)v17 && v10)
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a4 + 280))(*a4);
        (*(void (**)(uint64_t, long long *))(*(void *)v13 + 584))(v13, &v17);
      }
    }
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v18);
}

void sub_18884D58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::Clone(AdobeXMPCore_Int::NodeImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void AdobeXMPCore_Int::NodeImpl::SetQualifiers(void *a1, uint64_t *a2)
{
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)a1 + *(void *)(*a1 - 688) + 8, 1);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[10];
  a1[9] = v5;
  a1[10] = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

uint64_t AdobeXMPCore_Int::NodeImpl::QualifiersCount(AdobeXMPCore_Int::NodeImpl *this)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  uint64_t v2 = *((void *)this + 9);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 9) + *(void *)(**((void **)this + 9) - 688);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 560))(v3);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::QualifiersCount(AdobeXMPCore_Int::NodeImpl *this)
{
  return AdobeXMPCore_Int::NodeImpl::QualifiersCount((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                                  + *(void *)(*(void *)this - 144)));
}

void AdobeXMPCore_Int::NodeImpl::QualifiersIterator(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  if (*((void *)this + 9))
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
    (*(void (**)(void))(*(void *)(*((void *)this + 9) + *(void *)(**((void **)this + 9) - 688)) + 552))();
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  }
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::QualifiersIterator(AdobeXMPCore_Int::NodeImpl *this@<X0>, void *a2@<X8>)
{
}

uint64_t AdobeXMPCore_Int::NodeImpl::ValidateNameOrNameSpaceChangeForAChild()
{
  return 1;
}

uint64_t AdobeXMPCore_Int::NodeImpl::GetParentNodeType(AdobeXMPCore_Int::NodeImpl *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetParentNodeType(AdobeXMPCore_Int::NodeImpl *this)
{
  uint64_t result = *(void *)((char *)this + *(void *)(*(void *)this - 88) + 48);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t AdobeXMPCore_Int::NodeImpl::GetQualifierNodeType(AdobeXMPCore_Int::NodeImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  memset(v12, 0, sizeof(v12));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v12, (char *)this + *(void *)(*(void *)this - 688) + 8, 0);
  uint64_t v10 = *((void *)this + 9);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v12);
  if (v10) {
    return (*(uint64_t (**)(void, const char *, uint64_t, const char *, uint64_t))(**((void **)this + 9)
  }
                                                                                           + 640))(*((void *)this + 9), a2, a3, a4, a5);
  else {
    return 0;
  }
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetQualifierNodeType(AdobeXMPCore_Int::NodeImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  return AdobeXMPCore_Int::NodeImpl::GetQualifierNodeType((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(void *)(*(void *)this - 160)), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::NodeImpl::ConvertToSimpleNode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::ConvertToSimpleNode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AdobeXMPCore_Int::NodeImpl::ConvertToStructureNode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::ConvertToStructureNode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AdobeXMPCore_Int::NodeImpl::ConvertToArrayNode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::ConvertToArrayNode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AdobeXMPCore_Int::NodeImpl::ConvertToMetadata(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::ConvertToMetadata(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

atomic_ullong *AdobeXMPCore_Int::NodeImpl::UnRegisterChange(atomic_ullong *this)
{
  unint64_t v1 = this + 11;
  if (atomic_load((unint64_t *)this + 11)) {
    atomic_fetch_add(v1, 0xFFFFFFFFFFFFFFFFLL);
  }
  if (!atomic_load((unint64_t *)v1))
  {
    this = (atomic_ullong *)this[6];
    if (this)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(atomic_ullong *))(*this + 280))(this) + 576);
      return (atomic_ullong *)v4();
    }
  }
  return this;
}

void AdobeXMPCore_Int::NodeImpl::Acquire(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::Acquire((uint64_t)this + *(void *)(*(void *)this - 672));
  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(void *)(*(void *)this - 688) + 8, 1);
  AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(this, 0);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void sub_18884DB34(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::Acquire(AdobeXMPCore_Int::NodeImpl *this)
{
}

void AdobeXMPCore_Int::NodeImpl::Release(AdobeXMPCore_Int::NodeImpl *this)
{
  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(void *)(*(void *)this - 688) + 8, 1);
  AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(this, 1);
  AdobeXMPCore_Int::SharedObjectImpl::Release((unint64_t *)((char *)this + *(void *)(*(void *)this - 672)));
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void sub_18884DBFC(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::Release(AdobeXMPCore_Int::NodeImpl *this)
{
}

void AdobeXMPCore_Int::NodeImpl::AcquireInternal(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::AcquireInternal((uint64_t)this + *(void *)(*(void *)this - 672));
  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(void *)(*(void *)this - 688) + 8, 1);
  AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(this, 0);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void sub_18884DCC4(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

void virtual thunk to'AdobeXMPCore_Int::NodeImpl::AcquireInternal(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::AcquireInternal((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                           + *(void *)(*(void *)this - 64)));
}

atomic_ullong *AdobeXMPCore_Int::NodeImpl::RegisterChange(atomic_ullong *this)
{
  atomic_fetch_add(this + 11, 1uLL);
  unint64_t v1 = atomic_load((unint64_t *)this + 11);
  if (v1 == 1)
  {
    this = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *))(*this + 528))(this);
    if (this)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(atomic_ullong *))(*this + 280))(this) + 560);
      return (atomic_ullong *)v2();
    }
  }
  return this;
}

uint64_t AdobeXMPCore_Int::NodeImpl::SetIndex(uint64_t this, uint64_t a2)
{
  *(void *)(this + 40) = a2;
  return this;
}

uint64_t AdobeXMPCore_Int::NodeImpl::SetIsQualifierNode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 96) = a2;
  return this;
}

uint64_t AdobeXMPCore_Int::NodeImpl::IsQualifierNode(AdobeXMPCore_Int::NodeImpl *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::IsQualifierNode(AdobeXMPCore_Int::NodeImpl *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 208) + 96);
}

uint64_t AdobeXMPCore_Int::NodeImpl::GetIndex(AdobeXMPCore_Int::NodeImpl *this)
{
  return *((void *)this + 5);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetIndex(AdobeXMPCore_Int::NodeImpl *this)
{
  return *(void *)((char *)this + *(void *)(*(void *)this - 216) + 40);
}

void *AdobeXMPCore::INode_v1::MakeShared@<X0>(void *this@<X0>, AdobeXMPCore::INode_v1 *a2@<X1>, void *a3@<X8>)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    (**(void (***)(uint64_t, AdobeXMPCore::INode_v1 *))((char *)this + *(void *)(*this - 56)))((uint64_t)this + *(void *)(*this - 56), a2);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, v4);
  }
  *a3 = 0;
  a3[1] = 0;
  return this;
}

void std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18884DF44(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 56) + (v2 >> 1));
  if (v2) {
    unint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_18884DFA8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore::INode_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INode_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::INode_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INode_v1>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore::IMetadata_v1 *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::INode_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INode_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::vector<AdobeXMPCore::INode_v1 const*,AdobeXMPCore_Int::TAllocator<AdobeXMPCore::INode_v1 const*>>::__destroy_vector::operator()[abi:ne180100](AdobeXMPCore_Int::IMemoryAllocator_I *result)
{
  uint64_t v1 = **(void **)result;
  if (v1)
  {
    *(void *)(*(void *)result + 8) = v1;
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(result) + 8);
    return (AdobeXMPCore_Int::IMemoryAllocator_I *)v2();
  }
  return result;
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::__split_buffer<AdobeXMPCore::INode_v1 const*,AdobeXMPCore_Int::TAllocator<AdobeXMPCore::INode_v1 const*> &>::~__split_buffer(AdobeXMPCore_Int::IMemoryAllocator_I *a1)
{
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 2);
  if (v2 != v3) {
    *((void *)a1 + 2) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v4);
  }
  return a1;
}

uint64_t **Common::HandlerRegistry::removeHandler(uint64_t ***this, unsigned int a2)
{
  uint64_t v4 = *this;
  uint64_t v5 = v4[1];
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v4 + 1;
  do
  {
    unsigned int v7 = *((_DWORD *)v5 + 8);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t **)v5;
    }
    else {
      uint64_t v9 = (uint64_t **)(v5 + 1);
    }
    if (v8) {
      uint64_t v6 = (uint64_t **)v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != v4 + 1 && *((_DWORD *)v6 + 8) <= a2)
  {
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(v4, (uint64_t *)v6);
    operator delete(v6);
    uint64_t result = (uint64_t **)Common::HandlerRegistry::getHandlerInfo((Common::HandlerRegistry *)this, a2);
    if (result) {
      Common::HandlerRegistry::removeHandler();
    }
  }
  else
  {
LABEL_12:
    uint64_t v10 = this[1];
    uint64_t v13 = v10[1];
    uint64_t v11 = v10 + 1;
    uint64_t v12 = v13;
    if (!v13) {
      goto LABEL_23;
    }
    long long v14 = v11;
    do
    {
      unsigned int v15 = *((_DWORD *)v12 + 8);
      BOOL v16 = v15 >= a2;
      if (v15 >= a2) {
        long long v17 = v12;
      }
      else {
        long long v17 = v12 + 1;
      }
      if (v16) {
        long long v14 = (uint64_t **)v12;
      }
      uint64_t v12 = (uint64_t *)*v17;
    }
    while (*v17);
    if (v14 != v11 && *((_DWORD *)v14 + 8) <= a2)
    {
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(this[1], (uint64_t *)v14);
      operator delete(v14);
      uint64_t result = (uint64_t **)Common::HandlerRegistry::getHandlerInfo((Common::HandlerRegistry *)this, a2);
      if (result) {
        Common::HandlerRegistry::removeHandler();
      }
    }
    else
    {
LABEL_23:
      uint64_t result = this[2];
      uint64_t v19 = result[1];
      if (v19)
      {
        uint64_t v20 = result + 1;
        do
        {
          unsigned int v21 = *((_DWORD *)v19 + 8);
          BOOL v22 = v21 >= a2;
          if (v21 >= a2) {
            uint64_t v23 = (uint64_t **)v19;
          }
          else {
            uint64_t v23 = (uint64_t **)(v19 + 1);
          }
          if (v22) {
            uint64_t v20 = (uint64_t **)v19;
          }
          uint64_t v19 = *v23;
        }
        while (*v23);
        if (v20 != result + 1 && *((_DWORD *)v20 + 8) <= a2)
        {
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(result, (uint64_t *)v20);
          operator delete(v20);
          uint64_t result = (uint64_t **)Common::HandlerRegistry::getHandlerInfo((Common::HandlerRegistry *)this, a2);
          if (result) {
            Common::HandlerRegistry::removeHandler();
          }
        }
      }
    }
  }
  return result;
}

uint64_t Common::HandlerRegistry::getFileFormat(uint64_t a1, const void **a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  uint64_t v3 = a2[1];
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v4 = a2[1];
  }
  if (v4)
  {
    uint64_t v5 = 1346651680;
    unsigned int v7 = (const void **)*a2;
    BOOL v8 = &kFileExtMap;
    do
    {
      size_t v9 = strlen(*v8);
      size_t v10 = v9;
      if ((v2 & 0x80) != 0)
      {
        if ((const void *)v9 == v3)
        {
          uint64_t v11 = v7;
          if (v3 == (const void *)-1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
LABEL_11:
          if (!memcmp(v11, *v8, v10)) {
            return v5;
          }
        }
      }
      else
      {
        uint64_t v11 = a2;
        if (v10 == v2) {
          goto LABEL_11;
        }
      }
      uint64_t v5 = *((unsigned int *)v8 + 6);
      v8 += 2;
    }
    while (v5);
  }
  return 538976288;
}

uint64_t Common::HandlerRegistry::pickDefaultHandler(void *a1, unsigned int FileFormat, const void **a3)
{
  if (FileFormat == 538976288)
  {
    FileFormat = Common::HandlerRegistry::getFileFormat((uint64_t)a1, a3);
    if (FileFormat == 538976288) {
      return 0;
    }
  }
  uint64_t v4 = a1[1];
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v5 = v4 + 8;
  uint64_t v6 = v7;
  if (v7)
  {
    uint64_t v8 = v5;
    do
    {
      unsigned int v9 = *(_DWORD *)(v6 + 32);
      BOOL v10 = v9 >= FileFormat;
      if (v9 >= FileFormat) {
        uint64_t v11 = (uint64_t *)v6;
      }
      else {
        uint64_t v11 = (uint64_t *)(v6 + 8);
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && FileFormat >= *(_DWORD *)(v8 + 32)) {
      return v8 + 40;
    }
  }
  uint64_t v12 = a1[2];
  uint64_t v15 = *(void *)(v12 + 8);
  uint64_t v13 = v12 + 8;
  uint64_t v14 = v15;
  if (v15)
  {
    uint64_t v8 = v13;
    do
    {
      unsigned int v16 = *(_DWORD *)(v14 + 32);
      BOOL v17 = v16 >= FileFormat;
      if (v16 >= FileFormat) {
        int64x2_t v18 = (uint64_t *)v14;
      }
      else {
        int64x2_t v18 = (uint64_t *)(v14 + 8);
      }
      if (v17) {
        uint64_t v8 = v14;
      }
      uint64_t v14 = *v18;
    }
    while (*v18);
    if (v8 != v13 && FileFormat >= *(_DWORD *)(v8 + 32)) {
      return v8 + 40;
    }
  }
  uint64_t v19 = *(void *)(*a1 + 8);
  if (!v19) {
    return 0;
  }
  uint64_t v20 = *a1 + 8;
  do
  {
    unsigned int v21 = *(_DWORD *)(v19 + 32);
    BOOL v22 = v21 >= FileFormat;
    if (v21 >= FileFormat) {
      uint64_t v23 = (uint64_t *)v19;
    }
    else {
      uint64_t v23 = (uint64_t *)(v19 + 8);
    }
    if (v22) {
      uint64_t v20 = v19;
    }
    uint64_t v19 = *v23;
  }
  while (*v23);
  if (v20 == *a1 + 8) {
    return 0;
  }
  unsigned int v24 = *(_DWORD *)(v20 + 32);
  uint64_t v25 = v20 + 40;
  if (FileFormat >= v24) {
    return v25;
  }
  else {
    return 0;
  }
}

uint64_t (**Common::HandlerRegistry::selectSmartHandler(Common::HandlerRegistry *this, XMPFiles *a2, Host_IO *a3, uint64_t a4, int a5))(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t)
{
  memset(&v43, 0, sizeof(v43));
  memset(&v42, 0, sizeof(v42));
  memset(&v41, 0, sizeof(v41));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v40 = 0;
  if ((a5 & 8) != 0)
  {
    uint64_t v12 = (uint64_t (**)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t))Common::HandlerRegistry::pickDefaultHandler(this, a4, (const void **)__p);
    goto LABEL_72;
  }
  if (*((char *)a2 + 391) < 0)
  {
    if (*((void *)a2 + 47))
    {
LABEL_4:
      int FileMode = Host_IO::GetFileMode(a3, (const char *)a2);
      if ((FileMode & 0xFE) == 2) {
        goto LABEL_71;
      }
      MEMORY[0x18C11BE10](&v43, a3);
      XIO::SplitLeafName(&v43, &v42);
      std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v42.__r_.__value_.__l.__size_;
      }
      if (!size) {
        goto LABEL_71;
      }
      if (FileMode == 1) {
        XIO::SplitFileExtension(&v42, &v41, 1);
      }
      goto LABEL_13;
    }
  }
  else if (*((unsigned char *)a2 + 391))
  {
    goto LABEL_4;
  }
  if (!*((void *)a2 + 29))
  {
    int8x16_t v37 = "session->ioRef != 0";
    int v38 = 591;
    goto LABEL_86;
  }
LABEL_13:
  *((_DWORD *)a2 + 56) = 538976288;
  *((_DWORD *)a2 + 60) = a5;
  if (a4 == 538976288) {
    goto LABEL_30;
  }
  uint64_t v13 = Common::HandlerRegistry::pickDefaultHandler(this, a4, (const void **)__p);
  char v14 = a5;
  if (!v13)
  {
LABEL_29:
    if ((v14 & 0x10) != 0) {
      goto LABEL_71;
    }
LABEL_30:
    if (*((char *)a2 + 391) < 0)
    {
      if (!*((void *)a2 + 47)) {
        goto LABEL_44;
      }
    }
    else if (!*((unsigned char *)a2 + 391))
    {
LABEL_44:
      if (!*((void *)a2 + 29))
      {
        uint64_t v26 = XMPFiles_IO::New_XMPFiles_IO(a3, (const char *)((a5 & 2) == 0), (uint64_t)a2 + 296);
        *((void *)a2 + 29) = v26;
        if (!v26) {
          goto LABEL_71;
        }
      }
      uint16x8_t v27 = (void *)*((void *)this + 1);
      uint64_t v28 = (void *)*v27;
      if ((void *)*v27 != v27 + 1)
      {
        while (1)
        {
          *((_DWORD *)a2 + 56) = 538976288;
          if (((uint64_t (*)(void, Host_IO *, void, XMPFiles *))v28[6])(*((unsigned int *)v28 + 10), a3, *((void *)a2 + 29), a2))break; {
          if (*((void *)a2 + 32))
          }
            __assert_rtn("selectSmartHandler", "HandlerRegistry.cpp", 793, "foundHandler || (session->tempPtr == 0)");
          unint64_t v29 = (void *)v28[1];
          if (v29)
          {
            do
            {
              int v30 = v29;
              unint64_t v29 = (void *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              int v30 = (void *)v28[2];
              BOOL v31 = *v30 == (void)v28;
              uint64_t v28 = v30;
            }
            while (!v31);
          }
          uint64_t v28 = v30;
          if (v30 == (void *)(*((void *)this + 1) + 8)) {
            goto LABEL_55;
          }
        }
LABEL_81:
        uint64_t v12 = (uint64_t (**)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t))(v28 + 5);
        goto LABEL_72;
      }
LABEL_55:
      if ((*((char *)a2 + 391) & 0x80000000) == 0)
      {
        if (!*((unsigned char *)a2 + 391)) {
          goto LABEL_71;
        }
        goto LABEL_59;
      }
      if (*((void *)a2 + 47))
      {
LABEL_59:
        uint64_t v32 = *((void *)a2 + 29);
        if (v32) {
          (*(void (**)(uint64_t))(*(void *)v32 + 72))(v32);
        }
        *((void *)a2 + 29) = 0;
        int v33 = (void *)*((void *)this + 2);
        uint64_t v28 = (void *)*v33;
        if ((void *)*v33 == v33 + 1) {
          goto LABEL_71;
        }
        while (1)
        {
          *((_DWORD *)a2 + 56) = 538976288;
          if (((uint64_t (*)(void, Host_IO *, void, XMPFiles *))v28[6])(*((unsigned int *)v28 + 10), a3, *((void *)a2 + 29), a2))goto LABEL_81; {
          if (*((void *)a2 + 32))
          }
            __assert_rtn("selectSmartHandler", "HandlerRegistry.cpp", 811, "foundHandler || (session->tempPtr == 0)");
          int v34 = (void *)v28[1];
          if (v34)
          {
            do
            {
              int v35 = v34;
              int v34 = (void *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              int v35 = (void *)v28[2];
              BOOL v31 = *v35 == (void)v28;
              uint64_t v28 = v35;
            }
            while (!v31);
          }
          uint64_t v12 = 0;
          uint64_t v28 = v35;
          if (v35 == (void *)(*((void *)this + 2) + 8)) {
            goto LABEL_72;
          }
        }
      }
LABEL_71:
      uint64_t v12 = 0;
      goto LABEL_72;
    }
    uint64_t v19 = Common::HandlerRegistry::pickDefaultHandler(this, 0x20202020u, (const void **)&v41.__r_.__value_.__l.__data_);
    if (v19)
    {
      uint64_t v12 = (uint64_t (**)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t))v19;
      uint64_t v23 = *((void *)a2 + 29);
      int v24 = *(_DWORD *)(v19 + 4);
      if (v23)
      {
        if ((v24 & 0x100) != 0)
        {
          (*(void (**)(void))(*(void *)v23 + 72))(*((void *)a2 + 29));
          uint64_t v23 = 0;
          *((void *)a2 + 29) = 0;
        }
      }
      else if ((v24 & 0x100) != 0)
      {
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = XMPFiles_IO::New_XMPFiles_IO(a3, (const char *)((a5 & 2) == 0), (uint64_t)a2 + 296);
        *((void *)a2 + 29) = v23;
        if (!v23) {
          goto LABEL_71;
        }
      }
      uint64_t v25 = *(unsigned int *)v12;
      *((_DWORD *)a2 + 56) = v25;
      if (v12[1](v25, a3, v23, a2, v20, v21, v22)) {
        goto LABEL_72;
      }
      if (*((void *)a2 + 32)) {
        __assert_rtn("selectSmartHandler", "HandlerRegistry.cpp", 771, "foundHandler || (session->tempPtr == 0)");
      }
    }
    goto LABEL_44;
  }
  uint64_t v12 = (uint64_t (**)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t))v13;
  uint64_t v15 = *((void *)a2 + 29);
  if (!v15)
  {
    if (*(unsigned char *)(v13 + 5))
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = XMPFiles_IO::New_XMPFiles_IO(a3, (const char *)((a5 & 2) == 0), (uint64_t)a2 + 296);
      *((void *)a2 + 29) = v15;
      if (!v15) {
        goto LABEL_71;
      }
    }
  }
  *((_DWORD *)a2 + 56) = a4;
  unsigned int v16 = *((_DWORD *)v12 + 1);
  if ((v16 & 0x1000) != 0)
  {
    char v14 = 0;
LABEL_28:
    if (!*((void *)a2 + 32)) {
      goto LABEL_29;
    }
    int8x16_t v37 = "foundHandler || (session->tempPtr == 0)";
    int v38 = 668;
LABEL_86:
    __assert_rtn("selectSmartHandler", "HandlerRegistry.cpp", v38, v37);
  }
  if (*((char *)a2 + 391) < 0) {
    uint64_t v17 = *((void *)a2 + 47);
  }
  else {
    uint64_t v17 = *((unsigned __int8 *)a2 + 391);
  }
  if ((v16 & 0x900) != 0)
  {
    char v14 = a5;
    if (!v17) {
      goto LABEL_28;
    }
  }
  char v18 = ((uint64_t (*)(uint64_t, Host_IO *, uint64_t, XMPFiles *))v12[1])(a4, a3, v15, a2);
  char v14 = a5;
  if ((v18 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_72:
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_18884E9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void Common::HandlerRegistry::registerNormalHandler()
{
  __assert_rtn("registerNormalHandler", "HandlerRegistry.cpp", 245, "format != kXMP_UnknownFile");
}

{
  __assert_rtn("registerNormalHandler", "HandlerRegistry.cpp", 249, "(flags & kXMPFiles_CanInjectXMP) ? (flags & kXMPFiles_CanExpand) : 1");
}

{
  __assert_rtn("registerNormalHandler", "HandlerRegistry.cpp", 248, "! (flags & kXMPFiles_FolderBasedFormat)");
}

{
  __assert_rtn("registerNormalHandler", "HandlerRegistry.cpp", 247, "! (flags & kXMPFiles_HandlerOwnsFile)");
}

void Common::HandlerRegistry::removeHandler()
{
}

{
  __assert_rtn("removeHandler", "HandlerRegistry.cpp", 369, "! this->getFormatInfo(format)");
}

{
  __assert_rtn("removeHandler", "HandlerRegistry.cpp", 362, "! this->getFormatInfo(format)");
}

unint64_t PNG_Support::OpenPNG(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, 8, 0);
  if (v7 != 8) {
    return 0;
  }
  uint64_t v6 = 0;
  int v5 = 0;
  while (PNG_Support::ReadChunk(a1, a2, &v6, &v5, &v7))
    ;
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
}

BOOL PNG_Support::ReadChunk(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a5;
  v22[0] = 0;
  int v11 = (**(uint64_t (***)(uint64_t, void *, uint64_t, void))a1)(a1, v22, 8, 0);
  if (v11 == 8)
  {
    uint64_t v12 = *a5;
    unsigned int v13 = HIDWORD(v22[0]);
    uint64_t v14 = bswap32(v22[0]);
    *a4 = v14;
    *a3 = bswap32(v13);
    uint64_t v15 = v12 + v14 + 12;
    *a5 = v15;
    if (v15 > (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 213;
      exception[1] = "Invalid PNG chunk length";
      *((unsigned char *)exception + 16) = 0;
    }
    v18[1] = v10;
    uint64_t v19 = 0;
    uint64_t v21 = 0;
    v18[0] = &unk_1ED4E61D0;
    LODWORD(v19) = *a4;
    uint64_t v20 = *a3;
    if (v20 == 1767135348) {
      PNG_Support::CheckiTXtChunkHeader(a1, a2, (uint64_t)v18);
    }
    std::vector<PNG_Support::ChunkData>::push_back[abi:ne180100]((char **)(a2 + 64), (uint64_t)v18);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, *a5, 0);
  }
  return v11 == 8;
}

void sub_18884EDC4()
{
}

void sub_18884EDE4(_Unwind_Exception *a1)
{
}

void sub_18884EDF0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18884EDF8);
  }
  __clang_call_terminate(a1);
}

__n128 PNG_Support::CheckiTXtChunkHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a3 + 16) >= 0x17u)
  {
    uint64_t v6 = a3 + 8;
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, *(void *)(a3 + 8) + 8, 0);
    uint64_t v10 = 0;
    v11[0] = 0;
    *(void *)((char *)v11 + 6) = 0;
    if ((**(unsigned int (***)(uint64_t, uint64_t *, uint64_t, void))a1)(a1, &v10, 22, 0) == 22
      && v10 == 0x2E6D6F633A4C4D58
      && v11[0] == 0x6D782E65626F6461
      && *(void *)((char *)v11 + 6) == 7368056)
    {
      *(void *)(a2 + 8) = *(void *)(a3 + 8) + 30;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16) - 22;
      __n128 result = *(__n128 *)v6;
      *(_OWORD *)(a2 + 41) = *(_OWORD *)(v6 + 9);
      *(__n128 *)(a2 + 32) = result;
      *(unsigned char *)(a3 + 32) = 1;
    }
  }
  return result;
}

void sub_18884EF68(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18884EF00);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<PNG_Support::ChunkData>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v27 = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOThumbnailInfo>>(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[40 * v10];
    *(void *)uint64_t v15 = &unk_1ED4E61D0;
    long long v16 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v15 + 17) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(v15 + 8) = v16;
    uint64_t v17 = *a1;
    unint64_t v18 = (unint64_t)a1[1];
    if ((char *)v18 == *a1)
    {
      int64x2_t v22 = vdupq_n_s64(v18);
      uint64_t v20 = &v14[40 * v10];
    }
    else
    {
      uint64_t v19 = (uint64_t)&v14[40 * v10 - 40];
      uint64_t v20 = &v14[40 * v10];
      do
      {
        *((void *)v20 - 5) = &unk_1ED4E61D0;
        v20 -= 40;
        long long v21 = *(_OWORD *)(v18 - 32);
        *(_OWORD *)(v20 + 17) = *(_OWORD *)(v18 - 23);
        *(_OWORD *)(v20 + 8) = v21;
        v19 -= 40;
        v18 -= 40;
      }
      while ((char *)v18 != v17);
      int64x2_t v22 = *(int64x2_t *)a1;
    }
    unsigned int v9 = v15 + 40;
    *a1 = v20;
    a1[1] = v15 + 40;
    int64x2_t v25 = v22;
    uint64_t v23 = a1[2];
    a1[2] = &v14[40 * v13];
    uint64_t v26 = v23;
    uint64_t v24 = v22.i64[0];
    uint64_t result = std::__split_buffer<PNG_Support::ChunkData>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    *(void *)unint64_t v7 = &unk_1ED4E61D0;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v7 + 17) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(v7 + 8) = v8;
    unsigned int v9 = (char *)(v7 + 40);
  }
  a1[1] = v9;
  return result;
}

BOOL PNG_Support::FindAndReadXMPChunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  if (v4 >= 16)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, 8, 0) != -1) {
      operator new[]();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 213;
    exception[1] = "seek failed";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  return v5 != 0;
}

void sub_18884F3D0(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v2) {
      MEMORY[0x18C11C0C0](v2, 0x1000C8077774924);
    }
    __cxa_rethrow();
  }
  if (v2) {
    MEMORY[0x18C11C0C0](v2, 0x1000C8077774924);
  }
  __cxa_rethrow();
}

void sub_18884F444(_Unwind_Exception *a1)
{
}

uint64_t PNG_Support::ExtractXMPPacket(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2 < 0x17) {
    return 0;
  }
  memset(&__str, 0, sizeof(__str));
  if (a2 <= a4)
  {
    MEMORY[0x18C11BE20](&__str, a3, a2);
  }
  else
  {
    if (a2 + a5 + 8 + 4 > (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 213;
      exception[1] = "Invalid PNG chunk length";
      *((unsigned char *)exception + 16) = 0;
    }
    MEMORY[0x18C11BE20](&__str, a3, a4);
    *a7 = a5 + 30;
    memset(&__p, 0, sizeof(__p));
    std::string::reserve(&__p, a2 - a4);
    std::string::assign(&__p, a2 - a4, 32);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, a5 + 8 + a4, 0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    (**(void (***)(uint64_t, std::string *, void, uint64_t))a1)(a1, p_p, a2 - a4, 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v16 = &__p;
    }
    else {
      long long v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&__str, (const std::string::value_type *)v16, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 7368056;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)"XML:com.adobe.xmp";
  HIWORD(__p.__r_.__value_.__r.__words[2]) = 5632;
  char v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (__str.__r_.__value_.__l.__size_ >= 0x16) {
      size_t v19 = 22;
    }
    else {
      size_t v19 = __str.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (HIBYTE(__str.__r_.__value_.__r.__words[2]) >= 0x16u) {
      size_t v19 = 22;
    }
    else {
      size_t v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    p_str = &__str;
  }
  int v21 = memcmp(p_str, &__p, v19);
  BOOL v22 = v19 > 0x15 && v21 == 0;
  uint64_t v7 = v22;
  if (v22)
  {
    if (*(char *)(a6 + 23) < 0)
    {
      **(unsigned char **)a6 = 0;
      *(void *)(a6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a6 = 0;
      *(unsigned char *)(a6 + 23) = 0;
    }
    std::string::basic_string(&__p, &__str, 0x16uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v27);
    if (*(char *)(a6 + 23) < 0) {
      operator delete(*(void **)a6);
    }
    *(std::string *)a6 = __p;
    char v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v18 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_18884F728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PNG_Support::WriteXMPChunk()
{
}

void sub_18884F8CC(void *a1)
{
}

unint64_t PNG_Support::CalculateCRC(PNG_Support *this, unsigned __int8 *a2)
{
  if ((CRC::crc_table_computed & 1) == 0)
  {
    for (unint64_t i = 0; i != 256; ++i)
    {
      int v3 = 8;
      unint64_t v4 = i;
      do
      {
        if (v4) {
          unint64_t v4 = (v4 >> 1) ^ 0xEDB88320;
        }
        else {
          v4 >>= 1;
        }
        --v3;
      }
      while (v3);
      CRC::crc_table[i] = v4;
    }
    CRC::crc_table_computed = 1;
  }
  if ((int)a2 < 1) {
    return 0;
  }
  uint64_t v5 = a2;
  unint64_t v6 = 0xFFFFFFFFLL;
  do
  {
    char v7 = *(unsigned char *)this;
    this = (PNG_Support *)((char *)this + 1);
    unint64_t v6 = CRC::crc_table[(v7 ^ v6)] ^ (v6 >> 8);
    --v5;
  }
  while (v5);
  return v6 ^ 0xFFFFFFFF;
}

uint64_t PNG_Support::CopyChunk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

void sub_18884F9EC(void *a1)
{
}

void PNG_Support::UpdateChunkCRC()
{
}

void sub_18884FB64(void *a1)
{
}

BOOL PNG_Support::CheckIHDRChunkHeader(PNG_Support *this, PNG_Support::ChunkData *a2)
{
  return *((void *)this + 3) == 1229472850;
}

uint64_t PNG_Support::WriteBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a4)
    {
      (*(void (**)(uint64_t, void, void))(*(void *)a1 + 16))(a1, *a2, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 8))(a1, a4, a3);
      return 1;
    }
  }
  return result;
}

void sub_18884FC34(void *a1)
{
}

uint64_t std::__split_buffer<PNG_Support::ChunkData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *AdobeXMPCore_Int::MemoryAllocatorWrapperImpl::reallocate(AdobeXMPCore_Int::MemoryAllocatorWrapperImpl *this, char *a2, uint64_t a3)
{
  size_t v4 = a3 + 8;
  uint64_t v5 = a2 - 8;
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, char *, size_t))(*(void *)v6 + 16))(v6, v5, v4);
  }
  else {
    uint64_t result = malloc_type_realloc(v5, v4, 0xEC80F2DBuLL);
  }
  if (result) {
    *result++ = *((void *)this + 1);
  }
  return result;
}

void AdobeXMPCore_Int::MemoryAllocatorWrapperImpl::~MemoryAllocatorWrapperImpl(AdobeXMPCore_Int::MemoryAllocatorWrapperImpl *this)
{
}

void *AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(void *this, const char *a2, unint64_t a3, const char *a4)
{
  uint64_t v4 = *(void *)a2;
  *this = *(void *)a2;
  *(void *)((char *)this + *(void *)(v4 - 864)) = *((void *)a2 + 1);
  *(void *)((char *)this + *(void *)(*this - 792)) = *((void *)a2 + 2);
  *(void *)((char *)this + *(void *)(*this - 688)) = *((void *)a2 + 3);
  *(void *)((char *)this + *(void *)(*this - 544)) = *((void *)a2 + 4);
  *(void *)((char *)this + *(void *)(*this - 56)) = *((void *)a2 + 5);
  *(void *)((char *)this + *(void *)(*this - 64)) = *((void *)a2 + 6);
  *(void *)((char *)this + *(void *)(*this - 72)) = *((void *)a2 + 7);
  *(void *)((char *)this + *(void *)(*this - 800)) = *((void *)a2 + 8);
  *(void *)((char *)this + *(void *)(*this - 808)) = *((void *)a2 + 9);
  *(void *)((char *)this + *(void *)(*this - 816)) = *((void *)a2 + 10);
  *(void *)((char *)this + *(void *)(*this - 824)) = *((void *)a2 + 11);
  *(void *)((char *)this + *(void *)(*this - 872)) = *((void *)a2 + 12);
  *(void *)((char *)this + *(void *)(*this - 880)) = *((void *)a2 + 13);
  *(void *)((char *)this + *(void *)(*this - 888)) = *((void *)a2 + 14);
  *(void *)((char *)this + *(void *)(*this - 904)) = *((void *)a2 + 15);
  this[3] = 0;
  this[2] = 0;
  this[1] = this + 2;
  return this;
}

void AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, const char *a4)
{
  *((void *)this + 22) = &unk_1ED4CD2C8;
  *(void *)this = &unk_1ED4CC440;
  *((void *)this + 4) = &unk_1ED4CC6E8;
  *(void *)((char *)this + unk_1ED4CC3F8) = &unk_1ED4CC748;
  *(void *)this = &unk_1ED4CCA90;
  *(void *)((char *)this + unk_1ED4CCA50) = &unk_1ED4CCD98;
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = &unk_1ED4CCDF8;
  *((void *)this + 19) = &unk_1ED4CE540;
  *((void *)this + 6) = &unk_1ED4D0CB8;
  *(void *)this = &unk_1ED4D1128;
  *((void *)this + 4) = &unk_1ED4D1348;
  *((void *)this + 22) = &unk_1ED4D1430;
  *(void *)((char *)this + unk_1ED4D0A90 + 48) = &unk_1ED4D13A8;
  *(void *)((char *)this + *(void *)(*((void *)this + 6) - 560) + 48) = &unk_1ED4D1430;
  *((void *)this + 5) = &unk_1ED4CEAB8;
  *(void *)this = &unk_1ED4CEFF0;
  *((void *)this + 4) = &unk_1ED4CF298;
  *((void *)this + 22) = &unk_1ED4CF868;
  *(void *)((char *)this + unk_1ED4CE800 + 40) = &unk_1ED4CF548;
  *(void *)((char *)this + *(void *)(*((void *)this + 5) - 704) + 40) = &unk_1ED4CF7E0;
  *(void *)((char *)this + *(void *)(*((void *)this + 5) - 712) + 40) = &unk_1ED4CF868;
  *(void *)this = &unk_1ED4CD658;
  *(void *)((char *)this + unk_1ED4CD620) = &unk_1ED4CD658;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = &unk_1ED4CD980;
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = &unk_1ED4CE4B8;
  *(void *)((char *)this + *(void *)(*(void *)this - 800)) = &unk_1ED4CDC78;
  *(void *)((char *)this + *(void *)(*(void *)this - 808)) = &unk_1ED4CE198;
  *(void *)((char *)this + *(void *)(*(void *)this - 816)) = &unk_1ED4CE430;
  *(void *)((char *)this + *(void *)(*(void *)this - 824)) = &unk_1ED4CE4B8;
  *((void *)this + 19) = &unk_1ED4CE610;
  *((void *)this + 20) = 0;
  *(void *)this = &unk_1ED4CE670;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = &unk_1ED4CE798;
  AdobeXMPCore_Int::NodeImpl::NodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + 48), (const char *)&off_1ED4DD960, a2, a3);
}

void sub_18885089C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl(v1, (uint64_t *)&off_1ED4DD9C8);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DD9B0);
  _Unwind_Resume(a1);
}

uint64_t *AdobeXMPCore_Int::CompositeNodeImpl::CompositeNodeImpl(uint64_t *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *this = *a2;
  *(uint64_t *)((char *)this + *(void *)(v2 - 736)) = a2[1];
  *(uint64_t *)((char *)this + *(void *)(*this - 688)) = a2[2];
  *(uint64_t *)((char *)this + *(void *)(*this - 544)) = a2[3];
  *(uint64_t *)((char *)this + *(void *)(*this - 56)) = a2[4];
  *(uint64_t *)((char *)this + *(void *)(*this - 64)) = a2[5];
  *(uint64_t *)((char *)this + *(void *)(*this - 72)) = a2[6];
  *(uint64_t *)((char *)this + *(void *)(*this - 696)) = a2[7];
  *(uint64_t *)((char *)this + *(void *)(*this - 704)) = a2[8];
  *(uint64_t *)((char *)this + *(void *)(*this - 712)) = a2[9];
  *(uint64_t *)((char *)this + *(void *)(*this - 744)) = a2[10];
  *(uint64_t *)((char *)this + *(void *)(*this - 752)) = a2[11];
  *(uint64_t *)((char *)this + *(void *)(*this - 768)) = a2[12];
  return this;
}

void AdobeXMPCore_Int::StructureNodeImpl::GetNode(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 208))() && (*(uint64_t (**)(void))(*(void *)*a3 + 208))())
  {
    long long v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v9 = (std::__shared_weak_count *)a3[1];
    uint64_t v15 = *a3;
    long long v16 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(v12, 0, sizeof(v12));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v12, (char *)a1 + *(void *)(*a1 - 904) + 8, 0);
    uint64_t v10 = std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::find<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)(a1 + 1), &v13);
    if (a1 + 2 != (void *)v10)
    {
      unint64_t v11 = *(char **)(v10 + 64);
      (**(void (***)(char *))&v11[*(void *)(*(void *)v11 - 56)])(&v11[*(void *)(*(void *)v11 - 56)]);
      std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a4, (uint64_t)v11);
    }
    *a4 = 0;
    a4[1] = 0;
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v12);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_188850E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AdobeXMPCore_Int::StructureNodeImpl::QualifiedName::~QualifiedName((AdobeXMPCore_Int::StructureNodeImpl::QualifiedName *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::StructureNodeImpl::QualifiedName::~QualifiedName(AdobeXMPCore_Int::StructureNodeImpl::QualifiedName *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void AdobeXMPCore_Int::StructureNodeImpl::GetNode(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, const char *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3);
}

void sub_188850FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::GetNode(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, const char *a4)
{
}

void AdobeXMPCore_Int::StructureNodeImpl::RemoveNode(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  if ((*(uint64_t (**)(void))(*(void *)*a2 + 208))() && (*(uint64_t (**)(void))(*(void *)*a3 + 208))())
  {
    long long v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v16 = *a2;
    uint64_t v17 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v9 = (std::__shared_weak_count *)a3[1];
    uint64_t v18 = *a3;
    size_t v19 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(v15, 0, sizeof(v15));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v15, (char *)a1 + *(void *)(*a1 - 904) + 8, 1);
    uint64_t v10 = (uint64_t **)(a1 + 1);
    unint64_t v11 = (uint64_t *)std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::find<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)(a1 + 1), &v16);
    if (a1 + 2 == v11)
    {
      *a4 = 0;
      a4[1] = 0;
    }
    else
    {
      uint64_t v13 = v11[8];
      uint64_t v12 = v11[9];
      *a4 = v13;
      a4[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::erase(v10, v11);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 280))(v13);
      (*(void (**)(uint64_t, void))(*(void *)v14 + 504))(v14, 0);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v15);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_1888511E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  AdobeXMPCore_Int::StructureNodeImpl::QualifiedName::~QualifiedName((AdobeXMPCore_Int::StructureNodeImpl::QualifiedName *)va1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::StructureNodeImpl::RemoveNode(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, const char *a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3);
}

void sub_188851320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::RemoveNode(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, const char *a4)
{
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::GetChildNodeType(AdobeXMPCore_Int::StructureNodeImpl *this, const char *a2, unint64_t a3, const char *a4)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 792))
                                                + 648))(&v7);
  uint64_t v4 = v8;
  if (!v7)
  {
    uint64_t v5 = 0;
    if (!v8) {
      return v5;
    }
    goto LABEL_3;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (v4) {
LABEL_3:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void sub_188851440(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::GetChildNodeType(AdobeXMPCore_Int::StructureNodeImpl *this, const char *a2, unint64_t a3, const char *a4)
{
  return AdobeXMPCore_Int::StructureNodeImpl::GetChildNodeType((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + *(void *)(*(void *)this - 696)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::GetNodeType(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  return 4;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::GetNodeType(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  return 4;
}

void AdobeXMPCore_Int::StructureNodeImpl::InsertNode(void *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1 + *(void *)(*a1 - 872);
  uint64_t v5 = a2[1];
  *(void *)&long long v12 = *a2;
  *((void *)&v12 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v6 = (*(uint64_t (**)(char *, long long *))(*(void *)v4 + 656))(v4, &v12);
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  if (v6)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 88))(&v9);
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 72))(&v11);
    long long v12 = v9;
    if (*((void *)&v9 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v13 = v11;
    if (*((void *)&v11 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
    }
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v9, (char *)a1 + *(void *)(*a1 - 904) + 8, 1);
    if (a1 + 2 == (void *)std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::find<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)(a1 + 1), (uint64_t *)&v12))
    {
      uint64_t v7 = *a2;
      long long v8 = (void (***)(void))(*a2 + *(void *)(*(void *)*a2 - 56));
      (**v8)(v8);
      std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(&v11, v7);
    }
    long long v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(100, 4, 2);
  }
}

void sub_18885196C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, std::__shared_weak_count *);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  AdobeXMPCore_Int::StructureNodeImpl::QualifiedName::~QualifiedName((AdobeXMPCore_Int::StructureNodeImpl::QualifiedName *)va1);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::InsertNode(void *a1, uint64_t *a2)
{
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::ReplaceNode@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  char v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = a1 + *(void *)(*(void *)a1 - 872);
  uint64_t v16 = *a2;
  uint64_t v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v7 + 656))(v7, &v16))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 88))(&v12);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 72))(&v10);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 736))(&v14, a1, &v12, &v10);
    BOOL v8 = v14 != 0;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (!v8)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(100, 5, 2);
  }
  *a3 = 0;
  a3[1] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 88))(&v16);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 72))(&v14);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 744))(a1, &v16, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 656))(a1, a2);
}

void sub_188851E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ReplaceNode@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return AdobeXMPCore_Int::StructureNodeImpl::ReplaceNode((uint64_t)a1 + *(void *)(*a1 - 720), a2, a3);
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::AppendNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 656))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::AppendNode(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)((char *)a1 + *(void *)(*a1 - 568)) + 656))();
}

void AdobeXMPCore_Int::StructureNodeImpl::Iterator(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, void *a2@<X8>)
{
  memset(v10, 0, sizeof(v10));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v10, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  uint64_t v4 = (AdobeXMPCore_Int::StructureNodeImpl *)*((void *)this + 1);
  BOOL v8 = (char *)this + 16;
  uint64_t v9 = v4;
  if (v4 != (AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + 16))
  {
    uint64_t v5 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x38);
    char v6 = (char *)AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::TNodeIteratorImpl(v5, &v9, &v8);
    AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>(v6, 1, &v7);
  }
  *a2 = 0;
  a2[1] = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v10);
}

void sub_188852034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 176)])(&a1[*(void *)(*(void *)a1 - 176)]);
    std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_1888521D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::TNodeIteratorImpl(void *result, void *a2, void *a3)
{
  result[4] = &unk_1ED4D2710;
  *uint64_t result = &unk_1ED4D25A0;
  result[3] = &unk_1ED4D2640;
  *(void *)((char *)result + unk_1ED4D2510) = &unk_1ED4D26A0;
  result[5] = 0;
  result[6] = 0;
  *uint64_t result = off_1ED4EC620;
  result[3] = off_1ED4EC6C0;
  result[4] = off_1ED4EC728;
  result[1] = *a2;
  result[2] = *a3;
  return result;
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::Iterator(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, void *a2@<X8>)
{
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::ChildCount(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  uint64_t v2 = *((void *)this + 3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ChildCount(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  return AdobeXMPCore_Int::StructureNodeImpl::ChildCount((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                               + *(void *)(*(void *)this - 608)));
}

void AdobeXMPCore_Int::StructureNodeImpl::ConvertToStructureNode(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  (**(void (***)(char *))((char *)this + *(void *)(*(void *)this - 880)))((char *)this + *(void *)(*(void *)this - 880));
  std::shared_ptr<AdobeXMPCore_Int::StructureNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v2, (uint64_t)this);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::StructureNodeImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 880)])(&a1[*(void *)(*(void *)a1 - 880)]);
    std::shared_ptr<AdobeXMPCore_Int::StructureNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_1888525F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ConvertToStructureNode(AdobeXMPCore_Int::StructureNodeImpl *this)
{
}

BOOL AdobeXMPCore_Int::StructureNodeImpl::HasContent(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  BOOL v2 = *((void *)this + 3) != 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

BOOL virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::HasContent(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  return AdobeXMPCore_Int::StructureNodeImpl::HasContent((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                               + *(void *)(*(void *)this - 232)));
}

BOOL AdobeXMPCore_Int::StructureNodeImpl::ValidateNameOrNameSpaceChangeForAChild(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  long long v23 = 0uLL;
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 736))(&v23);
  uint64_t v10 = v23;
  if (!(void)v23)
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 744))(&v19, a1, a2, a3);
    long long v11 = v19;
    long long v19 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    long long v23 = v11;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v22, a1 + *(void *)(*(void *)a1 - 904) + 8, 1);
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v22);
    uint64_t v13 = a4[1];
    *(void *)&long long v19 = *a4;
    *((void *)&v19 + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (std::__shared_weak_count *)a5[1];
    uint64_t v20 = *a5;
    int v21 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (__n128 *)&v19;
    uint64_t v15 = std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__emplace_unique_key_args<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName&&>,std::tuple<>>((AdobeXMPCore_Int::IMemoryAllocator_I *)(a1 + 8), (uint64_t *)&v19, (uint64_t)&std::piecewise_construct, &v24);
    long long v16 = v23;
    if (*((void *)&v23 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = (std::__shared_weak_count *)v15[9];
    *((_OWORD *)v15 + 4) = v16;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (*((void *)&v19 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
    }
  }
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  return v10 == 0;
}

void sub_188852880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

BOOL virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ValidateNameOrNameSpaceChangeForAChild(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  return AdobeXMPCore_Int::StructureNodeImpl::ValidateNameOrNameSpaceChangeForAChild((uint64_t)a1 + *(void *)(*a1 - 632), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::StructureNodeImpl::ClearContents(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  memset(v9, 0, sizeof(v9));
  BOOL v2 = (char *)this + 8;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v9, (char *)this + *(void *)(*(void *)this - 904) + 8, 1);
  uint64_t v3 = (char *)*((void *)this + 1);
  uint64_t v4 = (char *)this + 16;
  if (v3 != (char *)this + 16)
  {
    do
    {
      uint64_t v5 = *(void *)(*(uint64_t (**)(void))(**((void **)v3 + 8) + 280))(*((void *)v3 + 8));
      (*(void (**)(void))(v5 + 504))();
      char v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          char v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy((uint64_t)v2, *((void **)this + 2));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = v4;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v9);
}

void sub_188852A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ClearContents(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  AdobeXMPCore_Int::StructureNodeImpl::ClearContents((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                           + *(void *)(*(void *)this - 704)));
}

void AdobeXMPCore_Int::StructureNodeImpl::CloneContents(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  memset(v17, 0, sizeof(v17));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v17, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  if (!a2 || *((void *)this + 3) || !a3 && a4)
  {
    uint64_t v10 = *(void *)this;
    long long v11 = (char *)this + *(void *)(*(void *)this - 880);
    uint64_t v12 = *((void *)v11 + 2);
    v16[0] = *((void *)v11 + 1);
    v16[1] = v12;
    if (v12)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      uint64_t v10 = *(void *)this;
    }
    uint64_t v13 = (char *)this + *(void *)(v10 - 880);
    uint64_t v14 = *((void *)v13 + 4);
    v15[0] = *((void *)v13 + 3);
    v15[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    AdobeXMPCore_Int::IStructureNode_I::CreateStructureNode(v16, v15);
  }
  *a5 = 0;
  a5[1] = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v17);
}

void sub_188852D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::IStructureNode_I::CreateStructureNode(void *a1, void *a2)
{
  uint64_t v4 = (AdobeXMPCore_Int::StructureNodeImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xC8);
  if (*a1)
  {
    uint64_t v5 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(void))(*(void *)*a1 + 192))(*a1);
    if (*a1)
    {
      char v6 = (char *)(*(uint64_t (**)(void))(*(void *)*a1 + 208))(*a1);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  char v6 = 0;
LABEL_6:
  if (*a2)
  {
    uint64_t v7 = (const char *)(*(uint64_t (**)(void))(*(void *)*a2 + 192))(*a2);
    if (*a2) {
      (*(void (**)(void))(*(void *)*a2 + 208))(*a2);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(v4, v5, v6, v7);
}

void sub_188852F24(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::CloneContents(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void AdobeXMPCore_Int::StructureNodeImpl::resetChangesForChildren(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  memset(v7, 0, sizeof(v7));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  BOOL v2 = (char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 16;
  if (v2 != v3)
  {
    do
    {
      (*(void (**)(void))(**((void **)v2 + 8) + 216))(*((void *)v2 + 8));
      uint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          BOOL v2 = v5;
        }
        while (!v6);
      }
      BOOL v2 = v5;
    }
    while (v5 != v3);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::resetChangesForChildren(AdobeXMPCore_Int::StructureNodeImpl *this)
{
}

BOOL AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = AdobeXMPCommon::IUTF8String_v1::compare(*a2, a3);
  return v5 < 0 || !v5 && (AdobeXMPCommon::IUTF8String_v1::compare(a2[2], a3 + 16) & 0x80000000) != 0;
}

void AdobeXMPCore::IStructureNode_v1::CreateStructureNode(AdobeXMPCore::IStructureNode_v1 *this, char *a2, const char *a3, const char *a4)
{
  uint64_t v7 = (AdobeXMPCore_Int::StructureNodeImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xC8);
  AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(v7, this, a2, a3);
}

void sub_188853150(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::~NodeImpl((AdobeXMPCore_Int::NodeImpl *)(v2 + 48), (uint64_t *)&off_1ED4DD960);
  AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + 176), (uint64_t *)&off_1ED4DD9C8);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + 152), (uint64_t *)&off_1ED4DD9B0);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(this);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(void *)(*(void *)this - 24)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(void *)(*(void *)this - 24)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(void *)(*(void *)this - 56)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(void *)(*(void *)this - 56)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(void *a1)
{
  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)a1
                                                                                                + *(void *)(*a1 - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)a1
                                                                                                + *(void *)(*a1 - 48)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(AdobeXMPCore_Int::StructureNodeImpl *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 864)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 792)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 688)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 544)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 800)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 808)) = a2[9];
  *(void *)((char *)this + *(void *)(*(void *)this - 816)) = a2[10];
  *(void *)((char *)this + *(void *)(*(void *)this - 824)) = a2[11];
  *(void *)((char *)this + *(void *)(*(void *)this - 872)) = a2[12];
  *(void *)((char *)this + *(void *)(*(void *)this - 880)) = a2[13];
  *(void *)((char *)this + *(void *)(*(void *)this - 888)) = a2[14];
  *(void *)((char *)this + *(void *)(*(void *)this - 904)) = a2[15];
  std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

uint64_t std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy(result, *a2);
    std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy(v3, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const,std::shared_ptr<AdobeXMPCore::INode_v1>>,0>(a2 + 4);
    int v5 = *(uint64_t (**)(void))(*(void *)AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v4) + 8);
    return v5();
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<std::pair<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const,std::shared_ptr<AdobeXMPCore::INode_v1>>,0>(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::find<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    a1 = AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(a1, v3 + 4, (uint64_t)a2);
    BOOL v6 = v3 + 1;
    if (!a1)
    {
      BOOL v6 = v3;
      uint64_t v5 = (uint64_t)v3;
    }
    uint64_t v3 = (void *)*v6;
  }
  while (*v6);
  if (v5 == v2 || AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(a1, a2, v5 + 32)) {
    return v2;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(a1, a2);
  std::__destroy_at[abi:ne180100]<std::pair<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const,std::shared_ptr<AdobeXMPCore::INode_v1>>,0>(a2 + 4);
  uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v4);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)MemoryAllocator + 8))(MemoryAllocator, a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__emplace_unique_key_args<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const&>,std::tuple<>>(AdobeXMPCore_Int::IMemoryAllocator_I *a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v9 = 0;
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__find_equal<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const&>,std::tuple<>>(a1, a4, v8);
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at((uint64_t **)a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__find_equal<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        BOOL v8 = v4 + 4;
        a1 = AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(a1, a3, (uint64_t)(v4 + 4));
        if (!a1) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      a1 = AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(a1, v8, (uint64_t)a3);
      if (!a1) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const&>,std::tuple<>>@<X0>(AdobeXMPCore_Int::IMemoryAllocator_I *a1@<X0>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = (char *)a1 + 8;
  a3[2] = 0;
  uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  uint64_t result = (void *)(**MemoryAllocator)(MemoryAllocator, 80);
  *a3 = result;
  a3[1] = v5;
  BOOL v8 = *a2;
  uint64_t v9 = (*a2)[1];
  result[4] = **a2;
  result[5] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v8[2];
  uint64_t v10 = v8[3];
  result[6] = v11;
  result[7] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  result[8] = 0;
  result[9] = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::GetActualINodeIterator(AdobeXMPCore_Int::INodeIterator_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 136);
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::~TNodeIteratorImpl(uint64_t a1)
{
  return a1;
}

void AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::~TNodeIteratorImpl(uint64_t a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(a1 + 32), (uint64_t *)&off_1ED4DDB08);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::GetNodeType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 != *(void *)(a1 + 16))
  {
    uint64_t v2 = *(char **)(v1 + 64);
    (**(void (***)(char *))&v2[*(void *)(*(void *)v2 - 56)])(&v2[*(void *)(*(void *)v2 - 56)]);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(&v4, (uint64_t)v2);
  }
  return 0;
}

void sub_188853D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::GetNode@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3 != *(void *)(result + 16))
  {
    uint64_t v4 = *(char **)(v3 + 64);
    (**(void (***)(char *))&v4[*(void *)(*(void *)v4 - 56)])(&v4[*(void *)(*(void *)v4 - 56)]);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a2, (uint64_t)v4);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

char *AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::Next@<X0>(char *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v4 = (void *)*((void *)result + 1);
  uint64_t v5 = (void *)v4[1];
  if (v5)
  {
    do
    {
      BOOL v6 = v5;
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      BOOL v6 = (void *)v4[2];
      BOOL v7 = *v6 == (void)v4;
      uint64_t v4 = v6;
    }
    while (!v7);
  }
  *((void *)result + 1) = v6;
  if (v6 != *((void **)result + 2))
  {
    (**(void (***)(char *))&result[*(void *)(*(void *)result - 176)])(&result[*(void *)(*(void *)result - 176)]);
    std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(&v8, v2);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void virtual thunk to'AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::~TNodeIteratorImpl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1ED4DDB08);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)((char *)a1 + *(void *)(*a1 - 48) + 32), (uint64_t *)&off_1ED4DDB08);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 48);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1ED4DDB08);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

void std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188854044(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 176) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_1888540A8(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 176);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore_Int::StructureNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18885423C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 880) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_1888542A4(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 880);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::StructureNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::StructureNodeImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::StructureNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::StructureNodeImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::StructureNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::StructureNodeImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__emplace_unique_key_args<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName&&>,std::tuple<>>(AdobeXMPCore_Int::IMemoryAllocator_I *a1, uint64_t *a2, uint64_t a3, __n128 **a4)
{
  uint64_t v9 = 0;
  BOOL v6 = (uint64_t **)std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__find_equal<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName&&>,std::tuple<>>(a1, a4, v8);
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at((uint64_t **)a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

__n128 std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName&&>,std::tuple<>>@<Q0>(AdobeXMPCore_Int::IMemoryAllocator_I *a1@<X0>, __n128 **a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = (char *)a1 + 8;
  a3[2] = 0;
  uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  uint64_t v7 = (**MemoryAllocator)(MemoryAllocator, 80);
  *a3 = v7;
  a3[1] = (uint64_t)v5;
  uint64_t v8 = *a2;
  *(__n128 *)(v7 + 32) = **a2;
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = 0;
  __n128 result = v8[1];
  *(__n128 *)(v7 + 48) = result;
  v8[1].n128_u64[0] = 0;
  v8[1].n128_u64[1] = 0;
  *(void *)(v7 + 64) = 0;
  *(void *)(v7 + 72) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

BOOL TIFF_CheckFormat(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 != 1414088262) {
    TIFF_CheckFormat();
  }
  (*(void (**)(uint64_t, void, void))(*(void *)a3 + 16))(a3, 0, 0);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16))(a3, 0, 1);
  BOOL result = 0;
  if (v4 - v5 >= 26)
  {
    int v8 = 0;
    (**(void (***)(uint64_t, int *, uint64_t, void))a3)(a3, &v8, 4, 0);
    return v8 == 2771273 || v8 == 704662861;
  }
  return result;
}

void TIFF_MetaHandlerCTor(XMPFiles *a1)
{
}

void sub_18885466C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C40773A3033);
  _Unwind_Resume(a1);
}

void TIFF_MetaHandler::TIFF_MetaHandler(TIFF_MetaHandler *this, XMPFiles *a2)
{
  XMPFileHandler::XMPFileHandler(this);
  *uint64_t v4 = &unk_1ED4E3E68;
  TIFF_FileWriter::TIFF_FileWriter((TIFF_FileWriter *)(v4 + 12));
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = 8831;
  *((unsigned char *)this + 20) = 0;
}

void sub_1888546F0(_Unwind_Exception *a1)
{
  XMPFileHandler::~XMPFileHandler(v1);
  _Unwind_Resume(a1);
}

void TIFF_MetaHandler::~TIFF_MetaHandler(TIFF_MetaHandler *this)
{
  *(void *)this = &unk_1ED4E3E68;
  uint64_t v2 = *((void *)this + 51);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  }
  uint64_t v3 = *((void *)this + 52);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  TIFF_FileWriter::~TIFF_FileWriter((TIFF_MetaHandler *)((char *)this + 96));

  XMPFileHandler::~XMPFileHandler((void **)this);
}

{
  uint64_t vars8;

  TIFF_MetaHandler::~TIFF_MetaHandler(this);

  JUMPOUT(0x18C11C0E0);
}

uint64_t TIFF_MetaHandler::CacheFileData(TIFF_MetaHandler *this)
{
  if (*((unsigned char *)this + 21)) {
    TIFF_MetaHandler::CacheFileData();
  }
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = v2[29];
  uint64_t v4 = (unsigned int (*)(void))v2[34];
  if (v4 && v4(v2[35]))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 12;
    int v8 = "TIFF_MetaHandler::CacheFileData - User abort";
    goto LABEL_14;
  }
  TIFF_FileWriter::ParseFileStream((uint64_t)this + 96, v3);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (TIFF_FileWriter::GetTag((TIFF_MetaHandler *)((char *)this + 96), 0, 0xC612u, (uint64_t)&v12))
  {
    unsigned int v5 = *v13;
    if (TIFF_FileWriter::GetTag((TIFF_MetaHandler *)((char *)this + 96), 0, 0xC613u, (uint64_t)&v12)) {
      unsigned int v5 = *v13;
    }
    if (v5 >= 2)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 206;
      int v8 = "DNG version beyond 1.x";
LABEL_14:
      exception[1] = v8;
      *((unsigned char *)exception + 16) = 0;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t result = TIFF_FileWriter::GetTag((TIFF_MetaHandler *)((char *)this + 96), 0, 0x2BCu, (uint64_t)&v9);
  if (result)
  {
    *((void *)this + 4) = TIFF_FileWriter::GetValueOffset((TIFF_MetaHandler *)((char *)this + 96), 0, 0x2BCu);
    *((void *)this + 5) = v11;
    *((_WORD *)this + 24) = 257;
    uint64_t result = MEMORY[0x18C11BE20]((char *)this + 56, v10);
    *((unsigned char *)this + 21) = 1;
  }
  return result;
}

void TIFF_MetaHandler::ProcessXMP(TIFF_MetaHandler *this)
{
  *((unsigned char *)this + 22) = 1;
  if ((*(_DWORD *)(*((void *)this + 1) + 240) & 2) == 0) {
    operator new();
  }
  operator new();
}

void sub_188854DD8(void *a1)
{
}

void TIFF_MetaHandler::UpdateFile(TIFF_MetaHandler *this, int a2)
{
  if (a2) {
    TIFF_MetaHandler::UpdateFile();
  }
  uint64_t v3 = *(void *)(*((void *)this + 1) + 232);
  unsigned int v4 = *((_DWORD *)this + 10);
  if (*((void *)this + 4) == -1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 4);
  }
  if (v4 == -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v7 = (char *)this + 80;
  int v8 = (TIFF_MetaHandler *)((char *)this + 96);
  ExportPhotoData(1414088262, (uint64_t)this + 80, (uint64_t)this + 96, *((void *)this + 52), *((void *)this + 51));
  if (v5 != 0 && v6 != 0) {
    uint64_t v9 = 576;
  }
  else {
    uint64_t v9 = 64;
  }
  uint64_t v10 = (char *)this + 56;
  TXMPMeta<std::string>::SerializeToBuffer((uint64_t)v7, (uint64_t)this + 56, v9, v6);
  if (v5 != 0 && v6 != 0)
  {
    if (*((char *)this + 79) < 0) {
      unint64_t v11 = *((void *)this + 8);
    }
    else {
      unint64_t v11 = *((unsigned __int8 *)this + 79);
    }
    BOOL v12 = v11 <= (int)v6;
  }
  else
  {
    BOOL v12 = 0;
  }
  int IsLegacyChanged = TIFF_FileWriter::IsLegacyChanged(v8);
  uint64_t v15 = *((void *)this + 1);
  long long v16 = *(XMP_ProgressTracker **)(v15 + 288);
  if (!IsLegacyChanged && v12)
  {
    LODWORD(v17) = *((char *)this + 79);
    if ((v17 & 0x80000000) != 0)
    {
      unint64_t v18 = *((void *)this + 8);
      unint64_t v19 = *((int *)this + 10);
      if (v18 >= v19)
      {
        uint64_t v20 = *(void *)(v15 + 232);
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v18 = *((unsigned __int8 *)this + 79);
      unint64_t v19 = *((int *)this + 10);
      if (v18 >= v19)
      {
        uint64_t v20 = *(void *)(v15 + 232);
LABEL_28:
        int v22 = 0;
        uint64_t v23 = v17;
        goto LABEL_38;
      }
    }
    std::string::append((std::string *)((char *)this + 56), v19 - v18, 32);
    LODWORD(v17) = *((char *)this + 79);
    uint64_t v20 = *(void *)(*((void *)this + 1) + 232);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_37:
    uint64_t v23 = *((void *)this + 8);
    int v22 = 1;
LABEL_38:
    if (v23 != (int)v6) {
      TIFF_MetaHandler::UpdateFile();
    }
    if (v16)
    {
      if (!*((unsigned char *)v16 + 32))
      {
        if (v22) {
          unint64_t v17 = *((void *)this + 8);
        }
        else {
          unint64_t v17 = v17;
        }
        XMP_ProgressTracker::BeginWork(v16, (float)v17);
        char v28 = 1;
LABEL_50:
        (*(void (**)(uint64_t, uint64_t, void, __n128))(*(void *)v20 + 16))(v20, v5, 0, v14);
        if (*((char *)this + 79) < 0)
        {
          uint64_t v10 = (char *)*((void *)this + 7);
          uint64_t v29 = *((void *)this + 8);
        }
        else
        {
          uint64_t v29 = *((unsigned __int8 *)this + 79);
        }
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v20 + 8))(v20, v10, v29);
        if ((v28 & 1) == 0) {
          goto LABEL_35;
        }
LABEL_34:
        XMP_ProgressTracker::WorkComplete(v16, v25, v26, v27);
        goto LABEL_35;
      }
      if (v22) {
        unint64_t v17 = *((void *)this + 8);
      }
      else {
        unint64_t v17 = v17;
      }
      v14.n128_f32[0] = XMP_ProgressTracker::AddTotalWork(v16, (float)v17);
    }
    char v28 = 0;
    goto LABEL_50;
  }
  if (v16 && !*((unsigned char *)v16 + 32))
  {
    XMP_ProgressTracker::BeginWork(*(XMP_ProgressTracker **)(v15 + 288), 0.0);
    int v21 = 1;
  }
  else
  {
    int v21 = 0;
  }
  if (*((char *)this + 79) < 0)
  {
    unsigned int v24 = *((_DWORD *)this + 16);
    uint64_t v10 = (char *)*((void *)this + 7);
  }
  else
  {
    unsigned int v24 = *((unsigned __int8 *)this + 79);
  }
  TIFF_FileWriter::SetTag(v8, 0, 0x2BCu, 7, v24, v10);
  TIFF_FileWriter::UpdateFileStream((uint64_t)v8, v3, v16);
  if (v21) {
    goto LABEL_34;
  }
LABEL_35:
  *((unsigned char *)this + 23) = 0;
}

void sub_1888550B0(_Unwind_Exception *a1)
{
}

void TIFF_MetaHandler::WriteTempFile(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1[1] + 232);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  if (v5 >= 0x100000000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    exception[1] = "TIFF fles can't exceed 4GB";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = *(XMP_ProgressTracker **)(v6 + 288);
  if (v7) {
    XMP_ProgressTracker::BeginWork(*(XMP_ProgressTracker **)(v6 + 288), (float)v5);
  }
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, 0, 0);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 32))(a2, 0);
  XIO::Copy(v4, a2);
  uint64_t v8 = *a1;
  *(void *)(a1[1] + 232) = a2;
  (*(void (**)(uint64_t *, void))(v8 + 72))(a1, 0);
  *(void *)(a1[1] + 232) = v4;
  if (v7)
  {
    XMP_ProgressTracker::WorkComplete(v7, v9, v10, v11);
  }
}

void sub_188855268(void *a1)
{
  __cxa_begin_catch(a1);
  *(void *)(*(void *)(v2 + 8) + 232) = v1;
  __cxa_rethrow();
}

void sub_18885527C(_Unwind_Exception *a1)
{
}

void IPTC_Reader::SetDataSet_UTF8(IPTC_Reader *this, unsigned __int8 a2, const void *a3)
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for IPTC_Reader";
  *((unsigned char *)exception + 16) = 0;
}

void IPTC_Reader::DeleteDataSet(IPTC_Reader *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for IPTC_Reader";
  *((unsigned char *)exception + 16) = 0;
}

uint64_t IPTC_Reader::IsChanged(IPTC_Reader *this)
{
  return 0;
}

void IPTC_Reader::UpdateMemoryDataSets(IPTC_Reader *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for IPTC_Reader";
  *((unsigned char *)exception + 16) = 0;
}

void IPTC_Reader::~IPTC_Reader(void **this)
{
  IPTC_Manager::~IPTC_Manager(this);

  JUMPOUT(0x18C11C0E0);
}

void IPTC_Manager::~IPTC_Manager(void **this)
{
  *this = &unk_1ED4DF1F0;
  if (*((unsigned char *)this + 45)) {
    free(this[4]);
  }
  std::__tree<unsigned long long>::destroy((uint64_t)(this + 1), this[2]);
}

void TIFF_CheckFormat()
{
  __assert_rtn("TIFF_CheckFormat", "TIFF_Handler.cpp", 52, "format == kXMP_TIFFFile");
}

void TIFF_MetaHandler::CacheFileData()
{
}

void TIFF_MetaHandler::ProcessXMP()
{
}

void TIFF_MetaHandler::UpdateFile()
{
}

{
  __assert_rtn("UpdateFile", "TIFF_Handler.cpp", 362, "this->xmpPacket.size() == (size_t)oldPacketLength");
}

void AdobeXMPCore_Int::PathImpl::RegisterNameSpacePrefixMap(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 40);
  *a3 = *(void *)(a1 + 32);
  a3[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(**(void **)a2 + 112))(&v7);
  long long v5 = v7;
  long long v7 = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
}

void sub_188855550(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::PathImpl::Serialize(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL);
}

void sub_188856120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::string v42 = *(std::__shared_weak_count **)(v40 - 120);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::string v43 = *(std::__shared_weak_count **)(v40 - 96);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  int v44 = *(std::__shared_weak_count **)(v39 + 8);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::PathImpl::AppendPathSegment(void *a1, uint64_t a2)
{
  if (!*(void *)a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
  }
  uint64_t v3 = (void *)a1[2];
  if ((unint64_t)v3 >= a1[3])
  {
    uint64_t result = std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__push_back_slow_path<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> const&>((AdobeXMPCore_Int::IMemoryAllocator_I *)(a1 + 1), (long long *)a2);
  }
  else
  {
    void *v3 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    v3[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t result = (uint64_t)(v3 + 2);
  }
  a1[2] = result;
  return result;
}

void sub_18885654C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::PathImpl::RemovePathSegment(AdobeXMPCore_Int::PathImpl *this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void v11[2] = a2;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v4 = (long long *)*((void *)this + 2);
  if (a2 - 1 >= (unint64_t)(((uint64_t)v4 - v5) >> 4))
  {
    v11[0] = 0;
    v11[1] = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2);
  }
  long long v6 = *(_OWORD *)(v5 + 16 * (a2 - 1));
  *a3 = v6;
  if (*((void *)&v6 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = *((void *)this + 1);
    uint64_t v4 = (long long *)*((void *)this + 2);
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *>((uint64_t)v11, (long long *)(v5 + 16 * a2), v4, v5 + 16 * a2 - 16);
  uint64_t v8 = v7;
  for (uint64_t i = *((void *)this + 2); i != v8; i -= 16)
  {
    __n128 v10 = *(std::__shared_weak_count **)(i - 8);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  *((void *)this + 2) = v8;
}

void sub_188856828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::PathImpl::GetPathSegment@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v3 = *(void *)(this + 8);
  if (a2 - 1 >= (unint64_t)((*(void *)(this + 16) - v3) >> 4))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2);
  }
  long long v4 = *(_OWORD *)(v3 + 16 * (a2 - 1));
  *a3 = v4;
  if (*((void *)&v4 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_188856AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::PathImpl::Size(AdobeXMPCore_Int::PathImpl *this)
{
  return (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4;
}

void AdobeXMPCore_Int::PathImpl::Clear(AdobeXMPCore_Int::PathImpl *this)
{
}

void AdobeXMPCore_Int::PathImpl::Clone(AdobeXMPCore_Int::PathImpl *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a2;
  if (a2 - 1 < (unint64_t)((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4))
  {
    *a3 = 0;
    a3[1] = 0;
    uint64_t v3 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x50);
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    *(void *)uint64_t v3 = off_1ED4EE978;
    *(void *)(v3 + 40) = 0;
    *(void *)(v3 + 48) = off_1ED4EEA58;
    *(void *)(v3 + 56) = off_1ED4EEAC0;
    *(_OWORD *)(v3 + 8) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathImpl>((char *)v3, 1, &v4);
  }
  long long v4 = 0uLL;
  AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2);
}

void sub_188856F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 240)])(&a1[*(void *)(*(void *)a1 - 240)]);
    std::shared_ptr<AdobeXMPCore_Int::PathImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::PathImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_188857118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *AdobeXMPCore::IPath_v1::MakeShared@<X0>(void *this@<X0>, AdobeXMPCore::IPath_v1 *a2@<X1>, void *a3@<X8>)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    (**(void (***)(uint64_t, AdobeXMPCore::IPath_v1 *))((char *)this + *(void *)(*this - 56)))((uint64_t)this + *(void *)(*this - 56), a2);
    std::shared_ptr<AdobeXMPCore::IPath_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IPath_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, v4);
  }
  *a3 = 0;
  a3[1] = 0;
  return this;
}

void AdobeXMPCore::IPath_v1::CreatePath(AdobeXMPCore::IPath_v1 *this)
{
  uint64_t v1 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x50);
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(void *)uint64_t v1 = off_1ED4EE978;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = off_1ED4EEA58;
  *(void *)(v1 + 56) = off_1ED4EEAC0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathImpl>((char *)v1, 1, &v2);
}

void AdobeXMPCore::IPath_v1::ParsePath()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 10000, 2);
}

void sub_18885746C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::IPath_I::GetActualIPath(AdobeXMPCore_Int::IPath_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 200);
}

void AdobeXMPCore_Int::PathImpl::~PathImpl(AdobeXMPCore_Int::PathImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56), (uint64_t *)&off_1ED4DE318);
}

{
  uint64_t v2;
  uint64_t vars8;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v2 + 56), (uint64_t *)&off_1ED4DE318);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void virtual thunk to'AdobeXMPCore_Int::PathImpl::~PathImpl(AdobeXMPCore_Int::PathImpl *this)
{
  uint64_t v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DE318);
}

{
  AdobeXMPCore_Int::PathImpl::~PathImpl((AdobeXMPCore_Int::PathImpl *)((char *)this + *(void *)(*(void *)this - 24)));
}

void virtual thunk to'AdobeXMPCore_Int::PathImpl::~PathImpl(void *a1)
{
  uint64_t v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DE318);
}

{
  AdobeXMPCore_Int::PathImpl::~PathImpl((AdobeXMPCore_Int::PathImpl *)((char *)a1 + *(void *)(*a1 - 48)));
}

void AdobeXMPCore_Int::PathImpl::~PathImpl(AdobeXMPCore_Int::PathImpl *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 232)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 200)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 208)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 240)) = a2[6];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (uint64_t *)((char *)this + 8);
  std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

uint64_t *std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__destroy_vector::operator()[abi:ne180100](uint64_t **a1)
{
  uint64_t result = *a1;
  if (*result)
  {
    std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100](result);
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v2) + 8);
    return (uint64_t *)v3();
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__push_back_slow_path<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> const&>(AdobeXMPCore_Int::IMemoryAllocator_I *a1, long long *a2)
{
  uint64_t v3 = (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    uint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v7 = v4;
  }
  v14[4] = (uint64_t)a1 + 16;
  uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  uint64_t v9 = (**MemoryAllocator)(MemoryAllocator, 16 * v7);
  __n128 v10 = (long long *)(v9 + 16 * v3);
  v14[0] = v9;
  v14[1] = (uint64_t)v10;
  void v14[3] = v9 + 16 * v7;
  long long v11 = *a2;
  *__n128 v10 = *a2;
  if (*((void *)&v11 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v14[2] = (uint64_t)(v10 + 1);
  std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__swap_out_circular_buffer((uint64_t *)a1, v14);
  uint64_t v12 = *((void *)a1 + 1);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(v14);
  return v12;
}

void sub_1888579F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 16);
      a3 -= 16;
      *(void *)(v7 - 16) = v8;
      uint64_t v9 = *(void *)(a3 + 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v15 + 1);
      }
      v7 -= 16;
      *((void *)&v15 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(uint64_t *a1)
{
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::clear[abi:ne180100]((uint64_t)a1);
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v3);
  }
  return a1;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::shared_ptr<AdobeXMPCore_Int::PathImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::PathImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188857C9C(void *a1)
{
  __cxa_begin_catch(a1);
  unint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 240) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188857D00(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::PathImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 240);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::PathImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::PathImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::PathImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::PathImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore::IPath_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IPath_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188857E94(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 56) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188857EF8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore::IPath_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPath_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IPath_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPath_v1>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore::IMetadata_v1 *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IPath_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPath_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::RegisterMemoryAllocator(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::RegisterMemoryAllocator(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::RegisterErrorNotifier(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::RegisterErrorNotifier(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::DisableMultiThreading(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  *((unsigned char *)this + 8) = 0;
  return 1;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::DisableMultiThreading(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  *((unsigned char *)this + *(void *)(*(void *)this - 88) + 8) = 0;
  return 1;
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::IsMultiThreaded(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::IsMultiThreaded(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  return *((unsigned __int8 *)this + *(void *)(*(void *)this - 96) + 8);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::GetActualIConfigurationManager(AdobeXMPCore_Int::IConfigurationManager_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 144);
}

void AdobeXMPCore_Int::ConfigurationManagerImpl::~ConfigurationManagerImpl(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
}

{
  uint64_t vars8;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ConfigurationManagerImpl *)((char *)this + 24), (uint64_t *)&off_1ED4DDDF0);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::~ConfigurationManagerImpl(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 24), (uint64_t *)&off_1ED4DDDF0);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

void virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::~ConfigurationManagerImpl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 48);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 24), (uint64_t *)&off_1ED4DDDF0);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

void AdobeXMPCore_Int::ThreadSafeImpl::ShareMutex(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void AdobeXMPCore_Int::ThreadSafeImpl::UnShareMutex(std::__shared_weak_count **this)
{
  if (this[1]) {
    AdobeXMPCore_Int::ISharedMutex::CreateSharedMutex((AdobeXMPCore_Int::ISharedMutex *)this);
  }
  uint64_t v2 = this[2];
  this[1] = 0;
  this[2] = 0;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void AdobeXMPCore_Int::ThreadSafeImpl::DisableThreadSafety(AdobeXMPCore_Int::ThreadSafeImpl *this)
{
  if (*((void *)this + 1))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
    *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
    *((void *)this + 2) = 0;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
}

BOOL AdobeXMPCore_Int::ThreadSafeImpl::IsThreadSafe(AdobeXMPCore_Int::ThreadSafeImpl *this)
{
  return *((void *)this + 1) != 0;
}

void AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(void *a1, AdobeXMPCore_Int::IUTF8String_I *this, char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  a1[10] = &unk_1ED4CA698;
  *a1 = &unk_1ED4CA508;
  a1[9] = &unk_1ED4CA5C8;
  *(void *)((char *)a1 + unk_1ED4CA460) = &unk_1ED4CA628;
  a1[11] = 0;
  a1[12] = 0;
  *a1 = off_1ED4EA700;
  a1[9] = off_1ED4EA7C0;
  a1[10] = off_1ED4EA828;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(this, a3);
}

void sub_18885847C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 32);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v1, (uint64_t *)&off_1ED4DD518);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetNameSpace@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetName@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetType(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetIndex(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  return *((void *)this + 8);
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetValue@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 48);
  *a2 = *(void *)(this + 40);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AdobeXMPCore_Int::PathSegmentImpl::Clone(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  uint64_t v2 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  uint64_t v3 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(void))(**((void **)this + 1) + 192))(*((void *)this + 1));
  uint64_t v4 = (char *)(*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 3) + 192))(*((void *)this + 3));
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 3) + 208))(*((void *)this + 3));
  int v7 = (*(uint64_t (**)(void))(**((void **)this + 5) + 192))(*((void *)this + 5));
  int v8 = (*(uint64_t (**)(void))(**((void **)this + 5) + 208))(*((void *)this + 5));
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(v2, v3, v4, v5, v6, v7, v8, *((_DWORD *)this + 14), *((void *)this + 8));
}

void sub_1888586E8(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 208)])(&a1[*(void *)(*(void *)a1 - 208)]);
    std::shared_ptr<AdobeXMPCore_Int::PathSegmentImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::PathSegmentImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_18885888C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::IPathSegment_I::CreatePropertyPathSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  int v5 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(void))(**(void **)a1 + 192))();
  int v6 = (char *)(*(uint64_t (**)(void))(**(void **)a1 + 208))();
  int v7 = (*(uint64_t (**)(void))(**(void **)a2 + 192))();
  int v8 = (*(uint64_t (**)(void))(**(void **)a2 + 208))();
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(v4, v5, v6, v7, v8, 0, -1, 1, -1);
}

void sub_188858A0C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::IPathSegment_I::CreateArrayIndexPathSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  int v5 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(void))(**(void **)a1 + 192))();
  int v6 = (char *)(*(uint64_t (**)(void))(**(void **)a1 + 208))();
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(v4, v5, v6, 0, -1, 0, -1, 2, a2);
}

void sub_188858B2C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::IPathSegment_I::CreateQualifierPathSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  int v5 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(void))(**(void **)a1 + 192))();
  int v6 = (char *)(*(uint64_t (**)(void))(**(void **)a1 + 208))();
  int v7 = (*(uint64_t (**)(void))(**(void **)a2 + 192))();
  int v8 = (*(uint64_t (**)(void))(**(void **)a2 + 208))();
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(v4, v5, v6, v7, v8, 0, -1, 4, -1);
}

void sub_188858CA8(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::IPathSegment_v1::CreatePropertyPathSegment(AdobeXMPCore::IPathSegment_v1 *this, char *a2, char *a3, const char *a4)
{
  uint64_t v4 = a4;
  int v6 = a2;
  long long v11 = a4;
  uint64_t v12 = a2;
  if (this && a2 == (char *)-1)
  {
    int v6 = (char *)strlen((const char *)this);
    uint64_t v12 = v6;
  }
  if (a3 && v4 == (const char *)-1)
  {
    uint64_t v4 = (const char *)strlen(a3);
    long long v11 = v4;
  }
  if (this && a3 && v6)
  {
    if (v4)
    {
      int v8 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
      AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(v8, this, v6, (int)a3, (int)v4, 0, -1, 1, -1);
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
}

void sub_1888590E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v14);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::IPathSegment_v1::CreateArrayIndexPathSegment(AdobeXMPCore::IPathSegment_v1 *this, char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v9 = a2;
  if (this && a2 == (char *)-1)
  {
    uint64_t v4 = (char *)strlen((const char *)this);
    uint64_t v9 = v4;
  }
  if (this)
  {
    if (v4)
    {
      int v6 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
      AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(v6, this, v4, 0, -1, 0, -1, 2, a3);
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
}

void sub_188859434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v15);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::IPathSegment_v1::CreateQualifierPathSegment(AdobeXMPCore::IPathSegment_v1 *this, char *a2, char *a3, const char *a4)
{
  uint64_t v4 = a4;
  int v6 = a2;
  long long v11 = a4;
  uint64_t v12 = a2;
  if (this && a2 == (char *)-1)
  {
    int v6 = (char *)strlen((const char *)this);
    uint64_t v12 = v6;
  }
  if (a3 && v4 == (const char *)-1)
  {
    uint64_t v4 = (const char *)strlen(a3);
    long long v11 = v4;
  }
  if (this && a3 && v6)
  {
    if (v4)
    {
      uint64_t v8 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
      AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(v8, this, v6, (int)a3, (int)v4, 0, -1, 4, -1);
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
}

void sub_188859890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v14);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::IPathSegment_v1::CreateQualifierSelectorPathSegment(AdobeXMPCore::IPathSegment_v1 *this, char *a2, char *a3, const char *a4, char *a5, const char *a6)
{
  int v6 = a6;
  uint64_t v8 = a4;
  uint64_t v10 = a2;
  long long v16 = a4;
  unint64_t v17 = a2;
  long long v15 = a6;
  if (this && a2 == (char *)-1)
  {
    uint64_t v10 = (char *)strlen((const char *)this);
    unint64_t v17 = v10;
  }
  if (a3 && v8 == (const char *)-1)
  {
    uint64_t v8 = (const char *)strlen(a3);
    long long v16 = v8;
  }
  if (a5 && v6 == (const char *)-1)
  {
    int v6 = (const char *)strlen(a5);
    long long v15 = v6;
  }
  if (this && a3 && a5 && v10 && v8)
  {
    if (v6)
    {
      uint64_t v12 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
      AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(v12, this, v10, (int)a3, (int)v8, (int)a5, (int)v6, 8, -1);
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
}

void sub_188859D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v15);
  _Unwind_Resume(a1);
}

void *AdobeXMPCore::IPathSegment_v1::MakeShared@<X0>(void *this@<X0>, AdobeXMPCore::IPathSegment_v1 *a2@<X1>, void *a3@<X8>)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    (**(void (***)(uint64_t, AdobeXMPCore::IPathSegment_v1 *))((char *)this + *(void *)(*this - 56)))((uint64_t)this + *(void *)(*this - 56), a2);
    std::shared_ptr<AdobeXMPCore::IPathSegment_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IPathSegment_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, v4);
  }
  *a3 = 0;
  a3[1] = 0;
  return this;
}

void AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 80), (uint64_t *)&off_1ED4DD518);
}

{
  uint64_t v2;
  uint64_t vars8;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v2 + 80), (uint64_t *)&off_1ED4DD518);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void virtual thunk to'AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  uint64_t v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 80);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DD518);
}

{
  AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl((AdobeXMPCore_Int::PathSegmentImpl *)((char *)this
                                                                                          + *(void *)(*(void *)this - 24)));
}

void virtual thunk to'AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl(void *a1)
{
  uint64_t v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 80);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DD518);
}

{
  AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl((AdobeXMPCore_Int::PathSegmentImpl *)((char *)a1
                                                                                          + *(void *)(*a1 - 48)));
}

void AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl(AdobeXMPCore_Int::PathSegmentImpl *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 200)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 168)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 208)) = a2[6];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::shared_ptr<AdobeXMPCore_Int::PathSegmentImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::PathSegmentImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18885A22C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 208) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_18885A290(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::PathSegmentImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 208);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::PathSegmentImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathSegmentImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::PathSegmentImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathSegmentImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::PathSegmentImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::PathSegmentImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathSegmentImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore::IPathSegment_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IPathSegment_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18885A424(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 56) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_18885A488(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore::IPathSegment_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPathSegment_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IPathSegment_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPathSegment_v1>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore::IMetadata_v1 *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IPathSegment_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPathSegment_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

AdobeXMPCore_Int::CoreConfigurationManagerImpl *AdobeXMPCore_Int::CoreConfigurationManagerImpl::CoreConfigurationManagerImpl(AdobeXMPCore_Int::CoreConfigurationManagerImpl *this)
{
  *((void *)this + 2) = &unk_1ED4D69B0;
  *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = &unk_1ED4D6B50;
  *((void *)this + 4) = &unk_1ED4D6BB0;
  *(void *)this = &unk_1ED4D6698;
  *(void *)((char *)this + unk_1ED4D6658) = &unk_1ED4D6750;
  *(void *)((char *)this + *(void *)(*(void *)this - 176)) = &unk_1ED4D6818;
  *(void *)((char *)this + *(void *)(*(void *)this - 184)) = &unk_1ED4D68D8;
  *((void *)this + 4) = &unk_1ED4D6FE8;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1ED4D7048;
  *((void *)this + 6) = 0;
  AdobeXMPCore_Int::ConfigurationManagerImpl::ConfigurationManagerImpl((uint64_t)this + 16, (uint64_t *)&off_1ED4DE050);
  *(void *)this = off_1ED4EDD98;
  *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = off_1ED4EDE50;
  *((void *)this + 2) = &unk_1ED4EDF30;
  *((void *)this + 4) = off_1ED4EDFF8;
  return this;
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::ConfigurationManagerImpl(uint64_t this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)(this + *(void *)(v2 - 176)) = a2[1];
  *(void *)(this + *(void *)(*(void *)this - 144)) = a2[2];
  *(void *)(this + *(void *)(*(void *)this - 56)) = a2[3];
  *(void *)(this + *(void *)(*(void *)this - 64)) = a2[4];
  *(void *)(this + *(void *)(*(void *)this - 152)) = a2[5];
  *(void *)(this + *(void *)(*(void *)this - 184)) = a2[6];
  *(unsigned char *)(this + 8) = 1;
  return this;
}

uint64_t std::shared_ptr<AdobeXMPCore::ICoreConfigurationManager_v1>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AdobeXMPCore::ICoreConfigurationManager_v1::GetCoreConfigurationManager(void *a1@<X8>)
{
}

uint64_t AdobeXMPCore_Int::ICoreConfigurationManager_I::GetISharedObject_I(AdobeXMPCore_Int::ICoreConfigurationManager_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 184);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::GetActualIConfigurationManager(AdobeXMPCore_Int::IConfigurationManager_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 104)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 104)) - 144);
}

uint64_t AdobeXMPCore_Int::ICoreConfigurationManager_I::GetActualICoreConfigurationManager(AdobeXMPCore_Int::ICoreConfigurationManager_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 168);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICoreConfigurationManager_I::GetISharedObject_I(AdobeXMPCore_Int::ICoreConfigurationManager_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 40)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 40)) - 184);
}

void AdobeXMPCore_Int::CoreConfigurationManagerImpl::~CoreConfigurationManagerImpl(AdobeXMPCore_Int::CoreConfigurationManagerImpl *this)
{
}

{
  uint64_t vars8;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::CoreConfigurationManagerImpl *)((char *)this + 32), (uint64_t *)&off_1ED4DE088);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void virtual thunk to'AdobeXMPCore_Int::CoreConfigurationManagerImpl::~CoreConfigurationManagerImpl(AdobeXMPCore_Int::CoreConfigurationManagerImpl *this)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1ED4DE088);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

void virtual thunk to'AdobeXMPCore_Int::CoreConfigurationManagerImpl::~CoreConfigurationManagerImpl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 48);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1ED4DE088);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::CoreConfigurationManagerImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 224)])(&a1[*(void *)(*(void *)a1 - 224)]);
    std::shared_ptr<AdobeXMPCore_Int::CoreConfigurationManagerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::CoreConfigurationManagerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_18885AD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<AdobeXMPCore::ICoreConfigurationManager_v1>::operator=[abi:ne180100]<AdobeXMPCore_Int::CoreConfigurationManagerImpl,void>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v3 = (void *)((char *)v3 + *(void *)(*v3 - 168));
  }
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  int v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void std::shared_ptr<AdobeXMPCore_Int::CoreConfigurationManagerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::CoreConfigurationManagerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18885AE1C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 224) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_18885AE80(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::CoreConfigurationManagerImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 224);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::CoreConfigurationManagerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CoreConfigurationManagerImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::CoreConfigurationManagerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CoreConfigurationManagerImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::CoreConfigurationManagerImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::CoreConfigurationManagerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CoreConfigurationManagerImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ClientDOMSerializerWrapperImpl(void *a1)
{
  uint64_t v2 = (AdobeXMPCore_Int::DOMSerializerImpl *)(a1 + 2);
  *a1 = &unk_1ED4D77F8;
  a1[5] = &unk_1ED4D8450;
  a1[2] = &unk_1ED4D7968;
  a1[12] = &unk_1ED4D7D48;
  *(void *)((char *)a1 + unk_1ED4D7880 + 16) = &unk_1ED4D7AA8;
  *(void *)((char *)a1 + *(void *)(a1[2] - 296) + 16) = &unk_1ED4D7BF0;
  *(void *)((char *)a1 + *(void *)(a1[2] - 304) + 16) = &unk_1ED4D7D48;
  AdobeXMPCore_Int::ConfigurableImpl::ConfigurableImpl((uint64_t)(a1 + 5), (uint64_t *)&off_1ED4DE260);
  a1[13] = 0;
  a1[14] = 0;
  a1[12] = &unk_1ED4D8B98;
  AdobeXMPCore_Int::DOMSerializerImpl::DOMSerializerImpl(v2, (uint64_t *)&off_1ED4DE198);
}

void sub_18885B464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  AdobeXMPCore_Int::DOMSerializerImpl::~DOMSerializerImpl(v18, (uint64_t *)&off_1ED4DE198);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v16, (uint64_t *)&off_1ED4DE278);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(v17, (uint64_t *)&off_1ED4DE260);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::ConfigurableImpl(uint64_t this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)(this + *(void *)(v2 - 304)) = a2[1];
  *(void *)(this + *(void *)(*(void *)this - 216)) = a2[2];
  *(void *)(this + 16) = 0;
  *(void *)(this + 8) = this + 16;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  *(_WORD *)(this + 48) = 0;
  return this;
}

void AdobeXMPCore_Int::DOMSerializerImpl::~DOMSerializerImpl(AdobeXMPCore_Int::DOMSerializerImpl *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 344)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 288)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 216)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 224)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 232)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 296)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 304)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 352)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 360)) = a2[9];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 48)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 80)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 88)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 96)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 104)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 112)) = a2[9];
  *(void *)((char *)this + *(void *)(*(void *)this - 120)) = a2[10];
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  }
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this)
{
  AdobeXMPCore_Int::DOMSerializerImpl::~DOMSerializerImpl((AdobeXMPCore_Int::DOMSerializerImpl *)(v2 + 16), (uint64_t *)&off_1ED4DE198);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + 96), (uint64_t *)&off_1ED4DE278);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + 40), (uint64_t *)&off_1ED4DE260);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(this);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(void *a1)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)a1 + *(void *)(*a1 - 208)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + *(void *)(*(void *)this - 48)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::clone(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this)
{
  uint64_t v1 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x78);
  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ClientDOMSerializerWrapperImpl(v1);
}

void sub_18885BE0C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::clone(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this)
{
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::Serialize(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, 0);
}

void sub_18885C264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::Serialize(void *a1@<X8>)
{
}

uint64_t AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ValidateValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  int v7 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **, int *))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), a2, a3, a4, &v8, &v7);
  if (v8)
  {
    AdobeXMPCommon::IError_v1::MakeShared((uint64_t)v8, &v9);
    long long v6 = v9;
    (*(void (**)(char *))(*(void *)((char *)v8 + *(void *)(*(void *)v8 - 56)) + 8))((char *)v8 + *(void *)(*(void *)v8 - 56));
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = v6;
  }
  if (v7)
  {
    long long v9 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2);
  }
  return result;
}

void sub_18885C524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v12 - 24);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ValidateValue(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ValidateValue((uint64_t)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::SerializeInternal(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::SerializeInternal(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void IPTC_Manager::ParseMemoryDataSets(IPTC_Manager *this, char *a2, int a3, char a4)
{
  LODWORD(v5) = a3;
  uint64_t v8 = (void *)*((void *)this + 1);
  int v47 = (uint64_t **)((char *)this + 8);
  long long v9 = (void *)((char *)this + 16);
  if (v8 != (void *)((char *)this + 16))
  {
    do
    {
      IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v8 + 5));
      uint64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          long long v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v11 = (void *)v8[2];
          BOOL v25 = *v11 == (void)v8;
          uint64_t v8 = v11;
        }
        while (!v25);
      }
      uint64_t v8 = v11;
    }
    while (v11 != v9);
  }
  std::__tree<unsigned long long>::destroy((uint64_t)v47, *((void **)this + 2));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v9;
  if (*((unsigned char *)this + 45)) {
    free(*((void **)this + 4));
  }
  *((void *)this + 4) = 0;
  uint64_t v12 = (char **)((char *)this + 32);
  *(void *)((char *)this + 38) = 0;
  if (v5)
  {
    if (a2 && *a2 == 28)
    {
      if (v5 > 0xA00000)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 210;
        int v46 = "Outrageous length for memory-based IPTC";
      }
      else
      {
        *((_DWORD *)this + 10) = v5;
        if ((a4 & 1) == 0)
        {
          *uint64_t v12 = a2;
          uint64_t v5 = v5;
          goto LABEL_18;
        }
        uint64_t v5 = v5;
        uint64_t v13 = (char *)malloc_type_malloc(v5, 0xD1F85A94uLL);
        *uint64_t v12 = v13;
        if (v13)
        {
          memcpy(v13, a2, v5);
          *((unsigned char *)this + 45) = 1;
          a2 = (char *)*((void *)this + 4);
LABEL_18:
          uint64_t v14 = &a2[v5];
          unint64_t v15 = (unint64_t)(v14 - 5);
          *((unsigned char *)this + 46) = 0;
          while (1)
          {
            if ((unint64_t)a2 > v15 || *a2 != 28) {
              return;
            }
            int v16 = a2[1];
            unsigned int v17 = a2[2];
            unsigned int v18 = bswap32(*(unsigned __int16 *)(a2 + 3));
            unsigned int v19 = HIWORD(v18);
            uint64_t v20 = a2 + 5;
            if ((v18 & 0x80000000) != 0)
            {
              uint64_t v21 = HIWORD(v18) & 0x7FFF;
              if ((v21 - 5) < 0xFFFFFFFC || v20 > &v14[-v21]) {
                return;
              }
              unsigned int v19 = 0;
              uint64_t v23 = (v21 - 1);
              do
              {
                int v24 = *v20++;
                unsigned int v19 = v24 | (v19 << 8);
                LODWORD(v2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v21 - 1;
              }
              while (v21);
              uint64_t v20 = &a2[v23 + 6];
            }
            if (v20 > &v14[-v19]) {
              return;
            }
            if (v16 == 1 && v17 == 90 && v19 == 3)
            {
              BOOL v25 = *(_WORD *)v20 == 9499 && v20[2] == 71;
              if (v25) {
                *((unsigned char *)this + 46) = 1;
              }
              unsigned __int16 v26 = 1090;
            }
            else
            {
              unsigned __int16 v26 = v17 + 1000 * v16;
              if (!v19)
              {
                __n128 v27 = 0;
                goto LABEL_42;
              }
            }
            __n128 v27 = v20;
LABEL_42:
            uint64_t v28 = *v9;
            if (!*v9) {
              goto LABEL_53;
            }
            uint64_t v29 = v9;
            uint64_t v30 = *v9;
            do
            {
              unsigned int v31 = *(unsigned __int16 *)(v30 + 32);
              BOOL v32 = v31 >= v26;
              if (v31 >= v26) {
                int v33 = (uint64_t *)v30;
              }
              else {
                int v33 = (uint64_t *)(v30 + 8);
              }
              if (v32) {
                uint64_t v29 = (void *)v30;
              }
              uint64_t v30 = *v33;
            }
            while (*v33);
            if (v29 == v9 || *((unsigned __int16 *)v29 + 16) > v26) {
LABEL_53:
            }
              uint64_t v29 = v9;
            uint64_t v34 = -1;
            int v35 = kKnownDataSets;
            do
            {
              unsigned int v36 = *v35;
              v35 += 32;
              ++v34;
              BOOL v37 = v36 == v17;
            }
            while (v36 < v17);
            unint64_t v38 = v34 & 0xFFFFFFFFFFFFFFFDLL;
            BOOL v40 = !v37 || v38 == 8 || v17 == 12;
            if (v40 || v17 == 80 || v29 == v9)
            {
              uint64_t v48 = v26;
              char v49 = v16;
              char v50 = v17;
              __int16 v51 = 0;
              unsigned int v52 = v19;
              std::string v41 = v9;
              int v53 = v27;
              if (v28)
              {
                std::string v41 = v9;
                do
                {
                  unsigned int v42 = *(unsigned __int16 *)(v28 + 32);
                  BOOL v43 = v26 >= v42;
                  if (v26 >= v42) {
                    int v44 = (uint64_t *)(v28 + 8);
                  }
                  else {
                    int v44 = (uint64_t *)v28;
                  }
                  if (!v43) {
                    std::string v41 = (void *)v28;
                  }
                  uint64_t v28 = *v44;
                }
                while (*v44);
              }
              std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__emplace_hint_multi<std::pair<unsigned short const,IPTC_Manager::DataSetInfo> &>(v47, v41, (uint64_t)&v48);
            }
            else
            {
              IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v29 + 5));
              *((unsigned char *)v29 + 40) = v16;
              *((unsigned char *)v29 + 4std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v17;
              *((_WORD *)v29 + 2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
              *((_DWORD *)v29 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v19;
              v29[6] = v27;
            }
            a2 = &v20[v19];
            unint64_t v15 = (unint64_t)(v14 - 5);
          }
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 15;
        int v46 = "Out of memory";
      }
    }
    else
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 210;
      int v46 = "Not valid IPTC, no leading 0x1C";
    }
    exception[1] = v46;
    *((unsigned char *)exception + 16) = 0;
  }
}

void IPTC_Manager::DisposeLooseValue(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v4 = *(void **)(a2 + 8);
    if (v4)
    {
      unint64_t v5 = *(void *)(a1 + 32);
      if ((unint64_t)v4 < v5 || (unint64_t)v4 >= v5 + *(unsigned int *)(a1 + 40))
      {
        free(v4);
        *(void *)(a2 + 8) = 0;
      }
    }
  }
}

__n128 IPTC_Manager::GetDataSet(uint64_t a1, int a2, __n128 *a3, unint64_t a4)
{
  unsigned int v4 = a2 + 2000;
  unsigned __int16 v19 = a2 + 2000;
  unint64_t v5 = (void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v9 = a1 + 8;
    uint64_t v10 = v5;
    do
    {
      unsigned int v11 = *(unsigned __int16 *)(v6 + 32);
      BOOL v12 = v11 >= v4;
      if (v11 >= v4) {
        uint64_t v13 = (uint64_t *)v6;
      }
      else {
        uint64_t v13 = (uint64_t *)(v6 + 8);
      }
      if (v12) {
        uint64_t v10 = (void *)v6;
      }
      uint64_t v6 = *v13;
    }
    while (*v13);
    if (v10 != v5
      && *((unsigned char *)v10 + 40) == 2
      && *((unsigned __int8 *)v10 + 41) == a2
      && std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__count_multi<unsigned short>(v9, &v19) > a4&& a3)
    {
      if (a4)
      {
        uint64_t v15 = 0;
        do
        {
          int v16 = (void *)v10[1];
          if (v16)
          {
            do
            {
              unsigned int v17 = v16;
              int v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              unsigned int v17 = (void *)v10[2];
              BOOL v18 = *v17 == (void)v10;
              uint64_t v10 = v17;
            }
            while (!v18);
          }
          ++v15;
          uint64_t v10 = v17;
        }
        while (v15 != a4);
      }
      else
      {
        unsigned int v17 = v10;
      }
      __n128 result = *(__n128 *)(v17 + 5);
      *a3 = result;
    }
  }
  return result;
}

void IPTC_Manager::GetDataSet_UTF8(uint64_t a1, int a2, std::string *this, unint64_t a4)
{
  if (this) {
    std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  }
  __n128 v13 = 0uLL;
  __n128 DataSet = IPTC_Manager::GetDataSet(a1, a2, &v13, a4);
  if (v9) {
    BOOL v10 = v13.n128_u32[1] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  char v12 = v10 || v13.n128_u64[1] == 0;
  if (this && (v12 & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 46)) {
      goto LABEL_15;
    }
    if (!ignoreLocalText)
    {
      ReconcileUtils::LocalToUTF8((const UInt8 *)v13.n128_u64[1], v13.n128_u32[1], this);
      return;
    }
    if (ReconcileUtils::IsASCII((ReconcileUtils *)v13.n128_u64[1], (char *)v13.n128_u32[1])) {
LABEL_15:
    }
      MEMORY[0x18C11BE20](this, DataSet);
  }
}

void IPTC_Writer::~IPTC_Writer(IPTC_Writer *this)
{
  *(void *)this = &unk_1ED4DED90;
  uint64_t v2 = (char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v2 + 40));
      unsigned int v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          unint64_t v5 = v4;
          unsigned int v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }

  IPTC_Manager::~IPTC_Manager((void **)this);
}

{
  uint64_t vars8;

  IPTC_Writer::~IPTC_Writer(this);

  JUMPOUT(0x18C11C0E0);
}

void IPTC_Writer::SetDataSet_UTF8(uint64_t **this, unsigned int a2, unsigned char *a3, unsigned int a4, uint64_t a5)
{
  if (!a4) {
    return;
  }
  unsigned int v6 = a4;
  BOOL v10 = &off_1E53CD300;
  do
  {
    unsigned int v11 = *((unsigned __int8 *)v10 + 32);
    v10 += 4;
    BOOL v12 = v11 == a2;
  }
  while (v11 < a2);
  if (v12) {
    __n128 v13 = v10;
  }
  else {
    __n128 v13 = 0;
  }
  if (!v12)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    BOOL v40 = "Can only set known IPTC DataSets";
    goto LABEL_82;
  }
  if (!*((unsigned char *)this + 46)) {
    IPTC_Writer::ConvertToUTF8((IPTC_Writer *)this);
  }
  unint64_t v14 = (unint64_t)v10[1];
  if (v14 < v6)
  {
    if (*((unsigned char *)this + 46) && v14 && (a3[v14] & 0xC0) == 0x80)
    {
      while (a3[v14] <= 0xBFu)
      {
        LODWORD(v14) = v14 - 1;
        if (!v14)
        {
          unsigned int v6 = 0;
          goto LABEL_19;
        }
      }
    }
    unsigned int v6 = v14;
  }
LABEL_19:
  unsigned int v15 = a2 + 2000;
  unsigned __int16 v47 = a2 + 2000;
  unsigned int v17 = (uint64_t *)(this + 2);
  int v16 = this[2];
  if (!v16) {
    goto LABEL_30;
  }
  BOOL v18 = (uint64_t *)(this + 2);
  do
  {
    unsigned int v19 = *((unsigned __int16 *)v16 + 16);
    BOOL v20 = v19 >= v15;
    if (v19 >= v15) {
      uint64_t v21 = (uint64_t **)v16;
    }
    else {
      uint64_t v21 = (uint64_t **)(v16 + 1);
    }
    if (v20) {
      BOOL v18 = v16;
    }
    int v16 = *v21;
  }
  while (*v21);
  if (v18 == v17 || v15 < *((unsigned __int16 *)v18 + 16)) {
LABEL_30:
  }
    BOOL v18 = (uint64_t *)(this + 2);
  uint64_t v22 = std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__count_multi<unsigned short>((uint64_t)(this + 1), &v47);
  BOOL v23 = *((unsigned char *)v13 + 1) == 2 || a2 == 12;
  if (v23 || a2 == 80)
  {
    if (a5 >= 0) {
      uint64_t v24 = a5;
    }
    else {
      uint64_t v24 = v22;
    }
    if (v24 > v22)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      BOOL v40 = "Invalid index for IPTC DataSet";
LABEL_82:
      exception[1] = v40;
      *((unsigned char *)exception + 16) = 0;
    }
    if (v24 == v22) {
      goto LABEL_66;
    }
    BOOL v25 = (char **)*v17;
    unsigned __int16 v26 = (char *)(this + 2);
    if (*v17)
    {
      unsigned __int16 v26 = (char *)(this + 2);
      do
      {
        unsigned int v27 = *((unsigned __int16 *)v25 + 16);
        BOOL v28 = v27 >= v47;
        if (v27 >= v47) {
          uint64_t v29 = v25;
        }
        else {
          uint64_t v29 = v25 + 1;
        }
        if (v28) {
          unsigned __int16 v26 = (char *)v25;
        }
        BOOL v25 = (char **)*v29;
      }
      while (*v29);
    }
    if (v24 < 1)
    {
      BOOL v18 = (uint64_t *)v26;
    }
    else
    {
      do
      {
        uint64_t v30 = (uint64_t *)*((void *)v26 + 1);
        if (v30)
        {
          do
          {
            BOOL v18 = v30;
            uint64_t v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            BOOL v18 = (uint64_t *)*((void *)v26 + 2);
            BOOL v12 = *v18 == (void)v26;
            unsigned __int16 v26 = (char *)v18;
          }
          while (!v12);
        }
        unsigned __int16 v26 = (char *)v18;
      }
      while (v24-- > 1);
    }
  }
  else if (a5 >= 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    BOOL v40 = "Non-repeatable IPTC DataSet";
    goto LABEL_82;
  }
  if (v18 == v17)
  {
LABEL_66:
    int v32 = 0;
    BOOL v18 = (uint64_t *)(this + 2);
    goto LABEL_67;
  }
  if (*((_DWORD *)v18 + 11) == v6 && !memcmp((const void *)v18[6], a3, v6)) {
    return;
  }
  int v32 = 1;
LABEL_67:
  int v33 = malloc_type_malloc(v6, 0x6EC57D1DuLL);
  if (!v33)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    BOOL v40 = "Out of memory";
    goto LABEL_82;
  }
  uint64_t v34 = v33;
  memcpy(v33, a3, v6);
  if (v32)
  {
    IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v18 + 5));
    *((unsigned char *)v18 + 40) = 2;
    *((unsigned char *)v18 + 4std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a2;
    *((_WORD *)v18 + 2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
    *((_DWORD *)v18 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v6;
    v18[6] = (uint64_t)v34;
  }
  else
  {
    uint64_t v41 = v47;
    char v42 = 2;
    char v43 = a2;
    __int16 v44 = 0;
    unsigned int v45 = v6;
    int v46 = v34;
    uint64_t v35 = *v17;
    if (*v17)
    {
      do
      {
        unsigned int v36 = *(unsigned __int16 *)(v35 + 32);
        BOOL v37 = v47 >= v36;
        if (v47 >= v36) {
          unint64_t v38 = (uint64_t *)(v35 + 8);
        }
        else {
          unint64_t v38 = (uint64_t *)v35;
        }
        if (!v37) {
          unsigned int v17 = (uint64_t *)v35;
        }
        uint64_t v35 = *v38;
      }
      while (*v38);
    }
    std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__emplace_hint_multi<std::pair<unsigned short const,IPTC_Manager::DataSetInfo> &>(this + 1, v17, (uint64_t)&v41);
  }
  *((unsigned char *)this + 44) = 1;
}

void IPTC_Writer::ConvertToUTF8(IPTC_Writer *this)
{
  if (*((unsigned char *)this + 46)) {
    IPTC_Writer::ConvertToUTF8();
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v2 = (char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 16;
  if (v2 == (char *)this + 16)
  {
    *((unsigned char *)this + 46) = 1;
  }
  else
  {
    do
    {
      CFIndex v4 = *((unsigned int *)v2 + 11);
      if (v4)
      {
        ReconcileUtils::LocalToUTF8(*((const UInt8 **)v2 + 6), v4, &__p);
        IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v2 + 40));
        unsigned int v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v5 = __p.__r_.__value_.__r.__words[1];
        }
        *((_DWORD *)v2 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v5;
        unsigned int v6 = malloc_type_malloc(v5, 0xF500A414uLL);
        *((void *)v2 + 6) = v6;
        if (!v6)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 15;
          exception[1] = "Out of memory";
          *((unsigned char *)exception + 16) = 0;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memcpy(v6, p_p, *((unsigned int *)v2 + 11));
      }
      uint64_t v8 = (char *)*((void *)v2 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (char *)*((void *)v2 + 2);
          BOOL v10 = *(void *)v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v3);
    int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *((unsigned char *)this + 46) = 1;
    if (v11 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_18885D0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *IPTC_Writer::DeleteDataSet(uint64_t *this, int a2, uint64_t a3)
{
  unsigned int v3 = a2 + 2000;
  unsigned __int16 v26 = a2 + 2000;
  unsigned int v5 = this + 2;
  uint64_t v4 = this[2];
  if (v4)
  {
    uint64_t v6 = a3;
    uint64_t v7 = (uint64_t)this;
    uint64_t v8 = (uint64_t **)(this + 1);
    uint64_t v9 = this + 2;
    uint64_t v10 = this[2];
    do
    {
      unsigned int v11 = *(unsigned __int16 *)(v10 + 32);
      BOOL v12 = v11 >= v3;
      if (v11 >= v3) {
        __n128 v13 = (uint64_t *)v10;
      }
      else {
        __n128 v13 = (uint64_t *)(v10 + 8);
      }
      if (v12) {
        uint64_t v9 = (uint64_t *)v10;
      }
      uint64_t v10 = *v13;
    }
    while (*v13);
    do
    {
      unsigned int v14 = *(unsigned __int16 *)(v4 + 32);
      BOOL v15 = v3 >= v14;
      if (v3 >= v14) {
        int v16 = (uint64_t *)(v4 + 8);
      }
      else {
        int v16 = (uint64_t *)v4;
      }
      if (!v15) {
        unsigned int v5 = (uint64_t *)v4;
      }
      uint64_t v4 = *v16;
    }
    while (*v16);
    if (v9 != v5)
    {
      if ((a3 & 0x8000000000000000) == 0)
      {
        this = (uint64_t *)std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__count_multi<unsigned short>((uint64_t)v8, &v26);
        if ((uint64_t)this <= v6) {
          return this;
        }
        if (v6)
        {
          do
          {
            unsigned int v17 = (uint64_t *)v9[1];
            if (v17)
            {
              do
              {
                BOOL v18 = v17;
                unsigned int v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                BOOL v18 = (uint64_t *)v9[2];
                BOOL v19 = *v18 == (void)v9;
                uint64_t v9 = v18;
              }
              while (!v19);
            }
            uint64_t v9 = v18;
          }
          while (v6-- > 1);
        }
        else
        {
          BOOL v18 = v9;
        }
        uint64_t v21 = (uint64_t *)v18[1];
        if (v21)
        {
          do
          {
            unsigned int v5 = v21;
            uint64_t v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          unsigned int v5 = v18;
          do
          {
            uint64_t v22 = v5;
            unsigned int v5 = (uint64_t *)v5[2];
          }
          while ((uint64_t *)*v5 != v22);
        }
        uint64_t v9 = v18;
      }
      if (v9 != v5)
      {
        BOOL v23 = v9;
        do
        {
          IPTC_Manager::DisposeLooseValue(v7, (uint64_t)(v23 + 5));
          uint64_t v24 = (uint64_t *)v23[1];
          if (v24)
          {
            do
            {
              BOOL v25 = v24;
              uint64_t v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              BOOL v25 = (uint64_t *)v23[2];
              BOOL v19 = *v25 == (void)v23;
              BOOL v23 = v25;
            }
            while (!v19);
          }
          BOOL v23 = v25;
        }
        while (v25 != v5);
      }
      this = std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::erase(v8, v9, v5);
      *(unsigned char *)(v7 + 44) = 1;
    }
  }
  return this;
}

void IPTC_Writer::UpdateMemoryDataSets(IPTC_Writer *this)
{
  if (*((unsigned char *)this + 44))
  {
    uint64_t v2 = (char *)this + 16;
    if (*((unsigned char *)this + 46)) {
      unsigned int v3 = 15;
    }
    else {
      unsigned int v3 = 7;
    }
    uint64_t v4 = (char *)*((void *)this + 1);
    if (v4 != v2)
    {
      do
      {
        int v5 = *((unsigned __int16 *)v4 + 16);
        if (v5 != 1090 && v5 != 2000)
        {
          unsigned int v6 = *((_DWORD *)v4 + 11);
          unsigned int v7 = v3 + v6;
          unsigned int v8 = v7 + 5;
          unsigned int v3 = v7 + 9;
          if (!(v6 >> 15)) {
            unsigned int v3 = v8;
          }
        }
        uint64_t v9 = (char *)*((void *)v4 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = *(char **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (char *)*((void *)v4 + 2);
            BOOL v11 = *(void *)v10 == (void)v4;
            uint64_t v4 = v10;
          }
          while (!v11);
        }
        uint64_t v4 = v10;
      }
      while (v10 != v2);
    }
    uint64_t v12 = v3;
    __n128 v13 = (char *)malloc_type_malloc(v3, 0xDB788ECuLL);
    if (!v13)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 15;
      exception[1] = "Out of memory";
      *((unsigned char *)exception + 16) = 0;
    }
    unsigned int v14 = v13;
    BOOL v15 = v2;
    int v16 = v13;
    if (*((char **)this + 1) != v2)
    {
      int v16 = v13;
      BOOL v15 = (char *)*((void *)this + 1);
      while (!v15[40])
      {
        *int v16 = 28;
        v16[1] = v15[40];
        void v16[2] = v15[41];
        size_t v17 = *((unsigned int *)v15 + 11);
        if (v17 >> 15)
        {
          *(_DWORD *)(v16 + 5) = bswap32(v17);
          LOWORD(v18) = 1152;
          uint64_t v19 = 9;
        }
        else
        {
          unsigned int v18 = bswap32(v17) >> 16;
          uint64_t v19 = 5;
        }
        BOOL v20 = &v16[v19];
        *(_WORD *)(v16 + 3) = v18;
        memcpy(&v16[v19], *((const void **)v15 + 6), v17);
        uint64_t v21 = (char *)*((void *)v15 + 1);
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            uint64_t v21 = *(char **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (char *)*((void *)v15 + 2);
            BOOL v11 = *(void *)v22 == (void)v15;
            BOOL v15 = v22;
          }
          while (!v11);
        }
        int v16 = &v20[v17];
        BOOL v15 = v22;
        if (v22 == v2)
        {
          BOOL v15 = v2;
          break;
        }
      }
    }
    if (*((unsigned char *)this + 46))
    {
      *(void *)int v16 = 0x47251B03005A011CLL;
      v16 += 8;
    }
    if (v15 == v2)
    {
LABEL_47:
      BOOL v15 = v2;
    }
    else
    {
      while (1)
      {
        unsigned int v23 = v15[40];
        if (v23 > 1) {
          break;
        }
        if (v23 != 1) {
          IPTC_Writer::UpdateMemoryDataSets();
        }
        if (v15[41] != 90)
        {
          *int v16 = 28;
          v16[1] = v15[40];
          void v16[2] = v15[41];
          size_t v24 = *((unsigned int *)v15 + 11);
          if (v24 >> 15)
          {
            *(_DWORD *)(v16 + 5) = bswap32(v24);
            LOWORD(v25) = 1152;
            uint64_t v26 = 9;
          }
          else
          {
            unsigned int v25 = bswap32(v24) >> 16;
            uint64_t v26 = 5;
          }
          unsigned int v27 = &v16[v26];
          *(_WORD *)(v16 + 3) = v25;
          memcpy(&v16[v26], *((const void **)v15 + 6), v24);
          int v16 = &v27[v24];
        }
        BOOL v28 = (char *)*((void *)v15 + 1);
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            BOOL v28 = *(char **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (char *)*((void *)v15 + 2);
            BOOL v11 = *(void *)v29 == (void)v15;
            BOOL v15 = v29;
          }
          while (!v11);
        }
        BOOL v15 = v29;
        if (v29 == v2) {
          goto LABEL_47;
        }
      }
    }
    if (*((unsigned char *)this + 46)) {
      int v30 = 67109376;
    }
    else {
      int v30 = 33554944;
    }
    *(_DWORD *)(v16 + 3) = v30;
    *(_DWORD *)int v16 = 540;
    unsigned int v31 = v16 + 7;
    if (v15 != v2)
    {
      do
      {
        if (v15[40] <= 1u) {
          IPTC_Writer::UpdateMemoryDataSets();
        }
        if (*((_WORD *)v15 + 16) != 2000)
        {
          *unsigned int v31 = 28;
          v31[1] = v15[40];
          v31[2] = v15[41];
          size_t v32 = *((unsigned int *)v15 + 11);
          if (v32 >> 15)
          {
            *(_DWORD *)(v31 + 5) = bswap32(v32);
            LOWORD(v33) = 1152;
            uint64_t v34 = 9;
          }
          else
          {
            unsigned int v33 = bswap32(v32) >> 16;
            uint64_t v34 = 5;
          }
          uint64_t v35 = &v31[v34];
          *(_WORD *)(v31 + 3) = v33;
          memcpy(&v31[v34], *((const void **)v15 + 6), v32);
          unsigned int v31 = &v35[v32];
        }
        unsigned int v36 = (char *)*((void *)v15 + 1);
        if (v36)
        {
          do
          {
            BOOL v37 = v36;
            unsigned int v36 = *(char **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            BOOL v37 = (char *)*((void *)v15 + 2);
            BOOL v11 = *(void *)v37 == (void)v15;
            BOOL v15 = v37;
          }
          while (!v11);
        }
        BOOL v15 = v37;
      }
      while (v37 != v2);
    }
    if (v31 != &v14[v12]) {
      IPTC_Writer::UpdateMemoryDataSets();
    }
    IPTC_Manager::ParseMemoryDataSets(this, v14, v12, 0);
    if (*((_DWORD *)this + 10) != v12) {
      IPTC_Writer::UpdateMemoryDataSets();
    }
    *((unsigned char *)this + 45) = v12 != 0;
  }
}

uint64_t IPTC_Writer::IsChanged(IPTC_Writer *this)
{
  return *((unsigned __int8 *)this + 44);
}

void *std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__emplace_hint_multi<std::pair<unsigned short const,IPTC_Manager::DataSetInfo> &>(uint64_t **a1, void *a2, uint64_t a3)
{
  unsigned int v6 = operator new(0x38uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  *((void *)v6 + 6) = *(void *)(a3 + 16);
  uint64_t v9 = 0;
  leaf = (uint64_t **)std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__find_leaf(a1, a2, &v9, (unsigned __int16 *)v6 + 16);
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v9, leaf, (uint64_t *)v6);
  return v6;
}

void sub_18885D6DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__find_leaf(void *a1, void *a2, void *a3, unsigned __int16 *a4)
{
  uint64_t v4 = a1 + 1;
  if (a1 + 1 != a2)
  {
    unsigned int v5 = *a4;
    if (*((unsigned __int16 *)a2 + 16) < v5)
    {
      while (1)
      {
        uint64_t v6 = *v4;
        a2 = v4;
        if (!*v4) {
          break;
        }
        while (1)
        {
          uint64_t v4 = (void *)v6;
          if (*(unsigned __int16 *)(v6 + 32) >= v5) {
            break;
          }
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            goto LABEL_19;
          }
        }
      }
LABEL_20:
      *a3 = v4;
      return a2;
    }
  }
  uint64_t v7 = *a2;
  if ((void *)*a1 == a2)
  {
    uint64_t v9 = a2;
  }
  else
  {
    if (v7)
    {
      unsigned int v8 = (void *)*a2;
      do
      {
        uint64_t v9 = v8;
        unsigned int v8 = (void *)v8[1];
      }
      while (v8);
    }
    else
    {
      uint64_t v10 = a2;
      do
      {
        uint64_t v9 = (void *)v10[2];
        BOOL v11 = *v9 == (void)v10;
        uint64_t v10 = v9;
      }
      while (v11);
    }
    unsigned int v12 = *a4;
    if (v12 < *((unsigned __int16 *)v9 + 16))
    {
      while (1)
      {
        uint64_t v13 = *v4;
        a2 = v4;
        if (!*v4) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v4 = (void *)v13;
          if (v12 < *(unsigned __int16 *)(v13 + 32)) {
            break;
          }
          uint64_t v13 = *(void *)(v13 + 8);
          if (!v13)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
  }
  return a2;
}

uint64_t std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__count_multi<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unsigned int v3 = v4;
  if (!v4) {
    return 0;
  }
  unsigned int v5 = *a2;
  while (1)
  {
    unsigned int v6 = *((unsigned __int16 *)v3 + 16);
    if (v5 >= v6) {
      break;
    }
    uint64_t v2 = v3;
LABEL_7:
    unsigned int v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0;
    }
  }
  if (v6 < v5)
  {
    ++v3;
    goto LABEL_7;
  }
  uint64_t v9 = *v3;
  uint64_t v10 = v3;
  if (*v3)
  {
    uint64_t v10 = v3;
    do
    {
      unsigned int v11 = *(unsigned __int16 *)(v9 + 32);
      BOOL v12 = v11 >= v5;
      if (v11 >= v5) {
        uint64_t v13 = (uint64_t *)v9;
      }
      else {
        uint64_t v13 = (uint64_t *)(v9 + 8);
      }
      if (v12) {
        uint64_t v10 = (void *)v9;
      }
      uint64_t v9 = *v13;
    }
    while (*v13);
  }
  uint64_t v14 = v3[1];
  if (v14)
  {
    do
    {
      unsigned int v15 = *(unsigned __int16 *)(v14 + 32);
      BOOL v16 = v5 >= v15;
      if (v5 >= v15) {
        size_t v17 = (uint64_t *)(v14 + 8);
      }
      else {
        size_t v17 = (uint64_t *)v14;
      }
      if (!v16) {
        uint64_t v2 = (void *)v14;
      }
      uint64_t v14 = *v17;
    }
    while (*v17);
  }
  if (v10 == v2) {
    return 0;
  }
  uint64_t v7 = 0;
  do
  {
    unsigned int v18 = (void *)v10[1];
    if (v18)
    {
      do
      {
        uint64_t v19 = v18;
        unsigned int v18 = (void *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        uint64_t v19 = (void *)v10[2];
        BOOL v20 = *v19 == (void)v10;
        uint64_t v10 = v19;
      }
      while (!v20);
    }
    ++v7;
    uint64_t v10 = v19;
  }
  while (v19 != v2);
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      unsigned int v6 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(a1, v4);
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

void IPTC_Writer::ConvertToUTF8()
{
}

void IPTC_Writer::UpdateMemoryDataSets()
{
  __assert_rtn("UpdateMemoryDataSets", "IPTC_Support.cpp", 669, "this->iptcLength == newLength");
}

{
  __assert_rtn("UpdateMemoryDataSets", "IPTC_Support.cpp", 664, "dsPtr == (newContent + newLength)");
}

{
  __assert_rtn("UpdateMemoryDataSets", "IPTC_Support.cpp", 659, "currDS.recNum > 1");
}

{
  __assert_rtn("UpdateMemoryDataSets", "IPTC_Support.cpp", 638, "currDS.recNum == 1");
}

BOOL IsInternalProperty(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = a1;
  int v4 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    switch(*((unsigned char *)a1 + 23))
    {
      case 0x1C:
        if (*a1 == 0x6E2F2F3A70747468
          && a1[1] == 0x2E65626F64612E73
          && a1[2] == 0x2F7061782F6D6F63
          && *((_DWORD *)a1 + 6) == 791686705)
        {
          goto LABEL_139;
        }
        if (v4 != 28) {
          goto LABEL_123;
        }
        BOOL v8 = *a1 == 0x6E2F2F3A70747468 && a1[1] == 0x2E65626F64612E73;
        BOOL v9 = v8 && a1[2] == 0x2F6664702F6D6F63;
        if (!v9 || *((_DWORD *)a1 + 6) != 791883313) {
          goto LABEL_123;
        }
        goto LABEL_217;
      case 0x1D:
        if (*a1 == 0x6E2F2F3A70747468
          && a1[1] == 0x2E65626F64612E73
          && a1[2] == 0x666669742F6D6F63
          && *(unint64_t *)((char *)a1 + 21) == 0x2F302E312F666669)
        {
          goto LABEL_157;
        }
        if (v4 != 29) {
          goto LABEL_123;
        }
        BOOL v30 = *a1 == 0x6E2F2F3A70747468 && a1[1] == 0x2E65626F64612E73;
        BOOL v31 = v30 && a1[2] == 0x666978652F6D6F63;
        if (!v31 || *(unint64_t *)((char *)a1 + 21) != 0x2F302E312F666978) {
          goto LABEL_123;
        }
        goto LABEL_110;
      case 0x20:
        if (*a1 != 0x702F2F3A70747468
          || a1[1] != 0x2F67726F2E6C7275
          || a1[2] != 0x656D656C652F6364
          || a1[3] != 0x2F312E312F73746ELL)
        {
          goto LABEL_123;
        }
        goto LABEL_153;
      case 0x21:
        goto LABEL_86;
      default:
        goto LABEL_123;
    }
  }
  unint64_t v11 = a1[1];
  if (v11 != 28)
  {
    if (v11 == 32)
    {
      BOOL v12 = *(void *)*a1 == 0x702F2F3A70747468 && *(void *)(*a1 + 8) == 0x2F67726F2E6C7275;
      BOOL v13 = v12 && *(void *)(*a1 + 16) == 0x656D656C652F6364;
      if (v13 && *(void *)(*a1 + 24) == 0x2F312E312F73746ELL)
      {
LABEL_153:
        if (*((char *)a2 + 23) < 0)
        {
          unint64_t v61 = a2[1];
          if (v61 == 9 && *(void *)*a2 == 0x616D726F663A6364 && *(unsigned char *)(*a2 + 8) == 116) {
            return 1;
          }
          if (v61 != 11) {
            return 0;
          }
          uint64_t v2 = (unint64_t *)*a2;
        }
        else
        {
          int v46 = *((unsigned __int8 *)a2 + 23);
          if (v46 == 9) {
            return *a2 == 0x616D726F663A6364 && *((unsigned char *)a2 + 8) == 116;
          }
          if (v46 != 11) {
            return 0;
          }
        }
        return *v2 == 0x75676E616C3A6364 && *(unint64_t *)((char *)v2 + 3) == 0x65676175676E616CLL;
      }
    }
    goto LABEL_61;
  }
  if (*(void *)*a1 == 0x6E2F2F3A70747468
    && *(void *)(*a1 + 8) == 0x2E65626F64612E73
    && *(void *)(*a1 + 16) == 0x2F7061782F6D6F63
    && *(_DWORD *)(*a1 + 24) == 791686705)
  {
LABEL_139:
    if (*((char *)a2 + 23) < 0)
    {
      unint64_t v52 = a2[1];
      if (v52 == 11 && *(void *)*a2 == 0x657361423A706D78 && *(void *)(*a2 + 3) == 0x4C5255657361423ALL) {
        return 1;
      }
      if (v52 == 15)
      {
        if (*(void *)*a2 == 0x616572433A706D78 && *(void *)(*a2 + 7) == 0x6C6F6F54726F7461) {
          return 1;
        }
        unint64_t v52 = a2[1];
      }
      if (v52 != 10) {
        goto LABEL_263;
      }
      if (*(void *)*a2 == 0x6D726F463A706D78 && *(_WORD *)(*a2 + 8) == 29793) {
        return 1;
      }
      if (a2[1] != 10)
      {
LABEL_263:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "xmp:MetadataDate")) {
          return 1;
        }
        BOOL v37 = "xmp:ModifyDate";
        goto LABEL_126;
      }
      unsigned int v45 = (uint64_t *)*a2;
    }
    else
    {
      int v42 = *((unsigned __int8 *)a2 + 23);
      if (v42 != 10)
      {
        if (v42 == 11)
        {
          if (*a2 == 0x657361423A706D78 && *(unint64_t *)((char *)a2 + 3) == 0x4C5255657361423ALL) {
            return 1;
          }
        }
        else if (v42 == 15 {
               && *a2 == 0x616572433A706D78
        }
               && *(unint64_t *)((char *)a2 + 7) == 0x6C6F6F54726F7461)
        {
          return 1;
        }
        goto LABEL_263;
      }
      if (*a2 == 0x6D726F463A706D78 && *((_WORD *)a2 + 4) == 29793) {
        return 1;
      }
      unsigned int v45 = (uint64_t *)a2;
    }
    uint64_t v56 = *v45;
    int v57 = *((unsigned __int16 *)v45 + 4);
    if (v56 == 0x61636F4C3A706D78 && v57 == 25964) {
      return 1;
    }
    goto LABEL_263;
  }
  unint64_t v11 = a1[1];
  if (v11 != 28) {
    goto LABEL_61;
  }
  if (*(void *)*a1 == 0x6E2F2F3A70747468
    && *(void *)(*a1 + 8) == 0x2E65626F64612E73
    && *(void *)(*a1 + 16) == 0x2F6664702F6D6F63
    && *(_DWORD *)(*a1 + 24) == 791883313)
  {
LABEL_217:
    int v64 = *((char *)a2 + 23);
    if (v64 < 0)
    {
      if (a2[1] == 11)
      {
        int v67 = (uint64_t *)*a2;
        if (*(void *)*a2 == 0x657361423A666470 && *(void *)(*a2 + 3) == 0x4C5255657361423ALL) {
          return 1;
        }
        if (*v67 == 0x616572433A666470 && *(uint64_t *)((char *)v67 + 3) == 0x726F74616572433ALL) {
          return 1;
        }
        goto LABEL_274;
      }
    }
    else if (v64 == 11)
    {
      if (*a2 == 0x657361423A666470 && *(unint64_t *)((char *)a2 + 3) == 0x4C5255657361423ALL) {
        return 1;
      }
      BOOL v66 = *a2 == 0x616572433A666470 && *(unint64_t *)((char *)a2 + 3) == 0x726F74616572433ALL;
      int v67 = (uint64_t *)a2;
      if (v66) {
        return 1;
      }
LABEL_274:
      uint64_t v78 = *v67;
      uint64_t v79 = *(uint64_t *)((char *)v67 + 3);
      if (v78 == 0x44646F4D3A666470 && v79 == 0x65746144646F4D3ALL) {
        return 1;
      }
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "pdf:PDFVersion")) {
      return 1;
    }
    BOOL v37 = "pdf:Producer";
LABEL_126:
    BOOL result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v37);
    if (!result) {
      return result;
    }
    return 1;
  }
  if ((v4 & 0x80) == 0) {
    goto LABEL_123;
  }
LABEL_61:
  if (v11 != 29)
  {
LABEL_84:
    if (v11 == 33)
    {
      a1 = (unint64_t *)*a1;
LABEL_86:
      if (!memcmp(a1, "http://ns.adobe.com/exif/1.0/aux/", 0x21uLL)) {
        return 1;
      }
    }
    goto LABEL_123;
  }
  if (*(void *)*a1 == 0x6E2F2F3A70747468
    && *(void *)(*a1 + 8) == 0x2E65626F64612E73
    && *(void *)(*a1 + 16) == 0x666669742F6D6F63
    && *(void *)(*a1 + 21) == 0x2F302E312F666669)
  {
LABEL_157:
    if (*((char *)a2 + 23) < 0)
    {
      unint64_t v68 = a2[1];
      if (v68 != 11)
      {
        if (v68 == 21)
        {
          BOOL v69 = *(void *)*a2 == 0x616D493A66666974 && *(void *)(*a2 + 8) == 0x6972637365446567;
          if (v69 && *(void *)(*a2 + 13) == 0x6E6F697470697263) {
            return 0;
          }
        }
LABEL_244:
        __int16 v51 = "tiff:Copyright";
        return !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v51);
      }
      uint64_t v48 = (uint64_t *)*a2;
    }
    else
    {
      int v47 = *((unsigned __int8 *)a2 + 23);
      uint64_t v48 = (uint64_t *)a2;
      if (v47 != 11)
      {
        if (v47 == 21)
        {
          BOOL v49 = *a2 == 0x616D493A66666974 && a2[1] == 0x6972637365446567;
          if (v49 && *(unint64_t *)((char *)a2 + 13) == 0x6E6F697470697263) {
            return 0;
          }
        }
        goto LABEL_244;
      }
    }
    uint64_t v71 = *v48;
    uint64_t v72 = *(uint64_t *)((char *)v48 + 3);
    if (v71 == 0x7472413A66666974 && v72 == 0x7473697472413A66) {
      return 0;
    }
    goto LABEL_244;
  }
  unint64_t v11 = a1[1];
  if (v11 != 29) {
    goto LABEL_84;
  }
  if (*(void *)*a1 == 0x6E2F2F3A70747468
    && *(void *)(*a1 + 8) == 0x2E65626F64612E73
    && *(void *)(*a1 + 16) == 0x666978652F6D6F63
    && *(void *)(*a1 + 21) == 0x2F302E312F666978)
  {
LABEL_110:
    int v33 = *((char *)a2 + 23);
    if (v33 < 0)
    {
      if (a2[1] != 16) {
        return 1;
      }
      uint64_t v2 = (unint64_t *)*a2;
    }
    else if (v33 != 16)
    {
      return 1;
    }
    unint64_t v81 = 0x657869663A557365;
    unint64_t v82 = bswap64(*v2);
    if (v82 == 0x657869663A557365 && (unint64_t v81 = 0x72436F6D6D656E74, v82 = bswap64(v2[1]), v82 == 0x72436F6D6D656E74))
    {
      int v83 = 0;
    }
    else if (v82 < v81)
    {
      int v83 = -1;
    }
    else
    {
      int v83 = 1;
    }
    return v83 != 0;
  }
  if ((v4 & 0x80) != 0) {
    goto LABEL_84;
  }
LABEL_123:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/photoshop/1.0/"))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "photoshop:ICCProfile")) {
      return 1;
    }
    BOOL v37 = "photoshop:TextLayers";
    goto LABEL_126;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/camera-raw-settings/1.0/"))
  {
    return 1;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xmp/1.0/DynamicMedia/"))
  {
    uint64_t v39 = (uint64_t *)kLastExternalxmpDM;
    if (!kLastExternalxmpDM)
    {
      uint64_t v39 = (uint64_t *)&unk_1E90FF0E8;
      do
      {
        uint64_t v40 = v39[1];
        ++v39;
      }
      while (v40);
      kLastExternalxmpDM = (uint64_t)v39;
    }
    if (*((char *)v2 + 23) >= 0) {
      uint64_t v41 = (uint64_t)v2;
    }
    else {
      uint64_t v41 = *v2;
    }
    uint64_t v84 = v41;
    return !std::binary_search[abi:ne180100]<char const**,char const*,int (*)(char const*,char const*)>((uint64_t *)kExternalxmpDM, v39, &v84, (unsigned int (*)(uint64_t, uint64_t))CharStarLess);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xmp/1.0/Script/"))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "xmpScript:action")
      || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "xmpScript:character")
      || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "xmpScript:dialog")
      || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "xmpScript:sceneSetting"))
    {
      return 0;
    }
    __int16 v51 = "xmpScript:sceneTimeOfDay";
    return !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v51);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/bwf/bext/1.0/"))
  {
    int v59 = "bext:version";
    int v60 = v2;
  }
  else
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/StockPhoto/1.0/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/mm/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/t/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/t/pg/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/g/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/g/img/"))
    {
      return 1;
    }
    int v59 = "http://ns.adobe.com/xap/1.0/sType/Font#";
    int v60 = v3;
  }

  return std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v60, v59);
}

BOOL std::binary_search[abi:ne180100]<char const**,char const*,int (*)(char const*,char const*)>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int (*a4)(uint64_t, uint64_t))
{
  if (a2 == a1) {
    return 0;
  }
  uint64_t v7 = a1;
  unint64_t v8 = a2 - a1;
  do
  {
    BOOL v9 = &v7[v8 >> 1];
    uint64_t v11 = *v9;
    uint64_t v10 = v9 + 1;
    if (a4(v11, *a3))
    {
      uint64_t v7 = v10;
      v8 += ~(v8 >> 1);
    }
    else
    {
      v8 >>= 1;
    }
  }
  while (v8);
  return v7 != a2 && a4(*a3, *v7) == 0;
}

uint64_t CharStarLess(const char *a1, const char *a2)
{
  return strcmp(a1, a2) >> 31;
}

void XMPUtils::CatenateArrayItems_v2(const void *a1, char *a2, unsigned char *a3, const char *a4, const char *a5, unsigned int a6, std::string *a7)
{
  if (!sUseNewCoreAPIs) {
    return;
  }
  if (!v13) {
    __cxa_bad_cast();
  }
  if (!a2 || !a3) {
    XMPUtils::CatenateArrayItems_v2();
  }
  if (!a4 || !a5 || !a7) {
    XMPUtils::CatenateArrayItems_v2();
  }
  uint64_t v14 = v13;
  unsigned int v39 = a6;
  uint64_t v55 = 0;
  int v54 = 0;
  unint64_t v52 = 0;
  uint64_t v53 = 0;
  char v50 = 0;
  unint64_t v51 = 0;
  std::string::size_type v49 = 0;
  int v48 = 0;
  uint64_t v46 = 0;
  int v47 = 0;
  size_t v15 = strlen(a4);
  if (!v15) {
    goto LABEL_76;
  }
  size_t v16 = v15;
  char v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = "Separator can have only one semicolon";
  do
  {
    while (1)
    {
      ClassifyCharacter(a4, v18, &v54, &v55, &v53);
      v18 += v55;
      if (v54 == 1) {
        break;
      }
      if (v54 != 3)
      {
        uint64_t v19 = "Separator can have only spaces and one semicolon";
        goto LABEL_75;
      }
      if (v17) {
        goto LABEL_75;
      }
      char v17 = 1;
      if (v18 >= v16) {
        goto LABEL_18;
      }
    }
  }
  while (v18 < v16);
  if ((v17 & 1) == 0)
  {
LABEL_76:
    uint64_t v19 = "Separator must have one semicolon";
    goto LABEL_75;
  }
LABEL_18:
  size_t v20 = strlen(a5);
  ClassifyCharacter(a5, 0, &v54, &v55, (uint64_t *)&v52);
  if (v54 != 4) {
    goto LABEL_77;
  }
  uint64_t v21 = v55;
  if (v55 == v20)
  {
    uint64_t v22 = v52;
    unint64_t v51 = v52;
    unint64_t v23 = v52;
    goto LABEL_24;
  }
  ClassifyCharacter(a5, v55, &v54, &v55, (uint64_t *)&v51);
  if (v54 != 4)
  {
LABEL_77:
    uint64_t v19 = "Invalid quoting character";
    goto LABEL_75;
  }
  if (v55 + v21 != v20)
  {
    uint64_t v19 = "Quoting string too long";
LABEL_75:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = v19;
    *((unsigned char *)exception + 16) = 0;
  }
  unint64_t v23 = v51;
  uint64_t v22 = v52;
LABEL_24:
  if (v23 != GetClosingQuote(v22))
  {
    uint64_t v19 = "Mismatched quote pair";
    goto LABEL_75;
  }
  std::string::erase(a7, 0, 0xFFFFFFFFFFFFFFFFLL);
  memset(v45, 0, sizeof(v45));
  ExpandXPath(a2, a3, v45);
  XMPUtils::FindCnstNode(v14 + 50, v45, &v49, &v48, 0);
  if (v49)
  {
    if ((v48 & 0xA00) != 0x200)
    {
      BOOL v37 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)BOOL v37 = 4;
      v37[1] = "Named property must be non-alternate array";
      *((unsigned char *)v37 + 16) = 0;
    }
    __p[0] = (void *)v49;
    __p[1] = v50;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t NodeChildCount = XMPUtils::GetNodeChildCount(__p);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (NodeChildCount)
    {
      long long v44 = 0uLL;
      __p[0] = (void *)v49;
      __p[1] = v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      XMPUtils::GetNodeChildIterator(__p, &v44);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      if ((XMPUtils::GetIXMPOptions(&v46) & 0x1F00) != 0)
      {
        unint64_t v38 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)unint64_t v38 = 4;
        v38[1] = "Array items must be simple";
        *((unsigned char *)v38 + 16) = 0;
      }
      (*(void (**)(void **__return_ptr))(*(void *)v44 + 48))(__p);
      unsigned int v25 = (std::__shared_weak_count *)__p[1];
      (*(void (**)(void **__return_ptr))(*(void *)__p[0] + 232))(__p);
      uint64_t v26 = (std::__shared_weak_count *)__p[1];
      (*(void (**)(uint64_t *__return_ptr))(*(void *)__p[0] + 504))(&v56);
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 192))(v56);
      MEMORY[0x18C11BE10](a7, v27);
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      ApplyQuotes((const char *)a7, v22, v23, (v39 >> 28) & 1);
      (*(void (**)(void **__return_ptr))(*(void *)v44 + 56))(__p);
      BOOL v28 = (std::__shared_weak_count *)*((void *)&v44 + 1);
      long long v44 = *(_OWORD *)__p;
      if (v28)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        uint64_t i = (void *)v44;
        if ((void)v44) {
          goto LABEL_47;
        }
      }
      else
      {
        for (uint64_t i = __p[0]; __p[0]; uint64_t i = __p[0])
        {
          while (1)
          {
LABEL_47:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v43 = 0;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)i + 48))(&v56);
            BOOL v30 = v57;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v56 + 232))(&v56);
            BOOL v31 = v57;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v56 + 504))(&v40);
            size_t v32 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v40 + 192))(v40);
            std::string::basic_string[abi:ne180100]<0>(__p, v32);
            if (v41) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
            }
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
            ApplyQuotes((const char *)__p, v22, v23, (v39 >> 28) & 1);
            std::string::append(a7, a4);
            if (v43 >= 0) {
              int v33 = __p;
            }
            else {
              int v33 = (void **)__p[0];
            }
            if (v43 >= 0) {
              std::string::size_type v34 = HIBYTE(v43);
            }
            else {
              std::string::size_type v34 = (std::string::size_type)__p[1];
            }
            std::string::append(a7, (const std::string::value_type *)v33, v34);
            if (SHIBYTE(v43) < 0) {
              operator delete(__p[0]);
            }
            (*(void (**)(void **__return_ptr))(*(void *)v44 + 56))(__p);
            uint64_t v35 = (std::__shared_weak_count *)*((void *)&v44 + 1);
            long long v44 = *(_OWORD *)__p;
            if (!v35) {
              break;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            uint64_t i = (void *)v44;
            if (!(void)v44) {
              goto LABEL_65;
            }
          }
        }
      }
LABEL_65:
      if (*((void *)&v44 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
      }
    }
  }
  __p[0] = v45;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
}

void sub_18885ED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20,std::__shared_weak_count *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  a20 = &a22;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  _Unwind_Resume(a1);
}

const char *ClassifyCharacter(const char *__s, uint64_t a2, int *a3, void *a4, uint64_t *a5)
{
  *a3 = 0;
  uint64_t v8 = __s[a2];
  if ((__s[a2] & 0x80000000) == 0)
  {
    *a4 = 1;
    *a5 = v8;
    if (v8 >= 0x23)
    {
      if (v8 != 44)
      {
        if (v8 != 59) {
          return __s;
        }
        goto LABEL_5;
      }
LABEL_43:
      int v9 = 2;
      goto LABEL_50;
    }
    unsigned __int8 v18 = v8 - 32;
    if (v18 < 3u)
    {
      int v9 = dword_1889AF97C[(char)v18];
      goto LABEL_50;
    }
LABEL_49:
    int v9 = 5;
    goto LABEL_50;
  }
  uint64_t v11 = __s;
  *a4 = 0;
  *a5 = v8;
  do
  {
    ++*a4;
    uint64_t v12 = *a5;
    uint64_t v13 = 2 * *a5;
    *a5 = v13;
  }
  while ((v12 & 0x40) != 0);
  unint64_t v14 = *a4 + a2;
  __s = (const char *)strlen(__s);
  if (v14 > (unint64_t)__s) {
    ClassifyCharacter();
  }
  *a5 = v13 & 0x7E;
  unint64_t v15 = (unint64_t)(v13 & 0x7E) >> *a4;
  *a5 = v15;
  unint64_t v16 = a2 + 1;
  if (a2 + 1 >= (unint64_t)(*a4 + a2))
  {
    unint64_t v17 = v15;
  }
  else
  {
    do
    {
      unint64_t v17 = v11[v16] & 0x3F | (v15 << 6);
      *a5 = v17;
      ++v16;
      unint64_t v15 = v17;
    }
    while (v16 < *a4 + a2);
  }
  unint64_t v19 = v17 >> 8;
  if ((int)(v17 >> 8) <= 31)
  {
    switch((int)v19)
    {
      case 0:
        if ((v17 | 0x10) == 0xBB) {
          goto LABEL_18;
        }
        break;
      case 3:
        if (v17 == 894) {
          goto LABEL_5;
        }
        break;
      case 5:
        if (v17 == 1373) {
          goto LABEL_43;
        }
        break;
      case 6:
        if (v17 == 1548) {
          goto LABEL_43;
        }
        if (v17 == 1563) {
          goto LABEL_5;
        }
        break;
      default:
        return __s;
    }
    return __s;
  }
  if ((int)v19 <= 253)
  {
    if (v19 == 32)
    {
      if (v17 - 0x2000 < 0xC) {
        goto LABEL_41;
      }
      int v9 = 4;
      if (v17 == 8213 || (v17 & 0xFFFFFFFFFFFFFFF8) == 0x2018) {
        goto LABEL_50;
      }
      if (v17 - 8232 < 2) {
        goto LABEL_49;
      }
      if (v17 - 8249 > 1) {
        return __s;
      }
    }
    else
    {
      if (v19 != 48) {
        return __s;
      }
      if (v17 == 12288) {
        goto LABEL_41;
      }
      if (v17 == 12289) {
        goto LABEL_43;
      }
      if (v17 >> 3 != 1537)
      {
        if (v17 != 12351)
        {
          if (v17 - 12317 >= 3) {
            return __s;
          }
          goto LABEL_18;
        }
LABEL_41:
        int v9 = 1;
        goto LABEL_50;
      }
    }
LABEL_18:
    int v9 = 4;
    goto LABEL_50;
  }
  if (v19 == 254)
  {
    if (v17 - 65104 < 2) {
      goto LABEL_43;
    }
    uint64_t v20 = 65108;
  }
  else
  {
    if (v19 != 255) {
      return __s;
    }
    int v9 = 2;
    if (v17 == 65292 || v17 == 65380) {
      goto LABEL_50;
    }
    uint64_t v20 = 65307;
  }
  if (v17 == v20)
  {
LABEL_5:
    int v9 = 3;
LABEL_50:
    *a3 = v9;
  }
  return __s;
}

uint64_t GetClosingQuote(uint64_t result)
{
  if (result <= 8248)
  {
    if (result > 8212)
    {
      switch(result)
      {
        case 8213:
          BOOL result = 8213;
          break;
        case 8216:
          BOOL result = 8217;
          break;
        case 8218:
          BOOL result = 8219;
          break;
        case 8220:
          BOOL result = 8221;
          break;
        case 8222:
          BOOL result = 8223;
          break;
        default:
          return 0;
      }
      return result;
    }
    switch(result)
    {
      case 34:
        return result;
      case 171:
        return 187;
      case 187:
        return 171;
    }
    return 0;
  }
  if (result <= 12295)
  {
    if (result == 8249) {
      return 8250;
    }
    if (result == 8250) {
      return 8249;
    }
    return 0;
  }
  switch(result)
  {
    case 12296:
      BOOL result = 12297;
      break;
    case 12297:
    case 12299:
    case 12301:
      return 0;
    case 12298:
      BOOL result = 12299;
      break;
    case 12300:
      BOOL result = 12301;
      break;
    case 12302:
      BOOL result = 12303;
      break;
    default:
      if (result != 12317) {
        return 0;
      }
      BOOL result = 12319;
      break;
  }
  return result;
}

void ApplyQuotes(const char *a1, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v7 = (std::string *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  std::string::size_type __n = 0;
  int v23 = 0;
  uint64_t v22 = 0;
  ClassifyCharacter(a1, 0, &v23, &__n, &v22);
  unint64_t v8 = 0;
  if (v23 != 4)
  {
    BOOL v10 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v8 >= v7->__r_.__value_.__l.__size_) {
          goto LABEL_21;
        }
        uint64_t v11 = (const char *)v7->__r_.__value_.__r.__words[0];
      }
      else
      {
        unint64_t size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        uint64_t v11 = (const char *)v7;
        if (v8 >= size) {
          goto LABEL_22;
        }
      }
      ClassifyCharacter(v11, v8, &v23, &__n, &v22);
      switch(v23)
      {
        case 1:
          if (v10) {
            goto LABEL_4;
          }
          break;
        case 2:
          if (!a4) {
            goto LABEL_4;
          }
          break;
        case 3:
        case 5:
          goto LABEL_4;
      }
      v8 += __n;
      BOOL v10 = v23 == 1;
    }
  }
LABEL_4:
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0) {
LABEL_21:
  }
    unint64_t size = v7->__r_.__value_.__l.__size_;
  else {
    unint64_t size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  }
LABEL_22:
  if (v8 >= size) {
    return;
  }
  unint64_t v12 = 0;
  memset(&__str, 0, sizeof(__str));
  do
  {
    uint64_t v13 = (const char *)v7;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v13 = (const char *)v7->__r_.__value_.__r.__words[0];
    }
    ClassifyCharacter(v13, v12, &v23, &__n, &v22);
    if (v23 == 4) {
      break;
    }
    ++v12;
  }
  while (v12 <= v8);
  CodePointToUTF8(a2, (uint64_t)&__str);
  std::string::append(&__str, v7, 0, v12);
  while ((SHIBYTE(v7->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    unint64_t v14 = (const char *)v7;
    if (v12 >= HIBYTE(v7->__r_.__value_.__r.__words[2])) {
      goto LABEL_41;
    }
LABEL_34:
    ClassifyCharacter(v14, v12, &v23, &__n, &v22);
    std::string::size_type v15 = __n;
    std::string::append(&__str, v7, v12, __n);
    if (v23 == 4 && (v22 == a2 || v22 == a3 || a2 == 12317 && (v22 & 0xFFFFFFFFFFFFFFFELL) == 0x301E)) {
      std::string::append(&__str, v7, v12, v15);
    }
    v12 += v15;
  }
  if (v12 < v7->__r_.__value_.__l.__size_)
  {
    unint64_t v14 = (const char *)v7->__r_.__value_.__r.__words[0];
    goto LABEL_34;
  }
LABEL_41:
  std::string __p = 0;
  std::string::size_type v19 = 0;
  uint64_t v20 = 0;
  CodePointToUTF8(a3, (uint64_t)&__p);
  if (v20 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v20 >= 0) {
    std::string::size_type v17 = HIBYTE(v20);
  }
  else {
    std::string::size_type v17 = v19;
  }
  std::string::append(&__str, p_p, v17);
  std::string::operator=(v7, &__str);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_18885F51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XMPUtils::CatenateArrayItems(void *a1, char *a2, unsigned char *a3, char *__s, const char *a5, unsigned int a6, std::string *a7)
{
  if (!sUseNewCoreAPIs)
  {
    if (!a2 || !a3) {
      XMPUtils::CatenateArrayItems();
    }
    if (!__s || !a5 || !a7) {
      XMPUtils::CatenateArrayItems();
    }
    uint64_t v44 = 0;
    int v43 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    size_t v14 = strlen(__s);
    if (!v14) {
      goto LABEL_52;
    }
    size_t v15 = v14;
    char v16 = 0;
    unint64_t v17 = 0;
    do
    {
      while (1)
      {
        ClassifyCharacter(__s, v17, &v43, &v44, &v42);
        v17 += v44;
        if (v43 == 1) {
          break;
        }
        if (v43 != 3)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          uint64_t v35 = "Separator can have only spaces and one semicolon";
          goto LABEL_50;
        }
        if (v16)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          uint64_t v35 = "Separator can have only one semicolon";
          goto LABEL_50;
        }
        char v16 = 1;
        if (v17 >= v15) {
          goto LABEL_20;
        }
      }
    }
    while (v17 < v15);
    if ((v16 & 1) == 0)
    {
LABEL_52:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      uint64_t v35 = "Separator must have one semicolon";
      goto LABEL_50;
    }
LABEL_20:
    size_t v18 = strlen(a5);
    ClassifyCharacter(a5, 0, &v43, &v44, (uint64_t *)&v41);
    if (v43 == 4)
    {
      uint64_t v19 = v44;
      if (v44 == v18)
      {
        unint64_t v20 = v41;
        uint64_t v21 = v41;
        goto LABEL_26;
      }
      ClassifyCharacter(a5, v44, &v43, &v44, &v40);
      if (v43 == 4)
      {
        if (v44 + v19 != v18)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          uint64_t v35 = "Quoting string too long";
          goto LABEL_50;
        }
        uint64_t v21 = v40;
        unint64_t v20 = v41;
LABEL_26:
        if (v21 == GetClosingQuote(v20))
        {
          std::string::erase(a7, 0, 0xFFFFFFFFFFFFFFFFLL);
          memset(v39, 0, sizeof(v39));
          ExpandXPath(a2, a3, (uint64_t *)v39);
          uint64_t Node = FindNode(a1 + 28, v39, 0, 0, 0);
          uint64_t v23 = Node;
          if (Node)
          {
            if ((*(_DWORD *)(Node + 8) & 0xA00) != 0x200)
            {
              uint64_t v26 = "Named property must be non-alternate array";
              goto LABEL_57;
            }
            size_t v24 = *(uint64_t **)(Node + 72);
            if (v24 != *(uint64_t **)(Node + 80))
            {
              uint64_t v25 = *v24;
              uint64_t v26 = "Array items must be simple";
              if ((*(unsigned char *)(v25 + 9) & 0x1F) == 0)
              {
                std::string::operator=(a7, (const std::string *)(v25 + 40));
                int v27 = (a6 >> 28) & 1;
                ApplyQuotes((const char *)a7, v20, v21, v27);
                uint64_t v28 = *(void *)(v23 + 80) - *(void *)(v23 + 72);
                if (v28 != 8)
                {
                  uint64_t v29 = v28 >> 3;
                  uint64_t v30 = 1;
                  do
                  {
                    uint64_t v31 = *(void *)(*(void *)(v23 + 72) + 8 * v30);
                    if ((*(unsigned char *)(v31 + 9) & 0x1F) != 0)
                    {
                      unsigned int v36 = __cxa_allocate_exception(0x18uLL);
                      *(_DWORD *)unsigned int v36 = 4;
                      v36[1] = "Array items must be simple";
                      *((unsigned char *)v36 + 16) = 0;
                    }
                    memset(&__p, 0, sizeof(__p));
                    if (*(char *)(v31 + 63) < 0) {
                      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v31 + 40), *(void *)(v31 + 48));
                    }
                    else {
                      std::string __p = *(std::string *)(v31 + 40);
                    }
                    ApplyQuotes((const char *)&__p, v20, v21, v27);
                    std::string::append(a7, __s);
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      p_p = &__p;
                    }
                    else {
                      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = __p.__r_.__value_.__l.__size_;
                    }
                    std::string::append(a7, (const std::string::value_type *)p_p, size);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    ++v30;
                  }
                  while (v29 != v30);
                }
                goto LABEL_46;
              }
LABEL_57:
              BOOL v37 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)BOOL v37 = 4;
              v37[1] = v26;
              *((unsigned char *)v37 + 16) = 0;
            }
          }
LABEL_46:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          return;
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        uint64_t v35 = "Mismatched quote pair";
LABEL_50:
        exception[1] = v35;
        *((unsigned char *)exception + 16) = 0;
      }
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    uint64_t v35 = "Invalid quoting character";
    goto LABEL_50;
  }

  XMPUtils::CatenateArrayItems_v2(a1, a2, a3, __s, a5, a6, a7);
}

void sub_18885F9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::string __p = &a16;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void XMPUtils::SeparateArrayItems_v2(XMPUtils *this, XMPMeta *a2, char *a3, const char *a4, char *a5, const char *a6)
{
  int v7 = (int)a4;
  BOOL v10 = 0;
  if (this && sUseNewCoreAPIs) {
  if (!a2 || !a3 || !a5)
  }
    XMPUtils::SeparateArrayItems_v2();
  memset(&v126, 0, sizeof(v126));
  std::string::size_type v124 = 0;
  uint64_t v125 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v121 = 0;
  int v101 = v7;
  unsigned int v120 = 0;
  unsigned int v11 = VerifySetOptions(v7 & 0xEFFFFFFF, 0);
  if ((v11 & 0xFFFFE1FF) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    exception[1] = "Options can only provide array form";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  ExpandXPath((char *)a2, a3, &v117);
  long long v116 = 0uLL;
  if (!XMPUtils::FindCnstNode(v10 + 50, &v117, (std::string::size_type *)&v116, &v120, 0))
  {
    memset(&__str, 0, 32);
    uint64_t v14 = v118;
    if (*(char *)(v118 - 9) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)(v118 - 32), *(void *)(v118 - 24));
    }
    else
    {
      long long v15 = *(_OWORD *)(v118 - 32);
      __str.__end_ = *(std::__split_buffer<std::string>::pointer *)(v118 - 16);
      *(_OWORD *)&__str.__first_ = v15;
    }
    LODWORD(__str.__end_cap_.__value_) = *(_DWORD *)(v14 - 8);
    memset(&v115, 0, sizeof(v115));
    if (SHIBYTE(__str.__end_) < 0)
    {
      std::string::__init_copy_ctor_external(&v115, (const std::string::value_type *)__str.__first_, (std::string::size_type)__str.__begin_);
    }
    else
    {
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__first_;
      v115.__r_.__value_.__r.__words[2] = (std::string::size_type)__str.__end_;
    }
    v104[0] = 0;
    v104[1] = 0;
    LODWORD(v103) = 0;
    if (XMPUtils::FindNode(v10 + 50, &v117, 1, v11, (uint64_t)v104, &v103, 1u))
    {
      uint64_t v112 = 0;
      std::string v113 = 0;
      int64_t v114 = 0;
      std::string __p = 0;
      std::string v110 = 0;
      uint64_t v111 = 0;
      long long v108 = 0uLL;
      AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v108);
      unsigned int v120 = v11;
      XMPUtils::GetNameSpaceAndNameFromStepValue((const std::string *)&__str, (uint64_t)&v108, (uint64_t)&v112, (uint64_t)&__p);
      if ((v120 & 0x800) == 0)
      {
        if ((v120 & 0x400) == 0)
        {
          if ((v120 & 0x200) != 0)
          {
            if (v114 >= 0) {
              char v16 = (AdobeXMPCore::IArrayNode_v1 *)&v112;
            }
            else {
              char v16 = (AdobeXMPCore::IArrayNode_v1 *)v112;
            }
            if (v114 >= 0) {
              unint64_t v17 = (char *)HIBYTE(v114);
            }
            else {
              unint64_t v17 = v113;
            }
            if (v111 >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if (v111 >= 0) {
              uint64_t v19 = (const char *)HIBYTE(v111);
            }
            else {
              uint64_t v19 = v110;
            }
            AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode(v16, v17, (unint64_t)p_p, v19);
          }
          uint64_t v100 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)uint64_t v100 = 102;
          v100[1] = "Failure creating array node";
          *((unsigned char *)v100 + 16) = 0;
        }
        if (v114 >= 0) {
          size_t v24 = (AdobeXMPCore::IArrayNode_v1 *)&v112;
        }
        else {
          size_t v24 = (AdobeXMPCore::IArrayNode_v1 *)v112;
        }
        if (v114 >= 0) {
          uint64_t v25 = (char *)HIBYTE(v114);
        }
        else {
          uint64_t v25 = v113;
        }
        if (v111 >= 0) {
          uint64_t v26 = &__p;
        }
        else {
          uint64_t v26 = __p;
        }
        if (v111 >= 0) {
          int v27 = (const char *)HIBYTE(v111);
        }
        else {
          int v27 = v110;
        }
        AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(v24, v25, (unint64_t)v26, v27);
      }
      if (v114 >= 0) {
        unint64_t v20 = (AdobeXMPCore::IArrayNode_v1 *)&v112;
      }
      else {
        unint64_t v20 = (AdobeXMPCore::IArrayNode_v1 *)v112;
      }
      if (v114 >= 0) {
        uint64_t v21 = (char *)HIBYTE(v114);
      }
      else {
        uint64_t v21 = v113;
      }
      if (v111 >= 0) {
        uint64_t v22 = &__p;
      }
      else {
        uint64_t v22 = __p;
      }
      if (v111 >= 0) {
        uint64_t v23 = (const char *)HIBYTE(v111);
      }
      else {
        uint64_t v23 = v110;
      }
      AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode(v20, v21, (unint64_t)v22, v23);
    }
    uint64_t v99 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)uint64_t v99 = 102;
    v99[1] = "Failure creating array node";
    *((unsigned char *)v99 + 16) = 0;
  }
  unint64_t v12 = "Named property must be non-alternate array";
  if ((v120 & 0x1E00) == 0 || (v120 & 0x800) != 0)
  {
LABEL_14:
    uint64_t v13 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)uint64_t v13 = 102;
    v13[1] = v12;
    *((unsigned char *)v13 + 16) = 0;
  }
  if (v11 && v11 != (v120 & 0x1E00))
  {
    unint64_t v12 = "Mismatch of specified and existing array form";
    goto LABEL_14;
  }
  *(_OWORD *)&__str.__first_ = v116;
  if (*((void *)&v116 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t NodeChildCount = XMPUtils::GetNodeChildCount(&__str);
  if (__str.__begin_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__begin_);
  }
  memset(&v115, 0, sizeof(v115));
  uint64_t v112 = 0;
  std::string v113 = 0;
  int64_t v114 = 0;
  std::string __p = 0;
  std::string v110 = 0;
  uint64_t v111 = 0;
  LOBYTE(__str.__first_) = 0;
  std::vector<BOOL>::vector(&__p, NodeChildCount, (unsigned __int8 *)&__str);
  long long v108 = 0uLL;
  *(_OWORD *)&__str.__first_ = v116;
  if (*((void *)&v116 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v116 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  XMPUtils::GetNodeChildIterator(&__str, &v108);
  if (__str.__begin_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__begin_);
  }
  std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)v108;
  if ((void)v108)
  {
    do
    {
      while (1)
      {
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(first->__r_.__value_.__r.__words[0] + 48))(&__str);
        std::vector<std::string>::pointer begin = (std::__shared_weak_count *)__str.__begin_;
        (*((void (**)(std::__split_buffer<std::string> *__return_ptr))__str.__first_->__r_.__value_.__l.__data_
         + 29))(&__str);
        uint64_t v30 = (std::__shared_weak_count *)__str.__begin_;
        (*((void (**)(uint64_t *__return_ptr))__str.__first_->__r_.__value_.__l.__data_ + 63))(&v106);
        uint64_t v31 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v106 + 192))(v106);
        std::string::basic_string[abi:ne180100]<0>(v104, v31);
        std::string::size_type size = (_OWORD *)v115.__r_.__value_.__l.__size_;
        if (v115.__r_.__value_.__l.__size_ >= v115.__r_.__value_.__r.__words[2])
        {
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v115.__r_.__value_.__l.__size_ - v115.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v35 = v34 + 1;
          if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556
             * ((uint64_t)(v115.__r_.__value_.__r.__words[2] - v115.__r_.__value_.__r.__words[0]) >> 3) > v35)
            unint64_t v35 = 0x5555555555555556
                * ((uint64_t)(v115.__r_.__value_.__r.__words[2] - v115.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v115.__r_.__value_.__r.__words[2] - v115.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v36 = v35;
          }
          __str.__end_cap_.__value_ = (std::allocator<std::string> *)&v115.__r_.__value_.__r.__words[2];
          if (v36) {
            BOOL v37 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v115.__r_.__value_.__r.__words[2], v36);
          }
          else {
            BOOL v37 = 0;
          }
          unint64_t v38 = v37 + v34;
          __str.__first_ = v37;
          __str.__begin_ = v38;
          __str.__end_cap_.__value_ = &v37[v36];
          long long v39 = *(_OWORD *)v104;
          v38->__r_.__value_.__r.__words[2] = v105;
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
          v104[1] = 0;
          std::string::size_type v105 = 0;
          v104[0] = 0;
          __str.__end_ = v38 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v115, &__str);
          std::string::size_type v40 = v115.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&__str);
          v115.__r_.__value_.__l.__size_ = v40;
          if (SHIBYTE(v105) < 0) {
            operator delete(v104[0]);
          }
        }
        else
        {
          long long v33 = *(_OWORD *)v104;
          *(void *)(v115.__r_.__value_.__l.__size_ + 16) = v105;
          _OWORD *size = v33;
          v104[1] = 0;
          std::string::size_type v105 = 0;
          v104[0] = 0;
          v115.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
        }
        if (v107) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v107);
        }
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        if (begin) {
          std::__shared_weak_count::__release_shared[abi:ne180100](begin);
        }
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(void *)v108 + 48))(&__str);
        unint64_t v41 = (std::__shared_weak_count *)__str.__begin_;
        int v42 = (*((uint64_t (**)(std::__split_buffer<std::string>::pointer))__str.__first_->__r_.__value_.__l.__data_
               + 23))(__str.__first_);
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
        if (v42)
        {
          (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(void *)v108 + 48))(&__str);
          int v43 = (std::__shared_weak_count *)__str.__begin_;
          (*((void (**)(void **__return_ptr))__str.__first_->__r_.__value_.__l.__data_ + 33))(v104);
          uint64_t v44 = v113;
          if ((unint64_t)v113 >= v114)
          {
            uint64_t v54 = (v113 - (unsigned char *)v112) >> 4;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 60) {
              std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v56 = v114 - (void)v112;
            if ((v114 - (uint64_t)v112) >> 3 > v55) {
              unint64_t v55 = v56 >> 3;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            __str.__end_cap_.__value_ = (std::allocator<std::string> *)&v114;
            int v58 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<dispatch_queue_s,void (*)(dispatch_object_s *)>>>((uint64_t)&v114, v57);
            int v59 = (char *)v58 + 16 * v54;
            __str.__first_ = v58;
            __str.__begin_ = (std::__split_buffer<std::string>::pointer)v59;
            __str.__end_cap_.__value_ = (std::string *)((char *)v58 + 16 * v60);
            *(_OWORD *)int v59 = *(_OWORD *)v104;
            v104[0] = 0;
            v104[1] = 0;
            __str.__end_ = (std::__split_buffer<std::string>::pointer)(v59 + 16);
            std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>>::__swap_out_circular_buffer((uint64_t *)&v112, &__str);
            unint64_t v61 = v113;
            std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer((void **)&__str.__first_);
            std::string v113 = v61;
            if (v104[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v104[1]);
            }
          }
          else
          {
            *(_OWORD *)std::string v113 = *(_OWORD *)v104;
            v104[0] = 0;
            v104[1] = 0;
            std::string v113 = v44 + 16;
          }
          if (v43) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
          }
        }
        else
        {
          unsigned int v45 = v113;
          if ((unint64_t)v113 >= v114)
          {
            uint64_t v47 = (v113 - (unsigned char *)v112) >> 4;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 60) {
              std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v49 = v114 - (void)v112;
            if ((v114 - (uint64_t)v112) >> 3 > v48) {
              unint64_t v48 = v49 >> 3;
            }
            unint64_t v50 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v48;
            __str.__end_cap_.__value_ = (std::allocator<std::string> *)&v114;
            unint64_t v51 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<dispatch_queue_s,void (*)(dispatch_object_s *)>>>((uint64_t)&v114, v50);
            unint64_t v52 = (char *)v51 + 16 * v47;
            __str.__first_ = v51;
            __str.__begin_ = (std::__split_buffer<std::string>::pointer)v52;
            __str.__end_cap_.__value_ = (std::string *)((char *)v51 + 16 * v53);
            *(void *)unint64_t v52 = 0;
            *((void *)v52 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
            __str.__end_ = (std::__split_buffer<std::string>::pointer)(v52 + 16);
            std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>>::__swap_out_circular_buffer((uint64_t *)&v112, &__str);
            uint64_t v46 = v113;
            std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer((void **)&__str.__first_);
          }
          else
          {
            uint64_t v46 = v113 + 16;
            *(void *)std::string v113 = 0;
            *((void *)v45 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
          }
          std::string v113 = v46;
        }
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(void *)v108 + 56))(&__str);
        int v62 = (std::__shared_weak_count *)*((void *)&v108 + 1);
        long long v108 = *(_OWORD *)&__str.__first_;
        if (!v62) {
          break;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)v108;
        if (!(void)v108) {
          goto LABEL_121;
        }
      }
      std::__split_buffer<std::string>::pointer first = __str.__first_;
    }
    while (__str.__first_);
  }
LABEL_121:
  (*(void (**)(void, uint64_t, void))(*(void *)v116 + 224))(v116, 1, 0);
  v104[0] = 0;
  v104[1] = 0;
  (*(void (**)(void **__return_ptr))(*(void *)v116 + 248))(v104);
  size_t v63 = strlen(a5);
  if (v63)
  {
    size_t v64 = v63;
    std::string::size_type v65 = 0;
    while (1)
    {
      ClassifyCharacter(a5, v65, (int *)&v123, &v124, &v121);
      if ((v123 & 0xFFFFFFFB) == 0) {
        break;
      }
      v65 += v124;
      if (v65 >= v64) {
        goto LABEL_206;
      }
    }
    if (v123 == 4)
    {
      uint64_t v66 = v121;
      uint64_t ClosingQuote = GetClosingQuote(v121);
      std::string::size_type v68 = v124;
      std::string::erase(&v126, 0, 0xFFFFFFFFFFFFFFFFLL);
      std::string::size_type v69 = v68 + v65;
      if (v68 + v65 < v64)
      {
        while (1)
        {
          ClassifyCharacter(a5, v69, (int *)&v123, &v124, &v121);
          if (v123 != 4) {
            break;
          }
          uint64_t v70 = v121;
          BOOL v71 = v121 == v66 || v121 == ClosingQuote;
          if (!v71 && (v66 != 12317 || (v121 & 0xFFFFFFFFFFFFFFFELL) != 0x301E)) {
            break;
          }
          std::string::size_type v72 = v124;
          if (v124 + v69 >= v64)
          {
            HIDWORD(v123) = 3;
            uint64_t v125 = 0;
            uint64_t v73 = 59;
            uint64_t v122 = 59;
          }
          else
          {
            ClassifyCharacter(a5, v124 + v69, (int *)&v123 + 1, &v125, &v122);
            uint64_t v73 = v122;
          }
          if (v70 != v73)
          {
            if (v70 == ClosingQuote || v66 == 12317 && (v70 & 0xFFFFFFFFFFFFFFFELL) == 0x301E) {
              goto LABEL_175;
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, a5);
            std::string::append(&v126, (const std::string *)&__str, v69, v72);
            goto LABEL_146;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, a5);
          std::string::append(&v126, (const std::string *)&__str, v69, v72);
          if (SHIBYTE(__str.__end_) < 0) {
            operator delete(__str.__first_);
          }
          v69 += v125;
LABEL_148:
          v69 += v72;
          if (v69 >= v64) {
            goto LABEL_175;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, a5);
        std::string::size_type v72 = v124;
        std::string::append(&v126, (const std::string *)&__str, v69, v124);
LABEL_146:
        if (SHIBYTE(__str.__end_) < 0) {
          operator delete(__str.__first_);
        }
        goto LABEL_148;
      }
    }
    else
    {
      uint64_t v74 = v65;
      if (v65 < v64)
      {
        uint64_t v74 = v65;
        do
        {
          ClassifyCharacter(a5, v74, (int *)&v123, &v124, &v121);
          BOOL v76 = (v101 & 0x10000000) == 0 || v123 != 2;
          if ((v123 & 0xFFFFFFFB) != 0 && v76)
          {
            if (v123 != 1) {
              break;
            }
            unint64_t v77 = v124 + v74;
            if (v124 + v74 >= v64) {
              break;
            }
            ClassifyCharacter(a5, v124 + v74, (int *)&v123 + 1, &v125, &v122);
            BOOL v78 = (v101 & 0x10000000) != 0 && HIDWORD(v123) == 2;
            BOOL v79 = !v78;
            if ((v123 & 0xFFFFFFFB00000000) != 0 && v79) {
              break;
            }
          }
          else
          {
            unint64_t v77 = v124 + v74;
          }
          uint64_t v74 = v77;
        }
        while (v77 < v64);
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, a5);
      std::string::assign(&v126, (const std::string *)&__str, v65, v74 - v65);
      if (SHIBYTE(__str.__end_) < 0) {
        operator delete(__str.__first_);
      }
    }
LABEL_175:
    if (NodeChildCount)
    {
      int v80 = (char *)__p;
      std::string::size_type v81 = v115.__r_.__value_.__r.__words[0];
      uint64_t v82 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
      long long v83 = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v84 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v84 = v126.__r_.__value_.__l.__size_;
      }
      for (unint64_t i = 1; i <= NodeChildCount; ++i)
      {
        if (((*(void *)&v80[((i - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (i - 1)) & 1) == 0)
        {
          int v86 = (unsigned __int8 **)(v81 + 24 * (i - 1));
          int v87 = (unsigned __int8 *)*((unsigned __int8 *)v86 + 23);
          int v88 = (char)v87;
          if ((char)v87 < 0) {
            int v87 = v86[1];
          }
          if ((unsigned __int8 *)v84 == v87)
          {
            if (v88 >= 0) {
              int v89 = (unsigned __int8 *)(v81 + 24 * (i - 1));
            }
            else {
              int v89 = *v86;
            }
            if ((v82 & 0x80) != 0)
            {
              if (!memcmp((const void *)v83, v89, *((size_t *)&v83 + 1))) {
                break;
              }
            }
            else
            {
              if (!v82) {
                break;
              }
              int v90 = &v126;
              uint64_t v91 = v82;
              while (v90->__r_.__value_.__s.__data_[0] == *v89)
              {
                int v90 = (std::string *)((char *)v90 + 1);
                ++v89;
                if (!--v91) {
                  goto LABEL_197;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      unint64_t i = 1;
    }
LABEL_197:
    if (i == NodeChildCount + 1)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v116 + 88))(&v106);
      int v92 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(uint64_t))(*(void *)v106 + 192))(v106);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v116 + 88))(&v103);
      int v93 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v103 + 208))(v103);
      if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v94 = &v126;
      }
      else {
        int v94 = (std::string *)v126.__r_.__value_.__r.__words[0];
      }
      AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v92, v93, "[]", (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)v94, (const char *)0xFFFFFFFFFFFFFFFFLL);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v116 + 88))(&v106);
    int v95 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(uint64_t))(*(void *)v106 + 192))(v106);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v116 + 88))(&v103);
    int8x16x4_t v96 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v103 + 208))(v103);
    std::string::size_type v97 = v115.__r_.__value_.__r.__words[0] + 24 * (i - 1);
    if (*(char *)(v97 + 23) < 0) {
      std::string::size_type v97 = *(void *)v97;
    }
    AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v95, v96, "[]", (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)v97, (const char *)0xFFFFFFFFFFFFFFFFLL);
  }
LABEL_206:
  if (v104[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v104[1]);
  }
  if (*((void *)&v108 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v108 + 1));
  }
  if (__p) {
    operator delete(__p);
  }
  __str.__first_ = (std::__split_buffer<std::string>::pointer)&v112;
  std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__first_ = &v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (*((void *)&v116 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v116 + 1));
  }
  __str.__first_ = (std::__split_buffer<std::string>::pointer)&v117;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
}

void sub_188860DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,char a47)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  a38 = &a47;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  if (*(char *)(v47 - 129) < 0) {
    operator delete(*(void **)(v47 - 152));
  }
  _Unwind_Resume(a1);
}

void XMPUtils::SeparateArrayItems(XMPUtils *this, XMPMeta *a2, char *a3, const char *a4, char *a5, const char *a6)
{
  if (sUseNewCoreAPIs)
  {
    XMPUtils::SeparateArrayItems_v2(this, a2, a3, a4, a5, a6);
    return;
  }
  if (!a2 || !a3 || !a5) {
    XMPUtils::SeparateArrayItems();
  }
  memset(&v85, 0, sizeof(v85));
  std::string::size_type v83 = 0;
  uint64_t v84 = 0;
  uint64_t v82 = 0;
  unint64_t v80 = 0;
  uint64_t v81 = 0;
  int v69 = (int)a4;
  int v10 = VerifySetOptions(a4 & 0xEFFFFFFF, 0);
  if ((v10 & 0xFFFFE1FF) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    exception[1] = "Options can only provide array form";
    *((unsigned char *)exception + 16) = 0;
  }
  memset(v79, 0, sizeof(v79));
  ExpandXPath((char *)a2, a3, (uint64_t *)v79);
  unsigned int v11 = (void *)((char *)this + 224);
  uint64_t Node = FindNode((void *)this + 28, v79, 0, 0, 0);
  uint64_t v13 = (void *)Node;
  if (Node)
  {
    int v14 = *(_DWORD *)(Node + 8);
    long long v15 = "Named property must be non-alternate array";
    if ((v14 & 0x1E00) == 0 || (v14 & 0x800) != 0)
    {
LABEL_15:
      unint64_t v17 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)unint64_t v17 = 102;
      v17[1] = v15;
      *((unsigned char *)v17 + 16) = 0;
    }
    if (v10)
    {
      BOOL v29 = v10 == (*(_DWORD *)(Node + 8) & 0x1E00);
      int v16 = v69;
      if (!v29)
      {
        long long v15 = "Mismatch of specified and existing array form";
        goto LABEL_15;
      }
    }
    else
    {
      int v16 = v69;
    }
  }
  else
  {
    uint64_t v13 = (void *)FindNode(v11, v79, 1, v10 | 0x200u, 0);
    int v16 = v69;
    if (!v13)
    {
      size_t v18 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)size_t v18 = 102;
      v18[1] = "Failed to create named array";
      *((unsigned char *)v18 + 16) = 0;
    }
  }
  uint64_t v19 = (const void *)v13[9];
  std::string __p = 0;
  unint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v70 = (char **)(v13 + 9);
  std::vector<XMP_Node *>::__init_with_size[abi:ne180100]<XMP_Node **,XMP_Node **>(&__p, v19, v13[10], (uint64_t)(v13[10] - (void)v19) >> 3);
  BOOL v71 = __p;
  std::string::size_type v72 = v77;
  unint64_t v73 = (v77 - (unsigned char *)__p) >> 3;
  v13[10] = v13[9];
  size_t v20 = strlen(a5);
  if (v20)
  {
    size_t v21 = v20;
    std::string::size_type v22 = 0;
    uint64_t v23 = v73;
    if (v73 <= 1) {
      uint64_t v23 = 1;
    }
    uint64_t v74 = v23;
    while (1)
    {
      ClassifyCharacter(a5, v22, (int *)&v82, &v83, (uint64_t *)&v80);
      if ((v82 & 0xFFFFFFFB) == 0) {
        break;
      }
      v22 += v83;
LABEL_118:
      if (v22 >= v21) {
        goto LABEL_119;
      }
    }
    if (v82 == 4)
    {
      unint64_t v24 = v80;
      uint64_t ClosingQuote = GetClosingQuote(v80);
      std::string::size_type v26 = v83;
      std::string::erase(&v85, 0, 0xFFFFFFFFFFFFFFFFLL);
      std::string::size_type v27 = v26 + v22;
      if (v26 + v22 < v21)
      {
        while (1)
        {
          ClassifyCharacter(a5, v27, (int *)&v82, &v83, (uint64_t *)&v80);
          if (v82 != 4) {
            break;
          }
          unint64_t v28 = v80;
          BOOL v29 = v80 == v24 || v80 == ClosingQuote;
          if (!v29 && (v24 != 12317 || (v80 & 0xFFFFFFFFFFFFFFFELL) != 0x301E)) {
            break;
          }
          std::string::size_type v30 = v83;
          std::string::size_type v22 = v83 + v27;
          if (v83 + v27 >= v21)
          {
            HIDWORD(v82) = 3;
            uint64_t v84 = 0;
            uint64_t v31 = 59;
            uint64_t v81 = 59;
          }
          else
          {
            ClassifyCharacter(a5, v83 + v27, (int *)&v82 + 1, &v84, &v81);
            uint64_t v31 = v81;
          }
          if (v28 != v31)
          {
            if (v28 == ClosingQuote || v24 == 12317 && (v28 & 0xFFFFFFFFFFFFFFFELL) == 0x301E) {
              goto LABEL_77;
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, a5);
            std::string::append(&v85, &__str, v27, v30);
            goto LABEL_46;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, a5);
          std::string::append(&v85, &__str, v27, v30);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          v27 += v84;
LABEL_48:
          v27 += v30;
          std::string::size_type v22 = v27;
          if (v27 >= v21) {
            goto LABEL_77;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, a5);
        std::string::size_type v30 = v83;
        std::string::append(&v85, &__str, v27, v83);
LABEL_46:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_48;
      }
      v22 += v26;
    }
    else
    {
      uint64_t v32 = v22;
      if (v22 < v21)
      {
        uint64_t v32 = v22;
        do
        {
          ClassifyCharacter(a5, v32, (int *)&v82, &v83, (uint64_t *)&v80);
          BOOL v34 = (v16 & 0x10000000) == 0 || v82 != 2;
          if ((v82 & 0xFFFFFFFB) != 0 && v34)
          {
            if (v82 != 1) {
              break;
            }
            unint64_t v35 = v83 + v32;
            if (v83 + v32 >= v21) {
              break;
            }
            ClassifyCharacter(a5, v83 + v32, (int *)&v82 + 1, &v84, &v81);
            BOOL v36 = (v16 & 0x10000000) != 0 && HIDWORD(v82) == 2;
            BOOL v37 = !v36;
            if ((v82 & 0xFFFFFFFB00000000) != 0 && v37) {
              break;
            }
          }
          else
          {
            unint64_t v35 = v83 + v32;
          }
          uint64_t v32 = v35;
        }
        while (v35 < v21);
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, a5);
      std::string::assign(&v85, &__str, v22, v32 - v22);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string::size_type v22 = v32;
    }
LABEL_77:
    if (v72 == v71)
    {
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v38 = 0;
      long long v39 = __p;
      uint64_t v40 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      long long v41 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v85.__r_.__value_.__l.__size_;
      }
      do
      {
        uint64_t v43 = v39[v38];
        if (v43)
        {
          uint64_t v44 = *(unsigned __int8 *)(v43 + 63);
          int v45 = (char)v44;
          if ((v44 & 0x80u) != 0) {
            uint64_t v44 = *(void *)(v43 + 48);
          }
          if (size == v44)
          {
            unint64_t v48 = *(unsigned __int8 **)(v43 + 40);
            uint64_t v46 = (unsigned __int8 *)(v43 + 40);
            uint64_t v47 = v48;
            if (v45 >= 0) {
              uint64_t v49 = v46;
            }
            else {
              uint64_t v49 = v47;
            }
            if ((v40 & 0x80) != 0)
            {
              if (!memcmp((const void *)v41, v49, *((size_t *)&v41 + 1))) {
                goto LABEL_97;
              }
            }
            else
            {
              if (!v40) {
                goto LABEL_97;
              }
              unint64_t v50 = &v85;
              uint64_t v51 = v40;
              while (v50->__r_.__value_.__s.__data_[0] == *v49)
              {
                unint64_t v50 = (std::string *)((char *)v50 + 1);
                ++v49;
                if (!--v51) {
                  goto LABEL_97;
                }
              }
            }
          }
        }
        ++v38;
      }
      while (v38 != v74);
      uint64_t v38 = v74;
LABEL_97:
      int v16 = v69;
    }
    if (v38 == v73) {
      operator new();
    }
    uint64_t v52 = *((void *)__p + v38);
    *((void *)__p + v38) = 0;
    uint64_t v54 = (void *)v13[10];
    unint64_t v53 = v13[11];
    if ((unint64_t)v54 >= v53)
    {
      uint64_t v56 = ((char *)v54 - *v70) >> 3;
      if ((unint64_t)(v56 + 1) >> 61) {
        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v57 = v53 - (void)*v70;
      uint64_t v58 = v57 >> 2;
      if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
        uint64_t v58 = v56 + 1;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v58;
      }
      if (v59) {
        uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(v13 + 11), v59);
      }
      else {
        uint64_t v60 = 0;
      }
      unint64_t v61 = &v60[8 * v56];
      *(void *)unint64_t v61 = v52;
      unint64_t v55 = v61 + 8;
      size_t v63 = (char *)v13[9];
      int v62 = (char *)v13[10];
      if (v62 != v63)
      {
        do
        {
          uint64_t v64 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v61 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v64;
          v61 -= 8;
        }
        while (v62 != v63);
        int v62 = *v70;
      }
      v13[9] = v61;
      v13[10] = v55;
      v13[11] = &v60[8 * v59];
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *uint64_t v54 = v52;
      unint64_t v55 = v54 + 1;
    }
    v13[10] = v55;
    goto LABEL_118;
  }
LABEL_119:
  if (v72 != v71)
  {
    uint64_t v65 = 0;
    if (v73 <= 1) {
      uint64_t v66 = 1;
    }
    else {
      uint64_t v66 = v73;
    }
    do
    {
      uint64_t v67 = *((void *)__p + v65);
      if (v67) {
        (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
      }
      ++v65;
    }
    while (v66 != v65);
  }
  if (__p)
  {
    unint64_t v77 = __p;
    operator delete(__p);
  }
  std::string __p = v79;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
}

void sub_18886188C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *__p,uint64_t a24,uint64_t a25,char a26)
{
  std::string __p = &a26;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  _Unwind_Resume(a1);
}

void XMPUtils::ApplyTemplate(XMPUtils *this, XMPMeta *a2, const XMPMeta *a3)
{
  unsigned int v3 = a3;
  int v4 = this;
  if (sUseNewCoreAPIs)
  {
    XMPUtils::ApplyTemplate_v2(this, a2, a3);
  }
  else
  {
    unsigned int v5 = a3 & 8;
    int v62 = a3 & 6;
    if ((a3 & 0x10) != 0)
    {
      uint64_t v6 = *((void *)this + 38) - *((void *)this + 37);
      if (v6)
      {
        uint64_t v7 = v6 >> 3;
        unint64_t v55 = (void *)((char *)a2 + 224);
        do
        {
          uint64_t v56 = v7;
          uint64_t v8 = v7 - 1;
          uint64_t v9 = *(void *)(*((void *)v4 + 37) + 8 * (v7 - 1));
          int v10 = (char *)(v9 + 16);
          if (*(char *)(v9 + 39) < 0) {
            int v10 = *(char **)(v9 + 16);
          }
          uint64_t SchemaNode = FindSchemaNode(v55, v10, 0, 0);
          *(void *)unint64_t v59 = v8;
          if (SchemaNode)
          {
            uint64_t v12 = *(void *)(v9 + 80) - *(void *)(v9 + 72);
            if (v12)
            {
              uint64_t v13 = SchemaNode;
              uint64_t v14 = -(v12 >> 3);
              unint64_t v15 = v12 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v16 = -(uint64_t)(v12 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                unint64_t v17 = *(char **)(*(void *)(v9 + 72) + v15 - 8);
                if ((v3 & 1) != 0 || !IsInternalProperty((unint64_t *)(v9 + 16), (unint64_t *)v17 + 2))
                {
                  size_t v18 = v17 + 16;
                  if (v17[39] < 0) {
                    size_t v18 = *(char **)v18;
                  }
                  if (!FindChildNode(v13, v18, 0, 0))
                  {
                    (*(void (**)(char *))(*(void *)v17 + 8))(v17);
                    uint64_t v19 = *(void *)(v9 + 72);
                    size_t v20 = *(char **)(v9 + 80);
                    size_t v21 = (char *)(v19 + v15);
                    std::string::size_type v22 = &v20[-v19];
                    uint64_t v23 = &v22[v16];
                    if (v21 != v20) {
                      memmove(v21 - 8, v21, (size_t)&v22[v16]);
                    }
                    *(void *)(v9 + 80) = &v21[((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8) - 8];
                  }
                }
                v15 -= 8;
                v16 += 8;
                BOOL v24 = __CFADD__(v14++, 1);
              }
              while (!v24);
            }
          }
          else if (v3)
          {
            XMP_Node::RemoveChildren((void *)v9);
          }
          else
          {
            uint64_t v25 = *(void *)(v9 + 80) - *(void *)(v9 + 72);
            if (v25)
            {
              uint64_t v26 = -(v25 >> 3);
              unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v28 = -(uint64_t)(v25 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                BOOL v29 = *(unint64_t **)(*(void *)(v9 + 72) + v27 - 8);
                if (!IsInternalProperty((unint64_t *)(v9 + 16), v29 + 2))
                {
                  if (v29) {
                    (*(void (**)(unint64_t *))(*v29 + 8))(v29);
                  }
                  uint64_t v30 = *(void *)(v9 + 72);
                  uint64_t v31 = *(char **)(v9 + 80);
                  uint64_t v32 = (char *)(v30 + v27);
                  long long v33 = &v31[-v30];
                  BOOL v34 = &v33[v28];
                  if (v32 != v31) {
                    memmove(v32 - 8, v32, (size_t)&v33[v28]);
                  }
                  *(void *)(v9 + 80) = &v32[((unint64_t)v34 & 0xFFFFFFFFFFFFFFF8) - 8];
                }
                v27 -= 8;
                v28 += 8;
                BOOL v24 = __CFADD__(v26++, 1);
              }
              while (!v24);
            }
          }
          int v4 = this;
          if (*(void *)(v9 + 72) == *(void *)(v9 + 80))
          {
            (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
            uint64_t v35 = *((void *)this + 37);
            BOOL v36 = (unsigned char *)*((void *)this + 38);
            uint64_t v37 = v35 + 8 * *(void *)v59;
            uint64_t v38 = (unsigned char *)(v35 + 8 * v56);
            int64_t v39 = v36 - v38;
            if (v36 != v38) {
              memmove((void *)(v35 + 8 * *(void *)v59), v38, v36 - v38);
            }
            *((void *)this + 38) = v37 + v39;
          }
          uint64_t v7 = *(void *)v59;
        }
        while (*(void *)v59);
      }
    }
    uint64_t v40 = a2;
    if ((v62 != 0) | (v5 >> 3))
    {
      uint64_t v41 = *((void *)a2 + 38) - *((void *)a2 + 37);
      if (v41)
      {
        uint64_t v42 = 0;
        unint64_t v43 = v41 >> 3;
        uint64_t v60 = (void *)((char *)v4 + 224);
        if (v43 <= 1) {
          unint64_t v43 = 1;
        }
        unint64_t v57 = v43;
        do
        {
          uint64_t v44 = *(void *)(*((void *)v40 + 37) + 8 * v42);
          MD5_CTX __dst = 0;
          int v45 = (char *)(v44 + 16);
          if (*(char *)(v44 + 39) < 0) {
            int v45 = *(char **)(v44 + 16);
          }
          uint64_t v46 = (XMP_Node *)FindSchemaNode(v60, v45, 0, &__dst);
          if (!v46) {
            operator new();
          }
          uint64_t v47 = *(void *)(v44 + 80) - *(void *)(v44 + 72);
          if (v47)
          {
            uint64_t v48 = 0;
            unint64_t v49 = v47 >> 3;
            if (v49 <= 1) {
              uint64_t v50 = 1;
            }
            else {
              uint64_t v50 = v49;
            }
            do
            {
              uint64_t v51 = *(unint64_t **)(*(void *)(v44 + 72) + 8 * v48);
              if ((v3 & 1) != 0 || !IsInternalProperty((unint64_t *)(v44 + 16), v51 + 2)) {
                AppendSubtree((const XMP_Node *)v51, v46, v5 != 0, v62 != 0, ((v3 & 0x10) == 0) & (v3 >> 2));
              }
              ++v48;
            }
            while (v50 != v48);
          }
          uint64_t v40 = a2;
          if (*((void *)v46 + 9) == *((void *)v46 + 10))
          {
            (*(void (**)(XMP_Node *))(*(void *)v46 + 8))(v46);
            uint64_t v52 = (char *)__dst;
            unint64_t v53 = (unsigned char *)*((void *)this + 38);
            int64_t v54 = v53 - ((unsigned char *)__dst + 8);
            if (v53 != (char *)__dst + 8) {
              memmove(__dst, (char *)__dst + 8, v53 - ((unsigned char *)__dst + 8));
            }
            *((void *)this + 38) = &v52[v54];
          }
          ++v42;
        }
        while (v42 != v57);
      }
    }
  }
}

void sub_188861EB4(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void AppendSubtree(const XMP_Node *a1, XMP_Node *a2, BOOL a3, BOOL a4, BOOL a5)
{
  MD5_CTX __dst = 0;
  int v10 = (char *)a1 + 16;
  if (*((char *)a1 + 39) < 0) {
    int v10 = *(char **)v10;
  }
  Childuint64_t Node = FindChildNode((uint64_t)a2, v10, 0, &__dst);
  uint64_t v12 = ChildNode;
  int v13 = *((_DWORD *)a1 + 2);
  int v14 = v13 & 0x1F00;
  if ((v13 & 0x1F00) != 0)
  {
    if (*((void *)a1 + 9) != *((void *)a1 + 10)) {
      goto LABEL_5;
    }
LABEL_28:
    if (!a5 || !ChildNode) {
      return;
    }
    goto LABEL_30;
  }
  if (*((char *)a1 + 63) < 0)
  {
    if (!*((void *)a1 + 6)) {
      goto LABEL_28;
    }
  }
  else if (!*((unsigned char *)a1 + 63))
  {
    goto LABEL_28;
  }
LABEL_5:
  if (!ChildNode) {
    CloneSubtree(a1, a2);
  }
  BOOL v15 = (v13 & 0x1F00) != 0 && a3;
  if (!v15 && a4)
  {
    std::string::operator=((std::string *)(ChildNode + 40), (const std::string *)((char *)a1 + 40));
    *(_DWORD *)(v12 + 8) = *((_DWORD *)a1 + 2);
    XMP_Node::RemoveChildren((void *)v12);
    XMP_Node::RemoveQualifiers((void *)v12);
    CloneOffspring(a1, (void **)v12, 1);
    if ((*(unsigned char *)(v12 + 9) & 0x1F) != 0 && *(void *)(v12 + 72) == *(void *)(v12 + 80)) {
      DeleteSubtree((char *)__dst);
    }
    return;
  }
  if ((v13 & 0x1F00) == 0 || v14 != (*(_DWORD *)(ChildNode + 8) & 0x1F00)) {
    return;
  }
  if (v14 == 256)
  {
    uint64_t v16 = *((void *)a1 + 10) - *((void *)a1 + 9);
    if (!v16) {
      return;
    }
    uint64_t v17 = 0;
    uint64_t v18 = v16 >> 3;
    while (1)
    {
      AppendSubtree(*(const XMP_Node **)(*((void *)a1 + 9) + 8 * v17), (XMP_Node *)v12, a3, a4, a5);
      if (a5 && *(void *)(v12 + 72) == *(void *)(v12 + 80)) {
        break;
      }
      if (v18 == ++v17) {
        return;
      }
    }
LABEL_30:
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    uint64_t v19 = (char *)__dst;
    size_t v20 = (unsigned char *)*((void *)a2 + 10);
    int64_t v21 = v20 - ((unsigned char *)__dst + 8);
    if (v20 != (char *)__dst + 8) {
      memmove(__dst, (char *)__dst + 8, v20 - ((unsigned char *)__dst + 8));
    }
    *((void *)a2 + 10) = &v19[v21];
    return;
  }
  if ((v13 & 0x1000) != 0)
  {
    if (!a3) {
      AppendSubtree();
    }
    uint64_t v29 = *((void *)a1 + 10) - *((void *)a1 + 9);
    if (!v29) {
      return;
    }
    uint64_t v30 = 0;
    uint64_t v31 = v29 >> 3;
    unint64_t v53 = (uint64_t *)(ChildNode + 72);
    while (1)
    {
      uint64_t v32 = *(void *)(*((void *)a1 + 9) + 8 * v30);
      long long v33 = *(uint64_t **)(v32 + 96);
      if (v33 != *(uint64_t **)(v32 + 104))
      {
        uint64_t v34 = *v33;
        uint64_t v35 = (void *)(v34 + 16);
        int v36 = *(char *)(v34 + 39);
        if (v36 < 0)
        {
          if (*(void *)(v34 + 24) != 8) {
            goto LABEL_55;
          }
          uint64_t v35 = (void *)*v35;
        }
        else if (v36 != 8)
        {
          goto LABEL_55;
        }
        if (*v35 == 0x676E616C3A6C6D78)
        {
          int v37 = LookupLangItem(v12, (unsigned __int8 **)(v34 + 40));
          int v38 = v37;
          if (*(char *)(v32 + 63) < 0)
          {
            if (!*(void *)(v32 + 48))
            {
LABEL_63:
              if (a5 && v37 != -1)
              {
                uint64_t v39 = *v53;
                uint64_t v40 = *(void *)(*v53 + 8 * v37);
                if (v40)
                {
                  (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
                  uint64_t v39 = *v53;
                }
                uint64_t v41 = v39 + 8 * v38;
                uint64_t v42 = *(void *)(v12 + 80);
                uint64_t v43 = v42 - (v41 + 8);
                if (v42 != v41 + 8)
                {
                  memmove((void *)(v39 + 8 * v38), (const void *)(v41 + 8), v42 - (v41 + 8));
                  uint64_t v39 = *v53;
                }
                *(void *)(v12 + 80) = v41 + v43;
                if (v39 == v41 + v43)
                {
                  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
                  uint64_t v44 = (char *)__dst;
                  int v45 = (unsigned char *)*((void *)a2 + 10);
                  int64_t v46 = v45 - ((unsigned char *)__dst + 8);
                  if (v45 != (char *)__dst + 8) {
                    memmove(__dst, (char *)__dst + 8, v45 - ((unsigned char *)__dst + 8));
                  }
                  *((void *)a2 + 10) = &v44[v46];
                }
              }
              goto LABEL_55;
            }
          }
          else if (!*(unsigned char *)(v32 + 63))
          {
            goto LABEL_63;
          }
          if (v37 == -1)
          {
            uint64_t v47 = **(void **)(v32 + 96);
            uint64_t v48 = (uint64_t *)(v47 + 40);
            int v49 = *(char *)(v47 + 63);
            if (v49 < 0)
            {
              if (*(void *)(v47 + 48) != 9) {
                goto LABEL_82;
              }
              uint64_t v48 = (uint64_t *)*v48;
            }
            else if (v49 != 9)
            {
              goto LABEL_82;
            }
            uint64_t v50 = (uint64_t *)*v48;
            int v51 = *((unsigned __int8 *)v48 + 8);
            BOOL v52 = v50 == (uint64_t *)0x6C75616665642D78 && v51 == 116;
            if (v52 && *(void *)(v12 + 72) != *(void *)(v12 + 80)) {
              operator new();
            }
LABEL_82:
            CloneSubtree((const XMP_Node *)v32, (XMP_Node *)v12);
          }
          if (a4) {
            std::string::operator=((std::string *)(*(void *)(*v53 + 8 * v37) + 40), (const std::string *)(v32 + 40));
          }
        }
      }
LABEL_55:
      if (v31 == ++v30) {
        return;
      }
    }
  }
  if ((v13 & 0x200) != 0)
  {
    uint64_t v22 = *((void *)a1 + 10) - *((void *)a1 + 9);
    if (v22)
    {
      uint64_t v23 = 0;
      uint64_t v24 = v22 >> 3;
      do
      {
        uint64_t v25 = *(const XMP_Node **)(*((void *)a1 + 9) + 8 * v23);
        uint64_t v26 = *(void *)(v12 + 80) - *(void *)(v12 + 72);
        if (!v26) {
LABEL_42:
        }
          CloneSubtree(v25, (XMP_Node *)v12);
        uint64_t v27 = 0;
        uint64_t v28 = v26 >> 3;
        while ((ItemValuesMatch(v25, *(const XMP_Node **)(*(void *)(v12 + 72) + 8 * v27)) & 1) == 0)
        {
          if (v28 == ++v27) {
            goto LABEL_42;
          }
        }
        ++v23;
      }
      while (v23 != v24);
    }
  }
}

void sub_188862404(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void XMPUtils::RemoveProperties(XMPUtils *this, XMPMeta *a2, char *a3, const char *a4)
{
  __int16 v4 = (__int16)a4;
  if (sUseNewCoreAPIs)
  {
    XMPUtils::RemoveProperties_v2(this, a2, a3, a4);
  }
  else
  {
    if (!a2 || !a3) {
      XMPUtils::RemoveProperties();
    }
    if (*a3)
    {
      if (!*(unsigned char *)a2)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        exception[1] = "Property name requires schema namespace";
        *((unsigned char *)exception + 16) = 0;
      }
      memset(__n_4, 0, sizeof(__n_4));
      ExpandXPath((char *)a2, a3, (uint64_t *)__n_4);
      MD5_CTX __dst = 0;
      uint64_t Node = (void *)FindNode((void *)this + 28, __n_4, 0, 0, (char **)&__dst);
      if (Node
        && ((v4 & 1) != 0 || !IsInternalProperty((unint64_t *)__n_4[0], (unint64_t *)__n_4[0] + 4)))
      {
        uint64_t v8 = (void *)Node[8];
        (*(void (**)(void *))(*Node + 8))(Node);
        uint64_t v9 = (char *)__dst;
        int v10 = (unsigned char *)v8[10];
        int64_t v11 = v10 - ((unsigned char *)__dst + 8);
        if (v10 != (char *)__dst + 8) {
          memmove(__dst, (char *)__dst + 8, v10 - ((unsigned char *)__dst + 8));
        }
        v8[10] = &v9[v11];
        DeleteEmptySchema(v8);
      }
      MD5_CTX __dst = __n_4;
      std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    }
    else if (*(unsigned char *)a2)
    {
      __n_4[0] = 0;
      uint64_t v12 = (void *)((char *)this + 224);
      if (FindSchemaNode((void *)this + 28, (char *)a2, 0, __n_4)) {
        RemoveSchemaChildren((char *)__n_4[0], v4 & 1);
      }
      if ((v4 & 0x800) != 0)
      {
        MD5_CTX __dst = 0;
        unsigned int __n = 0;
        XMPMeta::GetNamespacePrefix(a2, (const char **)&__dst, (const char **)&__n, v13);
        uint64_t v14 = sRegisteredAliasMap + 8;
        BOOL v15 = *(void **)sRegisteredAliasMap;
        if (*(void *)sRegisteredAliasMap != sRegisteredAliasMap + 8)
        {
          do
          {
            uint64_t v16 = (const char *)(v15 + 4);
            if (*((char *)v15 + 55) < 0) {
              uint64_t v16 = *(const char **)v16;
            }
            if (!strncmp(v16, (const char *)__dst, __n))
            {
              long long v33 = 0;
              uint64_t v17 = FindNode(v12, (const void ***)v15 + 7, 0, 0, (char **)&v33);
              if (v17)
              {
                uint64_t v18 = (void *)v17;
                uint64_t v19 = v17;
                do
                {
                  uint64_t v20 = v19;
                  uint64_t v19 = *(void *)(v19 + 64);
                }
                while ((*(_DWORD *)(v19 + 8) & 0x80000000) == 0);
                if ((v4 & 1) != 0
                  || !IsInternalProperty((unint64_t *)(v19 + 16), (unint64_t *)(v20 + 16)))
                {
                  int64_t v21 = (void *)v18[8];
                  (*(void (**)(void *))(*v18 + 8))(v18);
                  uint64_t v22 = (char *)v33;
                  uint64_t v23 = (unsigned char *)v21[10];
                  int64_t v24 = v23 - ((unsigned char *)v33 + 8);
                  if (v23 != (char *)v33 + 8) {
                    memmove(v33, (char *)v33 + 8, v23 - ((unsigned char *)v33 + 8));
                  }
                  v21[10] = &v22[v24];
                  DeleteEmptySchema(v21);
                }
              }
            }
            uint64_t v25 = (void *)v15[1];
            if (v25)
            {
              do
              {
                uint64_t v26 = v25;
                uint64_t v25 = (void *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                uint64_t v26 = (void *)v15[2];
                BOOL v27 = *v26 == (void)v15;
                BOOL v15 = v26;
              }
              while (!v27);
            }
            BOOL v15 = v26;
          }
          while (v26 != (void *)v14);
        }
      }
    }
    else
    {
      uint64_t v28 = *((void *)this + 37);
      uint64_t v29 = *((void *)this + 38) - v28;
      if (v29)
      {
        uint64_t v30 = v29 >> 3;
        uint64_t v31 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFF8) - 8);
        do
        {
          --v30;
          RemoveSchemaChildren(v31, v4 & 1);
          v31 -= 8;
        }
        while (v30);
      }
    }
  }
}

void sub_188862770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t RemoveSchemaChildren(char *__dst, char a2)
{
  uint64_t v2 = *(unint64_t **)__dst;
  if ((*(_DWORD *)(*(void *)__dst + 8) & 0x80000000) == 0) {
    RemoveSchemaChildren();
  }
  unint64_t v4 = v2[9];
  uint64_t v5 = v2[10] - v4;
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v7 = v5 >> 3;
  unint64_t v8 = v4 - 8;
  unint64_t v9 = v4 - 8 + (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    if ((a2 & 1) != 0
      || (uint64_t result = IsInternalProperty(v2 + 2, (unint64_t *)(*(void *)(v8 + 8 * v7) + 16)), (result & 1) == 0))
    {
      uint64_t result = *(void *)(v8 + 8 * v7);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      unint64_t v11 = v2[10];
      unint64_t v12 = v11 - (v9 + 8);
      if (v11 != v9 + 8) {
        uint64_t result = (uint64_t)memmove((void *)v9, (const void *)(v9 + 8), v11 - (v9 + 8));
      }
      v2[10] = v9 + v12;
    }
    v9 -= 8;
    --v7;
  }
  while (v7);
  if (v2[9] == v2[10])
  {
LABEL_13:
    unint64_t v13 = v2[8];
    uint64_t v14 = *(char **)(v13 + 80);
    int64_t v15 = v14 - (__dst + 8);
    if (v14 != __dst + 8) {
      memmove(__dst, __dst + 8, v14 - (__dst + 8));
    }
    *(void *)(v13 + 80) = &__dst[v15];
    uint64_t v16 = *(uint64_t (**)(unint64_t *))(*v2 + 8);
    return v16(v2);
  }
  return result;
}

void XMPUtils::DuplicateSubtree(XMPUtils *this, const XMPMeta *a2, XMPMeta *__s1, char *a4, char *a5, char *a6, const char *a7)
{
  unint64_t v8 = a6;
  unint64_t v9 = a5;
  unint64_t v13 = this;
  if (!sUseNewCoreAPIs)
  {
    memset(v54, 0, sizeof(v54));
    memset(v53, 0, sizeof(v53));
    if (__s1 && *(unsigned char *)__s1)
    {
      if (a4 && *a4)
      {
        uint64_t v14 = "(dest != 0) && (destNS != 0) && (destRoot != 0)";
        int v15 = 1800;
        if (a2 && a5 && a6)
        {
          if (!*a5) {
            unint64_t v9 = (char *)__s1;
          }
          if (!*a6) {
            unint64_t v8 = a4;
          }
          int v16 = strcmp((const char *)__s1, "*");
          int v17 = strcmp(v9, "*");
          if (v16) {
            BOOL v18 = v17 == 0;
          }
          else {
            BOOL v18 = 1;
          }
          int v19 = v18;
          if (v13 == a2 && v19)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 4;
            int v45 = "Can't duplicate tree onto itself";
            goto LABEL_87;
          }
          if (!(v17 | v16))
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 4;
            int v45 = "Use Clone for full tree to full tree";
            goto LABEL_87;
          }
          if (!v16)
          {
            ExpandXPath(v9, v8, (uint64_t *)v53);
            uint64_t Node = FindNode((void *)a2 + 28, v53, 0, 0, 0);
            if (!Node || (*(unsigned char *)(Node + 9) & 1) == 0)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)exception = 102;
              int v45 = "Destination must be an existing struct";
              goto LABEL_87;
            }
            if (*(void *)(Node + 72) != *(void *)(Node + 80))
            {
              if ((a7 & 0x20000000) == 0)
              {
                exception = __cxa_allocate_exception(0x18uLL);
                *(_DWORD *)exception = 102;
                int v45 = "Destination must be an empty struct";
                goto LABEL_87;
              }
              XMP_Node::RemoveChildren((void *)Node);
            }
            uint64_t v25 = *((void *)v13 + 38) - *((void *)v13 + 37);
            if (v25)
            {
              uint64_t v26 = 0;
              unint64_t v27 = v25 >> 3;
              if (v27 <= 1) {
                unint64_t v27 = 1;
              }
              uint64_t v48 = v13;
              do
              {
                uint64_t v28 = *(void *)(*((void *)v13 + 37) + 8 * v26);
                if (*(void *)(v28 + 80) != *(void *)(v28 + 72)) {
                  operator new();
                }
                ++v26;
                unint64_t v13 = v48;
              }
              while (v26 != v27);
            }
            goto LABEL_71;
          }
          if (v17)
          {
            ExpandXPath((char *)__s1, a4, (uint64_t *)v54);
            ExpandXPath(v9, v8, (uint64_t *)v53);
            uint64_t v20 = FindNode((void *)v13 + 28, v54, 0, 0, 0);
            if (v20)
            {
              if (FindNode((void *)a2 + 28, v53, 0, 0, 0))
              {
                exception = __cxa_allocate_exception(0x18uLL);
                *(_DWORD *)exception = 102;
                int v45 = "Destination subtree must not exist";
              }
              else
              {
                uint64_t v21 = FindNode((void *)a2 + 28, v53, 1, 0, 0);
                uint64_t v22 = v21;
                if (v21)
                {
                  if (v13 == a2)
                  {
                    uint64_t v23 = v21;
                    do
                    {
                      if (v23 == v20)
                      {
                        uint64_t v41 = __cxa_allocate_exception(0x18uLL);
                        *(_DWORD *)uint64_t v41 = 102;
                        v41[1] = "Destination subtree is within the source subtree";
                        *((unsigned char *)v41 + 16) = 0;
                      }
                      uint64_t v23 = *(void *)(v23 + 64);
                    }
                    while (v23);
                  }
                  std::string::operator=((std::string *)(v21 + 40), (const std::string *)(v20 + 40));
                  *(_DWORD *)(v22 + 8) = *(_DWORD *)(v20 + 8);
                  CloneOffspring((const XMP_Node *)v20, (void **)v22, 0);
LABEL_71:
                  v52[0] = (const void **)v53;
                  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
                  v53[0] = (const void **)v54;
                  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
                  return;
                }
                exception = __cxa_allocate_exception(0x18uLL);
                *(_DWORD *)exception = 102;
                int v45 = "Can't create destination root node";
              }
            }
            else
            {
              exception = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)exception = 102;
              int v45 = "Can't find source subtree";
            }
LABEL_87:
            exception[1] = v45;
            *((unsigned char *)exception + 16) = 0;
          }
          memset(v52, 0, sizeof(v52));
          ExpandXPath((char *)__s1, a4, (uint64_t *)v52);
          uint64_t v29 = FindNode((void *)v13 + 28, v52, 0, 0, 0);
          uint64_t v30 = v29;
          if (v29 && (*(unsigned char *)(v29 + 9) & 1) != 0)
          {
            uint64_t v31 = (void *)((char *)a2 + 224);
            if (*((void *)a2 + 37) == *((void *)a2 + 38))
            {
LABEL_54:
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v51 = 0;
              memset(__s, 0, sizeof(__s));
              uint64_t v32 = *(void *)(v30 + 80) - *(void *)(v30 + 72);
              if (v32)
              {
                uint64_t v33 = 0;
                unint64_t v34 = v32 >> 3;
                if (v34 <= 1) {
                  uint64_t v35 = 1;
                }
                else {
                  uint64_t v35 = v34;
                }
                do
                {
                  uint64_t v36 = *(void *)(*(void *)(v30 + 72) + 8 * v33);
                  std::string::size_type v37 = std::string::find((const std::string *)(v36 + 16), 58, 0);
                  if (v37 != -1)
                  {
                    uint64_t v38 = v36 + 16;
                    if (*(char *)(v36 + 39) < 0) {
                      uint64_t v38 = *(void *)(v36 + 16);
                    }
                    MEMORY[0x18C11BE20](__p, v38, v37);
                    if (v51 >= 0) {
                      uint64_t v40 = __p;
                    }
                    else {
                      uint64_t v40 = (void **)__p[0];
                    }
                    if (XMPMeta::GetNamespaceURI((XMPMeta *)v40, (const char **)&__s[4], (const char **)__s, v39))
                    {
                      if (FindSchemaNode(v31, *(char **)&__s[4], 1, 0)) {
                        operator new();
                      }
                      uint64_t v43 = __cxa_allocate_exception(0x18uLL);
                      *(_DWORD *)uint64_t v43 = 101;
                      v43[1] = "Failed to find destination schema";
                      *((unsigned char *)v43 + 16) = 0;
                    }
                    uint64_t v42 = __cxa_allocate_exception(0x18uLL);
                    *(_DWORD *)uint64_t v42 = 101;
                    v42[1] = "Source field namespace is not global";
                    *((unsigned char *)v42 + 16) = 0;
                  }
                  ++v33;
                }
                while (v33 != v35);
                if (SHIBYTE(v51) < 0) {
                  operator delete(__p[0]);
                }
              }
              __p[0] = v52;
              std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_71;
            }
            if ((a7 & 0x20000000) != 0)
            {
              XMP_Node::RemoveChildren((void *)a2 + 28);
              goto LABEL_54;
            }
            int64_t v46 = "Destination tree must be empty";
          }
          else
          {
            int64_t v46 = "Source must be an existing struct";
          }
          uint64_t v47 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)uint64_t v47 = 102;
          v47[1] = v46;
          *((unsigned char *)v47 + 16) = 0;
        }
      }
      else
      {
        uint64_t v14 = "(sourceRoot != 0) && (*sourceRoot != 0)";
        int v15 = 1799;
      }
    }
    else
    {
      uint64_t v14 = "(sourceNS != 0) && (*sourceNS != 0)";
      int v15 = 1798;
    }
    __assert_rtn("DuplicateSubtree", "XMPUtils-FileInfo.cpp", v15, v14);
  }

  XMPUtils::DuplicateSubtree_v2(v13, a2, __s1, a4, v9, v8, a7);
}

void sub_188863160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char **a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,char a25)
{
  std::string __p = &a19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a19 = &a22;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a22 = &a25;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t CodePointToUTF8(unint64_t a1, uint64_t a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  if (a1 >= 0x80)
  {
    uint64_t v4 = 0;
    do
    {
      unint64_t v5 = a1;
      *((unsigned char *)v10 + v4 + 7) = a1 & 0x3F | 0x80;
      a1 >>= 6;
      --v4;
    }
    while (v5 > 0x3F);
    if ((unint64_t)(v4 + 1) <= 0xFFFFFFFFFFFFFFFALL) {
      CodePointToUTF8();
    }
    if ((v5 & 0x3F) != 0)
    {
      unint64_t v6 = 0;
      do
      {
        ++v6;
        BOOL v7 = v5 > 1;
        v5 >>= 1;
      }
      while (v7);
    }
    else
    {
      unint64_t v6 = 0;
    }
    if (v6 <= v4 + 7) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = 9;
    }
    unint64_t v3 = v4 - v8 + 16;
    if (v3 >= 7) {
      CodePointToUTF8();
    }
    uint64_t v2 = v8 - v4 - 8;
    *((unsigned char *)&v10[2] + v4 - v8) |= 255 << (v4 - v8 + 16);
  }
  else
  {
    HIBYTE(v10[0]) = a1;
    uint64_t v2 = 1;
    unint64_t v3 = 7;
  }
  return MEMORY[0x18C11BE20](a2, (char *)v10 + v3, v2);
}

uint64_t ItemValuesMatch(const XMP_Node *a1, const XMP_Node *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  if ((v4 & 0x1F00) != 0x100)
  {
    if ((v4 & 0x1F00) == 0)
    {
      uint64_t v5 = *((unsigned __int8 *)a1 + 63);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = *((unsigned __int8 *)a1 + 63);
      }
      else {
        uint64_t v6 = *((void *)a1 + 6);
      }
      uint64_t v7 = *((unsigned __int8 *)a2 + 63);
      int v8 = (char)v7;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *((void *)a2 + 6);
      }
      if (v6 != v7) {
        return 0;
      }
      unint64_t v9 = (const void **)((char *)a1 + 40);
      if (v8 >= 0) {
        int v10 = (unsigned __int8 *)a2 + 40;
      }
      else {
        int v10 = (unsigned __int8 *)*((void *)a2 + 5);
      }
      if ((v5 & 0x80) != 0)
      {
        if (memcmp(*v9, v10, *((void *)a1 + 6))) {
          return 0;
        }
      }
      else if (*((unsigned char *)a1 + 63))
      {
        while (*(unsigned __int8 *)v9 == *v10)
        {
          unint64_t v9 = (const void **)((char *)v9 + 1);
          ++v10;
          if (!--v5) {
            goto LABEL_37;
          }
        }
        return 0;
      }
LABEL_37:
      if ((v4 & 0x40) == (*((_DWORD *)a2 + 2) & 0x40))
      {
        if ((v4 & 0x40) == 0) {
          return 1;
        }
        uint64_t v25 = **((void **)a1 + 12);
        uint64_t v26 = **((void **)a2 + 12);
        uint64_t v27 = *(unsigned __int8 *)(v25 + 63);
        size_t v28 = *(void *)(v25 + 48);
        if ((v27 & 0x80u) == 0) {
          uint64_t v29 = *(unsigned __int8 *)(v25 + 63);
        }
        else {
          uint64_t v29 = *(void *)(v25 + 48);
        }
        uint64_t v30 = *(unsigned __int8 *)(v26 + 63);
        int v31 = (char)v30;
        if ((v30 & 0x80u) != 0) {
          uint64_t v30 = *(void *)(v26 + 48);
        }
        if (v29 == v30)
        {
          uint64_t v32 = (const void **)(v25 + 40);
          uint64_t v35 = *(unsigned __int8 **)(v26 + 40);
          uint64_t v33 = (unsigned __int8 *)(v26 + 40);
          unint64_t v34 = v35;
          if (v31 >= 0) {
            uint64_t v36 = v33;
          }
          else {
            uint64_t v36 = v34;
          }
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp(*v32, v36, v28)) {
              return 1;
            }
          }
          else
          {
            if (!v27) {
              return 1;
            }
            while (*(unsigned __int8 *)v32 == *v36)
            {
              uint64_t v32 = (const void **)((char *)v32 + 1);
              ++v36;
              if (!--v27) {
                return 1;
              }
            }
          }
        }
      }
      return 0;
    }
    if ((v4 & 0x200) == 0) {
      ItemValuesMatch();
    }
    uint64_t v18 = *((void *)a1 + 10) - *((void *)a1 + 9);
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = v18 >> 3;
      while (1)
      {
        uint64_t v21 = *((void *)a2 + 10) - *((void *)a2 + 9);
        if (!v21) {
          break;
        }
        uint64_t v22 = 0;
        uint64_t v23 = *(const XMP_Node **)(*((void *)a1 + 9) + 8 * v19);
        uint64_t v24 = v21 >> 3;
        while (!ItemValuesMatch(v23, *(const XMP_Node **)(*((void *)a2 + 9) + 8 * v22)))
        {
          if (v24 == ++v22) {
            return 0;
          }
        }
        if (++v19 == v20) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  uint64_t v12 = *((void *)a1 + 9);
  uint64_t v11 = *((void *)a1 + 10);
  uint64_t v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3) {
    return 0;
  }
  if (v11 == v12) {
    return 1;
  }
  uint64_t v14 = 0;
  while (1)
  {
    int v15 = *(char **)(*((void *)a1 + 9) + 8 * v14);
    int v16 = v15 + 16;
    if (v15[39] < 0) {
      int v16 = *(char **)v16;
    }
    uint64_t result = FindChildNode((uint64_t)a2, v16, 0, 0);
    if (!result) {
      break;
    }
    if ((ItemValuesMatch((const XMP_Node *)v15, (const XMP_Node *)result) & 1) == 0) {
      return 0;
    }
    if (v13 == ++v14) {
      return 1;
    }
  }
  return result;
}

void *std::vector<XMP_Node *>::__init_with_size[abi:ne180100]<XMP_Node **,XMP_Node **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_188863608(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void XMPUtils::CatenateArrayItems_v2()
{
  __assert_rtn("CatenateArrayItems_v2", "XMPUtils-FileInfo.cpp", 900, "(schemaNS != 0) && (arrayName != 0)");
}

{
  __assert_rtn("CatenateArrayItems_v2", "XMPUtils-FileInfo.cpp", 901, "(separator != 0) && (quotes != 0) && (catedStr != 0)");
}

void ClassifyCharacter()
{
  __assert_rtn("ClassifyCharacter", "XMPUtils-FileInfo.cpp", 136, "(offset + *charSize) <= strlen(fullString)");
}

void XMPUtils::CatenateArrayItems()
{
  __assert_rtn("CatenateArrayItems", "XMPUtils-FileInfo.cpp", 1018, "(schemaNS != 0) && (arrayName != 0)");
}

{
  __assert_rtn("CatenateArrayItems", "XMPUtils-FileInfo.cpp", 1019, "(separator != 0) && (quotes != 0) && (catedStr != 0)");
}

void XMPUtils::SeparateArrayItems_v2()
{
  __assert_rtn("SeparateArrayItems_v2", "XMPUtils-FileInfo.cpp", 1124, "(schemaNS != 0) && (arrayName != 0) && (catedStr != 0)");
}

void XMPUtils::SeparateArrayItems()
{
  __assert_rtn("SeparateArrayItems", "XMPUtils-FileInfo.cpp", 1378, "(schemaNS != 0) && (arrayName != 0) && (catedStr != 0)");
}

void AppendSubtree()
{
  __assert_rtn("AppendSubtree", "XMPUtils-FileInfo.cpp", 741, "(destNode == 0) || (! destNode->value.empty()) || (! destNode->children.empty())");
}

{
  __assert_rtn("AppendSubtree", "XMPUtils-FileInfo.cpp", 800, "mergeCompound");
}

void XMPUtils::RemoveProperties()
{
  __assert_rtn("RemoveProperties", "XMPUtils-FileInfo.cpp", 1677, "(schemaNS != 0) && (propName != 0)");
}

void RemoveSchemaChildren()
{
  __assert_rtn("RemoveSchemaChildren", "XMPUtils-FileInfo.cpp", 622, "(((schemaNode->options) & ((XMP_OptionBits)0x80000000UL)) != 0)");
}

void CodePointToUTF8()
{
  __assert_rtn("CodePointToUTF8", "XMPUtils-FileInfo.cpp", 350, "(2 <= byteCount) && (byteCount <= 6)");
}

{
  __assert_rtn("CodePointToUTF8", "XMPUtils-FileInfo.cpp", 360, "(0 <= i) && (i <= 6)");
}

uint64_t PhotoDataUtils::GetNativeInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    unint64_t v7 = *(char **)(a4 + 8);
    unsigned int v8 = *(_DWORD *)(a4 + 16);
    if (v7)
    {
      if (v8)
      {
        uint64_t v9 = 0;
        while (a3 == 36867 || a3 == 306)
        {
          int v10 = v7[v9];
          if (v10 != 58) {
            goto LABEL_10;
          }
LABEL_11:
          if (v8 == ++v9) {
            return 0;
          }
        }
        int v10 = v7[v9];
LABEL_10:
        if ((v10 | 0x20) != 0x20) {
          goto LABEL_16;
        }
        goto LABEL_11;
      }
      LODWORD(v9) = 0;
LABEL_16:
      if (v9 != v8)
      {
        int v11 = TrimTrailingSpaces(v7, v8);
        *(_DWORD *)(a4 + 16) = v11;
        return v11 != 0;
      }
    }
    else if (v8)
    {
      PhotoDataUtils::GetNativeInfo();
    }
    return 0;
  }
  return result;
}

unint64_t PhotoDataUtils::GetNativeInfo(uint64_t a1, int a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  IPTC_Manager::GetDataSet(a1, a2, a5, 0);
  unint64_t v8 = v7;
  if (ignoreLocalText) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9 && *(unsigned char *)(a1 + 46) == 0)
  {
    unint64_t v11 = 0;
    __n128 v14 = 0uLL;
    while (1)
    {
      IPTC_Manager::GetDataSet(a1, a2, &v14, v11);
      BOOL v12 = !v14.n128_u32[1] || v14.n128_u64[1] == 0;
      if (v12 || ReconcileUtils::IsASCII((ReconcileUtils *)v14.n128_u64[1], (char *)v14.n128_u32[1])) {
        break;
      }
      if (v8 == ++v11)
      {
        unint64_t v11 = v8;
        break;
      }
    }
    if (v11 == v8) {
      return 0;
    }
  }
  return v8;
}

uint64_t PhotoDataUtils::IsValueDifferent(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (!v4) {
    return 0;
  }
  if (ReconcileUtils::IsUTF8(*(ReconcileUtils **)(a1 + 8), v4))
  {
    MEMORY[0x18C11BE20](a3, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  }
  else
  {
    if (ignoreLocalText) {
      return 0;
    }
    ReconcileUtils::LocalToUTF8(*(const UInt8 **)(a1 + 8), *(unsigned int *)(a1 + 16), a3);
  }
  uint64_t v7 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  uint64_t v9 = a2[23];
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)a2 + 1);
  }
  if (size != v9) {
    return 1;
  }
  if (v10 >= 0) {
    unint64_t v11 = a2;
  }
  else {
    unint64_t v11 = *(unsigned __int8 **)a2;
  }
  if ((v7 & 0x80) != 0) {
    return memcmp(a3->__r_.__value_.__l.__data_, v11, a3->__r_.__value_.__l.__size_) != 0;
  }
  if (!*((unsigned char *)&a3->__r_.__value_.__s + 23)) {
    return 0;
  }
  uint64_t v12 = v7 - 1;
  do
  {
    int v14 = a3->__r_.__value_.__s.__data_[0];
    a3 = (std::string *)((char *)a3 + 1);
    int v13 = v14;
    int v15 = *v11++;
    uint64_t result = v13 != v15;
  }
  while (v13 == v15 && v12-- != 0);
  return result;
}

BOOL PhotoDataUtils::IsValueDifferent(PhotoDataUtils *this, const IPTC_Manager *a2, const IPTC_Manager *a3)
{
  int v3 = (int)a3;
  __n128 v23 = 0uLL;
  IPTC_Manager::GetDataSet((uint64_t)this, (int)a3, &v23, 0);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = v6;
  __n128 v22 = 0uLL;
  IPTC_Manager::GetDataSet((uint64_t)a2, v3, &v22, 0);
  BOOL v9 = 1;
  if (v8 && v7 == v8)
  {
    unint64_t v10 = 0;
    memset(&__p, 0, sizeof(__p));
    memset(&__s1, 0, sizeof(__s1));
    while (1)
    {
      if (ignoreLocalText) {
        BOOL v11 = *((unsigned char *)this + 46) == 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (!v11
        || ((IPTC_Manager::GetDataSet((uint64_t)this, v3, &v23, v10), v23.n128_u32[1])
          ? (BOOL v18 = v23.n128_u64[1] == 0)
          : (BOOL v18 = 1),
            !v18 && ReconcileUtils::IsASCII((ReconcileUtils *)v23.n128_u64[1], (char *)v23.n128_u32[1])))
      {
        IPTC_Manager::GetDataSet_UTF8((uint64_t)this, v3, &__s1, v10);
        IPTC_Manager::GetDataSet_UTF8((uint64_t)a2, v3, &__p, v10);
        char v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        std::string::size_type v13 = (__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__s1.__r_.__value_.__r.__words[2])
            : __s1.__r_.__value_.__l.__size_;
        if (v13)
        {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          if (v13 != size) {
            goto LABEL_34;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_))
            {
              BOOL v9 = v10 != v7;
              goto LABEL_35;
            }
          }
          else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            p_s1 = &__s1;
            uint64_t v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            while (p_s1->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              p_p = (std::string *)((char *)p_p + 1);
              if (!--v17) {
                goto LABEL_32;
              }
            }
LABEL_34:
            BOOL v9 = v10 != v7;
            if ((v12 & 0x80) == 0) {
              goto LABEL_36;
            }
LABEL_35:
            operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_36:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            return v9;
          }
        }
      }
LABEL_32:
      if (++v10 == v7)
      {
        char v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        unint64_t v10 = v7;
        goto LABEL_34;
      }
    }
  }
  return v9;
}

void sub_188863F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void PhotoDataUtils::Import2WayExif (uint64_t a1, uint64_t a2)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(a1 + 73);
  uint64_t v133 = 0;
  __src = 0;
  size_t __len = 0;
  int v132 = 0;
  ImportTIFF_StandardMappings(0, (unsigned __int8 *)a1, a2);
  ImportTIFF_StandardMappings(2u, (unsigned __int8 *)a1, a2);
  ImportTIFF_StandardMappings(3u, (unsigned __int8 *)a1, a2);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 42032, &v133);
  if (WORD1(v133) == 2) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v6 == 1 && HIDWORD(v133) != 0) {
    ImportSingleTIFF((uint64_t)&v133, v4 != 0, a2, "http://ns.adobe.com/exif/1.0/aux/", "OwnerName");
  }
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 42033, &v133);
  if (WORD1(v133) == 2) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v9 == 1 && HIDWORD(v133) != 0) {
    ImportSingleTIFF((uint64_t)&v133, v4 != 0, a2, "http://ns.adobe.com/exif/1.0/aux/", "SerialNumber");
  }
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 42036, &v133);
  if (WORD1(v133) == 2) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v12 == 1 && HIDWORD(v133) != 0) {
    ImportSingleTIFF((uint64_t)&v133, v4 != 0, a2, "http://ns.adobe.com/exif/1.0/aux/", "Lens");
  }
  if (TXMPMeta<std::string>::GetProperty(a2, "http://cipa.jp/exif/1.0/", "LensSpecification", 0, (uint64_t *)&v132)
    && (v132 & 0x200) != 0)
  {
    memset(__dst, 0, 24);
    *(void *)std::string __str = 0;
    v144 = 0;
    uint64_t v145 = 0;
    int v14 = TXMPMeta<std::string>::CountArrayItems(a2, "http://cipa.jp/exif/1.0/", "LensSpecification");
    if (v14)
    {
      TXMPMeta<std::string>::GetArrayItem(a2, "http://cipa.jp/exif/1.0/", "LensSpecification", 1, (uint64_t)__dst, 0);
      if (v14 >= 2)
      {
        for (int i = 1; i != v14; ++i)
        {
          std::string::push_back((std::string *)__dst, 32);
          TXMPMeta<std::string>::GetArrayItem(a2, "http://cipa.jp/exif/1.0/", "LensSpecification", (i + 1), (uint64_t)__str, 0);
          if (v145 >= 0) {
            int v16 = __str;
          }
          else {
            int v16 = *(char **)__str;
          }
          if (v145 >= 0) {
            std::string::size_type v17 = HIBYTE(v145);
          }
          else {
            std::string::size_type v17 = (std::string::size_type)v144;
          }
          std::string::append((std::string *)__dst, v16, v17);
        }
      }
    }
    if (__dst[23] >= 0) {
      BOOL v18 = __dst;
    }
    else {
      BOOL v18 = *(unsigned char **)__dst;
    }
    TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/aux/", "LensInfo", (uint64_t)v18, 0x20000000);
    if (SHIBYTE(v145) < 0) {
      operator delete(*(void **)__str);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
  }
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 3, 6, &v133);
  if (WORD1(v133) == 5) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  if (v20 == 1 && HIDWORD(v133) == 1)
  {
    int v21 = (*(uint64_t (**)(void *))(a1 + 16))(__src);
    int v22 = (*(uint64_t (**)(char *))(a1 + 16))((char *)__src + 4);
    if (v22 >= 0) {
      int v23 = v21;
    }
    else {
      int v23 = -v21;
    }
    if (v22 >= 0) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = -v22;
    }
    if (v23 < 0)
    {
      TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef", (uint64_t)"1", 0);
      unsigned int v25 = -v23;
      goto LABEL_59;
    }
    if (v22 < 0)
    {
      unsigned int v25 = -v21;
LABEL_59:
      memset(__dst, 0, 32);
      snprintf(__dst, 0x20uLL, "%lu/%lu", v25, v24);
      TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "GPSAltitude", (uint64_t)__dst, 0);
    }
  }
  int v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 36867, &v133);
  BOOL DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal");
  if (v26)
  {
    if (WORD1(v133) == 2 && !DoesPropertyExist) {
      ImportTIFF_Date(a1, (unsigned __int16 *)&v133, a2, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal");
    }
  }
  int v29 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 0, 306, &v133);
  BOOL v30 = TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/xap/1.0/", "ModifyDate");
  if (v29)
  {
    if (WORD1(v133) == 2 && !v30) {
      ImportTIFF_Date(a1, (unsigned __int16 *)&v133, a2, "http://ns.adobe.com/xap/1.0/", "ModifyDate");
    }
  }
  memset(__dst, 0, 24);
  *(_DWORD *)std::string __str = 0;
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, 2, 36864, __dst);
  if (*(unsigned __int16 *)&__dst[2] == 7) {
    int v33 = v32;
  }
  else {
    int v33 = 0;
  }
  unsigned int v34 = 1;
  if (v33 == 1 && *(_DWORD *)&__dst[4] == 4) {
    unsigned int v34 = strncmp(*(const char **)&__dst[8], "0230", 4uLL) >> 31;
  }
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 56))(a1, 2, 34855, __str);
  int v36 = v35;
  if (*(_DWORD *)__str < 0xFFFFu) {
    int v37 = v35;
  }
  else {
    int v37 = 0;
  }
  if (v34)
  {
    if (v35
      && (*(_DWORD *)__str < 0xFFFFu
       || !TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings")))
    {
      TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
      TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1024, (uint64_t)"", 0);
      TXMPMeta<std::string>::SetProperty_Int(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings[1]", *(unsigned int *)__str, 0);
    }
    goto LABEL_108;
  }
  unsigned int v136 = 0;
  *(_DWORD *)long long v137 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 56))(a1, 2, 34864, v137))
  {
    TXMPMeta<std::string>::SetProperty_Int(a2, "http://cipa.jp/exif/1.0/", "SensitivityType", *(unsigned int *)v137, 0);
    uint64_t v38 = 0;
    char v39 = 1;
    if (*(_DWORD *)v137 <= 7u)
    {
      if (((1 << v137[0]) & 0xE8) != 0)
      {
        char v39 = 0;
        uint64_t v38 = 34867;
      }
      else if (((1 << v137[0]) & 0x12) != 0)
      {
        char v39 = 0;
        uint64_t v38 = 34865;
      }
      else if (*(_DWORD *)v137 == 2)
      {
        char v39 = 0;
        uint64_t v38 = 34866;
      }
    }
  }
  else
  {
    uint64_t v38 = 0;
    char v39 = 1;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 56))(a1, 2, 34865, &v136))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "StandardOutputSensitivity", v136, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 56))(a1, 2, 34866, &v136))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "RecommendedExposureIndex", v136, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 56))(a1, 2, 34867, &v136))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "ISOSpeed", v136, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 56))(a1, 2, 34868, &v136))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "ISOSpeedLatitudeyyy", v136, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 56))(a1, 2, 34869, &v136))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "ISOSpeedLatitudezzz", v136, 0);
  }
  if (v37)
  {
    TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
    TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1024, (uint64_t)"", 0);
    TXMPMeta<std::string>::SetProperty_Int(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings[1]", *(unsigned int *)__str, 0);
    uint64_t v40 = "PhotographicSensitivity";
    uint64_t v41 = "http://cipa.jp/exif/1.0/";
    uint64_t v42 = *(unsigned int *)__str;
LABEL_103:
    TXMPMeta<std::string>::SetProperty_Int(a2, v41, v40, v42, 0);
    goto LABEL_108;
  }
  if (v36)
  {
    if (*(_DWORD *)__str != 0xFFFF) {
      __assert_rtn("ImportTIFF_PhotographicSensitivity", "ReconcileTIFF.cpp", 2002, "valueTag34855 == 65535");
    }
    TXMPMeta<std::string>::SetProperty_Int(a2, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", 0xFFFFLL, 0);
  }
  if ((v39 & 1) == 0)
  {
    int v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, 2, v38, __dst);
    int v89 = *(unsigned __int16 *)&__dst[2] == 4 ? v88 : 0;
    if (v89 == 1 && *(_DWORD *)&__dst[4] == 1)
    {
      TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
      TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1024, (uint64_t)"", 0);
      uint64_t v42 = (*(uint64_t (**)(void))(a1 + 16))(*(void *)&__dst[8]);
      uint64_t v40 = "ISOSpeedRatings[1]";
      uint64_t v41 = "http://ns.adobe.com/exif/1.0/";
      goto LABEL_103;
    }
  }
LABEL_108:
  int v43 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 0, 315, &v133);
  if (((v43 | TXMPMeta<std::string>::DoesPropertyExist(a2, "http://purl.org/dc/elements/1.1/", "creator")) & 1) == 0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 42032, &v133))
  {
    memset(__dst, 0, 24);
    std::string::basic_string[abi:ne180100](__dst, __src, __len);
    uint64_t v44 = __dst[23] >= 0 ? __dst : *(unsigned char **)__dst;
    TXMPMeta<std::string>::AppendArrayItem(a2, "http://purl.org/dc/elements/1.1/", "creator", 1024, (uint64_t)v44, 0);
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
  }
  int v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 36864, &v133);
  if (WORD1(v133) == 7) {
    int v46 = v45;
  }
  else {
    int v46 = 0;
  }
  if (v46 == 1 && HIDWORD(v133) == 4)
  {
    __dst[4] = 0;
    *(_DWORD *)MD5_CTX __dst = 0;
    *(_DWORD *)MD5_CTX __dst = *(_DWORD *)__src;
    __dst[4] = 0;
    TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "ExifVersion", (uint64_t)__dst, 0);
  }
  int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 40960, &v133);
  if (WORD1(v133) == 7) {
    int v48 = v47;
  }
  else {
    int v48 = 0;
  }
  if (v48 == 1 && HIDWORD(v133) == 4)
  {
    __dst[4] = 0;
    *(_DWORD *)MD5_CTX __dst = 0;
    *(_DWORD *)MD5_CTX __dst = *(_DWORD *)__src;
    __dst[4] = 0;
    TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "FlashpixVersion", (uint64_t)__dst, 0);
  }
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 37121, &v133);
  if (WORD1(v133) == 7) {
    int v50 = v49;
  }
  else {
    int v50 = 0;
  }
  if (v50 == 1 && HIDWORD(v133) == 4) {
    ImportArrayTIFF_Byte((uint64_t)&v133, a2, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 37510, &v133))
  {
    ImportTIFF_EncodedString(a1, (uint64_t)&v133, a2, "UserComment", 1);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 34856, &v133))
  {
    ImportConversionTable((unsigned __int16 *)&v133, v4 != 0, a2, "OECF");
  }
  int v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 37385, &v133);
  if (WORD1(v133) == 3) {
    int v52 = v51;
  }
  else {
    int v52 = 0;
  }
  if (v52 == 1 && HIDWORD(v133) == 1)
  {
    unsigned int v53 = bswap32(*(unsigned __int16 *)__src) >> 16;
    if (v4) {
      unsigned int v54 = *(unsigned __int16 *)__src;
    }
    else {
      unsigned int v54 = v53;
    }
    if (v54) {
      unint64_t v55 = "True";
    }
    else {
      unint64_t v55 = "False";
    }
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "Fired", v55, 0);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "Return", ImportTIFF_Flash(TIFF_Manager::TagInfo const&,BOOL,TXMPMeta<std::string> *,char const*,char const*)::sTwoBits[((unsigned __int16)v54 >> 1) & 3], 0);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "Mode", ImportTIFF_Flash(TIFF_Manager::TagInfo const&,BOOL,TXMPMeta<std::string> *,char const*,char const*)::sTwoBits[(v54 >> 3) & 3], 0);
    if ((v54 & 0x20) != 0) {
      uint64_t v56 = "True";
    }
    else {
      uint64_t v56 = "False";
    }
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "Function", v56, 0);
    if ((v54 & 0x40) != 0) {
      unint64_t v57 = "True";
    }
    else {
      unint64_t v57 = "False";
    }
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "RedEyeMode", v57, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 41484, &v133))
  {
    ImportConversionTable((unsigned __int16 *)&v133, v4 != 0, a2, "SpatialFrequencyResponse");
  }
  int v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 41728, &v133);
  if (WORD1(v133) == 7) {
    int v59 = v58;
  }
  else {
    int v59 = 0;
  }
  if (v59 == 1 && HIDWORD(v133) == 1) {
    ImportSingleTIFF_Byte((uint64_t)&v133, a2, "http://ns.adobe.com/exif/1.0/", "FileSource");
  }
  int v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 41729, &v133);
  if (WORD1(v133) == 7) {
    int v61 = v60;
  }
  else {
    int v61 = 0;
  }
  if (v61 == 1 && HIDWORD(v133) == 1) {
    ImportSingleTIFF_Byte((uint64_t)&v133, a2, "http://ns.adobe.com/exif/1.0/", "SceneType");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 41730, &v133))
  {
    int v62 = (char *)__src;
    uint64_t v63 = __len;
    unsigned int v64 = *((unsigned __int16 *)__src + 1);
    unsigned int v65 = bswap32(*(unsigned __int16 *)__src) >> 16;
    if (v4) {
      unsigned __int16 v66 = *(_WORD *)__src;
    }
    else {
      unsigned __int16 v66 = v65;
    }
    *(void *)std::string __str = 0;
    v144 = 0;
    LODWORD(v145) = 0;
    memset(__dst, 0, 24);
    snprintf(__str, 0x14uLL, "%d", v66);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "CFAPattern", "http://ns.adobe.com/exif/1.0/", "Columns", __str, 0);
    unsigned int v67 = __rev16(v64);
    if (v4) {
      unsigned int v68 = v64;
    }
    else {
      unsigned int v68 = v67;
    }
    snprintf(__str, 0x14uLL, "%d", v68);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "CFAPattern", "http://ns.adobe.com/exif/1.0/", "Rows", __str, 0);
    int v69 = v66;
    uint64_t v70 = v63 - 4;
    uint64_t v71 = v68 * v69;
    if (v70 == v71)
    {
      TXMPUtils<std::string>::ComposeStructFieldPath("http://ns.adobe.com/exif/1.0/", "CFAPattern", "http://ns.adobe.com/exif/1.0/", "Values", (uint64_t)__dst);
      if (v71)
      {
        std::string::size_type v72 = (unsigned __int8 *)(v62 + 4);
        do
        {
          snprintf(__str, 0x14uLL, "%hu", *v72);
          if (__dst[23] >= 0) {
            unint64_t v73 = __dst;
          }
          else {
            unint64_t v73 = *(unsigned char **)__dst;
          }
          TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", v73, 1024, (uint64_t)__str, 0);
          ++v72;
          --v70;
        }
        while (v70);
      }
    }
    else
    {
      TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "CFAPattern");
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 41995, &v133))
  {
    uint64_t v74 = (char *)__src;
    uint64_t v75 = __len;
    unsigned int v76 = *(unsigned __int16 *)__src;
    unsigned int v77 = *((unsigned __int16 *)__src + 1);
    int v78 = *(unsigned __int8 *)(a1 + 73);
    unsigned int v79 = bswap32(v76) >> 16;
    if (!*(unsigned char *)(a1 + 73)) {
      LOWORD(v76) = v79;
    }
    *(void *)long long v137 = 0;
    uint64_t v138 = 0;
    int v139 = 0;
    snprintf(v137, 0x14uLL, "%d", (unsigned __int16)v76);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "DeviceSettingDescription", "http://ns.adobe.com/exif/1.0/", "Columns", v137, 0);
    unsigned int v80 = __rev16(v77);
    if (v78) {
      unsigned int v80 = v77;
    }
    snprintf(v137, 0x14uLL, "%d", v80);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "DeviceSettingDescription", "http://ns.adobe.com/exif/1.0/", "Rows", v137, 0);
    memset(__dst, 0, 24);
    TXMPUtils<std::string>::ComposeStructFieldPath("http://ns.adobe.com/exif/1.0/", "DeviceSettingDescription", "http://ns.adobe.com/exif/1.0/", "Settings", (uint64_t)__dst);
    uint64_t v81 = (unsigned __int16 *)&v74[v75];
    unint64_t v82 = (unint64_t)(v74 + 4);
    *(void *)std::string __str = 0;
    v144 = 0;
    uint64_t v145 = 0;
    while (v82 < (unint64_t)v81)
    {
      uint64_t v83 = 0;
      uint64_t v84 = (unsigned __int16 *)v82;
      do
      {
        int v85 = *v84++;
        ++v83;
      }
      while (v85);
      if (v84 > v81)
      {
        TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "DeviceSettingDescription");
        break;
      }
      FromUTF16(v82, v83);
      if (__dst[23] >= 0) {
        int v86 = __dst;
      }
      else {
        int v86 = *(unsigned char **)__dst;
      }
      if (v145 >= 0) {
        int v87 = __str;
      }
      else {
        int v87 = *(char **)__str;
      }
      TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", v86, 1024, (uint64_t)v87, 0);
      unint64_t v82 = (unint64_t)v84;
    }
    if (SHIBYTE(v145) < 0) {
      operator delete(*(void **)__str);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
  }
  int v90 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(*(void *)a1 + 24))(a1, 3, 0, &v133);
  if (WORD1(v133) == 1) {
    int v91 = v90;
  }
  else {
    int v91 = 0;
  }
  if (v91 == 1 && HIDWORD(v133) == 4)
  {
    memset(__dst, 0, 20);
    snprintf(__dst, 0x14uLL, "%u.%u.%u.%u", *(unsigned __int8 *)__src, *((unsigned __int8 *)__src + 1), *((unsigned __int8 *)__src + 2), *((unsigned __int8 *)__src + 3));
    TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "GPSVersionID", (uint64_t)__dst, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 3, 2, &v133))
  {
    ImportTIFF_GPSCoordinate((unsigned __int8 *)a1, (uint64_t)&v133, a2, "GPSLatitude");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 3, 4, &v133))
  {
    ImportTIFF_GPSCoordinate((unsigned __int8 *)a1, (uint64_t)&v133, a2, "GPSLongitude");
  }
  int v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 3, 7, &v133);
  if (WORD1(v133) == 5) {
    int v94 = v93;
  }
  else {
    int v94 = 0;
  }
  if (v94 == 1 && HIDWORD(v133) == 3)
  {
    int v96 = *(unsigned __int8 *)(a1 + 73);
    *(void *)std::string __str = 0;
    v144 = 0;
    uint64_t v145 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(a1, 3, 29, __str) & 1) != 0
      || ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(a1, 2, 36867, __str) & 1) != 0
      || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(a1, 2, 36868, __str))
    {
      int v97 = v144[4];
      if (v97 == 58 || v97 == 45)
      {
        int v98 = v144[7];
        if ((v98 == 58 || v98 == 45) && (v144[10] | 0x20) == 0x20)
        {
          uint64_t v99 = 0;
          int v100 = 0;
          unsigned int v101 = *(_DWORD *)__src;
          unsigned int v102 = *((_DWORD *)__src + 1);
          unsigned int v103 = *((_DWORD *)__src + 2);
          unsigned int v104 = *((_DWORD *)__src + 3);
          unsigned int v105 = *((_DWORD *)__src + 4);
          unsigned int v106 = bswap32(*(_DWORD *)__src);
          unsigned int v107 = bswap32(v102);
          unsigned int v108 = bswap32(v103);
          unsigned int v109 = bswap32(v104);
          if (!v96) {
            unsigned int v101 = v106;
          }
          unsigned int v110 = bswap32(v105);
          if (!v96) {
            unsigned int v102 = v107;
          }
          unsigned int v111 = bswap32(*((_DWORD *)__src + 5));
          if (v96)
          {
            unsigned int v112 = *((_DWORD *)__src + 5);
          }
          else
          {
            unsigned int v103 = v108;
            unsigned int v104 = v109;
            unsigned int v105 = v110;
            unsigned int v112 = v111;
          }
          double v113 = (double)v101 / (double)v102;
          unsigned int v114 = v113;
          double v115 = (double)v103 / (double)v104;
          double v116 = (double)v105 / (double)v112
               + (v115 - (double)v115) * 60.0
               + (v113 - (double)v113) * 3600.0;
          unsigned int v117 = v116;
          double v118 = (v116 - (double)v116) * 1000000000.0 + 0.5;
          *(_DWORD *)&__dst[24] = 0x10000;
          do
          {
            int v119 = v100;
            if (v99 == 4) {
              break;
            }
            int v120 = v144[v99];
            unsigned int v121 = v120 - 58;
            int v100 = v120 + 10 * v119 - 48;
            ++v99;
          }
          while (v121 > 0xFFFFFFF5);
          uint64_t v122 = 0;
          int v123 = 0;
          *(_DWORD *)MD5_CTX __dst = v119;
          do
          {
            int v124 = v123;
            if (v122 == 2) {
              break;
            }
            int v125 = v144[v122 + 5];
            unsigned int v126 = v125 - 58;
            int v123 = v125 + 10 * v124 - 48;
            ++v122;
          }
          while (v126 > 0xFFFFFFF5);
          uint64_t v127 = 0;
          int v128 = 0;
          *(_DWORD *)&__dst[4] = v124;
          do
          {
            int v129 = v128;
            if (v127 == 2) {
              break;
            }
            int v130 = v144[v127 + 8];
            unsigned int v131 = v130 - 58;
            int v128 = v130 + 10 * v129 - 48;
            ++v127;
          }
          while (v131 > 0xFFFFFFF5);
          *(void *)&__dst[8] = __PAIR64__(v114, v129);
          *(_DWORD *)&__dst[16] = v115;
          *(_DWORD *)&__dst[20] = v117;
          int v142 = (int)v118;
          *(void *)&__dst[27] = 0;
          char v141 = 0;
          TXMPMeta<std::string>::SetProperty_Date(a2, "http://ns.adobe.com/exif/1.0/", "GPSTimeStamp", (long long *)__dst, 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 3, 20, &v133))
  {
    ImportTIFF_GPSCoordinate((unsigned __int8 *)a1, (uint64_t)&v133, a2, "GPSDestLatitude");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 3, 22, &v133))
  {
    ImportTIFF_GPSCoordinate((unsigned __int8 *)a1, (uint64_t)&v133, a2, "GPSDestLongitude");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 3, 27, &v133))
  {
    ImportTIFF_EncodedString(a1, (uint64_t)&v133, a2, "GPSProcessingMethod", 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 3, 28, &v133))
  {
    ImportTIFF_EncodedString(a1, (uint64_t)&v133, a2, "GPSAreaInformation", 0);
  }
}

void sub_188865A24(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 89) < 0) {
      operator delete(*(void **)(v2 - 112));
    }
    if (v5 < 0) {
      operator delete(v4);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x188865474);
  }
  _Unwind_Resume(a1);
}

void ImportTIFF_StandardMappings(unsigned int a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v71 = a2[73];
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  unint64_t v75 = 0;
  if (a1)
  {
    if (a1 == 3)
    {
      char v5 = &sGPSInfoIFDMappings;
    }
    else
    {
      if (a1 != 2)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 9;
        exception[1] = "Invalid IFD for standard mappings";
        *((unsigned char *)exception + 16) = 0;
      }
      char v5 = &sExifIFDMappings;
    }
  }
  else
  {
    char v5 = &sPrimaryIFDMappings;
  }
  int v6 = (unsigned __int16)*v5;
  if (v6 != 0xFFFF)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = &v5[16 * v7];
      int v9 = *((_DWORD *)v8 + 1);
      BOOL v10 = v9 == 1 || v8[1] == 2;
      int v11 = (char *)*((void *)v8 + 3);
      if (!*v11) {
        goto LABEL_129;
      }
      if (((*(uint64_t (**)(unsigned __int8 *, void, void, uint64_t *))(*(void *)a2 + 24))(a2, a1, (unsigned __int16)v6, &v73) & 1) == 0)goto LABEL_129; {
      if (a2[74])
      }
      {
        uint64_t v12 = v75;
        unsigned int v13 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a2 + 64))(a2);
        int v14 = v74;
        if ((*(uint64_t (**)(unsigned __int8 *))(*(void *)a2 + 72))(a2) - (uint64_t)v14 + v13 < v12) {
          goto LABEL_129;
        }
      }
      if (WORD1(v73) == 7)
      {
        int v67 = 1265;
        unsigned int v68 = "ImportTIFF_StandardMappings";
        int v69 = "tagInfo.type != kTIFF_UndefinedType";
        goto LABEL_128;
      }
      if (WORD1(v73) - 14 < 0xFFFFFFF3) {
        break;
      }
      unsigned int v15 = (unsigned __int16)v5[16 * v7 + 1];
      if (v15 >= 0xE)
      {
        int v67 = 1198;
        unsigned int v68 = "ImportTIFF_CheckStandardMapping";
        int v69 = "mapInfo.type <= kTIFF_LastType";
LABEL_128:
        __assert_rtn(v68, "ReconcileTIFF.cpp", v67, v69);
      }
      if (WORD1(v73) != v15)
      {
        if ((0x3CA4uLL >> v15))
        {
          if (v15 == 10 || v15 == 5)
          {
            if (WORD1(v73) != 5 && WORD1(v73) != 10) {
              goto LABEL_129;
            }
          }
          else if (WORD1(v73) - 13 < 0xFFFFFFFE || v15 - 13 < 0xFFFFFFFE)
          {
            goto LABEL_129;
          }
        }
        else if ((0x3CA4uLL >> SBYTE2(v73)))
        {
          goto LABEL_129;
        }
      }
      if (HIDWORD(v73) != 1 && v9 == 1) {
        goto LABEL_129;
      }
      int v16 = &v5[16 * v7];
      std::string::size_type v17 = (unsigned char *)*((void *)v16 + 2);
      if (!v10)
      {
        switch(WORD1(v73))
        {
          case 1:
            ImportArrayTIFF_Byte((uint64_t)&v73, a3, *((unsigned char **)v16 + 2), v11);
            goto LABEL_129;
          case 2:
            unsigned int v36 = TrimTrailingSpaces((char *)v74, v75);
            LODWORD(v75) = v36;
            if (!v36) {
              goto LABEL_129;
            }
            int v37 = (const UInt8 *)v74;
            uint64_t v38 = v36;
            int v39 = *((unsigned __int8 *)v74 + v36 - 1);
            int IsUTF8 = ReconcileUtils::IsUTF8(v74, v36);
            if (v39) {
              char v41 = 0;
            }
            else {
              char v41 = IsUTF8;
            }
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&long long v77 = 0;
            if (v41)
            {
              uint64_t v42 = &v37[v38];
            }
            else
            {
              if (IsUTF8)
              {
                MEMORY[0x18C11BE20](__p, v37, v75);
              }
              else
              {
                if (ignoreLocalText)
                {
LABEL_113:
                  if (SBYTE7(v77) < 0) {
                    operator delete(__p[0]);
                  }
                  goto LABEL_129;
                }
                ReconcileUtils::LocalToUTF8(v37, v75, (std::string *)__p);
              }
              unsigned __int16 v66 = (char *)BYTE7(v77);
              if ((SBYTE7(v77) & 0x80u) == 0) {
                int v37 = (const UInt8 *)__p;
              }
              else {
                int v37 = (const UInt8 *)__p[0];
              }
              if (SBYTE7(v77) < 0) {
                unsigned __int16 v66 = (char *)__p[1];
              }
              uint64_t v42 = (const UInt8 *)&v66[(void)v37];
            }
            TXMPMeta<std::string>::DeleteProperty(a3, v17, v11);
            while (v37 < v42)
            {
              TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)v37, 0);
              v37 += strlen((const char *)v37) + 1;
            }
            goto LABEL_113;
          case 3:
            int v43 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v44 = 0;
              do
              {
                unsigned int v45 = *((unsigned __int16 *)v43 + v44);
                unsigned int v46 = bswap32(v45) >> 16;
                if (!v71) {
                  LOWORD(v45) = v46;
                }
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%hu", (unsigned __int16)v45);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v44;
              }
              while (v44 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 4:
            int v23 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v24 = 0;
              do
              {
                LODWORD(v25) = *((_DWORD *)v23 + v24);
                unsigned int v26 = bswap32(v25);
                if (v71) {
                  uint64_t v25 = v25;
                }
                else {
                  uint64_t v25 = v26;
                }
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%lu", v25);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v24;
              }
              while (v24 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 5:
            uint64_t v27 = (unsigned int *)v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v28 = 0;
              do
              {
                LODWORD(v29) = *v27;
                LODWORD(v30) = v27[1];
                unsigned int v31 = bswap32(*v27);
                unsigned int v32 = bswap32(v30);
                if (v71) {
                  uint64_t v29 = v29;
                }
                else {
                  uint64_t v29 = v31;
                }
                if (v71) {
                  uint64_t v30 = v30;
                }
                else {
                  uint64_t v30 = v32;
                }
                uint64_t v78 = 0;
                *(_OWORD *)std::string __p = 0u;
                long long v77 = 0u;
                snprintf((char *)__p, 0x28uLL, "%lu/%lu", v29, v30);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v28;
                v27 += 2;
              }
              while (v28 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 6:
            int v33 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v34 = 0;
              do
              {
                int v35 = *((char *)v33 + v34);
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%hd", v35);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v34;
              }
              while (v34 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 8:
            int v47 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v48 = 0;
              do
              {
                unsigned int v49 = *((unsigned __int16 *)v47 + v48);
                unsigned int v50 = bswap32(v49) >> 16;
                if (!v71) {
                  LOWORD(v49) = v50;
                }
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%hd", (__int16)v49);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v48;
              }
              while (v48 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 9:
            int v51 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v52 = 0;
              do
              {
                signed int v53 = *((_DWORD *)v51 + v52);
                unsigned int v54 = bswap32(v53);
                if (!v71) {
                  signed int v53 = v54;
                }
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%ld", v53);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v52;
              }
              while (v52 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 0xA:
            int v60 = (unsigned int *)v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v61 = 0;
              do
              {
                signed int v62 = *v60;
                signed int v63 = v60[1];
                unsigned int v64 = bswap32(*v60);
                unsigned int v65 = bswap32(v63);
                if (!v71)
                {
                  signed int v62 = v64;
                  signed int v63 = v65;
                }
                uint64_t v78 = 0;
                *(_OWORD *)std::string __p = 0u;
                long long v77 = 0u;
                snprintf((char *)__p, 0x28uLL, "%ld/%ld", v62, v63);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v61;
                v60 += 2;
              }
              while (v61 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 0xB:
            unint64_t v55 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v56 = 0;
              do
              {
                float v57 = *((float *)v55 + v56);
                float v58 = COERCE_FLOAT(bswap32(LODWORD(v57)));
                if (!v71) {
                  float v57 = v58;
                }
                __p[0] = 0;
                __p[1] = 0;
                *(void *)&long long v77 = 0;
                TXMPUtils<std::string>::ConvertFromFloat("", (uint64_t)__p, v57);
                if ((SBYTE7(v77) & 0x80u) == 0) {
                  int v59 = __p;
                }
                else {
                  int v59 = (void **)__p[0];
                }
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)v59, 0);
                if (SBYTE7(v77) < 0) {
                  operator delete(__p[0]);
                }
                ++v56;
              }
              while (v56 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 0xC:
            BOOL v18 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((unsigned char **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              unint64_t v19 = 0;
              do
              {
                double v20 = *((double *)v18 + v19);
                double v21 = COERCE_DOUBLE(bswap64(*(unint64_t *)&v20));
                if (!v71) {
                  double v20 = v21;
                }
                __p[0] = 0;
                __p[1] = 0;
                *(void *)&long long v77 = 0;
                TXMPUtils<std::string>::ConvertFromFloat("", (uint64_t)__p, v20);
                if ((SBYTE7(v77) & 0x80u) == 0) {
                  int v22 = __p;
                }
                else {
                  int v22 = (void **)__p[0];
                }
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)v22, 0);
                if (SBYTE7(v77) < 0) {
                  operator delete(__p[0]);
                }
                ++v19;
              }
              while (v19 < HIDWORD(v73));
            }
            goto LABEL_129;
          default:
            goto LABEL_129;
        }
      }
      ImportSingleTIFF((uint64_t)&v73, v71 != 0, a3, *((char **)v16 + 2), v11);
LABEL_129:
      ++v7;
      int v6 = (unsigned __int16)v5[16 * v7];
      if (v6 == 0xFFFF) {
        return;
      }
    }
    int v67 = 1197;
    unsigned int v68 = "ImportTIFF_CheckStandardMapping";
    int v69 = "(kTIFF_ByteType <= tagInfo.type) && (tagInfo.type <= kTIFF_LastType)";
    goto LABEL_128;
  }
}

void ImportSingleTIFF(uint64_t a1, int a2, uint64_t a3, char *a4, char *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  switch(*(_WORD *)(a1 + 2))
  {
    case 1:
      ImportSingleTIFF_Byte(a1, a3, a4, a5);
      return;
    case 2:
      unsigned int v20 = TrimTrailingSpaces(*(char **)(a1 + 8), *(unsigned int *)(a1 + 16));
      *(_DWORD *)(a1 + 16) = v20;
      if (!v20) {
        return;
      }
      double v21 = *(ReconcileUtils **)(a1 + 8);
      int v22 = *((unsigned __int8 *)v21 + v20 - 1);
      int IsUTF8 = ReconcileUtils::IsUTF8(v21, v20);
      if (v22) {
        int v24 = 0;
      }
      else {
        int v24 = IsUTF8;
      }
      if (v24 == 1)
      {
        TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)v21, 0);
        return;
      }
      memset(__str, 0, sizeof(__str));
      *(void *)&long long v38 = 0;
      if (IsUTF8)
      {
        MEMORY[0x18C11BE20](__str, v21, *(unsigned int *)(a1 + 16));
      }
      else
      {
        if (ignoreLocalText) {
          return;
        }
        ReconcileUtils::LocalToUTF8((const UInt8 *)v21, *(unsigned int *)(a1 + 16), (std::string *)__str);
      }
      if ((SBYTE7(v38) & 0x80u) == 0) {
        unsigned int v36 = __str;
      }
      else {
        unsigned int v36 = *(char **)__str;
      }
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)v36, 0);
      if (SBYTE7(v38) < 0) {
        operator delete(*(void **)__str);
      }
      return;
    case 3:
      unsigned int v18 = **(unsigned __int16 **)(a1 + 8);
      unsigned int v19 = bswap32(v18) >> 16;
      if (!a2) {
        LOWORD(v18) = v19;
      }
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%hu", (unsigned __int16)v18);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 4:
      LODWORD(v16) = **(_DWORD **)(a1 + 8);
      unsigned int v17 = bswap32(v16);
      if (a2) {
        uint64_t v16 = v16;
      }
      else {
        uint64_t v16 = v17;
      }
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%lu", v16);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 5:
      unint64_t v11 = *(void *)(a1 + 8);
      LODWORD(v12) = *(_DWORD *)v11;
      LODWORD(v1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = *(_DWORD *)(v11 + 4);
      unsigned int v13 = bswap32(v12);
      unsigned int v14 = bswap32(v11);
      if (a2) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = v13;
      }
      if (a2) {
        unint64_t v11 = v11;
      }
      else {
        unint64_t v11 = v14;
      }
      uint64_t v39 = 0;
      *(_OWORD *)std::string __str = 0u;
      long long v38 = 0u;
      snprintf(__str, 0x28uLL, "%lu/%lu", v12, v11);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 6:
      int v15 = **(char **)(a1 + 8);
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%hd", v15);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 8:
      unsigned int v25 = **(unsigned __int16 **)(a1 + 8);
      unsigned int v26 = bswap32(v25) >> 16;
      if (!a2) {
        LOWORD(v25) = v26;
      }
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%hd", (__int16)v25);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 9:
      signed int v27 = **(_DWORD **)(a1 + 8);
      unsigned int v28 = bswap32(v27);
      if (!a2) {
        signed int v27 = v28;
      }
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%ld", v27);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 0xA:
      unsigned int v31 = *(signed int **)(a1 + 8);
      signed int v33 = *v31;
      signed int v32 = v31[1];
      unsigned int v34 = bswap32(v33);
      unsigned int v35 = bswap32(v32);
      if (!a2)
      {
        signed int v33 = v34;
        signed int v32 = v35;
      }
      uint64_t v39 = 0;
      *(_OWORD *)std::string __str = 0u;
      long long v38 = 0u;
      snprintf(__str, 0x28uLL, "%ld/%ld", v33, v32);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 0xB:
      float v29 = **(float **)(a1 + 8);
      float v30 = COERCE_FLOAT(bswap32(LODWORD(v29)));
      if (!a2) {
        float v29 = v30;
      }
      TXMPMeta<std::string>::SetProperty_Float(a3, a4, a5, 0, v29);
      return;
    case 0xC:
      double v9 = **(double **)(a1 + 8);
      double v10 = COERCE_DOUBLE(bswap64(*(unint64_t *)&v9));
      if (!a2) {
        double v9 = v10;
      }
      TXMPMeta<std::string>::SetProperty_Float(a3, a4, a5, 0, v9);
      return;
    default:
      return;
  }
}

void ImportTIFF_Date(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  int v6 = *a2;
  if (v6 == 306) {
    int v7 = 37520;
  }
  else {
    int v7 = 0;
  }
  if (v6 == 306) {
    int v8 = 36880;
  }
  else {
    int v8 = 0;
  }
  if (v6 == 36867) {
    unsigned int v9 = 37521;
  }
  else {
    unsigned int v9 = v7;
  }
  if (v6 == 36867) {
    unsigned int v10 = 36881;
  }
  else {
    unsigned int v10 = v8;
  }
  if (v6 == 36868) {
    uint64_t v11 = 37522;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v6 == 36868) {
    uint64_t v12 = 36882;
  }
  else {
    uint64_t v12 = v10;
  }
  if (a2[1] != 2 || *((_DWORD *)a2 + 1) != 20) {
    return;
  }
  unsigned int v14 = (unsigned char *)*((void *)a2 + 1);
  if (v14[4] != 58 || v14[7] != 58 || v14[10] != 32 || v14[13] != 58 || v14[16] != 58) {
    return;
  }
  uint64_t v18 = 0;
  int v19 = 0;
  *(_DWORD *)int v94 = 0;
  do
  {
    int v20 = v19;
    if (v18 == 4) {
      break;
    }
    int v21 = v14[v18];
    unsigned int v22 = v21 - 58;
    int v19 = v21 + 10 * v20 - 48;
    ++v18;
  }
  while (v22 > 0xFFFFFFF5);
  uint64_t v23 = 0;
  int v24 = 0;
  LODWORD(v9std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v20;
  do
  {
    int v25 = v24;
    if (v23 == 2) {
      break;
    }
    int v26 = v14[v23 + 5];
    unsigned int v27 = v26 - 58;
    int v24 = v26 + 10 * v25 - 48;
    ++v23;
  }
  while (v27 > 0xFFFFFFF5);
  uint64_t v28 = 0;
  int v29 = 0;
  DWORD1(v9std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v25;
  do
  {
    int v30 = v29;
    if (v28 == 2) {
      break;
    }
    int v31 = v14[v28 + 8];
    unsigned int v32 = v31 - 58;
    int v29 = v31 + 10 * v30 - 48;
    ++v28;
  }
  while (v32 > 0xFFFFFFF5);
  DWORD2(v9std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v30;
  if (v25 | v20 | v30) {
    v94[0] = 1;
  }
  uint64_t v33 = 0;
  int v34 = 0;
  do
  {
    int v35 = v34;
    if (v33 == 2) {
      break;
    }
    int v36 = v14[v33 + 11];
    unsigned int v37 = v36 - 58;
    int v34 = v36 + 10 * v35 - 48;
    ++v33;
  }
  while (v37 > 0xFFFFFFF5);
  uint64_t v38 = 0;
  int v39 = 0;
  HIDWORD(v9std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v35;
  do
  {
    int v40 = v39;
    if (v38 == 2) {
      break;
    }
    int v41 = v14[v38 + 14];
    unsigned int v42 = v41 - 58;
    int v39 = v41 + 10 * v40 - 48;
    ++v38;
  }
  while (v42 > 0xFFFFFFF5);
  uint64_t v43 = 0;
  int v44 = 0;
  int v92 = v40;
  unsigned int v45 = v14 + 17;
  do
  {
    int v46 = v44;
    if (v43 == 2) {
      break;
    }
    int v47 = v45[v43];
    unsigned int v48 = v47 - 58;
    int v44 = v47 + 10 * v46 - 48;
    ++v43;
  }
  while (v48 > 0xFFFFFFF5);
  int v93 = v46;
  unsigned int v95 = 0;
  if (v40 | v35 | v46) {
    v94[1] = 1;
  }
  *(_WORD *)&v94[10] = 0;
  *(void *)&v94[2] = 0;
  uint64_t v88 = 0;
  int v89 = 0;
  uint64_t v90 = 0;
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, v11, &v88);
  if (WORD1(v88) == 2) {
    int v50 = v49;
  }
  else {
    int v50 = 0;
  }
  if (v50 == 1)
  {
    int v51 = 0;
    unint64_t v52 = v89;
    do
    {
      unsigned int v53 = v51;
      if (v52 >= &v89[v90]) {
        break;
      }
      int v54 = *v52++;
      int v51 = v54 + 10 * v51 - 48;
    }
    while ((v54 - 58) > 0xFFFFFFF5);
    if (*v89 - 48 > 9)
    {
      unint64_t v55 = 0;
    }
    else
    {
      unint64_t v55 = 0;
      do
        int v56 = v89[++v55];
      while ((v56 - 48) < 0xA);
      if (v55 > 8)
      {
LABEL_67:
        unsigned int v95 = v53;
        if (v53) {
          v94[1] = 1;
        }
        goto LABEL_69;
      }
    }
    uint64_t v57 = 0;
    uint64x2_t v58 = (uint64x2_t)vdupq_n_s64(8 - v55);
    v59.i64[1] = 0x100000001;
    v59.i64[0] = v53 | 0x100000000;
    v60.i64[0] = 0xA0000000ALL;
    v60.i64[1] = 0xA0000000ALL;
    do
    {
      int8x16_t v61 = (int8x16_t)v59;
      int32x4_t v59 = vmulq_s32(v59, v60);
      v57 += 4;
    }
    while (((12 - v55) & 0xFFFFFFFFFFFFFFFCLL) != v57);
    int8x16_t v62 = (int8x16_t)vdupq_n_s64(v57 - 4);
    int8x16_t v63 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v62, (int8x16_t)xmmword_18898C840), v58), (int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v62, (int8x16_t)xmmword_1889AE100), v58)), v61, (int8x16_t)v59);
    *(int32x2_t *)v63.i8 = vmul_s32(*(int32x2_t *)v63.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
    unsigned int v53 = v63.i32[0] * v63.i32[1];
    goto LABEL_67;
  }
LABEL_69:
  uint64_t v85 = 0;
  std::string __s1 = 0;
  uint64_t v87 = 0;
  int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, 36864, &v85);
  if (WORD1(v85) == 7) {
    int v65 = v64;
  }
  else {
    int v65 = 0;
  }
  BOOL v66 = v65 == 1 && HIDWORD(v85) == 4;
  if (v66 && (strncmp(__s1, "0231", 4uLL) & 0x80000000) == 0)
  {
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, 2, v12, &v82);
    int v68 = WORD1(v82) == 2 ? v67 : 0;
    if (v68 == 1 && HIDWORD(v82) == 7)
    {
      int v70 = *v83;
      if (v70 == 43 || v70 == 45 || v83[3] == 58)
      {
        uint64_t v71 = 0;
        int v72 = 0;
        if (v70 == 45) {
          char v73 = -1;
        }
        else {
          char v73 = 1;
        }
        v94[3] = v73;
        do
        {
          int v74 = v72;
          if (v71 == 2) {
            break;
          }
          int v75 = v83[++v71];
          unsigned int v76 = v75 - 58;
          int v72 = v75 + 10 * v74 - 48;
        }
        while (v76 > 0xFFFFFFF5);
        uint64_t v77 = 0;
        int v78 = 0;
        *(_DWORD *)&v94[4] = v74;
        do
        {
          int v79 = v78;
          if (v77 == 2) {
            break;
          }
          int v80 = v83[v77 + 4];
          unsigned int v81 = v80 - 58;
          int v78 = v80 + 10 * v79 - 48;
          ++v77;
        }
        while (v81 > 0xFFFFFFF5);
        *(_DWORD *)&v94[8] = v79;
        v94[2] = 1;
      }
    }
  }
  TXMPMeta<std::string>::SetProperty_Date(a3, a4, a5, &v91, 0);
}

void sub_188867040(void *a1)
{
}

void ImportArrayTIFF_Byte(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 8);
  TXMPMeta<std::string>::DeleteProperty(a2, a3, a4);
  if (*(_DWORD *)(a1 + 4))
  {
    unint64_t v9 = 0;
    do
    {
      int v10 = *(unsigned __int8 *)(v8 + v9);
      *(void *)std::string __str = 0;
      uint64_t v12 = 0;
      int v13 = 0;
      snprintf(__str, 0x14uLL, "%hu", v10);
      TXMPMeta<std::string>::AppendArrayItem(a2, a3, a4, 1024, (uint64_t)__str, 0);
      ++v9;
    }
    while (v9 < *(unsigned int *)(a1 + 4));
  }
}

void sub_188867140(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x188867108);
  }
  _Unwind_Resume(a1);
}

void ImportTIFF_EncodedString(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, char a5)
{
  memset(&v13, 0, sizeof(v13));
  if (TIFF_Manager::DecodeString(a1, *(unsigned __int8 **)(a2 + 8), *(unsigned int *)(a2 + 16), &v13))
  {
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v9 = &v13;
    }
    else {
      unint64_t v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v10 = TrimTrailingSpaces((char *)v9, size);
    if (v10 != size) {
      std::string::erase(&v13, v10, 0xFFFFFFFFFFFFFFFFLL);
    }
    std::string::size_type v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v11 = v13.__r_.__value_.__l.__size_;
    }
    if (v11)
    {
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v13;
      }
      else {
        uint64_t v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      }
      if (a5) {
        TXMPMeta<std::string>::SetLocalizedText(a3, "http://ns.adobe.com/exif/1.0/", a4, "", "x-default", (const char *)v12, 0);
      }
      else {
        TXMPMeta<std::string>::SetProperty(a3, "http://ns.adobe.com/exif/1.0/", a4, (uint64_t)v12, 0);
      }
    }
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_188867270(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18886725CLL);
}

void ImportConversionTable(unsigned __int16 *a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  int v35 = v4;
  if (v4 != 34856 && v4 != 41484) {
    ImportConversionTable();
  }
  TXMPMeta<std::string>::DeleteProperty(a3, "http://ns.adobe.com/exif/1.0/", a4);
  std::string::size_type v10 = (unsigned __int16 *)*((void *)a1 + 1);
  uint64_t v11 = *((unsigned int *)a1 + 4);
  unsigned int v12 = v10[1];
  unsigned int v13 = bswap32(*v10) >> 16;
  if (a2) {
    LOWORD(v14) = *v10;
  }
  else {
    LOWORD(v14) = v13;
  }
  uint64_t v41 = 0;
  *(_OWORD *)std::string __str = 0u;
  long long v40 = 0u;
  snprintf(__str, 0x28uLL, "%d", (unsigned __int16)v14);
  int v36 = a4;
  TXMPMeta<std::string>::SetStructField(a3, "http://ns.adobe.com/exif/1.0/", a4, "http://ns.adobe.com/exif/1.0/", "Columns", __str, 0);
  unsigned int v15 = __rev16(v12);
  if (a2) {
    unsigned int v16 = v12;
  }
  else {
    unsigned int v16 = v15;
  }
  snprintf(__str, 0x28uLL, "%d", v16);
  TXMPMeta<std::string>::SetStructField(a3, "http://ns.adobe.com/exif/1.0/", a4, "http://ns.adobe.com/exif/1.0/", "Rows", __str, 0);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v38 = 0;
  TXMPUtils<std::string>::ComposeStructFieldPath("http://ns.adobe.com/exif/1.0/", a4, "http://ns.adobe.com/exif/1.0/", "Names", (uint64_t)__p);
  unsigned int v17 = (char *)v10 + v11;
  uint64_t v18 = (char *)(v10 + 2);
  int v19 = (unsigned __int16)v14;
  if ((_WORD)v14)
  {
    int v34 = "OECF-SFR name overflow";
    uint64_t v14 = (unsigned __int16)v14;
    while (1)
    {
      uint64_t v20 = strlen(v18) + 1;
      int v21 = (unsigned int *)&v18[v20];
      if (&v18[v20] > v17) {
        goto LABEL_46;
      }
      if (!ReconcileUtils::IsUTF8((ReconcileUtils *)v18, v20)) {
        break;
      }
      if (v38 >= 0) {
        unsigned int v22 = __p;
      }
      else {
        unsigned int v22 = (void **)__p[0];
      }
      TXMPMeta<std::string>::AppendArrayItem(a3, "http://ns.adobe.com/exif/1.0/", v22, 1024, (uint64_t)v18, 0);
      uint64_t v18 = (char *)v21;
      if (!--v14) {
        goto LABEL_22;
      }
    }
    int v34 = "OECF-SFR name error";
LABEL_46:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    exception[1] = v34;
    *((unsigned char *)exception + 16) = 0;
  }
  int v21 = (unsigned int *)(v10 + 2);
LABEL_22:
  if (v17 - (char *)v21 != 8 * v19 * v16)
  {
    uint64_t v33 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)uint64_t v33 = 5;
    v33[1] = "OECF-SFR data overflow";
    *((unsigned char *)v33 + 16) = 0;
  }
  TXMPUtils<std::string>::ComposeStructFieldPath("http://ns.adobe.com/exif/1.0/", v36, "http://ns.adobe.com/exif/1.0/", "Values", (uint64_t)__p);
  uint64_t v23 = v16 * v19;
  if (v23)
  {
    if (v35 == 34856) {
      int v24 = "%ld/%ld";
    }
    else {
      int v24 = "%lu/%lu";
    }
    do
    {
      LODWORD(v25) = *v21;
      LODWORD(v26) = v21[1];
      unsigned int v27 = bswap32(*v21);
      unsigned int v28 = bswap32(v26);
      if (a2) {
        uint64_t v25 = v25;
      }
      else {
        uint64_t v25 = v27;
      }
      if (a2) {
        uint64_t v26 = v26;
      }
      else {
        uint64_t v26 = v28;
      }
      if (v26) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v25 == 0;
      }
      if (!v29)
      {
        unsigned int v32 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)unsigned int v32 = 5;
        v32[1] = "OECF-SFR data overflow";
        *((unsigned char *)v32 + 16) = 0;
      }
      snprintf(__str, 0x28uLL, v24, v25, v26);
      if (v38 >= 0) {
        int v30 = __p;
      }
      else {
        int v30 = (void **)__p[0];
      }
      TXMPMeta<std::string>::AppendArrayItem(a3, "http://ns.adobe.com/exif/1.0/", v30, 1024, (uint64_t)__str, 0);
      v21 += 2;
      --v23;
    }
    while (v23);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
}

void sub_188867648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned char *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    TXMPMeta<std::string>::DeleteProperty(v19, "http://ns.adobe.com/exif/1.0/", a13);
    __cxa_end_catch();
    JUMPOUT(0x188867560);
  }
  _Unwind_Resume(exception_object);
}

void ImportSingleTIFF_Byte(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v7 = **(unsigned __int8 **)(a1 + 8);
  *(void *)std::string __str = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  snprintf(__str, 0x14uLL, "%hu", v7);
  TXMPMeta<std::string>::SetProperty(a2, a3, a4, (uint64_t)__str, 0);
}

void sub_18886776C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x18886773CLL);
  }
  _Unwind_Resume(a1);
}

void ImportTIFF_GPSCoordinate(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a2 + 2) == 5 && *(_DWORD *)(a2 + 4))
  {
    int v7 = a1[73];
    unsigned __int16 v8 = *(_WORD *)a2 - 1;
    uint64_t v33 = 0;
    int v34 = 0;
    uint64_t v35 = 0;
    char v9 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, void, uint64_t *))(*(void *)a1 + 24))(a1, 3, v8, &v33);
    char v10 = HIDWORD(v33) ? v9 : 0;
    if (v10)
    {
      int v11 = *v34;
      if ((v11 - 69) <= 0x12 && ((1 << (v11 - 69)) & 0x44201) != 0)
      {
        unsigned int v13 = *(unsigned int **)(a2 + 8);
        if (v7) {
          unsigned int v14 = 1;
        }
        else {
          unsigned int v14 = 0x1000000;
        }
        unsigned int v15 = *v13;
        unsigned int v16 = v13[1];
        unsigned int v17 = *(_DWORD *)(a2 + 4);
        if (v17 < 2)
        {
          unsigned int v19 = 0;
          unsigned int v20 = 0;
          unsigned int v18 = v14;
        }
        else
        {
          unsigned int v19 = v13[2];
          unsigned int v18 = v13[3];
          if (v17 == 2)
          {
            unsigned int v20 = 0;
          }
          else
          {
            unsigned int v20 = v13[4];
            unsigned int v14 = v13[5];
          }
        }
        unsigned int v21 = bswap32(v15);
        unsigned int v22 = bswap32(v16);
        unsigned int v23 = bswap32(v19);
        unsigned int v24 = bswap32(v18);
        unsigned int v25 = bswap32(v20);
        unsigned int v26 = bswap32(v14);
        if (v7)
        {
          unsigned int v21 = v15;
          unsigned int v22 = v16;
          unsigned int v27 = v19;
        }
        else
        {
          unsigned int v27 = v23;
        }
        uint64_t v38 = 0;
        if (v7)
        {
          unsigned int v28 = v20;
        }
        else
        {
          unsigned int v18 = v24;
          unsigned int v28 = v25;
        }
        if (!v7) {
          unsigned int v14 = v26;
        }
        *(_OWORD *)std::string __str = 0uLL;
        long long v37 = 0uLL;
        if (v22 == 1 && v18 == 1 && v14 == 1)
        {
          snprintf(__str, 0x28uLL, "%lu,%lu,%lu%c");
LABEL_31:
          TXMPMeta<std::string>::SetProperty(a3, "http://ns.adobe.com/exif/1.0/", a4, (uint64_t)__str, 0);
          return;
        }
        if ((v22 || !v21) && (v18 || !v27) && (v14 || !v28))
        {
          if (v18 <= v22) {
            unsigned int v29 = v22;
          }
          else {
            unsigned int v29 = v18;
          }
          if (v14 <= v29) {
            unsigned int v30 = v29;
          }
          else {
            unsigned int v30 = v14;
          }
          int v31 = 1;
          if (v30 >= 0xB)
          {
            do
            {
              ++v31;
              BOOL v32 = v30 > 0x6D;
              v30 /= 0xAu;
            }
            while (v32);
          }
          snprintf(__str, 0x28uLL, "%.0f,%.*f%c");
          goto LABEL_31;
        }
      }
    }
  }
}

void sub_188867A5C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x188867944);
  }
  _Unwind_Resume(a1);
}

void PhotoDataUtils::Import3WayItems(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v43[0] = 0;
  v43[1] = 0;
  uint64_t v44 = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  __n128 v38 = 0uLL;
  memset(v37, 0, sizeof(v37));
  v36[0] = &unk_1ED4DED90;
  v36[1] = v37;
  if (!a4) {
    PhotoDataUtils::ExportIPTC(a3, (uint64_t)v36);
  }
  BOOL LocalizedText = TXMPMeta<std::string>::GetLocalizedText(a3, "http://purl.org/dc/elements/1.1/", "rights", "", "x-default", 0, (uint64_t)v43, 0);
  unint64_t NativeInfo = PhotoDataUtils::GetNativeInfo(a2, 116, v9, 0, &v38);
  if (NativeInfo) {
    char v11 = 1;
  }
  else {
    char v11 = LocalizedText;
  }
  if (v11)
  {
    if (a4) {
      BOOL v12 = LocalizedText;
    }
    else {
      BOOL v12 = 0;
    }
    if (NativeInfo && !v12) {
      PhotoDataUtils::ImportIPTC_LangAlt(a2, a3, 116, "http://purl.org/dc/elements/1.1/", "rights");
    }
  }
  else
  {
    int v13 = PhotoDataUtils::GetNativeInfo(a1, 0, 33432, (uint64_t)&v39);
    int v14 = v41;
    if (v41 > 1) {
      int v15 = v13;
    }
    else {
      int v15 = 0;
    }
    if (v15 == 1)
    {
      unint64_t v16 = 0;
      do
      {
        if (!*(unsigned char *)(v40 + v16))
        {
          *(unsigned char *)(v40 + v16) = 10;
          int v14 = v41;
        }
        ++v16;
      }
      while (v16 < (v14 - 1));
    }
    else if ((v13 & 1) == 0)
    {
      goto LABEL_28;
    }
    if (PhotoDataUtils::IsValueDifferent((uint64_t)&v39, (unsigned __int8 *)v43, &__p))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      TXMPMeta<std::string>::SetLocalizedText(a3, "http://purl.org/dc/elements/1.1/", "rights", "", "x-default", (const char *)p_p, 0);
    }
  }
LABEL_28:
  BOOL v18 = TXMPMeta<std::string>::GetLocalizedText(a3, "http://purl.org/dc/elements/1.1/", "description", "", "x-default", 0, (uint64_t)v43, 0);
  unint64_t v20 = PhotoDataUtils::GetNativeInfo(a2, 120, v19, 0, &v38);
  if (v20) {
    char v21 = 1;
  }
  else {
    char v21 = v18;
  }
  if (v21)
  {
    if (a4) {
      BOOL v22 = v18;
    }
    else {
      BOOL v22 = 0;
    }
    if (v20 && !v22) {
      PhotoDataUtils::ImportIPTC_LangAlt(a2, a3, 120, "http://purl.org/dc/elements/1.1/", "description");
    }
  }
  else if (PhotoDataUtils::GetNativeInfo(a1, 0, 270, (uint64_t)&v39) {
         && PhotoDataUtils::IsValueDifferent((uint64_t)&v39, (unsigned __int8 *)v43, &__p))
  }
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v23 = &__p;
    }
    else {
      unsigned int v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    TXMPMeta<std::string>::SetLocalizedText(a3, "http://purl.org/dc/elements/1.1/", "description", "", "x-default", (const char *)v23, 0);
  }
  BOOL DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a3, "http://purl.org/dc/elements/1.1/", "creator");
  PhotoDataUtils::GetNativeInfo(a1, 0, 315, (uint64_t)&v39);
  unint64_t v26 = PhotoDataUtils::GetNativeInfo(a2, 80, v25, 0, &v38);
  if (v26) {
    char v27 = 1;
  }
  else {
    char v27 = DoesPropertyExist;
  }
  if (v27)
  {
    if (a4) {
      BOOL v28 = DoesPropertyExist;
    }
    else {
      BOOL v28 = 0;
    }
    if (v26 && !v28) {
      PhotoDataUtils::ImportIPTC_Array(a2, a3, 80, "http://purl.org/dc/elements/1.1/", "creator");
    }
  }
  else if (PhotoDataUtils::GetNativeInfo(a1, 0, 315, (uint64_t)&v39) {
         && PhotoDataUtils::IsValueDifferent((uint64_t)&v39, (unsigned __int8 *)v43, &__p))
  }
  {
    TXMPUtils<std::string>::SeparateArrayItems(a3, (XMPMeta *)"http://purl.org/dc/elements/1.1/", "creator", (const char *)0x10000400, (char *)&__p);
  }
  v54[0] = 0;
  v54[1] = 0;
  uint64_t v55 = 0;
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v53 = 0;
  __n128 v50 = 0uLL;
  BOOL Property = TXMPMeta<std::string>::GetProperty(a3, "http://ns.adobe.com/xap/1.0/", "CreateDate", (uint64_t)v54, 0);
  unint64_t v31 = PhotoDataUtils::GetNativeInfo(a2, 62, v30, 0, &v50);
  if (v31) {
    char v32 = 1;
  }
  else {
    char v32 = Property;
  }
  if (v32)
  {
    if (a4) {
      BOOL v33 = Property;
    }
    else {
      BOOL v33 = 0;
    }
    if (v31 && !v33) {
      PhotoDataUtils::ImportIPTC_Date(62, a2, a3);
    }
  }
  else
  {
    int v34 = PhotoDataUtils::GetNativeInfo(a1, 2, 36868, (uint64_t)&v51);
    if (WORD1(v51) == 2) {
      int v35 = v34;
    }
    else {
      int v35 = 0;
    }
    if (v35 == 1)
    {
      uint64_t v49 = 0;
      memset(v48, 0, sizeof(v48));
      TIFF_FileWriter::TIFF_FileWriter((TIFF_FileWriter *)v48);
      uint64_t v45 = 0;
      __s2 = 0;
      uint64_t v47 = 0;
      ExportTIFF_Date(a3, "http://ns.adobe.com/xap/1.0/", "CreateDate", (TIFF_Manager *)v48, 36868);
      if (!TIFF_FileWriter::GetTag((TIFF_FileWriter *)v48, (TIFF_FileWriter *)2, 0x9004u, (uint64_t)&v45)
        || v53 != v47
        || strncmp(v52, __s2, v53))
      {
        ImportTIFF_Date(a1, (unsigned __int16 *)&v51, a3, "http://ns.adobe.com/xap/1.0/", "CreateDate");
      }
      TIFF_FileWriter::~TIFF_FileWriter((TIFF_FileWriter *)v48);
    }
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[0]);
  }
  IPTC_Writer::~IPTC_Writer((IPTC_Writer *)v36);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
}

void sub_188867FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  TIFF_FileWriter::~TIFF_FileWriter((TIFF_FileWriter *)&a35);
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  IPTC_Writer::~IPTC_Writer((IPTC_Writer *)&a9);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void PhotoDataUtils::ExportExif (uint64_t a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  memset(&__str, 0, sizeof(__str));
  int v72 = 0;
  HIBYTE(v7std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  LODWORD(v7std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, &v71)
    && (v71 & 0x200) != 0
    && TXMPMeta<std::string>::GetArrayItem(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1, (uint64_t)&__str, 0))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", (uint64_t)p_str, 0);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "CameraOwnerName")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/aux/", "OwnerName", (uint64_t)&__str, 0))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v5 = &__str;
    }
    else {
      char v5 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "CameraOwnerName", (uint64_t)v5, 0);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "BodySerialNumber")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/aux/", "SerialNumber", (uint64_t)&__str, 0))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v6 = &__str;
    }
    else {
      int v6 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "BodySerialNumber", (uint64_t)v6, 0);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "LensModel")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/aux/", "Lens", (uint64_t)&__str, 0))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &__str;
    }
    else {
      int v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "LensModel", (uint64_t)v7, 0);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "LensSpecification")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/aux/", "LensInfo", (uint64_t)&__str, 0))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v80 = 0;
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::size_type v9 = 0;
      do
      {
        std::string::size_type v10 = std::string::find(&__str, 32, v9);
        if (v10 == v9)
        {
          std::string::size_type v11 = v9;
        }
        else
        {
          std::string::size_type v11 = v10;
          if (v10 == -1)
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              std::string::size_type v11 = __str.__r_.__value_.__l.__size_;
            }
            else {
              std::string::size_type v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            }
          }
          std::string::basic_string(&v78, &__str, v9, v11 - v9, (std::allocator<char> *)v75);
          if (SBYTE7(v80) < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)std::string __p = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
          *(void *)&long long v80 = *((void *)&v78.__r_.__value_.__l + 2);
          if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v12 = __p;
          }
          else {
            BOOL v12 = (void **)v78.__r_.__value_.__r.__words[0];
          }
          TXMPMeta<std::string>::AppendArrayItem(a1, "http://cipa.jp/exif/1.0/", "LensSpecification", 1024, (uint64_t)v12, 0);
        }
        std::string::size_type v9 = v11 + 1;
        std::string::size_type v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v13 = __str.__r_.__value_.__l.__size_;
        }
      }
      while (v9 < v13);
      if (SBYTE7(v80) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  ExportTIFF_StandardMappings(0, (unsigned __int8 *)a2, a1);
  ExportTIFF_StandardMappings(2, (unsigned __int8 *)a2, a1);
  ExportTIFF_StandardMappings(3, (unsigned __int8 *)a2, a1);
  uint64_t v70 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, 3, 6, &v70))
  {
    if (v70 < 0)
    {
      uint64_t v14 = -HIDWORD(v70);
      uint64_t v16 = -(int)v70;
      BOOL v15 = -(int)v70 < 0;
      LODWORD(v70) = -(int)v70;
      HIDWORD(v70) = -HIDWORD(v70);
      if (!v15) {
        goto LABEL_57;
      }
    }
    else if ((v70 & 0x80000000) == 0)
    {
      goto LABEL_58;
    }
    TIFF_Manager::SetTag_Byte((TIFF_Manager *)a2, 3, 5, 1);
    uint64_t v14 = HIDWORD(v70);
    uint64_t v16 = -(int)v70;
    LODWORD(v70) = -(int)v70;
LABEL_57:
    TIFF_Manager::SetTag_Rational((void (**)(uint64_t, uint64_t *))a2, 3, 6, v16, v14);
  }
LABEL_58:
  ExportTIFF_LocTextASCII(a1, "description", a2, 270);
  ExportTIFF_EncodedString(a1, "UserComment", a2, 2, 37510, 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 36868, 0)) {
    ExportTIFF_Date(a1, "http://ns.adobe.com/xap/1.0/", "CreateDate", (TIFF_Manager *)a2, 36868);
  }
  ExportTIFF_Date(a1, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal", (TIFF_Manager *)a2, 36867);
  ExportTIFF_Date(a1, "http://ns.adobe.com/xap/1.0/", "ModifyDate", (TIFF_Manager *)a2, 306);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v80 = 0;
  LODWORD(v78.__r_.__value_.__l.__data_) = 0;
  if (TXMPMeta<std::string>::GetProperty(a1, "http://purl.org/dc/elements/1.1/", "creator", 0, (uint64_t *)&v78))
  {
    if ((v78.__r_.__value_.__s.__data_[1] & 2) != 0)
    {
      TXMPUtils<std::string>::CatenateArrayItems(a1, "http://purl.org/dc/elements/1.1/", "creator", 0, 0, 0x10000400u, (uint64_t)__p);
      std::string::push_back((std::string *)__p, 0);
      uint64_t v17 = (SBYTE7(v80) & 0x80u) == 0 ? BYTE7(v80) : LODWORD(__p[1]);
      BOOL v18 = (SBYTE7(v80) & 0x80u) == 0 ? __p : (void **)__p[0];
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 32))(a2, 0, 315, 2, v17, v18);
      if (SBYTE7(v80) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 40))(a2, 0, 315);
  }
  ExportTIFF_LocTextASCII(a1, "rights", a2, 33432);
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "ExifVersion", (uint64_t)&__str, 0))
  {
    std::string::size_type v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v19 = __str.__r_.__value_.__l.__size_;
    }
    if (v19 == 4
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 36864, 0) & 1) == 0)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v20 = &__str;
      }
      else {
        unint64_t v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(void *)a2 + 32))(a2, 2, 36864, 7, 4, v20);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v80 = 0;
  memset(&v78, 0, sizeof(v78));
  *(_DWORD *)int v74 = 0;
  *(_DWORD *)int v75 = 0;
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 36864, __p);
  if (WORD1(__p[0]) == 7) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  if (v22 == 1 && HIDWORD(__p[0]) == 4 && (strncmp((const char *)__p[1], "0230", 4uLL) & 0x80000000) == 0)
  {
    if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity")
      && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, (uint64_t *)v75)
      && (v75[1] & 2) != 0
      && (int)TXMPMeta<std::string>::CountArrayItems(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings") >= 1)
    {
      TXMPMeta<std::string>::GetArrayItem(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1, (uint64_t)&v78, 0);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v24 = &v78;
      }
      else {
        unsigned int v24 = (std::string *)v78.__r_.__value_.__r.__words[0];
      }
      TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", (uint64_t)v24, 0);
    }
    TXMPMeta<std::string>::DeleteProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
    BOOL Property_Int = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", (int *)v74, 0);
    BOOL v26 = *(int *)v74 >= 0 && Property_Int;
    if (v26 && *(int *)v74 < 0x10000)
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 34855, __p) & 1) == 0)TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 34855, v74[0]); {
    }
      }
    else if (Property_Int)
    {
      int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 34855, 0);
      int v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 34864, 0);
      int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 34867, 0);
      BOOL DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "SensitivityType");
      BOOL v31 = TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "ISOSpeed");
      if (((v27 | v28 | v29) & 1) == 0)
      {
        BOOL v32 = v31;
        TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 34855, 0xFFFFLL);
        if (!DoesPropertyExist && !v32)
        {
          TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "SensitivityType", (uint64_t)"3", 0);
          TXMPMeta<std::string>::SetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "ISOSpeed", *(unsigned int *)v74, 0);
        }
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 34864, __p) & 1) == 0)
    {
      BOOL v33 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "SensitivityType", (int *)v74, 0);
      BOOL v34 = *(int *)v74 >= 0 && v33;
      if (v34 && *(int *)v74 < 0x10000) {
        TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 34864, v74[0]);
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 34865, __p) & 1) == 0)
    {
      BOOL v35 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "StandardOutputSensitivity", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v35) {
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34865, *(unsigned int *)v74);
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 34866, __p) & 1) == 0)
    {
      BOOL v37 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "RecommendedExposureIndex", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v37) {
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34866, *(unsigned int *)v74);
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 34867, __p) & 1) == 0)
    {
      BOOL v39 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "ISOSpeed", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v39) {
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34867, *(unsigned int *)v74);
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 34868, __p) & 1) == 0)
    {
      BOOL v41 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "ISOSpeedLatitudeyyy", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v41) {
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34868, *(unsigned int *)v74);
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 34869, __p) & 1) == 0)
    {
      BOOL v43 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "ISOSpeedLatitudezzz", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v43) {
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34869, *(unsigned int *)v74);
      }
    }
  }
  else if ((TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, (uint64_t *)v75)&& ((v75[1] & 2) == 0|| (int)TXMPMeta<std::string>::CountArrayItems(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings") < 1|| TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings[1]", (int *)v74, 0))|| TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", (int *)v74, 0)) {
         && (*(_DWORD *)v74 & 0x80000000) == 0
  }
         && *(int *)v74 < 0x10000)
  {
    TXMPMeta<std::string>::DeleteProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, 2, 34855, __p) & 1) == 0) {
      TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 34855, v74[0]);
    }
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration")
    && TXMPMeta<std::string>::CountArrayItems(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration") == 4&& ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 37121, 0) & 1) == 0)
  {
    LODWORD(__p[0]) = 0;
    TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration[1]", &v72, 0);
    LOBYTE(__p[0]) = v72;
    TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration[2]", &v72, 0);
    BYTE1(__p[0]) = v72;
    TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration[3]", &v72, 0);
    BYTE2(__p[0]) = v72;
    TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration[4]", &v72, 0);
    BYTE3(__p[0]) = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 32))(a2, 2, 37121, 7, 4, __p);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a1, "http://ns.adobe.com/exif/1.0/", "Flash")
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 37385, 0) & 1) == 0)
  {
    LOBYTE(__p[0]) = 0;
    __int16 Property_Bool = TXMPMeta<std::string>::GetProperty_Bool(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:Fired", __p, 0);
    int v46 = LOBYTE(__p[0]);
    BOOL v47 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:Return", &v72, 0);
    char v48 = v72;
    BOOL v49 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:Mode", &v72, 0);
    char v50 = v72;
    BOOL v51 = TXMPMeta<std::string>::GetProperty_Bool(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:Function", __p, 0);
    int v52 = LOBYTE(__p[0]);
    BOOL v53 = TXMPMeta<std::string>::GetProperty_Bool(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:RedEyeMode", __p, 0);
    __int16 v54 = 2 * (v48 & 3);
    if (!v47) {
      __int16 v54 = 0;
    }
    if (v46) {
      __int16 v55 = Property_Bool;
    }
    else {
      __int16 v55 = 0;
    }
    __int16 v56 = v54 | v55;
    __int16 v57 = 8 * (v50 & 3);
    if (!v49) {
      __int16 v57 = 0;
    }
    unsigned __int16 v58 = v56 | v57;
    if (v51 && v52 != 0) {
      unsigned __int16 v59 = v58 | 0x20;
    }
    else {
      unsigned __int16 v59 = v58;
    }
    if (v53 && LOBYTE(__p[0]) != 0) {
      v59 |= 0x40u;
    }
    TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 37385, v59);
  }
  if (TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "FileSource", &v72, 0)
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 41728, 0) & 1) == 0)
  {
    HIBYTE(v7std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)a2 + 32))(a2, 2, 41728, 7, 1, (char *)&v71 + 7);
  }
  if (TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "SceneType", &v72, 0)
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 2, 41729, 0) & 1) == 0)
  {
    HIBYTE(v7std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)a2 + 32))(a2, 2, 41729, 7, 1, (char *)&v71 + 7);
  }
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "GPSVersionID", (uint64_t)&__str, 0)
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 24))(a2, 3, 0, 0) & 1) == 0)
  {
    LODWORD(v78.__r_.__value_.__l.__data_) = 0;
    __p[0] = 0;
    __p[1] = 0;
    int32x4_t v60 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__str
        : (std::string *)__str.__r_.__value_.__r.__words[0];
    if (sscanf((const char *)v60, "%u.%u.%u.%u", __p, (char *)__p + 4, &__p[1], (char *)&__p[1] + 4) == 4
      && LODWORD(__p[0]) <= 0xFF
      && HIDWORD(__p[0]) <= 0xFF
      && LODWORD(__p[1]) <= 0xFF
      && HIDWORD(__p[1]) <= 0xFF)
    {
      v78.__r_.__value_.__s.__data_[0] = (std::string::value_type)__p[0];
      v78.__r_.__value_.__s.__data_[1] = BYTE4(__p[0]);
      v78.__r_.__value_.__s.__data_[2] = (std::string::value_type)__p[1];
      v78.__r_.__value_.__s.__data_[3] = BYTE4(__p[1]);
      (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, std::string *))(*(void *)a2 + 32))(a2, 3, 0, 1, 4, &v78);
    }
  }
  ExportTIFF_GPSCoordinate(a1, "GPSLatitude", (void (**)(void, void))a2, 2);
  ExportTIFF_GPSCoordinate(a1, "GPSLongitude", (void (**)(void, void))a2, 4);
  uint64_t v81 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v80 = 0u;
  if (TXMPMeta<std::string>::GetProperty_Date(a1, "http://ns.adobe.com/exif/1.0/", "GPSTimeStamp", (long long *)__p, 0))
  {
    TXMPUtils<std::string>::ConvertToUTCTime((uint64_t)__p);
    memset(&v78, 0, sizeof(v78));
    (*(void (**)(void, std::string *))(a2 + 48))(HIDWORD(__p[1]), &v78);
    (*(void (**)(uint64_t, std::string::value_type *))(a2 + 48))(1, &v78.__r_.__value_.__s.__data_[4]);
    (*(void (**)(void, std::string::size_type *))(a2 + 48))(v80, &v78.__r_.__value_.__l.__size_);
    (*(void (**)(uint64_t, std::string::value_type *))(a2 + 48))(1, &v78.__r_.__value_.__s.__data_[12]);
    int v61 = HIDWORD(v81);
    if (HIDWORD(v81))
    {
      int v62 = DWORD1(v80);
      *(void *)int v75 = 0;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      int v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a2 + 24))(a2, 3, 7, v75);
      unint64_t v64 = 1000000;
      if (*(unsigned __int16 *)&v75[2] == 5) {
        int v65 = v63;
      }
      else {
        int v65 = 0;
      }
      if (v65 == 1 && *(_DWORD *)&v75[4] == 3)
      {
        unsigned int v66 = (*(uint64_t (**)(uint64_t))(a2 + 16))(v76 + 20);
        if (v66 == 1) {
          unint64_t v64 = 1000000;
        }
        else {
          unint64_t v64 = v66;
        }
      }
      for (double i = ((double)v61 / 1000000000.0 + (double)v62) * (double)v64 + 0.5;
            i > 4000000000.0;
            unint64_t v64 = v64 / 0xAuLL)
      {
        double i = i / 10.0;
      }
      (*(void (**)(void, std::string::size_type *))(a2 + 48))(i, &v78.__r_.__value_.__r.__words[2]);
      (*(void (**)(unint64_t, std::string::value_type *))(a2 + 48))(v64, &v78.__r_.__value_.__s.__data_[20]);
    }
    else
    {
      (*(void (**)(void, std::string::size_type *))(a2 + 48))(DWORD1(v80), &v78.__r_.__value_.__r.__words[2]);
      (*(void (**)(uint64_t, std::string::value_type *))(a2 + 48))(1, &v78.__r_.__value_.__s.__data_[20]);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(void *)a2 + 32))(a2, 3, 7, 5, 3, &v78);
    *(void *)int v75 = 0;
    uint64_t v76 = 0;
    snprintf(v75, 0xCuLL, "%04d:%02d:%02d", LODWORD(__p[0]), HIDWORD(__p[0]), LODWORD(__p[1]));
    if (!BYTE2(v76)) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)a2 + 32))(a2, 3, 29, 2, 11, v75);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, 3, 7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, 3, 29);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a1, "http://ns.adobe.com/exif/1.0/", "GPSDestLatitude")
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 3, 20, 0) & 1) == 0)
  {
    ExportTIFF_GPSCoordinate(a1, "GPSDestLatitude", (void (**)(void, void))a2, 20);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a1, "http://ns.adobe.com/exif/1.0/", "GPSDestLongitude")
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 3, 22, 0) & 1) == 0)
  {
    ExportTIFF_GPSCoordinate(a1, "GPSDestLongitude", (void (**)(void, void))a2, 22);
  }
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "GPSProcessingMethod", (uint64_t)&__str, 0))
  {
    std::string::size_type v68 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v68 = __str.__r_.__value_.__l.__size_;
    }
    if (v68
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 3, 27, 0) & 1) == 0)
    {
      ExportTIFF_EncodedString(a1, "GPSProcessingMethod", a2, 3, 27, 0);
    }
  }
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "GPSAreaInformation", (uint64_t)&__str, 0))
  {
    std::string::size_type v69 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = __str.__r_.__value_.__l.__size_;
    }
    if (v69
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 24))(a2, 3, 28, 0) & 1) == 0)
    {
      ExportTIFF_EncodedString(a1, "GPSAreaInformation", a2, 3, 28, 0);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1888698F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2)
  {
    if (a32 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x188868E88);
  }
  _Unwind_Resume(exception_object);
}

void ExportTIFF_StandardMappings(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v54 = a2[73];
  int v55 = 0;
  memset(v59, 0, sizeof(v59));
  std::string __p = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  if (a1)
  {
    if (a1 == 3)
    {
      int v6 = &sGPSInfoIFDMappings;
    }
    else
    {
      if (a1 != 2)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 9;
        exception[1] = "Invalid IFD for standard mappings";
        *((unsigned char *)exception + 16) = 0;
      }
      int v6 = &sExifIFDMappings;
    }
  }
  else
  {
    int v6 = &sPrimaryIFDMappings;
  }
  int v7 = (unsigned __int16)*v6;
  if (v7 != 0xFFFF)
  {
    uint64_t v8 = 0;
    while (1)
    {
      std::string::size_type v9 = &v6[16 * v8];
      int v10 = *((unsigned __int8 *)v9 + 8);
      if (!*((unsigned char *)v9 + 8)) {
        goto LABEL_15;
      }
      std::string::size_type v11 = (char *)*((void *)v9 + 3);
      if (!*v11) {
        goto LABEL_15;
      }
      char v12 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, void, void *))(*(void *)a2 + 24))(a2, a1, (unsigned __int16)v7, v59);
      char v13 = v12;
      char v14 = v10 == 3 ? v12 : 0;
      if (v14) {
        goto LABEL_15;
      }
      BOOL v15 = *(char **)&v6[16 * v8 + 8];
      if (!TXMPMeta<std::string>::GetProperty(a3, v15, v11, (uint64_t)&__p, (uint64_t *)&v55)) {
        break;
      }
      if (WORD1(v59[0]) == 7) {
        __assert_rtn("ExportTIFF_StandardMappings", "ReconcileTIFF.cpp", 2701, "tagInfo.type != kTIFF_UndefinedType");
      }
      uint64_t v16 = &v6[16 * v8];
      int v17 = *((_DWORD *)v16 + 1);
      if (v17 == 1 || (int v18 = (unsigned __int16)v16[1], v18 == 2))
      {
        if ((v55 & 0x1F00) == 0)
        {
          int v19 = (unsigned __int16)v6[16 * v8 + 1];
          if (v17 != 1 && v19 != 2)
          {
            int v21 = 2517;
            int v22 = "ExportSingleTIFF";
            unint64_t v20 = "(mapInfo.count == 1) || (mapInfo.type == kTIFF_ASCIIType)";
            goto LABEL_117;
          }
          if (!*v11)
          {
            int v21 = 2518;
            int v22 = "ExportSingleTIFF";
            goto LABEL_115;
          }
          char v67 = 0;
          unint64_t v20 = "false";
          int v21 = 2585;
          int v22 = "ExportSingleTIFF";
          switch(v19)
          {
            case 0:
              *(void *)int v63 = 0;
              if (v58 >= 0) {
                p_p = (const char *)&__p;
              }
              else {
                p_p = (const char *)__p;
              }
              if (sscanf(p_p, "%lu%c", v63, &v67) == 1)
              {
                if (*(void *)v63 >> 16) {
                  TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, a1, (unsigned __int16)v7, *(uint64_t *)v63);
                }
                else {
                  TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, a1, (unsigned __int16)v7, LOWORD(v63[0]));
                }
              }
              goto LABEL_15;
            case 1:
              *(_WORD *)unsigned int v66 = 0;
              if (v58 >= 0) {
                BOOL v34 = (const char *)&__p;
              }
              else {
                BOOL v34 = (const char *)__p;
              }
              if (sscanf(v34, "%hu%c", v66, &v67) == 1) {
                TIFF_Manager::SetTag_Byte((TIFF_Manager *)a2, a1, (unsigned __int16)v7, v66[0]);
              }
              goto LABEL_15;
            case 2:
              int v35 = HIBYTE(v58);
              if (v58 >= 0)
              {
                int v36 = &__p;
              }
              else
              {
                int v35 = v57;
                int v36 = __p;
              }
              (*(void (**)(unsigned __int8 *, uint64_t, void, uint64_t, void, void *))(*(void *)a2 + 32))(a2, a1, (unsigned __int16)v7, 2, (v35 + 1), v36);
              goto LABEL_15;
            case 3:
              *(void *)int v65 = 0;
              if (v58 >= 0) {
                __n128 v38 = (const char *)&__p;
              }
              else {
                __n128 v38 = (const char *)__p;
              }
              if (sscanf(v38, "%lu%c", v65, &v67) == 1) {
                TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, a1, (unsigned __int16)v7, v65[0]);
              }
              goto LABEL_15;
            case 4:
              *(void *)unint64_t v64 = 0;
              if (v58 >= 0) {
                BOOL v33 = (const char *)&__p;
              }
              else {
                BOOL v33 = (const char *)__p;
              }
              if (sscanf(v33, "%lu%c", v64, &v67) == 1) {
                TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, a1, (unsigned __int16)v7, v64[0]);
              }
              goto LABEL_15;
            case 5:
              *(void *)int v62 = 0;
              if (v58 >= 0) {
                BOOL v37 = (const char *)&__p;
              }
              else {
                BOOL v37 = (const char *)__p;
              }
              if (DecodeRational(v37, &v62[1], v62)) {
                TIFF_Manager::SetTag_Rational((void (**)(uint64_t, uint64_t *))a2, a1, (unsigned __int16)v7, v62[1], v62[0]);
              }
              goto LABEL_15;
            case 10:
              uint64_t v60 = 0;
              *(void *)int v61 = 0;
              if (v58 >= 0) {
                BOOL v39 = (const char *)&__p;
              }
              else {
                BOOL v39 = (const char *)__p;
              }
              int v40 = sscanf(v39, "%ld/%ld%c", v61, &v60, &v67);
              if (v40 == 1)
              {
                uint64_t v41 = 1;
                uint64_t v60 = 1;
              }
              else
              {
                if (v40 != 2) {
                  goto LABEL_15;
                }
                uint64_t v41 = v60;
              }
              TIFF_Manager::SetTag_SRational((void (**)(uint64_t, uint64_t *))a2, a1, (unsigned __int16)v7, v61[0], v41);
              break;
            default:
              goto LABEL_117;
          }
        }
        goto LABEL_15;
      }
      if ((v55 & 0x200) != 0)
      {
        if (!*v11)
        {
          int v21 = 2604;
          int v22 = "ExportArrayTIFF";
LABEL_115:
          unint64_t v20 = "mapInfo.name[0] != 0";
LABEL_117:
          __assert_rtn(v22, "ReconcileTIFF.cpp", v21, v20);
        }
        if (v18 != 5 && v18 != 3)
        {
          int v21 = 2605;
          int v22 = "ExportArrayTIFF";
          unint64_t v20 = "(mapInfo.type == kTIFF_ShortType) || (mapInfo.type == kTIFF_RationalType)";
          goto LABEL_117;
        }
        if (!TXMPMeta<std::string>::DoesPropertyExist(a3, v15, v11))
        {
          int v21 = 2606;
          int v22 = "ExportArrayTIFF";
          unint64_t v20 = "xmp.DoesPropertyExist(xmpNS, xmpArray)";
          goto LABEL_117;
        }
        uint64_t v25 = TXMPMeta<std::string>::CountArrayItems(a3, v15, v11);
        if (v25)
        {
          unint64_t v53 = (int)v25;
          if (v18 == 5)
          {
            uint64_t v50 = v25;
            uint64_t v52 = a3;
            memset(&v75, 0, sizeof(v75));
            LODWORD(__u) = 0;
            std::vector<unsigned int>::assign(&v75, 2 * (int)v25, (std::vector<unsigned int>::const_reference)&__u);
            std::vector<unsigned int>::pointer begin = v75.__begin_;
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            v70[0] = 0;
            v70[1] = 0;
            uint64_t v71 = 0;
            __u = 0;
            unsigned int v69 = 0;
            unint64_t v43 = 1;
            unsigned int v68 = 0;
            do
            {
              TXMPUtils<std::string>::ComposeArrayItemPath(v15, v11, v43, (uint64_t)&__u);
              if (v74 >= 0) {
                p_u = (void **)&__u;
              }
              else {
                p_u = __u;
              }
              if (!TXMPMeta<std::string>::GetProperty(v52, v15, p_u, (uint64_t)v70, 0)
                || (v71 >= 0 ? (uint64_t v45 = (const char *)v70) : (uint64_t v45 = (const char *)v70[0]),
                    !DecodeRational(v45, &v69, &v68)))
              {
                if (SHIBYTE(v71) < 0) {
                  operator delete(v70[0]);
                }
                a3 = v52;
                if (SHIBYTE(v74) < 0) {
                  operator delete(__u);
                }
                std::vector<unsigned int>::pointer v32 = v75.__begin_;
                if (v75.__begin_)
                {
                  v75.__end_ = v75.__begin_;
                  goto LABEL_107;
                }
                goto LABEL_15;
              }
              unsigned int v46 = v69;
              unsigned int v47 = v68;
              if (!v54)
              {
                unsigned int v46 = bswap32(v69);
                unsigned int v69 = v46;
                unsigned int v47 = bswap32(v68);
                unsigned int v68 = v47;
              }
              *std::vector<unsigned int>::pointer begin = v46;
              begin[1] = v47;
              begin += 2;
              ++v43;
            }
            while (v43 <= v53);
            (*(void (**)(unsigned __int8 *, uint64_t, void, uint64_t, uint64_t, std::vector<unsigned int>::pointer))(*(void *)a2 + 32))(a2, a1, (unsigned __int16)v7, 5, v50, v75.__begin_);
            a3 = v52;
            if (SHIBYTE(v71) < 0) {
              operator delete(v70[0]);
            }
            if ((SHIBYTE(v74) & 0x80000000) == 0) {
              goto LABEL_52;
            }
LABEL_51:
            operator delete(__u);
          }
          else
          {
            uint64_t v49 = v25;
            uint64_t v51 = a3;
            memset(&v75, 0, sizeof(v75));
            LOWORD(__u) = 0;
            std::vector<unsigned short>::assign((char **)&v75, (int)v25, &__u);
            uint64_t v26 = 0;
            std::vector<unsigned int>::pointer v27 = v75.__begin_;
            __u = 0;
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            LODWORD(v70[0]) = 0;
            do
            {
              TXMPUtils<std::string>::ComposeArrayItemPath(v15, v11, v26 + 1, (uint64_t)&__u);
              if (v74 >= 0) {
                int v28 = (const char *)&__u;
              }
              else {
                int v28 = (const char *)__u;
              }
              TXMPMeta<std::string>::GetProperty_Int(v51, v15, v28, (int *)v70, 0);
              __int16 v29 = (__int16)v70[0];
              unsigned int v30 = bswap32(LOWORD(v70[0])) >> 16;
              if (!v54) {
                __int16 v29 = v30;
              }
              *((_WORD *)v27 + v26) = v29;
              unint64_t v31 = v26 + 2;
              ++v26;
            }
            while (v31 <= v53);
            (*(void (**)(unsigned __int8 *, uint64_t, void, uint64_t, uint64_t, std::vector<unsigned int>::pointer))(*(void *)a2 + 32))(a2, a1, (unsigned __int16)v7, 3, v49, v75.__begin_);
            a3 = v51;
            if (SHIBYTE(v74) < 0) {
              goto LABEL_51;
            }
          }
LABEL_52:
          std::vector<unsigned int>::pointer v32 = v75.__begin_;
          if (v75.__begin_)
          {
            v75.__end_ = v75.__begin_;
LABEL_107:
            operator delete(v32);
          }
          goto LABEL_15;
        }
LABEL_35:
        (*(void (**)(unsigned __int8 *, uint64_t, void))(*(void *)a2 + 40))(a2, a1, (unsigned __int16)v7);
      }
LABEL_15:
      ++v8;
      int v7 = (unsigned __int16)v6[16 * v8];
      if (v7 == 0xFFFF)
      {
        if (SHIBYTE(v58) < 0) {
          operator delete(__p);
        }
        return;
      }
    }
    char v24 = v13 ^ 1;
    if (v10 != 1) {
      char v24 = 1;
    }
    if (v24) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
}

void sub_18886A318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ExportTIFF_LocTextASCII(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (TXMPMeta<std::string>::GetLocalizedText(a1, "http://purl.org/dc/elements/1.1/", a2, "", "x-default", 0, (uint64_t)&__p, 0))
  {
    int v6 = HIBYTE(v10);
    if (v10 >= 0)
    {
      p_p = &__p;
    }
    else
    {
      int v6 = v9;
      p_p = __p;
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, void, void *))(*(void *)a3 + 32))(a3, 0, a4, 2, (v6 + 1), p_p);
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a3 + 40))(a3, 0, a4);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
}

void sub_18886A464(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18886A454);
}

void ExportTIFF_EncodedString(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v19 = 0;
  if (!TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", a2, (uint64_t)&v20, (uint64_t *)&v19))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 40))(a3, a4, a5);
    goto LABEL_22;
  }
  if (a6)
  {
    if ((v19 & 0x1000) == 0
      || !TXMPMeta<std::string>::GetLocalizedText(a1, "http://ns.adobe.com/exif/1.0/", a2, "", "x-default", 0, (uint64_t)&v20, 0))
    {
      goto LABEL_22;
    }
  }
  else if ((v19 & 0x1F00) != 0)
  {
    goto LABEL_22;
  }
  uint64_t v12 = HIBYTE(v22);
  if (v22 < 0) {
    uint64_t v12 = v21;
  }
  if (v12)
  {
    char v13 = (char *)&v20;
    if (v22 < 0) {
      char v13 = (char *)v20;
    }
    while (1)
    {
      int v14 = *v13++;
      if (v14 < 0) {
        break;
      }
      if (!--v12) {
        goto LABEL_15;
      }
    }
    uint64_t v15 = 2;
  }
  else
  {
LABEL_15:
    uint64_t v15 = 1;
  }
  if (v22 >= 0) {
    uint64_t v16 = (char *)&v20;
  }
  else {
    uint64_t v16 = (char *)v20;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)a3 + 176))(a3, a4, a5, __p, v15);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
LABEL_22:
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
}

void sub_18886A628(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18886A610);
}

void ExportTIFF_Date(uint64_t a1, unsigned char *a2, unsigned char *a3, TIFF_Manager *a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a5 == 306) {
    int v7 = 37520;
  }
  else {
    int v7 = 0;
  }
  if (a5 == 306) {
    int v8 = 36880;
  }
  else {
    int v8 = 0;
  }
  if (a5 == 306) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = 2;
  }
  if (a5 == 36867) {
    unsigned int v10 = 37521;
  }
  else {
    unsigned int v10 = v7;
  }
  if (a5 == 36867) {
    unsigned int v11 = 36881;
  }
  else {
    unsigned int v11 = v8;
  }
  if (a5 == 36867) {
    unsigned int v9 = 2;
  }
  unsigned int v30 = 0;
  unint64_t v31 = 0;
  if (a5 == 36868) {
    uint64_t v12 = 37522;
  }
  else {
    uint64_t v12 = v10;
  }
  if (a5 == 36868) {
    uint64_t v13 = 36882;
  }
  else {
    uint64_t v13 = v11;
  }
  uint64_t v32 = 0;
  if (a5 == 36868) {
    uint64_t v14 = 2;
  }
  else {
    uint64_t v14 = v9;
  }
  if (TXMPMeta<std::string>::GetProperty(a1, a2, a3, (uint64_t)&v30, 0))
  {
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    if (v32 >= 0) {
      uint64_t v15 = (char *)&v30;
    }
    else {
      uint64_t v15 = v30;
    }
    TXMPUtils<std::string>::ConvertToDate(v15, (uint64_t)&v27);
    *(void *)std::string __str = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    snprintf(__str, 0x18uLL, "%04d:%02d:%02d %02d:%02d:%02d", v27, DWORD1(v27), DWORD2(v27), HIDWORD(v27), v28, DWORD1(v28));
    unint64_t v16 = HIBYTE(v32);
    if (v32 < 0) {
      unint64_t v16 = v31;
    }
    if (v16 <= 0x11)
    {
      *(_WORD *)((char *)&v35 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 8224;
      if (v16 <= 0xE)
      {
        HIWORD(v34) = 8224;
        if (v16 <= 0xB)
        {
          *(_WORD *)((char *)&v34 + 3) = 8224;
          if (v16 <= 8)
          {
            LOWORD(v34) = 8224;
            if (v16 <= 5)
            {
              *(_WORD *)&__str[5] = 8224;
              if (!v16) {
                *(_DWORD *)std::string __str = 538976288;
              }
            }
          }
        }
      }
    }
    TIFF_Manager::SetTag_ASCII(a4, v14, a5, __str);
    if (HIDWORD(v29))
    {
      snprintf(__str, 0x18uLL, "%09d", HIDWORD(v29));
      size_t v17 = strlen(__str);
      size_t v18 = v17 - 1;
      if (v17 != 1)
      {
        do
        {
          if (__str[v18] != 48) {
            break;
          }
          __str[v18--] = 0;
        }
        while (v18);
      }
      TIFF_Manager::SetTag_ASCII(a4, 2, v12, __str);
    }
    else
    {
      (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(void *)a4 + 40))(a4, 2, v12);
    }
    uint64_t v24 = 0;
    std::string __s1 = 0;
    uint64_t v26 = 0;
    int v19 = (*(uint64_t (**)(TIFF_Manager *, uint64_t, uint64_t, uint64_t *))(*(void *)a4 + 24))(a4, 2, 36864, &v24);
    if (WORD1(v24) == 7) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    BOOL v21 = v20 == 1 && HIDWORD(v24) == 4;
    if (v21 && (strncmp(__s1, "0231", 4uLL) & 0x80000000) == 0)
    {
      if (BYTE10(v28) && (BYTE11(v28) == 1 || BYTE11(v28) == 255))
      {
        *(_DWORD *)&__s[3] = 0;
        *(_DWORD *)__s = 0;
        uint64_t v22 = 43;
        if (BYTE11(v28) == 255) {
          uint64_t v22 = 45;
        }
        snprintf(__s, 7uLL, "%c%02d:%02d", v22, HIDWORD(v28), v29);
        TIFF_Manager::SetTag_ASCII(a4, 2, v13, __s);
      }
      else
      {
        (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(void *)a4 + 40))(a4, 2, v13);
      }
    }
  }
  else
  {
    (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(void *)a4 + 40))(a4, v14, a5);
    (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(void *)a4 + 40))(a4, 2, v12);
    (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(void *)a4 + 40))(a4, 2, v13);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
}

void sub_18886AA54(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 - 81) < 0) {
      operator delete(*(void **)(v2 - 104));
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18886AA20);
  }
  _Unwind_Resume(exception_object);
}

void ExportTIFF_GPSCoordinate(uint64_t a1, unsigned char *a2, void (**a3)(void, void), uint64_t a4)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  if (a4) {
    ExportTIFF_GPSCoordinate();
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v34 = 0;
  int v32 = 0;
  if (!TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", a2, (uint64_t)__p, (uint64_t *)&v32))
  {
    (*((void (**)(void (**)(void, void), uint64_t, void))*a3 + 5))(a3, 3, (unsigned __int16)(a4 - 1));
    (*((void (**)(void (**)(void, void), uint64_t, uint64_t))*a3 + 5))(a3, 3, a4);
    goto LABEL_41;
  }
  if ((v32 & 0x1F00) == 0)
  {
    double i = __p;
    if (v34 < 0) {
      double i = (void **)__p[0];
    }
    do
    {
      double i = (void **)((char *)i + 1);
      int v7 = *((unsigned __int8 *)i - 1);
    }
    while (v7 == 32 || v7 == 9);
    if ((v7 - 58) >= 0xFFFFFFF6)
    {
      LODWORD(v9) = 0;
      do
      {
        uint64_t v9 = (v7 + 10 * v9 - 48);
        int v10 = *(unsigned __int8 *)i;
        double i = (void **)((char *)i + 1);
        int v7 = v10;
      }
      while ((v10 - 48) < 0xA);
      while (1)
      {
        if (v7 <= 31)
        {
          if (v7 != 9) {
            goto LABEL_20;
          }
        }
        else if (v7 != 32)
        {
          if (v7 != 44 && v7 != 59) {
LABEL_20:
          }
            double i = (void **)((char *)i - 1);
          while (1)
          {
            int v12 = *(unsigned __int8 *)i;
            if (v12 != 32 && v12 != 9) {
              break;
            }
            double i = (void **)((char *)i + 1);
          }
          if ((v12 - 48) > 9)
          {
            uint64_t v14 = 0;
            goto LABEL_45;
          }
          LODWORD(v14) = 0;
          double i = (void **)((char *)i + 1);
          do
          {
            uint64_t v14 = (v12 + 10 * v14 - 48);
            int v15 = *(unsigned __int8 *)i;
            double i = (void **)((char *)i + 1);
            int v12 = v15;
          }
          while ((v15 - 48) < 0xA);
          if (v12 == 46)
          {
            int v12 = *(unsigned __int8 *)i;
            if ((v12 - 48) <= 9)
            {
              LODWORD(v16) = 1;
              do
              {
                unsigned int v17 = v12 + 10 * v14 - 48;
                if (v16 <= 0x186A0) {
                  uint64_t v14 = v17;
                }
                else {
                  uint64_t v14 = v14;
                }
                if (v16 <= 0x186A0) {
                  uint64_t v16 = (10 * v16);
                }
                else {
                  uint64_t v16 = v16;
                }
                int v18 = *((unsigned __int8 *)i + 1);
                double i = (void **)((char *)i + 1);
                int v12 = v18;
              }
              while ((v18 - 48) < 0xA);
              uint64_t v19 = 0;
              goto LABEL_47;
            }
            goto LABEL_45;
          }
          for (double i = (void **)((char *)i - 1); ; double i = (void **)((char *)i + 1))
          {
            unsigned int v29 = *(unsigned __int8 *)i;
            if (v29 <= 0x1F)
            {
              if (v29 != 9) {
                goto LABEL_79;
              }
            }
            else if (v29 != 32)
            {
              if (v29 == 44 || v29 == 59) {
                goto LABEL_78;
              }
LABEL_79:
              while (1)
              {
                int v12 = *(unsigned __int8 *)i;
                if (v12 != 9 && v12 != 32) {
                  break;
                }
LABEL_78:
                double i = (void **)((char *)i + 1);
              }
              if ((v12 - 48) <= 9)
              {
                LODWORD(v19) = 0;
                do
                {
                  uint64_t v19 = (v12 + 10 * v19 - 48);
                  int v30 = *((unsigned __int8 *)i + 1);
                  double i = (void **)((char *)i + 1);
                  int v12 = v30;
                }
                while ((v30 - 48) < 0xA);
LABEL_46:
                uint64_t v16 = 1;
LABEL_47:
                for (uint64_t j = (unsigned __int8 *)i + 1; ; ++j)
                {
                  if (v12 <= 31)
                  {
                    if (v12 != 9) {
                      goto LABEL_55;
                    }
                  }
                  else if (v12 != 32)
                  {
                    if (v12 != 44 && v12 != 59) {
LABEL_55:
                    }
                      --j;
                    while (1)
                    {
                      int v22 = *j;
                      if (v22 != 32 && v22 != 9) {
                        break;
                      }
                      ++j;
                    }
                    __int16 v31 = 0;
                    int v24 = *j;
                    LOBYTE(v3std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v24;
                    if ((v24 - 97) <= 0x19)
                    {
                      LOBYTE(v24) = v24 - 32;
                      LOBYTE(v3std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v24;
                    }
                    unsigned int v25 = v24 - 69;
                    BOOL v26 = v25 > 0x12;
                    int v27 = (1 << v25) & 0x44201;
                    if (!v26 && v27 != 0)
                    {
                      (*((void (**)(void (**)(void, void), uint64_t, void, uint64_t, uint64_t, __int16 *))*a3
                       + 4))(a3, 3, (unsigned __int16)(a4 - 1), 2, 2, &v31);
                      uint64_t v35 = 0;
                      uint64_t v36 = 0;
                      v37[0] = 0;
                      ((void (**)(uint64_t, uint64_t *))a3)[6](v9, &v35);
                      ((void (**)(uint64_t, char *))a3)[6](1, (char *)&v35 + 4);
                      ((void (**)(uint64_t, uint64_t *))a3)[6](v14, &v36);
                      ((void (**)(uint64_t, char *))a3)[6](v16, (char *)&v36 + 4);
                      ((void (**)(uint64_t, void *))a3)[6](v19, v37);
                      ((void (**)(uint64_t, char *))a3)[6](1, (char *)v37 + 4);
                      (*((void (**)(void (**)(void, void), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))*a3
                       + 4))(a3, 3, a4, 5, 3, &v35);
                    }
                    goto LABEL_41;
                  }
                  int v21 = *j;
                  int v12 = v21;
                }
              }
LABEL_45:
              uint64_t v19 = 0;
              goto LABEL_46;
            }
          }
        }
        int v11 = *(unsigned __int8 *)i;
        double i = (void **)((char *)i + 1);
        int v7 = v11;
      }
    }
  }
LABEL_41:
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
}

unint64_t TrimTrailingSpaces(char *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if ((a1[a2 - 1] | 0x20) != 0x20) {
    return a2;
  }
  if (a2 < 1) {
    TrimTrailingSpaces();
  }
  uint64_t v2 = a1 - 1;
  uint64_t v3 = a2;
  while ((v2[v3] | 0x20) == 0x20)
  {
    if (--v3 < 1) {
      goto LABEL_11;
    }
  }
  uint64_t v2 = &a1[v3 - 1];
LABEL_11:
  char v5 = v2 + 1;
  unint64_t result = v5 - a1;
  if (result > a2) {
    TrimTrailingSpaces();
  }
  if (result < a2) {
    unsigned char *v5 = 0;
  }
  return result;
}

uint64_t DecodeRational(const char *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  char v8 = 0;
  int v5 = sscanf(a1, "%lu/%lu%c", &v10, &v9, &v8);
  if (v5 == 1) {
    goto LABEL_4;
  }
  uint64_t v6 = 0;
  if (v5 == 2)
  {
    int v5 = v9;
LABEL_4:
    *a2 = v10;
    *a3 = v5;
    return 1;
  }
  return v6;
}

char *std::vector<unsigned short>::assign(char **a1, unint64_t a2, _WORD *a3)
{
  unint64_t v6 = (unint64_t)a1[2];
  unint64_t result = *a1;
  if (a2 <= (uint64_t)(v6 - (void)result) >> 1)
  {
    uint64_t v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 1;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 1;
    }
    if (v15)
    {
      uint64_t v16 = result;
      do
      {
        *(_WORD *)uint64_t v16 = *a3;
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[2 * a2];
    }
    else
    {
      unsigned int v17 = &v13[2 * (a2 - v14)];
      uint64_t v18 = 2 * a2 - 2 * v14;
      do
      {
        *(_WORD *)uint64_t v13 = *a3;
        v13 += 2;
        v18 -= 2;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      unint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    if (v6 <= a2) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = v6;
    }
    if (v6 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = v8;
    }
    unint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](a1, v9);
    uint64_t v10 = a1[1];
    int v11 = &v10[2 * a2];
    uint64_t v12 = 2 * a2;
    do
    {
      *(_WORD *)uint64_t v10 = *a3;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::vector<unsigned int>::assign(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __u)
{
  uint64_t value = (uint64_t)this->__end_cap_.__value_;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    std::vector<unsigned int>::pointer end = this->__end_;
    std::vector<unsigned int>::size_type v14 = end - begin;
    if (v14 >= __n) {
      std::vector<unsigned int>::size_type v15 = __n;
    }
    else {
      std::vector<unsigned int>::size_type v15 = end - begin;
    }
    if (v15)
    {
      uint64_t v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      unsigned int v17 = &end[__n - v14];
      std::vector<unsigned int>::size_type v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      uint64_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    std::vector<unsigned int>::size_type v8 = value >> 1;
    if (value >> 1 <= __n) {
      std::vector<unsigned int>::size_type v8 = __n;
    }
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, v9);
    std::vector<unsigned int>::pointer v10 = this->__end_;
    int v11 = &v10[__n];
    std::vector<unsigned int>::size_type v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void PhotoDataUtils::GetNativeInfo()
{
  __assert_rtn("GetNativeInfo", "ReconcileTIFF.cpp", 284, "(info->dataPtr != 0) || (info->dataLen == 0)");
}

void ImportConversionTable()
{
  __assert_rtn("ImportConversionTable", "ReconcileTIFF.cpp", 1505, "(tagInfo.id == kTIFF_OECF) || (tagInfo.id == kTIFF_SpatialFrequencyResponse)");
}

void ExportTIFF_GPSCoordinate()
{
  __assert_rtn("ExportTIFF_GPSCoordinate", "ReconcileTIFF.cpp", 2992, "(locID & 1) == 0");
}

void TrimTrailingSpaces()
{
  __assert_rtn("TrimTrailingSpaces", "ReconcileTIFF.cpp", 250, "newLen <= origLen");
}

{
  __assert_rtn("TrimTrailingSpaces", "ReconcileTIFF.cpp", 247, "(lastChar == firstChar-1) || ((lastChar >= firstChar) && (*lastChar != ' ') && (*lastChar != 0))");
}

void *AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointer(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x634172724E6F6465)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634172724E6F6465, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 808));
    }
  }
  else
  {
    this = AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal((void *)((char *)this + *(void *)(*this - 816)), a2, a3, 0);
    if (this) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = a4 == 0;
    }
    if (!v6)
    {
      int v7 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634172724E6F6465, a2, v7);
    }
  }
  return this;
}

void sub_18886B550(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointer(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(void *)(*(void *)this - 720)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(void *)(*(void *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IArrayNode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 23, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IArrayNode_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  unint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 752))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(void *)(*(void *)this - 728)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(void *)(*(void *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::getArrayForm(AdobeXMPCore_Int::IArrayNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IArrayNode_v1,unsigned int,AdobeXMPCore::IArrayNode_v1::eArrayForm>(a2, (uint64_t)this + *(void *)(*(void *)this - 808), 0, (uint64_t (*)(void *))AdobeXMPCore::IArrayNode_v1::GetArrayForm, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IArrayNode_v1,unsigned int,AdobeXMPCore::IArrayNode_v1::eArrayForm>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  int v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCore::IArrayNode_v1::GetArrayForm(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 640))();
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::getChildNodeType(AdobeXMPCore_Int::IArrayNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IArrayNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(a2, (uint64_t)this + *(void *)(*(void *)this - 808), 0, (uint64_t (*)(void *))AdobeXMPCore::IArrayNode_v1::GetChildNodeType, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IArrayNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  int v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCore::IArrayNode_v1::GetChildNodeType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 648))();
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::getNodeAtIndex(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,unsigned long long>(a3, (uint64_t)this + *(void *)(*(void *)this - 808), (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IArrayNode_v1::GetNodeAtIndex, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 67, a2);
}

uint64_t AdobeXMPCore::IArrayNode_v1::GetNodeAtIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 656))();
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  int v11 = 0;
  std::vector<unsigned int>::size_type v12 = 0;
  int v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18886BD90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    std::vector<unsigned int>::size_type v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *std::vector<unsigned int>::pointer v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18886BD74);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18886BF0C(_Unwind_Exception *a1)
{
}

void AdobeXMPCore_Int::IArrayNode_I::insertNodeAtIndex(AdobeXMPCore_Int::IArrayNode_I *this, AdobeXMPCore::INode_v1 *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7 = *(void *)(*(void *)this - 808);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v8);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IArrayNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,unsigned long long>(a4, (uint64_t)this + v7, (uint64_t (*)(void *, uint64_t, uint64_t))AdobeXMPCore::IArrayNode_v1::InsertNodeAtIndex, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 72, (uint64_t)&v8, a3);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_18886BFC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IArrayNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,unsigned long long>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a3);
  }
  return v8(v9, a7, a8);
}

uint64_t AdobeXMPCore::IArrayNode_v1::InsertNodeAtIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 664))();
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::removeNodeAtIndex(void *a1, uint64_t a2, void *a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,unsigned long long>(a3, (uint64_t)a1 + *(void *)(*a1 - 808), (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IArrayNode_v1::RemoveNodeAtIndex, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 77, a2);
}

uint64_t AdobeXMPCore::IArrayNode_v1::RemoveNodeAtIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 680))();
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::replaceNodeAtIndex(AdobeXMPCore_Int::IArrayNode_I *this, AdobeXMPCore::INode_v1 *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7 = *(void *)(*(void *)this - 808);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v10);
  uint64_t v8 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,unsigned long long>(a4, (uint64_t)this + v7, (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCore::IArrayNode_v1::ReplaceNodeAtIndex, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 82, (uint64_t)&v10, a3);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8;
}

void sub_18886C280(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  uint64_t v8 = a3;
  *a1 = 0;
  uint64_t v13 = 0;
  std::vector<unsigned int>::size_type v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    int v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_18886C410(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    std::vector<unsigned int>::size_type v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18886C3F4);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18886C58C(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IArrayNode_v1::ReplaceNodeAtIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 672))();
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::GetISharedObject_I(AdobeXMPCore_Int::IArrayNode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 832);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::GetActualIArrayNode(AdobeXMPCore_Int::IArrayNode_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 808);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IArrayNode_I::GetISharedObject_I(AdobeXMPCore_Int::IArrayNode_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 40)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 40)) - 832);
}

void GIF_MetaHandlerCTor(XMPFiles *a1)
{
}

void sub_18886C6C0(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C402E77A007);
  _Unwind_Resume(a1);
}

BOOL GIF_CheckFormat(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 != 1195984416) {
    GIF_CheckFormat();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3) < 6) {
    return 0;
  }
  __int16 v7 = 0;
  int v6 = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)a3 + 16))(a3, 0, 0);
  (**(void (***)(uint64_t, int *, uint64_t, void))a3)(a3, &v6, 6, 0);
  return v6 == 944130375 && v7 == 24889;
}

void GIF_MetaHandler::~GIF_MetaHandler(void **this)
{
  XMPFileHandler::~XMPFileHandler(this);

  JUMPOUT(0x18C11C0E0);
}

uint64_t GIF_MetaHandler::CacheFileData(GIF_MetaHandler *this)
{
  *((unsigned char *)this + 2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  uint64_t v2 = *(uint64_t (****)(void, char *, uint64_t, uint64_t))(*((void *)this + 1) + 232);
  uint64_t result = GIF_MetaHandler::ParseGIFBlocks((uint64_t)this, v2);
  if (result)
  {
    uint64_t v4 = (char *)this + 56;
    int v5 = std::string::assign((std::string *)((char *)this + 56), *((unsigned int *)this + 26), 32);
    GIF_MetaHandler::SeekFile((uint64_t)v5, (uint64_t)v2, *((void *)this + 12), 0);
    if (*((char *)this + 79) < 0) {
      uint64_t v4 = *(char **)v4;
    }
    uint64_t result = (**v2)(v2, v4, *((unsigned int *)this + 26), 1);
    *((void *)this + 4) = *((void *)this + 12);
    *((_DWORD *)this + 10) = *((_DWORD *)this + 26);
    *((unsigned char *)this + 2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 1;
  }
  return result;
}

uint64_t GIF_MetaHandler::ParseGIFBlocks(uint64_t a1, uint64_t (***a2)(void, char *, uint64_t, uint64_t))
{
  v28[2] = *MEMORY[0x1E4F143B8];
  ((void (*)(uint64_t (***)(void, char *, uint64_t, uint64_t), void, void))(*a2)[2])(a2, 0, 0);
  __int16 v27 = 0;
  int v26 = 0;
  uint64_t v4 = (**a2)(a2, (char *)&v26, 6, 0);
  if (v26 != 944130375 || v27 != 24889)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "XMP_Enforce failed: (memcmp( buffer, \"\\x47\\x49\\x46\\x38\\x39\\x61\", 6) == 0) in /Library/Caches"
                   "/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPFiles/source/FileHandlers/GIF_Handler.cpp at line 158";
    *((unsigned char *)exception + 16) = 0;
  }
  GIF_MetaHandler::ReadLogicalScreenDesc(v4, a2);
  uint64_t v6 = ((uint64_t (*)(uint64_t (***)(void, char *, uint64_t, uint64_t), void, uint64_t))(*a2)[2])(a2, 0, 1);
  if (v6 == ((uint64_t (*)(uint64_t (***)(void, char *, uint64_t, uint64_t)))(*a2)[3])(a2))
  {
LABEL_33:
    uint64_t v17 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)uint64_t v17 = 108;
    v17[1] = "No trailer exists for GIF file";
    *((unsigned char *)v17 + 16) = 0;
  }
  char v7 = 0;
  while (1)
  {
    char v25 = 0;
    uint64_t v8 = (**a2)(a2, &v25, 1, 0);
    if (v25 == 33)
    {
      unsigned __int8 v24 = 0;
      *(_DWORD *)unsigned int v23 = 0;
      (**a2)(a2, (char *)&v24, 1, 0);
      uint64_t v11 = (**a2)(a2, v23, 1, 0);
      uint64_t v12 = *(unsigned int *)v23;
      if (v24 == 255 && *(unsigned int *)v23 == 11)
      {
        memset(v28, 0, 11);
        (**a2)(a2, (char *)v28, 11, 1);
        if (v28[0] == 0x6174614420504D58 && *(void *)((char *)v28 + 3) == 0x504D586174614420)
        {
          *(void *)(a1 + 96) = ((uint64_t (*)(uint64_t (***)(void, char *, uint64_t, uint64_t), void, uint64_t))(*a2)[2])(a2, 0, 1);
          char v7 = 1;
        }
        unsigned __int8 v22 = 0;
        uint64_t v14 = (**a2)(a2, (char *)&v22, 1, 0);
        while (v22)
        {
          GIF_MetaHandler::SeekFile(v14, (uint64_t)a2, v22, 1);
          uint64_t v14 = (**a2)(a2, (char *)&v22, 1, 0);
        }
        if (v7)
        {
          uint64_t v15 = ((uint64_t (*)(uint64_t (***)(void, char *, uint64_t, uint64_t), void, uint64_t))(*a2)[2])(a2, 0, 1)- *(void *)(a1 + 96);
          if (v15 <= 257)
          {
            int v20 = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)int v20 = 108;
            v20[1] = "corrupt GIF File.";
            *((unsigned char *)v20 + 16) = 0;
          }
          *(_DWORD *)(a1 + 104) = v15 - 258;
        }
      }
      else
      {
        for (; *(_DWORD *)v23; uint64_t v12 = *(unsigned int *)v23)
        {
          GIF_MetaHandler::SeekFile(v11, (uint64_t)a2, v12, 1);
          uint64_t v11 = (**a2)(a2, v23, 1, 0);
        }
      }
      goto LABEL_32;
    }
    if (v25 != 44) {
      break;
    }
    LOBYTE(v28[0]) = 0;
    GIF_MetaHandler::SeekFile(v8, (uint64_t)a2, 8, 1);
    uint64_t v9 = (**a2)(a2, (char *)v28, 1, 0);
    if (SLOBYTE(v28[0]) < 0) {
      uint64_t v9 = GIF_MetaHandler::SeekFile(v9, (uint64_t)a2, 3 << ((v28[0] & 7) + 1), 1);
    }
    GIF_MetaHandler::SeekFile(v9, (uint64_t)a2, 1, 1);
    v23[0] = 0;
    uint64_t v10 = (**a2)(a2, v23, 1, 0);
    while (v23[0])
    {
      GIF_MetaHandler::SeekFile(v10, (uint64_t)a2, v23[0], 1);
      uint64_t v10 = (**a2)(a2, v23, 1, 0);
    }
LABEL_32:
    uint64_t v16 = ((uint64_t (*)(uint64_t (***)(void, char *, uint64_t, uint64_t), void, uint64_t))(*a2)[2])(a2, 0, 1);
    if (v16 == ((uint64_t (*)(uint64_t (***)(void, char *, uint64_t, uint64_t)))(*a2)[3])(a2)) {
      goto LABEL_33;
    }
  }
  if (v25 != 59)
  {
    uint64_t v19 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)uint64_t v19 = 116;
    v19[1] = "Invaild GIF Block";
    *((unsigned char *)v19 + 16) = 0;
  }
  *(void *)(a1 + 112) = ((uint64_t (*)(uint64_t (***)(void, char *, uint64_t, uint64_t), void, uint64_t))(*a2)[2])(a2, 0, 1)- 1;
  return v7 & 1;
}

uint64_t GIF_MetaHandler::SeekFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) < a3
    || a4 == 1
    && (uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1) + a3,
        v7 > (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2)))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Out of range seek operation";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v8(a2, a3, a4);
}

void GIF_MetaHandler::ProcessXMP(GIF_MetaHandler *this)
{
  *((unsigned char *)this + 22) = 1;
  uint64_t v2 = *((unsigned __int8 *)this + 79);
  if (*((char *)this + 79) < 0)
  {
    if (!*((void *)this + 8)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 79))
  {
    return;
  }
  if (!*((unsigned char *)this + 21)) {
    GIF_MetaHandler::ProcessXMP();
  }
  if ((v2 & 0x80) != 0)
  {
    uint64_t v3 = (char *)*((void *)this + 7);
    uint64_t v2 = *((void *)this + 8);
  }
  else
  {
    uint64_t v3 = (char *)this + 56;
  }
  TXMPMeta<std::string>::ParseFromBuffer((uint64_t)this + 80, (uint64_t)v3, v2, 0);
  *((unsigned char *)this + 2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 1;
}

uint64_t GIF_MetaHandler::ReadLogicalScreenDesc(uint64_t a1, uint64_t (***a2)(void, char *, uint64_t, void))
{
  char v5 = 0;
  GIF_MetaHandler::SeekFile(a1, (uint64_t)a2, 4, 1);
  uint64_t v3 = (**a2)(a2, &v5, 1, 0);
  uint64_t result = GIF_MetaHandler::SeekFile(v3, (uint64_t)a2, 2, 1);
  if (v5 < 0) {
    return GIF_MetaHandler::SeekFile(result, (uint64_t)a2, 3 << ((v5 & 7u) + 1), 1);
  }
  return result;
}

uint64_t GIF_MetaHandler::UpdateFile(uint64_t this, int a2)
{
  if (a2) {
    GIF_MetaHandler::UpdateFile();
  }
  uint64_t v2 = (unsigned char *)this;
  if (*(unsigned char *)(this + 23))
  {
    uint64_t v3 = *(void *)(*(void *)(this + 8) + 232);
    if (*(char *)(this + 79) < 0) {
      uint64_t v4 = *(void *)(this + 64);
    }
    else {
      uint64_t v4 = *(unsigned __int8 *)(this + 79);
    }
    if (*(_DWORD *)(this + 104) == v4)
    {
      char v5 = (void *)(this + 56);
      GIF_MetaHandler::SeekFile(this, *(void *)(*(void *)(this + 8) + 232), *(void *)(this + 32), 0);
      if ((char)v2[79] < 0) {
        char v5 = (void *)*v5;
      }
      this = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v3 + 8))(v3, v5, v4);
    }
    else
    {
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v3 + 40))(*(void *)(*(void *)(this + 8) + 232));
      if (!v6)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 9;
        exception[1] = "Failure creating GIF temp file";
        *((unsigned char *)exception + 16) = 0;
      }
      (*(void (**)(unsigned char *, uint64_t))(*(void *)v2 + 80))(v2, v6);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
    }
    v2[23] = 0;
  }
  return this;
}

void GIF_MetaHandler::WriteTempFile(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 23)) {
    GIF_MetaHandler::WriteTempFile();
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 232);
  (*(void (**)(uint64_t, void, void))(*(void *)v4 + 16))(v4, 0, 0);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 32))(a2, 0);
  if (*(void *)(a1 + 96))
  {
    XIO::Copy(v4, a2);
    if (*(char *)(a1 + 79) < 0)
    {
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v6 = *(void *)(a1 + 64);
    }
    else
    {
      uint64_t v5 = a1 + 56;
      uint64_t v6 = *(unsigned __int8 *)(a1 + 79);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v5, v6);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v4 + 16))(v4, *(unsigned int *)(a1 + 104), 1);
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v4 + 16))(v4, 0, 1);
    XIO::Copy(v4, a2);
  }
  else
  {
    if (!*(void *)(a1 + 112))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 108;
      exception[1] = "Not able to write XMP packet in GIF file";
      *((unsigned char *)exception + 16) = 0;
    }
    XIO::Copy(v4, a2);
    char v11 = 33;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 8))(a2, &v11, 1);
    char v12 = -1;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 8))(a2, &v12, 1);
    char v13 = 11;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 8))(a2, &v13, 1);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 8))(a2, "XMP DataXMP", 11);
    if (*(char *)(a1 + 79) < 0)
    {
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 64);
    }
    else
    {
      uint64_t v7 = a1 + 56;
      uint64_t v8 = *(unsigned __int8 *)(a1 + 79);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, v7, v8);
    char v10 = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 8))(a2, &v10, 1);
    char v10 = -1;
    do
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 8))(a2, &v10, 1);
      --v10;
    }
    while (v10);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 8))(a2, &v10, 1);
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 8))(a2, &v10, 1);
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v4 + 16))(v4, 0, 1);
    XIO::Copy(v4, a2);
  }
}

void GIF_CheckFormat()
{
  __assert_rtn("GIF_CheckFormat", "GIF_Handler.cpp", 58, "format == kXMP_GIFFile");
}

void GIF_MetaHandler::ProcessXMP()
{
}

void GIF_MetaHandler::UpdateFile()
{
}

void GIF_MetaHandler::WriteTempFile()
{
}

void WXMPFiles_CTor_1(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_18886D918(void *a1, int a2)
{
  uint64_t v4 = v3;
  MEMORY[0x18C11C0E0](v4, 0x10B3C403726CC03);
  if (a2 == 3)
  {
    uint64_t v7 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v7;
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      uint64_t v8 = "";
    }
    *(void *)uint64_t v2 = v8;
    *(void *)(v2 + 8) = "XMP";
  }
  else
  {
    uint64_t v9 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v9 + 16))(v9);
      char v11 = "";
      if (v10) {
        char v11 = (const char *)v10;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      char v11 = "Caught unknown exception";
    }
    *(void *)uint64_t v2 = v11;
  }
  __cxa_end_catch();
}

void WXMPFiles_DecrementRefCount_1(_DWORD *a1)
{
  if (voidResult(void)::onceToken != -1) {
    dispatch_once(&voidResult(void)::onceToken, &__block_literal_global_44);
  }
  uint64_t v2 = (void *)gVoidResult;
  uint64_t v5 = (XMP_ReadWriteLock *)(a1 + 4);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 4), 1);
  *uint64_t v2 = 0;
  int v3 = a1[2];
  if (v3 <= 0) {
    __assert_rtn("WXMPFiles_DecrementRefCount_1", "WXMPFiles.cpp", 135, "thiz->clientRefs > 0");
  }
  int v4 = v3 - 1;
  a1[2] = v4;
  if (!v4)
  {
    XMP_ReadWriteLock::Release((XMP_ReadWriteLock *)(a1 + 4));
    uint64_t v5 = 0;
    (*(void (**)(_DWORD *))(*(void *)a1 + 8))(a1);
  }
  XMP_AutoLock::~XMP_AutoLock(&v5);
}

void sub_18886DAF0(void *a1)
{
}

void sub_18886DAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPFiles_OpenFile_2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 32) = XMPFiles::OpenFile(a1, a2, a3, a4);
  XMP_AutoLock::~XMP_AutoLock(&v10);
}

void WXMPFiles_CloseFile_1(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a3 = 0;
  XMPFiles::CloseFile((XMPFiles *)a1, a2);
  XMP_AutoLock::~XMP_AutoLock(&v6);
}

void WXMPFiles_PutXMP_1(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, void *a5)
{
  char v11 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a5 = 0;
  if (a2)
  {
    TXMPMeta<std::string>::TXMPMeta(v10, a2);
    XMPFiles::PutXMP(a1, (uint64_t)v10);
    TXMPMeta<std::string>::~TXMPMeta(v10);
  }
  else
  {
    XMPFiles::PutXMP((XMPFiles *)a1, a3, a4);
  }
  XMP_AutoLock::~XMP_AutoLock(&v11);
}

void sub_18886DE20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2 == 3)
  {
    uint64_t v12 = __cxa_begin_catch(a1);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)v12;
    *(void *)(v10 + 8) = "XMP";
    char v13 = (const char *)*((void *)v12 + 1);
    if (!v13) {
      char v13 = "";
    }
  }
  else
  {
    uint64_t v14 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v10 + 32) = 14;
      *(void *)uint64_t v10 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x18886DE00);
    }
    *(_DWORD *)(v10 + 32) = 13;
    uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
    char v13 = "";
    if (v15) {
      char v13 = (const char *)v15;
    }
  }
  *(void *)uint64_t v10 = v13;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_18886DEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPFiles_CanPutXMP_1(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  char v11 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *(void *)a5 = 0;
  if (a2)
  {
    TXMPMeta<std::string>::TXMPMeta(v10, a2);
    *(_DWORD *)(a5 + 32) = XMPFiles::CanPutXMP(a1, (uint64_t)v10);
    TXMPMeta<std::string>::~TXMPMeta(v10);
  }
  else
  {
    *(_DWORD *)(a5 + 32) = XMPFiles::CanPutXMP((XMPFiles *)a1, a3, a4);
  }
  XMP_AutoLock::~XMP_AutoLock(&v11);
}

void sub_18886DFB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2 == 3)
  {
    uint64_t v12 = __cxa_begin_catch(a1);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)v12;
    *(void *)(v10 + 8) = "XMP";
    char v13 = (const char *)*((void *)v12 + 1);
    if (!v13) {
      char v13 = "";
    }
  }
  else
  {
    uint64_t v14 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v10 + 32) = 14;
      *(void *)uint64_t v10 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x18886DF94);
    }
    *(_DWORD *)(v10 + 32) = 13;
    uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
    char v13 = "";
    if (v15) {
      char v13 = (const char *)v15;
    }
  }
  *(void *)uint64_t v10 = v13;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_18886E088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3(uint64_t a1@<X8>)
{
  if (!v1) {
    uint64_t v1 = v2;
  }
  void *v3 = v1;
  v3[1] = a1;
}

_DWORD *OUTLINED_FUNCTION_1_1(_DWORD *result)
{
  *(_DWORD *)(v1 + 32) = *result;
  return result;
}

void WXMPFiles_Initialize_1_cold_1(void *a1)
{
  uint64_t v1 = __cxa_begin_catch(a1);
  OUTLINED_FUNCTION_1_1(v1);
  OUTLINED_FUNCTION_0_3((uint64_t)"XMP");

  __cxa_end_catch();
}

void AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl(void *a1, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3)
{
  a1[23] = &unk_1ED4C1F90;
  *a1 = &unk_1ED4C17B8;
  a1[5] = &unk_1ED4C1A60;
  *(void *)((char *)a1 + unk_1ED4C1770) = &unk_1ED4C1AC0;
  *a1 = &unk_1ED4C1160;
  *(void *)((char *)a1 + unk_1ED4C1120) = &unk_1ED4C1478;
  *(void *)((char *)a1 + *(void *)(*a1 - 72)) = &unk_1ED4C14D8;
  a1[20] = &unk_1ED4C3208;
  a1[7] = &unk_1ED4C5980;
  *a1 = &unk_1ED4C5DF0;
  a1[5] = &unk_1ED4C6010;
  a1[23] = &unk_1ED4C60F8;
  *(void *)((char *)a1 + unk_1ED4C5758 + 56) = &unk_1ED4C6070;
  *(void *)((char *)a1 + *(void *)(a1[7] - 560) + 56) = &unk_1ED4C60F8;
  a1[6] = &unk_1ED4C3780;
  *a1 = &unk_1ED4C3CB8;
  a1[5] = &unk_1ED4C3F60;
  a1[23] = &unk_1ED4C4530;
  *(void *)((char *)a1 + unk_1ED4C34C8 + 48) = &unk_1ED4C4210;
  *(void *)((char *)a1 + *(void *)(a1[6] - 704) + 48) = &unk_1ED4C44A8;
  *(void *)((char *)a1 + *(void *)(a1[6] - 712) + 48) = &unk_1ED4C4530;
  *a1 = &unk_1ED4C2320;
  *(void *)((char *)a1 + unk_1ED4C22E8) = &unk_1ED4C2320;
  *(void *)((char *)a1 + *(void *)(*a1 - 64)) = &unk_1ED4C2648;
  *(void *)((char *)a1 + *(void *)(*a1 - 72)) = &unk_1ED4C3180;
  *(void *)((char *)a1 + *(void *)(*a1 - 816)) = &unk_1ED4C2940;
  *(void *)((char *)a1 + *(void *)(*a1 - 824)) = &unk_1ED4C2E60;
  *(void *)((char *)a1 + *(void *)(*a1 - 832)) = &unk_1ED4C30F8;
  *(void *)((char *)a1 + *(void *)(*a1 - 840)) = &unk_1ED4C3180;
  a1[20] = &unk_1ED4C32D8;
  a1[21] = 0;
  *a1 = &unk_1ED4C3338;
  a1[24] = 0;
  a1[25] = 0;
  a1[22] = 0;
  a1[23] = &unk_1ED4C3460;
  AdobeXMPCore_Int::NodeImpl::NodeImpl((AdobeXMPCore_Int::NodeImpl *)(a1 + 7), (const char *)&off_1ED4DD178, a2, a3);
}

void sub_18886E780(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl(v1, (uint64_t *)&off_1ED4DD1E0);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DD1C8);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::GetArrayForm(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::GetChildNodeType(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  uint64_t v2 = *((void *)this + 2);
  if (*((void *)this + 3) == v2) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v2 + 40))();
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  return v3;
}

void sub_18886E85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::GetNodeAtIndex(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = a2 - 1;
  memset(v8, 0, sizeof(v8));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v8, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  uint64_t v6 = *((void *)this + 2);
  if (v5 < (*((void *)this + 3) - v6) >> 4)
  {
    uint64_t v7 = *(char **)(v6 + 16 * v5);
    (**(void (***)(char *))&v7[*(void *)(*(void *)v7 - 56)])(&v7[*(void *)(*(void *)v7 - 56)]);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, (uint64_t)v7);
  }
  *a3 = 0;
  a3[1] = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v8);
}

void sub_18886E964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::InsertNodeAtIndex(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = a3;
  unint64_t v5 = a3 - 1;
  uint64_t v10 = 0;
  char v11 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v10, (char *)a1 + *(void *)(*a1 - 904) + 8, 0);
  if (v5 > (uint64_t)(a1[3] - a1[2]) >> 4)
  {
    v9[0] = 0;
    v9[1] = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v10);
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = (void *)*a2;
  char v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = (*(uint64_t (**)(void *, void **))(*a1 + 784))(a1, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v7)
  {
    uint64_t v10 = 0;
    char v11 = 0;
    uint64_t v12 = 0;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v10, (char *)a1 + *(void *)(*a1 - 904) + 8, 1);
    uint64_t v8 = *a2;
    (**(void (***)(void))(*a2 + *(void *)(*(void *)*a2 - 56)))();
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(v9, v8);
  }
}

void sub_18886EE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::insert(AdobeXMPCore_Int::IMemoryAllocator_I *a1, void *a2, void *a3)
{
  int v4 = a2;
  uint64_t v7 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 1);
  uint64_t v8 = ((uint64_t)a2 - *(void *)a1) >> 4;
  unint64_t v9 = *((void *)a1 + 2);
  if (v6 >= v9)
  {
    unint64_t v13 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v13 >> 60) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - v7;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v15 = v13;
    }
    unsigned __int8 v24 = (void *)((char *)a1 + 16);
    if (v15)
    {
      uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
      uint64_t v17 = (**MemoryAllocator)(MemoryAllocator, 16 * v15);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v20 = v17;
    uint64_t v21 = v17 + 16 * v8;
    uint64_t v22 = v21;
    uint64_t v23 = v17 + 16 * v15;
    std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>> &>::push_back(&v20, a3);
    int v4 = (void *)std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::__swap_out_circular_buffer((uint64_t)a1, &v20, v4);
    std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(&v20);
  }
  else if (a2 == (void *)v6)
  {
    long long v18 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((void *)&v18 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)a1 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a2 + 2;
  }
  else
  {
    std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    uint64_t v10 = v7 + 16 * v8;
    long long v11 = *(_OWORD *)a3;
    *a3 = 0;
    a3[1] = 0;
    uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
    *(_OWORD *)uint64_t v10 = v11;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  return v4;
}

void sub_18886F05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::RemoveNodeAtIndex(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  (*(void (**)(AdobeXMPCore_Int::ArrayNodeImpl *))(*(void *)this + 656))(this);
  if (*a3)
  {
    memset(v15, 0, sizeof(v15));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v15, (char *)this + *(void *)(*(void *)this - 904) + 8, 1);
    unint64_t v6 = (long long *)(*((void *)this + 2) + 16 * a2);
    uint64_t v7 = v6 - 1;
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *>((uint64_t)&v16, v6, *((long long **)this + 3), (uint64_t)(v6 - 1));
    uint64_t v9 = v8;
    for (uint64_t i = *((void *)this + 3); i != v9; i -= 16)
    {
      long long v11 = *(std::__shared_weak_count **)(i - 8);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    *((void *)this + 3) = v9;
    uint64_t v12 = *(void *)(*(uint64_t (**)(void))(*(void *)*a3 + 280))(*a3);
    (*(void (**)(void))(v12 + 504))();
    unint64_t v13 = (long long *)*((void *)this + 3);
    while (v7 != v13)
    {
      uint64_t v14 = (*(uint64_t (**)(void))(**(void **)v7 + 280))(*(void *)v7);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 544))(v14, a2++);
      ++v7;
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v15);
  }
}

void sub_18886F248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::ReplaceNodeAtIndex@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  uint64_t v14 = v8;
  uint64_t v15 = a3;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 784))(a1, &v13))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 656))(&v11, a1, a3);
    BOOL v9 = v11 != 0;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v9)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2);
  }
  *a4 = 0;
  a4[1] = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 680))(a1, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 664))(a1, a2, a3);
}

void sub_18886F5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::AppendNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 560))(a1) + 1;
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 664);

  return v5(a1, a2, v4);
}

void AdobeXMPCore_Int::ArrayNodeImpl::Iterator(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, void *a2@<X8>)
{
  memset(v10, 0, sizeof(v10));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v10, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  uint64_t v4 = *((void *)this + 2);
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = v4;
  if (v4 != v8)
  {
    unint64_t v5 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x38);
    unint64_t v6 = (char *)AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::TNodeIteratorImpl(v5, &v9, &v8);
    AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>(v6, 1, &v7);
  }
  *a2 = 0;
  a2[1] = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v10);
}

void sub_18886F794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 176)])(&a1[*(void *)(*(void *)a1 - 176)]);
    std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_18886F938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::TNodeIteratorImpl(void *result, void *a2, void *a3)
{
  result[4] = &unk_1ED4D2278;
  *uint64_t result = &unk_1ED4D2108;
  result[3] = &unk_1ED4D21A8;
  *(void *)((char *)result + unk_1ED4D2078) = &unk_1ED4D2208;
  result[5] = 0;
  result[6] = 0;
  *uint64_t result = off_1ED4EC430;
  result[3] = off_1ED4EC4D0;
  result[4] = off_1ED4EC538;
  result[1] = *a2;
  result[2] = *a3;
  return result;
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::ChildCount(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  uint64_t v2 = (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 4;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

void AdobeXMPCore_Int::ArrayNodeImpl::ConvertToArrayNode(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  (**(void (***)(char *))((char *)this + *(void *)(*(void *)this - 880)))((char *)this + *(void *)(*(void *)this - 880));
  std::shared_ptr<AdobeXMPCore_Int::ArrayNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ArrayNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v2, (uint64_t)this);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ArrayNodeImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 880)])(&a1[*(void *)(*(void *)a1 - 880)]);
    std::shared_ptr<AdobeXMPCore_Int::ArrayNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ArrayNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_18886FD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::ConvertToArrayNode(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  AdobeXMPCore_Int::ArrayNodeImpl::ConvertToArrayNode((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                        + *(void *)(*(void *)this - 288)));
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::GetNodeType(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  return 2;
}

BOOL AdobeXMPCore_Int::ArrayNodeImpl::HasContent(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  BOOL v2 = *((void *)this + 3) != *((void *)this + 2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

void AdobeXMPCore_Int::ArrayNodeImpl::ClearContents(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  memset(v6, 0, sizeof(v6));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v6, (char *)this + *(void *)(*(void *)this - 904) + 8, 1);
  uint64_t v3 = (void *)*((void *)this + 2);
  uint64_t v4 = (void *)*((void *)this + 3);
  BOOL v2 = (uint64_t *)((char *)this + 16);
  while (v3 != v4)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*v3 + 280))(*v3);
    (*(void (**)(uint64_t, void))(*(void *)v5 + 504))(v5, 0);
    v3 += 2;
  }
  std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100](v2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v6);
}

void sub_18886FEB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::ClearContents(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  AdobeXMPCore_Int::ArrayNodeImpl::ClearContents((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                   + *(void *)(*(void *)this - 704)));
}

uint64_t *AdobeXMPCore_Int::ArrayNodeImpl::CloneContents@<X0>(uint64_t *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (!a2 || a4 || (this[3] == this[2] ? (BOOL v5 = a3 == 0) : (BOOL v5 = 1), v5))
  {
    uint64_t v6 = *this;
    uint64_t v7 = (char *)this + *(void *)(*this - 880);
    uint64_t v8 = *((void *)v7 + 2);
    v12[0] = *((void *)v7 + 1);
    v12[1] = v8;
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      uint64_t v6 = *this;
    }
    uint64_t v9 = (char *)this + *(void *)(v6 - 880);
    uint64_t v10 = *((void *)v9 + 4);
    v11[0] = *((void *)v9 + 3);
    v11[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode(v12, v11);
  }
  *a5 = 0;
  a5[1] = 0;
  return this;
}

void sub_188870158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode(void *a1, void *a2)
{
  uint64_t v4 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xD0);
  if (*a1)
  {
    BOOL v5 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(void))(*(void *)*a1 + 192))(*a1);
    if (*a1)
    {
      uint64_t v6 = (char *)(*(uint64_t (**)(void))(*(void *)*a1 + 208))(*a1);
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  if (*a2)
  {
    (*(void (**)(void))(*(void *)*a2 + 192))(*a2);
    if (*a2) {
      (*(void (**)(void))(*(void *)*a2 + 208))(*a2);
    }
  }
  AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl(v4, v5, v6);
}

void sub_188870330(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::CloneContents@<X0>(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return AdobeXMPCore_Int::ArrayNodeImpl::CloneContents((uint64_t *)((char *)this + *(void *)(*(void *)this - 712)), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::ArrayNodeImpl::resetChangesForChildren(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 904) + 8, 0);
  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  BOOL v2 = (uint64_t *)*((void *)this + 3);
  while (v3 != v2)
  {
    uint64_t v4 = *v3;
    v3 += 2;
    (*(void (**)(uint64_t))(*(void *)v4 + 216))(v4);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
}

void virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::resetChangesForChildren(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  AdobeXMPCore_Int::ArrayNodeImpl::resetChangesForChildren((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                             + *(void *)(*(void *)this - 720)));
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::CheckSuitabilityToBeUsedAsChildNode(uint64_t a1, void *a2)
{
  uint64_t v4 = AdobeXMPCore_Int::CompositeNodeImpl::CheckSuitabilityToBeUsedAsChildNode(a1 + *(void *)(*(void *)a1 - 872), a2);
  if (v4)
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 648))(a1);
    if (v5 != -1 && v5 != (*(unsigned int (**)(void))(*(void *)*a2 + 40))()) {
      AdobeXMPCore_Int::IError_I::CreateError(100, 6, 2);
    }
  }
  return v4;
}

void sub_188870714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::CheckSuitabilityToBeUsedAsChildNode(void *a1, void *a2)
{
  return AdobeXMPCore_Int::ArrayNodeImpl::CheckSuitabilityToBeUsedAsChildNode((uint64_t)a1 + *(void *)(*a1 - 776), a2);
}

void AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode(AdobeXMPCore::IArrayNode_v1 *this, char *a2, unint64_t a3, const char *a4)
{
  uint64_t v6 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xD0);
  AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl(v6, this, a2);
}

void sub_188870814(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(AdobeXMPCore::IArrayNode_v1 *this, char *a2, unint64_t a3, const char *a4)
{
  uint64_t v6 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xD0);
  AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl(v6, this, a2);
}

void sub_1888708DC(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode(AdobeXMPCore::IArrayNode_v1 *this, char *a2, unint64_t a3, const char *a4)
{
  uint64_t v6 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xD0);
  AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl(v6, this, a2);
}

void sub_1888709A4(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::~NodeImpl((AdobeXMPCore_Int::NodeImpl *)(v2 + 56), (uint64_t *)&off_1ED4DD178);
  AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this + 184), (uint64_t *)&off_1ED4DD1E0);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this + 160), (uint64_t *)&off_1ED4DD1C8);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(this);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(void *)(*(void *)this - 24)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(void *)(*(void *)this - 24)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(void *)(*(void *)this - 56)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(void *)(*(void *)this - 56)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(void *a1)
{
  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)a1
                                                                                    + *(void *)(*a1 - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)a1
                                                                                    + *(void *)(*a1 - 48)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(AdobeXMPCore_Int::ArrayNodeImpl *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 864)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 808)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 688)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 544)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 816)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 824)) = a2[9];
  *(void *)((char *)this + *(void *)(*(void *)this - 832)) = a2[10];
  *(void *)((char *)this + *(void *)(*(void *)this - 840)) = a2[11];
  *(void *)((char *)this + *(void *)(*(void *)this - 872)) = a2[12];
  *(void *)((char *)this + *(void *)(*(void *)this - 880)) = a2[13];
  *(void *)((char *)this + *(void *)(*(void *)this - 888)) = a2[14];
  *(void *)((char *)this + *(void *)(*(void *)this - 904)) = a2[15];
  uint64_t v3 = (uint64_t *)((char *)this + 16);
  std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (void *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      uint64_t v10 = v9[1];
      void *v8 = *v9;
      v8[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AdobeXMPCore::INode_v1> *,std::shared_ptr<AdobeXMPCore::INode_v1> *,std::shared_ptr<AdobeXMPCore::INode_v1> *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t *std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>> &>::push_back(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[3])
  {
    int v5 = (long long *)result[1];
    uint64_t v6 = (uint64_t)v5 - *result;
    if ((unint64_t)v5 <= *result)
    {
      if (v4 == *result) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = (v4 - *result) >> 3;
      }
      uint64_t v28 = result[4];
      uint64_t MemoryAllocator = (uint64_t (***)(void, unint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)result);
      uint64_t v15 = (**MemoryAllocator)(MemoryAllocator, 16 * v13);
      unint64_t v16 = v15 + 16 * (v13 >> 2);
      uint64_t v17 = (void *)v3[1];
      uint64_t v18 = v3[2] - (void)v17;
      if (v18)
      {
        uint64_t v19 = (void *)(v16 + v18);
        uint64_t v20 = (void *)(v15 + 16 * (v13 >> 2));
        do
        {
          *uint64_t v20 = *v17;
          uint64_t v21 = v17[1];
          v20[1] = v21;
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
          }
          v20 += 2;
          v17 += 2;
        }
        while (v20 != v19);
        int64x2_t v22 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        int64x2_t v22 = vdupq_n_s64((unint64_t)v17);
        uint64_t v19 = (void *)(v15 + 16 * (v13 >> 2));
      }
      uint64_t v25 = *v3;
      uint64_t *v3 = v15;
      v3[1] = v16;
      int64x2_t v26 = v22;
      uint64_t v23 = v3[3];
      v3[2] = (uint64_t)v19;
      v3[3] = v15 + 16 * v13;
      uint64_t v27 = v23;
      uint64_t result = std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(&v25);
      uint64_t v4 = v3[2];
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = v7 + 1;
      }
      unint64_t v11 = v10 >> 1;
      uint64_t result = (uint64_t *)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> *>((uint64_t)&v25, v5, (long long *)v4, (uint64_t)&v5[-(v10 >> 1)]);
      uint64_t v4 = v12;
      v3[1] -= 16 * v11;
      v3[2] = v12;
    }
  }
  *(void *)uint64_t v4 = *a2;
  uint64_t v24 = a2[1];
  *(void *)(v4 + 8) = v24;
  if (v24)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = v3[2];
  }
  v3[2] = v4 + 16;
  return result;
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::__swap_out_circular_buffer(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::shared_ptr<AdobeXMPCore::INode_v1>*,std::shared_ptr<AdobeXMPCore::INode_v1>*,std::shared_ptr<AdobeXMPCore::INode_v1>*>(v7, a3, *(void **)(a1 + 8), (void *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AdobeXMPCore::INode_v1> *,std::shared_ptr<AdobeXMPCore::INode_v1> *,std::shared_ptr<AdobeXMPCore::INode_v1> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      void *v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 16);
      a3 -= 16;
      *(void *)(v7 - 16) = v8;
      uint64_t v9 = *(void *)(a3 + 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v15 + 1);
      }
      v7 -= 16;
      *((void *)&v15 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::shared_ptr<AdobeXMPCore::INode_v1>*,std::shared_ptr<AdobeXMPCore::INode_v1>*,std::shared_ptr<AdobeXMPCore::INode_v1>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v8 = 0;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  LOBYTE(v8) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::shared_ptr<AdobeXMPCore::INode_v1>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::shared_ptr<AdobeXMPCore::INode_v1>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::shared_ptr<AdobeXMPCore::INode_v1>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>,std::shared_ptr<AdobeXMPCore::INode_v1>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::~TNodeIteratorImpl(uint64_t a1)
{
  return a1;
}

void AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::~TNodeIteratorImpl(uint64_t a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(a1 + 32), (uint64_t *)&off_1ED4DDA68);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::GetNodeType(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 8);
  if (v1 != *(void ***)(a1 + 16))
  {
    uint64_t v2 = *v1;
    uint64_t v3 = (void (***)(void))((char *)*v1 + *(void *)(**v1 - 56));
    (**v3)(v3);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(&v5, (uint64_t)v2);
  }
  return 0;
}

void sub_1888716A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::GetNode@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void ***)(result + 8);
  if (v3 != *(void ***)(result + 16))
  {
    uint64_t v4 = *v3;
    uint64_t v5 = (void (***)(void))((char *)*v3 + *(void *)(**v3 - 56));
    (**v5)(v5);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a2, (uint64_t)v4);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

char *AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::Next@<X0>(char *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 2);
  uint64_t v4 = *((void *)result + 1) + 16;
  *((void *)result + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v4;
  if (v4 != v3)
  {
    uint64_t v5 = (uint64_t)result;
    (**(void (***)(char *))&result[*(void *)(*(void *)result - 176)])(&result[*(void *)(*(void *)result - 176)]);
    std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(&v6, v5);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void virtual thunk to'AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::~TNodeIteratorImpl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1ED4DDA68);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)((char *)a1 + *(void *)(*a1 - 48) + 32), (uint64_t *)&off_1ED4DDA68);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 48);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1ED4DDA68);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

void std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1888719B0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 176) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188871A14(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore_Int::ArrayNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ArrayNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188871B48(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 880) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188871BB0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::ArrayNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ArrayNodeImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ArrayNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ArrayNodeImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ArrayNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ArrayNodeImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void AdobeXMPCore_Int::ConfigurableImpl::SetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int8x8_t v7 = (int8x8_t)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 304)) + 208))(a1 + *(void *)(*(void *)a1 - 304));
  unint64_t v54 = (unint64_t)v7;
  if (*(unsigned char *)(a1 + 48))
  {
    unsigned int v8 = (unsigned __int32)v7.i32[0] >> 8;
    unsigned __int8 v9 = v7.u8[2];
    unsigned __int8 v10 = v7.u8[3];
    uint64_t v11 = HIDWORD(*(void *)&v7);
    uint64_t v12 = *(void *)&v7 >> 40;
    uint64_t v13 = HIWORD(*(void *)&v7);
    uint8x8_t v14 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v7, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
    unsigned __int8 v15 = v7.i8[0] + 32;
    if ((v14.i8[0] & 1) == 0) {
      unsigned __int8 v15 = v7.i8[0];
    }
    if (v14.i8[1]) {
      LOBYTE(v8) = v7.i8[1] + 32;
    }
    if (v14.i8[2]) {
      unsigned __int8 v9 = v7.i8[2] + 32;
    }
    if (v14.i8[3]) {
      unsigned __int8 v10 = v7.i8[3] + 32;
    }
    if (v14.i8[4]) {
      LOBYTE(v1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v7.i8[4] + 32;
    }
    if (v14.i8[5]) {
      LOBYTE(v12) = v7.i8[5] + 32;
    }
    if (v14.i8[6]) {
      LOBYTE(v13) = v7.i8[6] + 32;
    }
    if (v14.i8[7]) {
      uint64_t v16 = v7.u8[7] + 32;
    }
    else {
      uint64_t v16 = HIBYTE(*(void *)&v7);
    }
    unint64_t v54 = ((unint64_t)v13 << 48) | (v16 << 56) | ((unint64_t)v12 << 40) | ((unint64_t)v11 << 32) | ((unint64_t)v10 << 24) | ((unint64_t)v9 << 16) | ((unint64_t)v8 << 8) | v15;
  }
  int v17 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)(a1 + *(void *)(*(void *)a1 - 304))
                                                               + 200))(a1 + *(void *)(*(void *)a1 - 304), &v54);
  uint64_t v53 = 0;
  if (v17) {
    AdobeXMPCore_Int::NotifyError((uint64_t)"Key is not valid", (uint64_t)&v54, v17, a3, a4, 0, &v53);
  }
  memset(v52, 0, sizeof(v52));
  (*(void (**)(unint64_t **__return_ptr))(*(void *)(a1 + *(void *)(*(void *)a1 - 304)) + 256))(&v50);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v52, &v50, 1);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18)
  {
    uint64_t v21 = *(void **)(v18 + 8);
    uint64_t v19 = (void *)(v18 + 8);
    uint64_t v20 = v21;
    if (!v21) {
      goto LABEL_36;
    }
    int64x2_t v22 = v19;
    do
    {
      unint64_t v23 = v20[4];
      BOOL v24 = v23 >= v54;
      if (v23 >= v54) {
        uint64_t v25 = v20;
      }
      else {
        uint64_t v25 = v20 + 1;
      }
      if (v24) {
        int64x2_t v22 = v20;
      }
      uint64_t v20 = (void *)*v25;
    }
    while (*v25);
    if (v22 == v19 || v54 < v22[4]) {
LABEL_36:
    }
      AdobeXMPCore_Int::NotifyError((uint64_t)"Key is not supported", (uint64_t)&v54, 1, a3, a4, 0, &v53);
  }
  int v26 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t *))(*(void *)a1 + 216))(a1, &v54, a3, a4);
  if (v26)
  {
LABEL_38:
    unsigned int v29 = *(void **)(a1 + 16);
    uint64_t v28 = (void *)(a1 + 16);
    uint64_t v27 = v29;
    if (!v29) {
      goto LABEL_49;
    }
    int v30 = v28;
    do
    {
      unint64_t v31 = v27[4];
      BOOL v32 = v31 >= v54;
      if (v31 >= v54) {
        BOOL v33 = v27;
      }
      else {
        BOOL v33 = v27 + 1;
      }
      if (v32) {
        int v30 = v27;
      }
      uint64_t v27 = (void *)*v33;
    }
    while (*v33);
    if (v30 != v28 && v54 >= v30[4])
    {
      int v34 = *((_DWORD *)v30 + 10);
      uint64_t v53 = v30[6];
    }
    else
    {
LABEL_49:
      int v34 = 0;
    }
    AdobeXMPCore_Int::NotifyError((uint64_t)"Validation failed for the parameter, type and value combination", (uint64_t)&v54, v26, a3, a4, v34, &v53);
  }
  uint64_t v35 = *(void *)(a1 + 40);
  if (v35)
  {
    __n128 v38 = *(void **)(v35 + 8);
    uint64_t v36 = (void *)(v35 + 8);
    BOOL v37 = v38;
    if (v38)
    {
      BOOL v39 = v36;
      do
      {
        unint64_t v40 = v37[4];
        BOOL v41 = v40 >= v54;
        if (v40 >= v54) {
          uint64_t v42 = v37;
        }
        else {
          uint64_t v42 = v37 + 1;
        }
        if (v41) {
          BOOL v39 = v37;
        }
        BOOL v37 = (void *)*v42;
      }
      while (*v42);
      if (v39 != v36 && v54 >= v39[4] && *((_DWORD *)v39 + 10) != a3)
      {
        int v26 = 2;
        goto LABEL_38;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 49))
  {
    uint64_t v45 = *(void **)(a1 + 16);
    if (v45)
    {
      unsigned int v46 = (void *)(a1 + 16);
      do
      {
        unint64_t v47 = v45[4];
        BOOL v48 = v47 >= v54;
        if (v47 >= v54) {
          uint64_t v49 = v45;
        }
        else {
          uint64_t v49 = v45 + 1;
        }
        if (v48) {
          unsigned int v46 = v45;
        }
        uint64_t v45 = (void *)*v49;
      }
      while (*v49);
      if (v46 != (void *)(a1 + 16) && v54 >= v46[4] && *((_DWORD *)v46 + 10) != a3)
      {
        int v26 = 3;
        goto LABEL_38;
      }
    }
  }
  uint64_t v43 = *a4;
  uint64_t v50 = &v54;
  uint64_t v44 = std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 8), &v54, (uint64_t)&std::piecewise_construct, &v50);
  *((_DWORD *)v44 + 10) = a3;
  v44[6] = (uint64_t *)v43;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v52);
}

void sub_1888720EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void sub_18887210C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  JUMPOUT(0x188872104);
}

void AdobeXMPCore_Int::NotifyError(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, int a6, uint64_t *a7)
{
  __int16 v12 = 0;
  switch((int)a4)
  {
    case 1:
      uint64_t v7 = *(unsigned __int8 *)a5;
      AdobeXMPCore_Int::NotifyError<BOOL>(a1, a2, a3, 1, v7, a6, a7);
    case 2:
      uint64_t v9 = *a5;
      AdobeXMPCore_Int::NotifyError<unsigned long long>(a1, a2, a3, 2, v9, a6, a7);
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      uint64_t v10 = *a5;
      AdobeXMPCore_Int::NotifyError<long long>(a1, a2, a3, 4, v10, a6, a7);
    case 8:
      LOBYTE(v12) = *(unsigned char *)a5;
      AdobeXMPCore_Int::NotifyError<char const*>(a1, a2, a3, 8, (uint64_t)&v12, a6, a7);
    default:
      if (a4 == 16)
      {
        double v11 = *(double *)a5;
        AdobeXMPCore_Int::NotifyError<double>(a1, a2, a3, a4, a6, a7, v11);
      }
      return;
  }
  uint64_t v8 = *a5;

  AdobeXMPCore_Int::NotifyError<void *>(a1, a2, a3, a4, v8, a6, a7);
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::GetParameter(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  int8x8_t v7 = (int8x8_t)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + *(void *)(*(void *)a1 - 304)) + 208))(a1 + *(void *)(*(void *)a1 - 304));
  unint64_t v8 = (unint64_t)v7;
  unint64_t v30 = (unint64_t)v7;
  if (*(unsigned char *)(a1 + 48))
  {
    unsigned int v9 = (unsigned __int32)v7.i32[0] >> 8;
    unsigned __int8 v10 = v7.u8[2];
    unsigned __int8 v11 = v7.u8[3];
    uint64_t v12 = HIDWORD(*(void *)&v7);
    uint64_t v13 = *(void *)&v7 >> 40;
    uint64_t v14 = HIWORD(*(void *)&v7);
    uint8x8_t v15 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v7, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
    unsigned __int8 v16 = v7.i8[0] + 32;
    if ((v15.i8[0] & 1) == 0) {
      unsigned __int8 v16 = v7.i8[0];
    }
    if (v15.i8[1]) {
      LOBYTE(v9) = v7.i8[1] + 32;
    }
    if (v15.i8[2]) {
      unsigned __int8 v10 = v7.i8[2] + 32;
    }
    if (v15.i8[3]) {
      unsigned __int8 v11 = v7.i8[3] + 32;
    }
    if (v15.i8[4]) {
      LOBYTE(v12) = v7.i8[4] + 32;
    }
    if (v15.i8[5]) {
      LOBYTE(v13) = v7.i8[5] + 32;
    }
    if (v15.i8[6]) {
      LOBYTE(v14) = v7.i8[6] + 32;
    }
    if (v15.i8[7]) {
      uint64_t v17 = v7.u8[7] + 32;
    }
    else {
      uint64_t v17 = HIBYTE(*(void *)&v7);
    }
    unint64_t v8 = ((unint64_t)v14 << 48) | (v17 << 56) | ((unint64_t)v13 << 40) | ((unint64_t)v12 << 32) | ((unint64_t)v11 << 24) | ((unint64_t)v10 << 16) | ((unint64_t)v9 << 8) | v16;
    unint64_t v30 = v8;
  }
  memset(v29, 0, sizeof(v29));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(a1 + *(void *)(*(void *)a1 - 304)) + 256))(&v27);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v29, &v27, 0);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v20 = *(void **)(a1 + 16);
  uint64_t v19 = (void *)(a1 + 16);
  uint64_t v18 = v20;
  if (!v20) {
    goto LABEL_33;
  }
  uint64_t v21 = v19;
  do
  {
    unint64_t v22 = v18[4];
    BOOL v23 = v22 >= v8;
    if (v22 >= v8) {
      BOOL v24 = v18;
    }
    else {
      BOOL v24 = v18 + 1;
    }
    if (v23) {
      uint64_t v21 = v18;
    }
    uint64_t v18 = (void *)*v24;
  }
  while (*v24);
  if (v21 != v19 && v8 >= v21[4])
  {
    if (*((_DWORD *)v21 + 10) != a3)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(3, 4, 2);
    }
    *a4 = v21[6];
    uint64_t v25 = 1;
  }
  else
  {
LABEL_33:
    uint64_t v25 = 0;
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v29);
  return v25;
}

void sub_188872714(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

BOOL AdobeXMPCore_Int::ConfigurableImpl::RemoveParameter(AdobeXMPCore_Int::ConfigurableImpl *this, const unint64_t *a2)
{
  int8x8_t v3 = (int8x8_t)(*(uint64_t (**)(char *, const unint64_t *))(*(void *)((char *)this
                                                                                         + *(void *)(*(void *)this - 304))
                                                                             + 208))((char *)this + *(void *)(*(void *)this - 304), a2);
  unint64_t v18 = (unint64_t)v3;
  if (*((unsigned char *)this + 48))
  {
    unsigned int v4 = (unsigned __int32)v3.i32[0] >> 8;
    unsigned __int8 v5 = v3.u8[2];
    unsigned __int8 v6 = v3.u8[3];
    uint64_t v7 = HIDWORD(*(void *)&v3);
    uint64_t v8 = *(void *)&v3 >> 40;
    uint64_t v9 = HIWORD(*(void *)&v3);
    uint8x8_t v10 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v3, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
    unsigned __int8 v11 = v3.i8[0] + 32;
    if ((v10.i8[0] & 1) == 0) {
      unsigned __int8 v11 = v3.i8[0];
    }
    if (v10.i8[1]) {
      LOBYTE(v4) = v3.i8[1] + 32;
    }
    if (v10.i8[2]) {
      unsigned __int8 v5 = v3.i8[2] + 32;
    }
    if (v10.i8[3]) {
      unsigned __int8 v6 = v3.i8[3] + 32;
    }
    if (v10.i8[4]) {
      LOBYTE(v7) = v3.i8[4] + 32;
    }
    if (v10.i8[5]) {
      LOBYTE(v8) = v3.i8[5] + 32;
    }
    if (v10.i8[6]) {
      LOBYTE(v9) = v3.i8[6] + 32;
    }
    if (v10.i8[7]) {
      uint64_t v12 = v3.u8[7] + 32;
    }
    else {
      uint64_t v12 = HIBYTE(*(void *)&v3);
    }
    unint64_t v18 = ((unint64_t)v9 << 48) | (v12 << 56) | ((unint64_t)v8 << 40) | ((unint64_t)v7 << 32) | ((unint64_t)v6 << 24) | ((unint64_t)v5 << 16) | ((unint64_t)v4 << 8) | v11;
  }
  memset(v17, 0, sizeof(v17));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 304))
                                                + 256))(&v15);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v17, &v15, 1);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  BOOL v13 = std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__erase_unique<unsigned long long>((uint64_t)this + 8, &v18) != 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v17);
  return v13;
}

void sub_18887296C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

BOOL virtual thunk to'AdobeXMPCore_Int::ConfigurableImpl::RemoveParameter(AdobeXMPCore_Int::ConfigurableImpl *this, const unint64_t *a2)
{
  return AdobeXMPCore_Int::ConfigurableImpl::RemoveParameter((AdobeXMPCore_Int::ConfigurableImpl *)((char *)this + *(void *)(*(void *)this - 80)), a2);
}

void AdobeXMPCore_Int::ConfigurableImpl::GetAllParameters(AdobeXMPCore_Int::ConfigurableImpl *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  memset(v22, 0, sizeof(v22));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 304))
                                                + 256))(&v20);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v22, &v20, 0);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::vector<unsigned long long>::reserve((void **)a2, *((void *)this + 3));
  unsigned int v4 = (char *)*((void *)this + 1);
  unsigned __int8 v5 = (char *)this + 16;
  if (v4 != (char *)this + 16)
  {
    unsigned __int8 v6 = (void *)(a2 + 16);
    uint64_t v7 = *(void **)(a2 + 8);
    do
    {
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v8 = *(void **)a2;
        uint64_t v9 = ((uint64_t)v7 - *(void *)a2) >> 3;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = *v6 - (void)v8;
        if (v11 >> 2 > v10) {
          unint64_t v10 = v11 >> 2;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a2 + 16, v12);
          uint64_t v8 = *(void **)a2;
          uint64_t v7 = *(void **)(a2 + 8);
        }
        else
        {
          BOOL v13 = 0;
        }
        uint64_t v14 = &v13[8 * v9];
        *(void *)uint64_t v14 = *((void *)v4 + 4);
        uint64_t v15 = v14 + 8;
        while (v7 != v8)
        {
          uint64_t v16 = *--v7;
          *((void *)v14 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v16;
          v14 -= 8;
        }
        *(void *)a2 = v14;
        *(void *)(a2 + 8) = v15;
        *(void *)(a2 + 16) = &v13[8 * v12];
        if (v8) {
          operator delete(v8);
        }
        uint64_t v7 = v15;
      }
      else
      {
        *v7++ = *((void *)v4 + 4);
      }
      *(void *)(a2 + 8) = v7;
      uint64_t v17 = (char *)*((void *)v4 + 1);
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          uint64_t v17 = *(char **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unint64_t v18 = (char *)*((void *)v4 + 2);
          BOOL v19 = *(void *)v18 == (void)v4;
          unsigned int v4 = v18;
        }
        while (!v19);
      }
      unsigned int v4 = v18;
    }
    while (v18 != v5);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v22);
}

void sub_188872B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  unsigned __int8 v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned __int8 v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void virtual thunk to'AdobeXMPCore_Int::ConfigurableImpl::GetAllParameters(AdobeXMPCore_Int::ConfigurableImpl *this@<X0>, uint64_t a2@<X8>)
{
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::Size(AdobeXMPCore_Int::ConfigurableImpl *this)
{
  memset(v6, 0, sizeof(v6));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 304))
                                                + 256))(&v4);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v6, &v4, 0);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v2 = *((void *)this + 3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v6);
  return v2;
}

void sub_188872D54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  __cxa_call_unexpected(a1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ConfigurableImpl::Size(AdobeXMPCore_Int::ConfigurableImpl *this)
{
  return AdobeXMPCore_Int::ConfigurableImpl::Size((AdobeXMPCore_Int::ConfigurableImpl *)((char *)this
                                                                                       + *(void *)(*(void *)this - 152)));
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::GetDataType(AdobeXMPCore_Int::ConfigurableImpl *this, const unint64_t *a2)
{
  int8x8_t v3 = (int8x8_t)(*(uint64_t (**)(char *, const unint64_t *))(*(void *)((char *)this
                                                                                         + *(void *)(*(void *)this - 304))
                                                                             + 208))((char *)this + *(void *)(*(void *)this - 304), a2);
  unint64_t v4 = (unint64_t)v3;
  if (*((unsigned char *)this + 48))
  {
    unsigned int v5 = (unsigned __int32)v3.i32[0] >> 8;
    unsigned __int8 v6 = v3.u8[2];
    unsigned __int8 v7 = v3.u8[3];
    uint64_t v8 = HIDWORD(*(void *)&v3);
    uint64_t v9 = *(void *)&v3 >> 40;
    uint8x8_t v10 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v3, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
    uint64_t v11 = HIWORD(*(void *)&v3);
    if (v10.i8[0]) {
      unsigned __int8 v12 = v3.i8[0] + 32;
    }
    else {
      unsigned __int8 v12 = v3.i8[0];
    }
    if (v10.i8[1]) {
      LOBYTE(v5) = v3.i8[1] + 32;
    }
    if (v10.i8[2]) {
      unsigned __int8 v6 = v3.i8[2] + 32;
    }
    if (v10.i8[3]) {
      unsigned __int8 v7 = v3.i8[3] + 32;
    }
    if (v10.i8[4]) {
      LOBYTE(v8) = v3.i8[4] + 32;
    }
    if (v10.i8[5]) {
      LOBYTE(v9) = v3.i8[5] + 32;
    }
    if (v10.i8[6]) {
      LOBYTE(v1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v3.i8[6] + 32;
    }
    if (v10.i8[7]) {
      uint64_t v13 = v3.u8[7] + 32;
    }
    else {
      uint64_t v13 = HIBYTE(*(void *)&v3);
    }
    unint64_t v4 = ((unint64_t)v11 << 48) | (v13 << 56) | ((unint64_t)v9 << 40) | ((unint64_t)v8 << 32) | ((unint64_t)v7 << 24) | ((unint64_t)v6 << 16) | ((unint64_t)v5 << 8) | v12;
  }
  memset(v25, 0, sizeof(v25));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 304))
                                                + 256))(&v23);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v25, &v23, 0);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v16 = (void *)*((void *)this + 2);
  uint64_t v15 = (char *)this + 16;
  uint64_t v14 = v16;
  if (!v16) {
    goto LABEL_34;
  }
  uint64_t v17 = v15;
  do
  {
    unint64_t v18 = v14[4];
    BOOL v19 = v18 >= v4;
    if (v18 >= v4) {
      uint64_t v20 = v14;
    }
    else {
      uint64_t v20 = v14 + 1;
    }
    if (v19) {
      uint64_t v17 = (char *)v14;
    }
    uint64_t v14 = (void *)*v20;
  }
  while (*v20);
  if (v17 != v15 && v4 >= *((void *)v17 + 4)) {
    uint64_t v21 = *((unsigned int *)v17 + 10);
  }
  else {
LABEL_34:
  }
    uint64_t v21 = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v25);
  return v21;
}

void sub_188872FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ConfigurableImpl::GetDataType(AdobeXMPCore_Int::ConfigurableImpl *this, const unint64_t *a2)
{
  return AdobeXMPCore_Int::ConfigurableImpl::GetDataType((AdobeXMPCore_Int::ConfigurableImpl *)((char *)this + *(void *)(*(void *)this - 160)), a2);
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::ValidateValue()
{
  return 0;
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::TreatKeyAsCaseInsensitive(uint64_t this, char a2)
{
  *(unsigned char *)(this + 48) = a2;
  return this;
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::AllowDifferentValueTypesForExistingEntries(uint64_t this, char a2)
{
  *(unsigned char *)(this + 49) = a2;
  return this;
}

void AdobeXMPCore_Int::ConfigurableImpl::SetAllowedKeys(AdobeXMPCore_Int::ConfigurableImpl *this, unint64_t *a2, uint64_t a3)
{
  memset(v9, 0, sizeof(v9));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)this + *(void *)(*(void *)this - 304))
                                                + 256))(&v7);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v9, &v7, 1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(*((void *)this + 4), *(void **)(v6 + 8));
    MEMORY[0x18C11C0E0](v6, 0x1020C4062D53EE8);
    *((void *)this + 4) = 0;
  }
  if (a2 && a3) {
    operator new();
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v9);
}

void sub_1888732B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ConfigurableImpl::SetAllowedValueTypesForKeys(void *a1, uint64_t a2, uint64_t a3)
{
  memset(v9, 0, sizeof(v9));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)a1 + *(void *)(*a1 - 304)) + 256))(&v7);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v9, &v7, 1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v6 = a1[5];
  if (v6)
  {
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(a1[5], *(void **)(v6 + 8));
    MEMORY[0x18C11C0E0](v6, 0x1020C4062D53EE8);
    a1[5] = 0;
  }
  if (a2 && a3) {
    operator new();
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v9);
}

void sub_1888735A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(AdobeXMPCore_Int::ConfigurableImpl *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 304)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 216)) = a2[2];
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(*((void *)this + 4), *(void **)(v4 + 8));
    MEMORY[0x18C11C0E0](v4, 0x1020C4062D53EE8);
    *((void *)this + 4) = 0;
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(*((void *)this + 5), *(void **)(v5 + 8));
    MEMORY[0x18C11C0E0](v5, 0x1020C4062D53EE8);
    *((void *)this + 5) = 0;
  }
  std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

void AdobeXMPCore_Int::NotifyError<BOOL>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  switch(a6)
  {
    case 1:
      AdobeXMPCore_Int::NotifyError<BOOL,BOOL>(a1, a2, a3);
    case 2:
      uint64_t v7 = *a7;
      AdobeXMPCore_Int::NotifyError<BOOL,unsigned long long>(a1, a2, a3, a4, a5, 2, v7);
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      uint64_t v8 = *a7;
      AdobeXMPCore_Int::NotifyError<BOOL,long long>(a1, a2, a3, a4, a5, 4, v8);
    case 8:
      AdobeXMPCore_Int::NotifyError<BOOL,char const*>(a1, a2, a3);
    default:
      if (a6 == 16)
      {
        double v9 = *(double *)a7;
        AdobeXMPCore_Int::NotifyError<BOOL,double>(v9, a1, a2, a3);
      }
      return;
  }

  AdobeXMPCore_Int::NotifyError<BOOL,void *>(a1, a2, a3);
}

void AdobeXMPCore_Int::NotifyError<char const*>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  switch(a6)
  {
    case 1:
      AdobeXMPCore_Int::NotifyError<char const*,BOOL>(a1, a2, a3);
    case 2:
      uint64_t v7 = *a7;
      AdobeXMPCore_Int::NotifyError<char const*,unsigned long long>(a1, a2, a3, a4, a5, 2, v7);
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      uint64_t v8 = *a7;
      AdobeXMPCore_Int::NotifyError<char const*,long long>(a1, a2, a3, a4, a5, 4, v8);
    case 8:
      AdobeXMPCore_Int::NotifyError<char const*,char const*>(a1, a2, a3);
    default:
      if (a6 == 16)
      {
        double v9 = *(double *)a7;
        AdobeXMPCore_Int::NotifyError<char const*,double>(v9, a1, a2, a3);
      }
      return;
  }

  AdobeXMPCore_Int::NotifyError<char const*,void *>(a1, a2, a3);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  switch(a6)
  {
    case 1:
      AdobeXMPCore_Int::NotifyError<unsigned long long,BOOL>(a1, a2, a3, a4, a5);
    case 2:
      uint64_t v7 = *a7;
      AdobeXMPCore_Int::NotifyError<unsigned long long,unsigned long long>(a1, a2, a3, a4, a5, 2, v7);
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      uint64_t v8 = *a7;
      AdobeXMPCore_Int::NotifyError<unsigned long long,long long>(a1, a2, a3, a4, a5, 4, v8);
    case 8:
      AdobeXMPCore_Int::NotifyError<unsigned long long,char const*>(a1, a2, a3, a4, a5);
    default:
      if (a6 == 16)
      {
        double v9 = *(double *)a7;
        AdobeXMPCore_Int::NotifyError<unsigned long long,double>(v9, a1, a2, a3, a4, a5);
      }
      return;
  }

  AdobeXMPCore_Int::NotifyError<unsigned long long,void *>(a1, a2, a3, a4, a5);
}

void AdobeXMPCore_Int::NotifyError<long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  switch(a6)
  {
    case 1:
      AdobeXMPCore_Int::NotifyError<long long,BOOL>(a1, a2, a3, a4, a5);
    case 2:
      uint64_t v7 = *a7;
      AdobeXMPCore_Int::NotifyError<long long,unsigned long long>(a1, a2, a3, a4, a5, 2, v7);
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      uint64_t v8 = *a7;
      AdobeXMPCore_Int::NotifyError<long long,long long>(a1, a2, a3, a4, a5, 4, v8);
    case 8:
      AdobeXMPCore_Int::NotifyError<long long,char const*>(a1, a2, a3, a4, a5);
    default:
      if (a6 == 16)
      {
        double v9 = *(double *)a7;
        AdobeXMPCore_Int::NotifyError<long long,double>(v9, a1, a2, a3, a4, a5);
      }
      return;
  }

  AdobeXMPCore_Int::NotifyError<long long,void *>(a1, a2, a3, a4, a5);
}

void AdobeXMPCore_Int::NotifyError<double>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t *a6, double a7)
{
  switch(a5)
  {
    case 1:
      AdobeXMPCore_Int::NotifyError<double,BOOL>(a7, a1, a2, a3);
    case 2:
      uint64_t v7 = *a6;
      AdobeXMPCore_Int::NotifyError<double,unsigned long long>(a7, a1, a2, a3, a4, 2, v7);
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      uint64_t v8 = *a6;
      AdobeXMPCore_Int::NotifyError<double,long long>(a7, a1, a2, a3, a4, 4, v8);
    case 8:
      AdobeXMPCore_Int::NotifyError<double,char const*>(a7, a1, a2, a3);
    default:
      if (a5 == 16)
      {
        double v9 = *(double *)a6;
        AdobeXMPCore_Int::NotifyError<double,double>(a7, v9, a1, a2, a3);
      }
      return;
  }

  AdobeXMPCore_Int::NotifyError<double,void *>(a7, a1, a2, a3);
}

void AdobeXMPCore_Int::NotifyError<void *>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  switch(a6)
  {
    case 1:
      AdobeXMPCore_Int::NotifyError<void *,BOOL>(a1, a2, a3);
    case 2:
      uint64_t v7 = *a7;
      AdobeXMPCore_Int::NotifyError<void *,unsigned long long>(a1, a2, a3, a4, a5, 2, v7);
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      uint64_t v8 = *a7;
      AdobeXMPCore_Int::NotifyError<void *,long long>(a1, a2, a3, a4, a5, 4, v8);
    case 8:
      AdobeXMPCore_Int::NotifyError<void *,char const*>(a1, a2, a3);
    default:
      if (a6 == 16)
      {
        double v9 = *(double *)a7;
        AdobeXMPCore_Int::NotifyError<void *,double>(v9, a1, a2, a3);
      }
      return;
  }

  AdobeXMPCore_Int::NotifyError<void *,void *>(a1, a2, a3);
}

void AdobeXMPCore_Int::NotifyError<BOOL,BOOL>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_1888741BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<BOOL,char const*>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188874508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<BOOL,unsigned long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = 0;
  uint64_t v9 = a7;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188874850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<BOOL,long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = 0;
  uint64_t v9 = a7;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188874B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<BOOL,double>(double a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_188874EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<BOOL,void *>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188875228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<char const*,BOOL>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188875574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<char const*,char const*>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_1888758C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<char const*,unsigned long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = 0;
  uint64_t v9 = a7;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188875C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<char const*,long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = 0;
  uint64_t v9 = a7;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188875F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<char const*,double>(double a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_1888762A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<char const*,void *>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_1888765F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,BOOL>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = a5;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_18887693C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,char const*>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = a5;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188876C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,unsigned long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a7;
  uint64_t v10 = a5;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188876FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a7;
  uint64_t v10 = a5;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188877308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,double>(double a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a6;
  double v8 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_18887764C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,void *>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = a5;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188877994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<long long,BOOL>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = a5;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188877CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<long long,char const*>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = a5;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188878028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<long long,unsigned long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a7;
  uint64_t v10 = a5;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188878368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<long long,long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a7;
  uint64_t v10 = a5;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_1888786A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<long long,double>(double a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = a6;
  double v8 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_1888789EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<long long,void *>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v7 = a5;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_188878D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<double,BOOL>(double a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_18887907C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<double,char const*>(double a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_1888793C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<double,unsigned long long>(double a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v10 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = a7;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_18887970C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<double,long long>(double a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v10 = a1;
  uint64_t v8 = 0;
  uint64_t v9 = a7;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_188879A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<double,double>(double a1, double a2, uint64_t a3, uint64_t a4, int a5)
{
  double v7 = a2;
  double v8 = a1;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a5, 2);
}

void sub_188879D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<double,void *>(double a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_18887A0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<void *,BOOL>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_18887A420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<void *,char const*>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_18887A76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<void *,unsigned long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = 0;
  uint64_t v9 = a7;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_18887AAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<void *,long long>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = 0;
  uint64_t v9 = a7;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_18887ADFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<void *,double>(double a1, uint64_t a2, uint64_t a3, int a4)
{
  double v6 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a4, 2);
}

void sub_18887B144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::NotifyError<void *,void *>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2);
}

void sub_18887B48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  uint64_t v9 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v4);
  uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)v9);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v4);
  return 1;
}

uint64_t *std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  BOOL v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        BOOL v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        BOOL v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    uint64_t v11 = (uint64_t *)(**MemoryAllocator)(MemoryAllocator, 40);
    void v11[4] = *a3;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    uint64_t v12 = (**MemoryAllocator)(MemoryAllocator, 48);
    *(void *)(v12 + 32) = **a4;
    *(_DWORD *)(v12 + 40) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v9;
}

void AdobeXMPCore_Int::RDFDOMParserImpl::clone(AdobeXMPCore_Int::RDFDOMParserImpl *this)
{
  uint64_t v1 = (AdobeXMPCore_Int::RDFDOMParserImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x80);
  AdobeXMPCore_Int::RDFDOMParserImpl::RDFDOMParserImpl(v1);
}

void sub_18887B768(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::RDFDOMParserImpl::RDFDOMParserImpl(AdobeXMPCore_Int::RDFDOMParserImpl *this)
{
  uint64_t v2 = (AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this + 16);
  *(void *)this = &unk_1ED4CADE0;
  *((void *)this + 6) = &unk_1ED4CBA98;
  *((void *)this + 2) = &unk_1ED4CAF68;
  *((void *)this + 13) = &unk_1ED4CB360;
  *(void *)((char *)this + unk_1ED4CAE80 + 16) = &unk_1ED4CB0C0;
  *(void *)((char *)this + *(void *)(*((void *)this + 2) - 312) + 16) = &unk_1ED4CB208;
  *(void *)((char *)this + *(void *)(*((void *)this + 2) - 320) + 16) = &unk_1ED4CB360;
  AdobeXMPCore_Int::ConfigurableImpl::ConfigurableImpl((uint64_t)this + 48, (uint64_t *)&off_1ED4DD6B0);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = &unk_1ED4CAB00;
  AdobeXMPCore_Int::DOMParserImpl::DOMParserImpl(v2, (uint64_t *)&off_1ED4DD5E8);
}

void sub_18887B98C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DD6C8);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(v1, (uint64_t *)&off_1ED4DD6B0);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::RDFDOMParserImpl::ParseAsNode(AdobeXMPCore_Int::RDFDOMParserImpl *this, const char *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  operator new();
}

void sub_18887BBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a2 == 1)
  {
    uint64_t v17 = (unsigned int *)__cxa_begin_catch(exception_object);
    a13 = 0;
    uint64_t v18 = *(void *)(v15 + 8);
    if (v18)
    {
      if (*(void *)(v18 + 24)) {
        *(_DWORD *)(v18 + 12) = *(_DWORD *)(a14 + 364);
      }
    }
    XMPUtils::MapXMPErrorToIError(*v17, (int *)&a13 + 1, &a13);
    AdobeXMPCore_Int::IError_I::CreateError(SHIDWORD(a13), a13, 2);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::ParseAsNode(AdobeXMPCore_Int::RDFDOMParserImpl *this, const char *a2)
{
}

uint64_t AdobeXMPCore_Int::RDFDOMParserImpl::ValidateValue()
{
  return 0;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::ValidateValue()
{
  return 0;
}

uint64_t AdobeXMPCore_Int::RDFDOMParserImpl::SetErrorCallback(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

void *virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::SetErrorCallback(void *result, uint64_t a2)
{
  *(void *)((char *)result + *(void *)(*result - 352) + 8) = a2;
  return result;
}

void AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl(AdobeXMPCore_Int::RDFDOMParserImpl *this)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl(this);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl(void *a1)
{
  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)a1
                                                                                             + *(void *)(*a1 - 208)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)a1
                                                                                             + *(void *)(*a1 - 208)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl(AdobeXMPCore_Int::RDFDOMParserImpl *this)
{
  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this
                                                                                             + *(void *)(*(void *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this
                                                                                             + *(void *)(*(void *)this - 48)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::DOMParserImpl::~DOMParserImpl(AdobeXMPCore_Int::DOMParserImpl *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 368)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 304)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 216)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 224)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 232)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 312)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 320)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 376)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 384)) = a2[9];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::shared_ptr<XMPMeta>::shared_ptr[abi:ne180100]<XMPMeta,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18887C2F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<XMPMeta>::shared_ptr[abi:ne180100]<XMPMeta,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<XMPMeta *,std::shared_ptr<XMPMeta>::__shared_ptr_default_delete<XMPMeta,XMPMeta>,std::allocator<XMPMeta>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<XMPMeta *,std::shared_ptr<XMPMeta>::__shared_ptr_default_delete<XMPMeta,XMPMeta>,std::allocator<XMPMeta>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XMPMeta *,std::shared_ptr<XMPMeta>::__shared_ptr_default_delete<XMPMeta,XMPMeta>,std::allocator<XMPMeta>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<XMPMeta>::shared_ptr[abi:ne180100]<XMPMeta,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t AdobeXMPCore_Int::IError_I::AppendParameter(void *a1, uint64_t a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 304);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)a2 + 192))();
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)a2 + 208))();
  BOOL v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)v3 + 128);

  return v6(v3, v4, v5);
}

uint64_t AdobeXMPCore_Int::IError_I::getCode(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,unsigned int>(a2, (uint64_t)this + *(void *)(*(void *)this - 304), 0, (uint64_t (*)(void *))AdobeXMPCommon::IError_v1::GetCode, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCommon::IError_v1::GetCode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t AdobeXMPCore_Int::IError_I::getDomain(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,AdobeXMPCommon::IError_v1::eErrorDomain>(a2, (uint64_t)this + *(void *)(*(void *)this - 304), 0, (uint64_t (*)(void *))AdobeXMPCommon::IError_v1::GetDomain, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,AdobeXMPCommon::IError_v1::eErrorDomain>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCommon::IError_v1::GetDomain(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t AdobeXMPCore_Int::IError_I::getSeverity(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,AdobeXMPCommon::IError_v1::eErrorSeverity>(a2, (uint64_t)this + *(void *)(*(void *)this - 304), 0, (uint64_t (*)(void *))AdobeXMPCommon::IError_v1::GetSeverity, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,AdobeXMPCommon::IError_v1::eErrorSeverity>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCommon::IError_v1::GetSeverity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t AdobeXMPCore_Int::IError_I::getMessage(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(void *)(*(void *)this - 304), (void (*)(char **__return_ptr, void *))AdobeXMPCommon::IError_v1::GetMessage, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18887CBD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18887CBB8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18887CD50(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCommon::IError_v1::GetMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t AdobeXMPCore_Int::IError_I::getLocation(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)a1 + *(void *)(*a1 - 304), (void (*)(char **__return_ptr, void *))AdobeXMPCommon::IError_v1::GetLocation, 0);
}

uint64_t AdobeXMPCommon::IError_v1::GetLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t AdobeXMPCore_Int::IError_I::getParameter(AdobeXMPCore_Int::IError_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,unsigned long long>(a3, (uint64_t)this + *(void *)(*(void *)this - 304), (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCommon::IError_v1::GetParameter, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 49, a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18887CFDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18887CFC0);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18887D158(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCommon::IError_v1::GetParameter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t AdobeXMPCore_Int::IError_I::getNextError(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1*,AdobeXMPCommon::IError_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 304), (void (*)(char **__return_ptr, void *))AdobeXMPCommon::IError_v1::GetNextError, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1*,AdobeXMPCommon::IError_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x6E4572726F722020, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18887D358(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18887D33CLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18887D4D4(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCommon::IError_v1::GetNextError(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t AdobeXMPCore_Int::IError_I::setNextError(AdobeXMPCore_Int::IError_I *this, AdobeXMPCommon::IError_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 304);
  AdobeXMPCommon::IError_v1::MakeShared((uint64_t)a2, &v8);
  uint64_t v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1*,AdobeXMPCommon::IError_v1,std::shared_ptr<AdobeXMPCommon::IError_v1> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCommon::IError_v1::SetNextError, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 60, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18887D5AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1*,AdobeXMPCommon::IError_v1,std::shared_ptr<AdobeXMPCommon::IError_v1> const&>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x6E4572726F722020, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18887D734(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18887D718);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18887D8B0(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCommon::IError_v1::SetNextError(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t AdobeXMPCore_Int::IError_I::GetInterfacePointer(AdobeXMPCore_Int::IError_I *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(AdobeXMPCore_Int::IError_I *, uint64_t, uint64_t, uint64_t))(*(void *)this + 288))(this, a2, a3, 1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IError_I::GetInterfacePointer(AdobeXMPCore_Int::IError_I *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)((char *)this
                                                                                  + *(void *)(*(void *)this - 32))
                                                                      + 288))((char *)this + *(void *)(*(void *)this - 32), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IError_I::getInterfacePointer(AdobeXMPCore_Int::IError_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IError_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IError_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 69, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IError_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IError_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 272))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IError_I::getInterfacePointer(AdobeXMPCore_Int::IError_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IError_I::getInterfacePointer((AdobeXMPCore_Int::IError_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

void *AdobeXMPCore_Int::IError_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x6E55544638537472)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6E55544638537472, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 304));
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6E4572726F722020, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_18887DC50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v5 = a2;
  int v4 = a3;
  *a4 = 0;
  a4[1] = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 2, a1);
}

void AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  *a4 = 0;
  a4[1] = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 11, a1);
}

void AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 200, a1);
}

void AdobeXMPCore_Int::IError_I::CreateClientCodeExceptionError(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 100, a1);
}

void AdobeXMPCore_Int::ReportErrorAndContinueABISafe(AdobeXMPCore_Int *this, int a2, unsigned int a3, unsigned int a4, const char *a5, const AdobeXMPCommon::IError_v1 **a6)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  AdobeXMPCore_Int::IError_I::CreateError((int)this, a2, a3);
}

void sub_18887E304(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2 == 2)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    uint64_t v17 = *(char **)exception_ptr;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)exception_ptr + 1);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v18 = (*(uint64_t (**)(char *))(*(void *)&v17[*(void *)(*(void *)v17 - 56)] + 16))(&v17[*(void *)(*(void *)v17 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    *uint64_t v12 = v17;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    __cxa_end_catch();
    JUMPOUT(0x18887E2B4);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateClientCodeExceptionError(v13, &a11);
}

void sub_18887E498(void *a1)
{
}

uint64_t AdobeXMPCore_Int::IError_I::GetISharedObject_I(AdobeXMPCore_Int::IError_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 312);
}

uint64_t AdobeXMPCore_Int::IError_I::GetActualIError(AdobeXMPCore_Int::IError_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 304);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IError_I::GetISharedObject_I(AdobeXMPCore_Int::IError_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 40)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 40)) - 312);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

unsigned __int16 *TIFF_MemoryReader::SortIFD(unsigned __int16 *result)
{
  uint64_t v1 = result;
  unint64_t v2 = *result;
  if (v2 < 2)
  {
    LOWORD(v6) = *result;
  }
  else
  {
    uint64_t v3 = (unsigned __int16 *)*((void *)result + 1);
    unint64_t v4 = 1;
    unsigned int v5 = *v3;
    int v6 = *result;
    do
    {
      uint64_t v7 = &v3[6 * v4];
      unsigned int v8 = *v7;
      if (v8 <= v5)
      {
        if (v8 == v5)
        {
          uint64_t result = (unsigned __int16 *)memmove(&v3[6 * v4 - 6], v7, 12 * (v2 - v4));
          --v6;
          --v4;
        }
        else
        {
          uint64_t v9 = &v3[6 * (int)v4];
          uint64_t v10 = 12 * v4 - 12 * (int)v4;
          uint64_t v11 = (v4 << 32) + 0x100000000;
          int v12 = v4 + 1;
          uint64_t v13 = &v3[6 * v4];
          while (1)
          {
            uint64_t v14 = v9;
            size_t v15 = v10;
            int v16 = HIDWORD(v11);
            if (--v12 < 1) {
              break;
            }
            v9 -= 6;
            v10 += 12;
            v11 -= 0x100000000;
            uint64_t v17 = v13 - 6;
            unsigned int v18 = *(v13 - 6);
            v13 -= 6;
            if (v18 <= v8)
            {
              if (v18 == v8)
              {
                uint64_t v19 = *(void *)v7;
                *((_DWORD *)v17 + 2) = *((_DWORD *)v7 + 2);
                *(void *)uint64_t v17 = v19;
                uint64_t result = (unsigned __int16 *)memmove(&v3[6 * v4], &v3[6 * v4 + 6], 12 * (v2 - (v4 + 1)));
                --v6;
                --v4;
                goto LABEL_13;
              }
              break;
            }
          }
          uint64_t v20 = *(void *)v7;
          int v21 = *((_DWORD *)v7 + 2);
          uint64_t result = (unsigned __int16 *)memmove(&v3[6 * v16], v14, v15);
          *(void *)uint64_t v14 = v20;
          *((_DWORD *)v14 + 2) = v21;
        }
      }
      else
      {
        unsigned int v5 = *v7;
      }
LABEL_13:
      ++v4;
      unint64_t v2 = (unsigned __int16)v6;
    }
    while (v4 < (unsigned __int16)v6);
  }
  _WORD *v1 = v6;
  return result;
}

BOOL TIFF_MemoryReader::GetIFD(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Invalid IFD requested";
    *((unsigned char *)exception + 16) = 0;
  }
  int v6 = (_WORD *)(a1 + 16 * a2 + 112);
  if (!a3) {
    return *v6 != 0;
  }
  uint64_t v7 = (void *)(a3 + 8);
  std::__tree<unsigned long long>::destroy(a3, *(void **)(a3 + 8));
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = 0;
  void *v7 = 0;
  unsigned int v8 = (unsigned __int16)*v6;
  if (!*v6) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = (uint64_t *)(a1 + 16 * a2 + 120);
  do
  {
    uint64_t v12 = *v11;
    uint64_t v13 = *v11 + v9;
    if (*(unsigned __int16 *)(v13 + 2) - 14 >= 0xFFFFFFF3)
    {
      uint64_t v22 = 0;
      long long v21 = 0uLL;
      uint64_t v14 = *(unsigned __int16 *)(v13 + 2);
      unsigned int v15 = *(_DWORD *)(v13 + 4);
      LOWORD(v2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = *(_WORD *)v13;
      uint64_t v16 = kTIFF_TypeSizes[v14];
      WORD1(v2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v14;
      LODWORD(v22) = v15;
      DWORD1(v2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v15 / v16;
      if (*(_DWORD *)(v13 + 4) > 4u) {
        uint64_t v17 = *(void *)(a1 + 96) + *(unsigned int *)(v12 + v9 + 8);
      }
      else {
        uint64_t v17 = v12 + v9 + 8;
      }
      *((void *)&v21 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v17;
      uint64_t v23 = &v21;
      unsigned int v18 = std::__tree<std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_Manager::TagInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)a3, (unsigned __int16 *)&v21, (uint64_t)&std::piecewise_construct, (_WORD **)&v23);
      *(_OWORD *)(v18 + 5) = v21;
      *((_DWORD *)v18 + 14) = v22;
      unsigned int v8 = (unsigned __int16)*v6;
    }
    ++v10;
    v9 += 12;
  }
  while (v10 < v8);
  return 1;
}

unsigned __int16 *TIFF_MemoryReader::FindTagInIFD(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3)
{
  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Invalid IFD requested";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v3 = (char *)this + 16 * a2;
  unsigned int v4 = *((unsigned __int16 *)v3 + 56);
  if (!*((_WORD *)v3 + 56)) {
    return 0;
  }
  unsigned int v5 = (unsigned __int16 *)*((void *)this + 2 * a2 + 15);
  while (v4 >= 2)
  {
    unsigned int v6 = v4 >> 1;
    uint64_t v7 = &v5[6 * (v4 >> 1)];
    unsigned int v8 = *v7;
    v4 -= v4 >> 1;
    if (v8 <= a3) {
      v5 += 6 * v6;
    }
    else {
      unsigned int v4 = v6;
    }
    if (v8 == a3)
    {
      unsigned int v5 = v7;
      break;
    }
  }
  if (*v5 == a3) {
    return v5;
  }
  else {
    return 0;
  }
}

unsigned __int16 *TIFF_MemoryReader::GetValueOffset(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3)
{
  uint64_t result = TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*((_DWORD *)result + 1) > 4u)
    {
      uint64_t v6 = *((void *)this + 12);
      int v5 = v6 + *((_DWORD *)result + 2);
    }
    else
    {
      int v5 = result + 8;
      uint64_t v6 = *((void *)this + 12);
    }
    return (unsigned __int16 *)(v5 - v6);
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag(TIFF_MemoryReader *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  TagInIFD = TIFF_MemoryReader::FindTagInIFD(a1, a2, a3);
  if (!TagInIFD) {
    return 0;
  }
  uint64_t v7 = TagInIFD[1];
  BOOL v8 = (v7 - 1) < 0xD;
  if (a4 && (v7 - 1) <= 0xC)
  {
    unsigned int v9 = *((_DWORD *)TagInIFD + 1);
    *(_WORD *)a4 = *TagInIFD;
    uint64_t v10 = kTIFF_TypeSizes[v7];
    *(_WORD *)(a4 + 2) = v7;
    *(_DWORD *)(a4 + 4) = v9 / v10;
    *(_DWORD *)(a4 + 16) = v9;
    if (*((_DWORD *)TagInIFD + 1) > 4u) {
      uint64_t v11 = (unsigned __int16 *)(*((void *)a1 + 12) + *((unsigned int *)TagInIFD + 2));
    }
    else {
      uint64_t v11 = TagInIFD + 4;
    }
    *(void *)(a4 + 8) = v11;
    return 1;
  }
  return v8;
}

uint64_t TIFF_MemoryReader::GetTag_Integer(uint64_t (**this)(unsigned __int16 *), unsigned int a2, unsigned int a3, unsigned int *a4)
{
  TagInIFD = TIFF_MemoryReader::FindTagInIFD((TIFF_MemoryReader *)this, a2, a3);
  if (!TagInIFD) {
    return 0;
  }
  uint64_t v7 = TagInIFD[1];
  if (v7 > 0xD) {
    return 0;
  }
  uint64_t v8 = *((unsigned int *)TagInIFD + 1);
  if (kTIFF_TypeSizes[v7] != v8) {
    return 0;
  }
  uint64_t v9 = 0;
  switch(TagInIFD[1])
  {
    case 1u:
      if (v8 > 4) {
        uint64_t v12 = (unsigned __int8 *)this[12] + *((unsigned int *)TagInIFD + 2);
      }
      else {
        uint64_t v12 = (unsigned __int8 *)(TagInIFD + 4);
      }
      unsigned int v14 = *v12;
      goto LABEL_25;
    case 3u:
      uint64_t v10 = this[1];
      goto LABEL_11;
    case 4u:
    case 9u:
      uint64_t v10 = this[2];
LABEL_11:
      if (v8 > 4) {
        uint64_t v13 = (unsigned __int16 *)((char *)this[12] + *((unsigned int *)TagInIFD + 2));
      }
      else {
        uint64_t v13 = TagInIFD + 4;
      }
      unsigned int v14 = v10(v13);
      goto LABEL_25;
    case 6u:
      if (v8 > 4) {
        uint64_t v16 = (char *)this[12] + *((unsigned int *)TagInIFD + 2);
      }
      else {
        uint64_t v16 = (char *)(TagInIFD + 4);
      }
      unsigned int v14 = *v16;
      goto LABEL_25;
    case 8u:
      if (v8 > 4) {
        unsigned int v15 = (unsigned __int16 *)((char *)this[12] + *((unsigned int *)TagInIFD + 2));
      }
      else {
        unsigned int v15 = TagInIFD + 4;
      }
      unsigned int v14 = (__int16)this[1](v15);
LABEL_25:
      if (a4) {
        *a4 = v14;
      }
      uint64_t v9 = 1;
      break;
    default:
      return v9;
  }
  return v9;
}

uint64_t TIFF_MemoryReader::GetTag_Byte(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 1 && *(_DWORD *)(result + 4) == 1)
    {
      if (a4) {
        *a4 = *(unsigned char *)(result + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_SByte(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, signed __int8 *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 6 && *(_DWORD *)(result + 4) == 1)
    {
      if (a4) {
        *a4 = *(unsigned char *)(result + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_Short(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 3 && *(_DWORD *)(result + 4) == 2)
    {
      if (a4) {
        *a4 = (*((uint64_t (**)(uint64_t))this + 1))(result + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_SShort(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, __int16 *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 8 && *(_DWORD *)(result + 4) == 2)
    {
      if (a4) {
        *a4 = (*((uint64_t (**)(uint64_t))this + 1))(result + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_Long(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 4 && *(_DWORD *)(result + 4) == 4)
    {
      if (a4) {
        *a4 = (*((uint64_t (**)(uint64_t))this + 2))(result + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_SLong(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, int *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 9 && *(_DWORD *)(result + 4) == 4)
    {
      if (a4) {
        *a4 = (*((uint64_t (**)(uint64_t))this + 2))(result + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int16 *TIFF_MemoryReader::GetTag_Rational(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  uint64_t result = TIFF_MemoryReader::FindTagInIFD((TIFF_MemoryReader *)a1, a2, a3);
  if (result)
  {
    if (result[1] == 5 && *((_DWORD *)result + 1) == 8)
    {
      if (a4)
      {
        uint64_t v7 = *(void *)(a1 + 96) + *((unsigned int *)result + 2);
        *a4 = (*(uint64_t (**)(uint64_t))(a1 + 16))(v7);
        a4[1] = (*(uint64_t (**)(uint64_t))(a1 + 16))(v7 + 4);
      }
      return (unsigned __int16 *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int16 *TIFF_MemoryReader::GetTag_SRational(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  uint64_t result = TIFF_MemoryReader::FindTagInIFD((TIFF_MemoryReader *)a1, a2, a3);
  if (result)
  {
    if (result[1] == 10 && *((_DWORD *)result + 1) == 8)
    {
      if (a4)
      {
        uint64_t v7 = *(void *)(a1 + 96) + *((unsigned int *)result + 2);
        *a4 = (*(uint64_t (**)(uint64_t))(a1 + 16))(v7);
        a4[1] = (*(uint64_t (**)(uint64_t))(a1 + 16))(v7 + 4);
      }
      return (unsigned __int16 *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_Float(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, float *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 11 && *(_DWORD *)(result + 4) == 4)
    {
      if (a4) {
        *a4 = (*((float (**)(uint64_t))this + 3))(result + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_Double(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, double *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 12 && *(_DWORD *)(result + 4) == 8)
    {
      if (a4) {
        *a4 = (*((double (**)(void))this + 4))(*((void *)this + 12) + *(unsigned int *)(result + 8));
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_ASCII(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, const char **a4, unsigned int *a5)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 2)
    {
      if (a4)
      {
        if (*(_DWORD *)(result + 4) > 4u) {
          uint64_t v9 = (const char *)(*((void *)this + 12) + *(unsigned int *)(result + 8));
        }
        else {
          uint64_t v9 = (const char *)(result + 8);
        }
        *a4 = v9;
      }
      if (a5) {
        *a5 = *(_DWORD *)(result + 4);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_EncodedString(TIFF_MemoryReader *a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  uint64_t result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(a1, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 7)
    {
      if (a4)
      {
        unint64_t v7 = *(unsigned int *)(result + 4);
        if (v7 > 4) {
          uint64_t v8 = (unsigned __int8 *)(*((void *)a1 + 12) + *(unsigned int *)(result + 8));
        }
        else {
          uint64_t v8 = (unsigned __int8 *)(result + 8);
        }
        return TIFF_Manager::DecodeString((uint64_t)a1, v8, v7, a4);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TIFF_MemoryReader::ParseMemoryStream(void **this, const void *a2, size_t size, char a4, int a5)
{
  unsigned int v7 = size;
  if (*((unsigned char *)this + 88)) {
    free(this[12]);
  }
  uint64_t v10 = 0;
  *((unsigned char *)this + 88) = 0;
  this[12] = 0;
  *((_DWORD *)this + 26) = 0;
  do
  {
    uint64_t v11 = &this[v10];
    *((_WORD *)v11 + 56) = 0;
    v11[15] = 0;
    v10 += 2;
  }
  while (v10 != 10);
  if (!v7) {
    return;
  }
  if (a4)
  {
    if (v7 >= 0x6400001)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 206;
      BOOL v39 = "Outrageous length for memory-based TIFF";
    }
    else
    {
      uint64_t v12 = malloc_type_malloc(v7, 0xE4A3D098uLL);
      this[12] = v12;
      if (v12)
      {
        memcpy(v12, a2, v7);
        *((unsigned char *)this + 88) = 1;
        goto LABEL_11;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 15;
      BOOL v39 = "Out of memory";
    }
    exception[1] = v39;
    *((unsigned char *)exception + 16) = 0;
  }
  this[12] = (void *)a2;
LABEL_11:
  *((_DWORD *)this + 26) = v7;
  unsigned int v13 = v7 - 6;
  if (a5)
  {
    *((unsigned char *)this + 73) = 1;
    this[1] = GetUns16LE;
    this[2] = GetUns32LE;
    this[3] = GetFloatLE;
    this[4] = GetDoubleLE;
    this[5] = PutUns16LE;
    this[6] = PutUns32LE;
    this[7] = PutFloatLE;
    this[8] = PutDoubleLE;
    unsigned int v14 = (TIFF_MemoryReader *)this;
    unsigned int v15 = 0;
    int v16 = 1;
    goto LABEL_15;
  }
  unsigned int v17 = TIFF_Manager::CheckTIFFHeader((TIFF_Manager *)this, (unsigned int *)this[12], v7);
  if (v17)
  {
    unsigned int v15 = v17;
    unsigned int v14 = (TIFF_MemoryReader *)this;
    int v16 = 0;
LABEL_15:
    unsigned int v18 = TIFF_MemoryReader::ProcessOneIFD(v14, v15, 0, v16);
    unsigned int v19 = v18;
    if (v18)
    {
      if (IsOffsetValid(v18, 8u, v13))
      {
        TIFF_MemoryReader::ProcessOneIFD((TIFF_MemoryReader *)this, v19, 1u, 0);
      }
      else
      {
        uint64_t v40 = 206;
        BOOL v41 = "Bad IFD offset";
        uint64_t v42 = 0;
        (*((void (**)(void **, void, uint64_t *))*this + 33))(this, 0, &v40);
      }
    }
  }
  unsigned int v20 = *((unsigned __int16 *)this + 56);
  if (*((_WORD *)this + 56))
  {
    long long v21 = (unsigned __int16 *)this[15];
    unsigned int v22 = *((unsigned __int16 *)this + 56);
    while (v22 >= 2)
    {
      unsigned int v23 = v22 >> 1;
      BOOL v24 = &v21[6 * (v22 >> 1)];
      unsigned int v25 = *v24;
      v22 -= v22 >> 1;
      if (v25 <= 0x8769) {
        v21 += 6 * v23;
      }
      else {
        unsigned int v22 = v23;
      }
      if (v25 == 34665)
      {
        long long v21 = v24;
        goto LABEL_28;
      }
    }
    if (*v21 != 34665) {
      goto LABEL_31;
    }
LABEL_28:
    if (v21[1] == 4 && *((_DWORD *)v21 + 1) == 4)
    {
      unsigned int v26 = ((uint64_t (*)(unsigned __int16 *))this[2])(v21 + 4);
      TIFF_MemoryReader::ProcessOneIFD((TIFF_MemoryReader *)this, v26, 2u, 0);
      unsigned int v20 = *((unsigned __int16 *)this + 56);
    }
LABEL_31:
    if (v20)
    {
      uint64_t v27 = (unsigned __int16 *)this[15];
      while (v20 >= 2)
      {
        unsigned int v28 = v20 >> 1;
        unsigned int v29 = &v27[6 * (v20 >> 1)];
        unsigned int v30 = *v29;
        v20 -= v20 >> 1;
        if (v30 <= 0x8825) {
          v27 += 6 * v28;
        }
        else {
          unsigned int v20 = v28;
        }
        if (v30 == 34853)
        {
          uint64_t v27 = v29;
          goto LABEL_40;
        }
      }
      if (*v27 != 34853) {
        goto LABEL_45;
      }
LABEL_40:
      if (v27[1] == 4 && *((_DWORD *)v27 + 1) == 4)
      {
        unsigned int v31 = ((uint64_t (*)(unsigned __int16 *))this[2])(v27 + 4);
        if (IsOffsetValid(v31, 8u, v13))
        {
          TIFF_MemoryReader::ProcessOneIFD((TIFF_MemoryReader *)this, v31, 3u, 0);
        }
        else
        {
          uint64_t v40 = 206;
          BOOL v41 = "Bad IFD offset";
          uint64_t v42 = 0;
          (*((void (**)(void **, void, uint64_t *))*this + 33))(this, 0, &v40);
        }
      }
    }
  }
LABEL_45:
  unsigned int v32 = *((unsigned __int16 *)this + 72);
  if (*((_WORD *)this + 72))
  {
    BOOL v33 = (unsigned __int16 *)this[19];
    while (v32 >= 2)
    {
      unsigned int v34 = v32 >> 1;
      uint64_t v35 = &v33[6 * (v32 >> 1)];
      unsigned int v36 = *v35;
      v32 -= v32 >> 1;
      if (v36 <= 0xA005) {
        v33 += 6 * v34;
      }
      else {
        unsigned int v32 = v34;
      }
      if (v36 == 40965)
      {
        BOOL v33 = v35;
        goto LABEL_54;
      }
    }
    if (*v33 != 40965) {
      return;
    }
LABEL_54:
    if (v33[1] == 4 && *((_DWORD *)v33 + 1) == 4)
    {
      unsigned int v37 = ((uint64_t (*)(unsigned __int16 *))this[2])(v33 + 4);
      if (IsOffsetValid(v37, 8u, v13))
      {
        TIFF_MemoryReader::ProcessOneIFD((TIFF_MemoryReader *)this, v37, 4u, 0);
      }
      else
      {
        uint64_t v40 = 206;
        BOOL v41 = "Bad IFD offset";
        uint64_t v42 = 0;
        (*((void (**)(void **, void, uint64_t *))*this + 33))(this, 0, &v40);
      }
    }
  }
}

uint64_t TIFF_MemoryReader::ProcessOneIFD(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, int a4)
{
  if (a4)
  {
    if (*((_DWORD *)this + 26) >= a2) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v28 = 206;
    unsigned int v29 = "Bad IFD offset";
    uint64_t v30 = 0;
    (*(void (**)(TIFF_MemoryReader *, uint64_t, uint64_t *))(*(void *)this + 264))(this, 2, &v28);
    goto LABEL_7;
  }
  if (a2 < 8 || (unint64_t)*((unsigned int *)this + 26) - 6 < a2) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v7 = a3;
  uint64_t v8 = (char *)this + 16 * a3;
  uint64_t v9 = *((void *)this + 12);
  uint64_t v10 = v9 + a2;
  int v11 = (*((uint64_t (**)(uint64_t))this + 1))(v10);
  int v12 = (__int16)v11;
  if ((v11 & 0x8000) != 0)
  {
    uint64_t v28 = 206;
    unsigned int v29 = "Outrageous IFD count";
    uint64_t v30 = 0;
    (*(void (**)(TIFF_MemoryReader *, uint64_t, uint64_t *))(*(void *)this + 264))(this, 2, &v28);
  }
  unsigned int v13 = (unsigned __int16 *)(v8 + 112);
  if (12 * v11 + 6 > *((_DWORD *)this + 26) - a2)
  {
    uint64_t v28 = 206;
    unsigned int v29 = "Out of bounds IFD";
    uint64_t v30 = 0;
    (*(void (**)(TIFF_MemoryReader *, uint64_t, uint64_t *))(*(void *)this + 264))(this, 2, &v28);
  }
  unsigned int v14 = (4 * ((3 * v11) & 0x3FFFF)) | 2;
  *unsigned int v13 = v12;
  *((void *)this + 2 * v7 + 15) = v10 + 2;
  if (!v12) {
    return (*((uint64_t (**)(uint64_t))this + 2))(v10 + v14);
  }
  char v15 = 0;
  uint64_t v16 = (unsigned __int16)v12;
  int v17 = *((unsigned __int8 *)this + 73);
  unsigned int v18 = (unsigned int *)(a2 + v9 + 6);
  int v19 = -1;
  do
  {
    signed int v20 = *((unsigned __int16 *)v18 - 2);
    if (v17)
    {
      unsigned int v21 = *((unsigned __int16 *)v18 - 1);
    }
    else
    {
      signed int v20 = __rev16(v20);
      *((_WORD *)v18 - 2) = v20;
      unsigned int v21 = bswap32(*((unsigned __int16 *)v18 - 1)) >> 16;
      *((_WORD *)v18 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v21;
      *unsigned int v18 = bswap32(*v18);
    }
    BOOL v22 = v19 >= v20;
    if ((unsigned __int16)(v21 - 14) >= 0xFFF3u)
    {
      unsigned int v23 = *v18 * kTIFF_TypeSizes[v21];
      *unsigned int v18 = v23;
      if (v23 >= 5)
      {
        unsigned int v24 = v18[1];
        if (!v17)
        {
          unsigned int v24 = bswap32(v24);
          v18[1] = v24;
        }
        if (v24 < 8 || (unsigned int v25 = *((_DWORD *)this + 26), v25 <= v24) || v23 > v25 - v24) {
          *(void *)unsigned int v18 = 0;
        }
      }
    }
    v15 |= v22;
    v18 += 3;
    int v19 = v20;
    --v16;
  }
  while (v16);
  uint64_t v26 = (*((uint64_t (**)(uint64_t))this + 2))(v10 + v14);
  if (v15) {
    TIFF_MemoryReader::SortIFD(v13);
  }
  return v26;
}

BOOL TIFF_MemoryReader::HasExifIFD(TIFF_MemoryReader *this)
{
  return *((_WORD *)this + 72) != 0;
}

BOOL TIFF_MemoryReader::HasGPSInfoIFD(TIFF_MemoryReader *this)
{
  return *((_WORD *)this + 80) != 0;
}

void TIFF_MemoryReader::SetTag(TIFF_MemoryReader *this, unsigned __int8 a2, unsigned __int16 a3, unsigned __int16 a4, unsigned int a5, const void *a6)
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((unsigned char *)exception + 16) = 0;
}

void TIFF_MemoryReader::DeleteTag(TIFF_MemoryReader *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((unsigned char *)exception + 16) = 0;
}

uint64_t TIFF_MemoryReader::GetTiffLength(TIFF_MemoryReader *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t TIFF_MemoryReader::GetTiffStream(TIFF_MemoryReader *this)
{
  return *((void *)this + 12);
}

void TIFF_MemoryReader::SetTag_EncodedString()
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((unsigned char *)exception + 16) = 0;
}

uint64_t TIFF_MemoryReader::IsChanged(TIFF_MemoryReader *this)
{
  return 0;
}

uint64_t TIFF_MemoryReader::IsLegacyChanged(TIFF_MemoryReader *this)
{
  return 0;
}

void TIFF_MemoryReader::ParseFileStream()
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((unsigned char *)exception + 16) = 0;
}

void TIFF_MemoryReader::IntegrateFromPShop6(TIFF_MemoryReader *this, const void *a2)
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((unsigned char *)exception + 16) = 0;
}

uint64_t TIFF_MemoryReader::UpdateMemoryStream(TIFF_MemoryReader *this, void **a2)
{
  if (a2) {
    *a2 = (void *)*((void *)this + 12);
  }
  return *((unsigned int *)this + 26);
}

void TIFF_MemoryReader::UpdateFileStream()
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((unsigned char *)exception + 16) = 0;
}

void TIFF_MemoryReader::~TIFF_MemoryReader(void **this)
{
  *this = &unk_1ED4E4300;
  if (*((unsigned char *)this + 88)) {
    free(this[12]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1ED4E4300;
  if (*((unsigned char *)this + 88)) {
    free(this[12]);
  }

  JUMPOUT(0x18C11C0E0);
}

uint64_t **std::__tree<std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_Manager::TagInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((_DWORD *)v11 + 14) = 0;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMSerializer_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x63444F4D53726C7ALL)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63444F4D53726C7ALL, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 288));
    }
  }
  else
  {
    if (a4)
    {
      int v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63444F4D53726C7ALL, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_18887FD34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMSerializer_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IDOMSerializer_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::getInterfacePointer(AdobeXMPCore_Int::IDOMSerializer_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMSerializer_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMSerializer_I.cpp", 26, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMSerializer_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 256))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IDOMSerializer_I::getInterfacePointer(AdobeXMPCore_Int::IDOMSerializer_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IDOMSerializer_I::getInterfacePointer((AdobeXMPCore_Int::IDOMSerializer_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::clone(AdobeXMPCore_Int::IDOMSerializer_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMSerializer_v1,AdobeXMPCore::IDOMSerializer_v1*,AdobeXMPCore::IDOMSerializer_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 288), (void (*)(char **__return_ptr, void *))AdobeXMPCore::IDOMSerializer_v1::Clone, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMSerializer_v1,AdobeXMPCore::IDOMSerializer_v1*,AdobeXMPCore::IDOMSerializer_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = 0;
  unsigned int v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 224)] + 16))(&v8[*(void *)(*(void *)v8 - 224)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 232)] + 16))(&v8[*(void *)(*(void *)v8 - 232)], 0x63444F4D53726C7ALL, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888011C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    unsigned int v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unsigned int v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188880100);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_188880298(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IDOMSerializer_v1::Clone(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::serialize(AdobeXMPCore_Int::IDOMSerializer_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::INameSpacePrefixMap_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7 = *(void *)(*(void *)this - 288);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v12);
  AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared(a3, v8, &v14);
  long long v11 = v14;
  uint64_t v9 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMSerializer_v1,AdobeXMPCommon::IUTF8String_v1 *,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(a4, (uint64_t)this + v7, (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCore::IDOMSerializer_v1::Serialize, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMSerializer_I.cpp", 59, (uint64_t)&v12, (uint64_t)&v11);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v9;
}

void sub_188880398(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMSerializer_v1,AdobeXMPCommon::IUTF8String_v1 *,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  unsigned int v8 = a3;
  *a1 = 0;
  unsigned int v13 = 0;
  long long v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    unsigned int v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    unsigned int v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    long long v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    long long v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_18888053C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    long long v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unsigned int v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188880520);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888806B8(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IDOMSerializer_v1::Serialize(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

void *AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x63444F4D52677374)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63444F4D52677374, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 152));
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63444F4D52677374, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_1888807FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IDOMImplementationRegistry_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::getInterfacePointer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 26, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IDOMImplementationRegistry_I::getInterfacePointer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IDOMImplementationRegistry_I::getInterfacePointer((AdobeXMPCore_Int::IDOMImplementationRegistry_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::getParser(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, const char *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMParser_v1 *,AdobeXMPCore::IDOMParser_v1,char const*>(a3, (uint64_t)this + *(void *)(*(void *)this - 152), (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IDOMImplementationRegistry_v1::GetParser, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 54, (uint64_t)a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMParser_v1 *,AdobeXMPCore::IDOMParser_v1,char const*>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  long long v11 = 0;
  uint64_t v12 = 0;
  uint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 224)] + 16))(&v11[*(void *)(*(void *)v11 - 224)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 232)]
                                                             + 16))(&v11[*(void *)(*(void *)v11 - 232)], 0x63444F4D50727372, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_188880BDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    long long v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unsigned int v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188880BC0);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_188880D58(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IDOMImplementationRegistry_v1::GetParser(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::getSerializer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, const char *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMSerializer_v1 *,AdobeXMPCore::IDOMSerializer_v1,char const*>(a3, (uint64_t)this + *(void *)(*(void *)this - 152), (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IDOMImplementationRegistry_v1::GetSerializer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 59, (uint64_t)a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMSerializer_v1 *,AdobeXMPCore::IDOMSerializer_v1,char const*>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  long long v11 = 0;
  uint64_t v12 = 0;
  uint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 224)] + 16))(&v11[*(void *)(*(void *)v11 - 224)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 232)]
                                                             + 16))(&v11[*(void *)(*(void *)v11 - 232)], 0x63444F4D53726C7ALL, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_188880F58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    long long v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *unsigned int v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188880F3CLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888810D4(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IDOMImplementationRegistry_v1::GetSerializer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

void AdobeXMPCore_Int::IDOMImplementationRegistry_I::registerParser()
{
}

void sub_1888811BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,unsigned int,BOOL,char const*,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const> const&>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::RegisterParser(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

void AdobeXMPCore_Int::IDOMImplementationRegistry_I::registerSerializer()
{
}

void sub_188881400(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,unsigned int,BOOL,char const*,std::shared_ptr<AdobeXMPCore::IDOMSerializer_v1 const> const&>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::RegisterSerializer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

void AdobeXMPCore_Int::IDOMImplementationRegistry_I::RegisterParser()
{
}

void sub_188881618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::IDOMImplementationRegistry_I::RegisterSerializer()
{
}

void sub_1888816B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 160);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetActualIDOMImplementationRegistry(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 152);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this)
{
  return (uint64_t)this
       + *(void *)(*(void *)this - 40)
       + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 40)) - 160);
}

void AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,void *,void *,unsigned long long,unsigned int>(void *a1, void *a2)
{
  unsigned int v4 = (std::__shared_weak_count *)*((void *)__cxa_get_exception_ptr(a1) + 1);
  if (v4) {
    OUTLINED_FUNCTION_2();
  }
  __cxa_begin_catch(a1);
  uint64_t v5 = OUTLINED_FUNCTION_1();
  *a2 = v6(v5);
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = (*(uint64_t (**)(void))(v7 + 16))();
  (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  __cxa_end_catch();
}

void *virtual thunk to'AdobeXMPCore_Int::SharedObjectImpl::Acquire(void *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*this - 24));
  if (atomic_load((unint64_t *)v1 + 2)) {
    atomic_fetch_add(v1 + 2, 0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    atomic_fetch_add(v1 + 1, 1uLL);
  }
  return this;
}

unint64_t *virtual thunk to'AdobeXMPCore_Int::SharedObjectImpl::Release(AdobeXMPCore_Int::SharedObjectImpl *this)
{
  uint64_t result = (unint64_t *)((char *)this + *(void *)(*(void *)this - 32));
  unint64_t v2 = atomic_load(result + 1);
  if (!v2 || atomic_fetch_add((atomic_ullong *volatile)result + 1, 0xFFFFFFFFFFFFFFFFLL) == 1) {
    return (unint64_t *)(*(uint64_t (**)(void))(*result + 32))();
  }
  return result;
}

void AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(AdobeXMPCore_Int::SharedObjectImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x18C11C0E0);
}

void virtual thunk to'AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(AdobeXMPCore_Int::SharedObjectImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x18C11C0E0);
}

uint64_t AdobeXMPCore_Int::SharedObjectImpl::AcquireInternal(uint64_t this)
{
  return this;
}

uint64_t AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemovePrefix(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *__s, char *a3)
{
  if (AdobeXMPCore_Int::VerifyParameters((AdobeXMPCore_Int *)1, 0, (char *)__s, 0, a3, 0)) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(__s, a3);
  }
  return 0;
}

void sub_188881ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemovePrefix(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemovePrefix((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(void *)(*(void *)this - 88)), a2, a3);
}

uint64_t AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemoveNameSpace(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, const char *a3)
{
  if (AdobeXMPCore_Int::VerifyParameters(0, 1, 0, (const char *)a2, 0, (uint64_t)a3)) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3);
  }
  return 0;
}

void sub_188881C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemoveNameSpace(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, const char *a3)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemoveNameSpace((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(void *)(*(void *)this - 96)), a2, a3);
}

uint64_t AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsPrefixPresent(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *__s, char *a3)
{
  if (AdobeXMPCore_Int::VerifyParameters((AdobeXMPCore_Int *)1, 0, (char *)__s, 0, a3, 0)) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(__s, a3);
  }
  return 0;
}

void sub_188881DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsPrefixPresent(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsPrefixPresent((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(void *)(*(void *)this - 104)), a2, a3);
}

uint64_t AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsNameSpacePresent(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, const char *a3)
{
  if (AdobeXMPCore_Int::VerifyParameters(0, 1, 0, (const char *)a2, 0, (uint64_t)a3)) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3);
  }
  return 0;
}

void sub_188881ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsNameSpacePresent(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, const char *a3)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsNameSpacePresent((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(void *)(*(void *)this - 112)), a2, a3);
}

uint64_t AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetNameSpace@<X0>(char *__s@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t result = AdobeXMPCore_Int::VerifyParameters((AdobeXMPCore_Int *)1, 0, __s, 0, a2, 0);
  if (result) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)__s, a2);
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void sub_188882014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetNameSpace@<X0>(char *__s@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetNameSpace(__s, a2, a3);
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetNameSpace(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (!AdobeXMPCore_Int::VerifyParameters(1, 0, a2, &v8)) {
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v8, (char *)a1 + *(void *)(*a1 - 200) + 8, 1);
  uint64_t v6 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)(a1 + 4), (uint64_t)a2);
  if (a1 + 5 == v6)
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v8);
LABEL_7:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v7 = v6[7];
  *a3 = v6[6];
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v8);
}

void sub_18888212C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::VerifyParameters(int a1, int a2, void *a3, void *a4)
{
  if (a1)
  {
    if (!*a3)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(1, 1, 1);
    }
    if (!(*(uint64_t (**)(void))(*(void *)*a3 + 208))(*a3))
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(1, 1, 1);
    }
  }
  uint64_t result = 1;
  if (a2)
  {
    if (!*a4)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(1, 1, 1);
    }
  }
  return result;
}

void sub_188882618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetPrefix@<X0>(char *a1@<X1>, const char *a2@<X2>, void *a3@<X8>)
{
  uint64_t result = AdobeXMPCore_Int::VerifyParameters(0, 1, 0, a1, 0, (uint64_t)a2);
  if (result) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)a1, a2);
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void sub_18888273C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetPrefix@<X0>(char *a1@<X1>, const char *a2@<X2>, void *a3@<X8>)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetPrefix(a1, a2, a3);
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetPrefix(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (!AdobeXMPCore_Int::VerifyParameters(0, 1, &v8, a2)) {
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v8, (char *)a1 + *(void *)(*a1 - 200) + 8, 1);
  uint64_t v6 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)(a1 + 1), (uint64_t)a2);
  if (a1 + 2 == v6)
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v8);
LABEL_7:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v7 = v6[7];
  *a3 = v6[6];
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v8);
}

void sub_188882850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::NameSpacePrefixMapImpl::Size(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(void *)(*(void *)this - 200) + 8, 0);
  uint64_t v2 = *((void *)this + 3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::Size(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::Size((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(void *)(*(void *)this - 136)));
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clear(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  uint64_t v1 = this;
  memset(v3, 0, sizeof(v3));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v3, (char *)this + *(void *)(*(void *)this - 200) + 8, 1);
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::destroy((uint64_t)v1 + 8, *((void **)v1 + 2));
  *((void *)v1 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = (char *)v1 + 16;
  *((void *)v1 + 2) = 0;
  uint64_t v2 = (void *)*((void *)v1 + 5);
  uint64_t v1 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)v1 + 40);
  *((void *)v1 - 2) = 0;
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::destroy((uint64_t)v1 - 8, v2);
  *((void *)v1 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v3);
}

void virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clear(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clear((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this
                                                                                             + *(void *)(*(void *)this - 144)));
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clone(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  uint64_t v2 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x78);
  AdobeXMPCore_Int::NameSpacePrefixMapImpl::NameSpacePrefixMapImpl((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)v2);
  if (v3)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v19, (char *)this + *(void *)(*(void *)this - 200) + 8, 0);
    unsigned int v4 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((void *)this + 4);
    if (v4 != (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + 40))
    {
      do
      {
        *(void *)&long long v22 = (char *)v4 + 32;
        uint64_t v5 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&>,std::tuple<>>((AdobeXMPCore_Int::IMemoryAllocator_I *)(v2 + 32), (uint64_t)v4 + 32, (uint64_t)&std::piecewise_construct, (void **)&v22);
        uint64_t v7 = *((void *)v4 + 6);
        uint64_t v6 = *((void *)v4 + 7);
        if (v6) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = (std::__shared_weak_count *)v5[7];
        v5[6] = v7;
        v5[7] = v6;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        uint64_t v9 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((void *)v4 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = *(AdobeXMPCore_Int::NameSpacePrefixMapImpl **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((void *)v4 + 2);
            BOOL v11 = *(void *)v10 == (void)v4;
            unsigned int v4 = v10;
          }
          while (!v11);
        }
        unsigned int v4 = v10;
      }
      while (v10 != (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + 40));
    }
    uint64_t v12 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((void *)this + 1);
    if (v12 != (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + 16))
    {
      do
      {
        *(void *)&long long v22 = (char *)v12 + 32;
        unsigned int v13 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&>,std::tuple<>>((AdobeXMPCore_Int::IMemoryAllocator_I *)(v2 + 8), (uint64_t)v12 + 32, (uint64_t)&std::piecewise_construct, (void **)&v22);
        uint64_t v15 = *((void *)v12 + 6);
        uint64_t v14 = *((void *)v12 + 7);
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = (std::__shared_weak_count *)v13[7];
        v13[6] = v15;
        v13[7] = v14;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        uint64_t v17 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((void *)v12 + 1);
        if (v17)
        {
          do
          {
            unsigned int v18 = v17;
            uint64_t v17 = *(AdobeXMPCore_Int::NameSpacePrefixMapImpl **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            unsigned int v18 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((void *)v12 + 2);
            BOOL v11 = *(void *)v18 == (void)v12;
            uint64_t v12 = v18;
          }
          while (!v11);
        }
        uint64_t v12 = v18;
      }
      while (v18 != (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + 16));
    }
    (**(void (***)(uint64_t))(v2 + *(void *)(*(void *)v2 - 184)))(v2 + *(void *)(*(void *)v2 - 184));
    std::shared_ptr<AdobeXMPCore_Int::NameSpacePrefixMapImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::NameSpacePrefixMapImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(&v22, v2);
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(2, 1, 4);
}

void sub_188882D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clone(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clone((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this
                                                                                             + *(void *)(*(void *)this - 152)));
}

void *AdobeXMPCore_Int::NameSpacePrefixMapImpl::Merge(uint64_t a1, void **a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    unsigned int v4 = (void *)result[4];
    uint64_t v5 = result + 5;
    if (v4 != result + 5)
    {
      do
      {
        uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v4[4] + 192))(v4[4]);
        uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v4[4] + 208))(v4[4]);
        uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v4[6] + 192))(v4[6]);
        uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v4[6] + 208))(v4[6]);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112))(a1, v6, v7, v8, v9);
        uint64_t v10 = (void *)v4[1];
        if (v10)
        {
          do
          {
            BOOL v11 = v10;
            uint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            BOOL v11 = (void *)v4[2];
            BOOL v12 = *v11 == (void)v4;
            unsigned int v4 = v11;
          }
          while (!v12);
        }
        unsigned int v4 = v11;
      }
      while (v11 != v5);
    }
  }
  return result;
}

double AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap@<D0>(_OWORD *a1@<X8>)
{
  AdobeXMPCore_Int::ManageDefaultNameSpacePrefixMap(0, &v4);
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

void *AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared@<X0>(void *this@<X0>, AdobeXMPCore::INameSpacePrefixMap_v1 *a2@<X1>, void *a3@<X8>)
{
  if (this)
  {
    uint64_t v4 = (uint64_t)this;
    (**(void (***)(uint64_t, AdobeXMPCore::INameSpacePrefixMap_v1 *))((char *)this + *(void *)(*this - 56)))((uint64_t)this + *(void *)(*this - 56), a2);
    std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INameSpacePrefixMap_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, v4);
  }
  *a3 = 0;
  a3[1] = 0;
  return this;
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::NameSpacePrefixMapImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::NameSpacePrefixMapImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::NameSpacePrefixMapImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::NameSpacePrefixMapImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INameSpacePrefixMap_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1888831B0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 56) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188883214(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore::INameSpacePrefixMap_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INameSpacePrefixMap_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::INameSpacePrefixMap_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INameSpacePrefixMap_v1>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore::IMetadata_v1 *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::INameSpacePrefixMap_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INameSpacePrefixMap_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

BOOL AdobeXMPCore_Int::DefaultErrorNotifierImpl::Notify(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 56))() < 2;
}

void AdobeXMPCore_Int::DefaultErrorNotifierImpl::~DefaultErrorNotifierImpl(AdobeXMPCore_Int::DefaultErrorNotifierImpl *this)
{
}

void TIFF_FileWriter::TIFF_FileWriter(TIFF_FileWriter *this)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  TIFF_Manager::TIFF_Manager(this);
  *(void *)uint64_t v2 = &unk_1ED4E3CE8;
  *(void *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 88) = 0;
  *(unsigned char *)(v2 + 92) = 0;
  uint64_t v3 = 112;
  do
  {
    uint64_t v4 = (char *)this + v3;
    *uint64_t v4 = 0;
    *((_WORD *)v4 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
    *((_DWORD *)v4 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
    *((_DWORD *)v4 + 2) = 0;
    *((void *)v4 + 4) = 0;
    *(void *)((char *)this + v3 + 24) = 0;
    *((void *)v4 + 2) = (char *)this + v3 + 24;
    v3 += 40;
  }
  while (v4 + 40 != (char *)(v2 + 312));
  v5[0] = 704662861;
  TIFF_Manager::CheckTIFFHeader(this, (unsigned int *)v5, 8u);
}

void sub_188883410(_Unwind_Exception *a1)
{
  for (uint64_t i = 0; i != -200; i -= 40)
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy(v1 + i + 288, *(void **)(v1 + i + 296));
  _Unwind_Resume(a1);
}

void TIFF_FileWriter::~TIFF_FileWriter(TIFF_FileWriter *this)
{
  *(void *)this = &unk_1ED4E3CE8;
  if (*((unsigned char *)this + 90) && *((unsigned char *)this + 91))
  {
    uint64_t v4 = "! (this->memParsed && this->fileParsed)";
    int v5 = 60;
    goto LABEL_11;
  }
  if (*((unsigned char *)this + 92))
  {
    uint64_t v2 = (void *)*((void *)this + 12);
    if (v2)
    {
      free(v2);
      goto LABEL_6;
    }
    uint64_t v4 = "this->memStream != 0";
    int v5 = 63;
LABEL_11:
    __assert_rtn("~TIFF_FileWriter", "TIFF_FileWriter.cpp", v5, v4);
  }
LABEL_6:
  for (uint64_t i = 0; i != -200; i -= 40)
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy((uint64_t)this + i + 288, *(void **)((char *)this + i + 296));
}

{
  uint64_t vars8;

  TIFF_FileWriter::~TIFF_FileWriter(this);

  JUMPOUT(0x18C11C0E0);
}

void TIFF_FileWriter::DeleteExistingInfo(TIFF_FileWriter *this)
{
  if (*((unsigned char *)this + 90) && *((unsigned char *)this + 91)) {
    TIFF_FileWriter::DeleteExistingInfo();
  }
  if (*((unsigned char *)this + 92)) {
    free(*((void **)this + 12));
  }
  uint64_t v2 = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  do
  {
    uint64_t v4 = (void **)((char *)this + v2 + 136);
    uint64_t v3 = *v4;
    *((unsigned char *)v4 - 24) = 0;
    *((_WORD *)v4 - 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
    *(void **)((char *)v4 - 20) = 0;
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy((uint64_t)this + v2 + 128, v3);
    *(void *)((char *)this + v2 + 128) = v4;
    *uint64_t v4 = 0;
    *(void *)((char *)this + v2 + 144) = 0;
    v2 += 40;
  }
  while (v2 != 200);
  *((unsigned char *)this + 92) = 0;
  *((_DWORD *)this + 22) = 0;
}

uint64_t TIFF_FileWriter::PickIFD(uint64_t this)
{
  if (this >= 5)
  {
    int v1 = this;
    exception = __cxa_allocate_exception(0x18uLL);
    if (v1 == 9)
    {
      *(_DWORD *)exception = 8;
      uint64_t v3 = "kTIFF_KnownIFD not yet implemented";
    }
    else
    {
      *(_DWORD *)exception = 4;
      uint64_t v3 = "Invalid IFD number";
    }
    exception[1] = v3;
    *((unsigned char *)exception + 16) = 0;
  }
  return this;
}

char *TIFF_FileWriter::FindTagInIFD(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3)
{
  unsigned int v4 = a2;
  TIFF_FileWriter::PickIFD((uint64_t)a2);
  uint64_t v6 = (char *)this + 40 * v4;
  uint64_t v9 = *((void *)v6 + 17);
  uint64_t v7 = v6 + 136;
  uint64_t v8 = v9;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v7;
  do
  {
    unsigned int v11 = *(unsigned __int16 *)(v8 + 32);
    BOOL v12 = v11 >= a3;
    if (v11 >= a3) {
      unsigned int v13 = (uint64_t *)v8;
    }
    else {
      unsigned int v13 = (uint64_t *)(v8 + 8);
    }
    if (v12) {
      uint64_t v10 = (char *)v8;
    }
    uint64_t v8 = *v13;
  }
  while (*v13);
  if (v10 == v7) {
    return 0;
  }
  unsigned int v14 = *((unsigned __int16 *)v10 + 16);
  uint64_t v15 = v10 + 40;
  if (v14 <= a3) {
    return v15;
  }
  else {
    return 0;
  }
}

BOOL TIFF_FileWriter::GetIFD(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Invalid IFD number";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v4 = a1 + 40 * a2;
  int v5 = *(void **)(v4 + 128);
  uint64_t v6 = (void *)(v4 + 136);
  if (!a3) {
    return v5 != v6;
  }
  uint64_t v7 = (void *)(a3 + 8);
  std::__tree<unsigned long long>::destroy(a3, *(void **)(a3 + 8));
  *(void *)a3 = v7;
  *(void *)(a3 + 16) = 0;
  void *v7 = 0;
  if (v5 == v6) {
    return 0;
  }
  do
  {
    int v8 = *((_DWORD *)v5 + 10);
    uint64_t v9 = (uint64_t *)v5[7];
    int v10 = *((_DWORD *)v5 + 11);
    int v11 = *((_DWORD *)v5 + 12);
    unsigned int v18 = v5 + 5;
    BOOL v12 = std::__tree<std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_Manager::TagInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)a3, (unsigned __int16 *)v5 + 20, (uint64_t)&std::piecewise_construct, &v18);
    *((_DWORD *)v12 + 10) = v8;
    *((_DWORD *)v12 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v10;
    v12[6] = v9;
    *((_DWORD *)v12 + 14) = v11;
    unsigned int v13 = (void *)v5[1];
    if (v13)
    {
      do
      {
        unsigned int v14 = v13;
        unsigned int v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        unsigned int v14 = (void *)v5[2];
        BOOL v15 = *v14 == (void)v5;
        int v5 = v14;
      }
      while (!v15);
    }
    int v5 = v14;
  }
  while (v14 != v6);
  return 1;
}

char *TIFF_FileWriter::GetValueOffset(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3)
{
  double result = TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*((_DWORD *)result + 6)) {
      return (char *)*((unsigned int *)result + 7);
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL TIFF_FileWriter::GetTag(TIFF_FileWriter *a1, TIFF_FileWriter *a2, unsigned int a3, uint64_t a4)
{
  TagInIFD = TIFF_FileWriter::FindTagInIFD(a1, a2, a3);
  if (a4 && TagInIFD)
  {
    *(_WORD *)a4 = *(_WORD *)TagInIFD;
    uint64_t v6 = *((unsigned __int16 *)TagInIFD + 1);
    *(_WORD *)(a4 + 2) = v6;
    unsigned int v7 = *((_DWORD *)TagInIFD + 2);
    *(_DWORD *)(a4 + 4) = v7 / kTIFF_TypeSizes[v6];
    *(_DWORD *)(a4 + 16) = v7;
    *(void *)(a4 + 8) = *((void *)TagInIFD + 2);
  }
  return TagInIFD != 0;
}

uint64_t TIFF_FileWriter::SetTag(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, int a4, unsigned int a5, const void *a6)
{
  if ((a4 - 14) <= 0xFFFFFFF2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    uint64_t v27 = "Invalid TIFF tag type";
    goto LABEL_33;
  }
  unsigned int v10 = a2;
  uint64_t v12 = kTIFF_TypeSizes[a4];
  TIFF_FileWriter::PickIFD((uint64_t)a2);
  unsigned int v13 = (char *)this + 40 * v10;
  uint64_t v16 = *((void *)v13 + 17);
  BOOL v15 = (uint64_t *)(v13 + 136);
  uint64_t v14 = v16;
  if (!v16) {
    goto LABEL_13;
  }
  uint64_t v17 = v15;
  do
  {
    unsigned int v18 = *(unsigned __int16 *)(v14 + 32);
    BOOL v19 = v18 >= a3;
    if (v18 >= a3) {
      uint64_t v20 = (uint64_t *)v14;
    }
    else {
      uint64_t v20 = (uint64_t *)(v14 + 8);
    }
    if (v19) {
      uint64_t v17 = (uint64_t *)v14;
    }
    uint64_t v14 = *v20;
  }
  while (*v20);
  if (v17 == v15 || *((unsigned __int16 *)v17 + 16) > a3)
  {
LABEL_13:
    long long v28 = 0u;
    *(_OWORD *)unsigned int v29 = 0u;
    long long v30 = 0u;
    char v21 = *((unsigned char *)this + 91);
    LOWORD(v28) = a3;
    WORD4(v28) = a3;
    WORD5(v28) = a4;
    HIDWORD(v28) = a5;
    v29[0] = 0;
    v29[1] = 0;
    *(void *)&long long v30 = 0;
    BYTE8(v30) = 0;
    BYTE9(v30) = v21;
    uint64_t v17 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>((uint64_t **)v15 - 1, v15, (unsigned __int16 *)&v28, &v28);
    if (BYTE9(v30) | BYTE8(v30) && LODWORD(v29[0]) >= 5)
    {
      if (v29[1]) {
        free(v29[1]);
      }
    }
LABEL_26:
    size_t v24 = v12 * a5;
    *((unsigned char *)v17 + 72) = 1;
    *((_DWORD *)v17 + 12) = v24;
    if (v24 <= 4)
    {
      unsigned int v25 = (char *)v17 + 52;
      v17[7] = (uint64_t)v17 + 52;
LABEL_29:
      uint64_t result = (uint64_t)memcpy(v25, a6, v24);
      *((unsigned char *)v15 - 24) = 1;
      *((unsigned char *)this + 88) = 1;
      return result;
    }
    unsigned int v25 = malloc_type_malloc(v24, 0x3DB08A5DuLL);
    v17[7] = (uint64_t)v25;
    if (v25) {
      goto LABEL_29;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    uint64_t v27 = "Out of memory";
LABEL_33:
    exception[1] = v27;
    *((unsigned char *)exception + 16) = 0;
  }
  if (*((unsigned __int16 *)v17 + 21) != a4
    || *((_DWORD *)v17 + 11) != a5
    || (uint64_t result = memcmp(a6, (const void *)v17[7], *((unsigned int *)v17 + 12)), result))
  {
    if ((*((unsigned char *)v17 + 73) || *((unsigned char *)v17 + 72)) && *((_DWORD *)v17 + 12) >= 5u)
    {
      unsigned int v23 = (void *)v17[7];
      if (v23)
      {
        free(v23);
        v17[7] = 0;
      }
    }
    *((_WORD *)v17 + 2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a4;
    *((_DWORD *)v17 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a5;
    goto LABEL_26;
  }
  return result;
}

void sub_188883ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int a11, void *a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15)
{
  if (a15 | a14 && a11 >= 5)
  {
    if (a12) {
      free(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void TIFF_FileWriter::DeleteTag(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3)
{
  unsigned int v4 = a2;
  TIFF_FileWriter::PickIFD((uint64_t)a2);
  uint64_t v6 = (char *)this + 40 * v4;
  uint64_t v9 = *((void *)v6 + 17);
  unsigned int v7 = v6 + 136;
  uint64_t v8 = v9;
  if (v9)
  {
    unsigned int v10 = v7;
    do
    {
      unsigned int v11 = *(unsigned __int16 *)(v8 + 32);
      BOOL v12 = v11 >= a3;
      if (v11 >= a3) {
        unsigned int v13 = (uint64_t *)v8;
      }
      else {
        unsigned int v13 = (uint64_t *)(v8 + 8);
      }
      if (v12) {
        unsigned int v10 = (char *)v8;
      }
      uint64_t v8 = *v13;
    }
    while (*v13);
    if (v10 != v7 && *((unsigned __int16 *)v10 + 16) <= a3)
    {
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)v7 - 1, (uint64_t *)v10);
      TIFF_FileWriter::InternalTagInfo::~InternalTagInfo((TIFF_FileWriter::InternalTagInfo *)(v10 + 40));
      operator delete(v10);
      *((unsigned char *)this + 40 * v4 + 112) = 1;
      *((unsigned char *)this + 88) = 1;
      if (v4 || a3 != 700) {
        *((unsigned char *)this + 89) = 1;
      }
    }
  }
}

uint64_t TIFF_FileWriter::GetTag_Integer(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, unsigned int *a4)
{
  TagInIFD = TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (!TagInIFD || *((_DWORD *)TagInIFD + 1) != 1) {
    return 0;
  }
  uint64_t v7 = 0;
  switch(*((_WORD *)TagInIFD + 1))
  {
    case 1:
      unsigned int v8 = **((unsigned __int8 **)TagInIFD + 2);
      goto LABEL_11;
    case 3:
      unsigned int v8 = (*((uint64_t (**)(void))this + 1))(*((void *)TagInIFD + 2));
      goto LABEL_11;
    case 4:
    case 9:
      unsigned int v8 = (*((uint64_t (**)(void))this + 2))(*((void *)TagInIFD + 2));
      goto LABEL_11;
    case 6:
      unsigned int v8 = **((char **)TagInIFD + 2);
      goto LABEL_11;
    case 8:
      unsigned int v8 = (*((__int16 (**)(void))this + 1))(*((void *)TagInIFD + 2));
LABEL_11:
      if (a4) {
        *a4 = v8;
      }
      uint64_t v7 = 1;
      break;
    default:
      return v7;
  }
  return v7;
}

uint64_t TIFF_FileWriter::GetTag_Byte(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 1 && *(_DWORD *)(result + 8) == 1)
    {
      if (a4) {
        *a4 = **(unsigned char **)(result + 16);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_SByte(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, signed __int8 *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 6 && *(_DWORD *)(result + 8) == 1)
    {
      if (a4) {
        *a4 = **(unsigned char **)(result + 16);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_Short(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 3 && *(_DWORD *)(result + 8) == 2)
    {
      if (a4) {
        *a4 = (*((uint64_t (**)(void))this + 1))(*(void *)(result + 16));
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_SShort(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, __int16 *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 8 && *(_DWORD *)(result + 8) == 2)
    {
      if (a4) {
        *a4 = (*((uint64_t (**)(void))this + 1))(*(void *)(result + 16));
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_Long(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 4 && *(_DWORD *)(result + 8) == 4)
    {
      if (a4) {
        *a4 = (*((uint64_t (**)(void))this + 2))(*(void *)(result + 16));
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_SLong(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, int *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 9 && *(_DWORD *)(result + 8) == 4)
    {
      if (a4) {
        *a4 = (*((uint64_t (**)(void))this + 2))(*(void *)(result + 16));
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *TIFF_FileWriter::GetTag_Rational(TIFF_FileWriter *a1, TIFF_FileWriter *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t result = TIFF_FileWriter::FindTagInIFD(a1, a2, a3);
  if (result)
  {
    uint64_t v7 = *((void *)result + 2);
    if (v7 && *((_WORD *)result + 1) == 5 && *((_DWORD *)result + 2) == 8)
    {
      if (a4)
      {
        *a4 = (*((uint64_t (**)(void))a1 + 2))(*((void *)result + 2));
        a4[1] = (*((uint64_t (**)(uint64_t))a1 + 2))(v7 + 4);
      }
      return (char *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *TIFF_FileWriter::GetTag_SRational(TIFF_FileWriter *a1, TIFF_FileWriter *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t result = TIFF_FileWriter::FindTagInIFD(a1, a2, a3);
  if (result)
  {
    uint64_t v7 = *((void *)result + 2);
    if (v7 && *((_WORD *)result + 1) == 10 && *((_DWORD *)result + 2) == 8)
    {
      if (a4)
      {
        *a4 = (*((uint64_t (**)(void))a1 + 2))(*((void *)result + 2));
        a4[1] = (*((uint64_t (**)(uint64_t))a1 + 2))(v7 + 4);
      }
      return (char *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_Float(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, float *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 11 && *(_DWORD *)(result + 8) == 4)
    {
      if (a4) {
        *a4 = (*((float (**)(void))this + 3))(*(void *)(result + 16));
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_Double(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, double *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t result = *(void *)(result + 16);
    if (result)
    {
      if (*(_WORD *)(v7 + 2) == 12 && *(_DWORD *)(v7 + 8) == 8)
      {
        if (a4) {
          *a4 = (*((double (**)(void))this + 4))();
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_ASCII(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, const char **a4, unsigned int *a5)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    unsigned int v8 = *(_DWORD *)(result + 8);
    if ((v8 < 5 || *(void *)(result + 16)) && *(_WORD *)(result + 2) == 2)
    {
      if (a4) {
        *a4 = *(const char **)(result + 16);
      }
      if (a5) {
        *a5 = v8;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_EncodedString(TIFF_FileWriter *a1, TIFF_FileWriter *a2, unsigned int a3, std::string *a4)
{
  uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD(a1, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 7)
    {
      if (a4)
      {
        uint64_t v7 = *(unsigned __int8 **)(result + 16);
        unint64_t v8 = *(unsigned int *)(result + 8);
        return TIFF_Manager::DecodeString((uint64_t)a1, v7, v8, a4);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TIFF_FileWriter::SetTag_EncodedString(uint64_t a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4, int a5)
{
  memset(&__p, 0, sizeof(__p));
  TIFF_Manager::EncodeString(a1, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t v8 = LODWORD(__p.__r_.__value_.__r.__words[1]);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(void *)a1 + 32))(a1, a2, a3, 7, v8, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18888427C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TIFF_FileWriter::IsLegacyChanged(TIFF_FileWriter *this)
{
  char v1 = *((unsigned char *)this + 88);
  if (v1)
  {
    if (*((unsigned char *)this + 89))
    {
      char v1 = 1;
    }
    else
    {
      unint64_t v3 = 0;
      char v1 = 1;
      while (1)
      {
        if (*((unsigned char *)this + 40 * v3 + 112))
        {
          unsigned int v4 = (char *)this + 40 * v3;
          int v5 = v4 + 136;
          uint64_t v6 = (char *)*((void *)v4 + 16);
          if (v6 != v5) {
            break;
          }
        }
LABEL_16:
        char v1 = v3++ < 4;
        if (v3 == 5)
        {
          char v1 = 0;
          return v1 & 1;
        }
      }
      while (!v6[72] || *((_WORD *)v6 + 20) == 700)
      {
        uint64_t v7 = (char *)*((void *)v6 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = *(char **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (char *)*((void *)v6 + 2);
            BOOL v9 = *(void *)v8 == (void)v6;
            uint64_t v6 = v8;
          }
          while (!v9);
        }
        uint64_t v6 = v8;
        if (v8 == v5) {
          goto LABEL_16;
        }
      }
    }
  }
  return v1 & 1;
}

void TIFF_FileWriter::ParseMemoryStream(TIFF_FileWriter *this, void *a2, unsigned int a3, char a4)
{
  TIFF_FileWriter::DeleteExistingInfo(this);
  *((unsigned char *)this + 90) = 1;
  if (!a3) {
    return;
  }
  if ((a4 & 1) == 0)
  {
    if (*((unsigned char *)this + 92)) {
      TIFF_FileWriter::ParseMemoryStream();
    }
    *((void *)this + 12) = a2;
    goto LABEL_8;
  }
  if (a3 >= 0x6400001)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    uint64_t v20 = "Outrageous length for memory-based TIFF";
    goto LABEL_33;
  }
  uint64_t v8 = malloc_type_malloc(a3, 0x13BA6C7FuLL);
  *((void *)this + 12) = v8;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    uint64_t v20 = "Out of memory";
LABEL_33:
    exception[1] = v20;
    *((unsigned char *)exception + 16) = 0;
  }
  memcpy(v8, a2, a3);
  *((unsigned char *)this + 92) = 1;
  a2 = (void *)*((void *)this + 12);
LABEL_8:
  *((_DWORD *)this + 26) = a3;
  unsigned int v9 = a3 - 6;
  unsigned int v10 = TIFF_Manager::CheckTIFFHeader(this, (unsigned int *)a2, a3);
  if (v10)
  {
    unsigned int v11 = TIFF_FileWriter::ProcessMemoryIFD(this, v10, 0);
    if (v11)
    {
      unsigned int v12 = v11;
      if (IsOffsetValid(v11, 8u, v9))
      {
        TIFF_FileWriter::ProcessMemoryIFD(this, v12, 1u);
      }
      else
      {
        uint64_t v21 = 206;
        long long v22 = "Bad IFD offset";
        uint64_t v23 = 0;
        (*(void (**)(TIFF_FileWriter *, void, uint64_t *))(*(void *)this + 264))(this, 0, &v21);
        (*(void (**)(TIFF_FileWriter *, void, uint64_t))(*(void *)this + 40))(this, 0, 1);
      }
    }
  }
  TagInIFD = TIFF_FileWriter::FindTagInIFD(this, 0, 0x8769u);
  if (TagInIFD && *((_WORD *)TagInIFD + 1) == 4 && *((_DWORD *)TagInIFD + 2) == 4)
  {
    unsigned int v14 = (*((uint64_t (**)(void))this + 2))(*((void *)TagInIFD + 2));
    TIFF_FileWriter::ProcessMemoryIFD(this, v14, 2u);
  }
  BOOL v15 = TIFF_FileWriter::FindTagInIFD(this, 0, 0x8825u);
  if (v15 && *((_WORD *)v15 + 1) == 4 && *((_DWORD *)v15 + 2) == 4)
  {
    unsigned int v16 = (*((uint64_t (**)(void))this + 2))(*((void *)v15 + 2));
    if (IsOffsetValid(v16, 8u, v9))
    {
      TIFF_FileWriter::ProcessMemoryIFD(this, v16, 3u);
    }
    else
    {
      uint64_t v21 = 206;
      long long v22 = "Bad IFD offset";
      uint64_t v23 = 0;
      (*(void (**)(TIFF_FileWriter *, void, uint64_t *))(*(void *)this + 264))(this, 0, &v21);
      (*(void (**)(TIFF_FileWriter *, void, uint64_t))(*(void *)this + 40))(this, 0, 34853);
    }
  }
  uint64_t v17 = TIFF_FileWriter::FindTagInIFD(this, (TIFF_FileWriter *)2, 0xA005u);
  if (v17 && *((_WORD *)v17 + 1) == 4 && *((_DWORD *)v17 + 2) == 4)
  {
    unsigned int v18 = (*((uint64_t (**)(void))this + 2))(*((void *)v17 + 2));
    if (IsOffsetValid(v18, 8u, v9))
    {
      TIFF_FileWriter::ProcessMemoryIFD(this, v18, 4u);
    }
    else
    {
      uint64_t v21 = 206;
      long long v22 = "Bad IFD offset";
      uint64_t v23 = 0;
      (*(void (**)(TIFF_FileWriter *, void, uint64_t *))(*(void *)this + 264))(this, 0, &v21);
      (*(void (**)(TIFF_FileWriter *, uint64_t, uint64_t))(*(void *)this + 40))(this, 2, 40965);
    }
  }
}

uint64_t TIFF_FileWriter::ProcessMemoryIFD(TIFF_FileWriter *this, unsigned int a2, unsigned int a3)
{
  uint64_t v31 = a2;
  if (a2 < 8 || (unint64_t)*((unsigned int *)this + 26) - 6 < a2)
  {
    *(void *)&long long v32 = 206;
    *((void *)&v32 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = "Bad IFD offset";
    v33[0] = 0;
    (*(void (**)(TIFF_FileWriter *, uint64_t, long long *))(*(void *)this + 264))(this, 2, &v32);
  }
  unsigned int v6 = a3;
  uint64_t v7 = *((void *)this + 12) + v31;
  int v8 = (*((uint64_t (**)(uint64_t))this + 1))(v7);
  if ((v8 & 0x8000) != 0)
  {
    *(void *)&long long v32 = 206;
    *((void *)&v32 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = "Outrageous IFD count";
    v33[0] = 0;
    (*(void (**)(TIFF_FileWriter *, uint64_t, long long *))(*(void *)this + 264))(this, 2, &v32);
  }
  int v27 = 12 * v8;
  if (12 * v8 + 6 > *((_DWORD *)this + 26) - a2)
  {
    *(void *)&long long v32 = 206;
    *((void *)&v32 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = "Out of bounds IFD";
    v33[0] = 0;
    (*(void (**)(TIFF_FileWriter *, uint64_t, long long *))(*(void *)this + 264))(this, 2, &v32);
  }
  unsigned int v28 = v6;
  unsigned int v9 = (char *)this + 40 * v6;
  *((_DWORD *)v9 + 29) = a2;
  *((_WORD *)v9 + 57) = v8;
  if ((_WORD)v8)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    unsigned int v12 = (char *)this + 40 * v6;
    long long v30 = (uint64_t **)(v12 + 128);
    unsigned int v13 = (uint64_t *)(v12 + 136);
    unsigned int v29 = a2 + 10;
    uint64_t v14 = 12 * (unsigned __int16)v8;
    do
    {
      uint64_t v15 = v7 + v10;
      int v16 = (*((uint64_t (**)(uint64_t))this + 1))(v7 + v10 + 4);
      if ((v16 - 14) >= 0xFFFFFFF3)
      {
        __int16 v17 = v16;
        unsigned __int16 v18 = (*((uint64_t (**)(uint64_t))this + 1))(v15 + 2);
        int v19 = (*((uint64_t (**)(uint64_t))this + 2))(v15 + 6);
        long long v34 = 0u;
        *(void *)&long long v32 = v18;
        WORD4(v32) = v18;
        WORD5(v32) = v17;
        HIDWORD(v32) = v19;
        v33[0] = 0;
        v33[1] = 0;
        *(void *)&long long v34 = 0;
        WORD4(v34) = 0;
        uint64_t v20 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>(v30, v13, (unsigned __int16 *)&v32, &v32);
        unsigned int v21 = *((_DWORD *)v20 + 11) * kTIFF_TypeSizes[*((unsigned __int16 *)v20 + 21)];
        *((_DWORD *)v20 + 16) = v21;
        *((_DWORD *)v20 + 12) = v21;
        *((_DWORD *)v20 + 13) = *(_DWORD *)(v7 + v10 + 10);
        if (v21 > 4)
        {
          unsigned int v22 = (*((uint64_t (**)(uint64_t))this + 2))(v7 + v10 + 10);
          *((_DWORD *)v20 + 17) = v22;
          if (v22 >= 8 && (unsigned int v23 = *((_DWORD *)this + 26), v24 = v23 >= v22, v25 = v23 - v22, v25 != 0 && v24))
          {
            if (*((_DWORD *)v20 + 12) > v25)
            {
              v20[6] = 0;
              *((_DWORD *)v20 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
              unsigned int v22 = v31 + v10 + 10;
              *((_DWORD *)v20 + 16) = 0;
              *((_DWORD *)v20 + 17) = v22;
            }
          }
          else
          {
            v20[6] = 0;
            *((_DWORD *)v20 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
            unsigned int v22 = v29 + 12 * v11;
            *((_DWORD *)v20 + 16) = 0;
            *((_DWORD *)v20 + 17) = v31 + v10 + 10;
          }
        }
        else
        {
          unsigned int v22 = v29 + 12 * v11;
          *((_DWORD *)v20 + 17) = v31 + v10 + 10;
        }
        v20[7] = *((void *)this + 12) + v22;
        if (BYTE9(v34) | BYTE8(v34) && LODWORD(v33[0]) >= 5 && v33[1]) {
          free(v33[1]);
        }
      }
      ++v11;
      v10 += 12;
    }
    while (v14 != v10);
  }
  uint64_t result = (*((uint64_t (**)(uint64_t))this + 2))(v7 + (v27 | 2u));
  *((_DWORD *)this + 10 * v28 + 30) = result;
  return result;
}

void sub_188884AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, void *a18, uint64_t a19, unsigned __int8 a20,unsigned __int8 a21)
{
  if (a21 | a20 && a17 >= 5)
  {
    if (a18) {
      free(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TIFF_FileWriter::ParseFileStream(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  TIFF_FileWriter::DeleteExistingInfo((TIFF_FileWriter *)a1);
  *(unsigned char *)(a1 + 9std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 1;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  *(_DWORD *)(a1 + 104) = result;
  if (result >= 8)
  {
    (*(void (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, 0, 0);
    int v5 = *(_DWORD *)(a1 + 104);
    *(void *)uint64_t v20 = 0;
    (**(void (***)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))a2)(a2, v20, 8, 1);
    uint64_t result = TIFF_Manager::CheckTIFFHeader((TIFF_Manager *)a1, (unsigned int *)v20, *(_DWORD *)(a1 + 104));
    if (result)
    {
      unsigned int v6 = v5 - 6;
      unsigned int v7 = TIFF_FileWriter::ProcessFileIFD(a1, 0, result, a2);
      if (v7)
      {
        unsigned int v8 = v7;
        if (IsOffsetValid(v7, 8u, v6))
        {
          TIFF_FileWriter::ProcessFileIFD(a1, 1u, v8, a2);
        }
        else
        {
          uint64_t v17 = 206;
          unsigned __int16 v18 = "Bad IFD offset";
          uint64_t v19 = 0;
          (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 264))(a1, 0, &v17);
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 40))(a1, 0, 1);
        }
      }
      TagInIFD = TIFF_FileWriter::FindTagInIFD((TIFF_FileWriter *)a1, 0, 0x8769u);
      if (TagInIFD)
      {
        int v10 = *((unsigned __int16 *)TagInIFD + 1);
        if ((v10 == 13 || v10 == 4) && *((_DWORD *)TagInIFD + 1) == 1)
        {
          unsigned int v11 = (*(uint64_t (**)(void))(a1 + 16))(*((void *)TagInIFD + 2));
          TIFF_FileWriter::ProcessFileIFD(a1, 2u, v11, a2);
        }
      }
      unsigned int v12 = TIFF_FileWriter::FindTagInIFD((TIFF_FileWriter *)a1, 0, 0x8825u);
      if (v12)
      {
        int v13 = *((unsigned __int16 *)v12 + 1);
        if ((v13 == 13 || v13 == 4) && *((_DWORD *)v12 + 1) == 1)
        {
          unsigned int v14 = (*(uint64_t (**)(void))(a1 + 16))(*((void *)v12 + 2));
          if (IsOffsetValid(v14, 8u, v6))
          {
            TIFF_FileWriter::ProcessFileIFD(a1, 3u, v14, a2);
          }
          else
          {
            uint64_t v17 = 206;
            unsigned __int16 v18 = "Bad IFD offset";
            uint64_t v19 = 0;
            (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 264))(a1, 0, &v17);
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 40))(a1, 0, 34853);
          }
        }
      }
      uint64_t result = (uint64_t)TIFF_FileWriter::FindTagInIFD((TIFF_FileWriter *)a1, (TIFF_FileWriter *)2, 0xA005u);
      if (result)
      {
        int v15 = *(unsigned __int16 *)(result + 2);
        if ((v15 == 13 || v15 == 4) && *(_DWORD *)(result + 8) == 4)
        {
          unsigned int v16 = (*(uint64_t (**)(void))(a1 + 16))(*(void *)(result + 16));
          if (IsOffsetValid(v16, 8u, v6))
          {
            return TIFF_FileWriter::ProcessFileIFD(a1, 4u, v16, a2);
          }
          else
          {
            uint64_t v17 = 206;
            unsigned __int16 v18 = "Bad IFD offset";
            uint64_t v19 = 0;
            (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 264))(a1, 0, &v17);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, 2, 40965);
          }
        }
      }
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::ProcessFileIFD(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  std::string __p = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  std::vector<unsigned char>::vector(&__p, 0xC0000uLL);
  int v50 = 0;
  if (a3 < 8 || (unint64_t)*(unsigned int *)(a1 + 104) - 6 < a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    exception[1] = "Bad IFD offset";
    *((unsigned char *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, void, void))(*(void *)a4 + 16))(a4, a3, 0);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4);
  if (v8 - (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a4 + 16))(a4, 0, 1) < 2
    || ((**(void (***)(uint64_t, int *, uint64_t, uint64_t))a4)(a4, &v50, 2, 1),
        int v9 = (*(__int16 (**)(int *))(a1 + 8))(&v50),
        v9 < 0)
    || (uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4),
        int v11 = (unsigned __int16)v9,
        v10 - (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a4 + 16))(a4, 0, 1) < 12 * (unsigned __int16)v9))
  {
    uint64_t v12 = 0;
  }
  else
  {
    (**(void (***)(uint64_t, void *))a4)(a4, __p);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4);
    if (v14 - (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a4 + 16))(a4, 0, 1) < 4)
    {
      unsigned int v15 = 0;
    }
    else
    {
      (**(void (***)(uint64_t, int *, uint64_t, uint64_t))a4)(a4, &v50, 4, 1);
      unsigned int v15 = (*(uint64_t (**)(int *))(a1 + 16))(&v50);
    }
    unsigned int v16 = (unsigned int *)(a1 + 40 * a2);
    v16[30] = v15;
    v16 += 30;
    *(v16 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a3;
    uint64_t v45 = v16;
    uint64_t v46 = a2;
    *((_WORD *)v16 - 3) = v9;
    if (v9)
    {
      uint64_t v17 = a1 + 40 * a2;
      unsigned __int16 v18 = (uint64_t **)(v17 + 128);
      uint64_t v19 = (uint64_t *)(v17 + 136);
      unsigned int v20 = a3 + 10;
      uint64_t v21 = (char *)__p + 8;
      do
      {
        __int16 v22 = (*(uint64_t (**)(uint64_t))(a1 + 8))((uint64_t)v21 - 6);
        if ((unsigned __int16)(v22 - 14) >= 0xFFF3u)
        {
          unsigned __int16 v23 = (*(uint64_t (**)(_DWORD *))(a1 + 8))(v21 - 2);
          int v24 = (*(uint64_t (**)(_DWORD *))(a1 + 16))(v21 - 1);
          long long v49 = 0u;
          *(void *)&long long v47 = v23;
          WORD4(v47) = v23;
          WORD5(v47) = v22;
          HIDWORD(v47) = v24;
          v48[0] = 0;
          v48[1] = 0;
          *(void *)&long long v49 = 0;
          WORD4(v49) = 256;
          unsigned int v25 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>(v18, v19, (unsigned __int16 *)&v47, &v47);
          uint64_t v26 = v25;
          unsigned int v27 = *((_DWORD *)v25 + 11) * kTIFF_TypeSizes[*((unsigned __int16 *)v25 + 21)];
          *((_DWORD *)v25 + 16) = v27;
          *((_DWORD *)v25 + 12) = v27;
          *((_DWORD *)v25 + 13) = *v21;
          unsigned int v28 = (char *)v25 + 52;
          if (v27 > 4)
          {
            unsigned int v29 = (*(uint64_t (**)(_DWORD *))(a1 + 16))(v21);
            *((_DWORD *)v26 + 17) = v29;
            if (v29 < 8
              || (unsigned int v30 = *(_DWORD *)(a1 + 104), v31 = v30 >= v29, v32 = v30 - v29, v32 == 0 || !v31)
              || *((_DWORD *)v26 + 12) > v32)
            {
              v26[6] = 0;
              v26[7] = (uint64_t)v28;
              *((_DWORD *)v26 + 16) = 0;
              *((_DWORD *)v26 + 17) = v20;
              *((_DWORD *)v26 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
            }
          }
          else
          {
            v25[7] = (uint64_t)v28;
            *((_DWORD *)v25 + 17) = v20;
          }
          if (BYTE9(v49) | BYTE8(v49) && LODWORD(v48[0]) >= 5 && v48[1]) {
            free(v48[1]);
          }
        }
        v20 += 12;
        v21 += 3;
        --v11;
      }
      while (v11);
    }
    uint64_t v33 = a1 + 40 * v46;
    long long v34 = *(void **)(v33 + 128);
    uint64_t v35 = (void *)(v33 + 136);
    if (v34 != (void *)(v33 + 136))
    {
      uint64_t v36 = (uint64_t)*(&sKnownTags + v46);
      do
      {
        if (*((_DWORD *)v34 + 12) >= 5u)
        {
          unsigned int v37 = *((unsigned __int16 *)v34 + 20);
          v36 -= 2;
          do
          {
            unsigned int v38 = *(unsigned __int16 *)(v36 + 2);
            v36 += 2;
            BOOL v39 = v38 == v37;
          }
          while (v38 < v37);
          if (v39)
          {
            (*(void (**)(uint64_t, void, void))(*(void *)a4 + 16))(a4, *((unsigned int *)v34 + 17), 0);
            uint64_t v40 = malloc_type_malloc(*((unsigned int *)v34 + 12), 0x72FA368AuLL);
            v34[7] = v40;
            if (!v40)
            {
              uint64_t v44 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)uint64_t v44 = 15;
              v44[1] = "No data block";
              *((unsigned char *)v44 + 16) = 0;
            }
            (**(void (***)(uint64_t, void *, void, uint64_t))a4)(a4, v40, *((unsigned int *)v34 + 12), 1);
          }
        }
        BOOL v41 = (void *)v34[1];
        if (v41)
        {
          do
          {
            uint64_t v42 = v41;
            BOOL v41 = (void *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = (void *)v34[2];
            BOOL v39 = *v42 == (void)v34;
            long long v34 = v42;
          }
          while (!v39);
        }
        long long v34 = v42;
      }
      while (v42 != v35);
    }
    uint64_t v12 = *v45;
  }
  if (__p)
  {
    uint64_t v52 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1888854F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, void *a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (a17 | a16 && a13 >= 5 && a14) {
    free(a14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TIFF_FileWriter::IntegrateFromPShop6(TIFF_FileWriter *this, const void *a2, size_t a3)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  TIFF_MemoryReader::TIFF_MemoryReader((TIFF_MemoryReader *)v6);
  TIFF_MemoryReader::ParseMemoryStream((void **)v6, a2, a3, 1, 0);
  TIFF_FileWriter::ProcessPShop6IFD(this, (const TIFF_MemoryReader *)v6, 0);
  TIFF_FileWriter::ProcessPShop6IFD(this, (const TIFF_MemoryReader *)v6, (TIFF_FileWriter *)2);
  TIFF_FileWriter::ProcessPShop6IFD(this, (const TIFF_MemoryReader *)v6, (TIFF_FileWriter *)3);
  *(void *)&v6[0] = &unk_1ED4E4300;
  if (BYTE8(v7)) {
    free(v8[0]);
  }
}

void sub_188885630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
  if (a20) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void TIFF_FileWriter::ProcessPShop6IFD(TIFF_FileWriter *this, const TIFF_MemoryReader *a2, TIFF_FileWriter *a3)
{
  v30[0] = 0;
  v30[1] = 0;
  unsigned int v29 = v30;
  if ((*(uint64_t (**)(const TIFF_MemoryReader *, TIFF_FileWriter *, void ***))(*(void *)a2 + 16))(a2, a3, &v29))
  {
    unsigned int v6 = v29;
    if (v29 != v30)
    {
      int v7 = *((unsigned __int8 *)this + 72);
      int v8 = *((unsigned __int8 *)a2 + 72);
      do
      {
        long long v9 = (unsigned __int16 *)(v6 + 5);
        if (!TIFF_FileWriter::FindTagInIFD(this, a3, *((unsigned __int16 *)v6 + 20)))
        {
          int v10 = *v9;
          if (v7 == v8 || v10 != 37500)
          {
            if (*v9 > 0x8824u)
            {
              BOOL v11 = v10 == 34853;
              int v12 = 40965;
            }
            else
            {
              BOOL v11 = v10 == 513;
              int v12 = 34665;
            }
            if (!v11 && v10 != v12)
            {
              unsigned int v16 = (unsigned __int16 *)TIFF_FileWriter::CopyTagToMainIFD((uint64_t)this, (uint64_t)(v6 + 5), (uint64_t)this + 40 * a3 + 112);
              if (v7 != v8)
              {
                switch(*((_WORD *)v6 + 21))
                {
                  case 1:
                  case 2:
                  case 6:
                    break;
                  case 3:
                  case 8:
                    uint64_t v18 = *((unsigned int *)v6 + 11);
                    if (v18)
                    {
                      do
                      {
                        *unsigned int v16 = bswap32(*v16) >> 16;
                        ++v16;
                        --v18;
                      }
                      while (v18);
                    }
                    break;
                  case 4:
                  case 9:
                  case 0xB:
                    uint64_t v17 = *((unsigned int *)v6 + 11);
                    if (v17)
                    {
                      do
                      {
                        *(_DWORD *)unsigned int v16 = bswap32(*(_DWORD *)v16);
                        v16 += 2;
                        --v17;
                      }
                      while (v17);
                    }
                    break;
                  case 5:
                  case 0xA:
                    uint64_t v19 = (2 * *((_DWORD *)v6 + 11));
                    if (v19)
                    {
                      do
                      {
                        *(_DWORD *)unsigned int v16 = bswap32(*(_DWORD *)v16);
                        v16 += 2;
                        --v19;
                      }
                      while (v19);
                    }
                    break;
                  case 7:
                    unsigned int v20 = *v9;
                    if (v20 > 0xA301)
                    {
                      if (v20 == 41995)
                      {
                        unint64_t v23 = *((unsigned int *)v6 + 14);
                        if (v23 < 4) {
                          goto LABEL_50;
                        }
                        unint64_t v24 = v23 >> 1;
                        do
                        {
                          *unsigned int v16 = bswap32(*v16) >> 16;
                          ++v16;
                          --v24;
                        }
                        while (v24);
                      }
                      else if (v20 == 41730)
                      {
                        unsigned int v28 = *((_DWORD *)v6 + 14);
                        if (v28 < 4) {
                          goto LABEL_50;
                        }
                        __int16 v22 = (uint64_t (*)(void))*((void *)this + 1);
                        *unsigned int v16 = bswap32(*v16) >> 16;
                        uint64_t v26 = v16 + 1;
                        unsigned int v27 = v22;
                        v16[1] = bswap32(v16[1]) >> 16;
                        int v25 = v22();
                        if (((unsigned int (*)(unsigned __int16 *))v27)(v26) * v25 + 4 != v28) {
                          goto LABEL_50;
                        }
                      }
                    }
                    else if ((v20 == 34856 || v20 == 41484) {
                           && !FlipOECFSFRTable(v16, *((_DWORD *)v6 + 14), *((uint64_t (**)(void))this + 1)))
                    }
                    {
                      goto LABEL_50;
                    }
                    break;
                  case 0xC:
                    uint64_t v21 = *((unsigned int *)v6 + 11);
                    if (v21)
                    {
                      do
                      {
                        *(void *)unsigned int v16 = bswap64(*(void *)v16);
                        v16 += 4;
                        --v21;
                      }
                      while (v21);
                    }
                    break;
                  default:
LABEL_50:
                    (*(void (**)(TIFF_FileWriter *, TIFF_FileWriter *, void))(*(void *)this + 40))(this, a3, *v9);
                    break;
                }
              }
            }
          }
        }
        uint64_t v14 = v6[1];
        if (v14)
        {
          do
          {
            unsigned int v15 = (void **)v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            unsigned int v15 = (void **)v6[2];
            BOOL v11 = *v15 == v6;
            unsigned int v6 = v15;
          }
          while (!v11);
        }
        unsigned int v6 = v15;
      }
      while (v15 != v30);
    }
  }
  std::__tree<unsigned long long>::destroy((uint64_t)&v29, v30[0]);
}

void sub_1888859AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t TIFF_FileWriter::CopyTagToMainIFD(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v14 = 0u;
  *(_OWORD *)unsigned int v15 = 0u;
  long long v16 = 0u;
  __int16 v5 = *(_WORD *)(a2 + 2);
  int v6 = *(_DWORD *)(a2 + 4);
  char v7 = *(unsigned char *)(a1 + 91);
  LOWORD(v14) = *(_WORD *)a2;
  WORD4(v14) = v14;
  WORD5(v14) = v5;
  HIDWORD(v14) = v6;
  v15[0] = 0;
  v15[1] = 0;
  *(void *)&long long v16 = 0;
  BYTE8(v16) = 0;
  BYTE9(v16) = v7;
  int v8 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>((uint64_t **)(a3 + 16), (uint64_t *)(a3 + 24), (unsigned __int16 *)&v14, &v14);
  size_t v9 = *(unsigned int *)(a2 + 16);
  *((_DWORD *)v8 + 12) = v9;
  if (v9 > 4)
  {
    int v10 = malloc_type_malloc(v9, 0xDC5B30FEuLL);
    v8[7] = (uint64_t)v10;
    if (!v10)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 15;
      exception[1] = "Out of memory";
      *((unsigned char *)exception + 16) = 0;
    }
    memcpy(v10, *(const void **)(a2 + 8), *((unsigned int *)v8 + 12));
  }
  else
  {
    *((_DWORD *)v8 + 13) = **(_DWORD **)(a2 + 8);
    v8[7] = (uint64_t)v8 + 52;
  }
  *((unsigned char *)v8 + 72) = 1;
  if (*((_DWORD *)v8 + 16) || *((_DWORD *)v8 + 17)) {
    __assert_rtn("CopyTagToMainIFD", "TIFF_FileWriter.cpp", 998, "(newTag.origDataLen == 0) && (newTag.origDataOffset == 0)");
  }
  *(unsigned char *)a3 = 1;
  uint64_t v11 = v8[7];
  if (BYTE9(v16) | BYTE8(v16) && LODWORD(v15[0]) >= 5 && v15[1]) {
    free(v15[1]);
  }
  return v11;
}

void sub_188885B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int a11, void *a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15)
{
  if (a15 | a14 && a11 >= 5)
  {
    if (a12) {
      free(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL FlipOECFSFRTable(_WORD *a1, unsigned int a2, uint64_t (*a3)(void))
{
  *a1 = bswap32((unsigned __int16)*a1) >> 16;
  int v6 = (char *)(a1 + 1);
  a1[1] = bswap32((unsigned __int16)a1[1]) >> 16;
  int v7 = a3();
  int v8 = ((uint64_t (*)(char *))a3)(v6);
  unsigned int v9 = v7 + 8 * v7 * v8 + 4;
  uint64_t v10 = (2 * v7 * v8);
  if (v9 <= a2 && v10 != 0)
  {
    int v12 = (unsigned int *)((char *)a1 + a2 - 8 * v7 * v8);
    do
    {
      *int v12 = bswap32(*v12);
      ++v12;
      --v10;
    }
    while (v10);
  }
  return v9 <= a2;
}

uint64_t TIFF_FileWriter::PreflightIFDLinkage(void (**this)(uint64_t, int *))
{
  uint64_t v2 = *this;
  if (this[38])
  {
    if (((*((uint64_t (**)(void (**)(uint64_t, int *), uint64_t, uint64_t, void))v2 + 3))(this, 2, 40965, 0) & 1) == 0)TIFF_Manager::SetTag_Long(this, 2, 40965, 2880285613); {
  }
    }
  else
  {
    (*((void (**)(void (**)(uint64_t, int *), uint64_t, uint64_t))v2 + 5))(this, 2, 40965);
  }
  unint64_t v3 = *this;
  if (this[33])
  {
    if (((*((uint64_t (**)(void (**)(uint64_t, int *), void, uint64_t, void))v3 + 3))(this, 0, 34853, 0) & 1) == 0)TIFF_Manager::SetTag_Long(this, 0, 34853, 2880285613); {
  }
    }
  else
  {
    (*((void (**)(void (**)(uint64_t, int *), void, uint64_t))v3 + 5))(this, 0, 34853);
  }
  unsigned int v4 = *this;
  if (this[28])
  {
    uint64_t result = (*((uint64_t (**)(void (**)(uint64_t, int *), void, uint64_t, void))v4 + 3))(this, 0, 34665, 0);
    if ((result & 1) == 0) {
      uint64_t result = TIFF_Manager::SetTag_Long(this, 0, 34665, 2880285613);
    }
  }
  else
  {
    uint64_t result = (*((uint64_t (**)(void (**)(uint64_t, int *), void, uint64_t))v4 + 5))(this, 0, 34665);
  }
  if (!this[18] && this[23])
  {
    return TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))this, 0, 296, 2);
  }
  return result;
}

uint64_t TIFF_FileWriter::DetermineVisibleLength(TIFF_FileWriter *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 8;
  do
  {
    unint64_t v3 = (char *)this + 40 * v1;
    uint64_t v4 = *((void *)v3 + 18);
    if (v4)
    {
      __int16 v5 = v3 + 128;
      uint64_t v2 = (v2 + 12 * v4 + 6);
      int v8 = (void *)*v5;
      int v6 = v5 + 1;
      int v7 = v8;
      if (v8 != v6)
      {
        do
        {
          unsigned int v9 = *((_DWORD *)v7 + 12);
          if (v9 <= 4) {
            unsigned int v10 = 0;
          }
          else {
            unsigned int v10 = (v9 + 1) & 0xFFFFFFFE;
          }
          uint64_t v11 = (void *)v7[1];
          if (v11)
          {
            do
            {
              int v12 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              int v12 = (void *)v7[2];
              BOOL v13 = *v12 == (void)v7;
              int v7 = v12;
            }
            while (!v13);
          }
          uint64_t v2 = v10 + v2;
          int v7 = v12;
        }
        while (v12 != v6);
      }
    }
    ++v1;
  }
  while (v1 != 5);
  return v2;
}

uint64_t TIFF_FileWriter::DetermineAppendInfo(TIFF_FileWriter *this, int a2, BOOL *a3, unsigned int *a4, int a5)
{
  if (a2) {
    TIFF_FileWriter::DetermineAppendInfo();
  }
  if (a5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (uint64_t *)((char *)this + 144);
    do
    {
      uint64_t v12 = *v11;
      v11 += 5;
      a3[v10++] = v12 != 0;
    }
    while (v10 != 5);
    BOOL v13 = a3[4];
  }
  else
  {
    BOOL v13 = 0;
    *(_DWORD *)a3 = 0;
  }
  int v14 = v13 || *((void *)this + 38) > (unint64_t)*((unsigned __int16 *)this + 137);
  a3[4] = v14;
  if (v14) {
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 2, 40965, 2880285613);
  }
  BOOL v15 = a3[3] || *((void *)this + 33) > (unint64_t)*((unsigned __int16 *)this + 117);
  a3[3] = v15;
  if (v15) {
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 0, 34853, 2880285613);
  }
  BOOL v16 = a3[2] || *((void *)this + 28) > (unint64_t)*((unsigned __int16 *)this + 97);
  a3[2] = v16;
  if (v16) {
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 0, 34665, 2880285613);
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *a3 |= *((void *)this + 18) > (unint64_t)*((unsigned __int16 *)this + 57);
  do
  {
    uint64_t v19 = (char *)this + 40 * v17;
    uint64_t v20 = *((void *)v19 + 18);
    a4[v17] = *((_DWORD *)v19 + 29);
    if (v19[112] | a5) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      if (a3[v17])
      {
        a4[v17] = v18 + a2;
        uint64_t v18 = (v18 + 12 * v20 + 6);
      }
      unint64_t v23 = v19 + 136;
      __int16 v22 = (char *)*((void *)v19 + 16);
      if (v22 != v19 + 136)
      {
        do
        {
          if (v22[72] | a5)
          {
            unsigned int v24 = *((_DWORD *)v22 + 12);
            if (v24 >= 5)
            {
              int v25 = (void (*)(void, char *))*((void *)this + 6);
              if (v24 > *((_DWORD *)v22 + 16) || (a5 & 1) != 0)
              {
                v25((v18 + a2), v22 + 52);
                uint64_t v18 = ((*((_DWORD *)v22 + 12) + 1) & 0xFFFFFFFE) + v18;
              }
              else
              {
                v25(*((unsigned int *)v22 + 17), v22 + 52);
              }
            }
          }
          uint64_t v26 = (char *)*((void *)v22 + 1);
          if (v26)
          {
            do
            {
              unsigned int v27 = v26;
              uint64_t v26 = *(char **)v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              unsigned int v27 = (char *)*((void *)v22 + 2);
              BOOL v21 = *(void *)v27 == (void)v22;
              __int16 v22 = v27;
            }
            while (!v21);
          }
          __int16 v22 = v27;
        }
        while (v27 != v23);
      }
    }
    ++v17;
  }
  while (v17 != 5);
  if (a3[2]) {
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 0, 34665, a4[2]);
  }
  if (a3[3]) {
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 0, 34853, a4[3]);
  }
  if (a3[4]) {
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 2, 40965, a4[4]);
  }
  return v18;
}

void *TIFF_FileWriter::UpdateMemByAppend(TIFF_FileWriter *this, unsigned __int8 **a2, unsigned int *a3, int a4, int a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  char v40 = 0;
  *(_DWORD *)BOOL v39 = 0;
  *(void *)BOOL v41 = 0;
  uint64_t v42 = 0;
  int v43 = 0;
  unsigned int v9 = (*((_DWORD *)this + 26) + 1) & 0xFFFFFFFE;
  unsigned int v38 = v9 + TIFF_FileWriter::DetermineAppendInfo(this, v9, v39, v41, a4);
  uint64_t v10 = (unsigned __int8 *)malloc_type_malloc(v38 + a5, 0x9C15DCB8uLL);
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    exception[1] = "Out of memory";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v11 = v10;
  uint64_t result = memcpy(v10, *((const void **)this + 12), *((unsigned int *)this + 26));
  uint64_t v13 = *((unsigned int *)this + 26);
  if (v13 < v9)
  {
    if (v9 != v13 + 1) {
      TIFF_FileWriter::UpdateMemByAppend();
    }
    v11[v13] = 0;
  }
  uint64_t v36 = a3;
  for (uint64_t i = 0; i != 5; ++i)
  {
    BOOL v15 = (char *)this + 40 * i;
    uint64_t v16 = *((void *)v15 + 18);
    if (v15[112] | a4) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17)
    {
      uint64_t v18 = v41[i];
      if (v39[i])
      {
        if (v18 != v9) {
          __assert_rtn("UpdateMemByAppend", "TIFF_FileWriter.cpp", 1485, "newIFDOffsets[ifd] == appendedOffset");
        }
        v9 += 12 * v16 + 6;
      }
      uint64_t v19 = v11;
      uint64_t v20 = &v11[v18];
      (*((void (**)(void, unsigned __int8 *))this + 5))((unsigned __int16)*((void *)v15 + 18), &v11[v18]);
      BOOL v21 = v20 + 2;
      unint64_t v23 = v15 + 136;
      __int16 v22 = (char *)*((void *)v15 + 16);
      if (v22 != v23)
      {
        do
        {
          (*((void (**)(void, unsigned __int8 *))this + 5))(*((unsigned __int16 *)v22 + 20), v21);
          (*((void (**)(void, unsigned __int8 *))this + 5))(*((unsigned __int16 *)v22 + 21), v21 + 2);
          (*((void (**)(void, unsigned __int8 *))this + 6))(*((unsigned int *)v22 + 11), v21 + 4);
          *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 13);
          if (v22[72] | a4 && *((_DWORD *)v22 + 12) >= 5u)
          {
            unsigned int v24 = (*((uint64_t (**)(void))this + 2))();
            unsigned int v25 = v24;
            size_t v26 = *((unsigned int *)v22 + 12);
            if (v26 > *((_DWORD *)v22 + 16)) {
              int v27 = 1;
            }
            else {
              int v27 = a4;
            }
            if (v27)
            {
              if (v24 != v9)
              {
                int v32 = 1516;
                uint64_t v33 = "valueOffset == appendedOffset";
LABEL_46:
                __assert_rtn("UpdateMemByAppend", "TIFF_FileWriter.cpp", v32, v33);
              }
              v9 += (v26 + 1) & 0xFFFFFFFE;
            }
            else if (v24 != *((_DWORD *)v22 + 17))
            {
              int v32 = 1514;
              uint64_t v33 = "valueOffset == currTag.origDataOffset";
              goto LABEL_46;
            }
            if (v38 < v24)
            {
              int v32 = 1520;
              uint64_t v33 = "valueOffset <= newLength";
              goto LABEL_46;
            }
            if (v26 > v38 - v24)
            {
              long long v34 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)long long v34 = 9;
              v34[1] = "Buffer overrun";
              *((unsigned char *)v34 + 16) = 0;
            }
            memcpy(&v19[v24], *((const void **)v22 + 7), v26);
            if (v27)
            {
              int v28 = *((_DWORD *)v22 + 12);
              if (v28) {
                v19[v28 + v25] = 0;
              }
            }
          }
          unsigned int v29 = (char *)*((void *)v22 + 1);
          if (v29)
          {
            do
            {
              unsigned int v30 = v29;
              unsigned int v29 = *(char **)v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              unsigned int v30 = (char *)*((void *)v22 + 2);
              BOOL v17 = *(void *)v30 == (void)v22;
              __int16 v22 = v30;
            }
            while (!v17);
          }
          v21 += 12;
          __int16 v22 = v30;
        }
        while (v30 != v23);
      }
      uint64_t v11 = v19;
      uint64_t result = (void *)(*((uint64_t (**)(void, unsigned __int8 *))this + 6))(*((unsigned int *)this + 10 * i + 30), v21);
    }
  }
  if (v9 != v38) {
    __assert_rtn("UpdateMemByAppend", "TIFF_FileWriter.cpp", 1539, "appendedOffset == newLength");
  }
  if (v39[0]) {
    uint64_t result = (void *)(*((uint64_t (**)(void, unsigned __int8 *))this + 6))(v41[0], v11 + 4);
  }
  if (v39[1])
  {
    int v31 = *((_DWORD *)this + 36);
    if (v31) {
      uint64_t result = (void *)(*((uint64_t (**)(void, unsigned __int8 *))this + 6))(v41[1], &v11[12 * v31 + 2 + v41[0]]);
    }
  }
  *a2 = v11;
  unsigned int *v36 = v38;
  return result;
}

void sub_1888865A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    free(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1888865F8(_Unwind_Exception *a1)
{
}

void sub_188886604(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18888660CLL);
  }
  __clang_call_terminate(a1);
}

void *TIFF_FileWriter::UpdateMemByRewrite(TIFF_FileWriter *this, unsigned __int8 **a2, unsigned int *a3)
{
  unsigned __int8 v6 = 0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  do
  {
    for (uint64_t i = 0; i != 10; ++i)
    {
      if (TIFF_FileWriter::FindTagInIFD(this, (TIFF_FileWriter *)v6, (unsigned __int16)kNoGoTags[i]))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 8;
        exception[1] = "Tag not tolerated for TIFF rewrite";
        *((unsigned char *)exception + 16) = 0;
      }
    }
    unsigned int v8 = v6++;
  }
  while (v8 < 4);
  int v9 = 0;
  do
  {
    unsigned int v10 = v9;
    (*(void (**)(TIFF_FileWriter *, void, uint64_t))(*(void *)this + 40))(this, v9++, 37500);
  }
  while (v10 < 4);
  uint64_t v11 = TIFF_FileWriter::DetermineVisibleLength(this);
  int v26 = 0;
  size_t __n = 0;
  int v12 = (*(uint64_t (**)(TIFF_FileWriter *, uint64_t, uint64_t, size_t *))(*(void *)this + 56))(this, 1, 514, &__n);
  if (v12 != (*(unsigned int (**)(TIFF_FileWriter *, uint64_t, uint64_t, char *))(*(void *)this + 56))(this, 1, 513, (char *)&__n + 4))
  {
    __int16 v22 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)__int16 v22 = 206;
    v22[1] = "Unpaired simple hidden content tag";
    *((unsigned char *)v22 + 16) = 0;
  }
  if (__n) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  if (v13 == 1)
  {
    int v26 = v11;
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 1, 513, v11);
    int v14 = (__n + 1) & 0xFFFFFFFE;
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v15 = *((void *)this + 12);
  int v16 = *((unsigned __int8 *)this + 92);
  if (*((unsigned char *)this + 72)) {
    char v17 = 77;
  }
  else {
    char v17 = 73;
  }
  if (*((unsigned char *)this + 72)) {
    char v18 = 0;
  }
  else {
    char v18 = 42;
  }
  if (*((unsigned char *)this + 72)) {
    char v19 = 42;
  }
  else {
    char v19 = 0;
  }
  v23[0] = v17;
  v23[1] = v17;
  v23[2] = v18;
  v23[3] = v19;
  int v24 = 0;
  *((void *)this + 12) = v23;
  *((_DWORD *)this + 26) = 8;
  *((unsigned char *)this + 92) = 0;
  uint64_t result = TIFF_FileWriter::UpdateMemByAppend(this, a2, a3, 1, v14);
  if (*a3 != v11) {
    TIFF_FileWriter::UpdateMemByRewrite();
  }
  *a3 = v11 + v14;
  if (__n) {
    uint64_t result = memcpy(&(*a2)[v26], (const void *)(v15 + HIDWORD(__n)), __n);
  }
  if (v16)
  {
    if (v15) {
      return (void *)MEMORY[0x18C11C0E0](v15, 0x1000C4077774924);
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::UpdateMemoryStream(TIFF_FileWriter *this, void **a2, int a3)
{
  if (*((unsigned char *)this + 91))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "Not memory based";
    *((unsigned char *)exception + 16) = 0;
  }
  char v6 = *((unsigned char *)this + 88) | a3;
  *((unsigned char *)this + 88) = v6;
  if (v6)
  {
    TIFF_FileWriter::PreflightIFDLinkage((void (**)(uint64_t, int *))this);
    uint64_t v7 = 144;
    while (!*(void *)((char *)this + v7))
    {
      v7 += 40;
      if (v7 == 344)
      {
        int v13 = 0;
        unsigned int v12 = 0;
        TIFF_FileWriter::DeleteExistingInfo(this);
        goto LABEL_16;
      }
    }
    int v13 = 0;
    unsigned int v12 = 0;
    if (*((_DWORD *)this + 26)) {
      BOOL v9 = a3 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      TIFF_FileWriter::UpdateMemByAppend(this, &v13, &v12, 0, 0);
    }
    else {
      TIFF_FileWriter::UpdateMemByRewrite(this, &v13, &v12);
    }
LABEL_16:
    uint64_t v8 = v12;
    (*(void (**)(TIFF_FileWriter *, unsigned __int8 *, void, void, void))(*(void *)this + 200))(this, v13, v12, 0, 0);
    if (*((_DWORD *)this + 26) != v8) {
      TIFF_FileWriter::UpdateMemoryStream();
    }
    *((unsigned char *)this + 92) = v8 != 0;
    if (a2) {
      *a2 = (void *)*((void *)this + 12);
    }
  }
  else
  {
    if (a2) {
      *a2 = (void *)*((void *)this + 12);
    }
    return *((unsigned int *)this + 26);
  }
  return v8;
}

uint64_t TIFF_FileWriter::UpdateFileStream(uint64_t result, uint64_t a2, XMP_ProgressTracker *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(result + 90))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    uint64_t v51 = "Not file based";
LABEL_84:
    exception[1] = v51;
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v3 = result;
  if (!*(unsigned char *)(result + 88)) {
    return result;
  }
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (HIDWORD(v6)) {
    goto LABEL_82;
  }
  unsigned int v7 = v6;
  char v54 = 0;
  *(_DWORD *)uint64_t v53 = 0;
  *(void *)int v55 = 0;
  uint64_t v56 = 0;
  int v57 = 0;
  if (v6)
  {
    unsigned int v7 = v6 + 1;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 2);
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, &unk_1889B0066, 1);
  }
  TIFF_FileWriter::PreflightIFDLinkage((void (**)(uint64_t, int *))v3);
  if ((v7 ^ 0xFFFFFFFFuLL) < TIFF_FileWriter::DetermineAppendInfo((TIFF_FileWriter *)v3, v7, v53, v55, 0))
  {
LABEL_82:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    uint64_t v51 = "TIFF files can't exceed 4GB";
    goto LABEL_84;
  }
  if (a3)
  {
    uint64_t v9 = 0;
    float v10 = 0.0;
    do
    {
      if (*(unsigned char *)(v3 + 40 * v9 + 112))
      {
        uint64_t v11 = v3 + 40 * v9;
        float v10 = v10 + (float)(unint64_t)(12 * *(void *)(v11 + 144) + 6);
        unsigned int v12 = (void *)(v11 + 136);
        int v13 = *(void **)(v11 + 128);
        if (v13 != v12)
        {
          do
          {
            if (*((unsigned char *)v13 + 72))
            {
              unsigned int v14 = *((_DWORD *)v13 + 12);
              if (v14 >= 5) {
                float v10 = v10 + (float)v14;
              }
            }
            uint64_t v15 = (void *)v13[1];
            if (v15)
            {
              do
              {
                int v16 = v15;
                uint64_t v15 = (void *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                int v16 = (void *)v13[2];
                BOOL v17 = *v16 == (void)v13;
                int v13 = v16;
              }
              while (!v17);
            }
            int v13 = v16;
          }
          while (v16 != v12);
        }
      }
      ++v9;
    }
    while (v9 != 5);
    if (!*((unsigned char *)a3 + 32)) {
      TIFF_FileWriter::UpdateFileStream();
    }
    if (v53[0]) {
      float v10 = v10 + 4.0;
    }
    v8.n128_f32[0] = XMP_ProgressTracker::AddTotalWork(a3, v10);
  }
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v19 = v3 + 40 * i;
    int v21 = *(unsigned __int8 *)(v19 + 112);
    uint64_t v20 = v19 + 112;
    if (v21)
    {
      if (!v53[i])
      {
        (*(void (**)(uint64_t, void, void, __n128))(*(void *)a2 + 16))(a2, *(unsigned int *)(v3 + 40 * i + 116), 0, v8);
        TIFF_FileWriter::WriteFileIFD(v3, a2, v20);
      }
      uint64_t v22 = v3 + 40 * i;
      unint64_t v23 = (void *)(v22 + 136);
      int v24 = *(void **)(v22 + 128);
      if (v24 != (void *)(v22 + 136))
      {
        do
        {
          if (*((unsigned char *)v24 + 72))
          {
            unsigned int v25 = *((_DWORD *)v24 + 12);
            if (v25 >= 5 && v25 <= *((_DWORD *)v24 + 16))
            {
              (*(void (**)(uint64_t, void, void, __n128))(*(void *)a2 + 16))(a2, *((unsigned int *)v24 + 17), 0, v8);
              (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, v24[7], *((unsigned int *)v24 + 12));
            }
          }
          int v26 = (void *)v24[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              int v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (void *)v24[2];
              BOOL v17 = *v27 == (void)v24;
              int v24 = v27;
            }
            while (!v17);
          }
          int v24 = v27;
        }
        while (v27 != v23);
      }
    }
  }
  if ((*(uint64_t (**)(uint64_t, void, uint64_t, __n128))(*(void *)a2 + 16))(a2, 0, 2, v8) != v7) {
    TIFF_FileWriter::UpdateFileStream();
  }
  for (uint64_t j = 0; j != 5; ++j)
  {
    uint64_t v29 = v3 + 40 * j;
    int v31 = *(unsigned __int8 *)(v29 + 112);
    uint64_t v30 = v29 + 112;
    if (v31)
    {
      if (v53[j])
      {
        uint64_t v32 = v55[j];
        if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) != v32) {
          TIFF_FileWriter::UpdateFileStream();
        }
        TIFF_FileWriter::WriteFileIFD(v3, a2, v30);
      }
      uint64_t v33 = v3 + 40 * j;
      long long v34 = (void *)(v33 + 136);
      uint64_t v35 = *(void **)(v33 + 128);
      if (v35 != (void *)(v33 + 136))
      {
        do
        {
          if (*((unsigned char *)v35 + 72))
          {
            unsigned int v36 = *((_DWORD *)v35 + 12);
            if (v36 >= 5 && v36 > *((_DWORD *)v35 + 16))
            {
              int v37 = (*(uint64_t (**)(uint64_t))(v3 + 16))((uint64_t)v35 + 52);
              if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) != v37) {
                TIFF_FileWriter::UpdateFileStream();
              }
              (*(void (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, v35[7], *((unsigned int *)v35 + 12));
              if (v35[6]) {
                (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, &unk_1889B0066, 1);
              }
            }
          }
          unsigned int v38 = (void *)v35[1];
          if (v38)
          {
            do
            {
              BOOL v39 = v38;
              unsigned int v38 = (void *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              BOOL v39 = (void *)v35[2];
              BOOL v17 = *v39 == (void)v35;
              uint64_t v35 = v39;
            }
            while (!v17);
          }
          uint64_t v35 = v39;
        }
        while (v39 != v34);
      }
    }
  }
  int v52 = 0;
  if (v53[0])
  {
    (*(void (**)(void, int *))(v3 + 48))(v55[0], &v52);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, 4, 0);
    (*(void (**)(uint64_t, int *, uint64_t))(*(void *)a2 + 8))(a2, &v52, 4);
  }
  for (uint64_t k = 0; k != 5; ++k)
  {
    uint64_t v41 = v3 + 40 * k;
    int v43 = *(unsigned __int8 *)(v41 + 112);
    uint64_t v42 = (unsigned char *)(v41 + 112);
    if (v43)
    {
      *uint64_t v42 = 0;
      uint64_t v44 = v3 + 40 * k;
      *(_WORD *)(v44 + 114) = *(void *)(v44 + 144);
      *(_DWORD *)(v44 + 116) = v55[k];
      uint64_t v45 = (void *)(v44 + 136);
      uint64_t v46 = *(void **)(v44 + 128);
      if (v46 != (void *)(v44 + 136))
      {
        do
        {
          if (*((unsigned char *)v46 + 72))
          {
            *((unsigned char *)v46 + 72) = 0;
            unsigned int v47 = *((_DWORD *)v46 + 12);
            *((_DWORD *)v46 + 16) = v47;
            if (v47 >= 5) {
              *((_DWORD *)v46 + 17) = (*(uint64_t (**)(uint64_t))(v3 + 16))((uint64_t)v46 + 52);
            }
          }
          BOOL v48 = (void *)v46[1];
          if (v48)
          {
            do
            {
              long long v49 = v48;
              BOOL v48 = (void *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              long long v49 = (void *)v46[2];
              BOOL v17 = *v49 == (void)v46;
              uint64_t v46 = v49;
            }
            while (!v17);
          }
          uint64_t v46 = v49;
        }
        while (v49 != v45);
      }
    }
  }
  *(_DWORD *)(v3 + 104) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 2);
}

uint64_t TIFF_FileWriter::WriteFileIFD(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v13 = 0;
  (*(void (**)(void, __int16 *))(a1 + 40))(*(unsigned __int16 *)(a3 + 32), &v13);
  (*(void (**)(uint64_t, __int16 *, uint64_t))(*(void *)a2 + 8))(a2, &v13, 2);
  unint64_t v6 = *(void **)(a3 + 16);
  if (v6 != (void *)(a3 + 24))
  {
    do
    {
      int v12 = 0;
      uint64_t v11 = 0;
      (*(void (**)(void, uint64_t *))(a1 + 40))(*((unsigned __int16 *)v6 + 20), &v11);
      (*(void (**)(void, char *))(a1 + 40))(*((unsigned __int16 *)v6 + 21), (char *)&v11 + 2);
      (*(void (**)(void, char *))(a1 + 48))(*((unsigned int *)v6 + 11), (char *)&v11 + 4);
      int v12 = *((_DWORD *)v6 + 13);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v11, 12);
      unsigned int v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          __n128 v8 = v7;
          unsigned int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          __n128 v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          unint64_t v6 = v8;
        }
        while (!v9);
      }
      unint64_t v6 = v8;
    }
    while (v8 != (void *)(a3 + 24));
  }
  LODWORD(v1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  (*(void (**)(void, uint64_t *))(a1 + 48))(*(unsigned int *)(a3 + 8), &v11);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 8))(a2, &v11, 4);
}

BOOL TIFF_FileWriter::HasExifIFD(TIFF_FileWriter *this)
{
  return *((void *)this + 28) != 0;
}

BOOL TIFF_FileWriter::HasGPSInfoIFD(TIFF_FileWriter *this)
{
  return *((void *)this + 33) != 0;
}

uint64_t TIFF_FileWriter::GetTiffLength(TIFF_FileWriter *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t TIFF_FileWriter::GetTiffStream(TIFF_FileWriter *this)
{
  return *((void *)this + 12);
}

uint64_t TIFF_FileWriter::IsChanged(TIFF_FileWriter *this)
{
  return *((unsigned __int8 *)this + 88);
}

void std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy(a1, a2[1]);
    TIFF_FileWriter::InternalTagInfo::~InternalTagInfo((TIFF_FileWriter::InternalTagInfo *)(a2 + 5));
    operator delete(a2);
  }
}

void TIFF_FileWriter::InternalTagInfo::~InternalTagInfo(TIFF_FileWriter::InternalTagInfo *this)
{
  if ((*((unsigned char *)this + 33) || *((unsigned char *)this + 32)) && *((_DWORD *)this + 2) >= 5u)
  {
    uint64_t v2 = (void *)*((void *)this + 2);
    if (v2)
    {
      free(v2);
      *((void *)this + 2) = 0;
    }
  }
}

void TIFF_MemoryReader::TIFF_MemoryReader(TIFF_MemoryReader *this)
{
  TIFF_Manager::TIFF_Manager(this);
  *(void *)uint64_t v1 = &unk_1ED4E4300;
  *(unsigned char *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  uint64_t v2 = 112;
  do
  {
    uint64_t v3 = v1 + v2;
    *(_WORD *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    v2 += 16;
  }
  while (v3 + 16 != v1 + 192);
  *(unsigned char *)(v1 + 74) = 1;
}

uint64_t *std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  unint64_t v6 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__find_equal<unsigned short>(a1, a2, &v14, &v13, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    __n128 v8 = (uint64_t **)v6;
    uint64_t v12 = 0;
    unsigned int v7 = (uint64_t *)operator new(0x50uLL);
    v11[1] = (uint64_t)(a1 + 1);
    long long v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    *((_OWORD *)v7 + 4) = a4[2];
    LOBYTE(v12) = 1;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v14, v8, v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__find_equal<unsigned short>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  __int16 v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    __n128 v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      float v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        float v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        float v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          __int16 v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        __int16 v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          __int16 v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        __int16 v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      TIFF_FileWriter::InternalTagInfo::~InternalTagInfo((TIFF_FileWriter::InternalTagInfo *)(v2 + 40));
    }
    operator delete((void *)v2);
  }
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    __int16 v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1888877A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void TIFF_FileWriter::DeleteExistingInfo()
{
}

void TIFF_FileWriter::ParseMemoryStream()
{
}

void TIFF_FileWriter::DetermineAppendInfo()
{
  __assert_rtn("DetermineAppendInfo", "TIFF_FileWriter.cpp", 1288, "(appendedOrigin & 1) == 0");
}

void TIFF_FileWriter::UpdateMemByAppend()
{
  __assert_rtn("UpdateMemByAppend", "TIFF_FileWriter.cpp", 1463, "appendedOrigin == (this->tiffLength + 1)");
}

void TIFF_FileWriter::UpdateMemByRewrite()
{
  __assert_rtn("UpdateMemByRewrite", "TIFF_FileWriter.cpp", 1732, "*newLength_out == hiddenContentOrigin");
}

void TIFF_FileWriter::UpdateMemoryStream()
{
  __assert_rtn("UpdateMemoryStream", "TIFF_FileWriter.cpp", 1809, "this->tiffLength == newLength");
}

void TIFF_FileWriter::UpdateFileStream()
{
  __assert_rtn("UpdateFileStream", "TIFF_FileWriter.cpp", 1962, "this->GetUns32(&thisTag.smallValue) == fileRef->Length()");
}

{
  __assert_rtn("UpdateFileStream", "TIFF_FileWriter.cpp", 1948, "newIFDOffsets[ifd] == fileRef->Length()");
}

{
  __assert_rtn("UpdateFileStream", "TIFF_FileWriter.cpp", 1937, "fileEnd == appendedOrigin");
}

{
  __assert_rtn("UpdateFileStream", "TIFF_FileWriter.cpp", 1892, "progressTracker->WorkInProgress()");
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::RegisterParser(int a1, AdobeXMPCore_Int::IUTF8String_I *this)
{
}

void sub_188887A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AdobeXMPCore_Int::StructureNodeImpl::QualifiedName::~QualifiedName((AdobeXMPCore_Int::StructureNodeImpl::QualifiedName *)&a9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::RegisterSerializer(int a1, AdobeXMPCore_Int::IUTF8String_I *this)
{
}

void sub_188887AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AdobeXMPCore_Int::StructureNodeImpl::QualifiedName::~QualifiedName((AdobeXMPCore_Int::StructureNodeImpl::QualifiedName *)&a9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::GetParser(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2)
{
}

void sub_188887BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::GetSerializer(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2)
{
}

void sub_188887C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<AdobeXMPCore::IDOMImplementationRegistry_v1>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AdobeXMPCore::IDOMImplementationRegistry_v1::GetDOMImplementationRegistry(uint64_t *a1@<X8>)
{
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 64), (uint64_t *)&off_1ED4DE128);
}

{
  uint64_t v2;
  uint64_t vars8;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v2 + 64), (uint64_t *)&off_1ED4DE128);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void virtual thunk to'AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this)
{
  uint64_t v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 64);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DE128);
}

{
  AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl((AdobeXMPCore_Int::DOMImplementationRegistryImpl *)((char *)this + *(void *)(*(void *)this - 24)));
}

void virtual thunk to'AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl(void *a1)
{
  uint64_t v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 64);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DE128);
}

{
  AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl((AdobeXMPCore_Int::DOMImplementationRegistryImpl *)((char *)a1 + *(void *)(*a1 - 48)));
}

void *AdobeXMPCore_Int::DOMImplementationRegistryImpl::DOMImplementationRegistryImpl(void *this)
{
  this[8] = &unk_1ED4D7410;
  *this = &unk_1ED4D7280;
  this[7] = &unk_1ED4D7340;
  *(void *)((char *)this + unk_1ED4D71E0) = &unk_1ED4D73A0;
  this[9] = 0;
  this[10] = 0;
  *this = off_1ED4EE100;
  this[6] = 0;
  this[7] = off_1ED4EE1C0;
  this[8] = off_1ED4EE228;
  this[2] = 0;
  this[1] = this + 2;
  this[5] = 0;
  this[3] = 0;
  this[4] = this + 5;
  return this;
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::RDFDOMParserImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 120)])(&a1[*(void *)(*(void *)a1 - 120)]);
    std::shared_ptr<AdobeXMPCore_Int::RDFDOMParserImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::RDFDOMParserImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_1888880D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::RDFDOMSerializerImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 120)])(&a1[*(void *)(*(void *)a1 - 120)]);
    std::shared_ptr<AdobeXMPCore_Int::RDFDOMSerializerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::RDFDOMSerializerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_188888278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::RDFDOMSerializerImpl::RDFDOMSerializerImpl(AdobeXMPCore_Int::RDFDOMSerializerImpl *this)
{
  uint64_t v2 = (AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + 8);
  uint64_t v3 = (char *)this + 88;
  *((void *)this + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = &unk_1ED4E64D8;
  *(void *)this = &unk_1ED4E64A8;
  uint64_t v4 = off_1ED4DDBF8;
  __int16 v5 = off_1ED4DDC00;
  *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = off_1ED4DDC00;
  unsigned int v6 = off_1ED4DDC10;
  *(void *)((char *)v2 + *(v5 - 27)) = off_1ED4DDC08;
  *(void *)((char *)v2 + *(void *)(*((void *)this + 1) - 224)) = v6;
  unsigned int v7 = off_1ED4DDC20;
  *(void *)((char *)v2 + *(void *)(*((void *)this + 1) - 232)) = off_1ED4DDC18;
  *((void *)this + 4) = v7;
  __n128 v8 = off_1ED4DDC30;
  *(void *)((char *)this + *(v7 - 27) + 32) = off_1ED4DDC28;
  *((void *)this + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v8;
  *(void *)&v3[*(v8 - 7)] = off_1ED4DDC38;
  long long v9 = off_1ED4DDBD0;
  float v10 = off_1ED4DDBC8;
  *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = off_1ED4DDBC8;
  *(void *)((char *)v2 + *(v10 - 36)) = v9;
  uint64_t v11 = off_1ED4DDBE0;
  *(void *)((char *)v2 + *(void *)(*((void *)this + 1) - 216)) = off_1ED4DDBD8;
  *(void *)((char *)v2 + *(void *)(*((void *)this + 1) - 224)) = v11;
  uint64_t v12 = off_1ED4DDBF0;
  *(void *)((char *)v2 + *(void *)(*((void *)this + 1) - 232)) = off_1ED4DDBE8;
  *(void *)((char *)v2 + *(void *)(*((void *)this + 1) - 296)) = v12;
  *(void *)((char *)v2 + *(void *)(*((void *)this + 1) - 304)) = v4;
  AdobeXMPCore_Int::ConfigurableImpl::ConfigurableImpl((uint64_t)this + 32, (uint64_t *)&off_1ED4DDC40);
  uint64_t v13 = off_1ED4DDC60;
  BOOL v14 = off_1ED4DDC58;
  *((void *)this + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = off_1ED4DDC58;
  *(void *)&v3[*(v14 - 9)] = v13;
  *(void *)&v3[*(void *)(*((void *)this + 11) - 56)] = off_1ED4DDC68;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  AdobeXMPCore_Int::DOMSerializerImpl::DOMSerializerImpl(v2, (uint64_t *)&off_1ED4DDB78);
}

void sub_18888889C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v1, (uint64_t *)(v4 + 312));
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(v2, v3);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AdobeXMPCore::IDOMImplementationRegistry_v1>::operator=[abi:ne180100]<AdobeXMPCore_Int::DOMImplementationRegistryImpl,void>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v3 = (void *)((char *)v3 + *(void *)(*v3 - 152));
  }
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  __int16 v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void std::shared_ptr<AdobeXMPCore_Int::RDFDOMParserImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::RDFDOMParserImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188888998(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 120) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_1888889FC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMParserImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMParserImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMParserImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore_Int::RDFDOMSerializerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::RDFDOMSerializerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188888B30(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 120) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188888B94(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMSerializerImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMSerializerImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMSerializerImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<AdobeXMPCore_Int::DOMImplementationRegistryImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMImplementationRegistryImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188888CC8(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 208) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_188888D2C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMImplementationRegistryImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMImplementationRegistryImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMImplementationRegistryImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMImplementationRegistryImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::PathSegmentImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMImplementationRegistryImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMImplementationRegistryImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 200)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 152)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 160)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 208)) = a2[6];
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

uint64_t *std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::pair<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>(AdobeXMPCore_Int::IMemoryAllocator_I *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  __int16 v5 = (uint64_t **)std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__find_equal<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>>::__construct_node<std::pair<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>(a1, a3, v7);
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at((uint64_t **)a1, v8, v5, (uint64_t *)v7[0]);
    return (uint64_t *)v7[0];
  }
  return result;
}

__n128 std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>>::__construct_node<std::pair<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>@<Q0>(AdobeXMPCore_Int::IMemoryAllocator_I *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int16 v5 = (char *)a1 + 8;
  a3[2] = 0;
  uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  uint64_t v7 = (**MemoryAllocator)(MemoryAllocator, 64);
  *a3 = v7;
  a3[1] = (uint64_t)v5;
  *(_OWORD *)(v7 + 32) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(v7 + 48) = result;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

uint64_t DumpNodeOptions(unsigned int a1, uint64_t (*a2)(void *, const char *, uint64_t), void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)std::string __str = 0;
  uint64_t v12 = 0;
  memset(v13, 0, 15);
  if (a1)
  {
    uint64_t result = a2(a3, "(0x", 3);
    if (!result)
    {
      snprintf(__str, 0x20uLL, "%lX", a1);
      v13[15] = 0;
      size_t v6 = strlen(__str);
      uint64_t result = a2(a3, __str, v6);
      if (!result)
      {
        uint64_t result = a2(a3, " :", 2);
        if (!result)
        {
          uint64_t v7 = 0;
          for (unsigned int i = 0x80000000; ; i >>= 1)
          {
            if ((i & a1) != 0)
            {
              size_t v9 = strlen(DumpNodeOptions(unsigned int,int (*)(void *,char const*,unsigned int),void *)::optNames[v7]);
              uint64_t result = a2(a3, DumpNodeOptions(unsigned int,int (*)(void *,char const*,unsigned int),void *)::optNames[v7], v9);
              if (result) {
                break;
              }
            }
            if (++v7 == 32) {
              return a2(a3, ")", 1);
            }
          }
        }
      }
    }
  }
  else
  {
    return a2(a3, "(0x0)", 5);
  }
  return result;
}

uint64_t XMPMeta::DumpObject(XMPMeta *this, uint64_t (*a2)(void *, const char *, uint64_t), void *a3)
{
  if (!a2) {
    XMPMeta::DumpObject();
  }
  uint64_t result = a2(a3, "Dumping XMPMeta object \"", 24);
  if (result) {
    return result;
  }
  DumpClearString((uint64_t)this + 240, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a2, (uint64_t)a3);
  uint64_t result = a2(a3, "\"  ", 3);
  if (result) {
    return result;
  }
  DumpNodeOptions(*((_DWORD *)this + 58), a2, a3);
  uint64_t result = a2(a3, "\n", 1);
  if (result) {
    return result;
  }
  if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 287)) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t result = a2(a3, "** bad root value **  \"", 23);
    if (result) {
      return result;
    }
    DumpClearString((uint64_t)this + 264, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a2, (uint64_t)a3);
    uint64_t result = a2(a3, "\"", 1);
    if (result) {
      return result;
    }
    uint64_t result = a2(a3, "\n", 1);
    if (result) {
      return result;
    }
    goto LABEL_13;
  }
  if (*((void *)this + 34)) {
    goto LABEL_10;
  }
LABEL_13:
  if (*((void *)this + 40) != *((void *)this + 41))
  {
    uint64_t result = a2(a3, "** bad root qualifiers **", 25);
    if (result) {
      return result;
    }
    uint64_t result = a2(a3, "\n", 1);
    if (result) {
      return result;
    }
    uint64_t v7 = *((void *)this + 41) - *((void *)this + 40);
    if (v7)
    {
      uint64_t v8 = 0;
      unint64_t v9 = v7 >> 3;
      if (v9 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v9;
      }
      do
        uint64_t result = DumpPropertyTree(*(const XMP_Node **)(*((void *)this + 40) + 8 * v8++), 3, 0, a2, a3);
      while (v10 != v8);
    }
  }
  uint64_t v11 = *((void *)this + 37);
  uint64_t v12 = *((void *)this + 38);
  if (v11 != v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (v12 - v11) >> 3;
    if (v14 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v14;
    }
    do
    {
      uint64_t v16 = *(void *)(*((void *)this + 37) + 8 * v13);
      uint64_t result = a2(a3, "\n", 1);
      if (result) {
        break;
      }
      uint64_t result = a2(a3, "   ", 3);
      if (result) {
        break;
      }
      DumpClearString(v16 + 40, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a2, (uint64_t)a3);
      uint64_t result = a2(a3, "  ", 2);
      if (result) {
        break;
      }
      DumpClearString(v16 + 16, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a2, (uint64_t)a3);
      uint64_t result = a2(a3, "  ", 2);
      if (result) {
        break;
      }
      DumpNodeOptions(*(_DWORD *)(v16 + 8), a2, a3);
      uint64_t result = a2(a3, "\n", 1);
      if (result) {
        break;
      }
      if ((*(_DWORD *)(v16 + 8) & 0x80000000) == 0)
      {
        uint64_t result = a2(a3, "** bad schema options **", 24);
        if (result) {
          break;
        }
        uint64_t result = a2(a3, "\n", 1);
        if (result) {
          break;
        }
      }
      if (*(void *)(v16 + 96) != *(void *)(v16 + 104))
      {
        uint64_t result = a2(a3, "** bad schema qualifiers **", 27);
        if (result) {
          return result;
        }
        uint64_t result = a2(a3, "\n", 1);
        if (result) {
          return result;
        }
        uint64_t v17 = *(void *)(v16 + 104) - *(void *)(v16 + 96);
        if (v17)
        {
          uint64_t v18 = 0;
          unint64_t v19 = v17 >> 3;
          if (v19 <= 1) {
            uint64_t v20 = 1;
          }
          else {
            uint64_t v20 = v19;
          }
          do
            uint64_t result = DumpPropertyTree(*(const XMP_Node **)(*(void *)(v16 + 96) + 8 * v18++), 3, 0, a2, a3);
          while (v20 != v18);
        }
      }
      uint64_t v21 = *(void *)(v16 + 80) - *(void *)(v16 + 72);
      if (v21)
      {
        uint64_t v22 = 0;
        unint64_t v23 = v21 >> 3;
        if (v23 <= 1) {
          uint64_t v24 = 1;
        }
        else {
          uint64_t v24 = v23;
        }
        do
          uint64_t result = DumpPropertyTree(*(const XMP_Node **)(*(void *)(v16 + 72) + 8 * v22++), 2, 0, a2, a3);
        while (v24 != v22);
      }
      ++v13;
    }
    while (v13 != v15);
  }
  return result;
}

uint64_t DumpPropertyTree(const XMP_Node *a1, int a2, uint64_t a3, uint64_t (*a4)(void *, const char *, uint64_t), void *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
LABEL_5:
    *(_OWORD *)std::string __str = 0u;
    long long v39 = 0u;
    if (a3)
    {
      uint64_t result = a4(a5, "[", 1);
      if (result) {
        return result;
      }
      snprintf(__str, 0x20uLL, "%ld", a3);
      HIBYTE(v39) = 0;
      size_t v12 = strlen(__str);
      uint64_t result = a4(a5, __str, v12);
      if (result) {
        return result;
      }
      uint64_t result = a4(a5, "]", 1);
      if (result) {
        return result;
      }
    }
    else
    {
      if ((*((unsigned char *)a1 + 8) & 0x20) != 0)
      {
        uint64_t result = a4(a5, "? ", 2);
        if (result) {
          return result;
        }
      }
      DumpClearString((uint64_t)a1 + 16, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a4, (uint64_t)a5);
    }
    if ((*((unsigned char *)a1 + 9) & 0x1F) == 0)
    {
      uint64_t result = a4(a5, " = \"", 4);
      if (result) {
        return result;
      }
      DumpClearString((uint64_t)a1 + 40, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a4, (uint64_t)a5);
      uint64_t result = a4(a5, "\"", 1);
      if (result) {
        return result;
      }
      if (!*((_DWORD *)a1 + 2)) {
        goto LABEL_33;
      }
    }
    uint64_t result = a4(a5, "  ", 2);
    if (result) {
      return result;
    }
    DumpNodeOptions(*((_DWORD *)a1 + 2), a4, a5);
    int v13 = *((_DWORD *)a1 + 2);
    if ((v13 & 0x40) == 0)
    {
LABEL_29:
      if ((v13 & 0x1F00) != 0)
      {
        if ((v13 & 0x200) != 0)
        {
          if ((v13 & 0x100) == 0) {
            goto LABEL_38;
          }
        }
        else if ((v13 & 0x1F00) == 0x100)
        {
          goto LABEL_38;
        }
        uint64_t result = a4(a5, "  ** bad comp flags **", 22);
LABEL_37:
        if (result) {
          return result;
        }
        goto LABEL_38;
      }
LABEL_33:
      if (*((void *)a1 + 9) != *((void *)a1 + 10))
      {
        uint64_t result = a4(a5, "  ** bad children **", 20);
        goto LABEL_37;
      }
LABEL_38:
      uint64_t result = a4(a5, "\n", 1);
      if (result) {
        return result;
      }
      uint64_t v18 = *((void *)a1 + 13) - *((void *)a1 + 12);
      if (v18)
      {
        uint64_t v19 = 0;
        unint64_t v20 = v18 >> 3;
        if (v20 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v20;
        }
        do
        {
          uint64_t v22 = *(void *)(*((void *)a1 + 12) + 8 * v19);
          if (*(const XMP_Node **)(v22 + 64) != a1)
          {
            uint64_t result = a4(a5, "** bad parent link => ", 22);
            if (result) {
              return result;
            }
          }
          unint64_t v23 = (_WORD **)(v22 + 16);
          int v24 = *(char *)(v22 + 39);
          if (v24 < 0)
          {
            if (*(void *)(v22 + 24) != 2) {
              goto LABEL_53;
            }
            unsigned int v25 = *v23;
          }
          else
          {
            unsigned int v25 = (_WORD *)(v22 + 16);
            if (v24 != 2) {
              goto LABEL_53;
            }
          }
          if (*v25 == 23899)
          {
            uint64_t result = a4(a5, "** bad qual name => ", 20);
            if (result) {
              return result;
            }
          }
LABEL_53:
          if ((*(unsigned char *)(v22 + 8) & 0x20) == 0)
          {
            uint64_t result = a4(a5, "** bad qual flag => ", 20);
            if (result) {
              return result;
            }
          }
          int v26 = *(char *)(v22 + 39);
          if (v26 < 0)
          {
            if (*(void *)(v22 + 24) != 8) {
              goto LABEL_64;
            }
            unint64_t v23 = (_WORD **)*v23;
          }
          else if (v26 != 8)
          {
            goto LABEL_64;
          }
          if (*v23 == (_WORD *)0x676E616C3A6C6D78 && (v19 || (*((unsigned char *)a1 + 8) & 0x40) == 0))
          {
            uint64_t result = a4(a5, "** bad lang qual => ", 20);
            if (result) {
              return result;
            }
          }
LABEL_64:
          uint64_t result = DumpPropertyTree((const XMP_Node *)v22, a2 + 2, 0, (int (*)(void *, const char *, unsigned int))a4, a5);
          ++v19;
        }
        while (v21 != v19);
      }
      uint64_t v27 = *((void *)a1 + 10) - *((void *)a1 + 9);
      if (!v27) {
        return result;
      }
      uint64_t v28 = 0;
      unint64_t v29 = v27 >> 3;
      int v30 = a2 + 1;
      if (v29 <= 1) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = v29;
      }
      while (1)
      {
        uint64_t v32 = *(void *)(*((void *)a1 + 9) + 8 * v28);
        if (*(const XMP_Node **)(v32 + 64) != a1)
        {
          uint64_t result = a4(a5, "** bad parent link => ", 22);
          if (result) {
            return result;
          }
        }
        if ((*(unsigned char *)(v32 + 8) & 0x20) != 0)
        {
          uint64_t result = a4(a5, "** bad qual flag => ", 20);
          if (result) {
            return result;
          }
        }
        if ((*((unsigned char *)a1 + 9) & 2) == 0) {
          break;
        }
        unint64_t v35 = v28 + 1;
        unsigned int v36 = (void *)(v32 + 16);
        int v37 = *(char *)(v32 + 39);
        if (v37 < 0)
        {
          if (*(void *)(v32 + 24) != 2) {
            goto LABEL_88;
          }
          unsigned int v36 = (void *)*v36;
        }
        else if (v37 != 2)
        {
          goto LABEL_88;
        }
        if (*(_WORD *)v36 != 23899)
        {
LABEL_88:
          uint64_t result = a4(a5, "** bad item name => ", 20);
          if (result) {
            return result;
          }
        }
LABEL_89:
        uint64_t result = DumpPropertyTree((const XMP_Node *)v32, v30, v35, (int (*)(void *, const char *, unsigned int))a4, a5);
        if (v31 == ++v28) {
          return result;
        }
      }
      uint64_t v33 = (void *)(v32 + 16);
      int v34 = *(char *)(v32 + 39);
      if (v34 < 0)
      {
        if (*(void *)(v32 + 24) != 2)
        {
LABEL_84:
          unint64_t v35 = 0;
          goto LABEL_89;
        }
        uint64_t v33 = (void *)*v33;
      }
      else if (v34 != 2)
      {
        goto LABEL_84;
      }
      if (*(_WORD *)v33 == 23899)
      {
        uint64_t result = a4(a5, "** bad field name => ", 21);
        if (result) {
          return result;
        }
      }
      goto LABEL_84;
    }
    unint64_t v14 = (void *)*((void *)a1 + 12);
    if (v14 != *((void **)a1 + 13))
    {
      uint64_t v15 = *v14;
      uint64_t v16 = (void *)(*v14 + 16);
      int v17 = *(char *)(v15 + 39);
      if ((v17 & 0x80000000) == 0)
      {
        if (v17 != 8) {
          goto LABEL_27;
        }
LABEL_26:
        if (*v16 == 0x676E616C3A6C6D78) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      if (*(void *)(v15 + 24) == 8)
      {
        uint64_t v16 = (void *)*v16;
        goto LABEL_26;
      }
    }
LABEL_27:
    uint64_t result = a4(a5, "  ** bad lang flag **", 21);
    if (result) {
      return result;
    }
    int v13 = *((_DWORD *)a1 + 2);
    goto LABEL_29;
  }
  uint64_t v10 = a2;
  while (1)
  {
    uint64_t result = a4(a5, "   ", 3);
    if (result) {
      return result;
    }
    if (!--v10) {
      goto LABEL_5;
    }
  }
}

uint64_t XMPMeta::CountArrayItems(XMPMeta *this, char *a2, char *a3)
{
  if (!a2 || !a3) {
    XMPMeta::CountArrayItems();
  }
  memset(v8, 0, sizeof(v8));
  ExpandXPath(a2, a3, (uint64_t *)v8);
  uint64_t Node = FindNode((void *)this + 28, v8, 0, 0, 0);
  if (Node)
  {
    if ((*(unsigned char *)(Node + 9) & 2) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "The named property is not an array";
      *((unsigned char *)exception + 16) = 0;
    }
    uint64_t v5 = (*(void *)(Node + 80) - *(void *)(Node + 72)) >> 3;
  }
  else
  {
    uint64_t v5 = 0;
  }
  unint64_t v9 = v8;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  return v5;
}

void sub_188889CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t XMPMeta::GetObjectName(uint64_t this, const char **a2, unsigned int *a3)
{
  uint64_t v3 = (const char *)(this + 240);
  if (*(char *)(this + 263) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  *a2 = v3;
  if (*(char *)(this + 263) < 0) {
    uint64_t v4 = *(void *)(this + 248);
  }
  else {
    LODWORD(v4) = *(unsigned __int8 *)(this + 263);
  }
  *a3 = v4;
  return this;
}

uint64_t XMPMeta::SetObjectName(XMPMeta *this, char *a2)
{
  char v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = a2;
    do
    {
      if (v4 >= 1)
      {
        do
        {
          int v7 = *++v5;
          int v6 = v7;
        }
        while (v7 > 0);
        if ((v6 & 0x80000000) == 0) {
          break;
        }
      }
      unsigned int v10 = 0;
      unint64_t v9 = 0;
      CodePoint_from_UTF8(v5, 4uLL, &v10, &v9);
      v5 += v9;
      char v4 = *v5;
    }
    while (*v5);
  }
  return MEMORY[0x18C11BE10]((char *)this + 240, a2);
}

char *XMPMeta::Sort(XMPMeta *this)
{
  uint64_t v2 = *((void *)this + 40);
  uint64_t v3 = (char *)*((void *)this + 41);
  if ((char *)v2 != v3)
  {
    int v6 = CompareNodeNames;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>(v2, v3, (uint64_t (**)(uint64_t, uint64_t))&v6, 126 - 2 * __clz((uint64_t)&v3[-v2] >> 3), 1);
    SortWithinOffspring((char *)this + 320);
  }
  uint64_t result = (char *)*((void *)this + 37);
  uint64_t v5 = (char *)*((void *)this + 38);
  if (result != v5)
  {
    int v6 = CompareNodeValues;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>((uint64_t)result, v5, (uint64_t (**)(uint64_t, uint64_t))&v6, 126 - 2 * __clz((v5 - result) >> 3), 1);
    return SortWithinOffspring((char *)this + 296);
  }
  return result;
}

BOOL CompareNodeNames(XMP_Node *a1, XMP_Node *a2)
{
  uint64_t v2 = (void **)((char *)a1 + 16);
  int v3 = *((unsigned __int8 *)a1 + 39);
  if (*((char *)a1 + 39) < 0)
  {
    if (*((void *)a1 + 3) != 8) {
      goto LABEL_7;
    }
    char v4 = *v2;
  }
  else
  {
    char v4 = (void *)((char *)a1 + 16);
    if (v3 != 8) {
      goto LABEL_7;
    }
  }
  if (*v4 == 0x676E616C3A6C6D78) {
    return 1;
  }
LABEL_7:
  uint64_t v5 = (void **)((char *)a2 + 16);
  int v6 = *((unsigned __int8 *)a2 + 39);
  if (*((char *)a2 + 39) < 0)
  {
    if (*((void *)a2 + 3) != 8) {
      goto LABEL_13;
    }
    int v7 = *v5;
  }
  else
  {
    int v7 = (void *)((char *)a2 + 16);
    if (v6 != 8) {
      goto LABEL_13;
    }
  }
  if (*v7 == 0x676E616C3A6C6D78) {
    return 0;
  }
LABEL_13:
  if ((v3 & 0x80) != 0)
  {
    if (*((void *)a1 + 3) != 8) {
      goto LABEL_19;
    }
    uint64_t v2 = (void **)*v2;
LABEL_18:
    if (*v2 != (void *)0x657079743A666472) {
      goto LABEL_19;
    }
    return 1;
  }
  if (v3 == 8) {
    goto LABEL_18;
  }
LABEL_19:
  if ((v6 & 0x80) == 0)
  {
    uint64_t v8 = (void *)((char *)a2 + 16);
    if (v6 != 8) {
      goto LABEL_26;
    }
LABEL_25:
    if (*v8 != 0x657079743A666472) {
      goto LABEL_26;
    }
    return 0;
  }
  if (*((void *)a2 + 3) == 8)
  {
    uint64_t v8 = *v5;
    goto LABEL_25;
  }
LABEL_26:
  if ((v3 & 0x80u) == 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 39);
  }
  else {
    size_t v10 = *((void *)a1 + 3);
  }
  if ((v3 & 0x80u) == 0) {
    uint64_t v11 = (char *)a1 + 16;
  }
  else {
    uint64_t v11 = (char *)*((void *)a1 + 2);
  }
  if ((v6 & 0x80u) == 0) {
    size_t v12 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    size_t v12 = *((void *)a2 + 3);
  }
  if ((v6 & 0x80u) == 0) {
    int v13 = (char *)a2 + 16;
  }
  else {
    int v13 = (char *)*((void *)a2 + 2);
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  if (v15) {
    return v15 < 0;
  }
  else {
    return v10 < v12;
  }
}

char *SortWithinOffspring(char *result)
{
  uint64_t v1 = *((void *)result + 1) - *(void *)result;
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    unint64_t v4 = v1 >> 3;
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v4;
    }
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)v2 + 8 * v3);
      uint64_t result = *(char **)(v6 + 96);
      int v7 = *(char **)(v6 + 104);
      if (result != v7)
      {
        uint64_t v16 = CompareNodeNames;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>((uint64_t)result, v7, (uint64_t (**)(uint64_t, uint64_t))&v16, 126 - 2 * __clz((v7 - result) >> 3), 1);
        uint64_t result = (char *)SortWithinOffspring(v6 + 96);
      }
      unint64_t v9 = *(uint64_t **)(v6 + 72);
      size_t v10 = *(uint64_t **)(v6 + 80);
      uint64_t v8 = v6 + 72;
      if (v9 == v10) {
        goto LABEL_21;
      }
      int v11 = *(_DWORD *)(v6 + 8);
      if ((v11 & 0x80000100) != 0) {
        break;
      }
      if ((v11 & 0x200) != 0)
      {
        if ((v11 & 0x400) == 0)
        {
          uint64_t v16 = CompareNodeValues;
          if ((char *)v10 - (char *)v9 < 1025)
          {
            int v13 = 0;
            uint64_t v15 = 0;
          }
          else
          {
            int v13 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<XMP_Node *>(v10 - v9);
            uint64_t v15 = v14;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(v9, v10, (uint64_t (**)(uint64_t, uint64_t))&v16, v10 - v9, v13, v15);
          if (v13) {
            operator delete(v13);
          }
          goto LABEL_20;
        }
        if ((v11 & 0x1000) != 0)
        {
          size_t v12 = (uint64_t (*)(uint64_t, uint64_t))CompareNodeLangs;
          goto LABEL_10;
        }
      }
LABEL_20:
      uint64_t result = (char *)SortWithinOffspring(v8);
LABEL_21:
      if (v5 == ++v3) {
        return result;
      }
    }
    size_t v12 = (uint64_t (*)(uint64_t, uint64_t))CompareNodeNames;
LABEL_10:
    uint64_t v16 = (BOOL (*)(XMP_Node *, XMP_Node *))v12;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>((uint64_t)v9, (char *)v10, (uint64_t (**)(uint64_t, uint64_t))&v16, 126 - 2 * __clz(v10 - v9), 1);
    goto LABEL_20;
  }
  return result;
}

void sub_18888A180(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL CompareNodeValues(XMP_Node *a1, XMP_Node *a2)
{
  if (*((_DWORD *)a1 + 2) & 0x1F00 | *((_DWORD *)a2 + 2) & 0x1F00) {
    return (*((_DWORD *)a1 + 2) & 0x1F00u) < (*((_DWORD *)a2 + 2) & 0x1F00u);
  }
  unint64_t v4 = (char *)*((void *)a2 + 5);
  uint64_t v2 = (char *)a2 + 40;
  uint64_t v3 = v4;
  int v5 = v2[23];
  uint64_t v8 = (char *)*((void *)a1 + 5);
  uint64_t v6 = (char *)a1 + 40;
  int v7 = v8;
  int v9 = v6[23];
  if (v9 >= 0) {
    size_t v10 = v6[23];
  }
  else {
    size_t v10 = *((void *)v6 + 1);
  }
  if (v9 < 0) {
    uint64_t v6 = v7;
  }
  if (v5 >= 0) {
    size_t v11 = v2[23];
  }
  else {
    size_t v11 = *((void *)v2 + 1);
  }
  if (v5 < 0) {
    uint64_t v2 = v3;
  }
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }
  int v13 = memcmp(v6, v2, v12);
  if (v13) {
    return v13 < 0;
  }
  else {
    return v10 < v11;
  }
}

void *XMPMeta::Erase(XMPMeta *this)
{
  uint64_t v2 = *((void *)this + 43);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 43) = 0;
  }

  return XMP_Node::ClearNode((XMPMeta *)((char *)this + 224));
}

void XMPMeta::Clone(XMPMeta *this, XMPMeta *a2, int a3)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    int v9 = "Null clone pointer";
    goto LABEL_10;
  }
  if (a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    int v9 = "No options are defined yet";
LABEL_10:
    exception[1] = v9;
    *((unsigned char *)exception + 16) = 0;
  }
  if (*((void *)this + 36)) {
    XMPMeta::Clone();
  }
  int v5 = (void **)((char *)a2 + 224);
  XMP_Node::ClearNode((XMPMeta *)((char *)a2 + 224));
  *((_DWORD *)a2 + 58) = *((_DWORD *)this + 58);
  std::string::operator=((std::string *)a2 + 10, (const std::string *)this + 10);
  std::string::operator=((std::string *)a2 + 11, (const std::string *)this + 11);
  uint64_t v6 = *((void *)this + 45);
  *((unsigned char *)a2 + 368) = *((unsigned char *)this + 368);
  *((void *)a2 + 45) = v6;
  uint64_t v7 = *((void *)this + 49);
  *(_OWORD *)((char *)a2 + 376) = *(_OWORD *)((char *)this + 376);
  *((void *)a2 + 49) = v7;

  CloneOffspring((XMPMeta *)((char *)this + 224), v5, 0);
}

void XMP_Node::GetFullQualifiedName(XMP_Node *this, const char **a2, unsigned int *a3, const char **a4, unsigned int *a5)
{
  if (a2) {
    *a2 = "";
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = "";
  }
  if (a5) {
    *a5 = 0;
  }
  if (*((char *)this + 39) < 0)
  {
    if (!*((void *)this + 3)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 39))
  {
    return;
  }
  size_t v10 = (char *)this + 16;
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
  {
    if (a2)
    {
      if ((*((unsigned char *)this + 39) & 0x80) != 0) {
        size_t v10 = *(const char **)v10;
      }
      *a2 = v10;
    }
    if (a3)
    {
      if (*((char *)this + 39) < 0) {
        uint64_t v15 = *((void *)this + 3);
      }
      else {
        LODWORD(v15) = *((unsigned __int8 *)this + 39);
      }
      *a3 = v15;
    }
    if (a4)
    {
      uint64_t v16 = (char *)this + 40;
      if (*((char *)this + 63) < 0) {
        uint64_t v16 = *(const char **)v16;
      }
      *a4 = v16;
    }
    if (a5)
    {
      if (*((char *)this + 63) < 0) {
        uint64_t v17 = *((void *)this + 6);
      }
      else {
        LODWORD(v17) = *((unsigned __int8 *)this + 63);
      }
      *a5 = v17;
    }
  }
  else
  {
    std::string::size_type v11 = std::string::find((const std::string *)((char *)this + 16), 58, 0);
    if (v11 != -1)
    {
      std::string::size_type v12 = v11;
      memset(&v19, 0, sizeof(v19));
      std::string::basic_string(&v19, (const std::string *)((char *)this + 16), 0, v11, (std::allocator<char> *)&v18);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v13 = &v19;
      }
      else {
        int v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      XMP_NamespaceTable::GetURI((XMP_NamespaceTable *)sRegisteredNamespaces, (char *)v13, a2, a3);
      if (*((char *)this + 39) < 0) {
        size_t v10 = *(const char **)v10;
      }
      *a4 = &v10[v12 + 1];
      if (*((char *)this + 39) < 0) {
        uint64_t v14 = *((void *)this + 3);
      }
      else {
        LODWORD(v14) = *((unsigned __int8 *)this + 39);
      }
      *a5 = v14 + ~v12;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_18888A54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta::ResetErrorCallbackLimit(uint64_t this, int a2)
{
  *(_DWORD *)(this + 360) = a2;
  *(_DWORD *)(this + 364) = 0;
  *(unsigned char *)(this + 368) = 0;
  return this;
}

BOOL XMPMeta::ErrorCallbackInfo::CanNotify(XMPMeta::ErrorCallbackInfo *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && !*((void *)this + 3)) {
    XMPMeta::ErrorCallbackInfo::CanNotify();
  }
  return v1 != 0;
}

BOOL XMPMeta::ErrorCallbackInfo::ClientCallbackWrapper(XMPMeta::ErrorCallbackInfo *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return (*((unsigned int (**)(void, void, uint64_t, uint64_t, const char *))this + 3))(*((void *)this + 4), *((void *)this + 5), a3, a4, a5) != 0;
}

void XMPMeta::ErrorCallbackInfo::~ErrorCallbackInfo(XMPMeta::ErrorCallbackInfo *this)
{
}

uint64_t std::pair<std::string const,std::vector<XPathStepInfo>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,std::reverse_iterator<XPathStepInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void std::vector<XPathStepInfo>::__assign_with_size[abi:ne180100]<XPathStepInfo*,XPathStepInfo*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<XPathStepInfo>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<XPathStepInfo>::__vallocate[abi:ne180100]((void *)a1, v12);
    int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<XPathStepInfo>,XPathStepInfo*,XPathStepInfo*,XPathStepInfo*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,XPathStepInfo *,XPathStepInfo *,XPathStepInfo *,0>(__str, v15, v9);
    int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<XPathStepInfo>,XPathStepInfo*,XPathStepInfo*,XPathStepInfo*>(v8, (long long *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,XPathStepInfo *,XPathStepInfo *,XPathStepInfo *,0>(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_18888A824(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18888A82C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<XPathStepInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<XPathStepInfo>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,XPathStepInfo*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,XPathStepInfo *,XPathStepInfo *,XPathStepInfo *,0>(std::string *__str, std::string *a2, std::string *this)
{
  size_t v4 = __str;
  if (__str == a2) {
    return __str;
  }
  size_t v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 32);
    size_t v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

BOOL CompareNodeLangs(XMP_Node *a1, XMP_Node *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)a1 + 12);
  if (v2 == *((uint64_t **)a1 + 13)) {
    return 0;
  }
  uint64_t v3 = *v2;
  size_t v4 = (void *)(v3 + 16);
  int v5 = *(char *)(v3 + 39);
  if (v5 < 0)
  {
    if (*(void *)(v3 + 24) != 8) {
      return 0;
    }
    size_t v4 = (void *)*v4;
  }
  else if (v5 != 8)
  {
    return 0;
  }
  if (*v4 != 0x676E616C3A6C6D78) {
    return 0;
  }
  int v7 = (uint64_t *)*((void *)a2 + 12);
  if (v7 == *((uint64_t **)a2 + 13)) {
    return 0;
  }
  uint64_t v8 = *v7;
  int v9 = (void *)(v8 + 16);
  int v10 = *(char *)(v8 + 39);
  if (v10 < 0)
  {
    if (*(void *)(v8 + 24) == 8)
    {
      int v9 = (void *)*v9;
      goto LABEL_15;
    }
    return 0;
  }
  if (v10 != 8) {
    return 0;
  }
LABEL_15:
  if (*v9 != 0x676E616C3A6C6D78) {
    return 0;
  }
  uint64_t v11 = (uint64_t **)(v3 + 40);
  int v12 = *(char *)(v3 + 63);
  if (v12 < 0)
  {
    if (*(void *)(v3 + 48) != 9) {
      goto LABEL_25;
    }
    int v13 = *v11;
  }
  else
  {
    int v13 = (uint64_t *)(v3 + 40);
    if (v12 != 9) {
      goto LABEL_25;
    }
  }
  uint64_t v14 = *v13;
  int v15 = *((unsigned __int8 *)v13 + 8);
  if (v14 != 0x6C75616665642D78 || v15 != 116)
  {
LABEL_25:
    uint64_t v17 = (uint64_t **)(v8 + 40);
    int v18 = *(char *)(v8 + 63);
    if (v18 < 0)
    {
      if (*(void *)(v8 + 48) != 9) {
        return std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v17);
      }
      std::string v19 = *v17;
    }
    else
    {
      std::string v19 = (uint64_t *)(v8 + 40);
      if (v18 != 9) {
        return std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v17);
      }
    }
    uint64_t v20 = *v19;
    int v21 = *((unsigned __int8 *)v19 + 8);
    if (v20 == 0x6C75616665642D78 && v21 == 116) {
      return 0;
    }
    return std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v17);
  }
  return 1;
}

void *std::get_temporary_buffer[abi:ne180100]<XMP_Node *>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = result;
    if (a4 == 2)
    {
      uint64_t result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if (result)
      {
        uint64_t v9 = *v8;
        uint64_t *v8 = *(a2 - 1);
        *(a2 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v13 = a4 >> 1;
      uint64_t v14 = &result[a4 >> 1];
      unint64_t v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(result, v14, a3, v15, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13]);
        return (uint64_t *)std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,XMP_Node **,std::__wrap_iter<XMP_Node **>>((uint64_t)a5, &a5[v13], &a5[v13], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(result, v14, a3, v15, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (uint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return (uint64_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>((uint64_t)result, a2, a3);
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    BOOL v4 = (void *)result;
    int v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v9 = *v8;
        uint64_t v8 = v5;
        uint64_t result = (*a3)(*v5, v9);
        if (result)
        {
          uint64_t v10 = *v8;
          uint64_t v11 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v11 + 8) = *(void *)((char *)v4 + v11);
            if (!v11) {
              break;
            }
            uint64_t result = (*a3)(v10, *(void *)((char *)v4 + v11 - 8));
            v11 -= 8;
            if ((result & 1) == 0)
            {
              int v12 = (void *)((char *)v4 + v11 + 8);
              goto LABEL_10;
            }
          }
          int v12 = v4;
LABEL_10:
          *int v12 = v10;
        }
        int v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v9 = result;
    if (a4 == 2)
    {
      uint64_t result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if (result)
      {
        *a5 = *(a2 - 1);
        uint64_t v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        uint64_t v10 = *(a2 - 1);
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return (uint64_t *)std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>,std::__wrap_iter<XMP_Node **>>((uint64_t)v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(result, a2, a5, a3);
    }
  }
  return result;
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,XMP_Node **,std::__wrap_iter<XMP_Node **>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      uint64_t v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      uint64_t result = (*a6)(*a3, *v11);
      if (result) {
        int v12 = a3;
      }
      else {
        int v12 = v11;
      }
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v12;
      if (v11 == a2) {
        goto LABEL_10;
      }
    }
    if (v11 != a2)
    {
      uint64_t v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t result, char *a2, char *a3, uint64_t (**a4)(void, uint64_t), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v52 = a6;
  if (a6)
  {
    uint64_t v14 = (char *)result;
    while (v52 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v15 = 0;
      uint64_t v16 = -a5;
      while (1)
      {
        uint64_t result = (*a4)(*(void *)a2, *(void *)&v14[v15]);
        if (result) {
          break;
        }
        v15 += 8;
        if (__CFADD__(v16++, 1)) {
          return result;
        }
      }
      uint64_t v18 = -v16;
      uint64_t v19 = v52;
      uint64_t v49 = a8;
      int v50 = a7;
      uint64_t v51 = a3;
      BOOL v48 = &v14[v15];
      if (-v16 >= v52)
      {
        if (v16 == -1)
        {
          uint64_t v46 = *(void *)&v14[v15];
          *(void *)&v14[v15] = *(void *)a2;
          *(void *)a2 = v46;
          return result;
        }
        if (v16 > 0) {
          uint64_t v18 = 1 - v16;
        }
        uint64_t v28 = v18 >> 1;
        unint64_t v23 = &v14[8 * (v18 >> 1) + v15];
        unint64_t v29 = a3;
        uint64_t v22 = a2;
        if (a2 != v29)
        {
          uint64_t v47 = v28;
          char v54 = *a4;
          unint64_t v30 = (v51 - a2) >> 3;
          uint64_t v22 = a2;
          do
          {
            uint64_t v31 = &v22[8 * (v30 >> 1)];
            uint64_t v33 = *(void *)v31;
            uint64_t v32 = v31 + 8;
            int v34 = v54(v33, *(void *)v23);
            if (v34) {
              v30 += ~(v30 >> 1);
            }
            else {
              v30 >>= 1;
            }
            if (v34) {
              uint64_t v22 = v32;
            }
          }
          while (v30);
          uint64_t v19 = v52;
          uint64_t v28 = v47;
        }
        uint64_t v21 = (v22 - a2) >> 3;
      }
      else
      {
        if (v52 >= 0) {
          uint64_t v20 = v52;
        }
        else {
          uint64_t v20 = v52 + 1;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = &a2[8 * (v20 >> 1)];
        unint64_t v23 = a2;
        if (a2 - v14 != v15)
        {
          uint64_t v53 = v20 >> 1;
          unint64_t v24 = (a2 - v14 - v15) >> 3;
          unint64_t v23 = &v14[v15];
          do
          {
            unsigned int v25 = &v23[8 * (v24 >> 1)];
            uint64_t v27 = *(void *)v25;
            int v26 = v25 + 8;
            if ((*a4)(*(void *)v22, v27))
            {
              v24 >>= 1;
            }
            else
            {
              unint64_t v23 = v26;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          uint64_t v19 = v52;
          uint64_t v21 = v53;
        }
        uint64_t v28 = (v23 - v14 - v15) >> 3;
      }
      a5 = -(v28 + v16);
      uint64_t v55 = v19 - v21;
      unint64_t v35 = a2;
      uint64_t v36 = v19;
      uint64_t v37 = v28;
      unsigned int v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<XMP_Node **>,std::__wrap_iter<XMP_Node **>>(v23, v35, v22);
      uint64_t v39 = v21;
      uint64_t v40 = v38;
      if (v37 + v39 >= v36 - (v37 + v39) - v16)
      {
        uint64_t v44 = v22;
        uint64_t v45 = v37;
        uint64_t v43 = v39;
        a7 = v50;
        a3 = v38;
        uint64_t result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(v38, v44, v51, a4, a5, v55, v50, v49);
        a2 = v23;
        a8 = v49;
        a5 = v45;
        uint64_t v14 = v48;
      }
      else
      {
        uint64_t v41 = v23;
        uint64_t v42 = v37;
        a8 = v49;
        a7 = v50;
        uint64_t result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(&v14[v15], v41, v38, a4, v42, v39, v50, v49);
        uint64_t v14 = v40;
        a2 = v22;
        a3 = v51;
        uint64_t v43 = v55;
      }
      uint64_t v52 = v43;
      if (!v43) {
        return result;
      }
    }
    return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(v14, a2, a3, a4, a5, v52, a7);
  }
  return result;
}

uint64_t *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    size_t v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a3;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = *v9++;
        uint64_t result = (uint64_t *)(*a4)(*v6, v11);
        int v12 = v9;
        if (result)
        {
          v10[1] = *v10;
          int v12 = a3;
          if (v10 != a3)
          {
            uint64_t v13 = v8;
            while (1)
            {
              int v12 = (uint64_t *)((char *)a3 + v13);
              uint64_t result = (uint64_t *)(*a4)(*v6, *(uint64_t *)((char *)a3 + v13 - 8));
              if (!result) {
                break;
              }
              *int v12 = *(v12 - 1);
              v13 -= 8;
              if (!v13)
              {
                int v12 = a3;
                break;
              }
            }
          }
        }
        uint64_t v14 = *v6++;
        *int v12 = v14;
        v8 += 8;
      }
      while (v6 != a2);
    }
  }
  return result;
}

uint64_t std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>,std::__wrap_iter<XMP_Node **>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      uint64_t v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      uint64_t result = (*a6)(*a3, *v11);
      if (result) {
        int v12 = a3;
      }
      else {
        int v12 = v11;
      }
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v12;
      if (v11 == a2) {
        goto LABEL_10;
      }
    }
    if (v11 != a2)
    {
      uint64_t v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

char *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(char *__dst, char *a2, char *a3, uint64_t (**a4)(void, void), uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v10 = a2;
  uint64_t v11 = __dst;
  if (a5 <= a6)
  {
    if (__dst != a2)
    {
      unint64_t v16 = 0;
      do
      {
        *(void *)&__src[v16] = *(void *)&__dst[v16];
        v16 += 8;
      }
      while (&__dst[v16] != a2);
      if (v16)
      {
        uint64_t v17 = &__src[v16];
        uint64_t v18 = __src;
        while (v10 != a3)
        {
          MD5_CTX __dst = (char *)(*a4)(*(void *)v10, *(void *)v18);
          if (__dst) {
            uint64_t v19 = v10;
          }
          else {
            uint64_t v19 = v18;
          }
          v10 += 8 * __dst;
          v18 += 8 * (__dst ^ 1);
          *(void *)uint64_t v11 = *(void *)v19;
          v11 += 8;
          if (v17 == v18) {
            return __dst;
          }
        }
        return (char *)memmove(v11, v18, __src - v18 + v16);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v12 = 0;
    do
    {
      *(void *)&__src[v12] = *(void *)&a2[v12];
      v12 += 8;
    }
    while (&a2[v12] != a3);
    if (v12)
    {
      uint64_t v13 = &__src[v12];
      uint64_t v14 = a3 - 8;
      while (v10 != v11)
      {
        MD5_CTX __dst = (char *)(*a4)(*((void *)v13 - 1), *((void *)v10 - 1));
        if (__dst) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = v13;
        }
        if (__dst) {
          v10 -= 8;
        }
        else {
          v13 -= 8;
        }
        *(void *)uint64_t v14 = *((void *)v15 - 1);
        v14 -= 8;
        if (v13 == __src) {
          return __dst;
        }
      }
      uint64_t v20 = 0;
      do
      {
        *(void *)&v14[v20] = *(void *)&v13[v20 - 8];
        v20 -= 8;
      }
      while (&v13[v20] != __src);
    }
  }
  return __dst;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<XMP_Node **>,std::__wrap_iter<XMP_Node **>>(char *__src, char *a2, char *a3)
{
  BOOL v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v6 = *(void *)__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      BOOL v4 = &__src[v7];
      *(void *)BOOL v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v8 = *((void *)a3 - 1);
      BOOL v4 = __src + 8;
      size_t v9 = a3 - 8 - __src;
      if (a3 - 8 != __src) {
        memmove(__src + 8, __src, v9);
      }
      *(void *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<XMP_Node **>>(__src, a2, a3);
    }
  }
  return v4;
}

void *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<XMP_Node **>>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      BOOL v4 = a1 + 1;
      int v5 = a2 + 1;
      do
      {
        uint64_t v6 = *(v4 - 1);
        *(v4 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = *(v5 - 1);
        *(v5 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v6;
        if (v4 == a2) {
          break;
        }
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    uint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[v9];
      do
      {
        uint64_t v13 = *--v11;
        uint64_t v12 = v13;
        uint64_t v14 = &v11[v3];
        uint64_t v15 = v11;
        do
        {
          unint64_t v16 = v14;
          *uint64_t v15 = *v14;
          uint64_t v17 = &v14[v3];
          BOOL v18 = __OFSUB__(v3, a3 - v14);
          uint64_t v20 = v3 - (a3 - v14);
          char v19 = (v20 < 0) ^ v18;
          uint64_t v14 = &a1[v20];
          if (v19) {
            uint64_t v14 = v17;
          }
          uint64_t v15 = v16;
        }
        while (v14 != v11);
        *unint64_t v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v10 = (char *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **,IIOTag **>(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,IIOTag **,BOOL (*&)(IIOTag *,IIOTag *)>((uint64_t *)v11, (uint64_t *)a2, a3);
      uint64_t v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    char v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,IIOTag **,BOOL (*&)(IIOTag *,IIOTag *)>((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **>(v11, v19, (unsigned int (**)(void))a3);
    uint64_t v11 = (char *)(v19 + 1);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **>(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>((uint64_t)v11, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **>(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          unint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

void XMPMeta::DumpObject()
{
  __assert_rtn("DumpObject", "XMPMeta.cpp", 1163, "outProc != 0");
}

void XMPMeta::CountArrayItems()
{
  __assert_rtn("CountArrayItems", "XMPMeta.cpp", 1241, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta::Clone()
{
  __assert_rtn("Clone", "XMPMeta.cpp", 1366, "this->tree.parent == 0");
}

void XMPMeta::SetErrorCallback()
{
  __assert_rtn("SetErrorCallback", "XMPMeta.cpp", 1477, "wrapperProc != 0");
}

void XMPMeta::ErrorCallbackInfo::CanNotify()
{
  __assert_rtn("CanNotify", "XMPMeta.cpp", 1509, "(this->clientProc == 0) || (this->wrapperProc != 0)");
}

void *AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointer(AdobeXMPCore_Int::INodeIterator_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x634E6F6465497420)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634E6F6465497420, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 136));
    }
  }
  else
  {
    if (a4)
    {
      char v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634E6F6465497420, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_18888BEAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointer(AdobeXMPCore_Int::INodeIterator_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointerInternal((AdobeXMPCore_Int::INodeIterator_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::getInterfacePointer(AdobeXMPCore_Int::INodeIterator_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INodeIterator_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INodeIterator_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INodeIterator_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INodeIterator_I::getInterfacePointer(AdobeXMPCore_Int::INodeIterator_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INodeIterator_I::getInterfacePointer((AdobeXMPCore_Int::INodeIterator_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::getNode(AdobeXMPCore_Int::INodeIterator_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INodeIterator_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 136), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INodeIterator_v1::GetNode, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INodeIterator_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888C288(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888C26CLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888C404(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INodeIterator_v1::GetNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::getNodeType(AdobeXMPCore_Int::INodeIterator_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INodeIterator_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(a2, (uint64_t)this + *(void *)(*(void *)this - 136), 0, (uint64_t (*)(void *))AdobeXMPCore::INodeIterator_v1::GetNodeType, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INodeIterator_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCore::INodeIterator_v1::GetNodeType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::next(AdobeXMPCore_Int::INodeIterator_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INodeIterator_v1,AdobeXMPCore::INodeIterator_v1*,AdobeXMPCore::INodeIterator_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 136), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INodeIterator_v1::Next, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INodeIterator_v1,AdobeXMPCore::INodeIterator_v1*,AdobeXMPCore::INodeIterator_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x634E6F6465497420, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888C7C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888C7A8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888C940(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INodeIterator_v1::Next(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void *AdobeXMPCore_Int::INode_I::GetInterfacePointer(AdobeXMPCore_Int::INode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x634E6F6465202020)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634E6F6465202020, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 544));
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634E6F6465202020, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_18888CA88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::INode_I::GetInterfacePointer(AdobeXMPCore_Int::INode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::INode_I::getInterfacePointer(AdobeXMPCore_Int::INode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::INode_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 29, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INode_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::INode_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 536))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getInterfacePointer(AdobeXMPCore_Int::INode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INode_I::getInterfacePointer((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::getParent(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::GetParent, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888CE70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888CE54);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888CFEC(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::GetParent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getParent(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getParent((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 336)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::getParentNodeType(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::GetParentNodeType, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCore::INode_v1::GetParentNodeType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getParentNodeType(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getParentNodeType((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 328)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::setName(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,char const*,unsigned long long>(a4, (uint64_t)this + *(void *)(*(void *)this - 544), (uint64_t (*)(void *, uint64_t, uint64_t))AdobeXMPCore::INode_v1::SetName, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 67, (uint64_t)a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,char const*,unsigned long long>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a3);
  }
  return v8(v9, a7, a8);
}

uint64_t AdobeXMPCore::INode_v1::SetName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::setName(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INode_I::setName((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 344)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::getName(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::GetName, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888D5DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888D5C0);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888D758(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::GetName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getName(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getName((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 352)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::setNameSpace(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,char const*,unsigned long long>(a4, (uint64_t)a1 + *(void *)(*a1 - 544), (uint64_t (*)(void *, uint64_t, uint64_t))AdobeXMPCore::INode_v1::SetNameSpace, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 77, a2, a3);
}

uint64_t AdobeXMPCore::INode_v1::SetNameSpace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 80))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::setNameSpace(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  return AdobeXMPCore_Int::INode_I::setNameSpace((void *)((char *)a1 + *(void *)(*a1 - 360)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::getNameSpace(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)a1 + *(void *)(*a1 - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::GetNameSpace, 0);
}

uint64_t AdobeXMPCore::INode_v1::GetNameSpace(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getNameSpace(void *a1, void *a2)
{
  return AdobeXMPCore_Int::INode_I::getNameSpace((void *)((char *)a1 + *(void *)(*a1 - 368)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::getPath(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IPath_v1 *,AdobeXMPCore::IPath_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::GetPath, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IPath_v1 *,AdobeXMPCore::IPath_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x6350617468202020, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888DACC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888DAB0);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888DC48(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::GetPath(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getPath(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getPath((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 376)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::qualifiersIterator(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INodeIterator_v1 *,AdobeXMPCore::INodeIterator_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::QualifiersIterator, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INodeIterator_v1 *,AdobeXMPCore::INodeIterator_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x634E6F6465497420, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888DE68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888DE4CLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888DFE4(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::QualifiersIterator(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::qualifiersIterator(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::qualifiersIterator((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 384)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::getQualifierNodeType(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(void *)(*(void *)this - 544), 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::INode_v1::GetQualifierNodeType, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 98, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,char const*,unsigned long long,char const*,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a4;
  *a1 = 0;
  int v12 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a4);
  }
  return v11(v12, a8, a9, a10, a11);
}

uint64_t AdobeXMPCore::INode_v1::GetQualifierNodeType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getQualifierNodeType(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::INode_I::getQualifierNodeType((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 392)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::INode_I::getQualifier(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::INode_v1::GetQualifier, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 105, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore::INode_v1::GetQualifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v10)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  std::__shared_weak_count *v16;

  uint64_t v10 = a3;
  *a1 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v11 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v10 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + a3);
  }
  v10(&v15, v11, a7, a8, a9, a10);
  if (v15)
  {
    int v12 = (*(uint64_t (**)(char *))(*(void *)&v15[*(void *)(*(void *)v15 - 56)] + 16))(&v15[*(void *)(*(void *)v15 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
    uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v15[*(void *)(*(void *)v15 - 64)]
                                                              + 16))(&v15[*(void *)(*(void *)v15 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return v13;
}

void sub_18888E45C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888E440);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888E5D8(_Unwind_Exception *a1)
{
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getQualifier(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::INode_I::getQualifier((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 400)), a2, a3, a4, a5, a6);
}

void AdobeXMPCore_Int::INode_I::insertQualifier(AdobeXMPCore_Int::INode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 544);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v6);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (uint64_t (*)(void *, uint64_t))AdobeXMPCore::INode_v1::InsertQualifier, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 109, (uint64_t)&v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_18888E6A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  int64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(uint64_t (**)(void *, uint64_t))(*v7 + a3);
  }
  return a3(v7, a7);
}

uint64_t AdobeXMPCore::INode_v1::InsertQualifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 136))();
}

void virtual thunk to'AdobeXMPCore_Int::INode_I::insertQualifier(AdobeXMPCore_Int::INode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
}

uint64_t AdobeXMPCore_Int::INode_I::replaceQualifier(AdobeXMPCore_Int::INode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 544);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v8);
  uint64_t v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::INode_v1::ReplaceQualifier, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 114, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888E8DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  int64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18888EA64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888EA48);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888EBE0(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::ReplaceQualifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::replaceQualifier(AdobeXMPCore_Int::INode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::INode_I::replaceQualifier((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 416)), a2, a3);
}

uint64_t AdobeXMPCore_Int::INode_I::removeQualifier(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)a1 + *(void *)(*a1 - 544), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::INode_v1::RemoveQualifier, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 119, a2, a3, a4, a5);
}

uint64_t AdobeXMPCore::INode_v1::RemoveQualifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::removeQualifier(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return AdobeXMPCore_Int::INode_I::removeQualifier((void *)((char *)a1 + *(void *)(*a1 - 424)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::INode_I::getNodeType(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(a2, (uint64_t)a1 + *(void *)(*a1 - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::GetNodeType, 0);
}

uint64_t AdobeXMPCore::INode_v1::GetNodeType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getNodeType(void *a1, void *a2)
{
  return AdobeXMPCore_Int::INode_I::getNodeType((void *)((char *)a1 + *(void *)(*a1 - 432)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::isArrayItem(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::IsArrayItem, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCore::INode_v1::IsArrayItem(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::isArrayItem(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::isArrayItem((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 440)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::isQualifierNode(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(void *)(*a1 - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::IsQualifierNode, 0);
}

uint64_t AdobeXMPCore::INode_v1::IsQualifierNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::isQualifierNode(void *a1, void *a2)
{
  return AdobeXMPCore_Int::INode_I::isQualifierNode((void *)((char *)a1 + *(void *)(*a1 - 448)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::getIndex(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned long long,unsigned long long>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::GetIndex, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned long long,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCore::INode_v1::GetIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::getIndex(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getIndex((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 456)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::hasQualifiers(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(void *)(*a1 - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::HasQualifiers, 0);
}

uint64_t AdobeXMPCore::INode_v1::HasQualifiers(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::hasQualifiers(void *a1, void *a2)
{
  return AdobeXMPCore_Int::INode_I::hasQualifiers((void *)((char *)a1 + *(void *)(*a1 - 464)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::hasContent(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(void *)(*a1 - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::HasContent, 0);
}

uint64_t AdobeXMPCore::INode_v1::HasContent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::hasContent(void *a1, void *a2)
{
  return AdobeXMPCore_Int::INode_I::hasContent((void *)((char *)a1 + *(void *)(*a1 - 472)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::isEmpty(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(void *)(*a1 - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::IsEmpty, 0);
}

uint64_t AdobeXMPCore::INode_v1::IsEmpty(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::isEmpty(void *a1, void *a2)
{
  return AdobeXMPCore_Int::INode_I::isEmpty((void *)((char *)a1 + *(void *)(*a1 - 480)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::hasChanged(void *a1, void *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(void *)(*a1 - 544), 0, (uint64_t (*)(void *))AdobeXMPCore::INode_v1::HasChanged, 0);
}

uint64_t AdobeXMPCore::INode_v1::HasChanged(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::hasChanged(void *a1, void *a2)
{
  return AdobeXMPCore_Int::INode_I::hasChanged((void *)((char *)a1 + *(void *)(*a1 - 488)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::clear(AdobeXMPCore_Int::INode_I *this, int a2, int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,BOOL,BOOL>(a4, (uint64_t)this + *(void *)(*(void *)this - 544), (uint64_t (*)(void *, uint64_t, uint64_t))AdobeXMPCore::INode_v1::Clear, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 155, a2 != 0, a3 != 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,BOOL,BOOL>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a3);
  }
  return v8(v9, a7, a8);
}

uint64_t AdobeXMPCore::INode_v1::Clear(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 224))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::clear(AdobeXMPCore_Int::INode_I *this, int a2, int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INode_I::clear((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 496)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::clone(AdobeXMPCore_Int::INode_I *this, int a2, int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,BOOL,BOOL>(a4, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCore::INode_v1::Clone, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 160, a2 != 0, a3 != 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,BOOL,BOOL>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  uint64_t v8 = a3;
  *a1 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_18888F8A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888F884);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888FA1C(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::Clone(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 264))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::clone(AdobeXMPCore_Int::INode_I *this, int a2, int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INode_I::clone((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 504)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::convertToSimpleNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::ISimpleNode_v1 *,AdobeXMPCore::ISimpleNode_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::ConvertToSimpleNode, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::ISimpleNode_v1 *,AdobeXMPCore::ISimpleNode_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x63536D6C4E6F6465, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888FC44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888FC28);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18888FDC0(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::ConvertToSimpleNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 232))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::convertToSimpleNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::convertToSimpleNode((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 512)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::convertToStructureNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IStructureNode_v1 *,AdobeXMPCore::IStructureNode_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::ConvertToStructureNode, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IStructureNode_v1 *,AdobeXMPCore::IStructureNode_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x635374724E6F6465, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18888FFE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18888FFC4);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18889015C(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::ConvertToStructureNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 240))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::convertToStructureNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::convertToStructureNode((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 520)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::convertToArrayNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IArrayNode_v1 *,AdobeXMPCore::IArrayNode_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::ConvertToArrayNode, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IArrayNode_v1 *,AdobeXMPCore::IArrayNode_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x634172724E6F6465, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_18889037C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x188890360);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888904F8(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::ConvertToArrayNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 248))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::convertToArrayNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::convertToArrayNode((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 528)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::convertToMetadata(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IMetadata_v1 *,AdobeXMPCore::IMetadata_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 544), (void (*)(char **__return_ptr, void *))AdobeXMPCore::INode_v1::ConvertToMetadata, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IMetadata_v1 *,AdobeXMPCore::IMetadata_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  BOOL v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x634D657461646174, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_188890718(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x1888906FCLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_188890894(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::INode_v1::ConvertToMetadata(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 256))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::INode_I::convertToMetadata(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::convertToMetadata((AdobeXMPCore_Int::INode_I *)((char *)this + *(void *)(*(void *)this - 536)), a2);
}

std::string *SplitNameAndValue(uint64_t a1, uint64_t a2, std::string *a3)
{
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    BOOL v4 = (unsigned char *)a1;
  }
  else {
    BOOL v4 = *(unsigned char **)a1;
  }
  if (v3 >= 0) {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (*v4 != 91 || (uint64_t v6 = &v4[v5 - 2], v7 = *(unsigned __int8 *)v6, v4[v5 - 1] != 93)) {
    SplitNameAndValue();
  }
  if (v5 < 6 || v7 != 34 && v7 != 39) {
    SplitNameAndValue();
  }
  uint64_t v9 = 0;
  if (v4[1] == 63) {
    uint64_t v10 = v4 + 2;
  }
  else {
    uint64_t v10 = v4 + 1;
  }
  do
    int v11 = v10[++v9];
  while (v11 != 61);
  MEMORY[0x18C11BE20](a2, v10, v9);
  if (v10[v9 + 1] != v7) {
    SplitNameAndValue();
  }
  int v12 = &v10[v9 + 2];
  std::string::erase(a3, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::reserve(a3, &v4[v5] - v10 - v9 - 4);
  for (unsigned int i = v12; i < v6; ++i)
  {
    if (*(unsigned __int8 *)i == v7 && *((unsigned __int8 *)i + 1) == v7)
    {
      std::string::append(a3, v12, i + 1 - v12);
      int v12 = i + 2;
      ++i;
    }
  }

  return std::string::append(a3, v12, i - v12);
}

uint64_t DeleteSubtree(char *__dst)
{
  uint64_t v2 = *(void *)__dst;
  uint64_t v3 = *(void *)(*(void *)__dst + 64);
  if ((*(unsigned char *)(*(void *)__dst + 8) & 0x20) != 0)
  {
    uint64_t v6 = *(char **)(v3 + 104);
    int64_t v7 = v6 - (__dst + 8);
    if (v6 != __dst + 8) {
      memmove(__dst, __dst + 8, v6 - (__dst + 8));
    }
    *(void *)(v3 + 104) = &__dst[v7];
    int v8 = *(_DWORD *)(v3 + 8);
    if ((v8 & 0x10) == 0) {
      DeleteSubtree();
    }
    if (*(char **)(v3 + 96) == &__dst[v7])
    {
      v8 ^= 0x10u;
      *(_DWORD *)(v3 + 8) = v8;
    }
    uint64_t v9 = (void *)(v2 + 16);
    int v10 = *(char *)(v2 + 39);
    if (v10 < 0)
    {
      if (*(void *)(v2 + 24) != 8) {
        goto LABEL_22;
      }
      uint64_t v9 = (void *)*v9;
    }
    else if (v10 != 8)
    {
      goto LABEL_22;
    }
    if (*v9 == 0x676E616C3A6C6D78)
    {
      if ((v8 & 0x40) == 0) {
        DeleteSubtree();
      }
      int v11 = v8 ^ 0x40;
    }
    else
    {
      if (*v9 != 0x657079743A666472) {
        goto LABEL_22;
      }
      if ((v8 & 0x80) == 0) {
        DeleteSubtree();
      }
      int v11 = v8 ^ 0x80;
    }
    *(_DWORD *)(v3 + 8) = v11;
  }
  else
  {
    BOOL v4 = *(char **)(v3 + 80);
    int64_t v5 = v4 - (__dst + 8);
    if (v4 != __dst + 8) {
      memmove(__dst, __dst + 8, v4 - (__dst + 8));
    }
    *(void *)(v3 + 80) = &__dst[v5];
  }
LABEL_22:
  int v12 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v12(v2);
}

uint64_t LookupFieldSelector(const XMP_Node *a1, const char *__s, const char *a3)
{
  uint64_t v3 = *((void *)a1 + 9);
  uint64_t v4 = *((void *)a1 + 10) - v3;
  if (v4)
  {
    uint64_t v8 = 0;
    uint64_t v20 = v4 >> 3;
    while (1)
    {
      uint64_t v9 = *(void *)(v3 + 8 * v8);
      if (*(const XMP_Node **)(v9 + 64) != a1) {
        LookupFieldSelector();
      }
      if ((*(unsigned char *)(v9 + 9) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 102;
        exception[1] = "Field selector must be used on array of struct";
        *((unsigned char *)exception + 16) = 0;
      }
      int v10 = *(uint64_t **)(v9 + 72);
      uint64_t v11 = *(void *)(v9 + 80) - (void)v10;
      if (v11) {
        break;
      }
LABEL_25:
      if (++v8 == v20) {
        return 0xFFFFFFFFLL;
      }
    }
    uint64_t v12 = v11 >> 3;
    while (1)
    {
      uint64_t v13 = *v10;
      if (*(void *)(*v10 + 64) != v9) {
        LookupFieldSelector();
      }
      uint64_t v14 = (void *)(v13 + 16);
      size_t v15 = strlen(__s);
      if (*(char *)(v13 + 39) < 0)
      {
        if (v15 != *(void *)(v13 + 24)) {
          goto LABEL_24;
        }
        if (v15 == -1) {
LABEL_30:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        uint64_t v14 = (void *)*v14;
      }
      else
      {
        if (v15 != *(unsigned __int8 *)(v13 + 39)) {
          goto LABEL_24;
        }
        if (v15 == -1) {
          goto LABEL_30;
        }
      }
      if (!memcmp(v14, __s, v15))
      {
        unint64_t v16 = (void *)(v13 + 40);
        size_t v17 = strlen(a3);
        if (*(char *)(v13 + 63) < 0)
        {
          if (v17 == *(void *)(v13 + 48))
          {
            if (v17 == -1) {
LABEL_31:
            }
              std::string::__throw_out_of_range[abi:ne180100]();
            unint64_t v16 = (void *)*v16;
LABEL_23:
            if (!memcmp(v16, a3, v17)) {
              return v8;
            }
          }
        }
        else if (v17 == *(unsigned __int8 *)(v13 + 63))
        {
          if (v17 == -1) {
            goto LABEL_31;
          }
          goto LABEL_23;
        }
      }
LABEL_24:
      ++v10;
      if (!--v12) {
        goto LABEL_25;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t LookupLangItem(uint64_t a1, unsigned __int8 **a2)
{
  if ((*(unsigned char *)(a1 + 9) & 2) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Language item must be used on array";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80) - v3;
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 >> 3;
    char v7 = *((unsigned char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v8 = a2[1];
    }
    if (v7 >= 0) {
      uint64_t v9 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    do
    {
      int v10 = *(void **)(v3 + 8 * v5);
      if (v10[8] != a1) {
        LookupLangItem();
      }
      uint64_t v11 = (uint64_t *)v10[12];
      if (v11 != (uint64_t *)v10[13])
      {
        uint64_t v12 = *v11;
        uint64_t v13 = (void *)(v12 + 16);
        int v14 = *(char *)(v12 + 39);
        if (v14 < 0)
        {
          if (*(void *)(v12 + 24) == 8)
          {
            uint64_t v13 = (void *)*v13;
LABEL_16:
            if (*v13 == 0x676E616C3A6C6D78)
            {
              uint64_t v15 = *(unsigned __int8 *)(v12 + 63);
              size_t v16 = *(void *)(v12 + 48);
              size_t v17 = (v15 & 0x80u) == 0
                  ? (unsigned __int8 *)*(unsigned __int8 *)(v12 + 63)
                  : *(unsigned __int8 **)(v12 + 48);
              if (v17 == v8)
              {
                uint64_t v18 = (const void **)(v12 + 40);
                if ((v15 & 0x80) != 0)
                {
                  if (!memcmp(*v18, v9, v16)) {
                    return v5;
                  }
                }
                else
                {
                  if (!v15) {
                    return v5;
                  }
                  for (unsigned int i = v9; *(unsigned __int8 *)v18 == *i; ++i)
                  {
                    uint64_t v18 = (const void **)((char *)v18 + 1);
                    if (!--v15) {
                      return v5;
                    }
                  }
                }
              }
            }
          }
        }
        else if (v14 == 8)
        {
          goto LABEL_16;
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return 0xFFFFFFFFLL;
}

void CloneOffspring(const XMP_Node *a1, void **a2, int a3)
{
  uint64_t v12 = *((void *)a1 + 9);
  uint64_t v13 = *((void *)a1 + 10);
  uint64_t v6 = *((void *)a1 + 13) - *((void *)a1 + 12);
  if (v6)
  {
    uint64_t v7 = v6 >> 3;
    std::vector<_MPEntry *>::reserve(a2 + 12, v6 >> 3);
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*((void *)a1 + 12) + 8 * v8);
      if (!a3) {
        goto LABEL_9;
      }
      if (*(char *)(v9 + 63) < 0)
      {
        if (*(void *)(v9 + 48)) {
          goto LABEL_9;
        }
      }
      else if (*(unsigned char *)(v9 + 63))
      {
        goto LABEL_9;
      }
      if (*(void *)(v9 + 72) != *(void *)(v9 + 80)) {
LABEL_9:
      }
        operator new();
      ++v8;
    }
    while (v8 != v7);
  }
  if (v13 != v12)
  {
    std::vector<_MPEntry *>::reserve(a2 + 9, (v13 - v12) >> 3);
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*((void *)a1 + 9) + 8 * v10);
      if (!a3) {
        goto LABEL_19;
      }
      if (*(char *)(v11 + 63) < 0)
      {
        if (*(void *)(v11 + 48)) {
          goto LABEL_19;
        }
      }
      else if (*(unsigned char *)(v11 + 63))
      {
        goto LABEL_19;
      }
      if (*(void *)(v11 + 72) != *(void *)(v11 + 80)) {
LABEL_19:
      }
        operator new();
      ++v10;
    }
    while (v10 != (v13 - v12) >> 3);
  }
}

void sub_1888912D0(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void CloneSubtree(const XMP_Node *a1, XMP_Node *a2)
{
  int v3 = *((_DWORD *)a1 + 2);
  if (*((void *)a2 + 8))
  {
    if (v3 < 0) {
      CloneSubtree();
    }
    if (*((unsigned char *)a2 + 9))
    {
      uint64_t v4 = (char *)a1 + 16;
      if (*((char *)a1 + 39) < 0) {
        uint64_t v4 = *(char **)v4;
      }
      if (FindChildNode((uint64_t)a2, v4, 0, 0)) {
        CloneSubtree();
      }
    }
  }
  else
  {
    if ((v3 & 0x80000000) == 0) {
      CloneSubtree();
    }
    uint64_t v5 = (char *)a1 + 16;
    if (*((char *)a1 + 39) < 0) {
      uint64_t v5 = *(char **)v5;
    }
    if (FindSchemaNode(a2, v5, 0, 0)) {
      CloneSubtree();
    }
  }
  operator new();
}

void sub_1888914F8(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void *DeleteEmptySchema(void *result)
{
  if ((result[1] & 0x80000000) != 0)
  {
    uint64_t v1 = (uint64_t)result;
    if (result[9] == result[10])
    {
      uint64_t v2 = result[8];
      uint64_t v4 = *(void ***)(v2 + 72);
      int v3 = *(void ***)(v2 + 80);
      uint64_t v5 = (char *)v3 - (char *)v4;
      if (v3 == v4) {
LABEL_10:
      }
        DeleteEmptySchema();
      uint64_t v6 = v5 >> 3;
      if ((unint64_t)(v5 >> 3) <= 1) {
        uint64_t v6 = 1;
      }
      size_t v7 = v5 - 8;
      while (*v4 != result)
      {
        ++v4;
        v7 -= 8;
        if (!--v6) {
          goto LABEL_10;
        }
      }
      if (v4 + 1 != v3) {
        BOOL result = memmove(v4, v4 + 1, v7);
      }
      *(void *)(v2 + 80) = (char *)v4 + (v7 & 0xFFFFFFFFFFFFFFF8);
      if (v1)
      {
        uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
        return (void *)v8(v1);
      }
    }
  }
  return result;
}

void SplitNameAndValue()
{
  __assert_rtn("SplitNameAndValue", "XMPCore_Impl.cpp", 302, "(selStep.size() >= 6) && ((quote == '\"') || (quote == '\\''))");
}

{
  __assert_rtn("SplitNameAndValue", "XMPCore_Impl.cpp", 314, "*(partEnd+1) == quote");
}

{
  __assert_rtn("SplitNameAndValue", "XMPCore_Impl.cpp", 301, "(*partBegin == '[') && (*(valueEnd+1) == ']')");
}

void DeleteSubtree()
{
}

{
  __assert_rtn("DeleteSubtree", "XMPCore_Impl.cpp", 525, "rootParent->options & kXMP_PropHasLang");
}

{
  __assert_rtn("DeleteSubtree", "XMPCore_Impl.cpp", 528, "rootParent->options & kXMP_PropHasType");
}

void ExpandXPath()
{
  __assert_rtn("ExpandXPath", "XMPCore_Impl.cpp", 665, "(schemaNS != 0) && (propPath != 0) && (*propPath != 0) && (expandedXPath != 0)");
}

void FindSchemaNode()
{
  __assert_rtn("FindSchemaNode", "XMPCore_Impl.cpp", 876, "(ptrPos == 0) || (schemaNode == 0) || (schemaNode == **ptrPos)");
}

{
  __assert_rtn("FindSchemaNode", "XMPCore_Impl.cpp", 838, "currSchema->parent == xmpTree");
}

{
  __assert_rtn("FindSchemaNode", "XMPCore_Impl.cpp", 834, "xmpTree->parent == 0");
}

void FindChildNode()
{
  __assert_rtn("FindChildNode", "XMPCore_Impl.cpp", 927, "(ptrPos == 0) || (childNode == 0) || (childNode == **ptrPos)");
}

{
  __assert_rtn("FindChildNode", "XMPCore_Impl.cpp", 913, "currChild->parent == parent");
}

void FindQualifierNode()
{
  __assert_rtn("FindQualifierNode", "XMPCore_Impl.cpp", 951, "*qualName != '?'");
}

{
  __assert_rtn("FindQualifierNode", "XMPCore_Impl.cpp", 991, "(qualNode != 0) || (! createNodes)");
}

{
  __assert_rtn("FindQualifierNode", "XMPCore_Impl.cpp", 990, "(ptrPos == 0) || (qualNode == 0) || (qualNode == **ptrPos)");
}

{
  __assert_rtn("FindQualifierNode", "XMPCore_Impl.cpp", 955, "currQual->parent == parent");
}

void LookupFieldSelector()
{
  __assert_rtn("LookupFieldSelector", "XMPCore_Impl.cpp", 1021, "currField->parent == currItem");
}

{
  __assert_rtn("LookupFieldSelector", "XMPCore_Impl.cpp", 1012, "currItem->parent == arrayNode");
}

void LookupLangItem()
{
  __assert_rtn("LookupLangItem", "XMPCore_Impl.cpp", 1052, "currItem->parent == arrayNode");
}

void FollowXPathStep()
{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 404, "(kXMP_StructFieldStep <= stepKind) && (stepKind <= kXMP_FieldSelectorStep)");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 449, "parentNode->options & kXMP_PropArrayIsAltText");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 476, "(ptrPos == 0) || (nextNode == 0) || (nextNode == **ptrPos)");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 477, "(nextNode != 0) || (! createNodes)");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 450, "(stepNum == 2) && (nextStep.step == \"[?xml:lang=\\\"x-default\\\"]\")");
}

{
  __assert_rtn("FindIndexedItem", "XMPCore_Impl.cpp", 259, "('0' <= indexStep[chNum]) && (indexStep[chNum] <= '9')");
}

{
  __assert_rtn("FindIndexedItem", "XMPCore_Impl.cpp", 256, "(chLim >= 2) && (indexStep[0] == '[') && (indexStep[chLim] == ']')");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 413, "*qualStep == '?'");
}

void CloneSubtree()
{
}

{
  __assert_rtn("CloneSubtree", "XMPCore_Impl.cpp", 1247, "FindSchemaNode(const_cast<XMP_Node*>(cloneParent), origRoot->name.c_str(), false, 0) == 0");
}

{
  __assert_rtn("CloneSubtree", "XMPCore_Impl.cpp", 1251, "::FindChildNode(const_cast<XMP_Node*>(cloneParent), origRoot->name.c_str(), false, 0) == 0");
}

{
  __assert_rtn("CloneSubtree", "XMPCore_Impl.cpp", 1249, "! (origRoot->options & ((XMP_OptionBits)0x80000000UL))");
}

void DeleteEmptySchema()
{
}

void NormalizeLangArray()
{
  __assert_rtn("NormalizeLangArray", "XMPCore_Impl.cpp", 1423, "(((array->options) & kXMP_PropArrayIsAltText) != 0)");
}

void DetectAltText()
{
  __assert_rtn("DetectAltText", "XMPCore_Impl.cpp", 1466, "(((xmpParent->options) & kXMP_PropArrayIsAlternate) != 0)");
}

void MoveExplicitAliases(XMP_Node *a1, char a2, XMPMeta::ErrorCallbackInfo *a3)
{
  *((_DWORD *)a1 + 2) ^= 0x20000u;
  uint64_t v3 = *((void *)a1 + 9);
  if (*((void *)a1 + 10) == v3) {
    return;
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = *(XMP_Node **)(v3 + 8 * v5);
    uint64_t v7 = *((void *)v6 + 9);
    if (*((void *)v6 + 10) == v7) {
      goto LABEL_56;
    }
    unint64_t v58 = v5;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      int v10 = *(_DWORD *)(v9 + 8);
      if ((v10 & 0x10000) == 0)
      {
        ++v8;
        goto LABEL_53;
      }
      *(_DWORD *)(v9 + 8) = v10 ^ 0x10000;
      uint64_t v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::find<std::string>(sRegisteredAliasMap, (const void **)(v9 + 16));
      if (sRegisteredAliasMap + 8 == v11) {
        MoveExplicitAliases();
      }
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)(v11 + 56);
      if (*(char *)(v13 + 23) < 0) {
        int v14 = *(char **)v13;
      }
      else {
        int v14 = *(char **)(v11 + 56);
      }
      int v15 = *(_DWORD *)(v13 + 56);
      uint64_t SchemaNode = FindSchemaNode(a1, v14, 1, 0);
      size_t v17 = (void *)SchemaNode;
      int v18 = *(_DWORD *)(SchemaNode + 8);
      if ((v18 & 0x8000) != 0) {
        *(_DWORD *)(SchemaNode + 8) = v18 ^ 0x8000;
      }
      uint64_t v19 = *(void *)(v12 + 56);
      uint64_t v20 = (char *)(v19 + 32);
      if (*(char *)(v19 + 55) < 0) {
        uint64_t v20 = *(char **)v20;
      }
      Childuint64_t Node = FindChildNode(SchemaNode, v20, 0, 0);
      uint64_t v22 = *(void *)(v12 + 56);
      uint64_t v23 = *(void *)(v12 + 64) - v22;
      if (ChildNode)
      {
        unint64_t v24 = (XMP_Node *)ChildNode;
        if (v23 == 64)
        {
          if ((a2 & 4) != 0)
          {
            uint64_t v25 = v9;
            int v26 = v24;
            goto LABEL_33;
          }
        }
        else
        {
          if ((v15 & 0x1000) != 0)
          {
            int v36 = LookupLangItem(ChildNode, (unsigned __int8 **)xdefaultName);
            if (v36 == -1) {
              goto LABEL_37;
            }
            unint64_t v35 = (XMP_Node **)(*((void *)v24 + 9) + 8 * v36);
          }
          else
          {
            unint64_t v35 = *(XMP_Node ***)(ChildNode + 72);
            if (v35 == *(XMP_Node ***)(ChildNode + 80)) {
              goto LABEL_37;
            }
          }
          int v26 = *v35;
          if (!*v35)
          {
LABEL_37:
            TransplantArrayItemAlias(v6, v8, v24, a3);
            goto LABEL_53;
          }
          if ((a2 & 4) != 0)
          {
            uint64_t v25 = v9;
LABEL_33:
            CompareAliasedSubtrees(v25, v26, a3, 1);
          }
        }
        uint64_t v37 = *((void *)v6 + 9);
        uint64_t v38 = *((void *)v6 + 10);
        uint64_t v39 = v37 + 8 * v8;
        uint64_t v40 = v38 - (v39 + 8);
        if (v38 != v39 + 8) {
          memmove((void *)(v37 + 8 * v8), (const void *)(v39 + 8), v38 - (v39 + 8));
        }
        *((void *)v6 + 10) = v39 + v40;
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        goto LABEL_53;
      }
      if (v23 != 64) {
        operator new();
      }
      uint64_t v27 = *((void *)v6 + 9);
      uint64_t v28 = (char *)*((void *)v6 + 10);
      unint64_t v29 = (void *)(v27 + 8 * v8);
      uint64_t v30 = *v29;
      int64_t v31 = v28 - (char *)(v29 + 1);
      if (v28 != (char *)(v29 + 1)) {
        memmove((void *)(v27 + 8 * v8), v29 + 1, v28 - (char *)(v29 + 1));
      }
      *((void *)v6 + 10) = (char *)v29 + v31;
      std::string::operator=((std::string *)(v30 + 16), (const std::string *)(v22 + 32));
      *(void *)(v30 + 64) = v17;
      unint64_t v32 = v17[11];
      uint64_t v33 = (void *)v17[10];
      if ((unint64_t)v33 >= v32)
      {
        uint64_t v41 = v17[9];
        uint64_t v42 = ((uint64_t)v33 - v41) >> 3;
        if ((unint64_t)(v42 + 1) >> 61) {
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v43 = v32 - v41;
        uint64_t v44 = v43 >> 2;
        if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
          uint64_t v44 = v42 + 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45) {
          uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(v17 + 11), v45);
        }
        else {
          uint64_t v46 = 0;
        }
        uint64_t v47 = &v46[8 * v42];
        *(void *)uint64_t v47 = v30;
        int v34 = v47 + 8;
        uint64_t v49 = (char *)v17[9];
        BOOL v48 = (char *)v17[10];
        if (v48 != v49)
        {
          do
          {
            uint64_t v50 = *((void *)v48 - 1);
            v48 -= 8;
            *((void *)v47 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v50;
            v47 -= 8;
          }
          while (v48 != v49);
          BOOL v48 = (char *)v17[9];
        }
        v17[9] = v47;
        v17[10] = v34;
        v17[11] = &v46[8 * v45];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *uint64_t v33 = v30;
        int v34 = v33 + 1;
      }
      v17[10] = v34;
LABEL_53:
      uint64_t v7 = *((void *)v6 + 9);
      uint64_t v51 = *((void *)v6 + 10);
    }
    while (v8 < (v51 - v7) >> 3);
    unint64_t v5 = v58;
    if (v51 != v7)
    {
      unint64_t v5 = v58 + 1;
      uint64_t v52 = *((void *)a1 + 10);
      goto LABEL_61;
    }
LABEL_56:
    uint64_t v53 = *((void *)a1 + 9);
    uint64_t v54 = *(void *)(v53 + 8 * v5);
    if (v54)
    {
      (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
      uint64_t v53 = *((void *)a1 + 9);
    }
    uint64_t v55 = v53 + 8 * v5;
    uint64_t v56 = *((void *)a1 + 10);
    uint64_t v57 = v56 - (v55 + 8);
    if (v56 != v55 + 8) {
      memmove((void *)v55, (const void *)(v55 + 8), v56 - (v55 + 8));
    }
    uint64_t v52 = v55 + v57;
    *((void *)a1 + 10) = v55 + v57;
LABEL_61:
    uint64_t v3 = *((void *)a1 + 9);
  }
  while (v5 < (v52 - v3) >> 3);
}

void sub_1888921BC(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void TransplantArrayItemAlias(XMP_Node *a1, uint64_t a2, XMP_Node *a3, XMPMeta::ErrorCallbackInfo *a4)
{
  uint64_t v6 = *((void *)a1 + 9);
  uint64_t v7 = *(void *)(v6 + 8 * a2);
  uint64_t v25 = v7;
  if ((*((unsigned char *)a3 + 9) & 0x10) != 0)
  {
    int v8 = *(_DWORD *)(v7 + 8);
    if ((v8 & 0x40) != 0)
    {
      v24[0] = 203;
      v24[1] = "Alias to x-default already has a language qualifier";
      void v24[2] = 0;
      GenericErrorCallback::NotifyClient((uint64_t)a4, 1, (unsigned int *)v24, 0);
      int v8 = *(_DWORD *)(v7 + 8);
    }
    *(_DWORD *)(v7 + 8) = v8 | 0x50;
    operator new();
  }
  uint64_t v9 = v6 + 8 * a2;
  uint64_t v10 = *((void *)a1 + 10);
  uint64_t v11 = v10 - (v9 + 8);
  if (v10 != v9 + 8) {
    memmove((void *)v9, (const void *)(v9 + 8), v10 - (v9 + 8));
  }
  *((void *)a1 + 10) = v9 + v11;
  MEMORY[0x18C11BE10](v7 + 16, "[]");
  *(void *)(v7 + 64) = a3;
  uint64_t v12 = (void *)*((void *)a3 + 9);
  if (v12 == *((void **)a3 + 10))
  {
    unint64_t v13 = *((void *)a3 + 11);
    if ((unint64_t)v12 >= v13)
    {
      uint64_t v15 = v13 - (void)v12;
      uint64_t v16 = v15 >> 2;
      if ((unint64_t)(v15 >> 2) <= 1) {
        uint64_t v16 = 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      int v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a3 + 88, v17);
      uint64_t v20 = &v18[v19];
      *int v18 = v7;
      int v14 = v18 + 1;
      uint64_t v22 = (char *)*((void *)a3 + 9);
      BOOL v21 = (char *)*((void *)a3 + 10);
      if (v21 != v22)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *--int v18 = v23;
        }
        while (v21 != v22);
        BOOL v21 = (char *)*((void *)a3 + 9);
      }
      *((void *)a3 + 9) = v18;
      *((void *)a3 + 10) = v14;
      *((void *)a3 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *uint64_t v12 = v7;
      int v14 = v12 + 1;
    }
    *((void *)a3 + 10) = v14;
  }
  else
  {
    std::vector<XMP_Node *>::insert((uint64_t)a3 + 72, *((char **)a3 + 9), (char *)&v25);
  }
}

void sub_188892448(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

uint64_t CompareAliasedSubtrees(uint64_t result, XMP_Node *a2, XMPMeta::ErrorCallbackInfo *a3, char a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned __int8 *)(result + 63);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(result + 63);
  }
  else {
    uint64_t v9 = *(void *)(result + 48);
  }
  uint64_t v10 = *((unsigned __int8 *)a2 + 63);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a2 + 6);
  }
  if (v9 == v10)
  {
    uint64_t v12 = (const void **)(result + 40);
    if (v11 >= 0) {
      unint64_t v13 = (unsigned __int8 *)a2 + 40;
    }
    else {
      unint64_t v13 = (unsigned __int8 *)*((void *)a2 + 5);
    }
    if ((v8 & 0x80) == 0)
    {
      if (*(unsigned char *)(result + 63))
      {
        while (*(unsigned __int8 *)v12 == *v13)
        {
          uint64_t v12 = (const void **)((char *)v12 + 1);
          ++v13;
          if (!--v8) {
            goto LABEL_16;
          }
        }
        goto LABEL_17;
      }
LABEL_16:
      if (*(void *)(v7 + 80) - *(void *)(v7 + 72) == *((void *)a2 + 10) - *((void *)a2 + 9)) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    BOOL result = memcmp(*v12, v13, *(void *)(result + 48));
    if (!result) {
      goto LABEL_16;
    }
  }
LABEL_17:
  unint64_t v29 = "Mismatch between alias and base nodes";
  uint64_t v30 = 0;
  uint64_t v28 = 203;
  BOOL result = GenericErrorCallback::NotifyClient((uint64_t)a3, 1, (unsigned int *)&v28, 0);
LABEL_18:
  if (a4) {
    goto LABEL_37;
  }
  uint64_t v14 = *(unsigned __int8 *)(v7 + 39);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = *(unsigned __int8 *)(v7 + 39);
  }
  else {
    uint64_t v15 = *(void *)(v7 + 24);
  }
  uint64_t v16 = *((unsigned __int8 *)a2 + 39);
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *((void *)a2 + 3);
  }
  if (v15 != v16) {
    goto LABEL_36;
  }
  int v18 = (const void **)(v7 + 16);
  if (v17 >= 0) {
    uint64_t v19 = (unsigned __int8 *)a2 + 16;
  }
  else {
    uint64_t v19 = (unsigned __int8 *)*((void *)a2 + 2);
  }
  if ((v14 & 0x80) != 0)
  {
    BOOL result = memcmp(*v18, v19, *(void *)(v7 + 24));
    if (result)
    {
LABEL_36:
      unint64_t v29 = "Mismatch between alias and base nodes";
      uint64_t v30 = 0;
      uint64_t v28 = 203;
      BOOL result = GenericErrorCallback::NotifyClient((uint64_t)a3, 1, (unsigned int *)&v28, 0);
      goto LABEL_37;
    }
  }
  else if (*(unsigned char *)(v7 + 39))
  {
    while (*(unsigned __int8 *)v18 == *v19)
    {
      int v18 = (const void **)((char *)v18 + 1);
      ++v19;
      if (!--v14) {
        goto LABEL_34;
      }
    }
    goto LABEL_36;
  }
LABEL_34:
  if (*(_DWORD *)(v7 + 8) != *((_DWORD *)a2 + 2)
    || *(void *)(v7 + 104) - *(void *)(v7 + 96) != *((void *)a2 + 13) - *((void *)a2 + 12))
  {
    goto LABEL_36;
  }
LABEL_37:
  uint64_t v20 = *(void *)(v7 + 80) - *(void *)(v7 + 72);
  if (v20)
  {
    uint64_t v21 = 0;
    unint64_t v22 = v20 >> 3;
    if (v22 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v22;
    }
    do
    {
      BOOL result = CompareAliasedSubtrees(*(XMP_Node **)(*(void *)(v7 + 72) + 8 * v21), *(XMP_Node **)(*((void *)a2 + 9) + 8 * v21), a3, 0);
      ++v21;
    }
    while (v23 != v21);
  }
  uint64_t v24 = *(void *)(v7 + 104) - *(void *)(v7 + 96);
  if (v24)
  {
    uint64_t v25 = 0;
    unint64_t v26 = v24 >> 3;
    if (v26 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v26;
    }
    do
    {
      BOOL result = CompareAliasedSubtrees(*(XMP_Node **)(*(void *)(v7 + 96) + 8 * v25), *(XMP_Node **)(*((void *)a2 + 12) + 8 * v25), a3, 0);
      ++v25;
    }
    while (v27 != v25);
  }
  return result;
}

uint64_t PickBestRoot(const XML_Node *a1, unsigned int a2)
{
  uint64_t v5 = *((void *)a1 + 16);
  uint64_t v4 = *((void *)a1 + 17);
  uint64_t v3 = (const XML_Node ***)((char *)a1 + 128);
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    goto LABEL_23;
  }
  uint64_t v4 = *((void *)a1 + 16);
LABEL_3:
  uint64_t v7 = 0;
  uint64_t v8 = a1;
  unint64_t v9 = v6 >> 3;
  if (v9 <= 1) {
    unint64_t v9 = 1;
  }
  do
  {
    a1 = *(const XML_Node **)(v4 + 8 * v7);
    if (*((unsigned char *)a1 + 8) != 1) {
      goto LABEL_19;
    }
    uint64_t v10 = (char *)a1 + 40;
    int v11 = *((char *)a1 + 63);
    if (v11 < 0)
    {
      if (*((void *)a1 + 6) != 9) {
        goto LABEL_19;
      }
      uint64_t v10 = *(char **)v10;
    }
    else if (v11 != 9)
    {
      goto LABEL_19;
    }
    BOOL v12 = *(void *)v10 == 0x74656D706D783A78 && v10[8] == 97;
    if (v12
      || ((uint64_t v13 = *(void *)v10, v14 = v10[8], v13 == 0x74656D7061783A78)
        ? (BOOL v15 = v14 == 97)
        : (BOOL v15 = 0),
          v15))
    {
      a2 = 0;
      uint64_t v4 = *((void *)a1 + 16);
      uint64_t v16 = *((void *)a1 + 17);
      uint64_t v3 = (const XML_Node ***)((char *)a1 + 128);
      uint64_t v6 = v16 - v4;
      if (v16 == v4)
      {
LABEL_24:
        unint64_t v17 = (v16 - v4) >> 3;
        if (v16 == v4) {
          goto LABEL_44;
        }
        uint64_t v18 = 0;
        if (v17 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = (v16 - v4) >> 3;
        }
        while (2)
        {
          uint64_t result = *(void *)(v4 + 8 * v18);
          if (*(unsigned char *)(result + 8) == 1)
          {
            uint64_t v21 = (unsigned int *)(result + 40);
            int v22 = *(char *)(result + 63);
            if (v22 < 0)
            {
              if (*(void *)(result + 48) != 7) {
                goto LABEL_41;
              }
              uint64_t v21 = *(unsigned int **)v21;
            }
            else if (v22 != 7)
            {
              goto LABEL_41;
            }
            unsigned int v23 = bswap32(*v21);
            unsigned int v24 = 1919182394;
            if (v23 == 1919182394
              && (unsigned int v23 = bswap32(*(unsigned int *)((char *)v21 + 3)), v24 = 978469958, v23 == 978469958))
            {
              int v25 = 0;
            }
            else if (v23 < v24)
            {
              int v25 = -1;
            }
            else
            {
              int v25 = 1;
            }
            if (!v25) {
              return result;
            }
          }
LABEL_41:
          if (v19 == ++v18) {
            goto LABEL_44;
          }
          continue;
        }
      }
      goto LABEL_3;
    }
LABEL_19:
    ++v7;
  }
  while (v9 != v7);
  a1 = v8;
LABEL_23:
  uint64_t v16 = *((void *)a1 + 17);
  if ((a2 & 1) == 0) {
    goto LABEL_24;
  }
  unint64_t v17 = (v16 - v4) >> 3;
LABEL_44:
  if (v16 == v4) {
    return 0;
  }
  if (v17 <= 1) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = v17;
  }
  for (unsigned int i = *v3; ; ++i)
  {
    uint64_t result = PickBestRoot(*i, a2);
    if (result) {
      break;
    }
    if (!--v26) {
      return 0;
    }
  }
  return result;
}

void MoveExplicitAliases()
{
  __assert_rtn("MoveExplicitAliases", "XMPMeta-Parse.cpp", 382, "aliasPos != sRegisteredAliasMap->end()");
}

void XMPMeta::ProcessXMLBuffer()
{
}

{
  __assert_rtn("ProcessXMLBuffer", "XMPMeta-Parse.cpp", 1151, "! lastClientCall");
}

void ProcessUTF8Portion()
{
  __assert_rtn("ProcessUTF8Portion", "XMPMeta-Parse.cpp", 1024, "spanEnd == bufEnd");
}

{
  __assert_rtn("ProcessUTF8Portion", "XMPMeta-Parse.cpp", 1000, "*spanEnd == '&'");
}

void XMPMeta::ProcessXMLTree()
{
  __assert_rtn("FindRootNode", "XMPMeta-Parse.cpp", 164, "rootNode->name == \"rdf:RDF\"");
}

uint64_t XMPMeta::ParseFromBuffer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

BOOL PSD_CheckFormat(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 != 1347634208) {
    PSD_CheckFormat();
  }
  (*(void (**)(uint64_t, void, void))(*(void *)a3 + 16))(a3, 0, 0);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  BOOL result = 0;
  if (v4 >= 34)
  {
    int v6 = 0;
    (**(void (***)(uint64_t, int *, uint64_t, uint64_t))a3)(a3, &v6, 4, 1);
    BOOL result = 0;
    if (v6 == 1397768760)
    {
      unsigned __int16 v7 = 0;
      (**(void (***)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))a3)(a3, &v7, 2, 1);
      return (unsigned __int16)((bswap32(v7) >> 16) - 1) < 2u;
    }
  }
  return result;
}

void PSD_MetaHandlerCTor(XMPFiles *a1)
{
}

void sub_188892B7C(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B3C4017221864);
  _Unwind_Resume(a1);
}

void PSD_MetaHandler::PSD_MetaHandler(PSD_MetaHandler *this, XMPFiles *a2)
{
  XMPFileHandler::XMPFileHandler(this);
  *(void *)uint64_t v3 = &unk_1ED4E3BC0;
  *(void *)(v3 + 8) = a2;
  *(unsigned char *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = &unk_1ED4E3C38;
  *(_DWORD *)(v3 + 120) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 116) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = v3 + 144;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_DWORD *)(v3 + 16) = 8831;
  *(unsigned char *)(v3 + 20) = 0;
}

void PSD_MetaHandler::~PSD_MetaHandler(PSD_MetaHandler *this)
{
  *(void *)this = &unk_1ED4E3BC0;
  uint64_t v2 = *((void *)this + 23);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 248))(v3);
  }
  PSIR_FileWriter::~PSIR_FileWriter((PSD_MetaHandler *)((char *)this + 104));

  XMPFileHandler::~XMPFileHandler((void **)this);
}

{
  uint64_t vars8;

  PSD_MetaHandler::~PSD_MetaHandler(this);

  JUMPOUT(0x18C11C0E0);
}

uint64_t PSD_MetaHandler::CacheFileData(int32x2_t *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (this[2].i8[5]) {
    PSD_MetaHandler::CacheFileData();
  }
  uint64_t v2 = (void *)this[1];
  uint64_t v3 = v2[29];
  uint64_t v4 = (unsigned int (*)(void))v2[34];
  if (v4 && v4(v2[35]))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 12;
    exception[1] = "PSD_MetaHandler::CacheFileData - User abort";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v16 = 0;
  *(void *)unint64_t v17 = 0;
  *(void *)&v17[14] = 0;
  *(void *)&v17[8] = 0;
  (*(void (**)(uint64_t, void, void))(*(void *)v3 + 16))(v3, 0, 0);
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t *, uint64_t, void))v3)(v3, &v16, 30, 0);
  if (result == 30)
  {
    this[25] = vrev64_s32((int32x2_t)vrev32_s8(*(int8x8_t *)&v17[6]));
    uint64_t v6 = bswap32(*(unsigned int *)&v17[18]) + 30;
    if (v6 > (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3))
    {
      BOOL v12 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)BOOL v12 = 208;
      v12[1] = "Invalid PSD chunk length";
      *((unsigned char *)v12 + 16) = 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 16))(v3, v6, 0);
    if (result == v6)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v3 + 16))(v3, 0, 1);
      if (v7 - result >= 4)
      {
        LODWORD(v13) = 0;
        (**(void (***)(uint64_t, uint64_t *, uint64_t, uint64_t))v3)(v3, &v13, 4, 1);
        unsigned int v8 = bswap32(v13);
        PSIR_FileWriter::ParseFileResources(&this[13], v3, v8);
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t result = PSIR_FileWriter::GetImgRsrc((uint64_t)&this[13], 0x424u, (uint64_t)&v13);
        __int32 v9 = HIDWORD(v13);
        if (v8 >= HIDWORD(v13)) {
          int v10 = result;
        }
        else {
          int v10 = 0;
        }
        if (v10 == 1)
        {
          this[4] = (int32x2_t)v15;
          this[5].i32[0] = v9;
          this[5].i32[1] = 0;
          this[6].i16[0] = 257;
          uint64_t result = MEMORY[0x18C11BE20](&this[7], v14);
          this[2].i8[5] = 1;
        }
      }
    }
  }
  return result;
}

void PSD_MetaHandler::ProcessXMP(PSD_MetaHandler *this)
{
  *((unsigned char *)this + 22) = 1;
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    if ((*(unsigned char *)(v1 + 240) & 2) == 0) {
      operator new();
    }
  }
  operator new();
}

void sub_1888933AC(_Unwind_Exception *a1)
{
  MEMORY[0x18C11C0E0](v1, 0x10B1C40DDCB30DBLL);
  _Unwind_Resume(a1);
}

void PSD_MetaHandler::UpdateFile(PSD_MetaHandler *this, int a2)
{
  if (a2) {
    PSD_MetaHandler::UpdateFile();
  }
  unsigned int v3 = *((_DWORD *)this + 10);
  if (*((void *)this + 4) == -1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 4);
  }
  if (v3 == -1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v3;
  }
  uint64_t v6 = (char *)this + 80;
  uint64_t v7 = (PSD_MetaHandler *)((char *)this + 104);
  ExportPhotoData(1347634208, (uint64_t)this + 80, *((void *)this + 24), *((void *)this + 23), (uint64_t)this + 104);
  if (v4 != 0 && v5 != 0) {
    uint64_t v8 = 576;
  }
  else {
    uint64_t v8 = 64;
  }
  __int32 v9 = (char *)this + 56;
  TXMPMeta<std::string>::SerializeToBuffer((uint64_t)v6, (uint64_t)this + 56, v8, v5);
  if (v4 != 0 && v5 != 0)
  {
    if (*((char *)this + 79) < 0) {
      unint64_t v10 = *((void *)this + 8);
    }
    else {
      unint64_t v10 = *((unsigned __int8 *)this + 79);
    }
    BOOL v11 = v10 <= (int)v5;
  }
  else
  {
    BOOL v11 = 0;
  }
  int IsLegacyChanged = PSIR_FileWriter::IsLegacyChanged(v7);
  uint64_t v13 = *((void *)this + 1);
  if (!IsLegacyChanged && v11)
  {
    uint64_t v14 = *(XMP_ProgressTracker **)(v13 + 288);
    LODWORD(v15) = *((char *)this + 79);
    if ((v15 & 0x80000000) != 0)
    {
      unint64_t v16 = *((void *)this + 8);
      unint64_t v17 = *((int *)this + 10);
      if (v16 >= v17)
      {
        uint64_t v18 = *(void *)(v13 + 232);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v16 = *((unsigned __int8 *)this + 79);
      unint64_t v17 = *((int *)this + 10);
      if (v16 >= v17)
      {
        uint64_t v18 = *(void *)(v13 + 232);
LABEL_27:
        int v21 = 0;
        uint64_t v22 = v15;
LABEL_30:
        if (v22 != (int)v5) {
          PSD_MetaHandler::UpdateFile();
        }
        if (v14)
        {
          if (v21) {
            unint64_t v15 = *((void *)this + 8);
          }
          else {
            unint64_t v15 = v15;
          }
          XMP_ProgressTracker::BeginWork(v14, (float)v15);
        }
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v18 + 16))(v18, v4, 0);
        if (*((char *)this + 79) < 0)
        {
          __int32 v9 = (char *)*((void *)this + 7);
          uint64_t v23 = *((void *)this + 8);
        }
        else
        {
          uint64_t v23 = *((unsigned __int8 *)this + 79);
        }
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v18 + 8))(v18, v9, v23);
        if (v14) {
          XMP_ProgressTracker::WorkComplete(v14, v24, v25, v26);
        }
        goto LABEL_41;
      }
    }
    std::string::append((std::string *)((char *)this + 56), v17 - v16, 32);
    LODWORD(v15) = *((char *)this + 79);
    uint64_t v18 = *(void *)(*((void *)this + 1) + 232);
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_29:
    uint64_t v22 = *((void *)this + 8);
    int v21 = 1;
    goto LABEL_30;
  }
  uint64_t v19 = *(void *)(v13 + 232);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 40))(v19);
  if (*((unsigned char *)this + 96)) {
    __assert_rtn("UpdateFile", "PSD_Handler.cpp", 336, "! this->skipReconcile");
  }
  *((unsigned char *)this + 96) = 1;
  (*(void (**)(PSD_MetaHandler *, uint64_t))(*(void *)this + 80))(this, v20);
  *((unsigned char *)this + 96) = 0;
  (*(void (**)(uint64_t))(*(void *)v19 + 48))(v19);
LABEL_41:
  *((unsigned char *)this + 23) = 0;
}

void sub_1888936D4(_Unwind_Exception *a1)
{
}

void sub_1888936E0(void *a1)
{
  __cxa_begin_catch(a1);
  *(unsigned char *)(v1 + 96) = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  __cxa_rethrow();
}

void sub_188893718()
{
}

void PSD_MetaHandler::WriteTempFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = v4[29];
  uint64_t v6 = v4[34];
  uint64_t v7 = v4[35];
  uint64_t v8 = (XMP_ProgressTracker *)v4[36];
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  if (v9)
  {
    uint64_t v10 = v9;
    if (!*(unsigned char *)(a1 + 96))
    {
      ExportPhotoData(1246774599, a1 + 80, *(void *)(a1 + 192), *(void *)(a1 + 184), a1 + 104);
      TXMPMeta<std::string>::SerializeToBuffer(a1 + 80, a1 + 56, 64, 0);
    }
    BOOL v11 = (const void *)(a1 + 56);
    TXMPMeta<std::string>::SerializeToBuffer(a1 + 80, a1 + 56, 64, 0);
    *(void *)(a1 + 32) = -1;
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v12 = *(void *)(a1 + 64);
    }
    else {
      LODWORD(v12) = *(unsigned __int8 *)(a1 + 79);
    }
    *(_DWORD *)(a1 + 40) = v12;
    FillPacketInfo((unsigned __int8 *)(a1 + 56), a1 + 32);
    if (*(char *)(a1 + 79) < 0)
    {
      BOOL v11 = *(const void **)(a1 + 56);
      size_t v13 = *(void *)(a1 + 64);
    }
    else
    {
      size_t v13 = *(unsigned __int8 *)(a1 + 79);
    }
    PSIR_FileWriter::SetImgRsrc((PSIR_FileWriter *)(a1 + 104), 0x424u, v11, v13);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, 26, 0);
    unsigned int v21 = 0;
    (**(void (***)(uint64_t, unsigned int *, uint64_t, void))v5)(v5, &v21, 4, 0);
    uint64_t v14 = bswap32(v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v14, 1);
    unsigned int v20 = 0;
    (**(void (***)(uint64_t, unsigned int *, uint64_t, void))v5)(v5, &v20, 4, 0);
    unsigned int v20 = bswap32(v20);
    uint64_t v15 = v14 + v20 + 34;
    unint64_t v16 = v10 - v15;
    if (v8) {
      XMP_ProgressTracker::BeginWork(v8, (float)((float)v14 + 30.0) + (float)v16);
    }
    (*(void (**)(uint64_t, void, void))(*(void *)v5 + 16))(v5, 0, 0);
    (*(void (**)(uint64_t, void))(*(void *)a2 + 32))(a2, 0);
    XIO::Copy(v5, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 4, 1);
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)a2 + 8))(a2, &v21, 4);
    XIO::Copy(v5, a2);
    PSIR_FileWriter::UpdateFileResources(a1 + 104, v5, a2, v6, v7, v8);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 16))(v5, v15, 0);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 2);
    XIO::Copy(v5, a2);
    *(unsigned char *)(a1 + 23) = 0;
    if (v8) {
      XMP_ProgressTracker::WorkComplete(v8, v17, v18, v19);
    }
  }
}

void PSD_CheckFormat()
{
  __assert_rtn("PSD_CheckFormat", "PSD_Handler.cpp", 55, "format == kXMP_PhotoshopFile");
}

void PSD_MetaHandler::CacheFileData()
{
}

void PSD_MetaHandler::ProcessXMP()
{
}

void PSD_MetaHandler::UpdateFile()
{
}

{
  __assert_rtn("UpdateFile", "PSD_Handler.cpp", 319, "this->xmpPacket.size() == (size_t)oldPacketLength");
}

uint64_t AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(AdobeXMPCore_Int::IErrorNotifier_I *this)
{
  if (AdobeXMPCore_Int::sErrorNotifier(void)::onceToken != -1) {
    dispatch_once(&AdobeXMPCore_Int::sErrorNotifier(void)::onceToken, &__block_literal_global_47);
  }
  return *(void *)AdobeXMPCore_Int::gErrorNotifier;
}

uint64_t AdobeXMPCore_Int::IErrorNotifier_I::SetErrorNotifier(uint64_t a1)
{
  if (AdobeXMPCore_Int::sErrorNotifier(void)::onceToken != -1) {
    dispatch_once(&AdobeXMPCore_Int::sErrorNotifier(void)::onceToken, &__block_literal_global_47);
  }
  uint64_t v2 = *(void *)AdobeXMPCore_Int::gErrorNotifier;
  if (a1)
  {
    *(void *)AdobeXMPCore_Int::gErrorNotifier = a1;
  }
  else
  {
    if (AdobeXMPCore_Int::sDefaultErrorNotifier(void)::onceToken != -1) {
      dispatch_once(&AdobeXMPCore_Int::sDefaultErrorNotifier(void)::onceToken, &__block_literal_global_3);
    }
    uint64_t v3 = AdobeXMPCore_Int::gDefaultErrorNotifier;
    if (AdobeXMPCore_Int::gDefaultErrorNotifier) {
      uint64_t v3 = AdobeXMPCore_Int::gDefaultErrorNotifier
    }
         + *(void *)(*(void *)AdobeXMPCore_Int::gDefaultErrorNotifier - 48);
    *(void *)AdobeXMPCore_Int::gErrorNotifier = v3;
  }
  return v2;
}

void ___ZN16AdobeXMPCore_IntL14sErrorNotifierEv_block_invoke()
{
}

void ___ZN16AdobeXMPCore_IntL21sDefaultErrorNotifierEv_block_invoke()
{
}

uint64_t AdobeXMPCommon::IErrorNotifier_v1::notify(AdobeXMPCommon::IErrorNotifier_v1 *this, const AdobeXMPCommon::IError_v1 *a2, unsigned int *a3)
{
  *a3 = 0;
  AdobeXMPCommon::IError_v1::MakeShared((uint64_t)a2, &v7);
  long long v6 = v7;
  uint64_t v4 = (**(uint64_t (***)(AdobeXMPCommon::IErrorNotifier_v1 *, long long *))this)(this, &v6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  return v4;
}

void sub_188893E70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_begin_catch(a1);
  *uint64_t v10 = 1;
  __cxa_end_catch();
  JUMPOUT(0x188893E5CLL);
}

unsigned __int8 *FillPacketInfo(unsigned __int8 *result, uint64_t a2)
{
  int v2 = (char)result[23];
  if (v2 >= 0) {
    uint64_t v3 = result;
  }
  else {
    uint64_t v3 = *(unsigned __int8 **)result;
  }
  if (v2 >= 0) {
    unsigned int v4 = result[23];
  }
  else {
    unsigned int v4 = *((_DWORD *)result + 2);
  }
  if (!v4) {
    return result;
  }
  unsigned int v6 = v4 - 1;
  if (v4 == 1) {
    goto LABEL_9;
  }
  int v8 = *v3;
  if (v4 <= 3)
  {
    if (!*v3) {
      goto LABEL_21;
    }
    if (v3[1])
    {
      if (*(__int16 *)v3 != -2)
      {
        if (*(__int16 *)v3 == -257) {
          char v7 = 3;
        }
        else {
          char v7 = 0;
        }
        goto LABEL_31;
      }
LABEL_21:
      char v7 = 2;
      goto LABEL_31;
    }
LABEL_30:
    char v7 = 3;
    goto LABEL_31;
  }
  if (v8 == 255)
  {
    if (v3[1] != 254) {
      goto LABEL_23;
    }
LABEL_28:
    if (!v3[2] && !v3[3])
    {
      char v7 = 5;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v8 == 254)
  {
    if (v3[1] == 255) {
      char v7 = 2;
    }
    else {
      char v7 = 1;
    }
    goto LABEL_31;
  }
  if (*v3)
  {
    if (v3[1])
    {
LABEL_9:
      char v7 = 0;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (v3[1]) {
    goto LABEL_21;
  }
  if (v3[2] != 254)
  {
    if (!v3[2])
    {
      if (v3[3]) {
        char v7 = 4;
      }
      else {
        char v7 = 1;
      }
      goto LABEL_31;
    }
LABEL_23:
    char v7 = 1;
    goto LABEL_31;
  }
  if (v3[3] == 255) {
    char v7 = 4;
  }
  else {
    char v7 = 1;
  }
LABEL_31:
  int v9 = 0;
  *(unsigned char *)(a2 + 16) = v7;
  int v10 = v7 & 6;
  if (v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 1;
  }
  while (1)
  {
    int v12 = v9;
    uint64_t v13 = v6 + v9;
    if (!(v6 + v9)) {
      break;
    }
    --v9;
    if (v3[v13] == 60)
    {
      uint64_t result = &v3[v13];
      goto LABEL_38;
    }
  }
  uint64_t result = v3;
  if (*v3 != 60) {
    return result;
  }
LABEL_38:
  if (1 - v12 >= 18 * v11)
  {
    uint64_t result = (unsigned __int8 *)memcmp(result, kPacketTrailiers[v11 >> 1], 13 * v11);
    if (!result)
    {
      *(unsigned char *)(a2 + 18) = 1;
      if (v3[16 * v11 - 1 + v4 - v11 + v12] == 119) {
        *(unsigned char *)(a2 + 17) = 1;
      }
      if (v4 + v12 - 1 >= v11)
      {
        int v14 = 0;
        while (v3[v6 + v12 + v14] != 62)
        {
          unsigned int v15 = v6 - v11 + v12 + v14;
          v14 -= v11;
          if (v15 < v11) {
            return result;
          }
        }
        *(_DWORD *)(a2 + 12) = -(v11 + v14);
      }
    }
  }
  return result;
}

uint64_t XMPFileHandler::GetFileModDate(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 17) & 0x19) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    unsigned int v6 = "Base implementation of GetFileModDate only for typical embedding handlers";
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (const char *)(v2 + 368);
  if (*(char *)(v2 + 391) < 0)
  {
    if (!*(void *)(v2 + 376))
    {
LABEL_11:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      unsigned int v6 = "GetFileModDate cannot be used with client-provided I/O";
LABEL_12:
      exception[1] = v6;
      *((unsigned char *)exception + 16) = 0;
    }
    uint64_t v3 = *(const char **)v3;
  }
  else if (!*(unsigned char *)(v2 + 391))
  {
    goto LABEL_11;
  }

  return Host_IO::GetModifyDate(v3, a2);
}

void XMPFileHandler::FillMetadataFiles(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 17) & 0x19) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    __n128 v18 = "Base implementation of FillMetadataFiles only for typical embedding handlers";
    goto LABEL_23;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = (char *)(v3 + 368);
  if (*(char *)(v3 + 391) < 0)
  {
    if (!*(void *)(v3 + 376))
    {
LABEL_22:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      __n128 v18 = "FillMetadataFiles cannot be used with client-provided I/O";
LABEL_23:
      exception[1] = v18;
      *((unsigned char *)exception + 16) = 0;
    }
    unsigned int v4 = *(char **)v4;
  }
  else if (!*(unsigned char *)(v3 + 391))
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  unint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 8);
  if (v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a2) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a2) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v11) {
      int v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v11);
    }
    else {
      int v12 = 0;
    }
    uint64_t v13 = v12 + v8;
    __v.__first_ = v12;
    __v.__begin_ = v13;
    __v.__end_cap_.__value_ = &v12[v11];
    long long v14 = *(_OWORD *)__p;
    v13->__r_.__value_.__r.__words[2] = v20;
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    __p[1] = 0;
    std::string::size_type v20 = 0;
    __p[0] = 0;
    __v.__end_ = v13 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v15 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v16 = SHIBYTE(v20);
    *(void *)(a2 + 8) = v15;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    *(void *)(v6 + 16) = v20;
    *(_OWORD *)unint64_t v6 = v7;
    *(void *)(a2 + 8) = v6 + 24;
  }
}

void sub_188894330(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

void XMPFileHandler::FillAssociatedResources(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 17) & 0x19) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    __n128 v18 = "GetAssociatedResources is not implemented for this file format";
    goto LABEL_23;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = (char *)(v3 + 368);
  if (*(char *)(v3 + 391) < 0)
  {
    if (!*(void *)(v3 + 376))
    {
LABEL_22:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      __n128 v18 = "GetAssociatedResources cannot be used with client-provided I/O";
LABEL_23:
      exception[1] = v18;
      *((unsigned char *)exception + 16) = 0;
    }
    unsigned int v4 = *(char **)v4;
  }
  else if (!*(unsigned char *)(v3 + 391))
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  unint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 8);
  if (v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a2) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a2) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v11) {
      int v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v11);
    }
    else {
      int v12 = 0;
    }
    uint64_t v13 = v12 + v8;
    __v.__first_ = v12;
    __v.__begin_ = v13;
    __v.__end_cap_.__value_ = &v12[v11];
    long long v14 = *(_OWORD *)__p;
    v13->__r_.__value_.__r.__words[2] = v20;
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    __p[1] = 0;
    std::string::size_type v20 = 0;
    __p[0] = 0;
    __v.__end_ = v13 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v15 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v16 = SHIBYTE(v20);
    *(void *)(a2 + 8) = v15;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    *(void *)(v6 + 16) = v20;
    *(_OWORD *)unint64_t v6 = v7;
    *(void *)(a2 + 8) = v6 + 24;
  }
}

void sub_188894510(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

uint64_t XMPFileHandler::IsMetadataWritable(XMPFileHandler *this)
{
  if ((*((unsigned char *)this + 17) & 0x19) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    unint64_t v5 = "IsMetadataWritable is not implemented for this file format";
    goto LABEL_10;
  }
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = (Host_IO *)(v1 + 368);
  if (*(char *)(v1 + 391) < 0)
  {
    if (!*(void *)(v1 + 376))
    {
LABEL_9:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      unint64_t v5 = "IsMetadataWritable cannot be used with client-provided I/O";
LABEL_10:
      exception[1] = v5;
      *((unsigned char *)exception + 16) = 0;
    }
    uint64_t v2 = *(Host_IO **)v2;
  }
  else if (!*(unsigned char *)(v1 + 391))
  {
    goto LABEL_9;
  }
  return Host_IO::Writable(v2, 0);
}

void sub_1888945D8(void *a1)
{
}

void XMPFileHandler::ProcessXMP(XMPFileHandler *this)
{
  if (*((unsigned char *)this + 21) && !*((unsigned char *)this + 22))
  {
    if ((*((unsigned char *)this + 16) & 0x10) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      exception[1] = "Reconciling file handlers must implement ProcessXMP";
      *((unsigned char *)exception + 16) = 0;
    }
    TXMPUtils<std::string>::RemoveProperties((uint64_t)this + 80, 0, 0, (const char *)1);
    if (*((char *)this + 79) < 0)
    {
      uint64_t v2 = (char *)*((void *)this + 7);
      uint64_t v3 = *((void *)this + 8);
    }
    else
    {
      uint64_t v2 = (char *)this + 56;
      uint64_t v3 = *((unsigned __int8 *)this + 79);
    }
    TXMPMeta<std::string>::ParseFromBuffer((uint64_t)this + 80, (uint64_t)v2, v3, 0);
    *((unsigned char *)this + 22) = 1;
  }
}

uint64_t XMPFileHandler::GetSerializeOptions(XMPFileHandler *this)
{
  return 64;
}

void AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ClientDOMParserWrapperImpl(void *a1)
{
  uint64_t v2 = (AdobeXMPCore_Int::DOMParserImpl *)(a1 + 2);
  *a1 = &unk_1ED4D4FE0;
  a1[6] = &unk_1ED4D5C98;
  a1[2] = &unk_1ED4D5168;
  a1[13] = &unk_1ED4D5560;
  *(void *)((char *)a1 + unk_1ED4D5080 + 16) = &unk_1ED4D52C0;
  *(void *)((char *)a1 + *(void *)(a1[2] - 312) + 16) = &unk_1ED4D5408;
  *(void *)((char *)a1 + *(void *)(a1[2] - 320) + 16) = &unk_1ED4D5560;
  AdobeXMPCore_Int::ConfigurableImpl::ConfigurableImpl((uint64_t)(a1 + 6), (uint64_t *)&off_1ED4DDF28);
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = &unk_1ED4D4D00;
  AdobeXMPCore_Int::DOMParserImpl::DOMParserImpl(v2, (uint64_t *)&off_1ED4DDE60);
}

void sub_188894B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  AdobeXMPCore_Int::DOMParserImpl::~DOMParserImpl(v18, (uint64_t *)&off_1ED4DDE60);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v16, (uint64_t *)&off_1ED4DDF40);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(v17, (uint64_t *)&off_1ED4DDF28);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ParseAsNode(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v9 = 0;
  int v8 = 0;
  unint64_t v5 = (char *)(*(uint64_t (**)(void, const char *, uint64_t, char *, void (*)(AdobeXMPCore_Int *, int, unsigned int, unsigned int, const char *, const AdobeXMPCommon::IError_v1 **), AdobeXMPCommon::IError_v1 **, int *))(**((void **)this + 1) + 56))(*((void *)this + 1), a2, a3, (char *)this + *(void *)(*(void *)this - 72), AdobeXMPCore_Int::ReportErrorAndContinueABISafe, &v9, &v8);
  if (!v9)
  {
    if (!v8)
    {
      (**(void (***)(char *))&v5[*(void *)(*(void *)v5 - 56)])(&v5[*(void *)(*(void *)v5 - 56)]);
      std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a4, (uint64_t)v5);
    }
    long long v10 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2);
  }
  AdobeXMPCommon::IError_v1::MakeShared((uint64_t)v9, &v10);
  long long v7 = v10;
  (*(void (**)(char *))(*(void *)((char *)v9 + *(void *)(*(void *)v9 - 56)) + 8))((char *)v9 + *(void *)(*(void *)v9 - 56));
  exception = __cxa_allocate_exception(0x10uLL);
  _OWORD *exception = v7;
}

void sub_188894EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  long long v14 = *(std::__shared_weak_count **)(v12 - 24);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ParseAsNode(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 48)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 80)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 88)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 96)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 104)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 112)) = a2[9];
  *(void *)((char *)this + *(void *)(*(void *)this - 120)) = a2[10];
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  }
}

void AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this)
{
  AdobeXMPCore_Int::DOMParserImpl::~DOMParserImpl((AdobeXMPCore_Int::DOMParserImpl *)(v2 + 16), (uint64_t *)&off_1ED4DDE60);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + 104), (uint64_t *)&off_1ED4DDF40);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + 48), (uint64_t *)&off_1ED4DDF28);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl(this);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl(void *a1)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)a1 + *(void *)(*a1 - 208)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + *(void *)(*(void *)this - 48)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

uint64_t AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ValidateValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = 0;
  int v7 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **, int *))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), a2, a3, a4, &v8, &v7);
  if (v8)
  {
    AdobeXMPCommon::IError_v1::MakeShared((uint64_t)v8, &v9);
    long long v6 = v9;
    (*(void (**)(char *))(*(void *)((char *)v8 + *(void *)(*(void *)v8 - 56)) + 8))((char *)v8 + *(void *)(*(void *)v8 - 56));
    exception = __cxa_allocate_exception(0x10uLL);
    _OWORD *exception = v6;
  }
  if (v7)
  {
    long long v9 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2);
  }
  return result;
}

void sub_1888955EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  long long v14 = *(std::__shared_weak_count **)(v12 - 24);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ValidateValue(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ValidateValue((uint64_t)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

void AdobeXMPCore_Int::ClientDOMParserWrapperImpl::clone(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this)
{
  uint64_t v1 = (void *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x80);
  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ClientDOMParserWrapperImpl(v1);
}

void sub_18889568C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::clone(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this)
{
}

BOOL ReconcileUtils::IsASCII(ReconcileUtils *this, char *a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = a2 - 1;
  do
  {
    int v4 = *(char *)this;
    this = (ReconcileUtils *)((char *)this + 1);
    int v3 = v4;
    BOOL v5 = v4 >= 0;
    BOOL v7 = v2-- != 0;
  }
  while ((v3 & 0x80000000) == 0 && v7);
  return v5;
}

uint64_t ReconcileUtils::IsUTF8(ReconcileUtils *this, uint64_t a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = (ReconcileUtils *)((char *)this + a2);
    do
    {
      int v3 = *(char *)this;
      if (v3 < 0)
      {
        uint64_t v5 = 0;
        do
        {
          ++v5;
          LOBYTE(v3) = 2 * v3;
        }
        while ((v3 & 0x80) != 0);
        uint64_t v6 = 0;
        if ((unint64_t)(v5 - 5) < 0xFFFFFFFFFFFFFFFDLL) {
          return v6;
        }
        int v4 = (ReconcileUtils *)((char *)this + v5);
        if ((ReconcileUtils *)((char *)this + v5) > v2) {
          return v6;
        }
        uint64_t v7 = 1;
        while (v5 != v7)
        {
          int v8 = *((unsigned char *)this + v7++) & 0xC0;
          if (v8 != 128) {
            return 0;
          }
        }
      }
      else
      {
        int v4 = (ReconcileUtils *)((char *)this + 1);
      }
      this = v4;
    }
    while (v4 < v2);
  }
  return 1;
}

void ReconcileUtils::UTF8ToLocal(const UInt8 *a1, CFIndex a2, std::string *this)
{
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (!a2)
  {
LABEL_5:
    JUMPOUT(0x18C11BE20);
  }
  uint64_t v6 = 0;
  while (((char)a1[v6] & 0x80000000) == 0)
  {
    if (a2 == ++v6) {
      goto LABEL_5;
    }
  }
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();

  ReconcileUtils::IOSConvertEncoding(0x8000100u, SystemEncoding, a1, a2, this);
}

void ReconcileUtils::IOSConvertEncoding(CFStringEncoding a1, CFStringEncoding a2, const UInt8 *a3, CFIndex a4, std::string *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1 != -1 && a2 != -1)
  {
    if (CFStringIsEncodingAvailable(a1))
    {
      if (CFStringIsEncodingAvailable(a2))
      {
        CFStringRef v10 = CFStringCreateWithBytesNoCopy(0, a3, a4, a1, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
        if (v10)
        {
          CFStringRef v11 = v10;
          CFIndex Length = CFStringGetLength(v10);
          if (Length >= 1)
          {
            CFIndex v13 = Length;
            CFIndex v14 = 0;
            do
            {
              bzero(buffer, 0x3E8uLL);
              std::string::size_type __n = 0;
              v21.location = v14;
              v21.length = v13;
              CFIndex Bytes = CFStringGetBytes(v11, v21, a2, 0, 0, buffer, 1000, (CFIndex *)&__n);
              if (!Bytes) {
                break;
              }
              CFIndex v16 = Bytes;
              std::string::append(a5, (const std::string::value_type *)buffer, __n);
              v14 += v16;
              BOOL v17 = v13 <= v16;
              v13 -= v16;
            }
            while (!v17);
          }
          CFRelease(v11);
        }
      }
    }
  }
}

void ReconcileUtils::LocalToUTF8(const UInt8 *a1, CFIndex a2, std::string *this)
{
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (!a2)
  {
LABEL_5:
    JUMPOUT(0x18C11BE20);
  }
  uint64_t v6 = 0;
  while (((char)a1[v6] & 0x80000000) == 0)
  {
    if (a2 == ++v6) {
      goto LABEL_5;
    }
  }
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();

  ReconcileUtils::IOSConvertEncoding(SystemEncoding, 0x8000100u, a1, a2, this);
}

uint64_t XMLParserAdapter::NotifyClient(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = *(void *)(a1 + 232);
  if (result) {
    return GenericErrorCallback::NotifyClient(result, a2, a3, 0);
  }
  return result;
}

void StartElementHandler()
{
  __assert_rtn("StartElementHandler", "ExpatAdapter.cpp", 316, "attrs != 0");
}

void ProcessingInstructionHandler()
{
  __assert_rtn("ProcessingInstructionHandler", "ExpatAdapter.cpp", 464, "target != 0");
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateArrayIndexPathSegment(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPathSegment_v1::CreateArrayIndexPathSegment, a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 38, (uint64_t)a2, a3, a4);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a2 = 0;
  CFStringRef v10 = 0;
  CFStringRef v11 = 0;
  a1(&v10, a5, a6, a7);
  uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)&v10[*(void *)(*(void *)v10 - 56)] + 16))(&v10[*(void *)(*(void *)v10 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  int v8 = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateArrayNode(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, int a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, const AdobeXMPCommon::IError_v1 **a7)
{
  switch(a2)
  {
    case 1:
      long long v9 = AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode;
      CFStringRef v10 = a7;
      uint64_t v11 = 50;
      return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::IArrayNode_v1*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", v11, (uint64_t)a3, a4, (uint64_t)a5, a6);
    case 4:
      long long v9 = AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode;
      CFStringRef v10 = a7;
      uint64_t v11 = 55;
      return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::IArrayNode_v1*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", v11, (uint64_t)a3, a4, (uint64_t)a5, a6);
    case 2:
      long long v9 = AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode;
      CFStringRef v10 = a7;
      uint64_t v11 = 45;
      return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::IArrayNode_v1*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", v11, (uint64_t)a3, a4, (uint64_t)a5, a6);
  }
  return 0;
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::IArrayNode_v1*,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  a1(&v11, a5, a6, a7, a8);
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  long long v9 = v11;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateMetadata(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IMetadata_v1,AdobeXMPCore::IMetadata_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::IMetadata_v1::CreateMetadata, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IMetadata_v1,AdobeXMPCore::IMetadata_v1*>(void (*a1)(char **__return_ptr), void *a2)
{
  *a2 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  a1(&v5);
  uint64_t v2 = (*(uint64_t (**)(char *))(*(void *)&v5[*(void *)(*(void *)v5 - 56)] + 16))(&v5[*(void *)(*(void *)v5 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  int v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateNameSpacePrefixMap(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCore::INameSpacePrefixMap_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::INameSpacePrefixMap_v1::CreateNameSpacePrefixMap, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCore::INameSpacePrefixMap_v1*>(void (*a1)(char **__return_ptr), void *a2)
{
  *a2 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  a1(&v5);
  uint64_t v2 = (*(uint64_t (**)(char *))(*(void *)&v5[*(void *)(*(void *)v5 - 56)] + 16))(&v5[*(void *)(*(void *)v5 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  int v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreatePath(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::IPath_v1::CreatePath, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*>(void (*a1)(char **__return_ptr), void *a2)
{
  *a2 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  a1(&v5);
  uint64_t v2 = (*(uint64_t (**)(char *))(*(void *)&v5[*(void *)(*(void *)v5 - 56)] + 16))(&v5[*(void *)(*(void *)v5 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  int v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreatePropertyPathSegment(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPathSegment_v1::CreatePropertyPathSegment, a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 82, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  a1(&v11, a5, a6, a7, a8);
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  long long v9 = v11;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateQualifierPathSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPathSegment_v1::CreateQualifierPathSegment, a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 87, a2, a3, a4, a5);
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateQualifierSelectorPathSegment(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const AdobeXMPCommon::IError_v1 **a8)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPathSegment_v1::CreateQualifierSelectorPathSegment, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 92, (uint64_t)a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *a2 = 0;
  CFIndex v13 = 0;
  CFIndex v14 = 0;
  a1(&v13, a5, a6, a7, a8, a9, a10);
  uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  uint64_t v11 = v13;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateSimpleNode(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const AdobeXMPCommon::IError_v1 **a8)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::ISimpleNode_v1,AdobeXMPCore::ISimpleNode_v1*,char const*,unsigned long long,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 97, (uint64_t)a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::ISimpleNode_v1,AdobeXMPCore::ISimpleNode_v1*,char const*,unsigned long long,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *a2 = 0;
  CFIndex v13 = 0;
  CFIndex v14 = 0;
  a1(&v13, a5, a6, a7, a8, a9, a10);
  uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  uint64_t v11 = v13;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateStructureNode(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::IStructureNode_v1*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IStructureNode_v1::CreateStructureNode, a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 102, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::IStructureNode_v1*,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  a1(&v11, a5, a6, a7, a8);
  uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  long long v9 = v11;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::GetCoreConfigurationManager(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::ICoreConfigurationManager_v1,AdobeXMPCore::ICoreConfigurationManager_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::ICoreConfigurationManager_v1::GetCoreConfigurationManager, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::ICoreConfigurationManager_v1,AdobeXMPCore::ICoreConfigurationManager_v1*>(void (*a1)(char **__return_ptr), void *a2)
{
  *a2 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  a1(&v5);
  uint64_t v2 = (*(uint64_t (**)(char *))(*(void *)&v5[*(void *)(*(void *)v5 - 56)] + 16))(&v5[*(void *)(*(void *)v5 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  int v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::GetDOMImplementationRegistry(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMImplementationRegistry_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::IDOMImplementationRegistry_v1::GetDOMImplementationRegistry, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMImplementationRegistry_v1*>(void (*a1)(char **__return_ptr), void *a2)
{
  *a2 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  a1(&v5);
  uint64_t v2 = (*(uint64_t (**)(char *))(*(void *)&v5[*(void *)(*(void *)v5 - 56)] + 16))(&v5[*(void *)(*(void *)v5 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  int v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::GetDefaultNameSpacePrefixMap(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1 const,AdobeXMPCore::INameSpacePrefixMap_v1 const*>((void (*)(char **__return_ptr))AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1 const,AdobeXMPCore::INameSpacePrefixMap_v1 const*>(void (*a1)(char **__return_ptr), void *a2)
{
  *a2 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  a1(&v5);
  uint64_t v2 = (*(uint64_t (**)(char *))(*(void *)&v5[*(void *)(*(void *)v5 - 56)] + 16))(&v5[*(void *)(*(void *)v5 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  int v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::ParsePath(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, AdobeXMPCore::INameSpacePrefixMap_v1 *a2, uint64_t a3, const AdobeXMPCore::INameSpacePrefixMap_v1 *a4, const AdobeXMPCommon::IError_v1 **a5)
{
  AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared(a4, a2, &v11);
  long long v10 = v11;
  uint64_t v8 = AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*,char const*,unsigned long long,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPath_v1::ParsePath, a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 122, (uint64_t)a2, a3, (uint64_t)&v10);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  return v8;
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*,char const*,unsigned long long,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a2 = 0;
  long long v10 = 0;
  long long v11 = 0;
  a1(&v10, a5, a6, a7);
  uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)&v10[*(void *)(*(void *)v10 - 56)] + 16))(&v10[*(void *)(*(void *)v10 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  uint64_t v8 = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8;
}

uint64_t AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateError(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, uint64_t a2, uint64_t a3, unsigned int a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore_Int::IError_I,AdobeXMPCommon::IError_v1 *,AdobeXMPCommon::IError_v1::eErrorDomain,unsigned int,AdobeXMPCommon::IError_v1::eErrorSeverity>((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))AdobeXMPCore_Int::IError_I::CreateError, a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 127, a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore_Int::IError_I,AdobeXMPCommon::IError_v1 *,AdobeXMPCommon::IError_v1::eErrorDomain,unsigned int,AdobeXMPCommon::IError_v1::eErrorSeverity>(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a2 = 0;
  uint64_t v10 = 0;
  long long v11 = 0;
  a1(&v10, a5, a6, a7);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (v10) {
    uint64_t v8 = v10 + *(void *)(*(void *)v10 - 304);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateUTF8String(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t))AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String, a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 132, (uint64_t)a2, a3);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a2 = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  a1(&v9, a5, a6);
  uint64_t v6 = (*(uint64_t (**)(char *))(*(void *)&v9[*(void *)(*(void *)v9 - 56)] + 16))(&v9[*(void *)(*(void *)v9 - 56)]);
  (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  uint64_t v7 = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v7;
}

void AdobeXMPCore_Int::CoreObjectFactoryImpl::ConvertXMPMetatoIMetadata(int a1, AdobeXMPCore_Int::IMetadataConverterUtils_I *this, void *a3)
{
  *a3 = 0;
  v3[0] = 0;
  v3[1] = 0;
  AdobeXMPCore_Int::IMetadataConverterUtils_I::convertXMPMetatoIMetadata(this, v3);
}

void AdobeXMPCore_Int::CoreObjectFactoryImpl::ConvertIMetadatatoXMPMeta(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, AdobeXMPCore::IMetadata_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  v3[0] = 0;
  v3[1] = 0;
  AdobeXMPCore_Int::IMetadataConverterUtils_I::convertIMetadatatoXMPMeta(a2, (AdobeXMPCore::INode_v1 *)v3);
}

void AdobeXMPCore_Int::CoreObjectFactoryImpl::~CoreObjectFactoryImpl(AdobeXMPCore_Int::CoreObjectFactoryImpl *this)
{
}

void AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,unsigned long long>(void *a1)
{
  int v3 = (std::__shared_weak_count *)*((void *)OUTLINED_FUNCTION_3(a1) + 1);
  if (v3) {
    OUTLINED_FUNCTION_2();
  }
  __cxa_begin_catch(v2);
  OUTLINED_FUNCTION_4();
  uint64_t v4 = OUTLINED_FUNCTION_1();
  void *v1 = v5(v4);
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = (*(uint64_t (**)(void))(v6 + 16))();
  (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::registerMemoryAllocator(void *a1, uint64_t a2, void *a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL,AdobeXMPCommon::IMemoryAllocator_v1 *>(a3, (uint64_t)a1 + *(void *)(*a1 - 144), 0, (uint64_t (*)(void *, uint64_t))AdobeXMPCommon::IConfigurationManager_v1::RegisterMemoryAllocator, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurationManager_I.cpp", 21, a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL,AdobeXMPCommon::IMemoryAllocator_v1 *>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a1 = 0;
  uint64_t v8 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t))(*v8 + a4);
  }
  return a4(v8, a8);
}

uint64_t AdobeXMPCommon::IConfigurationManager_v1::RegisterMemoryAllocator(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::registerMemoryAllocator(void *a1, uint64_t a2, void *a3)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::registerMemoryAllocator((void *)((char *)a1 + *(void *)(*a1 - 112)), a2, a3);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::registerErrorNotifier(void *a1, void *a2, void *a3)
{
  ErrorNotifierWrapperImpl = AdobeXMPCore_Int::CreateErrorNotifierWrapperImpl(a2);
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL,AdobeXMPCommon::IErrorNotifier_v1 *>(a3, (uint64_t)a1 + *(void *)(*a1 - 144), 0, (uint64_t (*)(void *, uint64_t))AdobeXMPCommon::IConfigurationManager_v1::RegisterErrorNotifier, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurationManager_I.cpp", 27, (uint64_t)ErrorNotifierWrapperImpl);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL,AdobeXMPCommon::IErrorNotifier_v1 *>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a1 = 0;
  uint64_t v8 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t))(*v8 + a4);
  }
  return a4(v8, a8);
}

uint64_t AdobeXMPCommon::IConfigurationManager_v1::RegisterErrorNotifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::registerErrorNotifier(void *a1, void *a2, void *a3)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::registerErrorNotifier((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::disableMultiThreading(AdobeXMPCore_Int::IConfigurationManager_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(void *)(*(void *)this - 144), 0, (uint64_t (*)(void *))AdobeXMPCommon::IConfigurationManager_v1::DisableMultiThreading, 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCommon::IConfigurationManager_v1::DisableMultiThreading(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::disableMultiThreading(AdobeXMPCore_Int::IConfigurationManager_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::disableMultiThreading((AdobeXMPCore_Int::IConfigurationManager_I *)((char *)this + *(void *)(*(void *)this - 128)), a2);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::isMultiThreaded(AdobeXMPCore_Int::IConfigurationManager_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(void *)(*(void *)this - 144), 0, (uint64_t (*)(void *))AdobeXMPCommon::IConfigurationManager_v1::IsMultiThreaded, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCommon::IConfigurationManager_v1::IsMultiThreaded(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::isMultiThreaded(AdobeXMPCore_Int::IConfigurationManager_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::isMultiThreaded((AdobeXMPCore_Int::IConfigurationManager_I *)((char *)this + *(void *)(*(void *)this - 136)), a2);
}

void *AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointer(AdobeXMPCore_Int::IConfigurationManager_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x6E436F6E664D6772)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6E436F6E664D6772, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 144));
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6E436F6E664D6772, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_188898098(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointer(AdobeXMPCore_Int::IConfigurationManager_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IConfigurationManager_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::getInterfacePointer(AdobeXMPCore_Int::IConfigurationManager_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IConfigurationManager_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurationManager_I.cpp", 48, a2, a3);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IConfigurationManager_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  long long v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::getInterfacePointer(AdobeXMPCore_Int::IConfigurationManager_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::getInterfacePointer((AdobeXMPCore_Int::IConfigurationManager_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

void XMPMeta::SerializeToBuffer(uint64_t a1, std::string *this, unsigned int a3, unsigned int a4, const char *a5, char *a6, int a7)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    __n128 v18 = "XMP_Enforce failed: (rdfString != 0) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/"
          "source/XMPMeta-Serialize.cpp at line 1212";
    goto LABEL_367;
  }
  if (!a5 || (uint64_t v8 = a6) == 0) {
    XMPMeta::SerializeToBuffer();
  }
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if ((a3 & 7) != 0)
  {
    if ((a3 & 2) != 0)
    {
      if ((a3 & 4) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        __n128 v18 = "Can't use both _XMP_UTF16_Bit and _XMP_UTF32_Bit";
        goto LABEL_367;
      }
      int v13 = 2;
    }
    else
    {
      if ((a3 & 4) == 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        __n128 v18 = "Can't use _XMP_LittleEndian_Bit by itself";
        goto LABEL_367;
      }
      int v13 = 4;
    }
  }
  else
  {
    int v13 = 1;
  }
  CFIndex v14 = " ";
  if ((a3 & 0x800) != 0)
  {
    uint64_t v8 = "";
    if ((a3 & 0x200) != 0) {
      goto LABEL_20;
    }
LABEL_24:
    if ((a3 & 0x20) != 0)
    {
      if ((a3 & 0x110) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        __n128 v18 = "Inconsistent options for read-only packet";
        goto LABEL_367;
      }
    }
    else if ((a3 & 0x10) != 0)
    {
      if ((a3 & 0x100) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        __n128 v18 = "Inconsistent options for non-packet serialize";
        goto LABEL_367;
      }
    }
    else
    {
      if ((a3 & 0x1000) == 0)
      {
        if (!a4)
        {
          a4 = v13 << 11;
          if ((a3 & 0x100) == 0)
          {
LABEL_361:
            unsigned int v162 = a4;
            goto LABEL_37;
          }
LABEL_359:
          if (((*(uint64_t (**)(uint64_t, const char *, const char *))(*(void *)a1 + 112))(a1, "http://ns.adobe.com/xap/1.0/", "Thumbnails") & 1) == 0)a4 += 10000 * v13; {
          goto LABEL_361;
          }
        }
        if (!(a4 >> 28))
        {
          if ((a3 & 0x100) == 0) {
            goto LABEL_361;
          }
          goto LABEL_359;
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        __n128 v18 = "Outrageously large padding size";
LABEL_367:
        exception[1] = v18;
        *((unsigned char *)exception + 16) = 0;
      }
      if ((a3 & 0x2000) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        __n128 v18 = "Inconsistent options for x:xmpmeta serialize";
        goto LABEL_367;
      }
    }
    unsigned int v162 = 0;
    goto LABEL_37;
  }
  if (*a5) {
    uint64_t v15 = a5;
  }
  else {
    uint64_t v15 = "\n";
  }
  CFIndex v16 = "   ";
  if ((a3 & 0x40) != 0) {
    CFIndex v16 = " ";
  }
  if (!*v8) {
    uint64_t v8 = (char *)v16;
  }
  CFIndex v14 = v15;
  if ((a3 & 0x200) == 0) {
    goto LABEL_24;
  }
LABEL_20:
  if ((a3 & 0x110) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    __n128 v18 = "Inconsistent options for exact size serialize";
    goto LABEL_367;
  }
  unsigned int v162 = a4;
  if (((v13 - 1) & a4) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    __n128 v18 = "Exact size must be a multiple of the Unicode element";
    goto LABEL_367;
  }
LABEL_37:
  int v161 = a3 & 7;
  unsigned int v163 = a3;
  memset(&v166, 0, sizeof(v166));
  size_t v19 = strlen(v8);
  unint64_t v20 = 6 * a7 * v19 + 326;
  CFRange v21 = *(const XMP_Node ***)(a1 + 296);
  uint64_t v22 = *(void *)(a1 + 304) - (void)v21;
  if (v22)
  {
    unint64_t v23 = v19;
    unint64_t v24 = v22 >> 3;
    uint64_t v25 = *(unsigned __int8 *)(a1 + 263);
    if ((v25 & 0x80u) != 0) {
      uint64_t v25 = *(void *)(a1 + 248);
    }
    signed int v26 = a7 + 2;
    if (v24 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v24;
    }
    uint64_t v28 = v25 + 2 * v26 * v19 + 47;
    do
    {
      unint64_t v29 = *v21++;
      v20 += v28 + EstimateRDFSize(v29, v26, v23);
      --v27;
    }
    while (v27);
  }
  memset(&v171, 0, sizeof(v171));
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  __int16 v30 = v163;
  int v31 = a7;
  std::string::reserve(&v171, v20 + (v20 >> 2));
  std::string::append(&v171, "<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">");
  std::string::append(&v171, v14);
  uint64_t v32 = a1 + 224;
  if ((v163 & 0x40) != 0)
  {
    StartOuterRDFDescription(v32, &v171, v14, v8, a7);
    uint64_t v44 = *(void *)(a1 + 304) - *(void *)(a1 + 296);
    if (v44)
    {
      uint64_t v45 = 0;
      uint64_t v46 = v44 >> 3;
      int v47 = 1;
      do
        v47 &= SerializeCompactRDFAttrProps(*(void *)(*(void *)(a1 + 296) + 8 * v45++), &v171, v14, v8, a7 + 3);
      while (v46 != v45);
      if (v47)
      {
        uint64_t v43 = "/>";
        __int16 v30 = v163;
      }
      else
      {
        std::string::append(&v171, ">");
        __int16 v30 = v163;
        std::string::append(&v171, v14);
        uint64_t v48 = *(void *)(a1 + 304) - *(void *)(a1 + 296);
        if (v48)
        {
          uint64_t v49 = 0;
          uint64_t v50 = v48 >> 3;
          do
            SerializeCompactRDFElemProps(*(std::string **)(*(void *)(a1 + 296) + 8 * v49++), &v171, v14, v8, a7 + 3);
          while (v50 != v49);
        }
        int v31 = a7;
        if (a7 < -1)
        {
          uint64_t v43 = "</rdf:Description>";
        }
        else
        {
          unsigned int v51 = a7 + 3;
          uint64_t v43 = "</rdf:Description>";
          do
          {
            std::string::append(&v171, v8);
            --v51;
          }
          while (v51 > 1);
        }
      }
    }
    else
    {
      uint64_t v43 = "/>";
    }
  }
  else
  {
    StartOuterRDFDescription(v32, &v171, v14, v8, a7);
    if (*(void *)(a1 + 304) == *(void *)(a1 + 296))
    {
      uint64_t v43 = "/>";
    }
    else
    {
      std::string::append(&v171, ">");
      std::string::append(&v171, v14);
      uint64_t v33 = *(void *)(a1 + 304) - *(void *)(a1 + 296);
      if (v33)
      {
        uint64_t v34 = 0;
        unint64_t v35 = v33 >> 3;
        if (v35 <= 1) {
          unint64_t v35 = 1;
        }
        unint64_t v165 = v35;
        do
        {
          uint64_t v36 = a1;
          uint64_t v37 = *(void *)(*(void *)(a1 + 296) + 8 * v34);
          uint64_t v38 = *(void *)(v37 + 80) - *(void *)(v37 + 72);
          if (v38)
          {
            uint64_t v39 = 0;
            unint64_t v40 = v38 >> 3;
            if (v40 <= 1) {
              uint64_t v41 = 1;
            }
            else {
              uint64_t v41 = v40;
            }
            do
              SerializeCanonicalRDFProperty(*(void *)(*(void *)(v37 + 72) + 8 * v39++), &v171, v14, v8, a7 + 3, (v163 >> 7) & 1, 0);
            while (v41 != v39);
          }
          ++v34;
          a1 = v36;
        }
        while (v34 != v165);
      }
      int v31 = a7;
      if (a7 < -1)
      {
        uint64_t v43 = "</rdf:Description>";
      }
      else
      {
        unsigned int v42 = a7 + 3;
        uint64_t v43 = "</rdf:Description>";
        do
        {
          std::string::append(&v171, v8);
          --v42;
        }
        while (v42 > 1);
      }
      __int16 v30 = v163;
    }
  }
  std::string::append(&v171, v43);
  std::string::append(&v171, v14);
  if ((v31 & 0x80000000) == 0)
  {
    int v52 = v31 + 2;
    do
    {
      std::string::append(&v171, v8);
      --v52;
    }
    while (v52 > 1);
  }
  std::string::append(&v171, "</rdf:RDF>");
  int v53 = v31 + 1;
  if ((v30 & 0x10) == 0)
  {
    if (v31 >= 1)
    {
      int v54 = v31 + 1;
      do
      {
        std::string::append(this, v8);
        --v54;
      }
      while (v54 > 1);
    }
    std::string::append(this, "<?xpacket begin=\"﻿\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>");
    std::string::append(this, v14);
  }
  if ((v30 & 0x1000) != 0) {
    goto LABEL_120;
  }
  if (v31 >= 1)
  {
    int v55 = v31 + 1;
    do
    {
      std::string::append(this, v8);
      --v55;
    }
    while (v55 > 1);
  }
  std::string::append(this, "<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"");
  std::string::append(this, "XMP Core 6.0.0\"");
  memset(&v170, 0, sizeof(v170));
  *(void *)v176 = 0;
  uint64_t v177 = 0;
  if ((v30 & 0x2000) != 0)
  {
    memset(&v175, 0, sizeof(v175));
    MD5Init(&v175);
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v56 = &v171;
    }
    else {
      uint64_t v56 = (std::string *)v171.__r_.__value_.__r.__words[0];
    }
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v57 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
    }
    else {
      unsigned int v57 = v171.__r_.__value_.__r.__words[1];
    }
    MD5Update(&v175, (unsigned __int8 *)v56, v57);
    MD5Final(v176, &v175);
    uint64_t v58 = 0;
    uint64_t v174 = 0;
    *(_OWORD *)__s = 0u;
    long long v173 = 0u;
    unsigned __int16 v59 = v176;
    do
    {
      unsigned int v60 = *v59++;
      int v61 = &__s[v58];
      *int v61 = a0123456789abcd[(unint64_t)v60 >> 4];
      v61[1] = a0123456789abcd[v60 & 0xF];
      v58 += 2;
    }
    while (v58 != 32);
    LOBYTE(v174) = 0;
    std::string::append(&v170, __s);
    std::string::append(this, " rdfhash=\"");
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v170.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v170.__r_.__value_.__l.__size_;
    }
    std::string::size_type v168 = 0;
    uint64_t v169 = 0;
    std::string __p = 0;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
    if (v169 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (size)
    {
      if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v64 = &v170;
      }
      else {
        unint64_t v64 = (std::string *)v170.__r_.__value_.__r.__words[0];
      }
      memmove(p_p, v64, size);
    }
    *(_WORD *)&p_p[size] = 34;
    if (v169 >= 0) {
      int v65 = (const std::string::value_type *)&__p;
    }
    else {
      int v65 = (const std::string::value_type *)__p;
    }
    if (v169 >= 0) {
      std::string::size_type v66 = HIBYTE(v169);
    }
    else {
      std::string::size_type v66 = v168;
    }
    std::string::append(this, v65, v66);
    if (SHIBYTE(v169) < 0) {
      operator delete(__p);
    }
    std::string::append(this, " merged=\"0\"");
  }
  std::string::append(this, ">");
  std::string::append(this, v14);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v170.__r_.__value_.__l.__data_);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_121:
      int v67 = v31 + 2;
      do
      {
        std::string::append(this, v8);
        --v67;
      }
      while (v67 > 1);
    }
  }
  else
  {
LABEL_120:
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v68 = &v171;
  }
  else {
    unsigned int v68 = (std::string *)v171.__r_.__value_.__r.__words[0];
  }
  if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v69 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v69 = v171.__r_.__value_.__l.__size_;
  }
  std::string::append(this, (const std::string::value_type *)v68, v69);
  std::string::append(this, v14);
  if ((v30 & 0x1000) == 0)
  {
    if (v31 >= 1)
    {
      int v70 = v31 + 1;
      do
      {
        std::string::append(this, v8);
        --v70;
      }
      while (v70 > 1);
    }
    std::string::append(this, "</x:xmpmeta>");
    std::string::append(this, v14);
  }
  std::string::erase(&v166, 0, 0xFFFFFFFFFFFFFFFFLL);
  if ((v30 & 0x10) == 0)
  {
    size_t v71 = strlen(v8);
    std::string::reserve(&v166, v71 * a7 + 19);
    if (v31 >= 1)
    {
      do
      {
        std::string::append(&v166, v8);
        --v53;
      }
      while (v53 > 1);
    }
    std::string::append(&v166, "<?xpacket end=\"w\"?>");
    if ((v30 & 0x20) != 0)
    {
      std::string::size_type v72 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v72 = v166.__r_.__value_.__l.__size_;
      }
      uint64_t v73 = &v166;
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v73 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      v73->__r_.__value_.__s.__data_[v72 - 4] = 114;
    }
  }
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v171.__r_.__value_.__l.__data_);
  }
  unsigned int v74 = v162;
  if (v161)
  {
    memset(&v175, 0, 24);
    memset(__s, 0, sizeof(__s));
    *(void *)&long long v173 = 0;
    if ((v30 & 2) != 0)
    {
      memset(&v171, 0, sizeof(v171));
      std::string::basic_string[abi:ne180100]<0>(&v171, "  ");
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v94 = &v171;
      }
      else {
        int v94 = (std::string *)v171.__r_.__value_.__r.__words[0];
      }
      v94->__r_.__value_.__s.__data_[0] = 0;
      std::string::size_type v95 = *(void *)v175.count;
      long long v96 = *(_OWORD *)v175.state;
      *(_OWORD *)v175.state = *(_OWORD *)&this->__r_.__value_.__l.__data_;
      *(void *)v175.count = *((void *)&this->__r_.__value_.__l + 2);
      int64_t v97 = *(void *)v175.count;
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v96;
      this->__r_.__value_.__r.__words[2] = v95;
      if (v97 >= 0) {
        int v98 = &v175;
      }
      else {
        int v98 = *(MD5_CTX **)v175.state;
      }
      if (v97 >= 0) {
        uint64_t v99 = HIBYTE(v97);
      }
      else {
        uint64_t v99 = *(void *)&v175.state[2];
      }
      ToUTF16((uint64_t)v98, v99);
      std::string::size_type v100 = *(void *)v175.count;
      long long v101 = *(_OWORD *)v175.state;
      *(_OWORD *)v175.state = *(_OWORD *)&v166.__r_.__value_.__l.__data_;
      int64_t v102 = v166.__r_.__value_.__r.__words[2];
      *(void *)v175.count = *((void *)&v166.__r_.__value_.__l + 2);
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v101;
      v166.__r_.__value_.__r.__words[2] = v100;
      if (v102 >= 0) {
        unsigned int v103 = &v175;
      }
      else {
        unsigned int v103 = *(MD5_CTX **)v175.state;
      }
      if (v102 >= 0) {
        uint64_t v104 = HIBYTE(v102);
      }
      else {
        uint64_t v104 = *(void *)&v175.state[2];
      }
      ToUTF16((uint64_t)v103, v104);
      if ((v30 & 0x200) != 0)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v105 = this->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v105 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
        std::string::size_type v138 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v138 = v166.__r_.__value_.__l.__size_;
        }
        unint64_t v139 = v138 + v105;
        if (v139 > v162)
        {
          v160 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v160 = 107;
          v160[1] = "Can't fit into specified packet size";
          *((unsigned char *)v160 + 16) = 0;
        }
        unsigned int v74 = v162 - v139;
      }
      MEMORY[0x18C11BE10](&v175, v14);
      if ((v175.count[1] & 0x80000000) == 0) {
        long long v140 = &v175;
      }
      else {
        long long v140 = *(MD5_CTX **)v175.state;
      }
      if ((v175.count[1] & 0x80000000) == 0) {
        uint64_t v141 = HIBYTE(v175.count[1]);
      }
      else {
        uint64_t v141 = *(void *)&v175.state[2];
      }
      ToUTF16((uint64_t)v140, v141);
      unint64_t v142 = BYTE7(v173);
      if (SBYTE7(v173) < 0) {
        unint64_t v142 = *(void *)&__s[8];
      }
      if (v142 <= v74)
      {
        unint64_t v146 = v74 - v142;
        for (unint64_t i = v142 + 200; i <= v146; v146 = (v146 - i))
        {
          for (unsigned int j = 101; j > 1; --j)
          {
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v149 = &v171;
            }
            else {
              v149 = (std::string *)v171.__r_.__value_.__r.__words[0];
            }
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v150 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v150 = v171.__r_.__value_.__l.__size_;
            }
            std::string::append(this, (const std::string::value_type *)v149, v150);
          }
          if ((SBYTE7(v173) & 0x80u) == 0) {
            v151 = __s;
          }
          else {
            v151 = *(std::string::value_type **)__s;
          }
          if ((SBYTE7(v173) & 0x80u) == 0) {
            std::string::size_type v152 = BYTE7(v173);
          }
          else {
            std::string::size_type v152 = *(void *)&__s[8];
          }
          std::string::append(this, v151, v152);
        }
        if (v146 >= 2)
        {
          signed int v153 = (v146 >> 1) + 1;
          do
          {
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v154 = &v171;
            }
            else {
              v154 = (std::string *)v171.__r_.__value_.__r.__words[0];
            }
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v155 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v155 = v171.__r_.__value_.__l.__size_;
            }
            std::string::append(this, (const std::string::value_type *)v154, v155);
            --v153;
          }
          while (v153 > 1);
        }
        if ((SBYTE7(v173) & 0x80u) == 0) {
          v156 = __s;
        }
        else {
          v156 = *(std::string::value_type **)__s;
        }
        if ((SBYTE7(v173) & 0x80u) == 0) {
          std::string::size_type v157 = BYTE7(v173);
        }
        else {
          std::string::size_type v157 = *(void *)&__s[8];
        }
        std::string::append(this, v156, v157);
      }
      else if (v74 >= 2)
      {
        int v143 = (v74 >> 1) + 1;
        do
        {
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v144 = &v171;
          }
          else {
            v144 = (std::string *)v171.__r_.__value_.__r.__words[0];
          }
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v145 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v145 = v171.__r_.__value_.__l.__size_;
          }
          std::string::append(this, (const std::string::value_type *)v144, v145);
          --v143;
        }
        while (v143 > 1);
      }
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v136 = &v166;
      }
      else {
        unsigned int v136 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v137 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v137 = v166.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      memset(&v171, 0, sizeof(v171));
      std::string::basic_string[abi:ne180100]<0>(&v171, "    ");
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::vector<unsigned int> v75 = &v171;
      }
      else {
        std::vector<unsigned int> v75 = (std::string *)v171.__r_.__value_.__r.__words[0];
      }
      v75->__r_.__value_.__s.__data_[2] = 0;
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v76 = &v171;
      }
      else {
        uint64_t v76 = (std::string *)v171.__r_.__value_.__r.__words[0];
      }
      v76->__r_.__value_.__s.__data_[1] = 0;
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v171;
      }
      else {
        uint64_t v77 = (std::string *)v171.__r_.__value_.__r.__words[0];
      }
      v77->__r_.__value_.__s.__data_[0] = 0;
      if (v30)
      {
        std::string v78 = (std::string *)v171.__r_.__value_.__r.__words[0];
        int v79 = &v171;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v78 = &v171;
        }
        v78->__r_.__value_.__s.__data_[0] = 32;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v80 = &v171;
        }
        else {
          long long v80 = (std::string *)v171.__r_.__value_.__r.__words[0];
        }
        v80->__r_.__value_.__s.__data_[3] = 0;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v81 = &v171;
        }
        else {
          uint64_t v81 = (std::string *)v171.__r_.__value_.__r.__words[0];
        }
        v81->__r_.__value_.__s.__data_[2] = 0;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v79 = (std::string *)v171.__r_.__value_.__r.__words[0];
        }
        v79->__r_.__value_.__s.__data_[1] = 0;
      }
      std::string::size_type v82 = *(void *)v175.count;
      long long v83 = *(_OWORD *)v175.state;
      *(_OWORD *)v175.state = *(_OWORD *)&this->__r_.__value_.__l.__data_;
      *(void *)v175.count = *((void *)&this->__r_.__value_.__l + 2);
      int64_t v84 = *(void *)v175.count;
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v83;
      this->__r_.__value_.__r.__words[2] = v82;
      if (v84 >= 0) {
        uint64_t v85 = &v175;
      }
      else {
        uint64_t v85 = *(MD5_CTX **)v175.state;
      }
      if (v84 >= 0) {
        uint64_t v86 = HIBYTE(v84);
      }
      else {
        uint64_t v86 = *(void *)&v175.state[2];
      }
      ToUTF32((uint64_t)v85, v86);
      std::string::size_type v87 = *(void *)v175.count;
      long long v88 = *(_OWORD *)v175.state;
      *(_OWORD *)v175.state = *(_OWORD *)&v166.__r_.__value_.__l.__data_;
      int64_t v89 = v166.__r_.__value_.__r.__words[2];
      *(void *)v175.count = *((void *)&v166.__r_.__value_.__l + 2);
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v88;
      v166.__r_.__value_.__r.__words[2] = v87;
      if (v89 >= 0) {
        uint64_t v90 = &v175;
      }
      else {
        uint64_t v90 = *(MD5_CTX **)v175.state;
      }
      if (v89 >= 0) {
        uint64_t v91 = HIBYTE(v89);
      }
      else {
        uint64_t v91 = *(void *)&v175.state[2];
      }
      ToUTF32((uint64_t)v90, v91);
      if ((v30 & 0x200) != 0)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v92 = this->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v92 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
        std::string::size_type v116 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v116 = v166.__r_.__value_.__l.__size_;
        }
        unint64_t v117 = v116 + v92;
        if (v117 > v162)
        {
          v159 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v159 = 107;
          v159[1] = "Can't fit into specified packet size";
          *((unsigned char *)v159 + 16) = 0;
        }
        unsigned int v74 = v162 - v117;
      }
      MEMORY[0x18C11BE10](&v175, v14);
      if ((v175.count[1] & 0x80000000) == 0) {
        double v118 = &v175;
      }
      else {
        double v118 = *(MD5_CTX **)v175.state;
      }
      if ((v175.count[1] & 0x80000000) == 0) {
        uint64_t v119 = HIBYTE(v175.count[1]);
      }
      else {
        uint64_t v119 = *(void *)&v175.state[2];
      }
      ToUTF32((uint64_t)v118, v119);
      unint64_t v120 = BYTE7(v173);
      if (SBYTE7(v173) < 0) {
        unint64_t v120 = *(void *)&__s[8];
      }
      if (v120 <= v74)
      {
        unint64_t v124 = v74 - v120;
        for (unint64_t k = v120 + 400; k <= v124; v124 = (v124 - k))
        {
          for (unsigned int m = 101; m > 1; --m)
          {
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v127 = &v171;
            }
            else {
              uint64_t v127 = (std::string *)v171.__r_.__value_.__r.__words[0];
            }
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v128 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v128 = v171.__r_.__value_.__l.__size_;
            }
            std::string::append(this, (const std::string::value_type *)v127, v128);
          }
          if ((SBYTE7(v173) & 0x80u) == 0) {
            int v129 = __s;
          }
          else {
            int v129 = *(std::string::value_type **)__s;
          }
          if ((SBYTE7(v173) & 0x80u) == 0) {
            std::string::size_type v130 = BYTE7(v173);
          }
          else {
            std::string::size_type v130 = *(void *)&__s[8];
          }
          std::string::append(this, v129, v130);
        }
        if (v124 >= 4)
        {
          signed int v131 = (v124 >> 2) + 1;
          do
          {
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v132 = &v171;
            }
            else {
              int v132 = (std::string *)v171.__r_.__value_.__r.__words[0];
            }
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v133 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v133 = v171.__r_.__value_.__l.__size_;
            }
            std::string::append(this, (const std::string::value_type *)v132, v133);
            --v131;
          }
          while (v131 > 1);
        }
        if ((SBYTE7(v173) & 0x80u) == 0) {
          uint64_t v134 = __s;
        }
        else {
          uint64_t v134 = *(std::string::value_type **)__s;
        }
        if ((SBYTE7(v173) & 0x80u) == 0) {
          std::string::size_type v135 = BYTE7(v173);
        }
        else {
          std::string::size_type v135 = *(void *)&__s[8];
        }
        std::string::append(this, v134, v135);
      }
      else if (v74 >= 4)
      {
        int v121 = (v74 >> 2) + 1;
        do
        {
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v122 = &v171;
          }
          else {
            uint64_t v122 = (std::string *)v171.__r_.__value_.__r.__words[0];
          }
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v123 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v123 = v171.__r_.__value_.__l.__size_;
          }
          std::string::append(this, (const std::string::value_type *)v122, v123);
          --v121;
        }
        while (v121 > 1);
      }
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v136 = &v166;
      }
      else {
        unsigned int v136 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v137 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v137 = v166.__r_.__value_.__l.__size_;
      }
    }
    std::string::append(this, (const std::string::value_type *)v136, v137);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v173) < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v175.count[1]) < 0) {
      operator delete(*(void **)v175.state);
    }
  }
  else
  {
    if ((v30 & 0x200) != 0)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v93 = this->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v93 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v106 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v106 = v166.__r_.__value_.__l.__size_;
      }
      unint64_t v107 = v106 + v93;
      if (v107 > v162)
      {
        v158 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)v158 = 107;
        v158[1] = "Can't fit into specified packet size";
        *((unsigned char *)v158 + 16) = 0;
      }
      unsigned int v74 = v162 - v107;
    }
    size_t v108 = strlen(v14);
    if (v108 <= v74)
    {
      std::string::size_type v109 = v74 - v108;
      unint64_t v110 = v108 + 100;
      if (v108 + 100 <= v109)
      {
        unsigned int v111 = v74 - 2 * v108 - 100;
        int v112 = -100 - v108;
        do
        {
          unsigned int v113 = v111;
          std::string::append(this, 0x64uLL, 32);
          std::string::append(this, v14);
          unsigned int v111 = v113 + v112;
        }
        while (v110 <= v113);
        std::string::size_type v109 = v113;
      }
      std::string::append(this, v109, 32);
      std::string::append(this, v14);
    }
    else
    {
      std::string::append(this, v74, 32);
    }
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v114 = &v166;
    }
    else {
      unsigned int v114 = (std::string *)v166.__r_.__value_.__r.__words[0];
    }
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v115 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v115 = v166.__r_.__value_.__l.__size_;
    }
    std::string::append(this, (const std::string::value_type *)v114, v115);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
}

void sub_188899424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v39 - 233) < 0) {
    operator delete(*(void **)(v39 - 256));
  }
  if (*(char *)(v39 - 185) < 0) {
    operator delete(*(void **)(v39 - 208));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EstimateRDFSize(const XMP_Node *a1, unsigned int a2, unint64_t a3)
{
  LODWORD(v4) = a2;
  if (*((char *)a1 + 39) < 0) {
    uint64_t v6 = *((void *)a1 + 3);
  }
  else {
    uint64_t v6 = *((unsigned __int8 *)a1 + 39);
  }
  uint64_t v7 = 2 * (v6 + a2 * a3) + 8;
  long long v9 = (const XMP_Node **)*((void *)a1 + 12);
  uint64_t v8 = (const XMP_Node **)*((void *)a1 + 13);
  if (v9 != v8)
  {
    unint64_t v10 = v8 - v9;
    v7 += 2 * a3 * (a2 + 1 + (unint64_t)(a2 + 2)) + 64;
    if (v10 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    do
    {
      uint64_t v12 = *v9++;
      v7 += EstimateRDFSize(v12, v4, a3);
      --v11;
    }
    while (v11);
    LODWORD(v4) = v4 + 2;
  }
  int v13 = *((_DWORD *)a1 + 2);
  if ((v13 & 0x100) != 0)
  {
    uint64_t v4 = (v4 + 1);
    v7 += 2 * a3 * v4 + 38;
  }
  else if ((v13 & 0x200) != 0)
  {
    v7 += 2 * a3 * (v4 + 1) + 20 * ((uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 3) + 22;
    LODWORD(v4) = v4 + 2;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    if (*((char *)a1 + 63) < 0) {
      uint64_t v14 = *((void *)a1 + 6);
    }
    else {
      uint64_t v14 = *((unsigned __int8 *)a1 + 63);
    }
    v7 += v14;
  }
  uint64_t v15 = (const XMP_Node **)*((void *)a1 + 9);
  uint64_t v16 = *((void *)a1 + 10) - (void)v15;
  if (v16)
  {
    unint64_t v17 = v16 >> 3;
    int v18 = v4 + 1;
    if (v17 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v17;
    }
    do
    {
      unint64_t v20 = *v15++;
      v7 += EstimateRDFSize(v20, v18, a3);
      --v19;
    }
    while (v19);
  }
  return v7;
}

void StartOuterRDFDescription(uint64_t a1, std::string *this, const std::string::value_type *a3, std::string::value_type *__s, int a5)
{
  if (a5 >= -1)
  {
    unsigned int v10 = a5 + 3;
    do
    {
      std::string::append(this, __s);
      --v10;
    }
    while (v10 > 1);
  }
  std::string::append(this, "<rdf:Description rdf:about=");
  std::string::push_back(this, 34);
  int v11 = *(char *)(a1 + 39);
  if (v11 >= 0) {
    uint64_t v12 = (const std::string::value_type *)(a1 + 16);
  }
  else {
    uint64_t v12 = *(const std::string::value_type **)(a1 + 16);
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    std::string::size_type v13 = *(void *)(a1 + 24);
  }
  std::string::append(this, v12, v13);
  std::string::push_back(this, 34);
  memset(&v18, 0, sizeof(v18));
  std::string::reserve(&v18, 0x190uLL);
  MEMORY[0x18C11BE10](&v18, ":xml:rdf:");
  uint64_t v14 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v14 >> 3;
    uint64_t v17 = (a5 + 4);
    do
      DeclareUsedNamespaces(*(void *)(*(void *)(a1 + 72) + 8 * v15++), &v18, this, a3, __s, v17);
    while (v16 != v15);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1888997E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SerializeCompactRDFAttrProps(uint64_t a1, std::string *a2, const std::string::value_type *a3, const std::string::value_type *a4, int a5)
{
  uint64_t v5 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v5 >> 3;
    unsigned int v12 = a5 + 1;
    char v13 = 1;
    do
    {
      uint64_t v14 = *(const XMP_Node **)(*(void *)(a1 + 72) + 8 * v10);
      if (CanBeRDFAttrProp(v14))
      {
        std::string::append(a2, a3);
        unsigned int v15 = v12;
        if (a5 >= 1)
        {
          do
          {
            std::string::append(a2, a4);
            --v15;
          }
          while (v15 > 1);
        }
        std::string v18 = (const std::string::value_type *)*((void *)v14 + 2);
        uint64_t v17 = (char *)v14 + 16;
        uint64_t v16 = v18;
        int v19 = v17[23];
        if (v19 >= 0) {
          unint64_t v20 = v17;
        }
        else {
          unint64_t v20 = v16;
        }
        if (v19 >= 0) {
          std::string::size_type v21 = *((unsigned __int8 *)v17 + 23);
        }
        else {
          std::string::size_type v21 = *((void *)v17 + 1);
        }
        std::string::append(a2, v20, v21);
        std::string::append(a2, "=\"");
        AppendNodeValue(a2, (uint64_t)(v17 + 24), 1);
        std::string::push_back(a2, 34);
      }
      else
      {
        char v13 = 0;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else
  {
    char v13 = 1;
  }
  return v13 & 1;
}

std::string *SerializeCompactRDFElemProps(std::string *result, std::string *a2, const std::string::value_type *a3, std::string::value_type *a4, int a5)
{
  uint64_t v5 = result[3].__r_.__value_.__l.__size_ - result[3].__r_.__value_.__r.__words[0];
  if (!v5) {
    return result;
  }
  int v6 = a5;
  long long v9 = result;
  uint64_t v10 = 0;
  uint64_t v56 = v5 >> 3;
  uint64_t v11 = (a5 + 1);
  unsigned int v50 = a5 + 2;
  int v52 = result;
  unsigned int v53 = a5 + 1;
  do
  {
    uint64_t v12 = *(void *)(v9[3].__r_.__value_.__r.__words[0] + 8 * v10);
    uint64_t result = (std::string *)CanBeRDFAttrProp((const XMP_Node *)v12);
    if (result) {
      goto LABEL_70;
    }
    char v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0) {
      char v13 = *(const char **)v13;
    }
    int v55 = *(_DWORD *)(v12 + 8);
    if (*v13 == 91) {
      char v13 = "rdf:li";
    }
    __s = (std::string::value_type *)v13;
    if (v6 >= 1)
    {
      unsigned int v14 = v11;
      do
      {
        std::string::append(a2, a4);
        --v14;
      }
      while (v14 > 1);
    }
    uint64_t v57 = v10;
    std::string::push_back(a2, 60);
    std::string::append(a2, __s);
    uint64_t v15 = *(void *)(v12 + 104) - *(void *)(v12 + 96);
    if (!v15)
    {
      int v17 = 0;
      goto LABEL_47;
    }
    uint64_t v16 = 0;
    int v17 = 0;
    char v18 = 0;
    unint64_t v19 = v15 >> 3;
    if (v19 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v19;
    }
    do
    {
      uint64_t v21 = *(void *)(*(void *)(v12 + 96) + 8 * v16);
      uint64_t v22 = (_OWORD *)(v21 + 16);
      if (*(char *)(v21 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(v21 + 16), *(void *)(v21 + 24));
      }
      else
      {
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *v22;
        v59.__r_.__value_.__r.__words[2] = *(void *)(v21 + 32);
      }
      BOOL v23 = IsRDFAttrQualifier((const void **)&v59.__r_.__value_.__l.__data_);
      BOOL v24 = v23;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v59.__r_.__value_.__l.__data_);
        if (!v24)
        {
LABEL_24:
          char v18 = 1;
          goto LABEL_41;
        }
      }
      else if (!v23)
      {
        goto LABEL_24;
      }
      int v25 = *(char *)(v21 + 39);
      if (v25 < 0)
      {
        if (*(void *)(v21 + 24) == 12)
        {
          signed int v26 = *(uint64_t **)v22;
LABEL_27:
          uint64_t v27 = *v26;
          int v28 = *((_DWORD *)v26 + 2);
          BOOL v30 = v27 == 0x6F7365723A666472 && v28 == 1701016181;
          goto LABEL_34;
        }
      }
      else
      {
        signed int v26 = (uint64_t *)(v21 + 16);
        if (v25 == 12) {
          goto LABEL_27;
        }
      }
      BOOL v30 = 0;
LABEL_34:
      v17 |= v30;
      std::string::push_back(a2, 32);
      int v31 = *(char *)(v21 + 39);
      if (v31 >= 0) {
        uint64_t v32 = (const std::string::value_type *)(v21 + 16);
      }
      else {
        uint64_t v32 = *(const std::string::value_type **)(v21 + 16);
      }
      if (v31 >= 0) {
        std::string::size_type v33 = *(unsigned __int8 *)(v21 + 39);
      }
      else {
        std::string::size_type v33 = *(void *)(v21 + 24);
      }
      std::string::append(a2, v32, v33);
      std::string::append(a2, "=\"");
      AppendNodeValue(a2, v21 + 40, 1);
      std::string::push_back(a2, 34);
LABEL_41:
      ++v16;
    }
    while (v20 != v16);
    int v6 = a5;
    long long v9 = v52;
    uint64_t v11 = v53;
    if (v18)
    {
      std::string::append(a2, " rdf:parseType=\"Resource\">");
      uint64_t v34 = a3;
      std::string::append(a2, a3);
      SerializeCanonicalRDFProperty(v12, a2, a3, a4, v53, 0, 1);
      unint64_t v35 = (uint64_t)(*(void *)(v12 + 104) - *(void *)(v12 + 96)) >> 3;
      uint64_t v36 = v53;
      unint64_t v37 = ((unint64_t)*(unsigned int *)(v12 + 8) >> 6) & 1;
      uint64_t v10 = v57;
      if (v35 > v37)
      {
        do
          SerializeCanonicalRDFProperty(*(void *)(*(void *)(v12 + 96) + 8 * v37++), a2, a3, a4, v53, 0, 0);
        while (v35 != v37);
      }
      goto LABEL_65;
    }
LABEL_47:
    uint64_t v38 = (std::string *)(v55 & 0x1F00);
    if ((v55 & 0x1F00) == 0)
    {
      uint64_t v10 = v57;
      if ((*(unsigned char *)(v12 + 8) & 2) != 0)
      {
        std::string::append(a2, " rdf:resource=\"");
        AppendNodeValue(a2, v12 + 40, 1);
        std::string::append(a2, "\"/>");
        uint64_t v34 = a3;
        goto LABEL_69;
      }
      uint64_t v34 = a3;
      if (*(char *)(v12 + 63) < 0)
      {
        if (*(void *)(v12 + 48)) {
          goto LABEL_61;
        }
      }
      else if (*(unsigned char *)(v12 + 63))
      {
LABEL_61:
        std::string::push_back(a2, 62);
        AppendNodeValue(a2, v12 + 40, 0);
LABEL_68:
        std::string::append(a2, "</");
        std::string::append(a2, __s);
        std::string::push_back(a2, 62);
        goto LABEL_69;
      }
      std::string::append(a2, "/>");
      goto LABEL_69;
    }
    uint64_t v10 = v57;
    if ((v55 & 0x200) != 0)
    {
      std::string::push_back(a2, 62);
      uint64_t v34 = a3;
      std::string::append(a2, a3);
      EmitRDFArrayTag(v38, a2, a3, a4, v11, (*(void *)(v12 + 80) - *(void *)(v12 + 72)) >> 3, 1);
      if ((*(unsigned char *)(v12 + 9) & 0x10) != 0) {
        NormalizeLangArray((std::string *)v12);
      }
      SerializeCompactRDFElemProps(v12, a2, a3, a4, v50);
      EmitRDFArrayTag(v38, a2, a3, a4, v11, (*(void *)(v12 + 80) - *(void *)(v12 + 72)) >> 3, 0);
      uint64_t v36 = v11;
LABEL_65:
      uint64_t v11 = v36;
      if (v6 >= 1)
      {
        unsigned int v46 = v36;
        do
        {
          std::string::append(a2, a4);
          --v46;
        }
        while (v46 > 1);
      }
      goto LABEL_68;
    }
    if ((v55 & 0x100) == 0) {
      SerializeCompactRDFElemProps();
    }
    uint64_t v40 = *(void *)(v12 + 72);
    uint64_t v39 = *(void *)(v12 + 80);
    if (v39 == v40) {
      goto LABEL_85;
    }
    LOBYTE(v4std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
    BOOL v42 = 0;
    uint64_t v43 = (v39 - v40) >> 3;
    uint64_t v44 = *(const XMP_Node ***)(v12 + 72);
    while (2)
    {
      BOOL v45 = CanBeRDFAttrProp(*v44);
      if (v45)
      {
        if (v41) {
          break;
        }
        goto LABEL_56;
      }
      if (!v42)
      {
LABEL_56:
        int v41 = !v45;
        ++v44;
        BOOL v42 = v45;
        if (!--v43) {
          goto LABEL_74;
        }
        continue;
      }
      break;
    }
    LOBYTE(v45) = 1;
    int v41 = 1;
LABEL_74:
    if ((v17 & v41) == 1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 202;
      exception[1] = "Can't mix rdf:resource qualifier and element fields";
      *((unsigned char *)exception + 16) = 0;
    }
    int v6 = a5;
    uint64_t v10 = v57;
    if (v39 == v40)
    {
LABEL_85:
      std::string::append(a2, " rdf:parseType=\"Resource\"/>");
      uint64_t v34 = a3;
      long long v9 = v52;
      uint64_t v11 = v53;
      goto LABEL_69;
    }
    if (v41)
    {
      uint64_t v34 = a3;
      uint64_t v36 = v53;
      if (v45)
      {
        std::string::push_back(a2, 62);
        std::string::append(a2, a3);
        if (a5 < 0)
        {
          std::string::append(a2, "<rdf:Description");
          SerializeCompactRDFAttrProps(v12, a2, a3, a4, v50);
          std::string::append(a2, ">");
          std::string::append(a2, a3);
          SerializeCompactRDFElemProps(v12, a2, a3, a4, v53);
          long long v9 = v52;
        }
        else
        {
          int v47 = v50;
          do
          {
            std::string::append(a2, a4);
            --v47;
          }
          while (v47 > 1);
          std::string::append(a2, "<rdf:Description");
          SerializeCompactRDFAttrProps(v12, a2, a3, a4, v50);
          std::string::append(a2, ">");
          std::string::append(a2, a3);
          SerializeCompactRDFElemProps(v12, a2, a3, a4, v53);
          long long v9 = v52;
          if ((a5 & 0x80000000) == 0)
          {
            int v48 = v50;
            do
            {
              std::string::append(a2, a4);
              --v48;
            }
            while (v48 > 1);
          }
        }
        std::string::append(a2, "</rdf:Description>");
        std::string::append(a2, a3);
        uint64_t v36 = v53;
      }
      else
      {
        std::string::append(a2, " rdf:parseType=\"Resource\">");
        std::string::append(a2, a3);
        SerializeCompactRDFElemProps(v12, a2, a3, a4, v53);
        long long v9 = v52;
      }
      goto LABEL_65;
    }
    uint64_t v34 = a3;
    uint64_t v11 = v53;
    SerializeCompactRDFAttrProps(v12, a2, a3, a4, v53);
    std::string::append(a2, "/>");
    long long v9 = v52;
LABEL_69:
    uint64_t result = std::string::append(a2, v34);
LABEL_70:
    ++v10;
  }
  while (v10 != v56);
  return result;
}

void DeclareUsedNamespaces(uint64_t a1, std::string *a2, std::string *a3, const std::string::value_type *a4, const std::string::value_type *a5, uint64_t a6)
{
  int v12 = *(_DWORD *)(a1 + 8);
  if (v12 < 0)
  {
    int v17 = (const std::string::value_type *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      int v17 = *(const std::string::value_type **)v17;
    }
    char v18 = (const std::string::value_type *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      char v18 = *(const std::string::value_type **)v18;
    }
    DeclareOneNamespace(v17, v18, a2, a3, a4, a5, a6);
  }
  else if ((v12 & 0x100) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
    if (v13)
    {
      uint64_t v14 = 0;
      unint64_t v15 = v13 >> 3;
      if (v15 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v15;
      }
      do
        DeclareElemNamespace((const std::string *)(*(void *)(*(void *)(a1 + 72) + 8 * v14++) + 16), a2, a3, a4, a5, a6);
      while (v16 != v14);
    }
  }
  uint64_t v19 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  if (v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = v19 >> 3;
    if (v21 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v21;
    }
    do
      DeclareUsedNamespaces(*(void *)(*(void *)(a1 + 72) + 8 * v20++), a2, a3, a4, a5, a6);
    while (v22 != v20);
  }
  uint64_t v23 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  if (v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = v23 >> 3;
    if (v25 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v25;
    }
    do
    {
      uint64_t v27 = *(void *)(*(void *)(a1 + 96) + 8 * v24);
      DeclareElemNamespace((const std::string *)(v27 + 16), a2, a3, a4, a5, a6);
      DeclareUsedNamespaces(v27, a2, a3, a4, a5, a6);
      ++v24;
    }
    while (v26 != v24);
  }
}

void DeclareOneNamespace(const std::string::value_type *a1, const std::string::value_type *a2, std::string *a3, std::string *a4, const std::string::value_type *a5, const std::string::value_type *a6, int a7)
{
  memset(&v33, 0, sizeof(v33));
  std::string::basic_string[abi:ne180100]<0>(&v33, ":");
  std::string::append(&v33, a1);
  int v12 = (char *)HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((char)v12 >= 0) {
    std::string::size_type v13 = (std::string::size_type)a3;
  }
  else {
    std::string::size_type v13 = a3->__r_.__value_.__r.__words[0];
  }
  char v14 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v15 = &v33;
  }
  else {
    unint64_t v15 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v33.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_34;
  }
  unint64_t v29 = a2;
  BOOL v30 = a1;
  if ((char)v12 < 0) {
    int v12 = (char *)a3->__r_.__value_.__l.__size_;
  }
  if ((uint64_t)v12 >= size)
  {
    uint64_t v23 = &v12[v13];
    int v24 = v15->__r_.__value_.__s.__data_[0];
    unint64_t v25 = (void *)v13;
    do
    {
      uint64_t v26 = &v12[-size];
      if (v26 == (char *)-1) {
        break;
      }
      uint64_t v27 = (char *)memchr(v25, v24, (size_t)(v26 + 1));
      if (!v27) {
        break;
      }
      int v28 = v27;
      if (!memcmp(v27, v15, size))
      {
        if (v28 != v23 && &v28[-v13] != (char *)-1) {
          goto LABEL_34;
        }
        break;
      }
      unint64_t v25 = v28 + 1;
      int v12 = (char *)(v23 - (v28 + 1));
    }
    while ((uint64_t)v12 >= size);
  }
  std::string::append(a4, a5);
  if (a7 >= 1)
  {
    int v17 = a7 + 1;
    do
    {
      std::string::append(a4, a6);
      --v17;
    }
    while (v17 > 1);
  }
  std::string::append(a4, "xmlns:");
  std::string::append(a4, v30);
  int v18 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  std::string::size_type v19 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  if (v18 >= 0) {
    std::string::size_type v20 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = a4->__r_.__value_.__l.__size_;
  }
  std::string::size_type v21 = v20 - 1;
  if (v18 < 0)
  {
    uint64_t v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(a4->__r_.__value_.__r.__words[0] + v21) != 58)
    {
LABEL_32:
      std::string::push_back(a4, 61);
      goto LABEL_33;
    }
    std::string::size_type v19 = a4->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v22 = a4;
    if (a4->__r_.__value_.__s.__data_[v21] != 58) {
      goto LABEL_32;
    }
  }
  v22->__r_.__value_.__s.__data_[v19 - 1] = 61;
LABEL_33:
  std::string::push_back(a4, 34);
  std::string::append(a4, v29);
  std::string::push_back(a4, 34);
  std::string::append(a3, v30);
  char v14 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
LABEL_34:
  if (v14 < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_18889A430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DeclareElemNamespace(const std::string *a1, std::string *a2, std::string *a3, const std::string::value_type *a4, const std::string::value_type *a5, int a6)
{
  std::string::size_type v12 = std::string::find(a1, 58, 0);
  if (v12 != -1)
  {
    memset(&v17, 0, sizeof(v17));
    std::string::basic_string(&v17, a1, 0, v12 + 1, (std::allocator<char> *)&v16);
    uint64_t v16 = 0;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = &v17;
    }
    else {
      std::string::size_type v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if (!XMP_NamespaceTable::GetURI((XMP_NamespaceTable *)sRegisteredNamespaces, (char *)v13, &v16, 0))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 7;
      exception[1] = "XMP_Enforce failed: (nsFound) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPC"
                     "ore/source/XMPMeta-Serialize.cpp at line 191";
      *((unsigned char *)exception + 16) = 0;
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v14 = &v17;
    }
    else {
      char v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    DeclareOneNamespace((const std::string::value_type *)v14, v16, a2, a3, a4, a5, a6);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
}

void sub_18889A580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CanBeRDFAttrProp(const XMP_Node *a1)
{
  uint64_t v1 = (void *)((char *)a1 + 16);
  if (*((char *)a1 + 39) < 0) {
    uint64_t v1 = (void *)*v1;
  }
  if (*(unsigned char *)v1 == 91 || *((void *)a1 + 12) != *((void *)a1 + 13)) {
    return 0;
  }
  if ((*((_DWORD *)a1 + 2) & 2) != 0) {
    return 0;
  }
  return (*((_DWORD *)a1 + 2) & 0x1F00) == 0;
}

std::string *AppendNodeValue(std::string *this, uint64_t a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v4 = *(const std::string::value_type **)a2;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 >= 1)
  {
    int v6 = this;
    uint64_t v7 = &v4[v3];
    do
    {
      std::string::size_type v8 = 0;
      while (1)
      {
        unsigned __int8 v9 = v4[v8];
        if (v9 == 34 && a3 != 0)
        {
          std::string::append(v6, v4, v8);
          std::string::size_type v13 = v6;
          char v14 = "&quot;";
LABEL_34:
          this = std::string::append(v13, v14);
          goto LABEL_35;
        }
        if (v9 < 0x20u) {
          break;
        }
        unsigned int v11 = v4[v8];
        if (v11 <= 0x3E && ((1 << v9) & 0x5000004000000000) != 0)
        {
          std::string::append(v6, v4, v8);
          switch(v11)
          {
            case '<':
              std::string::size_type v13 = v6;
              char v14 = "&lt;";
              break;
            case '>':
              std::string::size_type v13 = v6;
              char v14 = "&gt;";
              break;
            case '&':
              std::string::size_type v13 = v6;
              char v14 = "&amp;";
              break;
            default:
              AppendNodeValue();
          }
          goto LABEL_34;
        }
        if (&v4[++v8] >= v7)
        {
          this = std::string::append(v6, v4, v8);
          v4 += v8;
          goto LABEL_36;
        }
      }
      std::string::append(v6, v4, v8);
      if (v9 - 9 >= 2 && v9 != 13) {
        AppendNodeValue();
      }
      __int16 v18 = 0;
      uint64_t v17 = 0;
      strcpy(__s, "&#xn;");
      __s[3] = a0123456789abcd[v9];
      this = std::string::append(v6, __s, 5uLL);
LABEL_35:
      v4 += v8 + 1;
LABEL_36:
      ;
    }
    while (v4 < v7);
  }
  return this;
}

BOOL IsRDFAttrQualifier(const void **a1)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  uint64_t v3 = "xml:lang";
  BOOL v4 = 1;
  uint64_t v5 = 1u;
  do
  {
    size_t v6 = strlen(v3);
    size_t v7 = v6;
    if ((v2 & 0x80) != 0)
    {
      if ((const void *)v6 != a1[1]) {
        goto LABEL_9;
      }
      if (v6 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      std::string::size_type v8 = *a1;
    }
    else
    {
      std::string::size_type v8 = a1;
      if (v7 != v2) {
        goto LABEL_9;
      }
    }
    if (!memcmp(v8, v3, v7)) {
      return v4;
    }
LABEL_9:
    uint64_t v3 = sAttrQualifiers[v5];
    BOOL v4 = *v3 != 0;
    ++v5;
  }
  while (v5 != 6);
  return v4;
}

std::string *SerializeCanonicalRDFProperty(uint64_t a1, std::string *a2, const std::string::value_type *a3, std::string::value_type *a4, int a5, unsigned int a6, char a7)
{
  int v8 = a5;
  std::string::size_type v13 = (const std::string::value_type *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    std::string::size_type v13 = *(const std::string::value_type **)v13;
  }
  if (a7)
  {
    char v14 = "rdf:value";
  }
  else if (*v13 == 91)
  {
    char v14 = "rdf:li";
  }
  else
  {
    char v14 = v13;
  }
  int v87 = *(_DWORD *)(a1 + 8);
  if (a5 >= 1)
  {
    unsigned int v15 = a5 + 1;
    do
    {
      std::string::append(a2, a4);
      --v15;
    }
    while (v15 > 1);
  }
  unsigned int v89 = a6;
  std::string::push_back(a2, 60);
  std::string::append(a2, v14);
  uint64_t v16 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  int v88 = v8;
  if (!v16)
  {
    char v18 = 0;
    goto LABEL_53;
  }
  uint64_t v85 = v14;
  uint64_t v86 = a3;
  uint64_t v17 = 0;
  char v18 = 0;
  char v19 = 0;
  unint64_t v20 = v16 >> 3;
  if (v20 <= 1) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = v20;
  }
  do
  {
    uint64_t v22 = *(void *)(*(void *)(a1 + 96) + 8 * v17);
    uint64_t v23 = (_OWORD *)(v22 + 16);
    if (*(char *)(v22 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v22 + 16), *(void *)(v22 + 24));
    }
    else
    {
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *v23;
      v92.__r_.__value_.__r.__words[2] = *(void *)(v22 + 32);
    }
    BOOL v24 = IsRDFAttrQualifier((const void **)&v92.__r_.__value_.__l.__data_);
    BOOL v25 = v24;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v92.__r_.__value_.__l.__data_);
      if (!v25)
      {
LABEL_24:
        char v19 = 1;
        goto LABEL_42;
      }
    }
    else if (!v24)
    {
      goto LABEL_24;
    }
    int v26 = *(char *)(v22 + 39);
    if (v26 < 0)
    {
      if (*(void *)(v22 + 24) != 12)
      {
LABEL_33:
        BOOL v31 = 0;
        goto LABEL_34;
      }
      uint64_t v27 = *(uint64_t **)v23;
    }
    else
    {
      uint64_t v27 = (uint64_t *)(v22 + 16);
      if (v26 != 12) {
        goto LABEL_33;
      }
    }
    uint64_t v28 = *v27;
    int v29 = *((_DWORD *)v27 + 2);
    BOOL v31 = v28 == 0x6F7365723A666472 && v29 == 1701016181;
LABEL_34:
    v18 |= v31;
    if ((a7 & 1) == 0)
    {
      std::string::push_back(a2, 32);
      int v32 = *(char *)(v22 + 39);
      if (v32 >= 0) {
        std::string v33 = (const std::string::value_type *)(v22 + 16);
      }
      else {
        std::string v33 = *(const std::string::value_type **)(v22 + 16);
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(v22 + 39);
      }
      else {
        std::string::size_type v34 = *(void *)(v22 + 24);
      }
      std::string::append(a2, v33, v34);
      std::string::append(a2, "=\"");
      AppendNodeValue(a2, v22 + 40, 1);
      std::string::push_back(a2, 34);
    }
LABEL_42:
    ++v17;
  }
  while (v21 != v17);
  a3 = v86;
  if ((v19 & 1) == 0)
  {
    char v14 = v85;
    int v8 = v88;
LABEL_53:
    uint64_t v38 = (std::string *)(v87 & 0x1F00);
    if ((v87 & 0x1F00) != 0)
    {
      if ((v87 & 0x200) != 0)
      {
        std::string::push_back(a2, 62);
        std::string::append(a2, a3);
        int v56 = v8 + 1;
        EmitRDFArrayTag(v38, a2, a3, a4, v8 + 1, (*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3, 1);
        if ((*(unsigned char *)(a1 + 9) & 0x10) != 0) {
          NormalizeLangArray((std::string *)a1);
        }
        uint64_t v57 = *(void *)(a1 + 80);
        uint64_t v58 = v57 - *(void *)(a1 + 72);
        if (v58)
        {
          uint64_t v59 = 0;
          if ((unint64_t)(v58 >> 3) <= 1) {
            uint64_t v60 = 1;
          }
          else {
            uint64_t v60 = v58 >> 3;
          }
          do
            SerializeCanonicalRDFProperty(*(void *)(*(void *)(a1 + 72) + 8 * v59++), a2, a3, a4, (v88 + 2), v89, 0);
          while (v60 != v59);
          uint64_t v57 = *(void *)(a1 + 72);
          uint64_t v61 = *(void *)(a1 + 80);
          int v56 = v8 + 1;
        }
        else
        {
          uint64_t v61 = *(void *)(a1 + 80);
        }
        EmitRDFArrayTag(v38, a2, a3, a4, v56, (unint64_t)(v61 - v57) >> 3, 0);
        goto LABEL_124;
      }
      if (v18)
      {
        if ((v87 & 0x100) == 0) {
          SerializeCanonicalRDFProperty();
        }
        uint64_t v39 = a3;
        uint64_t v40 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
        if (!v40)
        {
LABEL_79:
          std::string::append(a2, "/>");
          a3 = v39;
          return std::string::append(a2, a3);
        }
        uint64_t v41 = 0;
        unint64_t v42 = v40 >> 3;
        if (v42 <= 1) {
          uint64_t v43 = 1;
        }
        else {
          uint64_t v43 = v42;
        }
        int v44 = v8 + 2;
        while (1)
        {
          uint64_t v45 = *(void *)(*(void *)(a1 + 72) + 8 * v41);
          if (!CanBeRDFAttrProp((const XMP_Node *)v45)) {
            break;
          }
          std::string::append(a2, v39);
          if ((v8 & 0x80000000) == 0)
          {
            int v46 = v44;
            do
            {
              std::string::append(a2, a4);
              --v46;
            }
            while (v46 > 1);
          }
          std::string::push_back(a2, 32);
          int v47 = *(char *)(v45 + 39);
          if (v47 >= 0) {
            int v48 = (const std::string::value_type *)(v45 + 16);
          }
          else {
            int v48 = *(const std::string::value_type **)(v45 + 16);
          }
          if (v47 >= 0) {
            std::string::size_type v49 = *(unsigned __int8 *)(v45 + 39);
          }
          else {
            std::string::size_type v49 = *(void *)(v45 + 24);
          }
          std::string::append(a2, v48, v49);
          std::string::append(a2, "=\"");
          int v52 = *(const std::string::value_type **)(v45 + 40);
          uint64_t v51 = v45 + 40;
          unsigned int v50 = v52;
          int v53 = *(char *)(v51 + 23);
          if (v53 >= 0) {
            int v54 = (const std::string::value_type *)v51;
          }
          else {
            int v54 = v50;
          }
          if (v53 >= 0) {
            std::string::size_type v55 = *(unsigned __int8 *)(v51 + 23);
          }
          else {
            std::string::size_type v55 = *(void *)(v51 + 8);
          }
          std::string::append(a2, v54, v55);
          std::string::push_back(a2, 34);
          ++v41;
          int v8 = v88;
          if (v41 == v43) {
            goto LABEL_79;
          }
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 202;
        int64_t v84 = "Can't mix rdf:resource and complex fields";
LABEL_155:
        exception[1] = v84;
        *((unsigned char *)exception + 16) = 0;
      }
      if ((v87 & 0x100) == 0) {
        SerializeCanonicalRDFProperty();
      }
      if (*(void *)(a1 + 80) != *(void *)(a1 + 72))
      {
        if (v89)
        {
          std::string::push_back(a2, 62);
          std::string::append(a2, a3);
          if (v8 < 0)
          {
            unint64_t v64 = "<rdf:Description>";
          }
          else
          {
            unsigned int v63 = v8 + 2;
            unint64_t v64 = "<rdf:Description>";
            do
            {
              std::string::append(a2, a4);
              --v63;
            }
            while (v63 > 1);
          }
          ++v8;
        }
        else
        {
          unint64_t v64 = " rdf:parseType=\"Resource\">";
        }
        std::string::append(a2, v64);
        std::string::append(a2, a3);
        uint64_t v78 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
        if (v78)
        {
          uint64_t v79 = 0;
          unint64_t v80 = v78 >> 3;
          if (v80 <= 1) {
            uint64_t v81 = 1;
          }
          else {
            uint64_t v81 = v80;
          }
          do
            SerializeCanonicalRDFProperty(*(void *)(*(void *)(a1 + 72) + 8 * v79++), a2, a3, a4, (v8 + 1), v89, 0);
          while (v81 != v79);
        }
        if (v89)
        {
          if (v8 >= 1)
          {
            unsigned int v82 = v8 + 1;
            do
            {
              std::string::append(a2, a4);
              --v82;
            }
            while (v82 > 1);
          }
          std::string::append(a2, "</rdf:Description>");
          std::string::append(a2, a3);
          --v8;
        }
        goto LABEL_125;
      }
      if (v89)
      {
        std::string::push_back(a2, 62);
        std::string::append(a2, a3);
        if ((v8 & 0x80000000) == 0)
        {
          unsigned int v76 = v8 + 2;
          do
          {
            std::string::append(a2, a4);
            --v76;
          }
          while (v76 > 1);
        }
        unsigned int v74 = "<rdf:Description/>";
LABEL_123:
        std::string::append(a2, v74);
        std::string::append(a2, a3);
        goto LABEL_125;
      }
      int v62 = " rdf:parseType=\"Resource\"/>";
LABEL_138:
      std::string::append(a2, v62);
      return std::string::append(a2, a3);
    }
    if ((*(unsigned char *)(a1 + 8) & 2) != 0)
    {
      std::string::append(a2, " rdf:resource=\"");
      AppendNodeValue(a2, a1 + 40, 1);
      int v62 = "\"/>";
      goto LABEL_138;
    }
    if (*(char *)(a1 + 63) < 0)
    {
      if (*(void *)(a1 + 48)) {
        goto LABEL_83;
      }
    }
    else if (*(unsigned char *)(a1 + 63))
    {
LABEL_83:
      std::string::push_back(a2, 62);
      AppendNodeValue(a2, a1 + 40, 0);
      goto LABEL_128;
    }
    int v62 = "/>";
    goto LABEL_138;
  }
  char v14 = v85;
  int v8 = v88;
  if (a7) {
    goto LABEL_53;
  }
  if (v18)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 202;
    int64_t v84 = "Can't mix rdf:resource and general qualifiers";
    goto LABEL_155;
  }
  uint64_t v35 = v89;
  if (v89)
  {
    std::string::push_back(a2, 62);
    std::string::append(a2, v86);
    if (v88 < 0)
    {
      unint64_t v37 = "<rdf:Description>";
      int v8 = v88 + 1;
    }
    else
    {
      unsigned int v36 = v88 + 2;
      unint64_t v37 = "<rdf:Description>";
      do
      {
        std::string::append(a2, a4);
        --v36;
      }
      while (v36 > 1);
      int v8 = v88 + 1;
      uint64_t v35 = v89;
    }
  }
  else
  {
    unint64_t v37 = " rdf:parseType=\"Resource\">";
  }
  std::string::append(a2, v37);
  std::string::append(a2, v86);
  int v88 = v8;
  uint64_t v65 = (v8 + 1);
  SerializeCanonicalRDFProperty(a1, a2, v86, a4, v65, v35, 1);
  uint64_t v66 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  if (v66)
  {
    uint64_t v67 = 0;
    unint64_t v68 = v66 >> 3;
    if (v68 <= 1) {
      uint64_t v69 = 1;
    }
    else {
      uint64_t v69 = v68;
    }
    while (1)
    {
      uint64_t v70 = *(void *)(*(void *)(a1 + 96) + 8 * v67);
      if (*(char *)(v70 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(v70 + 16), *(void *)(v70 + 24));
      }
      else {
        std::string v91 = *(std::string *)(v70 + 16);
      }
      BOOL v71 = IsRDFAttrQualifier((const void **)&v91.__r_.__value_.__l.__data_);
      BOOL v72 = v71;
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (!v71) {
        goto LABEL_113;
      }
LABEL_114:
      if (v69 == ++v67) {
        goto LABEL_118;
      }
    }
    operator delete(v91.__r_.__value_.__l.__data_);
    if (v72) {
      goto LABEL_114;
    }
LABEL_113:
    SerializeCanonicalRDFProperty(v70, a2, v86, a4, v65, v89, 0);
    goto LABEL_114;
  }
LABEL_118:
  if (v89)
  {
    int v8 = v88 - 1;
    if (v88 >= 1)
    {
      unsigned int v73 = v88 + 1;
      do
      {
        std::string::append(a2, a4);
        --v73;
      }
      while (v73 > 1);
    }
    unsigned int v74 = "</rdf:Description>";
    goto LABEL_123;
  }
LABEL_124:
  int v8 = v88;
LABEL_125:
  if (v8 >= 1)
  {
    unsigned int v75 = v8 + 1;
    do
    {
      std::string::append(a2, a4);
      --v75;
    }
    while (v75 > 1);
  }
LABEL_128:
  std::string::append(a2, "</");
  std::string::append(a2, v14);
  std::string::push_back(a2, 62);
  return std::string::append(a2, a3);
}

std::string *EmitRDFArrayTag(std::string *result, std::string *this, const std::string::value_type *a3, std::string::value_type *__s, int a5, int a6, int a7)
{
  __int16 v12 = (__int16)result;
  if (a6 || a7)
  {
    if (a5 >= 1)
    {
      unsigned int v13 = a5 + 1;
      do
      {
        std::string::append(this, __s);
        --v13;
      }
      while (v13 > 1);
    }
    if (a7) {
      char v14 = "<rdf:";
    }
    else {
      char v14 = "</rdf:";
    }
    std::string::append(this, v14);
    unsigned int v15 = "Seq";
    if ((v12 & 0x400) == 0) {
      unsigned int v15 = "Bag";
    }
    if ((v12 & 0x800) != 0) {
      uint64_t v16 = "Alt";
    }
    else {
      uint64_t v16 = v15;
    }
    std::string::append(this, v16);
    if (!a6 && (a7 & 1) != 0) {
      std::string::push_back(this, 47);
    }
    std::string::push_back(this, 62);
    return std::string::append(this, a3);
  }
  return result;
}

void XMPMeta::SerializeToBuffer()
{
  __assert_rtn("SerializeToBuffer", "XMPMeta-Serialize.cpp", 1213, "(newline != 0) && (indentStr != 0)");
}

void SerializeCompactRDFElemProps()
{
}

void AppendNodeValue()
{
  __assert_rtn("AppendNodeValue", "XMPMeta-Serialize.cpp", 318, "(ch == ((char)0x09)) || (ch == ((char)0x0A)) || (ch == ((char)0x0D))");
}

{
  __assert_rtn("AppendNodeValue", "XMPMeta-Serialize.cpp", 334, "ch == '&'");
}

void SerializeCanonicalRDFProperty()
{
}

{
  __assert_rtn("SerializeCanonicalRDFProperty", "XMPMeta-Serialize.cpp", 596, "propForm & kXMP_PropValueIsStruct");
}

uint64_t DumpClearString(uint64_t result, uint64_t (*a2)(uint64_t, unsigned __int8 *, uint64_t), uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)std::string __str = 0;
  uint64_t v19 = 0;
  int v20 = 0;
  uint64_t v4 = *(unsigned __int8 *)(result + 23);
  int v5 = (char)v4;
  size_t v6 = (unsigned __int8 *)(result + v4);
  if (v5 >= 0) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = (unsigned __int8 *)(*(void *)result + *(void *)(result + 8));
  }
  if (v5 >= 0) {
    int v8 = (unsigned __int8 *)result;
  }
  else {
    int v8 = *(unsigned __int8 **)result;
  }
  if (v8 < v7)
  {
    uint64_t result = 0;
    uint64_t v10 = v8;
    do
    {
      do
      {
        if ((char)*v10 <= 31 && (*v10 - 9) > 1u) {
          break;
        }
        ++v10;
      }
      while (v10 < v7);
      if (v8 != v10) {
        uint64_t result = a2(a3, v8, (v10 - v8));
      }
      if (result) {
        break;
      }
      if (v10 >= v7)
      {
LABEL_32:
        uint64_t result = 0;
      }
      else
      {
        int64_t v12 = v7 - v10;
        char v13 = 1;
        while (1)
        {
          if ((char)*v10 > 31 || *v10 - 9 < 2)
          {
            if (v13) {
              goto LABEL_32;
            }
            goto LABEL_34;
          }
          char v15 = (v13 & 1) != 0 ? 60 : 32;
          char v17 = v15;
          uint64_t result = a2(a3, (unsigned __int8 *)&v17, 1);
          if (result) {
            break;
          }
          snprintf(__str, 0x14uLL, "%.2X", *v10);
          size_t v16 = strlen(__str);
          uint64_t result = a2(a3, (unsigned __int8 *)__str, v16);
          if (result) {
            return result;
          }
          char v13 = 0;
          ++v10;
          if (!--v12)
          {
            uint64_t v10 = v7;
            goto LABEL_34;
          }
        }
        if (v13) {
          goto LABEL_35;
        }
LABEL_34:
        uint64_t result = a2(a3, ">", 1);
        if (result) {
          return result;
        }
      }
LABEL_35:
      int v8 = v10;
    }
    while (v10 < v7);
  }
  return result;
}

void XMP_NamespaceTable::XMP_NamespaceTable(XMP_NamespaceTable *this, const XMP_NamespaceTable *a2)
{
  *(void *)this = &unk_1ED4E48E8;
  XMP_ReadWriteLock::XMP_ReadWriteLock((XMP_NamespaceTable *)((char *)this + 8));
  *((void *)this + 3std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  *((void *)this + 30) = (char *)this + 248;
  *((void *)this + 28) = 0;
  *((void *)this + 27) = (char *)this + 224;
  *((void *)this + 29) = 0;
  *((void *)this + 32) = 0;
  uint64_t v4 = (const XMP_NamespaceTable *)((char *)a2 + 8);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)((char *)a2 + 8), 0);
  if (this != a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 27, *((long long **)a2 + 27), (long long *)a2 + 14);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 30, *((long long **)a2 + 30), (long long *)((char *)a2 + 248));
  }
  XMP_AutoLock::~XMP_AutoLock(&v4);
}

void sub_18889B640(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *v5);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *v4);
  XMP_ReadWriteLock::~XMP_ReadWriteLock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  int v5 = result;
  if (result[2])
  {
    size_t v6 = *result;
    size_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    char v15 = result;
    size_t v16 = v8;
    char v17 = (const void **)v8;
    if (v8)
    {
      size_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unsigned __int8 v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          uint64_t v18 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          char v17 = (const void **)v16;
          if (v16) {
            size_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          unsigned int v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              unsigned int v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unsigned __int8 v9 = a2;
            }
            while (!v12);
          }
          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unsigned __int8 v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      char v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          char v14 = v13;
          char v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_18889B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, void *a2, const void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v5 = (void *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_18889B9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_18889BA6C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_18889BB00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void XMP_ReadWriteLock::Release()
{
}

uint64_t AdobeXMPCommon::IError_v1::MakeShared@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (this) {
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return this;
}

void AdobeXMPCommon::IErrorProxy::Acquire(AdobeXMPCommon::IErrorProxy *this)
{
}

void AdobeXMPCommon::IErrorProxy::Release(AdobeXMPCommon::IErrorProxy *this)
{
}

uint64_t AdobeXMPCommon::IErrorProxy::GetISharedObject_I(AdobeXMPCommon::IErrorProxy *this)
{
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 1) + *(void *)(**((void **)this + 1) - 56)) + 16))();
}

void AdobeXMPCommon::IErrorProxy::~IErrorProxy(AdobeXMPCommon::IErrorProxy *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x18C11C0E0);
}

uint64_t AdobeXMPCommon::IErrorProxy::GetCode(AdobeXMPCommon::IErrorProxy *this)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,unsigned int>(*((void *)this + 1), (uint64_t (*)(void *, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IError_v1::getCode, 0);
}

uint64_t AdobeXMPCommon::IErrorProxy::GetDomain(AdobeXMPCommon::IErrorProxy *this)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1::eErrorDomain,unsigned int>(*((void *)this + 1), (uint64_t (*)(void *, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IError_v1::getDomain, 0);
}

uint64_t AdobeXMPCommon::IErrorProxy::GetSeverity(AdobeXMPCommon::IErrorProxy *this)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1::eErrorSeverity,unsigned int>(*((void *)this + 1), (uint64_t (*)(void *, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IError_v1::getSeverity, 0);
}

double AdobeXMPCommon::IErrorProxy::GetMessage@<D0>(AdobeXMPCommon::IErrorProxy *this@<X0>, _OWORD *a2@<X8>)
{
  return AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(*((void *)this + 1), (uint64_t (*)(void *, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IError_v1::getMessage, 0, a2);
}

double AdobeXMPCommon::IErrorProxy::GetLocation@<D0>(AdobeXMPCommon::IErrorProxy *this@<X0>, _OWORD *a2@<X8>)
{
  return AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(*((void *)this + 1), (uint64_t (*)(void *, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IError_v1::getLocation, 0, a2);
}

double AdobeXMPCommon::IErrorProxy::GetParameter@<D0>(AdobeXMPCommon::IErrorProxy *this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,unsigned long long>(*((void *)this + 1), (uint64_t (*)(void *, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IError_v1::getParameter, 0, a2, a3);
}

uint64_t AdobeXMPCommon::IErrorProxy::GetParametersCount(AdobeXMPCommon::IErrorProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 88))();
}

uint64_t AdobeXMPCommon::IErrorProxy::GetNextError@<X0>(AdobeXMPCommon::IErrorProxy *this@<X0>, void *a2@<X8>)
{
  long long v6 = 0;
  uint64_t v3 = (*(uint64_t (**)(void, AdobeXMPCommon::IError_v1 **))(**((void **)this + 1) + 256))(*((void *)this + 1), &v6);
  if (v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v6, exception);
  }
  return AdobeXMPCommon::IError_v1::MakeShared(v3, a2);
}

void sub_18889BF00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IErrorProxy::SetNextError@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v9 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*a2) {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a2 + 200))(*a2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*(void *)v4 + 264))(v4, v5, &v9);
  if (v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v9, exception);
  }
  return AdobeXMPCommon::IError_v1::MakeShared(v6, a3);
}

void sub_18889BFF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IErrorProxy::SetMessage(AdobeXMPCommon::IErrorProxy *this, const char *a2)
{
  return (*(uint64_t (**)(void, const char *))(**((void **)this + 1) + 112))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::SetLocation(AdobeXMPCommon::IErrorProxy *this, const char *a2)
{
  return (*(uint64_t (**)(void, const char *))(**((void **)this + 1) + 120))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const char *a2)
{
  return (*(uint64_t (**)(void, const char *))(**((void **)this + 1) + 128))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, void *a2)
{
  return (*(uint64_t (**)(void, void *))(**((void **)this + 1) + 136))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const unsigned int *a2)
{
  return (*(uint64_t (**)(void, const unsigned int *))(**((void **)this + 1) + 144))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const unint64_t *a2)
{
  return (*(uint64_t (**)(void, const unint64_t *))(**((void **)this + 1) + 152))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const int *a2)
{
  return (*(uint64_t (**)(void, const int *))(**((void **)this + 1) + 160))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const uint64_t *a2)
{
  return (*(uint64_t (**)(void, const uint64_t *))(**((void **)this + 1) + 168))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const float *a2)
{
  return (*(uint64_t (**)(void, const float *))(**((void **)this + 1) + 176))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const double *a2)
{
  return (*(uint64_t (**)(void, const double *))(**((void **)this + 1) + 184))(*((void *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 192))();
}

uint64_t AdobeXMPCommon::IErrorProxy::GetActualIError(AdobeXMPCommon::IErrorProxy *this)
{
  return *((void *)this + 1);
}

void AdobeXMPCommon::IErrorProxy::getCode()
{
}

void AdobeXMPCommon::IErrorProxy::getDomain()
{
}

void AdobeXMPCommon::IErrorProxy::getSeverity()
{
}

void AdobeXMPCommon::IErrorProxy::getMessage()
{
}

void AdobeXMPCommon::IErrorProxy::getLocation()
{
}

void AdobeXMPCommon::IErrorProxy::getParameter()
{
}

void AdobeXMPCommon::IErrorProxy::getNextError()
{
}

void AdobeXMPCommon::IErrorProxy::setNextError()
{
}

uint64_t AdobeXMPCommon::IErrorProxy::GetInterfacePointer(AdobeXMPCommon::IErrorProxy *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
    uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 64);
  }
  else {
    uint64_t v4 = 0;
  }
  return AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(v4, (uint64_t (*)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IVersionable::getInterfacePointer, 0, a2, a3);
}

void AdobeXMPCommon::IErrorProxy::getInterfacePointer()
{
}

void virtual thunk to'AdobeXMPCommon::IErrorProxy::~IErrorProxy(AdobeXMPCommon::IErrorProxy *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x18C11C0E0);
}

uint64_t virtual thunk to'AdobeXMPCommon::IErrorProxy::GetInterfacePointer(AdobeXMPCommon::IErrorProxy *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)((char *)this + *(void *)(*(void *)this - 32) + 8);
  if (v3) {
    uint64_t v4 = (uint64_t)v3 + *(void *)(*v3 - 64);
  }
  else {
    uint64_t v4 = 0;
  }
  return AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(v4, (uint64_t (*)(void *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))AdobeXMPCommon::IVersionable::getInterfacePointer, 0, a2, a3);
}

void virtual thunk to'AdobeXMPCommon::IErrorProxy::getInterfacePointer()
{
}

void AdobeXMPCommon::IErrorProxy::~IErrorProxy(AdobeXMPCommon::IErrorProxy *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 304)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[3];
  uint64_t v3 = *((void *)this + 1) + *(void *)(**((void **)this + 1) - 56);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,unsigned int>(uint64_t a1, uint64_t (*a2)(void *, AdobeXMPCommon::IError_v1 **), uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v7 = 0;
  uint64_t v4 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v3 = *(uint64_t (**)(void *, AdobeXMPCommon::IError_v1 **))(*v4 + a2);
  }
  uint64_t result = v3(v4, &v7);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v7, exception);
  }
  return result;
}

void sub_18889C734(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IError_v1::getCode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1::eErrorDomain,unsigned int>(uint64_t a1, uint64_t (*a2)(void *, AdobeXMPCommon::IError_v1 **), uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v7 = 0;
  uint64_t v4 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v3 = *(uint64_t (**)(void *, AdobeXMPCommon::IError_v1 **))(*v4 + a2);
  }
  uint64_t result = v3(v4, &v7);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v7, exception);
  }
  return result;
}

void sub_18889C81C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IError_v1::getDomain(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 216))();
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1::eErrorSeverity,unsigned int>(uint64_t a1, uint64_t (*a2)(void *, AdobeXMPCommon::IError_v1 **), uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v7 = 0;
  uint64_t v4 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v3 = *(uint64_t (**)(void *, AdobeXMPCommon::IError_v1 **))(*v4 + a2);
  }
  LODWORD(result) = v3(v4, &v7);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v7, exception);
  }
  return result;
}

void sub_18889C908(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IError_v1::getSeverity(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 224))();
}

double AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(void *, AdobeXMPCommon::IError_v1 **)@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v10 = 0;
  uint64_t v6 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v4 = *(uint64_t (**)(void *, AdobeXMPCommon::IError_v1 **))(*v6 + a2);
  }
  uint64_t v7 = v4(v6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  AdobeXMPCommon::IUTF8String_v1::MakeShared(v7, &v11);
  double result = *(double *)&v11;
  *a4 = v11;
  return result;
}

void sub_18889CA04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IError_v1::getMessage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 232))();
}

uint64_t AdobeXMPCommon::IError_v1::getLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 240))();
}

double AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,unsigned long long>@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(void *, uint64_t, AdobeXMPCommon::IError_v1 **)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5 = a2;
  long long v11 = 0;
  uint64_t v7 = (void *)(a1 + (a3 >> 1));
  if (a3) {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  }
  uint64_t v8 = v5(v7, a4, &v11);
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v11, exception);
  }
  AdobeXMPCommon::IUTF8String_v1::MakeShared(v8, &v12);
  double result = *(double *)&v12;
  *a5 = v12;
  return result;
}

void sub_18889CB28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IError_v1::getParameter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 248))();
}

void std::shared_ptr<AdobeXMPCommon::IError_v1>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IErrorProxy,void>(void *a1, void *a2)
{
  if (a2) {
    uint64_t v2 = (char *)a2 + *(void *)(*a2 - 304);
  }
  else {
    uint64_t v2 = 0;
  }
  *a1 = v2;
  operator new();
}

void sub_18889CBF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<AdobeXMPCommon::IErrorProxy *,std::shared_ptr<AdobeXMPCommon::IError_v1>::__shared_ptr_default_delete<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IErrorProxy>,std::allocator<AdobeXMPCommon::IErrorProxy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCommon::IErrorProxy *,std::shared_ptr<AdobeXMPCommon::IError_v1>::__shared_ptr_default_delete<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IErrorProxy>,std::allocator<AdobeXMPCommon::IErrorProxy>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCommon::IErrorProxy *,std::shared_ptr<AdobeXMPCommon::IError_v1>::__shared_ptr_default_delete<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IErrorProxy>,std::allocator<AdobeXMPCommon::IErrorProxy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *AdobeXMPCore_Int::IPath_I::GetInterfacePointer(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IPath_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IPath_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x6350617468202020)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6350617468202020, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 200));
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6350617468202020, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_18889CDC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IPath_I::GetInterfacePointer(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IPath_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IPath_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IPath_I::getInterfacePointer(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPath_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IPath_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 26, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPath_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  unsigned __int8 v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IPath_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IPath_I::getInterfacePointer(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IPath_I::getInterfacePointer((AdobeXMPCore_Int::IPath_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IPath_I::registerNameSpacePrefixMap(AdobeXMPCore_Int::IPath_I *this, const AdobeXMPCore::INameSpacePrefixMap_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 200);
  AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared(a2, a2, &v9);
  long long v8 = v9;
  uint64_t v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::INameSpacePrefixMap_v1 const*,AdobeXMPCore::INameSpacePrefixMap_v1 const,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IPath_v1::RegisterNameSpacePrefixMap, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 54, (uint64_t)&v8);
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  return v6;
}

void sub_18889D080(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::INameSpacePrefixMap_v1 const*,AdobeXMPCore::INameSpacePrefixMap_v1 const,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  long long v11 = 0;
  long long v12 = 0;
  uint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x634E5350724D6170, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18889D208(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    char v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    size_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18889D1ECLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18889D384(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IPath_v1::RegisterNameSpacePrefixMap(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t AdobeXMPCore_Int::IPath_I::serialize(AdobeXMPCore_Int::IPath_I *this, const AdobeXMPCore::INameSpacePrefixMap_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 200);
  AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared(a2, a2, &v9);
  long long v8 = v9;
  uint64_t v6 = AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCommon::IUTF8String_v1 *,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IPath_v1::Serialize, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 59, (uint64_t)&v8);
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  return v6;
}

void sub_18889D460(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCommon::IUTF8String_v1 *,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  long long v11 = 0;
  long long v12 = 0;
  uint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18889D5E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    char v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    size_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18889D5CCLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18889D764(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IPath_v1::Serialize(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

void AdobeXMPCore_Int::IPath_I::appendPathSegment(AdobeXMPCore_Int::IPath_I *this, const AdobeXMPCore::IPathSegment_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 200);
  AdobeXMPCore::IPathSegment_v1::MakeShared(a2, a2, &v7);
  long long v6 = v7;
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IPath_v1,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> const&>(a3, (uint64_t)this + v5, (uint64_t (*)(void *, uint64_t))AdobeXMPCore::IPath_v1::AppendPathSegment, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 64, (uint64_t)&v6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_18889D838(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IPath_v1,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> const&>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  long long v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(uint64_t (**)(void *, uint64_t))(*v7 + a3);
  }
  return a3(v7, a7);
}

uint64_t AdobeXMPCore::IPath_v1::AppendPathSegment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t AdobeXMPCore_Int::IPath_I::removePathSegment(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPathSegment_v1 const*,AdobeXMPCore::IPathSegment_v1 const,unsigned long long>(a3, (uint64_t)this + *(void *)(*(void *)this - 200), (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IPath_v1::RemovePathSegment, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 69, a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPathSegment_v1 const*,AdobeXMPCore::IPathSegment_v1 const,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  long long v11 = 0;
  long long v12 = 0;
  long long v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x6350617468536567, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18889DB78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    char v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    size_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18889DB5CLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18889DCF4(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IPath_v1::RemovePathSegment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t AdobeXMPCore_Int::IPath_I::getPathSegment(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPathSegment_v1 const*,AdobeXMPCore::IPathSegment_v1 const,unsigned long long>(a3, (uint64_t)this + *(void *)(*(void *)this - 200), (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IPath_v1::GetPathSegment, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 74, a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPathSegment_v1 const*,AdobeXMPCore::IPathSegment_v1 const,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  long long v11 = 0;
  long long v12 = 0;
  long long v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x6350617468536567, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_18889DEF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    char v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    size_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18889DED8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18889E070(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IPath_v1::GetPathSegment(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t AdobeXMPCore_Int::IPath_I::clone(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*,AdobeXMPCore::IPath_v1,unsigned long long,unsigned long long>(a4, (uint64_t)this + *(void *)(*(void *)this - 200), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCore::IPath_v1::Clone, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 79, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*,AdobeXMPCore::IPath_v1,unsigned long long,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  uint64_t v8 = a3;
  *a1 = 0;
  char v13 = 0;
  char v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    long long v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x6350617468202020, 1);
  }
  else
  {
    long long v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_18889E27C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    char v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    size_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x18889E260);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_18889E3F8(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IPath_v1::Clone(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

__n128 XIO::SplitLeafName(std::string *this, std::string *a2)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (!size)
    {
LABEL_9:
      std::string::erase(a2, 0, 0xFFFFFFFFFFFFFFFFLL);
      long long v7 = this;
      std::string::size_type v8 = 0;
LABEL_27:
      std::string::erase(v7, v8, 0xFFFFFFFFFFFFFFFFLL);
      return result;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      goto LABEL_9;
    }
  }
  std::string::size_type v5 = size - 1;
  if (size == 1)
  {
    long long v6 = this;
    if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
      long long v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v6->__r_.__value_.__s.__data_[0] == 47) {
      goto LABEL_9;
    }
  }
  uint64_t v9 = this;
  if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v9->__r_.__value_.__s.__data_[v5] == 47) {
    std::string::erase(this, v5, 0xFFFFFFFFFFFFFFFFLL);
  }
  std::string::size_type v11 = size - 2;
  if (v11)
  {
    do
    {
      long long v12 = this;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        long long v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      int v13 = v12->__r_.__value_.__s.__data_[v11];
      BOOL v14 = v13 == 47;
      BOOL v15 = v13 != 47;
      if (v14) {
        break;
      }
      --v11;
    }
    while (v11);
  }
  else
  {
    BOOL v15 = 1;
  }
  size_t v16 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    size_t v16 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v16->__r_.__value_.__s.__data_[v11] == 47)
  {
    uint64_t v17 = this;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v17 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    MEMORY[0x18C11BE10](a2, (char *)&v17->__r_.__value_.__l.__data_ + v11 + 1);
    long long v7 = this;
    std::string::size_type v8 = v11;
    goto LABEL_27;
  }
  if (v15)
  {
    std::string::erase(a2, 0, 0xFFFFFFFFFFFFFFFFLL);
    std::string::size_type v18 = a2->__r_.__value_.__r.__words[2];
    __n128 result = *(__n128 *)&a2->__r_.__value_.__l.__data_;
    std::string::size_type v19 = this->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v19;
    *(__n128 *)&this->__r_.__value_.__l.__data_ = result;
    this->__r_.__value_.__r.__words[2] = v18;
  }
  return result;
}

std::string *XIO::SplitFileExtension(std::string *a1, std::string *this, int a3)
{
  __n128 result = std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if (!size) {
      return result;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&a1->__r_.__value_.__s + 23)) {
      return result;
    }
  }
  std::string::size_type v8 = size - 1;
  do
  {
    std::string::size_type v9 = v8;
    if (!v8) {
      break;
    }
    uint64_t v10 = a1;
    if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0) {
      uint64_t v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    int v11 = v10->__r_.__value_.__s.__data_[v9];
    std::string::size_type v8 = v9 - 1;
  }
  while (v11 != 46);
  long long v12 = a1;
  if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0) {
    long long v12 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if (v12->__r_.__value_.__s.__data_[v9] == 46)
  {
    int v13 = a1;
    if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0) {
      int v13 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    MEMORY[0x18C11BE10](this, (char *)&v13->__r_.__value_.__l.__data_ + v9 + 1);
    if (!a3) {
      goto LABEL_29;
    }
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v14 = this->__r_.__value_.__l.__size_;
      if (!v14)
      {
LABEL_29:
        return std::string::erase(a1, v9, 0xFFFFFFFFFFFFFFFFLL);
      }
    }
    else
    {
      std::string::size_type v14 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
        goto LABEL_29;
      }
    }
    uint64_t v15 = 0;
    do
    {
      size_t v16 = this;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        size_t v16 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      if (v16->__r_.__value_.__s.__data_[v15] - 65 <= 0x19)
      {
        uint64_t v17 = this;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v17 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        v17->__r_.__value_.__s.__data_[v15] += 32;
      }
      ++v15;
    }
    while (v14 != v15);
    goto LABEL_29;
  }
  return result;
}

void XIO::Copy(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (v4 >= 1)
  {
    uint64_t v7 = v6;
    std::string::size_type v8 = v5;
    unint64_t v9 = v4;
    uint64_t v10 = v3;
    int v11 = v2;
    bzero(v15, 0x10000uLL);
    do
    {
      if (v8 && v8(v7))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 12;
        exception[1] = "XIO::Copy, user abort";
        *((unsigned char *)exception + 16) = 0;
      }
      if (v9 >= 0x10000) {
        uint64_t v12 = 0x10000;
      }
      else {
        uint64_t v12 = v9;
      }
      (**v11)(v11, v15, v12, 1);
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v10 + 8))(v10, v15, v12);
      BOOL v13 = (uint64_t)v9 <= v12;
      v9 -= v12;
    }
    while (!v13);
  }
}

uint64_t XMP_ProgressTracker::XMP_ProgressTracker(uint64_t result, long long *a2)
{
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 1065353216;
  *(unsigned char *)(result + 28) = 0;
  *(unsigned char *)(result + 32) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  if (*((void *)a2 + 1))
  {
    if (!*(void *)a2) {
      XMP_ProgressTracker::XMP_ProgressTracker();
    }
    long long v2 = *a2;
    *(_OWORD *)(result + 13) = *(long long *)((char *)a2 + 13);
    *(_OWORD *)__n128 result = v2;
    if (*(float *)(result + 24) < 0.0) {
      *(_DWORD *)(result + 24) = 1065353216;
    }
  }
  return result;
}

void XMP_ProgressTracker::BeginWork(XMP_ProgressTracker *this, float a2)
{
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  *((float *)this + 9) = a2;
  *((_DWORD *)this + 10) = 0;
  *((unsigned char *)this + 32) = 1;
  uint64_t v3 = PerfUtils::NoteThisMoment();
  *((void *)this + 6) = v3;
  *((void *)this + 7) = v3;
  if (*((unsigned char *)this + 28))
  {
    XMP_ProgressTracker::NotifyClient(this, 1, v4, v5, v6);
  }
}

void XMP_ProgressTracker::NotifyClient(XMP_ProgressTracker *this, int a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, __n128, __n128, __n128))this;
    if (!*(void *)this) {
      XMP_ProgressTracker::NotifyClient();
    }
    if (*((float *)this + 9) < 0.0 || (float v8 = *((float *)this + 10), v8 < 0.0) || *((float *)this + 6) < 0.0) {
      XMP_ProgressTracker::NotifyClient();
    }
    if (a2)
    {
      if (v8 <= 0.0)
      {
        a3.n128_u64[0] = 0;
        a4.n128_u64[0] = 0;
      }
      else
      {
        unint64_t v9 = (PerfUtils *)*((void *)this + 6);
        uint64_t v10 = PerfUtils::NoteThisMoment();
        a3.n128_f64[0] = PerfUtils::GetElapsedSeconds(v9, v10);
        a3.n128_f32[0] = a3.n128_f64[0];
        uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, __n128, __n128, __n128))this;
        uint64_t v6 = *((void *)this + 1);
        a4.n128_u32[0] = 1.0;
      }
      uint64_t v15 = *((void *)this + 2);
      a5.n128_u64[0] = 0;
    }
    else
    {
      uint64_t v11 = PerfUtils::NoteThisMoment();
      a3.n128_f64[0] = PerfUtils::GetElapsedSeconds(*((PerfUtils **)this + 7), v11);
      a3.n128_f32[0] = a3.n128_f64[0];
      if (*((float *)this + 6) > a3.n128_f32[0]) {
        return;
      }
      float v12 = *((float *)this + 9);
      a5.n128_u64[0] = 0;
      if (v12 <= 0.0)
      {
        float v14 = 0.0;
      }
      else
      {
        float v13 = *((float *)this + 10);
        float v14 = 0.0;
        if (v13 > 0.0)
        {
          if ((float)(v13 / v12) <= 1.0) {
            float v14 = v13 / v12;
          }
          else {
            float v14 = 1.0;
          }
          a3.n128_f64[0] = PerfUtils::GetElapsedSeconds(*((PerfUtils **)this + 6), v11);
          a3.n128_f32[0] = a3.n128_f64[0];
          a5.n128_f32[0] = (float)(1.0 - v14) * (float)(a3.n128_f32[0] / v14);
        }
      }
      *((void *)this + 7) = v11;
      uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, __n128, __n128, __n128))this;
      uint64_t v6 = *((void *)this + 1);
      uint64_t v15 = *((void *)this + 2);
      a4.n128_f32[0] = v14;
    }
    if (!v7(v6, v15, a3, a4, a5))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 16;
      exception[1] = "Abort signaled by progress reporting callback";
      *((unsigned char *)exception + 16) = 0;
    }
  }
}

float XMP_ProgressTracker::AddTotalWork(XMP_ProgressTracker *this, float a2)
{
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  float result = a2 + *((float *)this + 9);
  *((float *)this + 9) = result;
  return result;
}

float XMP_ProgressTracker::AddWorkDone(XMP_ProgressTracker *this, __n128 a2, __n128 a3, __n128 a4)
{
  a3.n128_u32[1] = 0;
  if (a2.n128_f32[0] < 0.0) {
    a2.n128_f32[0] = 0.0;
  }
  a3.n128_u32[0] = *((_DWORD *)this + 10);
  a2.n128_f32[0] = a2.n128_f32[0] + a3.n128_f32[0];
  *((_DWORD *)this + 10) = a2.n128_u32[0];
  XMP_ProgressTracker::NotifyClient(this, 0, a2, a3, a4);
  return result;
}

void XMP_ProgressTracker::WorkComplete(XMP_ProgressTracker *this, __n128 _Q0, __n128 a3, __n128 a4)
{
  _Q0.n128_u32[0] = *((_DWORD *)this + 9);
  if (_Q0.n128_f32[0] == 0.0)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)((char *)this + 36) = _Q0.n128_u64[0];
  }
  else
  {
    *((_DWORD *)this + 10) = _Q0.n128_u32[0];
    if (_Q0.n128_f32[0] <= 0.0) {
      XMP_ProgressTracker::WorkComplete();
    }
  }
  XMP_ProgressTracker::NotifyClient(this, *((unsigned __int8 *)this + 28), _Q0, a3, a4);
  *((unsigned char *)this + 32) = 0;
}

void XMP_ProgressTracker::XMP_ProgressTracker()
{
  __assert_rtn("XMP_ProgressTracker", "XMP_ProgressTracker.cpp", 26, "_cbInfo.wrapperProc != 0");
}

void XMP_ProgressTracker::NotifyClient()
{
  __assert_rtn("NotifyClient", "XMP_ProgressTracker.cpp", 125, "this->cbInfo.wrapperProc != 0");
}

{
  __assert_rtn("NotifyClient", "XMP_ProgressTracker.cpp", 126, "(this->totalWork >= 0.0) && (this->workDone >= 0.0) && (this->cbInfo.interval >= 0.0)");
}

void XMP_ProgressTracker::WorkComplete()
{
}

void AdobeXMPCore_Int::RDFDOMSerializerImpl::clone(AdobeXMPCore_Int::RDFDOMSerializerImpl *this)
{
  uint64_t v1 = (AdobeXMPCore_Int::RDFDOMSerializerImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x70);
  AdobeXMPCore_Int::RDFDOMSerializerImpl::RDFDOMSerializerImpl(v1);
}

void sub_18889EC58(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::RDFDOMSerializerImpl::Serialize(uint64_t a1, uint64_t a2)
{
}

void sub_18889F17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::RDFDOMSerializerImpl::Serialize(void *a1, uint64_t a2)
{
}

uint64_t AdobeXMPCore_Int::RDFDOMSerializerImpl::ValidateValue(uint64_t a1, void *a2, int a3, void *a4)
{
  if (*a2 == qword_1E90FF340
    && (a3 != 2 || (*a4 <= 0x20uLL ? (BOOL v4 = ((1 << *a4) & 0x100010100) == 0) : (BOOL v4 = 1), v4)))
  {
    return 5;
  }
  else
  {
    return 0;
  }
}

uint64_t virtual thunk to'AdobeXMPCore_Int::RDFDOMSerializerImpl::ValidateValue(uint64_t a1, void *a2, int a3, void *a4)
{
  if (*a2 == qword_1E90FF340
    && (a3 != 2 || (*a4 <= 0x20uLL ? (BOOL v4 = ((1 << *a4) & 0x100010100) == 0) : (BOOL v4 = 1), v4)))
  {
    return 5;
  }
  else
  {
    return 0;
  }
}

void AdobeXMPCore_Int::RDFDOMSerializerImpl::SerializeInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  AdobeXMPCore_Int::IMetadataConverterUtils_I::convertIMetadatatoXMPMeta(a2);
}

void sub_18889F368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl(AdobeXMPCore_Int::RDFDOMSerializerImpl *this)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl(this);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl(void *a1)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)a1 + *(void *)(*a1 - 208)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl(AdobeXMPCore_Int::RDFDOMSerializerImpl *this)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + *(void *)(*(void *)this - 48)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

uint64_t PSIR_MemoryReader::GetImgRsrc(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 32;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(unsigned __int16 *)(v4 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      unint64_t v9 = (uint64_t *)v4;
    }
    else {
      unint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(unsigned __int16 *)(v6 + 32) > a2) {
    return 0;
  }
  if (a3)
  {
    long long v11 = *(_OWORD *)(v6 + 40);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v6 + 56);
    *(_OWORD *)a3 = v11;
  }
  return 1;
}

void PSIR_MemoryReader::ParseMemoryResources(PSIR_MemoryReader *this, char *a2, unsigned int a3, char a4)
{
  if (*((unsigned char *)this + 8)) {
    free(*((void **)this + 2));
  }
  unint64_t v9 = (char **)((char *)this + 32);
  BOOL v8 = (void *)*((void *)this + 4);
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 3) = 0;
  std::__tree<unsigned long long>::destroy((uint64_t)this + 24, v8);
  *((void *)this + 3) = (char *)this + 32;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (a3)
  {
    if (a4)
    {
      if (a3 >= 0x6400001)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 209;
        uint64_t v28 = "Outrageous length for memory-based PSIR";
      }
      else
      {
        uint64_t v10 = a3;
        long long v11 = malloc_type_malloc(a3, 0xB7B75A40uLL);
        *((void *)this + 2) = v11;
        if (v11)
        {
          memcpy(v11, a2, a3);
          *((unsigned char *)this + 8) = 1;
          a2 = (char *)*((void *)this + 2);
LABEL_10:
          *((_DWORD *)this + 3) = a3;
          for (unint64_t i = (unsigned int *)&a2[v10]; a2 <= (char *)i - 12; a2 = (char *)v15 + ((v17 + 1) & 0xFFFFFFFE))
          {
            float v13 = (unsigned int *)&a2[((a2[6] + 2) & 0x1FE) + 6];
            if (v13 > i - 1) {
              break;
            }
            unsigned int v16 = *v13;
            uint64_t v15 = v13 + 1;
            unsigned int v14 = v16;
            uint64_t v17 = bswap32(v16);
            if (v17 > a3 || v15 > (unsigned int *)((char *)i - v17)) {
              break;
            }
            if (*(_DWORD *)a2 == 1296646712)
            {
              unsigned int v19 = bswap32(*((unsigned __int16 *)a2 + 2)) >> 16;
              int v20 = v15 - *((_DWORD *)this + 4);
              uint64_t v21 = (char **)*v9;
              if (!*v9) {
                goto LABEL_29;
              }
              uint64_t v22 = (char **)((char *)this + 32);
              do
              {
                unsigned int v23 = *((unsigned __int16 *)v21 + 16);
                BOOL v24 = v23 >= v19;
                if (v23 >= v19) {
                  BOOL v25 = v21;
                }
                else {
                  BOOL v25 = v21 + 1;
                }
                if (v24) {
                  uint64_t v22 = v21;
                }
                uint64_t v21 = (char **)*v25;
              }
              while (*v25);
              if (v22 != v9 && v19 >= *((unsigned __int16 *)v22 + 16))
              {
                if (*((_DWORD *)v22 + 11)) {
                  BOOL v26 = 1;
                }
                else {
                  BOOL v26 = v14 == 0;
                }
                if (!v26)
                {
                  *((_WORD *)v22 + 20) = v19;
                  *((_WORD *)v22 + 2std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
                  *((_DWORD *)v22 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v17;
                  v22[6] = (char *)v15;
                  *((_DWORD *)v22 + 14) = v20;
                }
              }
              else
              {
LABEL_29:
                LOWORD(v29) = v19;
                DWORD2(v29) = (unsigned __int16)v19;
                HIDWORD(v29) = v17;
                BOOL v30 = v15;
                int v31 = v20;
                int v32 = 0;
                std::__tree<std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_Manager::ImgRsrcInfo>>((uint64_t **)this + 3, (uint64_t *)this + 4, (unsigned __int16 *)&v29, &v29);
              }
            }
          }
          return;
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 15;
        uint64_t v28 = "Out of memory";
      }
      exception[1] = v28;
      *((unsigned char *)exception + 16) = 0;
    }
    *((void *)this + 2) = a2;
    if (*((unsigned char *)this + 8)) {
      PSIR_MemoryReader::ParseMemoryResources();
    }
    uint64_t v10 = a3;
    goto LABEL_10;
  }
}

void PSIR_MemoryReader::SetImgRsrc(PSIR_MemoryReader *this, unsigned __int16 a2, const void *a3)
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for PSIR_Reader";
  *((unsigned char *)exception + 16) = 0;
}

void PSIR_MemoryReader::DeleteImgRsrc(PSIR_MemoryReader *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for PSIR_Reader";
  *((unsigned char *)exception + 16) = 0;
}

uint64_t PSIR_MemoryReader::IsChanged(PSIR_MemoryReader *this)
{
  return 0;
}

uint64_t PSIR_MemoryReader::IsLegacyChanged(PSIR_MemoryReader *this)
{
  return 0;
}

void PSIR_MemoryReader::ParseFileResources()
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for PSIR_Reader";
  *((unsigned char *)exception + 16) = 0;
}

uint64_t PSIR_MemoryReader::UpdateMemoryResources(PSIR_MemoryReader *this, void **a2)
{
  if (a2) {
    *a2 = (void *)*((void *)this + 2);
  }
  return *((unsigned int *)this + 3);
}

void PSIR_MemoryReader::UpdateFileResources()
{
  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for PSIR_Reader";
  *((unsigned char *)exception + 16) = 0;
}

void PSIR_MemoryReader::~PSIR_MemoryReader(void **this)
{
  PSIR_MemoryReader::~PSIR_MemoryReader(this);

  JUMPOUT(0x18C11C0E0);
}

{
  *this = &unk_1ED4E4298;
  if (*((unsigned char *)this + 8)) {
    free(this[2]);
  }
  std::__tree<unsigned long long>::destroy((uint64_t)(this + 3), this[4]);
}

uint64_t *std::__tree<std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_Manager::ImgRsrcInfo>>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t v11 = 0;
  float v12 = 0;
  uint64_t v6 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__find_equal<unsigned short>(a1, a2, &v12, &v11, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unsigned int v7 = (uint64_t *)operator new(0x40uLL);
    long long v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

void PSIR_MemoryReader::ParseMemoryResources()
{
}

void WXMPUtils_ComposeArrayItemPath_1(char *a1, char *a2, int a3, uint64_t a4, void (*a5)(uint64_t, std::string *, uint64_t), void *a6)
{
  *a6 = 0;
  if (!a1 || !*a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v11 = "Empty schema namespace URI";
    goto LABEL_18;
  }
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v11 = "Empty array name";
LABEL_18:
    exception[1] = v11;
    *((unsigned char *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeArrayItemPath(a1, a2, a3, &__p);
  if (a4)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v9 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    }
    a5(a4, p_p, v9);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18889FAD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 3)
  {
    std::string::size_type v18 = __cxa_begin_catch(a1);
    *(_DWORD *)(v15 + 32) = *(_DWORD *)v18;
    *(void *)(v15 + 8) = "XMP";
    unsigned int v19 = (const char *)*((void *)v18 + 1);
    if (!v19) {
      unsigned int v19 = "";
    }
  }
  else
  {
    int v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v15 + 32) = 13;
      uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      unsigned int v19 = "";
      if (v21) {
        unsigned int v19 = (const char *)v21;
      }
    }
    else
    {
      *(_DWORD *)(v15 + 32) = 14;
      unsigned int v19 = "Caught unknown exception";
    }
  }
  *(void *)uint64_t v15 = v19;
  __cxa_end_catch();
  JUMPOUT(0x18889FA74);
}

void WXMPUtils_ComposeStructFieldPath_1(char *a1, char *a2, char *a3, unsigned char *a4, uint64_t a5, void (*a6)(uint64_t, std::string *, uint64_t), void *a7)
{
  *a7 = 0;
  if (!a1 || !*a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    float v12 = "Empty schema namespace URI";
    goto LABEL_24;
  }
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    float v12 = "Empty struct name";
    goto LABEL_24;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    float v12 = "Empty field namespace URI";
    goto LABEL_24;
  }
  if (!a4 || !*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    float v12 = "Empty field name";
LABEL_24:
    exception[1] = v12;
    *((unsigned char *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeStructFieldPath(a1, a2, a3, a4, &__p);
  if (a5)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v10 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    }
    a6(a5, p_p, v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18889FCE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 3)
  {
    std::string::size_type v18 = __cxa_begin_catch(a1);
    *(_DWORD *)(v15 + 32) = *(_DWORD *)v18;
    *(void *)(v15 + 8) = "XMP";
    unsigned int v19 = (const char *)*((void *)v18 + 1);
    if (!v19) {
      unsigned int v19 = "";
    }
  }
  else
  {
    int v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v15 + 32) = 13;
      uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      unsigned int v19 = "";
      if (v21) {
        unsigned int v19 = (const char *)v21;
      }
    }
    else
    {
      *(_DWORD *)(v15 + 32) = 14;
      unsigned int v19 = "Caught unknown exception";
    }
  }
  *(void *)uint64_t v15 = v19;
  __cxa_end_catch();
  JUMPOUT(0x18889FC44);
}

void WXMPUtils_ConvertFromFloat_1(const char *a1, uint64_t a2, void (*a3)(uint64_t, std::string *, uint64_t), void *a4, double a5)
{
  *a4 = 0;
  if (!a1) {
    a1 = "";
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromFloat(a1, &__p, a5);
  if (a2)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v8 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    }
    a3(a2, p_p, v8);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18889FE40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 3)
  {
    unsigned int v19 = __cxa_begin_catch(a1);
    *(_DWORD *)(v15 + 32) = *(_DWORD *)v19;
    *(void *)(v15 + 8) = "XMP";
    int v20 = (const char *)*((void *)v19 + 1);
    if (!v20) {
      int v20 = v16;
    }
  }
  else
  {
    uint64_t v21 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v15 + 32) = 13;
      uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
      if (v22) {
        int v20 = (const char *)v22;
      }
      else {
        int v20 = v16;
      }
    }
    else
    {
      *(_DWORD *)(v15 + 32) = 14;
      int v20 = "Caught unknown exception";
    }
  }
  *(void *)uint64_t v15 = v20;
  __cxa_end_catch();
  JUMPOUT(0x18889FE2CLL);
}

uint64_t WXMPUtils_ConvertToBool_1(XMPUtils *a1, uint64_t a2)
{
  *(void *)a2 = 0;
  if (!a1 || !*(unsigned char *)a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Empty string value";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t result = XMPUtils::ConvertToBool(a1, (const char *)a2);
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

void sub_18889FF58(void *a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    uint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      uint64_t v5 = "";
    }
    *(void *)uint64_t v2 = v5;
    *(void *)(v2 + 8) = "XMP";
  }
  else
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v6 + 16))(v6);
      uint64_t v8 = "";
      if (v7) {
        uint64_t v8 = (const char *)v7;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      uint64_t v8 = "Caught unknown exception";
    }
    *(void *)uint64_t v2 = v8;
  }
  __cxa_end_catch();
}

uint64_t WXMPUtils_ConvertToDate_1(char *a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Null output date";
    *((unsigned char *)exception + 16) = 0;
  }
  return XMPUtils::ConvertToDate(a1, a2);
}

uint64_t WXMPUtils_ConvertToUTCTime_1(uint64_t a1, void *a2)
{
  *a2 = 0;
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Null output date";
    *((unsigned char *)exception + 16) = 0;
  }
  return XMPUtils::ConvertToUTCTime(a1);
}

void WXMPUtils_PackageForJPEG_1(const std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *, uint64_t), void *a6)
{
  *a6 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  memset(&v19, 0, sizeof(v19));
  memset(&__p, 0, sizeof(__p));
  uint64_t v17 = &a1->__r_.__value_.__r.__words[2];
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)&a1->__r_.__value_.__r.__words[2], 0);
  XMPUtils::PackageForJPEG(a1, (uint64_t)&v20, &v19, &__p);
  if (a2)
  {
    if (v22 >= 0) {
      uint64_t v11 = &v20;
    }
    else {
      uint64_t v11 = v20;
    }
    if (v22 >= 0) {
      uint64_t v12 = HIBYTE(v22);
    }
    else {
      uint64_t v12 = v21;
    }
    a5(a2, v11, v12);
  }
  if (a3)
  {
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v13 = &v19;
    }
    else {
      float v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v14 = LODWORD(v19.__r_.__value_.__r.__words[1]);
    }
    a5(a3, v13, v14);
  }
  if (a4)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v16 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    }
    a5(a4, p_p, v16);
  }
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v20);
  }
}

void sub_1888A038C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a2 == 3)
  {
    BOOL v30 = __cxa_begin_catch(a1);
    *(_DWORD *)(v27 + 32) = *(_DWORD *)v30;
    *(void *)(v27 + 8) = "XMP";
    int v31 = (const char *)*((void *)v30 + 1);
    if (!v31) {
      int v31 = "";
    }
  }
  else
  {
    int v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v27 + 32) = 13;
      uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
      int v31 = "";
      if (v33) {
        int v31 = (const char *)v33;
      }
    }
    else
    {
      *(_DWORD *)(v27 + 32) = 14;
      int v31 = "Caught unknown exception";
    }
  }
  *(void *)uint64_t v27 = v31;
  __cxa_end_catch();
  JUMPOUT(0x1888A0374);
}

void WXMPUtils_MergeFromJPEG_1(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (!a1)
  {
    uint64_t v6 = "Output XMP pointer is null";
    goto LABEL_6;
  }
  if (a1 == a2)
  {
    uint64_t v6 = "Full and extended XMP pointers match";
LABEL_6:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = v6;
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v9 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  uint64_t v8 = (XMP_ReadWriteLock *)(a2 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a2 + 16), 0);
  XMPUtils::MergeFromJPEG((XMPUtils *)a1, (XMPMeta *)a2, v5);
  XMP_AutoLock::~XMP_AutoLock(&v8);
  XMP_AutoLock::~XMP_AutoLock(&v9);
}

void sub_1888A0540(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, XMP_ReadWriteLock *a10)
{
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)&a9);
  XMP_AutoLock::~XMP_AutoLock(&a10);
  if (a2 == 3)
  {
    float v13 = __cxa_begin_catch(a1);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)v13;
    *(void *)(v10 + 8) = "XMP";
    uint64_t v14 = (const char *)*((void *)v13 + 1);
    if (!v14) {
      uint64_t v14 = "";
    }
  }
  else
  {
    uint64_t v15 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v10 + 32) = 13;
      uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
      uint64_t v14 = "";
      if (v16) {
        uint64_t v14 = (const char *)v16;
      }
    }
    else
    {
      *(_DWORD *)(v10 + 32) = 14;
      uint64_t v14 = "Caught unknown exception";
    }
  }
  *(void *)uint64_t v10 = v14;
  __cxa_end_catch();
  JUMPOUT(0x1888A04ECLL);
}

void WXMPUtils_CatenateArrayItems_1(void *a1, char *a2, unsigned char *a3, char *a4, const char *a5, unsigned int a6, uint64_t a7, void (*a8)(uint64_t, std::string *, uint64_t), void *a9)
{
  *a9 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v22 = "Empty schema namespace URI";
    goto LABEL_24;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v22 = "Empty array name";
LABEL_24:
    exception[1] = v22;
    *((unsigned char *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  unsigned int v23 = (XMP_ReadWriteLock *)(a1 + 2);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 2), 0);
  if (a5) {
    uint64_t v17 = a5;
  }
  else {
    uint64_t v17 = "\"";
  }
  if (a4) {
    std::string::size_type v18 = a4;
  }
  else {
    std::string::size_type v18 = "; ";
  }
  XMPUtils::CatenateArrayItems(a1, a2, a3, v18, v17, a6, &__p);
  if (a7)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v20 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    }
    a8(a7, p_p, v20);
  }
  XMP_AutoLock::~XMP_AutoLock(&v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1888A0780(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    *(_DWORD *)(v15 + 32) = *(_DWORD *)v17;
    *(void *)(v15 + 8) = "XMP";
    std::string::size_type v18 = (const char *)*((void *)v17 + 1);
    if (!v18) {
      std::string::size_type v18 = "";
    }
  }
  else
  {
    std::string v19 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v15 + 32) = 13;
      uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v19 + 16))(v19);
      std::string::size_type v18 = "";
      if (v20) {
        std::string::size_type v18 = (const char *)v20;
      }
    }
    else
    {
      *(_DWORD *)(v15 + 32) = 14;
      std::string::size_type v18 = "Caught unknown exception";
    }
  }
  *(void *)uint64_t v15 = v18;
  __cxa_end_catch();
  JUMPOUT(0x1888A0710);
}

void WXMPUtils_SeparateArrayItems_1(uint64_t a1, XMPMeta *a2, char *a3, const char *a4, char *a5, void *a6)
{
  *a6 = 0;
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    uint64_t v14 = "Output XMP pointer is null";
LABEL_13:
    exception[1] = v14;
    *((unsigned char *)exception + 16) = 0;
  }
  if (!a2 || !*(unsigned char *)a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v14 = "Empty schema namespace URI";
    goto LABEL_13;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v14 = "Empty array name";
    goto LABEL_13;
  }
  uint64_t v15 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  if (a5) {
    uint64_t v12 = a5;
  }
  else {
    uint64_t v12 = "";
  }
  XMPUtils::SeparateArrayItems((XMPUtils *)a1, a2, a3, a4, v12, v11);
  XMP_AutoLock::~XMP_AutoLock(&v15);
}

void sub_1888A0968(void *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  if (a2 == 3)
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    *(_DWORD *)(v3 + 32) = *(_DWORD *)v6;
    uint64_t v7 = (const char *)*((void *)v6 + 1);
    if (!v7) {
      uint64_t v7 = "";
    }
    *(void *)uint64_t v3 = v7;
    *(void *)(v3 + 8) = "XMP";
  }
  else
  {
    uint64_t v8 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v3 + 32) = 13;
      uint64_t v9 = (*(uint64_t (**)(void *))(*(void *)v8 + 16))(v8);
      uint64_t v10 = "";
      if (v9) {
        uint64_t v10 = (const char *)v9;
      }
    }
    else
    {
      *(_DWORD *)(v3 + 32) = 14;
      uint64_t v10 = "Caught unknown exception";
    }
    *(void *)uint64_t v3 = v10;
  }
  __cxa_end_catch();
  JUMPOUT(0x1888A08E4);
}

void WXMPUtils_RemoveProperties_1(uint64_t a1, XMPMeta *a2, char *a3, const char *a4, void *a5)
{
  *a5 = 0;
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Output XMP pointer is null";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t v12 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  if (a3) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = "";
  }
  if (a2) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = (XMPMeta *)"";
  }
  XMPUtils::RemoveProperties((XMPUtils *)a1, v10, v9, a4);
  XMP_AutoLock::~XMP_AutoLock(&v12);
}

void sub_1888A0AEC(void *a1, int a2, uint64_t a3, ...)
{
  va_start(va, a3);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  if (a2 == 3)
  {
    uint64_t v6 = __cxa_begin_catch(a1);
    *(_DWORD *)(v3 + 32) = *(_DWORD *)v6;
    uint64_t v7 = (const char *)*((void *)v6 + 1);
    if (!v7) {
      uint64_t v7 = "";
    }
    *(void *)uint64_t v3 = v7;
    *(void *)(v3 + 8) = "XMP";
  }
  else
  {
    uint64_t v8 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v3 + 32) = 13;
      uint64_t v9 = (*(uint64_t (**)(void *))(*(void *)v8 + 16))(v8);
      uint64_t v10 = "";
      if (v9) {
        uint64_t v10 = (const char *)v9;
      }
    }
    else
    {
      *(_DWORD *)(v3 + 32) = 14;
      uint64_t v10 = "Caught unknown exception";
    }
    *(void *)uint64_t v3 = v10;
  }
  __cxa_end_catch();
  JUMPOUT(0x1888A0AA0);
}

void WXMPUtils_DuplicateSubtree_1(uint64_t a1, uint64_t a2, XMPMeta *a3, char *a4, char *a5, char *a6, const char *a7, void *a8)
{
  *a8 = 0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    uint64_t v16 = "Output XMP pointer is null";
LABEL_18:
    exception[1] = v16;
    *((unsigned char *)exception + 16) = 0;
  }
  if (!a3 || !*(unsigned char *)a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    uint64_t v16 = "Empty source schema URI";
    goto LABEL_18;
  }
  if (!a4 || !*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    uint64_t v16 = "Empty source root name";
    goto LABEL_18;
  }
  if (a5) {
    float v13 = a5;
  }
  else {
    float v13 = (char *)a3;
  }
  if (a6) {
    uint64_t v14 = a6;
  }
  else {
    uint64_t v14 = a4;
  }
  std::string::size_type v18 = 0;
  if (a1 != a2)
  {
    std::string::size_type v18 = (XMP_ReadWriteLock *)(a1 + 16);
    XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  }
  uint64_t v17 = (XMP_ReadWriteLock *)(a2 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a2 + 16), 1);
  XMPUtils::DuplicateSubtree((XMPUtils *)a1, (const XMPMeta *)a2, a3, a4, v13, v14, a7);
  XMP_AutoLock::~XMP_AutoLock(&v17);
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void sub_1888A0CFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2 == 3)
  {
    uint64_t v12 = __cxa_begin_catch(a1);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)v12;
    *(void *)(v10 + 8) = "XMP";
    float v13 = (const char *)*((void *)v12 + 1);
    if (!v13) {
      float v13 = "";
    }
  }
  else
  {
    uint64_t v14 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v10 + 32) = 13;
      uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
      float v13 = "";
      if (v15) {
        float v13 = (const char *)v15;
      }
    }
    else
    {
      *(_DWORD *)(v10 + 32) = 14;
      float v13 = "Caught unknown exception";
    }
  }
  *(void *)uint64_t v10 = v13;
  __cxa_end_catch();
  JUMPOUT(0x1888A0C74);
}

void *AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointer(AdobeXMPCore_Int::IStructureNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x635374724E6F6465)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x635374724E6F6465, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 792));
    }
  }
  else
  {
    this = AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal((void *)((char *)this + *(void *)(*this - 800)), a2, a3, 0);
    if (this) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = a4 == 0;
    }
    if (!v6)
    {
      uint64_t v7 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x635374724E6F6465, a2, v7);
    }
  }
  return this;
}

void sub_1888A0F10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointer(AdobeXMPCore_Int::IStructureNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 720)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer(AdobeXMPCore_Int::IStructureNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IStructureNode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 23, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IStructureNode_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 752))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer(AdobeXMPCore_Int::IStructureNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 728)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::getNode(AdobeXMPCore_Int::IStructureNode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(void *)(*(void *)this - 792), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IStructureNode_v1::GetNode, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 55, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v10)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  std::__shared_weak_count *v16;

  uint64_t v10 = a3;
  *a1 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v11 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v10 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + a3);
  }
  v10(&v15, v11, a7, a8, a9, a10);
  if (v15)
  {
    uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)&v15[*(void *)(*(void *)v15 - 56)] + 16))(&v15[*(void *)(*(void *)v15 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
    float v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v15[*(void *)(*(void *)v15 - 64)]
                                                              + 16))(&v15[*(void *)(*(void *)v15 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    float v13 = 0;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return v13;
}

void sub_1888A13A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x1888A1388);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888A1520(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IStructureNode_v1::GetNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 648))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::getNode(AdobeXMPCore_Int::IStructureNode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::IStructureNode_I::getNode((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 760)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::getChildNodeType(AdobeXMPCore_Int::IStructureNode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IStructureNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(void *)(*(void *)this - 792), 0, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IStructureNode_v1::GetChildNodeType, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 60, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IStructureNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,char const*,unsigned long long,char const*,unsigned long long>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = a4;
  *a1 = 0;
  uint64_t v12 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a4);
  }
  return v11(v12, a8, a9, a10, a11);
}

uint64_t AdobeXMPCore::IStructureNode_v1::GetChildNodeType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 640))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::getChildNodeType(AdobeXMPCore_Int::IStructureNode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::IStructureNode_I::getChildNodeType((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 752)), a2, a3, a4, a5, a6);
}

void AdobeXMPCore_Int::IStructureNode_I::insertNode(AdobeXMPCore_Int::IStructureNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 792);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v6);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IStructureNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (uint64_t (*)(void *, uint64_t))AdobeXMPCore::IStructureNode_v1::InsertNode, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 65, (uint64_t)&v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1888A1830(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IStructureNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  uint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(uint64_t (**)(void *, uint64_t))(*v7 + a3);
  }
  return a3(v7, a7);
}

uint64_t AdobeXMPCore::IStructureNode_v1::InsertNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 656))();
}

void virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::insertNode(AdobeXMPCore_Int::IStructureNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::removeNode(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)a1 + *(void *)(*a1 - 792), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IStructureNode_v1::RemoveNode, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 70, a2, a3, a4, a5);
}

uint64_t AdobeXMPCore::IStructureNode_v1::RemoveNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 672))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::removeNode(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return AdobeXMPCore_Int::IStructureNode_I::removeNode((void *)((char *)a1 + *(void *)(*a1 - 784)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::replaceNode(AdobeXMPCore_Int::IStructureNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5 = *(void *)(*(void *)this - 792);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v8);
  uint64_t v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, void *, uint64_t))AdobeXMPCore::IStructureNode_v1::ReplaceNode, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 75, (uint64_t)&v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_1888A1B30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *, uint64_t))(*v7 + a3);
  }
  a3(&v11, v7, a7);
  if (v11)
  {
    uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 56)] + 16))(&v11[*(void *)(*(void *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v11[*(void *)(*(void *)v11 - 64)] + 16))(&v11[*(void *)(*(void *)v11 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_1888A1CB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x1888A1C9CLL);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888A1E34(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IStructureNode_v1::ReplaceNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 664))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::replaceNode(AdobeXMPCore_Int::IStructureNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::IStructureNode_I::replaceNode((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(void *)(*(void *)this - 776)), a2, a3);
}

void *AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointer(AdobeXMPCore_Int::ICoreConfigurationManager_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x63436F6E664D6772)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63436F6E664D6772, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 168));
    }
  }
  else
  {
    this = AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointerInternal((void *)((char *)this + *(void *)(*this - 176)), a2, a3, 0);
    if (this) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = a4 == 0;
    }
    if (!v6)
    {
      uint64_t v7 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63436F6E664D6772, a2, v7);
    }
  }
  return this;
}

void sub_1888A1FC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointer(AdobeXMPCore_Int::ICoreConfigurationManager_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ICoreConfigurationManager_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ICoreConfigurationManager_I *)((char *)this + *(void *)(*(void *)this - 160)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::ICoreConfigurationManager_I::getInterfacePointer(AdobeXMPCore_Int::ICoreConfigurationManager_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICoreConfigurationManager_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreConfigurationManager_I.cpp", 23, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICoreConfigurationManager_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ICoreConfigurationManager_I::getInterfacePointer(AdobeXMPCore_Int::ICoreConfigurationManager_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::getInterfacePointer((AdobeXMPCore_Int::ICoreConfigurationManager_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::getInterfacePointer((AdobeXMPCore_Int::ICoreConfigurationManager_I *)((char *)this + *(void *)(*(void *)this - 168)), a2, a3, a4);
}

void *AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMParser_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x63444F4D50727372)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63444F4D50727372, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 304));
    }
  }
  else
  {
    if (a4)
    {
      uint64_t v5 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63444F4D50727372, a2, v5);
    }
    return 0;
  }
  return this;
}

void sub_1888A232C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMParser_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IDOMParser_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::getInterfacePointer(AdobeXMPCore_Int::IDOMParser_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMParser_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMParser_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMParser_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  uint64_t v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 280))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::IDOMParser_I::getInterfacePointer(AdobeXMPCore_Int::IDOMParser_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IDOMParser_I::getInterfacePointer((AdobeXMPCore_Int::IDOMParser_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::clone(AdobeXMPCore_Int::IDOMParser_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMParser_v1,AdobeXMPCore::IDOMParser_v1*,AdobeXMPCore::IDOMParser_v1>(a2, (uint64_t)this + *(void *)(*(void *)this - 304), (void (*)(char **__return_ptr, void *))AdobeXMPCore::IDOMParser_v1::Clone, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMParser_v1,AdobeXMPCore::IDOMParser_v1*,AdobeXMPCore::IDOMParser_v1>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 224)] + 16))(&v8[*(void *)(*(void *)v8 - 224)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 232)] + 16))(&v8[*(void *)(*(void *)v8 - 232)], 0x63444F4D50727372, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_1888A2714(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x1888A26F8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888A2890(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IDOMParser_v1::Clone(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 216))();
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::parse(AdobeXMPCore_Int::IDOMParser_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMParser_v1,AdobeXMPCore::IMetadata_v1 *,AdobeXMPCore::IMetadata_v1,char const*,unsigned long long>(a4, (uint64_t)this + *(void *)(*(void *)this - 304), (void (*)(char **__return_ptr, void *, uint64_t, uint64_t))AdobeXMPCore::IDOMParser_v1::Parse, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMParser_I.cpp", 57, (uint64_t)a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMParser_v1,AdobeXMPCore::IMetadata_v1 *,AdobeXMPCore::IMetadata_v1,char const*,unsigned long long>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, void *, uint64_t, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  uint64_t v8 = a3;
  *a1 = 0;
  float v13 = 0;
  uint64_t v14 = 0;
  uint64_t v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v8 = *(void (**)(char **__return_ptr, void *, uint64_t, uint64_t))(*v9 + a3);
  }
  v8(&v13, v9, a7, a8);
  if (v13)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 56)] + 16))(&v13[*(void *)(*(void *)v13 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v13[*(void *)(*(void *)v13 - 64)]
                                                              + 16))(&v13[*(void *)(*(void *)v13 - 64)], 0x634D657461646174, 1);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_1888A2AA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    uint64_t v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *uint64_t v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x1888A2A84);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888A2C1C(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::IDOMParser_v1::Parse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

void AdobeXMPCore_Int::IDOMParser_I::parseWithSpecificAction(AdobeXMPCore_Int::IDOMParser_I *this, AdobeXMPCore::INode_v1 *a2, uint64_t a3, unsigned int a4, AdobeXMPCore::INode_v1 *a5, const AdobeXMPCommon::IError_v1 **a6)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  AdobeXMPCore::INode_v1::MakeShared(a5, a2, &v11);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IDOMParser_v1,char const*,unsigned long long,AdobeXMPCore::IDOMParser_v1::eActionType,std::shared_ptr<AdobeXMPCore::INode_v1> &>(a6, (uint64_t)this + *(void *)(*(void *)this - 304), (uint64_t (*)(void *, uint64_t, uint64_t, void, uint64_t))AdobeXMPCore::IDOMParser_v1::ParseWithSpecificAction, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMParser_I.cpp", 63, (uint64_t)a2, a3, a4, (uint64_t)&v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1888A2D14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IDOMParser_v1,char const*,unsigned long long,AdobeXMPCore::IDOMParser_v1::eActionType,std::shared_ptr<AdobeXMPCore::INode_v1> &>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t, void, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v10 = a3;
  *a1 = 0;
  uint64_t v11 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t))(*v11 + a3);
  }
  return v10(v11, a7, a8, a9, a10);
}

uint64_t AdobeXMPCore::IDOMParser_v1::ParseWithSpecificAction(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

void AdobeXMPCore_Int::MetadataImpl::MetadataImpl(AdobeXMPCore_Int::MetadataImpl *this)
{
  *((void *)this + 26) = &unk_1ED4B8A20;
  *(void *)this = &unk_1ED4B7B98;
  *((void *)this + 4) = &unk_1ED4B7E40;
  *(void *)((char *)this + unk_1ED4B7B50) = &unk_1ED4B7EA0;
  *(void *)this = &unk_1ED4B81E8;
  *(void *)((char *)this + unk_1ED4B81A8) = &unk_1ED4B84F0;
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = &unk_1ED4B8550;
  *(void *)this = &unk_1ED4B7518;
  *(void *)((char *)this + unk_1ED4B74E0) = &unk_1ED4B7518;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = &unk_1ED4B7858;
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = &unk_1ED4B78B8;
  *((void *)this + 23) = &unk_1ED4BA350;
  *((void *)this + 10) = &unk_1ED4BFBC0;
  *(void *)this = &unk_1ED4C0030;
  *((void *)this + 4) = &unk_1ED4C0250;
  *((void *)this + 26) = &unk_1ED4C0338;
  *(void *)((char *)this + unk_1ED4BF998 + 80) = &unk_1ED4C02B0;
  *(void *)((char *)this + *(void *)(*((void *)this + 10) - 560) + 80) = &unk_1ED4C0338;
  *((void *)this + 9) = &unk_1ED4BD9C0;
  *(void *)this = &unk_1ED4BDEF8;
  *((void *)this + 4) = &unk_1ED4BE1A0;
  *((void *)this + 26) = &unk_1ED4BE770;
  *(void *)((char *)this + unk_1ED4BD708 + 72) = &unk_1ED4BE450;
  *(void *)((char *)this + *(void *)(*((void *)this + 9) - 704) + 72) = &unk_1ED4BE6E8;
  *(void *)((char *)this + *(void *)(*((void *)this + 9) - 712) + 72) = &unk_1ED4BE770;
  *((void *)this + 5) = &unk_1ED4BA948;
  *(void *)this = &unk_1ED4BAF58;
  *((void *)this + 4) = &unk_1ED4BB260;
  *((void *)this + 26) = &unk_1ED4BBD98;
  *(void *)((char *)this + unk_1ED4BA628 + 40) = &unk_1ED4BB558;
  *(void *)((char *)this + *(void *)(*((void *)this + 5) - 808) + 40) = &unk_1ED4BBA78;
  *(void *)((char *)this + *(void *)(*((void *)this + 5) - 816) + 40) = &unk_1ED4BBD10;
  *(void *)((char *)this + *(void *)(*((void *)this + 5) - 824) + 40) = &unk_1ED4BBD98;
  *(void *)this = &unk_1ED4B8DE8;
  *(void *)((char *)this + unk_1ED4B8BC8) = &unk_1ED4B8DE8;
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = &unk_1ED4B8DE8;
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = &unk_1ED4B9138;
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = &unk_1ED4BA2C8;
  *(void *)((char *)this + *(void *)(*(void *)this - 864)) = &unk_1ED4B94B0;
  *(void *)((char *)this + *(void *)(*(void *)this - 872)) = &unk_1ED4B9A88;
  *(void *)((char *)this + *(void *)(*(void *)this - 880)) = &unk_1ED4B9FA8;
  *(void *)((char *)this + *(void *)(*(void *)this - 888)) = &unk_1ED4BA240;
  *(void *)((char *)this + *(void *)(*(void *)this - 896)) = &unk_1ED4BA2C8;
  *((void *)this + 23) = &unk_1ED4BA420;
  *((void *)this + 24) = 0;
  *(void *)this = &unk_1ED4BA480;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = &unk_1ED4BA5A8;
  AdobeXMPCore_Int::NodeImpl::NodeImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this + 80), (const char *)&off_1ED4DCEA0, (AdobeXMPCore_Int::IUTF8String_I *)"http://metadata", (const char *)0xF);
}

void sub_1888A3804(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(v4, (uint64_t *)&off_1ED4DCDB8);
  AdobeXMPCore_Int::NodeImpl::~NodeImpl(v3, (uint64_t *)&off_1ED4DCEA0);
  AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl(v1, (uint64_t *)&off_1ED4DCF08);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DCEF0);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MetadataImpl::GetAboutURI(AdobeXMPCore_Int::MetadataImpl *this@<X0>, void *a2@<X8>)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 968) + 8, 0);
  uint64_t v4 = *((void *)this + 2);
  *a2 = *((void *)this + 1);
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
}

void AdobeXMPCore_Int::MetadataImpl::SetAboutURI(AdobeXMPCore_Int::MetadataImpl *this, const char *a2)
{
  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(void *)(*(void *)this - 968) + 8, 1);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 56))(&v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
}

void sub_1888A3994(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

void AdobeXMPCore_Int::MetadataImpl::GetName(AdobeXMPCore_Int::MetadataImpl *this)
{
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetName(AdobeXMPCore_Int::MetadataImpl *this)
{
}

void AdobeXMPCore_Int::MetadataImpl::GetNameSpace(AdobeXMPCore_Int::MetadataImpl *this)
{
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetNameSpace(AdobeXMPCore_Int::MetadataImpl *this)
{
}

void AdobeXMPCore_Int::MetadataImpl::GetParent(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetParent(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t AdobeXMPCore_Int::MetadataImpl::GetParentNodeType(AdobeXMPCore_Int::MetadataImpl *this)
{
  return 0;
}

uint64_t virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetParentNodeType(AdobeXMPCore_Int::MetadataImpl *this)
{
  return 0;
}

void AdobeXMPCore_Int::MetadataImpl::ClearContents(AdobeXMPCore_Int::MetadataImpl *this)
{
  AdobeXMPCore_Int::StructureNodeImpl::ClearContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                      + *(void *)(*(void *)this
                                                                                                  - 928)));
  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(void *)(*(void *)this - 968) + 8, 1);
  (*(void (**)(void))(**((void **)this + 1) + 200))(*((void *)this + 1));
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::ClearContents(AdobeXMPCore_Int::MetadataImpl *this)
{
  AdobeXMPCore_Int::MetadataImpl::ClearContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(void *)(*(void *)this - 920)));
}

{
  AdobeXMPCore_Int::MetadataImpl::ClearContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(void *)(*(void *)this - 704)));
}

void AdobeXMPCore_Int::MetadataImpl::CloneContents(AdobeXMPCore_Int::MetadataImpl *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  AdobeXMPCore::IMetadata_v1::CreateMetadata(this);
}

void sub_1888A3DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore::IMetadata_v1::CreateMetadata(AdobeXMPCore::IMetadata_v1 *this)
{
  uint64_t v1 = (AdobeXMPCore_Int::MetadataImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xE8);
  AdobeXMPCore_Int::MetadataImpl::MetadataImpl(v1);
}

void sub_1888A3E94(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::CloneContents(AdobeXMPCore_Int::MetadataImpl *this)
{
  AdobeXMPCore_Int::MetadataImpl::CloneContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(void *)(*(void *)this - 928)));
}

{
  AdobeXMPCore_Int::MetadataImpl::CloneContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(void *)(*(void *)this - 712)));
}

void AdobeXMPCore_Int::MetadataImpl::ConvertToMetadata(AdobeXMPCore_Int::MetadataImpl *this)
{
  (**(void (***)(char *))((char *)this + *(void *)(*(void *)this - 944)))((char *)this + *(void *)(*(void *)this - 944));
  std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v2, (uint64_t)this);
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::MetadataImpl>(char *a1@<X0>, int a2@<W3>, void *a3@<X8>)
{
  if (a1 || !a2)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 944)])(&a1[*(void *)(*(void *)a1 - 944)]);
    std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(a3, (uint64_t)a1);
  }
  AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2);
}

void sub_1888A4138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::ConvertToMetadata(AdobeXMPCore_Int::MetadataImpl *this)
{
  AdobeXMPCore_Int::MetadataImpl::ConvertToMetadata((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                     + *(void *)(*(void *)this
                                                                                                 - 296)));
}

AdobeXMPCore_Int::IMemoryAllocator_I *AdobeXMPCore_Int::MetadataImpl::EnableFeature(AdobeXMPCore_Int::MetadataImpl *this, char *a2, size_t a3)
{
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v8 = 0;
  std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_string[abi:ne180100]((AdobeXMPCore_Int::IMemoryAllocator_I *)__dst, a2, a3);
  uint64_t result = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare(__dst, "alias");
  if (!result) {
    *((unsigned char *)this + 24) = 1;
  }
  if (SHIBYTE(v8) < 0)
  {
    uint64_t v5 = __dst[0];
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(result);
    return (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, const void *))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v5);
  }
  return result;
}

uint64_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare(const void **a1, char *__s)
{
  size_t v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != -1)
    {
      size_t v5 = *((unsigned __int8 *)a1 + 23);
      goto LABEL_6;
    }
LABEL_15:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v4 == -1) {
    goto LABEL_15;
  }
  uint64_t v6 = a1;
  a1 = (const void **)*a1;
  size_t v5 = (size_t)v6[1];
LABEL_6:
  if (v5 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = v5;
  }
  if (v5 < v4) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = v5 > v4;
  }
  LODWORD(result) = memcmp(a1, __s, v7);
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

AdobeXMPCore_Int::IMemoryAllocator_I *AdobeXMPCore_Int::MetadataImpl::DisableFeature(AdobeXMPCore_Int::MetadataImpl *this, char *a2, size_t a3)
{
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v8 = 0;
  std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_string[abi:ne180100]((AdobeXMPCore_Int::IMemoryAllocator_I *)__dst, a2, a3);
  uint64_t result = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare(__dst, "alias");
  if (!result) {
    *((unsigned char *)this + 24) = 0;
  }
  if (SHIBYTE(v8) < 0)
  {
    size_t v5 = __dst[0];
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(result);
    return (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, const void *))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v5);
  }
  return result;
}

void AdobeXMPCore_Int::IsNodeAlias()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL);
}

void sub_1888A45A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  BOOL v24 = *(std::__shared_weak_count **)(v22 - 48);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

BOOL AdobeXMPCore_Int::HandleConstAlias(void *a1, AdobeXMPCore::INode_v1 **a2, char **a3, uint64_t *a4)
{
  size_t v5 = *a3;
  if (*a3 == a3[1])
  {
    std::string __p = 0;
    uint64_t v56 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 4, 2);
  }
  if ((*((_DWORD *)v5 + 6) & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  std::string __p = 0;
  if (v5[23] < 0) {
    size_t v5 = *(char **)v5;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v5);
  uint64_t v11 = *a3;
  uint64_t v12 = (const std::string *)(*a3 + 32);
  if ((*a3)[55] < 0)
  {
    uint64_t v14 = *((void *)v11 + 4);
    int64_t v13 = *((void *)v11 + 5);
  }
  else
  {
    int64_t v13 = (*a3)[55];
    uint64_t v14 = (uint64_t)(*a3 + 32);
  }
  if (v13 < 1) {
    goto LABEL_23;
  }
  uint64_t v15 = (unsigned char *)(v14 + v13);
  uint64_t v16 = (void *)v14;
  while (1)
  {
    uint64_t v17 = memchr(v16, 58, v13);
    if (!v17) {
      goto LABEL_23;
    }
    if (*v17 == 58) {
      break;
    }
    uint64_t v16 = v17 + 1;
    int64_t v13 = v15 - (unsigned char *)v16;
    if (v15 - (unsigned char *)v16 < 1) {
      goto LABEL_23;
    }
  }
  if (v17 == v15 || &v17[-v14] == (unsigned char *)-1) {
LABEL_23:
  }
    __assert_rtn("HandleConstAlias", "MetadataImpl.cpp", 141, "colonPos != std::string::npos");
  memset(&v54, 0, sizeof(v54));
  std::string::basic_string(&v54, v12, (std::string::size_type)&v17[-v14 + 1], 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v53);
  (*(void (**)(long long *__return_ptr))(*(void *)(*a1 + *(void *)(*(void *)*a1 - 792)) + 648))(&v53);
  long long v18 = v53;
  long long v53 = 0uLL;
  std::string v19 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (*((void *)&v53 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
    }
    uint64_t v20 = *a2;
    if (!*a2) {
      goto LABEL_89;
    }
  }
  else
  {
    uint64_t v20 = (AdobeXMPCore::INode_v1 *)v18;
    if (!(void)v18) {
      goto LABEL_89;
    }
  }
  if (a3[1] - *a3 == 64) {
    goto LABEL_26;
  }
  if ((*(unsigned int (**)(AdobeXMPCore::INode_v1 *))(*(void *)v20 + 40))(v20) != 2)
  {
    int v46 = "destNode->GetNodeType() == INode::kNTArray";
    int v47 = 148;
    goto LABEL_99;
  }
  uint64_t v21 = (uint64_t *)*a3;
  uint64_t v22 = (unsigned __int16 *)(*a3 + 64);
  int v23 = *((_DWORD *)*a3 + 22);
  if (v23 == 5)
  {
    int v25 = *((char *)v21 + 87);
    if (v25 < 0)
    {
      if (v21[9] != 23)
      {
LABEL_98:
        int v46 = "expandedXPath[ 2 ].step == \"[?xml:lang=\\\"x-default\\\"]\"";
        int v47 = 160;
LABEL_99:
        __assert_rtn("HandleConstAlias", "MetadataImpl.cpp", v47, v46);
      }
      uint64_t v22 = *(unsigned __int16 **)v22;
    }
    else if (v25 != 23)
    {
      goto LABEL_98;
    }
    uint64_t v31 = *(void *)v22;
    uint64_t v32 = *((void *)v22 + 1);
    uint64_t v33 = *(void *)((char *)v22 + 15);
    if (v31 == 0x616C3A6C6D783F5BLL && v32 == 0x65642D78223D676ELL && v33 == 0x5D22746C75616665)
    {
      if (*a2 && (*(unsigned int (**)(AdobeXMPCore::INode_v1 *))(*(void *)*a2 + 40))(*a2) == 2)
      {
        long long v53 = 0uLL;
        (*(void (**)(AdobeXMPCore::INode_v1 **__return_ptr))(*(void *)*a2 + 248))(&v51);
        (*(void (**)(long long *__return_ptr))(*(void *)((char *)v51 + *(void *)(*(void *)v51 - 688))
                                                       + 552))(&v53);
        if (v52) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
        }
        uint64_t v36 = 1;
        do
        {
          BOOL v6 = v53 != 0;
          if (!(void)v53) {
            break;
          }
          uint64_t v51 = 0;
          int v52 = 0;
          (*(void (**)(AdobeXMPCore::INode_v1 **__return_ptr))(*(void *)v53 + 48))(&v51);
          long long v50 = 0uLL;
          AdobeXMPCore::INode_v1::GetSimpleQualifier(v51, &v50);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v50 + 504))(&v48);
          uint64_t v37 = v48;
          uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 208))(v48);
          int v39 = (*(uint64_t (**)(uint64_t, void, uint64_t, const char *, uint64_t))(*(void *)v37 + 160))(v37, 0, v38, "x-default", -1);
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
          if (v39)
          {
            if (*((void *)&v50 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
            }
            (*(void (**)(long long *__return_ptr))(*(void *)v53 + 56))(&v50);
            long long v40 = v50;
            long long v50 = 0uLL;
            uint64_t v41 = (std::__shared_weak_count *)*((void *)&v53 + 1);
            long long v53 = v40;
            if (v41)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              if (*((void *)&v50 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
              }
            }
            ++v36;
            char v42 = 1;
          }
          else
          {
            int v44 = v51;
            uint64_t v43 = v52;
            if (v52) {
              atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v45 = (std::__shared_weak_count *)a2[1];
            *a2 = v44;
            a2[1] = (AdobeXMPCore::INode_v1 *)v43;
            if (v45) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v45);
            }
            if (*a4) {
              *a4 = v36;
            }
            if (*((void *)&v50 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
            }
            char v42 = 0;
          }
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
        }
        while ((v42 & 1) != 0);
        if (*((void *)&v53 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
        }
        goto LABEL_90;
      }
      goto LABEL_89;
    }
    goto LABEL_98;
  }
  if (v23 != 3) {
    goto LABEL_89;
  }
  int v24 = *((char *)v21 + 87);
  if (v24 < 0)
  {
    if (v21[9] != 3)
    {
LABEL_97:
      int v46 = "expandedXPath[ 2 ].step == \"[1]\"";
      int v47 = 151;
      goto LABEL_99;
    }
    uint64_t v22 = *(unsigned __int16 **)v22;
  }
  else if (v24 != 3)
  {
    goto LABEL_97;
  }
  int v26 = *v22;
  int v27 = *((unsigned __int8 *)v22 + 2);
  if (v26 != 12635 || v27 != 93) {
    goto LABEL_97;
  }
  (*(void (**)(AdobeXMPCore::INode_v1 **__return_ptr))(*(void *)*a2 + 248))(&v51);
  (*(void (**)(long long *__return_ptr))(*(void *)v51 + 656))(&v53);
  long long v29 = v53;
  long long v53 = 0uLL;
  BOOL v30 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v29;
  if (v30)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    if (*((void *)&v53 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
    }
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  if (!*a2)
  {
LABEL_89:
    BOOL v6 = 0;
    goto LABEL_90;
  }
  if (*a4)
  {
    BOOL v6 = 1;
    *a4 = 1;
    goto LABEL_90;
  }
LABEL_26:
  BOOL v6 = 1;
LABEL_90:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(__p);
  }
  return v6;
}

void sub_1888A4EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore::INode_v1::GetSimpleQualifier(AdobeXMPCore::INode_v1 *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = 0;
  BOOL v6 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 128))(&v5);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 232))(v5);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1888A5028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::MetadataImpl::ReplaceNode@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 88))(&v7);
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 72))(&v6);
    long long v8 = v7;
    if (*((void *)&v7 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v6;
    if (*((void *)&v6 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
      if (*((void *)&v6 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
      }
    }
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 88))(&v7);
    (*(void (**)(void))(*(void *)v7 + 192))(v7);
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 72))(&v6);
    (*(void (**)(void))(*(void *)v6 + 192))(v6);
    AdobeXMPCore_Int::IsNodeAlias();
  }
  uint64_t v4 = a1 + *(void *)(*(void *)a1 - 928);

  return AdobeXMPCore_Int::StructureNodeImpl::ReplaceNode(v4, a2, a3);
}

void sub_1888A58CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, void **a19)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  AdobeXMPCore_Int::StructureNodeImpl::QualifiedName::~QualifiedName((AdobeXMPCore_Int::StructureNodeImpl::QualifiedName *)&a19);
  a19 = (void **)(v19 - 88);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void sub_1888A597C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  JUMPOUT(0x1888A5964);
}

void sub_1888A5990()
{
}

BOOL AdobeXMPCore_Int::HandleNonConstAlias(char **a1, char **a2, char **a3, void *a4, void *a5)
{
  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a3, (uint64_t)a1);
  if (*a5 && (*(unsigned int (**)(void))(*(void *)*a5 + 40))(*a5) == 1)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)*a5 + 232))(&v96);
    (*(void (**)(void **__return_ptr))(*(void *)v96.__r_.__value_.__l.__data_ + 504))(&v97);
    uint64_t v11 = v97;
    uint64_t v10 = v98;
    int64_t v97 = 0;
    int v98 = 0;
    if (v96.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v12 = *a2;
  int64_t v13 = a2[1];
  uint64_t v14 = v13 - *a2;
  if (v13 == *a2)
  {
    int64_t v97 = 0;
    int v98 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(100, 102, 2);
  }
  if ((*((_DWORD *)v12 + 6) & 0x80000000) == 0)
  {
    BOOL v15 = 0;
    goto LABEL_9;
  }
  int v98 = 0;
  uint64_t v99 = 0;
  int64_t v97 = 0;
  if (v12[23] < 0) {
    uint64_t v12 = *(char **)v12;
  }
  std::string::basic_string[abi:ne180100]<0>(&v97, v12);
  uint64_t v17 = *a2;
  long long v18 = (const std::string *)(*a2 + 32);
  if ((*a2)[55] < 0)
  {
    uint64_t v20 = *((void *)v17 + 4);
    int64_t v19 = *((void *)v17 + 5);
  }
  else
  {
    int64_t v19 = (*a2)[55];
    uint64_t v20 = (uint64_t)(*a2 + 32);
  }
  if (v19 < 1) {
    goto LABEL_34;
  }
  uint64_t v21 = (unsigned char *)(v20 + v19);
  uint64_t v22 = (void *)v20;
  while (1)
  {
    int v23 = memchr(v22, 58, v19);
    if (!v23) {
      goto LABEL_34;
    }
    if (*v23 == 58) {
      break;
    }
    uint64_t v22 = v23 + 1;
    int64_t v19 = v21 - (unsigned char *)v22;
    if (v21 - (unsigned char *)v22 < 1) {
      goto LABEL_34;
    }
  }
  if (v23 == v21 || &v23[-v20] == (unsigned char *)-1) {
LABEL_34:
  }
    __assert_rtn("HandleNonConstAlias", "MetadataImpl.cpp", 224, "colonPos != std::string::npos");
  memset(&v96, 0, sizeof(v96));
  std::string::basic_string(&v96, v18, (std::string::size_type)&v23[-v20 + 1], 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v95);
  (*(void (**)(long long *__return_ptr))(*(void *)&(*a1)[*(void *)(*(void *)*a1 - 792)] + 648))(&v95);
  int v24 = (std::__shared_weak_count *)*((void *)&v95 + 1);
  int v25 = (uint64_t *)*a2;
  uint64_t v26 = (a2[1] - *a2) >> 5;
  if (v26 == 2)
  {
    if (!(void)v95)
    {
      long long v95 = 0uLL;
      if (v14 == 64)
      {
        if (v99 >= 0) {
          int v27 = (AdobeXMPCore::ISimpleNode_v1 *)&v97;
        }
        else {
          int v27 = (AdobeXMPCore::ISimpleNode_v1 *)v97;
        }
        if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v28 = &v96;
        }
        else {
          uint64_t v28 = (std::string *)v96.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        if (v99 >= 0) {
          int v27 = (AdobeXMPCore::ISimpleNode_v1 *)&v97;
        }
        else {
          int v27 = (AdobeXMPCore::ISimpleNode_v1 *)v97;
        }
        if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v28 = &v96;
        }
        else {
          uint64_t v28 = (std::string *)v96.__r_.__value_.__r.__words[0];
        }
      }
      std::string v92 = 0;
      std::string::size_type v93 = 0;
      AdobeXMPCore_Int::CreateTerminalNode(v27, (const char *)v28, 0, &v92, &v94);
      long long v33 = v94;
      long long v94 = 0uLL;
      std::string::size_type v34 = (std::__shared_weak_count *)*((void *)&v95 + 1);
      long long v95 = v33;
      if (v34)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        if (*((void *)&v94 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
        }
      }
      if ((void)v95)
      {
        if (v11)
        {
          (*(void (**)(long long *__return_ptr))(*(void *)v95 + 232))(&v94);
          uint64_t v35 = v94;
          uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v11 + 192))(v11);
          uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v11 + 208))(v11);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 512))(v35, v36, v37);
          if (*((void *)&v94 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
          }
        }
        uint64_t v38 = *a3;
        int v39 = *a1;
        if (*a1) {
          long long v40 = &v39[*(void *)(*(void *)v39 - 544)];
        }
        else {
          long long v40 = 0;
        }
        if (v38 == v40)
        {
          (*(void (**)(char *, long long *))(*(void *)&v39[*(void *)(*(void *)v39 - 792)] + 656))(&v39[*(void *)(*(void *)v39 - 792)], &v95);
        }
        else
        {
          (*(void (**)(long long *__return_ptr))(*(void *)v38 + 240))(&v94);
          (*(void (**)(void, long long *))(*(void *)(v94 + *(void *)(*(void *)v94 - 688)) + 520))(v94 + *(void *)(*(void *)v94 - 688), &v95);
          if (*((void *)&v94 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
          }
        }
        long long v83 = (char *)*((void *)&v95 + 1);
        unsigned int v82 = (char *)v95;
        if (*((void *)&v95 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        int64_t v84 = (std::__shared_weak_count *)a3[1];
        *a3 = v82;
        a3[1] = v83;
        if (v84)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v84);
          unsigned int v82 = *a3;
        }
        BOOL v15 = v82 != 0;
      }
      else
      {
        BOOL v15 = 0;
      }
      if (*((void *)&v95 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
      }
      goto LABEL_180;
    }
    goto LABEL_179;
  }
  if (v26 != 3)
  {
    uint64_t v85 = "expandedXPath.size() == 3";
    int v86 = 246;
    goto LABEL_189;
  }
  long long v29 = (unsigned __int16 *)(v25 + 8);
  int v30 = *((_DWORD *)v25 + 22);
  if (v30 == 5)
  {
    int v32 = *((char *)v25 + 87);
    int v87 = (std::__shared_weak_count *)*((void *)&v95 + 1);
    if (v32 < 0)
    {
      if (v25[9] != 23) {
        goto LABEL_188;
      }
      long long v29 = *(unsigned __int16 **)v29;
    }
    else if (v32 != 23)
    {
      goto LABEL_188;
    }
    uint64_t v47 = *(void *)v29;
    uint64_t v48 = *((void *)v29 + 1);
    uint64_t v49 = *(void *)((char *)v29 + 15);
    if (v47 == 0x616C3A6C6D783F5BLL && v48 == 0x65642D78223D676ELL && v49 == 0x5D22746C75616665)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)&(*a1)[*(void *)(*(void *)*a1 - 792)] + 648))(&v95);
      long long v52 = v95;
      long long v95 = 0uLL;
      long long v53 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v52;
      if (v53)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        if (*((void *)&v95 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
        }
      }
      long long v95 = 0uLL;
      if (v99 >= 0) {
        std::string v54 = (AdobeXMPCore::ISimpleNode_v1 *)&v97;
      }
      else {
        std::string v54 = (AdobeXMPCore::ISimpleNode_v1 *)v97;
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v55 = &v96;
      }
      else {
        std::string::size_type v55 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      long long v94 = 0uLL;
      AdobeXMPCore_Int::CreateTerminalNode(v54, (const char *)v55, 4608, &v94, &v95);
      uint64_t v56 = &(*a1)[*(void *)(*(void *)*a1 - 688)];
      (*(void (**)(char *, long long *))(*(void *)v56 + 520))(v56, &v95);
      uint64_t v58 = (char *)*((void *)&v95 + 1);
      uint64_t v57 = (char *)v95;
      if (*((void *)&v95 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v59 = (std::__shared_weak_count *)a3[1];
      *a3 = v57;
      a3[1] = v58;
      if (v59)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
        uint64_t v57 = *a3;
      }
      long long v94 = 0uLL;
      (*(void (**)(char **__return_ptr))(*(void *)v57 + 248))(&v92);
      (*(void (**)(long long *__return_ptr))(*(void *)&v92[*(void *)(*(void *)v92 - 688)] + 552))(&v94);
      if (v93) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v93);
      }
      int v60 = 1;
      do
      {
        if (!(void)v94)
        {
          std::string v92 = 0;
          std::string::size_type v93 = 0;
          AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode((AdobeXMPCore::ISimpleNode_v1 *)"http://www.w3.org/XML/1998/namespace", (const char *)0xFFFFFFFFFFFFFFFFLL, "lang", (const char *)0xFFFFFFFFFFFFFFFFLL, "x-default", (const char *)0xFFFFFFFFFFFFFFFFLL);
        }
        std::string v92 = 0;
        std::string::size_type v93 = 0;
        (*(void (**)(char **__return_ptr))(*(void *)v94 + 48))(&v92);
        long long v91 = 0uLL;
        (*(void (**)(long long *__return_ptr))(*(void *)v92 + 128))(&v91);
        if ((*(unsigned int (**)(void))(*(void *)v91 + 40))(v91) != 1) {
          goto LABEL_105;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v91 + 232))(&v88);
        (*(void (**)(long long *__return_ptr))(*(void *)v88 + 504))(&v90);
        uint64_t v61 = v90;
        uint64_t v62 = (*(uint64_t (**)(void))(*(void *)v90 + 208))(v90);
        int v63 = (*(uint64_t (**)(uint64_t, void, uint64_t, const char *, uint64_t))(*(void *)v61 + 160))(v61, 0, v62, "x-default", -1);
        if (*((void *)&v90 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v90 + 1));
        }
        if (v89) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v89);
        }
        if (!v63)
        {
          unint64_t v68 = v92;
          uint64_t v67 = v93;
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v69 = (std::__shared_weak_count *)a3[1];
          *a3 = v68;
          a3[1] = (char *)v67;
          if (v69) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v69);
          }
          char v66 = 0;
          if (*a4) {
            *a4 = v60;
          }
        }
        else
        {
LABEL_105:
          (*(void (**)(long long *__return_ptr))(*(void *)v94 + 56))(&v90);
          long long v64 = v90;
          long long v90 = 0uLL;
          uint64_t v65 = (std::__shared_weak_count *)*((void *)&v94 + 1);
          long long v94 = v64;
          if (v65)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v65);
            if (*((void *)&v90 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v90 + 1));
            }
          }
          ++v60;
          char v66 = 1;
        }
        if (*((void *)&v91 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
        }
        if (v93) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v93);
        }
      }
      while ((v66 & 1) != 0);
      if (*((void *)&v94 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
      }
      int v24 = v87;
      if (*((void *)&v95 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
      }
      goto LABEL_179;
    }
LABEL_188:
    uint64_t v85 = "expandedXPath[ 2 ].step == \"[?xml:lang=\\\"x-default\\\"]\"";
    int v86 = 272;
LABEL_189:
    __assert_rtn("HandleNonConstAlias", "MetadataImpl.cpp", v86, v85);
  }
  if (v30 == 3)
  {
    int v31 = *((char *)v25 + 87);
    if (v31 < 0)
    {
      if (v25[9] != 3)
      {
LABEL_187:
        uint64_t v85 = "expandedXPath[ 2 ].step == \"[1]\"";
        int v86 = 248;
        goto LABEL_189;
      }
      long long v29 = *(unsigned __int16 **)v29;
    }
    else if (v31 != 3)
    {
      goto LABEL_187;
    }
    int v41 = *v29;
    int v42 = *((unsigned __int8 *)v29 + 2);
    if (v41 != 12635 || v42 != 93) {
      goto LABEL_187;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)&(*a1)[*(void *)(*(void *)*a1 - 792)] + 648))(&v95);
    long long v44 = v95;
    long long v95 = 0uLL;
    uint64_t v45 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v44;
    if (v45)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      if (*((void *)&v95 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
      }
      int v46 = *a3;
    }
    else
    {
      int v46 = (char *)v44;
    }
    if (!v46)
    {
      long long v95 = 0uLL;
      if (v99 >= 0) {
        uint64_t v70 = (AdobeXMPCore::ISimpleNode_v1 *)&v97;
      }
      else {
        uint64_t v70 = (AdobeXMPCore::ISimpleNode_v1 *)v97;
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v71 = &v96;
      }
      else {
        BOOL v71 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      long long v94 = 0uLL;
      AdobeXMPCore_Int::CreateTerminalNode(v70, (const char *)v71, 1536, &v94, &v95);
      BOOL v72 = &(*a1)[*(void *)(*(void *)*a1 - 688)];
      (*(void (**)(char *, long long *))(*(void *)v72 + 520))(v72, &v95);
      long long v73 = v95;
      if (*((void *)&v95 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unsigned int v74 = (std::__shared_weak_count *)a3[1];
      *(_OWORD *)a3 = v73;
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      if (*((void *)&v95 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
      }
      int v46 = *a3;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v46 + 248))(&v94);
    (*(void (**)(long long *__return_ptr))(*(void *)v94 + 656))(&v95);
    uint64_t v75 = v95;
    if (*((void *)&v95 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
    }
    if (*((void *)&v94 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
    }
    if (!v75)
    {
      long long v95 = 0uLL;
      if (v99 >= 0) {
        uint64_t v78 = (AdobeXMPCore::ISimpleNode_v1 *)&v97;
      }
      else {
        uint64_t v78 = (AdobeXMPCore::ISimpleNode_v1 *)v97;
      }
      if (v99 >= 0) {
        uint64_t v79 = (std::__shared_weak_count *)HIBYTE(v99);
      }
      else {
        uint64_t v79 = v98;
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v80 = &v96;
      }
      else {
        unint64_t v80 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v96.__r_.__value_.__l.__size_;
      }
      AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v78, (const char *)v79, (const char *)v80, (const char *)size, 0, (const char *)0xFFFFFFFFFFFFFFFFLL);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)*a3 + 248))(&v94);
    (*(void (**)(long long *__return_ptr))(*(void *)v94 + 656))(&v95);
    long long v76 = v95;
    long long v95 = 0uLL;
    uint64_t v77 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v76;
    if (v77)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      if (*((void *)&v95 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
      }
    }
    if (*((void *)&v94 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
    }
    if (*a4)
    {
      BOOL v15 = 1;
      *a4 = 1;
      goto LABEL_180;
    }
LABEL_179:
    BOOL v15 = 1;
    goto LABEL_180;
  }
  BOOL v15 = 0;
LABEL_180:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99) < 0) {
    operator delete(v97);
  }
LABEL_9:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v15;
}

void sub_1888A6EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'AdobeXMPCore_Int::MetadataImpl::ReplaceNode@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return AdobeXMPCore_Int::MetadataImpl::ReplaceNode((uint64_t)a1 + *(void *)(*a1 - 720), a2, a3);
}

void AdobeXMPCore_Int::MetadataImpl::InsertNode(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      memset(&v6[2], 0, 24);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 88))(&v5);
      (*(void (**)(uint64_t))(*(void *)v5 + 192))(v5);
      (*(void (**)(void *__return_ptr))(*(void *)*a2 + 72))(v6);
      (*(void (**)(void))(*(void *)v6[0] + 192))(v6[0]);
      AdobeXMPCore_Int::IsNodeAlias();
    }
  }
  else
  {
    uint64_t v4 = (void *)(a1 + *(void *)(*(void *)a1 - 928));
    AdobeXMPCore_Int::StructureNodeImpl::InsertNode(v4, a2);
  }
}

void sub_1888A73A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a14);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  a14 = (void **)(v19 - 56);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::InsertNode(void *a1, uint64_t *a2)
{
}

void AdobeXMPCore_Int::MetadataImpl::RemoveNode(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    (*(void (**)(void))(*(void *)*a2 + 192))();
    (*(void (**)(void))(*(void *)*a3 + 192))();
    AdobeXMPCore_Int::IsNodeAlias();
  }
  uint64_t v5 = (void *)(a1 + *(void *)(*(void *)a1 - 928));

  AdobeXMPCore_Int::StructureNodeImpl::RemoveNode(v5, a2, a3, a4);
}

void sub_1888A7784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a14);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  a14 = (void **)(v21 - 72);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::RemoveNode(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
}

void AdobeXMPCore_Int::MetadataImpl::GetNode(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    (*(void (**)(void))(*(void *)*a2 + 192))();
    (*(void (**)(void))(*(void *)*a3 + 192))();
    AdobeXMPCore_Int::IsNodeAlias();
  }
  uint64_t v5 = (void *)(a1 + *(void *)(*(void *)a1 - 928));

  AdobeXMPCore_Int::StructureNodeImpl::GetNode(v5, a2, a3, a4);
}

void sub_1888A7AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a14);
  uint64_t v21 = *(std::__shared_weak_count **)(v18 + 8);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  a14 = (void **)&a18;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetNode(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
}

void AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(AdobeXMPCore_Int::MetadataImpl *this)
{
  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)(v2 + 40), (uint64_t *)&off_1ED4DCDB8);
  AdobeXMPCore_Int::NodeImpl::~NodeImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this + 80), (uint64_t *)&off_1ED4DCEA0);
  AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this + 208), (uint64_t *)&off_1ED4DCF08);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this + 184), (uint64_t *)&off_1ED4DCEF0);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(this);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(AdobeXMPCore_Int::MetadataImpl *this)
{
  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(void *)(*(void *)this - 24)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(void *)(*(void *)this - 24)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(void *)(*(void *)this - 56)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(void *)(*(void *)this - 56)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void virtual thunk to'AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(void *a1)
{
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;
  uint64_t vars8;

  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)a1 + *(void *)(*a1 - 48)));

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::CreateTerminalNode(AdobeXMPCore::ISimpleNode_v1 *a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, void *a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  if (*a4)
  {
    (*(void (**)(long long *__return_ptr, void, void, void))(*(void *)*a4 + 264))(&v8, *a4, 0, 0);
    long long v6 = v8;
    long long v8 = 0uLL;
    long long v7 = (std::__shared_weak_count *)a5[1];
    *(_OWORD *)a5 = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v8 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
      }
    }
  }
  else
  {
    if ((a3 & 0x1F00) == 0) {
      AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(a1, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, (const char *)0xFFFFFFFFFFFFFFFFLL, 0, (const char *)0xFFFFFFFFFFFFFFFFLL);
    }
    if ((a3 & 0x100) != 0) {
      AdobeXMPCore::IStructureNode_v1::CreateStructureNode(a1, (char *)0xFFFFFFFFFFFFFFFFLL, a2, (const char *)0xFFFFFFFFFFFFFFFFLL);
    }
    if ((a3 & 0x200) != 0)
    {
      if ((a3 & 0x1000) == 0)
      {
        if ((a3 & 0x400) == 0) {
          AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode(a1, (char *)0xFFFFFFFFFFFFFFFFLL, (unint64_t)a2, (const char *)0xFFFFFFFFFFFFFFFFLL);
        }
        AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(a1, (char *)0xFFFFFFFFFFFFFFFFLL, (unint64_t)a2, (const char *)0xFFFFFFFFFFFFFFFFLL);
      }
      AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode(a1, (char *)0xFFFFFFFFFFFFFFFFLL, (unint64_t)a2, (const char *)0xFFFFFFFFFFFFFFFFLL);
    }
  }
}

void sub_1888A7E18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(AdobeXMPCore_Int::MetadataImpl *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 920)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 856)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 792)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 688)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 544)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[7];
  *(void *)((char *)this + *(void *)(*(void *)this - 72)) = a2[8];
  *(void *)((char *)this + *(void *)(*(void *)this - 864)) = a2[9];
  *(void *)((char *)this + *(void *)(*(void *)this - 872)) = a2[10];
  *(void *)((char *)this + *(void *)(*(void *)this - 880)) = a2[11];
  *(void *)((char *)this + *(void *)(*(void *)this - 888)) = a2[12];
  *(void *)((char *)this + *(void *)(*(void *)this - 896)) = a2[13];
  *(void *)((char *)this + *(void *)(*(void *)this - 928)) = a2[14];
  *(void *)((char *)this + *(void *)(*(void *)this - 936)) = a2[15];
  *(void *)((char *)this + *(void *)(*(void *)this - 944)) = a2[16];
  *(void *)((char *)this + *(void *)(*(void *)this - 952)) = a2[17];
  *(void *)((char *)this + *(void *)(*(void *)this - 968)) = a2[18];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1888A84BC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 944) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_1888A8524(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 944);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::MetadataImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::MetadataImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::MetadataImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::MetadataImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::MetadataImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::MetadataImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_string[abi:ne180100](AdobeXMPCore_Int::IMemoryAllocator_I *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t MemoryAllocator = (uint64_t (***)(void, size_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(__dst);
    long long v6 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(**MemoryAllocator)(MemoryAllocator, v8);
    *((void *)__dst + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = __len;
    *((void *)__dst + 2) = v8 | 0x8000000000000000;
    *(void *)MD5_CTX __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    long long v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<XPathStepInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<XPathStepInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<XPathStepInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v14 = 0;
  long long v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  size_t v7 = *v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    uint64_t v13 = 0;
    size_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    long long v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *long long v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    LOBYTE(v13) = 1;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<XPathStepInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<XPathStepInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

BOOL PhotoDataUtils::CheckIPTCDigest(PhotoDataUtils *this, const void *a2, void *a3, const void *a4)
{
  unsigned int v5 = a2;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  memset(&v11, 0, sizeof(v11));
  MD5Init(&v11);
  MD5Update(&v11, (unsigned __int8 *)this, v5);
  MD5Final((unsigned __int8 *)&v9, &v11);
  return v9 == *a3 && v10 == a3[1];
}

uint64_t PhotoDataUtils::SetIPTCDigest(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v8[0] = 0;
  v8[1] = 0;
  memset(&v9, 0, sizeof(v9));
  MD5Init(&v9);
  MD5Update(&v9, a1, a2);
  double v6 = MD5Final((unsigned __int8 *)v8, &v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, double))(*(void *)a3 + 8))(a3, 1061, v8, 16, v6);
}

void PhotoDataUtils::ImportIPTC_Simple(uint64_t a1, uint64_t a2, int a3, unsigned char *a4, unsigned char *a5)
{
  memset(&__p, 0, sizeof(__p));
  IPTC_Manager::GetDataSet_UTF8(a1, a3, &__p, 0);
  if (v8)
  {
    int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= 1)
    {
      uint64_t v13 = (std::string *)((char *)p_p + size);
      do
      {
        if (p_p->__r_.__value_.__s.__data_[0] == 13) {
          p_p->__r_.__value_.__s.__data_[0] = 10;
        }
        p_p = (std::string *)((char *)p_p + 1);
      }
      while (p_p < v13);
      char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0) {
      uint64_t v14 = &__p;
    }
    else {
      uint64_t v14 = (std::string *)v11;
    }
    TXMPMeta<std::string>::SetProperty(a2, a4, a5, (uint64_t)v14, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1888A8A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PhotoDataUtils::ImportIPTC_LangAlt(uint64_t a1, uint64_t a2, int a3, unsigned char *a4, unsigned char *a5)
{
  memset(&__p, 0, sizeof(__p));
  IPTC_Manager::GetDataSet_UTF8(a1, a3, &__p, 0);
  if (v8)
  {
    int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __p.__r_.__value_.__l.__size_;
    }
    if (size >= 1)
    {
      uint64_t v13 = (std::string *)((char *)p_p + size);
      do
      {
        if (p_p->__r_.__value_.__s.__data_[0] == 13) {
          p_p->__r_.__value_.__s.__data_[0] = 10;
        }
        p_p = (std::string *)((char *)p_p + 1);
      }
      while (p_p < v13);
      char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0) {
      uint64_t v14 = &__p;
    }
    else {
      uint64_t v14 = (std::string *)v11;
    }
    TXMPMeta<std::string>::SetLocalizedText(a2, a4, a5, "", "x-default", (const char *)v14, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1888A8B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PhotoDataUtils::ImportIPTC_Array(uint64_t a1, uint64_t a2, int a3, char *a4, char *a5)
{
  memset(&__p, 0, sizeof(__p));
  IPTC_Manager::GetDataSet(a1, a3, 0, 0);
  uint64_t v11 = v10;
  TXMPMeta<std::string>::DeleteProperty(a2, a4, a5);
  uint64_t v12 = 512;
  if (!strcmp(a4, "http://purl.org/dc/elements/1.1/"))
  {
    if (!strcmp(a5, "creator")) {
      uint64_t v12 = 1024;
    }
    else {
      uint64_t v12 = 512;
    }
    if (!v11) {
      return;
    }
  }
  else if (!v11)
  {
    return;
  }
  for (unint64_t i = 0; i != v11; ++i)
  {
    IPTC_Manager::GetDataSet_UTF8(a1, a3, &__p, i);
    if (v14)
    {
      int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v17 = __p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t size = __p.__r_.__value_.__l.__size_;
      }
      if (size >= 1)
      {
        uint64_t v19 = (std::string *)((char *)p_p + size);
        do
        {
          if (p_p->__r_.__value_.__s.__data_[0] == 13) {
            p_p->__r_.__value_.__s.__data_[0] = 10;
          }
          p_p = (std::string *)((char *)p_p + 1);
        }
        while (p_p < v19);
        char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v17 = __p.__r_.__value_.__r.__words[0];
      }
      if (v16 >= 0) {
        uint64_t v20 = &__p;
      }
      else {
        uint64_t v20 = (std::string *)v17;
      }
      TXMPMeta<std::string>::AppendArrayItem(a2, a4, a5, v12, (uint64_t)v20, 0);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1888A8CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PhotoDataUtils::ImportIPTC_Date(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 == 55)
  {
    int v5 = 60;
    double v6 = "http://ns.adobe.com/photoshop/1.0/";
    size_t v7 = "DateCreated";
  }
  else
  {
    if (a1 != 62)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      exception[1] = "Unrecognized dateID";
      *((unsigned char *)exception + 16) = 0;
    }
    int v5 = 63;
    double v6 = "http://ns.adobe.com/xap/1.0/";
    size_t v7 = "CreateDate";
  }
  __n128 v60 = 0uLL;
  IPTC_Manager::GetDataSet(a2, a1, &v60, 0);
  if (!v8 || !v60.n128_u32[1] || !v60.n128_u64[1]) {
    return;
  }
  uint64_t v9 = 3;
  if ((unint64_t)v60.n128_u32[1] - 1 < 3) {
    uint64_t v9 = v60.n128_u32[1] - 1;
  }
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  int v10 = *(unsigned __int8 *)v60.n128_u64[1];
  if ((v10 - 58) < 0xFFFFFFF6)
  {
    unint64_t v11 = 0;
LABEL_18:
    if (*(unsigned char *)(v60.n128_u64[1] + v11) == 45) {
      ++v11;
    }
    goto LABEL_20;
  }
  int v12 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    unint64_t v13 = v11;
    int v12 = v10 + 10 * v12 - 48;
    LODWORD(v57) = v12;
    if (v9 == v11) {
      break;
    }
    int v10 = *(unsigned __int8 *)(v60.n128_u64[1] + 1 + v11++);
    if ((v10 - 58) < 0xFFFFFFF6) {
      goto LABEL_17;
    }
  }
  unint64_t v11 = v9 + 1;
LABEL_17:
  if (v13 + 1 < v60.n128_u32[1]) {
    goto LABEL_18;
  }
LABEL_20:
  if (v11 >= v60.n128_u32[1])
  {
    DWORD1(v57) = 1;
    goto LABEL_34;
  }
  int v14 = 0;
  char v15 = 1;
  while (1)
  {
    int v16 = *(unsigned __int8 *)(v60.n128_u64[1] + v11);
    if ((v16 - 58) < 0xFFFFFFF6) {
      break;
    }
    int v14 = v16 + 10 * v14 - 48;
    DWORD1(v57) = v14;
    BOOL v17 = ++v11 < v60.n128_u32[1];
    char v18 = v15 & v17;
    char v15 = 0;
    if ((v18 & 1) == 0) {
      goto LABEL_27;
    }
  }
  BOOL v17 = 1;
LABEL_27:
  if (v14 <= 0)
  {
    int v19 = 1;
LABEL_31:
    DWORD1(v57) = v19;
    if (!v17) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v14 >= 0xD)
  {
    int v19 = 12;
    goto LABEL_31;
  }
  if (!v17) {
    goto LABEL_34;
  }
LABEL_32:
  if (*(unsigned char *)(v60.n128_u64[1] + v11) == 45) {
    ++v11;
  }
LABEL_34:
  if (v11 >= v60.n128_u32[1]) {
    goto LABEL_41;
  }
  int v20 = 0;
  char v21 = 1;
  do
  {
    int v22 = *(unsigned __int8 *)(v60.n128_u64[1] + v11);
    if ((v22 - 58) < 0xFFFFFFF6) {
      break;
    }
    int v20 = v22 + 10 * v20 - 48;
    DWORD2(v57) = v20;
    char v23 = v21 & (++v11 < v60.n128_u32[1]);
    char v21 = 0;
  }
  while ((v23 & 1) != 0);
  if (v20 < 1)
  {
LABEL_41:
    int v24 = 1;
  }
  else
  {
    if (v20 < 0x20) {
      goto LABEL_43;
    }
    int v24 = 28;
  }
  DWORD2(v57) = v24;
LABEL_43:
  if (v11 != v60.n128_u32[1]) {
    return;
  }
  BYTE8(v58) = 1;
  IPTC_Manager::GetDataSet(a2, v5, &v60, 0);
  if (!v25 || !v60.n128_u32[1] || !v60.n128_u64[1]) {
    goto LABEL_90;
  }
  BOOL v26 = 1;
  if (v60.n128_u32[1] == 1) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = 2;
  }
  int v28 = *(unsigned __int8 *)v60.n128_u64[1];
  if ((v28 - 58) >= 0xFFFFFFF6)
  {
    unsigned int v29 = 0;
    uint64_t v31 = 1;
    while (1)
    {
      unint64_t v32 = v31;
      unsigned int v29 = v28 + 10 * v29 - 48;
      HIDWORD(v57) = v29;
      if (v27 == v31) {
        break;
      }
      int v28 = *(unsigned __int8 *)(v60.n128_u64[1] + v31++);
      if ((v28 - 58) < 0xFFFFFFF6)
      {
        unint64_t v27 = v32;
        break;
      }
    }
    BOOL v26 = v32 < v60.n128_u32[1];
    if ((v29 & 0x80000000) != 0)
    {
      int v30 = 0;
      goto LABEL_62;
    }
  }
  else
  {
    unsigned int v29 = 0;
    unint64_t v27 = 0;
  }
  if (v29 < 0x18) {
    goto LABEL_63;
  }
  int v30 = 23;
LABEL_62:
  HIDWORD(v57) = v30;
LABEL_63:
  if (v26 && *(unsigned char *)(v60.n128_u64[1] + v27) == 58) {
    ++v27;
  }
  if (v27 >= v60.n128_u32[1]) {
    goto LABEL_82;
  }
  unsigned int v33 = 0;
  char v34 = 1;
  do
  {
    int v35 = *(unsigned __int8 *)(v60.n128_u64[1] + v27);
    if ((v35 - 58) < 0xFFFFFFF6)
    {
      if ((v33 & 0x80000000) != 0)
      {
        int v37 = 0;
      }
      else
      {
        if (v33 <= 0x3B) {
          goto LABEL_80;
        }
        int v37 = 59;
      }
      LODWORD(v58) = v37;
LABEL_80:
      if (*(unsigned char *)(v60.n128_u64[1] + v27) == 58) {
        ++v27;
      }
      goto LABEL_82;
    }
    unsigned int v33 = v35 + 10 * v33 - 48;
    LODWORD(v58) = v33;
    char v36 = v34 & (++v27 < v60.n128_u32[1]);
    char v34 = 0;
  }
  while ((v36 & 1) != 0);
  if ((v33 & 0x80000000) != 0)
  {
    LODWORD(v58) = 0;
  }
  else if (v33 > 0x3B)
  {
    LODWORD(v58) = 59;
  }
  if (v27 < v60.n128_u32[1]) {
    goto LABEL_80;
  }
LABEL_82:
  if (v27 >= v60.n128_u32[1])
  {
    BYTE9(v58) = 1;
    goto LABEL_90;
  }
  unsigned int v38 = 0;
  char v39 = 1;
  while (2)
  {
    int v40 = *(unsigned __int8 *)(v60.n128_u64[1] + v27);
    if ((v40 - 58) < 0xFFFFFFF6)
    {
      if ((v38 & 0x80000000) != 0)
      {
        int v42 = 0;
      }
      else
      {
        if (v38 <= 0x3B)
        {
LABEL_97:
          BYTE9(v58) = 1;
          goto LABEL_100;
        }
        int v42 = 59;
      }
      DWORD1(v58) = v42;
      goto LABEL_97;
    }
    unsigned int v38 = v40 + 10 * v38 - 48;
    DWORD1(v58) = v38;
    char v41 = v39 & (++v27 < v60.n128_u32[1]);
    char v39 = 0;
    if (v41) {
      continue;
    }
    break;
  }
  if ((v38 & 0x80000000) != 0)
  {
    DWORD1(v58) = 0;
  }
  else if (v38 > 0x3B)
  {
    DWORD1(v58) = 59;
  }
  BYTE9(v58) = 1;
  if (v27 >= v60.n128_u32[1]) {
    goto LABEL_90;
  }
LABEL_100:
  unsigned int v43 = *(unsigned __int8 *)(v60.n128_u64[1] + v27);
  if (v43 > 0x2A)
  {
    if (v43 == 43)
    {
      char v44 = 1;
    }
    else
    {
      if (v43 != 45) {
        goto LABEL_109;
      }
      char v44 = -1;
    }
    BYTE11(v58) = v44;
  }
  else
  {
    if (!*(unsigned char *)(v60.n128_u64[1] + v27) || v43 == 32) {
      goto LABEL_90;
    }
LABEL_109:
    if (v27 != v60.n128_u32[1]) {
      return;
    }
  }
  unint64_t v45 = v27 + 1;
  if (v27 + 1 < v60.n128_u32[1])
  {
    int v46 = *(unsigned __int8 *)(v60.n128_u64[1] + v45);
    if ((v46 - 58) >= 0xFFFFFFF6)
    {
      unsigned int v47 = 0;
      char v48 = 1;
      while (1)
      {
        unsigned int v47 = v46 + 10 * v47 - 48;
        HIDWORD(v58) = v47;
        unint64_t v45 = v27 + 2;
        if ((v48 & 1) == 0 || v45 >= v60.n128_u32[1]) {
          break;
        }
        char v48 = 0;
        int v46 = *(unsigned __int8 *)(v60.n128_u64[1] + 2 + v27++);
        if ((v46 - 58) < 0xFFFFFFF6)
        {
          unint64_t v45 = v27 + 1;
          goto LABEL_118;
        }
      }
      ++v27;
      if ((v47 & 0x80000000) != 0)
      {
        HIDWORD(v58) = 0;
      }
      else if (v47 > 0x17)
      {
        HIDWORD(v58) = 23;
      }
      if (v45 < v60.n128_u32[1]) {
        goto LABEL_123;
      }
    }
    else
    {
      unsigned int v47 = 0;
LABEL_118:
      if ((v47 & 0x80000000) != 0)
      {
        int v49 = 0;
LABEL_122:
        HIDWORD(v58) = v49;
      }
      else if (v47 > 0x17)
      {
        int v49 = 23;
        goto LABEL_122;
      }
LABEL_123:
      unint64_t v50 = v27 + 2;
      if (*(unsigned char *)(v60.n128_u64[1] + v45) == 58) {
        unint64_t v45 = v50;
      }
    }
  }
  if (v45 < v60.n128_u32[1])
  {
    unsigned int v51 = 0;
    char v52 = 1;
    do
    {
      int v53 = *(unsigned __int8 *)(v60.n128_u64[1] + v45);
      if ((v53 - 58) < 0xFFFFFFF6) {
        break;
      }
      unsigned int v51 = v53 + 10 * v51 - 48;
      LODWORD(v59) = v51;
      char v54 = v52 & (++v45 < v60.n128_u32[1]);
      char v52 = 0;
    }
    while ((v54 & 1) != 0);
    if ((v51 & 0x80000000) != 0)
    {
      int v55 = 0;
LABEL_133:
      LODWORD(v59) = v55;
    }
    else if (v51 >= 0x3C)
    {
      int v55 = 59;
      goto LABEL_133;
    }
  }
  if (v45 != v60.n128_u32[1]) {
    return;
  }
  BYTE10(v58) = 1;
LABEL_90:
  TXMPMeta<std::string>::SetProperty_Date(a3, v6, v7, &v57, 0);
}

void PhotoDataUtils::Import2WayIPTC(PhotoDataUtils *a1, uint64_t a2, uint64_t a3)
{
  memset(v37, 0, sizeof(v37));
  v36[0] = &unk_1ED4DED90;
  v36[1] = v37;
  if (!a3) {
    PhotoDataUtils::ExportIPTC(a2, (uint64_t)v36);
  }
  __n128 v35 = 0uLL;
  if (kKnownDataSets[0] != 255)
  {
    uint64_t v6 = 0;
    size_t v7 = kKnownDataSets;
    while (1)
    {
      uint64_t v8 = &kKnownDataSets[32 * v6];
      uint64_t v9 = v8 + 1;
      if (v8[1] > 3u) {
        goto LABEL_23;
      }
      unint64_t v11 = (unsigned char *)*((void *)v8 + 2);
      int v10 = (char **)(v8 + 16);
      int v12 = v10 + 1;
      BOOL DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a2, v11, v10[1]);
      BOOL v14 = DoesPropertyExist;
      if (!PhotoDataUtils::GetNativeInfo((uint64_t)a1, *v7, a3, DoesPropertyExist, &v35)
        || v35.n128_u32[1] == 0)
      {
        goto LABEL_23;
      }
      if (a3 == 1 || a3 == -1)
      {
        if (v14) {
          goto LABEL_23;
        }
      }
      else if (!PhotoDataUtils::IsValueDifferent(a1, (const IPTC_Manager *)v36, (const IPTC_Manager *)*v7))
      {
        goto LABEL_23;
      }
      TXMPMeta<std::string>::DeleteProperty(a2, *v10, *v12);
      switch(*v9)
      {
        case 0:
          PhotoDataUtils::ImportIPTC_Simple((uint64_t)a1, a2, *v7, *v10, *v12);
          goto LABEL_23;
        case 1:
          PhotoDataUtils::ImportIPTC_LangAlt((uint64_t)a1, a2, *v7, *v10, *v12);
          goto LABEL_23;
        case 2:
          PhotoDataUtils::ImportIPTC_Array((uint64_t)a1, a2, *v7, *v10, *v12);
          goto LABEL_23;
        case 3:
          int v16 = *v7;
          if (v16 != 4)
          {
            if (v16 != 12)
            {
              if (v16 != 55) {
                __assert_rtn("Import2WayIPTC", "ReconcileIPTC.cpp", 423, "false");
              }
              PhotoDataUtils::ImportIPTC_Date(55, (uint64_t)a1, a2);
              goto LABEL_23;
            }
            memset(&__s1, 0, sizeof(__s1));
            IPTC_Manager::GetDataSet_UTF8((uint64_t)a1, 12, 0, 0);
            uint64_t v25 = v24;
            if (!v24) {
              goto LABEL_23;
            }
            unint64_t v26 = 0;
            do
            {
              IPTC_Manager::GetDataSet_UTF8((uint64_t)a1, 12, &__s1, v26);
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_s1 = &__s1;
              }
              else {
                p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              }
              for (unint64_t i = p_s1; i->__r_.__value_.__s.__data_[0]; unint64_t i = (std::string *)((char *)i + 1))
              {
                if (i->__r_.__value_.__s.__data_[0] == 58)
                {
                  uint64_t v29 = 0;
                  do
                    int v30 = i->__r_.__value_.__s.__data_[++v29];
                  while (v30 != 58 && v30 != 0);
                  if (v29 == 8)
                  {
                    i->__r_.__value_.__s.__data_[8] = 0;
                    TXMPMeta<std::string>::AppendArrayItem(a2, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "SubjectCode", 512, (uint64_t)i, 0);
                  }
                  break;
                }
                p_s1 = (std::string *)((char *)p_s1 + 1);
              }
              ++v26;
            }
            while (v26 != v25);
            if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_23;
            }
LABEL_71:
            operator delete(__s1.__r_.__value_.__l.__data_);
            goto LABEL_23;
          }
          memset(&__s1, 0, sizeof(__s1));
          IPTC_Manager::GetDataSet_UTF8((uint64_t)a1, 4, &__s1, 0);
          unsigned int v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if (!v18) {
            goto LABEL_70;
          }
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v19 = &__s1;
          }
          else {
            int v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          }
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int64_t size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          else {
            int64_t size = __s1.__r_.__value_.__l.__size_;
          }
          if (size >= 1)
          {
            char v21 = (std::string *)((char *)v19 + size);
            do
            {
              if (v19->__r_.__value_.__s.__data_[0] == 13) {
                v19->__r_.__value_.__s.__data_[0] = 10;
              }
              int v19 = (std::string *)((char *)v19 + 1);
            }
            while (v19 < v21);
            unsigned int v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          if ((v17 & 0x80) != 0)
          {
            char v23 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            if (__s1.__r_.__value_.__l.__size_ >= 5)
            {
              int v22 = (std::string::value_type *)(__s1.__r_.__value_.__r.__words[0] + 4);
              goto LABEL_69;
            }
          }
          else
          {
            int v22 = &__s1.__r_.__value_.__s.__data_[4];
            if (v17 > 4) {
              goto LABEL_69;
            }
            char v23 = &__s1;
          }
          unint64_t v32 = "001";
          if (!"001") {
            goto LABEL_70;
          }
          unsigned int v33 = off_1E53CDA50;
          while (strncmp((const char *)v23, v32, 3uLL))
          {
            char v34 = *v33;
            v33 += 2;
            unint64_t v32 = v34;
            if (!v34) {
              goto LABEL_70;
            }
          }
          int v22 = *(v33 - 1);
LABEL_69:
          TXMPMeta<std::string>::SetProperty(a2, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "IntellectualGenre", (uint64_t)v22, 0);
          LOBYTE(v17) = *((unsigned char *)&__s1.__r_.__value_.__s + 23);
LABEL_70:
          if ((v17 & 0x80) != 0) {
            goto LABEL_71;
          }
LABEL_23:
          ++v6;
          size_t v7 = &kKnownDataSets[32 * v6];
          if (*v7 == 255) {
            goto LABEL_73;
          }
          break;
        default:
          goto LABEL_23;
      }
    }
  }
LABEL_73:
  IPTC_Writer::~IPTC_Writer((IPTC_Writer *)v36);
}

void sub_1888A975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  IPTC_Writer::~IPTC_Writer((IPTC_Writer *)va);
  _Unwind_Resume(a1);
}

void PhotoDataUtils::ExportIPTC(uint64_t a1, uint64_t a2)
{
  LOBYTE(v2) = kKnownDataSets[0];
  if (kKnownDataSets[0] != 255)
  {
    uint64_t v5 = 0;
    uint64_t v6 = kKnownDataSets;
    while (kKnownDataSets[32 * v5 + 1] > 4u)
    {
LABEL_4:
      ++v5;
      uint64_t v6 = &kKnownDataSets[32 * v5];
      int v2 = *v6;
      if (v2 == 255) {
        return;
      }
    }
    switch(kKnownDataSets[32 * v5 + 1])
    {
      case 0:
        size_t v7 = &kKnownDataSets[32 * v5];
        uint64_t v8 = (unsigned char *)*((void *)v7 + 2);
        uint64_t v9 = (unsigned char *)*((void *)v7 + 3);
        std::string __p = 0;
        std::string::size_type v48 = 0;
        uint64_t v49 = 0;
        LODWORD(v46.__r_.__value_.__l.__data_) = 0;
        if (TXMPMeta<std::string>::GetProperty(a1, v8, v9, (uint64_t)&__p, (uint64_t *)&v46))
        {
          if ((v46.__r_.__value_.__s.__data_[1] & 0x1F) == 0)
          {
            uint64_t v10 = HIBYTE(v49);
            p_p = &__p;
            if (v49 < 0)
            {
              p_p = __p;
              uint64_t v10 = v48;
            }
            if (v10 >= 1)
            {
              int v12 = &p_p[v10];
              do
              {
                if (*p_p == 10) {
                  unsigned char *p_p = 13;
                }
                ++p_p;
              }
              while (p_p < v12);
            }
            __n128 DataSet = IPTC_Manager::GetDataSet(a2, v2, 0, 0);
            if (v14 > 1) {
              (*(void (**)(uint64_t, void, uint64_t, __n128))(*(void *)a2 + 8))(a2, v2, -1, DataSet);
            }
            if (v49 >= 0) {
              char v15 = &__p;
            }
            else {
              char v15 = __p;
            }
            if (v49 >= 0) {
              uint64_t v16 = HIBYTE(v49);
            }
            else {
              uint64_t v16 = v48;
            }
            (**(void (***)(uint64_t, void, void *, uint64_t, void))a2)(a2, v2, v15, v16, 0);
          }
        }
        else
        {
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 8))(a2, v2, -1);
        }
        goto LABEL_104;
      case 1:
        ExportIPTC_LangAlt(a1, a2, *(unsigned char **)&kKnownDataSets[32 * v5 + 16], *(unsigned char **)&kKnownDataSets[32 * v5 + 24], v2);
        goto LABEL_4;
      case 2:
        ExportIPTC_Array(a1, a2, *(unsigned char **)&kKnownDataSets[32 * v5 + 16], *(unsigned char **)&kKnownDataSets[32 * v5 + 24], v2);
        goto LABEL_4;
      case 3:
        switch(v2)
        {
          case 0x37u:
            goto LABEL_84;
          case 0xCu:
            std::string __p = 0;
            std::string::size_type v48 = 0;
            uint64_t v49 = 0;
            memset(&v46, 0, sizeof(v46));
            int v45 = 0;
            if (TXMPMeta<std::string>::GetProperty(a1, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "SubjectCode", 0, (uint64_t *)&v45))
            {
              if ((v45 & 0x200) == 0) {
                break;
              }
              int v27 = TXMPMeta<std::string>::CountArrayItems(a1, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "SubjectCode");
              __n128 v28 = IPTC_Manager::GetDataSet(a2, 12, 0, 0);
              if (v27 != v29) {
                (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a2 + 8))(a2, 12, -1, v28);
              }
              if (v27 < 1) {
                break;
              }
              uint64_t v30 = 0;
              uint64_t v31 = v27;
              do
              {
                uint64_t v32 = v30 + 1;
                TXMPMeta<std::string>::GetArrayItem(a1, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "SubjectCode", v30 + 1, (uint64_t)&__p, (uint64_t *)&v45);
                if ((v45 & 0x1F00) == 0)
                {
                  std::string::size_type v33 = HIBYTE(v49);
                  if (v49 < 0) {
                    std::string::size_type v33 = v48;
                  }
                  if (v33 == 8)
                  {
                    MEMORY[0x18C11BE10](&v46, "IPTC:");
                    if (v49 >= 0) {
                      char v34 = (const std::string::value_type *)&__p;
                    }
                    else {
                      char v34 = (const std::string::value_type *)__p;
                    }
                    if (v49 >= 0) {
                      std::string::size_type v35 = HIBYTE(v49);
                    }
                    else {
                      std::string::size_type v35 = v48;
                    }
                    std::string::append(&v46, v34, v35);
                    std::string::append(&v46, ":::");
                    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      char v36 = &v46;
                    }
                    else {
                      char v36 = (std::string *)v46.__r_.__value_.__r.__words[0];
                    }
                    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v37 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      uint64_t v37 = LODWORD(v46.__r_.__value_.__r.__words[1]);
                    }
                    (**(void (***)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t))a2)(a2, 12, v36, v37, v30);
                  }
                }
                ++v30;
              }
              while (v31 != v32);
LABEL_102:
              if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v46.__r_.__value_.__l.__data_);
              }
              break;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 12, -1);
            break;
          case 4u:
            std::string __p = 0;
            std::string::size_type v48 = 0;
            uint64_t v49 = 0;
            int v45 = 0;
            if (TXMPMeta<std::string>::GetProperty(a1, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "IntellectualGenre", (uint64_t)&__p, (uint64_t *)&v45))
            {
              if ((v45 & 0x1F00) != 0) {
                break;
              }
              uint64_t v18 = HIBYTE(v49);
              char v19 = HIBYTE(v49);
              int v20 = (void **)__p;
              char v21 = &__p;
              if (v49 < 0)
              {
                char v21 = __p;
                uint64_t v18 = v48;
              }
              if (v18 >= 1)
              {
                int v22 = &v21[v18];
                do
                {
                  if (*v21 == 10) {
                    *char v21 = 13;
                  }
                  ++v21;
                }
                while (v21 < v22);
                char v19 = HIBYTE(v49);
                int v20 = (void **)__p;
              }
              char v23 = (const char *)(v19 >= 0 ? &__p : v20);
              uint64_t v24 = "Current";
              if (!"Current") {
                break;
              }
              uint64_t v25 = kIntellectualGenreMappings;
              while (strcmp(v23, v24))
              {
                uint64_t v24 = v25[3];
                v25 += 2;
                if (!v24) {
                  goto LABEL_104;
                }
              }
              memset(&v46, 0, sizeof(v46));
              std::string::basic_string[abi:ne180100]<0>(&v46, *v25);
              std::string::push_back(&v46, 58);
              if (v49 >= 0) {
                char v39 = (const std::string::value_type *)&__p;
              }
              else {
                char v39 = (const std::string::value_type *)__p;
              }
              if (v49 >= 0) {
                std::string::size_type v40 = HIBYTE(v49);
              }
              else {
                std::string::size_type v40 = v48;
              }
              std::string::append(&v46, v39, v40);
              __n128 v41 = IPTC_Manager::GetDataSet(a2, 4, 0, 0);
              if (v42 > 1) {
                (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a2 + 8))(a2, 4, -1, v41);
              }
              if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v43 = &v46;
              }
              else {
                unsigned int v43 = (std::string *)v46.__r_.__value_.__r.__words[0];
              }
              if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v44 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
              }
              else {
                uint64_t v44 = LODWORD(v46.__r_.__value_.__r.__words[1]);
              }
              (**(void (***)(uint64_t, uint64_t, std::string *, uint64_t, void))a2)(a2, 4, v43, v44, 0);
              goto LABEL_102;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 4, -1);
            break;
          default:
            int v17 = 776;
LABEL_107:
            __assert_rtn("ExportIPTC", "ReconcileIPTC.cpp", v17, "false");
        }
LABEL_104:
        if (SHIBYTE(v49) < 0) {
          operator delete(__p);
        }
        goto LABEL_4;
      case 4:
        int v17 = 792;
        if (v2 > 0x73u)
        {
          unint64_t v26 = "rights";
          if (v2 != 116)
          {
            if (v2 != 120) {
              goto LABEL_107;
            }
            unint64_t v26 = "description";
          }
          ExportIPTC_LangAlt(a1, a2, "http://purl.org/dc/elements/1.1/", v26, v2);
        }
        else if (v2 == 62)
        {
          IPTC_Manager::GetDataSet(a2, 62, 0, 0);
          if (v38)
          {
            LOBYTE(v2) = *v6;
LABEL_84:
            ExportIPTC_Date(v2, a1, a2);
          }
        }
        else
        {
          if (v2 != 80) {
            goto LABEL_107;
          }
          ExportIPTC_Array(a1, a2, "http://purl.org/dc/elements/1.1/", "creator", 80);
        }
        goto LABEL_4;
      default:
        JUMPOUT(0);
    }
  }
}

void PhotoDataUtils::ImportPSIR(unsigned int (***a1)(void, uint64_t, void **), uint64_t a2, int a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (a3 != 1)
  {
    if ((**a1)(a1, 1034, &v9))
    {
      BOOL DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/xap/1.0/rights/", "Marked");
      BOOL v6 = HIDWORD(v9) != 1 || DoesPropertyExist;
      if (!v6 && *(unsigned char *)v10) {
        TXMPMeta<std::string>::SetProperty_Bool(a2, "http://ns.adobe.com/xap/1.0/rights/", "Marked", 1, 0);
      }
    }
    if ((**a1)(a1, 1035, &v9)
      && !TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/xap/1.0/rights/", "WebStatement"))
    {
      memset(&__p, 0, sizeof(__p));
      if (ReconcileUtils::IsUTF8(v10, HIDWORD(v9)))
      {
        MEMORY[0x18C11BE20](&__p, v10, HIDWORD(v9));
      }
      else
      {
        if (ignoreLocalText) {
          return;
        }
        ReconcileUtils::LocalToUTF8((const UInt8 *)v10, HIDWORD(v9), &__p);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/xap/1.0/rights/", "WebStatement", (uint64_t)p_p, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1888AA0A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1888AA090);
}

void sub_1888AA0CC(void *a1)
{
}

void ExportIPTC_LangAlt(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4, uint64_t a5)
{
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v17 = 0;
  if (!TXMPMeta<std::string>::GetProperty(a1, a3, a4, 0, (uint64_t *)&v17)) {
    goto LABEL_20;
  }
  if ((v17 & 0x1000) == 0) {
    goto LABEL_21;
  }
  if (TXMPMeta<std::string>::GetLocalizedText(a1, a3, a4, "", "x-default", 0, (uint64_t)&__p, 0))
  {
    uint64_t v10 = HIBYTE(v20);
    p_p = &__p;
    if (v20 < 0)
    {
      p_p = __p;
      uint64_t v10 = v19;
    }
    if (v10 >= 1)
    {
      int v12 = &p_p[v10];
      do
      {
        if (*p_p == 10) {
          unsigned char *p_p = 13;
        }
        ++p_p;
      }
      while (p_p < v12);
    }
    __n128 DataSet = IPTC_Manager::GetDataSet(a2, a5, 0, 0);
    if (v14 > 1) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a2 + 8))(a2, a5, -1, DataSet);
    }
    if (v20 >= 0) {
      char v15 = &__p;
    }
    else {
      char v15 = __p;
    }
    if (v20 >= 0) {
      uint64_t v16 = HIBYTE(v20);
    }
    else {
      uint64_t v16 = v19;
    }
    (**(void (***)(uint64_t, uint64_t, void *, uint64_t, void))a2)(a2, a5, v15, v16, 0);
  }
  else
  {
LABEL_20:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a5, -1);
  }
LABEL_21:
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
}

void sub_1888AA2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ExportIPTC_Array(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4, uint64_t a5)
{
  std::string __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v25 = 0;
  if (TXMPMeta<std::string>::GetProperty(a1, a3, a4, 0, (uint64_t *)&v25))
  {
    if ((v25 & 0x200) != 0)
    {
      int v10 = TXMPMeta<std::string>::CountArrayItems(a1, a3, a4);
      __n128 DataSet = IPTC_Manager::GetDataSet(a2, a5, 0, 0);
      if (v10 != v12) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a2 + 8))(a2, a5, -1, DataSet);
      }
      if (v10 >= 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = v10;
        do
        {
          uint64_t v15 = v13 + 1;
          TXMPMeta<std::string>::GetArrayItem(a1, a3, a4, v13 + 1, (uint64_t)&__p, (uint64_t *)&v25);
          if ((v25 & 0x1F00) == 0)
          {
            unsigned int v16 = HIBYTE(v28);
            char v17 = HIBYTE(v28);
            uint64_t v19 = (void **)__p;
            unsigned int v18 = v27;
            if (v28 >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if (v28 >= 0) {
              uint64_t v21 = HIBYTE(v28);
            }
            else {
              uint64_t v21 = v27;
            }
            if (v21 >= 1)
            {
              int v22 = &p_p[v21];
              do
              {
                if (*p_p == 10) {
                  unsigned char *p_p = 13;
                }
                ++p_p;
              }
              while (p_p < v22);
              unsigned int v16 = HIBYTE(v28);
              uint64_t v19 = (void **)__p;
              unsigned int v18 = v27;
              char v17 = HIBYTE(v28);
            }
            if (v17 >= 0) {
              char v23 = &__p;
            }
            else {
              char v23 = v19;
            }
            if (v17 >= 0) {
              uint64_t v24 = v16;
            }
            else {
              uint64_t v24 = v18;
            }
            (**(void (***)(uint64_t, uint64_t, void **, uint64_t, uint64_t))a2)(a2, a5, v23, v24, v13);
          }
          ++v13;
        }
        while (v15 != v14);
        if (SHIBYTE(v28) < 0) {
          operator delete(__p);
        }
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a5, -1);
  }
}

void sub_1888AA4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t ExportIPTC_Date(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 == 55)
  {
    uint64_t v6 = 60;
    size_t v7 = "http://ns.adobe.com/photoshop/1.0/";
    uint64_t v8 = "DateCreated";
  }
  else
  {
    if (a1 != 62)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      exception[1] = "Unrecognized dateID";
      *((unsigned char *)exception + 16) = 0;
    }
    uint64_t v6 = 63;
    size_t v7 = "http://ns.adobe.com/xap/1.0/";
    uint64_t v8 = "CreateDate";
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, a1, -1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, v6, -1);
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t result = TXMPMeta<std::string>::GetProperty_Date(a2, v7, v8, &v12, 0);
  if (result)
  {
    *(void *)std::string __str = 0;
    uint64_t v16 = 0;
    snprintf(__str, 0x10uLL, "%04d%02d%02d", v12, DWORD1(v12), DWORD2(v12));
    (**(void (***)(uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)(a3, a1, __str, 8, -1);
    if (BYTE10(v13))
    {
      uint64_t v10 = 43;
      if (BYTE11(v13) == 255) {
        uint64_t v10 = 45;
      }
      snprintf(__str, 0x10uLL, "%02d%02d%02d%c%02d%02d", HIDWORD(v12), v13, DWORD1(v13), v10, HIDWORD(v13), v14);
      return (**(uint64_t (***)(uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)(a3, v6, __str, 11, -1);
    }
    else if (BYTE9(v13))
    {
      snprintf(__str, 0x10uLL, "%02d%02d%02d", HIDWORD(v12), v13, DWORD1(v13));
      return (**(uint64_t (***)(uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)(a3, v6, __str, 6, -1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 8))(a3, v6, -1);
    }
  }
  return result;
}

void PhotoDataUtils::ExportPSIR(uint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/xap/1.0/rights/", "Marked", (uint64_t)&__p, 0))
  {
    v12.__r_.__value_.__s.__data_[0] = TXMPUtils<std::string>::ConvertToBool((char *)&__p);
    (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(void *)a2 + 8))(a2, 1034, &v12, 1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 1034);
  }
  if (!TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/xap/1.0/rights/", "WebStatement", (uint64_t)&__p, 0))goto LABEL_20; {
  if (ignoreLocalText)
  }
  {
    if (v15 >= 0) {
      p_p = (ReconcileUtils *)&__p;
    }
    else {
      p_p = (ReconcileUtils *)__p;
    }
    if (v15 >= 0) {
      uint64_t v5 = (char *)HIBYTE(v15);
    }
    else {
      uint64_t v5 = v14;
    }
    if (ReconcileUtils::IsASCII(p_p, v5))
    {
      if (v15 >= 0) {
        uint64_t v6 = &__p;
      }
      else {
        uint64_t v6 = __p;
      }
      if (v15 >= 0) {
        uint64_t v7 = HIBYTE(v15);
      }
      else {
        uint64_t v7 = v14;
      }
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a2 + 8))(a2, 1035, v6, v7);
      goto LABEL_21;
    }
LABEL_20:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 1035);
    goto LABEL_21;
  }
  memset(&v12, 0, sizeof(v12));
  if (v15 >= 0) {
    uint64_t v8 = (const UInt8 *)&__p;
  }
  else {
    uint64_t v8 = (const UInt8 *)__p;
  }
  if (v15 >= 0) {
    CFIndex v9 = HIBYTE(v15);
  }
  else {
    CFIndex v9 = (CFIndex)v14;
  }
  ReconcileUtils::UTF8ToLocal(v8, v9, &v12);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v12;
  }
  else {
    uint64_t v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t v11 = LODWORD(v12.__r_.__value_.__r.__words[1]);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(void *)a2 + 8))(a2, 1035, v10, v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
LABEL_21:
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
}

void sub_1888AAA44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1888AA998);
}

void sub_1888AAA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double AdobeXMPCore_Int::ErrorImpl::ErrorImpl(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(void *)(a1 + 104) = &unk_1ED4D9750;
  *(void *)a1 = &unk_1ED4D9530;
  *(void *)(a1 + 96) = &unk_1ED4D9680;
  *(void *)(a1 + unk_1ED4D93F8) = &unk_1ED4D96E0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)a1 = off_1ED4EEC58;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = off_1ED4EEDA8;
  *(void *)(a1 + 104) = off_1ED4EEE10;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a2;
  *(void *)(a1 + 16) = a4;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

void AdobeXMPCore_Int::ErrorImpl::~ErrorImpl(AdobeXMPCore_Int::ErrorImpl *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 344)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 304)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[4];
  *(void *)((char *)this + *(void *)(*(void *)this - 312)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 352)) = a2[6];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = 0;
  *((void *)this + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v10 = (uint64_t *)((char *)this + 56);
  std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  CFIndex v9 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void AdobeXMPCore_Int::ErrorImpl::~ErrorImpl(AdobeXMPCore_Int::ErrorImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 104), (uint64_t *)&off_1ED4DE3B8);
}

{
  uint64_t v2;
  uint64_t vars8;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v2 + 104), (uint64_t *)&off_1ED4DE3B8);

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void virtual thunk to'AdobeXMPCore_Int::ErrorImpl::~ErrorImpl(void *a1)
{
  int v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 104);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DE3B8);
}

{
  AdobeXMPCore_Int::ErrorImpl::~ErrorImpl((AdobeXMPCore_Int::ErrorImpl *)((char *)a1 + *(void *)(*a1 - 48)));
}

void virtual thunk to'AdobeXMPCore_Int::ErrorImpl::~ErrorImpl(AdobeXMPCore_Int::ErrorImpl *this)
{
  int v2 = (AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 104);

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)&off_1ED4DE3B8);
}

{
  AdobeXMPCore_Int::ErrorImpl::~ErrorImpl((AdobeXMPCore_Int::ErrorImpl *)((char *)this
                                                                        + *(void *)(*(void *)this - 24)));
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetCode(AdobeXMPCore_Int::ErrorImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetDomain(AdobeXMPCore_Int::ErrorImpl *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetSeverity(AdobeXMPCore_Int::ErrorImpl *this)
{
  return *((void *)this + 2);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetMessage@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 48);
  *a2 = *(void *)(this + 40);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetLocation@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetParameter@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v7 = a2;
  uint64_t v3 = *(void *)(this + 56);
  if (a2 >= (*(void *)(this + 64) - v3) >> 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2);
  }
  long long v4 = *(_OWORD *)(v3 + 16 * a2);
  *a3 = v4;
  if (*((void *)&v4 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_1888AB254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::IError_I::CreateError(int a1, int a2, uint64_t a3)
{
  uint64_t v6 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x80);
  AdobeXMPCore_Int::ErrorImpl::ErrorImpl(v6, a1, a2, a3);
  AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ErrorImpl>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ErrorImpl.cpp", 190, 1, &v8);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetParametersCount(AdobeXMPCore_Int::ErrorImpl *this)
{
  return (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 4;
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetNextError@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 88);
  *a2 = *(void *)(this + 80);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AdobeXMPCore_Int::ErrorImpl::SetNextError(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 88);
  *a3 = *(void *)(a1 + 80);
  a3[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void AdobeXMPCore_Int::ErrorImpl::SetMessage(AdobeXMPCore_Int::ErrorImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3)
{
  uint64_t v3 = *((void *)this + 5);
  if (!v3) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 56))(&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t AdobeXMPCore_Int::ErrorImpl::SetLocation(AdobeXMPCore_Int::ErrorImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (!v3) {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, (const char *)0xFFFFFFFFFFFFFFFFLL);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 56))(&v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 3) + 40))(&v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v28 = 0;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v24 = 0u;
  long long v25 = 0u;
  memset(v23, 0, sizeof(v23));
  std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  std::ostream::operator<<();
  uint64_t v4 = *((void *)this + 3);
  std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str((unsigned char *)&v23[1] + 8, (uint64_t)v19);
  int v5 = v20;
  uint64_t v6 = (void *)v19[0];
  std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str((unsigned char *)&v23[1] + 8, (uint64_t)v17);
  if (v5 >= 0) {
    unint64_t v7 = v19;
  }
  else {
    unint64_t v7 = v6;
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v8 = v18;
  }
  else {
    uint64_t v8 = v17[1];
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void *, uint64_t))(*(void *)v4 + 40))(&v21, v4, v7, v8);
  CFIndex v9 = (AdobeXMPCore_Int::IMemoryAllocator_I *)v22;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if ((char)v18 < 0)
  {
    uint64_t v10 = v17[0];
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v9);
    CFIndex v9 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator
                                                                                             + 8))(MemoryAllocator, v10);
  }
  if (v20 < 0)
  {
    uint64_t v12 = v19[0];
    uint64_t v13 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v9);
    CFIndex v9 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 8))(v13, v12);
  }
  *(void *)&v23[0] = off_1ED4EF230;
  *(void *)&v27[0] = off_1ED4EF280;
  *(void *)&v23[1] = off_1ED4EF258;
  *((void *)&v23[1] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = &unk_1ED4EF180;
  if (SHIBYTE(v25) < 0)
  {
    uint64_t v14 = *((void *)&v24 + 1);
    uint64_t v15 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 8))(v15, v14);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18C11C080](v27);
}

void sub_1888AB720(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = off_1ED4EF258;
  *(void *)a1 = &unk_1ED4D98C0;
  *(void *)(a1 + 128) = &unk_1ED4D98E8;
  std::ios_base::init((std::ios_base *)(a1 + 128), (void *)(a1 + 24));
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = -1;
  *(void *)a1 = off_1ED4EF230;
  *(void *)(a1 + 128) = off_1ED4EF280;
  *(void *)(a1 + 16) = off_1ED4EF258;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = &unk_1ED4EF180;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1888AB888(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x18C11C080](v1);
  _Unwind_Resume(a1);
}

char *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_string(char *a1)
{
  if (a1[23] < 0)
  {
    uint64_t v2 = *(void *)a1;
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  return a1;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream(uint64_t a1)
{
  *(void *)a1 = off_1ED4EF230;
  uint64_t v2 = a1 + 128;
  *(void *)(a1 + 128) = off_1ED4EF280;
  *(void *)(a1 + 16) = off_1ED4EF258;
  *(void *)(a1 + 24) = &unk_1ED4EF180;
  if (*(char *)(a1 + 111) < 0)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v3);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18C11C080](v2);
  return a1;
}

void AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3)
{
}

void sub_1888ABAA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, void *a2)
{
  long long v36 = 0u;
  memset(v37, 0, 152);
  long long v34 = 0u;
  long long v35 = 0u;
  memset(v33, 0, sizeof(v33));
  long long v32 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  *(_DWORD *)((char *)&v33[-1] + *(void *)(v32 - 24)) |= 8u;
  long long v30 = 0u;
  memset(v31, 0, 152);
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v27, 0, sizeof(v27));
  long long v26 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  *(_DWORD *)((char *)&v27[-1] + *(void *)(v26 - 24) + 8) |= 8u;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"0x", 2);
  std::ostream::operator<<();
  uint64_t v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str((unsigned char *)v27 + 8, (uint64_t)&v23);
  if (SHIBYTE(v25) < 0)
  {
    uint64_t v4 = v23;
    unint64_t v5 = v24;
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
    uint64_t v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator
                                                                                             + 8))(MemoryAllocator, v4);
    if (v5 < 5) {
      goto LABEL_15;
    }
  }
  else if (HIBYTE(v25) <= 4u)
  {
    goto LABEL_15;
  }
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str((unsigned char *)v27 + 8, (uint64_t)&v23);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if (BYTE2(v23) == 48)
    {
      char v7 = BYTE3(v23);
      goto LABEL_10;
    }
LABEL_15:
    *(void *)&long long v26 = off_1ED4EF230;
    v31[0] = off_1ED4EF280;
    *(void *)&v27[0] = off_1ED4EF258;
    *((void *)&v27[0] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = &unk_1ED4EF180;
    if (SHIBYTE(v29) < 0)
    {
      uint64_t v14 = *((void *)&v28 + 1);
      uint64_t v15 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 8))(v15, v14);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x18C11C080](v31);
LABEL_18:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"0x", 2);
    goto LABEL_19;
  }
  uint64_t v8 = v23;
  if (*(unsigned char *)(v23 + 2) != 48)
  {
    uint64_t v13 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
    uint64_t v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 8))(v13, v8);
    goto LABEL_15;
  }
  char v7 = *(unsigned char *)(v23 + 3);
  uint64_t v9 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
  uint64_t v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 8))(v9, v8);
LABEL_10:
  char v10 = (v7 - 88) & 0xDF;
  *(void *)&long long v26 = off_1ED4EF230;
  v31[0] = off_1ED4EF280;
  *(void *)&v27[0] = off_1ED4EF258;
  *((void *)&v27[0] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = &unk_1ED4EF180;
  if (SHIBYTE(v29) < 0)
  {
    uint64_t v11 = *((void *)&v28 + 1);
    uint64_t v12 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 8))(v12, v11);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18C11C080](v31);
  if (v10) {
    goto LABEL_18;
  }
LABEL_19:
  std::ostream::operator<<();
  std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str(&v33[1], (uint64_t)&v26);
  if ((SBYTE7(v27[0]) & 0x80u) == 0) {
    uint64_t v16 = &v26;
  }
  else {
    uint64_t v16 = (long long *)v26;
  }
  uint64_t v17 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(AdobeXMPCore_Int::ErrorImpl *, long long *, uint64_t))(*(void *)this + 128))(this, v16, -1);
  if (SBYTE7(v27[0]) < 0)
  {
    uint64_t v18 = v26;
    uint64_t v19 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v17);
    uint64_t v17 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 8))(v19, v18);
  }
  *(void *)&long long v32 = off_1ED4EF230;
  v37[0] = off_1ED4EF280;
  v33[0] = off_1ED4EF258;
  v33[1] = &unk_1ED4EF180;
  if (SHIBYTE(v35) < 0)
  {
    uint64_t v20 = *((void *)&v34 + 1);
    uint64_t v21 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v17);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 8))(v21, v20);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18C11C080](v37);
}

void sub_1888AC030(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

uint64_t AdobeXMPCore_Int::TAppendParameter<double>(uint64_t a1)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)char v7 = 0u;
  memset(v6, 0, sizeof(v6));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  uint64_t v2 = *(void *)&v6[0];
  *(_DWORD *)((char *)v6 + *(void *)(*(void *)&v6[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v6
                                                                                  + *(void *)(*(void *)&v6[0] - 24)
                                                                                  + 8) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v6[1] + *(void *)(v2 - 24)) = 6;
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v6[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v6 + *(void *)(*(void *)&v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v6[0] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11C080](v10);
}

void sub_1888AC28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<float>(uint64_t a1)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)char v7 = 0u;
  memset(v6, 0, sizeof(v6));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  uint64_t v2 = *(void *)&v6[0];
  *(_DWORD *)((char *)v6 + *(void *)(*(void *)&v6[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v6
                                                                                  + *(void *)(*(void *)&v6[0] - 24)
                                                                                  + 8) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v6[1] + *(void *)(v2 - 24)) = 6;
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v6[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v6 + *(void *)(*(void *)&v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v6[0] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11C080](v10);
}

void sub_1888AC4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const unsigned int *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<unsigned int>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<unsigned int>(uint64_t a1)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(*(void *)&v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v5[0] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11C080](v9);
}

void sub_1888AC6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const unint64_t *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<unsigned long long>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<unsigned long long>(uint64_t a1)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(*(void *)&v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v5[0] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11C080](v9);
}

void sub_1888AC8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const int *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<int>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<int>(uint64_t a1)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(*(void *)&v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v5[0] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11C080](v9);
}

void sub_1888ACAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const uint64_t *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<long long>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<long long>(uint64_t a1)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v5[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v5 + *(void *)(*(void *)&v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v5[0] + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18C11C080](v9);
}

void sub_1888ACC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const float *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<float>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const double *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<double>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 128))();
}

void AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ErrorImpl>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  if (a1 || !a4)
  {
    (**(void (***)(char *))&a1[*(void *)(*(void *)a1 - 352)])(&a1[*(void *)(*(void *)a1 - 352)]);
    std::shared_ptr<AdobeXMPCore_Int::ErrorImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ErrorImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(&v12, 1, 6, 2);
  long long v9 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)&v12[*(void *)(*(void *)v12 - 304)] + 120))(&v12[*(void *)(*(void *)v12 - 304)], a2, a3);
  (*(void (**)(char *, const char *, uint64_t))(*(void *)&v9[*(void *)(*(void *)v9 - 304)] + 112))(&v9[*(void *)(*(void *)v9 - 304)], "NULL pointer provided for creating shared pointer", -1);
  exception = __cxa_allocate_exception(0x10uLL);
  uint64_t v11 = v13;
  void *exception = v9;
  exception[1] = v11;
}

void non-virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream(uint64_t a1)
{
  *(void *)(a1 - 16) = off_1ED4EF230;
  *(void *)(a1 + 112) = off_1ED4EF280;
  *(void *)a1 = off_1ED4EF258;
  *(void *)(a1 + 8) = &unk_1ED4EF180;
  if (*(char *)(a1 + 95) < 0)
  {
    uint64_t v1 = *(void *)(a1 + 72);
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v1);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();

  JUMPOUT(0x18C11C080);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t MemoryAllocator;
  uint64_t vars8;

  *(void *)(a1 - 16) = off_1ED4EF230;
  uint64_t v1 = a1 + 112;
  *(void *)(a1 + 112) = off_1ED4EF280;
  *(void *)a1 = off_1ED4EF258;
  *(void *)(a1 + 8) = &unk_1ED4EF180;
  if (*(char *)(a1 + 95) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 72);
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18C11C080](v1);

  JUMPOUT(0x18C11C0E0);
}

void virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream(AdobeXMPCore_Int::IMemoryAllocator_I *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*(void *)a1 - 24);
  *(void *)uint64_t v1 = off_1ED4EF230;
  *((void *)v1 + 16) = off_1ED4EF280;
  *((void *)v1 + 2) = off_1ED4EF258;
  *((void *)v1 + 3) = &unk_1ED4EF180;
  if (v1[111] < 0)
  {
    uint64_t v2 = *((void *)v1 + 11);
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();

  JUMPOUT(0x18C11C080);
}

{
  char *v1;
  uint64_t v2;
  uint64_t MemoryAllocator;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*(void *)a1 - 24);
  *(void *)uint64_t v1 = off_1ED4EF230;
  *((void *)v1 + 16) = off_1ED4EF280;
  *((void *)v1 + 2) = off_1ED4EF258;
  *((void *)v1 + 3) = &unk_1ED4EF180;
  if (v1[111] < 0)
  {
    uint64_t v2 = *((void *)v1 + 11);
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18C11C080](v1 + 128);

  JUMPOUT(0x18C11C0E0);
}

void std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream(uint64_t a1)
{
  *(void *)a1 = off_1ED4EF230;
  uint64_t v1 = a1 + 128;
  *(void *)(a1 + 128) = off_1ED4EF280;
  *(void *)(a1 + 16) = off_1ED4EF258;
  *(void *)(a1 + 24) = &unk_1ED4EF180;
  if (*(char *)(a1 + 111) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 88);
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18C11C080](v1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringbuf(uint64_t a1)
{
  *(void *)a1 = &unk_1ED4EF180;
  if (*(char *)(a1 + 87) < 0)
  {
    uint64_t v1 = *(void *)(a1 + 64);
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v1);
  }

  return std::streambuf::~streambuf();
}

void std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringbuf(uint64_t a1)
{
  *(void *)a1 = &unk_1ED4EF180;
  if (*(char *)(a1 + 87) < 0)
  {
    uint64_t v1 = *(void *)(a1 + 64);
    uint64_t MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)MemoryAllocator + 8))(MemoryAllocator, v1);
  }
  std::streambuf::~streambuf();

  JUMPOUT(0x18C11C0E0);
}

double std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 88);
  unint64_t v6 = *(void *)(a1 + 48);
  if (v5 < v6)
  {
    *(void *)(a1 + 88) = v6;
    unint64_t v5 = v6;
  }
  if ((a4 & 0x18) == 0 || a3 == 1 && (a4 & 0x18) == 0x18) {
    goto LABEL_14;
  }
  if (v5)
  {
    long long v7 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      long long v7 = (void *)*v7;
    }
    uint64_t v8 = v5 - (void)v7;
    if (a3) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v9 = a3;
    goto LABEL_20;
  }
  uint64_t v8 = 0;
  if (!a3) {
    goto LABEL_17;
  }
LABEL_10:
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if ((a4 & 8) != 0) {
        uint64_t v9 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
      }
      else {
        uint64_t v9 = v6 - *(void *)(a1 + 40);
      }
      goto LABEL_20;
    }
LABEL_14:
    uint64_t v10 = -1;
    goto LABEL_15;
  }
  uint64_t v9 = v8;
LABEL_20:
  uint64_t v10 = -1;
  uint64_t v12 = v9 + a2;
  if (v12 >= 0 && v8 >= v12 && (!v12 || ((a4 & 8) == 0 || *(void *)(a1 + 24)) && ((a4 & 0x10) == 0 || v6)))
  {
    if ((a4 & 8) != 0)
    {
      *(void *)(a1 + 24) = *(void *)(a1 + 16) + v12;
      *(void *)(a1 + 32) = v5;
    }
    if ((a4 & 0x10) != 0) {
      *(void *)(a1 + 48) = *(void *)(a1 + 40) + v12;
    }
    uint64_t v10 = v12;
  }
LABEL_15:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v10;
  return result;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a1 + 32))(a1, *(void *)(a2 + 128), 0, a3);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::underflow(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 88);
  unint64_t v2 = *(void *)(a1 + 48);
  if (v1 < v2)
  {
    *(void *)(a1 + 88) = v2;
    unint64_t v1 = v2;
  }
  if ((*(unsigned char *)(a1 + 96) & 8) == 0) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 < v1)
  {
    *(void *)(a1 + 32) = v1;
    unint64_t v3 = v1;
  }
  uint64_t v4 = *(unsigned __int8 **)(a1 + 24);
  if ((unint64_t)v4 < v3) {
    return *v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 88);
  unint64_t v3 = *(void *)(a1 + 48);
  if (v2 < v3)
  {
    *(void *)(a1 + 88) = v3;
    unint64_t v2 = v3;
  }
  unint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 16) >= v4) {
    return 0xFFFFFFFFLL;
  }
  if (a2 == -1)
  {
    a2 = 0;
    *(void *)(a1 + 24) = v4 - 1;
    *(void *)(a1 + 32) = v2;
    return a2;
  }
  if ((*(unsigned char *)(a1 + 96) & 0x10) == 0 && *(unsigned __int8 *)(v4 - 1) != a2) {
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 24) = v4 - 1;
  *(void *)(a1 + 32) = v2;
  *(unsigned char *)(v4 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a2;
  return a2;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::overflow(uint64_t a1, int a2)
{
  if (a2 == -1) {
    return 0;
  }
  unsigned __int8 v2 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  long long v7 = *(unsigned __int8 **)(a1 + 48);
  unint64_t v6 = *(unsigned __int8 **)(a1 + 56);
  if (v7 == v6)
  {
    if ((*(unsigned char *)(a1 + 96) & 0x10) == 0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v12 = a1 + 64;
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::push_back((char *)(a1 + 64), 0);
    if (*(char *)(a1 + 87) < 0) {
      unint64_t v13 = (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    else {
      unint64_t v13 = 22;
    }
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::resize((AdobeXMPCore_Int::IMemoryAllocator_I *)(a1 + 64), v13, 0);
    uint64_t v14 = &v7[-v10];
    if (*(char *)(a1 + 87) < 0)
    {
      uint64_t v12 = *(void *)(a1 + 64);
      uint64_t v15 = *(void *)(a1 + 72);
    }
    else
    {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 87);
    }
    unint64_t v6 = (unsigned __int8 *)(v12 + v15);
    long long v7 = &v14[v12];
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = &v14[v12];
    *(void *)(a1 + 56) = v6;
    unint64_t v8 = v12 + v11 - v10;
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 88);
  }
  if ((unint64_t)(v7 + 1) >= v8) {
    unint64_t v8 = (unint64_t)(v7 + 1);
  }
  *(void *)(a1 + 88) = v8;
  if ((*(unsigned char *)(a1 + 96) & 8) != 0)
  {
    uint64_t v16 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v16 = (void *)*v16;
    }
    *(void *)(a1 + 16) = v16;
    *(void *)(a1 + 24) = (char *)v16 + v4 - v5;
    *(void *)(a1 + 32) = v8;
  }
  if (v7 == v6)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t, void))(*(void *)a1 + 104);
    return v17(a1, v2);
  }
  else
  {
    *(void *)(a1 + 48) = v7 + 1;
    unsigned __int8 *v7 = v2;
    return v2;
  }
}

void sub_1888AD8E0(void *a1)
{
}

char *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::push_back(char *result, char a2)
{
  unint64_t v3 = result;
  if ((result[23] & 0x80000000) == 0)
  {
    if (result[23] != 22)
    {
      uint64_t v5 = result[23];
      result[23] = (result[23] + 1) & 0x7F;
      goto LABEL_8;
    }
    uint64_t v4 = 22;
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)result + 1);
  uint64_t v4 = (*((void *)result + 2) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v5 == v4)
  {
LABEL_5:
    double result = std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by((AdobeXMPCore_Int::IMemoryAllocator_I *)result, v4, 1uLL, v4, v4, 0, 0);
    uint64_t v5 = v4;
  }
  v3[1] = v5 + 1;
  unint64_t v3 = (void *)*v3;
LABEL_8:
  unint64_t v6 = (char *)v3 + v5;
  *unint64_t v6 = a2;
  v6[1] = 0;
  return result;
}

unsigned char *std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)result + 24);
  if ((v2 & 0x10) != 0)
  {
    unint64_t v3 = (char *)*((void *)result + 11);
    uint64_t v4 = (char *)*((void *)result + 6);
    if (v3 < v4)
    {
      *((void *)result + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v4;
      unint64_t v3 = v4;
    }
    uint64_t v5 = (char *)*((void *)result + 5);
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      return result;
    }
    uint64_t v5 = (char *)*((void *)result + 2);
    unint64_t v3 = (char *)*((void *)result + 4);
  }
  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__init_with_size[abi:ne180100]<char *,char *>((unsigned char *)a2, v5, v3, v3 - v5);
}

unsigned char *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__init_with_size[abi:ne180100]<char *,char *>(unsigned char *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)result);
    double result = (unsigned char *)(**MemoryAllocator)(MemoryAllocator, v9);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    result[23] = a4;
  }
  while (a2 != a3)
  {
    char v11 = *a2++;
    *(unsigned char *)uint64_t v4 = v11;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>::__push_back_slow_path<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>(AdobeXMPCore_Int::IMemoryAllocator_I *a1, long long *a2)
{
  uint64_t v3 = (uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    uint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v7 = v4;
  }
  v14[4] = (uint64_t)a1 + 16;
  uint64_t MemoryAllocator = (uint64_t (***)(void, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  uint64_t v9 = (**MemoryAllocator)(MemoryAllocator, 16 * v7);
  uint64_t v10 = (long long *)(v9 + 16 * v3);
  v14[0] = v9;
  v14[1] = (uint64_t)v10;
  void v14[3] = v9 + 16 * v7;
  long long v11 = *a2;
  *uint64_t v10 = *a2;
  if (*((void *)&v11 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v14[2] = (uint64_t)(v10 + 1);
  std::vector<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>::__swap_out_circular_buffer((uint64_t *)a1, v14);
  uint64_t v12 = *((void *)a1 + 1);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(v14);
  return v12;
}

void sub_1888ADBAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>*>,std::reverse_iterator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 16);
      a3 -= 16;
      *(void *)(v7 - 16) = v8;
      uint64_t v9 = *(void *)(a3 + 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v15 + 1);
      }
      v7 -= 16;
      *((void *)&v15 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AdobeXMPCore::INode_v1 const>>,std::reverse_iterator<std::shared_ptr<AdobeXMPCore::INode_v1 const>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x18C11BED0](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x18C11BEE0](v13);
  return a1;
}

void sub_1888ADE54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x18C11BEE0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1888ADE34);
}

void sub_1888ADEA8(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1888AE030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void std::shared_ptr<AdobeXMPCore_Int::ErrorImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ErrorImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1888AE174(void *a1)
{
  __cxa_begin_catch(a1);
  unint64_t v4 = (void *)((char *)v3 + *(void *)(*v3 - 352) + (v2 >> 1));
  if (v2) {
    unint64_t v1 = *(void (**)(void *))(*v4 + v1);
  }
  v1(v4);
  __cxa_rethrow();
}

void sub_1888AE1DC(_Unwind_Exception *a1)
{
}

uint64_t std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::ErrorImpl *&>(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2 + *(void *)(*(void *)*a2 - 352);
  uint64_t v3 = *(uint64_t (**)(void *))a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(v2 + (v4 >> 1));
  if (v4) {
    return (*(uint64_t (**)(void))(*v5 + v3))();
  }
  else {
    return v3(v5);
  }
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::ErrorImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ErrorImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11C0E0);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ErrorImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ErrorImpl>>::__on_zero_shared(uint64_t a1)
{
  return std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>::operator()[abi:ne180100]<AdobeXMPCore_Int::ErrorImpl *&>(a1 + 32, (void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ErrorImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ErrorImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void PSIR_FileWriter::DeleteExistingInfo(PSIR_FileWriter *this)
{
  if (*((unsigned char *)this + 10))
  {
    if (*((unsigned char *)this + 11)) {
      PSIR_FileWriter::DeleteExistingInfo();
    }
    if (*((unsigned char *)this + 12)) {
      free(*((void **)this + 3));
    }
  }
  else if (*((unsigned char *)this + 11))
  {
    uint64_t v2 = (PSIR_FileWriter *)*((void *)this + 4);
    if (v2 != (PSIR_FileWriter *)((char *)this + 40))
    {
      do
      {
        *((unsigned char *)v2 + 40) = 1;
        uint64_t v3 = (PSIR_FileWriter *)*((void *)v2 + 1);
        if (v3)
        {
          do
          {
            uint64_t v4 = v3;
            uint64_t v3 = *(PSIR_FileWriter **)v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            uint64_t v4 = (PSIR_FileWriter *)*((void *)v2 + 2);
            BOOL v5 = *(void *)v4 == (void)v2;
            uint64_t v2 = v4;
          }
          while (!v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != (PSIR_FileWriter *)((char *)this + 40));
    }
  }
  size_t v7 = (void *)*((void *)this + 5);
  uint64_t v6 = (void *)((char *)this + 40);
  std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy((uint64_t)(v6 - 1), v7);
  *uint64_t v6 = 0;
  v6[1] = 0;
  *(v6 - 2) = 0;
  *(v6 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v6;
  *((_DWORD *)v6 - 6) = 0;
  *((_DWORD *)v6 - 8) = 0;
  *((unsigned char *)v6 - 28) = 0;
}

void PSIR_FileWriter::~PSIR_FileWriter(PSIR_FileWriter *this)
{
  *(void *)this = &unk_1ED4E3C38;
  if (*((unsigned char *)this + 10) && *((unsigned char *)this + 11))
  {
    uint64_t v4 = "! (this->memParsed && this->fileParsed)";
    int v5 = 76;
    goto LABEL_11;
  }
  if (!*((unsigned char *)this + 12)) {
    goto LABEL_6;
  }
  uint64_t v2 = (void *)*((void *)this + 3);
  if (!v2)
  {
    uint64_t v4 = "this->memContent != 0";
    int v5 = 79;
LABEL_11:
    __assert_rtn("~PSIR_FileWriter", "PSIR_FileWriter.cpp", v5, v4);
  }
  free(v2);
LABEL_6:
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
}

{
  uint64_t vars8;

  PSIR_FileWriter::~PSIR_FileWriter(this);

  JUMPOUT(0x18C11C0E0);
}

uint64_t PSIR_FileWriter::GetImgRsrc(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v3 = a1 + 40;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(unsigned __int16 *)(v4 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(unsigned __int16 *)(v6 + 32) > a2) {
    return 0;
  }
  if (a3)
  {
    *(_WORD *)a3 = *(_WORD *)(v6 + 42);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v6 + 44);
    *(void *)(a3 + 8) = *(void *)(v6 + 48);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v6 + 56);
  }
  return 1;
}

uint64_t PSIR_FileWriter::SetImgRsrc(PSIR_FileWriter *this, unsigned int a2, const void *__s2, size_t __n)
{
  unsigned int v4 = __n;
  BOOL v8 = (uint64_t *)((char *)this + 40);
  unsigned int v7 = (char **)*((void *)this + 5);
  if (!v7) {
    goto LABEL_12;
  }
  int v9 = (uint64_t *)((char *)this + 40);
  do
  {
    unsigned int v10 = *((unsigned __int16 *)v7 + 16);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      int64_t v12 = v7;
    }
    else {
      int64_t v12 = v7 + 1;
    }
    if (v11) {
      int v9 = (uint64_t *)v7;
    }
    unsigned int v7 = (char **)*v12;
  }
  while (*v12);
  if (v9 != v8 && *((unsigned __int16 *)v9 + 16) <= a2)
  {
    if (*((_DWORD *)v9 + 11) == __n)
    {
      uint64_t result = memcmp((const void *)v9[6], __s2, __n);
      if (!result) {
        return result;
      }
    }
    uint64_t v14 = (char *)(v9 + 5);
    if (*((unsigned char *)v9 + 41) || *v14)
    {
      uint64_t v17 = (void *)v9[6];
      if (v17)
      {
        free(v17);
        v9[6] = 0;
      }
    }
    *((_DWORD *)v9 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v4;
  }
  else
  {
LABEL_12:
    char v13 = *((unsigned char *)this + 11);
    LOBYTE(v19[0]) = 0;
    BYTE1(v19[0]) = v13;
    WORD1(v19[0]) = a2;
    HIDWORD(v19[0]) = __n;
    v19[1] = 0;
    LODWORD(v20) = 0;
    uint64_t v21 = 0;
    v23[0] = v19[0];
    v23[1] = v20;
    uint64_t v22 = (unsigned __int16)a2;
    PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)v19);
    uint64_t v14 = (char *)std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_FileWriter::InternalRsrcInfo> const&>((uint64_t **)v8 - 1, v8, (unsigned __int16 *)&v22, (uint64_t)&v22)+ 40;
    PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)v23);
  }
  *uint64_t v14 = 1;
  uint64_t v15 = malloc_type_malloc(v4, 0xC32B07BEuLL);
  *((void *)v14 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v15;
  if (!v15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    exception[1] = "Out of memory";
    *((unsigned char *)exception + 16) = 0;
  }
  uint64_t result = (uint64_t)memcpy(v15, __s2, v4);
  *((unsigned char *)this + 8) = 1;
  return result;
}

void sub_1888AE6AC(_Unwind_Exception *a1)
{
  PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t PSIR_FileWriter::DeleteImgRsrc(uint64_t this, unsigned int a2)
{
  unsigned __int16 v9 = a2;
  uint64_t v2 = this + 40;
  uint64_t v3 = *(void *)(this + 40);
  if (v3)
  {
    uint64_t v4 = this;
    this += 32;
    uint64_t v5 = v2;
    do
    {
      unsigned int v6 = *(unsigned __int16 *)(v3 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        BOOL v8 = (uint64_t *)v3;
      }
      else {
        BOOL v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *(unsigned __int16 *)(v5 + 32) <= a2)
    {
      this = std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__erase_unique<unsigned short>(this, &v9);
      *(unsigned char *)(v4 + 8) = 1;
      if (v9 != 1060) {
        *(unsigned char *)(v4 + 9) = 1;
      }
    }
  }
  return this;
}

uint64_t PSIR_FileWriter::IsLegacyChanged(PSIR_FileWriter *this)
{
  if (*((unsigned char *)this + 8))
  {
    if (*((unsigned char *)this + 9)) {
      return 1;
    }
    uint64_t v2 = (PSIR_FileWriter *)*((void *)this + 4);
    if (v2 != (PSIR_FileWriter *)((char *)this + 40))
    {
      while (!*((unsigned char *)v2 + 40) || *((_WORD *)v2 + 21) == 1060)
      {
        uint64_t v3 = (PSIR_FileWriter *)*((void *)v2 + 1);
        if (v3)
        {
          do
          {
            uint64_t v4 = v3;
            uint64_t v3 = *(PSIR_FileWriter **)v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            uint64_t v4 = (PSIR_FileWriter *)*((void *)v2 + 2);
            BOOL v5 = *(void *)v4 == (void)v2;
            uint64_t v2 = v4;
          }
          while (!v5);
        }
        uint64_t v2 = v4;
        if (v4 == (PSIR_FileWriter *)((char *)this + 40)) {
          return 0;
        }
      }
      return 1;
    }
  }
  return 0;
}

void PSIR_FileWriter::ParseMemoryResources(uint64_t **this, uint64_t *a2, unsigned int a3, char a4)
{
  PSIR_FileWriter::DeleteExistingInfo((PSIR_FileWriter *)this);
  *((unsigned char *)this + 10) = 1;
  if (!a3) {
    return;
  }
  if ((a4 & 1) == 0)
  {
    this[3] = a2;
    if (*((unsigned char *)this + 12)) {
      PSIR_FileWriter::ParseMemoryResources();
    }
    uint64_t v8 = a3;
    goto LABEL_8;
  }
  if (a3 >= 0x6400001)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 209;
    char v52 = "Outrageous length for memory-based PSIR";
    goto LABEL_63;
  }
  uint64_t v8 = a3;
  unsigned __int16 v9 = (uint64_t *)malloc_type_malloc(a3, 0xD083DF56uLL);
  this[3] = v9;
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    char v52 = "Out of memory";
LABEL_63:
    exception[1] = v52;
    *((unsigned char *)exception + 16) = 0;
  }
  memcpy(v9, a2, a3);
  *((unsigned char *)this + 12) = 1;
  a2 = this[3];
LABEL_8:
  *((_DWORD *)this + 4) = a3;
  unsigned int v10 = (char *)a2 + v8;
  BOOL v11 = (char *)a2 + v8 - 12;
  if (a2 <= (uint64_t *)v11)
  {
    int64_t v12 = v10 - 4;
    int v53 = this + 7;
    char v13 = (uint64_t *)(this + 5);
    uint64_t v14 = (PSIR_FileWriter::InternalRsrcInfo *)&v56;
    unsigned int v54 = a3;
    do
    {
      int v15 = *((unsigned __int8 *)a2 + 6);
      uint64_t v16 = (unsigned int *)((char *)a2 + (((unsigned __int16)v15 + 2) & 0x1FE) + 6);
      if (v16 > (unsigned int *)v12) {
        break;
      }
      unsigned int v19 = *v16;
      uint64_t v18 = v16 + 1;
      unsigned int v17 = v19;
      uint64_t v20 = bswap32(v19);
      if (v20 > a3 || v18 > (unsigned int *)&v10[-v20]) {
        break;
      }
      uint64_t v22 = this[3];
      uint64_t v23 = (uint64_t *)((char *)v18 + ((v20 + 1) & 0xFFFFFFFE));
      if (*(_DWORD *)a2 == 1296646712)
      {
        unsigned int v24 = bswap32(*((unsigned __int16 *)a2 + 2)) >> 16;
        LOWORD(v57) = 0;
        long long v58 = 0u;
        WORD1(v57) = v24;
        DWORD1(v57) = v20;
        *((void *)&v57 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v18;
        LODWORD(v58) = v18 - v22;
        if (v15) {
          *((void *)&v58 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = (char *)a2 + 6;
        }
        uint64_t v25 = *v13;
        if (!*v13) {
          goto LABEL_29;
        }
        uint64_t v26 = (uint64_t)v13;
        do
        {
          unsigned int v27 = *(unsigned __int16 *)(v25 + 32);
          BOOL v28 = v27 >= v24;
          if (v27 >= v24) {
            long long v29 = (uint64_t *)v25;
          }
          else {
            long long v29 = (uint64_t *)(v25 + 8);
          }
          if (v28) {
            uint64_t v26 = v25;
          }
          uint64_t v25 = *v29;
        }
        while (*v29);
        if ((uint64_t *)v26 != v13 && v24 >= *(unsigned __int16 *)(v26 + 32))
        {
          if (!*(_DWORD *)(v26 + 44) && v17 != 0) {
            PSIR_FileWriter::InternalRsrcInfo::operator=(v26 + 40, (uint64_t)&v57);
          }
        }
        else
        {
LABEL_29:
          unsigned __int16 v55 = v24;
          long long v30 = v58;
          *(_OWORD *)uint64_t v14 = v57;
          *((_OWORD *)v14 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v30;
          std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_FileWriter::InternalRsrcInfo> const&>(this + 4, v13, &v55, (uint64_t)&v55);
          PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo(v14);
        }
        PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)&v57);
      }
      else
      {
        unsigned int v31 = v23 - a2;
        if ((v23 - a2)) {
          PSIR_FileWriter::ParseMemoryResources();
        }
        long long v32 = v13;
        std::string::size_type v33 = v10;
        long long v34 = v11;
        long long v35 = v14;
        long long v36 = v12;
        unsigned int v37 = a2 - v22;
        char v39 = (unint64_t *)this[8];
        uint64_t v38 = this[9];
        if (v39 >= (unint64_t *)v38)
        {
          uint64_t v41 = ((char *)v39 - (char *)*v53) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = (char *)v38 - (char *)*v53;
          uint64_t v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
            uint64_t v43 = v41 + 1;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44) {
            int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(this + 9), v44);
          }
          else {
            int v45 = 0;
          }
          unsigned int v47 = (uint64_t *)&v45[8 * v41];
          uint64_t *v47 = v37 | ((unint64_t)v31 << 32);
          std::string::size_type v40 = v47 + 1;
          uint64_t v49 = this[7];
          std::string::size_type v48 = this[8];
          int64_t v12 = v36;
          if (v48 == v49)
          {
            uint64_t v14 = v35;
          }
          else
          {
            do
            {
              uint64_t v50 = *--v48;
              *--unsigned int v47 = v50;
            }
            while (v48 != v49);
            std::string::size_type v48 = *v53;
            uint64_t v14 = v35;
          }
          this[7] = v47;
          this[8] = v40;
          this[9] = (uint64_t *)&v45[8 * v44];
          BOOL v11 = v34;
          if (v48) {
            operator delete(v48);
          }
          unsigned int v10 = v33;
        }
        else
        {
          *char v39 = v37 | ((unint64_t)v31 << 32);
          std::string::size_type v40 = (uint64_t *)(v39 + 1);
          int64_t v12 = v36;
          uint64_t v14 = v35;
          BOOL v11 = v34;
          unsigned int v10 = v33;
        }
        this[8] = v40;
        char v13 = v32;
        a3 = v54;
      }
      a2 = v23;
    }
    while (v23 <= (uint64_t *)v11);
  }
}

void sub_1888AEB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)va);
  _Unwind_Resume(a1);
}

__n128 PSIR_FileWriter::InternalRsrcInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1) || *(unsigned char *)a1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    if (v4)
    {
      free(v4);
      *(void *)(a1 + 8) = 0;
    }
  }
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 24) = 0;
  return result;
}

void PSIR_FileWriter::ParseFileResources(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  PSIR_FileWriter::DeleteExistingInfo((PSIR_FileWriter *)a1);
  a1[11] = 1;
  if (a3)
  {
    unsigned int v54 = a1;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1) + a3;
    int v61 = 0;
    memset(__src, 0, sizeof(__src));
    uint64_t v55 = v6;
    if ((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1) < v6)
    {
      uint64_t v50 = (uint64_t)(a1 + 72);
      unsigned int v51 = (uint64_t **)(a1 + 32);
      char v52 = (char **)(a1 + 56);
      int v53 = (uint64_t *)(a1 + 40);
      while (1)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
        if (v7 - (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1) < 12) {
          return;
        }
        unsigned int v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1);
        unsigned int v56 = 0;
        (**(void (***)(uint64_t, unsigned int *, uint64_t, uint64_t))a2)(a2, &v56, 4, 1);
        unsigned int v9 = v56;
        LOWORD(v56) = 0;
        (**(void (***)(uint64_t, unsigned int *, uint64_t, uint64_t))a2)(a2, &v56, 2, 1);
        unsigned int v10 = (unsigned __int16)v56;
        LOBYTE(v56) = 0;
        (**(void (***)(uint64_t, unsigned int *, uint64_t, uint64_t))a2)(a2, &v56, 1, 1);
        int v11 = v56;
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
        uint64_t v13 = ((_WORD)v11 + 2) & 0x1FE;
        if (v12 - (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1) < v13 + 4) {
          return;
        }
        LOBYTE(__src[0]) = v11;
        (**(void (***)(uint64_t, char *, void, uint64_t))a2)(a2, (char *)__src + 1, (v13 - 1), 1);
        unsigned int v56 = 0;
        (**(void (***)(uint64_t, unsigned int *, uint64_t, uint64_t))a2)(a2, &v56, 4, 1);
        unsigned int v14 = v56;
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
        unsigned int v16 = bswap32(v14);
        int64_t v17 = (v16 + 1) & 0xFFFFFFFE;
        if (v15 - (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1) < v17) {
          return;
        }
        uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1);
        int v19 = v18;
        uint64_t v20 = v18 + v17;
        if (v9 != 1296646712)
        {
          unsigned int v33 = v20 - v8;
          long long v34 = v54;
          long long v36 = (unint64_t *)v54[8];
          unint64_t v35 = v54[9];
          if ((unint64_t)v36 >= v35)
          {
            uint64_t v38 = v18 + v17;
            uint64_t v39 = ((char *)v36 - *v52) >> 3;
            if ((unint64_t)(v39 + 1) >> 61) {
              std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v40 = v35 - (void)*v52;
            uint64_t v41 = v40 >> 2;
            if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
              uint64_t v41 = v39 + 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v41;
            }
            if (v42)
            {
              uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(v50, v42);
              long long v34 = v54;
            }
            else
            {
              uint64_t v43 = 0;
            }
            int v45 = (unint64_t *)&v43[8 * v39];
            *int v45 = v8 | ((unint64_t)v33 << 32);
            unsigned int v37 = v45 + 1;
            unsigned int v47 = (char *)v34[7];
            std::string v46 = (char *)v34[8];
            if (v46 != v47)
            {
              do
              {
                unint64_t v48 = *((void *)v46 - 1);
                v46 -= 8;
                *--int v45 = v48;
              }
              while (v46 != v47);
              std::string v46 = *v52;
            }
            v34[7] = v45;
            v34[8] = v37;
            v34[9] = &v43[8 * v42];
            if (v46) {
              operator delete(v46);
            }
            uint64_t v20 = v38;
          }
          else
          {
            unint64_t *v36 = v8 | ((unint64_t)v33 << 32);
            unsigned int v37 = v36 + 1;
          }
          v34[8] = v37;
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, v20, 0);
          goto LABEL_56;
        }
        unsigned int v21 = __rev16(v10);
        long long v58 = 0u;
        long long v59 = 0u;
        BYTE1(v58) = 1;
        WORD1(v58) = v21;
        DWORD1(v58) = v16;
        LODWORD(v59) = 0;
        uint64_t v22 = *v53;
        if (!*v53) {
          break;
        }
        uint64_t v23 = v53;
        do
        {
          unsigned int v24 = *(unsigned __int16 *)(v22 + 32);
          BOOL v25 = v24 >= v21;
          if (v24 >= v21) {
            uint64_t v26 = (uint64_t *)v22;
          }
          else {
            uint64_t v26 = (uint64_t *)(v22 + 8);
          }
          if (v25) {
            uint64_t v23 = (uint64_t *)v22;
          }
          uint64_t v22 = *v26;
        }
        while (*v26);
        if (v23 == v53 || v21 < *((unsigned __int16 *)v23 + 16)) {
          break;
        }
        if (*((_DWORD *)v23 + 11)) {
          BOOL v44 = 1;
        }
        else {
          BOOL v44 = v14 == 0;
        }
        if (!v44)
        {
          uint64_t v27 = v18 + v17;
          PSIR_FileWriter::InternalRsrcInfo::operator=((uint64_t)(v23 + 5), (uint64_t)&v58);
          goto LABEL_20;
        }
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, v20, 0);
LABEL_33:
        PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)&v58);
LABEL_56:
        if ((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, 0, 1) >= v55) {
          return;
        }
      }
      uint64_t v27 = v18 + v17;
      LOWORD(v56) = v21;
      v57[0] = v58;
      v57[1] = v59;
      uint64_t v23 = (uint64_t *)std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_FileWriter::InternalRsrcInfo> const&>(v51, v53, (unsigned __int16 *)&v56, (uint64_t)&v56);
      PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)v57);
LABEL_20:
      *((_DWORD *)v23 + 14) = v19;
      if (v11)
      {
        BOOL v28 = malloc_type_malloc(((_WORD)v11 + 2) & 0x1FE, 0xA6CCD1B5uLL);
        v23[8] = (uint64_t)v28;
        if (!v28) {
          goto LABEL_58;
        }
        memcpy(v28, __src, ((_WORD)v11 + 2) & 0x1FE);
      }
      if (!v10) {
        goto LABEL_32;
      }
      long long v29 = &word_188A56D6E;
      do
      {
        unsigned int v30 = (unsigned __int16)*v29++;
        BOOL v31 = v30 == v21;
      }
      while (v30 > v21);
      if (v31)
      {
        long long v32 = malloc_type_malloc(v17, 0x228DAB1FuLL);
        char v23[6] = (uint64_t)v32;
        if (!v32)
        {
LABEL_58:
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 15;
          exception[1] = "Out of memory";
          *((unsigned char *)exception + 16) = 0;
        }
        (**(void (***)(uint64_t, void *, int64_t, uint64_t))a2)(a2, v32, v17, 1);
      }
      else
      {
LABEL_32:
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, v27, 0);
      }
      goto LABEL_33;
    }
  }
}

void sub_1888AF36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)va);
  _Unwind_Resume(a1);
}

uint64_t PSIR_FileWriter::UpdateMemoryResources(PSIR_FileWriter *this, void **a2)
{
  if (*((unsigned char *)this + 11))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    unsigned int v37 = "Not memory based";
    goto LABEL_49;
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  uint64_t v4 = (char *)this + 40;
  if (v3 == (char *)this + 40)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      unsigned int v6 = v5 + ((*((_DWORD *)v3 + 11) + 1) & 0xFFFFFFFE) + 10;
      uint64_t v7 = (unsigned __int8 *)*((void *)v3 + 8);
      if (v7) {
        unsigned int v5 = ((*v7 + 2) & 0x1FE) + v6;
      }
      else {
        unsigned int v5 = v6 + 2;
      }
      unsigned int v8 = (char *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          unsigned int v9 = v8;
          unsigned int v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned int v9 = (char *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != v4);
  }
  uint64_t v11 = *((void *)this + 7);
  uint64_t v12 = *((void *)this + 8) - v11;
  if (v12)
  {
    unint64_t v13 = v12 >> 3;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    unsigned int v14 = (int *)(v11 + 4);
    do
    {
      int v15 = *v14;
      v14 += 2;
      v5 += v15;
      --v13;
    }
    while (v13);
  }
  uint64_t v16 = v5;
  int64_t v17 = (char *)malloc_type_malloc(v5, 0x4B7F5921uLL);
  if (!v17)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    unsigned int v37 = "Out of memory";
    goto LABEL_49;
  }
  uint64_t v18 = v17;
  int v19 = (char *)*((void *)this + 4);
  uint64_t v20 = v17;
  if (v19 != v4)
  {
    unsigned int v21 = &v17[v16];
    uint64_t v20 = v17;
    do
    {
      *(_DWORD *)uint64_t v20 = 1296646712;
      *((_WORD *)v20 + 2) = bswap32(*((unsigned __int16 *)v19 + 21)) >> 16;
      uint64_t v22 = (unsigned char *)*((void *)v19 + 8);
      if (v22)
      {
        uint64_t v23 = *v22;
        if (!*v22) {
          PSIR_FileWriter::UpdateMemoryResources();
        }
        unsigned int v24 = v20 + 6;
        if (v21 - v24 < v23 + 1) {
          goto LABEL_48;
        }
        memcpy(v24, v22, v23 + 1);
        BOOL v25 = &v24[v23 + 1];
        if ((v23 & 1) == 0) {
          *v25++ = 0;
        }
      }
      else
      {
        *((_WORD *)v20 + 3) = 0;
        BOOL v25 = v20 + 8;
      }
      *(_DWORD *)BOOL v25 = bswap32(*((_DWORD *)v19 + 11));
      uint64_t v26 = v25 + 4;
      int64_t v27 = *((unsigned int *)v19 + 11);
      if (v21 - v26 < v27) {
        goto LABEL_48;
      }
      memcpy(v26, *((const void **)v19 + 6), v27);
      uint64_t v28 = *((unsigned int *)v19 + 11);
      uint64_t v20 = &v26[v28];
      if (v28) {
        *v20++ = 0;
      }
      long long v29 = (char *)*((void *)v19 + 1);
      if (v29)
      {
        do
        {
          unsigned int v30 = v29;
          long long v29 = *(char **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          unsigned int v30 = (char *)*((void *)v19 + 2);
          BOOL v10 = *(void *)v30 == (void)v19;
          int v19 = v30;
        }
        while (!v10);
      }
      int v19 = v30;
    }
    while (v30 != v4);
  }
  uint64_t v31 = *((void *)this + 7);
  if (*((void *)this + 8) != v31)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    while (1)
    {
      int64_t v34 = *(unsigned int *)(v31 + v32 + 4);
      if (&v18[v16] - v20 < v34) {
        break;
      }
      memcpy(v20, (const void *)(*((void *)this + 3) + *(unsigned int *)(v31 + v32)), v34);
      v20 += v34;
      ++v33;
      uint64_t v31 = *((void *)this + 7);
      v32 += 8;
      if (v33 >= (*((void *)this + 8) - v31) >> 3) {
        goto LABEL_42;
      }
    }
LABEL_48:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    unsigned int v37 = "Buffer overrun";
LABEL_49:
    exception[1] = v37;
    *((unsigned char *)exception + 16) = 0;
  }
LABEL_42:
  if (v20 != &v18[v16]) {
    PSIR_FileWriter::UpdateMemoryResources();
  }
  (*(void (**)(PSIR_FileWriter *, unsigned char *, uint64_t, void))(*(void *)this + 40))(this, v18, v16, 0);
  *((unsigned char *)this + 12) = v16 != 0;
  if (a2) {
    *a2 = v18;
  }
  return v16;
}

uint64_t PSIR_FileWriter::UpdateFileResources(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, XMP_ProgressTracker *this)
{
  int v39 = 0;
  if (*(unsigned char *)(a1 + 10))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "Not file based";
    *((unsigned char *)exception + 16) = 0;
  }
  unsigned int v9 = (void *)(a1 + 40);
  if (this)
  {
    BOOL v10 = *(void **)(a1 + 32);
    float v11 = 8.0;
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = (void *)v10[1];
        unint64_t v13 = v10;
        if (v12)
        {
          do
          {
            unsigned int v14 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            unsigned int v14 = (void *)v13[2];
            BOOL v15 = *v14 == (void)v13;
            unint64_t v13 = v14;
          }
          while (!v15);
        }
        float v11 = v11 + (float)(*((_DWORD *)v10 + 11) + 12);
        BOOL v10 = v14;
      }
      while (v14 != v9);
    }
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 64) - v16;
    if (v17)
    {
      unint64_t v18 = v17 >> 3;
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      int v19 = (unsigned int *)(v16 + 4);
      do
      {
        unsigned int v20 = *v19;
        v19 += 2;
        float v11 = v11 + (float)v20;
        --v18;
      }
      while (v18);
    }
    if (!*((unsigned char *)this + 32)) {
      PSIR_FileWriter::UpdateFileResources();
    }
    XMP_ProgressTracker::AddTotalWork(this, v11);
  }
  unsigned int v38 = 0;
  uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16))(a3, 0, 1);
  (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)a3 + 8))(a3, &v38, 4);
  uint64_t v37 = 1296646712;
  uint64_t v22 = *(void **)(a1 + 32);
  if (v22 != v9)
  {
    do
    {
      WORD2(v37) = bswap32(*((unsigned __int16 *)v22 + 21)) >> 16;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a3 + 8))(a3, &v37, 6);
      v38 += 6;
      uint64_t v23 = (unsigned char *)v22[8];
      if (v23)
      {
        if (!*v23) {
          PSIR_FileWriter::UpdateFileResources();
        }
        int v24 = (*v23 + 2) & 0x1FE;
        (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
        unsigned int v25 = v38 + v24;
      }
      else
      {
        (*(void (**)(uint64_t, int *, uint64_t))(*(void *)a3 + 8))(a3, &v39, 2);
        unsigned int v25 = v38 + 2;
      }
      unsigned int v38 = v25;
      unsigned int v36 = bswap32(*((_DWORD *)v22 + 11));
      (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)a3 + 8))(a3, &v36, 4);
      uint64_t v26 = v22[6];
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)a3 + 8))(a3, v26, *((unsigned int *)v22 + 11));
      }
      else
      {
        (*(void (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *((unsigned int *)v22 + 14), 0);
        XIO::Copy(a2, a3);
      }
      int v27 = *((_DWORD *)v22 + 11);
      v38 += v27 + 4;
      if (v27)
      {
        (*(void (**)(uint64_t, int *, uint64_t))(*(void *)a3 + 8))(a3, &v39, 1);
        ++v38;
      }
      uint64_t v28 = (void *)v22[1];
      if (v28)
      {
        do
        {
          long long v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          long long v29 = (void *)v22[2];
          BOOL v15 = *v29 == (void)v22;
          uint64_t v22 = v29;
        }
        while (!v15);
      }
      uint64_t v22 = v29;
    }
    while (v29 != v9);
  }
  uint64_t v30 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) != v30)
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    do
    {
      (*(void (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(unsigned int *)(v30 + v31), 0);
      XIO::Copy(a2, a3);
      uint64_t v30 = *(void *)(a1 + 56);
      uint64_t v33 = *(void *)(a1 + 64);
      v38 += *(_DWORD *)(v30 + v31 + 4);
      ++v32;
      v31 += 8;
    }
    while (v32 < (v33 - v30) >> 3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a3 + 16))(a3, v21, 0);
  unsigned int v36 = bswap32(v38);
  (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)a3 + 8))(a3, &v36, 4);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16))(a3, 0, 2);
  return v38;
}

uint64_t PSIR_FileWriter::IsChanged(PSIR_FileWriter *this)
{
  return *((unsigned __int8 *)this + 8);
}

void PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo(PSIR_FileWriter::InternalRsrcInfo *this)
{
  int v2 = *((unsigned __int8 *)this + 1);
  if (*((unsigned char *)this + 1) || *(unsigned char *)this)
  {
    uint64_t v3 = (void *)*((void *)this + 1);
    if (v3)
    {
      free(v3);
      *((void *)this + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = 0;
      int v2 = *((unsigned __int8 *)this + 1);
    }
    if (v2)
    {
      uint64_t v4 = (void *)*((void *)this + 3);
      if (v4)
      {
        free(v4);
        *((void *)this + 3) = 0;
      }
    }
  }
}

void std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy(a1, a2[1]);
    PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)(a2 + 5));
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_FileWriter::InternalRsrcInfo> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  unsigned int v6 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__find_equal<unsigned short>(a1, a2, &v14, &v13, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    uint64_t v12 = 0;
    uint64_t v7 = operator new(0x48uLL);
    v11[1] = (uint64_t)(a1 + 1);
    long long v9 = *(_OWORD *)(a4 + 16);
    void v7[2] = *(_OWORD *)a4;
    uint64_t v7[3] = v9;
    *((void *)v7 + 8) = *(void *)(a4 + 32);
    LOBYTE(v12) = 1;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v14, v8, (uint64_t *)v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)(v2 + 40));
    }
    operator delete((void *)v2);
  }
}

uint64_t std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__erase_unique<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 32)) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)(v4 + 40));
  operator delete((void *)v4);
  return 1;
}

void PSIR_FileWriter::DeleteExistingInfo()
{
}

void PSIR_FileWriter::ParseMemoryResources()
{
  __assert_rtn("ParseMemoryResources", "PSIR_FileWriter.cpp", 245, "(rsrcLength & 1) == 0");
}

{
  __assert_rtn("ParseMemoryResources", "PSIR_FileWriter.cpp", 198, "! this->ownedContent");
}

void PSIR_FileWriter::UpdateMemoryResources()
{
  __assert_rtn("UpdateMemoryResources", "PSIR_FileWriter.cpp", 469, "rsrcPtr == (newContent + newLength)");
}

{
  __assert_rtn("UpdateMemoryResources", "PSIR_FileWriter.cpp", 433, "nameLen > 0");
}

void PSIR_FileWriter::UpdateFileResources()
{
}

{
  __assert_rtn("UpdateFileResources", "PSIR_FileWriter.cpp", 516, "progressTracker->WorkInProgress()");
}

void *AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointer(AdobeXMPCore_Int::ISimpleNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

void *AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointerInternal(void *this, uint64_t a2, int a3, int a4)
{
  if (a2 == 0x63536D6C4E6F6465)
  {
    if (a3 != -1)
    {
      if (a3 != 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63536D6C4E6F6465, a3, exception);
      }
      return (void *)((char *)this + *(void *)(*this - 632));
    }
  }
  else
  {
    this = AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal((void *)((char *)this + *(void *)(*this - 640)), a2, a3, 0);
    if (this) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = a4 == 0;
    }
    if (!v6)
    {
      uint64_t v7 = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63536D6C4E6F6465, a2, v7);
    }
  }
  return this;
}

void sub_1888B00A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *virtual thunk to'AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointer(AdobeXMPCore_Int::ISimpleNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ISimpleNode_I *)((char *)this + *(void *)(*(void *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ISimpleNode_I *)((char *)this + *(void *)(*(void *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::getInterfacePointer(AdobeXMPCore_Int::ISimpleNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ISimpleNode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(void *, uint64_t, void))AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointer, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ISimpleNode_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ISimpleNode_I,void *,void *,unsigned long long,unsigned int>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  *a1 = 0;
  long long v9 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *, uint64_t, void))(*v9 + a4);
  }
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 584))();
}

uint64_t virtual thunk to'AdobeXMPCore_Int::ISimpleNode_I::getInterfacePointer(AdobeXMPCore_Int::ISimpleNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ISimpleNode_I::getInterfacePointer((AdobeXMPCore_Int::ISimpleNode_I *)((char *)this + *(void *)(*(void *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::ISimpleNode_I::getInterfacePointer((AdobeXMPCore_Int::ISimpleNode_I *)((char *)this + *(void *)(*(void *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::getValue(AdobeXMPCore_Int::ISimpleNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ISimpleNode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(void *)(*(void *)this - 632), (void (*)(char **__return_ptr, void *))AdobeXMPCore::ISimpleNode_v1::GetValue, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ISimpleNode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(void *a1, uint64_t a2, void (*a3)(char **__return_ptr, void *), uint64_t a4)
{
  *a1 = 0;
  unsigned int v8 = 0;
  long long v9 = 0;
  uint64_t v4 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(void (**)(char **__return_ptr, void *))(*v4 + a3);
  }
  a3(&v8, v4);
  if (v8)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)&v8[*(void *)(*(void *)v8 - 56)] + 16))(&v8[*(void *)(*(void *)v8 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)&v8[*(void *)(*(void *)v8 - 64)] + 16))(&v8[*(void *)(*(void *)v8 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v6;
}

void sub_1888B04D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 2)
  {
    exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
    uint64_t v15 = *exception_ptr;
    unsigned int v14 = (std::__shared_weak_count *)exception_ptr[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __cxa_begin_catch(a1);
    uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15);
    *BOOL v10 = v16;
    uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)&v16[*(void *)(*(void *)v16 - 56)] + 16))(&v16[*(void *)(*(void *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __cxa_end_catch();
    JUMPOUT(0x1888B04B8);
  }
  __cxa_begin_catch(a1);
  AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, &a9);
}

void sub_1888B0650(_Unwind_Exception *a1)
{
}

uint64_t AdobeXMPCore::ISimpleNode_v1::GetValue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 504))();
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::setValue(AdobeXMPCore_Int::ISimpleNode_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ISimpleNode_v1,char const*,unsigned long long>(a4, (uint64_t)this + *(void *)(*(void *)this - 632), (uint64_t (*)(void *, uint64_t, uint64_t))AdobeXMPCore::ISimpleNode_v1::SetValue, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ISimpleNode_I.cpp", 61, (uint64_t)a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ISimpleNode_v1,char const*,unsigned long long>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  *a1 = 0;
  long long v9 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    unsigned int v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*v9 + a3);
  }
  return v8(v9, a7, a8);
}

uint64_t AdobeXMPCore::ISimpleNode_v1::SetValue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 512))();
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::isURIType(AdobeXMPCore_Int::ISimpleNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::ISimpleNode_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(void *)(*(void *)this - 632), 0, (uint64_t (*)(void *))AdobeXMPCore::ISimpleNode_v1::IsURIType, 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::ISimpleNode_v1,unsigned int,BOOL>(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *), uint64_t a5)
{
  *a1 = 0;
  uint64_t v5 = (void *)(a2 + (a5 >> 1));
  if (a5) {
    a4 = *(uint64_t (**)(void *))(*v5 + a4);
  }
  return a4(v5);
}

uint64_t AdobeXMPCore::ISimpleNode_v1::IsURIType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 520))();
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::setURIType(AdobeXMPCore_Int::ISimpleNode_I *this, int a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ISimpleNode_v1,BOOL>(a3, (uint64_t)this + *(void *)(*(void *)this - 632), (uint64_t (*)(void *, uint64_t))AdobeXMPCore::ISimpleNode_v1::SetURIType, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ISimpleNode_I.cpp", 71, a2 != 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ISimpleNode_v1,BOOL>(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = 0;
  uint64_t v7 = (void *)(a2 + (a4 >> 1));
  if (a4) {
    a3 = *(uint64_t (**)(void *, uint64_t))(*v7 + a3);
  }
  return a3(v7, a7);
}

uint64_t AdobeXMPCore::ISimpleNode_v1::SetURIType(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 528))();
}

void WebPInitAlphaProcessingNEON()
{
  WebPApplyAlphaMultiply = ApplyAlphaMultiply_NEON;
  WebPDispatchAlpha = DispatchAlpha_NEON;
  WebPDispatchAlphaToGreen = (uint64_t)DispatchAlphaToGreen_NEON;
  WebPExtractAlpha = ExtractAlpha_NEON;
  WebPExtractGreen = ExtractGreen_NEON;
}

char *ApplyAlphaMultiply_NEON(char *result, int a2, int a3, int a4, int a5)
{
  if (a4 >= 1)
  {
    uint64_t v5 = 3;
    if (a2) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = a5;
    do
    {
      if (a2)
      {
        if (a3 >= 8)
        {
          uint64_t v7 = result;
          for (uint64_t i = 8; i <= a3; i += 8)
          {
            int8x8x4_t v26 = vld4_s8(v7);
            int8x16_t v9 = (int8x16_t)vmull_u8((uint8x8_t)v26.val[1], (uint8x8_t)v26.val[0]);
            int8x16_t v10 = (int8x16_t)vmull_u8((uint8x8_t)v26.val[2], (uint8x8_t)v26.val[0]);
            int8x16_t v11 = (int8x16_t)vmull_u8((uint8x8_t)v26.val[3], (uint8x8_t)v26.val[0]);
            v26.val[1] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v9, 8uLL), (int16x8_t)vmvnq_s8(v9));
            v26.val[2] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v10, 8uLL), (int16x8_t)vmvnq_s8(v10));
            v26.val[3] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v11, 8uLL), (int16x8_t)vmvnq_s8(v11));
            vst4_s8(v7, v26);
            v7 += 32;
          }
LABEL_14:
          int v12 = a3 & 0x7FFFFFF8;
          goto LABEL_15;
        }
      }
      else if (a3 >= 8)
      {
        uint64_t v13 = result;
        for (uint64_t j = 8; j <= a3; j += 8)
        {
          int8x8x4_t v27 = vld4_s8(v13);
          int8x16_t v15 = (int8x16_t)vmull_u8((uint8x8_t)v27.val[1], (uint8x8_t)v27.val[3]);
          int8x16_t v16 = (int8x16_t)vmull_u8((uint8x8_t)v27.val[2], (uint8x8_t)v27.val[3]);
          int8x16_t v17 = (int8x16_t)vmull_u8((uint8x8_t)v27.val[0], (uint8x8_t)v27.val[3]);
          v27.val[1] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v15, 8uLL), (int16x8_t)vmvnq_s8(v15));
          v27.val[2] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v16, 8uLL), (int16x8_t)vmvnq_s8(v16));
          v27.val[0] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v17, 8uLL), (int16x8_t)vmvnq_s8(v17));
          vst4_s8(v13, v27);
          v13 += 32;
        }
        goto LABEL_14;
      }
      int v12 = 0;
LABEL_15:
      if (v12 < a3)
      {
        unint64_t v18 = &result[a2 != 0];
        unsigned int v19 = 4 * v12;
        do
        {
          uint64_t v20 = v19;
          int v21 = result[v5 + v19];
          if (v21 != 255)
          {
            int v22 = 32897 * v21;
            v18[v20] = (v22 * v18[v20]) >> 23;
            v18[(v20 + 1)] = (v22 * v18[(v20 + 1)]) >> 23;
            v18[(v20 + 2)] = (v22 * v18[(v20 + 2)]) >> 23;
          }
          unsigned int v19 = v20 + 4;
          ++v12;
        }
        while (v12 < a3);
      }
      result += v6;
      BOOL v25 = __OFSUB__(a4, 1);
      BOOL v23 = a4 == 1;
      BOOL v24 = --a4 < 0;
    }
    while (!(v24 ^ v25 | v23));
  }
  return result;
}

BOOL DispatchAlpha_NEON(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  if (a4 < 1)
  {
    int8x8_t v8 = (int8x8_t)-1;
    int v9 = 255;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = a2;
    int8x8_t v8 = (int8x8_t)-1;
    int v9 = 255;
    do
    {
      if (a3 < 9)
      {
        unsigned int v14 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        do
        {
          int v12 = (char *)(a5 + (v10 & 0xFFFFFFE0));
          int8x8x4_t v21 = vld4_s8(v12);
          v21.val[0] = *(int8x8_t *)(a1 + v11);
          vst4_s8(v12, v21);
          uint64_t v13 = v11 + 16;
          v11 += 8;
          int8x8_t v8 = vand_s8(v21.val[0], v8);
          v10 += 32;
        }
        while (v13 < a3);
        unsigned int v14 = ((a3 - 9) & 0xFFFFFFF8) + 8;
      }
      if ((int)v14 < a3)
      {
        uint64_t v15 = 0;
        unsigned int v16 = v14;
        uint64_t v17 = 4 * v14;
        uint64_t v18 = a1 + v14;
        do
        {
          int v19 = *(unsigned __int8 *)(v18 + v15);
          *(unsigned char *)(a5 + (v17 & 0xFFFFFFFC)) = v19;
          v9 &= v19;
          v17 += 4;
          ++v15;
        }
        while ((int)(v16 + v15) < a3);
      }
      a1 += v7;
      a5 += a6;
      ++v6;
    }
    while (v6 != a4);
  }
  return ((16843009 * v9) & v8.i32[0] & v8.i32[1]) != -1;
}

uint64_t DispatchAlphaToGreen_NEON(uint64_t result, int a2, int a3, int a4, char *a5, int a6)
{
  if (a4 >= 1)
  {
    int v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (a3 >= 8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = a5;
        do
        {
          uint64_t v11 = *(void *)(result + v9);
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          vst4_s8(v10, *(int8x8x4_t *)&v7);
          v10 += 32;
          uint64_t v14 = v9 + 16;
          v9 += 8;
        }
        while (v14 <= a3);
        LODWORD(v8) = a3 & 0x7FFFFFF8;
      }
      else
      {
        LODWORD(v8) = 0;
      }
      if ((int)v8 < a3)
      {
        uint64_t v8 = v8;
        do
        {
          *(_DWORD *)&a5[4 * v8] = *(unsigned __int8 *)(result + v8) << 8;
          ++v8;
        }
        while ((int)v8 < a3);
      }
      result += a2;
      ++v6;
      a5 += 4 * a6;
    }
    while (v6 != a4);
  }
  return result;
}

BOOL ExtractAlpha_NEON(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  if (a4 < 1)
  {
    int32x2_t v8 = (int32x2_t)-1;
    int v9 = 255;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = a2;
    int32x2_t v8 = (int32x2_t)-1;
    int v9 = 255;
    do
    {
      if (a3 < 9)
      {
        unsigned int v15 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = (const char *)(a1 + (v10 & 0xFFFFFFE0));
          unint64_t v13 = (unint64_t)vld4_s8(v12);
          *(void *)(a5 + v1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v13;
          uint64_t v14 = v11 + 16;
          v11 += 8;
          int32x2_t v8 = (int32x2_t)vand_s8((int8x8_t)v13, (int8x8_t)v8);
          v10 += 32;
        }
        while (v14 < a3);
        unsigned int v15 = ((a3 - 9) & 0xFFFFFFF8) + 8;
      }
      if ((int)v15 < a3)
      {
        uint64_t v16 = 0;
        unsigned int v17 = v15;
        uint64_t v18 = 4 * v15;
        uint64_t v19 = a5 + v15;
        do
        {
          int v20 = *(unsigned __int8 *)(a1 + (v18 & 0xFFFFFFFC));
          *(unsigned char *)(v19 + v16) = v20;
          v9 &= v20;
          v18 += 4;
          ++v16;
        }
        while ((int)(v17 + v16) < a3);
      }
      a1 += v7;
      a5 += a6;
      ++v6;
    }
    while (v6 != a4);
  }
  return (vand_s8((int8x8_t)vdup_lane_s32(v8, 1), (int8x8_t)v8).u32[0] & (16843009 * v9)) == -1;
}

const char *ExtractGreen_NEON(const char *result, uint64_t a2, int a3)
{
  if (a3 >= 16)
  {
    uint64_t v4 = 0;
    unsigned int v3 = a3 & 0xFFFFFFF0;
    uint64_t v5 = result;
    do
    {
      int8x16x4_t v10 = vld4q_s8(v5);
      v5 += 64;
      *(int8x16_t *)(a2 + v4) = v10.val[1];
      unint64_t v6 = v4 + 32;
      v4 += 16;
    }
    while (v6 <= a3);
  }
  else
  {
    unsigned int v3 = 0;
  }
  if ((int)v3 < a3)
  {
    uint64_t v7 = (unsigned char *)(a2 + v3);
    int32x2_t v8 = &result[4 * v3];
    do
    {
      int v9 = *(_DWORD *)v8;
      v8 += 4;
      *v7++ = BYTE1(v9);
      ++v3;
    }
    while ((int)v3 < a3);
  }
  return result;
}

uint64_t VP8InitBitReader(uint64_t result, unint64_t *a2, unint64_t a3)
{
  if (!result) {
    VP8InitBitReader_cold_1();
  }
  if (!a2) {
    VP8InitBitReader_cold_2();
  }
  if (a3 >> 31) {
    VP8InitBitReader_cold_3();
  }
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0xFFFFFFF8000000FELL;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = (char *)a2 + a3;
  unint64_t v3 = (unint64_t)a2 + a3 - 7;
  if (a3 <= 7) {
    unint64_t v3 = (unint64_t)a2;
  }
  *(void *)(result + 32) = v3;
  if (v3 <= (unint64_t)a2)
  {
    return VP8LoadFinalBytes(result);
  }
  else
  {
    unint64_t v4 = *a2;
    *(void *)(result + 16) = (char *)a2 + 7;
    *(void *)__n128 result = bswap64(v4) >> 8;
    *(_DWORD *)(result + 12) = 48;
  }
  return result;
}

uint64_t VP8LoadFinalBytes(uint64_t result)
{
  if (!result || (unint64_t v1 = *(unsigned __int8 **)(result + 16)) == 0) {
    VP8LoadFinalBytes_cold_1();
  }
  if ((unint64_t)v1 >= *(void *)(result + 24))
  {
    if (*(_DWORD *)(result + 40))
    {
      *(_DWORD *)(result + 12) = 0;
    }
    else
    {
      *(void *)result <<= 8;
      *(_DWORD *)(result + 12) += 8;
      *(_DWORD *)(result + 40) = 1;
    }
  }
  else
  {
    *(_DWORD *)(result + 12) += 8;
    *(void *)(result + 16) = v1 + 1;
    *(void *)__n128 result = *v1 | (*(void *)result << 8);
  }
  return result;
}

uint64_t VP8GetValue(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  LODWORD(v3) = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  unsigned int v6 = a2 + 1;
  do
  {
    if (v4 < 0)
    {
      uint64_t v7 = *(unint64_t **)(a1 + 16);
      if (!v7) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v7 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v4 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        unint64_t v8 = *v7;
        *(void *)(a1 + 16) = (char *)v7 + 7;
        *((void *)&v9 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = *(void *)a1;
        *(void *)&long long v9 = bswap64(v8);
        *(void *)a1 = v9 >> 8;
        v4 += 56;
      }
    }
    unsigned int v10 = (v5 >> 1) & 0xFFFFFF;
    int v11 = v4;
    uint64_t v12 = *(void *)a1 >> v4;
    if (v10 >= v12)
    {
      unsigned int v13 = v10 + 1;
    }
    else
    {
      unsigned int v13 = v5 - v10;
      *(void *)a1 -= (unint64_t)(v10 + 1) << v11;
    }
    int v14 = v10 < v12;
    unsigned int v15 = __clz(v13) ^ 0x18;
    unsigned int v16 = v13 << v15;
    int v4 = v11 - v15;
    unsigned int v5 = v16 - 1;
    *(_DWORD *)(a1 + 8) = v16 - 1;
    *(_DWORD *)(a1 + 12) = v4;
    uint64_t v3 = (v14 << (v6-- - 2)) | v3;
  }
  while (v6 > 1);
  return v3;
}

uint64_t VP8GetSignedValue(uint64_t a1, int a2)
{
  unsigned int Value = VP8GetValue(a1, a2);
  if (VP8GetValue(a1, 1)) {
    return -Value;
  }
  else {
    return Value;
  }
}

void *VP8LInitBitReader(void *result, unsigned __int8 *a2, unint64_t a3)
{
  if (!result) {
    VP8LInitBitReader_cold_1();
  }
  if (!a2) {
    VP8LInitBitReader_cold_2();
  }
  if (a3 >= 0xFFFFFFF8) {
    VP8LInitBitReader_cold_3();
  }
  result[2] = a3;
  *__n128 result = 0;
  result[4] = 0;
  uint64_t v3 = 8;
  if (a3 < 8) {
    uint64_t v3 = a3;
  }
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unsigned int v6 = a2;
    do
    {
      unsigned int v7 = *v6++;
      v5 |= (unint64_t)v7 << v4;
      v4 += 8;
    }
    while (8 * v3 != v4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  result[3] = v3;
  *__n128 result = v5;
  result[1] = a2;
  return result;
}

double VP8LDoFillBitWindow(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1 <= 31) {
    VP8LDoFillBitWindow_cold_1();
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if ((unint64_t)(v2 + 8) >= *(void *)(a1 + 16))
  {
    return ShiftBytes((unint64_t *)a1);
  }
  else
  {
    unint64_t v3 = *(void *)a1;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)a1 >>= 32;
    *(_DWORD *)(a1 + 32) = v1 - 32;
    *((void *)&v5 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = *(unsigned int *)(v4 + v2);
    *(void *)&long long v5 = v3;
    *(void *)a1 = v5 >> 32;
    *(void *)(a1 + 24) = v2 + 4;
  }
  return result;
}

double ShiftBytes(unint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 8);
  unint64_t v3 = a1[2];
  unint64_t v2 = a1[3];
  if (v1 >= 8)
  {
    if (v2 <= v3) {
      unint64_t v4 = a1[2];
    }
    else {
      unint64_t v4 = a1[3];
    }
    while (v4 != v2)
    {
      unint64_t v5 = *a1;
      unint64_t v6 = a1[1];
      *a1 >>= 8;
      *((void *)&v7 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = *(unsigned __int8 *)(v6 + v2);
      *(void *)&long long v7 = v5;
      *a1 = v7 >> 8;
      a1[3] = ++v2;
      int v8 = v1 - 8;
      *((_DWORD *)a1 + 8) = v1 - 8;
      BOOL v9 = v1 <= 15;
      v1 -= 8;
      if (v9) {
        goto LABEL_11;
      }
    }
    unint64_t v2 = v4;
  }
  int v8 = v1;
LABEL_11:
  if (v2 > v3) {
    ShiftBytes_cold_1();
  }
  if (*((_DWORD *)a1 + 9) || (v8 >= 65 ? (BOOL v10 = v2 == v3) : (BOOL v10 = 0), v10))
  {
    *(void *)&double result = 0x100000000;
    a1[4] = 0x100000000;
  }
  return result;
}

uint64_t VP8LReadBits(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    VP8LReadBits_cold_1();
  }
  if (a2 > 0x18 || *(_DWORD *)(a1 + 36))
  {
    uint64_t v3 = 0;
    *(void *)(a1 + 32) = 0x100000000;
  }
  else
  {
    int v2 = *(_DWORD *)(a1 + 32);
    uint64_t v3 = kBitMask[a2] & (*(void *)a1 >> v2);
    *(_DWORD *)(a1 + 32) = v2 + a2;
    ShiftBytes((unint64_t *)a1);
  }
  return v3;
}

void VP8InitBitReader_cold_1()
{
  __assert_rtn("VP8InitBitReader", "bit_reader_utils.c", 37, "br != NULL");
}

void VP8InitBitReader_cold_2()
{
  __assert_rtn("VP8InitBitReader", "bit_reader_utils.c", 38, "start != NULL");
}

void VP8InitBitReader_cold_3()
{
}

void VP8LoadFinalBytes_cold_1()
{
  __assert_rtn("VP8LoadFinalBytes", "bit_reader_utils.c", 89, "br != NULL && br->buf_ != NULL");
}

void VP8GetValue_cold_1()
{
  __assert_rtn("VP8LoadNewBytes", "bit_reader_inl_utils.h", 59, "br != NULL && br->buf_ != NULL");
}

void VP8LInitBitReader_cold_1()
{
  __assert_rtn("VP8LInitBitReader", "bit_reader_utils.c", 145, "br != NULL");
}

void VP8LInitBitReader_cold_2()
{
  __assert_rtn("VP8LInitBitReader", "bit_reader_utils.c", 146, "start != NULL");
}

void VP8LInitBitReader_cold_3()
{
}

void VP8LDoFillBitWindow_cold_1()
{
  __assert_rtn("VP8LDoFillBitWindow", "bit_reader_utils.c", 195, "br->bit_pos_ >= VP8L_WBITS");
}

void ShiftBytes_cold_1()
{
  __assert_rtn("VP8LIsEndOfStream", "bit_reader_utils.h", 172, "br->pos_ <= br->len_");
}

void VP8LReadBits_cold_1()
{
  __assert_rtn("VP8LReadBits", "bit_reader_utils.c", 210, "n_bits >= 0");
}

void VP8DspInit(uint64_t a1, uint64_t a2, const char *a3)
{
  if ((BOOL (*)(int))VP8DspInit_VP8DspInit_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    _cg_jpeg_mem_term(a1, a2, a3);
    VP8TransformUV = (uint64_t)TransformUV_C;
    VP8TransformDCUV = (uint64_t)TransformDCUV_C;
    qword_1E9105598 = (uint64_t)HE4_C;
    qword_1E91055A8 = (uint64_t)VR4_C;
    qword_1E91055B8 = (uint64_t)VL4_C;
    qword_1E91055C0 = (uint64_t)HD4_C;
    qword_1E91055C8 = (uint64_t)HU4_C;
    VP8DitherCombine8x8 = (uint64_t (*)(void, __n128, __n128))DitherCombine8x8_C;
    VP8DspInitNEON();
    if (!VP8TransformWHT) {
      VP8DspInit_cold_1();
    }
    if (!VP8Transform) {
      VP8DspInit_cold_2();
    }
    if (!VP8TransformDC) {
      VP8DspInit_cold_3();
    }
    if (!VP8TransformAC3) {
      VP8DspInit_cold_4();
    }
    if (!VP8TransformUV) {
      VP8DspInit_cold_5();
    }
    if (!VP8TransformDCUV) {
      VP8DspInit_cold_6();
    }
    if (!VP8VFilter16) {
      VP8DspInit_cold_7();
    }
    if (!VP8HFilter16) {
      VP8DspInit_cold_8();
    }
    if (!VP8VFilter8) {
      VP8DspInit_cold_9();
    }
    if (!VP8HFilter8) {
      VP8DspInit_cold_10();
    }
    if (!VP8VFilter16i) {
      VP8DspInit_cold_11();
    }
    if (!VP8HFilter16i) {
      VP8DspInit_cold_12();
    }
    if (!VP8VFilter8i) {
      VP8DspInit_cold_13();
    }
    if (!VP8HFilter8i) {
      VP8DspInit_cold_14();
    }
    if (!VP8SimpleVFilter16) {
      VP8DspInit_cold_15();
    }
    if (!VP8SimpleHFilter16) {
      VP8DspInit_cold_16();
    }
    if (!VP8SimpleVFilter16i) {
      VP8DspInit_cold_17();
    }
    if (!VP8SimpleHFilter16i) {
      VP8DspInit_cold_18();
    }
    if (!VP8PredLuma4[0]) {
      VP8DspInit_cold_19();
    }
    if (!qword_1E9105588) {
      VP8DspInit_cold_20();
    }
    if (!qword_1E9105590) {
      VP8DspInit_cold_21();
    }
    if (!qword_1E9105598) {
      VP8DspInit_cold_22();
    }
    if (!qword_1E91055A0) {
      VP8DspInit_cold_23();
    }
    if (!qword_1E91055A8) {
      VP8DspInit_cold_24();
    }
    if (!qword_1E91055B0) {
      VP8DspInit_cold_25();
    }
    if (!qword_1E91055B8) {
      VP8DspInit_cold_26();
    }
    if (!qword_1E91055C0) {
      VP8DspInit_cold_27();
    }
    if (!qword_1E91055C8) {
      VP8DspInit_cold_28();
    }
    if (!VP8PredLuma16[0]) {
      VP8DspInit_cold_29();
    }
    if (!qword_1E9105550) {
      VP8DspInit_cold_30();
    }
    if (!qword_1E9105558) {
      VP8DspInit_cold_31();
    }
    if (!qword_1E9105560) {
      VP8DspInit_cold_32();
    }
    if (!qword_1E9105568) {
      VP8DspInit_cold_33();
    }
    if (!qword_1E9105570) {
      VP8DspInit_cold_34();
    }
    if (!qword_1E9105578) {
      VP8DspInit_cold_35();
    }
    if (!VP8PredChroma8[0]) {
      VP8DspInit_cold_36();
    }
    if (!qword_1E9105518) {
      VP8DspInit_cold_37();
    }
    if (!qword_1E9105520) {
      VP8DspInit_cold_38();
    }
    if (!qword_1E9105528) {
      VP8DspInit_cold_39();
    }
    if (!qword_1E9105530) {
      VP8DspInit_cold_40();
    }
    if (!qword_1E9105538) {
      VP8DspInit_cold_41();
    }
    if (!qword_1E9105540) {
      VP8DspInit_cold_42();
    }
    if (!VP8DitherCombine8x8) {
      VP8DspInit_cold_43();
    }
    VP8DspInit_VP8DspInit_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

uint64_t TransformUV_C(uint64_t a1, uint64_t a2)
{
  VP8Transform(a1, a2, 1);
  unint64_t v4 = VP8Transform;

  return v4(a1 + 64, a2 + 128, 1);
}

uint64_t TransformDCUV_C(_WORD *a1, uint64_t a2)
{
  if (*a1) {
    VP8TransformDC(a1, a2);
  }
  if (a1[16]) {
    VP8TransformDC(a1 + 16, a2 + 4);
  }
  uint64_t result = (uint64_t)(a1 + 32);
  if (a1[32]) {
    uint64_t result = VP8TransformDC(result, a2 + 128);
  }
  int v6 = (unsigned __int16)a1[48];
  unint64_t v5 = a1 + 48;
  if (v6)
  {
    long long v7 = (uint64_t (*)(_WORD *, uint64_t))VP8TransformDC;
    return v7(v5, a2 + 132);
  }
  return result;
}

uint64_t HE4_C(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result - 1);
  int v2 = *(unsigned __int8 *)(result + 31);
  int v3 = *(unsigned __int8 *)(result + 63);
  int v4 = *(unsigned __int8 *)(result + 95);
  *(_DWORD *)uint64_t result = 16843009 * ((v2 + 2 + *(unsigned __int8 *)(result - 33) + 2 * v1) >> 2);
  *(_DWORD *)(result + 32) = 16843009 * ((v3 + 2 + v1 + 2 * v2) >> 2);
  *(_DWORD *)(result + 64) = 16843009 * ((v2 + 2 + 2 * v3 + v4) >> 2);
  *(_DWORD *)(result + 96) = 16843009 * ((v3 + 2 + v4 + 2 * v4) >> 2);
  return result;
}

unsigned char *VR4_C(unsigned char *result)
{
  int v1 = *(result - 33);
  int v2 = *(result - 32);
  int v3 = *(result - 31);
  unsigned int v4 = (v2 + 1 + v1) >> 1;
  unsigned int v5 = (v2 + 1 + v3) >> 1;
  int v6 = *(result - 1);
  int v7 = result[31];
  int v8 = v6 + 2;
  unsigned int v9 = v6 + 2 + result[63] + 2 * v7;
  int v10 = *(result - 30);
  result[65] = v4;
  *uint64_t result = v4;
  unsigned int v11 = (v3 + v10 + 1) >> 1;
  result[66] = v5;
  result[1] = v5;
  int v12 = v1 + 2;
  unsigned int v13 = v1 + 2 + v7 + 2 * v6;
  int v14 = *(result - 29);
  result[67] = v11;
  result[2] = v11;
  result[3] = (v10 + v14 + 1) >> 1;
  result[96] = v9 >> 2;
  result[64] = v13 >> 2;
  unsigned int v15 = (v8 + 2 * v1 + v2) >> 2;
  result[97] = v15;
  result[32] = v15;
  unsigned int v16 = (v12 + 2 * v2 + v3) >> 2;
  result[98] = v16;
  result[33] = v16;
  unsigned int v17 = (v2 + 2 * v3 + v10 + 2) >> 2;
  result[99] = v17;
  result[34] = v17;
  result[35] = (v3 + 2 * v10 + v14 + 2) >> 2;
  return result;
}

unsigned char *VL4_C(unsigned char *result)
{
  int v1 = *(result - 32);
  int v2 = *(result - 31);
  int v3 = *(result - 30);
  unsigned int v4 = (v2 + 1 + v3) >> 1;
  int v5 = *(result - 29);
  int v6 = *(result - 28);
  int v7 = *(result - 27);
  *uint64_t result = (v2 + 1 + v1) >> 1;
  result[64] = v4;
  result[1] = v4;
  unsigned int v8 = (v3 + v5 + 1) >> 1;
  unsigned int v9 = (v5 + v6 + 1) >> 1;
  int v10 = v3 + 2;
  int v11 = *(result - 26);
  result[65] = v8;
  result[2] = v8;
  unsigned int v12 = (v3 + 2 + v1 + 2 * v2) >> 2;
  unsigned int v13 = (v5 + 2 + v2 + 2 * v3) >> 2;
  int v14 = *(result - 25);
  result[66] = v9;
  result[3] = v9;
  result[32] = v12;
  result[96] = v13;
  result[33] = v13;
  unsigned int v15 = (v10 + 2 * v5 + v6) >> 2;
  result[97] = v15;
  result[34] = v15;
  unsigned int v16 = (v5 + 2 + 2 * v6 + v7) >> 2;
  result[98] = v16;
  result[35] = v16;
  result[67] = (v6 + 2 * v7 + v11 + 2) >> 2;
  result[99] = (v7 + 2 * v11 + v14 + 2) >> 2;
  return result;
}

unsigned char *HD4_C(unsigned char *result)
{
  int v1 = *(result - 1);
  int v2 = result[31];
  int v3 = *(result - 33);
  unsigned int v4 = (v1 + 1 + v3) >> 1;
  unsigned int v5 = (v1 + 1 + v2) >> 1;
  int v6 = result[63];
  int v7 = *(result - 32);
  unsigned int v8 = (v2 + v6 + 1) >> 1;
  int v9 = *(result - 31);
  int v10 = *(result - 30);
  result[34] = v4;
  *uint64_t result = v4;
  result[66] = v5;
  result[32] = v5;
  int v11 = v7 + 2 * v9 + v10;
  int v12 = result[95];
  result[98] = v8;
  result[64] = v8;
  result[96] = (v6 + v12 + 1) >> 1;
  result[3] = (v11 + 2) >> 2;
  result[2] = (v3 + 2 * v7 + v9 + 2) >> 2;
  int v13 = v1 + 2;
  unsigned int v14 = (v1 + 2 + 2 * v3 + v7) >> 2;
  result[35] = v14;
  result[1] = v14;
  unsigned int v15 = (v2 + 2 + 2 * v1 + v3) >> 2;
  result[67] = v15;
  result[33] = v15;
  unsigned int v16 = (v13 + v6 + 2 * v2) >> 2;
  result[99] = v16;
  result[65] = v16;
  result[97] = (v2 + 2 + v12 + 2 * v6) >> 2;
  return result;
}

int8x8_t HU4_C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 - 1);
  int v2 = *(unsigned __int8 *)(a1 + 31);
  int v3 = *(unsigned __int8 *)(a1 + 63);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 95);
  *(unsigned char *)a1 = (v2 + 1 + v1) >> 1;
  unsigned int v5 = (v2 + 1 + v3) >> 1;
  *(unsigned char *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 2) = v5;
  unsigned int v6 = (v3 + v4 + 1) >> 1;
  *(unsigned char *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 34) = v6;
  *(unsigned char *)(a1 + std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = (v3 + 2 + v1 + 2 * v2) >> 2;
  unsigned int v7 = (v4 + v2 + 2 * v3 + 2) >> 2;
  *(unsigned char *)(a1 + 33) = v7;
  *(unsigned char *)(a1 + 3) = v7;
  unsigned int v8 = (v3 + 2 + v4 + 2 * v4) >> 2;
  *(unsigned char *)(a1 + 65) = v8;
  *(unsigned char *)(a1 + 35) = v8;
  int8x8_t result = vdup_n_s8(v4);
  *(_DWORD *)(a1 + 96) = result.i32[0];
  *(unsigned char *)(a1 + 66) = v4;
  *(unsigned char *)(a1 + 67) = v4;
  return result;
}

uint64_t DitherCombine8x8_C(uint64_t result, uint64_t a2, int a3)
{
  for (int i = 0; i != 8; ++i)
  {
    for (uint64_t j = 0; j != 8; ++j)
    {
      int v5 = *(unsigned __int8 *)(a2 + j) + ((*(unsigned __int8 *)(result + j) - 120) >> 4);
      int v6 = v5 & ~(v5 >> 31);
      if (v6 >= 255) {
        LOBYTE(v6) = -1;
      }
      *(unsigned char *)(a2 + j) = v6;
    }
    a2 += a3;
    result += 8;
  }
  return result;
}

void VP8DspInit_cold_1()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 845, "VP8TransformWHT != NULL");
}

void VP8DspInit_cold_2()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 846, "VP8Transform != NULL");
}

void VP8DspInit_cold_3()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 847, "VP8TransformDC != NULL");
}

void VP8DspInit_cold_4()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 848, "VP8TransformAC3 != NULL");
}

void VP8DspInit_cold_5()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 849, "VP8TransformUV != NULL");
}

void VP8DspInit_cold_6()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 850, "VP8TransformDCUV != NULL");
}

void VP8DspInit_cold_7()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 851, "VP8VFilter16 != NULL");
}

void VP8DspInit_cold_8()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 852, "VP8HFilter16 != NULL");
}

void VP8DspInit_cold_9()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 853, "VP8VFilter8 != NULL");
}

void VP8DspInit_cold_10()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 854, "VP8HFilter8 != NULL");
}

void VP8DspInit_cold_11()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 855, "VP8VFilter16i != NULL");
}

void VP8DspInit_cold_12()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 856, "VP8HFilter16i != NULL");
}

void VP8DspInit_cold_13()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 857, "VP8VFilter8i != NULL");
}

void VP8DspInit_cold_14()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 858, "VP8HFilter8i != NULL");
}

void VP8DspInit_cold_15()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 859, "VP8SimpleVFilter16 != NULL");
}

void VP8DspInit_cold_16()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 860, "VP8SimpleHFilter16 != NULL");
}

void VP8DspInit_cold_17()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 861, "VP8SimpleVFilter16i != NULL");
}

void VP8DspInit_cold_18()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 862, "VP8SimpleHFilter16i != NULL");
}

void VP8DspInit_cold_19()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 863, "VP8PredLuma4[0] != NULL");
}

void VP8DspInit_cold_20()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 864, "VP8PredLuma4[1] != NULL");
}

void VP8DspInit_cold_21()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 865, "VP8PredLuma4[2] != NULL");
}

void VP8DspInit_cold_22()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 866, "VP8PredLuma4[3] != NULL");
}

void VP8DspInit_cold_23()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 867, "VP8PredLuma4[4] != NULL");
}

void VP8DspInit_cold_24()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 868, "VP8PredLuma4[5] != NULL");
}

void VP8DspInit_cold_25()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 869, "VP8PredLuma4[6] != NULL");
}

void VP8DspInit_cold_26()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 870, "VP8PredLuma4[7] != NULL");
}

void VP8DspInit_cold_27()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 871, "VP8PredLuma4[8] != NULL");
}

void VP8DspInit_cold_28()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 872, "VP8PredLuma4[9] != NULL");
}

void VP8DspInit_cold_29()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 873, "VP8PredLuma16[0] != NULL");
}

void VP8DspInit_cold_30()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 874, "VP8PredLuma16[1] != NULL");
}

void VP8DspInit_cold_31()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 875, "VP8PredLuma16[2] != NULL");
}

void VP8DspInit_cold_32()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 876, "VP8PredLuma16[3] != NULL");
}

void VP8DspInit_cold_33()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 877, "VP8PredLuma16[4] != NULL");
}

void VP8DspInit_cold_34()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 878, "VP8PredLuma16[5] != NULL");
}

void VP8DspInit_cold_35()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 879, "VP8PredLuma16[6] != NULL");
}

void VP8DspInit_cold_36()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 880, "VP8PredChroma8[0] != NULL");
}

void VP8DspInit_cold_37()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 881, "VP8PredChroma8[1] != NULL");
}

void VP8DspInit_cold_38()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 882, "VP8PredChroma8[2] != NULL");
}

void VP8DspInit_cold_39()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 883, "VP8PredChroma8[3] != NULL");
}

void VP8DspInit_cold_40()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 884, "VP8PredChroma8[4] != NULL");
}

void VP8DspInit_cold_41()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 885, "VP8PredChroma8[5] != NULL");
}

void VP8DspInit_cold_42()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 886, "VP8PredChroma8[6] != NULL");
}

void VP8DspInit_cold_43()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 887, "VP8DitherCombine8x8 != NULL");
}

BOOL armCPUInfo(int a1)
{
  return a1 == 6;
}

uint64_t VP8LPredictor0_C()
{
  return 4278190080;
}

uint64_t VP8LPredictor1_C(unsigned int *a1)
{
  return *a1;
}

uint64_t VP8LPredictor2_C(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t VP8LPredictor3_C(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t VP8LPredictor4_C(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 - 4);
}

uint64_t VP8LPredictor5_C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2 = (((a2[1] ^ *a1) >> 1) & 0x7F7F7F7F) + (a2[1] & *a1);
  return (((v2 ^ *a2) >> 1) & 0x7F7F7F7F) + (v2 & *a2);
}

uint64_t VP8LPredictor6_C(_DWORD *a1, uint64_t a2)
{
  return (((*(_DWORD *)(a2 - 4) ^ *a1) >> 1) & 0x7F7F7F7F) + (*(_DWORD *)(a2 - 4) & *a1);
}

uint64_t VP8LPredictor7_C(_DWORD *a1, _DWORD *a2)
{
  return (((*a2 ^ *a1) >> 1) & 0x7F7F7F7F) + (*a2 & *a1);
}

uint64_t VP8LPredictor8_C(uint64_t a1, _DWORD *a2)
{
  return (((*a2 ^ *(a2 - 1)) >> 1) & 0x7F7F7F7F) + (*a2 & *(a2 - 1));
}

uint64_t VP8LPredictor9_C(uint64_t a1, _DWORD *a2)
{
  return (((a2[1] ^ *a2) >> 1) & 0x7F7F7F7F) + (a2[1] & *a2);
}

uint64_t VP8LPredictor10_C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2 = (((*(a2 - 1) ^ *a1) >> 1) & 0x7F7F7F7F) + (*(a2 - 1) & *a1);
  unsigned int v3 = (((a2[1] ^ *a2) >> 1) & 0x7F7F7F7F) + (a2[1] & *a2);
  return (((v3 ^ v2) >> 1) & 0x7F7F7F7F) + (v3 & v2);
}

uint64_t VP8LPredictor11_C(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *(a2 - 1);
  unsigned int v2 = *a2;
  unsigned int v4 = *a1;
  int v5 = HIBYTE(*a1) - HIBYTE(v3);
  int v6 = HIBYTE(*a2) - HIBYTE(v3);
  if (v5 < 0) {
    int v5 = HIBYTE(v3) - HIBYTE(*a1);
  }
  if (v6 < 0) {
    int v6 = HIBYTE(v3) - HIBYTE(*a2);
  }
  int v7 = BYTE2(v4) - BYTE2(v3);
  int v8 = BYTE2(v2) - BYTE2(v3);
  if (v7 < 0) {
    int v7 = BYTE2(v3) - BYTE2(v4);
  }
  if (v8 < 0) {
    int v8 = BYTE2(v3) - BYTE2(v2);
  }
  int v9 = BYTE1(v4) - BYTE1(v3);
  int v10 = BYTE1(v2) - BYTE1(v3);
  if (v9 < 0) {
    int v9 = BYTE1(v3) - BYTE1(v4);
  }
  if (v10 < 0) {
    int v10 = BYTE1(v3) - BYTE1(v2);
  }
  int v11 = *a1 - v3;
  int v12 = *a2 - v3;
  if (v11 >= 0) {
    int v13 = v11;
  }
  else {
    int v13 = -v11;
  }
  if (v12 < 0) {
    int v12 = -v12;
  }
  if (v13 + v5 + v9 - (v6 + v12 + v10 + v8) + v7 >= 1) {
    return v4;
  }
  else {
    return v2;
  }
}

uint64_t VP8LPredictor12_C(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *(a2 - 1);
  unsigned int v4 = HIBYTE(*a2) + HIBYTE(*a1) - HIBYTE(v3);
  if (v4 >= 0x100) {
    unsigned int v4 = ~v4 >> 24;
  }
  unsigned int v5 = *a2 + v2 - v3;
  if (v5 >= 0x100) {
    unsigned int v5 = ~v5 >> 24;
  }
  int8x8_t v6 = (int8x8_t)vsub_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*a2), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v2), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL));
  uint32x2_t v7 = vshl_u32((uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)0x10000000100, (uint32x2_t)v6), v6, (int8x8_t)vshr_n_u32((uint32x2_t)vmvn_s8(v6), 0x18uLL)), (uint32x2_t)0x800000010);
  return v5 | (v4 << 24) | v7.i32[0] | v7.i32[1];
}

uint64_t VP8LPredictor13_C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2 = *(a2 - 1);
  unsigned int v3 = (((*a2 ^ *a1) >> 1) & 0x7F7F7F7F) + (*a2 & *a1);
  unsigned int v4 = HIBYTE(v3) + ((int)(HIBYTE(v3) - HIBYTE(v2) + (((HIBYTE(v3) - HIBYTE(v2)) & 0x8000) >> 15)) >> 1);
  if (v4 >= 0x100) {
    unsigned int v4 = ~v4 >> 24;
  }
  unsigned int v5 = ((int)(v3 - v2 + (((v3 - v2) & 0x8000u) >> 15)) >> 1)
     + v3;
  if (v5 >= 0x100) {
    unsigned int v5 = ~v5 >> 24;
  }
  int32x2_t v6 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  int32x2_t v7 = vsub_s32(v6, (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v2), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL));
  int8x8_t v8 = (int8x8_t)vsra_n_s32(v6, vshl_n_s32(vhadd_s32(v7, (int32x2_t)vshr_n_u32((uint32x2_t)vand_s8((int8x8_t)v7, (int8x8_t)0xFFFF0000FFFFLL), 0xFuLL)), 0x10uLL), 0x10uLL);
  uint32x2_t v9 = vshl_u32((uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)0x10000000100, (uint32x2_t)v8), v8, (int8x8_t)vshr_n_u32((uint32x2_t)vmvn_s8(v8), 0x18uLL)), (uint32x2_t)0x800000010);
  return v5 | (v4 << 24) | v9.i32[0] | v9.i32[1];
}

unsigned int *VP8LAddGreenToBlueAndRed_C(unsigned int *result, int a2, unsigned int *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = a2;
    do
    {
      unsigned int v4 = *result++;
      *a3++ = ((v4 & 0xFF00FF) + BYTE1(v4) + (v4 >> 8 << 16)) & 0xFF00FF | v4 & 0xFF00FF00;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *VP8LTransformColorInverse_C(char *result, int *a2, int a3, unsigned int *a4)
{
  if (a3 >= 1)
  {
    int v4 = *result;
    int v5 = result[1];
    uint64_t v6 = a3;
    int v7 = result[2];
    do
    {
      int v8 = *a2++;
      *a4++ = v8 & 0xFF00FF00 | ((((((__int16)v8 >> 8) * v4) >> 5) + BYTE2(v8)) << 16) | (v8 + ((((__int16)v8 >> 8) * v5) >> 5) + (((char)(((((__int16)v8 >> 8) * v4) >> 5) + BYTE2(v8)) * v7) >> 5));
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t VP8LColorIndexInverseTransformAlpha(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  int v7 = *(_DWORD *)(result + 4);
  uint64_t v6 = *(unsigned int *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  if (!v7) {
    return VP8LMapColor8b(a4, v8, a5, a2, a3, v6);
  }
  if ((int)a2 < (int)a3)
  {
    unsigned int v9 = 8u >> v7;
    int v10 = ~(-1 << v7);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v11 = 0;
        unsigned int v12 = 0;
        do
        {
          if ((v11 & v10) == 0)
          {
            unsigned int v13 = *a4++;
            unsigned int v12 = v13;
          }
          *(unsigned char *)(a5 + v1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = BYTE1(*(_DWORD *)(v8 + 4 * (v12 & ~(-1 << v9))));
          v12 >>= v9;
          ++v11;
        }
        while (v6 != v11);
        a5 += v11;
      }
      LODWORD(a2) = a2 + 1;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t VP8LInverseTransform(uint64_t result, uint64_t a2, uint64_t a3, int *__src, unsigned int *a5)
{
  int v5 = a3 - a2;
  if ((int)a3 <= (int)a2) {
    VP8LInverseTransform_cold_2();
  }
  uint64_t v6 = a3;
  uint64_t v7 = result;
  if (*(_DWORD *)(result + 12) < (int)a3) {
    VP8LInverseTransform_cold_1();
  }
  uint64_t v8 = a5;
  unsigned int v9 = __src;
  uint64_t v10 = a2;
  uint64_t v11 = *(int *)(result + 8);
  int v52 = a3;
  switch(*(_DWORD *)result)
  {
    case 0:
      BOOL v44 = a5;
      uint64_t v45 = result;
      int v53 = a2;
      if (a2)
      {
        int v12 = a2;
        unsigned int v13 = a5;
      }
      else
      {
        BOOL v25 = __src + 1;
        unsigned int v26 = *__src - 0x1000000;
        *a5 = v26;
        int8x8x4_t v27 = a5 + 1;
        if ((int)v11 >= 2)
        {
          uint64_t v28 = (v11 - 1);
          do
          {
            int v29 = *v25++;
            unsigned int v26 = ((v29 & 0xFF00FF00) + (v26 & 0xFF00FF00)) & 0xFF00FF00 | ((v29 & 0xFF00FF) + (v26 & 0xFF00FF)) & 0xFF00FF;
            *v27++ = v26;
            --v28;
          }
          while (v28);
        }
        unsigned int v9 = &__src[v11];
        int v12 = 1;
        unsigned int v13 = &a5[v11];
      }
      if (v12 < (int)a3)
      {
        char v30 = *(_DWORD *)(result + 4);
        int v31 = 1 << v30;
        int v49 = (1 << v30) - 1;
        unsigned int v48 = (v49 + v11) >> v30;
        uint64_t v56 = *(void *)(result + 16) + 4 * (int)(v48 * (v12 >> v30));
        int v32 = -(1 << v30);
        do
        {
          int v51 = v12;
          int8x8_t result = (uint64_t)PredictorAdd2_C(v9, (int *)&v13[-v11], 1, v13);
          if ((int)v11 >= 2)
          {
            int v33 = 1;
            int64_t v34 = (unsigned int *)v56;
            do
            {
              unsigned int v35 = *v34++;
              unsigned int v36 = (uint64_t (*)(int *, unsigned int *, void))VP8LPredictorsAdd[((unint64_t)v35 >> 8) & 0xF];
              int v37 = (v33 & v32) + v31;
              if (v37 >= (int)v11) {
                int v38 = v11;
              }
              else {
                int v38 = (v33 & v32) + v31;
              }
              int8x8_t result = v36(&v9[v33], &v13[v33 - v11], (v38 - v33));
              int v33 = v38;
            }
            while ((int)v11 > v37);
          }
          v9 += v11;
          v13 += v11;
          int v12 = v51 + 1;
          signed int v39 = v48;
          if (((v51 + 1) & v49) != 0) {
            signed int v39 = 0;
          }
          v56 += 4 * v39;
          LODWORD(v6) = v52;
        }
        while (v12 != v52);
      }
      if (*(_DWORD *)(v45 + 12) != v6)
      {
        int8x8_t result = (uint64_t)memcpy(&v44[-v11], &v44[(int)v11 * (~v53 + (int)v6)], 4 * v11);
      }
      break;
    case 1:
      char v14 = *(_DWORD *)(result + 4);
      uint64_t v15 = (1 << v14);
      int v16 = v11 & -(int)v15;
      unsigned int v47 = (v15 - 1 + v11) >> v14;
      unsigned int v17 = (int *)(*(void *)(result + 16) + 4 * (int)(v47 * ((int)a2 >> v14)));
      uint64_t v18 = v16;
      uint64_t v46 = (int)v11 - v16;
      uint64_t v50 = v16;
      do
      {
        char v58 = 0;
        __int16 v57 = 0;
        uint64_t v55 = v17;
        if ((int)v18 < 1)
        {
          unint64_t v21 = (unint64_t)v9;
        }
        else
        {
          int v54 = v10;
          uint64_t v10 = 0;
          uint64_t v19 = &v9[v18];
          do
          {
            int v20 = *v17++;
            __int16 v57 = v20;
            char v58 = BYTE2(v20);
            int8x8_t result = VP8LTransformColorInverse(&v57, (char *)v9 + v10, v15, (char *)v8 + v10);
            v10 += 4 * (int)v15;
            unint64_t v21 = (unint64_t)v9 + v10;
          }
          while ((int *)((char *)v9 + v10) < v19);
          uint64_t v8 = (unsigned int *)((char *)v8 + v10);
          LODWORD(v6) = v52;
          LODWORD(v10) = v54;
        }
        if (v21 < (unint64_t)&v9[v11])
        {
          int v22 = *v17;
          LOBYTE(v57) = *v17;
          HIBYTE(v57) = BYTE1(v22);
          char v58 = BYTE2(v22);
          int8x8_t result = VP8LTransformColorInverse(&v57, v21, v46, v8);
          v21 += 4 * v46;
          v8 += v46;
        }
        uint64_t v18 = v50;
        LODWORD(v10) = v10 + 1;
        signed int v23 = v47;
        if ((v10 & (v15 - 1)) != 0) {
          signed int v23 = 0;
        }
        unsigned int v17 = &v55[v23];
        unsigned int v9 = (int *)v21;
      }
      while (v10 != v6);
      break;
    case 2:
      BOOL v24 = (uint64_t (*)(int *, void, unsigned int *))VP8LAddGreenToBlueAndRed;
      int8x8_t result = v24(v9, (v11 * v5), a5);
      break;
    case 3:
      if (__src == (int *)a5)
      {
        int v40 = *(_DWORD *)(result + 4);
        if (v40 >= 1)
        {
          int v41 = v11 * v5;
          signed int v42 = ((v11 + (1 << v40) - 1) >> v40) * v5;
          uint64_t v43 = (char *)&__src[v41 - v42];
          memmove(v43, __src, 4 * v42);
          int8x8_t result = v7;
          a2 = v10;
          a3 = v6;
          __src = (int *)v43;
          a5 = (unsigned int *)v9;
        }
      }
      int8x8_t result = ColorIndexInverseTransform_C(result, a2, a3, (uint64_t)__src, a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ColorIndexInverseTransform_C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v7 = *(_DWORD *)(result + 4);
  uint64_t v6 = *(unsigned int *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  if (!v7) {
    return VP8LMapColor32b(a4, v8, a5, a2, a3, v6);
  }
  if ((int)a2 < (int)a3)
  {
    unsigned int v9 = 8u >> v7;
    int v10 = ~(-1 << v7);
    do
    {
      if ((int)v6 >= 1)
      {
        int v11 = 0;
        unsigned int v12 = 0;
        do
        {
          if ((v11 & v10) == 0)
          {
            unsigned int v12 = *(unsigned __int8 *)(a4 + 1);
            a4 += 4;
          }
          *a5++ = *(_DWORD *)(v8 + 4 * (v12 & ~(-1 << v9)));
          v12 >>= v9;
          ++v11;
        }
        while (v6 != v11);
      }
      LODWORD(a2) = a2 + 1;
    }
    while (a2 != a3);
  }
  return result;
}

int *VP8LConvertBGRAToRGB_C(int *result, int a2, unsigned char *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = &result[a2];
    do
    {
      int v4 = *result++;
      *a3 = BYTE2(v4);
      a3[1] = BYTE1(v4);
      a3[2] = v4;
      a3 += 3;
    }
    while (result < v3);
  }
  return result;
}

int *VP8LConvertBGRAToRGBA_C(int *result, int a2, unsigned char *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = &result[a2];
    do
    {
      int v4 = *result++;
      *a3 = BYTE2(v4);
      a3[1] = BYTE1(v4);
      a3[2] = v4;
      a3[3] = HIBYTE(v4);
      a3 += 4;
    }
    while (result < v3);
  }
  return result;
}

unsigned int *VP8LConvertBGRAToRGBA4444_C(unsigned int *result, int a2, unsigned char *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = &result[a2];
    do
    {
      unsigned int v4 = *result++;
      *a3 = BYTE2(v4) & 0xF0 | ((unsigned __int16)v4 >> 12);
      a3[1] = v4 & 0xF0 | (v4 >> 28);
      a3 += 2;
    }
    while (result < v3);
  }
  return result;
}

const float *VP8LConvertBGRAToRGB565_C(const float *result, int a2, unsigned char *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = &result[a2];
    do
    {
      uint32x2_t v4 = (uint32x2_t)vld1_dup_f32(result++);
      int8x8_t v5 = vorr_s8(vand_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFBFFFFFFF0), (int8x8_t)0xE0000000F8), vand_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFDFFFFFFF3), (int8x8_t)0x1F00000007));
      a3[1] = v5.i8[4];
      *a3 = v5.i8[0];
      a3 += 2;
    }
    while (result < v3);
  }
  return result;
}

int *VP8LConvertBGRAToBGR_C(int *result, int a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = &result[a2];
    do
    {
      int v4 = *result++;
      *(_WORD *)a3 = v4;
      *(unsigned char *)(a3 + 2) = BYTE2(v4);
      a3 += 3;
    }
    while (result < v3);
  }
  return result;
}

unsigned int *VP8LConvertFromBGRA(unsigned int *__src, uint64_t a2, int a3, _DWORD *__dst)
{
  int v4 = __dst;
  uint64_t v6 = __src;
  switch(a3)
  {
    case 0:
      int v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToRGB;
      goto LABEL_13;
    case 1:
      int v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToRGBA;
      goto LABEL_13;
    case 2:
      int v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToBGR;
      goto LABEL_13;
    case 3:
      return (unsigned int *)memcpy(__dst, __src, 4 * (int)a2);
    case 4:
      if ((int)a2 >= 1)
      {
        do
        {
          unsigned int v8 = *v6++;
          *v4++ = bswap32(v8);
        }
        while (v6 < &__src[(int)a2]);
      }
      return __src;
    case 5:
      int v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToRGBA4444;
      goto LABEL_13;
    case 6:
      int v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToRGB565;
LABEL_13:
      return (unsigned int *)v7(__src, a2, v4);
    case 7:
      VP8LConvertBGRAToRGBA(__src, a2, __dst);
      goto LABEL_18;
    case 8:
      memcpy(__dst, __src, 4 * (int)a2);
LABEL_18:
      unsigned int v9 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, void))WebPApplyAlphaMultiply;
      int v10 = v4;
      uint64_t v11 = 0;
      goto LABEL_23;
    case 9:
      if ((int)a2 >= 1)
      {
        unsigned int v12 = __dst;
        do
        {
          unsigned int v13 = *v6++;
          *v12++ = bswap32(v13);
        }
        while (v6 < &__src[(int)a2]);
      }
      unsigned int v9 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, void))WebPApplyAlphaMultiply;
      int v10 = __dst;
      uint64_t v11 = 1;
LABEL_23:
      __src = (unsigned int *)v9(v10, v11, a2, 1, 0);
      break;
    case 10:
      VP8LConvertBGRAToRGBA4444(__src, a2, __dst);
      char v14 = WebPApplyAlphaMultiply4444;
      __src = (unsigned int *)((uint64_t (*)(_DWORD *, uint64_t, uint64_t, void))v14)(v4, a2, 1, 0);
      break;
    default:
      VP8LConvertFromBGRA_cold_1();
  }
  return __src;
}

void VP8LDspInit()
{
  if ((uint64_t (*)())VP8LDspInit_VP8LDspInit_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    VP8LPredictors = (uint64_t)VP8LPredictor0_C;
    qword_1E9105760 = (uint64_t)VP8LPredictor1_C;
    qword_1E9105768 = (uint64_t)VP8LPredictor2_C;
    qword_1E9105770 = (uint64_t)VP8LPredictor3_C;
    qword_1E9105778 = (uint64_t)VP8LPredictor4_C;
    qword_1E9105780 = (uint64_t)VP8LPredictor5_C;
    qword_1E9105788 = (uint64_t)VP8LPredictor6_C;
    qword_1E9105790 = (uint64_t)VP8LPredictor7_C;
    qword_1E9105798 = (uint64_t)VP8LPredictor8_C;
    qword_1E91057A0 = (uint64_t)VP8LPredictor9_C;
    qword_1E91057A8 = (uint64_t)VP8LPredictor10_C;
    qword_1E91057B0 = (uint64_t)VP8LPredictor11_C;
    qword_1E91057B8 = (uint64_t)VP8LPredictor12_C;
    qword_1E91057C0 = (uint64_t)VP8LPredictor13_C;
    unk_1E91057C8 = VP8LPredictor0_C;
    qword_1E91057D0 = (uint64_t)VP8LPredictor0_C;
    VP8LPredictorsAdd = (uint64_t)PredictorAdd0_C;
    qword_1E91057E0 = (uint64_t)PredictorAdd1_C;
    qword_1E91057E8 = (uint64_t)PredictorAdd2_C;
    qword_1E91057F0 = (uint64_t)PredictorAdd3_C;
    qword_1E91057F8 = (uint64_t)PredictorAdd4_C;
    qword_1E9105800 = (uint64_t)PredictorAdd5_C;
    qword_1E9105808 = (uint64_t)PredictorAdd6_C;
    qword_1E9105810 = (uint64_t)PredictorAdd7_C;
    qword_1E9105818 = (uint64_t)PredictorAdd8_C;
    qword_1E9105820 = (uint64_t)PredictorAdd9_C;
    qword_1E9105828 = (uint64_t)PredictorAdd10_C;
    qword_1E9105830 = (uint64_t)PredictorAdd11_C;
    qword_1E9105838 = (uint64_t)PredictorAdd12_C;
    qword_1E9105840 = (uint64_t)PredictorAdd13_C;
    unk_1E9105848 = PredictorAdd0_C;
    qword_1E9105850 = (uint64_t)PredictorAdd0_C;
    VP8LPredictorsAdd_C = (uint64_t (*)(void, void, void, void))PredictorAdd0_C;
    off_1E9105860 = (uint64_t (*)(void, void, void, void))PredictorAdd1_C;
    off_1E9105868 = (uint64_t (*)(void, void, void, void))PredictorAdd2_C;
    off_1E9105870 = (uint64_t (*)(void, void, void, void))PredictorAdd3_C;
    off_1E9105878 = (uint64_t (*)(void, void, void, void))PredictorAdd4_C;
    off_1E9105880 = (uint64_t (*)(void, void, void, void))PredictorAdd5_C;
    off_1E9105888 = (uint64_t (*)(void, void, void, void))PredictorAdd6_C;
    off_1E9105890 = (uint64_t (*)(void, void, void, void))PredictorAdd7_C;
    off_1E9105898 = (uint64_t (*)(void, void, void, void))PredictorAdd8_C;
    off_1E91058A0 = (uint64_t (*)(void, void, void, void))PredictorAdd9_C;
    off_1E91058A8 = (uint64_t (*)(void, void, void, void))PredictorAdd10_C;
    off_1E91058B0 = (uint64_t (*)(void, void, void, void))PredictorAdd11_C;
    off_1E91058B8 = (uint64_t (*)(void, void, void, void))PredictorAdd12_C;
    off_1E91058C0 = (uint64_t (*)(void, void, void, void))PredictorAdd13_C;
    qword_1E91058C8 = (uint64_t)PredictorAdd0_C;
    unk_1E91058D0 = PredictorAdd0_C;
    VP8LConvertBGRAToRGBA4444 = VP8LConvertBGRAToRGBA4444_C;
    VP8LConvertBGRAToRGB565 = (uint64_t)VP8LConvertBGRAToRGB565_C;
    VP8LMapColor32b = (uint64_t (*)(void, void, void, void, void, void))MapARGB_C;
    VP8LMapColor8b = (uint64_t (*)(void, void, void, void, void, void))MapAlpha_C;
    VP8LDspInitNEON();
    if (!VP8LAddGreenToBlueAndRed) {
      VP8LDspInit_cold_1();
    }
    if (!VP8LTransformColorInverse) {
      VP8LDspInit_cold_2();
    }
    if (!VP8LConvertBGRAToRGBA) {
      VP8LDspInit_cold_3();
    }
    if (!VP8LConvertBGRAToRGB) {
      VP8LDspInit_cold_4();
    }
    if (!VP8LConvertBGRAToBGR) {
      VP8LDspInit_cold_5();
    }
    if (!VP8LConvertBGRAToRGBA4444) {
      VP8LDspInit_cold_6();
    }
    if (!VP8LConvertBGRAToRGB565) {
      VP8LDspInit_cold_7();
    }
    if (!VP8LMapColor32b) {
      VP8LDspInit_cold_8();
    }
    if (!VP8LMapColor8b) {
      VP8LDspInit_cold_9();
    }
    VP8LDspInit_VP8LDspInit_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

int *PredictorAdd0_C(int *result, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    do
    {
      int v5 = *result++;
      *a4++ = v5 - 0x1000000;
      --v4;
    }
    while (v4);
  }
  return result;
}

int *PredictorAdd1_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  if (a3 >= 1)
  {
    unsigned int v4 = *(a4 - 1);
    uint64_t v5 = a3;
    do
    {
      int v6 = *result++;
      unsigned int v4 = ((v6 & 0xFF00FF00) + (v4 & 0xFF00FF00)) & 0xFF00FF00 | ((v6 & 0xFF00FF) + (v4 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

int *PredictorAdd2_C(int *result, int *a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd2_C_cold_1();
  }
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    do
    {
      int v6 = *a2++;
      int v5 = v6;
      int v7 = *result++;
      *a4++ = ((v7 & 0xFF00FF00) + (v5 & 0xFF00FF00)) & 0xFF00FF00 | ((v7 & 0xFF00FF) + (v5 & 0xFF00FF)) & 0xFF00FF;
      --v4;
    }
    while (v4);
  }
  return result;
}

int *PredictorAdd3_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd3_C_cold_1();
  }
  if (a3 >= 1)
  {
    uint64_t v4 = (int *)(a2 + 4);
    uint64_t v5 = a3;
    do
    {
      int v7 = *v4++;
      int v6 = v7;
      int v8 = *result++;
      *a4++ = ((v8 & 0xFF00FF00) + (v6 & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (v6 & 0xFF00FF)) & 0xFF00FF;
      --v5;
    }
    while (v5);
  }
  return result;
}

int *PredictorAdd4_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd4_C_cold_1();
  }
  if (a3 >= 1)
  {
    uint64_t v4 = (int *)(a2 - 4);
    uint64_t v5 = a3;
    do
    {
      int v7 = *v4++;
      int v6 = v7;
      int v8 = *result++;
      *a4++ = ((v8 & 0xFF00FF00) + (v6 & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (v6 & 0xFF00FF)) & 0xFF00FF;
      --v5;
    }
    while (v5);
  }
  return result;
}

int *PredictorAdd5_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd5_C_cold_1();
  }
  if (a3 >= 1)
  {
    unsigned int v4 = *(a4 - 1);
    uint64_t v5 = (_DWORD *)(a2 + 4);
    uint64_t v6 = a3;
    do
    {
      unsigned int v7 = (((*v5 ^ v4) >> 1) & 0x7F7F7F7F) + (*v5 & v4);
      unsigned int v8 = (((v7 ^ *(v5 - 1)) >> 1) & 0x7F7F7F7F) + (v7 & *(v5 - 1));
      int v9 = *result++;
      unsigned int v4 = ((v8 & 0xFF00FF00) + (v9 & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (v9 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v4;
      ++v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

int *PredictorAdd6_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd6_C_cold_1();
  }
  if (a3 >= 1)
  {
    unsigned int v4 = (int *)(a2 - 4);
    unsigned int v5 = *(a4 - 1);
    uint64_t v6 = a3;
    do
    {
      int v7 = *v4++;
      unsigned int v8 = (((v7 ^ v5) >> 1) & 0x7F7F7F7F) + (v7 & v5);
      int v9 = *result++;
      unsigned int v5 = ((v8 & 0xFF00FF00) + (v9 & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (v9 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

int *PredictorAdd7_C(int *result, int *a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd7_C_cold_1();
  }
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    unsigned int v5 = *(a4 - 1);
    do
    {
      int v6 = *a2++;
      unsigned int v7 = (((v6 ^ v5) >> 1) & 0x7F7F7F7F) + (v6 & v5);
      int v8 = *result++;
      unsigned int v5 = ((v7 & 0xFF00FF00) + (v8 & 0xFF00FF00)) & 0xFF00FF00 | ((v7 & 0xFF00FF) + (v8 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

int *PredictorAdd8_C(int *result, _DWORD *a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd8_C_cold_1();
  }
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    do
    {
      unsigned int v5 = (((*a2 ^ *(a2 - 1)) >> 1) & 0x7F7F7F7F) + (*a2 & *(a2 - 1));
      int v6 = *result++;
      *a4++ = ((v5 & 0xFF00FF00) + (v6 & 0xFF00FF00)) & 0xFF00FF00 | ((v5 & 0xFF00FF) + (v6 & 0xFF00FF)) & 0xFF00FF;
      ++a2;
      --v4;
    }
    while (v4);
  }
  return result;
}

int *PredictorAdd9_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd9_C_cold_1();
  }
  if (a3 >= 1)
  {
    uint64_t v4 = (_DWORD *)(a2 + 4);
    uint64_t v5 = a3;
    do
    {
      unsigned int v6 = (((*v4 ^ *(v4 - 1)) >> 1) & 0x7F7F7F7F) + (*v4 & *(v4 - 1));
      int v7 = *result++;
      *a4++ = ((v6 & 0xFF00FF00) + (v7 & 0xFF00FF00)) & 0xFF00FF00 | ((v6 & 0xFF00FF) + (v7 & 0xFF00FF)) & 0xFF00FF;
      ++v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

int *PredictorAdd10_C(int *result, unsigned int *a2, int a3, unsigned int *a4)
{
  if (!a2) {
    PredictorAdd10_C_cold_1();
  }
  if (a3 >= 1)
  {
    unsigned int v4 = *(a4 - 1);
    uint64_t v5 = a3;
    do
    {
      int v6 = *(a2 - 1);
      unsigned int v7 = *a2;
      unsigned int v8 = a2[1];
      ++a2;
      unsigned int v9 = (((v6 ^ v4) >> 1) & 0x7F7F7F7F) + (v6 & v4);
      unsigned int v10 = (((v8 ^ v7) >> 1) & 0x7F7F7F7F) + (v8 & v7);
      unsigned int v11 = (((v10 ^ v9) >> 1) & 0x7F7F7F7F) + (v10 & v9);
      int v12 = *result++;
      unsigned int v4 = ((v11 & 0xFF00FF00) + (v12 & 0xFF00FF00)) & 0xFF00FF00 | ((v11 & 0xFF00FF) + (v12 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t PredictorAdd11_C(uint64_t result, unsigned int *a2, int a3, uint64_t a4)
{
  if (!a2) {
    PredictorAdd11_C_cold_1();
  }
  if (a3 >= 1)
  {
    unsigned int v4 = a2;
    uint64_t v5 = (int *)result;
    int v6 = (unsigned int *)(a4 - 4);
    uint64_t v7 = a3;
    do
    {
      int8x8_t result = VP8LPredictor11_C(v6, v4);
      int v8 = *v5++;
      v6[1] = ((v8 & 0xFF00FF00) + (result & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (result & 0xFF00FF)) & 0xFF00FF;
      ++v6;
      ++v4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t PredictorAdd12_C(uint64_t result, unsigned int *a2, int a3, uint64_t a4)
{
  if (!a2) {
    PredictorAdd12_C_cold_1();
  }
  if (a3 >= 1)
  {
    unsigned int v4 = a2;
    uint64_t v5 = (int *)result;
    int v6 = (unsigned int *)(a4 - 4);
    uint64_t v7 = a3;
    do
    {
      int8x8_t result = VP8LPredictor12_C(v6, v4);
      int v8 = *v5++;
      v6[1] = ((v8 & 0xFF00FF00) + (result & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (result & 0xFF00FF)) & 0xFF00FF;
      ++v6;
      ++v4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t PredictorAdd13_C(uint64_t result, _DWORD *a2, int a3, uint64_t a4)
{
  if (!a2) {
    PredictorAdd13_C_cold_1();
  }
  if (a3 >= 1)
  {
    unsigned int v4 = a2;
    uint64_t v5 = (int *)result;
    int v6 = (_DWORD *)(a4 - 4);
    uint64_t v7 = a3;
    do
    {
      int8x8_t result = VP8LPredictor13_C(v6, v4);
      int v8 = *v5++;
      v6[1] = ((v8 & 0xFF00FF00) + (result & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (result & 0xFF00FF)) & 0xFF00FF;
      ++v6;
      ++v4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t MapARGB_C(uint64_t result, uint64_t a2, _DWORD *a3, int a4, int a5, int a6)
{
  if (a4 < a5)
  {
    do
    {
      if (a6 < 1)
      {
        uint64_t v7 = result;
      }
      else
      {
        int v6 = a6;
        do
        {
          uint64_t v7 = result + 4;
          *a3++ = *(_DWORD *)(a2 + 4 * *(unsigned __int8 *)(result + 1));
          result += 4;
          --v6;
        }
        while (v6);
      }
      ++a4;
      int8x8_t result = v7;
    }
    while (a4 != a5);
  }
  return result;
}

unsigned __int8 *MapAlpha_C(unsigned __int8 *result, uint64_t a2, unsigned char *a3, int a4, int a5, int a6)
{
  if (a4 < a5)
  {
    do
    {
      if (a6 >= 1)
      {
        int v6 = a6;
        do
        {
          unsigned int v7 = *result++;
          *a3++ = BYTE1(*(_DWORD *)(a2 + 4 * v7));
          --v6;
        }
        while (v6);
      }
      ++a4;
    }
    while (a4 != a5);
  }
  return result;
}

void VP8LInverseTransform_cold_1()
{
  __assert_rtn("VP8LInverseTransform", "lossless.c", 396, "row_end <= transform->ysize_");
}

void VP8LInverseTransform_cold_2()
{
}

void VP8LConvertFromBGRA_cold_1()
{
}

void VP8LDspInit_cold_1()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 669, "VP8LAddGreenToBlueAndRed != NULL");
}

void VP8LDspInit_cold_2()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 670, "VP8LTransformColorInverse != NULL");
}

void VP8LDspInit_cold_3()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 671, "VP8LConvertBGRAToRGBA != NULL");
}

void VP8LDspInit_cold_4()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 672, "VP8LConvertBGRAToRGB != NULL");
}

void VP8LDspInit_cold_5()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 673, "VP8LConvertBGRAToBGR != NULL");
}

void VP8LDspInit_cold_6()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 674, "VP8LConvertBGRAToRGBA4444 != NULL");
}

void VP8LDspInit_cold_7()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 675, "VP8LConvertBGRAToRGB565 != NULL");
}

void VP8LDspInit_cold_8()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 676, "VP8LMapColor32b != NULL");
}

void VP8LDspInit_cold_9()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 677, "VP8LMapColor8b != NULL");
}

void PredictorAdd2_C_cold_1()
{
  __assert_rtn("PredictorAdd2_C", "lossless.c", 199, "upper != NULL");
}

void PredictorAdd3_C_cold_1()
{
  __assert_rtn("PredictorAdd3_C", "lossless.c", 200, "upper != NULL");
}

void PredictorAdd4_C_cold_1()
{
  __assert_rtn("PredictorAdd4_C", "lossless.c", 201, "upper != NULL");
}

void PredictorAdd5_C_cold_1()
{
  __assert_rtn("PredictorAdd5_C", "lossless.c", 202, "upper != NULL");
}

void PredictorAdd6_C_cold_1()
{
  __assert_rtn("PredictorAdd6_C", "lossless.c", 203, "upper != NULL");
}

void PredictorAdd7_C_cold_1()
{
  __assert_rtn("PredictorAdd7_C", "lossless.c", 204, "upper != NULL");
}

void PredictorAdd8_C_cold_1()
{
  __assert_rtn("PredictorAdd8_C", "lossless.c", 205, "upper != NULL");
}

void PredictorAdd9_C_cold_1()
{
  __assert_rtn("PredictorAdd9_C", "lossless.c", 206, "upper != NULL");
}

void PredictorAdd10_C_cold_1()
{
  __assert_rtn("PredictorAdd10_C", "lossless.c", 207, "upper != NULL");
}

void PredictorAdd11_C_cold_1()
{
  __assert_rtn("PredictorAdd11_C", "lossless.c", 208, "upper != NULL");
}

void PredictorAdd12_C_cold_1()
{
  __assert_rtn("PredictorAdd12_C", "lossless.c", 209, "upper != NULL");
}

void PredictorAdd13_C_cold_1()
{
  __assert_rtn("PredictorAdd13_C", "lossless.c", 210, "upper != NULL");
}

uint64_t VP8LColorCacheInit(uint64_t a1, int a2)
{
  if (!a1) {
    VP8LColorCacheInit_cold_1();
  }
  if (a2 <= 0) {
    VP8LColorCacheInit_cold_2();
  }
  uint64_t result = (uint64_t)WebPSafeCalloc(1 << a2, 4uLL);
  *(void *)a1 = result;
  if (result)
  {
    *(_DWORD *)(a1 + 8) = 32 - a2;
    *(_DWORD *)(a1 + 12) = a2;
    return 1;
  }
  return result;
}

void VP8LColorCacheClear(void **a1)
{
  if (a1)
  {
    _TIFFfree(*a1);
    *a1 = 0;
  }
}

void *VP8LColorCacheCopy(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    VP8LColorCacheCopy_cold_1();
  }
  if (!a2) {
    VP8LColorCacheCopy_cold_2();
  }
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 != *(_DWORD *)(a2 + 12)) {
    VP8LColorCacheCopy_cold_3();
  }
  uint64_t v3 = *(void **)a2;
  unsigned int v4 = *(const void **)a1;

  return memcpy(v3, v4, 4 << v2);
}

void VP8LColorCacheInit_cold_1()
{
  __assert_rtn("VP8LColorCacheInit", "color_cache_utils.c", 25, "color_cache != NULL");
}

void VP8LColorCacheInit_cold_2()
{
}

void VP8LColorCacheCopy_cold_1()
{
  __assert_rtn("VP8LColorCacheCopy", "color_cache_utils.c", 44, "src != NULL");
}

void VP8LColorCacheCopy_cold_2()
{
  __assert_rtn("VP8LColorCacheCopy", "color_cache_utils.c", 45, "dst != NULL");
}

void VP8LColorCacheCopy_cold_3()
{
  __assert_rtn("VP8LColorCacheCopy", "color_cache_utils.c", 46, "src->hash_bits_ == dst->hash_bits_");
}

void *VP8LHtreeGroupsNew(int a1)
{
  uint64_t result = WebPSafeMalloc(a1, 0x238uLL);
  if (a1 > 0x10000)
  {
    if (result) {
      VP8LHtreeGroupsNew_cold_1();
    }
  }
  return result;
}

void VP8LHtreeGroupsFree(void *a1)
{
  if (a1) {
    _TIFFfree(a1);
  }
}

uint64_t VP8LBuildHuffmanTable(uint64_t a1, int a2, int *a3, int a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = BuildHuffmanTable(0, a2, a3, a4, 0);
  if (a4 >= 2329) {
    VP8LBuildHuffmanTable_cold_1();
  }
  uint64_t v9 = v8;
  if (a1 && v8)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = *(int *)(v10 + 24);
    if (v11 + 4 * (int)v8 >= (unint64_t)(*(void *)v10 + 4 * v12))
    {
      unsigned int v13 = WebPSafeMalloc(1uLL, 0x20uLL);
      if (!v13) {
        return 0;
      }
      char v14 = v13;
      if ((int)v9 <= (int)v12) {
        int v15 = v12;
      }
      else {
        int v15 = v9;
      }
      *((_DWORD *)v13 + 6) = v15;
      int v16 = WebPSafeMalloc(v15, 4uLL);
      *char v14 = v16;
      if (!v16)
      {
        _TIFFfree(v14);
        return 0;
      }
      uint64_t v11 = (uint64_t)v16;
      v14[1] = v16;
      v14[2] = 0;
      *(void *)(*(void *)(a1 + 32) + 16) = v14;
      *(void *)(a1 + 32) = v14;
    }
    if (a4 <= 512)
    {
      bzero(v20, 0x400uLL);
      BuildHuffmanTable(v11, a2, a3, a4, (unint64_t)v20);
      return v9;
    }
    unsigned int v17 = WebPSafeMalloc(a4, 2uLL);
    if (v17)
    {
      uint64_t v18 = v17;
      BuildHuffmanTable(*(void *)(*(void *)(a1 + 32) + 8), a2, a3, a4, (unint64_t)v17);
      _TIFFfree(v18);
      return v9;
    }
    return 0;
  }
  return v9;
}

uint64_t BuildHuffmanTable(uint64_t a1, int a2, int *a3, int a4, unint64_t a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  memset(v62, 0, sizeof(v62));
  if (!a4) {
    BuildHuffmanTable_cold_1();
  }
  if (!a3) {
    BuildHuffmanTable_cold_2();
  }
  if ((!a1 || !a5) && a1 | a5) {
    BuildHuffmanTable_cold_6();
  }
  if (a2 < 1) {
    BuildHuffmanTable_cold_3();
  }
  if (a4 < 1)
  {
    int v9 = 0;
  }
  else
  {
    uint64_t v5 = a4;
    int v6 = a3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v7 = v8;
      if ((int)v8 > 15) {
        return 0;
      }
      ++*((_DWORD *)v62 + v7);
      --v5;
    }
    while (v5);
    int v9 = v62[0];
  }
  if (v9 == a4) {
    return 0;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v10 = (1 << a2);
  long long v61 = 0u;
  memset(v60, 0, sizeof(v60));
  DWORD1(v60[0]) = 0;
  do
  {
    int v14 = *((_DWORD *)v62 + v12 + 1);
    if (v14 > 1 << (v12 + 1)) {
      return 0;
    }
    v13 += v14;
    *((_DWORD *)v60 + v12++ + 2) = v13;
  }
  while (v12 != 14);
  if (a4 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      uint64_t v16 = a3[i];
      if ((int)v16 >= 1)
      {
        if (a5)
        {
          uint64_t v17 = *((int *)v60 + v16);
          *((_DWORD *)v60 + v16) = v17 + 1;
          *(_WORD *)(a5 + 2 * v17) = i;
        }
        else
        {
          ++*((_DWORD *)v60 + v16);
        }
      }
    }
  }
  int v18 = HIDWORD(v61);
  if (HIDWORD(v61) != 1)
  {
    unsigned int v22 = 0;
    LODWORD(v23) = 0;
    int v24 = v10 - 1;
    uint64_t v25 = (a2 + 1);
    int v26 = 2;
    uint64_t v27 = 1;
    int v28 = 1;
    int v29 = 1;
    do
    {
      int v30 = v28;
      int v31 = *((_DWORD *)v62 + v27);
      int v28 = 2 * v28 - v31;
      if (v28 < 0) {
        return 0;
      }
      if (a1 && v31 >= 1)
      {
        if (((v26 - 1) & v10) != 0) {
          BuildHuffmanTable_cold_4();
        }
        uint64_t v23 = (int)v23;
        do
        {
          int v32 = v27 | (*(unsigned __int16 *)(a5 + 2 * v23) << 16);
          int v33 = 1 << a2;
          do
          {
            *(_DWORD *)(a1 + 4 * v22 + 4 * (v33 - v26)) = v32;
            v33 -= v26;
          }
          while (v33 > 0);
          unsigned int v34 = 1 << (v27 - 1);
          do
          {
            unsigned int v35 = v34;
            v34 >>= 1;
          }
          while ((v35 & v22) != 0);
          ++v23;
          unsigned int v22 = ((v35 - 1) & v22) + v35;
          BOOL v36 = __OFSUB__(v31--, 1);
        }
        while (!((v31 < 0) ^ v36 | (v31 == 0)));
        *((_DWORD *)v62 + v27) = 0;
      }
      v29 += 2 * v30;
      ++v27;
      v26 *= 2;
    }
    while (v27 != v25);
    if (a2 > 14)
    {
      unsigned int v42 = 1 << a2;
    }
    else
    {
      uint64_t v37 = a2;
      int v38 = (char *)v62 + 4 * a2 + 4;
      int v39 = 2;
      int v40 = -1;
      uint64_t v41 = a1;
      unsigned int v42 = 1 << a2;
      do
      {
        uint64_t v43 = v37 + 1;
        int v44 = *((_DWORD *)v62 + v37 + 1);
        if (2 * v28 - v44 < 0) {
          return 0;
        }
        if (v44 >= 1)
        {
          do
          {
            if ((v22 & v24) == v40)
            {
              if (a1) {
                goto LABEL_62;
              }
            }
            else
            {
              int v45 = 1 << (v43 - a2);
              char v46 = v43 - a2;
              if (v37 <= 13)
              {
                uint64_t v47 = 0;
                int v48 = 1 << (v43 - a2);
                while (1)
                {
                  int v49 = v48 - *(_DWORD *)&v38[4 * v47];
                  if (v49 < 1) {
                    break;
                  }
                  int v50 = v37 + v47;
                  int v48 = 2 * v49;
                  ++v47;
                  if (v50 == 13)
                  {
                    char v51 = 15;
                    goto LABEL_59;
                  }
                }
                char v51 = v25 + v47;
LABEL_59:
                char v46 = v51 - a2;
                int v45 = 1 << (v51 - a2);
              }
              v42 += v45;
              if (a1)
              {
                v41 += 4 * (int)v10;
                char v52 = v46 + a2;
                uint64_t v53 = a1 + 4 * (v22 & v24);
                *(unsigned char *)uint64_t v53 = v52;
                *(_WORD *)(v53 + 2) = ((v41 - a1) >> 2) - (v22 & v24);
                LODWORD(v10) = v45;
                int v40 = v22 & v24;
LABEL_62:
                if ((v10 & (v39 - 1)) != 0) {
                  BuildHuffmanTable_cold_4();
                }
                int v54 = v23 + 1;
                int v55 = (v43 - a2) | (*(unsigned __int16 *)(a5 + 2 * (int)v23) << 16);
                int v56 = v10;
                do
                {
                  *(_DWORD *)(v41 + 4 * (v22 >> a2) + 4 * (v56 - v39)) = v55;
                  v56 -= v39;
                }
                while (v56 > 0);
                LODWORD(v23) = v54;
                goto LABEL_67;
              }
              LODWORD(v10) = v45;
              int v40 = v22 & v24;
            }
LABEL_67:
            unsigned int v57 = 1 << v37;
            do
            {
              unsigned int v58 = v57;
              v57 >>= 1;
            }
            while ((v58 & v22) != 0);
            unsigned int v22 = ((v58 - 1) & v22) + v58;
            int v59 = *((_DWORD *)v62 + v43);
            BOOL v36 = __OFSUB__(v59--, 1);
            *((_DWORD *)v62 + v43) = v59;
          }
          while (!((v59 < 0) ^ v36 | (v59 == 0)));
        }
        v39 *= 2;
        LOBYTE(v25) = v25 + 1;
        v38 += 4;
        v29 += 2 * v28;
        ++v37;
        int v28 = 2 * v28 - v44;
      }
      while (v43 != 15);
      int v18 = HIDWORD(v61);
    }
    if (v29 == 2 * v18 - 1) {
      return v42;
    }
    else {
      return 0;
    }
  }
  if (a5)
  {
    int v19 = *(unsigned __int16 *)a5 << 16;
    uint64_t v20 = (int)v10;
    do
      *(_DWORD *)(a1 - 4 + 4 * v20) = v19;
    while (v20-- > 1);
  }
  return v10;
}

uint64_t VP8LHuffmanTablesAllocate(int a1, uint64_t a2)
{
  *(void *)(a2 + 32) = a2;
  *(void *)(a2 + 16) = 0;
  uint64_t result = (uint64_t)WebPSafeMalloc(a1, 4uLL);
  *(void *)a2 = result;
  if (result)
  {
    *(void *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 24) = a1;
    return 1;
  }
  return result;
}

void VP8LHuffmanTablesDeallocate(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    _TIFFfree(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 16) = 0;
    if (v2)
    {
      do
      {
        uint64_t v3 = *(void *)(v2 + 16);
        _TIFFfree(*(void **)v2);
        _TIFFfree((void *)v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
  }
}

void VP8LHtreeGroupsNew_cold_1()
{
  __assert_rtn("VP8LHtreeGroupsNew", "huffman_utils.c", 31, "num_htree_groups <= MAX_HTREE_GROUPS");
}

void VP8LBuildHuffmanTable_cold_1()
{
  __assert_rtn("VP8LBuildHuffmanTable", "huffman_utils.c", 221, "code_lengths_size <= MAX_CODE_LENGTHS_SIZE");
}

void BuildHuffmanTable_cold_1()
{
  __assert_rtn("BuildHuffmanTable", "huffman_utils.c", 92, "code_lengths_size != 0");
}

void BuildHuffmanTable_cold_2()
{
  __assert_rtn("BuildHuffmanTable", "huffman_utils.c", 93, "code_lengths != NULL");
}

void BuildHuffmanTable_cold_3()
{
}

void BuildHuffmanTable_cold_4()
{
  __assert_rtn("ReplicateValue", "huffman_utils.c", 56, "end % step == 0");
}

void BuildHuffmanTable_cold_6()
{
  __assert_rtn("BuildHuffmanTable", "huffman_utils.c", 95, "(root_table != NULL && sorted != NULL) || (root_table == NULL && sorted == NULL)");
}

uint64_t WebPFlipBuffer(uint64_t a1)
{
  if (!a1) {
    return 2;
  }
  uint64_t v1 = *(int *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)a1 <= 0xAu)
  {
    uint64_t v9 = 0;
    uint64_t v11 = *(int *)(a1 + 24);
    *(void *)(a1 + 16) = v2 + (v1 - 1) * v11;
    *(_DWORD *)(a1 + 24) = -(int)v11;
  }
  else
  {
    uint64_t v3 = v1 - 1;
    uint64_t v4 = *(int *)(a1 + 48);
    int v5 = *(_DWORD *)(a1 + 52);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 24) + (int)(v3 >> 1) * (uint64_t)v5;
    *(void *)(a1 + 16) = v2 + v3 * v4;
    *(void *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 48) = -(int)v4;
    *(_DWORD *)(a1 + 52) = -v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 56);
    *(void *)(a1 + 32) = v6 + (int)(v3 >> 1) * (uint64_t)(int)v4;
    *(_DWORD *)(a1 + 56) = -(int)v4;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = 0;
    if (v8)
    {
      uint64_t v10 = *(int *)(a1 + 60);
      *(void *)(a1 + 40) = v8 + v3 * v10;
      *(_DWORD *)(a1 + 60) = -(int)v10;
    }
  }
  return v9;
}

uint64_t WebPAllocateDecBuffer(int a1, int a2, _DWORD *a3, unsigned int *a4)
{
  uint64_t v4 = 2;
  if (a2 < 1 || a1 < 1 || !a4) {
    return v4;
  }
  if (a3)
  {
    if (a3[2])
    {
      int v7 = a3[5];
      int v8 = a3[6];
      if (!WebPCheckCropDimensions(a1, a2, a3[3] & 0xFFFFFFFE, a3[4] & 0xFFFFFFFE, v7, v8)) {
        return 2;
      }
      a2 = v8;
      a1 = v7;
    }
    if (a3[7])
    {
      int v9 = a3[8];
      int v22 = a3[9];
      int v23 = v9;
      if (!WebPRescalerGetScaledDimensions(a1, a2, &v23, &v22)) {
        return 2;
      }
      a2 = v22;
      a1 = v23;
    }
  }
  a4[1] = a1;
  a4[2] = a2;
  uint64_t v4 = 2;
  if (a1 < 1) {
    return v4;
  }
  if (a2 < 1) {
    return v4;
  }
  uint64_t v10 = *a4;
  if (v10 > 0xC) {
    return v4;
  }
  if ((int)a4[3] > 0 || *((void *)a4 + 14)) {
    goto LABEL_16;
  }
  if ((kModeBpp[v10] * (unint64_t)a1) >> 31) {
    return 2;
  }
  uint64_t v13 = kModeBpp[v10] * (uint64_t)a1;
  uint64_t v14 = v13 * a2;
  unint64_t v15 = a1 * (unint64_t)a2;
  if (v10 == 12) {
    int v16 = a1;
  }
  else {
    int v16 = 0;
  }
  if (v10 != 12) {
    unint64_t v15 = 0;
  }
  if (v10 >= 0xB) {
    unsigned int v17 = (a1 + 1) >> 1;
  }
  else {
    unsigned int v17 = 0;
  }
  if (v10 >= 0xB) {
    unsigned int v18 = v16;
  }
  else {
    unsigned int v18 = 0;
  }
  if (v10 >= 0xB) {
    unint64_t v19 = ((a1 + 1) >> 1) * (unint64_t)((a2 + 1) >> 1);
  }
  else {
    unint64_t v19 = 0;
  }
  if (v10 >= 0xB) {
    unint64_t v20 = v15;
  }
  else {
    unint64_t v20 = 0;
  }
  uint64_t v4 = 1;
  uint64_t v21 = (char *)WebPSafeMalloc(v14 + 2 * v19 + v20, 1uLL);
  if (v21)
  {
    *((void *)a4 + 14) = v21;
    *((void *)a4 + 2) = v21;
    if (v10 < 0xB)
    {
      a4[6] = v13;
      *((void *)a4 + 4) = v14;
    }
    else
    {
      a4[12] = v13;
      a4[13] = v17;
      *((void *)a4 + 8) = v14;
      *((void *)a4 + 9) = v19;
      *((void *)a4 + 3) = &v21[v14];
      *((void *)a4 + 4) = &v21[v14 + v19];
      a4[14] = v17;
      *((void *)a4 + 10) = v19;
      if (v10 == 12) {
        *((void *)a4 + 5) = &v21[2 * v19 + v14];
      }
      *((void *)a4 + 1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v20;
      a4[15] = v18;
    }
LABEL_16:
    uint64_t v11 = CheckDecBuffer(a4);
    uint64_t v4 = v11;
    if (a3 && !v11)
    {
      if (a3[12]) {
        return WebPFlipBuffer((uint64_t)a4);
      }
      else {
        return 0;
      }
    }
  }
  return v4;
}

uint64_t WebPInitDecBufferInternal(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  if (a1 && (a2 & 0xFFFFFF00) == 0x200)
  {
    *(void *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    uint64_t v2 = 1;
    *(_OWORD *)a1 = 0u;
  }
  return v2;
}

void WebPFreeDecBuffer(uint64_t a1)
{
  if (a1)
  {
    if (*(int *)(a1 + 12) <= 0) {
      _TIFFfree(*(void **)(a1 + 112));
    }
    *(void *)(a1 + 112) = 0;
  }
}

uint64_t WebPCopyDecBufferPixels(unsigned int *a1, uint64_t a2)
{
  if (!a1 || !a2) {
    WebPCopyDecBufferPixels_cold_1();
  }
  uint64_t v4 = *a1;
  if (v4 != *(_DWORD *)a2) {
    WebPCopyDecBufferPixels_cold_2();
  }
  *(void *)(a2 + 4) = *(void *)(a1 + 1);
  if (CheckDecBuffer((unsigned int *)a2)) {
    return 2;
  }
  uint64_t v6 = (char *)*((void *)a1 + 2);
  int v7 = *(char **)(a2 + 16);
  int v8 = a1[1];
  if (v4 <= 0xA)
  {
    int v20 = a1[6];
    int v21 = *(_DWORD *)(a2 + 24);
    int v22 = v8 * kModeBpp[v4];
  }
  else
  {
    WebPCopyPlane(v6, a1[12], v7, *(_DWORD *)(a2 + 48), v8, a1[2]);
    int v9 = a1[1];
    int v10 = a1[2];
    if (v9 >= -1) {
      int v11 = v9 + 1;
    }
    else {
      int v11 = v9 + 2;
    }
    int v12 = v11 >> 1;
    int v13 = v10 + 2;
    if (v10 >= -1) {
      int v13 = v10 + 1;
    }
    WebPCopyPlane(*((char **)a1 + 3), a1[13], *(char **)(a2 + 24), *(_DWORD *)(a2 + 52), v12, v13 >> 1);
    int v14 = a1[1];
    int v15 = a1[2];
    if (v14 >= -1) {
      int v16 = v14 + 1;
    }
    else {
      int v16 = v14 + 2;
    }
    int v17 = v16 >> 1;
    int v18 = v15 + 2;
    if (v15 >= -1) {
      int v18 = v15 + 1;
    }
    WebPCopyPlane(*((char **)a1 + 4), a1[14], *(char **)(a2 + 32), *(_DWORD *)(a2 + 56), v17, v18 >> 1);
    int v19 = *a1;
    if ((*a1 > 0xC || ((1 << v19) & 0x103A) == 0) && (v19 - 11) < 0xFFFFFFFC) {
      return 0;
    }
    uint64_t v6 = (char *)*((void *)a1 + 5);
    int v20 = a1[15];
    int v7 = *(char **)(a2 + 40);
    int v21 = *(_DWORD *)(a2 + 60);
    int v22 = a1[1];
  }
  WebPCopyPlane(v6, v20, v7, v21, v22, a1[2]);
  return 0;
}

uint64_t CheckDecBuffer(unsigned int *a1)
{
  uint64_t v1 = *a1;
  if (v1 > 0xC) {
    return 2;
  }
  uint64_t v3 = (int)a1[1];
  uint64_t v4 = (int)a1[2];
  if (v1 < 0xB)
  {
    LODWORD(v30) = a1[6];
    if ((int)v30 >= 0) {
      uint64_t v30 = v30;
    }
    else {
      uint64_t v30 = -(int)v30;
    }
    int v31 = kModeBpp[v1];
    unint64_t v32 = v30 * ((int)v4 - 1) + v31 * (uint64_t)(int)v3;
    int v33 = v3 * v31;
    if (v32 > *((void *)a1 + 4) || (int)v30 < v33 || *((void *)a1 + 2) == 0) {
      return 2;
    }
  }
  else
  {
    int v5 = v3 + 2;
    if ((int)v3 >= -1) {
      int v5 = v3 + 1;
    }
    int v6 = v5 >> 1;
    int v7 = v4 + 2;
    if ((int)v4 >= -1) {
      int v7 = v4 + 1;
    }
    int v8 = v7 >> 1;
    LODWORD(v9) = a1[12];
    LODWORD(v10) = a1[13];
    if ((int)v9 >= 0) {
      uint64_t v9 = v9;
    }
    else {
      uint64_t v9 = -(int)v9;
    }
    if ((int)v10 >= 0) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = -(int)v10;
    }
    LODWORD(v1std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = a1[14];
    if ((int)v11 >= 0) {
      uint64_t v11 = v11;
    }
    else {
      uint64_t v11 = -(int)v11;
    }
    uint64_t v12 = v4 - 1;
    uint64_t v13 = v8 - 1;
    unint64_t v14 = v10 * v13 + v6;
    unint64_t v15 = v11 * v13 + v6;
    BOOL v24 = (unint64_t)(v3 + v9 * v12) <= *((void *)a1 + 8)
       && v14 <= *((void *)a1 + 9)
       && v15 <= *((void *)a1 + 10)
       && (int)v9 >= (int)v3
       && (int)v10 >= v6
       && (int)v11 >= v6
       && *((void *)a1 + 2) != 0
       && *((void *)a1 + 3) != 0
       && *((void *)a1 + 4) != 0;
    if (v1 == 12)
    {
      LODWORD(v25) = a1[15];
      if ((int)v25 >= 0) {
        uint64_t v25 = v25;
      }
      else {
        uint64_t v25 = -(int)v25;
      }
      unint64_t v26 = v3 + v25 * v12;
      BOOL v29 = (int)v25 >= (int)v3 && v26 <= *((void *)a1 + 11) && *((void *)a1 + 5) != 0;
      if (!v24 || !v29) {
        return 2;
      }
    }
    else if (!v24)
    {
      return 2;
    }
  }
  return 0;
}

BOOL WebPAvoidSlowMemory(_DWORD *a1, uint64_t a2)
{
  if (!a1) {
    WebPAvoidSlowMemory_cold_1();
  }
  if ((int)a1[3] < 2) {
    return 0;
  }
  BOOL result = 0;
  if (a2)
  {
    if ((*a1 - 7) <= 3) {
      return *(_DWORD *)(a2 + 8) != 0;
    }
  }
  return result;
}

void WebPCopyDecBufferPixels_cold_1()
{
  __assert_rtn("WebPCopyDecBufferPixels", "buffer_dec.c", 271, "src_buf != NULL && dst_buf != NULL");
}

void WebPCopyDecBufferPixels_cold_2()
{
  __assert_rtn("WebPCopyDecBufferPixels", "buffer_dec.c", 272, "src_buf->colorspace == dst_buf->colorspace");
}

void WebPAvoidSlowMemory_cold_1()
{
  __assert_rtn("WebPAvoidSlowMemory", "buffer_dec.c", 304, "output != NULL");
}

uint64_t VP8ParseQuant(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int Value = VP8GetValue(a1 + 16, 7);
  if (VP8GetValue(v2, 1)) {
    Signedint Value = VP8GetSignedValue(v2, 4);
  }
  else {
    Signedint Value = 0;
  }
  if (VP8GetValue(v2, 1)) {
    int v5 = VP8GetSignedValue(v2, 4);
  }
  else {
    int v5 = 0;
  }
  if (VP8GetValue(v2, 1)) {
    int v6 = VP8GetSignedValue(v2, 4);
  }
  else {
    int v6 = 0;
  }
  if (VP8GetValue(v2, 1)) {
    int v7 = VP8GetSignedValue(v2, 4);
  }
  else {
    int v7 = 0;
  }
  uint64_t result = VP8GetValue(v2, 1);
  if (result) {
    uint64_t result = VP8GetSignedValue(v2, 4);
  }
  uint64_t v9 = 144;
  int v10 = *(_DWORD *)(a1 + 132);
  uint64_t v11 = a1 + 1060;
  do
  {
    if (v10)
    {
      if (*(_DWORD *)(a1 + 140)) {
        int v12 = 0;
      }
      else {
        int v12 = Value;
      }
      int v13 = v12 + *(char *)(a1 + v9);
    }
    else
    {
      int v13 = Value;
      if (v9 != 144)
      {
        long long v29 = *(_OWORD *)(a1 + 1076);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)(a1 + 1060);
        *(_OWORD *)(v11 + 16) = v29;
        goto LABEL_39;
      }
    }
    int v14 = v13 + SignedValue;
    if (v13 + SignedValue >= 127) {
      int v14 = 127;
    }
    int v15 = kDcTable[v14 & ~(v14 >> 31)];
    if (v13 >= 127) {
      int v16 = 127;
    }
    else {
      int v16 = v13;
    }
    int v17 = kAcTable[v16 & ~(v16 >> 31)];
    *(_DWORD *)uint64_t v11 = v15;
    *(_DWORD *)(v11 + 4) = v17;
    int v18 = v13 + v5;
    if (v13 + v5 >= 127) {
      int v18 = 127;
    }
    int v19 = 2 * kDcTable[v18 & ~(v18 >> 31)];
    int v20 = v13 + v6;
    if (v13 + v6 >= 127) {
      int v20 = 127;
    }
    unsigned int v21 = 101581 * kAcTable[v20 & ~(v20 >> 31)];
    BOOL v22 = v21 >= 0x80000;
    int v23 = HIWORD(v21);
    if (!v22) {
      int v23 = 8;
    }
    *(_DWORD *)(v11 + 8) = v19;
    *(_DWORD *)(v11 + 12) = v23;
    int v24 = v13 + v7;
    if (v13 + v7 >= 117) {
      int v24 = 117;
    }
    int v25 = kDcTable[v24 & ~(v24 >> 31)];
    int v26 = v13 + result;
    if (v26 >= 127) {
      int v27 = 127;
    }
    else {
      int v27 = v26;
    }
    int v28 = kAcTable[v27 & ~(v27 >> 31)];
    *(_DWORD *)(v11 + 16) = v25;
    *(_DWORD *)(v11 + 20) = v28;
    *(_DWORD *)(v11 + 24) = v26;
LABEL_39:
    v11 += 32;
    ++v9;
  }
  while (v9 != 148);
  return result;
}

void WebPInitUpsamplersNEON()
{
  qword_1E91056B0 = (uint64_t)UpsampleRgbaLinePair_NEON;
  qword_1E91056C0 = (uint64_t)UpsampleBgraLinePair_NEON;
  qword_1E91056E0 = (uint64_t)UpsampleRgbaLinePair_NEON;
  qword_1E91056E8 = (uint64_t)UpsampleBgraLinePair_NEON;
  WebPUpsamplers = (uint64_t)UpsampleRgbLinePair_NEON;
  qword_1E91056B8 = (uint64_t)UpsampleBgrLinePair_NEON;
  qword_1E91056C8 = (uint64_t)UpsampleArgbLinePair_NEON;
  qword_1E91056F0 = (uint64_t)UpsampleArgbLinePair_NEON;
  qword_1E91056D8 = (uint64_t)UpsampleRgb565LinePair_NEON;
  qword_1E91056D0 = (uint64_t)UpsampleRgba4444LinePair_NEON;
  qword_1E91056F8 = (uint64_t)UpsampleRgba4444LinePair_NEON;
}

uint64_t UpsampleRgbaLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned char *a7, char *a8, int a9)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  long long v167 = 0u;
  memset(v168, 0, 31);
  long long v165 = 0u;
  long long v166 = 0u;
  if (!a1) {
    UpsampleRgbaLinePair_NEON_cold_1();
  }
  uint64_t v11 = a6;
  int v12 = a5;
  int v13 = a4;
  uint64_t v16 = (uint64_t)(a9 + 1) >> 1;
  int v17 = ((int)v16 - 1) >> 3;
  v160 = (unsigned __int8 *)(v16 - ((v16 - 1) & 0xFFFFFFFFFFFFFFF8));
  int v18 = *a3;
  unsigned int v19 = ((*a5 + v18) >> 1) + 1;
  int v20 = *a4;
  unsigned int v21 = ((*a6 + v20) >> 1) + 1;
  unsigned int v22 = (v19 + v18) >> 1;
  unsigned int v23 = (v21 + v20) >> 1;
  unsigned int v24 = (19077 * *a1) >> 8;
  unsigned int v25 = v24 + ((26149 * v23) >> 8);
  if (v25 >= 0x379A) {
    char v26 = -1;
  }
  else {
    char v26 = 0;
  }
  if (v25 - 14234 >= 0x4000) {
    char v27 = v26;
  }
  else {
    char v27 = (v25 - 14234) >> 6;
  }
  *a7 = v27;
  int v28 = v24 - (((13320 * v23) >> 8) + ((6419 * v22) >> 8));
  unsigned int v29 = v28 + 8708;
  unsigned int v30 = (v28 + 8708) >> 6;
  if (v28 >= -8708) {
    char v31 = -1;
  }
  else {
    char v31 = 0;
  }
  if (v29 < 0x4000) {
    char v31 = v30;
  }
  a7[1] = v31;
  unsigned int v32 = v24 + ((33050 * v22) >> 8);
  unsigned int v33 = v32 - 17685;
  unsigned int v34 = (v32 - 17685) >> 6;
  if (v32 >= 0x4515) {
    char v35 = -1;
  }
  else {
    char v35 = 0;
  }
  if (v33 < 0x4000) {
    char v35 = v34;
  }
  a7[2] = v35;
  a7[3] = -1;
  if (a2)
  {
    unsigned int v36 = (v19 + *v12) >> 1;
    unsigned int v37 = (v21 + *v11) >> 1;
    unsigned int v38 = 19077 * *a2;
    unsigned int v39 = ((26149 * v37) >> 8) + (v38 >> 8);
    unsigned int v40 = v39 - 14234;
    unsigned int v41 = (v39 - 14234) >> 6;
    if (v39 >= 0x379A) {
      char v42 = -1;
    }
    else {
      char v42 = 0;
    }
    if (v40 < 0x4000) {
      char v42 = v41;
    }
    *a8 = v42;
    signed int v43 = (v38 >> 8) - (((6419 * v36) >> 8) + ((13320 * v37) >> 8));
    unsigned int v44 = v43 + 8708;
    unsigned int v45 = (v43 + 8708) >> 6;
    if (v43 >= -8708) {
      char v46 = -1;
    }
    else {
      char v46 = 0;
    }
    if (v44 < 0x4000) {
      char v46 = v45;
    }
    a8[1] = v46;
    unsigned int v47 = ((33050 * v36) >> 8) + (v38 >> 8);
    unsigned int v48 = v47 - 17685;
    unsigned int v49 = (v47 - 17685) >> 6;
    if (v47 >= 0x4515) {
      char v50 = -1;
    }
    else {
      char v50 = 0;
    }
    if (v48 < 0x4000) {
      char v50 = v49;
    }
    a8[2] = v50;
    a8[3] = -1;
  }
  int v161 = (16 * v17) | 1;
  if (a9 >= 17)
  {
    uint64_t v51 = 0;
    int16x8_t v54 = vdupq_n_s16(0x11Au);
    int16x8_t v55 = vdupq_n_s16(0xC866u);
    int16x8_t v56 = vdupq_n_s16(0x2204u);
    int16x8_t v57 = vdupq_n_s16(0xBAEBu);
    if (v17 <= 1) {
      uint64_t v58 = 1;
    }
    else {
      uint64_t v58 = v17;
    }
    uint64_t v59 = -1;
    uint64_t v60 = -1;
    do
    {
      uint64_t v61 = 0;
      uint8x8_t v62 = *(uint8x8_t *)(a3 + 1);
      uint8x8_t v63 = *(uint8x8_t *)(v12 + 1);
      int16x8_t v64 = (int16x8_t)vaddl_u8(v63, *(uint8x8_t *)a3);
      int16x8_t v65 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v62);
      int16x8_t v66 = vaddq_s16(v64, v65);
      *(int8x8_t *)v64.i8 = vshrn_n_s16(vaddq_s16(v66, vaddq_s16(v64, v64)), 3uLL);
      *(int8x8_t *)v65.i8 = vshrn_n_s16(vaddq_s16(v66, vaddq_s16(v65, v65)), 3uLL);
      *(uint8x8_t *)v66.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v65.i8);
      uint8x8_t v67 = vrhadd_u8(v62, *(uint8x8_t *)v64.i8);
      v172.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v64.i8);
      v172.val[1] = (int8x8_t)vrhadd_u8(v63, *(uint8x8_t *)v65.i8);
      vst2_s8((char *)&v165, (int8x8x2_t)v66);
      vst2_s8((char *)&v167, v172);
      v172.val[1] = *(int8x8_t *)(v13 + 1);
      uint8x8_t v68 = *(uint8x8_t *)(v11 + 1);
      int16x8_t v69 = (int16x8_t)vaddl_u8(v68, *(uint8x8_t *)v13);
      int16x8_t v70 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v172.val[1]);
      int16x8_t v71 = vaddq_s16(v69, v70);
      *(int8x8_t *)v69.i8 = vshrn_n_s16(vaddq_s16(v71, vaddq_s16(v69, v69)), 3uLL);
      *(int8x8_t *)v70.i8 = vshrn_n_s16(vaddq_s16(v71, vaddq_s16(v70, v70)), 3uLL);
      *(uint8x8_t *)v71.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v70.i8);
      uint8x8_t v72 = vrhadd_u8((uint8x8_t)v172.val[1], *(uint8x8_t *)v69.i8);
      v172.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v69.i8);
      char v52 = (char *)&v166;
      vst2_s8(v52, (int8x8x2_t)v71);
      v172.val[1] = (int8x8_t)vrhadd_u8(v68, *(uint8x8_t *)v70.i8);
      uint64_t v53 = v168;
      vst2_s8(v53, v172);
      char v73 = 1;
      uint64_t v74 = (16 * v51) | 1;
      do
      {
        int v75 = 4 * (v61 | v74);
        uint8x8_t v76 = *(uint8x8_t *)&a1[v74 + v61];
        uint64_t v77 = (uint8x8_t *)((char *)&v165 + v61);
        int16x8_t v78 = (int16x8_t)vshll_n_u8(*v77, 7uLL);
        int16x8_t v79 = (int16x8_t)vshll_n_u8(v77[2], 7uLL);
        int16x8_t v80 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v76, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        int8x8_t v81 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v80, v55)), 6uLL);
        int8x8_t v82 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v80, v56), vqaddq_s16(vqdmulhq_lane_s16(v78, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        int8x8_t v83 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v78, v54), vqaddq_s16(v80, v57)), v78), 6uLL);
        int64_t v84 = &a7[v75 & 0xFFFFFFE4];
        vst4_s8(v84, *(int8x8x4_t *)(&v60 - 3));
        LOBYTE(v75) = v73;
        uint64_t v61 = 8;
        char v73 = 0;
      }
      while ((v75 & 1) != 0);
      if (a2)
      {
        uint64_t v85 = 0;
        char v86 = 1;
        do
        {
          int v87 = 4 * (v85 | v74);
          uint8x8_t v88 = *(uint8x8_t *)&a2[v74 + v85];
          unsigned int v89 = (uint8x8_t *)&v168[v85 - 16];
          int16x8_t v90 = (int16x8_t)vshll_n_u8(*v89, 7uLL);
          int16x8_t v91 = (int16x8_t)vshll_n_u8(v89[2], 7uLL);
          int16x8_t v92 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v88, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          int8x8_t v93 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v92, v55)), 6uLL);
          int8x8_t v94 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v92, v56), vqaddq_s16(vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          int8x8_t v95 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v90, v54), vqaddq_s16(v92, v57)), v90), 6uLL);
          std::string v96 = &a8[v87 & 0xFFFFFFE4];
          vst4_s8(v96, *(int8x8x4_t *)(&v59 - 3));
          LOBYTE(v87) = v86;
          uint64_t v85 = 8;
          char v86 = 0;
        }
        while ((v87 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v51;
    }
    while (v51 != v58);
  }
  v159 = a1;
  int v162 = v17;
  memset(v164, 0, 9);
  memset(v163, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  size_t v97 = 9 - (int)v160;
  memset((char *)v164 + (int)v160, v164[0].u8[(void)(v160 - 1)], v97);
  memset((char *)v163 + (int)v160, v163[0].u8[(void)(v160 - 1)], v97);
  uint8x8_t v98 = *(uint8x8_t *)((char *)v163 + 1);
  int16x8_t v99 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v163 + 1), v164[0]);
  int16x8_t v100 = (int16x8_t)vaddl_u8(v163[0], *(uint8x8_t *)((char *)v164 + 1));
  int16x8_t v101 = vaddq_s16(v99, v100);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v101, vaddq_s16(v99, v99)), 3uLL);
  *(int8x8_t *)v100.i8 = vshrn_n_s16(vaddq_s16(v101, vaddq_s16(v100, v100)), 3uLL);
  *(uint8x8_t *)v101.i8 = vrhadd_u8(v164[0], *(uint8x8_t *)v100.i8);
  uint8x8_t v102 = vrhadd_u8(*(uint8x8_t *)((char *)v164 + 1), *(uint8x8_t *)v99.i8);
  v170.val[0] = (int8x8_t)vrhadd_u8(v163[0], *(uint8x8_t *)v99.i8);
  unsigned int v103 = (char *)&v165;
  vst2_s8(v103, (int8x8x2_t)v101);
  v170.val[1] = (int8x8_t)vrhadd_u8(v98, *(uint8x8_t *)v100.i8);
  std::string::size_type v105 = (char *)&v167;
  vst2_s8(v105, v170);
  memset(v164, 0, 9);
  memset(v163, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v164 + (int)v160, v164[0].u8[(void)(v160 - 1)], v97);
  uint64_t result = (uint64_t)memset((char *)v163 + (int)v160, v163[0].u8[(void)(v160 - 1)], v97);
  uint8x8_t v107 = *(uint8x8_t *)((char *)v163 + 1);
  int16x8_t v108 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v163 + 1), v164[0]);
  int16x8_t v109 = (int16x8_t)vaddl_u8(v163[0], *(uint8x8_t *)((char *)v164 + 1));
  int16x8_t v110 = vaddq_s16(v108, v109);
  *(int8x8_t *)v108.i8 = vshrn_n_s16(vaddq_s16(v110, vaddq_s16(v108, v108)), 3uLL);
  *(int8x8_t *)v109.i8 = vshrn_n_s16(vaddq_s16(v110, vaddq_s16(v109, v109)), 3uLL);
  *(uint8x8_t *)v110.i8 = vrhadd_u8(v164[0], *(uint8x8_t *)v109.i8);
  uint8x8_t v111 = vrhadd_u8(*(uint8x8_t *)((char *)v164 + 1), *(uint8x8_t *)v108.i8);
  v171.val[0] = (int8x8_t)vrhadd_u8(v163[0], *(uint8x8_t *)v108.i8);
  uint64_t v104 = (char *)&v166;
  vst2_s8(v104, (int8x8x2_t)v110);
  v171.val[1] = (int8x8_t)vrhadd_u8(v107, *(uint8x8_t *)v109.i8);
  int v112 = v168;
  vst2_s8(v112, v171);
  uint64_t v113 = (a9 - v161);
  if ((int)v113 >= 1)
  {
    unsigned int v114 = (unsigned __int8 *)&v166;
    uint64_t result = 8708;
    std::string::size_type v115 = &v159[v161];
    uint64_t v116 = (a9 - v161);
    int v117 = (v162 << 6) | 4;
    do
    {
      int v119 = *v115++;
      int v118 = v119;
      int v120 = *(v114 - 16);
      int v122 = *v114++;
      int v121 = v122;
      std::string::size_type v123 = &a7[v117];
      unsigned int v124 = 19077 * v118;
      unsigned int v125 = ((26149 * v122) >> 8) + (v124 >> 8);
      unsigned int v126 = v125 - 14234;
      unsigned int v127 = (v125 - 14234) >> 6;
      if (v125 >= 0x379A) {
        char v128 = -1;
      }
      else {
        char v128 = 0;
      }
      if (v126 >= 0x4000) {
        LOBYTE(v127) = v128;
      }
      *std::string::size_type v123 = v127;
      signed int v129 = (v124 >> 8) - (((6419 * v120) >> 8) + ((13320 * v121) >> 8));
      unsigned int v130 = v129 + 8708;
      unsigned int v131 = (v129 + 8708) >> 6;
      if (v129 >= -8708) {
        char v132 = -1;
      }
      else {
        char v132 = 0;
      }
      if (v130 < 0x4000) {
        char v132 = v131;
      }
      v123[1] = v132;
      unsigned int v133 = ((33050 * v120) >> 8) + (v124 >> 8);
      unsigned int v134 = v133 - 17685;
      unsigned int v135 = (v133 - 17685) >> 6;
      if (v133 >= 0x4515) {
        char v136 = -1;
      }
      else {
        char v136 = 0;
      }
      if (v134 < 0x4000) {
        char v136 = v135;
      }
      v123[2] = v136;
      v123[3] = -1;
      v117 += 4;
      --v116;
    }
    while (v116);
    if (a2)
    {
      std::string::size_type v137 = v168;
      int v138 = (v162 << 6) | 4;
      unint64_t v139 = &a2[v161];
      uint64_t result = 13320;
      do
      {
        int v141 = *v139++;
        int v140 = v141;
        int v142 = *(v137 - 16);
        int v144 = *v137++;
        int v143 = v144;
        std::string::size_type v145 = &a8[v138];
        unsigned int v146 = 19077 * v140;
        unsigned int v147 = ((26149 * v144) >> 8) + (v146 >> 8);
        unsigned int v148 = v147 - 14234;
        unsigned int v149 = (v147 - 14234) >> 6;
        if (v147 >= 0x379A) {
          char v150 = -1;
        }
        else {
          char v150 = 0;
        }
        if (v148 < 0x4000) {
          char v150 = v149;
        }
        *std::string::size_type v145 = v150;
        signed int v151 = (v146 >> 8) - (((6419 * v142) >> 8) + ((13320 * v143) >> 8));
        unsigned int v152 = v151 + 8708;
        unsigned int v153 = (v151 + 8708) >> 6;
        if (v151 >= -8708) {
          char v154 = -1;
        }
        else {
          char v154 = 0;
        }
        if (v152 < 0x4000) {
          char v154 = v153;
        }
        v145[1] = v154;
        unsigned int v155 = ((33050 * v142) >> 8) + (v146 >> 8);
        unsigned int v156 = v155 - 17685;
        unsigned int v157 = (v155 - 17685) >> 6;
        if (v155 >= 0x4515) {
          char v158 = -1;
        }
        else {
          char v158 = 0;
        }
        if (v156 < 0x4000) {
          char v158 = v157;
        }
        v145[2] = v158;
        v145[3] = -1;
        v138 += 4;
        --v113;
      }
      while (v113);
    }
  }
  return result;
}

uint64_t UpsampleBgraLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned char *a7, char *a8, int a9)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  long long v167 = 0u;
  memset(v168, 0, 31);
  long long v165 = 0u;
  long long v166 = 0u;
  if (!a1) {
    UpsampleBgraLinePair_NEON_cold_1();
  }
  uint64_t v11 = a6;
  int v12 = a5;
  int v13 = a4;
  uint64_t v16 = (uint64_t)(a9 + 1) >> 1;
  int v17 = ((int)v16 - 1) >> 3;
  v160 = (unsigned __int8 *)(v16 - ((v16 - 1) & 0xFFFFFFFFFFFFFFF8));
  int v18 = *a3;
  unsigned int v19 = ((*a5 + v18) >> 1) + 1;
  int v20 = *a4;
  unsigned int v21 = ((*a6 + v20) >> 1) + 1;
  unsigned int v22 = (v19 + v18) >> 1;
  unsigned int v23 = (v21 + v20) >> 1;
  unsigned int v24 = (19077 * *a1) >> 8;
  unsigned int v25 = v24 + ((33050 * v22) >> 8);
  if (v25 >= 0x4515) {
    char v26 = -1;
  }
  else {
    char v26 = 0;
  }
  if (v25 - 17685 >= 0x4000) {
    char v27 = v26;
  }
  else {
    char v27 = (v25 - 17685) >> 6;
  }
  *a7 = v27;
  int v28 = v24 - (((13320 * v23) >> 8) + ((6419 * v22) >> 8));
  unsigned int v29 = v28 + 8708;
  unsigned int v30 = (v28 + 8708) >> 6;
  if (v28 >= -8708) {
    char v31 = -1;
  }
  else {
    char v31 = 0;
  }
  if (v29 < 0x4000) {
    char v31 = v30;
  }
  a7[1] = v31;
  unsigned int v32 = v24 + ((26149 * v23) >> 8);
  unsigned int v33 = v32 - 14234;
  unsigned int v34 = (v32 - 14234) >> 6;
  if (v32 >= 0x379A) {
    char v35 = -1;
  }
  else {
    char v35 = 0;
  }
  if (v33 < 0x4000) {
    char v35 = v34;
  }
  a7[2] = v35;
  a7[3] = -1;
  if (a2)
  {
    unsigned int v36 = (v19 + *v12) >> 1;
    unsigned int v37 = (v21 + *v11) >> 1;
    unsigned int v38 = 19077 * *a2;
    unsigned int v39 = ((33050 * v36) >> 8) + (v38 >> 8);
    unsigned int v40 = v39 - 17685;
    unsigned int v41 = (v39 - 17685) >> 6;
    if (v39 >= 0x4515) {
      char v42 = -1;
    }
    else {
      char v42 = 0;
    }
    if (v40 < 0x4000) {
      char v42 = v41;
    }
    *a8 = v42;
    signed int v43 = (v38 >> 8) - (((6419 * v36) >> 8) + ((13320 * v37) >> 8));
    unsigned int v44 = v43 + 8708;
    unsigned int v45 = (v43 + 8708) >> 6;
    if (v43 >= -8708) {
      char v46 = -1;
    }
    else {
      char v46 = 0;
    }
    if (v44 < 0x4000) {
      char v46 = v45;
    }
    a8[1] = v46;
    unsigned int v47 = ((26149 * v37) >> 8) + (v38 >> 8);
    unsigned int v48 = v47 - 14234;
    unsigned int v49 = (v47 - 14234) >> 6;
    if (v47 >= 0x379A) {
      char v50 = -1;
    }
    else {
      char v50 = 0;
    }
    if (v48 < 0x4000) {
      char v50 = v49;
    }
    a8[2] = v50;
    a8[3] = -1;
  }
  int v161 = (16 * v17) | 1;
  if (a9 >= 17)
  {
    uint64_t v51 = 0;
    int16x8_t v54 = vdupq_n_s16(0x11Au);
    int16x8_t v55 = vdupq_n_s16(0xC866u);
    int16x8_t v56 = vdupq_n_s16(0x2204u);
    int16x8_t v57 = vdupq_n_s16(0xBAEBu);
    if (v17 <= 1) {
      uint64_t v58 = 1;
    }
    else {
      uint64_t v58 = v17;
    }
    uint64_t v59 = -1;
    uint64_t v60 = -1;
    do
    {
      uint64_t v61 = 0;
      uint8x8_t v62 = *(uint8x8_t *)(a3 + 1);
      uint8x8_t v63 = *(uint8x8_t *)(v12 + 1);
      int16x8_t v64 = (int16x8_t)vaddl_u8(v63, *(uint8x8_t *)a3);
      int16x8_t v65 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v62);
      int16x8_t v66 = vaddq_s16(v64, v65);
      *(int8x8_t *)v64.i8 = vshrn_n_s16(vaddq_s16(v66, vaddq_s16(v64, v64)), 3uLL);
      *(int8x8_t *)v65.i8 = vshrn_n_s16(vaddq_s16(v66, vaddq_s16(v65, v65)), 3uLL);
      *(uint8x8_t *)v66.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v65.i8);
      uint8x8_t v67 = vrhadd_u8(v62, *(uint8x8_t *)v64.i8);
      v172.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v64.i8);
      v172.val[1] = (int8x8_t)vrhadd_u8(v63, *(uint8x8_t *)v65.i8);
      vst2_s8((char *)&v165, (int8x8x2_t)v66);
      vst2_s8((char *)&v167, v172);
      v172.val[1] = *(int8x8_t *)(v13 + 1);
      uint8x8_t v68 = *(uint8x8_t *)(v11 + 1);
      int16x8_t v69 = (int16x8_t)vaddl_u8(v68, *(uint8x8_t *)v13);
      int16x8_t v70 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v172.val[1]);
      int16x8_t v71 = vaddq_s16(v69, v70);
      *(int8x8_t *)v69.i8 = vshrn_n_s16(vaddq_s16(v71, vaddq_s16(v69, v69)), 3uLL);
      *(int8x8_t *)v70.i8 = vshrn_n_s16(vaddq_s16(v71, vaddq_s16(v70, v70)), 3uLL);
      *(uint8x8_t *)v71.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v70.i8);
      uint8x8_t v72 = vrhadd_u8((uint8x8_t)v172.val[1], *(uint8x8_t *)v69.i8);
      v172.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v69.i8);
      char v52 = (char *)&v166;
      vst2_s8(v52, (int8x8x2_t)v71);
      v172.val[1] = (int8x8_t)vrhadd_u8(v68, *(uint8x8_t *)v70.i8);
      uint64_t v53 = v168;
      vst2_s8(v53, v172);
      char v73 = 1;
      uint64_t v74 = (16 * v51) | 1;
      do
      {
        int v75 = 4 * (v61 | v74);
        uint8x8_t v76 = *(uint8x8_t *)&a1[v74 + v61];
        uint64_t v77 = (uint8x8_t *)((char *)&v165 + v61);
        int16x8_t v78 = (int16x8_t)vshll_n_u8(*v77, 7uLL);
        int16x8_t v79 = (int16x8_t)vshll_n_u8(v77[2], 7uLL);
        int16x8_t v80 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v76, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        int8x8_t v81 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v80, v55)), 6uLL);
        int8x8_t v82 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v80, v56), vqaddq_s16(vqdmulhq_lane_s16(v78, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        int8x8_t v83 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v78, v54), vqaddq_s16(v80, v57)), v78), 6uLL);
        int64_t v84 = &a7[v75 & 0xFFFFFFE4];
        vst4_s8(v84, *(int8x8x4_t *)(&v60 - 3));
        LOBYTE(v75) = v73;
        uint64_t v61 = 8;
        char v73 = 0;
      }
      while ((v75 & 1) != 0);
      if (a2)
      {
        uint64_t v85 = 0;
        char v86 = 1;
        do
        {
          int v87 = 4 * (v85 | v74);
          uint8x8_t v88 = *(uint8x8_t *)&a2[v74 + v85];
          unsigned int v89 = (uint8x8_t *)&v168[v85 - 16];
          int16x8_t v90 = (int16x8_t)vshll_n_u8(*v89, 7uLL);
          int16x8_t v91 = (int16x8_t)vshll_n_u8(v89[2], 7uLL);
          int16x8_t v92 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v88, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          int8x8_t v93 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v92, v55)), 6uLL);
          int8x8_t v94 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v92, v56), vqaddq_s16(vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          int8x8_t v95 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v90, v54), vqaddq_s16(v92, v57)), v90), 6uLL);
          std::string v96 = &a8[v87 & 0xFFFFFFE4];
          vst4_s8(v96, *(int8x8x4_t *)(&v59 - 3));
          LOBYTE(v87) = v86;
          uint64_t v85 = 8;
          char v86 = 0;
        }
        while ((v87 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v51;
    }
    while (v51 != v58);
  }
  v159 = a1;
  int v162 = v17;
  memset(v164, 0, 9);
  memset(v163, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  size_t v97 = 9 - (int)v160;
  memset((char *)v164 + (int)v160, v164[0].u8[(void)(v160 - 1)], v97);
  memset((char *)v163 + (int)v160, v163[0].u8[(void)(v160 - 1)], v97);
  uint8x8_t v98 = *(uint8x8_t *)((char *)v163 + 1);
  int16x8_t v99 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v163 + 1), v164[0]);
  int16x8_t v100 = (int16x8_t)vaddl_u8(v163[0], *(uint8x8_t *)((char *)v164 + 1));
  int16x8_t v101 = vaddq_s16(v99, v100);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v101, vaddq_s16(v99, v99)), 3uLL);
  *(int8x8_t *)v100.i8 = vshrn_n_s16(vaddq_s16(v101, vaddq_s16(v100, v100)), 3uLL);
  *(uint8x8_t *)v101.i8 = vrhadd_u8(v164[0], *(uint8x8_t *)v100.i8);
  uint8x8_t v102 = vrhadd_u8(*(uint8x8_t *)((char *)v164 + 1), *(uint8x8_t *)v99.i8);
  v170.val[0] = (int8x8_t)vrhadd_u8(v163[0], *(uint8x8_t *)v99.i8);
  unsigned int v103 = (char *)&v165;
  vst2_s8(v103, (int8x8x2_t)v101);
  v170.val[1] = (int8x8_t)vrhadd_u8(v98, *(uint8x8_t *)v100.i8);
  std::string::size_type v105 = (char *)&v167;
  vst2_s8(v105, v170);
  memset(v164, 0, 9);
  memset(v163, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v164 + (int)v160, v164[0].u8[(void)(v160 - 1)], v97);
  uint64_t result = (uint64_t)memset((char *)v163 + (int)v160, v163[0].u8[(void)(v160 - 1)], v97);
  uint8x8_t v107 = *(uint8x8_t *)((char *)v163 + 1);
  int16x8_t v108 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v163 + 1), v164[0]);
  int16x8_t v109 = (int16x8_t)vaddl_u8(v163[0], *(uint8x8_t *)((char *)v164 + 1));
  int16x8_t v110 = vaddq_s16(v108, v109);
  *(int8x8_t *)v108.i8 = vshrn_n_s16(vaddq_s16(v110, vaddq_s16(v108, v108)), 3uLL);
  *(int8x8_t *)v109.i8 = vshrn_n_s16(vaddq_s16(v110, vaddq_s16(v109, v109)), 3uLL);
  *(uint8x8_t *)v110.i8 = vrhadd_u8(v164[0], *(uint8x8_t *)v109.i8);
  uint8x8_t v111 = vrhadd_u8(*(uint8x8_t *)((char *)v164 + 1), *(uint8x8_t *)v108.i8);
  v171.val[0] = (int8x8_t)vrhadd_u8(v163[0], *(uint8x8_t *)v108.i8);
  uint64_t v104 = (char *)&v166;
  vst2_s8(v104, (int8x8x2_t)v110);
  v171.val[1] = (int8x8_t)vrhadd_u8(v107, *(uint8x8_t *)v109.i8);
  int v112 = v168;
  vst2_s8(v112, v171);
  uint64_t v113 = (a9 - v161);
  if ((int)v113 >= 1)
  {
    unsigned int v114 = (unsigned __int8 *)&v166;
    uint64_t result = 8708;
    std::string::size_type v115 = &v159[v161];
    uint64_t v116 = (a9 - v161);
    int v117 = (v162 << 6) | 4;
    do
    {
      int v119 = *v115++;
      int v118 = v119;
      int v120 = *(v114 - 16);
      int v122 = *v114++;
      int v121 = v122;
      std::string::size_type v123 = &a7[v117];
      unsigned int v124 = 19077 * v118;
      unsigned int v125 = ((33050 * v120) >> 8) + (v124 >> 8);
      unsigned int v126 = v125 - 17685;
      unsigned int v127 = (v125 - 17685) >> 6;
      if (v125 >= 0x4515) {
        char v128 = -1;
      }
      else {
        char v128 = 0;
      }
      if (v126 >= 0x4000) {
        LOBYTE(v127) = v128;
      }
      *std::string::size_type v123 = v127;
      signed int v129 = (v124 >> 8) - (((6419 * v120) >> 8) + ((13320 * v121) >> 8));
      unsigned int v130 = v129 + 8708;
      unsigned int v131 = (v129 + 8708) >> 6;
      if (v129 >= -8708) {
        char v132 = -1;
      }
      else {
        char v132 = 0;
      }
      if (v130 < 0x4000) {
        char v132 = v131;
      }
      v123[1] = v132;
      unsigned int v133 = ((26149 * v121) >> 8) + (v124 >> 8);
      unsigned int v134 = v133 - 14234;
      unsigned int v135 = (v133 - 14234) >> 6;
      if (v133 >= 0x379A) {
        char v136 = -1;
      }
      else {
        char v136 = 0;
      }
      if (v134 < 0x4000) {
        char v136 = v135;
      }
      v123[2] = v136;
      v123[3] = -1;
      v117 += 4;
      --v116;
    }
    while (v116);
    if (a2)
    {
      std::string::size_type v137 = v168;
      int v138 = (v162 << 6) | 4;
      unint64_t v139 = &a2[v161];
      uint64_t result = 13320;
      do
      {
        int v141 = *v139++;
        int v140 = v141;
        int v142 = *(v137 - 16);
        int v144 = *v137++;
        int v143 = v144;
        std::string::size_type v145 = &a8[v138];
        unsigned int v146 = 19077 * v140;
        unsigned int v147 = ((33050 * v142) >> 8) + (v146 >> 8);
        unsigned int v148 = v147 - 17685;
        unsigned int v149 = (v147 - 17685) >> 6;
        if (v147 >= 0x4515) {
          char v150 = -1;
        }
        else {
          char v150 = 0;
        }
        if (v148 < 0x4000) {
          char v150 = v149;
        }
        *std::string::size_type v145 = v150;
        signed int v151 = (v146 >> 8) - (((6419 * v142) >> 8) + ((13320 * v143) >> 8));
        unsigned int v152 = v151 + 8708;
        unsigned int v153 = (v151 + 8708) >> 6;
        if (v151 >= -8708) {
          char v154 = -1;
        }
        else {
          char v154 = 0;
        }
        if (v152 < 0x4000) {
          char v154 = v153;
        }
        v145[1] = v154;
        unsigned int v155 = ((26149 * v143) >> 8) + (v146 >> 8);
        unsigned int v156 = v155 - 14234;
        unsigned int v157 = (v155 - 14234) >> 6;
        if (v155 >= 0x379A) {
          char v158 = -1;
        }
        else {
          char v158 = 0;
        }
        if (v156 < 0x4000) {
          char v158 = v157;
        }
        v145[2] = v158;
        v145[3] = -1;
        v138 += 4;
        --v113;
      }
      while (v113);
    }
  }
  return result;
}

uint64_t UpsampleRgbLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned char *a7, char *a8, int a9)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  long long v156 = 0u;
  memset(v157, 0, 31);
  long long v154 = 0u;
  long long v155 = 0u;
  if (!a1) {
    UpsampleRgbLinePair_NEON_cold_1();
  }
  uint64_t v11 = a6;
  int v12 = a5;
  int v13 = a4;
  uint64_t v15 = (uint64_t)(a9 + 1) >> 1;
  int v16 = ((int)v15 - 1) >> 3;
  char v150 = (unsigned __int8 *)(v15 - ((v15 - 1) & 0xFFFFFFFFFFFFFFF8));
  LODWORD(v15) = *a3;
  unsigned int v17 = ((*a5 + v15) >> 1) + 1;
  int v18 = *a4;
  unsigned int v19 = ((*a6 + v18) >> 1) + 1;
  unsigned int v20 = (v17 + v15) >> 1;
  unsigned int v21 = (v19 + v18) >> 1;
  unsigned int v22 = (19077 * *a1) >> 8;
  unsigned int v23 = v22 + ((26149 * v21) >> 8);
  if (v23 >= 0x379A) {
    char v24 = -1;
  }
  else {
    char v24 = 0;
  }
  if (v23 - 14234 >= 0x4000) {
    char v25 = v24;
  }
  else {
    char v25 = (v23 - 14234) >> 6;
  }
  *a7 = v25;
  int v26 = v22 - (((13320 * v21) >> 8) + ((6419 * v20) >> 8));
  unsigned int v27 = v26 + 8708;
  unsigned int v28 = (v26 + 8708) >> 6;
  if (v26 >= -8708) {
    char v29 = -1;
  }
  else {
    char v29 = 0;
  }
  if (v27 < 0x4000) {
    char v29 = v28;
  }
  a7[1] = v29;
  unsigned int v30 = v22 + ((33050 * v20) >> 8);
  unsigned int v31 = v30 - 17685;
  unsigned int v32 = (v30 - 17685) >> 6;
  if (v30 >= 0x4515) {
    char v33 = -1;
  }
  else {
    char v33 = 0;
  }
  if (v31 < 0x4000) {
    char v33 = v32;
  }
  a7[2] = v33;
  if (a2)
  {
    unsigned int v34 = (v17 + *v12) >> 1;
    unsigned int v35 = (v19 + *v11) >> 1;
    unsigned int v36 = 19077 * *a2;
    unsigned int v37 = ((26149 * v35) >> 8) + (v36 >> 8);
    unsigned int v38 = v37 - 14234;
    unsigned int v39 = (v37 - 14234) >> 6;
    if (v37 >= 0x379A) {
      char v40 = -1;
    }
    else {
      char v40 = 0;
    }
    if (v38 < 0x4000) {
      char v40 = v39;
    }
    *a8 = v40;
    signed int v41 = (v36 >> 8) - (((6419 * v34) >> 8) + ((13320 * v35) >> 8));
    unsigned int v42 = v41 + 8708;
    unsigned int v43 = (v41 + 8708) >> 6;
    if (v41 >= -8708) {
      char v44 = -1;
    }
    else {
      char v44 = 0;
    }
    if (v42 < 0x4000) {
      char v44 = v43;
    }
    a8[1] = v44;
    unsigned int v45 = ((33050 * v34) >> 8) + (v36 >> 8);
    if (v45 >= 0x4515) {
      char v46 = -1;
    }
    else {
      char v46 = 0;
    }
    if (v45 - 17685 < 0x4000) {
      char v46 = (v45 - 17685) >> 6;
    }
    a8[2] = v46;
  }
  uint64_t v151 = (16 * v16) | 1u;
  if (a9 >= 17)
  {
    uint64_t v47 = 0;
    int16x8_t v50 = vdupq_n_s16(0x11Au);
    int16x8_t v51 = vdupq_n_s16(0xC866u);
    int16x8_t v52 = vdupq_n_s16(0x2204u);
    int16x8_t v53 = vdupq_n_s16(0xBAEBu);
    if (v16 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v16;
    }
    do
    {
      uint64_t v55 = 0;
      uint8x8_t v56 = *(uint8x8_t *)(a3 + 1);
      uint8x8_t v57 = *(uint8x8_t *)(v12 + 1);
      int16x8_t v58 = (int16x8_t)vaddl_u8(v57, *(uint8x8_t *)a3);
      int16x8_t v59 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v56);
      int16x8_t v60 = vaddq_s16(v58, v59);
      *(int8x8_t *)v58.i8 = vshrn_n_s16(vaddq_s16(v60, vaddq_s16(v58, v58)), 3uLL);
      *(int8x8_t *)v59.i8 = vshrn_n_s16(vaddq_s16(v60, vaddq_s16(v59, v59)), 3uLL);
      *(uint8x8_t *)v60.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v59.i8);
      uint8x8_t v61 = vrhadd_u8(v56, *(uint8x8_t *)v58.i8);
      v161.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v58.i8);
      v161.val[1] = (int8x8_t)vrhadd_u8(v57, *(uint8x8_t *)v59.i8);
      vst2_s8((char *)&v154, (int8x8x2_t)v60);
      vst2_s8((char *)&v156, v161);
      v161.val[1] = *(int8x8_t *)(v13 + 1);
      uint8x8_t v62 = *(uint8x8_t *)(v11 + 1);
      int16x8_t v63 = (int16x8_t)vaddl_u8(v62, *(uint8x8_t *)v13);
      int16x8_t v64 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v161.val[1]);
      int16x8_t v65 = vaddq_s16(v63, v64);
      *(int8x8_t *)v63.i8 = vshrn_n_s16(vaddq_s16(v65, vaddq_s16(v63, v63)), 3uLL);
      *(int8x8_t *)v64.i8 = vshrn_n_s16(vaddq_s16(v65, vaddq_s16(v64, v64)), 3uLL);
      *(uint8x8_t *)v65.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v64.i8);
      uint8x8_t v66 = vrhadd_u8((uint8x8_t)v161.val[1], *(uint8x8_t *)v63.i8);
      v161.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v63.i8);
      unsigned int v48 = (char *)&v155;
      vst2_s8(v48, (int8x8x2_t)v65);
      v161.val[1] = (int8x8_t)vrhadd_u8(v62, *(uint8x8_t *)v64.i8);
      unsigned int v49 = v157;
      vst2_s8(v49, v161);
      char v67 = 1;
      uint64_t v68 = (16 * v47) | 1;
      do
      {
        char v69 = v67;
        int v70 = 3 * (v55 | v68);
        uint8x8_t v71 = *(uint8x8_t *)&a1[v68 + v55];
        uint8x8_t v72 = (uint8x8_t *)((char *)&v154 + v55);
        int16x8_t v73 = (int16x8_t)vshll_n_u8(*v72, 7uLL);
        int16x8_t v74 = (int16x8_t)vshll_n_u8(v72[2], 7uLL);
        int16x8_t v75 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v71, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v162.val[0] = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v74, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v75, v51)), 6uLL);
        v162.val[1] = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v75, v52), vqaddq_s16(vqdmulhq_lane_s16(v73, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v74, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        v162.val[2] = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v73, v50), vqaddq_s16(v75, v53)), v73), 6uLL);
        uint8x8_t v76 = &a7[v70 & 0xFFFFFFFB];
        vst3_s8(v76, v162);
        uint64_t v55 = 8;
        char v67 = 0;
      }
      while ((v69 & 1) != 0);
      if (a2)
      {
        uint64_t v77 = 0;
        char v78 = 1;
        do
        {
          char v79 = v78;
          int v80 = 3 * (v77 | v68);
          uint8x8_t v81 = *(uint8x8_t *)&a2[v68 + v77];
          int8x8_t v82 = (uint8x8_t *)&v157[v77 - 16];
          int16x8_t v83 = (int16x8_t)vshll_n_u8(*v82, 7uLL);
          int16x8_t v84 = (int16x8_t)vshll_n_u8(v82[2], 7uLL);
          int16x8_t v85 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v81, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v163.val[0] = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v84, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v85, v51)), 6uLL);
          v163.val[1] = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v85, v52), vqaddq_s16(vqdmulhq_lane_s16(v83, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v84, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          v163.val[2] = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v83, v50), vqaddq_s16(v85, v53)), v83), 6uLL);
          char v86 = &a8[v80 & 0xFFFFFFFB];
          vst3_s8(v86, v163);
          uint64_t v77 = 8;
          char v78 = 0;
        }
        while ((v79 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v47;
    }
    while (v47 != v54);
  }
  memset(v153, 0, 9);
  memset(v152, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  size_t v87 = 9 - (int)v150;
  memset((char *)v153 + (int)v150, v153[0].u8[(void)(v150 - 1)], v87);
  memset((char *)v152 + (int)v150, v152[0].u8[(void)(v150 - 1)], v87);
  uint8x8_t v88 = *(uint8x8_t *)((char *)v152 + 1);
  int16x8_t v89 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v152 + 1), v153[0]);
  int16x8_t v90 = (int16x8_t)vaddl_u8(v152[0], *(uint8x8_t *)((char *)v153 + 1));
  int16x8_t v91 = vaddq_s16(v89, v90);
  *(int8x8_t *)v89.i8 = vshrn_n_s16(vaddq_s16(v91, vaddq_s16(v89, v89)), 3uLL);
  *(int8x8_t *)v90.i8 = vshrn_n_s16(vaddq_s16(v91, vaddq_s16(v90, v90)), 3uLL);
  *(uint8x8_t *)v91.i8 = vrhadd_u8(v153[0], *(uint8x8_t *)v90.i8);
  uint8x8_t v92 = vrhadd_u8(*(uint8x8_t *)((char *)v153 + 1), *(uint8x8_t *)v89.i8);
  v159.val[0] = (int8x8_t)vrhadd_u8(v152[0], *(uint8x8_t *)v89.i8);
  int8x8_t v93 = (char *)&v154;
  vst2_s8(v93, (int8x8x2_t)v91);
  v159.val[1] = (int8x8_t)vrhadd_u8(v88, *(uint8x8_t *)v90.i8);
  int8x8_t v95 = (char *)&v156;
  vst2_s8(v95, v159);
  memset(v153, 0, 9);
  memset(v152, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v153 + (int)v150, v153[0].u8[(void)(v150 - 1)], v87);
  uint64_t result = (uint64_t)memset((char *)v152 + (int)v150, v152[0].u8[(void)(v150 - 1)], v87);
  uint8x8_t v97 = *(uint8x8_t *)((char *)v152 + 1);
  int16x8_t v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v152 + 1), v153[0]);
  int16x8_t v99 = (int16x8_t)vaddl_u8(v152[0], *(uint8x8_t *)((char *)v153 + 1));
  int16x8_t v100 = vaddq_s16(v98, v99);
  *(int8x8_t *)v98.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v98, v98)), 3uLL);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v99, v99)), 3uLL);
  *(uint8x8_t *)v100.i8 = vrhadd_u8(v153[0], *(uint8x8_t *)v99.i8);
  uint8x8_t v101 = vrhadd_u8(*(uint8x8_t *)((char *)v153 + 1), *(uint8x8_t *)v98.i8);
  v160.val[0] = (int8x8_t)vrhadd_u8(v152[0], *(uint8x8_t *)v98.i8);
  int8x8_t v94 = (char *)&v155;
  vst2_s8(v94, (int8x8x2_t)v100);
  v160.val[1] = (int8x8_t)vrhadd_u8(v97, *(uint8x8_t *)v99.i8);
  uint8x8_t v102 = v157;
  vst2_s8(v102, v160);
  uint64_t v103 = (a9 - v151);
  if ((int)v103 >= 1)
  {
    uint64_t v104 = &a1[(int)v151];
    int v105 = 16 * v16;
    std::string::size_type v106 = (unsigned __int8 *)&v155;
    uint8x8_t v107 = &a7[48 * v16 + 5];
    uint64_t result = 255;
    uint64_t v108 = (a9 - v151);
    do
    {
      int v110 = *v104++;
      int v109 = v110;
      int v111 = *(v106 - 16);
      int v113 = *v106++;
      int v112 = v113;
      unsigned int v114 = 19077 * v109;
      unsigned int v115 = ((26149 * v113) >> 8) + (v114 >> 8);
      unsigned int v116 = v115 - 14234;
      unsigned int v117 = (v115 - 14234) >> 6;
      if (v115 >= 0x379A) {
        char v118 = -1;
      }
      else {
        char v118 = 0;
      }
      if (v116 < 0x4000) {
        char v118 = v117;
      }
      *(v107 - 2) = v118;
      signed int v119 = (v114 >> 8) - (((6419 * v111) >> 8) + ((13320 * v112) >> 8));
      unsigned int v120 = v119 + 8708;
      unsigned int v121 = (v119 + 8708) >> 6;
      if (v119 >= -8708) {
        char v122 = -1;
      }
      else {
        char v122 = 0;
      }
      if (v120 < 0x4000) {
        char v122 = v121;
      }
      *(v107 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v122;
      unsigned int v123 = ((33050 * v111) >> 8) + (v114 >> 8);
      unsigned int v124 = v123 - 17685;
      unsigned int v125 = (v123 - 17685) >> 6;
      if (v123 >= 0x4515) {
        char v126 = -1;
      }
      else {
        char v126 = 0;
      }
      if (v124 < 0x4000) {
        char v126 = v125;
      }
      *uint8x8_t v107 = v126;
      v107 += 3;
      --v108;
    }
    while (v108);
    if (a2)
    {
      uint64_t v127 = 3 * v105;
      char v128 = &a2[(int)v151];
      signed int v129 = v157;
      unsigned int v130 = &a8[v127 + 5];
      uint64_t result = 13320;
      do
      {
        int v132 = *v128++;
        int v131 = v132;
        int v133 = *(v129 - 16);
        int v135 = *v129++;
        int v134 = v135;
        unsigned int v136 = 19077 * v131;
        unsigned int v137 = ((26149 * v135) >> 8) + (v136 >> 8);
        unsigned int v138 = v137 - 14234;
        unsigned int v139 = (v137 - 14234) >> 6;
        if (v137 >= 0x379A) {
          char v140 = -1;
        }
        else {
          char v140 = 0;
        }
        if (v138 < 0x4000) {
          char v140 = v139;
        }
        *(v130 - 2) = v140;
        signed int v141 = (v136 >> 8) - (((6419 * v133) >> 8) + ((13320 * v134) >> 8));
        unsigned int v142 = v141 + 8708;
        unsigned int v143 = (v141 + 8708) >> 6;
        if (v141 >= -8708) {
          char v144 = -1;
        }
        else {
          char v144 = 0;
        }
        if (v142 < 0x4000) {
          char v144 = v143;
        }
        *(v130 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v144;
        unsigned int v145 = ((33050 * v133) >> 8) + (v136 >> 8);
        unsigned int v146 = v145 - 17685;
        unsigned int v147 = (v145 - 17685) >> 6;
        if (v145 >= 0x4515) {
          char v148 = -1;
        }
        else {
          char v148 = 0;
        }
        if (v146 < 0x4000) {
          char v148 = v147;
        }
        *unsigned int v130 = v148;
        v130 += 3;
        --v103;
      }
      while (v103);
    }
  }
  return result;
}

uint64_t UpsampleBgrLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned char *a7, char *a8, int a9)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  long long v156 = 0u;
  memset(v157, 0, 31);
  long long v154 = 0u;
  long long v155 = 0u;
  if (!a1) {
    UpsampleBgrLinePair_NEON_cold_1();
  }
  uint64_t v11 = a6;
  int v12 = a5;
  int v13 = a4;
  uint64_t v15 = (uint64_t)(a9 + 1) >> 1;
  int v16 = ((int)v15 - 1) >> 3;
  char v150 = (unsigned __int8 *)(v15 - ((v15 - 1) & 0xFFFFFFFFFFFFFFF8));
  LODWORD(v15) = *a3;
  unsigned int v17 = ((*a5 + v15) >> 1) + 1;
  int v18 = *a4;
  unsigned int v19 = ((*a6 + v18) >> 1) + 1;
  unsigned int v20 = (v17 + v15) >> 1;
  unsigned int v21 = (v19 + v18) >> 1;
  unsigned int v22 = (19077 * *a1) >> 8;
  unsigned int v23 = v22 + ((33050 * v20) >> 8);
  if (v23 >= 0x4515) {
    char v24 = -1;
  }
  else {
    char v24 = 0;
  }
  if (v23 - 17685 >= 0x4000) {
    char v25 = v24;
  }
  else {
    char v25 = (v23 - 17685) >> 6;
  }
  *a7 = v25;
  int v26 = v22 - (((13320 * v21) >> 8) + ((6419 * v20) >> 8));
  unsigned int v27 = v26 + 8708;
  unsigned int v28 = (v26 + 8708) >> 6;
  if (v26 >= -8708) {
    char v29 = -1;
  }
  else {
    char v29 = 0;
  }
  if (v27 < 0x4000) {
    char v29 = v28;
  }
  a7[1] = v29;
  unsigned int v30 = v22 + ((26149 * v21) >> 8);
  unsigned int v31 = v30 - 14234;
  unsigned int v32 = (v30 - 14234) >> 6;
  if (v30 >= 0x379A) {
    char v33 = -1;
  }
  else {
    char v33 = 0;
  }
  if (v31 < 0x4000) {
    char v33 = v32;
  }
  a7[2] = v33;
  if (a2)
  {
    unsigned int v34 = (v17 + *v12) >> 1;
    unsigned int v35 = (v19 + *v11) >> 1;
    unsigned int v36 = 19077 * *a2;
    unsigned int v37 = ((33050 * v34) >> 8) + (v36 >> 8);
    unsigned int v38 = v37 - 17685;
    unsigned int v39 = (v37 - 17685) >> 6;
    if (v37 >= 0x4515) {
      char v40 = -1;
    }
    else {
      char v40 = 0;
    }
    if (v38 < 0x4000) {
      char v40 = v39;
    }
    *a8 = v40;
    signed int v41 = (v36 >> 8) - (((6419 * v34) >> 8) + ((13320 * v35) >> 8));
    unsigned int v42 = v41 + 8708;
    unsigned int v43 = (v41 + 8708) >> 6;
    if (v41 >= -8708) {
      char v44 = -1;
    }
    else {
      char v44 = 0;
    }
    if (v42 < 0x4000) {
      char v44 = v43;
    }
    a8[1] = v44;
    unsigned int v45 = ((26149 * v35) >> 8) + (v36 >> 8);
    if (v45 >= 0x379A) {
      char v46 = -1;
    }
    else {
      char v46 = 0;
    }
    if (v45 - 14234 < 0x4000) {
      char v46 = (v45 - 14234) >> 6;
    }
    a8[2] = v46;
  }
  uint64_t v151 = (16 * v16) | 1u;
  if (a9 >= 17)
  {
    uint64_t v47 = 0;
    int16x8_t v50 = vdupq_n_s16(0x11Au);
    int16x8_t v51 = vdupq_n_s16(0xC866u);
    int16x8_t v52 = vdupq_n_s16(0x2204u);
    int16x8_t v53 = vdupq_n_s16(0xBAEBu);
    if (v16 <= 1) {
      uint64_t v54 = 1;
    }
    else {
      uint64_t v54 = v16;
    }
    do
    {
      uint64_t v55 = 0;
      uint8x8_t v56 = *(uint8x8_t *)(a3 + 1);
      uint8x8_t v57 = *(uint8x8_t *)(v12 + 1);
      int16x8_t v58 = (int16x8_t)vaddl_u8(v57, *(uint8x8_t *)a3);
      int16x8_t v59 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v56);
      int16x8_t v60 = vaddq_s16(v58, v59);
      *(int8x8_t *)v58.i8 = vshrn_n_s16(vaddq_s16(v60, vaddq_s16(v58, v58)), 3uLL);
      *(int8x8_t *)v59.i8 = vshrn_n_s16(vaddq_s16(v60, vaddq_s16(v59, v59)), 3uLL);
      *(uint8x8_t *)v60.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v59.i8);
      uint8x8_t v61 = vrhadd_u8(v56, *(uint8x8_t *)v58.i8);
      v161.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v58.i8);
      v161.val[1] = (int8x8_t)vrhadd_u8(v57, *(uint8x8_t *)v59.i8);
      vst2_s8((char *)&v154, (int8x8x2_t)v60);
      vst2_s8((char *)&v156, v161);
      v161.val[1] = *(int8x8_t *)(v13 + 1);
      uint8x8_t v62 = *(uint8x8_t *)(v11 + 1);
      int16x8_t v63 = (int16x8_t)vaddl_u8(v62, *(uint8x8_t *)v13);
      int16x8_t v64 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v161.val[1]);
      int16x8_t v65 = vaddq_s16(v63, v64);
      *(int8x8_t *)v63.i8 = vshrn_n_s16(vaddq_s16(v65, vaddq_s16(v63, v63)), 3uLL);
      *(int8x8_t *)v64.i8 = vshrn_n_s16(vaddq_s16(v65, vaddq_s16(v64, v64)), 3uLL);
      *(uint8x8_t *)v65.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v64.i8);
      uint8x8_t v66 = vrhadd_u8((uint8x8_t)v161.val[1], *(uint8x8_t *)v63.i8);
      v161.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v63.i8);
      unsigned int v48 = (char *)&v155;
      vst2_s8(v48, (int8x8x2_t)v65);
      v161.val[1] = (int8x8_t)vrhadd_u8(v62, *(uint8x8_t *)v64.i8);
      unsigned int v49 = v157;
      vst2_s8(v49, v161);
      char v67 = 1;
      uint64_t v68 = (16 * v47) | 1;
      do
      {
        char v69 = v67;
        int v70 = 3 * (v55 | v68);
        uint8x8_t v71 = *(uint8x8_t *)&a1[v68 + v55];
        uint8x8_t v72 = (uint8x8_t *)((char *)&v154 + v55);
        int16x8_t v73 = (int16x8_t)vshll_n_u8(*v72, 7uLL);
        int16x8_t v74 = (int16x8_t)vshll_n_u8(v72[2], 7uLL);
        int16x8_t v75 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v71, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v162.val[2] = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v74, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v75, v51)), 6uLL);
        v162.val[1] = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v75, v52), vqaddq_s16(vqdmulhq_lane_s16(v73, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v74, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        v162.val[0] = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v73, v50), vqaddq_s16(v75, v53)), v73), 6uLL);
        uint8x8_t v76 = &a7[v70 & 0xFFFFFFFB];
        vst3_s8(v76, v162);
        uint64_t v55 = 8;
        char v67 = 0;
      }
      while ((v69 & 1) != 0);
      if (a2)
      {
        uint64_t v77 = 0;
        char v78 = 1;
        do
        {
          char v79 = v78;
          int v80 = 3 * (v77 | v68);
          uint8x8_t v81 = *(uint8x8_t *)&a2[v68 + v77];
          int8x8_t v82 = (uint8x8_t *)&v157[v77 - 16];
          int16x8_t v83 = (int16x8_t)vshll_n_u8(*v82, 7uLL);
          int16x8_t v84 = (int16x8_t)vshll_n_u8(v82[2], 7uLL);
          int16x8_t v85 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v81, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v163.val[2] = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v84, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v85, v51)), 6uLL);
          v163.val[1] = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v85, v52), vqaddq_s16(vqdmulhq_lane_s16(v83, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v84, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          v163.val[0] = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v83, v50), vqaddq_s16(v85, v53)), v83), 6uLL);
          char v86 = &a8[v80 & 0xFFFFFFFB];
          vst3_s8(v86, v163);
          uint64_t v77 = 8;
          char v78 = 0;
        }
        while ((v79 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v47;
    }
    while (v47 != v54);
  }
  memset(v153, 0, 9);
  memset(v152, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  size_t v87 = 9 - (int)v150;
  memset((char *)v153 + (int)v150, v153[0].u8[(void)(v150 - 1)], v87);
  memset((char *)v152 + (int)v150, v152[0].u8[(void)(v150 - 1)], v87);
  uint8x8_t v88 = *(uint8x8_t *)((char *)v152 + 1);
  int16x8_t v89 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v152 + 1), v153[0]);
  int16x8_t v90 = (int16x8_t)vaddl_u8(v152[0], *(uint8x8_t *)((char *)v153 + 1));
  int16x8_t v91 = vaddq_s16(v89, v90);
  *(int8x8_t *)v89.i8 = vshrn_n_s16(vaddq_s16(v91, vaddq_s16(v89, v89)), 3uLL);
  *(int8x8_t *)v90.i8 = vshrn_n_s16(vaddq_s16(v91, vaddq_s16(v90, v90)), 3uLL);
  *(uint8x8_t *)v91.i8 = vrhadd_u8(v153[0], *(uint8x8_t *)v90.i8);
  uint8x8_t v92 = vrhadd_u8(*(uint8x8_t *)((char *)v153 + 1), *(uint8x8_t *)v89.i8);
  v159.val[0] = (int8x8_t)vrhadd_u8(v152[0], *(uint8x8_t *)v89.i8);
  int8x8_t v93 = (char *)&v154;
  vst2_s8(v93, (int8x8x2_t)v91);
  v159.val[1] = (int8x8_t)vrhadd_u8(v88, *(uint8x8_t *)v90.i8);
  int8x8_t v95 = (char *)&v156;
  vst2_s8(v95, v159);
  memset(v153, 0, 9);
  memset(v152, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v153 + (int)v150, v153[0].u8[(void)(v150 - 1)], v87);
  uint64_t result = (uint64_t)memset((char *)v152 + (int)v150, v152[0].u8[(void)(v150 - 1)], v87);
  uint8x8_t v97 = *(uint8x8_t *)((char *)v152 + 1);
  int16x8_t v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v152 + 1), v153[0]);
  int16x8_t v99 = (int16x8_t)vaddl_u8(v152[0], *(uint8x8_t *)((char *)v153 + 1));
  int16x8_t v100 = vaddq_s16(v98, v99);
  *(int8x8_t *)v98.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v98, v98)), 3uLL);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v99, v99)), 3uLL);
  *(uint8x8_t *)v100.i8 = vrhadd_u8(v153[0], *(uint8x8_t *)v99.i8);
  uint8x8_t v101 = vrhadd_u8(*(uint8x8_t *)((char *)v153 + 1), *(uint8x8_t *)v98.i8);
  v160.val[0] = (int8x8_t)vrhadd_u8(v152[0], *(uint8x8_t *)v98.i8);
  int8x8_t v94 = (char *)&v155;
  vst2_s8(v94, (int8x8x2_t)v100);
  v160.val[1] = (int8x8_t)vrhadd_u8(v97, *(uint8x8_t *)v99.i8);
  uint8x8_t v102 = v157;
  vst2_s8(v102, v160);
  uint64_t v103 = (a9 - v151);
  if ((int)v103 >= 1)
  {
    uint64_t v104 = &a1[(int)v151];
    int v105 = 16 * v16;
    std::string::size_type v106 = (unsigned __int8 *)&v155;
    uint8x8_t v107 = &a7[48 * v16 + 5];
    uint64_t result = 255;
    uint64_t v108 = (a9 - v151);
    do
    {
      int v110 = *v104++;
      int v109 = v110;
      int v111 = *(v106 - 16);
      int v113 = *v106++;
      int v112 = v113;
      unsigned int v114 = 19077 * v109;
      unsigned int v115 = ((33050 * v111) >> 8) + (v114 >> 8);
      unsigned int v116 = v115 - 17685;
      unsigned int v117 = (v115 - 17685) >> 6;
      if (v115 >= 0x4515) {
        char v118 = -1;
      }
      else {
        char v118 = 0;
      }
      if (v116 < 0x4000) {
        char v118 = v117;
      }
      *(v107 - 2) = v118;
      signed int v119 = (v114 >> 8) - (((6419 * v111) >> 8) + ((13320 * v112) >> 8));
      unsigned int v120 = v119 + 8708;
      unsigned int v121 = (v119 + 8708) >> 6;
      if (v119 >= -8708) {
        char v122 = -1;
      }
      else {
        char v122 = 0;
      }
      if (v120 < 0x4000) {
        char v122 = v121;
      }
      *(v107 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v122;
      unsigned int v123 = ((26149 * v112) >> 8) + (v114 >> 8);
      unsigned int v124 = v123 - 14234;
      unsigned int v125 = (v123 - 14234) >> 6;
      if (v123 >= 0x379A) {
        char v126 = -1;
      }
      else {
        char v126 = 0;
      }
      if (v124 < 0x4000) {
        char v126 = v125;
      }
      *uint8x8_t v107 = v126;
      v107 += 3;
      --v108;
    }
    while (v108);
    if (a2)
    {
      uint64_t v127 = 3 * v105;
      char v128 = &a2[(int)v151];
      signed int v129 = v157;
      unsigned int v130 = &a8[v127 + 5];
      uint64_t result = 13320;
      do
      {
        int v132 = *v128++;
        int v131 = v132;
        int v133 = *(v129 - 16);
        int v135 = *v129++;
        int v134 = v135;
        unsigned int v136 = 19077 * v131;
        unsigned int v137 = ((33050 * v133) >> 8) + (v136 >> 8);
        unsigned int v138 = v137 - 17685;
        unsigned int v139 = (v137 - 17685) >> 6;
        if (v137 >= 0x4515) {
          char v140 = -1;
        }
        else {
          char v140 = 0;
        }
        if (v138 < 0x4000) {
          char v140 = v139;
        }
        *(v130 - 2) = v140;
        signed int v141 = (v136 >> 8) - (((6419 * v133) >> 8) + ((13320 * v134) >> 8));
        unsigned int v142 = v141 + 8708;
        unsigned int v143 = (v141 + 8708) >> 6;
        if (v141 >= -8708) {
          char v144 = -1;
        }
        else {
          char v144 = 0;
        }
        if (v142 < 0x4000) {
          char v144 = v143;
        }
        *(v130 - std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__clear[abi:ne180100]((uint64_t *)this + 1) = v144;
        unsigned int v145 = ((26149 * v134) >> 8) + (v136 >> 8);
        unsigned int v146 = v145 - 14234;
        unsigned int v147 = (v145 - 14234) >> 6;
        if (v145 >= 0x379A) {
          char v148 = -1;
        }
        else {
          char v148 = 0;
        }
        if (v146 < 0x4000) {
          char v148 = v147;
        }
        *unsigned int v130 = v148;
        v130 += 3;
        --v103;
      }
      while (v103);
    }
  }
  return result;
}