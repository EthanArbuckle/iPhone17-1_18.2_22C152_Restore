uint64_t UpsampleArgbLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned char *a7, unsigned char *a8, int a9)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  signed int v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8x8_t v63;
  uint8x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  uint8x8_t v68;
  uint8x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  uint8x8_t v73;
  char v74;
  uint64_t v75;
  int v76;
  uint8x8_t v77;
  uint8x8_t *v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int8x8_t v82;
  int8x8_t v83;
  int8x8_t v84;
  char *v85;
  uint64_t v86;
  char v87;
  int v88;
  uint8x8_t v89;
  uint8x8_t *v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  char *v97;
  size_t v98;
  uint8x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  uint8x8_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t result;
  uint8x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  uint8x8_t v112;
  char *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned char *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  char v129;
  signed int v130;
  unsigned int v131;
  unsigned int v132;
  char v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  char v137;
  unsigned __int8 *v138;
  int v139;
  unsigned __int8 *v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  unsigned char *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  signed int v152;
  unsigned int v153;
  unsigned int v154;
  char v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  int v162;
  int v163;
  uint8x8_t v164[2];
  uint8x8_t v165[2];
  long long v166;
  long long v167;
  long long v168;
  unsigned char v169[32];
  uint64_t v170;
  int8x8x2_t v171;
  int8x8x2_t v172;
  int8x8x2_t v173;

  v170 = *MEMORY[0x1E4F143B8];
  v168 = 0u;
  memset(v169, 0, 31);
  v166 = 0u;
  v167 = 0u;
  if (!a1) {
    UpsampleArgbLinePair_NEON_cold_1();
  }
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v16 = (uint64_t)(a9 + 1) >> 1;
  v17 = ((int)v16 - 1) >> 3;
  v161 = (unsigned __int8 *)(v16 - ((v16 - 1) & 0xFFFFFFFFFFFFFFF8));
  v18 = *a3;
  v19 = ((*a5 + v18) >> 1) + 1;
  v20 = *a4;
  v21 = ((*a6 + v20) >> 1) + 1;
  v22 = (v19 + v18) >> 1;
  v23 = (v21 + v20) >> 1;
  v24 = *a1;
  *a7 = -1;
  v25 = (19077 * v24) >> 8;
  v26 = v25 + ((26149 * v23) >> 8);
  v27 = v26 - 14234;
  v28 = (v26 - 14234) >> 6;
  if (v26 >= 0x379A) {
    v29 = -1;
  }
  else {
    v29 = 0;
  }
  if (v27 < 0x4000) {
    v29 = v28;
  }
  a7[1] = v29;
  v30 = v25 - (((13320 * v23) >> 8) + ((6419 * v22) >> 8));
  v31 = v30 + 8708;
  v32 = (v30 + 8708) >> 6;
  if (v30 >= -8708) {
    v33 = -1;
  }
  else {
    v33 = 0;
  }
  if (v31 < 0x4000) {
    v33 = v32;
  }
  a7[2] = v33;
  v34 = v25 + ((33050 * v22) >> 8);
  v35 = v34 - 17685;
  v36 = (v34 - 17685) >> 6;
  if (v34 >= 0x4515) {
    v37 = -1;
  }
  else {
    v37 = 0;
  }
  if (v35 < 0x4000) {
    v37 = v36;
  }
  a7[3] = v37;
  if (a2)
  {
    v38 = (v19 + *v12) >> 1;
    v39 = (v21 + *v11) >> 1;
    v40 = *a2;
    *a8 = -1;
    v41 = 19077 * v40;
    v42 = ((26149 * v39) >> 8) + ((19077 * v40) >> 8);
    v43 = v42 - 14234;
    v44 = (v42 - 14234) >> 6;
    if (v42 >= 0x379A) {
      v45 = -1;
    }
    else {
      v45 = 0;
    }
    if (v43 < 0x4000) {
      v45 = v44;
    }
    a8[1] = v45;
    v46 = (v41 >> 8) - (((6419 * v38) >> 8) + ((13320 * v39) >> 8));
    v47 = v46 + 8708;
    v48 = (v46 + 8708) >> 6;
    if (v46 >= -8708) {
      v49 = -1;
    }
    else {
      v49 = 0;
    }
    if (v47 < 0x4000) {
      v49 = v48;
    }
    a8[2] = v49;
    v50 = ((33050 * v38) >> 8) + (v41 >> 8);
    if (v50 >= 0x4515) {
      v51 = -1;
    }
    else {
      v51 = 0;
    }
    if (v50 - 17685 < 0x4000) {
      v51 = (v50 - 17685) >> 6;
    }
    a8[3] = v51;
  }
  v162 = (16 * v17) | 1;
  if (a9 >= 17)
  {
    v52 = 0;
    v55 = vdupq_n_s16(0x11Au);
    v56 = vdupq_n_s16(0xC866u);
    v57 = vdupq_n_s16(0x2204u);
    v58 = vdupq_n_s16(0xBAEBu);
    if (v17 <= 1) {
      v59 = 1;
    }
    else {
      v59 = v17;
    }
    v60 = -1;
    v61 = -1;
    do
    {
      v62 = 0;
      v63 = *(uint8x8_t *)(a3 + 1);
      v64 = *(uint8x8_t *)(v12 + 1);
      v65 = (int16x8_t)vaddl_u8(v64, *(uint8x8_t *)a3);
      v66 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v63);
      v67 = vaddq_s16(v65, v66);
      *(int8x8_t *)v65.i8 = vshrn_n_s16(vaddq_s16(v67, vaddq_s16(v65, v65)), 3uLL);
      *(int8x8_t *)v66.i8 = vshrn_n_s16(vaddq_s16(v67, vaddq_s16(v66, v66)), 3uLL);
      *(uint8x8_t *)v67.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v66.i8);
      v68 = vrhadd_u8(v63, *(uint8x8_t *)v65.i8);
      v173.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v65.i8);
      v173.val[1] = (int8x8_t)vrhadd_u8(v64, *(uint8x8_t *)v66.i8);
      vst2_s8((char *)&v166, (int8x8x2_t)v67);
      vst2_s8((char *)&v168, v173);
      v173.val[1] = *(int8x8_t *)(v13 + 1);
      v69 = *(uint8x8_t *)(v11 + 1);
      v70 = (int16x8_t)vaddl_u8(v69, *(uint8x8_t *)v13);
      v71 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v173.val[1]);
      v72 = vaddq_s16(v70, v71);
      *(int8x8_t *)v70.i8 = vshrn_n_s16(vaddq_s16(v72, vaddq_s16(v70, v70)), 3uLL);
      *(int8x8_t *)v71.i8 = vshrn_n_s16(vaddq_s16(v72, vaddq_s16(v71, v71)), 3uLL);
      *(uint8x8_t *)v72.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v71.i8);
      v73 = vrhadd_u8((uint8x8_t)v173.val[1], *(uint8x8_t *)v70.i8);
      v173.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v70.i8);
      v53 = (char *)&v167;
      vst2_s8(v53, (int8x8x2_t)v72);
      v173.val[1] = (int8x8_t)vrhadd_u8(v69, *(uint8x8_t *)v71.i8);
      v54 = v169;
      vst2_s8(v54, v173);
      v74 = 1;
      v75 = (16 * v52) | 1;
      do
      {
        v76 = 4 * (v62 | v75);
        v77 = *(uint8x8_t *)&a1[v75 + v62];
        v78 = (uint8x8_t *)((char *)&v166 + v62);
        v79 = (int16x8_t)vshll_n_u8(*v78, 7uLL);
        v80 = (int16x8_t)vshll_n_u8(v78[2], 7uLL);
        v81 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v77, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v82 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v80, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v81, v56)), 6uLL);
        v83 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v81, v57), vqaddq_s16(vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v80, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        v84 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v79, v55), vqaddq_s16(v81, v58)), v79), 6uLL);
        v85 = &a7[v76 & 0xFFFFFFE4];
        vst4_s8(v85, *(int8x8x4_t *)&v61);
        LOBYTE(v76) = v74;
        v62 = 8;
        v74 = 0;
      }
      while ((v76 & 1) != 0);
      if (a2)
      {
        v86 = 0;
        v87 = 1;
        do
        {
          v88 = 4 * (v86 | v75);
          v89 = *(uint8x8_t *)&a2[v75 + v86];
          v90 = (uint8x8_t *)&v169[v86 - 16];
          v91 = (int16x8_t)vshll_n_u8(*v90, 7uLL);
          v92 = (int16x8_t)vshll_n_u8(v90[2], 7uLL);
          v93 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v89, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v94 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v92, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v93, v56)), 6uLL);
          v95 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v93, v57), vqaddq_s16(vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v92, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          v96 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v91, v55), vqaddq_s16(v93, v58)), v91), 6uLL);
          v97 = &a8[v88 & 0xFFFFFFE4];
          vst4_s8(v97, *(int8x8x4_t *)&v60);
          LOBYTE(v88) = v87;
          v86 = 8;
          v87 = 0;
        }
        while ((v88 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v52;
    }
    while (v52 != v59);
  }
  v160 = a1;
  v163 = v17;
  memset(v165, 0, 9);
  memset(v164, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  v98 = 9 - (int)v161;
  memset((char *)v165 + (int)v161, v165[0].u8[(void)(v161 - 1)], v98);
  memset((char *)v164 + (int)v161, v164[0].u8[(void)(v161 - 1)], v98);
  v99 = *(uint8x8_t *)((char *)v164 + 1);
  v100 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v164 + 1), v165[0]);
  v101 = (int16x8_t)vaddl_u8(v164[0], *(uint8x8_t *)((char *)v165 + 1));
  v102 = vaddq_s16(v100, v101);
  *(int8x8_t *)v100.i8 = vshrn_n_s16(vaddq_s16(v102, vaddq_s16(v100, v100)), 3uLL);
  *(int8x8_t *)v101.i8 = vshrn_n_s16(vaddq_s16(v102, vaddq_s16(v101, v101)), 3uLL);
  *(uint8x8_t *)v102.i8 = vrhadd_u8(v165[0], *(uint8x8_t *)v101.i8);
  v103 = vrhadd_u8(*(uint8x8_t *)((char *)v165 + 1), *(uint8x8_t *)v100.i8);
  v171.val[0] = (int8x8_t)vrhadd_u8(v164[0], *(uint8x8_t *)v100.i8);
  v104 = (char *)&v166;
  vst2_s8(v104, (int8x8x2_t)v102);
  v171.val[1] = (int8x8_t)vrhadd_u8(v99, *(uint8x8_t *)v101.i8);
  v106 = (char *)&v168;
  vst2_s8(v106, v171);
  memset(v165, 0, 9);
  memset(v164, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v165 + (int)v161, v165[0].u8[(void)(v161 - 1)], v98);
  result = (uint64_t)memset((char *)v164 + (int)v161, v164[0].u8[(void)(v161 - 1)], v98);
  v108 = *(uint8x8_t *)((char *)v164 + 1);
  v109 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v164 + 1), v165[0]);
  v110 = (int16x8_t)vaddl_u8(v164[0], *(uint8x8_t *)((char *)v165 + 1));
  v111 = vaddq_s16(v109, v110);
  *(int8x8_t *)v109.i8 = vshrn_n_s16(vaddq_s16(v111, vaddq_s16(v109, v109)), 3uLL);
  *(int8x8_t *)v110.i8 = vshrn_n_s16(vaddq_s16(v111, vaddq_s16(v110, v110)), 3uLL);
  *(uint8x8_t *)v111.i8 = vrhadd_u8(v165[0], *(uint8x8_t *)v110.i8);
  v112 = vrhadd_u8(*(uint8x8_t *)((char *)v165 + 1), *(uint8x8_t *)v109.i8);
  v172.val[0] = (int8x8_t)vrhadd_u8(v164[0], *(uint8x8_t *)v109.i8);
  v105 = (char *)&v167;
  vst2_s8(v105, (int8x8x2_t)v111);
  v172.val[1] = (int8x8_t)vrhadd_u8(v108, *(uint8x8_t *)v110.i8);
  v113 = v169;
  vst2_s8(v113, v172);
  v114 = (a9 - v162);
  if ((int)v114 >= 1)
  {
    v115 = (unsigned __int8 *)&v167;
    result = 8708;
    v116 = &v160[v162];
    v117 = (a9 - v162);
    v118 = (v163 << 6) | 4;
    do
    {
      v120 = *v116++;
      v119 = v120;
      v121 = *(v115 - 16);
      v123 = *v115++;
      v122 = v123;
      v124 = &a7[v118];
      *v124 = -1;
      v125 = 19077 * v119;
      v126 = ((26149 * v123) >> 8) + (v125 >> 8);
      v127 = v126 - 14234;
      v128 = (v126 - 14234) >> 6;
      if (v126 >= 0x379A) {
        v129 = -1;
      }
      else {
        v129 = 0;
      }
      if (v127 >= 0x4000) {
        LOBYTE(v128) = v129;
      }
      v124[1] = v128;
      v130 = (v125 >> 8) - (((6419 * v121) >> 8) + ((13320 * v122) >> 8));
      v131 = v130 + 8708;
      v132 = (v130 + 8708) >> 6;
      if (v130 >= -8708) {
        v133 = -1;
      }
      else {
        v133 = 0;
      }
      if (v131 < 0x4000) {
        v133 = v132;
      }
      v124[2] = v133;
      v134 = ((33050 * v121) >> 8) + (v125 >> 8);
      v135 = v134 - 17685;
      v136 = (v134 - 17685) >> 6;
      if (v134 >= 0x4515) {
        v137 = -1;
      }
      else {
        v137 = 0;
      }
      if (v135 < 0x4000) {
        v137 = v136;
      }
      v124[3] = v137;
      v118 += 4;
      --v117;
    }
    while (v117);
    if (a2)
    {
      v138 = v169;
      v139 = (v163 << 6) | 4;
      v140 = &a2[v162];
      result = 13320;
      do
      {
        v142 = *v140++;
        v141 = v142;
        v143 = *(v138 - 16);
        v145 = *v138++;
        v144 = v145;
        v146 = &a8[v139];
        *v146 = -1;
        v147 = 19077 * v141;
        v148 = ((26149 * v145) >> 8) + (v147 >> 8);
        v149 = v148 - 14234;
        v150 = (v148 - 14234) >> 6;
        if (v148 >= 0x379A) {
          v151 = -1;
        }
        else {
          v151 = 0;
        }
        if (v149 < 0x4000) {
          v151 = v150;
        }
        v146[1] = v151;
        v152 = (v147 >> 8) - (((6419 * v143) >> 8) + ((13320 * v144) >> 8));
        v153 = v152 + 8708;
        v154 = (v152 + 8708) >> 6;
        if (v152 >= -8708) {
          v155 = -1;
        }
        else {
          v155 = 0;
        }
        if (v153 < 0x4000) {
          v155 = v154;
        }
        v146[2] = v155;
        v156 = ((33050 * v143) >> 8) + (v147 >> 8);
        v157 = v156 - 17685;
        v158 = (v156 - 17685) >> 6;
        if (v156 >= 0x4515) {
          v159 = -1;
        }
        else {
          v159 = 0;
        }
        if (v157 < 0x4000) {
          v159 = v158;
        }
        v146[3] = v159;
        v139 += 4;
        --v114;
      }
      while (v114);
    }
  }
  return result;
}

uint64_t UpsampleRgb565LinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned char *a7, unsigned char *a8, int a9)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  long long v166 = 0u;
  memset(v167, 0, 31);
  long long v164 = 0u;
  long long v165 = 0u;
  if (!a1) {
    UpsampleRgb565LinePair_NEON_cold_1();
  }
  v11 = a6;
  v12 = a5;
  v13 = a4;
  uint64_t v15 = (uint64_t)(a9 + 1) >> 1;
  int v16 = v15 - 1;
  v160 = (unsigned __int8 *)(v15 - ((v15 - 1) & 0xFFFFFFFFFFFFFFF8));
  int v17 = *a3;
  unsigned int v18 = ((*a5 + v17) >> 1) + 1;
  int v19 = *a4;
  unsigned int v20 = ((*a6 + v19) >> 1) + 1;
  unsigned int v21 = (v18 + v17) >> 1;
  unsigned int v22 = (v20 + v19) >> 1;
  unsigned int v23 = (19077 * *a1) >> 8;
  unsigned int v24 = v23 + ((26149 * v22) >> 8);
  if (v24 >= 0x379A) {
    char v25 = -8;
  }
  else {
    char v25 = 0;
  }
  if (v24 - 14234 >= 0x4000) {
    char v26 = v25;
  }
  else {
    char v26 = (v24 - 14234) >> 6;
  }
  int v27 = v23 - (((13320 * v22) >> 8) + ((6419 * v21) >> 8));
  if (v27 >= -8708) {
    unsigned int v28 = 255;
  }
  else {
    unsigned int v28 = 0;
  }
  if ((v27 + 8708) < 0x4000) {
    unsigned int v28 = (v27 + 8708) >> 6;
  }
  unsigned int v29 = v23 + ((33050 * v21) >> 8);
  unsigned int v30 = v29 - 17685;
  if (v29 >= 0x4515) {
    char v31 = 31;
  }
  else {
    char v31 = 0;
  }
  BOOL v32 = v30 >= 0x4000;
  unsigned int v33 = v30 >> 9;
  if (v32) {
    LOBYTE(v33) = v31;
  }
  *a7 = v26 & 0xF8 | (v28 >> 5);
  int v34 = v16 >> 3;
  a7[1] = (8 * v28) & 0xE0 | v33;
  if (a2)
  {
    unsigned int v35 = (v18 + *a5) >> 1;
    unsigned int v36 = (v20 + *v11) >> 1;
    unsigned int v37 = 19077 * *a2;
    unsigned int v38 = ((26149 * v36) >> 8) + (v37 >> 8);
    unsigned int v39 = v38 - 14234;
    unsigned int v40 = (v38 - 14234) >> 6;
    if (v38 >= 0x379A) {
      char v41 = -8;
    }
    else {
      char v41 = 0;
    }
    if (v39 < 0x4000) {
      char v41 = v40;
    }
    signed int v42 = (v37 >> 8) - (((6419 * v35) >> 8) + ((13320 * v36) >> 8));
    unsigned int v43 = v42 + 8708;
    unsigned int v44 = (v42 + 8708) >> 6;
    if (v42 >= -8708) {
      unsigned int v45 = 255;
    }
    else {
      unsigned int v45 = 0;
    }
    if (v43 < 0x4000) {
      unsigned int v45 = v44;
    }
    unsigned int v46 = ((33050 * v35) >> 8) + (v37 >> 8);
    unsigned int v47 = v46 - 17685;
    unsigned int v48 = (v46 - 17685) >> 9;
    if (v46 >= 0x4515) {
      char v49 = 31;
    }
    else {
      char v49 = 0;
    }
    if (v47 < 0x4000) {
      char v49 = v48;
    }
    *a8 = v41 & 0xF8 | (v45 >> 5);
    a8[1] = (8 * v45) & 0xE0 | v49;
  }
  int v159 = (16 * v34) | 1;
  if (a9 >= 17)
  {
    uint64_t v50 = 0;
    int16x8_t v53 = vdupq_n_s16(0x11Au);
    int16x8_t v54 = vdupq_n_s16(0xC866u);
    int16x8_t v55 = vdupq_n_s16(0x2204u);
    int16x8_t v56 = vdupq_n_s16(0xBAEBu);
    if (v34 <= 1) {
      uint64_t v57 = 1;
    }
    else {
      uint64_t v57 = v34;
    }
    do
    {
      uint64_t v58 = 0;
      uint8x8_t v59 = *(uint8x8_t *)(a3 + 1);
      uint8x8_t v60 = *(uint8x8_t *)(v12 + 1);
      int16x8_t v61 = (int16x8_t)vaddl_u8(v60, *(uint8x8_t *)a3);
      int16x8_t v62 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v59);
      int16x8_t v63 = vaddq_s16(v61, v62);
      *(int8x8_t *)v61.i8 = vshrn_n_s16(vaddq_s16(v63, vaddq_s16(v61, v61)), 3uLL);
      *(int8x8_t *)v62.i8 = vshrn_n_s16(vaddq_s16(v63, vaddq_s16(v62, v62)), 3uLL);
      *(uint8x8_t *)v63.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v62.i8);
      uint8x8_t v64 = vrhadd_u8(v59, *(uint8x8_t *)v61.i8);
      v171.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v61.i8);
      v171.val[1] = (int8x8_t)vrhadd_u8(v60, *(uint8x8_t *)v62.i8);
      vst2_s8((char *)&v164, (int8x8x2_t)v63);
      vst2_s8((char *)&v166, v171);
      v171.val[1] = *(int8x8_t *)(v13 + 1);
      uint8x8_t v65 = *(uint8x8_t *)(v11 + 1);
      int16x8_t v66 = (int16x8_t)vaddl_u8(v65, *(uint8x8_t *)v13);
      int16x8_t v67 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v171.val[1]);
      int16x8_t v68 = vaddq_s16(v66, v67);
      *(int8x8_t *)v66.i8 = vshrn_n_s16(vaddq_s16(v68, vaddq_s16(v66, v66)), 3uLL);
      *(int8x8_t *)v67.i8 = vshrn_n_s16(vaddq_s16(v68, vaddq_s16(v67, v67)), 3uLL);
      *(uint8x8_t *)v68.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v67.i8);
      uint8x8_t v69 = vrhadd_u8((uint8x8_t)v171.val[1], *(uint8x8_t *)v66.i8);
      v171.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v66.i8);
      v51 = (char *)&v165;
      vst2_s8(v51, (int8x8x2_t)v68);
      v171.val[1] = (int8x8_t)vrhadd_u8(v65, *(uint8x8_t *)v67.i8);
      v52 = v167;
      vst2_s8(v52, v171);
      char v70 = 1;
      uint64_t v71 = (16 * v50) | 1;
      do
      {
        char v72 = v70;
        int v73 = 2 * (v58 | v71);
        uint8x8_t v74 = *(uint8x8_t *)&a1[v71 + v58];
        v75 = (uint8x8_t *)((char *)&v164 + v58);
        int16x8_t v76 = (int16x8_t)vshll_n_u8(*v75, 7uLL);
        int16x8_t v77 = (int16x8_t)vshll_n_u8(v75[2], 7uLL);
        int16x8_t v78 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v74, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        int16x8_t v79 = vqdmulhq_lane_s16(v77, (int16x4_t)0x3408191366254A85, 1);
        int16x8_t v80 = vqaddq_s16(v78, v54);
        int16x8_t v81 = vqsubq_s16(vqaddq_s16(v78, v55), vqaddq_s16(vqdmulhq_lane_s16(v76, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v77, (int16x4_t)0x3408191366254A85, 3)));
        int16x8_t v82 = vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v76, v53), vqaddq_s16(v78, v56)), v76);
        *(int8x8_t *)v81.i8 = vqshrun_n_s16(v81, 6uLL);
        *(int8x8_t *)v76.i8 = vsri_n_s8(vqshrun_n_s16(vqaddq_s16(v79, v80), 6uLL), *(int8x8_t *)v81.i8, 5uLL);
        *(int8x8_t *)v81.i8 = vsri_n_s8(vshl_n_s8(*(int8x8_t *)v81.i8, 3uLL), vqshrun_n_s16(v82, 6uLL), 3uLL);
        *(int8x16_t *)&a7[v73 & 0xFFFFFFF2] = vzip1q_s8((int8x16_t)v76, (int8x16_t)v81);
        uint64_t v58 = 8;
        char v70 = 0;
      }
      while ((v72 & 1) != 0);
      if (a2)
      {
        uint64_t v83 = 0;
        char v84 = 1;
        do
        {
          char v85 = v84;
          int v86 = 2 * (v83 | v71);
          uint8x8_t v87 = *(uint8x8_t *)&a2[v71 + v83];
          v88 = (uint8x8_t *)&v167[v83 - 16];
          int16x8_t v89 = (int16x8_t)vshll_n_u8(*v88, 7uLL);
          int16x8_t v90 = (int16x8_t)vshll_n_u8(v88[2], 7uLL);
          int16x8_t v91 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v87, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          int16x8_t v92 = vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 1);
          int16x8_t v93 = vqaddq_s16(v91, v54);
          int16x8_t v94 = vqsubq_s16(vqaddq_s16(v91, v55), vqaddq_s16(vqdmulhq_lane_s16(v89, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 3)));
          int16x8_t v95 = vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v89, v53), vqaddq_s16(v91, v56)), v89);
          *(int8x8_t *)v94.i8 = vqshrun_n_s16(v94, 6uLL);
          *(int8x8_t *)v89.i8 = vsri_n_s8(vqshrun_n_s16(vqaddq_s16(v92, v93), 6uLL), *(int8x8_t *)v94.i8, 5uLL);
          *(int8x8_t *)v94.i8 = vsri_n_s8(vshl_n_s8(*(int8x8_t *)v94.i8, 3uLL), vqshrun_n_s16(v95, 6uLL), 3uLL);
          *(int8x16_t *)&a8[v86 & 0xFFFFFFF2] = vzip1q_s8((int8x16_t)v89, (int8x16_t)v94);
          uint64_t v83 = 8;
          char v84 = 0;
        }
        while ((v85 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v50;
    }
    while (v50 != v57);
  }
  memset(v163, 0, 9);
  memset(v162, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  size_t v96 = 9 - (int)v160;
  memset((char *)v163 + (int)v160, v163[0].u8[(void)(v160 - 1)], v96);
  memset((char *)v162 + (int)v160, v162[0].u8[(void)(v160 - 1)], v96);
  uint8x8_t v97 = *(uint8x8_t *)((char *)v162 + 1);
  int16x8_t v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v162 + 1), v163[0]);
  int16x8_t v99 = (int16x8_t)vaddl_u8(v162[0], *(uint8x8_t *)((char *)v163 + 1));
  int16x8_t v100 = vaddq_s16(v98, v99);
  *(int8x8_t *)v98.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v98, v98)), 3uLL);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v99, v99)), 3uLL);
  *(uint8x8_t *)v100.i8 = vrhadd_u8(v163[0], *(uint8x8_t *)v99.i8);
  uint8x8_t v101 = vrhadd_u8(*(uint8x8_t *)((char *)v163 + 1), *(uint8x8_t *)v98.i8);
  v169.val[0] = (int8x8_t)vrhadd_u8(v162[0], *(uint8x8_t *)v98.i8);
  v102 = (char *)&v164;
  vst2_s8(v102, (int8x8x2_t)v100);
  v169.val[1] = (int8x8_t)vrhadd_u8(v97, *(uint8x8_t *)v99.i8);
  v104 = (char *)&v166;
  vst2_s8(v104, v169);
  memset(v163, 0, 9);
  memset(v162, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v163 + (int)v160, v163[0].u8[(void)(v160 - 1)], v96);
  uint64_t result = (uint64_t)memset((char *)v162 + (int)v160, v162[0].u8[(void)(v160 - 1)], v96);
  uint8x8_t v106 = *(uint8x8_t *)((char *)v162 + 1);
  int16x8_t v107 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v162 + 1), v163[0]);
  int16x8_t v108 = (int16x8_t)vaddl_u8(v162[0], *(uint8x8_t *)((char *)v163 + 1));
  int16x8_t v109 = vaddq_s16(v107, v108);
  *(int8x8_t *)v107.i8 = vshrn_n_s16(vaddq_s16(v109, vaddq_s16(v107, v107)), 3uLL);
  *(int8x8_t *)v108.i8 = vshrn_n_s16(vaddq_s16(v109, vaddq_s16(v108, v108)), 3uLL);
  *(uint8x8_t *)v109.i8 = vrhadd_u8(v163[0], *(uint8x8_t *)v108.i8);
  uint8x8_t v110 = vrhadd_u8(*(uint8x8_t *)((char *)v163 + 1), *(uint8x8_t *)v107.i8);
  v170.val[0] = (int8x8_t)vrhadd_u8(v162[0], *(uint8x8_t *)v107.i8);
  v103 = (char *)&v165;
  vst2_s8(v103, (int8x8x2_t)v109);
  v170.val[1] = (int8x8_t)vrhadd_u8(v106, *(uint8x8_t *)v108.i8);
  v111 = v167;
  vst2_s8(v111, v170);
  uint64_t v112 = (a9 - v159);
  if ((int)v112 >= 1)
  {
    v161 = a2;
    v113 = (unsigned __int8 *)&v165;
    uint64_t result = 8708;
    v114 = &a1[v159];
    uint64_t v115 = (a9 - v159);
    int v116 = (32 * v34) | 2;
    do
    {
      int v118 = *v114++;
      int v117 = v118;
      int v119 = *(v113 - 16);
      int v121 = *v113++;
      int v120 = v121;
      v122 = &a7[v116];
      unsigned int v123 = 19077 * v117;
      unsigned int v124 = ((26149 * v121) >> 8) + (v123 >> 8);
      unsigned int v125 = v124 - 14234;
      unsigned int v126 = (v124 - 14234) >> 6;
      if (v124 >= 0x379A) {
        char v127 = -8;
      }
      else {
        char v127 = 0;
      }
      if (v125 < 0x4000) {
        char v127 = v126;
      }
      signed int v128 = (v123 >> 8) - (((6419 * v119) >> 8) + ((13320 * v120) >> 8));
      unsigned int v129 = v128 + 8708;
      unsigned int v130 = (v128 + 8708) >> 6;
      if (v128 >= -8708) {
        unsigned int v131 = 255;
      }
      else {
        unsigned int v131 = 0;
      }
      if (v129 < 0x4000) {
        unsigned int v131 = v130;
      }
      unsigned int v132 = ((33050 * v119) >> 8) + (v123 >> 8);
      unsigned int v133 = v132 - 17685;
      unsigned int v134 = (v132 - 17685) >> 9;
      if (v132 >= 0x4515) {
        char v135 = 31;
      }
      else {
        char v135 = 0;
      }
      if (v133 < 0x4000) {
        char v135 = v134;
      }
      unsigned char *v122 = v127 & 0xF8 | (v131 >> 5);
      v122[1] = (8 * v131) & 0xE0 | v135;
      v116 += 2;
      --v115;
    }
    while (v115);
    if (v161)
    {
      v136 = v167;
      int v137 = (32 * v34) | 2;
      v138 = &v161[v159];
      uint64_t result = 13320;
      do
      {
        int v140 = *v138++;
        int v139 = v140;
        int v141 = *(v136 - 16);
        int v143 = *v136++;
        int v142 = v143;
        v144 = &a8[v137];
        unsigned int v145 = 19077 * v139;
        unsigned int v146 = ((26149 * v143) >> 8) + (v145 >> 8);
        unsigned int v147 = v146 - 14234;
        unsigned int v148 = (v146 - 14234) >> 6;
        if (v146 >= 0x379A) {
          char v149 = -8;
        }
        else {
          char v149 = 0;
        }
        if (v147 < 0x4000) {
          char v149 = v148;
        }
        signed int v150 = (v145 >> 8) - (((6419 * v141) >> 8) + ((13320 * v142) >> 8));
        unsigned int v151 = v150 + 8708;
        unsigned int v152 = (v150 + 8708) >> 6;
        if (v150 >= -8708) {
          unsigned int v153 = 255;
        }
        else {
          unsigned int v153 = 0;
        }
        if (v151 < 0x4000) {
          unsigned int v153 = v152;
        }
        unsigned int v154 = ((33050 * v141) >> 8) + (v145 >> 8);
        unsigned int v155 = v154 - 17685;
        unsigned int v156 = (v154 - 17685) >> 9;
        if (v154 >= 0x4515) {
          char v157 = 31;
        }
        else {
          char v157 = 0;
        }
        if (v155 < 0x4000) {
          char v157 = v156;
        }
        unsigned char *v144 = v149 & 0xF8 | (v153 >> 5);
        v144[1] = (8 * v153) & 0xE0 | v157;
        v137 += 2;
        --v112;
      }
      while (v112);
    }
  }
  return result;
}

uint64_t UpsampleRgba4444LinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned char *a7, unsigned char *a8, int a9)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  long long v166 = 0u;
  memset(v167, 0, 31);
  long long v164 = 0u;
  long long v165 = 0u;
  if (!a1) {
    UpsampleRgba4444LinePair_NEON_cold_1();
  }
  v11 = a6;
  v12 = a5;
  v13 = a4;
  uint64_t v15 = (uint64_t)(a9 + 1) >> 1;
  int v16 = v15 - 1;
  v160 = (unsigned __int8 *)(v15 - ((v15 - 1) & 0xFFFFFFFFFFFFFFF8));
  int v17 = *a3;
  unsigned int v18 = ((*a5 + v17) >> 1) + 1;
  int v19 = *a4;
  unsigned int v20 = ((*a6 + v19) >> 1) + 1;
  unsigned int v21 = (v18 + v17) >> 1;
  unsigned int v22 = (v20 + v19) >> 1;
  unsigned int v23 = (19077 * *a1) >> 8;
  unsigned int v24 = v23 + ((26149 * v22) >> 8);
  if (v24 >= 0x379A) {
    char v25 = -16;
  }
  else {
    char v25 = 0;
  }
  if (v24 - 14234 >= 0x4000) {
    char v26 = v25;
  }
  else {
    char v26 = (v24 - 14234) >> 6;
  }
  int v27 = v23 - (((13320 * v22) >> 8) + ((6419 * v21) >> 8));
  unsigned int v28 = (v27 + 8708) >> 10;
  if (v27 >= -8708) {
    char v29 = 15;
  }
  else {
    char v29 = 0;
  }
  if ((v27 + 8708) >= 0x4000) {
    LOBYTE(v28) = v29;
  }
  unsigned int v30 = v23 + ((33050 * v21) >> 8);
  BOOL v31 = v30 >= 0x4515;
  unsigned int v32 = v30 - 17685;
  *a7 = v26 & 0xF0 | v28;
  if (v31) {
    char v33 = -16;
  }
  else {
    char v33 = 0;
  }
  BOOL v31 = v32 >= 0x4000;
  unsigned int v34 = v32 >> 6;
  if (!v31) {
    char v33 = v34;
  }
  int v35 = v16 >> 3;
  a7[1] = v33 | 0xF;
  if (a2)
  {
    unsigned int v36 = (v18 + *a5) >> 1;
    unsigned int v37 = (v20 + *v11) >> 1;
    unsigned int v38 = 19077 * *a2;
    unsigned int v39 = ((26149 * v37) >> 8) + (v38 >> 8);
    unsigned int v40 = v39 - 14234;
    unsigned int v41 = (v39 - 14234) >> 6;
    if (v39 >= 0x379A) {
      char v42 = -16;
    }
    else {
      char v42 = 0;
    }
    if (v40 < 0x4000) {
      char v42 = v41;
    }
    signed int v43 = (v38 >> 8) - (((6419 * v36) >> 8) + ((13320 * v37) >> 8));
    unsigned int v44 = v43 + 8708;
    unsigned int v45 = (v43 + 8708) >> 10;
    if (v43 >= -8708) {
      char v46 = 15;
    }
    else {
      char v46 = 0;
    }
    if (v44 < 0x4000) {
      char v46 = v45;
    }
    unsigned int v47 = ((33050 * v36) >> 8) + (v38 >> 8);
    unsigned int v48 = v47 - 17685;
    unsigned int v49 = (v47 - 17685) >> 6;
    if (v47 >= 0x4515) {
      char v50 = -16;
    }
    else {
      char v50 = 0;
    }
    *a8 = v42 & 0xF0 | v46;
    if (v48 < 0x4000) {
      char v50 = v49;
    }
    a8[1] = v50 | 0xF;
  }
  int v159 = (16 * v35) | 1;
  if (a9 >= 17)
  {
    uint64_t v51 = 0;
    int16x8_t v54 = vdupq_n_s16(0x11Au);
    int16x8_t v55 = vdupq_n_s16(0xC866u);
    int16x8_t v56 = vdupq_n_s16(0x2204u);
    int16x8_t v57 = vdupq_n_s16(0xBAEBu);
    if (v35 <= 1) {
      uint64_t v58 = 1;
    }
    else {
      uint64_t v58 = v35;
    }
    do
    {
      uint64_t v59 = 0;
      uint8x8_t v60 = *(uint8x8_t *)(a3 + 1);
      uint8x8_t v61 = *(uint8x8_t *)(v12 + 1);
      int16x8_t v62 = (int16x8_t)vaddl_u8(v61, *(uint8x8_t *)a3);
      int16x8_t v63 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v60);
      int16x8_t v64 = vaddq_s16(v62, v63);
      *(int8x8_t *)v62.i8 = vshrn_n_s16(vaddq_s16(v64, vaddq_s16(v62, v62)), 3uLL);
      *(int8x8_t *)v63.i8 = vshrn_n_s16(vaddq_s16(v64, vaddq_s16(v63, v63)), 3uLL);
      *(uint8x8_t *)v64.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v63.i8);
      uint8x8_t v65 = vrhadd_u8(v60, *(uint8x8_t *)v62.i8);
      v171.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v62.i8);
      v171.val[1] = (int8x8_t)vrhadd_u8(v61, *(uint8x8_t *)v63.i8);
      vst2_s8((char *)&v164, (int8x8x2_t)v64);
      vst2_s8((char *)&v166, v171);
      v171.val[1] = *(int8x8_t *)(v13 + 1);
      uint8x8_t v66 = *(uint8x8_t *)(v11 + 1);
      int16x8_t v67 = (int16x8_t)vaddl_u8(v66, *(uint8x8_t *)v13);
      int16x8_t v68 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v171.val[1]);
      int16x8_t v69 = vaddq_s16(v67, v68);
      *(int8x8_t *)v67.i8 = vshrn_n_s16(vaddq_s16(v69, vaddq_s16(v67, v67)), 3uLL);
      *(int8x8_t *)v68.i8 = vshrn_n_s16(vaddq_s16(v69, vaddq_s16(v68, v68)), 3uLL);
      *(uint8x8_t *)v69.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v68.i8);
      uint8x8_t v70 = vrhadd_u8((uint8x8_t)v171.val[1], *(uint8x8_t *)v67.i8);
      v171.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v67.i8);
      v52 = (char *)&v165;
      vst2_s8(v52, (int8x8x2_t)v69);
      v171.val[1] = (int8x8_t)vrhadd_u8(v66, *(uint8x8_t *)v68.i8);
      int16x8_t v53 = v167;
      vst2_s8(v53, v171);
      char v71 = 1;
      uint64_t v72 = (16 * v51) | 1;
      do
      {
        char v73 = v71;
        int v74 = 2 * (v59 | v72);
        uint8x8_t v75 = *(uint8x8_t *)&a1[v72 + v59];
        int16x8_t v76 = (uint8x8_t *)((char *)&v164 + v59);
        int16x8_t v77 = (int16x8_t)vshll_n_u8(*v76, 7uLL);
        int16x8_t v78 = (int16x8_t)vshll_n_u8(v76[2], 7uLL);
        int16x8_t v79 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v75, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        int16x8_t v80 = vqaddq_s16(v79, v55);
        int16x8_t v81 = vqaddq_s16(v79, v56);
        int16x8_t v82 = vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v77, v54), vqaddq_s16(v79, v57)), v77);
        *(int8x8_t *)v77.i8 = vsri_n_s8(vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v78, (int16x4_t)0x3408191366254A85, 1), v80), 6uLL), vqshrun_n_s16(vqsubq_s16(v81, vqaddq_s16(vqdmulhq_lane_s16(v77, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v78, (int16x4_t)0x3408191366254A85, 3))), 6uLL), 4uLL);
        *(int8x8_t *)v82.i8 = vsri_n_s8(vqshrun_n_s16(v82, 6uLL), (int8x8_t)-1, 4uLL);
        *(int8x16_t *)&a7[v74 & 0xFFFFFFF2] = vzip1q_s8((int8x16_t)v77, (int8x16_t)v82);
        uint64_t v59 = 8;
        char v71 = 0;
      }
      while ((v73 & 1) != 0);
      if (a2)
      {
        uint64_t v83 = 0;
        char v84 = 1;
        do
        {
          char v85 = v84;
          int v86 = 2 * (v83 | v72);
          uint8x8_t v87 = *(uint8x8_t *)&a2[v72 + v83];
          v88 = (uint8x8_t *)&v167[v83 - 16];
          int16x8_t v89 = (int16x8_t)vshll_n_u8(*v88, 7uLL);
          int16x8_t v90 = (int16x8_t)vshll_n_u8(v88[2], 7uLL);
          int16x8_t v91 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v87, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          int16x8_t v92 = vqaddq_s16(v91, v55);
          int16x8_t v93 = vqaddq_s16(v91, v56);
          int16x8_t v94 = vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v89, v54), vqaddq_s16(v91, v57)), v89);
          *(int8x8_t *)v89.i8 = vsri_n_s8(vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 1), v92), 6uLL), vqshrun_n_s16(vqsubq_s16(v93, vqaddq_s16(vqdmulhq_lane_s16(v89, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 3))), 6uLL), 4uLL);
          *(int8x8_t *)v94.i8 = vsri_n_s8(vqshrun_n_s16(v94, 6uLL), (int8x8_t)-1, 4uLL);
          *(int8x16_t *)&a8[v86 & 0xFFFFFFF2] = vzip1q_s8((int8x16_t)v89, (int8x16_t)v94);
          uint64_t v83 = 8;
          char v84 = 0;
        }
        while ((v85 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v51;
    }
    while (v51 != v58);
  }
  memset(v163, 0, 9);
  memset(v162, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  size_t v95 = 9 - (int)v160;
  memset((char *)v163 + (int)v160, v163[0].u8[(void)(v160 - 1)], v95);
  memset((char *)v162 + (int)v160, v162[0].u8[(void)(v160 - 1)], v95);
  uint8x8_t v96 = *(uint8x8_t *)((char *)v162 + 1);
  int16x8_t v97 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v162 + 1), v163[0]);
  int16x8_t v98 = (int16x8_t)vaddl_u8(v162[0], *(uint8x8_t *)((char *)v163 + 1));
  int16x8_t v99 = vaddq_s16(v97, v98);
  *(int8x8_t *)v97.i8 = vshrn_n_s16(vaddq_s16(v99, vaddq_s16(v97, v97)), 3uLL);
  *(int8x8_t *)v98.i8 = vshrn_n_s16(vaddq_s16(v99, vaddq_s16(v98, v98)), 3uLL);
  *(uint8x8_t *)v99.i8 = vrhadd_u8(v163[0], *(uint8x8_t *)v98.i8);
  uint8x8_t v100 = vrhadd_u8(*(uint8x8_t *)((char *)v163 + 1), *(uint8x8_t *)v97.i8);
  v169.val[0] = (int8x8_t)vrhadd_u8(v162[0], *(uint8x8_t *)v97.i8);
  uint8x8_t v101 = (char *)&v164;
  vst2_s8(v101, (int8x8x2_t)v99);
  v169.val[1] = (int8x8_t)vrhadd_u8(v96, *(uint8x8_t *)v98.i8);
  v103 = (char *)&v166;
  vst2_s8(v103, v169);
  memset(v163, 0, 9);
  memset(v162, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v163 + (int)v160, v163[0].u8[(void)(v160 - 1)], v95);
  uint64_t result = (uint64_t)memset((char *)v162 + (int)v160, v162[0].u8[(void)(v160 - 1)], v95);
  uint8x8_t v105 = *(uint8x8_t *)((char *)v162 + 1);
  int16x8_t v106 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v162 + 1), v163[0]);
  int16x8_t v107 = (int16x8_t)vaddl_u8(v162[0], *(uint8x8_t *)((char *)v163 + 1));
  int16x8_t v108 = vaddq_s16(v106, v107);
  *(int8x8_t *)v106.i8 = vshrn_n_s16(vaddq_s16(v108, vaddq_s16(v106, v106)), 3uLL);
  *(int8x8_t *)v107.i8 = vshrn_n_s16(vaddq_s16(v108, vaddq_s16(v107, v107)), 3uLL);
  *(uint8x8_t *)v108.i8 = vrhadd_u8(v163[0], *(uint8x8_t *)v107.i8);
  uint8x8_t v109 = vrhadd_u8(*(uint8x8_t *)((char *)v163 + 1), *(uint8x8_t *)v106.i8);
  v170.val[0] = (int8x8_t)vrhadd_u8(v162[0], *(uint8x8_t *)v106.i8);
  v102 = (char *)&v165;
  vst2_s8(v102, (int8x8x2_t)v108);
  v170.val[1] = (int8x8_t)vrhadd_u8(v105, *(uint8x8_t *)v107.i8);
  uint8x8_t v110 = v167;
  vst2_s8(v110, v170);
  uint64_t v111 = (a9 - v159);
  if ((int)v111 >= 1)
  {
    v161 = a2;
    uint64_t v112 = (unsigned __int8 *)&v165;
    uint64_t result = 8708;
    v113 = &a1[v159];
    uint64_t v114 = (a9 - v159);
    int v115 = (32 * v35) | 2;
    do
    {
      int v117 = *v113++;
      int v116 = v117;
      int v118 = *(v112 - 16);
      int v120 = *v112++;
      int v119 = v120;
      int v121 = &a7[v115];
      unsigned int v122 = 19077 * v116;
      unsigned int v123 = ((26149 * v120) >> 8) + (v122 >> 8);
      unsigned int v124 = v123 - 14234;
      unsigned int v125 = (v123 - 14234) >> 6;
      if (v123 >= 0x379A) {
        char v126 = -16;
      }
      else {
        char v126 = 0;
      }
      if (v124 < 0x4000) {
        char v126 = v125;
      }
      signed int v127 = (v122 >> 8) - (((6419 * v118) >> 8) + ((13320 * v119) >> 8));
      unsigned int v128 = v127 + 8708;
      unsigned int v129 = (v127 + 8708) >> 10;
      if (v127 >= -8708) {
        char v130 = 15;
      }
      else {
        char v130 = 0;
      }
      if (v128 < 0x4000) {
        char v130 = v129;
      }
      unsigned int v131 = ((33050 * v118) >> 8) + (v122 >> 8);
      unsigned int v132 = v131 - 17685;
      unsigned int v133 = (v131 - 17685) >> 6;
      if (v131 >= 0x4515) {
        char v134 = -16;
      }
      else {
        char v134 = 0;
      }
      *int v121 = v126 & 0xF0 | v130;
      if (v132 >= 0x4000) {
        char v135 = v134;
      }
      else {
        char v135 = v133;
      }
      v121[1] = v135 | 0xF;
      v115 += 2;
      --v114;
    }
    while (v114);
    if (v161)
    {
      v136 = v167;
      int v137 = (32 * v35) | 2;
      v138 = &v161[v159];
      uint64_t result = 13320;
      do
      {
        int v140 = *v138++;
        int v139 = v140;
        int v141 = *(v136 - 16);
        int v143 = *v136++;
        int v142 = v143;
        v144 = &a8[v137];
        unsigned int v145 = 19077 * v139;
        unsigned int v146 = ((26149 * v143) >> 8) + (v145 >> 8);
        unsigned int v147 = v146 - 14234;
        unsigned int v148 = (v146 - 14234) >> 6;
        if (v146 >= 0x379A) {
          char v149 = -16;
        }
        else {
          char v149 = 0;
        }
        if (v147 < 0x4000) {
          char v149 = v148;
        }
        signed int v150 = (v145 >> 8) - (((6419 * v141) >> 8) + ((13320 * v142) >> 8));
        unsigned int v151 = v150 + 8708;
        unsigned int v152 = (v150 + 8708) >> 10;
        if (v150 >= -8708) {
          char v153 = 15;
        }
        else {
          char v153 = 0;
        }
        if (v151 < 0x4000) {
          char v153 = v152;
        }
        unsigned int v154 = ((33050 * v141) >> 8) + (v145 >> 8);
        unsigned int v155 = v154 - 17685;
        unsigned int v156 = (v154 - 17685) >> 6;
        if (v154 >= 0x4515) {
          char v157 = -16;
        }
        else {
          char v157 = 0;
        }
        unsigned char *v144 = v149 & 0xF0 | v153;
        if (v155 < 0x4000) {
          char v157 = v156;
        }
        v144[1] = v157 | 0xF;
        v137 += 2;
        --v111;
      }
      while (v111);
    }
  }
  return result;
}

void UpsampleRgbaLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleRgbaLinePair_NEON", "upsampling_neon.c", 246, "top_y != NULL");
}

void UpsampleBgraLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleBgraLinePair_NEON", "upsampling_neon.c", 247, "top_y != NULL");
}

void UpsampleRgbLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleRgbLinePair_NEON", "upsampling_neon.c", 249, "top_y != NULL");
}

void UpsampleBgrLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleBgrLinePair_NEON", "upsampling_neon.c", 250, "top_y != NULL");
}

void UpsampleArgbLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleArgbLinePair_NEON", "upsampling_neon.c", 251, "top_y != NULL");
}

void UpsampleRgb565LinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleRgb565LinePair_NEON", "upsampling_neon.c", 253, "top_y != NULL");
}

void UpsampleRgba4444LinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleRgba4444LinePair_NEON", "upsampling_neon.c", 252, "top_y != NULL");
}

void VP8LDspInitNEON()
{
  qword_1E9105780 = (uint64_t)Predictor5_NEON;
  qword_1E9105788 = (uint64_t)Predictor6_NEON;
  qword_1E9105790 = (uint64_t)Predictor7_NEON;
  qword_1E91057C0 = (uint64_t)Predictor13_NEON;
  VP8LPredictorsAdd = (uint64_t)PredictorAdd0_NEON;
  qword_1E91057E0 = (uint64_t)PredictorAdd1_NEON;
  qword_1E91057E8 = (uint64_t)PredictorAdd2_NEON;
  qword_1E91057F0 = (uint64_t)PredictorAdd3_NEON;
  qword_1E91057F8 = (uint64_t)PredictorAdd4_NEON;
  qword_1E9105800 = (uint64_t)PredictorAdd5_NEON;
  qword_1E9105808 = (uint64_t)PredictorAdd6_NEON;
  qword_1E9105810 = (uint64_t)PredictorAdd7_NEON;
  qword_1E9105818 = (uint64_t)PredictorAdd8_NEON;
  qword_1E9105820 = (uint64_t)PredictorAdd9_NEON;
  qword_1E9105828 = (uint64_t)PredictorAdd10_NEON;
  qword_1E9105830 = (uint64_t)PredictorAdd11_NEON;
  qword_1E9105838 = (uint64_t)PredictorAdd12_NEON;
  qword_1E9105840 = (uint64_t)PredictorAdd13_NEON;
  VP8LConvertBGRAToRGBA = ConvertBGRAToRGBA_NEON;
  VP8LConvertBGRAToBGR = (uint64_t)ConvertBGRAToBGR_NEON;
  VP8LConvertBGRAToRGB = ConvertBGRAToRGB_NEON;
  VP8LAddGreenToBlueAndRed = AddGreenToBlueAndRed_NEON;
  VP8LTransformColorInverse = TransformColorInverse_NEON;
}

float Predictor5_NEON(const float *a1, const float *a2)
{
  uint8x8_t v2 = (uint8x8_t)vld1_dup_f32(a1);
  uint8x8_t v4 = (uint8x8_t)vld1_dup_f32(a2);
  v3 = a2 + 1;
  uint8x8_t v5 = (uint8x8_t)vld1_dup_f32(v3);
  LODWORD(result) = vhadd_u8(vhadd_u8(v2, v5), v4).u32[0];
  return result;
}

float Predictor6_NEON(const float *a1, uint64_t a2)
{
  uint8x8_t v2 = (uint8x8_t)vld1_dup_f32(a1);
  v3 = (const float *)(a2 - 4);
  uint8x8_t v4 = (uint8x8_t)vld1_dup_f32(v3);
  LODWORD(result) = vhadd_u8(v2, v4).u32[0];
  return result;
}

float Predictor7_NEON(const float *a1, const float *a2)
{
  uint8x8_t v2 = (uint8x8_t)vld1_dup_f32(a1);
  uint8x8_t v3 = (uint8x8_t)vld1_dup_f32(a2);
  LODWORD(result) = vhadd_u8(v2, v3).u32[0];
  return result;
}

float Predictor13_NEON(const float *a1, const float *a2)
{
  uint8x8_t v2 = (uint8x8_t)vld1_dup_f32(a1);
  uint8x8_t v3 = (uint8x8_t)vld1_dup_f32(a2);
  uint8x8_t v4 = a2 - 1;
  uint8x8_t v5 = vhadd_u8(v2, v3);
  int8x8_t v6 = (int8x8_t)vld1_dup_f32(v4);
  LODWORD(result) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vmovl_s8((int8x8_t)vhsub_u8(v5, (uint8x8_t)vadd_s8((int8x8_t)vcgt_u8((uint8x8_t)v6, v5), v6))), v5)).u32[0];
  return result;
}

uint64_t PredictorAdd0_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  if (a3 >= 4)
  {
    unsigned int v4 = a3 & 0xFFFFFFFC;
    unint64_t v5 = 4;
    v6.i64[0] = 0xFF000000FF000000;
    v6.i64[1] = 0xFF000000FF000000;
    v7 = a1;
    v8 = a4;
    do
    {
      int8x16_t v9 = *v7++;
      *v8++ = vaddq_s8(v9, v6);
      v5 += 4;
    }
    while (v5 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return VP8LPredictorsAdd_C((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd1_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  if (a3 >= 4)
  {
    unsigned int v4 = a3 & 0x7FFFFFFC;
    unint64_t v5 = 4;
    int8x16_t v6 = a1;
    v7 = a4;
    do
    {
      int8x16_t v8 = *v6++;
      int8x16_t v9 = vaddq_s8(vextq_s8((int8x16_t)0, v8, 0xCuLL), v8);
      v10 = (const float *)&v7[-1].i32[3];
      int8x16_t v11 = (int8x16_t)vld1q_dup_f32(v10);
      *v7++ = vaddq_s8(vextq_s8((int8x16_t)0, v9, 8uLL), vaddq_s8(v9, v11));
      v5 += 4;
    }
    while (v5 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E9105860((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd2_NEON(int8x16_t *a1, int8x16_t *a2, int a3, int8x16_t *a4)
{
  if (a3 >= 4)
  {
    unsigned int v4 = a3 & 0xFFFFFFFC;
    unint64_t v5 = 4;
    int8x16_t v6 = a1;
    v7 = a2;
    int8x16_t v8 = a4;
    do
    {
      int8x16_t v9 = *v6++;
      int8x16_t v10 = v9;
      int8x16_t v11 = *v7++;
      *v8++ = vaddq_s8(v11, v10);
      v5 += 4;
    }
    while (v5 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E9105868((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd3_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  if (a3 >= 4)
  {
    unsigned int v4 = a3 & 0xFFFFFFFC;
    unint64_t v5 = (int8x16_t *)(a2 + 4);
    unint64_t v6 = 4;
    v7 = a1;
    int8x16_t v8 = a4;
    do
    {
      int8x16_t v9 = *v7++;
      int8x16_t v10 = v9;
      int8x16_t v11 = *v5++;
      *v8++ = vaddq_s8(v11, v10);
      v6 += 4;
    }
    while (v6 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E9105870((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd4_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  if (a3 >= 4)
  {
    unsigned int v4 = a3 & 0xFFFFFFFC;
    unint64_t v5 = (int8x16_t *)(a2 - 4);
    unint64_t v6 = 4;
    v7 = a1;
    int8x16_t v8 = a4;
    do
    {
      int8x16_t v9 = *v7++;
      int8x16_t v10 = v9;
      int8x16_t v11 = *v5++;
      *v8++ = vaddq_s8(v11, v10);
      v6 += 4;
    }
    while (v6 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E9105878((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd5_NEON(int8x16_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 >= 4)
  {
    unint64_t v5 = (const float *)(a4 - 4);
    uint8x16_t v6 = (uint8x16_t)vld1q_dup_f32(v5);
    unsigned int v4 = a3 & 0xFFFFFFFC;
    v7 = (void *)(a4 + 8);
    int8x16_t v8 = (uint8x16_t *)(a2 + 4);
    unint64_t v9 = 4;
    int8x16_t v10 = a1;
    do
    {
      int8x16_t v11 = *v10++;
      int8x16_t v12 = v11;
      uint8x16_t v13 = *(uint8x16_t *)((char *)v8 - 4);
      uint8x16_t v14 = *v8++;
      int8x16_t v15 = vaddq_s8((int8x16_t)vhaddq_u8(vhaddq_u8(v6, v14), v13), v12);
      int8x16_t v16 = vaddq_s8((int8x16_t)vhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), v14), v13), v12);
      v15.i32[1] = v16.i32[1];
      *(v7 - 1) = v15.i64[0];
      int8x16_t v17 = vaddq_s8((int8x16_t)vhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v14), v13), v12);
      int8x16_t v18 = vaddq_s8((int8x16_t)vhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(v17, v17, 0xCuLL), v14), v13), v12);
      v17.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
      v17.i32[1] = vextq_s8(v18, v18, 8uLL).i32[1];
      void *v7 = v17.i64[0];
      v7 += 2;
      uint8x16_t v6 = (uint8x16_t)vextq_s8(v18, v18, 0xCuLL);
      v9 += 4;
    }
    while (v9 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E9105880((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd6_NEON(int8x16_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 >= 4)
  {
    unint64_t v5 = (const float *)(a4 - 4);
    uint8x16_t v6 = (uint8x16_t)vld1q_dup_f32(v5);
    unsigned int v4 = a3 & 0xFFFFFFFC;
    v7 = (void *)(a4 + 8);
    int8x16_t v8 = (uint8x16_t *)(a2 - 4);
    unint64_t v9 = 4;
    int8x16_t v10 = a1;
    do
    {
      int8x16_t v11 = *v10++;
      int8x16_t v12 = v11;
      uint8x16_t v13 = *v8++;
      int8x16_t v14 = vaddq_s8((int8x16_t)vhaddq_u8(v6, v13), v12);
      int8x16_t v15 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v14, v14, 0xCuLL), v13), v12);
      v14.i32[1] = v15.i32[1];
      int8x16_t v16 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), v13), v12);
      int8x16_t v17 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v13), v12);
      v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
      v16.i32[1] = vextq_s8(v17, v17, 8uLL).i32[1];
      *(v7 - 1) = v14.i64[0];
      void *v7 = v16.i64[0];
      uint8x16_t v6 = (uint8x16_t)vextq_s8(v17, v17, 0xCuLL);
      v9 += 4;
      v7 += 2;
    }
    while (v9 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E9105888((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd7_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, uint64_t a4)
{
  if (a3 >= 4)
  {
    unint64_t v5 = (const float *)(a4 - 4);
    uint8x16_t v6 = (uint8x16_t)vld1q_dup_f32(v5);
    unsigned int v4 = a3 & 0xFFFFFFFC;
    v7 = (void *)(a4 + 8);
    unint64_t v8 = 4;
    unint64_t v9 = a1;
    int8x16_t v10 = a2;
    do
    {
      int8x16_t v11 = *v9++;
      int8x16_t v12 = v11;
      uint8x16_t v13 = *v10++;
      int8x16_t v14 = vaddq_s8((int8x16_t)vhaddq_u8(v6, v13), v12);
      int8x16_t v15 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v14, v14, 0xCuLL), v13), v12);
      v14.i32[1] = v15.i32[1];
      int8x16_t v16 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), v13), v12);
      int8x16_t v17 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v13), v12);
      v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
      v16.i32[1] = vextq_s8(v17, v17, 8uLL).i32[1];
      *(v7 - 1) = v14.i64[0];
      void *v7 = v16.i64[0];
      uint8x16_t v6 = (uint8x16_t)vextq_s8(v17, v17, 0xCuLL);
      v8 += 4;
      v7 += 2;
    }
    while (v8 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E9105890((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd8_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, int8x16_t *a4)
{
  if (a3 >= 4)
  {
    unsigned int v4 = a3 & 0xFFFFFFFC;
    unint64_t v5 = 4;
    uint8x16_t v6 = a1;
    v7 = a2;
    unint64_t v8 = a4;
    do
    {
      int8x16_t v9 = *v6++;
      int8x16_t v10 = v9;
      uint8x16_t v11 = *(uint8x16_t *)((char *)v7 - 4);
      uint8x16_t v12 = *v7++;
      *v8++ = vaddq_s8((int8x16_t)vhaddq_u8(v12, v11), v10);
      v5 += 4;
    }
    while (v5 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E9105898((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd9_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  if (a3 >= 4)
  {
    unsigned int v4 = a3 & 0xFFFFFFFC;
    unint64_t v5 = (uint8x16_t *)(a2 + 4);
    unint64_t v6 = 4;
    v7 = a1;
    unint64_t v8 = a4;
    do
    {
      int8x16_t v9 = *v7++;
      *v8++ = vaddq_s8((int8x16_t)vhaddq_u8(*(uint8x16_t *)((char *)v5 - 4), *v5), v9);
      v6 += 4;
      ++v5;
    }
    while (v6 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E91058A0((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd10_NEON(int8x16_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 >= 4)
  {
    unint64_t v5 = (const float *)(a4 - 4);
    uint8x16_t v6 = (uint8x16_t)vld1q_dup_f32(v5);
    unsigned int v4 = a3 & 0xFFFFFFFC;
    v7 = (void *)(a4 + 8);
    unint64_t v8 = 4;
    int8x16_t v9 = a1;
    uint64_t v10 = a2;
    do
    {
      int8x16_t v11 = *v9++;
      uint8x16_t v12 = *(uint8x16_t *)(v10 - 4);
      uint8x16_t v13 = vhaddq_u8(*(uint8x16_t *)v10, *(uint8x16_t *)(v10 + 4));
      int8x16_t v14 = vaddq_s8((int8x16_t)vhaddq_u8(v13, vhaddq_u8(v6, v12)), v11);
      int8x16_t v15 = vaddq_s8((int8x16_t)vhaddq_u8(v13, vhaddq_u8((uint8x16_t)vextq_s8(v14, v14, 0xCuLL), v12)), v11);
      v14.i32[1] = v15.i32[1];
      *(v7 - 1) = v14.i64[0];
      int8x16_t v16 = vaddq_s8((int8x16_t)vhaddq_u8(v13, vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), v12)), v11);
      int8x16_t v17 = vaddq_s8((int8x16_t)vhaddq_u8(v13, vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v12)), v11);
      v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
      v16.i32[1] = vextq_s8(v17, v17, 8uLL).i32[1];
      void *v7 = v16.i64[0];
      v7 += 2;
      uint8x16_t v6 = (uint8x16_t)vextq_s8(v17, v17, 0xCuLL);
      v8 += 4;
      v10 += 16;
    }
    while (v8 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E91058A8((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd11_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, uint64_t a4)
{
  if (a3 >= 4)
  {
    unint64_t v5 = (const float *)(a4 - 4);
    int8x16_t v6 = (int8x16_t)vld1q_dup_f32(v5);
    unsigned int v4 = a3 & 0xFFFFFFFC;
    v7 = (void *)(a4 + 8);
    unint64_t v8 = 4;
    int8x16_t v9 = a2;
    uint64_t v10 = a1;
    do
    {
      uint8x16_t v11 = *(uint8x16_t *)((char *)v9 - 4);
      int8x16_t v12 = *v10++;
      uint32x4_t v13 = vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v9, v11)));
      int8x16_t v14 = vaddq_s8(v12, *(int8x16_t *)v9);
      int8x16_t v15 = vbslq_s8((int8x16_t)vcgeq_u32(v13, vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v6, v11)))), v14, vaddq_s8(v12, v6));
      int8x16_t v16 = vextq_s8(v15, v15, 0xCuLL);
      int8x16_t v17 = vbslq_s8((int8x16_t)vcgeq_u32(v13, vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v16, v11)))), v14, vaddq_s8(v16, v12));
      v15.i32[1] = v17.i32[1];
      *(v7 - 1) = v15.i64[0];
      int8x16_t v18 = vextq_s8(v17, v17, 0xCuLL);
      int8x16_t v19 = vbslq_s8((int8x16_t)vcgeq_u32(v13, vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v18, v11)))), v14, vaddq_s8(v18, v12));
      int8x16_t v20 = vextq_s8(v19, v19, 0xCuLL);
      int8x16_t v21 = vbslq_s8((int8x16_t)vcgeq_u32(v13, vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v20, v11)))), v14, vaddq_s8(v20, v12));
      v19.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0];
      v19.i32[1] = vextq_s8(v21, v21, 8uLL).i32[1];
      void *v7 = v19.i64[0];
      v7 += 2;
      int8x16_t v6 = vextq_s8(v21, v21, 0xCuLL);
      v8 += 4;
      ++v9;
    }
    while (v8 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E91058B0((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd12_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, uint8x8_t *a4)
{
  if (a3 >= 4)
  {
    unint64_t v5 = (const float *)&a4[-1] + 1;
    uint8x8_t v6 = (uint8x8_t)vld1_dup_f32(v5);
    unsigned int v4 = a3 & 0xFFFFFFFC;
    int16x8_t v7 = (int16x8_t)vmovl_u8(v6);
    unint64_t v8 = a4 + 1;
    unint64_t v9 = 4;
    uint64_t v10 = a1;
    uint8x16_t v11 = a2;
    do
    {
      int8x16_t v12 = *v10++;
      int8x16_t v13 = v12;
      uint8x16_t v14 = *(uint8x16_t *)((char *)v11 - 4);
      uint8x16_t v15 = *v11++;
      int16x8_t v16 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v14.i8);
      int16x8_t v17 = (int16x8_t)vsubl_high_u8(v15, v14);
      uint8x8_t v18 = (uint8x8_t)vadd_s8(vqmovun_s16(vaddq_s16(v16, v7)), *(int8x8_t *)v13.i8);
      int8x16_t v19 = (int8x16_t)vmovl_u8(v18);
      *(int8x8_t *)v19.i8 = vadd_s8(vqmovun_s16(vaddq_s16((int16x8_t)vextq_s8(v19, v19, 8uLL), v16)), *(int8x8_t *)v13.i8);
      int8x16_t v20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v19.i8);
      v18.i32[1] = v19.i32[1];
      v8[-1] = v18;
      v13.i64[0] = vextq_s8(v13, v13, 8uLL).u64[0];
      uint8x8_t v21 = (uint8x8_t)vadd_s8(vqmovun_s16(vaddq_s16((int16x8_t)vextq_s8(v20, v20, 8uLL), v17)), *(int8x8_t *)v13.i8);
      int8x16_t v22 = (int8x16_t)vmovl_u8(v21);
      *(int8x8_t *)v13.i8 = vadd_s8(vqmovun_s16(vaddq_s16((int16x8_t)vextq_s8(v22, v22, 8uLL), v17)), *(int8x8_t *)v13.i8);
      int8x16_t v23 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v13.i8);
      v21.i32[1] = v13.i32[1];
      uint8x8_t *v8 = v21;
      v8 += 2;
      int16x8_t v7 = (int16x8_t)vextq_s8(v23, v23, 8uLL);
      v9 += 4;
    }
    while (v9 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E91058B8((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd13_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, uint64_t a4)
{
  if (a3 >= 4)
  {
    unint64_t v5 = (const float *)(a4 - 4);
    uint8x16_t v6 = (uint8x16_t)vld1q_dup_f32(v5);
    unsigned int v4 = a3 & 0xFFFFFFFC;
    int16x8_t v7 = (void *)(a4 + 8);
    unint64_t v8 = 4;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    do
    {
      int8x16_t v11 = *v9++;
      uint8x16_t v12 = *v10;
      int8x16_t v13 = *(int8x16_t *)((char *)&v10[-1] + 12);
      uint8x16_t v14 = vhaddq_u8(v6, *v10);
      *(int8x8_t *)v14.i8 = vadd_s8(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vmovl_s8((int8x8_t)*(_OWORD *)&vhsubq_u8(v14, (uint8x16_t)vaddq_s8(v13, (int8x16_t)vcgtq_u8((uint8x16_t)v13, v14)))), *(uint8x8_t *)v14.i8)), *(int8x8_t *)v11.i8);
      v15.i64[0] = v14.i64[0];
      v15.i64[1] = v14.i64[0];
      int8x16_t v16 = (int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), *v10);
      *(int8x8_t *)v16.i8 = vadd_s8(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vmovl_s8((int8x8_t)*(_OWORD *)&vhsubq_u8((uint8x16_t)v16, (uint8x16_t)vaddq_s8(v13, (int8x16_t)vcgtq_u8((uint8x16_t)v13, (uint8x16_t)v16)))), *(uint8x8_t *)v16.i8)), *(int8x8_t *)v11.i8);
      v14.i32[1] = v16.i32[1];
      v16.i64[1] = v16.i64[0];
      *(v7 - 1) = v14.i64[0];
      uint8x16_t v17 = vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v12);
      int8x8_t v18 = (int8x8_t)vextq_s8(v11, v11, 8uLL).u64[0];
      *(int8x8_t *)v17.i8 = vadd_s8(vqmovun_s16((int16x8_t)vaddw_high_u8((uint16x8_t)vmovl_high_s8((int8x16_t)vhsubq_u8(v17, (uint8x16_t)vaddq_s8(v13, (int8x16_t)vcgtq_u8((uint8x16_t)v13, v17)))), v17)), v18);
      v16.i64[0] = v17.i64[0];
      v16.i64[1] = v17.i64[0];
      uint8x16_t v19 = vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v12);
      *(int8x8_t *)v20.i8 = vadd_s8(vqmovun_s16((int16x8_t)vaddw_high_u8((uint16x8_t)vmovl_high_s8((int8x16_t)vhsubq_u8(v19, (uint8x16_t)vaddq_s8(v13, (int8x16_t)vcgtq_u8((uint8x16_t)v13, v19)))), v19)), v18);
      v17.i32[1] = v20.i32[1];
      v20.i64[1] = v20.i64[0];
      void *v7 = v17.i64[0];
      v7 += 2;
      uint8x16_t v6 = (uint8x16_t)vextq_s8(v20, v20, 0xCuLL);
      v8 += 4;
      ++v10;
    }
    while (v8 <= a3);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return off_1E91058C0((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

int *ConvertBGRAToRGBA_NEON(char *a1, int a2, char *a3)
{
  if ((int)(a2 & 0xFFFFFFF0) >= 1)
  {
    uint8x8_t v3 = &a1[4 * (a2 & 0xFFFFFFF0)];
    do
    {
      int8x16x4_t v5 = vld4q_s8(a1);
      a1 += 64;
      v6.val[0] = v5.val[2];
      v6.val[1] = v5.val[1];
      v6.val[2] = v5.val[0];
      v6.val[3] = v5.val[3];
      vst4q_s8(a3, v6);
      a3 += 64;
    }
    while (a1 < v3);
  }
  return VP8LConvertBGRAToRGBA_C((int *)a1, a2 & 0xF, a3);
}

int *ConvertBGRAToBGR_NEON(char *a1, int a2, char *a3)
{
  if ((int)(a2 & 0xFFFFFFF0) >= 1)
  {
    uint8x8_t v3 = &a1[4 * (a2 & 0xFFFFFFF0)];
    do
    {
      int8x16x4_t v5 = vld4q_s8(a1);
      a1 += 64;
      vst3q_s8(a3, *(int8x16x3_t *)v5.val[0].i8);
      a3 += 48;
    }
    while (a1 < v3);
  }
  return VP8LConvertBGRAToBGR_C((int *)a1, a2 & 0xF, (uint64_t)a3);
}

int *ConvertBGRAToRGB_NEON(char *a1, int a2, char *a3)
{
  if ((int)(a2 & 0xFFFFFFF0) >= 1)
  {
    uint8x8_t v3 = &a1[4 * (a2 & 0xFFFFFFF0)];
    do
    {
      int8x16x4_t v6 = vld4q_s8(a1);
      a1 += 64;
      v5.val[0] = v6.val[2];
      v5.val[1] = v6.val[1];
      v5.val[2] = v6.val[0];
      vst3q_s8(a3, v5);
      a3 += 48;
    }
    while (a1 < v3);
  }
  return VP8LConvertBGRAToRGB_C((int *)a1, a2 & 0xF, a3);
}

unsigned int *AddGreenToBlueAndRed_NEON(unsigned int *a1, int a2, unsigned int *a3)
{
  if ((int)(a2 & 0xFFFFFFFC) >= 1)
  {
    uint8x8_t v3 = &a1[a2 & 0xFFFFFFFC];
    do
    {
      int8x16_t v4 = *(int8x16_t *)a1;
      a1 += 4;
      *(int8x8_t *)v5.i8 = vqtbl1_s8((int8x16_t)v4.u64[0], (int8x8_t)0xFF05FF05FF01FF01);
      v5.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)vextq_s8(v4, v4, 8uLL).u64[0], (int8x8_t)0xFF05FF05FF01FF01);
      *(int8x16_t *)a3 = vaddq_s8(v5, v4);
      a3 += 4;
    }
    while (a1 < v3);
  }
  return VP8LAddGreenToBlueAndRed_C(a1, a2 & 3, a3);
}

char *TransformColorInverse_NEON(char *a1, int8x16_t *a2, int a3, int8x16_t *a4, int32x4_t a5)
{
  if (a3 >= 4)
  {
    a5.i8[0] = *a1;
    a5.i8[4] = a1[1];
    *(int32x2_t *)a5.i8 = vshr_n_s32(vshr_n_s32(vshl_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 8uLL), 0x10uLL), 0x10uLL), 6uLL);
    *(int16x4_t *)a5.i8 = vmovn_s32(a5);
    int16x8_t v6 = (int16x8_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1889B0CF0);
    v7.i16[0] = 0;
    v7.i16[4] = 0;
    *(__int32 *)((char *)v7.i32 + 2) = (unsigned __int16)(4 * a1[2]);
    v7.i16[3] = 4 * a1[2];
    *(__int32 *)((char *)&v7.i32[2] + 2) = *(__int32 *)((char *)v7.i32 + 2);
    v7.i16[7] = v7.i16[3];
    unsigned int v5 = a3 & 0xFFFFFFFC;
    unint64_t v8 = 4;
    unint64_t v9 = a2;
    uint64_t v10 = a4;
    do
    {
      int8x16_t v11 = *v9++;
      *(int8x8_t *)v12.i8 = vqtbl1_s8((int8x16_t)v11.u64[0], (int8x8_t)0x5FF05FF01FF01FFLL);
      v12.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)vextq_s8(v11, v11, 8uLL).u64[0], (int8x8_t)0x5FF05FF01FF01FFLL);
      int16x8_t v13 = vshlq_n_s16((int16x8_t)vaddq_s8(v11, (int8x16_t)vqdmulhq_s16(v12, v6)), 8uLL);
      *v10++ = vorrq_s8((int8x16_t)(*(_OWORD *)&v11 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s8((int8x16_t)v13, (int8x16_t)vshrq_n_u32((uint32x4_t)vqdmulhq_s16(v13, v7), 8uLL)), 8uLL));
      v8 += 4;
    }
    while (v8 <= a3);
  }
  else
  {
    unsigned int v5 = 0;
  }
  return VP8LTransformColorInverse_C(a1, &a2->i32[v5], a3 - v5, (unsigned int *)a4 + v5);
}

uint64_t VP8InitDithering(uint64_t result, uint64_t a2)
{
  if (!a2) {
    VP8InitDithering_cold_1();
  }
  uint64_t v2 = result;
  if (!result) {
    return result;
  }
  unsigned int v4 = *(_DWORD *)(result + 44);
  if ((v4 & 0x80000000) == 0)
  {
    if (v4 > 0x64)
    {
      LODWORD(v5) = 255;
      goto LABEL_8;
    }
    if ((unsigned __int16)*(_DWORD *)(result + 44))
    {
      unint64_t v5 = (42949673 * (unint64_t)(255 * (unsigned __int16)*(_DWORD *)(result + 44))) >> 32;
LABEL_8:
      uint64_t v6 = 0;
      int v7 = 0;
      do
      {
        uint64_t v8 = a2 + v6;
        int v9 = *(_DWORD *)(a2 + v6 + 1084);
        if (v9 >= 12)
        {
          unsigned int v10 = *(_DWORD *)(v8 + 1088);
        }
        else
        {
          unsigned int v10 = (v5 * kQuantToDitherAmp[v9 & ~(v9 >> 31)]) >> 3;
          *(_DWORD *)(v8 + 1088) = v10;
        }
        v7 |= v10;
        v6 += 32;
      }
      while (v6 != 128);
      if (v7)
      {
        float result = VP8InitRandom(a2 + 828, 1.0);
        *(_DWORD *)(a2 + 824) = 1;
      }
    }
  }
  int v11 = *(_DWORD *)(v2 + 52);
  *(_DWORD *)(a2 + 3016) = v11;
  if (v11 <= 100)
  {
    if ((v11 & 0x80000000) == 0) {
      return result;
    }
    int v12 = 0;
  }
  else
  {
    int v12 = 100;
  }
  *(_DWORD *)(a2 + 3016) = v12;
  return result;
}

uint64_t VP8ProcessRow(uint64_t a1, int *a2)
{
  unsigned int v4 = (int *)(a1 + 216);
  BOOL v6 = *(int *)(a1 + 2920) >= 1
    && (int v5 = *(_DWORD *)(a1 + 2908), v5 >= *(_DWORD *)(a1 + 420))
    && v5 <= *(_DWORD *)(a1 + 428);
  if (*(_DWORD *)(a1 + 200))
  {
    int v7 = WebPGetWorkerInterface();
    char v8 = ((uint64_t (*)(uint64_t))v7[2])(a1 + 152);
    if (*(_DWORD *)(a1 + 160) != 1) {
      VP8ProcessRow_cold_1();
    }
    if ((v8 & 1) == 0) {
      return 0;
    }
    long long v12 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 264) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 248) = v12;
    long long v13 = *((_OWORD *)a2 + 2);
    long long v14 = *((_OWORD *)a2 + 3);
    long long v15 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 312) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 328) = v15;
    *(_OWORD *)(a1 + 280) = v13;
    *(_OWORD *)(a1 + 296) = v14;
    long long v16 = *((_OWORD *)a2 + 6);
    long long v17 = *((_OWORD *)a2 + 7);
    long long v18 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 376) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 392) = v18;
    *(_OWORD *)(a1 + 344) = v16;
    *(_OWORD *)(a1 + 360) = v17;
    int v19 = *(_DWORD *)(a1 + 2908);
    int v20 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 204);
    *(_DWORD *)(a1 + 220) = v19;
    *(_DWORD *)(a1 + 224) = v6;
    if (v20 == 2)
    {
      uint64_t v21 = *(void *)(a1 + 240);
      *(void *)(a1 + 240) = *(void *)(a1 + 2912);
      *(void *)(a1 + 2912) = v21;
      if (!v6) {
        goto LABEL_17;
      }
    }
    else
    {
      ReconstructRow(a1, v4);
      if (!v6)
      {
LABEL_17:
        int8x16_t v23 = WebPGetWorkerInterface();
        ((void (*)(uint64_t))v23[3])(a1 + 152);
        int v24 = *(_DWORD *)(a1 + 204);
        if (v24 + 1 == *(_DWORD *)(a1 + 208)) {
          int v25 = 0;
        }
        else {
          int v25 = v24 + 1;
        }
        *(_DWORD *)(a1 + 204) = v25;
        return 1;
      }
    }
    uint64_t v22 = *(void *)(a1 + 232);
    *(void *)(a1 + 232) = *(void *)(a1 + 2840);
    *(void *)(a1 + 2840) = v22;
    goto LABEL_17;
  }
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 2908);
  *(_DWORD *)(a1 + 224) = v6;
  ReconstructRow(a1, (int *)(a1 + 216));

  return FinishRow(a1, a2, v10, v11);
}

uint64_t ReconstructRow(uint64_t result, int *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = 0;
  int v4 = a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(result + 2848);
  uint64_t v7 = v6 + 40;
  do
  {
    *(unsigned char *)(v6 + 39 + v3) = -127;
    v3 += 32;
  }
  while (v3 != 512);
  for (uint64_t i = 0; i != 256; i += 32)
  {
    uint64_t v9 = v6 + i;
    *(unsigned char *)(v9 + 583) = -127;
    *(unsigned char *)(v9 + 599) = -127;
  }
  if (v4 < 1)
  {
    *(void *)(v6 + 20) = 0x7F7F7F7F7F7F7F7FLL;
    *(void *)(v6 + 15) = 0x7F7F7F7F7F7F7F7FLL;
    *(void *)(v6 + 7) = 0x7F7F7F7F7F7F7F7FLL;
    *(void *)(v6 + 551) = 0x7F7F7F7F7F7F7F7FLL;
    *(unsigned char *)(v6 + 559) = 127;
    *(void *)(v6 + 567) = 0x7F7F7F7F7F7F7F7FLL;
    *(unsigned char *)(v6 + 575) = 127;
  }
  else
  {
    *(unsigned char *)(v6 + 567) = -127;
    *(unsigned char *)(v6 + 551) = -127;
    *(unsigned char *)(v6 + 7) = -127;
  }
  if (*(int *)(result + 408) < 1) {
    return result;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v57 = 4 * (v4 == 0);
  uint64_t v12 = 5;
  if (!v4) {
    uint64_t v12 = 6;
  }
  uint64_t v56 = v12;
  uint64_t v58 = 8 * v5;
  uint64_t v59 = 16 * v5;
  uint64_t v13 = 769;
  uint64_t v60 = v6 + 600;
  uint64_t v61 = v6 + 584;
  int v62 = v4;
  do
  {
    uint64_t v14 = *((void *)a2 + 3);
    if (v11)
    {
      for (uint64_t j = 0; j != 544; j += 32)
        *(_DWORD *)(v6 + j + 4) = *(_DWORD *)(v6 + j + 20);
      for (uint64_t k = 0; k != 288; k += 32)
      {
        uint64_t v17 = v6 + k;
        *(_DWORD *)(v17 + 548) = *(_DWORD *)(v6 + k + 556);
        *(_DWORD *)(v17 + 564) = *(_DWORD *)(v6 + k + 572);
      }
    }
    uint64_t v18 = *(void *)(v2 + 2824) + 32 * v11;
    unsigned int v19 = *(_DWORD *)(v14 + 800 * v11 + 788);
    uint64_t v67 = v13;
    uint64_t v68 = v10;
    int16x8_t v64 = (_OWORD *)v18;
    uint64_t v65 = *(void *)(v2 + 2824);
    if (v4 >= 1)
    {
      *(_OWORD *)(v6 + 8) = *(_OWORD *)v18;
      *(void *)(v6 + 552) = *(void *)(v18 + 16);
      *(void *)(v6 + 568) = *(void *)(v18 + 24);
      if (!*(unsigned char *)(v14 + 800 * v11 + 768)) {
        goto LABEL_22;
      }
      if (v11 >= *(int *)(v2 + 408) - 1) {
        int v20 = 16843009 * *(unsigned __int8 *)(v18 + 15);
      }
      else {
        int v20 = *(_DWORD *)(v18 + 32);
      }
      *(_DWORD *)(v6 + 24) = v20;
      goto LABEL_40;
    }
    if (!*(unsigned char *)(v14 + 800 * v11 + 768))
    {
LABEL_22:
      uint64_t v21 = *(unsigned __int8 *)(v14 + 800 * v11 + 769);
      if (v11) {
        uint64_t v22 = v57;
      }
      else {
        uint64_t v22 = v56;
      }
      if (!*(unsigned char *)(v14 + 800 * v11 + 769)) {
        uint64_t v21 = v22;
      }
      uint64_t v23 = v14;
      ((void (*)(uint64_t))VP8PredLuma16[v21])(v6 + 40);
      if (!v19) {
        goto LABEL_53;
      }
      uint64_t v24 = 0;
      uint64_t v66 = v23;
      uint64_t v25 = v23 + v10;
      while (1)
      {
        uint64_t v26 = v7 + (unsigned __int16)kScan[v24];
        unsigned int v27 = v19 >> 30;
        if (v19 >> 30 == 1)
        {
          unsigned int v28 = (uint64_t *)&VP8TransformDC;
        }
        else
        {
          if (v27 != 2)
          {
            if (v27 == 3) {
              VP8Transform(v25, v26, 0);
            }
            goto LABEL_36;
          }
          unsigned int v28 = &VP8TransformAC3;
        }
        ((void (*)(uint64_t, uint64_t))*v28)(v25, v26);
LABEL_36:
        ++v24;
        v19 *= 4;
        v25 += 32;
        if (v24 == 16) {
          goto LABEL_52;
        }
      }
    }
LABEL_40:
    uint64_t v29 = 0;
    int v30 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 408) = v30;
    *(_DWORD *)(v6 + 280) = v30;
    *(_DWORD *)(v6 + 152) = v30;
    uint64_t v31 = v14 + v13;
    uint64_t v66 = v14;
    uint64_t v32 = v14 + v10;
    do
    {
      uint64_t v33 = v7 + (unsigned __int16)kScan[v29];
      ((void (*)(uint64_t))VP8PredLuma4[*(unsigned __int8 *)(v31 + v29)])(v33);
      unsigned int v34 = v19 >> 30;
      if (v19 >> 30 == 1)
      {
        int v35 = (uint64_t *)&VP8TransformDC;
LABEL_47:
        ((void (*)(uint64_t, uint64_t))*v35)(v32, v33);
        goto LABEL_48;
      }
      if (v34 == 2)
      {
        int v35 = &VP8TransformAC3;
        goto LABEL_47;
      }
      if (v34 == 3) {
        VP8Transform(v32, v33, 0);
      }
LABEL_48:
      ++v29;
      v19 *= 4;
      v32 += 32;
    }
    while (v29 != 16);
    if (v11) {
      uint64_t v22 = v57;
    }
    else {
      uint64_t v22 = v56;
    }
LABEL_52:
    uint64_t v23 = v66;
LABEL_53:
    uint64_t v36 = v23 + 800 * v11;
    int v37 = *(_DWORD *)(v36 + 792);
    if (*(unsigned char *)(v36 + 785)) {
      uint64_t v38 = *(unsigned __int8 *)(v36 + 785);
    }
    else {
      uint64_t v38 = v22;
    }
    ((void (*)(uint64_t))VP8PredChroma8[v38])(v61);
    unsigned int v39 = (uint64_t (*)(uint64_t))VP8PredChroma8[v38];
    unsigned int v40 = (uint64_t *)(v6 + 600);
    float result = v39(v60);
    if ((_BYTE)v37)
    {
      unsigned int v41 = &VP8TransformDCUV;
      if ((v37 & 0xAA) != 0) {
        unsigned int v41 = &VP8TransformUV;
      }
      float result = ((uint64_t (*)(uint64_t, uint64_t))*v41)(v36 + 512, v61);
    }
    int v4 = v62;
    if ((v37 & 0xFF00) != 0)
    {
      char v42 = &VP8TransformDCUV;
      if ((v37 & 0xAA00) != 0) {
        char v42 = &VP8TransformUV;
      }
      float result = ((uint64_t (*)(uint64_t, uint64_t))*v42)(v36 + 640, v60);
    }
    if (v62 < *(_DWORD *)(v2 + 412) - 1)
    {
      *int16x8_t v64 = *(_OWORD *)(v6 + 520);
      uint64_t v43 = v65 + 32 * v11;
      *(void *)(v43 + 16) = *(void *)(v6 + 808);
      *(void *)(v43 + 24) = *(void *)(v6 + 824);
    }
    uint64_t v44 = 0;
    uint64_t v45 = v58 * *(int *)(v2 + 2884);
    uint64_t v46 = *(void *)(v2 + 2856) + (16 * v11) + v59 * *(int *)(v2 + 2880);
    uint64_t v47 = *(void *)(v2 + 2864);
    uint64_t v48 = (8 * v11);
    uint64_t v49 = *(void *)(v2 + 2872) + v48;
    char v50 = (long long *)(v6 + 40);
    do
    {
      long long v51 = *v50;
      v50 += 2;
      *(_OWORD *)(v46 + *(int *)(v2 + 2880) * (uint64_t)(int)v44++) = v51;
    }
    while (v44 != 16);
    uint64_t v52 = 0;
    uint64_t v53 = v47 + v48 + v45;
    uint64_t v54 = v49 + v45;
    do
    {
      *(void *)(v53 + *(int *)(v2 + 2884) * (uint64_t)(int)v52) = *(v40 - 2);
      uint64_t v55 = *v40;
      v40 += 4;
      *(void *)(v54 + *(int *)(v2 + 2884) * (uint64_t)(int)v52++) = v55;
    }
    while (v52 != 8);
    ++v11;
    uint64_t v13 = v67 + 800;
    uint64_t v10 = v68 + 800;
  }
  while (v11 < *(int *)(v2 + 408));
  return result;
}

uint64_t FinishRow(uint64_t a1, int *a2, double a3, __n128 a4)
{
  int v59 = *(_DWORD *)(a1 + 216);
  unsigned int v60 = kFilterExtraRows[*(int *)(a1 + 2920)];
  int v57 = *(_DWORD *)(a1 + 2880);
  int v51 = *(_DWORD *)(a1 + 2884);
  uint64_t v53 = *(void *)(a1 + 2864);
  uint64_t v54 = *(void *)(a1 + 2856);
  uint64_t v52 = *(void *)(a1 + 2872);
  int v55 = *(_DWORD *)(a1 + 428);
  int v56 = *(_DWORD *)(a1 + 220);
  if (*(_DWORD *)(a1 + 200) == 2) {
    ReconstructRow(a1, (int *)(a1 + 216));
  }
  if (*(_DWORD *)(a1 + 224))
  {
    uint64_t v5 = *(int *)(a1 + 416);
    if ((int)v5 < *(_DWORD *)(a1 + 424))
    {
      int v61 = *(_DWORD *)(a1 + 220);
      uint64_t v6 = 4 * v5;
      int v7 = 8 * v5;
      int v8 = 16 * v5;
      do
      {
        uint64_t v9 = *(void *)(a1 + 232);
        uint64_t v10 = *(unsigned __int8 *)(v9 + v6);
        if (*(unsigned char *)(v9 + v6))
        {
          if (v10 <= 2) {
            FinishRow_cold_2();
          }
          int v11 = *(_DWORD *)(a1 + 216);
          uint64_t v12 = *(unsigned int *)(a1 + 2880);
          uint64_t v13 = *(void *)(a1 + 2856) + 16 * v11 * (int)v12 + v8;
          if (*(_DWORD *)(a1 + 2920) == 1)
          {
            if (v5 >= 1) {
              VP8SimpleHFilter16(*(void *)(a1 + 2856) + 16 * v11 * (int)v12 + v8, *(unsigned int *)(a1 + 2880), (v10 + 4));
            }
            uint64_t v14 = v9 + v6;
            if (*(unsigned char *)(v14 + 2)) {
              VP8SimpleHFilter16i(v13, v12, v10);
            }
            if (v61 >= 1) {
              VP8SimpleVFilter16(v13, v12, (v10 + 4));
            }
            if (*(unsigned char *)(v14 + 2)) {
              VP8SimpleVFilter16i(v13, v12, v10);
            }
          }
          else
          {
            unsigned int v62 = *(_DWORD *)(a1 + 2880);
            uint64_t v68 = *(void *)(a1 + 2856) + 16 * v11 * (int)v12 + v8;
            uint64_t v15 = *(unsigned __int8 *)(v9 + v6 + 1);
            uint64_t v16 = *(unsigned int *)(a1 + 2884);
            int v17 = 8 * v11 * v16;
            uint64_t v18 = v9 + v6;
            uint64_t v19 = *(unsigned __int8 *)(v18 + 3);
            uint64_t v66 = *(void *)(a1 + 2864) + v17 + v7;
            uint64_t v64 = *(void *)(a1 + 2872) + v17 + v7;
            if (v5 >= 1)
            {
              VP8HFilter16(v68, v62, (v10 + 4), v15, v19);
              VP8HFilter8(v66, v64, v16, (v10 + 4), v15, v19);
            }
            if (*(unsigned char *)(v18 + 2))
            {
              VP8HFilter16i(v68, v62, v10, v15, v19);
              VP8HFilter8i(v66, v64, v16, v10, v15, v19);
            }
            if (v61 >= 1)
            {
              VP8VFilter16(v68, v62, (v10 + 4), v15, v19);
              VP8VFilter8(v66, v64, v16, (v10 + 4), v15, v19);
            }
            if (*(unsigned char *)(v18 + 2))
            {
              VP8VFilter16i(v68, v62, v10, v15, v19);
              VP8VFilter8i(v66, v64, v16, v10, v15, v19);
            }
          }
        }
        ++v5;
        v6 += 4;
        v7 += 8;
        v8 += 16;
      }
      while (v5 < *(int *)(a1 + 424));
    }
  }
  uint64_t v69 = v59 * (uint64_t)v57;
  int v20 = 8 * v59 * v51;
  int v63 = (v60 >> 1) * v51;
  uint64_t v65 = v54 - v57 * (uint64_t)(int)v60;
  uint64_t v67 = v52 - v63;
  if (*(_DWORD *)(a1 + 824))
  {
    uint64_t v21 = *(int *)(a1 + 416);
    int v22 = *(_DWORD *)(a1 + 424);
    if ((int)v21 < v22)
    {
      int v23 = 8 * v21;
      uint64_t v24 = 800 * (int)v21 + 796;
      do
      {
        uint64_t v25 = *(void *)(a1 + 240);
        unsigned int v26 = *(unsigned __int8 *)(v25 + v24);
        if (v26 >= 4)
        {
          uint64_t v27 = *(unsigned int *)(a1 + 2884);
          int v28 = 8 * v27 * *(_DWORD *)(a1 + 216);
          uint64_t v29 = *(void *)(a1 + 2872) + v28 + v23;
          Dither8x8((int32x2_t *)(a1 + 828), a3, a4, *(void *)(a1 + 2864) + v28 + v23, v27, v26);
          Dither8x8((int32x2_t *)(a1 + 828), v30, v31, v29, v27, *(unsigned __int8 *)(v25 + v24));
          int v22 = *(_DWORD *)(a1 + 424);
        }
        ++v21;
        v23 += 8;
        v24 += 800;
      }
      while (v21 < v22);
    }
  }
  int v32 = v55 - 1;
  if (!*((void *)a2 + 8))
  {
    uint64_t v39 = 1;
    unsigned int v34 = v60;
    int v33 = v56;
LABEL_56:
    if (v59 + 1 == *(_DWORD *)(a1 + 208) && v33 < v32)
    {
      memcpy((void *)(*(void *)(a1 + 2856) - v57 * (uint64_t)(int)v34), (const void *)(v65 + 16 * v69 + 16 * *(int *)(a1 + 2880)), v57 * (uint64_t)(int)v34);
      memcpy((void *)(*(void *)(a1 + 2864) - v63), (const void *)(v53 - v63 + v20 + 8 * *(int *)(a1 + 2884)), v63);
      memcpy((void *)(*(void *)(a1 + 2872) - v63), (const void *)(v67 + v20 + 8 * *(int *)(a1 + 2884)), v63);
    }
    return v39;
  }
  int v33 = v56;
  if (v56)
  {
    unsigned int v34 = v60;
    int v35 = 16 * v56 - v60;
    uint64_t v36 = v65 + 16 * v69;
    uint64_t v37 = v53 - v63 + v20;
    uint64_t v38 = v67 + v20;
  }
  else
  {
    int v35 = 0;
    uint64_t v36 = *(void *)(a1 + 2856) + 16 * v69;
    uint64_t v37 = *(void *)(a1 + 2864) + v20;
    uint64_t v38 = *(void *)(a1 + 2872) + v20;
    unsigned int v34 = v60;
  }
  uint64_t v40 = 0;
  *((void *)a2 + 3) = v36;
  *((void *)a2 + 4) = v37;
  *((void *)a2 + 5) = v38;
  if (v56 < v32) {
    unsigned int v41 = v34;
  }
  else {
    unsigned int v41 = 0;
  }
  if ((int)(16 * v56 + 16 - v41) >= a2[33]) {
    int v42 = a2[33];
  }
  else {
    int v42 = 16 * v56 + 16 - v41;
  }
  *((void *)a2 + 19) = 0;
  if (!*(void *)(a1 + 2968)
    || v42 <= v35
    || (uint64_t v40 = VP8DecompressAlphaRows(a1, a2, v35, v42 - v35), (*((void *)a2 + 19) = v40) != 0))
  {
    int v43 = a2[32];
    int v44 = v43 - v35;
    if (v43 > v35)
    {
      if (v44) {
        FinishRow_cold_1();
      }
      int v45 = *(_DWORD *)(a1 + 2884);
      uint64_t v46 = *((void *)a2 + 4) + v45 * (uint64_t)(v44 >> 1);
      *((void *)a2 + 3) += *(int *)(a1 + 2880) * (uint64_t)v44;
      *((void *)a2 + 4) = v46;
      *((void *)a2 + 5) += v45 * (uint64_t)(v44 >> 1);
      if (v40)
      {
        v40 += *a2 * (uint64_t)v44;
        *((void *)a2 + 19) = v40;
      }
      int v35 = v43;
    }
    if (v42 <= v35)
    {
      uint64_t v39 = 1;
    }
    else
    {
      uint64_t v47 = a2[30];
      uint64_t v48 = *((void *)a2 + 4) + ((int)v47 >> 1);
      *((void *)a2 + 3) += v47;
      *((void *)a2 + 4) = v48;
      *((void *)a2 + 5) += (int)v47 >> 1;
      if (v40) {
        *((void *)a2 + 19) = v40 + v47;
      }
      int v49 = a2[31] - v47;
      a2[2] = v35 - v43;
      a2[3] = v49;
      a2[4] = v42 - v35;
      uint64_t v39 = (*((uint64_t (**)(int *))a2 + 8))(a2);
    }
    goto LABEL_56;
  }

  return VP8SetError(a1, 3, (uint64_t)"Could not decode alpha data.");
}

uint64_t VP8EnterCritical(unsigned int *a1, uint64_t a2)
{
  int v4 = *(unsigned int (**)(uint64_t))(a2 + 72);
  if (v4 && !v4(a2))
  {
    VP8SetError((uint64_t)a1, 6, (uint64_t)"Frame setup failed");
    return *a1;
  }
  if (*(_DWORD *)(a2 + 112))
  {
    int v5 = 0;
    LODWORD(v6) = 0;
    a1[730] = 0;
  }
  else
  {
    uint64_t v6 = (int)a1[730];
    int v5 = kFilterExtraRows[v6];
    if (v6 == 2)
    {
      a1[104] = 0;
      int v7 = a1 + 105;
      LODWORD(v6) = 2;
LABEL_13:
      _DWORD *v7 = 0;
      goto LABEL_14;
    }
  }
  int v8 = *(_DWORD *)(a2 + 120) - v5;
  a1[104] = v8 >> 4;
  int v9 = *(_DWORD *)(a2 + 128) - v5;
  a1[105] = v9 >> 4;
  if (v8 < 0)
  {
    a1[104] = 0;
    if (v9 < 0)
    {
LABEL_12:
      int v7 = a1 + 105;
      goto LABEL_13;
    }
  }
  else if (v9 < 0)
  {
    goto LABEL_12;
  }
LABEL_14:
  int v11 = v5 + 15;
  int v12 = (v11 + *(_DWORD *)(a2 + 132)) >> 4;
  a1[107] = v12;
  int v13 = (v11 + *(_DWORD *)(a2 + 124)) >> 4;
  if (v13 >= (int)a1[102]) {
    int v13 = a1[102];
  }
  a1[106] = v13;
  int v14 = a1[103];
  if (v12 > v14) {
    a1[107] = v14;
  }
  if ((int)v6 >= 1)
  {
    uint64_t v15 = 0;
    unsigned int v16 = a1[33];
    unsigned int v17 = a1[24];
    do
    {
      if (v16)
      {
        int v18 = *((char *)a1 + v15 + 148);
        if (!a1[35]) {
          v18 += a1[22];
        }
      }
      else
      {
        int v18 = a1[22];
      }
      uint64_t v19 = 0;
      char v20 = 1;
      do
      {
        char v21 = v20;
        int v22 = v18;
        if (v17)
        {
          int v22 = a1[25] + v18;
          if ((v20 & 1) == 0) {
            v22 += a1[29];
          }
        }
        int v23 = &a1[2 * v15 + 731 + v19];
        if (v22 >= 63) {
          int v22 = 63;
        }
        if (v22 < 1)
        {
          *(unsigned char *)int v23 = 0;
        }
        else
        {
          unsigned int v24 = v22 & ~(v22 >> 31);
          int v25 = a1[23];
          if (v25 <= 4) {
            char v26 = 1;
          }
          else {
            char v26 = 2;
          }
          signed int v27 = v24 >> v26;
          if (v27 >= 9 - v25) {
            signed int v27 = 9 - v25;
          }
          if (v25 >= 1) {
            int v28 = v27;
          }
          else {
            int v28 = v24;
          }
          if (v28 <= 1) {
            LOBYTE(v28) = 1;
          }
          uint64_t v29 = (uint64_t)&a1[2 * v15 + v19];
          *(unsigned char *)(v29 + 2925) = v28;
          *(unsigned char *)int v23 = v28 + 2 * v24;
          char v30 = v24 > 0xE;
          if (v24 > 0x27) {
            char v30 = 2;
          }
          *(unsigned char *)(v29 + 2927) = v30;
        }
        char v20 = 0;
        BYTE2(a1[2 * v15 + 731 + v19]) = v19;
        uint64_t v19 = 1;
      }
      while ((v21 & 1) != 0);
      ++v15;
    }
    while (v15 != 4);
  }
  return 0;
}

uint64_t VP8ExitCritical(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 200) < 1)
  {
    uint64_t v5 = 1;
  }
  else
  {
    int v4 = WebPGetWorkerInterface();
    uint64_t v5 = ((uint64_t (*)(uint64_t))v4[2])(a1 + 152);
  }
  uint64_t v6 = *(void (**)(uint64_t))(a2 + 80);
  if (v6) {
    v6(a2);
  }
  return v5;
}

uint64_t VP8GetThreadMethod(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && *(_DWORD *)(a1 + 40) && *(_DWORD *)(a2 + 64)) {
    VP8GetThreadMethod_cold_1();
  }
  return 0;
}

uint64_t VP8InitFrame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 204) = 0;
  if (*(int *)(a1 + 200) < 1)
  {
    int v5 = 1;
LABEL_7:
    *(_DWORD *)(a1 + 208) = v5;
    goto LABEL_8;
  }
  int v4 = WebPGetWorkerInterface();
  if (((unsigned int (*)(uint64_t))v4[1])(a1 + 152))
  {
    *(void *)(a1 + 176) = a1;
    *(void *)(a1 + 184) = a1 + 248;
    *(void *)(a1 + 168) = FinishRow;
    if (*(int *)(a1 + 2920) <= 0) {
      int v5 = 2;
    }
    else {
      int v5 = 3;
    }
    goto LABEL_7;
  }
  uint64_t result = VP8SetError(a1, 1, (uint64_t)"thread initialization failed.");
  if (!result) {
    return result;
  }
  int v5 = *(_DWORD *)(a1 + 208);
LABEL_8:
  uint64_t v6 = *(int *)(a1 + 408);
  uint64_t v7 = 4 * v6;
  uint64_t v8 = 32 * v6;
  uint64_t v9 = 2 * ((int)v6 + 1);
  uint64_t v10 = *(int *)(a1 + 2920);
  int v11 = *(_DWORD *)(a1 + 200);
  if (v10 <= 0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = 4 * (int)(v6 << (v11 > 0));
  }
  uint64_t v13 = 800 * (int)(v6 << (v11 == 2));
  uint64_t v14 = 16 * v5;
  int v15 = 3 * (v14 + kFilterExtraRows[v10]);
  int v16 = v15 + (v15 < 0);
  uint64_t v17 = v8 * ((uint64_t)v16 >> 1);
  if (*(void *)(a1 + 2968)) {
    unint64_t v18 = *(unsigned __int16 *)(a1 + 78) * (unint64_t)*(unsigned __int16 *)(a1 + 76);
  }
  else {
    unint64_t v18 = 0;
  }
  unint64_t v19 = v7 + v8 + v9 + v12 + v13 + v18 + v17 + 863;
  char v20 = *(char **)(a1 + 2888);
  if (v19 <= *(void *)(a1 + 2896))
  {
    unint64_t v19 = *(void *)(a1 + 2896);
LABEL_18:
    *(void *)(a1 + 2808) = v20;
    *(void *)(a1 + 2824) = &v20[v7];
    char v21 = &v20[v7 + v8];
    *(void *)(a1 + 2832) = v21 + 2;
    if (v12) {
      int v22 = &v21[v9];
    }
    else {
      int v22 = 0;
    }
    *(void *)(a1 + 2840) = v22;
    uint64_t v23 = (uint64_t)&v21[v9 + v12];
    *(_DWORD *)(a1 + 216) = 0;
    *(void *)(a1 + 232) = v22;
    if ((int)v10 >= 1)
    {
      if (v11 <= 0)
      {
        unint64_t v24 = (v23 + 31) & 0xFFFFFFFFFFFFFFE0;
        *(void *)(a1 + 2848) = v24;
        uint64_t v26 = v24 + 832;
        *(void *)(a1 + 2912) = v24 + 832;
LABEL_31:
        *(void *)(a1 + 240) = v26;
        uint64_t v28 = v24 + v13 + 832;
        *(_DWORD *)(a1 + 2880) = 16 * v6;
        *(_DWORD *)(a1 + 2884) = 8 * v6;
        uint64_t v29 = kFilterExtraRows[(int)v10];
        signed int v30 = v29 >> 1;
        uint64_t v31 = v28 + 16 * v6 * v29;
        *(void *)(a1 + 2856) = v31;
        uint64_t v32 = v31 + 16 * (int)v6 * v14 + v30 * (uint64_t)(8 * (int)v6);
        *(void *)(a1 + 2864) = v32;
        *(void *)(a1 + 2872) = v32 + 8 * v5 * 8 * v6 + v30 * (uint64_t)(8 * (int)v6);
        *(_DWORD *)(a1 + 204) = 0;
        uint64_t v33 = v28 + v17;
        if (v18) {
          uint64_t v34 = v28 + v17;
        }
        else {
          uint64_t v34 = 0;
        }
        *(void *)(a1 + 3000) = v34;
        if (v33 + v18 > (unint64_t)&v20[v19]) {
          VP8InitFrame_cold_1();
        }
        size_t v35 = v7;
        bzero(&v20[v7 + v8], 2 * ((int)v6 + 1));
        VP8InitScanline(a1);
        bzero(*(void **)(a1 + 2808), v35);
        goto LABEL_36;
      }
      *(void *)(a1 + 232) = &v22[4 * v6];
    }
    unint64_t v24 = (v23 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(void *)(a1 + 2848) = v24;
    *(void *)(a1 + 2912) = v24 + 832;
    if (v11 == 2) {
      uint64_t v25 = v6;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = v24 + 832 + 800 * v25;
    goto LABEL_31;
  }
  uint64_t v38 = v8 * ((uint64_t)v16 >> 1);
  _TIFFfree(v20);
  *(void *)(a1 + 2896) = 0;
  char v20 = (char *)WebPSafeMalloc(v19, 1uLL);
  *(void *)(a1 + 2888) = v20;
  if (v20)
  {
    *(void *)(a1 + 2896) = v19;
    LODWORD(v10) = *(_DWORD *)(a1 + 2920);
    int v11 = *(_DWORD *)(a1 + 200);
    uint64_t v17 = v38;
    uint64_t v7 = 4 * v6;
    uint64_t v14 = 16 * v5;
    goto LABEL_18;
  }
  uint64_t result = VP8SetError(a1, 1, (uint64_t)"no memory during frame initialization.");
  if (result)
  {
LABEL_36:
    *(_DWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 2856);
    *(void *)(a2 + 40) = *(void *)(a1 + 2872);
    *(void *)(a2 + 48) = *(void *)(a1 + 2880);
    *(void *)(a2 + 152) = 0;
    VP8DspInit(result, v36, v37);
    return 1;
  }
  return result;
}

uint64_t Dither8x8(int32x2_t *a1, double a2, __n128 a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  uint64_t v6 = 0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v11, 0, sizeof(v11));
  int8x8_t v7 = (int8x8_t)*a1;
  a3.n128_u64[0] = 0x3700000037;
  do
  {
    unsigned int v8 = a1[1].i32[v7.i32[0]] - a1[1].i32[v7.i32[1]];
    a1[1].i32[v7.i32[0]] = v8 & 0x7FFFFFFF;
    int32x2_t v9 = vadd_s32(*a1, (int32x2_t)0x100000001);
    int8x8_t v7 = vbic_s8((int8x8_t)v9, (int8x8_t)vceq_s32(v9, (int32x2_t)0x3700000037));
    *a1 = (int32x2_t)v7;
    *((unsigned char *)v11 + v6++) = ((unsigned __int16)(((__int16)(v8 >> 15) >> 8) * a6) >> 8) ^ 0x80;
  }
  while (v6 != 64);
  return VP8DitherCombine8x8(v11, (__n128)0x100000001uLL, a3);
}

void VP8InitDithering_cold_1()
{
  __assert_rtn("VP8InitDithering", "frame_dec.c", 330, "dec != NULL");
}

void VP8ProcessRow_cold_1()
{
  __assert_rtn("VP8ProcessRow", "frame_dec.c", 517, "worker->status_ == OK");
}

void FinishRow_cold_1()
{
}

void FinishRow_cold_2()
{
  __assert_rtn("DoFilter", "frame_dec.c", 214, "limit >= 3");
}

void VP8GetThreadMethod_cold_1()
{
  __assert_rtn("VP8GetThreadMethod", "frame_dec.c", 669, "headers == NULL || !headers->is_lossless");
}

void VP8InitFrame_cold_1()
{
  __assert_rtn("AllocateMemory", "frame_dec.c", 772, "mem <= (uint8_t*)dec->mem_ + dec->mem_size_");
}

void VP8DspInitNEON()
{
  VP8Transform = (uint64_t (*)(void, void, void))TransformTwo_NEON;
  VP8TransformAC3 = (uint64_t)TransformAC3_NEON;
  VP8TransformDC = (uint64_t (*)(void, void))TransformDC_NEON;
  VP8TransformWHT = TransformWHT_NEON;
  VP8VFilter16 = (uint64_t (*)(void, void, void, void, void))VFilter16_NEON;
  VP8VFilter16uint64_t i = (uint64_t (*)(void, void, void, void, void))VFilter16i_NEON;
  VP8HFilter16 = (uint64_t (*)(void, void, void, void, void))HFilter16_NEON;
  VP8HFilter16uint64_t i = (uint64_t (*)(void, void, void, void, void))HFilter16i_NEON;
  VP8VFilter8 = (uint64_t (*)(void, void, void, void, void, void))VFilter8_NEON;
  VP8VFilter8uint64_t i = (uint64_t (*)(void, void, void, void, void, void))VFilter8i_NEON;
  VP8HFilter8 = (uint64_t (*)(void, void, void, void, void, void))HFilter8_NEON;
  VP8HFilter8uint64_t i = (uint64_t (*)(void, void, void, void, void, void))HFilter8i_NEON;
  VP8SimpleVFilter16 = (uint64_t (*)(void, void, void))SimpleVFilter16_NEON;
  VP8SimpleHFilter16 = (uint64_t (*)(void, void, void))SimpleHFilter16_NEON;
  VP8SimpleVFilter16uint64_t i = (uint64_t (*)(void, void, void))SimpleVFilter16i_NEON;
  VP8SimpleHFilter16uint64_t i = (uint64_t (*)(void, void, void))SimpleHFilter16i_NEON;
  VP8PredLuma4[0] = (uint64_t)DC4_NEON;
  qword_1E9105588 = (uint64_t)TM4_NEON;
  qword_1E9105590 = (uint64_t)VE4_NEON;
  qword_1E91055A0 = (uint64_t)RD4_NEON;
  qword_1E91055B0 = (uint64_t)LD4_NEON;
  VP8PredLuma16[0] = (uint64_t)DC16TopLeft_NEON;
  qword_1E9105550 = (uint64_t)TM16_NEON;
  qword_1E9105558 = (uint64_t)VE16_NEON;
  qword_1E9105560 = (uint64_t)HE16_NEON;
  qword_1E9105568 = (uint64_t)DC16NoTop_NEON;
  qword_1E9105570 = (uint64_t)DC16NoLeft_NEON;
  qword_1E9105578 = (uint64_t)DC16NoTopLeft_NEON;
  VP8PredChroma8[0] = (uint64_t)DC8uv_NEON;
  qword_1E9105518 = (uint64_t)TM8uv_NEON;
  qword_1E9105520 = (uint64_t)VE8uv_NEON;
  qword_1E9105528 = (uint64_t)HE8uv_NEON;
  qword_1E9105530 = (uint64_t)DC8uvNoTop_NEON;
  qword_1E9105538 = (uint64_t)DC8uvNoLeft_NEON;
  qword_1E9105540 = (uint64_t)DC8uvNoTopLeft_NEON;
}

int8x8_t TransformTwo_NEON(int8x16_t *a1, __int32 *a2, int a3)
{
  int8x8_t result = TransformOne_NEON(a1, a2);
  if (a3)
  {
    return TransformOne_NEON(a1 + 2, a2 + 1);
  }
  return result;
}

int8x8_t TransformAC3_NEON(uint64_t a1, __int32 *a2)
{
  uint64_t v2 = (const __int16 *)a1;
  int16x4_t v3 = vld1_dup_s16(v2++);
  int v4 = *(__int16 *)(a1 + 8);
  int16x4_t v5 = vdup_n_s16((35468 * v4) >> 16);
  int16x4_t v6 = vdup_n_s16((85627 * v4) >> 16);
  int16x4_t v7 = vqadd_s16(v3, (int16x4_t)((35468 * *v2) & 0xFFFF0000 | ((85627 * *v2) >> 16) | ((unint64_t)(unsigned __int16)-((35468 * *v2) >> 16) << 32) | ((unint64_t)-((85627 * *v2) >> 16) << 48)));
  *(int16x4_t *)v8.i8 = vqadd_s16(v7, v6);
  v8.u64[1] = (unint64_t)vqadd_s16(v7, v5);
  *(int16x4_t *)v9.i8 = vqsub_s16(v7, v5);
  v9.u64[1] = (unint64_t)vqsub_s16(v7, v6);
  v7.i32[0] = *a2;
  v7.i32[1] = a2[8];
  v6.i32[0] = a2[16];
  v6.i32[1] = a2[24];
  int8x8_t v10 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)v7), v8, 3uLL));
  *a2 = v10.i32[0];
  a2[8] = v10.i32[1];
  int8x8_t result = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)v6), v9, 3uLL));
  a2[16] = result.i32[0];
  a2[24] = result.i32[1];
  return result;
}

int8x8_t TransformDC_NEON(const __int16 *a1, __int32 *a2)
{
  int16x8_t v2 = vld1q_dup_s16(a1);
  v3.i32[0] = *a2;
  v3.i32[1] = a2[8];
  v4.i32[0] = a2[16];
  v4.i32[1] = a2[24];
  int16x8_t v5 = vrsraq_n_s16((int16x8_t)vmovl_u8(v4), v2, 3uLL);
  *(int8x8_t *)v2.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(v3), v2, 3uLL));
  *a2 = v2.i32[0];
  a2[8] = v2.i32[1];
  int8x8_t result = vqmovun_s16(v5);
  a2[16] = result.i32[0];
  a2[24] = result.i32[1];
  return result;
}

uint32x4_t TransformWHT_NEON(int16x4_t *a1, _WORD *a2)
{
  int16x4_t v2 = a1[1];
  int16x4_t v3 = a1[2];
  int16x4_t v4 = a1[3];
  int32x4_t v5 = vaddl_s16(v4, *a1);
  int32x4_t v6 = vaddl_s16(v3, v2);
  int32x4_t v7 = vsubl_s16(v2, v3);
  int32x4_t v8 = vsubl_s16(*a1, v4);
  int32x4_t v9 = vaddq_s32(v5, v6);
  int32x4_t v10 = vaddq_s32(v8, v7);
  int64x2_t v11 = (int64x2_t)vsubq_s32(v5, v6);
  int64x2_t v12 = (int64x2_t)vsubq_s32(v8, v7);
  int32x4_t v13 = (int32x4_t)vzip2q_s64((int64x2_t)v9, v11);
  v9.i64[1] = v11.i64[0];
  int32x4_t v14 = (int32x4_t)vzip2q_s64((int64x2_t)v10, v12);
  v10.i64[1] = v12.i64[0];
  int32x4_t v15 = vtrn1q_s32(v9, v10);
  int32x4_t v16 = vtrn2q_s32(v9, v10);
  int32x4_t v17 = vtrn1q_s32(v13, v14);
  int32x4_t v18 = vtrn2q_s32(v13, v14);
  v14.i64[0] = 0x300000003;
  v14.i64[1] = 0x300000003;
  int32x4_t v19 = vaddq_s32(v15, v14);
  int32x4_t v20 = vaddq_s32(v19, v18);
  int32x4_t v21 = vaddq_s32(v16, v17);
  int32x4_t v22 = vsubq_s32(v16, v17);
  int32x4_t v23 = vsubq_s32(v19, v18);
  uint32x4_t v24 = vshrq_n_u32((uint32x4_t)vaddq_s32(v20, v21), 3uLL);
  uint32x4_t v25 = vshrq_n_u32((uint32x4_t)vaddq_s32(v23, v22), 3uLL);
  *a2 = v24.i16[0];
  a2[16] = v25.i16[0];
  uint32x4_t v26 = (uint32x4_t)vsubq_s32(v23, v22);
  uint32x4_t v27 = vshrq_n_u32((uint32x4_t)vsubq_s32(v20, v21), 3uLL);
  uint32x4_t result = vshrq_n_u32(v26, 3uLL);
  a2[32] = v27.i16[0];
  a2[48] = result.i16[0];
  a2[64] = v24.i16[2];
  a2[80] = v25.i16[2];
  a2[96] = v27.i16[2];
  a2[112] = result.i16[2];
  a2[128] = v24.i16[4];
  a2[144] = v25.i16[4];
  a2[160] = v27.i16[4];
  a2[176] = result.i16[4];
  a2[192] = v24.i16[6];
  a2[208] = v25.i16[6];
  a2[224] = v27.i16[6];
  a2[240] = result.i16[6];
  return result;
}

double VFilter16_NEON(uint8x16_t *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v7 = (uint8x16_t *)((char *)a1 - 2 * a2);
  int32x4_t v8 = (uint8x16_t *)((char *)v7 - a2);
  int8x16_t v9 = *(int8x16_t *)v8;
  int8x16_t v10 = *(int8x16_t *)((char *)v7 + a2);
  int8x16_t v11 = *(int8x16_t *)v7;
  int64x2_t v12 = (uint8x16_t *)((char *)a1 + 2 * a2);
  int8x16_t v13 = *(int8x16_t *)a1;
  int32x4_t v14 = (uint8x16_t *)((char *)v12 - a2);
  int8x16_t v15 = *(int8x16_t *)v14;
  int8x16_t v16 = *(int8x16_t *)v12;
  uint8x16_t v17 = vabdq_u8(*v7, (uint8x16_t)v10);
  uint8x16_t v18 = vabdq_u8(*v14, *a1);
  uint8x16_t v19 = vabdq_u8((uint8x16_t)v10, *a1);
  int8x16_t v20 = vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v19, v19), vshrq_n_u8(vabdq_u8(*v7, *v14), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(*(uint8x16_t *)((char *)v7 - 2 * a2), *v8), vabdq_u8(*v8, *v7)), vmaxq_u8(v17, vabdq_u8(*(uint8x16_t *)((char *)v12 + a2), *v12))), vmaxq_u8(vabdq_u8(*v12, *v14), v18))));
  uint8x16_t v30 = 0u;
  int8x16_t v28 = 0u;
  int8x16_t v29 = 0u;
  uint8x16_t v26 = 0u;
  int8x16_t v27 = 0u;
  int8x16_t v25 = 0u;
  DoFilter6_NEON((int8x16_t *)&v30, &v29, &v28, &v27, (int8x16_t *)&v26, &v25, v9, v11, v10, v13, v15, v16, v20, (int8x16_t)vcgtq_u8(vmaxq_u8(v17, v18), (uint8x16_t)vdupq_n_s8(a5)));
  int8x16_t v21 = v29;
  uint8x16_t *v8 = v30;
  uint8x16_t *v7 = (uint8x16_t)v21;
  int8x16_t v22 = v27;
  *(int8x16_t *)((char *)a1 - a2) = v28;
  *a1 = (uint8x16_t)v22;
  int8x16_t v24 = v25;
  double result = *(double *)v26.i64;
  *int32x4_t v14 = v26;
  uint8x16_t *v12 = (uint8x16_t)v24;
  return result;
}

uint8x16_t *VFilter16i_NEON(uint8x16_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int32x4_t v5 = (int8x16_t *)((char *)result + 2 * a2);
  uint8x16_t v6 = *result;
  uint8x16_t v7 = *(uint8x16_t *)((char *)v5 - a2);
  int8x16_t v8 = *v5;
  int8x16_t v9 = *(int8x16_t *)((char *)v5 + a2);
  uint8x16_t v10 = (uint8x16_t)vdupq_n_s8(a4);
  uint8x16_t v11 = (uint8x16_t)vdupq_n_s8(a3);
  uint8x16_t v12 = (uint8x16_t)vdupq_n_s8(a5);
  int8x16_t v13 = (uint8x16_t *)((char *)result + 4 * a2);
  int v14 = -3;
  v15.i64[0] = 0x8080808080808080;
  v15.i64[1] = 0x8080808080808080;
  v16.i64[0] = 0x303030303030303;
  v16.i64[1] = 0x303030303030303;
  v17.i64[0] = 0x404040404040404;
  v17.i64[1] = 0x404040404040404;
  do
  {
    int8x16_t v18 = *(int8x16_t *)((char *)v13 + a2);
    uint8x16_t v19 = vabdq_u8(v7, (uint8x16_t)v8);
    uint8x16_t v20 = vabdq_u8((uint8x16_t)v8, (uint8x16_t)v9);
    uint8x16_t v21 = vabdq_u8((uint8x16_t)v8, (uint8x16_t)v18);
    int8x16_t v22 = veorq_s8(v8, v15);
    uint8x16_t v23 = *(uint8x16_t *)((char *)v13 + 2 * a2);
    uint8x16_t v24 = vabdq_u8((uint8x16_t)v9, *v13);
    int8x16_t v25 = veorq_s8(v9, v15);
    uint8x16_t v26 = *(uint8x16_t *)((char *)v13 + 3 * a2);
    uint8x16_t v27 = vabdq_u8(v6, v7);
    uint8x16_t v28 = vabdq_u8((uint8x16_t)v18, *v13);
    int8x16_t v29 = vandq_s8((int8x16_t)vcgeq_u8(v11, vqaddq_u8(vqaddq_u8(v24, v24), vshrq_n_u8(v21, 1uLL))), (int8x16_t)vcgeq_u8(v10, vmaxq_u8(vmaxq_u8(vmaxq_u8(v27, v19), vmaxq_u8(v20, vabdq_u8(v26, v23))), vmaxq_u8(vabdq_u8(v23, (uint8x16_t)v18), v28))));
    int8x16_t v30 = veorq_s8(*(int8x16_t *)v13, v15);
    int8x16_t v31 = veorq_s8(v18, v15);
    int8x16_t v32 = vandq_s8((int8x16_t)vcgtq_u8(vmaxq_u8(v20, v28), v12), v29);
    int8x16_t v33 = vqsubq_s8(v30, v25);
    int8x16_t v34 = vandq_s8(vqaddq_s8(v33, vqaddq_s8(v33, vqaddq_s8(vqsubq_s8(v22, v31), v33))), v32);
    int8x16_t v35 = vqaddq_s8(v25, vshrq_n_s8(vqaddq_s8(v34, v16), 3uLL));
    int8x16_t v36 = vqsubq_s8(v30, vshrq_n_s8(vqaddq_s8(v34, v17), 3uLL));
    int8x16_t v37 = vqsubq_s8(v36, v35);
    int8x16_t v38 = vandq_s8(vqaddq_s8(v37, vqaddq_s8(v37, v37)), veorq_s8(v32, v29));
    int8x16_t v39 = vshrq_n_s8(vqaddq_s8(v38, v17), 3uLL);
    int8x16_t v40 = vrshrq_n_s8(v39, 1uLL);
    int8x16_t v41 = veorq_s8(vqaddq_s8(v35, vshrq_n_s8(vqaddq_s8(v38, v16), 3uLL)), v15);
    uint8x16_t v6 = (uint8x16_t)veorq_s8(vqsubq_s8(v36, v39), v15);
    uint8x16_t v7 = (uint8x16_t)veorq_s8(vqsubq_s8(v31, v40), v15);
    *(int8x16_t *)((char *)v13 - 2 * a2) = veorq_s8(vqaddq_s8(v22, v40), v15);
    *(int8x16_t *)((char *)v13 - a2) = v41;
    uint8x16_t *v13 = v6;
    *(uint8x16_t *)((char *)v13 + a2) = v7;
    int8x16_t v13 = (uint8x16_t *)((char *)v13 + 4 * a2);
    int8x16_t v8 = (int8x16_t)v23;
    int8x16_t v9 = (int8x16_t)v26;
  }
  while (!__CFADD__(v14++, 1));
  return result;
}

int8x16_t HFilter16_NEON(__int8 *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v7 = 8 * a2;
  int8x16_t v8 = &a1[a2 - 4];
  int8x16_t v9 = &a1[2 * a2 - 4];
  v14.i8[0] = *(a1 - 4);
  v11.i8[0] = *(a1 - 3);
  v12.i8[0] = *(a1 - 2);
  v13.i8[0] = *(a1 - 1);
  uint8x16_t v10 = &a1[v7 - 4];
  v14.i8[1] = *v8;
  v11.i8[1] = v8[1];
  v12.i8[1] = v8[2];
  v13.i8[1] = v8[3];
  v14.i8[2] = *v9;
  v11.i8[2] = v9[1];
  v12.i8[2] = v9[2];
  v13.i8[2] = v9[3];
  uint64_t v15 = 3 * a2;
  int8x16_t v16 = &a1[v15 - 4];
  v14.i8[3] = *v16;
  v11.i8[3] = v16[1];
  v12.i8[3] = v16[2];
  v13.i8[3] = v16[3];
  int8x16_t v17 = &a1[4 * a2 - 4];
  uint64_t v18 = 5 * a2;
  uint8x16_t v19 = &a1[v18 - 4];
  v14.i8[4] = *v17;
  v11.i8[4] = v17[1];
  v12.i8[4] = v17[2];
  v13.i8[4] = v17[3];
  uint8x16_t v20 = &a1[6 * a2 - 4];
  v14.i8[5] = *v19;
  v11.i8[5] = v19[1];
  v12.i8[5] = v19[2];
  v13.i8[5] = v19[3];
  v14.i8[6] = *v20;
  v11.i8[6] = v20[1];
  v12.i8[6] = v20[2];
  v13.i8[6] = v20[3];
  uint64_t v21 = 7 * a2;
  int8x16_t v22 = &a1[v21 - 4];
  v14.i8[7] = *v22;
  v11.i8[7] = v22[1];
  v12.i8[7] = v22[2];
  v13.i8[7] = v22[3];
  LOBYTE(v24) = *v10;
  LOBYTE(v25) = v10[1];
  LOBYTE(v26) = v10[2];
  LOBYTE(v27) = v10[3];
  uint8x16_t v23 = &v10[v21];
  uint8x16_t v28 = &v10[a2];
  BYTE1(v24) = *v28;
  BYTE1(v25) = v28[1];
  BYTE1(v26) = v28[2];
  BYTE1(v27) = v28[3];
  int8x16_t v29 = &v10[2 * a2];
  BYTE2(v24) = *v29;
  BYTE2(v25) = v29[1];
  BYTE2(v26) = v29[2];
  BYTE2(v27) = v29[3];
  BYTE3(v24) = v10[v15];
  BYTE3(v25) = v10[v15 + 1];
  BYTE3(v26) = v10[v15 + 2];
  BYTE3(v27) = v10[v15 + 3];
  int8x16_t v30 = &v10[4 * a2];
  BYTE4(v24) = *v30;
  BYTE4(v25) = v30[1];
  BYTE4(v26) = v30[2];
  BYTE4(v27) = v30[3];
  BYTE5(v24) = v10[v18];
  BYTE5(v25) = v10[v18 + 1];
  BYTE5(v26) = v10[v18 + 2];
  BYTE5(v27) = v10[v18 + 3];
  int8x16_t v31 = &v10[6 * a2];
  BYTE6(v24) = *v31;
  BYTE6(v25) = v31[1];
  BYTE6(v26) = v31[2];
  BYTE6(v27) = v31[3];
  HIBYTE(v24) = *v23;
  HIBYTE(v25) = v23[1];
  HIBYTE(v26) = v23[2];
  HIBYTE(v27) = v23[3];
  v14.i64[1] = v24;
  v11.i64[1] = v25;
  v32.i8[0] = *a1;
  v33.i8[0] = a1[1];
  v34.i8[0] = a1[2];
  v35.i8[0] = a1[3];
  int8x16_t v36 = &a1[a2];
  v32.i8[1] = *v36;
  v33.i8[1] = v36[1];
  v34.i8[1] = v36[2];
  v35.i8[1] = v36[3];
  int8x16_t v37 = &a1[2 * a2];
  v32.i8[2] = *v37;
  v33.i8[2] = v37[1];
  v34.i8[2] = v37[2];
  v35.i8[2] = v37[3];
  v32.i8[3] = a1[v15];
  v33.i8[3] = a1[v15 + 1];
  v34.i8[3] = a1[v15 + 2];
  v35.i8[3] = a1[v15 + 3];
  int8x16_t v38 = &a1[4 * a2];
  v32.i8[4] = *v38;
  v33.i8[4] = v38[1];
  v34.i8[4] = v38[2];
  v35.i8[4] = v38[3];
  v32.i8[5] = a1[v18];
  v33.i8[5] = a1[v18 + 1];
  v34.i8[5] = a1[v18 + 2];
  v35.i8[5] = a1[v18 + 3];
  int8x16_t v39 = &a1[6 * a2];
  v32.i8[6] = *v39;
  v33.i8[6] = v39[1];
  v34.i8[6] = v39[2];
  v35.i8[6] = v39[3];
  v32.i8[7] = a1[v21];
  v33.i8[7] = a1[v21 + 1];
  v34.i8[7] = a1[v21 + 2];
  v35.i8[7] = a1[v21 + 3];
  v12.i64[1] = v26;
  v13.i64[1] = v27;
  LOBYTE(v24) = a1[v7];
  LOBYTE(v25) = a1[v7 + 1];
  LOBYTE(v26) = a1[v7 + 2];
  LOBYTE(v27) = a1[v7 + 3];
  int8x16_t v40 = &a1[v7 + v21];
  int8x16_t v41 = &a1[v7 + a2];
  BYTE1(v24) = *v41;
  BYTE1(v25) = v41[1];
  BYTE1(v26) = v41[2];
  BYTE1(v27) = v41[3];
  int v42 = &a1[2 * a2 + v7];
  BYTE2(v24) = *v42;
  BYTE2(v25) = v42[1];
  BYTE2(v26) = v42[2];
  BYTE2(v27) = v42[3];
  int v43 = &a1[v7 + v15];
  BYTE3(v24) = *v43;
  BYTE3(v25) = v43[1];
  BYTE3(v26) = v43[2];
  BYTE3(v27) = v43[3];
  int v44 = &a1[4 * a2 + v7];
  BYTE4(v24) = *v44;
  BYTE4(v25) = v44[1];
  BYTE4(v26) = v44[2];
  BYTE4(v27) = v44[3];
  int v45 = &a1[v7 + v18];
  BYTE5(v24) = *v45;
  BYTE5(v25) = v45[1];
  BYTE5(v26) = v45[2];
  BYTE5(v27) = v45[3];
  uint64_t v46 = &a1[6 * a2 + v7];
  BYTE6(v24) = *v46;
  BYTE6(v25) = v46[1];
  BYTE6(v26) = v46[2];
  BYTE6(v27) = v46[3];
  HIBYTE(v24) = *v40;
  HIBYTE(v25) = v40[1];
  HIBYTE(v26) = v40[2];
  HIBYTE(v27) = v40[3];
  v32.i64[1] = v24;
  v33.i64[1] = v25;
  v34.i64[1] = v26;
  v35.i64[1] = v27;
  uint8x16_t v47 = vabdq_u8(v12, v13);
  uint8x16_t v48 = vabdq_u8(v33, v32);
  uint8x16_t v49 = vabdq_u8(v13, v32);
  int8x16_t v113 = 0u;
  int8x16_t v111 = 0u;
  int8x16_t v112 = 0u;
  __n128 v109 = 0u;
  int8x16_t v110 = 0u;
  int8x16_t v108 = 0u;
  DoFilter6_NEON(&v113, &v112, &v111, &v110, (int8x16_t *)&v109, &v108, v11, (int8x16_t)v12, (int8x16_t)v13, (int8x16_t)v32, (int8x16_t)v33, v34, vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v49, v49), vshrq_n_u8(vabdq_u8(v12, v33), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vmaxq_u8(
                     vmaxq_u8(vmaxq_u8(vabdq_u8(v14, (uint8x16_t)v11), vabdq_u8((uint8x16_t)v11, v12)), vmaxq_u8(v47, vabdq_u8(v35, (uint8x16_t)v34))), vmaxq_u8(vabdq_u8((uint8x16_t)v34, v33), v48)))), (int8x16_t)vcgtq_u8(vmaxq_u8(v47, v48), (uint8x16_t)vdupq_n_s8(a5)));
  int8x16_t v50 = v113;
  int8x16_t v51 = v112;
  uint64_t v52 = &a1[a2 - 3];
  uint64_t v53 = &a1[2 * a2 - 3];
  uint64_t v54 = &a1[v15 - 3];
  int v55 = &a1[4 * a2 - 3];
  int v56 = &a1[v18 - 3];
  int v57 = a1 - 3;
  *int v57 = v113.i8[0];
  v57[1] = v51.i8[0];
  uint64_t v58 = &a1[v7 - 3];
  int v59 = &a1[2 * v15 - 3];
  unsigned int v60 = &a1[v21 - 3];
  __int8 *v52 = v50.i8[1];
  v52[1] = v51.i8[1];
  *uint64_t v53 = v50.i8[2];
  v53[1] = v51.i8[2];
  *uint64_t v54 = v50.i8[3];
  v54[1] = v51.i8[3];
  *int v55 = v50.i8[4];
  v55[1] = v51.i8[4];
  *int v56 = v50.i8[5];
  v56[1] = v51.i8[5];
  unint64_t v61 = vextq_s8(v50, v50, 8uLL).u64[0];
  unint64_t v62 = vextq_s8(v51, v51, 8uLL).u64[0];
  *int v59 = v50.i8[6];
  v59[1] = v51.i8[6];
  *unsigned int v60 = v50.i8[7];
  v60[1] = v51.i8[7];
  int v63 = &v58[a2];
  uint64_t v64 = &v58[2 * a2];
  uint64_t v65 = &v58[v15];
  uint64_t v66 = &v58[4 * a2];
  uint64_t v67 = &v58[v18];
  uint64_t v68 = &v58[2 * v15];
  *uint64_t v58 = v61;
  v58[1] = v62;
  uint64_t v69 = &v58[v21];
  *int v63 = BYTE1(v61);
  v63[1] = BYTE1(v62);
  *uint64_t v64 = BYTE2(v61);
  v64[1] = BYTE2(v62);
  *uint64_t v65 = BYTE3(v61);
  v65[1] = BYTE3(v62);
  *uint64_t v66 = BYTE4(v61);
  v66[1] = BYTE4(v62);
  *uint64_t v67 = BYTE5(v61);
  v67[1] = BYTE5(v62);
  *uint64_t v68 = BYTE6(v61);
  v68[1] = BYTE6(v62);
  int8x16_t v71 = v110;
  int8x16_t v70 = v111;
  uint64_t v72 = &a1[a2 - 1];
  char v73 = &a1[v15 - 1];
  int v74 = &a1[v18 - 1];
  uint8x8_t v75 = &a1[2 * a2 - 1];
  int16x8_t v76 = &a1[v21 - 1];
  int16x8_t v77 = &a1[4 * a2 - 1];
  int16x8_t v78 = &a1[2 * v15 - 1];
  *(a1 - 1) = v111.i8[0];
  *a1 = v71.i8[0];
  int16x8_t v79 = &a1[v7 - 1];
  *uint64_t v69 = HIBYTE(v61);
  v69[1] = HIBYTE(v62);
  *uint64_t v72 = v70.i8[1];
  v72[1] = v71.i8[1];
  __int8 *v75 = v70.i8[2];
  v75[1] = v71.i8[2];
  *char v73 = v70.i8[3];
  v73[1] = v71.i8[3];
  *int16x8_t v77 = v70.i8[4];
  v77[1] = v71.i8[4];
  *int v74 = v70.i8[5];
  v74[1] = v71.i8[5];
  unint64_t v80 = vextq_s8(v70, v70, 8uLL).u64[0];
  unint64_t v81 = vextq_s8(v71, v71, 8uLL).u64[0];
  *int16x8_t v78 = v70.i8[6];
  v78[1] = v71.i8[6];
  *int16x8_t v76 = v70.i8[7];
  v76[1] = v71.i8[7];
  int16x8_t v82 = &v79[a2];
  uint64_t v83 = &v79[2 * a2];
  char v84 = &v79[v15];
  char v85 = &v79[v18];
  int v86 = &v79[4 * a2];
  uint8x8_t v87 = &v79[2 * v15];
  *int16x8_t v79 = v80;
  v79[1] = v81;
  v88 = &v79[v21];
  *int16x8_t v82 = BYTE1(v80);
  v82[1] = BYTE1(v81);
  *uint64_t v83 = BYTE2(v80);
  v83[1] = BYTE2(v81);
  *char v84 = BYTE3(v80);
  v84[1] = BYTE3(v81);
  *int v86 = BYTE4(v80);
  v86[1] = BYTE4(v81);
  *char v85 = BYTE5(v80);
  v85[1] = BYTE5(v81);
  *uint8x8_t v87 = BYTE6(v80);
  v87[1] = BYTE6(v81);
  int8x16_t v90 = v108;
  int8x16_t result = (int8x16_t)v109;
  int16x8_t v91 = &a1[a2 + 1];
  int16x8_t v92 = &a1[2 * a2 + 1];
  int16x8_t v93 = &a1[v15 + 1];
  int16x8_t v94 = &a1[4 * a2 + 1];
  size_t v95 = &a1[v18 + 1];
  uint8x8_t v96 = &a1[v21 + 1];
  int16x8_t v97 = &a1[2 * v15 + 1];
  a1[1] = v109.n128_u8[0];
  a1[2] = v90.i8[0];
  int16x8_t v98 = &a1[v7 + 1];
  __int8 *v88 = HIBYTE(v80);
  v88[1] = HIBYTE(v81);
  *int16x8_t v91 = result.i8[1];
  v91[1] = v90.i8[1];
  *int16x8_t v92 = result.i8[2];
  v92[1] = v90.i8[2];
  *int16x8_t v93 = result.i8[3];
  v93[1] = v90.i8[3];
  *int16x8_t v94 = result.i8[4];
  v94[1] = v90.i8[4];
  *size_t v95 = result.i8[5];
  v95[1] = v90.i8[5];
  unint64_t v99 = vextq_s8(result, result, 8uLL).u64[0];
  unint64_t v100 = vextq_s8(v90, v90, 8uLL).u64[0];
  *int16x8_t v97 = result.i8[6];
  v97[1] = v90.i8[6];
  *uint8x8_t v96 = result.i8[7];
  v96[1] = v90.i8[7];
  uint8x8_t v101 = &v98[a2];
  v102 = &v98[2 * a2];
  v103 = &v98[v15];
  v104 = &v98[4 * a2];
  uint8x8_t v105 = &v98[v18];
  int16x8_t v106 = &v98[2 * v15];
  *int16x8_t v98 = v99;
  v98[1] = v100;
  int16x8_t v107 = &v98[v21];
  *uint8x8_t v101 = BYTE1(v99);
  v101[1] = BYTE1(v100);
  __int8 *v102 = BYTE2(v99);
  v102[1] = BYTE2(v100);
  __int8 *v103 = BYTE3(v99);
  v103[1] = BYTE3(v100);
  __int8 *v104 = BYTE4(v99);
  v104[1] = BYTE4(v100);
  *uint8x8_t v105 = BYTE5(v99);
  v105[1] = BYTE5(v100);
  *int16x8_t v106 = BYTE6(v99);
  v106[1] = BYTE6(v100);
  *int16x8_t v107 = HIBYTE(v99);
  v107[1] = HIBYTE(v100);
  return result;
}

__int8 *HFilter16i_NEON(__int8 *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = 0;
  v6.i8[0] = *result;
  v7.i8[0] = result[1];
  v23.i8[0] = result[2];
  v24.i8[0] = result[3];
  uint8x8_t v87 = &result[a2];
  v88 = &result[9 * a2];
  v6.i8[1] = *v87;
  v7.i8[1] = v87[1];
  v23.i8[1] = v87[2];
  v24.i8[1] = v87[3];
  int v86 = &result[2 * a2];
  v6.i8[2] = *v86;
  v7.i8[2] = v86[1];
  v23.i8[2] = v86[2];
  v24.i8[2] = v86[3];
  uint64_t v8 = 3 * a2;
  char v85 = &result[v8];
  v6.i8[3] = result[v8];
  v7.i8[3] = result[v8 + 1];
  v23.i8[3] = result[v8 + 2];
  v24.i8[3] = result[v8 + 3];
  char v84 = &result[4 * a2];
  v6.i8[4] = *v84;
  v7.i8[4] = v84[1];
  v23.i8[4] = v84[2];
  v24.i8[4] = v84[3];
  uint64_t v9 = 5 * a2;
  uint8x16_t v10 = &result[v9];
  v6.i8[5] = result[v9];
  v7.i8[5] = result[v9 + 1];
  v23.i8[5] = result[v9 + 2];
  v24.i8[5] = result[v9 + 3];
  int8x16_t v11 = &result[6 * a2];
  v6.i8[6] = *v11;
  v7.i8[6] = v11[1];
  v23.i8[6] = v11[2];
  v24.i8[6] = v11[3];
  uint64_t v12 = 7 * a2;
  uint8x16_t v13 = &result[v12];
  v6.i8[7] = result[v12];
  v7.i8[7] = result[v12 + 1];
  v23.i8[7] = result[v12 + 2];
  v24.i8[7] = result[v12 + 3];
  uint8x16_t v14 = &result[8 * a2];
  LOBYTE(v15) = *v14;
  LOBYTE(v16) = v14[1];
  LOBYTE(v17) = v14[2];
  LOBYTE(v18) = v14[3];
  uint8x16_t v19 = &v14[a2];
  BYTE1(v15) = *v19;
  BYTE1(v16) = v19[1];
  BYTE1(v17) = v19[2];
  BYTE1(v18) = v19[3];
  uint8x16_t v20 = &v14[2 * a2];
  BYTE2(v15) = *v20;
  BYTE2(v16) = v20[1];
  BYTE2(v17) = v20[2];
  BYTE2(v18) = v20[3];
  BYTE3(v15) = v14[v8];
  BYTE3(v16) = v14[v8 + 1];
  BYTE3(v17) = v14[v8 + 2];
  BYTE3(v18) = v14[v8 + 3];
  uint64_t v21 = &v14[4 * a2];
  BYTE4(v15) = *v21;
  BYTE4(v16) = v21[1];
  BYTE4(v17) = v21[2];
  BYTE4(v18) = v21[3];
  BYTE5(v15) = v14[v9];
  BYTE5(v16) = v14[v9 + 1];
  BYTE5(v17) = v14[v9 + 2];
  BYTE5(v18) = v14[v9 + 3];
  int8x16_t v22 = &v14[6 * a2];
  BYTE6(v15) = *v22;
  BYTE6(v16) = v22[1];
  BYTE6(v17) = v22[2];
  BYTE6(v18) = v22[3];
  HIBYTE(v15) = v14[v12];
  HIBYTE(v16) = v14[v12 + 1];
  HIBYTE(v17) = v14[v12 + 2];
  HIBYTE(v18) = v14[v12 + 3];
  v6.i64[1] = v15;
  v7.i64[1] = v16;
  v23.i64[1] = v17;
  v24.i64[1] = v18;
  uint8x16_t v25 = (uint8x16_t)vdupq_n_s8(a4);
  uint8x16_t v26 = (uint8x16_t)vdupq_n_s8(a3);
  uint64_t v27 = &result[15 * a2];
  uint8x16_t v28 = (uint8x16_t)vdupq_n_s8(a5);
  int8x16_t v29 = &result[14 * a2];
  int8x16_t v30 = &result[13 * a2];
  int8x16_t v31 = &result[12 * a2];
  uint8x16_t v32 = &result[11 * a2];
  uint8x16_t v33 = &result[10 * a2];
  v34.i64[0] = 0x8080808080808080;
  v34.i64[1] = 0x8080808080808080;
  v35.i64[0] = 0x303030303030303;
  v35.i64[1] = 0x303030303030303;
  v36.i64[0] = 0x404040404040404;
  v36.i64[1] = 0x404040404040404;
  int8x16_t v37 = v6;
  int8x16_t v38 = v7;
  do
  {
    v39.i8[0] = result[v5 + 4];
    v40.i8[0] = result[v5 + 5];
    v41.i8[0] = result[v5 + 6];
    v42.i8[0] = result[v5 + 7];
    int v43 = &v87[v5];
    int v44 = &v86[v5];
    v39.i8[1] = v87[v5 + 4];
    v40.i8[1] = v87[v5 + 5];
    v41.i8[1] = v87[v5 + 6];
    v42.i8[1] = v87[v5 + 7];
    v39.i8[2] = v86[v5 + 4];
    v40.i8[2] = v86[v5 + 5];
    v41.i8[2] = v86[v5 + 6];
    v42.i8[2] = v86[v5 + 7];
    int v45 = &v85[v5];
    uint64_t v46 = &v84[v5];
    v39.i8[3] = v85[v5 + 4];
    v40.i8[3] = v85[v5 + 5];
    v41.i8[3] = v85[v5 + 6];
    v42.i8[3] = v85[v5 + 7];
    v39.i8[4] = v84[v5 + 4];
    v40.i8[4] = v84[v5 + 5];
    v41.i8[4] = v84[v5 + 6];
    v42.i8[4] = v84[v5 + 7];
    v39.i8[5] = v10[v5 + 4];
    v40.i8[5] = v10[v5 + 5];
    v41.i8[5] = v10[v5 + 6];
    v42.i8[5] = v10[v5 + 7];
    v39.i8[6] = v11[v5 + 4];
    v40.i8[6] = v11[v5 + 5];
    v41.i8[6] = v11[v5 + 6];
    v42.i8[6] = v11[v5 + 7];
    v39.i8[7] = v13[v5 + 4];
    v40.i8[7] = v13[v5 + 5];
    v41.i8[7] = v13[v5 + 6];
    v42.i8[7] = v13[v5 + 7];
    uint8x16_t v47 = &v88[v5];
    LOBYTE(v48) = v14[v5 + 4];
    LOBYTE(v49) = v14[v5 + 5];
    LOBYTE(v50) = v14[v5 + 6];
    LOBYTE(v51) = v14[v5 + 7];
    BYTE1(v48) = v88[v5 + 4];
    BYTE1(v49) = v88[v5 + 5];
    BYTE1(v50) = v88[v5 + 6];
    BYTE1(v51) = v88[v5 + 7];
    BYTE2(v48) = v33[v5 + 4];
    BYTE2(v49) = v33[v5 + 5];
    BYTE2(v50) = v33[v5 + 6];
    BYTE2(v51) = v33[v5 + 7];
    BYTE3(v48) = v32[v5 + 4];
    BYTE3(v49) = v32[v5 + 5];
    BYTE3(v50) = v32[v5 + 6];
    BYTE3(v51) = v32[v5 + 7];
    BYTE4(v48) = v31[v5 + 4];
    BYTE4(v49) = v31[v5 + 5];
    BYTE4(v50) = v31[v5 + 6];
    BYTE4(v51) = v31[v5 + 7];
    BYTE5(v48) = v30[v5 + 4];
    BYTE5(v49) = v30[v5 + 5];
    BYTE5(v50) = v30[v5 + 6];
    BYTE5(v51) = v30[v5 + 7];
    BYTE6(v48) = v29[v5 + 4];
    BYTE6(v49) = v29[v5 + 5];
    BYTE6(v50) = v29[v5 + 6];
    BYTE6(v51) = v29[v5 + 7];
    HIBYTE(v48) = v27[v5 + 4];
    HIBYTE(v49) = v27[v5 + 5];
    HIBYTE(v50) = v27[v5 + 6];
    HIBYTE(v51) = v27[v5 + 7];
    v39.i64[1] = v48;
    v40.i64[1] = v49;
    v41.i64[1] = v50;
    v42.i64[1] = v51;
    uint8x16_t v52 = vabdq_u8((uint8x16_t)v37, (uint8x16_t)v38);
    uint8x16_t v53 = vabdq_u8((uint8x16_t)v23, (uint8x16_t)v24);
    uint8x16_t v54 = vabdq_u8(v40, v39);
    uint8x16_t v55 = vabdq_u8((uint8x16_t)v24, v39);
    int8x16_t v56 = (int8x16_t)vcgeq_u8(v25, vmaxq_u8(vmaxq_u8(vmaxq_u8(v52, vabdq_u8((uint8x16_t)v38, (uint8x16_t)v23)), vmaxq_u8(v53, vabdq_u8(v42, v41))), vmaxq_u8(vabdq_u8(v41, v40), v54)));
    int8x16_t v57 = veorq_s8(v23, v34);
    int8x16_t v58 = veorq_s8(v24, v34);
    int8x16_t v59 = veorq_s8((int8x16_t)v39, v34);
    int8x16_t v60 = vandq_s8((int8x16_t)vcgeq_u8(v26, vqaddq_u8(vqaddq_u8(v55, v55), vshrq_n_u8(vabdq_u8((uint8x16_t)v23, v40), 1uLL))), v56);
    int8x16_t v61 = veorq_s8((int8x16_t)v40, v34);
    int8x16_t v62 = vqsubq_s8(v59, v58);
    int8x16_t v63 = vandq_s8((int8x16_t)vcgtq_u8(vmaxq_u8(v53, v54), v28), v60);
    int8x16_t v64 = vandq_s8(vqaddq_s8(v62, vqaddq_s8(v62, vqaddq_s8(vqsubq_s8(v57, v61), v62))), v63);
    int8x16_t v65 = vqaddq_s8(v58, vshrq_n_s8(vqaddq_s8(v64, v35), 3uLL));
    int8x16_t v66 = vqsubq_s8(v59, vshrq_n_s8(vqaddq_s8(v64, v36), 3uLL));
    int8x16_t v67 = vqsubq_s8(v66, v65);
    int8x16_t v68 = vandq_s8(vqaddq_s8(v67, vqaddq_s8(v67, v67)), veorq_s8(v63, v60));
    int8x16_t v69 = vshrq_n_s8(vqaddq_s8(v68, v36), 3uLL);
    int8x16_t v70 = vrshrq_n_s8(v69, 1uLL);
    int8x16_t v71 = veorq_s8(vqaddq_s8(v65, vshrq_n_s8(vqaddq_s8(v68, v35), 3uLL)), v34);
    int8x16_t v37 = veorq_s8(vqsubq_s8(v66, v69), v34);
    int8x16_t v72 = veorq_s8(vqaddq_s8(v57, v70), v34);
    int8x16_t v38 = veorq_s8(vqsubq_s8(v61, v70), v34);
    char v73 = &result[v5 + 2];
    *char v73 = v72.i8[0];
    v73[1] = v71.i8[0];
    v73[2] = v37.i8[0];
    v73[3] = v38.i8[0];
    v43[2] = v72.i8[1];
    v43[3] = v71.i8[1];
    v43[4] = v37.i8[1];
    v43[5] = v38.i8[1];
    v44[2] = v72.i8[2];
    v44[3] = v71.i8[2];
    v44[4] = v37.i8[2];
    v44[5] = v38.i8[2];
    v45[2] = v72.i8[3];
    v45[3] = v71.i8[3];
    v45[4] = v37.i8[3];
    v45[5] = v38.i8[3];
    v46[2] = v72.i8[4];
    v46[3] = v71.i8[4];
    v46[4] = v37.i8[4];
    v46[5] = v38.i8[4];
    int v74 = &v10[v5 + 2];
    *int v74 = v72.i8[5];
    v74[1] = v71.i8[5];
    v74[2] = v37.i8[5];
    v74[3] = v38.i8[5];
    uint8x8_t v75 = &v11[v5 + 2];
    __int8 *v75 = v72.i8[6];
    v75[1] = v71.i8[6];
    v75[2] = v37.i8[6];
    v75[3] = v38.i8[6];
    int16x8_t v76 = &v13[v5 + 2];
    *int16x8_t v76 = v72.i8[7];
    v76[1] = v71.i8[7];
    v76[2] = v37.i8[7];
    v76[3] = v38.i8[7];
    v65.i64[0] = vextq_s8(v72, v72, 8uLL).u64[0];
    v66.i64[0] = vextq_s8(v71, v71, 8uLL).u64[0];
    v68.i64[0] = vextq_s8(v37, v37, 8uLL).u64[0];
    v61.i64[0] = vextq_s8(v38, v38, 8uLL).u64[0];
    int16x8_t v77 = &v14[v5 + 2];
    *int16x8_t v77 = v65.i8[0];
    v77[1] = v66.i8[0];
    v77[2] = v68.i8[0];
    v77[3] = v61.i8[0];
    v47[2] = v65.i8[1];
    v47[3] = v66.i8[1];
    v47[4] = v68.i8[1];
    v47[5] = v61.i8[1];
    int16x8_t v78 = &v33[v5 + 2];
    *int16x8_t v78 = v65.i8[2];
    v78[1] = v66.i8[2];
    v78[2] = v68.i8[2];
    v78[3] = v61.i8[2];
    int16x8_t v79 = &v32[v5 + 2];
    *int16x8_t v79 = v65.i8[3];
    v79[1] = v66.i8[3];
    v79[2] = v68.i8[3];
    v79[3] = v61.i8[3];
    unint64_t v80 = &v31[v5 + 2];
    *unint64_t v80 = v65.i8[4];
    v80[1] = v66.i8[4];
    v80[2] = v68.i8[4];
    v80[3] = v61.i8[4];
    unint64_t v81 = &v30[v5 + 2];
    *unint64_t v81 = v65.i8[5];
    v81[1] = v66.i8[5];
    v81[2] = v68.i8[5];
    v81[3] = v61.i8[5];
    int16x8_t v82 = &v29[v5 + 2];
    *int16x8_t v82 = v65.i8[6];
    v82[1] = v66.i8[6];
    v82[2] = v68.i8[6];
    v82[3] = v61.i8[6];
    uint64_t v83 = &v27[v5 + 2];
    *uint64_t v83 = v65.i8[7];
    v83[1] = v66.i8[7];
    v83[2] = v68.i8[7];
    v83[3] = v61.i8[7];
    v5 += 4;
    int8x16_t v23 = (int8x16_t)v41;
    int8x16_t v24 = (int8x16_t)v42;
  }
  while (v5 != 12);
  return result;
}

double VFilter8_NEON(uint8x16_t *a1, void *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  v9.i64[0] = *(uint64_t *)((char *)a1->i64 - 4 * a3);
  v9.i64[1] = *(void *)((char *)a2 - 4 * a3);
  uint64_t v10 = 3 * a3;
  v11.i64[0] = *(uint64_t *)((char *)a1->i64 - v10);
  v11.i64[1] = *(void *)((char *)a2 - v10);
  uint64_t v12 = (uint64_t *)((char *)a1->i64 - 2 * a3);
  v13.i64[0] = *v12;
  uint8x16_t v14 = (void *)((char *)a2 - 2 * a3);
  v13.i64[1] = *v14;
  uint64_t v15 = (uint64_t *)((char *)a1->i64 - a3);
  v16.i64[0] = *v15;
  uint64_t v17 = (void *)((char *)a2 - a3);
  v16.i64[1] = *v17;
  int8x16_t v18 = *(int8x16_t *)a1;
  v19.i64[0] = *(uint64_t *)((char *)a1->i64 + a3);
  v19.i64[1] = *(void *)((char *)a2 + a3);
  uint8x16_t v20 = (uint64_t *)((char *)a1->i64 + 2 * a3);
  v21.i64[0] = *v20;
  int8x16_t v22 = (void *)((char *)a2 + 2 * a3);
  v21.i64[1] = *v22;
  v23.i64[0] = *(uint64_t *)((char *)a1->i64 + v10);
  v23.i64[1] = *(void *)((char *)a2 + v10);
  uint8x16_t v24 = vabdq_u8(v13, v16);
  uint8x16_t v25 = vabdq_u8(v19, *a1);
  uint8x16_t v26 = vabdq_u8(v16, *a1);
  int8x16_t v38 = 0u;
  int8x16_t v39 = 0u;
  int8x16_t v36 = 0u;
  int8x16_t v37 = 0u;
  int8x16_t v34 = 0u;
  int8x16_t v35 = 0u;
  DoFilter6_NEON(&v39, &v38, &v37, &v36, &v35, &v34, v11, (int8x16_t)v13, (int8x16_t)v16, v18, (int8x16_t)v19, v21, vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vqaddq_u8(vqaddq_u8(v26, v26), vshrq_n_u8(vabdq_u8(v13, v19), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a5), vmaxq_u8(
                     vmaxq_u8(vmaxq_u8(vabdq_u8(v9, (uint8x16_t)v11), vabdq_u8((uint8x16_t)v11, v13)), vmaxq_u8(v24, vabdq_u8(v23, (uint8x16_t)v21))), vmaxq_u8(vabdq_u8((uint8x16_t)v21, v19), v25)))), (int8x16_t)vcgtq_u8(vmaxq_u8(v24, v25), (uint8x16_t)vdupq_n_s8(a6)));
  int8x16_t v28 = v38;
  int8x16_t v27 = v39;
  *(uint64_t *)((char *)v12 - a3) = v39.i64[0];
  uint64_t *v12 = v28.i64[0];
  *(uint64_t *)((char *)v14 - a3) = vextq_s8(v27, v27, 8uLL).u64[0];
  *uint8x16_t v14 = vextq_s8(v28, v28, 8uLL).u64[0];
  int8x16_t v30 = v36;
  int8x16_t v29 = v37;
  *uint64_t v15 = v37.i64[0];
  a1->i64[0] = v30.i64[0];
  *uint64_t v17 = vextq_s8(v29, v29, 8uLL).u64[0];
  *a2 = vextq_s8(v30, v30, 8uLL).u64[0];
  int8x16_t v32 = v34;
  int8x16_t v31 = v35;
  *(uint64_t *)((char *)v20 - a3) = v35.i64[0];
  *uint8x16_t v20 = v32.i64[0];
  *(uint64_t *)((char *)v22 - a3) = vextq_s8(v31, v31, 8uLL).u64[0];
  *(void *)&double result = vextq_s8(v32, v32, 8uLL).u64[0];
  *(double *)int8x16_t v22 = result;
  return result;
}

double VFilter8i_NEON(uint8x16_t *a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int8x16_t v6 = (uint64_t *)((char *)a1->i64 + 4 * a3);
  int8x16_t v7 = (uint64_t *)(a2 + 4 * a3);
  uint64_t v8 = 2 * a3;
  uint64_t v9 = 3 * a3;
  v10.i64[0] = *(uint64_t *)((char *)v6 - v9);
  v10.i64[1] = *(uint64_t *)((char *)v7 - v9);
  v11.i64[0] = *(uint64_t *)((char *)v6 - v8);
  v11.i64[1] = *(uint64_t *)((char *)v7 - v8);
  uint64_t v12 = (uint64_t *)((char *)v6 - a3);
  v13.i64[0] = *v12;
  uint8x16_t v14 = (uint64_t *)((char *)v7 - a3);
  v13.i64[1] = *v14;
  v15.i64[0] = *v6;
  v15.i64[1] = *v7;
  v16.i64[0] = *(uint64_t *)((char *)v6 + a3);
  v16.i64[1] = *(uint64_t *)((char *)v7 + a3);
  v17.i64[0] = *(uint64_t *)((char *)v6 + v8);
  v17.i64[1] = *(uint64_t *)((char *)v7 + v8);
  v18.i64[0] = *(uint64_t *)((char *)v6 + v9);
  v18.i64[1] = *(uint64_t *)((char *)v7 + v9);
  uint8x16_t v19 = vabdq_u8(v11, v13);
  int8x16_t v20 = (int8x16_t)vabdq_u8(v16, v15);
  int8x16_t v21 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a5), vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(*a1, v10), vabdq_u8(v10, v11)), vmaxq_u8(v19, vabdq_u8(v18, v17))), vmaxq_u8(vabdq_u8(v17, v16), (uint8x16_t)v20)));
  int8x16_t v22 = (int8x16_t)vabdq_u8(v13, v15);
  int8x16_t v23 = vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vqaddq_u8(vqaddq_u8((uint8x16_t)v22, (uint8x16_t)v22), vshrq_n_u8(vabdq_u8(v11, v16), 1uLL))), v21);
  v22.i64[0] = 0x8080808080808080;
  v22.i64[1] = 0x8080808080808080;
  int8x16_t v24 = veorq_s8((int8x16_t)v11, v22);
  int8x16_t v25 = veorq_s8((int8x16_t)v13, v22);
  int8x16_t v26 = veorq_s8((int8x16_t)v15, v22);
  int8x16_t v27 = veorq_s8((int8x16_t)v16, v22);
  int8x16_t v28 = vandq_s8((int8x16_t)vcgtq_u8(vmaxq_u8(v19, (uint8x16_t)v20), (uint8x16_t)vdupq_n_s8(a6)), v23);
  int8x16_t v29 = vqsubq_s8(v26, v25);
  int8x16_t v30 = vandq_s8(vqaddq_s8(v29, vqaddq_s8(v29, vqaddq_s8(vqsubq_s8(v24, v27), v29))), v28);
  v31.i64[0] = 0x303030303030303;
  v31.i64[1] = 0x303030303030303;
  v20.i64[0] = 0x404040404040404;
  v20.i64[1] = 0x404040404040404;
  int8x16_t v32 = vqaddq_s8(v25, vshrq_n_s8(vqaddq_s8(v30, v31), 3uLL));
  int8x16_t v33 = vqsubq_s8(v26, vshrq_n_s8(vqaddq_s8(v30, v20), 3uLL));
  int8x16_t v34 = vqsubq_s8(v33, v32);
  int8x16_t v35 = vandq_s8(vqaddq_s8(v34, vqaddq_s8(v34, v34)), veorq_s8(v28, v23));
  int8x16_t v36 = vshrq_n_s8(vqaddq_s8(v35, v20), 3uLL);
  int8x16_t v37 = vrshrq_n_s8(v36, 1uLL);
  int8x16_t v38 = veorq_s8(vqaddq_s8(v32, vshrq_n_s8(vqaddq_s8(v35, v31), 3uLL)), v22);
  int8x16_t v39 = veorq_s8(vqsubq_s8(v33, v36), v22);
  int8x16_t v40 = veorq_s8(vqaddq_s8(v24, v37), v22);
  *(uint64_t *)((char *)v12 - a3) = v40.i64[0];
  uint64_t *v12 = v38.i64[0];
  int8x16_t v41 = veorq_s8(vqsubq_s8(v27, v37), v22);
  *(uint64_t *)((char *)v14 - a3) = vextq_s8(v40, v40, 8uLL).u64[0];
  *uint8x16_t v14 = vextq_s8(v38, v38, 8uLL).u64[0];
  *int8x16_t v6 = v39.i64[0];
  *(uint64_t *)((char *)v6 + a3) = v41.i64[0];
  uint64_t *v7 = vextq_s8(v39, v39, 8uLL).u64[0];
  *(void *)&double result = vextq_s8(v41, v41, 8uLL).u64[0];
  *(double *)((char *)v7 + a3) = result;
  return result;
}

double HFilter8_NEON(unsigned char *a1, unsigned char *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  v8.i64[0] = *(void *)(a1 - 4);
  v8.i64[1] = *(void *)(a2 - 4);
  v9.i64[0] = *(void *)&a1[a3 - 4];
  v9.i64[1] = *(void *)&a2[a3 - 4];
  uint64_t v10 = 2 * a3;
  v11.i64[0] = *(void *)&a1[v10 - 4];
  v11.i64[1] = *(void *)&a2[v10 - 4];
  uint64_t v12 = 3 * a3;
  v13.i64[0] = *(void *)&a1[v12 - 4];
  v13.i64[1] = *(void *)&a2[v12 - 4];
  uint64_t v14 = 4 * a3;
  v15.i64[0] = *(void *)&a1[v14 - 4];
  v15.i64[1] = *(void *)&a2[v14 - 4];
  uint64_t v16 = 5 * a3;
  v17.i64[0] = *(void *)&a1[v16 - 4];
  uint64_t v18 = a3;
  v17.i64[1] = *(void *)&a2[v16 - 4];
  uint64_t v19 = 6 * a3;
  v20.i64[0] = *(void *)&a1[v19 - 4];
  v20.i64[1] = *(void *)&a2[v19 - 4];
  uint64_t v21 = 7 * a3;
  v22.i64[0] = *(void *)&a1[v21 - 4];
  v22.i64[1] = *(void *)&a2[v21 - 4];
  int16x8_t v23 = (int16x8_t)vtrn1q_s8(v8, v9);
  int16x8_t v24 = (int16x8_t)vtrn2q_s8(v8, v9);
  int16x8_t v25 = (int16x8_t)vtrn1q_s8(v11, v13);
  int16x8_t v26 = (int16x8_t)vtrn2q_s8(v11, v13);
  int16x8_t v27 = (int16x8_t)vtrn1q_s8(v15, v17);
  int16x8_t v28 = (int16x8_t)vtrn2q_s8(v15, v17);
  int16x8_t v29 = (int16x8_t)vtrn1q_s8(v20, v22);
  int16x8_t v30 = (int16x8_t)vtrn2q_s8(v20, v22);
  int32x4_t v31 = (int32x4_t)vtrn1q_s16(v23, v25);
  int32x4_t v32 = (int32x4_t)vtrn2q_s16(v23, v25);
  int32x4_t v33 = (int32x4_t)vtrn1q_s16(v24, v26);
  int32x4_t v34 = (int32x4_t)vtrn2q_s16(v24, v26);
  int32x4_t v35 = (int32x4_t)vtrn1q_s16(v27, v29);
  int32x4_t v36 = (int32x4_t)vtrn2q_s16(v27, v29);
  int32x4_t v37 = (int32x4_t)vtrn1q_s16(v28, v30);
  int32x4_t v38 = (int32x4_t)vtrn2q_s16(v28, v30);
  uint8x16_t v39 = (uint8x16_t)vtrn1q_s32(v31, v35);
  int8x16_t v40 = (int8x16_t)vtrn2q_s32(v31, v35);
  int8x16_t v41 = (int8x16_t)vtrn1q_s32(v32, v36);
  int8x16_t v42 = (int8x16_t)vtrn2q_s32(v32, v36);
  int8x16_t v43 = (int8x16_t)vtrn1q_s32(v33, v37);
  int8x16_t v44 = (int8x16_t)vtrn2q_s32(v33, v37);
  int8x16_t v45 = (int8x16_t)vtrn1q_s32(v34, v38);
  uint8x16_t v46 = (uint8x16_t)vtrn2q_s32(v34, v38);
  uint8x16_t v47 = vabdq_u8(v39, (uint8x16_t)v43);
  uint8x16_t v48 = vabdq_u8((uint8x16_t)v41, (uint8x16_t)v45);
  uint8x16_t v49 = vabdq_u8((uint8x16_t)v44, (uint8x16_t)v40);
  int8x16_t v50 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a5), vmaxq_u8(vmaxq_u8(vmaxq_u8(v47, vabdq_u8((uint8x16_t)v43, (uint8x16_t)v41)), vmaxq_u8(v48, vabdq_u8(v46, (uint8x16_t)v42))), vmaxq_u8(vabdq_u8((uint8x16_t)v42, (uint8x16_t)v44), v49)));
  uint8x16_t v51 = vabdq_u8((uint8x16_t)v45, (uint8x16_t)v40);
  int8x16_t v99 = 0u;
  int8x16_t v97 = 0u;
  int8x16_t v98 = 0u;
  int8x16_t v95 = 0u;
  int8x16_t v96 = 0u;
  int8x16_t v94 = 0u;
  DoFilter6_NEON(&v99, &v98, &v97, &v96, &v95, &v94, v43, v41, v45, v40, v44, v42, vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vqaddq_u8(vqaddq_u8(v51, v51), vshrq_n_u8(vabdq_u8((uint8x16_t)v41, (uint8x16_t)v44), 1uLL))), v50), (int8x16_t)vcgtq_u8(vmaxq_u8(v48, v49), (uint8x16_t)vdupq_n_s8(a6)));
  int8x16_t v52 = v99;
  int8x16_t v54 = v97;
  int8x16_t v53 = v98;
  int8x16_t v56 = v95;
  int8x16_t v55 = v96;
  int8x16_t v57 = v94;
  *(void *)&double result = vextq_s8(v52, v52, 8uLL).u64[0];
  unint64_t v59 = vextq_s8(v53, v53, 8uLL).u64[0];
  unint64_t v60 = vextq_s8(v54, v54, 8uLL).u64[0];
  unint64_t v61 = vextq_s8(v55, v55, 8uLL).u64[0];
  unint64_t v62 = vextq_s8(v56, v56, 8uLL).u64[0];
  int8x16_t v63 = a1 - 3;
  *int8x16_t v63 = v99.i8[0];
  v63[1] = v53.i8[0];
  v63[2] = v54.i8[0];
  *a1 = v55.i8[0];
  a1[1] = v56.i8[0];
  a1[2] = v57.i8[0];
  int8x16_t v64 = &a1[v18];
  int8x16_t v65 = v64 - 3;
  *int8x16_t v65 = v52.i8[1];
  v65[1] = v53.i8[1];
  v65[2] = v54.i8[1];
  *int8x16_t v64 = v55.i8[1];
  v64[1] = v56.i8[1];
  v64[2] = v57.i8[1];
  int8x16_t v66 = &v64[v18];
  int8x16_t v67 = v66 - 3;
  *int8x16_t v67 = v52.i8[2];
  v67[1] = v53.i8[2];
  v67[2] = v54.i8[2];
  *int8x16_t v66 = v55.i8[2];
  v66[1] = v56.i8[2];
  v66[2] = v57.i8[2];
  int8x16_t v68 = &v66[v18];
  int8x16_t v69 = v68 - 3;
  *int8x16_t v69 = v52.i8[3];
  v69[1] = v53.i8[3];
  v69[2] = v54.i8[3];
  *int8x16_t v68 = v55.i8[3];
  v68[1] = v56.i8[3];
  v68[2] = v57.i8[3];
  int8x16_t v70 = &v68[v18];
  int8x16_t v71 = v70 - 3;
  *int8x16_t v71 = v52.i8[4];
  v71[1] = v53.i8[4];
  v71[2] = v54.i8[4];
  *int8x16_t v70 = v55.i8[4];
  v70[1] = v56.i8[4];
  v70[2] = v57.i8[4];
  int8x16_t v72 = &v70[v18];
  char v73 = v72 - 3;
  *char v73 = v52.i8[5];
  v73[1] = v53.i8[5];
  v73[2] = v54.i8[5];
  *int8x16_t v72 = v55.i8[5];
  v72[1] = v56.i8[5];
  v72[2] = v57.i8[5];
  int v74 = &v72[v18];
  uint8x8_t v75 = v74 - 3;
  unsigned char *v75 = v52.i8[6];
  v75[1] = v53.i8[6];
  v75[2] = v54.i8[6];
  *int v74 = v55.i8[6];
  v74[1] = v56.i8[6];
  v74[2] = v57.i8[6];
  int16x8_t v76 = &v74[v18];
  unint64_t v77 = vextq_s8(v57, v57, 8uLL).u64[0];
  int16x8_t v78 = v76 - 3;
  *int16x8_t v78 = v52.i8[7];
  v78[1] = v53.i8[7];
  v78[2] = v54.i8[7];
  *int16x8_t v76 = v55.i8[7];
  v76[1] = v56.i8[7];
  v76[2] = v57.i8[7];
  int16x8_t v79 = a2 - 3;
  *int16x8_t v79 = LOBYTE(result);
  v79[1] = v59;
  v79[2] = v60;
  *a2 = v61;
  a2[1] = v62;
  a2[2] = v77;
  unint64_t v80 = &a2[v18];
  unint64_t v81 = v80 - 3;
  *unint64_t v81 = BYTE1(result);
  v81[1] = BYTE1(v59);
  v81[2] = BYTE1(v60);
  *unint64_t v80 = BYTE1(v61);
  v80[1] = BYTE1(v62);
  v80[2] = BYTE1(v77);
  int16x8_t v82 = &v80[v18];
  uint64_t v83 = v82 - 3;
  *uint64_t v83 = BYTE2(result);
  v83[1] = BYTE2(v59);
  v83[2] = BYTE2(v60);
  *int16x8_t v82 = BYTE2(v61);
  v82[1] = BYTE2(v62);
  v82[2] = BYTE2(v77);
  char v84 = &v82[v18];
  char v85 = v84 - 3;
  *char v85 = BYTE3(result);
  v85[1] = BYTE3(v59);
  v85[2] = BYTE3(v60);
  *char v84 = BYTE3(v61);
  v84[1] = BYTE3(v62);
  v84[2] = BYTE3(v77);
  int v86 = &v84[v18];
  uint8x8_t v87 = v86 - 3;
  *uint8x8_t v87 = BYTE4(result);
  v87[1] = BYTE4(v59);
  v87[2] = BYTE4(v60);
  *int v86 = BYTE4(v61);
  v86[1] = BYTE4(v62);
  v86[2] = BYTE4(v77);
  v88 = &v86[v18];
  int16x8_t v89 = v88 - 3;
  *int16x8_t v89 = BYTE5(result);
  v89[1] = BYTE5(v59);
  v89[2] = BYTE5(v60);
  unsigned char *v88 = BYTE5(v61);
  v88[1] = BYTE5(v62);
  v88[2] = BYTE5(v77);
  int8x16_t v90 = &v88[v18];
  int16x8_t v91 = v90 - 3;
  *int16x8_t v91 = BYTE6(result);
  v91[1] = BYTE6(v59);
  v91[2] = BYTE6(v60);
  *int8x16_t v90 = BYTE6(v61);
  v90[1] = BYTE6(v62);
  v90[2] = BYTE6(v77);
  int16x8_t v92 = &v90[v18];
  int16x8_t v93 = v92 - 3;
  *int16x8_t v93 = HIBYTE(result);
  v93[1] = HIBYTE(v59);
  v93[2] = HIBYTE(v60);
  *int16x8_t v92 = HIBYTE(v61);
  v92[1] = HIBYTE(v62);
  v92[2] = HIBYTE(v77);
  return result;
}

double HFilter8i_NEON(int8x16_t *a1, unsigned char *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  v6.i64[0] = *(uint64_t *)((char *)a1->i64 + a3);
  v6.i64[1] = *(void *)&a2[a3];
  uint64_t v7 = 2 * a3;
  v8.i64[0] = *(uint64_t *)((char *)a1->i64 + v7);
  v8.i64[1] = *(void *)&a2[v7];
  uint64_t v9 = 3 * a3;
  v10.i64[0] = *(uint64_t *)((char *)a1->i64 + v9);
  v10.i64[1] = *(void *)&a2[v9];
  uint64_t v11 = 4 * a3;
  v12.i64[0] = *(uint64_t *)((char *)a1->i64 + v11);
  v12.i64[1] = *(void *)&a2[v11];
  uint64_t v13 = 5 * a3;
  v14.i64[0] = *(uint64_t *)((char *)a1->i64 + v13);
  v14.i64[1] = *(void *)&a2[v13];
  uint64_t v15 = 6 * a3;
  v16.i64[0] = *(uint64_t *)((char *)a1->i64 + v15);
  v16.i64[1] = *(void *)&a2[v15];
  uint64_t v17 = 7 * a3;
  v18.i64[0] = *(uint64_t *)((char *)a1->i64 + v17);
  v18.i64[1] = *(void *)&a2[v17];
  int16x8_t v19 = (int16x8_t)vtrn1q_s8(*a1, v6);
  int16x8_t v20 = (int16x8_t)vtrn2q_s8(*a1, v6);
  int16x8_t v21 = (int16x8_t)vtrn1q_s8(v8, v10);
  int16x8_t v22 = (int16x8_t)vtrn2q_s8(v8, v10);
  int16x8_t v23 = (int16x8_t)vtrn1q_s8(v12, v14);
  int16x8_t v24 = (int16x8_t)vtrn2q_s8(v12, v14);
  int16x8_t v25 = (int16x8_t)vtrn1q_s8(v16, v18);
  int16x8_t v26 = (int16x8_t)vtrn2q_s8(v16, v18);
  int32x4_t v27 = (int32x4_t)vtrn1q_s16(v19, v21);
  int32x4_t v28 = (int32x4_t)vtrn2q_s16(v19, v21);
  int32x4_t v29 = (int32x4_t)vtrn1q_s16(v20, v22);
  int32x4_t v30 = (int32x4_t)vtrn2q_s16(v20, v22);
  int32x4_t v31 = (int32x4_t)vtrn1q_s16(v23, v25);
  int32x4_t v32 = (int32x4_t)vtrn2q_s16(v23, v25);
  int32x4_t v33 = (int32x4_t)vtrn1q_s16(v24, v26);
  int32x4_t v34 = (int32x4_t)vtrn2q_s16(v24, v26);
  uint8x16_t v35 = (uint8x16_t)vtrn1q_s32(v27, v31);
  int8x16_t v36 = (int8x16_t)vtrn2q_s32(v27, v31);
  int8x16_t v37 = (int8x16_t)vtrn1q_s32(v28, v32);
  uint8x16_t v38 = (uint8x16_t)vtrn2q_s32(v28, v32);
  uint8x16_t v39 = (uint8x16_t)vtrn1q_s32(v29, v33);
  int8x16_t v40 = (int8x16_t)vtrn2q_s32(v29, v33);
  int8x16_t v41 = (int8x16_t)vtrn1q_s32(v30, v34);
  uint8x16_t v42 = vabdq_u8((uint8x16_t)v37, (uint8x16_t)v41);
  int8x16_t v43 = (int8x16_t)vabdq_u8((uint8x16_t)v40, (uint8x16_t)v36);
  uint8x16_t v44 = vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(v35, v39), vabdq_u8(v39, (uint8x16_t)v37)), vmaxq_u8(v42, vabdq_u8((uint8x16_t)vtrn2q_s32(v30, v34), v38))), vmaxq_u8(vabdq_u8(v38, (uint8x16_t)v40), (uint8x16_t)v43));
  int8x16_t v45 = (int8x16_t)vabdq_u8((uint8x16_t)v41, (uint8x16_t)v36);
  int8x16_t v46 = vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vqaddq_u8(vqaddq_u8((uint8x16_t)v45, (uint8x16_t)v45), vshrq_n_u8(vabdq_u8((uint8x16_t)v37, (uint8x16_t)v40), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a5), v44));
  v45.i64[0] = 0x8080808080808080;
  v45.i64[1] = 0x8080808080808080;
  int8x16_t v47 = veorq_s8(v37, v45);
  int8x16_t v48 = veorq_s8(v41, v45);
  int8x16_t v49 = veorq_s8(v36, v45);
  int8x16_t v50 = veorq_s8(v40, v45);
  int8x16_t v51 = vandq_s8((int8x16_t)vcgtq_u8(vmaxq_u8(v42, (uint8x16_t)v43), (uint8x16_t)vdupq_n_s8(a6)), v46);
  int8x16_t v52 = vqsubq_s8(v49, v48);
  int8x16_t v53 = vandq_s8(vqaddq_s8(v52, vqaddq_s8(v52, vqaddq_s8(vqsubq_s8(v47, v50), v52))), v51);
  v41.i64[0] = 0x303030303030303;
  v41.i64[1] = 0x303030303030303;
  v43.i64[0] = 0x404040404040404;
  v43.i64[1] = 0x404040404040404;
  int8x16_t v54 = vqaddq_s8(v48, vshrq_n_s8(vqaddq_s8(v53, v41), 3uLL));
  int8x16_t v55 = vqsubq_s8(v49, vshrq_n_s8(vqaddq_s8(v53, v43), 3uLL));
  int8x16_t v56 = vqsubq_s8(v55, v54);
  int8x16_t v57 = vandq_s8(vqaddq_s8(v56, vqaddq_s8(v56, v56)), veorq_s8(v51, v46));
  int8x16_t v58 = vshrq_n_s8(vqaddq_s8(v57, v43), 3uLL);
  int8x16_t v59 = vrshrq_n_s8(v58, 1uLL);
  int8x16_t v60 = veorq_s8(vqaddq_s8(v54, vshrq_n_s8(vqaddq_s8(v57, v41), 3uLL)), v45);
  int8x16_t v61 = veorq_s8(vqsubq_s8(v55, v58), v45);
  int8x16_t v62 = veorq_s8(vqaddq_s8(v47, v59), v45);
  int8x16_t v63 = veorq_s8(vqsubq_s8(v50, v59), v45);
  int8x16_t v64 = &a1->i8[a3 + 2];
  int8x16_t v65 = &a1->i8[2 * a3 + 2];
  int8x16_t v66 = &a1->i8[v9 + 2];
  int8x16_t v67 = &a1->i8[4 * a3 + 2];
  a1->i8[2] = v62.i8[0];
  a1->i8[3] = v60.i8[0];
  a1->i8[4] = v61.i8[0];
  a1->i8[5] = v63.i8[0];
  int8x16_t v68 = &a1->i8[v17 + 2];
  *int8x16_t v64 = v62.i8[1];
  v64[1] = v60.i8[1];
  v64[2] = v61.i8[1];
  v64[3] = v63.i8[1];
  *int8x16_t v65 = v62.i8[2];
  v65[1] = v60.i8[2];
  v65[2] = v61.i8[2];
  v65[3] = v63.i8[2];
  int8x16_t v69 = &a1->i8[v13 + 2];
  int8x16_t v70 = &a1->i8[6 * a3 + 2];
  *int8x16_t v66 = v62.i8[3];
  v66[1] = v60.i8[3];
  v66[2] = v61.i8[3];
  v66[3] = v63.i8[3];
  *(void *)&double result = vextq_s8(v62, v62, 8uLL).u64[0];
  v58.i64[0] = vextq_s8(v60, v60, 8uLL).u64[0];
  v55.i64[0] = vextq_s8(v61, v61, 8uLL).u64[0];
  v45.i64[0] = vextq_s8(v63, v63, 8uLL).u64[0];
  *int8x16_t v67 = v62.i8[4];
  v67[1] = v60.i8[4];
  v67[2] = v61.i8[4];
  v67[3] = v63.i8[4];
  *int8x16_t v69 = v62.i8[5];
  v69[1] = v60.i8[5];
  v69[2] = v61.i8[5];
  v69[3] = v63.i8[5];
  *int8x16_t v70 = v62.i8[6];
  v70[1] = v60.i8[6];
  v70[2] = v61.i8[6];
  v70[3] = v63.i8[6];
  *int8x16_t v68 = v62.i8[7];
  v68[1] = v60.i8[7];
  v68[2] = v61.i8[7];
  v68[3] = v63.i8[7];
  int8x16_t v72 = &a2[a3 + 2];
  char v73 = &a2[2 * a3 + 2];
  int v74 = &a2[v9 + 2];
  a2[2] = LOBYTE(result);
  a2[3] = v58.i8[0];
  a2[4] = v55.i8[0];
  a2[5] = v45.i8[0];
  uint8x8_t v75 = &a2[v17 + 2];
  int16x8_t v76 = &a2[4 * a3 + 2];
  unint64_t v77 = &a2[v13 + 2];
  int16x8_t v78 = &a2[6 * a3 + 2];
  *int8x16_t v72 = BYTE1(result);
  v72[1] = v58.i8[1];
  v72[2] = v55.i8[1];
  v72[3] = v45.i8[1];
  *char v73 = BYTE2(result);
  v73[1] = v58.i8[2];
  v73[2] = v55.i8[2];
  v73[3] = v45.i8[2];
  *int v74 = BYTE3(result);
  v74[1] = v58.i8[3];
  v74[2] = v55.i8[3];
  v74[3] = v45.i8[3];
  *int16x8_t v76 = BYTE4(result);
  v76[1] = v58.i8[4];
  v76[2] = v55.i8[4];
  v76[3] = v45.i8[4];
  *unint64_t v77 = BYTE5(result);
  v77[1] = v58.i8[5];
  v77[2] = v55.i8[5];
  v77[3] = v45.i8[5];
  *int16x8_t v78 = BYTE6(result);
  v78[1] = v58.i8[6];
  v78[2] = v55.i8[6];
  v78[3] = v45.i8[6];
  unsigned char *v75 = HIBYTE(result);
  v75[1] = v58.i8[7];
  v75[2] = v55.i8[7];
  v75[3] = v45.i8[7];
  return result;
}

uint8x16_t SimpleVFilter16_NEON(uint8x16_t *a1, int a2, unsigned int a3)
{
  int8x16_t v3 = *(int8x16_t *)((char *)a1 - 2 * a2);
  int16x4_t v4 = (uint8x16_t *)((char *)a1 - a2);
  int8x16_t v5 = *(int8x16_t *)((char *)a1 + a2);
  int8x16_t v6 = (int8x16_t)vabdq_u8(*v4, *a1);
  int8x16_t v7 = (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8((uint8x16_t)v6, (uint8x16_t)v6), vshrq_n_u8(vabdq_u8((uint8x16_t)v3, (uint8x16_t)v5), 1uLL)), (uint8x16_t)vdupq_n_s8(a3));
  v6.i64[0] = 0x8080808080808080;
  v6.i64[1] = 0x8080808080808080;
  int8x16_t v8 = veorq_s8(*(int8x16_t *)v4, v6);
  int8x16_t v9 = veorq_s8(*(int8x16_t *)a1, v6);
  int8x16_t v10 = vqsubq_s8(v9, v8);
  int8x16_t v11 = vbicq_s8(vqaddq_s8(v10, vqaddq_s8(v10, vqaddq_s8(vqsubq_s8(veorq_s8(v3, v6), veorq_s8(v5, v6)), v10))), v7);
  v5.i64[0] = 0x303030303030303;
  v5.i64[1] = 0x303030303030303;
  int8x16_t v12 = vqaddq_s8(v11, v5);
  v7.i64[0] = 0x404040404040404;
  v7.i64[1] = 0x404040404040404;
  uint8x16_t result = (uint8x16_t)veorq_s8(vqsubq_s8(v9, vshrq_n_s8(vqaddq_s8(v11, v7), 3uLL)), v6);
  *(int8x16_t *)int16x4_t v4 = veorq_s8(vqaddq_s8(v8, vshrq_n_s8(v12, 3uLL)), v6);
  *a1 = result;
  return result;
}

__int8 *SimpleHFilter16_NEON(__int8 *a1, int a2, unsigned int a3)
{
  uint64_t v3 = 8 * a2;
  v5.i8[0] = *(a1 - 2);
  v6.i8[0] = *(a1 - 1);
  v7.i8[0] = *a1;
  v8.i8[0] = a1[1];
  int16x4_t v4 = &a1[v3 - 2];
  int8x16_t v9 = &a1[a2 - 2];
  v5.i8[1] = *v9;
  v6.i8[1] = v9[1];
  v7.i8[1] = a1[a2];
  v8.i8[1] = v9[3];
  int8x16_t v10 = &a1[2 * a2 - 2];
  v5.i8[2] = *v10;
  v6.i8[2] = v10[1];
  v7.i8[2] = a1[2 * a2];
  v8.i8[2] = v10[3];
  uint64_t v11 = 3 * a2;
  int8x16_t v12 = &a1[v11 - 2];
  uint64_t v13 = &a1[4 * a2 - 2];
  uint64_t v14 = 5 * a2;
  uint64_t v15 = &a1[v14 - 2];
  v5.i8[3] = *v12;
  v6.i8[3] = v12[1];
  v7.i8[3] = a1[v11];
  v8.i8[3] = v12[3];
  int8x16_t v16 = &a1[6 * a2 - 2];
  v5.i8[4] = *v13;
  v6.i8[4] = v13[1];
  v7.i8[4] = a1[4 * a2];
  v8.i8[4] = v13[3];
  v5.i8[5] = *v15;
  v6.i8[5] = v15[1];
  v7.i8[5] = a1[v14];
  v8.i8[5] = v15[3];
  uint64_t v17 = 7 * a2;
  int8x16_t v18 = &a1[v17 - 2];
  v5.i8[6] = *v16;
  v6.i8[6] = v16[1];
  v7.i8[6] = a1[6 * a2];
  v8.i8[6] = v16[3];
  v5.i8[7] = *v18;
  v6.i8[7] = v18[1];
  v7.i8[7] = a1[v17];
  v8.i8[7] = v18[3];
  LOBYTE(v20) = *v4;
  LOBYTE(v21) = v4[1];
  LOBYTE(v22) = a1[v3];
  LOBYTE(v23) = v4[3];
  int16x8_t v19 = &v4[v17];
  int16x8_t v24 = &v4[a2];
  BYTE1(v20) = *v24;
  BYTE1(v21) = v24[1];
  BYTE1(v22) = v24[2];
  BYTE1(v23) = v24[3];
  int16x8_t v25 = &v4[2 * a2];
  BYTE2(v20) = *v25;
  BYTE2(v21) = v25[1];
  BYTE2(v22) = v25[2];
  BYTE2(v23) = v25[3];
  BYTE3(v20) = v4[v11];
  BYTE3(v21) = v4[v11 + 1];
  BYTE3(v22) = a1[v3 + v11];
  BYTE3(v23) = v4[v11 + 3];
  int16x8_t v26 = &v4[4 * a2];
  BYTE4(v20) = *v26;
  BYTE4(v21) = v26[1];
  BYTE4(v22) = v26[2];
  BYTE4(v23) = v26[3];
  BYTE5(v20) = v4[v14];
  BYTE5(v21) = v4[v14 + 1];
  BYTE5(v22) = a1[v3 + v14];
  BYTE5(v23) = v4[v14 + 3];
  int32x4_t v27 = &v4[6 * a2];
  BYTE6(v20) = *v27;
  BYTE6(v21) = v27[1];
  BYTE6(v22) = v27[2];
  BYTE6(v23) = v27[3];
  HIBYTE(v20) = *v19;
  HIBYTE(v21) = v19[1];
  HIBYTE(v22) = v19[2];
  HIBYTE(v23) = v19[3];
  v5.i64[1] = v20;
  v6.i64[1] = v21;
  v7.i64[1] = v22;
  v8.i64[1] = v23;
  int8x16_t v28 = (int8x16_t)vabdq_u8(v6, v7);
  int8x16_t v29 = (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8((uint8x16_t)v28, (uint8x16_t)v28), vshrq_n_u8(vabdq_u8(v5, v8), 1uLL)), (uint8x16_t)vdupq_n_s8(a3));
  v28.i64[0] = 0x8080808080808080;
  v28.i64[1] = 0x8080808080808080;
  int8x16_t v30 = veorq_s8((int8x16_t)v6, v28);
  int8x16_t v31 = veorq_s8((int8x16_t)v7, v28);
  int8x16_t v32 = vqsubq_s8(v31, v30);
  int8x16_t v33 = vbicq_s8(vqaddq_s8(v32, vqaddq_s8(v32, vqaddq_s8(vqsubq_s8(veorq_s8((int8x16_t)v5, v28), veorq_s8((int8x16_t)v8, v28)), v32))), v29);
  v32.i64[0] = 0x303030303030303;
  v32.i64[1] = 0x303030303030303;
  v7.i64[0] = 0x404040404040404;
  v7.i64[1] = 0x404040404040404;
  int8x16_t v34 = veorq_s8(vqaddq_s8(v30, vshrq_n_s8(vqaddq_s8(v33, v32), 3uLL)), v28);
  int8x16_t v35 = veorq_s8(vqsubq_s8(v31, vshrq_n_s8(vqaddq_s8(v33, (int8x16_t)v7), 3uLL)), v28);
  int8x16_t v37 = &a1[a2 - 1];
  uint8x16_t v38 = &a1[2 * a2 - 1];
  uint8x16_t v39 = &a1[v11 - 1];
  int8x16_t v40 = &a1[4 * a2 - 1];
  int8x16_t v41 = &a1[v14 - 1];
  int8x16_t v36 = a1 - 1;
  *int8x16_t v36 = v34.i8[0];
  *a1 = v35.i8[0];
  uint8x16_t v42 = &a1[v3 - 1];
  int8x16_t v43 = &v36[6 * a2];
  uint8x16_t v44 = &v36[v17];
  *int8x16_t v37 = v34.i8[1];
  v37[1] = v35.i8[1];
  *uint8x16_t v38 = v34.i8[2];
  v38[1] = v35.i8[2];
  *uint8x16_t v39 = v34.i8[3];
  v39[1] = v35.i8[3];
  *int8x16_t v40 = v34.i8[4];
  v40[1] = v35.i8[4];
  *int8x16_t v41 = v34.i8[5];
  v41[1] = v35.i8[5];
  v8.i64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
  v29.i64[0] = vextq_s8(v35, v35, 8uLL).u64[0];
  *int8x16_t v43 = v34.i8[6];
  v43[1] = v35.i8[6];
  *uint8x16_t v44 = v34.i8[7];
  v44[1] = v35.i8[7];
  int8x16_t v45 = &v42[a2];
  int8x16_t v46 = &v42[2 * a2];
  int8x16_t v47 = &v42[v11];
  int8x16_t v48 = &v42[4 * a2];
  int8x16_t v49 = &v42[v14];
  int8x16_t v50 = &v42[6 * a2];
  *uint8x16_t v42 = v8.i8[0];
  v42[1] = v29.i8[0];
  uint8x16_t result = &v42[v17];
  *int8x16_t v45 = v8.i8[1];
  v45[1] = v29.i8[1];
  *int8x16_t v46 = v8.i8[2];
  v46[1] = v29.i8[2];
  *int8x16_t v47 = v8.i8[3];
  v47[1] = v29.i8[3];
  *int8x16_t v48 = v8.i8[4];
  v48[1] = v29.i8[4];
  *int8x16_t v49 = v8.i8[5];
  v49[1] = v29.i8[5];
  *int8x16_t v50 = v8.i8[6];
  v50[1] = v29.i8[6];
  *uint8x16_t result = v8.i8[7];
  result[1] = v29.i8[7];
  return result;
}

uint64_t SimpleVFilter16i_NEON(uint64_t result, int a2, unsigned int a3)
{
  uint8x16_t v3 = (uint8x16_t)vdupq_n_s8(a3);
  int v4 = -3;
  v5.i64[0] = 0x8080808080808080;
  v5.i64[1] = 0x8080808080808080;
  v6.i64[0] = 0x303030303030303;
  v6.i64[1] = 0x303030303030303;
  v7.i64[0] = 0x404040404040404;
  v7.i64[1] = 0x404040404040404;
  uint8x16_t v8 = (uint8x16_t *)(result + 4 * a2);
  do
  {
    int8x16_t v9 = *(int8x16_t *)((char *)v8 - a2);
    uint8x16_t v10 = vabdq_u8((uint8x16_t)v9, *v8);
    int8x16_t v11 = veorq_s8(v9, v5);
    int8x16_t v12 = veorq_s8(*(int8x16_t *)v8, v5);
    int8x16_t v13 = vqsubq_s8(v12, v11);
    int8x16_t v14 = vbicq_s8(vqaddq_s8(v13, vqaddq_s8(v13, vqaddq_s8(vqsubq_s8(veorq_s8(*(int8x16_t *)((char *)v8 - 2 * a2), v5), veorq_s8(*(int8x16_t *)((char *)v8 + a2), v5)), v13))), (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8(v10, v10), vshrq_n_u8(vabdq_u8(*(uint8x16_t *)((char *)v8 - 2 * a2), *(uint8x16_t *)((char *)v8 + a2)), 1uLL)), v3));
    *(int8x16_t *)((char *)v8 - a2) = veorq_s8(vqaddq_s8(v11, vshrq_n_s8(vqaddq_s8(v14, v6), 3uLL)), v5);
    *(int8x16_t *)uint8x16_t v8 = veorq_s8(vqsubq_s8(v12, vshrq_n_s8(vqaddq_s8(v14, v7), 3uLL)), v5);
    uint8x16_t v8 = (uint8x16_t *)((char *)v8 + 4 * a2);
  }
  while (!__CFADD__(v4++, 1));
  return result;
}

__int8 *SimpleHFilter16i_NEON(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = 4;
  do
  {
    uint8x16_t result = SimpleHFilter16_NEON((__int8 *)(a1 + v6), a2, a3);
    v6 += 4;
  }
  while (v6 != 16);
  return result;
}

double DC4_NEON(uint64_t a1, uint16x8_t a2)
{
  *(uint16x4_t *)a2.i8 = vpaddl_u8(*(uint8x8_t *)(a1 - 32));
  *(int16x4_t *)a2.i8 = vpadd_s16(*(int16x4_t *)a2.i8, *(int16x4_t *)a2.i8);
  *(int8x8_t *)a2.i8 = vdup_lane_s8(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(a2, *(uint8x8_t *)(a1 - 1)), *(uint8x8_t *)(a1 + 31)), *(uint8x8_t *)(a1 + 63)), *(uint8x8_t *)(a1 + 95)), 3uLL), 0);
  *(_DWORD *)a1 = a2.i32[0];
  *(_DWORD *)(a1 + 32) = a2.i32[0];
  *(_DWORD *)(a1 + 64) = a2.i32[0];
  *(_DWORD *)(a1 + 96) = a2.i32[0];
  return *(double *)a2.i64;
}

int8x8_t TM4_NEON(char *a1)
{
  v1 = a1 - 33;
  uint8x8_t v2 = (uint8x8_t)vld1_dup_s8(v1);
  uint16x8_t v3 = vsubl_u8(*(uint8x8_t *)(a1 - 32), v2);
  int v4 = a1 - 1;
  uint8x8_t v5 = (uint8x8_t)vld1_dup_s8(v4);
  uint64_t v6 = a1 + 31;
  uint8x8_t v7 = (uint8x8_t)vld1_dup_s8(v6);
  uint8x16_t v8 = a1 + 63;
  uint8x8_t v9 = (uint8x8_t)vld1_dup_s8(v8);
  uint8x16_t v10 = a1 + 95;
  uint8x8_t v11 = (uint8x8_t)vld1_dup_s8(v10);
  int16x8_t v12 = (int16x8_t)vaddw_u8(v3, v9);
  *(_DWORD *)a1 = vqmovun_s16((int16x8_t)vaddw_u8(v3, v5)).u32[0];
  *((_DWORD *)a1 + 8) = vqmovun_s16((int16x8_t)vaddw_u8(v3, v7)).u32[0];
  int8x8_t result = vqmovun_s16((int16x8_t)vaddw_u8(v3, v11));
  *((_DWORD *)a1 + 16) = vqmovun_s16(v12).u32[0];
  *((_DWORD *)a1 + 24) = result.i32[0];
  return result;
}

uint8x8_t VE4_NEON(_DWORD *a1)
{
  uint8x8_t result = vrhadd_u8(vhadd_u8(*(uint8x8_t *)((char *)a1 - 33), (uint8x8_t)vshrd_n_u64(*(void *)((char *)a1 - 33), 0x10uLL)), (uint8x8_t)vshrd_n_u64(*(void *)((char *)a1 - 33), 8uLL));
  *a1 = result.i32[0];
  a1[8] = result.i32[0];
  a1[16] = result.i32[0];
  a1[24] = result.i32[0];
  return result;
}

uint8x8_t RD4_NEON(uint64_t a1)
{
  unint64_t v1 = (unint64_t)vorr_s8((int8x8_t)(((unint64_t)*(unsigned __int8 *)(a1 - 1) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 31) << 16) | *(unsigned __int8 *)(a1 + 95) | ((unint64_t)*(unsigned __int8 *)(a1 + 63) << 8)), (int8x8_t)vshld_n_s64(*(void *)(a1 - 33), 0x20uLL));
  uint8x8_t v2 = (uint8x8_t)vshrd_n_u64(v1, 0x10uLL);
  v2.i8[6] = BYTE4(*(void *)(a1 - 33));
  uint8x8_t result = vrhadd_u8(vhadd_u8(v2, (uint8x8_t)v1), (uint8x8_t)vshrd_n_u64(v1, 8uLL));
  *(_DWORD *)a1 = vshrd_n_u64(*(void *)&result, 0x18uLL);
  *(_DWORD *)(a1 + 32) = vshrd_n_u64(*(void *)&result, 0x10uLL);
  *(_DWORD *)(a1 + 64) = vshrd_n_u64(*(void *)&result, 8uLL);
  *(_DWORD *)(a1 + 96) = result.i32[0];
  return result;
}

uint8x8_t LD4_NEON(_DWORD *a1)
{
  uint8x8_t v1 = *(uint8x8_t *)((char *)a1 - 30);
  v1.i8[6] = v1.i8[5];
  uint8x8_t result = vrhadd_u8(vhadd_u8(*(uint8x8_t *)(a1 - 8), v1), *(uint8x8_t *)((char *)a1 - 31));
  *a1 = result.i32[0];
  a1[8] = vshrd_n_u64(*(void *)&result, 8uLL);
  a1[16] = vshrd_n_u64(*(void *)&result, 0x10uLL);
  a1[24] = vshrd_n_u64(*(void *)&result, 0x18uLL);
  return result;
}

uint64_t DC16TopLeft_NEON(uint64_t result)
{
  uint64_t v1 = 0;
  int16x8_t v2 = *(int16x8_t *)(result - 32);
  v2.i16[0] = vaddlvq_u8((uint8x16_t)v2);
  int16x8_t v4 = 0uLL;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v3 = result - 1;
    int16x8_t v4 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8((uint16x8_t)v4, *(uint8x8_t *)(v3 + v1)), *(uint8x8_t *)(v3 + (v1 | 0x20))), *(uint8x8_t *)(v3 + (v1 | 0x40))), *(uint8x8_t *)(v3 + (v1 | 0x60))), *(uint8x8_t *)(v3 + (v1 | 0x80))), *(uint8x8_t *)(v3 + (v1 | 0xA0))), *(uint8x8_t *)(v3 + (v1 | 0xC0))), *(uint8x8_t *)(v3 + (v1 | 0xE0)));
    uint64_t v1 = 256;
    char v5 = 0;
  }
  while ((v6 & 1) != 0);
  uint64_t v7 = 0;
  int8x16_t v8 = vdupq_lane_s8(vrshrn_n_s16(vaddq_s16(v4, v2), 5uLL), 0);
  do
  {
    *(int8x16_t *)(result + v7) = v8;
    v7 += 32;
  }
  while (v7 != 512);
  return result;
}

uint64_t TM16_NEON(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result - 33);
  uint8x16_t v2 = *(uint8x16_t *)(result - 32);
  uint16x8_t v3 = vsubl_u8(*(uint8x8_t *)v2.i8, (uint8x8_t)vdup_n_s8(v1));
  uint16x8_t v4 = vsubl_high_u8(v2, (uint8x16_t)vdupq_n_s8(v1));
  uint64_t v5 = result + 63;
  unsigned int v6 = -4;
  do
  {
    uint64_t v7 = (const char *)(v5 - 64);
    uint8x8_t v8 = (uint8x8_t)vld1_dup_s8(v7);
    uint8x8_t v9 = (const char *)(v5 - 32);
    uint8x8_t v10 = (uint8x8_t)vld1_dup_s8(v9);
    uint8x8_t v11 = (int8x16_t *)v5;
    uint8x8_t v12 = (uint8x8_t)vld1_dup_s8(v11->i8);
    uint8x8_t v11 = (int8x16_t *)((char *)v11 + 1);
    int8x16_t v13 = (const char *)(v5 + 32);
    uint8x8_t v14 = (uint8x8_t)vld1_dup_s8(v13);
    *(int8x16_t *)(v5 - 63) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v3, v8)), (int16x8_t)vaddw_u8(v4, v8));
    *(int8x16_t *)(v5 - 31) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v3, v10)), (int16x8_t)vaddw_u8(v4, v10));
    int8x16_t *v11 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v3, v12)), (int16x8_t)vaddw_u8(v4, v12));
    *(int8x16_t *)(v5 + 33) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v3, v14)), (int16x8_t)vaddw_u8(v4, v14));
    v6 += 4;
    v5 += 128;
  }
  while (v6 < 0xC);
  return result;
}

uint64_t VE16_NEON(uint64_t result)
{
  uint64_t v1 = 0;
  long long v2 = *(_OWORD *)(result - 32);
  do
  {
    *(_OWORD *)(result + v1) = v2;
    v1 += 32;
  }
  while (v1 != 512);
  return result;
}

int8x16_t HE16_NEON(uint64_t a1)
{
  uint64_t v1 = 0;
  do
  {
    long long v2 = (const char *)(a1 + v1 - 1);
    int8x16_t result = vld1q_dup_s8(v2);
    *(int8x16_t *)(a1 + v1) = result;
    v1 += 32;
  }
  while (v1 != 512);
  return result;
}

uint64_t DC16NoTop_NEON(uint64_t result)
{
  uint64_t v1 = 0;
  int16x8_t v3 = 0uLL;
  char v4 = 1;
  do
  {
    char v5 = v4;
    uint64_t v2 = result - 1;
    int16x8_t v3 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8((uint16x8_t)v3, *(uint8x8_t *)(v2 + v1)), *(uint8x8_t *)(v2 + (v1 | 0x20))), *(uint8x8_t *)(v2 + (v1 | 0x40))), *(uint8x8_t *)(v2 + (v1 | 0x60))), *(uint8x8_t *)(v2 + (v1 | 0x80))), *(uint8x8_t *)(v2 + (v1 | 0xA0))), *(uint8x8_t *)(v2 + (v1 | 0xC0))), *(uint8x8_t *)(v2 + (v1 | 0xE0)));
    uint64_t v1 = 256;
    char v4 = 0;
  }
  while ((v5 & 1) != 0);
  uint64_t v6 = 0;
  int8x16_t v7 = vdupq_lane_s8(vrshrn_n_s16(v3, 4uLL), 0);
  do
  {
    *(int8x16_t *)(result + v6) = v7;
    v6 += 32;
  }
  while (v6 != 512);
  return result;
}

uint64_t DC16NoLeft_NEON(uint64_t result)
{
  uint64_t v1 = 0;
  int16x8_t v2 = *(int16x8_t *)(result - 32);
  v2.i16[0] = vaddlvq_u8((uint8x16_t)v2);
  int8x16_t v3 = vdupq_lane_s8(vrshrn_n_s16(v2, 4uLL), 0);
  do
  {
    *(int8x16_t *)(result + v1) = v3;
    v1 += 32;
  }
  while (v1 != 512);
  return result;
}

uint64_t DC16NoTopLeft_NEON(uint64_t result)
{
  uint64_t v1 = 0;
  *(void *)&long long v2 = 0x8080808080808080;
  *((void *)&v2 + 1) = 0x8080808080808080;
  do
  {
    *(_OWORD *)(result + v1) = v2;
    v1 += 32;
  }
  while (v1 != 512);
  return result;
}

uint64_t DC8uv_NEON(uint64_t result, uint16x8_t a2)
{
  uint64_t v2 = 0;
  a2.i64[0] = *(void *)(result - 32);
  a2.i16[0] = vaddlv_u8(*(uint8x8_t *)a2.i8);
  *(int8x8_t *)a2.i8 = vdup_lane_s8(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(a2, *(uint8x8_t *)(result - 1)), *(uint8x8_t *)(result + 31)), *(uint8x8_t *)(result + 63)), *(uint8x8_t *)(result + 95)), *(uint8x8_t *)(result + 127)), *(uint8x8_t *)(result + 159)), *(uint8x8_t *)(result + 191)), *(uint8x8_t *)(result + 223)), 4uLL), 0);
  do
  {
    *(void *)(result + v2) = a2.i64[0];
    v2 += 32;
  }
  while (v2 != 256);
  return result;
}

uint64_t TM8uv_NEON(uint64_t result)
{
  uint64_t v1 = (const char *)(result - 33);
  uint8x8_t v2 = (uint8x8_t)vld1_dup_s8(v1);
  uint16x8_t v3 = vsubl_u8(*(uint8x8_t *)(result - 32), v2);
  uint64_t v4 = result + 63;
  char v5 = 1;
  do
  {
    uint64_t v6 = (const char *)(v4 - 64);
    uint8x8_t v7 = (uint8x8_t)vld1_dup_s8(v6);
    uint8x8_t v8 = (const char *)(v4 - 32);
    uint8x8_t v9 = (uint8x8_t)vld1_dup_s8(v8);
    uint8x8_t v10 = (int8x8_t *)v4;
    uint8x8_t v11 = (uint8x8_t)vld1_dup_s8((const char *)v10);
    uint8x8_t v10 = (int8x8_t *)((char *)v10 + 1);
    char v12 = v5;
    int8x16_t v13 = (const char *)(v4 + 32);
    uint8x8_t v14 = (uint8x8_t)vld1_dup_s8(v13);
    *(int8x8_t *)(v4 - 63) = vqmovun_s16((int16x8_t)vaddw_u8(v3, v7));
    *(int8x8_t *)(v4 - 31) = vqmovun_s16((int16x8_t)vaddw_u8(v3, v9));
    int8x8_t *v10 = vqmovun_s16((int16x8_t)vaddw_u8(v3, v11));
    *(int8x8_t *)(v4 + 33) = vqmovun_s16((int16x8_t)vaddw_u8(v3, v14));
    v4 += 128;
    char v5 = 0;
  }
  while ((v12 & 1) != 0);
  return result;
}

uint64_t VE8uv_NEON(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(result - 32);
  do
  {
    *(void *)(result + v1) = v2;
    v1 += 32;
  }
  while (v1 != 256);
  return result;
}

int8x8_t HE8uv_NEON(uint64_t a1)
{
  uint64_t v1 = 0;
  do
  {
    uint64_t v2 = (const char *)(a1 + v1 - 1);
    int8x8_t result = vld1_dup_s8(v2);
    *(int8x8_t *)(a1 + v1) = result;
    v1 += 32;
  }
  while (v1 != 256);
  return result;
}

uint64_t DC8uvNoTop_NEON(uint64_t result)
{
  uint64_t v1 = 0;
  int8x8_t v2 = vdup_lane_s8(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)(result + 31), *(uint8x8_t *)(result - 1)), *(uint8x8_t *)(result + 63)), *(uint8x8_t *)(result + 95)), *(uint8x8_t *)(result + 127)), *(uint8x8_t *)(result + 159)), *(uint8x8_t *)(result + 191)), *(uint8x8_t *)(result + 223)), 3uLL), 0);
  do
  {
    *(int8x8_t *)(result + v1) = v2;
    v1 += 32;
  }
  while (v1 != 256);
  return result;
}

uint64_t DC8uvNoLeft_NEON(uint64_t result, int16x8_t a2)
{
  uint64_t v2 = 0;
  a2.i64[0] = *(void *)(result - 32);
  a2.i16[0] = vaddlv_u8(*(uint8x8_t *)a2.i8);
  *(int8x8_t *)a2.i8 = vdup_lane_s8(vrshrn_n_s16(a2, 3uLL), 0);
  do
  {
    *(void *)(result + v2) = a2.i64[0];
    v2 += 32;
  }
  while (v2 != 256);
  return result;
}

uint64_t DC8uvNoTopLeft_NEON(uint64_t result)
{
  for (uint64_t i = 0; i != 256; i += 32)
    *(void *)(result + i) = 0x8080808080808080;
  return result;
}

int8x8_t TransformOne_NEON(int8x16_t *a1, __int32 *a2)
{
  int8x16_t v2 = a1[1];
  v3.i64[0] = vextq_s8(*a1, *a1, 8uLL).u64[0];
  v3.i64[1] = vextq_s8(v2, v2, 8uLL).u64[0];
  int16x8_t v4 = vdupq_n_s16(0x4E7Bu);
  int16x8_t v5 = vdupq_n_s16(0x4546u);
  int8x16_t v6 = (int8x16_t)vqdmulhq_s16(v3, v5);
  int16x8_t v7 = vsraq_n_s16(v3, vqdmulhq_s16(v3, v4), 1uLL);
  *(int16x4_t *)v8.i8 = vqadd_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v2.i8);
  int16x4_t v9 = vqsub_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v2.i8);
  *(int16x4_t *)v2.i8 = vqsub_s16(*(int16x4_t *)v6.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL));
  *(int16x4_t *)v7.i8 = vqadd_s16(*(int16x4_t *)v7.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v8.u64[1] = (unint64_t)v9;
  v7.i64[1] = v2.i64[0];
  int16x8_t v10 = vqaddq_s16(v8, v7);
  int8x16_t v11 = (int8x16_t)vqsubq_s16(v8, v7);
  v7.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
  v7.i64[1] = v11.i64[0];
  int16x8_t v12 = vzip1q_s16(v10, v7);
  int16x8_t v13 = vzip2q_s16(v10, v7);
  int16x8_t v14 = vzip1q_s16(v12, v13);
  int8x16_t v15 = (int8x16_t)vzip2q_s16(v12, v13);
  v12.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  v12.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
  int8x16_t v16 = (int8x16_t)vqdmulhq_s16(v12, v5);
  int16x8_t v17 = vsraq_n_s16(v12, vqdmulhq_s16(v12, v4), 1uLL);
  *(int16x4_t *)v4.i8 = vqadd_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v15.i8);
  *(int16x4_t *)v15.i8 = vqsub_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v15.i8);
  *(int16x4_t *)v14.i8 = vqsub_s16(*(int16x4_t *)v16.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL));
  *(int16x4_t *)v17.i8 = vqadd_s16(*(int16x4_t *)v17.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  v4.i64[1] = v15.i64[0];
  v17.i64[1] = v14.i64[0];
  int16x8_t v18 = vqaddq_s16(v4, v17);
  int8x16_t v19 = (int8x16_t)vqsubq_s16(v4, v17);
  v14.i64[0] = vextq_s8(v19, v19, 8uLL).u64[0];
  v14.i64[1] = v19.i64[0];
  int16x8_t v20 = vzip1q_s16(v18, v14);
  int16x8_t v21 = vzip2q_s16(v18, v14);
  int16x8_t v22 = vzip1q_s16(v20, v21);
  int16x8_t v23 = vzip2q_s16(v20, v21);
  v20.i32[0] = *a2;
  v20.i32[1] = a2[8];
  v4.i32[0] = a2[16];
  v4.i32[1] = a2[24];
  int16x8_t v24 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v4.i8), v23, 3uLL);
  *(int8x8_t *)v23.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v20.i8), v22, 3uLL));
  *a2 = v23.i32[0];
  a2[8] = v23.i32[1];
  int8x8_t result = vqmovun_s16(v24);
  a2[16] = result.i32[0];
  a2[24] = result.i32[1];
  return result;
}

int8x16_t DoFilter6_NEON(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, int8x16_t *a4, int8x16_t *a5, int8x16_t *a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14)
{
  v14.i64[0] = 0x8080808080808080;
  v14.i64[1] = 0x8080808080808080;
  int8x16_t v15 = veorq_s8(a8, v14);
  int8x16_t v16 = veorq_s8(a9, v14);
  int8x16_t v17 = veorq_s8(a10, v14);
  int8x16_t v18 = veorq_s8(a11, v14);
  int8x16_t v19 = vandq_s8(a14, a13);
  int8x16_t v20 = vqsubq_s8(v17, v16);
  int8x16_t v21 = vqaddq_s8(v20, vqaddq_s8(v20, vqaddq_s8(vqsubq_s8(v15, v18), v20)));
  int16x8_t v22 = (int16x8_t)vandq_s8(v21, v19);
  v23.i64[0] = 0x303030303030303;
  v23.i64[1] = 0x303030303030303;
  v24.i64[0] = 0x404040404040404;
  v24.i64[1] = 0x404040404040404;
  int8x16_t v25 = vqaddq_s8(v16, vshrq_n_s8(vqaddq_s8((int8x16_t)v22, v23), 3uLL));
  int8x16_t v26 = vqsubq_s8(v17, vshrq_n_s8(vqaddq_s8((int8x16_t)v22, v24), 3uLL));
  int8x16_t v27 = vandq_s8(v21, veorq_s8(v19, a13));
  v19.i64[0] = 0x909090909090909;
  v19.i64[1] = 0x909090909090909;
  v22.i64[0] = -1;
  v22.i64[1] = -1;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  int16x8_t v28 = vmlal_s8((int16x8_t)v23, (int8x8_t)0x909090909090909, *(int8x8_t *)v27.i8);
  int16x8_t v29 = vmlal_high_s8(v22, v19, v27);
  v19.i64[0] = 0x1212121212121212;
  v19.i64[1] = 0x1212121212121212;
  int8x16_t v30 = vqrshrn_high_n_s16(vqrshrn_n_s16(v28, 6uLL), v29, 6uLL);
  int8x16_t v31 = vqrshrn_high_n_s16(vqrshrn_n_s16(v28, 7uLL), v29, 7uLL);
  int8x16_t v32 = vqrshrn_high_n_s16(vqrshrn_n_s16(vmlal_s8(v28, (int8x8_t)0x1212121212121212, *(int8x8_t *)v27.i8), 7uLL), vmlal_high_s8(v29, v19, v27), 7uLL);
  *a3 = veorq_s8(vqaddq_s8(v25, v32), v14);
  *a4 = veorq_s8(vqsubq_s8(v26, v32), v14);
  *a5 = veorq_s8(vqsubq_s8(v18, v30), v14);
  *a2 = veorq_s8(vqaddq_s8(v15, v30), v14);
  *a6 = veorq_s8(vqsubq_s8(veorq_s8(a12, v14), v31), v14);
  int8x16_t result = veorq_s8(vqaddq_s8(veorq_s8(a7, v14), v31), v14);
  *a1 = result;
  return result;
}

uint64_t WebPRescalerImportRowExpand_C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 60) >= *(_DWORD *)(result + 48)) {
    WebPRescalerImportRowExpand_C_cold_4();
  }
  if (!*(_DWORD *)result) {
    WebPRescalerImportRowExpand_C_cold_1();
  }
  int v2 = *(_DWORD *)(result + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned int *)(result + 8);
    uint64_t v5 = *(int *)(result + 52) * (uint64_t)v2;
    uint64_t v6 = *(void *)(result + 96);
    int v7 = *(_DWORD *)(result + 8);
    do
    {
      int v8 = *(unsigned __int8 *)(a2 + v3);
      uint64_t v9 = v3 + v4;
      int v10 = v8;
      if (*(int *)(result + 44) >= 2) {
        int v10 = *(unsigned __int8 *)(a2 + v9);
      }
      int v11 = *(_DWORD *)(result + 36);
      *(_DWORD *)(v6 + 4 * v3) = v11 * v8;
      if (v9 < v5)
      {
        uint64_t v12 = v7;
        do
        {
          v11 -= *(_DWORD *)(result + 40);
          if (v11 < 0)
          {
            LODWORD(v9) = v9 + v2;
            if ((int)v9 >= *(_DWORD *)(result + 44) * v2) {
              WebPRescalerImportRowExpand_C_cold_3();
            }
            int v8 = v10;
            int v10 = *(unsigned __int8 *)(a2 + (int)v9);
            int v13 = *(_DWORD *)(result + 36);
            v11 += v13;
          }
          else
          {
            int v13 = *(_DWORD *)(result + 36);
          }
          *(_DWORD *)(v6 + 4 * v12) = (v8 - v10) * v11 + v13 * v10;
          v12 += v4;
        }
        while (v12 < v5);
      }
      if (*(_DWORD *)(result + 40))
      {
        if (v11) {
          WebPRescalerImportRowExpand_C_cold_2();
        }
      }
      ++v3;
      ++v7;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t WebPRescalerImportRowShrink_C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 60) >= *(_DWORD *)(result + 48)) {
    WebPRescalerImportRowShrink_C_cold_4();
  }
  if (*(_DWORD *)result) {
    WebPRescalerImportRowShrink_C_cold_3();
  }
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(int *)(result + 52) * (uint64_t)*(int *)(result + 8);
    do
    {
      if ((int)v4 > (int)v3)
      {
        int v5 = 0;
        LODWORD(v6) = 0;
        uint64_t v7 = v3;
        int v8 = v3;
        do
        {
          int v9 = *(_DWORD *)(result + 36);
          BOOL v10 = __OFADD__(v9, v5);
          v5 += v9;
          if ((v5 < 0) ^ v10 | (v5 == 0))
          {
            int v13 = 0;
            int v12 = *(_DWORD *)(result + 40);
          }
          else
          {
            uint64_t v11 = 0;
            do
            {
              if (v8 + v11 >= *(int *)(result + 44) * (uint64_t)(int)v2) {
                WebPRescalerImportRowShrink_C_cold_2();
              }
              int v12 = *(_DWORD *)(result + 40);
              int v13 = *(unsigned __int8 *)(a2 + v8 + v11);
              LODWORD(v6) = v6 + v13;
              v11 += v2;
              BOOL v10 = __OFSUB__(v5, v12);
              v5 -= v12;
            }
            while (!((v5 < 0) ^ v10 | (v5 == 0)));
            v8 += v11;
          }
          *(_DWORD *)(*(void *)(result + 96) + 4 * v7) = v13 * v5 + v12 * v6;
          unint64_t v6 = (*(unsigned int *)(result + 12) * (unint64_t)-(v13 * v5) + 0x80000000) >> 32;
          v7 += v2;
        }
        while (v7 < v4);
        if (v5) {
          WebPRescalerImportRowShrink_C_cold_1();
        }
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t WebPRescalerImportRow(_DWORD *a1)
{
  if (a1[15] >= a1[12]) {
    WebPRescalerImportRow_cold_1();
  }
  uint64_t v1 = &WebPRescalerImportRowShrink;
  if (*a1) {
    uint64_t v1 = &WebPRescalerImportRowExpand;
  }
  uint64_t v2 = (uint64_t (*)(void))*v1;

  return v2();
}

uint64_t WebPRescalerExportRow(uint64_t result)
{
  if (*(int *)(result + 24) <= 0)
  {
    uint64_t v1 = result;
    int v2 = *(_DWORD *)(result + 56);
    if (*(_DWORD *)(result + 64) >= v2) {
      WebPRescalerExportRow_cold_3();
    }
    if (*(_DWORD *)(result + 4))
    {
      uint64_t v3 = &WebPRescalerExportRowExpand;
    }
    else
    {
      if (!*(_DWORD *)(result + 20))
      {
        if (*(_DWORD *)(result + 48) != v2 || *(_DWORD *)(result + 36) != 1) {
          WebPRescalerExportRow_cold_2();
        }
        if (*(_DWORD *)(result + 44) != 1 || (int v4 = *(_DWORD *)(result + 52), v4 > 2)) {
          WebPRescalerExportRow_cold_1();
        }
        if (v4 * *(_DWORD *)(result + 8) >= 1)
        {
          uint64_t v5 = 0;
          uint64_t v6 = *(void *)(result + 88);
          do
          {
            *(unsigned char *)(*(void *)(result + 72) + v5) = *(_DWORD *)(v6 + 4 * v5);
            uint64_t v6 = *(void *)(result + 88);
            *(_DWORD *)(v6 + 4 * v5++) = 0;
          }
          while (v5 < *(int *)(result + 52) * (uint64_t)*(int *)(result + 8));
        }
        goto LABEL_8;
      }
      uint64_t v3 = &WebPRescalerExportRowShrink;
    }
    int8x16_t result = ((uint64_t (*)(uint64_t))*v3)(result);
LABEL_8:
    *(_DWORD *)(v1 + 24) += *(_DWORD *)(v1 + 28);
    *(void *)(v1 + 72) += *(int *)(v1 + 80);
    ++*(_DWORD *)(v1 + 64);
  }
  return result;
}

void WebPRescalerDspInit()
{
  if ((uint64_t (*)())WebPRescalerDspInit_WebPRescalerDspInit_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPRescalerImportRowExpand = (uint64_t)WebPRescalerImportRowExpand_C;
    WebPRescalerImportRowShrinuint64_t k = (uint64_t)WebPRescalerImportRowShrink_C;
    WebPRescalerDspInitNEON();
    if (!WebPRescalerExportRowExpand) {
      WebPRescalerDspInit_cold_1();
    }
    if (!WebPRescalerExportRowShrink) {
      WebPRescalerDspInit_cold_2();
    }
    if (!WebPRescalerImportRowExpand) {
      WebPRescalerDspInit_cold_3();
    }
    if (!WebPRescalerImportRowShrink) {
      WebPRescalerDspInit_cold_4();
    }
    WebPRescalerDspInit_WebPRescalerDspInit_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

void WebPRescalerImportRowExpand_C_cold_1()
{
}

void WebPRescalerImportRowExpand_C_cold_2()
{
  __assert_rtn("WebPRescalerImportRowExpand_C", "rescaler.c", 58, "wrk->x_sub == 0 || accum == 0");
}

void WebPRescalerImportRowExpand_C_cold_3()
{
}

void WebPRescalerImportRowExpand_C_cold_4()
{
}

void WebPRescalerImportRowShrink_C_cold_1()
{
  __assert_rtn("WebPRescalerImportRowShrink_C", "rescaler.c", 92, "accum == 0");
}

void WebPRescalerImportRowShrink_C_cold_2()
{
}

void WebPRescalerImportRowShrink_C_cold_3()
{
}

void WebPRescalerImportRowShrink_C_cold_4()
{
}

void WebPRescalerImportRow_cold_1()
{
}

void WebPRescalerExportRow_cold_1()
{
  __assert_rtn("WebPRescalerExportRow", "rescaler.c", 180, "wrk->src_width == 1 && wrk->dst_width <= 2");
}

void WebPRescalerExportRow_cold_2()
{
  __assert_rtn("WebPRescalerExportRow", "rescaler.c", 179, "wrk->src_height == wrk->dst_height && wrk->x_add == 1");
}

void WebPRescalerExportRow_cold_3()
{
}

void WebPRescalerDspInit_cold_1()
{
  __assert_rtn("WebPRescalerDspInit_body", "rescaler.c", 247, "WebPRescalerExportRowExpand != NULL");
}

void WebPRescalerDspInit_cold_2()
{
  __assert_rtn("WebPRescalerDspInit_body", "rescaler.c", 248, "WebPRescalerExportRowShrink != NULL");
}

void WebPRescalerDspInit_cold_3()
{
  __assert_rtn("WebPRescalerDspInit_body", "rescaler.c", 249, "WebPRescalerImportRowExpand != NULL");
}

void WebPRescalerDspInit_cold_4()
{
  __assert_rtn("WebPRescalerDspInit_body", "rescaler.c", 250, "WebPRescalerImportRowShrink != NULL");
}

void WebPRescalerDspInitNEON()
{
  WebPRescalerExportRowExpand = (uint64_t)RescalerExportRowExpand_NEON;
  WebPRescalerExportRowShrinuint64_t k = (uint64_t)RescalerExportRowShrink_NEON;
}

int32x4_t *RescalerExportRowExpand_NEON(int32x4_t *result, int32x2_t a2, uint32x2_t a3, uint32x2_t a4)
{
  if (result[4].i32[0] >= result[3].i32[2]) {
    RescalerExportRowExpand_NEON_cold_4();
  }
  int v4 = result[1].i32[2];
  if (v4 >= 1) {
    RescalerExportRowExpand_NEON_cold_1();
  }
  if (!result->i32[1]) {
    RescalerExportRowExpand_NEON_cold_2();
  }
  unint64_t v5 = result[2].i32[0];
  if (!v5) {
    RescalerExportRowExpand_NEON_cold_3();
  }
  uint64_t v6 = result[4].i64[1];
  uint64_t v7 = (result->i32[2] * result[3].i32[1]);
  unint64_t v8 = v7 & 0xFFFFFFF8;
  int v9 = (int32x4_t *)result[6].i64[0];
  unsigned int v10 = result[1].u32[0];
  a2.i32[0] = v10 >> 1;
  if (v4)
  {
    uint64_t v11 = (uint32x4_t *)result[5].i64[1];
    unint64_t v12 = ((unint64_t)-v4 << 32) / v5;
    if ((int)v8 < 1)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      unint64_t v13 = 0;
      a3.i32[0] = -(int)v12;
      a4.i32[0] = v12;
      int8x16_t v14 = v11 + 1;
      int8x16_t result = v9 + 1;
      do
      {
        int32x4_t v15 = vraddhn_high_s64(vraddhn_s64((int64x2_t)vmlal_lane_u32(vmull_lane_u32(*(uint32x2_t *)v14[-1].i8, a4, 0), *(uint32x2_t *)result[-1].i8, a3, 0), (int64x2_t)0), (int64x2_t)vmlal_high_lane_u32(vmull_high_lane_u32(v14[-1], a4, 0), (uint32x4_t)result[-1], a3, 0), (int64x2_t)0);
        uint32x4_t v16 = *(uint32x4_t *)result;
        result += 2;
        uint32x4_t v17 = v16;
        uint32x4_t v18 = *v14;
        v14 += 2;
        *(uint8x8_t *)(v6 + v13) = vqmovn_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vqrdmulhq_lane_s32(v15, a2, 0), (int16x8_t)vqrdmulhq_lane_s32(vraddhn_high_s64(vraddhn_s64((int64x2_t)vmlal_lane_u32(vmull_lane_u32(*(uint32x2_t *)v18.i8, a4, 0), *(uint32x2_t *)v17.i8, a3, 0), (int64x2_t)0), (int64x2_t)vmlal_high_lane_u32(vmull_high_lane_u32(v18, a4, 0), v17, a3, 0), (int64x2_t)0),
                                                                         a2,
                                                                         0)));
        v13 += 8;
      }
      while (v13 < v8);
    }
    if ((int)v13 < (int)v7)
    {
      int8x16_t v21 = (unsigned char *)(v6 + v13);
      int16x8_t v22 = &v11->i32[v13];
      int8x16_t v23 = &v9->i32[v13];
      uint64_t v24 = v7 - v13;
      do
      {
        unsigned int v26 = *v23++;
        unsigned int v25 = v26;
        unsigned int v27 = *v22++;
        unint64_t v28 = (((v12 * (unint64_t)v27 + v25 * (unint64_t)-(int)v12 + 0x80000000) >> 32)
             * v10
             + 0x80000000) >> 32;
        if ((int)v28 > 255) {
          LOBYTE(v28) = -1;
        }
        *v21++ = v28;
        --v24;
      }
      while (v24);
    }
  }
  else
  {
    if ((int)v8 < 1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      unint64_t v19 = 0;
      int8x16_t v20 = v9 + 1;
      do
      {
        *(uint8x8_t *)(v6 + v19) = vqmovn_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vqrdmulhq_lane_s32(v20[-1], a2, 0), (int16x8_t)vqrdmulhq_lane_s32(*v20, a2, 0)));
        v19 += 8;
        v20 += 2;
      }
      while (v19 < v8);
    }
    if ((int)v19 < (int)v7)
    {
      int16x8_t v29 = (unsigned char *)(v6 + v19);
      int8x16_t v30 = &v9->i32[v19];
      uint64_t v31 = v7 - v19;
      do
      {
        unsigned int v32 = *v30++;
        unint64_t v33 = (v32 * (unint64_t)v10 + 0x80000000) >> 32;
        if ((int)v33 > 255) {
          LOBYTE(v33) = -1;
        }
        *v29++ = v33;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t RescalerExportRowShrink_NEON(uint64_t result, int32x2_t a2, int32x2_t a3)
{
  if (*(_DWORD *)(result + 64) >= *(_DWORD *)(result + 56)) {
    RescalerExportRowShrink_NEON_cold_3();
  }
  int v3 = *(_DWORD *)(result + 24);
  if (v3 >= 1) {
    RescalerExportRowShrink_NEON_cold_1();
  }
  if (*(_DWORD *)(result + 4)) {
    RescalerExportRowShrink_NEON_cold_2();
  }
  uint64_t v4 = *(void *)(result + 72);
  unint64_t v5 = *(uint32x4_t **)(result + 88);
  uint64_t v6 = (*(_DWORD *)(result + 8) * *(_DWORD *)(result + 52));
  unint64_t v7 = v6 & 0xFFFFFFF8;
  int v9 = *(_DWORD *)(result + 16);
  unsigned int v8 = *(_DWORD *)(result + 20);
  a2.i32[0] = v8 >> 1;
  if (v3 * v9)
  {
    unsigned int v10 = *(int32x4_t **)(result + 96);
    unsigned int v11 = -(v3 * v9);
    if ((int)v7 < 1)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      unint64_t v12 = 0;
      a3.i32[0] = v11 >> 1;
      unint64_t v13 = v5 + 1;
      int8x16_t v14 = v10 + 1;
      do
      {
        uint32x4_t v15 = (uint32x4_t)vqdmulhq_lane_s32(v14[-1], a3, 0);
        uint32x4_t v16 = (uint32x4_t)vqdmulhq_lane_s32(*v14, a3, 0);
        *(uint8x8_t *)(v4 + v12) = vqmovn_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vqrdmulhq_lane_s32((int32x4_t)vqsubq_u32(v13[-1], v15), a2, 0), (int16x8_t)vqrdmulhq_lane_s32((int32x4_t)vqsubq_u32(*v13, v16), a2, 0)));
        v13[-1] = v15;
        uint32x4_t *v13 = v16;
        v12 += 8;
        v13 += 2;
        v14 += 2;
      }
      while (v12 < v7);
    }
    if ((int)v12 < (int)v6)
    {
      unint64_t v19 = (unsigned char *)(v4 + v12);
      int8x16_t v20 = &v5->i32[v12];
      int8x16_t v21 = &v10->i32[v12];
      uint64_t v22 = v6 - v12;
      do
      {
        unsigned int v23 = *v21++;
        unint64_t v24 = (v23 * (unint64_t)v11) >> 32;
        unint64_t v25 = (v8 * (unint64_t)(*v20 - v24) + 0x80000000) >> 32;
        if ((int)v25 > 255) {
          LOBYTE(v25) = -1;
        }
        *v19++ = v25;
        *v20++ = v24;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    if ((int)v7 < 1)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      unint64_t v17 = 0;
      uint32x4_t v18 = *(int32x4_t **)(result + 88);
      do
      {
        *(uint8x8_t *)(v4 + v17) = vqmovn_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vqrdmulhq_lane_s32(*v18, a2, 0), (int16x8_t)vqrdmulhq_lane_s32(v18[1], a2, 0)));
        v17 += 8;
        *uint32x4_t v18 = 0uLL;
        v18[1] = 0uLL;
        v18 += 2;
      }
      while (v17 < v7);
    }
    if ((int)v17 < (int)v6)
    {
      unsigned int v26 = (unsigned char *)(v4 + v17);
      unsigned int v27 = &v5->i32[v17];
      uint64_t v28 = v6 - v17;
      do
      {
        unint64_t v29 = (*v27 * (unint64_t)v8 + 0x80000000) >> 32;
        if ((int)v29 > 255) {
          LOBYTE(v29) = -1;
        }
        *v26++ = v29;
        *v27++ = 0;
        --v28;
      }
      while (v28);
    }
  }
  return result;
}

void RescalerExportRowExpand_NEON_cold_1()
{
  __assert_rtn("RescalerExportRowExpand_NEON", "rescaler_neon.c", 73, "wrk->y_accum <= 0");
}

void RescalerExportRowExpand_NEON_cold_2()
{
}

void RescalerExportRowExpand_NEON_cold_3()
{
  __assert_rtn("RescalerExportRowExpand_NEON", "rescaler_neon.c", 75, "wrk->y_sub != 0");
}

void RescalerExportRowExpand_NEON_cold_4()
{
}

void RescalerExportRowShrink_NEON_cold_1()
{
  __assert_rtn("RescalerExportRowShrink_NEON", "rescaler_neon.c", 130, "wrk->y_accum <= 0");
}

void RescalerExportRowShrink_NEON_cold_2()
{
}

void RescalerExportRowShrink_NEON_cold_3()
{
}

uint64_t WebPDequantizeLevels(unsigned char *a1, int a2, int a3, int a4, signed int a5)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (a5 > 0x64) {
    return 0;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2 >= 1)
    {
      unsigned int v9 = a3 - 1;
      if (a3 >= 1)
      {
        uint8x8_t v87 = a1;
        unsigned int v10 = a5 / 25;
        uint64_t result = 1;
        uint64_t v11 = a2;
        uint64_t v12 = a2 - 1;
        if (((2 * (a5 / 25)) | 1) > a2) {
          unsigned int v10 = v12 >> 1;
        }
        if ((int)((2 * v10) | 1) <= a3) {
          int v13 = v10;
        }
        else {
          int v13 = v9 >> 1;
        }
        int v86 = v13 - 1;
        if (v13 >= 1)
        {
          int v14 = 2 * v13;
          int v15 = (2 * v13 + 2) * a2;
          size_t v16 = 2 * a2;
          uint64_t result = (uint64_t)WebPSafeMalloc(1uLL, v16 + 2 * v15 + 4094);
          if (result)
          {
            int v84 = v9;
            int v88 = v13;
            int v17 = -v13;
            uint64_t v80 = 2 * a2;
            uint64_t v81 = 2 * v15;
            uint64_t v18 = a2;
            int v19 = v14 | 1;
            int v83 = a2;
            uint64_t v79 = (v14 | 1) * a2;
            uint64_t v20 = result + 2 * v79;
            int8x16_t v21 = (void *)(v20 - 2 * v18);
            char v85 = (char *)result;
            bzero(v21, v16);
            uint64_t v22 = v85;
            int v23 = 0;
            int v24 = 0;
            int v25 = 0;
            unsigned int v26 = &v85[v81];
            int v27 = 255;
            int v28 = 255;
            unint64_t v29 = v87;
            memset(v89, 0, sizeof(v89));
            do
            {
              uint64_t v30 = 0;
              int v31 = v24;
              int v32 = v28;
              do
              {
                uint64_t v33 = v29[v30];
                if (v32 > (int)v33)
                {
                  int v27 = v29[v30];
                  int v28 = v27;
                }
                if (v32 >= (int)v33) {
                  int v32 = v29[v30];
                }
                if (v31 < (int)v33)
                {
                  int v23 = v29[v30];
                  int v24 = v23;
                }
                if (v31 <= (int)v33) {
                  int v31 = v29[v30];
                }
                *((unsigned char *)v89 + v33) = 1;
                ++v30;
              }
              while (v18 != v30);
              v29 += a4;
              ++v25;
            }
            while (v25 != a3);
            int v34 = 0;
            uint64_t v35 = 0;
            int8x16_t v36 = &v26[v80];
            int v37 = v24 - v28;
            int v38 = -1;
            do
            {
              int v39 = v35 - v38;
              if ((int)v35 - v38 >= v37) {
                int v39 = v37;
              }
              if (v38 < 0) {
                int v39 = v37;
              }
              if (*((unsigned char *)v89 + v35))
              {
                ++v34;
                int v37 = v39;
                int v38 = v35;
              }
              ++v35;
            }
            while (v35 != 256);
            uint64_t v40 = 0;
            int8x16_t v41 = v36 + 2046;
            int v42 = 4 * v37;
            int v43 = 12 * v37;
            int v44 = (12 * v37) >> 2;
            uint64_t v45 = 4 * v37;
            uint64_t v46 = (uint64_t)v43 >> 2;
            int v47 = v44 * (v42 - 1);
            uint64_t v48 = 2044;
            int v49 = v42 - (v43 >> 2);
            do
            {
              uint64_t v50 = v40 + 1;
              if (v40 + 1 > v46)
              {
                if (v50 >= v45) {
                  LODWORD(v50) = 0;
                }
                else {
                  LODWORD(v50) = v47 / v49;
                }
              }
              *(_WORD *)&v36[2 * v40 + 2048] = v50 >> 2;
              *(_WORD *)&v36[v48] = -(__int16)(v50 >> 2);
              ++v40;
              v48 -= 2;
              v47 -= v46;
            }
            while (v40 != 1023);
            *int8x16_t v41 = 0;
            if (v34 >= 3 && v17 < a3)
            {
              int v51 = v88 + 1;
              uint64_t v52 = v83 - v88;
              int8x16_t v53 = v85;
              unsigned int v54 = 0x40000u / (v19 * v19);
              int8x16_t v55 = v87;
              do
              {
                uint64_t v56 = 0;
                __int16 v57 = 0;
                do
                {
                  v57 += v55[v56];
                  __int16 v58 = *((_WORD *)v21 + v56) + v57;
                  *(_WORD *)(v20 + 2 * v56) = v58 - v53[v56];
                  v53[v56++] = v58;
                }
                while (v18 != v56);
                if (&v53[v11] == (_WORD *)v20) {
                  int8x16_t v59 = v22;
                }
                else {
                  int8x16_t v59 = (char *)&v53[v11];
                }
                if (v17 >= v84 || v17 <= -1) {
                  uint64_t v61 = 0;
                }
                else {
                  uint64_t v61 = a4;
                }
                int v62 = v86;
                int8x16_t v63 = &v85[2 * v79 + 2 * v88];
                int8x16_t v64 = &v85[v81];
                uint64_t v65 = (v88 + 1);
                if (v17 >= v88)
                {
                  do
                  {
                    __int16 v66 = *(_WORD *)v63;
                    v63 -= 2;
                    *(_WORD *)int8x16_t v64 = (v54 * (unsigned __int16)(v66 + *(_WORD *)(v20 + 2 * v62))) >> 16;
                    v64 += 2;
                    ++v62;
                    --v65;
                  }
                  while (v65);
                  int v67 = v88 + 1;
                  if (v51 < (int)v52)
                  {
                    uint64_t v68 = 0;
                    do
                    {
                      *(_WORD *)&v26[2 * (v51 + v68)] = (v54
                                                                     * (unsigned __int16)(*(_WORD *)&v85[2 * v88 + 2 * (uint64_t)v51 + 2 * v79 + 2 * v68]
                                                                                        - *(_WORD *)(v20 + 2 * (int)v68))) >> 16;
                      ++v68;
                    }
                    while (v51 + v68 < v52);
                    int v67 = v51 + v68;
                  }
                  if (v67 < v83)
                  {
                    uint64_t v69 = v67;
                    int v70 = 2 * v83 - 2 - (v88 + v67);
                    int v71 = ~v88 + v67;
                    do
                      *(_WORD *)&v26[2 * v69++] = (v54
                                                               * (unsigned __int16)(2 * *(_WORD *)(v20 + 2 * v12)
                                                                                  - (*(_WORD *)(v20 + 2 * v70--)
                                                                                   + *(_WORD *)(v20 + 2 * v71++)))) >> 16;
                    while (v11 != v69);
                  }
                  int8x16_t v72 = v87;
                  uint64_t v73 = v18;
                  int v74 = &v85[v81];
                  do
                  {
                    int v75 = *v72;
                    if (v23 > v75 && v27 < v75)
                    {
                      int v77 = (__int16)v41[*(unsigned __int16 *)v74 - 4 * v75];
                      int v78 = (v77 + v75) & ~((v77 + v75) >> 31);
                      if (v78 >= 255) {
                        LOBYTE(v78) = -1;
                      }
                      *int8x16_t v72 = v78;
                    }
                    v74 += 2;
                    ++v72;
                    --v73;
                  }
                  while (v73);
                  v87 += a4;
                }
                v55 += v61;
                ++v17;
                int8x16_t v21 = v53;
                int8x16_t v53 = v59;
                uint64_t v22 = v85;
              }
              while (v17 != a3);
            }
            _TIFFfree(v22);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

void WebPDeallocateAlphaMemory(uint64_t a1)
{
  if (!a1) {
    WebPDeallocateAlphaMemory_cold_1();
  }
  _TIFFfree(*(void **)(a1 + 2992));
  *(_OWORD *)(a1 + 2992) = 0u;
  ALPHDelete(*(void ***)(a1 + 2960));
  *(void *)(a1 + 2960) = 0;
}

void ALPHDelete(void **a1)
{
  if (a1)
  {
    VP8LDelete(a1[3]);
    a1[3] = 0;
    _TIFFfree(a1);
  }
}

uint64_t VP8DecompressAlphaRows(uint64_t a1, int *a2, int a3, int a4)
{
  if (!a1) {
    VP8DecompressAlphaRows_cold_1();
  }
  int v4 = a3;
  uint64_t result = 0;
  if ((a3 & 0x80000000) == 0)
  {
    int v7 = a4;
    if (a4 >= 1)
    {
      unsigned int v8 = a2;
      int v9 = a2[33];
      int v10 = a4 + a3;
      if (a4 + a3 <= v9)
      {
        int v11 = *a2;
        if (*(_DWORD *)(a1 + 2984)) {
          return *(void *)(a1 + 3000) + v11 * (uint64_t)v4;
        }
        uint64_t v12 = *(int **)(a1 + 2960);
        if (!v12)
        {
          int v14 = WebPSafeCalloc(1uLL, 0xD8uLL);
          *(void *)(a1 + 2960) = v14;
          if (!v14)
          {
            VP8SetError(a1, 1, (uint64_t)"Alpha decoder initialization failed.");
            return 0;
          }
          if (*(void *)(a1 + 2992)) {
            VP8DecompressAlphaRows_cold_9();
          }
          int v15 = WebPSafeMalloc(v8[33] * (uint64_t)*v8, 1uLL);
          *(void *)(a1 + 2992) = v15;
          if (v15)
          {
            size_t v16 = v15;
            *(void *)(a1 + 3000) = v15;
            *(void *)(a1 + 3008) = 0;
          }
          else
          {
            if (!VP8SetError(a1, 1, (uint64_t)"Alpha decoder initialization failed.")) {
              goto LABEL_45;
            }
            size_t v16 = *(void **)(a1 + 3000);
          }
          int v27 = *(unsigned __int8 **)(a1 + 2968);
          if (!v27 || !v16) {
            VP8DecompressAlphaRows_cold_2();
          }
          int v28 = *(int **)(a1 + 2960);
          unint64_t v29 = *(void *)(a1 + 2976);
          VP8FiltersInit();
          *((void *)v28 + 25) = v16;
          int v31 = *v8;
          int v30 = v8[1];
          *int v28 = *v8;
          v28[1] = v30;
          if (v31 < 1 || v30 <= 0) {
            VP8DecompressAlphaRows_cold_3();
          }
          if (v29 < 2) {
            goto LABEL_41;
          }
          unsigned int v32 = *v27 & 3;
          v28[2] = v32;
          v28[3] = (*v27 >> 2) & 3;
          unsigned int v33 = (*v27 >> 4) & 3;
          v28[4] = v33;
          if (v32 > 1 || v33 > 1 || *v27 > 0x3Fu) {
            goto LABEL_41;
          }
          VP8InitIoInternal((_OWORD *)v28 + 2, 521);
          WebPInitCustomIo(0, (void *)v28 + 4);
          *((void *)v28 + 11) = v28;
          *((void *)v28 + 4) = *(void *)v8;
          *(_OWORD *)(v28 + 37) = *(_OWORD *)(v8 + 29);
          v28[41] = v8[33];
          int v36 = v28[2];
          if (v36)
          {
            if (v36 != 1) {
              VP8DecompressAlphaRows_cold_4();
            }
            int v37 = VP8LDecodeAlphaHeader((uint64_t)v28, v27 + 1, v29 - 1);
          }
          else
          {
            int v37 = v29 - 1 >= v28[1] * (uint64_t)*v28;
          }
          if (!v37)
          {
LABEL_41:
            int v34 = *(int **)(*(void *)(a1 + 2960) + 24);
            if (v34) {
              int v35 = *v34;
            }
            else {
              int v35 = 1;
            }
            VP8SetError(a1, v35, (uint64_t)"Alpha decoder initialization failed.");
            goto LABEL_45;
          }
          uint64_t v12 = *(int **)(a1 + 2960);
          if (v12[4] == 1) {
            int v7 = v9 - v4;
          }
          else {
            *(_DWORD *)(a1 + 3016) = 0;
          }
          int v10 = v7 + v4;
        }
        if (v10 > v9) {
          VP8DecompressAlphaRows_cold_5();
        }
        int v13 = v12[41];
        if (v12[2])
        {
          if (!*((void *)v12 + 3)) {
            VP8DecompressAlphaRows_cold_8();
          }
          if (!VP8LDecodeAlphaImageStream((uint64_t)v12, v10)) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v17 = *v12;
          uint64_t v18 = *(void *)(a1 + 2968);
          uint64_t v19 = v18 + 1;
          if (v18 + 1 + (int)v17 * (uint64_t)v4 > (unint64_t)(v18 + *(void *)(a1 + 2976))) {
            VP8DecompressAlphaRows_cold_6();
          }
          int v41 = v11;
          uint64_t v20 = WebPUnfilters;
          if (!WebPUnfilters[v12[3]]) {
            VP8DecompressAlphaRows_cold_7();
          }
          uint64_t v21 = *(void *)(a1 + 3008);
          if (v7 >= 1)
          {
            int v38 = v4;
            int v39 = v12[41];
            uint64_t v40 = v8;
            uint64_t v22 = (int)v17 * (uint64_t)v4;
            uint64_t v23 = *(void *)(a1 + 3000);
            do
            {
              uint64_t v24 = v23 + v22;
              int v25 = v20;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v20[v12[3]])(v21, v19 + v22, v23 + v22, v17);
              uint64_t v20 = v25;
              v22 += v17;
              uint64_t v21 = v24;
              --v7;
            }
            while (v7);
            uint64_t v21 = v23 - v17 + v22;
            unsigned int v8 = v40;
            int v4 = v38;
            int v13 = v39;
          }
          *(void *)(a1 + 3008) = v21;
          int v11 = v41;
        }
        if (v10 >= v13)
        {
          *(_DWORD *)(a1 + 2984) = 1;
        }
        else if (!*(_DWORD *)(a1 + 2984))
        {
          return *(void *)(a1 + 3000) + v11 * (uint64_t)v4;
        }
        ALPHDelete(*(void ***)(a1 + 2960));
        *(void *)(a1 + 2960) = 0;
        signed int v26 = *(_DWORD *)(a1 + 3016);
        if (v26 < 1
          || WebPDequantizeLevels((unsigned char *)(*(void *)(a1 + 3000) + v8[32] * v11 + v8[30]), v8[31] - v8[30], v8[33] - v8[32], v11, v26))
        {
          return *(void *)(a1 + 3000) + v11 * (uint64_t)v4;
        }
LABEL_45:
        _TIFFfree(*(void **)(a1 + 2992));
        *(_OWORD *)(a1 + 2992) = 0u;
        ALPHDelete(*(void ***)(a1 + 2960));
        uint64_t result = 0;
        *(void *)(a1 + 2960) = 0;
      }
    }
  }
  return result;
}

void WebPDeallocateAlphaMemory_cold_1()
{
  __assert_rtn("WebPDeallocateAlphaMemory", "alpha_dec.c", 158, "dec != NULL");
}

void VP8DecompressAlphaRows_cold_1()
{
  __assert_rtn("VP8DecompressAlphaRows", "alpha_dec.c", 175, "dec != NULL && io != NULL");
}

void VP8DecompressAlphaRows_cold_2()
{
  __assert_rtn("ALPHInit", "alpha_dec.c", 57, "data != NULL && output != NULL && src_io != NULL");
}

void VP8DecompressAlphaRows_cold_3()
{
}

void VP8DecompressAlphaRows_cold_4()
{
  __assert_rtn("ALPHInit", "alpha_dec.c", 99, "dec->method_ == ALPHA_LOSSLESS_COMPRESSION");
}

void VP8DecompressAlphaRows_cold_5()
{
  __assert_rtn("VP8DecompressAlphaRows", "alpha_dec.c", 208, "row + num_rows <= height");
}

void VP8DecompressAlphaRows_cold_6()
{
  __assert_rtn("ALPHDecode", "alpha_dec.c", 119, "deltas <= &dec->alpha_data_[dec->alpha_data_size_]");
}

void VP8DecompressAlphaRows_cold_7()
{
  __assert_rtn("ALPHDecode", "alpha_dec.c", 120, "WebPUnfilters[alph_dec->filter_] != NULL");
}

void VP8DecompressAlphaRows_cold_8()
{
  __assert_rtn("ALPHDecode", "alpha_dec.c", 129, "alph_dec->vp8l_dec_ != NULL");
}

void VP8DecompressAlphaRows_cold_9()
{
  __assert_rtn("AllocateAlphaPlane", "alpha_dec.c", 145, "dec->alpha_plane_mem_ == NULL");
}

void *WebPSafeMalloc(unint64_t a1, unint64_t a2)
{
  if (a1 && 0x400000000 / a1 < a2) {
    return 0;
  }
  size_t v4 = a2 * a1;
  if (!v4) {
    WebPSafeMalloc_cold_1();
  }
  return malloc_type_malloc(v4, 0x5779198FuLL);
}

void *WebPSafeCalloc(size_t a1, size_t a2)
{
  if (a1 && 0x400000000 / a1 < a2) {
    return 0;
  }
  if (!(a2 * a1)) {
    WebPSafeCalloc_cold_1();
  }
  return malloc_type_calloc(a1, a2, 0xF306AD2FuLL);
}

char *WebPCopyPlane(char *__src, int a2, char *__dst, int a4, int a5, int a6)
{
  if (!__src || (uint64_t v6 = __dst) == 0) {
    WebPCopyPlane_cold_1();
  }
  if (a2 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = -a2;
  }
  if (a4 >= 0) {
    int v8 = a4;
  }
  else {
    int v8 = -a4;
  }
  if (v7 < a5 || v8 < a5) {
    WebPCopyPlane_cold_2();
  }
  if (a6 >= 1)
  {
    int v9 = __src;
    size_t v10 = a5;
    uint64_t v11 = a2;
    unsigned int v12 = a6 + 1;
    uint64_t v13 = a4;
    do
    {
      __src = (char *)memcpy(v6, v9, v10);
      v9 += v11;
      v6 += v13;
      --v12;
    }
    while (v12 > 1);
  }
  return __src;
}

void WebPSafeMalloc_cold_1()
{
}

void WebPSafeCalloc_cold_1()
{
}

void WebPCopyPlane_cold_1()
{
  __assert_rtn("WebPCopyPlane", "utils.c", 236, "src != NULL && dst != NULL");
}

void WebPCopyPlane_cold_2()
{
  __assert_rtn("WebPCopyPlane", "utils.c", 237, "abs(src_stride) >= width && abs(dst_stride) >= width");
}

uint64_t WebPSamplerProcessPlane(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a9 >= 1)
  {
    uint64_t v15 = result;
    int v16 = 0;
    uint64_t v17 = a2;
    uint64_t v18 = a7;
    do
    {
      uint64_t result = a10(v15, a3, a4, a6, a8);
      v15 += v17;
      int v19 = (v16 << 31 >> 31) & a5;
      a4 += v19;
      a3 += v19;
      a6 += v18;
      ++v16;
    }
    while (a9 != v16);
  }
  return result;
}

void WebPInitSamplers()
{
  if ((uint64_t (*)())WebPInitSamplers_WebPInitSamplers_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPSamplers = (uint64_t)YuvToRgbRow;
    qword_1E9105648 = (uint64_t)YuvToRgbaRow;
    qword_1E9105650 = (uint64_t)YuvToBgrRow;
    qword_1E9105658 = (uint64_t)YuvToBgraRow;
    qword_1E9105660 = (uint64_t)YuvToArgbRow;
    qword_1E9105668 = (uint64_t)YuvToRgba4444Row;
    qword_1E9105670 = (uint64_t)YuvToRgb565Row;
    unk_1E9105678 = YuvToRgbaRow;
    qword_1E9105680 = (uint64_t)YuvToBgraRow;
    unk_1E9105688 = YuvToArgbRow;
    qword_1E9105690 = (uint64_t)YuvToRgba4444Row;
    WebPInitSamplers_WebPInitSamplers_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

uint64_t WebPConvertARGBToUV_C(uint64_t result, unsigned char *a2, unsigned __int8 *a3, int a4, int a5)
{
  if (a4 < 2)
  {
    unsigned int v5 = 0;
    if ((a4 & 1) == 0) {
      return result;
    }
    goto LABEL_10;
  }
  unsigned int v5 = a4 >> 1;
  uint64_t v6 = (_DWORD *)(result + 4);
  uint64_t v7 = a4 >> 1;
  int v8 = a2;
  int v9 = a3;
  do
  {
    unsigned int v10 = *(v6 - 1);
    int v11 = ((*v6 >> 15) & 0x1FE) + ((v10 >> 15) & 0x1FE);
    int v12 = ((*v6 >> 7) & 0x1FE) + ((v10 >> 7) & 0x1FE);
    int v13 = 2 * *v6 + 2 * v10;
    unsigned int v14 = (-19081 * v12 - 9719 * v11 + 28800 * v13 + 33685504) >> 18;
    unsigned int v15 = (-24116 * v12 + 28800 * v11 - 4684 * v13 + 33685504) >> 18;
    if (a5)
    {
      unsigned char *v8 = v14;
    }
    else
    {
      unsigned char *v8 = (v14 + *v8 + 1) >> 1;
      unsigned int v15 = (v15 + *v9 + 1) >> 1;
    }
    *v9++ = v15;
    v6 += 2;
    ++v8;
    --v7;
  }
  while (v7);
  if (a4)
  {
LABEL_10:
    unsigned int v16 = *(_DWORD *)(result + 8 * v5);
    int v17 = (v16 >> 14) & 0x3FC;
    int v18 = (v16 >> 6) & 0x3FC;
    unsigned int v19 = (-19081 * v18 - 9719 * v17 + 115200 * v16 + 33685504) >> 18;
    unsigned int v20 = (-24116 * v18 + 28800 * v17 - 18736 * *(_DWORD *)(result + 8 * v5) + 33685504) >> 18;
    if (a5)
    {
      a2[v5] = v19;
      a3[v5] = v20;
    }
    else
    {
      a2[v5] = (v19 + a2[v5] + 1) >> 1;
      a3[v5] = (v20 + a3[v5] + 1) >> 1;
    }
  }
  return result;
}

unsigned __int16 *WebPConvertRGBA32ToUV_C(unsigned __int16 *result, char *a2, char *a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = a4;
    do
    {
      int v5 = *result;
      int v6 = result[1];
      int v7 = result[2];
      int v8 = -9719 * v5 - 19081 * v6 + 28800 * v7;
      unsigned int v9 = v8 + 33685504;
      unsigned int v10 = (v8 + 33685504) >> 18;
      if (v8 >= -33685504) {
        char v11 = -1;
      }
      else {
        char v11 = 0;
      }
      if (!(v9 >> 26)) {
        char v11 = v10;
      }
      *a2++ = v11;
      int v12 = 28800 * v5 - 24116 * v6 - 4684 * v7;
      unsigned int v13 = v12 + 33685504;
      unsigned int v14 = (v12 + 33685504) >> 18;
      if (v12 >= -33685504) {
        char v15 = -1;
      }
      else {
        char v15 = 0;
      }
      if (!(v13 >> 26)) {
        char v15 = v14;
      }
      *a3++ = v15;
      result += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

void WebPInitConvertARGBToYUV()
{
  if ((uint64_t (*)())WebPInitConvertARGBToYUV_WebPInitConvertARGBToYUV_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPConvertARGBToY = (uint64_t (*)(void, void, void))ConvertARGBToY_C;
    WebPConvertARGBToUV = (uint64_t (*)(void, void, void, void, void))WebPConvertARGBToUV_C;
    WebPConvertRGB24ToY = (uint64_t)ConvertRGB24ToY_C;
    WebPConvertBGR24ToY = (uint64_t)ConvertBGR24ToY_C;
    WebPConvertRGBA32ToUV = (uint64_t)WebPConvertRGBA32ToUV_C;
    WebPInitConvertARGBToYUVNEON();
    if (!WebPConvertARGBToY) {
      WebPInitConvertARGBToYUV_cold_1();
    }
    if (!WebPConvertARGBToUV) {
      WebPInitConvertARGBToYUV_cold_2();
    }
    if (!WebPConvertRGB24ToY) {
      WebPInitConvertARGBToYUV_cold_3();
    }
    if (!WebPConvertBGR24ToY) {
      WebPInitConvertARGBToYUV_cold_4();
    }
    if (!WebPConvertRGBA32ToUV) {
      WebPInitConvertARGBToYUV_cold_5();
    }
    WebPInitConvertARGBToYUV_WebPInitConvertARGBToYUV_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

unsigned __int8 *YuvToRgbRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4, int a5)
{
  if ((a5 & 0xFFFFFFFE) != 0)
  {
    int v5 = &a4[3 * (a5 & 0xFFFFFFFE)];
    do
    {
      int v6 = *a2;
      int v7 = *a3;
      unsigned int v8 = 19077 * *result;
      unsigned int v9 = ((26149 * v7) >> 8) + (v8 >> 8);
      unsigned int v10 = v9 - 14234;
      unsigned int v11 = (v9 - 14234) >> 6;
      if (v9 >= 0x379A) {
        char v12 = -1;
      }
      else {
        char v12 = 0;
      }
      if (v10 < 0x4000) {
        char v12 = v11;
      }
      *a4 = v12;
      signed int v13 = (v8 >> 8) - (((6419 * v6) >> 8) + ((13320 * v7) >> 8));
      unsigned int v14 = v13 + 8708;
      unsigned int v15 = (v13 + 8708) >> 6;
      if (v13 >= -8708) {
        char v16 = -1;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      a4[1] = v16;
      unsigned int v17 = ((33050 * v6) >> 8) + (v8 >> 8);
      unsigned int v18 = v17 - 17685;
      unsigned int v19 = (v17 - 17685) >> 6;
      if (v17 >= 0x4515) {
        char v20 = -1;
      }
      else {
        char v20 = 0;
      }
      if (v18 < 0x4000) {
        char v20 = v19;
      }
      a4[2] = v20;
      int v22 = *a2++;
      int v21 = v22;
      int v24 = *a3++;
      int v23 = v24;
      unsigned int v25 = 19077 * result[1];
      unsigned int v26 = ((26149 * v24) >> 8) + (v25 >> 8);
      unsigned int v27 = v26 - 14234;
      unsigned int v28 = (v26 - 14234) >> 6;
      if (v26 >= 0x379A) {
        char v29 = -1;
      }
      else {
        char v29 = 0;
      }
      if (v27 < 0x4000) {
        char v29 = v28;
      }
      a4[3] = v29;
      signed int v30 = (v25 >> 8) - (((6419 * v21) >> 8) + ((13320 * v23) >> 8));
      unsigned int v31 = v30 + 8708;
      unsigned int v32 = (v30 + 8708) >> 6;
      if (v30 >= -8708) {
        char v33 = -1;
      }
      else {
        char v33 = 0;
      }
      if (v31 < 0x4000) {
        char v33 = v32;
      }
      a4[4] = v33;
      unsigned int v34 = ((33050 * v21) >> 8) + (v25 >> 8);
      unsigned int v35 = v34 - 17685;
      unsigned int v36 = (v34 - 17685) >> 6;
      if (v34 >= 0x4515) {
        char v37 = -1;
      }
      else {
        char v37 = 0;
      }
      if (v35 < 0x4000) {
        char v37 = v36;
      }
      a4[5] = v37;
      result += 2;
      a4 += 6;
    }
    while (a4 != v5);
    a4 = v5;
  }
  if (a5)
  {
    int v38 = *a2;
    int v39 = *a3;
    unsigned int v40 = 19077 * *result;
    unsigned int v41 = ((26149 * v39) >> 8) + (v40 >> 8);
    if (v41 >= 0x379A) {
      char v42 = -1;
    }
    else {
      char v42 = 0;
    }
    if (v41 - 14234 >= 0x4000) {
      char v43 = v42;
    }
    else {
      char v43 = (v41 - 14234) >> 6;
    }
    *a4 = v43;
    signed int v44 = (v40 >> 8) - (((6419 * v38) >> 8) + ((13320 * v39) >> 8));
    unsigned int v45 = v44 + 8708;
    unsigned int v46 = (v44 + 8708) >> 6;
    if (v44 >= -8708) {
      char v47 = -1;
    }
    else {
      char v47 = 0;
    }
    if (v45 < 0x4000) {
      char v47 = v46;
    }
    a4[1] = v47;
    unsigned int v48 = ((33050 * v38) >> 8) + (v40 >> 8);
    unsigned int v49 = v48 - 17685;
    unsigned int v50 = (v48 - 17685) >> 6;
    if (v48 >= 0x4515) {
      char v51 = -1;
    }
    else {
      char v51 = 0;
    }
    if (v49 < 0x4000) {
      char v51 = v50;
    }
    a4[2] = v51;
  }
  return result;
}

unsigned __int8 *YuvToRgbaRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4, int a5)
{
  signed int v5 = (4 * a5) & 0xFFFFFFF8;
  if (v5)
  {
    int v6 = &a4[v5];
    do
    {
      int v7 = *a2;
      int v8 = *a3;
      unsigned int v9 = 19077 * *result;
      unsigned int v10 = ((26149 * v8) >> 8) + (v9 >> 8);
      unsigned int v11 = v10 - 14234;
      unsigned int v12 = (v10 - 14234) >> 6;
      if (v10 >= 0x379A) {
        char v13 = -1;
      }
      else {
        char v13 = 0;
      }
      if (v11 < 0x4000) {
        char v13 = v12;
      }
      *a4 = v13;
      signed int v14 = (v9 >> 8) - (((6419 * v7) >> 8) + ((13320 * v8) >> 8));
      unsigned int v15 = v14 + 8708;
      unsigned int v16 = (v14 + 8708) >> 6;
      if (v14 >= -8708) {
        char v17 = -1;
      }
      else {
        char v17 = 0;
      }
      if (v15 < 0x4000) {
        char v17 = v16;
      }
      a4[1] = v17;
      unsigned int v18 = ((33050 * v7) >> 8) + (v9 >> 8);
      unsigned int v19 = v18 - 17685;
      unsigned int v20 = (v18 - 17685) >> 6;
      if (v18 >= 0x4515) {
        char v21 = -1;
      }
      else {
        char v21 = 0;
      }
      if (v19 < 0x4000) {
        char v21 = v20;
      }
      a4[2] = v21;
      a4[3] = -1;
      int v23 = *a2++;
      int v22 = v23;
      int v25 = *a3++;
      int v24 = v25;
      unsigned int v26 = 19077 * result[1];
      unsigned int v27 = ((26149 * v25) >> 8) + (v26 >> 8);
      unsigned int v28 = v27 - 14234;
      unsigned int v29 = (v27 - 14234) >> 6;
      if (v27 >= 0x379A) {
        char v30 = -1;
      }
      else {
        char v30 = 0;
      }
      if (v28 < 0x4000) {
        char v30 = v29;
      }
      a4[4] = v30;
      signed int v31 = (v26 >> 8) - (((6419 * v22) >> 8) + ((13320 * v24) >> 8));
      unsigned int v32 = v31 + 8708;
      unsigned int v33 = (v31 + 8708) >> 6;
      if (v31 >= -8708) {
        char v34 = -1;
      }
      else {
        char v34 = 0;
      }
      if (v32 < 0x4000) {
        char v34 = v33;
      }
      a4[5] = v34;
      unsigned int v35 = ((33050 * v22) >> 8) + (v26 >> 8);
      unsigned int v36 = v35 - 17685;
      unsigned int v37 = (v35 - 17685) >> 6;
      if (v35 >= 0x4515) {
        char v38 = -1;
      }
      else {
        char v38 = 0;
      }
      if (v36 < 0x4000) {
        char v38 = v37;
      }
      a4[6] = v38;
      a4[7] = -1;
      result += 2;
      a4 += 8;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if (a5)
  {
    int v39 = *a2;
    int v40 = *a3;
    unsigned int v41 = 19077 * *result;
    unsigned int v42 = ((26149 * v40) >> 8) + (v41 >> 8);
    if (v42 >= 0x379A) {
      char v43 = -1;
    }
    else {
      char v43 = 0;
    }
    if (v42 - 14234 >= 0x4000) {
      char v44 = v43;
    }
    else {
      char v44 = (v42 - 14234) >> 6;
    }
    *a4 = v44;
    signed int v45 = (v41 >> 8) - (((6419 * v39) >> 8) + ((13320 * v40) >> 8));
    unsigned int v46 = v45 + 8708;
    unsigned int v47 = (v45 + 8708) >> 6;
    if (v45 >= -8708) {
      char v48 = -1;
    }
    else {
      char v48 = 0;
    }
    if (v46 < 0x4000) {
      char v48 = v47;
    }
    a4[1] = v48;
    unsigned int v49 = ((33050 * v39) >> 8) + (v41 >> 8);
    unsigned int v50 = v49 - 17685;
    unsigned int v51 = (v49 - 17685) >> 6;
    if (v49 >= 0x4515) {
      char v52 = -1;
    }
    else {
      char v52 = 0;
    }
    if (v50 < 0x4000) {
      char v52 = v51;
    }
    a4[2] = v52;
    a4[3] = -1;
  }
  return result;
}

unsigned __int8 *YuvToBgrRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4, int a5)
{
  if ((a5 & 0xFFFFFFFE) != 0)
  {
    signed int v5 = &a4[3 * (a5 & 0xFFFFFFFE)];
    do
    {
      int v6 = *a2;
      int v7 = *a3;
      unsigned int v8 = 19077 * *result;
      unsigned int v9 = ((33050 * v6) >> 8) + (v8 >> 8);
      unsigned int v10 = v9 - 17685;
      unsigned int v11 = (v9 - 17685) >> 6;
      if (v9 >= 0x4515) {
        char v12 = -1;
      }
      else {
        char v12 = 0;
      }
      if (v10 < 0x4000) {
        char v12 = v11;
      }
      *a4 = v12;
      signed int v13 = (v8 >> 8) - (((6419 * v6) >> 8) + ((13320 * v7) >> 8));
      unsigned int v14 = v13 + 8708;
      unsigned int v15 = (v13 + 8708) >> 6;
      if (v13 >= -8708) {
        char v16 = -1;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      a4[1] = v16;
      unsigned int v17 = ((26149 * v7) >> 8) + (v8 >> 8);
      unsigned int v18 = v17 - 14234;
      unsigned int v19 = (v17 - 14234) >> 6;
      if (v17 >= 0x379A) {
        char v20 = -1;
      }
      else {
        char v20 = 0;
      }
      if (v18 < 0x4000) {
        char v20 = v19;
      }
      a4[2] = v20;
      int v22 = *a2++;
      int v21 = v22;
      int v24 = *a3++;
      int v23 = v24;
      unsigned int v25 = 19077 * result[1];
      unsigned int v26 = ((33050 * v21) >> 8) + (v25 >> 8);
      unsigned int v27 = v26 - 17685;
      unsigned int v28 = (v26 - 17685) >> 6;
      if (v26 >= 0x4515) {
        char v29 = -1;
      }
      else {
        char v29 = 0;
      }
      if (v27 < 0x4000) {
        char v29 = v28;
      }
      a4[3] = v29;
      signed int v30 = (v25 >> 8) - (((6419 * v21) >> 8) + ((13320 * v23) >> 8));
      unsigned int v31 = v30 + 8708;
      unsigned int v32 = (v30 + 8708) >> 6;
      if (v30 >= -8708) {
        char v33 = -1;
      }
      else {
        char v33 = 0;
      }
      if (v31 < 0x4000) {
        char v33 = v32;
      }
      a4[4] = v33;
      unsigned int v34 = ((26149 * v23) >> 8) + (v25 >> 8);
      unsigned int v35 = v34 - 14234;
      unsigned int v36 = (v34 - 14234) >> 6;
      if (v34 >= 0x379A) {
        char v37 = -1;
      }
      else {
        char v37 = 0;
      }
      if (v35 < 0x4000) {
        char v37 = v36;
      }
      a4[5] = v37;
      result += 2;
      a4 += 6;
    }
    while (a4 != v5);
    a4 = v5;
  }
  if (a5)
  {
    int v38 = *a2;
    int v39 = *a3;
    unsigned int v40 = 19077 * *result;
    unsigned int v41 = ((33050 * v38) >> 8) + (v40 >> 8);
    if (v41 >= 0x4515) {
      char v42 = -1;
    }
    else {
      char v42 = 0;
    }
    if (v41 - 17685 >= 0x4000) {
      char v43 = v42;
    }
    else {
      char v43 = (v41 - 17685) >> 6;
    }
    *a4 = v43;
    signed int v44 = (v40 >> 8) - (((6419 * v38) >> 8) + ((13320 * v39) >> 8));
    unsigned int v45 = v44 + 8708;
    unsigned int v46 = (v44 + 8708) >> 6;
    if (v44 >= -8708) {
      char v47 = -1;
    }
    else {
      char v47 = 0;
    }
    if (v45 < 0x4000) {
      char v47 = v46;
    }
    a4[1] = v47;
    unsigned int v48 = ((26149 * v39) >> 8) + (v40 >> 8);
    unsigned int v49 = v48 - 14234;
    unsigned int v50 = (v48 - 14234) >> 6;
    if (v48 >= 0x379A) {
      char v51 = -1;
    }
    else {
      char v51 = 0;
    }
    if (v49 < 0x4000) {
      char v51 = v50;
    }
    a4[2] = v51;
  }
  return result;
}

unsigned __int8 *YuvToBgraRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4, int a5)
{
  signed int v5 = (4 * a5) & 0xFFFFFFF8;
  if (v5)
  {
    int v6 = &a4[v5];
    do
    {
      int v7 = *a2;
      int v8 = *a3;
      unsigned int v9 = 19077 * *result;
      unsigned int v10 = ((33050 * v7) >> 8) + (v9 >> 8);
      unsigned int v11 = v10 - 17685;
      unsigned int v12 = (v10 - 17685) >> 6;
      if (v10 >= 0x4515) {
        char v13 = -1;
      }
      else {
        char v13 = 0;
      }
      if (v11 < 0x4000) {
        char v13 = v12;
      }
      *a4 = v13;
      signed int v14 = (v9 >> 8) - (((6419 * v7) >> 8) + ((13320 * v8) >> 8));
      unsigned int v15 = v14 + 8708;
      unsigned int v16 = (v14 + 8708) >> 6;
      if (v14 >= -8708) {
        char v17 = -1;
      }
      else {
        char v17 = 0;
      }
      if (v15 < 0x4000) {
        char v17 = v16;
      }
      a4[1] = v17;
      unsigned int v18 = ((26149 * v8) >> 8) + (v9 >> 8);
      unsigned int v19 = v18 - 14234;
      unsigned int v20 = (v18 - 14234) >> 6;
      if (v18 >= 0x379A) {
        char v21 = -1;
      }
      else {
        char v21 = 0;
      }
      if (v19 < 0x4000) {
        char v21 = v20;
      }
      a4[2] = v21;
      a4[3] = -1;
      int v23 = *a2++;
      int v22 = v23;
      int v25 = *a3++;
      int v24 = v25;
      unsigned int v26 = 19077 * result[1];
      unsigned int v27 = ((33050 * v22) >> 8) + (v26 >> 8);
      unsigned int v28 = v27 - 17685;
      unsigned int v29 = (v27 - 17685) >> 6;
      if (v27 >= 0x4515) {
        char v30 = -1;
      }
      else {
        char v30 = 0;
      }
      if (v28 < 0x4000) {
        char v30 = v29;
      }
      a4[4] = v30;
      signed int v31 = (v26 >> 8) - (((6419 * v22) >> 8) + ((13320 * v24) >> 8));
      unsigned int v32 = v31 + 8708;
      unsigned int v33 = (v31 + 8708) >> 6;
      if (v31 >= -8708) {
        char v34 = -1;
      }
      else {
        char v34 = 0;
      }
      if (v32 < 0x4000) {
        char v34 = v33;
      }
      a4[5] = v34;
      unsigned int v35 = ((26149 * v24) >> 8) + (v26 >> 8);
      unsigned int v36 = v35 - 14234;
      unsigned int v37 = (v35 - 14234) >> 6;
      if (v35 >= 0x379A) {
        char v38 = -1;
      }
      else {
        char v38 = 0;
      }
      if (v36 < 0x4000) {
        char v38 = v37;
      }
      a4[6] = v38;
      a4[7] = -1;
      result += 2;
      a4 += 8;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if (a5)
  {
    int v39 = *a2;
    int v40 = *a3;
    unsigned int v41 = 19077 * *result;
    unsigned int v42 = ((33050 * v39) >> 8) + (v41 >> 8);
    if (v42 >= 0x4515) {
      char v43 = -1;
    }
    else {
      char v43 = 0;
    }
    if (v42 - 17685 >= 0x4000) {
      char v44 = v43;
    }
    else {
      char v44 = (v42 - 17685) >> 6;
    }
    *a4 = v44;
    signed int v45 = (v41 >> 8) - (((6419 * v39) >> 8) + ((13320 * v40) >> 8));
    unsigned int v46 = v45 + 8708;
    unsigned int v47 = (v45 + 8708) >> 6;
    if (v45 >= -8708) {
      char v48 = -1;
    }
    else {
      char v48 = 0;
    }
    if (v46 < 0x4000) {
      char v48 = v47;
    }
    a4[1] = v48;
    unsigned int v49 = ((26149 * v40) >> 8) + (v41 >> 8);
    unsigned int v50 = v49 - 14234;
    unsigned int v51 = (v49 - 14234) >> 6;
    if (v49 >= 0x379A) {
      char v52 = -1;
    }
    else {
      char v52 = 0;
    }
    if (v50 < 0x4000) {
      char v52 = v51;
    }
    a4[2] = v52;
    a4[3] = -1;
  }
  return result;
}

unsigned __int8 *YuvToArgbRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4, int a5)
{
  signed int v5 = (4 * a5) & 0xFFFFFFF8;
  if (v5)
  {
    int v6 = &a4[v5];
    do
    {
      int v7 = *result;
      int v8 = *a2;
      int v9 = *a3;
      *a4 = -1;
      unsigned int v10 = 19077 * v7;
      unsigned int v11 = ((26149 * v9) >> 8) + (v10 >> 8);
      unsigned int v12 = v11 - 14234;
      unsigned int v13 = (v11 - 14234) >> 6;
      if (v11 >= 0x379A) {
        char v14 = -1;
      }
      else {
        char v14 = 0;
      }
      if (v12 < 0x4000) {
        char v14 = v13;
      }
      a4[1] = v14;
      signed int v15 = (v10 >> 8) - (((6419 * v8) >> 8) + ((13320 * v9) >> 8));
      unsigned int v16 = v15 + 8708;
      unsigned int v17 = (v15 + 8708) >> 6;
      if (v15 >= -8708) {
        char v18 = -1;
      }
      else {
        char v18 = 0;
      }
      if (v16 < 0x4000) {
        char v18 = v17;
      }
      a4[2] = v18;
      unsigned int v19 = ((33050 * v8) >> 8) + (v10 >> 8);
      unsigned int v20 = v19 - 17685;
      unsigned int v21 = (v19 - 17685) >> 6;
      if (v19 >= 0x4515) {
        char v22 = -1;
      }
      else {
        char v22 = 0;
      }
      if (v20 < 0x4000) {
        char v22 = v21;
      }
      a4[3] = v22;
      int v23 = result[1];
      int v25 = *a2++;
      int v24 = v25;
      int v27 = *a3++;
      int v26 = v27;
      a4[4] = -1;
      unsigned int v28 = 19077 * v23;
      unsigned int v29 = ((26149 * v27) >> 8) + (v28 >> 8);
      unsigned int v30 = v29 - 14234;
      unsigned int v31 = (v29 - 14234) >> 6;
      if (v29 >= 0x379A) {
        char v32 = -1;
      }
      else {
        char v32 = 0;
      }
      if (v30 < 0x4000) {
        char v32 = v31;
      }
      a4[5] = v32;
      signed int v33 = (v28 >> 8) - (((6419 * v24) >> 8) + ((13320 * v26) >> 8));
      unsigned int v34 = v33 + 8708;
      unsigned int v35 = (v33 + 8708) >> 6;
      if (v33 >= -8708) {
        char v36 = -1;
      }
      else {
        char v36 = 0;
      }
      if (v34 < 0x4000) {
        char v36 = v35;
      }
      a4[6] = v36;
      unsigned int v37 = ((33050 * v24) >> 8) + (v28 >> 8);
      unsigned int v38 = v37 - 17685;
      unsigned int v39 = (v37 - 17685) >> 6;
      if (v37 >= 0x4515) {
        char v40 = -1;
      }
      else {
        char v40 = 0;
      }
      if (v38 < 0x4000) {
        char v40 = v39;
      }
      a4[7] = v40;
      result += 2;
      a4 += 8;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if (a5)
  {
    int v41 = *result;
    int v42 = *a2;
    int v43 = *a3;
    *a4 = -1;
    unsigned int v44 = 19077 * v41;
    unsigned int v45 = ((26149 * v43) >> 8) + (v44 >> 8);
    unsigned int v46 = v45 - 14234;
    unsigned int v47 = (v45 - 14234) >> 6;
    if (v45 >= 0x379A) {
      char v48 = -1;
    }
    else {
      char v48 = 0;
    }
    if (v46 < 0x4000) {
      char v48 = v47;
    }
    a4[1] = v48;
    signed int v49 = (v44 >> 8) - (((6419 * v42) >> 8) + ((13320 * v43) >> 8));
    unsigned int v50 = v49 + 8708;
    unsigned int v51 = (v49 + 8708) >> 6;
    if (v49 >= -8708) {
      char v52 = -1;
    }
    else {
      char v52 = 0;
    }
    if (v50 < 0x4000) {
      char v52 = v51;
    }
    a4[2] = v52;
    unsigned int v53 = ((33050 * v42) >> 8) + (v44 >> 8);
    unsigned int v54 = v53 - 17685;
    unsigned int v55 = (v53 - 17685) >> 6;
    if (v53 >= 0x4515) {
      char v56 = -1;
    }
    else {
      char v56 = 0;
    }
    if (v54 < 0x4000) {
      char v56 = v55;
    }
    a4[3] = v56;
  }
  return result;
}

unsigned __int8 *YuvToRgba4444Row(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4, int a5)
{
  signed int v5 = (2 * a5) & 0xFFFFFFFC;
  if (v5)
  {
    int v6 = &a4[v5];
    do
    {
      int v7 = *a2;
      int v8 = *a3;
      unsigned int v9 = 19077 * *result;
      unsigned int v10 = ((26149 * v8) >> 8) + (v9 >> 8);
      unsigned int v11 = v10 - 14234;
      unsigned int v12 = (v10 - 14234) >> 6;
      if (v10 >= 0x379A) {
        char v13 = -16;
      }
      else {
        char v13 = 0;
      }
      if (v11 < 0x4000) {
        char v13 = v12;
      }
      signed int v14 = (v9 >> 8) - (((6419 * v7) >> 8) + ((13320 * v8) >> 8));
      unsigned int v15 = v14 + 8708;
      unsigned int v16 = (v14 + 8708) >> 10;
      if (v14 >= -8708) {
        char v17 = 15;
      }
      else {
        char v17 = 0;
      }
      if (v15 < 0x4000) {
        char v17 = v16;
      }
      unsigned int v18 = ((33050 * v7) >> 8) + (v9 >> 8);
      unsigned int v19 = v18 - 17685;
      unsigned int v20 = (v18 - 17685) >> 6;
      if (v18 >= 0x4515) {
        char v21 = -16;
      }
      else {
        char v21 = 0;
      }
      *a4 = v13 & 0xF0 | v17;
      if (v19 < 0x4000) {
        char v21 = v20;
      }
      a4[1] = v21 | 0xF;
      int v23 = *a2++;
      int v22 = v23;
      int v25 = *a3++;
      int v24 = v25;
      unsigned int v26 = 19077 * result[1];
      unsigned int v27 = ((26149 * v25) >> 8) + (v26 >> 8);
      unsigned int v28 = v27 - 14234;
      unsigned int v29 = (v27 - 14234) >> 6;
      if (v27 >= 0x379A) {
        char v30 = -16;
      }
      else {
        char v30 = 0;
      }
      if (v28 < 0x4000) {
        char v30 = v29;
      }
      signed int v31 = (v26 >> 8) - (((6419 * v22) >> 8) + ((13320 * v24) >> 8));
      unsigned int v32 = v31 + 8708;
      unsigned int v33 = (v31 + 8708) >> 10;
      if (v31 >= -8708) {
        char v34 = 15;
      }
      else {
        char v34 = 0;
      }
      if (v32 < 0x4000) {
        char v34 = v33;
      }
      unsigned int v35 = ((33050 * v22) >> 8) + (v26 >> 8);
      unsigned int v36 = v35 - 17685;
      unsigned int v37 = (v35 - 17685) >> 6;
      if (v35 >= 0x4515) {
        char v38 = -16;
      }
      else {
        char v38 = 0;
      }
      a4[2] = v30 & 0xF0 | v34;
      if (v36 < 0x4000) {
        char v38 = v37;
      }
      a4[3] = v38 | 0xF;
      result += 2;
      a4 += 4;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if (a5)
  {
    int v39 = *a2;
    int v40 = *a3;
    unsigned int v41 = 19077 * *result;
    unsigned int v42 = ((26149 * v40) >> 8) + (v41 >> 8);
    unsigned int v43 = v42 - 14234;
    unsigned int v44 = (v42 - 14234) >> 6;
    if (v42 >= 0x379A) {
      char v45 = -16;
    }
    else {
      char v45 = 0;
    }
    if (v43 < 0x4000) {
      char v45 = v44;
    }
    signed int v46 = (v41 >> 8) - (((6419 * v39) >> 8) + ((13320 * v40) >> 8));
    unsigned int v47 = v46 + 8708;
    unsigned int v48 = (v46 + 8708) >> 10;
    if (v46 >= -8708) {
      char v49 = 15;
    }
    else {
      char v49 = 0;
    }
    if (v47 < 0x4000) {
      char v49 = v48;
    }
    unsigned int v50 = ((33050 * v39) >> 8) + (v41 >> 8);
    unsigned int v51 = v50 - 17685;
    unsigned int v52 = (v50 - 17685) >> 6;
    if (v50 >= 0x4515) {
      char v53 = -16;
    }
    else {
      char v53 = 0;
    }
    *a4 = v45 & 0xF0 | v49;
    if (v51 < 0x4000) {
      char v53 = v52;
    }
    a4[1] = v53 | 0xF;
  }
  return result;
}

unsigned __int8 *YuvToRgb565Row(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned char *a4, int a5)
{
  signed int v5 = (2 * a5) & 0xFFFFFFFC;
  if (v5)
  {
    int v6 = &a4[v5];
    do
    {
      int v7 = *a2;
      int v8 = *a3;
      unsigned int v9 = 19077 * *result;
      unsigned int v10 = ((26149 * v8) >> 8) + (v9 >> 8);
      unsigned int v11 = v10 - 14234;
      unsigned int v12 = (v10 - 14234) >> 6;
      if (v10 >= 0x379A) {
        char v13 = -8;
      }
      else {
        char v13 = 0;
      }
      if (v11 < 0x4000) {
        char v13 = v12;
      }
      signed int v14 = (v9 >> 8) - (((6419 * v7) >> 8) + ((13320 * v8) >> 8));
      unsigned int v15 = v14 + 8708;
      unsigned int v16 = (v14 + 8708) >> 6;
      if (v14 >= -8708) {
        unsigned int v17 = 255;
      }
      else {
        unsigned int v17 = 0;
      }
      if (v15 < 0x4000) {
        unsigned int v17 = v16;
      }
      unsigned int v18 = ((33050 * v7) >> 8) + (v9 >> 8);
      unsigned int v19 = v18 - 17685;
      unsigned int v20 = (v18 - 17685) >> 9;
      if (v18 >= 0x4515) {
        char v21 = 31;
      }
      else {
        char v21 = 0;
      }
      if (v19 < 0x4000) {
        char v21 = v20;
      }
      *a4 = v13 & 0xF8 | (v17 >> 5);
      a4[1] = (8 * v17) & 0xE0 | v21;
      int v23 = *a2++;
      int v22 = v23;
      int v25 = *a3++;
      int v24 = v25;
      unsigned int v26 = 19077 * result[1];
      unsigned int v27 = ((26149 * v25) >> 8) + (v26 >> 8);
      unsigned int v28 = v27 - 14234;
      unsigned int v29 = (v27 - 14234) >> 6;
      if (v27 >= 0x379A) {
        char v30 = -8;
      }
      else {
        char v30 = 0;
      }
      if (v28 < 0x4000) {
        char v30 = v29;
      }
      signed int v31 = (v26 >> 8) - (((6419 * v22) >> 8) + ((13320 * v24) >> 8));
      unsigned int v32 = v31 + 8708;
      unsigned int v33 = (v31 + 8708) >> 6;
      if (v31 >= -8708) {
        unsigned int v34 = 255;
      }
      else {
        unsigned int v34 = 0;
      }
      if (v32 < 0x4000) {
        unsigned int v34 = v33;
      }
      unsigned int v35 = ((33050 * v22) >> 8) + (v26 >> 8);
      unsigned int v36 = v35 - 17685;
      unsigned int v37 = (v35 - 17685) >> 9;
      if (v35 >= 0x4515) {
        char v38 = 31;
      }
      else {
        char v38 = 0;
      }
      if (v36 < 0x4000) {
        char v38 = v37;
      }
      a4[2] = v30 & 0xF8 | (v34 >> 5);
      a4[3] = (8 * v34) & 0xE0 | v38;
      result += 2;
      a4 += 4;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if (a5)
  {
    int v39 = *a2;
    int v40 = *a3;
    unsigned int v41 = 19077 * *result;
    unsigned int v42 = ((26149 * v40) >> 8) + (v41 >> 8);
    unsigned int v43 = v42 - 14234;
    unsigned int v44 = (v42 - 14234) >> 6;
    if (v42 >= 0x379A) {
      char v45 = -8;
    }
    else {
      char v45 = 0;
    }
    if (v43 < 0x4000) {
      char v45 = v44;
    }
    signed int v46 = (v41 >> 8) - (((6419 * v39) >> 8) + ((13320 * v40) >> 8));
    unsigned int v47 = v46 + 8708;
    unsigned int v48 = (v46 + 8708) >> 6;
    if (v46 >= -8708) {
      unsigned int v49 = 255;
    }
    else {
      unsigned int v49 = 0;
    }
    if (v47 < 0x4000) {
      unsigned int v49 = v48;
    }
    unsigned int v50 = ((33050 * v39) >> 8) + (v41 >> 8);
    unsigned int v51 = v50 - 17685;
    unsigned int v52 = (v50 - 17685) >> 9;
    if (v50 >= 0x4515) {
      char v53 = 31;
    }
    else {
      char v53 = 0;
    }
    if (v51 < 0x4000) {
      char v53 = v52;
    }
    *a4 = v45 & 0xF8 | (v49 >> 5);
    a4[1] = (8 * v49) & 0xE0 | v53;
  }
  return result;
}

int *ConvertARGBToY_C(int *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      int v4 = *result++;
      *a2++ = (16839 * BYTE2(v4) + 6420 * v4 + 33059 * BYTE1(v4) + 1081344) >> 16;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned __int8 *ConvertRGB24ToY_C(unsigned __int8 *result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      *a2++ = (33059 * result[1] + 16839 * *result + 6420 * result[2] + 1081344) >> 16;
      result += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ConvertBGR24ToY_C(uint64_t result, unsigned char *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = (unsigned __int8 *)(result + 2);
    uint64_t v4 = a3;
    do
    {
      *a2++ = (33059 * *(v3 - 1) + 16839 * *v3 + 6420 * *(v3 - 2) + 1081344) >> 16;
      v3 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

void WebPInitConvertARGBToYUV_cold_1()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 240, "WebPConvertARGBToY != NULL");
}

void WebPInitConvertARGBToYUV_cold_2()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 241, "WebPConvertARGBToUV != NULL");
}

void WebPInitConvertARGBToYUV_cold_3()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 242, "WebPConvertRGB24ToY != NULL");
}

void WebPInitConvertARGBToYUV_cold_4()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 243, "WebPConvertBGR24ToY != NULL");
}

void WebPInitConvertARGBToYUV_cold_5()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 244, "WebPConvertRGBA32ToUV != NULL");
}

char *WebPDemuxInternal(uint64_t a1, int a2, int *a3, int a4)
{
  if (a3) {
    *a3 = -1;
  }
  signed int v5 = 0;
  if (!a1 || (a4 & 0xFFFFFF00) != 0x100) {
    return v5;
  }
  int v6 = *(_DWORD **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    return 0;
  }
  if (v7 < 0x14)
  {
    int v8 = 1;
    if (!a3) {
      return 0;
    }
    goto LABEL_27;
  }
  if (*v6 == 1179011410 && v6[2] == 1346520407)
  {
    int v9 = v6[1];
    if ((v9 + 9) >= 0x11)
    {
      unint64_t v18 = (v9 + 8);
      if (v7 <= v18)
      {
        BOOL v19 = v7 < v18;
        if (!a2 && v7 < v18) {
          return 0;
        }
      }
      else
      {
        BOOL v19 = 0;
        unint64_t v7 = (v9 + 8);
      }
      unsigned int v20 = (char *)WebPSafeCalloc(1uLL, 0x68uLL);
      signed int v5 = v20;
      if (!v20) {
        return v5;
      }
      *((_DWORD *)v20 + 10) = 0;
      *(_OWORD *)(v20 + 52) = xmmword_1889B0D30;
      *((void *)v20 + 10) = v20 + 72;
      *((void *)v20 + 12) = v20 + 88;
      *(void *)unsigned int v20 = 12;
      *((void *)v20 + 1) = v7;
      *((void *)v20 + 2) = v18;
      *((void *)v20 + 3) = v7;
      *((void *)v20 + 4) = v6;
      if (v6[3] == 540561494)
      {
        int v22 = ParseSingleImage;
        int v24 = kMasterChunks;
LABEL_42:
        int v25 = v22((uint64_t)v20);
        int v26 = v25;
        if (!v25) {
          *((_DWORD *)v5 + 10) = 2;
        }
        int v27 = v25 != 1 || v19;
        BOOL v28 = v25 == 2 || v27 == 0;
        if (!v28 && (*((unsigned int (**)(char *))v24 + 2))(v5)) {
          goto LABEL_54;
        }
        *((_DWORD *)v5 + 10) = -1;
      }
      else
      {
        char v21 = aVp8l;
        while (1)
        {
          int v22 = (uint64_t (*)(uint64_t))*((void *)v21 + 1);
          if (!v22) {
            break;
          }
          int v23 = *(_DWORD *)v21;
          v21 += 24;
          if (v23 == v6[3])
          {
            int v24 = v21 - 24;
            goto LABEL_42;
          }
        }
      }
      int v26 = 2;
LABEL_54:
      if (a3) {
        *a3 = *((_DWORD *)v5 + 10);
      }
      if (v26 != 2) {
        return v5;
      }
      WebPDemuxDelete(v5);
      return 0;
    }
  }
  uint64_t v31 = 0;
  memset(v30, 0, sizeof(v30));
  int v10 = WebPGetFeaturesInternal((uint64_t)v6, v7, (uint64_t)v30, 521);
  if (v10)
  {
    if (v10 == 7) {
      int v8 = 1;
    }
    else {
      int v8 = 2;
    }
    if (!a3) {
      return 0;
    }
    goto LABEL_27;
  }
  signed int v5 = (char *)WebPSafeCalloc(1uLL, 0x68uLL);
  unsigned int v11 = (char *)WebPSafeCalloc(1uLL, 0x50uLL);
  unsigned int v12 = v11;
  if (!v5) {
    goto LABEL_26;
  }
  if (!v11) {
    goto LABEL_26;
  }
  *((_DWORD *)v5 + 10) = 0;
  *(_OWORD *)(v5 + 52) = xmmword_1889B0D30;
  *((void *)v5 + 10) = v5 + 72;
  *((void *)v5 + 12) = v5 + 88;
  *(void *)signed int v5 = 0;
  *((void *)v5 + 1) = v7;
  *((void *)v5 + 2) = 0;
  *((void *)v5 + 3) = v7;
  *((void *)v5 + 4) = v6;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = v7;
  int v13 = v30[0];
  int v14 = DWORD1(v30[0]);
  *((_DWORD *)v11 + 2) = v30[0];
  *((_DWORD *)v11 + 3) = v14;
  int v15 = *((_DWORD *)v11 + 4) | DWORD2(v30[0]);
  *((_DWORD *)v11 + 4) = v15;
  *((void *)v11 + 4) = 0x100000001;
  uint64_t v16 = *((void *)v5 + 9);
  if (v16)
  {
    if (!*(_DWORD *)(v16 + 36))
    {
LABEL_26:
      _TIFFfree(v5);
      _TIFFfree(v12);
      int v8 = 2;
      if (a3)
      {
LABEL_27:
        signed int v5 = 0;
        if (v8 == 1) {
          int v17 = 0;
        }
        else {
          int v17 = -1;
        }
        goto LABEL_30;
      }
      return 0;
    }
  }
  *((void *)v5 + 9) = v11;
  *((void *)v11 + 9) = 0;
  *((void *)v5 + 10) = v11 + 72;
  *((_DWORD *)v5 + 10) = 2;
  *((_DWORD *)v5 + 13) = v13;
  *((_DWORD *)v5 + 14) = v14;
  *((_DWORD *)v5 + 12) |= 16 * (v15 != 0);
  *((_DWORD *)v5 + 17) = 1;
  if (!IsValidSimpleFormat((uint64_t)v5)) {
    WebPDemuxInternal_cold_1();
  }
  if (a3)
  {
    int v17 = 2;
LABEL_30:
    *a3 = v17;
  }
  return v5;
}

void WebPDemuxDelete(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[9];
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)v2[9];
        _TIFFfree(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    uint64_t v4 = (void *)a1[11];
    if (v4)
    {
      do
      {
        signed int v5 = (void *)v4[2];
        _TIFFfree(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    _TIFFfree(a1);
  }
}

unsigned int *WebPDemuxGetI(unsigned int *result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        uint64_t result = (unsigned int *)result[12];
        break;
      case 1:
        uint64_t result = (unsigned int *)result[13];
        break;
      case 2:
        uint64_t result = (unsigned int *)result[14];
        break;
      case 3:
        uint64_t result = (unsigned int *)result[15];
        break;
      case 4:
        uint64_t result = (unsigned int *)result[16];
        break;
      case 5:
        uint64_t result = (unsigned int *)result[17];
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t WebPDemuxGetFrame(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(void *)(a3 + 72) = a1;
  return SetFrame(a2, a3);
}

uint64_t SetFrame(int a1, uint64_t a2)
{
  uint64_t result = 0;
  if ((a1 & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a2 + 72);
    if (v4)
    {
      int v5 = *(_DWORD *)(v4 + 68);
      if (v5 < a1) {
        return 0;
      }
      int v6 = a1 ? a1 : *(_DWORD *)(v4 + 68);
      uint64_t v7 = *(void *)(v4 + 72);
      if (!v7) {
        return 0;
      }
      while (*(_DWORD *)(v7 + 32) != v6)
      {
        uint64_t v7 = *(void *)(v7 + 72);
        if (!v7) {
          return 0;
        }
      }
      uint64_t v8 = *(void *)(v4 + 32);
      uint64_t v10 = *(void *)(v7 + 40);
      uint64_t v9 = *(void *)(v7 + 48);
      uint64_t v11 = *(void *)(v7 + 64);
      if (v11)
      {
        if (v10) {
          uint64_t v12 = v10 - (v11 + *(void *)(v7 + 56));
        }
        else {
          uint64_t v12 = 0;
        }
        v9 += v11 + v12;
        uint64_t v10 = *(void *)(v7 + 56);
      }
      if (v8)
      {
        *(_DWORD *)a2 = v6;
        *(_DWORD *)(a2 + 4) = v5;
        *(_OWORD *)(a2 + 8) = *(_OWORD *)v7;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)(v7 + 16);
        *(void *)(a2 + 24) = *(void *)(v7 + 20);
        *(_DWORD *)(a2 + 60) = *(_DWORD *)(v7 + 28);
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(v7 + 36);
        *(void *)(a2 + 40) = v8 + v10;
        *(void *)(a2 + 48) = v9;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WebPDemuxGetChunk(uint64_t a1, _DWORD *a2, int a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(void *)(a4 + 48) = a1;
  return SetChunk(a2, a3, a4);
}

uint64_t SetChunk(_DWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if ((a2 & 0x80000000) == 0)
  {
    if (a1)
    {
      uint64_t v4 = *(void *)(a3 + 48);
      if (v4)
      {
        int v5 = *(void **)(v4 + 88);
        if (!v5) {
          return 0;
        }
        LODWORD(v3) = 0;
        uint64_t v6 = *(void *)(v4 + 32);
        uint64_t v7 = v5;
        do
        {
          if (*(_DWORD *)(v6 + *v7) == *a1) {
            uint64_t v3 = (v3 + 1);
          }
          else {
            uint64_t v3 = v3;
          }
          uint64_t v7 = (void *)v7[2];
        }
        while (v7);
        if (v3)
        {
          if (a2) {
            int v8 = a2;
          }
          else {
            int v8 = v3;
          }
          if (v8 > (int)v3) {
            return 0;
          }
          uint64_t v9 = *v5;
          int v10 = *(_DWORD *)(v6 + *v5) == *a1;
          while (v10 != v8)
          {
            int v5 = (void *)v5[2];
            uint64_t v9 = *v5;
            if (*(_DWORD *)(v6 + *v5) == *a1) {
              ++v10;
            }
          }
          uint64_t v11 = v5[1] - 8;
          *(void *)(a3 + 8) = v6 + v9 + 8;
          *(void *)(a3 + 16) = v11;
          *(_DWORD *)a3 = v8;
          *(_DWORD *)(a3 + 4) = v3;
          return 1;
        }
      }
    }
  }
  return v3;
}

BOOL IsValidSimpleFormat(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (!v1) {
    return 1;
  }
  if (*(int *)(a1 + 52) < 1 || *(int *)(a1 + 56) < 1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 72);
  BOOL v3 = v1 == 2 && v2 == 0;
  if (v3 || *(int *)(v2 + 8) < 1) {
    return 0;
  }
  return *(_DWORD *)(v2 + 12) > 0;
}

uint64_t ParseSingleImage(uint64_t a1)
{
  if (*(void *)(a1 + 72) || *(void *)(a1 + 16) - *(void *)a1 < 8uLL) {
    return 2;
  }
  if (*(void *)(a1 + 8) - *(void *)a1 < 8uLL) {
    return 1;
  }
  BOOL v3 = WebPSafeCalloc(1uLL, 0x50uLL);
  if (!v3) {
    return 2;
  }
  uint64_t v4 = v3;
  uint64_t result = StoreFrame(1, 0, (uint64_t *)a1, (uint64_t)v3);
  if (result == 2) {
    goto LABEL_7;
  }
  int v5 = *(_DWORD *)(a1 + 48);
  if ((v5 & 0x10) == 0 && *((void *)v4 + 8))
  {
    v4[4] = 0;
    *((void *)v4 + 7) = 0;
    *((void *)v4 + 8) = 0;
  }
  if (!*(_DWORD *)(a1 + 44))
  {
    int v6 = v4[2];
    if (v6 >= 1)
    {
      int v7 = v4[3];
      if (v7 >= 1)
      {
        *(_DWORD *)(a1 + 40) = 1;
        *(_DWORD *)(a1 + 56) = v7;
        *(_DWORD *)(a1 + 48) = v5 | (16 * (v4[4] != 0));
        *(_DWORD *)(a1 + 52) = v6;
      }
    }
  }
  uint64_t v8 = *(void *)(a1 + 80);
  if (*(void *)v8)
  {
    if (!*(_DWORD *)(*(void *)v8 + 36))
    {
LABEL_7:
      _TIFFfree(v4);
      return 2;
    }
  }
  *(void *)uint64_t v8 = v4;
  *((void *)v4 + 9) = 0;
  *(void *)(a1 + 80) = v4 + 18;
  *(_DWORD *)(a1 + 68) = 1;
  return result;
}

uint64_t ParseVP8X(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v3 = 1;
  if ((unint64_t)(v1 - *(void *)a1) < 8) {
    return v3;
  }
  *(_DWORD *)(a1 + 44) = 1;
  *(void *)a1 = v2 + 4;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(_DWORD *)(v4 + v2 + 4);
  uint64_t v6 = v2 + 8;
  *(void *)a1 = v2 + 8;
  if ((v5 + 9) < 0x13) {
    return 2;
  }
  unint64_t v7 = (v5 & 1u) + v5;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8 - v6 < v7) {
    return 2;
  }
  if (v1 - v6 >= v7)
  {
    *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(v4 + v6);
    *(void *)a1 = v2 + 12;
    unsigned int v9 = *(unsigned __int16 *)(v4 + v2 + 12) | (*(unsigned __int8 *)(v4 + v2 + 12 + 2) << 16);
    *(void *)a1 = v2 + 15;
    *(_DWORD *)(a1 + 52) = ++v9;
    unsigned int v10 = *(unsigned __int16 *)(v4 + v2 + 15) | (*(unsigned __int8 *)(v4 + v2 + 15 + 2) << 16);
    uint64_t v11 = v2 + 18;
    *(void *)a1 = v11;
    *(_DWORD *)(a1 + 56) = ++v10;
    if (((v9 * (unint64_t)v10) & 0xFFFFFFFF00000000) == 0)
    {
      uint64_t v12 = v11 + (v7 - 10);
      *(void *)a1 = v12;
      *(_DWORD *)(a1 + 40) = 1;
      if ((unint64_t)(v8 - v12) >= 8)
      {
        if ((unint64_t)(v1 - v12) >= 8) {
          return ParseVP8XChunks(a1);
        }
        return 1;
      }
    }
    return 2;
  }
  return 1;
}

uint64_t IsValidExtendedFormat(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (v1)
  {
    int v2 = *(_DWORD *)(a1 + 52);
    if (v2 < 1) {
      return 0;
    }
    int v3 = *(_DWORD *)(a1 + 56);
    if (v3 < 1 || (*(_DWORD *)(a1 + 60) & 0x80000000) != 0) {
      return 0;
    }
    int v4 = *(_DWORD *)(a1 + 48);
    int v5 = *(int **)(a1 + 72);
    BOOL v6 = !v5 && v1 == 2;
    if (v6 || (v4 & 0xFFFFFFC1) != 0) {
      return 0;
    }
    if (v5)
    {
LABEL_14:
      int v9 = v5[8];
      BOOL v11 = (v4 & 2) == 0 && v9 > 1;
      while (1)
      {
        if (v5[8] != v9) {
          goto LABEL_14;
        }
        if (v11) {
          return 0;
        }
        if (v5[9])
        {
          if (*((void *)v5 + 8))
          {
            if (*((void *)v5 + 7) > *((void *)v5 + 5)) {
              return 0;
            }
          }
          else if (!*((void *)v5 + 6))
          {
            return 0;
          }
          int v12 = v5[2];
          if (v12 < 1 || v5[3] < 1) {
            return 0;
          }
        }
        else
        {
          if (v1 == 2
            || *((void *)v5 + 8) && *((void *)v5 + 6) && *((void *)v5 + 7) > *((void *)v5 + 5)
            || *((void *)v5 + 9))
          {
            return 0;
          }
          int v12 = v5[2];
          if (v12 < 1) {
            goto LABEL_47;
          }
        }
        int v13 = v5[3];
        if (v13 >= 1)
        {
          int v14 = *v5;
          if ((v4 & 2) != 0)
          {
            if (v14 < 0) {
              return 0;
            }
            uint64_t result = 0;
            int v15 = v5[1];
            if (v15 < 0 || v14 + v12 > v2 || v15 + v13 > v3) {
              return result;
            }
          }
          else
          {
            if (v14) {
              return 0;
            }
            uint64_t result = 0;
            if (v13 != v3 || v12 != v2 || v5[1]) {
              return result;
            }
          }
        }
LABEL_47:
        int v5 = (int *)*((void *)v5 + 9);
        uint64_t result = 1;
        if (!v5) {
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t StoreFrame(int a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  unint64_t v6 = v4 - *a3;
  if (v6 >= 8 && v6 >= a2)
  {
    int v12 = 0;
    int v13 = 0;
    while (1)
    {
      uint64_t v14 = a3[4];
      uint64_t v15 = v14 + v5;
      int v16 = *(_DWORD *)(v14 + v5);
      *a3 = v5 + 4;
      unsigned int v17 = *(_DWORD *)(v14 + v5 + 4);
      uint64_t v18 = v5 + 8;
      *a3 = v5 + 8;
      if (v17 > 0xFFFFFFF6) {
        return 2;
      }
      unint64_t v19 = (v17 & 1) + v17;
      unint64_t v20 = v4 - v18;
      uint64_t v21 = v4 - v18 >= v19 ? (v17 & 1) + v17 : v4 - v18;
      uint64_t v22 = a3[2];
      if (v22 - v18 < v19) {
        return 2;
      }
      uint64_t v23 = v21 + 8;
      BOOL v8 = v20 < v19;
      if (v16 != 540561494)
      {
        if (v16 != 1278758998)
        {
          if (v16 == 1213221953 && v12 == 0)
          {
            *(void *)(a4 + 56) = v5;
            *(void *)(a4 + 64) = v23;
            int v12 = 1;
            *(_DWORD *)(a4 + 16) = 1;
            *(_DWORD *)(a4 + 32) = a1;
            uint64_t v5 = v21 + v18;
            char v25 = 1;
          }
          else
          {
LABEL_22:
            char v25 = 0;
          }
          *a3 = v5;
          goto LABEL_24;
        }
        if (v12 > 0) {
          return 2;
        }
      }
      if (v13) {
        goto LABEL_22;
      }
      uint64_t v30 = 0;
      memset(v29, 0, sizeof(v29));
      int v26 = WebPGetFeaturesInternal(v15, v21 + 8, (uint64_t)v29, 521);
      if (v20 < v19 && v26 == 7) {
        return 1;
      }
      if (v26) {
        return 2;
      }
      *(void *)(a4 + 40) = v5;
      *(void *)(a4 + 48) = v23;
      *(void *)(a4 + 8) = *(void *)&v29[0];
      *(_DWORD *)(a4 + 16) |= DWORD2(v29[0]);
      *(_DWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 36) = v20 >= v19;
      uint64_t v5 = *a3 + v21;
      *a3 = v5;
      uint64_t v22 = a3[2];
      int v13 = 1;
      char v25 = 1;
LABEL_24:
      if (v5 != v22)
      {
        uint64_t v4 = a3[1];
        BOOL v8 = (unint64_t)(v4 - v5) < 8 || (unint64_t)(v20 < v19);
        if (v8) {
          char v25 = 0;
        }
        if (v25) {
          continue;
        }
      }
      return v8;
    }
  }
  return 1;
}

uint64_t ParseVP8XChunks(uint64_t a1)
{
  int v2 = 0;
  uint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 48) & 2;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(v5 + v3);
    *(void *)a1 = v3 + 4;
    uint64_t v7 = *(unsigned int *)(v5 + v3 + 4);
    uint64_t v8 = v3 + 8;
    *(void *)a1 = v3 + 8;
    if (v7 > 0xFFFFFFF6) {
      return 2;
    }
    unint64_t v9 = (v7 & 1) + v7;
    unint64_t v10 = *(void *)(a1 + 16) - v8;
    if (v10 < v9) {
      return 2;
    }
    if (v6 > 1213221952)
    {
      if (v6 <= 1296649792)
      {
        if (v6 == 1213221953 || v6 == 1278758998)
        {
LABEL_18:
          uint64_t result = 2;
          if (v2 > 0 || v4) {
            return result;
          }
          *(void *)a1 = v3;
          uint64_t result = ParseSingleImage(a1);
          int v2 = 0;
          goto LABEL_46;
        }
      }
      else
      {
        switch(v6)
        {
          case 1296649793:
            if (v9 < 6) {
              return 2;
            }
            if (*(void *)(a1 + 8) - v8 < v9) {
              goto LABEL_42;
            }
            if (!v2)
            {
              uint64_t result = 0;
              int v16 = *(_DWORD *)(v5 + v8);
              *(void *)a1 = v3 + 12;
              *(_DWORD *)(a1 + 64) = v16;
              *(_DWORD *)(a1 + 60) = *(unsigned __int16 *)(v5 + v3 + 12);
              *(void *)a1 = v3 + (v9 - 6) + 14;
              goto LABEL_33;
            }
            goto LABEL_45;
          case 1346585417:
            char v11 = 5;
            goto LABEL_35;
          case 1480085590:
            return 2;
        }
      }
      goto LABEL_41;
    }
    if (v6 <= 1179211844)
    {
      if (v6 == 540561494) {
        goto LABEL_18;
      }
      if (v6 == 542133592)
      {
        char v11 = 2;
        goto LABEL_35;
      }
LABEL_41:
      if (*(void *)(a1 + 8) - v8 < v9) {
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v6 == 1179211845)
    {
      char v11 = 3;
LABEL_35:
      if (*(void *)(a1 + 8) - v8 < v9) {
        goto LABEL_42;
      }
      if (((*(_DWORD *)(a1 + 48) >> v11) & 1) == 0)
      {
LABEL_45:
        uint64_t result = 0;
        *(void *)a1 = v8 + v9;
        goto LABEL_46;
      }
LABEL_43:
      unsigned int v17 = WebPSafeCalloc(1uLL, 0x18uLL);
      if (!v17) {
        return 2;
      }
      *unsigned int v17 = v3;
      v17[1] = v7 + 8;
      **(void **)(a1 + 96) = v17;
      v17[2] = 0;
      *(void *)(a1 + 96) = v17 + 2;
      uint64_t v8 = *(void *)a1;
      goto LABEL_45;
    }
    if (v6 != 1179471425) {
      goto LABEL_41;
    }
    if (!v2) {
      return 2;
    }
    BOOL v15 = v9 >= 0x10;
    unsigned int v14 = v9 - 16;
    BOOL v15 = v15 && v10 >= 0x10;
    if (!v15) {
      goto LABEL_28;
    }
    if ((unint64_t)(*(void *)(a1 + 8) - v8) < 0x10)
    {
      int v2 = 1;
LABEL_42:
      uint64_t result = 1;
      goto LABEL_46;
    }
    int v18 = *(_DWORD *)(a1 + 48);
    int v2 = 1;
    unint64_t v19 = WebPSafeCalloc(1uLL, 0x50uLL);
    if (!v19)
    {
      uint64_t result = 2;
      goto LABEL_46;
    }
    unint64_t v20 = v19;
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = (unsigned __int8 *)(v21 + *(void *)a1);
    int v24 = *v23;
    int v25 = v23[1];
    LODWORD(v23) = v23[2];
    uint64_t v26 = *(void *)a1 + 3;
    *(void *)a1 = v26;
    *unint64_t v19 = (2 * v24) | (v25 << 9) | (v23 << 17);
    int v27 = *(unsigned __int8 *)(v21 + v26);
    int v28 = *(unsigned __int8 *)(v21 + v26 + 1);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + v26 + 2);
    *(void *)a1 = v22 + 6;
    v19[1] = (2 * v27) | (v28 << 9) | (v23 << 17);
    LODWORD(v23) = *(unsigned __int16 *)(v21 + v22 + 6) | (*(unsigned __int8 *)(v21 + v22 + 6 + 2) << 16);
    *(void *)a1 = v22 + 9;
    LODWORD(v23) = v23 + 1;
    v19[2] = v23;
    unsigned int v29 = *(unsigned __int16 *)(v21 + v22 + 9) | (*(unsigned __int8 *)(v21 + v22 + 9 + 2) << 16);
    *(void *)a1 = v22 + 12;
    v19[3] = ++v29;
    int v30 = *(unsigned __int16 *)(v21 + v22 + 12) | (*(unsigned __int8 *)(v21 + v22 + 12 + 2) << 16);
    *(void *)a1 = v22 + 15;
    v19[5] = v30;
    LODWORD(v21) = *(unsigned __int8 *)(v21 + v22 + 15);
    uint64_t v31 = v22 + 16;
    *(void *)a1 = v22 + 16;
    v19[6] = v21 & 1;
    v19[7] = (v21 >> 1) & 1;
    if (((v23 * (unint64_t)v29) & 0xFFFFFFFF00000000) != 0)
    {
      _TIFFfree(v19);
LABEL_28:
      uint64_t result = 2;
LABEL_33:
      int v2 = 1;
      goto LABEL_46;
    }
    uint64_t result = StoreFrame(*(_DWORD *)(a1 + 68) + 1, v14, (uint64_t *)a1, (uint64_t)v19);
    if (result != 2)
    {
      if (*(void *)a1 - v31 <= (unint64_t)v14) {
        uint64_t v32 = result;
      }
      else {
        uint64_t v32 = 2;
      }
      if (v32 == 2 || (v18 & 2) == 0) {
        goto LABEL_58;
      }
      if ((int)v20[8] < 1)
      {
        uint64_t v32 = result;
        goto LABEL_58;
      }
      uint64_t v33 = *(void *)(a1 + 80);
      if (!*(void *)v33 || *(_DWORD *)(*(void *)v33 + 36))
      {
        *(void *)uint64_t v33 = v20;
        *((void *)v20 + 9) = 0;
        *(void *)(a1 + 80) = v20 + 18;
        ++*(_DWORD *)(a1 + 68);
        goto LABEL_33;
      }
    }
    uint64_t v32 = 2;
LABEL_58:
    _TIFFfree(v20);
    int v2 = 1;
    uint64_t result = v32;
LABEL_46:
    uint64_t v3 = *(void *)a1;
    if (*(void *)a1 != *(void *)(a1 + 16))
    {
      uint64_t result = (unint64_t)(*(void *)(a1 + 8) - v3) < 8 ? 1 : result;
      if (!result) {
        continue;
      }
    }
    return result;
  }
}

void WebPDemuxInternal_cold_1()
{
}

uint64_t VP8ResetProba(uint64_t result)
{
  *(unsigned char *)(result + 2) = -1;
  *(_WORD *)uint64_t result = -1;
  return result;
}

BOOL VP8ParseIntraModeRow(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(int *)(a2 + 408) >= 1)
  {
    uint64_t v4 = 0;
    v237 = (int *)(a2 + 2816);
    while (1)
    {
      uint64_t v5 = *(void *)(v2 + 2808);
      uint64_t v6 = *(void *)(v2 + 2912);
      LODWORD(v7) = *(_DWORD *)(v2 + 136);
      uint64_t v236 = v6;
      if (v7)
      {
        int v8 = *(unsigned __int8 *)(v2 + 1192);
        int v10 = *(_DWORD *)(a1 + 8);
        int v9 = *(_DWORD *)(a1 + 12);
        if (v9 < 0)
        {
          char v11 = *(unint64_t **)(a1 + 16);
          if (!v11) {
            VP8GetValue_cold_1();
          }
          if ((unint64_t)v11 >= *(void *)(a1 + 32))
          {
            VP8LoadFinalBytes(a1);
            int v9 = *(_DWORD *)(a1 + 12);
          }
          else
          {
            unint64_t v12 = *v11;
            *(void *)(a1 + 16) = (char *)v11 + 7;
            *((void *)&v13 + 1) = *(void *)a1;
            *(void *)&long long v13 = bswap64(v12);
            *(void *)a1 = v13 >> 8;
            v9 += 56;
          }
        }
        unsigned int v14 = (v10 * v8) >> 8;
        unint64_t v7 = *(void *)a1;
        int v15 = v9;
        uint64_t v16 = *(void *)a1 >> v9;
        if (v14 >= v16)
        {
          unsigned int v17 = v14 + 1;
        }
        else
        {
          unsigned int v17 = v10 - v14;
          v7 -= (unint64_t)(v14 + 1) << v15;
          *(void *)a1 = v7;
        }
        unsigned int v18 = __clz(v17) ^ 0x18;
        unsigned int v19 = v17 << v18;
        int v20 = v15 - v18;
        unsigned int v21 = v19 - 1;
        *(_DWORD *)(a1 + 8) = v19 - 1;
        *(_DWORD *)(a1 + 12) = v15 - v18;
        if (v14 >= v16)
        {
          int v26 = *(unsigned __int8 *)(v2 + 1193);
          if (v20 < 0)
          {
            int v27 = *(unint64_t **)(a1 + 16);
            if (!v27) {
              VP8GetValue_cold_1();
            }
            if ((unint64_t)v27 >= *(void *)(a1 + 32))
            {
              VP8LoadFinalBytes(a1);
              int v20 = *(_DWORD *)(a1 + 12);
              unint64_t v7 = *(void *)a1;
            }
            else
            {
              unint64_t v28 = *v27;
              *(void *)(a1 + 16) = (char *)v27 + 7;
              *((void *)&v29 + 1) = v7;
              *(void *)&long long v29 = bswap64(v28);
              unint64_t v7 = v29 >> 8;
              *(void *)a1 = v7;
              v20 += 56;
            }
          }
          unsigned int v34 = (v21 * v26) >> 8;
          int v35 = v20;
          unint64_t v36 = v7 >> v20;
          if (v34 >= v36)
          {
            unsigned int v37 = v34 + 1;
          }
          else
          {
            unsigned int v37 = v21 - v34;
            *(void *)a1 = v7 - ((unint64_t)(v34 + 1) << v35);
          }
          uint64_t v6 = v236;
          LOBYTE(v7) = v34 < v36;
          unsigned int v38 = __clz(v37) ^ 0x18;
          *(_DWORD *)(a1 + 8) = (v37 << v38) - 1;
          *(_DWORD *)(a1 + 12) = v35 - v38;
        }
        else
        {
          int v22 = *(unsigned __int8 *)(v2 + 1194);
          if (v20 < 0)
          {
            uint64_t v23 = *(unint64_t **)(a1 + 16);
            if (!v23) {
              VP8GetValue_cold_1();
            }
            if ((unint64_t)v23 >= *(void *)(a1 + 32))
            {
              VP8LoadFinalBytes(a1);
              int v20 = *(_DWORD *)(a1 + 12);
              unint64_t v7 = *(void *)a1;
            }
            else
            {
              unint64_t v24 = *v23;
              *(void *)(a1 + 16) = (char *)v23 + 7;
              *((void *)&v25 + 1) = v7;
              *(void *)&long long v25 = bswap64(v24);
              unint64_t v7 = v25 >> 8;
              *(void *)a1 = v7;
              v20 += 56;
            }
          }
          unsigned int v30 = (v21 * v22) >> 8;
          if (v30 >= (v7 >> v20))
          {
            unsigned int v31 = v30 + 1;
          }
          else
          {
            unsigned int v31 = v21 - v30;
            *(void *)a1 = v7 - ((unint64_t)(v30 + 1) << v20);
          }
          uint64_t v6 = v236;
          BOOL v32 = v30 < (v7 >> v20);
          unsigned int v33 = __clz(v31) ^ 0x18;
          *(_DWORD *)(a1 + 8) = (v31 << v33) - 1;
          *(_DWORD *)(a1 + 12) = v20 - v33;
          LOBYTE(v7) = v32 | 2;
        }
      }
      *(unsigned char *)(v6 + 800 * v4 + 798) = v7;
      if (!*(_DWORD *)(v2 + 2800)) {
        break;
      }
      int v39 = *(unsigned __int8 *)(v2 + 2804);
      int v41 = *(_DWORD *)(a1 + 8);
      int v40 = *(_DWORD *)(a1 + 12);
      if (v40 < 0)
      {
        unsigned int v42 = *(unint64_t **)(a1 + 16);
        if (!v42) {
          VP8GetValue_cold_1();
        }
        if ((unint64_t)v42 >= *(void *)(a1 + 32))
        {
          VP8LoadFinalBytes(a1);
          int v40 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          unint64_t v43 = *v42;
          *(void *)(a1 + 16) = (char *)v42 + 7;
          *((void *)&v44 + 1) = *(void *)a1;
          *(void *)&long long v44 = bswap64(v43);
          *(void *)a1 = v44 >> 8;
          v40 += 56;
        }
      }
      unsigned int v47 = (v41 * v39) >> 8;
      int v48 = v40;
      uint64_t v49 = *(void *)a1 >> v40;
      if (v47 >= v49)
      {
        unsigned int v50 = v47 + 1;
      }
      else
      {
        unsigned int v50 = v41 - v47;
        *(void *)a1 -= (unint64_t)(v47 + 1) << v48;
      }
      BOOL v51 = v47 < v49;
      unsigned int v52 = __clz(v50) ^ 0x18;
      unsigned int v53 = v50 << v52;
      int v45 = v48 - v52;
      unsigned int v46 = v53 - 1;
      *(_DWORD *)(a1 + 8) = v53 - 1;
      *(_DWORD *)(a1 + 12) = v45;
      *(unsigned char *)(v6 + 800 * v4 + 797) = v51;
      if (v45 < 0) {
        goto LABEL_43;
      }
LABEL_47:
      unsigned int v57 = (145 * v46) >> 8;
      int v58 = v45;
      uint64_t v59 = *(void *)a1 >> v45;
      if (v57 < v59)
      {
        unsigned int v60 = v46 - v57;
        *(void *)a1 -= (unint64_t)(v57 + 1) << v58;
      }
      else
      {
        unsigned int v60 = v57 + 1;
      }
      v238 = (int *)(v5 + (4 * v4));
      unsigned int v61 = __clz(v60) ^ 0x18;
      int v62 = v58 - v61;
      int v63 = (v60 << v61) - 1;
      *(_DWORD *)(a1 + 8) = v63;
      *(_DWORD *)(a1 + 12) = v62;
      *(unsigned char *)(v6 + 800 * v4 + 768) = v57 >= v59;
      uint64_t v235 = v4;
      if (v57 >= v59)
      {
        uint64_t v64 = 0;
        uint64_t v65 = (int *)(v6 + 800 * v4 + 769);
        uint64_t v66 = v5 + 4 * (v4 & 0x3FFFFFFF);
        int v67 = v237;
        while (1)
        {
          uint64_t v68 = 0;
          uint64_t v69 = *((unsigned __int8 *)v67 + v64);
          do
          {
            int v70 = (unsigned __int8 *)&kBModesProba + 90 * *(unsigned __int8 *)(v66 + v68) + 9 * v69;
            int v71 = *v70;
            int v73 = *(_DWORD *)(a1 + 8);
            int v72 = *(_DWORD *)(a1 + 12);
            if (v72 < 0)
            {
              int v74 = *(unint64_t **)(a1 + 16);
              if (!v74) {
                VP8GetValue_cold_1();
              }
              if ((unint64_t)v74 >= *(void *)(a1 + 32))
              {
                VP8LoadFinalBytes(a1);
                int v72 = *(_DWORD *)(a1 + 12);
              }
              else
              {
                unint64_t v75 = *v74;
                *(void *)(a1 + 16) = (char *)v74 + 7;
                *((void *)&v76 + 1) = *(void *)a1;
                *(void *)&long long v76 = bswap64(v75);
                *(void *)a1 = v76 >> 8;
                v72 += 56;
              }
            }
            unsigned int v77 = (v73 * v71) >> 8;
            unint64_t v78 = *(void *)a1;
            int v79 = v72;
            uint64_t v80 = *(void *)a1 >> v72;
            if (v77 >= v80)
            {
              unsigned int v81 = v77 + 1;
            }
            else
            {
              unsigned int v81 = v73 - v77;
              v78 -= (unint64_t)(v77 + 1) << v79;
              *(void *)a1 = v78;
            }
            unsigned int v82 = __clz(v81) ^ 0x18;
            unsigned int v83 = v81 << v82;
            int v84 = v79 - v82;
            unsigned int v85 = v83 - 1;
            *(_DWORD *)(a1 + 8) = v83 - 1;
            *(_DWORD *)(a1 + 12) = v79 - v82;
            if (v77 >= v80)
            {
              uint64_t v69 = 0;
              goto LABEL_139;
            }
            int v86 = v70[1];
            if (v84 < 0)
            {
              uint8x8_t v87 = *(unint64_t **)(a1 + 16);
              if (!v87) {
                VP8GetValue_cold_1();
              }
              if ((unint64_t)v87 >= *(void *)(a1 + 32))
              {
                VP8LoadFinalBytes(a1);
                int v84 = *(_DWORD *)(a1 + 12);
                unint64_t v78 = *(void *)a1;
              }
              else
              {
                unint64_t v88 = *v87;
                *(void *)(a1 + 16) = (char *)v87 + 7;
                *((void *)&v89 + 1) = v78;
                *(void *)&long long v89 = bswap64(v88);
                unint64_t v78 = v89 >> 8;
                *(void *)a1 = v78;
                v84 += 56;
              }
            }
            unsigned int v90 = (v85 * v86) >> 8;
            int v91 = v84;
            unint64_t v92 = v78 >> v84;
            if (v90 >= (v78 >> v84))
            {
              unsigned int v93 = v90 + 1;
            }
            else
            {
              unsigned int v93 = v85 - v90;
              v78 -= (unint64_t)(v90 + 1) << v91;
              *(void *)a1 = v78;
            }
            unsigned int v94 = __clz(v93) ^ 0x18;
            unsigned int v95 = v93 << v94;
            int v96 = v91 - v94;
            unsigned int v97 = v95 - 1;
            *(_DWORD *)(a1 + 8) = v95 - 1;
            *(_DWORD *)(a1 + 12) = v91 - v94;
            if (v90 >= v92)
            {
              uint64_t v69 = 1;
              goto LABEL_139;
            }
            int v98 = v70[2];
            if (v96 < 0)
            {
              int8x16_t v99 = *(unint64_t **)(a1 + 16);
              if (!v99) {
                VP8GetValue_cold_1();
              }
              if ((unint64_t)v99 >= *(void *)(a1 + 32))
              {
                VP8LoadFinalBytes(a1);
                int v96 = *(_DWORD *)(a1 + 12);
                unint64_t v78 = *(void *)a1;
              }
              else
              {
                unint64_t v100 = *v99;
                *(void *)(a1 + 16) = (char *)v99 + 7;
                *((void *)&v101 + 1) = v78;
                *(void *)&long long v101 = bswap64(v100);
                unint64_t v78 = v101 >> 8;
                *(void *)a1 = v78;
                v96 += 56;
              }
            }
            unsigned int v102 = (v97 * v98) >> 8;
            int v103 = v96;
            unint64_t v104 = v78 >> v96;
            if (v102 >= (v78 >> v96))
            {
              unsigned int v105 = v102 + 1;
            }
            else
            {
              unsigned int v105 = v97 - v102;
              v78 -= (unint64_t)(v102 + 1) << v103;
              *(void *)a1 = v78;
            }
            unsigned int v106 = __clz(v105) ^ 0x18;
            unsigned int v107 = v105 << v106;
            int v108 = v103 - v106;
            unsigned int v109 = v107 - 1;
            *(_DWORD *)(a1 + 8) = v107 - 1;
            *(_DWORD *)(a1 + 12) = v103 - v106;
            if (v102 >= v104)
            {
              uint64_t v69 = 2;
              goto LABEL_139;
            }
            int v110 = v70[3];
            if (v108 < 0)
            {
              int8x16_t v111 = *(unint64_t **)(a1 + 16);
              if (!v111) {
                VP8GetValue_cold_1();
              }
              if ((unint64_t)v111 >= *(void *)(a1 + 32))
              {
                VP8LoadFinalBytes(a1);
                int v108 = *(_DWORD *)(a1 + 12);
                unint64_t v78 = *(void *)a1;
              }
              else
              {
                unint64_t v112 = *v111;
                *(void *)(a1 + 16) = (char *)v111 + 7;
                *((void *)&v113 + 1) = v78;
                *(void *)&long long v113 = bswap64(v112);
                unint64_t v78 = v113 >> 8;
                *(void *)a1 = v78;
                v108 += 56;
              }
            }
            unsigned int v114 = (v109 * v110) >> 8;
            int v115 = v108;
            unint64_t v116 = v78 >> v108;
            if (v114 >= (v78 >> v108))
            {
              unsigned int v117 = v114 + 1;
            }
            else
            {
              unsigned int v117 = v109 - v114;
              v78 -= (unint64_t)(v114 + 1) << v115;
              *(void *)a1 = v78;
            }
            unsigned int v118 = __clz(v117) ^ 0x18;
            unsigned int v119 = v117 << v118;
            int v120 = v115 - v118;
            unsigned int v121 = v119 - 1;
            *(_DWORD *)(a1 + 8) = v119 - 1;
            *(_DWORD *)(a1 + 12) = v115 - v118;
            if (v114 >= v116)
            {
              int v126 = v70[4];
              if (v120 < 0)
              {
                signed int v127 = *(unint64_t **)(a1 + 16);
                if (!v127) {
                  VP8GetValue_cold_1();
                }
                if ((unint64_t)v127 >= *(void *)(a1 + 32))
                {
                  VP8LoadFinalBytes(a1);
                  int v120 = *(_DWORD *)(a1 + 12);
                  unint64_t v78 = *(void *)a1;
                }
                else
                {
                  unint64_t v128 = *v127;
                  *(void *)(a1 + 16) = (char *)v127 + 7;
                  *((void *)&v129 + 1) = v78;
                  *(void *)&long long v129 = bswap64(v128);
                  unint64_t v78 = v129 >> 8;
                  *(void *)a1 = v78;
                  v120 += 56;
                }
              }
              unsigned int v140 = (v121 * v126) >> 8;
              int v141 = v120;
              unint64_t v142 = v78 >> v120;
              if (v140 >= (v78 >> v120))
              {
                unsigned int v143 = v140 + 1;
              }
              else
              {
                unsigned int v143 = v121 - v140;
                v78 -= (unint64_t)(v140 + 1) << v141;
                *(void *)a1 = v78;
              }
              unsigned int v144 = __clz(v143) ^ 0x18;
              unsigned int v145 = v143 << v144;
              int v146 = v141 - v144;
              unsigned int v147 = v145 - 1;
              *(_DWORD *)(a1 + 8) = v145 - 1;
              *(_DWORD *)(a1 + 12) = v141 - v144;
              if (v140 >= v142)
              {
                uint64_t v69 = 3;
                goto LABEL_139;
              }
              int v148 = v70[5];
              if (v146 < 0)
              {
                char v149 = *(unint64_t **)(a1 + 16);
                if (!v149) {
                  VP8GetValue_cold_1();
                }
                if ((unint64_t)v149 >= *(void *)(a1 + 32))
                {
                  VP8LoadFinalBytes(a1);
                  int v146 = *(_DWORD *)(a1 + 12);
                  unint64_t v78 = *(void *)a1;
                }
                else
                {
                  unint64_t v150 = *v149;
                  *(void *)(a1 + 16) = (char *)v149 + 7;
                  *((void *)&v151 + 1) = v78;
                  *(void *)&long long v151 = bswap64(v150);
                  unint64_t v78 = v151 >> 8;
                  *(void *)a1 = v78;
                  v146 += 56;
                }
              }
              unsigned int v164 = (v147 * v148) >> 8;
              int v165 = v146;
              if (v164 >= (v78 >> v146))
              {
                unsigned int v166 = v164 + 1;
                uint64_t v69 = 4;
              }
              else
              {
                unsigned int v166 = v147 - v164;
                *(void *)a1 = v78 - ((unint64_t)(v164 + 1) << v165);
                uint64_t v69 = 5;
              }
            }
            else
            {
              int v122 = v70[6];
              if (v120 < 0)
              {
                unsigned int v123 = *(unint64_t **)(a1 + 16);
                if (!v123) {
                  VP8GetValue_cold_1();
                }
                if ((unint64_t)v123 >= *(void *)(a1 + 32))
                {
                  VP8LoadFinalBytes(a1);
                  int v120 = *(_DWORD *)(a1 + 12);
                  unint64_t v78 = *(void *)a1;
                }
                else
                {
                  unint64_t v124 = *v123;
                  *(void *)(a1 + 16) = (char *)v123 + 7;
                  *((void *)&v125 + 1) = v78;
                  *(void *)&long long v125 = bswap64(v124);
                  unint64_t v78 = v125 >> 8;
                  *(void *)a1 = v78;
                  v120 += 56;
                }
              }
              unsigned int v130 = (v121 * v122) >> 8;
              unint64_t v131 = v78 >> v120;
              if (v130 >= (v78 >> v120))
              {
                unsigned int v132 = v130 + 1;
              }
              else
              {
                unsigned int v132 = v121 - v130;
                v78 -= (unint64_t)(v130 + 1) << v120;
                *(void *)a1 = v78;
              }
              unsigned int v133 = __clz(v132) ^ 0x18;
              int v134 = v120 - v133;
              int v135 = (v132 << v133) - 1;
              *(_DWORD *)(a1 + 8) = v135;
              *(_DWORD *)(a1 + 12) = v134;
              if (v130 >= v131)
              {
                uint64_t v69 = 6;
                goto LABEL_139;
              }
              int v136 = v70[7];
              if (v134 < 0)
              {
                int v137 = *(unint64_t **)(a1 + 16);
                if (!v137) {
                  VP8GetValue_cold_1();
                }
                if ((unint64_t)v137 >= *(void *)(a1 + 32))
                {
                  VP8LoadFinalBytes(a1);
                  int v134 = *(_DWORD *)(a1 + 12);
                  unint64_t v78 = *(void *)a1;
                }
                else
                {
                  unint64_t v138 = *v137;
                  *(void *)(a1 + 16) = (char *)v137 + 7;
                  *((void *)&v139 + 1) = v78;
                  *(void *)&long long v139 = bswap64(v138);
                  unint64_t v78 = v139 >> 8;
                  *(void *)a1 = v78;
                  v134 += 56;
                }
              }
              unsigned int v152 = (v135 * v136) >> 8;
              int v153 = v134;
              unint64_t v154 = v78 >> v134;
              if (v152 >= (v78 >> v134))
              {
                unsigned int v155 = v152 + 1;
              }
              else
              {
                unsigned int v155 = v135 - v152;
                v78 -= (unint64_t)(v152 + 1) << v153;
                *(void *)a1 = v78;
              }
              unsigned int v156 = __clz(v155) ^ 0x18;
              unsigned int v157 = v155 << v156;
              int v158 = v153 - v156;
              unsigned int v159 = v157 - 1;
              *(_DWORD *)(a1 + 8) = v157 - 1;
              *(_DWORD *)(a1 + 12) = v153 - v156;
              if (v152 >= v154)
              {
                uint64_t v69 = 7;
                goto LABEL_139;
              }
              int v160 = v70[8];
              if (v158 < 0)
              {
                v161 = *(unint64_t **)(a1 + 16);
                if (!v161) {
                  VP8GetValue_cold_1();
                }
                if ((unint64_t)v161 >= *(void *)(a1 + 32))
                {
                  VP8LoadFinalBytes(a1);
                  int v158 = *(_DWORD *)(a1 + 12);
                  unint64_t v78 = *(void *)a1;
                }
                else
                {
                  unint64_t v162 = *v161;
                  *(void *)(a1 + 16) = (char *)v161 + 7;
                  *((void *)&v163 + 1) = v78;
                  *(void *)&long long v163 = bswap64(v162);
                  unint64_t v78 = v163 >> 8;
                  *(void *)a1 = v78;
                  v158 += 56;
                }
              }
              unsigned int v167 = (v159 * v160) >> 8;
              int v165 = v158;
              if (v167 >= (v78 >> v158))
              {
                unsigned int v166 = v167 + 1;
                uint64_t v69 = 8;
              }
              else
              {
                unsigned int v166 = v159 - v167;
                *(void *)a1 = v78 - ((unint64_t)(v167 + 1) << v165);
                uint64_t v69 = 9;
              }
            }
            unsigned int v168 = __clz(v166) ^ 0x18;
            *(_DWORD *)(a1 + 8) = (v166 << v168) - 1;
            *(_DWORD *)(a1 + 12) = v165 - v168;
LABEL_139:
            *(unsigned char *)(v66 + v68++) = v69;
          }
          while (v68 != 4);
          *v65++ = *v238;
          *((unsigned char *)v237 + v64) = v69;
          int v67 = v237;
          if (++v64 == 4) {
            goto LABEL_170;
          }
        }
      }
      if (v62 < 0)
      {
        int8x8x2_t v169 = *(unint64_t **)(a1 + 16);
        if (!v169) {
          VP8GetValue_cold_1();
        }
        if ((unint64_t)v169 >= *(void *)(a1 + 32))
        {
          VP8LoadFinalBytes(a1);
          int v62 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          unint64_t v170 = *v169;
          *(void *)(a1 + 16) = (char *)v169 + 7;
          *((void *)&v171 + 1) = *(void *)a1;
          *(void *)&long long v171 = bswap64(v170);
          *(void *)a1 = v171 >> 8;
          v62 += 56;
        }
      }
      unsigned int v172 = (156 * v63) >> 8;
      unint64_t v173 = *(void *)a1;
      int v174 = v62;
      uint64_t v175 = *(void *)a1 >> v62;
      if (v172 >= v175)
      {
        unsigned int v176 = v172 + 1;
      }
      else
      {
        unsigned int v176 = v63 - v172;
        v173 -= (unint64_t)(v172 + 1) << v174;
        *(void *)a1 = v173;
      }
      unsigned int v177 = __clz(v176) ^ 0x18;
      unsigned int v178 = v176 << v177;
      int v179 = v174 - v177;
      unsigned int v180 = v178 - 1;
      *(_DWORD *)(a1 + 8) = v178 - 1;
      *(_DWORD *)(a1 + 12) = v174 - v177;
      if (v172 >= v175)
      {
        if (v179 < 0)
        {
          v184 = *(unint64_t **)(a1 + 16);
          if (!v184) {
            VP8GetValue_cold_1();
          }
          if ((unint64_t)v184 >= *(void *)(a1 + 32))
          {
            VP8LoadFinalBytes(a1);
            int v179 = *(_DWORD *)(a1 + 12);
            unint64_t v173 = *(void *)a1;
          }
          else
          {
            unint64_t v185 = *v184;
            *(void *)(a1 + 16) = (char *)v184 + 7;
            *((void *)&v186 + 1) = v173;
            *(void *)&long long v186 = bswap64(v185);
            unint64_t v173 = v186 >> 8;
            *(void *)a1 = v173;
            v179 += 56;
          }
        }
        unsigned int v195 = (163 * v180) >> 8;
        if (v195 >= (v173 >> v179))
        {
          int v190 = 0;
          unsigned int v196 = v195 + 1;
        }
        else
        {
          unsigned int v196 = v180 - v195;
          *(void *)a1 = v173 - ((unint64_t)(v195 + 1) << v179);
          int v190 = 2;
        }
        unsigned int v197 = __clz(v196);
        int v198 = v197 ^ 0x18;
        unsigned int v193 = v196 << (v197 ^ 0x18);
        int v194 = v179 - v198;
      }
      else
      {
        if (v179 < 0)
        {
          v181 = *(unint64_t **)(a1 + 16);
          if (!v181) {
            VP8GetValue_cold_1();
          }
          if ((unint64_t)v181 >= *(void *)(a1 + 32))
          {
            VP8LoadFinalBytes(a1);
            int v179 = *(_DWORD *)(a1 + 12);
            unint64_t v173 = *(void *)a1;
          }
          else
          {
            unint64_t v182 = *v181;
            *(void *)(a1 + 16) = (char *)v181 + 7;
            *((void *)&v183 + 1) = v173;
            *(void *)&long long v183 = bswap64(v182);
            unint64_t v173 = v183 >> 8;
            *(void *)a1 = v173;
            v179 += 56;
          }
        }
        unsigned int v187 = (v180 >> 1) & 0xFFFFFF;
        int v188 = v179;
        if (v187 >= (v173 >> v179))
        {
          unsigned int v189 = v187 + 1;
          int v190 = 3;
        }
        else
        {
          unsigned int v189 = v180 - v187;
          *(void *)a1 = v173 - ((unint64_t)(v187 + 1) << v188);
          int v190 = 1;
        }
        unsigned int v191 = __clz(v189);
        int v192 = v191 ^ 0x18;
        unsigned int v193 = v189 << (v191 ^ 0x18);
        int v194 = v188 - v192;
      }
      *(_DWORD *)(a1 + 8) = v193 - 1;
      *(_DWORD *)(a1 + 12) = v194;
      *(unsigned char *)(v6 + 800 * v4 + 769) = v190;
      int v199 = 16843009 * v190;
      int *v238 = v199;
      int *v237 = v199;
LABEL_170:
      int v201 = *(_DWORD *)(a1 + 8);
      int v200 = *(_DWORD *)(a1 + 12);
      uint64_t v2 = a2;
      if (v200 < 0)
      {
        v202 = *(unint64_t **)(a1 + 16);
        if (!v202) {
          VP8GetValue_cold_1();
        }
        if ((unint64_t)v202 >= *(void *)(a1 + 32))
        {
          VP8LoadFinalBytes(a1);
          int v200 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          unint64_t v203 = *v202;
          *(void *)(a1 + 16) = (char *)v202 + 7;
          *((void *)&v204 + 1) = *(void *)a1;
          *(void *)&long long v204 = bswap64(v203);
          *(void *)a1 = v204 >> 8;
          v200 += 56;
        }
      }
      unsigned int v205 = (142 * v201) >> 8;
      unint64_t v206 = *(void *)a1;
      int v207 = v200;
      uint64_t v208 = *(void *)a1 >> v200;
      if (v205 >= v208)
      {
        unsigned int v209 = v205 + 1;
      }
      else
      {
        unsigned int v209 = v201 - v205;
        v206 -= (unint64_t)(v205 + 1) << v207;
        *(void *)a1 = v206;
      }
      unsigned int v210 = __clz(v209) ^ 0x18;
      unsigned int v211 = v209 << v210;
      int v212 = v207 - v210;
      unsigned int v213 = v211 - 1;
      *(_DWORD *)(a1 + 8) = v211 - 1;
      *(_DWORD *)(a1 + 12) = v207 - v210;
      if (v205 >= v208)
      {
        char v217 = 0;
      }
      else
      {
        if (v212 < 0)
        {
          v214 = *(unint64_t **)(a1 + 16);
          if (!v214) {
            VP8GetValue_cold_1();
          }
          if ((unint64_t)v214 >= *(void *)(a1 + 32))
          {
            VP8LoadFinalBytes(a1);
            int v212 = *(_DWORD *)(a1 + 12);
            unint64_t v206 = *(void *)a1;
          }
          else
          {
            unint64_t v215 = *v214;
            *(void *)(a1 + 16) = (char *)v214 + 7;
            *((void *)&v216 + 1) = v206;
            *(void *)&long long v216 = bswap64(v215);
            unint64_t v206 = v216 >> 8;
            *(void *)a1 = v206;
            v212 += 56;
          }
        }
        unsigned int v218 = (114 * v213) >> 8;
        int v219 = v212;
        unint64_t v220 = v206 >> v212;
        if (v218 >= (v206 >> v212))
        {
          unsigned int v221 = v218 + 1;
        }
        else
        {
          unsigned int v221 = v213 - v218;
          v206 -= (unint64_t)(v218 + 1) << v219;
          *(void *)a1 = v206;
        }
        unsigned int v222 = __clz(v221) ^ 0x18;
        unsigned int v223 = v221 << v222;
        int v224 = v219 - v222;
        unsigned int v225 = v223 - 1;
        *(_DWORD *)(a1 + 8) = v223 - 1;
        *(_DWORD *)(a1 + 12) = v219 - v222;
        if (v218 >= v220)
        {
          char v217 = 2;
        }
        else
        {
          if (v224 < 0)
          {
            v226 = *(unint64_t **)(a1 + 16);
            if (!v226) {
              VP8GetValue_cold_1();
            }
            if ((unint64_t)v226 >= *(void *)(a1 + 32))
            {
              VP8LoadFinalBytes(a1);
              int v224 = *(_DWORD *)(a1 + 12);
              unint64_t v206 = *(void *)a1;
            }
            else
            {
              unint64_t v227 = *v226;
              *(void *)(a1 + 16) = (char *)v226 + 7;
              *((void *)&v228 + 1) = v206;
              *(void *)&long long v228 = bswap64(v227);
              unint64_t v206 = v228 >> 8;
              *(void *)a1 = v206;
              v224 += 56;
            }
          }
          unsigned int v229 = (183 * v225) >> 8;
          int v230 = v224;
          if (v229 >= (v206 >> v224))
          {
            unsigned int v231 = v229 + 1;
            char v217 = 3;
          }
          else
          {
            unsigned int v231 = v225 - v229;
            *(void *)a1 = v206 - ((unint64_t)(v229 + 1) << v230);
            char v217 = 1;
          }
          unsigned int v232 = __clz(v231) ^ 0x18;
          *(_DWORD *)(a1 + 8) = (v231 << v232) - 1;
          *(_DWORD *)(a1 + 12) = v230 - v232;
        }
      }
      *(unsigned char *)(v236 + 800 * v235 + 785) = v217;
      uint64_t v4 = v235 + 1;
      if (v235 + 1 >= *(int *)(a2 + 408)) {
        return *(_DWORD *)(v2 + 56) == 0;
      }
    }
    unsigned int v46 = *(_DWORD *)(a1 + 8);
    int v45 = *(_DWORD *)(a1 + 12);
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_47;
    }
LABEL_43:
    unsigned int v54 = *(unint64_t **)(a1 + 16);
    if (!v54) {
      VP8GetValue_cold_1();
    }
    if ((unint64_t)v54 >= *(void *)(a1 + 32))
    {
      VP8LoadFinalBytes(a1);
      int v45 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      unint64_t v55 = *v54;
      *(void *)(a1 + 16) = (char *)v54 + 7;
      *((void *)&v56 + 1) = *(void *)a1;
      *(void *)&long long v56 = bswap64(v55);
      *(void *)a1 = v56 >> 8;
      v45 += 56;
    }
    goto LABEL_47;
  }
  return *(_DWORD *)(v2 + 56) == 0;
}

uint64_t VP8ParseProba(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2 + 1195;
  uint64_t v5 = (char *)&CoeffsUpdateProba;
  uint64_t v6 = a2 + 2256;
  unint64_t v7 = (char *)&CoeffsProba0;
  do
  {
    unint64_t v28 = v7;
    uint64_t v29 = v6;
    uint64_t v31 = v4;
    uint64_t v32 = v3;
    uint64_t v8 = 0;
    unsigned int v30 = v5;
    do
    {
      uint64_t v33 = v4;
      uint64_t v34 = v8;
      uint64_t v9 = 0;
      int v10 = v7;
      char v11 = v5;
      do
      {
        for (uint64_t i = 0; i != 11; ++i)
        {
          int v13 = v11[i];
          int v15 = *(_DWORD *)(a1 + 8);
          int v14 = *(_DWORD *)(a1 + 12);
          if (v14 < 0)
          {
            uint64_t v16 = *(unint64_t **)(a1 + 16);
            if (!v16) {
              VP8GetValue_cold_1();
            }
            if ((unint64_t)v16 >= *(void *)(a1 + 32))
            {
              VP8LoadFinalBytes(a1);
              int v14 = *(_DWORD *)(a1 + 12);
            }
            else
            {
              unint64_t v17 = *v16;
              *(void *)(a1 + 16) = (char *)v16 + 7;
              *((void *)&v18 + 1) = *(void *)a1;
              *(void *)&long long v18 = bswap64(v17);
              *(void *)a1 = v18 >> 8;
              v14 += 56;
            }
          }
          unsigned int v19 = (v15 * v13) >> 8;
          int v20 = v14;
          uint64_t v21 = *(void *)a1 >> v14;
          if (v19 >= v21)
          {
            unsigned int v22 = v19 + 1;
          }
          else
          {
            unsigned int v22 = v15 - v19;
            *(void *)a1 -= (unint64_t)(v19 + 1) << v20;
          }
          unsigned int v23 = __clz(v22) ^ 0x18;
          *(_DWORD *)(a1 + 8) = (v22 << v23) - 1;
          *(_DWORD *)(a1 + 12) = v20 - v23;
          if (v19 >= v21) {
            char Value = v10[i];
          }
          else {
            char Value = VP8GetValue(a1, 8);
          }
          *(unsigned char *)(v4 + i) = Value;
        }
        ++v9;
        v11 += 11;
        v10 += 11;
        v4 += 11;
      }
      while (v9 != 3);
      uint64_t v8 = v34 + 1;
      v5 += 33;
      v7 += 33;
      uint64_t v4 = v33 + 33;
    }
    while (v34 != 7);
    for (uint64_t j = 0; j != 17; ++j)
      *(void *)(v29 + 8 * j) = a2 + 264 * v32 + 33 * kBands[j] + 1195;
    uint64_t v3 = v32 + 1;
    uint64_t v5 = v30 + 264;
    unint64_t v7 = v28 + 264;
    uint64_t v4 = v31 + 264;
    uint64_t v6 = v29 + 136;
  }
  while (v32 != 3);
  uint64_t result = VP8GetValue(a1, 1);
  *(_DWORD *)(a2 + 2800) = result;
  if (result)
  {
    uint64_t result = VP8GetValue(a1, 8);
    *(unsigned char *)(a2 + 2804) = result;
  }
  return result;
}

uint64_t WebPParseHeaders(uint64_t a1)
{
  unsigned int v4 = 0;
  int v3 = 0;
  if (!a1) {
    WebPParseHeaders_cold_1();
  }
  unsigned int v4 = ParseHeadersInternal(*(void *)a1, *(void *)(a1 + 8), 0, 0, 0, &v3, 0, a1);
  if (!v4)
  {
    if (!v3) {
      return v4;
    }
    return 4;
  }
  if (v4 == 7 && v3 != 0) {
    return 4;
  }
  return v4;
}

uint64_t ParseHeadersInternal(uint64_t a1, unint64_t a2, unsigned int *a3, unsigned int *a4, int *a5, int *a6, int *a7, uint64_t a8)
{
  unint64_t v42 = a2;
  unint64_t v43 = (unsigned __int8 *)a1;
  if (a8) {
    int v13 = *(_DWORD *)(a8 + 16);
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = 7;
  if (!a1 || a2 < 0xC) {
    return v14;
  }
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  *(void *)&long long v36 = a1;
  *((void *)&v36 + 1) = a2;
  unsigned int v15 = bswap32(*(_DWORD *)a1);
  BOOL v16 = v15 >= 0x52494646;
  BOOL v17 = v15 > 0x52494646;
  int v18 = !v16;
  int v19 = v17 - v18;
  if (v19)
  {
    unint64_t v20 = 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 8) != 1346520407) {
      return 3;
    }
    unint64_t v20 = *(unsigned int *)(a1 + 4);
    if ((v20 + 9) < 0x15) {
      return 3;
    }
    if (v13 && a2 - 8 < v20) {
      return 7;
    }
    *((void *)&v38 + 1) = *(unsigned int *)(a1 + 4);
    a1 += 12;
    unint64_t v42 = a2 - 12;
    unint64_t v43 = (unsigned __int8 *)a1;
    if (a2 - 12 < 8) {
      return 7;
    }
    a2 -= 12;
  }
  unsigned int v21 = bswap32(*(_DWORD *)a1);
  BOOL v16 = v21 >= 0x56503858;
  int v22 = v21 > 0x56503858;
  int v23 = !v16;
  int v24 = v22 - v23;
  if (v22 != v23)
  {
    int v25 = 0;
    unsigned int v26 = 0;
    unsigned int v27 = 0;
    unsigned int v28 = 0;
    if (!a5) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 4) != 10) {
    return 3;
  }
  BOOL v16 = a2 >= 0x12;
  a2 -= 18;
  if (!v16) {
    return 7;
  }
  unsigned int v28 = (*(unsigned __int16 *)(a1 + 12) | (*(unsigned __int8 *)(a1 + 14) << 16)) + 1;
  unsigned int v27 = (*(unsigned __int16 *)(a1 + 15) | (*(unsigned __int8 *)(a1 + 17) << 16)) + 1;
  if (((v28 * (unint64_t)v27) & 0xFFFFFFFF00000000) != 0) {
    return 3;
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  a1 += 18;
  unint64_t v42 = a2;
  unint64_t v43 = (unsigned __int8 *)a1;
  if (v19) {
    return 3;
  }
  int v25 = (v26 >> 1) & 1;
  if (a5) {
LABEL_16:
  }
    *a5 = (v26 >> 4) & 1;
LABEL_17:
  if (a6) {
    *a6 = v25;
  }
  if (a7) {
    *a7 = 0;
  }
  unsigned int v40 = v27;
  unsigned int v41 = v28;
  if (a8) {
    char v29 = 0;
  }
  else {
    char v29 = v25;
  }
  if ((v29 & 1) == 0)
  {
    if (a2 < 4)
    {
LABEL_26:
      uint64_t v14 = 7;
LABEL_48:
      if (a8 || v24 || v14 != 7) {
        return v14;
      }
      goto LABEL_51;
    }
    if (v19 | v24)
    {
      if (!v19 || !v24) {
        goto LABEL_47;
      }
      if (*(_DWORD *)a1 != 1213221953)
      {
        unint64_t v20 = 0;
        goto LABEL_47;
      }
    }
    uint64_t v14 = ParseOptionalChunks((_DWORD **)&v43, &v42, v20, &v37, (void *)&v37 + 1);
    if (v14) {
      goto LABEL_48;
    }
    unint64_t v20 = *((void *)&v38 + 1);
LABEL_47:
    uint64_t v14 = ParseVP8Header((uint64_t *)&v43, &v42, v13, v20, (unint64_t *)&v38, (BOOL *)&v39);
    if (v14) {
      goto LABEL_48;
    }
    unint64_t v30 = v38;
    if ((unint64_t)v38 > 0xFFFFFFF6) {
      return 3;
    }
    int v32 = v39;
    if (a7 && !v25)
    {
      if (v39) {
        int v33 = 2;
      }
      else {
        int v33 = 1;
      }
      *a7 = v33;
    }
    if (v32)
    {
      if (v42 < 5) {
        goto LABEL_26;
      }
      if (!VP8LGetInfo(v43, v42, &v41, &v40, a5)) {
        return 3;
      }
    }
    else
    {
      if (v42 < 0xA) {
        goto LABEL_26;
      }
      if (!VP8GetInfo(v43, v42, v30, (int *)&v41, (int *)&v40)) {
        return 3;
      }
    }
    if (!v24)
    {
      uint64_t v14 = 3;
      if (v28 != v41 || v27 != v40) {
        return v14;
      }
    }
    if (a8)
    {
      *(_OWORD *)a8 = v36;
      *(_OWORD *)(a8 + 16) = 0u;
      long long v34 = v38;
      *(_OWORD *)(a8 + 32) = v37;
      *(_OWORD *)(a8 + 48) = v34;
      *(void *)(a8 + 64) = v39;
      int v35 = (char *)&v43[-*(void *)a8];
      *(void *)(a8 + 24) = v35;
      if ((unint64_t)v35 > 0xFFFFFFF5) {
        ParseHeadersInternal_cold_1();
      }
      if (v35 != (char *)(*(void *)(a8 + 8) - v42)) {
        ParseHeadersInternal_cold_2();
      }
    }
  }
LABEL_51:
  if (a5) {
    *a5 |= (void)v37 != 0;
  }
  if (a3) {
    *a3 = v41;
  }
  uint64_t v14 = 0;
  if (a4) {
    *a4 = v40;
  }
  return v14;
}

uint64_t WebPDecodeRGBInto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return DecodeIntoRGBABuffer(0, a1, a2, a3, a5, a4);
}

uint64_t DecodeIntoRGBABuffer(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (!a4) {
    return 0;
  }
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  WebPInitDecBufferInternal((uint64_t)&v13, 521);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  unsigned int v21 = &v13;
  *(void *)&long long v14 = a4;
  DWORD2(v14) = a5;
  *(void *)&long long v15 = a6;
  LODWORD(v13) = a1;
  HIDWORD(v13) = 1;
  if (DecodeInto(a2, a3, (uint64_t)&v21)) {
    return 0;
  }
  else {
    return a4;
  }
}

uint64_t WebPDecodeRGBAInto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return DecodeIntoRGBABuffer(1, a1, a2, a3, a5, a4);
}

uint64_t WebPDecodeBGRAInto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return DecodeIntoRGBABuffer(3, a1, a2, a3, a5, a4);
}

uint64_t DecodeInto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  memset(v18, 0, sizeof(v18));
  uint64_t v17 = 0;
  long long v16 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  LODWORD(v14) = 1;
  uint64_t v4 = WebPParseHeaders((uint64_t)&v12);
  if (v4) {
    return v4;
  }
  if (!a3) {
    DecodeInto_cold_1();
  }
  VP8InitIoInternal(v18, 521);
  *(void *)&long long v19 = v13 - *((void *)&v14 + 1);
  *((void *)&v19 + 1) = v12 + *((void *)&v14 + 1);
  WebPInitCustomIo(a3, v18);
  if (!v17)
  {
    uint64_t v8 = (unsigned int *)VP8New();
    if (!v8) {
      return 1;
    }
    uint64_t v9 = v8;
    uint64_t v10 = *((void *)&v15 + 1);
    *((void *)v8 + 371) = v15;
    *((void *)v8 + 372) = v10;
    if (!VP8GetHeaders((uint64_t)v8, (uint64_t)v18)) {
      goto LABEL_19;
    }
    uint64_t v4 = WebPAllocateDecBuffer(v18[0], SDWORD1(v18[0]), *(_DWORD **)(a3 + 40), *(unsigned int **)a3);
    if (v4) {
      goto LABEL_20;
    }
    v9[50] = VP8GetThreadMethod(*(void *)(a3 + 40), (uint64_t)&v12);
    VP8InitDithering(*(void *)(a3 + 40), (uint64_t)v9);
    if (VP8Decode((uint64_t)v9, (int *)v18)) {
      uint64_t v4 = 0;
    }
    else {
LABEL_19:
    }
      uint64_t v4 = *v9;
LABEL_20:
    VP8Delete(v9);
    if (v4) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  uint64_t v6 = (unsigned int *)VP8LNew();
  if (!v6) {
    return 1;
  }
  unint64_t v7 = v6;
  if (!VP8LDecodeHeader((uint64_t)v6, (uint64_t)v18)) {
    goto LABEL_16;
  }
  uint64_t v4 = WebPAllocateDecBuffer(v18[0], SDWORD1(v18[0]), *(_DWORD **)(a3 + 40), *(unsigned int **)a3);
  if (v4) {
    goto LABEL_17;
  }
  if (VP8LDecodeImage((uint64_t)v7)) {
    uint64_t v4 = 0;
  }
  else {
LABEL_16:
  }
    uint64_t v4 = *v7;
LABEL_17:
  VP8LDelete(v7);
  if (v4)
  {
LABEL_18:
    WebPFreeDecBuffer(*(void *)a3);
    return v4;
  }
LABEL_21:
  uint64_t v11 = *(void *)(a3 + 40);
  if (v11 && *(_DWORD *)(v11 + 48)) {
    return WebPFlipBuffer(*(void *)a3);
  }
  else {
    return 0;
  }
}

uint64_t GetFeatures(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a1 || !a3) {
    return 2;
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)a3 = 0u;
  return ParseHeadersInternal(a1, a2, (unsigned int *)a3, (unsigned int *)(a3 + 4), (int *)(a3 + 8), (int *)(a3 + 12), (int *)(a3 + 16), 0);
}

uint64_t WebPInitDecoderConfigInternal(_OWORD *a1, int a2)
{
  uint64_t v2 = 0;
  if (a1 && (a2 & 0xFFFFFF00) == 0x200)
  {
    a1[13] = 0u;
    a1[14] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    *((void *)a1 + 4) = 0;
    WebPInitDecBufferInternal((uint64_t)a1 + 40, 521);
    return 1;
  }
  return v2;
}

uint64_t WebPGetFeaturesInternal(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  if (a3 && (a4 & 0xFFFFFF00) == 0x200) {
    return GetFeatures(a1, a2, a3);
  }
  else {
    return 2;
  }
}

uint64_t WebPDecode(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 2;
  }
  unsigned int Features = GetFeatures(a1, a2, a3);
  if (Features)
  {
    if (Features == 7) {
      return 3;
    }
    else {
      return Features;
    }
  }
  else
  {
    long long v14 = 0u;
    uint64_t v18 = 0;
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    long long v12 = 0u;
    *(void *)&long long v14 = a3 + 160;
    uint64_t v11 = (_OWORD *)(a3 + 40);
    if (WebPAvoidSlowMemory((_DWORD *)(a3 + 40), a3))
    {
      uint64_t v10 = 0;
      memset(v9, 0, sizeof(v9));
      WebPInitDecBufferInternal((uint64_t)v9, 521);
      LODWORD(v9[0]) = *(_DWORD *)(a3 + 40);
      *(void *)((char *)v9 + 4) = *(void *)a3;
      uint64_t v11 = v9;
      uint64_t v7 = DecodeInto(a1, a2, (uint64_t)&v11);
      if (!v7) {
        uint64_t v7 = WebPCopyDecBufferPixels((unsigned int *)v9, a3 + 40);
      }
      WebPFreeDecBuffer((uint64_t)v9);
    }
    else
    {
      return DecodeInto(a1, a2, (uint64_t)&v11);
    }
  }
  return v7;
}

BOOL WebPCheckCropDimensions(int a1, int a2, int a3, int a4, int a5, int a6)
{
  return (a4 | a3) >= 0
      && a5 > 0
      && a6 > 0
      && a1 > a3
      && a5 <= a1
      && a1 - a3 >= a5
      && a2 > a4
      && a6 <= a2
      && a2 - a4 >= a6;
}

uint64_t WebPIoInitFromOptions(_DWORD *a1, signed int *a2, unsigned int a3)
{
  signed int v6 = *a2;
  signed int v5 = a2[1];
  if (a1)
  {
    int v7 = a1[2];
    a2[29] = v7 != 0;
    if (v7)
    {
      uint64_t v8 = 0;
      int v9 = a1[5];
      int v10 = a1[6];
      signed int v11 = a1[3] & 0xFFFFFFFE;
      if (a3 > 0xA)
      {
        signed int v12 = a1[4] & 0xFFFFFFFE;
      }
      else
      {
        signed int v11 = a1[3];
        signed int v12 = a1[4];
      }
      BOOL v17 = v10 > v5 || v5 <= v12 || v9 > v6 || v6 <= v11 || v10 < 1 || v9 < 1;
      if (v17 || (v12 | v11) < 0) {
        return v8;
      }
      if (v6 - v11 < v9 || v5 - v12 < v10) {
        return v8;
      }
      goto LABEL_32;
    }
    signed int v11 = 0;
    signed int v12 = 0;
  }
  else
  {
    signed int v11 = 0;
    signed int v12 = 0;
    a2[29] = 0;
  }
  int v9 = v6;
  int v10 = v5;
LABEL_32:
  a2[30] = v11;
  a2[31] = v9 + v11;
  a2[32] = v12;
  a2[33] = v10 + v12;
  a2[3] = v9;
  a2[4] = v10;
  if (a1)
  {
    int v19 = a1[7];
    a2[34] = v19 != 0;
    if (v19)
    {
      signed int v20 = a1[8];
      signed int v27 = a1[9];
      signed int v28 = v20;
      if (!WebPRescalerGetScaledDimensions(v9, v10, &v28, &v27)) {
        return 0;
      }
      signed int v21 = v27;
      a2[35] = v28;
      a2[36] = v21;
      BOOL v22 = a2[34] == 0;
    }
    else
    {
      BOOL v22 = 1;
    }
    int v23 = a1[1];
    BOOL v24 = *a1 != 0;
    a2[28] = v24;
    a2[22] = v23 == 0;
    if (!v22)
    {
      BOOL v25 = a2[35] < 3 * v6 / 4 && a2[36] < 3 * v5 / 4;
      a2[28] = v25 || v24;
      a2[22] = 0;
    }
    return 1;
  }
  else
  {
    a2[34] = 0;
    a2[28] = 0;
    uint64_t v8 = 1;
    a2[22] = 1;
  }
  return v8;
}

uint64_t ParseOptionalChunks(_DWORD **a1, unint64_t *a2, unint64_t a3, void *a4, void *a5)
{
  if (!a1) {
    ParseOptionalChunks_cold_1();
  }
  if (!a2) {
    ParseOptionalChunks_cold_2();
  }
  if (!a4) {
    ParseOptionalChunks_cold_3();
  }
  if (!a5) {
    ParseOptionalChunks_cold_4();
  }
  signed int v5 = *a1;
  unint64_t v6 = *a2;
  *a4 = 0;
  *a5 = 0;
  *a1 = v5;
  *a2 = v6;
  if (v6 < 8) {
    return 7;
  }
  LODWORD(v8) = 22;
  while (1)
  {
    uint64_t v9 = v5[1];
    if (v9 > 0xFFFFFFF6) {
      return 3;
    }
    uint64_t v10 = (v9 + 9) & 0xFFFFFFFE;
    unint64_t v8 = (v10 + v8);
    if (a3)
    {
      if (v8 > a3) {
        return 3;
      }
    }
    if (*v5 == 540561494 || *v5 == 1278758998) {
      break;
    }
    if (v6 >= v10)
    {
      if (*v5 == 1213221953)
      {
        *a4 = v5 + 2;
        *a5 = v9;
      }
      signed int v5 = (_DWORD *)((char *)v5 + v10);
      v6 -= v10;
      *a1 = v5;
      *a2 = v6;
      if (v6 > 7) {
        continue;
      }
    }
    return 7;
  }
  return 0;
}

uint64_t ParseVP8Header(uint64_t *a1, unint64_t *a2, int a3, unint64_t a4, unint64_t *a5, BOOL *a6)
{
  uint64_t v7 = *a1;
  BOOL v8 = *(_DWORD *)v7 == 1278758998;
  if (!v7) {
    ParseVP8Header_cold_1();
  }
  if (!a2) {
    ParseVP8Header_cold_2();
  }
  if (!a5) {
    ParseVP8Header_cold_3();
  }
  if (!a6) {
    ParseVP8Header_cold_4();
  }
  unint64_t v12 = *a2;
  if (*a2 >= 8)
  {
    if (*(_DWORD *)v7 != 540561494 && *(_DWORD *)v7 != 1278758998)
    {
      BOOL v16 = VP8LCheckSignature((unsigned char *)v7, v12);
      uint64_t v13 = 0;
      *a6 = v16;
      *a5 = *a2;
      return v13;
    }
    unint64_t v15 = *(unsigned int *)(v7 + 4);
    if (a4 >= 0xC && a4 - 12 < v15) {
      return 3;
    }
    if (!a3 || *a2 - 8 >= v15)
    {
      uint64_t v13 = 0;
      *a5 = v15;
      *a1 = v7 + 8;
      *a2 -= 8;
      *a6 = v8;
      return v13;
    }
  }
  return 7;
}

void WebPParseHeaders_cold_1()
{
  __assert_rtn("WebPParseHeaders", "webp_dec.c", 418, "headers != NULL");
}

void ParseHeadersInternal_cold_1()
{
}

void ParseHeadersInternal_cold_2()
{
  __assert_rtn("ParseHeadersInternal", "webp_dec.c", 396, "headers->offset == headers->data_size - data_size");
}

void DecodeInto_cold_1()
{
  __assert_rtn("DecodeInto", "webp_dec.c", 461, "params != NULL");
}

void ParseOptionalChunks_cold_1()
{
  __assert_rtn("ParseOptionalChunks", "webp_dec.c", 156, "data != NULL");
}

void ParseOptionalChunks_cold_2()
{
  __assert_rtn("ParseOptionalChunks", "webp_dec.c", 157, "data_size != NULL");
}

void ParseOptionalChunks_cold_3()
{
  __assert_rtn("ParseOptionalChunks", "webp_dec.c", 161, "alpha_data != NULL");
}

void ParseOptionalChunks_cold_4()
{
  __assert_rtn("ParseOptionalChunks", "webp_dec.c", 162, "alpha_size != NULL");
}

void ParseVP8Header_cold_1()
{
  __assert_rtn("ParseVP8Header", "webp_dec.c", 232, "data != NULL");
}

void ParseVP8Header_cold_2()
{
  __assert_rtn("ParseVP8Header", "webp_dec.c", 233, "data_size != NULL");
}

void ParseVP8Header_cold_3()
{
  __assert_rtn("ParseVP8Header", "webp_dec.c", 234, "chunk_size != NULL");
}

void ParseVP8Header_cold_4()
{
  __assert_rtn("ParseVP8Header", "webp_dec.c", 235, "is_lossless != NULL");
}

uint64_t VP8InitRandom(uint64_t result, float a2)
{
  *(_OWORD *)(result + 168) = xmmword_1889B19B8;
  *(_OWORD *)(result + 184) = unk_1889B19C8;
  *(_OWORD *)(result + 200) = xmmword_1889B19D8;
  *(_OWORD *)(result + 212) = *(long long *)((char *)&xmmword_1889B19D8 + 12);
  *(_OWORD *)(result + 104) = xmmword_1889B1978;
  *(_OWORD *)(result + 120) = unk_1889B1988;
  *(_OWORD *)(result + 136) = xmmword_1889B1998;
  *(_OWORD *)(result + 152) = unk_1889B19A8;
  *(_OWORD *)(result + 40) = xmmword_1889B1938;
  *(_OWORD *)(result + 56) = unk_1889B1948;
  *(_OWORD *)(result + 72) = xmmword_1889B1958;
  *(_OWORD *)(result + 88) = unk_1889B1968;
  *(_OWORD *)(result + 8) = kRandomTable;
  *(_OWORD *)(result + 24) = unk_1889B1928;
  unsigned int v2 = vcvts_n_u32_f32(a2, 8uLL);
  if (a2 > 1.0) {
    unsigned int v2 = 256;
  }
  *(void *)uint64_t result = 0x1F00000000;
  if (a2 < 0.0) {
    unsigned int v2 = 0;
  }
  *(_DWORD *)(result + 228) = v2;
  return result;
}

void WebPInitConvertARGBToYUVNEON()
{
  WebPConvertRGB24ToY = (uint64_t)ConvertRGB24ToY_NEON;
  WebPConvertBGR24ToY = (uint64_t)ConvertBGR24ToY_NEON;
  WebPConvertARGBToY = (uint64_t (*)(void, void, void))ConvertARGBToY_NEON;
  WebPConvertARGBToUV = (uint64_t (*)(void, void, void, void, void))ConvertARGBToUV_NEON;
  WebPConvertRGBA32ToUV = (uint64_t)ConvertRGBA32ToUV_NEON;
}

const char *ConvertRGB24ToY_NEON(const char *result, uint64_t a2, int a3)
{
  if (a3 >= 8)
  {
    uint64_t v4 = 0;
    uint16x8_t v5 = (uint16x8_t)vdupq_n_s16(0x41C7u);
    uint16x8_t v6 = (uint16x8_t)vdupq_n_s16(0x8123u);
    signed int v3 = a3 & 0xFFFFFFF8;
    uint16x8_t v7 = (uint16x8_t)vdupq_n_s16(0x1914u);
    v8.i64[0] = 0x10001000100010;
    v8.i64[1] = 0x10001000100010;
    do
    {
      int8x8x3_t v13 = vld3_s8(result);
      result += 24;
      uint16x8_t v9 = vmovl_u8((uint8x8_t)v13.val[0]);
      uint16x8_t v10 = vmovl_u8((uint8x8_t)v13.val[1]);
      *(uint16x8_t *)v13.val[0].i8 = vmovl_u8((uint8x8_t)v13.val[2]);
      *(uint8x8_t *)(a2 + v4) = vqmovn_u16((uint16x8_t)vaddq_s16(vraddhn_high_s32(vraddhn_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v6.i8), *(uint16x4_t *)v9.i8, *(uint16x4_t *)v5.i8), (uint16x4_t)v13.val[0], *(uint16x4_t *)v7.i8), (int32x4_t)0), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v10, v6), v9, v5), *(uint16x8_t *)v13.val[0].i8, v7), (int32x4_t)0), v8));
      unint64_t v11 = v4 + 16;
      v4 += 8;
    }
    while (v11 <= a3);
  }
  else
  {
    signed int v3 = 0;
  }
  if (v3 < a3)
  {
    unint64_t v12 = (unsigned char *)(a2 + v3);
    do
    {
      *v12++ = (33059 * *((unsigned __int8 *)result + 1)
              + 16839 * *(unsigned __int8 *)result
              + 6420 * *((unsigned __int8 *)result + 2)
              + 1081344) >> 16;
      result += 3;
      ++v3;
    }
    while (v3 < a3);
  }
  return result;
}

const char *ConvertBGR24ToY_NEON(const char *result, uint64_t a2, int a3)
{
  if (a3 >= 8)
  {
    uint64_t v4 = 0;
    uint16x8_t v5 = (uint16x8_t)vdupq_n_s16(0x41C7u);
    uint16x8_t v6 = (uint16x8_t)vdupq_n_s16(0x8123u);
    signed int v3 = a3 & 0xFFFFFFF8;
    uint16x8_t v7 = (uint16x8_t)vdupq_n_s16(0x1914u);
    v8.i64[0] = 0x10001000100010;
    v8.i64[1] = 0x10001000100010;
    do
    {
      int8x8x3_t v14 = vld3_s8(result);
      result += 24;
      uint16x8_t v9 = vmovl_u8((uint8x8_t)v14.val[2]);
      uint16x8_t v10 = vmovl_u8((uint8x8_t)v14.val[1]);
      *(uint16x8_t *)v14.val[0].i8 = vmovl_u8((uint8x8_t)v14.val[0]);
      *(uint8x8_t *)(a2 + v4) = vqmovn_u16((uint16x8_t)vaddq_s16(vraddhn_high_s32(vraddhn_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v6.i8), *(uint16x4_t *)v9.i8, *(uint16x4_t *)v5.i8), (uint16x4_t)v14.val[0], *(uint16x4_t *)v7.i8), (int32x4_t)0), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v10, v6), v9, v5), *(uint16x8_t *)v14.val[0].i8, v7), (int32x4_t)0), v8));
      unint64_t v11 = v4 + 16;
      v4 += 8;
    }
    while (v11 <= a3);
  }
  else
  {
    signed int v3 = 0;
  }
  if (v3 < a3)
  {
    unint64_t v12 = (unsigned __int8 *)(result + 2);
    int8x8x3_t v13 = (unsigned char *)(a2 + v3);
    do
    {
      *v13++ = (33059 * *(v12 - 1) + 16839 * *v12 + 6420 * *(v12 - 2) + 1081344) >> 16;
      ++v3;
      v12 += 3;
    }
    while (v3 < a3);
  }
  return result;
}

const char *ConvertARGBToY_NEON(const char *result, uint64_t a2, int a3)
{
  if (a3 >= 8)
  {
    uint64_t v4 = 0;
    unsigned int v3 = a3 & 0xFFFFFFF8;
    uint16x8_t v5 = (uint16x8_t)vdupq_n_s16(0x41C7u);
    uint16x8_t v6 = (uint16x8_t)vdupq_n_s16(0x8123u);
    uint16x8_t v7 = (uint16x8_t)vdupq_n_s16(0x1914u);
    v8.i64[0] = 0x10001000100010;
    v8.i64[1] = 0x10001000100010;
    uint16x8_t v9 = result;
    do
    {
      int8x8x4_t v17 = vld4_s8(v9);
      v9 += 32;
      uint16x8_t v10 = vmovl_u8((uint8x8_t)v17.val[2]);
      uint16x8_t v11 = vmovl_u8((uint8x8_t)v17.val[1]);
      uint16x8_t v12 = vmovl_u8((uint8x8_t)v17.val[0]);
      *(uint8x8_t *)(a2 + v4) = vqmovn_u16((uint16x8_t)vaddq_s16(vraddhn_high_s32(vraddhn_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v11.i8, *(uint16x4_t *)v6.i8), *(uint16x4_t *)v10.i8, *(uint16x4_t *)v5.i8), *(uint16x4_t *)v12.i8, *(uint16x4_t *)v7.i8), (int32x4_t)0), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v11, v6), v10, v5), v12, v7), (int32x4_t)0), v8));
      unint64_t v13 = v4 + 16;
      v4 += 8;
    }
    while (v13 <= a3);
  }
  else
  {
    unsigned int v3 = 0;
  }
  if ((int)v3 < a3)
  {
    int8x8x3_t v14 = (unsigned char *)(a2 + v3);
    unint64_t v15 = &result[4 * v3];
    do
    {
      int v16 = *(_DWORD *)v15;
      v15 += 4;
      *v14++ = (16839 * BYTE2(v16) + 6420 * v16 + 33059 * BYTE1(v16) + 1081344) >> 16;
      ++v3;
    }
    while ((int)v3 < a3);
  }
  return result;
}

uint64_t ConvertARGBToUV_NEON(uint64_t result, uint8x8_t *a2, uint8x8_t *a3, int a4, int a5)
{
  if (a4 >= 16)
  {
    unsigned int v5 = a4 & 0x7FFFFFF0;
    int16x8_t v6 = vdupq_n_s16(0xDA09u);
    int16x8_t v7 = vdupq_n_s16(0xB577u);
    unint64_t v8 = 16;
    int16x8_t v9 = vdupq_n_s16(0x7080u);
    v10.i64[0] = 0x100010001000100;
    v10.i64[1] = 0x100010001000100;
    int16x8_t v11 = vdupq_n_s16(0xA1CCu);
    int16x8_t v12 = vdupq_n_s16(0xEDB4u);
    unint64_t v13 = (const char *)result;
    do
    {
      int8x16x4_t v21 = vld4q_s8(v13);
      int16x8_t v14 = (int16x8_t)vpaddlq_u8((uint8x16_t)v21.val[2]);
      int16x8_t v15 = (int16x8_t)vpaddlq_u8((uint8x16_t)v21.val[1]);
      v21.val[0] = (int8x16_t)vpaddlq_u8((uint8x16_t)v21.val[0]);
      v21.val[1] = (int8x16_t)vaddq_s16(vaddhn_high_s32(vaddhn_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v7.i8), *(int16x4_t *)v14.i8, *(int16x4_t *)v6.i8), vmull_s16(*(int16x4_t *)v21.val[0].i8, *(int16x4_t *)v9.i8)), vmlal_high_s16(vmull_high_s16(v15, v7), v14, v6), vmull_high_s16((int16x8_t)v21.val[0], v9)), v10);
      int16x8_t v16 = vaddq_s16(vaddhn_high_s32(vaddhn_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v11.i8), *(int16x4_t *)v14.i8, *(int16x4_t *)v9.i8), vmull_s16(*(int16x4_t *)v21.val[0].i8, *(int16x4_t *)v12.i8)), vmlal_high_s16(vmull_high_s16(v15, v11), v14, v9), vmull_high_s16((int16x8_t)v21.val[0], v12)), v10);
      uint8x8_t v17 = (uint8x8_t)vqrshrun_n_s16((int16x8_t)v21.val[1], 1uLL);
      uint8x8_t v18 = (uint8x8_t)vqrshrun_n_s16(v16, 1uLL);
      if (!a5)
      {
        uint8x8_t v17 = vrhadd_u8(v17, *a2);
        uint8x8_t v18 = vrhadd_u8(v18, *a3);
      }
      *a2++ = v17;
      *a3++ = v18;
      v8 += 16;
      v13 += 64;
    }
    while (v8 <= a4);
  }
  else
  {
    unsigned int v5 = 0;
  }
  BOOL v19 = __OFSUB__(a4, v5);
  int v20 = a4 - v5;
  if (!((v20 < 0) ^ v19 | (v20 == 0))) {
    return WebPConvertARGBToUV_C(result + 4 * v5, a2, (unsigned __int8 *)a3, v20, a5);
  }
  return result;
}

const __int16 *ConvertRGBA32ToUV_NEON(const __int16 *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 8)
  {
    uint64_t v5 = 0;
    unsigned int v4 = a4 & 0xFFFFFFF8;
    int16x8_t v6 = vdupq_n_s16(0xDA09u);
    int16x8_t v7 = vdupq_n_s16(0xB577u);
    int16x8_t v8 = vdupq_n_s16(0x7080u);
    v9.i64[0] = 0x200020002000200;
    v9.i64[1] = 0x200020002000200;
    int16x8_t v10 = vdupq_n_s16(0xA1CCu);
    int16x8_t v11 = vdupq_n_s16(0xEDB4u);
    do
    {
      int16x8x4_t v26 = vld4q_s16(result);
      result += 32;
      *(int8x8_t *)(a2 + v5) = vqrshrun_n_s16(vaddq_s16(vaddhn_high_s32(vaddhn_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v26.val[1].i8, *(int16x4_t *)v7.i8), *(int16x4_t *)v26.val[0].i8, *(int16x4_t *)v6.i8), vmull_s16(*(int16x4_t *)v26.val[2].i8, *(int16x4_t *)v8.i8)), vmlal_high_s16(vmull_high_s16(v26.val[1], v7), v26.val[0], v6), vmull_high_s16(v26.val[2], v8)), v9), 2uLL);
      *(int8x8_t *)(a3 + v5) = vqrshrun_n_s16(vaddq_s16(vaddhn_high_s32(vaddhn_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v26.val[1].i8, *(int16x4_t *)v10.i8), *(int16x4_t *)v26.val[0].i8, *(int16x4_t *)v8.i8), vmull_s16(*(int16x4_t *)v26.val[2].i8, *(int16x4_t *)v11.i8)), vmlal_high_s16(vmull_high_s16(v26.val[1], v10), v26.val[0], v8), vmull_high_s16(v26.val[2], v11)), v9), 2uLL);
      unint64_t v12 = v5 + 16;
      v5 += 8;
    }
    while (v12 <= a4);
  }
  else
  {
    unsigned int v4 = 0;
  }
  if ((int)v4 < a4)
  {
    unint64_t v13 = (char *)(a3 + v4);
    int16x8_t v14 = (char *)(a2 + v4);
    do
    {
      int v15 = *(unsigned __int16 *)result;
      int v16 = *((unsigned __int16 *)result + 1);
      int v17 = *((unsigned __int16 *)result + 2);
      int v18 = -9719 * v15 - 19081 * v16 + 28800 * v17;
      unsigned int v19 = v18 + 33685504;
      unsigned int v20 = (v18 + 33685504) >> 18;
      if (v18 >= -33685504) {
        char v21 = -1;
      }
      else {
        char v21 = 0;
      }
      if (!(v19 >> 26)) {
        char v21 = v20;
      }
      *v14++ = v21;
      int v22 = 28800 * v15 - 24116 * v16 - 4684 * v17;
      unsigned int v23 = v22 + 33685504;
      unsigned int v24 = (v22 + 33685504) >> 18;
      if (v22 >= -33685504) {
        char v25 = -1;
      }
      else {
        char v25 = 0;
      }
      if (!(v23 >> 26)) {
        char v25 = v24;
      }
      *v13++ = v25;
      ++v4;
      result += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

void WebPInitUpsamplers()
{
  if ((uint64_t (*)())WebPInitUpsamplers_WebPInitUpsamplers_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPInitUpsamplersNEON();
    if (!qword_1E91056B0) {
      WebPInitUpsamplers_cold_1();
    }
    if (!qword_1E91056C0) {
      WebPInitUpsamplers_cold_2();
    }
    if (!qword_1E91056E0) {
      WebPInitUpsamplers_cold_3();
    }
    if (!qword_1E91056E8) {
      WebPInitUpsamplers_cold_4();
    }
    if (!WebPUpsamplers) {
      WebPInitUpsamplers_cold_5();
    }
    if (!qword_1E91056B8) {
      WebPInitUpsamplers_cold_6();
    }
    if (!qword_1E91056C8) {
      WebPInitUpsamplers_cold_7();
    }
    if (!qword_1E91056D0) {
      WebPInitUpsamplers_cold_8();
    }
    if (!qword_1E91056D8) {
      WebPInitUpsamplers_cold_9();
    }
    if (!qword_1E91056F0) {
      WebPInitUpsamplers_cold_10();
    }
    if (!qword_1E91056F8) {
      WebPInitUpsamplers_cold_11();
    }
    WebPInitUpsamplers_WebPInitUpsamplers_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

unsigned __int8 *WebPYuv444ToRgba_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((int)a5 >= 1)
  {
    uint64_t v5 = (unsigned char *)(a4 + 3);
    a5 = a5;
    do
    {
      int v7 = *result++;
      int v6 = v7;
      int v9 = *a2++;
      int v8 = v9;
      int v11 = *a3++;
      int v10 = v11;
      unsigned int v12 = 19077 * v6;
      unsigned int v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      unsigned int v14 = v13 - 14234;
      unsigned int v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A) {
        char v16 = -1;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      *(v5 - 3) = v16;
      signed int v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      unsigned int v18 = v17 + 8708;
      unsigned int v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708) {
        char v20 = -1;
      }
      else {
        char v20 = 0;
      }
      if (v18 < 0x4000) {
        char v20 = v19;
      }
      *(v5 - 2) = v20;
      unsigned int v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      unsigned int v22 = v21 - 17685;
      unsigned int v23 = (v21 - 17685) >> 6;
      if (v21 >= 0x4515) {
        char v24 = -1;
      }
      else {
        char v24 = 0;
      }
      if (v22 < 0x4000) {
        char v24 = v23;
      }
      *(v5 - 1) = v24;
      *uint64_t v5 = -1;
      v5 += 4;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToBgra_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((int)a5 >= 1)
  {
    uint64_t v5 = (unsigned char *)(a4 + 3);
    a5 = a5;
    do
    {
      int v7 = *result++;
      int v6 = v7;
      int v9 = *a2++;
      int v8 = v9;
      int v11 = *a3++;
      int v10 = v11;
      unsigned int v12 = 19077 * v6;
      unsigned int v13 = ((33050 * v8) >> 8) + (v12 >> 8);
      unsigned int v14 = v13 - 17685;
      unsigned int v15 = (v13 - 17685) >> 6;
      if (v13 >= 0x4515) {
        char v16 = -1;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      *(v5 - 3) = v16;
      signed int v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      unsigned int v18 = v17 + 8708;
      unsigned int v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708) {
        char v20 = -1;
      }
      else {
        char v20 = 0;
      }
      if (v18 < 0x4000) {
        char v20 = v19;
      }
      *(v5 - 2) = v20;
      unsigned int v21 = ((26149 * v10) >> 8) + (v12 >> 8);
      unsigned int v22 = v21 - 14234;
      unsigned int v23 = (v21 - 14234) >> 6;
      if (v21 >= 0x379A) {
        char v24 = -1;
      }
      else {
        char v24 = 0;
      }
      if (v22 < 0x4000) {
        char v24 = v23;
      }
      *(v5 - 1) = v24;
      *uint64_t v5 = -1;
      v5 += 4;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToRgb_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((int)a5 >= 1)
  {
    uint64_t v5 = (char *)(a4 + 2);
    a5 = a5;
    do
    {
      int v7 = *result++;
      int v6 = v7;
      int v9 = *a2++;
      int v8 = v9;
      int v11 = *a3++;
      int v10 = v11;
      unsigned int v12 = 19077 * v6;
      unsigned int v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      unsigned int v14 = v13 - 14234;
      unsigned int v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A) {
        char v16 = -1;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      *(v5 - 2) = v16;
      signed int v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      unsigned int v18 = v17 + 8708;
      unsigned int v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708) {
        char v20 = -1;
      }
      else {
        char v20 = 0;
      }
      if (v18 < 0x4000) {
        char v20 = v19;
      }
      *(v5 - 1) = v20;
      unsigned int v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      unsigned int v22 = v21 - 17685;
      unsigned int v23 = (v21 - 17685) >> 6;
      if (v21 >= 0x4515) {
        char v24 = -1;
      }
      else {
        char v24 = 0;
      }
      if (v22 < 0x4000) {
        char v24 = v23;
      }
      *uint64_t v5 = v24;
      v5 += 3;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToBgr_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((int)a5 >= 1)
  {
    uint64_t v5 = (char *)(a4 + 2);
    a5 = a5;
    do
    {
      int v7 = *result++;
      int v6 = v7;
      int v9 = *a2++;
      int v8 = v9;
      int v11 = *a3++;
      int v10 = v11;
      unsigned int v12 = 19077 * v6;
      unsigned int v13 = ((33050 * v8) >> 8) + (v12 >> 8);
      unsigned int v14 = v13 - 17685;
      unsigned int v15 = (v13 - 17685) >> 6;
      if (v13 >= 0x4515) {
        char v16 = -1;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      *(v5 - 2) = v16;
      signed int v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      unsigned int v18 = v17 + 8708;
      unsigned int v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708) {
        char v20 = -1;
      }
      else {
        char v20 = 0;
      }
      if (v18 < 0x4000) {
        char v20 = v19;
      }
      *(v5 - 1) = v20;
      unsigned int v21 = ((26149 * v10) >> 8) + (v12 >> 8);
      unsigned int v22 = v21 - 14234;
      unsigned int v23 = (v21 - 14234) >> 6;
      if (v21 >= 0x379A) {
        char v24 = -1;
      }
      else {
        char v24 = 0;
      }
      if (v22 < 0x4000) {
        char v24 = v23;
      }
      *uint64_t v5 = v24;
      v5 += 3;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToArgb_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((int)a5 >= 1)
  {
    uint64_t v5 = (char *)(a4 + 3);
    a5 = a5;
    do
    {
      int v7 = *result++;
      int v6 = v7;
      int v9 = *a2++;
      int v8 = v9;
      int v11 = *a3++;
      int v10 = v11;
      *(v5 - 3) = -1;
      unsigned int v12 = 19077 * v6;
      unsigned int v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      unsigned int v14 = v13 - 14234;
      unsigned int v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A) {
        char v16 = -1;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      *(v5 - 2) = v16;
      signed int v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      unsigned int v18 = v17 + 8708;
      unsigned int v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708) {
        char v20 = -1;
      }
      else {
        char v20 = 0;
      }
      if (v18 < 0x4000) {
        char v20 = v19;
      }
      *(v5 - 1) = v20;
      unsigned int v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      unsigned int v22 = v21 - 17685;
      unsigned int v23 = (v21 - 17685) >> 6;
      if (v21 >= 0x4515) {
        char v24 = -1;
      }
      else {
        char v24 = 0;
      }
      if (v22 < 0x4000) {
        char v24 = v23;
      }
      *uint64_t v5 = v24;
      v5 += 4;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToRgba4444_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((int)a5 >= 1)
  {
    uint64_t v5 = (unsigned char *)(a4 + 1);
    a5 = a5;
    do
    {
      int v7 = *result++;
      int v6 = v7;
      int v9 = *a2++;
      int v8 = v9;
      int v11 = *a3++;
      int v10 = v11;
      unsigned int v12 = 19077 * v6;
      unsigned int v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      unsigned int v14 = v13 - 14234;
      unsigned int v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A) {
        char v16 = -16;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      signed int v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      unsigned int v18 = v17 + 8708;
      unsigned int v19 = (v17 + 8708) >> 10;
      if (v17 >= -8708) {
        char v20 = 15;
      }
      else {
        char v20 = 0;
      }
      if (v18 < 0x4000) {
        char v20 = v19;
      }
      unsigned int v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      unsigned int v22 = v21 - 17685;
      unsigned int v23 = (v21 - 17685) >> 6;
      if (v21 >= 0x4515) {
        char v24 = -16;
      }
      else {
        char v24 = 0;
      }
      *(v5 - 1) = v16 & 0xF0 | v20;
      if (v22 < 0x4000) {
        char v24 = v23;
      }
      *uint64_t v5 = v24 | 0xF;
      v5 += 2;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToRgb565_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((int)a5 >= 1)
  {
    uint64_t v5 = (unsigned char *)(a4 + 1);
    a5 = a5;
    do
    {
      int v7 = *result++;
      int v6 = v7;
      int v9 = *a2++;
      int v8 = v9;
      int v11 = *a3++;
      int v10 = v11;
      unsigned int v12 = 19077 * v6;
      unsigned int v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      unsigned int v14 = v13 - 14234;
      unsigned int v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A) {
        char v16 = -8;
      }
      else {
        char v16 = 0;
      }
      if (v14 < 0x4000) {
        char v16 = v15;
      }
      signed int v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      unsigned int v18 = v17 + 8708;
      unsigned int v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708) {
        unsigned int v20 = 255;
      }
      else {
        unsigned int v20 = 0;
      }
      if (v18 < 0x4000) {
        unsigned int v20 = v19;
      }
      unsigned int v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      unsigned int v22 = v21 - 17685;
      unsigned int v23 = (v21 - 17685) >> 9;
      if (v21 >= 0x4515) {
        char v24 = 31;
      }
      else {
        char v24 = 0;
      }
      if (v22 < 0x4000) {
        char v24 = v23;
      }
      *(v5 - 1) = v16 & 0xF8 | (v20 >> 5);
      *uint64_t v5 = (8 * v20) & 0xE0 | v24;
      v5 += 2;
      --a5;
    }
    while (a5);
  }
  return result;
}

void WebPInitYUV444Converters()
{
  if ((uint64_t (*)())WebPInitYUV444Converters_WebPInitYUV444Converters_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    qword_1E9106630 = (uint64_t)WebPYuv444ToRgba_C;
    qword_1E9106640 = (uint64_t)WebPYuv444ToBgra_C;
    WebPYUV444Converters = (uint64_t)WebPYuv444ToRgb_C;
    qword_1E9106638 = (uint64_t)WebPYuv444ToBgr_C;
    qword_1E9106648 = (uint64_t)WebPYuv444ToArgb_C;
    qword_1E9106650 = (uint64_t)WebPYuv444ToRgba4444_C;
    qword_1E9106658 = (uint64_t)WebPYuv444ToRgb565_C;
    unk_1E9106660 = WebPYuv444ToRgba_C;
    qword_1E9106668 = (uint64_t)WebPYuv444ToBgra_C;
    unk_1E9106670 = WebPYuv444ToArgb_C;
    qword_1E9106678 = (uint64_t)WebPYuv444ToRgba4444_C;
    WebPInitYUV444Converters_WebPInitYUV444Converters_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

void WebPInitUpsamplers_cold_1()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 311, "WebPUpsamplers[MODE_RGBA] != NULL");
}

void WebPInitUpsamplers_cold_2()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 312, "WebPUpsamplers[MODE_BGRA] != NULL");
}

void WebPInitUpsamplers_cold_3()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 313, "WebPUpsamplers[MODE_rgbA] != NULL");
}

void WebPInitUpsamplers_cold_4()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 314, "WebPUpsamplers[MODE_bgrA] != NULL");
}

void WebPInitUpsamplers_cold_5()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 316, "WebPUpsamplers[MODE_RGB] != NULL");
}

void WebPInitUpsamplers_cold_6()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 317, "WebPUpsamplers[MODE_BGR] != NULL");
}

void WebPInitUpsamplers_cold_7()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 318, "WebPUpsamplers[MODE_ARGB] != NULL");
}

void WebPInitUpsamplers_cold_8()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 319, "WebPUpsamplers[MODE_RGBA_4444] != NULL");
}

void WebPInitUpsamplers_cold_9()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 320, "WebPUpsamplers[MODE_RGB_565] != NULL");
}

void WebPInitUpsamplers_cold_10()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 321, "WebPUpsamplers[MODE_Argb] != NULL");
}

void WebPInitUpsamplers_cold_11()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 322, "WebPUpsamplers[MODE_rgbA_4444] != NULL");
}

void VP8FiltersInitNEON()
{
  qword_1E9104878 = (uint64_t)HorizontalUnfilter_NEON;
  qword_1E9104880 = (uint64_t)VerticalUnfilter_NEON;
  qword_1E9104858 = (uint64_t)HorizontalFilter_NEON;
  qword_1E9104860 = (uint64_t)VerticalFilter_NEON;
  qword_1E9104868 = (uint64_t)GradientFilter_NEON;
}

char *HorizontalUnfilter_NEON(char *result, unsigned char *a2, unsigned __int8 *a3, int a4)
{
  if (result) {
    char v4 = *result;
  }
  else {
    char v4 = 0;
  }
  unsigned __int8 v5 = v4 + *a2;
  *a3 = v5;
  if (a4 >= 2)
  {
    if (a4 >= 0x11)
    {
      uint64_t v7 = 0;
      int8x16_t v8 = (int8x16_t)v5;
      do
      {
        int8x16_t v9 = vaddq_s8(*(int8x16_t *)&a2[v7 + 1], v8);
        int8x16_t v10 = vaddq_s8(vextq_s8((int8x16_t)0, v9, 0xFuLL), v9);
        int8x16_t v11 = vaddq_s8(vextq_s8((int8x16_t)0, v10, 0xEuLL), v10);
        int8x16_t v12 = vaddq_s8(vextq_s8((int8x16_t)0, v11, 0xCuLL), v11);
        int8x16_t v13 = vaddq_s8(vextq_s8((int8x16_t)0, v12, 8uLL), v12);
        int8x16_t v8 = vextq_s8(v13, (int8x16_t)0, 0xFuLL);
        *(int8x16_t *)&a3[v7 + 1] = v13;
        unint64_t v14 = v7 + 33;
        v7 += 16;
      }
      while (v14 <= a4);
      LODWORD(v6) = ((a4 - 17) & 0xFFFFFFF0) + 17;
    }
    else
    {
      LODWORD(v6) = 1;
    }
    if ((int)v6 < a4)
    {
      uint64_t v6 = (int)v6;
      do
      {
        a3[v6] = a3[v6 - 1] + a2[v6];
        ++v6;
      }
      while (a4 != v6);
    }
  }
  return result;
}

char *VerticalUnfilter_NEON(char *result, unsigned char *a2, unsigned __int8 *a3, int a4)
{
  if (result)
  {
    if (a4 < 0) {
      VerticalUnfilter_NEON_cold_1();
    }
    if (a4 >= 0x10)
    {
      uint64_t v5 = 0;
      unsigned int v4 = a4 & 0xFFFFFFF0;
      do
      {
        *(int8x16_t *)&a3[v5] = vaddq_s8(*(int8x16_t *)&result[v5], *(int8x16_t *)&a2[v5]);
        unint64_t v6 = v5 + 32;
        v5 += 16;
      }
      while (v6 <= a4);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((int)v4 < a4)
    {
      uint64_t v7 = &a3[v4];
      int8x16_t v8 = &result[v4];
      int8x16_t v9 = &a2[v4];
      do
      {
        char v11 = *v9++;
        char v10 = v11;
        char v12 = *v8++;
        *v7++ = v12 + v10;
        ++v4;
      }
      while ((int)v4 < a4);
    }
  }
  else
  {
    return HorizontalUnfilter_NEON(0, a2, a3, a4);
  }
  return result;
}

uint64_t HorizontalFilter_NEON(unsigned char *a1, int a2, int a3, int a4, unsigned char *a5)
{
  if (!a1) {
    HorizontalFilter_NEON_cold_1();
  }
  uint64_t v5 = a5;
  if (!a5) {
    HorizontalFilter_NEON_cold_2();
  }
  if (a2 <= 0) {
    HorizontalFilter_NEON_cold_3();
  }
  if (a3 <= 0) {
    HorizontalFilter_NEON_cold_4();
  }
  if (a4 < a2) {
    HorizontalFilter_NEON_cold_5();
  }
  int8x16_t v8 = a1;
  *a5 = *a1;
  unsigned int v9 = a2 - 1;
  uint64_t result = PredictLine_NEON((uint64_t)(a1 + 1), (uint64_t)a1, (uint64_t)(a5 + 1), a2 - 1);
  if (a3 >= 2)
  {
    int v11 = a3 - 1;
    do
    {
      v5 += a4;
      *uint64_t v5 = v8[a4] - *v8;
      uint64_t result = PredictLine_NEON((uint64_t)&v8[a4 + 1], (uint64_t)&v8[a4], (uint64_t)(v5 + 1), v9);
      v8 += a4;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t VerticalFilter_NEON(unsigned char *a1, signed int a2, int a3, signed int a4, unsigned char *a5)
{
  if (!a1) {
    VerticalFilter_NEON_cold_1();
  }
  uint64_t v5 = (uint64_t)a5;
  if (!a5) {
    VerticalFilter_NEON_cold_2();
  }
  if (a2 <= 0) {
    VerticalFilter_NEON_cold_3();
  }
  if (a3 <= 0) {
    VerticalFilter_NEON_cold_4();
  }
  if (a4 < a2) {
    VerticalFilter_NEON_cold_5();
  }
  uint64_t v9 = (uint64_t)a1;
  *a5 = *a1;
  uint64_t result = PredictLine_NEON((uint64_t)(a1 + 1), (uint64_t)a1, (uint64_t)(a5 + 1), a2 - 1);
  if (a3 >= 2)
  {
    int v11 = a3 - 1;
    do
    {
      v5 += a4;
      uint64_t result = PredictLine_NEON(v9 + a4, v9, v5, a2);
      v9 += a4;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t GradientFilter_NEON(unsigned char *a1, int a2, int a3, int a4, unsigned char *a5)
{
  if (!a1) {
    GradientFilter_NEON_cold_1();
  }
  uint64_t v5 = a5;
  if (!a5) {
    GradientFilter_NEON_cold_2();
  }
  if (a2 <= 0) {
    GradientFilter_NEON_cold_3();
  }
  if (a3 <= 0) {
    GradientFilter_NEON_cold_4();
  }
  if (a4 < a2) {
    GradientFilter_NEON_cold_5();
  }
  uint64_t v9 = a1;
  *a5 = *a1;
  unint64_t v10 = (a2 - 1);
  uint64_t result = PredictLine_NEON((uint64_t)(a1 + 1), (uint64_t)a1, (uint64_t)(a5 + 1), a2 - 1);
  if (a3 >= 2)
  {
    char v12 = &v9[a4];
    int v13 = 1;
    do
    {
      v5 += a4;
      unint64_t v14 = &v9[a4];
      *uint64_t v5 = *v14 - *v9;
      if (a2 >= 9)
      {
        uint64_t v15 = 0;
        do
        {
          int16x8_t v16 = (int16x8_t)vsubw_u8(vaddl_u8(*(uint8x8_t *)&v9[v15 + 1], *(uint8x8_t *)&v14[v15]), *(uint8x8_t *)&v9[v15]);
          int8x8_t v17 = *(int8x8_t *)&v14[v15 + 1];
          unsigned int v18 = &v5[v15];
          unint64_t v19 = v15 + 16;
          v15 += 8;
          *(int8x8_t *)(v18 + 1) = vsub_s8(v17, vqmovun_s16(v16));
        }
        while (v19 <= v10);
        uint64_t result = v10 & 0xFFFFFFF8;
      }
      else
      {
        uint64_t result = 0;
      }
      if ((int)result < (int)v10)
      {
        uint64_t result = (int)result;
        do
        {
          int v20 = v14[result + 1 - a4]
              + v12[result]
              - v9[result];
          int v21 = v20 & ~(v20 >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          v5[result + 1] = v14[result + 1] - v21;
          ++result;
        }
        while (v10 != result);
      }
      ++v13;
      v12 += a4;
      v9 += a4;
    }
    while (v13 != a3);
  }
  return result;
}

uint64_t PredictLine_NEON(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if ((a4 & 0x80000000) != 0) {
    PredictLine_NEON_cold_1();
  }
  if (a4 >= 0x10)
  {
    uint64_t v5 = 0;
    unsigned int v4 = a4 & 0xFFFFFFF0;
    do
    {
      *(int8x16_t *)(a3 + v5) = vsubq_s8(*(int8x16_t *)(result + v5), *(int8x16_t *)(a2 + v5));
      unint64_t v6 = v5 + 32;
      v5 += 16;
    }
    while (v6 <= a4);
  }
  else
  {
    unsigned int v4 = 0;
  }
  if ((int)v4 < (int)a4)
  {
    uint64_t v7 = (unsigned char *)(a3 + v4);
    int8x16_t v8 = (char *)(a2 + v4);
    uint64_t v9 = (char *)(result + v4);
    do
    {
      char v11 = *v9++;
      char v10 = v11;
      char v12 = *v8++;
      *v7++ = v10 - v12;
      ++v4;
    }
    while ((int)v4 < (int)a4);
  }
  return result;
}

void VerticalUnfilter_NEON_cold_1()
{
  __assert_rtn("VerticalUnfilter_NEON", "filters_neon.c", 240, "width >= 0");
}

void HorizontalFilter_NEON_cold_1()
{
  __assert_rtn("DoHorizontalFilter_NEON", "filters_neon.c", 74, "in != NULL");
}

void HorizontalFilter_NEON_cold_2()
{
  __assert_rtn("DoHorizontalFilter_NEON", "filters_neon.c", 74, "out != NULL");
}

void HorizontalFilter_NEON_cold_3()
{
}

void HorizontalFilter_NEON_cold_4()
{
}

void HorizontalFilter_NEON_cold_5()
{
  __assert_rtn("DoHorizontalFilter_NEON", "filters_neon.c", 74, "stride >= width");
}

void VerticalFilter_NEON_cold_1()
{
  __assert_rtn("DoVerticalFilter_NEON", "filters_neon.c", 113, "in != NULL");
}

void VerticalFilter_NEON_cold_2()
{
  __assert_rtn("DoVerticalFilter_NEON", "filters_neon.c", 113, "out != NULL");
}

void VerticalFilter_NEON_cold_3()
{
}

void VerticalFilter_NEON_cold_4()
{
}

void VerticalFilter_NEON_cold_5()
{
  __assert_rtn("DoVerticalFilter_NEON", "filters_neon.c", 113, "stride >= width");
}

void GradientFilter_NEON_cold_1()
{
  __assert_rtn("DoGradientFilter_NEON", "filters_neon.c", 175, "in != NULL");
}

void GradientFilter_NEON_cold_2()
{
  __assert_rtn("DoGradientFilter_NEON", "filters_neon.c", 175, "out != NULL");
}

void GradientFilter_NEON_cold_3()
{
}

void GradientFilter_NEON_cold_4()
{
}

void GradientFilter_NEON_cold_5()
{
  __assert_rtn("DoGradientFilter_NEON", "filters_neon.c", 175, "stride >= width");
}

void PredictLine_NEON_cold_1()
{
  __assert_rtn("PredictLine_NEON", "filters_neon.c", 49, "length >= 0");
}

BOOL VP8LCheckSignature(unsigned char *a1, unint64_t a2)
{
  return a2 >= 5 && *a1 == 47 && a1[4] < 0x20u;
}

BOOL VP8LGetInfo(unsigned __int8 *a1, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  BOOL result = 0;
  if (a1 && a2 >= 5)
  {
    if (*a1 == 47 && a1[4] <= 0x1Fu)
    {
      uint64_t v14 = 0;
      int v13 = 0;
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      VP8LInitBitReader(v11, a1, a2);
      BOOL result = ReadImageInfo((uint64_t)v11, (_DWORD *)&v14 + 1, &v14, &v13);
      if (result)
      {
        if (a3) {
          *a3 = HIDWORD(v14);
        }
        if (a4) {
          *a4 = v14;
        }
        if (a5) {
          *a5 = v13;
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL ReadImageInfo(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (VP8LReadBits(a1, 8u) == 47
    && (*a2 = VP8LReadBits(a1, 0xEu) + 1,
        *a3 = VP8LReadBits(a1, 0xEu) + 1,
        *a4 = VP8LReadBits(a1, 1u),
        !VP8LReadBits(a1, 3u)))
  {
    return *(_DWORD *)(a1 + 36) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t ReadHuffmanCodesHelper(int a1, int a2, int a3, uint64_t a4, _DWORD *a5, uint64_t a6, void **a7)
{
  uint64_t v9 = 0;
  BOOL v10 = a2 != a3;
  if (a4) {
    BOOL v10 = 0;
  }
  if (a2 > a3 || v10) {
    goto LABEL_62;
  }
  uint64_t v11 = a4;
  int v14 = kTableSize[a1];
  int v61 = 1 << a1;
  int v15 = (1 << a1) + 280;
  if (a1 <= 0) {
    int v15 = 280;
  }
  uint64_t v9 = (int *)WebPSafeCalloc(v15, 4uLL);
  int16x8_t v16 = VP8LHtreeGroupsNew(a2);
  *a7 = v16;
  if (!v16 || !v9 || !VP8LHuffmanTablesAllocate(v14 * a2, a6))
  {
    if (*a5 == 5 || !*a5) {
      *a5 = 1;
    }
    goto LABEL_62;
  }
  if (a3 < 1)
  {
LABEL_57:
    _TIFFfree(v9);
    return 1;
  }
  uint64_t v17 = 0;
  uint64_t v55 = a3;
  uint64_t v59 = a7;
  uint64_t v56 = v11;
LABEL_12:
  uint64_t v58 = v17;
  if (!v11)
  {
    int v18 = v17;
LABEL_25:
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    LODWORD(v24) = 0;
    int v57 = v18;
    unint64_t v60 = (unint64_t)*a7;
    char v25 = (char *)*a7 + 568 * v18;
    BOOL v26 = 1;
    while (1)
    {
      BOOL v27 = v22 || a1 <= 0;
      uint64_t v28 = (unsigned __int16)kAlphabetSize[v22];
      unsigned int v29 = v27 ? 0 : v61;
      unint64_t v30 = v29 + v28;
      int HuffmanCode = ReadHuffmanCode(v29 + v28, (uint64_t)a5, (char *)v9, a6);
      int v32 = *(unsigned __int8 **)(*(void *)(a6 + 32) + 8);
      v25[v22] = v32;
      if (!HuffmanCode) {
        goto LABEL_61;
      }
      if (v26)
      {
        int v33 = *v32;
        BOOL v26 = (v22 & 0x7FFFFFFB) == 0 || v33 == 0;
      }
      else
      {
        int v33 = *v32;
      }
      *(void *)(*(void *)(a6 + 32) + 8) += 4 * HuffmanCode;
      if (v22 <= 3)
      {
        int v34 = *v9;
        if ((int)v30 >= 2)
        {
          uint64_t v35 = v28 + v29 - 1;
          long long v36 = v9 + 1;
          do
          {
            int v38 = *v36++;
            int v37 = v38;
            if (v38 > v34) {
              int v34 = v37;
            }
            --v35;
          }
          while (v35);
        }
        unint64_t v23 = (v34 + v23);
      }
      unint64_t v24 = (v24 + v33);
      if (++v22 == 5)
      {
        unint64_t v39 = v60 + 568 * v57;
        *(_DWORD *)(v39 + 48) = 0;
        unsigned int v40 = (void *)(v39 + 48);
        *((_DWORD *)v40 - 2) = v26;
        if (!v26
          || (int v41 = *(unsigned __int16 *)(v25[2] + 2) | (*(unsigned __int16 *)(v25[1] + 2) << 16) | (*(unsigned __int16 *)(v25[3] + 2) << 24),
              unint64_t v42 = v60 + 568 * v57,
              *(_DWORD *)(v42 + 44) = v41,
              unint64_t v43 = (unsigned int *)(v42 + 44),
              v24)
          || (unsigned int v44 = *(unsigned __int16 *)(*v25 + 2), v44 > 0xFF))
        {
          *(_DWORD *)(v60 + 568 * v57 + 52) = (int)v23 < 6;
          if ((int)v23 <= 5)
          {
            unsigned int v45 = 0;
            unsigned int v46 = (int *)(v60 + 568 * v57 + 56);
            for (uint64_t i = 2; i != 258; i += 4)
            {
              int v48 = (unsigned __int16 *)(*v25 + i);
              int v49 = *((unsigned __int8 *)v48 - 2);
              unsigned int v50 = *v48;
              if (v50 < 0x100)
              {
                int v51 = *((unsigned __int8 *)v48 - 1);
                *(void *)unsigned int v46 = 0;
                unint64_t v30 = v30 & 0xFFFFFFFF00000000 | v49 | (v50 << 16) | (v51 << 8);
                unsigned int v52 = v45 >> AccumulateHCode(v30, 8, v46);
                unint64_t v24 = v24 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25[1] + 4 * v52);
                unsigned int v53 = v52 >> AccumulateHCode(v24, 16, v46);
                unint64_t v23 = v23 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25[2] + 4 * v53);
                unint64_t v60 = v60 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25[3] + 4
                                                                            * (v53 >> AccumulateHCode(v23, 0, v46)));
                AccumulateHCode(v60, 24, v46);
              }
              else
              {
                *unsigned int v46 = v49 | 0x100;
                v46[1] = v50;
              }
              ++v45;
              v46 += 2;
            }
          }
        }
        else
        {
          *unint64_t v43 = v41 | (v44 << 8);
          *unsigned int v40 = 1;
        }
LABEL_56:
        a7 = v59;
        uint64_t v17 = v58 + 1;
        uint64_t v11 = v56;
        if (v58 + 1 != v55) {
          goto LABEL_12;
        }
        goto LABEL_57;
      }
    }
  }
  int v18 = *(_DWORD *)(v11 + 4 * v17);
  if (v18 != -1) {
    goto LABEL_25;
  }
  uint64_t v19 = 0;
  while (1)
  {
    int v20 = v61;
    if (v19 * 2 || a1 <= 0) {
      int v20 = 0;
    }
    if (!ReadHuffmanCode(v20 + (unsigned __int16)kAlphabetSize[v19], (uint64_t)a5, (char *)v9, 0))break; {
    if (++v19 == 5)
    }
      goto LABEL_56;
  }
LABEL_61:
  a7 = v59;
LABEL_62:
  _TIFFfree(v9);
  VP8LHuffmanTablesDeallocate(a6);
  VP8LHtreeGroupsFree(*a7);
  uint64_t result = 0;
  *a7 = 0;
  return result;
}

uint64_t ReadHuffmanCode(int a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2 + 40;
  int v9 = VP8LReadBits(a2 + 40, 1u);
  bzero(a3, 4 * a1);
  if (v9)
  {
    int v10 = VP8LReadBits(v8, 1u);
    if (VP8LReadBits(v8, 1u)) {
      unsigned int v11 = 8;
    }
    else {
      unsigned int v11 = 1;
    }
    *(_DWORD *)&a3[4 * (int)VP8LReadBits(v8, v11)] = 1;
    if (v10 == 1) {
      *(_DWORD *)&a3[4 * (int)VP8LReadBits(v8, 8u)] = 1;
    }
    goto LABEL_36;
  }
  memset(v32, 0, 76);
  uint64_t v12 = VP8LReadBits(v8, 4u) + 4;
  if ((int)v12 > 19) {
    ReadHuffmanCode_cold_1();
  }
  if ((int)v12 >= 1)
  {
    int v13 = &kCodeLengthCodeOrder;
    do
    {
      int v14 = VP8LReadBits(v8, 3u);
      unsigned int v15 = *v13++;
      *((_DWORD *)v32 + v15) = v14;
      --v12;
    }
    while (v12);
  }
  uint64_t v31 = 0;
  memset(v30, 0, sizeof(v30));
  if (VP8LHuffmanTablesAllocate(128, (uint64_t)v30))
  {
    if (VP8LBuildHuffmanTable((uint64_t)v30, 7, (int *)v32, 19))
    {
      int v16 = a1;
      if (!VP8LReadBits(v8, 1u)
        || (v17 = VP8LReadBits(v8, 3u), int v16 = VP8LReadBits(v8, 2 * v17 + 2) + 2, v16 <= a1))
      {
        if (a1 >= 1)
        {
          int v18 = 0;
          int v19 = 8;
          do
          {
            if (!v16) {
              break;
            }
            int v20 = *(_DWORD *)(a2 + 72);
            if (v20 >= 32)
            {
              VP8LDoFillBitWindow(v8);
              int v20 = *(_DWORD *)(a2 + 72);
            }
            int v21 = (unsigned __int8 *)(*v31 + 4 * ((*(void *)(a2 + 40) >> v20) & 0x7FLL));
            *(_DWORD *)(a2 + 72) = v20 + *v21;
            unsigned int v22 = *((unsigned __int16 *)v21 + 1);
            if (v22 > 0xF)
            {
              int v23 = kCodeLengthRepeatOffsets[v22 - 16];
              int v24 = VP8LReadBits(v8, kCodeLengthExtraBits[v22 - 16]);
              if (v24 + v23 + v18 > a1) {
                goto LABEL_15;
              }
              if (v22 == 16) {
                int v25 = v19;
              }
              else {
                int v25 = 0;
              }
              if (v24 + v23 >= 1)
              {
                BOOL v26 = (int *)&a3[4 * v18];
                unsigned int v27 = v24 + v23 + 1;
                do
                {
                  *v26++ = v25;
                  --v27;
                }
                while (v27 > 1);
                v18 += v24 + v23;
              }
            }
            else
            {
              *(_DWORD *)&a3[4 * v18++] = v22;
              if (v22) {
                int v19 = v22;
              }
            }
            --v16;
          }
          while (v18 < a1);
        }
        VP8LHuffmanTablesDeallocate((uint64_t)v30);
LABEL_36:
        if (!*(_DWORD *)(a2 + 76))
        {
          uint64_t result = VP8LBuildHuffmanTable(a4, 8, (int *)a3, a1);
          if (result) {
            return result;
          }
        }
        goto LABEL_37;
      }
    }
  }
LABEL_15:
  VP8LHuffmanTablesDeallocate((uint64_t)v30);
  if (*(_DWORD *)a2 == 5 || !*(_DWORD *)a2) {
    *(_DWORD *)a2 = 3;
  }
LABEL_37:
  uint64_t result = 0;
  if (*(_DWORD *)a2 == 5 || *(_DWORD *)a2 == 0) {
    *(_DWORD *)a2 = 3;
  }
  return result;
}

void *VP8LNew()
{
  v0 = WebPSafeCalloc(1uLL, 0x190uLL);
  int v1 = v0;
  if (v0)
  {
    void *v0 = 0x200000000;
    VP8LDspInit();
  }
  return v1;
}

void VP8LClear(uint64_t a1)
{
  if (a1)
  {
    ClearMetadata(a1 + 152);
    _TIFFfree(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    if (*(int *)(a1 + 272) >= 1)
    {
      uint64_t v2 = 0;
      unsigned int v3 = (void **)(a1 + 296);
      do
      {
        _TIFFfree(*v3);
        _DWORD *v3 = 0;
        v3 += 3;
        ++v2;
      }
      while (v2 < *(int *)(a1 + 272));
    }
    *(_DWORD *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 376) = 0;
    _TIFFfree(*(void **)(a1 + 384));
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

double ClearMetadata(uint64_t a1)
{
  if (!a1) {
    ClearMetadata_cold_1();
  }
  _TIFFfree(*(void **)(a1 + 56));
  VP8LHuffmanTablesDeallocate(a1 + 80);
  VP8LHtreeGroupsFree(*(void **)(a1 + 72));
  VP8LColorCacheClear((void **)(a1 + 8));
  VP8LColorCacheClear((void **)(a1 + 24));
  *(void *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void VP8LDelete(void *a1)
{
  if (a1)
  {
    VP8LClear((uint64_t)a1);
    _TIFFfree(a1);
  }
}

uint64_t VP8LDecodeAlphaHeader(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result = (uint64_t)VP8LNew();
  if (result)
  {
    if (!a1) {
      VP8LDecodeAlphaHeader_cold_1();
    }
    uint64_t v7 = (_DWORD *)result;
    signed int v8 = *(_DWORD *)a1;
    int v9 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)a1;
    *(_DWORD *)(result + 132) = v8;
    *(_DWORD *)(result + 136) = v9;
    *(void *)(result + 8) = a1 + 32;
    *(void *)(a1 + 88) = a1;
    *(_DWORD *)(a1 + 36) = v9;
    *(_DWORD *)uint64_t result = 0;
    VP8LInitBitReader((void *)(result + 40), a2, a3);
    if (!DecodeImageStream(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), 1, (uint64_t)v7, 0)) {
      goto LABEL_13;
    }
    if (v7[68] == 1 && v7[70] == 3 && Is8bOptimizable((uint64_t)(v7 + 38)))
    {
      *(_DWORD *)(a1 + 192) = 1;
      unint64_t v10 = (int)v7[34] * (uint64_t)(int)v7[33];
      *((void *)v7 + 4) = 0;
      unsigned int v11 = WebPSafeMalloc(v10, 1uLL);
      *((void *)v7 + 3) = v11;
      if (!v11)
      {
        if (*v7 == 5 || !*v7) {
          _DWORD *v7 = 1;
        }
        goto LABEL_13;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 192) = 0;
      if (!AllocateInternalBuffers32b((uint64_t)v7, *(_DWORD *)a1))
      {
LABEL_13:
        VP8LClear((uint64_t)v7);
        _TIFFfree(v7);
        return 0;
      }
    }
    *(void *)(a1 + 24) = v7;
    return 1;
  }
  return result;
}

uint64_t DecodeImageStream(signed int a1, int a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  int v7 = a3;
  int v8 = a2;
  uint64_t v10 = a4 + 40;
  uint64_t v65 = (_DWORD *)(a4 + 152);
  if (!a3)
  {
LABEL_33:
    if (VP8LReadBits(v10, 1u))
    {
      int v36 = VP8LReadBits(v10, 4u);
      if ((v36 - 1) >= 0xB) {
        goto LABEL_94;
      }
    }
    else
    {
      int v36 = 0;
    }
    int v67 = 0;
    uint64_t v68 = 0;
    if (*(void *)(a4 + 232)) {
      DecodeImageStream_cold_3();
    }
    if (*(void *)(a4 + 264)) {
      DecodeImageStream_cold_2();
    }
    if (v7)
    {
      int v37 = 1;
      if (VP8LReadBits(v10, 1u))
      {
        int v38 = VP8LReadBits(v10, 3u);
        int v39 = v8;
        int v40 = v38 + 2;
        int v41 = 1 << (v38 + 2);
        unsigned int v42 = (a1 + v41 - 1) >> (v38 + 2);
        uint64_t v43 = (v39 + v41 - 1) >> (v38 + 2);
        if (DecodeImageStream(v42, v43, 0, a4, &v68))
        {
          int v64 = v7;
          uint64_t v44 = v42 * v43;
          *(_DWORD *)(a4 + 196) = v40;
          if ((int)v44 < 1)
          {
            int v46 = 1;
            int v8 = a2;
          }
          else
          {
            unsigned int v45 = (char *)v68;
            int v46 = 1;
            uint64_t v47 = v44;
            int v8 = a2;
            do
            {
              int v48 = *(unsigned __int16 *)(v45 + 1);
              *(_DWORD *)unsigned int v45 = v48;
              v45 += 4;
              if (v48 >= v46) {
                int v46 = v48 + 1;
              }
              --v47;
            }
            while (v47);
          }
          if (v46 <= 1000 && v46 <= a1 * v8)
          {
            int v49 = 0;
            int v37 = v46;
LABEL_67:
            int v7 = v64;
            goto LABEL_68;
          }
          unsigned int v53 = WebPSafeMalloc(v46, 4uLL);
          if (v53)
          {
            int v49 = v53;
            memset(v53, 255, 4 * v46);
            if ((int)v44 < 1)
            {
              int v37 = 0;
            }
            else
            {
              int v37 = 0;
              unsigned int v54 = (int *)v68;
              do
              {
                uint64_t v55 = *v54;
                int v56 = v49[v55];
                if (v56 == -1)
                {
                  v49[v55] = v37;
                  int v56 = v37++;
                }
                *v54++ = v56;
                --v44;
              }
              while (v44);
            }
            goto LABEL_67;
          }
          if (*(_DWORD *)a4 == 5 || !*(_DWORD *)a4)
          {
            int v49 = 0;
            *(_DWORD *)a4 = 1;
            goto LABEL_93;
          }
        }
        int v49 = 0;
        goto LABEL_93;
      }
      int v49 = 0;
    }
    else
    {
      int v49 = 0;
      int v37 = 1;
    }
    int v46 = 1;
LABEL_68:
    if (!*(_DWORD *)(a4 + 76)
      && ReadHuffmanCodesHelper(v36, v37, v46, (uint64_t)v49, (_DWORD *)a4, a4 + 232, &v67))
    {
      *(void *)(a4 + 208) = v68;
      *(_DWORD *)(a4 + 216) = v37;
      *(void *)(a4 + 224) = v67;
      _TIFFfree(v49);
      if (v36 < 1)
      {
        *uint64_t v65 = 0;
      }
      else
      {
        *(_DWORD *)(a4 + 152) = 1 << v36;
        if (!VP8LColorCacheInit(a4 + 160, v36))
        {
LABEL_87:
          int v50 = *(_DWORD *)a4;
          int v51 = 1;
          if (*(_DWORD *)a4) {
            goto LABEL_96;
          }
          goto LABEL_97;
        }
      }
      int v57 = *(_DWORD *)(a4 + 196);
      *(_DWORD *)(a4 + 132) = a1;
      *(_DWORD *)(a4 + 136) = v8;
      *(_DWORD *)(a4 + 200) = (a1 + (1 << v57) - 1) >> v57;
      if (v57) {
        int v58 = ~(-1 << v57);
      }
      else {
        int v58 = -1;
      }
      *(_DWORD *)(a4 + 192) = v58;
      if (v7)
      {
        *(_DWORD *)(a4 + 4) = 1;
        if (v5) {
          *uint64_t v5 = 0;
        }
        *(_DWORD *)(a4 + 144) = 0;
      }
      else
      {
        unint64_t v60 = WebPSafeMalloc(a1 * (uint64_t)v8, 4uLL);
        if (!v60) {
          goto LABEL_87;
        }
        int v61 = v60;
        if (!DecodeImageData(a4, (uint64_t)v60, a1, v8, v8, 0) || *(_DWORD *)(a4 + 76)) {
          goto LABEL_99;
        }
        if (!v5) {
          DecodeImageStream_cold_1();
        }
        *uint64_t v5 = v61;
        *(_DWORD *)(a4 + 144) = 0;
        ClearMetadata((uint64_t)v65);
      }
      return 1;
    }
LABEL_93:
    _TIFFfree(v49);
    _TIFFfree(v68);
    VP8LHuffmanTablesDeallocate(a4 + 232);
    VP8LHtreeGroupsFree(v67);
LABEL_94:
    int v50 = *(_DWORD *)a4;
    goto LABEL_95;
  }
  while (1)
  {
    if (!VP8LReadBits(v10, 1u))
    {
      uint64_t v5 = a5;
      int v7 = a3;
      goto LABEL_33;
    }
    int v11 = *(_DWORD *)(a4 + 272);
    unsigned int v12 = VP8LReadBits(v10, 2u);
    int v13 = *(_DWORD *)(a4 + 376);
    if ((v13 & (1 << v12)) != 0) {
      goto LABEL_94;
    }
    uint64_t v14 = a4 + 24 * v11;
    *(_DWORD *)(a4 + 376) = v13 | (1 << v12);
    *(_DWORD *)(v14 + 280) = v12;
    *(_DWORD *)(v14 + 288) = a1;
    *(_DWORD *)(v14 + 292) = v8;
    *(void *)(v14 + 296) = 0;
    int v15 = *(_DWORD *)(a4 + 272);
    *(_DWORD *)(a4 + 272) = v15 + 1;
    if (v15 >= 4) {
      DecodeImageStream_cold_4();
    }
    int v16 = (int *)(v14 + 288);
    int v17 = (void **)(v14 + 296);
    if (v12 >= 2) {
      break;
    }
    int v21 = (int *)(v14 + 292);
    int v22 = VP8LReadBits(v10, 3u);
    *(_DWORD *)(a4 + 24 * v11 + 284) = v22 + 2;
    int v23 = *v21;
    int v8 = a2;
    int v24 = DecodeImageStream((*v16 + ~(-1 << (v22 + 2))) >> (v22 + 2), (v23 + ~(-1 << (v22 + 2))) >> (v22 + 2), 0, a4, v17);
LABEL_30:
    if (!v24) {
      goto LABEL_94;
    }
  }
  if (v12 == 2)
  {
    int v24 = 1;
    goto LABEL_30;
  }
  if (v12 != 3) {
    DecodeImageStream_cold_5();
  }
  int v18 = VP8LReadBits(v10, 8u);
  int v19 = v18 + 1;
  if (v18 + 1 <= 16)
  {
    if (v19 <= 4)
    {
      if (v19 > 2) {
        int v20 = 2;
      }
      else {
        int v20 = 3;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  else
  {
    int v20 = 0;
  }
  int v25 = *v16;
  uint64_t v26 = a4 + 24 * v11;
  *(_DWORD *)(v26 + 284) = v20;
  if (!DecodeImageStream((v18 + 1), 1, 0, a4, v17)) {
    goto LABEL_94;
  }
  unint64_t v27 = 8uLL >> *(_DWORD *)(v26 + 284);
  uint64_t v28 = WebPSafeMalloc(1 << v27, 4uLL);
  if (v28)
  {
    unsigned int v29 = v28;
    unint64_t v30 = *v17;
    *uint64_t v28 = *(_DWORD *)*v17;
    if (v19 < 2)
    {
      LODWORD(v31) = 4;
    }
    else
    {
      LODWORD(v31) = 4 * v19;
      if (4 * v19 <= 5) {
        uint64_t v31 = 5;
      }
      else {
        uint64_t v31 = v31;
      }
      uint64_t v32 = v31 - 4;
      uint64_t v33 = v28 + 1;
      int v34 = (char *)(v30 + 1);
      do
      {
        char v35 = *v34++;
        *uint64_t v33 = *(v33 - 4) + v35;
        ++v33;
        --v32;
      }
      while (v32);
    }
    if (v31 < 4 << v27) {
      bzero((char *)v28 + v31, ((4 << v27) + ~v31) + 1);
    }
    a1 = (v25 + (1 << v20) - 1) >> v20;
    _TIFFfree(*v17);
    *int v17 = v29;
    int v24 = 1;
    int v8 = a2;
    goto LABEL_30;
  }
  int v50 = *(_DWORD *)a4;
  int v51 = 1;
  if (!*(_DWORD *)a4 || v50 == 5) {
    goto LABEL_97;
  }
LABEL_95:
  int v51 = 3;
  if (!v50) {
    goto LABEL_97;
  }
LABEL_96:
  if (v50 == 5)
  {
LABEL_97:
    int v61 = 0;
    *(_DWORD *)a4 = v51;
  }
  else
  {
    int v61 = 0;
  }
LABEL_99:
  _TIFFfree(v61);
  ClearMetadata((uint64_t)v65);
  return 0;
}

uint64_t Is8bOptimizable(uint64_t a1)
{
  if (*(int *)a1 > 0) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 64);
  if ((int)v2 >= 1)
  {
    for (uint64_t i = (unsigned char **)(*(void *)(a1 + 72) + 24); !**(i - 2) && !**(i - 1) && !**i; i += 71)
    {
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t AllocateInternalBuffers32b(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 132);
  if (v2 > a2) {
    AllocateInternalBuffers32b_cold_1();
  }
  uint64_t v4 = *(int *)(a1 + 136) * (uint64_t)v2;
  uint64_t v5 = (unsigned __int16)a2;
  unint64_t v6 = (char *)WebPSafeMalloc((unsigned __int16)a2 + 16 * a2 + v4, 4uLL);
  *(void *)(a1 + 24) = v6;
  if (v6)
  {
    *(void *)(a1 + 32) = &v6[4 * v4 + 4 * v5];
    return 1;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    uint64_t result = 0;
    if (*(_DWORD *)a1 == 5 || *(_DWORD *)a1 == 0) {
      *(_DWORD *)a1 = 1;
    }
  }
  return result;
}

uint64_t VP8LDecodeAlphaImageStream(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    VP8LDecodeAlphaImageStream_cold_1();
  }
  int v4 = *(_DWORD *)(v2 + 136);
  if (v4 < a2) {
    VP8LDecodeAlphaImageStream_cold_2();
  }
  if (*(_DWORD *)(v2 + 140) >= a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 192) || (WebPInitAlphaProcessing(), int v4 = *(_DWORD *)(v2 + 136), *(_DWORD *)(a1 + 192)))
  {
    uint64_t v64 = *(void *)(v2 + 24);
    int v6 = *(_DWORD *)(v2 + 132);
    int v7 = *(_DWORD *)(v2 + 144);
    LODWORD(v8) = v7 / v6;
    int v9 = v7 % v6;
    uint64_t v10 = (v6 * a2);
    int v11 = *(_DWORD *)(v2 + 192);
    if (v7 >= (int)v10)
    {
      int v13 = 0;
    }
    else
    {
      int v12 = *(_DWORD *)(v2 + 196);
      if (v12) {
        int v12 = *(_DWORD *)(*(void *)(v2 + 208) + 4 * ((v9 >> v12) + *(_DWORD *)(v2 + 200) * ((int)v8 >> v12)));
      }
      if (v12 >= *(_DWORD *)(v2 + 216)) {
        VP8LDecodeAlphaImageStream_cold_9();
      }
      int v13 = (void *)(*(void *)(v2 + 224) + 568 * v12);
    }
    int v63 = v4 * v6;
    if (v7 > v4 * v6) {
      VP8LDecodeAlphaImageStream_cold_3();
    }
    if (v4 < a2) {
      VP8LDecodeAlphaImageStream_cold_4();
    }
    if (!Is8bOptimizable(v2 + 152)) {
      VP8LDecodeAlphaImageStream_cold_5();
    }
    if (v7 >= (int)v10 || *(_DWORD *)(v2 + 76) != 0) {
      goto LABEL_101;
    }
    uint64_t v65 = (unint64_t *)(v2 + 40);
    int v62 = v11;
    while (1)
    {
      if ((v9 & v11) == 0)
      {
        int v16 = *(_DWORD *)(v2 + 196);
        if (v16) {
          int v16 = *(_DWORD *)(*(void *)(v2 + 208) + 4 * ((v9 >> v16) + *(_DWORD *)(v2 + 200) * ((int)v8 >> v16)));
        }
        if (v16 >= *(_DWORD *)(v2 + 216)) {
          VP8LDecodeAlphaImageStream_cold_9();
        }
        int v13 = (void *)(*(void *)(v2 + 224) + 568 * v16);
      }
      if (!v13) {
        VP8LDecodeAlphaImageStream_cold_6();
      }
      int v17 = *(_DWORD *)(v2 + 72);
      if (v17 >= 32)
      {
        VP8LDoFillBitWindow((uint64_t)v65);
        int v17 = *(_DWORD *)(v2 + 72);
      }
      unint64_t v18 = *v65;
      unint64_t v19 = *v65 >> v17;
      int v20 = (unsigned __int8 *)(*v13 + 4 * v19);
      unsigned int v21 = *v20;
      if (v21 >= 9)
      {
        v17 += 8;
        v20 += 4 * *(unsigned __int16 *)(*v13 + 4 * v19 + 2)
             + 4 * ((v18 >> v17) & ~(-1 << (v21 - 8)));
        unsigned int v21 = *v20;
      }
      unsigned int v22 = v17 + v21;
      *(_DWORD *)(v2 + 72) = v22;
      unsigned int v23 = *((unsigned __int16 *)v20 + 1);
      if (v23 <= 0xFF)
      {
        *(unsigned char *)(v64 + v7++) = v23;
        if (++v9 >= v6)
        {
          int v9 = 0;
          if ((int)v8 < a2 && (((_BYTE)v8 + 1) & 0xF) == 0)
          {
            ExtractPalettedAlphaRows(v2, (v8 + 1));
            int v9 = 0;
          }
          LODWORD(v8) = v8 + 1;
        }
        goto LABEL_91;
      }
      if (v23 > 0x117) {
        goto LABEL_99;
      }
      uint64_t v24 = v10;
      unsigned int v25 = v23 - 256;
      if (v23 - 256 >= 4)
      {
        unsigned int v25 = VP8LReadBits((uint64_t)v65, (v23 - 258) >> 1) + ((v23 & 1 | 2) << (char)v14);
        unint64_t v18 = *(void *)(v2 + 40);
        unsigned int v22 = *(_DWORD *)(v2 + 72);
      }
      uint64_t v26 = v13[4];
      unint64_t v27 = v18 >> v22;
      uint64_t v28 = (unsigned __int8 *)(v26 + 4 * (v18 >> v22));
      unsigned int v29 = *v28;
      if (v29 >= 9)
      {
        v22 += 8;
        v28 += 4 * *(unsigned __int16 *)(v26 + 4 * v27 + 2)
             + 4 * ((v18 >> v22) & ~(-1 << (v29 - 8)));
        unsigned int v29 = *v28;
      }
      *(_DWORD *)(v2 + 72) = v22 + v29;
      unsigned int v30 = *((unsigned __int16 *)v28 + 1);
      if ((int)(v22 + v29) >= 32) {
        VP8LDoFillBitWindow((uint64_t)v65);
      }
      if (v30 >= 4) {
        unsigned int v30 = VP8LReadBits((uint64_t)v65, (v30 - 2) >> 1) + ((v30 & 1 | 2) << (char)v14);
      }
      if ((int)(v30 + 1) < 121)
      {
        int v31 = (kCodeToPlane[v30] >> 4) * v6 - (kCodeToPlane[v30] & 0xF) + 8;
        if (v31 <= 1) {
          int v31 = 1;
        }
      }
      else
      {
        int v31 = v30 - 119;
      }
      uint64_t v32 = v25 + 1;
      BOOL v33 = v7 < v31 || v63 - v7 < (int)v32;
      if (v33)
      {
LABEL_99:
        char v53 = 1;
        goto LABEL_105;
      }
      int v34 = (unsigned char *)(v64 + v7);
      uint64_t v14 = (unsigned __int16 *)&v34[-v31];
      if ((int)v32 < 8)
      {
LABEL_59:
        if (v31 >= (int)v32)
        {
          memcpy(v34, v14, (int)v32);
          uint64_t v10 = v24;
          int v11 = v62;
        }
        else
        {
          BOOL v33 = v25 > 0x7FFFFFFE;
          uint64_t v10 = v24;
          int v11 = v62;
          if (!v33)
          {
            uint64_t v36 = -(uint64_t)v31;
            uint64_t v37 = v32;
            do
            {
              *int v34 = v34[v36];
              ++v34;
              --v37;
            }
            while (v37);
          }
        }
        goto LABEL_79;
      }
      switch(v31)
      {
        case 4:
          int v35 = *(_DWORD *)v14;
          break;
        case 2:
          int v35 = *v14 | (*v14 << 16);
          break;
        case 1:
          int v35 = 16843009 * *(unsigned __int8 *)v14;
          break;
        default:
          goto LABEL_59;
      }
      if ((v34 & 3) != 0)
      {
        uint64_t v38 = 0;
        do
        {
          v34[v38] = *((unsigned char *)v14 + v38);
          HIDWORD(v39) = v35;
          LODWORD(v39) = v35;
          int v35 = v39 >> 8;
          char v40 = v64 + 1 + v7 + v38++;
        }
        while ((v40 & 3) != 0);
        unsigned int v41 = v25 - v38 + 1;
        v34 += v38;
        uint64_t v14 = (unsigned __int16 *)((char *)v14 + v38);
        if ((int)(v25 - v38 + 2) < 5)
        {
          unsigned int v42 = 0;
          uint64_t v10 = v24;
          int v11 = v62;
          goto LABEL_76;
        }
      }
      else
      {
        unsigned int v41 = v25 + 1;
      }
      uint64_t v10 = v24;
      uint64_t v43 = 0;
      int v11 = v62;
      do
        *(_DWORD *)&v34[4 * v43++] = v35;
      while (v41 >> 2 != v43);
      unsigned int v42 = v41 & 0xFFFFFFFC;
LABEL_76:
      if ((int)v42 < (int)v41)
      {
        unint64_t v44 = v41 - (unint64_t)v42;
        unsigned int v45 = &v34[v42];
        int v46 = (char *)v14 + v42;
        do
        {
          char v47 = *v46++;
          *v45++ = v47;
          --v44;
        }
        while (v44);
      }
LABEL_79:
      for (v9 += v32; v9 >= v6; v9 -= v6)
      {
        int v48 = v8;
        uint64_t v8 = (v8 + 1);
        if (v48 < a2 && (v8 & 0xF) == 0) {
          ExtractPalettedAlphaRows(v2, v8);
        }
      }
      v7 += v32;
      if (v7 < (int)v10 && (v9 & v11) != 0)
      {
        int v49 = *(_DWORD *)(v2 + 196);
        if (v49) {
          int v49 = *(_DWORD *)(*(void *)(v2 + 208) + 4 * ((v9 >> v49) + *(_DWORD *)(v2 + 200) * ((int)v8 >> v49)));
        }
        if (v49 >= *(_DWORD *)(v2 + 216)) {
          VP8LDecodeAlphaImageStream_cold_9();
        }
        int v13 = (void *)(*(void *)(v2 + 224) + 568 * v49);
      }
LABEL_91:
      unint64_t v51 = *(void *)(v2 + 56);
      unint64_t v50 = *(void *)(v2 + 64);
      if (v50 > v51) {
        ShiftBytes_cold_1();
      }
      if (*(_DWORD *)(v2 + 76))
      {
        *(_DWORD *)(v2 + 76) = 1;
LABEL_101:
        if ((int)v8 >= a2) {
          uint64_t v54 = a2;
        }
        else {
          uint64_t v54 = v8;
        }
        ExtractPalettedAlphaRows(v2, v54);
        char v53 = 0;
LABEL_105:
        unint64_t v56 = *(void *)(v2 + 56);
        unint64_t v55 = *(void *)(v2 + 64);
        if (v55 > v56) {
          ShiftBytes_cold_1();
        }
        if (*(_DWORD *)(v2 + 76)) {
          BOOL v57 = 1;
        }
        else {
          BOOL v57 = v55 == v56 && *(_DWORD *)(v2 + 72) > 64;
        }
        *(_DWORD *)(v2 + 76) = v57;
        if ((v53 & 1) != 0 || v57 && v7 < v63)
        {
          if (*(_DWORD *)v2 != 5 && *(_DWORD *)v2) {
            return 0;
          }
          uint64_t result = 0;
          if (v57) {
            int v59 = 5;
          }
          else {
            int v59 = 3;
          }
          *(_DWORD *)uint64_t v2 = v59;
          return result;
        }
        *(_DWORD *)(v2 + 144) = v7;
        return 1;
      }
      BOOL v52 = v50 == v51 && *(_DWORD *)(v2 + 72) > 64;
      *(_DWORD *)(v2 + 76) = v52;
      if (v52 || v7 >= (int)v10) {
        goto LABEL_101;
      }
    }
  }
  uint64_t v60 = *(void *)(v2 + 24);
  int v61 = *(_DWORD *)(v2 + 132);

  return DecodeImageData(v2, v60, v61, v4, a2, (void (*)(uint64_t, uint64_t))ExtractAlphaRows);
}

uint64_t DecodeImageData(uint64_t a1, uint64_t a2, int a3, int a4, int a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t HtreeGroupForPos = 0;
  int v8 = *(_DWORD *)(a1 + 152);
  uint64_t v9 = *(int *)(a1 + 144);
  uint64_t v10 = ((int)v9 / a3);
  int v11 = (int)v9 % a3;
  int v12 = a5 * a3;
  if (*(_DWORD *)(a1 + 80)) {
    int v13 = (int)v9 / a3;
  }
  else {
    int v13 = 0x1000000;
  }
  int v102 = v13;
  int v96 = *(_DWORD *)(a1 + 152);
  unsigned int v93 = (uint64_t *)(a1 + 160);
  if (v8 <= 0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (uint64_t *)(a1 + 160);
  }
  int v100 = *(_DWORD *)(a1 + 192);
  if ((int)v9 < v12)
  {
    int v15 = *(_DWORD *)(a1 + 196);
    if (v15) {
      int v15 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * ((v11 >> v15) + *(_DWORD *)(a1 + 200) * ((int)v10 >> v15)));
    }
    if (v15 >= *(_DWORD *)(a1 + 216)) {
      VP8LDecodeAlphaImageStream_cold_9();
    }
    uint64_t HtreeGroupForPos = *(void *)(a1 + 224) + 568 * v15;
  }
  if (*(_DWORD *)(a1 + 140) >= a5) {
    DecodeImageData_cold_15();
  }
  if (v12 > a4 * a3) {
    DecodeImageData_cold_1();
  }
  uint64_t v99 = a1 + 40;
  int v16 = (uint64_t *)(a2 + 4 * v9);
  unint64_t v17 = a2 + 4 * v12;
  if ((int)v9 < v12)
  {
    uint64_t v89 = a1 + 152;
    int v90 = v8 + 280;
    uint64_t v94 = a1 + 88;
    unint64_t v91 = a2 + 4 * a4 * a3;
    uint64_t v92 = a1 + 176;
    unint64_t v18 = (uint64_t *)(a2 + 4 * v9);
    unint64_t v98 = a2 + 4 * v12;
    while (1)
    {
      if ((int)v10 >= v102)
      {
        if (!*(_DWORD *)(a1 + 80)) {
          DecodeImageData_cold_14();
        }
        long long v19 = *(_OWORD *)(v99 + 16);
        *(_OWORD *)uint64_t v94 = *(_OWORD *)v99;
        *(_OWORD *)(v94 + 16) = v19;
        *(void *)(v94 + 32) = *(void *)(v99 + 32);
        *(_DWORD *)(a1 + 128) = ((unint64_t)v18 - a2) >> 2;
        if (*(int *)(a1 + 152) >= 1)
        {
          VP8LColorCacheCopy((uint64_t)v93, v92);
          unint64_t v17 = v98;
        }
        int v102 = v10 + 8;
      }
      if ((v11 & v100) == 0)
      {
        int v20 = *(_DWORD *)(a1 + 196);
        if (v20) {
          int v20 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * ((v11 >> v20) + *(_DWORD *)(a1 + 200) * ((int)v10 >> v20)));
        }
        if (v20 >= *(_DWORD *)(a1 + 216)) {
          VP8LDecodeAlphaImageStream_cold_9();
        }
        uint64_t HtreeGroupForPos = *(void *)(a1 + 224) + 568 * v20;
      }
      if (!HtreeGroupForPos) {
        DecodeImageData_cold_2();
      }
      if (*(_DWORD *)(HtreeGroupForPos + 48)) {
        break;
      }
      if (*(int *)(a1 + 72) >= 32)
      {
        VP8LDoFillBitWindow(v99);
        unint64_t v17 = v98;
      }
      if (*(_DWORD *)(HtreeGroupForPos + 52))
      {
        unint64_t v27 = *(void *)(a1 + 40);
        int v28 = *(_DWORD *)(a1 + 72);
        int v29 = *(_DWORD *)(HtreeGroupForPos + 8 * ((v27 >> v28) & 0x3F) + 56);
        int v30 = *(_DWORD *)(HtreeGroupForPos + 8 * ((v27 >> v28) & 0x3F) + 60);
        int v31 = v29 + v28;
        if (v29 > 255)
        {
          *(_DWORD *)(a1 + 72) = v31 - 256;
          if (v30 <= 0xFF) {
            DecodeImageData_cold_12();
          }
        }
        else
        {
          *(_DWORD *)(a1 + 72) = v31;
          *(_DWORD *)unint64_t v18 = v30;
          int v30 = 0;
        }
        unint64_t v37 = *(void *)(a1 + 56);
        unint64_t v36 = *(void *)(a1 + 64);
        if (v36 > v37) {
          ShiftBytes_cold_1();
        }
        if (*(_DWORD *)(a1 + 76) || v36 == v37 && *(int *)(a1 + 72) > 64)
        {
LABEL_120:
          unsigned int v22 = v18;
          goto LABEL_121;
        }
        if (!v30) {
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v27 = *(void *)(a1 + 40);
        int v32 = *(_DWORD *)(a1 + 72);
        unint64_t v33 = v27 >> v32;
        int v34 = (unsigned __int8 *)(*(void *)HtreeGroupForPos + 4 * (v27 >> v32));
        unsigned int v35 = *v34;
        if (v35 >= 9)
        {
          v32 += 8;
          v34 += 4 * *(unsigned __int16 *)(*(void *)HtreeGroupForPos + 4 * v33 + 2)
               + 4 * ((v27 >> v32) & ~(-1 << (v35 - 8)));
          unsigned int v35 = *v34;
        }
        *(_DWORD *)(a1 + 72) = v32 + v35;
        int v30 = *((unsigned __int16 *)v34 + 1);
        unint64_t v37 = *(void *)(a1 + 56);
        unint64_t v36 = *(void *)(a1 + 64);
      }
      if (v36 > v37) {
        ShiftBytes_cold_1();
      }
      if (*(_DWORD *)(a1 + 76) || v36 == v37 && *(int *)(a1 + 72) > 64) {
        goto LABEL_120;
      }
      if (v30 <= 255)
      {
        if (*(_DWORD *)(HtreeGroupForPos + 40))
        {
          int v21 = *(_DWORD *)(HtreeGroupForPos + 44) | (v30 << 8);
        }
        else
        {
          uint64_t v54 = *(void *)(HtreeGroupForPos + 8);
          int v55 = *(_DWORD *)(a1 + 72);
          unint64_t v56 = v27 >> v55;
          BOOL v57 = (unsigned __int8 *)(v54 + 4 * (v27 >> v55));
          unsigned int v58 = *v57;
          if (v58 >= 9)
          {
            v55 += 8;
            v57 += 4 * *(unsigned __int16 *)(v54 + 4 * v56 + 2)
                 + 4 * ((v27 >> v55) & ~(-1 << (v58 - 8)));
            unsigned int v58 = *v57;
          }
          int v59 = v55 + v58;
          *(_DWORD *)(a1 + 72) = v59;
          int v60 = *((unsigned __int16 *)v57 + 1);
          if (v59 >= 32)
          {
            VP8LDoFillBitWindow(v99);
            unint64_t v17 = v98;
            unint64_t v27 = *(void *)(a1 + 40);
            int v59 = *(_DWORD *)(a1 + 72);
          }
          uint64_t v61 = *(void *)(HtreeGroupForPos + 16);
          unint64_t v62 = v27 >> v59;
          int v63 = (unsigned __int8 *)(v61 + 4 * (v27 >> v59));
          unsigned int v64 = *v63;
          if (v64 >= 9)
          {
            v59 += 8;
            v63 += 4 * *(unsigned __int16 *)(v61 + 4 * v62 + 2)
                 + 4 * ((v27 >> v59) & ~(-1 << (v64 - 8)));
            unsigned int v64 = *v63;
          }
          unsigned int v65 = v59 + v64;
          int v66 = *((unsigned __int16 *)v63 + 1);
          uint64_t v67 = *(void *)(HtreeGroupForPos + 24);
          unint64_t v68 = v27 >> v65;
          uint64_t v69 = (unsigned __int8 *)(v67 + 4 * (v27 >> v65));
          unsigned int v70 = *v69;
          if (v70 >= 9)
          {
            v65 += 8;
            v69 += 4 * *(unsigned __int16 *)(v67 + 4 * v68 + 2)
                 + 4 * ((v27 >> v65) & ~(-1 << (v70 - 8)));
            unsigned int v70 = *v69;
          }
          int v71 = v65 + v70;
          *(_DWORD *)(a1 + 72) = v65 + v70;
          unint64_t v73 = *(void *)(a1 + 56);
          unint64_t v72 = *(void *)(a1 + 64);
          if (v72 > v73) {
            ShiftBytes_cold_1();
          }
          if (*(_DWORD *)(a1 + 76)) {
            goto LABEL_120;
          }
          int v74 = *((unsigned __int16 *)v69 + 1);
          if (v72 == v73 && v71 > 64) {
            goto LABEL_120;
          }
          int v21 = (v60 << 16) | (v30 << 8) | v66 | (v74 << 24);
        }
        goto LABEL_29;
      }
      if (v30 > 0x117)
      {
        if (v30 >= v90) {
          goto LABEL_143;
        }
        if (v96 < 1) {
          DecodeImageData_cold_10();
        }
        if (v16 < v18)
        {
          uint64_t v52 = *v93;
          do
          {
            int v53 = *(_DWORD *)v16;
            int v16 = (uint64_t *)((char *)v16 + 4);
            *(_DWORD *)(v52 + 4 * (int)((506832829 * v53) >> *((_DWORD *)v14 + 2))) = v53;
          }
          while (v16 < v18);
        }
        if ((v30 - 280) >> *((_DWORD *)v14 + 3)) {
          DecodeImageData_cold_9();
        }
        int v21 = *(_DWORD *)(*v14 + 4 * (v30 - 280));
        goto LABEL_29;
      }
      int v38 = v30 - 256;
      if ((v30 - 256) >= 4)
      {
        unsigned int v39 = (v30 - 258) >> 1;
        int v40 = (v30 & 1 | 2) << v39;
        int v41 = VP8LReadBits(v99, v39);
        unint64_t v17 = v98;
        unint64_t v27 = *(void *)v99;
        int v38 = v41 + v40;
      }
      uint64_t v42 = *(void *)(HtreeGroupForPos + 32);
      int v43 = *(_DWORD *)(a1 + 72);
      unint64_t v44 = v27 >> v43;
      unsigned int v45 = (unsigned __int8 *)(v42 + 4 * (v27 >> v43));
      unsigned int v46 = *v45;
      if (v46 >= 9)
      {
        v43 += 8;
        v45 += 4 * *(unsigned __int16 *)(v42 + 4 * v44 + 2)
             + 4 * ((v27 >> v43) & ~(-1 << (v46 - 8)));
        unsigned int v46 = *v45;
      }
      *(_DWORD *)(a1 + 72) = v43 + v46;
      signed int v47 = *((unsigned __int16 *)v45 + 1);
      if ((int)(v43 + v46) >= 32)
      {
        VP8LDoFillBitWindow(v99);
        unint64_t v17 = v98;
      }
      if (v47 >= 4)
      {
        unsigned int v48 = (v47 - 2) >> 1;
        int v49 = (v47 & 1 | 2) << v48;
        int v50 = VP8LReadBits(v99, v48);
        unint64_t v17 = v98;
        signed int v47 = v50 + v49;
      }
      if (v47 + 1 < 121)
      {
        if ((kCodeToPlane[v47] >> 4) * a3 - (kCodeToPlane[v47] & 0xF) + 8 <= 1) {
          unsigned int v51 = 1;
        }
        else {
          unsigned int v51 = (kCodeToPlane[v47] >> 4) * a3 - (kCodeToPlane[v47] & 0xF) + 8;
        }
      }
      else
      {
        unsigned int v51 = v47 - 119;
      }
      unint64_t v76 = *(void *)(a1 + 56);
      unint64_t v75 = *(void *)(a1 + 64);
      if (v75 > v76) {
        ShiftBytes_cold_1();
      }
      if (*(_DWORD *)(a1 + 76) || v75 == v76 && *(int *)(a1 + 72) > 64) {
        goto LABEL_120;
      }
      if (v51 > ((uint64_t)v18 - a2) >> 2) {
        goto LABEL_143;
      }
      int v77 = v38 + 1;
      if (v38 + 1 > (uint64_t)(v91 - (void)v18) >> 2) {
        goto LABEL_143;
      }
      CopyBlock32b(v18, v51, v77);
      for (v11 += v77; v11 >= a3; v11 -= a3)
      {
        int v78 = v10;
        uint64_t v10 = (v10 + 1);
        if (a6 && v78 < a5 && (v10 & 0xF) == 0) {
          a6(a1, v10);
        }
      }
      unsigned int v22 = (uint64_t *)((char *)v18 + 4 * v77);
      if ((unint64_t)v22 > v91) {
        DecodeImageData_cold_8();
      }
      if ((v11 & v100) != 0) {
        uint64_t HtreeGroupForPos = GetHtreeGroupForPos(v89, v11, v10);
      }
      if (v96 < 1)
      {
        uint64_t v23 = v10;
        unint64_t v17 = v98;
        goto LABEL_41;
      }
      unint64_t v17 = v98;
      if (v16 < v22)
      {
        uint64_t v79 = *v14;
        do
        {
          int v80 = *(_DWORD *)v16;
          int v16 = (uint64_t *)((char *)v16 + 4);
          *(_DWORD *)(v79 + 4 * (int)((506832829 * v80) >> *((_DWORD *)v14 + 2))) = v80;
        }
        while (v16 < v22);
      }
LABEL_31:
      uint64_t v23 = v10;
LABEL_41:
      uint64_t v10 = v23;
      unint64_t v18 = v22;
      if ((unint64_t)v22 >= v17) {
        goto LABEL_122;
      }
    }
    int v21 = *(_DWORD *)(HtreeGroupForPos + 44);
LABEL_29:
    *(_DWORD *)unint64_t v18 = v21;
LABEL_30:
    unsigned int v22 = (uint64_t *)((char *)v18 + 4);
    if (++v11 >= a3)
    {
      uint64_t v23 = (v10 + 1);
      if (a6 && (int)v10 < a5 && (((_BYTE)v10 + 1) & 0xF) == 0)
      {
        a6(a1, (v10 + 1));
        unint64_t v17 = v98;
      }
      int v11 = 0;
      if (v96 >= 1 && v16 < v22)
      {
        uint64_t v24 = *v14;
        do
        {
          unsigned int v25 = v16;
          int v26 = *(_DWORD *)v16;
          int v16 = (uint64_t *)((char *)v16 + 4);
          *(_DWORD *)(v24 + 4 * (int)((506832829 * v26) >> *((_DWORD *)v14 + 2))) = v26;
        }
        while (v25 < v18);
        int v11 = 0;
      }
      goto LABEL_41;
    }
    goto LABEL_31;
  }
  unsigned int v22 = (uint64_t *)(a2 + 4 * v9);
LABEL_121:
  LODWORD(v23) = v10;
LABEL_122:
  unint64_t v82 = *(void *)(a1 + 56);
  unint64_t v81 = *(void *)(a1 + 64);
  if (v81 > v82) {
    ShiftBytes_cold_1();
  }
  if (*(_DWORD *)(a1 + 76))
  {
    BOOL v83 = 1;
    *(_DWORD *)(a1 + 76) = 1;
    if (!*(_DWORD *)(a1 + 80)) {
      goto LABEL_143;
    }
  }
  else
  {
    BOOL v83 = v81 == v82 && *(_DWORD *)(a1 + 72) > 64;
    *(_DWORD *)(a1 + 76) = v83;
    if (!*(_DWORD *)(a1 + 80)) {
      goto LABEL_142;
    }
  }
  int v85 = v83 && (unint64_t)v22 < v17;
  if (v85 != 1 && (unint64_t)v22 < v17) {
    DecodeImageData_cold_6();
  }
  if (v85)
  {
    *(_DWORD *)a1 = 5;
    long long v86 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)uint64_t v99 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v99 + 16) = v86;
    *(void *)(v99 + 32) = *(void *)(a1 + 120);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 128);
    if (*(int *)(a1 + 152) >= 1) {
      VP8LColorCacheCopy(a1 + 176, (uint64_t)v93);
    }
    return 1;
  }
  if ((unint64_t)v22 >= v17)
  {
LABEL_146:
    if (a6)
    {
      if ((int)v23 >= a5) {
        uint64_t v88 = a5;
      }
      else {
        uint64_t v88 = v23;
      }
      a6(a1, v88);
    }
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(a1 + 144) = ((unint64_t)v22 - a2) >> 2;
    return 1;
  }
LABEL_142:
  if (!v83) {
    goto LABEL_146;
  }
LABEL_143:
  if (*(_DWORD *)a1 != 5 && *(_DWORD *)a1) {
    return 0;
  }
  uint64_t result = 0;
  *(_DWORD *)a1 = 3;
  return result;
}

uint64_t ExtractAlphaRows(uint64_t result, int a2)
{
  if (*(_DWORD *)(*(void *)(result + 8) + 132) < a2) {
    ExtractAlphaRows_cold_1();
  }
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 140);
  int v4 = a2 - v3;
  if (a2 - (int)v3 < 1)
  {
    int v12 = *(_DWORD *)(result + 140);
  }
  else
  {
    uint64_t v5 = (unsigned int *)(*(void *)(result + 24) + 4 * *(_DWORD *)(result + 132) * (int)v3);
    do
    {
      if (v4 >= 16) {
        int v6 = 16;
      }
      else {
        int v6 = v4;
      }
      int v7 = *(unsigned int **)(v2 + 8);
      uint64_t v8 = *((void *)v7 + 7);
      uint64_t v9 = *v7;
      uint64_t v10 = *(void *)(v8 + 200) + (int)v9 * (int)v3;
      uint64_t v11 = *(void *)(v2 + 32);
      ApplyInverseTransforms((unsigned int **)v2, v3, v6, v5);
      WebPExtractGreen(v11, v10, (v9 * v6));
      int v12 = v3 + v6;
      uint64_t result = AlphaApplyFilter(v8, v3, (int)v3 + v6, v10, v9);
      v5 += *(_DWORD *)(v2 + 132) * v6;
      uint64_t v3 = (v3 + v6);
      BOOL v13 = __OFSUB__(v4, v6);
      v4 -= v6;
    }
    while (!((v4 < 0) ^ v13 | (v4 == 0)));
  }
  if (v12 != a2) {
    ExtractAlphaRows_cold_2();
  }
  *(_DWORD *)(v2 + 148) = a2;
  *(_DWORD *)(v2 + 140) = a2;
  return result;
}

uint64_t VP8LDecodeHeader(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (a2)
  {
    uint64_t v10 = 0;
    *(void *)(a1 + 8) = a2;
    *(_DWORD *)a1 = 0;
    VP8LInitBitReader((void *)(a1 + 40), *(unsigned __int8 **)(a2 + 104), *(void *)(a2 + 96));
    if (!ReadImageInfo(a1 + 40, (_DWORD *)&v10 + 1, &v10, &v9))
    {
      if (*(_DWORD *)a1 == 5 || !*(_DWORD *)a1) {
        *(_DWORD *)a1 = 3;
      }
      goto LABEL_15;
    }
    *(_DWORD *)(a1 + 4) = 2;
    int v5 = v10;
    signed int v4 = HIDWORD(v10);
    *(_DWORD *)a2 = HIDWORD(v10);
    *(_DWORD *)(a2 + 4) = v5;
    uint64_t v6 = 1;
    if (!DecodeImageStream(v4, v5, 1, a1, 0))
    {
LABEL_15:
      VP8LClear(a1);
      if (!*(_DWORD *)a1) {
        VP8LDecodeHeader_cold_1();
      }
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)a1 != 5 && *(_DWORD *)a1 != 0) {
      return 0;
    }
    uint64_t v6 = 0;
    *(_DWORD *)a1 = 2;
  }
  return v6;
}

uint64_t VP8LDecodeImage(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (!*(void *)(result + 232)) {
    VP8LDecodeImage_cold_1();
  }
  if (!*(void *)(result + 224)) {
    VP8LDecodeImage_cold_2();
  }
  if (*(int *)(result + 216) <= 0) {
    VP8LDecodeImage_cold_3();
  }
  uint64_t v2 = *(void *)(result + 8);
  if (!v2) {
    VP8LDecodeImage_cold_4();
  }
  uint64_t v3 = *(uint64_t **)(v2 + 56);
  if (!v3) {
    VP8LDecodeImage_cold_5();
  }
  if (!*(_DWORD *)(result + 4)) {
    goto LABEL_26;
  }
  uint64_t v4 = *v3;
  *(void *)(result + 16) = *v3;
  if (!v4) {
    VP8LDecodeImage_cold_7();
  }
  if (WebPIoInitFromOptions((_DWORD *)v3[5], (signed int *)v2, 3u))
  {
    if (!AllocateInternalBuffers32b(v1, *(_DWORD *)v2)) {
      goto LABEL_33;
    }
    if (*(_DWORD *)(v2 + 136))
    {
      int v5 = *(_DWORD *)(v2 + 12);
      int v6 = *(_DWORD *)(v2 + 16);
      uint64_t v7 = *(unsigned int *)(v2 + 144);
      uint64_t v8 = *(int *)(v2 + 140);
      int v9 = (char *)WebPSafeMalloc(36 * v8 + 104, 1uLL);
      if (!v9) {
        goto LABEL_30;
      }
      if (*(void *)(v1 + 384)) {
        VP8LDecodeImage_cold_8();
      }
      *(void *)(v1 + 384) = v9;
      *(void *)(v1 + 392) = v9;
      if (!WebPRescalerInit((uint64_t)v9, v5, v6, (uint64_t)&v9[32 * v8 + 104], v8, v7, 0, 4, v9 + 104)) {
        goto LABEL_33;
      }
      if (*(_DWORD *)(v2 + 136)) {
        goto LABEL_17;
      }
    }
    unsigned int v10 = **(_DWORD **)(v1 + 16);
    if (v10 - 11 >= 0xFFFFFFFC)
    {
LABEL_17:
      WebPInitAlphaProcessing();
      unsigned int v10 = **(_DWORD **)(v1 + 16);
    }
    if (v10 >= 0xB)
    {
      WebPInitConvertARGBToYUV();
      if (*(void *)(*(void *)(v1 + 16) + 40)) {
        WebPInitAlphaProcessing();
      }
    }
    if (!*(_DWORD *)(v1 + 80)
      || *(int *)(v1 + 152) < 1
      || *(void *)(v1 + 176)
      || VP8LColorCacheInit(v1 + 176, *(_DWORD *)(v1 + 172)))
    {
      *(_DWORD *)(v1 + 4) = 0;
LABEL_26:
      if (DecodeImageData(v1, *(void *)(v1 + 24), *(_DWORD *)(v1 + 132), *(_DWORD *)(v1 + 136), *(_DWORD *)(v2 + 132), (void (*)(uint64_t, uint64_t))ProcessRows))
      {
        *((_DWORD *)v3 + 8) = *(_DWORD *)(v1 + 148);
        return 1;
      }
      goto LABEL_33;
    }
LABEL_30:
    int v11 = *(_DWORD *)v1;
    int v12 = 1;
    if (!*(_DWORD *)v1)
    {
LABEL_32:
      *(_DWORD *)uint64_t v1 = v12;
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  int v11 = *(_DWORD *)v1;
  int v12 = 2;
  if (!*(_DWORD *)v1) {
    goto LABEL_32;
  }
LABEL_31:
  if (v11 == 5) {
    goto LABEL_32;
  }
LABEL_33:
  VP8LClear(v1);
  if (!*(_DWORD *)v1) {
    VP8LDecodeImage_cold_6();
  }
  return 0;
}

uint64_t ProcessRows(uint64_t result, int a2)
{
  uint64_t v2 = *(int **)(result + 8);
  if (v2[33] < a2) {
    ProcessRows_cold_1();
  }
  int v3 = a2;
  uint64_t v4 = result;
  uint64_t v5 = *(unsigned int *)(result + 140);
  int v6 = v3 - v5;
  if (v3 - (int)v5 >= 17) {
    ProcessRows_cold_2();
  }
  if (v6 >= 1)
  {
    uint64_t v7 = *(void *)(result + 32);
    int v8 = *v2;
    uint64_t result = (uint64_t)ApplyInverseTransforms((unsigned int **)result, v5, v6, (unsigned int *)(*(void *)(result + 24) + 4 * (int)v5 * *(_DWORD *)(result + 132)));
    int v9 = *(_DWORD *)(v4 + 140);
    if (v9 >= v3) {
      ProcessRows_cold_9();
    }
    int v10 = v2[31];
    uint64_t v11 = v2[30];
    if (v10 <= (int)v11) {
      ProcessRows_cold_8();
    }
    int v12 = v2[32];
    if (v2[33] >= v3) {
      int v13 = v3;
    }
    else {
      int v13 = v2[33];
    }
    if (v12 <= v9) {
      int v14 = *(_DWORD *)(v4 + 140);
    }
    else {
      int v14 = v2[32];
    }
    int v15 = v13 - v14;
    if (v13 > v14)
    {
      BOOL v16 = __OFSUB__(v12, v9);
      int v17 = v12 - v9;
      char v37 = (v17 < 0) ^ v16 | (v17 == 0);
      int v51 = 4 * v8;
      int v18 = v17 * 4 * v8;
      if (v37) {
        int v18 = 0;
      }
      long long v19 = (unsigned int *)(v7 + v18 + 4 * v11);
      uint64_t v20 = (v10 - v11);
      v2[2] = v14 - v12;
      v2[3] = v20;
      v2[4] = v15;
      uint64_t v21 = *(void *)(v4 + 16);
      int v52 = *(_DWORD *)v21;
      int v50 = v13 - v14;
      int v47 = v3;
      uint64_t v46 = v21;
      if (*(_DWORD *)v21 <= 0xAu)
      {
        int v30 = *(_DWORD *)(v4 + 148);
        uint64_t v31 = *(int *)(v21 + 24);
        int v32 = (_DWORD *)(*(void *)(v21 + 16) + (int)v31 * (uint64_t)v30);
        if (v2[34])
        {
          if (v15 < 1)
          {
            int v33 = 0;
          }
          else
          {
            int v33 = 0;
            int v34 = 0;
            uint64_t v48 = *(void *)(v21 + 16) + (int)v31 * (uint64_t)v30;
            do
            {
              uint64_t v35 = (v15 - v34);
              int v36 = WebPRescaleNeededLines(*(void *)(v4 + 392), v15 - v34);
              char v37 = v36 >= 1 && v36 <= (int)v35;
              if (!v37) {
                ProcessRows_cold_6();
              }
              int v38 = v36;
              WebPMultARGBRows((uint64_t)v19 + v51 * (uint64_t)v34, v51, *(unsigned int *)(*(void *)(v4 + 392) + 44), v36, 0);
              uint64_t result = WebPRescalerImport(*(void *)(v4 + 392), v35, (uint64_t)v19 + v51 * (uint64_t)v34, v51);
              if (result != v38) {
                ProcessRows_cold_7();
              }
              uint64_t v39 = *(void *)(v4 + 392);
              int v49 = v33;
              int v40 = 0;
              if (*(_DWORD *)(v39 + 64) < *(_DWORD *)(v39 + 56))
              {
                int v41 = (_DWORD *)((char *)v32 + (int)v31 * (uint64_t)v33);
                uint64_t v42 = *(unsigned int **)(v39 + 72);
                uint64_t v43 = *(unsigned int *)(v39 + 52);
                do
                {
                  if (*(int *)(v39 + 24) > 0) {
                    break;
                  }
                  WebPRescalerExportRow(v39);
                  WebPMultARGBRow(v42, v43, 1);
                  uint64_t result = (uint64_t)VP8LConvertFromBGRA(v42, v43, v52, v41);
                  int v41 = (_DWORD *)((char *)v41 + v31);
                  ++v40;
                }
                while (*(_DWORD *)(v39 + 64) < *(_DWORD *)(v39 + 56));
              }
              v34 += v38;
              int v15 = v50;
              int v33 = v40 + v49;
              int v32 = (_DWORD *)v48;
            }
            while (v34 < v50);
          }
        }
        else
        {
          if (v15 >= 1)
          {
            unsigned int v45 = v15 + 1;
            do
            {
              uint64_t result = (uint64_t)VP8LConvertFromBGRA(v19, v20, v52, v32);
              long long v19 = (unsigned int *)((char *)v19 + v51);
              int v32 = (_DWORD *)((char *)v32 + v31);
              --v45;
            }
            while (v45 > 1);
          }
          int v33 = v15;
        }
        int v22 = *(_DWORD *)(v4 + 148) + v33;
      }
      else
      {
        int v22 = *(_DWORD *)(v4 + 148);
        if (v2[34])
        {
          if (v15 >= 1)
          {
            int v23 = 0;
            int v24 = v51;
            do
            {
              int v25 = WebPRescaleNeededLines(*(void *)(v4 + 392), v15 - v23);
              WebPMultARGBRows((uint64_t)v19, v24, *(unsigned int *)(*(void *)(v4 + 392) + 44), v25, 0);
              uint64_t result = WebPRescalerImport(*(void *)(v4 + 392), (v15 - v23), (uint64_t)v19, v24);
              if (result != v25) {
                ProcessRows_cold_5();
              }
              uint64_t v26 = *(void *)(v4 + 392);
              if (*(_DWORD *)(v26 + 64) >= *(_DWORD *)(v26 + 56))
              {
                int v27 = 0;
              }
              else
              {
                int v27 = 0;
                uint64_t v28 = *(void *)(v26 + 72);
                uint64_t v29 = *(unsigned int *)(v26 + 52);
                do
                {
                  if (*(int *)(v26 + 24) > 0) {
                    break;
                  }
                  WebPRescalerExportRow(v26);
                  WebPMultARGBRow(v28, v29, 1);
                  uint64_t result = ConvertToYUVA(v28, v29, v22 + v27++, *(void *)(v4 + 16));
                }
                while (*(_DWORD *)(v26 + 64) < *(_DWORD *)(v26 + 56));
              }
              v23 += v25;
              int v24 = v51;
              long long v19 = (unsigned int *)((char *)v19 + v25 * (uint64_t)v51);
              v22 += v27;
              int v15 = v50;
            }
            while (v23 < v50);
          }
        }
        else if (v15 >= 1)
        {
          unsigned int v44 = v15 + 1;
          do
          {
            uint64_t result = ConvertToYUVA((uint64_t)v19, v20, v22, *(void *)(v4 + 16));
            long long v19 = (unsigned int *)((char *)v19 + v51);
            ++v22;
            --v44;
          }
          while (v44 > 1);
        }
      }
      *(_DWORD *)(v4 + 148) = v22;
      int v3 = v47;
      if (v22 > *(_DWORD *)(v46 + 8)) {
        ProcessRows_cold_3();
      }
    }
  }
  *(_DWORD *)(v4 + 140) = v3;
  if (*(_DWORD *)(v4 + 136) < v3) {
    ProcessRows_cold_4();
  }
  return result;
}

uint64_t AccumulateHCode(uint64_t result, char a2, int *a3)
{
  int v3 = *a3 + result;
  int v4 = a3[1] | (WORD1(result) << a2);
  *a3 = v3;
  a3[1] = v4;
  if (v3 >= 9) {
    AccumulateHCode_cold_1();
  }
  return result;
}

uint64_t GetHtreeGroupForPos(uint64_t a1, int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 44);
  if (v3) {
    int v3 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * ((a2 >> v3) + *(_DWORD *)(a1 + 48) * (a3 >> v3)));
  }
  if (v3 >= *(_DWORD *)(a1 + 64)) {
    VP8LDecodeAlphaImageStream_cold_9();
  }
  return *(void *)(a1 + 72) + 568 * v3;
}

uint64_t ExtractPalettedAlphaRows(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)(result + 140);
  unsigned int v3 = *(_DWORD *)(result + 140);
  int v4 = *(unsigned int **)(result + 8);
  uint64_t v5 = *((void *)v4 + 7);
  if (*(_DWORD *)(v5 + 12) < 2u) {
    uint64_t v2 = v4 + 32;
  }
  unsigned int v6 = *v2;
  if ((int)v3 <= (int)v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v3;
  }
  if ((int)v4[33] < (int)a2) {
    ExtractPalettedAlphaRows_cold_1();
  }
  int v8 = a2;
  uint64_t v9 = result;
  if ((int)v7 < (int)a2)
  {
    if (*(_DWORD *)(result + 272) != 1) {
      ExtractPalettedAlphaRows_cold_3();
    }
    uint64_t v10 = result + 280;
    if (*(_DWORD *)(v9 + 280) != 3) {
      ExtractPalettedAlphaRows_cold_2();
    }
    uint64_t v11 = *v4;
    uint64_t v12 = *(void *)(v5 + 200) + (int)v11 * (int)v7;
    VP8LColorIndexInverseTransformAlpha(v10, v7, a2, (unsigned __int8 *)(*(void *)(v9 + 24) + *(int *)(v9 + 132) * (uint64_t)(int)v7), v12);
    uint64_t result = AlphaApplyFilter(v5, v7, v8, v12, v11);
  }
  *(_DWORD *)(v9 + 148) = v8;
  *(_DWORD *)(v9 + 140) = v8;
  return result;
}

uint64_t AlphaApplyFilter(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(unsigned int *)(result + 12);
  if (v5)
  {
    if (!WebPUnfilters[v5]) {
      AlphaApplyFilter_cold_1();
    }
    uint64_t v6 = result;
    uint64_t result = *(void *)(result + 208);
    int v7 = a3 - a2;
    if (a3 > a2)
    {
      uint64_t v10 = (int)a5;
      do
      {
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))WebPUnfilters[*(unsigned int *)(v6 + 12)])(result, a4, a4, a5);
        uint64_t v11 = a4 + v10;
        uint64_t result = a4;
        a4 += v10;
        --v7;
      }
      while (v7);
      uint64_t result = v11 - v10;
    }
    *(void *)(v6 + 208) = result;
  }
  return result;
}

uint64_t *CopyBlock32b(uint64_t *result, int a2, int a3)
{
  int v4 = (unsigned int *)result - a2;
  if ((result & 3) == 0 && a2 <= 2 && a3 >= 4)
  {
    if (a2 == 1)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = v5 | (v5 << 32);
      if ((result & 4) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v6 = *(void *)v4;
      uint64_t v5 = *(void *)v4;
      if ((result & 4) == 0)
      {
LABEL_14:
        if ((result & 7) != 0) {
          CopyBlock32b_cold_1();
        }
        uint64_t v10 = a3 >> 1;
        uint64_t v11 = result;
        do
        {
          *v11++ = v6;
          --v10;
        }
        while (v10);
        if (a3) {
          *((_DWORD *)result + (int)(a3 & 0xFFFFFFFE)) = v4[a3 & 0xFFFFFFFE];
        }
        return result;
      }
    }
    ++v4;
    *(_DWORD *)uint64_t result = v5;
    uint64_t result = (uint64_t *)((char *)result + 4);
    --a3;
    uint64_t v6 = __ROR8__(v6, 32);
    goto LABEL_14;
  }
  if (a2 >= a3)
  {
    size_t v12 = 4 * a3;
    return (uint64_t *)memcpy(result, v4, v12);
  }
  else if (a3 >= 1)
  {
    uint64_t v7 = a2;
    uint64_t v8 = a3;
    uint64_t v9 = -4 * v7;
    do
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)((char *)result + v9);
      uint64_t result = (uint64_t *)((char *)result + 4);
      --v8;
    }
    while (v8);
  }
  return result;
}

unsigned int **ApplyInverseTransforms(unsigned int **result, uint64_t a2, int a3, unsigned int *__src)
{
  int v4 = result;
  uint64_t v5 = *((unsigned int *)result + 68);
  uint64_t v6 = result[4];
  if ((int)v5 < 1)
  {
    if (v6 != __src)
    {
      size_t v10 = 4 * *((_DWORD *)result + 33) * a3;
      uint64_t v11 = result[4];
      return (unsigned int **)memcpy(v11, __src, v10);
    }
  }
  else
  {
    uint64_t v8 = (a3 + a2);
    unint64_t v9 = v5 + 1;
    do
    {
      uint64_t result = (unsigned int **)VP8LInverseTransform((uint64_t)&v4[3 * (v9-- - 2) + 35], a2, v8, (int *)__src, v6);
      __src = v6;
    }
    while (v9 > 1);
  }
  return result;
}

uint64_t ConvertToYUVA(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  WebPConvertARGBToY(a1, *(void *)(a4 + 16) + *(int *)(a4 + 48) * (uint64_t)a3, a2);
  uint64_t result = WebPConvertARGBToUV(a1, *(void *)(a4 + 24) + *(int *)(a4 + 52) * (uint64_t)(a3 >> 1), *(void *)(a4 + 32) + *(int *)(a4 + 56) * (uint64_t)(a3 >> 1), a2, (a3 & 1) == 0);
  uint64_t v9 = *(void *)(a4 + 40);
  if (v9)
  {
    uint64_t v10 = v9 + *(int *)(a4 + 60) * (uint64_t)a3;
    uint64_t v11 = WebPExtractAlpha;
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, void))v11)(a1 + 3, 0, a2, 1, v10, 0);
  }
  return result;
}

void ReadHuffmanCode_cold_1()
{
  __assert_rtn("ReadHuffmanCode", "vp8l_dec.c", 345, "num_codes <= NUM_CODE_LENGTH_CODES");
}

void ClearMetadata_cold_1()
{
  __assert_rtn("ClearMetadata", "vp8l_dec.c", 1395, "hdr != NULL");
}

void VP8LDecodeAlphaHeader_cold_1()
{
  __assert_rtn("VP8LDecodeAlphaHeader", "vp8l_dec.c", 1612, "alph_dec != NULL");
}

void DecodeImageStream_cold_1()
{
  __assert_rtn("DecodeImageStream", "vp8l_dec.c", 1533, "data == NULL");
}

void DecodeImageStream_cold_2()
{
  __assert_rtn("ReadHuffmanCodes", "vp8l_dec.c", 380, "huffman_tables->curr_segment == NULL");
}

void DecodeImageStream_cold_3()
{
  __assert_rtn("ReadHuffmanCodes", "vp8l_dec.c", 379, "huffman_tables->root.start == NULL");
}

void DecodeImageStream_cold_4()
{
  __assert_rtn("ReadTransform", "vp8l_dec.c", 1349, "dec->next_transform_ <= NUM_TRANSFORMS");
}

void DecodeImageStream_cold_5()
{
}

void AllocateInternalBuffers32b_cold_1()
{
  __assert_rtn("AllocateInternalBuffers32b", "vp8l_dec.c", 1554, "dec->width_ <= final_width");
}

void VP8LDecodeAlphaImageStream_cold_1()
{
  __assert_rtn("VP8LDecodeAlphaImageStream", "vp8l_dec.c", 1656, "dec != NULL");
}

void VP8LDecodeAlphaImageStream_cold_2()
{
  __assert_rtn("VP8LDecodeAlphaImageStream", "vp8l_dec.c", 1657, "last_row <= dec->height_");
}

void VP8LDecodeAlphaImageStream_cold_3()
{
  __assert_rtn("DecodeAlphaData", "vp8l_dec.c", 1049, "pos <= end");
}

void VP8LDecodeAlphaImageStream_cold_4()
{
  __assert_rtn("DecodeAlphaData", "vp8l_dec.c", 1050, "last_row <= height");
}

void VP8LDecodeAlphaImageStream_cold_5()
{
}

void VP8LDecodeAlphaImageStream_cold_6()
{
  __assert_rtn("DecodeAlphaData", "vp8l_dec.c", 1059, "htree_group != NULL");
}

void VP8LDecodeAlphaImageStream_cold_9()
{
}

void DecodeImageData_cold_1()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1158, "src_last <= src_end");
}

void DecodeImageData_cold_2()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1172, "htree_group != NULL");
}

void DecodeImageData_cold_6()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1274, "!dec->incremental_ || (br->eos_ && src < src_last) || src >= src_last");
}

void DecodeImageData_cold_8()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1243, "src <= src_end");
}

void DecodeImageData_cold_9()
{
  __assert_rtn("VP8LColorCacheLookup", "color_cache_utils.h", 43, "(key >> cc->hash_bits_) == 0u");
}

void DecodeImageData_cold_10()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1252, "color_cache != NULL");
}

void DecodeImageData_cold_12()
{
  __assert_rtn("ReadPackedSymbols", "vp8l_dec.c", 223, "code.value >= NUM_LITERAL_CODES");
}

void DecodeImageData_cold_14()
{
}

void DecodeImageData_cold_15()
{
}

void ExtractAlphaRows_cold_1()
{
  __assert_rtn("ExtractAlphaRows", "vp8l_dec.c", 1582, "last_row <= dec->io_->crop_bottom");
}

void ExtractAlphaRows_cold_2()
{
  __assert_rtn("ExtractAlphaRows", "vp8l_dec.c", 1601, "cur_row == last_row");
}

void VP8LDecodeHeader_cold_1()
{
  __assert_rtn("VP8LDecodeHeader", "vp8l_dec.c", 1702, "dec->status_ != VP8_STATUS_OK");
}

void VP8LDecodeImage_cold_1()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1712, "dec->hdr_.huffman_tables_.root.start != NULL");
}

void VP8LDecodeImage_cold_2()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1713, "dec->hdr_.htree_groups_ != NULL");
}

void VP8LDecodeImage_cold_3()
{
}

void VP8LDecodeImage_cold_4()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1717, "io != NULL");
}

void VP8LDecodeImage_cold_5()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1719, "params != NULL");
}

void VP8LDecodeImage_cold_6()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1774, "dec->status_ != VP8_STATUS_OK");
}

void VP8LDecodeImage_cold_7()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1724, "dec->output_ != NULL");
}

void VP8LDecodeImage_cold_8()
{
  __assert_rtn("AllocateAndInitRescaler", "vp8l_dec.c", 579, "dec->rescaler_memory == NULL");
}

void ProcessRows_cold_1()
{
  __assert_rtn("ProcessRows", "vp8l_dec.c", 814, "row <= dec->io_->crop_bottom");
}

void ProcessRows_cold_2()
{
  __assert_rtn("ProcessRows", "vp8l_dec.c", 817, "num_rows <= NUM_ARGB_CACHE_ROWS");
}

void ProcessRows_cold_3()
{
  __assert_rtn("ProcessRows", "vp8l_dec.c", 846, "dec->last_out_row_ <= output->height");
}

void ProcessRows_cold_4()
{
  __assert_rtn("ProcessRows", "vp8l_dec.c", 852, "dec->last_row_ <= dec->height_");
}

void ProcessRows_cold_5()
{
  __assert_rtn("EmitRescaledRowsYUVA", "vp8l_dec.c", 716, "lines_imported == needed_lines");
}

void ProcessRows_cold_6()
{
  __assert_rtn("EmitRescaledRowsRGBA", "vp8l_dec.c", 632, "needed_lines > 0 && needed_lines <= lines_left");
}

void ProcessRows_cold_7()
{
  __assert_rtn("EmitRescaledRowsRGBA", "vp8l_dec.c", 637, "lines_imported == needed_lines");
}

void ProcessRows_cold_8()
{
}

void ProcessRows_cold_9()
{
}

void AccumulateHCode_cold_1()
{
  __assert_rtn("AccumulateHCode", "vp8l_dec.c", 232, "huff->bits <= HUFFMAN_TABLE_BITS");
}

void ExtractPalettedAlphaRows_cold_1()
{
  __assert_rtn("ExtractPalettedAlphaRows", "vp8l_dec.c", 896, "last_row <= dec->io_->crop_bottom");
}

void ExtractPalettedAlphaRows_cold_2()
{
  __assert_rtn("ExtractPalettedAlphaRows", "vp8l_dec.c", 905, "transform->type_ == COLOR_INDEXING_TRANSFORM");
}

void ExtractPalettedAlphaRows_cold_3()
{
  __assert_rtn("ExtractPalettedAlphaRows", "vp8l_dec.c", 904, "dec->next_transform_ == 1");
}

void AlphaApplyFilter_cold_1()
{
  __assert_rtn("AlphaApplyFilter", "vp8l_dec.c", 877, "WebPUnfilters[alph_dec->filter_] != NULL");
}

void CopyBlock32b_cold_1()
{
  __assert_rtn("CopySmallPattern32b", "vp8l_dec.c", 1004, "0 == ((uintptr_t)dst & 7)");
}

uint64_t WebPRescalerInit(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, char *a9)
{
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = a5;
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a4;
  *(_DWORD *)(a1 + 80) = a7;
  *(_DWORD *)(a1 + 4) = a3 < (int)a6;
  *(_DWORD *)(a1 + 8) = a8;
  *(_DWORD *)a1 = a2 < a5;
  if (a2 >= a5) {
    int v9 = a2;
  }
  else {
    int v9 = a5 - 1;
  }
  if (a2 >= a5) {
    int v10 = a5;
  }
  else {
    int v10 = a2 - 1;
  }
  *(_DWORD *)(a1 + 36) = v9;
  *(_DWORD *)(a1 + 40) = v10;
  if (a2 >= a5) {
    *(_DWORD *)(a1 + 12) = 0x100000000uLL / a5;
  }
  BOOL v11 = a3 < (int)a6;
  int v12 = a3 - v11;
  int v13 = a6 - v11;
  *(_DWORD *)(a1 + 28) = v12;
  *(_DWORD *)(a1 + 32) = v13;
  if (a3 >= (int)a6)
  {
    unint64_t v14 = (a6 << 32) / (unint64_t)(v12 * (uint64_t)v9);
    if (v14 >= 0x100000000) {
      LODWORD(v14) = 0;
    }
    *(_DWORD *)(a1 + 20) = v14;
    *(_DWORD *)(a1 + 24) = v12;
  }
  else
  {
    *(_DWORD *)(a1 + 24) = v13;
    int v13 = v9;
  }
  *(_DWORD *)(a1 + 16) = 0x100000000uLL / v13;
  *(void *)(a1 + 88) = a9;
  *(void *)(a1 + 96) = &a9[4 * a8 * a5];
  bzero(a9, 8 * a5 * (uint64_t)a8);
  WebPRescalerDspInit();
  return 1;
}

uint64_t WebPRescalerGetScaledDimensions(int a1, int a2, _DWORD *a3, _DWORD *a4)
{
  if (!a3) {
    WebPRescalerGetScaledDimensions_cold_1();
  }
  if (!a4) {
    WebPRescalerGetScaledDimensions_cold_2();
  }
  LODWORD(v4) = *a3;
  LODWORD(v5) = *a4;
  if (a2 >= 1 && !v4) {
    unint64_t v4 = ((unint64_t)a2 + (int)v5 * (uint64_t)a1 - 1) / a2;
  }
  if (a1 >= 1 && !v5) {
    unint64_t v5 = ((unint64_t)a1 + (int)v4 * (uint64_t)a2 - 1) / a1;
  }
  if ((v4 - 0x40000000) < 0xC0000001 || (int)v5 < 1 || (int)v5 > 0x3FFFFFFF) {
    return 0;
  }
  *a3 = v4;
  *a4 = v5;
  return 1;
}

uint64_t WebPRescaleNeededLines(uint64_t a1, int a2)
{
  int v2 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 32) - 1) / *(_DWORD *)(a1 + 32);
  if (v2 >= a2) {
    return a2;
  }
  else {
    return v2;
  }
}

uint64_t WebPRescalerImport(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((int)a2 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a4;
  while (*(_DWORD *)(a1 + 64) >= *(_DWORD *)(a1 + 56) || *(int *)(a1 + 24) >= 1)
  {
    if (*(_DWORD *)(a1 + 4)) {
      *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
    }
    WebPRescalerImportRow((_DWORD *)a1);
    if (!*(_DWORD *)(a1 + 4) && *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 8) >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v11 = *(void *)(a1 + 88);
      uint64_t v10 = *(void *)(a1 + 96);
      do
      {
        *(_DWORD *)(v11 + 4 * v9) += *(_DWORD *)(v10 + 4 * v9);
        ++v9;
      }
      while (v9 < *(int *)(a1 + 52) * (uint64_t)*(int *)(a1 + 8));
    }
    ++*(_DWORD *)(a1 + 60);
    a3 += v8;
    uint64_t v7 = (v7 + 1);
    *(_DWORD *)(a1 + 24) -= *(_DWORD *)(a1 + 32);
    if (v7 == a2) {
      return a2;
    }
  }
  return v7;
}

uint64_t WebPRescalerExport(int *a1)
{
  if (a1[16] >= a1[14]) {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    if (a1[6] > 0) {
      break;
    }
    WebPRescalerExportRow((uint64_t)a1);
    uint64_t v2 = (v2 + 1);
  }
  while (a1[16] < a1[14]);
  return v2;
}

void WebPRescalerGetScaledDimensions_cold_1()
{
  __assert_rtn("WebPRescalerGetScaledDimensions", "rescaler_utils.c", 88, "scaled_width != NULL");
}

void WebPRescalerGetScaledDimensions_cold_2()
{
  __assert_rtn("WebPRescalerGetScaledDimensions", "rescaler_utils.c", 89, "scaled_height != NULL");
}

uint64_t WebPInitCustomIo(uint64_t result, void *a2)
{
  a2[7] = result;
  a2[8] = CustomPut;
  a2[9] = CustomSetup;
  a2[10] = CustomTeardown;
  return result;
}

uint64_t CustomPut(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    CustomPut_cold_1();
  }
  if (*(int *)(a1 + 12) < 1 || *(_DWORD *)(a1 + 16) < 1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(v4 + 88))(a1, *(void *)(a1 + 56));
  int v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 96);
  if (v7) {
    v7(a1, v4, v5);
  }
  *(_DWORD *)(v4 + 32) += v6;
  return 1;
}

uint64_t CustomSetup(uint64_t a1)
{
  uint64_t v2 = *(int ***)(a1 + 56);
  unsigned int v3 = **v2;
  BOOL v4 = v3 - 1 < 0xC && ((0x81Du >> (v3 - 1)) & 1) != 0 || v3 - 7 < 4;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  uint64_t v5 = (uint64_t *)(v2 + 10);
  if (v4) {
    unsigned int v6 = 11;
  }
  else {
    unsigned int v6 = 12;
  }
  uint64_t result = WebPIoInitFromOptions(v2[5], (signed int *)a1, v6);
  if (result)
  {
    if (v3 - 11 >= 0xFFFFFFFC && v4) {
      WebPInitUpsamplers();
    }
    if (!*(_DWORD *)(a1 + 136))
    {
      if (v3 <= 0xA)
      {
        WebPInitSamplers();
        v2[11] = (int *)EmitSampledRGB;
        if (*(_DWORD *)(a1 + 88))
        {
          uint64_t v14 = *(int *)(a1 + 12);
          int v15 = v14 + 1;
          uint64_t result = (uint64_t)WebPSafeMalloc(1uLL, ((v14 + 1) & 0xFFFFFFFFFFFFFFFELL) + v14);
          *uint64_t v5 = result;
          if (!result) {
            return result;
          }
          uint64_t v16 = result + *(int *)(a1 + 12);
          v2[1] = (int *)result;
          v2[2] = (int *)v16;
          v2[3] = (int *)(v16 + (v15 >> 1));
          v2[11] = (int *)EmitFancyRGB;
          WebPInitUpsamplers();
        }
      }
      else
      {
        v2[11] = (int *)EmitYUV;
      }
      if (!v4) {
        return 1;
      }
      if (v3 != 10 && v3 != 5)
      {
        uint64_t v42 = (int *)EmitAlphaRGB;
        if (v3 > 0xA) {
          uint64_t v42 = (int *)EmitAlphaYUV;
        }
        v2[12] = v42;
        if (v3 > 0xA) {
          return 1;
        }
        goto LABEL_35;
      }
      int v18 = (int *)EmitAlphaRGBA4444;
      goto LABEL_34;
    }
    uint64_t v9 = (unsigned int *)*v2;
    int v10 = **v2;
    unsigned int v11 = v10 - 1;
    if (v3 <= 0xA)
    {
      BOOL v13 = (v11 >= 0xC || ((0x81Du >> v11) & 1) == 0) && (v10 - 11) < 0xFFFFFFFC;
      uint64_t v29 = *(unsigned int *)(a1 + 144);
      uint64_t v30 = *(int *)(a1 + 140);
      int v46 = *(_DWORD *)(a1 + 12);
      int v47 = *(_DWORD *)(a1 + 16);
      uint64_t v31 = 2 * v30;
      uint64_t v32 = 3;
      if (!v13) {
        uint64_t v32 = 4;
      }
      uint64_t v33 = v31 * v32;
      uint64_t v34 = v32 * v30 + 4 * v31 * v32;
      uint64_t result = (uint64_t)WebPSafeMalloc(1uLL, v34 + 104 * v32 + 31);
      *uint64_t v5 = result;
      if (result)
      {
        uint64_t v35 = (char *)result;
        uint64_t v36 = result + 4 * v33;
        unint64_t v37 = (result + v34 + 31) & 0xFFFFFFFFFFFFFFE0;
        v2[6] = (int *)v37;
        v2[7] = (int *)(v37 + 104);
        unint64_t v38 = v37 + 312;
        if (v13) {
          unint64_t v38 = 0;
        }
        v2[8] = (int *)(v37 + 208);
        v2[9] = (int *)v38;
        uint64_t result = WebPRescalerInit(v37, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v36, v30, v29, 0, 1, v35);
        if (result)
        {
          uint64_t result = WebPRescalerInit((uint64_t)v2[7], (v46 + 1) >> 1, (v47 + 1) >> 1, v36 + v30, v30, v29, 0, 1, &v35[8 * v30]);
          if (result)
          {
            uint64_t result = WebPRescalerInit((uint64_t)v2[8], (v46 + 1) >> 1, (v47 + 1) >> 1, v36 + 2 * v30, v30, v29, 0, 1, &v35[16 * v30]);
            if (result)
            {
              v2[11] = (int *)EmitRescaledRGB;
              WebPInitYUV444Converters();
              if (v13) {
                return 1;
              }
              uint64_t result = WebPRescalerInit((uint64_t)v2[9], *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v36 + 3 * (int)v30, v30, v29, 0, 1, &v35[24 * (int)v30]);
              if (result)
              {
                v2[12] = (int *)EmitRescaledAlphaRGB;
                int v39 = **v2;
                BOOL v40 = v39 == 10 || v39 == 5;
                int v41 = ExportAlpha;
                if (v40) {
                  int v41 = ExportAlphaRGBA4444;
                }
                v2[13] = (int *)v41;
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
    else
    {
      BOOL v12 = (v11 >= 0xC || ((0x81Du >> v11) & 1) == 0) && (v10 - 11) < 0xFFFFFFFC;
      uint64_t v19 = *(unsigned int *)(a1 + 144);
      uint64_t v20 = *(int *)(a1 + 140);
      int v21 = v20 + 1;
      int v44 = *(_DWORD *)(a1 + 12);
      int v45 = *(_DWORD *)(a1 + 16);
      int v43 = (v20 + 1) & 0xFFFFFFFE;
      uint64_t v22 = 8 * v20;
      uint64_t v23 = 447;
      if (v12)
      {
        uint64_t v23 = 343;
        uint64_t v22 = 0;
      }
      uint64_t v24 = v22 + 4 * (2 * v20 + 2 * v43);
      uint64_t result = (uint64_t)WebPSafeMalloc(1uLL, v24 + v23);
      *uint64_t v5 = result;
      if (result)
      {
        int v25 = (char *)result;
        unint64_t v26 = (result + v24 + 31) & 0xFFFFFFFFFFFFFFE0;
        v2[6] = (int *)v26;
        v2[7] = (int *)(v26 + 104);
        unint64_t v27 = v26 + 312;
        if (v12) {
          unint64_t v27 = 0;
        }
        v2[8] = (int *)(v26 + 208);
        v2[9] = (int *)v27;
        uint64_t result = WebPRescalerInit(v26, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *((void *)v9 + 2), v20, v19, v9[12], 1, v25);
        if (result)
        {
          uint64_t v28 = &v25[8 * v20];
          uint64_t result = WebPRescalerInit((uint64_t)v2[7], (v44 + 1) >> 1, (v45 + 1) >> 1, *((void *)v9 + 3), v21 >> 1, (((int)v19 + 1) >> 1), v9[13], 1, v28);
          if (result)
          {
            uint64_t result = WebPRescalerInit((uint64_t)v2[8], (v44 + 1) >> 1, (v45 + 1) >> 1, *((void *)v9 + 4), v21 >> 1, (((int)v19 + 1) >> 1), v9[14], 1, &v28[4 * v43]);
            if (result)
            {
              v2[11] = (int *)EmitRescaledYUV;
              if (v12) {
                return 1;
              }
              uint64_t result = WebPRescalerInit((uint64_t)v2[9], *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *((void *)v9 + 5), v20, v19, v9[15], 1, &v28[8 * v43]);
              if (result)
              {
                int v18 = (int *)EmitRescaledAlphaYUV;
LABEL_34:
                v2[12] = v18;
LABEL_35:
                WebPInitAlphaProcessing();
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void CustomTeardown(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  _TIFFfree(*(void **)(v1 + 80));
  *(void *)(v1 + 80) = 0;
}

uint64_t EmitSampledRGB(uint64_t a1, unsigned int **a2)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t EmitFancyRGB(uint64_t a1, void **a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  size_t v4 = *(int *)(a1 + 12);
  uint64_t v29 = (int *)*a2;
  uint64_t v5 = *((int *)*a2 + 6);
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *((void *)*a2 + 2) + (int)v5 * (uint64_t)v6;
  uint64_t v8 = (void (*)(void *, uint64_t, void *, void *, char *, char *, uint64_t, uint64_t, unint64_t))WebPUpsamplers[*(unsigned int *)*a2];
  uint64_t v9 = *(char **)(a1 + 24);
  int v10 = *(char **)(a1 + 32);
  unsigned int v11 = *(char **)(a1 + 40);
  unsigned int v12 = v4 + 2;
  if ((int)v4 >= -1) {
    unsigned int v12 = v4 + 1;
  }
  unint64_t v27 = (void (*)(uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, uint64_t, _DWORD))WebPUpsamplers[*(unsigned int *)*a2];
  if (v6)
  {
    v8(a2[1], (uint64_t)v9, a2[2], a2[3], v10, v11, v7 - v5, v7, __PAIR64__(v12, v4));
    int v13 = v3 + 1;
  }
  else
  {
    v8(v9, 0, v10, v11, v10, v11, v7, 0, __PAIR64__(v12, v4));
    int v13 = v3;
  }
  unsigned int v28 = v13;
  uint64_t v14 = (v6 + v3);
  if (v3 < 3)
  {
    int v18 = v10;
    uint64_t v19 = v11;
  }
  else
  {
    int v15 = v6 + 2;
    do
    {
      uint64_t v17 = *(int *)(a1 + 48);
      uint64_t v16 = *(int *)(a1 + 52);
      int v18 = &v10[v16];
      uint64_t v19 = &v11[v16];
      uint64_t v20 = v29[6];
      v7 += 2 * v20;
      v9 += 2 * v17;
      int v21 = v11;
      uint64_t v22 = v14;
      v27((uint64_t)&v9[-v17], (uint64_t)v9, v10, v21, v18, v19, v7 - v20, v7, v4);
      uint64_t v14 = v22;
      v15 += 2;
      unsigned int v11 = v19;
      int v10 = v18;
    }
    while (v15 < (int)v14);
  }
  uint64_t v23 = &v9[*(int *)(a1 + 48)];
  if (*(_DWORD *)(a1 + 128) + (int)v14 >= *(_DWORD *)(a1 + 132))
  {
    if ((v14 & 1) == 0) {
      v27((uint64_t)v23, 0, v18, v19, v18, v19, v7 + v29[6], 0, v4);
    }
    return v28;
  }
  else
  {
    memcpy(a2[1], v23, v4);
    memcpy(a2[2], v18, v25 >> 1);
    memcpy(a2[3], v19, v25 >> 1);
    return v28 - 1;
  }
}

uint64_t EmitYUV(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *(_DWORD *)(a1 + 12);
  int v5 = *(_DWORD *)(a1 + 8);
  int v6 = (char *)(*(void *)(*a2 + 24) + *(int *)(*a2 + 52) * (uint64_t)(v5 >> 1));
  uint64_t v7 = (char *)(*(void *)(*a2 + 32) + *(int *)(*a2 + 56) * (uint64_t)(v5 >> 1));
  int v8 = *(_DWORD *)(a1 + 16);
  int v9 = v4 + 2;
  if (v4 >= -1) {
    int v9 = v4 + 1;
  }
  int v10 = v9 >> 1;
  int v11 = v8 + 2;
  if (v8 >= -1) {
    int v11 = v8 + 1;
  }
  int v12 = v11 >> 1;
  WebPCopyPlane(*(char **)(a1 + 24), *(_DWORD *)(a1 + 48), (char *)(*(void *)(*a2 + 16) + *(int *)(*a2 + 48) * (uint64_t)v5), *(_DWORD *)(*a2 + 48), v4, v8);
  WebPCopyPlane(*(char **)(a1 + 32), *(_DWORD *)(a1 + 52), v6, *(_DWORD *)(v3 + 52), v10, v12);
  WebPCopyPlane(*(char **)(a1 + 40), *(_DWORD *)(a1 + 52), v7, *(_DWORD *)(v3 + 56), v10, v12);
  return *(unsigned int *)(a1 + 16);
}

uint64_t EmitAlphaRGBA4444(int *a1, int **a2, int a3)
{
  uint64_t v22 = (unsigned __int8 *)*((void *)a1 + 19);
  if (v22)
  {
    uint64_t v5 = a1[3];
    int v6 = *a2;
    int v7 = **a2;
    int v21 = 0;
    int AlphaSourceRow = GetAlphaSourceRow((unsigned int *)a1, &v22, (unsigned int *)&v21);
    int v9 = v6[6];
    uint64_t v10 = *((void *)v6 + 2) + v9 * (uint64_t)AlphaSourceRow;
    int v11 = v21;
    if (v21 < 1)
    {
      int v15 = 15;
    }
    else
    {
      int v12 = 0;
      int v13 = v22;
      uint64_t v14 = (unsigned char *)(v10 + 1);
      int v15 = 15;
      do
      {
        if ((int)v5 >= 1)
        {
          uint64_t v16 = v5;
          uint64_t v17 = v14;
          int v18 = v13;
          do
          {
            unsigned int v19 = *v18++;
            *uint64_t v17 = *v17 & 0xF0 | (v19 >> 4);
            v17 += 2;
            v15 &= v19 >> 4;
            --v16;
          }
          while (v16);
          int v9 = v6[6];
        }
        v13 += *a1;
        v14 += v9;
        ++v12;
      }
      while (v12 != v11);
    }
    if (v11 != a3) {
      EmitAlphaRGBA4444_cold_1();
    }
    if (v15 != 15 && (v7 - 11) >= 0xFFFFFFFC) {
      WebPApplyAlphaMultiply4444();
    }
  }
  return 0;
}

uint64_t EmitAlphaRGB(unsigned int *a1, int **a2, uint64_t a3)
{
  uint64_t v18 = *((void *)a1 + 19);
  if (v18)
  {
    uint64_t v5 = a1[3];
    int v6 = *a2;
    int v7 = **a2;
    BOOL v9 = v7 == 4 || v7 == 9;
    unsigned int v17 = 0;
    uint64_t v10 = *((void *)v6 + 2) + v6[6] * (uint64_t)(int)GetAlphaSourceRow(a1, &v18, &v17);
    uint64_t v11 = 3;
    if (v9) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *a1;
    unsigned int v13 = v17;
    int v14 = WebPDispatchAlpha(v18, v12, v5, v17, v10 + v11);
    if (v13 != a3) {
      EmitAlphaRGB_cold_1();
    }
    if ((v7 - 11) >= 0xFFFFFFFC && v14 != 0) {
      WebPApplyAlphaMultiply(v10, v9, v5, a3, v6[6]);
    }
  }
  return 0;
}

uint64_t EmitAlphaYUV(int *a1, uint64_t *a2, int a3)
{
  if (a1[4] != a3) {
    EmitAlphaYUV_cold_1();
  }
  int v3 = a3;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*a2 + 40);
  size_t v7 = a1[3];
  uint64_t v8 = *(int *)(*a2 + 60);
  BOOL v9 = (char *)(v6 + (int)v8 * (uint64_t)a1[2]);
  uint64_t v10 = (char *)*((void *)a1 + 19);
  if (v10)
  {
    if (a3 >= 1)
    {
      do
      {
        memcpy(v9, v10, v7);
        v10 += *a1;
        v9 += *(int *)(v5 + 60);
        --v3;
      }
      while (v3);
    }
  }
  else if (a3 >= 1 && v6)
  {
    do
    {
      memset(v9, 255, v7);
      v9 += v8;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t EmitRescaledRGB(uint64_t a1, unsigned int **a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2 < 1) {
    return 0;
  }
  LODWORD(v5) = 0;
  int v6 = 0;
  int v7 = 0;
  int v20 = *(_DWORD *)(a1 + 16);
  int v21 = (v2 + 1) >> 1;
  uint64_t v8 = (int *)a2[6];
  do
  {
    int v9 = WebPRescalerImport((uint64_t)v8, (v2 - v7), *(void *)(a1 + 24) + *(int *)(a1 + 48) * (uint64_t)v7, *(_DWORD *)(a1 + 48));
    uint64_t v10 = (v21 - v6);
    if (WebPRescaleNeededLines((uint64_t)a2[7], v21 - v6))
    {
      int v11 = WebPRescalerImport((uint64_t)a2[7], v10, *(void *)(a1 + 32) + *(int *)(a1 + 52) * (uint64_t)v6, *(_DWORD *)(a1 + 52));
      if (v11 != WebPRescalerImport((uint64_t)a2[8], v10, *(void *)(a1 + 40) + *(int *)(a1 + 52) * (uint64_t)v6, *(_DWORD *)(a1 + 52)))EmitRescaledRGB_cold_3(); {
      v6 += v11;
      }
    }
    int v22 = v9;
    uint64_t v8 = (int *)a2[6];
    if (v8[16] >= v8[14])
    {
      int v12 = 0;
    }
    else
    {
      int v12 = 0;
      int v13 = *((_DWORD *)a2 + 8) + v5;
      uint64_t v14 = (uint64_t)*a2;
      int v15 = (void (*)(void, void, void, uint64_t, void))WebPYUV444Converters[**a2];
      uint64_t v16 = *((void *)*a2 + 2) + (int)(*a2)[6] * (uint64_t)v13;
      do
      {
        if (v8[6] > 0) {
          break;
        }
        unsigned int v17 = a2[7];
        if ((int)v17[16] >= (int)v17[14]) {
          break;
        }
        int v18 = v17[6];
        if (v18 > 0) {
          break;
        }
        if (v13 + v12 >= (int)(*a2)[2]) {
          EmitRescaledRGB_cold_2();
        }
        if (v18 != a2[8][6]) {
          EmitRescaledRGB_cold_1();
        }
        WebPRescalerExportRow((uint64_t)v8);
        WebPRescalerExportRow((uint64_t)a2[7]);
        WebPRescalerExportRow((uint64_t)a2[8]);
        v15(*((void *)a2[6] + 9), *((void *)a2[7] + 9), *((void *)a2[8] + 9), v16, a2[6][13]);
        v16 += *(int *)(v14 + 24);
        ++v12;
        uint64_t v8 = (int *)a2[6];
      }
      while (v8[16] < v8[14]);
    }
    v7 += v22;
    uint64_t v5 = (v12 + v5);
    int v2 = v20;
  }
  while (v7 < v20);
  return v5;
}

uint64_t EmitRescaledAlphaRGB(int *a1, uint64_t a2, uint64_t a3)
{
  if (*((void *)a1 + 19))
  {
    uint64_t v3 = a3;
    if ((int)a3 >= 1)
    {
      uint64_t v6 = *(void *)(a2 + 72);
      int v7 = *(_DWORD *)(a2 + 32) + a3;
      do
      {
        WebPRescalerImport(v6, (a1[2] - *(_DWORD *)(v6 + 60) + a1[4]), *((void *)a1 + 19) + (*(int *)(v6 + 60) - (uint64_t)a1[2]) * *a1, *a1);
        int v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a2 + 104))(a2, (v7 - v3), v3);
        BOOL v9 = __OFSUB__(v3, v8);
        uint64_t v3 = (v3 - v8);
      }
      while (!(((int)v3 < 0) ^ v9 | (v3 == 0)));
    }
  }
  return 0;
}

uint64_t ExportAlphaRGBA4444(int **a1, int a2, int a3)
{
  int v4 = a1[9];
  if (v4[16] >= v4[14]) {
    return 0;
  }
  int v7 = *a1;
  uint64_t v8 = (*a1)[6];
  uint64_t v9 = *((void *)*a1 + 2) + (int)v8 * (uint64_t)a2;
  int v10 = **a1;
  uint64_t v11 = v4[13];
  uint64_t v12 = 0;
  if (v4[6] > 0 || a3 < 1)
  {
    int v15 = 15;
  }
  else
  {
    uint64_t v14 = (unsigned char *)(v9 + 1);
    int v15 = 15;
    do
    {
      if ((int)v12 + a2 >= (*a1)[2]) {
        ExportAlphaRGBA4444_cold_1();
      }
      WebPRescalerExportRow((uint64_t)v4);
      if ((int)v11 >= 1)
      {
        uint64_t v16 = 0;
        unsigned int v17 = v14;
        do
        {
          unsigned int v18 = *(unsigned __int8 *)(*((void *)a1[9] + 9) + v16);
          *unsigned int v17 = *v17 & 0xF0 | (*(unsigned char *)(*((void *)a1[9] + 9) + v16) >> 4);
          v17 += 2;
          v15 &= v18 >> 4;
          ++v16;
        }
        while (v11 != v16);
      }
      uint64_t v8 = v7[6];
      uint64_t v12 = (v12 + 1);
      int v4 = a1[9];
      if (v4[16] >= v4[14]) {
        break;
      }
      v14 += (int)v8;
    }
    while (v4[6] <= 0 && (int)v12 < a3);
  }
  if ((v10 - 7) <= 3 && v15 != 15) {
    WebPApplyAlphaMultiply4444(v9, v11, v12, v8);
  }
  return v12;
}

uint64_t ExportAlpha(int **a1, int a2, int a3)
{
  uint64_t v5 = *a1;
  int v6 = **a1;
  uint64_t v8 = v6 == 4 || v6 == 9;
  uint64_t v9 = a1[9];
  if (v9[16] >= v9[14]) {
    return 0;
  }
  uint64_t v11 = v5[6];
  uint64_t v12 = *((void *)v5 + 2) + (int)v11 * (uint64_t)a2;
  uint64_t v13 = v9[13];
  uint64_t v14 = 0;
  if (v9[6] > 0 || a3 < 1)
  {
    BOOL v16 = 0;
  }
  else
  {
    int v17 = 0;
    unsigned int v24 = v8;
    uint64_t v18 = 3;
    if (v8) {
      uint64_t v18 = 0;
    }
    uint64_t v23 = *((void *)v5 + 2) + (int)v11 * (uint64_t)a2;
    uint64_t v19 = v12 + v18;
    do
    {
      if (a2 + (int)v14 >= (*a1)[2]) {
        ExportAlpha_cold_1();
      }
      WebPRescalerExportRow((uint64_t)v9);
      v17 |= WebPDispatchAlpha(*((void *)a1[9] + 9), 0, v13, 1, v19);
      uint64_t v11 = v5[6];
      uint64_t v14 = (v14 + 1);
      uint64_t v9 = a1[9];
      if (v9[16] >= v9[14]) {
        break;
      }
      v19 += (int)v11;
    }
    while (v9[6] <= 0 && (int)v14 < a3);
    BOOL v16 = v17 != 0;
    uint64_t v8 = v24;
    uint64_t v12 = v23;
  }
  if ((v6 - 7) <= 3 && v16) {
    WebPApplyAlphaMultiply(v12, v8, v13, v14, v11);
  }
  return v14;
}

uint64_t EmitRescaledYUV(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = *(int **)(a2 + 48);
  unsigned int v6 = **(_DWORD **)a2;
  BOOL v7 = v6 > 0xC || ((1 << v6) & 0x103A) == 0;
  if (!v7 || v6 - 11 >= 0xFFFFFFFC)
  {
    uint64_t v8 = *(void *)(a1 + 152);
    if (v8) {
      WebPMultRows(*(void *)(a1 + 24), *(_DWORD *)(a1 + 48), v8, *(_DWORD *)a1, *(unsigned int *)(a1 + 12), v4, 0);
    }
  }
  uint64_t v9 = (((int)v4 + 1) >> 1);
  uint64_t v10 = Rescale(*(void *)(a1 + 24), *(_DWORD *)(a1 + 48), v4, v5);
  Rescale(*(void *)(a1 + 32), *(_DWORD *)(a1 + 52), v9, *(int **)(a2 + 56));
  Rescale(*(void *)(a1 + 40), *(_DWORD *)(a1 + 52), v9, *(int **)(a2 + 64));
  return v10;
}

uint64_t EmitRescaledAlphaYUV(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 40);
  int v6 = *((_DWORD *)a2 + 8);
  uint64_t v7 = *(int *)(*a2 + 60);
  uint64_t v8 = (char *)(v5 + (int)v7 * (uint64_t)v6);
  if (*(void *)(a1 + 152))
  {
    uint64_t v10 = *(void *)(v4 + 16);
    int v11 = *(_DWORD *)(v4 + 48);
    if (Rescale(*(void *)(a1 + 152), *(_DWORD *)a1, *(unsigned int *)(a1 + 16), (int *)a2[9]) != a3) {
      EmitRescaledAlphaYUV_cold_2();
    }
    if (v3 >= 1) {
      WebPMultRows(v10 + v11 * (uint64_t)v6, *(_DWORD *)(v4 + 48), (uint64_t)v8, *(_DWORD *)(v4 + 60), *(unsigned int *)(a2[9] + 52), v3, 1);
    }
  }
  else if (v5)
  {
    if (v6 + a3 > *(_DWORD *)(a1 + 144)) {
      EmitRescaledAlphaYUV_cold_1();
    }
    if (a3 >= 1)
    {
      size_t v12 = *(int *)(a1 + 140);
      do
      {
        memset(v8, 255, v12);
        v8 += v7;
        --v3;
      }
      while (v3);
    }
  }
  return 0;
}

uint64_t Rescale(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  if ((int)a3 < 1) {
    return 0;
  }
  uint64_t v5 = a3;
  LODWORD(v8) = 0;
  do
  {
    int v9 = WebPRescalerImport((uint64_t)a4, v5, a1, a2);
    a1 += v9 * a2;
    uint64_t v5 = (v5 - v9);
    uint64_t v8 = WebPRescalerExport(a4) + v8;
  }
  while ((int)v5 > 0);
  return v8;
}

uint64_t GetAlphaSourceRow(unsigned int *a1, void *a2, unsigned int *a3)
{
  uint64_t result = a1[2];
  unsigned int v5 = a1[4];
  *a3 = v5;
  if (a1[22])
  {
    if (result)
    {
      uint64_t result = (result - 1);
      *a2 -= (int)*a1;
    }
    else
    {
      *a3 = v5 - 1;
    }
    unsigned int v6 = a1[32];
    unsigned int v7 = a1[33];
    int v8 = a1[2] + v6 + a1[4];
    if (v8 == v7) {
      *a3 = v8 - (v6 + result);
    }
  }
  return result;
}

void CustomPut_cold_1()
{
}

void EmitAlphaRGBA4444_cold_1()
{
  __assert_rtn("EmitAlphaRGBA4444", "io_dec.c", 228, "expected_num_lines_out == num_rows");
}

void EmitAlphaRGB_cold_1()
{
  __assert_rtn("EmitAlphaRGB", "io_dec.c", 190, "expected_num_lines_out == num_rows");
}

void EmitAlphaYUV_cold_1()
{
  __assert_rtn("EmitAlphaYUV", "io_dec.c", 134, "expected_num_lines_out == mb_h");
}

void EmitRescaledRGB_cold_1()
{
  __assert_rtn("ExportRGB", "io_dec.c", 372, "p->scaler_u->y_accum == p->scaler_v->y_accum");
}

void EmitRescaledRGB_cold_2()
{
}

void EmitRescaledRGB_cold_3()
{
  __assert_rtn("EmitRescaledRGB", "io_dec.c", 402, "u_lines_in == v_lines_in");
}

void ExportAlphaRGBA4444_cold_1()
{
}

void ExportAlpha_cold_1()
{
}

void EmitRescaledAlphaYUV_cold_1()
{
  __assert_rtn("EmitRescaledAlphaYUV", "io_dec.c", 285, "p->last_y + expected_num_lines_out <= io->scaled_height");
}

void EmitRescaledAlphaYUV_cold_2()
{
  __assert_rtn("EmitRescaledAlphaYUV", "io_dec.c", 278, "expected_num_lines_out == num_lines_out");
}

void VP8FiltersInit()
{
  if ((BOOL (*)(int))VP8FiltersInit_VP8FiltersInit_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPUnfilters[0] = (uint64_t)NoneUnfilter_C;
    qword_1E9104888 = (uint64_t)GradientUnfilter_C;
    WebPFilters = 0;
    VP8FiltersInitNEON();
    if (!WebPUnfilters[0]) {
      VP8FiltersInit_cold_1();
    }
    if (!qword_1E9104878) {
      VP8FiltersInit_cold_2();
    }
    if (!qword_1E9104880) {
      VP8FiltersInit_cold_3();
    }
    if (!qword_1E9104888) {
      VP8FiltersInit_cold_4();
    }
    if (!qword_1E9104858) {
      VP8FiltersInit_cold_5();
    }
    if (!qword_1E9104860) {
      VP8FiltersInit_cold_6();
    }
    if (!qword_1E9104868) {
      VP8FiltersInit_cold_7();
    }
    VP8FiltersInit_VP8FiltersInit_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

void *NoneUnfilter_C(int a1, const void *a2, void *__dst, int a4)
{
  if (__dst != a2) {
    return memcpy(__dst, a2, a4);
  }
  return result;
}

unsigned __int8 *GradientUnfilter_C(unsigned __int8 *result, char *a2, unsigned __int8 *a3, int a4)
{
  if (result)
  {
    if (a4 >= 1)
    {
      unsigned __int8 v4 = *result;
      uint64_t v5 = a4;
      unsigned __int8 v6 = *result;
      do
      {
        int v8 = *result++;
        int v7 = v8;
        LOBYTE(v8) = *a2++;
        char v9 = v8;
        int v10 = (v7 - v6 + v4) & ~((v7 - v6 + v4) >> 31);
        if (v10 >= 255) {
          LOBYTE(v10) = -1;
        }
        unsigned __int8 v4 = v9 + v10;
        *a3++ = v4;
        unsigned __int8 v6 = v7;
        --v5;
      }
      while (v5);
    }
  }
  else if (a4 >= 1)
  {
    unsigned __int8 v11 = 0;
    uint64_t v12 = a4;
    do
    {
      char v13 = *a2++;
      v11 += v13;
      *a3++ = v11;
      --v12;
    }
    while (v12);
  }
  return result;
}

void VP8FiltersInit_cold_1()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 288, "WebPUnfilters[WEBP_FILTER_NONE] != NULL");
}

void VP8FiltersInit_cold_2()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 289, "WebPUnfilters[WEBP_FILTER_HORIZONTAL] != NULL");
}

void VP8FiltersInit_cold_3()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 290, "WebPUnfilters[WEBP_FILTER_VERTICAL] != NULL");
}

void VP8FiltersInit_cold_4()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 291, "WebPUnfilters[WEBP_FILTER_GRADIENT] != NULL");
}

void VP8FiltersInit_cold_5()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 292, "WebPFilters[WEBP_FILTER_HORIZONTAL] != NULL");
}

void VP8FiltersInit_cold_6()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 293, "WebPFilters[WEBP_FILTER_VERTICAL] != NULL");
}

void VP8FiltersInit_cold_7()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 294, "WebPFilters[WEBP_FILTER_GRADIENT] != NULL");
}

unsigned int *WebPMultARGBRow_C(unsigned int *result, int a2, int a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = a2;
    do
    {
      unsigned int v4 = HIBYTE(*result);
      if (v4 != 255)
      {
        if (v4)
        {
          int v6 = 65793 * v4;
          unsigned int v7 = 0xFF000000 / v4;
          if (!a3) {
            unsigned int v7 = v6;
          }
          int8x8_t v8 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vmla_s32((int32x2_t)0x80000000800000, vdup_n_s32(v7), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*result), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF00000000FF00);
          unsigned int v5 = *result & 0xFF000000 | ((v7 * *result + 0x800000) >> 24) | v8.i32[0] | v8.i32[1];
        }
        else
        {
          unsigned int v5 = 0;
        }
        *uint64_t result = v5;
      }
      ++result;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned char *WebPMultRow_C(unsigned char *result, unsigned __int8 *a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    do
    {
      unsigned int v6 = *a2++;
      unsigned int v5 = v6;
      if (v6 != 255)
      {
        if (v5)
        {
          int v7 = 65793 * v5;
          unsigned int v8 = 0xFF000000 / v5;
          if (!a4) {
            unsigned int v8 = v7;
          }
          *uint64_t result = (v8 * *result + 0x800000) >> 24;
        }
        else
        {
          *uint64_t result = 0;
        }
      }
      ++result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WebPMultARGBRows(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 >= 1)
  {
    int v6 = a4;
    uint64_t v8 = result;
    uint64_t v9 = a2;
    do
    {
      uint64_t result = WebPMultARGBRow(v8, a3, a5);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t WebPMultRows(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  if (a6 >= 1)
  {
    int v8 = a6;
    uint64_t v11 = result;
    uint64_t v12 = a2;
    uint64_t v13 = a4;
    do
    {
      uint64_t result = WebPMultRow(v11, a3, a5, a7);
      v11 += v12;
      a3 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

void WebPInitAlphaProcessing()
{
  if ((uint64_t (*)())WebPInitAlphaProcessing_WebPInitAlphaProcessing_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPMultARGBRow = (uint64_t (*)(void, void, void))WebPMultARGBRow_C;
    WebPMultRow = (uint64_t (*)(void, void, void, void))WebPMultRow_C;
    WebPApplyAlphaMultiply4444 = ApplyAlphaMultiply_16b_C;
    WebPPackRGB = (uint64_t)PackRGB_C;
    WebPHasAlpha8b = (uint64_t)HasAlpha8b_C;
    WebPHasAlpha32b = (uint64_t)HasAlpha32b_C;
    WebPAlphaReplace = (uint64_t)AlphaReplace_C;
    WebPInitAlphaProcessingNEON();
    if (!WebPMultARGBRow) {
      WebPInitAlphaProcessing_cold_1();
    }
    if (!WebPMultRow) {
      WebPInitAlphaProcessing_cold_2();
    }
    if (!WebPApplyAlphaMultiply) {
      WebPInitAlphaProcessing_cold_3();
    }
    if (!WebPApplyAlphaMultiply4444) {
      WebPInitAlphaProcessing_cold_4();
    }
    if (!WebPDispatchAlpha) {
      WebPInitAlphaProcessing_cold_5();
    }
    if (!WebPDispatchAlphaToGreen) {
      WebPInitAlphaProcessing_cold_6();
    }
    if (!WebPExtractAlpha) {
      WebPInitAlphaProcessing_cold_7();
    }
    if (!WebPExtractGreen) {
      WebPInitAlphaProcessing_cold_8();
    }
    if (!WebPPackRGB) {
      WebPInitAlphaProcessing_cold_9();
    }
    if (!WebPHasAlpha8b) {
      WebPInitAlphaProcessing_cold_10();
    }
    if (!WebPHasAlpha32b) {
      WebPInitAlphaProcessing_cold_11();
    }
    if (!WebPAlphaReplace) {
      WebPInitAlphaProcessing_cold_12();
    }
    WebPInitAlphaProcessing_WebPInitAlphaProcessing_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

uint64_t ApplyAlphaMultiply_16b_C(uint64_t result, int a2, int a3, int a4)
{
  if (a3 >= 1)
  {
    do
    {
      if (a2 >= 1)
      {
        uint64_t v4 = 0;
        do
        {
          unsigned int v5 = (unsigned char *)(result + v4);
          unsigned int v6 = *(unsigned __int8 *)(result + v4 + 1);
          int v7 = 4369 * (v6 & 0xF);
          *unsigned int v5 = ((v7 * (*(unsigned char *)(result + v4) & 0xF0 | (*(unsigned __int8 *)(result + v4) >> 4))) >> 16) & 0xF0 | ((v7 * (*(unsigned char *)(result + v4) & 0xFu | (16 * *(unsigned char *)(result + v4)))) >> 20);
          v5[1] = ((v7 * (v6 & 0xF0 | (v6 >> 4))) >> 16) & 0xF0 | v6 & 0xF;
          v4 += 2;
        }
        while (2 * a2 != v4);
      }
      result += a4;
    }
    while (a3-- > 1);
  }
  return result;
}

uint64_t PackRGB_C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int *a6)
{
  if (a4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a4;
    do
    {
      *a6++ = (*(unsigned __int8 *)(a2 + v6) << 8) | (*(unsigned __int8 *)(result + v6) << 16) | *(unsigned __int8 *)(a3 + v6) | 0xFF000000;
      v6 += a5;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t HasAlpha8b_C(unsigned __int8 *a1, int a2)
{
  while (1)
  {
    BOOL v2 = __OFSUB__(a2--, 1);
    if (a2 < 0 != v2) {
      break;
    }
    int v3 = *a1++;
    if (v3 != 255) {
      return 1;
    }
  }
  return 0;
}

uint64_t HasAlpha32b_C(unsigned __int8 *a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  int v2 = a2 + 1;
  while (1)
  {
    int v3 = *a1;
    a1 += 4;
    if (v3 != 255) {
      break;
    }
    if (--v2 < 2) {
      return 0;
    }
  }
  return 1;
}

uint64_t AlphaReplace_C(uint64_t result, int a2, int a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = a2;
    do
    {
      if (!*(unsigned char *)(result + 3)) {
        *(_DWORD *)uint64_t result = a3;
      }
      result += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

void WebPInitAlphaProcessing_cold_1()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 481, "WebPMultARGBRow != NULL");
}

void WebPInitAlphaProcessing_cold_2()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 482, "WebPMultRow != NULL");
}

void WebPInitAlphaProcessing_cold_3()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 483, "WebPApplyAlphaMultiply != NULL");
}

void WebPInitAlphaProcessing_cold_4()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 484, "WebPApplyAlphaMultiply4444 != NULL");
}

void WebPInitAlphaProcessing_cold_5()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 485, "WebPDispatchAlpha != NULL");
}

void WebPInitAlphaProcessing_cold_6()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 486, "WebPDispatchAlphaToGreen != NULL");
}

void WebPInitAlphaProcessing_cold_7()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 487, "WebPExtractAlpha != NULL");
}

void WebPInitAlphaProcessing_cold_8()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 488, "WebPExtractGreen != NULL");
}

void WebPInitAlphaProcessing_cold_9()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 492, "WebPPackRGB != NULL");
}

void WebPInitAlphaProcessing_cold_10()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 493, "WebPHasAlpha8b != NULL");
}

void WebPInitAlphaProcessing_cold_11()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 494, "WebPHasAlpha32b != NULL");
}

void WebPInitAlphaProcessing_cold_12()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 495, "WebPAlphaReplace != NULL");
}

uint64_t (**WebPGetWorkerInterface())()
{
  return g_worker_interface;
}

double Init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t Reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) = 0;
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 1)
  {
    if (v1) {
      Reset_cold_1();
    }
    *(_DWORD *)(a1 + 8) = 1;
  }
  return 1;
}

BOOL Sync(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) >= 2u) {
    Reset_cold_1();
  }
  return *(_DWORD *)(a1 + 40) == 0;
}

void *Execute(void *result)
{
  int v1 = (uint64_t (*)(void, void))result[2];
  if (v1)
  {
    int v2 = result;
    double result = (void *)v1(result[3], result[4]);
    *((_DWORD *)v2 + 10) |= result == 0;
  }
  return result;
}

uint64_t End(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  if (*(void *)result) {
    End_cold_1();
  }
  return result;
}

void Reset_cold_1()
{
  __assert_rtn("Sync", "thread_utils.c", 272, "worker->status_ <= OK");
}

void End_cold_1()
{
  __assert_rtn("End", "thread_utils.c", 343, "worker->impl_ == NULL");
}

uint64_t WebPAnimDecoderOptionsInitInternal(void *a1, int a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if ((a2 & 0xFFFFFF00) == 0x100)
    {
      *a1 = 1;
      return 1;
    }
  }
  return result;
}

char *WebPAnimDecoderNewInternal(uint64_t a1, int *a2, int a3)
{
  uint64_t v3 = 0;
  if (a1)
  {
    if ((a3 & 0xFFFFFF00) == 0x100)
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
      uint64_t v3 = 0;
      if (!WebPGetFeaturesInternal(*(void *)a1, *(void *)(a1 + 8), (uint64_t)v16, 521))
      {
        uint64_t v6 = (char *)WebPSafeCalloc(1uLL, 0x198uLL);
        uint64_t v3 = v6;
        if (v6)
        {
          if (a2)
          {
            int v9 = *a2;
            if (*a2 > 8 || ((1 << v9) & 0x18A) == 0) {
              goto LABEL_16;
            }
            LODWORD(a2) = a2[1];
          }
          else
          {
            int v9 = 1;
          }
          int v10 = v6 + 8;
          uint64_t v11 = BlendPixelRowPremult;
          if ((v9 & 0xFFFFFFFD) == 1) {
            uint64_t v11 = BlendPixelRowNonPremult;
          }
          *((void *)v3 + 31) = v11;
          WebPInitDecoderConfigInternal(v10, 521);
          *((_DWORD *)v3 + 12) = v9;
          *((_DWORD *)v3 + 15) = 1;
          *((_DWORD *)v3 + 52) = a2;
          uint64_t v12 = (unsigned int *)WebPDemuxInternal(a1, 0, 0, 263);
          *(void *)uint64_t v3 = v12;
          if (v12)
          {
            *((_DWORD *)v3 + 64) = WebPDemuxGetI(v12, 1);
            *((_DWORD *)v3 + 65) = WebPDemuxGetI(*(unsigned int **)v3, 2);
            *((_DWORD *)v3 + 66) = WebPDemuxGetI(*(unsigned int **)v3, 3);
            *((_DWORD *)v3 + 67) = WebPDemuxGetI(*(unsigned int **)v3, 4);
            *((_DWORD *)v3 + 68) = WebPDemuxGetI(*(unsigned int **)v3, 5);
            uint64_t v13 = WebPSafeCalloc((4 * *((_DWORD *)v3 + 64)), *((unsigned int *)v3 + 65));
            *((void *)v3 + 37) = v13;
            if (v13)
            {
              uint64_t v14 = WebPSafeCalloc((4 * *((_DWORD *)v3 + 64)), *((unsigned int *)v3 + 65));
              *((void *)v3 + 38) = v14;
              if (v14)
              {
                *((_DWORD *)v3 + 78) = 0;
                _cg_jpeg_mem_term(v3 + 320, v7, v8);
                *((_OWORD *)v3 + 23) = 0u;
                *((_OWORD *)v3 + 24) = 0u;
                *((_OWORD *)v3 + 21) = 0u;
                *((_OWORD *)v3 + 22) = 0u;
                *((_OWORD *)v3 + 20) = 0u;
                *((void *)v3 + 50) = 0x100000000;
                return v3;
              }
            }
          }
        }
LABEL_16:
        WebPAnimDecoderDelete((void **)v3, v7, v8);
        return 0;
      }
    }
  }
  return v3;
}

void WebPAnimDecoderDelete(void **a1, uint64_t a2, const char *a3)
{
  if (a1)
  {
    _cg_jpeg_mem_term(a1 + 40, a2, a3);
    WebPDemuxDelete(*a1);
    _TIFFfree(a1[37]);
    _TIFFfree(a1[38]);
    _TIFFfree(a1);
  }
}

uint64_t WebPAnimDecoderGetInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      long long v4 = *(_OWORD *)(a1 + 256);
      long long v5 = *(_OWORD *)(a1 + 272);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 288);
      *(_OWORD *)a2 = v4;
      *(_OWORD *)(a2 + 16) = v5;
      return 1;
    }
  }
  return result;
}

uint64_t WebPAnimDecoderGetNext(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 0;
  if (!a1 || !a2 || !a3) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 404);
  if (v7 > *(_DWORD *)(a1 + 272)) {
    return 0;
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v48 = 0u;
  unsigned int v8 = *(_DWORD *)(a1 + 256);
  unsigned int v9 = *(_DWORD *)(a1 + 260);
  int v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 248);
  uint64_t result = WebPDemuxGetFrame(*(void *)a1, v7, (uint64_t)&v48);
  if (!result) {
    return result;
  }
  int v11 = *(_DWORD *)(a1 + 312);
  int v12 = DWORD2(v49);
  if (v48 == 1
    || (!DWORD2(v51) || HIDWORD(v51) == 1) && (void)v49 == __PAIR64__(v9, v8)
    || *(_DWORD *)(a1 + 348) == 1
    && (*(_DWORD *)(a1 + 336) == v8 ? (BOOL v14 = *(_DWORD *)(a1 + 340) == v9) : (BOOL v14 = 0),
        !v14 ? (int v15 = 0) : (int v15 = 1),
        *(_DWORD *)(a1 + 400) | v15))
  {
    bzero(*(void **)(a1 + 296), 4 * v8 * (unint64_t)v9);
    int v13 = 1;
  }
  else
  {
    CopyCanvas(*(void **)(a1 + 304), *(void **)(a1 + 296), v8, v9);
    int v13 = 0;
  }
  uint64_t v16 = 4 * v8;
  uint64_t v17 = SDWORD1(v49) * v16;
  uint64_t v18 = SHIDWORD(v48) * v16 + 4 * SDWORD2(v48);
  uint64_t v19 = *((void *)&v50 + 1);
  unint64_t v20 = v51;
  *(_DWORD *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = v17;
  *(void *)(a1 + 64) = *(void *)(a1 + 296) + v18;
  if (WebPDecode(v19, v20, a1 + 8))
  {
    _cg_jpeg_mem_term(&v48, v21, (const char *)v22);
    return 0;
  }
  int v47 = v13;
  int v44 = v12;
  int v45 = v11;
  unsigned int v46 = v9;
  if ((int)v48 >= 2 && !(HIDWORD(v51) | v13))
  {
    int v23 = *(_DWORD *)(a1 + 348);
    if (!v23)
    {
      if (SDWORD1(v49) >= 1)
      {
        int v24 = 0;
        do
        {
          v10(*(void *)(a1 + 296) + 4 * (DWORD2(v48) + (v24 + HIDWORD(v48)) * v8), *(void *)(a1 + 304) + 4 * (DWORD2(v48) + (v24 + HIDWORD(v48)) * v8), v49);
          ++v24;
        }
        while (v24 < SDWORD1(v49));
      }
      goto LABEL_59;
    }
    if (v23 != 1) {
      WebPAnimDecoderGetNext_cold_2();
    }
    if (SDWORD1(v49) < 1) {
      goto LABEL_59;
    }
    int v25 = 0;
    while (1)
    {
      int v26 = v25 + HIDWORD(v48);
      unint64_t v22 = v49;
      int v27 = v49 + DWORD2(v48);
      int v28 = *(_DWORD *)(a1 + 328);
      int v29 = *(_DWORD *)(a1 + 336) + v28;
      int v30 = *(_DWORD *)(a1 + 332);
      BOOL v31 = v30 > v25 + HIDWORD(v48) || v30 + *(_DWORD *)(a1 + 340) <= v26;
      BOOL v32 = !v31 && SDWORD2(v48) < v29;
      if (!v32 || v27 <= v28) {
        break;
      }
      BOOL v36 = __OFSUB__(v27, v29);
      int v37 = v27 - v29;
      if ((v37 < 0) ^ v36 | (v37 == 0)) {
        int v35 = -1;
      }
      else {
        int v35 = *(_DWORD *)(a1 + 336) + v28;
      }
      if ((v37 < 0) ^ v36 | (v37 == 0)) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v37;
      }
      unint64_t v22 = (v28 - DWORD2(v48));
      if (v28 > SDWORD2(v48)) {
        goto LABEL_54;
      }
LABEL_56:
      if ((int)v34 >= 1) {
        v10(*(void *)(a1 + 296) + 4 * (v35 + v26 * v8), *(void *)(a1 + 304) + 4 * (v35 + v26 * v8), v34);
      }
      if (++v25 >= SDWORD1(v49)) {
        goto LABEL_59;
      }
    }
    uint64_t v34 = 0;
    int v35 = -1;
LABEL_54:
    if ((int)v22 >= 1) {
      ((void (*)(uint64_t, uint64_t))v10)(*(void *)(a1 + 296) + 4 * (DWORD2(v48) + v26 * v8), *(void *)(a1 + 304) + 4 * (DWORD2(v48) + v26 * v8));
    }
    goto LABEL_56;
  }
LABEL_59:
  *(_DWORD *)(a1 + 312) = v44 + v45;
  _cg_jpeg_mem_term(a1 + 320, v21, (const char *)v22);
  long long v38 = v51;
  *(_OWORD *)(a1 + 352) = v50;
  *(_OWORD *)(a1 + 368) = v38;
  *(_OWORD *)(a1 + 384) = v52;
  long long v39 = v49;
  *(_OWORD *)(a1 + 320) = v48;
  *(_OWORD *)(a1 + 336) = v39;
  *(_DWORD *)(a1 + 400) = v47;
  CopyCanvas(*(void **)(a1 + 296), *(void **)(a1 + 304), v8, v46);
  if (*(_DWORD *)(a1 + 348) == 1)
  {
    uint64_t v40 = *(int *)(a1 + 336);
    size_t v41 = 4 * v40;
    if (4 * (int)v40 > (int)v16) {
      WebPAnimDecoderGetNext_cold_1();
    }
    int v42 = *(_DWORD *)(a1 + 340);
    if (v42 >= 1)
    {
      int v43 = (char *)(*(void *)(a1 + 304) + 4 * *(int *)(a1 + 328) + *(int *)(a1 + 332) * (uint64_t)(int)v16);
      do
      {
        bzero(v43, v41);
        v43 += (int)v16;
        --v42;
      }
      while (v42);
    }
  }
  ++*(_DWORD *)(a1 + 404);
  *a2 = *(void *)(a1 + 296);
  *a3 = v44 + v45;
  return 1;
}

BOOL WebPAnimDecoderHasMoreFrames(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 404) <= *(_DWORD *)(result + 272);
  }
  return result;
}

void *CopyCanvas(void *__src, void *__dst, unsigned int a3, unsigned int a4)
{
  if (!__src || !__dst) {
    CopyCanvas_cold_1();
  }
  size_t v5 = 4 * a3 * (unint64_t)a4;
  return memcpy(__dst, __src, v5);
}

uint64_t BlendPixelRowNonPremult(uint64_t result, unsigned int *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v4 = (unsigned int *)result;
    uint64_t v5 = a3;
    do
    {
      unsigned int v6 = *v4;
      if (HIBYTE(*v4) != 255)
      {
        unsigned int v7 = *a2;
        if (HIBYTE(*v4))
        {
          unsigned int v8 = HIBYTE(v7) * (256 - HIBYTE(v6));
          unsigned int v9 = (v8 >> 8) + HIBYTE(v6);
          unsigned int v13 = 0x1000000u / (BYTE1(v8) + HIBYTE(*v4));
          int v10 = BYTE1(v8);
          int v11 = BlendChannelNonPremult(v6, HIBYTE(v6), v7, BYTE1(v8), v13, 0);
          int v12 = BlendChannelNonPremult(v6, HIBYTE(v6), v7, v10, v13, 8);
          uint64_t result = BlendChannelNonPremult(v6, HIBYTE(v6), v7, v10, v13, 16);
          if (v9 >= 0x100) {
            BlendPixelRowNonPremult_cold_1();
          }
          unsigned int v7 = v11 | (v12 << 8) | (result << 16) | (v9 << 24);
        }
        *uint64_t v4 = v7;
      }
      ++a2;
      ++v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

_DWORD *BlendPixelRowPremult(_DWORD *result, _DWORD *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if (HIBYTE(*result) != 255) {
        *result += ((((*a2 >> 8) & 0xFF00FF) * (256 - HIBYTE(*result))) & 0xFF00FF00)
      }
                 + ((((*a2 & 0xFF00FFu) * (256 - HIBYTE(*result))) >> 8) & 0xFF00FF);
      ++a2;
      ++result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t BlendChannelNonPremult(unsigned int a1, int a2, unsigned int a3, int a4, unsigned int a5, char a6)
{
  unint64_t v6 = (a3 >> a6) * a4 + (a1 >> a6) * a2;
  if (0x100000000uLL / a5 <= v6) {
    BlendChannelNonPremult_cold_1();
  }
  return (v6 * a5) >> 24;
}

void WebPAnimDecoderGetNext_cold_1()
{
  __assert_rtn("ZeroFillFrameRect", "anim_decode.c", 173, "width * NUM_CHANNELS <= buf_stride");
}

void WebPAnimDecoderGetNext_cold_2()
{
  __assert_rtn("WebPAnimDecoderGetNext", "anim_decode.c", 398, "dec->prev_iter_.dispose_method == WEBP_MUX_DISPOSE_BACKGROUND");
}

void CopyCanvas_cold_1()
{
  __assert_rtn("CopyCanvas", "anim_decode.c", 186, "src != NULL && dst != NULL");
}

void BlendPixelRowNonPremult_cold_1()
{
}

void BlendChannelNonPremult_cold_1()
{
}

uint64_t VP8InitIoInternal(_OWORD *a1, int a2)
{
  if ((a2 & 0xFFFFFF00) != 0x200) {
    return 0;
  }
  if (!a1) {
    return 1;
  }
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  uint64_t v2 = 1;
  *a1 = 0u;
  a1[1] = 0u;
  return v2;
}

void *VP8New()
{
  v0 = WebPSafeCalloc(1uLL, 0xBD0uLL);
  int v1 = v0;
  if (v0)
  {
    *(_DWORD *)v0 = 0;
    v0[1] = "OK";
    uint64_t v2 = WebPGetWorkerInterface();
    ((void (*)(void *))*v2)(v1 + 19);
    *((_DWORD *)v1 + 1) = 0;
    *((_DWORD *)v1 + 108) = 0;
    if ((BOOL (*)(int))InitGetCoeffs_InitGetCoeffs_body_last_cpuinfo_used != VP8GetCPUInfo)
    {
      if (!VP8GetCPUInfo || (CPUInfo = VP8GetCPUInfo(2), uint64_t v4 = GetCoeffsAlt, !CPUInfo)) {
        uint64_t v4 = GetCoeffsFast;
      }
      GetCoeffs = v4;
      InitGetCoeffs_InitGetCoeffs_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
    }
  }
  return v1;
}

void VP8Delete(void *a1)
{
  if (a1)
  {
    VP8Clear((uint64_t)a1);
    _TIFFfree(a1);
  }
}

double VP8Clear(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = WebPGetWorkerInterface();
    ((void (*)(uint64_t))v2[5])(a1 + 152);
    WebPDeallocateAlphaMemory(a1);
    _TIFFfree(*(void **)(a1 + 2888));
    double result = 0.0;
    *(_OWORD *)(a1 + 2888) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_DWORD *)(a1 + 4) = 0;
  }
  return result;
}

uint64_t VP8SetError(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 5 && !*(_DWORD *)(a1 + 64)) {
    VP8SetError_cold_1();
  }
  if (!*(_DWORD *)a1)
  {
    *(void *)(a1 + 8) = a3;
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = 0;
  }
  return 0;
}

uint64_t VP8GetInfo(unsigned __int8 *a1, unint64_t a2, unint64_t a3, int *a4, int *a5)
{
  uint64_t result = 0;
  if (a1 && a2 >= 0xA)
  {
    if (a1[3] == 157 && a1[4] == 1 && a1[5] == 42)
    {
      uint64_t result = 0;
      unsigned int v7 = *a1;
      if ((v7 & 0x19) == 0x10 && ((a1[2] << 16) | (a1[1] << 8) | v7) >> 5 < a3)
      {
        uint64_t result = 0;
        int v8 = a1[6] | ((a1[7] & 0x3F) << 8);
        if (v8)
        {
          int v9 = a1[8] | ((a1[9] & 0x3F) << 8);
          if (v9)
          {
            if (a4) {
              *a4 = v8;
            }
            if (a5) {
              *a5 = v9;
            }
            return 1;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t VP8GetHeaders(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = "OK";
  if (!a2)
  {
    uint64_t v5 = 0;
    *(void *)(a1 + 8) = "null VP8Io passed to VP8GetHeaders()";
    uint64_t v7 = 2;
    goto LABEL_13;
  }
  unint64_t v3 = *(void *)(a2 + 96);
  unint64_t v4 = v3 - 3;
  if (v3 > 3)
  {
    int v8 = *(unsigned __int8 **)(a2 + 104);
    unsigned int v9 = *v8;
    unsigned int v10 = (v8[2] << 16) | (v8[1] << 8) | v9;
    *(unsigned char *)(a1 + 68) = (v9 & 1) == 0;
    *(unsigned char *)(a1 + 69) = (v9 >> 1) & 7;
    *(unsigned char *)(a1 + 70) = (v9 & 0x10) != 0;
    unsigned int v11 = v10 >> 5;
    *(_DWORD *)(a1 + 72) = v11;
    if (((v9 >> 1) & 7) >= 4)
    {
      uint64_t v5 = 0;
      int v12 = "Incorrect keyframe parameters.";
LABEL_9:
      *(void *)(a1 + 8) = v12;
      uint64_t v7 = 3;
      goto LABEL_13;
    }
    if (((v9 >> 4) & 1) == 0)
    {
      uint64_t v5 = 0;
      unsigned int v13 = "Frame not displayable.";
LABEL_12:
      *(void *)(a1 + 8) = v13;
      uint64_t v7 = 4;
      goto LABEL_13;
    }
    BOOL v14 = (unint64_t *)(v8 + 3);
    if ((v9 & 1) == 0)
    {
      if (v4 <= 6)
      {
        uint64_t v5 = 0;
        unint64_t v6 = "cannot parse picture header";
        goto LABEL_5;
      }
      if (*(unsigned __int8 *)v14 != 157 || v8[4] != 1 || v8[5] != 42)
      {
        uint64_t v5 = 0;
        int v12 = "Bad code word";
        goto LABEL_9;
      }
      unsigned int v15 = v8[6] | ((v8[7] & 0x3F) << 8);
      *(_WORD *)(a1 + 76) = v8[6] | ((v8[7] & 0x3F) << 8);
      *(unsigned char *)(a1 + 80) = v8[7] >> 6;
      unsigned int v16 = v8[8] | ((v8[9] & 0x3F) << 8);
      *(_WORD *)(a1 + 78) = v8[8] | ((v8[9] & 0x3F) << 8);
      *(unsigned char *)(a1 + 81) = v8[9] >> 6;
      BOOL v14 = (unint64_t *)(v8 + 10);
      unint64_t v4 = v3 - 10;
      *(_DWORD *)(a1 + 408) = (v15 + 15) >> 4;
      *(_DWORD *)(a1 + 412) = (v16 + 15) >> 4;
      *(_DWORD *)a2 = v15;
      *(_DWORD *)(a2 + 4) = v16;
      *(_DWORD *)(a2 + 116) = 0;
      *(_DWORD *)(a2 + 120) = 0;
      *(void *)(a2 + 124) = v15;
      *(void *)(a2 + 132) = v16;
      *(_DWORD *)(a2 + 140) = v15;
      *(_DWORD *)(a2 + 144) = v16;
      *(_DWORD *)(a2 + 12) = v15;
      *(_DWORD *)(a2 + 16) = v16;
      VP8ResetProba(a1 + 1192);
      ResetSegmentHeader(a1 + 132);
      unsigned int v11 = *(_DWORD *)(a1 + 72);
    }
    if (v4 >= v11)
    {
      VP8InitBitReader(a1 + 16, v14, v11);
      uint64_t v17 = *(unsigned int *)(a1 + 72);
      if (*(unsigned char *)(a1 + 68))
      {
        *(unsigned char *)(a1 + 82) = VP8GetValue(a1 + 16, 1);
        *(unsigned char *)(a1 + 83) = VP8GetValue(a1 + 16, 1);
      }
      int Value = VP8GetValue(a1 + 16, 1);
      *(_DWORD *)(a1 + 132) = Value;
      if (Value)
      {
        *(_DWORD *)(a1 + 136) = VP8GetValue(a1 + 16, 1);
        if (VP8GetValue(a1 + 16, 1))
        {
          uint64_t v19 = 0;
          *(_DWORD *)(a1 + 140) = VP8GetValue(a1 + 16, 1);
          do
          {
            int v20 = VP8GetValue(a1 + 16, 1);
            if (v20) {
              LOBYTE(v20) = VP8GetSignedValue(a1 + 16, 7);
            }
            *(unsigned char *)(a1 + 144 + v19++) = v20;
          }
          while (v19 != 4);
          for (uint64_t i = 0; i != 4; ++i)
          {
            int v22 = VP8GetValue(a1 + 16, 1);
            if (v22) {
              LOBYTE(v22) = VP8GetSignedValue(a1 + 16, 6);
            }
            *(unsigned char *)(a1 + 148 + i) = v22;
          }
        }
        if (*(_DWORD *)(a1 + 136))
        {
          for (uint64_t j = 0; j != 3; ++j)
          {
            if (VP8GetValue(a1 + 16, 1)) {
              char v24 = VP8GetValue(a1 + 16, 8);
            }
            else {
              char v24 = -1;
            }
            *(unsigned char *)(a1 + 1192 + j) = v24;
          }
        }
      }
      else
      {
        *(_DWORD *)(a1 + 136) = 0;
      }
      if (*(_DWORD *)(a1 + 56))
      {
        if (!*(_DWORD *)a1)
        {
          uint64_t v5 = 0;
          int v12 = "cannot parse segment header";
          goto LABEL_9;
        }
      }
      else if (ParseFilterHeader(a1 + 16, (_DWORD *)a1))
      {
        int v25 = ParsePartitions(a1, (unsigned __int16 *)((char *)v14 + v17), v4 - v17);
        if (v25)
        {
          VP8SetError(a1, v25, (uint64_t)"cannot parse partitions");
        }
        else
        {
          VP8ParseQuant(a1);
          if (*(unsigned char *)(a1 + 68))
          {
            uint64_t v5 = 1;
            VP8GetValue(a1 + 16, 1);
            VP8ParseProba(a1 + 16, a1);
            *(_DWORD *)(a1 + 4) = 1;
            return v5;
          }
          if (!*(_DWORD *)a1)
          {
            uint64_t v5 = 0;
            unsigned int v13 = "Not a key frame.";
            goto LABEL_12;
          }
        }
      }
      else if (!*(_DWORD *)a1)
      {
        uint64_t v5 = 0;
        int v12 = "cannot parse filter header";
        goto LABEL_9;
      }
    }
    else if (!*(_DWORD *)a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = "bad partition length";
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = "Truncated header.";
LABEL_5:
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = 7;
LABEL_13:
  *(void *)a1 = v7;
  return v5;
}

double ResetSegmentHeader(uint64_t a1)
{
  if (!a1) {
    ResetSegmentHeader_cold_1();
  }
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_18898C840;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

BOOL ParseFilterHeader(uint64_t a1, _DWORD *a2)
{
  a2[21] = VP8GetValue(a1, 1);
  a2[22] = VP8GetValue(a1, 6);
  a2[23] = VP8GetValue(a1, 3);
  int Value = VP8GetValue(a1, 1);
  a2[24] = Value;
  if (Value && VP8GetValue(a1, 1))
  {
    for (uint64_t i = 0; i != 4; ++i)
    {
      if (VP8GetValue(a1, 1)) {
        a2[i + 25] = VP8GetSignedValue(a1, 6);
      }
    }
    for (uint64_t j = 0; j != 4; ++j)
    {
      if (VP8GetValue(a1, 1)) {
        a2[j + 29] = VP8GetSignedValue(a1, 6);
      }
    }
  }
  int v7 = a2[22];
  if (v7)
  {
    if (a2[21]) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
  }
  a2[730] = v7;
  return *(_DWORD *)(a1 + 40) == 0;
}

uint64_t ParsePartitions(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  int Value = VP8GetValue(a1 + 16, 2);
  unint64_t v7 = ~(-1 << Value);
  *(_DWORD *)(a1 + 432) = v7;
  unint64_t v8 = a3 - 3 * v7;
  if (a3 < 3 * v7) {
    return 7;
  }
  unsigned int v10 = (unint64_t *)((char *)a2 + a3);
  unsigned int v11 = (unint64_t *)((char *)a2 + 3 * v7);
  if (Value)
  {
    uint64_t v12 = a1 + 440;
    if (v7 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = ~(-1 << Value);
    }
    do
    {
      uint64_t v14 = *((unsigned __int8 *)a2 + 2);
      if ((*a2 | (unint64_t)(v14 << 16)) >= v8) {
        unint64_t v15 = v8;
      }
      else {
        unint64_t v15 = *a2 | (unint64_t)(v14 << 16);
      }
      VP8InitBitReader(v12, v11, v15);
      unsigned int v11 = (unint64_t *)((char *)v11 + v15);
      v8 -= v15;
      a2 = (unsigned __int16 *)((char *)a2 + 3);
      v12 += 48;
      --v13;
    }
    while (v13);
  }
  VP8InitBitReader(a1 + 48 * v7 + 440, v11, v8);
  if (v11 < v10) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 64)) {
    return 5;
  }
  return 7;
}

BOOL VP8DecodeMB(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 2832);
  uint64_t v5 = *(int *)(a1 + 2904);
  int v53 = (unsigned char *)(v4 + 2 * v5);
  uint64_t v6 = *(void *)(a1 + 2912);
  if (*(_DWORD *)(a1 + 2800) && *(unsigned char *)(v6 + 800 * (int)v5 + 797))
  {
    *int v53 = 0;
    *(unsigned char *)(v4 - 2) = 0;
    if (!*(unsigned char *)(v6 + 800 * (int)v5 + 768))
    {
      *(unsigned char *)(v4 + 2 * v5 + 1) = 0;
      *(unsigned char *)(v4 - 1) = 0;
    }
    BOOL v7 = 0;
    uint64_t v8 = v6 + 800 * (int)v5;
    *(unsigned char *)(v8 + 796) = 0;
    *(void *)(v8 + 788) = 0;
  }
  else
  {
    uint64_t v48 = *(void *)(a1 + 2912);
    unsigned int v9 = (unsigned char *)(v6 + 800 * (int)v5);
    uint64_t v50 = v9[798];
    uint64_t v10 = a1 + 32 * v50;
    uint64_t v11 = v10 + 1060;
    bzero(v9, 0x300uLL);
    uint64_t v51 = v3;
    int v49 = v5;
    if (v9[768])
    {
      uint64_t v12 = 0;
      uint64_t v13 = v3 + 2664;
    }
    else
    {
      uint64_t v13 = v3 + 2256;
      memset(v64, 0, sizeof(v64));
      uint64_t v14 = v4 + 2 * v5;
      int Coeffs = GetCoeffs(a2, v3 + 2392, *(unsigned __int8 *)(v4 - 1) + *(unsigned __int8 *)(v14 + 1), v10 + 1068, 0, v64);
      *(unsigned char *)(v4 - 1) = Coeffs > 0;
      *(unsigned char *)(v14 + 1) = Coeffs > 0;
      if (Coeffs < 2)
      {
        unint64_t v16 = 0;
        unsigned int v17 = (SLOWORD(v64[0]) + 3) >> 3;
        do
        {
          *(_WORD *)&v9[2 * v16] = v17;
          BOOL v18 = v16 >= 0xF0;
          v16 += 16;
        }
        while (!v18);
      }
      else
      {
        VP8TransformWHT(v64, v9);
      }
      uint64_t v12 = 1;
    }
    int v19 = 0;
    int v59 = 0;
    LOBYTE(v20) = *v53 & 0xF;
    uint64_t v52 = v4;
    LOBYTE(v21) = *(unsigned char *)(v4 - 2) & 0xF;
    do
    {
      char v60 = v21;
      int v62 = v19;
      uint64_t v22 = 0;
      int v23 = 0;
      int v24 = v21 & 1;
      do
      {
        unsigned __int8 v25 = v20;
        int v26 = GetCoeffs(a2, v13, v24 + (v20 & 1), v11, v12, &v9[v22]);
        int v24 = v26 > (int)v12;
        if (v26 <= (int)v12) {
          int v27 = 0;
        }
        else {
          int v27 = -128;
        }
        unsigned int v20 = (v25 >> 1) | (v24 << 7);
        int v28 = *(_WORD *)&v9[v22] != 0;
        if (v26 >= 2) {
          int v28 = 2;
        }
        if (v26 > 3) {
          int v28 = 3;
        }
        int v23 = v28 | (4 * v23);
        v22 += 32;
      }
      while (v22 != 128);
      v20 >>= 4;
      int v21 = v27 | ((v60 & 0xFE) >> 1);
      int v19 = v62 + 1;
      v9 += v22;
      int v59 = v23 | (v59 << 8);
    }
    while (v62 != 3);
    char v29 = 0;
    int v30 = 0;
    int v31 = v21 >> 4;
    char v32 = 1;
    do
    {
      int v56 = v31;
      int v57 = v30;
      unsigned int v58 = v20;
      int v33 = 0;
      char v54 = v32;
      char v55 = v29;
      unsigned int v34 = *v53 >> (v29 | 4);
      int v35 = *(unsigned __int8 *)(v52 - 2) >> (v29 | 4);
      char v36 = 1;
      do
      {
        char v61 = v36;
        unsigned __int8 v63 = v35;
        int v37 = v35 & 1;
        char v38 = 1;
        do
        {
          char v39 = v38;
          int v40 = GetCoeffs(a2, v51 + 2528, (v34 & 1) + v37, v51 + 32 * v50 + 1076, 0, v9);
          char v38 = 0;
          int v37 = v40 > 0;
          unsigned int v34 = (v34 >> 1) | (8 * v37);
          int v41 = *(unsigned __int16 *)v9;
          v9 += 32;
          int v42 = v41 != 0;
          if (v40 >= 2) {
            int v42 = 2;
          }
          if (v40 > 3) {
            int v42 = 3;
          }
          int v33 = v42 | (4 * v33);
        }
        while ((v39 & 1) != 0);
        char v36 = 0;
        v34 >>= 2;
        LOBYTE(v35) = (v63 >> 1) | (32 * (v40 > 0));
      }
      while ((v61 & 1) != 0);
      char v32 = 0;
      int v30 = (v33 << (4 * v55)) | v57;
      unsigned int v20 = ((16 * v34) << v55) | v58;
      int v31 = ((v35 & 0x70) << v55) | v56;
      char v29 = 2;
    }
    while ((v54 & 1) != 0);
    *int v53 = v20;
    *(unsigned char *)(v52 - 2) = v31;
    uint64_t v6 = v48;
    LODWORD(v5) = v49;
    uint64_t v43 = v48 + 800 * v49;
    *(_DWORD *)(v43 + 788) = v59;
    *(_DWORD *)(v43 + 792) = v30;
    if ((v30 & 0xAAAA) != 0)
    {
      LOBYTE(v44) = 0;
      uint64_t v3 = v51;
    }
    else
    {
      uint64_t v3 = v51;
      int v44 = *(_DWORD *)(v51 + 32 * v50 + 1088);
    }
    *(unsigned char *)(v48 + 800 * v49 + 796) = v44;
    BOOL v7 = (v30 | v59) != 0;
  }
  if (*(int *)(v3 + 2920) >= 1)
  {
    uint64_t v45 = *(void *)(v3 + 2840) + 4 * *(int *)(v3 + 2904);
    int v46 = *(_DWORD *)(v3
                    + 8 * *(unsigned __int8 *)(v6 + 800 * (int)v5 + 798)
                    + 4 * *(unsigned __int8 *)(v6 + 800 * (int)v5 + 768)
                    + 2924);
    *(_DWORD *)uint64_t v45 = v46;
    *(unsigned char *)(v45 + 2) = BYTE2(v46) | v7;
  }
  return *(_DWORD *)(a2 + 40) == 0;
}

uint64_t VP8InitScanline(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 2832) - 2) = 0;
  *(_DWORD *)(result + 2816) = 0;
  *(_DWORD *)(result + 2904) = 0;
  return result;
}

uint64_t VP8Decode(uint64_t result, int *a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (!a2)
  {
    if (!*(_DWORD *)result)
    {
      double result = 0;
      *(void *)(v3 + 8) = "NULL VP8Io parameter in VP8Decode().";
      *(void *)uint64_t v3 = 2;
      return result;
    }
    return 0;
  }
  if (!*(_DWORD *)(result + 4))
  {
    double result = VP8GetHeaders(result, (uint64_t)a2);
    if (!result) {
      return result;
    }
    if (!*(_DWORD *)(v3 + 4)) {
      VP8Decode_cold_1();
    }
  }
  if (VP8EnterCritical((unsigned int *)v3, (uint64_t)a2)) {
    goto LABEL_7;
  }
  if (!VP8InitFrame(v3, (uint64_t)a2)) {
    goto LABEL_26;
  }
  *(_DWORD *)(v3 + 2908) = 0;
  if (*(int *)(v3 + 428) < 1)
  {
LABEL_21:
    if (*(int *)(v3 + 200) >= 1)
    {
      uint64_t v8 = WebPGetWorkerInterface();
      if (!((unsigned int (*)(uint64_t))v8[2])(v3 + 152)) {
        goto LABEL_26;
      }
    }
    int v9 = 1;
    goto LABEL_27;
  }
  int v4 = 0;
  while (1)
  {
    int v5 = *(_DWORD *)(v3 + 432);
    if (!VP8ParseIntraModeRow(v3 + 16, v3))
    {
      if (*(_DWORD *)v3) {
        goto LABEL_26;
      }
      int v9 = 0;
      uint64_t v10 = "Premature end-of-partition0 encountered.";
      goto LABEL_30;
    }
    if (*(_DWORD *)(v3 + 2904) < *(_DWORD *)(v3 + 408))
    {
      uint64_t v6 = v3 + 48 * (v5 & v4) + 440;
      while (VP8DecodeMB(v3, v6))
      {
        int v7 = *(_DWORD *)(v3 + 2904) + 1;
        *(_DWORD *)(v3 + 2904) = v7;
        if (v7 >= *(_DWORD *)(v3 + 408)) {
          goto LABEL_19;
        }
      }
      if (*(_DWORD *)v3) {
        goto LABEL_26;
      }
      int v9 = 0;
      uint64_t v10 = "Premature end-of-file encountered.";
LABEL_30:
      *(void *)(v3 + 8) = v10;
      uint64_t v11 = 7;
LABEL_31:
      *(void *)uint64_t v3 = v11;
      goto LABEL_27;
    }
LABEL_19:
    *(_WORD *)(*(void *)(v3 + 2832) - 2) = 0;
    *(_DWORD *)(v3 + 2816) = 0;
    *(_DWORD *)(v3 + 2904) = 0;
    if (!VP8ProcessRow(v3, a2)) {
      break;
    }
    int v4 = *(_DWORD *)(v3 + 2908) + 1;
    *(_DWORD *)(v3 + 2908) = v4;
    if (v4 >= *(_DWORD *)(v3 + 428)) {
      goto LABEL_21;
    }
  }
  if (!*(_DWORD *)v3)
  {
    int v9 = 0;
    *(void *)(v3 + 8) = "Output aborted.";
    uint64_t v11 = 6;
    goto LABEL_31;
  }
LABEL_26:
  int v9 = 0;
LABEL_27:
  if ((VP8ExitCritical(v3, (uint64_t)a2) & v9) != 0)
  {
    *(_DWORD *)(v3 + 4) = 0;
    return 1;
  }
LABEL_7:
  VP8Clear(v3);
  return 0;
}

uint64_t GetCoeffsAlt(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)a5 > 15) {
    return 16;
  }
  uint64_t v6 = a5;
  int v9 = (unsigned __int8 *)(*(void *)(a2 + 8 * (int)a5) + 11 * a3);
  int v11 = *(_DWORD *)(a1 + 8);
  int v10 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    int v12 = *v9;
    if (v10 < 0)
    {
      uint64_t v13 = *(unint64_t **)(a1 + 16);
      if (!v13) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v13 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v10 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        unint64_t v14 = *v13;
        *(void *)(a1 + 16) = (char *)v13 + 7;
        *((void *)&v15 + 1) = *(void *)a1;
        *(void *)&long long v15 = bswap64(v14);
        *(void *)a1 = v15 >> 8;
        v10 += 56;
        *(_DWORD *)(a1 + 12) = v10;
      }
    }
    unsigned int v16 = (v11 * v12) >> 8;
    unint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void *)a1 >> v10;
    if (v16 >= v18)
    {
      unsigned int v20 = (v11 * v12) >> 8;
    }
    else
    {
      uint64_t v19 = v16 + 1;
      unsigned int v20 = v11 - v19;
      v17 -= v19 << v10;
      *(void *)a1 = v17;
    }
    if (v20 <= 0x7E)
    {
      int v21 = kVP8Log2Range[v20];
      unsigned int v20 = kVP8NewRange[v20];
      v10 -= v21;
      *(_DWORD *)(a1 + 12) = v10;
    }
    *(_DWORD *)(a1 + 8) = v20;
    if (v16 >= v18) {
      return v6;
    }
    uint64_t v22 = v6 << 32;
    uint64_t v23 = (int)v6 + 1;
    while (1)
    {
      int v24 = v9[1];
      if (v10 < 0)
      {
        unsigned __int8 v25 = *(unint64_t **)(a1 + 16);
        if (!v25) {
          VP8GetValue_cold_1();
        }
        if ((unint64_t)v25 >= *(void *)(a1 + 32))
        {
          VP8LoadFinalBytes(a1);
          int v10 = *(_DWORD *)(a1 + 12);
          unint64_t v17 = *(void *)a1;
        }
        else
        {
          unint64_t v26 = *v25;
          *(void *)(a1 + 16) = (char *)v25 + 7;
          *((void *)&v27 + 1) = v17;
          *(void *)&long long v27 = bswap64(v26);
          unint64_t v17 = v27 >> 8;
          *(void *)a1 = v17;
          v10 += 56;
          *(_DWORD *)(a1 + 12) = v10;
        }
      }
      unsigned int v28 = (v20 * v24) >> 8;
      unint64_t v29 = v17 >> v10;
      if (v28 >= (v17 >> v10))
      {
        unsigned int v20 = (v20 * v24) >> 8;
      }
      else
      {
        uint64_t v30 = v28 + 1;
        v20 -= v30;
        v17 -= v30 << v10;
        *(void *)a1 = v17;
      }
      if (v20 <= 0x7E)
      {
        int v31 = kVP8Log2Range[v20];
        unsigned int v20 = kVP8NewRange[v20];
        v10 -= v31;
        *(_DWORD *)(a1 + 12) = v10;
      }
      *(_DWORD *)(a1 + 8) = v20;
      if (v28 < v29) {
        break;
      }
      int v9 = *(unsigned __int8 **)(a2 + 8 * v23);
      v22 += 0x100000000;
      LODWORD(v6) = v6 + 1;
      if (v23++ == 16) {
        return 16;
      }
    }
    uint64_t v33 = (v6 + 1);
    uint64_t v34 = *(void *)(a2 + 8 * (int)v33);
    int v35 = v9[2];
    if (v10 < 0)
    {
      char v36 = *(unint64_t **)(a1 + 16);
      if (!v36) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v36 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        uint64_t v33 = (v6 + 1);
        int v10 = *(_DWORD *)(a1 + 12);
        unint64_t v17 = *(void *)a1;
      }
      else
      {
        unint64_t v37 = *v36;
        *(void *)(a1 + 16) = (char *)v36 + 7;
        *((void *)&v38 + 1) = v17;
        *(void *)&long long v38 = bswap64(v37);
        unint64_t v17 = v38 >> 8;
        *(void *)a1 = v17;
        v10 += 56;
        *(_DWORD *)(a1 + 12) = v10;
      }
    }
    unsigned int v39 = (v20 * v35) >> 8;
    unint64_t v40 = v17 >> v10;
    unsigned int v41 = v39;
    if (v39 < (v17 >> v10))
    {
      uint64_t v42 = v39 + 1;
      unsigned int v41 = v20 - v42;
      *(void *)a1 = v17 - (v42 << v10);
    }
    if (v41 <= 0x7E)
    {
      int v43 = kVP8Log2Range[v41];
      unsigned int v41 = kVP8NewRange[v41];
      v10 -= v43;
      *(_DWORD *)(a1 + 12) = v10;
    }
    *(_DWORD *)(a1 + 8) = v41;
    if (v39 >= v40)
    {
      int v9 = (unsigned __int8 *)(v34 + 11);
      __int16 v47 = 1;
      if (v10 < 0)
      {
LABEL_42:
        uint64_t v48 = *(unint64_t **)(a1 + 16);
        if (!v48) {
          VP8GetValue_cold_1();
        }
        if ((unint64_t)v48 >= *(void *)(a1 + 32))
        {
          uint64_t v51 = v33;
          VP8LoadFinalBytes(a1);
          uint64_t v33 = v51;
          int v10 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          unint64_t v49 = *v48;
          *(void *)(a1 + 16) = (char *)v48 + 7;
          *((void *)&v50 + 1) = *(void *)a1;
          *(void *)&long long v50 = bswap64(v49);
          *(void *)a1 = v50 >> 8;
          v10 += 56;
        }
      }
    }
    else
    {
      int v44 = v9;
      uint64_t v45 = v33;
      Largeint Value = GetLargeValue(a1, v44);
      uint64_t v33 = v45;
      __int16 v47 = LargeValue;
      int v9 = (unsigned __int8 *)(v34 + 22);
      int v10 = *(_DWORD *)(a1 + 12);
      if (v10 < 0) {
        goto LABEL_42;
      }
    }
    char v52 = v10;
    unsigned int v53 = *(_DWORD *)(a1 + 8);
    unint64_t v54 = *(void *)a1;
    int v55 = (v53 >> 1) - (*(void *)a1 >> v10--);
    int v11 = (v53 + (v55 >> 31)) | 1;
    *(_DWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 12) = v10;
    *(void *)a1 = v54 - ((unint64_t)(((v53 >> 1) + 1) & (v55 >> 31)) << v52);
    *(_WORD *)(a6 + 2 * kZigzag[v22 >> 32]) = ((v47 ^ (v55 >> 31)) - (v55 >> 31))
                                              * *(_WORD *)(a4 + 4 * ((int)v6 > 0));
    uint64_t result = 16;
    BOOL v57 = (int)v6 < 15;
    uint64_t v6 = v33;
    if (!v57) {
      return result;
    }
  }
}

uint64_t GetCoeffsFast(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((int)a5 > 15) {
    return 16;
  }
  uint64_t v6 = a5;
  int v9 = (unsigned __int8 *)(*(void *)(a2 + 8 * (int)a5) + 11 * a3);
  int v11 = *(_DWORD *)(a1 + 8);
  int v10 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    int v12 = *v9;
    if (v10 < 0)
    {
      uint64_t v13 = *(unint64_t **)(a1 + 16);
      if (!v13) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v13 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v10 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        unint64_t v14 = *v13;
        *(void *)(a1 + 16) = (char *)v13 + 7;
        *((void *)&v15 + 1) = *(void *)a1;
        *(void *)&long long v15 = bswap64(v14);
        *(void *)a1 = v15 >> 8;
        v10 += 56;
      }
    }
    unsigned int v16 = (v11 * v12) >> 8;
    unint64_t v17 = *(void *)a1;
    int v18 = v10;
    uint64_t v19 = *(void *)a1 >> v10;
    if (v16 >= v19)
    {
      unsigned int v20 = v16 + 1;
    }
    else
    {
      unsigned int v20 = v11 - v16;
      v17 -= (unint64_t)(v16 + 1) << v18;
      *(void *)a1 = v17;
    }
    unsigned int v21 = __clz(v20) ^ 0x18;
    unsigned int v22 = v20 << v21;
    int v23 = v18 - v21;
    unsigned int v24 = v22 - 1;
    *(_DWORD *)(a1 + 8) = v22 - 1;
    *(_DWORD *)(a1 + 12) = v18 - v21;
    if (v16 >= v19) {
      return v6;
    }
    uint64_t v25 = v6 << 32;
    uint64_t v26 = (int)v6 + 1;
    while (1)
    {
      int v27 = v9[1];
      if (v23 < 0)
      {
        unsigned int v28 = *(unint64_t **)(a1 + 16);
        if (!v28) {
          VP8GetValue_cold_1();
        }
        if ((unint64_t)v28 >= *(void *)(a1 + 32))
        {
          VP8LoadFinalBytes(a1);
          int v23 = *(_DWORD *)(a1 + 12);
          unint64_t v17 = *(void *)a1;
        }
        else
        {
          unint64_t v29 = *v28;
          *(void *)(a1 + 16) = (char *)v28 + 7;
          *((void *)&v30 + 1) = v17;
          *(void *)&long long v30 = bswap64(v29);
          unint64_t v17 = v30 >> 8;
          *(void *)a1 = v17;
          v23 += 56;
        }
      }
      unsigned int v31 = (v24 * v27) >> 8;
      int v32 = v23;
      unint64_t v33 = v17 >> v23;
      if (v31 >= (v17 >> v23))
      {
        unsigned int v34 = v31 + 1;
      }
      else
      {
        unsigned int v34 = v24 - v31;
        v17 -= (unint64_t)(v31 + 1) << v32;
        *(void *)a1 = v17;
      }
      unsigned int v35 = __clz(v34) ^ 0x18;
      unsigned int v36 = v34 << v35;
      int v23 = v32 - v35;
      unsigned int v24 = v36 - 1;
      *(_DWORD *)(a1 + 8) = v36 - 1;
      *(_DWORD *)(a1 + 12) = v32 - v35;
      if (v31 < v33) {
        break;
      }
      int v9 = *(unsigned __int8 **)(a2 + 8 * v26);
      v25 += 0x100000000;
      LODWORD(v6) = v6 + 1;
      if (v26++ == 16) {
        return 16;
      }
    }
    uint64_t v38 = *(void *)(a2 + 8 * ((int)v6 + 1));
    int v39 = v9[2];
    if (v23 < 0)
    {
      unint64_t v40 = *(unint64_t **)(a1 + 16);
      if (!v40) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v40 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v23 = *(_DWORD *)(a1 + 12);
        unint64_t v17 = *(void *)a1;
      }
      else
      {
        unint64_t v41 = *v40;
        *(void *)(a1 + 16) = (char *)v40 + 7;
        *((void *)&v42 + 1) = v17;
        *(void *)&long long v42 = bswap64(v41);
        unint64_t v17 = v42 >> 8;
        *(void *)a1 = v17;
        v23 += 56;
      }
    }
    int v43 = v23;
    unsigned int v44 = (v24 * v39) >> 8;
    int v45 = v43;
    unint64_t v46 = v17 >> v43;
    if (v44 >= v46)
    {
      unsigned int v47 = v44 + 1;
    }
    else
    {
      unsigned int v47 = v24 - v44;
      *(void *)a1 = v17 - ((unint64_t)(v44 + 1) << v45);
    }
    unsigned int v48 = __clz(v47) ^ 0x18;
    unsigned int v49 = v47 << v48;
    int v50 = v45 - v48;
    *(_DWORD *)(a1 + 8) = v49 - 1;
    *(_DWORD *)(a1 + 12) = v50;
    if (v44 >= v46)
    {
      int v9 = (unsigned __int8 *)(v38 + 11);
      Largeint Value = 1;
      if (v50 < 0)
      {
LABEL_37:
        char v52 = *(unint64_t **)(a1 + 16);
        if (!v52) {
          VP8GetValue_cold_1();
        }
        if ((unint64_t)v52 >= *(void *)(a1 + 32))
        {
          VP8LoadFinalBytes(a1);
          int v50 = *(_DWORD *)(a1 + 12);
        }
        else
        {
          unint64_t v53 = *v52;
          *(void *)(a1 + 16) = (char *)v52 + 7;
          *((void *)&v54 + 1) = *(void *)a1;
          *(void *)&long long v54 = bswap64(v53);
          *(void *)a1 = v54 >> 8;
          v50 += 56;
        }
      }
    }
    else
    {
      Largeint Value = GetLargeValue(a1, v9);
      int v9 = (unsigned __int8 *)(v38 + 22);
      int v50 = *(_DWORD *)(a1 + 12);
      if (v50 < 0) {
        goto LABEL_37;
      }
    }
    unsigned int v55 = *(_DWORD *)(a1 + 8);
    unint64_t v56 = *(void *)a1;
    int v57 = (v55 >> 1) - (*(void *)a1 >> v50);
    int v10 = v50 - 1;
    int v11 = (v55 + (v57 >> 31)) | 1;
    *(_DWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 12) = v50 - 1;
    *(void *)a1 = v56 - ((unint64_t)(((v55 >> 1) + 1) & (v57 >> 31)) << v50);
    *(_WORD *)(a6 + 2 * kZigzag[v25 >> 32]) = ((LargeValue ^ (v57 >> 31)) - (v57 >> 31))
                                              * *(_WORD *)(a4 + 4 * ((int)v6 > 0));
    uint64_t result = 16;
    BOOL v59 = (int)v6 < 15;
    uint64_t v6 = (v6 + 1);
    if (!v59) {
      return result;
    }
  }
}

uint64_t GetLargeValue(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = a2[3];
  int v6 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  if (v5 < 0)
  {
    int v7 = *(unint64_t **)(a1 + 16);
    if (!v7) {
      VP8GetValue_cold_1();
    }
    if ((unint64_t)v7 >= *(void *)(a1 + 32))
    {
      VP8LoadFinalBytes(a1);
      int v5 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      unint64_t v8 = *v7;
      *(void *)(a1 + 16) = (char *)v7 + 7;
      *((void *)&v9 + 1) = *(void *)a1;
      *(void *)&long long v9 = bswap64(v8);
      *(void *)a1 = v9 >> 8;
      v5 += 56;
    }
  }
  unsigned int v10 = (v6 * v4) >> 8;
  unint64_t v11 = *(void *)a1;
  int v12 = v5;
  uint64_t v13 = *(void *)a1 >> v5;
  if (v10 >= v13)
  {
    unsigned int v14 = v10 + 1;
  }
  else
  {
    unsigned int v14 = v6 - v10;
    v11 -= (unint64_t)(v10 + 1) << v12;
    *(void *)a1 = v11;
  }
  unsigned int v15 = __clz(v14) ^ 0x18;
  unsigned int v16 = v14 << v15;
  int v17 = v12 - v15;
  unsigned int v18 = v16 - 1;
  *(_DWORD *)(a1 + 8) = v16 - 1;
  *(_DWORD *)(a1 + 12) = v12 - v15;
  if (v10 >= v13)
  {
    int v23 = a2[4];
    if (v17 < 0)
    {
      unsigned int v24 = *(unint64_t **)(a1 + 16);
      if (!v24) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v24 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v17 = *(_DWORD *)(a1 + 12);
        unint64_t v11 = *(void *)a1;
      }
      else
      {
        unint64_t v25 = *v24;
        *(void *)(a1 + 16) = (char *)v24 + 7;
        *((void *)&v26 + 1) = v11;
        *(void *)&long long v26 = bswap64(v25);
        unint64_t v11 = v26 >> 8;
        *(void *)a1 = v11;
        v17 += 56;
      }
    }
    unsigned int v41 = (v18 * v23) >> 8;
    int v42 = v17;
    unint64_t v43 = v11 >> v17;
    if (v41 >= (v11 >> v17))
    {
      unsigned int v44 = v41 + 1;
    }
    else
    {
      unsigned int v44 = v18 - v41;
      v11 -= (unint64_t)(v41 + 1) << v42;
      *(void *)a1 = v11;
    }
    unsigned int v45 = __clz(v44) ^ 0x18;
    unsigned int v46 = v44 << v45;
    int v47 = v42 - v45;
    unsigned int v48 = v46 - 1;
    *(_DWORD *)(a1 + 8) = v46 - 1;
    *(_DWORD *)(a1 + 12) = v42 - v45;
    if (v41 >= v43) {
      return 2;
    }
    int v49 = a2[5];
    if (v47 < 0)
    {
      int v50 = *(unint64_t **)(a1 + 16);
      if (!v50) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v50 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v47 = *(_DWORD *)(a1 + 12);
        unint64_t v11 = *(void *)a1;
      }
      else
      {
        unint64_t v51 = *v50;
        *(void *)(a1 + 16) = (char *)v50 + 7;
        *((void *)&v52 + 1) = v11;
        *(void *)&long long v52 = bswap64(v51);
        unint64_t v11 = v52 >> 8;
        *(void *)a1 = v11;
        v47 += 56;
      }
    }
    unsigned int v79 = (v48 * v49) >> 8;
    int v80 = v47;
    if (v79 >= (v11 >> v47))
    {
      unsigned int v81 = v79 + 1;
      uint64_t result = 3;
    }
    else
    {
      unsigned int v81 = v48 - v79;
      *(void *)a1 = v11 - ((unint64_t)(v79 + 1) << v80);
      uint64_t result = 4;
    }
    goto LABEL_96;
  }
  int v19 = a2[6];
  if (v17 < 0)
  {
    unsigned int v20 = *(unint64_t **)(a1 + 16);
    if (!v20) {
      VP8GetValue_cold_1();
    }
    if ((unint64_t)v20 >= *(void *)(a1 + 32))
    {
      VP8LoadFinalBytes(a1);
      int v17 = *(_DWORD *)(a1 + 12);
      unint64_t v11 = *(void *)a1;
    }
    else
    {
      unint64_t v21 = *v20;
      *(void *)(a1 + 16) = (char *)v20 + 7;
      *((void *)&v22 + 1) = v11;
      *(void *)&long long v22 = bswap64(v21);
      unint64_t v11 = v22 >> 8;
      *(void *)a1 = v11;
      v17 += 56;
    }
  }
  unsigned int v27 = (v18 * v19) >> 8;
  unint64_t v28 = v11 >> v17;
  if (v27 >= (v11 >> v17))
  {
    unsigned int v29 = v27 + 1;
  }
  else
  {
    unsigned int v29 = v18 - v27;
    v11 -= (unint64_t)(v27 + 1) << v17;
    *(void *)a1 = v11;
  }
  unsigned int v30 = __clz(v29) ^ 0x18;
  int v31 = v17 - v30;
  int v32 = (v29 << v30) - 1;
  *(_DWORD *)(a1 + 8) = v32;
  *(_DWORD *)(a1 + 12) = v31;
  if (v27 < v28)
  {
    int v33 = a2[8];
    if (v31 < 0)
    {
      unsigned int v34 = *(unint64_t **)(a1 + 16);
      if (!v34) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v34 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v31 = *(_DWORD *)(a1 + 12);
        unint64_t v11 = *(void *)a1;
      }
      else
      {
        unint64_t v35 = *v34;
        *(void *)(a1 + 16) = (char *)v34 + 7;
        *((void *)&v36 + 1) = v11;
        *(void *)&long long v36 = bswap64(v35);
        unint64_t v11 = v36 >> 8;
        *(void *)a1 = v11;
        v31 += 56;
      }
    }
    unsigned int v54 = (v32 * v33) >> 8;
    unint64_t v55 = v11 >> v31;
    if (v54 >= (v11 >> v31))
    {
      unsigned int v56 = v54 + 1;
      uint64_t v57 = 9;
    }
    else
    {
      unsigned int v56 = v32 - v54;
      v11 -= (unint64_t)(v54 + 1) << v31;
      *(void *)a1 = v11;
      uint64_t v57 = 10;
    }
    unsigned int v58 = __clz(v56) ^ 0x18;
    int v59 = v31 - v58;
    int v60 = (v56 << v58) - 1;
    *(_DWORD *)(a1 + 8) = v60;
    *(_DWORD *)(a1 + 12) = v59;
    int v61 = a2[v57];
    if (v59 < 0)
    {
      int v62 = *(unint64_t **)(a1 + 16);
      if (!v62) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v62 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v59 = *(_DWORD *)(a1 + 12);
        unint64_t v11 = *(void *)a1;
      }
      else
      {
        unint64_t v63 = *v62;
        *(void *)(a1 + 16) = (char *)v62 + 7;
        *((void *)&v64 + 1) = v11;
        *(void *)&long long v64 = bswap64(v63);
        unint64_t v11 = v64 >> 8;
        *(void *)a1 = v11;
        v59 += 56;
      }
    }
    unsigned int v82 = (v60 * v61) >> 8;
    int v83 = v59;
    unint64_t v84 = v11 >> v59;
    if (v82 >= v84)
    {
      unsigned int v85 = v82 + 1;
    }
    else
    {
      unsigned int v85 = v60 - v82;
      v11 -= (unint64_t)(v82 + 1) << v83;
      *(void *)a1 = v11;
    }
    BOOL v86 = v82 < v84;
    unsigned int v87 = __clz(v85) ^ 0x18;
    unsigned int v88 = v85 << v87;
    int v89 = v83 - v87;
    unsigned int v90 = v88 - 1;
    *(_DWORD *)(a1 + 8) = v88 - 1;
    *(_DWORD *)(a1 + 12) = v89;
    unsigned int v91 = v86 | (2 * (v54 < v55));
    uint64_t v92 = *(&kCat3456 + v91);
    int v93 = *v92;
    if (*v92)
    {
      int v94 = 0;
      unsigned int v95 = v92 + 1;
      do
      {
        if (v89 < 0)
        {
          int v96 = *(unint64_t **)(a1 + 16);
          if (!v96) {
            VP8GetValue_cold_1();
          }
          if ((unint64_t)v96 >= *(void *)(a1 + 32))
          {
            VP8LoadFinalBytes(a1);
            int v89 = *(_DWORD *)(a1 + 12);
            unint64_t v11 = *(void *)a1;
          }
          else
          {
            unint64_t v97 = *v96;
            *(void *)(a1 + 16) = (char *)v96 + 7;
            *((void *)&v98 + 1) = v11;
            *(void *)&long long v98 = bswap64(v97);
            unint64_t v11 = v98 >> 8;
            *(void *)a1 = v11;
            v89 += 56;
          }
        }
        unsigned int v99 = (v90 * v93) >> 8;
        int v100 = v89;
        unint64_t v101 = v11 >> v89;
        if (v99 >= v101)
        {
          unsigned int v102 = v99 + 1;
        }
        else
        {
          unsigned int v102 = v90 - v99;
          v11 -= (unint64_t)(v99 + 1) << v100;
          *(void *)a1 = v11;
        }
        BOOL v103 = v99 < v101;
        unsigned int v104 = __clz(v102) ^ 0x18;
        unsigned int v105 = v102 << v104;
        int v89 = v100 - v104;
        unsigned int v90 = v105 - 1;
        *(_DWORD *)(a1 + 8) = v105 - 1;
        *(_DWORD *)(a1 + 12) = v89;
        int v94 = v103 | (2 * v94);
        int v106 = *v95++;
        int v93 = v106;
      }
      while (v106);
    }
    else
    {
      int v94 = 0;
    }
    return (v94 + (8 << v91) + 3);
  }
  int v37 = a2[7];
  if (v31 < 0)
  {
    uint64_t v38 = *(unint64_t **)(a1 + 16);
    if (!v38) {
      VP8GetValue_cold_1();
    }
    if ((unint64_t)v38 >= *(void *)(a1 + 32))
    {
      VP8LoadFinalBytes(a1);
      int v31 = *(_DWORD *)(a1 + 12);
      unint64_t v11 = *(void *)a1;
    }
    else
    {
      unint64_t v39 = *v38;
      *(void *)(a1 + 16) = (char *)v38 + 7;
      *((void *)&v40 + 1) = v11;
      *(void *)&long long v40 = bswap64(v39);
      unint64_t v11 = v40 >> 8;
      *(void *)a1 = v11;
      v31 += 56;
    }
  }
  unsigned int v65 = (v32 * v37) >> 8;
  int v66 = v31;
  unint64_t v67 = v11 >> v31;
  if (v65 >= (v11 >> v31))
  {
    unsigned int v68 = v65 + 1;
  }
  else
  {
    unsigned int v68 = v32 - v65;
    v11 -= (unint64_t)(v65 + 1) << v66;
    *(void *)a1 = v11;
  }
  unsigned int v69 = __clz(v68) ^ 0x18;
  unsigned int v70 = v68 << v69;
  int v71 = v66 - v69;
  unsigned int v72 = v70 - 1;
  *(_DWORD *)(a1 + 8) = v70 - 1;
  *(_DWORD *)(a1 + 12) = v66 - v69;
  if (v65 >= v67)
  {
    if (v71 < 0)
    {
      unint64_t v76 = *(unint64_t **)(a1 + 16);
      if (!v76) {
        VP8GetValue_cold_1();
      }
      if ((unint64_t)v76 >= *(void *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        int v71 = *(_DWORD *)(a1 + 12);
        unint64_t v11 = *(void *)a1;
      }
      else
      {
        unint64_t v77 = *v76;
        *(void *)(a1 + 16) = (char *)v76 + 7;
        *((void *)&v78 + 1) = v11;
        *(void *)&long long v78 = bswap64(v77);
        unint64_t v11 = v78 >> 8;
        *(void *)a1 = v11;
        v71 += 56;
      }
    }
    unsigned int v116 = (159 * v72) >> 8;
    int v80 = v71;
    if (v116 >= (v11 >> v71))
    {
      unsigned int v81 = v116 + 1;
      uint64_t result = 5;
    }
    else
    {
      unsigned int v81 = v72 - v116;
      *(void *)a1 = v11 - ((unint64_t)(v116 + 1) << v80);
      uint64_t result = 6;
    }
LABEL_96:
    unsigned int v117 = __clz(v81) ^ 0x18;
    *(_DWORD *)(a1 + 8) = (v81 << v117) - 1;
    *(_DWORD *)(a1 + 12) = v80 - v117;
    return result;
  }
  if (v71 < 0)
  {
    unint64_t v73 = *(unint64_t **)(a1 + 16);
    if (!v73) {
      VP8GetValue_cold_1();
    }
    if ((unint64_t)v73 >= *(void *)(a1 + 32))
    {
      VP8LoadFinalBytes(a1);
      int v71 = *(_DWORD *)(a1 + 12);
      unint64_t v11 = *(void *)a1;
    }
    else
    {
      unint64_t v74 = *v73;
      *(void *)(a1 + 16) = (char *)v73 + 7;
      *((void *)&v75 + 1) = v11;
      *(void *)&long long v75 = bswap64(v74);
      unint64_t v11 = v75 >> 8;
      *(void *)a1 = v11;
      v71 += 56;
    }
  }
  unsigned int v107 = (165 * v72) >> 8;
  if (v107 >= (v11 >> v71))
  {
    unsigned int v108 = v107 + 1;
    unsigned int v109 = 7;
  }
  else
  {
    unsigned int v108 = v72 - v107;
    v11 -= (unint64_t)(v107 + 1) << v71;
    *(void *)a1 = v11;
    unsigned int v109 = 9;
  }
  unsigned int v110 = __clz(v108) ^ 0x18;
  int v111 = v71 - v110;
  int v112 = (v108 << v110) - 1;
  *(_DWORD *)(a1 + 8) = v112;
  *(_DWORD *)(a1 + 12) = v111;
  if (v111 < 0)
  {
    long long v113 = *(unint64_t **)(a1 + 16);
    if (!v113) {
      VP8GetValue_cold_1();
    }
    if ((unint64_t)v113 >= *(void *)(a1 + 32))
    {
      VP8LoadFinalBytes(a1);
      int v111 = *(_DWORD *)(a1 + 12);
      unint64_t v11 = *(void *)a1;
    }
    else
    {
      unint64_t v114 = *v113;
      *(void *)(a1 + 16) = (char *)v113 + 7;
      *((void *)&v115 + 1) = v11;
      *(void *)&long long v115 = bswap64(v114);
      unint64_t v11 = v115 >> 8;
      *(void *)a1 = v11;
      v111 += 56;
    }
  }
  unsigned int v118 = (145 * v112) >> 8;
  int v119 = v111;
  unint64_t v120 = v11 >> v111;
  if (v118 >= v120)
  {
    unsigned int v121 = v118 + 1;
  }
  else
  {
    unsigned int v121 = v112 - v118;
    *(void *)a1 = v11 - ((unint64_t)(v118 + 1) << v119);
  }
  unsigned int v122 = __clz(v121) ^ 0x18;
  *(_DWORD *)(a1 + 8) = (v121 << v122) - 1;
  *(_DWORD *)(a1 + 12) = v119 - v122;
  if (v118 >= v120) {
    return v109;
  }
  else {
    return v109 + 1;
  }
}

void VP8SetError_cold_1()
{
  __assert_rtn("VP8SetError", "vp8_dec.c", 90, "dec->incremental_ || error != VP8_STATUS_SUSPENDED");
}

void ResetSegmentHeader_cold_1()
{
  __assert_rtn("ResetSegmentHeader", "vp8_dec.c", 153, "hdr != NULL");
}

void VP8Decode_cold_1()
{
}

void compute_ideal_colors_and_weights_1plane(uint64_t a1, unsigned __int16 *a2, unsigned char *a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  float32x4_t v11 = *(float32x4_t *)(a1 + 3488);
  float32x4_t v12 = *(float32x4_t *)(a1 + 3520);
  {
    float32x4_t v60 = v12;
    float32x4_t v61 = v11;
    float32x4_t v12 = v60;
    float32x4_t v11 = v61;
    if (v59)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      float32x4_t v12 = v60;
      float32x4_t v11 = v61;
    }
  }
  int16x4_t v13 = vmovn_s32(vceqq_f32(v11, v12));
  uint16x4_t v14 = 0;
  v14.i16[3] = v13.i16[3];
  int8x16_t v15 = (int8x16_t)vmovl_u16(v14);
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  uint32x4_t v17 = (uint32x4_t)vandq_s8(v15, v16);
  double v18 = *(double *)&mask(vmask4)::shift;
  int32x4_t v19 = (int32x4_t)vshlq_u32(v17, (uint32x4_t)mask(vmask4)::shift);
  v19.i32[0] = vaddvq_s32(v19);
  if (v19.i32[0])
  {
    compute_ideal_colors_and_weights_3_comp(a1, a2, (uint64_t)a3, 3, *(double *)v19.i64, v18, a6, a7, a8);
  }
  else
  {
    uint64_t v20 = *(unsigned __int8 *)(a1 + 3456);
    if (!*(unsigned char *)(a1 + 3456)) {
      compute_ideal_colors_and_weights_1plane();
    }
    uint64_t v21 = *a2;
    if (!*a2) {
      compute_ideal_colors_and_weights_1plane();
    }
    float32x2_t v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 3536), *(int8x16_t *)(a1 + 3536), 8uLL), *(float32x2_t *)(a1 + 3536));
    float v23 = 0.25 * vpadd_f32(v22, v22).f32[0];
    memset(v62, 0, sizeof(v62));
    int8x16_t v26 = compute_avgs_and_dirs_4_comp(a2, (float32x4_t *)a1, (uint64_t)v62);
    uint64_t v24 = 0;
    unint64_t v25 = a2 + 112;
    v26.i64[0] = 0;
    char v27 = 1;
    float v28 = 0.0;
    do
    {
      unsigned int v29 = (int32x4_t *)&v62[2 * v24];
      float32x4_t v30 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v26, vaddq_f32((float32x4_t)vdupq_laneq_s32(v29[1], 2), vaddq_f32((float32x4_t)v29[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29[1].i8, 1)))), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v29[1]), (int8x16_t)v29[1]);
      int8x16_t v31 = (int8x16_t)vmulq_f32(v30, v30);
      *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v31.i8);
      int32x2_t v32 = (int32x2_t)vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8);
      if (*(float *)v32.i32 == 0.0)
      {
        v33.i64[0] = 0x3F0000003F000000;
        v33.i64[1] = 0x3F0000003F000000;
      }
      else
      {
        float32x4_t v33 = vdivq_f32(v30, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v32, 0)));
      }
      float32x4_t v34 = *(float32x4_t *)v29;
      uint64_t v35 = *((unsigned __int8 *)a2 + v24 + 4);
      float v36 = -1.0e10;
      float v37 = 1.0e10;
      if (*((unsigned char *)a2 + v24 + 4))
      {
        uint64_t v38 = v25;
        uint64_t v39 = *((unsigned __int8 *)a2 + v24 + 4);
        float v37 = 1.0e10;
        float v36 = -1.0e10;
        do
        {
          unsigned int v40 = *(unsigned __int8 *)v38;
          uint64_t v38 = (unsigned __int16 *)((char *)v38 + 1);
          unsigned int v41 = (__int32 *)(a1 + 4 * v40);
          v42.i32[0] = *v41;
          v42.i32[1] = v41[216];
          v42.i32[2] = v41[432];
          v42.i32[3] = v41[648];
          int8x16_t v43 = (int8x16_t)vmulq_f32(v33, vsubq_f32(v42, v34));
          *(float32x2_t *)v43.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), *(float32x2_t *)v43.i8);
          float v44 = vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8).f32[0];
          *(float *)&a3[4 * v40 + 160] = v44;
          if (v44 < v37) {
            float v37 = v44;
          }
          if (v44 > v36) {
            float v36 = v44;
          }
          --v39;
        }
        while (v39);
      }
      if (v36 <= v37) {
        float v45 = 0.0000001;
      }
      else {
        float v45 = v36;
      }
      if (v36 <= v37) {
        float v37 = 0.0;
      }
      float v46 = v45 - v37;
      if (v24) {
        v27 &= (float)(v46 * v46) == v28;
      }
      else {
        float v28 = v46 * v46;
      }
      int v47 = (float32x4_t *)&a3[16 * v24];
      v47[2] = vaddq_f32(v34, vmulq_n_f32(v33, v37));
      v47[6] = vaddq_f32(v34, vmulq_n_f32(v33, v45));
      if (v35)
      {
        uint64_t v48 = 0;
        float v49 = v23 * (float)(v46 * v46);
        float v50 = 1.0 / v46;
        do
        {
          unint64_t v51 = (float *)&a3[4 * *((unsigned __int8 *)v25 + v48)];
          float v52 = v50 * (float)(v51[40] - v37);
          float v53 = fmaxf(v52, 0.0);
          if (v52 <= 1.0) {
            float v54 = v53;
          }
          else {
            float v54 = 1.0;
          }
          v51[40] = v54;
          v51[256] = v49;
          ++v48;
        }
        while (v35 != v48);
      }
      ++v24;
      v25 += 108;
    }
    while (v24 != v21);
    uint64_t v55 = ((_WORD)v20 + 3) & 0x1FC;
    if (v55 > v20)
    {
      uint64_t v56 = v20 - v55;
      uint64_t v57 = &a3[4 * v20];
      do
      {
        *((_DWORD *)v57 + 40) = 0;
        *((_DWORD *)v57 + 256) = 0;
        v57 += 4;
      }
      while (!__CFADD__(v56++, 1));
    }
    *a3 = v27 & 1;
  }
}

void compute_ideal_colors_and_weights_3_comp(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *a2;
  *(_DWORD *)(a3 + 16) = v9;
  if (!v9) {
    compute_ideal_colors_and_weights_3_comp();
  }
  uint64_t v11 = *(unsigned __int8 *)(a1 + 3456);
  if (!*(unsigned char *)(a1 + 3456)) {
    compute_ideal_colors_and_weights_3_comp();
  }
  v15.i64[0] = 0;
  v15.i32[3] = 0;
  memset(v65, 0, sizeof(v65));
  switch(a4)
  {
    case 2:
      v15.i32[2] = HIDWORD(*(_OWORD *)(a1 + 3536));
      *(float32x2_t *)v15.i8 = vadd_f32(*(float32x2_t *)(a1 + 3536), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      v15.i32[0] = vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).u32[0];
      uint64_t v18 = a1 + 864;
LABEL_9:
      uint64_t v17 = a1;
      goto LABEL_10;
    case 1:
      v19.i32[0] = *(_OWORD *)(a1 + 3536);
      v19.i32[1] = *(void *)(a1 + 3544);
      v19.i32[2] = HIDWORD(*(_OWORD *)(a1 + 3536));
      v19.i32[3] = 0;
      *(float32x2_t *)v15.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), *(float32x2_t *)v19.i8);
      v15.i32[0] = vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).u32[0];
      uint64_t v18 = a1 + 1728;
      goto LABEL_9;
    case 0:
      int8x16_t v16 = *(int8x16_t *)(a1 + 3536);
      v16.i32[3] = 0;
      *(float32x2_t *)v15.i8 = vadd_f32(*(float32x2_t *)(a1 + 3536), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      v15.i32[0] = vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).u32[0];
      uint64_t v17 = a1 + 864;
      uint64_t v18 = a1 + 1728;
LABEL_10:
      uint64_t v20 = a1 + 2592;
      float v21 = *(float *)v15.i32 * 0.33333;
      goto LABEL_11;
  }
  int8x16_t v61 = *(int8x16_t *)(a1 + 3536);
  v61.i32[3] = 0;
  float32x2_t v64 = (float32x2_t)vextq_s8(v61, v61, 8uLL).u64[0];
  float32x2_t v62 = vadd_f32(*(float32x2_t *)(a1 + 3536), v64);
  double v63 = COERCE_DOUBLE(vpadd_f32(v62, v62));
  uint64_t v18 = a1 + 864;
  uint64_t v20 = a1 + 1728;
  v64.i32[0] = 1051372203;
  float v21 = 0.33333 * *(float *)&v63;
  if (a4 == 3)
  {
    float32x4_t v22 = (float32x4_t)compute_avgs_and_dirs_3_comp_rgb(a2, a1, (uint64_t)v65, v63, *(double *)&v64, a7, a8, a9);
    uint64_t v17 = a1;
    goto LABEL_12;
  }
  uint64_t v17 = a1;
LABEL_11:
  float32x4_t v22 = (float32x4_t)compute_avgs_and_dirs_3_comp(a2, (float32x4_t *)a1, a4, (uint64_t)v65);
LABEL_12:
  uint64_t v24 = 0;
  if (v9 <= 1) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = v9;
  }
  int8x16_t v26 = a2 + 112;
  v22.i64[0] = 0;
  char v27 = 1;
  float v28 = 0.0;
  do
  {
    unsigned int v29 = (int32x4_t *)&v65[2 * v24];
    float32x4_t v30 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v22, vaddq_f32((float32x4_t)vdupq_laneq_s32(v29[1], 2), vaddq_f32((float32x4_t)v29[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29[1].i8, 1)))), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v29[1]), (int8x16_t)v29[1]);
    int8x16_t v31 = (int8x16_t)vmulq_f32(v30, v30);
    *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v31.i8);
    int32x2_t v32 = (int32x2_t)vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8);
    float32x4_t v33 = (float32x4_t)xmmword_1889B1B00;
    if (*(float *)v32.i32 != 0.0) {
      float32x4_t v33 = vdivq_f32(v30, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v32, 0)));
    }
    float32x4_t v34 = *(float32x4_t *)v29;
    uint64_t v35 = *((unsigned __int8 *)a2 + v24 + 4);
    float v36 = -1.0e10;
    float v37 = 1.0e10;
    if (*((unsigned char *)a2 + v24 + 4))
    {
      uint64_t v38 = *((unsigned __int8 *)a2 + v24 + 4);
      uint64_t v39 = v26;
      float v37 = 1.0e10;
      float v36 = -1.0e10;
      do
      {
        unsigned int v40 = *(unsigned __int8 *)v39;
        uint64_t v39 = (unsigned __int16 *)((char *)v39 + 1);
        v23.i32[0] = *(_DWORD *)(v17 + 4 * v40);
        v23.i32[1] = *(_DWORD *)(v18 + 4 * v40);
        v23.i32[2] = *(_DWORD *)(v20 + 4 * v40);
        float32x4_t v41 = vmulq_f32(v33, vsubq_f32(v23, v34));
        float32x4_t v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)));
        *(_DWORD *)(a3 + 4 * v40 + 160) = v23.i32[0];
        if (v23.f32[0] < v37) {
          float v37 = v23.f32[0];
        }
        if (v23.f32[0] > v36) {
          float v36 = v23.f32[0];
        }
        --v38;
      }
      while (v38);
    }
    if (v36 <= v37)
    {
      float v36 = 0.0000001;
      float v37 = 0.0;
    }
    float v42 = v36 - v37;
    if (v24) {
      v27 &= (float)(v42 * v42) == v28;
    }
    else {
      float v28 = v42 * v42;
    }
    if (v35)
    {
      uint64_t v43 = 0;
      float v44 = v21 * (float)(v42 * v42);
      float v45 = 1.0 / v42;
      do
      {
        uint64_t v46 = a3 + 4 * *((unsigned __int8 *)v26 + v43);
        float v47 = v45 * (float)(*(float *)(v46 + 160) - v37);
        float v48 = fmaxf(v47, 0.0);
        if (v47 <= 1.0) {
          float v49 = v48;
        }
        else {
          float v49 = 1.0;
        }
        *(float *)(v46 + 160) = v49;
        *(float *)(v46 + 1024) = v44;
        ++v43;
      }
      while (v35 != v43);
    }
    int32x4_t v50 = (int32x4_t)vaddq_f32(v34, vmulq_n_f32(v33, v37));
    int32x4_t v51 = (int32x4_t)vaddq_f32(v34, vmulq_n_f32(v33, v36));
    int32x4_t v52 = *(int32x4_t *)(a1 + 3488);
    int32x4_t v53 = *(int32x4_t *)(a1 + 3520);
    if (a4)
    {
      if (a4 == 1)
      {
        int32x4_t v56 = vzip1q_s32(v52, v50);
        *(int32x4_t *)(a3 + 16 * v24 + 32) = vtrn2q_s32(v56, vuzp1q_s32(v56, v50));
        int32x4_t v57 = vzip1q_s32(v53, v51);
        int32x4_t v55 = vtrn2q_s32(v57, vuzp1q_s32(v57, v51));
      }
      else if (a4 == 2)
      {
        int32x4_t v54 = vtrn1q_s32(v52, v50);
        v54.i64[0] = v50.i64[0];
        *(int32x4_t *)(a3 + 16 * v24 + 32) = v54;
        int32x4_t v55 = vtrn1q_s32(v53, v51);
        v55.i64[0] = v51.i64[0];
      }
      else
      {
        v50.i32[3] = HIDWORD(*(_OWORD *)(a1 + 3488));
        *(int32x4_t *)(a3 + 16 * v24 + 32) = v50;
        v51.i32[3] = v53.i32[3];
        int32x4_t v55 = v51;
      }
    }
    else
    {
      *(int8x16_t *)(a3 + 16 * v24 + 32) = vextq_s8(vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL), (int8x16_t)v50, 0xCuLL);
      int32x4_t v55 = (int32x4_t)vextq_s8(vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL), (int8x16_t)v51, 0xCuLL);
    }
    *(int32x4_t *)(a3 + 16 * v24++ + 96) = v55;
    v26 += 108;
  }
  while (v24 != v25);
  if ((((_WORD)v11 + 3) & 0x1FCu) > v11)
  {
    uint64_t v58 = a3 + 4 * v11;
    uint64_t v59 = v11 - (((_WORD)v11 + 3) & 0x1FC);
    do
    {
      *(_DWORD *)(v58 + 160) = 0;
      *(_DWORD *)(v58 + 1024) = 0;
      v58 += 4;
    }
    while (!__CFADD__(v59++, 1));
  }
  *(unsigned char *)a3 = v27 & 1;
}

uint64_t compute_ideal_colors_and_weights_2planes(block_size_descriptor *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  partition_info = block_size_descriptor::get_partition_info(a1, 1u, 0);
  float32x4_t v13 = *(float32x4_t *)(a2 + 3488);
  float32x4_t v14 = *(float32x4_t *)(a2 + 3520);
  int8x16_t v15 = (uint32x4_t *)&unk_1E90FF000;
  {
    float32x4_t v30 = v14;
    float32x4_t v31 = v13;
    float32x4_t v14 = v30;
    float32x4_t v13 = v31;
    int8x16_t v15 = (uint32x4_t *)&unk_1E90FF000;
    if (v29)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      float32x4_t v14 = v30;
      float32x4_t v13 = v31;
      int8x16_t v15 = (uint32x4_t *)&unk_1E90FF000;
    }
  }
  if (a3 >= 4) {
    compute_ideal_colors_and_weights_2planes();
  }
  int16x4_t v16 = vmovn_s32(vceqq_f32(v13, v14));
  uint16x4_t v17 = 0;
  v17.i16[3] = v16.i16[3];
  int8x16_t v18 = (int8x16_t)vmovl_u16(v17);
  v19.i64[0] = 0x100000001;
  v19.i64[1] = 0x100000001;
  uint32x4_t v20 = (uint32x4_t)vandq_s8(v18, v19);
  uint32x4_t v21 = v15[55];
  int32x4_t v22 = (int32x4_t)vshlq_u32(v20, v21);
  v22.i32[0] = vaddvq_s32(v22);
  switch(a3)
  {
    case 2u:
      if (v22.i32[0])
      {
        compute_ideal_colors_and_weights_2_comp(a2, partition_info, a4, 0, 1u, *(double *)v22.i64, *(double *)v21.i64, v10, v11);
        unsigned int v23 = 2;
        goto LABEL_19;
      }
      unsigned int v23 = 2;
      uint64_t v24 = a2;
      uint64_t v25 = (unsigned __int16 *)partition_info;
      uint64_t v26 = a4;
      int v27 = 2;
      break;
    case 1u:
      if (v22.i32[0])
      {
        compute_ideal_colors_and_weights_2_comp(a2, partition_info, a4, 0, 2u, *(double *)v22.i64, *(double *)v21.i64, v10, v11);
        unsigned int v23 = 1;
        goto LABEL_19;
      }
      unsigned int v23 = 1;
      uint64_t v24 = a2;
      uint64_t v25 = (unsigned __int16 *)partition_info;
      uint64_t v26 = a4;
      int v27 = 1;
      break;
    case 0u:
      if (v22.i32[0]) {
        compute_ideal_colors_and_weights_2_comp(a2, partition_info, a4, 1u, 2u, *(double *)v22.i64, *(double *)v21.i64, v10, v11);
      }
      else {
        compute_ideal_colors_and_weights_3_comp(a2, (unsigned __int16 *)partition_info, a4, 0, *(double *)v22.i64, *(double *)v21.i64, v10, *(double *)v11.i64, v12);
      }
      unsigned int v23 = 0;
      goto LABEL_19;
    default:
      if (v22.i32[0]) {
        compute_ideal_colors_and_weights_2planes();
      }
      unsigned int v23 = 3;
      uint64_t v24 = a2;
      uint64_t v25 = (unsigned __int16 *)partition_info;
      uint64_t v26 = a4;
      int v27 = 3;
      break;
  }
  compute_ideal_colors_and_weights_3_comp(v24, v25, v26, v27, *(double *)v22.i64, *(double *)v21.i64, v10, *(double *)v11.i64, v12);
LABEL_19:

  return compute_ideal_colors_and_weights_1_comp(a2, (unsigned __int16 *)partition_info, a5, v23);
}

char *block_size_descriptor::get_partition_info(block_size_descriptor *this, unsigned int a2, unsigned int a3)
{
  if (a2 < 2)
  {
    unsigned int v3 = 0;
  }
  else
  {
    unsigned int v3 = *((unsigned __int16 *)this + 1024 * (unint64_t)(a2 - 2) + a3 + 7330328);
    if (v3 == 0xFFFF) {
LABEL_10:
    }
      block_size_descriptor::get_partition_info();
  }
  if (v3 >= *((_DWORD *)this + a2 + 11)) {
    goto LABEL_10;
  }
  unsigned int v4 = (a2 << 10) - 2048;
  if (a2 == 1) {
    unsigned int v4 = 3072;
  }
  int v5 = (char *)this + 1088 * v4 + 11317232;
  if (*(unsigned __int16 *)&v5[1088 * v3 + 2] != a3) {
    block_size_descriptor::get_partition_info();
  }
  return &v5[1088 * v3];
}

_WORD *compute_ideal_colors_and_weights_2_comp(uint64_t a1, _WORD *a2, uint64_t a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8, int32x4_t a9)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = (unsigned __int16)*a2;
  *(_DWORD *)(a3 + 16) = v9;
  if (!v9) {
    compute_ideal_colors_and_weights_2_comp();
  }
  uint64_t v11 = *(unsigned __int8 *)(a1 + 3456);
  if (!*(unsigned char *)(a1 + 3456)) {
    compute_ideal_colors_and_weights_2_comp();
  }
  memset(v65, 0, sizeof(v65));
  if (!a4 && a5 == 1)
  {
    HIDWORD(v16) = 0;
    float32x2_t v17 = vadd_f32(*(float32x2_t *)(a1 + 3536), 0);
    float32x2_t v18 = vpadd_f32(v17, v17);
    uint64_t v19 = a1 + 864;
LABEL_9:
    uint64_t v23 = a1;
    goto LABEL_13;
  }
  if (!a4 && a5 == 2)
  {
    uint32x4_t v20 = (const float *)(a1 + 3536);
    *(float32x2x2_t *)(&v16 - 1) = vld2_f32(v20);
    a8 = 0.0;
    float32x2_t v22 = vadd_f32(v21, 0);
    float32x2_t v18 = vpadd_f32(v22, v22);
    uint64_t v19 = a1 + 1728;
    goto LABEL_9;
  }
  if (a4 != 1 || a5 != 2) {
    compute_ideal_colors_and_weights_2_comp();
  }
  HIDWORD(v16) = 0;
  float32x2_t v24 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)(a1 + 3536), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 3536), *(int8x16_t *)(a1 + 3536), 8uLL), 4uLL), 0);
  float32x2_t v18 = vpadd_f32(v24, v24);
  uint64_t v23 = a1 + 864;
  uint64_t v19 = a1 + 1728;
LABEL_13:
  LODWORD(v16) = 0.5;
  float v25 = v18.f32[0] * 0.5;
  uint64_t result = compute_avgs_and_dirs_2_comp(a2, (int8x16_t *)a1, a4, a5, (uint64_t)v65, *(double *)&v18, v16, a8, a9);
  uint64_t v28 = 0;
  float32x4_t v29 = (float32x4_t)vdupq_n_s32(a5);
  int8x16_t v30 = (int8x16_t)vceqq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_18898C3A0);
  int8x16_t v31 = (int8x16_t)vceqq_s32((int32x4_t)v29, (int32x4_t)xmmword_18898C3A0);
  if (v9 <= 1) {
    uint64_t v32 = 1;
  }
  else {
    uint64_t v32 = v9;
  }
  float32x4_t v33 = (unsigned __int8 *)(a2 + 112);
  v29.i64[0] = 0;
  char v34 = 1;
  float v35 = 0.0;
  do
  {
    float v36 = (float32x4_t *)&v65[2 * v28];
    float32x4_t v37 = v36[1];
    float32x4_t v38 = (float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL);
    *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v37.f32);
    *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
    float32x4_t v39 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v29, v38), 0), (int8x16_t)vsubq_f32((float32x4_t)0, v37), (int8x16_t)v37);
    int8x16_t v40 = (int8x16_t)vmulq_f32(v39, v39);
    *(float32x2_t *)v40.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), *(float32x2_t *)v40.i8);
    int32x2_t v41 = (int32x2_t)vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8);
    float32x4_t v42 = (float32x4_t)xmmword_1889B1B10;
    if (*(float *)v41.i32 != 0.0) {
      float32x4_t v42 = vdivq_f32(v39, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v41, 0)));
    }
    float32x4_t v43 = *v36;
    uint64_t v44 = *((unsigned __int8 *)a2 + v28 + 4);
    float v45 = -1.0e10;
    float v46 = 1.0e10;
    if (*((unsigned char *)a2 + v28 + 4))
    {
      uint64_t v47 = *((unsigned __int8 *)a2 + v28 + 4);
      float v48 = v33;
      float v46 = 1.0e10;
      float v45 = -1.0e10;
      do
      {
        unsigned int v49 = *v48++;
        v27.i32[0] = *(_DWORD *)(v23 + 4 * v49);
        v27.i32[1] = *(_DWORD *)(v19 + 4 * v49);
        float32x4_t v27 = vmulq_f32(v42, vsubq_f32(v27, v43));
        *(float32x2_t *)v27.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), *(float32x2_t *)v27.f32);
        v27.f32[0] = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32).f32[0];
        *(_DWORD *)(a3 + 4 * v49 + 160) = v27.i32[0];
        if (v27.f32[0] < v46) {
          float v46 = v27.f32[0];
        }
        if (v27.f32[0] > v45) {
          float v45 = v27.f32[0];
        }
        --v47;
      }
      while (v47);
    }
    if (v45 <= v46)
    {
      float v45 = 0.0000001;
      float v46 = 0.0;
    }
    float v50 = v45 - v46;
    if (v28) {
      v34 &= (float)(v50 * v50) == v35;
    }
    else {
      float v35 = v50 * v50;
    }
    if (v44)
    {
      uint64_t v51 = 0;
      float v52 = v25 * (float)(v50 * v50);
      float v53 = 1.0 / v50;
      do
      {
        uint64_t v54 = a3 + 4 * v33[v51];
        float v55 = v53 * (float)(*(float *)(v54 + 160) - v46);
        float v56 = fmaxf(v55, 0.0);
        if (v55 <= 1.0) {
          float v57 = v56;
        }
        else {
          float v57 = 1.0;
        }
        *(float *)(v54 + 160) = v57;
        *(float *)(v54 + 1024) = v52;
        ++v51;
      }
      while (v44 != v51);
    }
    int32x2_t v58 = (int32x2_t)vaddq_f32(v43, vmulq_n_f32(v42, v46)).u64[0];
    int32x2_t v59 = (int32x2_t)vaddq_f32(v43, vmulq_n_f32(v42, v45)).u64[0];
    float32x4_t v27 = (float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(v59, 0), v30);
    int8x16_t v60 = vorrq_s8(vbicq_s8(*(int8x16_t *)(a1 + 3520), v30), (int8x16_t)v27);
    int8x16_t v61 = (int8x16_t *)(a3 + 16 * v28);
    v61[2] = vorrq_s8(vbicq_s8(vorrq_s8(vbicq_s8(*(int8x16_t *)(a1 + 3488), v30), vandq_s8((int8x16_t)vdupq_lane_s32(v58, 0), v30)), v31), vandq_s8((int8x16_t)vdupq_lane_s32(v58, 1), v31));
    v61[6] = vorrq_s8(vbicq_s8(v60, v31), vandq_s8((int8x16_t)vdupq_lane_s32(v59, 1), v31));
    ++v28;
    v33 += 216;
  }
  while (v28 != v32);
  if ((((_WORD)v11 + 3) & 0x1FCu) > v11)
  {
    uint64_t v62 = a3 + 4 * v11;
    uint64_t v63 = v11 - (((_WORD)v11 + 3) & 0x1FC);
    do
    {
      *(_DWORD *)(v62 + 160) = 0;
      *(_DWORD *)(v62 + 1024) = 0;
      v62 += 4;
    }
    while (!__CFADD__(v63++, 1));
  }
  *(unsigned char *)a3 = v34 & 1;
  return result;
}

uint64_t compute_ideal_colors_and_weights_1_comp(uint64_t result, unsigned __int16 *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v6 = *a2;
  *(_DWORD *)(a3 + 16) = v6;
  if (!v6) {
    compute_ideal_colors_and_weights_1_comp();
  }
  uint64_t v7 = *(unsigned __int8 *)(result + 3456);
  if (!*(unsigned char *)(result + 3456)) {
    compute_ideal_colors_and_weights_1_comp();
  }
  switch(a4)
  {
    case 0u:
      float v8 = *(float *)(result + 3536);
      uint64_t v9 = result;
      break;
    case 1u:
      float v8 = *(float *)(result + 3540);
      uint64_t v9 = result + 864;
      break;
    case 2u:
      float v8 = *(float *)(result + 3544);
      uint64_t v9 = result + 1728;
      break;
    case 3u:
      float v8 = *(float *)(result + 3548);
      uint64_t v9 = result + 2592;
      break;
    default:
      compute_ideal_colors_and_weights_1_comp();
  }
  uint64_t v10 = 0;
  int8x16_t v11 = (int8x16_t)vceqq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_18898C3A0);
  if (v6 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v6;
  }
  float32x4_t v13 = a2 + 112;
  char v14 = 1;
  float v15 = 0.0;
  do
  {
    uint64_t v16 = *((unsigned __int8 *)a2 + v10 + 4);
    v4.i32[0] = -803929351;
    v5.i32[0] = 1343554297;
    if (*((unsigned char *)a2 + v10 + 4))
    {
      uint64_t v17 = *((unsigned __int8 *)a2 + v10 + 4);
      float32x2_t v18 = v13;
      v5.i32[0] = 1343554297;
      v4.i32[0] = -803929351;
      do
      {
        unsigned int v19 = *(unsigned __int8 *)v18;
        float32x2_t v18 = (unsigned __int16 *)((char *)v18 + 1);
        float v20 = *(float *)(v9 + 4 * v19);
        if (v20 < *(float *)v5.i32) {
          *(float *)v5.i32 = v20;
        }
        if (v20 > *(float *)v4.i32) {
          *(float *)v4.i32 = v20;
        }
        --v17;
      }
      while (v17);
    }
    if (*(float *)v4.i32 <= *(float *)v5.i32)
    {
      *(float *)v4.i32 = 0.0000001;
      *(float *)v5.i32 = 0.0;
    }
    float v21 = *(float *)v4.i32 - *(float *)v5.i32;
    if (v10) {
      v14 &= (float)(v21 * v21) == v15;
    }
    else {
      float v15 = v21 * v21;
    }
    if (*((unsigned char *)a2 + v10 + 4))
    {
      uint64_t v22 = 0;
      float v23 = v8 * (float)(v21 * v21);
      float v24 = 1.0 / v21;
      do
      {
        uint64_t v25 = *((unsigned __int8 *)v13 + v22);
        float v26 = v24 * (float)(*(float *)(v9 + 4 * v25) - *(float *)v5.i32);
        float v27 = fmaxf(v26, 0.0);
        if (v26 <= 1.0) {
          float v28 = v27;
        }
        else {
          float v28 = 1.0;
        }
        uint64_t v29 = a3 + 4 * v25;
        *(float *)(v29 + 160) = v28;
        *(float *)(v29 + 1024) = v23;
        ++v22;
      }
      while (v16 != v22);
    }
    int8x16_t v30 = (int8x16_t *)(a3 + 16 * v10);
    _OWORD v30[2] = vorrq_s8(vbicq_s8(*(int8x16_t *)(result + 3488), v11), vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0), v11));
    int8x16_t v5 = vbicq_s8(*(int8x16_t *)(result + 3520), v11);
    int8x16_t v4 = vorrq_s8(v5, vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v4.i8, 0), v11));
    v30[6] = v4;
    ++v10;
    v13 += 108;
  }
  while (v10 != v12);
  if ((((_WORD)v7 + 3) & 0x1FCu) > v7)
  {
    uint64_t v31 = a3 + 4 * v7;
    uint64_t v32 = v7 - (((_WORD)v7 + 3) & 0x1FC);
    do
    {
      *(_DWORD *)(v31 + 160) = 0;
      *(_DWORD *)(v31 + 1024) = 0;
      v31 += 4;
    }
    while (!__CFADD__(v32++, 1));
  }
  *(unsigned char *)a3 = v14 & 1;
  return result;
}

float32x2_t compute_error_of_weight_set_1plane(float32x4_t *a1, unsigned __int8 *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5, double a6, uint8x8_t a7)
{
  unint64_t v7 = *a2;
  if (!*a2) {
    compute_error_of_weight_set_1plane();
  }
  unsigned int v11 = a2[1];
  if (v11 < 3)
  {
    if (v11 == 2)
    {
      unint64_t v16 = 0;
      float32x4_t v13 = 0uLL;
      do
      {
        float32x4_t v25 = v13;
        *(double *)v17.i64 = bilinear_infill_vla_2((uint64_t)a2, (uint64_t)a3, v16, *(uint8x8_t *)a4.f32, *(uint8x8_t *)a5.f32);
        float32x4_t v18 = vsubq_f32(v17, a1[10]);
        a5 = a1[64];
        a4 = vmulq_f32(a5, vmulq_f32(v18, v18));
        float32x4_t v13 = vaddq_f32(v25, a4);
        v16 += 4;
        ++a1;
      }
      while (v16 < v7);
    }
    else
    {
      unint64_t v19 = 0;
      float32x4_t v13 = 0uLL;
      do
      {
        float32x4_t v20 = *a3++;
        float32x4_t v21 = vsubq_f32(v20, a1[10]);
        float32x4_t v13 = vaddq_f32(v13, vmulq_f32(a1[64], vmulq_f32(v21, v21)));
        v19 += 4;
        ++a1;
      }
      while (v19 < v7);
    }
  }
  else
  {
    unint64_t v12 = 0;
    float32x4_t v13 = 0uLL;
    do
    {
      float32x4_t v24 = v13;
      *(double *)v14.i64 = bilinear_infill_vla((uint64_t)a2, (uint64_t)a3, v12, *(uint8x8_t *)a4.f32, *(uint8x8_t *)a5.f32, *(uint8x8_t *)v13.f32, a7);
      float32x4_t v15 = vsubq_f32(v14, a1[10]);
      a5 = a1[64];
      a4 = vmulq_f32(a5, vmulq_f32(v15, v15));
      float32x4_t v13 = vaddq_f32(v24, a4);
      v12 += 4;
      ++a1;
    }
    while (v12 < v7);
  }
  float32x2_t v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), *(float32x2_t *)v13.f32);
  return vpadd_f32(v22, v22);
}

double bilinear_infill_vla(uint64_t a1, uint64_t a2, unsigned int a3, uint8x8_t a4, uint8x8_t a5, uint8x8_t a6, uint8x8_t a7)
{
  unint64_t v7 = (_DWORD *)(a1 + a3);
  __int32 v8 = *(_DWORD *)((char *)v7 + 222);
  unint64_t v7 = (_DWORD *)((char *)v7 + 222);
  a4.i32[0] = v8;
  a5.i32[0] = v7[54];
  a6.i32[0] = v7[108];
  a7.i32[0] = v7[162];
  float32x4_t v9 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  v9.i32[0] = *(_DWORD *)(a2 + 4 * v9.u32[0]);
  v9.i32[1] = *(_DWORD *)(a2 + 4 * v9.u32[1]);
  v9.i32[2] = *(_DWORD *)(a2 + 4 * v9.u32[2]);
  v9.i32[3] = *(_DWORD *)(a2 + 4 * v9.u32[3]);
  float32x4_t v10 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  v10.i32[0] = *(_DWORD *)(a2 + 4 * v10.u32[0]);
  v10.i32[1] = *(_DWORD *)(a2 + 4 * v10.u32[1]);
  v10.i32[2] = *(_DWORD *)(a2 + 4 * v10.u32[2]);
  v10.i32[3] = *(_DWORD *)(a2 + 4 * v10.u32[3]);
  float32x4_t v11 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a6));
  v11.i32[0] = *(_DWORD *)(a2 + 4 * v11.u32[0]);
  v11.i32[1] = *(_DWORD *)(a2 + 4 * v11.u32[1]);
  v11.i32[2] = *(_DWORD *)(a2 + 4 * v11.u32[2]);
  v11.i32[3] = *(_DWORD *)(a2 + 4 * v11.u32[3]);
  float32x4_t v12 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a7));
  v12.i32[0] = *(_DWORD *)(a2 + 4 * v12.u32[0]);
  v12.i32[1] = *(_DWORD *)(a2 + 4 * v12.u32[1]);
  v12.i32[2] = *(_DWORD *)(a2 + 4 * v12.u32[2]);
  v12.i32[3] = *(_DWORD *)(a2 + 4 * v12.u32[3]);
  *(void *)&double result = vaddq_f32(vaddq_f32(vmulq_f32(v9, *(float32x4_t *)(a1 + 4 * a3 + 1952)), vmulq_f32(v10, *(float32x4_t *)(a1 + 4 * a3 + 2816))), vaddq_f32(vmulq_f32(v11, *(float32x4_t *)(a1 + 4 * a3 + 3680)), vmulq_f32(v12, *(float32x4_t *)(a1 + 4 * a3 + 4544)))).u64[0];
  return result;
}

double bilinear_infill_vla_2(uint64_t a1, uint64_t a2, unsigned int a3, uint8x8_t a4, uint8x8_t a5)
{
  uint64_t v5 = a1 + a3;
  a4.i32[0] = *(_DWORD *)(v5 + 222);
  a5.i32[0] = *(_DWORD *)(v5 + 438);
  float32x4_t v6 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  v6.i32[0] = *(_DWORD *)(a2 + 4 * v6.u32[0]);
  v6.i32[1] = *(_DWORD *)(a2 + 4 * v6.u32[1]);
  v6.i32[2] = *(_DWORD *)(a2 + 4 * v6.u32[2]);
  v6.i32[3] = *(_DWORD *)(a2 + 4 * v6.u32[3]);
  float32x4_t v7 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  v7.i32[0] = *(_DWORD *)(a2 + 4 * v7.u32[0]);
  v7.i32[1] = *(_DWORD *)(a2 + 4 * v7.u32[1]);
  v7.i32[2] = *(_DWORD *)(a2 + 4 * v7.u32[2]);
  v7.i32[3] = *(_DWORD *)(a2 + 4 * v7.u32[3]);
  *(void *)&double result = vaddq_f32(vmulq_f32(v6, *(float32x4_t *)(a1 + 4 * a3 + 1952)), vmulq_f32(v7, *(float32x4_t *)(a1 + 4 * a3 + 2816))).u64[0];
  return result;
}

float32x2_t compute_error_of_weight_set_2planes(float32x4_t *a1, float32x4_t *a2, unsigned __int8 *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t a6, uint8x8_t a7, uint8x8_t a8)
{
  unint64_t v8 = *a3;
  if (!*a3) {
    compute_error_of_weight_set_2planes();
  }
  unsigned int v14 = a3[1];
  if (v14 < 3)
  {
    if (v14 == 2)
    {
      unint64_t v24 = 0;
      float32x4_t v16 = 0uLL;
      do
      {
        float32x4_t v40 = v16;
        *(double *)v25.i64 = bilinear_infill_vla_2((uint64_t)a3, (uint64_t)a4, v24, *(uint8x8_t *)a6.f32, a7);
        float32x4_t v26 = vsubq_f32(v25, a1[10]);
        float32x4_t v27 = a1[64];
        float32x4_t v38 = vmulq_f32(v27, vmulq_f32(v26, v26));
        *(double *)v28.i64 = bilinear_infill_vla_2((uint64_t)a3, (uint64_t)a5, v24, *(uint8x8_t *)v38.f32, *(uint8x8_t *)v27.f32);
        float32x4_t v29 = vsubq_f32(v28, a2[10]);
        a7 = *(uint8x8_t *)v38.f32;
        a6 = vaddq_f32(v38, vmulq_f32(a2[64], vmulq_f32(v29, v29)));
        float32x4_t v16 = vaddq_f32(v40, a6);
        v24 += 4;
        ++a1;
        ++a2;
      }
      while (v24 < v8);
    }
    else
    {
      unint64_t v30 = 0;
      float32x4_t v16 = 0uLL;
      do
      {
        float32x4_t v31 = *a4++;
        float32x4_t v32 = vsubq_f32(v31, a1[10]);
        float32x4_t v33 = *a5++;
        float32x4_t v34 = vsubq_f32(v33, a2[10]);
        float32x4_t v16 = vaddq_f32(v16, vaddq_f32(vmulq_f32(a1[64], vmulq_f32(v32, v32)), vmulq_f32(a2[64], vmulq_f32(v34, v34))));
        v30 += 4;
        ++a1;
        ++a2;
      }
      while (v30 < v8);
    }
  }
  else
  {
    unint64_t v15 = 0;
    float32x4_t v16 = 0uLL;
    do
    {
      float32x4_t v39 = v16;
      *(double *)v17.i64 = bilinear_infill_vla((uint64_t)a3, (uint64_t)a4, v15, *(uint8x8_t *)a6.f32, a7, a8, *(uint8x8_t *)v16.f32);
      float32x4_t v18 = vsubq_f32(v17, a1[10]);
      float32x4_t v19 = a1[64];
      float32x4_t v37 = vmulq_f32(v19, vmulq_f32(v18, v18));
      *(double *)v22.i64 = bilinear_infill_vla((uint64_t)a3, (uint64_t)a5, v15, *(uint8x8_t *)v37.f32, *(uint8x8_t *)v19.f32, v20, v21);
      float32x4_t v23 = vsubq_f32(v22, a2[10]);
      a7 = *(uint8x8_t *)v37.f32;
      a6 = vaddq_f32(v37, vmulq_f32(a2[64], vmulq_f32(v23, v23)));
      float32x4_t v16 = vaddq_f32(v39, a6);
      v15 += 4;
      ++a1;
      ++a2;
    }
    while (v15 < v8);
  }
  float32x2_t v35 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
  return vpadd_f32(v35, v35);
}

__int32 *compute_ideal_weights_for_decimation(__int32 *result, float32x4_t *a2, _OWORD *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2->u8[0];
  if (!a2->i8[0]) {
    compute_ideal_weights_for_decimation();
  }
  unint64_t v5 = a2->u8[2];
  if (!a2->i8[2]) {
    compute_ideal_weights_for_decimation();
  }
  float32x4_t v6 = a3;
  float32x4_t v7 = (int32x2_t *)result;
  unint64_t v8 = (void *)((char *)a3 + 4 * ((v5 - 1) & 0xFFFFFFFC));
  void *v8 = 0;
  v8[1] = 0;
  if (v3 == v5)
  {
    unint64_t v9 = 0;
    float32x4_t v10 = (long long *)(result + 40);
    do
    {
      long long v11 = *v10++;
      *v6++ = v11;
      v9 += 4;
    }
    while (v9 < v3);
  }
  else
  {
    bzero(v74, 0x360uLL);
    unint64_t v12 = 0;
    int v13 = v7->u8[0];
    unsigned int v14 = v7 + 128;
    float32x4_t v15 = (float32x4_t)vdupq_lane_s32(v7[128], 0);
    float32x4_t v16 = (unsigned __int8 *)&a2[338];
    float32x4_t v17 = v7 + 20;
    uint64_t v18 = 19296;
    int32x4_t v19 = vdupq_n_s32(0x2EDBE6FFu);
    do
    {
      uint8x8_t v20 = (const float *)&v16[v12];
      uint8x8_t v21 = (uint8x8_t)vld1_dup_f32(v20);
      unsigned int v22 = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v21)));
      if (!v22) {
        compute_ideal_weights_for_decimation();
      }
      unint64_t v23 = 0;
      unint64_t v24 = (unint64_t)v22 << 6;
      float32x4_t v25 = 0uLL;
      uint64_t v26 = v18;
      float32x4_t v27 = (float32x4_t)v19;
      do
      {
        float32x4_t v28 = &a2[342].f32[v12 / 4 + v23 / 4];
        uint8x8_t v29 = (uint8x8_t)vld1_dup_f32(v28);
        int8x16_t v30 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v29));
        uint64_t v31 = v30.u32[0];
        uint64_t v32 = v30.u32[1];
        *(int32x2_t *)v30.i8 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
        v33.i64[0] = v30.u32[0];
        v33.i64[1] = v30.u32[1];
        float32x4_t v34 = v33;
        if (!v13)
        {
          v15.i32[0] = v14->i32[v31];
          v15.i32[1] = v14->i32[v32];
          v15.i32[2] = v14->i32[v34.i64[1]];
          v15.i32[3] = v14->i32[v34.i64[0]];
        }
        v23 += 64;
        float32x4_t v35 = vmulq_f32(*(float32x4_t *)((char *)a2 + v26), v15);
        float32x4_t v27 = vaddq_f32(v27, v35);
        float v36 = (__int32 *)v17 + v34.i64[0];
        v34.i32[0] = v17->i32[v31];
        v34.i32[1] = v17->i32[v32];
        v34.i32[2] = v17->i32[v34.i64[1]];
        v34.i32[3] = *v36;
        float32x4_t v37 = vmulq_f32(v35, v34);
        float32x4_t v25 = vaddq_f32(v25, v37);
        v26 += 256;
      }
      while (v24 != v23);
      float32x4_t v38 = vdivq_f32(v25, v27);
      v6[v12 / 4] = v38;
      v12 += 4;
      v18 += 16;
    }
    while (v12 < v5);
    float32x4_t v73 = v15;
    if (a2->u8[1] >= 3u)
    {
      unint64_t v41 = 0;
      float32x4_t v42 = (int32x4_t *)v74;
      do
      {
        *(double *)v19.i64 = bilinear_infill_vla((uint64_t)a2, (uint64_t)v6, v41, *(uint8x8_t *)v19.i8, *(uint8x8_t *)v38.f32, *(uint8x8_t *)v27.f32, *(uint8x8_t *)v37.f32);
        *v42++ = v19;
        v41 += 4;
      }
      while (v41 < v3);
    }
    else
    {
      unint64_t v39 = 0;
      float32x4_t v40 = (int32x4_t *)v74;
      do
      {
        *(double *)v19.i64 = bilinear_infill_vla_2((uint64_t)a2, (uint64_t)v6, v39, *(uint8x8_t *)v19.i8, *(uint8x8_t *)v38.f32);
        *v40++ = v19;
        v39 += 4;
      }
      while (v39 < v3);
    }
    unint64_t v43 = 0;
    uint64_t v44 = (unsigned int *)&a2[342];
    float v45 = a2 + 1206;
    int32x4_t v46 = vdupq_n_s32(0x2EDBE6FFu);
    __asm
    {
      FMOV            V1.4S, #-16.0
      FMOV            V2.4S, #-0.25
      FMOV            V3.4S, #0.25
    }
    float32x4_t v54 = v73;
    do
    {
      float v55 = (const float *)&v16[v43];
      uint8x8_t v56 = (uint8x8_t)vld1_dup_f32(v55);
      v56.i32[0] = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v56)));
      uint64_t v57 = v56.u32[0];
      if (!v56.i32[0]) {
        compute_ideal_weights_for_decimation();
      }
      float32x4_t v58 = 0uLL;
      int32x2_t v59 = v45;
      int8x16_t v60 = v44;
      float32x4_t v61 = (float32x4_t)v46;
      do
      {
        unsigned int v62 = *v60;
        v60 += 16;
        int8x16_t v63 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vdup_n_s32(v62)));
        uint64_t v64 = v63.u32[0];
        uint64_t v65 = v63.u32[1];
        *(int32x2_t *)v63.i8 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
        v66.i64[0] = v63.u32[0];
        v66.i64[1] = v63.u32[1];
        float32x4_t v67 = v66;
        if (!v13)
        {
          v54.i32[0] = v14->i32[v64];
          v54.i32[1] = v14->i32[v65];
          v54.i32[2] = v14->i32[v67.i64[1]];
          v54.i32[3] = v14->i32[v67.i64[0]];
        }
        float32x4_t v68 = vmulq_f32(*v59, v54);
        uint64_t v69 = v67.i64[1];
        uint64_t v70 = v67.i64[0];
        int v71 = &v74[v67.i64[0]];
        v67.i32[0] = v74[v64];
        v67.i32[1] = v74[v65];
        v67.i32[2] = v74[v67.i64[1]];
        v67.i32[3] = *v71;
        double result = (__int32 *)v17 + v69;
        v72.i32[0] = v17->i32[v64];
        v72.i32[1] = v17->i32[v65];
        v72.i32[2] = *result;
        v72.i32[3] = v17->i32[v70];
        float32x4_t v61 = vaddq_f32(v61, vmulq_f32(*v59, v68));
        float32x4_t v58 = vaddq_f32(v58, vmulq_f32(v68, vsubq_f32(v67, v72)));
        v59 += 16;
        --v57;
      }
      while (v57);
      v6[v43 / 4] = vaddq_f32((float32x4_t)v6[v43 / 4], vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(v58, _Q1), v61), _Q2), _Q3));
      v43 += 4;
      ++v44;
      ++v45;
    }
    while (v43 < v5);
  }
  return result;
}

uint64_t compute_quantized_weights_for_decimation(uint64_t result, float32x4_t *a2, float32x4_t *a3, uint64_t a4, unsigned int a5, float a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v11 = *(unsigned __int8 *)(result + 2);
  if (!*(unsigned char *)(result + 2)) {
    compute_quantized_weights_for_decimation();
  }
  unint64_t v12 = (int8x16_t *)((char *)&quant_and_xfer_tables + 226 * a5);
  if (a5 > 0x14) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = dword_1889B1B7C[a5];
  }
  int32x4_t v14 = vdupq_n_s32(v13);
  if (*(float *)&a7 > a6)
  {
    *(float *)&a11 = a6;
  }
  else
  {
    *(float *)&a7 = 1.0;
    *(float *)&a11 = 0.0;
  }
  float v16 = *(float *)&a7 - *(float *)&a11;
  float v17 = 1.0 / (float)(*(float *)&a7 - *(float *)&a11);
  *(float *)&a7 = *(float *)&a11 * v17;
  float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  float32x4_t v15 = (const float *)((char *)&compute_quantized_weights_for_decimation(decimation_info const&,float,float,float const*,float *,unsigned char *,quant_method)::quant_levels_m1
                      + 4 * a5);
  float32x4_t v19 = vld1q_dup_f32(v15);
  float v20 = v16 * 0.015625;
  float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
  int8x16_t v22 = *v12;
  if (a5 - 9 >= 0xC)
  {
    unint64_t v42 = 0;
    __asm { FMOV            V17.4S, #1.0 }
    v44.i64[0] = 0x100000001;
    v44.i64[1] = 0x100000001;
    v45.i64[0] = 0xFFFFFF00FFFFFF00;
    v45.i64[1] = 0xFFFFFF00FFFFFF00;
    v46.i64[0] = 0x4300000043000000;
    v46.i64[1] = 0x4300000043000000;
    do
    {
      float32x4_t v47 = *a2++;
      float32x4_t v48 = vminnmq_f32(vmaxnmq_f32(vsubq_f32(vmulq_n_f32(v47, v17), v18), (float32x4_t)0), _Q17);
      int32x4_t v49 = vcvtq_s32_f32(vmulq_f32(v19, v48));
      int8x16_t v50 = (int8x16_t)vminq_s32(vaddq_s32(v49, v44), v14);
      int32x4_t v51 = (int32x4_t)vqtbl1q_s8(v22, vorrq_s8((int8x16_t)v49, v45));
      int32x4_t v52 = (int32x4_t)vqtbl1q_s8(v22, vorrq_s8(v50, v45));
      float32x4_t v53 = vcvtq_f32_s32(v51);
      float32x4_t v54 = vcvtq_f32_s32(v52);
      int8x16_t v55 = (int8x16_t)vcgtq_f32(vmulq_f32(v48, v46), vaddq_f32(v53, v54));
      *a3++ = vaddq_f32(v21, vmulq_n_f32((float32x4_t)vbslq_s8(v55, (int8x16_t)v54, (int8x16_t)v53), v20));
      *(_DWORD *)(a4 + v42) = vqtbl1q_s8(vbslq_s8(v55, (int8x16_t)v52, (int8x16_t)v51), (int8x16_t)xmmword_1889B1B20).u32[0];
      v42 += 4;
    }
    while (v42 < v11);
  }
  else
  {
    unint64_t v23 = 0;
    int8x16_t v24 = v12[1];
    __asm { FMOV            V17.4S, #1.0 }
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    v31.i64[0] = 0xFFFFFF00FFFFFF00;
    v31.i64[1] = 0xFFFFFF00FFFFFF00;
    v32.i64[0] = 0x4300000043000000;
    v32.i64[1] = 0x4300000043000000;
    do
    {
      float32x4_t v33 = *a2++;
      float32x4_t v34 = vminnmq_f32(vmaxnmq_f32(vsubq_f32(vmulq_n_f32(v33, v17), v18), (float32x4_t)0), _Q17);
      int32x4_t v35 = vcvtq_s32_f32(vmulq_f32(v19, v34));
      int8x16_t v36 = (int8x16_t)vminq_s32(vaddq_s32(v35, v30), v14);
      int32x4_t v37 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)v22.i8, vorrq_s8((int8x16_t)v35, v31));
      int32x4_t v38 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)v22.i8, vorrq_s8(v36, v31));
      float32x4_t v39 = vcvtq_f32_s32(v37);
      float32x4_t v40 = vcvtq_f32_s32(v38);
      int8x16_t v41 = (int8x16_t)vcgtq_f32(vmulq_f32(v34, v32), vaddq_f32(v39, v40));
      *a3++ = vaddq_f32(v21, vmulq_n_f32((float32x4_t)vbslq_s8(v41, (int8x16_t)v40, (int8x16_t)v39), v20));
      *(_DWORD *)(a4 + v23) = vqtbl1q_s8(vbslq_s8(v41, (int8x16_t)v38, (int8x16_t)v37), (int8x16_t)xmmword_1889B1B20).u32[0];
      v23 += 4;
    }
    while (v23 < v11);
  }
  return result;
}

void recompute_ideal_colors_1plane(float32x4_t *a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(unsigned __int8 *)(a3 + 2);
  if (!*(unsigned char *)(a3 + 2)) {
    recompute_ideal_colors_1plane();
  }
  unint64_t v9 = a1[216].u8[0];
  if (!a1[216].i8[0]) {
    recompute_ideal_colors_1plane();
  }
  unsigned int v11 = (unsigned __int16)*a2;
  if (!*a2) {
    recompute_ideal_colors_1plane();
  }
  unint64_t v16 = 0;
  memset(v123, 0, sizeof(v123));
  float32x4_t v17 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  float32x4_t v18 = (float32x4_t *)v123;
  do
  {
    float32x4_t v19 = (const float *)(a4 + v16);
    uint8x8_t v20 = (uint8x8_t)vld1_dup_f32(v19);
    *v18++ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v20))), v17);
    v16 += 4;
  }
  while (v16 < v7);
  bzero(v122, 0x360uLL);
  unsigned int v26 = *(unsigned __int8 *)(a3 + 1);
  if (v26 == 1)
  {
    float32x4_t v27 = v123;
  }
  else
  {
    if (v26 >= 3)
    {
      unint64_t v30 = 0;
      int8x16_t v31 = v122;
      do
      {
        *(double *)&long long v21 = bilinear_infill_vla(a3, (uint64_t)v123, v30, *(uint8x8_t *)&v21, v22, v23, v24);
        *v31++ = v21;
        v30 += 4;
      }
      while (v30 < v9);
    }
    else
    {
      unint64_t v28 = 0;
      uint8x8_t v29 = v122;
      do
      {
        *(double *)&long long v21 = bilinear_infill_vla_2(a3, (uint64_t)v123, v28, *(uint8x8_t *)&v21, v22);
        *v29++ = v21;
        v28 += 4;
      }
      while (v28 < v9);
    }
    float32x4_t v27 = v122;
  }
  uint64_t v32 = 0;
  float32x4_t v33 = vmulq_n_f32(a1[219], (float)v9);
  if (v11 <= 1) {
    uint64_t v34 = 1;
  }
  else {
    uint64_t v34 = v11;
  }
  int32x4_t v35 = (unsigned __int8 *)(a2 + 112);
  float32x4_t v36 = (float32x4_t)vdupq_n_s32(0x233877AAu);
  __asm { FMOV            V16.4S, #1.0 }
  float32x4_t v41 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  do
  {
    uint64_t v42 = *((unsigned __int8 *)a2 + v32 + 4);
    if (v11 >= 2)
    {
      if (!*((unsigned char *)a2 + v32 + 4)) {
        recompute_ideal_colors_1plane();
      }
      float32x4_t v33 = 0uLL;
      uint64_t v43 = *((unsigned __int8 *)a2 + v32 + 4);
      int32x4_t v44 = v35;
      do
      {
        int v45 = *v44++;
        float32x4_t v46 = &a1->i32[v45];
        v47.i32[0] = *v46;
        v47.i32[1] = v46[216];
        v47.i32[2] = v46[432];
        v47.i32[3] = v46[648];
        float32x4_t v33 = vaddq_f32(v33, v47);
        --v43;
      }
      while (v43);
    }
    float32x4_t v48 = a1[221];
    float32x4_t v33 = vmulq_f32(v33, v48);
    _Q22 = vmaxnmq_f32(vmulq_n_f32(v48, (float)v42), v36);
    float32x4_t v50 = vdivq_f32(v33, _Q22);
    v50.i32[3] = 0;
    int8x16_t v51 = (int8x16_t)vmulq_f32(v50, v50);
    *(float32x2_t *)v51.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), *(float32x2_t *)v51.i8);
    float32x4_t v52 = vdivq_f32(v50, vsqrtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), 0)));
    float32x4_t v53 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)));
    if (*((unsigned char *)a2 + v32 + 4))
    {
      uint64_t v54 = 0;
      float32x4_t v55 = 0uLL;
      float v56 = 1.0;
      float v57 = 0.0;
      float v58 = 1.0e-17;
      float v59 = 1.0e10;
      float v60 = 0.0;
      v25.i64[0] = 0;
      float v61 = 0.0;
      float v62 = 0.0;
      float32x4_t v63 = 0uLL;
      _Q28 = 0uLL;
      do
      {
        uint64_t v65 = v35[v54];
        float32x4_t v66 = &a1->i32[v65];
        v67.i32[0] = *v66;
        v67.i32[1] = v66[216];
        v67.i32[2] = v66[432];
        v67.i32[3] = v66[648];
        float v68 = *(float *)&v27[4 * v65];
        float v69 = 1.0 - v68;
        if (v68 < v56) {
          float v56 = *(float *)&v27[4 * v65];
        }
        float32x4_t v70 = vmulq_f32(v52, v67);
        float32x4_t v71 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2);
        float32x4_t v72 = vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1));
        if (v68 > v60) {
          float v60 = *(float *)&v27[4 * v65];
        }
        float32x4_t v73 = vaddq_f32(v71, v72);
        v25.f32[0] = v25.f32[0] + (float)(v69 * v69);
        float v61 = v61 + (float)(v69 * v68);
        if (v73.f32[0] < v59) {
          float v59 = v73.f32[0];
        }
        float v62 = v62 + (float)(v68 * v68);
        float v58 = v58 + v68;
        float32x4_t v74 = vmulq_n_f32(v67, v68);
        float32x4_t v63 = vaddq_f32(v63, v74);
        float32x4_t v75 = vsubq_f32(v67, v74);
        v76.i32[3] = 0;
        if (v73.f32[0] > v57) {
          float v57 = v73.f32[0];
        }
        float32x4_t v55 = vaddq_f32(v55, v75);
        *(uint64_t *)((char *)v76.i64 + 4) = *(unsigned int *)&v27[4 * v65];
        v76.f32[0] = 1.0 - v68;
        _Q28 = vaddq_f32(_Q28, vmulq_n_f32(v76, vmulq_f32(v53, v73).f32[0]));
        ++v54;
      }
      while (v42 != v54);
    }
    else
    {
      float v56 = 1.0;
      float v62 = 0.0;
      _Q28.i64[0] = 0;
      float32x4_t v63 = 0uLL;
      float32x4_t v55 = 0uLL;
      float v58 = 1.0e-17;
      float v61 = 0.0;
      v25.i64[0] = 0;
      float v60 = 0.0;
      float v59 = 1.0e10;
      float v57 = 0.0;
    }
    float32x4_t v77 = vmulq_f32(v48, v55);
    float32x4_t v78 = vmulq_f32(v48, v63);
    float v79 = v59 / fmaxf(v57, 1.0e-10);
    float v80 = fmaxf(v79, 0.0);
    if (v79 <= 1.0) {
      float v81 = v80;
    }
    else {
      float v81 = 1.0;
    }
    float32x4_t v82 = vmulq_n_f32(v52, v57);
    float32x4_t v83 = v82;
    v83.f32[3] = v81;
    *(float32x4_t *)(a6 + 16 * v32) = v83;
    if (v56 >= (float)(v60 * 0.999))
    {
      float32x4_t v103 = vdivq_f32(vaddq_f32(v78, v77), _Q22);
      int8x16_t v104 = vorrq_s8((int8x16_t)vcltzq_f32(v103), (int8x16_t)vcgezq_f32(v103));
      unsigned int v105 = (int8x16_t *)(a5 + 16 * v32);
      v105[1] = vbslq_s8(v104, (int8x16_t)v103, v105[1]);
      v105[5] = vbslq_s8(v104, (int8x16_t)v103, v105[5]);
      v82.i32[3] = 1.0;
      goto LABEL_47;
    }
    float32x4_t v84 = v25;
    v84.f32[1] = v61;
    v84.f32[2] = v62;
    _Q18 = vmulq_n_f32(v84, v53.f32[0]);
    float32x4_t v86 = vmulq_n_f32(v48, v62);
    float32x4_t v87 = vmulq_n_f32(v48, v61);
    float32x4_t v88 = vmulq_n_f32(v48, v25.f32[0]);
    float32x4_t v89 = vsubq_f32(vmulq_f32(v86, v88), vmulq_f32(v87, v87));
    float32x4_t v90 = vdivq_f32(_Q16, v89);
    _S10 = _Q18.i32[2];
    float v92 = vmlas_n_f32(vmuls_lane_f32(-_Q18.f32[1], *(float32x2_t *)_Q18.f32, 1), _Q18.f32[2], _Q18.f32[0]);
    float32x4_t v93 = vaddq_f32(vmulq_f32(v86, v86), vaddq_f32(vmulq_f32(v88, v88), vmulq_f32(v87, vaddq_f32(v87, v87))));
    __asm { FMLA            S11, S10, V18.S[2] }
    _Q20 = vmulq_f32(vsubq_f32(vmulq_f32(v77, v86), vmulq_f32(v78, v87)), v90);
    float32x4_t v96 = vmulq_f32(vsubq_f32(vmulq_f32(v78, v88), vmulq_f32(v77, v87)), v90);
    int8x16_t v97 = (int8x16_t)vcgtq_f32(vmaxq_f32(v89, vsubq_f32((float32x4_t)0, v89)), vmulq_f32(v93, v41));
    float32x4_t v25 = (float32x4_t)vcgtq_f32(v96, _Q20);
    int8x16_t v98 = vandq_s8(v97, vorrq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(_Q20, v96)));
    unsigned int v99 = (int8x16_t *)(a5 + 16 * v32);
    v99[1] = vbslq_s8(v98, (int8x16_t)_Q20, v99[1]);
    v99[5] = vbslq_s8(v98, (int8x16_t)v96, v99[5]);
    __asm { FMLA            S20, S28, V18.S[2] }
    float v100 = _Q20.f32[0] * (float)(1.0 / v92);
    float v101 = vmlas_n_f32((float)-_Q18.f32[1] * _Q28.f32[0], _Q28.f32[1], _Q18.f32[0]) * (float)(1.0 / v92);
    if (fabsf(v92) > (float)(_S11 * 0.0001) && v100 < v101)
    {
      float32x4_t v82 = vmulq_n_f32(v52, v101);
      v82.f32[3] = v100 / v101;
LABEL_47:
      *(float32x4_t *)(a6 + 16 * v32) = v82;
    }
    if (a1[222].u8[1] | a1[235].u8[9])
    {
      float32x4_t v106 = vmulq_n_f32(v48, v58);
      _S24 = v53.f32[0] * v62;
      float32x4_t v108 = vaddq_f32(v78, v77);
      v108.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).u32[0];
      float v109 = vmulq_f32(v106, v106).f32[0];
      __asm
      {
        FMLA            S31, S24, V22.S[2]
        FMLA            S20, S31, V22.S[1]
      }
      v25.f32[0] = vmuls_lane_f32(_Q22.f32[2], *(float32x2_t *)v106.f32, 1) * v106.f32[0];
      *(float32x2_t *)v112.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q22.f32), *(float32x2_t *)v106.f32);
      *(float32x2_t *)v113.f32 = vmul_laneq_f32(*(float32x2_t *)v112.f32, v106, 2);
      float32x4_t v114 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q22, 2);
      v114.f32[0] = -_Q22.f32[2];
      v114.f32[1] = -_Q22.f32[2];
      v114.f32[2] = -v106.f32[2];
      v112.i32[2] = vmuls_lane_f32(_Q22.f32[0], *(float32x2_t *)_Q22.f32, 1);
      v112.i32[3] = v112.i32[2];
      float32x4_t v115 = vmulq_f32(v114, v112);
      _Q20.i32[1] = v25.i32[0];
      _Q20.i64[1] = __PAIR64__(v115.u32[0], v113.u32[0]);
      v25.i32[1] = vmlas_n_f32((float)-_Q22.f32[2] * v109, _S31, _Q22.f32[0]);
      v25.i64[1] = __PAIR64__(v115.u32[1], v113.u32[1]);
      __asm { FMLA            S21, S24, V22.S[1] }
      v113.i64[1] = __PAIR64__(v115.u32[2], COERCE_UNSIGNED_INT(vmlas_n_f32((float)-_Q22.f32[1] * v109, _S21, _Q22.f32[0])));
      float32x4_t v117 = vmulq_n_f32(v108, 1.0 / vmlas_n_f32(vmulq_f32(v106, v115).f32[0], _Q20.f32[0], _Q22.f32[0]));
      int8x16_t v118 = (int8x16_t)vmulq_f32(_Q20, v117);
      *(float32x2_t *)v118.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), *(float32x2_t *)v118.i8);
      int8x16_t v119 = (int8x16_t)vmulq_f32(v25, v117);
      *(float32x2_t *)v119.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), *(float32x2_t *)v119.i8);
      int8x16_t v120 = (int8x16_t)vmulq_f32(v113, v117);
      *(float32x2_t *)v120.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), *(float32x2_t *)v120.i8);
      int8x16_t v121 = (int8x16_t)vmulq_f32(v115, v117);
      *(float32x2_t *)v121.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), *(float32x2_t *)v121.i8);
      *(int32x2_t *)v117.f32 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (int32x2_t)vpadd_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8));
      v117.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8).u32[0], vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8).u32[0]);
      *(float32x4_t *)(a7 + 16 * v32) = v117;
    }
    ++v32;
    v35 += 216;
  }
  while (v32 != v34);
}

void recompute_ideal_colors_2planes(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, float32x4_t *a7, int8x16_t *a8, unsigned int a9)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = a1[216].u8[0];
  if (!a1[216].i8[0]) {
    recompute_ideal_colors_2planes();
  }
  unint64_t v13 = *(unsigned __int8 *)(a3 + 2);
  if (!*(unsigned char *)(a3 + 2)) {
    recompute_ideal_colors_2planes();
  }
  memset(v146, 0, sizeof(v146));
  memset(v145, 0, sizeof(v145));
  if (v13 > 0x20) {
    recompute_ideal_colors_2planes();
  }
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  do
  {
    uint8x8_t v22 = (const float *)(a4 + v20);
    uint8x8_t v23 = (uint8x8_t)vld1_dup_f32(v22);
    v146[v19] = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v23))), v21);
    uint8x8_t v24 = (const float *)(a5 + v20);
    uint8x8_t v25 = (uint8x8_t)vld1_dup_f32(v24);
    v145[v19] = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v25))), v21);
    v20 += 4;
    ++v19;
  }
  while (v20 < v13);
  bzero(v144, 0x360uLL);
  bzero(v143, 0x360uLL);
  unsigned int v31 = *(unsigned __int8 *)(a3 + 1);
  if (v31 == 1)
  {
    uint64_t v32 = (float *)v146;
    float32x4_t v33 = (float *)v145;
  }
  else
  {
    unint64_t v142 = a7;
    uint64_t v34 = a8;
    if (v31 >= 3)
    {
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      do
      {
        *(double *)&long long v41 = bilinear_infill_vla(a3, (uint64_t)v146, v40, *(uint8x8_t *)&v26, v27, v28, v29);
        uint64_t v32 = (float *)v144;
        *(_OWORD *)&v144[v39] = v41;
        *(double *)&long long v26 = bilinear_infill_vla(a3, (uint64_t)v145, v40, *(uint8x8_t *)&v41, v42, v43, v44);
        float32x4_t v33 = (float *)v143;
        *(_OWORD *)&v143[v39] = v26;
        v40 += 4;
        v39 += 16;
      }
      while (v40 < v11);
    }
    else
    {
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      do
      {
        *(double *)&long long v37 = bilinear_infill_vla_2(a3, (uint64_t)v146, v36, *(uint8x8_t *)&v26, v27);
        uint64_t v32 = (float *)v144;
        *(_OWORD *)&v144[v35] = v37;
        *(double *)&long long v26 = bilinear_infill_vla_2(a3, (uint64_t)v145, v36, *(uint8x8_t *)&v37, v38);
        float32x4_t v33 = (float *)v143;
        *(_OWORD *)&v143[v35] = v26;
        v36 += 4;
        v35 += 16;
      }
      while (v36 < v11);
    }
    a8 = v34;
    a7 = v142;
  }
  uint64_t v45 = *(unsigned __int8 *)(a2 + 3);
  float32x4_t v46 = a1[221];
  float32x4_t v47 = vmulq_n_f32(v46, (float)v45);
  float32x4_t v48 = (float32x4_t)vdupq_n_s32(0x233877AAu);
  float32x4_t v49 = a1[219];
  v49.i32[3] = 0;
  int8x16_t v50 = (int8x16_t)vmulq_f32(v49, v49);
  *(float32x2_t *)v50.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), *(float32x2_t *)v50.i8);
  float32x4_t v51 = vdivq_f32(v49, vsqrtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8), 0)));
  int8x16_t v52 = (int8x16_t)vceqq_s32(vdupq_n_s32(a9), (int32x4_t)xmmword_18898C3A0);
  float32x4_t v53 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)));
  if (*(unsigned char *)(a2 + 3))
  {
    float32x4_t v54 = (float32x4_t)vdupq_n_s32(0x233877AAu);
    float32x4_t v55 = 0uLL;
    float v56 = 0.0;
    float v57 = 1.0e10;
    float v58 = (__int32 *)a1;
    float v59 = 1.0;
    float v60 = 0.0;
    float v61 = 1.0;
    float v62 = 0.0;
    v30.i64[0] = 0;
    float v63 = 0.0;
    float v64 = 0.0;
    float v65 = 0.0;
    float v66 = 0.0;
    float v67 = 0.0;
    float32x4_t v68 = 0uLL;
    _Q17 = 0uLL;
    do
    {
      v70.i32[0] = *v58;
      v70.i32[1] = v58[216];
      v70.i32[2] = v58[432];
      v70.i32[3] = v58[648];
      float v71 = *v32++;
      *(float *)v9.i32 = v71;
      float v72 = 1.0 - v71;
      if (v71 < v59) {
        float v59 = *(float *)v9.i32;
      }
      float32x4_t v73 = vmulq_f32(v51, v70);
      float v74 = *v33++;
      *(float *)v10.i32 = v74;
      float v65 = v65 + (float)((float)(1.0 - v74) * (float)(1.0 - v74));
      float v66 = v66 + (float)((float)(1.0 - v74) * v74);
      int8x16_t v75 = (int8x16_t)vdupq_lane_s32(v10, 0);
      int8x16_t v76 = (int8x16_t)vdupq_lane_s32(v9, 0);
      if (*(float *)v9.i32 > v60) {
        float v60 = *(float *)v9.i32;
      }
      float32x4_t v77 = (float32x4_t)vorrq_s8(vandq_s8(v75, v52), vbicq_s8(v76, v52));
      float32x4_t v78 = vmulq_f32(v70, v77);
      float32x4_t v68 = vaddq_f32(v68, v78);
      float32x4_t v79 = vsubq_f32(v70, v78);
      float32x4_t v80 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1)));
      if (v80.f32[0] < v57) {
        float v57 = v80.f32[0];
      }
      v30.f32[0] = v30.f32[0] + (float)(v72 * v72);
      float v63 = v63 + (float)(v72 * *(float *)v9.i32);
      if (v80.f32[0] > v56) {
        float v56 = v80.f32[0];
      }
      float v64 = v64 + (float)(*(float *)v9.i32 * *(float *)v9.i32);
      if (*(float *)v10.i32 < v61) {
        float v61 = *(float *)v10.i32;
      }
      float v67 = v67 + (float)(*(float *)v10.i32 * *(float *)v10.i32);
      float32x4_t v55 = vaddq_f32(v55, v79);
      float32x4_t v81 = (float32x4_t)__PAIR64__(v9.u32[0], LODWORD(v72));
      if (*(float *)v10.i32 > v62) {
        float v62 = *(float *)v10.i32;
      }
      int32x2_t v9 = (int32x2_t)vmulq_f32(v53, v80).u64[0];
      _Q17 = vaddq_f32(_Q17, vmulq_n_f32(v81, *(float *)v9.i32));
      float32x4_t v54 = vaddq_f32(v54, v77);
      ++v58;
      --v45;
    }
    while (v45);
    float v82 = v60 * 0.999;
    float v83 = v62 * 0.999;
  }
  else
  {
    _Q17.i64[0] = 0;
    float v57 = 1.0e10;
    float32x4_t v68 = 0uLL;
    float32x4_t v54 = v48;
    float32x4_t v55 = 0uLL;
    float v67 = 0.0;
    float v66 = 0.0;
    float v65 = 0.0;
    float v64 = 0.0;
    float v63 = 0.0;
    v30.i64[0] = 0;
    float v83 = 0.0;
    float v61 = 1.0;
    float v82 = 0.0;
    float v59 = 1.0;
    float v56 = 0.0;
  }
  _Q16 = vmaxnmq_f32(v47, v48);
  float32x4_t v85 = vmulq_n_f32(v46, v64);
  float32x4_t v86 = vmulq_f32(v46, v55);
  float32x4_t v87 = vmulq_f32(v46, v68);
  float v88 = v57 / fmaxf(v56, 1.0e-10);
  float v89 = fmaxf(v88, 0.0);
  if (v88 > 1.0) {
    float v89 = 1.0;
  }
  float32x4_t v90 = vmulq_n_f32(v51, v56);
  float32x4_t v91 = v90;
  v91.f32[3] = v89;
  *a7 = v91;
  if (v59 >= v82)
  {
    float32x4_t v112 = vdivq_f32(vaddq_f32(v87, v86), _Q16);
    int8x16_t v113 = vornq_s8(v52, vorrq_s8((int8x16_t)vcltzq_f32(v112), (int8x16_t)vcgezq_f32(v112)));
    a6[1] = vbslq_s8(v113, a6[1], (int8x16_t)v112);
    a6[5] = vbslq_s8(v113, a6[5], (int8x16_t)v112);
    v90.i32[3] = 1.0;
    goto LABEL_42;
  }
  float32x4_t v92 = v30;
  v92.f32[1] = v63;
  v92.f32[2] = v64;
  _Q20 = vmulq_n_f32(v92, v53.f32[0]);
  _Q18 = vmulq_n_f32(v46, v63);
  float32x4_t v95 = vmulq_n_f32(v46, v30.f32[0]);
  float32x4_t v96 = vsubq_f32(vmulq_f32(v85, v95), vmulq_f32(_Q18, _Q18));
  __asm { FMOV            V25.4S, #1.0 }
  float32x4_t v101 = vdivq_f32(_Q25, v96);
  _S26 = _Q20.i32[2];
  float v103 = vmlas_n_f32(vmuls_lane_f32(-_Q20.f32[1], *(float32x2_t *)_Q20.f32, 1), _Q20.f32[2], _Q20.f32[0]);
  float32x4_t v104 = vaddq_f32(vmulq_f32(v85, v85), vaddq_f32(vmulq_f32(v95, v95), vmulq_f32(_Q18, vaddq_f32(_Q18, _Q18))));
  __asm { FMLA            S27, S26, V20.S[2] }
  float32x4_t v106 = vmulq_f32(vsubq_f32(vmulq_f32(v86, v85), vmulq_f32(v87, _Q18)), v101);
  float32x4_t v107 = vmulq_f32(vsubq_f32(vmulq_f32(v87, v95), vmulq_f32(v86, _Q18)), v101);
  __asm { FMLA            S18, S17, V20.S[2] }
  float v108 = _Q18.f32[0] * (float)(1.0 / v103);
  float v109 = vmlas_n_f32((float)-_Q20.f32[1] * _Q17.f32[0], _Q17.f32[1], _Q20.f32[0]) * (float)(1.0 / v103);
  int8x16_t v110 = vbicq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v107, v106), (int8x16_t)vcgeq_f32(v106, v107)), (int8x16_t)vcgtq_f32(vmaxq_f32(v96, vsubq_f32((float32x4_t)0, v96)), vmulq_f32(v104, (float32x4_t)vdupq_n_s32(0x38D1B717u)))), v52);
  a6[1] = vbslq_s8(v110, (int8x16_t)v106, a6[1]);
  a6[5] = vbslq_s8(v110, (int8x16_t)v107, a6[5]);
  if (fabsf(v103) > (float)(_S27 * 0.0001) && v108 < v109)
  {
    float32x4_t v90 = vmulq_n_f32(v51, v109);
    v90.f32[3] = v108 / v109;
LABEL_42:
    *a7 = v90;
  }
  float32x4_t v114 = vmulq_n_f32(v46, v67);
  if (v61 >= v83)
  {
    float32x4_t v122 = vdivq_f32(vaddq_f32(v87, v86), _Q16);
    int8x16_t v123 = vandq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v122), (int8x16_t)vcgezq_f32(v122)), v52);
    int8x16_t v124 = vbslq_s8(v123, (int8x16_t)v122, a6[1]);
  }
  else
  {
    float32x4_t v115 = vmulq_n_f32(v46, v65);
    float32x4_t v116 = vmulq_n_f32(v46, v66);
    float32x4_t v117 = vsubq_f32(vmulq_f32(v114, v115), vmulq_f32(v116, v116));
    __asm { FMOV            V7.4S, #1.0 }
    float32x4_t v119 = vdivq_f32(_Q7, v117);
    float32x4_t v120 = vaddq_f32(vmulq_f32(v114, v114), vaddq_f32(vmulq_f32(v115, v115), vmulq_f32(v116, vaddq_f32(v116, v116))));
    float32x4_t v121 = vmulq_f32(vsubq_f32(vmulq_f32(v86, v114), vmulq_f32(v87, v116)), v119);
    float32x4_t v122 = vmulq_f32(vsubq_f32(vmulq_f32(v87, v115), vmulq_f32(v86, v116)), v119);
    int8x16_t v123 = vandq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v122, v121), (int8x16_t)vcgeq_f32(v121, v122)), v52), (int8x16_t)vcgtq_f32(vmaxq_f32(v117, vsubq_f32((float32x4_t)0, v117)), vmulq_f32(v120, (float32x4_t)vdupq_n_s32(0x38D1B717u))));
    int8x16_t v124 = vbslq_s8(v123, (int8x16_t)v121, a6[1]);
  }
  a6[1] = v124;
  a6[5] = vbslq_s8(v123, (int8x16_t)v122, a6[5]);
  if (a1[222].u8[1] | a1[235].u8[9])
  {
    float32x4_t v125 = vmulq_f32(v46, v54);
    float32x4_t v126 = vmulq_f32(v46, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v85, v52), vandq_s8((int8x16_t)v114, v52)));
    LODWORD(v127) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).u32[0];
    float32x4_t v128 = vaddq_f32(v87, v86);
    v128.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).u32[0];
    float v129 = vmulq_f32(v125, v125).f32[0];
    _S7 = vmlas_n_f32(vmuls_lane_f32(-v125.f32[2], v125, 2), _Q16.f32[2], v127);
    __asm { FMLA            S18, S7, V16.S[1] }
    *(float32x2_t *)v132.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q16.f32), *(float32x2_t *)v125.f32);
    *(float32x2_t *)v133.f32 = vmul_laneq_f32(*(float32x2_t *)v132.f32, v125, 2);
    float32x4_t v134 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q16, 2);
    v134.f32[0] = -_Q16.f32[2];
    v134.f32[1] = -_Q16.f32[2];
    v134.f32[2] = -v125.f32[2];
    v132.i32[2] = vmuls_lane_f32(_Q16.f32[0], *(float32x2_t *)_Q16.f32, 1);
    v135.f32[0] = vmuls_lane_f32(_Q16.f32[2], *(float32x2_t *)v125.f32, 1) * v125.f32[0];
    v132.i32[3] = v132.i32[2];
    float32x4_t v136 = vmulq_f32(v134, v132);
    _Q18.i32[1] = v135.i32[0];
    _Q18.i64[1] = __PAIR64__(v136.u32[0], v133.u32[0]);
    v135.i32[1] = vmlas_n_f32((float)-_Q16.f32[2] * v129, _S7, _Q16.f32[0]);
    v135.i64[1] = __PAIR64__(v136.u32[1], v133.u32[1]);
    v133.i64[1] = __PAIR64__(v136.u32[2], COERCE_UNSIGNED_INT(vmlas_n_f32((float)-_Q16.f32[1] * v129, vmlas_n_f32(-(float)(v125.f32[1] * v125.f32[1]), _Q16.f32[1], v127), _Q16.f32[0])));
    float32x4_t v137 = vmulq_n_f32(v128, 1.0 / vmlas_n_f32(vmulq_f32(v125, v136).f32[0], _Q18.f32[0], _Q16.f32[0]));
    int8x16_t v138 = (int8x16_t)vmulq_f32(_Q18, v137);
    *(float32x2_t *)v138.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v138, v138, 8uLL), *(float32x2_t *)v138.i8);
    int8x16_t v139 = (int8x16_t)vmulq_f32(v135, v137);
    *(float32x2_t *)v139.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL), *(float32x2_t *)v139.i8);
    int8x16_t v140 = (int8x16_t)vmulq_f32(v133, v137);
    *(float32x2_t *)v140.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL), *(float32x2_t *)v140.i8);
    int8x16_t v141 = (int8x16_t)vmulq_f32(v136, v137);
    *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL), *(float32x2_t *)v141.i8);
    *(int32x2_t *)v138.i8 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v138.i8, *(float32x2_t *)v138.i8), (int32x2_t)vpadd_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8));
    v138.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v141.i8, *(float32x2_t *)v141.i8).u32[0], vpadd_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v140.i8).u32[0]);
    *a8 = v138;
  }
}

void compute_ideal_colors_and_weights_1plane()
{
}

{
  __assert_rtn("compute_ideal_colors_and_weights_4_comp", "astcenc_ideal_endpoints_and_weights.cpp", 531, "partition_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_4_comp", "astcenc_ideal_endpoints_and_weights.cpp", 596, "!astc::isnan(ei.weight_error_scale[tix])");
}

void compute_ideal_colors_and_weights_3_comp()
{
}

{
  __assert_rtn("compute_ideal_colors_and_weights_3_comp", "astcenc_ideal_endpoints_and_weights.cpp", 365, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_3_comp", "astcenc_ideal_endpoints_and_weights.cpp", 471, "!astc::isnan(ei.weight_error_scale[tix])");
}

void compute_ideal_colors_and_weights_2planes()
{
}

{
  __assert_rtn("compute_ideal_colors_and_weights_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 680, "uses_alpha");
}

void block_size_descriptor::get_partition_info()
{
  __assert_rtn("get_partition_info", "astcenc_internal.h", 707, "packed_index != BLOCK_BAD_PARTITIONING && packed_index < this->partitioning_count_all[partition_count - 1]");
}

{
  __assert_rtn("get_partition_info", "astcenc_internal.h", 709, "index == result.partition_index");
}

void compute_ideal_colors_and_weights_2_comp()
{
}

{
  __assert_rtn("compute_ideal_colors_and_weights_2_comp", "astcenc_ideal_endpoints_and_weights.cpp", 229, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_2_comp", "astcenc_ideal_endpoints_and_weights.cpp", 322, "!astc::isnan(ei.weight_error_scale[tix])");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_2_comp", "astcenc_ideal_endpoints_and_weights.cpp", 253, "component1 == 1 && component2 == 2");
}

void compute_ideal_colors_and_weights_1_comp()
{
}

{
  __assert_rtn("compute_ideal_colors_and_weights_1_comp", "astcenc_ideal_endpoints_and_weights.cpp", 118, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_1_comp", "astcenc_ideal_endpoints_and_weights.cpp", 139, "component == 3");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_1_comp", "astcenc_ideal_endpoints_and_weights.cpp", 190, "!astc::isnan(ei.weight_error_scale[tix])");
}

void compute_error_of_weight_set_1plane()
{
}

void compute_error_of_weight_set_2planes()
{
}

void compute_ideal_weights_for_decimation()
{
}

{
  __assert_rtn("compute_ideal_weights_for_decimation", "astcenc_ideal_endpoints_and_weights.cpp", 854, "weight_count > 0");
}

{
  __assert_rtn("compute_ideal_weights_for_decimation", "astcenc_ideal_endpoints_and_weights.cpp", 893, "max_texel_count > 0");
}

{
  __assert_rtn("compute_ideal_weights_for_decimation", "astcenc_ideal_endpoints_and_weights.cpp", 951, "max_texel_count > 0");
}

void compute_quantized_weights_for_decimation()
{
}

void recompute_ideal_colors_1plane()
{
}

{
  __assert_rtn("recompute_ideal_colors_1plane", "astcenc_ideal_endpoints_and_weights.cpp", 1171, "total_texel_count > 0");
}

{
  __assert_rtn("recompute_ideal_colors_1plane", "astcenc_ideal_endpoints_and_weights.cpp", 1172, "partition_count > 0");
}

{
  __assert_rtn("recompute_ideal_colors_1plane", "astcenc_ideal_endpoints_and_weights.cpp", 1220, "texel_count > 0");
}

void recompute_ideal_colors_2planes()
{
}

{
  __assert_rtn("recompute_ideal_colors_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 1395, "weight_count > 0");
}

{
  __assert_rtn("recompute_ideal_colors_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 1400, "weight_count <= BLOCK_MAX_WEIGHTS_2PLANE");
}

block_size_descriptor *symbolic_to_physical(block_size_descriptor *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if (v5 == 2)
  {
    uint64_t v19 = 0;
    *(void *)a3 = -516;
    uint64_t v20 = a3 + 9;
    do
    {
      *(_WORD *)(v20 - 1) = *(_DWORD *)&a2[v19 + 20];
      v20 += 2;
      v19 += 4;
    }
    while (v19 != 16);
    return result;
  }
  if (v5 == 1)
  {
    uint64_t v21 = 0;
    *(void *)a3 = -4;
    uint64_t v22 = a3 + 9;
    do
    {
      *(_WORD *)(v22 - 1) = *(_DWORD *)&a2[v21 + 20];
      v22 += 2;
      v21 += 4;
    }
    while (v21 != 16);
    return result;
  }
  if (!*a2) {
    symbolic_to_physical();
  }
  float32x4_t v6 = result;
  uint64_t v7 = a2[1];
  int8x16_t v66 = 0uLL;
  block_mode = (unsigned __int8 *)block_size_descriptor::get_block_mode(result, *((unsigned __int16 *)a2 + 2));
  uint64_t v9 = *((unsigned __int8 *)v6 + 129888 * block_mode[2] + 594);
  uint64_t v10 = block_mode[3];
  float v11 = -1.0;
  if (v10 <= 0x14) {
    float v11 = flt_1889B1BD0[(char)v10];
  }
  unsigned __int8 v12 = block_mode[5];
  unsigned int v13 = v9 << (v12 & 1);
  int ise_sequence_bitcount = get_ise_sequence_bitcount(v13, v10);
  memset(v65, 0, sizeof(v65));
  if (v12)
  {
    if (v9)
    {
      uint8x8_t v23 = a2 + 84;
      uint8x8_t v24 = (char *)v65 + 1;
      do
      {
        LOBYTE(v15) = *(v23 - 32);
        *(float *)&unsigned int v25 = (float)(v11 * (float)((float)LODWORD(v15) * 0.015625)) + 0.5;
        long long v26 = &quant_and_xfer_tables[226 * v10 + 32];
        *(v24 - 1) = v26[*(float *)&v25];
        LOBYTE(v25) = *v23;
        float v15 = (float)(v11 * (float)((float)v25 * 0.015625)) + 0.5;
        *uint8x8_t v24 = v26[v15];
        v24 += 2;
        ++v23;
        --v9;
      }
      while (v9);
    }
  }
  else if (v9)
  {
    unint64_t v16 = a2 + 52;
    float32x4_t v17 = v65;
    do
    {
      unsigned int v18 = *v16++;
      *v17++ = quant_and_xfer_tables[226 * v10
                                   + 32
                                   + (int)(float)((float)(v11 * (float)((float)v18 * 0.015625)) + 0.5)];
      --v9;
    }
    while (v9);
  }
  encode_ise(v10, v13, (unsigned __int8 *)v65, (uint64_t)&v66, 0);
  int8x16_t v27 = vrev64q_s8(v66);
  *(int8x16_t *)a3 = vrbitq_s8(vextq_s8(v27, v27, 8uLL));
  unsigned int v28 = *((unsigned __int16 *)a2 + 2);
  *(unsigned char *)a3 = v28;
  int v29 = (v28 >> 8) & 7;
  char v30 = (8 * v7 + 24) & 0x18;
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(a3 + 1) & 0xE0 | v30 | BYTE1(v28) & 7;
  char v31 = *(unsigned char *)(a3 + 2);
  int v32 = 128 - ise_sequence_bitcount;
  if (v7 >= 2)
  {
    unsigned int v33 = *((unsigned __int16 *)a2 + 3);
    *(unsigned char *)(a3 + 1) = v30 | (32 * v33) | v29;
    int v34 = (v33 >> 3) & 7;
    char v35 = v31 & 0xF8 | (v33 >> 3) & 7;
    *(unsigned char *)(a3 + 2) = v35;
    int v36 = (*((unsigned __int16 *)a2 + 3) >> 3) & 0x78;
    *(unsigned char *)(a3 + 2) = v35 & 0x87 | (*((unsigned __int16 *)a2 + 3) >> 3) & 0x78;
    char v37 = *(unsigned char *)(a3 + 3);
    if (a2[2])
    {
      unsigned __int8 v38 = a2[8];
      *(unsigned char *)(a3 + 2) = v36 | v34;
      *(unsigned char *)(a3 + 3) = v37 & 0xE0 | (2 * (v38 & 0xF));
      if ((v12 & 1) == 0) {
        goto LABEL_26;
      }
    }
    else
    {
      int8x16_t v52 = a2 + 8;
      int v53 = 4;
      uint64_t v54 = v7;
      do
      {
        unsigned int v55 = *v52++;
        int v56 = v55 >> 2;
        if ((int)(v55 >> 2) < v53) {
          int v53 = v56;
        }
        --v54;
      }
      while (v54);
      uint64_t v57 = 0;
      if (v53 == 3) {
        int v58 = 2;
      }
      else {
        int v58 = v53;
      }
      int v59 = v58 + 1;
      do
      {
        v59 |= ((a2[v57 + 8] >> 2) - v58) << (v57 + 2);
        ++v57;
      }
      while (v7 != v57);
      float v60 = (char *)(a2 + 8);
      int v61 = v7 + 2;
      uint64_t v62 = v7;
      do
      {
        char v63 = *v60++;
        v59 |= (v63 & 3) << v61;
        v61 += 2;
        --v62;
      }
      while (v62);
      v32 -= 3 * v7 - 4;
      *(unsigned char *)(a3 + 2) = v34 | ((_BYTE)v59 << 7) | v36;
      *(unsigned char *)(a3 + 3) = v37 & 0xE0 | (v59 >> 1) & 0x1F;
      *(_WORD *)(a3 + (v32 >> 3)) = *(_WORD *)(a3 + (v32 >> 3)) & ~(unsigned __int16)(~(-1 << (3 * v7 - 4)) << (v32 & 7)) | (((v59 >> 6) & ~(-1 << (3 * v7 - 4))) << (v32 & 7));
      if ((v12 & 1) == 0) {
        goto LABEL_26;
      }
    }
    goto LABEL_25;
  }
  unsigned __int8 v39 = a2[8];
  *(unsigned char *)(a3 + 1) = v30 | (32 * v39) | v29;
  *(unsigned char *)(a3 + 2) = v31 & 0xFE | ((v39 & 8) != 0);
  if (v12) {
LABEL_25:
  }
    *(_WORD *)(a3 + ((v32 - 2) >> 3)) = *(_WORD *)(a3 + ((v32 - 2) >> 3)) & ~(unsigned __int16)(3 << ((v32 - 2) & 7)) | ((a2[3] & 3) << ((v32 - 2) & 7));
LABEL_26:
  memset(v64, 0, sizeof(v64));
  uint64_t v40 = *((int *)a2 + 3);
  uint64_t v41 = a2[1];
  if (a2[1])
  {
    uint64_t v42 = 0;
    unsigned int v43 = 0;
    uint8x8_t v44 = a2 + 20;
    do
    {
      unint64_t v45 = ((unint64_t)a2[v42 + 8] >> 1) & 0x7E;
      if (v45 > 6) {
        symbolic_to_physical();
      }
      unint64_t v46 = v45 + 2;
      float32x4_t v47 = (char *)v64 + v43;
      unint64_t v48 = v46;
      float32x4_t v49 = v44;
      do
      {
        unsigned int v50 = *v49++;
        *v47++ = color_uquant_to_scrambled_pquant_tables[256 * v40 - 1024 + v50];
        --v48;
      }
      while (v48);
      v43 += v46;
      ++v42;
      v44 += 8;
    }
    while (v42 != v41);
  }
  else
  {
    unsigned int v43 = 0;
  }
  if (v41 == 1) {
    unsigned int v51 = 17;
  }
  else {
    unsigned int v51 = 29;
  }
  return (block_size_descriptor *)encode_ise(v40, v43, (unsigned __int8 *)v64, a3, v51);
}

uint64_t block_size_descriptor::get_block_mode(block_size_descriptor *this, unsigned int a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + a2 + 5650424);
  if (v2 == 0xFFFF || *((_DWORD *)this + 7) <= v2) {
    block_size_descriptor::get_block_mode();
  }
  return (uint64_t)this + 6 * *((unsigned __int16 *)this + a2 + 5650424) + 11304944;
}

void symbolic_to_physical()
{
  __assert_rtn("symbolic_to_physical", "astcenc_symbolic_physical.cpp", 276, "vals <= 8");
}

{
  __assert_rtn("symbolic_to_physical", "astcenc_symbolic_physical.cpp", 107, "scb.block_type != SYM_BTYPE_ERROR");
}

void block_size_descriptor::get_block_mode()
{
  __assert_rtn("get_block_mode", "astcenc_internal.h", 638, "packed_index != BLOCK_BAD_BLOCK_MODE && packed_index < this->block_mode_count_all");
}

int8x16_t compute_avgs_and_dirs_4_comp(unsigned char *a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned __int16 *)a1;
  if (!*(_WORD *)a1) {
    compute_avgs_and_dirs_4_comp();
  }
  memset(v33, 0, sizeof(v33));
  compute_partition_averages_rgba(a1, a2, v33);
  uint64_t v7 = 0;
  unint64_t v8 = a1 + 224;
  do
  {
    uint64_t v9 = a1[v7 + 4];
    if (!a1[v7 + 4]) {
      compute_avgs_and_dirs_4_comp();
    }
    float32x4_t v10 = v33[v7];
    *(float32x4_t *)(a3 + 32 * v7) = v10;
    float32x4_t v11 = 0uLL;
    unsigned __int8 v12 = v8;
    float32x4_t v13 = 0uLL;
    float32x4_t v14 = 0uLL;
    float32x4_t v15 = 0uLL;
    do
    {
      int v16 = *v12++;
      float32x4_t v17 = &a2->i32[v16];
      v18.i32[0] = *v17;
      v18.i32[1] = v17[216];
      v18.i32[2] = v17[432];
      v18.i32[3] = v17[648];
      float32x4_t v19 = vsubq_f32(v18, v10);
      int16x4_t v20 = vmovn_s32(vcgtzq_f32(v19));
      float32x4_t v11 = vaddq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 0))));
      float32x4_t v13 = vaddq_f32(v13, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 1))));
      float32x4_t v14 = vaddq_f32(v14, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 2))));
      float32x4_t v15 = vaddq_f32(v15, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 3))));
      --v9;
    }
    while (v9);
    int8x16_t v21 = (int8x16_t)vmulq_f32(v11, v11);
    *(float32x2_t *)v21.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(float32x2_t *)v21.i8);
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), 0);
    int8x16_t v23 = (int8x16_t)vmulq_f32(v13, v13);
    *(float32x2_t *)v23.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), *(float32x2_t *)v23.i8);
    float32x4_t v24 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), 0);
    int8x16_t v25 = (int8x16_t)vmulq_f32(v14, v14);
    *(float32x2_t *)v25.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), *(float32x2_t *)v25.i8);
    float32x4_t v26 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), 0);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v15, v15);
    *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
    int8x16_t v28 = (int8x16_t)vcgtq_f32(v24, v22);
    int8x16_t v29 = vbslq_s8(v28, (int8x16_t)v13, (int8x16_t)v11);
    float32x4_t v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v24, (int8x16_t)v22);
    int8x16_t v31 = (int8x16_t)vcgtq_f32(v26, v30);
    int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), 0), (float32x4_t)vbslq_s8(v31, (int8x16_t)v26, (int8x16_t)v30)), (int8x16_t)v15, vbslq_s8(v31, (int8x16_t)v14, v29));
    *(int8x16_t *)(a3 + 32 * v7++ + 16) = result;
    v8 += 216;
  }
  while (v7 != v3);
  return result;
}

float32x4_t compute_partition_averages_rgba(unsigned char *a1, float32x4_t *a2, float32x4_t *a3)
{
  unint64_t v3 = a2[216].u8[0];
  if (!a2[216].i8[0]) {
    compute_partition_averages_rgba();
  }
  int v4 = *(unsigned __int16 *)a1;
  switch(v4)
  {
    case 1:
      float32x4_t result = a2[219];
      *a3 = result;
      break;
    case 2:
      unint64_t v42 = 0;
      int32x4_t v43 = vdupq_n_s32(v3);
      int32x4_t v44 = (int32x4_t)xmmword_18898C3A0;
      float32x4_t v45 = 0uLL;
      v46.i64[0] = 0x400000004;
      v46.i64[1] = 0x400000004;
      float32x4_t v47 = (int8x16_t *)a2;
      float32x4_t v48 = 0uLL;
      float32x4_t v49 = 0uLL;
      float32x4_t v50 = 0uLL;
      do
      {
        unsigned int v51 = (const float *)&a1[v42 + 8];
        uint8x8_t v52 = (uint8x8_t)vld1_dup_f32(v51);
        int8x8_t v53 = (int8x8_t)vmovn_s32(vcgtq_s32(v43, v44));
        int32x4_t v44 = vaddq_s32(v44, v46);
        int8x16_t v54 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v52)), v53));
        float32x4_t v50 = vaddq_f32(v50, (float32x4_t)vandq_s8(*v47, v54));
        float32x4_t v49 = vaddq_f32(v49, (float32x4_t)vandq_s8(v47[54], v54));
        float32x4_t v48 = vaddq_f32(v48, (float32x4_t)vandq_s8(v47[108], v54));
        float32x4_t v45 = vaddq_f32(v45, (float32x4_t)vandq_s8(v47[162], v54));
        v42 += 4;
        ++v47;
      }
      while (v42 < v3);
      float32x2_t v55 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), *(float32x2_t *)v50.f32);
      float32x2_t v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), *(float32x2_t *)v49.f32);
      float32x2_t v57 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), *(float32x2_t *)v48.f32);
      int32x2_t v58 = (int32x2_t)vpadd_f32(v57, v57);
      float32x2_t v59 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), *(float32x2_t *)v45.f32);
      *(int32x2_t *)v60.f32 = vzip1_s32((int32x2_t)vpadd_f32(v55, v55), (int32x2_t)vpadd_f32(v56, v56));
      v60.i64[1] = __PAIR64__(vpadd_f32(v59, v59).u32[0], v58.u32[0]);
      float32x4_t v61 = vsubq_f32(vmulq_n_f32(a2[219], (float)v3), v60);
      v58.i8[0] = a1[4];
      *(float *)v58.i32 = (float)v58.u32[0];
      float32x4_t v62 = vdivq_f32(v60, (float32x4_t)vdupq_lane_s32(v58, 0));
      *a3 = v62;
      v62.i8[0] = a1[5];
      v62.f32[0] = (float)v62.u32[0];
      float32x4_t result = vdivq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 0));
      a3[1] = result;
      break;
    case 3:
      unint64_t v5 = 0;
      int32x4_t v6 = vdupq_n_s32(v3);
      float32x4_t v7 = 0uLL;
      v8.i64[0] = 0x400000004;
      v8.i64[1] = 0x400000004;
      float32x4_t v9 = 0uLL;
      int32x4_t v10 = (int32x4_t)xmmword_18898C3A0;
      float32x4_t v11 = (int8x16_t *)a2;
      float32x4_t v12 = 0uLL;
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = 0uLL;
      float32x4_t v15 = 0uLL;
      float32x4_t v16 = 0uLL;
      float32x4_t v17 = 0uLL;
      do
      {
        float32x4_t v18 = (const float *)&a1[v5 + 8];
        uint8x8_t v19 = (uint8x8_t)vld1_dup_f32(v18);
        int16x4_t v20 = (int16x4_t)vmovl_u8(v19).u64[0];
        int8x8_t v21 = (int8x8_t)vmovn_s32(vcgtq_s32(v6, v10));
        int32x4_t v10 = vaddq_s32(v10, v8);
        int8x16_t v22 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v20), v21));
        int8x16_t v23 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v20, (int16x4_t)0x1000100010001), v21));
        float32x4_t v12 = vaddq_f32(v12, (float32x4_t)vandq_s8(*v11, v22));
        float32x4_t v16 = vaddq_f32(v16, (float32x4_t)vandq_s8(*v11, v23));
        int8x16_t v24 = v11[54];
        float32x4_t v13 = vaddq_f32(v13, (float32x4_t)vandq_s8(v24, v22));
        float32x4_t v17 = vaddq_f32(v17, (float32x4_t)vandq_s8(v24, v23));
        int8x16_t v25 = v11[108];
        float32x4_t v14 = vaddq_f32(v14, (float32x4_t)vandq_s8(v25, v22));
        float32x4_t v9 = vaddq_f32(v9, (float32x4_t)vandq_s8(v25, v23));
        int8x16_t v26 = v11[162];
        float32x4_t v15 = vaddq_f32(v15, (float32x4_t)vandq_s8(v26, v22));
        float32x4_t v7 = vaddq_f32(v7, (float32x4_t)vandq_s8(v26, v23));
        v5 += 4;
        ++v11;
      }
      while (v5 < v3);
      float32x2_t v27 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), *(float32x2_t *)v12.f32);
      float32x2_t v28 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), *(float32x2_t *)v13.f32);
      float32x2_t v29 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), *(float32x2_t *)v14.f32);
      float32x2_t v30 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), *(float32x2_t *)v15.f32);
      *(int32x2_t *)v31.f32 = vzip1_s32((int32x2_t)vpadd_f32(v27, v27), (int32x2_t)vpadd_f32(v28, v28));
      v31.i32[2] = vpadd_f32(v29, v29).u32[0];
      v31.i32[3] = vpadd_f32(v30, v30).u32[0];
      float32x2_t v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
      float32x2_t v33 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(float32x2_t *)v17.f32);
      float32x2_t v34 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), *(float32x2_t *)v9.f32);
      int32x2_t v35 = (int32x2_t)vpadd_f32(v34, v34);
      float32x2_t v36 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), *(float32x2_t *)v7.f32);
      *(int32x2_t *)v37.f32 = vzip1_s32((int32x2_t)vpadd_f32(v32, v32), (int32x2_t)vpadd_f32(v33, v33));
      v37.i32[2] = v35.i32[0];
      v37.i32[3] = vpadd_f32(v36, v36).u32[0];
      float32x4_t v38 = vsubq_f32(vsubq_f32(vmulq_n_f32(a2[219], (float)v3), v31), v37);
      v35.i8[0] = a1[4];
      *(float *)v35.i32 = (float)v35.u32[0];
      float32x4_t v39 = vdivq_f32(v31, (float32x4_t)vdupq_lane_s32(v35, 0));
      *a3 = v39;
      v39.i8[0] = a1[5];
      v39.f32[0] = (float)v39.u32[0];
      float32x4_t v40 = vdivq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
      a3[1] = v40;
      v40.i8[0] = a1[6];
      v40.f32[0] = (float)v40.u32[0];
      float32x4_t result = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0));
      a3[2] = result;
      break;
    default:
      unint64_t v63 = 0;
      int32x4_t v64 = vdupq_n_s32(v3);
      float32x4_t v65 = 0uLL;
      v66.i64[0] = 0x400000004;
      v66.i64[1] = 0x400000004;
      int32x4_t v67 = (int32x4_t)xmmword_18898C3A0;
      float32x4_t v68 = 0uLL;
      float v69 = (int8x16_t *)a2;
      float32x4_t v70 = 0uLL;
      float32x4_t v71 = 0uLL;
      float32x4_t v72 = 0uLL;
      float32x4_t v73 = 0uLL;
      float32x4_t v74 = 0uLL;
      float32x4_t v75 = 0uLL;
      float32x4_t v76 = 0uLL;
      float32x4_t v77 = 0uLL;
      float32x4_t v78 = 0uLL;
      float32x4_t v79 = 0uLL;
      do
      {
        float32x4_t v80 = (const float *)&a1[v63 + 8];
        uint8x8_t v81 = (uint8x8_t)vld1_dup_f32(v80);
        int16x4_t v82 = (int16x4_t)vmovl_u8(v81).u64[0];
        int8x8_t v83 = (int8x8_t)vmovn_s32(vcgtq_s32(v64, v67));
        int32x4_t v67 = vaddq_s32(v67, v66);
        int8x16_t v84 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v82), v83));
        int8x16_t v85 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v82, (int16x4_t)0x1000100010001), v83));
        int8x16_t v86 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v82, (int16x4_t)0x2000200020002), v83));
        float32x4_t v65 = vaddq_f32(v65, (float32x4_t)vandq_s8(*v69, v84));
        float32x4_t v72 = vaddq_f32(v72, (float32x4_t)vandq_s8(*v69, v85));
        float32x4_t v76 = vaddq_f32(v76, (float32x4_t)vandq_s8(*v69, v86));
        int8x16_t v87 = v69[54];
        float32x4_t v68 = vaddq_f32(v68, (float32x4_t)vandq_s8(v87, v84));
        float32x4_t v73 = vaddq_f32(v73, (float32x4_t)vandq_s8(v87, v85));
        float32x4_t v77 = vaddq_f32(v77, (float32x4_t)vandq_s8(v87, v86));
        int8x16_t v88 = v69[108];
        float32x4_t v70 = vaddq_f32(v70, (float32x4_t)vandq_s8(v88, v84));
        float32x4_t v74 = vaddq_f32(v74, (float32x4_t)vandq_s8(v88, v85));
        float32x4_t v78 = vaddq_f32(v78, (float32x4_t)vandq_s8(v88, v86));
        int8x16_t v89 = v69[162];
        float32x4_t v71 = vaddq_f32(v71, (float32x4_t)vandq_s8(v89, v84));
        float32x4_t v75 = vaddq_f32(v75, (float32x4_t)vandq_s8(v89, v85));
        float32x4_t v79 = vaddq_f32(v79, (float32x4_t)vandq_s8(v89, v86));
        v63 += 4;
        ++v69;
      }
      while (v63 < v3);
      float32x2_t v90 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), *(float32x2_t *)v65.f32);
      float32x2_t v91 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), *(float32x2_t *)v68.f32);
      float32x2_t v92 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), *(float32x2_t *)v70.f32);
      float32x2_t v93 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), *(float32x2_t *)v71.f32);
      unsigned __int32 v94 = vpadd_f32(v93, v93).u32[0];
      *(int32x2_t *)v95.f32 = vzip1_s32((int32x2_t)vpadd_f32(v90, v90), (int32x2_t)vpadd_f32(v91, v91));
      v95.i64[1] = __PAIR64__(v94, vpadd_f32(v92, v92).u32[0]);
      float32x2_t v96 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), *(float32x2_t *)v72.f32);
      float32x2_t v97 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), *(float32x2_t *)v73.f32);
      float32x2_t v98 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), *(float32x2_t *)v74.f32);
      float32x2_t v99 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL), *(float32x2_t *)v75.f32);
      *(int32x2_t *)v100.f32 = vzip1_s32((int32x2_t)vpadd_f32(v96, v96), (int32x2_t)vpadd_f32(v97, v97));
      v100.i32[2] = vpadd_f32(v98, v98).u32[0];
      v100.i32[3] = vpadd_f32(v99, v99).u32[0];
      float32x2_t v101 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), *(float32x2_t *)v76.f32);
      float32x2_t v102 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), *(float32x2_t *)v77.f32);
      float32x2_t v103 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), *(float32x2_t *)v78.f32);
      int32x2_t v104 = (int32x2_t)vpadd_f32(v103, v103);
      float32x2_t v105 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL), *(float32x2_t *)v79.f32);
      *(int32x2_t *)v106.f32 = vzip1_s32((int32x2_t)vpadd_f32(v101, v101), (int32x2_t)vpadd_f32(v102, v102));
      v106.i32[2] = v104.i32[0];
      v106.i32[3] = vpadd_f32(v105, v105).u32[0];
      float32x4_t v107 = vsubq_f32(vsubq_f32(vsubq_f32(vmulq_n_f32(a2[219], (float)v3), v95), v100), v106);
      v104.i8[0] = a1[4];
      *(float *)v104.i32 = (float)v104.u32[0];
      float32x4_t v108 = vdivq_f32(v95, (float32x4_t)vdupq_lane_s32(v104, 0));
      *a3 = v108;
      v108.i8[0] = a1[5];
      v108.f32[0] = (float)v108.u32[0];
      float32x4_t v109 = vdivq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 0));
      a3[1] = v109;
      v109.i8[0] = a1[6];
      v109.f32[0] = (float)v109.u32[0];
      float32x4_t v110 = vdivq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 0));
      a3[2] = v110;
      v110.i8[0] = a1[7];
      v110.f32[0] = (float)v110.u32[0];
      float32x4_t result = vdivq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 0));
      a3[3] = result;
      break;
  }
  return result;
}

int8x16_t compute_avgs_and_dirs_3_comp(unsigned char *a1, float32x4_t *a2, int a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int8x16_t v39 = 0u;
  int8x16_t v40 = 0u;
  int8x16_t v37 = 0u;
  int8x16_t v38 = 0u;
  compute_partition_averages_rgba(a1, a2, (float32x4_t *)&v37);
  float32x4_t v9 = a2 + 54;
  if (a3 == 2)
  {
    v13.i64[0] = v37.i64[0];
    v14.i64[0] = v38.i64[0];
    v13.i64[1] = v37.u32[3];
    v14.i64[1] = v38.u32[3];
    v15.i64[0] = v39.i64[0];
    v16.i64[0] = v40.i64[0];
    v15.i64[1] = v39.u32[3];
    v16.i64[1] = v40.u32[3];
    int8x16_t v37 = v13;
    int8x16_t v38 = v14;
    int8x16_t v39 = v15;
    int8x16_t v40 = v16;
    float32x4_t v12 = a2 + 162;
    int32x4_t v10 = a2 + 54;
LABEL_7:
    float32x4_t v9 = a2;
    goto LABEL_9;
  }
  int32x4_t v10 = a2 + 108;
  if (a3 == 1)
  {
    v17.i64[0] = __PAIR64__(v37.u32[2], v37.u32[0]);
    v17.i64[1] = v37.u32[3];
    v18.i64[0] = __PAIR64__(v38.u32[2], v38.u32[0]);
    v18.i64[1] = v38.u32[3];
    int8x16_t v37 = v17;
    int8x16_t v38 = v18;
    v17.i64[0] = __PAIR64__(v39.u32[2], v39.u32[0]);
    v17.i64[1] = v39.u32[3];
    v18.i64[0] = __PAIR64__(v40.u32[2], v40.u32[0]);
    v18.i64[1] = v40.u32[3];
    int8x16_t v39 = v17;
    int8x16_t v40 = v18;
    float32x4_t v12 = a2 + 162;
    goto LABEL_7;
  }
  if (a3)
  {
    v37.i32[3] = 0;
    v38.i32[3] = 0;
    float32x4_t v12 = a2 + 108;
    int32x4_t v10 = a2 + 54;
    float32x4_t v9 = a2;
    v39.i32[3] = 0;
    v40.i32[3] = 0;
  }
  else
  {
    int8x16_t v11 = vextq_s8((int8x16_t)0, (int8x16_t)0, 0xCuLL);
    int8x16_t v37 = vextq_s8(v37, v11, 4uLL);
    int8x16_t v38 = vextq_s8(v38, v11, 4uLL);
    int8x16_t v39 = vextq_s8(v39, v11, 4uLL);
    int8x16_t v40 = vextq_s8(v40, v11, 4uLL);
    float32x4_t v12 = a2 + 162;
  }
LABEL_9:
  uint64_t v19 = *(unsigned __int16 *)a1;
  if (!*(_WORD *)a1) {
    compute_avgs_and_dirs_3_comp();
  }
  uint64_t v20 = 0;
  int8x8_t v21 = a1 + 224;
  do
  {
    uint64_t v22 = a1[v20 + 4];
    if (!a1[v20 + 4]) {
      compute_avgs_and_dirs_3_comp();
    }
    float32x4_t v23 = *((float32x4_t *)&v37 + v20);
    *(float32x4_t *)(a4 + 32 * v20) = v23;
    float32x4_t v24 = 0uLL;
    int8x16_t v25 = v21;
    float32x4_t v26 = 0uLL;
    float32x4_t v27 = 0uLL;
    do
    {
      int v28 = *v25++;
      v8.i32[0] = v9->i32[v28];
      v8.i32[1] = v10->i32[v28];
      v8.i32[2] = v12->i32[v28];
      float32x4_t v29 = vsubq_f32(v8, v23);
      int16x4_t v30 = vmovn_s32(vcgtzq_f32(v29));
      float32x4_t v24 = vaddq_f32(v24, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 0))));
      float32x4_t v26 = vaddq_f32(v26, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 1))));
      float32x4_t v8 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 2)));
      float32x4_t v27 = vaddq_f32(v27, v8);
      --v22;
    }
    while (v22);
    int8x16_t v31 = (int8x16_t)vmulq_f32(v24, v24);
    *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v31.i8);
    float32x4_t v32 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), 0);
    int8x16_t v33 = (int8x16_t)vmulq_f32(v26, v26);
    *(float32x2_t *)v33.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v33.i8);
    float32x4_t v8 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), 0);
    int8x16_t v34 = (int8x16_t)vmulq_f32(v27, v27);
    *(float32x2_t *)v34.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v34.i8);
    int8x16_t v35 = (int8x16_t)vcgtq_f32(v8, v32);
    int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), 0), (float32x4_t)vbslq_s8(v35, (int8x16_t)v8, (int8x16_t)v32)), (int8x16_t)v27, vbslq_s8(v35, (int8x16_t)v26, (int8x16_t)v24));
    *(int8x16_t *)(a4 + 32 * v20++ + 16) = result;
    v21 += 216;
  }
  while (v20 != v19);
  return result;
}

int8x16_t compute_avgs_and_dirs_3_comp_rgb(unsigned __int16 *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  LODWORD(v8) = *a1;
  if (!*a1) {
    compute_avgs_and_dirs_3_comp_rgb();
  }
  float32x4_t v9 = 0uLL;
  float32x4_t v115 = 0u;
  float32x4_t v116 = 0u;
  float32x4_t v113 = 0u;
  float32x4_t v114 = 0u;
  unint64_t v10 = *(unsigned __int8 *)(a2 + 3456);
  if (!*(unsigned char *)(a2 + 3456)) {
    compute_avgs_and_dirs_3_comp_rgb();
  }
  switch(v8)
  {
    case 1:
      float32x4_t v40 = *(float32x4_t *)(a2 + 3504);
      v40.i32[3] = 0;
      float32x4_t v113 = v40;
      break;
    case 2:
      unint64_t v41 = 0;
      int32x4_t v42 = vdupq_n_s32(v10);
      int32x4_t v43 = (int32x4_t)xmmword_18898C3A0;
      v44.i64[0] = 0x400000004;
      v44.i64[1] = 0x400000004;
      float32x4_t v45 = (int8x16_t *)a2;
      float32x4_t v46 = 0uLL;
      float32x4_t v47 = 0uLL;
      do
      {
        float32x4_t v48 = (const float *)&a1[v41 / 2 + 4];
        uint8x8_t v49 = (uint8x8_t)vld1_dup_f32(v48);
        int8x8_t v50 = (int8x8_t)vmovn_s32(vcgtq_s32(v42, v43));
        int32x4_t v43 = vaddq_s32(v43, v44);
        int8x16_t v51 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v49)), v50));
        float32x4_t v47 = vaddq_f32(v47, (float32x4_t)vandq_s8(*v45, v51));
        float32x4_t v46 = vaddq_f32(v46, (float32x4_t)vandq_s8(v45[54], v51));
        float32x4_t v9 = vaddq_f32(v9, (float32x4_t)vandq_s8(v45[108], v51));
        v41 += 4;
        ++v45;
      }
      while (v41 < v10);
      float32x4_t v52 = *(float32x4_t *)(a2 + 3504);
      v52.i32[3] = 0;
      *(float32x2_t *)v53.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL), *(float32x2_t *)v47.f32);
      v53.i32[0] = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32).u32[0];
      float32x2_t v54 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL), *(float32x2_t *)v46.f32);
      int32x2_t v55 = (int32x2_t)vpadd_f32(v54, v54);
      a8 = (float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
      float32x2_t v56 = vadd_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)v9.f32);
      v53.i32[1] = v55.i32[0];
      v53.i64[1] = vpadd_f32(v56, v56).u32[0];
      float32x4_t v57 = vsubq_f32(vmulq_n_f32(v52, (float)v10), v53);
      v55.i8[0] = *((unsigned char *)a1 + 4);
      *(float *)v55.i32 = (float)v55.u32[0];
      float32x4_t v58 = vdivq_f32(v53, (float32x4_t)vdupq_lane_s32(v55, 0));
      v53.i8[0] = *((unsigned char *)a1 + 5);
      v53.f32[0] = (float)v53.u32[0];
      float32x4_t v113 = v58;
      float32x4_t v114 = vdivq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0));
      break;
    case 3:
      unint64_t v11 = 0;
      int32x4_t v12 = vdupq_n_s32(v10);
      v13.i64[0] = 0x400000004;
      v13.i64[1] = 0x400000004;
      int32x4_t v14 = (int32x4_t)xmmword_18898C3A0;
      int8x16_t v15 = (int8x16_t *)a2;
      float32x4_t v16 = 0uLL;
      float32x4_t v17 = 0uLL;
      float32x4_t v18 = 0uLL;
      float32x4_t v19 = 0uLL;
      float32x4_t v20 = 0uLL;
      do
      {
        int8x8_t v21 = (const float *)&a1[v11 / 2 + 4];
        uint8x8_t v22 = (uint8x8_t)vld1_dup_f32(v21);
        int16x4_t v23 = (int16x4_t)vmovl_u8(v22).u64[0];
        int8x8_t v24 = (int8x8_t)vmovn_s32(vcgtq_s32(v12, v14));
        int32x4_t v14 = vaddq_s32(v14, v13);
        int8x16_t v25 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v23), v24));
        int8x16_t v26 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v23, (int16x4_t)0x1000100010001), v24));
        float32x4_t v19 = vaddq_f32(v19, (float32x4_t)vandq_s8(*v15, v25));
        float32x4_t v17 = vaddq_f32(v17, (float32x4_t)vandq_s8(*v15, v26));
        int8x16_t v27 = v15[54];
        float32x4_t v20 = vaddq_f32(v20, (float32x4_t)vandq_s8(v27, v25));
        float32x4_t v16 = vaddq_f32(v16, (float32x4_t)vandq_s8(v27, v26));
        int8x16_t v28 = v15[108];
        float32x4_t v18 = vaddq_f32(v18, (float32x4_t)vandq_s8(v28, v25));
        float32x4_t v9 = vaddq_f32(v9, (float32x4_t)vandq_s8(v28, v26));
        v11 += 4;
        ++v15;
      }
      while (v11 < v10);
      float32x4_t v29 = *(float32x4_t *)(a2 + 3504);
      v29.i32[3] = 0;
      *(float32x2_t *)v30.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), *(float32x2_t *)v19.f32);
      float32x2_t v31 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), *(float32x2_t *)v20.f32);
      float32x2_t v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), *(float32x2_t *)v18.f32);
      v30.i32[0] = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).u32[0];
      v30.i32[1] = vpadd_f32(v31, v31).u32[0];
      v30.i64[1] = vpadd_f32(v32, v32).u32[0];
      float32x4_t v33 = vmulq_n_f32(v29, (float)v10);
      *(float32x2_t *)v34.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(float32x2_t *)v17.f32);
      v34.i32[0] = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).u32[0];
      float32x2_t v35 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
      int32x2_t v36 = (int32x2_t)vpadd_f32(v35, v35);
      a8 = (float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
      float32x2_t v37 = vadd_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)v9.f32);
      v34.i32[1] = v36.i32[0];
      v34.i64[1] = vpadd_f32(v37, v37).u32[0];
      float32x4_t v38 = vsubq_f32(vsubq_f32(v33, v30), v34);
      v36.i8[0] = *((unsigned char *)a1 + 4);
      *(float *)v36.i32 = (float)v36.u32[0];
      float32x4_t v39 = vdivq_f32(v30, (float32x4_t)vdupq_lane_s32(v36, 0));
      v33.i8[0] = *((unsigned char *)a1 + 5);
      v33.f32[0] = (float)v33.u32[0];
      float32x4_t v113 = v39;
      float32x4_t v114 = vdivq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0));
      v39.i8[0] = *((unsigned char *)a1 + 6);
      v39.f32[0] = (float)v39.u32[0];
      float32x4_t v115 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
      break;
    default:
      unint64_t v59 = 0;
      int32x4_t v60 = vdupq_n_s32(v10);
      float32x4_t v61 = 0uLL;
      v62.i64[0] = 0x400000004;
      v62.i64[1] = 0x400000004;
      int32x4_t v63 = (int32x4_t)xmmword_18898C3A0;
      float32x4_t v64 = 0uLL;
      float32x4_t v65 = (int8x16_t *)a2;
      float32x4_t v66 = 0uLL;
      float32x4_t v67 = 0uLL;
      a8 = 0uLL;
      float32x4_t v68 = 0uLL;
      float32x4_t v69 = 0uLL;
      float32x4_t v70 = 0uLL;
      do
      {
        float32x4_t v71 = (const float *)&a1[v59 / 2 + 4];
        uint8x8_t v72 = (uint8x8_t)vld1_dup_f32(v71);
        int16x4_t v73 = (int16x4_t)vmovl_u8(v72).u64[0];
        int8x8_t v74 = (int8x8_t)vmovn_s32(vcgtq_s32(v60, v63));
        int32x4_t v63 = vaddq_s32(v63, v62);
        int8x16_t v75 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v73), v74));
        int8x16_t v76 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v73, (int16x4_t)0x1000100010001), v74));
        int8x16_t v77 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v73, (int16x4_t)0x2000200020002), v74));
        float32x4_t v61 = vaddq_f32(v61, (float32x4_t)vandq_s8(*v65, v75));
        float32x4_t v67 = vaddq_f32(v67, (float32x4_t)vandq_s8(*v65, v76));
        float32x4_t v69 = vaddq_f32(v69, (float32x4_t)vandq_s8(*v65, v77));
        int8x16_t v78 = v65[54];
        float32x4_t v64 = vaddq_f32(v64, (float32x4_t)vandq_s8(v78, v75));
        a8 = vaddq_f32(a8, (float32x4_t)vandq_s8(v78, v76));
        float32x4_t v70 = vaddq_f32(v70, (float32x4_t)vandq_s8(v78, v77));
        int8x16_t v79 = v65[108];
        float32x4_t v66 = vaddq_f32(v66, (float32x4_t)vandq_s8(v79, v75));
        float32x4_t v68 = vaddq_f32(v68, (float32x4_t)vandq_s8(v79, v76));
        float32x4_t v9 = vaddq_f32(v9, (float32x4_t)vandq_s8(v79, v77));
        v59 += 4;
        ++v65;
      }
      while (v59 < v10);
      float32x4_t v80 = *(float32x4_t *)(a2 + 3504);
      v80.i32[3] = 0;
      *(float32x2_t *)v81.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), *(float32x2_t *)v61.f32);
      float32x2_t v82 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL), *(float32x2_t *)v64.f32);
      float32x2_t v83 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL), *(float32x2_t *)v66.f32);
      v81.i32[0] = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32).u32[0];
      v81.i32[1] = vpadd_f32(v82, v82).u32[0];
      v81.i64[1] = vpadd_f32(v83, v83).u32[0];
      *(float32x2_t *)v84.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), *(float32x2_t *)v67.f32);
      v84.i32[0] = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32).u32[0];
      float32x2_t v85 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), *(float32x2_t *)a8.f32);
      float32x2_t v86 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), *(float32x2_t *)v68.f32);
      v84.i32[1] = vpadd_f32(v85, v85).u32[0];
      v84.i64[1] = vpadd_f32(v86, v86).u32[0];
      *(float32x2_t *)v87.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL), *(float32x2_t *)v69.f32);
      v87.i32[0] = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32).u32[0];
      float32x2_t v88 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), *(float32x2_t *)v70.f32);
      int32x2_t v89 = (int32x2_t)vpadd_f32(v88, v88);
      float32x2_t v90 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
      float32x2_t v91 = vadd_f32(v90, *(float32x2_t *)v9.f32);
      v87.i32[1] = v89.i32[0];
      v87.i64[1] = vpadd_f32(v91, v91).u32[0];
      float32x4_t v92 = vsubq_f32(vsubq_f32(vsubq_f32(vmulq_n_f32(v80, (float)v10), v81), v84), v87);
      v89.i8[0] = *((unsigned char *)a1 + 4);
      *(float *)v89.i32 = (float)v89.u32[0];
      float32x4_t v93 = vdivq_f32(v81, (float32x4_t)vdupq_lane_s32(v89, 0));
      v90.i8[0] = *((unsigned char *)a1 + 5);
      v90.f32[0] = (float)v90.u32[0];
      float32x4_t v113 = v93;
      float32x4_t v114 = vdivq_f32(v84, (float32x4_t)vdupq_lane_s32((int32x2_t)v90, 0));
      v93.i8[0] = *((unsigned char *)a1 + 6);
      v93.f32[0] = (float)v93.u32[0];
      float32x4_t v94 = vdivq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 0));
      v87.i8[0] = *((unsigned char *)a1 + 7);
      v87.f32[0] = (float)v87.u32[0];
      float32x4_t v115 = v94;
      float32x4_t v116 = vdivq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 0));
      break;
  }
  uint64_t v95 = 0;
  if (v8 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v8;
  }
  float32x2_t v96 = a1 + 112;
  do
  {
    uint64_t v97 = *((unsigned __int8 *)a1 + v95 + 4);
    if (!*((unsigned char *)a1 + v95 + 4)) {
      compute_avgs_and_dirs_3_comp_rgb();
    }
    float32x4_t v98 = *(&v113 + v95);
    *(float32x4_t *)(a3 + 32 * v95) = v98;
    float32x4_t v99 = 0uLL;
    float32x4_t v100 = v96;
    float32x4_t v101 = 0uLL;
    float32x4_t v102 = 0uLL;
    do
    {
      unsigned int v103 = *(unsigned __int8 *)v100;
      float32x4_t v100 = (unsigned __int16 *)((char *)v100 + 1);
      int32x2_t v104 = (unsigned __int32 *)(a2 + 4 * v103);
      a8.i32[0] = *v104;
      a8.i32[1] = v104[216];
      a8.i32[2] = v104[432];
      float32x4_t v105 = vsubq_f32(a8, v98);
      int16x4_t v106 = vmovn_s32(vcgtzq_f32(v105));
      float32x4_t v99 = vaddq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v105, (int8x16_t)vmovl_s16(vdup_lane_s16(v106, 0))));
      float32x4_t v101 = vaddq_f32(v101, (float32x4_t)vandq_s8((int8x16_t)v105, (int8x16_t)vmovl_s16(vdup_lane_s16(v106, 1))));
      a8 = (float32x4_t)vandq_s8((int8x16_t)v105, (int8x16_t)vmovl_s16(vdup_lane_s16(v106, 2)));
      float32x4_t v102 = vaddq_f32(v102, a8);
      --v97;
    }
    while (v97);
    int8x16_t v107 = (int8x16_t)vmulq_f32(v99, v99);
    *(float32x2_t *)v107.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL), *(float32x2_t *)v107.i8);
    float32x4_t v108 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8), 0);
    int8x16_t v109 = (int8x16_t)vmulq_f32(v101, v101);
    *(float32x2_t *)v109.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL), *(float32x2_t *)v109.i8);
    a8 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8), 0);
    int8x16_t v110 = (int8x16_t)vmulq_f32(v102, v102);
    *(float32x2_t *)v110.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL), *(float32x2_t *)v110.i8);
    int8x16_t v111 = (int8x16_t)vcgtq_f32(a8, v108);
    int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v110.i8), 0), (float32x4_t)vbslq_s8(v111, (int8x16_t)a8, (int8x16_t)v108)), (int8x16_t)v102, vbslq_s8(v111, (int8x16_t)v101, (int8x16_t)v99));
    *(int8x16_t *)(a3 + 32 * v95++ + 16) = result;
    v96 += 108;
  }
  while (v95 != v8);
  return result;
}

_WORD *compute_avgs_and_dirs_2_comp(_WORD *result, int8x16_t *a2, int a3, int a4, uint64_t a5, double a6, double a7, double a8, int32x4_t a9)
{
  if (a3 || a4 != 1)
  {
    if (a3 || a4 != 2)
    {
      if (a3 != 1 || a4 != 2) {
        compute_avgs_and_dirs_2_comp();
      }
      v9.i64[1] = 0;
      float32x4_t v10 = (float32x4_t)vextq_s8(a2[219], (int8x16_t)0, 4uLL).u64[0];
      unint64_t v11 = a2 + 108;
      a2 += 54;
    }
    else
    {
      float32x4_t v9 = (float32x4_t)vzip2q_s32((int32x4_t)0, (int32x4_t)0);
      float32x4_t v10 = (float32x4_t)vuzp1q_s32((int32x4_t)a2[219], (int32x4_t)v9);
      unint64_t v11 = a2 + 108;
    }
  }
  else
  {
    float32x4_t v10 = (float32x4_t)a2[219];
    v9.i64[1] = 0;
    v10.i64[1] = 0;
    unint64_t v11 = a2 + 54;
  }
  uint64_t v12 = (unsigned __int16)*result;
  if (!*result) {
    compute_avgs_and_dirs_2_comp();
  }
  uint64_t v13 = 0;
  int32x4_t v14 = (unsigned __int8 *)(result + 112);
  do
  {
    LODWORD(v15) = *((unsigned __int8 *)result + v13 + 4);
    if (!*((unsigned char *)result + v13 + 4)) {
      compute_avgs_and_dirs_2_comp();
    }
    if (v12 != 1)
    {
      float32x4_t v16 = 0uLL;
      uint64_t v17 = *((unsigned __int8 *)result + v13 + 4);
      float32x4_t v18 = v14;
      do
      {
        int v19 = *v18++;
        v9.i32[0] = a2->i32[v19];
        v9.i32[1] = v11->i32[v19];
        float32x4_t v16 = vaddq_f32(v16, v9);
        --v17;
      }
      while (v17);
      v9.f32[0] = (float)v15;
      float32x4_t v10 = vdivq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
    }
    uint64_t v20 = 0;
    *(float32x4_t *)(a5 + 32 * v13) = v10;
    if (v15 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v15;
    }
    float32x4_t v21 = 0uLL;
    float32x4_t v22 = 0uLL;
    do
    {
      uint64_t v23 = v14[v20];
      a9.i32[0] = a2->i32[v23];
      a9.i32[1] = v11->i32[v23];
      float32x4_t v24 = vsubq_f32((float32x4_t)a9, v10);
      int16x4_t v25 = vmovn_s32(vcgtzq_f32(v24));
      float32x4_t v21 = vaddq_f32(v21, (float32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vmovl_s16(vdup_lane_s16(v25, 0))));
      a9 = (int32x4_t)vandq_s8((int8x16_t)v24, (int8x16_t)vmovl_s16(vdup_lane_s16(v25, 1)));
      float32x4_t v22 = vaddq_f32(v22, (float32x4_t)a9);
      ++v20;
    }
    while (v15 != v20);
    int8x16_t v26 = (int8x16_t)vmulq_f32(v21, v21);
    *(float32x2_t *)v26.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(float32x2_t *)v26.i8);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v22, v22);
    *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
    a9 = vmovl_s16(vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8)), 0));
    float32x4_t v9 = (float32x4_t)vbslq_s8((int8x16_t)a9, (int8x16_t)v22, (int8x16_t)v21);
    *(float32x4_t *)(a5 + 32 * v13++ + 16) = v9;
    v14 += 216;
  }
  while (v13 != v12);
  return result;
}

float32x2_t compute_error_squared_rgba(_WORD *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v8 = (unsigned __int16)*a1;
  if (!*a1) {
    compute_error_squared_rgba();
  }
  uint64_t v9 = 0;
  float32x4_t v10 = a2 + 54;
  unint64_t v11 = a2 + 108;
  uint64_t v12 = a2 + 162;
  uint64_t v13 = a1 + 112;
  float32x4_t v14 = 0uLL;
  long long v15 = xmmword_18898C3A0;
  float32x4_t v16 = (uint32x4_t *)&unk_1E90FF000;
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  int32x4_t v18 = vdupq_n_s32(0x501502F9u);
  int32x4_t v19 = vdupq_n_s32(0xD01502F9);
  v20.i64[0] = 0x400000004;
  v20.i64[1] = 0x400000004;
  float32x4_t v21 = (float *)&unk_1889B1000;
  float32x4_t v22 = 0uLL;
  do
  {
    unint64_t v23 = *((unsigned __int8 *)a1 + v9 + 4);
    if (!*((unsigned char *)a1 + v9 + 4)) {
      compute_error_squared_rgba();
    }
    float32x4_t v24 = (float32x4_t *)(a4 + 32 * v9);
    float32x4_t v25 = *v24;
    float32x4_t v26 = v24[1];
    int8x16_t v27 = (_OWORD *)(a3 + 32 * v9);
    int32x4_t v28 = *(int32x4_t *)v27;
    float32x4_t v29 = *((float32x4_t *)v27 + 1);
    {
      int8x16_t v79 = a1;
      int8x16_t v76 = a7;
      uint64_t v77 = a5;
      int16x4_t v73 = a6;
      uint64_t v74 = a4;
      uint64_t v78 = a3;
      int8x16_t v75 = a2;
      uint64_t v80 = v8;
      uint64_t v81 = v9;
      float32x2_t v82 = v10;
      float32x2_t v83 = v11;
      float32x4_t v84 = v12;
      float32x2_t v85 = v13;
      unint64_t v86 = v23;
      long long v71 = v15;
      float32x4_t v72 = v14;
      int32x4_t v69 = v19;
      int32x4_t v70 = v18;
      int32x4_t v68 = v28;
      float32x4_t v67 = v25;
      float32x4_t v25 = v67;
      int32x4_t v28 = v68;
      int32x4_t v19 = v69;
      v20.i64[0] = 0x400000004;
      v20.i64[1] = 0x400000004;
      int32x4_t v18 = v70;
      long long v15 = v71;
      v17.i64[0] = 0x100000001;
      v17.i64[1] = 0x100000001;
      float32x4_t v14 = v72;
      uint64_t v13 = v85;
      unint64_t v23 = v86;
      float32x4_t v21 = (float *)&unk_1889B1000;
      float32x4_t v16 = (uint32x4_t *)&unk_1E90FF000;
      unint64_t v11 = v83;
      uint64_t v12 = v84;
      uint64_t v9 = v81;
      float32x4_t v10 = v82;
      a4 = v74;
      a2 = v75;
      a5 = v77;
      a3 = v78;
      a6 = v73;
      a7 = v76;
      int v63 = v62;
      a1 = v79;
      uint64_t v8 = v80;
      if (v63)
      {
        mask(vmask4)::shift = v71;
        float32x4_t v25 = v67;
        int32x4_t v28 = v68;
        int32x4_t v19 = v69;
        v20.i64[0] = 0x400000004;
        v20.i64[1] = 0x400000004;
        int32x4_t v18 = v70;
        long long v15 = v71;
        v17.i64[0] = 0x100000001;
        v17.i64[1] = 0x100000001;
        float32x4_t v14 = v72;
        uint64_t v13 = v85;
        unint64_t v23 = v86;
        float32x4_t v21 = (float *)&unk_1889B1000;
        float32x4_t v16 = (uint32x4_t *)&unk_1E90FF000;
        unint64_t v11 = v83;
        uint64_t v12 = v84;
        uint64_t v9 = v81;
        float32x4_t v10 = v82;
        a1 = v79;
        uint64_t v8 = v80;
        a4 = v74;
        a2 = v75;
        a5 = v77;
        a3 = v78;
        a6 = v73;
        a7 = v76;
      }
    }
    if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vceqzq_f32(v25), v17), v16[55])) != 15) {
      compute_error_squared_rgba();
    }
    unint64_t v30 = 0;
    float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 0);
    float32x4_t v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 1);
    float32x4_t v33 = (float32x4_t)vdupq_laneq_s32(v28, 2);
    float32x4_t v34 = (float32x4_t)vdupq_laneq_s32(v28, 3);
    float32x4_t v35 = a2[221];
    int32x4_t v36 = (int32x4_t)v15;
    float32x4_t v37 = (float32x4_t)v19;
    float32x4_t v38 = (float32x4_t)v18;
    int32x4_t v39 = vdupq_n_s32(v23);
    do
    {
      v7.i32[0] = *(_DWORD *)&v13[v30 / 2];
      float32x4_t v40 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.f32));
      uint64_t v41 = v40.u32[1];
      uint64_t v42 = v40.u32[3];
      uint64_t v43 = v40.u32[0];
      uint64_t v44 = v40.u32[2];
      v40.i32[0] = a2->i32[v40.u32[0]];
      float32x4_t v45 = &v10->i32[v40.u32[1]];
      v40.i32[1] = a2->i32[v40.u32[1]];
      v46.i32[0] = v10->i32[v43];
      v46.i32[1] = *v45;
      v40.i32[2] = a2->i32[v40.u32[2]];
      float32x4_t v47 = &v10->i32[v40.u32[3]];
      v46.i32[2] = v10->i32[v44];
      v40.i32[3] = a2->i32[v40.u32[3]];
      v48.i32[0] = v11->i32[v43];
      v46.i32[3] = *v47;
      v48.i32[1] = v11->i32[v41];
      v48.i32[2] = v11->i32[v44];
      v49.i32[0] = v12->i32[v43];
      v48.i32[3] = v11->i32[v42];
      v49.i32[1] = v12->i32[v41];
      v49.i32[2] = v12->i32[v44];
      v49.i32[3] = v12->i32[v42];
      float32x4_t v50 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v40, v29.f32[0]), vmulq_lane_f32(v46, *(float32x2_t *)v29.f32, 1)), vmulq_laneq_f32(v48, v29, 2)), vmulq_laneq_f32(v49, v29, 3));
      float32x4_t v38 = vminnmq_f32(v50, v38);
      float32x4_t v37 = vmaxnmq_f32(v50, v37);
      float32x4_t v51 = vaddq_f32(vsubq_f32(v31, v40), vmulq_n_f32(v50, v29.f32[0]));
      float32x4_t v52 = vaddq_f32(vsubq_f32(v32, v46), vmulq_lane_f32(v50, *(float32x2_t *)v29.f32, 1));
      float32x4_t v53 = vaddq_f32(vsubq_f32(v33, v48), vmulq_laneq_f32(v50, v29, 2));
      float32x4_t v54 = vaddq_f32(vsubq_f32(v34, v49), vmulq_laneq_f32(v50, v29, 3));
      int8x16_t v55 = (int8x16_t)vcgtq_s32(v39, v36);
      float32x4_t v56 = vaddq_f32(vmulq_f32(v51, vmulq_n_f32(v51, v35.f32[0])), vmulq_f32(v52, vmulq_lane_f32(v52, *(float32x2_t *)v35.f32, 1)));
      float32x4_t v57 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v40, v26.f32[0]), vmulq_lane_f32(v46, *(float32x2_t *)v26.f32, 1)), vmulq_laneq_f32(v48, v26, 2)), vmulq_laneq_f32(v49, v26, 3));
      float32x4_t v58 = vsubq_f32(vmulq_n_f32(v57, v26.f32[0]), v40);
      float32x4_t v59 = vsubq_f32(vmulq_lane_f32(v57, *(float32x2_t *)v26.f32, 1), v46);
      float32x4_t v60 = vsubq_f32(vmulq_laneq_f32(v57, v26, 2), v48);
      float32x4_t v61 = vsubq_f32(vmulq_laneq_f32(v57, v26, 3), v49);
      float32x4_t v22 = vaddq_f32(v22, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v54, vmulq_laneq_f32(v54, v35, 3)), vaddq_f32(vmulq_f32(v53, vmulq_laneq_f32(v53, v35, 2)), v56)), v55));
      float32x4_t v7 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v61, vmulq_laneq_f32(v61, v35, 3)), vaddq_f32(vmulq_f32(v60, vmulq_laneq_f32(v60, v35, 2)), vaddq_f32(vmulq_f32(v58, vmulq_n_f32(v58, v35.f32[0])), vmulq_f32(v59, vmulq_lane_f32(v59, *(float32x2_t *)v35.f32, 1))))), v55);
      float32x4_t v14 = vaddq_f32(v14, v7);
      int32x4_t v36 = vaddq_s32(v36, v20);
      v30 += 4;
    }
    while (v30 < v23);
    *(float *)(a5 + 4 * v9++) = fmaxf(vmaxvq_f32(v37) - vminvq_f32(v38), v21[718]);
    v13 += 108;
  }
  while (v9 != v8);
  float32x2_t v64 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL), *(float32x2_t *)v22.f32);
  *a6 = vpadd_f32(v64, v64).u32[0];
  float32x2_t v65 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), *(float32x2_t *)v14.f32);
  float32x2_t result = vpadd_f32(v65, v65);
  *a7 = result.i32[0];
  return result;
}

float32x2_t compute_error_squared_rgb(_WORD *a1, float32x4_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v6 = (unsigned __int16)*a1;
  if (!*a1) {
    compute_error_squared_rgb();
  }
  uint64_t v7 = 0;
  uint64_t v8 = a2 + 54;
  uint64_t v9 = a2 + 108;
  float32x4_t v10 = a1 + 112;
  float32x4_t v11 = 0uLL;
  long long v12 = xmmword_18898C3A0;
  uint64_t v13 = (uint32x4_t *)&unk_1E90FF000;
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  int32x4_t v15 = vdupq_n_s32(0x501502F9u);
  int32x4_t v16 = vdupq_n_s32(0xD01502F9);
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  int32x4_t v18 = (float *)&unk_1889B1000;
  float32x4_t v19 = 0uLL;
  do
  {
    unint64_t v20 = *((unsigned __int8 *)a1 + v7 + 4);
    if (!*((unsigned char *)a1 + v7 + 4)) {
      compute_error_squared_rgb();
    }
    float32x4_t v21 = (_OWORD *)(a3 + 144 * v7);
    int32x4_t v22 = *((int32x4_t *)v21 + 4);
    float32x4_t v23 = *((float32x4_t *)v21 + 5);
    float32x4_t v24 = *((float32x4_t *)v21 + 6);
    float32x4_t v25 = *((float32x4_t *)v21 + 7);
    {
      float32x4_t v72 = a1;
      int32x4_t v69 = a5;
      float32x4_t v67 = a4;
      uint64_t v70 = a3;
      uint64_t v71 = v6;
      int32x4_t v68 = a2;
      uint64_t v73 = v7;
      uint64_t v74 = v8;
      int8x16_t v75 = v9;
      int8x16_t v76 = v10;
      unint64_t v77 = v20;
      long long v65 = v12;
      float32x4_t v66 = v11;
      int32x4_t v63 = v16;
      int32x4_t v64 = v15;
      float32x4_t v61 = v23;
      float32x4_t v62 = v19;
      int32x4_t v60 = v22;
      float32x4_t v59 = v24;
      float32x4_t v24 = v59;
      int32x4_t v22 = v60;
      float32x4_t v23 = v61;
      float32x4_t v19 = v62;
      int32x4_t v16 = v63;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      int32x4_t v15 = v64;
      long long v12 = v65;
      v14.i64[0] = 0x100000001;
      v14.i64[1] = 0x100000001;
      float32x4_t v11 = v66;
      float32x4_t v10 = v76;
      unint64_t v20 = v77;
      int32x4_t v18 = (float *)&unk_1889B1000;
      uint64_t v13 = (uint32x4_t *)&unk_1E90FF000;
      uint64_t v8 = v74;
      uint64_t v9 = v75;
      a3 = v70;
      uint64_t v6 = v71;
      a2 = v68;
      a5 = v69;
      a4 = v67;
      int v55 = v54;
      a1 = v72;
      uint64_t v7 = v73;
      if (v55)
      {
        mask(vmask4)::shift = v65;
        float32x4_t v24 = v59;
        int32x4_t v22 = v60;
        float32x4_t v23 = v61;
        float32x4_t v19 = v62;
        int32x4_t v16 = v63;
        v17.i64[0] = 0x400000004;
        v17.i64[1] = 0x400000004;
        int32x4_t v15 = v64;
        long long v12 = v65;
        v14.i64[0] = 0x100000001;
        v14.i64[1] = 0x100000001;
        float32x4_t v11 = v66;
        float32x4_t v10 = v76;
        unint64_t v20 = v77;
        int32x4_t v18 = (float *)&unk_1889B1000;
        uint64_t v13 = (uint32x4_t *)&unk_1E90FF000;
        uint64_t v8 = v74;
        uint64_t v9 = v75;
        a1 = v72;
        uint64_t v7 = v73;
        a3 = v70;
        uint64_t v6 = v71;
        a2 = v68;
        a5 = v69;
        a4 = v67;
      }
    }
    if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vceqzq_f32(v24), v14), v13[55])) != 15) {
      compute_error_squared_rgb();
    }
    unint64_t v26 = 0;
    float32x4_t v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
    float32x4_t v29 = (float32x4_t)vdupq_laneq_s32(v22, 2);
    float32x4_t v30 = a2[221];
    int32x4_t v31 = (int32x4_t)v12;
    float32x4_t v32 = (float32x4_t)v16;
    float32x4_t v33 = (float32x4_t)v15;
    int32x4_t v34 = vdupq_n_s32(v20);
    do
    {
      v5.i32[0] = *(_DWORD *)&v10[v26 / 2];
      float32x4_t v35 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v5.f32));
      uint64_t v36 = v35.u32[1];
      uint64_t v37 = v35.u32[1];
      uint64_t v38 = v35.u32[0];
      uint64_t v39 = v35.u32[3];
      uint64_t v40 = v35.u32[2];
      v35.i32[0] = a2->i32[v35.u32[0]];
      v35.i32[1] = a2->i32[v35.u32[1]];
      v41.i32[0] = v8->i32[v38];
      v35.i32[2] = a2->i32[v35.u32[2]];
      v41.i32[1] = v8->i32[v36];
      uint64_t v42 = &v8->i32[v35.u32[3]];
      v35.i32[3] = a2->i32[v35.u32[3]];
      v41.i32[2] = v8->i32[v40];
      v41.i32[3] = *v42;
      v43.i32[0] = v9->i32[v38];
      v43.i32[1] = v9->i32[v37];
      v43.i32[2] = v9->i32[v40];
      v43.i32[3] = v9->i32[v39];
      float32x4_t v44 = vaddq_f32(vaddq_f32(vmulq_n_f32(v35, v23.f32[0]), vmulq_lane_f32(v41, *(float32x2_t *)v23.f32, 1)), vmulq_laneq_f32(v43, v23, 2));
      float32x4_t v33 = vminnmq_f32(v44, v33);
      float32x4_t v32 = vmaxnmq_f32(v44, v32);
      float32x4_t v45 = vaddq_f32(vsubq_f32(v27, v35), vmulq_n_f32(v44, v23.f32[0]));
      float32x4_t v46 = vaddq_f32(vsubq_f32(v28, v41), vmulq_lane_f32(v44, *(float32x2_t *)v23.f32, 1));
      float32x4_t v47 = vaddq_f32(vsubq_f32(v29, v43), vmulq_laneq_f32(v44, v23, 2));
      int8x16_t v48 = (int8x16_t)vcgtq_s32(v34, v31);
      float32x4_t v49 = vaddq_f32(vmulq_f32(v45, vmulq_n_f32(v45, v30.f32[0])), vmulq_f32(v46, vmulq_lane_f32(v46, *(float32x2_t *)v30.f32, 1)));
      float32x4_t v50 = vaddq_f32(vaddq_f32(vmulq_n_f32(v35, v25.f32[0]), vmulq_lane_f32(v41, *(float32x2_t *)v25.f32, 1)), vmulq_laneq_f32(v43, v25, 2));
      float32x4_t v51 = vsubq_f32(vmulq_n_f32(v50, v25.f32[0]), v35);
      float32x4_t v52 = vsubq_f32(vmulq_lane_f32(v50, *(float32x2_t *)v25.f32, 1), v41);
      float32x4_t v53 = vsubq_f32(vmulq_laneq_f32(v50, v25, 2), v43);
      float32x4_t v19 = vaddq_f32(v19, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v47, vmulq_laneq_f32(v47, v30, 2)), v49), v48));
      float32x4_t v5 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v53, vmulq_laneq_f32(v53, v30, 2)), vaddq_f32(vmulq_f32(v51, vmulq_n_f32(v51, v30.f32[0])), vmulq_f32(v52, vmulq_lane_f32(v52, *(float32x2_t *)v30.f32, 1)))), v48);
      float32x4_t v11 = vaddq_f32(v11, v5);
      int32x4_t v31 = vaddq_s32(v31, v17);
      v26 += 4;
    }
    while (v26 < v20);
    *(float *)(a3 + 144 * v7++ + 128) = fmaxf(vmaxvq_f32(v32) - vminvq_f32(v33), v18[718]);
    v10 += 108;
  }
  while (v7 != v6);
  float32x2_t v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), *(float32x2_t *)v19.f32);
  *a4 = vpadd_f32(v56, v56).u32[0];
  float32x2_t v57 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), *(float32x2_t *)v11.f32);
  float32x2_t result = vpadd_f32(v57, v57);
  *a5 = result.i32[0];
  return result;
}

void compute_avgs_and_dirs_4_comp()
{
}

{
  __assert_rtn("compute_avgs_and_dirs_4_comp", "astcenc_averages_and_directions.cpp", 404, "texel_count > 0");
}

void compute_partition_averages_rgba()
{
}

void compute_avgs_and_dirs_3_comp()
{
}

{
  __assert_rtn("compute_avgs_and_dirs_3_comp", "astcenc_averages_and_directions.cpp", 519, "texel_count > 0");
}

void compute_avgs_and_dirs_3_comp_rgb()
{
}

{
  __assert_rtn("compute_partition_averages_rgb", "astcenc_averages_and_directions.cpp", 54, "texel_count > 0");
}

{
  __assert_rtn("compute_avgs_and_dirs_3_comp_rgb", "astcenc_averages_and_directions.cpp", 584, "texel_count > 0");
}

void compute_avgs_and_dirs_2_comp()
{
}

{
  __assert_rtn("compute_avgs_and_dirs_2_comp", "astcenc_averages_and_directions.cpp", 674, "texel_count > 0");
}

{
  __assert_rtn("compute_avgs_and_dirs_2_comp", "astcenc_averages_and_directions.cpp", 659, "component1 == 1 && component2 == 2");
}

void compute_error_squared_rgba()
{
}

{
  __assert_rtn("compute_error_squared_rgba", "astcenc_averages_and_directions.cpp", 746, "texel_count > 0");
}

{
  __assert_rtn("compute_error_squared_rgba", "astcenc_averages_and_directions.cpp", 764, "all(l_samec.amod == vfloat4(0.0f))");
}

void compute_error_squared_rgb()
{
}

{
  __assert_rtn("compute_error_squared_rgb", "astcenc_averages_and_directions.cpp", 861, "texel_count > 0");
}

{
  __assert_rtn("compute_error_squared_rgb", "astcenc_averages_and_directions.cpp", 879, "all(l_samec.amod == vfloat4(0.0f))");
}

block_size_descriptor *compress_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  uint64_t v274 = *MEMORY[0x1E4F143B8];
  float v6 = 30720.0;
  if (!*(unsigned char *)(a2 + 3769)) {
    float v6 = 65535.0;
  }
  if (*(float *)(a2 + 3500) == v6)
  {
    float v7 = *(float *)(a2 + 3532);
    BOOL v8 = *(unsigned char *)(a2 + 3552) != 0;
    int v201 = (unsigned char *)(a2 + 3552);
    BOOL v9 = v7 == v6 && *(unsigned char *)(a2 + 3552) != 0;
    BOOL v10 = v7 != v6;
  }
  else
  {
    BOOL v9 = 0;
    int v201 = (unsigned char *)(a2 + 3552);
    BOOL v8 = *(unsigned char *)(a2 + 3552) != 0;
    BOOL v10 = 1;
  }
  uint64_t v11 = *(void *)(a1 + 112);
  unsigned int v12 = *(_DWORD *)a1;
  int v252 = 0;
  long long v250 = 0u;
  long long v251 = 0u;
  long long v248 = 0u;
  long long v249 = 0u;
  memset(v247, 0, sizeof(v247));
  *(_OWORD *)v246 = 0u;
  uint64_t v13 = *(unsigned int *)(a1 + 44);
  uint64_t v244 = *(void *)(a1 + 48);
  int v245 = *(_DWORD *)(a1 + 56);
  uint64_t v242 = *(void *)(a1 + 72);
  int v243 = *(_DWORD *)(a1 + 80);
  float32x4_t v14 = *(float32x4_t *)(a2 + 3488);
  float32x4_t v15 = *(float32x4_t *)(a2 + 3520);
  {
    uint64_t v191 = v13;
    float32x4_t v222 = v15;
    *(float32x4_t *)int v224 = v14;
    float32x4_t v15 = v222;
    float32x4_t v14 = *(float32x4_t *)v224;
    uint64_t v13 = v191;
    uint64_t v5 = a1;
    if (v192)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      float32x4_t v15 = v222;
      float32x4_t v14 = *(float32x4_t *)v224;
      uint64_t v13 = v191;
      uint64_t v5 = a1;
    }
  }
  int8x16_t v16 = (int8x16_t)vceqq_f32(v14, v15);
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v16, v17), (uint32x4_t)mask(vmask4)::shift)) == 15)
  {
    BYTE1(v246[0]) = 0;
    float32x4_t v18 = *(float32x4_t *)(a2 + 3472);
    if ((v12 & 0xFFFFFFFE) == 2)
    {
      int32x4_t v19 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32(v18));
      char v20 = 1;
    }
    else
    {
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v34 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(v18, (float32x4_t)0), _Q1), (float32x4_t)vdupq_n_s32(0x477FFF00u));
      _Q1.i64[0] = 0x3F0000003F000000;
      _Q1.i64[1] = 0x3F0000003F000000;
      int32x4_t v19 = vcvtq_s32_f32(vaddq_f32(v34, _Q1));
      char v20 = 2;
    }
    LOBYTE(v246[0]) = v20;
    *(int32x4_t *)((char *)v247 + 4) = v19;
    float32x4_t v35 = (block_size_descriptor *)v11;
    uint64_t v36 = a3;
    return symbolic_to_physical(v35, (unsigned __int8 *)v246, v36);
  }
  uint64_t v197 = v13;
  if (v8 && v10) {
    float v21 = 0.95238;
  }
  else {
    float v21 = 1.0;
  }
  int8x16_t v22 = *(int8x16_t *)(a2 + 3536);
  float32x2_t v23 = (float32x2_t)vextq_s8(v22, v22, 8uLL).u64[0];
  *(float32x2_t *)v22.i8 = vadd_f32(v23, *(float32x2_t *)v22.i8);
  v23.i8[0] = *(unsigned char *)(v11 + 3);
  float v24 = *(float *)(v5 + 88);
  float v25 = *(float *)(v5 + 84)
      * (float)((float)v23.u32[0] * vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8).f32[0]);
  long long v241 = xmmword_1889B5450;
  uint64_t v239 = *(void *)(v5 + 92);
  if (v9) {
    float v26 = 0.66667;
  }
  else {
    float v26 = 1.0;
  }
  LODWORD(v247[0]) = 1900671690;
  LOBYTE(v246[0]) = 0;
  int v238 = 0;
  int v240 = 0;
  v237[0] = 1.0 / v24;
  v237[1] = 1.0;
  {
    uint64_t v5 = a1;
    if (v193)
    {
      *(float *)&compress_block(astcenc_contexti const&,image_block const&,unsigned char *,compression_working_buffers &)::errorval_overshoot = 1.0 / *(float *)(a1 + 88);
      uint64_t v5 = a1;
    }
  }
  float32x4_t v27 = (float32x4_t *)a4;
  float32x4_t v28 = v201;
  uint64_t v199 = a3;
  BOOL v29 = *(float *)(v5 + 104) < 0.85 || *(unsigned __int8 *)(v11 + 2) != 1;
  float v37 = v21 * (float)(v26 * v25);
  float v38 = *(float *)&v241;
  do
  {
    BOOL v39 = v29;
    float v40 = v37 * v237[v29];
    float v41 = compress_symbolic_block_for_partition_1plane((unsigned int *)v5, (block_size_descriptor *)v11, a2, !v29, 1u, 0, (uint64_t)v246, v27, v40* *(float *)&compress_block(astcenc_contexti const&,image_block const&,unsigned char *,compression_working_buffers &)::errorval_overshoot, 11);
    uint64_t block_mode = block_size_descriptor::get_block_mode((block_size_descriptor *)v11, LOWORD(v246[1]));
    if (v41 < v40) {
      goto LABEL_146;
    }
    if (v38 >= v41) {
      float v38 = v41;
    }
    BOOL v29 = 1;
    float32x4_t v27 = (float32x4_t *)a4;
    uint64_t v5 = a1;
  }
  while (!v39);
  int v202 = *(unsigned __int8 *)(block_mode + 3);
  *(float *)&long long v241 = v38;
  if (!*(unsigned char *)(v11 + 3)) {
    compress_block();
  }
  float32x2_t v43 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a2 + 3536), *(int8x16_t *)(a2 + 3536), 8uLL), *(float32x2_t *)(a2 + 3536));
  float v44 = 0.25 * vpadd_f32(v43, v43).f32[0];
  if (v44 < 0.0) {
    compress_block();
  }
  uint64_t v45 = 0;
  float v46 = 0.0;
  float v47 = 0.0;
  float v48 = 0.0;
  float v49 = 0.0;
  float v50 = 0.0;
  float v51 = 0.0;
  float v52 = 0.0;
  float v53 = 0.0;
  float v54 = 0.0;
  float v55 = 0.0;
  float v56 = 0.0;
  float v57 = 0.0;
  float v58 = 0.0;
  float v59 = 0.0;
  float v60 = 0.0;
  do
  {
    float v57 = v44 + v57;
    float v61 = *(float *)(a2 + v45);
    float v62 = *(float *)(a2 + v45 + 864);
    float v63 = *(float *)(a2 + v45 + 1728);
    float v64 = *(float *)(a2 + v45 + 2592);
    float v46 = v46 + (float)(v44 * v61);
    float v50 = v50 + (float)(v61 * (float)(v44 * v61));
    float v54 = v54 + (float)(v62 * (float)(v44 * v61));
    float v55 = v55 + (float)(v63 * (float)(v44 * v61));
    float v56 = v56 + (float)(v64 * (float)(v44 * v61));
    float v47 = v47 + (float)(v44 * v62);
    float v51 = v51 + (float)(v62 * (float)(v44 * v62));
    float v60 = v60 + (float)(v63 * (float)(v44 * v62));
    float v59 = v59 + (float)(v64 * (float)(v44 * v62));
    float v48 = v48 + (float)(v44 * v63);
    float v52 = v52 + (float)(v63 * (float)(v44 * v63));
    float v58 = v58 + (float)(v64 * (float)(v44 * v63));
    float v49 = v49 + (float)(v44 * v64);
    float v53 = v53 + (float)(v64 * (float)(v44 * v64));
    v45 += 4;
  }
  while (4 * *(unsigned __int8 *)(v11 + 3) != v45);
  float v65 = 1.0 / v57;
  if (v57 <= 0.0000001) {
    float v65 = 10000000.0;
  }
  float v66 = v65 * v46;
  float v67 = v50 - (float)(v46 * (float)(v65 * v46));
  float v68 = v54 - (float)(v47 * v66);
  float v69 = v55 - (float)(v48 * v66);
  float v70 = v56 - (float)(v49 * v66);
  float v71 = v65 * v47;
  float v72 = v51 - (float)(v47 * (float)(v65 * v47));
  float v73 = v60 - (float)(v48 * v71);
  float v74 = v59 - (float)(v49 * v71);
  float v75 = v65 * v48;
  float v76 = v52 - (float)(v48 * (float)(v65 * v48));
  float v77 = v58 - (float)(v49 * v75);
  float v78 = v53 - (float)(v49 * (float)(v65 * v49));
  float v79 = sqrtf(v67 * v72);
  float v80 = v69 * (float)(1.0 / sqrtf(v67 * v76));
  float v81 = v70 * (float)(1.0 / sqrtf(v67 * v78));
  float v82 = v73 * (float)(1.0 / sqrtf(v72 * v76));
  float v83 = v74 * (float)(1.0 / sqrtf(v72 * v78));
  float v84 = v77 * (float)(1.0 / sqrtf(v76 * v78));
  float v85 = fabsf(v68 * (float)(1.0 / v79));
  float v86 = fabsf(v80);
  if (v85 >= v86) {
    float v85 = v86;
  }
  float v87 = fabsf(v81);
  if (v85 >= v87) {
    float v85 = v87;
  }
  float v88 = fabsf(v82);
  if (v85 >= v88) {
    float v85 = v88;
  }
  float v89 = fabsf(v83);
  if (v85 >= v89) {
    float v85 = v89;
  }
  float v90 = fabsf(v84);
  if (v85 >= v90) {
    float v91 = v90;
  }
  else {
    float v91 = v85;
  }
  int v92 = v202;
  if (v202 >= 11) {
    int v92 = 11;
  }
  uint64_t v208 = a4 + 3776;
  unsigned int v209 = (float32x4_t *)(a4 + 1888);
  uint64_t v214 = a4 + 26048;
  unsigned int v203 = v92;
  int v204 = ~(-2 << v92);
  unsigned int v195 = (unsigned __int16 *)(v11 + 68);
  unsigned int v196 = (float32x4_t *)(v11 + 592);
  uint64_t v194 = v11 + 11304949;
  int v93 = 3;
  float32x4_t v94 = (int32x4_t *)&dword_18898C000;
  float v95 = *(float *)(a1 + 100);
  v96.i64[0] = 0x100000001;
  v96.i64[1] = 0x100000001;
  unsigned int v223 = (unsigned int *)v11;
  while (1)
  {
    unsigned int v97 = v93;
    if (v91 <= v95 && (v93 == 3 || !*v28))
    {
      float32x4_t v98 = *(float32x4_t *)(a2 + 3488);
      float32x4_t v99 = *(float32x4_t *)(a2 + 3520);
      {
        float32x4_t v217 = v99;
        float32x4_t v221 = v98;
        float32x4_t v99 = v217;
        float32x4_t v98 = v221;
        v96.i64[0] = 0x100000001;
        v96.i64[1] = 0x100000001;
        if (v172)
        {
          mask(vmask4)::shift = (__int128)v94[58];
          float32x4_t v99 = v217;
          float32x4_t v98 = v221;
          v96.i64[0] = 0x100000001;
          v96.i64[1] = 0x100000001;
        }
      }
      int8x16_t v100 = (int8x16_t)vceqq_s32(vdupq_n_s32(v97), v94[58]);
      if (!vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v98, v99), v96), v100), (uint32x4_t)mask(vmask4)::shift)))break; {
    }
      }
LABEL_121:
    int v93 = v97 - 1;
    if (!v97) {
      goto LABEL_125;
    }
  }
  if (!*(_DWORD *)(a1 + 68)) {
    compress_block();
  }
  if (!*(_DWORD *)(a1 + 64)) {
    compress_block();
  }
  if (!*(_DWORD *)(v11 + 8)) {
    compress_block();
  }
  int8x16_t v200 = v100;
  float v101 = *(float *)&compress_block(astcenc_contexti const&,image_block const&,unsigned char *,compression_working_buffers &)::errorval_overshoot;
  unsigned int v216 = v97;
  float32x4_t v102 = (int8x16_t *)a4;
  compute_ideal_colors_and_weights_2planes((block_size_descriptor *)v11, a2, v97, a4, (uint64_t)v209);
  unint64_t v103 = *(unsigned int *)(v11 + 8);
  if (v103)
  {
    int v104 = 0;
    unint64_t v105 = 0;
    int16x4_t v106 = v195;
    int8x16_t v107 = v196;
    do
    {
      int v108 = *v106;
      v106 += 3;
      if ((v108 & v204) != 0)
      {
        compute_ideal_weights_for_decimation((__int32 *)a4, v107, (_OWORD *)(v208 + 4 * (v104 & 0xFFFFFFC0)));
        compute_ideal_weights_for_decimation((__int32 *)v209, v107, (_OWORD *)(v208 + 4 * (v104 & 0xFFFFFFC0) + 128));
        unint64_t v103 = v223[2];
      }
      ++v105;
      v104 += 64;
      v107 += 8118;
    }
    while (v105 < v103);
  }
  float32x4_t v218 = *(float32x4_t *)(a4 + 32);
  float32x4_t v210 = *(float32x4_t *)(a4 + 96);
  float32x4_t v205 = *(float32x4_t *)(a4 + 1920);
  float32x4_t v198 = *(float32x4_t *)(a4 + 1984);
  compute_angular_endpoints_2planes((unint64_t)v223, v208, v203, a4);
  uint64_t v109 = v223[5];
  unsigned int v110 = v223[6];
  if (v110 > v109)
  {
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v112 = vdivq_f32(vsubq_f32(_Q0, v205), vsubq_f32(v198, v205));
    v113.i64[0] = 0x3F0000003F000000;
    v113.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V3.4S, #10.0 }
    int8x16_t v120 = (int8x16_t)vdupq_n_s32(0x7149F2CAu);
    float32x4_t v115 = (float32x4_t)vorrq_s8(vandq_s8(vbslq_s8(vandq_s8((int8x16_t)vcgtq_f32(v112, v113), (int8x16_t)vcgtq_f32(_Q3, v112)), (int8x16_t)v112, (int8x16_t)_Q3), v200), vbicq_s8(v120, v200));
    float32x4_t v116 = vdivq_f32(vsubq_f32(_Q0, v218), vsubq_f32(v210, v218));
    int8x16_t v117 = (int8x16_t)vcgtq_f32(v116, v113);
    int8x16_t v118 = (int8x16_t)vcgtq_f32(_Q3, v116);
    int8x16_t v119 = vandq_s8(v117, v118);
    v116.f32[0] = vminvq_f32((float32x4_t)vbslq_s8(v200, v120, vbslq_s8(v119, (int8x16_t)v116, (int8x16_t)_Q3)));
    v120.i32[0] = 1065520988;
    float v121 = v116.f32[0] * 1.02;
    float v122 = vminvq_f32(v115) * 1.02;
    uint64_t v123 = 4 * v109 + 179648;
    int v124 = v110 - v109;
    uint64_t v125 = 4 * v109 + 209792;
    int v126 = v109 << 6;
    float v127 = (unsigned char *)(v194 + 6 * v109);
    uint64_t v128 = 4 * v109 + 217984;
    uint64_t v129 = 4 * v109 + 196032;
    uint64_t v130 = v109 + 177600;
    unint64_t v131 = v127;
    do
    {
      char v132 = *v131;
      v131 += 6;
      if ((v132 & 1) == 0) {
        compress_block();
      }
      if (v203 >= *(v127 - 2))
      {
        v102->i8[v130] = 109 - *(v127 - 1);
        v115.i32[0] = *(__int32 *)((char *)v102->i32 + v129);
        if (v115.f32[0] > v121)
        {
          *(__int32 *)((char *)v102->i32 + v129) = 1065353216;
          v115.i32[0] = 1.0;
        }
        int v219 = v124;
        if (*(float *)((char *)v102->i32 + v128) > v122) {
          *(__int32 *)((char *)v102->i32 + v128) = 1065353216;
        }
        uint64_t v133 = *(v127 - 3);
        float32x4_t v134 = (unsigned __int8 *)&v223[32472 * v133 + 148];
        memset(v273, 0, sizeof(v273));
        long long v272 = 0u;
        long long v271 = 0u;
        float32x4_t v270 = 0u;
        long long v269 = 0u;
        long long v268 = 0u;
        int8x16_t v266 = 0u;
        long long v267 = 0u;
        int8x16_t v265 = 0u;
        unsigned int v211 = (__int32 *)((char *)v102->i32 + v123);
        unint64_t v206 = (float32x4_t *)(v208 + (v133 << 8));
        compute_quantized_weights_for_decimation((uint64_t)v134, v206, (float32x4_t *)&v265, v214 + (v126 & 0xFFFFFFC0), *(v127 - 2), *(float *)((char *)v102[512].i32 + v123), *(double *)v115.i64, *(double *)v120.i64, *(double *)_Q3.i64, *(double *)v119.i64, *(double *)v118.i64);
        LODWORD(v135) = *(_DWORD *)(a4 + v128);
        float32x4_t v102 = (int8x16_t *)a4;
        compute_quantized_weights_for_decimation((uint64_t)v134, v206 + 8, v273, v214 + (v126 & 0xFFFFFFC0) + 32, *(v127 - 2), *(float *)(a4 + v125), v135, v136, v137, v138, v139);
        *unsigned int v211 = compute_error_of_weight_set_2planes((float32x4_t *)a4, v209, v134, (float32x4_t *)&v265, v273, v140, v141, v142).u32[0];
        int v124 = v219;
      }
      else
      {
        *(__int32 *)((char *)v102->i32 + v123) = 2123789977;
      }
      v123 += 4;
      v125 += 4;
      v126 += 64;
      v128 += 4;
      v129 += 4;
      ++v130;
      float v127 = v131;
      --v124;
    }
    while (v124);
  }
  memset(v264, 0, sizeof(v264));
  memset(v263, 0, sizeof(v263));
  memset(v262, 0, sizeof(v262));
  memset(v261, 0, sizeof(v261));
  v273[0] = 0u;
  long long v272 = 0u;
  long long v271 = 0u;
  float32x4_t v270 = 0u;
  long long v269 = 0u;
  long long v268 = 0u;
  int8x16_t v266 = 0u;
  long long v267 = 0u;
  int8x16_t v265 = 0u;
  if (v102[1].i32[0] != 1) {
    compress_block();
  }
  v265.i32[0] = 1;
  int8x16_t v143 = vorrq_s8(vandq_s8(v102[124], v200), vbicq_s8(v102[6], v200));
  int8x16_t v266 = vorrq_s8(vandq_s8(v102[120], v200), vbicq_s8(v102[2], v200));
  float32x4_t v270 = (float32x4_t)v143;
  uint64_t v11 = (uint64_t)v223;
  partition_info = block_size_descriptor::get_partition_info((block_size_descriptor *)v223, 1u, 0);
  unsigned int v212 = compute_ideal_endpoint_formats((uint64_t)partition_info, a2, (uint64_t)&v265, a4 + 177600, a4 + 179648, *(unsigned int *)(a1 + 68), *(unsigned int *)(v11 + 20), *(unsigned int *)(v11 + 24), v264, (uint64_t)v263, (uint64_t)v262, (uint64_t)v261, (uint64_t)v102);
  if (v212)
  {
    unsigned int v145 = 0;
    float v146 = v37 * v101;
    float v147 = *(float *)v247;
    float v148 = 1.0e30;
    do
    {
      int v149 = *((_DWORD *)v263 + v145);
      if (v149 < *(_DWORD *)(v11 + 20) || v149 >= *(_DWORD *)(v11 + 24)) {
        compress_block();
      }
      int v151 = *((_DWORD *)v263 + v145);
      unsigned int v152 = (_WORD *)(v11 + 6 * v149 + 11304944);
      uint64_t v153 = v11 + 129888 * *(unsigned __int8 *)(v11 + 6 * v149 + 11304946);
      uint64_t v154 = *(unsigned __int8 *)(v153 + 594);
      if (!*(unsigned char *)(v153 + 594)) {
        compress_block();
      }
      int8x16_t v236 = 0uLL;
      uint64_t v155 = v145;
      uint64_t v156 = v153 + 592;
      unint64_t v220 = (unsigned __int8 *)(v153 + 594);
      int32x4_t v235 = 0uLL;
      int v260 = 0;
      long long v258 = 0u;
      long long v259 = 0u;
      long long v256 = 0u;
      long long v257 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v253 = 0u;
      long long v232 = v271;
      long long v233 = v272;
      float32x4_t v234 = v273[0];
      long long v228 = v267;
      long long v229 = v268;
      long long v230 = v269;
      float32x4_t v231 = v270;
      unsigned int v157 = (char *)(v214 + (v151 << 6) + 32);
      int v158 = (char *)&v258 + 4;
      int8x16_t v226 = v265;
      float32x4_t v227 = (float32x4_t)v266;
      do
      {
        *(v158 - 32) = *(v157 - 32);
        char v159 = *v157++;
        *v158++ = v159;
        --v154;
      }
      while (v154);
      if (*(_DWORD *)(a1 + 64))
      {
        unsigned int v207 = v145;
        unsigned int v160 = 1;
        int v161 = -1;
        while (1)
        {
          recompute_ideal_colors_2planes((float32x4_t *)a2, v11, v156, (uint64_t)&v256 + 4, (uint64_t)&v258 + 4, &v226, (float32x4_t *)&v236, (int8x16_t *)&v235, v216);
          BYTE8(v253) = pack_color_endpoints(*((unsigned __int8 *)v264 + 4 * v155), (unsigned __int8 *)&v254 + 4, *((_DWORD *)v262 + v155), v227, v231, v236, v235);
          WORD3(v253) = 0;
          HIDWORD(v253) = *((_DWORD *)v262 + v155);
          BYTE2(v253) = 0;
          WORD2(v253) = *v152;
          BYTE3(v253) = v216;
          LOWORD(v253) = 259;
          if (v160 == 1)
          {
            compute_symbolic_block_difference_2plane(a1, (block_size_descriptor *)v11, (uint64_t)&v253, (float32x4_t *)a2);
            float v163 = v162;
            if (v162 == -1.0e30)
            {
              LOBYTE(v253) = 0;
              float v163 = 1.0e30;
            }
            if (v163 < v148) {
              float v148 = v163;
            }
            unsigned int v164 = (unsigned int *)a1;
            if (v163 > (float)(v147 * (float)((float)((float)*(unsigned int *)(a1 + 64) * 0.045) + 1.08))) {
              goto LABEL_114;
            }
            if (v163 >= v147)
            {
              float v163 = v147;
            }
            else
            {
              *(float *)&long long v254 = v163;
              long long v249 = v257;
              long long v250 = v258;
              long long v251 = v259;
              int v252 = v260;
              v247[1] = v255;
              long long v248 = v256;
              *(_OWORD *)v246 = v253;
              v247[0] = v254;
              if (v163 < v146)
              {
                float v147 = v163;
                unsigned int v145 = v212;
                goto LABEL_116;
              }
            }
          }
          else
          {
            float v163 = v147;
            unsigned int v164 = (unsigned int *)a1;
          }
          unsigned int v165 = *v164;
          if (*v220 == *(unsigned __int8 *)(v11 + 3)) {
            char v166 = realign_weights_undecimated(v165, (block_size_descriptor *)v11, (float32x4_t *)a2, (uint64_t)&v253);
          }
          else {
            char v166 = realign_weights_decimated(v165, (block_size_descriptor *)v11, (float32x4_t *)a2, (uint64_t)&v253);
          }
          unsigned int v167 = (block_size_descriptor *)v11;
          char v168 = v166;
          compute_symbolic_block_difference_2plane(a1, v167, (uint64_t)&v253, (float32x4_t *)a2);
          if (v169 == -1.0e30)
          {
            LOBYTE(v253) = 0;
            float v169 = 1.0e30;
          }
          if (v169 < v148) {
            float v148 = v169;
          }
          unsigned int v170 = *(_DWORD *)(a1 + 64);
          if (v169 > (float)(v163 * (float)((float)((float)(v161 + v170) * 0.045) + 1.0)))
          {
            float v147 = v163;
            uint64_t v11 = (uint64_t)v223;
LABEL_114:
            unsigned int v145 = v207;
            goto LABEL_116;
          }
          float v147 = v163;
          if (v169 < v163)
          {
            *(float *)&long long v254 = v169;
            long long v249 = v257;
            long long v250 = v258;
            long long v251 = v259;
            v247[1] = v255;
            long long v248 = v256;
            *(_OWORD *)v246 = v253;
            v247[0] = v254;
            float v147 = v169;
            int v252 = v260;
            if (v169 < v146) {
              break;
            }
          }
          if (v160 < v170) {
            char v171 = v168;
          }
          else {
            char v171 = 0;
          }
          ++v160;
          --v161;
          uint64_t v11 = (uint64_t)v223;
          if ((v171 & 1) == 0) {
            goto LABEL_114;
          }
        }
        float v147 = v169;
        unsigned int v145 = v212;
        uint64_t v11 = (uint64_t)v223;
      }
LABEL_116:
      ++v145;
    }
    while (v145 < v212);
  }
  else
  {
    float v148 = 1.0e30;
  }
  float32x4_t v28 = v201;
  float32x4_t v94 = (int32x4_t *)&dword_18898C000;
  v96.i64[0] = 0x100000001;
  v96.i64[1] = 0x100000001;
  if (v148 <= (float)(*(float *)&v241 * 1.85))
  {
    unsigned int v97 = v216;
    if (v148 < v37) {
      goto LABEL_146;
    }
    goto LABEL_121;
  }
LABEL_125:
  if ((int)v197 >= 2)
  {
    uint64_t v173 = 2;
    int8x16_t v174 = 0uLL;
    while (1)
    {
      int8x16_t v265 = v174;
      int8x16_t v266 = v174;
      uint64_t v175 = (unsigned __int8 *)v11;
      uint64_t v176 = 4 * v173 - 8;
      unsigned int v177 = *(_DWORD *)((char *)&v244 + v176);
      unsigned int v178 = *(_DWORD *)((char *)&v242 + v176) >= v177
           ? *(_DWORD *)((char *)&v244 + v176)
           : *(_DWORD *)((char *)&v242 + v176);
      unsigned int best_partition_candidates = find_best_partition_candidates(v175, a2, v173, v177, (uint64_t)&v265, v178);
      float v180 = *(float *)((char *)&v241 + v176);
      uint64_t v181 = v173 - 1;
      if (best_partition_candidates) {
        break;
      }
      float v186 = *((float *)&v238 + v181);
      float v185 = *((float *)&v241 + v181);
LABEL_139:
      _ZF = v185 > (float)(v180 * v186) || ++v173 == v197 + 1;
      uint64_t v11 = (uint64_t)v223;
      int8x16_t v174 = 0uLL;
      if (_ZF) {
        goto LABEL_146;
      }
    }
    unint64_t v182 = 0;
    uint64_t v183 = 4 * best_partition_candidates;
    while (1)
    {
      float v184 = compress_symbolic_block_for_partition_1plane((unsigned int *)a1, (block_size_descriptor *)v223, a2, 0, v173, v265.i32[v182 / 4], (uint64_t)v246, (float32x4_t *)a4, v37* *(float *)&compress_block(astcenc_contexti const&,image_block const&,unsigned char *,compression_working_buffers &)::errorval_overshoot, v202);
      float v185 = *((float *)&v241 + v181);
      if (v185 >= v184) {
        float v185 = v184;
      }
      *((float *)&v241 + v181) = v185;
      float v186 = *((float *)&v238 + v181);
      if (v185 > (float)(v180 * (float)(v186 * 1.85)) || v184 < v37) {
        break;
      }
      v182 += 4;
      if (v183 == v182) {
        goto LABEL_139;
      }
    }
    uint64_t v11 = (uint64_t)v223;
  }
LABEL_146:
  if (!LOBYTE(v246[0]))
  {
    LOBYTE(v246[0]) = 2;
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v189 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)(a2 + 3472), (float32x4_t)0), _Q1), (float32x4_t)vdupq_n_s32(0x477FFF00u));
    _Q1.i64[0] = 0x3F0000003F000000;
    _Q1.i64[1] = 0x3F0000003F000000;
    *(int32x4_t *)((char *)v247 + 4) = vcvtq_s32_f32(vaddq_f32(v189, _Q1));
  }
  float32x4_t v35 = (block_size_descriptor *)v11;
  uint64_t v36 = v199;
  return symbolic_to_physical(v35, (unsigned __int8 *)v246, v36);
}

float compress_symbolic_block_for_partition_1plane(unsigned int *a1, block_size_descriptor *a2, uint64_t a3, int a4, unsigned int a5, __int16 a6, uint64_t a7, float32x4_t *a8, float a9, int a10)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  if (!a5) {
    compress_symbolic_block_for_partition_1plane();
  }
  if (!a1[17]) {
    compress_symbolic_block_for_partition_1plane();
  }
  if (!a1[16]) {
    compress_symbolic_block_for_partition_1plane();
  }
  if (a10 >= 11) {
    int v15 = 11;
  }
  else {
    int v15 = a10;
  }
  _ZF = (a1[1] & 0x40) == 0 && a5 == 1;
  int8x16_t v17 = (float (*)(unsigned int *, block_size_descriptor *, long long *, float32x4_t *))compute_symbolic_block_difference_1plane;
  if (_ZF) {
    int8x16_t v17 = (float (*)(unsigned int *, block_size_descriptor *, long long *, float32x4_t *))compute_symbolic_block_difference_1plane_1partition;
  }
  int8x16_t v118 = v17;
  partition_info = (unsigned __int16 *)block_size_descriptor::get_partition_info(a2, a5, a6);
  compute_ideal_colors_and_weights_1plane(a3, partition_info, a8, v18, v19, v20, v21, v22);
  uint64_t v23 = 8;
  if (a4) {
    uint64_t v23 = 4;
  }
  unsigned int v24 = *(_DWORD *)((char *)a2 + v23);
  if (!v24) {
    compress_symbolic_block_for_partition_1plane();
  }
  uint64_t v111 = a3;
  unsigned int v119 = a5;
  uint64_t v25 = 0;
  float v26 = a8 + 236;
  uint64_t v109 = a8 + 1628;
  unsigned int v124 = v15;
  int v27 = ~(-1 << (v15 + 1));
  float32x4_t v28 = (float32x4_t *)((char *)a2 + 592);
  unint64_t v29 = (unint64_t)v24 << 6;
  uint64_t v30 = 66;
  do
  {
    if ((*(_WORD *)((unsigned char *)a2 + v30) & (unsigned __int16)v27) != 0) {
      compute_ideal_weights_for_decimation((__int32 *)a8, v28, &v26->f32[v25 & 0xFFFFFFC0]);
    }
    v25 += 64;
    v28 += 8118;
    v30 += 6;
  }
  while (v29 != v25);
  uint64_t v31 = 0;
  __asm
  {
    FMOV            V5.4S, #10.0
    FMOV            V0.4S, #1.0
  }
  v37.i64[0] = 0x3F0000003F000000;
  v37.i64[1] = 0x3F0000003F000000;
  do
  {
    float32x4_t v38 = vdivq_f32(vsubq_f32(_Q0, a8[v31 + 2]), vsubq_f32(a8[v31 + 6], a8[v31 + 2]));
    _Q5 = (float32x4_t)vbslq_s8(vandq_s8((int8x16_t)vcgtq_f32(v38, v37), (int8x16_t)vcgtq_f32(_Q5, v38)), (int8x16_t)v38, (int8x16_t)_Q5);
    ++v31;
  }
  while (v119 != v31);
  float32x4_t v121 = _Q5;
  compute_angular_endpoints_1plane(a4, (uint64_t)a2, (uint64_t)&a8[236], v124, (uint64_t)a8);
  float v44 = (_DWORD *)((char *)a2 + 16);
  if (!a4) {
    float v44 = (_DWORD *)((char *)a2 + 20);
  }
  if (!*v44) {
    compress_symbolic_block_for_partition_1plane();
  }
  uint64_t v45 = 0;
  float v46 = a8 + 11228;
  float v47 = vminvq_f32(v121) * 1.02;
  uint64_t v122 = *v44;
  uint64_t v48 = 177600;
  uint64_t v49 = 11304946;
  int v50 = v124;
  do
  {
    float v51 = (char *)a2 + v49;
    if (v50 < *((unsigned __int8 *)a2 + v49 + 1)) {
      goto LABEL_31;
    }
    if (v51[3]) {
      compress_symbolic_block_for_partition_1plane();
    }
    int v52 = compress_symbolic_block_for_partition_1plane(astcenc_config const&,block_size_descriptor const&,image_block const&,BOOL,float,unsigned int,unsigned int,symbolic_compressed_block &,compression_working_buffers &,int)::free_bits_for_partition_count[v119 - 1];
    int v53 = *((unsigned __int8 *)a2 + v49 + 2);
    _VF = __OFSUB__(v52, v53);
    int v54 = v52 - v53;
    if ((v54 < 0) ^ _VF | (v54 == 0))
    {
LABEL_31:
      v46->i32[0] = 2123789977;
    }
    else
    {
      float v55 = v46 + 1024;
      if (v46[1024].f32[0] > v47) {
        v55->i32[0] = 1065353216;
      }
      uint64_t v56 = *((unsigned __int8 *)a2 + v49);
      a8->i8[v48] = v54;
      float v57 = (unsigned __int8 *)a2 + 129888 * v56 + 592;
      long long v156 = 0u;
      long long v157 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      float32x4_t v150 = 0u;
      long long v151 = 0u;
      float32x4_t v148 = 0u;
      float32x4_t v149 = 0u;
      float32x4_t v146 = 0u;
      float32x4_t v147 = 0u;
      float32x4_t v144 = 0u;
      float32x4_t v145 = 0u;
      float32x4_t v142 = 0u;
      float32x4_t v143 = 0u;
      LODWORD(v39) = v55->i32[0];
      compute_quantized_weights_for_decimation((uint64_t)v57, &v26[16 * v56], &v142, (uint64_t)v109 + (v45 & 0xFFFFFFC0), v51[1], v46[512].f32[0], v39, v40, v41, v42, v43);
      v46->i32[0] = compute_error_of_weight_set_1plane(a8, v57, &v142, v58, v59, v60, v61).u32[0];
      int v50 = v124;
    }
    v45 += 64;
    float v46 = (float32x4_t *)((char *)v46 + 4);
    ++v48;
    v49 += 6;
  }
  while (v122 << 6 != v45);
  memset(v141, 0, sizeof(v141));
  memset(v140, 0, sizeof(v140));
  memset(v139, 0, sizeof(v139));
  memset(v138, 0, sizeof(v138));
  float v62 = (float32x4_t *)v111;
  int16x4_t v106 = a8 + 1;
  unsigned int v108 = compute_ideal_endpoint_formats((uint64_t)partition_info, v111, (uint64_t)&a8[1], (uint64_t)&a8[11100], (uint64_t)&a8[11228], a1[17], 0, v122, v141, (uint64_t)v140, (uint64_t)v139, (uint64_t)v138, (uint64_t)a8);
  if (!v108) {
    return 1.0e30;
  }
  unsigned int v63 = 0;
  float v64 = *(float *)(a7 + 16);
  float v65 = 1.0e30;
  float v66 = a2;
  do
  {
    unsigned int v67 = v140[v63];
    if ((v67 & 0x80000000) != 0 || (signed int)v67 >= *((_DWORD *)v66 + 5)) {
      compress_symbolic_block_for_partition_1plane();
    }
    float32x4_t v116 = (_WORD *)((char *)v66 + 6 * v67 + 11304944);
    float v68 = (char *)v66 + 129888 * *((unsigned __int8 *)v66 + 6 * v67 + 11304946);
    size_t v69 = v68[594];
    if (!v68[594]) {
      compress_symbolic_block_for_partition_1plane();
    }
    memset(v137, 0, sizeof(v137));
    memset(v136, 0, sizeof(v136));
    int v135 = 0;
    long long v134 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    float32x4_t v70 = v106[7];
    float32x4_t v148 = v106[6];
    float32x4_t v149 = v70;
    float32x4_t v150 = v106[8];
    float32x4_t v71 = v106[3];
    float32x4_t v144 = v106[2];
    float32x4_t v145 = v71;
    float32x4_t v72 = v106[5];
    float32x4_t v146 = v106[4];
    float32x4_t v147 = v72;
    float32x4_t v73 = v106[1];
    float32x4_t v142 = *v106;
    float32x4_t v143 = v73;
    memcpy((char *)&v131 + 4, &v109[4 * v67], v69);
    if (!a1[16]) {
      goto LABEL_86;
    }
    int v123 = 0;
    unsigned int v107 = v63;
    float32x4_t v114 = (unsigned __int8 *)(v68 + 594);
    uint64_t v115 = (uint64_t)(v68 + 592);
    float v74 = &v139[v63];
    uint64_t v125 = &v138[v63];
    float v75 = &v141[4 * v63];
    while (1)
    {
      recompute_ideal_colors_1plane(v62, partition_info, v115, (uint64_t)&v131 + 4, (uint64_t)&v142, (uint64_t)v137, (uint64_t)v136);
      uint64_t v76 = 0;
      char v77 = *v74 != *v125;
      float v78 = &v147;
      float v79 = (unsigned __int8 *)&v129 + 4;
      do
      {
        float32x4_t v80 = v78[-4];
        float32x4_t v81 = *v78++;
        int v82 = pack_color_endpoints(*((unsigned __int8 *)v75 + v76), v79, *v74, v80, v81, v137[v76], v136[v76]);
        *((unsigned char *)&v128 + v76 + 8) = v82;
        v77 &= v82 == BYTE8(v128);
        ++v76;
        v79 += 8;
      }
      while (v119 != v76);
      BYTE2(v128) = 0;
      char v83 = v119 > 1 ? v77 : 0;
      if (v83)
      {
        uint64_t v84 = 0;
        memset(v127, 0, sizeof(v127));
        float v85 = (unsigned __int8 *)v127;
        float v86 = &v147;
        int v126 = 0;
        float v66 = a2;
        while (1)
        {
          int v87 = pack_color_endpoints(*((unsigned __int8 *)v75 + v84), v85, *v125, v86[-4], *v86, v137[v84], v136[v84]);
          *((unsigned char *)&v126 + v84) = v87;
          if (v87 != v126) {
            break;
          }
          ++v84;
          v85 += 8;
          ++v86;
          if (v119 == v84)
          {
            uint64_t v88 = 0;
            BYTE2(v128) = 1;
            float v62 = (float32x4_t *)v111;
            float v89 = a1;
            do
            {
              *(void *)((char *)&v129 + 8 * v88 + 4) = *((void *)v127 + v88);
              *((unsigned char *)&v128 + v88 + 8) = *((unsigned char *)&v126 + v88);
              ++v88;
            }
            while (v88 != 4);
            BYTE1(v128) = v119;
            WORD3(v128) = a6;
            float v90 = v125;
            BYTE3(v128) = -1;
            goto LABEL_55;
          }
        }
        BYTE1(v128) = v119;
        WORD3(v128) = a6;
        float v90 = v125;
        BYTE3(v128) = -1;
        float v62 = (float32x4_t *)v111;
        float v89 = a1;
        if (!BYTE2(v128)) {
          goto LABEL_53;
        }
      }
      else
      {
        BYTE1(v128) = v119;
        WORD3(v128) = a6;
        BYTE3(v128) = -1;
        float v62 = (float32x4_t *)v111;
        float v66 = a2;
        float v89 = a1;
LABEL_53:
        float v90 = v74;
      }
LABEL_55:
      HIDWORD(v128) = *v90;
      WORD2(v128) = *v116;
      LOBYTE(v128) = 3;
      if (v123) {
        goto LABEL_65;
      }
      float v91 = v118(v89, v66, &v128, v62);
      if (v91 == -1.0e30)
      {
        LOBYTE(v128) = 0;
        float v92 = 1.0e30;
      }
      else
      {
        float v92 = v91;
      }
      if (v92 < v65) {
        float v65 = v92;
      }
      if (v92 > (float)(v64 * (float)((float)((float)v89[16] * 0.045) + 1.08))) {
        goto LABEL_83;
      }
      if (v92 >= v64)
      {
LABEL_65:
        float v92 = v64;
      }
      else
      {
        *(float *)&long long v129 = v92;
        long long v93 = v133;
        *(_OWORD *)(a7 + 64) = v132;
        *(_OWORD *)(a7 + 80) = v93;
        *(_OWORD *)(a7 + 96) = v134;
        *(_DWORD *)(a7 + 112) = v135;
        long long v94 = v131;
        *(_OWORD *)(a7 + 32) = v130;
        *(_OWORD *)(a7 + 48) = v94;
        long long v95 = v129;
        *(_OWORD *)a7 = v128;
        *(_OWORD *)(a7 + 16) = v95;
        if (v92 < a9)
        {
          float v64 = v92;
          goto LABEL_85;
        }
      }
      unsigned int v96 = *v89;
      if (*v114 == *((unsigned __int8 *)v66 + 3)) {
        char v97 = realign_weights_undecimated(v96, v66, v62, (uint64_t)&v128);
      }
      else {
        char v97 = realign_weights_decimated(v96, v66, v62, (uint64_t)&v128);
      }
      char v98 = v97;
      float v99 = v118(v89, v66, &v128, v62);
      if (v99 == -1.0e30)
      {
        LOBYTE(v128) = 0;
        float v99 = 1.0e30;
      }
      if (v99 < v65) {
        float v65 = v99;
      }
      unsigned int v100 = v89[16];
      if (v99 > (float)(v92 * (float)((float)((float)(v100 + ~v123) * 0.045) + 1.0)))
      {
        float v64 = v92;
LABEL_83:
        unsigned int v63 = v107;
        goto LABEL_86;
      }
      float v64 = v92;
      if (v99 < v92) {
        break;
      }
LABEL_77:
      if (++v123 < v100) {
        char v104 = v98;
      }
      else {
        char v104 = 0;
      }
      if ((v104 & 1) == 0) {
        goto LABEL_83;
      }
    }
    *(float *)&long long v129 = v99;
    long long v101 = v133;
    *(_OWORD *)(a7 + 64) = v132;
    *(_OWORD *)(a7 + 80) = v101;
    *(_OWORD *)(a7 + 96) = v134;
    *(_DWORD *)(a7 + 112) = v135;
    long long v102 = v131;
    *(_OWORD *)(a7 + 32) = v130;
    *(_OWORD *)(a7 + 48) = v102;
    long long v103 = v129;
    *(_OWORD *)a7 = v128;
    *(_OWORD *)(a7 + 16) = v103;
    if (v99 >= a9)
    {
      unsigned int v100 = v89[16];
      float v64 = v99;
      goto LABEL_77;
    }
    float v64 = v99;
LABEL_85:
    unsigned int v63 = v108;
LABEL_86:
    ++v63;
  }
  while (v63 < v108);
  return v65;
}

uint64_t realign_weights_decimated(unsigned int a1, block_size_descriptor *this, float32x4_t *a3, uint64_t a4)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned __int8 *)(a4 + 1);
  partition_info = block_size_descriptor::get_partition_info(this, *(unsigned __int8 *)(a4 + 1), *(unsigned __int16 *)(a4 + 6));
  uint64_t block_mode = (unsigned __int8 *)block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a4 + 4));
  unsigned int v13 = block_mode[2];
  unint64_t v14 = *((unsigned __int8 *)this + 129888 * block_mode[2] + 594);
  if (v14 == *((unsigned __int8 *)this + 3)) {
    realign_weights_decimated();
  }
  int v15 = block_mode[3];
  unsigned __int8 v16 = block_mode[5];
  unsigned int v17 = *(char *)(a4 + 3);
  __int16 v87 = 0;
  memset(v92, 0, 64);
  memset(v91, 0, sizeof(v91));
  memset(v90, 0, sizeof(v90));
  memset(v89, 0, sizeof(v89));
  if (!v8) {
    realign_weights_decimated();
  }
  if (!v14) {
    realign_weights_decimated();
  }
  int v79 = v15;
  uint64_t v18 = 0;
  int v81 = v16 & 1;
  uint64_t v19 = 0x100000000;
  double v20 = (unsigned __int8 *)(a4 + 20);
  __n128 v21 = (__n128)vceqq_s32(vdupq_n_s32(v17), (int32x4_t)xmmword_18898C3A0);
  __n128 v85 = v21;
  uint64_t v83 = a4;
  float32x4_t v22 = (unsigned __int8 *)(a4 + 8);
  uint64_t v23 = 16 * v8;
  do
  {
    int v24 = *v22++;
    __n128 v21 = unpack_color_endpoints(a1, v24, v20, (unsigned __int8 *)&v87 + 1, &v87, (uint64_t)&v92[v18], (__n128 *)&v91[v18], v21, *(double *)&v19, v11, v12);
    v20 += 8;
    v18 += 16;
  }
  while (v23 != v18);
  char v25 = 0;
  int v26 = 0;
  uint64_t v27 = v83 + 52;
  float32x4_t v28 = (char *)this + 129888 * v13;
  unint64_t v29 = v28 + 814;
  uint64_t v30 = v28 + 2544;
  int v80 = v81 + 1;
  int v82 = v28 + 75184;
  uint64_t v84 = v28 + 6064;
  float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  float32x4_t v32 = &quant_and_xfer_tables[226 * v79];
  int8x16_t v33 = (int8x16_t)v85;
  do
  {
    unint64_t v34 = 0;
    int8x16_t v33 = vmvnq_s8(v33);
    do
    {
      int32x4_t v35 = *(int32x4_t *)&v92[v34];
      int32x4_t v36 = (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)&v91[v34], v35), v33);
      v90[v34 / 0x10] = vcvtq_f32_s32(v35);
      v89[v34 / 0x10] = vmulq_f32(vcvtq_f32_s32(v36), v31);
      v34 += 16;
    }
    while (v23 != v34);
    int v86 = v26;
    unint64_t v37 = 0;
    float32x4_t v38 = (float32x4_t *)v88;
    memset(v88, 0, sizeof(v88));
    do
    {
      double v39 = (const float *)(v27 + v37);
      uint8x8_t v40 = (uint8x8_t)vld1_dup_f32(v39);
      *v38++ = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v40)));
      v37 += 4;
    }
    while (v37 < v14);
    uint64_t v41 = 0;
    double v43 = (float *)v82;
    double v42 = v84;
    do
    {
      uint64_t v44 = *((unsigned __int8 *)this + 129888 * v13 + v41 + 6000);
      if (!*((unsigned char *)this + 129888 * v13 + v41 + 6000)) {
        realign_weights_decimated();
      }
      unsigned int v45 = *(unsigned __int16 *)&v32[2 * *(unsigned __int8 *)(v27 + v41) + 96];
      float v46 = *((float *)v88 + v41);
      float v47 = (float)*(_WORD *)&v32[2 * *(unsigned __int8 *)(v27 + v41) + 96];
      unsigned int v48 = v45 >> 8;
      float v49 = v47 - v46;
      float v50 = (float)(v45 >> 8) - v46;
      float32x4_t v51 = 0uLL;
      int v52 = v43;
      int v53 = v42;
      float32x4_t v54 = 0uLL;
      float32x4_t v55 = 0uLL;
      do
      {
        int v56 = *v53;
        v53 += 64;
        float v57 = (char *)this + 129888 * v13;
        float32x4_t v58 = (unsigned __int8 *)&v57[v56];
        float32x4_t v59 = (float *)&v57[4 * v56];
        float v60 = (float)((float)(*((float *)v88 + v58[1030]) * v59[852])
                    + (float)(*((float *)v88 + v29[v56]) * *(float *)&v30[4 * v56]))
            + (float)((float)(*((float *)v88 + v58[1462]) * v59[1284]) + (float)(*((float *)v88 + v58[1246]) * v59[1068]));
        uint64_t v61 = partition_info[v56 + 8];
        float32x4_t v62 = v89[v61];
        float32x4_t v63 = vaddq_f32(v90[v61], vmulq_n_f32(v62, v60));
        float v64 = &a3->i32[v56];
        float v65 = (float)(v60 + (float)(v49 * *v52)) - v60;
        v66.i32[0] = *v64;
        v66.i32[1] = v64[216];
        float v67 = (float)(v60 + (float)(v50 * *v52)) - v60;
        v66.i32[2] = v64[432];
        v66.i32[3] = v64[648];
        float32x4_t v68 = vsubq_f32(v63, v66);
        float32x4_t v69 = vaddq_f32(vmulq_n_f32(v62, v65), v68);
        float32x4_t v70 = vaddq_f32(vmulq_n_f32(v62, v67), v68);
        float32x4_t v51 = vaddq_f32(v51, vmulq_f32(v68, v68));
        float32x4_t v54 = vaddq_f32(v54, vmulq_f32(v69, v69));
        float32x4_t v55 = vaddq_f32(v55, vmulq_f32(v70, v70));
        v52 += 64;
        --v44;
      }
      while (v44);
      float32x4_t v71 = a3[221];
      int8x16_t v72 = (int8x16_t)vmulq_f32(v51, v71);
      *(float32x2_t *)v72.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), *(float32x2_t *)v72.i8);
      float32x2_t v73 = vpadd_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8);
      int8x16_t v74 = (int8x16_t)vmulq_f32(v54, v71);
      *(float32x2_t *)v74.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), *(float32x2_t *)v74.i8);
      float32x2_t v75 = vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8);
      int8x16_t v76 = (int8x16_t)vmulq_f32(v55, v71);
      *(float32x2_t *)v76.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL), *(float32x2_t *)v76.i8);
      float32x2_t v77 = vpadd_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8);
      if ((vcgt_f32(v73, v77).u8[0] & 1) != 0
        && *(unsigned __int8 *)(v27 + v41) <= 0x3Fu
        && (vcgt_f32(v75, v77).u8[0] & 1) != 0)
      {
        *((float *)v88 + v41) = (float)(v45 >> 8);
LABEL_22:
        *(unsigned char *)(v27 + v41) = v48;
        char v25 = 1;
        goto LABEL_23;
      }
      if (*(unsigned char *)(v27 + v41) && (vcgt_f32(v73, v75).u8[0] & 1) != 0)
      {
        *((float *)v88 + v41) = v47;
        LOBYTE(v48) = v45;
        goto LABEL_22;
      }
LABEL_23:
      ++v41;
      ++v42;
      ++v43;
    }
    while (v41 != v14);
    v27 += 32;
    int v26 = v86 + 1;
  }
  while (v86 + 1 != v80);
  return v25 & 1;
}

uint64_t realign_weights_undecimated(unsigned int a1, block_size_descriptor *this, float32x4_t *a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned __int8 *)(a4 + 1);
  partition_info = block_size_descriptor::get_partition_info(this, *(unsigned __int8 *)(a4 + 1), *(unsigned __int16 *)(a4 + 6));
  uint64_t block_mode = block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a4 + 4));
  int v12 = *(unsigned __int8 *)(block_mode + 3);
  char v13 = *(unsigned char *)(block_mode + 5);
  unsigned int v14 = *(char *)(a4 + 3);
  __n128 v15 = 0uLL;
  memset(v56, 0, sizeof(v56));
  memset(v55, 0, sizeof(v55));
  if (!v8) {
    realign_weights_undecimated();
  }
  float32x4_t v51 = partition_info;
  int v52 = v12;
  uint64_t v16 = 0;
  int32x4_t v17 = (int32x4_t)xmmword_18898C3A0;
  int v50 = v13 & 1;
  __int16 v54 = 0;
  int32x4_t v18 = vceqq_s32(vdupq_n_s32(v14), (int32x4_t)xmmword_18898C3A0);
  int32x4_t v53 = v18;
  memset(v58, 0, 64);
  memset(v57, 0, sizeof(v57));
  uint64_t v19 = (unsigned __int8 *)(a4 + 20);
  double v20 = (unsigned __int8 *)(a4 + 8);
  uint64_t v21 = 16 * v8;
  do
  {
    int v22 = *v20++;
    __n128 v15 = unpack_color_endpoints(a1, v22, v19, (unsigned __int8 *)&v54 + 1, &v54, (uint64_t)&v58[v16], (__n128 *)&v57[v16], v15, *(double *)v18.i64, v17, v11);
    v19 += 8;
    v16 += 16;
  }
  while (v21 != v16);
  char v23 = 0;
  int v24 = 0;
  uint64_t v25 = a4 + 52;
  float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  uint64_t v27 = &quant_and_xfer_tables[226 * v52];
  int8x16_t v28 = (int8x16_t)v53;
  do
  {
    unint64_t v29 = 0;
    int8x16_t v28 = vmvnq_s8(v28);
    do
    {
      int32x4_t v30 = *(int32x4_t *)&v58[v29];
      int32x4_t v31 = (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)&v57[v29], v30), v28);
      v56[v29 / 0x10] = vcvtq_f32_s32(v30);
      v55[v29 / 0x10] = vmulq_f32(vcvtq_f32_s32(v31), v26);
      v29 += 16;
    }
    while (v21 != v29);
    if (!*((unsigned char *)this + 3)) {
      realign_weights_undecimated();
    }
    unint64_t v32 = 0;
    int8x16_t v33 = (__int32 *)a3;
    do
    {
      uint64_t v34 = *(unsigned __int8 *)(v25 + v32);
      int v35 = HIBYTE(*(unsigned __int16 *)&v27[2 * v34 + 96]);
      uint64_t v36 = v51[v32 + 8];
      float32x4_t v37 = (float32x4_t)v55[v36];
      v38.i32[0] = *v33;
      v38.i32[1] = v33[216];
      v38.i32[2] = v33[432];
      v38.i32[3] = v33[648];
      float32x4_t v39 = a3[221];
      float32x4_t v40 = vsubq_f32(vaddq_f32((float32x4_t)v56[v36], vmulq_n_f32(v37, (float)v34)), v38);
      float32x4_t v41 = vaddq_f32(vmulq_n_f32(v37, (float)(*(_WORD *)&v27[2 * v34 + 96] - (int)v34)), v40);
      float32x4_t v42 = vaddq_f32(vmulq_n_f32(v37, (float)(v35 - v34)), v40);
      int8x16_t v43 = (int8x16_t)vmulq_f32(v39, vmulq_f32(v40, v40));
      *(float32x2_t *)v43.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), *(float32x2_t *)v43.i8);
      float32x2_t v44 = vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8);
      int8x16_t v45 = (int8x16_t)vmulq_f32(v39, vmulq_f32(v41, v41));
      *(float32x2_t *)v45.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), *(float32x2_t *)v45.i8);
      float32x2_t v46 = vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8);
      int8x16_t v47 = (int8x16_t)vmulq_f32(v39, vmulq_f32(v42, v42));
      *(float32x2_t *)v47.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), *(float32x2_t *)v47.i8);
      float32x2_t v48 = vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8);
      if (vcgt_f32(v44, v48).u8[0] & 1) != 0 && v34 <= 0x3F && (vcgt_f32(v46, v48).u8[0]) {
        goto LABEL_15;
      }
      if (*(unsigned char *)(v25 + v32) && (vcgt_f32(v44, v46).u8[0] & 1) != 0)
      {
        LOBYTE(v35) = *(_WORD *)&v27[2 * v34 + 96];
LABEL_15:
        *(unsigned char *)(v25 + v32) = v35;
        char v23 = 1;
      }
      ++v32;
      ++v33;
    }
    while (v32 < *((unsigned __int8 *)this + 3));
    v25 += 32;
    ++v24;
  }
  while (v24 != v50 + 1);
  return v23 & 1;
}

void compress_block()
{
}

{
  __assert_rtn("prepare_block_statistics", "astcenc_compress_symbolic.cpp", 1075, "weight >= 0.0f");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 726, "config.tune_candidate_limit > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 727, "config.tune_refinement_limit > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 728, "bsd.decimation_mode_count_selected > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 810, "bm.is_dual_plane");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 896, "di.weight_count > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 891, "bm_packed_index >= static_cast<int>(bsd.block_mode_count_1plane_selected) && bm_packed_index < static_cast<int>(bsd.block_mode_count_1plane_2plane_selected)");
}

{
  __assert_rtn("merge_endpoints", "astcenc_compress_symbolic.cpp", 44, "partition_count == 1");
}

void compress_symbolic_block_for_partition_1plane()
{
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 366, "config.tune_candidate_limit > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 367, "config.tune_refinement_limit > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 390, "max_decimation_modes > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 441, "max_block_modes > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 515, "di.weight_count > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 510, "bm_packed_index >= 0 && bm_packed_index < static_cast<int>(bsd.block_mode_count_1plane_selected)");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 452, "!bm.is_dual_plane");
}

void realign_weights_decimated()
{
  __assert_rtn("realign_weights_decimated", "astcenc_compress_symbolic.cpp", 206, "weight_count != bsd.texel_count");
}

{
  __assert_rtn("realign_weights_decimated", "astcenc_compress_symbolic.cpp", 220, "partition_count > 0");
}

{
  __assert_rtn("realign_weights_decimated", "astcenc_compress_symbolic.cpp", 221, "weight_count > 0");
}

{
  __assert_rtn("realign_weights_decimated", "astcenc_compress_symbolic.cpp", 277, "texels_to_evaluate > 0");
}

void realign_weights_undecimated()
{
}

{
  __assert_rtn("realign_weights_undecimated", "astcenc_compress_symbolic.cpp", 125, "bsd.texel_count > 0");
}

uint64_t find_best_partition_candidates(unsigned __int8 *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v313 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = a1[3];
  if (v7 >= 0x15)
  {
    if (v7 >= 0x20) {
      float v8 = flt_1889B5470[v7 < 0x2A];
    }
    else {
      float v8 = 0.04;
    }
  }
  else
  {
    float v8 = 0.03;
  }
  if (!a3) {
    find_best_partition_candidates();
  }
  if (!a4) {
    find_best_partition_candidates();
  }
  int v243 = a1 + 14707848;
  long long v241 = a1 + 14666872;
  uint64_t v242 = a1 + 14683264;
  float v9 = v8 * v8;
  bzero(v281, 0x800uLL);
  int v11 = 0;
  long long v271 = 0u;
  long long v272 = 0u;
  v269[0] = 0u;
  long long v270 = 0u;
  uint64_t v304 = 0;
  long long v303 = 0u;
  long long v302 = 0u;
  long long v301 = 0u;
  long long v300 = 0u;
  long long v299 = 0u;
  long long v298 = 0u;
  long long v297 = 0u;
  long long v296 = 0u;
  long long v295 = 0u;
  long long v294 = 0u;
  long long v293 = 0u;
  long long v292 = 0u;
  long long v291 = 0u;
  float32x4_t v12 = *(float32x4_t *)(a2 + 3536);
  if (a3 <= 2) {
    int v13 = 2;
  }
  else {
    int v13 = a3;
  }
  uint64_t v14 = (v13 - 1);
  v247 = (__int32 *)(a2 + 4 * (0x239E9 % v7));
  float32x4_t v251 = *(float32x4_t *)(a2 + 3536);
  do
  {
    if (v11)
    {
      if (!v7) {
        find_best_partition_candidates();
      }
      long long v285 = 0u;
      long long v284 = 0u;
      long long v283 = 0u;
      long long v282 = 0u;
      __n128 v15 = (unsigned __int8 *)&v291;
      uint64_t v16 = (__int32 *)a2;
      unint64_t v17 = v7;
      LODWORD(v305) = 0;
      do
      {
        unsigned int v18 = *v15++;
        v19.i32[0] = *v16;
        v19.i32[1] = v16[216];
        v19.i32[2] = v16[432];
        v19.i32[3] = v16[648];
        float32x4_t v20 = vaddq_f32(*((float32x4_t *)&v282 + v18), v19);
        *(&v282 + v18) = (__int128)v20;
        ++*((unsigned char *)&v305 + v18);
        ++v16;
        --v17;
      }
      while (v17);
      uint64_t v21 = 0;
      do
      {
        v20.i8[0] = *((unsigned char *)&v305 + v21);
        float32x4_t v20 = vmulq_n_f32(*((float32x4_t *)&v282 + v21), 1.0 / (float)v20.u32[0]);
        v269[v21++] = v20;
      }
      while (a3 != v21);
    }
    else
    {
      if (!v7) {
        find_best_partition_candidates();
      }
      bzero(&v282, 0x360uLL);
      float32x4_t v12 = v251;
      uint64_t v36 = 0;
      v37.i32[0] = *v247;
      v37.i32[1] = v247[216];
      v37.i32[2] = v247[432];
      v37.i32[3] = v247[648];
      v269[0] = v37;
      float v38 = 0.0;
      do
      {
        v39.i32[0] = *(_DWORD *)(a2 + v36);
        v39.i32[1] = *(_DWORD *)(a2 + v36 + 864);
        v39.i32[2] = *(_DWORD *)(a2 + v36 + 1728);
        v39.i32[3] = *(_DWORD *)(a2 + v36 + 2592);
        float32x4_t v40 = vsubq_f32(v39, v37);
        int8x16_t v41 = (int8x16_t)vmulq_f32(v251, vmulq_f32(v40, v40));
        *(float32x2_t *)v41.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), *(float32x2_t *)v41.i8);
        *(float *)v41.i32 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8).f32[0];
        float v38 = v38 + *(float *)v41.i32;
        *(_DWORD *)((char *)&v282 + v36) = v41.i32[0];
        v36 += 4;
      }
      while (4 * v7 != v36);
      uint64_t v42 = 1;
      unsigned int v43 = 3 * a3 - 6;
      int v11 = 0;
      while (1)
      {
        uint64_t v44 = 0;
        float v45 = flt_1889B5478[v43++];
        float v46 = v38 * v45;
        float v47 = 0.0;
        while (1)
        {
          float v47 = v47 + *((float *)&v282 + v44);
          if (v47 >= v46) {
            break;
          }
          if (v7 == ++v44)
          {
            LODWORD(v44) = v7;
            break;
          }
        }
        if (v44 >= (int)v7 - 1) {
          LODWORD(v44) = v7 - 1;
        }
        float32x2_t v48 = (__int32 *)(a2 + 4 * v44);
        v49.i32[0] = *v48;
        v49.i32[1] = v48[216];
        v49.i32[2] = v48[432];
        v49.i32[3] = v48[648];
        v269[v42] = v49;
        if (v42 == v14) {
          break;
        }
        ++v42;
        float v38 = 0.0;
        int v50 = (float *)&v282;
        float32x4_t v51 = (__int32 *)a2;
        unint64_t v52 = v7;
        do
        {
          v53.i32[0] = *v51;
          v53.i32[1] = v51[216];
          v53.i32[2] = v51[432];
          v53.i32[3] = v51[648];
          float32x4_t v54 = vsubq_f32(v53, v49);
          int8x16_t v55 = (int8x16_t)vmulq_f32(v251, vmulq_f32(v54, v54));
          *(float32x2_t *)v55.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), *(float32x2_t *)v55.i8);
          float v56 = vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8).f32[0];
          if (v56 >= *v50) {
            float v56 = *v50;
          }
          float v38 = v38 + v56;
          *v50++ = v56;
          ++v51;
          --v52;
        }
        while (v52);
      }
    }
    uint64_t v22 = 0;
    LODWORD(v282) = 0;
    do
    {
      uint64_t v23 = 0;
      unsigned int v24 = 0;
      uint64_t v25 = (__int32 *)(a2 + 4 * v22);
      float v27 = 3.4028e38;
      do
      {
        v26.i32[3] = v25[648];
        v26.i32[2] = v25[432];
        v26.i32[1] = v25[216];
        v26.i32[0] = *v25;
        float32x4_t v28 = vsubq_f32(v26, v269[v23]);
        int8x16_t v29 = (int8x16_t)vmulq_f32(v12, vmulq_f32(v28, v28));
        *(float32x2_t *)v29.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)v29.i8);
        float v30 = vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8).f32[0];
        if (v30 < v27)
        {
          unsigned int v24 = v23;
          float v27 = v30;
        }
        ++v23;
      }
      while (a3 != v23);
      *((unsigned char *)&v291 + v22) = v24;
      ++*((unsigned char *)&v282 + v24);
      ++v22;
    }
    while (v22 != v7);
    uint64_t v31 = 0;
    int v32 = 0;
    do
    {
      int v33 = v32;
      if (!*((unsigned char *)&v282 + v31))
      {
        --*((unsigned char *)&v282 + *((unsigned __int8 *)&v291 + v31));
        ++*((unsigned char *)&v282 + v31);
        *((unsigned char *)&v291 + v31) = v31;
        int v33 = 1;
      }
      BOOL v34 = v31 + 1 == a3;
      BOOL v35 = v31 + 1 != a3;
      if (v31 + 1 == a3) {
        uint64_t v31 = 0;
      }
      else {
        ++v31;
      }
      int v32 = v35 & v33;
    }
    while (!v34 || (v33 & 1) != 0);
    ++v11;
  }
  while (v11 != 3);
  uint64_t v57 = 0;
  if (v7 >= 0x40) {
    uint64_t v58 = 64;
  }
  else {
    uint64_t v58 = v7;
  }
  long long v261 = 0uLL;
  long long v262 = 0uLL;
  do
  {
    uint64_t v59 = *((unsigned __int8 *)&v291 + a1[v57 + 14666800]);
    *((void *)&v261 + v59) |= 1 << v57++;
  }
  while (v58 != v57);
  uint64_t v254 = v58;
  bzero(&v282, 0x400uLL);
  float v60 = &a1[4 * a3 - 4];
  uint64_t v61 = *((unsigned int *)v60 + 8);
  if (!v61) {
    find_best_partition_candidates();
  }
  uint64_t v252 = *((unsigned int *)v60 + 8);
  if (a3 == 2)
  {
    int v86 = &v282;
    long long v87 = v261;
    uint64_t v88 = v241;
    do
    {
      uint64_t v89 = *((void *)v88 - 1);
      unsigned int v90 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v88 ^ *((void *)&v87 + 1))))
          + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v89 ^ v87)));
      int v91 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v89 ^ *((void *)&v87 + 1))))
          + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v88 ^ v87)));
      if ((int)v90 >= v91) {
        unsigned int v90 = v91;
      }
      *(unsigned char *)int v86 = v90 >> 1;
      if ((v90 >> 1) >= 0x40u) {
        find_best_partition_candidates();
      }
      if (v7 <= (v90 >> 1)) {
        find_best_partition_candidates();
      }
      v88 += 16;
      int v86 = (long long *)((char *)v86 + 1);
      --v61;
    }
    while (v61);
  }
  else if (a3 == 3)
  {
    long long v62 = v261;
    float32x4_t v63 = &v282;
    uint64_t v64 = v262;
    float v65 = v242;
    do
    {
      uint64_t v66 = *((void *)v65 - 2);
      uint64_t v67 = *((void *)v65 - 1);
      unsigned __int16 v68 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v66 ^ v62)));
      unsigned __int16 v69 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v67 ^ v62)));
      unsigned __int16 v70 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v65 ^ v62)));
      unsigned __int16 v71 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v66 ^ *((void *)&v62 + 1))));
      unsigned __int16 v72 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v67 ^ *((void *)&v62 + 1))));
      unsigned __int16 v73 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v65 ^ *((void *)&v62 + 1))));
      int v74 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v66 ^ v64)));
      int v75 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v67 ^ v64)));
      int v76 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v65 ^ v64)));
      int v77 = v76 + v72;
      if (v77 >= v75 + v73) {
        int v77 = v75 + v73;
      }
      int v78 = v77 + v68;
      int v79 = v76 + v71;
      int v80 = v74 + v73;
      if (v79 >= v80) {
        int v79 = v80;
      }
      int v81 = v79 + v69;
      int v82 = v75 + v71;
      int v83 = v74 + v72;
      if (v82 < v83) {
        int v83 = v82;
      }
      int v84 = v83 + v70;
      if (v78 >= v81) {
        unsigned int v85 = v81;
      }
      else {
        unsigned int v85 = v78;
      }
      if ((int)v85 >= v84) {
        unsigned int v85 = v84;
      }
      *(unsigned char *)float32x4_t v63 = v85 >> 1;
      if ((v85 >> 1) >= 0x40u) {
        find_best_partition_candidates();
      }
      if (v7 <= (v85 >> 1)) {
        find_best_partition_candidates();
      }
      v65 += 24;
      float32x4_t v63 = (long long *)((char *)v63 + 1);
      --v61;
    }
    while (v61);
  }
  else
  {
    long long v92 = v261;
    uint64_t v93 = &v282;
    long long v94 = v262;
    long long v95 = v243;
    do
    {
      uint64_t v96 = *((void *)v95 - 3);
      uint64_t v97 = *((void *)v95 - 2);
      unsigned __int16 v98 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v96 ^ v92)));
      unsigned __int16 v99 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v97 ^ v92)));
      uint64_t v100 = *((void *)v95 - 1);
      uint64_t v101 = *(void *)v95;
      unsigned __int16 v102 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v100 ^ v92)));
      long long v103 = v95;
      unsigned __int16 v104 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(void *)v95 ^ v92)));
      unsigned __int16 v105 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v96 ^ *((void *)&v92 + 1))));
      unsigned __int16 v106 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v97 ^ *((void *)&v92 + 1))));
      unsigned __int16 v107 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v100 ^ *((void *)&v92 + 1))));
      unsigned __int16 v108 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v101 ^ *((void *)&v92 + 1))));
      unsigned __int16 v109 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v96 ^ v94)));
      unsigned __int16 v110 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v97 ^ v94)));
      unsigned __int16 v111 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v100 ^ v94)));
      unsigned __int16 v112 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v101 ^ v94)));
      int v113 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v96 ^ *((void *)&v94 + 1))));
      int v114 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v97 ^ *((void *)&v94 + 1))));
      int v115 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v100 ^ *((void *)&v94 + 1))));
      int v116 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v101 ^ *((void *)&v94 + 1))));
      int v117 = v116 + v111;
      if (v117 >= v115 + v112) {
        int v117 = v115 + v112;
      }
      int v118 = v116 + v110;
      if (v118 >= v114 + v112) {
        int v118 = v114 + v112;
      }
      int v119 = v114 + v111;
      if (v115 + v110 < v119) {
        int v119 = v115 + v110;
      }
      int v120 = v116 + v109;
      int v121 = v113 + v112;
      if (v120 >= v121) {
        int v120 = v121;
      }
      int v122 = v115 + v109;
      int v123 = v113 + v111;
      if (v122 >= v123) {
        int v122 = v123;
      }
      int v124 = v113 + v110;
      int v125 = v114 + v109;
      if (v124 >= v125) {
        int v124 = v125;
      }
      int v126 = v117 + v106;
      if (v126 >= v118 + v107) {
        int v126 = v118 + v107;
      }
      if (v126 >= v119 + v108) {
        int v126 = v119 + v108;
      }
      int v127 = v126 + v98;
      int v128 = v117 + v105;
      if (v128 >= v120 + v107) {
        int v128 = v120 + v107;
      }
      if (v128 >= v122 + v108) {
        int v128 = v122 + v108;
      }
      int v129 = v128 + v99;
      int v130 = v120 + v106;
      int v131 = v124 + v108;
      if (v130 >= v118 + v105) {
        int v130 = v118 + v105;
      }
      if (v130 < v131) {
        int v131 = v130;
      }
      int v132 = v131 + v102;
      int v133 = v122 + v106;
      int v134 = v124 + v107;
      int v135 = v119 + v105;
      if (v133 >= v134) {
        int v133 = v134;
      }
      if (v133 < v135) {
        int v135 = v133;
      }
      int v136 = v135 + v104;
      if (v127 < v129) {
        int v129 = v127;
      }
      if (v132 < v136) {
        int v136 = v132;
      }
      if (v129 >= v136) {
        unsigned int v137 = v136;
      }
      else {
        unsigned int v137 = v129;
      }
      *(unsigned char *)uint64_t v93 = v137 >> 1;
      if ((v137 >> 1) >= 0x40u) {
        find_best_partition_candidates();
      }
      if (v7 <= (v137 >> 1)) {
        find_best_partition_candidates();
      }
      long long v95 = v103 + 32;
      uint64_t v93 = (long long *)((char *)v93 + 1);
      --v61;
    }
    while (v61);
  }
  uint64_t v138 = 0;
  long long v312 = 0u;
  long long v311 = 0u;
  long long v310 = 0u;
  long long v309 = 0u;
  long long v308 = 0u;
  long long v307 = 0u;
  long long v306 = 0u;
  long long v305 = 0u;
  unsigned int v139 = v252;
  do
    ++*((_WORD *)&v305 + *((unsigned __int8 *)&v282 + v138++));
  while (v252 != v138);
  uint64_t v140 = 0;
  int v141 = 0;
  unsigned int v143 = a6;
  unsigned int v142 = a4;
  do
  {
    int v144 = *((unsigned __int16 *)&v305 + v140);
    *((_WORD *)&v305 + v140) = v141;
    v141 += v144;
    ++v140;
  }
  while (v254 != v140);
  uint64_t v145 = 0;
  if (v252 <= 1) {
    uint64_t v146 = 1;
  }
  else {
    uint64_t v146 = v252;
  }
  do
  {
    uint64_t v147 = *((unsigned __int8 *)&v282 + v145);
    uint64_t v148 = *((unsigned __int16 *)&v305 + v147);
    *((_WORD *)&v305 + v147) = v148 + 1;
    v281[v148] = v145++;
  }
  while (v146 != v145);
  if (a4 >= v252) {
    unsigned int v149 = v252;
  }
  else {
    unsigned int v149 = a4;
  }
  if (v149 >= a6) {
    uint64_t v150 = a6;
  }
  else {
    uint64_t v150 = v149;
  }
  float32x4_t v151 = *(float32x4_t *)(a2 + 3488);
  float32x4_t v152 = *(float32x4_t *)(a2 + 3520);
  {
    *(float32x4_t *)long long v256 = v151;
    float32x4_t v250 = v152;
    float32x4_t v152 = v250;
    float32x4_t v151 = *(float32x4_t *)v256;
    unsigned int v139 = v252;
    unsigned int v143 = a6;
    unsigned int v142 = a4;
    if (v240)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      float32x4_t v152 = v250;
      float32x4_t v151 = *(float32x4_t *)v256;
      unsigned int v139 = v252;
      unsigned int v143 = a6;
      unsigned int v142 = a4;
    }
  }
  uint16x4_t v153 = 0;
  v153.i16[3] = vmovn_s32(vceqq_f32(v151, v152)).i16[3];
  int8x16_t v154 = (int8x16_t)vmovl_u16(v153);
  v155.i64[0] = 0x100000001;
  v155.i64[1] = 0x100000001;
  memset(__b, 0, sizeof(__b));
  memset(v279, 0, sizeof(v279));
  int v156 = vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v154, v155), (uint32x4_t)mask(vmask4)::shift));
  memset(v278, 0, sizeof(v278));
  memset(v277, 0, sizeof(v277));
  if (v150)
  {
    if (v139 >= v143) {
      unsigned int v157 = v143;
    }
    else {
      unsigned int v157 = v139;
    }
    if (v157 >= v142) {
      unsigned int v157 = v142;
    }
    size_t v158 = 4 * v157;
    memset_pattern16(__b, &xmmword_1889B5450, v158);
    memset_pattern16(v278, &xmmword_1889B5450, v158);
  }
  uint64_t v255 = v150;
  if (a3 <= 1) {
    uint64_t v159 = 1;
  }
  else {
    uint64_t v159 = a3;
  }
  if (v149 <= 1) {
    uint64_t v160 = 1;
  }
  else {
    uint64_t v160 = v149;
  }
  uint64_t v253 = v160;
  if (v156)
  {
    uint64_t v161 = 0;
    uint64_t v162 = 32 * v159;
    uint64_t v163 = 144 * v159;
    do
    {
      unsigned int v164 = (unsigned __int16)v281[v161];
      raw_partition_info = (unsigned __int16 *)block_size_descriptor::get_raw_partition_info((block_size_descriptor *)a1, a3, v164);
      long long v298 = 0u;
      long long v297 = 0u;
      long long v296 = 0u;
      long long v295 = 0u;
      long long v294 = 0u;
      long long v293 = 0u;
      long long v292 = 0u;
      long long v291 = 0u;
      compute_avgs_and_dirs_3_comp_rgb(raw_partition_info, a2, (uint64_t)&v291, 0.0, v166, v167, v168, v169);
      bzero(&v282, 0x240uLL);
      uint64_t v170 = 0;
      char v171 = (float32x4_t *)&v286;
      do
      {
        float32x4_t v172 = *(float32x4_t *)((char *)&v291 + v170 + 16);
        v171[-4] = *(float32x4_t *)((char *)&v291 + v170);
        int8x16_t v173 = (int8x16_t)vmulq_f32(v172, v172);
        *(float32x2_t *)v173.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL), *(float32x2_t *)v173.i8);
        int32x2_t v174 = (int32x2_t)vpadd_f32(*(float32x2_t *)v173.i8, *(float32x2_t *)v173.i8);
        float32x4_t v175 = (float32x4_t)xmmword_1889B1B00;
        if (*(float *)v174.i32 != 0.0) {
          float32x4_t v175 = vdivq_f32(v172, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v174, 0)));
        }
        v171[-3] = v175;
        uint64_t v176 = v171 - 3;
        v176[1].i64[0] = 0;
        v176[1].i64[1] = 0;
        float32x4_t v177 = *(float32x4_t *)((char *)&v291 + v170);
        int8x16_t v178 = (int8x16_t)vmulq_f32(v177, v177);
        *(float32x2_t *)v178.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL), *(float32x2_t *)v178.i8);
        int32x2_t v179 = (int32x2_t)vpadd_f32(*(float32x2_t *)v178.i8, *(float32x2_t *)v178.i8);
        float32x4_t v180 = (float32x4_t)xmmword_1889B1B00;
        if (*(float *)v179.i32 != 0.0) {
          float32x4_t v180 = vdivq_f32(v177, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v179, 0)));
        }
        v171[-1] = v180;
        float32x4_t v181 = v171[-4];
        float32x4_t v182 = vmulq_f32(v175, v181);
        float32x4_t v183 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v182, 2), vaddq_f32(v182, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v182.f32, 1))), 0);
        v183.i32[3] = 0;
        float32x4_t v184 = vsubq_f32(v181, vmulq_f32(v175, v183));
        float32x4_t v185 = *v176;
        *char v171 = v184;
        v171[1] = v185;
        v171[2].i64[0] = 0;
        v171[2].i64[1] = 0;
        v171[3] = v171[-1];
        v170 += 32;
        v171 += 9;
      }
      while (v162 != v170);
      LODWORD(v305) = 0;
      v269[0].i32[0] = 0;
      compute_error_squared_rgb(raw_partition_info, (float32x4_t *)a2, (uint64_t)&v282, &v305, v269);
      uint64_t v186 = 0;
      float v187 = *(float *)&v305;
      float v188 = v269[0].f32[0];
      float32x4_t v189 = (unsigned __int8 *)(raw_partition_info + 2);
      do
      {
        unsigned int v190 = *v189++;
        float v191 = v9 * (float)v190;
        float v192 = *(float *)&v290[v186];
        float32x4_t v193 = vmulq_n_f32(*(float32x4_t *)((char *)&v282 + v186 + 16), v192);
        float32x4_t v194 = vmulq_n_f32(*(float32x4_t *)((char *)&v285 + v186), v192);
        float32x4_t v195 = vmulq_n_f32(vmulq_f32(v193, v193), v191);
        float32x4_t v196 = vmulq_n_f32(vmulq_f32(v194, v194), v191);
        float v187 = v187
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v195, 2), vaddq_f32(v195, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v195.f32, 1))).f32[0];
        float v188 = v188
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v196, 2), vaddq_f32(v196, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v196.f32, 1))).f32[0];
        v186 += 144;
      }
      while (v163 != v186);
      *(float *)&long long v305 = v187;
      v269[0].f32[0] = v188;
      insert_result(v255, v187, v164, __b, (unsigned int *)v279);
      insert_result(v255, v269[0].f32[0], v164, v278, (unsigned int *)v277);
      ++v161;
    }
    while (v161 != v253);
  }
  else
  {
    uint64_t v197 = 0;
    do
    {
      uint64_t v249 = v197;
      unsigned int v248 = (unsigned __int16)v281[v197];
      float32x4_t v198 = (unsigned char *)block_size_descriptor::get_raw_partition_info((block_size_descriptor *)a1, a3, v248);
      long long v289 = 0u;
      long long v288 = 0u;
      long long v287 = 0u;
      long long v286 = 0u;
      long long v285 = 0u;
      long long v284 = 0u;
      long long v283 = 0u;
      long long v282 = 0u;
      uint64_t v199 = v198;
      compute_avgs_and_dirs_4_comp(v198, (float32x4_t *)a2, (uint64_t)&v282);
      unint64_t v200 = 0;
      long long v298 = 0u;
      long long v297 = 0u;
      long long v296 = 0u;
      long long v295 = 0u;
      long long v294 = 0u;
      long long v293 = 0u;
      long long v292 = 0u;
      long long v291 = 0u;
      long long v312 = 0u;
      long long v311 = 0u;
      long long v310 = 0u;
      long long v309 = 0u;
      long long v308 = 0u;
      long long v307 = 0u;
      long long v306 = 0u;
      long long v305 = 0u;
      long long v275 = 0u;
      long long v276 = 0u;
      long long v273 = 0u;
      long long v274 = 0u;
      long long v271 = 0u;
      long long v272 = 0u;
      v269[0] = 0u;
      long long v270 = 0u;
      long long v268 = 0u;
      long long v266 = 0u;
      long long v267 = 0u;
      long long v264 = 0u;
      long long v265 = 0u;
      long long v262 = 0u;
      long long v263 = 0u;
      long long v261 = 0u;
      v260[0] = 0;
      v260[1] = 0;
      do
      {
        float32x4_t v201 = *(float32x4_t *)((char *)&v282 + v200 + 16);
        *(long long *)((char *)&v291 + v200) = *(long long *)((char *)&v282 + v200);
        int8x16_t v202 = (int8x16_t)vmulq_f32(v201, v201);
        *(float32x2_t *)v202.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v202, v202, 8uLL), *(float32x2_t *)v202.i8);
        int32x2_t v203 = (int32x2_t)vpadd_f32(*(float32x2_t *)v202.i8, *(float32x2_t *)v202.i8);
        v204.i64[0] = 0x3F0000003F000000;
        v204.i64[1] = 0x3F0000003F000000;
        v205.i64[0] = 0x3F0000003F000000;
        v205.i64[1] = 0x3F0000003F000000;
        if (*(float *)v203.i32 != 0.0) {
          float32x4_t v205 = vdivq_f32(v201, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v203, 0)));
        }
        *(long long *)((char *)&v292 + v200) = (__int128)v205;
        float32x4_t v206 = *(float32x4_t *)((char *)&v291 + v200);
        int8x16_t v207 = (int8x16_t)vmulq_f32(v205, v206);
        *(float32x2_t *)v207.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v207, v207, 8uLL), *(float32x2_t *)v207.i8);
        float32x4_t v208 = vsubq_f32(v206, vmulq_n_f32(v205, vpadd_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v207.i8).f32[0]));
        unsigned int v209 = &v269[v200 / 0x10];
        float32x4_t v210 = *(float32x4_t *)((char *)&v292 + v200);
        *unsigned int v209 = v208;
        v209[1] = v210;
        unsigned int v211 = (float32x4_t *)((char *)&v305 + v200);
        v211->i64[0] = 0;
        v211->i64[1] = 0;
        float32x4_t v212 = *(float32x4_t *)((char *)&v282 + v200);
        int8x16_t v213 = (int8x16_t)vmulq_f32(v212, v212);
        *(float32x2_t *)v213.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v213, v213, 8uLL), *(float32x2_t *)v213.i8);
        int32x2_t v214 = (int32x2_t)vpadd_f32(*(float32x2_t *)v213.i8, *(float32x2_t *)v213.i8);
        if (*(float *)v214.i32 != 0.0) {
          float32x4_t v204 = vdivq_f32(v212, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v214, 0)));
        }
        v211[1] = v204;
        unint64_t v215 = (float32x4_t *)((char *)&v261 + v200);
        v215->i64[0] = 0;
        v215->i64[1] = 0;
        v215[1] = v211[1];
        v200 += 32;
      }
      while (32 * v159 != v200);
      unint64_t v259 = 0;
      compute_error_squared_rgba(v199, (float32x4_t *)a2, (uint64_t)v269, (uint64_t)&v261, (uint64_t)v260, (_DWORD *)&v259 + 1, &v259);
      uint64_t v217 = 0;
      float v218 = *((float *)&v259 + 1);
      LODWORD(v219) = v259;
      uint64_t v220 = 16;
      do
      {
        LOBYTE(v216) = *((unsigned char *)v199 + v217 + 4);
        float v221 = v9 * (float)LODWORD(v216);
        float v222 = *((float *)v260 + v217);
        float32x4_t v223 = vmulq_n_f32(*(float32x4_t *)((char *)&v291 + v220), v222);
        float32x4_t v224 = vmulq_n_f32(*(float32x4_t *)((char *)&v305 + v220), v222);
        int8x16_t v225 = (int8x16_t)vmulq_n_f32(vmulq_f32(v223, v223), v221);
        *(float32x2_t *)v225.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v225, v225, 8uLL), *(float32x2_t *)v225.i8);
        float v218 = v218 + vpadd_f32(*(float32x2_t *)v225.i8, *(float32x2_t *)v225.i8).f32[0];
        int8x16_t v226 = (int8x16_t)vmulq_n_f32(vmulq_f32(v224, v224), v221);
        *(float32x2_t *)v226.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL), *(float32x2_t *)v226.i8);
        float v216 = vpadd_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v226.i8).f32[0];
        float v219 = v219 + v216;
        ++v217;
        v220 += 32;
      }
      while (v159 != v217);
      unint64_t v259 = __PAIR64__(LODWORD(v218), LODWORD(v219));
      insert_result(v150, v218, v248, __b, (unsigned int *)v279);
      insert_result(v150, *(float *)&v259, v248, v278, (unsigned int *)v277);
      uint64_t v197 = v249 + 1;
    }
    while (v249 + 1 != v253);
  }
  long long v294 = 0u;
  long long v293 = 0u;
  long long v292 = 0u;
  long long v291 = 0u;
  if (!v255) {
    return 0;
  }
  uint64_t v227 = 0;
  long long v228 = (unsigned int *)v279;
  long long v229 = (unsigned int *)v277;
  do
  {
    unsigned int v230 = *v228++;
    *((_DWORD *)&v291 + v227) = *(unsigned __int16 *)(block_size_descriptor::get_raw_partition_info((block_size_descriptor *)a1, a3, v230)+ 2);
    unsigned int v231 = *v229++;
    *((_DWORD *)&v291 + (v227 + 1)) = *(unsigned __int16 *)(block_size_descriptor::get_raw_partition_info((block_size_descriptor *)a1, a3, v231)+ 2);
    v227 += 2;
  }
  while (2 * v255 != v227);
  long long v289 = 0u;
  long long v288 = 0u;
  long long v287 = 0u;
  long long v286 = 0u;
  long long v285 = 0u;
  long long v284 = 0u;
  long long v283 = 0u;
  uint64_t v232 = (2 * v255);
  long long v282 = 0u;
  if (!v232) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v234 = (unsigned int *)&v291;
  while (1)
  {
    unsigned int v236 = *v234++;
    unsigned int v235 = v236;
    unint64_t v237 = (unint64_t)v236 >> 6;
    uint64_t v238 = *((void *)&v282 + v237);
    uint64_t v239 = 1 << v236;
    if (((1 << v236) & v238) == 0)
    {
      *(_DWORD *)(a5 + 4 * result) = v235;
      *((void *)&v282 + v237) = v239 | v238;
      uint64_t result = (result + 1);
      if (result == v255) {
        break;
      }
    }
    if (!--v232) {
      return result;
    }
  }
  return v255;
}

uint64_t block_size_descriptor::get_raw_partition_info(block_size_descriptor *this, int a2, unsigned int a3)
{
  if (a3 == 0xFFFF || *((_DWORD *)this + (a2 - 1) + 12) <= a3) {
    block_size_descriptor::get_raw_partition_info();
  }
  int v3 = (a2 << 10) - 2048;
  if (a2 == 1) {
    int v3 = 3072;
  }
  return (uint64_t)this + 1088 * v3 + 1088 * a3 + 11317232;
}

uint64_t insert_result(uint64_t result, float a2, unsigned int a3, float *a4, unsigned int *a5)
{
  if (!result) {
    insert_result();
  }
  uint64_t v5 = (result - 1);
  if (a4[v5] > a2)
  {
    uint64_t v6 = 0;
    while (a4[v6] < a2)
    {
      if (result == ++v6) {
        return result;
      }
    }
    if (v5 > v6)
    {
      uint64_t v7 = (result - 2);
      unsigned int v8 = result - 1;
      float v9 = a5;
      BOOL v10 = a4;
      do
      {
        v10[v5] = v10[v7];
        v9[v5] = v9[v7];
        --v10;
        --v9;
        --v8;
      }
      while (v8 > v6);
    }
    a4[v6] = a2;
    a5[v6] = a3;
  }
  return result;
}

void find_best_partition_candidates()
{
}

{
  __assert_rtn("find_best_partition_candidates", "astcenc_find_best_partitioning.cpp", 577, "partition_search_limit > 0");
}

{
  __assert_rtn("kmeans_init", "astcenc_find_best_partitioning.cpp", 66, "texel_count > 0");
}

{
  __assert_rtn("kmeans_assign", "astcenc_find_best_partitioning.cpp", 153, "texel_count > 0");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 372, "active_count > 0");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 397, "mismatch_counts[i] < BLOCK_MAX_KMEANS_TEXELS");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 398, "mismatch_counts[i] < bsd.texel_count");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 379, "mismatch_counts[i] < BLOCK_MAX_KMEANS_TEXELS");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 380, "mismatch_counts[i] < bsd.texel_count");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 388, "mismatch_counts[i] < BLOCK_MAX_KMEANS_TEXELS");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 389, "mismatch_counts[i] < bsd.texel_count");
}

{
  __assert_rtn("kmeans_update", "astcenc_find_best_partitioning.cpp", 217, "texel_count > 0");
}

void block_size_descriptor::get_raw_partition_info()
{
  __assert_rtn("get_raw_partition_info", "astcenc_internal.h", 723, "packed_index != BLOCK_BAD_PARTITIONING && packed_index < this->partitioning_count_all[partition_count - 1]");
}

void insert_result()
{
}

int32x4_t rgba_delta_unpack(int32x4_t *a1, int32x4_t *a2, uint32x4_t a3, int8x16_t a4)
{
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v5.i64[0] = 0x8000000080;
  v5.i64[1] = 0x8000000080;
  int32x4_t v6 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(a3, (uint32x4_t)v4), vandq_s8(a4, v5));
  int32x4_t v7 = (int32x4_t)vshlq_u32((uint32x4_t)a4, (uint32x4_t)v4);
  v5.i64[0] = 0x3F0000003FLL;
  v5.i64[1] = 0x3F0000003FLL;
  v8.i64[0] = 0x2000000020;
  v8.i64[1] = 0x2000000020;
  int32x4_t v9 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32(v7, v8) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8((int8x16_t)v7, v5));
  v5.i32[0] = vaddq_s32(vaddq_s32(v9, vdupq_lane_s32(*(int32x2_t *)v9.i8, 1)), vdupq_laneq_s32(v9, 2)).u32[0];
  int32x4_t v10 = vaddq_s32(v9, v6);
  if (v5.i32[0] < 0)
  {
    v11.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v6, 2), v6), v4).u64[0];
    v11.i64[1] = v6.i64[1];
    v6.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v10, 2), v10), v4).u64[0];
    v6.i64[1] = v10.i64[1];
    int32x4_t v10 = v11;
  }
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  *a1 = vminq_s32(vmaxq_s32(v6, (int32x4_t)0), v12);
  int32x4_t result = vminq_s32(vmaxq_s32(v10, (int32x4_t)0), v12);
  *a2 = result;
  return result;
}

__n128 *rgba_unpack(__n128 *result, __n128 *a2, int32x4_t a3, int32x4_t a4)
{
  int32x4_t v4 = vdupq_laneq_s32(a3, 2);
  int32x4_t v5 = vdupq_laneq_s32(a4, 2);
  if (vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(a3, vdupq_lane_s32(*(int32x2_t *)a3.i8, 1)), v4), vaddq_s32(vaddq_s32(a4, vdupq_lane_s32(*(int32x2_t *)a4.i8, 1)), v5))).u8[0])
  {
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7.i64[0] = vshlq_s32(vaddq_s32(v4, a3), v6).u64[0];
    v7.i64[1] = a3.i64[1];
    a3.i64[0] = vshlq_s32(vaddq_s32(v5, a4), v6).u64[0];
    a3.i64[1] = a4.i64[1];
    a4 = v7;
  }
  *int32x4_t result = (__n128)a3;
  *a2 = (__n128)a4;
  return result;
}

__n128 unpack_color_endpoints(unsigned int a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned char *a5, uint64_t a6, __n128 *a7, __n128 a8, double a9, int32x4_t a10, int32x4_t a11)
{
  *a4 = 0;
  *a5 = 0;
  switch(a2)
  {
    case 0:
      unsigned int v17 = *a3;
      int v18 = a3[1];
      goto LABEL_5;
    case 1:
      unsigned __int8 v19 = a3[1];
      unsigned int v17 = v19 & 0xC0 | (*a3 >> 2);
      int v18 = v17 + (v19 & 0x3F);
      if (v18 >= 255) {
        int v18 = 255;
      }
LABEL_5:
      a8.n128_u32[3] = 255;
      LODWORD(v20) = v17;
      DWORD1(v20) = v17;
      *((void *)&v20 + 1) = v17 | 0xFF00000000;
      a8.n128_u32[0] = v18;
      *(_OWORD *)a6 = v20;
      a8.n128_u32[1] = v18;
      a8.n128_u32[2] = v18;
      goto LABEL_105;
    case 2:
      *a4 = 1;
      unsigned int v21 = *a3;
      unsigned int v22 = a3[1];
      int v23 = 16 * v21 - 8;
      BOOL v24 = v22 >= v21;
      if (v22 >= v21) {
        int v25 = v21 << 8;
      }
      else {
        int v25 = (v22 << 8) | 0x80;
      }
      if (v24) {
        int v26 = 16 * v22;
      }
      else {
        int v26 = v23;
      }
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = v25;
      a8.n128_u32[1] = v25;
      v27.n128_u32[3] = 30720;
      a8.n128_u32[2] = v25;
      int v28 = 16 * v26;
      goto LABEL_28;
    case 3:
      *a4 = 1;
      int v29 = *a3;
      int v30 = a3[1];
      if ((v29 & 0x80u) != 0) {
        int v31 = 3584;
      }
      else {
        int v31 = 3840;
      }
      if ((v29 & 0x80u) == 0) {
        char v32 = 1;
      }
      else {
        char v32 = 2;
      }
      if ((v29 & 0x80u) != 0) {
        int v33 = 508;
      }
      else {
        int v33 = 254;
      }
      if ((v29 & 0x80u) != 0) {
        int v34 = 124;
      }
      else {
        int v34 = 30;
      }
      int v35 = v31 & (16 * v30) | (v29 << v32) & v33;
      int v36 = v35 + ((v30 << v32) & v34);
      if (v36 >= 4095) {
        int v36 = 4095;
      }
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = 16 * v35;
      a8.n128_u32[1] = 16 * v35;
      v27.n128_u32[3] = 30720;
      a8.n128_u32[2] = 16 * v35;
      int v28 = 16 * v36;
LABEL_28:
      v27.n128_u32[0] = v28;
      *(__n128 *)a6 = a8;
      v27.n128_u32[1] = v28;
      goto LABEL_85;
    case 4:
      a8.n128_u8[0] = *a3;
      a8.n128_u8[4] = a3[2];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      int32x4_t v37 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v37.i32[2] = a8.n128_u32[0];
      a8.n128_u8[0] = a3[1];
      a8.n128_u8[4] = a3[3];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      int32x4_t v38 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v38.i32[2] = a8.n128_u32[0];
      goto LABEL_31;
    case 5:
      a8.n128_u8[0] = a3[1];
      a8.n128_u8[4] = a3[3];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      int32x2_t v39 = vadd_s32((int32x2_t)a8.n128_u64[0], (int32x2_t)a8.n128_u64[0]);
      unint64_t v40 = *(void *)&vtst_s32((int32x2_t)(a8.n128_u64[0] & 0xFFFFFF40FFFFFF40), (int32x2_t)(a8.n128_u64[0] & 0xFFFFFF40FFFFFF40)) & 0xFFFFFF80FFFFFF80;
      a8.n128_u64[0] = (unint64_t)vorr_s8((int8x8_t)v40, (int8x8_t)(a8.n128_u64[0] & 0xFFFFFF7EFFFFFF7ELL));
      LOBYTE(v40) = *a3;
      BYTE4(v40) = a3[2];
      uint32x2_t v41 = (uint32x2_t)vorr_s8((int8x8_t)(*(void *)&v39 & 0xFFFFFF01FFFFFF01), vand_s8((int8x8_t)v40, (int8x8_t)0xFF000000FFLL));
      a8.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)vsra_n_u32((uint32x2_t)vshr_n_s32((int32x2_t)a8.n128_u64[0], 1uLL), v41, 1uLL), 0), (int32x2_t)0xFF000000FFLL);
      int32x4_t v38 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v38.i32[2] = a8.n128_u32[0];
      a8.n128_u64[0] = (unint64_t)vshr_n_u32(v41, 1uLL);
      int32x4_t v37 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v37.i32[2] = a8.n128_u32[0];
LABEL_31:
      *(int32x4_t *)a6 = v37;
      goto LABEL_101;
    case 6:
      v42.i32[0] = *a3;
      v42.i32[1] = a3[1];
      v42.i64[1] = a3[2];
      int32x4_t v43 = vmulq_s32(vdupq_n_s32(a3[3]), v42);
      v42.i32[3] = 255;
      *a7 = (__n128)v42;
      v42.i64[0] = 0x700000007;
      v42.i64[1] = 0x700000007;
      a8 = (__n128)vshlq_s32(v43, v42);
      a8.n128_u32[3] = 255;
      *(__n128 *)a6 = a8;
      goto LABEL_117;
    case 7:
      *a4 = 1;
      unsigned int v44 = *a3;
      unsigned int v45 = a3[1];
      unsigned int v46 = a3[2];
      unsigned int v47 = a3[3];
      unsigned int v48 = (v46 >> 4) & 8 | (v45 >> 5) & 4;
      BOOL v49 = v44 >> 6 == 3;
      if (v44 >> 6 == 3) {
        unsigned int v50 = 0;
      }
      else {
        unsigned int v50 = v44 >> 6;
      }
      if (v44 >> 6 == 3) {
        unsigned int v51 = 5;
      }
      else {
        unsigned int v51 = 4;
      }
      BOOL v80 = v48 == 12;
      BOOL v52 = v48 == 12;
      unsigned int v53 = v48 >> 2;
      if (v80) {
        unsigned int v53 = v50;
      }
      else {
        unsigned int v51 = v44 >> 6;
      }
      int v54 = (v45 >> 6) & 1;
      int v55 = (v45 >> 5) & 1;
      int v56 = (v46 >> 6) & 1;
      int v57 = (v46 >> 5) & 1;
      int v58 = (v47 >> 6) & 1;
      int v59 = (v47 >> 5) & 1;
      int v60 = 1 << v51;
      int v61 = v54 << 6;
      if (((1 << v51) & 0x30) == 0) {
        int v61 = 0;
      }
      unsigned int v62 = v61 & 0xFFFFFFE0 | v45 & 0x1F;
      int v63 = 32 * v55;
      int v64 = v56 << 6;
      if ((v60 & 0x30) == 0) {
        int v64 = 0;
      }
      if ((v60 & 0x3A) == 0) {
        int v63 = 0;
      }
      int v65 = v62 | v63;
      unsigned int v66 = v64 & 0xFFFFFFE0 | v46 & 0x1F;
      int v67 = 32 * v57;
      if ((v60 & 0x3A) == 0) {
        int v67 = 0;
      }
      int v68 = v66 | v67;
      int v69 = (16 * v60) & (v57 << 6);
      int v70 = (v47 >> 1) & 0x40;
      if ((v60 & 0x3B) == 0) {
        int v70 = 0;
      }
      int v71 = v56 << 7;
      if (v51 > 3) {
        int v71 = 0;
      }
      int v72 = v55 << 8;
      int v73 = v54 << 8;
      if ((v60 & 0xA) == 0) {
        int v73 = 0;
      }
      if ((v60 & 5) == 0) {
        int v72 = 0;
      }
      int v74 = v54 << 9;
      if ((v60 & 5) == 0) {
        int v74 = 0;
      }
      int v75 = v57 << 10;
      if (v51) {
        int v75 = 0;
      }
      int v76 = hdr_rgbo_unpack(unsigned char const*,vint4 &,vint4 &)::shamts[v51];
      unsigned int v77 = (v71 & 0xFFFFFFC0 | v44 & 0x3F | v75 | v70 | v69 | (8 * v60) & (v58 << 7) | v72 | v73 | v74 | (v60 << 8) & (v59 << 9) | (v60 << 9) & (v58 << 10)) << v76;
      int v78 = v65 << v76;
      int v79 = v68 << v76;
      BOOL v80 = !v52 || !v49;
      if (v52 && v49) {
        int v81 = v78;
      }
      else {
        int v81 = v77 - v78;
      }
      if (v80) {
        int v82 = v77 - v79;
      }
      else {
        int v82 = v79;
      }
      if (v53 == 1) {
        int v83 = v81;
      }
      else {
        int v83 = v77;
      }
      if (v53 == 1) {
        int v84 = v77;
      }
      else {
        int v84 = v81;
      }
      BOOL v85 = v53 == 2;
      if (v53 == 2) {
        int v86 = v82;
      }
      else {
        int v86 = v83;
      }
      if (v85) {
        int v82 = v77;
      }
      else {
        int v81 = v84;
      }
      int v87 = 32 * v59;
      if ((v60 & 0x3D) == 0) {
        int v87 = 0;
      }
      unsigned int v88 = v87 & 0xFFFFFFE0 | v47 & 0x1F;
      int v89 = v58 << 6;
      if ((v60 & 0x2D) == 0) {
        int v89 = 0;
      }
      int v90 = (v88 | v89 | v47 & (32 * v60) & 0x80) << v76;
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = 16 * ((v86 - v90) & ~((v86 - v90) >> 31));
      a8.n128_u32[1] = 16 * ((v81 - v90) & ~((v81 - v90) >> 31));
      a8.n128_u32[2] = 16 * ((v82 - v90) & ~((v82 - v90) >> 31));
      v27.n128_u32[3] = 30720;
      *(__n128 *)a6 = a8;
      v27.n128_u32[0] = 16 * (v86 & ~(v86 >> 31));
      int v28 = 16 * (v82 & ~(v82 >> 31));
      v27.n128_u32[1] = 16 * (v81 & ~(v81 >> 31));
LABEL_85:
      v27.n128_u32[2] = v28;
      *a7 = v27;
      goto LABEL_95;
    case 8:
      a8.n128_u32[3] = 0;
      a8.n128_u32[0] = *a3;
      a8.n128_u32[1] = a3[2];
      a8.n128_u32[2] = a3[4];
      v91.i32[0] = a3[1];
      v91.i32[1] = a3[3];
      v91.i64[1] = a3[5];
      if (a8.n128_u32[1] + a8.n128_u32[0] + a8.n128_u32[2] > v91.i32[1] + v91.i32[0] + v91.i32[2])
      {
        v92.i64[0] = -1;
        v92.i64[1] = -1;
        v93.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32((int32x4_t)a8, 2), (int32x4_t)a8), v92).u64[0];
        v93.i64[1] = a8.n128_i64[1];
        a8.n128_u64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v91, 2), v91), v92).u64[0];
        a8.n128_u64[1] = a3[5];
        int32x4_t v91 = v93;
      }
      *(__n128 *)a6 = a8;
      *a7 = (__n128)v91;
      goto LABEL_92;
    case 9:
      v94.i32[0] = *a3;
      v94.i32[1] = a3[2];
      v94.i64[1] = a3[4];
      v95.i32[0] = a3[1];
      v95.i32[1] = a3[3];
      v95.i64[1] = a3[5];
      v96.i64[0] = -1;
      v96.i64[1] = -1;
      int32x4_t v97 = (int32x4_t)vshlq_u32(v95, (uint32x4_t)v96);
      int32x4_t v98 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v95 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), (int8x16_t)vshlq_u32(v94, (uint32x4_t)v96));
      v95.i64[0] = 0x3F0000003FLL;
      v95.i64[1] = 0x3F0000003FLL;
      v99.i64[0] = 0x2000000020;
      v99.i64[1] = 0x2000000020;
      int32x4_t v100 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32(v97, v99) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8((int8x16_t)v97, (int8x16_t)v95));
      v97.i32[0] = vaddq_s32(vaddq_s32(v100, vdupq_lane_s32(*(int32x2_t *)v100.i8, 1)), vdupq_laneq_s32(v100, 2)).u32[0];
      int32x4_t v101 = vaddq_s32(v100, v98);
      if (v97.i32[0] < 0)
      {
        v102.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v98, 2), v98), v96).u64[0];
        v102.i64[1] = v98.i64[1];
        v98.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v101, 2), v101), v96).u64[0];
        v98.i64[1] = v101.i64[1];
        int32x4_t v101 = v102;
      }
      v103.i64[0] = 0xFF000000FFLL;
      v103.i64[1] = 0xFF000000FFLL;
      *(int32x4_t *)a6 = vminq_s32(vmaxq_s32(v98, (int32x4_t)0), v103);
      a8 = (__n128)vminq_s32(vmaxq_s32(v101, (int32x4_t)0), v103);
      *a7 = a8;
LABEL_92:
      *(_DWORD *)(a6 + 12) = 255;
      a7->n128_u32[3] = 255;
      goto LABEL_117;
    case 10:
      a8.n128_u8[0] = *a3;
      a8.n128_u8[4] = a3[1];
      a8.n128_u16[1] = a8.n128_u16[2];
      a8.n128_u8[4] = a3[2];
      a8.n128_u8[6] = a3[4];
      v104.i64[0] = 0xFF000000FFLL;
      v104.i64[1] = 0xFF000000FFLL;
      a8 = (__n128)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)a8.n128_u64[0]), v104);
      v105.i64[0] = 0x700000007;
      v105.i64[1] = 0x700000007;
      int32x4_t v106 = vshlq_s32(vmulq_s32(vdupq_n_s32(a3[3]), (int32x4_t)a8), v105);
      v106.i32[3] = a8.n128_i32[3];
      a8.n128_u32[3] = a3[5];
      *a7 = a8;
      *(int32x4_t *)a6 = v106;
      goto LABEL_117;
    case 11:
      *a4 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
LABEL_95:
      if (a1 == 3)
      {
        *(_DWORD *)(a6 + 12) = 30720;
        a7->n128_u32[3] = 30720;
        unsigned __int32 v107 = 1;
        *a5 = 1;
LABEL_121:
        a8.n128_u8[0] = *a4;
        a8.n128_u32[1] = v107;
        a8.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32(vneg_s32((int32x2_t)a8.n128_u64[0]), 0x18uLL), 0x18uLL);
        int8x16_t v137 = (int8x16_t)vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
        v137.i32[2] = a8.n128_u32[0];
        v138.i64[0] = 0x100000001;
        v138.i64[1] = 0x100000001;
        int32x4_t v136 = (int32x4_t)vbslq_s8(v137, v138, (int8x16_t)vdupq_n_s32(0x101u));
        goto LABEL_123;
      }
      *(_DWORD *)(a6 + 12) = 255;
      a7->n128_u32[3] = 255;
      *a5 = 0;
LABEL_117:
      if (a1 >= 2)
      {
        unsigned __int32 v107 = *a5;
        goto LABEL_121;
      }
      if (*a4)
      {
        *(_OWORD *)a6 = xmmword_1889B54A0;
        *a7 = (__n128)xmmword_1889B54A0;
        *a4 = 0;
        *a5 = 0;
        v136.i64[0] = 0x100000001;
        v136.i64[1] = 0x100000001;
      }
      else
      {
        int32x4_t v136 = vdupq_n_s32(0x101u);
      }
LABEL_123:
      *(int32x4_t *)a6 = vmulq_s32(*(int32x4_t *)a6, v136);
      __n128 result = (__n128)vmulq_s32(*(int32x4_t *)a7, v136);
      *a7 = result;
      return result;
    case 12:
      a10.i32[0] = *a3;
      a10.i32[1] = a3[2];
      a10.i32[2] = a3[4];
      a8 = (__n128)a10;
      a8.n128_u32[3] = a3[6];
      a11.i32[0] = a3[1];
      a11.i32[1] = a3[3];
      a11.i32[2] = a3[5];
      int32x4_t v38 = a11;
      v38.i32[3] = a3[7];
      if (a10.i32[1] + a10.i32[0] + a10.i32[2] > (a11.i32[1] + a11.i32[0] + a11.i32[2]))
      {
        v108.i64[0] = -1;
        v108.i64[1] = -1;
        v109.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(a10, 2), (int32x4_t)a8), v108).u64[0];
        v109.i64[1] = a8.n128_i64[1];
        a8.n128_u64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(a11, 2), v38), v108).u64[0];
        a8.n128_u64[1] = v38.u64[1];
        int32x4_t v38 = v109;
      }
      *(__n128 *)a6 = a8;
LABEL_101:
      *a7 = (__n128)v38;
      goto LABEL_117;
    case 13:
      a8.n128_u8[0] = a3[4];
      a8.n128_u8[4] = a3[6];
      v110.i32[0] = *a3;
      v110.i32[1] = a3[2];
      int8x8_t v111 = vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v110.u64[1] = (unint64_t)v111;
      v111.i8[0] = a3[5];
      v111.i8[4] = a3[7];
      v112.i32[0] = a3[1];
      v112.i32[1] = a3[3];
      v112.u64[1] = (unint64_t)vand_s8(v111, (int8x8_t)0xFF000000FFLL);
      v113.i64[0] = -1;
      v113.i64[1] = -1;
      int8x16_t v114 = (int8x16_t)vshlq_u32(v110, (uint32x4_t)v113);
      int32x4_t v115 = (int32x4_t)vshlq_u32(v112, (uint32x4_t)v113);
      int32x4_t v116 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v112 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v114);
      v112.i64[0] = 0x3F0000003FLL;
      v112.i64[1] = 0x3F0000003FLL;
      v117.i64[0] = 0x2000000020;
      v117.i64[1] = 0x2000000020;
      int32x4_t v118 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32(v115, v117) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8((int8x16_t)v115, (int8x16_t)v112));
      v112.i32[0] = vaddq_s32(vaddq_s32(v118, vdupq_lane_s32(*(int32x2_t *)v118.i8, 1)), vdupq_laneq_s32(v118, 2)).u32[0];
      int32x4_t v119 = vaddq_s32(v118, v116);
      if (v112.i32[0] < 0)
      {
        v120.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v116, 2), v116), v113).u64[0];
        v120.i64[1] = v116.i64[1];
        v116.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v119, 2), v119), v113).u64[0];
        v116.i64[1] = v119.i64[1];
        int32x4_t v119 = v120;
      }
      v121.i64[0] = 0xFF000000FFLL;
      v121.i64[1] = 0xFF000000FFLL;
      *(int32x4_t *)a6 = vminq_s32(vmaxq_s32(v116, (int32x4_t)0), v121);
      a8 = (__n128)vminq_s32(vmaxq_s32(v119, (int32x4_t)0), v121);
LABEL_105:
      *a7 = a8;
      goto LABEL_117;
    case 14:
      *a4 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
      int v122 = a3[6];
      int v123 = a3[7];
      goto LABEL_116;
    case 15:
      *a4 = 1;
      *a5 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
      unsigned int v124 = a3[6];
      unsigned int v125 = a3[7];
      int v126 = (v125 >> 6) & 2 | (v124 >> 7);
      int v127 = v124 & 0x7F;
      int v128 = v125 & 0x7F;
      int v129 = (v128 << (v126 + 1)) & 0x780 | v127;
      int v130 = v129 << (4 - v126);
      int v131 = ((0x3Fu >> v126) & v125 ^ (0x20u >> v126)) - (0x20u >> v126) + v129;
      int v132 = v131 << (4 - v126);
      if (v132 >= 4095) {
        int v132 = 4095;
      }
      if (v131 >= 0) {
        int v133 = v132;
      }
      else {
        int v133 = 0;
      }
      int v134 = 32 * v127;
      int v135 = 32 * v128;
      if (v126 == 3) {
        int v133 = v135;
      }
      else {
        int v134 = v130;
      }
      int v122 = 16 * v134;
      int v123 = 16 * v133;
LABEL_116:
      *(_DWORD *)(a6 + 12) = v122;
      a7->n128_u32[3] = v123;
      goto LABEL_117;
    default:
      goto LABEL_117;
  }
}

__n128 hdr_rgb_unpack(unsigned __int8 *a1, _OWORD *a2, __n128 *a3)
{
  int v3 = *a1;
  unsigned int v4 = a1[1];
  unsigned int v5 = a1[2];
  unsigned int v6 = a1[3];
  unsigned int v7 = a1[4];
  unsigned int v8 = a1[5];
  int v9 = (v8 >> 6) & 2 | (v7 >> 7);
  if (v9 == 3)
  {
    HIDWORD(v10) = 30720;
    LODWORD(v10) = v3 << 8;
    DWORD1(v10) = v5 << 8;
    DWORD2(v10) = (v7 & 0x7F) << 9;
    int v11 = v4 << 8;
    *a2 = v10;
    int v12 = v6 << 8;
    unsigned int v13 = (v8 & 0x7F) << 9;
  }
  else
  {
    unsigned int v14 = (v5 >> 6) & 2 | (v4 >> 7) | (v6 >> 5) & 4;
    int v15 = v7 & 0x7F;
    int v16 = v8 & 0x7F;
    int v17 = (v5 >> 6) & 1;
    int v18 = (v6 >> 6) & 1;
    int v19 = (v7 >> 6) & 1;
    int v20 = (v8 >> 6) & 1;
    int v21 = (v7 >> 5) & 1;
    int v22 = (v8 >> 5) & 1;
    int v23 = 1 << ((v5 >> 6) & 2 | (v4 >> 7) | (v6 >> 5) & 4);
    int v24 = v17 << 9;
    if ((v23 & 0xA4) == 0) {
      int v24 = 0;
    }
    int v25 = v21 << 9;
    if ((v23 & 0x50) == 0) {
      int v25 = 0;
    }
    int v26 = v22 << 10;
    if ((v23 & 0x50) == 0) {
      int v26 = 0;
    }
    int v27 = v18 << 10;
    if ((v23 & 0xA0) == 0) {
      int v27 = 0;
    }
    int v28 = v19 << 11;
    if (v14 < 6) {
      int v28 = 0;
    }
    unsigned int v29 = v28 & 0xFFFFFEFF | (((v4 >> 6) & 1) << 8) | v24 | (v23 << 6) & (v19 << 9) | v25 | v26 | v27 | v3;
    int v30 = (16 * v23) & (v18 << 6);
    int v31 = v18 << 6;
    unsigned int v32 = v30 & 0xFFFFFFC0 | v4 & 0x3F;
    int v33 = v20 << 6;
    if ((v23 & 0xE8) != 0) {
      int v34 = v20 << 6;
    }
    else {
      int v34 = 0;
    }
    int v35 = v32 | v34 | (4 * v23) & (v19 << 7);
    int v36 = v17 << 6;
    if ((v23 & 0x5B) == 0) {
      int v36 = 0;
    }
    unsigned int v37 = v36 & 0xFFFFFFC0 | v5 & 0x3F;
    if ((v23 & 0x5B) != 0) {
      int v38 = v31;
    }
    else {
      int v38 = 0;
    }
    unsigned int v39 = v38 & 0xFFFFFFC0 | v6 & 0x3F;
    int v40 = v20 << 7;
    if ((v23 & 0x12) != 0) {
      int v41 = v19 << 7;
    }
    else {
      int v41 = 0;
    }
    int v42 = v37 | v41;
    if ((v23 & 0x12) == 0) {
      int v40 = 0;
    }
    int v43 = v39 | v40;
    int v44 = 32 * v21;
    if ((v23 & 0xAF) == 0) {
      int v44 = 0;
    }
    int v45 = v44 | v15;
    if ((v23 & 0xAF) != 0) {
      int v46 = 32 * v22;
    }
    else {
      int v46 = 0;
    }
    int v47 = v46 | v16;
    int v48 = v19 << 6;
    if ((v23 & 5) == 0) {
      int v48 = 0;
    }
    int v49 = v45 | v48;
    if ((v23 & 5) == 0) {
      int v33 = 0;
    }
    int v50 = -hdr_rgb_unpack(unsigned char const*,vint4 &,vint4 &)::dbits_tab[v14];
    int v51 = v49 << v50 >> v50;
    int v52 = (v47 | v33) << v50 >> v50;
    char v53 = (v14 >> 1) ^ 3;
    unsigned int v54 = v29 << v53;
    int v55 = (v29 - v42) << v53;
    unsigned int v56 = v29 - v43;
    int v57 = v56 << v53;
    int v58 = (v29 - v42 - (v35 + v51)) << v53;
    int v59 = (v56 - (v35 + v52)) << v53;
    int v60 = ((v29 - v35) << v53) & ~((int)((v29 - v35) << v53) >> 31);
    if (v60 >= 4095) {
      int v60 = 4095;
    }
    int v61 = v58 & ~(v58 >> 31);
    if (v61 >= 4095) {
      int v61 = 4095;
    }
    int v62 = v59 & ~(v59 >> 31);
    if (v62 >= 4095) {
      int v62 = 4095;
    }
    if (v54 >= 0xFFF) {
      unsigned int v54 = 4095;
    }
    int v63 = v55 & ~(v55 >> 31);
    if (v63 >= 4095) {
      int v63 = 4095;
    }
    if ((v57 & ~(v57 >> 31)) >= 4095) {
      int v64 = 4095;
    }
    else {
      int v64 = v57 & ~(v57 >> 31);
    }
    if (v9 == 1) {
      unsigned int v65 = v63;
    }
    else {
      unsigned int v65 = v54;
    }
    if (v9 == 1) {
      int v66 = v54;
    }
    else {
      int v66 = v63;
    }
    if (v9 == 1) {
      int v67 = v61;
    }
    else {
      int v67 = v60;
    }
    if (v9 == 1) {
      int v68 = v60;
    }
    else {
      int v68 = v61;
    }
    BOOL v69 = v9 == 2;
    if (v9 == 2) {
      int v70 = v64;
    }
    else {
      int v70 = v65;
    }
    if (v69) {
      int v64 = v54;
    }
    else {
      int v63 = v66;
    }
    if (v69) {
      int v71 = v62;
    }
    else {
      int v71 = v67;
    }
    if (v69) {
      int v62 = v60;
    }
    else {
      int v61 = v68;
    }
    HIDWORD(v72) = 30720;
    LODWORD(v72) = 16 * v71;
    DWORD1(v72) = 16 * v61;
    int v11 = 16 * v70;
    DWORD2(v72) = 16 * v62;
    *a2 = v72;
    int v12 = 16 * v63;
    unsigned int v13 = 16 * v64;
  }
  result.n128_u64[0] = __PAIR64__(v12, v11);
  result.n128_u64[1] = v13 | 0x780000000000;
  *a3 = result;
  return result;
}

uint64_t pack_color_endpoints(int a1, unsigned __int8 *a2, unsigned int a3, float32x4_t a4, float32x4_t a5, int8x16_t a6, int32x4_t a7)
{
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  if (a3 - 21 <= 0xFFFFFFEE) {
    pack_color_endpoints();
  }
  uint64_t v8 = 0;
  uint32x4_t v218 = 0uLL;
  int8x16_t v217 = 0uLL;
  uint32x4_t v216 = 0uLL;
  int8x16_t v215 = 0uLL;
  float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  float32x4_t v12 = vminnmq_f32(vmaxnmq_f32(a4, (float32x4_t)0), v11);
  float32x4_t v13 = vminnmq_f32(vmaxnmq_f32(a5, (float32x4_t)0), v11);
  float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  float32x4_t v15 = vmulq_f32(v12, v14);
  float32x4_t v16 = vmulq_f32(v13, v14);
  switch(a1)
  {
    case 0:
      uint64_t v8 = 0;
      float v24 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
      float v25 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
      float v26 = (float)(v24 + v25) * 0.5;
      if (v24 > v25)
      {
        float v25 = (float)(v24 + v25) * 0.5;
        float v24 = v26;
      }
      int v27 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
      *a2 = v27[((float)(v24 - (float)(int)(float)(v24 + 0.5)) >= -0.1) | (2 * (int)(float)(v24 + 0.5))];
      a2[1] = v27[((float)(v25 - (float)(int)(float)(v25 + 0.5)) >= -0.1) | (2 * (int)(float)(v25 + 0.5))];
      return v8;
    case 2:
    case 3:
      float v17 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
      float v18 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
      float v19 = (float)(v17 + v18) * 0.5;
      BOOL v20 = v18 < v17;
      if (v18 < v17) {
        float v18 = (float)(v17 + v18) * 0.5;
      }
      int v21 = (int)(float)(v18 + 0.5);
      if (v20) {
        float v17 = v19;
      }
      int v22 = (int)(float)(v17 + 0.5);
      if (v21 - v22 < 2049)
      {
        if ((((v22 + 16) >> 5) & ~((v22 + 16) >> 31)) >= 2047) {
          __int16 v89 = 2047;
        }
        else {
          __int16 v89 = ((v22 + 16) >> 5) & ~(unsigned __int16)((v22 + 16) >> 31);
        }
        uint64_t v23 = a3 - 4;
        int v90 = &color_unquant_to_uquant_tables[512 * v23];
        int v91 = (char)v90[(2 * (v89 & 0x7F)) | 1];
        if ((v91 & 0x80000000) == 0)
        {
          int v92 = (((v21 + 16) >> 5) & ~((v21 + 16) >> 31)) >= 2047 ? 2047 : ((v21 + 16) >> 5) & ~((v21 + 16) >> 31);
          unsigned int v93 = v89 & 0x780 | v90[(2 * (v89 & 0x7F)) | 1];
          unsigned int v94 = v92 - v93;
          if (v94 <= 0xF)
          {
            int v95 = (v93 >> 3) & 0xF0 | v94;
            unsigned __int8 v96 = color_unquant_to_uquant_tables[512 * v23 + ((2 * v95) | 1u)];
            if ((v95 & 0xF0) == (v96 & 0xF0)) {
              goto LABEL_75;
            }
          }
        }
        __int16 v97 = (((v22 + 32) >> 6) & ~((v22 + 32) >> 31)) >= 1023
            ? 1023
            : ((v22 + 32) >> 6) & ~(unsigned __int16)((v22 + 32) >> 31);
        int v91 = (char)v90[(2 * (v97 & 0x7F)) | 0x101];
        if (v91 < 0)
        {
          int v98 = (((v21 + 32) >> 6) & ~((v21 + 32) >> 31)) >= 1023 ? 1023 : ((v21 + 32) >> 6) & ~((v21 + 32) >> 31);
          unsigned int v99 = v98 - (v97 & 0x380 | v91 & 0x7F);
          if (v99 <= 0x1F)
          {
            int v100 = v99 | ((unsigned __int16)(v97 & 0x380) >> 2);
            unsigned __int8 v96 = color_unquant_to_uquant_tables[512 * v23 + ((2 * v100) | 1u)];
            if ((v100 & 0xE0) == (v96 & 0xE0))
            {
LABEL_75:
              *a2 = v91;
              a2[1] = v96;
              return 3;
            }
          }
        }
      }
      else
      {
        uint64_t v23 = a3 - 4;
      }
      int v101 = ((v22 + 128) >> 8) & ~((v22 + 128) >> 31);
      if (v101 >= 255) {
        int v101 = 255;
      }
      int v102 = ((v21 + 128) >> 8) & ~((v21 + 128) >> 31);
      if (v102 >= 255) {
        int v102 = 255;
      }
      int v103 = ((v21 + 256) >> 8) & ~((v21 + 256) >> 31);
      if (v103 >= 255) {
        int v103 = 255;
      }
      if (((v22 >> 8) & ~(v22 >> 31)) >= 255) {
        int v104 = 255;
      }
      else {
        int v104 = (v22 >> 8) & ~(v22 >> 31);
      }
      unsigned int v105 = ((v102 << 8) - v21) * ((v102 << 8) - v21) + ((v101 << 8) - v22) * ((v101 << 8) - v22);
      unsigned int v106 = ((v104 << 8) - v22 + 128) * ((v104 << 8) - v22 + 128)
           + ((v103 << 8) - v21 - 128) * ((v103 << 8) - v21 - 128);
      BOOL v107 = v105 >= v106;
      if (v105 >= v106) {
        int v108 = v103;
      }
      else {
        int v108 = v101;
      }
      if (v107) {
        int v109 = v104;
      }
      else {
        int v109 = v102;
      }
      uint32x4_t v110 = &color_unquant_to_uquant_tables[512 * v23];
      *a2 = v110[(2 * v108) | 1];
      a2[1] = v110[(2 * v109) | 1];
      return 2;
    case 4:
      float v28 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
      float v29 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
      int v30 = (int)(float)(v28 + 0.5);
      if (a3 >= 0x13)
      {
        int v32 = 2 * v30;
        uint64_t v34 = a3 - 4;
        int v37 = (int)(float)(v29 + 0.5);
        int v31 = (int)(float)(v15.f32[3] + 0.5);
        int v40 = 2 * v37;
        int v33 = 2 * v31;
        int v38 = (int)(float)(v16.f32[3] + 0.5);
        int v41 = 2 * v38;
      }
      else
      {
        int v31 = (int)(float)(v15.f32[3] + 0.5);
        int v32 = 2 * v30;
        int v33 = 2 * v31;
        uint64_t v34 = a3 - 4;
        int v35 = &color_unquant_to_uquant_tables[512 * v34];
        unsigned __int8 v36 = v35[(4 * ((int)(float)(v28 + 0.5) & 0x7F)) | 1];
        int v37 = (int)(float)(v29 + 0.5);
        int v38 = (int)(float)(v16.f32[3] + 0.5);
        int v39 = v36 | (((v30 >> 7) & 1) << 8);
        int v40 = 2 * v37;
        int v41 = 2 * v38;
        int v42 = 2 * v37 - v39;
        if ((v42 - 64) >= 0xFFFFFF80)
        {
          int v43 = v35[(4 * ((int)(float)(v15.f32[3] + 0.5) & 0x7F)) | 1];
          unsigned int v44 = v43 & 0xFFFFFEFF | (((v31 >> 7) & 1) << 8);
          if (v41 - v44 - 64 >= 0xFFFFFF80)
          {
            int v45 = v42 & 0x7F | ((unsigned __int16)(v32 & 0x100) >> 1);
            int v46 = &color_unquant_to_uquant_tables[512 * v34];
            unsigned int v47 = v46[(2 * v45) | 1];
            if ((v45 ^ v47) <= 0x3F)
            {
              int v48 = ((_BYTE)v41 - (_BYTE)v43) & 0x7F | ((unsigned __int16)(v33 & 0x100) >> 1);
              unsigned int v49 = v46[(2 * v48) | 1];
              if ((v48 ^ v49) <= 0x3F
                && (v47 & 0x7F) + v39 + (((int)(v47 << 25) >> 31) & 0xFFFFFF80) <= 0x1FF
                && (v49 & 0x7F) + v44 + (((int)(v49 << 25) >> 31) & 0xFFFFFF80) <= 0x1FF)
              {
                *a2 = v36;
                a2[1] = v47;
                a2[2] = v43;
                uint64_t v8 = 5;
                a2[3] = v49;
                return v8;
              }
            }
          }
        }
      }
      int v111 = v32 | ((float)(v28 - (float)v30) >= -0.1);
      uint32x4_t v112 = &color_unquant_to_uquant_tables[512 * v34];
      *a2 = v112[v111];
      a2[1] = v112[v40 | ((float)(v29 - (float)v37) >= -0.1)];
      a2[2] = v112[v33 | ((float)(v15.f32[3] - (float)v31) >= -0.1)];
      a2[3] = v112[v41 | ((float)(v16.f32[3] - (float)v38) >= -0.1)];
      return 4;
    case 6:
      quantize_rgbs(a2, a3, a6);
      return 6;
    case 7:
      float32x4_t v50 = (float32x4_t)vdupq_laneq_s32(a7, 3);
      *(float32x2_t *)v51.f32 = vadd_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v50.f32);
      v51.i32[3] = vextq_s8(*(int8x16_t *)&a7, *(int8x16_t *)&a7, 8uLL).i32[1];
      v51.i32[2] = vaddq_f32(*(float32x4_t *)&a7, v50).i32[2];
      int32x4_t v52 = (int32x4_t)vminnmq_f32(vmaxnmq_f32(v51, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x477FFF00u));
      if (*(float *)v52.i32 <= *(float *)&v52.i32[1] || *(float *)v52.i32 <= *(float *)&v52.i32[2])
      {
        float32x4_t v114 = (float32x4_t)vrev64q_s32(v52);
        if (*(float *)&v52.i32[1] <= *(float *)&v52.i32[2])
        {
          float32x4_t v114 = (float32x4_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 0xCuLL);
          int v113 = 2;
        }
        else
        {
          v114.i64[1] = v52.i64[1];
          int v113 = 1;
        }
      }
      else
      {
        int v113 = 0;
        float32x4_t v114 = (float32x4_t)v52;
      }
      unint64_t v128 = 0;
      LODWORD(v129) = vsubq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1)).u32[0];
      LODWORD(v130) = vsubq_f32(v114, (float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2)).u32[0];
      int v131 = 4 * v113;
      int v132 = v113 | 0xC;
      uint64_t v133 = a3 - 4;
      float32x2_t v134 = (float32x2_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 4uLL).u64[0];
      float32x2_t v135 = (float32x2_t)vdup_n_s32(0x477FFF00u);
      while (1)
      {
        float v136 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_cutoffs[2 * v128];
        BOOL v137 = v129 <= v136 && v130 <= v136;
        if (v137 && v114.f32[3] <= quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_cutoffs[2 * v128 + 1])
        {
          float v138 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_scales[v128];
          unsigned int v139 = v128 >= 4 ? v132 : v131 | v128;
          float v140 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_rscales[v128];
          int v141 = (char *)&quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_bits + 12 * v128;
          int v142 = *((_DWORD *)v141 + 1);
          int v143 = *((_DWORD *)v141 + 2);
          unsigned int v144 = (int)(float)((float)(v114.f32[0] * v138) + 0.5);
          int v145 = v144 & 0x3F | (v139 << 6);
          do
          {
            unsigned __int8 v146 = color_unquant_to_uquant_tables[512 * v133 + ((2 * v145) | 1u)];
            int v147 = v145 & 0xC0;
            v145 -= v147 != (v146 & 0xC0);
          }
          while (v147 != (v146 & 0xC0));
          int v148 = 1 << v142;
          *(float *)v7.i32 = v140 * (float)(int)(v144 & 0xFFFFFFC0 | v146 & 0x3F);
          float32x2_t v149 = (float32x2_t)vdup_lane_s32(v7, 0);
          float32x2_t v150 = vsub_f32(v149, v134);
          int32x2_t v151 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v150, v135), (int8x8_t)v135, (int8x8_t)vmaxnm_f32(v150, 0)), v138), (float32x2_t)0x3F0000003F000000));
          if (v148 > v151.i32[0] && v148 > v151.i32[1])
          {
            if (v128 > 5)
            {
              int v153 = 0;
            }
            else if (((1 << v128) & 5) != 0)
            {
              int v153 = (v144 >> 9) & 1;
            }
            else
            {
              int v153 = ((1 << v128) & 0xA) != 0 ? (v144 >> 8) & 1 : ((unsigned __int32)v151.i32[0] >> 6) & 1;
            }
            if (v128 >= 4) {
              int v154 = (v128 - 4) < 2 && ((unsigned __int32)v151.i32[1] >> 6) & 1;
            }
            else {
              int v154 = (v144 >> 7) & 1;
            }
            if (v128 > 5) {
              unsigned int v155 = 0;
            }
            else {
              unsigned int v155 = ((1 << v128) & 0x3A) != 0 ? ((unsigned __int32)v151.i32[0] >> 5) & 1 : (v144 >> 8) & 1;
            }
            switch((int)v128)
            {
              case 0:
                int v156 = (v144 >> 10) & 1;
                break;
              case 1:
              case 3:
              case 4:
              case 5:
                int v156 = ((unsigned __int32)v151.i32[1] >> 5) & 1;
                break;
              case 2:
                int v156 = (v144 >> 6) & 1;
                break;
              default:
                int v156 = 0;
                break;
            }
            int v157 = 1 << v143;
            int v158 = v151.i8[0] & 0x1F | (((v139 >> 2) & 1) << 7);
            char v159 = 16 * v139;
            int v160 = v158 | (v153 << 6) | (32 * v155);
            int v161 = v154 << 6;
            do
            {
              unsigned __int8 v162 = color_unquant_to_uquant_tables[512 * v133 + ((2 * v160) | 1u)];
              int v163 = v160 & 0xF0;
              v160 -= v163 != (v162 & 0xF0);
            }
            while (v163 != (v162 & 0xF0));
            int v164 = v161 | v159 & 0x80 | v151.i8[4] & 0x1F | (32 * v156);
            do
            {
              int v165 = color_unquant_to_uquant_tables[512 * v133 + ((2 * v164) | 1u)];
              int v166 = v164 & 0xF0;
              v164 -= v166 != (v165 & 0xF0);
            }
            while (v166 != (v165 & 0xF0));
            v167.i32[0] = v162 & 0x1F;
            v167.i32[1] = v165 & 0xFFFFFF1F;
            float32x2_t v168 = vsub_f32(vsub_f32(v149, vmul_n_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(void *)&v151 & 0xFFFFFFE0FFFFFFE0), v167)), v140)), v134);
            v168.f32[0] = v114.f32[3]
                        + (float)((float)((float)((float)(*(float *)v7.i32 - v114.f32[0]) + v168.f32[0]) + v168.f32[1])
                                * 0.33333);
            float v169 = fmaxf(v168.f32[0], 0.0);
            float v170 = v168.f32[0] <= 1000000000.0 ? v169 : *(float *)"(knN";
            int v171 = (int)(float)((float)(v138 * v170) + 0.5);
            if (v157 > v171) {
              break;
            }
          }
        }
        if (++v128 == 5)
        {
          uint64_t v172 = 0;
          int32x4_t v225 = v52;
          v224.i32[2] = 0;
          v224.i64[0] = 0;
          float v223 = 0.0;
          uint64_t v222 = 0;
          do
          {
            float v173 = *(float *)&v225.i32[v172];
            float v174 = fmaxf(v173, 0.0);
            if (v173 <= 65020.0) {
              float v175 = v174;
            }
            else {
              float v175 = *(float *)"";
            }
            *(float *)&v225.i32[v172] = v175;
            float v176 = (float)(v175 * 0.0019531) + 0.5;
            v224.i32[v172] = (int)v176;
            *(float *)((char *)&v222 + v172 * 4) = (float)(int)v176 * 512.0;
            ++v172;
          }
          while (v172 != 3);
          uint64_t v177 = 0;
          float v178 = *(float *)&v225.i32[3]
               + (float)((float)((float)((float)(*(float *)&v222 - *(float *)v225.i32)
                                       + (float)(*((float *)&v222 + 1) - *(float *)&v225.i32[1]))
                               + (float)(v223 - *(float *)&v225.i32[2]))
                       * 0.33333);
          float v179 = (float)(v178 * 0.0019531) + 0.5;
          if (v178 <= 0.0) {
            float v179 = 0.5;
          }
          float v180 = 127.49;
          if (v178 <= 65020.0) {
            float v180 = v179;
          }
          int8x8_t v219 = vorr_s8(vand_s8(*(int8x8_t *)v224.i8, (int8x8_t)0x7F0000003FLL), (int8x8_t)0x80000000C0);
          int v220 = v224.i8[8] & 0x7F | 0x80;
          unsigned __int32 v221 = (2 * v224.i32[0]) & 0x80 | (int)v180 & 0x7F;
          float32x4_t v181 = &color_unquant_to_uquant_tables[512 * v133];
          do
          {
            __int32 v182 = v219.i32[v177];
            do
            {
              unsigned __int8 v183 = v181[(2 * v182) | 1];
              int v184 = v182 & 0xF0;
              v182 -= v184 != (v183 & 0xF0);
            }
            while (v184 != (v183 & 0xF0));
            a2[v177++] = v183;
          }
          while (v177 != 4);
          return 7;
        }
      }
      unsigned int v199 = v144 >> 9;
      int v200 = v171 >> 6;
      if (v128 == 4) {
        LOBYTE(v200) = (int)v144 >> 7;
      }
      if (v128 == 1)
      {
        char v201 = v144 >> 10;
      }
      else
      {
        LOBYTE(v199) = v171 >> 5;
        char v201 = v200;
      }
      if (v128 == 2) {
        unsigned int v202 = v171 >> 7;
      }
      else {
        unsigned int v202 = v144 >> 6;
      }
      int v203 = (int)(float)((float)(v138 * v170) + 0.5) & 0x1F | (v202 << 7) | (32 * (v199 & 1)) & 0xBF | ((v201 & 1) << 6);
      float32x4_t v204 = &color_unquant_to_uquant_tables[512 * v133];
      do
      {
        unsigned __int8 v205 = v204[(2 * v203) | 1];
        int v206 = v203 & 0xF0;
        v203 -= v206 != (v205 & 0xF0);
      }
      while (v206 != (v205 & 0xF0));
      *a2 = v146;
      a2[1] = v162;
      a2[2] = v165;
      uint64_t v8 = 7;
      a2[3] = v205;
      return v8;
    case 8:
      float32x4_t v209 = v16;
      float32x4_t v212 = v15;
      if (a3 > 0x12)
      {
        uint64_t v8 = 0;
        float v207 = 1.0e30;
        if (a3 != 19) {
          goto LABEL_182;
        }
      }
      else
      {
        if (try_quantize_rgb_delta_blue_contract((int8x16_t *)&v218, &v217, a3, v15, v16))
        {
          int32x4_t v225 = 0uLL;
          int32x4_t v224 = 0uLL;
          rgba_delta_unpack(&v225, &v224, v218, v217);
          float32x4_t v54 = vsubq_f32(v212, vcvtq_f32_s32(v225));
          float32x4_t v55 = vsubq_f32(v209, vcvtq_f32_s32(v224));
          int8x16_t v56 = (int8x16_t)vaddq_f32(vmulq_f32(v54, v54), vmulq_f32(v55, v55));
          *(float32x2_t *)v56.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), *(float32x2_t *)v56.i8);
          LODWORD(v207) = vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8).u32[0];
          uint64_t v8 = 9;
        }
        else
        {
          uint64_t v8 = 0;
          float v207 = 1.0e30;
        }
        if (try_quantize_rgb_delta((int8x16_t *)&v216, &v215, a3, v212, v209))
        {
          int32x4_t v225 = 0uLL;
          int32x4_t v224 = 0uLL;
          rgba_delta_unpack(&v225, &v224, v216, v215);
          float32x4_t v16 = v209;
          float32x4_t v15 = v212;
          float32x4_t v185 = vsubq_f32(v212, vcvtq_f32_s32(v225));
          float32x4_t v186 = vsubq_f32(v209, vcvtq_f32_s32(v224));
          int8x16_t v187 = (int8x16_t)vaddq_f32(vmulq_f32(v185, v185), vmulq_f32(v186, v186));
          *(float32x2_t *)v187.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL), *(float32x2_t *)v187.i8);
          float v188 = vpadd_f32(*(float32x2_t *)v187.i8, *(float32x2_t *)v187.i8).f32[0];
          if (v188 < v207)
          {
            int8x16_t v217 = v215;
            uint32x4_t v218 = v216;
            uint64_t v8 = 9;
            float v207 = v188;
          }
        }
        else
        {
          float32x4_t v16 = v209;
          float32x4_t v15 = v212;
        }
      }
      if (try_quantize_rgb_blue_contract(&v216, &v215, a3, v15, v16))
      {
        int32x4_t v225 = 0uLL;
        int32x4_t v224 = 0uLL;
        rgba_unpack((__n128 *)&v225, (__n128 *)&v224, (int32x4_t)v216, (int32x4_t)v215);
        float32x4_t v16 = v209;
        float32x4_t v15 = v212;
        float32x4_t v189 = vsubq_f32(v212, vcvtq_f32_s32(v225));
        float32x4_t v190 = vsubq_f32(v209, vcvtq_f32_s32(v224));
        int8x16_t v191 = (int8x16_t)vaddq_f32(vmulq_f32(v189, v189), vmulq_f32(v190, v190));
        *(float32x2_t *)v191.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v191, v191, 8uLL), *(float32x2_t *)v191.i8);
        float v192 = vpadd_f32(*(float32x2_t *)v191.i8, *(float32x2_t *)v191.i8).f32[0];
        if (v192 < v207)
        {
          int8x16_t v217 = v215;
          uint32x4_t v218 = v216;
          uint64_t v8 = 8;
          float v207 = v192;
        }
      }
      else
      {
        float32x4_t v16 = v209;
        float32x4_t v15 = v212;
      }
LABEL_182:
      quantize_rgb(&v216, &v215, a3, v15, v16);
      int32x4_t v225 = 0uLL;
      int32x4_t v224 = 0uLL;
      rgba_unpack((__n128 *)&v225, (__n128 *)&v224, (int32x4_t)v216, (int32x4_t)v215);
      float32x4_t v193 = vsubq_f32(v212, vcvtq_f32_s32(v225));
      float32x4_t v194 = vsubq_f32(v209, vcvtq_f32_s32(v224));
      int8x16_t v195 = (int8x16_t)vaddq_f32(vmulq_f32(v193, v193), vmulq_f32(v194, v194));
      *(float32x2_t *)v195.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL), *(float32x2_t *)v195.i8);
      if (vpadd_f32(*(float32x2_t *)v195.i8, *(float32x2_t *)v195.i8).f32[0] < v207)
      {
        int8x16_t v217 = v215;
        uint32x4_t v218 = v216;
        uint64_t v8 = 8;
      }
      int8x16_t v197 = v217;
      uint32x4_t v196 = v218;
      *a2 = v218.i8[0];
      a2[1] = v197.i8[0];
      a2[2] = v196.u8[4];
      a2[3] = v197.u8[4];
      a2[4] = v196.u8[8];
      a2[5] = v197.u8[8];
      return v8;
    case 10:
      int v57 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
      a2[4] = v57[((float)(v15.f32[3] - (float)(int)(float)(v15.f32[3] + 0.5)) >= -0.1) | (2
                                                                                         * (int)(float)(v15.f32[3] + 0.5))];
      a2[5] = v57[((float)(v16.f32[3] - (float)(int)(float)(v16.f32[3] + 0.5)) >= -0.1) | (2
                                                                                         * (int)(float)(v16.f32[3] + 0.5))];
      quantize_rgbs(a2, a3, a6);
      return 10;
    case 11:
      quantize_hdr_rgb(a2, a3, v12, v13);
      return 11;
    case 12:
      float v58 = v15.f32[3];
      float v59 = v16.f32[3];
      __n128 v210 = (__n128)v16;
      __n128 v213 = (__n128)v15;
      if (a3 > 0x12)
      {
        uint64_t v8 = 0;
        float v208 = 1.0e30;
        if (a3 != 19) {
          goto LABEL_108;
        }
      }
      else
      {
        float v208 = 1.0e30;
        if (try_quantize_rgb_delta_blue_contract((int8x16_t *)&v218, &v217, a3, v15, v16)
          && try_quantize_alpha_delta((uint64_t)&v218, (uint64_t)&v217, a3, v210, v213))
        {
          int32x4_t v225 = 0uLL;
          int32x4_t v224 = 0uLL;
          rgba_delta_unpack(&v225, &v224, v218, v217);
          float32x4_t v60 = vsubq_f32((float32x4_t)v213, vcvtq_f32_s32(v225));
          float32x4_t v61 = vsubq_f32((float32x4_t)v210, vcvtq_f32_s32(v224));
          int8x16_t v62 = (int8x16_t)vaddq_f32(vmulq_f32(v60, v60), vmulq_f32(v61, v61));
          *(float32x2_t *)v62.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), *(float32x2_t *)v62.i8);
          LODWORD(v208) = vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8).u32[0];
          uint64_t v8 = 13;
          float32x4_t v63 = (float32x4_t)v210;
          float32x4_t v64 = (float32x4_t)v213;
        }
        else
        {
          uint64_t v8 = 0;
          float32x4_t v63 = (float32x4_t)v210;
          float32x4_t v64 = (float32x4_t)v213;
        }
        if (try_quantize_rgb_delta((int8x16_t *)&v216, &v215, a3, v64, v63)
          && try_quantize_alpha_delta((uint64_t)&v216, (uint64_t)&v215, a3, v213, v210))
        {
          int32x4_t v225 = 0uLL;
          int32x4_t v224 = 0uLL;
          rgba_delta_unpack(&v225, &v224, v216, v215);
          float32x4_t v16 = (float32x4_t)v210;
          float32x4_t v15 = (float32x4_t)v213;
          float32x4_t v115 = vsubq_f32((float32x4_t)v213, vcvtq_f32_s32(v225));
          float32x4_t v116 = vsubq_f32((float32x4_t)v210, vcvtq_f32_s32(v224));
          int8x16_t v117 = (int8x16_t)vaddq_f32(vmulq_f32(v115, v115), vmulq_f32(v116, v116));
          *(float32x2_t *)v117.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL), *(float32x2_t *)v117.i8);
          float v118 = vpadd_f32(*(float32x2_t *)v117.i8, *(float32x2_t *)v117.i8).f32[0];
          if (v118 < v208)
          {
            int8x16_t v217 = v215;
            uint32x4_t v218 = v216;
            uint64_t v8 = 13;
            float v208 = v118;
          }
        }
        else
        {
          float32x4_t v16 = (float32x4_t)v210;
          float32x4_t v15 = (float32x4_t)v213;
        }
      }
      if (try_quantize_rgb_blue_contract(&v216, &v215, a3, v15, v16))
      {
        int32x4_t v119 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
        v216.i32[3] = v119[((float)(v59 - (float)(int)(float)(v59 + 0.5)) >= -0.1) | (2 * (int)(float)(v59 + 0.5))];
        v215.i32[3] = v119[((float)(v58 - (float)(int)(float)(v58 + 0.5)) >= -0.1) | (2 * (int)(float)(v58 + 0.5))];
        int32x4_t v225 = 0uLL;
        int32x4_t v224 = 0uLL;
        rgba_unpack((__n128 *)&v225, (__n128 *)&v224, (int32x4_t)v216, (int32x4_t)v215);
        float32x4_t v16 = (float32x4_t)v210;
        float32x4_t v15 = (float32x4_t)v213;
        float32x4_t v120 = vsubq_f32((float32x4_t)v213, vcvtq_f32_s32(v225));
        float32x4_t v121 = vsubq_f32((float32x4_t)v210, vcvtq_f32_s32(v224));
        int8x16_t v122 = (int8x16_t)vaddq_f32(vmulq_f32(v120, v120), vmulq_f32(v121, v121));
        *(float32x2_t *)v122.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL), *(float32x2_t *)v122.i8);
        float v123 = vpadd_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8).f32[0];
        if (v123 < v208)
        {
          int8x16_t v217 = v215;
          uint32x4_t v218 = v216;
          uint64_t v8 = 12;
          float v208 = v123;
        }
      }
      else
      {
        float32x4_t v16 = (float32x4_t)v210;
        float32x4_t v15 = (float32x4_t)v213;
      }
LABEL_108:
      quantize_rgb(&v216, &v215, a3, v15, v16);
      unsigned int v124 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
      v216.i32[3] = v124[((float)(v58 - (float)(int)(float)(v58 + 0.5)) >= -0.1) | (2 * (int)(float)(v58 + 0.5))];
      v215.i32[3] = v124[((float)(v59 - (float)(int)(float)(v59 + 0.5)) >= -0.1) | (2 * (int)(float)(v59 + 0.5))];
      int32x4_t v225 = 0uLL;
      int32x4_t v224 = 0uLL;
      rgba_unpack((__n128 *)&v225, (__n128 *)&v224, (int32x4_t)v216, (int32x4_t)v215);
      float32x4_t v125 = vsubq_f32((float32x4_t)v213, vcvtq_f32_s32(v225));
      float32x4_t v126 = vsubq_f32((float32x4_t)v210, vcvtq_f32_s32(v224));
      int8x16_t v127 = (int8x16_t)vaddq_f32(vmulq_f32(v125, v125), vmulq_f32(v126, v126));
      *(float32x2_t *)v127.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL), *(float32x2_t *)v127.i8);
      if (vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8).f32[0] < v208)
      {
        int8x16_t v217 = v215;
        uint32x4_t v218 = v216;
        uint64_t v8 = 12;
      }
      v227.val[1] = v217;
      v227.val[0] = (int8x16_t)v218;
      *(void *)a2 = vqtbl2q_s8(v227, (int8x16_t)xmmword_1889B5520).u64[0];
      return v8;
    case 14:
      float32x2_t v65 = vmul_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), (float32x2_t)vdup_n_s32(0x3B7F00FFu));
      float32x2_t v66 = (float32x2_t)vdup_n_s32(0x437F0000u);
      float32x2_t v67 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v65, v66), (int8x8_t)v66, (int8x8_t)vmaxnm_f32(v65, 0));
      int32x2_t v68 = vcvt_s32_f32(vadd_f32(v67, (float32x2_t)0x3F0000003F000000));
      int32x2_t v69 = vcge_f32(vsub_f32(v67, vcvt_f32_s32(v68)), (float32x2_t)vdup_n_s32(0xBDCCCCCD));
      int v70 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
      a2[6] = v70[2 * v68.i32[1] - v69.i32[1]];
      a2[7] = v70[2 * v68.i32[0] - v69.i32[0]];
      quantize_hdr_rgb(a2, a3, v12, v13);
      return 14;
    case 15:
      float v211 = v12.f32[3];
      float v214 = v13.f32[3];
      quantize_hdr_rgb(a2, a3, v12, v13);
      float v71 = 0.5;
      float v72 = v211 + 0.5;
      if (v211 <= 0.0) {
        float v72 = 0.5;
      }
      if (v214 > 0.0) {
        float v71 = v214 + 0.5;
      }
      float v73 = 65280.0;
      if (v211 > 65280.0) {
        float v72 = 65280.0;
      }
      int v74 = (int)v72;
      if (v214 <= 65280.0) {
        float v73 = v71;
      }
      int v75 = (int)v73;
      uint64_t v76 = a3 - 4;
      uint64_t v77 = -3;
      int v78 = 256;
      uint64_t v79 = 2;
      char v80 = 0x80;
      while (1)
      {
        int v81 = (int)((0x80u >> v79) + v74) >> (v77 + 9);
        int v82 = color_unquant_to_uquant_tables[512 * v76 + ((2 * (v78 & 0x80 | v81 & 0x7F)) | 1u)];
        if (((v78 ^ v82) & 0x80) == 0)
        {
          signed int v83 = ((int)((0x80u >> v79) + v75) >> (v77 + 9)) - (v81 & 0xFFFFFF80 | v82 & 0x7F);
          signed int v84 = 0x20u >> v79;
          if (v83 >= (signed int)-(0x20u >> v79) && v83 < v84)
          {
            int v86 = (v81 >> 7 << (v77 + 7)) | v80 & 0x80 | v83 & (2 * v84 - 1);
            int v87 = color_unquant_to_uquant_tables[512 * v76 + 1 + 2 * v86];
            if (((v86 ^ v87) & quantize_hdr_alpha(float,float,unsigned char *,quant_method)::testbits[v79]) == 0) {
              break;
            }
          }
        }
        --v79;
        v80 -= 64;
        v78 -= 128;
        BOOL v107 = __CFADD__(v77++, 1);
        if (v107)
        {
          unsigned int v88 = &color_unquant_to_uquant_tables[512 * v76];
          a2[6] = v88[((uint64_t)(v74 + 256) >> 8) | 0x101];
          LOBYTE(v87) = v88[((uint64_t)(v75 + 256) >> 8) | 0x101];
          goto LABEL_186;
        }
      }
      a2[6] = v82;
LABEL_186:
      a2[7] = v87;
      return 15;
    default:
      return v8;
  }
}

uint64_t try_quantize_rgb_delta_blue_contract(int8x16_t *a1, int8x16_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5 = vaddq_f32(a5, vsubq_f32(a5, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a5, (int32x4_t)a5), (int32x4_t)a5)));
  float32x4_t v6 = vaddq_f32(a4, vsubq_f32(a4, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a4, (int32x4_t)a4), (int32x4_t)a4)));
  float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  int8x8_t v8 = (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgtq_f32(v6, v7)), vorrq_s8((int8x16_t)vcgtq_f32(v5, v7), (int8x16_t)vcltzq_f32(v5))));
  int v9 = (uint32x4_t *)&unk_1E90FF000;
  {
    float32x2_t v66 = a2;
    int v70 = a1;
    int v58 = a3;
    int8x8_t v62 = v8;
    float32x4_t v51 = v5;
    float32x4_t v54 = v6;
    float32x4_t v5 = v51;
    float32x4_t v6 = v54;
    int8x8_t v8 = v62;
    int v9 = (uint32x4_t *)&unk_1E90FF000;
    a3 = v58;
    int v43 = v42;
    a2 = v66;
    a1 = v70;
    if (v43)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      float32x4_t v5 = v51;
      float32x4_t v6 = v54;
      int8x8_t v8 = v62;
      int v9 = (uint32x4_t *)&unk_1E90FF000;
      a3 = v58;
      a2 = v66;
      a1 = v70;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vand_s8(v8, (int8x8_t)0x1000100010001)), v9[55]))) {
    return 0;
  }
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  int32x4_t v11 = vcvtq_s32_f32(vaddq_f32(v5, v10));
  int32x4_t v12 = vaddq_s32(v11, v11);
  int8x16_t v13 = vandq_s8((int8x16_t)vaddq_s32(v12, v12), (int8x16_t)vdupq_n_s32(0x1FEu));
  uint64_t v14 = a3 - 4;
  float32x4_t v15 = &color_unquant_to_uquant_tables[512 * v14];
  v16.i32[0] = v15[v13.i32[0] | 1];
  v16.i32[1] = v15[v13.i32[1] | 1];
  v16.i64[1] = v15[v13.i32[2] | 1];
  v13.i64[0] = 0x10000000100;
  v13.i64[1] = 0x10000000100;
  int8x16_t v17 = vandq_s8((int8x16_t)v12, v13);
  int32x4_t v18 = vcvtq_s32_f32(vaddq_f32(v6, v10));
  int32x4_t v19 = vsubq_s32(vaddq_s32(v18, v18), (int32x4_t)vorrq_s8(v16, v17));
  v19.i32[3] = 0;
  v18.i64[0] = 0x3F0000003FLL;
  v18.i64[1] = 0x3F0000003FLL;
  uint32x4_t v20 = (uint32x4_t)vaddq_s32(v19, v18);
  {
    float32x2_t v67 = a2;
    float v71 = a1;
    uint64_t v59 = a3 - 4;
    int8x16_t v63 = v16;
    int32x4_t v52 = v19;
    int8x16_t v55 = v17;
    uint32x4_t v50 = v20;
    uint32x4_t v20 = v50;
    int32x4_t v19 = v52;
    int8x16_t v17 = v55;
    int8x16_t v16 = v63;
    uint64_t v14 = v59;
    int v9 = (uint32x4_t *)&unk_1E90FF000;
    int v45 = v44;
    a2 = v67;
    a1 = v71;
    if (v45)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      uint32x4_t v20 = v50;
      int32x4_t v19 = v52;
      int8x16_t v17 = v55;
      int8x16_t v16 = v63;
      uint64_t v14 = v59;
      int v9 = (uint32x4_t *)&unk_1E90FF000;
      a2 = v67;
      a1 = v71;
    }
  }
  v21.i64[0] = 0x7F0000007FLL;
  v21.i64[1] = 0x7F0000007FLL;
  int8x16_t v22 = (int8x16_t)vcgtq_u32(v21, v20);
  v23.i64[0] = 0x100000001;
  v23.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v22, v23), v9[55]))) {
    return 0;
  }
  v24.i64[0] = 0x7F0000007FLL;
  v24.i64[1] = 0x7F0000007FLL;
  v25.i64[0] = -1;
  v25.i64[1] = -1;
  int32x4_t v26 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v17, v25), vandq_s8((int8x16_t)v19, v24));
  int8x16_t v27 = (int8x16_t)vaddq_s32(v26, v26);
  float v28 = &color_unquant_to_uquant_tables[512 * v14];
  v29.i32[0] = v28[v27.i32[0] | 1];
  v29.i32[1] = v28[v27.i32[1] | 1];
  v29.i64[1] = v28[v27.i32[2] | 1];
  v27.i64[0] = 0xC0000000C0;
  v27.i64[1] = 0xC0000000C0;
  int32x4_t v30 = (int32x4_t)vandq_s8(veorq_s8(v29, (int8x16_t)v26), v27);
  v30.i32[3] = 0;
  {
    int32x2_t v68 = a2;
    float v72 = a1;
    int8x16_t v64 = v16;
    int32x4_t v56 = v30;
    int8x16_t v60 = v29;
    int32x4_t v30 = v56;
    int8x16_t v29 = v60;
    int8x16_t v16 = v64;
    int v9 = (uint32x4_t *)&unk_1E90FF000;
    int v47 = v46;
    a2 = v68;
    a1 = v72;
    if (v47)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      int32x4_t v30 = v56;
      int8x16_t v29 = v60;
      int8x16_t v16 = v64;
      int v9 = (uint32x4_t *)&unk_1E90FF000;
      a2 = v68;
      a1 = v72;
    }
  }
  v31.i64[0] = 0x100000001;
  v31.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vbicq_s8(v31, (int8x16_t)vceqzq_s32(v30)), v9[55]))) {
    return 0;
  }
  v32.i64[0] = -1;
  v32.i64[1] = -1;
  int32x4_t v33 = (int32x4_t)vshlq_u32((uint32x4_t)v29, v32);
  v34.i64[0] = 0x3F0000003FLL;
  v34.i64[1] = 0x3F0000003FLL;
  v35.i64[0] = 0x2000000020;
  v35.i64[1] = 0x2000000020;
  int32x4_t v36 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32(v33, v35) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8((int8x16_t)v33, v34));
  if ((vaddq_s32(vaddq_s32(v36, vdupq_lane_s32(*(int32x2_t *)v36.i8, 1)), vdupq_laneq_s32(v36, 2)).u32[0] & 0x80000000) == 0) {
    return 0;
  }
  int32x4_t v37 = vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v16, v32), (int8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80))), v36);
  int8x16_t v38 = (int8x16_t)vshrq_n_u32((uint32x4_t)v37, 0x1FuLL);
  {
    int32x2_t v69 = a2;
    float v73 = a1;
    int8x16_t v65 = v16;
    int32x4_t v57 = v37;
    int8x16_t v61 = v29;
    int8x16_t v53 = v38;
    int8x16_t v38 = v53;
    int32x4_t v37 = v57;
    int8x16_t v29 = v61;
    int8x16_t v16 = v65;
    int v9 = (uint32x4_t *)&unk_1E90FF000;
    int v49 = v48;
    a2 = v69;
    a1 = v73;
    if (v49)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      int8x16_t v38 = v53;
      int32x4_t v37 = v57;
      int8x16_t v29 = v61;
      int8x16_t v16 = v65;
      int v9 = (uint32x4_t *)&unk_1E90FF000;
      a2 = v69;
      a1 = v73;
    }
  }
  v39.i64[0] = 0xFF000000FFLL;
  v39.i64[1] = 0xFF000000FFLL;
  int32x4_t v40 = vcgtq_s32(v37, v39);
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vsubq_s32((int32x4_t)vbicq_s8(v38, (int8x16_t)v40), v40), v9[55]))) {
    return 0;
  }
  *a1 = v16;
  *a2 = v29;
  return 1;
}

uint64_t try_quantize_rgb_delta(int8x16_t *a1, int8x16_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  int32x4_t v6 = vcvtq_s32_f32(vaddq_f32(a4, v5));
  int32x4_t v7 = vaddq_s32(v6, v6);
  int8x16_t v8 = vandq_s8((int8x16_t)vaddq_s32(v7, v7), (int8x16_t)vdupq_n_s32(0x1FEu));
  uint64_t v9 = a3 - 4;
  float32x4_t v10 = &color_unquant_to_uquant_tables[512 * v9];
  v11.i32[0] = v10[v8.i32[0] | 1];
  v11.i32[1] = v10[v8.i32[1] | 1];
  v11.i64[1] = v10[v8.i32[2] | 1];
  v8.i64[0] = 0x10000000100;
  v8.i64[1] = 0x10000000100;
  int8x16_t v12 = vandq_s8((int8x16_t)v7, v8);
  int32x4_t v13 = vcvtq_s32_f32(vaddq_f32(a5, v5));
  int32x4_t v14 = vsubq_s32(vaddq_s32(v13, v13), (int32x4_t)vorrq_s8(v11, v12));
  v14.i32[3] = 0;
  v13.i64[0] = 0x3F0000003FLL;
  v13.i64[1] = 0x3F0000003FLL;
  uint32x4_t v15 = (uint32x4_t)vaddq_s32(v14, v13);
  int8x16_t v16 = (uint32x4_t *)&unk_1E90FF000;
  {
    int32x4_t v56 = a2;
    uint64_t v59 = a1;
    uint64_t v50 = a3 - 4;
    int8x16_t v53 = v11;
    int32x4_t v45 = v14;
    int8x16_t v47 = v12;
    uint32x4_t v44 = v15;
    uint32x4_t v15 = v44;
    int32x4_t v14 = v45;
    int8x16_t v12 = v47;
    int8x16_t v11 = v53;
    uint64_t v9 = v50;
    int8x16_t v16 = (uint32x4_t *)&unk_1E90FF000;
    int v39 = v38;
    a2 = v56;
    a1 = v59;
    if (v39)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      uint32x4_t v15 = v44;
      int32x4_t v14 = v45;
      int8x16_t v12 = v47;
      int8x16_t v11 = v53;
      uint64_t v9 = v50;
      int8x16_t v16 = (uint32x4_t *)&unk_1E90FF000;
      a2 = v56;
      a1 = v59;
    }
  }
  v17.i64[0] = 0x7F0000007FLL;
  v17.i64[1] = 0x7F0000007FLL;
  int8x16_t v18 = (int8x16_t)vcgtq_u32(v17, v15);
  v19.i64[0] = 0x100000001;
  v19.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v18, v19), v16[55]))) {
    return 0;
  }
  v20.i64[0] = 0x7F0000007FLL;
  v20.i64[1] = 0x7F0000007FLL;
  v21.i64[0] = -1;
  v21.i64[1] = -1;
  int32x4_t v22 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v12, v21), vandq_s8((int8x16_t)v14, v20));
  int8x16_t v23 = (int8x16_t)vaddq_s32(v22, v22);
  int8x16_t v24 = &color_unquant_to_uquant_tables[512 * v9];
  v25.i32[0] = v24[v23.i32[0] | 1];
  v25.i32[1] = v24[v23.i32[1] | 1];
  v25.i64[1] = v24[v23.i32[2] | 1];
  v23.i64[0] = 0xC0000000C0;
  v23.i64[1] = 0xC0000000C0;
  int32x4_t v26 = (int32x4_t)vandq_s8(veorq_s8(v25, (int8x16_t)v22), v23);
  v26.i32[3] = 0;
  {
    int32x4_t v57 = a2;
    int8x16_t v60 = a1;
    int8x16_t v54 = v11;
    int32x4_t v48 = v26;
    int8x16_t v51 = v25;
    int32x4_t v26 = v48;
    int8x16_t v25 = v51;
    int8x16_t v11 = v54;
    int8x16_t v16 = (uint32x4_t *)&unk_1E90FF000;
    int v41 = v40;
    a2 = v57;
    a1 = v60;
    if (v41)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      int32x4_t v26 = v48;
      int8x16_t v25 = v51;
      int8x16_t v11 = v54;
      int8x16_t v16 = (uint32x4_t *)&unk_1E90FF000;
      a2 = v57;
      a1 = v60;
    }
  }
  v27.i64[0] = 0x100000001;
  v27.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vbicq_s8(v27, (int8x16_t)vceqzq_s32(v26)), v16[55]))) {
    return 0;
  }
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  int32x4_t v30 = (int32x4_t)vshlq_u32((uint32x4_t)v25, v29);
  v31.i64[0] = 0x3F0000003FLL;
  v31.i64[1] = 0x3F0000003FLL;
  v32.i64[0] = 0x2000000020;
  v32.i64[1] = 0x2000000020;
  int32x4_t v33 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32(v30, v32) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8((int8x16_t)v30, v31));
  if ((vaddq_s32(vaddq_s32(v33, vdupq_lane_s32(*(int32x2_t *)v33.i8, 1)), vdupq_laneq_s32(v33, 2)).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  int32x4_t v34 = vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v11, v29), (int8x16_t)(*(_OWORD *)&v25 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80))), v33);
  int8x16_t v35 = (int8x16_t)vshrq_n_u32((uint32x4_t)v34, 0x1FuLL);
  {
    int v58 = a2;
    int8x16_t v61 = a1;
    int8x16_t v55 = v11;
    int32x4_t v49 = v34;
    int8x16_t v52 = v25;
    int8x16_t v46 = v35;
    int8x16_t v35 = v46;
    int32x4_t v34 = v49;
    int8x16_t v25 = v52;
    int8x16_t v11 = v55;
    int8x16_t v16 = (uint32x4_t *)&unk_1E90FF000;
    int v43 = v42;
    a2 = v58;
    a1 = v61;
    if (v43)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      int8x16_t v35 = v46;
      int32x4_t v34 = v49;
      int8x16_t v25 = v52;
      int8x16_t v11 = v55;
      int8x16_t v16 = (uint32x4_t *)&unk_1E90FF000;
      a2 = v58;
      a1 = v61;
    }
  }
  v36.i64[0] = 0xFF000000FFLL;
  v36.i64[1] = 0xFF000000FFLL;
  int32x4_t v37 = vcgtq_s32(v34, v36);
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vsubq_s32((int32x4_t)vbicq_s8(v35, (int8x16_t)v37), v37), v16[55]))) {
    return 0;
  }
  *a1 = v11;
  *a2 = v25;
  return 1;
}

uint64_t try_quantize_rgb_blue_contract(_OWORD *a1, _OWORD *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5 = vaddq_f32(a4, vsubq_f32(a4, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a4, (int32x4_t)a4), (int32x4_t)a4)));
  float32x4_t v6 = vaddq_f32(a5, vsubq_f32(a5, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a5, (int32x4_t)a5), (int32x4_t)a5)));
  float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  int8x8_t v8 = (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v5), (int8x16_t)vcgtq_f32(v5, v7)), vorrq_s8((int8x16_t)vcgtq_f32(v6, v7), (int8x16_t)vcltzq_f32(v6))));
  uint64_t v9 = (uint32x4_t *)&unk_1E90FF000;
  {
    int32x4_t v30 = a1;
    float v28 = a2;
    int v27 = a3;
    int8x8_t v29 = v8;
    float32x4_t v25 = v5;
    float32x4_t v26 = v6;
    float32x4_t v5 = v25;
    float32x4_t v6 = v26;
    uint64_t v9 = (uint32x4_t *)&unk_1E90FF000;
    int8x8_t v8 = v29;
    a3 = v27;
    a2 = v28;
    int v24 = v23;
    a1 = v30;
    if (v24)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      float32x4_t v5 = v25;
      float32x4_t v6 = v26;
      uint64_t v9 = (uint32x4_t *)&unk_1E90FF000;
      int8x8_t v8 = v29;
      a3 = v27;
      a1 = v30;
      a2 = v28;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vand_s8(v8, (int8x8_t)0x1000100010001)), v9[55]))) {
    return 0;
  }
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  int32x4_t v11 = vcvtq_s32_f32(vaddq_f32(v5, v10));
  float32x4_t v12 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
  int32x4_t v13 = vsubq_s32(vaddq_s32(v11, v11), vcgeq_f32(vsubq_f32(v5, vcvtq_f32_s32(v11)), v12));
  int32x4_t v14 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
  unsigned int v15 = v14[v13.i32[0]];
  unsigned int v16 = v14[v13.i32[1]];
  unsigned int v17 = v14[v13.i32[2]];
  int32x4_t v18 = vcvtq_s32_f32(vaddq_f32(v6, v10));
  int32x4_t v19 = vsubq_s32(vaddq_s32(v18, v18), vcgeq_f32(vsubq_f32(v6, vcvtq_f32_s32(v18)), v12));
  if (v14[v19.i32[1]] + v14[v19.i32[0]] + v14[v19.i32[2]] <= v16 + v15 + v17) {
    return 0;
  }
  LODWORD(v20) = v14[v19.i32[0]];
  DWORD1(v20) = v14[v19.i32[1]];
  *((void *)&v20 + 1) = v14[v19.i32[2]];
  *(void *)&long long v21 = __PAIR64__(v16, v15);
  *((void *)&v21 + 1) = v17;
  *a1 = v20;
  *a2 = v21;
  return 1;
}

float quantize_rgb(_OWORD *a1, _OWORD *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  float32x4_t v6 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
  float32x4_t v7 = (char *)&color_unquant_to_uquant_tables + 512 * a3 - 2048;
  float32x4_t v8 = (float32x4_t)vdupq_n_s32(0xBE4CCCCD);
  v9.i64[0] = 0xFF000000FFLL;
  v9.i64[1] = 0xFF000000FFLL;
  float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
  do
  {
    int32x4_t v11 = vmaxq_s32(vcvtq_s32_f32(vaddq_f32(a4, v5)), (int32x4_t)0);
    int32x4_t v12 = vsubq_s32(vaddq_s32(v11, v11), vcgeq_f32(vsubq_f32(a4, vcvtq_f32_s32(v11)), v6));
    unsigned int v13 = v7[v12.i32[0]];
    unsigned int v14 = v7[v12.i32[1]];
    unsigned int v15 = v7[v12.i32[2]];
    a4 = vaddq_f32(a4, v8);
    int32x4_t v16 = vminq_s32(vcvtq_s32_f32(vaddq_f32(a5, v5)), v9);
    int32x4_t v17 = vsubq_s32(vaddq_s32(v16, v16), vcgeq_f32(vsubq_f32(a5, vcvtq_f32_s32(v16)), v6));
    a5 = vaddq_f32(a5, v10);
  }
  while (v14 + v13 + v15 > v7[v17.i32[1]]
                          + v7[v17.i32[0]]
                          + v7[v17.i32[2]]);
  LODWORD(v18) = v7[v17.i32[0]];
  DWORD1(v18) = v7[v17.i32[1]];
  *((void *)&v18 + 1) = v7[v17.i32[2]];
  *(void *)&long long v19 = __PAIR64__(v14, v13);
  *((void *)&v19 + 1) = v15;
  *a1 = v19;
  *a2 = v18;
  return *(float *)&v19;
}

unsigned char *quantize_rgbs(unsigned char *result, int a2, int8x16_t a3)
{
  float v3 = fmaxf(0.0038911 * *(float *)a3.i32, 0.0);
  float32x2_t v4 = (float32x2_t)vdup_n_s32(0x437F0000u);
  if ((float)(0.0038911 * *(float *)a3.i32) <= 255.0) {
    float v5 = v3;
  }
  else {
    float v5 = 255.0;
  }
  v6.i32[1] = a3.i32[1];
  v6.i32[0] = vextq_s8(a3, a3, 8uLL).u32[0];
  float32x4_t v7 = (char *)&color_unquant_to_uquant_tables + 512 * (uint64_t)a2 - 2048;
  int v8 = v7[((float)(v5 - (float)(int)(float)(v5 + 0.5)) >= -0.1) | (2 * (int)(float)(v5 + 0.5))];
  float32x2_t v9 = vmul_f32(v6, (float32x2_t)vdup_n_s32(0x3B7F00FFu));
  float32x2_t v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v4), (int8x8_t)v4, (int8x8_t)vmaxnm_f32(v9, 0));
  int32x2_t v11 = vcvt_s32_f32(vadd_f32(v10, (float32x2_t)0x3F0000003F000000));
  int32x2_t v12 = vcge_f32(vsub_f32(v10, vcvt_f32_s32(v11)), (float32x2_t)vdup_n_s32(0xBDCCCCCD));
  int v13 = v7[2 * v11.i32[1] - v12.i32[1]];
  int v14 = v7[2 * v11.i32[0] - v12.i32[0]];
  float v15 = vmuls_lane_f32((float)(0.0038911* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)a3, 2), vaddq_f32((float32x4_t)a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 1))).f32[0])+ 1.0e-10, (float32x4_t)a3, 3)/ (float)((float)(v13 + v8 + v14) + 1.0e-10);
  float v16 = (float)(v15 * 256.0) + 0.5;
  if (v15 <= 0.0) {
    float v16 = 0.5;
  }
  BOOL v17 = v15 == 1.0;
  BOOL v18 = v15 < 1.0;
  float v19 = 256.5;
  if (v18 || v17) {
    float v19 = v16;
  }
  int v20 = (int)v19 & ~((int)v19 >> 31);
  if (v20 >= 255) {
    int v20 = 255;
  }
  *__n128 result = v8;
  result[1] = v13;
  result[2] = v14;
  result[3] = v7[(2 * v20) | 1];
  return result;
}

unsigned char *quantize_hdr_rgb(unsigned char *result, int a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  float32x4_t v5 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  float32x2x2_t v6 = (float32x2x2_t)vminnmq_f32(vmaxnmq_f32(a3, (float32x4_t)0), v5);
  int32x4_t v7 = (int32x4_t)vminnmq_f32(vmaxnmq_f32(a4, (float32x4_t)0), v5);
  if (*(float *)v7.i32 <= *(float *)&v7.i32[1] || *(float *)v7.i32 <= *(float *)&v7.i32[2])
  {
    int8x16_t v10 = (int8x16_t)vrev64q_s32((int32x4_t)v6);
    int8x16_t v11 = (int8x16_t)vrev64q_s32(v7);
    if (*(float *)&v7.i32[1] <= *(float *)&v7.i32[2])
    {
      int8x16_t v10 = vextq_s8(v10, v10, 0xCuLL);
      int8x16_t v11 = vextq_s8(v11, v11, 0xCuLL);
      int v9 = 2;
    }
    else
    {
      v10.i64[1] = (uint64_t)v6.val[1];
      v11.i64[1] = v7.i64[1];
      int v9 = 1;
    }
  }
  else
  {
    int v9 = 0;
    int8x16_t v10 = (int8x16_t)v6;
    int8x16_t v11 = (int8x16_t)v7;
  }
  float v12 = fmaxf(*(float *)v11.i32, 0.0);
  if (*(float *)v11.i32 > 65535.0) {
    float v12 = 65535.0;
  }
  float v13 = v12 - *(float *)&v11.i32[1];
  float v14 = vabds_f32((float)(v12 - (float)(v12 - *(float *)&v11.i32[1])) - (float)(v12 - *(float *)v10.i32), *(float *)&v10.i32[1]);
  float v15 = vabds_f32((float)(v12 - (float)(v12 - *(float *)&v11.i32[2])) - (float)(v12 - *(float *)v10.i32), *(float *)&v10.i32[2]);
  uint64_t v16 = a2 - 4;
  float32x2_t v17 = (float32x2_t)vextq_s8(v10, v10, 4uLL).u64[0];
  float32x2_t v18 = (float32x2_t)vextq_s8(v11, v11, 4uLL).u64[0];
  uint64_t v19 = 7;
  float32x2_t v20 = (float32x2_t)vdup_n_s32(0x477FFF00u);
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0xC77FFF00);
  while (1)
  {
    uint64_t v22 = v19;
    int v23 = (float *)((char *)&quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_cutoffs + 16 * v19);
    float v24 = v23[2];
    BOOL v25 = v13 <= *v23 && (float)(v12 - *(float *)&v11.i32[2]) <= *v23;
    BOOL v26 = v25 && (float)(v12 - *(float *)v10.i32) <= v23[1];
    BOOL v27 = v26 && v14 <= v24;
    if (v27 && v15 <= v24)
    {
      float v29 = quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_scales[v19];
      float v30 = quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_rscales[v19];
      int8x16_t v31 = (_DWORD *)((char *)&quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_bits + 16 * v19);
      unsigned int v32 = (int)(float)((float)(v12 * v29) + 0.5);
      int v33 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v32) | 1u)];
      v4.f32[0] = v30 * (float)(int)(v32 & 0xFFFFFF00 | v33);
      float v34 = fmaxf(v4.f32[0] - *(float *)v10.i32, 0.0);
      float v35 = (float)(v4.f32[0] - *(float *)v10.i32) <= 65535.0 ? v34 : 65535.0;
      unsigned int v36 = (int)(float)((float)(v29 * v35) + 0.5);
      if (1 << v31[2] > (int)v36)
      {
        int v37 = 1 << v31[1];
        unsigned int v38 = 1 << (v31[3] - 1);
        int v39 = (int)(float)((float)(v29 * v35) + 0.5) & 0x3F | (v22 << 7) | (v32 >> 2) & 0x40;
        do
        {
          unsigned __int8 v40 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v39) | 1u)];
          int v41 = v39 & 0xC0;
          v39 -= v41 != (v40 & 0xC0);
        }
        while (v41 != (v40 & 0xC0));
        float32x2_t v4 = (float32x2_t)vdup_lane_s32((int32x2_t)v4, 0);
        float32x2_t v42 = vsub_f32(v4, v18);
        int32x2_t v43 = vcgt_f32(v42, v20);
        int32x2_t v44 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)v43, (int8x8_t)v20, (int8x8_t)vmaxnm_f32(v42, 0)), v29), (float32x2_t)0x3F0000003F000000));
        if (v37 > v44.i32[0] && v37 > v44.i32[1])
        {
          if (v22 > 7) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = ((1 << v22) & 0x5B) != 0 ? ((unsigned __int32)v44.i32[0] >> 6) & 1 : (v32 >> 9) & 1;
          }
          if (v22 > 7)
          {
            int v47 = 0;
          }
          else if (((1 << v22) & 0x5B) != 0)
          {
            int v47 = ((unsigned __int32)v44.i32[1] >> 6) & 1;
          }
          else
          {
            int v47 = ((1 << v22) & 0xA0) != 0 ? (v32 >> 10) & 1 : (v36 >> 6) & 1;
          }
          int v48 = v47 << 6;
          unsigned int v49 = v44.i8[0] & 0x3F | (v46 << 6) & 0xFFFFFF7F | (((v22 >> 1) & 1) << 7);
          do
          {
            unsigned __int8 v50 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v49) | 1u)];
            int v51 = v49 & 0xC0;
            v49 -= v51 != (v50 & 0xC0);
          }
          while (v51 != (v50 & 0xC0));
          int v52 = v48 | v44.i8[4] & 0x3F | (32 * v22) & 0x80;
          do
          {
            int v53 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v52) | 1u)];
            int v54 = v52 & 0xC0;
            v52 -= v54 != (v53 & 0xC0);
          }
          while (v54 != (v53 & 0xC0));
          v55.i32[0] = v50 & 0x3F;
          v55.i32[1] = v53 & 0xFFFFFF3F;
          *(float *)v43.i32 = v30 * (float)(int)(v36 & 0xFFFFFFC0 | v40 & 0x3F);
          float32x2_t v56 = vsub_f32(vsub_f32(vsub_f32(v4, vmul_n_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(void *)&v44 & 0xFFFFFFC0FFFFFFC0), v55)), v30)), (float32x2_t)vdup_lane_s32(v43, 0)), v17);
          int32x2_t v57 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v56, v20), (int8x8_t)v20, (int8x8_t)vmaxnm_f32(v56, v21)), v29), (float32x2_t)0x3F0000003F000000));
          float32x2_t v4 = (float32x2_t)vabs_s32(v57);
          int32x2_t v58 = vcgt_s32(vdup_n_s32(v38), (int32x2_t)v4);
          if (v58.i32[0] & v58.i32[1]) {
            break;
          }
        }
      }
    }
    uint64_t v19 = v22 - 1;
    if (!v22)
    {
      uint64_t v59 = 0;
      int8x16_t v60 = (float *)v81;
      vst2_f32(v60, v6);
      v60 += 4;
      *int8x16_t v60 = v6.val[1].f32[0];
      v81[5] = v7.i32[2];
      do
      {
        float v61 = *(float *)&v81[v59];
        float v62 = fmaxf(v61, 0.0);
        if (v61 <= 65020.0) {
          float v63 = v62;
        }
        else {
          float v63 = *(float *)"";
        }
        *(float *)&v81[v59++] = v63;
      }
      while (v59 != 6);
      for (uint64_t i = 0; i != 4; ++i)
        result[i] = color_unquant_to_uquant_tables[512 * v16
                                                 + 1
                                                 + 2 * (int)(float)((float)(*(float *)&v81[i] * 0.0039062) + 0.5)];
      int8x16_t v65 = (char *)&color_unquant_to_uquant_tables[512 * v16];
      do
      {
        unsigned int v66 = (int)(float)((float)(*(float *)&v81[i] * 0.0019531) + 0.5) ^ 0xFFFFFF80;
        do
        {
          char v67 = v65[(2 * v66) | 1];
          int v68 = v66 & 0xC0;
          v66 -= v68 != (v67 & 0xC0);
        }
        while (v68 != (v67 & 0xC0));
        result[i++] = v67;
      }
      while (i != 6);
      return result;
    }
  }
  switch((int)v22)
  {
    case 0:
    case 2:
      unsigned int v69 = ((unsigned __int32)v57.i32[0] >> 6) & 1;
      goto LABEL_71;
    case 1:
    case 4:
      unsigned int v69 = ((unsigned __int32)v44.i32[0] >> 7) & 1;
      goto LABEL_71;
    case 3:
      unsigned int v69 = (v32 >> 9) & 1;
      goto LABEL_77;
    case 5:
      unsigned int v69 = (v36 >> 7) & 1;
      goto LABEL_77;
    case 6:
    case 7:
      unsigned int v69 = (v32 >> 11) & 1;
      goto LABEL_71;
    default:
      unsigned int v69 = 0;
LABEL_71:
      if (v22 > 7)
      {
        int v70 = 0;
      }
      else if (((1 << v22) & 0xE8) != 0)
      {
LABEL_77:
        int v70 = (v36 >> 6) & 1;
      }
      else
      {
        int v70 = ((unsigned __int32)v57.i32[1] >> 6) & 1;
        if (((1 << v22) & 5) == 0) {
          int v70 = ((unsigned __int32)v44.i32[1] >> 7) & 1;
        }
      }
      if ((v22 | 2) == 6) {
        int32x2_t v71 = (int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(v32), (uint32x2_t)0xFFFFFFF6FFFFFFF7);
      }
      else {
        int32x2_t v71 = vshr_n_s32(v57, 5uLL);
      }
      int v72 = v70 << 6;
      unsigned int v73 = v57.i8[0] & 0x1F | (v69 << 6) | (32 * (v71.i8[0] & 1)) | (v9 << 7);
      int v74 = (v9 << 6) & 0x80;
      do
      {
        unsigned __int8 v75 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v73) | 1u)];
        int v76 = v73 & 0xF0;
        v73 -= v76 != (v75 & 0xF0);
      }
      while (v76 != (v75 & 0xF0));
      int v77 = (32 * (v71.i8[4] & 1)) | v72 | v57.i8[4] & 0x1F | v74;
      int v78 = (char *)&color_unquant_to_uquant_tables[512 * v16];
      do
      {
        char v79 = v78[(2 * v77) | 1];
        int v80 = v77 & 0xF0;
        v77 -= v80 != (v79 & 0xF0);
      }
      while (v80 != (v79 & 0xF0));
      *__n128 result = v33;
      result[1] = v40;
      result[2] = v50;
      result[3] = v53;
      result[4] = v75;
      result[5] = v79;
      break;
  }
  return result;
}

uint64_t try_quantize_alpha_delta(uint64_t a1, uint64_t a2, int a3, __n128 a4, __n128 a5)
{
  unsigned int v5 = (int)(float)(a4.n128_f32[3] + 0.5);
  float32x2x2_t v6 = &color_unquant_to_uquant_tables[512 * a3 - 2048];
  int v7 = v6[(4 * (v5 & 0x7F)) | 1];
  int v8 = v7 | (((v5 >> 7) & 1) << 8);
  int v9 = 2 * (int)(float)(a5.n128_f32[3] + 0.5) - v8;
  if ((v9 - 64) < 0xFFFFFF80) {
    return 0;
  }
  unsigned int v10 = v9 & 0x7F | (((2 * v5) & 0x100) >> 1);
  int v11 = v6[(2 * v10) | 1];
  if ((v10 ^ v11) > 0x3F || (v11 & 0x7F) + v8 + ((v11 << 25 >> 31) & 0xFFFFFF80) > 0x1FF) {
    return 0;
  }
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a2 + 12) = v11;
  return 1;
}

void pack_color_endpoints()
{
  __assert_rtn("pack_color_endpoints", "astcenc_color_quantize.cpp", 1918, "QUANT_6 <= quant_level && quant_level <= QUANT_256");
}

double astc::rand_init(astc *this, unint64_t *a2)
{
  double result = -2.40530959e284;
  *(_OWORD *)this = xmmword_1889B5710;
  return result;
}

uint64_t astc::rand(astc *this, unint64_t *a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = v2 + *(void *)this;
  uint64_t v4 = v2 ^ *(void *)this;
  *(void *)this = __ROR8__(*(void *)this, 40) ^ (v4 << 16) ^ v4;
  *((void *)this + 1) = __ROR8__(v4, 27);
  return v3;
}

uint64_t astcenc_config_init(unsigned int a1, int a2, int a3, unsigned int a4, int a5, uint64_t a6, float a7)
{
  if ((float)((float)(2.51 + 12583000.0) + -12583000.0) != 3.0) {
    return 2;
  }
  *(_OWORD *)(a6 + 92) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  if (a4 <= 1) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = a4;
  }
  *(_OWORD *)a6 = 0uLL;
  *(_OWORD *)(a6 + 16) = 0uLL;
  uint64_t result = validate_block_size(a2, a3, v13);
  if (!result)
  {
    *(_DWORD *)(a6 + 8) = a2;
    *(_DWORD *)(a6 + 12) = a3;
    *(_DWORD *)(a6 + 16) = v13;
    int v15 = a3 * a2 * v13;
    float v16 = logf((float)v15);
    uint64_t result = 6;
    if (a7 >= 0.0 && a7 <= 100.0)
    {
      uint64_t v19 = 0;
      float32x2_t v20 = (float *)&preset_configs_low;
      if (v15 < 0x40) {
        float32x2_t v20 = (float *)&preset_configs_mid;
      }
      float32x2_t v21 = (float *)&preset_configs_high;
      if (v15 >= 25) {
        float32x2_t v21 = v20;
      }
      astcenc_config_init(astcenc_profile,unsigned int,unsigned int,unsigned int,float,unsigned int,astcenc_config *)::preset_configs = (uint64_t)v21;
      uint64_t v22 = v21;
      float v23 = v16 / 2.3026;
      do
      {
        if (*v22 >= a7) {
          break;
        }
        ++v19;
        v22 += 18;
      }
      while (v19 != 6);
      uint64_t v24 = v19 - 1;
      if (!v19) {
        uint64_t v24 = 0;
      }
      if (v24 == v19)
      {
        BOOL v25 = &v21[18 * v19];
        *(_OWORD *)(a6 + 44) = *(_OWORD *)(v25 + 1);
        *(_OWORD *)(a6 + 60) = *(_OWORD *)(v25 + 5);
        *(void *)(a6 + 76) = *(void *)(v25 + 9);
        float v26 = v25[11] + (float)(v23 * -35.0);
        float v27 = v25[12] + (float)(v23 * -19.0);
        if (v26 > v27) {
          float v27 = v26;
        }
        int v28 = *((_DWORD *)v25 + 13);
        *(float *)(a6 + 84) = v27;
        *(_DWORD *)(a6 + 88) = v28;
        float32x2_t v29 = *(float32x2_t *)(v25 + 14);
        *(float32x2_t *)(a6 + 92) = v29;
        float v30 = v25[17];
        *(float *)(a6 + 100) = v25[16];
      }
      else
      {
        *(float *)v17.i32 = v21[18 * v19];
        float v31 = v21[18 * v24];
        *(float *)v18.i32 = *(float *)v17.i32 - v31;
        if ((float)(*(float *)v17.i32 - v31) <= 0.0) {
          astcenc_config_init();
        }
        *(float *)v17.i32 = (float)(*(float *)v17.i32 - a7) / *(float *)v18.i32;
        *(float *)v18.i32 = (float)(a7 - v31) / *(float *)v18.i32;
        unsigned int v32 = &v21[18 * v24];
        int v33 = &v21[18 * v19];
        float32x2_t v34 = (float32x2_t)vdupq_lane_s32(v18, 0).u64[0];
        float32x2_t v35 = (float32x2_t)vdupq_lane_s32(v17, 0).u64[0];
        v36.i64[0] = 0x3F0000003F000000;
        v36.i64[1] = 0x3F0000003F000000;
        *(int32x4_t *)(a6 + 44) = vcvtq_s32_f32(vaddq_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(*(uint32x4_t *)(v33 + 1)), *(float *)v18.i32), vcvtq_f32_u32(*(uint32x4_t *)(v32 + 1)), *(float *)v17.i32), v36));
        *(int32x4_t *)(a6 + 60) = vcvtq_s32_f32(vaddq_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(*(uint32x4_t *)(v33 + 5)), *(float *)v18.i32), vcvtq_f32_u32(*(uint32x4_t *)(v32 + 5)), *(float *)v17.i32), v36));
        *(int32x2_t *)(a6 + 76) = vcvt_s32_f32(vadd_f32(vmla_f32(vmul_f32(v34, vcvt_f32_u32(*(uint32x2_t *)(v33 + 9))), v35, vcvt_f32_u32(*(uint32x2_t *)(v32 + 9))), (float32x2_t)0x3F0000003F000000));
        float32x2_t v37 = vmla_n_f32(vmla_f32(vmul_f32(v34, *(float32x2_t *)(v33 + 11)), v35, *(float32x2_t *)(v32 + 11)), (float32x2_t)0xC1980000C20C0000, v23);
        float v27 = v37.f32[1];
        if (v37.f32[0] > v37.f32[1]) {
          float v27 = v37.f32[0];
        }
        float v38 = (float)(*(float *)v18.i32 * v33[13]) + (float)(v32[13] * *(float *)v17.i32);
        *(float *)(a6 + 84) = v27;
        *(float *)(a6 + 88) = v38;
        float32x2_t v29 = vmla_f32(vmul_f32(v34, *(float32x2_t *)(v33 + 14)), v35, *(float32x2_t *)(v32 + 14));
        *(float32x2_t *)(a6 + 92) = v29;
        float v39 = v33[17];
        float v40 = v32[17];
        *(float *)(a6 + 100) = (float)(*(float *)v18.i32 * v33[16]) + (float)(v32[16] * *(float *)v17.i32);
        float v30 = (float)(*(float *)v18.i32 * v39) + (float)(v40 * *(float *)v17.i32);
      }
      *(float *)(a6 + 104) = v30;
      __asm { FMOV            V2.4S, #1.0 }
      *(_OWORD *)(a6 + 20) = _Q2;
      *(void *)(a6 + 36) = 0;
      *(_DWORD *)a6 = a1;
      if (a1 >= 2)
      {
        if (a1 - 2 > 1) {
          return 5;
        }
        *(_DWORD *)(a6 + 84) = 1148829696;
        *(_DWORD *)(a6 + 104) = 0;
        float v27 = 999.0;
      }
      LODWORD(_Q2) = a5 & 0xFFFFFF82;
      *(int8x8_t *)&_Q2 = vcnt_s8(*(int8x8_t *)&_Q2);
      if (vaddlv_u8(*(uint8x8_t *)&_Q2)) {
        return 8;
      }
      LODWORD(_Q2) = a5 & 0x41;
      if ((vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)&_Q2)) & 0xFFFE) != 0)
      {
        return 8;
      }
      else
      {
        if (a5)
        {
          int v46 = *(_DWORD *)(a6 + 44);
          if ((v46 + 1) < 4) {
            int v47 = v46 + 1;
          }
          else {
            int v47 = 4;
          }
          *(_DWORD *)(a6 + 44) = v47;
          *(void *)(a6 + 24) = 0;
          __asm { FMOV            V2.2S, #1.5 }
          *(float32x2_t *)(a6 + 92) = vmul_f32(v29, _D2);
          *(_DWORD *)(a6 + 100) = 1065185444;
          *(float *)(a6 + 84) = v27 * 1.03;
        }
        else if ((a5 & 0x40) != 0)
        {
          *(_DWORD *)(a6 + 40) = 1084227584;
          *(_DWORD *)(a6 + 32) = 1092616192;
        }
        else if ((a5 & 8) != 0)
        {
          *(void *)(a6 + 20) = 0x3FA9EB853F2CCCCDLL;
          *(_DWORD *)(a6 + 28) = 1048408228;
        }
        uint64_t result = 0;
        *(_DWORD *)(a6 + 4) = a5;
      }
    }
  }
  return result;
}

uint64_t validate_block_size(int a1, int a2, unsigned int a3)
{
  if (a3 > 1)
  {
    if (!is_legal_3d_block_size(a1, a2, a3)) {
      return 4;
    }
  }
  else if ((is_legal_2d_block_size(a1, a2) & 1) == 0)
  {
    return 4;
  }
  if (a2 * a1 * a3 >= 0xD9) {
    return 10;
  }
  else {
    return 0;
  }
}

uint64_t astcenc_context_alloc(uint64_t a1, int a2)
{
  LODWORD(memptr) = 1075880919;
  if ((float)((float)(2.51 + 12583000.0) + -12583000.0) != 3.0) {
    return 2;
  }
  if (a2) {
    operator new();
  }
  return 3;
}

void astcenc_context::~astcenc_context(astcenc_context *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 496);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 568));
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 9);
  std::mutex::~mutex((std::mutex *)((char *)this + 360));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 296));
  std::mutex::~mutex((std::mutex *)((char *)this + 224));
}

uint64_t astcenc_context_free(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    free(*(void **)(result + 128));
    free(*(void **)(v1 + 112));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 568));
    std::mutex::~mutex((std::mutex *)(v1 + 496));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 432));
    std::mutex::~mutex((std::mutex *)(v1 + 360));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 296));
    std::mutex::~mutex((std::mutex *)(v1 + 224));
    JUMPOUT(0x18C11C0E0);
  }
  return result;
}

uint64_t astcenc_compress_image(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v54 = v7;
  unsigned __int8 v50 = v3;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(v2 + 4) & 0x10) != 0) {
    return 9;
  }
  int v8 = v4;
  v9.i64[0] = 0x500000005;
  v9.i64[1] = 0x500000005;
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(*v4, v9)))) {
    return 7;
  }
  uint64_t v11 = v2;
  unsigned int v12 = *(_DWORD *)(v2 + 108);
  if (v12 <= v6) {
    return 3;
  }
  if (16
     * (*(_DWORD *)(v2 + 8) + *v3 - 1)
     / *(_DWORD *)(v2 + 8)
     * ((*(_DWORD *)(v2 + 12) + v3[1] - 1)
      / *(_DWORD *)(v2 + 12))
     * ((*(_DWORD *)(v2 + 16) + v3[2] - 1)
      / *(_DWORD *)(v2 + 16)) > v5)
    return 1;
  unsigned int v51 = v6;
  if (v12 == 1)
  {
    *(_WORD *)(v2 + 288) = 0;
    atomic_store(0, (unsigned int *)(v2 + 344));
    *(void *)(v2 + 348) = 0;
    *(_WORD *)(v2 + 424) = 0;
    atomic_store(0, (unsigned int *)(v2 + 480));
    *(void *)(v2 + 484) = 0;
  }
  unsigned int v49 = (int32x4_t *)v4;
  if (*(_DWORD *)(v2 + 36))
  {
    unsigned int v13 = operator new(0x20uLL);
    void *v13 = &unk_1ED4EF0D0;
    v13[1] = v11;
    v13[2] = v50;
    v13[3] = v8;
    v59[3] = v13;
    ParallelManager::init(v11 + 224, (uint64_t)v59);
    std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](v59);
    long long v14 = *(_OWORD *)(v11 + 152);
    v60[0] = *(_OWORD *)(v11 + 136);
    v60[1] = v14;
    v60[2] = *(_OWORD *)(v11 + 168);
    uint64_t v61 = *(void *)(v11 + 184);
    operator new[]();
  }
  ParallelManager::wait((ParallelManager *)(v2 + 224));
  int v15 = *(unsigned __int8 **)(v11 + 112);
  unsigned int v47 = *(_DWORD *)v11;
  bzero(v60, 0xFA0uLL);
  int v16 = *v15;
  int v17 = v15[1];
  int v46 = v15;
  int v18 = v15[2];
  char v62 = v17 * v16 * v18;
  int v19 = *v50;
  int v57 = v16;
  unsigned int v20 = (v16 + *v50 - 1) / v16;
  int v45 = v50[1];
  int v55 = v17;
  int v53 = (v17 + v45 - 1) / v17;
  unsigned int v21 = v53 * v20;
  int v56 = v18;
  int v22 = v53 * v20 * ((v18 + v50[2] - 1) / v18);
  long long v67 = *(_OWORD *)(v11 + 20);
  uint64_t v23 = *(void *)(v11 + 128);
  int32x2_t v43 = (ParallelManager *)(v11 + 360);
  ParallelManager::init((std::mutex *)(v11 + 360), v22);
  __n128 v24 = (__n128)vmvnq_s8((int8x16_t)vceqq_s32(*v49, (int32x4_t)xmmword_18898C3A0));
  v24.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v24);
  v24.n128_u16[0] = vmaxv_u16((uint16x4_t)v24.n128_u64[0]);
  int v48 = load_image_block;
  if ((v24.n128_u8[0] & 1) == 0)
  {
    int v48 = load_image_block;
    if ((v47 & 0xFFFFFFFE) != 2 && v56 == 1)
    {
      BOOL v25 = load_image_block;
      if (!v50[3]) {
        BOOL v25 = (void (*)(unsigned __int32, int *, int8x16_t *, unsigned __int8 *, int, int, int, _DWORD *, int32x4_t))load_image_block_fast_ldr;
      }
      int v48 = v25;
    }
  }
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 480), 0x10u, memory_order_relaxed);
  unsigned int v27 = *(_DWORD *)(v11 + 488);
  int v28 = v27 - add_explicit;
  if (v27 - add_explicit >= 0x10) {
    int v28 = 16;
  }
  if (v27 > add_explicit && v28)
  {
    uint64_t v52 = v23 + 231744 * v51;
    do
    {
      unsigned int v44 = v28;
      unsigned int v29 = v28 + add_explicit;
      if (add_explicit < v28 + add_explicit)
      {
        do
        {
          unsigned int v30 = add_explicit % v21 / v20;
          unsigned int v31 = add_explicit % v21 % v20;
          int v32 = v31 * v57;
          if (v56 != 1) {
            goto LABEL_40;
          }
          int v33 = *(_DWORD *)(v11 + 36);
          if (!v33) {
            goto LABEL_40;
          }
          int v34 = v32 + v57;
          if (v19 < v32 + v57) {
            int v34 = v19;
          }
          int v35 = v30 * v55 + v55;
          if (v45 < v35) {
            int v35 = v45;
          }
          if ((int)(v30 * v55) >= v35) {
            goto LABEL_39;
          }
          char v36 = 0;
          v24.n128_f32[0] = 0.9 / (float)((float)((2 * v33 - 2 + v57) * (2 * v33 - 2 + v55)) * 255.0);
          int v37 = v30 * v55;
          do
          {
            int v38 = v31 * v57;
            if (v32 < v34)
            {
              do
              {
                if (*(float *)(*(void *)(v11 + 120) + 4 * (v38 + v37 * v19)) > v24.n128_f32[0])
                {
                  char v36 = 1;
                  int v37 = v35;
                  int v38 = v34;
                }
                ++v38;
              }
              while (v38 < v34);
            }
            ++v37;
          }
          while (v37 < v35);
          if ((v36 & 1) == 0)
          {
LABEL_39:
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            char v68 = 1;
          }
          else
          {
LABEL_40:
            ((void (*)(void, int *, _OWORD *, unsigned __int8 *, __n128))v48)(v47, v50, v60, v46, v24);
            if ((*(unsigned char *)(v11 + 4) & 4) != 0)
            {
              *(float32x2_t *)&long long v39 = vmul_n_f32(*(float32x2_t *)(v11 + 20), *((float *)&v66 + 3) * 0.000015259);
              *((float *)&v39 + 2) = (float)(*((float *)&v66 + 3) * 0.000015259) * *(float *)(v11 + 28);
              HIDWORD(v39) = *(_DWORD *)(v11 + 32);
              long long v67 = v39;
            }
          }
          compress_block(v11, (uint64_t)v60, v54 + (int)(16 * (v31 + (v30 + add_explicit / v21 * v53) * v20)), v52);
          ++add_explicit;
        }
        while (add_explicit != v29);
      }
      ParallelManager::complete_task_assignment(v43, v44);
      unsigned int v40 = atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 480), 0x10u, memory_order_relaxed);
      unsigned int v41 = *(_DWORD *)(v11 + 488);
      int v28 = v41 - v40;
      if (v41 - v40 >= 0x10) {
        int v28 = 16;
      }
      if (v41 > v40) {
        unsigned int add_explicit = v40;
      }
      else {
        unsigned int add_explicit = 0;
      }
    }
    while (v41 > v40 && v28 != 0);
  }
  ParallelManager::wait(v43);
  v58[0] = &unk_1ED4EF128;
  v58[1] = v11;
  v58[3] = v58;
  ParallelManager::term((uint64_t)v43, (uint64_t)v58);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v58);
  return 0;
}

void sub_1888DA8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void ParallelManager::init(uint64_t a1, uint64_t a2)
{
  std::mutex::lock((std::mutex *)a1);
  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    *(_DWORD *)(a1 + 128) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
    *(unsigned char *)(a1 + 64) = 1;
  }
  std::mutex::unlock((std::mutex *)a1);
}

void sub_1888DA964(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ParallelManager::wait(ParallelManager *this)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)this;
  *(void *)&v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)this);
  if (*((_DWORD *)this + 31) == *((_DWORD *)this + 32)) {
    goto LABEL_4;
  }
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 72), &v2);
  while (*((_DWORD *)this + 31) != *((_DWORD *)this + 32));
  if (v2.__owns_) {
LABEL_4:
  }
    std::mutex::unlock(v2.__m_);
}

void ParallelManager::term(uint64_t a1, uint64_t a2)
{
  std::mutex::lock((std::mutex *)a1);
  if (!*(unsigned char *)(a1 + 65))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    *(unsigned char *)(a1 + 65) = 1;
  }

  std::mutex::unlock((std::mutex *)a1);
}

void sub_1888DAA68(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ParallelManager::init(std::mutex *this, int a2)
{
  std::mutex::lock(this);
  if (!LOBYTE(this[1].__m_.__sig))
  {
    LODWORD(this[2].__m_.__sig) = a2;
    LOBYTE(this[1].__m_.__sig) = 1;
  }

  std::mutex::unlock(this);
}

void ParallelManager::complete_task_assignment(ParallelManager *this, int a2)
{
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)this;
  *(void *)&v6.__owns_ = 1;
  std::mutex::lock((std::mutex *)this);
  int v4 = *((_DWORD *)this + 32);
  int v5 = *((_DWORD *)this + 31) + a2;
  *((_DWORD *)this + 31) = v5;
  if (v5 != v4
    || (std::unique_lock<std::mutex>::unlock(&v6),
        std::condition_variable::notify_all((std::condition_variable *)((char *)this + 72)),
        v6.__owns_))
  {
    std::mutex::unlock(v6.__m_);
  }
}

void sub_1888DAB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

char *astcenc_get_error_string(unsigned int a1)
{
  if (a1 > 0xA) {
    return 0;
  }
  else {
    return off_1E53CF6D0[a1];
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x18C11C0E0);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (!this->__owns_)
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    JUMPOUT(0x1888DAC44);
  }
  std::mutex::unlock(this->__m_);
  this->__owns_ = 0;
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::~__func()
{
}

__n128 std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  std::unique_lock<std::mutex> v2 = (char *)operator new(0x20uLL);
  *(void *)std::unique_lock<std::mutex> v2 = &unk_1ED4EF0D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED4EF0D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::operator()()
{
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::target_type()
{
}

void *std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  std::unique_lock<std::mutex> v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1ED4EF128;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED4EF128;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v2 + 120);
  if (result)
  {
    uint64_t result = MEMORY[0x18C11C0C0](result, 0x1000C8052888210);
    uint64_t v2 = *(void *)(a1 + 8);
  }
  *(void *)(v2 + 120) = 0;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void astcenc_config_init()
{
}

void get_2d_percentile_table()
{
}

uint64_t is_legal_2d_block_size(int a1, int a2)
{
  int v2 = a2 | (a1 << 8);
  uint64_t result = 1;
  if (v2 > 2564)
  {
    BOOL v4 = (v2 - 2565) > 5 || ((1 << (v2 - 5)) & 0x2B) == 0;
    if (v4 && v2 != 3082 && v2 != 3084) {
      return 0;
    }
  }
  else if (v2 > 2052)
  {
    unsigned int v5 = v2 - 2053;
    if (v5 > 3 || v5 == 2) {
      return 0;
    }
  }
  else if ((v2 - 1284) >= 2 && (v2 - 1541) >= 2 && v2 != 1028)
  {
    return 0;
  }
  return result;
}

uint64_t is_legal_3d_block_size(int a1, int a2, int a3)
{
  int v3 = (a2 << 8) | (a1 << 16) | a3;
  uint64_t result = 1;
  if (v3 > 328963)
  {
    BOOL v5 = (v3 - 328964) >= 2 && (v3 - 394757) >= 2;
    int v6 = 394501;
LABEL_8:
    if (v5 && v3 != v6) {
      return 0;
    }
    return result;
  }
  if (v3 > 263170)
  {
    BOOL v5 = (v3 - 263171) >= 2;
    int v6 = 328708;
    goto LABEL_8;
  }
  if (v3 != 197379 && v3 != 262915) {
    return 0;
  }
  return result;
}

uint64_t compute_ideal_endpoint_formats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v391 = v24;
  uint64_t v419 = *MEMORY[0x1E4F143B8];
  uint64_t v393 = *v13;
  if (!*v13) {
    compute_ideal_endpoint_formats();
  }
  BOOL v25 = (float32x4_t *)v14;
  unsigned int v380 = v18;
  uint64_t v376 = v15;
  uint64_t v377 = v16;
  unsigned int v379 = v19;
  unsigned int v378 = v17;
  int8x8_t v26 = *(int8x8_t *)(v14 + 3553);
  v26.i32[0] = v26.u8[0];
  v26.i8[4] = *(unsigned char *)(v14 + 3769);
  int8x8_t v389 = v26;
  memset(v418, 0, sizeof(v418));
  memset(v413, 0, sizeof(v413));
  v388 = v13;
  compute_avgs_and_dirs_3_comp_rgb(v13, v14, (uint64_t)v413, 0.0, v20, v21, v22, v23);
  int v28 = v388;
  uint64_t v29 = 0;
  unsigned int v30 = v25 + 162;
  unsigned int v31 = v25 + 54;
  int v32 = v25 + 108;
  int v33 = v388 + 112;
  float32x4_t v34 = (float32x4_t)vdupq_n_s32(0x3F13CD3Au);
  v35.i64[0] = 0x400000004;
  v35.i64[1] = 0x400000004;
  char v36 = (uint32x4_t *)&unk_1E90FF000;
  v37.i64[0] = 0x100000001;
  v37.i64[1] = 0x100000001;
  do
  {
    int v38 = (float32x4_t *)&v413[2 * v29];
    float32x4_t v39 = v38[1];
    int8x16_t v40 = (int8x16_t)vmulq_f32(v39, v39);
    *(float32x2_t *)v40.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), *(float32x2_t *)v40.i8);
    int32x2_t v41 = (int32x2_t)vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8);
    float32x4_t v42 = (float32x4_t)xmmword_1889B1B00;
    if (*(float *)v41.i32 != 0.0) {
      float32x4_t v42 = vdivq_f32(v39, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v41, 0)));
    }
    float32x4_t v43 = *v38;
    int8x16_t v44 = (int8x16_t)vmulq_f32(v43, v43);
    *(float32x2_t *)v44.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), *(float32x2_t *)v44.i8);
    int32x2_t v45 = (int32x2_t)vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8);
    float32x4_t v46 = (float32x4_t)xmmword_1889B1B00;
    if (*(float *)v45.i32 != 0.0) {
      float32x4_t v46 = vdivq_f32(v43, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v45, 0)));
    }
    unint64_t v47 = *((unsigned __int8 *)v28 + v29 + 4);
    if (!*((unsigned char *)v28 + v29 + 4)) {
      compute_ideal_endpoint_formats();
    }
    unint64_t v48 = 0;
    float32x4_t v49 = vmulq_f32(v43, v34);
    float32x4_t v50 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))), 0);
    float32x4_t v51 = v25[221];
    v50.i32[3] = 0;
    int32x4_t v52 = (int32x4_t)vaddq_f32(v43, vmulq_f32(v50, (float32x4_t)xmmword_1889B9140));
    float32x4_t v53 = vmulq_f32(v43, v42);
    float32x4_t v54 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))), 0);
    v54.i32[3] = 0;
    int32x4_t v55 = (int32x4_t)vsubq_f32(v43, vmulq_f32(v42, v54));
    v43.i32[0] = 1190133760;
    if (!v25[235].i8[9]) {
      v43.f32[0] = 65535.0;
    }
    float32x4_t v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0);
    float32x4_t v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 0);
    float32x4_t v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1);
    float32x4_t v59 = (float32x4_t)vdupq_laneq_s32(v55, 2);
    float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 0);
    float32x4_t v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 1);
    float32x4_t v62 = (float32x4_t)vdupq_laneq_s32(v52, 2);
    int32x4_t v63 = vdupq_n_s32(v47);
    float32x4_t v64 = 0uLL;
    int32x4_t v65 = (int32x4_t)xmmword_18898C3A0;
    float32x4_t v66 = 0uLL;
    float32x4_t v67 = 0uLL;
    int8x16_t v68 = 0uLL;
    float32x4_t v69 = 0uLL;
    do
    {
      float32x4_t v397 = (float32x4_t)v68;
      v27.i32[0] = *(_DWORD *)&v33[v48 / 2];
      uint16x4_t v70 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v27.f32).u64[0];
      int8x16_t v71 = (int8x16_t)vcgtq_s32(v63, v65);
      float32x4_t v72 = (float32x4_t)vmovl_u16(v70);
      v73.i64[0] = v72.u32[2];
      v73.i64[1] = v72.u32[3];
      float32x4_t v74 = v73;
      v73.i64[1] = v72.u32[1];
      uint64_t v75 = v74.i64[1];
      uint64_t v76 = v72.u32[0];
      uint64_t v77 = v74.i64[0];
      v78.i32[0] = v30->i32[v72.u32[0]];
      v78.i32[1] = v30->i32[v72.u32[1]];
      v78.i32[2] = v30->i32[v74.i64[0]];
      v72.i32[0] = v25->i32[v72.u32[0]];
      v72.i32[1] = v25->i32[v72.u32[1]];
      v72.i32[2] = v25->i32[v74.i64[0]];
      v74.i32[0] = v31->i32[v76];
      v78.i32[3] = v30->i32[v74.i64[1]];
      v74.i32[1] = v31->i32[v73.i64[1]];
      char v79 = &v31->i32[v74.i64[1]];
      v72.i32[3] = v25->i32[v74.i64[1]];
      v74.i32[2] = v31->i32[v77];
      v74.i32[3] = *v79;
      float32x4_t v80 = vsubq_f32(v78, v56);
      v78.i32[0] = v32->i32[v76];
      v78.i32[1] = v32->i32[v73.i64[1]];
      v78.i32[2] = v32->i32[v77];
      v78.i32[3] = v32->i32[v75];
      float32x4_t v81 = vaddq_f32(vaddq_f32(vmulq_n_f32(v72, v42.f32[0]), vmulq_lane_f32(v74, *(float32x2_t *)v42.f32, 1)), vmulq_laneq_f32(v78, v42, 2));
      float32x4_t v394 = vaddq_f32(v69, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v80, v80), v71));
      float32x4_t v82 = vsubq_f32(vaddq_f32(v57, vmulq_n_f32(v81, v42.f32[0])), v72);
      float32x4_t v83 = vsubq_f32(vaddq_f32(v58, vmulq_lane_f32(v81, *(float32x2_t *)v42.f32, 1)), v74);
      float32x4_t v84 = vsubq_f32(vaddq_f32(v59, vmulq_laneq_f32(v81, v42, 2)), v78);
      float32x4_t v85 = vaddq_f32(vaddq_f32(vmulq_n_f32(v72, v46.f32[0]), vmulq_lane_f32(v74, *(float32x2_t *)v46.f32, 1)), vmulq_laneq_f32(v78, v46, 2));
      float32x4_t v86 = vsubq_f32(vmulq_n_f32(v85, v46.f32[0]), v72);
      float32x4_t v87 = vsubq_f32(vmulq_lane_f32(v85, *(float32x2_t *)v46.f32, 1), v74);
      float32x4_t v88 = vsubq_f32(vmulq_laneq_f32(v85, v46, 2), v78);
      float32x4_t v89 = vaddq_f32(vmulq_n_f32(vmulq_f32(v82, v82), v51.f32[0]), vmulq_lane_f32(vmulq_f32(v83, v83), *(float32x2_t *)v51.f32, 1));
      float32x4_t v90 = vmulq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v72, v34), vmulq_f32(v74, v34)), vmulq_f32(v78, v34)), v34);
      int8x16_t v91 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v88, v88), v51, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v86, v86), v51.f32[0]), vmulq_lane_f32(vmulq_f32(v87, v87), *(float32x2_t *)v51.f32, 1)));
      float32x4_t v92 = vsubq_f32(vaddq_f32(v60, v90), v72);
      float32x4_t v93 = vsubq_f32(vaddq_f32(v61, v90), v74);
      int8x16_t v94 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v84, v84), v51, 2), v89);
      int32x4_t v65 = vaddq_s32(v65, v35);
      float32x4_t v67 = vaddq_f32(v67, (float32x4_t)vandq_s8(v91, v71));
      float32x4_t v95 = vsubq_f32(vaddq_f32(v62, v90), v78);
      float32x4_t v96 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v95, v95), v51, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v92, v92), v51.f32[0]), vmulq_lane_f32(vmulq_f32(v93, v93), *(float32x2_t *)v51.f32, 1))), v71);
      float32x4_t v97 = vsubq_f32(v90, v72);
      float32x4_t v98 = vsubq_f32(v90, v74);
      float32x4_t v99 = vsubq_f32(v90, v78);
      float32x4_t v69 = v394;
      float32x4_t v398 = vaddq_f32(v397, (float32x4_t)vandq_s8(v94, v71));
      int8x16_t v68 = (int8x16_t)v398;
      float32x4_t v66 = vaddq_f32(v66, v96);
      float32x4_t v27 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v99, v99), v51, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v97, v97), v51.f32[0]), vmulq_lane_f32(vmulq_f32(v98, v98), *(float32x2_t *)v51.f32, 1))), v71);
      float32x4_t v64 = vaddq_f32(v64, v27);
      v48 += 4;
    }
    while (v48 < v47);
    int v100 = (float32x4_t *)(v391 + 16 * v29);
    float32x4_t v101 = v100[1];
    float32x4_t v102 = v100[5];
    {
      float32x4_t v386 = v34;
      float32x4_t v381 = v66;
      float32x4_t v375 = v101;
      float32x4_t v374 = v102;
      float32x4_t v102 = v374;
      float32x4_t v101 = v375;
      float32x4_t v69 = v394;
      int8x16_t v68 = (int8x16_t)v398;
      float32x4_t v66 = v381;
      v37.i64[0] = 0x100000001;
      v37.i64[1] = 0x100000001;
      char v36 = (uint32x4_t *)&unk_1E90FF000;
      v35.i64[0] = 0x400000004;
      v35.i64[1] = 0x400000004;
      float32x4_t v34 = v386;
      int v28 = v388;
      if (v116)
      {
        mask(vmask4)::shift = xmmword_18898C3A0;
        float32x4_t v102 = v374;
        float32x4_t v101 = v375;
        float32x4_t v69 = v394;
        int8x16_t v68 = (int8x16_t)v398;
        float32x4_t v66 = v381;
        v37.i64[0] = 0x100000001;
        v37.i64[1] = 0x100000001;
        char v36 = (uint32x4_t *)&unk_1E90FF000;
        v35.i64[0] = 0x400000004;
        v35.i64[1] = 0x400000004;
        float32x4_t v34 = v386;
        int v28 = v388;
      }
    }
    float32x2_t v103 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL), *(float32x2_t *)v69.f32);
    float32x2_t v104 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), *(float32x2_t *)v68.i8);
    float32x2_t v105 = vpadd_f32(v104, v104);
    float32x2_t v106 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), *(float32x2_t *)v67.f32);
    float32x2_t v107 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL), *(float32x2_t *)v66.f32);
    float32x2_t v108 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL), *(float32x2_t *)v64.f32);
    float32x4_t v109 = vsubq_f32(v102, v101);
    BOOL v110 = (~vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x45F5C199u), vmaxq_f32(v109, vsubq_f32((float32x4_t)0, v109))), v37), v36[55])) & 7) == 0;
    *(float32x2_t *)v111.f32 = vsub_f32((float32x2_t)vzip1_s32((int32x2_t)vpadd_f32(v106, v106), (int32x2_t)vpadd_f32(v107, v107)), (float32x2_t)vdup_lane_s32((int32x2_t)v105, 0));
    uint32x4_t v112 = (float32x4_t *)((char *)v418 + 20 * v29);
    v111.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(vpadd_f32(v103, v103).f32[0], v51, 3)), vsub_f32(vpadd_f32(v108, v108), v105).u32[0]);
    *uint32x4_t v112 = vmulq_f32(v111, (float32x4_t)xmmword_1889B9150);
    v112[1].i8[0] = v110;
    float v113 = 30720.0;
    if (!v25[235].i8[9]) {
      float v113 = 65535.0;
    }
    BOOL v114 = v25[218].f32[3] != v113 || v25[222].i8[0] == 0;
    char v115 = v114;
    if (v25[220].f32[3] != v113) {
      char v115 = 1;
    }
    v112[1].i8[1] = v115;
    ++v29;
    v33 += 108;
  }
  while (v29 != v393);
  int8x8_t v399 = (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v389, (int8x8_t)0xFF000000FFLL));
  bzero(v413, 0x540uLL);
  int8x16_t v117 = v388;
  uint64_t v118 = 0;
  float32x4_t v119 = 0uLL;
  memset(v412, 0, sizeof(v412));
  float32x4_t v120 = v25[221];
  float32x4_t v121 = vaddq_f32(v120, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v120.f32, 1));
  unsigned __int32 v122 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 2), v121).u32[0];
  *(int8x8_t *)v121.f32 = vbsl_s8(v399, (int8x8_t)vdup_n_s32(0x477FFF00u), (int8x8_t)vdup_n_s32(0x47700000u));
  int32x4_t v123 = vzip1q_s32((int32x4_t)v121, (int32x4_t)v121);
  v123.i32[2] = v121.i32[0];
  float32x4_t v384 = (float32x4_t)v123;
  float32x4_t v387 = v120;
  float v124 = v120.f32[3];
  if (v399.i8[4]) {
    char v125 = 14;
  }
  else {
    char v125 = 15;
  }
  __int8 v383 = v399.i8[0];
  v126.i64[0] = 0xB0B0B0B0B0B0B0BLL;
  v126.i8[8] = v125;
  v126.i8[9] = v125;
  v126.i8[10] = v125;
  v126.i8[11] = v125;
  v126.i8[12] = v125;
  v126.i8[13] = v125;
  int8x16_t v127 = (float *)&v414;
  unint64_t v128 = (char *)&v412[2] + 3;
  float v129 = (float *)&v413[4] + 3;
  float v130 = (char *)&v412[1] + 3;
  v126.i8[14] = v125;
  v126.i8[15] = v125;
  float v131 = 0.5;
  int8x16_t v382 = v126;
  float v385 = *(float *)&v122;
  do
  {
    v390 = v130;
    v395 = v129;
    v400 = v127;
    int v132 = &v413[21 * v118];
    uint64_t v133 = (uint64_t)v117 + v118;
    float32x2_t v134 = (float32x4_t *)(v391 + 16 * v118);
    float32x4_t v135 = v134[1];
    float32x4_t v136 = v134[5];
    float32x4_t v137 = vmaxnmq_f32(vsubq_f32(v135, v384), v119);
    float32x4_t v138 = vmaxnmq_f32(vsubq_f32(v136, v384), v119);
    float32x4_t v139 = vminnmq_f32(v135, v119);
    float32x4_t v140 = vminnmq_f32(v136, v119);
    float32x4_t v141 = vmulq_f32(v140, v140);
    float32x4_t v142 = vmulq_f32(v387, vaddq_f32(vmulq_f32(v138, v138), vaddq_f32(vmulq_f32(v137, v137), vaddq_f32(vmulq_f32(v139, v139), v141))));
    float32x4_t v143 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2);
    v138.f32[0] = v131 * vaddq_f32(v143, vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).f32[0];
    v143.i8[0] = *(unsigned char *)(v133 + 4);
    float v144 = (float)v143.u32[0];
    float v145 = v138.f32[0] * (float)v143.u32[0];
    float v146 = vmuls_lane_f32(v131, v142, 3) * (float)v143.u32[0];
    if (v383)
    {
      memset_pattern16(v132, &xmmword_1889B5450, 0x40uLL);
      uint64_t v148 = 0;
      *(int32x4_t *)((char *)v412 + 84 * v118) = vdupq_n_s32(0xC080600u);
      float32x2_t v149 = (float *)v418 + 5 * v118;
      float v150 = 0.625;
      if (*((unsigned char *)v149 + 17))
      {
        float v151 = v131;
      }
      else
      {
        float v150 = 1.0;
        float v151 = 1.0;
      }
      if (*((unsigned char *)v149 + 16)) {
        float v152 = v131;
      }
      else {
        float v152 = 1.0;
      }
      float v153 = 0.25;
      if (!*((unsigned char *)v149 + 16)) {
        float v153 = 1.0;
      }
      float v154 = *((float *)v418 + 5 * v118);
      float v156 = v149[2];
      float v155 = v149[3];
      int v157 = v390;
      int v158 = v395;
      char v159 = v395;
      int v160 = v400;
      do
      {
        if ((unint64_t)(v148 + 4) > 0x12) {
          float v152 = 1.0;
        }
        float v161 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::baseline_quant_error[v148];
        if ((unint64_t)(v148 + 4) > 0x12) {
          float v153 = 1.0;
        }
        float v162 = (float)(v385 * v144) * v161;
        float v163 = (float)((float)(v124 * v144) + (float)(v385 * v144)) * v161;
        *int v157 = 12;
        float v164 = v146 + (float)(v145 + (float)((float)(v150 * v163) * v152));
        float v165 = v146 + (float)(v145 + (float)(v163 + v154));
        if (v165 < (float)((float)(v145 + (float)((float)(v151 * v162) * v153)) + v155))
        {
          char v166 = 10;
        }
        else
        {
          float v165 = (float)(v145 + (float)((float)(v151 * v162) * v153)) + v155;
          char v166 = 8;
        }
        *(v157 - 1) = v166;
        float v167 = (float)(v145 + v162) + v155;
        float v168 = (float)(v146 + (float)(v145 + v163)) + v156;
        *(v159 - 1) = v165;
        *char v159 = v164;
        if ((float)(v167 + v154) >= v168)
        {
          char v169 = 4;
        }
        else
        {
          float v168 = v167 + v154;
          char v169 = 6;
        }
        *(v157 - 2) = v169;
        *(v159 - 3) = v167 + v156;
        *(v159 - 2) = v168;
        *(v157 - 3) = 0;
        ++v148;
        v159 += 4;
        v157 += 4;
      }
      while (v148 != 17);
    }
    else
    {
      float32x4_t v170 = v134[5];
      v170.i32[3] = v170.i32[0];
      float v171 = fmaxf(vminvq_f32(v170), 0.0);
      LODWORD(v172) = HIDWORD(v134[5].i64[0]);
      BOOL v173 = v136.f32[0] > v136.f32[1];
      BOOL v174 = v136.f32[0] > v136.f32[2];
      if (v136.f32[1] > v136.f32[2]) {
        uint64_t v175 = 1;
      }
      else {
        uint64_t v175 = 2;
      }
      if (v172 <= v136.f32[2]) {
        float v172 = v136.f32[2];
      }
      BOOL v176 = !v173 || !v174;
      if (v173 && v174) {
        uint64_t v177 = 0;
      }
      else {
        uint64_t v177 = v175;
      }
      float v178 = (float *)((unint64_t)&v402 | (4 * v177));
      if (!v176) {
        float v172 = v136.f32[0];
      }
      float32x4_t v402 = v135;
      v141.f32[0] = v172 - *v178;
      int v179 = (int)(float)(v172 - v171);
      int v180 = (int)v141.f32[0];
      BOOL v181 = v179 < 0x2000;
      BOOL v182 = v179 < 2048;
      BOOL v183 = v179 < 1024;
      BOOL v184 = (int)v141.f32[0] < 2048 && v179 < 0x2000;
      BOOL v185 = v180 < 2048 && v179 < 2048;
      BOOL v186 = v180 < 2048 && v179 < 1024;
      BOOL v187 = v180 < 0x2000 && v179 < 0x2000;
      BOOL v188 = v180 < 0x2000 && v179 < 2048;
      BOOL v189 = v179 < 4096;
      if (v180 >= 0x2000) {
        BOOL v189 = 0;
      }
      BOOL v190 = v179 < 0x8000;
      BOOL v191 = v180 < 0x2000 && v179 < 0x8000;
      BOOL v192 = v179 < 0x4000;
      float32x4_t v193 = vsubq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.f32, 0));
      v193.i32[3] = 0;
      float32x4_t v194 = v135;
      v194.i32[3] = 0;
      float32x4_t v195 = vsubq_f32(v193, v194);
      int v196 = (int)vmaxvq_f32(vmaxq_f32(v195, vsubq_f32(v119, v195)));
      if (v180 >= 0x2000) {
        BOOL v192 = 0;
      }
      BOOL v197 = v180 < 0x4000;
      if (v190 && v197) {
        uint64_t v198 = 4;
      }
      else {
        uint64_t v198 = 5;
      }
      if (v181 && v197) {
        uint64_t v199 = 3;
      }
      else {
        uint64_t v199 = v198;
      }
      BOOL v200 = v180 < 1024;
      if (v182 && v197) {
        uint64_t v199 = 2;
      }
      BOOL v201 = v180 < 4096;
      if (v182 && v200) {
        uint64_t v199 = 1;
      }
      if (v192 && v196 < 0x2000) {
        uint64_t v202 = 0;
      }
      else {
        uint64_t v202 = 8;
      }
      BOOL v203 = v196 < 4096;
      if (v191 && v203) {
        uint64_t v202 = 1;
      }
      if (v189 && v203) {
        uint64_t v202 = 2;
      }
      if (v187 && v196 < 2048) {
        uint64_t v202 = 3;
      }
      BOOL v204 = v196 < 512;
      if (v184 && v204) {
        uint64_t v205 = 4;
      }
      else {
        uint64_t v205 = v202;
      }
      if (v188 && v196 < 1024) {
        uint64_t v205 = 5;
      }
      if (v185 && v196 < 256) {
        uint64_t v206 = 6;
      }
      else {
        uint64_t v206 = v205;
      }
      BOOL v114 = !v186 || !v204;
      uint64_t v207 = 7;
      if (v114) {
        uint64_t v207 = v206;
      }
      if (v183 && v201) {
        uint64_t v208 = 0;
      }
      else {
        uint64_t v208 = v199;
      }
      float v209 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::rgbo_error_scales[v208];
      float v210 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::rgb_error_scales[v207];
      float v211 = (float)((float)(v136.f32[2] + vaddv_f32(*(float32x2_t *)v136.f32)) * 0.33333)
           - (float)(0.33333
                   * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0]);
      memset_pattern16(v132, &xmmword_1889B5450, 0x80uLL);
      uint64_t v212 = 0;
      uint64_t v213 = 0x202020202020202;
      uint64_t v214 = 0x707070707070707;
      int8x16_t v215 = v382;
      unint64_t v216 = vextq_s8(v215, v215, 8uLL).u64[0];
      int8x16_t v217 = (char *)v412 + 84 * v118;
      vst4_s8(v217, *(int8x8x4_t *)&v213);
      float v218 = flt_1889B9168[v211 < 3968.0];
      BOOL v219 = v211 < 960.0;
      float v131 = 0.5;
      if (v219) {
        float v218 = 0.002;
      }
      int v220 = (float *)v418 + 5 * v118;
      float v222 = v220[2];
      float v221 = v220[3];
      float v223 = v220[1];
      int v160 = v400;
      int32x4_t v224 = v400;
      int v158 = v395;
      do
      {
        float v225 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::baseline_quant_error[v212 + 4]
             * v144;
        float v226 = (float)(v385 * v225) + (float)(v385 * v225);
        int8x16x2_t v227 = &v128[v212 * 4];
        *int8x16x2_t v227 = v125;
        *(v227 - 1) = 11;
        *(v224 - 1) = v221 + (float)(v145 + (float)(v226 * (float)(v210 * 0.01)));
        *int32x4_t v224 = v146 + (float)(v145 + (float)(v226 + (float)((float)(v124 * v225) + (float)(v124 * v225))));
        *(v224 - 3) = (float)(v221 + (float)(v145 + (float)(v226 * v218))) + v222;
        *(v224 - 2) = (float)(v221 + (float)(v145 + (float)(v226 * (float)(v209 * 0.0015)))) + v223;
        *(_WORD *)(v227 - 3) = 1794;
        ++v212;
        v224 += 4;
      }
      while (v212 != 13);
    }
    ++v118;
    int8x16_t v127 = v160 + 84;
    v128 += 84;
    float v129 = v158 + 84;
    float v130 = v390 + 84;
    int8x16_t v117 = v388;
    float32x4_t v119 = 0uLL;
  }
  while (v118 != v393);
  uint64_t v228 = a13;
  uint64_t v229 = a13 + 157120;
  uint64_t v230 = a13 + 165312;
  uint64_t v231 = a13 + 167360;
  uint64_t v232 = v380 & 0xFFFFFFFC;
  int32x4_t v233 = vdupq_n_s32(0x7149F2CAu);
  *(int32x4_t *)(v229 + 4 * v232) = v233;
  *(_DWORD *)(v230 + v232) = 0;
  *(_DWORD *)(v231 + v232) = 0;
  unsigned int v234 = v379;
  uint64_t v235 = (v379 - 1) & 0xFFFFFFFC;
  uint64_t v396 = a13 + 157120;
  *(int32x4_t *)(v229 + 4 * v235) = v233;
  *(_DWORD *)(v230 + v235) = 0;
  *(_DWORD *)(v231 + v235) = 0;
  switch((int)v393)
  {
    case 1:
      unsigned int v236 = a9;
      if (v380 >= v379)
      {
        uint64_t v406 = 0;
        uint64_t v405 = 0;
        uint64_t v407 = 0;
        int v408 = 0;
        int v404 = -1;
        unsigned int v240 = v378;
        uint64_t v242 = a11;
        uint64_t v241 = a12;
        uint64_t v243 = a10;
        uint64_t v244 = a13 + 157120;
        goto LABEL_274;
      }
      uint64_t v237 = v380;
      unsigned int v238 = -1;
      float v239 = 1.0e30;
      unsigned int v240 = v378;
      uint64_t v242 = a11;
      uint64_t v241 = a12;
      uint64_t v243 = a10;
      uint64_t v244 = a13 + 157120;
      do
      {
        if (*(float *)(v377 + 4 * v237) >= 1.0e30)
        {
          *(_DWORD *)(v396 + 4 * v237) = 1900671690;
        }
        else
        {
          uint64_t v245 = 0;
          int v246 = 0;
          uint64_t v247 = *(char *)(v376 + v237);
          unsigned int v248 = &quant_mode_table[v247 + 128];
          float v249 = 1.0e30;
          do
          {
            int v251 = *v248;
            v248 += 128;
            unsigned __int8 v250 = v251;
            if (v251 >= 4)
            {
              uint64_t v252 = (float *)&v413[v250];
              if (v252[v245] < v249)
              {
                int v246 = v245;
                float v249 = v252[v245];
              }
            }
            ++v245;
          }
          while (v245 != 4);
          uint64_t v253 = a13 + 4 * v237;
          int v254 = quant_mode_table[128 * (uint64_t)v246 + 128 + v247];
          *(unsigned char *)(v230 + v237) = quant_mode_table[128 * (uint64_t)v246 + 128 + v247];
          *(unsigned char *)(v253 + 169408) = 0;
          if (v254 > 3) {
            *(unsigned char *)(v253 + 169408) = *((unsigned char *)v412 + 4 * v254 + v246);
          }
          float v255 = v249 + *(float *)(v377 + 4 * v237);
          *(float *)(v396 + 4 * v237) = v255;
          *(unsigned char *)(v231 + v237) = *(unsigned char *)(v230 + v237);
          if (v255 < v239)
          {
            unsigned int v238 = v237;
            float v239 = v255;
          }
        }
        ++v237;
      }
      while (v237 != v379);
      goto LABEL_272;
    case 2:
      unsigned int v392 = v380 & 0xFFFFFFFC;
      bzero(&v404, 0x24CuLL);
      uint64_t v256 = 0;
      memset(v403, 0, 294);
      unsigned int v236 = a9;
      do
      {
        memset_pattern16((char *)&v404 + v256, &xmmword_1889B5450, 0x1CuLL);
        v256 += 28;
      }
      while (v256 != 588);
      long long v257 = (char *)&v412[6] + 4;
      long long v258 = (float *)&v415;
      unint64_t v259 = (char *)&v403[3] + 9;
      int v260 = &v409;
      uint64_t v261 = 4;
      unsigned int v240 = v378;
      uint64_t v242 = a11;
      uint64_t v241 = a12;
      uint64_t v243 = a10;
      do
      {
        uint64_t v262 = 0;
        long long v263 = v260;
        long long v264 = v259;
        do
        {
          uint64_t v265 = 0;
          int v266 = v262;
          long long v267 = v264;
          do
          {
            if (v266 >= 0) {
              unsigned int v268 = v266;
            }
            else {
              unsigned int v268 = -v266;
            }
            if (v268 <= 1)
            {
              float v269 = fminf(*((float *)&v413[v261] + v262) + v258[v265], 1.0e10);
              if (v269 <= *(float *)&v263[v265])
              {
                *(float *)&v263[v265] = v269;
                *(v267 - 1) = *((unsigned char *)v412 + 4 * v261 + v262);
                *long long v267 = v257[v265];
              }
            }
            ++v265;
            v267 += 2;
            --v266;
          }
          while (v265 != 4);
          ++v262;
          v264 += 2;
          ++v263;
        }
        while (v262 != 4);
        ++v261;
        v257 += 4;
        v258 += 4;
        v259 += 14;
        v260 += 7;
      }
      while (v261 != 21);
      if (v380) {
        compute_ideal_endpoint_formats();
      }
      if (!v379)
      {
        unsigned int v238 = -1;
        goto LABEL_270;
      }
      uint64_t v270 = 0;
      unsigned int v238 = -1;
      float v271 = 1.0e30;
      uint64_t v244 = a13 + 157120;
      do
      {
        if (*(float *)(v377 + 4 * v270) >= 1.0e30)
        {
          *(_DWORD *)(v396 + 4 * v270) = 1900671690;
        }
        else
        {
          uint64_t v272 = 0;
          int v273 = 0;
          uint64_t v274 = *(char *)(v376 + v270);
          long long v275 = (_WORD *)(a13 + 4 * v270 + 169408);
          long long v276 = &quant_mode_table[v274 + 256];
          float v277 = 1.0e30;
          do
          {
            int v279 = *v276;
            v276 += 128;
            unsigned __int8 v278 = v279;
            if (v279 < 4) {
              break;
            }
            v280 = &v404 + 7 * v278;
            if (*(float *)&v280[v272] < v277)
            {
              float v277 = *(float *)&v280[v272];
              int v273 = v272 + 2;
            }
            ++v272;
          }
          while (v272 != 7);
          v281 = &quant_mode_table[128 * (uint64_t)v273 + v274];
          int v282 = *v281;
          LOBYTE(v281) = v281[2];
          *(unsigned char *)(v230 + v270) = v282;
          *(unsigned char *)(v231 + v270) = (_BYTE)v281;
          if (v282 <= 3) {
            *long long v275 = 0;
          }
          else {
            *long long v275 = *((_WORD *)v403 + 7 * v282 + v273 - 2);
          }
          float v283 = v277 + *(float *)(v377 + 4 * v270);
          *(float *)(v396 + 4 * v270) = v283;
          if (v283 < v271)
          {
            unsigned int v238 = v270;
            float v271 = v283;
          }
        }
        ++v270;
      }
      while (v270 != v379);
      break;
    case 3:
      unsigned int v392 = v380 & 0xFFFFFFFC;
      bzero(&v404, 0x348uLL);
      bzero(v403, 0x276uLL);
      for (uint64_t i = 0; i != 840; i += 40)
        memset_pattern16((char *)&v404 + i, &xmmword_1889B5450, 0x28uLL);
      long long v285 = (char *)&v412[11] + 8;
      long long v286 = (float *)&v416;
      long long v287 = &v410;
      long long v288 = (char *)&v403[7] + 10;
      uint64_t v289 = 4;
      do
      {
        uint64_t v290 = 0;
        long long v291 = v288;
        long long v292 = v287;
        do
        {
          uint64_t v293 = 0;
          long long v294 = v291;
          long long v295 = v292;
          do
          {
            if ((int)v290 >= (int)v293) {
              int v296 = v293;
            }
            else {
              int v296 = v290;
            }
            if ((int)v290 <= (int)v293) {
              int v297 = v293;
            }
            else {
              int v297 = v290;
            }
            if (v297 - v296 <= 1)
            {
              uint64_t v298 = 0;
              long long v299 = v294;
              do
              {
                if ((int)v298 >= v296) {
                  int v300 = v296;
                }
                else {
                  int v300 = v298;
                }
                if ((int)v298 <= v297) {
                  int v301 = v297;
                }
                else {
                  int v301 = v298;
                }
                if (v301 - v300 <= 1)
                {
                  float v302 = fminf((float)(*((float *)&v413[v289] + v290) + *((float *)&v413[v289 + 21] + v293)) + v286[v298], 1.0e10);
                  if (v302 <= *(float *)&v295[v298])
                  {
                    *(float *)&v295[v298] = v302;
                    *(v299 - 2) = *((unsigned char *)v412 + 4 * v289 + v290);
                    *(v299 - 1) = *((unsigned char *)&v412[5] + 4 * v289 + v293 + 4);
                    *long long v299 = v285[v298];
                  }
                }
                ++v298;
                v299 += 3;
              }
              while (v298 != 4);
            }
            ++v293;
            ++v295;
            v294 += 3;
          }
          while (v293 != 4);
          ++v290;
          ++v292;
          v291 += 3;
        }
        while (v290 != 4);
        ++v289;
        v285 += 4;
        v286 += 4;
        v287 += 10;
        v288 += 30;
      }
      while (v289 != 21);
      if (v380) {
        compute_ideal_endpoint_formats();
      }
      if (!v379)
      {
        unsigned int v238 = -1;
        unsigned int v240 = v378;
        uint64_t v242 = a11;
        uint64_t v241 = a12;
        unsigned int v236 = a9;
        uint64_t v243 = a10;
        goto LABEL_270;
      }
      uint64_t v303 = 0;
      unsigned int v238 = -1;
      float v304 = 1.0e30;
      unsigned int v240 = v378;
      uint64_t v242 = a11;
      uint64_t v241 = a12;
      unsigned int v236 = a9;
      uint64_t v243 = a10;
      uint64_t v244 = a13 + 157120;
      do
      {
        if (*(float *)(v377 + 4 * v303) >= 1.0e30)
        {
          *(_DWORD *)(v396 + 4 * v303) = 1900671690;
        }
        else
        {
          uint64_t v305 = 0;
          int v306 = 0;
          uint64_t v307 = *(char *)(v376 + v303);
          uint64_t v308 = a13 + 4 * v303 + 169408;
          long long v309 = &quant_mode_table[v307 + 384];
          float v310 = 1.0e30;
          do
          {
            int v312 = *v309;
            v309 += 128;
            unsigned __int8 v311 = v312;
            if (v312 < 4) {
              break;
            }
            uint64_t v313 = &v404 + 10 * v311;
            if (*(float *)&v313[v305] < v310)
            {
              float v310 = *(float *)&v313[v305];
              int v306 = v305 + 3;
            }
            ++v305;
          }
          while (v305 != 7);
          v314 = &quant_mode_table[128 * (uint64_t)v306 + v307];
          int v315 = *v314;
          LOBYTE(v314) = v314[5];
          *(unsigned char *)(v230 + v303) = v315;
          *(unsigned char *)(v231 + v303) = (_BYTE)v314;
          if (v315 <= 3)
          {
            *(unsigned char *)(a13 + 4 * v303 + 169410) = 0;
            *(_WORD *)(a13 + 4 * v303 + 169408) = 0;
          }
          else
          {
            v316 = (char *)v403 + 30 * v315 + 3 * v306 - 9;
            *(_WORD *)uint64_t v308 = *(_WORD *)v316;
            *(unsigned char *)(v308 + 2) = v316[2];
          }
          float v317 = v310 + *(float *)(v377 + 4 * v303);
          *(float *)(v396 + 4 * v303) = v317;
          if (v317 < v304)
          {
            unsigned int v238 = v303;
            float v304 = v317;
          }
        }
        ++v303;
      }
      while (v303 != v379);
      break;
    case 4:
      unsigned int v392 = v380 & 0xFFFFFFFC;
      bzero(&v404, 0x444uLL);
      bzero(v403, 0x444uLL);
      for (uint64_t j = 0; j != 1092; j += 52)
        memset_pattern16((char *)&v404 + j, &xmmword_1889B5450, 0x34uLL);
      v319 = (char *)&v412[16] + 12;
      v320 = (float *)&v417;
      v321 = &v411;
      v322 = (char *)&v403[13] + 3;
      uint64_t v323 = 4;
      do
      {
        uint64_t v324 = 0;
        v325 = v322;
        v401 = v321;
        do
        {
          uint64_t v326 = 0;
          v327 = v325;
          v328 = v321;
          do
          {
            if ((int)v324 >= (int)v326) {
              int v329 = v326;
            }
            else {
              int v329 = v324;
            }
            if ((int)v324 <= (int)v326) {
              int v330 = v326;
            }
            else {
              int v330 = v324;
            }
            if (v330 - v329 <= 1)
            {
              uint64_t v331 = 0;
              v332 = v327;
              v333 = v328;
              do
              {
                if ((int)v331 >= v329) {
                  int v334 = v329;
                }
                else {
                  int v334 = v331;
                }
                if ((int)v331 <= v330) {
                  int v335 = v330;
                }
                else {
                  int v335 = v331;
                }
                if (v335 - v334 <= 1)
                {
                  uint64_t v336 = 0;
                  v337 = v332;
                  do
                  {
                    if ((int)v336 >= v334) {
                      int v338 = v334;
                    }
                    else {
                      int v338 = v336;
                    }
                    if ((int)v336 <= v335) {
                      int v339 = v335;
                    }
                    else {
                      int v339 = v336;
                    }
                    if (v339 - v338 <= 1)
                    {
                      float v340 = fminf((float)((float)(*((float *)&v413[v323] + v324) + *((float *)&v413[v323 + 21] + v326))+ *((float *)&v413[v323 + 42] + v331))+ v320[v336], 1.0e10);
                      if (v340 <= *(float *)&v333[v336])
                      {
                        *(float *)&v333[v336] = v340;
                        *(v337 - 3) = *((unsigned char *)v412 + 4 * v323 + v324);
                        *(v337 - 2) = *((unsigned char *)&v412[5] + 4 * v323 + v326 + 4);
                        *(v337 - 1) = *((unsigned char *)&v412[10] + 4 * v323 + v331 + 8);
                        unsigned char *v337 = v319[v336];
                      }
                    }
                    ++v336;
                    v337 += 4;
                  }
                  while (v336 != 4);
                }
                ++v331;
                ++v333;
                v332 += 4;
              }
              while (v331 != 4);
            }
            ++v326;
            ++v328;
            v327 += 4;
          }
          while (v326 != 4);
          ++v324;
          ++v321;
          v325 += 4;
        }
        while (v324 != 4);
        ++v323;
        v319 += 4;
        v320 += 4;
        v321 = v401 + 13;
        v322 += 52;
      }
      while (v323 != 21);
      if (v380) {
        compute_ideal_endpoint_formats();
      }
      unsigned int v234 = v379;
      if (v379)
      {
        uint64_t v341 = 0;
        unsigned int v238 = -1;
        float v342 = 1.0e30;
        unsigned int v240 = v378;
        uint64_t v242 = a11;
        uint64_t v241 = a12;
        unsigned int v236 = a9;
        uint64_t v243 = a10;
        uint64_t v228 = a13;
        uint64_t v230 = a13 + 165312;
        uint64_t v231 = a13 + 167360;
        uint64_t v244 = a13 + 157120;
        do
        {
          if (*(float *)(v377 + 4 * v341) >= 1.0e30)
          {
            *(_DWORD *)(v396 + 4 * v341) = 1900671690;
          }
          else
          {
            uint64_t v343 = 0;
            int v344 = 0;
            uint64_t v345 = *(char *)(v376 + v341);
            v346 = &quant_mode_table[v345 + 512];
            float v347 = 1.0e30;
            do
            {
              int v349 = *v346;
              v346 += 128;
              unsigned __int8 v348 = v349;
              if (v349 < 4) {
                break;
              }
              v350 = &v404 + 13 * v348;
              if (*(float *)&v350[v343] < v347)
              {
                float v347 = *(float *)&v350[v343];
                int v344 = v343 + 4;
              }
              ++v343;
            }
            while (v343 != 6);
            v351 = &quant_mode_table[128 * (uint64_t)v344 + v345];
            int v352 = *v351;
            LOBYTE(v351) = v351[8];
            *(unsigned char *)(a13 + 165312 + v341) = v352;
            *(unsigned char *)(a13 + 167360 + v341) = (_BYTE)v351;
            if (v352 <= 3) {
              *(_DWORD *)(a13 + 4 * v341 + 169408) = 0;
            }
            else {
              *(_DWORD *)(a13 + 4 * v341 + 169408) = *((_DWORD *)&v403[-1] + 13 * v352 + v344);
            }
            float v353 = v347 + *(float *)(v377 + 4 * v341);
            *(float *)(v396 + 4 * v341) = v353;
            if (v353 < v342)
            {
              unsigned int v238 = v341;
              float v342 = v353;
            }
          }
          ++v341;
        }
        while (v341 != v379);
      }
      else
      {
        unsigned int v238 = -1;
        unsigned int v240 = v378;
        uint64_t v242 = a11;
        uint64_t v241 = a12;
        unsigned int v236 = a9;
        uint64_t v243 = a10;
        uint64_t v228 = a13;
        uint64_t v230 = a13 + 165312;
        uint64_t v231 = a13 + 167360;
LABEL_270:
        uint64_t v244 = a13 + 157120;
      }
      break;
    default:
      compute_ideal_endpoint_formats();
  }
  LODWORD(v232) = v392;
LABEL_272:
  uint64_t v406 = 0;
  uint64_t v405 = 0;
  uint64_t v407 = 0;
  int v408 = 0;
  int v404 = v238;
  if ((v238 & 0x80000000) == 0) {
    *(_DWORD *)(v244 + 4 * v238) = 1900671690;
  }
LABEL_274:
  if (v240 >= 2)
  {
    int8x16_t v354 = vorrq_s8((int8x16_t)vdupq_n_s32(v232), (int8x16_t)xmmword_18898C3A0);
    uint64_t v355 = 1;
    int32x4_t v356 = vdupq_n_s32(0x7149F2CAu);
    v357.i64[0] = 0x400000004;
    v357.i64[1] = 0x400000004;
    do
    {
      v358.i64[0] = -1;
      v358.i64[1] = -1;
      float32x4_t v359 = (float32x4_t)v356;
      if (v232 < v234)
      {
        unsigned int v360 = v232;
        float32x4_t v147 = (float32x4_t)v354;
        float32x4_t v359 = (float32x4_t)v356;
        do
        {
          float32x4_t v361 = *(float32x4_t *)(v244 + 4 * v360);
          int8x16_t v362 = (int8x16_t)vcgtq_f32(v359, v361);
          float32x4_t v359 = (float32x4_t)vbslq_s8(v362, (int8x16_t)v361, (int8x16_t)v359);
          int8x16_t v358 = vbslq_s8(v362, (int8x16_t)v147, v358);
          float32x4_t v147 = (float32x4_t)vaddq_s32((int32x4_t)v147, v357);
          v360 += 4;
        }
        while (v360 < v234);
      }
      v147.f32[0] = vminvq_f32(v359);
      float32x4_t v147 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.f32, 0);
      int8x16_t v363 = (int8x16_t)vceqq_f32(v359, v147);
      unsigned int v364 = vminvq_s32((int32x4_t)vorrq_s8(vandq_s8(v358, v363), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v363) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))));
      *(&v404 + v355) = v364;
      if ((v364 & 0x80000000) != 0) {
        break;
      }
      *(_DWORD *)(v244 + 4 * v364) = 1900671690;
      ++v355;
    }
    while (v355 != v240);
  }
  unsigned int v365 = 0;
  if (v240)
  {
    if (v393 <= 1) {
      uint64_t v366 = 1;
    }
    else {
      uint64_t v366 = v393;
    }
    while (1)
    {
      uint64_t v367 = *(&v404 + v365);
      if ((v367 & 0x80000000) != 0) {
        break;
      }
      *(_DWORD *)(v243 + 4 * v365) = v367;
      *(_DWORD *)(v242 + 4 * v365) = *(unsigned __int8 *)(v230 + v367);
      int v368 = *(unsigned __int8 *)(v231 + v367);
      *(_DWORD *)(v241 + 4 * v365) = v368;
      if ((*(_DWORD *)(v242 + 4 * v365) - 4) >= 0x11) {
        compute_ideal_endpoint_formats();
      }
      if ((v368 - 4) > 0x10) {
        compute_ideal_endpoint_formats();
      }
      v369 = (char *)(v228 + 169408 + 4 * v367);
      uint64_t v370 = v366;
      v371 = v236;
      do
      {
        char v372 = *v369++;
        *v371++ = v372;
        --v370;
      }
      while (v370);
      ++v365;
      v236 += 4;
      if (v365 == v240)
      {
        unsigned int v365 = v240;
        break;
      }
    }
  }
  if (v365 >= v240) {
    return v240;
  }
  else {
    return v365;
  }
}

void compute_ideal_endpoint_formats()
{
}

{
  __assert_rtn("compute_error_squared_rgb_single_partition", "astcenc_pick_best_endpoint_format.cpp", 90, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1248, "partition_count == 4");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1339, "quant_level_mod[i] >= QUANT_6 && quant_level_mod[i] <= QUANT_256");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1338, "quant_level[i] >= QUANT_6 && quant_level[i] <= QUANT_256");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1188, "start_block_mode == 0");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1221, "start_block_mode == 0");
}

{
  __assert_rtn("compute_ideal_endpoint_formats", "astcenc_pick_best_endpoint_format.cpp", 1255, "start_block_mode == 0");
}

void prepare_angular_tables(void)
{
  uint64_t v0 = 0;
  uint64_t v1 = &sin_table;
  int v2 = &cos_table;
  do
  {
    uint64_t v3 = 0;
    ++v0;
    BOOL v4 = (float *)v2;
    BOOL v5 = (float *)v1;
    do
    {
      __float2 v6 = __sincosf_stret((float)((float)v0 * 0.099733) * (float)v3);
      *BOOL v5 = v6.__sinval;
      v5 += 32;
      *BOOL v4 = v6.__cosval;
      v4 += 32;
      ++v3;
    }
    while (v3 != 64);
    ++v1;
    ++v2;
  }
  while (v0 != 32);
}

void compute_angular_endpoints_1plane(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = 8;
  if (a1) {
    uint64_t v5 = 4;
  }
  unsigned int v6 = *(_DWORD *)(a2 + v5);
  if (!v6) {
    compute_angular_endpoints_1plane();
  }
  uint64_t v9 = 0;
  int v10 = ~(-1 << (a4 + 1));
  uint64_t v11 = (_WORD *)(a2 + 66);
  unsigned int v12 = (float *)(a5 + 204224);
  unsigned int v13 = (unsigned __int8 *)(a2 + 594);
  unint64_t v14 = (unint64_t)v6 << 6;
  do
  {
    if ((*v11 & (unsigned __int16)v10) != 0)
    {
      unsigned int v15 = *((unsigned __int8 *)v11 - 2);
      if (v15 >= 7) {
        unsigned int v15 = 7;
      }
      if (v15 >= a4) {
        int v16 = a4;
      }
      else {
        int v16 = v15;
      }
      compute_angular_endpoints_for_quant_levels(*v13, (const float *)(a3 + 4 * (v9 & 0xFFFFFFC0)), v16, v12, v12 + 696);
    }
    v9 += 64;
    v11 += 3;
    v12 += 8;
    v13 += 129888;
  }
  while (v14 != v9);
  uint64_t v17 = 20;
  if (a1) {
    uint64_t v17 = 16;
  }
  uint64_t v18 = *(unsigned int *)(a2 + v17);
  if (!v18) {
    compute_angular_endpoints_1plane();
  }
  unsigned int v19 = (float *)(a5 + 187840);
  double v20 = (unsigned char *)(a2 + 11304949);
  double v21 = (unsigned char *)(a2 + 11304949);
  do
  {
    char v22 = *v21;
    v21 += 6;
    if (v22) {
      compute_angular_endpoints_1plane();
    }
    unint64_t v23 = *(v20 - 2);
    if (v23 > 7)
    {
      *unsigned int v19 = 0.0;
      float v25 = 1.0;
    }
    else
    {
      uint64_t v24 = a5 + 32 * *(v20 - 3) + 4 * v23;
      *unsigned int v19 = *(float *)(v24 + 204224);
      float v25 = *(float *)(v24 + 207008);
    }
    v19[2048] = v25;
    ++v19;
    double v20 = v21;
    --v18;
  }
  while (v18);
}

void compute_angular_endpoints_for_quant_levels(unsigned int a1, const float *a2, int a3, float *a4, float *a5)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = steps_for_quant_level[a3];
  memset(v104, 0, sizeof(v104));
  if (!a1) {
    compute_angular_endpoints_for_quant_levels();
  }
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = a1;
  float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x427C0000u);
  memset(__b, 0, 256);
  v13.i64[0] = 0x3F0000003FLL;
  v13.i64[1] = 0x3F0000003FLL;
  float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x4B400000u);
  do
  {
    __b[v9 / 4] = vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(*(float32x4_t *)&a2[v9], v12), v14), v13);
    v10 += 4;
    v9 += 4;
  }
  while (v10 < a1);
  unint64_t v15 = 0;
  uint64_t v16 = 4 * a1;
  int8x16_t v17 = (int8x16_t)vdupq_n_s32(0x3FC90FDBu);
  float32x4_t v18 = 0uLL;
  float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3E8F5C29u);
  __asm { FMOV            V22.4S, #1.0 }
  float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  v26.i64[0] = 0x8000000080000000;
  v26.i64[1] = 0x8000000080000000;
  float32x4_t v27 = (uint32x4_t *)&unk_1E90FF000;
  float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
  do
  {
    uint64_t v29 = 0;
    float32x4_t v30 = 0uLL;
    float32x4_t v31 = 0uLL;
    do
    {
      uint64_t v32 = (uint64_t)*(int *)((char *)__b + v29) << 7;
      float32x4_t v31 = vaddq_f32(v31, *(float32x4_t *)((char *)&cos_table[v15] + v32));
      float32x4_t v30 = vaddq_f32(v30, *(float32x4_t *)((char *)&sin_table[v15] + v32));
      v29 += 4;
    }
    while (v16 != v29);
    {
      float32x4_t v96 = a2;
      unint64_t v97 = v15;
      uint64_t v94 = v11;
      uint64_t v95 = v16;
      int8x16_t v92 = v17;
      float32x4_t v93 = _Q22;
      float32x4_t v90 = v25;
      float32x4_t v91 = v19;
      float32x4_t v88 = v30;
      float32x4_t v89 = v28;
      float32x4_t v87 = v31;
      float32x4_t v31 = v87;
      float32x4_t v30 = v88;
      float32x4_t v28 = v89;
      float32x4_t v25 = v90;
      v26.i64[0] = 0x8000000080000000;
      v26.i64[1] = 0x8000000080000000;
      float32x4_t v19 = v91;
      int8x16_t v17 = v92;
      float32x4_t v18 = 0uLL;
      _Q22 = v93;
      float32x4_t v27 = (uint32x4_t *)&unk_1E90FF000;
      uint64_t v11 = v94;
      uint64_t v16 = v95;
      a2 = v96;
      unint64_t v15 = v97;
      if (v40)
      {
        select_msb(vfloat4,vfloat4,vmask4)::msb = (__int128)v26;
        float32x4_t v31 = v87;
        float32x4_t v30 = v88;
        float32x4_t v28 = v89;
        float32x4_t v25 = v90;
        v26.i64[0] = 0x8000000080000000;
        v26.i64[1] = 0x8000000080000000;
        float32x4_t v19 = v91;
        int8x16_t v17 = v92;
        float32x4_t v18 = 0uLL;
        _Q22 = v93;
        float32x4_t v27 = (uint32x4_t *)&unk_1E90FF000;
        uint64_t v11 = v94;
        uint64_t v16 = v95;
        a2 = v96;
        unint64_t v15 = v97;
      }
    }
    float32x4_t v33 = vdivq_f32(v30, v31);
    float32x4_t v34 = vmaxq_f32(v33, vsubq_f32(v18, v33));
    int8x16_t v35 = (int8x16_t)vcgtq_f32(vmaxq_f32(v34, vsubq_f32(v18, v34)), _Q22);
    float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v34, v26), v17);
    float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)vdivq_f32(_Q22, v34), (int8x16_t)v34);
    float32x4_t v38 = vdivq_f32(v37, vaddq_f32(vmulq_f32(vmulq_f32(v37, v37), v19), _Q22));
    float32x4_t v39 = (float32x4_t)vbslq_s8(v35, (int8x16_t)vsubq_f32(v36, v38), (int8x16_t)v38);
    *(float32x4_t *)((char *)v104 + 4 * v15) = vmulq_f32((float32x4_t)veorq_s8(vbslq_s8((int8x16_t)vcgtq_u32(v27[57], (uint32x4_t)v31), (int8x16_t)v39, (int8x16_t)vsubq_f32(v25, v39)), vandq_s8((int8x16_t)v30, v26)), v28);
    v15 += 4;
  }
  while (v15 < v5);
  unint64_t v41 = 0;
  memset(v103, 0, sizeof(v103));
  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  float32x4_t v42 = (float32x4_t)xmmword_1889B9200;
  v43.i64[0] = 0x200000002;
  v43.i64[1] = 0x200000002;
  int32x4_t v44 = vdupq_n_s32((int)v5 + 3);
  memset(v99, 0, sizeof(v99));
  __asm { FMOV            V3.4S, #4.0 }
  do
  {
    v46.i64[0] = 0xC3000000C3000000;
    v46.i64[1] = 0xC3000000C3000000;
    v47.i64[0] = 0x4300000043000000;
    v47.i64[1] = 0x4300000043000000;
    unint64_t v48 = a2;
    uint64_t v49 = v11;
    float32x4_t v50 = 0uLL;
    float32x4_t v51 = 0uLL;
    float32x4_t v52 = 0uLL;
    do
    {
      float v53 = *v48++;
      float32x4_t v54 = vsubq_f32(vmulq_n_f32(v42, v53), (float32x4_t)v104[v41 / 4]);
      float32x4_t v55 = vrndnq_f32(v54);
      float32x4_t v56 = vsubq_f32(v54, v55);
      float32x4_t v52 = vaddq_f32(v52, vmulq_f32(v56, v56));
      int8x16_t v57 = (int8x16_t)vcgtq_f32(v47, v55);
      float32x4_t v47 = (float32x4_t)vbslq_s8(v57, (int8x16_t)v55, (int8x16_t)v47);
      float32x4_t v58 = (float32x4_t)vbicq_s8((int8x16_t)v50, v57);
      float32x4_t v59 = vaddq_f32(v56, v56);
      float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v55, v47), (int8x16_t)vsubq_f32(vaddq_f32(v58, _Q22), v59), (int8x16_t)v58);
      int8x16_t v60 = (int8x16_t)vcgtq_f32(v55, v46);
      float32x4_t v46 = (float32x4_t)vbslq_s8(v60, (int8x16_t)v55, (int8x16_t)v46);
      float32x4_t v61 = (float32x4_t)vbicq_s8((int8x16_t)v51, v60);
      float32x4_t v51 = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v55, v46), (int8x16_t)vaddq_f32(v59, vaddq_f32(v61, _Q22)), (int8x16_t)v61);
      --v49;
    }
    while (v49);
    v103[v41 / 4] = v47;
    v102[v41 / 4] = vmaxq_s32(vminq_s32(vcvtq_s32_f32(vaddq_f32(vsubq_f32(v46, v47), _Q22)), v44), v43);
    float32x4_t v62 = vdivq_f32(_Q22, v42);
    float32x4_t v63 = vmulq_f32(v62, v62);
    v101[v41 / 4] = vmulq_f32(v63, v52);
    v100[v41 / 4] = vmulq_f32(v63, v50);
    v99[v41 / 4] = vmulq_f32(v63, v51);
    float32x4_t v42 = vaddq_f32(v42, _Q3);
    v41 += 4;
  }
  while (v41 < v5);
  bzero(__b, 0x240uLL);
  memset_pattern16(__b, &unk_1889B9220, 16 * v5 + 64);
  uint64_t v66 = 0;
  if (v5 <= 1) {
    uint64_t v67 = 1;
  }
  else {
    uint64_t v67 = v5;
  }
  do
  {
    uint64_t v68 = *((int *)v102 + v66);
    v64.i32[0] = *((_DWORD *)v101 + v66);
    v65.f32[0] = v64.f32[0] + *((float *)v100 + v66);
    float v69 = *((float *)v99 + v66);
    float32x4_t v70 = (float32x4_t)__b[v68];
    LODWORD(v71) = v64.i32[0];
    *((float *)&v71 + 1) = (float)v66;
    int v72 = v68 - 1;
    float32x4_t v73 = (float32x4_t)__b[(int)v68 - 1];
    *(int16x4_t *)v74.i8 = vdup_lane_s16(vmovn_s32(vcgtq_f32(v70, v64)), 0);
    v64.f32[0] = v64.f32[0] + v69;
    v75.i64[1] = 1065353216;
    v75.i32[0] = v65.i32[0];
    *(float *)&v75.i32[1] = (float)v66;
    int16x4_t v76 = vdup_lane_s16(vmovn_s32(vcgtq_f32(v73, v65)), 0);
    v65.f32[0] = v65.f32[0] + v69;
    float32x4_t v77 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v76), v75, (int8x16_t)v73);
    __b[v68] = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v74.i8), (int8x16_t)v71, (int8x16_t)v70);
    LODWORD(v71) = v64.i32[0];
    *((float *)&v71 + 1) = (float)v66;
    LODWORD(v68) = v68 - 2;
    float32x4_t v78 = (float32x4_t)__b[(int)v68];
    v74.i64[1] = 1065353216;
    v74.i32[0] = v65.i32[0];
    *(float *)&v74.i32[1] = (float)v66;
    float32x4_t v65 = (float32x4_t)vcgtq_f32(v78, v65);
    *(int16x4_t *)v65.f32 = vdup_lane_s16(vmovn_s32((int32x4_t)v65), 0);
    __b[v72] = vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(vmovn_s32(vcgtq_f32(v77, v64)), 0)), (int8x16_t)v71, (int8x16_t)v77);
    float32x4_t v64 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v65.f32), v74, (int8x16_t)v78);
    __b[(int)v68] = v64;
    ++v66;
  }
  while (v67 != v66);
  char v79 = steps_for_quant_level;
  if ((a3 + 1) > 1) {
    uint64_t v80 = (a3 + 1);
  }
  else {
    uint64_t v80 = 1;
  }
  do
  {
    unsigned int v81 = *v79++;
    float32x4_t v82 = (float *)&__b[v81];
    float v83 = v82[2];
    LODWORD(v82) = (int)v82[1] & ~((int)v82[1] >> 31);
    float v84 = *((float *)v103 + v82) + v83;
    float v85 = 1.0 / (float)((float)(int)v82 + 1.0);
    float v86 = *((float *)v104 + v82);
    *a4++ = (float)(v86 + v84) * v85;
    *a5++ = (float)(v86 + (float)((float)(v84 + (float)v81) + -1.0)) * v85;
    --v80;
  }
  while (v80);
}

unint64_t compute_angular_endpoints_2planes(unint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4 = *(unsigned int *)(result + 8);
  if (!v4) {
    compute_angular_endpoints_2planes();
  }
  int v6 = 0;
  unint64_t v7 = 0;
  int v26 = ~(-1 << (a3 + 1));
  int v8 = (unsigned __int8 *)(result + 65);
  unint64_t v9 = (float *)(a4 + 204224);
  uint64_t v24 = (unsigned int *)result;
  unint64_t v10 = (float *)(a4 + 228960);
  uint64_t v11 = (unsigned __int8 *)(result + 594);
  do
  {
    if ((*(_WORD *)(v8 + 3) & (unsigned __int16)v26) != 0)
    {
      unsigned int v12 = *v11;
      unsigned int v13 = *v8;
      if (v13 >= 7) {
        unsigned int v13 = 7;
      }
      if (v13 >= a3) {
        int v14 = a3;
      }
      else {
        int v14 = v13;
      }
      compute_angular_endpoints_for_quant_levels(*v11, (const float *)(a2 + 4 * (v6 & 0xFFFFFFC0)), v14, v9, v9 + 696);
      compute_angular_endpoints_for_quant_levels(v12, (const float *)(a2 + 4 * (v6 & 0xFFFFFFC0) + 128), v14, v10 - 696, v10);
      uint64_t result = (unint64_t)v24;
      unint64_t v4 = v24[2];
    }
    ++v7;
    v6 += 64;
    v8 += 6;
    v9 += 8;
    v10 += 8;
    v11 += 129888;
  }
  while (v7 < v4);
  uint64_t v16 = *(unsigned int *)(result + 20);
  uint64_t v15 = *(unsigned int *)(result + 24);
  if (v16 < v15)
  {
    uint64_t v17 = a4 + 4 * v16;
    float32x4_t v18 = (float *)(v17 + 217984);
    uint64_t v19 = v15 - v16;
    double v20 = (unsigned __int8 *)(result + 6 * v16 + 11304947);
    double v21 = (_DWORD *)(v17 + 187840);
    do
    {
      uint64_t result = *v20;
      if (result > 7)
      {
        *double v21 = 0;
        v21[2048] = 1065353216;
        float v22 = 1.0;
        *(v18 - 2048) = 0.0;
      }
      else
      {
        uint64_t result = a4 + 32 * *(v20 - 1) + 4 * result;
        *double v21 = *(_DWORD *)(result + 204224);
        v21[2048] = *(_DWORD *)(result + 207008);
        *(v18 - 2048) = *(float *)(result + 226176);
        float v22 = *(float *)(result + 228960);
      }
      *v18++ = v22;
      v20 += 6;
      ++v21;
      --v19;
    }
    while (v19);
  }
  return result;
}

void compute_angular_endpoints_1plane()
{
}

{
  __assert_rtn("compute_angular_endpoints_1plane", "astcenc_weight_align.cpp", 382, "max_block_modes > 0");
}

{
  __assert_rtn("compute_angular_endpoints_1plane", "astcenc_weight_align.cpp", 386, "!bm.is_dual_plane");
}

void compute_angular_endpoints_for_quant_levels()
{
}

void compute_angular_endpoints_2planes()
{
}

void init_partition_tables(block_size_descriptor *a1)
{
  *((_DWORD *)a1 + 8) = 1;
  *((_DWORD *)a1 + 12) = 1;
  operator new[]();
}

BOOL generate_one_partition_info_entry(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = a1[3];
  int32x4_t v96 = 0uLL;
  unsigned int v9 = a1[2];
  if (a1[2])
  {
    unsigned int v10 = 0;
    char v95 = 0;
    unsigned int v11 = 65537
        * ((-287438703 * (a3 + (a2 << 10) - 1024)) ^ ((-287438703 * (a3 + (a2 << 10) - 1024)) >> 5));
    unsigned int v12 = v11 ^ (v11 >> 7) ^ ((v11 ^ (v11 >> 7)) >> 3);
    unsigned int v13 = v12 ^ (v12 << 6);
    unsigned int v14 = v13 ^ (v13 >> 17);
    uint64_t v15 = a5 + 8;
    char v16 = v8 < 0x20;
    unsigned int v17 = (v14 & 0xF) * (v14 & 0xF);
    HIDWORD(v18) = v14;
    LODWORD(v18) = v14;
    unsigned int v19 = (v14 >> 4) * (v14 >> 4);
    unsigned int v20 = ((v14 >> 8) & 0xF) * ((v14 >> 8) & 0xF);
    unsigned int v21 = ((unsigned __int16)v14 >> 12) * ((unsigned __int16)v14 >> 12);
    unsigned int v22 = (HIWORD(v13) & 0xF) * (HIWORD(v13) & 0xF);
    unsigned int v23 = ((v13 >> 20) & 0xF) * ((v13 >> 20) & 0xF);
    unsigned int v24 = (HIBYTE(v13) & 0xF) * (HIBYTE(v13) & 0xF);
    unsigned int v25 = (v13 >> 28) * (v13 >> 28);
    unsigned int v26 = ((v13 >> 18) & 0xF) * ((v13 >> 18) & 0xF);
    unsigned int v27 = ((v13 >> 22) & 0xF) * ((v13 >> 22) & 0xF);
    unsigned int v28 = ((v13 >> 26) & 0xF) * ((v13 >> 26) & 0xF);
    unsigned int v29 = ((v18 >> 30) & 0xF) * ((v18 >> 30) & 0xF);
    if ((a3 & 2) != 0) {
      char v30 = 4;
    }
    else {
      char v30 = 5;
    }
    unsigned int v31 = v14 >> 14;
    unsigned int v32 = v14 >> 10;
    if (a2 == 3) {
      char v33 = 6;
    }
    else {
      char v33 = 5;
    }
    unsigned int v34 = v14 >> 6;
    unsigned int v35 = v14 >> 2;
    if (a3) {
      char v36 = v30;
    }
    else {
      char v36 = v33;
    }
    unsigned int v37 = v17 >> v36;
    if (a3) {
      char v38 = v33;
    }
    else {
      char v38 = v30;
    }
    if ((a3 & 0x10) != 0) {
      char v39 = v36;
    }
    else {
      char v39 = v38;
    }
    unsigned int v40 = v20 >> v36;
    unsigned int v92 = v21 >> v38;
    unsigned int v93 = v19 >> v38;
    unsigned int v41 = v22 >> v36;
    unsigned int v42 = v24 >> v36;
    unsigned int v90 = v25 >> v38;
    unsigned int v91 = v23 >> v38;
    unsigned int v87 = v27 >> v39;
    unsigned int v88 = v26 >> v39;
    unsigned int v85 = v29 >> v39;
    unsigned int v86 = v28 >> v39;
    unsigned int v43 = a1[1];
    unsigned int v44 = v43;
    do
    {
      if (v44)
      {
        unsigned int v45 = 0;
        unsigned int v89 = v10;
        unsigned int v46 = *a1;
        char v47 = v86 * (v10 << v16);
        char v48 = v85 * (v10 << v16);
        int v49 = v88 * (v10 << v16);
        char v50 = v87 * (v10 << v16);
        do
        {
          if (v46)
          {
            uint64_t v51 = 0;
            unsigned int v94 = v45;
            int v52 = v45 << v16;
            int v53 = v93 * (v45 << v16);
            int v54 = v92 * (v45 << v16);
            int v55 = v91 * (v45 << v16);
            char v56 = v90 * v52;
            do
            {
              unsigned __int8 v57 = 0;
              unsigned int v58 = ((_BYTE)v31 + (_BYTE)v37 * (v51 << v16) + (_BYTE)v53 + v47) & 0x3F;
              unsigned int v59 = ((_BYTE)v32 + (_BYTE)v40 * (v51 << v16) + (_BYTE)v54 + v48) & 0x3F;
              unsigned int v60 = (v34 + v41 * (v51 << v16) + v55 + v49) & 0x3F;
              unsigned int v61 = ((_BYTE)v35 + (_BYTE)v42 * (v51 << v16) + v56 + v50) & 0x3F;
              if (a2 < 4) {
                unsigned int v61 = 0;
              }
              if (a2 < 3) {
                unsigned int v60 = 0;
              }
              if (a2 < 2) {
                unsigned int v59 = 0;
              }
              if (v58 < v59 || v58 < v60 || v58 < v61)
              {
                if (v59 >= v60 && v59 >= v61)
                {
                  unsigned __int8 v57 = 1;
                }
                else if (v60 >= v61)
                {
                  unsigned __int8 v57 = 2;
                }
                else
                {
                  unsigned __int8 v57 = 3;
                }
              }
              uint64_t v65 = v96.i32[v57];
              v96.i32[v57] = v65 + 1;
              *(unsigned char *)(a5 + 216 * v57 + v65 + 224) = v95 + v51;
              *(unsigned char *)(v15 + v51) = v57;
              unsigned int v46 = *a1;
              ++v51;
            }
            while (v51 < v46);
            unsigned int v43 = a1[1];
            v15 += v51;
            v95 += v51;
            unsigned int v45 = v94;
          }
          ++v45;
        }
        while (v45 < v43);
        unsigned int v9 = a1[2];
        unsigned int v44 = v43;
        unsigned int v10 = v89;
      }
      ++v10;
    }
    while (v10 < v9);
  }
  if (a2)
  {
    uint64_t v66 = 0;
    uint64_t v67 = a5 + 224;
    do
    {
      uint64_t v68 = v96.i32[v66];
      int v69 = (v68 + 3) & 0xFFFFFFFC;
      if ((int)v68 < v69)
      {
        float32x4_t v70 = (unsigned char *)(a5 + 216 * v66 + v68 + 223);
        uint64_t v71 = v69;
        int v72 = (unsigned char *)(v67 + v68);
        uint64_t v73 = v71 - v68;
        do
        {
          *v72++ = *v70;
          --v73;
        }
        while (v73);
      }
      ++v66;
      v67 += 216;
    }
    while (v66 != a2);
  }
  if (v96.i32[0])
  {
    if (v96.i32[1])
    {
      if (v96.i32[2])
      {
        if (v96.i32[3]) {
          int v74 = 4;
        }
        else {
          int v74 = 3;
        }
      }
      else
      {
        int v74 = 2;
      }
    }
    else
    {
      int v74 = 1;
    }
  }
  else
  {
    int v74 = 0;
  }
  *(_WORD *)a5 = v74;
  *(_WORD *)(a5 + 2) = a3;
  uint64_t v75 = (uint64_t)&a1[24 * a4 + 14683248];
  uint64_t v76 = (uint64_t)&a1[16 * a4 + 14666864];
  if (a2 != 2) {
    uint64_t v76 = 0;
  }
  if (a2 != 3) {
    uint64_t v75 = v76;
  }
  if (a2 == 4) {
    float32x4_t v77 = &a1[32 * a4 + 14707824];
  }
  else {
    float32x4_t v77 = (unsigned __int8 *)v75;
  }
  v78.i64[1] = v96.i64[1];
  *(int16x4_t *)v78.i8 = vmovn_s32(v96);
  *(_DWORD *)(a5 + 4) = vmovn_s16(v78).u32[0];
  if (v77)
  {
    if (a2) {
      bzero(v77, 8 * a2);
    }
    if (a1[3] >= 0x40u) {
      uint64_t v79 = 64;
    }
    else {
      uint64_t v79 = a1[3];
    }
    if (v79)
    {
      for (uint64_t i = 0; i != v79; ++i)
      {
        uint64_t v81 = *(unsigned __int8 *)(a5 + a1[i + 14666800] + 8);
        *(void *)&v77[8 * v81] |= 1 << i;
      }
    }
  }
  return v74 == a2;
}

void build_partition_table_for_one_partition_count(unsigned __int8 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  v31[2] = *MEMORY[0x1E4F143B8];
  unsigned int v10 = &a1[4 * a4 - 4];
  *((_DWORD *)v10 + 12) = 0;
  unsigned int v29 = v10 + 48;
  *((_DWORD *)v10 + 8) = 0;
  unsigned int v27 = v10 + 32;
  if (a2)
  {
    if (a4 > a3) {
      return;
    }
    int v11 = 1;
  }
  else
  {
    int v11 = 2;
  }
  int v26 = v11;
  bzero(v30, 0x400uLL);
  unsigned int v12 = 0;
  int v13 = 0;
  uint64_t v28 = a4 - 2;
  do
  {
    for (uint64_t i = 0; i != 1024; ++i)
    {
      if (v13 == 1)
      {
        if (v30[i]) {
          continue;
        }
        uint64_t v15 = v12;
        BOOL one_partition_info_entry = generate_one_partition_info_entry(a1, a4, i, v12, a5 + 1088 * v12);
LABEL_12:
        uint64_t v17 = a1[3];
        uint64_t v18 = a6 + 56 * v12;
        *(void *)(v18 + 48) = 0;
        *(_OWORD *)(v18 + 16) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)uint64_t v18 = 0u;
        v31[0] = -1;
        v31[1] = -1;
        if (v17)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          int v21 = 0;
          do
          {
            uint64_t v22 = *(unsigned __int8 *)(a5 + 1088 * v15 + 8 + v20);
            int v23 = *((_DWORD *)v31 + v22);
            if (v23 < 0)
            {
              *((_DWORD *)v31 + v22) = v21;
              int v23 = v21++;
            }
            *(void *)(v18 + 8 * (v20++ >> 5)) |= (uint64_t)v23 << (v19 & 0x3E);
            v19 += 2;
          }
          while (v17 != v20);
        }
        if (v12)
        {
          unsigned int v24 = 0;
          while (1)
          {
            unsigned int v25 = (void *)(a6 + 8 * v24);
            if (*(void *)v18 == *v25
              && *(void *)(v18 + 8) == v25[1]
              && *(void *)(v18 + 16) == v25[2]
              && *(void *)(v18 + 24) == v25[3]
              && *(void *)(v18 + 32) == v25[4]
              && *(void *)(v18 + 40) == v25[5]
              && *(void *)(v18 + 48) == v25[6])
            {
              break;
            }
            v24 += 7;
            if (!--v15) {
              goto LABEL_27;
            }
          }
        }
        else
        {
LABEL_27:
          if (one_partition_info_entry)
          {
            if (v13) {
              continue;
            }
            *(_WORD *)&a1[2048 * v28 + 14660656 + 2 * i] = v12;
            ++*v27;
            ++*v29;
            v30[i] = 1;
LABEL_32:
            ++v12;
            continue;
          }
        }
        if (v13 != 1) {
          continue;
        }
        *(_WORD *)&a1[2048 * v28 + 14660656 + 2 * i] = v12;
        ++*v29;
        goto LABEL_32;
      }
      uint64_t v15 = v12;
      BOOL one_partition_info_entry = generate_one_partition_info_entry(a1, a4, i, v12, a5 + 1088 * v12);
      if (v13 || one_partition_info_entry) {
        goto LABEL_12;
      }
    }
    ++v13;
  }
  while (v13 != v26);
}

uint64_t unpack_weights(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  long long v8 = *(_OWORD *)(a2 + 52);
  long long v9 = *(_OWORD *)(a2 + 68);
  long long v10 = *(_OWORD *)(a2 + 84);
  long long v11 = *(_OWORD *)(a2 + 100);
  if (a4)
  {
    if (*(unsigned char *)(result + 3))
    {
      unint64_t v12 = 0;
      uint64_t v13 = a3 + 6;
      v14.i64[0] = 0xFFFFFF00FFFFFF00;
      v14.i64[1] = 0xFFFFFF00FFFFFF00;
      v15.i64[0] = 0x300000003;
      v15.i64[1] = 0x300000003;
      do
      {
        char v16 = (const float *)(v13 + v12);
        uint8x8_t v17 = (uint8x8_t)vld1_dup_f32(v16);
        v17.i32[0] = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v17)));
        uint64_t v18 = v17.u32[0];
        if (v17.i32[0] < 1) {
          unpack_weights();
        }
        v19.i64[0] = 0x800000008;
        v19.i64[1] = 0x800000008;
        uint64_t v20 = a3;
        v21.i64[0] = 0x800000008;
        v21.i64[1] = 0x800000008;
        do
        {
          uint64_t v22 = (const float *)(v20 + 222);
          uint8x8_t v23 = (uint8x8_t)vld1_dup_f32(v22);
          v7.i32[0] = *(_DWORD *)(v20 + 1086);
          int32x4_t v7 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.i8));
          int8x16_t v24 = vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v23)), v14);
          int32x4_t v21 = vmlaq_s32(v21, v7, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)&v8, v24));
          int32x4_t v19 = vmlaq_s32(v19, v7, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)&v10, v24));
          v20 += 216;
          --v18;
        }
        while (v18);
        uint64_t v25 = 4 * v12;
        *(uint32x4_t *)(a5 + v25) = vshlq_u32((uint32x4_t)v21, v15);
        *(uint32x4_t *)(a6 + v25) = vshlq_u32((uint32x4_t)v19, v15);
        v12 += 4;
        a3 += 4;
      }
      while (v12 < *(unsigned __int8 *)(result + 3));
    }
  }
  else if (*(unsigned char *)(result + 3))
  {
    unint64_t v26 = 0;
    uint64_t v27 = a3 + 6;
    v28.i64[0] = 0xFFFFFF00FFFFFF00;
    v28.i64[1] = 0xFFFFFF00FFFFFF00;
    v29.i64[0] = 0x300000003;
    v29.i64[1] = 0x300000003;
    do
    {
      char v30 = (const float *)(v27 + v26);
      uint8x8_t v31 = (uint8x8_t)vld1_dup_f32(v30);
      v31.i32[0] = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v31)));
      uint64_t v32 = v31.u32[0];
      if (v31.i32[0] < 1) {
        unpack_weights();
      }
      v33.i64[0] = 0x800000008;
      v33.i64[1] = 0x800000008;
      uint64_t v34 = a3;
      do
      {
        unsigned int v35 = (const float *)(v34 + 222);
        uint8x8_t v36 = (uint8x8_t)vld1_dup_f32(v35);
        v6.i32[0] = *(_DWORD *)(v34 + 1086);
        int32x4_t v6 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v6.i8));
        int32x4_t v33 = vmlaq_s32(v33, v6, (int32x4_t)vqtbl4q_s8(*(int8x16x4_t *)&v8, vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v36)), v28)));
        v34 += 216;
        --v32;
      }
      while (v32);
      *(uint32x4_t *)(a5 + 4 * v26) = vshlq_u32((uint32x4_t)v33, v29);
      v26 += 4;
      a3 += 4;
    }
    while (v26 < *(unsigned __int8 *)(result + 3));
  }
  return result;
}

void compute_symbolic_block_difference_2plane(uint64_t a1, block_size_descriptor *this, uint64_t a3, float32x4_t *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a3)
  {
    if (*(unsigned char *)(a3 + 1) != 1) {
      compute_symbolic_block_difference_2plane();
    }
    if ((*(unsigned char *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 5) & 1) == 0) {
      compute_symbolic_block_difference_2plane();
    }
    long long v8 = (char *)this
       + 129888 * *(unsigned __int8 *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 2)
       + 592;
    bzero(v49, 0x360uLL);
    bzero(v48, 0x360uLL);
    unpack_weights((uint64_t)this, a3, (uint64_t)v8, 1, (uint64_t)v49, (uint64_t)v48);
    unsigned int v9 = *(char *)(a3 + 3);
    int32x4_t v47 = 0uLL;
    int32x4_t v46 = 0uLL;
    __int16 v45 = 0;
    unpack_color_endpoints(*(_DWORD *)a1, *(unsigned __int8 *)(a3 + 8), (unsigned __int8 *)(a3 + 20), (unsigned __int8 *)&v45 + 1, &v45, (uint64_t)&v47, (__n128 *)&v46, v10, v11, v12, v13);
    uint64_t v16 = *((unsigned __int8 *)this + 3);
    if (*((unsigned char *)this + 3))
    {
      float v17 = *(float *)(a1 + 40);
      float32x4_t v18 = a4[221];
      int32x4_t v19 = (const float *)v49;
      uint64_t v20 = (const float *)v48;
      int8x16_t v21 = (int8x16_t)vceqq_s32(vdupq_n_s32(v9), (int32x4_t)xmmword_18898C3A0);
      v22.i64[0] = 0x700000007;
      v22.i64[1] = 0x700000007;
      int32x4_t v23 = vshlq_s32(v47, v22);
      int32x4_t v24 = vshlq_s32(v46, v22);
      v25.i64[0] = 0x4000000040;
      v25.i64[1] = 0x4000000040;
      v26.i64[0] = 0x2000000020;
      v26.i64[1] = 0x2000000020;
      v27.i64[0] = 0x500000005;
      v27.i64[1] = 0x500000005;
      int32x4_t v28 = vdupq_n_s32(0x101u);
      float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
      float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x7149F2CAu);
      float32x4_t v31 = 0uLL;
      do
      {
        int8x16_t v32 = (int8x16_t)vld1q_dup_f32(v19++);
        int8x16_t v33 = (int8x16_t)vld1q_dup_f32(v20++);
        int32x4_t v34 = v46;
        int32x4_t v35 = v47;
        if (!*(_DWORD *)a1)
        {
          int32x4_t v34 = v24;
          int32x4_t v35 = v23;
        }
        v15.i32[0] = 0;
        int32x4_t v36 = (int32x4_t)vbslq_s8(v21, v33, v32);
        v14.i32[0] = *(_DWORD *)a1;
        int8x16_t v37 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v14, v15), 0);
        int32x4_t v15 = vsubq_s32(v25, v36);
        float32x4_t v39 = (float32x4_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v35, v15), v34, v36), v26), v27);
        float32x4_t v38 = vcvtq_f32_s32((int32x4_t)vbslq_s8(v37, (int8x16_t)vmulq_s32((int32x4_t)v39, v28), (int8x16_t)v39));
        v39.i32[0] = a4->i32[0];
        float v40 = a4[162].f32[0];
        if ((*(_DWORD *)(a1 + 4) & 0x40) != 0)
        {
          if (v38.f32[3] == 0.0) {
            return;
          }
          *(float32x2_t *)v41.f32 = vmul_n_f32(vmul_laneq_f32(*(float32x2_t *)v38.f32, v38, 3), v17);
          v41.f32[2] = vmuls_lane_f32(v38.f32[3], v38, 2) * v17;
          v41.i32[3] = 1.0;
          v39.i32[1] = a4[54].i32[0];
          *(float32x2_t *)v39.f32 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v39.f32, v40), v17);
          v39.f32[2] = (float)(a4[108].f32[0] * v40) * v17;
          v39.i32[3] = 1.0;
          float32x4_t v38 = v41;
        }
        else
        {
          v39.i32[1] = a4[54].i32[0];
          v39.i32[2] = a4[108].i32[0];
          v39.i32[3] = a4[162].i32[0];
        }
        float32x4_t v42 = vsubq_f32(v39, v38);
        float32x4_t v43 = vminnmq_f32(vmaxq_f32(v42, vsubq_f32((float32x4_t)0, v42)), v29);
        int8x16_t v44 = (int8x16_t)vmulq_f32(vmulq_f32(v43, v43), v18);
        *(float32x2_t *)v44.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), *(float32x2_t *)v44.i8);
        float32x4_t v31 = vaddq_f32(v31, vminnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), 0), v30));
        a4 = (float32x4_t *)((char *)a4 + 4);
        --v16;
      }
      while (v16);
    }
  }
}

double compute_symbolic_block_difference_1plane(unsigned int *a1, block_size_descriptor *this, uint64_t a3, float32x4_t *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 5)) {
    compute_symbolic_block_difference_1plane();
  }
  if (*(unsigned char *)a3)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 1);
    partition_info = block_size_descriptor::get_partition_info(this, *(unsigned __int8 *)(a3 + 1), *(unsigned __int16 *)(a3 + 6));
    double v11 = (char *)this
        + 129888 * *(unsigned __int8 *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 2)
        + 592;
    bzero(v46, 0x360uLL);
    unpack_weights((uint64_t)this, a3, (uint64_t)v11, 0, (uint64_t)v46, 0);
    if (!v9)
    {
      v8.n128_u64[0] = 0;
      return v8.n128_f64[0];
    }
    uint64_t v15 = 0;
    uint64_t v16 = partition_info + 224;
    __n128 v8 = 0uLL;
    float32x4_t v40 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
    int32x4_t v41 = vdupq_n_s32(0x101u);
    float32x4_t v39 = (float32x4_t)vdupq_n_s32(0x7149F2CAu);
    do
    {
      __n128 v42 = v8;
      int32x4_t v45 = 0uLL;
      int32x4_t v44 = 0uLL;
      __int16 v43 = 0;
      unpack_color_endpoints(*a1, *(unsigned __int8 *)(a3 + v15 + 8), (unsigned __int8 *)(a3 + 20 + 8 * v15), (unsigned __int8 *)&v43 + 1, &v43, (uint64_t)&v45, (__n128 *)&v44, v8, v12, v13, (int32x4_t)v14);
      uint64_t v19 = partition_info[v15 + 4];
      if (partition_info[v15 + 4])
      {
        double v12 = *(double *)v44.i64;
        v13.i32[0] = a1[10];
        uint64_t v20 = v16;
        float32x4_t v14 = a4[221];
        __n128 v8 = v42;
        v21.i64[0] = 0x700000007;
        v21.i64[1] = 0x700000007;
        v22.i64[0] = 0x4000000040;
        v22.i64[1] = 0x4000000040;
        v23.i64[0] = 0x2000000020;
        v23.i64[1] = 0x2000000020;
        v24.i64[0] = 0x500000005;
        v24.i64[1] = 0x500000005;
        while (1)
        {
          int32x4_t v25 = v44;
          int32x4_t v26 = v45;
          if (!*a1)
          {
            int32x4_t v26 = vshlq_s32(v45, v21);
            int32x4_t v25 = vshlq_s32(v44, v21);
          }
          v17.i32[0] = 0;
          int v27 = *v20++;
          int32x4_t v28 = (const float *)&v46[v27];
          int32x4_t v29 = (int32x4_t)vld1q_dup_f32(v28);
          v18.i32[0] = *a1;
          int32x4_t v17 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v18, v17), 0);
          int32x4_t v18 = vsubq_s32(v22, v29);
          float32x4_t v32 = (float32x4_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v26, v18), v25, v29), v23), v24);
          float32x4_t v30 = vcvtq_f32_s32((int32x4_t)vbslq_s8((int8x16_t)v17, (int8x16_t)vmulq_s32((int32x4_t)v32, v41), (int8x16_t)v32));
          float32x4_t v31 = &a4->f32[v27];
          v32.f32[0] = *v31;
          float v33 = v31[648];
          if ((a1[1] & 0x40) != 0)
          {
            if (v30.f32[3] == 0.0)
            {
              v8.n128_u32[0] = -246811958;
              return v8.n128_f64[0];
            }
            *(float32x2_t *)v34.f32 = vmul_n_f32(vmul_laneq_f32(*(float32x2_t *)v30.f32, v30, 3), *(float *)v13.i32);
            v34.f32[2] = vmuls_lane_f32(v30.f32[3], v30, 2) * *(float *)v13.i32;
            v34.i32[3] = 1.0;
            v32.f32[1] = v31[216];
            *(float32x2_t *)v32.f32 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v32.f32, v33), *(float *)v13.i32);
            v32.f32[2] = (float)(v31[432] * v33) * *(float *)v13.i32;
            v32.i32[3] = 1.0;
            float32x4_t v30 = v34;
          }
          else
          {
            v32.f32[1] = v31[216];
            v32.f32[2] = v31[432];
            v32.f32[3] = v31[648];
          }
          float32x4_t v35 = vsubq_f32(v32, v30);
          float32x4_t v36 = vminnmq_f32(vmaxq_f32(v35, vsubq_f32((float32x4_t)0, v35)), v40);
          int8x16_t v37 = (int8x16_t)vmulq_f32(vmulq_f32(v36, v36), v14);
          *(float32x2_t *)v37.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), *(float32x2_t *)v37.i8);
          __n128 v8 = (__n128)vaddq_f32((float32x4_t)v8, vminnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8), 0), v39));
          if (!--v19) {
            goto LABEL_16;
          }
        }
      }
      __n128 v8 = v42;
LABEL_16:
      ++v15;
      v16 += 216;
    }
    while (v15 != v9);
  }
  else
  {
    v8.n128_u32[0] = 1900671690;
  }
  return v8.n128_f64[0];
}

void compute_symbolic_block_difference_1plane_1partition(unsigned int *a1, block_size_descriptor *this, uint64_t a3, float32x4_t *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a3)
  {
    if (*(_WORD *)block_size_descriptor::get_partition_info(this, *(unsigned __int8 *)(a3 + 1), *(unsigned __int16 *)(a3 + 6)) != 1)compute_symbolic_block_difference_1plane_1partition(); {
    __n128 v8 = (char *)this
    }
       + 129888 * *(unsigned __int8 *)(block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a3 + 4)) + 2)
       + 592;
    bzero(v54, 0x360uLL);
    unpack_weights((uint64_t)this, a3, (uint64_t)v8, 0, (uint64_t)v54, 0);
    int32x4_t v53 = 0uLL;
    int32x4_t v52 = 0uLL;
    __int16 v51 = 0;
    unpack_color_endpoints(*a1, *(unsigned __int8 *)(a3 + 8), (unsigned __int8 *)(a3 + 20), (unsigned __int8 *)&v51 + 1, &v51, (uint64_t)&v53, (__n128 *)&v52, v9, v10, v11, v12);
    if (*a1)
    {
      unsigned int v13 = 1;
    }
    else
    {
      v14.i64[0] = 0x700000007;
      v14.i64[1] = 0x700000007;
      int32x4_t v52 = vshlq_s32(v52, v14);
      int32x4_t v53 = vshlq_s32(v53, v14);
      unsigned int v13 = 257;
    }
    unint64_t v15 = *((unsigned __int8 *)this + 3);
    if (*((unsigned char *)this + 3))
    {
      unint64_t v16 = 0;
      int32x4_t v17 = vdupq_n_s32(v13);
      int32x4_t v18 = vdupq_lane_s32(*(int32x2_t *)v52.i8, 0);
      int32x4_t v19 = vdupq_lane_s32(*(int32x2_t *)v52.i8, 1);
      int32x4_t v20 = vdupq_laneq_s32(v52, 2);
      int32x4_t v21 = vdupq_laneq_s32(v52, 3);
      int32x4_t v22 = vdupq_lane_s32(*(int32x2_t *)v53.i8, 0);
      int32x4_t v23 = (int32x4_t)xmmword_18898C3A0;
      float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
      int32x4_t v25 = (int32x4_t *)v54;
      int32x4_t v26 = vdupq_lane_s32(*(int32x2_t *)v53.i8, 1);
      v27.i64[0] = 0x4000000040;
      v27.i64[1] = 0x4000000040;
      v28.i64[0] = 0x2000000020;
      v28.i64[1] = 0x2000000020;
      int32x4_t v29 = vdupq_laneq_s32(v53, 2);
      int32x4_t v30 = vdupq_laneq_s32(v53, 3);
      v31.i64[0] = 0x500000005;
      v31.i64[1] = 0x500000005;
      v32.i64[0] = 0x400000004;
      v32.i64[1] = 0x400000004;
      float32x4_t v33 = a4[221];
      float32x4_t v34 = 0uLL;
      int32x4_t v35 = vdupq_n_s32(v15);
      do
      {
        int32x4_t v36 = *v25++;
        int32x4_t v37 = vsubq_s32(v27, v36);
        int32x4_t v38 = vmulq_s32(v29, v37);
        int32x4_t v39 = vmulq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v30, v37), v21, v36), v28), v31), v17);
        float32x4_t v40 = vcvtq_f32_s32(vmulq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v26, v37), v19, v36), v28), v31), v17));
        float32x4_t v41 = vsubq_f32(*a4, vcvtq_f32_s32(vmulq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v22, v37), v18, v36), v28), v31), v17)));
        float32x4_t v42 = vminnmq_f32(vmaxq_f32(v41, vsubq_f32((float32x4_t)0, v41)), v24);
        float32x4_t v43 = vsubq_f32(a4[54], v40);
        float32x4_t v44 = vsubq_f32(a4[108], vcvtq_f32_s32(vmulq_s32(vshlq_s32(vaddq_s32(vmlaq_s32(v38, v20, v36), v28), v31), v17)));
        float32x4_t v45 = vminnmq_f32(vmaxq_f32(v43, vsubq_f32((float32x4_t)0, v43)), v24);
        float32x4_t v46 = vminnmq_f32(vmaxq_f32(v44, vsubq_f32((float32x4_t)0, v44)), v24);
        float32x4_t v47 = vsubq_f32(a4[162], vcvtq_f32_s32(v39));
        float32x4_t v48 = vminnmq_f32(vmaxq_f32(v47, vsubq_f32((float32x4_t)0, v47)), v24);
        int8x16_t v49 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v48, v48), v33, 3), vaddq_f32(vmulq_laneq_f32(vmulq_f32(v46, v46), v33, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v42, v42), v33.f32[0]), vmulq_lane_f32(vmulq_f32(v45, v45), *(float32x2_t *)v33.f32, 1))));
        int8x16_t v50 = (int8x16_t)vcgtq_s32(v35, v23);
        int32x4_t v23 = vaddq_s32(v23, v32);
        float32x4_t v34 = vaddq_f32(v34, (float32x4_t)vandq_s8(v49, v50));
        v16 += 4;
        ++a4;
      }
      while (v16 < v15);
    }
  }
}

void unpack_weights()
{
}

{
  __assert_rtn("unpack_weights", "astcenc_decompress_symbolic.cpp", 121, "max_weight_count > 0");
}

void compute_symbolic_block_difference_2plane()
{
  __assert_rtn("compute_symbolic_block_difference_2plane", "astcenc_decompress_symbolic.cpp", 341, "bsd.get_block_mode(scb.block_mode).is_dual_plane == 1");
}

{
  __assert_rtn("compute_symbolic_block_difference_2plane", "astcenc_decompress_symbolic.cpp", 340, "scb.partition_count == 1");
}

void compute_symbolic_block_difference_1plane()
{
  __assert_rtn("compute_symbolic_block_difference_1plane", "astcenc_decompress_symbolic.cpp", 425, "bsd.get_block_mode(scb.block_mode).is_dual_plane == 0");
}

void compute_symbolic_block_difference_1plane_1partition()
{
  __assert_rtn("compute_symbolic_block_difference_1plane_1partition", "astcenc_decompress_symbolic.cpp", 528, "bsd.get_partition_info(scb.partition_count, scb.partition_index).partition_count == 1");
}

void load_image_block(unsigned __int32 a1, int *a2, int8x16_t *a3, unsigned __int8 *a4, int a5, int a6, int a7, _DWORD *a8, int32x4_t a9)
{
  int32x4_t v11 = a3;
  int v12 = a2[1];
  int v84 = *a2;
  int v13 = a2[2];
  a3[249].i32[1] = a5;
  a3[249].i32[2] = a6;
  a3[249].i32[3] = a7;
  if (a8[3] == 3 && a8[2] == 2 && a8[1] == 1 && *a8 == 0) {
    int32x4_t v17 = (__n64 (*)(unsigned int *, __n128))swz_texel_skip;
  }
  else {
    int32x4_t v17 = swz_texel;
  }
  a9.i8[0] = a4[3];
  float v18 = 1.0 / (float)a9.u32[0];
  a9.i32[0] = a1 & 0xFFFFFFFE;
  a9.i32[1] = a1;
  int8x8_t v19 = (int8x8_t)vceq_s32(*(int32x2_t *)a9.i8, (int32x2_t)0x300000002);
  uint64_t v20 = v19.i8[0] & 1;
  *(int8x8_t *)a9.i8 = vand_s8(v19, (int8x8_t)0x100000001);
  int32x4_t v21 = vzip1q_s32(a9, a9);
  v21.i32[2] = a9.i32[0];
  int32x4_t v76 = v21;
  uint32x4_t v22 = (uint32x4_t)vtstq_s32(v21, v21);
  int v23 = a2[3];
  float32x4_t v24 = load_texel_u8;
  if (v23 == 2) {
    float32x4_t v24 = (double (*)(char *, int))load_texel_f32;
  }
  if (v23 == 1) {
    int32x4_t v25 = load_texel_f16;
  }
  else {
    int32x4_t v25 = v24;
  }
  __n128 v92 = (__n128)v22;
  {
    uint64_t v71 = a4;
    uint64_t v72 = v19.i8[0] & 1;
    float v90 = v18;
    uint64_t v73 = v25;
    __int8 v100 = v19.i8[4];
    v19.i8[4] = v100;
    int32x4_t v25 = v73;
    uint32x4_t v22 = (uint32x4_t)v92;
    float v18 = v90;
    uint64_t v20 = v72;
    a4 = v71;
    if (v74)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      v19.i8[4] = v100;
      int32x4_t v25 = v73;
      uint32x4_t v22 = (uint32x4_t)v92;
      float v18 = v90;
      uint64_t v20 = v72;
      a4 = v71;
    }
  }
  int32x4_t v26 = (double (*)(double, __n128))encode_texel_lns;
  if (!vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v22, 0x1FuLL), (uint32x4_t)mask(vmask4)::shift))) {
    int32x4_t v26 = (double (*)(double, __n128))encode_texel_unorm;
  }
  unsigned int v27 = a4[2];
  if (a4[2])
  {
    uint64_t v81 = v26;
    unsigned int v91 = a8;
    int v28 = 0;
    unsigned int v29 = 0;
    uint64_t v30 = v19.i8[4] & 1;
    unsigned int v80 = v12 - 1;
    uint64_t v31 = (v84 - 1);
    unsigned int v32 = a4[1];
    int v33 = a5;
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0xFE967699);
    float32x4_t v35 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    uint64_t v79 = &v11[235].i8[9];
    float32x4_t v36 = 0uLL;
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    unsigned int v38 = v32;
    float32x4_t v82 = v11;
    float v89 = v18;
    unsigned int v88 = v17;
    do
    {
      unsigned int v39 = v29 + a7;
      if (v29 + a7 >= v13 - 1) {
        unsigned int v39 = v13 - 1;
      }
      if (v38)
      {
        unsigned int v40 = 0;
        float32x4_t v41 = *(char **)(*((void *)a2 + 2) + 8 * v39);
        unsigned int v42 = *a4;
        unsigned int v85 = v29;
        do
        {
          if (v42)
          {
            uint64_t v43 = 0;
            unsigned int v86 = v40;
            int v87 = v28;
            unsigned int v44 = v40 + a6;
            if (v40 + a6 >= v80) {
              unsigned int v44 = v80;
            }
            int v94 = v44 * v84;
            float32x4_t v45 = &v11->i32[v28];
            unsigned int v93 = &v79[v28];
            do
            {
              float32x4_t v95 = v36;
              float32x4_t v96 = v35;
              float32x4_t v97 = v34;
              int8x16_t v98 = (int8x16_t)v37;
              int v46 = v33 + v43;
              if (v33 + (int)v43 >= v31) {
                int v46 = v31;
              }
              uint64_t v47 = v31;
              float32x4_t v48 = a4;
              uint64_t v49 = v20;
              int8x16_t v50 = v25;
              uint64_t v51 = v30;
              v25(v41, 4 * (v46 + v94));
              double v52 = ((double (*)(_DWORD *))v88)(v91);
              *(double *)v53.i64 = v81(v52, v92);
              uint64_t v31 = v47;
              uint64_t v30 = v51;
              int32x4_t v25 = v50;
              uint64_t v20 = v49;
              a4 = v48;
              float32x4_t v35 = vminnmq_f32(v96, v53);
              float32x4_t v36 = vaddq_f32(v95, vmulq_n_f32(v53, v89));
              float32x4_t v34 = vmaxnmq_f32(v97, v53);
              int32x4_t v54 = (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL);
              uint32x4_t v37 = (uint32x4_t)vandq_s8(v98, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), (float32x4_t)vzip1q_s32(v54, v54)));
              *float32x4_t v45 = v53.i32[0];
              v45[216] = v53.i32[1];
              v45[432] = v53.i32[2];
              v45[648] = v53.i32[3];
              uint64_t v55 = &v93[v43];
              *(v55 - 216) = v49;
              *uint64_t v55 = v51;
              unsigned int v42 = *v48;
              ++v45;
              ++v43;
            }
            while (v43 < v42);
            unsigned int v40 = v86;
            int v28 = v87 + v43;
            unsigned int v32 = v48[1];
            int32x4_t v11 = v82;
            unsigned int v29 = v85;
          }
          ++v40;
        }
        while (v40 < v32);
        unsigned int v27 = a4[2];
        unsigned int v38 = v32;
      }
      ++v29;
    }
    while (v29 < v27);
  }
  else
  {
    float32x4_t v35 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v37.i64[0] = -1;
    v37.i64[1] = -1;
    float32x4_t v36 = 0uLL;
  }
  int8x16_t v56 = (int8x16_t)vceqzq_s32(v76);
  float32x4_t v57 = *(float32x4_t *)v11;
  v57.i32[1] = v11[54].i32[0];
  v57.i32[2] = v11[108].i32[0];
  v57.i32[3] = v11[162].i32[0];
  int8x16_t v58 = (int8x16_t)vdivq_f32(v57, (float32x4_t)vdupq_n_s32(0x477FFF00u));
  int8x16_t v59 = 0uLL;
  if (v20)
  {
    int8x16_t v60 = (int8x16_t)vcvtq_s32_f32(v57);
    v61.i64[0] = 0x700000007;
    v61.i64[1] = 0x700000007;
    int32x4_t v62 = (int32x4_t)vandq_s8(v60, v61);
    v63.i64[0] = 0xA0000000ALL;
    v63.i64[1] = 0xA0000000ALL;
    int32x4_t v64 = (int32x4_t)vshlq_u32((uint32x4_t)v60, v63);
    uint16x4_t v65 = (uint16x4_t)vmovn_s32(v62);
    v66.i64[0] = 0x20000000200;
    v66.i64[1] = 0x20000000200;
    v67.i64[0] = 0x100000001;
    v67.i64[1] = 0x100000001;
    int8x16_t v68 = (int8x16_t)vaddq_s32(vshlq_n_s32(v62, 2uLL), v67);
    v67.i64[0] = 0x60000000600;
    v67.i64[1] = 0x60000000600;
    v69.i64[0] = 0x700000007;
    v69.i64[1] = 0x700000007;
    v63.i64[0] = 0x200000002;
    v63.i64[1] = 0x200000002;
    int32x4_t v70 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v66, (uint32x4_t)v62), (int8x16_t)vmull_u16(v65, (uint16x4_t)0x3000300030003), vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v67, (uint32x4_t)v62), v68, (int8x16_t)vmlal_u16(v69, v65, (uint16x4_t)0x5000500050005))), v63), (int8x16_t)vshlq_n_s32(v64, 0xAuLL));
    v62.i64[0] = 0x7B0000007BLL;
    v62.i64[1] = 0x7B0000007BLL;
    int8x16_t v59 = (int8x16_t)vcvtq_f32_f16((float16x4_t)vmovn_s32(vminq_s32(v70, v62)));
  }
  v11[217] = vorrq_s8(vbicq_s8(v59, v56), vandq_s8(v58, v56));
  v11[218] = (int8x16_t)v35;
  v11[219] = (int8x16_t)v36;
  v11[220] = (int8x16_t)v34;
  {
    uint32x4_t v99 = v37;
    uint32x4_t v37 = v99;
    if (v75)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      uint32x4_t v37 = v99;
    }
  }
  v11[222].i8[0] = vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v37, 0x1FuLL), (uint32x4_t)mask(vmask4)::shift)) == 15;
}

double load_texel_u8(char *a1, int a2)
{
  int v2 = (const float *)&a1[a2];
  uint8x8_t v3 = (uint8x8_t)vld1_dup_f32(v2);
  *(void *)&double result = vdivq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v3))), (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double load_texel_f16(char *a1, int a2)
{
  *(void *)&double result = vcvtq_f32_f16(*(float16x4_t *)&a1[2 * a2]).u64[0];
  return result;
}

__n128 load_texel_f32(char *a1, int a2)
{
  return *(__n128 *)&a1[4 * a2];
}

__n64 swz_texel(unsigned int *a1, __n128 a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  __n128 v3 = a2;
  uint64_t v4 = 0x3F80000000000000;
  result.n64_u32[0] = v3.n128_u32[*a1];
  result.n64_u32[1] = v3.n128_u32[a1[1]];
  return result;
}

double encode_texel_unorm(float32x4_t a1)
{
  *(void *)&double result = vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)).u64[0];
  return result;
}

double encode_texel_lns(float32x4_t a1, int8x16_t a2)
{
  float32x4_t v2 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  int8x16_t v3 = (int8x16_t)vmulq_f32(a1, v2);
  v4.i64[0] = 0x1600000016;
  v4.i64[1] = 0x1600000016;
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  int32x4_t v6 = (int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)a1, v4), v5);
  unsigned long long v7 = *(_OWORD *)&vandq_s8((int8x16_t)a1, (int8x16_t)vdupq_n_s32(0x807FFFFF)) | __PAIR128__(0x3F0000003F000000, 0x3F0000003F000000);
  int8x16_t v8 = (int8x16_t)vcgtq_f32(a1, (float32x4_t)vdupq_n_s32(0x32800000u));
  int8x16_t v9 = (int8x16_t)vcgeq_f32(a1, (float32x4_t)vdupq_n_s32(0x47800000u));
  v10.i64[0] = 0x7100000071;
  v10.i64[1] = 0x7100000071;
  int8x16_t v11 = (int8x16_t)vcgtq_u32(v10, (uint32x4_t)v6);
  v12.i64[0] = 0x4C0000004C000000;
  v12.i64[1] = 0x4C0000004C000000;
  int8x16_t v13 = (int8x16_t)vmulq_f32(a1, v12);
  v12.i64[0] = 0xBF000000BF000000;
  v12.i64[1] = 0xBF000000BF000000;
  float32x4_t v14 = vmulq_f32(vaddq_f32((float32x4_t)v7, v12), (float32x4_t)vdupq_n_s32(0x45800000u));
  v12.i64[0] = 0x6F0000006FLL;
  v12.i64[1] = 0x6F0000006FLL;
  float32x4_t v15 = (float32x4_t)vbslq_s8(v11, v13, (int8x16_t)v14);
  v16.i64[0] = 0x4300000043000000;
  v16.i64[1] = 0x4300000043000000;
  v17.i64[0] = 0x4400000044000000;
  v17.i64[1] = 0x4400000044000000;
  v14.i64[0] = 0x4500000045000000;
  v14.i64[1] = 0x4500000045000000;
  float32x4_t v18 = vaddq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v6, (int32x4_t)v12), v11)), v14), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x43C00000u), v15), (int8x16_t)vmulq_f32(v15, (float32x4_t)vdupq_n_s32(0x3FAAAAABu)), vbslq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x44B00000u), v15), (int8x16_t)vaddq_f32(v15, v16), (int8x16_t)vmulq_f32(vaddq_f32(v15, v17), (float32x4_t)vdupq_n_s32(0x3F4CCCCDu)))));
  __asm { FMOV            V4.4S, #1.0 }
  *(void *)&double result = vbslq_s8(a2, vandq_s8(vbslq_s8(v9, (int8x16_t)v2, (int8x16_t)vaddq_f32(v18, _Q4)), v8), v3).u64[0];
  return result;
}

void load_image_block_fast_ldr(uint64_t a1, int *a2, float32x4_t *a3, unsigned __int8 *a4, unsigned int a5, unsigned __int32 a6, __int32 a7)
{
  int v8 = *a2;
  int v7 = a2[1];
  a3[249].i32[1] = a5;
  a3[249].i32[2] = a6;
  a3[249].i32[3] = a7;
  unsigned __int32 v9 = a4[1] + a6;
  if (v9 <= a6)
  {
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xFE967699);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    float32x4_t v18 = 0uLL;
  }
  else
  {
    int v10 = 0;
    uint64_t v11 = **((void **)a2 + 2);
    unsigned __int32 v12 = v7 - 1;
    int v13 = *a4;
    unsigned int v14 = v8 - 1;
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xFE967699);
    int v17 = 4 * v8;
    float32x4_t v18 = 0uLL;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x43808000u);
    do
    {
      if (v13 + a5 > a5)
      {
        if (a6 >= v12) {
          unsigned __int32 v21 = v12;
        }
        else {
          unsigned __int32 v21 = a6;
        }
        uint64_t v22 = v11 + v17 * v21;
        int v23 = &a3->i32[v10];
        int v24 = v13;
        unsigned int v25 = a5;
        do
        {
          if (v25 >= v14) {
            unsigned int v26 = v14;
          }
          else {
            unsigned int v26 = v25;
          }
          unsigned int v27 = (const float *)(v22 + 4 * v26);
          uint8x8_t v28 = (uint8x8_t)vld1_dup_f32(v27);
          float32x4_t v29 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v28))), v20);
          float32x4_t v15 = vminnmq_f32(v15, v29);
          float32x4_t v18 = vaddq_f32(v18, v29);
          float32x4_t v16 = vmaxnmq_f32(v16, v29);
          int32x4_t v30 = (int32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL);
          int8x16_t v19 = vandq_s8(v19, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0), (float32x4_t)vzip1q_s32(v30, v30)));
          *int v23 = v29.i32[0];
          v23[216] = v29.i32[1];
          v23[432] = v29.i32[2];
          v23[648] = v29.i32[3];
          ++v25;
          ++v23;
          ++v10;
          --v24;
        }
        while (v24);
      }
      ++a6;
    }
    while (a6 != v9);
  }
  float32x4_t v31 = *a3;
  v31.i32[1] = a3[54].i32[0];
  v31.i32[2] = a3[108].i32[0];
  v31.i32[3] = a3[162].i32[0];
  a3[217] = vdivq_f32(v31, (float32x4_t)vdupq_n_s32(0x477FFF00u));
  a3[222].i8[1] = 0;
  a3[235].i8[9] = 0;
  a3[218] = v15;
  v15.i8[0] = a4[3];
  v15.f32[0] = (float)v15.u32[0];
  a3[219] = vdivq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0));
  a3[220] = v16;
  unsigned int v32 = (uint32x4_t *)&unk_1E90FF000;
  {
    float32x4_t v35 = a3;
    int8x16_t v34 = v19;
    int8x16_t v19 = v34;
    unsigned int v32 = (uint32x4_t *)&unk_1E90FF000;
    a3 = v35;
    if (v33)
    {
      mask(vmask4)::shift = xmmword_18898C3A0;
      int8x16_t v19 = v34;
      unsigned int v32 = (uint32x4_t *)&unk_1E90FF000;
      a3 = v35;
    }
  }
  a3[222].i8[0] = vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v19, 0x1FuLL), v32[55])) == 15;
}

void init_block_size_descriptor(unsigned int a1, unsigned int a2, unsigned int a3, BOOL a4, unsigned int a5, float a6, block_size_descriptor *a7)
{
  if (a3 >= 2) {
    operator new();
  }
  operator new();
}

uint64_t assign_kmeans_texels(uint64_t result, unint64_t *a2)
{
  uint64_t v2 = result;
  _OWORD v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned __int8 *)(result + 3);
  if (v3 > 0x40)
  {
    v11[0] = 0;
    v11[1] = 0;
    astc::rand_init((astc *)v11, a2);
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    size_t v5 = *(unsigned __int8 *)(v2 + 3);
    if (*(unsigned char *)(v2 + 3)) {
      bzero(v9, v5);
    }
    unint64_t v6 = 0;
    do
    {
      double result = astc::rand((astc *)v11, (unint64_t *)v5);
      uint64_t v7 = result % *(unsigned __int8 *)(v2 + 3);
      if (!*((unsigned char *)v9 + v7))
      {
        unint64_t v8 = v2 + v6++;
        *(unsigned char *)(v8 + 14666800) = result % *(unsigned char *)(v2 + 3);
        *((unsigned char *)v9 + v7) = 1;
      }
    }
    while (v6 < 0x40);
  }
  else if (*(unsigned char *)(result + 3))
  {
    uint64_t v4 = 0;
    do
    {
      *(unsigned char *)(result + 14666800 + v4) = v4;
      ++v4;
    }
    while (v3 != v4);
  }
  return result;
}

void init_block_size_descriptor()
{
}

{
  __assert_rtn("init_decimation_info_3d", "astcenc_block_sizes.cpp", 452, "texels_per_block > 0");
}

{
  __assert_rtn("construct_block_size_descriptor_2d", "astcenc_block_sizes.cpp", 961, "bsd.block_mode_count_1plane_always > 0");
}

{
  __assert_rtn("construct_block_size_descriptor_2d", "astcenc_block_sizes.cpp", 962, "bsd.decimation_mode_count_always > 0");
}

{
  __assert_rtn("construct_dt_entry_2d", "astcenc_block_sizes.cpp", 748, "weight_count <= BLOCK_MAX_WEIGHTS");
}

{
  __assert_rtn("init_decimation_info_2d", "astcenc_block_sizes.cpp", 266, "texels_per_block > 0");
}

{
  __assert_rtn("init_decimation_info_2d", "astcenc_block_sizes.cpp", 267, "x_texels > 0");
}

{
  __assert_rtn("init_decimation_info_2d", "astcenc_block_sizes.cpp", 268, "y_texels > 0");
}

{
  __assert_rtn("construct_dt_entry_2d", "astcenc_block_sizes.cpp", 776, "maxprec_1plane >= 0 || maxprec_2planes >= 0");
}

uint64_t compute_pixel_region_variance(uint64_t result, uint64_t *a2, int32x4_t a3)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (int *)*a2;
  uint64_t v4 = *((unsigned int *)a2 + 2);
  uint64_t v5 = *((unsigned int *)a2 + 3);
  uint64_t v6 = *((unsigned int *)a2 + 4);
  uint64_t v7 = *((unsigned int *)a2 + 5);
  int v135 = *((_DWORD *)a2 + 12);
  int v136 = *((_DWORD *)a2 + 11);
  int v133 = *((_DWORD *)a2 + 13);
  int v8 = *((_DWORD *)a2 + 7);
  uint64_t v9 = *(void *)(result + 120);
  uint64_t v149 = a2[7];
  uint64_t v150 = *((unsigned int *)a2 + 8);
  int v10 = (2 * v8) | 1;
  uint64_t v138 = *((unsigned __int8 *)a2 + 24);
  int v139 = v8;
  if (!*((unsigned char *)a2 + 24)) {
    int v8 = 0;
  }
  uint64_t v11 = (v10 + *((_DWORD *)a2 + 8));
  uint64_t v151 = *((unsigned int *)a2 + 9);
  if (*((unsigned char *)a2 + 24)) {
    int v12 = v10;
  }
  else {
    int v12 = 0;
  }
  uint64_t v140 = *((unsigned int *)a2 + 10);
  uint64_t v152 = (v10 + *((_DWORD *)a2 + 9));
  int v146 = v11 * (v10 + *((_DWORD *)a2 + 9));
  uint64_t v147 = (v12 + *((_DWORD *)a2 + 10));
  uint64_t v13 = v146 * (int)v147;
  int v148 = *v3;
  int v14 = v3[3];
  int v134 = v10;
  int v131 = v3[1];
  if (v14)
  {
    if (v14 == 1)
    {
      DWORD2(v153) = 1006632960;
      if ((int)v147 > (int)v138)
      {
        uint64_t v15 = v138;
        int v142 = v133 - v138 - v8;
        int v16 = v135 + ~v139;
        uint64_t v17 = (int)v11 + (int)v138 * (uint64_t)v146;
        uint64_t v18 = v149 + 16 * v17 + 16;
        uint64_t v141 = 16 * v146;
        double result = 16 * (int)v11;
        uint64_t v19 = v149 + 16 * (v17 + v13) + 16;
        do
        {
          if (v142 + (int)v15 <= v3[2] - 1) {
            int v20 = (v142 + v15) & ~((v142 + (int)v15) >> 31);
          }
          else {
            int v20 = v3[2] - 1;
          }
          if ((int)v152 >= 2)
          {
            uint64_t v21 = *(void *)(*((void *)v3 + 2) + 8 * v20);
            uint64_t v22 = (__n128 *)v19;
            int v23 = (float32x4_t *)v18;
            for (uint64_t i = 1; i != v152; ++i)
            {
              if (v16 + (int)i <= v3[1] - 1) {
                int v25 = (v16 + i) & ~((v16 + (int)i) >> 31);
              }
              else {
                int v25 = v3[1] - 1;
              }
              uint64_t v26 = v11 - 1;
              int v27 = v136 - v139;
              uint8x8_t v28 = v22;
              float32x4_t v29 = v23;
              if ((int)v11 >= 2)
              {
                do
                {
                  int v30 = v27 & ~(v27 >> 31);
                  if (v27 > *v3 - 1) {
                    int v30 = *v3 - 1;
                  }
                  *(void *)&long long v153 = *(void *)(v21 + 2 * (4 * v30 + 4 * *v3 * v25));
                  a3.i16[3] = WORD3(v153);
                  a3.i32[0] = *((unsigned __int16 *)&v153 + v4);
                  a3.i16[2] = *((_WORD *)&v153 + v5);
                  a3.i16[4] = *((_WORD *)&v153 + v6);
                  a3.i16[6] = *((_WORD *)&v153 + v7);
                  float32x4_t v31 = vcvtq_f32_f16((float16x4_t)vmovn_s32(a3));
                  *v29++ = v31;
                  a3 = (int32x4_t)vmulq_f32(v31, v31);
                  *v28++ = (__n128)a3;
                  ++v27;
                  --v26;
                }
                while (v26);
              }
              int v23 = (float32x4_t *)((char *)v23 + result);
              uint64_t v22 = (__n128 *)((char *)v22 + result);
            }
          }
          ++v15;
          v18 += v141;
          v19 += v141;
        }
        while (v15 != v147);
      }
    }
    else
    {
      if (v14 != 2) {
        compute_pixel_region_variance();
      }
      uint64_t v154 = 0x3F80000000000000;
      if ((int)v147 > (int)v138)
      {
        uint64_t v52 = v138;
        uint64_t v53 = (int)v11 + (int)v138 * (uint64_t)v146;
        int v144 = v133 - v138 - v8;
        uint64_t v54 = 16 * v146;
        uint64_t v55 = 16 * (int)v11;
        int v56 = v135 + ~v139;
        float32x4_t v57 = (float32x4_t *)(v149 + 16 * (v53 + v13));
        double result = v149 + 16 * v53 + 16;
        int8x16_t v58 = (__int32 *)&v153 + v5;
        int8x16_t v59 = v57 + 1;
        int8x16_t v60 = (__int32 *)&v153 + v6;
        int8x16_t v61 = (__int32 *)&v153 + v7;
        do
        {
          if (v144 + (int)v52 <= v3[2] - 1) {
            int v62 = (v144 + v52) & ~((v144 + (int)v52) >> 31);
          }
          else {
            int v62 = v3[2] - 1;
          }
          if ((int)v152 >= 2)
          {
            uint64_t v63 = *(void *)(*((void *)v3 + 2) + 8 * v62);
            int32x4_t v64 = v59;
            uint16x4_t v65 = (float32x4_t *)result;
            for (uint64_t j = 1; j != v152; ++j)
            {
              if (v56 + (int)j <= v3[1] - 1) {
                int v67 = (v56 + j) & ~((v56 + (int)j) >> 31);
              }
              else {
                int v67 = v3[1] - 1;
              }
              uint64_t v68 = v11 - 1;
              int v69 = v136 - v139;
              int32x4_t v70 = v64;
              uint64_t v71 = v65;
              if ((int)v11 >= 2)
              {
                do
                {
                  int v72 = v69 & ~(v69 >> 31);
                  if (v69 > *v3 - 1) {
                    int v72 = *v3 - 1;
                  }
                  long long v153 = *(_OWORD *)(v63 + 4 * (4 * v72 + 4 * *v3 * v67));
                  v73.i32[0] = *((_DWORD *)&v153 + v4);
                  v73.i32[1] = *v58;
                  v73.i32[2] = *v60;
                  v73.i32[3] = *v61;
                  *v71++ = v73;
                  *v70++ = vmulq_f32(v73, v73);
                  ++v69;
                  --v68;
                }
                while (v68);
              }
              uint16x4_t v65 = (float32x4_t *)((char *)v65 + v55);
              int32x4_t v64 = (float32x4_t *)((char *)v64 + v55);
            }
          }
          ++v52;
          result += v54;
          int8x16_t v59 = (float32x4_t *)((char *)v59 + v54);
        }
        while (v52 != v147);
      }
    }
  }
  else
  {
    WORD2(v153) = -256;
    if ((int)v147 > (int)v138)
    {
      uint64_t v32 = v138;
      int v143 = v133 - v138 - v8;
      int v33 = v135 + ~v139;
      uint64_t v34 = (int)v11 + (int)v138 * (uint64_t)v146;
      uint64_t v35 = v149 + 16 * v34 + 16;
      uint64_t v36 = 16 * v146;
      double result = 16 * (int)v11;
      uint64_t v37 = v149 + 16 * (v34 + v13) + 16;
      float32x4_t v38 = (float32x4_t)vdupq_n_s32(0x3B808081u);
      do
      {
        if (v143 + (int)v32 <= v3[2] - 1) {
          int v39 = (v143 + v32) & ~((v143 + (int)v32) >> 31);
        }
        else {
          int v39 = v3[2] - 1;
        }
        if ((int)v152 >= 2)
        {
          uint64_t v40 = *(void *)(*((void *)v3 + 2) + 8 * v39);
          float32x4_t v41 = (float32x4_t *)v37;
          unsigned int v42 = (float32x4_t *)v35;
          for (uint64_t k = 1; k != v152; ++k)
          {
            int v44 = (v33 + k) & ~((v33 + (int)k) >> 31);
            if (v33 + (int)k > v3[1] - 1) {
              int v44 = v3[1] - 1;
            }
            uint64_t v45 = v11 - 1;
            int v46 = v136 - v139;
            uint64_t v47 = v41;
            float32x4_t v48 = v42;
            if ((int)v11 >= 2)
            {
              do
              {
                int v49 = v46 & ~(v46 >> 31);
                if (v46 > *v3 - 1) {
                  int v49 = *v3 - 1;
                }
                LODWORD(v153) = *(_DWORD *)(v40 + (4 * v49 + 4 * *v3 * v44));
                v50.i16[0] = *((unsigned __int8 *)&v153 + v4);
                v50.i16[1] = *((unsigned __int8 *)&v153 + v5);
                v50.i16[2] = *((unsigned __int8 *)&v153 + v6);
                v50.i16[3] = *((unsigned __int8 *)&v153 + v7);
                float32x4_t v51 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v50)), v38);
                *v48++ = v51;
                *v47++ = vmulq_f32(v51, v51);
                ++v46;
                --v45;
              }
              while (v45);
            }
            unsigned int v42 = (float32x4_t *)((char *)v42 + result);
            float32x4_t v41 = (float32x4_t *)((char *)v41 + result);
          }
        }
        ++v32;
        v35 += v36;
        v37 += v36;
      }
      while (v32 != v147);
    }
  }
  uint64_t v74 = v13;
  int v132 = v147 - 1;
  if ((int)v147 >= 1)
  {
    uint64_t v75 = 0;
    int32x4_t v76 = (_OWORD *)v149;
    do
    {
      uint64_t v77 = v152;
      int16x8_t v78 = v76;
      if ((int)v152 >= 1)
      {
        do
        {
          *int16x8_t v78 = 0uLL;
          v78[v13] = 0uLL;
          v78 += (int)v11;
          --v77;
        }
        while (v77);
      }
      if ((int)v11 >= 1)
      {
        uint64_t v79 = 0;
        do
        {
          v76[v79] = 0uLL;
          v76[v74 + v79++] = 0uLL;
        }
        while (v11 != v79);
      }
      ++v75;
      v76 += v146;
    }
    while (v75 != v147);
  }
  if (v138 && (int)v152 >= 1)
  {
    uint64_t v80 = 0;
    uint64_t v81 = (_OWORD *)v149;
    do
    {
      uint64_t v82 = v11;
      float v83 = v81;
      if ((int)v11 >= 1)
      {
        do
        {
          *float v83 = 0uLL;
          v83[v13] = 0uLL;
          ++v83;
          --v82;
        }
        while (v82);
      }
      ++v80;
      v81 += (int)v11;
    }
    while (v80 != v152);
  }
  int v137 = 2 * v139;
  if ((int)v147 > (int)v138)
  {
    uint64_t v84 = v149;
    int v85 = v150 + v146 * v138 + v137 + 2;
    int v86 = v138;
    do
    {
      uint64_t v87 = v152 - 1;
      int v88 = v85;
      if ((int)v152 >= 2)
      {
        do
        {
          brent_kung_prefix_sum(v84 + 16 * v88, (int)v11 - 1, 1);
          double result = brent_kung_prefix_sum(v149 + 16 * v146 * (int)v147 + 16 * v88, (int)v11 - 1, 1);
          uint64_t v84 = v149;
          v88 += v11;
          --v87;
        }
        while (v87);
      }
      ++v86;
      v85 += v146;
    }
    while (v86 != v147);
    unint64_t v89 = (int)v152 - 1;
    uint64_t v90 = v138;
    uint64_t v91 = (int)v11 + (int)v138 * (uint64_t)v146;
    uint64_t v92 = v84 + 16 * v91 + 16;
    uint64_t v93 = v84 + 16 * (v91 + v13) + 16;
    uint64_t v145 = 16 * v146;
    do
    {
      uint64_t v94 = v11 - 1;
      uint64_t v95 = v93;
      uint64_t v96 = v92;
      if ((int)v11 >= 2)
      {
        do
        {
          brent_kung_prefix_sum(v96, v89, v11);
          double result = brent_kung_prefix_sum(v95, v89, v11);
          v96 += 16;
          v95 += 16;
          --v94;
        }
        while (v94);
      }
      ++v90;
      v92 += v145;
      v93 += v145;
    }
    while (v90 != v147);
  }
  if (v138 && (int)v152 >= 2)
  {
    int v97 = (v151 + v137 + 2) * v11;
    for (uint64_t m = 1; m != v152; ++m)
    {
      if ((int)v11 >= 2)
      {
        uint64_t v99 = v149 + 16 + 16 * v97;
        uint64_t v100 = v11 - 1;
        do
        {
          brent_kung_prefix_sum(v99, v132, v146);
          double result = brent_kung_prefix_sum(v99 + v74 * 16, v132, v146);
          v99 += 16;
          --v100;
        }
        while (v100);
      }
      v97 += v11;
    }
  }
  if (v138) {
    float v101 = (float)v134;
  }
  else {
    float v101 = 1.0;
  }
  float v102 = 1.0 / (float)((float)(v101 * (float)v134) * (float)v134);
  if (v138)
  {
    if ((int)v140 >= 1)
    {
      uint64_t v103 = 0;
      uint64_t v104 = v149 + 12;
      int v105 = v11 * (v137 + 1);
      uint64_t v106 = 16 * (int)v11;
      int v107 = (v137 + 1 + v150 + v146) * (v137 + 1);
      LODWORD(result) = v105 * v152;
      int v108 = v136 + v148 * (v135 + v133 * v131);
      uint64_t v109 = v149 + 12;
      do
      {
        if ((int)v151 >= 1)
        {
          uint64_t v110 = 0;
          uint64_t v111 = v104 + 16 * (int)result;
          int v112 = v108;
          int v113 = v107;
          uint64_t v114 = v109;
          int v115 = v105;
          do
          {
            if ((int)v150 >= 1)
            {
              uint64_t v116 = 0;
              int v117 = v137 + 1;
              int v118 = v112;
              do
              {
                *(float *)(v9 + 4 * v118) = v102
                                            * (float)((float)((float)((float)(*(float *)(v111 + v116)
                                                                            - *(float *)(v104
                                                                                       + 16
                                                                                       * (v110 * (int)v11
                                                                                        + (v139 + 1 + v139 + (int)v103)
                                                                                        * v146
                                                                                        + v117)))
                                                                    - *(float *)(v104 + 16 * v113 + v116))
                                                            + *(float *)(v104 + 16 * (v113 + v117)))
                                                    - (float)((float)((float)(*(float *)(v114 + v116)
                                                                            - *(float *)(v104
                                                                                       + 16
                                                                                       * (v110 * (int)v11
                                                                                        + v103 * v146
                                                                                        + v117)))
                                                                    - *(float *)(v104 + 16 * v115 + v116))
                                                            + *(float *)(v104 + 16 * (v115 + v117))));
                v116 += 16;
                ++v118;
                ++v117;
              }
              while (16 * v150 != v116);
            }
            ++v110;
            v115 += v11;
            v114 += v106;
            v113 += v11;
            v111 += v106;
            v112 += v148;
          }
          while (v110 != v151);
        }
        ++v103;
        v105 += v146;
        v109 += 16 * v146;
        v107 += v146;
        double result = (result + v146);
        v108 += v131 * v148;
      }
      while (v103 != v140);
    }
  }
  else if ((int)v151 >= 1)
  {
    uint64_t v119 = 0;
    uint64_t v120 = v149 + 12;
    int v121 = v11 * v134;
    int v122 = v136 + v135 * v148;
    int32x4_t v123 = (float *)(v149 + 12);
    do
    {
      if ((int)v150 >= 1)
      {
        uint64_t v124 = v150;
        int v125 = v134;
        LODWORD(result) = v122;
        int8x16_t v126 = v123;
        int8x16_t v127 = (float *)(v120 + 16 * v121);
        do
        {
          float v128 = *v126;
          v126 += 4;
          float v129 = v128 - *(float *)(v120 + 16 * (v119 * (int)v11 + v125));
          float v130 = *v127;
          v127 += 4;
          *(float *)(v9 + 4 * (int)result) = v102
                                             * (float)((float)(v129 - v130) + *(float *)(v120 + 16 * (v121 + v125)));
          double result = (result + 1);
          ++v125;
          --v124;
        }
        while (v124);
      }
      ++v119;
      v121 += v11;
      v123 += 4 * (int)v11;
      v122 += v148;
    }
    while (v119 != v151);
  }
  return result;
}

uint64_t brent_kung_prefix_sum(uint64_t result, unint64_t a2, int a3)
{
  if (a2 >= 2)
  {
    unint64_t v3 = 2;
    char v4 = 1;
    do
    {
      unint64_t v5 = a2 >> v4;
      if (a2 >> v4)
      {
        uint64_t v6 = result;
        do
        {
          *(float32x4_t *)(v6 + 16 * a3 * (v3 - 1)) = vaddq_f32(*(float32x4_t *)(v6 + 16 * a3 * (v3 - 1)), *(float32x4_t *)(v6 + a3 * (16 * v3 - 16 * (v3 >> 1) - 16)));
          v6 += 16 * (a3 << v4);
          --v5;
        }
        while (v5);
      }
      ++v4;
      v3 *= 2;
    }
    while (v3 <= a2);
    do
    {
      --v4;
      unint64_t v7 = v3 >> 1;
      unint64_t v8 = (a2 - (v3 >> 2)) >> v4;
      if (v8)
      {
        uint64_t v10 = result;
        do
        {
          uint64_t v9 = 16 * a3 * (v7 + (v3 >> 2) - 1);
          *(float32x4_t *)(v10 + v9) = vaddq_f32(*(float32x4_t *)(v10 + v9), *(float32x4_t *)(v10 + a3 * (16 * v7 - 16)));
          v10 += 16 * (a3 << v4);
          --v8;
        }
        while (v8);
      }
      BOOL v11 = v3 > 5;
      v3 >>= 1;
    }
    while (v11);
  }
  return result;
}

uint64_t init_compute_averages(int *a1, int a2, _OWORD *a3, uint64_t a4)
{
  int v4 = *a1;
  int v5 = a1[1];
  unsigned int v6 = a1[2];
  if (v6 <= 1) {
    int v7 = 32;
  }
  else {
    int v7 = 16;
  }
  if (v6 <= 1) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = 16;
  }
  if (v6 <= 1) {
    int v9 = 0;
  }
  else {
    int v9 = (2 * a2) | 1;
  }
  if (v6 > 1) {
    char v10 = 4;
  }
  else {
    char v10 = 5;
  }
  if (v6 < v8) {
    unsigned int v8 = a1[2];
  }
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(void *)a4 = a1;
  *(_OWORD *)(a4 + 8) = *a3;
  *(unsigned char *)(a4 + 24) = v6 > 1;
  *(_DWORD *)(a4 + 28) = a2;
  *(_DWORD *)(a4 + 64) = v4;
  *(_DWORD *)(a4 + 68) = v5;
  *(_DWORD *)(a4 + 72) = v6;
  *(_DWORD *)(a4 + 76) = v7;
  *(_DWORD *)(a4 + 80) = v8;
  *(_DWORD *)(a4 + 84) = 2 * (v7 + ((2 * a2) | 1)) * (v7 + ((2 * a2) | 1)) * (v8 + v9);
  return (v6 + v8 - 1) / v8 * ((v5 + v7 - 1) >> v10);
}

void compute_pixel_region_variance()
{
  __assert_rtn("compute_pixel_region_variance", "astcenc_compute_variance.cpp", 237, "img->data_type == ASTCENC_TYPE_F32");
}

uint64_t get_ise_sequence_bitcount(int a1, unsigned int a2)
{
  if (a2 > 0x14) {
    return 1024;
  }
  else {
    return (((ise_sizes[a2] >> 5) | 1) + (ise_sizes[a2] & 0x3Fu) * a1 - 1) / ((ise_sizes[a2] >> 5) | 1u);
  }
}

uint64_t encode_ise(uint64_t result, unsigned int a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5)
{
  if (!a2) {
    encode_ise();
  }
  char v5 = btq_counts[result];
  int v6 = v5 & 0x3F;
  int v7 = ~(-1 << v5);
  if ((v5 & 0x40) != 0)
  {
    if (a2 >= 5)
    {
      uint64_t v10 = 0;
      unsigned int v11 = a2 / 5;
      int v12 = v6 + 2;
      int v13 = ~(-4 << v6);
      int v14 = ~(-2 << v6);
      int v15 = 3 * v6 + 5;
      double result = (2 * v6 + 4);
      do
      {
        int v16 = &a3[v10];
        uint64_t v17 = a3[v10 + 2] >> v6;
        uint64_t v18 = a3[v10 + 1] >> v6;
        unsigned int v19 = a3[v10];
        unsigned int v20 = integer_of_trits[81 * (a3[v10 + 4] >> v6)
                             + 27 * (a3[v10 + 3] >> v6)
                             + 8 * v17
                             + 2 * v18
                             + v17
                             + v18
                             + (v19 >> v6)];
        *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) = *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) & ~(unsigned __int16)(v13 << (a5 & 7)) | (((((v20 & 3) << v6) | v19 & v7) & v13) << (a5 & 7));
        unint64_t v21 = a5 + v12;
        uint64_t v22 = (unsigned char *)(a4 + (v21 >> 3));
        LOBYTE(v19) = (a5 + v12) & 7;
        LODWORD(v17) = ((a3[v10 + 1] & v7 | (((v20 >> 2) & 3) << v6)) & v13) << v19;
        char v23 = v22[1];
        *uint64_t v22 = *v22 & ~(v13 << v19) | v17;
        v22[1] = v23 & ((unsigned __int16)~((_WORD)v13 << v19) >> 8) | BYTE1(v17);
        int v24 = (unsigned char *)(a4 + ((unint64_t)(result + a5) >> 3));
        LOBYTE(v17) = (2 * v6 + 4 + a5) & 7;
        char v25 = *v24 & ~(v14 << v17);
        int v26 = ~(v14 << v17);
        LODWORD(v17) = ((a3[v10 + 2] & v7 | (((v20 >> 4) & 1) << v6)) & v14) << v17;
        *int v24 = v25 | v17;
        v24[1] = v24[1] & BYTE1(v26) | BYTE1(v17);
        int v27 = (unsigned char *)(a4 + ((unint64_t)(v15 + a5) >> 3));
        LOBYTE(v17) = (v15 + a5) & 7;
        int v28 = v13 << v17;
        LODWORD(v17) = ((a3[v10 + 3] & v7 | (((v20 >> 5) & 3) << v6)) & v13) << v17;
        char v29 = v27[1];
        *int v27 = *v27 & ~(_BYTE)v28 | v17;
        v27[1] = v29 & ~BYTE1(v28) | BYTE1(v17);
        unint64_t v30 = 4 * v6 + 7 + a5;
        v10 += 5;
        LODWORD(v16) = (v16[4] & v7 | (v20 >> 7 << v6)) & v14;
        float32x4_t v31 = (unsigned char *)(a4 + (v30 >> 3));
        LOBYTE(v30) = v30 & 7;
        LODWORD(v22) = v14 << v30;
        LODWORD(v30) = v16 << v30;
        LOBYTE(v27) = v31[1];
        *float32x4_t v31 = *v31 & ~(_BYTE)v22 | v30;
        v31[1] = v27 & ((unsigned __int16)~(_WORD)v22 >> 8) | BYTE1(v30);
        a5 = v21 + v12 + v6 + 1 + v12 + v6 + 1;
        --v11;
      }
      while (v11);
    }
    else
    {
      LODWORD(v10) = 0;
    }
    if (a2 != v10)
    {
      unsigned int v32 = (int)v10 + 3 >= a2 ? 0 : a3[(v10 + 3)] >> v6;
      uint64_t v34 = (int)v10 + 2 >= a2 ? 0 : a3[(v10 + 2)] >> v6;
      uint64_t v35 = (int)v10 + 1 >= a2 ? 0 : a3[(v10 + 1)] >> v6;
      int v36 = a2 - v10;
      if (a2 > v10)
      {
        uint64_t v37 = &a3[v10];
        unsigned int v38 = integer_of_trits[27 * v32 + 9 * v34 + 3 * v35 + (*v37 >> v6)];
        int v39 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tshift;
        uint64_t v40 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tbits;
        do
        {
          int v41 = *v37++;
          int v42 = v41 & v7;
          LOBYTE(v41) = *v39++;
          unsigned int v43 = v38 >> v41;
          int v44 = *v40++;
          double result = a4 + ((unint64_t)a5 >> 3);
          *(_WORD *)double result = *(_WORD *)result & ~(unsigned __int16)(~(-1 << (v44 + v6)) << (a5 & 7)) | (((((v43 & ~(-1 << v44)) << v6) | v42) & ~(-1 << (v44 + v6))) << (a5 & 7));
          a5 += v44 + v6;
          --v36;
        }
        while (v36);
      }
    }
  }
  else if ((btq_counts[result] & 0x80) != 0)
  {
    if (a2 >= 3)
    {
      uint64_t v33 = 0;
      unsigned int v45 = a2 / 3;
      int v46 = v6 + 3;
      int v47 = ~(-8 << v6);
      int v48 = ~(-4 << v6);
      double result = 25;
      do
      {
        uint16x4_t v50 = &a3[v33];
        unsigned int v51 = a3[v33];
        uint64_t v52 = a3[v33 + 1] >> v6;
        unsigned int v53 = integer_of_quints[25 * (a3[v33 + 2] >> v6) + 4 * v52 + v52 + (v51 >> v6)];
        LODWORD(v52) = (((v53 & 7) << v6) | v51 & v7) & v47;
        uint64_t v54 = (unsigned char *)(a4 + ((unint64_t)a5 >> 3));
        int v55 = v47 << (a5 & 7);
        LODWORD(v52) = v52 << (a5 & 7);
        char v56 = v54[1];
        *uint64_t v54 = *v54 & ~(_BYTE)v55 | v52;
        v54[1] = v56 & ((unsigned __int16)~(_WORD)v55 >> 8) | BYTE1(v52);
        float32x4_t v57 = (unsigned __int8 *)(a4 + ((unint64_t)(v46 + a5) >> 3));
        LOBYTE(v52) = (v46 + a5) & 7;
        int v58 = *v57 & ~(v48 << v52);
        int v59 = ~(v48 << v52);
        LODWORD(v52) = ((a3[v33 + 1] & v7 | (((v53 >> 3) & 3) << v6)) & v48) << v52;
        *float32x4_t v57 = v58 | v52;
        v57[1] = v57[1] & BYTE1(v59) | BYTE1(v52);
        v33 += 3;
        int v49 = 2 * v6 + 5;
        *(_WORD *)(a4 + ((unint64_t)(v49 + a5) >> 3)) = *(_WORD *)(a4 + ((unint64_t)(v49 + a5) >> 3)) & ~(unsigned __int16)(v48 << ((v49 + a5) & 7)) | (((v50[2] & v7 | (((v53 >> 5) & 3) << v6)) & v48) << ((v49 + a5) & 7));
        a5 += 3 * v6 + 7;
        --v45;
      }
      while (v45);
    }
    else
    {
      LODWORD(v33) = 0;
    }
    if (a2 != v33)
    {
      if ((int)v33 + 1 >= a2) {
        uint64_t v60 = 0;
      }
      else {
        uint64_t v60 = a3[(v33 + 1)] >> v6;
      }
      int v61 = a2 - v33;
      if (a2 > v33)
      {
        int v62 = &a3[v33];
        unsigned int v63 = integer_of_quints[5 * v60 + (*v62 >> v6)];
        int32x4_t v64 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tshift;
        uint16x4_t v65 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tbits;
        do
        {
          int v66 = *v62++;
          int v67 = v66 & v7;
          LOBYTE(v66) = *v64++;
          unsigned int v68 = v63 >> v66;
          int v69 = *v65++;
          double result = a4 + ((unint64_t)a5 >> 3);
          *(_WORD *)double result = *(_WORD *)result & ~(unsigned __int16)(~(-1 << (v69 + v6)) << (a5 & 7)) | (((((v68 & ~(-1 << v69)) << v6) | v67) & ~(-1 << (v69 + v6))) << (a5 & 7));
          a5 += v69 + v6;
          --v61;
        }
        while (v61);
      }
    }
  }
  else
  {
    uint64_t v8 = a2;
    do
    {
      int v9 = *a3++;
      *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) = *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) & ~(unsigned __int16)(v7 << (a5 & 7)) | ((v9 & v7) << (a5 & 7));
      a5 += v6;
      --v8;
    }
    while (v8);
  }
  return result;
}

void encode_ise()
{
}

uint64_t FSE_versionNumber()
{
  return 900;
}

BOOL FSE_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

const char *FSE_getErrorName()
{
  return ERR_getErrorString();
}

BOOL HUF_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

const char *HUF_getErrorName()
{
  return ERR_getErrorString();
}

unint64_t FSE_readNCount_bmi2(void *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, size_t a5)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  if (a5 <= 7)
  {
    v42[0] = 0;
    memcpy(v42, a4, a5);
    unint64_t result = FSE_readNCount_bmi2(a1, a2, a3, v42, 8);
    if (result > a5 && result < 0xFFFFFFFFFFFFFF89) {
      return -20;
    }
    return result;
  }
  uint64_t v12 = (*a2 + 1);
  bzero(a1, 2 * v12);
  unsigned int v13 = *a4 & 0xF;
  if (v13 > 0xA) {
    return -44;
  }
  unsigned int v14 = 0;
  unsigned int v15 = *a4 >> 4;
  *a3 = v13 + 5;
  int v16 = 32 << v13;
  signed int v17 = (32 << v13) | 1;
  unsigned int v18 = v13 + 6;
  unint64_t v19 = (unint64_t)a4 + a5 - 7;
  unsigned int v20 = (_DWORD *)((char *)a4 + a5 - 4);
  int v21 = 4;
  uint64_t v22 = a4;
  while (1)
  {
    int v30 = 2 * v16 - 1;
    unsigned int v31 = v30 - v17;
    unsigned int v32 = v15 & (v16 - 1);
    int v33 = v15 & v30;
    if (v33 >= v16) {
      int v34 = v30 - v17;
    }
    else {
      int v34 = 0;
    }
    int v35 = v33 - v34;
    unsigned int v36 = v18 - 1;
    if (v32 < v31) {
      int v35 = v32;
    }
    else {
      unsigned int v36 = v18;
    }
    int v28 = v36 + v21;
    int v37 = v35 - 1;
    if (v35 <= 0) {
      int v38 = v35 - 1;
    }
    else {
      int v38 = 1 - v35;
    }
    v17 += v38;
    *((_WORD *)a1 + v14++) = v37;
    BOOL v39 = v37 != 0;
    if (v17 < v16)
    {
      if (v17 < 2) {
        goto LABEL_43;
      }
      unsigned int v40 = __clz(v17);
      unsigned int v18 = 32 - v40;
      int v16 = 1 << (v40 ^ 0x1F);
    }
    if (v14 >= v12) {
      break;
    }
    uint64_t v41 = (uint64_t)v28 >> 3;
    if ((unint64_t)v22 <= v19 || (_DWORD *)((char *)v22 + v41) <= v20)
    {
      uint64_t v22 = (_DWORD *)((char *)v22 + v41);
      int v21 = v28 & 7;
      unsigned int v15 = *v22 >> v21;
      if (!v39) {
        goto LABEL_11;
      }
    }
    else
    {
      int v21 = ((_BYTE)v28 + 8 * ((_BYTE)v22 - (_BYTE)v20)) & 0x1F;
      uint64_t v22 = (_DWORD *)((char *)a4 + a5 - 4);
      unsigned int v15 = *v20 >> v21;
      if (!v39)
      {
LABEL_11:
        unsigned int v23 = __clz(__rbit32(~v15 | 0x80000000));
        if (v23 >= 0x18)
        {
          do
          {
            int v24 = ((_BYTE)v21 + 8 * ((_BYTE)v22 - (_BYTE)v19)) & 0x1F;
            BOOL v25 = (unint64_t)v22 > v19;
            if ((unint64_t)v22 <= v19) {
              uint64_t v22 = (_DWORD *)((char *)v22 + 3);
            }
            else {
              uint64_t v22 = (_DWORD *)((char *)a4 + a5 - 4);
            }
            if (v25) {
              int v21 = v24;
            }
            unsigned int v15 = *v22 >> v21;
            unsigned int v23 = __clz(__rbit32(~v15 | 0x80000000));
            v14 += 36;
          }
          while (v23 > 0x17);
        }
        int v26 = 3 * (v23 >> 1);
        int v27 = v23 & 0x1E;
        v14 += v26 + ((v15 >> v27) & 3);
        int v28 = v21 + v27 + 2;
        if (v14 >= v12) {
          goto LABEL_43;
        }
        uint64_t v29 = v28 >> 3;
        if ((unint64_t)v22 <= v19 || (_DWORD *)((char *)v22 + v29) <= v20)
        {
          uint64_t v22 = (_DWORD *)((char *)v22 + v29);
          int v21 = v28 & 7;
        }
        else
        {
          int v21 = ((_BYTE)v28 + 8 * ((_BYTE)v22 - (_BYTE)v20)) & 0x1F;
          uint64_t v22 = (_DWORD *)((char *)a4 + a5 - 4);
        }
        unsigned int v15 = *v22 >> v21;
      }
    }
  }
  if (v17 != 1) {
    return -20;
  }
LABEL_43:
  if (v14 > v12) {
    return -48;
  }
  if (v28 > 32) {
    return -20;
  }
  *a2 = v14 - 1;
  return (char *)v22 + ((v28 + 7) >> 3) - (char *)a4;
}

uint64_t HUF_readStats(unsigned __int8 *a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  return HUF_readStats_wksp(a1, a2, a3, a4, a5, a6, a7, v8, 0x164uLL);
}

uint64_t HUF_readStats_wksp(unsigned __int8 *a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7, unsigned __int16 *a8, unint64_t a9)
{
  if (!a7) {
    return -72;
  }
  unint64_t v13 = *a6;
  if (*a6 < 0)
  {
    unint64_t v15 = (v13 - 126) >> 1;
    if (v15 >= a7) {
      return -72;
    }
    unint64_t v14 = v13 - 127;
    if (v13 - 127 < a2)
    {
      if (v13 != 127)
      {
        if ((v13 - 127) <= 2uLL) {
          unint64_t v18 = 2;
        }
        else {
          unint64_t v18 = (v13 - 127);
        }
        if (v18 < 0xF
          || ((unint64_t v19 = (unint64_t)(a6 + 1), v20 = (v18 - 1) >> 1, &a6[v20 + 2] > (char *)a1)
            ? (BOOL v21 = v19 >= (unint64_t)&a1[((v18 - 1) & 0xFFFFFFFFFFFFFFFELL) + 2])
            : (BOOL v21 = 1),
              !v21))
        {
          unint64_t v24 = 0;
          goto LABEL_23;
        }
        unint64_t v22 = v20 + 1;
        if (v18 >= 0x3F)
        {
          uint64_t v37 = 0;
          uint64_t v23 = v22 & 0x7FFFFFFFFFFFFFE0;
          int v38 = (char *)(a1 + 32);
          v39.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v39.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          do
          {
            unint64_t v40 = v19 + (v37 & 0x7FFFFFFFFFFFFFE0);
            int8x16_t v41 = *(int8x16_t *)(v40 + 16);
            v47.val[0] = (int8x16_t)vshrq_n_u8(*(uint8x16_t *)v40, 4uLL);
            v47.val[1] = vandq_s8(*(int8x16_t *)v40, v39);
            int v42 = v38 - 32;
            vst2q_s8(v42, v47);
            v47.val[0] = (int8x16_t)vshrq_n_u8((uint8x16_t)v41, 4uLL);
            v47.val[1] = vandq_s8(v41, v39);
            vst2q_s8(v38, v47);
            v37 += 32;
            v38 += 64;
          }
          while (v23 != v37);
          if (v22 == v23) {
            goto LABEL_25;
          }
          if ((v22 & 0x18) == 0)
          {
            unint64_t v24 = 2 * v23;
LABEL_23:
            BOOL v25 = (unsigned __int8 *)&a6[(v24 >> 1) + 1];
            do
            {
              int v26 = &a1[v24];
              *int v26 = *v25 >> 4;
              char v27 = *v25++;
              v26[1] = v27 & 0xF;
              v24 += 2;
            }
            while (v24 < (v13 - 127));
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v23 = 0;
        }
        uint64_t v43 = v22 & 0x7FFFFFFFFFFFFFF8;
        unint64_t v24 = 2 * (v22 & 0x7FFFFFFFFFFFFFF8);
        int v44 = (char *)&a1[2 * v23];
        do
        {
          int8x8_t v45 = *(int8x8_t *)(v19 + (v23 & 0x7FFFFFFFFFFFFFF8));
          v46.val[0] = (int8x8_t)vshr_n_u8((uint8x8_t)v45, 4uLL);
          v46.val[1] = vand_s8(v45, (int8x8_t)0xF0F0F0F0F0F0F0FLL);
          vst2_s8(v44, v46);
          v44 += 16;
          v23 += 8;
        }
        while (v43 != v23);
        if (v22 != v43) {
          goto LABEL_23;
        }
LABEL_25:
        *(_DWORD *)(a3 + 48) = 0;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
        if (v14)
        {
          unint64_t v28 = 0;
          unsigned int v29 = 0;
          unsigned int v30 = 1;
          while (1)
          {
            unint64_t v31 = a1[v28];
            if (v31 > 0xB) {
              break;
            }
            ++*(_DWORD *)(a3 + 4 * v31);
            v29 += 1 << a1[v28] >> 1;
            unint64_t v28 = v30++;
            if (v14 <= v28)
            {
              if (!v29) {
                return -20;
              }
              unsigned int v32 = __clz(v29);
              if ((v32 ^ 0x1F) > 0xB) {
                return -20;
              }
              *a5 = 32 - v32;
              unsigned int v33 = (2 << (v32 ^ 0x1F)) - v29;
              unsigned int v34 = __clz(v33) ^ 0x1F;
              if (1 << v34 != v33) {
                return -20;
              }
              unsigned int v35 = v34 + 1;
              a1[v14] = v35;
              ++*(_DWORD *)(a3 + 4 * v35);
              unsigned int v36 = *(_DWORD *)(a3 + 4);
              uint64_t v16 = -20;
              if (v36 >= 2 && (v36 & 1) == 0)
              {
                *a4 = v14 + 1;
                return v15 + 1;
              }
              return v16;
            }
          }
        }
        return -20;
      }
      *(_DWORD *)(a3 + 48) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
    }
    return -20;
  }
  if (v13 < a7)
  {
    unint64_t v14 = FSE_decompress_wksp_bmi2(a1, a2 - 1, a6 + 1, *a6, 6u, a8, a9);
    unint64_t v15 = v13;
    uint64_t v16 = v14;
    if (v14 > 0xFFFFFFFFFFFFFF88) {
      return v16;
    }
    goto LABEL_25;
  }
  return -72;
}

const char *ERR_getErrorString()
{
  unint64_t result = "No error detected";
  switch("No error detected")
  {
    case 0u:
      return result;
    case 1u:
      unint64_t result = "Error (generic)";
      break;
    case 0xAu:
      unint64_t result = "Unknown frame descriptor";
      break;
    case 0xCu:
      unint64_t result = "Version not supported";
      break;
    case 0xEu:
      unint64_t result = "Unsupported frame parameter";
      break;
    case 0x10u:
      unint64_t result = "Frame requires too much memory for decoding";
      break;
    case 0x14u:
      unint64_t result = "Corrupted block detected";
      break;
    case 0x16u:
      unint64_t result = "Restored data doesn't match checksum";
      break;
    case 0x1Eu:
      unint64_t result = "Dictionary is corrupted";
      break;
    case 0x20u:
      unint64_t result = "Dictionary mismatch";
      break;
    case 0x22u:
      unint64_t result = "Cannot create Dictionary from provided samples";
      break;
    case 0x28u:
      unint64_t result = "Unsupported parameter";
      break;
    case 0x2Au:
      unint64_t result = "Parameter is out of bound";
      break;
    case 0x2Cu:
      unint64_t result = "tableLog requires too much memory : unsupported";
      break;
    case 0x2Eu:
      unint64_t result = "Unsupported max Symbol Value : too large";
      break;
    case 0x30u:
      unint64_t result = "Specified maxSymbolValue is too small";
      break;
    case 0x3Cu:
      unint64_t result = "Operation not authorized at current processing stage";
      break;
    case 0x3Eu:
      unint64_t result = "Context should be init first";
      break;
    case 0x40u:
      unint64_t result = "Allocation error : not enough memory";
      break;
    case 0x42u:
      unint64_t result = "workSpace buffer is not large enough";
      break;
    case 0x46u:
      unint64_t result = "Destination buffer is too small";
      break;
    case 0x48u:
      unint64_t result = "Src size is incorrect";
      break;
    case 0x4Au:
      unint64_t result = "Operation on NULL destination buffer";
      break;
    case 0x64u:
      unint64_t result = "Frame index is too large";
      break;
    case 0x66u:
      unint64_t result = "An I/O error occurred when reading/seeking";
      break;
    case 0x68u:
      unint64_t result = "Destination buffer is wrong";
      break;
    case 0x69u:
      unint64_t result = "Source buffer is wrong";
      break;
    default:
      unint64_t result = "Unspecified error code";
      break;
  }
  return result;
}

void *FSE_createDTable(unsigned int a1)
{
  if (a1 >= 0xF) {
    char v1 = 15;
  }
  else {
    char v1 = a1;
  }
  return malloc_type_malloc(((4 << v1) + 4), 0x100004052888210uLL);
}

uint64_t FSE_buildDTable_internal(_WORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = -46;
  if (a3 > 0xFF) {
    return v6;
  }
  uint64_t v7 = a3 + 1;
  if ((1 << a4) + 2 * (unint64_t)v7 + 8 > a6) {
    return v6;
  }
  if (a4 > 0xC) {
    return -44;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 2;
  uint64_t v11 = a5 + 2 * a3;
  unint64_t v12 = (1 << a4);
  uint64_t v13 = (v12 - 1);
  __int16 v14 = 1;
  unsigned int v15 = v12 - 1;
  do
  {
    while (1)
    {
      signed int v16 = *(__int16 *)(a2 + 2 * v9);
      if (v16 != -1) {
        break;
      }
      signed int v17 = &v10[2 * v15--];
      *((unsigned char *)v17 + 2) = v9;
      *(_WORD *)(a5 + 2 * v9++) = 1;
      if (v7 == v9) {
        goto LABEL_12;
      }
    }
    if ((int)((0x8000 << a4) >> 16) <= v16) {
      __int16 v14 = 0;
    }
    *(_WORD *)(a5 + 2 * v9++) = v16;
  }
  while (v7 != v9);
LABEL_12:
  *a1 = a4;
  a1[1] = v14;
  unsigned int v18 = v12 >> 1;
  if (v15 == v13)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    unsigned int v22 = v18 + (v12 >> 3) + 3;
    uint64_t v23 = a5 + 2 * a3;
    while (1)
    {
      int v24 = *(__int16 *)(a2 + 2 * v19);
      unint64_t v25 = *(unsigned __int16 *)(a2 + 2 * v19);
      *(void *)(v11 + 2 + v21) = v20;
      if (v24 >= 9)
      {
        if (v25 <= 0x10) {
          uint64_t v26 = 16;
        }
        else {
          uint64_t v26 = v25;
        }
        unint64_t v27 = v26 - 9;
        if (v27 >= 0x18)
        {
          uint64_t v29 = (v27 >> 3) + 1;
          unint64_t v28 = (32 * ((v29 & 0x3FFFFFFFFFFFFFFCuLL) >> 2)) | 8;
          int64x2_t v30 = vdupq_n_s64(v20);
          unint64_t v31 = (int64x2_t *)(v23 + 26 + v21);
          uint64_t v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v31[-1] = v30;
            *unint64_t v31 = v30;
            v31 += 2;
            v32 -= 4;
          }
          while (v32);
          if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v28 = 8;
        }
        unint64_t v33 = v28 + 2;
        do
        {
          *(void *)(v23 + v21 + v33) = v20;
          unint64_t v34 = v33 + 6;
          v33 += 8;
        }
        while (v34 < v25);
      }
LABEL_14:
      v21 += (__int16)v25;
      ++v19;
      v20 += 0x101010101010101;
      if (v19 == v7)
      {
        unint64_t v39 = 0;
        uint64_t v40 = 0;
        do
        {
          LOBYTE(v10[2 * (v40 & v13) + 1]) = *(unsigned char *)(v11 + v39 + 2);
          LOBYTE(v10[2 * ((v40 + v22) & v13) + 1]) = *(unsigned char *)(v11 + v39 + 3);
          uint64_t v40 = (v40 + 2 * v22) & v13;
          v39 += 2;
        }
        while (v39 < v12);
        goto LABEL_40;
      }
    }
  }
  uint64_t v35 = 0;
  unsigned int v36 = 0;
  do
  {
    int v37 = *(__int16 *)(a2 + 2 * v35);
    if (v37 >= 1)
    {
      for (int i = 0; i != v37; ++i)
      {
        LOBYTE(v10[2 * v36 + 1]) = v35;
        do
          unsigned int v36 = (v18 + (v12 >> 3) + 3 + v36) & v13;
        while (v36 > v15);
      }
    }
    ++v35;
  }
  while (v35 != v7);
  if (v36) {
    return -1;
  }
LABEL_40:
  int8x16_t v41 = (char *)a1 + 7;
  uint64_t v42 = (1 << a4);
  do
  {
    uint64_t v43 = 2 * *(v41 - 1);
    unsigned int v44 = *(unsigned __int16 *)(a5 + v43);
    *(_WORD *)(a5 + v43) = v44 + 1;
    LOBYTE(v43) = a4 + 1 + (__clz(v44) ^ 0xE0);
    *int8x16_t v41 = v43;
    *(_WORD *)(v41 - 3) = ((_WORD)v44 << v43) - v12;
    v41 += 4;
    --v42;
  }
  while (v42);
  return 0;
}

uint64_t FSE_buildDTable_rle(uint64_t a1, char a2)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 6) = a2;
  *(unsigned char *)(a1 + 7) = 0;
  return 0;
}

uint64_t FSE_buildDTable_raw(_WORD *a1, int a2)
{
  if (!a2) {
    return -1;
  }
  *a1 = a2;
  unsigned int v2 = 1;
  a1[1] = 1;
  do
  {
    uint64_t v3 = (uint64_t)&a1[2 * v2];
    *(_WORD *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 2) = v2 - 1;
    *(unsigned char *)(v3 + 3) = a2;
  }
  while (!(v2++ >> a2));
  return 0;
}

uint64_t FSE_decompress_usingDTable(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  char v5 = &a1[a2];
  unint64_t v6 = (unint64_t)&a1[a2 - 3];
  if (a5[1])
  {
    if (a4)
    {
      uint64_t v7 = a4 - 8;
      if (a4 >= 8)
      {
        if (a3[a4 - 1])
        {
          if (a4 > 0xFFFFFFFFFFFFFF88) {
            return a4;
          }
          unint64_t v8 = *(void *)&a3[v7];
          unsigned int v9 = __clz(a3[a4 - 1]) - 23;
LABEL_22:
          uint64_t v14 = *a5;
          unsigned int v15 = v9 + v14;
          unint64_t v16 = v8 >> -(char)v15;
          uint64_t v17 = BIT_mask[v14];
          if (v15 > 0x40) {
            goto LABEL_49;
          }
          if (v7 >= 8)
          {
            unsigned int v18 = v15 >> 3;
            v15 &= 7u;
          }
          else
          {
            if (!v7) {
              goto LABEL_49;
            }
            if (&a3[v7 - (v15 >> 3)] >= a3) {
              unsigned int v18 = v15 >> 3;
            }
            else {
              unsigned int v18 = v7;
            }
            v15 -= 8 * v18;
          }
          v7 -= v18;
          unint64_t v8 = *(void *)&a3[v7];
LABEL_49:
          uint64_t v24 = v16 & v17;
          unsigned int v25 = v15 + v14;
          unint64_t v26 = (v8 >> -(char)(v15 + v14)) & v17;
          if (v25 > 0x40) {
            goto LABEL_58;
          }
          if (v7 >= 8)
          {
            unsigned int v27 = v25 >> 3;
            v25 &= 7u;
          }
          else
          {
            if (!v7) {
              goto LABEL_58;
            }
            if (&a3[v7 - (v25 >> 3)] >= a3) {
              unsigned int v27 = v25 >> 3;
            }
            else {
              unsigned int v27 = v7;
            }
            v25 -= 8 * v27;
          }
          v7 -= v27;
          unint64_t v8 = *(void *)&a3[v7];
LABEL_58:
          unint64_t v28 = a5 + 2;
          uint64_t v29 = a1;
          if (v25 > 0x40)
          {
LABEL_69:
            unint64_t v52 = (unint64_t)(v5 - 2);
            if (v29 <= v5 - 2)
            {
LABEL_70:
              unsigned int v53 = (unsigned char *)(v29 - a1);
              uint64_t v54 = v29 + 1;
              uint64_t v55 = 2;
              while (1)
              {
                char v56 = &v28[2 * v24];
                uint64_t v57 = *v56;
                char v58 = *((unsigned char *)v56 + 2);
                int v59 = *((unsigned __int8 *)v56 + 3);
                unsigned int v60 = v25 + v59;
                *(v54 - 1) = v58;
                if (v25 + v59 > 0x40)
                {
LABEL_145:
                  *uint64_t v54 = v28[2 * v26 + 1];
                  return (uint64_t)&v53[v55];
                }
                if (v7 >= 8)
                {
                  unsigned int v63 = v60 >> 3;
                  v60 &= 7u;
                  v7 -= v63;
                  unint64_t v62 = *(void *)&a3[v7];
                  if ((unint64_t)v54 > v52) {
                    return -70;
                  }
                }
                else if (v7)
                {
                  if (&a3[v7 - (v60 >> 3)] >= a3) {
                    unsigned int v61 = v60 >> 3;
                  }
                  else {
                    unsigned int v61 = v7;
                  }
                  v60 -= 8 * v61;
                  v7 -= v61;
                  unint64_t v62 = *(void *)&a3[v7];
                  if ((unint64_t)v54 > v52) {
                    return -70;
                  }
                }
                else
                {
                  unint64_t v62 = v8;
                  if ((unint64_t)v54 > v52) {
                    return -70;
                  }
                }
                uint64_t v24 = (v8 << v25 >> -(char)v59) + v57;
                int32x4_t v64 = &v28[2 * v26];
                uint64_t v65 = *v64;
                int v66 = *((unsigned __int8 *)v64 + 3);
                unsigned int v25 = v60 + v66;
                *uint64_t v54 = *((unsigned char *)v64 + 2);
                if (v60 + v66 > 0x40)
                {
                  ++v54;
                  uint64_t v55 = 3;
                  unint64_t v26 = v24;
                  goto LABEL_145;
                }
                if (v7 >= 8)
                {
                  unsigned int v67 = v25 >> 3;
                  v25 &= 7u;
                }
                else
                {
                  if (!v7)
                  {
                    unint64_t v8 = v62;
                    goto LABEL_91;
                  }
                  if (&a3[v7 - (v25 >> 3)] >= a3) {
                    unsigned int v67 = v25 >> 3;
                  }
                  else {
                    unsigned int v67 = v7;
                  }
                  v25 -= 8 * v67;
                }
                v7 -= v67;
                unint64_t v8 = *(void *)&a3[v7];
LABEL_91:
                unint64_t v26 = (v62 << v60 >> -(char)v66) + v65;
                v53 += 2;
                unsigned int v68 = v54 + 1;
                v54 += 2;
                a4 = -70;
                if ((unint64_t)v68 > v52) {
                  return a4;
                }
              }
            }
          }
          else
          {
            while (1)
            {
              if (v7 >= 8)
              {
                BOOL v31 = 0;
                unsigned int v32 = v25 >> 3;
                v25 &= 7u;
              }
              else
              {
                if (!v7) {
                  goto LABEL_69;
                }
                int64x2_t v30 = &a3[v7 - (v25 >> 3)];
                BOOL v31 = v30 < a3;
                unsigned int v32 = v30 >= a3 ? v25 >> 3 : v7;
                v25 -= 8 * v32;
              }
              v7 -= v32;
              unint64_t v8 = *(void *)&a3[v7];
              if ((unint64_t)v29 >= v6 || v31) {
                break;
              }
              unint64_t v33 = &v28[2 * v24];
              uint64_t v34 = *v33;
              char v35 = *((unsigned char *)v33 + 2);
              LODWORD(v33) = *((unsigned __int8 *)v33 + 3);
              unint64_t v36 = v8 << v25 >> -(char)v33;
              unsigned int v37 = v25 + v33;
              uint64_t v38 = v36 + v34;
              *uint64_t v29 = v35;
              unint64_t v39 = &v28[2 * v26];
              uint64_t v40 = *v39;
              char v41 = *((unsigned char *)v39 + 2);
              LODWORD(v39) = *((unsigned __int8 *)v39 + 3);
              unint64_t v42 = v8 << v37 >> -(char)v39;
              LODWORD(v39) = v37 + v39;
              uint64_t v43 = v42 + v40;
              v29[1] = v41;
              unsigned int v44 = &v28[2 * v38];
              uint64_t v45 = *v44;
              char v46 = *((unsigned char *)v44 + 2);
              LODWORD(v44) = *((unsigned __int8 *)v44 + 3);
              unint64_t v47 = v8 << (char)v39 >> -(char)v44;
              LODWORD(v39) = v39 + v44;
              uint64_t v24 = v47 + v45;
              _OWORD v29[2] = v46;
              int v48 = &v28[2 * v43];
              uint64_t v49 = *v48;
              char v50 = *((unsigned char *)v48 + 2);
              LODWORD(v48) = *((unsigned __int8 *)v48 + 3);
              unint64_t v51 = v8 << (char)v39 >> -(char)v48;
              unsigned int v25 = v39 + v48;
              unint64_t v26 = v51 + v49;
              v29[3] = v50;
              v29 += 4;
              if (v25 > 0x40) {
                goto LABEL_69;
              }
            }
            unint64_t v52 = (unint64_t)(v5 - 2);
            if (v29 <= v5 - 2) {
              goto LABEL_70;
            }
          }
          return -70;
        }
        return -1;
      }
      unint64_t v8 = *a3;
      switch(a4)
      {
        case 2uLL:
          goto LABEL_19;
        case 3uLL:
          goto LABEL_18;
        case 4uLL:
          goto LABEL_17;
        case 5uLL:
          goto LABEL_16;
        case 6uLL:
          goto LABEL_15;
        case 7uLL:
          v8 |= (unint64_t)a3[6] << 48;
LABEL_15:
          v8 += (unint64_t)a3[5] << 40;
LABEL_16:
          v8 += (unint64_t)a3[4] << 32;
LABEL_17:
          v8 += (unint64_t)a3[3] << 24;
LABEL_18:
          v8 += (unint64_t)a3[2] << 16;
LABEL_19:
          v8 += (unint64_t)a3[1] << 8;
          break;
        default:
          break;
      }
      if (a3[a4 - 1])
      {
        uint64_t v7 = 0;
        unsigned int v9 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
        goto LABEL_22;
      }
      return -20;
    }
    return -72;
  }
  if (!a4) {
    return -72;
  }
  uint64_t v10 = a4 - 8;
  if (a4 < 8)
  {
    unint64_t v11 = *a3;
    switch(a4)
    {
      case 2uLL:
        goto LABEL_35;
      case 3uLL:
        goto LABEL_34;
      case 4uLL:
        goto LABEL_33;
      case 5uLL:
        goto LABEL_32;
      case 6uLL:
        goto LABEL_31;
      case 7uLL:
        v11 |= (unint64_t)a3[6] << 48;
LABEL_31:
        v11 += (unint64_t)a3[5] << 40;
LABEL_32:
        v11 += (unint64_t)a3[4] << 32;
LABEL_33:
        v11 += (unint64_t)a3[3] << 24;
LABEL_34:
        v11 += (unint64_t)a3[2] << 16;
LABEL_35:
        v11 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1]) {
      return -20;
    }
    uint64_t v10 = 0;
    unsigned int v12 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
  }
  else
  {
    if (!a3[a4 - 1]) {
      return -1;
    }
    if (a4 > 0xFFFFFFFFFFFFFF88) {
      return a4;
    }
    unint64_t v11 = *(void *)&a3[v10];
    unsigned int v12 = __clz(a3[a4 - 1]) - 23;
  }
  uint64_t v19 = *a5;
  unsigned int v20 = v12 + v19;
  unint64_t v21 = v11 >> -(char)(v12 + v19);
  uint64_t v22 = BIT_mask[v19];
  if (v12 + v19 <= 0x40)
  {
    if (v10 >= 8)
    {
      unsigned int v23 = v20 >> 3;
      v20 &= 7u;
    }
    else
    {
      if (!v10) {
        goto LABEL_98;
      }
      if (&a3[v10 - (v20 >> 3)] >= a3) {
        unsigned int v23 = v20 >> 3;
      }
      else {
        unsigned int v23 = v10;
      }
      v20 -= 8 * v23;
    }
    v10 -= v23;
    unint64_t v11 = *(void *)&a3[v10];
  }
LABEL_98:
  uint64_t v69 = v21 & v22;
  unsigned int v70 = v20 + v19;
  unint64_t v71 = (v11 >> -(char)(v20 + v19)) & v22;
  if (v70 <= 0x40)
  {
    if (v10 >= 8)
    {
      unsigned int v72 = v70 >> 3;
      v70 &= 7u;
LABEL_106:
      v10 -= v72;
      unint64_t v11 = *(void *)&a3[v10];
      goto LABEL_107;
    }
    if (v10)
    {
      if (&a3[v10 - (v70 >> 3)] >= a3) {
        unsigned int v72 = v70 >> 3;
      }
      else {
        unsigned int v72 = v10;
      }
      v70 -= 8 * v72;
      goto LABEL_106;
    }
  }
LABEL_107:
  float32x4_t v73 = a5 + 2;
  for (int i = a1; v70 <= 0x40; i += 4)
  {
    if (v10 >= 8)
    {
      BOOL v76 = 0;
      unsigned int v77 = v70 >> 3;
      v70 &= 7u;
    }
    else
    {
      if (!v10) {
        break;
      }
      uint64_t v75 = &a3[v10 - (v70 >> 3)];
      BOOL v76 = v75 < a3;
      if (v75 >= a3) {
        unsigned int v77 = v70 >> 3;
      }
      else {
        unsigned int v77 = v10;
      }
      v70 -= 8 * v77;
    }
    v10 -= v77;
    unint64_t v11 = *(void *)&a3[v10];
    if ((unint64_t)i >= v6) {
      break;
    }
    if (v76) {
      break;
    }
    int16x8_t v78 = &v73[2 * v69];
    uint64_t v79 = *v78;
    char v80 = *((unsigned char *)v78 + 2);
    uint64_t v81 = *((unsigned __int8 *)v78 + 3);
    int v82 = v70 + v81;
    uint64_t v83 = ((v11 >> -(char)v82) & BIT_mask[v81]) + v79;
    *int i = v80;
    uint64_t v84 = &v73[2 * v71];
    uint64_t v85 = *v84;
    char v86 = *((unsigned char *)v84 + 2);
    uint64_t v87 = *((unsigned __int8 *)v84 + 3);
    int v88 = v82 + v87;
    uint64_t v89 = ((v11 >> -(char)v88) & BIT_mask[v87]) + v85;
    i[1] = v86;
    uint64_t v90 = &v73[2 * v83];
    uint64_t v91 = *v90;
    char v92 = *((unsigned char *)v90 + 2);
    uint64_t v93 = *((unsigned __int8 *)v90 + 3);
    int v94 = v88 + v93;
    uint64_t v69 = ((v11 >> -(char)v94) & BIT_mask[v93]) + v91;
    i[2] = v92;
    uint64_t v95 = &v73[2 * v89];
    uint64_t v96 = *v95;
    char v97 = *((unsigned char *)v95 + 2);
    uint64_t v98 = *((unsigned __int8 *)v95 + 3);
    unsigned int v70 = v94 + v98;
    unint64_t v71 = ((v11 >> -(char)v70) & BIT_mask[v98]) + v96;
    i[3] = v97;
  }
  unint64_t v99 = (unint64_t)(v5 - 2);
  if (i > v5 - 2) {
    return -70;
  }
  unsigned int v53 = (unsigned char *)(i - a1);
  uint64_t v100 = i + 1;
  uint64_t v55 = 2;
  while (1)
  {
    float v101 = &v73[2 * v69];
    uint64_t v102 = *v101;
    char v103 = *((unsigned char *)v101 + 2);
    uint64_t v104 = *((unsigned __int8 *)v101 + 3);
    unsigned int v105 = v70 + v104;
    uint64_t v106 = BIT_mask[v104];
    *(v100 - 1) = v103;
    if (v105 > 0x40) {
      break;
    }
    if (v10 >= 8)
    {
      int v108 = v105 & 7;
      v10 -= v105 >> 3;
      unint64_t v109 = *(void *)&a3[v10];
      if ((unint64_t)v100 > v99) {
        return -70;
      }
    }
    else if (v10)
    {
      if (&a3[v10 - (v105 >> 3)] >= a3) {
        unsigned int v107 = v105 >> 3;
      }
      else {
        unsigned int v107 = v10;
      }
      int v108 = v105 - 8 * v107;
      v10 -= v107;
      unint64_t v109 = *(void *)&a3[v10];
      if ((unint64_t)v100 > v99) {
        return -70;
      }
    }
    else
    {
      unint64_t v109 = v11;
      int v108 = v105;
      if ((unint64_t)v100 > v99) {
        return -70;
      }
    }
    uint64_t v69 = ((v11 >> -(char)v105) & v106) + v102;
    uint64_t v110 = &v73[2 * v71];
    uint64_t v111 = *v110;
    char v112 = *((unsigned char *)v110 + 2);
    uint64_t v113 = *((unsigned __int8 *)v110 + 3);
    unsigned int v114 = v108 + v113;
    uint64_t v115 = BIT_mask[v113];
    *uint64_t v100 = v112;
    if (v114 > 0x40)
    {
      ++v100;
      uint64_t v55 = 3;
      unint64_t v71 = v69;
      break;
    }
    if (v10 >= 8)
    {
      unsigned int v116 = v114 >> 3;
      unsigned int v70 = v114 & 7;
    }
    else
    {
      if (!v10)
      {
        unint64_t v11 = v109;
        unsigned int v70 = v114;
        goto LABEL_141;
      }
      if (&a3[v10 - (v114 >> 3)] >= a3) {
        unsigned int v116 = v114 >> 3;
      }
      else {
        unsigned int v116 = v10;
      }
      unsigned int v70 = v114 - 8 * v116;
    }
    v10 -= v116;
    unint64_t v11 = *(void *)&a3[v10];
LABEL_141:
    unint64_t v71 = ((v109 >> -(char)v114) & v115) + v111;
    v53 += 2;
    int v117 = v100 + 1;
    v100 += 2;
    a4 = -70;
    if ((unint64_t)v117 > v99) {
      return a4;
    }
  }
  *uint64_t v100 = v73[2 * v71 + 1];
  return (uint64_t)&v53[v55];
}

unint64_t FSE_decompress_wksp_bmi2(unsigned char *a1, uint64_t a2, _DWORD *a3, size_t a4, unsigned int a5, unsigned __int16 *a6, unint64_t a7)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  unsigned int v133 = 255;
  unsigned int v134 = 0;
  unint64_t result = FSE_readNCount_bmi2(v135, &v133, &v134, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v134 > a5) {
      return -44;
    }
    int v15 = (1 << v134) + 1;
    uint64_t v16 = 4 * v15;
    if ((((1 << v134) + v16 + 2 * (v133 + 1) + 11) & 0xFFFFFFFFFFFFFFFCLL) > a7) {
      return -44;
    }
    unint64_t v17 = result;
    unint64_t result = FSE_buildDTable_internal(a6, (uint64_t)v135, v133, v134, (uint64_t)&a6[2 * v15], a7 - v16);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      unsigned int v18 = (unsigned __int8 *)a3 + v17;
      unint64_t result = a4 - v17;
      uint64_t v19 = &a1[a2];
      unint64_t v20 = (unint64_t)&a1[a2 - 3];
      if (a6[1])
      {
        if (result)
        {
          if (result >= 8)
          {
            if (v18[result - 1])
            {
              if (result > 0xFFFFFFFFFFFFFF88) {
                return result;
              }
              unint64_t v21 = (unsigned __int8 *)a3 + a4 - 8;
              unint64_t v22 = *(void *)v21;
              unsigned int v23 = __clz(v18[result - 1]) - 23;
LABEL_28:
              unsigned int v27 = v18 + 8;
              uint64_t v28 = *a6;
              unsigned int v29 = v23 + v28;
              uint64_t v30 = BIT_mask[v28];
              unint64_t v31 = (v22 >> -(char)(v23 + v28)) & v30;
              if (v29 > 0x40)
              {
                unsigned int v32 = v21;
                goto LABEL_55;
              }
              if (v21 >= v27)
              {
                LODWORD(v38) = v29 >> 3;
                v29 &= 7u;
              }
              else
              {
                unsigned int v32 = (unsigned __int8 *)a3 + v17;
                if (v21 == v18) {
                  goto LABEL_55;
                }
                uint64_t v38 = v29 >> 3;
                if (&v21[-v38] < v18) {
                  LODWORD(v38) = v21 - v18;
                }
                v29 -= 8 * v38;
              }
              unsigned int v32 = &v21[-v38];
              unint64_t v22 = *(void *)v32;
LABEL_55:
              unint64_t v39 = a6 + 2;
              unsigned int v40 = v29 + v28;
              unint64_t v41 = (v22 >> -(char)v40) & v30;
              if (v40 >= 0x41)
              {
LABEL_56:
                unint64_t v42 = a1;
                goto LABEL_127;
              }
              if (v32 >= v27)
              {
                uint64_t v44 = v40 >> 3;
                v40 &= 7u;
                v32 -= v44;
                unint64_t v22 = *(void *)v32;
              }
              else if (v32 == v18)
              {
                unsigned int v32 = (unsigned __int8 *)a3 + v17;
              }
              else
              {
                uint64_t v43 = v40 >> 3;
                if (&v32[-v43] >= v18) {
                  uint64_t v43 = v43;
                }
                else {
                  uint64_t v43 = (v32 - v18);
                }
                v40 -= 8 * v43;
                v32 -= v43;
                unint64_t v22 = *(void *)v32;
                if (v40 > 0x40) {
                  goto LABEL_56;
                }
              }
              unint64_t v42 = a1;
              while (1)
              {
                if (v32 >= v27)
                {
                  BOOL v98 = 0;
                  LODWORD(v97) = v40 >> 3;
                  v40 &= 7u;
                }
                else
                {
                  if (v32 == v18)
                  {
                    unsigned int v32 = (unsigned __int8 *)a3 + v17;
LABEL_127:
                    unint64_t v117 = (unint64_t)(v19 - 2);
                    if (v42 > v19 - 2) {
                      return -70;
                    }
                    unsigned int v77 = (unsigned char *)(v42 - a1);
                    int16x8_t v78 = v42 + 1;
                    uint64_t v79 = 2;
                    while (2)
                    {
                      int v118 = &v39[2 * v31];
                      uint64_t v119 = *v118;
                      char v120 = *((unsigned char *)v118 + 2);
                      int v121 = *((unsigned __int8 *)v118 + 3);
                      unsigned int v122 = v40 + v121;
                      *(v78 - 1) = v120;
                      if (v40 + v121 > 0x40)
                      {
LABEL_152:
                        int v132 = &v39[2 * v41];
                        goto LABEL_155;
                      }
                      if (v32 >= v27)
                      {
                        unsigned int v126 = v122 >> 3;
                        v122 &= 7u;
                        uint64_t v124 = &v32[-v126];
                        unint64_t v125 = *(void *)v124;
                        if ((unint64_t)v78 > v117) {
                          return -70;
                        }
                      }
                      else if (v32 == v18)
                      {
                        uint64_t v124 = (unsigned __int8 *)a3 + v17;
                        unint64_t v125 = v22;
                        if ((unint64_t)v78 > v117) {
                          return -70;
                        }
                      }
                      else
                      {
                        uint64_t v123 = v122 >> 3;
                        if (&v32[-v123] < v18) {
                          LODWORD(v123) = v32 - v18;
                        }
                        v122 -= 8 * v123;
                        uint64_t v124 = &v32[-v123];
                        unint64_t v125 = *(void *)v124;
                        if ((unint64_t)v78 > v117) {
                          return -70;
                        }
                      }
                      unint64_t v31 = (v22 << v40 >> -(char)v121) + v119;
                      int8x16_t v127 = &v39[2 * v41];
                      uint64_t v128 = *v127;
                      int v129 = *((unsigned __int8 *)v127 + 3);
                      unsigned int v40 = v122 + v129;
                      *int16x8_t v78 = *((unsigned char *)v127 + 2);
                      if (v122 + v129 > 0x40)
                      {
                        ++v78;
                        uint64_t v79 = 3;
                        unint64_t v41 = v31;
                        goto LABEL_152;
                      }
                      if (v124 < v27)
                      {
                        if (v124 == v18)
                        {
                          unsigned int v32 = (unsigned __int8 *)a3 + v17;
                          unint64_t v22 = v125;
                        }
                        else
                        {
                          uint64_t v130 = v40 >> 3;
                          if (&v124[-v130] < v18) {
                            LODWORD(v130) = v124 - v18;
                          }
                          v40 -= 8 * v130;
LABEL_147:
                          unsigned int v32 = &v124[-v130];
                          unint64_t v22 = *(void *)v32;
                        }
                        unint64_t v41 = (v125 << v122 >> -(char)v129) + v128;
                        v77 += 2;
                        int v131 = v78 + 1;
                        v78 += 2;
                        unint64_t result = -70;
                        if ((unint64_t)v131 > v117) {
                          return result;
                        }
                        continue;
                      }
                      break;
                    }
                    LODWORD(v130) = v40 >> 3;
                    v40 &= 7u;
                    goto LABEL_147;
                  }
                  uint64_t v97 = v40 >> 3;
                  BOOL v98 = &v32[-v97] < v18;
                  if (&v32[-v97] < v18) {
                    LODWORD(v97) = v32 - v18;
                  }
                  v40 -= 8 * v97;
                }
                v32 -= v97;
                unint64_t v22 = *(void *)v32;
                if ((unint64_t)v42 < v20 && !v98)
                {
                  unint64_t v99 = &v39[2 * v31];
                  uint64_t v100 = *v99;
                  char v101 = *((unsigned char *)v99 + 2);
                  LODWORD(v99) = *((unsigned __int8 *)v99 + 3);
                  unint64_t v102 = v22 << v40 >> -(char)v99;
                  LODWORD(v99) = v40 + v99;
                  uint64_t v103 = v102 + v100;
                  *unint64_t v42 = v101;
                  uint64_t v104 = &v39[2 * v41];
                  uint64_t v105 = *v104;
                  char v106 = *((unsigned char *)v104 + 2);
                  LODWORD(v104) = *((unsigned __int8 *)v104 + 3);
                  unint64_t v107 = v22 << (char)v99 >> -(char)v104;
                  LODWORD(v99) = v99 + v104;
                  uint64_t v108 = v107 + v105;
                  v42[1] = v106;
                  unint64_t v109 = &v39[2 * v103];
                  uint64_t v110 = *v109;
                  char v111 = *((unsigned char *)v109 + 2);
                  LODWORD(v109) = *((unsigned __int8 *)v109 + 3);
                  unint64_t v112 = v22 << (char)v99 >> -(char)v109;
                  LODWORD(v109) = v99 + v109;
                  unint64_t v31 = v112 + v110;
                  void v42[2] = v111;
                  uint64_t v113 = &v39[2 * v108];
                  uint64_t v114 = *v113;
                  char v115 = *((unsigned char *)v113 + 2);
                  LODWORD(v113) = *((unsigned __int8 *)v113 + 3);
                  unint64_t v116 = v22 << (char)v109 >> -(char)v113;
                  unsigned int v40 = v109 + v113;
                  unint64_t v41 = v116 + v114;
                  v42[3] = v115;
                  v42 += 4;
                  if (v40 <= 0x40) {
                    continue;
                  }
                }
                goto LABEL_127;
              }
            }
            return -1;
          }
          unint64_t v22 = *v18;
          switch(result)
          {
            case 2uLL:
              goto LABEL_25;
            case 3uLL:
              goto LABEL_24;
            case 4uLL:
              goto LABEL_23;
            case 5uLL:
              goto LABEL_22;
            case 6uLL:
              goto LABEL_21;
            case 7uLL:
              v22 |= (unint64_t)v18[6] << 48;
LABEL_21:
              v22 += (unint64_t)v18[5] << 40;
LABEL_22:
              v22 += (unint64_t)v18[4] << 32;
LABEL_23:
              v22 += (unint64_t)v18[3] << 24;
LABEL_24:
              v22 += (unint64_t)v18[2] << 16;
LABEL_25:
              v22 += (unint64_t)v18[1] << 8;
              break;
            default:
              break;
          }
          if (v18[result - 1])
          {
            unsigned int v23 = __clz(v18[result - 1]) - 8 * result + 41;
            unint64_t v21 = (unsigned __int8 *)a3 + v17;
            goto LABEL_28;
          }
          return -20;
        }
        return -72;
      }
      if (!result) {
        return -72;
      }
      uint64_t v24 = result - 8;
      if (result < 8)
      {
        unint64_t v25 = *v18;
        switch(result)
        {
          case 2uLL:
            goto LABEL_36;
          case 3uLL:
            goto LABEL_35;
          case 4uLL:
            goto LABEL_34;
          case 5uLL:
            goto LABEL_33;
          case 6uLL:
            goto LABEL_32;
          case 7uLL:
            v25 |= (unint64_t)v18[6] << 48;
LABEL_32:
            v25 += (unint64_t)v18[5] << 40;
LABEL_33:
            v25 += (unint64_t)v18[4] << 32;
LABEL_34:
            v25 += (unint64_t)v18[3] << 24;
LABEL_35:
            v25 += (unint64_t)v18[2] << 16;
LABEL_36:
            v25 += (unint64_t)v18[1] << 8;
            break;
          default:
            break;
        }
        if (!v18[result - 1]) {
          return -20;
        }
        uint64_t v24 = 0;
        unsigned int v26 = __clz(v18[result - 1]) - 8 * result + 41;
      }
      else
      {
        if (!v18[result - 1]) {
          return -1;
        }
        if (result > 0xFFFFFFFFFFFFFF88) {
          return result;
        }
        unint64_t v25 = *(void *)&v18[v24];
        unsigned int v26 = __clz(v18[result - 1]) - 23;
      }
      uint64_t v33 = *a6;
      unsigned int v34 = v26 + v33;
      uint64_t v35 = BIT_mask[v33];
      unint64_t v36 = (v25 >> -(char)(v26 + v33)) & v35;
      if (v26 + v33 <= 0x40)
      {
        if (v24 >= 8)
        {
          unsigned int v37 = v34 >> 3;
          v34 &= 7u;
        }
        else
        {
          if (!v24) {
            goto LABEL_67;
          }
          if (&v18[v24 - (v34 >> 3)] >= v18) {
            unsigned int v37 = v34 >> 3;
          }
          else {
            unsigned int v37 = v24;
          }
          v34 -= 8 * v37;
        }
        v24 -= v37;
        unint64_t v25 = *(void *)&v18[v24];
      }
LABEL_67:
      uint64_t v45 = a6 + 2;
      unsigned int v46 = v34 + v33;
      unint64_t v47 = (v25 >> -(char)v46) & v35;
      if (v46 > 0x40)
      {
LABEL_68:
        int v48 = a1;
LABEL_88:
        unint64_t v76 = (unint64_t)(v19 - 2);
        if (v48 > v19 - 2) {
          return -70;
        }
        unsigned int v77 = (unsigned char *)(v48 - a1);
        int16x8_t v78 = v48 + 1;
        uint64_t v79 = 2;
        while (1)
        {
          char v80 = &v45[2 * v36];
          uint64_t v81 = *v80;
          char v82 = *((unsigned char *)v80 + 2);
          uint64_t v83 = *((unsigned __int8 *)v80 + 3);
          unsigned int v84 = v46 + v83;
          uint64_t v85 = BIT_mask[v83];
          *(v78 - 1) = v82;
          if (v84 > 0x40)
          {
LABEL_154:
            int v132 = &v45[2 * v47];
LABEL_155:
            *int16x8_t v78 = *((unsigned char *)v132 + 2);
            return (unint64_t)&v77[v79];
          }
          if (v24 >= 8)
          {
            int v87 = v84 & 7;
            v24 -= v84 >> 3;
            unint64_t v88 = *(void *)&v18[v24];
            if ((unint64_t)v78 > v76) {
              return -70;
            }
          }
          else if (v24)
          {
            if (&v18[v24 - (v84 >> 3)] >= v18) {
              unsigned int v86 = v84 >> 3;
            }
            else {
              unsigned int v86 = v24;
            }
            int v87 = v84 - 8 * v86;
            v24 -= v86;
            unint64_t v88 = *(void *)&v18[v24];
            if ((unint64_t)v78 > v76) {
              return -70;
            }
          }
          else
          {
            int v87 = v84;
            unint64_t v88 = v25;
            if ((unint64_t)v78 > v76) {
              return -70;
            }
          }
          unint64_t v36 = ((v25 >> -(char)v84) & v85) + v81;
          uint64_t v89 = &v45[2 * v47];
          uint64_t v90 = *v89;
          char v91 = *((unsigned char *)v89 + 2);
          uint64_t v92 = *((unsigned __int8 *)v89 + 3);
          unsigned int v93 = v87 + v92;
          uint64_t v94 = BIT_mask[v92];
          *int16x8_t v78 = v91;
          if (v93 > 0x40)
          {
            ++v78;
            uint64_t v79 = 3;
            unint64_t v47 = v36;
            goto LABEL_154;
          }
          if (v24 >= 8)
          {
            unsigned int v95 = v93 >> 3;
            unsigned int v46 = v93 & 7;
          }
          else
          {
            if (!v24)
            {
              unsigned int v46 = v93;
              unint64_t v25 = v88;
              goto LABEL_110;
            }
            if (&v18[v24 - (v93 >> 3)] >= v18) {
              unsigned int v95 = v93 >> 3;
            }
            else {
              unsigned int v95 = v24;
            }
            unsigned int v46 = v93 - 8 * v95;
          }
          v24 -= v95;
          unint64_t v25 = *(void *)&v18[v24];
LABEL_110:
          unint64_t v47 = ((v88 >> -(char)v93) & v94) + v90;
          v77 += 2;
          uint64_t v96 = v78 + 1;
          v78 += 2;
          unint64_t result = -70;
          if ((unint64_t)v96 > v76) {
            return result;
          }
        }
      }
      if (v24 >= 8)
      {
        uint64_t v51 = v46 >> 3;
        v46 &= 7u;
        v24 -= v51;
        unint64_t v25 = *(void *)&v18[v24];
      }
      else if (v24)
      {
        uint64_t v49 = v46 >> 3;
        uint64_t v50 = &v18[v24 - v49] >= v18 ? v49 : v24;
        v46 -= 8 * v50;
        v24 -= v50;
        unint64_t v25 = *(void *)&v18[v24];
        if (v46 > 0x40) {
          goto LABEL_68;
        }
      }
      int v48 = a1;
      do
      {
        if (v24 >= 8)
        {
          BOOL v53 = 0;
          unsigned int v54 = v46 >> 3;
          v46 &= 7u;
        }
        else
        {
          if (!v24) {
            goto LABEL_88;
          }
          unint64_t v52 = &v18[v24 - (v46 >> 3)];
          BOOL v53 = v52 < v18;
          if (v52 >= v18) {
            unsigned int v54 = v46 >> 3;
          }
          else {
            unsigned int v54 = v24;
          }
          v46 -= 8 * v54;
        }
        v24 -= v54;
        unint64_t v25 = *(void *)&v18[v24];
        if ((unint64_t)v48 >= v20) {
          break;
        }
        if (v53) {
          break;
        }
        uint64_t v55 = &v45[2 * v36];
        uint64_t v56 = *v55;
        char v57 = *((unsigned char *)v55 + 2);
        uint64_t v58 = *((unsigned __int8 *)v55 + 3);
        int v59 = v46 + v58;
        uint64_t v60 = ((v25 >> -(char)v59) & BIT_mask[v58]) + v56;
        *int v48 = v57;
        unsigned int v61 = &v45[2 * v47];
        uint64_t v62 = *v61;
        char v63 = *((unsigned char *)v61 + 2);
        uint64_t v64 = *((unsigned __int8 *)v61 + 3);
        int v65 = v59 + v64;
        uint64_t v66 = ((v25 >> -(char)v65) & BIT_mask[v64]) + v62;
        v48[1] = v63;
        unsigned int v67 = &v45[2 * v60];
        uint64_t v68 = *v67;
        char v69 = *((unsigned char *)v67 + 2);
        uint64_t v70 = *((unsigned __int8 *)v67 + 3);
        int v71 = v65 + v70;
        unint64_t v36 = ((v25 >> -(char)v71) & BIT_mask[v70]) + v68;
        v48[2] = v69;
        unsigned int v72 = &v45[2 * v66];
        uint64_t v73 = *v72;
        char v74 = *((unsigned char *)v72 + 2);
        uint64_t v75 = *((unsigned __int8 *)v72 + 3);
        unsigned int v46 = v71 + v75;
        unint64_t v47 = ((v25 >> -(char)v46) & BIT_mask[v75]) + v73;
        v48[3] = v74;
        v48 += 4;
      }
      while (v46 <= 0x40);
      goto LABEL_88;
    }
  }
  return result;
}

uint64_t FSE_buildDTable(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  v7[4161] = *MEMORY[0x1E4F143B8];
  return FSE_buildDTable_internal(v2, v3, v4, v5, (uint64_t)v7, 0x8208uLL);
}

unint64_t FSE_decompress(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  return FSE_decompress_wksp_bmi2(v2, v3, v4, v5, 0xCu, v7, 0x520CuLL);
}

void *ZSTD_createThreadPool(uint64_t a1)
{
  return POOL_create_advanced(a1, 0, &ZSTD_defaultCMem);
}

void *POOL_create(uint64_t a1, uint64_t a2)
{
  return POOL_create_advanced(a1, a2, &ZSTD_defaultCMem);
}

void *POOL_create_advanced(uint64_t a1, uint64_t a2, long long *a3)
{
  if (!a1) {
    return 0;
  }
  if (*(void *)a3)
  {
    unint64_t v6 = (void *)(*(uint64_t (**)(void, uint64_t))a3)(*((void *)a3 + 2), 264);
    *(_OWORD *)unint64_t v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 14) = 0u;
    *((_OWORD *)v6 + 15) = 0u;
    v6[32] = 0;
    goto LABEL_7;
  }
  unint64_t v6 = malloc_type_calloc(1uLL, 0x108uLL, 0xEC864E14uLL);
  if (!v6) {
    return v6;
  }
LABEL_7:
  v6[9] = a2 + 1;
  if (*(void *)a3) {
    uint64_t v8 = (void *)(*(uint64_t (**)(void, uint64_t))a3)(*((void *)a3 + 2), 16 * (a2 + 1));
  }
  else {
    uint64_t v8 = malloc_type_malloc(16 * (a2 + 1), 0x26AA08A0uLL);
  }
  v6[10] = 0;
  v6[7] = 0;
  v6[8] = 0;
  v6[6] = v8;
  *((_DWORD *)v6 + 22) = 1;
  int v9 = pthread_mutex_init((pthread_mutex_t *)(v6 + 12), 0);
  int v10 = pthread_cond_init((pthread_cond_t *)(v6 + 20), 0) | v9;
  if (v10 | pthread_cond_init((pthread_cond_t *)(v6 + 26), 0)) {
    goto LABEL_11;
  }
  *((_DWORD *)v6 + 64) = 0;
  if (*(void *)a3)
  {
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))a3)(*((void *)a3 + 2), 8 * a1);
    v6[3] = v11;
    v6[4] = 0;
    long long v12 = *a3;
    v6[2] = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v6 = v12;
    if (!v11) {
      goto LABEL_11;
    }
LABEL_16:
    if (v6[6])
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      while (!pthread_create((pthread_t *)(v6[3] + v15), 0, (void *(__cdecl *)(void *))POOL_thread, v6))
      {
        ++v16;
        v15 += 8;
        if (a1 == v16)
        {
          v6[4] = a1;
          v6[5] = a1;
          return v6;
        }
      }
      v6[4] = v16;
    }
    goto LABEL_11;
  }
  uint64_t v13 = malloc_type_malloc(8 * a1, 0x26AA08A0uLL);
  v6[3] = v13;
  v6[4] = 0;
  long long v14 = *a3;
  v6[2] = *((void *)a3 + 2);
  *(_OWORD *)unint64_t v6 = v14;
  if (v13) {
    goto LABEL_16;
  }
LABEL_11:
  POOL_free((uint64_t)v6);
  return 0;
}

void ZSTD_customCalloc(size_t size, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(void, size_t))a2)(*(void *)(a2 + 16), size);
    bzero(v3, size);
  }
  else
  {
    malloc_type_calloc(1uLL, size, 0xEC864E14uLL);
  }
}

void *ZSTD_customMalloc(size_t size, uint64_t a2)
{
  if (*(void *)a2) {
    return (void *)(*(uint64_t (**)(void, size_t))a2)(*(void *)(a2 + 16), size);
  }
  else {
    return malloc_type_malloc(size, 0x26AA08A0uLL);
  }
}

void POOL_free(uint64_t a1)
{
  if (!a1) {
    return;
  }
  unsigned int v2 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  *(_DWORD *)(a1 + 256) = 1;
  pthread_mutex_unlock(v2);
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 160));
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 208));
  if (*(void *)(a1 + 32))
  {
    unint64_t v3 = 0;
    do
      pthread_join(*(pthread_t *)(*(void *)(a1 + 24) + 8 * v3++), 0);
    while (v3 < *(void *)(a1 + 32));
  }
  pthread_mutex_destroy(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 160));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 208));
  size_t v5 = *(void (**)(uint64_t))(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 48))
  {
    if (v5) {
      v5(v4);
    }
    else {
      free(*(void **)(a1 + 48));
    }
    size_t v5 = *(void (**)(uint64_t))(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
  }
  if (*(void *)(a1 + 24))
  {
    if (!v5)
    {
      free(*(void **)(a1 + 24));
      unint64_t v6 = *(void (**)(uint64_t, uint64_t))(a1 + 8);
      if (v6) {
        goto LABEL_15;
      }
      goto LABEL_19;
    }
    v5(v4);
  }
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(a1 + 8);
  if (v6)
  {
LABEL_15:
    uint64_t v7 = *(void *)(a1 + 16);
    v6(v7, a1);
    return;
  }
LABEL_19:

  free((void *)a1);
}

uint64_t POOL_thread(uint64_t a1)
{
  if (a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
    if (*(_DWORD *)(a1 + 88)) {
      goto LABEL_4;
    }
    do
    {
LABEL_3:
      unint64_t v2 = *(void *)(a1 + 80);
      if (v2 >= *(void *)(a1 + 40)) {
        break;
      }
      uint64_t v3 = *(void *)(a1 + 56);
      uint64_t v4 = *(void *)(a1 + 48) + 16 * v3;
      uint64_t v5 = *(void *)(a1 + 64);
      unint64_t v6 = (unint64_t)(v3 + 1) % *(void *)(a1 + 72);
      uint64_t v8 = *(void (**)(uint64_t))v4;
      uint64_t v7 = *(void *)(v4 + 8);
      *(void *)(a1 + 56) = v6;
      *(void *)(a1 + 80) = v2 + 1;
      *(_DWORD *)(a1 + 88) = v6 == v5;
      pthread_cond_signal((pthread_cond_t *)(a1 + 160));
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 96));
      v8(v7);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
      uint64_t v9 = *(void *)(a1 + 72);
      --*(void *)(a1 + 80);
      if (v9 == 1) {
        pthread_cond_signal((pthread_cond_t *)(a1 + 160));
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 96));
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
    }
    while (!*(_DWORD *)(a1 + 88));
LABEL_4:
    while (!*(_DWORD *)(a1 + 256))
    {
      pthread_cond_wait((pthread_cond_t *)(a1 + 208), (pthread_mutex_t *)(a1 + 96));
      if (!*(_DWORD *)(a1 + 88)) {
        goto LABEL_3;
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 96));
  }
  return a1;
}

void ZSTD_customFree(void *a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v2 = *(void (**)(void, void *))(a2 + 8);
    if (v2) {
      v2(*(void *)(a2 + 16), a1);
    }
    else {
      free(a1);
    }
  }
}

uint64_t POOL_sizeof(uint64_t result)
{
  if (result) {
    return 16 * *(void *)(result + 72) + 8 * *(void *)(result + 32) + 264;
  }
  return result;
}

uint64_t POOL_resize(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t v4 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (*(void *)(a1 + 32) >= a2)
  {
    if (a2)
    {
      uint64_t v7 = 0;
LABEL_21:
      *(void *)(a1 + 40) = a2;
      goto LABEL_22;
    }
  }
  else
  {
    if (*(void *)a1)
    {
      uint64_t v5 = (char *)(*(uint64_t (**)(void, unint64_t))a1)(*(void *)(a1 + 16), 8 * a2);
      if (!v5) {
        goto LABEL_15;
      }
LABEL_10:
      memcpy(v5, *(const void **)(a1 + 24), 8 * *(void *)(a1 + 32));
      if (*(void *)(a1 + 24))
      {
        uint64_t v8 = *(void (**)(void))(a1 + 8);
        if (!v8)
        {
          free(*(void **)(a1 + 24));
          *(void *)(a1 + 24) = v5;
          unint64_t v9 = *(void *)(a1 + 32);
          if (v9 >= a2)
          {
LABEL_20:
            uint64_t v7 = 0;
            *(void *)(a1 + 32) = a2;
            goto LABEL_21;
          }
LABEL_17:
          int v10 = (pthread_t *)&v5[8 * v9];
          while (!pthread_create(v10, 0, (void *(__cdecl *)(void *))POOL_thread, (void *)a1))
          {
            ++v9;
            ++v10;
            if (a2 == v9) {
              goto LABEL_20;
            }
          }
          *(void *)(a1 + 32) = v9;
          uint64_t v7 = 1;
          goto LABEL_22;
        }
        v8(*(void *)(a1 + 16));
      }
      *(void *)(a1 + 24) = v5;
      unint64_t v9 = *(void *)(a1 + 32);
      if (v9 >= a2) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
    uint64_t v5 = (char *)malloc_type_malloc(8 * a2, 0x26AA08A0uLL);
    if (v5) {
      goto LABEL_10;
    }
  }
LABEL_15:
  uint64_t v7 = 1;
LABEL_22:
  pthread_cond_broadcast((pthread_cond_t *)(a1 + 208));
  pthread_mutex_unlock(v4);
  return v7;
}

uint64_t POOL_add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  unint64_t v7 = *(void *)(a1 + 72);
  if (v7 < 2) {
    goto LABEL_4;
  }
LABEL_2:
  if (*(void *)(a1 + 56) == (*(void *)(a1 + 64) + 1) % v7)
  {
    while (!*(_DWORD *)(a1 + 256))
    {
      pthread_cond_wait((pthread_cond_t *)(a1 + 160), v6);
      unint64_t v7 = *(void *)(a1 + 72);
      if (v7 >= 2) {
        goto LABEL_2;
      }
LABEL_4:
      if (*(void *)(a1 + 80) != *(void *)(a1 + 40) && *(_DWORD *)(a1 + 88)) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    if (!*(_DWORD *)(a1 + 256))
    {
      *(_DWORD *)(a1 + 88) = 0;
      uint64_t v8 = *(void *)(a1 + 64);
      unint64_t v9 = (void *)(*(void *)(a1 + 48) + 16 * v8);
      *unint64_t v9 = a2;
      v9[1] = a3;
      *(void *)(a1 + 64) = (v8 + 1) % v7;
      pthread_cond_signal((pthread_cond_t *)(a1 + 208));
    }
  }

  return pthread_mutex_unlock(v6);
}

uint64_t POOL_tryAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  unint64_t v7 = *(void *)(a1 + 72);
  if (v7 < 2)
  {
    if (*(void *)(a1 + 80) == *(void *)(a1 + 40) || !*(_DWORD *)(a1 + 88)) {
      goto LABEL_9;
    }
  }
  else if (*(void *)(a1 + 56) == (*(void *)(a1 + 64) + 1) % v7)
  {
LABEL_9:
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  if (!*(_DWORD *)(a1 + 256))
  {
    *(_DWORD *)(a1 + 88) = 0;
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = (void *)(*(void *)(a1 + 48) + 16 * v8);
    *unint64_t v9 = a2;
    v9[1] = a3;
    *(void *)(a1 + 64) = (v8 + 1) % v7;
    pthread_cond_signal((pthread_cond_t *)(a1 + 208));
  }
  uint64_t v10 = 1;
LABEL_10:
  pthread_mutex_unlock(v6);
  return v10;
}

uint64_t ZSTD_versionNumber()
{
  return 10409;
}

const char *ZSTD_versionString()
{
  return "1.4.9";
}

BOOL ZSTD_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

const char *ZSTD_getErrorName()
{
  return ERR_getErrorString();
}

uint64_t ZSTD_getErrorCode(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFFFFFFFF89) {
    return -(int)a1;
  }
  else {
    return 0;
  }
}

uint64_t FSE_buildCTable_wksp(_WORD *a1, __int16 *a2, int a3, int a4, _DWORD *a5, unint64_t a6)
{
  uint64_t v6 = (1 << a4);
  unsigned int v7 = v6 >> 1;
  if (a4) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 1;
  }
  if ((a5 & 3) != 0) {
    return -1;
  }
  uint64_t v10 = (a3 + 2);
  if (a6 < 4 * ((1 << (a4 - 2)) + v10)) {
    return -44;
  }
  *a1 = a4;
  a1[1] = a3;
  *a5 = 0;
  uint64_t v11 = &a5[v10];
  BOOL v12 = __CFADD__(a3, 1);
  unsigned int v13 = a3 + 1;
  if (v12)
  {
    unsigned int v14 = v6 - 1;
  }
  else
  {
    uint64_t v15 = 0;
    if (v10 <= 2) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = v10;
    }
    uint64_t v16 = v10 - 1;
    unsigned int v14 = v6 - 1;
    do
    {
      while (1)
      {
        int v17 = a2[v15];
        if (v17 == -1) {
          break;
        }
        a5[v15 + 1] = a5[v15] + v17;
        if (v16 == ++v15) {
          goto LABEL_18;
        }
      }
      a5[v15 + 1] = a5[v15] + 1;
      *((unsigned char *)v11 + v14--) = v15++;
    }
    while (v16 != v15);
  }
LABEL_18:
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  a5[v13] = v6 + 1;
  unsigned int v20 = (v6 >> 3) + v7 + 3;
  if (v13 <= 1) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = v13;
  }
  do
  {
    int v22 = a2[v18];
    if (v22 >= 1)
    {
      for (int i = 0; i != v22; ++i)
      {
        *((unsigned char *)v11 + v19) = v18;
        do
          unsigned int v19 = (v20 + v19) & (v6 - 1);
        while (v19 > v14);
      }
    }
    ++v18;
  }
  while (v18 != v21);
  uint64_t v24 = 0;
  do
  {
    uint64_t v25 = *((unsigned __int8 *)v11 + v24);
    uint64_t v26 = a5[v25];
    a5[v25] = v26 + 1;
    a1[v26 + 2] = v6 + v24++;
  }
  while (v6 != v24);
  int v27 = 0;
  int v28 = (a4 << 16) - v6;
  unsigned int v29 = &a1[2 * v8 + 4];
  do
  {
    int v31 = *a2++;
    int v30 = v31;
    if (v31 == -1 || v30 == 1)
    {
      *(v29 - 1) = v27 - 1;
      *unsigned int v29 = v28;
      ++v27;
    }
    else if (v30)
    {
      unsigned int v33 = a4 + 1 + (__clz(v30 - 1) ^ 0xFFFFFFE0);
      *unsigned int v29 = (v33 << 16) - (v30 << v33);
      *(v29 - 1) = v27 - v30;
      v27 += v30;
    }
    else
    {
      *unsigned int v29 = v28 + 0x10000;
    }
    v29 += 2;
    --v21;
  }
  while (v21);
  return 0;
}

uint64_t FSE_buildCTable(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  return FSE_buildCTable_wksp(v2, v3, v4, v5, v7, 0x1000uLL);
}

uint64_t FSE_NCountWriteBound(int a1, int a2)
{
  if (a1) {
    return ((a2 + a2 * a1) >> 3) + 3;
  }
  else {
    return 512;
  }
}

uint64_t FSE_writeNCount(_WORD *a1, unint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  if (a5 > 0xC) {
    return -44;
  }
  if (a5 < 5) {
    return -1;
  }
  LODWORD(v6) = ((a5 + a5 * a4) >> 3) + 3;
  if (a4) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = 512;
  }
  return FSE_writeNCount_generic(a1, a2, a3, a4, a5, v6 <= a2);
}

uint64_t FSE_writeNCount_generic(_WORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = (a4 + 1);
  if (a4 == -1) {
    return -1;
  }
  BOOL v7 = 0;
  unsigned int v8 = 0;
  int v9 = 1 << a5;
  int v10 = (1 << a5) + 1;
  unsigned int v11 = a5 - 5;
  uint64_t v12 = (a5 + 1);
  unint64_t v13 = (unint64_t)a1 + a2 - 2;
  int v14 = 4;
  uint64_t v15 = a1;
  while (1)
  {
    if (!v7)
    {
      LODWORD(v16) = v8;
      goto LABEL_26;
    }
    LODWORD(v16) = v8;
    if (v8 < v6)
    {
      uint64_t v16 = v8;
      while (!*(_WORD *)(a3 + 2 * v16))
      {
        if (v6 == ++v16) {
          goto LABEL_41;
        }
      }
    }
    if (v16 == v6) {
      break;
    }
    if (v16 >= v8 + 24)
    {
      int v19 = 0xFFFF << v14;
      if (!a6)
      {
        while ((unint64_t)v15 <= v13)
        {
          unsigned int v22 = v11 + v19;
          *v15++ = v22;
          unsigned int v11 = HIWORD(v22);
          unsigned int v17 = v8 + 24;
          unsigned int v23 = v8 + 48;
          v8 += 24;
          if (v16 < v23) {
            goto LABEL_18;
          }
        }
        return -70;
      }
      do
      {
        unsigned int v20 = v11 + v19;
        *v15++ = v20;
        unsigned int v11 = HIWORD(v20);
        unsigned int v17 = v8 + 24;
        unsigned int v21 = v8 + 48;
        v8 += 24;
      }
      while (v16 >= v21);
LABEL_18:
      unsigned int v18 = v17 + 3;
    }
    else
    {
      unsigned int v17 = v8;
      unsigned int v18 = v8 + 3;
    }
    while (v16 >= v18)
    {
      v11 += 3 << v14;
      v14 += 2;
      unsigned int v18 = v17 + 6;
      v17 += 3;
    }
    v11 += (v16 - v17) << v14;
    if (v14 < 15)
    {
      v14 += 2;
    }
    else
    {
      if (!a6 && (unint64_t)v15 > v13) {
        return -70;
      }
      *v15++ = v11;
      v11 >>= 16;
      v14 -= 14;
    }
LABEL_26:
    int v24 = *(__int16 *)(a3 + 2 * v16);
    int v25 = ~v10 + 2 * v9;
    if (v24 >= 0) {
      int v26 = *(__int16 *)(a3 + 2 * v16);
    }
    else {
      int v26 = -v24;
    }
    v10 -= v26;
    int v27 = v24 + 1;
    if (v27 >= v9) {
      int v28 = v25;
    }
    else {
      int v28 = 0;
    }
    int v29 = v28 + v27;
    BOOL v30 = v28 + v27 < v25;
    BOOL v7 = v29 == 1;
    if (v10 < 1) {
      return -1;
    }
    for (uint64_t i = v12; v10 < v9; v9 >>= 1)
      uint64_t i = (i - 1);
    v11 += v29 << v14;
    int v14 = v14 + v12 - v30;
    if (v14 >= 17)
    {
      if (!a6 && (unint64_t)v15 > v13) {
        return -70;
      }
      *v15++ = v11;
      v11 >>= 16;
      v14 -= 16;
    }
    unsigned int v8 = v16 + 1;
    if ((int)v16 + 1 < v6)
    {
      uint64_t v12 = i;
      if (v10 > 1) {
        continue;
      }
    }
    break;
  }
LABEL_41:
  if (v10 != 1) {
    return -1;
  }
  if (!a6 && (unint64_t)v15 > v13) {
    return -70;
  }
  *uint64_t v15 = v11;
  int v34 = v14 + 7;
  BOOL v33 = v14 < -7;
  int v35 = v14 + 14;
  if (!v33) {
    int v35 = v34;
  }
  return (char *)v15 + (v35 >> 3) - (char *)a1;
}

void *FSE_createCTable(int a1, unsigned int a2)
{
  if (a2 >= 0xF) {
    char v2 = 15;
  }
  else {
    char v2 = a2;
  }
  return malloc_type_malloc(4 * ((1 << (v2 - 1)) + 2 * a1 + 3), 0x7EA7360BuLL);
}

uint64_t FSE_optimalTableLog_internal(unsigned int a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v4 = (__clz(a2 - 1) ^ 0x1F) - a4;
  unsigned int v5 = __clz(a2) ^ 0x1F;
  unsigned int v6 = (__clz(a3) ^ 0x1F) + 2;
  if (v5 + 1 < v6) {
    unsigned int v7 = v5 + 1;
  }
  else {
    unsigned int v7 = v6;
  }
  if (a1) {
    unsigned int v8 = a1;
  }
  else {
    unsigned int v8 = 11;
  }
  if (v4 >= v8) {
    unsigned int v4 = v8;
  }
  if (v7 > v4) {
    unsigned int v4 = v7;
  }
  if (v4 <= 5) {
    unsigned int v4 = 5;
  }
  if (v4 >= 0xC) {
    return 12;
  }
  else {
    return v4;
  }
}

uint64_t FSE_optimalTableLog(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = (__clz(a2 - 1) ^ 0x1F) - 2;
  unsigned int v4 = __clz(a2) ^ 0x1F;
  unsigned int v5 = (__clz(a3) ^ 0x1F) + 2;
  if (v4 + 1 < v5) {
    unsigned int v6 = v4 + 1;
  }
  else {
    unsigned int v6 = v5;
  }
  if (a1) {
    unsigned int v7 = a1;
  }
  else {
    unsigned int v7 = 11;
  }
  if (v3 >= v7) {
    unsigned int v3 = v7;
  }
  if (v6 > v3) {
    unsigned int v3 = v6;
  }
  if (v3 <= 5) {
    unsigned int v3 = 5;
  }
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

uint64_t FSE_normalizeCount(__int16 *a1, unsigned int a2, unsigned int *a3, unint64_t a4, unsigned int a5, int a6)
{
  if (a2) {
    uint64_t result = a2;
  }
  else {
    uint64_t result = 11;
  }
  if (result < 5) {
    return -1;
  }
  if (result > 0xC) {
    return -44;
  }
  unsigned int v8 = __clz(a4) ^ 0x1F;
  unsigned int v9 = (__clz(a5) ^ 0x1F) + 2;
  unsigned int v10 = v8 + 1 < v9 ? v8 + 1 : v9;
  if (result < v10) {
    return -1;
  }
  unsigned __int16 v11 = 0;
  int v12 = 0;
  unsigned int v13 = 0;
  if (a6) {
    __int16 v14 = -1;
  }
  else {
    __int16 v14 = 1;
  }
  char v15 = 62 - result;
  int v16 = 1 << result;
  unint64_t v17 = a4 >> result;
  LODWORD(v18) = 1 << result;
  do
  {
    uint64_t v19 = a3[v13];
    if (v19 == a4) {
      return 0;
    }
    uint64_t v20 = v13;
    if (v19)
    {
      if (v19 <= v17)
      {
        a1[v13] = v14;
        LODWORD(v18) = v18 - 1;
      }
      else
      {
        unint64_t v21 = 0x4000000000000000uLL / a4 * v19;
        unint64_t v22 = v21 >> v15;
        if (((v21 >> v15) & 0xFFF8) == 0
          && v21 - ((unint64_t)(unsigned __int16)(v21 >> v15) << v15) > (unint64_t)FSE_normalizeCount_rtbTable[(unsigned __int16)(v21 >> v15)] << (42 - result))
        {
          LOWORD(v22) = v22 + 1;
        }
        if ((unsigned __int16)v22 > v11)
        {
          int v12 = v20;
          unsigned __int16 v11 = v22;
        }
        a1[v20] = v22;
        LODWORD(v18) = v18 - (unsigned __int16)v22;
      }
    }
    else
    {
      a1[v13] = 0;
    }
    unsigned int v13 = v20 + 1;
  }
  while ((int)v20 + 1 <= a5);
  unsigned int v23 = &a1[v12];
  __int16 v24 = *v23;
  if (-(int)v18 < *v23 >> 1) {
    goto LABEL_54;
  }
  int v25 = 0;
  unint64_t v26 = (3 * a4) >> (result + 1);
  uint64_t v27 = a5 + 1;
  int v28 = a3;
  uint64_t v29 = v27;
  BOOL v30 = a1;
  do
  {
    unsigned int v32 = *v28++;
    uint64_t v31 = v32;
    if (!v32)
    {
      *BOOL v30 = 0;
      goto LABEL_32;
    }
    if (v31 <= v17)
    {
      *BOOL v30 = v14;
    }
    else
    {
      if (v31 > v26)
      {
        *BOOL v30 = -2;
        goto LABEL_32;
      }
      *BOOL v30 = 1;
    }
    ++v25;
    a4 -= v31;
LABEL_32:
    ++v30;
    --v29;
  }
  while (v29);
  unint64_t v18 = (v16 - v25);
  if (v16 != v25)
  {
    if (a4 / v18 > v26)
    {
      BOOL v33 = a1;
      uint64_t v34 = a5 + 1;
      int v35 = a3;
      unint64_t v36 = 3 * a4 / (2 * v18);
      do
      {
        if (*v33 == -2)
        {
          uint64_t v37 = *v35;
          if (v37 <= v36)
          {
            *BOOL v33 = 1;
            ++v25;
            a4 -= v37;
          }
        }
        ++v35;
        ++v33;
        --v34;
      }
      while (v34);
      LODWORD(v18) = v16 - v25;
    }
    if (v25 == v27)
    {
      uint64_t v38 = 0;
      unsigned int v39 = 0;
      int v40 = 0;
      do
      {
        if (a3[v38] > v39)
        {
          int v40 = v38;
          unsigned int v39 = a3[v38];
        }
        ++v38;
      }
      while (v27 != v38);
      unsigned int v23 = &a1[v40];
      __int16 v24 = *v23;
LABEL_54:
      *unsigned int v23 = v24 + v18;
      return result;
    }
    if (a4)
    {
      unsigned int v41 = 0;
      unint64_t v42 = ~(-1 << (61 - result));
      unint64_t v43 = (((unint64_t)v18 << v15) + v42) / a4;
      while (1)
      {
        uint64_t v44 = v41;
        if (a1[v41] == -2)
        {
          unint64_t v45 = v42 + v43 * a3[v41];
          int v46 = (v45 >> v15) - (v42 >> v15);
          if (!v46) {
            return -1;
          }
          a1[v44] = v46;
          unint64_t v42 = v45;
        }
        unsigned int v41 = v44 + 1;
        if ((int)v44 + 1 > a5) {
          return result;
        }
      }
    }
    if (v18)
    {
      unsigned int v47 = 0;
      do
      {
        uint64_t v48 = v47;
        int v49 = a1[v47];
        if (v49 >= 1)
        {
          LODWORD(v18) = v18 - 1;
          a1[v48] = v49 + 1;
        }
        if (v48 == a5) {
          unsigned int v47 = 0;
        }
        else {
          unsigned int v47 = v48 + 1;
        }
      }
      while (v18);
    }
  }
  return result;
}

uint64_t FSE_buildCTable_raw(_WORD *a1, unsigned int a2)
{
  if (!a2) {
    return -1;
  }
  uint64_t v2 = (1 << a2);
  uint64_t v3 = v2 >> 1;
  *a1 = a2;
  a1[1] = v2 - 1;
  if (a2 < 4) {
    goto LABEL_6;
  }
  int32x4_t v4 = vdupq_n_s32(v2);
  int32x4_t v5 = vdupq_n_s32((int)v2 + 8);
  int32x4_t v6 = (int32x4_t)xmmword_1889AA6D0;
  int32x4_t v7 = (int32x4_t)xmmword_18898C3A0;
  unsigned int v8 = (int16x8_t *)(a1 + 10);
  v9.i64[0] = 0x1000000010;
  v9.i64[1] = 0x1000000010;
  uint64_t v10 = v2 & 0xFFFFFFF0;
  do
  {
    v8[-1] = vuzp1q_s16((int16x8_t)vaddq_s32(v4, v7), (int16x8_t)vaddq_s32(v4, v6));
    int16x8_t *v8 = vuzp1q_s16((int16x8_t)vaddq_s32(v5, v7), (int16x8_t)vaddq_s32(v5, v6));
    int32x4_t v7 = vaddq_s32(v7, v9);
    int32x4_t v6 = vaddq_s32(v6, v9);
    v8 += 2;
    v10 -= 16;
  }
  while (v10);
  if ((v2 & 0xFFFFFFF0) == 0)
  {
LABEL_6:
    uint64_t v11 = 0;
    do
    {
      a1[v11 + 2] = v2 + v11;
      ++v11;
    }
    while (v2 != v11);
  }
  unsigned int v12 = (a2 << 16) - v2;
  if (a2 >= 3)
  {
    int32x4_t v13 = vdupq_n_s32(v12);
    __int16 v14 = (float *)&a1[2 * v3 + 18];
    int32x4_t v15 = (int32x4_t)xmmword_18898C3A0;
    v16.i64[0] = -1;
    v16.i64[1] = -1;
    v17.i64[0] = 0x300000003;
    v17.i64[1] = 0x300000003;
    v18.i64[0] = 0x800000008;
    v18.i64[1] = 0x800000008;
    uint64_t v19 = v2 & 0xFFFFFFF8;
    do
    {
      uint64_t v20 = v14 - 8;
      int32x4_t v21 = vaddq_s32(v15, v16);
      vst2q_f32(v20, *(float32x4x2_t *)(&v13 - 1));
      v25.val[0] = (float32x4_t)vaddq_s32(v15, v17);
      v25.val[1] = (float32x4_t)v13;
      vst2q_f32(v14, v25);
      int32x4_t v15 = vaddq_s32(v15, v18);
      v14 += 16;
      v19 -= 8;
    }
    while (v19);
    if ((v2 & 0xFFFFFFF8) != 0) {
      return 0;
    }
  }
  unsigned int v23 = (unsigned int *)&a1[2 * v3 + 4];
  int v24 = -1;
  do
  {
    *(v23 - 1) = v24;
    *unsigned int v23 = v12;
    v23 += 2;
    ++v24;
    --v2;
  }
  while (v2);
  return 0;
}

uint64_t FSE_buildCTable_rle(uint64_t a1, unsigned int a2)
{
  *(_WORD *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8 * a2 + 8) = 0;
  return 0;
}

uint64_t FSE_compress_usingCTable(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int16 *a5)
{
  return FSE_compress_usingCTable_generic(a1, a2, a3, a4, a5, a4 + (a4 >> 7) + 12 <= a2);
}

uint64_t FSE_compress_usingCTable_generic(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int16 *a5, int a6)
{
  if (a4 < 3 || a2 < 9) {
    return 0;
  }
  unint64_t v6 = a3 + a4;
  unint64_t v7 = (unint64_t)a1 + a2 - 8;
  int v10 = *a5;
  unsigned int v8 = a5 + 2;
  int v9 = v10;
  uint64_t v11 = 1 << (v10 - 1);
  if (!v10) {
    uint64_t v11 = 1;
  }
  unsigned int v12 = &v8[2 * v11];
  int32x4_t v13 = &v12[4 * *(unsigned __int8 *)(a3 + a4 - 1)];
  unint64_t v14 = v8[((unint64_t)(((*((_DWORD *)v13 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v13 + 1)) >> ((*((_DWORD *)v13 + 1) + 0x8000) >> 16))
         + *(int *)v13];
  if ((a4 & 1) == 0)
  {
    int v15 = 0;
    unint64_t v16 = 0;
    int v18 = *(unsigned __int8 *)(v6 - 2);
    int32x4_t v17 = (unsigned __int8 *)(v6 - 2);
    uint64_t v19 = &v12[4 * v18];
    unsigned int v20 = v8[((unint64_t)(((*((_DWORD *)v19 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v19 + 1)) >> ((*((_DWORD *)v19 + 1) + 0x8000) >> 16))
           + *(int *)v19];
    int32x4_t v21 = a1;
    unint64_t v22 = v8[((unint64_t)(((*((_DWORD *)v13 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v13 + 1)) >> ((*((_DWORD *)v13 + 1) + 0x8000) >> 16))
           + *(int *)v13];
    unint64_t v23 = v20;
    if ((a4 & 2) != 0) {
      goto LABEL_7;
    }
LABEL_15:
    int v32 = *(v17 - 2);
    v17 -= 2;
    BOOL v33 = &v12[4 * v17[1]];
    int v34 = *(_DWORD *)v33;
    unint64_t v35 = (*((unsigned int *)v33 + 1) + v22) >> 16;
    unint64_t v36 = (unint64_t)(BIT_mask[v35] & v22) << v15;
    int v37 = v15 + v35;
    unint64_t v22 = v8[(v22 >> v35) + v34];
    uint64_t v38 = &v12[4 * v32];
    LODWORD(v35) = *(_DWORD *)v38;
    unint64_t v39 = (*((unsigned int *)v38 + 1) + v23) >> 16;
    unint64_t v40 = v36 | ((unint64_t)(BIT_mask[v39] & v23) << v37) | v16;
    unsigned int v41 = v37 + v39;
    unint64_t v23 = v8[(v23 >> v39) + (int)v35];
    uint64_t v42 = v41 >> 3;
    *int32x4_t v21 = v40;
    int32x4_t v21 = (void *)((char *)v21 + v42);
    if (a6)
    {
      int v15 = v41 & 7;
      unint64_t v16 = v40 >> (8 * v42);
      if ((unint64_t)v17 <= a3) {
        goto LABEL_29;
      }
    }
    else
    {
      if ((unint64_t)v21 > v7) {
        int32x4_t v21 = (void *)v7;
      }
      int v15 = v41 & 7;
      unint64_t v16 = v40 >> (8 * v42);
      if ((unint64_t)v17 <= a3) {
        goto LABEL_29;
      }
    }
    goto LABEL_21;
  }
  int v24 = *(unsigned __int8 *)(v6 - 3);
  int32x4_t v17 = (unsigned __int8 *)(v6 - 3);
  float32x4x2_t v25 = &v12[4 * v17[1]];
  LODWORD(v22) = v8[((unint64_t)(((*((_DWORD *)v25 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v25 + 1)) >> ((*((_DWORD *)v25 + 1) + 0x8000) >> 16))
                  + *(int *)v25];
  unint64_t v26 = *(unsigned int *)&v12[4 * v24 + 2] + v14;
  unint64_t v27 = v26 >> 16;
  unint64_t v28 = BIT_mask[v26 >> 16] & v14;
  unsigned int v29 = v8[(v14 >> SBYTE2(v26)) + *(int *)&v12[4 * v24]];
  unint64_t v30 = v26 >> 19;
  *a1 = v28;
  uint64_t v31 = (unint64_t *)((char *)a1 + (v26 >> 19));
  if ((unint64_t)v31 <= v7) {
    int32x4_t v21 = (unint64_t *)((char *)a1 + (v26 >> 19));
  }
  else {
    int32x4_t v21 = (void *)v7;
  }
  int v15 = v27 & 7;
  unint64_t v16 = v28 >> (8 * v30);
  if (a6) {
    int32x4_t v21 = v31;
  }
  unint64_t v22 = v22;
  unint64_t v23 = v29;
  if ((a4 & 2) == 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((unint64_t)v17 <= a3)
  {
LABEL_29:
    unsigned int v61 = v21;
    goto LABEL_30;
  }
  do
  {
LABEL_21:
    int v43 = *(v17 - 4);
    v17 -= 4;
    uint64_t v44 = &v12[4 * v17[3]];
    int v45 = *(_DWORD *)v44;
    unint64_t v46 = (v22 + *((unsigned int *)v44 + 1)) >> 16;
    char v47 = v15 + ((v22 + *((_DWORD *)v44 + 1)) >> 16);
    unint64_t v48 = v8[(v22 >> v46) + v45];
    int v49 = &v12[4 * v17[2]];
    unint64_t v50 = (v23 + *((unsigned int *)v49 + 1)) >> 16;
    int v51 = v15 + v46 + v50;
    unint64_t v52 = v8[(v23 >> ((v23 + *((_DWORD *)v49 + 1)) >> 16)) + *(int *)v49];
    unint64_t v53 = (*(unsigned int *)&v12[4 * v17[1] + 2] + v48) >> 16;
    uint64_t v54 = *(int *)&v12[4 * v43];
    unint64_t v55 = (*(unsigned int *)&v12[4 * v43 + 2] + v52) >> 16;
    unsigned int v56 = v51 + v53 + v55;
    uint64_t v57 = v56 >> 3;
    BOOL v58 = (unint64_t)v21 + v57 > v7 && a6 == 0;
    unint64_t v59 = (unint64_t)(v22 & BIT_mask[v46]) << v15;
    unint64_t v22 = v8[(v48 >> ((*(_DWORD *)&v12[4 * v17[1] + 2] + v48) >> 16)) + *(int *)&v12[4 * v17[1]]];
    unint64_t v60 = v59 | v16 | ((unint64_t)(v23 & BIT_mask[v50]) << v47) | ((unint64_t)(BIT_mask[v53] & v48) << v51) | ((unint64_t)(BIT_mask[v55] & v52) << (v51 + ((*(_DWORD *)&v12[4 * v17[1] + 2] + v48) >> 16)));
    unint64_t v23 = v8[(v52 >> v55) + v54];
    if (v58) {
      unsigned int v61 = (void *)v7;
    }
    else {
      unsigned int v61 = (void *)((char *)v21 + v57);
    }
    *int32x4_t v21 = v60;
    unint64_t v16 = v60 >> (8 * v57);
    int v15 = v56 & 7;
    int32x4_t v21 = v61;
  }
  while ((unint64_t)v17 > a3);
LABEL_30:
  uint64_t v62 = BIT_mask[v9];
  unint64_t v63 = ((v22 & v62) << v15) | v16;
  uint64_t v64 = (v15 + v9) >> 3;
  *unsigned int v61 = v63;
  int v65 = (void *)((char *)v61 + v64);
  if ((unint64_t)v61 + v64 > v7) {
    int v65 = (void *)v7;
  }
  int v66 = ((_BYTE)v15 + (_BYTE)v9) & 7;
  unint64_t v67 = ((v23 & v62) << v66) | (v63 >> (8 * v64));
  unsigned int v68 = v66 + v9;
  uint64_t v69 = v68 >> 3;
  *int v65 = v67;
  uint64_t v70 = (void *)((char *)v65 + v69);
  if ((unint64_t)v65 + v69 > v7) {
    uint64_t v70 = (void *)v7;
  }
  int v71 = v68 & 7;
  uint64_t v72 = (v67 >> (8 * v69)) | (1 << v71);
  unsigned int v73 = v71 + 1;
  *uint64_t v70 = v72;
  char v74 = (char *)v70 + (v73 >> 3);
  if (v7 <= (unint64_t)v74) {
    return 0;
  }
  if ((v73 & 7) != 0) {
    return v74 - (char *)a1 + 1;
  }
  else {
    return v74 - (char *)a1;
  }
}

uint64_t FSE_compressBound(unint64_t a1)
{
  return a1 + (a1 >> 7) + 524;
}

unint64_t FSE_compress_wksp(_WORD *a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, unsigned __int16 *a7, unint64_t a8)
{
  v48[126] = *MEMORY[0x1E4F143B8];
  unsigned int v45 = a5;
  int v8 = 1 << (a6 - 2);
  if (a6 <= 0xC) {
    int v8 = 1024;
  }
  if ((1 << (a6 - 1)) + 2 * a5 + 3 + v8 > a8) {
    return -44;
  }
  if (a4 < 2) {
    return 0;
  }
  uint64_t v15 = 4 * ((1 << (a6 - 1)) + 2 * a5 + 3);
  unint64_t v16 = (char *)&a7[(unint64_t)v15 / 2];
  if (a5)
  {
    if (a6) {
      unsigned int v17 = a6;
    }
    else {
      unsigned int v17 = 11;
    }
    if ((v16 & 3) != 0) {
      return -1;
    }
  }
  else
  {
    a5 = 255;
    unsigned int v45 = 255;
    if (a6) {
      unsigned int v17 = a6;
    }
    else {
      unsigned int v17 = 11;
    }
    if ((v16 & 3) != 0) {
      return -1;
    }
  }
  unint64_t v18 = a8 - v15;
  if (a8 - v15 < 0x1000) {
    return -66;
  }
  if (a5 < 0xFF)
  {
    int v19 = 1;
    goto LABEL_29;
  }
  unsigned int v45 = 255;
  if (a4 > 0x5DB)
  {
    int v19 = 0;
LABEL_29:
    unint64_t result = HIST_count_parallel_wksp(v47, &v45, a3, a4, v19, v16);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    goto LABEL_39;
  }
  unsigned int v20 = (unsigned int *)((char *)a3 + a4);
  bzero(v47, 0x400uLL);
  int32x4_t v21 = a3;
  do
  {
    int v22 = *(unsigned __int8 *)v21;
    int32x4_t v21 = (unsigned int *)((char *)v21 + 1);
    ++v47[v22];
  }
  while (v21 < v20);
  LODWORD(v23) = 256;
  do
    uint64_t v23 = (v23 - 1);
  while (!v47[v23]);
  unsigned int v45 = v23;
  if (v23 < 7)
  {
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    goto LABEL_34;
  }
  uint64_t v24 = (v23 + 1) & 0x1FFFFFFF8;
  unint64_t v26 = (uint32x4_t *)v48;
  uint64_t v27 = v24;
  uint32x4_t v28 = 0uLL;
  uint32x4_t v29 = 0uLL;
  do
  {
    uint32x4_t v28 = vmaxq_u32(v26[-1], v28);
    uint32x4_t v29 = vmaxq_u32(*v26, v29);
    v26 += 2;
    v27 -= 8;
  }
  while (v27);
  unsigned int v25 = vmaxvq_u32(vmaxq_u32(v28, v29));
  if (v23 + 1 != v24)
  {
LABEL_34:
    uint64_t v30 = v23 - v24 + 1;
    uint64_t v31 = &v47[v24];
    do
    {
      unsigned int v33 = *v31++;
      unsigned int v32 = v33;
      if (v33 > v25) {
        unsigned int v25 = v32;
      }
      --v30;
    }
    while (v30);
  }
  unint64_t result = v25;
LABEL_39:
  if (result == a4) {
    return 1;
  }
  unint64_t v34 = a4 >> 7;
  if (result == 1 || result < v34) {
    return 0;
  }
  int v36 = v45;
  unsigned int v37 = (__clz(a4 - 1) ^ 0x1F) - 2;
  unsigned int v38 = __clz(a4) ^ 0x1F;
  unsigned int v39 = (__clz(v45) ^ 0x1F) + 2;
  if (v38 + 1 < v39) {
    unsigned int v40 = v38 + 1;
  }
  else {
    unsigned int v40 = v39;
  }
  if (v37 >= v17) {
    unsigned int v37 = v17;
  }
  if (v40 > v37) {
    unsigned int v37 = v40;
  }
  if (v37 <= 5) {
    unsigned int v37 = 5;
  }
  if (v37 >= 0xC) {
    int v41 = 12;
  }
  else {
    int v41 = v37;
  }
  unint64_t result = FSE_normalizeCount(v46, v41, v47, a4, v45, a4 > 0x7FF);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    LODWORD(v42) = ((v41 + v41 * v36) >> 3) + 3;
    if (v36) {
      unint64_t v42 = v42;
    }
    else {
      unint64_t v42 = 512;
    }
    unint64_t result = FSE_writeNCount_generic(a1, a2, (uint64_t)v46, v36, v41, v42 <= a2);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      int v43 = v16;
      unint64_t v44 = result;
      unint64_t result = FSE_buildCTable_wksp(a7, v46, v36, v41, v43, v18);
      if (result <= 0xFFFFFFFFFFFFFF88)
      {
        unint64_t result = FSE_compress_usingCTable_generic((unint64_t *)((char *)a1 + v44), a2 - v44, (unint64_t)a3, a4, a7, a4 + v34 + 12 <= a2 - v44);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          if (result)
          {
            if (v44 + result >= a4 - 1) {
              return 0;
            }
            else {
              result += v44;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t HIST_count_wksp(uint32x4_t *a1, unsigned int *a2, unsigned int *a3, unint64_t a4, char *a5, unint64_t a6)
{
  if ((a5 & 3) != 0) {
    return -1;
  }
  if (a6 < 0x1000) {
    return -66;
  }
  int v9 = a3;
  if (*a2 <= 0xFE)
  {
    int v12 = 1;
    int32x4_t v13 = a5;
    return HIST_count_parallel_wksp(a1, a2, a3, a4, v12, v13);
  }
  *a2 = 255;
  if (a4 > 0x5DB)
  {
    int v12 = 0;
    int32x4_t v13 = a5;
    return HIST_count_parallel_wksp(a1, a2, a3, a4, v12, v13);
  }
  bzero(a1, 0x400uLL);
  if (!a4)
  {
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  unint64_t v14 = (unsigned __int8 *)v9 + a4;
  do
  {
    int v15 = *(unsigned __int8 *)v9;
    int v9 = (unsigned int *)((char *)v9 + 1);
    ++a1->i32[v15];
  }
  while (v9 < (unsigned int *)v14);
  LODWORD(v16) = 256;
  do
    uint64_t v16 = (v16 - 1);
  while (!a1->i32[v16]);
  *a2 = v16;
  if (v16 < 7)
  {
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    goto LABEL_24;
  }
  uint64_t v17 = (v16 + 1) & 0x1FFFFFFF8;
  int v19 = a1 + 1;
  uint64_t v20 = v17;
  uint32x4_t v21 = 0uLL;
  uint32x4_t v22 = 0uLL;
  do
  {
    uint32x4_t v21 = vmaxq_u32(v19[-1], v21);
    uint32x4_t v22 = vmaxq_u32(*v19, v22);
    v19 += 2;
    v20 -= 8;
  }
  while (v20);
  unsigned int v18 = vmaxvq_u32(vmaxq_u32(v21, v22));
  if (v16 + 1 != v17)
  {
LABEL_24:
    uint64_t v23 = v16 - v17 + 1;
    uint64_t v24 = &a1->i8[4 * v17];
    do
    {
      unsigned int v26 = *(_DWORD *)v24;
      v24 += 4;
      unsigned int v25 = v26;
      if (v26 > v18) {
        unsigned int v18 = v25;
      }
      --v23;
    }
    while (v23);
  }
  return v18;
}

unint64_t FSE_compress2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (a6 > 0xC) {
    return -44;
  }
  uint64_t v24 = v10;
  uint64_t v25 = v11;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v20 = v8;
  uint64_t v21 = v9;
  MEMORY[0x1F4188790](a1, a2);
  memset(v19, 0, 512);
  return FSE_compress_wksp(v13, v14, v15, v16, v17, v18, (unsigned __int16 *)v19, 0x3804uLL);
}

unint64_t FSE_compress(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  memset(v7, 0, 512);
  return FSE_compress_wksp(v2, v3, v4, v5, 0xFFu, 0xBu, (unsigned __int16 *)v7, 0x3804uLL);
}

BOOL HIST_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

uint64_t HIST_count_simple(uint32x4_t *a1, unsigned int *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v8 = *a2;
  bzero(a1, 4 * (*a2 + 1));
  if (!a4)
  {
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  if (a4 >= 1)
  {
    uint64_t v9 = &a3[a4];
    do
    {
      int v10 = *a3++;
      ++a1->i32[v10];
    }
    while (a3 < v9);
  }
  do
    unsigned int v11 = v8;
  while (!a1->i32[v8--]);
  uint64_t v13 = v8 + 1;
  *a2 = v13;
  if (v13 >= 7)
  {
    unint64_t v14 = (v11 + 1) & 0x1FFFFFFF8;
    unint64_t v16 = a1 + 1;
    uint64_t v17 = (v13 + 1) & 0x1FFFFFFF8;
    uint32x4_t v18 = 0uLL;
    uint32x4_t v19 = 0uLL;
    do
    {
      uint32x4_t v18 = vmaxq_u32(v16[-1], v18);
      uint32x4_t v19 = vmaxq_u32(*v16, v19);
      v16 += 2;
      v17 -= 8;
    }
    while (v17);
    uint64_t result = vmaxvq_u32(vmaxq_u32(v18, v19));
    if (v11 + 1 == v14) {
      return result;
    }
  }
  else
  {
    unint64_t v14 = 0;
    LODWORD(result) = 0;
  }
  do
  {
    unsigned int v20 = a1->u32[v14];
    if (v20 <= result) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v20;
    }
  }
  while (v14++ < v11);
  return result;
}

uint64_t HIST_countFast_wksp(uint32x4_t *a1, unsigned int *a2, unsigned int *a3, unint64_t a4, char *a5, unint64_t a6)
{
  uint64_t v7 = a3;
  if (a4 <= 0x5DB)
  {
    unsigned int v10 = *a2;
    bzero(a1, 4 * (*a2 + 1));
    if (!a4)
    {
      uint64_t result = 0;
      *a2 = 0;
      return result;
    }
    unsigned int v11 = (unsigned __int8 *)v7 + a4;
    do
    {
      int v12 = *(unsigned __int8 *)v7;
      uint64_t v7 = (unsigned int *)((char *)v7 + 1);
      ++a1->i32[v12];
    }
    while (v7 < (unsigned int *)v11);
    do
      unsigned int v13 = v10;
    while (!a1->i32[v10--]);
    uint64_t v15 = v10 + 1;
    *a2 = v15;
    if (v15 >= 7)
    {
      uint64_t v19 = v13 + 1;
      uint64_t v16 = v19 & 0x1FFFFFFF8;
      unsigned int v20 = a1 + 1;
      uint64_t v21 = (v15 + 1) & 0x1FFFFFFF8;
      uint32x4_t v22 = 0uLL;
      uint32x4_t v23 = 0uLL;
      do
      {
        uint32x4_t v22 = vmaxq_u32(v20[-1], v22);
        uint32x4_t v23 = vmaxq_u32(*v20, v23);
        v20 += 2;
        v21 -= 8;
      }
      while (v21);
      unsigned int v17 = vmaxvq_u32(vmaxq_u32(v22, v23));
      if (v19 == v16) {
        return v17;
      }
    }
    else
    {
      uint64_t v16 = 0;
      unsigned int v17 = 0;
    }
    uint64_t v24 = v15 - v16 + 1;
    uint64_t v25 = &a1->i8[4 * v16];
    do
    {
      unsigned int v27 = *(_DWORD *)v25;
      v25 += 4;
      unsigned int v26 = v27;
      if (v27 > v17) {
        unsigned int v17 = v26;
      }
      --v24;
    }
    while (v24);
    return v17;
  }
  if ((a5 & 3) != 0) {
    return -1;
  }
  if (a6 < 0x1000) {
    return -66;
  }

  return HIST_count_parallel_wksp(a1, a2, a3, a4, 0, a5);
}

uint64_t HIST_count_parallel_wksp(void *a1, unsigned int *a2, unsigned int *a3, uint64_t a4, int a5, char *a6)
{
  uint64_t v6 = a4;
  size_t v9 = 4 * (*a2 + 1);
  if (a4)
  {
    unsigned int v13 = (unsigned int *)((char *)a3 + a4);
    bzero(a6, 0x1000uLL);
    unint64_t v14 = a3;
    uint64_t v15 = a3;
    if (v6 >= 20)
    {
      uint64_t v16 = a6 + 1024;
      unsigned int v17 = a6 + 2048;
      uint32x4_t v18 = a6 + 3072;
      unsigned int v19 = *a3;
      unint64_t v14 = a3;
      uint64_t v15 = a3;
      do
      {
        unint64_t v20 = v15[1];
        ++*(_DWORD *)&a6[4 * v19];
        ++*(_DWORD *)&v16[4 * BYTE1(v19)];
        ++*(_DWORD *)&v17[4 * BYTE2(v19)];
        ++*(_DWORD *)&v18[4 * HIBYTE(v19)];
        unint64_t v21 = v15[2];
        ++*(_DWORD *)&a6[4 * v20];
        ++*(_DWORD *)&v16[4 * BYTE1(v20)];
        ++*(_DWORD *)&v17[4 * BYTE2(v20)];
        ++*(_DWORD *)&v18[(v20 >> 22) & 0x3FC];
        unint64_t v22 = v15[3];
        ++*(_DWORD *)&a6[4 * v21];
        ++*(_DWORD *)&v16[4 * BYTE1(v21)];
        ++*(_DWORD *)&v17[4 * BYTE2(v21)];
        ++*(_DWORD *)&v18[(v21 >> 22) & 0x3FC];
        unsigned int v23 = v15[4];
        v15 += 4;
        unsigned int v19 = v23;
        ++*(_DWORD *)&a6[4 * v22];
        ++*(_DWORD *)&v16[4 * BYTE1(v22)];
        ++*(_DWORD *)&v17[4 * BYTE2(v22)];
        ++*(_DWORD *)&v18[(v22 >> 22) & 0x3FC];
        v14 += 4;
      }
      while (v15 + 1 < (unsigned int *)((char *)a3 + v6 - 15));
    }
    if (v15 < v13)
    {
      uint64_t v24 = (char *)((char *)a3 + v6 - (char *)v14);
      do
      {
        int v25 = *(unsigned __int8 *)v15;
        uint64_t v15 = (unsigned int *)((char *)v15 + 1);
        ++*(_DWORD *)&a6[4 * v25];
        --v24;
      }
      while (v24);
    }
    uint64_t v26 = 0;
    uint32x4_t v27 = 0uLL;
    uint32x4_t v28 = 0uLL;
    do
    {
      uint32x4_t v29 = (uint32x4_t *)&a6[v26];
      uint32x4_t v30 = (uint32x4_t)vaddq_s32(vaddq_s32(*(int32x4_t *)&a6[v26 + 2048], *(int32x4_t *)&a6[v26 + 1024]), vaddq_s32(*(int32x4_t *)&a6[v26 + 3072], *(int32x4_t *)&a6[v26]));
      uint32x4_t v31 = (uint32x4_t)vaddq_s32(vaddq_s32(*(int32x4_t *)&a6[v26 + 2064], *(int32x4_t *)&a6[v26 + 1040]), vaddq_s32(*(int32x4_t *)&a6[v26 + 3088], *(int32x4_t *)&a6[v26 + 16]));
      *uint32x4_t v29 = v30;
      v29[1] = v31;
      uint32x4_t v27 = vmaxq_u32(v30, v27);
      uint32x4_t v28 = vmaxq_u32(v31, v28);
      v26 += 32;
    }
    while (v26 != 1024);
    uint64_t v6 = vmaxvq_u32(vmaxq_u32(v27, v28));
    unsigned int v32 = 256;
    do
      --v32;
    while (!*(_DWORD *)&a6[4 * v32]);
    if (a5 && v32 > *a2)
    {
      return -48;
    }
    else
    {
      *a2 = v32;
      memmove(a1, a6, v9);
    }
  }
  else
  {
    bzero(a1, 4 * (*a2 + 1));
    *a2 = 0;
  }
  return v6;
}

uint64_t HIST_countFast(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v6 = v5;
  uint64_t v7 = v4;
  unsigned int v8 = v3;
  size_t v9 = v2;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (v5 > 0x5DB) {
    return HIST_count_parallel_wksp(v2, v3, v4, v5, 0, v28);
  }
  unsigned int v10 = *v3;
  bzero(v2, 4 * (*v3 + 1));
  if (!v6)
  {
    uint64_t result = 0;
    unsigned int *v8 = 0;
    return result;
  }
  unsigned int v11 = (unsigned __int8 *)v7 + v6;
  do
  {
    int v12 = *(unsigned __int8 *)v7;
    uint64_t v7 = (unsigned int *)((char *)v7 + 1);
    ++v9->i32[v12];
  }
  while (v7 < (unsigned int *)v11);
  do
    unsigned int v13 = v10;
  while (!v9->i32[v10--]);
  uint64_t v15 = v10 + 1;
  unsigned int *v8 = v15;
  if (v15 < 7)
  {
    uint64_t v16 = 0;
    unsigned int v17 = 0;
    goto LABEL_13;
  }
  uint64_t v19 = v13 + 1;
  uint64_t v16 = v19 & 0x1FFFFFFF8;
  unint64_t v20 = v9 + 1;
  uint64_t v21 = (v15 + 1) & 0x1FFFFFFF8;
  uint32x4_t v22 = 0uLL;
  uint32x4_t v23 = 0uLL;
  do
  {
    uint32x4_t v22 = vmaxq_u32(v20[-1], v22);
    uint32x4_t v23 = vmaxq_u32(*v20, v23);
    v20 += 2;
    v21 -= 8;
  }
  while (v21);
  unsigned int v17 = vmaxvq_u32(vmaxq_u32(v22, v23));
  if (v19 != v16)
  {
LABEL_13:
    uint64_t v24 = v15 - v16 + 1;
    int v25 = (unsigned int *)v9 + v16;
    do
    {
      unsigned int v27 = *v25++;
      unsigned int v26 = v27;
      if (v27 > v17) {
        unsigned int v17 = v26;
      }
      --v24;
    }
    while (v24);
  }
  return v17;
}

uint64_t HIST_count(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v6 = v5;
  uint64_t v7 = v4;
  unsigned int v8 = v3;
  size_t v9 = v2;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*v3 <= 0xFE)
  {
    int v10 = 1;
    return HIST_count_parallel_wksp(v2, v3, v4, v5, v10, v25);
  }
  unsigned int *v3 = 255;
  if (v5 > 0x5DB)
  {
    int v10 = 0;
    return HIST_count_parallel_wksp(v2, v3, v4, v5, v10, v25);
  }
  bzero(v2, 0x400uLL);
  if (!v6)
  {
    uint64_t result = 0;
    unsigned int *v8 = 0;
    return result;
  }
  unsigned int v11 = (unsigned __int8 *)v7 + v6;
  do
  {
    int v12 = *(unsigned __int8 *)v7;
    uint64_t v7 = (unsigned int *)((char *)v7 + 1);
    ++v9->i32[v12];
  }
  while (v7 < (unsigned int *)v11);
  LODWORD(v13) = 256;
  do
    uint64_t v13 = (v13 - 1);
  while (!v9->i32[v13]);
  unsigned int *v8 = v13;
  if (v13 < 7)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    goto LABEL_17;
  }
  uint64_t v14 = (v13 + 1) & 0x1FFFFFFF8;
  unsigned int v17 = v9 + 1;
  uint64_t v18 = v14;
  uint32x4_t v19 = 0uLL;
  uint32x4_t v20 = 0uLL;
  do
  {
    uint32x4_t v19 = vmaxq_u32(v17[-1], v19);
    uint32x4_t v20 = vmaxq_u32(*v17, v20);
    v17 += 2;
    v18 -= 8;
  }
  while (v18);
  unsigned int v15 = vmaxvq_u32(vmaxq_u32(v19, v20));
  if (v13 + 1 != v14)
  {
LABEL_17:
    uint64_t v21 = v13 - v14 + 1;
    uint32x4_t v22 = (unsigned int *)v9 + v14;
    do
    {
      unsigned int v24 = *v22++;
      unsigned int v23 = v24;
      if (v24 > v15) {
        unsigned int v15 = v23;
      }
      --v21;
    }
    while (v21);
  }
  return v15;
}

uint64_t HUF_optimalTableLog(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = (__clz(a2 - 1) ^ 0x1F) - 1;
  unsigned int v4 = __clz(a2) ^ 0x1F;
  unsigned int v5 = (__clz(a3) ^ 0x1F) + 2;
  if (v4 + 1 < v5) {
    unsigned int v6 = v4 + 1;
  }
  else {
    unsigned int v6 = v5;
  }
  if (a1) {
    unsigned int v7 = a1;
  }
  else {
    unsigned int v7 = 11;
  }
  if (v3 >= v7) {
    unsigned int v3 = v7;
  }
  if (v6 > v3) {
    unsigned int v3 = v6;
  }
  if (v3 <= 5) {
    unsigned int v3 = 5;
  }
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

unint64_t HUF_writeCTable(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (a4 > 0xFF) {
    return -46;
  }
  v84[0] = 0;
  uint64_t v9 = (a5 + 1);
  if (v9 >= 2)
  {
    if (v9 < 9)
    {
      unint64_t v10 = 1;
      goto LABEL_15;
    }
    uint64_t v11 = v9 - 1;
    int32x4_t v12 = vdupq_n_s32(v9);
    if (v9 >= 0x21)
    {
      unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFE0 | 1;
      int32x4_t v14 = (int32x4_t)xmmword_1889B9E90;
      int32x4_t v15 = (int32x4_t)xmmword_1889B9EA0;
      int32x4_t v16 = (int32x4_t)xmmword_1889B9EB0;
      int32x4_t v17 = (int32x4_t)xmmword_1889AB340;
      uint64_t v18 = (int8x16_t *)v86;
      v19.i64[0] = 0x1000000010;
      v19.i64[1] = 0x1000000010;
      v20.i64[0] = 0x2000000020;
      v20.i64[1] = 0x2000000020;
      unint64_t v21 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v97.val[0] = (int8x16_t)vsubq_s32(v12, v17);
        v98.val[0] = (int8x16_t)vsubq_s32((int32x4_t)v97.val[0], v19);
        v97.val[1] = (int8x16_t)vsubq_s32(v12, v16);
        v98.val[1] = (int8x16_t)vsubq_s32((int32x4_t)v97.val[1], v19);
        v97.val[2] = (int8x16_t)vsubq_s32(v12, v15);
        v98.val[2] = (int8x16_t)vsubq_s32((int32x4_t)v97.val[2], v19);
        v97.val[3] = (int8x16_t)vsubq_s32(v12, v14);
        v98.val[3] = (int8x16_t)vsubq_s32((int32x4_t)v97.val[3], v19);
        v18[-1] = vqtbl4q_s8(v97, (int8x16_t)xmmword_1889B9EC0);
        *uint64_t v18 = vqtbl4q_s8(v98, (int8x16_t)xmmword_1889B9EC0);
        int32x4_t v17 = vaddq_s32(v17, v20);
        int32x4_t v16 = vaddq_s32(v16, v20);
        int32x4_t v15 = vaddq_s32(v15, v20);
        int32x4_t v14 = vaddq_s32(v14, v20);
        v18 += 2;
        v21 -= 32;
      }
      while (v21);
      if (v11 == v13) {
        goto LABEL_17;
      }
      if ((v11 & 0x18) == 0)
      {
LABEL_15:
        uint32x4_t v28 = &v84[v10];
        uint64_t v29 = v9 - v10;
        do
          *v28++ = v29--;
        while (v29);
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v13 = 0;
      LODWORD(v10) = 1;
    }
    int32x4_t v22 = vdupq_n_s32(v10);
    unint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8 | 1;
    int32x4_t v23 = vaddq_s32(v22, (int32x4_t)xmmword_1889AA6D0);
    int32x4_t v24 = vaddq_s32(v22, (int32x4_t)xmmword_18898C3A0);
    int v25 = &v84[v13 + 1];
    unint64_t v26 = v13 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v27.i64[0] = 0x800000008;
    v27.i64[1] = 0x800000008;
    do
    {
      v96.val[0] = (int8x16_t)vsubq_s32(v12, v24);
      v96.val[1] = (int8x16_t)vsubq_s32(v12, v23);
      *v25++ = vqtbl2q_s8(v96, (int8x16_t)xmmword_1889B9ED0).u64[0];
      int32x4_t v24 = vaddq_s32(v24, v27);
      int32x4_t v23 = vaddq_s32(v23, v27);
      v26 += 8;
    }
    while (v26);
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_15;
    }
  }
LABEL_17:
  if (!a4)
  {
    unint64_t v30 = 0;
    goto LABEL_45;
  }
  unint64_t v30 = a4;
  if (a4 == 1)
  {
    uint64_t v31 = 0;
LABEL_24:
    unsigned int v38 = &v82[v31 - 1];
    unsigned int v39 = (unsigned __int8 *)(a3 + 4 * v31 + 2);
    uint64_t v40 = a4 - v31;
    do
    {
      int v41 = *v39;
      v39 += 4;
      *v38++ = v84[v41];
      --v40;
    }
    while (v40);
    goto LABEL_26;
  }
  uint64_t v31 = a4 & 0xFFFFFFFE;
  unsigned int v32 = (unsigned __int8 *)(a3 + 6);
  unsigned int v33 = v82;
  uint64_t v34 = v31;
  do
  {
    uint64_t v35 = *(v32 - 4);
    int v36 = *v32;
    v32 += 8;
    char v37 = v84[v36];
    *(v33 - 1) = v84[v35];
    *unsigned int v33 = v37;
    v33 += 2;
    v34 -= 2;
  }
  while (v34);
  if (v31 != a4) {
    goto LABEL_24;
  }
LABEL_26:
  if (a4 < 2) {
    goto LABEL_45;
  }
  uint64_t v42 = a1 + 1;
  unint64_t v43 = a2 - 1;
  uint64_t v44 = a1 + a2;
  int v89 = 0;
  memset(v88, 0, sizeof(v88));
  unsigned int v45 = &v81;
  long long v87 = 0u;
  do
  {
    int v46 = *v45++;
    ++*(_DWORD *)&v88[4 * v46 - 16];
  }
  while (v45 < &v82[a4 - 1]);
  int v47 = 14;
  do
  {
    uint64_t v48 = (v47 - 2);
    --v47;
  }
  while (!*(_DWORD *)&v88[4 * v48 - 16]);
  uint64_t v49 = (v47 - 1);
  if (v49 >= 7)
  {
    uint64_t v52 = v48 + 1;
    uint64_t v50 = (v48 + 1) & 0x1FFFFFFF8;
    unint64_t v53 = (uint32x4_t *)v88;
    uint64_t v54 = (v49 + 1) & 0x1FFFFFFF8;
    uint32x4_t v55 = 0uLL;
    uint32x4_t v56 = 0uLL;
    do
    {
      uint32x4_t v55 = vmaxq_u32(v53[-1], v55);
      uint32x4_t v56 = vmaxq_u32(*v53, v56);
      v53 += 2;
      v54 -= 8;
    }
    while (v54);
    unsigned int v51 = vmaxvq_u32(vmaxq_u32(v55, v56));
    if (v52 == v50) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v50 = 0;
    unsigned int v51 = 0;
  }
  uint64_t v57 = v49 - v50 + 1;
  BOOL v58 = (unsigned int *)&v88[4 * v50 - 16];
  do
  {
    unsigned int v60 = *v58++;
    unsigned int v59 = v60;
    if (v60 > v51) {
      unsigned int v51 = v59;
    }
    --v57;
  }
  while (v57);
LABEL_40:
  if (v51 != 1 && v51 != a4)
  {
    unsigned int v64 = (__clz(a4 - 1) ^ 0x1F) - 2;
    unsigned int v65 = 32 - __clz(a4);
    unsigned int v66 = (__clz(v49) ^ 0x1F) + 2;
    if (v65 >= v66) {
      unsigned int v65 = v66;
    }
    if (v64 >= 6) {
      unsigned int v64 = 6;
    }
    if (v65 > v64) {
      unsigned int v64 = v65;
    }
    if (v64 <= 5) {
      unsigned int v64 = 5;
    }
    if (v64 >= 0xC) {
      int v67 = 12;
    }
    else {
      int v67 = v64;
    }
    unint64_t result = FSE_normalizeCount(v85, v67, (unsigned int *)&v87, a4, v47 - 1, 0);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    LODWORD(v68) = ((v67 * v47) >> 3) + 3;
    unint64_t v68 = v47 == 1 ? 512 : v68;
    unint64_t result = FSE_writeNCount_generic((_WORD *)(a1 + 1), a2 - 1, (uint64_t)v85, v47 - 1, v67, v43 >= v68);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    unint64_t v69 = result;
    unint64_t result = FSE_buildCTable_wksp(v91, v85, v47 - 1, v67, v90, 0x78uLL);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    uint64_t v70 = (unint64_t *)(v42 + v69);
    unint64_t result = FSE_compress_usingCTable_generic(v70, v44 - (void)v70, (unint64_t)&v81, a4, v91, a4 + ((unint64_t)a4 >> 7) + 12 <= v44 - (uint64_t)v70);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    if (result)
    {
      unint64_t result = (unint64_t)v70 + result - v42;
      if (result > 0xFFFFFFFFFFFFFF88) {
        return result;
      }
      if (result >= 2 && result < a4 >> 1)
      {
        *(unsigned char *)a1 = result++;
        return result;
      }
    }
  }
LABEL_45:
  if (a4 > 0x80) {
    return -1;
  }
  unint64_t result = ((a4 + 1) >> 1) + 1;
  if (result > a2) {
    return -70;
  }
  *(unsigned char *)a1 = a4 + 127;
  v82[v30 - 1] = 0;
  if (a4)
  {
    if (v30 <= 2) {
      unint64_t v62 = 2;
    }
    else {
      unint64_t v62 = v30;
    }
    if (v62 < 0xF)
    {
      unint64_t v63 = 0;
      goto LABEL_91;
    }
    unint64_t v72 = ((v62 - 1) >> 1) + 1;
    if (v62 >= 0x3F)
    {
      uint64_t v74 = 0;
      uint64_t v73 = v72 & 0x7FFFFFFFFFFFFFE0;
      uint64_t v75 = v83;
      do
      {
        unint64_t v76 = v75 - 32;
        int8x16x2_t v94 = vld2q_s8(v76);
        int8x16x2_t v95 = vld2q_s8(v75);
        uint64_t v77 = a1 + (v74 & 0x7FFFFFFFFFFFFFE0);
        *(int8x16_t *)(v77 + 1) = vaddq_s8(vshlq_n_s8(v94.val[0], 4uLL), v94.val[1]);
        *(int8x16_t *)(v77 + 17) = vaddq_s8(vshlq_n_s8(v95.val[0], 4uLL), v95.val[1]);
        v74 += 32;
        v75 += 64;
      }
      while (v73 != v74);
      if (v72 == v73) {
        return result;
      }
      if ((v72 & 0x18) == 0)
      {
        unint64_t v63 = 2 * v73;
LABEL_91:
        char v80 = (unsigned char *)(a1 + (v63 >> 1) + 1);
        do
        {
          *v80++ = v82[v63] + 16 * v82[v63 - 1];
          v63 += 2;
        }
        while (v63 < v30);
        return result;
      }
    }
    else
    {
      uint64_t v73 = 0;
    }
    uint64_t v78 = v72 & 0x7FFFFFFFFFFFFFF8;
    unint64_t v63 = 2 * (v72 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v79 = &v82[2 * v73 - 1];
    do
    {
      int8x8x2_t v93 = vld2_s8(v79);
      v79 += 16;
      *(int8x8_t *)(a1 + (v73 & 0x7FFFFFFFFFFFFFF8) + 1) = vadd_s8(vshl_n_s8(v93.val[0], 4uLL), v93.val[1]);
      v73 += 8;
    }
    while (v78 != v73);
    if (v72 != v78) {
      goto LABEL_91;
    }
  }
  return result;
}

unint64_t HUF_readCTable(uint64_t a1, _DWORD *a2, char *a3, unint64_t a4, _DWORD *a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  unint64_t result = HUF_readStats_wksp(v52, 0x100uLL, (uint64_t)v51, &v46, (_DWORD *)&v46 + 1, a3, a4, (unsigned __int16 *)&v53, 0x164uLL);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  *a5 = v51[0] != 0;
  uint64_t v9 = HIDWORD(v46);
  if (HIDWORD(v46) > 0xC) {
    return -44;
  }
  uint64_t v10 = v46;
  if (v46 > *a2 + 1) {
    return -48;
  }
  if (HIDWORD(v46))
  {
    uint64_t v11 = 0;
    int v12 = 0;
    do
    {
      int v13 = v51[v11 + 1] << v11;
      v51[v11 + 1] = v12;
      v12 += v13;
      ++v11;
    }
    while (v9 != v11);
  }
  if (v10)
  {
    unsigned int v14 = v9 + 1;
    if (v10 < 8)
    {
      uint64_t v15 = 0;
      goto LABEL_23;
    }
    if (v10 >= 0x10)
    {
      uint64_t v15 = v10 & 0xFFFFFFF0;
      int8x16_t v23 = vdupq_n_s8(v14);
      int32x4_t v24 = (unsigned char *)(a1 + 34);
      int v25 = (int8x16_t *)v52;
      uint64_t v26 = v15;
      do
      {
        int8x16_t v27 = *v25++;
        int8x16_t v28 = vbicq_s8(vsubq_s8(v23, v27), vceqzq_s8(v27));
        *(v24 - 32) = v28.i8[0];
        *(v24 - 28) = v28.i8[1];
        *(v24 - 24) = v28.i8[2];
        *(v24 - 20) = v28.i8[3];
        *(v24 - 16) = v28.i8[4];
        *(v24 - 12) = v28.i8[5];
        *(v24 - 8) = v28.i8[6];
        *(v24 - 4) = v28.i8[7];
        *int32x4_t v24 = v28.i8[8];
        v24[4] = v28.i8[9];
        v24[8] = v28.i8[10];
        v24[12] = v28.i8[11];
        v24[16] = v28.i8[12];
        v24[20] = v28.i8[13];
        v24[24] = v28.i8[14];
        v24[28] = v28.i8[15];
        v24 += 64;
        v26 -= 16;
      }
      while (v26);
      if (v15 == v10) {
        goto LABEL_28;
      }
      if ((v10 & 8) == 0)
      {
LABEL_23:
        uint64_t v29 = &v52[v15];
        unint64_t v30 = (unsigned char *)(a1 + 4 * v15 + 2);
        uint64_t v31 = v10 - v15;
        do
        {
          int v32 = *v29++;
          char v33 = v14 - v32;
          if (v32) {
            char v34 = v33;
          }
          else {
            char v34 = 0;
          }
          *unint64_t v30 = v34;
          v30 += 4;
          --v31;
        }
        while (v31);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = v15;
    int8x8_t v17 = vdup_n_s8(v14);
    uint64_t v15 = v10 & 0xFFFFFFF8;
    uint64_t v18 = v16 - v15;
    int32x4_t v19 = &v52[v16];
    int32x4_t v20 = (unsigned char *)(a1 + 4 * v16 + 18);
    do
    {
      int8x8_t v21 = *(int8x8_t *)v19;
      v19 += 8;
      int8x8_t v22 = vbic_s8(vsub_s8(v17, v21), vceqz_s8(v21));
      *(v20 - 16) = v22.i8[0];
      *(v20 - 12) = v22.i8[1];
      *(v20 - 8) = v22.i8[2];
      *(v20 - 4) = v22.i8[3];
      *int32x4_t v20 = v22.i8[4];
      v20[4] = v22.i8[5];
      v20[8] = v22.i8[6];
      v20[12] = v22.i8[7];
      v20 += 32;
      v18 += 8;
    }
    while (v18);
    if (v15 == v10)
    {
LABEL_28:
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      int v56 = 0;
      uint64_t v55 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      int v50 = 0;
      uint64_t v35 = (unsigned __int8 *)(a1 + 2);
      uint64_t v36 = v10;
      uint64_t v49 = 0;
      do
      {
        unsigned int v37 = *v35;
        v35 += 4;
        ++*((_WORD *)&v53 + v37);
        --v36;
      }
      while (v36);
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  int v56 = 0;
  uint64_t v55 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  int v50 = 0;
  uint64_t v49 = 0;
LABEL_30:
  *((_WORD *)&v47 + (v9 + 1)) = 0;
  if (v9)
  {
    __int16 v38 = 0;
    unsigned int v39 = (_WORD *)&v47 + v9;
    uint64_t v40 = (__int16 *)&v53 + v9;
    do
    {
      *v39-- = v38;
      __int16 v41 = *v40--;
      __int16 v38 = (unsigned __int16)(v41 + v38) >> 1;
      LODWORD(v9) = v9 - 1;
    }
    while (v9);
  }
  if (v10)
  {
    uint64_t v42 = (unsigned __int8 *)(a1 + 2);
    uint64_t v43 = v10;
    do
    {
      uint64_t v44 = 2 * *v42;
      __int16 v45 = *(_WORD *)((char *)&v47 + v44);
      *(_WORD *)((char *)&v47 + v44) = v45 + 1;
      *((_WORD *)v42 - 1) = v45;
      v42 += 4;
      --v43;
    }
    while (v43);
  }
  *a2 = v10 - 1;
  return result;
}

uint64_t HUF_getNbBits(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + 4 * a2 + 2);
}

uint64_t HUF_buildCTable_wksp(uint64_t a1, int *a2, uint64_t a3, unsigned int a4, char *a5, unint64_t a6)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  if ((a5 & 3) != 0) {
    return -1;
  }
  if (a6 >> 8 < 0x11) {
    return -66;
  }
  if (a3 > 0xFF) {
    return -46;
  }
  int v12 = a5 + 8;
  int v13 = a5 + 4096;
  uint64_t v14 = (a3 + 1);
  bzero(a5, 0x1100uLL);
  uint64_t v15 = a2;
  uint64_t v16 = (a3 + 1);
  do
  {
    int v17 = *v15++;
    unsigned int v18 = __clz(v17 + 1);
    ++*(_DWORD *)&v13[8 * (v18 ^ 0x1F)];
    --v16;
  }
  while (v16);
  uint64_t v19 = 0;
  int v20 = *((_DWORD *)a5 + 1082);
  int v21 = *((_DWORD *)a5 + 1080);
  int v22 = *((_DWORD *)a5 + 1078);
  int v23 = *((_DWORD *)a5 + 1076);
  int v24 = *((_DWORD *)a5 + 1074);
  int v25 = *((_DWORD *)a5 + 1072);
  int v26 = *((_DWORD *)a5 + 1070);
  int v27 = *((_DWORD *)a5 + 1068);
  int v28 = *((_DWORD *)a5 + 1066);
  int v29 = *((_DWORD *)a5 + 1064);
  int v30 = *((_DWORD *)a5 + 1062);
  int v31 = *((_DWORD *)a5 + 1060);
  int v32 = *((_DWORD *)a5 + 1058);
  int v33 = *((_DWORD *)a5 + 1056);
  int v34 = *((_DWORD *)a5 + 1054);
  int v35 = *((_DWORD *)a5 + 1084) + *((_DWORD *)a5 + 1086);
  int v36 = *((_DWORD *)a5 + 1052);
  *((_DWORD *)a5 + 1084) = v35;
  *((_DWORD *)a5 + 1085) = v35;
  int v37 = v20 + v35;
  *((_DWORD *)a5 + 1082) = v37;
  *((_DWORD *)a5 + 1083) = v37;
  int v38 = v21 + v37;
  *((_DWORD *)a5 + 1080) = v38;
  *((_DWORD *)a5 + 1081) = v38;
  int v39 = v22 + v38;
  *((_DWORD *)a5 + 1078) = v39;
  *((_DWORD *)a5 + 1079) = v39;
  int v40 = v23 + v39;
  *((_DWORD *)a5 + 1076) = v40;
  *((_DWORD *)a5 + 1077) = v40;
  int v41 = v24 + v40;
  *((_DWORD *)a5 + 1074) = v41;
  *((_DWORD *)a5 + 1075) = v41;
  int v42 = v25 + v41;
  *((_DWORD *)a5 + 1072) = v42;
  *((_DWORD *)a5 + 1073) = v42;
  int v43 = v26 + v42;
  *((_DWORD *)a5 + 1070) = v43;
  *((_DWORD *)a5 + 1071) = v43;
  int v44 = v27 + v43;
  *((_DWORD *)a5 + 1068) = v44;
  *((_DWORD *)a5 + 1069) = v44;
  int v45 = v28 + v44;
  *((_DWORD *)a5 + 1066) = v45;
  *((_DWORD *)a5 + 1067) = v45;
  int v46 = v29 + v45;
  *((_DWORD *)a5 + 1064) = v46;
  *((_DWORD *)a5 + 1065) = v46;
  int v47 = v30 + v46;
  *((_DWORD *)a5 + 1062) = v47;
  *((_DWORD *)a5 + 1063) = v47;
  int v48 = v31 + v47;
  *((_DWORD *)a5 + 1060) = v48;
  *((_DWORD *)a5 + 1061) = v48;
  int v49 = v32 + v48;
  *((_DWORD *)a5 + 1058) = v49;
  *((_DWORD *)a5 + 1059) = v49;
  int v50 = v33 + v49;
  *((_DWORD *)a5 + 1056) = v50;
  *((_DWORD *)a5 + 1057) = v50;
  int v51 = v34 + v50;
  *((_DWORD *)a5 + 1054) = v51;
  *((_DWORD *)a5 + 1055) = v51;
  int v52 = v36 + v51;
  *((_DWORD *)a5 + 1052) = v52;
  *((_DWORD *)a5 + 1053) = v52;
  int v53 = *((_DWORD *)a5 + 1050) + v52;
  *((_DWORD *)a5 + 1050) = v53;
  *((_DWORD *)a5 + 1051) = v53;
  int v54 = *((_DWORD *)a5 + 1048) + v53;
  *((_DWORD *)a5 + 1048) = v54;
  *((_DWORD *)a5 + 1049) = v54;
  int v55 = *((_DWORD *)a5 + 1046) + v54;
  *((_DWORD *)a5 + 1046) = v55;
  *((_DWORD *)a5 + 1047) = v55;
  int v56 = *((_DWORD *)a5 + 1044) + v55;
  *((_DWORD *)a5 + 1044) = v56;
  *((_DWORD *)a5 + 1045) = v56;
  int v57 = *((_DWORD *)a5 + 1042) + v56;
  *((_DWORD *)a5 + 1042) = v57;
  *((_DWORD *)a5 + 1043) = v57;
  int v58 = *((_DWORD *)a5 + 1040) + v57;
  *((_DWORD *)a5 + 1040) = v58;
  *((_DWORD *)a5 + 1041) = v58;
  int v59 = *((_DWORD *)a5 + 1038) + v58;
  *((_DWORD *)a5 + 1038) = v59;
  *((_DWORD *)a5 + 1039) = v59;
  int v60 = *((_DWORD *)a5 + 1036) + v59;
  *((_DWORD *)a5 + 1036) = v60;
  *((_DWORD *)a5 + 1037) = v60;
  int v61 = *((_DWORD *)a5 + 1034) + v60;
  *((_DWORD *)a5 + 1034) = v61;
  *((_DWORD *)a5 + 1035) = v61;
  int v62 = *((_DWORD *)a5 + 1032) + v61;
  *((_DWORD *)a5 + 1032) = v62;
  *((_DWORD *)a5 + 1033) = v62;
  int v63 = *((_DWORD *)a5 + 1030) + v62;
  *((_DWORD *)a5 + 1030) = v63;
  *((_DWORD *)a5 + 1031) = v63;
  int v64 = *((_DWORD *)a5 + 1028) + v63;
  *((_DWORD *)a5 + 1028) = v64;
  *((_DWORD *)a5 + 1029) = v64;
  int v65 = *((_DWORD *)a5 + 1026) + v64;
  *((_DWORD *)a5 + 1026) = v65;
  *((_DWORD *)a5 + 1027) = v65;
  int v66 = *((_DWORD *)a5 + 1024) + v65;
  *((_DWORD *)a5 + 1024) = v66;
  *((_DWORD *)a5 + 1025) = v66;
  do
  {
    unsigned int v69 = a2[v19];
    uint64_t v70 = &v13[8 * (__clz(v69 + 1) ^ 0x1F) + 8];
    unsigned int v72 = *(_DWORD *)v70;
    unsigned int v71 = *((_DWORD *)v70 + 1);
    *((_DWORD *)v70 + 1) = v71 + 1;
    if (v71 > v72)
    {
      while (1)
      {
        unsigned int v67 = v71 - 1;
        uint64_t v73 = &v12[8 * v71 - 8];
        if (v69 <= *(_DWORD *)v73) {
          break;
        }
        *(void *)&v12[8 * v71--] = *(void *)v73;
        if (v67 <= *(_DWORD *)v70) {
          goto LABEL_11;
        }
      }
    }
    unsigned int v67 = v71;
LABEL_11:
    unint64_t v68 = &v12[8 * v67];
    *(_DWORD *)unint64_t v68 = v69;
    v68[6] = v19++;
  }
  while (v19 != v14);
  int v74 = 0;
  uint64_t v75 = a3 << 32;
  int v76 = a3 + 1;
  uint64_t v77 = &a5[8 * (int)a3 + 20];
  int v78 = -1;
  do
  {
    --v74;
    int v79 = *((_DWORD *)v77 - 3);
    v75 -= 0x100000000;
    --v76;
    v77 -= 8;
    --v78;
  }
  while (!v79);
  if (a4) {
    unsigned int v80 = a4;
  }
  else {
    unsigned int v80 = 11;
  }
  int v81 = a3 + v74;
  int v82 = a3 + v74 + 1;
  unint64_t v83 = (a3 + v74 + 256);
  unsigned int v84 = &v12[v75 >> 29];
  *((_DWORD *)a5 + 514) = *(_DWORD *)v84 + v79;
  *((_WORD *)v84 + 2) = 256;
  *(_WORD *)uint64_t v77 = 256;
  if (v82 >= 2)
  {
    int v85 = a3 + v78;
    unint64_t v86 = 257;
    if (v83 <= 0x101) {
      uint64_t v87 = 257;
    }
    else {
      uint64_t v87 = v83;
    }
    unint64_t v88 = v87 - 256;
    if (v88 < 2) {
      goto LABEL_32;
    }
    unint64_t v86 = (v88 & 0xFFFFFFFFFFFFFFFELL) + 257;
    int v89 = a5 + 2072;
    uint64_t v90 = 257;
    if (v83 > 0x101) {
      uint64_t v90 = (v81 + 256);
    }
    unint64_t v91 = (v90 - 256) & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v89 - 2) = 0x40000000;
      *int v89 = 0x40000000;
      v89 += 4;
      v91 -= 2;
    }
    while (v91);
    if (v88 != (v88 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_32:
      uint64_t v92 = 257;
      if (v83 > 0x101) {
        uint64_t v92 = (v81 + 256);
      }
      uint64_t v93 = v92 - v86 + 1;
      int8x16x2_t v94 = &a5[8 * v86 + 8];
      do
      {
        *(_DWORD *)int8x16x2_t v94 = 0x40000000;
        v94 += 8;
        --v93;
      }
      while (v93);
    }
    *(_DWORD *)a5 = 0x80000000;
    if ((int)v83 <= 257) {
      uint64_t v95 = 257;
    }
    else {
      uint64_t v95 = v83;
    }
    int8x16x2_t v96 = a5 + 2064;
    uint64_t v97 = 256;
    int v98 = 256;
    do
    {
      unsigned int v99 = *(_DWORD *)&v12[8 * v85];
      ++v97;
      unsigned int v100 = *(_DWORD *)&v12[8 * v98];
      BOOL v101 = v99 >= v100;
      BOOL v102 = v99 < v100;
      if (v101) {
        int v103 = v98 + 1;
      }
      else {
        int v103 = v98;
      }
      if (!v101) {
        int v98 = v85;
      }
      int v104 = v85 - v102;
      unsigned int v105 = *(_DWORD *)&v12[8 * v104];
      unsigned int v106 = *(_DWORD *)&v12[8 * v103];
      BOOL v107 = v105 >= v106;
      if (v105 >= v106) {
        int v108 = v103;
      }
      else {
        int v108 = v104;
      }
      unint64_t v109 = &v12[8 * v98];
      uint64_t v110 = &v12[8 * v108];
      *int8x16x2_t v96 = *(_DWORD *)v110 + *(_DWORD *)v109;
      v96 += 2;
      int v111 = !v107;
      if (v107) {
        int v98 = v103 + 1;
      }
      else {
        int v98 = v103;
      }
      int v85 = v104 - v111;
      *((_WORD *)v110 + 2) = v97;
      *((_WORD *)v109 + 2) = v97;
    }
    while (v95 != v97);
    v12[8 * (int)v83 + 7] = 0;
    unint64_t v112 = &a5[8 * (v81 + 255) + 15];
    do
    {
      *unint64_t v112 = v12[8 * *(unsigned __int16 *)(v112 - 3) + 7] + 1;
      v112 -= 8;
      LODWORD(v83) = v83 - 1;
    }
    while ((int)v83 > 256);
  }
  else
  {
    *(_DWORD *)a5 = 0x80000000;
    v12[8 * (int)v83 + 7] = 0;
  }
  uint64_t v113 = (v81 + 2);
  if ((v82 & 0x80000000) == 0)
  {
    uint64_t v114 = a5 + 15;
    uint64_t v115 = v113;
    do
    {
      unsigned char *v114 = v12[8 * *(unsigned __int16 *)(v114 - 3) + 7] + 1;
      v114 += 8;
      --v115;
    }
    while (v115);
  }
  unsigned int v116 = v12[8 * v76 + 7];
  LODWORD(v117) = v116;
  char v118 = v116 - v80;
  if (v116 > v80)
  {
    LODWORD(v117) = v80;
    uint64_t v119 = v75 + 0x100000000;
    unsigned int v120 = v12[((v75 + 0x100000000) >> 29) + 7];
    if (v80 >= v120)
    {
      int v121 = 0;
      uint64_t v126 = v119 >> 32;
      LODWORD(v122) = a3 + v74 + 1;
    }
    else
    {
      int v121 = 0;
      uint64_t v122 = (a3 + v74 + 1);
      uint64_t v123 = &a5[8 * (int)v122 + 15];
      uint64_t v124 = v122 << 32;
      do
      {
        v121 += (1 << v118) + (-1 << (v116 - v120));
        *uint64_t v123 = v80;
        unsigned int v125 = *(v123 - 8);
        v123 -= 8;
        LOBYTE(v120) = v125;
        v124 -= 0x100000000;
        LODWORD(v122) = v122 - 1;
      }
      while (v80 < v125);
      uint64_t v126 = v124 >> 32;
    }
    LODWORD(v127) = v122 + 1;
    int v128 = v126 + 1;
    int v129 = &a5[8 * v126 + 15];
    do
    {
      int v130 = *v129;
      v129 -= 8;
      uint64_t v127 = (v127 - 1);
      --v128;
    }
    while (v80 == v130);
    signed int v131 = v121 >> v118;
    unint64_t v184 = 0xF0F0F0F0F0F0F0F0;
    *(void *)&long long v132 = 0xF0F0F0F0F0F0F0F0;
    *((void *)&v132 + 1) = 0xF0F0F0F0F0F0F0F0;
    long long v182 = v132;
    long long v183 = v132;
    long long v181 = v132;
    if ((v128 & 0x80000000) == 0)
    {
      unsigned int v133 = &a5[8 * v127 + 15];
      unsigned int v134 = v80;
      do
      {
        while (1)
        {
          unsigned int v137 = *v133;
          v133 -= 8;
          unsigned int v136 = v137;
          if (v134 <= v137) {
            break;
          }
          *((_DWORD *)&v181 + v80 - v136) = v127;
          int v135 = v127;
          unsigned int v134 = v136;
          --v127;
          if (v135 <= 0) {
            goto LABEL_73;
          }
        }
        int v138 = v127--;
      }
      while (v138 > 0);
    }
LABEL_73:
    if (v131 >= 1)
    {
      do
      {
        unsigned int v139 = __clz(v131);
        if (v139 == 31)
        {
LABEL_77:
          LODWORD(v140) = 1;
        }
        else
        {
          uint64_t v140 = 32 - v139;
          while (1)
          {
            uint64_t v142 = *((unsigned int *)&v181 + v140);
            unsigned int v143 = v140 - 1;
            if (v142 != -252645136)
            {
              uint64_t v144 = *((unsigned int *)&v181 + v143);
              if (v144 == -252645136
                || *(_DWORD *)&v12[8 * v142] <= (2 * *(_DWORD *)&v12[8 * v144]))
              {
                break;
              }
            }
            --v140;
            if ((v143 & 0xFFFFFFFE) == 0) {
              goto LABEL_77;
            }
          }
          if (v140 > 0xC) {
            goto LABEL_88;
          }
        }
        uint64_t v141 = 4 * v140;
        while (*(_DWORD *)((char *)&v181 + v141) == -252645136)
        {
          LODWORD(v140) = v140 + 1;
          v141 += 4;
          if (v141 == 52)
          {
            LODWORD(v140) = 13;
            break;
          }
        }
LABEL_88:
        unsigned int v145 = v140 - 1;
        uint64_t v146 = v140;
        uint64_t v147 = *((unsigned int *)&v181 + v140);
        int v148 = *((_DWORD *)&v181 + v145);
        ++v12[8 * v147 + 7];
        if (v148 == -252645136) {
          int v149 = v147;
        }
        else {
          int v149 = v148;
        }
        *((_DWORD *)&v181 + v145) = v149;
        int v150 = -252645136;
        if (v147)
        {
          int v151 = v147 - 1;
          if (v80 - v146 == v12[8 * v151 + 7]) {
            int v150 = v151;
          }
          else {
            int v150 = -252645136;
          }
        }
        v131 += -1 << v145;
        *((_DWORD *)&v181 + v146) = v150;
      }
      while (v131 > 0);
    }
    if (v131 < 0)
    {
      int v161 = DWORD1(v181);
      float v162 = a5 + 15;
      do
      {
        if (v131 < 0) {
          int v163 = -1;
        }
        else {
          int v163 = v131;
        }
        unsigned int v164 = -252645136 - v161;
        if (v163 - v131 < (-252645136 - v161)) {
          unsigned int v164 = v163 - v131;
        }
        unsigned int v165 = v164 + 1;
        if (v164 + 1 >= 3 && -2 - v161 >= v164 && &v162[8 * (v161 + 1) + 8 * v164] >= &v162[8 * (v161 + 1)])
        {
          int v167 = v165 & 1;
          if ((v165 & 1) == 0) {
            int v167 = 2;
          }
          unsigned int v168 = v165 - v167;
          int v169 = v161 + v168;
          v131 += v168;
          int v170 = v161 + 2;
          do
          {
            float v171 = &v12[8 * v170];
            char v172 = v171[7] - 1;
            --v12[8 * (v170 - 1) + 7];
            v171[7] = v172;
            v170 += 2;
            v168 -= 2;
          }
          while (v168);
          int v161 = v169;
        }
        int v173 = v163 + 1;
        while (v161 != -252645136)
        {
          --v12[8 * ++v161 + 7];
          if (v173 == ++v131) {
            goto LABEL_96;
          }
        }
        int v161 = v128 + 2;
        BOOL v174 = &v162[8 * v128++];
        do
        {
          int v175 = *v174;
          v174 -= 8;
          --v128;
          --v161;
        }
        while (v80 == v175);
        --v12[8 * v161 + 7];
        BOOL v155 = v131++ <= -2;
      }
      while (v155);
    }
  }
LABEL_96:
  if (v117 > 0xC) {
    return -1;
  }
  long long v181 = 0uLL;
  WORD4(v182) = 0;
  *(void *)&long long v182 = 0;
  memset(v185, 0, sizeof(v185));
  __int16 v186 = 0;
  if ((v82 & 0x80000000) == 0)
  {
    uint64_t v152 = (unsigned __int8 *)(a5 + 15);
    do
    {
      unsigned int v153 = *v152;
      v152 += 8;
      ++*((_WORD *)&v181 + v153);
      --v113;
    }
    while (v113);
  }
  uint64_t result = v117;
  if ((int)v117 >= 1)
  {
    __int16 v154 = 0;
    unint64_t v117 = v117;
    do
    {
      *((_WORD *)v185 + v117) = v154;
      __int16 v154 = (unsigned __int16)(*((_WORD *)&v181 + v117) + v154) >> 1;
      BOOL v155 = v117-- > 1;
    }
    while (v155);
  }
  if ((a3 & 0x80000000) == 0)
  {
    if (a3)
    {
      uint64_t v156 = v14 & 0xFFFFFFFE;
      int v157 = a5 + 23;
      uint64_t v158 = v156;
      do
      {
        char v159 = *v157;
        uint64_t v160 = a1 + 4 * *(v157 - 1);
        *(unsigned char *)(a1 + 4 * *(v157 - 9) + 2) = *(v157 - 8);
        *(unsigned char *)(v160 + 2) = v159;
        v157 += 16;
        v158 -= 2;
      }
      while (v158);
      if (v156 == v14) {
        goto LABEL_137;
      }
    }
    else
    {
      uint64_t v156 = 0;
    }
    uint64_t v176 = v14 - v156;
    uint64_t v177 = &a5[8 * v156 + 15];
    do
    {
      *(unsigned char *)(a1 + 4 * *(v177 - 1) + 2) = *v177;
      v177 += 8;
      --v176;
    }
    while (v176);
LABEL_137:
    float v178 = (unsigned __int8 *)(a1 + 2);
    do
    {
      uint64_t v179 = 2 * *v178;
      __int16 v180 = *(_WORD *)((char *)v185 + v179);
      *(_WORD *)((char *)v185 + v179) = v180 + 1;
      *((_WORD *)v178 - 1) = v180;
      v178 += 4;
      --v14;
    }
    while (v14);
  }
  return result;
}

unint64_t HUF_estimateCompressedSize(uint64_t a1, int32x4_t *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v4 = a3 + 1;
  if (a3 >= 8)
  {
    if (a3 >= 0x20)
    {
      int64x2_t v8 = 0uLL;
      unint64_t v9 = 32;
      if ((((_BYTE)a3 + 1) & 0x1F) != 0) {
        unint64_t v9 = ((_BYTE)a3 + 1) & 0x1F;
      }
      uint64_t v5 = v4 - v9;
      uint64_t v10 = (const char *)(a1 + 66);
      uint64_t v11 = a2 + 4;
      int64x2_t v12 = 0uLL;
      int64x2_t v13 = 0uLL;
      int64x2_t v14 = 0uLL;
      int64x2_t v15 = 0uLL;
      int32x4_t v3 = 0uLL;
      int64x2_t v16 = 0uLL;
      int64x2_t v17 = 0uLL;
      int64x2_t v18 = 0uLL;
      int64x2_t v19 = 0uLL;
      uint64_t v20 = a3 + 1;
      int64x2_t v21 = 0uLL;
      int64x2_t v22 = 0uLL;
      int64x2_t v23 = 0uLL;
      int64x2_t v24 = 0uLL;
      int64x2_t v25 = 0uLL;
      int64x2_t v26 = 0uLL;
      do
      {
        int v27 = v10 - 64;
        unsigned long long v28 = (unsigned __int128)vld4q_s8(v27);
        unsigned long long v29 = (unsigned __int128)vld4q_s8(v10);
        int32x4_t v30 = (int32x4_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_1889B9EE0);
        int32x4_t v31 = (int32x4_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_1889B9EF0);
        int32x4_t v32 = (int32x4_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_1889B9F00);
        int32x4_t v33 = (int32x4_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_1889B9F10);
        int32x4_t v34 = (int32x4_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_1889B9EE0);
        int32x4_t v35 = (int32x4_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_1889B9EF0);
        uint32x4_t v36 = (uint32x4_t)vmulq_s32(v11[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v28, (int8x16_t)xmmword_1889B9F10));
        uint32x4_t v37 = (uint32x4_t)vmulq_s32(v11[-2], v32);
        uint32x4_t v38 = (uint32x4_t)vmulq_s32(v11[-3], v31);
        uint32x4_t v39 = (uint32x4_t)vmulq_s32(v11[-4], v30);
        uint32x4_t v40 = (uint32x4_t)vmulq_s32(v11[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v29, (int8x16_t)xmmword_1889B9F00));
        uint32x4_t v41 = (uint32x4_t)vmulq_s32(v11[1], v35);
        uint32x4_t v42 = (uint32x4_t)vmulq_s32(*v11, v34);
        uint32x4_t v43 = (uint32x4_t)vmulq_s32(v11[3], v33);
        int32x4_t v3 = (int32x4_t)vaddw_high_u32((uint64x2_t)v3, v37);
        int64x2_t v15 = (int64x2_t)vaddw_u32((uint64x2_t)v15, *(uint32x2_t *)v37.i8);
        int64x2_t v14 = (int64x2_t)vaddw_high_u32((uint64x2_t)v14, v38);
        int64x2_t v13 = (int64x2_t)vaddw_u32((uint64x2_t)v13, *(uint32x2_t *)v38.i8);
        int64x2_t v12 = (int64x2_t)vaddw_high_u32((uint64x2_t)v12, v39);
        int64x2_t v8 = (int64x2_t)vaddw_u32((uint64x2_t)v8, *(uint32x2_t *)v39.i8);
        int64x2_t v16 = (int64x2_t)vaddw_u32((uint64x2_t)v16, *(uint32x2_t *)v36.i8);
        int64x2_t v17 = (int64x2_t)vaddw_high_u32((uint64x2_t)v17, v36);
        int64x2_t v24 = (int64x2_t)vaddw_high_u32((uint64x2_t)v24, v40);
        int64x2_t v23 = (int64x2_t)vaddw_u32((uint64x2_t)v23, *(uint32x2_t *)v40.i8);
        int64x2_t v22 = (int64x2_t)vaddw_high_u32((uint64x2_t)v22, v41);
        int64x2_t v21 = (int64x2_t)vaddw_u32((uint64x2_t)v21, *(uint32x2_t *)v41.i8);
        int64x2_t v19 = (int64x2_t)vaddw_high_u32((uint64x2_t)v19, v42);
        int64x2_t v18 = (int64x2_t)vaddw_u32((uint64x2_t)v18, *(uint32x2_t *)v42.i8);
        int64x2_t v25 = (int64x2_t)vaddw_u32((uint64x2_t)v25, *(uint32x2_t *)v43.i8);
        int64x2_t v26 = (int64x2_t)vaddw_high_u32((uint64x2_t)v26, v43);
        v10 += 128;
        v11 += 8;
        v20 -= 32;
      }
      while (v9 != v20);
      unint64_t v6 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v18, v8), vaddq_s64(v23, v15)), vaddq_s64(vaddq_s64(v21, v13), vaddq_s64(v25, v16))), vaddq_s64(vaddq_s64(vaddq_s64(v19, v12), vaddq_s64(v24, (int64x2_t)v3)), vaddq_s64(vaddq_s64(v22, v14), vaddq_s64(v26, v17)))));
      if (v9 < 9) {
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v44 = ((_BYTE)a3 + 1) & 7;
    if ((((_BYTE)a3 + 1) & 7) == 0) {
      uint64_t v44 = 8;
    }
    uint64_t v45 = 4 * v5;
    uint64_t v46 = v44 + v5;
    uint64_t v5 = v4 - v44;
    int64x2_t v47 = 0uLL;
    int64x2_t v48 = (int64x2_t)v6;
    int v49 = (const char *)(v45 + a1 + 2);
    int v50 = (int32x4_t *)((char *)a2 + v45);
    uint64_t v51 = v46 - v4;
    int64x2_t v52 = 0uLL;
    int64x2_t v53 = 0uLL;
    do
    {
      v3.i64[0] = (unint64_t)vld4_s8(v49);
      v49 += 32;
      int32x4_t v54 = (int32x4_t)vqtbl1q_s8((int8x16_t)v3, (int8x16_t)xmmword_1889B9EE0);
      int32x4_t v55 = (int32x4_t)vqtbl1q_s8((int8x16_t)v3, (int8x16_t)xmmword_1889B9EF0);
      int32x4_t v3 = *v50;
      int32x4_t v56 = v50[1];
      v50 += 2;
      uint32x4_t v57 = (uint32x4_t)vmulq_s32(v56, v55);
      uint32x4_t v58 = (uint32x4_t)vmulq_s32(v3, v54);
      int64x2_t v53 = (int64x2_t)vaddw_high_u32((uint64x2_t)v53, v57);
      int64x2_t v47 = (int64x2_t)vaddw_high_u32((uint64x2_t)v47, v58);
      int64x2_t v52 = (int64x2_t)vaddw_u32((uint64x2_t)v52, *(uint32x2_t *)v57.i8);
      int64x2_t v48 = (int64x2_t)vaddw_u32((uint64x2_t)v48, *(uint32x2_t *)v58.i8);
      v51 += 8;
    }
    while (v51);
    unint64_t v6 = vaddvq_s64(vaddq_s64(vaddq_s64(v48, v52), vaddq_s64(v47, v53)));
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
  }
LABEL_17:
  int v59 = &a2->i32[v5];
  int v60 = (unsigned __int8 *)(4 * v5 + a1 + 2);
  uint64_t v61 = v4 - v5;
  do
  {
    int v63 = *v60;
    v60 += 4;
    int v62 = v63;
    int v64 = *v59++;
    v6 += (v64 * v62);
    --v61;
  }
  while (v61);
  return v6 >> 3;
}

BOOL HUF_validateCTable(uint64_t a1, int32x4_t *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 1;
  }
  uint64_t v3 = a3 + 1;
  if (a3 >= 8)
  {
    if (a3 >= 0x20)
    {
      unint64_t v7 = 32;
      int8x16_t v8 = 0uLL;
      v9.i64[0] = 0x100000001;
      v9.i64[1] = 0x100000001;
      int8x16_t v10 = 0uLL;
      if ((((_BYTE)a3 + 1) & 0x1F) != 0) {
        unint64_t v7 = ((_BYTE)a3 + 1) & 0x1F;
      }
      uint64_t v4 = v3 - v7;
      uint64_t v11 = (const char *)(a1 + 66);
      int64x2_t v12 = a2 + 4;
      uint64_t v13 = a3 + 1;
      int8x16_t v14 = 0uLL;
      int8x16_t v15 = 0uLL;
      int8x16_t v16 = 0uLL;
      int8x16_t v17 = 0uLL;
      int8x16_t v18 = 0uLL;
      int8x16_t v19 = 0uLL;
      do
      {
        uint64_t v20 = v11 - 64;
        unsigned long long v21 = (unsigned __int128)vld4q_s8(v20);
        unsigned long long v22 = (unsigned __int128)vld4q_s8(v11);
        int8x16_t v23 = vceqzq_s8((int8x16_t)v21);
        int8x16_t v24 = vceqzq_s8((int8x16_t)v22);
        int8x8_t v25 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v12[-2]), (int16x8_t)vceqzq_s32(v12[-1])))), (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
        int8x16_t v26 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v25, *(int8x8_t *)v8.i8)), v9);
        int8x16_t v27 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v25, *(int8x8_t *)v8.i8)), v9);
        int8x8_t v28 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v12[-4]), (int16x8_t)vceqzq_s32(v12[-3])))), *(int8x8_t *)v23.i8);
        int8x8_t v29 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v12), (int16x8_t)vceqzq_s32(v12[1])))), *(int8x8_t *)v24.i8);
        int8x16_t v30 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v29, *(int8x8_t *)v8.i8)), v9);
        int8x16_t v31 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v29, *(int8x8_t *)v8.i8)), v9);
        int8x8_t v32 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v12[2]), (int16x8_t)vceqzq_s32(v12[3])))), (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
        int8x16_t v33 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v32, *(int8x8_t *)v8.i8)), v9);
        int8x16_t v34 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v32, *(int8x8_t *)v8.i8)), v9);
        int8x16_t v10 = vorrq_s8(v10, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v28, *(int8x8_t *)v8.i8)), v9));
        int8x16_t v8 = vorrq_s8(v8, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v28, *(int8x8_t *)v8.i8)), v9));
        int8x16_t v15 = vorrq_s8(v15, v27);
        int8x16_t v14 = vorrq_s8(v14, v26);
        int8x16_t v19 = vorrq_s8(v19, v34);
        v11 += 128;
        int8x16_t v18 = vorrq_s8(v18, v33);
        v12 += 8;
        int8x16_t v17 = vorrq_s8(v17, v31);
        v13 -= 32;
        int8x16_t v16 = vorrq_s8(v16, v30);
      }
      while (v7 != v13);
      int8x16_t v35 = vorrq_s8(vorrq_s8(vorrq_s8(v16, v8), vorrq_s8(v18, v14)), vorrq_s8(vorrq_s8(v17, v10), vorrq_s8(v19, v15)));
      *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      unsigned __int32 v5 = v35.i32[0] | v35.i32[1];
      if (v7 < 9) {
        goto LABEL_17;
      }
    }
    else
    {
      unsigned __int32 v5 = 0;
      uint64_t v4 = 0;
    }
    uint64_t v36 = ((_BYTE)a3 + 1) & 7;
    if ((((_BYTE)a3 + 1) & 7) == 0) {
      uint64_t v36 = 8;
    }
    uint64_t v37 = 4 * v4;
    uint64_t v38 = v36 + v4;
    uint64_t v4 = v3 - v36;
    int8x16_t v39 = (int8x16_t)v5;
    int8x16_t v40 = 0uLL;
    uint32x4_t v41 = (int32x4_t *)((char *)a2 + v37);
    uint32x4_t v42 = (const char *)(v37 + a1 + 2);
    uint64_t v43 = v38 - v3;
    v44.i64[0] = 0x100000001;
    v44.i64[1] = 0x100000001;
    do
    {
      int32x4_t v45 = *v41;
      int32x4_t v46 = v41[1];
      v41 += 2;
      *(int8x8_t *)v45.i8 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v45), (int16x8_t)vceqzq_s32(v46))));
      v46.i64[0] = (unint64_t)vld4_s8(v42);
      v42 += 32;
      *(int8x8_t *)v45.i8 = vand_s8(*(int8x8_t *)v45.i8, vceqz_s8(*(int8x8_t *)v46.i8));
      int8x16_t v40 = vorrq_s8(v40, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v39.i8)), v44));
      int8x16_t v39 = vorrq_s8(v39, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v45.i8, *(int8x8_t *)v39.i8)), v44));
      v43 += 8;
    }
    while (v43);
    int8x16_t v47 = vorrq_s8(v39, v40);
    *(int8x8_t *)v47.i8 = vorr_s8(*(int8x8_t *)v47.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
    unsigned __int32 v5 = v47.i32[0] | v47.i32[1];
  }
  else
  {
    uint64_t v4 = 0;
    unsigned __int32 v5 = 0;
  }
LABEL_17:
  int64x2_t v48 = &a2->i32[v4];
  int v49 = (unsigned __int8 *)(4 * v4 + a1 + 2);
  uint64_t v50 = v3 - v4;
  do
  {
    int v51 = *v48++;
    BOOL v54 = v51 == 0;
    int v53 = *v49;
    v49 += 4;
    int v52 = v53;
    BOOL v54 = !v54 && v52 == 0;
    int v55 = v54;
    v5 |= v55;
    --v50;
  }
  while (v50);
  return v5 == 0;
}

uint64_t HUF_compressBound(unint64_t a1)
{
  return a1 + (a1 >> 8) + 137;
}

uint64_t HUF_compress1X_usingCTable_internal(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 <= 8) {
    return 0;
  }
  unint64_t v5 = (unint64_t)a1 + a2 - 8;
  unint64_t v6 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v7 = a4 & 3;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = v7;
  int64x2_t v12 = a1;
  switch(a4 & 3)
  {
    case 1:
      goto LABEL_5;
    case 2:
      goto LABEL_4;
    case 3:
      uint64_t v13 = (unsigned __int16 *)(a5 + 4 * *(unsigned __int8 *)(a3 + (v6 | 2)));
      uint64_t v9 = *v13;
      uint64_t v8 = *((unsigned __int8 *)v13 + 2);
LABEL_4:
      int8x16_t v14 = (unsigned __int16 *)(a5 + 4 * *(unsigned __int8 *)(a3 + (v6 | 1)));
      unint64_t v10 = ((unint64_t)*v14 << v8) | v9;
      v8 += *((unsigned __int8 *)v14 + 2);
LABEL_5:
      int8x16_t v15 = (unsigned __int16 *)(a5 + 4 * *(unsigned __int8 *)(a3 + v6));
      unint64_t v16 = ((unint64_t)*v15 << v8) | v10;
      unint64_t v17 = v8 + *((unsigned __int8 *)v15 + 2);
      unint64_t v18 = v17 >> 3;
      *a1 = v16;
      int64x2_t v12 = (unint64_t *)((char *)a1 + (v17 >> 3));
      if ((unint64_t)v12 > v5) {
        int64x2_t v12 = (unint64_t *)((char *)a1 + a2 - 8);
      }
      unint64_t v7 = v17 & 7;
      unint64_t v11 = v16 >> (8 * v18);
      break;
    default:
      break;
  }
  if (v6)
  {
    uint64_t v19 = a3 - 2;
    do
    {
      uint64_t v20 = (unsigned __int16 *)(a5 + 4 * *(unsigned __int8 *)(v19 + v6 + 1));
      unint64_t v21 = (unint64_t)*v20 << v7;
      unint64_t v22 = v7 + *((unsigned __int8 *)v20 + 2);
      int8x16_t v23 = (unsigned __int16 *)(a5 + 4 * *(unsigned __int8 *)(v19 + v6));
      unint64_t v24 = (unint64_t)*v23 << v22;
      unint64_t v25 = v22 + *((unsigned __int8 *)v23 + 2);
      int8x16_t v26 = (unsigned __int16 *)(a5 + 4 * *(unsigned __int8 *)(v19 + v6 - 1));
      unint64_t v27 = (unint64_t)*v26 << v25;
      unint64_t v28 = v25 + *((unsigned __int8 *)v26 + 2);
      int8x8_t v29 = (unsigned __int16 *)(a5 + 4 * *(unsigned __int8 *)(v19 + v6 - 2));
      unint64_t v30 = v21 | v11 | v24 | v27 | ((unint64_t)*v29 << v28);
      unint64_t v31 = v28 + *((unsigned __int8 *)v29 + 2);
      unint64_t v32 = v31 >> 3;
      void *v12 = v30;
      int64x2_t v12 = (void *)((char *)v12 + (v31 >> 3));
      if ((unint64_t)v12 > v5) {
        int64x2_t v12 = (void *)v5;
      }
      unint64_t v7 = v31 & 7;
      unint64_t v11 = v30 >> (8 * v32);
      v6 -= 4;
    }
    while (v6);
  }
  uint64_t v33 = (1 << v7) | v11;
  unint64_t v34 = v7 + 1;
  void *v12 = v33;
  int8x16_t v35 = (char *)v12 + (v34 >> 3);
  if (v5 <= (unint64_t)v35) {
    return 0;
  }
  if ((v34 & 7) != 0) {
    return v35 - (char *)a1 + 1;
  }
  return v35 - (char *)a1;
}

unint64_t HUF_compress4X_usingCTable_internal(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t result = 0;
  if (a2 >= 0x11 && a4 >= 0xC)
  {
    unint64_t v11 = (a4 + 3) >> 2;
    uint64_t v12 = a1 + 6;
    unint64_t result = HUF_compress1X_usingCTable_internal((unint64_t *)(a1 + 6), a2 - 6, a3, v11, a5);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      if (result)
      {
        uint64_t v13 = a1 + a2;
        *(_WORD *)a1 = result;
        uint64_t v14 = v12 + result;
        unint64_t result = HUF_compress1X_usingCTable_internal((unint64_t *)(v12 + result), v13 - (v12 + result), a3 + v11, (a4 + 3) >> 2, a5);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          if (result)
          {
            *(_WORD *)(a1 + 2) = result;
            int8x16_t v15 = (unint64_t *)(v14 + result);
            unint64_t result = HUF_compress1X_usingCTable_internal(v15, v13 - (void)v15, a3 + v11 + v11, (a4 + 3) >> 2, a5);
            if (result <= 0xFFFFFFFFFFFFFF88)
            {
              if (result)
              {
                unint64_t v16 = a3 + a4;
                *(_WORD *)(a1 + 4) = result;
                unint64_t v17 = (char *)v15 + result;
                unint64_t result = HUF_compress1X_usingCTable_internal((unint64_t *)((char *)v15 + result), v13 - ((void)v15 + result), a3 + v11 + v11 + v11, v16 - (a3 + v11 + v11 + v11), a5);
                if (result <= 0xFFFFFFFFFFFFFF88)
                {
                  if (result) {
                    return (unint64_t)&v17[result - a1];
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t HUF_compress1X_wksp(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, char *a7, unint64_t a8)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 0, a7, a8, 0, 0, 0);
}

unint64_t HUF_compress_internal(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, int a7, char *a8, unint64_t a9, char *a10, int *a11, int a12)
{
  int v227 = a5;
  if (a9 >> 8 < 0x19) {
    return -66;
  }
  unint64_t v12 = 0;
  if (!a2 || !a4) {
    return v12;
  }
  if (a4 > 0x20000) {
    return -72;
  }
  if (a6 > 0xC) {
    return -44;
  }
  if (a5 > 0xFF) {
    return -46;
  }
  unint64_t v18 = (unint64_t *)a1;
  uint64_t v19 = a1 + a2;
  if (!a5)
  {
    a5 = 255;
    int v227 = 255;
  }
  if (a6) {
    int v20 = a6;
  }
  else {
    int v20 = 11;
  }
  if (a11) {
    BOOL v21 = a12 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  char v22 = v21;
  if (v21 || *a11 != 2)
  {
    if ((a8 & 3) != 0) {
      return -1;
    }
    uint64_t v224 = a1 + a2;
    unsigned int v225 = v20;
    if (a5 < 0xFF)
    {
      int v29 = 1;
      goto LABEL_42;
    }
    int v227 = 255;
    if (a4 > 0x5DB)
    {
      int v29 = 0;
LABEL_42:
      unint64_t v12 = HIST_count_parallel_wksp(a8, (unsigned int *)&v227, a3, a4, v29, a8);
      if (v12 > 0xFFFFFFFFFFFFFF88) {
        return v12;
      }
LABEL_52:
      if (v12 == a4)
      {
        *(unsigned char *)unint64_t v18 = *(unsigned char *)a3;
        return 1;
      }
      if (v12 <= (a4 >> 7) + 4) {
        return 0;
      }
      if (!a11)
      {
LABEL_87:
        unsigned int v100 = (__clz(a4 - 1) ^ 0x1F) - 1;
        unsigned int v101 = __clz(a4) ^ 0x1F;
        unsigned int v102 = (__clz(v227) ^ 0x1F) + 2;
        if (v101 + 1 < v102) {
          unsigned int v103 = v101 + 1;
        }
        else {
          unsigned int v103 = v102;
        }
        if (v100 >= v225) {
          unsigned int v100 = v225;
        }
        if (v103 > v100) {
          unsigned int v100 = v103;
        }
        if (v100 <= 5) {
          unsigned int v100 = 5;
        }
        if (v100 >= 0xC) {
          unsigned int v104 = 12;
        }
        else {
          unsigned int v104 = v100;
        }
        unsigned int v226 = v227;
        unint64_t v12 = HUF_buildCTable_wksp((uint64_t)(a8 + 1024), (int *)a8, v227, v104, a8 + 2048, 0x1100uLL);
        if (v12 > 0xFFFFFFFFFFFFFF88) {
          return v12;
        }
        uint64_t v223 = v226 + 1;
        bzero(&a8[4 * v223 + 1024], 1024 - 4 * v223);
        unint64_t v105 = HUF_writeCTable((uint64_t)v18, a2, (uint64_t)(a8 + 1024), v226, v12);
        unint64_t v12 = v105;
        if (v105 > 0xFFFFFFFFFFFFFF88) {
          return v12;
        }
        if (a11)
        {
          if (*a11)
          {
            if ((v226 & 0x80000000) != 0) {
              goto LABEL_147;
            }
            if (v223 < 9)
            {
              uint64_t v107 = 0;
              unint64_t v108 = 0;
              goto LABEL_123;
            }
            if (v223 >= 0x21)
            {
              int64x2_t v109 = 0uLL;
              if ((v223 & 0x1F) != 0) {
                unint64_t v110 = v223 & 0x1F;
              }
              else {
                unint64_t v110 = 32;
              }
              uint64_t v107 = v223 - v110;
              int v111 = a10 + 66;
              unint64_t v112 = (int32x4_t *)(a8 + 64);
              int64x2_t v113 = 0uLL;
              int64x2_t v114 = 0uLL;
              int64x2_t v115 = 0uLL;
              int64x2_t v116 = 0uLL;
              int32x4_t v106 = 0uLL;
              int64x2_t v117 = 0uLL;
              int64x2_t v118 = 0uLL;
              int64x2_t v119 = 0uLL;
              int64x2_t v120 = 0uLL;
              uint64_t v121 = v226 + 1;
              int64x2_t v122 = 0uLL;
              int64x2_t v123 = 0uLL;
              int64x2_t v124 = 0uLL;
              int64x2_t v125 = 0uLL;
              int64x2_t v126 = 0uLL;
              int64x2_t v127 = 0uLL;
              do
              {
                int v128 = v111 - 64;
                unsigned long long v129 = (unsigned __int128)vld4q_s8(v128);
                unsigned long long v130 = (unsigned __int128)vld4q_s8(v111);
                int32x4_t v131 = (int32x4_t)vqtbl1q_s8((int8x16_t)v129, (int8x16_t)xmmword_1889B9EE0);
                int32x4_t v132 = (int32x4_t)vqtbl1q_s8((int8x16_t)v129, (int8x16_t)xmmword_1889B9EF0);
                int32x4_t v133 = (int32x4_t)vqtbl1q_s8((int8x16_t)v129, (int8x16_t)xmmword_1889B9F00);
                int32x4_t v134 = (int32x4_t)vqtbl1q_s8((int8x16_t)v130, (int8x16_t)xmmword_1889B9F10);
                int32x4_t v135 = (int32x4_t)vqtbl1q_s8((int8x16_t)v130, (int8x16_t)xmmword_1889B9EE0);
                int32x4_t v136 = (int32x4_t)vqtbl1q_s8((int8x16_t)v130, (int8x16_t)xmmword_1889B9EF0);
                uint32x4_t v137 = (uint32x4_t)vmulq_s32(v112[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v129, (int8x16_t)xmmword_1889B9F10));
                uint32x4_t v138 = (uint32x4_t)vmulq_s32(v112[-2], v133);
                uint32x4_t v139 = (uint32x4_t)vmulq_s32(v112[-3], v132);
                uint32x4_t v140 = (uint32x4_t)vmulq_s32(v112[-4], v131);
                uint32x4_t v141 = (uint32x4_t)vmulq_s32(v112[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v130, (int8x16_t)xmmword_1889B9F00));
                uint32x4_t v142 = (uint32x4_t)vmulq_s32(v112[1], v136);
                uint32x4_t v143 = (uint32x4_t)vmulq_s32(*v112, v135);
                uint32x4_t v144 = (uint32x4_t)vmulq_s32(v112[3], v134);
                int32x4_t v106 = (int32x4_t)vaddw_high_u32((uint64x2_t)v106, v138);
                int64x2_t v116 = (int64x2_t)vaddw_u32((uint64x2_t)v116, *(uint32x2_t *)v138.i8);
                int64x2_t v115 = (int64x2_t)vaddw_high_u32((uint64x2_t)v115, v139);
                int64x2_t v114 = (int64x2_t)vaddw_u32((uint64x2_t)v114, *(uint32x2_t *)v139.i8);
                int64x2_t v113 = (int64x2_t)vaddw_high_u32((uint64x2_t)v113, v140);
                int64x2_t v109 = (int64x2_t)vaddw_u32((uint64x2_t)v109, *(uint32x2_t *)v140.i8);
                int64x2_t v117 = (int64x2_t)vaddw_u32((uint64x2_t)v117, *(uint32x2_t *)v137.i8);
                int64x2_t v118 = (int64x2_t)vaddw_high_u32((uint64x2_t)v118, v137);
                int64x2_t v125 = (int64x2_t)vaddw_high_u32((uint64x2_t)v125, v141);
                int64x2_t v124 = (int64x2_t)vaddw_u32((uint64x2_t)v124, *(uint32x2_t *)v141.i8);
                int64x2_t v123 = (int64x2_t)vaddw_high_u32((uint64x2_t)v123, v142);
                int64x2_t v122 = (int64x2_t)vaddw_u32((uint64x2_t)v122, *(uint32x2_t *)v142.i8);
                int64x2_t v120 = (int64x2_t)vaddw_high_u32((uint64x2_t)v120, v143);
                int64x2_t v119 = (int64x2_t)vaddw_u32((uint64x2_t)v119, *(uint32x2_t *)v143.i8);
                int64x2_t v126 = (int64x2_t)vaddw_u32((uint64x2_t)v126, *(uint32x2_t *)v144.i8);
                int64x2_t v127 = (int64x2_t)vaddw_high_u32((uint64x2_t)v127, v144);
                v111 += 128;
                v112 += 8;
                v121 -= 32;
              }
              while (v110 != v121);
              unint64_t v108 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v119, v109), vaddq_s64(v124, v116)), vaddq_s64(vaddq_s64(v122, v114), vaddq_s64(v126, v117))), vaddq_s64(vaddq_s64(vaddq_s64(v120, v113), vaddq_s64(v125, (int64x2_t)v106)), vaddq_s64(vaddq_s64(v123, v115), vaddq_s64(v127, v118)))));
              if (v110 < 9) {
                goto LABEL_123;
              }
            }
            else
            {
              unint64_t v108 = 0;
              uint64_t v107 = 0;
            }
            uint64_t v145 = v223 & 7;
            if ((v223 & 7) == 0) {
              uint64_t v145 = 8;
            }
            uint64_t v146 = 4 * v107;
            uint64_t v147 = v145 + v107;
            uint64_t v107 = v223 - v145;
            int64x2_t v148 = 0uLL;
            int64x2_t v149 = (int64x2_t)v108;
            int v150 = &a10[v146 + 2];
            int v151 = (int32x4_t *)&a8[v146];
            uint64_t v152 = v147 - v223;
            int64x2_t v153 = 0uLL;
            int64x2_t v154 = 0uLL;
            do
            {
              v106.i64[0] = (unint64_t)vld4_s8(v150);
              v150 += 32;
              int32x4_t v155 = (int32x4_t)vqtbl1q_s8((int8x16_t)v106, (int8x16_t)xmmword_1889B9EE0);
              int32x4_t v156 = (int32x4_t)vqtbl1q_s8((int8x16_t)v106, (int8x16_t)xmmword_1889B9EF0);
              int32x4_t v106 = *v151;
              int32x4_t v157 = v151[1];
              v151 += 2;
              uint32x4_t v158 = (uint32x4_t)vmulq_s32(v157, v156);
              uint32x4_t v159 = (uint32x4_t)vmulq_s32(v106, v155);
              int64x2_t v154 = (int64x2_t)vaddw_high_u32((uint64x2_t)v154, v158);
              int64x2_t v148 = (int64x2_t)vaddw_high_u32((uint64x2_t)v148, v159);
              int64x2_t v153 = (int64x2_t)vaddw_u32((uint64x2_t)v153, *(uint32x2_t *)v158.i8);
              int64x2_t v149 = (int64x2_t)vaddw_u32((uint64x2_t)v149, *(uint32x2_t *)v159.i8);
              v152 += 8;
            }
            while (v152);
            unint64_t v108 = vaddvq_s64(vaddq_s64(vaddq_s64(v149, v153), vaddq_s64(v148, v154)));
LABEL_123:
            uint64_t v160 = v223 - v107;
            uint64_t v161 = 4 * v107;
            float v162 = &a8[4 * v107];
            int v163 = &a10[v161 + 2];
            do
            {
              int v165 = *v163;
              v163 += 4;
              int v164 = v165;
              int v166 = *(_DWORD *)v162;
              v162 += 4;
              v108 += (v166 * v164);
              --v160;
            }
            while (v160);
            if (v223 < 9)
            {
              uint64_t v167 = 0;
              unint64_t v168 = 0;
              goto LABEL_139;
            }
            if (v223 >= 0x21)
            {
              int64x2_t v169 = 0uLL;
              unint64_t v170 = 32;
              if ((v223 & 0x1F) != 0) {
                unint64_t v170 = v223 & 0x1F;
              }
              uint64_t v167 = v223 - v170;
              int64x2_t v171 = 0uLL;
              int64x2_t v172 = 0uLL;
              int64x2_t v173 = 0uLL;
              int64x2_t v174 = 0uLL;
              int32x4_t v106 = 0uLL;
              int64x2_t v175 = 0uLL;
              int64x2_t v176 = 0uLL;
              int64x2_t v177 = 0uLL;
              int64x2_t v178 = 0uLL;
              uint64_t v179 = v226 + 1;
              __int16 v180 = (int32x4_t *)a8;
              int64x2_t v181 = 0uLL;
              int64x2_t v182 = 0uLL;
              int64x2_t v183 = 0uLL;
              int64x2_t v184 = 0uLL;
              int64x2_t v185 = 0uLL;
              int64x2_t v186 = 0uLL;
              do
              {
                uint64_t v187 = &v180[64].i8[2];
                BOOL v188 = &v180[68].i8[2];
                unsigned long long v189 = (unsigned __int128)vld4q_s8(v187);
                unsigned long long v190 = (unsigned __int128)vld4q_s8(v188);
                int32x4_t v191 = (int32x4_t)vqtbl1q_s8((int8x16_t)v189, (int8x16_t)xmmword_1889B9EE0);
                int32x4_t v192 = (int32x4_t)vqtbl1q_s8((int8x16_t)v189, (int8x16_t)xmmword_1889B9EF0);
                int32x4_t v193 = (int32x4_t)vqtbl1q_s8((int8x16_t)v189, (int8x16_t)xmmword_1889B9F00);
                int32x4_t v194 = (int32x4_t)vqtbl1q_s8((int8x16_t)v190, (int8x16_t)xmmword_1889B9EE0);
                int32x4_t v195 = (int32x4_t)vqtbl1q_s8((int8x16_t)v190, (int8x16_t)xmmword_1889B9EF0);
                int32x4_t v196 = (int32x4_t)vqtbl1q_s8((int8x16_t)v190, (int8x16_t)xmmword_1889B9F00);
                uint32x4_t v197 = (uint32x4_t)vmulq_s32(v180[3], (int32x4_t)vqtbl1q_s8((int8x16_t)v189, (int8x16_t)xmmword_1889B9F10));
                uint32x4_t v198 = (uint32x4_t)vmulq_s32(v180[2], v193);
                uint32x4_t v199 = (uint32x4_t)vmulq_s32(v180[1], v192);
                uint32x4_t v200 = (uint32x4_t)vmulq_s32(*v180, v191);
                uint32x4_t v201 = (uint32x4_t)vmulq_s32(v180[7], (int32x4_t)vqtbl1q_s8((int8x16_t)v190, (int8x16_t)xmmword_1889B9F10));
                uint32x4_t v202 = (uint32x4_t)vmulq_s32(v180[6], v196);
                uint32x4_t v203 = (uint32x4_t)vmulq_s32(v180[5], v195);
                uint32x4_t v204 = (uint32x4_t)vmulq_s32(v180[4], v194);
                int32x4_t v106 = (int32x4_t)vaddw_high_u32((uint64x2_t)v106, v198);
                int64x2_t v174 = (int64x2_t)vaddw_u32((uint64x2_t)v174, *(uint32x2_t *)v198.i8);
                int64x2_t v173 = (int64x2_t)vaddw_high_u32((uint64x2_t)v173, v199);
                int64x2_t v172 = (int64x2_t)vaddw_u32((uint64x2_t)v172, *(uint32x2_t *)v199.i8);
                int64x2_t v171 = (int64x2_t)vaddw_high_u32((uint64x2_t)v171, v200);
                int64x2_t v169 = (int64x2_t)vaddw_u32((uint64x2_t)v169, *(uint32x2_t *)v200.i8);
                int64x2_t v175 = (int64x2_t)vaddw_u32((uint64x2_t)v175, *(uint32x2_t *)v197.i8);
                int64x2_t v176 = (int64x2_t)vaddw_high_u32((uint64x2_t)v176, v197);
                int64x2_t v184 = (int64x2_t)vaddw_high_u32((uint64x2_t)v184, v202);
                int64x2_t v183 = (int64x2_t)vaddw_u32((uint64x2_t)v183, *(uint32x2_t *)v202.i8);
                int64x2_t v182 = (int64x2_t)vaddw_high_u32((uint64x2_t)v182, v203);
                int64x2_t v181 = (int64x2_t)vaddw_u32((uint64x2_t)v181, *(uint32x2_t *)v203.i8);
                int64x2_t v178 = (int64x2_t)vaddw_high_u32((uint64x2_t)v178, v204);
                int64x2_t v177 = (int64x2_t)vaddw_u32((uint64x2_t)v177, *(uint32x2_t *)v204.i8);
                int64x2_t v185 = (int64x2_t)vaddw_u32((uint64x2_t)v185, *(uint32x2_t *)v201.i8);
                int64x2_t v186 = (int64x2_t)vaddw_high_u32((uint64x2_t)v186, v201);
                v180 += 8;
                v179 -= 32;
              }
              while (v170 != v179);
              unint64_t v168 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v177, v169), vaddq_s64(v183, v174)), vaddq_s64(vaddq_s64(v181, v172), vaddq_s64(v185, v175))), vaddq_s64(vaddq_s64(vaddq_s64(v178, v171), vaddq_s64(v184, (int64x2_t)v106)), vaddq_s64(vaddq_s64(v182, v173), vaddq_s64(v186, v176)))));
              if (v170 < 9)
              {
LABEL_139:
                uint64_t v219 = v223 - v167;
                int v220 = &a8[4 * v167];
                do
                {
                  int v221 = v220[1026];
                  int v222 = *(_DWORD *)v220;
                  v220 += 4;
                  v168 += (v222 * v221);
                  --v219;
                }
                while (v219);
                if (v105 + 12 < a4 && v108 >> 3 > v105 + (v168 >> 3)) {
                  goto LABEL_143;
                }
LABEL_147:
                a1 = (uint64_t)v18;
                int8x16_t v23 = v18;
                uint64_t v19 = v224;
                goto LABEL_25;
              }
            }
            else
            {
              unint64_t v168 = 0;
              uint64_t v167 = 0;
            }
            uint64_t v205 = 8;
            if ((v223 & 7) != 0) {
              uint64_t v205 = v223 & 7;
            }
            uint64_t v206 = (int32x4_t *)&a8[4 * v167];
            uint64_t v207 = v205 + v167;
            uint64_t v167 = v223 - v205;
            int64x2_t v208 = 0uLL;
            int64x2_t v209 = (int64x2_t)v168;
            uint64_t v210 = v207 - v223;
            int64x2_t v211 = 0uLL;
            int64x2_t v212 = 0uLL;
            do
            {
              uint64_t v213 = &v206[64].i8[2];
              v106.i64[0] = (unint64_t)vld4_s8(v213);
              int32x4_t v214 = (int32x4_t)vqtbl1q_s8((int8x16_t)v106, (int8x16_t)xmmword_1889B9EE0);
              int32x4_t v215 = (int32x4_t)vqtbl1q_s8((int8x16_t)v106, (int8x16_t)xmmword_1889B9EF0);
              int32x4_t v106 = *v206;
              int32x4_t v216 = v206[1];
              v206 += 2;
              uint32x4_t v217 = (uint32x4_t)vmulq_s32(v216, v215);
              uint32x4_t v218 = (uint32x4_t)vmulq_s32(v106, v214);
              int64x2_t v212 = (int64x2_t)vaddw_high_u32((uint64x2_t)v212, v217);
              int64x2_t v208 = (int64x2_t)vaddw_high_u32((uint64x2_t)v208, v218);
              int64x2_t v211 = (int64x2_t)vaddw_u32((uint64x2_t)v211, *(uint32x2_t *)v217.i8);
              int64x2_t v209 = (int64x2_t)vaddw_u32((uint64x2_t)v209, *(uint32x2_t *)v218.i8);
              v210 += 8;
            }
            while (v210);
            unint64_t v168 = vaddvq_s64(vaddq_s64(vaddq_s64(v209, v211), vaddq_s64(v208, v212)));
            goto LABEL_139;
          }
          if (v105 + 12 < a4)
          {
LABEL_143:
            *a11 = 0;
LABEL_144:
            if (a10) {
              memcpy(a10, a8 + 1024, 0x400uLL);
            }
            a1 = (uint64_t)v18;
            int8x16_t v23 = (unint64_t *)((char *)v18 + v12);
            uint64_t v19 = v224;
            uint64_t v24 = (uint64_t)a3;
            unint64_t v25 = a4;
            int v26 = a7;
            unint64_t v27 = a8 + 1024;
            goto LABEL_26;
          }
        }
        else if (v105 + 12 < a4)
        {
          goto LABEL_144;
        }
        return 0;
      }
      int v44 = *a11;
      if (*a11 != 1)
      {
LABEL_83:
        if (v44) {
          char v99 = v22;
        }
        else {
          char v99 = 1;
        }
        if ((v99 & 1) == 0) {
          goto LABEL_147;
        }
        goto LABEL_87;
      }
      if (v227 < 0)
      {
LABEL_82:
        int v44 = 1;
        goto LABEL_83;
      }
      uint64_t v45 = v227 + 1;
      if (v227 < 8)
      {
        uint64_t v46 = 0;
        unsigned __int32 v47 = 0;
        goto LABEL_72;
      }
      if (v227 >= 0x20)
      {
        unint64_t v48 = 32;
        int8x16_t v49 = 0uLL;
        v50.i64[0] = 0x100000001;
        v50.i64[1] = 0x100000001;
        int8x16_t v51 = 0uLL;
        if ((v45 & 0x1F) != 0) {
          unint64_t v48 = v45 & 0x1F;
        }
        uint64_t v46 = v45 - v48;
        int v52 = a10 + 66;
        int v53 = (int32x4_t *)(a8 + 64);
        uint64_t v54 = v227 + 1;
        int8x16_t v55 = 0uLL;
        int8x16_t v56 = 0uLL;
        int8x16_t v57 = 0uLL;
        int8x16_t v58 = 0uLL;
        int8x16_t v59 = 0uLL;
        int8x16_t v60 = 0uLL;
        do
        {
          uint64_t v61 = v52 - 64;
          unsigned long long v62 = (unsigned __int128)vld4q_s8(v61);
          unsigned long long v63 = (unsigned __int128)vld4q_s8(v52);
          int8x16_t v64 = vceqzq_s8((int8x16_t)v62);
          int8x16_t v65 = vceqzq_s8((int8x16_t)v63);
          int8x8_t v66 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v53[-2]), (int16x8_t)vceqzq_s32(v53[-1])))), (int8x8_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
          int8x16_t v67 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v66, *(int8x8_t *)v49.i8)), v50);
          int8x16_t v68 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v66, *(int8x8_t *)v49.i8)), v50);
          int8x8_t v69 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v53[-4]), (int16x8_t)vceqzq_s32(v53[-3])))), *(int8x8_t *)v64.i8);
          int8x8_t v70 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v53), (int16x8_t)vceqzq_s32(v53[1])))), *(int8x8_t *)v65.i8);
          int8x16_t v71 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v70, *(int8x8_t *)v49.i8)), v50);
          int8x16_t v72 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v70, *(int8x8_t *)v49.i8)), v50);
          int8x8_t v73 = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v53[2]), (int16x8_t)vceqzq_s32(v53[3])))), (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
          int8x16_t v74 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v73, *(int8x8_t *)v49.i8)), v50);
          int8x16_t v75 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v73, *(int8x8_t *)v49.i8)), v50);
          int8x16_t v51 = vorrq_s8(v51, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v69, *(int8x8_t *)v49.i8)), v50));
          int8x16_t v49 = vorrq_s8(v49, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v69, *(int8x8_t *)v49.i8)), v50));
          int8x16_t v56 = vorrq_s8(v56, v68);
          int8x16_t v55 = vorrq_s8(v55, v67);
          int8x16_t v60 = vorrq_s8(v60, v75);
          v52 += 128;
          int8x16_t v59 = vorrq_s8(v59, v74);
          v53 += 8;
          int8x16_t v58 = vorrq_s8(v58, v72);
          v54 -= 32;
          int8x16_t v57 = vorrq_s8(v57, v71);
        }
        while (v48 != v54);
        int8x16_t v76 = vorrq_s8(vorrq_s8(vorrq_s8(v57, v49), vorrq_s8(v59, v55)), vorrq_s8(vorrq_s8(v58, v51), vorrq_s8(v60, v56)));
        *(int8x8_t *)v76.i8 = vorr_s8(*(int8x8_t *)v76.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL));
        unsigned __int32 v47 = v76.i32[0] | v76.i32[1];
        if (v48 < 9)
        {
LABEL_72:
          uint64_t v90 = v45 - v46;
          uint64_t v91 = 4 * v46;
          uint64_t v92 = &a10[4 * v46 + 2];
          uint64_t v93 = &a8[v91];
          do
          {
            int v94 = *(_DWORD *)v93;
            v93 += 4;
            BOOL v21 = v94 == 0;
            int v96 = *v92;
            v92 += 4;
            int v95 = v96;
            int v98 = !v21 && v95 == 0;
            v47 |= v98;
            --v90;
          }
          while (v90);
          if (v47)
          {
            *a11 = 0;
            goto LABEL_87;
          }
          goto LABEL_82;
        }
      }
      else
      {
        unsigned __int32 v47 = 0;
        uint64_t v46 = 0;
      }
      uint64_t v77 = v45 & 7;
      if ((v45 & 7) == 0) {
        uint64_t v77 = 8;
      }
      uint64_t v78 = 4 * v46;
      uint64_t v79 = v77 + v46;
      uint64_t v46 = v45 - v77;
      int8x16_t v80 = (int8x16_t)v47;
      int8x16_t v81 = 0uLL;
      int v82 = (int32x4_t *)&a8[v78];
      unint64_t v83 = &a10[v78 + 2];
      uint64_t v84 = v79 - v45;
      v85.i64[0] = 0x100000001;
      v85.i64[1] = 0x100000001;
      do
      {
        int32x4_t v86 = *v82;
        int32x4_t v87 = v82[1];
        v82 += 2;
        *(int8x8_t *)v86.i8 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v86), (int16x8_t)vceqzq_s32(v87))));
        v87.i64[0] = (unint64_t)vld4_s8(v83);
        v83 += 32;
        *(int8x8_t *)v86.i8 = vand_s8(*(int8x8_t *)v86.i8, vceqz_s8(*(int8x8_t *)v87.i8));
        int8x16_t v81 = vorrq_s8(v81, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)v80.i8)), v85));
        int8x16_t v80 = vorrq_s8(v80, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)v80.i8)), v85));
        v84 += 8;
      }
      while (v84);
      int8x16_t v88 = vorrq_s8(v80, v81);
      int8x8_t v89 = vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
      unsigned __int32 v47 = v89.i32[0] | v89.i32[1];
      goto LABEL_72;
    }
    unint64_t v30 = (unsigned int *)((char *)a3 + a4);
    bzero(a8, 0x400uLL);
    unint64_t v31 = a3;
    do
    {
      int v32 = *(unsigned __int8 *)v31;
      unint64_t v31 = (unsigned int *)((char *)v31 + 1);
      ++*(_DWORD *)&a8[4 * v32];
    }
    while (v31 < v30);
    LODWORD(v33) = 256;
    do
      uint64_t v33 = (v33 - 1);
    while (!*(_DWORD *)&a8[4 * v33]);
    int v227 = v33;
    if (v33 >= 7)
    {
      uint64_t v34 = (v33 + 1) & 0x1FFFFFFF8;
      uint64_t v36 = (uint32x4_t *)(a8 + 16);
      uint64_t v37 = v34;
      uint32x4_t v38 = 0uLL;
      uint32x4_t v39 = 0uLL;
      do
      {
        uint32x4_t v38 = vmaxq_u32(v36[-1], v38);
        uint32x4_t v39 = vmaxq_u32(*v36, v39);
        v36 += 2;
        v37 -= 8;
      }
      while (v37);
      unsigned int v35 = vmaxvq_u32(vmaxq_u32(v38, v39));
      if (v33 + 1 == v34)
      {
LABEL_51:
        unint64_t v12 = v35;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v34 = 0;
      unsigned int v35 = 0;
    }
    uint64_t v40 = v33 - v34 + 1;
    uint32x4_t v41 = &a8[4 * v34];
    do
    {
      unsigned int v43 = *(_DWORD *)v41;
      v41 += 4;
      unsigned int v42 = v43;
      if (v43 > v35) {
        unsigned int v35 = v42;
      }
      --v40;
    }
    while (v40);
    goto LABEL_51;
  }
  int8x16_t v23 = (unint64_t *)a1;
LABEL_25:
  uint64_t v24 = (uint64_t)a3;
  unint64_t v25 = a4;
  int v26 = a7;
  unint64_t v27 = a10;
LABEL_26:

  return HUF_compressCTable_internal(a1, v23, v19, v24, v25, v26, (uint64_t)v27);
}

unint64_t HUF_compress1X_repeat(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, char *a7, unint64_t a8, char *a9, int *a10, int a11)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 0, a7, a8, a9, a10, a11);
}

unint64_t HUF_compress4X_wksp(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, char *a7, unint64_t a8)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 1, a7, a8, 0, 0, 0);
}

unint64_t HUF_compress4X_repeat(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t a4, unsigned int a5, unsigned int a6, char *a7, unint64_t a8, char *a9, int *a10, int a11)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 1, a7, a8, a9, a10, a11);
}

uint64_t HUF_buildCTable(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  memset(v7, 0, 512);
  return HUF_buildCTable_wksp(v2, v3, v4, v5, (char *)v7, 0x1100uLL);
}

unint64_t HUF_compress1X(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  return HUF_compress_internal(v2, v3, v4, v5, v6, v7, 0, v9, 0x1900uLL, 0, 0, 0);
}

unint64_t HUF_compress2(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  return HUF_compress_internal(v2, v3, v4, v5, v6, v7, 1, v9, 0x1900uLL, 0, 0, 0);
}

unint64_t HUF_compress(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  return HUF_compress_internal(v2, v3, v4, v5, 0xFFu, 0xBu, 1, v7, 0x1900uLL, 0, 0, 0);
}

size_t ZSTD_noCompressLiterals(_DWORD *a1, size_t a2, void *__src, size_t __n)
{
  if (__n <= 0x1F) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = 2;
  }
  if (__n <= 0xFFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = (v4 + 1);
  }
  size_t v5 = v4 + __n;
  if (v4 + __n > a2) {
    return -70;
  }
  switch(v4)
  {
    case 3:
      *a1 = (16 * __n) | 0xC;
      break;
    case 2:
      *(_WORD *)a1 = (16 * __n) | 4;
      break;
    case 1:
      *(unsigned char *)a1 = 8 * __n;
      break;
  }
  memcpy((char *)a1 + v4, __src, __n);
  return v5;
}

uint64_t ZSTD_compressRleLiteralsBlock(_DWORD *a1, uint64_t a2, unsigned char *a3, unint64_t a4)
{
  if (a4 <= 0x1F) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2;
  }
  if (a4 > 0xFFF) {
    ++v4;
  }
  if (v4 == 3)
  {
    *a1 = (16 * a4) | 0xD;
    *((unsigned char *)a1 + v4) = *a3;
    return 4;
  }
  else if (v4 == 2)
  {
    *(_WORD *)a1 = (16 * a4) | 5;
    *((unsigned char *)a1 + v4) = *a3;
    return 3;
  }
  else
  {
    if (v4 == 1) {
      *(unsigned char *)a1 = (8 * a4) | 1;
    }
    *((unsigned char *)a1 + v4) = *a3;
    return (v4 + 1);
  }
}

uint64_t ZSTD_compressLiterals(void *__src, void *__dst, unsigned int a3, int a4, uint64_t a5, unint64_t a6, unsigned int *a7, unint64_t a8, char *a9, unint64_t a10)
{
  if (a3 <= 7) {
    char v18 = 6;
  }
  else {
    char v18 = a3 - 1;
  }
  uint64_t v19 = 3;
  if (a8 > 0x3FF) {
    uint64_t v19 = 4;
  }
  if ((a8 & 0xFFFFFFFFFFFFC000) != 0) {
    unint64_t v20 = v19 + 1;
  }
  else {
    unint64_t v20 = v19;
  }
  memcpy(__dst, __src, 0x404uLL);
  if (!a4)
  {
    int v21 = *((_DWORD *)__src + 256);
    unint64_t v22 = 63;
    if (v21 == 2) {
      unint64_t v22 = 6;
    }
    if (v22 < a8)
    {
      if (a6 <= v20) {
        return -70;
      }
      BOOL v24 = a3 < 4 && a8 < 0x401;
      int v36 = *((_DWORD *)__src + 256);
      BOOL v27 = v21 == 2 && v20 == 3 || a8 < 0x100;
      unint64_t v28 = HUF_compress_internal(a5 + v20, a6 - v20, a7, a8, 0xFFu, 0xBu, !v27, a9, a10, (char *)__dst, &v36, v24);
      if (v36) {
        int v29 = 3;
      }
      else {
        int v29 = 2;
      }
      if (v28 < a8 - (a8 >> v18) - 2 && v28 - 1 < 0xFFFFFFFFFFFFFF88)
      {
        if (v28 == 1)
        {
          memcpy(__dst, __src, 0x404uLL);
          return ZSTD_compressRleLiteralsBlock((_DWORD *)a5, v30, a7, a8);
        }
        else
        {
          if (!v36) {
            *((_DWORD *)__dst + 256) = 1;
          }
          switch(v20)
          {
            case 5uLL:
              *(_DWORD *)a5 = ((v28 << 22) + 16 * a8) | v29 | 0xC;
              *(unsigned char *)(a5 + 4) = v28 >> 10;
              break;
            case 4uLL:
              *(_DWORD *)a5 = ((v28 << 18) + 16 * a8) | v29 | 8;
              break;
            case 3uLL:
              if (v27) {
                int v34 = 4;
              }
              else {
                int v34 = 0;
              }
              int v35 = ((v29 | v34 | (16 * a8)) ^ 4) + (v28 << 14);
              *(_WORD *)a5 = v35;
              *(unsigned char *)(a5 + 2) = BYTE2(v35);
              break;
          }
          return v28 + v20;
        }
      }
      memcpy(__dst, __src, 0x404uLL);
    }
  }
  if (a8 <= 0x1F) {
    LODWORD(v32) = 1;
  }
  else {
    LODWORD(v32) = 2;
  }
  if (a8 <= 0xFFF) {
    uint64_t v32 = v32;
  }
  else {
    uint64_t v32 = (v32 + 1);
  }
  uint64_t v31 = v32 + a8;
  if (v32 + a8 > a6) {
    return -70;
  }
  switch(v32)
  {
    case 3:
      *(_DWORD *)a5 = (16 * a8) | 0xC;
      break;
    case 2:
      *(_WORD *)a5 = (16 * a8) | 4;
      break;
    case 1:
      *(unsigned char *)a5 = 8 * a8;
      break;
  }
  memcpy((void *)(a5 + v32), a7, a8);
  return v31;
}

uint64_t ZSTD_fseBitCost(unsigned __int16 *a1, unsigned int *a2, unsigned int a3)
{
  int v3 = *a1;
  if (*a1) {
    uint64_t v4 = 1 << (v3 - 1);
  }
  else {
    uint64_t v4 = 1;
  }
  if (a1[1] < a3) {
    return -1;
  }
  unint64_t v6 = 0;
  uint64_t v7 = a3 + 1;
  uint64_t v8 = &a1[2 * v4 + 4];
  do
  {
    unsigned int v10 = *(_DWORD *)v8;
    v8 += 4;
    unsigned int v9 = v10;
    unsigned int v12 = *a2++;
    unsigned int v11 = v12;
    if (v12)
    {
      unsigned int v13 = ((HIWORD(v9) + 1) << 8) - ((((HIWORD(v9) + 1) << 24) - ((v9 + (1 << v3)) << 8)) >> v3);
      if (v13 >= (v3 << 8) + 256) {
        return -1;
      }
      v6 += v11 * (unint64_t)v13;
    }
    --v7;
  }
  while (v7);
  return v6 >> 8;
}

unint64_t ZSTD_crossEntropyCost(uint64_t a1, char a2, uint64_t a3, int a4)
{
  char v4 = 8 - a2;
  if ((a4 + 1) > 1) {
    uint64_t v5 = (a4 + 1);
  }
  else {
    uint64_t v5 = 1;
  }
  if (v5 < 2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
LABEL_13:
    unint64_t v16 = (unsigned __int16 *)(a1 + 2 * v6);
    uint64_t v17 = v5 - v6;
    char v18 = (int *)(a3 + 4 * v6);
    do
    {
      int v20 = *v16++;
      __int16 v19 = v20;
      if (v20 == 0xFFFF) {
        __int16 v19 = 1;
      }
      int v21 = *v18++;
      v7 += (kInverseProbabilityLog256[v19 << v4] * v21);
      --v17;
    }
    while (v17);
    return v7 >> 8;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = v5 & 0xFFFFFFFE;
  unsigned int v10 = (unsigned __int16 *)(a1 + 2);
  unsigned int v11 = (_DWORD *)(a3 + 4);
  uint64_t v12 = v6;
  do
  {
    int v13 = *(v10 - 1);
    int v15 = *v10;
    v10 += 2;
    int v14 = v15;
    if (v13 == 0xFFFF) {
      LOWORD(v13) = 1;
    }
    if (v14 == 0xFFFF) {
      LOWORD(v14) = 1;
    }
    v8 += (kInverseProbabilityLog256[(__int16)v13 << v4] * *(v11 - 1));
    v9 += (kInverseProbabilityLog256[(__int16)v14 << v4] * *v11);
    v11 += 2;
    v12 -= 2;
  }
  while (v12);
  unint64_t v7 = v9 + v8;
  if (v6 != v5) {
    goto LABEL_13;
  }
  return v7 >> 8;
}

uint64_t ZSTD_selectEncodingType(_DWORD *a1, unsigned int *a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned __int16 *a7, uint64_t a8, char a9, int a10, unsigned int a11)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (a4 != a5)
  {
    if (a11 <= 3)
    {
      if (a10)
      {
        if (a5 > 0x3E7 || *a1 != 2)
        {
          if (a5 >= (unint64_t)(10 - a11) << a9 >> 3 && a5 >> (a9 - 1) <= a4) {
            goto LABEL_93;
          }
LABEL_91:
          uint64_t result = 0;
          *a1 = 0;
          return result;
        }
        return 3;
      }
      goto LABEL_93;
    }
    if (!a10)
    {
      unint64_t v21 = -1;
      if (!*a1) {
        goto LABEL_39;
      }
LABEL_35:
      int v36 = *a7;
      if (*a7) {
        uint64_t v37 = 1 << (v36 - 1);
      }
      else {
        uint64_t v37 = 1;
      }
      if (a7[1] >= a3)
      {
        unint64_t v72 = 0;
        uint64_t v73 = a3 + 1;
        int8x16_t v74 = &a7[2 * v37 + 4];
        int8x16_t v75 = a2;
        do
        {
          unsigned int v77 = *(_DWORD *)v74;
          v74 += 4;
          unsigned int v76 = v77;
          unsigned int v79 = *v75++;
          unsigned int v78 = v79;
          if (v79)
          {
            unsigned int v80 = ((HIWORD(v76) + 1) << 8) - ((((HIWORD(v76) + 1) << 24) - ((v76 + (1 << v36)) << 8)) >> v36);
            if (v80 >= (v36 << 8) + 256) {
              goto LABEL_39;
            }
            v72 += v78 * (unint64_t)v80;
          }
          --v73;
        }
        while (v73);
        unint64_t v38 = v72 >> 8;
LABEL_40:
        unsigned int v39 = (__clz(a5 - 1) ^ 0x1F) - 2;
        unsigned int v40 = __clz(a5) ^ 0x1F;
        unsigned int v41 = (__clz(a3) ^ 0x1F) + 2;
        if (v40 + 1 < v41) {
          unsigned int v42 = v40 + 1;
        }
        else {
          unsigned int v42 = v41;
        }
        if (a6) {
          unsigned int v43 = a6;
        }
        else {
          unsigned int v43 = 11;
        }
        if (v39 >= v43) {
          unsigned int v39 = v43;
        }
        if (v42 > v39) {
          unsigned int v39 = v42;
        }
        if (v39 <= 5) {
          unsigned int v39 = 5;
        }
        if (v39 >= 0xC) {
          unsigned int v44 = 12;
        }
        else {
          unsigned int v44 = v39;
        }
        unint64_t v45 = FSE_normalizeCount(v81, v44, a2, a5, a3, a5 > 0x7FF);
        unsigned int v46 = a3 + 1;
        if (v45 <= 0xFFFFFFFFFFFFFF88)
        {
          if (a3) {
            BOOL v47 = v44 * v46 >= 0xFF0;
          }
          else {
            BOOL v47 = 0;
          }
          int v48 = !v47;
          unint64_t v45 = FSE_writeNCount_generic(v82, 512, (uint64_t)v81, a3, v44, v48);
        }
        if (v46 <= 1) {
          uint64_t v49 = 1;
        }
        else {
          uint64_t v49 = v46;
        }
        if (v49 >= 2)
        {
          int v52 = 0;
          int v53 = 0;
          uint64_t v50 = v49 & 0xFFFFFFFE;
          uint64_t v54 = (int *)(a2 + 1);
          uint64_t v55 = v50;
          do
          {
            int v56 = *(v54 - 1);
            int v57 = *v54;
            unint64_t v58 = (v56 << 8);
            unint64_t v59 = (*v54 << 8);
            uint64_t v60 = v58 / a5;
            BOOL v61 = v58 >= a5 || v56 == 0;
            uint64_t v62 = v59 / a5;
            if (!v61) {
              uint64_t v60 = 1;
            }
            if (v59 < a5 && v57 != 0) {
              uint64_t v62 = 1;
            }
            v52 += kInverseProbabilityLog256[v60] * v56;
            v53 += kInverseProbabilityLog256[v62] * v57;
            v54 += 2;
            v55 -= 2;
          }
          while (v55);
          unsigned int v51 = v53 + v52;
          if (v50 == v49)
          {
LABEL_89:
            unint64_t v71 = (v51 >> 8) + 8 * v45;
            if (v21 <= v38 && v21 <= v71) {
              goto LABEL_91;
            }
            if (v38 <= v71) {
              return 3;
            }
LABEL_93:
            *a1 = 1;
            return 2;
          }
        }
        else
        {
          uint64_t v50 = 0;
          unsigned int v51 = 0;
        }
        uint64_t v64 = v49 - v50;
        int8x16_t v65 = &a2[v50];
        do
        {
          int v67 = *v65++;
          int v66 = v67;
          unint64_t v68 = (v67 << 8);
          if (v68 >= a5 || v66 == 0) {
            uint64_t v70 = v68 / a5;
          }
          else {
            uint64_t v70 = 1;
          }
          v51 += kInverseProbabilityLog256[v70] * v66;
          --v64;
        }
        while (v64);
        goto LABEL_89;
      }
LABEL_39:
      unint64_t v38 = -1;
      goto LABEL_40;
    }
    char v17 = 8 - a9;
    if (a3 + 1 > 1) {
      uint64_t v18 = a3 + 1;
    }
    else {
      uint64_t v18 = 1;
    }
    if (v18 >= 2)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v19 = v18 & 0xFFFFFFFE;
      BOOL v24 = (unsigned __int16 *)(a8 + 2);
      unint64_t v25 = a2 + 1;
      uint64_t v26 = v19;
      do
      {
        int v27 = *(v24 - 1);
        int v29 = *v24;
        v24 += 2;
        int v28 = v29;
        if (v27 == 0xFFFF) {
          LOWORD(v27) = 1;
        }
        if (v28 == 0xFFFF) {
          LOWORD(v28) = 1;
        }
        v22 += (kInverseProbabilityLog256[(__int16)v27 << v17] * *(v25 - 1));
        v23 += (kInverseProbabilityLog256[(__int16)v28 << v17] * *v25);
        v25 += 2;
        v26 -= 2;
      }
      while (v26);
      unint64_t v20 = v23 + v22;
      if (v19 == v18)
      {
LABEL_34:
        unint64_t v21 = v20 >> 8;
        if (!*a1) {
          goto LABEL_39;
        }
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
    }
    uint64_t v30 = v18 - v19;
    uint64_t v31 = &a2[v19];
    uint64_t v32 = (unsigned __int16 *)(a8 + 2 * v19);
    do
    {
      int v34 = *v32++;
      __int16 v33 = v34;
      if (v34 == 0xFFFF) {
        __int16 v33 = 1;
      }
      int v35 = *v31++;
      v20 += (kInverseProbabilityLog256[v33 << v17] * v35);
      --v30;
    }
    while (v30);
    goto LABEL_34;
  }
  *a1 = 0;
  return a4 > 2 || a10 == 0;
}

unint64_t ZSTD_buildCTable(_WORD *a1, unint64_t a2, _WORD *__dst, unsigned int a4, int a5, unsigned int *a6, unsigned int a7, unsigned char *a8, uint64_t a9, __int16 *a10, int a11, int a12, const void *a13, size_t a14, _DWORD *a15, unint64_t a16)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  switch(a5)
  {
    case 0:
      unint64_t v20 = FSE_buildCTable_wksp(__dst, a10, a12, a11, a15, a16);
      if (v20 >= 0xFFFFFFFFFFFFFF89) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = 0;
      }
      break;
    case 1:
      *__dst = 0;
      __dst[1] = a7;
      *((_DWORD *)__dst + 1) = 0;
      *(void *)&__dst[4 * a7 + 4] = 0;
      if (a2)
      {
        *(unsigned char *)a1 = *a8;
        unint64_t v21 = 1;
      }
      else
      {
        unint64_t v21 = -70;
      }
      break;
    case 2:
      unint64_t v23 = a9;
      unsigned int v24 = (__clz(a9 - 1) ^ 0x1F) - 2;
      unsigned int v25 = __clz(a9) ^ 0x1F;
      unsigned int v26 = (__clz(a7) ^ 0x1F) + 2;
      if (v25 + 1 < v26) {
        unsigned int v27 = v25 + 1;
      }
      else {
        unsigned int v27 = v26;
      }
      if (!a4) {
        a4 = 11;
      }
      if (v24 < a4) {
        a4 = v24;
      }
      if (v27 > a4) {
        a4 = v27;
      }
      if (a4 <= 5) {
        a4 = 5;
      }
      if (a4 >= 0xC) {
        int v28 = 12;
      }
      else {
        int v28 = a4;
      }
      uint64_t v29 = a8[a9 - 1];
      unsigned int v30 = a6[v29];
      if (v30 >= 2)
      {
        a6[v29] = v30 - 1;
        unint64_t v23 = a9 - 1;
      }
      unint64_t v21 = FSE_normalizeCount(v34, v28, a6, v23, a7, v23 > 0x7FF);
      if (v21 <= 0xFFFFFFFFFFFFFF88)
      {
        LODWORD(v31) = ((v28 + v28 * a7) >> 3) + 3;
        if (a7) {
          unint64_t v31 = v31;
        }
        else {
          unint64_t v31 = 512;
        }
        unint64_t v21 = FSE_writeNCount_generic(a1, a2, (uint64_t)v34, a7, v28, v31 <= a2);
        if (v21 <= 0xFFFFFFFFFFFFFF88)
        {
          unint64_t v32 = FSE_buildCTable_wksp(__dst, v34, a7, v28, a15, a16);
          if (v32 >= 0xFFFFFFFFFFFFFF89) {
            unint64_t v21 = v32;
          }
        }
      }
      break;
    case 3:
      memcpy(__dst, a13, a14);
      unint64_t v21 = 0;
      break;
    default:
      unint64_t v21 = -1;
      break;
  }
  return v21;
}

uint64_t ZSTD_encodeSequences(unint64_t *a1, unint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8, uint64_t a9, unint64_t a10, int a11)
{
  if (a2 < 9) {
    return -70;
  }
  unint64_t v12 = a10 - 1;
  uint64_t v13 = *(unsigned __int8 *)(a4 + a10 - 1);
  int v15 = *a3;
  int v14 = a3 + 2;
  uint64_t v16 = 1 << (v15 - 1);
  int v105 = v15;
  if (!v15) {
    uint64_t v16 = 1;
  }
  int32x4_t v106 = &v14[2 * v16];
  unint64_t v17 = v14[((unint64_t)(((*(_DWORD *)&v106[4 * v13 + 2] + 0x8000) & 0xFFFF0000) - *(_DWORD *)&v106[4 * v13 + 2]) >> ((*(_DWORD *)&v106[4 * v13 + 2] + 0x8000) >> 16))
          + *(int *)&v106[4 * v13]];
  uint64_t v18 = (char *)a1 + a2;
  uint64_t v19 = *(unsigned __int8 *)(a6 + v12);
  int v22 = *a5;
  unint64_t v20 = a5 + 2;
  int v21 = v22;
  uint64_t v23 = 1 << (v22 - 1);
  if (!v22) {
    uint64_t v23 = 1;
  }
  unsigned int v24 = &v20[2 * v23];
  unint64_t v25 = v20[((unint64_t)(((*(_DWORD *)&v24[4 * v19 + 2] + 0x8000) & 0xFFFF0000)
                              - *(_DWORD *)&v24[4 * v19 + 2]) >> ((*(_DWORD *)&v24[4 * v19 + 2]
                                                                                             + 0x8000) >> 16))
          + *(int *)&v24[4 * v19]];
  uint64_t v26 = *(unsigned __int8 *)(a8 + v12);
  unsigned int v27 = (unint64_t *)(v18 - 8);
  int v30 = *a7;
  int v28 = a7 + 2;
  int v29 = v30;
  uint64_t v31 = 1 << (v30 - 1);
  if (!v30) {
    uint64_t v31 = 1;
  }
  unint64_t v32 = &v28[2 * v31];
  unint64_t v33 = v28[((unint64_t)(((*(_DWORD *)&v32[4 * v26 + 2] + 0x8000) & 0xFFFF0000) - *(_DWORD *)&v32[4 * v26 + 2]) >> ((*(_DWORD *)&v32[4 * v26 + 2] + 0x8000) >> 16))
          + *(int *)&v32[4 * v26]];
  int v34 = (unsigned int *)(a9 + 8 * v12);
  uint64_t v35 = LL_bits[v26];
  uint64_t v36 = ML_bits[v13];
  unint64_t v37 = ((unint64_t)(BIT_mask[v36] & *((unsigned __int16 *)v34 + 3)) << v35) | BIT_mask[v35] & (unsigned __int16)v34[1];
  int v38 = v36 + v35;
  if (a11)
  {
    if (v19 > 0x37)
    {
      unsigned int v40 = *v34;
      int v39 = v19 - 56;
      if (v19 == 56)
      {
        LODWORD(v19) = 56;
        unsigned int v41 = a1;
      }
      else
      {
        unint64_t v45 = ((unint64_t)(BIT_mask[v39] & v40) << v38) | v37;
        uint64_t v19 = (v38 + v39) >> 3;
        *a1 = v45;
        if ((unint64_t *)((char *)a1 + v19) <= v27) {
          unsigned int v41 = (unint64_t *)((char *)a1 + v19);
        }
        else {
          unsigned int v41 = v27;
        }
        int v38 = ((_BYTE)v38 + (_BYTE)v39) & 7;
        unint64_t v37 = v45 >> (8 * v19);
        LODWORD(v19) = 56;
      }
    }
    else
    {
      LOBYTE(v39) = 0;
      unsigned int v40 = *v34;
      unsigned int v41 = a1;
    }
    unint64_t v43 = ((unint64_t)(BIT_mask[v19] & (v40 >> v39)) << v38) | v37;
    unsigned int v44 = v38 + v19;
  }
  else
  {
    unint64_t v43 = ((unint64_t)(BIT_mask[v19] & *v34) << v38) | v37;
    unsigned int v44 = v38 + v19;
    unsigned int v41 = a1;
  }
  uint64_t v46 = v44 >> 3;
  *unsigned int v41 = v43;
  BOOL v47 = (unint64_t *)((char *)v41 + v46);
  if ((unint64_t *)((char *)v41 + v46) > v27) {
    BOOL v47 = v27;
  }
  unint64_t v48 = v43 >> (8 * v46);
  int v49 = v44 & 7;
  unint64_t v50 = a10 - 2;
  unsigned int v102 = a1;
  int v103 = v29;
  int v104 = v21;
  if (a10 >= 2)
  {
    uint64_t v51 = a9 + 8 * a10 - 16;
    do
    {
      uint64_t v56 = *(unsigned __int8 *)(a8 + v50);
      uint64_t v57 = *(unsigned __int8 *)(a6 + v50);
      uint64_t v58 = *(unsigned __int8 *)(a4 + v50);
      uint64_t v59 = LL_bits[v56];
      uint64_t v60 = ML_bits[v58];
      unint64_t v61 = (v25 + *(unsigned int *)&v24[4 * v57 + 2]) >> 16;
      unint64_t v62 = (unint64_t)(v25 & BIT_mask[v61]) << v49;
      int v63 = v49 + v61;
      unint64_t v25 = v20[(v25 >> ((v25 + *(_DWORD *)&v24[4 * v57 + 2]) >> 16)) + *(int *)&v24[4 * v57]];
      uint64_t v64 = &v106[4 * v58];
      int v65 = *(_DWORD *)v64;
      unint64_t v66 = (v17 + *((unsigned int *)v64 + 1)) >> 16;
      unint64_t v67 = (unint64_t)(v17 & BIT_mask[v66]) << v63;
      int v68 = v63 + v66;
      unint64_t v17 = v14[(v17 >> v66) + v65];
      int8x8_t v69 = &v32[4 * v56];
      LODWORD(v66) = *(_DWORD *)v69;
      unint64_t v70 = (v33 + *((unsigned int *)v69 + 1)) >> 16;
      unint64_t v71 = v62 | v48 | v67 | ((unint64_t)(v33 & BIT_mask[v70]) << v68);
      unsigned int v72 = v68 + v70;
      unint64_t v33 = v28[(v33 >> v70) + (int)v66];
      unsigned int v73 = v59 + v57 + v60;
      if (v73 >= 0x1F)
      {
        uint64_t v74 = v72 >> 3;
        *BOOL v47 = v71;
        if ((unint64_t *)((char *)v47 + v74) <= v27) {
          BOOL v47 = (unint64_t *)((char *)v47 + v74);
        }
        else {
          BOOL v47 = v27;
        }
        v72 &= 7u;
        v71 >>= 8 * v74;
      }
      int v75 = v72 + v59;
      unint64_t v76 = ((unint64_t)(BIT_mask[v59] & *(unsigned __int16 *)(v51 + 4)) << v72) | v71 | ((unint64_t)(BIT_mask[v60] & *(unsigned __int16 *)(v51 + 6)) << (v72 + v59));
      unsigned int v77 = v75 + v60;
      if (v73 >= 0x39)
      {
        uint64_t v78 = v77 >> 3;
        *BOOL v47 = v76;
        if ((unint64_t *)((char *)v47 + v78) <= v27) {
          BOOL v47 = (unint64_t *)((char *)v47 + v78);
        }
        else {
          BOOL v47 = v27;
        }
        v77 &= 7u;
        v76 >>= 8 * v78;
      }
      if (a11)
      {
        if (v57 > 0x37)
        {
          unsigned int v80 = *(_DWORD *)v51;
          int v79 = v57 - 56;
          if (v57 != 56)
          {
            unint64_t v81 = ((unint64_t)(BIT_mask[v79] & v80) << v77) | v76;
            uint64_t v82 = (v77 + v79) >> 3;
            *BOOL v47 = v81;
            if ((unint64_t *)((char *)v47 + v82) <= v27) {
              BOOL v47 = (unint64_t *)((char *)v47 + v82);
            }
            else {
              BOOL v47 = v27;
            }
            unsigned int v77 = ((_BYTE)v77 + (_BYTE)v79) & 7;
            unint64_t v76 = v81 >> (8 * v82);
          }
          LODWORD(v57) = 56;
        }
        else
        {
          LOBYTE(v79) = 0;
          unsigned int v80 = *(_DWORD *)v51;
        }
        unsigned int v52 = v80 >> v79;
        unsigned int v53 = BIT_mask[v57];
      }
      else
      {
        unsigned int v52 = *(_DWORD *)v51;
        unsigned int v53 = BIT_mask[v57];
      }
      unint64_t v54 = ((unint64_t)(v53 & v52) << v77) | v76;
      uint64_t v55 = (v77 + v57) >> 3;
      *BOOL v47 = v54;
      if ((unint64_t *)((char *)v47 + v55) <= v27) {
        BOOL v47 = (unint64_t *)((char *)v47 + v55);
      }
      else {
        BOOL v47 = v27;
      }
      unint64_t v48 = v54 >> (8 * v55);
      --v50;
      int v49 = ((_BYTE)v77 + (_BYTE)v57) & 7;
      v51 -= 8;
    }
    while (v50 < a10);
  }
  unint64_t v83 = ((unint64_t)(v17 & BIT_mask[v105]) << v49) | v48;
  unsigned int v84 = v49 + v105;
  uint64_t v85 = v84 >> 3;
  *BOOL v47 = v83;
  int32x4_t v86 = (unint64_t *)((char *)v47 + v85);
  if ((unint64_t *)((char *)v47 + v85) > v27) {
    int32x4_t v86 = v27;
  }
  int v87 = v84 & 7;
  unint64_t v88 = ((unint64_t)(v25 & BIT_mask[v104]) << v87) | (v83 >> (8 * v85));
  unsigned int v89 = v87 + v104;
  uint64_t v90 = v89 >> 3;
  *int32x4_t v86 = v88;
  uint64_t v91 = (unint64_t *)((char *)v86 + v90);
  if (v91 > v27) {
    uint64_t v91 = v27;
  }
  int v92 = v89 & 7;
  unint64_t v93 = ((unint64_t)(v33 & BIT_mask[v103]) << v92) | (v88 >> (8 * v90));
  unsigned int v94 = v92 + v103;
  uint64_t v95 = v94 >> 3;
  *uint64_t v91 = v93;
  int v96 = (uint64_t *)((char *)v91 + v95);
  if (v96 > (uint64_t *)v27) {
    int v96 = (uint64_t *)v27;
  }
  int v97 = v94 & 7;
  uint64_t v98 = (v93 >> (8 * v95)) | (1 << v97);
  unsigned int v99 = v97 + 1;
  *int v96 = v98;
  unsigned int v100 = (unint64_t *)((char *)v96 + (v99 >> 3));
  if (v27 <= v100) {
    return -70;
  }
  uint64_t v101 = (v99 & 7) != 0 ? (uint64_t)v100 + 1 : (uint64_t)v96 + (v99 >> 3);
  uint64_t result = v101 - (void)v102;
  if ((unint64_t *)v101 == v102) {
    return -70;
  }
  return result;
}

uint64_t ZSTD_compressSuperBlock(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6)
{
  uint64_t v514 = *MEMORY[0x1E4F143B8];
  unint64_t v513 = 0;
  long long v511 = 0u;
  *(_OWORD *)v512 = 0u;
  long long v509 = 0u;
  long long v510 = 0u;
  long long v507 = 0u;
  long long v508 = 0u;
  long long v505 = 0u;
  long long v506 = 0u;
  *(_OWORD *)v503 = 0u;
  long long v504 = 0u;
  *(_OWORD *)__n = 0u;
  memset(&v501[2], 0, 128);
  uint64_t v9 = *(void *)(a1 + 2872);
  unsigned int v10 = *(void **)(a1 + 2880);
  unsigned int v11 = *(_OWORD **)(a1 + 3120);
  uint64_t v12 = *(void *)(a1 + 656);
  uint64_t v13 = *(unsigned int **)(a1 + 648);
  int v14 = *(_DWORD *)(a1 + 256);
  if (v14 == 1) {
    goto LABEL_8;
  }
  if (v14 == 2)
  {
    int v15 = 0;
LABEL_4:
    uint64_t v16 = (uint64_t)v10;
    memcpy(v10, (const void *)v9, 0x404uLL);
LABEL_38:
    v501[2] = v15;
    __n[1] = 0;
    goto LABEL_39;
  }
  if (*(_DWORD *)(a1 + 212) != 1)
  {
LABEL_8:
    uint64_t v19 = (_DWORD *)(v9 + 1024);
    int v18 = *(_DWORD *)(v9 + 1024);
    uint64_t v16 = (uint64_t)v10;
    memcpy(v10, (const void *)v9, 0x404uLL);
  }
  else
  {
    int v17 = *(_DWORD *)(a1 + 208);
    int v18 = *(_DWORD *)(v9 + 1024);
    uint64_t v16 = (uint64_t)v10;
    memcpy(v10, (const void *)v9, 0x404uLL);
    if (v17)
    {
LABEL_37:
      int v15 = 0;
      goto LABEL_38;
    }
    uint64_t v19 = (_DWORD *)(v9 + 1024);
  }
  unint64_t v20 = v12 - (void)v13;
  unint64_t v21 = 63;
  if (*v19 == 2) {
    unint64_t v21 = 6;
  }
  if (v21 >= v20) {
    goto LABEL_37;
  }
  if ((v11 & 3) != 0) {
    return -1;
  }
  LODWORD(v500) = 255;
  if (v20 <= 0x5DB)
  {
    uint64_t v23 = (unsigned int *)((char *)v13 + v20);
    bzero(v11, 0x400uLL);
    do
    {
      unsigned int v24 = *(unsigned __int8 *)v13;
      uint64_t v13 = (unsigned int *)((char *)v13 + 1);
      ++*((_DWORD *)v11 + v24);
    }
    while (v13 < v23);
    LODWORD(v25) = 256;
    do
      uint64_t v25 = (v25 - 1);
    while (!*((_DWORD *)v11 + v25));
    LODWORD(v500) = v25;
    if (v25 >= 7)
    {
      uint64_t v26 = (v25 + 1) & 0x1FFFFFFF8;
      int v29 = (uint32x4_t *)(v11 + 1);
      uint64_t v30 = v26;
      uint32x4_t v31 = 0uLL;
      uint32x4_t v32 = 0uLL;
      do
      {
        uint32x4_t v31 = vmaxq_u32(v29[-1], v31);
        uint32x4_t v32 = vmaxq_u32(*v29, v32);
        v29 += 2;
        v30 -= 8;
      }
      while (v30);
      unsigned int v27 = vmaxvq_u32(vmaxq_u32(v31, v32));
      if (v25 + 1 == v26) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v26 = 0;
      unsigned int v27 = 0;
    }
    uint64_t v33 = v25 - v26 + 1;
    int v34 = (unsigned int *)v11 + v26;
    do
    {
      unsigned int v36 = *v34++;
      unsigned int v35 = v36;
      if (v36 > v27) {
        unsigned int v27 = v35;
      }
      --v33;
    }
    while (v33);
LABEL_31:
    unint64_t v22 = v27;
    if (v27 != v20) {
      goto LABEL_32;
    }
LABEL_23:
    int v15 = 1;
    goto LABEL_38;
  }
  unint64_t v28 = HIST_count_parallel_wksp(v11, (unsigned int *)&v500, v13, v20, 0, (char *)v11);
  unint64_t v22 = v28;
  if (v28 > 0xFFFFFFFFFFFFFF88) {
    return v22;
  }
  if (v28 == v20) {
    goto LABEL_23;
  }
LABEL_32:
  if (v22 <= (v20 >> 7) + 4) {
    goto LABEL_37;
  }
  uint64_t v37 = v500;
  if (v18 != 1) {
    goto LABEL_331;
  }
  if ((v500 & 0x80000000) != 0)
  {
    int v18 = 1;
    goto LABEL_331;
  }
  uint64_t v38 = v500 + 1;
  if (v500 >= 8)
  {
    if (v500 >= 0x20)
    {
      unint64_t v281 = 32;
      int8x16_t v282 = 0uLL;
      v283.i64[0] = 0x100000001;
      v283.i64[1] = 0x100000001;
      int8x16_t v284 = 0uLL;
      if ((v38 & 0x1F) != 0) {
        unint64_t v281 = v38 & 0x1F;
      }
      uint64_t v39 = v38 - v281;
      long long v285 = (const char *)(v9 + 66);
      long long v286 = (int32x4_t *)(v11 + 4);
      uint64_t v287 = v500 + 1;
      int8x16_t v288 = 0uLL;
      int8x16_t v289 = 0uLL;
      int8x16_t v290 = 0uLL;
      int8x16_t v291 = 0uLL;
      int8x16_t v292 = 0uLL;
      int8x16_t v293 = 0uLL;
      do
      {
        long long v294 = v285 - 64;
        unsigned long long v295 = (unsigned __int128)vld4q_s8(v294);
        unsigned long long v296 = (unsigned __int128)vld4q_s8(v285);
        int8x16_t v297 = vbicq_s8(vceqzq_s8((int8x16_t)v295), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v286[-4]), (int16x8_t)vceqzq_s32(v286[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v286[-2]), (int16x8_t)vceqzq_s32(v286[-1]))));
        int8x16_t v298 = vbicq_s8(vceqzq_s8((int8x16_t)v296), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v286), (int16x8_t)vceqzq_s32(v286[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v286[2]), (int16x8_t)vceqzq_s32(v286[3]))));
        *(void *)&unsigned long long v295 = vextq_s8(v297, v297, 8uLL).u64[0];
        int8x16_t v299 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v295, *(int8x8_t *)v282.i8)), v283);
        int8x16_t v300 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v295, *(int8x8_t *)v282.i8)), v283);
        int8x8_t v301 = (int8x8_t)vextq_s8(v298, v298, 8uLL).u64[0];
        int8x16_t v302 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(v301, *(int8x8_t *)v282.i8)), v283);
        int8x16_t v303 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(v301, *(int8x8_t *)v282.i8)), v283);
        int8x16_t v304 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v298.i8, *(int8x8_t *)v282.i8)), v283);
        int8x16_t v305 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v298.i8, *(int8x8_t *)v282.i8)), v283);
        int8x16_t v284 = vorrq_s8(v284, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v297.i8, *(int8x8_t *)v282.i8)), v283));
        int8x16_t v282 = vorrq_s8(v282, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v297.i8, *(int8x8_t *)v282.i8)), v283));
        int8x16_t v289 = vorrq_s8(v289, v300);
        int8x16_t v288 = vorrq_s8(v288, v299);
        int8x16_t v291 = vorrq_s8(v291, v305);
        int8x16_t v290 = vorrq_s8(v290, v304);
        int8x16_t v293 = vorrq_s8(v293, v303);
        int8x16_t v292 = vorrq_s8(v292, v302);
        v285 += 128;
        v286 += 8;
        v287 -= 32;
      }
      while (v281 != v287);
      int8x16_t v306 = vorrq_s8(vorrq_s8(vorrq_s8(v290, v282), vorrq_s8(v292, v288)), vorrq_s8(vorrq_s8(v291, v284), vorrq_s8(v293, v289)));
      *(int8x8_t *)v306.i8 = vorr_s8(*(int8x8_t *)v306.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v306, v306, 8uLL));
      unsigned __int32 v40 = v306.i32[0] | v306.i32[1];
      if (v281 < 9) {
        goto LABEL_322;
      }
    }
    else
    {
      unsigned __int32 v40 = 0;
      uint64_t v39 = 0;
    }
    uint64_t v307 = v38 & 7;
    if ((v38 & 7) == 0) {
      uint64_t v307 = 8;
    }
    uint64_t v308 = 4 * v39;
    uint64_t v309 = v307 + v39;
    uint64_t v39 = v38 - v307;
    int8x16_t v310 = (int8x16_t)v40;
    int8x16_t v311 = 0uLL;
    int v312 = (int32x4_t *)((char *)v11 + v308);
    uint64_t v313 = (const char *)(v308 + v9 + 2);
    uint64_t v314 = v309 - v38;
    v315.i64[0] = 0x100000001;
    v315.i64[1] = 0x100000001;
    do
    {
      int32x4_t v316 = *v312;
      int32x4_t v317 = v312[1];
      v312 += 2;
      *(int8x8_t *)v316.i8 = vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v316), (int16x8_t)vceqzq_s32(v317))));
      v317.i64[0] = (unint64_t)vld4_s8(v313);
      v313 += 32;
      *(int8x8_t *)v316.i8 = vand_s8(*(int8x8_t *)v316.i8, vceqz_s8(*(int8x8_t *)v317.i8));
      int8x16_t v311 = vorrq_s8(v311, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v316.i8, *(int8x8_t *)v310.i8)), v315));
      int8x16_t v310 = vorrq_s8(v310, vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v316.i8, *(int8x8_t *)v310.i8)), v315));
      v314 += 8;
    }
    while (v314);
    int8x16_t v318 = vorrq_s8(v310, v311);
    int8x8_t v319 = vorr_s8(*(int8x8_t *)v318.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v318, v318, 8uLL));
    unsigned __int32 v40 = v319.i32[0] | v319.i32[1];
  }
  else
  {
    uint64_t v39 = 0;
    unsigned __int32 v40 = 0;
  }
LABEL_322:
  uint64_t v320 = v38 - v39;
  uint64_t v321 = 4 * v39;
  v322 = (unsigned __int8 *)(4 * v39 + v9 + 2);
  uint64_t v323 = (int *)((char *)v11 + v321);
  do
  {
    int v325 = *v323++;
    int v324 = v325;
    int v327 = *v322;
    v322 += 4;
    int v326 = v327;
    if (v324) {
      BOOL v328 = v326 == 0;
    }
    else {
      BOOL v328 = 0;
    }
    char v329 = v328;
    v40 |= v329 & 1;
    --v320;
  }
  while (v320);
  int v18 = v40 == 0;
LABEL_331:
  bzero((void *)v16, 0x400uLL);
  unsigned int v330 = (__clz(v20 - 1) ^ 0x1F) - 1;
  unsigned int v331 = __clz(v20) ^ 0x1F;
  unsigned int v332 = (__clz(v37) ^ 0x1F) + 2;
  if (v331 + 1 < v332) {
    unsigned int v333 = v331 + 1;
  }
  else {
    unsigned int v333 = v332;
  }
  if (v330 >= 0xB) {
    unsigned int v330 = 11;
  }
  if (v333 > v330) {
    unsigned int v330 = v333;
  }
  if (v330 <= 5) {
    unsigned int v330 = 5;
  }
  if (v330 >= 0xC) {
    unsigned int v334 = 12;
  }
  else {
    unsigned int v334 = v330;
  }
  unint64_t v22 = HUF_buildCTable_wksp(v16, (int *)v11, v37, v334, (char *)v11 + 1024, 0x15D8uLL);
  if (v22 > 0xFFFFFFFFFFFFFF88) {
    return v22;
  }
  v478 = a4;
  if ((v37 & 0x80000000) != 0)
  {
    unint64_t v22 = HUF_writeCTable((uint64_t)&v501[3], 0x80uLL, v16, v37, v22);
    unint64_t v339 = 0;
    unint64_t v340 = 0;
    if (!v18) {
      goto LABEL_389;
    }
    goto LABEL_382;
  }
  uint64_t v473 = a3;
  uint64_t v336 = v37 + 1;
  if (v37 < 8)
  {
    uint64_t v337 = 0;
    unint64_t v338 = 0;
    goto LABEL_361;
  }
  if (v37 < 0x20)
  {
    unint64_t v338 = 0;
    uint64_t v337 = 0;
LABEL_356:
    uint64_t v377 = v336 & 7;
    if ((v336 & 7) == 0) {
      uint64_t v377 = 8;
    }
    uint64_t v378 = 4 * v337;
    uint64_t v379 = v377 + v337;
    uint64_t v337 = v336 - v377;
    int64x2_t v380 = 0uLL;
    int64x2_t v381 = (int64x2_t)v338;
    int8x16_t v382 = (const char *)(v378 + v16 + 2);
    __int8 v383 = (int32x4_t *)((char *)v11 + v378);
    uint64_t v384 = v379 - v336;
    int64x2_t v385 = 0uLL;
    int64x2_t v386 = 0uLL;
    do
    {
      v335.i64[0] = (unint64_t)vld4_s8(v382);
      v382 += 32;
      int32x4_t v387 = (int32x4_t)vqtbl1q_s8((int8x16_t)v335, (int8x16_t)xmmword_1889B9EE0);
      int32x4_t v388 = (int32x4_t)vqtbl1q_s8((int8x16_t)v335, (int8x16_t)xmmword_1889B9EF0);
      int32x4_t v335 = *v383;
      int32x4_t v389 = v383[1];
      v383 += 2;
      uint32x4_t v390 = (uint32x4_t)vmulq_s32(v389, v388);
      uint32x4_t v391 = (uint32x4_t)vmulq_s32(v335, v387);
      int64x2_t v386 = (int64x2_t)vaddw_high_u32((uint64x2_t)v386, v390);
      int64x2_t v380 = (int64x2_t)vaddw_high_u32((uint64x2_t)v380, v391);
      int64x2_t v385 = (int64x2_t)vaddw_u32((uint64x2_t)v385, *(uint32x2_t *)v390.i8);
      int64x2_t v381 = (int64x2_t)vaddw_u32((uint64x2_t)v381, *(uint32x2_t *)v391.i8);
      v384 += 8;
    }
    while (v384);
    unint64_t v338 = vaddvq_s64(vaddq_s64(vaddq_s64(v381, v385), vaddq_s64(v380, v386)));
    goto LABEL_361;
  }
  int64x2_t v341 = 0uLL;
  unint64_t v342 = 32;
  if ((v336 & 0x1F) != 0) {
    unint64_t v342 = v336 & 0x1F;
  }
  uint64_t v337 = v336 - v342;
  uint64_t v343 = (const char *)(v16 + 66);
  int v344 = (int32x4_t *)(v11 + 4);
  int64x2_t v345 = 0uLL;
  int64x2_t v346 = 0uLL;
  int64x2_t v347 = 0uLL;
  int64x2_t v348 = 0uLL;
  int32x4_t v335 = 0uLL;
  int64x2_t v349 = 0uLL;
  int64x2_t v350 = 0uLL;
  int64x2_t v351 = 0uLL;
  int64x2_t v352 = 0uLL;
  uint64_t v353 = v37 + 1;
  int64x2_t v354 = 0uLL;
  int64x2_t v355 = 0uLL;
  int64x2_t v356 = 0uLL;
  int64x2_t v357 = 0uLL;
  int64x2_t v358 = 0uLL;
  int64x2_t v359 = 0uLL;
  do
  {
    unsigned int v360 = v343 - 64;
    unsigned long long v361 = (unsigned __int128)vld4q_s8(v360);
    unsigned long long v362 = (unsigned __int128)vld4q_s8(v343);
    int32x4_t v363 = (int32x4_t)vqtbl1q_s8((int8x16_t)v361, (int8x16_t)xmmword_1889B9EE0);
    int32x4_t v364 = (int32x4_t)vqtbl1q_s8((int8x16_t)v361, (int8x16_t)xmmword_1889B9EF0);
    int32x4_t v365 = (int32x4_t)vqtbl1q_s8((int8x16_t)v361, (int8x16_t)xmmword_1889B9F00);
    int32x4_t v366 = (int32x4_t)vqtbl1q_s8((int8x16_t)v362, (int8x16_t)xmmword_1889B9F10);
    int32x4_t v367 = (int32x4_t)vqtbl1q_s8((int8x16_t)v362, (int8x16_t)xmmword_1889B9EE0);
    int32x4_t v368 = (int32x4_t)vqtbl1q_s8((int8x16_t)v362, (int8x16_t)xmmword_1889B9EF0);
    uint32x4_t v369 = (uint32x4_t)vmulq_s32(v344[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v361, (int8x16_t)xmmword_1889B9F10));
    uint32x4_t v370 = (uint32x4_t)vmulq_s32(v344[-2], v365);
    uint32x4_t v371 = (uint32x4_t)vmulq_s32(v344[-3], v364);
    uint32x4_t v372 = (uint32x4_t)vmulq_s32(v344[-4], v363);
    uint32x4_t v373 = (uint32x4_t)vmulq_s32(v344[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v362, (int8x16_t)xmmword_1889B9F00));
    uint32x4_t v374 = (uint32x4_t)vmulq_s32(v344[1], v368);
    uint32x4_t v375 = (uint32x4_t)vmulq_s32(*v344, v367);
    uint32x4_t v376 = (uint32x4_t)vmulq_s32(v344[3], v366);
    int32x4_t v335 = (int32x4_t)vaddw_high_u32((uint64x2_t)v335, v370);
    int64x2_t v348 = (int64x2_t)vaddw_u32((uint64x2_t)v348, *(uint32x2_t *)v370.i8);
    int64x2_t v347 = (int64x2_t)vaddw_high_u32((uint64x2_t)v347, v371);
    int64x2_t v346 = (int64x2_t)vaddw_u32((uint64x2_t)v346, *(uint32x2_t *)v371.i8);
    int64x2_t v345 = (int64x2_t)vaddw_high_u32((uint64x2_t)v345, v372);
    int64x2_t v341 = (int64x2_t)vaddw_u32((uint64x2_t)v341, *(uint32x2_t *)v372.i8);
    int64x2_t v349 = (int64x2_t)vaddw_u32((uint64x2_t)v349, *(uint32x2_t *)v369.i8);
    int64x2_t v350 = (int64x2_t)vaddw_high_u32((uint64x2_t)v350, v369);
    int64x2_t v357 = (int64x2_t)vaddw_high_u32((uint64x2_t)v357, v373);
    int64x2_t v356 = (int64x2_t)vaddw_u32((uint64x2_t)v356, *(uint32x2_t *)v373.i8);
    int64x2_t v355 = (int64x2_t)vaddw_high_u32((uint64x2_t)v355, v374);
    int64x2_t v354 = (int64x2_t)vaddw_u32((uint64x2_t)v354, *(uint32x2_t *)v374.i8);
    int64x2_t v352 = (int64x2_t)vaddw_high_u32((uint64x2_t)v352, v375);
    int64x2_t v351 = (int64x2_t)vaddw_u32((uint64x2_t)v351, *(uint32x2_t *)v375.i8);
    int64x2_t v358 = (int64x2_t)vaddw_u32((uint64x2_t)v358, *(uint32x2_t *)v376.i8);
    int64x2_t v359 = (int64x2_t)vaddw_high_u32((uint64x2_t)v359, v376);
    v343 += 128;
    v344 += 8;
    v353 -= 32;
  }
  while (v342 != v353);
  unint64_t v338 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v351, v341), vaddq_s64(v356, v348)), vaddq_s64(vaddq_s64(v354, v346), vaddq_s64(v358, v349))), vaddq_s64(vaddq_s64(vaddq_s64(v352, v345), vaddq_s64(v357, (int64x2_t)v335)), vaddq_s64(vaddq_s64(v355, v347), vaddq_s64(v359, v350)))));
  if (v342 >= 9) {
    goto LABEL_356;
  }
LABEL_361:
  uint64_t v392 = v336 - v337;
  uint64_t v393 = 4 * v337;
  do
  {
    v338 += *(_DWORD *)((char *)v11 + v393) * *(unsigned __int8 *)(v16 + v393 + 2);
    v393 += 4;
    --v392;
  }
  while (v392);
  unint64_t v339 = v338 >> 3;
  unint64_t v22 = HUF_writeCTable((uint64_t)&v501[3], 0x80uLL, v16, v37, v22);
  if (!v18)
  {
    a3 = v473;
    goto LABEL_389;
  }
  if (v37 >= 8)
  {
    if (v37 >= 0x20)
    {
      int64x2_t v397 = 0uLL;
      unint64_t v398 = 32;
      if ((v336 & 0x1F) != 0) {
        unint64_t v398 = v336 & 0x1F;
      }
      uint64_t v395 = v336 - v398;
      int8x8_t v399 = (const char *)(v9 + 66);
      v400 = (int32x4_t *)(v11 + 4);
      int64x2_t v401 = 0uLL;
      int64x2_t v402 = 0uLL;
      int64x2_t v403 = 0uLL;
      int64x2_t v404 = 0uLL;
      int32x4_t v394 = 0uLL;
      int64x2_t v405 = 0uLL;
      int64x2_t v406 = 0uLL;
      int64x2_t v407 = 0uLL;
      int64x2_t v408 = 0uLL;
      uint64_t v409 = v37 + 1;
      int64x2_t v410 = 0uLL;
      int64x2_t v411 = 0uLL;
      int64x2_t v412 = 0uLL;
      int64x2_t v413 = 0uLL;
      int64x2_t v414 = 0uLL;
      int64x2_t v415 = 0uLL;
      do
      {
        uint64_t v416 = v399 - 64;
        unsigned long long v417 = (unsigned __int128)vld4q_s8(v416);
        unsigned long long v418 = (unsigned __int128)vld4q_s8(v399);
        int32x4_t v419 = (int32x4_t)vqtbl1q_s8((int8x16_t)v417, (int8x16_t)xmmword_1889B9EE0);
        int32x4_t v420 = (int32x4_t)vqtbl1q_s8((int8x16_t)v417, (int8x16_t)xmmword_1889B9EF0);
        int32x4_t v421 = (int32x4_t)vqtbl1q_s8((int8x16_t)v417, (int8x16_t)xmmword_1889B9F00);
        int32x4_t v422 = (int32x4_t)vqtbl1q_s8((int8x16_t)v418, (int8x16_t)xmmword_1889B9F10);
        int32x4_t v423 = (int32x4_t)vqtbl1q_s8((int8x16_t)v418, (int8x16_t)xmmword_1889B9EE0);
        int32x4_t v424 = (int32x4_t)vqtbl1q_s8((int8x16_t)v418, (int8x16_t)xmmword_1889B9EF0);
        uint32x4_t v425 = (uint32x4_t)vmulq_s32(v400[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v417, (int8x16_t)xmmword_1889B9F10));
        uint32x4_t v426 = (uint32x4_t)vmulq_s32(v400[-2], v421);
        uint32x4_t v427 = (uint32x4_t)vmulq_s32(v400[-3], v420);
        uint32x4_t v428 = (uint32x4_t)vmulq_s32(v400[-4], v419);
        uint32x4_t v429 = (uint32x4_t)vmulq_s32(v400[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v418, (int8x16_t)xmmword_1889B9F00));
        uint32x4_t v430 = (uint32x4_t)vmulq_s32(v400[1], v424);
        uint32x4_t v431 = (uint32x4_t)vmulq_s32(*v400, v423);
        uint32x4_t v432 = (uint32x4_t)vmulq_s32(v400[3], v422);
        int32x4_t v394 = (int32x4_t)vaddw_high_u32((uint64x2_t)v394, v426);
        int64x2_t v404 = (int64x2_t)vaddw_u32((uint64x2_t)v404, *(uint32x2_t *)v426.i8);
        int64x2_t v403 = (int64x2_t)vaddw_high_u32((uint64x2_t)v403, v427);
        int64x2_t v402 = (int64x2_t)vaddw_u32((uint64x2_t)v402, *(uint32x2_t *)v427.i8);
        int64x2_t v401 = (int64x2_t)vaddw_high_u32((uint64x2_t)v401, v428);
        int64x2_t v397 = (int64x2_t)vaddw_u32((uint64x2_t)v397, *(uint32x2_t *)v428.i8);
        int64x2_t v405 = (int64x2_t)vaddw_u32((uint64x2_t)v405, *(uint32x2_t *)v425.i8);
        int64x2_t v406 = (int64x2_t)vaddw_high_u32((uint64x2_t)v406, v425);
        int64x2_t v413 = (int64x2_t)vaddw_high_u32((uint64x2_t)v413, v429);
        int64x2_t v412 = (int64x2_t)vaddw_u32((uint64x2_t)v412, *(uint32x2_t *)v429.i8);
        int64x2_t v411 = (int64x2_t)vaddw_high_u32((uint64x2_t)v411, v430);
        int64x2_t v410 = (int64x2_t)vaddw_u32((uint64x2_t)v410, *(uint32x2_t *)v430.i8);
        int64x2_t v408 = (int64x2_t)vaddw_high_u32((uint64x2_t)v408, v431);
        int64x2_t v407 = (int64x2_t)vaddw_u32((uint64x2_t)v407, *(uint32x2_t *)v431.i8);
        int64x2_t v414 = (int64x2_t)vaddw_u32((uint64x2_t)v414, *(uint32x2_t *)v432.i8);
        int64x2_t v415 = (int64x2_t)vaddw_high_u32((uint64x2_t)v415, v432);
        v399 += 128;
        v400 += 8;
        v409 -= 32;
      }
      while (v398 != v409);
      unint64_t v396 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v407, v397), vaddq_s64(v412, v404)), vaddq_s64(vaddq_s64(v410, v402), vaddq_s64(v414, v405))), vaddq_s64(vaddq_s64(vaddq_s64(v408, v401), vaddq_s64(v413, (int64x2_t)v394)), vaddq_s64(vaddq_s64(v411, v403), vaddq_s64(v415, v406)))));
      if (v398 < 9) {
        goto LABEL_379;
      }
    }
    else
    {
      unint64_t v396 = 0;
      uint64_t v395 = 0;
    }
    uint64_t v433 = v336 & 7;
    if ((v336 & 7) == 0) {
      uint64_t v433 = 8;
    }
    uint64_t v434 = 4 * v395;
    uint64_t v435 = v433 + v395;
    uint64_t v395 = v336 - v433;
    int64x2_t v436 = 0uLL;
    int64x2_t v437 = (int64x2_t)v396;
    v438 = (const char *)(v434 + v9 + 2);
    v439 = (int32x4_t *)((char *)v11 + v434);
    uint64_t v440 = v435 - v336;
    int64x2_t v441 = 0uLL;
    int64x2_t v442 = 0uLL;
    do
    {
      v394.i64[0] = (unint64_t)vld4_s8(v438);
      v438 += 32;
      int32x4_t v443 = (int32x4_t)vqtbl1q_s8((int8x16_t)v394, (int8x16_t)xmmword_1889B9EE0);
      int32x4_t v444 = (int32x4_t)vqtbl1q_s8((int8x16_t)v394, (int8x16_t)xmmword_1889B9EF0);
      int32x4_t v394 = *v439;
      int32x4_t v445 = v439[1];
      v439 += 2;
      uint32x4_t v446 = (uint32x4_t)vmulq_s32(v445, v444);
      uint32x4_t v447 = (uint32x4_t)vmulq_s32(v394, v443);
      int64x2_t v442 = (int64x2_t)vaddw_high_u32((uint64x2_t)v442, v446);
      int64x2_t v436 = (int64x2_t)vaddw_high_u32((uint64x2_t)v436, v447);
      int64x2_t v441 = (int64x2_t)vaddw_u32((uint64x2_t)v441, *(uint32x2_t *)v446.i8);
      int64x2_t v437 = (int64x2_t)vaddw_u32((uint64x2_t)v437, *(uint32x2_t *)v447.i8);
      v440 += 8;
    }
    while (v440);
    unint64_t v396 = vaddvq_s64(vaddq_s64(vaddq_s64(v437, v441), vaddq_s64(v436, v442)));
  }
  else
  {
    uint64_t v395 = 0;
    unint64_t v396 = 0;
  }
LABEL_379:
  uint64_t v448 = v336 - v395;
  uint64_t v449 = 4 * v395;
  v450 = (int *)v11 + v395;
  v451 = (unsigned __int8 *)(v449 + v9 + 2);
  do
  {
    int v453 = *v451;
    v451 += 4;
    int v452 = v453;
    int v454 = *v450++;
    v396 += (v454 * v452);
    --v448;
  }
  while (v448);
  unint64_t v340 = v396 >> 3;
  a3 = v473;
LABEL_382:
  if (v340 < v20 && (v340 <= v22 + v339 || v22 + 12 >= v20))
  {
    int v15 = 3;
LABEL_393:
    a4 = v478;
    unsigned int v10 = (void *)v16;
    goto LABEL_4;
  }
LABEL_389:
  if (v339 + v22 >= v20)
  {
    int v15 = 0;
    goto LABEL_393;
  }
  v501[2] = 2;
  *(_DWORD *)(v16 + 1024) = 1;
  __n[1] = v22;
  a4 = v478;
  if (v22 > 0xFFFFFFFFFFFFFF88) {
    return v22;
  }
LABEL_39:
  unsigned int v41 = *(_DWORD *)(a1 + 212);
  v484 = *(unsigned int **)(a1 + 680);
  v493 = *(unsigned int **)(a1 + 664);
  v475 = *(unsigned int **)(a1 + 672);
  uint64_t v42 = *(void *)(a1 + 640);
  uint64_t v43 = *(void *)(a1 + 632);
  bzero(v11, 0x19D8uLL);
  unint64_t v513 = 0;
  uint64_t v44 = *(void *)(a1 + 632);
  uint64_t v45 = *(void *)(a1 + 664);
  uint64_t v46 = *(void *)(a1 + 672);
  unint64_t v47 = *(void *)(a1 + 640) - v44;
  if ((v47 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v48 = (v47 >> 3);
    int v49 = (unsigned __int16 *)(v44 + 6);
    unint64_t v50 = *(unsigned char **)(a1 + 680);
    uint64_t v51 = *(unsigned char **)(a1 + 664);
    unsigned int v52 = *(unsigned char **)(a1 + 672);
    do
    {
      while (1)
      {
        unsigned int v53 = *(v49 - 1);
        if (v53 < 0x40) {
          LOBYTE(v54) = ZSTD_LLcode_LL_Code[*(v49 - 1)];
        }
        else {
          unsigned int v54 = 50 - __clz(v53);
        }
        unsigned int v55 = *v49;
        unsigned char *v51 = v54;
        *unint64_t v50 = __clz(*(_DWORD *)(v49 - 3)) ^ 0x1F;
        if (v55 >= 0x80) {
          break;
        }
        v49 += 4;
        *v52++ = ZSTD_MLcode_ML_Code[v55];
        ++v50;
        ++v51;
        if (!--v48) {
          goto LABEL_47;
        }
      }
      v49 += 4;
      *v52++ = 67 - __clz(v55);
      ++v50;
      ++v51;
      --v48;
    }
    while (v48);
  }
LABEL_47:
  uint64_t v471 = a3;
  uint64_t v56 = v42 - v43;
  int v57 = *(_DWORD *)(a1 + 704);
  uint64_t v58 = v16;
  if (v57 == 1)
  {
    *(unsigned char *)(v45 + *(unsigned int *)(a1 + 708)) = 35;
    int v57 = *(_DWORD *)(a1 + 704);
  }
  v498 = (_DWORD *)v11 + 53;
  uint64_t v59 = v56 >> 3;
  if (v57 == 2) {
    *(unsigned char *)(v46 + *(unsigned int *)(a1 + 708)) = 52;
  }
  LODWORD(v500) = 35;
  *(void *)v489 = (unint64_t)v56 >> 5;
  uint64_t v495 = v56 >> 3;
  v477 = a4;
  uint64_t v480 = v42;
  *(void *)v486 = v43;
  uint64_t v474 = a1;
  if ((unint64_t)v56 >> 5 <= 0x176)
  {
    v11[7] = 0u;
    v11[8] = 0u;
    v11[5] = 0u;
    v11[6] = 0u;
    void v11[3] = 0u;
    _OWORD v11[4] = 0u;
    v11[1] = 0u;
    _OWORD v11[2] = 0u;
    _OWORD *v11 = 0u;
    if (v42 == v43)
    {
      LODWORD(v62) = 0;
      unint64_t v65 = 0;
      goto LABEL_71;
    }
    uint64_t v60 = v493;
    do
    {
      unsigned int v61 = *(unsigned __int8 *)v60;
      uint64_t v60 = (unsigned int *)((char *)v60 + 1);
      ++*((_DWORD *)v11 + v61);
    }
    while (v60 < (unsigned int *)((char *)v493 + v59));
    LODWORD(v62) = 36;
    do
      uint64_t v62 = (v62 - 1);
    while (!*((_DWORD *)v11 + v62));
    if (v62 >= 7)
    {
      uint64_t v63 = (v62 + 1) & 0x1FFFFFFF8;
      unint64_t v67 = (uint32x4_t *)(v11 + 1);
      uint64_t v68 = v63;
      uint32x4_t v69 = 0uLL;
      uint32x4_t v70 = 0uLL;
      do
      {
        uint32x4_t v69 = vmaxq_u32(v67[-1], v69);
        uint32x4_t v70 = vmaxq_u32(*v67, v70);
        v67 += 2;
        v68 -= 8;
      }
      while (v68);
      unsigned int v64 = vmaxvq_u32(vmaxq_u32(v69, v70));
      if (v62 + 1 == v63)
      {
LABEL_70:
        unint64_t v65 = v64;
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v63 = 0;
      unsigned int v64 = 0;
    }
    uint64_t v71 = v62 - v63 + 1;
    unsigned int v72 = (unsigned int *)v11 + v63;
    do
    {
      unsigned int v74 = *v72++;
      unsigned int v73 = v74;
      if (v74 > v64) {
        unsigned int v64 = v73;
      }
      --v71;
    }
    while (v71);
    goto LABEL_70;
  }
  if ((v11 & 3) != 0)
  {
    unint64_t v65 = -1;
    LODWORD(v62) = 35;
  }
  else
  {
    uint64_t v66 = HIST_count_parallel_wksp(v11, (unsigned int *)&v500, v493, v59, 0, (char *)v11);
    uint64_t v58 = v16;
    unint64_t v65 = v66;
    LODWORD(v62) = v500;
  }
LABEL_71:
  *(_DWORD *)(v58 + 4576) = *(_DWORD *)(v9 + 4576);
  unsigned int v491 = v41;
  uint64_t v75 = v58;
  int v76 = ZSTD_selectEncodingType((_DWORD *)(v58 + 4576), (unsigned int *)v11, v62, v65, v495, 9u, (unsigned __int16 *)(v9 + 3252), (uint64_t)LL_defaultNorm, 6, 1, v41);
  unint64_t v77 = ZSTD_buildCTable(&v503[3], 0x85uLL, (_WORD *)(v16 + 3252), 9u, v76, (unsigned int *)v11, v62, v493, v495, LL_defaultNorm, 6, 35, (const void *)(v9 + 3252), 0x524uLL, v498, 0x1904uLL);
  unint64_t v22 = v77;
  if (v77 > 0xFFFFFFFFFFFFFF88) {
    return v22;
  }
  uint64_t v78 = (unsigned __int16 *)(v9 + 1028);
  int v79 = (_WORD *)(v75 + 1028);
  uint64_t v80 = v75;
  if (v76 == 2) {
    unint64_t v513 = v77;
  }
  unint64_t v81 = (char *)&v503[3] + v77;
  v503[0] = v76;
  LODWORD(v500) = 31;
  if (*(void *)v489 <= 0x176uLL)
  {
    v11[6] = 0u;
    v11[7] = 0u;
    _OWORD v11[4] = 0u;
    v11[5] = 0u;
    _OWORD v11[2] = 0u;
    void v11[3] = 0u;
    _OWORD *v11 = 0u;
    v11[1] = 0u;
    uint64_t v82 = v484;
    unsigned int v83 = v491;
    if (v480 == *(void *)v486)
    {
      int v87 = v79;
      LODWORD(v86) = 0;
      unint64_t v90 = 0;
      goto LABEL_94;
    }
    unsigned int v84 = v484;
    do
    {
      unsigned int v85 = *(unsigned __int8 *)v84;
      unsigned int v84 = (unsigned int *)((char *)v84 + 1);
      ++*((_DWORD *)v11 + v85);
    }
    while (v84 < (unsigned int *)((char *)v484 + v495));
    LODWORD(v86) = 32;
    do
      uint64_t v86 = (v86 - 1);
    while (!*((_DWORD *)v11 + v86));
    if (v86 >= 7)
    {
      uint64_t v88 = (v86 + 1) & 0x1FFFFFFF8;
      int v92 = (uint32x4_t *)(v11 + 1);
      uint64_t v93 = v88;
      uint32x4_t v94 = 0uLL;
      uint32x4_t v95 = 0uLL;
      do
      {
        uint32x4_t v94 = vmaxq_u32(v92[-1], v94);
        uint32x4_t v95 = vmaxq_u32(*v92, v95);
        v92 += 2;
        v93 -= 8;
      }
      while (v93);
      int v87 = v79;
      unsigned int v89 = vmaxvq_u32(vmaxq_u32(v94, v95));
      if (v86 + 1 == v88)
      {
LABEL_93:
        unint64_t v90 = v89;
        goto LABEL_94;
      }
    }
    else
    {
      int v87 = v79;
      uint64_t v88 = 0;
      unsigned int v89 = 0;
    }
    uint64_t v96 = v86 - v88 + 1;
    int v97 = (unsigned int *)v11 + v88;
    do
    {
      unsigned int v99 = *v97++;
      unsigned int v98 = v99;
      if (v99 > v89) {
        unsigned int v89 = v98;
      }
      --v96;
    }
    while (v96);
    goto LABEL_93;
  }
  int v87 = (_WORD *)(v75 + 1028);
  unsigned int v83 = v491;
  uint64_t v82 = v484;
  if ((v11 & 3) != 0)
  {
    unint64_t v90 = -1;
    LODWORD(v86) = 31;
  }
  else
  {
    uint64_t v86 = v80;
    uint64_t v91 = HIST_count_parallel_wksp(v11, (unsigned int *)&v500, v484, v495, 0, (char *)v11);
    uint64_t v80 = v86;
    unint64_t v90 = v91;
    LODWORD(v86) = v500;
  }
LABEL_94:
  *(_DWORD *)(v80 + 4568) = *(_DWORD *)(v9 + 4568);
  unsigned int v457 = v83;
  uint64_t v100 = v80;
  int v101 = ZSTD_selectEncodingType((_DWORD *)(v80 + 4568), (unsigned int *)v11, v86, v90, v495, 8u, v78, (uint64_t)OF_defaultNorm, 5, v86 < 0x1D, v457);
  unint64_t v102 = ZSTD_buildCTable(v81, (char *)v512 + 1 - v81, v87, 8u, v101, (unsigned int *)v11, v86, v82, v495, OF_defaultNorm, 5, 28, v78, 0x304uLL, v498, 0x1904uLL);
  unint64_t v22 = v102;
  if (v102 > 0xFFFFFFFFFFFFFF88) {
    return v22;
  }
  uint64_t v103 = v100;
  if (v101 == 2) {
    unint64_t v513 = v102;
  }
  int v104 = &v81[v102];
  v503[1] = v101;
  LODWORD(v500) = 52;
  if (*(void *)v489 <= 0x176uLL)
  {
    *((_DWORD *)v11 + 52) = 0;
    v11[11] = 0u;
    v11[12] = 0u;
    v11[9] = 0u;
    v11[10] = 0u;
    v11[7] = 0u;
    v11[8] = 0u;
    v11[5] = 0u;
    v11[6] = 0u;
    void v11[3] = 0u;
    _OWORD v11[4] = 0u;
    v11[1] = 0u;
    _OWORD v11[2] = 0u;
    _OWORD *v11 = 0u;
    uint64_t v105 = v9;
    unsigned int v106 = v491;
    if (v480 == *(void *)v486)
    {
      unint64_t v110 = (_WORD *)(v100 + 1800);
      LODWORD(v109) = 0;
      unint64_t v113 = 0;
      goto LABEL_117;
    }
    uint64_t v107 = v475;
    do
    {
      unsigned int v108 = *(unsigned __int8 *)v107;
      uint64_t v107 = (unsigned int *)((char *)v107 + 1);
      ++*((_DWORD *)v11 + v108);
    }
    while (v107 < (unsigned int *)((char *)v475 + v495));
    LODWORD(v109) = 53;
    do
      uint64_t v109 = (v109 - 1);
    while (!*((_DWORD *)v11 + v109));
    if (v109 >= 7)
    {
      uint64_t v111 = (v109 + 1) & 0x1FFFFFFF8;
      int64x2_t v115 = (uint32x4_t *)(v11 + 1);
      uint64_t v116 = v111;
      uint32x4_t v117 = 0uLL;
      uint32x4_t v118 = 0uLL;
      do
      {
        uint32x4_t v117 = vmaxq_u32(v115[-1], v117);
        uint32x4_t v118 = vmaxq_u32(*v115, v118);
        v115 += 2;
        v116 -= 8;
      }
      while (v116);
      unint64_t v110 = (_WORD *)(v100 + 1800);
      unsigned int v112 = vmaxvq_u32(vmaxq_u32(v117, v118));
      if (v109 + 1 == v111)
      {
LABEL_116:
        unint64_t v113 = v112;
        goto LABEL_117;
      }
    }
    else
    {
      unint64_t v110 = (_WORD *)(v100 + 1800);
      uint64_t v111 = 0;
      unsigned int v112 = 0;
    }
    uint64_t v119 = v109 - v111 + 1;
    int64x2_t v120 = (unsigned int *)v11 + v111;
    do
    {
      unsigned int v122 = *v120++;
      unsigned int v121 = v122;
      if (v122 > v112) {
        unsigned int v112 = v121;
      }
      --v119;
    }
    while (v119);
    goto LABEL_116;
  }
  unint64_t v110 = (_WORD *)(v100 + 1800);
  uint64_t v105 = v9;
  unsigned int v106 = v491;
  if ((v11 & 3) != 0)
  {
    unint64_t v113 = -1;
    LODWORD(v109) = 52;
  }
  else
  {
    uint64_t v114 = HIST_count_parallel_wksp(v11, (unsigned int *)&v500, v475, v495, 0, (char *)v11);
    uint64_t v103 = v100;
    unint64_t v113 = v114;
    LODWORD(v109) = v500;
  }
LABEL_117:
  *(_DWORD *)(v103 + 4572) = *(_DWORD *)(v105 + 4572);
  int64x2_t v123 = (unsigned __int16 *)(v105 + 1800);
  int v124 = ZSTD_selectEncodingType((_DWORD *)(v103 + 4572), (unsigned int *)v11, v109, v113, v495, 9u, v123, (uint64_t)ML_defaultNorm, 6, 1, v106);
  unint64_t v125 = ZSTD_buildCTable(v104, (char *)v512 + 1 - v104, v110, 9u, v124, (unsigned int *)v11, v109, v475, v495, ML_defaultNorm, 6, 52, v123, 0x5ACuLL, v498, 0x1904uLL);
  unint64_t v22 = v125;
  if (v125 > 0xFFFFFFFFFFFFFF88) {
    return v22;
  }
  if (v124 == 2) {
    unint64_t v513 = v125;
  }
  v503[2] = v124;
  unint64_t v22 = &v104[v125] - (char *)&v503[3];
  v512[1] = v22;
  if (v22 > 0xFFFFFFFFFFFFFF88) {
    return v22;
  }
  unint64_t v129 = 0;
  uint64_t v130 = 0;
  int32x4_t v131 = *(int32x4_t **)(v474 + 3120);
  v458 = &v477[a5];
  uint64_t v481 = a2 + v471;
  BOOL v470 = v501[2] == 2;
  unint64_t v132 = *(void *)(v474 + 640);
  unint64_t v467 = v132 - 8;
  int32x4_t v133 = *(unsigned __int16 **)(v474 + 2880);
  v487 = v133 + 514;
  v485 = v133 + 1626;
  v459 = *(char **)(v474 + 2872);
  v483 = v133 + 900;
  unint64_t v134 = *(void *)(v474 + 632);
  v460 = (const char *)(v133 + 33);
  v476 = *(unsigned int **)(v474 + 648);
  __dst = v133;
  v462 = v133 + 1;
  uint64_t v468 = *(void *)(v474 + 656);
  v492 = *(unsigned int **)(v474 + 672);
  v494 = *(unsigned int **)(v474 + 664);
  uint64_t v135 = 0xFFFFFF01FFFFFF00;
  v136.i64[0] = 0xFFFFFF05FFFFFF04;
  v137.i64[0] = 0xFFFFFF09FFFFFF08;
  v138.i64[0] = 0xFFFFFF0DFFFFFF0CLL;
  v490 = *(unsigned int **)(v474 + 680);
  unint64_t v472 = *(void *)(v474 + 240);
  v469 = (unsigned char *)a2;
  int v496 = 1;
  unint64_t v139 = v134;
  unint64_t v464 = v132;
  unint64_t v465 = v134;
  do
  {
    if (v134 == v132) {
      goto LABEL_130;
    }
    unint64_t v141 = v139 + 8 * v130;
    uint64_t v142 = *(unsigned __int16 *)(v141 + 4);
    if (*(_DWORD *)(v474 + 708) == ((v141 - *(void *)(v474 + 632)) >> 3)
      && *(_DWORD *)(v474 + 704) == 1)
    {
      v142 += 0xFFFFLL;
    }
    ++v130;
    if (v141 == v467)
    {
LABEL_130:
      unint64_t v129 = v468 - (void)v476;
      int v499 = 1;
      int v143 = v501[2];
      if ((v501[2] - 2) >= 2) {
        goto LABEL_131;
      }
    }
    else
    {
      v129 += v142;
      int v499 = 0;
      int v143 = v501[2];
      if ((v501[2] - 2) >= 2)
      {
LABEL_131:
        if (v143) {
          uint64_t v144 = v143 == 1;
        }
        else {
          uint64_t v144 = v129;
        }
        goto LABEL_167;
      }
    }
    uint64_t v144 = v129;
    if ((v131 & 3) != 0) {
      goto LABEL_167;
    }
    LODWORD(v500) = 255;
    if (v129 > 0x5DB)
    {
      uint64_t v144 = v129;
      if ((unint64_t)HIST_count_parallel_wksp(v131, (unsigned int *)&v500, v476, v129, 0, v131->i8) > 0xFFFFFFFFFFFFFF88) {
        goto LABEL_167;
      }
      unsigned int v147 = v500;
      int8x16_t v149 = (int8x16_t)xmmword_1889B9EF0;
      int8x16_t v148 = (int8x16_t)xmmword_1889B9EE0;
      int8x16_t v151 = (int8x16_t)xmmword_1889B9F10;
      int8x16_t v150 = (int8x16_t)xmmword_1889B9F00;
      if ((v500 & 0x80000000) != 0) {
        goto LABEL_147;
      }
LABEL_143:
      uint64_t v152 = v147 + 1;
      if (v147 >= 8)
      {
        if (v147 >= 0x20)
        {
          int64x2_t v156 = 0uLL;
          int64x2_t v157 = 0uLL;
          unint64_t v158 = 32;
          if ((((_BYTE)v147 + 1) & 0x1F) != 0) {
            unint64_t v158 = ((_BYTE)v147 + 1) & 0x1F;
          }
          int64x2_t v159 = 0uLL;
          uint64_t v153 = v152 - v158;
          int64x2_t v160 = 0uLL;
          uint64_t v161 = v152;
          int64x2_t v162 = 0uLL;
          int v163 = v131 + 4;
          int v164 = v460;
          int64x2_t v165 = 0uLL;
          int64x2_t v166 = 0uLL;
          int64x2_t v167 = 0uLL;
          int32x4_t v128 = 0uLL;
          int64x2_t v168 = 0uLL;
          int64x2_t v169 = 0uLL;
          int64x2_t v170 = 0uLL;
          int64x2_t v171 = 0uLL;
          int64x2_t v172 = 0uLL;
          int64x2_t v173 = 0uLL;
          int64x2_t v174 = 0uLL;
          do
          {
            int64x2_t v175 = v164 - 64;
            unsigned long long v176 = (unsigned __int128)vld4q_s8(v175);
            unsigned long long v177 = (unsigned __int128)vld4q_s8(v164);
            int32x4_t v178 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, v148);
            int32x4_t v179 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, v149);
            int32x4_t v180 = (int32x4_t)vqtbl1q_s8((int8x16_t)v176, v150);
            int32x4_t v181 = (int32x4_t)vqtbl1q_s8((int8x16_t)v177, v151);
            int32x4_t v182 = (int32x4_t)vqtbl1q_s8((int8x16_t)v177, v148);
            int32x4_t v183 = (int32x4_t)vqtbl1q_s8((int8x16_t)v177, v149);
            uint32x4_t v184 = (uint32x4_t)vmulq_s32(v163[-1], (int32x4_t)vqtbl1q_s8((int8x16_t)v176, v151));
            uint32x4_t v185 = (uint32x4_t)vmulq_s32(v163[-2], v180);
            uint32x4_t v186 = (uint32x4_t)vmulq_s32(v163[-3], v179);
            uint32x4_t v187 = (uint32x4_t)vmulq_s32(v163[-4], v178);
            uint32x4_t v188 = (uint32x4_t)vmulq_s32(v163[2], (int32x4_t)vqtbl1q_s8((int8x16_t)v177, v150));
            uint32x4_t v189 = (uint32x4_t)vmulq_s32(v163[1], v183);
            uint32x4_t v190 = (uint32x4_t)vmulq_s32(*v163, v182);
            uint32x4_t v191 = (uint32x4_t)vmulq_s32(v163[3], v181);
            int64x2_t v165 = (int64x2_t)vaddw_high_u32((uint64x2_t)v165, v185);
            int64x2_t v162 = (int64x2_t)vaddw_u32((uint64x2_t)v162, *(uint32x2_t *)v185.i8);
            int64x2_t v160 = (int64x2_t)vaddw_high_u32((uint64x2_t)v160, v186);
            int64x2_t v159 = (int64x2_t)vaddw_u32((uint64x2_t)v159, *(uint32x2_t *)v186.i8);
            int64x2_t v157 = (int64x2_t)vaddw_high_u32((uint64x2_t)v157, v187);
            int64x2_t v156 = (int64x2_t)vaddw_u32((uint64x2_t)v156, *(uint32x2_t *)v187.i8);
            int64x2_t v166 = (int64x2_t)vaddw_u32((uint64x2_t)v166, *(uint32x2_t *)v184.i8);
            int64x2_t v167 = (int64x2_t)vaddw_high_u32((uint64x2_t)v167, v184);
            int64x2_t v172 = (int64x2_t)vaddw_high_u32((uint64x2_t)v172, v188);
            int64x2_t v171 = (int64x2_t)vaddw_u32((uint64x2_t)v171, *(uint32x2_t *)v188.i8);
            int64x2_t v170 = (int64x2_t)vaddw_high_u32((uint64x2_t)v170, v189);
            int64x2_t v169 = (int64x2_t)vaddw_u32((uint64x2_t)v169, *(uint32x2_t *)v189.i8);
            int64x2_t v168 = (int64x2_t)vaddw_high_u32((uint64x2_t)v168, v190);
            int32x4_t v128 = (int32x4_t)vaddw_u32((uint64x2_t)v128, *(uint32x2_t *)v190.i8);
            int64x2_t v173 = (int64x2_t)vaddw_u32((uint64x2_t)v173, *(uint32x2_t *)v191.i8);
            int64x2_t v174 = (int64x2_t)vaddw_high_u32((uint64x2_t)v174, v191);
            v164 += 128;
            v163 += 8;
            v161 -= 32;
          }
          while (v158 != v161);
          int64x2_t v138 = vaddq_s64(v168, v157);
          int64x2_t v127 = vaddq_s64(v172, v165);
          int64x2_t v126 = vaddq_s64(v173, v166);
          int64x2_t v192 = vaddq_s64(vaddq_s64(vaddq_s64((int64x2_t)v128, v156), vaddq_s64(v171, v162)), vaddq_s64(vaddq_s64(v169, v159), v126));
          int64x2_t v137 = vaddq_s64(vaddq_s64(v170, v160), vaddq_s64(v174, v167));
          int64x2_t v136 = vaddq_s64(vaddq_s64(v138, v127), v137);
          uint64_t v135 = vaddvq_s64(vaddq_s64(v192, v136));
          unint64_t v154 = v135;
          if (v158 < 9) {
            goto LABEL_161;
          }
        }
        else
        {
          unint64_t v154 = 0;
          uint64_t v153 = 0;
        }
        uint64_t v193 = v152 & 7;
        if ((v152 & 7) == 0) {
          uint64_t v193 = 8;
        }
        uint64_t v194 = 2 * v153;
        uint64_t v195 = v193 + v153;
        uint64_t v153 = v152 - v193;
        int64x2_t v196 = (int64x2_t)v154;
        int64x2_t v197 = 0uLL;
        uint32x4_t v198 = (const char *)&v462[v194];
        uint32x4_t v199 = (int32x4_t *)((char *)v131 + v194 * 2);
        uint64_t v200 = v195 - v152;
        int64x2_t v137 = 0uLL;
        int64x2_t v138 = 0uLL;
        do
        {
          v126.i64[0] = (unint64_t)vld4_s8(v198);
          v198 += 32;
          int32x4_t v201 = (int32x4_t)vqtbl1q_s8((int8x16_t)v126, v148);
          int32x4_t v202 = *v199;
          int32x4_t v128 = v199[1];
          v199 += 2;
          int64x2_t v126 = (int64x2_t)vmulq_s32(v128, (int32x4_t)vqtbl1q_s8((int8x16_t)v126, v149));
          int64x2_t v127 = (int64x2_t)vmulq_s32(v202, v201);
          int64x2_t v138 = (int64x2_t)vaddw_high_u32((uint64x2_t)v138, (uint32x4_t)v126);
          int64x2_t v197 = (int64x2_t)vaddw_high_u32((uint64x2_t)v197, (uint32x4_t)v127);
          int64x2_t v137 = (int64x2_t)vaddw_u32((uint64x2_t)v137, *(uint32x2_t *)v126.i8);
          int64x2_t v196 = (int64x2_t)vaddw_u32((uint64x2_t)v196, *(uint32x2_t *)v127.i8);
          v200 += 8;
        }
        while (v200);
        int64x2_t v136 = vaddq_s64(v197, v138);
        uint64_t v135 = vaddvq_s64(vaddq_s64(vaddq_s64(v196, v137), v136));
        unint64_t v154 = v135;
LABEL_161:
        uint64_t v203 = v152 - v153;
        uint64_t v204 = 2 * v153;
        uint64_t v205 = &v131->i32[v153];
        uint64_t v206 = &v462[v204];
        do
        {
          int v208 = *(unsigned __int8 *)v206;
          v206 += 2;
          int v207 = v208;
          int v209 = *v205++;
          v154 += (v209 * v207);
          --v203;
        }
        while (v203);
        unint64_t v155 = v154 >> 3;
        goto LABEL_164;
      }
LABEL_144:
      uint64_t v153 = 0;
      unint64_t v154 = 0;
      goto LABEL_161;
    }
    bzero(v131, 0x400uLL);
    if (!v129)
    {
      uint64_t v152 = 1;
      goto LABEL_144;
    }
    uint64_t v145 = v476;
    do
    {
      int v146 = *(unsigned __int8 *)v145;
      uint64_t v145 = (unsigned int *)((char *)v145 + 1);
      ++v131->i32[v146];
    }
    while (v145 < (unsigned int *)((char *)v476 + v129));
    unsigned int v147 = 256;
    int8x16_t v149 = (int8x16_t)xmmword_1889B9EF0;
    int8x16_t v148 = (int8x16_t)xmmword_1889B9EE0;
    int8x16_t v151 = (int8x16_t)xmmword_1889B9F10;
    int8x16_t v150 = (int8x16_t)xmmword_1889B9F00;
    do
      --v147;
    while (!v131->i32[v147]);
    if ((v147 & 0x80000000) == 0) {
      goto LABEL_143;
    }
LABEL_147:
    unint64_t v155 = 0;
LABEL_164:
    size_t v210 = __n[1];
    if (!v470) {
      size_t v210 = 0;
    }
    uint64_t v144 = v155 + v210 + 3;
LABEL_167:
    uint64_t v211 = ZSTD_estimateSubBlockSize_symbolType(v503[1], v490, 0x1Fu, v130, v487, 0, (uint64_t)OF_defaultNorm, 5, *(double *)&v135, *(double *)v136.i64, *(double *)v137.i64, *(double *)v138.i64, *(double *)v126.i64, *(double *)v127.i64, (int8x16_t)v128, 0x1Cu, v131->i8);
    uint64_t v219 = ZSTD_estimateSubBlockSize_symbolType(v503[0], v494, 0x23u, v130, v485, (uint64_t)LL_bits, (uint64_t)LL_defaultNorm, 6, v212, v213, v214, v215, v216, v217, v218, 0x23u, v131->i8);
    uint64_t v227 = ZSTD_estimateSubBlockSize_symbolType(v503[2], v492, 0x34u, v130, v483, (uint64_t)ML_bits, (uint64_t)ML_defaultNorm, 6, v220, v221, v222, v223, v224, v225, v226, 0x34u, v131->i8);
    size_t v228 = v512[1];
    if (!v496) {
      size_t v228 = 0;
    }
    int v140 = v499;
    if (((v144 + v228 + v211 + v219 + v227 + 6 <= v472) & ~v499) == 0)
    {
      uint64_t v497 = v139;
      if (v130 < 1)
      {
        uint64_t v229 = 0;
        int32x4_t v233 = v469;
      }
      else
      {
        uint64_t v229 = 0;
        unint64_t v230 = v139 - *(void *)(v474 + 632);
        uint64_t v231 = 8 * v130;
        uint64_t v232 = (unsigned __int16 *)(v139 + 6);
        int32x4_t v233 = v469;
        do
        {
          unsigned int v235 = *v232;
          v232 += 4;
          uint64_t v234 = v235;
          uint64_t v236 = v235 + 3;
          if (*(_DWORD *)(v474 + 708) == (v230 >> 3))
          {
            uint64_t v237 = v234 + 65538;
            if (*(_DWORD *)(v474 + 704) == 2) {
              uint64_t v236 = v237;
            }
          }
          v229 += v236;
          v230 += 8;
          v231 -= 8;
        }
        while (v231 > 0);
      }
      if (a6) {
        int v238 = v499;
      }
      else {
        int v238 = 0;
      }
      float v239 = v233 + 3;
      unint64_t v240 = v481 - (void)v233 - 3;
      if (v470) {
        uint64_t v241 = 200;
      }
      else {
        uint64_t v241 = 0;
      }
      if (v470) {
        int v242 = v501[2];
      }
      else {
        int v242 = 3;
      }
      if (1024 - v241 > v129) {
        uint64_t v243 = 3;
      }
      else {
        uint64_t v243 = 4;
      }
      if (0x4000 - v241 > v129) {
        unint64_t v244 = v243;
      }
      else {
        unint64_t v244 = v243 + 1;
      }
      int v466 = v238;
      if (v129)
      {
        if (v501[2] == 1)
        {
          if (v129 <= 0x1F) {
            uint64_t v247 = 1;
          }
          else {
            uint64_t v247 = 2;
          }
          if (v129 > 0xFFF) {
            ++v247;
          }
          switch(v247)
          {
            case 3:
              *float v239 = (16 * v129) | 0xD;
              break;
            case 2:
              *(_WORD *)float v239 = (16 * v129) | 5;
              break;
            case 1:
              *(unsigned char *)float v239 = (8 * v129) | 1;
              break;
          }
          int v246 = 0;
          *((unsigned char *)v239 + v247) = *(unsigned char *)v476;
          unint64_t v22 = (v247 + 1);
        }
        else
        {
          if (!v501[2]) {
            goto LABEL_196;
          }
          size_t v248 = 0;
          float v249 = (unint64_t *)((char *)v239 + v244);
          if (v470 && v501[2] == 2)
          {
            memcpy((char *)v239 + v244, &v501[3], __n[1]);
            size_t v248 = __n[1];
            float v249 = (unint64_t *)((char *)v249 + __n[1]);
          }
          size_t v461 = v248;
          unint64_t v250 = v481 - (void)v249;
          if (v244 == 3) {
            unint64_t v251 = HUF_compress1X_usingCTable_internal(v249, v250, (uint64_t)v476, v129, (uint64_t)__dst);
          }
          else {
            unint64_t v251 = HUF_compress4X_usingCTable_internal((uint64_t)v249, v250, (uint64_t)v476, v129, (uint64_t)__dst);
          }
          if (v251 - 1 > 0xFFFFFFFFFFFFFF87) {
            goto LABEL_122;
          }
          unint64_t v252 = v251 + v461;
          if (!v470 && v252 >= v129) {
            goto LABEL_399;
          }
          unint64_t v253 = 3;
          if (v252 > 0x3FF) {
            unint64_t v253 = 4;
          }
          if ((v252 & 0xFFFFFFFFFFFFC000) != 0) {
            ++v253;
          }
          if (v244 >= v253)
          {
            switch(v244)
            {
              case 5uLL:
                *(_DWORD *)(v469 + 3) = v242 + 16 * v129 + (v252 << 22) + 12;
                v469[7] = v252 >> 10;
                break;
              case 4uLL:
                *float v239 = v242 + 16 * v129 + (v252 << 18) + 8;
                break;
              case 3uLL:
                int v254 = 16 * v129 + v242 + (v252 << 14);
                *(_WORD *)(v469 + 3) = v254;
                v469[5] = BYTE2(v254);
                break;
            }
            unint64_t v22 = (char *)v249 + v251 - (char *)v239;
            int v246 = 1;
            if (v22 > 0xFFFFFFFFFFFFFF88) {
              return v22;
            }
          }
          else
          {
LABEL_399:
          {
LABEL_196:
            if (v129 <= 0x1F) {
              LODWORD(v245) = 1;
            }
            else {
              LODWORD(v245) = 2;
            }
            if (v129 <= 0xFFF) {
              uint64_t v245 = v245;
            }
            else {
              uint64_t v245 = (v245 + 1);
            }
            unint64_t v22 = v129 + v245;
            if (v129 + v245 > v240) {
              return -70;
            }
          }
            switch(v245)
            {
              case 3:
                *float v239 = (16 * v129) | 0xC;
                break;
              case 2:
                *(_WORD *)float v239 = (16 * v129) | 4;
                break;
              case 1:
                *(unsigned char *)float v239 = 8 * v129;
                break;
            }
            memcpy((char *)v239 + v245, v476, v129);
            int v246 = 0;
            if (v22 > 0xFFFFFFFFFFFFFF88) {
              return v22;
            }
          }
          if (!v22)
          {
LABEL_122:
            unint64_t v134 = v465;
            unint64_t v139 = v497;
            goto LABEL_123;
          }
        }
      }
      else
      {
        if (v481 - (void)v233 == 3) {
          return -70;
        }
        int v246 = 0;
        *(unsigned char *)float v239 = 0;
        unint64_t v22 = 1;
      }
      float v255 = (char *)v239 + v22;
      uint64_t v256 = v481 - ((void)v239 + v22);
      BOOL v257 = *(_DWORD *)(v474 + 188) > 0x39u;
      if (v256 < 4) {
        return -70;
      }
      if ((unint64_t)v130 >= 0x7F)
      {
        if ((unint64_t)v130 >> 8 <= 0x7E)
        {
          *float v255 = BYTE1(v130) ^ 0x80;
          v255[1] = v130;
          long long v258 = v255 + 2;
          goto LABEL_250;
        }
        *float v255 = -1;
        *(_WORD *)(v255 + 1) = v130 - 32512;
        long long v258 = v255 + 3;
        int v260 = v255 + 4;
        if (!v496) {
          goto LABEL_256;
        }
LABEL_251:
        *long long v258 = (LOBYTE(v503[0]) << 6) + 16 * LOBYTE(v503[1]) + 4 * LOBYTE(v503[2]);
        memcpy(v260, &v503[3], v512[1]);
        uint64_t v261 = (unint64_t *)&v260[v512[1]];
        unint64_t v262 = ZSTD_encodeSequences(v261, v481 - (void)v261, v483, (uint64_t)v492, v487, (uint64_t)v490, v485, (uint64_t)v494, v497, v130, v257);
        unint64_t v22 = v262;
        if (v262 >= 0xFFFFFFFFFFFFFF89) {
          return v22;
        }
        long long v263 = (char *)v261 + v262;
        if (v513 && v513 + v262 < 4) {
          goto LABEL_122;
        }
      }
      else
      {
        *float v255 = v130;
        long long v258 = v255 + 1;
        if (!v130)
        {
          int v259 = 1;
          unint64_t v22 = 1;
LABEL_262:
          uint64_t v265 = &v255[v22];
          unint64_t v22 = &v255[v22] - v469;
          if (v466) {
            int v266 = -19;
          }
          else {
            int v266 = -20;
          }
          int v267 = v266 + 8 * v22;
          *(_WORD *)v469 = v267;
          v469[2] = BYTE2(v267);
          if (v22 > 0xFFFFFFFFFFFFFF88) {
            return v22;
          }
          if (!v22 || v22 >= v229 + v129) {
            goto LABEL_122;
          }
          unint64_t v139 = v497 + 8 * v130;
          v476 = (unsigned int *)((char *)v476 + v129);
          v477 += v229 + v129;
          v494 = (unsigned int *)((char *)v494 + v130);
          v492 = (unsigned int *)((char *)v492 + v130);
          v490 = (unsigned int *)((char *)v490 + v130);
          BOOL v268 = v470;
          if (v246) {
            BOOL v268 = 0;
          }
          BOOL v470 = v268;
          BOOL v328 = v259 == 0;
          int v269 = v496;
          if (v328) {
            int v269 = 0;
          }
          int v496 = v269;
          v469 = v265;
          unint64_t v129 = 0;
          uint64_t v130 = 0;
          unint64_t v134 = v465;
LABEL_123:
          unint64_t v132 = v464;
          int v140 = v499;
          continue;
        }
LABEL_250:
        int v260 = v258 + 1;
        if (v496) {
          goto LABEL_251;
        }
LABEL_256:
        *long long v258 = -4;
        unint64_t v264 = ZSTD_encodeSequences((unint64_t *)v260, v481 - (void)v260, v483, (uint64_t)v492, v487, (uint64_t)v490, v485, (uint64_t)v494, v497, v130, v257);
        unint64_t v22 = v264;
        if (v264 >= 0xFFFFFFFFFFFFFF89) {
          return v22;
        }
        long long v263 = &v260[v264];
      }
      if (v263 - v258 < 4) {
        goto LABEL_122;
      }
      unint64_t v22 = v263 - v255;
      if ((unint64_t)(v263 - v255) > 0xFFFFFFFFFFFFFF88) {
        return v22;
      }
      if (!v22) {
        goto LABEL_122;
      }
      int v259 = 0;
      goto LABEL_262;
    }
  }
  while (!v140);
  if (v470) {
    memcpy(__dst, v459, 0x404uLL);
  }
  if (v496
    && ((v503[0] - 1) < 2 || (v503[2] - 1) < 2 || (v503[1] - 3) > 0xFFFFFFFD))
  {
    return 0;
  }
  if (v477 >= v458) {
    return (uint64_t)&v469[-a2];
  }
  size_t v270 = v458 - v477;
  unint64_t v22 = v458 - v477 + 3;
  if (v22 > v481 - (uint64_t)v469) {
    return -70;
  }
  int v271 = a6 + 8 * v270;
  *(_WORD *)v469 = v271;
  v469[2] = BYTE2(v271);
  memcpy(v469 + 3, v477, v270);
  if (v22 <= 0xFFFFFFFFFFFFFF88)
  {
    v469 += v22;
    if (v139 < v132)
    {
      v501[0] = *((_DWORD *)v459 + 1147);
      unint64_t v500 = *(void *)(v459 + 4580);
      if (v134 < v139)
      {
        int v272 = *(_DWORD *)(v474 + 708);
        unint64_t v273 = v134 - *(void *)(v474 + 632);
        do
        {
          int v278 = *(unsigned __int16 *)(v134 + 4);
          if (v272 == (v273 >> 3) && *(_DWORD *)(v474 + 704) == 1) {
            v278 += 0xFFFF;
          }
          unsigned int v279 = *(_DWORD *)v134 - 1;
          if (v279 >= 3)
          {
            uint64_t v274 = v500;
            unsigned int v275 = *(_DWORD *)v134 - 3;
            long long v276 = (int *)&v500 + 1;
          }
          else
          {
            if (!v278) {
              unsigned int v279 = *(_DWORD *)v134;
            }
            if (v279)
            {
              if (v279 == 3)
              {
                uint64_t v274 = v500;
                unsigned int v275 = v500 - 1;
              }
              else
              {
                unsigned int v275 = v501[v279 - 2];
                uint64_t v274 = v500;
              }
              if (v279 <= 1) {
                uint64_t v280 = 2;
              }
              else {
                uint64_t v280 = 1;
              }
              long long v276 = &v501[v280 - 2];
            }
            else
            {
              unsigned int v275 = v500;
              uint64_t v274 = HIDWORD(v500);
              long long v276 = v501;
            }
          }
          int v277 = *v276;
          unint64_t v500 = v275 | (unint64_t)(v274 << 32);
          v501[0] = v277;
          v273 += 8;
          v134 += 8;
        }
        while (v134 < v139);
      }
      *(void *)(__dst + 2290) = v500;
      *((_DWORD *)__dst + 1147) = v501[0];
    }
    return (uint64_t)&v469[-a2];
  }
  return v22;
}

unint64_t ZSTD_compressBound(unint64_t a1)
{
  unint64_t v1 = (0x20000 - a1) >> 11;
  if (a1 >= 0x20000) {
    unint64_t v1 = 0;
  }
  return a1 + (a1 >> 8) + v1;
}

uint64_t ZSTD_createCCtx()
{
  uint64_t v0 = malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
  uint64_t v1 = (uint64_t)v0;
  if (v0)
  {
    bzero(v0, 0xD00uLL);
    ZSTD_clearAllDicts(v1);
    *(void *)(v1 + 176) = 0;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_DWORD *)(v1 + 60) = 3;
    *(_DWORD *)(v1 + 48) = 1;
  }
  return v1;
}

char *ZSTD_createCCtx_advanced(long long *a1)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t))a1;
  if ((*(void *)a1 == 0) != (*((void *)a1 + 1) == 0)) {
    return 0;
  }
  if (v1)
  {
    uint64_t v2 = (char *)v1(*((void *)a1 + 2), 3328);
    if (!v2) {
      return v2;
    }
  }
  else
  {
    uint64_t v2 = (char *)malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
    if (!v2) {
      return v2;
    }
  }
  long long v5 = *a1;
  uint64_t v6 = *((void *)a1 + 2);
  bzero(v2, 0xD00uLL);
  *(_OWORD *)(v2 + 552) = v5;
  *((void *)v2 + 71) = v6;
  ZSTD_clearAllDicts((uint64_t)v2);
  *((void *)v2 + 22) = 0;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_DWORD *)v2 + 15) = 3;
  *((_DWORD *)v2 + 12) = 1;
  return v2;
}

char *ZSTD_initStaticCCtx(char *a1, uint64_t a2)
{
  uint64_t result = 0;
  if ((unint64_t)a2 >= 0xD01 && (a1 & 7) == 0)
  {
    uint64_t result = 0;
    if (a1)
    {
      unint64_t v5 = a2 - 3328;
      if (a2 >= 3328)
      {
        uint64_t v6 = &a1[a2];
        bzero(a1, 0xD00uLL);
        uint64_t result = 0;
        *((void *)a1 + 46) = a1;
        *((void *)a1 + 47) = v6;
        *((void *)a1 + 48) = a1 + 3328;
        *((void *)a1 + 49) = a1 + 3328;
        *((void *)a1 + 50) = a1 + 3328;
        *((void *)a1 + 51) = v6;
        *((void *)a1 + 52) = 0;
        *((void *)a1 + 53) = 0x100000000;
        *((void *)a1 + 73) = a2;
        if (v5 >> 3 >= 0x7B7)
        {
          *((void *)a1 + 359) = a1 + 3328;
          unint64_t v7 = a1 + 12512;
          *((void *)a1 + 48) = a1 + 12512;
          *((void *)a1 + 49) = a1 + 12512;
          *((void *)a1 + 50) = a1 + 12512;
          *((void *)a1 + 360) = a1 + 7920;
          if (a2 > 19127)
          {
            *((void *)a1 + 48) = a1 + 19128;
            *((void *)a1 + 49) = a1 + 19128;
            *((void *)a1 + 50) = a1 + 19128;
          }
          else
          {
            unint64_t v7 = 0;
            a1[416] = 1;
          }
          *((void *)a1 + 390) = v7;
          *((_DWORD *)a1 + 2) = 0;
          return a1;
        }
      }
    }
  }
  return result;
}

unint64_t ZSTD_freeCCtx(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (*(void *)(result + 584)) {
      return -64;
    }
    uint64_t v2 = (_OWORD *)(result + 368);
    BOOL v3 = *(void *)(result + 368) <= result && *(void *)(result + 376) >= result;
    double v4 = ZSTD_clearAllDicts(result);
    ZSTDMT_freeCCtx(*(void *)(v1 + 3320), v4);
    *(void *)(v1 + 3320) = 0;
    unint64_t v5 = *(void (**)(uint64_t))(v1 + 560);
    uint64_t v6 = *(void *)(v1 + 568);
    unint64_t v7 = *(void **)(v1 + 368);
    *(_OWORD *)(v1 + 400) = 0u;
    *(_OWORD *)(v1 + 416) = 0u;
    *uint64_t v2 = 0u;
    *(_OWORD *)(v1 + 384) = 0u;
    if (v7)
    {
      if (!v5)
      {
        free(v7);
        if (!v3)
        {
LABEL_11:
          uint64_t v8 = *(void (**)(void, unint64_t))(v1 + 560);
          if (v8) {
            v8(*(void *)(v1 + 568), v1);
          }
          else {
            free((void *)v1);
          }
        }
        return 0;
      }
      v5(v6);
    }
    if (!v3) {
      goto LABEL_11;
    }
    return 0;
  }
  return result;
}

char *ZSTD_sizeof_CCtx(char *result)
{
  if (result)
  {
    unint64_t v1 = (char *)*((void *)result + 46);
    if (v1 == result) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = 3328;
    }
    uint64_t v4 = *((void *)result + 410);
    if (*((void *)result + 406)) {
      uint64_t v5 = *((void *)result + 408);
    }
    else {
      uint64_t v5 = 0;
    }
    if (v4)
    {
      uint64_t v6 = *(void *)(v4 + 32);
      uint64_t v7 = *(void *)(v4 + 40);
      BOOL v8 = v6 == v4;
      uint64_t v9 = 4952;
      if (v8) {
        uint64_t v9 = 0;
      }
      uint64_t v10 = v7 - v6 + v9;
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v2 = *((void *)result + 47);
    return (char *)ZSTDMT_sizeof_CCtx(*((void **)result + 415)) + v2 - (void)v1 + v3 + v5 + v10;
  }
  return result;
}

char *ZSTD_sizeof_CStream(char *result)
{
  if (result)
  {
    unint64_t v1 = (char *)*((void *)result + 46);
    if (v1 == result) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = 3328;
    }
    uint64_t v4 = *((void *)result + 410);
    if (*((void *)result + 406)) {
      uint64_t v5 = *((void *)result + 408);
    }
    else {
      uint64_t v5 = 0;
    }
    if (v4)
    {
      uint64_t v6 = *(void *)(v4 + 32);
      uint64_t v7 = *(void *)(v4 + 40);
      BOOL v8 = v6 == v4;
      uint64_t v9 = 4952;
      if (v8) {
        uint64_t v9 = 0;
      }
      uint64_t v10 = v7 - v6 + v9;
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v2 = *((void *)result + 47);
    return (char *)ZSTDMT_sizeof_CCtx(*((void **)result + 415)) + v2 - (void)v1 + v3 + v5 + v10;
  }
  return result;
}

uint64_t ZSTD_getSeqStore(uint64_t a1)
{
  return a1 + 632;
}

double ZSTD_createCCtxParams()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0xA8uLL, 0xEC864E14uLL);
  if (v0)
  {
    double result = 0.0;
    v0[7] = 0u;
    v0[8] = 0u;
    v0[5] = 0u;
    v0[6] = 0u;
    v0[3] = 0u;
    v0[4] = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    _OWORD *v0 = 0u;
    *((_DWORD *)v0 + 11) = 3;
    *((_DWORD *)v0 + 8) = 1;
    *((void *)v0 + 19) = 0;
    *((void *)v0 + 20) = 0;
    *((void *)v0 + 18) = 0;
  }
  return result;
}

uint64_t ZSTD_freeCCtxParams(void *a1)
{
  if (a1)
  {
    unint64_t v1 = (void (*)(void))a1[19];
    if (v1) {
      v1(a1[20]);
    }
    else {
      free(a1);
    }
  }
  return 0;
}

uint64_t ZSTD_CCtxParams_reset(uint64_t a1)
{
  if (!a1) {
    return -1;
  }
  uint64_t result = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 44) = 3;
  *(_DWORD *)(a1 + 32) = 1;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ZSTD_CCtxParams_init(uint64_t a1, int a2)
{
  if (!a1) {
    return -1;
  }
  uint64_t result = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 32) = 1;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ZSTD_CCtxParams_init_advanced(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return -1;
  }
  uint64_t v2 = -42;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1889B9F30, (uint32x4_t)vaddq_s32(*(int32x4_t *)a2, (int32x4_t)xmmword_1889B9F20)))) & 1) != 0|| (*(_DWORD *)(a2 + 16) - 8) < 0xFFFFFFFB|| *(_DWORD *)(a2 + 20) > 0x20000u)
  {
    return v2;
  }
  if ((*(_DWORD *)(a2 + 24) - 1) > 8) {
    return -42;
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int32x4_t v3 = *(int32x4_t *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 12);
  *(int32x4_t *)(a1 + 4) = v3;
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 32) = *(void *)(a2 + 28);
  *(void *)(a1 + 40) = v4;
  return 0;
}

uint64_t ZSTD_checkCParams(_DWORD *a1)
{
  if ((*a1 - 32) < 0xFFFFFFEA) {
    return -42;
  }
  if ((a1[1] - 31) < 0xFFFFFFE7) {
    return -42;
  }
  if ((a1[2] - 31) < 0xFFFFFFE7) {
    return -42;
  }
  if ((a1[3] - 31) < 0xFFFFFFE2) {
    return -42;
  }
  if ((a1[4] - 8) < 0xFFFFFFFB) {
    return -42;
  }
  unsigned int v3 = a1[5];
  uint64_t result = -42;
  if (v3 <= 0x20000 && (a1[6] - 10) >= 0xFFFFFFF7) {
    return 0;
  }
  return result;
}

uint64_t ZSTD_cParam_getBounds(int a1)
{
  if (a1 > 399)
  {
    if (a1 <= 499)
    {
      switch(a1)
      {
        case 400:
          return 0;
        case 401:
          return 0;
        case 402:
          return 0;
        default:
          return -40;
      }
    }
    else
    {
      switch(a1)
      {
        case 1000:
        case 1005:
        case 1006:
        case 1007:
        case 1008:
        case 1009:
          goto LABEL_6;
        case 1001:
          uint64_t result = 0;
          break;
        case 1002:
          uint64_t result = 0;
          break;
        case 1003:
          uint64_t result = 0;
          break;
        case 1004:
          uint64_t result = 0;
          break;
        default:
          if (a1 != 500) {
            return -40;
          }
LABEL_6:
          uint64_t result = 0;
          break;
      }
    }
  }
  else
  {
    int v1 = a1 - 100;
    uint64_t result = 0;
    switch(v1)
    {
      case 0:
        uint64_t result = 0;
        break;
      case 1:
        return result;
      case 2:
      case 3:
      case 61:
        uint64_t result = 0;
        break;
      case 4:
        uint64_t result = 0;
        break;
      case 5:
        uint64_t result = 0;
        break;
      case 6:
        uint64_t result = 0;
        break;
      case 7:
        uint64_t result = 0;
        break;
      case 60:
      case 100:
      case 101:
      case 102:
        goto LABEL_6;
      case 62:
        uint64_t result = 0;
        break;
      case 63:
        uint64_t result = 0;
        break;
      case 64:
        uint64_t result = 0;
        break;
      default:
        return -40;
    }
  }
  return result;
}

uint64_t ZSTD_minCLevel()
{
  return 4294836224;
}

uint64_t ZSTD_maxCLevel()
{
  return 22;
}

uint64_t ZSTD_CCtx_setParameter(uint64_t a1, int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 3208))
  {
    if ((a2 - 102) >= 6 && a2 != 100) {
      return -60;
    }
    *(_DWORD *)(a1 + 4) = 1;
  }
  if (a2 <= 399)
  {
    if ((a2 - 100) >= 8
      && ((a2 - 160) > 0x2A || ((1 << (a2 + 96)) & 0x7000000001FLL) == 0)
      && a2 != 10)
    {
      return -40;
    }
    return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
  }
  if (a2 > 999)
  {
    if ((a2 - 1000) < 0xA) {
      return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
    }
    return -40;
  }
  if ((a2 - 401) < 2) {
    return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
  }
  if (a2 != 400)
  {
    if (a2 == 500) {
      return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
    }
    return -40;
  }
  if (!a3 || !*(void *)(a1 + 584)) {
    return ZSTD_CCtxParams_setParameter(a1 + 16, a2, a3);
  }
  return -40;
}

uint64_t ZSTD_CCtxParams_setParameter(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result = -40;
  if (a2 > 399)
  {
    if (a2 <= 499)
    {
      switch(a2)
      {
        case 400:
          int v12 = a3 & ~((int)a3 >> 31);
          BOOL v13 = v12 > 0xC8;
          if (v12 >= 200) {
            int v12 = 200;
          }
          if (v13 || (a3 & 0x80000000) != 0) {
            uint64_t result = v12;
          }
          else {
            uint64_t result = a3;
          }
          *(_DWORD *)(a1 + 76) = result;
          break;
        case 401:
          if ((int)a3 >= 0x100000 || a3 == 0) {
            int v16 = a3;
          }
          else {
            int v16 = 0x100000;
          }
          if (v16 >= 0x40000000) {
            unsigned int v17 = 0x40000000;
          }
          else {
            unsigned int v17 = v16;
          }
          if (v16 <= 0x40000000) {
            uint64_t result = v16;
          }
          else {
            uint64_t result = v17;
          }
          *(void *)(a1 + 80) = result;
          break;
        case 402:
          int v9 = a3 & ~((int)a3 >> 31);
          BOOL v10 = v9 > 9;
          if (v9 >= 9) {
            int v9 = 9;
          }
          if (v10 || (a3 & 0x80000000) != 0) {
            uint64_t result = v9;
          }
          else {
            uint64_t result = a3;
          }
          *(_DWORD *)(a1 + 88) = result;
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 1000:
          uint64_t result = a3 != 0;
          *(_DWORD *)(a1 + 48) = result;
          return result;
        case 1001:
          if (a3 > 3) {
            goto LABEL_119;
          }
          *(_DWORD *)(a1 + 68) = a3;
          return a3;
        case 1002:
          if (a3 > 2) {
            goto LABEL_119;
          }
          *(_DWORD *)(a1 + 72) = a3;
          return a3;
        case 1003:
          if (a3 && a3 - 131073 < 0xFFFE003F) {
            goto LABEL_119;
          }
          uint64_t result = a3;
          *(void *)(a1 + 56) = a3;
          return result;
        case 1004:
          if ((a3 & 0x80000000) != 0) {
            goto LABEL_119;
          }
          *(_DWORD *)(a1 + 64) = a3;
          return a3;
        case 1005:
          uint64_t result = a3 != 0;
          *(_DWORD *)(a1 + 120) = result;
          return result;
        case 1006:
          if (a3 > 1) {
            goto LABEL_119;
          }
          *(_DWORD *)(a1 + 124) = a3;
          return a3;
        case 1007:
          if (a3 > 1) {
            goto LABEL_119;
          }
          *(_DWORD *)(a1 + 128) = a3;
          return a3;
        case 1008:
          if (a3 > 1) {
            goto LABEL_119;
          }
          *(_DWORD *)(a1 + 132) = a3;
          return a3;
        case 1009:
          if (a3 <= 1)
          {
            *(_DWORD *)(a1 + 136) = a3;
            return a3;
          }
LABEL_119:
          uint64_t result = -42;
          break;
        default:
          if (a2 == 500)
          {
            int v18 = a3 & ~((int)a3 >> 31);
            BOOL v19 = v18 > 9;
            if (v18 >= 9) {
              int v18 = 9;
            }
            if (v19 || (a3 & 0x80000000) != 0) {
              uint64_t result = v18;
            }
            else {
              uint64_t result = a3;
            }
            *(_DWORD *)(a1 + 92) = result;
          }
          return result;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 100:
        if ((int)a3 <= -131072) {
          int v5 = -131072;
        }
        else {
          int v5 = a3;
        }
        BOOL v6 = v5 <= 22;
        if (v5 >= 22) {
          int v5 = 22;
        }
        if (!v6 || (int)a3 < -131072) {
          int v8 = v5;
        }
        else {
          int v8 = a3;
        }
        if (!v8) {
          int v8 = 3;
        }
        *(_DWORD *)(a1 + 44) = v8;
        return v8 & ~(v8 >> 31);
      case 101:
        if (a3 && a3 - 32 < 0xFFFFFFEA) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 4) = a3;
        return a3;
      case 102:
        if (a3 && a3 - 31 < 0xFFFFFFE7) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 12) = a3;
        return a3;
      case 103:
        if (a3 && a3 - 31 < 0xFFFFFFE7) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 8) = a3;
        return a3;
      case 104:
        if (a3 > 0x1E) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 16) = a3;
        return a3;
      case 105:
        if (a3 - 3 >= 5 && a3) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 20) = a3;
        return a3;
      case 106:
        if (a3 > 0x20000) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 24) = a3;
        return a3;
      case 107:
        if (a3 > 9) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 28) = a3;
        return a3;
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
        return result;
      case 160:
        uint64_t result = a3 != 0;
        *(_DWORD *)(a1 + 96) = result;
        return result;
      case 161:
        if (a3 && a3 - 31 < 0xFFFFFFE7) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 100) = a3;
        return a3;
      case 162:
        if (a3 && a3 - 4097 < 0xFFFFF003) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 108) = a3;
        return a3;
      case 163:
        if (a3 > 8) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 104) = a3;
        return a3;
      case 164:
        if ((int)a3 > 25) {
          goto LABEL_119;
        }
        *(_DWORD *)(a1 + 112) = a3;
        return a3;
      case 200:
        uint64_t result = a3 != 0;
        *(_DWORD *)(a1 + 32) = result;
        return result;
      case 201:
        uint64_t result = a3 != 0;
        *(_DWORD *)(a1 + 36) = result;
        return result;
      case 202:
        uint64_t result = a3 != 0;
        *(_DWORD *)(a1 + 40) = a3 == 0;
        return result;
      default:
        if (a2 != 10) {
          return result;
        }
        if (a3 > 1) {
          goto LABEL_119;
        }
        *(_DWORD *)a1 = a3;
        break;
    }
    return a3;
  }
  return result;
}

uint64_t ZSTD_CCtx_getParameter(uint64_t a1, int a2, _DWORD *a3)
{
  return ZSTD_CCtxParams_getParameter((int *)(a1 + 16), a2, a3);
}

uint64_t ZSTD_CCtxParams_getParameter(int *a1, int a2, _DWORD *a3)
{
  uint64_t v3 = -40;
  if (a2 <= 399)
  {
    switch(a2)
    {
      case 100:
        int v4 = a1[11];
        goto LABEL_41;
      case 101:
        int v4 = a1[1];
        goto LABEL_41;
      case 102:
        int v4 = a1[3];
        goto LABEL_41;
      case 103:
        int v4 = a1[2];
        goto LABEL_41;
      case 104:
        int v4 = a1[4];
        goto LABEL_41;
      case 105:
        int v4 = a1[5];
        goto LABEL_41;
      case 106:
        int v4 = a1[6];
        goto LABEL_41;
      case 107:
        int v4 = a1[7];
        goto LABEL_41;
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
        return v3;
      case 160:
        int v4 = a1[24];
        goto LABEL_41;
      case 161:
        int v4 = a1[25];
        goto LABEL_41;
      case 162:
        int v4 = a1[27];
        goto LABEL_41;
      case 163:
        int v4 = a1[26];
        goto LABEL_41;
      case 164:
        int v4 = a1[28];
        goto LABEL_41;
      case 200:
        int v4 = a1[8];
        goto LABEL_41;
      case 201:
        int v4 = a1[9];
        goto LABEL_41;
      case 202:
        int v4 = a1[10] == 0;
        goto LABEL_41;
      default:
        if (a2 != 10) {
          return v3;
        }
        int v4 = *a1;
        break;
    }
    goto LABEL_41;
  }
  if (a2 > 499)
  {
    switch(a2)
    {
      case 1000:
        int v4 = a1[12];
        goto LABEL_41;
      case 1001:
        int v4 = a1[17];
        goto LABEL_41;
      case 1002:
        int v4 = a1[18];
        goto LABEL_41;
      case 1003:
        int v4 = a1[14];
        goto LABEL_41;
      case 1004:
        int v4 = a1[16];
        goto LABEL_41;
      case 1005:
        int v4 = a1[30];
        goto LABEL_41;
      case 1006:
        int v4 = a1[31];
        goto LABEL_41;
      case 1007:
        int v4 = a1[32];
        goto LABEL_41;
      case 1008:
        int v4 = a1[33];
        goto LABEL_41;
      case 1009:
        int v4 = a1[34];
        goto LABEL_41;
      default:
        if (a2 != 500) {
          return v3;
        }
        int v4 = a1[23];
        break;
    }
    goto LABEL_41;
  }
  switch(a2)
  {
    case 400:
      int v4 = a1[19];
      goto LABEL_41;
    case 401:
      int v4 = a1[20];
      goto LABEL_41;
    case 402:
      int v4 = a1[22];
LABEL_41:
      uint64_t v3 = 0;
      *a3 = v4;
      break;
  }
  return v3;
}

__n128 ZSTD_CCtx_setParametersUsingCCtxParams(uint64_t a1, long long *a2)
{
  if (!*(_DWORD *)(a1 + 3208) && !*(void *)(a1 + 3288))
  {
    long long v2 = *a2;
    long long v3 = a2[2];
    *(_OWORD *)(a1 + 32) = a2[1];
    *(_OWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 16) = v2;
    long long v4 = a2[3];
    long long v5 = a2[4];
    long long v6 = a2[6];
    *(_OWORD *)(a1 + 96) = a2[5];
    *(_OWORD *)(a1 + 112) = v6;
    *(_OWORD *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + 80) = v5;
    __n128 result = (__n128)a2[7];
    long long v8 = a2[8];
    long long v9 = a2[9];
    *(void *)(a1 + 176) = *((void *)a2 + 20);
    *(_OWORD *)(a1 + 144) = v8;
    *(_OWORD *)(a1 + 160) = v9;
    *(__n128 *)(a1 + 128) = result;
  }
  return result;
}

uint64_t ZSTD_CCtx_setPledgedSrcSize(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 3208)) {
    return -60;
  }
  uint64_t result = 0;
  *(void *)(a1 + 440) = a2 + 1;
  return result;
}

uint64_t ZSTD_CCtx_loadDictionary_advanced(uint64_t a1, void *a2, size_t a3, int a4, int a5)
{
  if (*(_DWORD *)(a1 + 3208)) {
    return -60;
  }
  double v11 = ZSTD_clearAllDicts(a1);
  uint64_t result = 0;
  if (a2 && a3)
  {
    if (a4 == 1)
    {
      int v12 = a2;
    }
    else
    {
      if (*(void *)(a1 + 584)) {
        return -64;
      }
      BOOL v13 = *(uint64_t (**)(void, size_t, double))(a1 + 552);
      int v14 = v13 ? (void *)v13(*(void *)(a1 + 568), a3, v11) : malloc_type_malloc(a3, 0x26AA08A0uLL);
      int v12 = v14;
      if (!v14) {
        return -64;
      }
      memcpy(v14, a2, a3);
      *(void *)(a1 + 3248) = v12;
    }
    uint64_t result = 0;
    *(void *)(a1 + 3256) = v12;
    *(void *)(a1 + 3264) = a3;
    *(_DWORD *)(a1 + 3272) = a5;
  }
  return result;
}

double ZSTD_clearAllDicts(uint64_t a1)
{
  if (*(void *)(a1 + 3248))
  {
    long long v2 = *(void (**)(void))(a1 + 560);
    if (!v2)
    {
      free(*(void **)(a1 + 3248));
      uint64_t v3 = a1 + 3248;
      unint64_t v4 = *(void *)(a1 + 3280);
      if (!v4) {
        goto LABEL_18;
      }
      goto LABEL_5;
    }
    v2(*(void *)(a1 + 568));
  }
  uint64_t v3 = a1 + 3248;
  unint64_t v4 = *(void *)(a1 + 3280);
  if (!v4) {
    goto LABEL_18;
  }
LABEL_5:
  long long v5 = *(void (**)(uint64_t))(v4 + 4928);
  uint64_t v6 = *(void *)(v4 + 4936);
  long long v8 = (_OWORD *)(v4 + 32);
  uint64_t v7 = *(void **)(v4 + 32);
  if ((unint64_t)v7 <= v4)
  {
    BOOL v9 = *(void *)(v4 + 40) >= v4;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    _OWORD *v8 = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    if (!v7)
    {
LABEL_7:
      if (!v9) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v9 = 0;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    _OWORD *v8 = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    if (!v7) {
      goto LABEL_7;
    }
  }
  if (!v5)
  {
    free(v7);
    if (v9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v5(v6);
  if (!v9)
  {
LABEL_12:
    if (v5)
    {
      ((void (*)(uint64_t, unint64_t))v5)(v6, v4);
      goto LABEL_18;
    }
LABEL_17:
    free((void *)v4);
  }
LABEL_18:
  *(void *)(v3 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  return result;
}

uint64_t ZSTD_CCtx_loadDictionary_byReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 3208)) {
    return -60;
  }
  ZSTD_clearAllDicts(a1);
  uint64_t result = 0;
  if (a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      *(void *)(a1 + 3256) = a2;
      *(void *)(a1 + 3264) = a3;
      *(_DWORD *)(a1 + 3272) = 0;
    }
  }
  return result;
}

uint64_t ZSTD_CCtx_loadDictionary(uint64_t a1, const void *a2, size_t a3)
{
  if (*(_DWORD *)(a1 + 3208)) {
    return -60;
  }
  double v7 = ZSTD_clearAllDicts(a1);
  uint64_t result = 0;
  if (a2 && a3)
  {
    if (*(void *)(a1 + 584)) {
      return -64;
    }
    long long v8 = *(uint64_t (**)(void, size_t, double))(a1 + 552);
    if (v8)
    {
      BOOL v9 = (void *)v8(*(void *)(a1 + 568), a3, v7);
      if (v9)
      {
LABEL_10:
        memcpy(v9, a2, a3);
        uint64_t result = 0;
        *(void *)(a1 + 3248) = v9;
        *(void *)(a1 + 3256) = v9;
        *(void *)(a1 + 3264) = a3;
        *(_DWORD *)(a1 + 3272) = 0;
        return result;
      }
    }
    else
    {
      BOOL v9 = malloc_type_malloc(a3, 0x26AA08A0uLL);
      if (v9) {
        goto LABEL_10;
      }
    }
    return -64;
  }
  return result;
}

uint64_t ZSTD_CCtx_refCDict(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 3208)) {
    return -60;
  }
  ZSTD_clearAllDicts(a1);
  uint64_t result = 0;
  *(void *)(a1 + 3288) = a2;
  return result;
}

uint64_t ZSTD_CCtx_refThreadPool(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 3208)) {
    return -60;
  }
  uint64_t result = 0;
  *(void *)(a1 + 576) = a2;
  return result;
}

uint64_t ZSTD_CCtx_refPrefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 3208)) {
    return -60;
  }
  ZSTD_clearAllDicts(a1);
  uint64_t result = 0;
  if (a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      *(void *)(a1 + 3296) = a2;
      *(void *)(a1 + 3304) = a3;
      *(_DWORD *)(a1 + 3312) = 1;
    }
  }
  return result;
}

uint64_t ZSTD_CCtx_refPrefix_advanced(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 3208)) {
    return -60;
  }
  ZSTD_clearAllDicts(a1);
  uint64_t result = 0;
  if (a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      *(void *)(a1 + 3296) = a2;
      *(void *)(a1 + 3304) = a3;
      *(_DWORD *)(a1 + 3312) = a4;
    }
  }
  return result;
}

double ZSTD_CCtx_reset(uint64_t a1, int a2)
{
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    *(_DWORD *)(a1 + 3208) = 0;
    *(void *)(a1 + 440) = 0;
    if ((a2 & 0xFFFFFFFE) != 2) {
      return result;
    }
  }
  else if ((a2 & 0xFFFFFFFE) != 2)
  {
    return result;
  }
  if (!*(_DWORD *)(a1 + 3208))
  {
    ZSTD_clearAllDicts(a1);
    double result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_DWORD *)(a1 + 60) = 3;
    *(_DWORD *)(a1 + 48) = 1;
    *(void *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  return result;
}

uint64_t ZSTD_cycleLog(int a1, unsigned int a2)
{
  return a1 - (a2 > 5);
}

unsigned int *ZSTD_adjustCParams@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4 = *result;
  int v5 = result[1];
  if ((int)*result >= 10)
  {
    if (v4 >= 0x20) {
      unsigned int v4 = 31;
    }
  }
  else
  {
    unsigned int v4 = 10;
  }
  int v6 = result[2];
  if (v5 >= 6)
  {
    if (v5 >= 0x1F) {
      int v5 = 30;
    }
  }
  else
  {
    int v5 = 6;
  }
  if (v6 >= 6)
  {
    if (v6 >= 0x1F) {
      int v6 = 30;
    }
  }
  else
  {
    int v6 = 6;
  }
  int v7 = result[4];
  unsigned int v8 = result[5];
  int v9 = result[3];
  if (v9 < 1)
  {
    int v9 = 1;
    if (v7 < 3)
    {
LABEL_17:
      int v7 = 3;
      goto LABEL_21;
    }
  }
  else
  {
    if (v9 >= 0x1F) {
      int v9 = 30;
    }
    if (v7 < 3) {
      goto LABEL_17;
    }
  }
  if (v7 >= 8) {
    int v7 = 7;
  }
LABEL_21:
  int v10 = result[6];
  if ((v8 & 0x80000000) == 0)
  {
    if (v8 > 0x20000) {
      unsigned int v8 = 0x20000;
    }
    if (v10 >= 1) {
      goto LABEL_25;
    }
LABEL_28:
    int v10 = 1;
    goto LABEL_29;
  }
  unsigned int v8 = 0;
  if (v10 < 1) {
    goto LABEL_28;
  }
LABEL_25:
  if (v10 >= 0xA) {
    int v10 = 9;
  }
LABEL_29:
  *double result = v4;
  result[1] = v5;
  result[2] = v6;
  result[3] = v9;
  result[4] = v7;
  result[5] = v8;
  result[6] = v10;
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = -1;
  }
  if ((v11 | a3) >> 30)
  {
    if (v11 == -1) {
      goto LABEL_53;
    }
  }
  else
  {
    unsigned int v12 = __clz(v11 + a3 - 1) ^ 0x1F;
    if ((v11 + a3) >= 0x40) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 6;
    }
    if (v4 >= v13) {
      unsigned int v4 = v13;
    }
  }
  unsigned int v14 = v4;
  if (a3)
  {
    uint64_t v15 = 1 << v4;
    unsigned int v14 = v4;
    if (1 << v4 < v11 + a3)
    {
      if ((v15 + a3) >> 31) {
        unsigned int v14 = 31;
      }
      else {
        unsigned int v14 = (__clz(v15 + a3 - 1) ^ 0x1F) + 1;
      }
    }
  }
  if (v10 <= 5) {
    unsigned int v16 = v14;
  }
  else {
    unsigned int v16 = v14 + 1;
  }
  if (v6 >= v14 + 1) {
    int v6 = v14 + 1;
  }
  if (v5 - (v10 > 5) > v14) {
    int v5 = v16;
  }
  if (v4 <= 0xA) {
    unsigned int v4 = 10;
  }
LABEL_53:
  *(_DWORD *)a4 = v4;
  *(_DWORD *)(a4 + 4) = v5;
  *(_DWORD *)(a4 + 8) = v6;
  *(void *)(a4 + 12) = *(void *)(result + 3);
  *(_DWORD *)(a4 + 20) = result[5];
  *(_DWORD *)(a4 + 24) = v10;
  return result;
}

int8x8_t ZSTD_getCParamsFromCCtxParams@<D0>(int8x8_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a2;
  if (a2 == -1)
  {
    if (a1[8].i32[0] <= 0) {
      uint64_t v7 = -1;
    }
    else {
      uint64_t v7 = a1[8].u32[0];
    }
  }
  ZSTD_getCParams_internal((uint64_t)v34, a1[5].i32[1], v7, a3, a4);
  int v10 = v34[0];
  if (a1[12].i32[0]) {
    int v10 = 27;
  }
  unsigned int v11 = a1->u32[1];
  if (!v11) {
    unsigned int v11 = v10;
  }
  unsigned int v12 = a1[1].u32[1];
  if (!v12) {
    unsigned int v12 = v34[2];
  }
  __int32 v13 = v36;
  int8x8_t v14 = v35;
  if (a1[1].i32[0]) {
    __int32 v15 = a1[1].i32[0];
  }
  else {
    __int32 v15 = v34[1];
  }
  int8x8_t v16 = a1[2];
  unsigned int v17 = a1[3].u32[1];
  if (!v17) {
    unsigned int v17 = v37;
  }
  BOOL v18 = v7 != -1 || a3 == 0;
  uint64_t v19 = 513;
  if (v18) {
    uint64_t v19 = v7;
  }
  if (a4 == 2) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = v7;
  }
  if (a4 == 1) {
    unint64_t v21 = 0;
  }
  else {
    unint64_t v21 = a3;
  }
  if (a4 == 1) {
    uint64_t v20 = v7;
  }
  if ((v20 | v21) >> 30)
  {
    if (v20 == -1) {
      goto LABEL_53;
    }
  }
  else
  {
    unsigned int v22 = __clz(v20 + v21 - 1) ^ 0x1F;
    if ((v20 + v21) >= 0x40) {
      unsigned int v23 = v22 + 1;
    }
    else {
      unsigned int v23 = 6;
    }
    if (v11 >= v23) {
      unsigned int v11 = v23;
    }
  }
  unint64_t v24 = (1 << v11) + v21;
  unint64_t v25 = v20 + v21;
  unint64_t v26 = v24 >> 31;
  unsigned int v27 = __clz(v24 - 1) ^ 0x1F;
  if (v26) {
    int v28 = 31;
  }
  else {
    int v28 = v27 + 1;
  }
  if (1 << v11 < v25) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = v11;
  }
  if (v21) {
    unsigned int v30 = v29;
  }
  else {
    unsigned int v30 = v11;
  }
  if (v12 >= v30 + 1) {
    unsigned int v12 = v30 + 1;
  }
  if (v17 <= 5) {
    unsigned int v31 = v30;
  }
  else {
    unsigned int v31 = v30 + 1;
  }
  if (v15 - (v17 > 5) > v30) {
    __int32 v15 = v31;
  }
LABEL_53:
  if (a1[3].i32[0]) {
    __int32 v13 = a1[3].i32[0];
  }
  int8x8_t v32 = (int8x8_t)vceqz_s32((int32x2_t)v16);
  if (v11 <= 0xA) {
    unsigned int v11 = 10;
  }
  *(_DWORD *)a5 = v11;
  *(_DWORD *)(a5 + 4) = v15;
  *(_DWORD *)(a5 + 8) = v12;
  int8x8_t result = vbsl_s8(v32, v14, v16);
  *(int8x8_t *)(a5 + 12) = result;
  *(_DWORD *)(a5 + 20) = v13;
  *(_DWORD *)(a5 + 24) = v17;
  return result;
}

uint64_t ZSTD_getCParams_internal(uint64_t result, int a2, uint64_t a3, unint64_t a4, int a5)
{
  if (a5 == 1) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = a4;
  }
  unint64_t v6 = -1;
  if (a3 != -1 || v5)
  {
    if (v5) {
      BOOL v7 = a3 == -1;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v8 = 500;
    if (!v7) {
      uint64_t v8 = 0;
    }
    unint64_t v6 = v5 + a3 + v8;
  }
  int v9 = v6 < 0x40001;
  if (v6 <= 0x20000) {
    ++v9;
  }
  if (v6 > 0x4000) {
    int v10 = v9;
  }
  else {
    int v10 = v9 + 1;
  }
  unsigned int v11 = 3;
  if (a2 >= 0x16) {
    int v12 = 22;
  }
  else {
    int v12 = a2;
  }
  if (a2 < 0) {
    int v12 = 0;
  }
  if (a2) {
    unsigned int v11 = v12;
  }
  __int32 v13 = (char *)&ZSTD_defaultCParameters + 644 * v10 + 28 * v11;
  unsigned int v14 = *((_DWORD *)v13 + 6);
  if (a5 == 1)
  {
    a4 = 0;
  }
  else if (a5 == 2 && a4 && a3 == -1)
  {
    a3 = 513;
  }
  unsigned int v17 = *(_DWORD *)v13;
  unsigned int v16 = *((_DWORD *)v13 + 1);
  unsigned int v18 = *((_DWORD *)v13 + 2);
  uint64_t v19 = *(void *)(v13 + 12);
  int v20 = *((_DWORD *)v13 + 5);
  if ((a3 | a4) >> 30)
  {
    if (a3 == -1) {
      goto LABEL_55;
    }
  }
  else
  {
    unsigned int v21 = __clz(a3 + a4 - 1) ^ 0x1F;
    if ((a3 + a4) >= 0x40) {
      unsigned int v22 = v21 + 1;
    }
    else {
      unsigned int v22 = 6;
    }
    if (v17 >= v22) {
      unsigned int v17 = v22;
    }
  }
  unint64_t v23 = (1 << v17) + a4;
  unint64_t v24 = a3 + a4;
  unint64_t v25 = v23 >> 31;
  unsigned int v26 = __clz(v23 - 1) ^ 0x1F;
  if (v25) {
    int v27 = 31;
  }
  else {
    int v27 = v26 + 1;
  }
  if (1 << v17 < v24) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = v17;
  }
  if (!a4) {
    unsigned int v28 = v17;
  }
  if (v18 >= v28 + 1) {
    unsigned int v18 = v28 + 1;
  }
  if (v14 <= 5) {
    unsigned int v29 = v28;
  }
  else {
    unsigned int v29 = v28 + 1;
  }
  if (v16 - (v14 > 5) > v28) {
    unsigned int v16 = v29;
  }
LABEL_55:
  if (a2 <= 0xFFFE0000) {
    int v30 = -131072;
  }
  else {
    int v30 = a2;
  }
  if (a2 < 0) {
    int v20 = -v30;
  }
  if (v17 <= 0xA) {
    unsigned int v17 = 10;
  }
  *(_DWORD *)int8x8_t result = v17;
  *(_DWORD *)(result + 4) = v16;
  *(_DWORD *)(result + 8) = v18;
  *(void *)(result + 12) = v19;
  *(_DWORD *)(result + 20) = v20;
  *(_DWORD *)(result + 24) = v14;
  return result;
}

uint64_t ZSTD_estimateCCtxSize_usingCCtxParams(int8x8_t *a1)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unsigned int v16 = 0;
  uint64_t v15 = 0;
  ZSTD_getCParamsFromCCtxParams(a1, -1, 0, 0, (uint64_t)&v13);
  if (a1[9].i32[1] > 0) {
    return -1;
  }
  uint64_t v3 = 1 << v13;
  if ((unint64_t)(1 << v13) >= 0x20000) {
    uint64_t v3 = 0x20000;
  }
  if (v16 == 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4 << SBYTE4(v13);
  }
  if (v15 == 3)
  {
    uint64_t v5 = 149000;
    if (v16 <= 6) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = (4 << v14) + v4;
    if (v13 > 0x11)
    {
      uint64_t v7 = 0x80000;
      if (!a1[12].i32[0]) {
        goto LABEL_23;
      }
LABEL_18:
      unsigned __int32 v8 = a1[13].u32[0];
      unsigned __int32 v9 = a1[12].u32[1];
      if (v8 >= v9) {
        LOBYTE(v8) = a1[12].i32[1];
      }
      uint64_t v10 = (1 << (v9 - v8)) + (8 << v9);
      uint64_t v11 = 12 * (v3 / a1[13].i32[1]);
      goto LABEL_24;
    }
    if (v13)
    {
      uint64_t v7 = 4 << v13;
      if (a1[12].i32[0]) {
        goto LABEL_18;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v5 = 149000;
    if (v16 <= 6) {
      uint64_t v5 = 0;
    }
    uint64_t v6 = (4 << v14) + v4;
  }
  uint64_t v7 = 0;
  if (a1[12].i32[0]) {
    goto LABEL_18;
  }
LABEL_23:
  uint64_t v10 = 0;
  uint64_t v11 = 0;
LABEL_24:
  if (v15 == 3) {
    unsigned int v12 = 3;
  }
  else {
    unsigned int v12 = 4;
  }
  return v3 + v6 + v5 + v7 + v10 + v11 + 11 * (v3 / v12) + 19160;
}

uint64_t ZSTD_estimateCCtxSize_usingCParams(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)a1;
  memset(v6, 0, sizeof(v6));
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  HIDWORD(v7) = 3;
  DWORD1(v6[0]) = v1;
  unsigned int v3 = *(_DWORD *)(a1 + 20);
  unsigned int v2 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)((char *)v6 + 8) = *(_OWORD *)(a1 + 4);
  *((void *)&v6[1] + 1) = __PAIR64__(v2, v3);
  LODWORD(v7) = 1;
  if (v2 >= 7 && v1 >= 0x1B)
  {
    LODWORD(v11) = 1;
    DWORD1(v11) = v1 - 7;
    if (v1 >= v1 - 7) {
      int v4 = 7;
    }
    else {
      int v4 = 0;
    }
    *(void *)&long long v12 = __PAIR64__(v1, v4);
    *((void *)&v11 + 1) = 0x4000000003;
  }
  return ZSTD_estimateCCtxSize_usingCCtxParams((int8x8_t *)v6);
}

unint64_t ZSTD_estimateCCtxSize(int a1)
{
  unint64_t v1 = 0;
  if (a1 >= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a1;
  }
  int v3 = a1 + 1;
  do
  {
    if (v2 >= 0x16) {
      unsigned int v5 = 22;
    }
    else {
      unsigned int v5 = v2;
    }
    if (v2 < 0) {
      unsigned int v5 = 0;
    }
    if (!v2) {
      unsigned int v5 = 3;
    }
    uint64_t v6 = (char *)&ZSTD_defaultCParameters + 28 * v5;
    unsigned int v7 = *(_DWORD *)v6;
    uint64_t v8 = *(void *)(v6 + 12);
    int v9 = *((_DWORD *)v6 + 5);
    unsigned int v10 = *((_DWORD *)v6 + 6);
    if (v2 <= 0xFFFE0000) {
      int v11 = -131072;
    }
    else {
      int v11 = v2;
    }
    if (v2 < 0) {
      int v9 = -v11;
    }
    long long v14 = 0u;
    long long v15 = 0u;
    if (v7 <= 0xA) {
      unsigned int v7 = 10;
    }
    uint64_t v24 = 0;
    long long v22 = 0uLL;
    long long v23 = 0uLL;
    long long v20 = 0uLL;
    long long v21 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    HIDWORD(v16) = 3;
    LODWORD(v16) = 1;
    DWORD1(v14) = v7;
    *((void *)&v14 + 1) = *(void *)(v6 + 4);
    *(void *)&long long v15 = v8;
    *((void *)&v15 + 1) = __PAIR64__(v10, v9);
    if (v10 >= 7 && v7 >= 0x1B)
    {
      LODWORD(v20) = 1;
      DWORD1(v20) = v7 - 7;
      if (v7 >= v7 - 7) {
        int v12 = 7;
      }
      else {
        int v12 = 0;
      }
      *(void *)&long long v21 = __PAIR64__(v7, v12);
      *((void *)&v20 + 1) = 0x4000000003;
    }
    unint64_t v4 = ZSTD_estimateCCtxSize_usingCCtxParams((int8x8_t *)&v14);
    if (v4 > v1) {
      unint64_t v1 = v4;
    }
    ++v2;
  }
  while (v3 != v2);
  return v1;
}

uint64_t ZSTD_estimateCStreamSize_usingCCtxParams(int8x8_t *a1)
{
  if (a1[9].i32[1] > 0) {
    return -1;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unsigned int v23 = 0;
  uint64_t v22 = 0;
  ZSTD_getCParamsFromCCtxParams(a1, -1, 0, 0, (uint64_t)&v20);
  unint64_t v3 = 0x20000;
  if ((unint64_t)(1 << v20) < 0x20000) {
    unint64_t v3 = 1 << v20;
  }
  unint64_t v4 = (1 << v20) + v3;
  unint64_t v5 = (0x20000 - v3) >> 11;
  if (v20 >= 0x11) {
    unint64_t v5 = 0;
  }
  unint64_t v6 = v3 + (v3 >> 8) + v5;
  if (a1[16].i32[0]) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  if (v23 == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 4 << SBYTE4(v20);
  }
  if (v22 == 3)
  {
    uint64_t v9 = 149000;
    if (v23 <= 6) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = (4 << v21) + v8;
    if (v20 > 0x11)
    {
      uint64_t v11 = 0x80000;
      __int32 v12 = a1[15].i32[1];
      uint64_t v13 = v4 + 32;
      if (!a1[12].i32[0]) {
        goto LABEL_28;
      }
LABEL_23:
      unsigned __int32 v14 = a1[13].u32[0];
      unsigned __int32 v15 = a1[12].u32[1];
      if (v14 >= v15) {
        LOBYTE(v14) = a1[12].i32[1];
      }
      uint64_t v16 = (1 << (v15 - v14)) + (8 << v15);
      uint64_t v17 = 12 * (v3 / a1[13].i32[1]);
      goto LABEL_29;
    }
    if (v20)
    {
      uint64_t v11 = 4 << v20;
      __int32 v12 = a1[15].i32[1];
      uint64_t v13 = v4 + 32;
      if (a1[12].i32[0]) {
        goto LABEL_23;
      }
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v9 = 149000;
    if (v23 <= 6) {
      uint64_t v9 = 0;
    }
    uint64_t v10 = (4 << v21) + v8;
  }
  uint64_t v11 = 0;
  __int32 v12 = a1[15].i32[1];
  uint64_t v13 = v4 + 32;
  if (a1[12].i32[0]) {
    goto LABEL_23;
  }
LABEL_28:
  uint64_t v16 = 0;
  uint64_t v17 = 0;
LABEL_29:
  if (v22 == 3) {
    unsigned int v18 = 3;
  }
  else {
    unsigned int v18 = 4;
  }
  uint64_t v19 = 11 * (v3 / v18);
  if (v12) {
    uint64_t v13 = 32;
  }
  return v3 + v7 + v10 + v9 + v13 + v11 + v16 + v17 + v19 + 19128;
}

uint64_t ZSTD_estimateCStreamSize_usingCParams(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)a1;
  memset(v6, 0, sizeof(v6));
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  HIDWORD(v7) = 3;
  DWORD1(v6[0]) = v1;
  unsigned int v3 = *(_DWORD *)(a1 + 20);
  unsigned int v2 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)((char *)v6 + 8) = *(_OWORD *)(a1 + 4);
  *((void *)&v6[1] + 1) = __PAIR64__(v2, v3);
  LODWORD(v7) = 1;
  if (v2 >= 7 && v1 >= 0x1B)
  {
    LODWORD(v11) = 1;
    DWORD1(v11) = v1 - 7;
    if (v1 >= v1 - 7) {
      int v4 = 7;
    }
    else {
      int v4 = 0;
    }
    *(void *)&long long v12 = __PAIR64__(v1, v4);
    *((void *)&v11 + 1) = 0x4000000003;
  }
  return ZSTD_estimateCStreamSize_usingCCtxParams((int8x8_t *)v6);
}

unint64_t ZSTD_estimateCStreamSize(int a1)
{
  unint64_t v1 = 0;
  if (a1 >= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a1;
  }
  int v3 = a1 + 1;
  do
  {
    if (v2 >= 0x16) {
      unsigned int v5 = 22;
    }
    else {
      unsigned int v5 = v2;
    }
    if (v2 < 0) {
      unsigned int v5 = 0;
    }
    if (!v2) {
      unsigned int v5 = 3;
    }
    unint64_t v6 = (char *)&ZSTD_defaultCParameters + 28 * v5;
    unsigned int v7 = *(_DWORD *)v6;
    uint64_t v8 = *(void *)(v6 + 12);
    int v9 = *((_DWORD *)v6 + 5);
    unsigned int v10 = *((_DWORD *)v6 + 6);
    if (v2 <= 0xFFFE0000) {
      int v11 = -131072;
    }
    else {
      int v11 = v2;
    }
    if (v2 < 0) {
      int v9 = -v11;
    }
    long long v14 = 0u;
    long long v15 = 0u;
    if (v7 <= 0xA) {
      unsigned int v7 = 10;
    }
    uint64_t v24 = 0;
    long long v22 = 0uLL;
    long long v23 = 0uLL;
    long long v20 = 0uLL;
    long long v21 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    HIDWORD(v16) = 3;
    LODWORD(v16) = 1;
    DWORD1(v14) = v7;
    *((void *)&v14 + 1) = *(void *)(v6 + 4);
    *(void *)&long long v15 = v8;
    *((void *)&v15 + 1) = __PAIR64__(v10, v9);
    if (v10 >= 7 && v7 >= 0x1B)
    {
      LODWORD(v20) = 1;
      DWORD1(v20) = v7 - 7;
      if (v7 >= v7 - 7) {
        int v12 = 7;
      }
      else {
        int v12 = 0;
      }
      *(void *)&long long v21 = __PAIR64__(v7, v12);
      *((void *)&v20 + 1) = 0x4000000003;
    }
    unint64_t v4 = ZSTD_estimateCStreamSize_usingCCtxParams((int8x8_t *)&v14);
    if (v4 > v1) {
      unint64_t v1 = v4;
    }
    ++v2;
  }
  while (v3 != v2);
  return v1;
}

uint64_t ZSTD_getFrameProgression@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(int *)(result + 260) >= 1) {
    return ZSTDMT_getFrameProgression(*(void *)(result + 3320), (uint64_t)a2);
  }
  uint64_t v2 = *(void *)(result + 3136);
  if (v2) {
    uint64_t v2 = *(void *)(result + 3160) - *(void *)(result + 3152);
  }
  uint64_t v3 = *(void *)(result + 448);
  uint64_t v4 = *(void *)(result + 456);
  *a2 = v3 + v2;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v4;
  a2[4] = 0;
  return result;
}

uint64_t ZSTDMT_getFrameProgression@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 2976);
  uint64_t v3 = *(void *)(result + 264) + v2;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v2;
  uint64_t v4 = *(void *)(result + 2984);
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v4;
  unsigned int v5 = *(_DWORD *)(result + 2952);
  *(void *)(a2 + 32) = v5;
  unsigned int v6 = *(_DWORD *)(result + 2948);
  unsigned int v18 = *(_DWORD *)(result + 224) + v5;
  if (v6 < v18)
  {
    int v7 = 0;
    uint64_t v8 = v4;
    uint64_t v17 = result;
    do
    {
      unsigned int v11 = *(_DWORD *)(result + 2944) & v6;
      uint64_t v12 = *(void *)(result + 8);
      long long v13 = (uint64_t *)(v12 + 424 * v11);
      pthread_mutex_lock((pthread_mutex_t *)(v13 + 2));
      uint64_t v14 = 0;
      unint64_t v15 = v13[1];
      if (v15 >= 0xFFFFFFFFFFFFFF89) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v13[1];
      }
      if (v15 <= 0xFFFFFFFFFFFFFF88) {
        uint64_t v14 = *(void *)(v12 + 424 * v11 + 408);
      }
      unint64_t v9 = *(void *)(v12 + 424 * v11 + 200);
      v3 += v9;
      unint64_t v10 = *v13;
      v2 += *v13;
      *(void *)a2 = v3;
      *(void *)(a2 + 8) = v2;
      v4 += v16;
      v8 += v14;
      *(void *)(a2 + 16) = v4;
      *(void *)(a2 + 24) = v8;
      if (v10 < v9) {
        ++v7;
      }
      *(_DWORD *)(a2 + 36) = v7;
      pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(v17 + 8) + 424 * v11 + 16));
      ++v6;
      int8x8_t result = v17;
    }
    while (v18 != v6);
  }
  return result;
}

uint64_t ZSTD_toFlushNow(uint64_t a1)
{
  if (*(int *)(a1 + 260) < 1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 3320);
  int v2 = *(_DWORD *)(v1 + 2948);
  if (v2 == *(_DWORD *)(v1 + 2952)) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v1 + 2944) & v2;
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v6 = v5 + 424 * v4;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(v6 + 8);
  if (v8 >= 0xFFFFFFFFFFFFFF89) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  if (v8 <= 0xFFFFFFFFFFFFFF88) {
    uint64_t v7 = *(void *)(v5 + 424 * v4 + 408);
  }
  uint64_t v10 = v9 - v7;
  pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(v1 + 8) + 424 * v4 + 16));
  return v10;
}

uint64_t ZSTDMT_toFlushNow(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 2948);
  if (v1 == *(_DWORD *)(a1 + 2952)) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 2944) & v1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = v5 + 424 * v4;
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(v6 + 8);
  if (v8 >= 0xFFFFFFFFFFFFFF89) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  if (v8 <= 0xFFFFFFFFFFFFFF88) {
    uint64_t v7 = *(void *)(v5 + 424 * v4 + 408);
  }
  uint64_t v10 = v9 - v7;
  pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(a1 + 8) + 424 * v4 + 16));
  return v10;
}

double ZSTD_reset_compressedBlockState(uint64_t a1)
{
  *(void *)(a1 + 4580) = 0x400000001;
  *(_DWORD *)(a1 + 4588) = 8;
  *(_DWORD *)(a1 + 1024) = 0;
  double result = 0.0;
  *(void *)(a1 + 4568) = 0;
  *(_DWORD *)(a1 + 4576) = 0;
  return result;
}

uint64_t ZSTD_invalidateRepCodes(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 2872);
  *(void *)(v1 + 4580) = 0;
  *(_DWORD *)(v1 + 4588) = 0;
  return result;
}

uint64_t ZSTD_copyCCtx(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_DWORD *)a2 != 1) {
    return -60;
  }
  int v5 = *(_DWORD *)(a2 + 3128);
  long long v6 = *(_OWORD *)(a2 + 552);
  if (!a3) {
    a3 = -1;
  }
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  long long v25 = *(_OWORD *)(a1 + 124);
  long long v26 = *(_OWORD *)(a1 + 140);
  *(_OWORD *)int v27 = *(_OWORD *)(a1 + 156);
  *(_OWORD *)&v27[12] = *(_OWORD *)(a1 + 168);
  long long v21 = *(_OWORD *)(a1 + 60);
  long long v22 = *(_OWORD *)(a1 + 76);
  long long v23 = *(_OWORD *)(a1 + 92);
  long long v24 = *(_OWORD *)(a1 + 108);
  unint64_t v8 = v7 | ((unint64_t)*(unsigned int *)(a2 + 188) << 32);
  uint64_t v9 = *(void *)(a2 + 208);
  long long v17 = *(_OWORD *)(a2 + 192);
  unint64_t v16 = v8;
  uint64_t v18 = v9;
  BOOL v19 = a3 != -1;
  int v20 = 0;
  ZSTD_resetCCtx_internal(a1, (long long *)&v16, a3, 1, v5);
  *(void *)(a1 + 400) = *(void *)(a1 + 384);
  if (*(_DWORD *)(a2 + 212) == 1) {
    size_t v10 = 0;
  }
  else {
    size_t v10 = 4 << *(_DWORD *)(a2 + 192);
  }
  int v12 = *(_DWORD *)(a2 + 2928);
  memcpy(*(void **)(a1 + 2936), *(const void **)(a2 + 2936), 4 << *(_DWORD *)(a2 + 196));
  memcpy(*(void **)(a1 + 2952), *(const void **)(a2 + 2952), v10);
  if (v12) {
    size_t v13 = 4 << v12;
  }
  else {
    size_t v13 = 0;
  }
  memcpy(*(void **)(a1 + 2944), *(const void **)(a2 + 2944), v13);
  unint64_t v14 = *(void *)(a1 + 392);
  if (*(void *)(a1 + 400) < v14) {
    *(void *)(a1 + 400) = v14;
  }
  long long v15 = *(_OWORD *)(a2 + 2904);
  *(_OWORD *)(a1 + 2888) = *(_OWORD *)(a2 + 2888);
  *(_OWORD *)(a1 + 2904) = v15;
  *(void *)(a1 + 2920) = *(void *)(a2 + 2920);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  memcpy(*(void **)(a1 + 2872), *(const void **)(a2 + 2872), 0x11F0uLL);
  return 0;
}

uint64_t ZSTD_seqToCodes(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v1 = *(void *)(result + 40);
  unint64_t v3 = *(void *)(result + 8) - *(void *)result;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = (v3 >> 3);
    int v5 = (unsigned __int16 *)(*(void *)result + 6);
    long long v6 = *(unsigned char **)(result + 48);
    uint64_t v7 = *(unsigned char **)(result + 40);
    unint64_t v8 = *(unsigned char **)(result + 32);
    do
    {
      while (1)
      {
        unsigned int v9 = *(v5 - 1);
        if (v9 < 0x40) {
          LOBYTE(v10) = ZSTD_LLcode_LL_Code[*(v5 - 1)];
        }
        else {
          unsigned int v10 = 50 - __clz(v9);
        }
        unsigned int v11 = *v5;
        unsigned char *v8 = v10;
        *long long v6 = __clz(*(_DWORD *)(v5 - 3)) ^ 0x1F;
        if (v11 >= 0x80) {
          break;
        }
        *v7++ = ZSTD_MLcode_ML_Code[v11];
        v5 += 4;
        ++v8;
        ++v6;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      *v7++ = 67 - __clz(v11);
      v5 += 4;
      ++v8;
      ++v6;
      --v4;
    }
    while (v4);
  }
LABEL_9:
  int v12 = *(_DWORD *)(result + 72);
  if (v12 != 1)
  {
    if (v12 != 2) {
      return result;
    }
LABEL_13:
    *(unsigned char *)(v1 + *(unsigned int *)(result + 76)) = 52;
    return result;
  }
  *(unsigned char *)(v2 + *(unsigned int *)(result + 76)) = 35;
  if (*(_DWORD *)(result + 72) == 2) {
    goto LABEL_13;
  }
  return result;
}

uint64_t ZSTD_selectBlockCompressor(int a1, int a2)
{
  return (uint64_t)*(&ZSTD_selectBlockCompressor_blockCompressor[10 * a2] + a1);
}

int64_t ZSTD_compressBlock_fast(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a1 + 208);
  switch(v5)
  {
    case 5:
      if (*(_DWORD *)(a1 + 212)) {
        int v110 = *(_DWORD *)(a1 + 212);
      }
      else {
        int v110 = 1;
      }
      uint64_t v111 = *(void *)(a1 + 8);
      unint64_t v8 = &a4[a5];
      int v112 = a4 + a5 - v111;
      unsigned int v113 = *(_DWORD *)(a1 + 24);
      unsigned int v114 = 1 << *(_DWORD *)(a1 + 192);
      BOOL v115 = v112 - v113 > v114;
      LODWORD(v116) = v112 - v114;
      BOOL v117 = *(_DWORD *)(a1 + 32) == 0;
      if (v117 && v115) {
        uint64_t v116 = v116;
      }
      else {
        uint64_t v116 = v113;
      }
      unsigned int v409 = v116;
      uint32x4_t v118 = (unsigned __int8 *)(v111 + v116);
      unint64_t v119 = (unint64_t)(v8 - 8);
      unsigned int v17 = *a3;
      unsigned int v120 = a3[1];
      unint64_t v405 = (unint64_t)v118;
      if (v118 == a4) {
        _X23 = a4 + 1;
      }
      else {
        _X23 = a4;
      }
      unsigned int v122 = _X23 + 1;
      BOOL v123 = _X23 - v111 - v113 > v114;
      int v124 = _X23 - v111 - v114;
      if (!v117 || !v123) {
        int v124 = *(_DWORD *)(a1 + 24);
      }
      unsigned int v125 = _X23 - v111 - v124;
      if (v120 <= v125) {
        uint64_t v24 = v120;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v120 <= v125) {
        unsigned int v126 = 0;
      }
      else {
        unsigned int v126 = a3[1];
      }
      if (v17 <= v125) {
        uint64_t v26 = v17;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v17 <= v125) {
        unsigned int v17 = v126;
      }
      if ((unint64_t)v122 >= v119) {
        goto LABEL_557;
      }
      unsigned int v398 = v17;
      uint64_t v127 = *(void *)(a1 + 48);
      int8x8_t v399 = a3;
      uint64_t v401 = (v110 + 1);
      int v128 = 64 - *(_DWORD *)(a1 + 200);
      unint64_t v129 = (unint64_t)(v8 - 7);
      unint64_t v130 = (unint64_t)(v8 - 3);
      unint64_t v131 = (unint64_t)(v8 - 1);
      unint64_t v132 = (unint64_t)(v8 - 32);
      while (1)
      {
        uint64_t v133 = *(void *)_X23;
        uint64_t v134 = *(void *)v122;
        unsigned int v135 = _X23 - v111;
        unint64_t v136 = 4 * ((0xCF1BBCDCBB000000 * *(void *)_X23) >> v128);
        uint64_t v137 = *(unsigned int *)(v127 + v136);
        unint64_t v138 = 4 * ((0xCF1BBCDCBB000000 * *(void *)v122) >> v128);
        uint64_t v139 = *(unsigned int *)(v127 + v138);
        __asm { PRFM            #0, [X23,#0x100] }
        *(_DWORD *)(v127 + v136) = _X23 - v111;
        *(_DWORD *)(v127 + v138) = v122 - v111;
        if (!v26) {
          goto LABEL_565;
        }
        while (2)
        {
          unint64_t v141 = &_X23[-v26 + 2];
          if (*(_DWORD *)v141 == *(_DWORD *)(_X23 + 2))
          {
            int v142 = 0;
            BOOL v143 = _X23[1] == *(v141 - 1);
            uint64_t v144 = _X23[1] == *(v141 - 1) ? 5 : 4;
            _X23 = &_X23[-v143 + 2];
            uint64_t v145 = &v141[-v143];
            uint64_t v146 = v26;
            uint64_t v26 = v24;
          }
          else
          {
LABEL_565:
            if (v137 <= v409
              || (uint64_t v145 = (unsigned __int8 *)(v111 + v137), *(_DWORD *)(v111 + v137) != v133))
            {
              if (v139 <= v409
                || (uint64_t v145 = (unsigned __int8 *)(v111 + v139), *(_DWORD *)(v111 + v139) != v134))
              {
                uint64_t v165 = v401 + ((unint64_t)(_X23 - a4) >> 7);
                _X23 += v165;
                v122 += v165;
                if ((unint64_t)v122 >= v119) {
                  goto LABEL_556;
                }
                continue;
              }
              _X23 = v122;
            }
            uint64_t v146 = (_X23 - v145);
            int v142 = v146 + 2;
            if (_X23 <= a4 || (unint64_t)v145 <= v405)
            {
              uint64_t v144 = 4;
            }
            else
            {
              unint64_t v158 = v145 - 1;
              int64x2_t v159 = _X23 - 1;
              uint64_t v144 = 4;
              while (*v159 == *v158)
              {
                ++v144;
                int64x2_t v160 = v158 - 1;
                uint64_t v161 = v159 - 1;
                if (v159 > a4)
                {
                  --v159;
                  BOOL v66 = (unint64_t)v158-- > v405;
                  if (v66) {
                    continue;
                  }
                }
                uint64_t v145 = v160 + 1;
                _X23 = v161 + 1;
                goto LABEL_174;
              }
              uint64_t v145 = v158 + 1;
              _X23 = v159 + 1;
            }
          }
          break;
        }
LABEL_174:
        unsigned int v147 = (char *)&_X23[v144];
        int8x16_t v148 = &v145[v144];
        if (v129 <= (unint64_t)&_X23[v144]) {
          break;
        }
        unint64_t v149 = *(void *)v147 ^ *(void *)v148;
        if (v149)
        {
          unint64_t v150 = __clz(__rbit64(v149)) >> 3;
          unint64_t v151 = _X23 - a4;
          uint64_t v152 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 <= v132) {
            goto LABEL_177;
          }
          goto LABEL_205;
        }
        uint64_t v173 = 0;
        uint64_t v174 = (uint64_t)&_X23[v144 + 8];
        do
        {
          int64x2_t v175 = (void *)(v174 + v173);
          if (v174 + v173 >= v129)
          {
            int64x2_t v162 = &_X23[v144 + 8 + v173];
            int8x16_t v148 = &v145[v144 + 8 + v173];
            if ((unint64_t)v162 >= v130) {
              goto LABEL_196;
            }
            goto LABEL_194;
          }
          uint64_t v176 = *(void *)&v145[v144 + 8 + v173];
          v173 += 8;
          unint64_t v177 = *v175 ^ v176;
        }
        while (!v177);
        unint64_t v150 = v173 + (__clz(__rbit64(v177)) >> 3);
        unint64_t v151 = _X23 - a4;
        uint64_t v152 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X23 > v132) {
          goto LABEL_205;
        }
LABEL_177:
        *uint64_t v152 = *(_OWORD *)a4;
        uint64_t v153 = *(void *)(a2 + 24);
        if (v151 > 0x10)
        {
          unint64_t v154 = (_OWORD *)(v153 + 16);
          unint64_t v155 = v153 + v151;
          int64x2_t v156 = (long long *)(a4 + 16);
          do
          {
            long long v157 = *v156++;
            *v154++ = v157;
          }
          while ((unint64_t)v154 < v155);
          goto LABEL_242;
        }
        *(void *)(a2 + 24) = v153 + v151;
        uint64_t v166 = *(void *)(a2 + 8);
LABEL_244:
        unint64_t v189 = v150 + v144;
        unint64_t v190 = v150 + v144 - 3;
        *(_WORD *)(v166 + 4) = v151;
        *(_DWORD *)uint64_t v166 = v142 + 1;
        if (v190 >= 0x10000)
        {
          unint64_t v191 = (unint64_t)(v166 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v191;
        }
        *(_WORD *)(v166 + 6) = v190;
        uint64_t v192 = v166 + 8;
        *(void *)(a2 + 8) = v166 + 8;
        a4 = &_X23[v189];
        if ((unint64_t)&_X23[v189] > v119)
        {
          uint64_t v24 = v26;
LABEL_167:
          unsigned int v122 = a4 + 1;
          uint64_t v26 = v146;
          _X23 = a4;
          if ((unint64_t)(a4 + 1) >= v119) {
            goto LABEL_556;
          }
        }
        else
        {
          *(_DWORD *)(v127 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v111 + 2 + v135)) >> v128)) = v135 + 2;
          *(_DWORD *)(v127 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(a4 - 2)) >> v128)) = a4 - 2 - v111;
          if (v26)
          {
            uint64_t v193 = v146;
            while (1)
            {
              uint64_t v24 = v193;
              uint64_t v193 = v26;
              if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v26]) {
                break;
              }
              uint64_t v194 = (char *)(a4 + 4);
              uint64_t v195 = &a4[-v26 + 4];
              if (v129 <= (unint64_t)(a4 + 4))
              {
                uint32x4_t v198 = a4 + 4;
                if ((unint64_t)v194 >= v130) {
                  goto LABEL_257;
                }
LABEL_255:
                if (*(_DWORD *)v195 == *(_DWORD *)v198)
                {
                  v198 += 4;
                  v195 += 4;
                }
LABEL_257:
                if ((unint64_t)v198 >= v131)
                {
                  if (v198 < v8) {
                    goto LABEL_263;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v195 == *(unsigned __int16 *)v198)
                  {
                    v198 += 2;
                    v195 += 2;
                  }
                  if (v198 >= v8) {
                    goto LABEL_265;
                  }
LABEL_263:
                  if (*v195 == *v198) {
                    ++v198;
                  }
                }
LABEL_265:
                unint64_t v197 = v198 - (unsigned __int8 *)v194;
                goto LABEL_266;
              }
              unint64_t v196 = *(void *)v194 ^ *(void *)v195;
              if (v196)
              {
                unint64_t v197 = __clz(__rbit64(v196)) >> 3;
                goto LABEL_266;
              }
              uint64_t v200 = (char *)(a4 + 12);
              do
              {
                int32x4_t v201 = &v200[v196];
                if ((unint64_t)&v200[v196] >= v129)
                {
                  uint32x4_t v198 = &a4[v196 + 12];
                  uint64_t v195 = &v198[-v26];
                  if ((unint64_t)v198 >= v130) {
                    goto LABEL_257;
                  }
                  goto LABEL_255;
                }
                uint64_t v202 = *(void *)&a4[v196 + 12 - v26];
                v196 += 8;
                unint64_t v203 = *(void *)v201 ^ v202;
              }
              while (!v203);
              unint64_t v197 = v196 + (__clz(__rbit64(v203)) >> 3);
LABEL_266:
              *(_DWORD *)(v127 + 4 * ((0xCF1BBCDCBB000000 * *(void *)a4) >> v128)) = a4 - v111;
              if ((unint64_t)a4 <= v132)
              {
                *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
                uint64_t v192 = *(void *)(a2 + 8);
              }
              *(_WORD *)(v192 + 4) = 0;
              *(_DWORD *)uint64_t v192 = 1;
              if (v197 + 1 >= 0x10000)
              {
                unint64_t v199 = (unint64_t)(v192 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v199;
              }
              a4 += v197 + 4;
              *(_WORD *)(v192 + 6) = v197 + 1;
              v192 += 8;
              *(void *)(a2 + 8) = v192;
              uint64_t v26 = v24;
              uint64_t v146 = v193;
              if ((unint64_t)a4 > v119) {
                goto LABEL_167;
              }
            }
            uint64_t v204 = v24;
            uint64_t v24 = v26;
            unsigned int v122 = a4 + 1;
            uint64_t v26 = v204;
            _X23 = a4;
            if ((unint64_t)(a4 + 1) >= v119) {
              goto LABEL_556;
            }
          }
          else
          {
            uint64_t v24 = 0;
            unsigned int v122 = a4 + 1;
            uint64_t v26 = v146;
            _X23 += v189;
            if ((unint64_t)(a4 + 1) >= v119) {
              goto LABEL_556;
            }
          }
        }
      }
      int64x2_t v162 = &_X23[v144];
      if ((unint64_t)v147 >= v130) {
        goto LABEL_196;
      }
LABEL_194:
      if (*(_DWORD *)v148 == *(_DWORD *)v162)
      {
        v162 += 4;
        v148 += 4;
      }
LABEL_196:
      if ((unint64_t)v162 >= v131)
      {
        if (v162 >= v8) {
          goto LABEL_204;
        }
      }
      else
      {
        if (*(unsigned __int16 *)v148 == *(unsigned __int16 *)v162)
        {
          v162 += 2;
          v148 += 2;
        }
        if (v162 >= v8)
        {
LABEL_204:
          unint64_t v150 = v162 - (unsigned __int8 *)v147;
          unint64_t v151 = _X23 - a4;
          uint64_t v152 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 <= v132) {
            goto LABEL_177;
          }
LABEL_205:
          if ((unint64_t)a4 <= v132)
          {
            int v164 = (char *)v152 + v132 - (void)a4;
            int64x2_t v167 = a4;
            int64x2_t v168 = v152;
            do
            {
              long long v169 = *(_OWORD *)v167;
              v167 += 16;
              *v168++ = v169;
            }
            while (v168 < (_OWORD *)v164);
            int v163 = (char *)(v8 - 32);
            if (v132 >= (unint64_t)_X23) {
              goto LABEL_242;
            }
          }
          else
          {
            int v163 = (char *)a4;
            int v164 = v152;
            if (a4 >= _X23)
            {
LABEL_242:
              *(void *)(a2 + 24) += v151;
              uint64_t v166 = *(void *)(a2 + 8);
              if (v151 >= 0x10000)
              {
                unint64_t v188 = (unint64_t)(v166 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v188;
              }
              goto LABEL_244;
            }
          }
          if ((unint64_t)a4 <= v132) {
            int64x2_t v170 = v8 - 32;
          }
          else {
            int64x2_t v170 = a4;
          }
          unint64_t v171 = _X23 - v170;
          if ((unint64_t)(_X23 - v170) < 8)
          {
            int64x2_t v172 = (unsigned __int8 *)v163;
            goto LABEL_241;
          }
          if ((unint64_t)((char *)v152 - (char *)a4) < 0x20)
          {
            int64x2_t v172 = (unsigned __int8 *)v163;
            goto LABEL_241;
          }
          if (v171 >= 0x20)
          {
            unint64_t v178 = v171 & 0xFFFFFFFFFFFFFFE0;
            int32x4_t v179 = (long long *)(v163 + 16);
            int32x4_t v180 = (_OWORD *)((char *)v152 + v170 - a4 + 16);
            unint64_t v181 = v171 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v182 = *v179;
              *(v180 - 1) = *(v179 - 1);
              *int32x4_t v180 = v182;
              v179 += 2;
              v180 += 2;
              v181 -= 32;
            }
            while (v181);
            if (v171 == v178) {
              goto LABEL_242;
            }
            if ((v171 & 0x18) == 0)
            {
              int64x2_t v172 = (unsigned __int8 *)&v163[v178];
              v164 += v178;
              do
              {
LABEL_241:
                char v187 = *v172++;
                *v164++ = v187;
              }
              while (v172 < _X23);
              goto LABEL_242;
            }
          }
          else
          {
            unint64_t v178 = 0;
          }
          v164 += v171 & 0xFFFFFFFFFFFFFFF8;
          int64x2_t v172 = (unsigned __int8 *)&v163[v171 & 0xFFFFFFFFFFFFFFF8];
          int32x4_t v183 = &v163[v178];
          uint32x4_t v184 = (void *)((char *)v152 + &v170[v178] - a4);
          unint64_t v185 = v178 - (v171 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v186 = *(void *)v183;
            v183 += 8;
            *v184++ = v186;
            v185 += 8;
          }
          while (v185);
          if (v171 == (v171 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_242;
          }
          goto LABEL_241;
        }
      }
      if (*v148 == *v162) {
        ++v162;
      }
      goto LABEL_204;
    case 6:
      if (*(_DWORD *)(a1 + 212)) {
        int v205 = *(_DWORD *)(a1 + 212);
      }
      else {
        int v205 = 1;
      }
      uint64_t v206 = *(void *)(a1 + 8);
      unint64_t v8 = &a4[a5];
      int v207 = a4 + a5 - v206;
      unsigned int v208 = *(_DWORD *)(a1 + 24);
      unsigned int v209 = 1 << *(_DWORD *)(a1 + 192);
      BOOL v210 = v207 - v208 > v209;
      LODWORD(v211) = v207 - v209;
      BOOL v212 = *(_DWORD *)(a1 + 32) == 0;
      if (v212 && v210) {
        uint64_t v211 = v211;
      }
      else {
        uint64_t v211 = v208;
      }
      unsigned int v410 = v211;
      double v213 = (unsigned __int8 *)(v206 + v211);
      unint64_t v214 = (unint64_t)(v8 - 8);
      unsigned int v17 = *a3;
      unsigned int v215 = a3[1];
      unint64_t v402 = (unint64_t)v213;
      if (v213 == a4) {
        _X23 = a4 + 1;
      }
      else {
        _X23 = a4;
      }
      double v217 = _X23 + 1;
      BOOL v218 = _X23 - v206 - v208 > v209;
      int v219 = _X23 - v206 - v209;
      if (!v212 || !v218) {
        int v219 = *(_DWORD *)(a1 + 24);
      }
      unsigned int v220 = _X23 - v206 - v219;
      if (v215 <= v220) {
        uint64_t v24 = v215;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v215 <= v220) {
        unsigned int v221 = 0;
      }
      else {
        unsigned int v221 = a3[1];
      }
      if (v17 <= v220) {
        uint64_t v26 = v17;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v17 <= v220) {
        unsigned int v17 = v221;
      }
      if ((unint64_t)v217 >= v214) {
        goto LABEL_557;
      }
      unsigned int v398 = v17;
      int8x8_t v399 = a3;
      uint64_t v222 = *(void *)(a1 + 48);
      uint64_t v406 = (v205 + 1);
      int v223 = 64 - *(_DWORD *)(a1 + 200);
      unint64_t v224 = (unint64_t)(v8 - 7);
      unint64_t v225 = (unint64_t)(v8 - 3);
      unint64_t v226 = (unint64_t)(v8 - 1);
      unint64_t v227 = (unint64_t)(v8 - 32);
      while (1)
      {
        uint64_t v228 = *(void *)_X23;
        uint64_t v229 = *(void *)v217;
        unsigned int v230 = _X23 - v206;
        unint64_t v231 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)_X23) >> v223);
        uint64_t v232 = *(unsigned int *)(v222 + v231);
        unint64_t v233 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v217) >> v223);
        uint64_t v234 = *(unsigned int *)(v222 + v233);
        __asm { PRFM            #0, [X23,#0x100] }
        *(_DWORD *)(v222 + v231) = _X23 - v206;
        *(_DWORD *)(v222 + v233) = v217 - v206;
        if (!v26) {
          goto LABEL_566;
        }
        while (2)
        {
          uint64_t v236 = &_X23[-v26 + 2];
          if (*(_DWORD *)v236 == *(_DWORD *)(_X23 + 2))
          {
            int v237 = 0;
            BOOL v238 = _X23[1] == *(v236 - 1);
            uint64_t v239 = _X23[1] == *(v236 - 1) ? 5 : 4;
            _X23 = &_X23[-v238 + 2];
            unint64_t v240 = &v236[-v238];
            uint64_t v241 = v26;
            uint64_t v26 = v24;
          }
          else
          {
LABEL_566:
            if (v232 <= v410
              || (unint64_t v240 = (unsigned __int8 *)(v206 + v232), *(_DWORD *)(v206 + v232) != v228))
            {
              if (v234 <= v410
                || (unint64_t v240 = (unsigned __int8 *)(v206 + v234), *(_DWORD *)(v206 + v234) != v229))
              {
                uint64_t v260 = v406 + ((unint64_t)(_X23 - a4) >> 7);
                _X23 += v260;
                v217 += v260;
                if ((unint64_t)v217 >= v214) {
                  goto LABEL_556;
                }
                continue;
              }
              _X23 = v217;
            }
            uint64_t v241 = (_X23 - v240);
            int v237 = v241 + 2;
            if (_X23 <= a4 || (unint64_t)v240 <= v402)
            {
              uint64_t v239 = 4;
            }
            else
            {
              unint64_t v253 = v240 - 1;
              int v254 = _X23 - 1;
              uint64_t v239 = 4;
              while (*v254 == *v253)
              {
                ++v239;
                float v255 = v253 - 1;
                uint64_t v256 = v254 - 1;
                if (v254 > a4)
                {
                  --v254;
                  BOOL v66 = (unint64_t)v253-- > v402;
                  if (v66) {
                    continue;
                  }
                }
                unint64_t v240 = v255 + 1;
                _X23 = v256 + 1;
                goto LABEL_312;
              }
              unint64_t v240 = v253 + 1;
              _X23 = v254 + 1;
            }
          }
          break;
        }
LABEL_312:
        int v242 = (char *)&_X23[v239];
        uint64_t v243 = &v240[v239];
        if (v224 <= (unint64_t)&_X23[v239]) {
          break;
        }
        unint64_t v244 = *(void *)v242 ^ *(void *)v243;
        if (v244)
        {
          unint64_t v245 = __clz(__rbit64(v244)) >> 3;
          unint64_t v246 = _X23 - a4;
          uint64_t v247 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 <= v227) {
            goto LABEL_315;
          }
          goto LABEL_343;
        }
        uint64_t v268 = 0;
        uint64_t v269 = (uint64_t)&_X23[v239 + 8];
        do
        {
          size_t v270 = (void *)(v269 + v268);
          if (v269 + v268 >= v224)
          {
            BOOL v257 = &_X23[v239 + 8 + v268];
            uint64_t v243 = &v240[v239 + 8 + v268];
            if ((unint64_t)v257 >= v225) {
              goto LABEL_334;
            }
            goto LABEL_332;
          }
          uint64_t v271 = *(void *)&v240[v239 + 8 + v268];
          v268 += 8;
          unint64_t v272 = *v270 ^ v271;
        }
        while (!v272);
        unint64_t v245 = v268 + (__clz(__rbit64(v272)) >> 3);
        unint64_t v246 = _X23 - a4;
        uint64_t v247 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X23 > v227) {
          goto LABEL_343;
        }
LABEL_315:
        _OWORD *v247 = *(_OWORD *)a4;
        uint64_t v248 = *(void *)(a2 + 24);
        if (v246 > 0x10)
        {
          float v249 = (_OWORD *)(v248 + 16);
          unint64_t v250 = v248 + v246;
          unint64_t v251 = (long long *)(a4 + 16);
          do
          {
            long long v252 = *v251++;
            *v249++ = v252;
          }
          while ((unint64_t)v249 < v250);
          goto LABEL_380;
        }
        *(void *)(a2 + 24) = v248 + v246;
        uint64_t v261 = *(void *)(a2 + 8);
LABEL_382:
        unint64_t v284 = v245 + v239;
        unint64_t v285 = v245 + v239 - 3;
        *(_WORD *)(v261 + 4) = v246;
        *(_DWORD *)uint64_t v261 = v237 + 1;
        if (v285 >= 0x10000)
        {
          unint64_t v286 = (unint64_t)(v261 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v286;
        }
        *(_WORD *)(v261 + 6) = v285;
        uint64_t v287 = v261 + 8;
        *(void *)(a2 + 8) = v261 + 8;
        a4 = &_X23[v284];
        if ((unint64_t)&_X23[v284] > v214)
        {
          uint64_t v24 = v26;
LABEL_305:
          double v217 = a4 + 1;
          uint64_t v26 = v241;
          _X23 = a4;
          if ((unint64_t)(a4 + 1) >= v214) {
            goto LABEL_556;
          }
        }
        else
        {
          *(_DWORD *)(v222 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v206 + 2 + v230)) >> v223)) = v230 + 2;
          *(_DWORD *)(v222 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(a4 - 2)) >> v223)) = a4 - 2 - v206;
          if (v26)
          {
            uint64_t v288 = v241;
            while (1)
            {
              uint64_t v24 = v288;
              uint64_t v288 = v26;
              if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v26]) {
                break;
              }
              int8x16_t v289 = (char *)(a4 + 4);
              int8x16_t v290 = &a4[-v26 + 4];
              if (v224 <= (unint64_t)(a4 + 4))
              {
                int8x16_t v293 = a4 + 4;
                if ((unint64_t)v289 >= v225) {
                  goto LABEL_395;
                }
LABEL_393:
                if (*(_DWORD *)v290 == *(_DWORD *)v293)
                {
                  v293 += 4;
                  v290 += 4;
                }
LABEL_395:
                if ((unint64_t)v293 >= v226)
                {
                  if (v293 < v8) {
                    goto LABEL_401;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v290 == *(unsigned __int16 *)v293)
                  {
                    v293 += 2;
                    v290 += 2;
                  }
                  if (v293 >= v8) {
                    goto LABEL_403;
                  }
LABEL_401:
                  if (*v290 == *v293) {
                    ++v293;
                  }
                }
LABEL_403:
                unint64_t v292 = v293 - (unsigned __int8 *)v289;
                goto LABEL_404;
              }
              unint64_t v291 = *(void *)v289 ^ *(void *)v290;
              if (v291)
              {
                unint64_t v292 = __clz(__rbit64(v291)) >> 3;
                goto LABEL_404;
              }
              unsigned long long v295 = (char *)(a4 + 12);
              do
              {
                unsigned long long v296 = &v295[v291];
                if ((unint64_t)&v295[v291] >= v224)
                {
                  int8x16_t v293 = &a4[v291 + 12];
                  int8x16_t v290 = &v293[-v26];
                  if ((unint64_t)v293 >= v225) {
                    goto LABEL_395;
                  }
                  goto LABEL_393;
                }
                uint64_t v297 = *(void *)&a4[v291 + 12 - v26];
                v291 += 8;
                unint64_t v298 = *(void *)v296 ^ v297;
              }
              while (!v298);
              unint64_t v292 = v291 + (__clz(__rbit64(v298)) >> 3);
LABEL_404:
              *(_DWORD *)(v222 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)a4) >> v223)) = a4 - v206;
              if ((unint64_t)a4 <= v227)
              {
                *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
                uint64_t v287 = *(void *)(a2 + 8);
              }
              *(_WORD *)(v287 + 4) = 0;
              *(_DWORD *)uint64_t v287 = 1;
              if (v292 + 1 >= 0x10000)
              {
                unint64_t v294 = (unint64_t)(v287 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v294;
              }
              a4 += v292 + 4;
              *(_WORD *)(v287 + 6) = v292 + 1;
              v287 += 8;
              *(void *)(a2 + 8) = v287;
              uint64_t v26 = v24;
              uint64_t v241 = v288;
              if ((unint64_t)a4 > v214) {
                goto LABEL_305;
              }
            }
            uint64_t v299 = v24;
            uint64_t v24 = v26;
            double v217 = a4 + 1;
            uint64_t v26 = v299;
            _X23 = a4;
            if ((unint64_t)(a4 + 1) >= v214) {
              goto LABEL_556;
            }
          }
          else
          {
            uint64_t v24 = 0;
            double v217 = a4 + 1;
            uint64_t v26 = v241;
            _X23 += v284;
            if ((unint64_t)(a4 + 1) >= v214) {
              goto LABEL_556;
            }
          }
        }
      }
      BOOL v257 = &_X23[v239];
      if ((unint64_t)v242 >= v225) {
        goto LABEL_334;
      }
LABEL_332:
      if (*(_DWORD *)v243 == *(_DWORD *)v257)
      {
        v257 += 4;
        v243 += 4;
      }
LABEL_334:
      if ((unint64_t)v257 >= v226)
      {
        if (v257 >= v8) {
          goto LABEL_342;
        }
      }
      else
      {
        if (*(unsigned __int16 *)v243 == *(unsigned __int16 *)v257)
        {
          v257 += 2;
          v243 += 2;
        }
        if (v257 >= v8)
        {
LABEL_342:
          unint64_t v245 = v257 - (unsigned __int8 *)v242;
          unint64_t v246 = _X23 - a4;
          uint64_t v247 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 <= v227) {
            goto LABEL_315;
          }
LABEL_343:
          if ((unint64_t)a4 <= v227)
          {
            int v259 = (char *)v247 + v227 - (void)a4;
            unint64_t v262 = a4;
            long long v263 = v247;
            do
            {
              long long v264 = *(_OWORD *)v262;
              v262 += 16;
              *v263++ = v264;
            }
            while (v263 < (_OWORD *)v259);
            long long v258 = (char *)(v8 - 32);
            if (v227 >= (unint64_t)_X23) {
              goto LABEL_380;
            }
          }
          else
          {
            long long v258 = (char *)a4;
            int v259 = v247;
            if (a4 >= _X23)
            {
LABEL_380:
              *(void *)(a2 + 24) += v246;
              uint64_t v261 = *(void *)(a2 + 8);
              if (v246 >= 0x10000)
              {
                unint64_t v283 = (unint64_t)(v261 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v283;
              }
              goto LABEL_382;
            }
          }
          if ((unint64_t)a4 <= v227) {
            uint64_t v265 = v8 - 32;
          }
          else {
            uint64_t v265 = a4;
          }
          unint64_t v266 = _X23 - v265;
          if ((unint64_t)(_X23 - v265) < 8)
          {
            int v267 = (unsigned __int8 *)v258;
            goto LABEL_379;
          }
          if ((unint64_t)((char *)v247 - (char *)a4) < 0x20)
          {
            int v267 = (unsigned __int8 *)v258;
            goto LABEL_379;
          }
          if (v266 >= 0x20)
          {
            unint64_t v273 = v266 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v274 = (long long *)(v258 + 16);
            unsigned int v275 = (_OWORD *)((char *)v247 + v265 - a4 + 16);
            unint64_t v276 = v266 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v277 = *v274;
              *(v275 - 1) = *(v274 - 1);
              *unsigned int v275 = v277;
              v274 += 2;
              v275 += 2;
              v276 -= 32;
            }
            while (v276);
            if (v266 == v273) {
              goto LABEL_380;
            }
            if ((v266 & 0x18) == 0)
            {
              int v267 = (unsigned __int8 *)&v258[v273];
              v259 += v273;
              do
              {
LABEL_379:
                char v282 = *v267++;
                *v259++ = v282;
              }
              while (v267 < _X23);
              goto LABEL_380;
            }
          }
          else
          {
            unint64_t v273 = 0;
          }
          v259 += v266 & 0xFFFFFFFFFFFFFFF8;
          int v267 = (unsigned __int8 *)&v258[v266 & 0xFFFFFFFFFFFFFFF8];
          int v278 = &v258[v273];
          unsigned int v279 = (void *)((char *)v247 + &v265[v273] - a4);
          unint64_t v280 = v273 - (v266 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v281 = *(void *)v278;
            v278 += 8;
            *v279++ = v281;
            v280 += 8;
          }
          while (v280);
          if (v266 == (v266 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_380;
          }
          goto LABEL_379;
        }
      }
      if (*v243 == *v257) {
        ++v257;
      }
      goto LABEL_342;
    case 7:
      if (*(_DWORD *)(a1 + 212)) {
        int v6 = *(_DWORD *)(a1 + 212);
      }
      else {
        int v6 = 1;
      }
      uint64_t v7 = *(void *)(a1 + 8);
      unint64_t v8 = &a4[a5];
      int v9 = a4 + a5 - v7;
      unsigned int v10 = *(_DWORD *)(a1 + 24);
      unsigned int v11 = 1 << *(_DWORD *)(a1 + 192);
      BOOL v12 = v9 - v10 > v11;
      LODWORD(v13) = v9 - v11;
      BOOL v14 = *(_DWORD *)(a1 + 32) == 0;
      if (v14 && v12) {
        uint64_t v13 = v13;
      }
      else {
        uint64_t v13 = v10;
      }
      unsigned int v408 = v13;
      long long v15 = (unsigned __int8 *)(v7 + v13);
      unint64_t v16 = (unint64_t)(v8 - 8);
      unsigned int v17 = *a3;
      unsigned int v18 = a3[1];
      unint64_t v404 = (unint64_t)v15;
      if (v15 == a4) {
        _X23 = a4 + 1;
      }
      else {
        _X23 = a4;
      }
      int v20 = _X23 + 1;
      BOOL v21 = _X23 - v7 - v10 > v11;
      int v22 = _X23 - v7 - v11;
      if (!v14 || !v21) {
        int v22 = *(_DWORD *)(a1 + 24);
      }
      unsigned int v23 = _X23 - v7 - v22;
      if (v18 <= v23) {
        uint64_t v24 = v18;
      }
      else {
        uint64_t v24 = 0;
      }
      if (v18 <= v23) {
        unsigned int v25 = 0;
      }
      else {
        unsigned int v25 = a3[1];
      }
      if (v17 <= v23) {
        uint64_t v26 = v17;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v17 <= v23) {
        unsigned int v17 = v25;
      }
      if ((unint64_t)v20 >= v16) {
        goto LABEL_557;
      }
      unsigned int v398 = v17;
      uint64_t v27 = *(void *)(a1 + 48);
      int8x8_t v399 = a3;
      uint64_t v400 = (v6 + 1);
      int v28 = 64 - *(_DWORD *)(a1 + 200);
      unint64_t v29 = (unint64_t)(v8 - 7);
      unint64_t v30 = (unint64_t)(v8 - 3);
      unint64_t v31 = (unint64_t)(v8 - 1);
      unint64_t v32 = (unint64_t)(v8 - 32);
      while (1)
      {
        uint64_t v33 = *(void *)_X23;
        uint64_t v34 = *(void *)v20;
        unsigned int v35 = _X23 - v7;
        unint64_t v36 = 4 * ((0xCF1BBCDCBFA56300 * *(void *)_X23) >> v28);
        uint64_t v37 = *(unsigned int *)(v27 + v36);
        unint64_t v38 = 4 * ((0xCF1BBCDCBFA56300 * *(void *)v20) >> v28);
        uint64_t v39 = *(unsigned int *)(v27 + v38);
        __asm { PRFM            #0, [X23,#0x100] }
        *(_DWORD *)(v27 + v36) = _X23 - v7;
        *(_DWORD *)(v27 + v38) = v20 - v7;
        if (!v26) {
          goto LABEL_567;
        }
LABEL_30:
        while (2)
        {
          uint64_t v45 = &_X23[-v26 + 2];
          if (*(_DWORD *)v45 == *(_DWORD *)(_X23 + 2))
          {
            int v46 = 0;
            BOOL v47 = _X23[1] == *(v45 - 1);
            uint64_t v48 = _X23[1] == *(v45 - 1) ? 5 : 4;
            _X23 = &_X23[-v47 + 2];
            int v49 = &v45[-v47];
            uint64_t v50 = v26;
            uint64_t v26 = v24;
          }
          else
          {
LABEL_567:
            if (v37 <= v408
              || (int v49 = (unsigned __int8 *)(v7 + v37), *(_DWORD *)(v7 + v37) != v33))
            {
              if (v39 <= v408
                || (int v49 = (unsigned __int8 *)(v7 + v39), *(_DWORD *)(v7 + v39) != v34))
              {
                uint64_t v70 = v400 + ((unint64_t)(_X23 - a4) >> 7);
                _X23 += v70;
                v20 += v70;
                if ((unint64_t)v20 >= v16) {
                  goto LABEL_556;
                }
                continue;
              }
              _X23 = v20;
            }
            uint64_t v50 = (_X23 - v49);
            int v46 = v50 + 2;
            if (_X23 <= a4 || (unint64_t)v49 <= v404)
            {
              uint64_t v48 = 4;
            }
            else
            {
              uint64_t v62 = v49 - 1;
              uint64_t v63 = _X23 - 1;
              uint64_t v48 = 4;
              while (*v63 == *v62)
              {
                ++v48;
                unsigned int v64 = v62 - 1;
                unint64_t v65 = v63 - 1;
                if (v63 > a4)
                {
                  --v63;
                  BOOL v66 = (unint64_t)v62-- > v404;
                  if (v66) {
                    continue;
                  }
                }
                int v49 = v64 + 1;
                _X23 = v65 + 1;
                goto LABEL_36;
              }
              int v49 = v62 + 1;
              _X23 = v63 + 1;
            }
          }
          break;
        }
LABEL_36:
        uint64_t v51 = (char *)&_X23[v48];
        unsigned int v52 = &v49[v48];
        if (v29 <= (unint64_t)&_X23[v48])
        {
          unint64_t v67 = &_X23[v48];
          if ((unint64_t)v51 < v30)
          {
LABEL_56:
            if (*(_DWORD *)v52 == *(_DWORD *)v67)
            {
              v67 += 4;
              v52 += 4;
            }
          }
        }
        else
        {
          unint64_t v53 = *(void *)v51 ^ *(void *)v52;
          if (v53)
          {
            unint64_t v54 = __clz(__rbit64(v53)) >> 3;
            unint64_t v55 = _X23 - a4;
            uint64_t v56 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)_X23 <= v32) {
              goto LABEL_39;
            }
            goto LABEL_67;
          }
          uint64_t v78 = 0;
          uint64_t v79 = (uint64_t)&_X23[v48 + 8];
          while (1)
          {
            uint64_t v80 = (void *)(v79 + v78);
            if (v79 + v78 >= v29) {
              break;
            }
            uint64_t v81 = *(void *)&v49[v48 + 8 + v78];
            v78 += 8;
            unint64_t v82 = *v80 ^ v81;
            if (v82)
            {
              unint64_t v54 = v78 + (__clz(__rbit64(v82)) >> 3);
              unint64_t v55 = _X23 - a4;
              uint64_t v56 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)_X23 > v32) {
                goto LABEL_67;
              }
              goto LABEL_39;
            }
          }
          unint64_t v67 = &_X23[v48 + 8 + v78];
          unsigned int v52 = &v49[v48 + 8 + v78];
          if ((unint64_t)v67 < v30) {
            goto LABEL_56;
          }
        }
        if ((unint64_t)v67 >= v31) {
          break;
        }
        if (*(unsigned __int16 *)v52 == *(unsigned __int16 *)v67)
        {
          v67 += 2;
          v52 += 2;
        }
        if (v67 < v8) {
          goto LABEL_64;
        }
LABEL_66:
        unint64_t v54 = v67 - (unsigned __int8 *)v51;
        unint64_t v55 = _X23 - a4;
        uint64_t v56 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X23 <= v32)
        {
LABEL_39:
          *uint64_t v56 = *(_OWORD *)a4;
          uint64_t v57 = *(void *)(a2 + 24);
          if (v55 <= 0x10)
          {
            *(void *)(a2 + 24) = v57 + v55;
            uint64_t v71 = *(void *)(a2 + 8);
            goto LABEL_106;
          }
          uint64_t v58 = (_OWORD *)(v57 + 16);
          unint64_t v59 = v57 + v55;
          uint64_t v60 = (long long *)(a4 + 16);
          do
          {
            long long v61 = *v60++;
            *v58++ = v61;
          }
          while ((unint64_t)v58 < v59);
          goto LABEL_104;
        }
LABEL_67:
        if ((unint64_t)a4 <= v32)
        {
          uint32x4_t v69 = (char *)v56 + v32 - (void)a4;
          unsigned int v72 = a4;
          unsigned int v73 = v56;
          do
          {
            long long v74 = *(_OWORD *)v72;
            v72 += 16;
            *v73++ = v74;
          }
          while (v73 < (_OWORD *)v69);
          uint64_t v68 = (char *)(v8 - 32);
          if (v32 >= (unint64_t)_X23) {
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v68 = (char *)a4;
          uint32x4_t v69 = v56;
          if (a4 >= _X23) {
            goto LABEL_104;
          }
        }
        if ((unint64_t)a4 <= v32) {
          uint64_t v75 = v8 - 32;
        }
        else {
          uint64_t v75 = a4;
        }
        unint64_t v76 = _X23 - v75;
        if ((unint64_t)(_X23 - v75) < 8)
        {
          unint64_t v77 = (unsigned __int8 *)v68;
          goto LABEL_103;
        }
        if ((unint64_t)((char *)v56 - (char *)a4) < 0x20)
        {
          unint64_t v77 = (unsigned __int8 *)v68;
          goto LABEL_103;
        }
        if (v76 >= 0x20)
        {
          unint64_t v83 = v76 & 0xFFFFFFFFFFFFFFE0;
          unsigned int v84 = (long long *)(v68 + 16);
          unsigned int v85 = (_OWORD *)((char *)v56 + v75 - a4 + 16);
          unint64_t v86 = v76 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v87 = *v84;
            *(v85 - 1) = *(v84 - 1);
            *unsigned int v85 = v87;
            v84 += 2;
            v85 += 2;
            v86 -= 32;
          }
          while (v86);
          if (v76 == v83) {
            goto LABEL_104;
          }
          if ((v76 & 0x18) == 0)
          {
            unint64_t v77 = (unsigned __int8 *)&v68[v83];
            v69 += v83;
            do
            {
LABEL_103:
              char v92 = *v77++;
              *v69++ = v92;
            }
            while (v77 < _X23);
            goto LABEL_104;
          }
        }
        else
        {
          unint64_t v83 = 0;
        }
        v69 += v76 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v77 = (unsigned __int8 *)&v68[v76 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v88 = &v68[v83];
        unsigned int v89 = (void *)((char *)v56 + &v75[v83] - a4);
        unint64_t v90 = v83 - (v76 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v91 = *(void *)v88;
          v88 += 8;
          *v89++ = v91;
          v90 += 8;
        }
        while (v90);
        if (v76 != (v76 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_103;
        }
LABEL_104:
        *(void *)(a2 + 24) += v55;
        uint64_t v71 = *(void *)(a2 + 8);
        if (v55 >= 0x10000)
        {
          unint64_t v93 = (unint64_t)(v71 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v93;
        }
LABEL_106:
        unint64_t v94 = v54 + v48;
        unint64_t v95 = v54 + v48 - 3;
        *(_WORD *)(v71 + 4) = v55;
        *(_DWORD *)uint64_t v71 = v46 + 1;
        if (v95 >= 0x10000)
        {
          unint64_t v96 = (unint64_t)(v71 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v96;
        }
        *(_WORD *)(v71 + 6) = v95;
        uint64_t v97 = v71 + 8;
        *(void *)(a2 + 8) = v71 + 8;
        a4 = &_X23[v94];
        if ((unint64_t)&_X23[v94] <= v16)
        {
          *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v7 + 2 + v35)) >> v28)) = v35 + 2;
          *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(a4 - 2)) >> v28)) = a4 - 2 - v7;
          if (!v26)
          {
            uint64_t v24 = 0;
            int v20 = a4 + 1;
            uint64_t v26 = v50;
            _X23 += v94;
            if ((unint64_t)(a4 + 1) >= v16) {
              goto LABEL_556;
            }
            goto LABEL_30;
          }
          uint64_t v98 = v50;
          while (2)
          {
            uint64_t v24 = v98;
            uint64_t v98 = v26;
            if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
            {
              uint64_t v109 = v24;
              uint64_t v24 = v26;
              int v20 = a4 + 1;
              uint64_t v26 = v109;
              _X23 = a4;
              if ((unint64_t)(a4 + 1) >= v16) {
                goto LABEL_556;
              }
              goto LABEL_30;
            }
            unsigned int v99 = (char *)(a4 + 4);
            uint64_t v100 = &a4[-v26 + 4];
            if (v29 <= (unint64_t)(a4 + 4))
            {
              uint64_t v103 = a4 + 4;
              if ((unint64_t)v99 >= v30) {
                goto LABEL_119;
              }
            }
            else
            {
              unint64_t v101 = *(void *)v99 ^ *(void *)v100;
              if (v101)
              {
                unint64_t v102 = __clz(__rbit64(v101)) >> 3;
                goto LABEL_128;
              }
              uint64_t v105 = (char *)(a4 + 12);
              while (1)
              {
                unsigned int v106 = &v105[v101];
                if ((unint64_t)&v105[v101] >= v29) {
                  break;
                }
                uint64_t v107 = *(void *)&a4[v101 + 12 - v26];
                v101 += 8;
                unint64_t v108 = *(void *)v106 ^ v107;
                if (v108)
                {
                  unint64_t v102 = v101 + (__clz(__rbit64(v108)) >> 3);
                  goto LABEL_128;
                }
              }
              uint64_t v103 = &a4[v101 + 12];
              uint64_t v100 = &v103[-v26];
              if ((unint64_t)v103 >= v30)
              {
LABEL_119:
                if ((unint64_t)v103 >= v31)
                {
                  if (v103 < v8) {
                    goto LABEL_125;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v100 == *(unsigned __int16 *)v103)
                  {
                    v103 += 2;
                    v100 += 2;
                  }
                  if (v103 >= v8) {
                    goto LABEL_127;
                  }
LABEL_125:
                  if (*v100 == *v103) {
                    ++v103;
                  }
                }
LABEL_127:
                unint64_t v102 = v103 - (unsigned __int8 *)v99;
LABEL_128:
                *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)a4) >> v28)) = a4 - v7;
                if ((unint64_t)a4 <= v32)
                {
                  *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
                  uint64_t v97 = *(void *)(a2 + 8);
                }
                *(_WORD *)(v97 + 4) = 0;
                *(_DWORD *)uint64_t v97 = 1;
                if (v102 + 1 >= 0x10000)
                {
                  unint64_t v104 = (unint64_t)(v97 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v104;
                }
                a4 += v102 + 4;
                *(_WORD *)(v97 + 6) = v102 + 1;
                v97 += 8;
                *(void *)(a2 + 8) = v97;
                uint64_t v26 = v24;
                uint64_t v50 = v98;
                if ((unint64_t)a4 > v16) {
                  goto LABEL_29;
                }
                continue;
              }
            }
            break;
          }
          if (*(_DWORD *)v100 == *(_DWORD *)v103)
          {
            v103 += 4;
            v100 += 4;
          }
          goto LABEL_119;
        }
        uint64_t v24 = v26;
LABEL_29:
        int v20 = a4 + 1;
        uint64_t v26 = v50;
        _X23 = a4;
        if ((unint64_t)(a4 + 1) >= v16) {
          goto LABEL_556;
        }
      }
      if (v67 >= v8) {
        goto LABEL_66;
      }
LABEL_64:
      if (*v52 == *v67) {
        ++v67;
      }
      goto LABEL_66;
  }
  if (*(_DWORD *)(a1 + 212)) {
    int v300 = *(_DWORD *)(a1 + 212);
  }
  else {
    int v300 = 1;
  }
  uint64_t v301 = *(void *)(a1 + 8);
  unint64_t v8 = &a4[a5];
  int v302 = a4 + a5 - v301;
  unsigned int v303 = *(_DWORD *)(a1 + 24);
  unsigned int v304 = 1 << *(_DWORD *)(a1 + 192);
  BOOL v305 = v302 - v303 > v304;
  LODWORD(v306) = v302 - v304;
  BOOL v307 = *(_DWORD *)(a1 + 32) == 0;
  if (v307 && v305) {
    uint64_t v306 = v306;
  }
  else {
    uint64_t v306 = v303;
  }
  unsigned int v411 = v306;
  uint64_t v308 = (unsigned __int8 *)(v301 + v306);
  unint64_t v309 = (unint64_t)(v8 - 8);
  unsigned int v17 = *a3;
  unsigned int v310 = a3[1];
  unint64_t v407 = (unint64_t)v308;
  if (v308 == a4) {
    _X23 = a4 + 1;
  }
  else {
    _X23 = a4;
  }
  int v312 = _X23 + 1;
  BOOL v313 = _X23 - v301 - v303 > v304;
  int v314 = _X23 - v301 - v304;
  if (!v307 || !v313) {
    int v314 = *(_DWORD *)(a1 + 24);
  }
  unsigned int v315 = _X23 - v301 - v314;
  if (v310 <= v315) {
    uint64_t v24 = v310;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v310 <= v315) {
    unsigned int v316 = 0;
  }
  else {
    unsigned int v316 = a3[1];
  }
  if (v17 <= v315) {
    uint64_t v26 = v17;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v17 <= v315) {
    unsigned int v17 = v316;
  }
  if ((unint64_t)v312 >= v309) {
    goto LABEL_557;
  }
  unsigned int v398 = v17;
  uint64_t v317 = *(void *)(a1 + 48);
  int8x8_t v399 = a3;
  uint64_t v403 = (v300 + 1);
  int v318 = 32 - *(_DWORD *)(a1 + 200);
  unint64_t v319 = (unint64_t)(v8 - 7);
  unint64_t v320 = (unint64_t)(v8 - 3);
  unint64_t v321 = (unint64_t)(v8 - 1);
  unint64_t v322 = (unint64_t)(v8 - 32);
  while (1)
  {
LABEL_444:
    int v323 = *(_DWORD *)_X23;
    int v324 = *(_DWORD *)v312;
    unsigned int v325 = _X23 - v301;
    uint64_t v326 = 4 * ((-1640531535 * *(_DWORD *)_X23) >> v318);
    uint64_t v327 = *(unsigned int *)(v317 + v326);
    uint64_t v328 = 4 * ((-1640531535 * *(_DWORD *)v312) >> v318);
    uint64_t v329 = *(unsigned int *)(v317 + v328);
    __asm { PRFM            #0, [X23,#0x100] }
    *(_DWORD *)(v317 + v326) = _X23 - v301;
    *(_DWORD *)(v317 + v328) = v312 - v301;
    if (v26)
    {
      unsigned int v331 = &_X23[-v26 + 2];
      if (*(_DWORD *)v331 == *(_DWORD *)(_X23 + 2))
      {
        int v332 = 0;
        BOOL v333 = _X23[1] == *(v331 - 1);
        if (_X23[1] == *(v331 - 1)) {
          uint64_t v334 = 5;
        }
        else {
          uint64_t v334 = 4;
        }
        _X23 = &_X23[-v333 + 2];
        int32x4_t v335 = &v331[-v333];
        uint64_t v336 = v26;
        uint64_t v26 = v24;
        goto LABEL_450;
      }
    }
    if (v327 <= v411) {
      break;
    }
    int32x4_t v335 = (unsigned __int8 *)(v301 + v327);
    if (*(_DWORD *)(v301 + v327) != v323) {
      break;
    }
LABEL_462:
    uint64_t v336 = (_X23 - v335);
    int v332 = v336 + 2;
    if (_X23 <= a4 || (unint64_t)v335 <= v407)
    {
      uint64_t v334 = 4;
    }
    else
    {
      int64x2_t v348 = v335 - 1;
      int64x2_t v349 = _X23 - 1;
      uint64_t v334 = 4;
      while (*v349 == *v348)
      {
        ++v334;
        int64x2_t v350 = v348 - 1;
        int64x2_t v351 = v349 - 1;
        if (v349 > a4)
        {
          --v349;
          BOOL v66 = (unint64_t)v348-- > v407;
          if (v66) {
            continue;
          }
        }
        int32x4_t v335 = v350 + 1;
        _X23 = v351 + 1;
        goto LABEL_450;
      }
      int32x4_t v335 = v348 + 1;
      _X23 = v349 + 1;
    }
LABEL_450:
    uint64_t v337 = (char *)&_X23[v334];
    unint64_t v338 = &v335[v334];
    if (v319 <= (unint64_t)&_X23[v334])
    {
      int64x2_t v352 = &_X23[v334];
      if ((unint64_t)v337 < v320)
      {
LABEL_470:
        if (*(_DWORD *)v338 == *(_DWORD *)v352)
        {
          v352 += 4;
          v338 += 4;
        }
      }
    }
    else
    {
      unint64_t v339 = *(void *)v337 ^ *(void *)v338;
      if (v339)
      {
        unint64_t v340 = __clz(__rbit64(v339)) >> 3;
        unint64_t v341 = _X23 - a4;
        unint64_t v342 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X23 <= v322) {
          goto LABEL_453;
        }
        goto LABEL_481;
      }
      uint64_t v363 = 0;
      uint64_t v364 = (uint64_t)&_X23[v334 + 8];
      while (1)
      {
        int32x4_t v365 = (void *)(v364 + v363);
        if (v364 + v363 >= v319) {
          break;
        }
        uint64_t v366 = *(void *)&v335[v334 + 8 + v363];
        v363 += 8;
        unint64_t v367 = *v365 ^ v366;
        if (v367)
        {
          unint64_t v340 = v363 + (__clz(__rbit64(v367)) >> 3);
          unint64_t v341 = _X23 - a4;
          unint64_t v342 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)_X23 > v322) {
            goto LABEL_481;
          }
          goto LABEL_453;
        }
      }
      int64x2_t v352 = &_X23[v334 + 8 + v363];
      unint64_t v338 = &v335[v334 + 8 + v363];
      if ((unint64_t)v352 < v320) {
        goto LABEL_470;
      }
    }
    if ((unint64_t)v352 >= v321)
    {
      if (v352 >= v8) {
        goto LABEL_480;
      }
LABEL_478:
      if (*v338 == *v352) {
        ++v352;
      }
      goto LABEL_480;
    }
    if (*(unsigned __int16 *)v338 == *(unsigned __int16 *)v352)
    {
      v352 += 2;
      v338 += 2;
    }
    if (v352 < v8) {
      goto LABEL_478;
    }
LABEL_480:
    unint64_t v340 = v352 - (unsigned __int8 *)v337;
    unint64_t v341 = _X23 - a4;
    unint64_t v342 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)_X23 <= v322)
    {
LABEL_453:
      *unint64_t v342 = *(_OWORD *)a4;
      uint64_t v343 = *(void *)(a2 + 24);
      if (v341 <= 0x10)
      {
        *(void *)(a2 + 24) = v343 + v341;
        uint64_t v356 = *(void *)(a2 + 8);
        goto LABEL_520;
      }
      int v344 = (_OWORD *)(v343 + 16);
      unint64_t v345 = v343 + v341;
      int64x2_t v346 = (long long *)(a4 + 16);
      do
      {
        long long v347 = *v346++;
        *v344++ = v347;
      }
      while ((unint64_t)v344 < v345);
      goto LABEL_518;
    }
LABEL_481:
    if ((unint64_t)a4 <= v322)
    {
      int64x2_t v354 = (char *)v342 + v322 - (void)a4;
      int64x2_t v357 = a4;
      int64x2_t v358 = v342;
      do
      {
        long long v359 = *(_OWORD *)v357;
        v357 += 16;
        *v358++ = v359;
      }
      while (v358 < (_OWORD *)v354);
      uint64_t v353 = (char *)(v8 - 32);
      if (v322 >= (unint64_t)_X23) {
        goto LABEL_518;
      }
    }
    else
    {
      uint64_t v353 = (char *)a4;
      int64x2_t v354 = v342;
      if (a4 >= _X23) {
        goto LABEL_518;
      }
    }
    if ((unint64_t)a4 <= v322) {
      unsigned int v360 = v8 - 32;
    }
    else {
      unsigned int v360 = a4;
    }
    unint64_t v361 = _X23 - v360;
    if ((unint64_t)(_X23 - v360) < 8)
    {
      unsigned long long v362 = (unsigned __int8 *)v353;
      goto LABEL_517;
    }
    if ((unint64_t)((char *)v342 - (char *)a4) < 0x20)
    {
      unsigned long long v362 = (unsigned __int8 *)v353;
      goto LABEL_517;
    }
    if (v361 >= 0x20)
    {
      unint64_t v368 = v361 & 0xFFFFFFFFFFFFFFE0;
      uint32x4_t v369 = (long long *)(v353 + 16);
      uint32x4_t v370 = (_OWORD *)((char *)v342 + v360 - a4 + 16);
      unint64_t v371 = v361 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v372 = *v369;
        *(v370 - 1) = *(v369 - 1);
        *uint32x4_t v370 = v372;
        v369 += 2;
        v370 += 2;
        v371 -= 32;
      }
      while (v371);
      if (v361 == v368) {
        goto LABEL_518;
      }
      if ((v361 & 0x18) == 0)
      {
        unsigned long long v362 = (unsigned __int8 *)&v353[v368];
        v354 += v368;
        do
        {
LABEL_517:
          char v377 = *v362++;
          *v354++ = v377;
        }
        while (v362 < _X23);
        goto LABEL_518;
      }
    }
    else
    {
      unint64_t v368 = 0;
    }
    v354 += v361 & 0xFFFFFFFFFFFFFFF8;
    unsigned long long v362 = (unsigned __int8 *)&v353[v361 & 0xFFFFFFFFFFFFFFF8];
    uint32x4_t v373 = &v353[v368];
    uint32x4_t v374 = (void *)((char *)v342 + &v360[v368] - a4);
    unint64_t v375 = v368 - (v361 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v376 = *(void *)v373;
      v373 += 8;
      *v374++ = v376;
      v375 += 8;
    }
    while (v375);
    if (v361 != (v361 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_517;
    }
LABEL_518:
    *(void *)(a2 + 24) += v341;
    uint64_t v356 = *(void *)(a2 + 8);
    if (v341 >= 0x10000)
    {
      unint64_t v378 = (unint64_t)(v356 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v378;
    }
LABEL_520:
    unint64_t v379 = v340 + v334;
    unint64_t v380 = v340 + v334 - 3;
    *(_WORD *)(v356 + 4) = v341;
    *(_DWORD *)uint64_t v356 = v332 + 1;
    if (v380 >= 0x10000)
    {
      unint64_t v381 = (unint64_t)(v356 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v381;
    }
    *(_WORD *)(v356 + 6) = v380;
    uint64_t v382 = v356 + 8;
    *(void *)(a2 + 8) = v356 + 8;
    a4 = &_X23[v379];
    if ((unint64_t)&_X23[v379] <= v309)
    {
      *(_DWORD *)(v317 + 4 * ((-1640531535 * *(_DWORD *)(v301 + 2 + v325)) >> v318)) = v325 + 2;
      *(_DWORD *)(v317 + 4 * ((-1640531535 * *(_DWORD *)(a4 - 2)) >> v318)) = a4 - 2 - v301;
      if (!v26)
      {
        uint64_t v24 = 0;
        int v312 = a4 + 1;
        uint64_t v26 = v336;
        _X23 += v379;
        if ((unint64_t)(a4 + 1) < v309) {
          continue;
        }
        goto LABEL_556;
      }
      uint64_t v383 = v336;
LABEL_526:
      uint64_t v24 = v383;
      uint64_t v383 = v26;
      int v384 = *(_DWORD *)a4;
      if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
      {
        uint64_t v395 = v24;
        uint64_t v24 = v26;
        int v312 = a4 + 1;
        uint64_t v26 = v395;
        _X23 = a4;
        if ((unint64_t)(a4 + 1) >= v309) {
          goto LABEL_556;
        }
        continue;
      }
      int64x2_t v385 = (char *)(a4 + 4);
      int64x2_t v386 = &a4[-v26 + 4];
      if (v319 <= (unint64_t)(a4 + 4))
      {
        int32x4_t v389 = a4 + 4;
        if ((unint64_t)v385 < v320)
        {
LABEL_532:
          if (*(_DWORD *)v386 == *(_DWORD *)v389)
          {
            v389 += 4;
            v386 += 4;
          }
        }
      }
      else
      {
        unint64_t v387 = *(void *)v385 ^ *(void *)v386;
        if (v387)
        {
          unint64_t v388 = __clz(__rbit64(v387)) >> 3;
          *(_DWORD *)(v317 + 4 * ((-1640531535 * v384) >> v318)) = a4 - v301;
          if ((unint64_t)a4 > v322)
          {
LABEL_544:
            *(_WORD *)(v382 + 4) = 0;
            *(_DWORD *)uint64_t v382 = 1;
            if (v388 + 1 >= 0x10000)
            {
              unint64_t v390 = (unint64_t)(v382 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v390;
            }
            a4 += v388 + 4;
            *(_WORD *)(v382 + 6) = v388 + 1;
            v382 += 8;
            *(void *)(a2 + 8) = v382;
            uint64_t v26 = v24;
            uint64_t v336 = v383;
            if ((unint64_t)a4 > v309) {
              goto LABEL_443;
            }
            goto LABEL_526;
          }
LABEL_543:
          *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
          uint64_t v382 = *(void *)(a2 + 8);
          goto LABEL_544;
        }
        uint32x4_t v391 = (char *)(a4 + 12);
        while (1)
        {
          uint64_t v392 = &v391[v387];
          if ((unint64_t)&v391[v387] >= v319) {
            break;
          }
          uint64_t v393 = *(void *)&a4[v387 + 12 - v26];
          v387 += 8;
          unint64_t v394 = *(void *)v392 ^ v393;
          if (v394)
          {
            unint64_t v388 = v387 + (__clz(__rbit64(v394)) >> 3);
            *(_DWORD *)(v317 + 4 * ((-1640531535 * v384) >> v318)) = a4 - v301;
            if ((unint64_t)a4 <= v322) {
              goto LABEL_543;
            }
            goto LABEL_544;
          }
        }
        int32x4_t v389 = &a4[v387 + 12];
        int64x2_t v386 = &v389[-v26];
        if ((unint64_t)v389 < v320) {
          goto LABEL_532;
        }
      }
      if ((unint64_t)v389 >= v321)
      {
        if (v389 >= v8) {
          goto LABEL_542;
        }
      }
      else
      {
        if (*(unsigned __int16 *)v386 == *(unsigned __int16 *)v389)
        {
          v389 += 2;
          v386 += 2;
        }
        if (v389 >= v8)
        {
LABEL_542:
          unint64_t v388 = v389 - (unsigned __int8 *)v385;
          *(_DWORD *)(v317 + 4 * ((-1640531535 * v384) >> v318)) = a4 - v301;
          if ((unint64_t)a4 > v322) {
            goto LABEL_544;
          }
          goto LABEL_543;
        }
      }
      if (*v386 == *v389) {
        ++v389;
      }
      goto LABEL_542;
    }
    uint64_t v24 = v26;
LABEL_443:
    int v312 = a4 + 1;
    uint64_t v26 = v336;
    _X23 = a4;
    if ((unint64_t)(a4 + 1) >= v309) {
      goto LABEL_556;
    }
  }
  if (v329 > v411)
  {
    int32x4_t v335 = (unsigned __int8 *)(v301 + v329);
    if (*(_DWORD *)(v301 + v329) == v324)
    {
      _X23 = v312;
      goto LABEL_462;
    }
  }
  uint64_t v355 = v403 + ((unint64_t)(_X23 - a4) >> 7);
  _X23 += v355;
  v312 += v355;
  if ((unint64_t)v312 < v309) {
    goto LABEL_444;
  }
LABEL_556:
  a3 = v399;
  unsigned int v17 = v398;
LABEL_557:
  if (v26) {
    unsigned int v396 = v26;
  }
  else {
    unsigned int v396 = v17;
  }
  if (v24) {
    unsigned int v17 = v24;
  }
  *a3 = v396;
  a3[1] = v17;
  return v8 - a4;
}

int64_t ZSTD_compressBlock_doubleFast(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a1 + 208);
  if (v5 == 5)
  {
    uint64_t v172 = *(void *)(a1 + 8);
    uint64_t v7 = &a4[a5];
    int v173 = a4 + a5 - v172;
    unsigned int v174 = *(_DWORD *)(a1 + 24);
    unsigned int v175 = 1 << *(_DWORD *)(a1 + 192);
    BOOL v176 = v173 - v174 > v175;
    LODWORD(v177) = v173 - v175;
    BOOL v178 = *(_DWORD *)(a1 + 32) == 0;
    if (v178 && v176) {
      uint64_t v177 = v177;
    }
    else {
      uint64_t v177 = v174;
    }
    unsigned int v674 = v177;
    unint64_t v179 = v172 + v177;
    unint64_t v180 = (unint64_t)(v7 - 8);
    unsigned int v181 = *a3;
    unsigned int v182 = a3[1];
    if (a4 == v179) {
      int32x4_t v183 = (unsigned __int8 *)(a4 + 1);
    }
    else {
      int32x4_t v183 = (unsigned __int8 *)a4;
    }
    BOOL v184 = v183 - v172 - v174 > v175;
    int v185 = v183 - v172 - v175;
    if (!v178 || !v184) {
      int v185 = *(_DWORD *)(a1 + 24);
    }
    unsigned int v186 = v183 - v172 - v185;
    if (v182 <= v186) {
      int v22 = (unsigned __int8 *)v182;
    }
    else {
      int v22 = 0;
    }
    if (v182 <= v186) {
      unsigned int v187 = 0;
    }
    else {
      unsigned int v187 = a3[1];
    }
    BOOL v188 = v181 > v186;
    if (v181 <= v186) {
      unsigned int v25 = v187;
    }
    else {
      unsigned int v25 = *a3;
    }
    if (v188) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = (unsigned __int8 *)v181;
    }
    if ((unint64_t)v183 >= v180) {
      goto LABEL_965;
    }
    unsigned int v651 = v25;
    unint64_t v669 = v179;
    v672 = a3;
    uint64_t v189 = *(void *)(a1 + 48);
    int v190 = 64 - *(_DWORD *)(a1 + 200);
    int v191 = 64 - *(_DWORD *)(a1 + 196);
    unint64_t v192 = (unint64_t)(v7 - 7);
    unint64_t v193 = (unint64_t)(v7 - 3);
    unint64_t v194 = (unint64_t)(v7 - 1);
    uint64_t v195 = *(void *)(a1 + 64);
    unint64_t v196 = (unint64_t)(v7 - 32);
    uint64_t v648 = v172 + 12;
    uint64_t v665 = v172 - 1;
    uint64_t v653 = v172 + 16;
    while (1)
    {
      uint64_t v197 = *(void *)v183;
      unint64_t v198 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v183) >> v190);
      uint64_t v199 = *(unsigned int *)(v189 + v198);
      int v200 = v183 - v172;
      unint64_t v201 = 4 * ((0xCF1BBCDCBB000000 * *(void *)v183) >> v191);
      uint64_t v202 = *(unsigned int *)(v195 + v201);
      *(_DWORD *)(v195 + v201) = v183 - v172;
      *(_DWORD *)(v189 + v198) = v183 - v172;
      unint64_t v203 = (char *)(v183 + 1);
      if (!v26 || *(_DWORD *)&v203[-v26] != *(_DWORD *)(v183 + 1))
      {
        if (v199 > v674)
        {
          uint64_t v215 = v172 + v199;
          if (*(void *)(v172 + v199) == v197)
          {
            double v216 = v183 + 8;
            double v217 = (_DWORD *)(v215 + 8);
            if (v192 <= (unint64_t)(v183 + 8))
            {
              unint64_t v272 = v183 + 8;
              unint64_t v219 = v669;
              if ((unint64_t)v216 < v193)
              {
LABEL_363:
                if (*v217 == *(_DWORD *)v272)
                {
                  v272 += 4;
                  ++v217;
                }
              }
            }
            else
            {
              unint64_t v218 = *v216 ^ *(void *)v217;
              unint64_t v219 = v669;
              if (v218)
              {
                uint64_t v220 = (__clz(__rbit64(v218)) >> 3) + 8;
                unsigned int v221 = &v183[-v215];
                if (v183 <= (unsigned __int8 *)a4) {
                  goto LABEL_418;
                }
LABEL_374:
                unint64_t v273 = v183 - 1;
                uint64_t v274 = (unsigned __int8 *)(v665 + v199);
                while (*v273 == *v274)
                {
                  ++v220;
                  unsigned int v275 = v273 - 1;
                  if ((unint64_t)v274 > v219)
                  {
                    --v274;
                    BOOL v24 = v273-- > (unsigned __int8 *)a4;
                    if (v24) {
                      continue;
                    }
                  }
                  goto LABEL_437;
                }
LABEL_398:
                unint64_t v203 = (char *)(v273 + 1);
LABEL_438:
                unint64_t v299 = v203 - a4;
                int v300 = *(char **)(a2 + 24);
                if ((unint64_t)v203 <= v196)
                {
                  *(_OWORD *)int v300 = *(_OWORD *)a4;
                  uint64_t v303 = *(void *)(a2 + 24);
                  if (v299 > 0x10)
                  {
                    unsigned int v304 = (_OWORD *)(v303 + 16);
                    unint64_t v305 = v303 + v299;
                    uint64_t v306 = (long long *)(a4 + 16);
                    do
                    {
                      long long v307 = *v306++;
                      *v304++ = v307;
                    }
                    while ((unint64_t)v304 < v305);
                    goto LABEL_480;
                  }
                  *(void *)(a2 + 24) = v303 + v299;
                  uint64_t v236 = *(void *)(a2 + 8);
LABEL_482:
                  __int16 v245 = v220 - 3;
                  *(_WORD *)(v236 + 4) = v299;
                  *(_DWORD *)uint64_t v236 = v221 + 3;
                  int v22 = v26;
                  uint64_t v26 = v221;
                  if ((unint64_t)(v220 - 3) < 0x10000) {
                    goto LABEL_323;
                  }
LABEL_322:
                  unint64_t v247 = (unint64_t)(v236 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v247;
                  uint64_t v26 = v221;
                  goto LABEL_323;
                }
                if ((unint64_t)a4 <= v196)
                {
                  int v302 = &v300[v196 - (void)a4];
                  uint64_t v308 = a4;
                  unint64_t v309 = *(char **)(a2 + 24);
                  do
                  {
                    long long v310 = *(_OWORD *)v308;
                    v308 += 16;
                    *(_OWORD *)unint64_t v309 = v310;
                    v309 += 16;
                  }
                  while (v309 < v302);
                  uint64_t v301 = v7 - 32;
                  if (v196 >= (unint64_t)v203) {
                    goto LABEL_480;
                  }
                }
                else
                {
                  uint64_t v301 = a4;
                  int v302 = *(char **)(a2 + 24);
                  if (a4 >= v203)
                  {
LABEL_480:
                    *(void *)(a2 + 24) += v299;
                    uint64_t v236 = *(void *)(a2 + 8);
                    if (v299 >= 0x10000)
                    {
                      unint64_t v329 = (unint64_t)(v236 - *(void *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 1;
                      *(_DWORD *)(a2 + 76) = v329;
                    }
                    goto LABEL_482;
                  }
                }
                if ((unint64_t)a4 <= v196) {
                  int8x16_t v311 = v7 - 32;
                }
                else {
                  int8x16_t v311 = a4;
                }
                unint64_t v312 = v203 - v311;
                if ((unint64_t)(v203 - v311) < 8)
                {
                  BOOL v313 = v301;
                  goto LABEL_479;
                }
                if ((unint64_t)(v300 - a4) < 0x20)
                {
                  BOOL v313 = v301;
                  goto LABEL_479;
                }
                if (v312 >= 0x20)
                {
                  unint64_t v659 = v312 & 0xFFFFFFFFFFFFFFE0;
                  unsigned int v315 = (long long *)(v301 + 16);
                  unsigned int v316 = &v300[v311 - a4 + 16];
                  unint64_t v317 = v312 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v318 = *v315;
                    *((_OWORD *)v316 - 1) = *(v315 - 1);
                    *(_OWORD *)unsigned int v316 = v318;
                    v315 += 2;
                    v316 += 32;
                    v317 -= 32;
                  }
                  while (v317);
                  unint64_t v314 = v312 & 0xFFFFFFFFFFFFFFE0;
                  if (v312 == v659) {
                    goto LABEL_480;
                  }
                  if ((v312 & 0x18) == 0)
                  {
                    BOOL v313 = &v301[v659];
                    v302 += v659;
                    do
                    {
LABEL_479:
                      char v328 = *v313++;
                      *v302++ = v328;
                    }
                    while (v313 < v203);
                    goto LABEL_480;
                  }
                }
                else
                {
                  unint64_t v314 = 0;
                }
                v302 += v312 & 0xFFFFFFFFFFFFFFF8;
                BOOL v313 = &v301[v312 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v319 = &v301[v314];
                unint64_t v320 = &v300[&v311[v314] - a4];
                unint64_t v321 = v314 - (v312 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v322 = *(void *)v319;
                  v319 += 8;
                  *(void *)unint64_t v320 = v322;
                  v320 += 8;
                  v321 += 8;
                }
                while (v321);
                if (v312 == (v312 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_480;
                }
                goto LABEL_479;
              }
              uint64_t v279 = 0;
              unint64_t v280 = v183 + 16;
              while (1)
              {
                uint64_t v281 = &v280[v279];
                if ((unint64_t)&v280[v279] >= v192) {
                  break;
                }
                uint64_t v282 = *(void *)(v653 + v199 + v279);
                v279 += 8;
                unint64_t v283 = *(void *)v281 ^ v282;
                if (v283)
                {
                  uint64_t v220 = v279 + (__clz(__rbit64(v283)) >> 3) + 8;
                  unsigned int v221 = &v183[-v215];
                  if (v183 > (unsigned __int8 *)a4) {
                    goto LABEL_374;
                  }
                  goto LABEL_418;
                }
              }
              unint64_t v272 = &v183[v279 + 16];
              double v217 = (_DWORD *)(v653 + v199 + v279);
              if ((unint64_t)v272 < v193) {
                goto LABEL_363;
              }
            }
            if ((unint64_t)v272 >= v194)
            {
              if (v272 >= (unsigned __int8 *)v7) {
                goto LABEL_373;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v217 == *(unsigned __int16 *)v272)
              {
                v272 += 2;
                double v217 = (_DWORD *)((char *)v217 + 2);
              }
              if (v272 >= (unsigned __int8 *)v7)
              {
LABEL_373:
                uint64_t v220 = v272 - v183;
                unsigned int v221 = &v183[-v215];
                if (v183 <= (unsigned __int8 *)a4) {
                  goto LABEL_418;
                }
                goto LABEL_374;
              }
            }
            if (*(unsigned __int8 *)v217 == *v272) {
              ++v272;
            }
            goto LABEL_373;
          }
        }
        if (v202 <= v674 || (uint64_t v222 = v172 + v202, *(_DWORD *)(v172 + v202) != *(_DWORD *)v183))
        {
          _X10 = &v183[(v183 - (unsigned __int8 *)a4) >> 8];
          int32x4_t v183 = _X10 + 1;
          _X10 += 257;
          __asm { PRFM            #0, [X10] }
          goto LABEL_268;
        }
        uint64_t v223 = *(void *)v203;
        unint64_t v224 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v203) >> v190);
        uint64_t v225 = *(unsigned int *)(v189 + v224);
        *(_DWORD *)(v189 + v224) = v200 + 1;
        if (v225 > v674)
        {
          uint64_t v226 = v172 + v225;
          if (*(void *)(v172 + v225) == v223)
          {
            unint64_t v227 = (char *)(v183 + 9);
            uint64_t v228 = (_DWORD *)(v226 + 8);
            if (v192 <= (unint64_t)(v183 + 9))
            {
              uint64_t v297 = v183 + 9;
              unint64_t v230 = v669;
              if ((unint64_t)v227 < v193)
              {
LABEL_422:
                if (*v228 == *(_DWORD *)v297)
                {
                  v297 += 4;
                  ++v228;
                }
              }
            }
            else
            {
              unint64_t v229 = *(void *)v227 ^ *(void *)v228;
              unint64_t v230 = v669;
              if (v229)
              {
                uint64_t v220 = (__clz(__rbit64(v229)) >> 3) + 8;
                unsigned int v221 = (unsigned __int8 *)&v203[-v226];
                if (v203 <= a4) {
                  goto LABEL_438;
                }
                goto LABEL_433;
              }
              uint64_t v323 = 0;
              int v324 = v183 + 17;
              while (1)
              {
                unsigned int v325 = &v324[v323];
                if ((unint64_t)&v324[v323] >= v192) {
                  break;
                }
                uint64_t v326 = *(void *)(v653 + v225 + v323);
                v323 += 8;
                unint64_t v327 = *(void *)v325 ^ v326;
                if (v327)
                {
                  uint64_t v220 = v323 + (__clz(__rbit64(v327)) >> 3) + 8;
                  unsigned int v221 = (unsigned __int8 *)&v203[-v226];
                  if (v203 > a4) {
                    goto LABEL_433;
                  }
                  goto LABEL_438;
                }
              }
              uint64_t v297 = &v183[v323 + 17];
              uint64_t v228 = (_DWORD *)(v653 + v225 + v323);
              if ((unint64_t)v297 < v193) {
                goto LABEL_422;
              }
            }
            if ((unint64_t)v297 >= v194)
            {
              if (v297 >= (unsigned __int8 *)v7) {
                goto LABEL_432;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v228 == *(unsigned __int16 *)v297)
              {
                v297 += 2;
                uint64_t v228 = (_DWORD *)((char *)v228 + 2);
              }
              if (v297 >= (unsigned __int8 *)v7)
              {
LABEL_432:
                uint64_t v220 = v297 - (unsigned __int8 *)v227 + 8;
                unsigned int v221 = (unsigned __int8 *)&v203[-v226];
                if (v203 <= a4) {
                  goto LABEL_438;
                }
LABEL_433:
                unint64_t v298 = (unsigned __int8 *)(v665 + v225);
                while (*v183 == *v298)
                {
                  ++v220;
                  unsigned int v275 = v183 - 1;
                  if (v183 > (unsigned __int8 *)a4)
                  {
                    --v183;
                    BOOL v24 = (unint64_t)v298-- > v230;
                    if (v24) {
                      continue;
                    }
                  }
                  goto LABEL_437;
                }
                unint64_t v203 = (char *)(v183 + 1);
                goto LABEL_438;
              }
            }
            if (*(unsigned __int8 *)v228 == *v297) {
              ++v297;
            }
            goto LABEL_432;
          }
        }
        uint64_t v269 = v183 + 4;
        size_t v270 = (_DWORD *)(v222 + 4);
        if (v192 <= (unint64_t)(v183 + 4))
        {
          unint64_t v276 = v183 + 4;
          if ((unint64_t)v269 < v193)
          {
LABEL_382:
            if (*v270 == *(_DWORD *)v276)
            {
              v276 += 4;
              ++v270;
            }
          }
        }
        else
        {
          unint64_t v271 = *v269 ^ *(void *)v270;
          if (v271)
          {
            uint64_t v220 = (__clz(__rbit64(v271)) >> 3) + 4;
            unsigned int v221 = &v183[-v222];
            if (v183 <= (unsigned __int8 *)a4)
            {
LABEL_418:
              unint64_t v203 = (char *)v183;
              goto LABEL_438;
            }
LABEL_393:
            unint64_t v273 = v183 - 1;
            long long v277 = (unsigned __int8 *)(v665 + v202);
            while (*v273 == *v277)
            {
              ++v220;
              unsigned int v275 = v273 - 1;
              if ((unint64_t)v277 > v669)
              {
                --v277;
                BOOL v24 = v273-- > (unsigned __int8 *)a4;
                if (v24) {
                  continue;
                }
              }
LABEL_437:
              unint64_t v203 = (char *)(v275 + 1);
              goto LABEL_438;
            }
            goto LABEL_398;
          }
          uint64_t v292 = 0;
          int8x16_t v293 = v183 + 12;
          while (1)
          {
            unint64_t v294 = &v293[v292];
            if ((unint64_t)&v293[v292] >= v192) {
              break;
            }
            uint64_t v295 = *(void *)(v648 + v202 + v292);
            v292 += 8;
            unint64_t v296 = *(void *)v294 ^ v295;
            if (v296)
            {
              uint64_t v220 = v292 + (__clz(__rbit64(v296)) >> 3) + 4;
              unsigned int v221 = &v183[-v222];
              if (v183 > (unsigned __int8 *)a4) {
                goto LABEL_393;
              }
              goto LABEL_418;
            }
          }
          unint64_t v276 = &v183[v292 + 12];
          size_t v270 = (_DWORD *)(v648 + v202 + v292);
          if ((unint64_t)v276 < v193) {
            goto LABEL_382;
          }
        }
        if ((unint64_t)v276 >= v194)
        {
          if (v276 >= (unsigned __int8 *)v7) {
            goto LABEL_392;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v270 == *(unsigned __int16 *)v276)
          {
            v276 += 2;
            size_t v270 = (_DWORD *)((char *)v270 + 2);
          }
          if (v276 >= (unsigned __int8 *)v7)
          {
LABEL_392:
            uint64_t v220 = v276 - v183;
            unsigned int v221 = &v183[-v222];
            if (v183 <= (unsigned __int8 *)a4) {
              goto LABEL_418;
            }
            goto LABEL_393;
          }
        }
        if (*(unsigned __int8 *)v270 == *v276) {
          ++v276;
        }
        goto LABEL_392;
      }
      uint64_t v204 = (char *)(v183 + 5);
      int v205 = &v183[-v26 + 5];
      if (v192 <= (unint64_t)(v183 + 5))
      {
        unint64_t v233 = v183 + 5;
        if ((unint64_t)v204 < v193)
        {
LABEL_294:
          if (*(_DWORD *)v205 == *(_DWORD *)v233)
          {
            v233 += 4;
            v205 += 4;
          }
        }
      }
      else
      {
        unint64_t v206 = *(void *)v204 ^ *(void *)v205;
        if (v206)
        {
          unint64_t v207 = __clz(__rbit64(v206)) >> 3;
          unint64_t v208 = v203 - a4;
          unsigned int v209 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v203 <= v196) {
            goto LABEL_274;
          }
          goto LABEL_305;
        }
        uint64_t v264 = 0;
        uint64_t v265 = v183 + 13;
        while (1)
        {
          unint64_t v266 = &v265[v264];
          if ((unint64_t)&v265[v264] >= v192) {
            break;
          }
          uint64_t v267 = *(void *)&v183[v264 + 13 - v26];
          v264 += 8;
          unint64_t v268 = *(void *)v266 ^ v267;
          if (v268)
          {
            unint64_t v207 = v264 + (__clz(__rbit64(v268)) >> 3);
            unint64_t v208 = v203 - a4;
            unsigned int v209 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v203 > v196) {
              goto LABEL_305;
            }
            goto LABEL_274;
          }
        }
        unint64_t v233 = &v183[v264 + 13];
        int v205 = &v233[-v26];
        if ((unint64_t)v233 < v193) {
          goto LABEL_294;
        }
      }
      if ((unint64_t)v233 >= v194) {
        break;
      }
      if (*(unsigned __int16 *)v205 == *(unsigned __int16 *)v233)
      {
        v233 += 2;
        v205 += 2;
      }
      if (v233 < (unsigned __int8 *)v7) {
        goto LABEL_302;
      }
LABEL_304:
      unint64_t v207 = v233 - (unsigned __int8 *)v204;
      unint64_t v208 = v203 - a4;
      unsigned int v209 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v203 <= v196)
      {
LABEL_274:
        *unsigned int v209 = *(_OWORD *)a4;
        uint64_t v210 = *(void *)(a2 + 24);
        if (v208 <= 0x10)
        {
          *(void *)(a2 + 24) = v210 + v208;
          uint64_t v236 = *(void *)(a2 + 8);
          goto LABEL_321;
        }
        uint64_t v211 = (_OWORD *)(v210 + 16);
        unint64_t v212 = v210 + v208;
        double v213 = (long long *)(a4 + 16);
        do
        {
          long long v214 = *v213++;
          *v211++ = v214;
        }
        while ((unint64_t)v211 < v212);
        goto LABEL_319;
      }
LABEL_305:
      if ((unint64_t)a4 <= v196)
      {
        unsigned int v235 = (char *)v209 + v196 - (void)a4;
        int v237 = a4;
        BOOL v238 = v209;
        do
        {
          long long v239 = *(_OWORD *)v237;
          v237 += 16;
          *v238++ = v239;
        }
        while (v238 < (_OWORD *)v235);
        uint64_t v234 = v7 - 32;
        if (v196 >= (unint64_t)v203) {
          goto LABEL_319;
        }
      }
      else
      {
        uint64_t v234 = a4;
        unsigned int v235 = v209;
        if (a4 >= v203) {
          goto LABEL_319;
        }
      }
      if ((unint64_t)a4 <= v196) {
        unint64_t v240 = v7 - 32;
      }
      else {
        unint64_t v240 = a4;
      }
      unint64_t v241 = v183 - (unsigned __int8 *)v240 + 1;
      if (v241 < 8 || (unint64_t)((char *)v209 - a4) < 0x20)
      {
        int v242 = v234;
        goto LABEL_318;
      }
      if (v241 >= 0x20)
      {
        unint64_t v658 = v241 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v284 = (long long *)(v234 + 16);
        unint64_t v285 = (_OWORD *)((char *)v209 + v240 - a4 + 16);
        unint64_t v286 = v241 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v287 = *v284;
          *(v285 - 1) = *(v284 - 1);
          *unint64_t v285 = v287;
          v284 += 2;
          v285 += 2;
          v286 -= 32;
        }
        while (v286);
        unint64_t v278 = v241 & 0xFFFFFFFFFFFFFFE0;
        if (v241 == v658) {
          goto LABEL_319;
        }
        if ((v241 & 0x18) == 0)
        {
          int v242 = &v234[v658];
          v235 += v658;
          do
          {
LABEL_318:
            char v243 = *v242++;
            *v235++ = v243;
          }
          while (v242 != &v234[v241]);
          goto LABEL_319;
        }
      }
      else
      {
        unint64_t v278 = 0;
      }
      v235 += v241 & 0xFFFFFFFFFFFFFFF8;
      int v242 = &v234[v241 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v288 = &v234[v278];
      int8x16_t v289 = (void *)((char *)v209 + &v240[v278] - a4);
      unint64_t v290 = v278 - (v241 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v291 = *(void *)v288;
        v288 += 8;
        *v289++ = v291;
        v290 += 8;
      }
      while (v290);
      if (v241 != (v241 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_318;
      }
LABEL_319:
      *(void *)(a2 + 24) += v208;
      uint64_t v236 = *(void *)(a2 + 8);
      if (v208 >= 0x10000)
      {
        unint64_t v244 = (unint64_t)(v236 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v244;
      }
LABEL_321:
      uint64_t v220 = v207 + 4;
      __int16 v245 = v207 + 1;
      *(_WORD *)(v236 + 4) = v208;
      *(_DWORD *)uint64_t v236 = 1;
      unint64_t v246 = (v207 + 1) >> 16;
      unsigned int v221 = v26;
      if (v246) {
        goto LABEL_322;
      }
LABEL_323:
      *(_WORD *)(v236 + 6) = v245;
      uint64_t v248 = v236 + 8;
      *(void *)(a2 + 8) = v236 + 8;
      a4 = &v203[v220];
      if ((unint64_t)&v203[v220] <= v180)
      {
        uint64_t v249 = *(void *)(v172 + (v200 + 2));
        *(_DWORD *)(v189 + 4 * ((0xCF1BBCDCB7A56463 * v249) >> v190)) = v200 + 2;
        *(_DWORD *)(v189 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(a4 - 2)) >> v190)) = a4 - 2 - v172;
        *(_DWORD *)(v195 + 4 * ((0xCF1BBCDCBB000000 * v249) >> v191)) = v200 + 2;
        *(_DWORD *)(v195 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(a4 - 1)) >> v191)) = a4 - 1 - v172;
        unint64_t v250 = v26;
        unint64_t v251 = v22;
        while (1)
        {
          uint64_t v26 = v251;
          unint64_t v251 = v250;
          if (!v26 || *(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
          {
            int v22 = v26;
            uint64_t v26 = v250;
            goto LABEL_267;
          }
          long long v252 = a4 + 4;
          unint64_t v253 = &a4[-v26 + 4];
          if (v192 <= (unint64_t)(a4 + 4)) {
            break;
          }
          unint64_t v254 = *(void *)v252 ^ *(void *)v253;
          if (!v254)
          {
            uint64_t v259 = 0;
            uint64_t v260 = a4 + 12;
            while (1)
            {
              uint64_t v261 = &v260[v259];
              if ((unint64_t)&v260[v259] >= v192) {
                break;
              }
              uint64_t v262 = *(void *)&a4[v259 + 12 - v26];
              v259 += 8;
              unint64_t v263 = *(void *)v261 ^ v262;
              if (v263)
              {
                unint64_t v255 = v259 + (__clz(__rbit64(v263)) >> 3);
                goto LABEL_343;
              }
            }
            uint64_t v256 = &a4[v259 + 12];
            unint64_t v253 = &v256[-v26];
            if ((unint64_t)v256 >= v193)
            {
LABEL_334:
              if ((unint64_t)v256 >= v194)
              {
                if (v256 < v7) {
                  goto LABEL_340;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v253 == *(unsigned __int16 *)v256)
                {
                  v256 += 2;
                  v253 += 2;
                }
                if (v256 >= v7) {
                  goto LABEL_342;
                }
LABEL_340:
                if (*v253 == *v256) {
                  ++v256;
                }
              }
LABEL_342:
              unint64_t v255 = v256 - v252;
              goto LABEL_343;
            }
LABEL_332:
            if (*(_DWORD *)v253 == *(_DWORD *)v256)
            {
              v256 += 4;
              v253 += 4;
            }
            goto LABEL_334;
          }
          unint64_t v255 = __clz(__rbit64(v254)) >> 3;
LABEL_343:
          uint64_t v257 = *(void *)a4;
          *(_DWORD *)(v195 + 4 * ((0xCF1BBCDCBB000000 * *(void *)a4) >> v191)) = a4 - v172;
          *(_DWORD *)(v189 + 4 * ((0xCF1BBCDCB7A56463 * v257) >> v190)) = a4 - v172;
          if ((unint64_t)a4 <= v196)
          {
            *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
            uint64_t v248 = *(void *)(a2 + 8);
          }
          *(_WORD *)(v248 + 4) = 0;
          *(_DWORD *)uint64_t v248 = 1;
          if (v255 + 1 >= 0x10000)
          {
            unint64_t v258 = (unint64_t)(v248 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v258;
          }
          *(_WORD *)(v248 + 6) = v255 + 1;
          v248 += 8;
          a4 += v255 + 4;
          *(void *)(a2 + 8) = v248;
          unint64_t v250 = v26;
          int v22 = v251;
          int32x4_t v183 = (unsigned __int8 *)a4;
          if ((unint64_t)a4 > v180) {
            goto LABEL_268;
          }
        }
        uint64_t v256 = a4 + 4;
        if ((unint64_t)v252 >= v193) {
          goto LABEL_334;
        }
        goto LABEL_332;
      }
LABEL_267:
      int32x4_t v183 = (unsigned __int8 *)a4;
LABEL_268:
      if ((unint64_t)v183 >= v180)
      {
LABEL_964:
        a3 = v672;
        unsigned int v25 = v651;
        goto LABEL_965;
      }
    }
    if (v233 >= (unsigned __int8 *)v7) {
      goto LABEL_304;
    }
LABEL_302:
    if (*v205 == *v233) {
      ++v233;
    }
    goto LABEL_304;
  }
  if (v5 == 6)
  {
    uint64_t v330 = *(void *)(a1 + 8);
    uint64_t v7 = &a4[a5];
    int v331 = a4 + a5 - v330;
    unsigned int v332 = *(_DWORD *)(a1 + 24);
    unsigned int v333 = 1 << *(_DWORD *)(a1 + 192);
    BOOL v334 = v331 - v332 > v333;
    LODWORD(v335) = v331 - v333;
    BOOL v336 = *(_DWORD *)(a1 + 32) == 0;
    if (v336 && v334) {
      uint64_t v335 = v335;
    }
    else {
      uint64_t v335 = v332;
    }
    unsigned int v675 = v335;
    unint64_t v337 = v330 + v335;
    unint64_t v338 = (unint64_t)(v7 - 8);
    unsigned int v339 = *a3;
    unsigned int v340 = a3[1];
    if (a4 == v337) {
      unint64_t v341 = (unsigned __int8 *)(a4 + 1);
    }
    else {
      unint64_t v341 = (unsigned __int8 *)a4;
    }
    BOOL v342 = v341 - v330 - v332 > v333;
    int v343 = v341 - v330 - v333;
    if (!v336 || !v342) {
      int v343 = *(_DWORD *)(a1 + 24);
    }
    unsigned int v344 = v341 - v330 - v343;
    if (v340 <= v344) {
      int v22 = (unsigned __int8 *)v340;
    }
    else {
      int v22 = 0;
    }
    if (v340 <= v344) {
      unsigned int v345 = 0;
    }
    else {
      unsigned int v345 = a3[1];
    }
    BOOL v346 = v339 > v344;
    if (v339 <= v344) {
      unsigned int v25 = v345;
    }
    else {
      unsigned int v25 = *a3;
    }
    if (v346) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = (unsigned __int8 *)v339;
    }
    if ((unint64_t)v341 >= v338) {
      goto LABEL_965;
    }
    unsigned int v651 = v25;
    unint64_t v670 = v337;
    v672 = a3;
    uint64_t v347 = *(void *)(a1 + 48);
    int v348 = 64 - *(_DWORD *)(a1 + 200);
    int v349 = 64 - *(_DWORD *)(a1 + 196);
    unint64_t v350 = (unint64_t)(v7 - 7);
    unint64_t v351 = (unint64_t)(v7 - 3);
    unint64_t v352 = (unint64_t)(v7 - 1);
    uint64_t v353 = *(void *)(a1 + 64);
    unint64_t v354 = (unint64_t)(v7 - 32);
    uint64_t v649 = v330 + 12;
    uint64_t v666 = v330 - 1;
    uint64_t v654 = v330 + 16;
    while (1)
    {
      uint64_t v355 = *(void *)v341;
      unint64_t v356 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v341) >> v348);
      uint64_t v357 = *(unsigned int *)(v347 + v356);
      int v358 = v341 - v330;
      unint64_t v359 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v341) >> v349);
      uint64_t v360 = *(unsigned int *)(v353 + v359);
      *(_DWORD *)(v353 + v359) = v341 - v330;
      *(_DWORD *)(v347 + v356) = v341 - v330;
      unint64_t v361 = (char *)(v341 + 1);
      if (!v26 || *(_DWORD *)&v361[-v26] != *(_DWORD *)(v341 + 1))
      {
        if (v357 > v675)
        {
          uint64_t v373 = v330 + v357;
          if (*(void *)(v330 + v357) == v355)
          {
            uint32x4_t v374 = v341 + 8;
            unint64_t v375 = (_DWORD *)(v373 + 8);
            if (v350 <= (unint64_t)(v341 + 8))
            {
              uint32x4_t v430 = v341 + 8;
              unint64_t v377 = v670;
              if ((unint64_t)v374 < v351)
              {
LABEL_603:
                if (*v375 == *(_DWORD *)v430)
                {
                  v430 += 4;
                  ++v375;
                }
              }
            }
            else
            {
              unint64_t v376 = *v374 ^ *(void *)v375;
              unint64_t v377 = v670;
              if (v376)
              {
                uint64_t v378 = (__clz(__rbit64(v376)) >> 3) + 8;
                unint64_t v379 = &v341[-v373];
                if (v341 <= (unsigned __int8 *)a4) {
                  goto LABEL_658;
                }
LABEL_614:
                uint32x4_t v431 = v341 - 1;
                uint32x4_t v432 = (unsigned __int8 *)(v666 + v357);
                while (*v431 == *v432)
                {
                  ++v378;
                  uint64_t v433 = v431 - 1;
                  if ((unint64_t)v432 > v377)
                  {
                    --v432;
                    BOOL v24 = v431-- > (unsigned __int8 *)a4;
                    if (v24) {
                      continue;
                    }
                  }
                  goto LABEL_677;
                }
LABEL_638:
                unint64_t v361 = (char *)(v431 + 1);
LABEL_678:
                unint64_t v457 = v361 - a4;
                v458 = *(char **)(a2 + 24);
                if ((unint64_t)v361 <= v354)
                {
                  *(_OWORD *)v458 = *(_OWORD *)a4;
                  uint64_t v461 = *(void *)(a2 + 24);
                  if (v457 > 0x10)
                  {
                    v462 = (_OWORD *)(v461 + 16);
                    unint64_t v463 = v461 + v457;
                    unint64_t v464 = (long long *)(a4 + 16);
                    do
                    {
                      long long v465 = *v464++;
                      *v462++ = v465;
                    }
                    while ((unint64_t)v462 < v463);
                    goto LABEL_720;
                  }
                  *(void *)(a2 + 24) = v461 + v457;
                  uint64_t v394 = *(void *)(a2 + 8);
LABEL_722:
                  __int16 v403 = v378 - 3;
                  *(_WORD *)(v394 + 4) = v457;
                  *(_DWORD *)uint64_t v394 = v379 + 3;
                  int v22 = v26;
                  uint64_t v26 = v379;
                  if ((unint64_t)(v378 - 3) < 0x10000) {
                    goto LABEL_563;
                  }
LABEL_562:
                  unint64_t v405 = (unint64_t)(v394 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v405;
                  uint64_t v26 = v379;
                  goto LABEL_563;
                }
                if ((unint64_t)a4 <= v354)
                {
                  v460 = &v458[v354 - (void)a4];
                  int v466 = a4;
                  unint64_t v467 = *(char **)(a2 + 24);
                  do
                  {
                    long long v468 = *(_OWORD *)v466;
                    v466 += 16;
                    *(_OWORD *)unint64_t v467 = v468;
                    v467 += 16;
                  }
                  while (v467 < v460);
                  v459 = v7 - 32;
                  if (v354 >= (unint64_t)v361) {
                    goto LABEL_720;
                  }
                }
                else
                {
                  v459 = a4;
                  v460 = *(char **)(a2 + 24);
                  if (a4 >= v361)
                  {
LABEL_720:
                    *(void *)(a2 + 24) += v457;
                    uint64_t v394 = *(void *)(a2 + 8);
                    if (v457 >= 0x10000)
                    {
                      unint64_t v487 = (unint64_t)(v394 - *(void *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 1;
                      *(_DWORD *)(a2 + 76) = v487;
                    }
                    goto LABEL_722;
                  }
                }
                if ((unint64_t)a4 <= v354) {
                  v469 = v7 - 32;
                }
                else {
                  v469 = a4;
                }
                unint64_t v470 = v361 - v469;
                if ((unint64_t)(v361 - v469) < 8)
                {
                  uint64_t v471 = v459;
                  goto LABEL_719;
                }
                if ((unint64_t)(v458 - a4) < 0x20)
                {
                  uint64_t v471 = v459;
                  goto LABEL_719;
                }
                if (v470 >= 0x20)
                {
                  unint64_t v661 = v470 & 0xFFFFFFFFFFFFFFE0;
                  uint64_t v473 = (long long *)(v459 + 16);
                  uint64_t v474 = &v458[v469 - a4 + 16];
                  unint64_t v475 = v470 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v476 = *v473;
                    *((_OWORD *)v474 - 1) = *(v473 - 1);
                    *(_OWORD *)uint64_t v474 = v476;
                    v473 += 2;
                    v474 += 32;
                    v475 -= 32;
                  }
                  while (v475);
                  unint64_t v472 = v470 & 0xFFFFFFFFFFFFFFE0;
                  if (v470 == v661) {
                    goto LABEL_720;
                  }
                  if ((v470 & 0x18) == 0)
                  {
                    uint64_t v471 = &v459[v661];
                    v460 += v661;
                    do
                    {
LABEL_719:
                      char v486 = *v471++;
                      *v460++ = v486;
                    }
                    while (v471 < v361);
                    goto LABEL_720;
                  }
                }
                else
                {
                  unint64_t v472 = 0;
                }
                v460 += v470 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v471 = &v459[v470 & 0xFFFFFFFFFFFFFFF8];
                v477 = &v459[v472];
                v478 = &v458[&v469[v472] - a4];
                unint64_t v479 = v472 - (v470 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v480 = *(void *)v477;
                  v477 += 8;
                  *(void *)v478 = v480;
                  v478 += 8;
                  v479 += 8;
                }
                while (v479);
                if (v470 == (v470 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_720;
                }
                goto LABEL_719;
              }
              uint64_t v437 = 0;
              v438 = v341 + 16;
              while (1)
              {
                v439 = &v438[v437];
                if ((unint64_t)&v438[v437] >= v350) {
                  break;
                }
                uint64_t v440 = *(void *)(v654 + v357 + v437);
                v437 += 8;
                unint64_t v441 = *(void *)v439 ^ v440;
                if (v441)
                {
                  uint64_t v378 = v437 + (__clz(__rbit64(v441)) >> 3) + 8;
                  unint64_t v379 = &v341[-v373];
                  if (v341 > (unsigned __int8 *)a4) {
                    goto LABEL_614;
                  }
                  goto LABEL_658;
                }
              }
              uint32x4_t v430 = &v341[v437 + 16];
              unint64_t v375 = (_DWORD *)(v654 + v357 + v437);
              if ((unint64_t)v430 < v351) {
                goto LABEL_603;
              }
            }
            if ((unint64_t)v430 >= v352)
            {
              if (v430 >= (unsigned __int8 *)v7) {
                goto LABEL_613;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v375 == *(unsigned __int16 *)v430)
              {
                v430 += 2;
                unint64_t v375 = (_DWORD *)((char *)v375 + 2);
              }
              if (v430 >= (unsigned __int8 *)v7)
              {
LABEL_613:
                uint64_t v378 = v430 - v341;
                unint64_t v379 = &v341[-v373];
                if (v341 <= (unsigned __int8 *)a4) {
                  goto LABEL_658;
                }
                goto LABEL_614;
              }
            }
            if (*(unsigned __int8 *)v375 == *v430) {
              ++v430;
            }
            goto LABEL_613;
          }
        }
        if (v360 <= v675 || (uint64_t v380 = v330 + v360, *(_DWORD *)(v330 + v360) != *(_DWORD *)v341))
        {
          _X10 = &v341[(v341 - (unsigned __int8 *)a4) >> 8];
          unint64_t v341 = _X10 + 1;
          _X10 += 257;
          __asm { PRFM            #0, [X10] }
          goto LABEL_508;
        }
        uint64_t v381 = *(void *)v361;
        unint64_t v382 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v361) >> v348);
        uint64_t v383 = *(unsigned int *)(v347 + v382);
        *(_DWORD *)(v347 + v382) = v358 + 1;
        if (v383 > v675)
        {
          uint64_t v384 = v330 + v383;
          if (*(void *)(v330 + v383) == v381)
          {
            int64x2_t v385 = (char *)(v341 + 9);
            int64x2_t v386 = (_DWORD *)(v384 + 8);
            if (v350 <= (unint64_t)(v341 + 9))
            {
              v455 = v341 + 9;
              unint64_t v388 = v670;
              if ((unint64_t)v385 < v351)
              {
LABEL_662:
                if (*v386 == *(_DWORD *)v455)
                {
                  v455 += 4;
                  ++v386;
                }
              }
            }
            else
            {
              unint64_t v387 = *(void *)v385 ^ *(void *)v386;
              unint64_t v388 = v670;
              if (v387)
              {
                uint64_t v378 = (__clz(__rbit64(v387)) >> 3) + 8;
                unint64_t v379 = (unsigned __int8 *)&v361[-v384];
                if (v361 <= a4) {
                  goto LABEL_678;
                }
                goto LABEL_673;
              }
              uint64_t v481 = 0;
              v482 = v341 + 17;
              while (1)
              {
                v483 = &v482[v481];
                if ((unint64_t)&v482[v481] >= v350) {
                  break;
                }
                uint64_t v484 = *(void *)(v654 + v383 + v481);
                v481 += 8;
                unint64_t v485 = *(void *)v483 ^ v484;
                if (v485)
                {
                  uint64_t v378 = v481 + (__clz(__rbit64(v485)) >> 3) + 8;
                  unint64_t v379 = (unsigned __int8 *)&v361[-v384];
                  if (v361 > a4) {
                    goto LABEL_673;
                  }
                  goto LABEL_678;
                }
              }
              v455 = &v341[v481 + 17];
              int64x2_t v386 = (_DWORD *)(v654 + v383 + v481);
              if ((unint64_t)v455 < v351) {
                goto LABEL_662;
              }
            }
            if ((unint64_t)v455 >= v352)
            {
              if (v455 >= (unsigned __int8 *)v7) {
                goto LABEL_672;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v386 == *(unsigned __int16 *)v455)
              {
                v455 += 2;
                int64x2_t v386 = (_DWORD *)((char *)v386 + 2);
              }
              if (v455 >= (unsigned __int8 *)v7)
              {
LABEL_672:
                uint64_t v378 = v455 - (unsigned __int8 *)v385 + 8;
                unint64_t v379 = (unsigned __int8 *)&v361[-v384];
                if (v361 <= a4) {
                  goto LABEL_678;
                }
LABEL_673:
                v456 = (unsigned __int8 *)(v666 + v383);
                while (*v341 == *v456)
                {
                  ++v378;
                  uint64_t v433 = v341 - 1;
                  if (v341 > (unsigned __int8 *)a4)
                  {
                    --v341;
                    BOOL v24 = (unint64_t)v456-- > v388;
                    if (v24) {
                      continue;
                    }
                  }
                  goto LABEL_677;
                }
                unint64_t v361 = (char *)(v341 + 1);
                goto LABEL_678;
              }
            }
            if (*(unsigned __int8 *)v386 == *v455) {
              ++v455;
            }
            goto LABEL_672;
          }
        }
        uint32x4_t v427 = v341 + 4;
        uint32x4_t v428 = (_DWORD *)(v380 + 4);
        if (v350 <= (unint64_t)(v341 + 4))
        {
          uint64_t v434 = v341 + 4;
          if ((unint64_t)v427 < v351)
          {
LABEL_622:
            if (*v428 == *(_DWORD *)v434)
            {
              v434 += 4;
              ++v428;
            }
          }
        }
        else
        {
          unint64_t v429 = *v427 ^ *(void *)v428;
          if (v429)
          {
            uint64_t v378 = (__clz(__rbit64(v429)) >> 3) + 4;
            unint64_t v379 = &v341[-v380];
            if (v341 <= (unsigned __int8 *)a4)
            {
LABEL_658:
              unint64_t v361 = (char *)v341;
              goto LABEL_678;
            }
LABEL_633:
            uint32x4_t v431 = v341 - 1;
            uint64_t v435 = (unsigned __int8 *)(v666 + v360);
            while (*v431 == *v435)
            {
              ++v378;
              uint64_t v433 = v431 - 1;
              if ((unint64_t)v435 > v670)
              {
                --v435;
                BOOL v24 = v431-- > (unsigned __int8 *)a4;
                if (v24) {
                  continue;
                }
              }
LABEL_677:
              unint64_t v361 = (char *)(v433 + 1);
              goto LABEL_678;
            }
            goto LABEL_638;
          }
          uint64_t v450 = 0;
          v451 = v341 + 12;
          while (1)
          {
            int v452 = &v451[v450];
            if ((unint64_t)&v451[v450] >= v350) {
              break;
            }
            uint64_t v453 = *(void *)(v649 + v360 + v450);
            v450 += 8;
            unint64_t v454 = *(void *)v452 ^ v453;
            if (v454)
            {
              uint64_t v378 = v450 + (__clz(__rbit64(v454)) >> 3) + 4;
              unint64_t v379 = &v341[-v380];
              if (v341 > (unsigned __int8 *)a4) {
                goto LABEL_633;
              }
              goto LABEL_658;
            }
          }
          uint64_t v434 = &v341[v450 + 12];
          uint32x4_t v428 = (_DWORD *)(v649 + v360 + v450);
          if ((unint64_t)v434 < v351) {
            goto LABEL_622;
          }
        }
        if ((unint64_t)v434 >= v352)
        {
          if (v434 >= (unsigned __int8 *)v7) {
            goto LABEL_632;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v428 == *(unsigned __int16 *)v434)
          {
            v434 += 2;
            uint32x4_t v428 = (_DWORD *)((char *)v428 + 2);
          }
          if (v434 >= (unsigned __int8 *)v7)
          {
LABEL_632:
            uint64_t v378 = v434 - v341;
            unint64_t v379 = &v341[-v380];
            if (v341 <= (unsigned __int8 *)a4) {
              goto LABEL_658;
            }
            goto LABEL_633;
          }
        }
        if (*(unsigned __int8 *)v428 == *v434) {
          ++v434;
        }
        goto LABEL_632;
      }
      unsigned long long v362 = (char *)(v341 + 5);
      uint64_t v363 = &v341[-v26 + 5];
      if (v350 <= (unint64_t)(v341 + 5))
      {
        uint32x4_t v391 = v341 + 5;
        if ((unint64_t)v362 < v351)
        {
LABEL_534:
          if (*(_DWORD *)v363 == *(_DWORD *)v391)
          {
            v391 += 4;
            v363 += 4;
          }
        }
      }
      else
      {
        unint64_t v364 = *(void *)v362 ^ *(void *)v363;
        if (v364)
        {
          unint64_t v365 = __clz(__rbit64(v364)) >> 3;
          unint64_t v366 = v361 - a4;
          unint64_t v367 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v361 <= v354) {
            goto LABEL_514;
          }
          goto LABEL_545;
        }
        uint64_t v422 = 0;
        int32x4_t v423 = v341 + 13;
        while (1)
        {
          int32x4_t v424 = &v423[v422];
          if ((unint64_t)&v423[v422] >= v350) {
            break;
          }
          uint64_t v425 = *(void *)&v341[v422 + 13 - v26];
          v422 += 8;
          unint64_t v426 = *(void *)v424 ^ v425;
          if (v426)
          {
            unint64_t v365 = v422 + (__clz(__rbit64(v426)) >> 3);
            unint64_t v366 = v361 - a4;
            unint64_t v367 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v361 > v354) {
              goto LABEL_545;
            }
            goto LABEL_514;
          }
        }
        uint32x4_t v391 = &v341[v422 + 13];
        uint64_t v363 = &v391[-v26];
        if ((unint64_t)v391 < v351) {
          goto LABEL_534;
        }
      }
      if ((unint64_t)v391 >= v352) {
        break;
      }
      if (*(unsigned __int16 *)v363 == *(unsigned __int16 *)v391)
      {
        v391 += 2;
        v363 += 2;
      }
      if (v391 < (unsigned __int8 *)v7) {
        goto LABEL_542;
      }
LABEL_544:
      unint64_t v365 = v391 - (unsigned __int8 *)v362;
      unint64_t v366 = v361 - a4;
      unint64_t v367 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v361 <= v354)
      {
LABEL_514:
        *unint64_t v367 = *(_OWORD *)a4;
        uint64_t v368 = *(void *)(a2 + 24);
        if (v366 <= 0x10)
        {
          *(void *)(a2 + 24) = v368 + v366;
          uint64_t v394 = *(void *)(a2 + 8);
          goto LABEL_561;
        }
        uint32x4_t v369 = (_OWORD *)(v368 + 16);
        unint64_t v370 = v368 + v366;
        unint64_t v371 = (long long *)(a4 + 16);
        do
        {
          long long v372 = *v371++;
          *v369++ = v372;
        }
        while ((unint64_t)v369 < v370);
        goto LABEL_559;
      }
LABEL_545:
      if ((unint64_t)a4 <= v354)
      {
        uint64_t v393 = (char *)v367 + v354 - (void)a4;
        uint64_t v395 = a4;
        unsigned int v396 = v367;
        do
        {
          long long v397 = *(_OWORD *)v395;
          v395 += 16;
          *v396++ = v397;
        }
        while (v396 < (_OWORD *)v393);
        uint64_t v392 = v7 - 32;
        if (v354 >= (unint64_t)v361) {
          goto LABEL_559;
        }
      }
      else
      {
        uint64_t v392 = a4;
        uint64_t v393 = v367;
        if (a4 >= v361) {
          goto LABEL_559;
        }
      }
      if ((unint64_t)a4 <= v354) {
        unsigned int v398 = v7 - 32;
      }
      else {
        unsigned int v398 = a4;
      }
      unint64_t v399 = v341 - (unsigned __int8 *)v398 + 1;
      if (v399 < 8 || (unint64_t)((char *)v367 - a4) < 0x20)
      {
        uint64_t v400 = v392;
        goto LABEL_558;
      }
      if (v399 >= 0x20)
      {
        unint64_t v660 = v399 & 0xFFFFFFFFFFFFFFE0;
        int64x2_t v442 = (long long *)(v392 + 16);
        int32x4_t v443 = (_OWORD *)((char *)v367 + v398 - a4 + 16);
        unint64_t v444 = v399 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v445 = *v442;
          *(v443 - 1) = *(v442 - 1);
          *int32x4_t v443 = v445;
          v442 += 2;
          v443 += 2;
          v444 -= 32;
        }
        while (v444);
        unint64_t v436 = v399 & 0xFFFFFFFFFFFFFFE0;
        if (v399 == v660) {
          goto LABEL_559;
        }
        if ((v399 & 0x18) == 0)
        {
          uint64_t v400 = &v392[v660];
          v393 += v660;
          do
          {
LABEL_558:
            char v401 = *v400++;
            *v393++ = v401;
          }
          while (v400 != &v392[v399]);
          goto LABEL_559;
        }
      }
      else
      {
        unint64_t v436 = 0;
      }
      v393 += v399 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v400 = &v392[v399 & 0xFFFFFFFFFFFFFFF8];
      uint32x4_t v446 = &v392[v436];
      uint32x4_t v447 = (void *)((char *)v367 + &v398[v436] - a4);
      unint64_t v448 = v436 - (v399 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v449 = *(void *)v446;
        v446 += 8;
        *v447++ = v449;
        v448 += 8;
      }
      while (v448);
      if (v399 != (v399 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_558;
      }
LABEL_559:
      *(void *)(a2 + 24) += v366;
      uint64_t v394 = *(void *)(a2 + 8);
      if (v366 >= 0x10000)
      {
        unint64_t v402 = (unint64_t)(v394 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v402;
      }
LABEL_561:
      uint64_t v378 = v365 + 4;
      __int16 v403 = v365 + 1;
      *(_WORD *)(v394 + 4) = v366;
      *(_DWORD *)uint64_t v394 = 1;
      unint64_t v404 = (v365 + 1) >> 16;
      unint64_t v379 = v26;
      if (v404) {
        goto LABEL_562;
      }
LABEL_563:
      *(_WORD *)(v394 + 6) = v403;
      uint64_t v406 = v394 + 8;
      *(void *)(a2 + 8) = v394 + 8;
      a4 = &v361[v378];
      if ((unint64_t)&v361[v378] <= v338)
      {
        uint64_t v407 = *(void *)(v330 + (v358 + 2));
        *(_DWORD *)(v347 + 4 * ((0xCF1BBCDCB7A56463 * v407) >> v348)) = v358 + 2;
        *(_DWORD *)(v347 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(a4 - 2)) >> v348)) = a4 - 2 - v330;
        *(_DWORD *)(v353 + 4 * ((0xCF1BBCDCBF9B0000 * v407) >> v349)) = v358 + 2;
        *(_DWORD *)(v353 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(a4 - 1)) >> v349)) = a4 - 1 - v330;
        unsigned int v408 = v26;
        unsigned int v409 = v22;
        while (1)
        {
          uint64_t v26 = v409;
          unsigned int v409 = v408;
          if (!v26 || *(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
          {
            int v22 = v26;
            uint64_t v26 = v408;
            goto LABEL_507;
          }
          unsigned int v410 = a4 + 4;
          unsigned int v411 = &a4[-v26 + 4];
          if (v350 <= (unint64_t)(a4 + 4)) {
            break;
          }
          unint64_t v412 = *(void *)v410 ^ *(void *)v411;
          if (!v412)
          {
            uint64_t v417 = 0;
            unsigned long long v418 = a4 + 12;
            while (1)
            {
              int32x4_t v419 = &v418[v417];
              if ((unint64_t)&v418[v417] >= v350) {
                break;
              }
              uint64_t v420 = *(void *)&a4[v417 + 12 - v26];
              v417 += 8;
              unint64_t v421 = *(void *)v419 ^ v420;
              if (v421)
              {
                unint64_t v413 = v417 + (__clz(__rbit64(v421)) >> 3);
                goto LABEL_583;
              }
            }
            int64x2_t v414 = &a4[v417 + 12];
            unsigned int v411 = &v414[-v26];
            if ((unint64_t)v414 >= v351)
            {
LABEL_574:
              if ((unint64_t)v414 >= v352)
              {
                if (v414 < v7) {
                  goto LABEL_580;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v411 == *(unsigned __int16 *)v414)
                {
                  v414 += 2;
                  v411 += 2;
                }
                if (v414 >= v7) {
                  goto LABEL_582;
                }
LABEL_580:
                if (*v411 == *v414) {
                  ++v414;
                }
              }
LABEL_582:
              unint64_t v413 = v414 - v410;
              goto LABEL_583;
            }
LABEL_572:
            if (*(_DWORD *)v411 == *(_DWORD *)v414)
            {
              v414 += 4;
              v411 += 4;
            }
            goto LABEL_574;
          }
          unint64_t v413 = __clz(__rbit64(v412)) >> 3;
LABEL_583:
          uint64_t v415 = *(void *)a4;
          *(_DWORD *)(v353 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)a4) >> v349)) = a4 - v330;
          *(_DWORD *)(v347 + 4 * ((0xCF1BBCDCB7A56463 * v415) >> v348)) = a4 - v330;
          if ((unint64_t)a4 <= v354)
          {
            *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
            uint64_t v406 = *(void *)(a2 + 8);
          }
          *(_WORD *)(v406 + 4) = 0;
          *(_DWORD *)uint64_t v406 = 1;
          if (v413 + 1 >= 0x10000)
          {
            unint64_t v416 = (unint64_t)(v406 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v416;
          }
          *(_WORD *)(v406 + 6) = v413 + 1;
          v406 += 8;
          a4 += v413 + 4;
          *(void *)(a2 + 8) = v406;
          unsigned int v408 = v26;
          int v22 = v409;
          unint64_t v341 = (unsigned __int8 *)a4;
          if ((unint64_t)a4 > v338) {
            goto LABEL_508;
          }
        }
        int64x2_t v414 = a4 + 4;
        if ((unint64_t)v410 >= v351) {
          goto LABEL_574;
        }
        goto LABEL_572;
      }
LABEL_507:
      unint64_t v341 = (unsigned __int8 *)a4;
LABEL_508:
      if ((unint64_t)v341 >= v338) {
        goto LABEL_964;
      }
    }
    if (v391 >= (unsigned __int8 *)v7) {
      goto LABEL_544;
    }
LABEL_542:
    if (*v363 == *v391) {
      ++v391;
    }
    goto LABEL_544;
  }
  if (v5 != 7)
  {
    uint64_t v488 = *(void *)(a1 + 8);
    uint64_t v7 = &a4[a5];
    int v489 = a4 + a5 - v488;
    unsigned int v490 = *(_DWORD *)(a1 + 24);
    unsigned int v491 = 1 << *(_DWORD *)(a1 + 192);
    BOOL v492 = v489 - v490 > v491;
    LODWORD(v493) = v489 - v491;
    BOOL v494 = *(_DWORD *)(a1 + 32) == 0;
    if (v494 && v492) {
      uint64_t v493 = v493;
    }
    else {
      uint64_t v493 = v490;
    }
    unsigned int v676 = v493;
    unint64_t v495 = v488 + v493;
    unint64_t v496 = (unint64_t)(v7 - 8);
    unsigned int v497 = *a3;
    unsigned int v498 = a3[1];
    if (a4 == v495) {
      int v499 = (unsigned __int8 *)(a4 + 1);
    }
    else {
      int v499 = (unsigned __int8 *)a4;
    }
    BOOL v500 = v499 - v488 - v490 > v491;
    int v501 = v499 - v488 - v491;
    if (!v494 || !v500) {
      int v501 = *(_DWORD *)(a1 + 24);
    }
    unsigned int v502 = v499 - v488 - v501;
    if (v498 <= v502) {
      int v22 = (unsigned __int8 *)v498;
    }
    else {
      int v22 = 0;
    }
    if (v498 <= v502) {
      unsigned int v503 = 0;
    }
    else {
      unsigned int v503 = a3[1];
    }
    BOOL v504 = v497 > v502;
    if (v497 <= v502) {
      unsigned int v25 = v503;
    }
    else {
      unsigned int v25 = *a3;
    }
    if (v504) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = (unsigned __int8 *)v497;
    }
    if ((unint64_t)v499 >= v496) {
      goto LABEL_965;
    }
    unsigned int v651 = v25;
    unint64_t v671 = v495;
    v672 = a3;
    uint64_t v505 = *(void *)(a1 + 48);
    int v506 = 64 - *(_DWORD *)(a1 + 200);
    int v507 = 32 - *(_DWORD *)(a1 + 196);
    uint64_t v508 = *(void *)(a1 + 64);
    unint64_t v509 = (unint64_t)(v7 - 7);
    unint64_t v510 = (unint64_t)(v7 - 3);
    unint64_t v511 = (unint64_t)(v7 - 1);
    unint64_t v512 = (unint64_t)(v7 - 32);
    uint64_t v650 = v488 + 12;
    uint64_t v667 = v488 - 1;
    uint64_t v655 = v488 + 16;
    while (1)
    {
      unint64_t v513 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v499) >> v506);
      uint64_t v514 = *(unsigned int *)(v505 + v513);
      int v515 = v499 - v488;
      uint64_t v516 = 4 * ((-1640531535 * *(void *)v499) >> v507);
      uint64_t v517 = *(unsigned int *)(v508 + v516);
      *(_DWORD *)(v508 + v516) = v499 - v488;
      *(_DWORD *)(v505 + v513) = v499 - v488;
      v518 = (char *)(v499 + 1);
      if (!v26 || *(_DWORD *)&v518[-v26] != *(_DWORD *)(v499 + 1))
      {
        if (v514 > v676)
        {
          uint64_t v530 = v488 + v514;
          if (*(void *)(v488 + v514) == *(void *)v499)
          {
            v531 = v499 + 8;
            v532 = (_DWORD *)(v530 + 8);
            if (v509 <= (unint64_t)(v499 + 8))
            {
              v586 = v499 + 8;
              unint64_t v534 = v671;
              if ((unint64_t)v531 < v510)
              {
LABEL_843:
                if (*v532 == *(_DWORD *)v586)
                {
                  v586 += 4;
                  ++v532;
                }
              }
            }
            else
            {
              unint64_t v533 = *v531 ^ *(void *)v532;
              unint64_t v534 = v671;
              if (v533)
              {
                uint64_t v535 = (__clz(__rbit64(v533)) >> 3) + 8;
                v536 = &v499[-v530];
                if (v499 <= (unsigned __int8 *)a4) {
                  goto LABEL_898;
                }
LABEL_854:
                v587 = v499 - 1;
                v588 = (unsigned __int8 *)(v667 + v514);
                while (*v587 == *v588)
                {
                  ++v535;
                  v589 = v587 - 1;
                  if ((unint64_t)v588 > v534)
                  {
                    --v588;
                    BOOL v24 = v587-- > (unsigned __int8 *)a4;
                    if (v24) {
                      continue;
                    }
                  }
                  goto LABEL_917;
                }
LABEL_878:
                v518 = (char *)(v587 + 1);
LABEL_918:
                unint64_t v613 = v518 - a4;
                v614 = *(char **)(a2 + 24);
                if ((unint64_t)v518 <= v512)
                {
                  *(_OWORD *)v614 = *(_OWORD *)a4;
                  uint64_t v617 = *(void *)(a2 + 24);
                  if (v613 > 0x10)
                  {
                    v618 = (_OWORD *)(v617 + 16);
                    unint64_t v619 = v617 + v613;
                    v620 = (long long *)(a4 + 16);
                    do
                    {
                      long long v621 = *v620++;
                      *v618++ = v621;
                    }
                    while ((unint64_t)v618 < v619);
                    goto LABEL_960;
                  }
                  *(void *)(a2 + 24) = v617 + v613;
                  uint64_t v551 = *(void *)(a2 + 8);
LABEL_962:
                  __int16 v560 = v535 - 3;
                  *(_WORD *)(v551 + 4) = v613;
                  *(_DWORD *)uint64_t v551 = v536 + 3;
                  int v22 = v26;
                  uint64_t v26 = v536;
                  if ((unint64_t)(v535 - 3) < 0x10000) {
                    goto LABEL_803;
                  }
LABEL_802:
                  unint64_t v562 = (unint64_t)(v551 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v562;
                  uint64_t v26 = v536;
                  goto LABEL_803;
                }
                if ((unint64_t)a4 <= v512)
                {
                  v616 = &v614[v512 - (void)a4];
                  v622 = a4;
                  v623 = *(char **)(a2 + 24);
                  do
                  {
                    long long v624 = *(_OWORD *)v622;
                    v622 += 16;
                    *(_OWORD *)v623 = v624;
                    v623 += 16;
                  }
                  while (v623 < v616);
                  v615 = v7 - 32;
                  if (v512 >= (unint64_t)v518) {
                    goto LABEL_960;
                  }
                }
                else
                {
                  v615 = a4;
                  v616 = *(char **)(a2 + 24);
                  if (a4 >= v518)
                  {
LABEL_960:
                    *(void *)(a2 + 24) += v613;
                    uint64_t v551 = *(void *)(a2 + 8);
                    if (v613 >= 0x10000)
                    {
                      unint64_t v643 = (unint64_t)(v551 - *(void *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 1;
                      *(_DWORD *)(a2 + 76) = v643;
                    }
                    goto LABEL_962;
                  }
                }
                if ((unint64_t)a4 <= v512) {
                  v625 = v7 - 32;
                }
                else {
                  v625 = a4;
                }
                unint64_t v626 = v518 - v625;
                if ((unint64_t)(v518 - v625) < 8)
                {
                  v627 = v615;
                  goto LABEL_959;
                }
                if ((unint64_t)(v614 - a4) < 0x20)
                {
                  v627 = v615;
                  goto LABEL_959;
                }
                if (v626 >= 0x20)
                {
                  unint64_t v663 = v626 & 0xFFFFFFFFFFFFFFE0;
                  v629 = (long long *)(v615 + 16);
                  v630 = &v614[v625 - a4 + 16];
                  unint64_t v631 = v626 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v632 = *v629;
                    *((_OWORD *)v630 - 1) = *(v629 - 1);
                    *(_OWORD *)v630 = v632;
                    v629 += 2;
                    v630 += 32;
                    v631 -= 32;
                  }
                  while (v631);
                  unint64_t v628 = v626 & 0xFFFFFFFFFFFFFFE0;
                  if (v626 == v663) {
                    goto LABEL_960;
                  }
                  if ((v626 & 0x18) == 0)
                  {
                    v627 = &v615[v663];
                    v616 += v663;
                    do
                    {
LABEL_959:
                      char v642 = *v627++;
                      *v616++ = v642;
                    }
                    while (v627 < v518);
                    goto LABEL_960;
                  }
                }
                else
                {
                  unint64_t v628 = 0;
                }
                v616 += v626 & 0xFFFFFFFFFFFFFFF8;
                v627 = &v615[v626 & 0xFFFFFFFFFFFFFFF8];
                v633 = &v615[v628];
                v634 = &v614[&v625[v628] - a4];
                unint64_t v635 = v628 - (v626 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v636 = *(void *)v633;
                  v633 += 8;
                  *(void *)v634 = v636;
                  v634 += 8;
                  v635 += 8;
                }
                while (v635);
                if (v626 == (v626 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_960;
                }
                goto LABEL_959;
              }
              uint64_t v593 = 0;
              v594 = v499 + 16;
              while (1)
              {
                v595 = &v594[v593];
                if ((unint64_t)&v594[v593] >= v509) {
                  break;
                }
                uint64_t v596 = *(void *)(v655 + v514 + v593);
                v593 += 8;
                unint64_t v597 = *(void *)v595 ^ v596;
                if (v597)
                {
                  uint64_t v535 = v593 + (__clz(__rbit64(v597)) >> 3) + 8;
                  v536 = &v499[-v530];
                  if (v499 > (unsigned __int8 *)a4) {
                    goto LABEL_854;
                  }
                  goto LABEL_898;
                }
              }
              v586 = &v499[v593 + 16];
              v532 = (_DWORD *)(v655 + v514 + v593);
              if ((unint64_t)v586 < v510) {
                goto LABEL_843;
              }
            }
            if ((unint64_t)v586 >= v511)
            {
              if (v586 >= (unsigned __int8 *)v7) {
                goto LABEL_853;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v532 == *(unsigned __int16 *)v586)
              {
                v586 += 2;
                v532 = (_DWORD *)((char *)v532 + 2);
              }
              if (v586 >= (unsigned __int8 *)v7)
              {
LABEL_853:
                uint64_t v535 = v586 - v499;
                v536 = &v499[-v530];
                if (v499 <= (unsigned __int8 *)a4) {
                  goto LABEL_898;
                }
                goto LABEL_854;
              }
            }
            if (*(unsigned __int8 *)v532 == *v586) {
              ++v586;
            }
            goto LABEL_853;
          }
        }
        if (v517 <= v676 || (uint64_t v537 = v488 + v517, *(_DWORD *)(v488 + v517) != *(_DWORD *)v499))
        {
          _X10 = &v499[(v499 - (unsigned __int8 *)a4) >> 8];
          int v499 = _X10 + 1;
          _X10 += 257;
          __asm { PRFM            #0, [X10] }
          goto LABEL_748;
        }
        uint64_t v538 = *(void *)v518;
        unint64_t v539 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v518) >> v506);
        uint64_t v540 = *(unsigned int *)(v505 + v539);
        *(_DWORD *)(v505 + v539) = v515 + 1;
        if (v540 > v676)
        {
          uint64_t v541 = v488 + v540;
          if (*(void *)(v488 + v540) == v538)
          {
            v542 = (char *)(v499 + 9);
            v543 = (_DWORD *)(v541 + 8);
            if (v509 <= (unint64_t)(v499 + 9))
            {
              v611 = v499 + 9;
              unint64_t v545 = v671;
              if ((unint64_t)v542 < v510)
              {
LABEL_902:
                if (*v543 == *(_DWORD *)v611)
                {
                  v611 += 4;
                  ++v543;
                }
              }
            }
            else
            {
              unint64_t v544 = *(void *)v542 ^ *(void *)v543;
              unint64_t v545 = v671;
              if (v544)
              {
                uint64_t v535 = (__clz(__rbit64(v544)) >> 3) + 8;
                v536 = (unsigned __int8 *)&v518[-v541];
                if (v518 <= a4) {
                  goto LABEL_918;
                }
                goto LABEL_913;
              }
              uint64_t v637 = 0;
              v638 = v499 + 17;
              while (1)
              {
                v639 = &v638[v637];
                if ((unint64_t)&v638[v637] >= v509) {
                  break;
                }
                uint64_t v640 = *(void *)(v655 + v540 + v637);
                v637 += 8;
                unint64_t v641 = *(void *)v639 ^ v640;
                if (v641)
                {
                  uint64_t v535 = v637 + (__clz(__rbit64(v641)) >> 3) + 8;
                  v536 = (unsigned __int8 *)&v518[-v541];
                  if (v518 > a4) {
                    goto LABEL_913;
                  }
                  goto LABEL_918;
                }
              }
              v611 = &v499[v637 + 17];
              v543 = (_DWORD *)(v655 + v540 + v637);
              if ((unint64_t)v611 < v510) {
                goto LABEL_902;
              }
            }
            if ((unint64_t)v611 >= v511)
            {
              if (v611 >= (unsigned __int8 *)v7) {
                goto LABEL_912;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v543 == *(unsigned __int16 *)v611)
              {
                v611 += 2;
                v543 = (_DWORD *)((char *)v543 + 2);
              }
              if (v611 >= (unsigned __int8 *)v7)
              {
LABEL_912:
                uint64_t v535 = v611 - (unsigned __int8 *)v542 + 8;
                v536 = (unsigned __int8 *)&v518[-v541];
                if (v518 <= a4) {
                  goto LABEL_918;
                }
LABEL_913:
                v612 = (unsigned __int8 *)(v667 + v540);
                while (*v499 == *v612)
                {
                  ++v535;
                  v589 = v499 - 1;
                  if (v499 > (unsigned __int8 *)a4)
                  {
                    --v499;
                    BOOL v24 = (unint64_t)v612-- > v545;
                    if (v24) {
                      continue;
                    }
                  }
                  goto LABEL_917;
                }
                v518 = (char *)(v499 + 1);
                goto LABEL_918;
              }
            }
            if (*(unsigned __int8 *)v543 == *v611) {
              ++v611;
            }
            goto LABEL_912;
          }
        }
        v583 = v499 + 4;
        v584 = (_DWORD *)(v537 + 4);
        if (v509 <= (unint64_t)(v499 + 4))
        {
          v590 = v499 + 4;
          if ((unint64_t)v583 < v510)
          {
LABEL_862:
            if (*v584 == *(_DWORD *)v590)
            {
              v590 += 4;
              ++v584;
            }
          }
        }
        else
        {
          unint64_t v585 = *v583 ^ *(void *)v584;
          if (v585)
          {
            uint64_t v535 = (__clz(__rbit64(v585)) >> 3) + 4;
            v536 = &v499[-v537];
            if (v499 <= (unsigned __int8 *)a4)
            {
LABEL_898:
              v518 = (char *)v499;
              goto LABEL_918;
            }
LABEL_873:
            v587 = v499 - 1;
            v591 = (unsigned __int8 *)(v667 + v517);
            while (*v587 == *v591)
            {
              ++v535;
              v589 = v587 - 1;
              if ((unint64_t)v591 > v671)
              {
                --v591;
                BOOL v24 = v587-- > (unsigned __int8 *)a4;
                if (v24) {
                  continue;
                }
              }
LABEL_917:
              v518 = (char *)(v589 + 1);
              goto LABEL_918;
            }
            goto LABEL_878;
          }
          uint64_t v606 = 0;
          v607 = v499 + 12;
          while (1)
          {
            v608 = &v607[v606];
            if ((unint64_t)&v607[v606] >= v509) {
              break;
            }
            uint64_t v609 = *(void *)(v650 + v517 + v606);
            v606 += 8;
            unint64_t v610 = *(void *)v608 ^ v609;
            if (v610)
            {
              uint64_t v535 = v606 + (__clz(__rbit64(v610)) >> 3) + 4;
              v536 = &v499[-v537];
              if (v499 > (unsigned __int8 *)a4) {
                goto LABEL_873;
              }
              goto LABEL_898;
            }
          }
          v590 = &v499[v606 + 12];
          v584 = (_DWORD *)(v650 + v517 + v606);
          if ((unint64_t)v590 < v510) {
            goto LABEL_862;
          }
        }
        if ((unint64_t)v590 >= v511)
        {
          if (v590 >= (unsigned __int8 *)v7) {
            goto LABEL_872;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v584 == *(unsigned __int16 *)v590)
          {
            v590 += 2;
            v584 = (_DWORD *)((char *)v584 + 2);
          }
          if (v590 >= (unsigned __int8 *)v7)
          {
LABEL_872:
            uint64_t v535 = v590 - v499;
            v536 = &v499[-v537];
            if (v499 <= (unsigned __int8 *)a4) {
              goto LABEL_898;
            }
            goto LABEL_873;
          }
        }
        if (*(unsigned __int8 *)v584 == *v590) {
          ++v590;
        }
        goto LABEL_872;
      }
      v519 = (char *)(v499 + 5);
      v520 = &v499[-v26 + 5];
      if (v509 <= (unint64_t)(v499 + 5))
      {
        v548 = v499 + 5;
        if ((unint64_t)v519 < v510)
        {
LABEL_774:
          if (*(_DWORD *)v520 == *(_DWORD *)v548)
          {
            v548 += 4;
            v520 += 4;
          }
        }
      }
      else
      {
        unint64_t v521 = *(void *)v519 ^ *(void *)v520;
        if (v521)
        {
          unint64_t v522 = __clz(__rbit64(v521)) >> 3;
          unint64_t v523 = v518 - a4;
          v524 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v518 <= v512) {
            goto LABEL_754;
          }
          goto LABEL_785;
        }
        uint64_t v578 = 0;
        v579 = v499 + 13;
        while (1)
        {
          v580 = &v579[v578];
          if ((unint64_t)&v579[v578] >= v509) {
            break;
          }
          uint64_t v581 = *(void *)&v499[v578 + 13 - v26];
          v578 += 8;
          unint64_t v582 = *(void *)v580 ^ v581;
          if (v582)
          {
            unint64_t v522 = v578 + (__clz(__rbit64(v582)) >> 3);
            unint64_t v523 = v518 - a4;
            v524 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v518 > v512) {
              goto LABEL_785;
            }
            goto LABEL_754;
          }
        }
        v548 = &v499[v578 + 13];
        v520 = &v548[-v26];
        if ((unint64_t)v548 < v510) {
          goto LABEL_774;
        }
      }
      if ((unint64_t)v548 >= v511) {
        break;
      }
      if (*(unsigned __int16 *)v520 == *(unsigned __int16 *)v548)
      {
        v548 += 2;
        v520 += 2;
      }
      if (v548 < (unsigned __int8 *)v7) {
        goto LABEL_782;
      }
LABEL_784:
      unint64_t v522 = v548 - (unsigned __int8 *)v519;
      unint64_t v523 = v518 - a4;
      v524 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v518 <= v512)
      {
LABEL_754:
        _OWORD *v524 = *(_OWORD *)a4;
        uint64_t v525 = *(void *)(a2 + 24);
        if (v523 <= 0x10)
        {
          *(void *)(a2 + 24) = v525 + v523;
          uint64_t v551 = *(void *)(a2 + 8);
          goto LABEL_801;
        }
        v526 = (_OWORD *)(v525 + 16);
        unint64_t v527 = v525 + v523;
        v528 = (long long *)(a4 + 16);
        do
        {
          long long v529 = *v528++;
          *v526++ = v529;
        }
        while ((unint64_t)v526 < v527);
        goto LABEL_799;
      }
LABEL_785:
      if ((unint64_t)a4 <= v512)
      {
        v550 = (char *)v524 + v512 - (void)a4;
        v552 = a4;
        v553 = v524;
        do
        {
          long long v554 = *(_OWORD *)v552;
          v552 += 16;
          *v553++ = v554;
        }
        while (v553 < (_OWORD *)v550);
        v549 = v7 - 32;
        if (v512 >= (unint64_t)v518) {
          goto LABEL_799;
        }
      }
      else
      {
        v549 = a4;
        v550 = v524;
        if (a4 >= v518) {
          goto LABEL_799;
        }
      }
      if ((unint64_t)a4 <= v512) {
        v555 = v7 - 32;
      }
      else {
        v555 = a4;
      }
      unint64_t v556 = v499 - (unsigned __int8 *)v555 + 1;
      if (v556 < 8 || (unint64_t)((char *)v524 - a4) < 0x20)
      {
        v557 = v549;
        goto LABEL_798;
      }
      if (v556 >= 0x20)
      {
        unint64_t v662 = v556 & 0xFFFFFFFFFFFFFFE0;
        v598 = (long long *)(v549 + 16);
        v599 = (_OWORD *)((char *)v524 + v555 - a4 + 16);
        unint64_t v600 = v556 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v601 = *v598;
          *(v599 - 1) = *(v598 - 1);
          _OWORD *v599 = v601;
          v598 += 2;
          v599 += 2;
          v600 -= 32;
        }
        while (v600);
        unint64_t v592 = v556 & 0xFFFFFFFFFFFFFFE0;
        if (v556 == v662) {
          goto LABEL_799;
        }
        if ((v556 & 0x18) == 0)
        {
          v557 = &v549[v662];
          v550 += v662;
          do
          {
LABEL_798:
            char v558 = *v557++;
            *v550++ = v558;
          }
          while (v557 != &v549[v556]);
          goto LABEL_799;
        }
      }
      else
      {
        unint64_t v592 = 0;
      }
      v550 += v556 & 0xFFFFFFFFFFFFFFF8;
      v557 = &v549[v556 & 0xFFFFFFFFFFFFFFF8];
      v602 = &v549[v592];
      v603 = (void *)((char *)v524 + &v555[v592] - a4);
      unint64_t v604 = v592 - (v556 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v605 = *(void *)v602;
        v602 += 8;
        *v603++ = v605;
        v604 += 8;
      }
      while (v604);
      if (v556 != (v556 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_798;
      }
LABEL_799:
      *(void *)(a2 + 24) += v523;
      uint64_t v551 = *(void *)(a2 + 8);
      if (v523 >= 0x10000)
      {
        unint64_t v559 = (unint64_t)(v551 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v559;
      }
LABEL_801:
      uint64_t v535 = v522 + 4;
      __int16 v560 = v522 + 1;
      *(_WORD *)(v551 + 4) = v523;
      *(_DWORD *)uint64_t v551 = 1;
      unint64_t v561 = (v522 + 1) >> 16;
      v536 = v26;
      if (v561) {
        goto LABEL_802;
      }
LABEL_803:
      *(_WORD *)(v551 + 6) = v560;
      uint64_t v563 = v551 + 8;
      *(void *)(a2 + 8) = v551 + 8;
      a4 = &v518[v535];
      if ((unint64_t)&v518[v535] <= v496)
      {
        uint64_t v564 = (v515 + 2);
        *(_DWORD *)(v505 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v488 + v564)) >> v506)) = v564;
        *(_DWORD *)(v505 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(a4 - 2)) >> v506)) = a4 - 2 - v488;
        *(_DWORD *)(v508 + 4 * ((-1640531535 * *(_DWORD *)(v488 + v564)) >> v507)) = v564;
        *(_DWORD *)(v508 + 4 * ((-1640531535 * *(_DWORD *)(a4 - 1)) >> v507)) = a4 - 1 - v488;
        v565 = v26;
        v566 = v22;
        while (1)
        {
          uint64_t v26 = v566;
          v566 = v565;
          if (!v26 || *(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
          {
            int v22 = v26;
            uint64_t v26 = v565;
            goto LABEL_747;
          }
          v567 = a4 + 4;
          v568 = &a4[-v26 + 4];
          if (v509 <= (unint64_t)(a4 + 4)) {
            break;
          }
          unint64_t v569 = *(void *)v567 ^ *(void *)v568;
          if (!v569)
          {
            uint64_t v573 = 0;
            v574 = a4 + 12;
            while (1)
            {
              v575 = &v574[v573];
              if ((unint64_t)&v574[v573] >= v509) {
                break;
              }
              uint64_t v576 = *(void *)&a4[v573 + 12 - v26];
              v573 += 8;
              unint64_t v577 = *(void *)v575 ^ v576;
              if (v577)
              {
                unint64_t v570 = v573 + (__clz(__rbit64(v577)) >> 3);
                goto LABEL_823;
              }
            }
            v571 = &a4[v573 + 12];
            v568 = &v571[-v26];
            if ((unint64_t)v571 >= v510)
            {
LABEL_814:
              if ((unint64_t)v571 >= v511)
              {
                if (v571 < v7) {
                  goto LABEL_820;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v568 == *(unsigned __int16 *)v571)
                {
                  v571 += 2;
                  v568 += 2;
                }
                if (v571 >= v7) {
                  goto LABEL_822;
                }
LABEL_820:
                if (*v568 == *v571) {
                  ++v571;
                }
              }
LABEL_822:
              unint64_t v570 = v571 - v567;
              goto LABEL_823;
            }
LABEL_812:
            if (*(_DWORD *)v568 == *(_DWORD *)v571)
            {
              v571 += 4;
              v568 += 4;
            }
            goto LABEL_814;
          }
          unint64_t v570 = __clz(__rbit64(v569)) >> 3;
LABEL_823:
          *(_DWORD *)(v508 + 4 * ((-1640531535 * *(_DWORD *)a4) >> v507)) = a4 - v488;
          *(_DWORD *)(v505 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)a4) >> v506)) = a4 - v488;
          if ((unint64_t)a4 <= v512)
          {
            *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
            uint64_t v563 = *(void *)(a2 + 8);
          }
          *(_WORD *)(v563 + 4) = 0;
          *(_DWORD *)uint64_t v563 = 1;
          if (v570 + 1 >= 0x10000)
          {
            unint64_t v572 = (unint64_t)(v563 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v572;
          }
          *(_WORD *)(v563 + 6) = v570 + 1;
          v563 += 8;
          a4 += v570 + 4;
          *(void *)(a2 + 8) = v563;
          v565 = v26;
          int v22 = v566;
          int v499 = (unsigned __int8 *)a4;
          if ((unint64_t)a4 > v496) {
            goto LABEL_748;
          }
        }
        v571 = a4 + 4;
        if ((unint64_t)v567 >= v510) {
          goto LABEL_814;
        }
        goto LABEL_812;
      }
LABEL_747:
      int v499 = (unsigned __int8 *)a4;
LABEL_748:
      if ((unint64_t)v499 >= v496) {
        goto LABEL_964;
      }
    }
    if (v548 >= (unsigned __int8 *)v7) {
      goto LABEL_784;
    }
LABEL_782:
    if (*v520 == *v548) {
      ++v548;
    }
    goto LABEL_784;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = &a4[a5];
  int v8 = a4 + a5 - v6;
  unsigned int v9 = *(_DWORD *)(a1 + 24);
  unsigned int v10 = 1 << *(_DWORD *)(a1 + 192);
  BOOL v11 = v8 - v9 > v10;
  LODWORD(v12) = v8 - v10;
  BOOL v13 = *(_DWORD *)(a1 + 32) == 0;
  if (v13 && v11) {
    uint64_t v12 = v12;
  }
  else {
    uint64_t v12 = v9;
  }
  unsigned int v673 = v12;
  unint64_t v14 = v6 + v12;
  unint64_t v15 = (unint64_t)(v7 - 8);
  unsigned int v16 = *a3;
  unsigned int v17 = a3[1];
  if (a4 == v14) {
    unsigned int v18 = (unsigned __int8 *)(a4 + 1);
  }
  else {
    unsigned int v18 = (unsigned __int8 *)a4;
  }
  BOOL v19 = v18 - v6 - v9 > v10;
  int v20 = v18 - v6 - v10;
  if (!v13 || !v19) {
    int v20 = *(_DWORD *)(a1 + 24);
  }
  unsigned int v21 = v18 - v6 - v20;
  if (v17 <= v21) {
    int v22 = (unsigned __int8 *)v17;
  }
  else {
    int v22 = 0;
  }
  if (v17 <= v21) {
    unsigned int v23 = 0;
  }
  else {
    unsigned int v23 = a3[1];
  }
  BOOL v24 = v16 > v21;
  if (v16 <= v21) {
    unsigned int v25 = v23;
  }
  else {
    unsigned int v25 = *a3;
  }
  if (v24) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = (unsigned __int8 *)v16;
  }
  if ((unint64_t)v18 < v15)
  {
    unsigned int v651 = v25;
    unint64_t v668 = v14;
    v672 = a3;
    uint64_t v27 = *(void *)(a1 + 48);
    int v28 = 64 - *(_DWORD *)(a1 + 200);
    int v29 = 64 - *(_DWORD *)(a1 + 196);
    unint64_t v30 = (unint64_t)(v7 - 7);
    unint64_t v31 = (unint64_t)(v7 - 3);
    unint64_t v32 = (unint64_t)(v7 - 1);
    uint64_t v33 = *(void *)(a1 + 64);
    unint64_t v34 = (unint64_t)(v7 - 32);
    uint64_t v647 = v6 + 12;
    uint64_t v664 = v6 - 1;
    uint64_t v652 = v6 + 16;
    while (1)
    {
      uint64_t v35 = *(void *)v18;
      unint64_t v36 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v18) >> v28);
      uint64_t v37 = *(unsigned int *)(v27 + v36);
      int v38 = v18 - v6;
      unint64_t v39 = 4 * ((0xCF1BBCDCBFA56300 * *(void *)v18) >> v29);
      uint64_t v40 = *(unsigned int *)(v33 + v39);
      *(_DWORD *)(v33 + v39) = v18 - v6;
      *(_DWORD *)(v27 + v36) = v18 - v6;
      unsigned int v41 = (char *)(v18 + 1);
      if (!v26 || *(_DWORD *)&v41[-v26] != *(_DWORD *)(v18 + 1))
      {
        if (v37 > v673)
        {
          uint64_t v53 = v6 + v37;
          if (*(void *)(v6 + v37) == v35)
          {
            unint64_t v54 = v18 + 8;
            unint64_t v55 = (_DWORD *)(v53 + 8);
            if (v30 <= (unint64_t)(v18 + 8))
            {
              unsigned int v114 = v18 + 8;
              unint64_t v57 = v668;
              if ((unint64_t)v54 < v31)
              {
LABEL_123:
                if (*v55 == *(_DWORD *)v114)
                {
                  v114 += 4;
                  ++v55;
                }
              }
            }
            else
            {
              unint64_t v56 = *v54 ^ *(void *)v55;
              unint64_t v57 = v668;
              if (v56)
              {
                uint64_t v58 = (__clz(__rbit64(v56)) >> 3) + 8;
                unint64_t v59 = &v18[-v53];
                if (v18 <= (unsigned __int8 *)a4) {
                  goto LABEL_178;
                }
LABEL_134:
                BOOL v115 = v18 - 1;
                uint64_t v116 = (unsigned __int8 *)(v664 + v37);
                while (*v115 == *v116)
                {
                  ++v58;
                  BOOL v117 = v115 - 1;
                  if ((unint64_t)v116 > v57)
                  {
                    --v116;
                    BOOL v24 = v115-- > (unsigned __int8 *)a4;
                    if (v24) {
                      continue;
                    }
                  }
                  goto LABEL_197;
                }
LABEL_158:
                unsigned int v41 = (char *)(v115 + 1);
LABEL_198:
                unint64_t v141 = v41 - a4;
                int v142 = *(char **)(a2 + 24);
                if ((unint64_t)v41 <= v34)
                {
                  *(_OWORD *)int v142 = *(_OWORD *)a4;
                  uint64_t v145 = *(void *)(a2 + 24);
                  if (v141 > 0x10)
                  {
                    uint64_t v146 = (_OWORD *)(v145 + 16);
                    unint64_t v147 = v145 + v141;
                    int8x16_t v148 = (long long *)(a4 + 16);
                    do
                    {
                      long long v149 = *v148++;
                      *v146++ = v149;
                    }
                    while ((unint64_t)v146 < v147);
                    goto LABEL_240;
                  }
                  *(void *)(a2 + 24) = v145 + v141;
                  uint64_t v78 = *(void *)(a2 + 8);
LABEL_242:
                  __int16 v87 = v58 - 3;
                  *(_WORD *)(v78 + 4) = v141;
                  *(_DWORD *)uint64_t v78 = v59 + 3;
                  int v22 = v26;
                  uint64_t v26 = v59;
                  if ((unint64_t)(v58 - 3) < 0x10000) {
                    goto LABEL_83;
                  }
LABEL_82:
                  unint64_t v89 = (unint64_t)(v78 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v89;
                  uint64_t v26 = v59;
                  goto LABEL_83;
                }
                if ((unint64_t)a4 <= v34)
                {
                  uint64_t v144 = &v142[v34 - (void)a4];
                  unint64_t v150 = a4;
                  unint64_t v151 = *(char **)(a2 + 24);
                  do
                  {
                    long long v152 = *(_OWORD *)v150;
                    v150 += 16;
                    *(_OWORD *)unint64_t v151 = v152;
                    v151 += 16;
                  }
                  while (v151 < v144);
                  BOOL v143 = v7 - 32;
                  if (v34 >= (unint64_t)v41) {
                    goto LABEL_240;
                  }
                }
                else
                {
                  BOOL v143 = a4;
                  uint64_t v144 = *(char **)(a2 + 24);
                  if (a4 >= v41)
                  {
LABEL_240:
                    *(void *)(a2 + 24) += v141;
                    uint64_t v78 = *(void *)(a2 + 8);
                    if (v141 >= 0x10000)
                    {
                      unint64_t v171 = (unint64_t)(v78 - *(void *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 1;
                      *(_DWORD *)(a2 + 76) = v171;
                    }
                    goto LABEL_242;
                  }
                }
                if ((unint64_t)a4 <= v34) {
                  uint64_t v153 = v7 - 32;
                }
                else {
                  uint64_t v153 = a4;
                }
                unint64_t v154 = v41 - v153;
                if ((unint64_t)(v41 - v153) < 8)
                {
                  unint64_t v155 = v143;
                  goto LABEL_239;
                }
                if ((unint64_t)(v142 - a4) < 0x20)
                {
                  unint64_t v155 = v143;
                  goto LABEL_239;
                }
                if (v154 >= 0x20)
                {
                  unint64_t v657 = v154 & 0xFFFFFFFFFFFFFFE0;
                  long long v157 = (long long *)(v143 + 16);
                  unint64_t v158 = &v142[v153 - a4 + 16];
                  unint64_t v159 = v154 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v160 = *v157;
                    *((_OWORD *)v158 - 1) = *(v157 - 1);
                    *(_OWORD *)unint64_t v158 = v160;
                    v157 += 2;
                    v158 += 32;
                    v159 -= 32;
                  }
                  while (v159);
                  unint64_t v156 = v154 & 0xFFFFFFFFFFFFFFE0;
                  if (v154 == v657) {
                    goto LABEL_240;
                  }
                  if ((v154 & 0x18) == 0)
                  {
                    unint64_t v155 = &v143[v657];
                    v144 += v657;
                    do
                    {
LABEL_239:
                      char v170 = *v155++;
                      *v144++ = v170;
                    }
                    while (v155 < v41);
                    goto LABEL_240;
                  }
                }
                else
                {
                  unint64_t v156 = 0;
                }
                v144 += v154 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v155 = &v143[v154 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v161 = &v143[v156];
                int64x2_t v162 = &v142[&v153[v156] - a4];
                unint64_t v163 = v156 - (v154 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v164 = *(void *)v161;
                  v161 += 8;
                  *(void *)int64x2_t v162 = v164;
                  v162 += 8;
                  v163 += 8;
                }
                while (v163);
                if (v154 == (v154 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_240;
                }
                goto LABEL_239;
              }
              uint64_t v121 = 0;
              unsigned int v122 = v18 + 16;
              while (1)
              {
                BOOL v123 = &v122[v121];
                if ((unint64_t)&v122[v121] >= v30) {
                  break;
                }
                uint64_t v124 = *(void *)(v652 + v37 + v121);
                v121 += 8;
                unint64_t v125 = *(void *)v123 ^ v124;
                if (v125)
                {
                  uint64_t v58 = v121 + (__clz(__rbit64(v125)) >> 3) + 8;
                  unint64_t v59 = &v18[-v53];
                  if (v18 > (unsigned __int8 *)a4) {
                    goto LABEL_134;
                  }
                  goto LABEL_178;
                }
              }
              unsigned int v114 = &v18[v121 + 16];
              unint64_t v55 = (_DWORD *)(v652 + v37 + v121);
              if ((unint64_t)v114 < v31) {
                goto LABEL_123;
              }
            }
            if ((unint64_t)v114 >= v32)
            {
              if (v114 >= (unsigned __int8 *)v7) {
                goto LABEL_133;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v55 == *(unsigned __int16 *)v114)
              {
                v114 += 2;
                unint64_t v55 = (_DWORD *)((char *)v55 + 2);
              }
              if (v114 >= (unsigned __int8 *)v7)
              {
LABEL_133:
                uint64_t v58 = v114 - v18;
                unint64_t v59 = &v18[-v53];
                if (v18 <= (unsigned __int8 *)a4) {
                  goto LABEL_178;
                }
                goto LABEL_134;
              }
            }
            if (*(unsigned __int8 *)v55 == *v114) {
              ++v114;
            }
            goto LABEL_133;
          }
        }
        if (v40 <= v673 || (uint64_t v60 = v6 + v40, *(_DWORD *)(v6 + v40) != *(_DWORD *)v18))
        {
          _X10 = &v18[(v18 - (unsigned __int8 *)a4) >> 8];
          unsigned int v18 = _X10 + 1;
          _X10 += 257;
          __asm { PRFM            #0, [X10] }
          goto LABEL_28;
        }
        uint64_t v61 = *(void *)v41;
        unint64_t v62 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v41) >> v28);
        uint64_t v63 = *(unsigned int *)(v27 + v62);
        *(_DWORD *)(v27 + v62) = v38 + 1;
        if (v63 > v673)
        {
          uint64_t v64 = v6 + v63;
          if (*(void *)(v6 + v63) == v61)
          {
            unint64_t v65 = (char *)(v18 + 9);
            BOOL v66 = (_DWORD *)(v64 + 8);
            if (v30 <= (unint64_t)(v18 + 9))
            {
              uint64_t v139 = v18 + 9;
              unint64_t v68 = v668;
              if ((unint64_t)v65 < v31)
              {
LABEL_182:
                if (*v66 == *(_DWORD *)v139)
                {
                  v139 += 4;
                  ++v66;
                }
              }
            }
            else
            {
              unint64_t v67 = *(void *)v65 ^ *(void *)v66;
              unint64_t v68 = v668;
              if (v67)
              {
                uint64_t v58 = (__clz(__rbit64(v67)) >> 3) + 8;
                unint64_t v59 = (unsigned __int8 *)&v41[-v64];
                if (v41 <= a4) {
                  goto LABEL_198;
                }
                goto LABEL_193;
              }
              uint64_t v165 = 0;
              uint64_t v166 = v18 + 17;
              while (1)
              {
                int64x2_t v167 = &v166[v165];
                if ((unint64_t)&v166[v165] >= v30) {
                  break;
                }
                uint64_t v168 = *(void *)(v652 + v63 + v165);
                v165 += 8;
                unint64_t v169 = *(void *)v167 ^ v168;
                if (v169)
                {
                  uint64_t v58 = v165 + (__clz(__rbit64(v169)) >> 3) + 8;
                  unint64_t v59 = (unsigned __int8 *)&v41[-v64];
                  if (v41 > a4) {
                    goto LABEL_193;
                  }
                  goto LABEL_198;
                }
              }
              uint64_t v139 = &v18[v165 + 17];
              BOOL v66 = (_DWORD *)(v652 + v63 + v165);
              if ((unint64_t)v139 < v31) {
                goto LABEL_182;
              }
            }
            if ((unint64_t)v139 >= v32)
            {
              if (v139 >= (unsigned __int8 *)v7) {
                goto LABEL_192;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v66 == *(unsigned __int16 *)v139)
              {
                v139 += 2;
                BOOL v66 = (_DWORD *)((char *)v66 + 2);
              }
              if (v139 >= (unsigned __int8 *)v7)
              {
LABEL_192:
                uint64_t v58 = v139 - (unsigned __int8 *)v65 + 8;
                unint64_t v59 = (unsigned __int8 *)&v41[-v64];
                if (v41 <= a4) {
                  goto LABEL_198;
                }
LABEL_193:
                int v140 = (unsigned __int8 *)(v664 + v63);
                while (*v18 == *v140)
                {
                  ++v58;
                  BOOL v117 = v18 - 1;
                  if (v18 > (unsigned __int8 *)a4)
                  {
                    --v18;
                    BOOL v24 = (unint64_t)v140-- > v68;
                    if (v24) {
                      continue;
                    }
                  }
                  goto LABEL_197;
                }
                unsigned int v41 = (char *)(v18 + 1);
                goto LABEL_198;
              }
            }
            if (*(unsigned __int8 *)v66 == *v139) {
              ++v139;
            }
            goto LABEL_192;
          }
        }
        uint64_t v111 = v18 + 4;
        int v112 = (_DWORD *)(v60 + 4);
        if (v30 <= (unint64_t)(v18 + 4))
        {
          uint32x4_t v118 = v18 + 4;
          if ((unint64_t)v111 < v31)
          {
LABEL_142:
            if (*v112 == *(_DWORD *)v118)
            {
              v118 += 4;
              ++v112;
            }
          }
        }
        else
        {
          unint64_t v113 = *v111 ^ *(void *)v112;
          if (v113)
          {
            uint64_t v58 = (__clz(__rbit64(v113)) >> 3) + 4;
            unint64_t v59 = &v18[-v60];
            if (v18 <= (unsigned __int8 *)a4)
            {
LABEL_178:
              unsigned int v41 = (char *)v18;
              goto LABEL_198;
            }
LABEL_153:
            BOOL v115 = v18 - 1;
            unint64_t v119 = (unsigned __int8 *)(v664 + v40);
            while (*v115 == *v119)
            {
              ++v58;
              BOOL v117 = v115 - 1;
              if ((unint64_t)v119 > v668)
              {
                --v119;
                BOOL v24 = v115-- > (unsigned __int8 *)a4;
                if (v24) {
                  continue;
                }
              }
LABEL_197:
              unsigned int v41 = (char *)(v117 + 1);
              goto LABEL_198;
            }
            goto LABEL_158;
          }
          uint64_t v134 = 0;
          unsigned int v135 = v18 + 12;
          while (1)
          {
            unint64_t v136 = &v135[v134];
            if ((unint64_t)&v135[v134] >= v30) {
              break;
            }
            uint64_t v137 = *(void *)(v647 + v40 + v134);
            v134 += 8;
            unint64_t v138 = *(void *)v136 ^ v137;
            if (v138)
            {
              uint64_t v58 = v134 + (__clz(__rbit64(v138)) >> 3) + 4;
              unint64_t v59 = &v18[-v60];
              if (v18 > (unsigned __int8 *)a4) {
                goto LABEL_153;
              }
              goto LABEL_178;
            }
          }
          uint32x4_t v118 = &v18[v134 + 12];
          int v112 = (_DWORD *)(v647 + v40 + v134);
          if ((unint64_t)v118 < v31) {
            goto LABEL_142;
          }
        }
        if ((unint64_t)v118 >= v32)
        {
          if (v118 >= (unsigned __int8 *)v7) {
            goto LABEL_152;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v112 == *(unsigned __int16 *)v118)
          {
            v118 += 2;
            int v112 = (_DWORD *)((char *)v112 + 2);
          }
          if (v118 >= (unsigned __int8 *)v7)
          {
LABEL_152:
            uint64_t v58 = v118 - v18;
            unint64_t v59 = &v18[-v60];
            if (v18 <= (unsigned __int8 *)a4) {
              goto LABEL_178;
            }
            goto LABEL_153;
          }
        }
        if (*(unsigned __int8 *)v112 == *v118) {
          ++v118;
        }
        goto LABEL_152;
      }
      uint64_t v42 = (char *)(v18 + 5);
      uint64_t v43 = &v18[-v26 + 5];
      if (v30 <= (unint64_t)(v18 + 5))
      {
        uint64_t v75 = v18 + 5;
        if ((unint64_t)v42 < v31)
        {
LABEL_54:
          if (*(_DWORD *)v43 == *(_DWORD *)v75)
          {
            v75 += 4;
            v43 += 4;
          }
        }
      }
      else
      {
        unint64_t v44 = *(void *)v42 ^ *(void *)v43;
        if (v44)
        {
          unint64_t v45 = __clz(__rbit64(v44)) >> 3;
          unint64_t v46 = v41 - a4;
          BOOL v47 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v41 <= v34) {
            goto LABEL_34;
          }
          goto LABEL_65;
        }
        uint64_t v106 = 0;
        uint64_t v107 = v18 + 13;
        while (1)
        {
          unint64_t v108 = &v107[v106];
          if ((unint64_t)&v107[v106] >= v30) {
            break;
          }
          uint64_t v109 = *(void *)&v18[v106 + 13 - v26];
          v106 += 8;
          unint64_t v110 = *(void *)v108 ^ v109;
          if (v110)
          {
            unint64_t v45 = v106 + (__clz(__rbit64(v110)) >> 3);
            unint64_t v46 = v41 - a4;
            BOOL v47 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v41 > v34) {
              goto LABEL_65;
            }
            goto LABEL_34;
          }
        }
        uint64_t v75 = &v18[v106 + 13];
        uint64_t v43 = &v75[-v26];
        if ((unint64_t)v75 < v31) {
          goto LABEL_54;
        }
      }
      if ((unint64_t)v75 >= v32) {
        break;
      }
      if (*(unsigned __int16 *)v43 == *(unsigned __int16 *)v75)
      {
        v75 += 2;
        v43 += 2;
      }
      if (v75 < (unsigned __int8 *)v7) {
        goto LABEL_62;
      }
LABEL_64:
      unint64_t v45 = v75 - (unsigned __int8 *)v42;
      unint64_t v46 = v41 - a4;
      BOOL v47 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v41 <= v34)
      {
LABEL_34:
        *BOOL v47 = *(_OWORD *)a4;
        uint64_t v48 = *(void *)(a2 + 24);
        if (v46 <= 0x10)
        {
          *(void *)(a2 + 24) = v48 + v46;
          uint64_t v78 = *(void *)(a2 + 8);
          goto LABEL_81;
        }
        int v49 = (_OWORD *)(v48 + 16);
        unint64_t v50 = v48 + v46;
        uint64_t v51 = (long long *)(a4 + 16);
        do
        {
          long long v52 = *v51++;
          *v49++ = v52;
        }
        while ((unint64_t)v49 < v50);
        goto LABEL_79;
      }
LABEL_65:
      if ((unint64_t)a4 <= v34)
      {
        unint64_t v77 = (char *)v47 + v34 - (void)a4;
        uint64_t v79 = a4;
        uint64_t v80 = v47;
        do
        {
          long long v81 = *(_OWORD *)v79;
          v79 += 16;
          *v80++ = v81;
        }
        while (v80 < (_OWORD *)v77);
        unint64_t v76 = v7 - 32;
        if (v34 >= (unint64_t)v41) {
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v76 = a4;
        unint64_t v77 = v47;
        if (a4 >= v41) {
          goto LABEL_79;
        }
      }
      if ((unint64_t)a4 <= v34) {
        unint64_t v82 = v7 - 32;
      }
      else {
        unint64_t v82 = a4;
      }
      unint64_t v83 = v18 - (unsigned __int8 *)v82 + 1;
      if (v83 < 8 || (unint64_t)((char *)v47 - a4) < 0x20)
      {
        unsigned int v84 = v76;
        goto LABEL_78;
      }
      if (v83 >= 0x20)
      {
        unint64_t v656 = v83 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v126 = (long long *)(v76 + 16);
        uint64_t v127 = (_OWORD *)((char *)v47 + v82 - a4 + 16);
        unint64_t v128 = v83 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v129 = *v126;
          *(v127 - 1) = *(v126 - 1);
          *uint64_t v127 = v129;
          v126 += 2;
          v127 += 2;
          v128 -= 32;
        }
        while (v128);
        unint64_t v120 = v83 & 0xFFFFFFFFFFFFFFE0;
        if (v83 == v656) {
          goto LABEL_79;
        }
        if ((v83 & 0x18) == 0)
        {
          unsigned int v84 = &v76[v656];
          v77 += v656;
          do
          {
LABEL_78:
            char v85 = *v84++;
            *v77++ = v85;
          }
          while (v84 != &v76[v83]);
          goto LABEL_79;
        }
      }
      else
      {
        unint64_t v120 = 0;
      }
      v77 += v83 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v84 = &v76[v83 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v130 = &v76[v120];
      unint64_t v131 = (void *)((char *)v47 + &v82[v120] - a4);
      unint64_t v132 = v120 - (v83 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v133 = *(void *)v130;
        v130 += 8;
        *v131++ = v133;
        v132 += 8;
      }
      while (v132);
      if (v83 != (v83 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_78;
      }
LABEL_79:
      *(void *)(a2 + 24) += v46;
      uint64_t v78 = *(void *)(a2 + 8);
      if (v46 >= 0x10000)
      {
        unint64_t v86 = (unint64_t)(v78 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v86;
      }
LABEL_81:
      uint64_t v58 = v45 + 4;
      __int16 v87 = v45 + 1;
      *(_WORD *)(v78 + 4) = v46;
      *(_DWORD *)uint64_t v78 = 1;
      unint64_t v88 = (v45 + 1) >> 16;
      unint64_t v59 = v26;
      if (v88) {
        goto LABEL_82;
      }
LABEL_83:
      *(_WORD *)(v78 + 6) = v87;
      uint64_t v90 = v78 + 8;
      *(void *)(a2 + 8) = v78 + 8;
      a4 = &v41[v58];
      if ((unint64_t)&v41[v58] <= v15)
      {
        uint64_t v91 = *(void *)(v6 + (v38 + 2));
        *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCB7A56463 * v91) >> v28)) = v38 + 2;
        *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(a4 - 2)) >> v28)) = a4 - 2 - v6;
        *(_DWORD *)(v33 + 4 * ((0xCF1BBCDCBFA56300 * v91) >> v29)) = v38 + 2;
        *(_DWORD *)(v33 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(a4 - 1)) >> v29)) = a4 - 1 - v6;
        char v92 = v26;
        unint64_t v93 = v22;
        while (1)
        {
          uint64_t v26 = v93;
          unint64_t v93 = v92;
          if (!v26 || *(_DWORD *)a4 != *(_DWORD *)&a4[-v26])
          {
            int v22 = v26;
            uint64_t v26 = v92;
            goto LABEL_27;
          }
          unint64_t v94 = a4 + 4;
          unint64_t v95 = &a4[-v26 + 4];
          if (v30 <= (unint64_t)(a4 + 4)) {
            break;
          }
          unint64_t v96 = *(void *)v94 ^ *(void *)v95;
          if (!v96)
          {
            uint64_t v101 = 0;
            unint64_t v102 = a4 + 12;
            while (1)
            {
              uint64_t v103 = &v102[v101];
              if ((unint64_t)&v102[v101] >= v30) {
                break;
              }
              uint64_t v104 = *(void *)&a4[v101 + 12 - v26];
              v101 += 8;
              unint64_t v105 = *(void *)v103 ^ v104;
              if (v105)
              {
                unint64_t v97 = v101 + (__clz(__rbit64(v105)) >> 3);
                goto LABEL_103;
              }
            }
            uint64_t v98 = &a4[v101 + 12];
            unint64_t v95 = &v98[-v26];
            if ((unint64_t)v98 >= v31)
            {
LABEL_94:
              if ((unint64_t)v98 >= v32)
              {
                if (v98 < v7) {
                  goto LABEL_100;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v95 == *(unsigned __int16 *)v98)
                {
                  v98 += 2;
                  v95 += 2;
                }
                if (v98 >= v7) {
                  goto LABEL_102;
                }
LABEL_100:
                if (*v95 == *v98) {
                  ++v98;
                }
              }
LABEL_102:
              unint64_t v97 = v98 - v94;
              goto LABEL_103;
            }
LABEL_92:
            if (*(_DWORD *)v95 == *(_DWORD *)v98)
            {
              v98 += 4;
              v95 += 4;
            }
            goto LABEL_94;
          }
          unint64_t v97 = __clz(__rbit64(v96)) >> 3;
LABEL_103:
          uint64_t v99 = *(void *)a4;
          *(_DWORD *)(v33 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)a4) >> v29)) = a4 - v6;
          *(_DWORD *)(v27 + 4 * ((0xCF1BBCDCB7A56463 * v99) >> v28)) = a4 - v6;
          if ((unint64_t)a4 <= v34)
          {
            *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
            uint64_t v90 = *(void *)(a2 + 8);
          }
          *(_WORD *)(v90 + 4) = 0;
          *(_DWORD *)uint64_t v90 = 1;
          if (v97 + 1 >= 0x10000)
          {
            unint64_t v100 = (unint64_t)(v90 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v100;
          }
          *(_WORD *)(v90 + 6) = v97 + 1;
          v90 += 8;
          a4 += v97 + 4;
          *(void *)(a2 + 8) = v90;
          char v92 = v26;
          int v22 = v93;
          unsigned int v18 = (unsigned __int8 *)a4;
          if ((unint64_t)a4 > v15) {
            goto LABEL_28;
          }
        }
        uint64_t v98 = a4 + 4;
        if ((unint64_t)v94 >= v31) {
          goto LABEL_94;
        }
        goto LABEL_92;
      }
LABEL_27:
      unsigned int v18 = (unsigned __int8 *)a4;
LABEL_28:
      if ((unint64_t)v18 >= v15) {
        goto LABEL_964;
      }
    }
    if (v75 >= (unsigned __int8 *)v7) {
      goto LABEL_64;
    }
LABEL_62:
    if (*v43 == *v75) {
      ++v75;
    }
    goto LABEL_64;
  }
LABEL_965:
  if (v26) {
    unsigned int v644 = v26;
  }
  else {
    unsigned int v644 = v25;
  }
  if (v22) {
    unsigned int v645 = v22;
  }
  else {
    unsigned int v645 = v25;
  }
  *a3 = v644;
  a3[1] = v645;
  return v7 - a4;
}

int64_t ZSTD_compressBlock_greedy(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  int v5 = &a4[a5];
  unint64_t v6 = (unint64_t)&a4[a5 - 8];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *a3;
  unsigned int v9 = a3[1];
  unint64_t v168 = v7 + v8;
  if (a4 == v7 + v8) {
    BOOL v11 = a4 + 1;
  }
  else {
    BOOL v11 = a4;
  }
  int v12 = v11 - v7;
  unsigned int v13 = 1 << *(_DWORD *)(a1 + 192);
  if (v12 - (int)v8 > v13 && *(_DWORD *)(a1 + 32) == 0) {
    LODWORD(v8) = v12 - v13;
  }
  unsigned int v15 = v12 - v8;
  if (v9 <= v15) {
    uint64_t v16 = v9;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v10 <= v15) {
    uint64_t v17 = v10;
  }
  else {
    uint64_t v17 = 0;
  }
  if ((unint64_t)v11 < v6)
  {
    unsigned int v164 = v15;
    unsigned int v165 = a3[1];
    unsigned int v166 = *a3;
    int64x2_t v167 = a3;
    unint64_t v18 = (unint64_t)(v5 - 7);
    unint64_t v19 = (unint64_t)(v5 - 3);
    unint64_t v20 = (unint64_t)(v5 - 1);
    unint64_t v21 = (unint64_t)(v5 - 32);
    while (1)
    {
      if (v17)
      {
        int v22 = v11 + 1;
        if (*(_DWORD *)&v11[-v17 + 1] == *(_DWORD *)(v11 + 1)) {
          break;
        }
      }
      int v27 = *(_DWORD *)(a1 + 208);
      if ((v27 - 6) < 2)
      {
        uint64_t v28 = *(void *)(a1 + 64);
        int v29 = *(_DWORD *)(a1 + 196);
        unsigned int v30 = 1 << v29;
        uint64_t v31 = *(void *)(a1 + 8);
        unsigned int v32 = v11 - v31;
        unsigned int v33 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v11 - (int)v31 - *(_DWORD *)(a1 + 28) > v33 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v35 = v11 - v31 - v33;
        }
        else {
          unsigned int v35 = *(_DWORD *)(a1 + 28);
        }
        if (v32 >= v30) {
          unsigned int v36 = v32 - v30;
        }
        else {
          unsigned int v36 = 0;
        }
        uint64_t v37 = *(void *)(a1 + 48);
        int v38 = *(_DWORD *)(a1 + 204);
        uint64_t v39 = *(unsigned int *)(a1 + 36);
        int v40 = 64 - *(_DWORD *)(a1 + 200);
        if (v39 < v32)
        {
          int v41 = ~(-1 << v29);
          do
          {
            unint64_t v42 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v31 + v39)) >> v40);
            *(_DWORD *)(v28 + 4 * (v39 & v41)) = *(_DWORD *)(v37 + v42);
            *(_DWORD *)(v37 + v42) = v39++;
          }
          while (v11 - v31 != v39);
        }
        *(_DWORD *)(a1 + 36) = v32;
        unsigned int v43 = *(_DWORD *)(v37 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v11) >> v40));
        if (v43 < v35) {
          goto LABEL_17;
        }
        unsigned int v44 = v30 - 1;
        int v45 = 1 << v38;
        unsigned int v46 = v32 + 2;
        BOOL v47 = v11 + 8;
        uint64_t v169 = v31 + 8;
        uint64_t v48 = 999999999;
        unint64_t v49 = 3;
        while (1)
        {
          unint64_t v50 = (void *)(v31 + v43);
          if (*((unsigned __int8 *)v50 + v49) != v11[v49]) {
            goto LABEL_53;
          }
          if (v18 <= (unint64_t)v11) {
            break;
          }
          unint64_t v51 = *v50 ^ *(void *)v11;
          if (v51)
          {
            unint64_t v52 = __clz(__rbit64(v51)) >> 3;
            if (v52 > v49) {
              goto LABEL_52;
            }
            goto LABEL_53;
          }
          uint64_t v54 = 0;
          do
          {
            uint64_t v53 = &v47[v54];
            if ((unint64_t)&v47[v54] >= v18)
            {
              unint64_t v50 = (void *)(v169 + v43 + v54);
              if ((unint64_t)v53 >= v19) {
                goto LABEL_47;
              }
              goto LABEL_45;
            }
            uint64_t v55 = *(void *)(v169 + v43 + v54);
            v54 += 8;
            unint64_t v56 = *(void *)v53 ^ v55;
          }
          while (!v56);
          unint64_t v52 = v54 + (__clz(__rbit64(v56)) >> 3);
          if (v52 <= v49) {
            goto LABEL_53;
          }
LABEL_52:
          uint64_t v48 = v46 - v43;
          unint64_t v49 = v52;
          if (&v11[v52] == v5) {
            goto LABEL_179;
          }
LABEL_53:
          if (v43 > v36)
          {
            if (--v45)
            {
              unsigned int v43 = *(_DWORD *)(v28 + 4 * (v43 & v44));
              if (v43 >= v35) {
                continue;
              }
            }
          }
          goto LABEL_178;
        }
        uint64_t v53 = v11;
        if ((unint64_t)v11 >= v19) {
          goto LABEL_47;
        }
LABEL_45:
        if (*(_DWORD *)v50 == *(_DWORD *)v53)
        {
          v53 += 4;
          unint64_t v50 = (void *)((char *)v50 + 4);
        }
LABEL_47:
        if ((unint64_t)v53 < v20)
        {
          if (*(unsigned __int16 *)v50 == *(unsigned __int16 *)v53)
          {
            v53 += 2;
            unint64_t v50 = (void *)((char *)v50 + 2);
          }
          if (v53 < v5)
          {
LABEL_49:
            if (*(unsigned __int8 *)v50 == *v53) {
              ++v53;
            }
          }
        }
        else if (v53 < v5)
        {
          goto LABEL_49;
        }
        unint64_t v52 = v53 - v11;
        if (v52 > v49) {
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      if (v27 == 5)
      {
        uint64_t v62 = *(void *)(a1 + 64);
        int v63 = *(_DWORD *)(a1 + 196);
        unsigned int v64 = 1 << v63;
        uint64_t v65 = *(void *)(a1 + 8);
        unsigned int v66 = v11 - v65;
        unsigned int v67 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v11 - (int)v65 - *(_DWORD *)(a1 + 28) > v67 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v69 = v11 - v65 - v67;
        }
        else {
          unsigned int v69 = *(_DWORD *)(a1 + 28);
        }
        if (v66 >= v64) {
          unsigned int v70 = v66 - v64;
        }
        else {
          unsigned int v70 = 0;
        }
        uint64_t v71 = *(void *)(a1 + 48);
        int v72 = *(_DWORD *)(a1 + 204);
        uint64_t v73 = *(unsigned int *)(a1 + 36);
        int v74 = 64 - *(_DWORD *)(a1 + 200);
        if (v73 < v66)
        {
          int v75 = ~(-1 << v63);
          do
          {
            unint64_t v76 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v65 + v73)) >> v74);
            *(_DWORD *)(v62 + 4 * (v73 & v75)) = *(_DWORD *)(v71 + v76);
            *(_DWORD *)(v71 + v76) = v73++;
          }
          while (v11 - v65 != v73);
        }
        *(_DWORD *)(a1 + 36) = v66;
        unsigned int v77 = *(_DWORD *)(v71 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v11) >> v74));
        if (v77 < v69) {
          goto LABEL_17;
        }
        unsigned int v78 = v64 - 1;
        int v79 = 1 << v72;
        unsigned int v80 = v66 + 2;
        long long v81 = v11 + 8;
        uint64_t v170 = v65 + 8;
        uint64_t v48 = 999999999;
        unint64_t v49 = 3;
        while (1)
        {
          unint64_t v82 = (void *)(v65 + v77);
          if (*((unsigned __int8 *)v82 + v49) != v11[v49]) {
            goto LABEL_109;
          }
          if (v18 <= (unint64_t)v11) {
            break;
          }
          unint64_t v83 = *v82 ^ *(void *)v11;
          if (v83)
          {
            unint64_t v52 = __clz(__rbit64(v83)) >> 3;
            if (v52 > v49) {
              goto LABEL_108;
            }
            goto LABEL_109;
          }
          uint64_t v85 = 0;
          do
          {
            unsigned int v84 = &v81[v85];
            if ((unint64_t)&v81[v85] >= v18)
            {
              unint64_t v82 = (void *)(v170 + v77 + v85);
              if ((unint64_t)v84 >= v19) {
                goto LABEL_103;
              }
              goto LABEL_101;
            }
            uint64_t v86 = *(void *)(v170 + v77 + v85);
            v85 += 8;
            unint64_t v87 = *(void *)v84 ^ v86;
          }
          while (!v87);
          unint64_t v52 = v85 + (__clz(__rbit64(v87)) >> 3);
          if (v52 <= v49) {
            goto LABEL_109;
          }
LABEL_108:
          uint64_t v48 = v80 - v77;
          unint64_t v49 = v52;
          if (&v11[v52] == v5) {
            goto LABEL_179;
          }
LABEL_109:
          if (v77 > v70)
          {
            if (--v79)
            {
              unsigned int v77 = *(_DWORD *)(v62 + 4 * (v77 & v78));
              if (v77 >= v69) {
                continue;
              }
            }
          }
          goto LABEL_178;
        }
        unsigned int v84 = v11;
        if ((unint64_t)v11 >= v19) {
          goto LABEL_103;
        }
LABEL_101:
        if (*(_DWORD *)v82 == *(_DWORD *)v84)
        {
          v84 += 4;
          unint64_t v82 = (void *)((char *)v82 + 4);
        }
LABEL_103:
        if ((unint64_t)v84 < v20)
        {
          if (*(unsigned __int16 *)v82 == *(unsigned __int16 *)v84)
          {
            v84 += 2;
            unint64_t v82 = (void *)((char *)v82 + 2);
          }
          if (v84 < v5)
          {
LABEL_105:
            if (*(unsigned __int8 *)v82 == *v84) {
              ++v84;
            }
          }
        }
        else if (v84 < v5)
        {
          goto LABEL_105;
        }
        unint64_t v52 = v84 - v11;
        if (v52 > v49) {
          goto LABEL_108;
        }
        goto LABEL_109;
      }
      uint64_t v94 = *(void *)(a1 + 64);
      int v95 = *(_DWORD *)(a1 + 196);
      unsigned int v96 = 1 << v95;
      uint64_t v97 = *(void *)(a1 + 8);
      unsigned int v98 = v11 - v97;
      unsigned int v99 = 1 << *(_DWORD *)(a1 + 192);
      if ((int)v11 - (int)v97 - *(_DWORD *)(a1 + 28) > v99 && *(_DWORD *)(a1 + 32) == 0) {
        unsigned int v101 = v11 - v97 - v99;
      }
      else {
        unsigned int v101 = *(_DWORD *)(a1 + 28);
      }
      if (v98 >= v96) {
        unsigned int v102 = v98 - v96;
      }
      else {
        unsigned int v102 = 0;
      }
      uint64_t v103 = *(void *)(a1 + 48);
      int v104 = *(_DWORD *)(a1 + 204);
      uint64_t v105 = *(unsigned int *)(a1 + 36);
      int v106 = 32 - *(_DWORD *)(a1 + 200);
      if (v105 < v98)
      {
        do
        {
          uint64_t v107 = 4 * ((-1640531535 * *(_DWORD *)(v97 + v105)) >> v106);
          *(_DWORD *)(v94 + 4 * (v105 & ~(-1 << v95))) = *(_DWORD *)(v103 + v107);
          *(_DWORD *)(v103 + v107) = v105++;
        }
        while (v11 - v97 != v105);
      }
      *(_DWORD *)(a1 + 36) = v98;
      unsigned int v108 = *(_DWORD *)(v103 + 4 * ((-1640531535 * *(_DWORD *)v11) >> v106));
      if (v108 < v101) {
        goto LABEL_17;
      }
      unsigned int v109 = v96 - 1;
      int v110 = 1 << v104;
      unsigned int v111 = v98 + 2;
      int v112 = v11 + 8;
      uint64_t v113 = v97 + 8;
      uint64_t v48 = 999999999;
      unint64_t v49 = 3;
      while (1)
      {
        unsigned int v114 = (_DWORD *)(v97 + v108);
        if (*((unsigned __int8 *)v114 + v49) != v11[v49]) {
          goto LABEL_163;
        }
        if (v18 <= (unint64_t)v11)
        {
          uint64_t v116 = v11;
          if ((unint64_t)v11 < v19)
          {
LABEL_155:
            if (*v114 == *(_DWORD *)v116)
            {
              v116 += 4;
              ++v114;
            }
          }
LABEL_157:
          if ((unint64_t)v116 < v20)
          {
            if (*(unsigned __int16 *)v114 == *(unsigned __int16 *)v116)
            {
              v116 += 2;
              unsigned int v114 = (_DWORD *)((char *)v114 + 2);
            }
            if (v116 < v5)
            {
LABEL_159:
              if (*(unsigned __int8 *)v114 == *v116) {
                ++v116;
              }
            }
          }
          else if (v116 < v5)
          {
            goto LABEL_159;
          }
          unint64_t v52 = v116 - v11;
          if (v116 - v11 > v49) {
            goto LABEL_162;
          }
          goto LABEL_163;
        }
        unint64_t v115 = *(void *)v11 ^ *(void *)v114;
        if (v115)
        {
          unint64_t v52 = __clz(__rbit64(v115)) >> 3;
          if (v52 > v49) {
            goto LABEL_162;
          }
          goto LABEL_163;
        }
        uint64_t v117 = 0;
        do
        {
          uint64_t v116 = &v112[v117];
          if ((unint64_t)&v112[v117] >= v18)
          {
            unsigned int v114 = (_DWORD *)(v113 + v108 + v117);
            if ((unint64_t)v116 < v19) {
              goto LABEL_155;
            }
            goto LABEL_157;
          }
          uint64_t v118 = *(void *)(v113 + v108 + v117);
          v117 += 8;
          unint64_t v119 = *(void *)v116 ^ v118;
        }
        while (!v119);
        unint64_t v52 = v117 + (__clz(__rbit64(v119)) >> 3);
        if (v52 <= v49) {
          goto LABEL_163;
        }
LABEL_162:
        uint64_t v48 = v111 - v108;
        unint64_t v49 = v52;
        if (&v11[v52] == v5) {
          break;
        }
LABEL_163:
        if (v108 > v102)
        {
          if (--v110)
          {
            unsigned int v108 = *(_DWORD *)(v94 + 4 * (v108 & v109));
            if (v108 >= v101) {
              continue;
            }
          }
        }
LABEL_178:
        unint64_t v52 = v49;
        if (v49) {
          break;
        }
LABEL_17:
        v11 += ((v11 - a4) >> 8) + 1;
        goto LABEL_18;
      }
LABEL_179:
      if (v52 <= 3) {
        goto LABEL_17;
      }
      if (!v48)
      {
        unint64_t v58 = v11 - a4;
        unint64_t v59 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v11 <= v21) {
          goto LABEL_211;
        }
LABEL_77:
        if ((unint64_t)a4 <= v21)
        {
          uint64_t v61 = (char *)v59 + v21 - (void)a4;
          unint64_t v88 = a4;
          unint64_t v89 = v59;
          do
          {
            long long v90 = *(_OWORD *)v88;
            v88 += 16;
            *v89++ = v90;
          }
          while (v89 < (_OWORD *)v61);
          uint64_t v60 = v5 - 32;
          if (v21 >= (unint64_t)v11) {
            goto LABEL_219;
          }
        }
        else
        {
          uint64_t v60 = a4;
          uint64_t v61 = v59;
          if (a4 >= v11) {
            goto LABEL_219;
          }
        }
        if ((unint64_t)a4 <= v21) {
          uint64_t v91 = v5 - 32;
        }
        else {
          uint64_t v91 = a4;
        }
        unint64_t v92 = v11 - v91;
        if ((unint64_t)(v11 - v91) < 8)
        {
          unint64_t v93 = v60;
          goto LABEL_218;
        }
        if ((unint64_t)((char *)v59 - a4) < 0x20)
        {
          unint64_t v93 = v60;
          goto LABEL_218;
        }
        if (v92 < 0x20)
        {
          unint64_t v128 = 0;
          goto LABEL_205;
        }
        unint64_t v128 = v92 & 0xFFFFFFFFFFFFFFE0;
        long long v129 = (long long *)(v60 + 16);
        unint64_t v130 = (_OWORD *)((char *)v59 + v91 - a4 + 16);
        unint64_t v131 = v92 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v132 = *v129;
          *(v130 - 1) = *(v129 - 1);
          *unint64_t v130 = v132;
          v129 += 2;
          v130 += 2;
          v131 -= 32;
        }
        while (v131);
        if (v92 == v128) {
          goto LABEL_219;
        }
        if ((v92 & 0x18) != 0)
        {
LABEL_205:
          v61 += v92 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v93 = &v60[v92 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v133 = &v60[v128];
          uint64_t v134 = (void *)((char *)v59 + &v91[v128] - a4);
          unint64_t v135 = v128 - (v92 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v136 = *(void *)v133;
            v133 += 8;
            *v134++ = v136;
            v135 += 8;
          }
          while (v135);
          if (v92 == (v92 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_219;
          }
        }
        else
        {
          unint64_t v93 = &v60[v128];
          v61 += v128;
        }
        do
        {
LABEL_218:
          char v144 = *v93++;
          *v61++ = v144;
        }
        while (v93 < v11);
        goto LABEL_219;
      }
      if (v11 <= a4 || (unint64_t)&v11[-v48 + 2] <= v168)
      {
        unint64_t v121 = (unint64_t)v11;
      }
      else
      {
        uint64_t v120 = 1 - v48;
        unint64_t v121 = (unint64_t)v11;
        while (1)
        {
          int v122 = *(unsigned __int8 *)--v121;
          if (v122 != v11[v120]) {
            break;
          }
          ++v52;
          if (v121 > (unint64_t)a4)
          {
            unint64_t v123 = (unint64_t)&v11[v120];
            BOOL v11 = (char *)v121;
            if (v123 > v168) {
              continue;
            }
          }
          goto LABEL_210;
        }
        unint64_t v121 = (unint64_t)v11;
      }
LABEL_210:
      uint64_t v16 = v17;
      uint64_t v17 = (v48 - 2);
      BOOL v11 = (char *)v121;
      unint64_t v58 = v121 - (void)a4;
      unint64_t v59 = *(_OWORD **)(a2 + 24);
      if (v121 > v21) {
        goto LABEL_77;
      }
LABEL_211:
      *unint64_t v59 = *(_OWORD *)a4;
      uint64_t v137 = *(void *)(a2 + 24);
      if (v58 <= 0x10)
      {
        *(void *)(a2 + 24) = v137 + v58;
        uint64_t v142 = *(void *)(a2 + 8);
        __int16 v143 = v52 - 3;
        *(_WORD *)(v142 + 4) = v58;
        *(_DWORD *)uint64_t v142 = v48 + 1;
        if (v52 - 3 < 0x10000) {
          goto LABEL_221;
        }
        goto LABEL_224;
      }
      unint64_t v138 = (_OWORD *)(v137 + 16);
      unint64_t v139 = v137 + v58;
      int v140 = (long long *)(a4 + 16);
      do
      {
        long long v141 = *v140++;
        *v138++ = v141;
      }
      while ((unint64_t)v138 < v139);
LABEL_219:
      *(void *)(a2 + 24) += v58;
      uint64_t v142 = *(void *)(a2 + 8);
      if (v58 >= 0x10000)
      {
        unint64_t v146 = (unint64_t)(v142 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v146;
        __int16 v143 = v52 - 3;
        *(_WORD *)(v142 + 4) = v58;
        *(_DWORD *)uint64_t v142 = v48 + 1;
        if (v52 - 3 >= 0x10000) {
          goto LABEL_224;
        }
LABEL_221:
        *(_WORD *)(v142 + 6) = v143;
        uint64_t v145 = v142 + 8;
        *(void *)(a2 + 8) = v142 + 8;
        a4 = &v11[v52];
        if (v16) {
          goto LABEL_225;
        }
LABEL_258:
        BOOL v11 = a4;
        goto LABEL_18;
      }
      __int16 v143 = v52 - 3;
      *(_WORD *)(v142 + 4) = v58;
      *(_DWORD *)uint64_t v142 = v48 + 1;
      if (v52 - 3 < 0x10000) {
        goto LABEL_221;
      }
LABEL_224:
      unint64_t v147 = (unint64_t)(v142 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v147;
      *(_WORD *)(v142 + 6) = v143;
      uint64_t v145 = v142 + 8;
      *(void *)(a2 + 8) = v142 + 8;
      a4 = &v11[v52];
      if (!v16) {
        goto LABEL_258;
      }
LABEL_225:
      if ((unint64_t)a4 > v6) {
        goto LABEL_258;
      }
      uint64_t v148 = v17;
      uint64_t v149 = v16;
      while (2)
      {
        uint64_t v17 = v149;
        uint64_t v149 = v148;
        if (*(_DWORD *)a4 != *(_DWORD *)&a4[-v17])
        {
          uint64_t v16 = v17;
          uint64_t v17 = v148;
          BOOL v11 = a4;
          goto LABEL_18;
        }
        unint64_t v150 = a4 + 4;
        unint64_t v151 = &a4[-v17 + 4];
        if (v18 <= (unint64_t)(a4 + 4))
        {
          unint64_t v154 = a4 + 4;
          if ((unint64_t)v150 < v19)
          {
LABEL_233:
            if (*(_DWORD *)v151 == *(_DWORD *)v154)
            {
              v154 += 4;
              v151 += 4;
            }
          }
          goto LABEL_235;
        }
        unint64_t v152 = *(void *)v150 ^ *(void *)v151;
        if (!v152)
        {
          long long v157 = a4 + 12;
          while (1)
          {
            unint64_t v158 = &v157[v152];
            if ((unint64_t)&v157[v152] >= v18) {
              break;
            }
            uint64_t v159 = *(void *)&a4[v152 + 12 - v17];
            v152 += 8;
            unint64_t v160 = *(void *)v158 ^ v159;
            if (v160)
            {
              unint64_t v153 = v152 + (__clz(__rbit64(v160)) >> 3);
              if ((unint64_t)a4 <= v21) {
                goto LABEL_240;
              }
              goto LABEL_241;
            }
          }
          unint64_t v154 = &a4[v152 + 12];
          unint64_t v151 = &v154[-v17];
          if ((unint64_t)v154 < v19) {
            goto LABEL_233;
          }
LABEL_235:
          if ((unint64_t)v154 < v20)
          {
            if (*(unsigned __int16 *)v151 == *(unsigned __int16 *)v154)
            {
              v154 += 2;
              v151 += 2;
            }
            if (v154 < v5)
            {
LABEL_237:
              if (*v151 == *v154) {
                ++v154;
              }
            }
          }
          else if (v154 < v5)
          {
            goto LABEL_237;
          }
          unint64_t v153 = v154 - v150;
          if ((unint64_t)a4 > v21) {
            goto LABEL_241;
          }
LABEL_240:
          *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)a4;
          uint64_t v145 = *(void *)(a2 + 8);
          goto LABEL_241;
        }
        unint64_t v153 = __clz(__rbit64(v152)) >> 3;
        if ((unint64_t)a4 <= v21) {
          goto LABEL_240;
        }
LABEL_241:
        __int16 v155 = v153 + 1;
        *(_WORD *)(v145 + 4) = 0;
        *(_DWORD *)uint64_t v145 = 1;
        if (v153 + 1 < 0x10000)
        {
          *(_WORD *)(v145 + 6) = v155;
          v145 += 8;
          *(void *)(a2 + 8) = v145;
          a4 += v153 + 4;
          if (!v149) {
            break;
          }
          goto LABEL_245;
        }
        unint64_t v156 = (unint64_t)(v145 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v156;
        *(_WORD *)(v145 + 6) = v155;
        v145 += 8;
        *(void *)(a2 + 8) = v145;
        a4 += v153 + 4;
        if (v149)
        {
LABEL_245:
          uint64_t v148 = v17;
          uint64_t v16 = v149;
          BOOL v11 = a4;
          if ((unint64_t)a4 > v6) {
            goto LABEL_18;
          }
          continue;
        }
        break;
      }
      uint64_t v16 = v149;
      BOOL v11 = a4;
LABEL_18:
      if ((unint64_t)v11 >= v6)
      {
        a3 = v167;
        unsigned int v9 = v165;
        unsigned int v10 = v166;
        unsigned int v15 = v164;
        goto LABEL_262;
      }
    }
    unsigned int v23 = v11 + 5;
    BOOL v24 = &v11[-v17 + 5];
    if (v18 <= (unint64_t)(v11 + 5))
    {
      unint64_t v57 = v11 + 5;
      if ((unint64_t)v23 >= v19) {
        goto LABEL_71;
      }
    }
    else
    {
      unint64_t v25 = *(void *)v23 ^ *(void *)v24;
      if (v25)
      {
        unint64_t v26 = __clz(__rbit64(v25)) >> 3;
        goto LABEL_76;
      }
      uint64_t v124 = v11 + 13;
      while (1)
      {
        unint64_t v125 = &v124[v25];
        if ((unint64_t)&v124[v25] >= v18) {
          break;
        }
        uint64_t v126 = *(void *)&v11[v25 + 13 - v17];
        v25 += 8;
        unint64_t v127 = *(void *)v125 ^ v126;
        if (v127)
        {
          unint64_t v26 = v25 + (__clz(__rbit64(v127)) >> 3);
          goto LABEL_76;
        }
      }
      unint64_t v57 = &v11[v25 + 13];
      BOOL v24 = &v57[-v17];
      if ((unint64_t)v57 >= v19)
      {
LABEL_71:
        if ((unint64_t)v57 < v20)
        {
          if (*(unsigned __int16 *)v24 == *(unsigned __int16 *)v57)
          {
            v57 += 2;
            v24 += 2;
          }
          if (v57 >= v5) {
            goto LABEL_75;
          }
        }
        else if (v57 >= v5)
        {
LABEL_75:
          unint64_t v26 = v57 - v23;
LABEL_76:
          LODWORD(v48) = 0;
          unint64_t v52 = v26 + 4;
          ++v11;
          unint64_t v58 = v22 - a4;
          unint64_t v59 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v22 <= v21) {
            goto LABEL_211;
          }
          goto LABEL_77;
        }
        if (*v24 == *v57) {
          ++v57;
        }
        goto LABEL_75;
      }
    }
    if (*(_DWORD *)v24 == *(_DWORD *)v57)
    {
      v57 += 4;
      v24 += 4;
    }
    goto LABEL_71;
  }
LABEL_262:
  if (v9 <= v15) {
    unsigned int v161 = 0;
  }
  else {
    unsigned int v161 = v9;
  }
  if (v10 > v15) {
    unsigned int v161 = v10;
  }
  if (v17) {
    unsigned int v162 = v17;
  }
  else {
    unsigned int v162 = v161;
  }
  if (v16) {
    unsigned int v161 = v16;
  }
  *a3 = v162;
  a3[1] = v161;
  return v5 - a4;
}

int64_t ZSTD_compressBlock_lazy(uint64_t a1, uint64_t a2, unsigned int *a3, _OWORD *a4, uint64_t a5)
{
  int v5 = a4;
  unint64_t v6 = (char *)a4 + a5;
  unint64_t v7 = (unint64_t)a4 + a5 - 8;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unsigned int v10 = *a3;
  unsigned int v11 = a3[1];
  unint64_t v262 = v8 + v9;
  if (a4 == v8 + v9) {
    a4 = (_OWORD *)((char *)a4 + 1);
  }
  int v12 = a4 - v8;
  unsigned int v13 = 1 << *(_DWORD *)(a1 + 192);
  if (v12 - (int)v9 > v13 && *(_DWORD *)(a1 + 32) == 0) {
    LODWORD(v9) = v12 - v13;
  }
  unsigned int v15 = v12 - v9;
  if (v11 <= v15) {
    LODWORD(v16) = a3[1];
  }
  else {
    LODWORD(v16) = 0;
  }
  if (v10 <= v15) {
    uint64_t v17 = v10;
  }
  else {
    uint64_t v17 = 0;
  }
  if ((unint64_t)a4 < v7)
  {
    unsigned int v258 = v15;
    unsigned int v259 = a3[1];
    unsigned int v260 = *a3;
    uint64_t v261 = a3;
    unint64_t v18 = (unint64_t)(v6 - 7);
    unint64_t v267 = (unint64_t)(v6 - 1);
    unint64_t v268 = (unint64_t)(v6 - 3);
    unint64_t v264 = v7;
    uint64_t v266 = (uint64_t)v5 + a5 - 8;
    while (1)
    {
      unint64_t v20 = 0;
      if (!v17 || *(_DWORD *)((char *)a4 - v17 + 1) != *(_DWORD *)((char *)a4 + 1)) {
        goto LABEL_39;
      }
      unint64_t v21 = (char *)a4 + 5;
      int v22 = (char *)a4 - v17 + 5;
      if (v18 <= (unint64_t)a4 + 5) {
        break;
      }
      unint64_t v23 = *(void *)v21 ^ *(void *)v22;
      if (!v23)
      {
        unint64_t v26 = (char *)a4 + 13;
        while (1)
        {
          int v27 = &v26[v23];
          if ((unint64_t)&v26[v23] >= v18) {
            break;
          }
          uint64_t v28 = *(void *)((char *)a4 + v23 - v17 + 13);
          v23 += 8;
          unint64_t v29 = *(void *)v27 ^ v28;
          if (v29)
          {
            unint64_t v24 = v23 + (__clz(__rbit64(v29)) >> 3);
            goto LABEL_38;
          }
        }
        unint64_t v25 = (char *)a4 + v23 + 13;
        int v22 = &v25[-v17];
        if ((unint64_t)v25 >= v268) {
          goto LABEL_31;
        }
LABEL_24:
        if (*(_DWORD *)v22 == *(_DWORD *)v25)
        {
          v25 += 4;
          v22 += 4;
        }
LABEL_31:
        if ((unint64_t)v25 < v267 && *(unsigned __int16 *)v22 == *(unsigned __int16 *)v25)
        {
          v25 += 2;
          v22 += 2;
        }
        if (v25 < v6 && *v22 == *v25) {
          ++v25;
        }
        unint64_t v24 = v25 - v21;
        goto LABEL_38;
      }
      unint64_t v24 = __clz(__rbit64(v23)) >> 3;
LABEL_38:
      unint64_t v20 = v24 + 4;
LABEL_39:
      int v30 = *(_DWORD *)(a1 + 208);
      unsigned int v265 = v16;
      if ((v30 - 6) < 2)
      {
        uint64_t v31 = *(void *)(a1 + 64);
        int v32 = *(_DWORD *)(a1 + 196);
        unsigned int v33 = 1 << v32;
        uint64_t v34 = *(void *)(a1 + 8);
        unsigned int v35 = a4 - v34;
        unsigned int v36 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)a4 - (int)v34 - *(_DWORD *)(a1 + 28) > v36 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v38 = a4 - v34 - v36;
        }
        else {
          unsigned int v38 = *(_DWORD *)(a1 + 28);
        }
        if (v35 >= v33) {
          unsigned int v39 = v35 - v33;
        }
        else {
          unsigned int v39 = 0;
        }
        uint64_t v40 = *(void *)(a1 + 48);
        int v41 = *(_DWORD *)(a1 + 204);
        uint64_t v42 = *(unsigned int *)(a1 + 36);
        int v43 = 64 - *(_DWORD *)(a1 + 200);
        if (v42 < v35)
        {
          int v44 = ~(-1 << v32);
          do
          {
            unint64_t v45 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v34 + v42)) >> v43);
            *(_DWORD *)(v31 + 4 * (v42 & v44)) = *(_DWORD *)(v40 + v45);
            *(_DWORD *)(v40 + v45) = v42++;
          }
          while (a4 - v34 != v42);
        }
        *(_DWORD *)(a1 + 36) = v35;
        unsigned int v46 = *(_DWORD *)(v40 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)a4) >> v43));
        if (v46 < v38)
        {
LABEL_109:
          uint64_t v51 = 999999999;
          unint64_t v56 = 3;
          goto LABEL_170;
        }
        unsigned int v47 = v33 - 1;
        int v48 = 1 << v41;
        unint64_t v49 = (char *)a4 + 8;
        uint64_t v50 = v34 + 8;
        uint64_t v51 = 999999999;
        unint64_t v52 = 3;
        while (2)
        {
          uint64_t v53 = v46;
          uint64_t v54 = (_DWORD *)(v34 + v46);
          if (*((unsigned __int8 *)v54 + v52) != *((unsigned __int8 *)a4 + v52)) {
            goto LABEL_72;
          }
          if (v18 <= (unint64_t)a4)
          {
            unint64_t v57 = (char *)a4;
            if ((unint64_t)a4 < v268)
            {
LABEL_60:
              if (*v54 == *(_DWORD *)v57)
              {
                v57 += 4;
                ++v54;
              }
            }
          }
          else
          {
            unint64_t v55 = *(void *)v54 ^ *(void *)a4;
            if (v55)
            {
              unint64_t v56 = __clz(__rbit64(v55)) >> 3;
              if (v56 <= v52) {
                goto LABEL_72;
              }
LABEL_71:
              uint64_t v51 = v35 + 2 - v53;
              unint64_t v52 = v56;
              if ((char *)a4 + v56 == v6) {
                goto LABEL_170;
              }
LABEL_72:
              if (v53 <= v39) {
                goto LABEL_139;
              }
              if (!--v48) {
                goto LABEL_139;
              }
              unsigned int v46 = *(_DWORD *)(v31 + 4 * (v53 & v47));
              if (v46 < v38) {
                goto LABEL_139;
              }
              continue;
            }
            while (1)
            {
              unint64_t v57 = &v49[v55];
              if ((unint64_t)&v49[v55] >= v18) {
                break;
              }
              uint64_t v58 = *(void *)(v50 + v53 + v55);
              v55 += 8;
              unint64_t v59 = *(void *)v57 ^ v58;
              if (v59)
              {
                unint64_t v56 = v55 + (__clz(__rbit64(v59)) >> 3);
                if (v56 > v52) {
                  goto LABEL_71;
                }
                goto LABEL_72;
              }
            }
            uint64_t v54 = (_DWORD *)(v50 + v53 + v55);
            if ((unint64_t)v57 < v268) {
              goto LABEL_60;
            }
          }
          break;
        }
        if ((unint64_t)v57 >= v267)
        {
          if (v57 >= v6) {
            goto LABEL_70;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v54 == *(unsigned __int16 *)v57)
          {
            v57 += 2;
            uint64_t v54 = (_DWORD *)((char *)v54 + 2);
          }
          if (v57 >= v6)
          {
LABEL_70:
            unint64_t v56 = v57 - (char *)a4;
            if (v56 > v52) {
              goto LABEL_71;
            }
            goto LABEL_72;
          }
        }
        if (*(unsigned __int8 *)v54 == *v57) {
          ++v57;
        }
        goto LABEL_70;
      }
      if (v30 == 5)
      {
        uint64_t v60 = *(void *)(a1 + 64);
        int v61 = *(_DWORD *)(a1 + 196);
        unsigned int v62 = 1 << v61;
        uint64_t v63 = *(void *)(a1 + 8);
        unsigned int v35 = a4 - v63;
        unsigned int v64 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)a4 - (int)v63 - *(_DWORD *)(a1 + 28) > v64 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v66 = a4 - v63 - v64;
        }
        else {
          unsigned int v66 = *(_DWORD *)(a1 + 28);
        }
        if (v35 >= v62) {
          unsigned int v67 = v35 - v62;
        }
        else {
          unsigned int v67 = 0;
        }
        uint64_t v68 = *(void *)(a1 + 48);
        int v69 = *(_DWORD *)(a1 + 204);
        uint64_t v70 = *(unsigned int *)(a1 + 36);
        int v71 = 64 - *(_DWORD *)(a1 + 200);
        if (v70 < v35)
        {
          int v72 = ~(-1 << v61);
          do
          {
            unint64_t v73 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v63 + v70)) >> v71);
            *(_DWORD *)(v60 + 4 * (v70 & v72)) = *(_DWORD *)(v68 + v73);
            *(_DWORD *)(v68 + v73) = v70++;
          }
          while (a4 - v63 != v70);
        }
        *(_DWORD *)(a1 + 36) = v35;
        unsigned int v74 = *(_DWORD *)(v68 + 4 * ((0xCF1BBCDCBB000000 * *(void *)a4) >> v71));
        if (v74 < v66) {
          goto LABEL_109;
        }
        unsigned int v90 = v62 - 1;
        int v91 = 1 << v69;
        unint64_t v92 = (char *)a4 + 8;
        uint64_t v93 = v63 + 8;
        uint64_t v51 = 999999999;
        unint64_t v52 = 3;
        while (2)
        {
          uint64_t v94 = v74;
          int v95 = (_DWORD *)(v63 + v74);
          if (*((unsigned __int8 *)v95 + v52) != *((unsigned __int8 *)a4 + v52)) {
            goto LABEL_129;
          }
          if (v18 <= (unint64_t)a4)
          {
            uint64_t v97 = (char *)a4;
            if ((unint64_t)a4 < v268)
            {
LABEL_117:
              if (*v95 == *(_DWORD *)v97)
              {
                v97 += 4;
                ++v95;
              }
            }
          }
          else
          {
            unint64_t v96 = *(void *)v95 ^ *(void *)a4;
            if (v96)
            {
              unint64_t v56 = __clz(__rbit64(v96)) >> 3;
              if (v56 <= v52) {
                goto LABEL_129;
              }
LABEL_128:
              uint64_t v51 = v35 + 2 - v94;
              unint64_t v52 = v56;
              if ((char *)a4 + v56 == v6) {
                goto LABEL_170;
              }
LABEL_129:
              if (v94 <= v67
                || (--v91, !v91)
                || (unsigned int v74 = *(_DWORD *)(v60 + 4 * (v94 & v90)), v74 < v66))
              {
LABEL_139:
                unint64_t v56 = v52;
                goto LABEL_170;
              }
              continue;
            }
            while (1)
            {
              uint64_t v97 = &v92[v96];
              if ((unint64_t)&v92[v96] >= v18) {
                break;
              }
              uint64_t v98 = *(void *)(v93 + v94 + v96);
              v96 += 8;
              unint64_t v99 = *(void *)v97 ^ v98;
              if (v99)
              {
                unint64_t v56 = v96 + (__clz(__rbit64(v99)) >> 3);
                if (v56 > v52) {
                  goto LABEL_128;
                }
                goto LABEL_129;
              }
            }
            int v95 = (_DWORD *)(v93 + v94 + v96);
            if ((unint64_t)v97 < v268) {
              goto LABEL_117;
            }
          }
          break;
        }
        if ((unint64_t)v97 >= v267)
        {
          if (v97 >= v6) {
            goto LABEL_127;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v95 == *(unsigned __int16 *)v97)
          {
            v97 += 2;
            int v95 = (_DWORD *)((char *)v95 + 2);
          }
          if (v97 >= v6)
          {
LABEL_127:
            unint64_t v56 = v97 - (char *)a4;
            if (v56 > v52) {
              goto LABEL_128;
            }
            goto LABEL_129;
          }
        }
        if (*(unsigned __int8 *)v95 == *v97) {
          ++v97;
        }
        goto LABEL_127;
      }
      uint64_t v75 = *(void *)(a1 + 64);
      int v76 = *(_DWORD *)(a1 + 196);
      unsigned int v77 = 1 << v76;
      uint64_t v78 = *(void *)(a1 + 8);
      unsigned int v35 = a4 - v78;
      unsigned int v79 = 1 << *(_DWORD *)(a1 + 192);
      if ((int)a4 - (int)v78 - *(_DWORD *)(a1 + 28) > v79 && *(_DWORD *)(a1 + 32) == 0) {
        unsigned int v81 = a4 - v78 - v79;
      }
      else {
        unsigned int v81 = *(_DWORD *)(a1 + 28);
      }
      unsigned int v82 = v35 - v77;
      if (v35 < v77) {
        unsigned int v82 = 0;
      }
      uint64_t v83 = *(void *)(a1 + 48);
      int v84 = *(_DWORD *)(a1 + 204);
      uint64_t v85 = *(unsigned int *)(a1 + 36);
      int v86 = 32 - *(_DWORD *)(a1 + 200);
      if (v85 < v35)
      {
        int v87 = ~(-1 << v76);
        do
        {
          uint64_t v88 = 4 * ((-1640531535 * *(_DWORD *)(v78 + v85)) >> v86);
          *(_DWORD *)(v75 + 4 * (v85 & v87)) = *(_DWORD *)(v83 + v88);
          *(_DWORD *)(v83 + v88) = v85++;
        }
        while (a4 - v78 != v85);
      }
      *(_DWORD *)(a1 + 36) = v35;
      unsigned int v89 = *(_DWORD *)(v83 + 4 * ((-1640531535 * *(_DWORD *)a4) >> v86));
      if (v89 < v81) {
        goto LABEL_109;
      }
      unsigned int v100 = v77 - 1;
      int v101 = 1 << v84;
      unsigned int v102 = (char *)a4 + 8;
      uint64_t v103 = v78 + 8;
      uint64_t v51 = 999999999;
      unint64_t v104 = 3;
      do
      {
        uint64_t v105 = (_DWORD *)(v78 + v89);
        if (*((unsigned __int8 *)v105 + v104) != *((unsigned __int8 *)a4 + v104)) {
          goto LABEL_159;
        }
        if (v18 <= (unint64_t)a4)
        {
          uint64_t v107 = (char *)a4;
          if ((unint64_t)a4 < v268)
          {
LABEL_147:
            if (*v105 == *(_DWORD *)v107)
            {
              v107 += 4;
              ++v105;
            }
          }
          goto LABEL_149;
        }
        unint64_t v106 = *(void *)a4 ^ *(void *)v105;
        if (!v106)
        {
          while (1)
          {
            uint64_t v107 = &v102[v106];
            if ((unint64_t)&v102[v106] >= v18) {
              break;
            }
            uint64_t v108 = *(void *)(v103 + v89 + v106);
            v106 += 8;
            unint64_t v109 = *(void *)v107 ^ v108;
            if (v109)
            {
              unint64_t v56 = v106 + (__clz(__rbit64(v109)) >> 3);
              if (v56 > v104) {
                goto LABEL_158;
              }
              goto LABEL_159;
            }
          }
          uint64_t v105 = (_DWORD *)(v103 + v89 + v106);
          if ((unint64_t)v107 < v268) {
            goto LABEL_147;
          }
LABEL_149:
          if ((unint64_t)v107 >= v267)
          {
            if (v107 >= v6) {
              goto LABEL_157;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v105 == *(unsigned __int16 *)v107)
            {
              v107 += 2;
              uint64_t v105 = (_DWORD *)((char *)v105 + 2);
            }
            if (v107 >= v6)
            {
LABEL_157:
              unint64_t v56 = v107 - (char *)a4;
              if (v107 - (char *)a4 <= v104) {
                goto LABEL_159;
              }
              goto LABEL_158;
            }
          }
          if (*(unsigned __int8 *)v105 == *v107) {
            ++v107;
          }
          goto LABEL_157;
        }
        unint64_t v56 = __clz(__rbit64(v106)) >> 3;
        if (v56 <= v104) {
          goto LABEL_159;
        }
LABEL_158:
        uint64_t v51 = v35 + 2 - v89;
        unint64_t v104 = v56;
        if ((char *)a4 + v56 == v6) {
          goto LABEL_170;
        }
LABEL_159:
        if (v89 <= v82) {
          break;
        }
        if (!--v101) {
          break;
        }
        unsigned int v89 = *(_DWORD *)(v75 + 4 * (v89 & v100));
      }
      while (v89 >= v81);
      unint64_t v56 = v104;
LABEL_170:
      if (v56 <= v20) {
        unint64_t v110 = v20;
      }
      else {
        unint64_t v110 = v56;
      }
      if (v110 < 4)
      {
        a4 = (_OWORD *)((char *)a4 + (((char *)a4 - (char *)v5) >> 8) + 1);
        unint64_t v19 = v264;
        goto LABEL_17;
      }
      if (v56 <= v20) {
        unint64_t v111 = (unint64_t)a4 + 1;
      }
      else {
        unint64_t v111 = (unint64_t)a4;
      }
      if (v56 <= v20) {
        uint64_t v112 = 0;
      }
      else {
        uint64_t v112 = v51;
      }
      if ((unint64_t)a4 >= v264)
      {
        unint64_t v125 = v110;
        uint64_t v180 = v112;
        if (!v112) {
          goto LABEL_353;
        }
        goto LABEL_365;
      }
      uint64_t v113 = (_DWORD *)((char *)a4 + 13);
      int v114 = a4 + 1;
      while (2)
      {
        unint64_t v115 = (char *)a4 + 1;
        if (!v112)
        {
          uint64_t v124 = 0;
          unint64_t v125 = v110;
          goto LABEL_213;
        }
        if (!v17 || *(_DWORD *)v115 != *(_DWORD *)&v115[-v17])
        {
LABEL_212:
          unint64_t v125 = v110;
          uint64_t v124 = v112;
          goto LABEL_213;
        }
        uint64_t v116 = (char *)a4 + 5;
        uint64_t v117 = (char *)a4 - v17 + 5;
        if (v18 <= (unint64_t)a4 + 5)
        {
          uint64_t v118 = (char *)a4 + 5;
          if ((unint64_t)v116 >= v268) {
            goto LABEL_196;
          }
LABEL_193:
          if (*(_DWORD *)v117 == *(_DWORD *)v118)
          {
            v118 += 4;
            v117 += 4;
          }
          goto LABEL_196;
        }
        uint64_t v118 = (char *)v113;
        unint64_t v119 = *(void *)v116 ^ *(void *)v117;
        if (v119)
        {
          unint64_t v120 = __clz(__rbit64(v119)) >> 3;
          goto LABEL_203;
        }
        while ((unint64_t)v118 < v18)
        {
          uint64_t v121 = *(void *)&v118[-v17];
          uint64_t v122 = *(void *)v118;
          v118 += 8;
          unint64_t v123 = v122 ^ v121;
          if (v123)
          {
            uint64_t v118 = &v118[(__clz(__rbit64(v123)) >> 3) - 8];
            goto LABEL_202;
          }
        }
        uint64_t v117 = &v118[-v17];
        if ((unint64_t)v118 < v268) {
          goto LABEL_193;
        }
LABEL_196:
        if ((unint64_t)v118 < v267 && *(unsigned __int16 *)v117 == *(unsigned __int16 *)v118)
        {
          v118 += 2;
          v117 += 2;
        }
        if (v118 < v6 && *v117 == *v118) {
          ++v118;
        }
LABEL_202:
        unint64_t v120 = v118 - v116;
        if (v120 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_212;
        }
LABEL_203:
        unint64_t v126 = v120 + 4;
        int v127 = 3 * v110 + (__clz(v112 + 1) ^ 0xFFFFFFE0) + 2;
        int v128 = 3 * v126;
        if (3 * (int)v126 > v127) {
          unint64_t v125 = v126;
        }
        else {
          unint64_t v125 = v110;
        }
        if (v128 > v127) {
          uint64_t v124 = 0;
        }
        else {
          uint64_t v124 = v112;
        }
        if (v128 > v127) {
          unint64_t v111 = (unint64_t)a4 + 1;
        }
LABEL_213:
        int v129 = *(_DWORD *)(a1 + 208);
        if ((v129 - 6) >= 2)
        {
          if (v129 == 5)
          {
            uint64_t v155 = *(void *)(a1 + 64);
            int v156 = *(_DWORD *)(a1 + 196);
            unsigned int v157 = 1 << v156;
            uint64_t v158 = *(void *)(a1 + 8);
            unsigned int v159 = v115 - v158;
            unsigned int v160 = 1 << *(_DWORD *)(a1 + 192);
            if ((int)v115 - (int)v158 - *(_DWORD *)(a1 + 28) > v160 && *(_DWORD *)(a1 + 32) == 0) {
              unsigned int v162 = v115 - v158 - v160;
            }
            else {
              unsigned int v162 = *(_DWORD *)(a1 + 28);
            }
            unsigned int v163 = v159 - v157;
            if (v159 < v157) {
              unsigned int v163 = 0;
            }
            uint64_t v164 = *(void *)(a1 + 48);
            int v165 = *(_DWORD *)(a1 + 204);
            int v166 = 64 - *(_DWORD *)(a1 + 200);
            if (v35 < v159)
            {
              int v167 = ~(-1 << v156);
              uint64_t v168 = v35;
              do
              {
                unint64_t v169 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v158 + v168)) >> v166);
                *(_DWORD *)(v155 + 4 * (v168 & v167)) = *(_DWORD *)(v164 + v169);
                *(_DWORD *)(v164 + v169) = v168++;
              }
              while (v114 - v158 != v168);
            }
            *(_DWORD *)(a1 + 36) = v159;
            unsigned int v170 = *(_DWORD *)(v164 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v115) >> v166));
            if (v170 >= v162)
            {
              unsigned int v171 = v157 - 1;
              int v172 = 1 << v165;
              uint64_t v173 = v158 + 8;
              uint64_t v112 = 999999999;
              unint64_t v174 = 3;
              while (1)
              {
                unsigned int v175 = (void *)(v158 + v170);
                if (*((unsigned __int8 *)v175 + v174) != v115[v174]) {
                  goto LABEL_287;
                }
                if (v18 <= (unint64_t)v115) {
                  break;
                }
                unint64_t v176 = *v175 ^ *(void *)v115;
                if (v176)
                {
                  unint64_t v110 = __clz(__rbit64(v176)) >> 3;
                  if (v110 > v174) {
                    goto LABEL_286;
                  }
                  goto LABEL_287;
                }
                do
                {
                  uint64_t v177 = (char *)a4 + v176 + 9;
                  if ((unint64_t)v177 >= v18)
                  {
                    unsigned int v175 = (void *)(v173 + v170 + v176);
                    if ((unint64_t)v177 >= v268) {
                      goto LABEL_277;
                    }
                    goto LABEL_275;
                  }
                  uint64_t v178 = *(void *)(v173 + v170 + v176);
                  v176 += 8;
                  unint64_t v179 = *(void *)v177 ^ v178;
                }
                while (!v179);
                unint64_t v110 = v176 + (__clz(__rbit64(v179)) >> 3);
                if (v110 <= v174) {
                  goto LABEL_287;
                }
LABEL_286:
                uint64_t v112 = v159 + 2 - v170;
                unint64_t v174 = v110;
                if (&v115[v110] == v6) {
                  goto LABEL_347;
                }
LABEL_287:
                if (v170 > v163)
                {
                  if (--v172)
                  {
                    unsigned int v170 = *(_DWORD *)(v155 + 4 * (v170 & v171));
                    if (v170 >= v162) {
                      continue;
                    }
                  }
                }
                unsigned int v35 = v115 - v158;
                unint64_t v110 = v174;
                uint64_t v180 = v124;
                if (v174 >= 4) {
                  goto LABEL_348;
                }
LABEL_360:
                if (v180) {
                  goto LABEL_365;
                }
LABEL_353:
                unint64_t v206 = (unint64_t)(v6 - 32);
                unint64_t v19 = v264;
                uint64_t v16 = v265;
                uint64_t v207 = a2;
                unint64_t v208 = v111 - (void)v5;
                unsigned int v209 = *(_OWORD **)(a2 + 24);
                if (v111 > (unint64_t)(v6 - 32)) {
                  goto LABEL_375;
                }
LABEL_354:
                *unsigned int v209 = *v5;
                uint64_t v210 = *(void *)(v207 + 24);
                if (v208 > 0x10)
                {
                  uint64_t v211 = (_OWORD *)(v210 + 16);
                  unint64_t v212 = v210 + v208;
                  double v213 = v5 + 1;
                  do
                  {
                    long long v214 = *v213++;
                    *v211++ = v214;
                  }
                  while ((unint64_t)v211 < v212);
                  goto LABEL_402;
                }
                *(void *)(v207 + 24) = v210 + v208;
                uint64_t v215 = *(void *)(v207 + 8);
                __int16 v216 = v125 - 3;
                *(_WORD *)(v215 + 4) = v208;
                *(_DWORD *)uint64_t v215 = v180 + 1;
                if (v125 - 3 >= 0x10000) {
                  goto LABEL_407;
                }
LABEL_404:
                *(_WORD *)(v215 + 6) = v216;
                uint64_t v240 = v215 + 8;
                *(void *)(v207 + 8) = v215 + 8;
                int v5 = (_OWORD *)(v111 + v125);
                if (v16) {
                  goto LABEL_408;
                }
                goto LABEL_442;
              }
              uint64_t v177 = (char *)a4 + 1;
              if ((unint64_t)v115 >= v268) {
                goto LABEL_277;
              }
LABEL_275:
              if (*(_DWORD *)v175 == *(_DWORD *)v177)
              {
                v177 += 4;
                unsigned int v175 = (void *)((char *)v175 + 4);
              }
LABEL_277:
              if ((unint64_t)v177 >= v267)
              {
                if (v177 >= v6) {
                  goto LABEL_285;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v175 == *(unsigned __int16 *)v177)
                {
                  v177 += 2;
                  unsigned int v175 = (void *)((char *)v175 + 2);
                }
                if (v177 >= v6)
                {
LABEL_285:
                  unint64_t v110 = v177 - v115;
                  if (v110 > v174) {
                    goto LABEL_286;
                  }
                  goto LABEL_287;
                }
              }
              if (*(unsigned __int8 *)v175 == *v177) {
                ++v177;
              }
              goto LABEL_285;
            }
LABEL_388:
            uint64_t v180 = v124;
            if (v124) {
              goto LABEL_365;
            }
            goto LABEL_353;
          }
          uint64_t v181 = *(void *)(a1 + 64);
          int v182 = *(_DWORD *)(a1 + 196);
          unsigned int v183 = 1 << v182;
          uint64_t v184 = *(void *)(a1 + 8);
          unsigned int v159 = v115 - v184;
          unsigned int v185 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v115 - (int)v184 - *(_DWORD *)(a1 + 28) > v185 && *(_DWORD *)(a1 + 32) == 0) {
            unsigned int v187 = v115 - v184 - v185;
          }
          else {
            unsigned int v187 = *(_DWORD *)(a1 + 28);
          }
          unsigned int v188 = v159 - v183;
          if (v159 < v183) {
            unsigned int v188 = 0;
          }
          uint64_t v189 = *(void *)(a1 + 48);
          int v190 = *(_DWORD *)(a1 + 204);
          int v191 = 32 - *(_DWORD *)(a1 + 200);
          if (v35 < v159)
          {
            int v192 = ~(-1 << v182);
            uint64_t v193 = v35;
            do
            {
              uint64_t v194 = 4 * ((-1640531535 * *(_DWORD *)(v184 + v193)) >> v191);
              *(_DWORD *)(v181 + 4 * (v193 & v192)) = *(_DWORD *)(v189 + v194);
              *(_DWORD *)(v189 + v194) = v193++;
            }
            while (v114 - v184 != v193);
          }
          *(_DWORD *)(a1 + 36) = v159;
          unsigned int v195 = *(_DWORD *)(v189 + 4 * ((-1640531535 * *(_DWORD *)v115) >> v191));
          if (v195 < v187) {
            goto LABEL_388;
          }
          unsigned int v196 = v183 - 1;
          int v197 = 1 << v190;
          uint64_t v198 = v184 + 8;
          uint64_t v112 = 999999999;
          unint64_t v199 = 3;
          while (2)
          {
            int v200 = (void *)(v184 + v195);
            if (*((unsigned __int8 *)v200 + v199) != v115[v199]) {
              goto LABEL_330;
            }
            if (v18 <= (unint64_t)v115)
            {
              uint64_t v202 = (char *)a4 + 1;
              if ((unint64_t)v115 >= v268) {
                goto LABEL_320;
              }
            }
            else
            {
              unint64_t v201 = *(void *)v115 ^ *v200;
              if (v201)
              {
                unint64_t v110 = __clz(__rbit64(v201)) >> 3;
                if (v110 <= v199) {
                  goto LABEL_330;
                }
LABEL_329:
                uint64_t v112 = v159 + 2 - v195;
                unint64_t v199 = v110;
                if (&v115[v110] == v6)
                {
LABEL_347:
                  unsigned int v35 = v159;
                  uint64_t v180 = v124;
                  if (v110 < 4) {
                    goto LABEL_360;
                  }
                  goto LABEL_348;
                }
LABEL_330:
                if (v195 <= v188 || (--v197, !v197) || (unsigned int v195 = *(_DWORD *)(v181 + 4 * (v195 & v196)), v195 < v187))
                {
                  unsigned int v35 = v115 - v184;
                  unint64_t v110 = v199;
                  uint64_t v180 = v124;
                  if (v199 >= 4) {
                    goto LABEL_348;
                  }
                  goto LABEL_360;
                }
                continue;
              }
              uint64_t v203 = 0;
              while (1)
              {
                uint64_t v202 = (char *)a4 + v203 + 9;
                if ((unint64_t)v202 >= v18) {
                  break;
                }
                uint64_t v204 = *(void *)(v198 + v195 + v203);
                v203 += 8;
                unint64_t v205 = *(void *)v202 ^ v204;
                if (v205)
                {
                  unint64_t v110 = v203 + (__clz(__rbit64(v205)) >> 3);
                  if (v110 <= v199) {
                    goto LABEL_330;
                  }
                  goto LABEL_329;
                }
              }
              int v200 = (void *)(v198 + v195 + v203);
              if ((unint64_t)v202 >= v268)
              {
LABEL_320:
                if ((unint64_t)v202 >= v267)
                {
                  if (v202 >= v6) {
                    goto LABEL_328;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v200 == *(unsigned __int16 *)v202)
                  {
                    v202 += 2;
                    int v200 = (void *)((char *)v200 + 2);
                  }
                  if (v202 >= v6)
                  {
LABEL_328:
                    unint64_t v110 = v202 - v115;
                    if (v202 - v115 <= v199) {
                      goto LABEL_330;
                    }
                    goto LABEL_329;
                  }
                }
                if (*(unsigned __int8 *)v200 == *v202) {
                  ++v202;
                }
                goto LABEL_328;
              }
            }
            break;
          }
          if (*(_DWORD *)v200 == *(_DWORD *)v202)
          {
            v202 += 4;
            int v200 = (void *)((char *)v200 + 4);
          }
          goto LABEL_320;
        }
        uint64_t v130 = *(void *)(a1 + 64);
        int v131 = *(_DWORD *)(a1 + 196);
        unsigned int v132 = 1 << v131;
        uint64_t v133 = *(void *)(a1 + 8);
        unsigned int v134 = v115 - v133;
        unsigned int v135 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v115 - (int)v133 - *(_DWORD *)(a1 + 28) > v135 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v137 = v115 - v133 - v135;
        }
        else {
          unsigned int v137 = *(_DWORD *)(a1 + 28);
        }
        unsigned int v138 = v134 - v132;
        if (v134 < v132) {
          unsigned int v138 = 0;
        }
        uint64_t v139 = *(void *)(a1 + 48);
        int v140 = *(_DWORD *)(a1 + 204);
        int v141 = 64 - *(_DWORD *)(a1 + 200);
        if (v35 < v134)
        {
          int v142 = ~(-1 << v131);
          uint64_t v143 = v35;
          do
          {
            unint64_t v144 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v133 + v143)) >> v141);
            *(_DWORD *)(v130 + 4 * (v143 & v142)) = *(_DWORD *)(v139 + v144);
            *(_DWORD *)(v139 + v144) = v143++;
          }
          while (v114 - v133 != v143);
        }
        *(_DWORD *)(a1 + 36) = v134;
        unsigned int v145 = *(_DWORD *)(v139 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v115) >> v141));
        if (v145 < v137)
        {
          uint64_t v180 = v124;
LABEL_364:
          if (!v180) {
            goto LABEL_353;
          }
          goto LABEL_365;
        }
        unsigned int v146 = v132 - 1;
        int v147 = 1 << v140;
        uint64_t v148 = v133 + 8;
        uint64_t v112 = 999999999;
        unint64_t v149 = 3;
        while (2)
        {
          unint64_t v150 = (_DWORD *)(v133 + v145);
          if (*((unsigned __int8 *)v150 + v149) != v115[v149]) {
            goto LABEL_245;
          }
          if (v18 <= (unint64_t)v115)
          {
            unint64_t v152 = (char *)a4 + 1;
            if ((unint64_t)v115 < v268)
            {
LABEL_233:
              if (*v150 == *(_DWORD *)v152)
              {
                v152 += 4;
                ++v150;
              }
            }
LABEL_235:
            if ((unint64_t)v152 >= v267)
            {
              if (v152 >= v6) {
                goto LABEL_243;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v150 == *(unsigned __int16 *)v152)
              {
                v152 += 2;
                unint64_t v150 = (_DWORD *)((char *)v150 + 2);
              }
              if (v152 >= v6)
              {
LABEL_243:
                unint64_t v110 = v152 - v115;
                if (v110 > v149) {
                  goto LABEL_244;
                }
                goto LABEL_245;
              }
            }
            if (*(unsigned __int8 *)v150 == *v152) {
              ++v152;
            }
            goto LABEL_243;
          }
          unint64_t v151 = *(void *)v150 ^ *(void *)v115;
          if (v151)
          {
            unint64_t v110 = __clz(__rbit64(v151)) >> 3;
            if (v110 > v149) {
              goto LABEL_244;
            }
            goto LABEL_245;
          }
          while (2)
          {
            unint64_t v152 = (char *)a4 + v151 + 9;
            if ((unint64_t)v152 >= v18)
            {
              unint64_t v150 = (_DWORD *)(v148 + v145 + v151);
              if ((unint64_t)v152 < v268) {
                goto LABEL_233;
              }
              goto LABEL_235;
            }
            uint64_t v153 = *(void *)(v148 + v145 + v151);
            v151 += 8;
            unint64_t v154 = *(void *)v152 ^ v153;
            if (!v154) {
              continue;
            }
            break;
          }
          unint64_t v110 = v151 + (__clz(__rbit64(v154)) >> 3);
          if (v110 <= v149) {
            goto LABEL_245;
          }
LABEL_244:
          uint64_t v112 = v134 + 2 - v145;
          unint64_t v149 = v110;
          if (&v115[v110] == v6)
          {
            unsigned int v35 = v115 - v133;
            uint64_t v180 = v124;
            if (v110 >= 4) {
              goto LABEL_348;
            }
            goto LABEL_360;
          }
LABEL_245:
          if (v145 > v138)
          {
            if (--v147)
            {
              unsigned int v145 = *(_DWORD *)(v130 + 4 * (v145 & v146));
              if (v145 >= v137) {
                continue;
              }
            }
          }
          break;
        }
        unsigned int v35 = v115 - v133;
        unint64_t v110 = v149;
        uint64_t v180 = v124;
        if (v149 < 4) {
          goto LABEL_360;
        }
LABEL_348:
        if ((int)((__clz(v112 + 1) ^ 0xFFFFFFE0) + 4 * v110 + 1) <= (int)((__clz(v180 + 1) ^ 0xFFFFFFE0) + 4 * v125 + 5)) {
          goto LABEL_364;
        }
        uint64_t v113 = (_DWORD *)((char *)v113 + 1);
        ++v114;
        a4 = (_OWORD *)((char *)a4 + 1);
        unint64_t v111 = (unint64_t)v115;
        if (v115 != (char *)v266) {
          continue;
        }
        break;
      }
      unint64_t v125 = v110;
      uint64_t v180 = v112;
      unint64_t v111 = v266;
      if (!v112) {
        goto LABEL_353;
      }
LABEL_365:
      if (v111 <= (unint64_t)v5 || v111 - v180 + 2 <= v262)
      {
        unint64_t v218 = v111;
        unint64_t v206 = (unint64_t)(v6 - 32);
        unint64_t v19 = v264;
        uint64_t v207 = a2;
      }
      else
      {
        uint64_t v217 = 1 - v180;
        unint64_t v218 = v111;
        unint64_t v206 = (unint64_t)(v6 - 32);
        unint64_t v19 = v264;
        uint64_t v207 = a2;
        while (1)
        {
          int v219 = *(unsigned __int8 *)--v218;
          if (v219 != *(unsigned __int8 *)(v111 + v217)) {
            break;
          }
          ++v125;
          if (v218 > (unint64_t)v5)
          {
            unint64_t v220 = v111 + v217;
            unint64_t v111 = v218;
            if (v220 > v262) {
              continue;
            }
          }
          goto LABEL_374;
        }
        unint64_t v218 = v111;
      }
LABEL_374:
      uint64_t v16 = v17;
      uint64_t v17 = (v180 - 2);
      unint64_t v111 = v218;
      unint64_t v208 = v218 - (void)v5;
      unsigned int v209 = *(_OWORD **)(v207 + 24);
      if (v111 <= v206) {
        goto LABEL_354;
      }
LABEL_375:
      if ((unint64_t)v5 <= v206)
      {
        uint64_t v222 = (char *)v209 + v206 - (void)v5;
        uint64_t v223 = v5;
        unint64_t v224 = v209;
        do
        {
          long long v225 = *v223++;
          *v224++ = v225;
        }
        while (v224 < (_OWORD *)v222);
        unsigned int v221 = (_OWORD *)v206;
      }
      else
      {
        unsigned int v221 = v5;
        uint64_t v222 = v209;
      }
      if ((unint64_t)v221 < v111)
      {
        if ((unint64_t)v5 <= v206) {
          uint64_t v226 = (char *)v206;
        }
        else {
          uint64_t v226 = (char *)v5;
        }
        unint64_t v227 = v111 - (void)v226;
        if (v111 - (unint64_t)v226 < 8)
        {
          uint64_t v228 = (char *)v221;
          goto LABEL_401;
        }
        if ((unint64_t)((char *)v209 - (char *)v5) < 0x20)
        {
          uint64_t v228 = (char *)v221;
          goto LABEL_401;
        }
        if (v227 >= 0x20)
        {
          unint64_t v229 = v227 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v230 = v221 + 1;
          unint64_t v231 = (_OWORD *)((char *)v209 + v226 - (char *)v5 + 16);
          unint64_t v232 = v227 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v233 = *v230;
            *(v231 - 1) = *(v230 - 1);
            *unint64_t v231 = v233;
            v230 += 2;
            v231 += 2;
            v232 -= 32;
          }
          while (v232);
          if (v227 != v229)
          {
            if ((v227 & 0x18) == 0)
            {
              uint64_t v228 = (char *)v221 + v229;
              v222 += v229;
              goto LABEL_401;
            }
            goto LABEL_396;
          }
        }
        else
        {
          unint64_t v229 = 0;
LABEL_396:
          v222 += v227 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v228 = (char *)v221 + (v227 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v234 = (uint64_t *)((char *)v221 + v229);
          unsigned int v235 = (void *)((char *)v209 + &v226[v229] - (char *)v5);
          unint64_t v236 = v229 - (v227 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v237 = *v234++;
            *v235++ = v237;
            v236 += 8;
          }
          while (v236);
          if (v227 != (v227 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_401:
              char v238 = *v228++;
              *v222++ = v238;
            }
            while ((unint64_t)v228 < v111);
          }
        }
      }
LABEL_402:
      *(void *)(v207 + 24) += v208;
      uint64_t v215 = *(void *)(v207 + 8);
      if (v208 < 0x10000)
      {
        __int16 v216 = v125 - 3;
        *(_WORD *)(v215 + 4) = v208;
        *(_DWORD *)uint64_t v215 = v180 + 1;
        if (v125 - 3 >= 0x10000) {
          goto LABEL_407;
        }
        goto LABEL_404;
      }
      unint64_t v239 = (unint64_t)(v215 - *(void *)v207) >> 3;
      *(_DWORD *)(v207 + 72) = 1;
      *(_DWORD *)(v207 + 76) = v239;
      __int16 v216 = v125 - 3;
      *(_WORD *)(v215 + 4) = v208;
      *(_DWORD *)uint64_t v215 = v180 + 1;
      if (v125 - 3 < 0x10000) {
        goto LABEL_404;
      }
LABEL_407:
      unint64_t v241 = (unint64_t)(v215 - *(void *)v207) >> 3;
      *(_DWORD *)(v207 + 72) = 2;
      *(_DWORD *)(v207 + 76) = v241;
      *(_WORD *)(v215 + 6) = v216;
      uint64_t v240 = v215 + 8;
      *(void *)(v207 + 8) = v215 + 8;
      int v5 = (_OWORD *)(v111 + v125);
      if (!v16)
      {
LABEL_442:
        a4 = v5;
        goto LABEL_17;
      }
LABEL_408:
      if ((unint64_t)v5 > v19) {
        goto LABEL_442;
      }
      uint64_t v242 = v17;
      uint64_t v243 = v16;
      while (2)
      {
        uint64_t v17 = v243;
        uint64_t v243 = v242;
        if (*(_DWORD *)v5 != *(_DWORD *)((char *)v5 - v17))
        {
          LODWORD(v16) = v17;
          uint64_t v17 = v242;
          goto LABEL_442;
        }
        unint64_t v244 = (char *)v5 + 4;
        __int16 v245 = (char *)v5 - v17 + 4;
        if (v18 <= (unint64_t)v5 + 4)
        {
          uint64_t v248 = (char *)v5 + 4;
          if ((unint64_t)v244 < v268)
          {
LABEL_416:
            if (*(_DWORD *)v245 == *(_DWORD *)v248)
            {
              v248 += 4;
              v245 += 4;
            }
          }
          goto LABEL_418;
        }
        unint64_t v246 = *(void *)v244 ^ *(void *)v245;
        if (!v246)
        {
          unint64_t v251 = (char *)v5 + 12;
          while (1)
          {
            long long v252 = &v251[v246];
            if ((unint64_t)&v251[v246] >= v18) {
              break;
            }
            uint64_t v253 = *(void *)((char *)v5 + v246 - v17 + 12);
            v246 += 8;
            unint64_t v254 = *(void *)v252 ^ v253;
            if (v254)
            {
              unint64_t v247 = v246 + (__clz(__rbit64(v254)) >> 3);
              if ((unint64_t)v5 <= v206) {
                goto LABEL_427;
              }
              goto LABEL_428;
            }
          }
          uint64_t v248 = (char *)v5 + v246 + 12;
          __int16 v245 = &v248[-v17];
          if ((unint64_t)v248 < v268) {
            goto LABEL_416;
          }
LABEL_418:
          if ((unint64_t)v248 >= v267)
          {
            if (v248 >= v6) {
              goto LABEL_426;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v245 == *(unsigned __int16 *)v248)
            {
              v248 += 2;
              v245 += 2;
            }
            if (v248 >= v6)
            {
LABEL_426:
              unint64_t v247 = v248 - v244;
              if ((unint64_t)v5 > v206) {
                goto LABEL_428;
              }
LABEL_427:
              *(_OWORD *)*(void *)(v207 + 24) = *v5;
              uint64_t v240 = *(void *)(v207 + 8);
              goto LABEL_428;
            }
          }
          if (*v245 == *v248) {
            ++v248;
          }
          goto LABEL_426;
        }
        unint64_t v247 = __clz(__rbit64(v246)) >> 3;
        if ((unint64_t)v5 <= v206) {
          goto LABEL_427;
        }
LABEL_428:
        __int16 v249 = v247 + 1;
        *(_WORD *)(v240 + 4) = 0;
        *(_DWORD *)uint64_t v240 = 1;
        if (v247 + 1 >= 0x10000)
        {
          unint64_t v250 = (unint64_t)(v240 - *(void *)v207) >> 3;
          *(_DWORD *)(v207 + 72) = 2;
          *(_DWORD *)(v207 + 76) = v250;
          *(_WORD *)(v240 + 6) = v249;
          v240 += 8;
          *(void *)(v207 + 8) = v240;
          int v5 = (_OWORD *)((char *)v5 + v247 + 4);
          if (!v243) {
            break;
          }
          goto LABEL_432;
        }
        *(_WORD *)(v240 + 6) = v249;
        v240 += 8;
        *(void *)(v207 + 8) = v240;
        int v5 = (_OWORD *)((char *)v5 + v247 + 4);
        if (v243)
        {
LABEL_432:
          uint64_t v242 = v17;
          LODWORD(v16) = v243;
          a4 = v5;
          if ((unint64_t)v5 > v19) {
            goto LABEL_17;
          }
          continue;
        }
        break;
      }
      LODWORD(v16) = v243;
      a4 = v5;
LABEL_17:
      if ((unint64_t)a4 >= v19)
      {
        a3 = v261;
        unsigned int v11 = v259;
        unsigned int v10 = v260;
        unsigned int v15 = v258;
        goto LABEL_445;
      }
    }
    unint64_t v25 = (char *)a4 + 5;
    if ((unint64_t)v21 < v268) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_445:
  if (v11 <= v15) {
    unsigned int v255 = 0;
  }
  else {
    unsigned int v255 = v11;
  }
  if (v10 > v15) {
    unsigned int v255 = v10;
  }
  if (v17) {
    unsigned int v256 = v17;
  }
  else {
    unsigned int v256 = v255;
  }
  if (v16) {
    unsigned int v255 = v16;
  }
  *a3 = v256;
  a3[1] = v255;
  return v6 - (char *)v5;
}

int64_t ZSTD_compressBlock_lazy2(uint64_t a1, uint64_t a2, unsigned int *a3, _OWORD *a4, uint64_t a5)
{
  int v5 = (char *)a4 + a5;
  unint64_t v6 = (unint64_t)a4 + a5 - 8;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unsigned int v9 = *a3;
  unsigned int v10 = a3[1];
  unint64_t v362 = v7 + v8;
  if (a4 == v7 + v8) {
    unsigned int v11 = (char *)a4 + 1;
  }
  else {
    unsigned int v11 = (char *)a4;
  }
  int v12 = v11 - v7;
  unsigned int v13 = 1 << *(_DWORD *)(a1 + 192);
  if (v12 - (int)v8 > v13 && *(_DWORD *)(a1 + 32) == 0) {
    LODWORD(v8) = v12 - v13;
  }
  unsigned int v15 = v12 - v8;
  if (v10 <= v15) {
    LODWORD(v16) = a3[1];
  }
  else {
    LODWORD(v16) = 0;
  }
  if (v9 <= v15) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = 0;
  }
  if ((unint64_t)v11 < v6)
  {
    unsigned int v359 = v15;
    unsigned int v360 = *a3;
    unint64_t v361 = a3;
    unint64_t v18 = (unint64_t)(v5 - 7);
    unint64_t v365 = (unint64_t)(v5 - 1);
    unint64_t v366 = (unint64_t)(v5 - 3);
    unint64_t v364 = (unint64_t)a4 + a5 - 8;
    while (1)
    {
      unint64_t v19 = 0;
      unint64_t v20 = (unint64_t)(v11 + 1);
      if (!v17 || *(_DWORD *)(v20 - v17) != *(_DWORD *)(v11 + 1)) {
        goto LABEL_40;
      }
      unint64_t v21 = v11 + 5;
      int v22 = &v11[-v17 + 5];
      if (v18 <= (unint64_t)(v11 + 5)) {
        break;
      }
      unint64_t v23 = *(void *)v21 ^ *(void *)v22;
      if (!v23)
      {
        unint64_t v26 = v11 + 13;
        while (1)
        {
          int v27 = &v26[v23];
          if ((unint64_t)&v26[v23] >= v18) {
            break;
          }
          uint64_t v28 = *(void *)&v11[v23 + 13 - v17];
          v23 += 8;
          unint64_t v29 = *(void *)v27 ^ v28;
          if (v29)
          {
            unint64_t v24 = v23 + (__clz(__rbit64(v29)) >> 3);
            goto LABEL_39;
          }
        }
        unint64_t v25 = &v11[v23 + 13];
        int v22 = &v25[-v17];
        if ((unint64_t)v25 >= v366) {
          goto LABEL_32;
        }
LABEL_25:
        if (*(_DWORD *)v22 == *(_DWORD *)v25)
        {
          v25 += 4;
          v22 += 4;
        }
LABEL_32:
        if ((unint64_t)v25 < v365 && *(unsigned __int16 *)v22 == *(unsigned __int16 *)v25)
        {
          v25 += 2;
          v22 += 2;
        }
        if (v25 < v5 && *v22 == *v25) {
          ++v25;
        }
        unint64_t v24 = v25 - v21;
        goto LABEL_39;
      }
      unint64_t v24 = __clz(__rbit64(v23)) >> 3;
LABEL_39:
      unint64_t v19 = v24 + 4;
LABEL_40:
      int v30 = *(_DWORD *)(a1 + 208);
      unsigned int v363 = v16;
      if ((v30 - 6) < 2)
      {
        uint64_t v31 = *(void *)(a1 + 64);
        int v32 = *(_DWORD *)(a1 + 196);
        unsigned int v33 = 1 << v32;
        uint64_t v34 = *(void *)(a1 + 8);
        unsigned int v35 = v11 - v34;
        unsigned int v36 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v11 - (int)v34 - *(_DWORD *)(a1 + 28) > v36 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v38 = v11 - v34 - v36;
        }
        else {
          unsigned int v38 = *(_DWORD *)(a1 + 28);
        }
        if (v35 >= v33) {
          unsigned int v39 = v35 - v33;
        }
        else {
          unsigned int v39 = 0;
        }
        uint64_t v40 = *(void *)(a1 + 48);
        int v41 = *(_DWORD *)(a1 + 204);
        uint64_t v42 = *(unsigned int *)(a1 + 36);
        int v43 = 64 - *(_DWORD *)(a1 + 200);
        if (v42 < v35)
        {
          int v44 = ~(-1 << v32);
          do
          {
            unint64_t v45 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v34 + v42)) >> v43);
            *(_DWORD *)(v31 + 4 * (v42 & v44)) = *(_DWORD *)(v40 + v45);
            *(_DWORD *)(v40 + v45) = v42++;
          }
          while (v11 - v34 != v42);
        }
        *(_DWORD *)(a1 + 36) = v35;
        unsigned int v46 = *(_DWORD *)(v40 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v11) >> v43));
        if (v46 >= v38)
        {
          unsigned int v47 = v33 - 1;
          int v48 = 1 << v41;
          unsigned int v49 = v35 + 2;
          uint64_t v50 = v11 + 8;
          uint64_t v51 = v34 + 8;
          uint64_t v52 = 999999999;
          unint64_t v53 = 3;
          while (1)
          {
            uint64_t v54 = (_DWORD *)(v34 + v46);
            if (*((unsigned __int8 *)v54 + v53) != v11[v53]) {
              goto LABEL_73;
            }
            if (v18 <= (unint64_t)v11)
            {
              unint64_t v57 = v11;
              if ((unint64_t)v11 < v366)
              {
LABEL_61:
                if (*v54 == *(_DWORD *)v57)
                {
                  v57 += 4;
                  ++v54;
                }
              }
              goto LABEL_63;
            }
            unint64_t v55 = *(void *)v54 ^ *(void *)v11;
            if (!v55) {
              break;
            }
            unint64_t v56 = __clz(__rbit64(v55)) >> 3;
            if (v56 <= v53) {
              goto LABEL_73;
            }
LABEL_72:
            uint64_t v52 = v49 - v46;
            unint64_t v53 = v56;
            if (&v11[v56] == v5) {
              goto LABEL_174;
            }
LABEL_73:
            if (v46 <= v39) {
              goto LABEL_142;
            }
            if (!--v48) {
              goto LABEL_142;
            }
            unsigned int v46 = *(_DWORD *)(v31 + 4 * (v46 & v47));
            unint64_t v56 = v53;
            if (v46 < v38) {
              goto LABEL_174;
            }
          }
          uint64_t v58 = 0;
          while (1)
          {
            unint64_t v57 = &v50[v58];
            if ((unint64_t)&v50[v58] >= v18) {
              break;
            }
            uint64_t v59 = *(void *)(v51 + v46 + v58);
            v58 += 8;
            unint64_t v60 = *(void *)v57 ^ v59;
            if (v60)
            {
              unint64_t v56 = v58 + (__clz(__rbit64(v60)) >> 3);
              if (v56 > v53) {
                goto LABEL_72;
              }
              goto LABEL_73;
            }
          }
          uint64_t v54 = (_DWORD *)(v51 + v46 + v58);
          if ((unint64_t)v57 < v366) {
            goto LABEL_61;
          }
LABEL_63:
          if ((unint64_t)v57 >= v365)
          {
            if (v57 >= v5) {
              goto LABEL_71;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v54 == *(unsigned __int16 *)v57)
            {
              v57 += 2;
              uint64_t v54 = (_DWORD *)((char *)v54 + 2);
            }
            if (v57 >= v5)
            {
LABEL_71:
              unint64_t v56 = v57 - v11;
              if (v56 <= v53) {
                goto LABEL_73;
              }
              goto LABEL_72;
            }
          }
          if (*(unsigned __int8 *)v54 == *v57) {
            ++v57;
          }
          goto LABEL_71;
        }
LABEL_141:
        uint64_t v52 = 999999999;
        unint64_t v56 = 3;
        goto LABEL_174;
      }
      if (v30 == 5)
      {
        uint64_t v61 = *(void *)(a1 + 64);
        int v62 = *(_DWORD *)(a1 + 196);
        unsigned int v63 = 1 << v62;
        uint64_t v64 = *(void *)(a1 + 8);
        unsigned int v65 = v11 - v64;
        unsigned int v66 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v11 - (int)v64 - *(_DWORD *)(a1 + 28) > v66 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v68 = v11 - v64 - v66;
        }
        else {
          unsigned int v68 = *(_DWORD *)(a1 + 28);
        }
        if (v65 >= v63) {
          unsigned int v69 = v65 - v63;
        }
        else {
          unsigned int v69 = 0;
        }
        uint64_t v70 = *(void *)(a1 + 48);
        int v71 = *(_DWORD *)(a1 + 204);
        uint64_t v72 = *(unsigned int *)(a1 + 36);
        int v73 = 64 - *(_DWORD *)(a1 + 200);
        if (v72 < v65)
        {
          int v74 = ~(-1 << v62);
          do
          {
            unint64_t v75 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v64 + v72)) >> v73);
            *(_DWORD *)(v61 + 4 * (v72 & v74)) = *(_DWORD *)(v70 + v75);
            *(_DWORD *)(v70 + v75) = v72++;
          }
          while (v11 - v64 != v72);
        }
        *(_DWORD *)(a1 + 36) = v65;
        unsigned int v76 = *(_DWORD *)(v70 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v11) >> v73));
        if (v76 < v68) {
          goto LABEL_141;
        }
        unsigned int v77 = v63 - 1;
        int v78 = 1 << v71;
        unsigned int v79 = v65 + 2;
        unsigned int v80 = v11 + 8;
        uint64_t v81 = v64 + 8;
        uint64_t v52 = 999999999;
        unint64_t v53 = 3;
        while (2)
        {
          unsigned int v82 = (_DWORD *)(v64 + v76);
          if (*((unsigned __int8 *)v82 + v53) != v11[v53])
          {
LABEL_117:
            if (v76 <= v69 || (--v78, !v78))
            {
LABEL_142:
              unint64_t v56 = v53;
              goto LABEL_174;
            }
            unsigned int v76 = *(_DWORD *)(v61 + 4 * (v76 & v77));
            unint64_t v56 = v53;
            if (v76 < v68) {
              goto LABEL_174;
            }
            continue;
          }
          break;
        }
        if (v18 <= (unint64_t)v11)
        {
          int v84 = v11;
          if ((unint64_t)v11 < v366)
          {
LABEL_105:
            if (*v82 == *(_DWORD *)v84)
            {
              v84 += 4;
              ++v82;
            }
          }
        }
        else
        {
          unint64_t v83 = *(void *)v82 ^ *(void *)v11;
          if (v83)
          {
            unint64_t v56 = __clz(__rbit64(v83)) >> 3;
            if (v56 <= v53) {
              goto LABEL_117;
            }
LABEL_116:
            uint64_t v52 = v79 - v76;
            unint64_t v53 = v56;
            if (&v11[v56] == v5) {
              goto LABEL_174;
            }
            goto LABEL_117;
          }
          uint64_t v85 = 0;
          while (1)
          {
            int v84 = &v80[v85];
            if ((unint64_t)&v80[v85] >= v18) {
              break;
            }
            uint64_t v86 = *(void *)(v81 + v76 + v85);
            v85 += 8;
            unint64_t v87 = *(void *)v84 ^ v86;
            if (v87)
            {
              unint64_t v56 = v85 + (__clz(__rbit64(v87)) >> 3);
              if (v56 > v53) {
                goto LABEL_116;
              }
              goto LABEL_117;
            }
          }
          unsigned int v82 = (_DWORD *)(v81 + v76 + v85);
          if ((unint64_t)v84 < v366) {
            goto LABEL_105;
          }
        }
        if ((unint64_t)v84 >= v365)
        {
          if (v84 >= v5) {
            goto LABEL_115;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v82 == *(unsigned __int16 *)v84)
          {
            v84 += 2;
            unsigned int v82 = (_DWORD *)((char *)v82 + 2);
          }
          if (v84 >= v5)
          {
LABEL_115:
            unint64_t v56 = v84 - v11;
            if (v56 <= v53) {
              goto LABEL_117;
            }
            goto LABEL_116;
          }
        }
        if (*(unsigned __int8 *)v82 == *v84) {
          ++v84;
        }
        goto LABEL_115;
      }
      uint64_t v88 = *(void *)(a1 + 64);
      int v89 = *(_DWORD *)(a1 + 196);
      unsigned int v90 = 1 << v89;
      uint64_t v91 = *(void *)(a1 + 8);
      unsigned int v92 = v11 - v91;
      unsigned int v93 = 1 << *(_DWORD *)(a1 + 192);
      if ((int)v11 - (int)v91 - *(_DWORD *)(a1 + 28) > v93 && *(_DWORD *)(a1 + 32) == 0) {
        unsigned int v95 = v11 - v91 - v93;
      }
      else {
        unsigned int v95 = *(_DWORD *)(a1 + 28);
      }
      if (v92 >= v90) {
        unsigned int v96 = v92 - v90;
      }
      else {
        unsigned int v96 = 0;
      }
      uint64_t v97 = *(void *)(a1 + 48);
      int v98 = *(_DWORD *)(a1 + 204);
      uint64_t v99 = *(unsigned int *)(a1 + 36);
      int v100 = 32 - *(_DWORD *)(a1 + 200);
      if (v99 < v92)
      {
        int v101 = ~(-1 << v89);
        do
        {
          uint64_t v102 = 4 * ((-1640531535 * *(_DWORD *)(v91 + v99)) >> v100);
          *(_DWORD *)(v88 + 4 * (v99 & v101)) = *(_DWORD *)(v97 + v102);
          *(_DWORD *)(v97 + v102) = v99++;
        }
        while (v11 - v91 != v99);
      }
      *(_DWORD *)(a1 + 36) = v92;
      unsigned int v103 = *(_DWORD *)(v97 + 4 * ((-1640531535 * *(_DWORD *)v11) >> v100));
      if (v103 < v95) {
        goto LABEL_141;
      }
      unsigned int v104 = v90 - 1;
      int v105 = 1 << v98;
      unsigned int v106 = v92 + 2;
      uint64_t v107 = v11 + 8;
      uint64_t v108 = v91 + 8;
      uint64_t v52 = 999999999;
      unint64_t v109 = 3;
      while (1)
      {
        unint64_t v110 = (_DWORD *)(v91 + v103);
        if (*((unsigned __int8 *)v110 + v109) != v11[v109]) {
          goto LABEL_162;
        }
        if (v18 <= (unint64_t)v11)
        {
          uint64_t v112 = v11;
          if ((unint64_t)v11 < v366)
          {
LABEL_150:
            if (*v110 == *(_DWORD *)v112)
            {
              v112 += 4;
              ++v110;
            }
          }
          goto LABEL_152;
        }
        unint64_t v111 = *(void *)v11 ^ *(void *)v110;
        if (!v111)
        {
          uint64_t v113 = 0;
          while (1)
          {
            uint64_t v112 = &v107[v113];
            if ((unint64_t)&v107[v113] >= v18) {
              break;
            }
            uint64_t v114 = *(void *)(v108 + v103 + v113);
            v113 += 8;
            unint64_t v115 = *(void *)v112 ^ v114;
            if (v115)
            {
              unint64_t v56 = v113 + (__clz(__rbit64(v115)) >> 3);
              if (v56 > v109) {
                goto LABEL_161;
              }
              goto LABEL_162;
            }
          }
          unint64_t v110 = (_DWORD *)(v108 + v103 + v113);
          if ((unint64_t)v112 < v366) {
            goto LABEL_150;
          }
LABEL_152:
          if ((unint64_t)v112 >= v365)
          {
            if (v112 >= v5) {
              goto LABEL_160;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v110 == *(unsigned __int16 *)v112)
            {
              v112 += 2;
              unint64_t v110 = (_DWORD *)((char *)v110 + 2);
            }
            if (v112 >= v5)
            {
LABEL_160:
              unint64_t v56 = v112 - v11;
              if (v56 <= v109) {
                goto LABEL_162;
              }
              goto LABEL_161;
            }
          }
          if (*(unsigned __int8 *)v110 == *v112) {
            ++v112;
          }
          goto LABEL_160;
        }
        unint64_t v56 = __clz(__rbit64(v111)) >> 3;
        if (v56 <= v109) {
          goto LABEL_162;
        }
LABEL_161:
        uint64_t v52 = v106 - v103;
        unint64_t v109 = v56;
        if (&v11[v56] == v5) {
          goto LABEL_174;
        }
LABEL_162:
        if (v103 <= v96) {
          break;
        }
        if (!--v105) {
          break;
        }
        unsigned int v103 = *(_DWORD *)(v88 + 4 * (v103 & v104));
        unint64_t v56 = v109;
        if (v103 < v95) {
          goto LABEL_174;
        }
      }
      unint64_t v56 = v109;
LABEL_174:
      if (v56 <= v19) {
        unint64_t v116 = v19;
      }
      else {
        unint64_t v116 = v56;
      }
      if (v116 < 4)
      {
        v11 += ((v11 - (char *)a4) >> 8) + 1;
        LODWORD(v16) = v363;
        goto LABEL_18;
      }
      if (v56 <= v19)
      {
        uint64_t v117 = 0;
      }
      else
      {
        unint64_t v20 = (unint64_t)v11;
        uint64_t v117 = v52;
      }
      if ((unint64_t)v11 >= v6) {
        goto LABEL_507;
      }
      while (2)
      {
        uint64_t v118 = v11 + 1;
        if (!v117 || !v17 || *(_DWORD *)v118 != *(_DWORD *)&v118[-v17]) {
          goto LABEL_205;
        }
        unint64_t v119 = v11 + 5;
        unint64_t v120 = &v11[-v17 + 5];
        if (v18 <= (unint64_t)(v11 + 5))
        {
          unint64_t v123 = v11 + 5;
          if ((unint64_t)v119 >= v366) {
            goto LABEL_196;
          }
LABEL_189:
          if (*(_DWORD *)v120 == *(_DWORD *)v123)
          {
            v123 += 4;
            v120 += 4;
          }
          goto LABEL_196;
        }
        unint64_t v121 = *(void *)v119 ^ *(void *)v120;
        if (v121)
        {
          unint64_t v122 = __clz(__rbit64(v121)) >> 3;
          goto LABEL_203;
        }
        unint64_t v123 = v11 + 13;
        while ((unint64_t)v123 < v18)
        {
          uint64_t v124 = *(void *)&v123[-v17];
          uint64_t v125 = *(void *)v123;
          v123 += 8;
          unint64_t v126 = v125 ^ v124;
          if (v126)
          {
            unint64_t v123 = &v123[(__clz(__rbit64(v126)) >> 3) - 8];
            goto LABEL_202;
          }
        }
        unint64_t v120 = &v123[-v17];
        if ((unint64_t)v123 < v366) {
          goto LABEL_189;
        }
LABEL_196:
        if ((unint64_t)v123 < v365 && *(unsigned __int16 *)v120 == *(unsigned __int16 *)v123)
        {
          v123 += 2;
          v120 += 2;
        }
        if (v123 < v5 && *v120 == *v123) {
          ++v123;
        }
LABEL_202:
        unint64_t v122 = v123 - v119;
        if (v122 <= 0xFFFFFFFFFFFFFFFBLL)
        {
LABEL_203:
          unint64_t v127 = v122 + 4;
          if (3 * (int)v127 > (int)(3 * v116 + (__clz(v117 + 1) ^ 0xFFFFFFE0) + 2))
          {
            uint64_t v117 = 0;
            unint64_t v116 = v127;
            unint64_t v20 = (unint64_t)(v11 + 1);
          }
        }
LABEL_205:
        int v128 = *(_DWORD *)(a1 + 208);
        if ((v128 - 6) < 2)
        {
          uint64_t v129 = *(void *)(a1 + 64);
          int v130 = *(_DWORD *)(a1 + 196);
          unsigned int v131 = 1 << v130;
          uint64_t v132 = *(void *)(a1 + 8);
          unsigned int v133 = v118 - v132;
          unsigned int v134 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v118 - (int)v132 - *(_DWORD *)(a1 + 28) > v134 && *(_DWORD *)(a1 + 32) == 0) {
            unsigned int v136 = v118 - v132 - v134;
          }
          else {
            unsigned int v136 = *(_DWORD *)(a1 + 28);
          }
          if (v133 >= v131) {
            unsigned int v137 = v133 - v131;
          }
          else {
            unsigned int v137 = 0;
          }
          uint64_t v138 = *(void *)(a1 + 48);
          int v139 = *(_DWORD *)(a1 + 204);
          uint64_t v140 = *(unsigned int *)(a1 + 36);
          int v141 = 64 - *(_DWORD *)(a1 + 200);
          if (v140 < v133)
          {
            int v142 = ~(-1 << v130);
            do
            {
              unint64_t v143 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v132 + v140)) >> v141);
              *(_DWORD *)(v129 + 4 * (v140 & v142)) = *(_DWORD *)(v138 + v143);
              *(_DWORD *)(v138 + v143) = v140++;
            }
            while (v118 - v132 != v140);
          }
          *(_DWORD *)(a1 + 36) = v133;
          unsigned int v144 = *(_DWORD *)(v138 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v118) >> v141));
          if (v144 < v136) {
            goto LABEL_343;
          }
          unsigned int v145 = v131 - 1;
          int v146 = 1 << v139;
          unsigned int v147 = v133 + 2;
          uint64_t v148 = v11 + 9;
          uint64_t v149 = v132 + 8;
          uint64_t v150 = 999999999;
          unint64_t v151 = 3;
          while (2)
          {
            unint64_t v152 = (_DWORD *)(v132 + v144);
            if (*((unsigned __int8 *)v152 + v151) != v118[v151])
            {
LABEL_238:
              if (v144 <= v137) {
                goto LABEL_336;
              }
              if (!--v146) {
                goto LABEL_336;
              }
              unsigned int v144 = *(_DWORD *)(v129 + 4 * (v144 & v145));
              unint64_t v154 = v151;
              if (v144 < v136) {
                goto LABEL_341;
              }
              continue;
            }
            break;
          }
          if (v18 <= (unint64_t)v118)
          {
            uint64_t v155 = v11 + 1;
            if ((unint64_t)v118 < v366)
            {
LABEL_226:
              if (*v152 == *(_DWORD *)v155)
              {
                v155 += 4;
                ++v152;
              }
            }
          }
          else
          {
            unint64_t v153 = *(void *)v152 ^ *(void *)v118;
            if (v153)
            {
              unint64_t v154 = __clz(__rbit64(v153)) >> 3;
              if (v154 <= v151) {
                goto LABEL_238;
              }
LABEL_237:
              uint64_t v150 = v147 - v144;
              unint64_t v151 = v154;
              if (&v118[v154] == v5) {
                goto LABEL_341;
              }
              goto LABEL_238;
            }
            uint64_t v156 = 0;
            while (1)
            {
              uint64_t v155 = &v148[v156];
              if ((unint64_t)&v148[v156] >= v18) {
                break;
              }
              uint64_t v157 = *(void *)(v149 + v144 + v156);
              v156 += 8;
              unint64_t v158 = *(void *)v155 ^ v157;
              if (v158)
              {
                unint64_t v154 = v156 + (__clz(__rbit64(v158)) >> 3);
                if (v154 > v151) {
                  goto LABEL_237;
                }
                goto LABEL_238;
              }
            }
            unint64_t v152 = (_DWORD *)(v149 + v144 + v156);
            if ((unint64_t)v155 < v366) {
              goto LABEL_226;
            }
          }
          if ((unint64_t)v155 >= v365)
          {
            if (v155 >= v5) {
              goto LABEL_236;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v152 == *(unsigned __int16 *)v155)
            {
              v155 += 2;
              unint64_t v152 = (_DWORD *)((char *)v152 + 2);
            }
            if (v155 >= v5)
            {
LABEL_236:
              unint64_t v154 = v155 - v118;
              if (v154 <= v151) {
                goto LABEL_238;
              }
              goto LABEL_237;
            }
          }
          if (*(unsigned __int8 *)v152 == *v155) {
            ++v155;
          }
          goto LABEL_236;
        }
        if (v128 != 5)
        {
          uint64_t v186 = *(void *)(a1 + 64);
          int v187 = *(_DWORD *)(a1 + 196);
          unsigned int v188 = 1 << v187;
          uint64_t v189 = *(void *)(a1 + 8);
          unsigned int v190 = v118 - v189;
          unsigned int v191 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v118 - (int)v189 - *(_DWORD *)(a1 + 28) > v191 && *(_DWORD *)(a1 + 32) == 0) {
            unsigned int v193 = v118 - v189 - v191;
          }
          else {
            unsigned int v193 = *(_DWORD *)(a1 + 28);
          }
          if (v190 >= v188) {
            unsigned int v194 = v190 - v188;
          }
          else {
            unsigned int v194 = 0;
          }
          uint64_t v195 = *(void *)(a1 + 48);
          int v196 = *(_DWORD *)(a1 + 204);
          uint64_t v197 = *(unsigned int *)(a1 + 36);
          int v198 = 32 - *(_DWORD *)(a1 + 200);
          if (v197 < v190)
          {
            int v199 = ~(-1 << v187);
            do
            {
              uint64_t v200 = 4 * ((-1640531535 * *(_DWORD *)(v189 + v197)) >> v198);
              *(_DWORD *)(v186 + 4 * (v197 & v199)) = *(_DWORD *)(v195 + v200);
              *(_DWORD *)(v195 + v200) = v197++;
            }
            while (v118 - v189 != v197);
          }
          *(_DWORD *)(a1 + 36) = v190;
          unsigned int v201 = *(_DWORD *)(v195 + 4 * ((-1640531535 * *(_DWORD *)v118) >> v198));
          if (v201 < v193) {
            goto LABEL_343;
          }
          unsigned int v202 = v188 - 1;
          int v203 = 1 << v196;
          unsigned int v204 = v190 + 2;
          unint64_t v205 = v11 + 9;
          uint64_t v206 = v189 + 8;
          uint64_t v150 = 999999999;
          unint64_t v207 = 3;
          while (1)
          {
            unint64_t v208 = (void *)(v189 + v201);
            if (*((unsigned __int8 *)v208 + v207) != v118[v207]) {
              goto LABEL_325;
            }
            if (v18 <= (unint64_t)v118) {
              break;
            }
            unint64_t v209 = *(void *)v118 ^ *v208;
            if (v209)
            {
              unint64_t v154 = __clz(__rbit64(v209)) >> 3;
              if (v154 > v207) {
                goto LABEL_324;
              }
              goto LABEL_325;
            }
            uint64_t v211 = 0;
            do
            {
              uint64_t v210 = &v205[v211];
              if ((unint64_t)&v205[v211] >= v18)
              {
                unint64_t v208 = (void *)(v206 + v201 + v211);
                if ((unint64_t)v210 >= v366) {
                  goto LABEL_315;
                }
                goto LABEL_313;
              }
              uint64_t v212 = *(void *)(v206 + v201 + v211);
              v211 += 8;
              unint64_t v213 = *(void *)v210 ^ v212;
            }
            while (!v213);
            unint64_t v154 = v211 + (__clz(__rbit64(v213)) >> 3);
            if (v154 <= v207) {
              goto LABEL_325;
            }
LABEL_324:
            uint64_t v150 = v204 - v201;
            unint64_t v207 = v154;
            if (&v118[v154] == v5)
            {
LABEL_341:
              if (v154 < 4) {
                goto LABEL_343;
              }
LABEL_342:
              if ((int)((__clz(v150 + 1) ^ 0xFFFFFFE0) + 4 * v154 + 1) > (int)((__clz(v117 + 1) ^ 0xFFFFFFE0)
                                                                              + 4 * v116
                                                                              + 5))
                goto LABEL_495;
              goto LABEL_343;
            }
LABEL_325:
            if (v201 <= v194 || (--v203, !v203))
            {
              unint64_t v154 = v207;
              if (v207 < 4) {
                goto LABEL_343;
              }
              goto LABEL_342;
            }
            unsigned int v201 = *(_DWORD *)(v186 + 4 * (v201 & v202));
            unint64_t v154 = v207;
            if (v201 < v193) {
              goto LABEL_341;
            }
          }
          uint64_t v210 = v11 + 1;
          if ((unint64_t)v118 >= v366) {
            goto LABEL_315;
          }
LABEL_313:
          if (*(_DWORD *)v208 == *(_DWORD *)v210)
          {
            v210 += 4;
            unint64_t v208 = (void *)((char *)v208 + 4);
          }
LABEL_315:
          if ((unint64_t)v210 >= v365)
          {
            if (v210 >= v5) {
              goto LABEL_323;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v208 == *(unsigned __int16 *)v210)
            {
              v210 += 2;
              unint64_t v208 = (void *)((char *)v208 + 2);
            }
            if (v210 >= v5)
            {
LABEL_323:
              unint64_t v154 = v210 - v118;
              if (v210 - v118 > v207) {
                goto LABEL_324;
              }
              goto LABEL_325;
            }
          }
          if (*(unsigned __int8 *)v208 == *v210) {
            ++v210;
          }
          goto LABEL_323;
        }
        uint64_t v159 = *(void *)(a1 + 64);
        int v160 = *(_DWORD *)(a1 + 196);
        unsigned int v161 = 1 << v160;
        uint64_t v162 = *(void *)(a1 + 8);
        unsigned int v163 = v118 - v162;
        unsigned int v164 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v118 - (int)v162 - *(_DWORD *)(a1 + 28) > v164 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v166 = v118 - v162 - v164;
        }
        else {
          unsigned int v166 = *(_DWORD *)(a1 + 28);
        }
        if (v163 >= v161) {
          unsigned int v167 = v163 - v161;
        }
        else {
          unsigned int v167 = 0;
        }
        uint64_t v168 = *(void *)(a1 + 48);
        int v169 = *(_DWORD *)(a1 + 204);
        uint64_t v170 = *(unsigned int *)(a1 + 36);
        int v171 = 64 - *(_DWORD *)(a1 + 200);
        if (v170 < v163)
        {
          int v172 = ~(-1 << v160);
          do
          {
            unint64_t v173 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v162 + v170)) >> v171);
            *(_DWORD *)(v159 + 4 * (v170 & v172)) = *(_DWORD *)(v168 + v173);
            *(_DWORD *)(v168 + v173) = v170++;
          }
          while (v118 - v162 != v170);
        }
        *(_DWORD *)(a1 + 36) = v163;
        unsigned int v174 = *(_DWORD *)(v168 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v118) >> v171));
        if (v174 < v166) {
          goto LABEL_343;
        }
        unsigned int v175 = v161 - 1;
        int v176 = 1 << v169;
        unsigned int v177 = v163 + 2;
        uint64_t v178 = v11 + 9;
        uint64_t v179 = v162 + 8;
        uint64_t v150 = 999999999;
        unint64_t v151 = 3;
        while (2)
        {
          uint64_t v180 = (_DWORD *)(v162 + v174);
          if (*((unsigned __int8 *)v180 + v151) != v118[v151]) {
            goto LABEL_282;
          }
          if (v18 <= (unint64_t)v118)
          {
            int v182 = v11 + 1;
            if ((unint64_t)v118 < v366)
            {
LABEL_270:
              if (*v180 == *(_DWORD *)v182)
              {
                v182 += 4;
                ++v180;
              }
            }
          }
          else
          {
            unint64_t v181 = *(void *)v180 ^ *(void *)v118;
            if (v181)
            {
              unint64_t v154 = __clz(__rbit64(v181)) >> 3;
              if (v154 <= v151) {
                goto LABEL_282;
              }
              goto LABEL_281;
            }
            uint64_t v183 = 0;
            while (1)
            {
              int v182 = &v178[v183];
              if ((unint64_t)&v178[v183] >= v18) {
                break;
              }
              uint64_t v184 = *(void *)(v179 + v174 + v183);
              v183 += 8;
              unint64_t v185 = *(void *)v182 ^ v184;
              if (v185)
              {
                unint64_t v154 = v183 + (__clz(__rbit64(v185)) >> 3);
                if (v154 > v151) {
                  goto LABEL_281;
                }
                goto LABEL_282;
              }
            }
            uint64_t v180 = (_DWORD *)(v179 + v174 + v183);
            if ((unint64_t)v182 < v366) {
              goto LABEL_270;
            }
          }
          if ((unint64_t)v182 >= v365)
          {
            if (v182 >= v5) {
              goto LABEL_280;
            }
LABEL_278:
            if (*(unsigned __int8 *)v180 == *v182) {
              ++v182;
            }
            goto LABEL_280;
          }
          if (*(unsigned __int16 *)v180 == *(unsigned __int16 *)v182)
          {
            v182 += 2;
            uint64_t v180 = (_DWORD *)((char *)v180 + 2);
          }
          if (v182 < v5) {
            goto LABEL_278;
          }
LABEL_280:
          unint64_t v154 = v182 - v118;
          if (v154 <= v151) {
            goto LABEL_282;
          }
LABEL_281:
          uint64_t v150 = v177 - v174;
          unint64_t v151 = v154;
          if (&v118[v154] == v5) {
            goto LABEL_341;
          }
LABEL_282:
          if (v174 > v167)
          {
            if (!--v176)
            {
              unint64_t v154 = v151;
              goto LABEL_341;
            }
            unsigned int v174 = *(_DWORD *)(v159 + 4 * (v174 & v175));
            unint64_t v154 = v151;
            if (v174 < v166) {
              goto LABEL_341;
            }
            continue;
          }
          break;
        }
LABEL_336:
        unint64_t v154 = v151;
        if (v151 >= 4) {
          goto LABEL_342;
        }
LABEL_343:
        if ((unint64_t)v118 >= v364) {
          break;
        }
        uint64_t v118 = v11 + 2;
        if (!v117 || !v17 || *(_DWORD *)v118 != *(_DWORD *)&v118[-v17]) {
          goto LABEL_350;
        }
        long long v214 = v11 + 6;
        uint64_t v215 = &v11[-v17 + 6];
        if (v18 <= (unint64_t)(v11 + 6))
        {
          int v302 = v11 + 6;
          if ((unint64_t)v214 >= v366) {
            goto LABEL_498;
          }
LABEL_486:
          if (*(_DWORD *)v215 == *(_DWORD *)v302)
          {
            v302 += 4;
            v215 += 4;
          }
          goto LABEL_498;
        }
        unint64_t v216 = *(void *)v214 ^ *(void *)v215;
        if (v216)
        {
          unint64_t v217 = __clz(__rbit64(v216)) >> 3;
          goto LABEL_505;
        }
        int v302 = v11 + 14;
        while ((unint64_t)v302 < v18)
        {
          uint64_t v303 = *(void *)&v302[-v17];
          uint64_t v304 = *(void *)v302;
          v302 += 8;
          unint64_t v305 = v304 ^ v303;
          if (v305)
          {
            int v302 = &v302[(__clz(__rbit64(v305)) >> 3) - 8];
            goto LABEL_504;
          }
        }
        uint64_t v215 = &v302[-v17];
        if ((unint64_t)v302 < v366) {
          goto LABEL_486;
        }
LABEL_498:
        if ((unint64_t)v302 < v365 && *(unsigned __int16 *)v215 == *(unsigned __int16 *)v302)
        {
          v302 += 2;
          v215 += 2;
        }
        if (v302 < v5 && *v215 == *v302) {
          ++v302;
        }
LABEL_504:
        unint64_t v217 = v302 - v214;
        if (v217 <= 0xFFFFFFFFFFFFFFFBLL)
        {
LABEL_505:
          unint64_t v306 = v217 + 4;
          if ((int)((__clz(v117 + 1) ^ 0xFFFFFFE0) + 4 * v116 + 2) < 4 * (int)v306)
          {
            uint64_t v117 = 0;
            unint64_t v116 = v306;
            unint64_t v20 = (unint64_t)(v11 + 2);
          }
        }
LABEL_350:
        int v218 = *(_DWORD *)(a1 + 208);
        if ((v218 - 6) < 2)
        {
          uint64_t v219 = *(void *)(a1 + 64);
          int v220 = *(_DWORD *)(a1 + 196);
          unsigned int v221 = 1 << v220;
          uint64_t v222 = *(void *)(a1 + 8);
          unsigned int v223 = v118 - v222;
          unsigned int v224 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v118 - (int)v222 - *(_DWORD *)(a1 + 28) > v224 && *(_DWORD *)(a1 + 32) == 0) {
            unsigned int v226 = v118 - v222 - v224;
          }
          else {
            unsigned int v226 = *(_DWORD *)(a1 + 28);
          }
          if (v223 >= v221) {
            unsigned int v227 = v223 - v221;
          }
          else {
            unsigned int v227 = 0;
          }
          uint64_t v228 = *(void *)(a1 + 48);
          int v229 = *(_DWORD *)(a1 + 204);
          uint64_t v230 = *(unsigned int *)(a1 + 36);
          int v231 = 64 - *(_DWORD *)(a1 + 200);
          if (v230 < v223)
          {
            int v232 = ~(-1 << v220);
            do
            {
              unint64_t v233 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v222 + v230)) >> v231);
              *(_DWORD *)(v219 + 4 * (v230 & v232)) = *(_DWORD *)(v228 + v233);
              *(_DWORD *)(v228 + v233) = v230++;
            }
            while (v118 - v222 != v230);
          }
          *(_DWORD *)(a1 + 36) = v223;
          unsigned int v234 = *(_DWORD *)(v228 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v118) >> v231));
          if (v234 < v226) {
            break;
          }
          unsigned int v235 = v221 - 1;
          int v236 = 1 << v229;
          unsigned int v237 = v223 + 2;
          char v238 = v11 + 10;
          uint64_t v239 = v222 + 8;
          uint64_t v150 = 999999999;
          unint64_t v240 = 3;
          while (2)
          {
            unint64_t v241 = (_DWORD *)(v222 + v234);
            if (*((unsigned __int8 *)v241 + v240) != v118[v240])
            {
LABEL_383:
              if (v234 <= v227) {
                goto LABEL_438;
              }
              if (!--v236) {
                goto LABEL_438;
              }
              unsigned int v234 = *(_DWORD *)(v219 + 4 * (v234 & v235));
              unint64_t v154 = v240;
              if (v234 < v226) {
                goto LABEL_493;
              }
              continue;
            }
            break;
          }
          if (v18 <= (unint64_t)v118)
          {
            uint64_t v243 = v118;
            if ((unint64_t)v118 < v366)
            {
LABEL_371:
              if (*v241 == *(_DWORD *)v243)
              {
                v243 += 4;
                ++v241;
              }
            }
          }
          else
          {
            unint64_t v242 = *(void *)v241 ^ *(void *)v118;
            if (v242)
            {
              unint64_t v154 = __clz(__rbit64(v242)) >> 3;
              if (v154 <= v240) {
                goto LABEL_383;
              }
LABEL_382:
              uint64_t v150 = v237 - v234;
              unint64_t v240 = v154;
              if (&v118[v154] == v5) {
                goto LABEL_493;
              }
              goto LABEL_383;
            }
            uint64_t v244 = 0;
            while (1)
            {
              uint64_t v243 = &v238[v244];
              if ((unint64_t)&v238[v244] >= v18) {
                break;
              }
              uint64_t v245 = *(void *)(v239 + v234 + v244);
              v244 += 8;
              unint64_t v246 = *(void *)v243 ^ v245;
              if (v246)
              {
                unint64_t v154 = v244 + (__clz(__rbit64(v246)) >> 3);
                if (v154 > v240) {
                  goto LABEL_382;
                }
                goto LABEL_383;
              }
            }
            unint64_t v241 = (_DWORD *)(v239 + v234 + v244);
            if ((unint64_t)v243 < v366) {
              goto LABEL_371;
            }
          }
          if ((unint64_t)v243 >= v365)
          {
            if (v243 >= v5) {
              goto LABEL_381;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v241 == *(unsigned __int16 *)v243)
            {
              v243 += 2;
              unint64_t v241 = (_DWORD *)((char *)v241 + 2);
            }
            if (v243 >= v5)
            {
LABEL_381:
              unint64_t v154 = v243 - v118;
              if (v243 - v118 <= v240) {
                goto LABEL_383;
              }
              goto LABEL_382;
            }
          }
          if (*(unsigned __int8 *)v241 == *v243) {
            ++v243;
          }
          goto LABEL_381;
        }
        if (v218 != 5)
        {
          uint64_t v274 = *(void *)(a1 + 64);
          int v275 = *(_DWORD *)(a1 + 196);
          unsigned int v276 = 1 << v275;
          uint64_t v277 = *(void *)(a1 + 8);
          unsigned int v278 = v118 - v277;
          unsigned int v279 = 1 << *(_DWORD *)(a1 + 192);
          if ((int)v118 - (int)v277 - *(_DWORD *)(a1 + 28) > v279 && *(_DWORD *)(a1 + 32) == 0) {
            unsigned int v281 = v118 - v277 - v279;
          }
          else {
            unsigned int v281 = *(_DWORD *)(a1 + 28);
          }
          if (v278 >= v276) {
            unsigned int v282 = v278 - v276;
          }
          else {
            unsigned int v282 = 0;
          }
          uint64_t v283 = *(void *)(a1 + 48);
          int v284 = *(_DWORD *)(a1 + 204);
          uint64_t v285 = *(unsigned int *)(a1 + 36);
          int v286 = 32 - *(_DWORD *)(a1 + 200);
          if (v285 < v278)
          {
            int v287 = ~(-1 << v275);
            do
            {
              uint64_t v288 = 4 * ((-1640531535 * *(_DWORD *)(v277 + v285)) >> v286);
              *(_DWORD *)(v274 + 4 * (v285 & v287)) = *(_DWORD *)(v283 + v288);
              *(_DWORD *)(v283 + v288) = v285++;
            }
            while (v118 - v277 != v285);
          }
          *(_DWORD *)(a1 + 36) = v278;
          unsigned int v289 = *(_DWORD *)(v283 + 4 * ((-1640531535 * *(_DWORD *)v118) >> v286));
          if (v289 < v281) {
            break;
          }
          unsigned int v290 = v276 - 1;
          int v291 = 1 << v284;
          unsigned int v292 = v278 + 2;
          int8x16_t v293 = v11 + 10;
          uint64_t v294 = v277 + 8;
          uint64_t v150 = 999999999;
          unint64_t v295 = 3;
          while (1)
          {
            unint64_t v296 = (void *)(v277 + v289);
            if (*((unsigned __int8 *)v296 + v295) != v118[v295]) {
              goto LABEL_472;
            }
            if (v18 <= (unint64_t)v118) {
              break;
            }
            unint64_t v297 = *(void *)v118 ^ *v296;
            if (v297)
            {
              unint64_t v154 = __clz(__rbit64(v297)) >> 3;
              if (v154 > v295) {
                goto LABEL_471;
              }
              goto LABEL_472;
            }
            uint64_t v299 = 0;
            do
            {
              unint64_t v298 = &v293[v299];
              if ((unint64_t)&v293[v299] >= v18)
              {
                unint64_t v296 = (void *)(v294 + v289 + v299);
                if ((unint64_t)v298 >= v366) {
                  goto LABEL_462;
                }
                goto LABEL_460;
              }
              uint64_t v300 = *(void *)(v294 + v289 + v299);
              v299 += 8;
              unint64_t v301 = *(void *)v298 ^ v300;
            }
            while (!v301);
            unint64_t v154 = v299 + (__clz(__rbit64(v301)) >> 3);
            if (v154 <= v295) {
              goto LABEL_472;
            }
LABEL_471:
            uint64_t v150 = v292 - v289;
            unint64_t v295 = v154;
            if (&v118[v154] == v5) {
              goto LABEL_493;
            }
LABEL_472:
            if (v289 <= v282 || (--v291, !v291))
            {
              unint64_t v154 = v295;
              if (v295 >= 4) {
                goto LABEL_494;
              }
              goto LABEL_507;
            }
            unsigned int v289 = *(_DWORD *)(v274 + 4 * (v289 & v290));
            unint64_t v154 = v295;
            if (v289 < v281) {
              goto LABEL_493;
            }
          }
          unint64_t v298 = v11 + 2;
          if ((unint64_t)v118 >= v366) {
            goto LABEL_462;
          }
LABEL_460:
          if (*(_DWORD *)v296 == *(_DWORD *)v298)
          {
            v298 += 4;
            unint64_t v296 = (void *)((char *)v296 + 4);
          }
LABEL_462:
          if ((unint64_t)v298 >= v365)
          {
            if (v298 >= v5) {
              goto LABEL_470;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v296 == *(unsigned __int16 *)v298)
            {
              v298 += 2;
              unint64_t v296 = (void *)((char *)v296 + 2);
            }
            if (v298 >= v5)
            {
LABEL_470:
              unint64_t v154 = v298 - v118;
              if (v298 - v118 > v295) {
                goto LABEL_471;
              }
              goto LABEL_472;
            }
          }
          if (*(unsigned __int8 *)v296 == *v298) {
            ++v298;
          }
          goto LABEL_470;
        }
        uint64_t v247 = *(void *)(a1 + 64);
        int v248 = *(_DWORD *)(a1 + 196);
        unsigned int v249 = 1 << v248;
        uint64_t v250 = *(void *)(a1 + 8);
        unsigned int v251 = v118 - v250;
        unsigned int v252 = 1 << *(_DWORD *)(a1 + 192);
        if ((int)v118 - (int)v250 - *(_DWORD *)(a1 + 28) > v252 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v254 = v118 - v250 - v252;
        }
        else {
          unsigned int v254 = *(_DWORD *)(a1 + 28);
        }
        if (v251 >= v249) {
          unsigned int v255 = v251 - v249;
        }
        else {
          unsigned int v255 = 0;
        }
        uint64_t v256 = *(void *)(a1 + 48);
        int v257 = *(_DWORD *)(a1 + 204);
        uint64_t v258 = *(unsigned int *)(a1 + 36);
        int v259 = 64 - *(_DWORD *)(a1 + 200);
        if (v258 < v251)
        {
          int v260 = ~(-1 << v248);
          do
          {
            unint64_t v261 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v250 + v258)) >> v259);
            *(_DWORD *)(v247 + 4 * (v258 & v260)) = *(_DWORD *)(v256 + v261);
            *(_DWORD *)(v256 + v261) = v258++;
          }
          while (v118 - v250 != v258);
        }
        *(_DWORD *)(a1 + 36) = v251;
        unsigned int v262 = *(_DWORD *)(v256 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v118) >> v259));
        if (v262 < v254) {
          break;
        }
        unsigned int v263 = v249 - 1;
        int v264 = 1 << v257;
        unsigned int v265 = v251 + 2;
        uint64_t v266 = v11 + 10;
        uint64_t v267 = v250 + 8;
        uint64_t v150 = 999999999;
        unint64_t v240 = 3;
        while (2)
        {
          unint64_t v268 = (_DWORD *)(v250 + v262);
          if (*((unsigned __int8 *)v268 + v240) != v118[v240]) {
            goto LABEL_427;
          }
          if (v18 <= (unint64_t)v118)
          {
            size_t v270 = v118;
            if ((unint64_t)v118 >= v366) {
              goto LABEL_417;
            }
LABEL_415:
            if (*v268 == *(_DWORD *)v270)
            {
              v270 += 4;
              ++v268;
            }
LABEL_417:
            if ((unint64_t)v270 >= v365)
            {
              if (v270 >= v5) {
                goto LABEL_425;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v268 == *(unsigned __int16 *)v270)
              {
                v270 += 2;
                unint64_t v268 = (_DWORD *)((char *)v268 + 2);
              }
              if (v270 >= v5)
              {
LABEL_425:
                unint64_t v154 = v270 - v118;
                if (v270 - v118 <= v240) {
                  goto LABEL_427;
                }
LABEL_426:
                uint64_t v150 = v265 - v262;
                unint64_t v240 = v154;
                if (&v118[v154] != v5) {
                  goto LABEL_427;
                }
                break;
              }
            }
            if (*(unsigned __int8 *)v268 == *v270) {
              ++v270;
            }
            goto LABEL_425;
          }
          unint64_t v269 = *(void *)v268 ^ *(void *)v118;
          if (v269)
          {
            unint64_t v154 = __clz(__rbit64(v269)) >> 3;
            if (v154 <= v240) {
              goto LABEL_427;
            }
            goto LABEL_426;
          }
          uint64_t v271 = 0;
          while (2)
          {
            size_t v270 = &v266[v271];
            if ((unint64_t)&v266[v271] >= v18)
            {
              unint64_t v268 = (_DWORD *)(v267 + v262 + v271);
              if ((unint64_t)v270 >= v366) {
                goto LABEL_417;
              }
              goto LABEL_415;
            }
            uint64_t v272 = *(void *)(v267 + v262 + v271);
            v271 += 8;
            unint64_t v273 = *(void *)v270 ^ v272;
            if (!v273) {
              continue;
            }
            break;
          }
          unint64_t v154 = v271 + (__clz(__rbit64(v273)) >> 3);
          if (v154 > v240) {
            goto LABEL_426;
          }
LABEL_427:
          if (v262 <= v255)
          {
LABEL_438:
            unint64_t v154 = v240;
            if (v240 >= 4) {
              goto LABEL_494;
            }
            goto LABEL_507;
          }
          if (!--v264)
          {
            unint64_t v154 = v240;
            break;
          }
          unsigned int v262 = *(_DWORD *)(v247 + 4 * (v262 & v263));
          unint64_t v154 = v240;
          if (v262 >= v254) {
            continue;
          }
          break;
        }
LABEL_493:
        if (v154 < 4) {
          break;
        }
LABEL_494:
        if ((int)((__clz(v150 + 1) ^ 0xFFFFFFE0) + 4 * v154 + 1) > (int)((__clz(v117 + 1) ^ 0xFFFFFFE0) + 4 * v116 + 8))
        {
LABEL_495:
          unsigned int v11 = v118;
          unint64_t v20 = (unint64_t)v118;
          uint64_t v117 = v150;
          unint64_t v116 = v154;
          if ((unint64_t)v118 >= v364) {
            break;
          }
          continue;
        }
        break;
      }
LABEL_507:
      if (!v117)
      {
        unint64_t v6 = v364;
        unint64_t v309 = (unint64_t)(v5 - 32);
        uint64_t v16 = v363;
        unint64_t v312 = v20 - (void)a4;
        BOOL v313 = *(_OWORD **)(a2 + 24);
        if (v20 > (unint64_t)(v5 - 32)) {
          goto LABEL_525;
        }
LABEL_516:
        *BOOL v313 = *a4;
        uint64_t v314 = *(void *)(a2 + 24);
        if (v312 > 0x10)
        {
          unsigned int v315 = (_OWORD *)(v314 + 16);
          unint64_t v316 = v314 + v312;
          unint64_t v317 = a4 + 1;
          do
          {
            long long v318 = *v317++;
            *v315++ = v318;
          }
          while ((unint64_t)v315 < v316);
          goto LABEL_550;
        }
        *(void *)(a2 + 24) = v314 + v312;
        uint64_t v319 = *(void *)(a2 + 8);
        __int16 v320 = v116 - 3;
        *(_WORD *)(v319 + 4) = v312;
        *(_DWORD *)uint64_t v319 = v117 + 1;
        if (v116 - 3 >= 0x10000) {
          goto LABEL_555;
        }
        goto LABEL_552;
      }
      if (v20 <= (unint64_t)a4 || v20 - v117 + 2 <= v362)
      {
        unint64_t v308 = v20;
        unint64_t v6 = v364;
        unint64_t v309 = (unint64_t)(v5 - 32);
      }
      else
      {
        uint64_t v307 = 1 - v117;
        unint64_t v308 = v20;
        unint64_t v6 = v364;
        unint64_t v309 = (unint64_t)(v5 - 32);
        while (1)
        {
          int v310 = *(unsigned __int8 *)--v308;
          if (v310 != *(unsigned __int8 *)(v20 + v307)) {
            break;
          }
          ++v116;
          if (v308 > (unint64_t)a4)
          {
            unint64_t v311 = v20 + v307;
            unint64_t v20 = v308;
            if (v311 > v362) {
              continue;
            }
          }
          goto LABEL_524;
        }
        unint64_t v308 = v20;
      }
LABEL_524:
      uint64_t v16 = v17;
      uint64_t v17 = (v117 - 2);
      unint64_t v20 = v308;
      unint64_t v312 = v308 - (void)a4;
      BOOL v313 = *(_OWORD **)(a2 + 24);
      if (v308 <= v309) {
        goto LABEL_516;
      }
LABEL_525:
      if ((unint64_t)a4 <= v309)
      {
        uint64_t v322 = (char *)v313 + v309 - (void)a4;
        uint64_t v323 = a4;
        int v324 = v313;
        do
        {
          long long v325 = *v323++;
          *v324++ = v325;
        }
        while (v324 < (_OWORD *)v322);
        unint64_t v321 = (_OWORD *)v309;
        if (v309 < v20) {
          goto LABEL_531;
        }
      }
      else
      {
        unint64_t v321 = a4;
        uint64_t v322 = v313;
        if ((unint64_t)a4 >= v20) {
          goto LABEL_550;
        }
LABEL_531:
        if ((unint64_t)a4 <= v309) {
          uint64_t v326 = (char *)v309;
        }
        else {
          uint64_t v326 = (char *)a4;
        }
        unint64_t v327 = v20 - (void)v326;
        if (v20 - (unint64_t)v326 < 8)
        {
          char v328 = (char *)v321;
          goto LABEL_549;
        }
        if ((unint64_t)((char *)v313 - (char *)a4) < 0x20)
        {
          char v328 = (char *)v321;
          goto LABEL_549;
        }
        if (v327 >= 0x20)
        {
          uint64_t v330 = v16;
          unint64_t v329 = v327 & 0xFFFFFFFFFFFFFFE0;
          int v331 = v321 + 1;
          unsigned int v332 = (_OWORD *)((char *)v313 + v326 - (char *)a4 + 16);
          unint64_t v333 = v327 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v334 = *v331;
            *(v332 - 1) = *(v331 - 1);
            _OWORD *v332 = v334;
            v331 += 2;
            v332 += 2;
            v333 -= 32;
          }
          while (v333);
          uint64_t v16 = v330;
          if (v327 != v329)
          {
            if ((v327 & 0x18) == 0)
            {
              char v328 = (char *)v321 + v329;
              v322 += v329;
              goto LABEL_549;
            }
            goto LABEL_544;
          }
        }
        else
        {
          unint64_t v329 = 0;
LABEL_544:
          v322 += v327 & 0xFFFFFFFFFFFFFFF8;
          char v328 = (char *)v321 + (v327 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v335 = (uint64_t *)((char *)v321 + v329);
          BOOL v336 = (void *)((char *)v313 + &v326[v329] - (char *)a4);
          unint64_t v337 = v329 - (v327 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v338 = *v335++;
            *v336++ = v338;
            v337 += 8;
          }
          while (v337);
          if (v327 != (v327 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_549:
              char v339 = *v328++;
              *v322++ = v339;
            }
            while ((unint64_t)v328 < v20);
          }
        }
      }
LABEL_550:
      *(void *)(a2 + 24) += v312;
      uint64_t v319 = *(void *)(a2 + 8);
      if (v312 < 0x10000)
      {
        __int16 v320 = v116 - 3;
        *(_WORD *)(v319 + 4) = v312;
        *(_DWORD *)uint64_t v319 = v117 + 1;
        if (v116 - 3 >= 0x10000) {
          goto LABEL_555;
        }
LABEL_552:
        *(_WORD *)(v319 + 6) = v320;
        uint64_t v341 = v319 + 8;
        *(void *)(a2 + 8) = v319 + 8;
        a4 = (_OWORD *)(v20 + v116);
        if (v16) {
          goto LABEL_556;
        }
LABEL_590:
        unsigned int v11 = (char *)a4;
        goto LABEL_18;
      }
      unint64_t v340 = (unint64_t)(v319 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v340;
      __int16 v320 = v116 - 3;
      *(_WORD *)(v319 + 4) = v312;
      *(_DWORD *)uint64_t v319 = v117 + 1;
      if (v116 - 3 < 0x10000) {
        goto LABEL_552;
      }
LABEL_555:
      unint64_t v342 = (unint64_t)(v319 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v342;
      *(_WORD *)(v319 + 6) = v320;
      uint64_t v341 = v319 + 8;
      *(void *)(a2 + 8) = v319 + 8;
      a4 = (_OWORD *)(v20 + v116);
      if (!v16) {
        goto LABEL_590;
      }
LABEL_556:
      if ((unint64_t)a4 > v364) {
        goto LABEL_590;
      }
      uint64_t v343 = v17;
      uint64_t v344 = v16;
      while (2)
      {
        uint64_t v17 = v344;
        uint64_t v344 = v343;
        if (*(_DWORD *)a4 != *(_DWORD *)((char *)a4 - v17))
        {
          LODWORD(v16) = v17;
          uint64_t v17 = v343;
          goto LABEL_590;
        }
        unsigned int v345 = (char *)a4 + 4;
        BOOL v346 = (char *)a4 - v17 + 4;
        if (v18 <= (unint64_t)a4 + 4)
        {
          int v349 = (char *)a4 + 4;
          if ((unint64_t)v345 < v366)
          {
LABEL_564:
            if (*(_DWORD *)v346 == *(_DWORD *)v349)
            {
              v349 += 4;
              v346 += 4;
            }
          }
          goto LABEL_566;
        }
        unint64_t v347 = *(void *)v345 ^ *(void *)v346;
        if (!v347)
        {
          unint64_t v352 = (char *)a4 + 12;
          while (1)
          {
            uint64_t v353 = &v352[v347];
            if ((unint64_t)&v352[v347] >= v18) {
              break;
            }
            uint64_t v354 = *(void *)((char *)a4 + v347 - v17 + 12);
            v347 += 8;
            unint64_t v355 = *(void *)v353 ^ v354;
            if (v355)
            {
              unint64_t v348 = v347 + (__clz(__rbit64(v355)) >> 3);
              if ((unint64_t)a4 <= v309) {
                goto LABEL_575;
              }
              goto LABEL_576;
            }
          }
          int v349 = (char *)a4 + v347 + 12;
          BOOL v346 = &v349[-v17];
          if ((unint64_t)v349 < v366) {
            goto LABEL_564;
          }
LABEL_566:
          if ((unint64_t)v349 >= v365)
          {
            if (v349 >= v5) {
              goto LABEL_574;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v346 == *(unsigned __int16 *)v349)
            {
              v349 += 2;
              v346 += 2;
            }
            if (v349 >= v5)
            {
LABEL_574:
              unint64_t v348 = v349 - v345;
              if ((unint64_t)a4 > v309) {
                goto LABEL_576;
              }
LABEL_575:
              *(_OWORD *)*(void *)(a2 + 24) = *a4;
              uint64_t v341 = *(void *)(a2 + 8);
              goto LABEL_576;
            }
          }
          if (*v346 == *v349) {
            ++v349;
          }
          goto LABEL_574;
        }
        unint64_t v348 = __clz(__rbit64(v347)) >> 3;
        if ((unint64_t)a4 <= v309) {
          goto LABEL_575;
        }
LABEL_576:
        __int16 v350 = v348 + 1;
        *(_WORD *)(v341 + 4) = 0;
        *(_DWORD *)uint64_t v341 = 1;
        if (v348 + 1 >= 0x10000)
        {
          unint64_t v351 = (unint64_t)(v341 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v351;
          *(_WORD *)(v341 + 6) = v350;
          v341 += 8;
          *(void *)(a2 + 8) = v341;
          a4 = (_OWORD *)((char *)a4 + v348 + 4);
          if (!v344) {
            break;
          }
          goto LABEL_580;
        }
        *(_WORD *)(v341 + 6) = v350;
        v341 += 8;
        *(void *)(a2 + 8) = v341;
        a4 = (_OWORD *)((char *)a4 + v348 + 4);
        if (v344)
        {
LABEL_580:
          uint64_t v343 = v17;
          LODWORD(v16) = v344;
          unsigned int v11 = (char *)a4;
          if ((unint64_t)a4 > v364) {
            goto LABEL_18;
          }
          continue;
        }
        break;
      }
      LODWORD(v16) = v344;
      unsigned int v11 = (char *)a4;
LABEL_18:
      if ((unint64_t)v11 >= v6)
      {
        a3 = v361;
        unsigned int v9 = v360;
        unsigned int v15 = v359;
        goto LABEL_593;
      }
    }
    unint64_t v25 = v11 + 5;
    if ((unint64_t)v21 < v366) {
      goto LABEL_25;
    }
    goto LABEL_32;
  }
LABEL_593:
  if (v10 <= v15) {
    unsigned int v356 = 0;
  }
  else {
    unsigned int v356 = v10;
  }
  if (v9 > v15) {
    unsigned int v356 = v9;
  }
  if (v17) {
    unsigned int v357 = v17;
  }
  else {
    unsigned int v357 = v356;
  }
  if (v16) {
    unsigned int v356 = v16;
  }
  *a3 = v357;
  a3[1] = v356;
  return v5 - (char *)a4;
}

unint64_t ZSTD_compressBlock_btlazy2(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  int v5 = a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = v7 + v8;
  unsigned int v10 = *a3;
  unsigned int v11 = a3[1];
  if (a4 == v7 + v8) {
    int v12 = (uint64_t *)((char *)a4 + 1);
  }
  else {
    int v12 = a4;
  }
  int v13 = v12 - v7;
  unint64_t v119 = v6 - 8;
  unsigned int v14 = 1 << *(_DWORD *)(a1 + 192);
  if (v13 - (int)v8 > v14 && *(_DWORD *)(a1 + 32) == 0) {
    LODWORD(v8) = v13 - v14;
  }
  unsigned int v16 = v13 - v8;
  if (v11 <= v16) {
    LODWORD(v17) = a3[1];
  }
  else {
    LODWORD(v17) = 0;
  }
  if (v10 <= v16) {
    uint64_t v18 = v10;
  }
  else {
    uint64_t v18 = 0;
  }
  if ((unint64_t)v12 < v6 - 8)
  {
    unsigned int v108 = v16;
    unsigned int v109 = a3[1];
    unsigned int v110 = *a3;
    unint64_t v111 = a3;
    unint64_t v112 = v9;
    unint64_t v20 = v6 - 7;
    unint64_t v115 = v6 - 1;
    unint64_t v116 = v6 - 3;
    unint64_t v117 = v6;
    unint64_t v113 = v6 - 32;
    while (1)
    {
      unint64_t v21 = 0;
      unsigned int v114 = v17;
      if (!v18 || *(_DWORD *)((char *)v12 - v18 + 1) != *(_DWORD *)((char *)v12 + 1)) {
        goto LABEL_37;
      }
      int v22 = (char *)v12 + 5;
      unint64_t v23 = (uint64_t *)((char *)v12 - v18 + 5);
      if (v20 <= (unint64_t)v12 + 5) {
        break;
      }
      unint64_t v24 = *(void *)v22 ^ *v23;
      if (!v24)
      {
        unsigned int v67 = (char *)v12 + 13;
        while (1)
        {
          unsigned int v68 = &v67[v24];
          if ((unint64_t)&v67[v24] >= v20) {
            break;
          }
          uint64_t v69 = *(uint64_t *)((char *)v12 + v24 - v18 + 13);
          v24 += 8;
          unint64_t v70 = *(void *)v68 ^ v69;
          if (v70)
          {
            unint64_t v25 = v24 + (__clz(__rbit64(v70)) >> 3);
            goto LABEL_36;
          }
        }
        unint64_t v26 = (_DWORD *)((char *)v12 + v24 + 13);
        unint64_t v23 = (void *)((char *)v26 - v18);
        if ((unint64_t)v26 >= v116)
        {
LABEL_27:
          if ((unint64_t)v26 >= v115)
          {
            if ((unint64_t)v26 < v6) {
              goto LABEL_33;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v23 == *(unsigned __int16 *)v26)
            {
              unint64_t v26 = (_DWORD *)((char *)v26 + 2);
              unint64_t v23 = (void *)((char *)v23 + 2);
            }
            if ((unint64_t)v26 >= v6) {
              goto LABEL_35;
            }
LABEL_33:
            if (*(unsigned __int8 *)v23 == *(unsigned __int8 *)v26) {
              unint64_t v26 = (_DWORD *)((char *)v26 + 1);
            }
          }
LABEL_35:
          unint64_t v25 = (char *)v26 - v22;
          goto LABEL_36;
        }
LABEL_25:
        if (*(_DWORD *)v23 == *v26)
        {
          ++v26;
          unint64_t v23 = (void *)((char *)v23 + 4);
        }
        goto LABEL_27;
      }
      unint64_t v25 = __clz(__rbit64(v24)) >> 3;
LABEL_36:
      unint64_t v21 = v25 + 4;
LABEL_37:
      uint64_t v120 = 999999999;
      unint64_t BestMatch_selectMLS = ZSTD_BtFindBestMatch_selectMLS(a1, v12, v6, &v120);
      if (BestMatch_selectMLS <= v21) {
        unint64_t v28 = v21;
      }
      else {
        unint64_t v28 = BestMatch_selectMLS;
      }
      if (v28 < 4)
      {
        int v12 = (uint64_t *)((char *)v12 + (((char *)v12 - (char *)v5) >> 8) + 1);
        unint64_t v6 = v117;
        LODWORD(v17) = v114;
        goto LABEL_18;
      }
      if (BestMatch_selectMLS <= v21) {
        unint64_t v29 = (uint64_t *)((char *)v12 + 1);
      }
      else {
        unint64_t v29 = v12;
      }
      if (BestMatch_selectMLS <= v21) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v120;
      }
      unint64_t v31 = v28;
      uint64_t v32 = v30;
      unsigned int v33 = v29;
      unint64_t v6 = v117;
      if ((unint64_t)v12 >= v119)
      {
LABEL_48:
        uint64_t v17 = v114;
        if (!v32) {
          goto LABEL_110;
        }
LABEL_49:
        if (v33 <= v5 || (unint64_t)v33 - v32 + 2 <= v112)
        {
          unsigned int v35 = v33;
          unint64_t v36 = v113;
        }
        else
        {
          uint64_t v34 = 1 - v32;
          unsigned int v35 = v33;
          unint64_t v36 = v113;
          while (1)
          {
            int v37 = *((unsigned __int8 *)v35 - 1);
            unsigned int v35 = (uint64_t *)((char *)v35 - 1);
            if (v37 != *((unsigned __int8 *)v33 + v34)) {
              break;
            }
            ++v31;
            if (v35 > v5)
            {
              unsigned int v38 = (char *)v33 + v34;
              unsigned int v33 = v35;
              if ((unint64_t)v38 > v112) {
                continue;
              }
            }
            goto LABEL_123;
          }
          unsigned int v35 = v33;
        }
LABEL_123:
        uint64_t v17 = v18;
        uint64_t v18 = (v32 - 2);
        unsigned int v33 = v35;
        unint64_t v58 = (char *)v35 - (char *)v5;
        uint64_t v59 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v33 > v36) {
          goto LABEL_124;
        }
LABEL_111:
        *uint64_t v59 = *(_OWORD *)v5;
        uint64_t v60 = *(void *)(a2 + 24);
        if (v58 > 0x10)
        {
          uint64_t v61 = (_OWORD *)(v60 + 16);
          unint64_t v62 = v60 + v58;
          unsigned int v63 = (long long *)(v5 + 2);
          do
          {
            long long v64 = *v63++;
            *v61++ = v64;
          }
          while ((unint64_t)v61 < v62);
          goto LABEL_151;
        }
        *(void *)(a2 + 24) = v60 + v58;
        uint64_t v65 = *(void *)(a2 + 8);
        __int16 v66 = v31 - 3;
        *(_WORD *)(v65 + 4) = v58;
        *(_DWORD *)uint64_t v65 = v32 + 1;
        if (v31 - 3 >= 0x10000) {
          goto LABEL_156;
        }
        goto LABEL_153;
      }
      while (1)
      {
        unsigned int v33 = (uint64_t *)((char *)v12 + 1);
        if (!v30 || !v18 || *(_DWORD *)v33 != *(_DWORD *)((char *)v33 - v18)) {
          goto LABEL_80;
        }
        unsigned int v39 = (char *)v12 + 5;
        uint64_t v40 = (uint64_t *)((char *)v12 - v18 + 5);
        if (v20 <= (unint64_t)v12 + 5)
        {
          int v43 = (unsigned __int16 *)((char *)v12 + 5);
          if ((unint64_t)v39 < v116) {
            goto LABEL_64;
          }
        }
        else
        {
          unint64_t v41 = *(void *)v39 ^ *v40;
          if (v41)
          {
            unint64_t v42 = __clz(__rbit64(v41)) >> 3;
LABEL_78:
            unint64_t v47 = v42 + 4;
            if (3 * (int)v47 > (int)(3 * v28 + (__clz(v30 + 1) ^ 0xFFFFFFE0) + 2))
            {
              uint64_t v30 = 0;
              unint64_t v28 = v47;
              unint64_t v29 = (uint64_t *)((char *)v12 + 1);
            }
            goto LABEL_80;
          }
          int v43 = (unsigned __int16 *)((char *)v12 + 13);
          while ((unint64_t)v43 < v20)
          {
            uint64_t v44 = *(void *)((char *)v43 - v18);
            uint64_t v45 = *(void *)v43;
            v43 += 4;
            unint64_t v46 = v45 ^ v44;
            if (v46)
            {
              int v43 = (unsigned __int16 *)((char *)v43 + (__clz(__rbit64(v46)) >> 3) - 8);
              goto LABEL_77;
            }
          }
          uint64_t v40 = (void *)((char *)v43 - v18);
          if ((unint64_t)v43 < v116)
          {
LABEL_64:
            if (*(_DWORD *)v40 == *(_DWORD *)v43)
            {
              v43 += 2;
              uint64_t v40 = (void *)((char *)v40 + 4);
            }
          }
        }
        if ((unint64_t)v43 < v115 && *(unsigned __int16 *)v40 == *v43)
        {
          ++v43;
          uint64_t v40 = (void *)((char *)v40 + 2);
        }
        if ((unint64_t)v43 < v6 && *(unsigned __int8 *)v40 == *(unsigned __int8 *)v43) {
          int v43 = (unsigned __int16 *)((char *)v43 + 1);
        }
LABEL_77:
        unint64_t v42 = (char *)v43 - v39;
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_78;
        }
LABEL_80:
        uint64_t v120 = 999999999;
        unint64_t v31 = ZSTD_BtFindBestMatch_selectMLS(a1, (uint64_t *)((char *)v12 + 1), v6, &v120);
        if (v31 >= 4)
        {
          uint64_t v32 = v120;
          if ((int)((__clz(v120 + 1) ^ 0xFFFFFFE0) + 4 * v31 + 1) > (int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 5)) {
            goto LABEL_56;
          }
        }
        if ((unint64_t)v33 >= v119) {
          break;
        }
        unsigned int v33 = (uint64_t *)((char *)v12 + 2);
        if (!v30)
        {
          unint64_t v48 = v117;
          goto LABEL_107;
        }
        unint64_t v48 = v117;
        if (!v18 || *(_DWORD *)v33 != *(_DWORD *)((char *)v33 - v18)) {
          goto LABEL_107;
        }
        unsigned int v49 = (char *)v12 + 6;
        uint64_t v50 = (uint64_t *)((char *)v12 - v18 + 6);
        if (v20 > (unint64_t)v12 + 6)
        {
          unint64_t v51 = *(void *)v49 ^ *v50;
          if (v51)
          {
            unint64_t v52 = __clz(__rbit64(v51)) >> 3;
LABEL_105:
            unint64_t v57 = v52 + 4;
            if ((int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 2) < 4 * (int)v57)
            {
              uint64_t v30 = 0;
              unint64_t v28 = v57;
              unint64_t v29 = (uint64_t *)((char *)v12 + 2);
            }
            goto LABEL_107;
          }
          unint64_t v53 = (unsigned __int16 *)v12 + 7;
          while ((unint64_t)v53 < v20)
          {
            uint64_t v54 = *(void *)((char *)v53 - v18);
            uint64_t v55 = *(void *)v53;
            v53 += 4;
            unint64_t v56 = v55 ^ v54;
            if (v56)
            {
              unint64_t v53 = (unsigned __int16 *)((char *)v53 + (__clz(__rbit64(v56)) >> 3) - 8);
              goto LABEL_104;
            }
          }
          uint64_t v50 = (void *)((char *)v53 - v18);
          if ((unint64_t)v53 >= v116) {
            goto LABEL_98;
          }
LABEL_91:
          if (*(_DWORD *)v50 == *(_DWORD *)v53)
          {
            v53 += 2;
            uint64_t v50 = (void *)((char *)v50 + 4);
          }
          goto LABEL_98;
        }
        unint64_t v53 = (unsigned __int16 *)v12 + 3;
        if ((unint64_t)v49 < v116) {
          goto LABEL_91;
        }
LABEL_98:
        if ((unint64_t)v53 < v115 && *(unsigned __int16 *)v50 == *v53)
        {
          ++v53;
          uint64_t v50 = (void *)((char *)v50 + 2);
        }
        if ((unint64_t)v53 < v117 && *(unsigned __int8 *)v50 == *(unsigned __int8 *)v53) {
          unint64_t v53 = (unsigned __int16 *)((char *)v53 + 1);
        }
LABEL_104:
        unint64_t v52 = (char *)v53 - v49;
        if (v52 <= 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_105;
        }
LABEL_107:
        uint64_t v120 = 999999999;
        unint64_t v31 = ZSTD_BtFindBestMatch_selectMLS(a1, (uint64_t *)((char *)v12 + 2), v48, &v120);
        if (v31 < 4) {
          break;
        }
        uint64_t v32 = v120;
        if ((int)((__clz(v120 + 1) ^ 0xFFFFFFE0) + 4 * v31 + 1) <= (int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 8)) {
          break;
        }
LABEL_56:
        unint64_t v6 = v117;
        int v12 = v33;
        unint64_t v29 = v33;
        uint64_t v30 = v32;
        unint64_t v28 = v31;
        if ((unint64_t)v33 >= v119) {
          goto LABEL_48;
        }
      }
      unint64_t v31 = v28;
      uint64_t v32 = v30;
      unsigned int v33 = v29;
      unint64_t v6 = v117;
      uint64_t v17 = v114;
      if (v30) {
        goto LABEL_49;
      }
LABEL_110:
      unint64_t v36 = v113;
      unint64_t v58 = (char *)v33 - (char *)v5;
      uint64_t v59 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v33 <= v113) {
        goto LABEL_111;
      }
LABEL_124:
      if ((unint64_t)v5 <= v36)
      {
        uint64_t v72 = (char *)v59 + v36 - (void)v5;
        int v73 = v5;
        int v74 = v59;
        do
        {
          long long v75 = *(_OWORD *)v73;
          v73 += 2;
          *v74++ = v75;
        }
        while (v74 < (_OWORD *)v72);
        int v71 = (_OWORD *)v36;
        if (v36 < (unint64_t)v33) {
          goto LABEL_130;
        }
      }
      else
      {
        int v71 = v5;
        uint64_t v72 = v59;
        if (v5 >= v33) {
          goto LABEL_151;
        }
LABEL_130:
        if ((unint64_t)v5 <= v36) {
          unsigned int v76 = (char *)v36;
        }
        else {
          unsigned int v76 = (char *)v5;
        }
        unint64_t v77 = (char *)v33 - v76;
        if ((unint64_t)((char *)v33 - v76) < 8)
        {
          int v78 = (uint64_t *)v71;
          goto LABEL_150;
        }
        if ((unint64_t)((char *)v59 - (char *)v5) < 0x20)
        {
          int v78 = (uint64_t *)v71;
          goto LABEL_150;
        }
        if (v77 >= 0x20)
        {
          unint64_t v79 = v77 & 0xFFFFFFFFFFFFFFE0;
          unsigned int v80 = v71 + 1;
          uint64_t v81 = (_OWORD *)((char *)v59 + v76 - (char *)v5 + 16);
          unint64_t v82 = v77 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *uint64_t v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 32;
          }
          while (v82);
          if (v77 != v79)
          {
            if ((v77 & 0x18) == 0)
            {
              int v78 = (uint64_t *)((char *)v71 + v79);
              v72 += v79;
              goto LABEL_150;
            }
            goto LABEL_145;
          }
        }
        else
        {
          unint64_t v79 = 0;
LABEL_145:
          v72 += v77 & 0xFFFFFFFFFFFFFFF8;
          int v78 = (uint64_t *)((char *)v71 + (v77 & 0xFFFFFFFFFFFFFFF8));
          int v84 = (uint64_t *)((char *)v71 + v79);
          uint64_t v85 = (void *)((char *)v59 + &v76[v79] - (char *)v5);
          unint64_t v86 = v79 - (v77 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v87 = *v84++;
            *v85++ = v87;
            v86 += 8;
          }
          while (v86);
          if (v77 != (v77 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_150:
              char v88 = *(unsigned char *)v78;
              int v78 = (uint64_t *)((char *)v78 + 1);
              *v72++ = v88;
            }
            while (v78 < v33);
          }
        }
      }
LABEL_151:
      *(void *)(a2 + 24) += v58;
      uint64_t v65 = *(void *)(a2 + 8);
      if (v58 < 0x10000)
      {
        __int16 v66 = v31 - 3;
        *(_WORD *)(v65 + 4) = v58;
        *(_DWORD *)uint64_t v65 = v32 + 1;
        if (v31 - 3 >= 0x10000) {
          goto LABEL_156;
        }
LABEL_153:
        *(_WORD *)(v65 + 6) = v66;
        uint64_t v90 = v65 + 8;
        *(void *)(a2 + 8) = v65 + 8;
        int v5 = (uint64_t *)((char *)v33 + v31);
        if (v17) {
          goto LABEL_157;
        }
LABEL_191:
        int v12 = v5;
        goto LABEL_18;
      }
      unint64_t v89 = (unint64_t)(v65 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v89;
      __int16 v66 = v31 - 3;
      *(_WORD *)(v65 + 4) = v58;
      *(_DWORD *)uint64_t v65 = v32 + 1;
      if (v31 - 3 < 0x10000) {
        goto LABEL_153;
      }
LABEL_156:
      unint64_t v91 = (unint64_t)(v65 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v91;
      *(_WORD *)(v65 + 6) = v66;
      uint64_t v90 = v65 + 8;
      *(void *)(a2 + 8) = v65 + 8;
      int v5 = (uint64_t *)((char *)v33 + v31);
      if (!v17) {
        goto LABEL_191;
      }
LABEL_157:
      if ((unint64_t)v5 > v119) {
        goto LABEL_191;
      }
      uint64_t v92 = v18;
      uint64_t v93 = v17;
      while (2)
      {
        uint64_t v18 = v93;
        uint64_t v93 = v92;
        if (*(_DWORD *)v5 != *(_DWORD *)((char *)v5 - v18))
        {
          LODWORD(v17) = v18;
          uint64_t v18 = v92;
          goto LABEL_191;
        }
        uint64_t v94 = (char *)v5 + 4;
        unsigned int v95 = (_DWORD *)((char *)v5 - v18 + 4);
        if (v20 <= (unint64_t)v5 + 4)
        {
          int v98 = (_DWORD *)v5 + 1;
          if ((unint64_t)v94 < v116)
          {
LABEL_165:
            if (*v95 == *v98)
            {
              ++v98;
              ++v95;
            }
          }
          goto LABEL_167;
        }
        unint64_t v96 = *(void *)v94 ^ *(void *)v95;
        if (!v96)
        {
          int v101 = (char *)v5 + 12;
          while (1)
          {
            uint64_t v102 = &v101[v96];
            if ((unint64_t)&v101[v96] >= v20) {
              break;
            }
            uint64_t v103 = *(uint64_t *)((char *)v5 + v96 - v18 + 12);
            v96 += 8;
            unint64_t v104 = *(void *)v102 ^ v103;
            if (v104)
            {
              unint64_t v97 = v96 + (__clz(__rbit64(v104)) >> 3);
              if ((unint64_t)v5 <= v36) {
                goto LABEL_176;
              }
              goto LABEL_177;
            }
          }
          int v98 = (_DWORD *)((char *)v5 + v96 + 12);
          unsigned int v95 = (_DWORD *)((char *)v98 - v18);
          if ((unint64_t)v98 < v116) {
            goto LABEL_165;
          }
LABEL_167:
          if ((unint64_t)v98 >= v115)
          {
            if ((unint64_t)v98 >= v6) {
              goto LABEL_175;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v95 == *(unsigned __int16 *)v98)
            {
              int v98 = (_DWORD *)((char *)v98 + 2);
              unsigned int v95 = (_DWORD *)((char *)v95 + 2);
            }
            if ((unint64_t)v98 >= v6)
            {
LABEL_175:
              unint64_t v97 = (char *)v98 - v94;
              if ((unint64_t)v5 > v36) {
                goto LABEL_177;
              }
LABEL_176:
              *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
              uint64_t v90 = *(void *)(a2 + 8);
              goto LABEL_177;
            }
          }
          if (*(unsigned __int8 *)v95 == *(unsigned __int8 *)v98) {
            int v98 = (_DWORD *)((char *)v98 + 1);
          }
          goto LABEL_175;
        }
        unint64_t v97 = __clz(__rbit64(v96)) >> 3;
        if ((unint64_t)v5 <= v36) {
          goto LABEL_176;
        }
LABEL_177:
        __int16 v99 = v97 + 1;
        *(_WORD *)(v90 + 4) = 0;
        *(_DWORD *)uint64_t v90 = 1;
        if (v97 + 1 >= 0x10000)
        {
          unint64_t v100 = (unint64_t)(v90 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v100;
          *(_WORD *)(v90 + 6) = v99;
          v90 += 8;
          *(void *)(a2 + 8) = v90;
          int v5 = (uint64_t *)((char *)v5 + v97 + 4);
          if (!v93) {
            break;
          }
          goto LABEL_181;
        }
        *(_WORD *)(v90 + 6) = v99;
        v90 += 8;
        *(void *)(a2 + 8) = v90;
        int v5 = (uint64_t *)((char *)v5 + v97 + 4);
        if (v93)
        {
LABEL_181:
          uint64_t v92 = v18;
          LODWORD(v17) = v93;
          int v12 = v5;
          if ((unint64_t)v5 > v119) {
            goto LABEL_18;
          }
          continue;
        }
        break;
      }
      LODWORD(v17) = v93;
      int v12 = v5;
LABEL_18:
      if ((unint64_t)v12 >= v119)
      {
        a3 = v111;
        unsigned int v11 = v109;
        unsigned int v10 = v110;
        unsigned int v16 = v108;
        goto LABEL_194;
      }
    }
    unint64_t v26 = (_DWORD *)((char *)v12 + 5);
    if ((unint64_t)v22 >= v116) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
LABEL_194:
  if (v11 <= v16) {
    unsigned int v105 = 0;
  }
  else {
    unsigned int v105 = v11;
  }
  if (v10 > v16) {
    unsigned int v105 = v10;
  }
  if (v18) {
    unsigned int v106 = v18;
  }
  else {
    unsigned int v106 = v105;
  }
  if (v17) {
    unsigned int v105 = v17;
  }
  *a3 = v106;
  a3[1] = v105;
  return v6 - (void)v5;
}

unint64_t ZSTD_compressBlock_btopt(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v773 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (char **)(a1 + 80);
  unint64_t v7 = (unint64_t)&a4[a5];
  v747 = a4;
  unint64_t v748 = (unint64_t)&a4[a5 - 8];
  uint64_t v8 = (unsigned __int8 *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
    int v9 = 4095;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 212);
  }
  unsigned int v731 = v9;
  if (*(_DWORD *)(a1 + 208) == 3) {
    uint64_t v10 = 3;
  }
  else {
    uint64_t v10 = 4;
  }
  uint64_t v732 = v10;
  unsigned int v701 = *(_DWORD *)(a1 + 36);
  unsigned int v11 = *(unsigned int **)(a1 + 120);
  v761 = *(_DWORD **)(a1 + 112);
  unsigned int v772 = 0;
  uint64_t v771 = 0;
  long long v768 = 0u;
  memset(v769, 0, sizeof(v769));
  long long v767 = 0u;
  int v12 = *(long long **)(a1 + 224);
  if (v12)
  {
    long long v13 = v12[1];
    long long v767 = *v12;
    long long v768 = v13;
    *(void *)v769 = *((void *)v12 + 4);
  }
  else
  {
    *(void *)v769 = 0;
    long long v767 = 0uLL;
    long long v768 = 0uLL;
  }
  *(void *)&v769[12] = 0;
  *(_DWORD *)&v769[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v767, 0, a5);
  ZSTD_rescaleFreqs(v6, v747, a5, 0);
  if (v8 == v747) {
    unsigned int v14 = v747 + 1;
  }
  else {
    unsigned int v14 = v747;
  }
  if ((unint64_t)v14 < v748)
  {
    unsigned int v726 = 0;
    unint64_t v762 = v7 - 7;
    unint64_t v750 = v7 - 1;
    unint64_t v751 = v7 - 3;
    uint64_t v15 = (v732 - 1) | 1;
    v763 = v11 + 14;
    uint64_t v699 = v732 - v15;
    v700 = &v11[7 * v15];
    unsigned int v16 = v11 + 7;
    uint64_t v17 = v747;
    unint64_t v760 = v7;
    uint64_t v18 = a1;
    unint64_t v733 = v7 - 32;
    v734 = v6;
    while (1)
    {
      v752 = v17;
      unsigned int v764 = v14 - v17;
      unsigned int v766 = 0;
      uint64_t v20 = *(void *)(v18 + 8);
      uint64_t v21 = *(unsigned int *)(v18 + 36);
      v759 = v14;
      if (v20 + v21 > (unint64_t)v14)
      {
        unsigned int v22 = 0;
        unint64_t v23 = v733;
        unint64_t v24 = v734;
        uint64_t v17 = v752;
        goto LABEL_307;
      }
      int v25 = *(_DWORD *)(v18 + 208);
      for (unsigned int i = v14 - v20;
            v21 < i;
      *(_DWORD *)(v18 + 36) = i;
      if ((v25 - 6) < 2)
      {
        unsigned int v22 = 0;
        if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
          unsigned int v63 = 4095;
        }
        else {
          unsigned int v63 = *(_DWORD *)(v18 + 212);
        }
        uint64_t v64 = *(void *)(v18 + 8);
        int v65 = v759 - v64;
        int v66 = -1 << (*(_DWORD *)(v18 + 196) - 1);
        int v67 = ~v66;
        unsigned int v68 = v759 - v64 + v66 + 1;
        if ((int)v759 - (int)v64 < ~v66) {
          unsigned int v68 = 0;
        }
        unsigned int v755 = v68;
        unsigned int v69 = 1 << *(_DWORD *)(v18 + 192);
        if (v65 - *(_DWORD *)(v18 + 28) > v69 && *(_DWORD *)(v18 + 32) == 0) {
          unsigned int v71 = v65 - v69;
        }
        else {
          unsigned int v71 = *(_DWORD *)(v18 + 28);
        }
        if (v71 <= 1) {
          unsigned int v72 = 1;
        }
        else {
          unsigned int v72 = v71;
        }
        unsigned int v73 = v65 - *(_DWORD *)(v18 + 24);
        int v74 = (char *)(v759 + 12);
        int v738 = *(_DWORD *)(v18 + 204);
        unint64_t v75 = (0xCF1BBCDCBF9B0000 * *(void *)v759) >> -*(unsigned char *)(v18 + 200);
        uint64_t v742 = *(void *)(v18 + 48);
        unsigned int v76 = *(_DWORD *)(v742 + 4 * v75);
        uint64_t v77 = v764 == 0;
        uint64_t v78 = *(void *)(v18 + 64);
        unint64_t v79 = (unsigned int *)(v78 + 8 * (v65 & ~v66));
        unsigned int v80 = v79 + 1;
        int v81 = v65 + 9;
        int v770 = 0;
        if (v764) {
          unint64_t v82 = 3;
        }
        else {
          unint64_t v82 = 4;
        }
        long long v83 = v759 + 4;
        if (v764) {
          int v84 = 0;
        }
        else {
          int v84 = -1;
        }
        unint64_t v85 = (v732 - 1);
        while (1)
        {
          if (v77 == 3)
          {
            unsigned int v86 = *a3 - 1;
            if (*a3 - 2 >= v73) {
              goto LABEL_100;
            }
          }
          else
          {
            unsigned int v86 = a3[v77];
            if (v86 - 1 >= v73) {
              goto LABEL_100;
            }
          }
          if (v65 - v86 >= v71 && *(_DWORD *)v759 == *(_DWORD *)&v759[-v86]) {
            break;
          }
LABEL_100:
          if (++v77 >= v82)
          {
            *(_DWORD *)(v742 + 4 * v75) = v65;
            if (v76 < v72)
            {
LABEL_300:
              uint64_t v106 = a1;
              goto LABEL_301;
            }
            unint64_t v100 = 0;
            unint64_t v101 = 0;
            int v102 = ~(-1 << v738);
            int v103 = v65 + 2;
            unint64_t v104 = v759 + 8;
            uint64_t v105 = v64 + 8;
            uint64_t v106 = a1;
            unsigned int v107 = v755;
            while (1)
            {
              unint64_t v108 = v101 >= v100 ? v100 : v101;
              uint64_t v109 = v64 + v76;
              unsigned int v110 = &v759[v108];
              unint64_t v111 = (void *)(v109 + v108);
              if (v762 <= (unint64_t)&v759[v108]) {
                break;
              }
              unint64_t v112 = *(void *)v110 ^ *v111;
              if (v112)
              {
                unint64_t v113 = (unsigned __int8 *)v760;
                unint64_t v114 = (__clz(__rbit64(v112)) >> 3) + v108;
                if (v114 <= v85) {
                  goto LABEL_144;
                }
                goto LABEL_157;
              }
              uint64_t v120 = (char *)v104 + v108;
              do
              {
                unint64_t v121 = &v120[v112];
                if ((unint64_t)&v120[v112] >= v762)
                {
                  unint64_t v116 = (unsigned __int8 *)v104 + v108 + v112;
                  unint64_t v111 = (void *)(v105 + v108 + v76 + v112);
                  unsigned int v107 = v755;
                  unint64_t v113 = (unsigned __int8 *)v760;
                  if ((unint64_t)v116 >= v751) {
                    goto LABEL_148;
                  }
                  goto LABEL_146;
                }
                uint64_t v122 = *(void *)(v105 + v108 + v76 + v112);
                v112 += 8;
                unint64_t v123 = *(void *)v121 ^ v122;
              }
              while (!v123);
              unint64_t v113 = (unsigned __int8 *)v760;
              uint64_t v106 = a1;
              unsigned int v107 = v755;
              unint64_t v114 = v112 + (__clz(__rbit64(v123)) >> 3) + v108;
              if (v114 <= v85)
              {
LABEL_144:
                unint64_t v115 = v759;
                goto LABEL_163;
              }
LABEL_157:
              if (v114 > v81 - v76) {
                int v81 = v76 + v114;
              }
              unint64_t v117 = &v761[2 * v22];
              *unint64_t v117 = v103 - v76;
              v117[1] = v114;
              ++v22;
              unint64_t v115 = v759;
              BOOL v118 = v114 > 0x1000 || &v759[v114] == v113;
              unint64_t v85 = v114;
              if (v118) {
                goto LABEL_301;
              }
LABEL_163:
              unint64_t v119 = (unsigned int *)(v78 + 8 * (v76 & v67));
              if (*(unsigned __int8 *)(v109 + v114) >= *((unsigned __int8 *)v115 + v114))
              {
                *unsigned int v80 = v76;
                if (v76 <= v107) {
                  goto LABEL_1082;
                }
                unint64_t v100 = v114;
                unsigned int v80 = (unsigned int *)(v78 + 8 * (v76 & v67));
                BOOL v232 = v102-- != 0;
                if (!v232)
                {
LABEL_301:
                  *unsigned int v80 = 0;
                  *unint64_t v79 = 0;
                  int v202 = v81 - 8;
                  goto LABEL_305;
                }
              }
              else
              {
                *unint64_t v79 = v76;
                if (v76 <= v107)
                {
LABEL_1081:
                  unint64_t v79 = (unsigned int *)&v770;
                  goto LABEL_301;
                }
                ++v119;
                unint64_t v101 = v114;
                unint64_t v79 = v119;
                BOOL v232 = v102-- != 0;
                if (!v232) {
                  goto LABEL_301;
                }
              }
              unsigned int v76 = *v119;
              if (*v119 < v72) {
                goto LABEL_301;
              }
            }
            unint64_t v116 = &v759[v108];
            unint64_t v113 = (unsigned __int8 *)v760;
            if ((unint64_t)v110 >= v751) {
              goto LABEL_148;
            }
LABEL_146:
            if (*(_DWORD *)v111 == *(_DWORD *)v116)
            {
              v116 += 4;
              unint64_t v111 = (void *)((char *)v111 + 4);
            }
LABEL_148:
            if ((unint64_t)v116 >= v750)
            {
              if (v116 >= v113) {
                goto LABEL_156;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v111 == *(unsigned __int16 *)v116)
              {
                v116 += 2;
                unint64_t v111 = (void *)((char *)v111 + 2);
              }
              if (v116 >= v113)
              {
LABEL_156:
                uint64_t v106 = a1;
                unint64_t v114 = v116 - v759;
                if (v116 - v759 <= v85) {
                  goto LABEL_144;
                }
                goto LABEL_157;
              }
            }
            if (*(unsigned __int8 *)v111 == *v116) {
              ++v116;
            }
            goto LABEL_156;
          }
        }
        uint64_t v88 = -(uint64_t)v86;
        unint64_t v89 = (char *)v83 - v86;
        if (v762 <= (unint64_t)v83)
        {
          uint64_t v94 = (char *)(v759 + 4);
          if ((unint64_t)v83 >= v751) {
            goto LABEL_117;
          }
        }
        else
        {
          unint64_t v90 = *v83 ^ *(void *)v89;
          unint64_t v91 = (unsigned __int8 *)v760;
          if (v90)
          {
            unsigned int v92 = (__clz(__rbit64(v90)) >> 3) + 4;
            unint64_t v93 = v92;
            if (v85 < v92) {
              goto LABEL_126;
            }
            goto LABEL_100;
          }
          while (1)
          {
            uint64_t v94 = &v74[v90];
            if ((unint64_t)&v74[v90] >= v762) {
              break;
            }
            uint64_t v97 = *(void *)&v74[v88 + v90];
            v90 += 8;
            unint64_t v98 = *(void *)v94 ^ v97;
            if (v98)
            {
              unint64_t v99 = __clz(__rbit64(v98));
              unint64_t v91 = (unsigned __int8 *)v760;
              unsigned int v92 = v90 + (v99 >> 3) + 4;
              unint64_t v93 = v92;
              if (v85 < v92)
              {
LABEL_126:
                unint64_t v96 = &v761[2 * v22];
                *unint64_t v96 = v77 + v84;
                v96[1] = v92;
                ++v22;
                if (v92 > v63) {
                  goto LABEL_306;
                }
                unint64_t v85 = v93;
                if (&v759[v93] == v91) {
                  goto LABEL_306;
                }
              }
              goto LABEL_100;
            }
          }
          unint64_t v89 = &v94[v88];
          if ((unint64_t)v94 >= v751)
          {
LABEL_117:
            if ((unint64_t)v94 >= v750)
            {
              if ((unint64_t)v94 >= v760) {
                goto LABEL_125;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v89 == *(unsigned __int16 *)v94)
              {
                v94 += 2;
                v89 += 2;
              }
              if ((unint64_t)v94 >= v760)
              {
LABEL_125:
                int v95 = v94 - v83;
                unint64_t v91 = (unsigned __int8 *)v760;
                unsigned int v92 = v95 + 4;
                unint64_t v93 = v92;
                if (v85 < v92) {
                  goto LABEL_126;
                }
                goto LABEL_100;
              }
            }
            if (*v89 == *v94) {
              LODWORD(v94) = v94 + 1;
            }
            goto LABEL_125;
          }
        }
        if (*(_DWORD *)v89 == *(_DWORD *)v94)
        {
          v94 += 4;
          v89 += 4;
        }
        goto LABEL_117;
      }
      if (v25 == 5)
      {
        unsigned int v22 = 0;
        if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
          unsigned int v124 = 4095;
        }
        else {
          unsigned int v124 = *(_DWORD *)(a1 + 212);
        }
        uint64_t v125 = *(void *)(a1 + 8);
        int v126 = v759 - v125;
        int v127 = -1 << (*(_DWORD *)(a1 + 196) - 1);
        int v128 = ~v127;
        unsigned int v129 = v759 - v125 + v127 + 1;
        if ((int)v759 - (int)v125 < ~v127) {
          unsigned int v129 = 0;
        }
        unsigned int v756 = v129;
        unsigned int v130 = 1 << *(_DWORD *)(a1 + 192);
        if (v126 - *(_DWORD *)(a1 + 28) > v130 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v132 = v126 - v130;
        }
        else {
          unsigned int v132 = *(_DWORD *)(a1 + 28);
        }
        if (v132 <= 1) {
          unsigned int v133 = 1;
        }
        else {
          unsigned int v133 = v132;
        }
        unsigned int v134 = v126 - *(_DWORD *)(a1 + 24);
        unsigned int v135 = (char *)(v759 + 12);
        int v739 = *(_DWORD *)(a1 + 204);
        unint64_t v136 = (0xCF1BBCDCBB000000 * *(void *)v759) >> -(char)*(_DWORD *)(a1 + 200);
        uint64_t v743 = *(void *)(a1 + 48);
        unsigned int v137 = *(_DWORD *)(v743 + 4 * v136);
        uint64_t v138 = v764 == 0;
        uint64_t v139 = *(void *)(a1 + 64);
        unint64_t v79 = (unsigned int *)(v139 + 8 * (v126 & ~v127));
        unsigned int v80 = v79 + 1;
        int v81 = v126 + 9;
        int v770 = 0;
        if (v764) {
          unint64_t v140 = 3;
        }
        else {
          unint64_t v140 = 4;
        }
        int v141 = v759 + 4;
        if (v764) {
          int v142 = 0;
        }
        else {
          int v142 = -1;
        }
        unint64_t v143 = (v732 - 1);
        while (1)
        {
          if (v138 == 3)
          {
            unsigned int v144 = *a3 - 1;
            if (*a3 - 2 >= v134) {
              goto LABEL_198;
            }
          }
          else
          {
            unsigned int v144 = a3[v138];
            if (v144 - 1 >= v134) {
              goto LABEL_198;
            }
          }
          if (v126 - v144 >= v132 && *(_DWORD *)v759 == *(_DWORD *)&v759[-v144]) {
            break;
          }
LABEL_198:
          if (++v138 >= v140)
          {
            *(_DWORD *)(v743 + 4 * v136) = v126;
            if (v137 < v133) {
              goto LABEL_300;
            }
            unint64_t v616 = 0;
            unint64_t v617 = 0;
            int v618 = ~(-1 << v739);
            int v619 = v126 + 2;
            v620 = v759 + 8;
            uint64_t v621 = v125 + 8;
            uint64_t v106 = a1;
            unsigned int v622 = v756;
            while (1)
            {
              unint64_t v623 = v617 >= v616 ? v616 : v617;
              uint64_t v624 = v125 + v137;
              v625 = &v759[v623];
              unint64_t v626 = (void *)(v624 + v623);
              if (v762 <= (unint64_t)&v759[v623]) {
                break;
              }
              unint64_t v627 = *(void *)v625 ^ *v626;
              if (v627)
              {
                unint64_t v628 = (unsigned __int8 *)v760;
                unint64_t v629 = (__clz(__rbit64(v627)) >> 3) + v623;
                if (v629 <= v143) {
                  goto LABEL_965;
                }
                goto LABEL_978;
              }
              unint64_t v635 = (char *)v620 + v623;
              do
              {
                uint64_t v636 = &v635[v627];
                if ((unint64_t)&v635[v627] >= v762)
                {
                  unint64_t v631 = (unsigned __int8 *)v620 + v623 + v627;
                  unint64_t v626 = (void *)(v621 + v623 + v137 + v627);
                  unsigned int v622 = v756;
                  unint64_t v628 = (unsigned __int8 *)v760;
                  if ((unint64_t)v631 >= v751) {
                    goto LABEL_969;
                  }
                  goto LABEL_967;
                }
                uint64_t v637 = *(void *)(v621 + v623 + v137 + v627);
                v627 += 8;
                unint64_t v638 = *(void *)v636 ^ v637;
              }
              while (!v638);
              unint64_t v628 = (unsigned __int8 *)v760;
              uint64_t v106 = a1;
              unsigned int v622 = v756;
              unint64_t v629 = v627 + (__clz(__rbit64(v638)) >> 3) + v623;
              if (v629 <= v143)
              {
LABEL_965:
                v630 = v759;
                goto LABEL_984;
              }
LABEL_978:
              if (v629 > v81 - v137) {
                int v81 = v137 + v629;
              }
              long long v632 = &v761[2 * v22];
              *long long v632 = v619 - v137;
              v632[1] = v629;
              ++v22;
              v630 = v759;
              BOOL v633 = v629 > 0x1000 || &v759[v629] == v628;
              unint64_t v143 = v629;
              if (v633) {
                goto LABEL_301;
              }
LABEL_984:
              v634 = (unsigned int *)(v139 + 8 * (v137 & v128));
              if (*(unsigned __int8 *)(v624 + v629) >= *((unsigned __int8 *)v630 + v629))
              {
                *unsigned int v80 = v137;
                if (v137 > v622)
                {
                  unint64_t v616 = v629;
                  unsigned int v80 = (unsigned int *)(v139 + 8 * (v137 & v128));
                  BOOL v232 = v618-- != 0;
                  if (!v232) {
                    goto LABEL_301;
                  }
                  goto LABEL_958;
                }
LABEL_1082:
                unsigned int v80 = (unsigned int *)&v770;
                goto LABEL_301;
              }
              *unint64_t v79 = v137;
              if (v137 <= v622) {
                goto LABEL_1081;
              }
              ++v634;
              unint64_t v617 = v629;
              unint64_t v79 = v634;
              BOOL v232 = v618-- != 0;
              if (!v232) {
                goto LABEL_301;
              }
LABEL_958:
              unsigned int v137 = *v634;
              if (*v634 < v133) {
                goto LABEL_301;
              }
            }
            unint64_t v631 = &v759[v623];
            unint64_t v628 = (unsigned __int8 *)v760;
            if ((unint64_t)v625 >= v751) {
              goto LABEL_969;
            }
LABEL_967:
            if (*(_DWORD *)v626 == *(_DWORD *)v631)
            {
              v631 += 4;
              unint64_t v626 = (void *)((char *)v626 + 4);
            }
LABEL_969:
            if ((unint64_t)v631 >= v750)
            {
              if (v631 >= v628) {
                goto LABEL_977;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v626 == *(unsigned __int16 *)v631)
              {
                v631 += 2;
                unint64_t v626 = (void *)((char *)v626 + 2);
              }
              if (v631 >= v628)
              {
LABEL_977:
                uint64_t v106 = a1;
                unint64_t v629 = v631 - v759;
                if (v631 - v759 <= v143) {
                  goto LABEL_965;
                }
                goto LABEL_978;
              }
            }
            if (*(unsigned __int8 *)v626 == *v631) {
              ++v631;
            }
            goto LABEL_977;
          }
        }
        uint64_t v146 = -(uint64_t)v144;
        unsigned int v147 = (char *)v141 - v144;
        if (v762 <= (unint64_t)v141)
        {
          unint64_t v152 = (char *)(v759 + 4);
          if ((unint64_t)v141 >= v751) {
            goto LABEL_215;
          }
        }
        else
        {
          unint64_t v148 = *v141 ^ *(void *)v147;
          uint64_t v149 = (unsigned __int8 *)v760;
          if (v148)
          {
            unsigned int v150 = (__clz(__rbit64(v148)) >> 3) + 4;
            unint64_t v151 = v150;
            if (v143 < v150) {
              goto LABEL_224;
            }
            goto LABEL_198;
          }
          while (1)
          {
            unint64_t v152 = &v135[v148];
            if ((unint64_t)&v135[v148] >= v762) {
              break;
            }
            uint64_t v155 = *(void *)&v135[v146 + v148];
            v148 += 8;
            unint64_t v156 = *(void *)v152 ^ v155;
            if (v156)
            {
              unint64_t v157 = __clz(__rbit64(v156));
              uint64_t v149 = (unsigned __int8 *)v760;
              unsigned int v150 = v148 + (v157 >> 3) + 4;
              unint64_t v151 = v150;
              if (v143 < v150)
              {
LABEL_224:
                unint64_t v154 = &v761[2 * v22];
                *unint64_t v154 = v138 + v142;
                v154[1] = v150;
                ++v22;
                if (v150 > v124) {
                  goto LABEL_306;
                }
                unint64_t v143 = v151;
                if (&v759[v151] == v149) {
                  goto LABEL_306;
                }
              }
              goto LABEL_198;
            }
          }
          unsigned int v147 = &v152[v146];
          if ((unint64_t)v152 >= v751)
          {
LABEL_215:
            if ((unint64_t)v152 >= v750)
            {
              if ((unint64_t)v152 >= v760) {
                goto LABEL_223;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v147 == *(unsigned __int16 *)v152)
              {
                v152 += 2;
                v147 += 2;
              }
              if ((unint64_t)v152 >= v760)
              {
LABEL_223:
                int v153 = v152 - v141;
                uint64_t v149 = (unsigned __int8 *)v760;
                unsigned int v150 = v153 + 4;
                unint64_t v151 = v150;
                if (v143 < v150) {
                  goto LABEL_224;
                }
                goto LABEL_198;
              }
            }
            if (*v147 == *v152) {
              LODWORD(v152) = v152 + 1;
            }
            goto LABEL_223;
          }
        }
        if (*(_DWORD *)v147 == *(_DWORD *)v152)
        {
          v152 += 4;
          v147 += 4;
        }
        goto LABEL_215;
      }
      unsigned int v22 = 0;
      if (v25 != 3)
      {
        if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
          unsigned int v158 = 4095;
        }
        else {
          unsigned int v158 = *(_DWORD *)(a1 + 212);
        }
        uint64_t v159 = *(void *)(a1 + 8);
        int v160 = v759 - v159;
        int v161 = -1 << (*(_DWORD *)(a1 + 196) - 1);
        int v162 = ~v161;
        unsigned int v163 = v759 - v159 + v161 + 1;
        if ((int)v759 - (int)v159 < ~v161) {
          unsigned int v163 = 0;
        }
        unsigned int v757 = v163;
        unsigned int v164 = 1 << *(_DWORD *)(a1 + 192);
        if (v160 - *(_DWORD *)(a1 + 28) > v164 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v166 = v160 - v164;
        }
        else {
          unsigned int v166 = *(_DWORD *)(a1 + 28);
        }
        if (v166 <= 1) {
          unsigned int v167 = 1;
        }
        else {
          unsigned int v167 = v166;
        }
        unsigned int v168 = v160 - *(_DWORD *)(a1 + 24);
        int v169 = (char *)(v759 + 12);
        int v740 = *(_DWORD *)(a1 + 204);
        uint64_t v170 = (-1640531535 * *(_DWORD *)v759) >> -(char)*(_DWORD *)(a1 + 200);
        uint64_t v744 = *(void *)(a1 + 48);
        unsigned int v171 = *(_DWORD *)(v744 + 4 * v170);
        uint64_t v172 = v764 == 0;
        uint64_t v173 = *(void *)(a1 + 64);
        unsigned int v174 = (unsigned int *)(v173 + 8 * (v160 & ~v161));
        unsigned int v175 = v174 + 1;
        int v176 = v160 + 9;
        int v770 = 0;
        if (v764) {
          unint64_t v177 = 3;
        }
        else {
          unint64_t v177 = 4;
        }
        uint64_t v178 = v759 + 4;
        if (v764) {
          int v179 = 0;
        }
        else {
          int v179 = -1;
        }
        unint64_t v180 = (v732 - 1);
        while (1)
        {
          if (v172 == 3)
          {
            unsigned int v181 = *a3 - 1;
            if (*a3 - 2 >= v168) {
              goto LABEL_254;
            }
          }
          else
          {
            unsigned int v181 = a3[v172];
            if (v181 - 1 >= v168) {
              goto LABEL_254;
            }
          }
          if (v160 - v181 >= v166 && *(_DWORD *)v759 == *(_DWORD *)&v759[-v181]) {
            break;
          }
LABEL_254:
          if (++v172 >= v177)
          {
            *(_DWORD *)(v744 + 4 * v170) = v160;
            if (v171 < v167)
            {
              uint64_t v106 = a1;
              goto LABEL_304;
            }
            unint64_t v639 = 0;
            unint64_t v640 = 0;
            int v641 = ~(-1 << v740);
            int v642 = v160 + 2;
            unint64_t v643 = v759 + 8;
            uint64_t v644 = v159 + 8;
            uint64_t v106 = a1;
            unsigned int v645 = v757;
            while (1)
            {
              unint64_t v646 = v640 >= v639 ? v639 : v640;
              uint64_t v647 = v159 + v171;
              uint64_t v648 = &v759[v646];
              uint64_t v649 = (void *)(v647 + v646);
              if (v762 <= (unint64_t)&v759[v646]) {
                break;
              }
              unint64_t v650 = *(void *)v648 ^ *v649;
              if (v650)
              {
                unsigned int v651 = (unsigned __int8 *)v760;
                unint64_t v652 = (__clz(__rbit64(v650)) >> 3) + v646;
                if (v652 <= v180) {
                  goto LABEL_1006;
                }
                goto LABEL_1019;
              }
              unint64_t v658 = (char *)v643 + v646;
              do
              {
                unint64_t v659 = &v658[v650];
                if ((unint64_t)&v658[v650] >= v762)
                {
                  uint64_t v654 = (unsigned __int8 *)v643 + v646 + v650;
                  uint64_t v649 = (void *)(v644 + v646 + v171 + v650);
                  unsigned int v645 = v757;
                  unsigned int v651 = (unsigned __int8 *)v760;
                  if ((unint64_t)v654 >= v751) {
                    goto LABEL_1010;
                  }
                  goto LABEL_1008;
                }
                uint64_t v660 = *(void *)(v644 + v646 + v171 + v650);
                v650 += 8;
                unint64_t v661 = *(void *)v659 ^ v660;
              }
              while (!v661);
              unsigned int v651 = (unsigned __int8 *)v760;
              uint64_t v106 = a1;
              unsigned int v645 = v757;
              unint64_t v652 = v650 + (__clz(__rbit64(v661)) >> 3) + v646;
              if (v652 <= v180)
              {
LABEL_1006:
                uint64_t v653 = v759;
                goto LABEL_1025;
              }
LABEL_1019:
              if (v652 > v176 - v171) {
                int v176 = v171 + v652;
              }
              uint64_t v655 = &v761[2 * v22];
              *uint64_t v655 = v642 - v171;
              v655[1] = v652;
              ++v22;
              uint64_t v653 = v759;
              BOOL v656 = v652 > 0x1000 || &v759[v652] == v651;
              unint64_t v180 = v652;
              if (v656) {
                goto LABEL_304;
              }
LABEL_1025:
              unint64_t v657 = (unsigned int *)(v173 + 8 * (v171 & v162));
              if (*(unsigned __int8 *)(v647 + v652) >= *((unsigned __int8 *)v653 + v652))
              {
                *unsigned int v175 = v171;
                if (v171 <= v645)
                {
                  unsigned int v175 = (unsigned int *)&v770;
                  goto LABEL_304;
                }
                unint64_t v639 = v652;
                unsigned int v175 = (unsigned int *)(v173 + 8 * (v171 & v162));
                BOOL v232 = v641-- != 0;
                if (v232) {
                  goto LABEL_999;
                }
LABEL_304:
                *unsigned int v175 = 0;
                *unsigned int v174 = 0;
                int v202 = v176 - 8;
LABEL_305:
                *(_DWORD *)(v106 + 36) = v202;
LABEL_306:
                uint64_t v18 = a1;
                unint64_t v23 = v733;
                unint64_t v24 = v734;
                unsigned int v16 = v11 + 7;
                uint64_t v17 = v752;
                unsigned int v14 = v759;
                goto LABEL_307;
              }
              *unsigned int v174 = v171;
              if (v171 <= v645)
              {
                unsigned int v174 = (unsigned int *)&v770;
                goto LABEL_304;
              }
              ++v657;
              unint64_t v640 = v652;
              unsigned int v174 = v657;
              BOOL v232 = v641-- != 0;
              if (!v232) {
                goto LABEL_304;
              }
LABEL_999:
              unsigned int v171 = *v657;
              if (*v657 < v167) {
                goto LABEL_304;
              }
            }
            uint64_t v654 = &v759[v646];
            unsigned int v651 = (unsigned __int8 *)v760;
            if ((unint64_t)v648 >= v751) {
              goto LABEL_1010;
            }
LABEL_1008:
            if (*(_DWORD *)v649 == *(_DWORD *)v654)
            {
              v654 += 4;
              uint64_t v649 = (void *)((char *)v649 + 4);
            }
LABEL_1010:
            if ((unint64_t)v654 >= v750)
            {
              if (v654 >= v651) {
                goto LABEL_1018;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v649 == *(unsigned __int16 *)v654)
              {
                v654 += 2;
                uint64_t v649 = (void *)((char *)v649 + 2);
              }
              if (v654 >= v651)
              {
LABEL_1018:
                uint64_t v106 = a1;
                unint64_t v652 = v654 - v759;
                if (v654 - v759 <= v180) {
                  goto LABEL_1006;
                }
                goto LABEL_1019;
              }
            }
            if (*(unsigned __int8 *)v649 == *v654) {
              ++v654;
            }
            goto LABEL_1018;
          }
        }
        uint64_t v183 = -(uint64_t)v181;
        uint64_t v184 = (char *)v178 - v181;
        if (v762 <= (unint64_t)v178)
        {
          uint64_t v189 = (char *)(v759 + 4);
          if ((unint64_t)v178 >= v751) {
            goto LABEL_271;
          }
        }
        else
        {
          unint64_t v185 = *v178 ^ *(void *)v184;
          uint64_t v186 = (unsigned __int8 *)v760;
          if (v185)
          {
            unsigned int v187 = (__clz(__rbit64(v185)) >> 3) + 4;
            unint64_t v188 = v187;
            if (v180 < v187) {
              goto LABEL_280;
            }
            goto LABEL_254;
          }
          while (1)
          {
            uint64_t v189 = &v169[v185];
            if ((unint64_t)&v169[v185] >= v762) {
              break;
            }
            uint64_t v192 = *(void *)&v169[v183 + v185];
            v185 += 8;
            unint64_t v193 = *(void *)v189 ^ v192;
            if (v193)
            {
              unint64_t v194 = __clz(__rbit64(v193));
              uint64_t v186 = (unsigned __int8 *)v760;
              unsigned int v187 = v185 + (v194 >> 3) + 4;
              unint64_t v188 = v187;
              if (v180 < v187)
              {
LABEL_280:
                unsigned int v191 = &v761[2 * v22];
                *unsigned int v191 = v172 + v179;
                v191[1] = v187;
                ++v22;
                if (v187 > v158) {
                  goto LABEL_306;
                }
                unint64_t v180 = v188;
                if (&v759[v188] == v186) {
                  goto LABEL_306;
                }
              }
              goto LABEL_254;
            }
          }
          uint64_t v184 = &v189[v183];
          if ((unint64_t)v189 >= v751)
          {
LABEL_271:
            if ((unint64_t)v189 >= v750)
            {
              if ((unint64_t)v189 >= v760) {
                goto LABEL_279;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v184 == *(unsigned __int16 *)v189)
              {
                v189 += 2;
                v184 += 2;
              }
              if ((unint64_t)v189 >= v760)
              {
LABEL_279:
                int v190 = v189 - v178;
                uint64_t v186 = (unsigned __int8 *)v760;
                unsigned int v187 = v190 + 4;
                unint64_t v188 = v187;
                if (v180 < v187) {
                  goto LABEL_280;
                }
                goto LABEL_254;
              }
            }
            if (*v184 == *v189) {
              LODWORD(v189) = v189 + 1;
            }
            goto LABEL_279;
          }
        }
        if (*(_DWORD *)v184 == *(_DWORD *)v189)
        {
          v189 += 4;
          v184 += 4;
        }
        goto LABEL_271;
      }
      if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
        unsigned int v27 = 4095;
      }
      else {
        unsigned int v27 = *(_DWORD *)(a1 + 212);
      }
      uint64_t v28 = *(void *)(a1 + 8);
      unsigned int v29 = v759 - v28;
      int v30 = -1 << (*(_DWORD *)(a1 + 196) - 1);
      int v31 = ~v30;
      unsigned int v32 = v759 - v28 + v30 + 1;
      if ((int)v759 - (int)v28 < ~v30) {
        unsigned int v32 = 0;
      }
      unsigned int v754 = v32;
      unsigned int v33 = 1 << *(_DWORD *)(a1 + 192);
      if (v29 - *(_DWORD *)(a1 + 28) > v33 && *(_DWORD *)(a1 + 32) == 0) {
        unsigned int v35 = v29 - v33;
      }
      else {
        unsigned int v35 = *(_DWORD *)(a1 + 28);
      }
      if (v35 <= 1) {
        unsigned int v36 = 1;
      }
      else {
        unsigned int v36 = v35;
      }
      unsigned int v37 = v29 - *(_DWORD *)(a1 + 24);
      uint64_t v38 = *(void *)(a1 + 48);
      unsigned int v39 = (char *)(v759 + 11);
      int v737 = *(_DWORD *)(a1 + 204);
      uint64_t v741 = (-1640531535 * *(_DWORD *)v759) >> -(char)*(_DWORD *)(a1 + 200);
      unsigned int v40 = *(_DWORD *)(v38 + 4 * v741);
      unint64_t v41 = v764 == 0;
      uint64_t v42 = *(void *)(a1 + 64);
      int v43 = (unsigned int *)(v42 + 8 * (v29 & ~v30));
      uint64_t v44 = v43 + 1;
      unsigned int v45 = v29 + 9;
      int v770 = 0;
      if (v764) {
        unint64_t v46 = 3;
      }
      else {
        unint64_t v46 = 4;
      }
      unint64_t v47 = v759 + 3;
      if (v764) {
        int v48 = 0;
      }
      else {
        int v48 = -1;
      }
      unint64_t v49 = (v732 - 1);
      do
      {
        if (v41 == 3)
        {
          unsigned int v50 = *a3 - 1;
          if (*a3 - 2 >= v37) {
            goto LABEL_44;
          }
        }
        else
        {
          unsigned int v50 = a3[v41];
          if (v50 - 1 >= v37) {
            goto LABEL_44;
          }
        }
        if (v29 - v50 < v35 || ((*(_DWORD *)&v759[-v50] ^ *(_DWORD *)v759) & 0xFFFFFF) != 0)
        {
          unint64_t v7 = v760;
          goto LABEL_44;
        }
        uint64_t v52 = -(uint64_t)v50;
        unint64_t v53 = (char *)v47 - v50;
        if (v762 <= (unint64_t)v47)
        {
          unint64_t v57 = (char *)(v759 + 3);
          if ((unint64_t)v47 < v751)
          {
LABEL_59:
            if (*(_DWORD *)v53 == *(_DWORD *)v57)
            {
              v57 += 4;
              v53 += 4;
            }
          }
          goto LABEL_61;
        }
        unint64_t v54 = *v47 ^ *(void *)v53;
        unint64_t v7 = v760;
        if (!v54)
        {
          while (1)
          {
            unint64_t v57 = &v39[v54];
            if ((unint64_t)&v39[v54] >= v762) {
              break;
            }
            uint64_t v60 = *(void *)&v39[v52 + v54];
            v54 += 8;
            unint64_t v61 = *(void *)v57 ^ v60;
            if (v61)
            {
              unint64_t v62 = __clz(__rbit64(v61));
              unint64_t v7 = v760;
              unsigned int v55 = v54 + (v62 >> 3) + 3;
              unint64_t v56 = v55;
              if (v49 >= v55) {
                goto LABEL_44;
              }
              goto LABEL_70;
            }
          }
          unint64_t v53 = &v57[v52];
          if ((unint64_t)v57 < v751) {
            goto LABEL_59;
          }
LABEL_61:
          if ((unint64_t)v57 >= v750)
          {
            if ((unint64_t)v57 >= v760) {
              goto LABEL_69;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v53 == *(unsigned __int16 *)v57)
            {
              v57 += 2;
              v53 += 2;
            }
            if ((unint64_t)v57 >= v760)
            {
LABEL_69:
              int v58 = v57 - v47;
              unint64_t v7 = v760;
              unsigned int v55 = v58 + 3;
              unint64_t v56 = v55;
              if (v49 >= v55) {
                goto LABEL_44;
              }
              goto LABEL_70;
            }
          }
          if (*v53 == *v57) {
            LODWORD(v57) = v57 + 1;
          }
          goto LABEL_69;
        }
        unsigned int v55 = (__clz(__rbit64(v54)) >> 3) + 3;
        unint64_t v56 = v55;
        if (v49 >= v55) {
          goto LABEL_44;
        }
LABEL_70:
        uint64_t v59 = &v761[2 * v22];
        *uint64_t v59 = v41 + v48;
        v59[1] = v55;
        ++v22;
        if (v55 > v27 || (unint64_t v49 = v56, &v759[v56] == (unsigned __int8 *)v7))
        {
          uint64_t v18 = a1;
          unint64_t v23 = v733;
          unsigned int v201 = v734;
          unsigned int v16 = v11 + 7;
          uint64_t v17 = v752;
          goto LABEL_956;
        }
LABEL_44:
        ++v41;
      }
      while (v41 < v46);
      if (v49 > 2)
      {
        uint64_t v18 = a1;
        unsigned int v16 = v11 + 7;
        uint64_t v17 = v752;
        goto LABEL_953;
      }
      uint64_t v18 = a1;
      uint64_t v195 = *(void *)(a1 + 56);
      int v196 = *(_DWORD *)v759;
      int v197 = 32 - *(_DWORD *)(a1 + 40);
      if (v701 < v29)
      {
        uint64_t v198 = v701;
        do
        {
          *(_DWORD *)(v195 + 4 * ((900185344 * *(_DWORD *)(v28 + v198)) >> v197)) = v198;
          ++v198;
        }
        while (v759 - v28 != v198);
      }
      uint64_t v199 = *(unsigned int *)(v195 + 4 * ((900185344 * v196) >> v197));
      BOOL v200 = v199 >= v36 && (v29 - v199) >> 18 == 0;
      unint64_t v23 = v733;
      unsigned int v201 = v734;
      unsigned int v16 = v11 + 7;
      if (!v200)
      {
        unsigned int v701 = v759 - v28;
        uint64_t v17 = v752;
        goto LABEL_953;
      }
      v686 = (_DWORD *)(v28 + v199);
      uint64_t v17 = v752;
      if (v762 <= (unint64_t)v759)
      {
        v689 = v759;
        if ((unint64_t)v759 < v751)
        {
LABEL_1090:
          if (*v686 == *(_DWORD *)v689)
          {
            v689 += 4;
            ++v686;
          }
        }
      }
      else
      {
        unint64_t v687 = *(void *)v759 ^ *(void *)v686;
        if (v687)
        {
          unint64_t v688 = __clz(__rbit64(v687)) >> 3;
          unsigned int v701 = v759 - v28;
          if (v688 < 3) {
            goto LABEL_953;
          }
          goto LABEL_1101;
        }
        v694 = v759 + 8;
        while (1)
        {
          v695 = (void *)((char *)v694 + v687);
          if ((unint64_t)v694 + v687 >= v762) {
            break;
          }
          uint64_t v696 = *(void *)(v28 + v199 + 8 + v687);
          v687 += 8;
          unint64_t v697 = *v695 ^ v696;
          if (v697)
          {
            unint64_t v688 = v687 + (__clz(__rbit64(v697)) >> 3);
            uint64_t v17 = v752;
            unsigned int v701 = v759 - v28;
            if (v688 >= 3) {
              goto LABEL_1101;
            }
            goto LABEL_953;
          }
        }
        v689 = &v759[v687 + 8];
        v686 = (_DWORD *)(v28 + v199 + v687 + 8);
        uint64_t v17 = v752;
        if ((unint64_t)v689 < v751) {
          goto LABEL_1090;
        }
      }
      if ((unint64_t)v689 >= v750)
      {
        if ((unint64_t)v689 >= v7) {
          goto LABEL_1100;
        }
LABEL_1098:
        if (*(unsigned __int8 *)v686 == *v689) {
          ++v689;
        }
        goto LABEL_1100;
      }
      if (*(unsigned __int16 *)v686 == *(unsigned __int16 *)v689)
      {
        v689 += 2;
        v686 = (_DWORD *)((char *)v686 + 2);
      }
      if ((unint64_t)v689 < v7) {
        goto LABEL_1098;
      }
LABEL_1100:
      unint64_t v688 = v689 - v759;
      unsigned int v701 = v759 - v28;
      if ((unint64_t)(v689 - v759) < 3) {
        goto LABEL_953;
      }
LABEL_1101:
      _DWORD *v761 = v29 - v199 + 2;
      v761[1] = v688;
      if (v688 > v27 || &v759[v688] == (unsigned __int8 *)v7)
      {
        unsigned int v615 = v29 + 1;
        unsigned int v22 = 1;
        unsigned int v701 = v29;
        goto LABEL_955;
      }
      unsigned int v22 = 1;
      unsigned int v701 = v759 - v28;
      unint64_t v49 = v688;
LABEL_953:
      *(_DWORD *)(v38 + 4 * v741) = v29;
      if (v40 < v36) {
        goto LABEL_954;
      }
      unint64_t v662 = 0;
      unint64_t v663 = 0;
      int v664 = ~(-1 << v737);
      unsigned int v665 = v29 + 2;
      v746 = v759 + 8;
      uint64_t v666 = v28 + 8;
      while (2)
      {
        if (v663 >= v662) {
          unint64_t v667 = v662;
        }
        else {
          unint64_t v667 = v663;
        }
        uint64_t v668 = v28 + v40;
        unint64_t v669 = (char *)&v759[v667];
        unint64_t v670 = (_DWORD *)(v668 + v667);
        if (v762 <= (unint64_t)&v759[v667])
        {
          unsigned int v675 = &v759[v667];
          if ((unint64_t)v669 < v751)
          {
LABEL_1049:
            if (*v670 == *(_DWORD *)v675)
            {
              v675 += 4;
              ++v670;
            }
          }
        }
        else
        {
          unint64_t v671 = *(void *)v669 ^ *(void *)v670;
          if (v671)
          {
            v672 = (unsigned __int8 *)v760;
            unint64_t v673 = (__clz(__rbit64(v671)) >> 3) + v667;
            if (v673 <= v49) {
              goto LABEL_1047;
            }
LABEL_1060:
            if (v673 > v45 - v40) {
              unsigned int v45 = v40 + v673;
            }
            v677 = &v761[2 * v22];
            _DWORD *v677 = v665 - v40;
            v677[1] = v673;
            ++v22;
            unsigned int v674 = v759;
            BOOL v678 = v673 > 0x1000 || &v759[v673] == v672;
            unint64_t v49 = v673;
            if (v678)
            {
              uint64_t v17 = v752;
              goto LABEL_954;
            }
            goto LABEL_1066;
          }
          v680 = (char *)v746 + v667;
          while (1)
          {
            v681 = &v680[v671];
            if ((unint64_t)&v680[v671] >= v762) {
              break;
            }
            uint64_t v682 = *(void *)(v666 + v667 + v40 + v671);
            v671 += 8;
            unint64_t v683 = *(void *)v681 ^ v682;
            if (v683)
            {
              unint64_t v684 = __clz(__rbit64(v683));
              v672 = (unsigned __int8 *)v760;
              unsigned int v16 = v11 + 7;
              uint64_t v18 = a1;
              unint64_t v673 = v671 + (v684 >> 3) + v667;
              if (v673 <= v49) {
                goto LABEL_1047;
              }
              goto LABEL_1060;
            }
          }
          unsigned int v675 = (unsigned __int8 *)v746 + v667 + v671;
          unint64_t v670 = (_DWORD *)(v666 + v667 + v40 + v671);
          if ((unint64_t)v675 < v751) {
            goto LABEL_1049;
          }
        }
        if ((unint64_t)v675 >= v750)
        {
          if ((unint64_t)v675 < v760) {
            goto LABEL_1057;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v670 == *(unsigned __int16 *)v675)
          {
            v675 += 2;
            unint64_t v670 = (_DWORD *)((char *)v670 + 2);
          }
          if ((unint64_t)v675 >= v760) {
            goto LABEL_1059;
          }
LABEL_1057:
          if (*(unsigned __int8 *)v670 == *v675) {
            ++v675;
          }
        }
LABEL_1059:
        int64_t v676 = v675 - (unsigned __int8 *)v669;
        v672 = (unsigned __int8 *)v760;
        unsigned int v16 = v11 + 7;
        uint64_t v18 = a1;
        unint64_t v673 = v676 + v667;
        if (v673 > v49) {
          goto LABEL_1060;
        }
LABEL_1047:
        unsigned int v674 = v759;
LABEL_1066:
        v679 = (unsigned int *)(v42 + 8 * (v40 & v31));
        if (*(unsigned __int8 *)(v668 + v673) < *((unsigned __int8 *)v674 + v673))
        {
          *int v43 = v40;
          if (v40 <= v754)
          {
            int v43 = (unsigned int *)&v770;
            uint64_t v17 = v752;
            goto LABEL_954;
          }
          ++v679;
          unint64_t v663 = v673;
          int v43 = v679;
          BOOL v232 = v664-- != 0;
          uint64_t v17 = v752;
          if (!v232) {
            goto LABEL_954;
          }
          goto LABEL_1040;
        }
        *uint64_t v44 = v40;
        if (v40 > v754)
        {
          unint64_t v662 = v673;
          uint64_t v44 = (unsigned int *)(v42 + 8 * (v40 & v31));
          BOOL v232 = v664-- != 0;
          uint64_t v17 = v752;
          if (!v232) {
            goto LABEL_954;
          }
LABEL_1040:
          unsigned int v40 = *v679;
          if (*v679 < v36) {
            goto LABEL_954;
          }
          continue;
        }
        break;
      }
      uint64_t v44 = (unsigned int *)&v770;
      uint64_t v17 = v752;
LABEL_954:
      *uint64_t v44 = 0;
      *int v43 = 0;
      unsigned int v615 = v45 - 8;
      unint64_t v23 = v733;
      unsigned int v201 = v734;
LABEL_955:
      *(_DWORD *)(v18 + 36) = v615;
LABEL_956:
      unsigned int v14 = v759;
      unint64_t v24 = v201;
LABEL_307:
      unsigned int v766 = v22;
      int v203 = v14;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v767, (uint64_t)v761, &v766, v14 - v747, v760 - v14);
      LODWORD(v204) = v766;
      if (v766)
      {
        _OWORD v11[4] = *a3;
        v11[5] = a3[1];
        v11[6] = a3[2];
        unsigned int v205 = v764;
        _OWORD v11[2] = 0;
        void v11[3] = v764;
        int v206 = *(_DWORD *)(v18 + 160);
        if (v206 != 1)
        {
          uint64_t v210 = v24;
          if (v764 < 0x40) {
            unsigned int v211 = ZSTD_LLcode_LL_Code[v764];
          }
          else {
            unsigned int v211 = 50 - __clz(v764);
          }
          unint64_t v7 = v760;
          unint64_t v213 = *(_DWORD **)(v18 + 88);
          int v214 = *(_DWORD *)(v18 + 148) + 1;
          unsigned int v207 = v214 + (LL_bits[v211] << 8) + ((__clz(v213[v211] + 1) << 8) ^ 0xFFFFE0FF);
          unsigned int *v11 = v207;
          uint64_t v208 = (v204 - 1);
          unsigned int v209 = v761[2 * v208 + 1];
          if (v209 <= v731)
          {
            unsigned int v212 = v214 + ((__clz(*v213 + 1) << 8) ^ 0xFFFFE0FF);
            goto LABEL_320;
          }
LABEL_318:
          unsigned int v215 = 0;
          unsigned int v216 = v761[2 * v208];
          goto LABEL_878;
        }
        unsigned int v207 = (__clz(v764 + 1) << 8) ^ 0x1F00;
        unsigned int *v11 = v207;
        uint64_t v208 = (v204 - 1);
        unsigned int v209 = v761[2 * v208 + 1];
        if (v209 > v731)
        {
          uint64_t v210 = v24;
          unint64_t v7 = v760;
          goto LABEL_318;
        }
        unsigned int v212 = 0;
        unint64_t v7 = v760;
LABEL_320:
        unint64_t v217 = v11 + 14;
        unint64_t v218 = (v732 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v217 - 7) = 0x40000000;
          *unint64_t v217 = 0x40000000;
          v217 += 14;
          v218 -= 2;
        }
        while (v218);
        if (v732 - 1 != ((v732 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          uint64_t v219 = v699;
          int v220 = v700;
          do
          {
            *int v220 = 0x40000000;
            v220 += 7;
            --v219;
          }
          while (v219);
        }
        uint64_t v221 = 0;
        unsigned int v222 = v212 + v207;
        if (v204 <= 1) {
          uint64_t v204 = 1;
        }
        else {
          uint64_t v204 = v204;
        }
        unsigned int v223 = v732;
        while (2)
        {
          unsigned int v224 = &v761[2 * v221];
          unsigned int v225 = v224[1];
          if (v223 <= v225)
          {
            unsigned int v226 = *v224;
            uint64_t v227 = __clz(v226 + 1) ^ 0x1F;
            if (v206 == 1)
            {
              int v228 = (v227 << 8) + 4096;
              if (v223 + 1 <= v225 + 1) {
                unsigned int v229 = v225 + 1;
              }
              else {
                unsigned int v229 = v223 + 1;
              }
              unsigned int v230 = v229 - v223;
              unsigned int v231 = v229 - 1;
              BOOL v232 = v230 >= 2 && v231 >= v223;
              if (!v232)
              {
                unsigned int v233 = v223;
                goto LABEL_351;
              }
              unsigned int v233 = v223 + (v230 & 0xFFFFFFFE);
              unsigned int v243 = v230 & 0xFFFFFFFE;
              do
              {
                uint64_t v244 = &v11[7 * v223];
                v244[2] = v223;
                v244[3] = v205;
                uint64_t v245 = &v11[7 * v223 + 7];
                v245[1] = v226;
                v245[2] = v223 + 1;
                v245[3] = v764;
                *uint64_t v244 = v222 + v228 + ((__clz(v223 - 2) << 8) ^ 0x1F00);
                v244[1] = v226;
                *uint64_t v245 = v222 + v228 + ((__clz(v223 - 1) << 8) ^ 0x1F00);
                unsigned int v205 = v764;
                v223 += 2;
                v243 -= 2;
              }
              while (v243);
              unsigned int v223 = v233;
              if (v230 != (v230 & 0xFFFFFFFE))
              {
LABEL_351:
                unsigned int v223 = v233;
                do
                {
                  unint64_t v246 = &v11[7 * v223];
                  v246[2] = v223;
                  v246[3] = v205;
                  *unint64_t v246 = v222 + v228 + ((__clz(v223 - 2) << 8) ^ 0x1F00);
                  v246[1] = v226;
                  ++v223;
                }
                while (v223 <= v225);
              }
            }
            else
            {
              if (v227 <= 0x13) {
                int v234 = 53;
              }
              else {
                int v234 = (v227 << 9) - 9675;
              }
              int v235 = *(_DWORD *)(v18 + 152);
              uint64_t v236 = *(void *)(v18 + 96);
              uint64_t v237 = *(void *)(v18 + 104);
              int v238 = v234 + *(_DWORD *)(v18 + 156);
              do
              {
                unsigned int v242 = v223 - 3;
                if (v223 - 3 < 0x80) {
                  unsigned int v239 = ZSTD_MLcode_ML_Code[v242];
                }
                else {
                  unsigned int v239 = 67 - __clz(v242);
                }
                unsigned int v240 = v222
                     + v238
                     + ((__clz(*(_DWORD *)(v237 + 4 * v227) + 1) << 8) ^ 0xFFFFE0FF)
                     + v235
                     + ((ML_bits[v239] + v227) << 8)
                     + ((__clz(*(_DWORD *)(v236 + 4 * v239) + 1) << 8) ^ 0xFFFFE0FF);
                unint64_t v241 = &v11[7 * v223];
                v241[2] = v223;
                v241[3] = v205;
                *unint64_t v241 = v240;
                v241[1] = v226;
                ++v223;
              }
              while (v223 <= v225);
            }
          }
          if (++v221 != v204) {
            continue;
          }
          break;
        }
        LODWORD(v247) = v223 - 1;
        int v248 = v759;
        if (v223 == 1) {
          goto LABEL_874;
        }
        v718 = v759 + 8;
        int v249 = v759 + 1;
        unsigned int v250 = 1;
        unint64_t v251 = v748;
        while (2)
        {
          unsigned int v252 = v250 - 1;
          uint64_t v253 = &v11[7 * v250 - 7];
          if (v253[2]) {
            unsigned int v254 = 1u;
          }
          else {
            unsigned int v254 = v11[7 * v252 + 3] + 1;
          }
          uint64_t v255 = v250;
          uint64_t v256 = &v248[v250];
          unsigned int v257 = *v253;
          int v258 = *(_DWORD *)(v18 + 160);
          if (*(_DWORD *)(v18 + 176) == 2)
          {
            unsigned int v259 = v257 + 2048;
            if (v258 != 1)
            {
              if (v254 >= 0x40) {
                goto LABEL_364;
              }
LABEL_370:
              unsigned int v260 = ZSTD_LLcode_LL_Code[v254];
              unsigned int v261 = v254 - 1;
              if (v254 - 1 >= 0x40) {
                goto LABEL_371;
              }
LABEL_365:
              unsigned int v262 = ZSTD_LLcode_LL_Code[v261];
              goto LABEL_372;
            }
LABEL_368:
            unsigned int v263 = (__clz(v254 + 1) << 8) ^ 0x1F00;
            unsigned int v264 = ((__clz(v254) << 8) ^ 0xFFFFE0FF) + 1;
          }
          else
          {
            if (v258 == 1)
            {
              unsigned int v259 = v257 + 1536;
              goto LABEL_368;
            }
            unsigned int v259 = *(_DWORD *)(v18 + 144)
                 + v257
                 + ((__clz(*(_DWORD *)(*(void *)(v18 + 80) + 4 * *(v256 - 1)) + 1) << 8) ^ 0xFFFFE0FF)
                 + 1;
            if (v254 < 0x40) {
              goto LABEL_370;
            }
LABEL_364:
            unsigned int v260 = 50 - __clz(v254);
            unsigned int v261 = v254 - 1;
            if (v254 - 1 < 0x40) {
              goto LABEL_365;
            }
LABEL_371:
            unsigned int v262 = 50 - __clz(v261);
LABEL_372:
            int v265 = *(_DWORD *)(v18 + 148);
            uint64_t v266 = *(void *)(v18 + 88);
            unsigned int v263 = v265 + (LL_bits[v260] << 8) + ((__clz(*(_DWORD *)(v266 + 4 * v260) + 1) << 8) ^ 0xFFFFE0FF) + 1;
            unsigned int v264 = ~v265 - (LL_bits[v262] << 8) + ((__clz(*(_DWORD *)(v266 + 4 * v262) + 1) << 8) ^ 0x1F01);
            int v248 = v759;
          }
          signed int v267 = v259 + v263 + v264;
          unint64_t v268 = (signed int *)&v11[7 * v255];
          signed int v271 = *v268;
          unint64_t v269 = v268 + 2;
          signed int v270 = v271;
          if (v267 <= v271)
          {
            unsigned int v278 = (signed int *)&v11[7 * v255];
            v278[1] = 0;
            v278[2] = 0;
            v278[3] = v254;
            *unsigned int v278 = v267;
            signed int v270 = v267;
LABEL_378:
            int v279 = 0;
            unint64_t v280 = &v11[7 * v255];
            unsigned int v281 = &v11[7 * v252];
            *((void *)v280 + 2) = *((void *)v281 + 2);
            v280[6] = v281[6];
            int v282 = 1;
            if ((unint64_t)v256 <= v251) {
              goto LABEL_391;
            }
LABEL_356:
            unsigned int v250 = v255 + 1;
LABEL_357:
            ++v249;
            uint64_t v17 = v752;
            if (v250 > v247) {
              goto LABEL_874;
            }
            continue;
          }
          break;
        }
        if (!*v269) {
          goto LABEL_378;
        }
        uint64_t v272 = &v11[7 * (v255 - *v269) + 4];
        unsigned int v273 = v11[7 * v255 + 1];
        if (v273 < 3)
        {
          if (!v11[7 * v255 + 3]) {
            ++v273;
          }
          if (v273)
          {
            if (v273 == 3)
            {
              unint64_t v275 = *v272;
              unsigned int v277 = v275 - 1;
            }
            else
            {
              unsigned int v277 = v272[v273];
              unint64_t v275 = *v272;
            }
            BOOL v571 = v273 > 1;
            uint64_t v284 = 2;
            if (v571) {
              uint64_t v284 = 1;
            }
            uint64_t v274 = &v272[v284];
          }
          else
          {
            unint64_t v283 = *(void *)v272;
            uint64_t v274 = &v11[7 * (v255 - *v269) + 6];
            unsigned int v277 = v283;
            unint64_t v275 = HIDWORD(v283);
          }
        }
        else
        {
          unsigned int v276 = *v272;
          uint64_t v274 = &v11[7 * (v255 - *v269) + 5];
          unint64_t v275 = v276;
          unsigned int v277 = v273 - 2;
        }
        int v282 = 0;
        unsigned int v285 = *v274;
        unint64_t v286 = v277 | (v275 << 32);
        int v287 = &v11[7 * v255];
        *((void *)v287 + 2) = v286;
        v287[6] = v285;
        int v279 = 1;
        if ((unint64_t)v256 > v251) {
          goto LABEL_356;
        }
LABEL_391:
        if (v255 == v247)
        {
          uint64_t v17 = v752;
LABEL_874:
          long long v554 = &v11[7 * v247];
          unsigned int v216 = v554[1];
          unsigned int v726 = *v554;
          unsigned int v209 = v554[2];
          unsigned int v205 = v554[3];
          uint64_t v771 = *((void *)v554 + 2);
          unsigned int v772 = v554[6];
          if (v247 >= v205 + v209) {
            unsigned int v215 = v247 - (v205 + v209);
          }
          else {
            unsigned int v215 = 0;
          }
          unint64_t v23 = v733;
          uint64_t v210 = v734;
          if (!v209) {
            goto LABEL_1113;
          }
          goto LABEL_878;
        }
        unsigned int v250 = v255 + 1;
        if ((int)v11[7 * (v255 + 1)] <= v270 + 128) {
          goto LABEL_357;
        }
        if (v282)
        {
          unsigned int v288 = v11[7 * v255 + 3];
          if (*(_DWORD *)(v18 + 160) != 1) {
            goto LABEL_395;
          }
LABEL_397:
          unsigned int v735 = 0;
        }
        else
        {
          unsigned int v288 = 0;
          if (*(_DWORD *)(v18 + 160) == 1) {
            goto LABEL_397;
          }
LABEL_395:
          unsigned int v735 = *(_DWORD *)(v18 + 148) + ((__clz(**(_DWORD **)(v18 + 88) + 1) << 8) ^ 0xFFFFE0FF) + 1;
        }
        signed int v736 = v270;
        v725 = v269;
        int v745 = v249;
        unsigned int v765 = v288;
        unsigned int v766 = 0;
        uint64_t v289 = *(void *)(v18 + 8);
        uint64_t v290 = *(unsigned int *)(v18 + 36);
        if (v289 + v290 > (unint64_t)v256)
        {
          unsigned int v291 = 0;
          unint64_t v7 = v760;
          goto LABEL_714;
        }
        unsigned int v720 = v279;
        int v292 = *(_DWORD *)(v18 + 208);
        v758 = v256;
        for (unsigned int j = v256 - v289;
              v290 < j;
        uint64_t v294 = &v11[7 * v255 + 4];
        *(_DWORD *)(v18 + 36) = j;
        if ((v292 - 6) < 2)
        {
          unsigned int v291 = 0;
          if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
            unsigned int v326 = 4095;
          }
          else {
            unsigned int v326 = *(_DWORD *)(v18 + 212);
          }
          uint64_t v327 = *(void *)(v18 + 8);
          int v328 = v758 - v327;
          unint64_t v329 = (char *)(v758 + 4);
          int v703 = *(_DWORD *)(v18 + 204);
          unint64_t v707 = (0xCF1BBCDCBF9B0000 * *(void *)v758) >> -(char)*(_DWORD *)(v18 + 200);
          uint64_t v711 = *(void *)(v18 + 48);
          unsigned int v330 = *(_DWORD *)(v711 + 4 * v707);
          int v331 = -1 << (*(_DWORD *)(v18 + 196) - 1);
          int v332 = ~v331;
          unsigned int v333 = v758 - v327 + v331 + 1;
          if ((int)v758 - (int)v327 < ~v331) {
            unsigned int v333 = 0;
          }
          unsigned int v728 = v333;
          int v334 = *(_DWORD *)(v18 + 24);
          unsigned int v335 = 1 << *(_DWORD *)(v18 + 192);
          if (v328 - *(_DWORD *)(v18 + 28) > v335 && *(_DWORD *)(v18 + 32) == 0) {
            unsigned int v337 = v328 - v335;
          }
          else {
            unsigned int v337 = *(_DWORD *)(v18 + 28);
          }
          if (v337 <= 1) {
            unsigned int v338 = 1;
          }
          else {
            unsigned int v338 = v337;
          }
          uint64_t v339 = *(void *)(v18 + 64);
          unint64_t v340 = (unsigned int *)(v339 + 8 * (v328 & ~v331));
          uint64_t v341 = v340 + 1;
          int v342 = v328 + 9;
          int v770 = 0;
          if (v720) {
            unint64_t v343 = 4;
          }
          else {
            unint64_t v343 = 3;
          }
          unsigned int v344 = v328 - v334;
          uint64_t v345 = v720;
          unint64_t v346 = (v732 - 1);
          while (1)
          {
            if (v345 == 3)
            {
              unsigned int v347 = *v294 - 1;
              if (*v294 - 2 >= v344) {
                goto LABEL_476;
              }
            }
            else
            {
              unsigned int v347 = v294[v345];
              if (v347 - 1 >= v344) {
                goto LABEL_476;
              }
            }
            if (v328 - v347 < v337 || *(_DWORD *)v758 != *(_DWORD *)&v758[-v347]) {
              goto LABEL_476;
            }
            int v349 = &v329[-v347];
            if (v762 > (unint64_t)v329)
            {
              __int16 v350 = v758 + 4;
              unint64_t v351 = *(void *)v329 ^ *(void *)v349;
              if (v351)
              {
                unint64_t v352 = __clz(__rbit64(v351)) >> 3;
              }
              else
              {
                do
                {
                  v349 += 8;
                  if ((unint64_t)++v350 >= v762) {
                    goto LABEL_495;
                  }
                  unint64_t v353 = *v350 ^ *(void *)v349;
                }
                while (!v353);
                unint64_t v352 = (char *)v350 + (__clz(__rbit64(v353)) >> 3) - v329;
              }
              unsigned int v354 = v352 + 4;
              unint64_t v355 = v354;
              if (v346 >= v354) {
                goto LABEL_476;
              }
LABEL_503:
              unsigned int v356 = &v761[2 * v291];
              *unsigned int v356 = v345 + ((int)(v720 << 31) >> 31);
              v356[1] = v354;
              ++v291;
              if (v354 > v326) {
                goto LABEL_713;
              }
              unint64_t v346 = v355;
              if (&v758[v355] == (unsigned __int8 *)v760) {
                goto LABEL_713;
              }
              goto LABEL_476;
            }
            __int16 v350 = v758 + 4;
LABEL_495:
            if ((unint64_t)v350 >= v751)
            {
              if ((unint64_t)v350 >= v750) {
                goto LABEL_499;
              }
            }
            else
            {
              if (*(_DWORD *)v349 == *(_DWORD *)v350)
              {
                __int16 v350 = (void *)((char *)v350 + 4);
                v349 += 4;
              }
              if ((unint64_t)v350 >= v750)
              {
LABEL_499:
                if ((unint64_t)v350 >= v760) {
                  goto LABEL_502;
                }
LABEL_500:
                if (*v349 == *(unsigned char *)v350) {
                  LODWORD(v350) = v350 + 1;
                }
                goto LABEL_502;
              }
            }
            if (*(unsigned __int16 *)v349 == *(unsigned __int16 *)v350)
            {
              __int16 v350 = (void *)((char *)v350 + 2);
              v349 += 2;
            }
            if ((unint64_t)v350 < v760) {
              goto LABEL_500;
            }
LABEL_502:
            unsigned int v354 = v350 - v758;
            unint64_t v355 = v354;
            if (v346 < v354) {
              goto LABEL_503;
            }
LABEL_476:
            if (++v345 >= v343)
            {
              *(_DWORD *)(v711 + 4 * v707) = v328;
              if (v330 < v338) {
                goto LABEL_711;
              }
              unint64_t v357 = 0;
              unint64_t v358 = 0;
              int v359 = ~(-1 << v703);
              int v360 = v328 + 2;
              v721 = (char *)v718 + v255;
              uint64_t v712 = v327 + 8;
              while (1)
              {
                unint64_t v361 = v358 >= v357 ? v357 : v358;
                uint64_t v362 = v327 + v330;
                unsigned int v363 = &v758[v361];
                unint64_t v364 = (void *)(v362 + v361);
                if (v762 <= (unint64_t)&v758[v361]) {
                  break;
                }
                unint64_t v365 = *(void *)v363 ^ *v364;
                if (v365)
                {
                  unint64_t v366 = (__clz(__rbit64(v365)) >> 3) + v361;
                  unint64_t v367 = (unsigned __int8 *)v760;
                  if (v366 <= v346) {
                    goto LABEL_520;
                  }
                  goto LABEL_533;
                }
                uint64_t v374 = 0;
                unint64_t v375 = &v721[v361];
                do
                {
                  unint64_t v376 = &v375[v374];
                  if ((unint64_t)&v375[v374] >= v762)
                  {
                    unint64_t v370 = &v721[v361 + v374];
                    unint64_t v364 = (void *)(v712 + v361 + v330 + v374);
                    if ((unint64_t)v370 >= v751) {
                      goto LABEL_524;
                    }
                    goto LABEL_522;
                  }
                  uint64_t v377 = *(void *)(v712 + v361 + v330 + v374);
                  v374 += 8;
                  unint64_t v378 = *(void *)v376 ^ v377;
                }
                while (!v378);
                unint64_t v366 = v374 + (__clz(__rbit64(v378)) >> 3) + v361;
                unint64_t v367 = (unsigned __int8 *)v760;
                if (v366 <= v346)
                {
LABEL_520:
                  uint64_t v368 = a1;
                  uint32x4_t v369 = v758;
                  goto LABEL_539;
                }
LABEL_533:
                if (v366 > v342 - v330) {
                  int v342 = v330 + v366;
                }
                unint64_t v371 = &v761[2 * v291];
                _DWORD *v371 = v360 - v330;
                v371[1] = v366;
                ++v291;
                uint32x4_t v369 = v758;
                BOOL v372 = v366 > 0x1000 || &v758[v366] == v367;
                unint64_t v346 = v366;
                uint64_t v368 = a1;
                if (v372) {
                  goto LABEL_712;
                }
LABEL_539:
                uint64_t v373 = (unsigned int *)(v339 + 8 * (v330 & v332));
                if (*(unsigned __int8 *)(v362 + v366) >= *((unsigned __int8 *)v369 + v366))
                {
                  *uint64_t v341 = v330;
                  if (v330 <= v728) {
                    goto LABEL_841;
                  }
                  unint64_t v357 = v366;
                  uint64_t v341 = (unsigned int *)(v339 + 8 * (v330 & v332));
                  BOOL v232 = v359-- != 0;
                  if (!v232) {
                    goto LABEL_712;
                  }
                }
                else
                {
                  *unint64_t v340 = v330;
                  if (v330 <= v728) {
                    goto LABEL_840;
                  }
                  ++v373;
                  unint64_t v358 = v366;
                  unint64_t v340 = v373;
                  BOOL v232 = v359-- != 0;
                  if (!v232) {
                    goto LABEL_712;
                  }
                }
                unsigned int v330 = *v373;
                if (*v373 < v338) {
                  goto LABEL_712;
                }
              }
              unint64_t v370 = (char *)&v758[v361];
              if ((unint64_t)v363 >= v751) {
                goto LABEL_524;
              }
LABEL_522:
              if (*(_DWORD *)v364 == *(_DWORD *)v370)
              {
                v370 += 4;
                unint64_t v364 = (void *)((char *)v364 + 4);
              }
LABEL_524:
              if ((unint64_t)v370 >= v750)
              {
                if ((unint64_t)v370 >= v760) {
                  goto LABEL_532;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v364 == *(unsigned __int16 *)v370)
                {
                  v370 += 2;
                  unint64_t v364 = (void *)((char *)v364 + 2);
                }
                if ((unint64_t)v370 >= v760)
                {
LABEL_532:
                  unint64_t v366 = v370 - (char *)v758;
                  unint64_t v367 = (unsigned __int8 *)v760;
                  if (v366 <= v346) {
                    goto LABEL_520;
                  }
                  goto LABEL_533;
                }
              }
              if (*(unsigned __int8 *)v364 == *v370) {
                ++v370;
              }
              goto LABEL_532;
            }
          }
        }
        if (v292 == 5)
        {
          unsigned int v291 = 0;
          if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
            unsigned int v379 = 4095;
          }
          else {
            unsigned int v379 = *(_DWORD *)(a1 + 212);
          }
          uint64_t v380 = *(void *)(a1 + 8);
          int v381 = v758 - v380;
          unint64_t v382 = (char *)(v758 + 4);
          int v704 = *(_DWORD *)(a1 + 204);
          unint64_t v708 = (0xCF1BBCDCBB000000 * *(void *)v758) >> -(char)*(_DWORD *)(a1 + 200);
          uint64_t v713 = *(void *)(a1 + 48);
          unsigned int v383 = *(_DWORD *)(v713 + 4 * v708);
          int v384 = -1 << (*(_DWORD *)(a1 + 196) - 1);
          int v385 = ~v384;
          unsigned int v386 = v758 - v380 + v384 + 1;
          if ((int)v758 - (int)v380 < ~v384) {
            unsigned int v386 = 0;
          }
          unsigned int v729 = v386;
          int v387 = *(_DWORD *)(a1 + 24);
          unsigned int v388 = 1 << *(_DWORD *)(a1 + 192);
          if (v381 - *(_DWORD *)(a1 + 28) > v388 && *(_DWORD *)(a1 + 32) == 0) {
            unsigned int v390 = v381 - v388;
          }
          else {
            unsigned int v390 = *(_DWORD *)(a1 + 28);
          }
          if (v390 <= 1) {
            unsigned int v391 = 1;
          }
          else {
            unsigned int v391 = v390;
          }
          uint64_t v392 = *(void *)(a1 + 64);
          unint64_t v340 = (unsigned int *)(v392 + 8 * (v381 & ~v384));
          uint64_t v341 = v340 + 1;
          int v342 = v381 + 9;
          int v770 = 0;
          if (v720) {
            unint64_t v393 = 4;
          }
          else {
            unint64_t v393 = 3;
          }
          unsigned int v394 = v381 - v387;
          uint64_t v395 = v720;
          unint64_t v396 = (v732 - 1);
          while (1)
          {
            if (v395 == 3)
            {
              unsigned int v397 = *v294 - 1;
              if (*v294 - 2 >= v394) {
                goto LABEL_571;
              }
            }
            else
            {
              unsigned int v397 = v294[v395];
              if (v397 - 1 >= v394) {
                goto LABEL_571;
              }
            }
            if (v381 - v397 < v390 || *(_DWORD *)v758 != *(_DWORD *)&v758[-v397]) {
              goto LABEL_571;
            }
            unint64_t v399 = &v382[-v397];
            if (v762 > (unint64_t)v382)
            {
              uint64_t v400 = v758 + 4;
              unint64_t v401 = *(void *)v382 ^ *(void *)v399;
              if (v401)
              {
                unint64_t v402 = __clz(__rbit64(v401)) >> 3;
              }
              else
              {
                do
                {
                  v399 += 8;
                  if ((unint64_t)++v400 >= v762) {
                    goto LABEL_590;
                  }
                  unint64_t v403 = *v400 ^ *(void *)v399;
                }
                while (!v403);
                unint64_t v402 = (char *)v400 + (__clz(__rbit64(v403)) >> 3) - v382;
              }
              unsigned int v404 = v402 + 4;
              unint64_t v405 = v404;
              if (v396 >= v404) {
                goto LABEL_571;
              }
LABEL_598:
              uint64_t v406 = &v761[2 * v291];
              *uint64_t v406 = v395 + ((int)(v720 << 31) >> 31);
              v406[1] = v404;
              ++v291;
              if (v404 > v379) {
                goto LABEL_713;
              }
              unint64_t v396 = v405;
              if (&v758[v405] == (unsigned __int8 *)v760) {
                goto LABEL_713;
              }
              goto LABEL_571;
            }
            uint64_t v400 = v758 + 4;
LABEL_590:
            if ((unint64_t)v400 >= v751)
            {
              if ((unint64_t)v400 >= v750) {
                goto LABEL_594;
              }
            }
            else
            {
              if (*(_DWORD *)v399 == *(_DWORD *)v400)
              {
                uint64_t v400 = (void *)((char *)v400 + 4);
                v399 += 4;
              }
              if ((unint64_t)v400 >= v750)
              {
LABEL_594:
                if ((unint64_t)v400 >= v760) {
                  goto LABEL_597;
                }
LABEL_595:
                if (*v399 == *(unsigned char *)v400) {
                  LODWORD(v400) = v400 + 1;
                }
                goto LABEL_597;
              }
            }
            if (*(unsigned __int16 *)v399 == *(unsigned __int16 *)v400)
            {
              uint64_t v400 = (void *)((char *)v400 + 2);
              v399 += 2;
            }
            if ((unint64_t)v400 < v760) {
              goto LABEL_595;
            }
LABEL_597:
            unsigned int v404 = v400 - v758;
            unint64_t v405 = v404;
            if (v396 < v404) {
              goto LABEL_598;
            }
LABEL_571:
            if (++v395 >= v393)
            {
              *(_DWORD *)(v713 + 4 * v708) = v381;
              if (v383 >= v391)
              {
                unint64_t v441 = 0;
                unint64_t v442 = 0;
                int v443 = ~(-1 << v704);
                int v444 = v381 + 2;
                v722 = (char *)v718 + v255;
                uint64_t v715 = v380 + 8;
                while (1)
                {
                  unint64_t v445 = v442 >= v441 ? v441 : v442;
                  uint64_t v446 = v380 + v383;
                  uint32x4_t v447 = &v758[v445];
                  unint64_t v448 = (void *)(v446 + v445);
                  if (v762 <= (unint64_t)&v758[v445]) {
                    break;
                  }
                  unint64_t v449 = *(void *)v447 ^ *v448;
                  if (v449)
                  {
                    unint64_t v450 = (__clz(__rbit64(v449)) >> 3) + v445;
                    v451 = (unsigned __int8 *)v760;
                    if (v450 <= v396) {
                      goto LABEL_677;
                    }
                    goto LABEL_690;
                  }
                  uint64_t v457 = 0;
                  v458 = &v722[v445];
                  do
                  {
                    v459 = &v458[v457];
                    if ((unint64_t)&v458[v457] >= v762)
                    {
                      uint64_t v453 = &v722[v445 + v457];
                      unint64_t v448 = (void *)(v715 + v445 + v383 + v457);
                      if ((unint64_t)v453 >= v751) {
                        goto LABEL_681;
                      }
                      goto LABEL_679;
                    }
                    uint64_t v460 = *(void *)(v715 + v445 + v383 + v457);
                    v457 += 8;
                    unint64_t v461 = *(void *)v459 ^ v460;
                  }
                  while (!v461);
                  unint64_t v450 = v457 + (__clz(__rbit64(v461)) >> 3) + v445;
                  v451 = (unsigned __int8 *)v760;
                  if (v450 <= v396)
                  {
LABEL_677:
                    uint64_t v368 = a1;
                    int v452 = v758;
                    goto LABEL_696;
                  }
LABEL_690:
                  if (v450 > v342 - v383) {
                    int v342 = v383 + v450;
                  }
                  unint64_t v454 = &v761[2 * v291];
                  *unint64_t v454 = v444 - v383;
                  v454[1] = v450;
                  ++v291;
                  int v452 = v758;
                  BOOL v455 = v450 > 0x1000 || &v758[v450] == v451;
                  unint64_t v396 = v450;
                  uint64_t v368 = a1;
                  if (v455) {
                    goto LABEL_712;
                  }
LABEL_696:
                  v456 = (unsigned int *)(v392 + 8 * (v383 & v385));
                  if (*(unsigned __int8 *)(v446 + v450) < *((unsigned __int8 *)v452 + v450))
                  {
                    *unint64_t v340 = v383;
                    if (v383 > v729)
                    {
                      ++v456;
                      unint64_t v442 = v450;
                      unint64_t v340 = v456;
                      BOOL v232 = v443-- != 0;
                      if (!v232) {
                        goto LABEL_712;
                      }
                      goto LABEL_670;
                    }
LABEL_840:
                    unint64_t v340 = (unsigned int *)&v770;
                    goto LABEL_712;
                  }
                  *uint64_t v341 = v383;
                  if (v383 <= v729) {
                    goto LABEL_841;
                  }
                  unint64_t v441 = v450;
                  uint64_t v341 = (unsigned int *)(v392 + 8 * (v383 & v385));
                  BOOL v232 = v443-- != 0;
                  if (!v232) {
                    goto LABEL_712;
                  }
LABEL_670:
                  unsigned int v383 = *v456;
                  if (*v456 < v391) {
                    goto LABEL_712;
                  }
                }
                uint64_t v453 = (char *)&v758[v445];
                if ((unint64_t)v447 >= v751) {
                  goto LABEL_681;
                }
LABEL_679:
                if (*(_DWORD *)v448 == *(_DWORD *)v453)
                {
                  v453 += 4;
                  unint64_t v448 = (void *)((char *)v448 + 4);
                }
LABEL_681:
                if ((unint64_t)v453 >= v750)
                {
                  if ((unint64_t)v453 >= v760) {
                    goto LABEL_689;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v448 == *(unsigned __int16 *)v453)
                  {
                    v453 += 2;
                    unint64_t v448 = (void *)((char *)v448 + 2);
                  }
                  if ((unint64_t)v453 >= v760)
                  {
LABEL_689:
                    unint64_t v450 = v453 - (char *)v758;
                    v451 = (unsigned __int8 *)v760;
                    if (v450 <= v396) {
                      goto LABEL_677;
                    }
                    goto LABEL_690;
                  }
                }
                if (*(unsigned __int8 *)v448 == *v453) {
                  ++v453;
                }
                goto LABEL_689;
              }
LABEL_711:
              uint64_t v368 = a1;
              goto LABEL_712;
            }
          }
        }
        unsigned int v291 = 0;
        if (v292 != 3)
        {
          if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
            unsigned int v407 = 4095;
          }
          else {
            unsigned int v407 = *(_DWORD *)(a1 + 212);
          }
          uint64_t v408 = *(void *)(a1 + 8);
          int v409 = v758 - v408;
          unsigned int v410 = (char *)(v758 + 4);
          int v705 = *(_DWORD *)(a1 + 204);
          uint64_t v709 = (-1640531535 * *(_DWORD *)v758) >> -(char)*(_DWORD *)(a1 + 200);
          uint64_t v714 = *(void *)(a1 + 48);
          unsigned int v411 = *(_DWORD *)(v714 + 4 * v709);
          int v412 = -1 << (*(_DWORD *)(a1 + 196) - 1);
          int v413 = ~v412;
          unsigned int v414 = v758 - v408 + v412 + 1;
          if ((int)v758 - (int)v408 < ~v412) {
            unsigned int v414 = 0;
          }
          unsigned int v730 = v414;
          int v415 = *(_DWORD *)(a1 + 24);
          unsigned int v416 = 1 << *(_DWORD *)(a1 + 192);
          if (v409 - *(_DWORD *)(a1 + 28) > v416 && *(_DWORD *)(a1 + 32) == 0) {
            unsigned int v418 = v409 - v416;
          }
          else {
            unsigned int v418 = *(_DWORD *)(a1 + 28);
          }
          if (v418 <= 1) {
            unsigned int v419 = 1;
          }
          else {
            unsigned int v419 = v418;
          }
          uint64_t v420 = *(void *)(a1 + 64);
          unint64_t v340 = (unsigned int *)(v420 + 8 * (v409 & ~v412));
          uint64_t v341 = v340 + 1;
          int v342 = v409 + 9;
          int v770 = 0;
          if (v720) {
            unint64_t v421 = 4;
          }
          else {
            unint64_t v421 = 3;
          }
          unsigned int v422 = v409 - v415;
          uint64_t v423 = v720;
          unint64_t v424 = (v732 - 1);
          while (1)
          {
            if (v423 == 3)
            {
              unsigned int v425 = *v294 - 1;
              if (*v294 - 2 >= v422) {
                goto LABEL_624;
              }
            }
            else
            {
              unsigned int v425 = v294[v423];
              if (v425 - 1 >= v422) {
                goto LABEL_624;
              }
            }
            if (v409 - v425 < v418 || *(_DWORD *)v758 != *(_DWORD *)&v758[-v425]) {
              goto LABEL_624;
            }
            uint32x4_t v427 = &v410[-v425];
            if (v762 > (unint64_t)v410)
            {
              uint32x4_t v428 = v758 + 4;
              unint64_t v429 = *(void *)v410 ^ *(void *)v427;
              if (v429)
              {
                unint64_t v430 = __clz(__rbit64(v429)) >> 3;
              }
              else
              {
                do
                {
                  v427 += 8;
                  if ((unint64_t)++v428 >= v762) {
                    goto LABEL_643;
                  }
                  unint64_t v431 = *v428 ^ *(void *)v427;
                }
                while (!v431);
                unint64_t v430 = (char *)v428 + (__clz(__rbit64(v431)) >> 3) - v410;
              }
              unsigned int v432 = v430 + 4;
              unint64_t v433 = v432;
              if (v424 >= v432) {
                goto LABEL_624;
              }
LABEL_651:
              uint64_t v434 = &v761[2 * v291];
              *uint64_t v434 = v423 + ((int)(v720 << 31) >> 31);
              v434[1] = v432;
              ++v291;
              if (v432 > v407) {
                goto LABEL_713;
              }
              unint64_t v424 = v433;
              if (&v758[v433] == (unsigned __int8 *)v760) {
                goto LABEL_713;
              }
              goto LABEL_624;
            }
            uint32x4_t v428 = v758 + 4;
LABEL_643:
            if ((unint64_t)v428 >= v751)
            {
              if ((unint64_t)v428 >= v750) {
                goto LABEL_647;
              }
            }
            else
            {
              if (*(_DWORD *)v427 == *(_DWORD *)v428)
              {
                uint32x4_t v428 = (void *)((char *)v428 + 4);
                v427 += 4;
              }
              if ((unint64_t)v428 >= v750)
              {
LABEL_647:
                if ((unint64_t)v428 >= v760) {
                  goto LABEL_650;
                }
LABEL_648:
                if (*v427 == *(unsigned char *)v428) {
                  LODWORD(v428) = v428 + 1;
                }
                goto LABEL_650;
              }
            }
            if (*(unsigned __int16 *)v427 == *(unsigned __int16 *)v428)
            {
              uint32x4_t v428 = (void *)((char *)v428 + 2);
              v427 += 2;
            }
            if ((unint64_t)v428 < v760) {
              goto LABEL_648;
            }
LABEL_650:
            unsigned int v432 = v428 - v758;
            unint64_t v433 = v432;
            if (v424 < v432) {
              goto LABEL_651;
            }
LABEL_624:
            if (++v423 >= v421)
            {
              *(_DWORD *)(v714 + 4 * v709) = v409;
              if (v411 < v419) {
                goto LABEL_711;
              }
              unint64_t v502 = 0;
              unint64_t v503 = 0;
              int v504 = ~(-1 << v705);
              int v505 = v409 + 2;
              v723 = (char *)v718 + v255;
              uint64_t v716 = v408 + 8;
              while (1)
              {
                unint64_t v506 = v503 >= v502 ? v502 : v503;
                uint64_t v507 = v408 + v411;
                uint64_t v508 = &v758[v506];
                unint64_t v509 = (void *)(v507 + v506);
                if (v762 <= (unint64_t)&v758[v506]) {
                  break;
                }
                unint64_t v510 = *(void *)v508 ^ *v509;
                if (v510)
                {
                  unint64_t v511 = (__clz(__rbit64(v510)) >> 3) + v506;
                  unint64_t v512 = (unsigned __int8 *)v760;
                  if (v511 <= v424) {
                    goto LABEL_766;
                  }
                  goto LABEL_779;
                }
                uint64_t v518 = 0;
                v519 = &v723[v506];
                do
                {
                  v520 = &v519[v518];
                  if ((unint64_t)&v519[v518] >= v762)
                  {
                    uint64_t v514 = &v723[v506 + v518];
                    unint64_t v509 = (void *)(v716 + v506 + v411 + v518);
                    if ((unint64_t)v514 >= v751) {
                      goto LABEL_770;
                    }
                    goto LABEL_768;
                  }
                  uint64_t v521 = *(void *)(v716 + v506 + v411 + v518);
                  v518 += 8;
                  unint64_t v522 = *(void *)v520 ^ v521;
                }
                while (!v522);
                unint64_t v511 = v518 + (__clz(__rbit64(v522)) >> 3) + v506;
                unint64_t v512 = (unsigned __int8 *)v760;
                if (v511 <= v424)
                {
LABEL_766:
                  uint64_t v368 = a1;
                  unint64_t v513 = v758;
                  goto LABEL_785;
                }
LABEL_779:
                if (v511 > v342 - v411) {
                  int v342 = v411 + v511;
                }
                int v515 = &v761[2 * v291];
                *int v515 = v505 - v411;
                v515[1] = v511;
                ++v291;
                unint64_t v513 = v758;
                BOOL v516 = v511 > 0x1000 || &v758[v511] == v512;
                unint64_t v424 = v511;
                uint64_t v368 = a1;
                if (v516) {
                  goto LABEL_712;
                }
LABEL_785:
                uint64_t v517 = (unsigned int *)(v420 + 8 * (v411 & v413));
                if (*(unsigned __int8 *)(v507 + v511) >= *((unsigned __int8 *)v513 + v511))
                {
                  *uint64_t v341 = v411;
                  if (v411 > v730)
                  {
                    unint64_t v502 = v511;
                    uint64_t v341 = (unsigned int *)(v420 + 8 * (v411 & v413));
                    BOOL v232 = v504-- != 0;
                    if (v232) {
                      goto LABEL_759;
                    }
LABEL_712:
                    *uint64_t v341 = 0;
                    *unint64_t v340 = 0;
                    *(_DWORD *)(v368 + 36) = v342 - 8;
LABEL_713:
                    unint64_t v7 = v760;
                    unsigned int v16 = v11 + 7;
                    uint64_t v18 = a1;
                    LODWORD(v256) = v758;
                    goto LABEL_714;
                  }
LABEL_841:
                  uint64_t v341 = (unsigned int *)&v770;
                  goto LABEL_712;
                }
                *unint64_t v340 = v411;
                if (v411 <= v730) {
                  goto LABEL_840;
                }
                ++v517;
                unint64_t v503 = v511;
                unint64_t v340 = v517;
                BOOL v232 = v504-- != 0;
                if (!v232) {
                  goto LABEL_712;
                }
LABEL_759:
                unsigned int v411 = *v517;
                if (*v517 < v419) {
                  goto LABEL_712;
                }
              }
              uint64_t v514 = (char *)&v758[v506];
              if ((unint64_t)v508 >= v751) {
                goto LABEL_770;
              }
LABEL_768:
              if (*(_DWORD *)v509 == *(_DWORD *)v514)
              {
                v514 += 4;
                unint64_t v509 = (void *)((char *)v509 + 4);
              }
LABEL_770:
              if ((unint64_t)v514 >= v750)
              {
                if ((unint64_t)v514 >= v760) {
                  goto LABEL_778;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v509 == *(unsigned __int16 *)v514)
                {
                  v514 += 2;
                  unint64_t v509 = (void *)((char *)v509 + 2);
                }
                if ((unint64_t)v514 >= v760)
                {
LABEL_778:
                  unint64_t v511 = v514 - (char *)v758;
                  unint64_t v512 = (unsigned __int8 *)v760;
                  if (v511 <= v424) {
                    goto LABEL_766;
                  }
                  goto LABEL_779;
                }
              }
              if (*(unsigned __int8 *)v509 == *v514) {
                ++v514;
              }
              goto LABEL_778;
            }
          }
        }
        if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
          unsigned int v295 = 4095;
        }
        else {
          unsigned int v295 = *(_DWORD *)(a1 + 212);
        }
        uint64_t v296 = *(void *)(a1 + 8);
        unsigned int v297 = v758 - v296;
        unint64_t v298 = (char *)(v758 + 3);
        int v702 = *(_DWORD *)(a1 + 204);
        uint64_t v706 = (-1640531535 * *(_DWORD *)v758) >> -(char)*(_DWORD *)(a1 + 200);
        uint64_t v710 = *(void *)(a1 + 48);
        unsigned int v299 = *(_DWORD *)(v710 + 4 * v706);
        uint64_t v300 = *(void *)(a1 + 64);
        int v301 = -1 << (*(_DWORD *)(a1 + 196) - 1);
        int v302 = ~v301;
        unsigned int v303 = v758 - v296 + v301 + 1;
        if ((int)v758 - (int)v296 < ~v301) {
          unsigned int v303 = 0;
        }
        unsigned int v727 = v303;
        int v304 = *(_DWORD *)(a1 + 24);
        unsigned int v305 = 1 << *(_DWORD *)(a1 + 192);
        if (v297 - *(_DWORD *)(a1 + 28) > v305 && *(_DWORD *)(a1 + 32) == 0) {
          unsigned int v307 = v297 - v305;
        }
        else {
          unsigned int v307 = *(_DWORD *)(a1 + 28);
        }
        if (v307 <= 1) {
          unsigned int v308 = 1;
        }
        else {
          unsigned int v308 = v307;
        }
        unint64_t v309 = (unsigned int *)(v300 + 8 * (v297 & ~v301));
        int v310 = v309 + 1;
        unsigned int v311 = v297 + 9;
        int v770 = 0;
        if (v720) {
          unint64_t v312 = 4;
        }
        else {
          unint64_t v312 = 3;
        }
        unsigned int v313 = v297 - v304;
        uint64_t v314 = v720;
        unint64_t v315 = (v732 - 1);
        while (2)
        {
          if (v314 != 3)
          {
            unsigned int v316 = v294[v314];
            if (v316 - 1 < v313) {
              goto LABEL_428;
            }
            goto LABEL_423;
          }
          unsigned int v316 = *v294 - 1;
          if (*v294 - 2 >= v313) {
            goto LABEL_423;
          }
LABEL_428:
          if (v297 - v316 >= v307 && ((*(_DWORD *)&v758[-v316] ^ *(_DWORD *)v758) & 0xFFFFFF) == 0)
          {
            long long v318 = &v298[-v316];
            if (v762 > (unint64_t)v298)
            {
              uint64_t v319 = v758 + 3;
              unint64_t v320 = *(void *)v298 ^ *(void *)v318;
              if (v320)
              {
                unint64_t v321 = __clz(__rbit64(v320)) >> 3;
              }
              else
              {
                do
                {
                  v318 += 8;
                  if ((unint64_t)++v319 >= v762) {
                    goto LABEL_442;
                  }
                  unint64_t v322 = *v319 ^ *(void *)v318;
                }
                while (!v322);
                unint64_t v321 = (char *)v319 + (__clz(__rbit64(v322)) >> 3) - v298;
              }
              unsigned int v323 = v321 + 3;
              unint64_t v324 = v323;
              if (v315 >= v323) {
                goto LABEL_423;
              }
              goto LABEL_450;
            }
            uint64_t v319 = v758 + 3;
LABEL_442:
            if ((unint64_t)v319 >= v751)
            {
              if ((unint64_t)v319 >= v750) {
                goto LABEL_446;
              }
            }
            else
            {
              if (*(_DWORD *)v318 == *(_DWORD *)v319)
              {
                uint64_t v319 = (void *)((char *)v319 + 4);
                v318 += 4;
              }
              if ((unint64_t)v319 >= v750)
              {
LABEL_446:
                if ((unint64_t)v319 >= v760) {
                  goto LABEL_449;
                }
                goto LABEL_447;
              }
            }
            if (*(unsigned __int16 *)v318 == *(unsigned __int16 *)v319)
            {
              uint64_t v319 = (void *)((char *)v319 + 2);
              v318 += 2;
            }
            if ((unint64_t)v319 >= v760)
            {
LABEL_449:
              unsigned int v323 = v319 - v758;
              unint64_t v324 = v323;
              if (v315 >= v323) {
                goto LABEL_423;
              }
LABEL_450:
              long long v325 = &v761[2 * v291];
              _DWORD *v325 = v314 + ((int)(v720 << 31) >> 31);
              v325[1] = v323;
              ++v291;
              if (v323 > v295) {
                goto LABEL_713;
              }
              unint64_t v315 = v324;
              if (&v758[v324] == (unsigned __int8 *)v760) {
                goto LABEL_713;
              }
              goto LABEL_423;
            }
LABEL_447:
            if (*v318 == *(unsigned char *)v319) {
              LODWORD(v319) = v319 + 1;
            }
            goto LABEL_449;
          }
LABEL_423:
          if (++v314 < v312) {
            continue;
          }
          break;
        }
        if (v315 > 2)
        {
          unint64_t v7 = v760;
          unsigned int v16 = v11 + 7;
          uint64_t v18 = a1;
          goto LABEL_756;
        }
        uint64_t v18 = a1;
        uint64_t v435 = *(void *)(a1 + 56);
        int v436 = *(_DWORD *)v758;
        int v437 = 32 - *(_DWORD *)(a1 + 40);
        unint64_t v7 = v760;
        if (v701 < v297)
        {
          uint64_t v438 = v701;
          do
          {
            *(_DWORD *)(v435 + 4 * ((900185344 * *(_DWORD *)(v296 + v438)) >> v437)) = v438;
            ++v438;
          }
          while (v745 - v296 != v438);
        }
        uint64_t v439 = *(unsigned int *)(v435 + 4 * ((900185344 * v436) >> v437));
        BOOL v440 = v439 >= v308 && (v297 - v439) >> 18 == 0;
        unsigned int v16 = v11 + 7;
        if (!v440)
        {
          unsigned int v701 = v758 - v296;
          goto LABEL_756;
        }
        unint64_t v544 = (_DWORD *)(v296 + v439);
        if (v762 <= (unint64_t)v758)
        {
          v547 = v758;
          if ((unint64_t)v758 < v751)
          {
LABEL_847:
            if (*v544 == *(_DWORD *)v547)
            {
              v547 += 4;
              ++v544;
            }
          }
          goto LABEL_849;
        }
        unint64_t v545 = *(void *)v758 ^ *(void *)v544;
        if (!v545)
        {
          uint64_t v549 = 0;
          v550 = (char *)v718 + v255;
          while (1)
          {
            uint64_t v551 = &v550[v549];
            if ((unint64_t)&v550[v549] >= v762) {
              break;
            }
            uint64_t v552 = *(void *)(v296 + v439 + 8 + v549);
            v549 += 8;
            unint64_t v553 = *(void *)v551 ^ v552;
            if (v553)
            {
              unint64_t v546 = v549 + (__clz(__rbit64(v553)) >> 3);
              unsigned int v701 = v758 - v296;
              if (v546 < 3) {
                goto LABEL_756;
              }
              goto LABEL_858;
            }
          }
          v547 = (unsigned __int8 *)v718 + v255 + v549;
          unint64_t v544 = (_DWORD *)(v296 + v439 + v549 + 8);
          if ((unint64_t)v547 < v751) {
            goto LABEL_847;
          }
LABEL_849:
          if ((unint64_t)v547 >= v750)
          {
            if ((unint64_t)v547 >= v760) {
              goto LABEL_857;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v544 == *(unsigned __int16 *)v547)
            {
              v547 += 2;
              unint64_t v544 = (_DWORD *)((char *)v544 + 2);
            }
            if ((unint64_t)v547 >= v760)
            {
LABEL_857:
              unint64_t v546 = v547 - v758;
              unsigned int v701 = v758 - v296;
              if (v546 >= 3) {
                goto LABEL_858;
              }
              goto LABEL_756;
            }
          }
          if (*(unsigned __int8 *)v544 == *v547) {
            ++v547;
          }
          goto LABEL_857;
        }
        unint64_t v546 = __clz(__rbit64(v545)) >> 3;
        unsigned int v701 = v758 - v296;
        if (v546 >= 3)
        {
LABEL_858:
          _DWORD *v761 = v297 - v439 + 2;
          v761[1] = v546;
          LODWORD(v256) = v758;
          if (v546 > v295 || &v758[v546] == (unsigned __int8 *)v760)
          {
            unsigned int v291 = 1;
            unsigned int v701 = v758 - v296;
            *(_DWORD *)(a1 + 36) = v297 + 1;
            goto LABEL_714;
          }
          unsigned int v291 = 1;
          unsigned int v701 = v758 - v296;
          unint64_t v315 = v546;
        }
LABEL_756:
        *(_DWORD *)(v710 + 4 * v706) = v297;
        if (v299 < v308) {
          goto LABEL_757;
        }
        unint64_t v523 = 0;
        unint64_t v524 = 0;
        int v525 = ~(-1 << v702);
        unsigned int v526 = v297 + 2;
        v724 = (char *)v718 + v255;
        uint64_t v717 = v296 + 8;
        while (2)
        {
          if (v524 >= v523) {
            unint64_t v527 = v523;
          }
          else {
            unint64_t v527 = v524;
          }
          uint64_t v528 = v296 + v299;
          long long v529 = &v758[v527];
          uint64_t v530 = (_DWORD *)(v528 + v527);
          if (v762 <= (unint64_t)&v758[v527])
          {
            uint64_t v535 = (char *)&v758[v527];
            v532 = v761;
            if ((unint64_t)v529 < v751)
            {
LABEL_809:
              if (*v530 == *(_DWORD *)v535)
              {
                v535 += 4;
                ++v530;
              }
            }
          }
          else
          {
            unint64_t v531 = *(void *)v529 ^ *(void *)v530;
            v532 = v761;
            if (v531)
            {
              unint64_t v533 = (__clz(__rbit64(v531)) >> 3) + v527;
              unint64_t v7 = v760;
              if (v533 <= v315) {
                goto LABEL_807;
              }
LABEL_820:
              if (v533 > v311 - v299) {
                unsigned int v311 = v299 + v533;
              }
              v536 = &v532[2 * v291];
              _DWORD *v536 = v526 - v299;
              v536[1] = v533;
              ++v291;
              unint64_t v534 = v758;
              BOOL v537 = v533 > 0x1000 || &v758[v533] == (unsigned __int8 *)v7;
              unint64_t v315 = v533;
              uint64_t v18 = a1;
              unsigned int v16 = v11 + 7;
              if (v537) {
                goto LABEL_757;
              }
              goto LABEL_826;
            }
            uint64_t v539 = 0;
            uint64_t v540 = &v724[v527];
            while (1)
            {
              uint64_t v541 = &v540[v539];
              if ((unint64_t)&v540[v539] >= v762) {
                break;
              }
              uint64_t v542 = *(void *)(v717 + v527 + v299 + v539);
              v539 += 8;
              unint64_t v543 = *(void *)v541 ^ v542;
              if (v543)
              {
                unint64_t v533 = v539 + (__clz(__rbit64(v543)) >> 3) + v527;
                unint64_t v7 = v760;
                if (v533 > v315) {
                  goto LABEL_820;
                }
                goto LABEL_807;
              }
            }
            uint64_t v535 = &v724[v527 + v539];
            uint64_t v530 = (_DWORD *)(v717 + v527 + v299 + v539);
            if ((unint64_t)v535 < v751) {
              goto LABEL_809;
            }
          }
          if ((unint64_t)v535 >= v750)
          {
            if ((unint64_t)v535 < v760) {
              goto LABEL_817;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v530 == *(unsigned __int16 *)v535)
            {
              v535 += 2;
              uint64_t v530 = (_DWORD *)((char *)v530 + 2);
            }
            if ((unint64_t)v535 >= v760) {
              goto LABEL_819;
            }
LABEL_817:
            if (*(unsigned __int8 *)v530 == *v535) {
              ++v535;
            }
          }
LABEL_819:
          unint64_t v533 = v535 - (char *)v758;
          unint64_t v7 = v760;
          if (v533 > v315) {
            goto LABEL_820;
          }
LABEL_807:
          uint64_t v18 = a1;
          unsigned int v16 = v11 + 7;
          unint64_t v534 = v758;
LABEL_826:
          uint64_t v538 = (unsigned int *)(v300 + 8 * (v299 & v302));
          if (*(unsigned __int8 *)(v528 + v533) < *((unsigned __int8 *)v534 + v533))
          {
            *unint64_t v309 = v299;
            if (v299 <= v727)
            {
              unint64_t v309 = (unsigned int *)&v770;
              goto LABEL_757;
            }
            ++v538;
            unint64_t v524 = v533;
            unint64_t v309 = v538;
            BOOL v232 = v525-- != 0;
            if (!v232) {
              goto LABEL_757;
            }
            goto LABEL_800;
          }
          *int v310 = v299;
          if (v299 > v727)
          {
            unint64_t v523 = v533;
            int v310 = (unsigned int *)(v300 + 8 * (v299 & v302));
            BOOL v232 = v525-- != 0;
            if (!v232) {
              goto LABEL_757;
            }
LABEL_800:
            unsigned int v299 = *v538;
            if (*v538 < v308) {
              goto LABEL_757;
            }
            continue;
          }
          break;
        }
        int v310 = (unsigned int *)&v770;
LABEL_757:
        *int v310 = 0;
        *unint64_t v309 = 0;
        LODWORD(v256) = v758;
        *(_DWORD *)(v18 + 36) = v311 - 8;
LABEL_714:
        unsigned int v766 = v291;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v767, (uint64_t)v761, &v766, v256 - v747, v7 - v256);
        uint64_t v462 = v766;
        if (!v766)
        {
LABEL_754:
          int v248 = v759;
          unsigned int v250 = v255 + 1;
          int v249 = v745;
          unint64_t v251 = v748;
          goto LABEL_357;
        }
        uint64_t v463 = v766 - 1;
        unsigned int v209 = v761[2 * v463 + 1];
        if (v209 <= v731 && v209 + v255 <= 0xFFF)
        {
          uint64_t v464 = 0;
          unsigned int v465 = v735 + v736;
          signed int v466 = v765;
          while (1)
          {
            unint64_t v467 = &v761[2 * v464];
            unsigned int v468 = v732;
            if (v464) {
              unsigned int v468 = *(v467 - 1) + 1;
            }
            unsigned int v469 = v467[1];
            if (v469 >= v468) {
              break;
            }
LABEL_719:
            if (++v464 == v462) {
              goto LABEL_754;
            }
          }
          signed int v470 = *v467;
          uint64_t v471 = __clz(v470 + 1) ^ 0x1F;
          if (*(_DWORD *)(v18 + 160) == 1)
          {
            int v472 = 0;
            int v473 = (v471 << 8) + 4096;
            int v474 = v255 + v469;
            unsigned int v475 = v255 + v469;
            while (1)
            {
              unint64_t v477 = v469 + v255;
              signed int v478 = v465 + v473 + ((__clz(v469 - 2) << 8) ^ 0x1F00);
              if (v477 <= v247)
              {
                if (v478 >= (int)v11[7 * v477]) {
                  goto LABEL_719;
                }
                goto LABEL_726;
              }
              uint64_t v479 = v247;
              unint64_t v480 = (v474 - v472) - (unint64_t)v247;
              if (v480 >= 2)
              {
                unint64_t v247 = (v480 & 0xFFFFFFFFFFFFFFFELL) + v247;
                unint64_t v481 = (v475 - v479) & 0xFFFFFFFFFFFFFFFELL;
                v482 = &v763[7 * v479];
                do
                {
                  *(v482 - 7) = 0x40000000;
                  _DWORD *v482 = 0x40000000;
                  v482 += 14;
                  v481 -= 2;
                }
                while (v481);
                signed int v466 = v765;
                if (v480 == (v480 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_726;
                }
              }
              else
              {
                unint64_t v247 = v247;
              }
              v483 = &v16[7 * v247];
              do
              {
                ++v247;
                _DWORD *v483 = 0x40000000;
                v483 += 7;
              }
              while (v247 < v477);
LABEL_726:
              long long v476 = (signed int *)&v11[7 * v477];
              v476[2] = v469;
              v476[3] = v466;
              signed int *v476 = v478;
              v476[1] = v470;
              --v469;
              ++v472;
              --v475;
              if (v469 < v468) {
                goto LABEL_719;
              }
            }
          }
          int v484 = 0;
          if (v471 <= 0x13) {
            int v485 = 53;
          }
          else {
            int v485 = (v471 << 9) - 9675;
          }
          int v486 = *(_DWORD *)(v18 + 152);
          uint64_t v487 = *(void *)(v18 + 96);
          uint64_t v488 = *(void *)(v18 + 104);
          int v489 = v485 + *(_DWORD *)(v18 + 156);
          int v490 = v255 + v469;
          unsigned int v491 = v255 + v469;
          while (2)
          {
            unsigned int v493 = v469 - 3;
            if (v469 - 3 < 0x80) {
              unsigned int v494 = ZSTD_MLcode_ML_Code[v493];
            }
            else {
              unsigned int v494 = 67 - __clz(v493);
            }
            unint64_t v495 = v469 + v255;
            signed int v496 = v465
                 + v489
                 + ((__clz(*(_DWORD *)(v488 + 4 * v471) + 1) << 8) ^ 0xFFFFE0FF)
                 + v486
                 + ((ML_bits[v494] + v471) << 8)
                 + ((__clz(*(_DWORD *)(v487 + 4 * v494) + 1) << 8) ^ 0xFFFFE0FF);
            if (v495 <= v247)
            {
              if (v496 >= (int)v11[7 * v495])
              {
                signed int v466 = v765;
                goto LABEL_719;
              }
            }
            else
            {
              uint64_t v497 = v247;
              unint64_t v498 = (v490 - v484) - (unint64_t)v247;
              if (v498 < 2)
              {
                unint64_t v247 = v247;
                goto LABEL_751;
              }
              unint64_t v247 = (v498 & 0xFFFFFFFFFFFFFFFELL) + v247;
              unint64_t v499 = (v491 - v497) & 0xFFFFFFFFFFFFFFFELL;
              BOOL v500 = &v763[7 * v497];
              do
              {
                *(v500 - 7) = 0x40000000;
                *BOOL v500 = 0x40000000;
                v500 += 14;
                v499 -= 2;
              }
              while (v499);
              unsigned int v16 = v11 + 7;
              if (v498 != (v498 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_751:
                int v501 = &v16[7 * v247];
                do
                {
                  ++v247;
                  *int v501 = 0x40000000;
                  v501 += 7;
                }
                while (v247 < v495);
              }
            }
            signed int v466 = v765;
            BOOL v492 = (signed int *)&v11[7 * v495];
            v492[2] = v469;
            v492[3] = v765;
            signed int *v492 = v496;
            v492[1] = v470;
            --v469;
            ++v484;
            --v491;
            if (v469 < v468) {
              goto LABEL_719;
            }
            continue;
          }
        }
        unsigned int v205 = v765;
        if (*v725) {
          unsigned int v685 = 0;
        }
        else {
          unsigned int v685 = v11[7 * v255 + 3];
        }
        unint64_t v23 = v733;
        uint64_t v210 = v734;
        unsigned int v216 = v761[2 * v463];
        unsigned int v691 = v255 - v685;
        if (v691 <= 0x1000) {
          unsigned int v215 = v691;
        }
        else {
          unsigned int v215 = 0;
        }
        uint64_t v17 = v752;
        if (!v209)
        {
LABEL_1113:
          v692 = &v11[7 * v215];
          uint64_t v693 = *((void *)v692 + 2);
          a3[2] = v692[6];
          *(void *)a3 = v693;
          goto LABEL_892;
        }
LABEL_878:
        v555 = &v11[7 * v215 + 4];
        if (v216 < 3)
        {
          if (v205) {
            unsigned int v560 = v216;
          }
          else {
            unsigned int v560 = v216 + 1;
          }
          if (v560)
          {
            if (v560 == 3)
            {
              unint64_t v557 = *v555;
              unsigned int v559 = v557 - 1;
            }
            else
            {
              unsigned int v559 = v555[v560];
              unint64_t v557 = *v555;
            }
            BOOL v571 = v560 > 1;
            uint64_t v562 = 2;
            if (v571) {
              uint64_t v562 = 1;
            }
            unint64_t v556 = &v555[v562];
          }
          else
          {
            unint64_t v561 = *(void *)v555;
            unint64_t v556 = &v11[7 * v215 + 6];
            unsigned int v559 = v561;
            unint64_t v557 = HIDWORD(v561);
          }
        }
        else
        {
          unsigned int v558 = *v555;
          unint64_t v556 = &v11[7 * v215 + 5];
          unint64_t v557 = v558;
          unsigned int v559 = v216 - 2;
        }
        unsigned int v563 = *v556;
        *(void *)a3 = v559 | (v557 << 32);
        a3[2] = v563;
LABEL_892:
        unsigned int v564 = v215 + 1;
        v565 = &v11[7 * v215 + 7];
        unsigned int *v565 = v726;
        v565[1] = v216;
        v565[2] = v209;
        v565[3] = v205;
        *((void *)v565 + 2) = v771;
        v565[6] = v772;
        unsigned int v566 = v215;
        if (!v215)
        {
          unsigned int v572 = 1;
          uint64_t v573 = a2;
          goto LABEL_902;
        }
        do
        {
          v567 = &v11[7 * v566];
          unsigned int v568 = v567[3] + v567[2];
          unint64_t v569 = &v11[7 * v215];
          long long v570 = *(_OWORD *)v567;
          *(_OWORD *)(v569 + 3) = *(_OWORD *)(v567 + 3);
          *(_OWORD *)unint64_t v569 = v570;
          --v215;
          BOOL v232 = v566 >= v568;
          v566 -= v568;
          BOOL v571 = v566 != 0 && v232;
          if (!v232) {
            unsigned int v566 = 0;
          }
        }
        while (v571);
        unsigned int v572 = v215 + 1;
        uint64_t v573 = a2;
        if (v572 <= v564)
        {
          while (1)
          {
LABEL_902:
            while (1)
            {
              unsigned int v574 = v572;
              unsigned int v576 = v11[7 * v572 + 2];
              uint64_t v575 = v11[7 * v572 + 3];
              if (v576) {
                break;
              }
              unsigned int v14 = &v17[v575];
              unsigned int v572 = v574 + 1;
              if (v574 + 1 > v564) {
                goto LABEL_898;
              }
            }
            unsigned int v577 = v11[7 * v574 + 1];
            if (*(_DWORD *)(v18 + 176) != 2)
            {
              if (v575)
              {
                uint64_t v578 = *v210;
                v579 = v17;
                uint64_t v580 = v575;
                do
                {
                  unsigned int v581 = *v579++;
                  *(_DWORD *)&v578[4 * v581] += 2;
                  --v580;
                }
                while (v580);
              }
              *(_DWORD *)(v18 + 128) += 2 * v575;
            }
            unsigned int v582 = v575 < 0x40 ? ZSTD_LLcode_LL_Code[v575] : 50 - __clz(v575);
            ++*(_DWORD *)(*(void *)(v18 + 88) + 4 * v582);
            ++*(_DWORD *)(v18 + 132);
            unsigned int v583 = v577 + 1;
            unsigned int v584 = __clz(v577 + 1);
            ++*(_DWORD *)(*(void *)(v18 + 104) + 4 * (v584 ^ 0x1F));
            ++*(_DWORD *)(v18 + 140);
            unsigned int v585 = v576 - 3;
            unsigned int v586 = v576 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v585] : 67 - __clz(v585);
            ++*(_DWORD *)(*(void *)(v18 + 96) + 4 * v586);
            ++*(_DWORD *)(v18 + 136);
            v587 = &v17[v575];
            v588 = *(char **)(v573 + 24);
            if ((unint64_t)&v17[v575] > v23) {
              break;
            }
            *(_OWORD *)v588 = *(_OWORD *)v17;
            uint64_t v591 = *(void *)(v573 + 24);
            if (v575 > 0x10)
            {
              unint64_t v592 = (_OWORD *)(v591 + 16);
              unint64_t v593 = v591 + v575;
              v594 = (long long *)(v17 + 16);
              do
              {
                long long v595 = *v594++;
                *v592++ = v595;
              }
              while ((unint64_t)v592 < v593);
LABEL_947:
              *(void *)(v573 + 24) += v575;
              uint64_t v602 = *(void *)(v573 + 8);
              if (v575 >= 0x10000)
              {
                unint64_t v613 = (unint64_t)(v602 - *(void *)v573) >> 3;
                *(_DWORD *)(v573 + 72) = 1;
                *(_DWORD *)(v573 + 76) = v613;
              }
              goto LABEL_949;
            }
            *(void *)(v573 + 24) = v591 + v575;
            uint64_t v602 = *(void *)(v573 + 8);
LABEL_949:
            *(_WORD *)(v602 + 4) = v575;
            *(_DWORD *)uint64_t v602 = v583;
            if (v585 >= 0x10000)
            {
              unint64_t v614 = (unint64_t)(v602 - *(void *)v573) >> 3;
              *(_DWORD *)(v573 + 72) = 2;
              *(_DWORD *)(v573 + 76) = v614;
            }
            *(_WORD *)(v602 + 6) = v585;
            *(void *)(v573 + 8) = v602 + 8;
            v17 += v576 + v575;
            unsigned int v14 = v17;
            unsigned int v572 = v574 + 1;
            if (v574 + 1 > v564) {
              goto LABEL_898;
            }
          }
          if ((unint64_t)v17 <= v23)
          {
            v590 = &v588[v23 - (void)v17];
            uint64_t v596 = v17;
            unint64_t v597 = *(char **)(v573 + 24);
            do
            {
              long long v598 = *(_OWORD *)v596;
              v596 += 16;
              *(_OWORD *)unint64_t v597 = v598;
              v597 += 16;
            }
            while (v597 < v590);
            v589 = (unsigned __int8 *)v23;
            if (v23 >= (unint64_t)v587) {
              goto LABEL_947;
            }
          }
          else
          {
            v589 = v17;
            v590 = *(char **)(v573 + 24);
            if (v17 >= v587) {
              goto LABEL_947;
            }
          }
          if ((unint64_t)v17 <= v23) {
            v599 = (unsigned __int8 *)v23;
          }
          else {
            v599 = v17;
          }
          unint64_t v600 = &v17[v575] - v599;
          if (v600 < 8)
          {
            long long v601 = v589;
            goto LABEL_946;
          }
          if ((unint64_t)(v588 - (char *)v17) < 0x20)
          {
            long long v601 = v589;
            goto LABEL_946;
          }
          if (v600 >= 0x20)
          {
            unint64_t v603 = v600 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v604 = (long long *)(v589 + 16);
            uint64_t v605 = &v588[v599 - v17 + 16];
            unint64_t v606 = v600 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v607 = *v604;
              *((_OWORD *)v605 - 1) = *(v604 - 1);
              *(_OWORD *)uint64_t v605 = v607;
              v604 += 2;
              v605 += 32;
              v606 -= 32;
            }
            while (v606);
            if (v600 == v603) {
              goto LABEL_947;
            }
            if ((v600 & 0x18) == 0)
            {
              long long v601 = &v589[v603];
              v590 += v603;
              goto LABEL_946;
            }
          }
          else
          {
            unint64_t v603 = 0;
          }
          v590 += v600 & 0xFFFFFFFFFFFFFFF8;
          long long v601 = &v589[v600 & 0xFFFFFFFFFFFFFFF8];
          v608 = &v589[v603];
          uint64_t v609 = &v588[&v599[v603] - v17];
          unint64_t v610 = v603 - (v600 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v611 = *(void *)v608;
            v608 += 8;
            *(void *)uint64_t v609 = v611;
            v609 += 8;
            v610 += 8;
          }
          while (v610);
          if (v600 == (v600 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_947;
          }
          do
          {
LABEL_946:
            char v612 = *v601++;
            *v590++ = v612;
          }
          while (v601 < v587);
          goto LABEL_947;
        }
        unsigned int v14 = v759;
LABEL_898:
        if (*(_DWORD *)(v18 + 176) != 2) {
          *(_DWORD *)(v18 + 144) = (__clz(*(_DWORD *)(v18 + 128) + 1) << 8) ^ 0x1F00;
        }
        unsigned int v19 = (__clz(*(_DWORD *)(v18 + 140) + 1) << 8) ^ 0x1F00;
        *(int8x8_t *)(v18 + 148) = veor_s8((int8x8_t)vshl_n_s32(vclz_s32(vadd_s32(*(int32x2_t *)(v18 + 132), (int32x2_t)0x100000001)), 8uLL), (int8x8_t)0x1F0000001F00);
        *(_DWORD *)(v18 + 156) = v19;
        if ((unint64_t)v14 >= v748)
        {
LABEL_1126:
          v747 = v17;
          return v7 - (void)v747;
        }
      }
      else
      {
        unsigned int v14 = v203 + 1;
        unint64_t v7 = v760;
        if ((unint64_t)(v203 + 1) >= v748) {
          goto LABEL_1126;
        }
      }
    }
  }
  return v7 - (void)v747;
}

unint64_t ZSTD_compressBlock_btultra(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v787 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (char **)(a1 + 80);
  unsigned int v754 = a4;
  unint64_t v769 = (unint64_t)&a4[a5];
  unint64_t v764 = (unint64_t)&a4[a5 - 8];
  unint64_t v7 = (unsigned __int8 *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
    int v8 = 4095;
  }
  else {
    int v8 = *(_DWORD *)(a1 + 212);
  }
  unsigned int v735 = v8;
  if (*(_DWORD *)(a1 + 208) == 3) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 4;
  }
  uint64_t v763 = v9;
  unsigned int v711 = *(_DWORD *)(a1 + 36);
  uint64_t v10 = *(_DWORD **)(a1 + 112);
  unsigned int v11 = *(unsigned int **)(a1 + 120);
  unsigned int v786 = 0;
  uint64_t v785 = 0;
  long long v782 = 0u;
  memset(v783, 0, sizeof(v783));
  long long v781 = 0u;
  int v12 = *(long long **)(a1 + 224);
  if (v12)
  {
    long long v13 = v12[1];
    long long v781 = *v12;
    long long v782 = v13;
    *(void *)v783 = *((void *)v12 + 4);
  }
  else
  {
    *(void *)v783 = 0;
    long long v781 = 0uLL;
    long long v782 = 0uLL;
  }
  *(void *)&v783[12] = 0;
  *(_DWORD *)&v783[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v781, 0, a5);
  unsigned int v726 = v6;
  ZSTD_rescaleFreqs(v6, v754, a5, 2);
  if (v7 == v754) {
    unsigned int v14 = v754 + 1;
  }
  else {
    unsigned int v14 = v754;
  }
  if ((unint64_t)v14 < v764)
  {
    unsigned int v728 = 0;
    unsigned int v15 = v763;
    unint64_t v778 = v769 - 7;
    unint64_t v765 = v769 - 1;
    unint64_t v766 = v769 - 3;
    uint64_t v16 = (v763 - 1) | 1;
    v779 = v11 + 14;
    uint64_t v709 = v763 - v16;
    uint64_t v710 = &v11[7 * v16];
    uint64_t v17 = v754;
    uint64_t v18 = a1;
    int v770 = v10;
    while (1)
    {
      v747 = v17;
      unsigned int v23 = v14 - v17;
      unsigned int v780 = 0;
      uint64_t v24 = *(void *)(v18 + 8);
      uint64_t v25 = *(unsigned int *)(v18 + 36);
      long long v768 = v14;
      if (v24 + v25 > (unint64_t)v14)
      {
        unsigned int v26 = 0;
LABEL_433:
        uint64_t v17 = v747;
        goto LABEL_434;
      }
      int v27 = *(_DWORD *)(v18 + 208);
      for (unsigned int i = v14 - v24; v25 < i; LODWORD(v25) = inserted + v25)
      {
        int inserted = ZSTD_insertBt1(v18, (void *)(v24 + v25), v769, v27, 0);
        uint64_t v18 = a1;
      }
      *(_DWORD *)(v18 + 36) = i;
      if ((v27 - 6) < 2) {
        break;
      }
      uint64_t v10 = v770;
      if (v27 == 5)
      {
        unsigned int v26 = 0;
        if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
          unsigned int v124 = 4095;
        }
        else {
          unsigned int v124 = *(_DWORD *)(v18 + 212);
        }
        uint64_t v125 = *(void *)(v18 + 8);
        int v126 = v14 - v125;
        int v127 = -1 << (*(_DWORD *)(v18 + 196) - 1);
        int v128 = ~v127;
        unsigned int v129 = v14 - v125 + v127 + 1;
        if ((int)v14 - (int)v125 < ~v127) {
          unsigned int v129 = 0;
        }
        unsigned int v773 = v129;
        unsigned int v130 = 1 << *(_DWORD *)(v18 + 192);
        if (v126 - *(_DWORD *)(v18 + 28) > v130 && *(_DWORD *)(v18 + 32) == 0) {
          unsigned int v132 = v126 - v130;
        }
        else {
          unsigned int v132 = *(_DWORD *)(v18 + 28);
        }
        if (v132 <= 1) {
          unsigned int v133 = 1;
        }
        else {
          unsigned int v133 = v132;
        }
        unsigned int v134 = v126 - *(_DWORD *)(v18 + 24);
        unsigned int v135 = (char *)(v14 + 12);
        int v751 = *(_DWORD *)(v18 + 204);
        unint64_t v136 = (0xCF1BBCDCBB000000 * *(void *)v14) >> -(char)*(_DWORD *)(v18 + 200);
        uint64_t v758 = *(void *)(v18 + 48);
        unsigned int v137 = *(_DWORD *)(v758 + 4 * v136);
        uint64_t v138 = v23 == 0;
        uint64_t v139 = *(void *)(v18 + 64);
        int v81 = (unsigned int *)(v139 + 8 * (v126 & ~v127));
        unint64_t v82 = v81 + 1;
        int v83 = v126 + 9;
        int v784 = 0;
        if (v23) {
          unint64_t v140 = 3;
        }
        else {
          unint64_t v140 = 4;
        }
        int v141 = (char *)(v14 + 4);
        if (v23) {
          int v142 = 0;
        }
        else {
          int v142 = -1;
        }
        unint64_t v143 = (v763 - 1);
        while (1)
        {
          if (v138 == 3)
          {
            unsigned int v144 = *a3 - 1;
            if (*a3 - 2 >= v134) {
              goto LABEL_198;
            }
          }
          else
          {
            unsigned int v144 = a3[v138];
            if (v144 - 1 >= v134) {
              goto LABEL_198;
            }
          }
          int v145 = *(_DWORD *)v14;
          int v146 = *(_DWORD *)&v14[-v144];
          if (v126 - v144 < v132 || v145 != v146)
          {
            uint64_t v10 = v770;
            unsigned int v14 = v768;
            goto LABEL_198;
          }
          uint64_t v148 = -(uint64_t)v144;
          uint64_t v149 = &v141[-v144];
          if (v778 <= (unint64_t)v141) {
            break;
          }
          unint64_t v150 = *(void *)v141 ^ *(void *)v149;
          unsigned int v14 = v768;
          if (v150)
          {
            uint64_t v10 = v770;
            unsigned int v151 = (__clz(__rbit64(v150)) >> 3) + 4;
            unint64_t v152 = v151;
            if (v143 < v151) {
              goto LABEL_224;
            }
            goto LABEL_198;
          }
          while (1)
          {
            int v153 = &v135[v150];
            if ((unint64_t)&v135[v150] >= v778) {
              break;
            }
            uint64_t v156 = *(void *)&v135[v148 + v150];
            v150 += 8;
            unint64_t v157 = *(void *)v153 ^ v156;
            if (v157)
            {
              unint64_t v158 = __clz(__rbit64(v157));
              uint64_t v18 = a1;
              uint64_t v10 = v770;
              unsigned int v14 = v768;
              unsigned int v151 = v150 + (v158 >> 3) + 4;
              unint64_t v152 = v151;
              if (v143 >= v151) {
                goto LABEL_198;
              }
LABEL_224:
              uint64_t v155 = &v10[2 * v26];
              *uint64_t v155 = v138 + v142;
              v155[1] = v151;
              ++v26;
              if (v151 <= v124)
              {
                unint64_t v143 = v152;
                uint64_t v10 = v770;
                if (&v14[v152] == (unsigned __int8 *)v769) {
                  goto LABEL_432;
                }
                goto LABEL_198;
              }
LABEL_289:
              uint64_t v10 = v770;
              goto LABEL_432;
            }
          }
          uint64_t v149 = &v153[v148];
          unsigned int v14 = v768;
          if ((unint64_t)v153 < v766) {
            goto LABEL_213;
          }
LABEL_215:
          if ((unint64_t)v153 >= v765)
          {
            if ((unint64_t)v153 >= v769) {
              goto LABEL_223;
            }
LABEL_221:
            if (*v149 == *v153) {
              LODWORD(v153) = v153 + 1;
            }
            goto LABEL_223;
          }
          if (*(unsigned __int16 *)v149 == *(unsigned __int16 *)v153)
          {
            v153 += 2;
            v149 += 2;
          }
          if ((unint64_t)v153 < v769) {
            goto LABEL_221;
          }
LABEL_223:
          uint64_t v10 = v770;
          int v154 = v153 - v141;
          uint64_t v18 = a1;
          unsigned int v151 = v154 + 4;
          unint64_t v152 = v151;
          if (v143 < v151) {
            goto LABEL_224;
          }
LABEL_198:
          if (++v138 >= v140)
          {
            *(_DWORD *)(v758 + 4 * v136) = v126;
            if (v137 < v133) {
              goto LABEL_430;
            }
            unint64_t v203 = 0;
            unint64_t v204 = 0;
            int v205 = ~(-1 << v751);
            int v206 = v126 + 2;
            unint64_t v760 = v14 + 8;
            uint64_t v207 = v125 + 8;
LABEL_302:
            if (v204 >= v203) {
              unint64_t v208 = v203;
            }
            else {
              unint64_t v208 = v204;
            }
            uint64_t v209 = v125 + v137;
            uint64_t v210 = (char *)&v14[v208];
            unsigned int v211 = (void *)(v209 + v208);
            if (v778 <= (unint64_t)&v14[v208])
            {
              int v214 = &v14[v208];
              uint64_t v18 = a1;
              if ((unint64_t)v210 >= v766) {
                goto LABEL_312;
              }
            }
            else
            {
              unint64_t v212 = *(void *)v210 ^ *v211;
              if (v212)
              {
                uint64_t v18 = a1;
                unint64_t v213 = (__clz(__rbit64(v212)) >> 3) + v208;
                if (v213 <= v143) {
                  goto LABEL_327;
                }
                goto LABEL_321;
              }
              uint64_t v218 = 0;
              uint64_t v219 = (char *)v760 + v208;
              while (1)
              {
                int v220 = &v219[v218];
                if ((unint64_t)&v219[v218] >= v778) {
                  break;
                }
                uint64_t v221 = *(void *)(v207 + v208 + v137 + v218);
                v218 += 8;
                unint64_t v222 = *(void *)v220 ^ v221;
                unsigned int v14 = v768;
                if (v222)
                {
                  uint64_t v18 = a1;
                  uint64_t v10 = v770;
                  unint64_t v213 = v218 + (__clz(__rbit64(v222)) >> 3) + v208;
                  if (v213 <= v143) {
                    goto LABEL_327;
                  }
LABEL_321:
                  if (v213 > v83 - v137) {
                    int v83 = v137 + v213;
                  }
                  unsigned int v215 = &v10[2 * v26];
                  *unsigned int v215 = v206 - v137;
                  v215[1] = v213;
                  ++v26;
                  BOOL v216 = v213 > 0x1000 || &v14[v213] == (unsigned __int8 *)v769;
                  unint64_t v143 = v213;
                  if (v216) {
                    goto LABEL_430;
                  }
LABEL_327:
                  unint64_t v217 = (unsigned int *)(v139 + 8 * (v137 & v128));
                  if (*(unsigned __int8 *)(v209 + v213) < v14[v213])
                  {
                    *int v81 = v137;
                    if (v137 <= v773) {
                      goto LABEL_428;
                    }
                    ++v217;
                    unint64_t v204 = v213;
                    int v81 = v217;
                    BOOL v118 = v205-- != 0;
                    if (!v118) {
                      goto LABEL_430;
                    }
LABEL_301:
                    unsigned int v137 = *v217;
                    if (*v217 < v133) {
                      goto LABEL_430;
                    }
                    goto LABEL_302;
                  }
                  *unint64_t v82 = v137;
                  if (v137 > v773)
                  {
                    unint64_t v203 = v213;
                    unint64_t v82 = (unsigned int *)(v139 + 8 * (v137 & v128));
                    BOOL v118 = v205-- != 0;
                    if (!v118) {
                      goto LABEL_430;
                    }
                    goto LABEL_301;
                  }
LABEL_429:
                  unint64_t v82 = (unsigned int *)&v784;
LABEL_430:
                  *unint64_t v82 = 0;
                  *int v81 = 0;
                  int v223 = v83 - 8;
                  goto LABEL_431;
                }
              }
              int v214 = (unsigned __int8 *)v760 + v208 + v218;
              unsigned int v211 = (void *)(v207 + v208 + v137 + v218);
              uint64_t v18 = a1;
              if ((unint64_t)v214 >= v766)
              {
LABEL_312:
                if ((unint64_t)v214 >= v765)
                {
                  if ((unint64_t)v214 >= v769) {
                    goto LABEL_320;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v211 == *(unsigned __int16 *)v214)
                  {
                    v214 += 2;
                    unsigned int v211 = (void *)((char *)v211 + 2);
                  }
                  if ((unint64_t)v214 >= v769)
                  {
LABEL_320:
                    uint64_t v10 = v770;
                    unint64_t v213 = v214 - (unsigned __int8 *)v210 + v208;
                    if (v213 <= v143) {
                      goto LABEL_327;
                    }
                    goto LABEL_321;
                  }
                }
                if (*(unsigned __int8 *)v211 == *v214) {
                  ++v214;
                }
                goto LABEL_320;
              }
            }
            if (*(_DWORD *)v211 == *(_DWORD *)v214)
            {
              v214 += 4;
              unsigned int v211 = (void *)((char *)v211 + 4);
            }
            goto LABEL_312;
          }
        }
        int v153 = v141;
        unsigned int v14 = v768;
        if ((unint64_t)v141 >= v766) {
          goto LABEL_215;
        }
LABEL_213:
        if (*(_DWORD *)v149 == *(_DWORD *)v153)
        {
          v153 += 4;
          v149 += 4;
        }
        goto LABEL_215;
      }
      if (v27 != 3)
      {
        unsigned int v26 = 0;
        if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
          unsigned int v159 = 4095;
        }
        else {
          unsigned int v159 = *(_DWORD *)(v18 + 212);
        }
        uint64_t v160 = *(void *)(v18 + 8);
        int v161 = v14 - v160;
        int v162 = -1 << (*(_DWORD *)(v18 + 196) - 1);
        int v163 = ~v162;
        unsigned int v164 = v14 - v160 + v162 + 1;
        if ((int)v14 - (int)v160 < ~v162) {
          unsigned int v164 = 0;
        }
        unsigned int v774 = v164;
        unsigned int v165 = 1 << *(_DWORD *)(v18 + 192);
        if (v161 - *(_DWORD *)(v18 + 28) > v165 && *(_DWORD *)(v18 + 32) == 0) {
          unsigned int v167 = v161 - v165;
        }
        else {
          unsigned int v167 = *(_DWORD *)(v18 + 28);
        }
        if (v167 <= 1) {
          unsigned int v168 = 1;
        }
        else {
          unsigned int v168 = v167;
        }
        unsigned int v169 = v161 - *(_DWORD *)(v18 + 24);
        uint64_t v170 = (char *)(v14 + 12);
        int v752 = *(_DWORD *)(v18 + 204);
        uint64_t v171 = (-1640531535 * *(_DWORD *)v14) >> -(char)*(_DWORD *)(v18 + 200);
        uint64_t v759 = *(void *)(v18 + 48);
        unsigned int v172 = *(_DWORD *)(v759 + 4 * v171);
        uint64_t v173 = v23 == 0;
        uint64_t v174 = *(void *)(v18 + 64);
        unsigned int v175 = (unsigned int *)(v174 + 8 * (v161 & ~v162));
        int v176 = v175 + 1;
        int v177 = v161 + 9;
        int v784 = 0;
        if (v23) {
          unint64_t v178 = 3;
        }
        else {
          unint64_t v178 = 4;
        }
        int v179 = (char *)(v14 + 4);
        if (v23) {
          int v180 = 0;
        }
        else {
          int v180 = -1;
        }
        unint64_t v181 = (v763 - 1);
        while (1)
        {
          if (v173 == 3)
          {
            unsigned int v182 = *a3 - 1;
            if (*a3 - 2 >= v169) {
              goto LABEL_254;
            }
          }
          else
          {
            unsigned int v182 = a3[v173];
            if (v182 - 1 >= v169) {
              goto LABEL_254;
            }
          }
          int v183 = *(_DWORD *)v14;
          int v184 = *(_DWORD *)&v14[-v182];
          if (v161 - v182 < v167 || v183 != v184)
          {
            uint64_t v10 = v770;
            unsigned int v14 = v768;
            goto LABEL_254;
          }
          uint64_t v186 = -(uint64_t)v182;
          unsigned int v187 = &v179[-v182];
          if (v778 <= (unint64_t)v179) {
            break;
          }
          unint64_t v188 = *(void *)v179 ^ *(void *)v187;
          unsigned int v14 = v768;
          if (v188)
          {
            uint64_t v10 = v770;
            unsigned int v189 = (__clz(__rbit64(v188)) >> 3) + 4;
            unint64_t v190 = v189;
            if (v181 < v189) {
              goto LABEL_280;
            }
            goto LABEL_254;
          }
          do
          {
            unsigned int v191 = &v170[v188];
            if ((unint64_t)&v170[v188] >= v778)
            {
              unsigned int v187 = &v191[v186];
              unsigned int v14 = v768;
              if ((unint64_t)v191 >= v766) {
                goto LABEL_271;
              }
              goto LABEL_269;
            }
            uint64_t v194 = *(void *)&v170[v186 + v188];
            v188 += 8;
            unint64_t v195 = *(void *)v191 ^ v194;
          }
          while (!v195);
          unint64_t v196 = __clz(__rbit64(v195));
          uint64_t v18 = a1;
          uint64_t v10 = v770;
          unsigned int v14 = v768;
          unsigned int v189 = v188 + (v196 >> 3) + 4;
          unint64_t v190 = v189;
          if (v181 >= v189) {
            goto LABEL_254;
          }
LABEL_280:
          unint64_t v193 = &v10[2 * v26];
          *unint64_t v193 = v173 + v180;
          v193[1] = v189;
          ++v26;
          if (v189 > v159) {
            goto LABEL_289;
          }
          unint64_t v181 = v190;
          uint64_t v10 = v770;
          if (&v14[v190] == (unsigned __int8 *)v769)
          {
LABEL_432:
            unsigned int v15 = v763;
            goto LABEL_433;
          }
LABEL_254:
          if (++v173 >= v178)
          {
            *(_DWORD *)(v759 + 4 * v171) = v161;
            if (v172 < v168) {
              goto LABEL_342;
            }
            unint64_t v224 = 0;
            unint64_t v225 = 0;
            int v226 = ~(-1 << v752);
            int v227 = v161 + 2;
            v761 = v14 + 8;
            uint64_t v228 = v160 + 8;
            while (1)
            {
              unint64_t v229 = v225 >= v224 ? v224 : v225;
              uint64_t v230 = v160 + v172;
              unsigned int v231 = (char *)&v14[v229];
              BOOL v232 = (void *)(v230 + v229);
              if (v778 <= (unint64_t)&v14[v229]) {
                break;
              }
              unint64_t v233 = *(void *)v231 ^ *v232;
              if (v233)
              {
                uint64_t v18 = a1;
                unint64_t v234 = (__clz(__rbit64(v233)) >> 3) + v229;
                if (v234 <= v181) {
                  goto LABEL_373;
                }
                goto LABEL_367;
              }
              uint64_t v239 = 0;
              unsigned int v240 = (char *)v761 + v229;
              do
              {
                unint64_t v241 = &v240[v239];
                if ((unint64_t)&v240[v239] >= v778)
                {
                  int v235 = (unsigned __int8 *)v761 + v229 + v239;
                  BOOL v232 = (void *)(v228 + v229 + v172 + v239);
                  uint64_t v18 = a1;
                  if ((unint64_t)v235 >= v766) {
                    goto LABEL_358;
                  }
                  goto LABEL_356;
                }
                uint64_t v242 = *(void *)(v228 + v229 + v172 + v239);
                v239 += 8;
                unint64_t v243 = *(void *)v241 ^ v242;
                unsigned int v14 = v768;
              }
              while (!v243);
              uint64_t v18 = a1;
              uint64_t v10 = v770;
              unint64_t v234 = v239 + (__clz(__rbit64(v243)) >> 3) + v229;
              if (v234 <= v181) {
                goto LABEL_373;
              }
LABEL_367:
              if (v234 > v177 - v172) {
                int v177 = v172 + v234;
              }
              uint64_t v236 = &v10[2 * v26];
              *uint64_t v236 = v227 - v172;
              v236[1] = v234;
              ++v26;
              BOOL v237 = v234 > 0x1000 || &v14[v234] == (unsigned __int8 *)v769;
              unint64_t v181 = v234;
              if (v237) {
                goto LABEL_342;
              }
LABEL_373:
              int v238 = (unsigned int *)(v174 + 8 * (v172 & v163));
              if (*(unsigned __int8 *)(v230 + v234) >= v14[v234])
              {
                *int v176 = v172;
                if (v172 <= v774)
                {
                  int v176 = (unsigned int *)&v784;
                  goto LABEL_342;
                }
                unint64_t v224 = v234;
                int v176 = (unsigned int *)(v174 + 8 * (v172 & v163));
                BOOL v118 = v226-- != 0;
                if (v118) {
                  goto LABEL_347;
                }
LABEL_342:
                *int v176 = 0;
                *unsigned int v175 = 0;
                int v223 = v177 - 8;
LABEL_431:
                *(_DWORD *)(v18 + 36) = v223;
                goto LABEL_432;
              }
              *unsigned int v175 = v172;
              if (v172 <= v774)
              {
                unsigned int v175 = (unsigned int *)&v784;
                goto LABEL_342;
              }
              ++v238;
              unint64_t v225 = v234;
              unsigned int v175 = v238;
              BOOL v118 = v226-- != 0;
              if (!v118) {
                goto LABEL_342;
              }
LABEL_347:
              unsigned int v172 = *v238;
              if (*v238 < v168) {
                goto LABEL_342;
              }
            }
            int v235 = &v14[v229];
            uint64_t v18 = a1;
            if ((unint64_t)v231 >= v766) {
              goto LABEL_358;
            }
LABEL_356:
            if (*(_DWORD *)v232 == *(_DWORD *)v235)
            {
              v235 += 4;
              BOOL v232 = (void *)((char *)v232 + 4);
            }
LABEL_358:
            if ((unint64_t)v235 >= v765)
            {
              if ((unint64_t)v235 >= v769) {
                goto LABEL_366;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v232 == *(unsigned __int16 *)v235)
              {
                v235 += 2;
                BOOL v232 = (void *)((char *)v232 + 2);
              }
              if ((unint64_t)v235 >= v769)
              {
LABEL_366:
                uint64_t v10 = v770;
                unint64_t v234 = v235 - (unsigned __int8 *)v231 + v229;
                if (v234 <= v181) {
                  goto LABEL_373;
                }
                goto LABEL_367;
              }
            }
            if (*(unsigned __int8 *)v232 == *v235) {
              ++v235;
            }
            goto LABEL_366;
          }
        }
        unsigned int v191 = v179;
        unsigned int v14 = v768;
        if ((unint64_t)v179 >= v766) {
          goto LABEL_271;
        }
LABEL_269:
        if (*(_DWORD *)v187 == *(_DWORD *)v191)
        {
          v191 += 4;
          v187 += 4;
        }
LABEL_271:
        if ((unint64_t)v191 >= v765)
        {
          if ((unint64_t)v191 >= v769) {
            goto LABEL_279;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v187 == *(unsigned __int16 *)v191)
          {
            v191 += 2;
            v187 += 2;
          }
          if ((unint64_t)v191 >= v769)
          {
LABEL_279:
            uint64_t v10 = v770;
            int v192 = v191 - v179;
            uint64_t v18 = a1;
            unsigned int v189 = v192 + 4;
            unint64_t v190 = v189;
            if (v181 < v189) {
              goto LABEL_280;
            }
            goto LABEL_254;
          }
        }
        if (*v187 == *v191) {
          LODWORD(v191) = v191 + 1;
        }
        goto LABEL_279;
      }
      unsigned int v26 = 0;
      if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
        unsigned int v30 = 4095;
      }
      else {
        unsigned int v30 = *(_DWORD *)(v18 + 212);
      }
      uint64_t v31 = *(void *)(v18 + 8);
      unsigned int v32 = v14 - v31;
      int v33 = -1 << (*(_DWORD *)(v18 + 196) - 1);
      int v34 = ~v33;
      unsigned int v35 = v14 - v31 + v33 + 1;
      if ((int)v14 - (int)v31 < ~v33) {
        unsigned int v35 = 0;
      }
      unsigned int v36 = 1 << *(_DWORD *)(v18 + 192);
      if (v32 - *(_DWORD *)(v18 + 28) > v36 && *(_DWORD *)(v18 + 32) == 0) {
        unsigned int v38 = v32 - v36;
      }
      else {
        unsigned int v38 = *(_DWORD *)(v18 + 28);
      }
      if (v38 <= 1) {
        unsigned int v39 = 1;
      }
      else {
        unsigned int v39 = v38;
      }
      unsigned int v40 = v32 - *(_DWORD *)(v18 + 24);
      unint64_t v41 = (char *)(v14 + 11);
      int v749 = *(_DWORD *)(v18 + 204);
      uint64_t v771 = *(void *)(v18 + 48);
      uint64_t v755 = (-1640531535 * *(_DWORD *)v14) >> -(char)*(_DWORD *)(v18 + 200);
      unsigned int v42 = *(_DWORD *)(v771 + 4 * v755);
      unint64_t v43 = v23 == 0;
      uint64_t v44 = *(void *)(v18 + 64);
      unsigned int v45 = (unsigned int *)(v44 + 8 * (v32 & ~v33));
      unint64_t v46 = v45 + 1;
      unsigned int v47 = v32 + 9;
      int v784 = 0;
      if (v23) {
        unint64_t v48 = 3;
      }
      else {
        unint64_t v48 = 4;
      }
      unint64_t v49 = (char *)(v14 + 3);
      if (v23) {
        int v50 = 0;
      }
      else {
        int v50 = -1;
      }
      unint64_t v51 = (v763 - 1);
      do
      {
        if (v43 == 3)
        {
          unsigned int v52 = *a3 - 1;
          if (*a3 - 2 >= v40) {
            goto LABEL_44;
          }
        }
        else
        {
          unsigned int v52 = a3[v43];
          if (v52 - 1 >= v40) {
            goto LABEL_44;
          }
        }
        if (v32 - v52 < v38 || ((*(_DWORD *)&v14[-v52] ^ *(_DWORD *)v14) & 0xFFFFFF) != 0)
        {
          uint64_t v10 = v770;
          unsigned int v14 = v768;
          goto LABEL_44;
        }
        uint64_t v54 = -(uint64_t)v52;
        unsigned int v55 = &v49[-v52];
        if (v778 <= (unint64_t)v49)
        {
          uint64_t v59 = v49;
          unsigned int v14 = v768;
          if ((unint64_t)v49 < v766)
          {
LABEL_59:
            if (*(_DWORD *)v55 == *(_DWORD *)v59)
            {
              v59 += 4;
              v55 += 4;
            }
          }
LABEL_61:
          if ((unint64_t)v59 >= v765)
          {
            if ((unint64_t)v59 >= v769) {
              goto LABEL_69;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v55 == *(unsigned __int16 *)v59)
            {
              v59 += 2;
              v55 += 2;
            }
            if ((unint64_t)v59 >= v769)
            {
LABEL_69:
              uint64_t v10 = v770;
              int v60 = v59 - v49;
              uint64_t v18 = a1;
              unsigned int v57 = v60 + 3;
              unint64_t v58 = v57;
              if (v51 < v57) {
                goto LABEL_70;
              }
              goto LABEL_44;
            }
          }
          if (*v55 == *v59) {
            LODWORD(v59) = v59 + 1;
          }
          goto LABEL_69;
        }
        unint64_t v56 = *(void *)v49 ^ *(void *)v55;
        unsigned int v14 = v768;
        if (v56)
        {
          uint64_t v10 = v770;
          unsigned int v57 = (__clz(__rbit64(v56)) >> 3) + 3;
          unint64_t v58 = v57;
          if (v51 < v57) {
            goto LABEL_70;
          }
          goto LABEL_44;
        }
        do
        {
          uint64_t v59 = &v41[v56];
          if ((unint64_t)&v41[v56] >= v778)
          {
            unsigned int v55 = &v59[v54];
            unsigned int v14 = v768;
            if ((unint64_t)v59 < v766) {
              goto LABEL_59;
            }
            goto LABEL_61;
          }
          uint64_t v62 = *(void *)&v41[v54 + v56];
          v56 += 8;
          unint64_t v63 = *(void *)v59 ^ v62;
        }
        while (!v63);
        unint64_t v64 = __clz(__rbit64(v63));
        uint64_t v18 = a1;
        uint64_t v10 = v770;
        unsigned int v14 = v768;
        unsigned int v57 = v56 + (v64 >> 3) + 3;
        unint64_t v58 = v57;
        if (v51 >= v57) {
          goto LABEL_44;
        }
LABEL_70:
        unint64_t v61 = &v10[2 * v26];
        *unint64_t v61 = v43 + v50;
        v61[1] = v57;
        ++v26;
        if (v57 > v30)
        {
          unsigned int v15 = v763;
          uint64_t v10 = v770;
          goto LABEL_433;
        }
        unint64_t v51 = v58;
        uint64_t v10 = v770;
        if (&v14[v58] == (unsigned __int8 *)v769) {
          goto LABEL_432;
        }
LABEL_44:
        ++v43;
      }
      while (v43 < v48);
      if (v51 > 2)
      {
        unsigned int v15 = v763;
        uint64_t v17 = v747;
        goto LABEL_344;
      }
      uint64_t v197 = *(void *)(v18 + 56);
      int v198 = *(_DWORD *)v14;
      int v199 = 32 - *(_DWORD *)(v18 + 40);
      if (v711 < v32)
      {
        uint64_t v200 = v711;
        do
        {
          *(_DWORD *)(v197 + 4 * ((900185344 * *(_DWORD *)(v31 + v200)) >> v199)) = v200;
          ++v200;
        }
        while (v32 != v200);
      }
      uint64_t v201 = *(unsigned int *)(v197 + 4 * ((900185344 * v198) >> v199));
      BOOL v202 = v201 >= v39 && (v32 - v201) >> 18 == 0;
      unsigned int v15 = v763;
      if (!v202)
      {
        unsigned int v711 = v32;
        uint64_t v17 = v747;
        goto LABEL_344;
      }
      v694 = (_DWORD *)(v31 + v201);
      uint64_t v17 = v747;
      if (v778 <= (unint64_t)v14)
      {
        v700 = v14;
        if ((unint64_t)v14 < v766)
        {
LABEL_1083:
          if (*v694 == *(_DWORD *)v700)
          {
            v700 += 4;
            ++v694;
          }
        }
      }
      else
      {
        unint64_t v695 = *(void *)v14 ^ *(void *)v694;
        if (v695)
        {
          unint64_t v696 = __clz(__rbit64(v695)) >> 3;
          unsigned int v711 = v32;
          if (v696 < 3) {
            goto LABEL_344;
          }
          goto LABEL_1094;
        }
        unint64_t v702 = 0;
        int v703 = v14 + 8;
        while (1)
        {
          int v704 = &v703[v702 / 8];
          if ((unint64_t)&v703[v702 / 8] >= v778) {
            break;
          }
          uint64_t v705 = *(void *)(v31 + v201 + 8 + v702);
          v702 += 8;
          unint64_t v706 = *v704 ^ v705;
          if (v706)
          {
            unint64_t v696 = v702 + (__clz(__rbit64(v706)) >> 3);
            uint64_t v17 = v747;
            unsigned int v711 = v32;
            if (v696 >= 3) {
              goto LABEL_1094;
            }
            goto LABEL_344;
          }
        }
        v700 = &v14[v702 + 8];
        v694 = (_DWORD *)(v31 + v201 + v702 + 8);
        uint64_t v17 = v747;
        if ((unint64_t)v700 < v766) {
          goto LABEL_1083;
        }
      }
      if ((unint64_t)v700 >= v765)
      {
        if ((unint64_t)v700 >= v769) {
          goto LABEL_1093;
        }
LABEL_1091:
        if (*(unsigned __int8 *)v694 == *v700) {
          ++v700;
        }
        goto LABEL_1093;
      }
      if (*(unsigned __int16 *)v694 == *(unsigned __int16 *)v700)
      {
        v700 += 2;
        v694 = (_DWORD *)((char *)v694 + 2);
      }
      if ((unint64_t)v700 < v769) {
        goto LABEL_1091;
      }
LABEL_1093:
      unint64_t v696 = v700 - v14;
      unsigned int v711 = v32;
      if (v696 < 3) {
        goto LABEL_344;
      }
LABEL_1094:
      _DWORD *v10 = v32 - v201 + 2;
      v10[1] = v696;
      if (v696 > v30 || &v14[v696] == (unsigned __int8 *)v769)
      {
        unsigned int v26 = 1;
        unsigned int v711 = v32;
        *(_DWORD *)(v18 + 36) = v32 + 1;
        goto LABEL_434;
      }
      unsigned int v26 = 1;
      unsigned int v711 = v32;
      unint64_t v51 = v696;
LABEL_344:
      *(_DWORD *)(v771 + 4 * v755) = v32;
      if (v42 < v39) {
        goto LABEL_345;
      }
      unint64_t v244 = 0;
      unint64_t v245 = 0;
      int v246 = ~(-1 << v749);
      unsigned int v247 = v32 + 2;
      v775 = v14 + 8;
      uint64_t v248 = v31 + 8;
      while (2)
      {
        if (v245 >= v244) {
          unint64_t v249 = v244;
        }
        else {
          unint64_t v249 = v245;
        }
        uint64_t v250 = v31 + v42;
        unint64_t v251 = (char *)&v14[v249];
        unsigned int v252 = (_DWORD *)(v250 + v249);
        if (v778 <= (unint64_t)&v14[v249])
        {
          uint64_t v255 = &v14[v249];
          if ((unint64_t)v251 < v766)
          {
LABEL_397:
            if (*v252 == *(_DWORD *)v255)
            {
              v255 += 4;
              ++v252;
            }
          }
        }
        else
        {
          unint64_t v253 = *(void *)v251 ^ *(void *)v252;
          if (v253)
          {
            uint64_t v18 = a1;
            uint64_t v10 = v770;
            unint64_t v254 = (__clz(__rbit64(v253)) >> 3) + v249;
            if (v254 <= v51) {
              goto LABEL_414;
            }
            goto LABEL_408;
          }
          unsigned int v260 = (char *)v775 + v249;
          while (1)
          {
            unsigned int v261 = &v260[v253];
            if ((unint64_t)&v260[v253] >= v778) {
              break;
            }
            uint64_t v262 = *(void *)(v248 + v249 + v42 + v253);
            v253 += 8;
            unint64_t v263 = *(void *)v261 ^ v262;
            if (v263)
            {
              unint64_t v264 = __clz(__rbit64(v263));
              uint64_t v18 = a1;
              unsigned int v15 = v763;
              uint64_t v10 = v770;
              unsigned int v14 = v768;
              unint64_t v254 = v253 + (v264 >> 3) + v249;
              if (v254 > v51) {
                goto LABEL_408;
              }
              goto LABEL_414;
            }
          }
          uint64_t v255 = (unsigned __int8 *)v775 + v249 + v253;
          unsigned int v252 = (_DWORD *)(v248 + v249 + v42 + v253);
          uint64_t v10 = v770;
          unsigned int v14 = v768;
          if ((unint64_t)v255 < v766) {
            goto LABEL_397;
          }
        }
        if ((unint64_t)v255 >= v765)
        {
          if ((unint64_t)v255 >= v769) {
            goto LABEL_407;
          }
LABEL_405:
          uint64_t v10 = v770;
          if (*(unsigned __int8 *)v252 == *v255) {
            ++v255;
          }
          goto LABEL_407;
        }
        if (*(unsigned __int16 *)v252 == *(unsigned __int16 *)v255)
        {
          v255 += 2;
          unsigned int v252 = (_DWORD *)((char *)v252 + 2);
        }
        if ((unint64_t)v255 < v769) {
          goto LABEL_405;
        }
LABEL_407:
        uint64_t v18 = a1;
        int64_t v256 = v255 - (unsigned __int8 *)v251;
        unsigned int v15 = v763;
        unint64_t v254 = v256 + v249;
        if (v254 <= v51) {
          goto LABEL_414;
        }
LABEL_408:
        if (v254 > v47 - v42) {
          unsigned int v47 = v42 + v254;
        }
        unsigned int v257 = &v10[2 * v26];
        *unsigned int v257 = v247 - v42;
        v257[1] = v254;
        ++v26;
        BOOL v258 = v254 > 0x1000 || &v14[v254] == (unsigned __int8 *)v769;
        unint64_t v51 = v254;
        if (v258)
        {
          uint64_t v17 = v747;
          goto LABEL_345;
        }
LABEL_414:
        unsigned int v259 = (unsigned int *)(v44 + 8 * (v42 & v34));
        if (*(unsigned __int8 *)(v250 + v254) < v14[v254])
        {
          *unsigned int v45 = v42;
          uint64_t v17 = v747;
          if (v42 <= v35)
          {
            unsigned int v45 = (unsigned int *)&v784;
            goto LABEL_345;
          }
          ++v259;
          unint64_t v245 = v254;
          unsigned int v45 = v259;
          BOOL v118 = v246-- != 0;
          if (!v118) {
            goto LABEL_345;
          }
          goto LABEL_388;
        }
        *unint64_t v46 = v42;
        uint64_t v17 = v747;
        if (v42 > v35)
        {
          unint64_t v244 = v254;
          unint64_t v46 = (unsigned int *)(v44 + 8 * (v42 & v34));
          BOOL v118 = v246-- != 0;
          if (!v118) {
            goto LABEL_345;
          }
LABEL_388:
          unsigned int v42 = *v259;
          if (*v259 < v39) {
            goto LABEL_345;
          }
          continue;
        }
        break;
      }
      unint64_t v46 = (unsigned int *)&v784;
LABEL_345:
      *unint64_t v46 = 0;
      *unsigned int v45 = 0;
      *(_DWORD *)(v18 + 36) = v47 - 8;
LABEL_434:
      unsigned int v780 = v26;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v781, (uint64_t)v10, &v780, v14 - v754, v769 - v14);
      LODWORD(v265) = v780;
      if (v780)
      {
        _OWORD v11[4] = *a3;
        v11[5] = a3[1];
        v11[6] = a3[2];
        _OWORD v11[2] = 0;
        void v11[3] = v23;
        uint64_t v18 = a1;
        int v266 = *(_DWORD *)(a1 + 160);
        if (v266 != 1)
        {
          if (v23 < 0x40) {
            unsigned int v272 = ZSTD_LLcode_LL_Code[v23];
          }
          else {
            unsigned int v272 = 50 - __clz(v23);
          }
          uint64_t v273 = 4 * v272;
          int v274 = *(_DWORD *)(a1 + 148);
          int v275 = v274 + (*(unsigned int *)((char *)LL_bits + v273) << 8);
          unsigned int v276 = *(_DWORD **)(a1 + 88);
          LODWORD(v273) = *(_DWORD *)((char *)v276 + v273) + 1;
          unsigned int v277 = __clz(v273);
          unsigned int v268 = v275 - ((v273 << 8 >> (v277 ^ 0x1F)) + ((v277 ^ 0x1F) << 8));
          unsigned int *v11 = v268;
          uint64_t v269 = (v265 - 1);
          unsigned int v270 = v10[2 * v269 + 1];
          if (v270 <= v735)
          {
            unsigned int v280 = *v276 + 1;
            unsigned int v281 = __clz(v280) ^ 0x1F;
            int v271 = v274 - ((v280 << 8 >> v281) + (v281 << 8));
            goto LABEL_446;
          }
LABEL_444:
          unsigned int v278 = 0;
          unsigned int v279 = v10[2 * v269];
          goto LABEL_997;
        }
        unsigned int v267 = __clz(v23 + 1);
        unsigned int v268 = ((v23 + 1) << 8 >> (v267 ^ 0x1F)) + ((v267 ^ 0x1F) << 8);
        unsigned int *v11 = v268;
        uint64_t v269 = (v265 - 1);
        unsigned int v270 = v10[2 * v269 + 1];
        if (v270 > v735) {
          goto LABEL_444;
        }
        int v271 = 256;
LABEL_446:
        int v282 = v11 + 14;
        unint64_t v283 = (v763 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v282 - 7) = 0x40000000;
          *int v282 = 0x40000000;
          v282 += 14;
          v283 -= 2;
        }
        while (v283);
        if (v763 - 1 != ((v763 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          uint64_t v284 = v709;
          unsigned int v285 = v710;
          do
          {
            *unsigned int v285 = 0x40000000;
            v285 += 7;
            --v284;
          }
          while (v284);
        }
        uint64_t v286 = 0;
        unsigned int v287 = v271 + v268;
        if (v265 <= 1) {
          uint64_t v265 = 1;
        }
        else {
          uint64_t v265 = v265;
        }
        unsigned int v288 = v15;
        do
        {
          uint64_t v289 = &v10[2 * v286];
          unsigned int v290 = v289[1];
          if (v288 <= v290)
          {
            unsigned int v291 = *v289;
            uint64_t v292 = __clz(v291 + 1) ^ 0x1F;
            if (v266 == 1)
            {
              unsigned int v293 = (v288 << 8) - 512;
              do
              {
                unsigned int v294 = __clz(v288 - 2);
                unsigned int v295 = &v11[7 * v288];
                v295[2] = v288;
                v295[3] = v23;
                *unsigned int v295 = (v293 >> (v294 ^ 0x1F)) + (((v294 ^ 0x1F) + v292) << 8) + v287 + 4096;
                v295[1] = v291;
                ++v288;
                v293 += 256;
              }
              while (v288 <= v290);
            }
            else
            {
              uint64_t v297 = *(void *)(a1 + 96);
              uint64_t v296 = *(void *)(a1 + 104);
              int v298 = *(_DWORD *)(a1 + 156) + *(_DWORD *)(a1 + 152) + 51;
              do
              {
                unsigned int v306 = v288 - 3;
                if (v288 - 3 < 0x80) {
                  unsigned int v299 = ZSTD_MLcode_ML_Code[v306];
                }
                else {
                  unsigned int v299 = 67 - __clz(v306);
                }
                unsigned int v300 = *(_DWORD *)(v296 + 4 * v292) + 1;
                unsigned int v301 = __clz(v300);
                uint64_t v302 = 4 * v299;
                int v303 = *(unsigned int *)((char *)ML_bits + v302);
                LODWORD(v302) = *(_DWORD *)(v297 + v302) + 1;
                unsigned int v304 = __clz(v302) ^ 0x1F;
                LODWORD(v302) = v287
                              + v298
                              - (v300 << 8 >> (v301 ^ 0x1F))
                              - (v302 << 8 >> v304)
                              + ((v292 + v303 - (v301 ^ 0x1F) - v304) << 8);
                unsigned int v305 = &v11[7 * v288];
                v305[2] = v288;
                v305[3] = v23;
                *unsigned int v305 = v302;
                v305[1] = v291;
                ++v288;
              }
              while (v288 <= v290);
            }
          }
          ++v286;
        }
        while (v286 != v265);
        LODWORD(v307) = v288 - 1;
        if (v288 == 1)
        {
LABEL_993:
          unint64_t v628 = &v11[7 * v307];
          unsigned int v279 = v628[1];
          unsigned int v728 = *v628;
          unsigned int v270 = v628[2];
          unsigned int v23 = v628[3];
          uint64_t v785 = *((void *)v628 + 2);
          unsigned int v786 = v628[6];
          if (v307 >= v23 + v270) {
            unsigned int v278 = v307 - (v23 + v270);
          }
          else {
            unsigned int v278 = 0;
          }
          uint64_t v17 = v747;
          if (!v270) {
            goto LABEL_1081;
          }
          goto LABEL_997;
        }
        v725 = v14 + 8;
        int v308 = v14 + 1;
        unsigned int v309 = 1;
        while (2)
        {
          unsigned int v310 = v309 - 1;
          unsigned int v311 = &v11[7 * v309 - 7];
          if (v311[2]) {
            unsigned int v312 = 1u;
          }
          else {
            unsigned int v312 = v11[7 * v310 + 3] + 1;
          }
          uint64_t v313 = v309;
          uint64_t v314 = &v14[v309];
          unsigned int v315 = *v311;
          int v316 = *(_DWORD *)(v18 + 160);
          if (*(_DWORD *)(v18 + 176) == 2)
          {
            unsigned int v317 = v315 + 2048;
            if (v316 != 1)
            {
              if (v312 >= 0x40) {
                goto LABEL_477;
              }
LABEL_483:
              unsigned int v318 = ZSTD_LLcode_LL_Code[v312];
              unsigned int v319 = v312 - 1;
              if (v312 - 1 >= 0x40) {
                goto LABEL_484;
              }
LABEL_478:
              unsigned int v320 = ZSTD_LLcode_LL_Code[v319];
              goto LABEL_485;
            }
LABEL_481:
            unsigned int v321 = __clz(v312 + 1);
            int v322 = ((v312 + 1) << 8 >> (v321 ^ 0x1F)) + ((v321 ^ 0x1F) << 8);
            unsigned int v323 = __clz(v312) ^ 0x1F;
            int v324 = -((v312 << 8 >> v323) + (v323 << 8));
          }
          else
          {
            if (v316 == 1)
            {
              unsigned int v317 = v315 + 1536;
              goto LABEL_481;
            }
            unsigned int v325 = *(_DWORD *)(*(void *)(v18 + 80) + 4 * *(v314 - 1)) + 1;
            unsigned int v326 = __clz(v325);
            unsigned int v317 = *(_DWORD *)(v18 + 144) - ((v325 << 8 >> (v326 ^ 0x1F)) + ((v326 ^ 0x1F) << 8)) + v315;
            if (v312 < 0x40) {
              goto LABEL_483;
            }
LABEL_477:
            unsigned int v318 = 50 - __clz(v312);
            unsigned int v319 = v312 - 1;
            if (v312 - 1 < 0x40) {
              goto LABEL_478;
            }
LABEL_484:
            unsigned int v320 = 50 - __clz(v319);
LABEL_485:
            uint64_t v327 = 4 * v318;
            int v328 = *(unsigned int *)((char *)LL_bits + v327);
            int v329 = *(_DWORD *)(v18 + 148);
            uint64_t v330 = *(void *)(v18 + 88);
            LODWORD(v327) = *(_DWORD *)(v330 + v327) + 1;
            unsigned int v331 = __clz(v327) ^ 0x1F;
            int v322 = v329 - (v327 << 8 >> v331) + ((v328 - v331) << 8);
            uint64_t v332 = 4 * v320;
            int v333 = *(unsigned int *)((char *)LL_bits + v332);
            LODWORD(v332) = *(_DWORD *)(v330 + v332) + 1;
            LODWORD(v330) = __clz(v332) ^ 0x1F;
            int v324 = (v332 << 8 >> v330) - v329 + ((v330 - v333) << 8);
          }
          signed int v334 = v317 + v322 + v324;
          unsigned int v335 = &v11[7 * v313];
          signed int v338 = *v335;
          BOOL v336 = v335 + 2;
          int v337 = v338;
          if (v334 <= v338)
          {
            uint64_t v345 = &v11[7 * v313];
            v345[1] = 0;
            v345[2] = 0;
            v345[3] = v312;
            *uint64_t v345 = v334;
            int v337 = v334;
LABEL_491:
            int v346 = 0;
            unsigned int v347 = &v11[7 * v313];
            unint64_t v348 = &v11[7 * v310];
            *((void *)v347 + 2) = *((void *)v348 + 2);
            v347[6] = v348[6];
            int v349 = 1;
            if ((unint64_t)v314 <= v764) {
              goto LABEL_505;
            }
LABEL_470:
            unsigned int v309 = v313 + 1;
            ++v308;
            if ((int)v313 + 1 > v307) {
              goto LABEL_993;
            }
            continue;
          }
          break;
        }
        if (!*v336) {
          goto LABEL_491;
        }
        uint64_t v339 = &v11[7 * (v313 - *v336) + 4];
        unsigned int v340 = v11[7 * v313 + 1];
        if (v340 < 3)
        {
          if (v11[7 * v313 + 3]) {
            unsigned int v350 = v11[7 * v313 + 1];
          }
          else {
            unsigned int v350 = v340 + 1;
          }
          if (v350)
          {
            if (v350 == 3)
            {
              unint64_t v342 = *v339;
              unsigned int v344 = v342 - 1;
            }
            else
            {
              unsigned int v344 = v339[v350];
              unint64_t v342 = *v339;
            }
            BOOL v645 = v350 > 1;
            uint64_t v352 = 2;
            if (v645) {
              uint64_t v352 = 1;
            }
            uint64_t v341 = &v339[v352];
          }
          else
          {
            unint64_t v351 = *(void *)v339;
            uint64_t v341 = &v11[7 * (v313 - *v336) + 6];
            unsigned int v344 = v351;
            unint64_t v342 = HIDWORD(v351);
          }
        }
        else
        {
          unsigned int v343 = *v339;
          uint64_t v341 = &v11[7 * (v313 - *v336) + 5];
          unint64_t v342 = v343;
          unsigned int v344 = v340 - 2;
        }
        int v349 = 0;
        unsigned int v353 = *v341;
        unint64_t v354 = v344 | (v342 << 32);
        unint64_t v355 = &v11[7 * v313];
        *((void *)v355 + 2) = v354;
        v355[6] = v353;
        int v346 = 1;
        if ((unint64_t)v314 > v764) {
          goto LABEL_470;
        }
LABEL_505:
        if (v313 == v307) {
          goto LABEL_993;
        }
        int v762 = v308;
        if (v349)
        {
          unsigned int v23 = v11[7 * v313 + 3];
          if (*(_DWORD *)(v18 + 160) != 1) {
            goto LABEL_508;
          }
LABEL_510:
          int v358 = 256;
        }
        else
        {
          unsigned int v23 = 0;
          if (*(_DWORD *)(v18 + 160) == 1) {
            goto LABEL_510;
          }
LABEL_508:
          unsigned int v356 = **(_DWORD **)(v18 + 88) + 1;
          unsigned int v357 = __clz(v356) ^ 0x1F;
          int v358 = *(_DWORD *)(v18 + 148) - ((v356 << 8 >> v357) + (v357 << 8));
        }
        int v748 = v358;
        int v753 = v337;
        v734 = v336;
        unsigned int v780 = 0;
        uint64_t v359 = *(void *)(v18 + 8);
        uint64_t v360 = *(unsigned int *)(v18 + 36);
        if (v359 + v360 > (unint64_t)v314)
        {
          unsigned int v361 = 0;
          LODWORD(v362) = v769;
          unsigned int v363 = v11 + 7;
          goto LABEL_831;
        }
        unsigned int v729 = v346;
        int v364 = *(_DWORD *)(v18 + 208);
        v776 = v314;
        for (unsigned int j = v314 - v359; v360 < j; LODWORD(v360) = v366 + v360)
        {
          int v366 = ZSTD_insertBt1(v18, (void *)(v359 + v360), v769, v364, 0);
          uint64_t v18 = a1;
        }
        unint64_t v367 = &v11[7 * v313 + 4];
        *(_DWORD *)(v18 + 36) = j;
        if ((v364 - 6) < 2)
        {
          unsigned int v361 = 0;
          if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
            unsigned int v399 = 4095;
          }
          else {
            unsigned int v399 = *(_DWORD *)(v18 + 212);
          }
          uint64_t v400 = *(void *)(v18 + 8);
          int v401 = v776 - v400;
          unint64_t v402 = v776 + 4;
          int v713 = *(_DWORD *)(v18 + 204);
          unint64_t v717 = (0xCF1BBCDCBF9B0000 * *(void *)v776) >> -(char)*(_DWORD *)(v18 + 200);
          uint64_t v721 = *(void *)(v18 + 48);
          unsigned int v403 = *(_DWORD *)(v721 + 4 * v717);
          int v404 = -1 << (*(_DWORD *)(v18 + 196) - 1);
          int v405 = ~v404;
          unsigned int v406 = v776 - v400 + v404 + 1;
          if ((int)v776 - (int)v400 < ~v404) {
            unsigned int v406 = 0;
          }
          unsigned int v737 = v406;
          int v407 = *(_DWORD *)(v18 + 24);
          unsigned int v408 = 1 << *(_DWORD *)(v18 + 192);
          if (v401 - *(_DWORD *)(v18 + 28) > v408 && *(_DWORD *)(v18 + 32) == 0) {
            unsigned int v410 = v401 - v408;
          }
          else {
            unsigned int v410 = *(_DWORD *)(v18 + 28);
          }
          if (v410 <= 1) {
            int v411 = 1;
          }
          else {
            int v411 = v410;
          }
          unsigned int v741 = v411;
          uint64_t v412 = *(void *)(v18 + 64);
          int v413 = (unsigned int *)(v412 + 8 * (v401 & ~v404));
          int v745 = v413 + 1;
          int v414 = v401 + 9;
          int v784 = 0;
          unint64_t v415 = (v763 - 1);
          if (v729) {
            unint64_t v416 = 4;
          }
          else {
            unint64_t v416 = 3;
          }
          unsigned int v417 = v401 - v407;
          uint64_t v418 = v729;
          unsigned int v419 = (char *)v769;
          uint64_t v10 = v770;
          unsigned int v363 = v11 + 7;
          while (1)
          {
            if (v418 == 3)
            {
              unsigned int v420 = *v367 - 1;
              if (*v367 - 2 >= v417) {
                goto LABEL_589;
              }
            }
            else
            {
              unsigned int v420 = v367[v418];
              if (v420 - 1 >= v417) {
                goto LABEL_589;
              }
            }
            if (v401 - v420 < v410 || *(_DWORD *)v776 != *(_DWORD *)&v776[-v420])
            {
              uint64_t v10 = v770;
              goto LABEL_589;
            }
            unsigned int v422 = (void *)((char *)v402 - v420);
            if (v778 <= (unint64_t)v402) {
              break;
            }
            uint64_t v423 = v776 + 4;
            unint64_t v424 = *v402 ^ *v422;
            if (!v424)
            {
              do
              {
                ++v422;
                if ((unint64_t)++v423 >= v778) {
                  goto LABEL_608;
                }
                unint64_t v427 = *v423 ^ *v422;
              }
              while (!v427);
              uint64_t v10 = v770;
              unsigned int v425 = v423 + (__clz(__rbit64(v427)) >> 3) - v776;
              unint64_t v426 = v425;
              if (v415 >= v425) {
                goto LABEL_589;
              }
LABEL_616:
              uint32x4_t v428 = &v10[2 * v361];
              *uint32x4_t v428 = v418 + ((int)(v729 << 31) >> 31);
              v428[1] = v425;
              ++v361;
              if (v425 > v399) {
                goto LABEL_627;
              }
              unint64_t v415 = v426;
              if (&v776[v426] == (unsigned __int8 *)v769) {
                goto LABEL_627;
              }
              goto LABEL_589;
            }
            uint64_t v10 = v770;
            unsigned int v425 = (__clz(__rbit64(v424)) >> 3) + 4;
            unint64_t v426 = v425;
            if (v415 < v425) {
              goto LABEL_616;
            }
LABEL_589:
            if (++v418 >= v416)
            {
              *(_DWORD *)(v721 + 4 * v717) = v401;
              if (v403 < v741)
              {
                uint64_t v429 = a1;
                goto LABEL_626;
              }
              unint64_t v491 = 0;
              unint64_t v492 = 0;
              int v493 = ~(-1 << v713);
              int v494 = v401 + 2;
              unsigned int v730 = (char *)v725 + v313;
              uint64_t v495 = v400 + 8;
              while (1)
              {
                unint64_t v496 = v492 >= v491 ? v491 : v492;
                uint64_t v497 = v400 + v403;
                unint64_t v498 = &v776[v496];
                unint64_t v499 = (void *)(v497 + v496);
                if (v778 <= (unint64_t)&v776[v496]) {
                  break;
                }
                unint64_t v500 = *(void *)v498 ^ *v499;
                if (v500)
                {
                  uint64_t v429 = a1;
                  unint64_t v501 = (__clz(__rbit64(v500)) >> 3) + v496;
                  if (v501 <= v415) {
                    goto LABEL_751;
                  }
                  goto LABEL_764;
                }
                uint64_t v507 = 0;
                uint64_t v508 = &v730[v496];
                do
                {
                  unint64_t v509 = &v508[v507];
                  if ((unint64_t)&v508[v507] >= v778)
                  {
                    unint64_t v503 = &v730[v496 + v507];
                    unint64_t v499 = (void *)(v495 + v496 + v403 + v507);
                    unsigned int v419 = (char *)v769;
                    uint64_t v10 = v770;
                    unsigned int v363 = v11 + 7;
                    if ((unint64_t)v503 >= v766) {
                      goto LABEL_755;
                    }
                    goto LABEL_753;
                  }
                  uint64_t v510 = *(void *)(v495 + v496 + v403 + v507);
                  v507 += 8;
                  unint64_t v511 = *(void *)v509 ^ v510;
                }
                while (!v511);
                uint64_t v512 = v507 + (__clz(__rbit64(v511)) >> 3);
                unsigned int v419 = (char *)v769;
                uint64_t v10 = v770;
                uint64_t v429 = a1;
                unsigned int v363 = v11 + 7;
                unint64_t v501 = v512 + v496;
                if (v501 <= v415)
                {
LABEL_751:
                  unint64_t v502 = v776;
                  goto LABEL_770;
                }
LABEL_764:
                if (v501 > v414 - v403) {
                  int v414 = v403 + v501;
                }
                int v504 = &v10[2 * v361];
                *int v504 = v494 - v403;
                v504[1] = v501;
                ++v361;
                unint64_t v502 = v776;
                BOOL v505 = v501 > 0x1000 || &v776[v501] == (unsigned __int8 *)v419;
                unint64_t v415 = v501;
                if (v505) {
                  goto LABEL_626;
                }
LABEL_770:
                unint64_t v506 = (unsigned int *)(v412 + 8 * (v403 & v405));
                if (*(unsigned __int8 *)(v497 + v501) >= *((unsigned __int8 *)v502 + v501))
                {
                  *int v745 = v403;
                  if (v403 <= v737)
                  {
                    int v745 = (unsigned int *)&v784;
                    goto LABEL_626;
                  }
                  unint64_t v491 = v501;
                  int v745 = (unsigned int *)(v412 + 8 * (v403 & v405));
                  BOOL v118 = v493-- != 0;
                  if (v118) {
                    goto LABEL_744;
                  }
LABEL_626:
                  *int v745 = 0;
                  *int v413 = 0;
                  *(_DWORD *)(v429 + 36) = v414 - 8;
LABEL_627:
                  unsigned int v15 = v763;
                  LODWORD(v362) = v419;
                  goto LABEL_830;
                }
                *int v413 = v403;
                if (v403 <= v737)
                {
                  int v413 = (unsigned int *)&v784;
                  goto LABEL_626;
                }
                ++v506;
                unint64_t v492 = v501;
                int v413 = v506;
                BOOL v118 = v493-- != 0;
                if (!v118) {
                  goto LABEL_626;
                }
LABEL_744:
                unsigned int v403 = *v506;
                if (*v506 < v741) {
                  goto LABEL_626;
                }
              }
              unint64_t v503 = (char *)&v776[v496];
              if ((unint64_t)v498 >= v766) {
                goto LABEL_755;
              }
LABEL_753:
              if (*(_DWORD *)v499 == *(_DWORD *)v503)
              {
                v503 += 4;
                unint64_t v499 = (void *)((char *)v499 + 4);
              }
LABEL_755:
              if ((unint64_t)v503 >= v765)
              {
                if (v503 >= v419) {
                  goto LABEL_763;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v499 == *(unsigned __int16 *)v503)
                {
                  v503 += 2;
                  unint64_t v499 = (void *)((char *)v499 + 2);
                }
                if (v503 >= v419)
                {
LABEL_763:
                  uint64_t v429 = a1;
                  unint64_t v501 = v503 - (char *)v776;
                  if (v501 <= v415) {
                    goto LABEL_751;
                  }
                  goto LABEL_764;
                }
              }
              uint64_t v10 = v770;
              if (*(unsigned __int8 *)v499 == *v503) {
                ++v503;
              }
              goto LABEL_763;
            }
          }
          uint64_t v423 = v776 + 4;
LABEL_608:
          if ((unint64_t)v423 >= v766)
          {
            if ((unint64_t)v423 >= v765) {
              goto LABEL_612;
            }
          }
          else
          {
            if (*(_DWORD *)v422 == *(_DWORD *)v423)
            {
              uint64_t v423 = (void *)((char *)v423 + 4);
              unsigned int v422 = (void *)((char *)v422 + 4);
            }
            if ((unint64_t)v423 >= v765)
            {
LABEL_612:
              if ((unint64_t)v423 < v769) {
                goto LABEL_613;
              }
              goto LABEL_615;
            }
          }
          if (*(unsigned __int16 *)v422 == *(unsigned __int16 *)v423)
          {
            uint64_t v423 = (void *)((char *)v423 + 2);
            unsigned int v422 = (void *)((char *)v422 + 2);
          }
          if ((unint64_t)v423 < v769)
          {
LABEL_613:
            if (*(unsigned __int8 *)v422 == *(unsigned __int8 *)v423) {
              LODWORD(v423) = v423 + 1;
            }
          }
LABEL_615:
          uint64_t v10 = v770;
          unsigned int v425 = v423 - v776;
          unint64_t v426 = v425;
          if (v415 < v425) {
            goto LABEL_616;
          }
          goto LABEL_589;
        }
        uint64_t v362 = (unsigned __int8 *)v769;
        uint64_t v10 = v770;
        unsigned int v363 = v11 + 7;
        if (v364 == 5)
        {
          unsigned int v361 = 0;
          if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
            unsigned int v430 = 4095;
          }
          else {
            unsigned int v430 = *(_DWORD *)(v18 + 212);
          }
          uint64_t v742 = *(void *)(v18 + 8);
          int v431 = v776 - v742;
          unsigned int v432 = v776 + 4;
          int v714 = *(_DWORD *)(v18 + 204);
          unint64_t v718 = (0xCF1BBCDCBB000000 * *(void *)v776) >> -(char)*(_DWORD *)(v18 + 200);
          uint64_t v722 = *(void *)(v18 + 48);
          unsigned int v433 = *(_DWORD *)(v722 + 4 * v718);
          int v434 = -1 << (*(_DWORD *)(v18 + 196) - 1);
          int v435 = ~v434;
          unsigned int v436 = v776 - v742 + v434 + 1;
          if ((int)v776 - (int)v742 < ~v434) {
            unsigned int v436 = 0;
          }
          unsigned int v738 = v436;
          int v437 = *(_DWORD *)(v18 + 24);
          unsigned int v438 = 1 << *(_DWORD *)(v18 + 192);
          if (v431 - *(_DWORD *)(v18 + 28) > v438 && *(_DWORD *)(v18 + 32) == 0) {
            unsigned int v440 = v431 - v438;
          }
          else {
            unsigned int v440 = *(_DWORD *)(v18 + 28);
          }
          if (v440 <= 1) {
            unsigned int v441 = 1;
          }
          else {
            unsigned int v441 = v440;
          }
          uint64_t v442 = *(void *)(v18 + 64);
          int v443 = (unsigned int *)(v442 + 8 * (v431 & ~v434));
          v746 = v443 + 1;
          int v444 = v431 + 9;
          int v784 = 0;
          if (v729) {
            unint64_t v445 = 4;
          }
          else {
            unint64_t v445 = 3;
          }
          unsigned int v446 = v431 - v437;
          uint64_t v447 = v729;
          unint64_t v448 = (v763 - 1);
          while (1)
          {
            if (v447 == 3)
            {
              unsigned int v449 = *v367 - 1;
              if (*v367 - 2 >= v446) {
                goto LABEL_646;
              }
            }
            else
            {
              unsigned int v449 = v367[v447];
              if (v449 - 1 >= v446) {
                goto LABEL_646;
              }
            }
            if (v431 - v449 < v440 || *(_DWORD *)v776 != *(_DWORD *)&v776[-v449])
            {
              uint64_t v10 = v770;
              goto LABEL_646;
            }
            v451 = (void *)((char *)v432 - v449);
            if (v778 <= (unint64_t)v432) {
              break;
            }
            int v452 = v776 + 4;
            unint64_t v453 = *v432 ^ *v451;
            if (!v453)
            {
              do
              {
                ++v451;
                if ((unint64_t)++v452 >= v778) {
                  goto LABEL_665;
                }
                unint64_t v456 = *v452 ^ *v451;
              }
              while (!v456);
              uint64_t v10 = v770;
              unsigned int v454 = v452 + (__clz(__rbit64(v456)) >> 3) - v776;
              unint64_t v455 = v454;
              if (v448 >= v454) {
                goto LABEL_646;
              }
LABEL_673:
              uint64_t v457 = &v10[2 * v361];
              *uint64_t v457 = v447 + ((int)(v729 << 31) >> 31);
              v457[1] = v454;
              ++v361;
              if (v454 > v430) {
                goto LABEL_829;
              }
              unint64_t v448 = v455;
              if (&v776[v455] == (unsigned __int8 *)v769) {
                goto LABEL_829;
              }
              goto LABEL_646;
            }
            uint64_t v10 = v770;
            unsigned int v454 = (__clz(__rbit64(v453)) >> 3) + 4;
            unint64_t v455 = v454;
            if (v448 < v454) {
              goto LABEL_673;
            }
LABEL_646:
            if (++v447 >= v445)
            {
              *(_DWORD *)(v722 + 4 * v718) = v431;
              if (v433 < v441)
              {
LABEL_827:
                uint64_t v523 = a1;
                goto LABEL_828;
              }
              unint64_t v513 = 0;
              unint64_t v514 = 0;
              int v515 = ~(-1 << v714);
              int v516 = v431 + 2;
              unsigned int v731 = (char *)v725 + v313;
              uint64_t v517 = v742 + 8;
              while (1)
              {
                unint64_t v518 = v514 >= v513 ? v513 : v514;
                uint64_t v519 = v742 + v433;
                v520 = &v776[v518];
                uint64_t v521 = (void *)(v519 + v518);
                if (v778 <= (unint64_t)&v776[v518]) {
                  break;
                }
                unint64_t v522 = *(void *)v520 ^ *v521;
                if (v522)
                {
                  uint64_t v523 = a1;
                  unint64_t v524 = (__clz(__rbit64(v522)) >> 3) + v518;
                  if (v524 <= v448) {
                    goto LABEL_793;
                  }
                  goto LABEL_806;
                }
                uint64_t v530 = 0;
                unint64_t v531 = &v731[v518];
                do
                {
                  v532 = &v531[v530];
                  if ((unint64_t)&v531[v530] >= v778)
                  {
                    unsigned int v526 = &v731[v518 + v530];
                    uint64_t v521 = (void *)(v517 + v518 + v433 + v530);
                    uint64_t v362 = (unsigned __int8 *)v769;
                    uint64_t v10 = v770;
                    unsigned int v363 = v11 + 7;
                    if ((unint64_t)v526 >= v766) {
                      goto LABEL_797;
                    }
                    goto LABEL_795;
                  }
                  uint64_t v533 = *(void *)(v517 + v518 + v433 + v530);
                  v530 += 8;
                  unint64_t v534 = *(void *)v532 ^ v533;
                }
                while (!v534);
                uint64_t v535 = v530 + (__clz(__rbit64(v534)) >> 3);
                uint64_t v362 = (unsigned __int8 *)v769;
                uint64_t v10 = v770;
                uint64_t v523 = a1;
                unsigned int v363 = v11 + 7;
                unint64_t v524 = v535 + v518;
                if (v524 <= v448)
                {
LABEL_793:
                  int v525 = v776;
                  goto LABEL_812;
                }
LABEL_806:
                if (v524 > v444 - v433) {
                  int v444 = v433 + v524;
                }
                unint64_t v527 = &v10[2 * v361];
                *unint64_t v527 = v516 - v433;
                v527[1] = v524;
                ++v361;
                int v525 = v776;
                BOOL v528 = v524 > 0x1000 || &v776[v524] == v362;
                unint64_t v448 = v524;
                if (v528) {
                  goto LABEL_828;
                }
LABEL_812:
                long long v529 = (unsigned int *)(v442 + 8 * (v433 & v435));
                if (*(unsigned __int8 *)(v519 + v524) >= *((unsigned __int8 *)v525 + v524))
                {
                  unsigned int *v746 = v433;
                  if (v433 <= v738) {
                    goto LABEL_964;
                  }
                  unint64_t v513 = v524;
                  v746 = (unsigned int *)(v442 + 8 * (v433 & v435));
                  BOOL v118 = v515-- != 0;
                  if (!v118) {
                    goto LABEL_828;
                  }
                }
                else
                {
                  *int v443 = v433;
                  if (v433 <= v738)
                  {
LABEL_965:
                    int v443 = (unsigned int *)&v784;
                    goto LABEL_828;
                  }
                  ++v529;
                  unint64_t v514 = v524;
                  int v443 = v529;
                  BOOL v118 = v515-- != 0;
                  if (!v118) {
                    goto LABEL_828;
                  }
                }
                unsigned int v433 = *v529;
                if (*v529 < v441) {
                  goto LABEL_828;
                }
              }
              unsigned int v526 = (char *)&v776[v518];
              if ((unint64_t)v520 >= v766) {
                goto LABEL_797;
              }
LABEL_795:
              if (*(_DWORD *)v521 == *(_DWORD *)v526)
              {
                v526 += 4;
                uint64_t v521 = (void *)((char *)v521 + 4);
              }
LABEL_797:
              if ((unint64_t)v526 >= v765)
              {
                if (v526 >= (char *)v362) {
                  goto LABEL_805;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v521 == *(unsigned __int16 *)v526)
                {
                  v526 += 2;
                  uint64_t v521 = (void *)((char *)v521 + 2);
                }
                if (v526 >= (char *)v362)
                {
LABEL_805:
                  uint64_t v523 = a1;
                  unint64_t v524 = v526 - (char *)v776;
                  if (v524 <= v448) {
                    goto LABEL_793;
                  }
                  goto LABEL_806;
                }
              }
              uint64_t v10 = v770;
              if (*(unsigned __int8 *)v521 == *v526) {
                ++v526;
              }
              goto LABEL_805;
            }
          }
          int v452 = v776 + 4;
LABEL_665:
          if ((unint64_t)v452 >= v766)
          {
            if ((unint64_t)v452 >= v765) {
              goto LABEL_669;
            }
          }
          else
          {
            if (*(_DWORD *)v451 == *(_DWORD *)v452)
            {
              int v452 = (void *)((char *)v452 + 4);
              v451 = (void *)((char *)v451 + 4);
            }
            if ((unint64_t)v452 >= v765)
            {
LABEL_669:
              if ((unint64_t)v452 >= v769) {
                goto LABEL_672;
              }
              goto LABEL_670;
            }
          }
          if (*(unsigned __int16 *)v451 == *(unsigned __int16 *)v452)
          {
            int v452 = (void *)((char *)v452 + 2);
            v451 = (void *)((char *)v451 + 2);
          }
          if ((unint64_t)v452 >= v769)
          {
LABEL_672:
            uint64_t v10 = v770;
            unsigned int v454 = v452 - v776;
            unint64_t v455 = v454;
            if (v448 < v454) {
              goto LABEL_673;
            }
            goto LABEL_646;
          }
LABEL_670:
          if (*(unsigned __int8 *)v451 == *(unsigned __int8 *)v452) {
            LODWORD(v452) = v452 + 1;
          }
          goto LABEL_672;
        }
        if (v364 != 3)
        {
          unsigned int v361 = 0;
          if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
            unsigned int v458 = 4095;
          }
          else {
            unsigned int v458 = *(_DWORD *)(v18 + 212);
          }
          uint64_t v743 = *(void *)(v18 + 8);
          int v459 = v776 - v743;
          uint64_t v460 = v776 + 4;
          int v715 = *(_DWORD *)(v18 + 204);
          uint64_t v719 = (-1640531535 * *(_DWORD *)v776) >> -(char)*(_DWORD *)(v18 + 200);
          uint64_t v723 = *(void *)(v18 + 48);
          unsigned int v461 = *(_DWORD *)(v723 + 4 * v719);
          int v462 = -1 << (*(_DWORD *)(v18 + 196) - 1);
          int v463 = ~v462;
          unsigned int v464 = v776 - v743 + v462 + 1;
          if ((int)v776 - (int)v743 < ~v462) {
            unsigned int v464 = 0;
          }
          unsigned int v739 = v464;
          int v465 = *(_DWORD *)(v18 + 24);
          unsigned int v466 = 1 << *(_DWORD *)(v18 + 192);
          if (v459 - *(_DWORD *)(v18 + 28) > v466 && *(_DWORD *)(v18 + 32) == 0) {
            unsigned int v468 = v459 - v466;
          }
          else {
            unsigned int v468 = *(_DWORD *)(v18 + 28);
          }
          if (v468 <= 1) {
            unsigned int v469 = 1;
          }
          else {
            unsigned int v469 = v468;
          }
          uint64_t v470 = *(void *)(v18 + 64);
          int v443 = (unsigned int *)(v470 + 8 * (v459 & ~v462));
          v746 = v443 + 1;
          int v444 = v459 + 9;
          int v784 = 0;
          if (v729) {
            unint64_t v471 = 4;
          }
          else {
            unint64_t v471 = 3;
          }
          unsigned int v472 = v459 - v465;
          uint64_t v473 = v729;
          unint64_t v474 = (v763 - 1);
          while (1)
          {
            if (v473 == 3)
            {
              unsigned int v475 = *v367 - 1;
              if (*v367 - 2 >= v472) {
                goto LABEL_699;
              }
            }
            else
            {
              unsigned int v475 = v367[v473];
              if (v475 - 1 >= v472) {
                goto LABEL_699;
              }
            }
            if (v459 - v475 < v468 || *(_DWORD *)v776 != *(_DWORD *)&v776[-v475])
            {
              uint64_t v10 = v770;
              goto LABEL_699;
            }
            unint64_t v477 = (void *)((char *)v460 - v475);
            if (v778 <= (unint64_t)v460) {
              break;
            }
            signed int v478 = v776 + 4;
            unint64_t v479 = *v460 ^ *v477;
            if (!v479)
            {
              do
              {
                ++v477;
                if ((unint64_t)++v478 >= v778) {
                  goto LABEL_718;
                }
                unint64_t v482 = *v478 ^ *v477;
              }
              while (!v482);
              uint64_t v10 = v770;
              unsigned int v480 = v478 + (__clz(__rbit64(v482)) >> 3) - v776;
              unint64_t v481 = v480;
              if (v474 >= v480) {
                goto LABEL_699;
              }
LABEL_726:
              v483 = &v10[2 * v361];
              _DWORD *v483 = v473 + ((int)(v729 << 31) >> 31);
              v483[1] = v480;
              ++v361;
              if (v480 > v458) {
                goto LABEL_829;
              }
              unint64_t v474 = v481;
              if (&v776[v481] == (unsigned __int8 *)v769) {
                goto LABEL_829;
              }
              goto LABEL_699;
            }
            uint64_t v10 = v770;
            unsigned int v480 = (__clz(__rbit64(v479)) >> 3) + 4;
            unint64_t v481 = v480;
            if (v474 < v480) {
              goto LABEL_726;
            }
LABEL_699:
            if (++v473 >= v471)
            {
              *(_DWORD *)(v723 + 4 * v719) = v459;
              if (v461 < v469) {
                goto LABEL_827;
              }
              unint64_t v578 = 0;
              unint64_t v579 = 0;
              int v580 = ~(-1 << v715);
              int v581 = v459 + 2;
              uint64_t v732 = (char *)v725 + v313;
              uint64_t v582 = v743 + 8;
              while (1)
              {
                unint64_t v583 = v579 >= v578 ? v578 : v579;
                uint64_t v584 = v743 + v461;
                unsigned int v585 = &v776[v583];
                unsigned int v586 = (void *)(v584 + v583);
                if (v778 <= (unint64_t)&v776[v583]) {
                  break;
                }
                unint64_t v587 = *(void *)v585 ^ *v586;
                if (v587)
                {
                  uint64_t v523 = a1;
                  unint64_t v588 = (__clz(__rbit64(v587)) >> 3) + v583;
                  if (v588 <= v474) {
                    goto LABEL_883;
                  }
                  goto LABEL_896;
                }
                uint64_t v594 = 0;
                long long v595 = &v732[v583];
                do
                {
                  uint64_t v596 = &v595[v594];
                  if ((unint64_t)&v595[v594] >= v778)
                  {
                    v590 = &v732[v583 + v594];
                    unsigned int v586 = (void *)(v582 + v583 + v461 + v594);
                    uint64_t v362 = (unsigned __int8 *)v769;
                    uint64_t v10 = v770;
                    unsigned int v363 = v11 + 7;
                    if ((unint64_t)v590 >= v766) {
                      goto LABEL_887;
                    }
                    goto LABEL_885;
                  }
                  uint64_t v597 = *(void *)(v582 + v583 + v461 + v594);
                  v594 += 8;
                  unint64_t v598 = *(void *)v596 ^ v597;
                }
                while (!v598);
                uint64_t v599 = v594 + (__clz(__rbit64(v598)) >> 3);
                uint64_t v362 = (unsigned __int8 *)v769;
                uint64_t v10 = v770;
                uint64_t v523 = a1;
                unsigned int v363 = v11 + 7;
                unint64_t v588 = v599 + v583;
                if (v588 <= v474)
                {
LABEL_883:
                  v589 = v776;
                  goto LABEL_902;
                }
LABEL_896:
                if (v588 > v444 - v461) {
                  int v444 = v461 + v588;
                }
                uint64_t v591 = &v10[2 * v361];
                _DWORD *v591 = v581 - v461;
                v591[1] = v588;
                ++v361;
                v589 = v776;
                BOOL v592 = v588 > 0x1000 || &v776[v588] == v362;
                unint64_t v474 = v588;
                if (v592) {
                  goto LABEL_828;
                }
LABEL_902:
                unint64_t v593 = (unsigned int *)(v470 + 8 * (v461 & v463));
                if (*(unsigned __int8 *)(v584 + v588) >= *((unsigned __int8 *)v589 + v588))
                {
                  unsigned int *v746 = v461;
                  if (v461 > v739)
                  {
                    unint64_t v578 = v588;
                    v746 = (unsigned int *)(v470 + 8 * (v461 & v463));
                    BOOL v118 = v580-- != 0;
                    if (v118) {
                      goto LABEL_876;
                    }
LABEL_828:
                    unsigned int *v746 = 0;
                    *int v443 = 0;
                    *(_DWORD *)(v523 + 36) = v444 - 8;
LABEL_829:
                    unsigned int v15 = v763;
LABEL_830:
                    LODWORD(v314) = v776;
                    goto LABEL_831;
                  }
LABEL_964:
                  v746 = (unsigned int *)&v784;
                  goto LABEL_828;
                }
                *int v443 = v461;
                if (v461 <= v739) {
                  goto LABEL_965;
                }
                ++v593;
                unint64_t v579 = v588;
                int v443 = v593;
                BOOL v118 = v580-- != 0;
                if (!v118) {
                  goto LABEL_828;
                }
LABEL_876:
                unsigned int v461 = *v593;
                if (*v593 < v469) {
                  goto LABEL_828;
                }
              }
              v590 = (char *)&v776[v583];
              if ((unint64_t)v585 >= v766) {
                goto LABEL_887;
              }
LABEL_885:
              if (*(_DWORD *)v586 == *(_DWORD *)v590)
              {
                v590 += 4;
                unsigned int v586 = (void *)((char *)v586 + 4);
              }
LABEL_887:
              if ((unint64_t)v590 >= v765)
              {
                if (v590 >= (char *)v362) {
                  goto LABEL_895;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v586 == *(unsigned __int16 *)v590)
                {
                  v590 += 2;
                  unsigned int v586 = (void *)((char *)v586 + 2);
                }
                if (v590 >= (char *)v362)
                {
LABEL_895:
                  uint64_t v523 = a1;
                  unint64_t v588 = v590 - (char *)v776;
                  if (v588 <= v474) {
                    goto LABEL_883;
                  }
                  goto LABEL_896;
                }
              }
              uint64_t v10 = v770;
              if (*(unsigned __int8 *)v586 == *v590) {
                ++v590;
              }
              goto LABEL_895;
            }
          }
          signed int v478 = v776 + 4;
LABEL_718:
          if ((unint64_t)v478 >= v766)
          {
            if ((unint64_t)v478 >= v765) {
              goto LABEL_722;
            }
          }
          else
          {
            if (*(_DWORD *)v477 == *(_DWORD *)v478)
            {
              signed int v478 = (void *)((char *)v478 + 4);
              unint64_t v477 = (void *)((char *)v477 + 4);
            }
            if ((unint64_t)v478 >= v765)
            {
LABEL_722:
              if ((unint64_t)v478 >= v769) {
                goto LABEL_725;
              }
              goto LABEL_723;
            }
          }
          if (*(unsigned __int16 *)v477 == *(unsigned __int16 *)v478)
          {
            signed int v478 = (void *)((char *)v478 + 2);
            unint64_t v477 = (void *)((char *)v477 + 2);
          }
          if ((unint64_t)v478 >= v769)
          {
LABEL_725:
            uint64_t v10 = v770;
            unsigned int v480 = v478 - v776;
            unint64_t v481 = v480;
            if (v474 < v480) {
              goto LABEL_726;
            }
            goto LABEL_699;
          }
LABEL_723:
          if (*(unsigned __int8 *)v477 == *(unsigned __int8 *)v478) {
            LODWORD(v478) = v478 + 1;
          }
          goto LABEL_725;
        }
        unsigned int v361 = 0;
        unint64_t v708 = (char *)v725 + v313;
        if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
          unsigned int v368 = 4095;
        }
        else {
          unsigned int v368 = *(_DWORD *)(v18 + 212);
        }
        uint64_t v369 = *(void *)(v18 + 8);
        unsigned int v370 = v776 - v369;
        unint64_t v371 = (char *)(v776 + 3);
        int v712 = *(_DWORD *)(v18 + 204);
        uint64_t v716 = (-1640531535 * *(_DWORD *)v776) >> -(char)*(_DWORD *)(v18 + 200);
        uint64_t v720 = *(void *)(v18 + 48);
        unsigned int v372 = *(_DWORD *)(v720 + 4 * v716);
        uint64_t v373 = *(void *)(v18 + 64);
        int v374 = -1 << (*(_DWORD *)(v18 + 196) - 1);
        int v375 = ~v374;
        unsigned int v376 = v776 - v369 + v374 + 1;
        if ((int)v776 - (int)v369 < ~v374) {
          unsigned int v376 = 0;
        }
        unsigned int v736 = v376;
        int v377 = *(_DWORD *)(v18 + 24);
        unsigned int v378 = 1 << *(_DWORD *)(v18 + 192);
        if (v370 - *(_DWORD *)(v18 + 28) > v378 && *(_DWORD *)(v18 + 32) == 0) {
          unsigned int v380 = v370 - v378;
        }
        else {
          unsigned int v380 = *(_DWORD *)(v18 + 28);
        }
        if (v380 <= 1) {
          unsigned int v381 = 1;
        }
        else {
          unsigned int v381 = v380;
        }
        unint64_t v382 = (unsigned int *)(v373 + 8 * (v370 & ~v374));
        uint64_t v740 = v373;
        uint64_t v744 = v382 + 1;
        unsigned int v383 = v370 + 9;
        int v784 = 0;
        if (v729) {
          unint64_t v384 = 4;
        }
        else {
          unint64_t v384 = 3;
        }
        unsigned int v385 = v370 - v377;
        uint64_t v386 = v729;
        unint64_t v387 = (v763 - 1);
        unsigned int v15 = v763;
        while (2)
        {
          if (v386 != 3)
          {
            unsigned int v388 = v367[v386];
            if (v388 - 1 < v385) {
              goto LABEL_541;
            }
            goto LABEL_536;
          }
          unsigned int v388 = *v367 - 1;
          if (*v367 - 2 >= v385) {
            goto LABEL_536;
          }
LABEL_541:
          if (v370 - v388 < v380 || ((*(_DWORD *)&v776[-v388] ^ *(_DWORD *)v776) & 0xFFFFFF) != 0)
          {
            unsigned int v15 = v763;
            uint64_t v10 = v770;
            goto LABEL_536;
          }
          unsigned int v390 = &v371[-v388];
          if (v778 > (unint64_t)v371)
          {
            unsigned int v391 = v776 + 3;
            unint64_t v392 = *(void *)v371 ^ *(void *)v390;
            if (v392)
            {
              unint64_t v393 = __clz(__rbit64(v392)) >> 3;
            }
            else
            {
              do
              {
                v390 += 8;
                if ((unint64_t)++v391 >= v778) {
                  goto LABEL_555;
                }
                unint64_t v394 = *v391 ^ *(void *)v390;
              }
              while (!v394);
              unint64_t v393 = (char *)v391 + (__clz(__rbit64(v394)) >> 3) - v371;
            }
            unsigned int v15 = v763;
            uint64_t v10 = v770;
            unsigned int v395 = v393 + 3;
            unint64_t v396 = v395;
            if (v387 < v395) {
              goto LABEL_563;
            }
            goto LABEL_536;
          }
          unsigned int v391 = v776 + 3;
LABEL_555:
          if ((unint64_t)v391 >= v766)
          {
            if ((unint64_t)v391 >= v765) {
              goto LABEL_559;
            }
          }
          else
          {
            if (*(_DWORD *)v390 == *(_DWORD *)v391)
            {
              unsigned int v391 = (void *)((char *)v391 + 4);
              v390 += 4;
            }
            if ((unint64_t)v391 >= v765)
            {
LABEL_559:
              if ((unint64_t)v391 < v769) {
                goto LABEL_560;
              }
              goto LABEL_562;
            }
          }
          if (*(unsigned __int16 *)v390 == *(unsigned __int16 *)v391)
          {
            unsigned int v391 = (void *)((char *)v391 + 2);
            v390 += 2;
          }
          if ((unint64_t)v391 < v769)
          {
LABEL_560:
            if (*v390 == *(unsigned char *)v391) {
              LODWORD(v391) = v391 + 1;
            }
          }
LABEL_562:
          uint64_t v10 = v770;
          int v397 = v391 - v371;
          unsigned int v15 = v763;
          unsigned int v395 = v397 + 3;
          unint64_t v396 = v395;
          if (v387 >= v395) {
            goto LABEL_536;
          }
LABEL_563:
          unsigned int v398 = &v10[2 * v361];
          *unsigned int v398 = v386 + ((int)(v729 << 31) >> 31);
          v398[1] = v395;
          ++v361;
          if (v395 > v368)
          {
            uint64_t v10 = v770;
            goto LABEL_830;
          }
          unint64_t v387 = v396;
          uint64_t v10 = v770;
          if (&v776[v396] == (unsigned __int8 *)v769) {
            goto LABEL_830;
          }
LABEL_536:
          if (++v386 < v384) {
            continue;
          }
          break;
        }
        if (v387 > 2)
        {
          uint64_t v484 = a1;
          goto LABEL_872;
        }
        uint64_t v484 = a1;
        uint64_t v485 = *(void *)(a1 + 56);
        int v486 = *(_DWORD *)v776;
        int v487 = 32 - *(_DWORD *)(a1 + 40);
        if (v711 < v370)
        {
          uint64_t v488 = v711;
          do
          {
            *(_DWORD *)(v485 + 4 * ((900185344 * *(_DWORD *)(v369 + v488)) >> v487)) = v488;
            ++v488;
          }
          while (v762 - v369 != v488);
        }
        uint64_t v489 = *(unsigned int *)(v485 + 4 * ((900185344 * v486) >> v487));
        if (v489 < v381 || (v370 - v489) >> 18 != 0)
        {
          unsigned int v711 = v776 - v369;
          goto LABEL_872;
        }
        v620 = (_DWORD *)(v369 + v489);
        if (v778 <= (unint64_t)v776)
        {
          unint64_t v623 = (char *)v776;
          if ((unint64_t)v776 < v766)
          {
LABEL_967:
            if (*v620 == *(_DWORD *)v623)
            {
              v623 += 4;
              ++v620;
            }
          }
          goto LABEL_969;
        }
        unint64_t v621 = *(void *)v776 ^ *(void *)v620;
        if (!v621)
        {
          uint64_t v625 = 0;
          while (1)
          {
            unint64_t v623 = &v708[v625];
            if ((unint64_t)&v708[v625] >= v778) {
              break;
            }
            uint64_t v626 = *(void *)(v369 + v489 + 8 + v625);
            v625 += 8;
            unint64_t v627 = *(void *)v623 ^ v626;
            if (v627)
            {
              unint64_t v622 = v625 + (__clz(__rbit64(v627)) >> 3);
              unsigned int v711 = v776 - v369;
              if (v622 < 3) {
                goto LABEL_872;
              }
              goto LABEL_978;
            }
          }
          v620 = (_DWORD *)(v369 + v489 + v625 + 8);
          if ((unint64_t)v623 < v766) {
            goto LABEL_967;
          }
LABEL_969:
          if ((unint64_t)v623 >= v765)
          {
            if ((unint64_t)v623 >= v769) {
              goto LABEL_977;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v620 == *(unsigned __int16 *)v623)
            {
              v623 += 2;
              v620 = (_DWORD *)((char *)v620 + 2);
            }
            if ((unint64_t)v623 >= v769)
            {
LABEL_977:
              unint64_t v622 = v623 - (char *)v776;
              unsigned int v711 = v776 - v369;
              if (v622 >= 3) {
                goto LABEL_978;
              }
              goto LABEL_872;
            }
          }
          if (*(unsigned __int8 *)v620 == *v623) {
            ++v623;
          }
          goto LABEL_977;
        }
        unint64_t v622 = __clz(__rbit64(v621)) >> 3;
        unsigned int v711 = v776 - v369;
        if (v622 >= 3)
        {
LABEL_978:
          _DWORD *v10 = v370 - v489 + 2;
          v10[1] = v622;
          if (v622 > v368 || &v776[v622] == (unsigned __int8 *)v769)
          {
            unsigned int v361 = 1;
            unsigned int v711 = v776 - v369;
            LODWORD(v314) = v776;
            *(_DWORD *)(a1 + 36) = v370 + 1;
            goto LABEL_831;
          }
          unsigned int v361 = 1;
          unsigned int v711 = v776 - v369;
          unint64_t v387 = v622;
        }
LABEL_872:
        *(_DWORD *)(v720 + 4 * v716) = v370;
        if (v372 < v381)
        {
          LODWORD(v314) = v776;
          goto LABEL_874;
        }
        unint64_t v600 = 0;
        unint64_t v601 = 0;
        int v602 = ~(-1 << v712);
        unsigned int v603 = v370 + 2;
        unint64_t v733 = (char *)v725 + v313;
        uint64_t v724 = v369 + 8;
        uint64_t v314 = v776;
        while (2)
        {
          if (v601 >= v600) {
            unint64_t v604 = v600;
          }
          else {
            unint64_t v604 = v601;
          }
          uint64_t v605 = v369 + v372;
          unint64_t v606 = (char *)&v314[v604];
          long long v607 = (_DWORD *)(v605 + v604);
          if (v778 <= (unint64_t)&v314[v604])
          {
            unint64_t v610 = &v314[v604];
            if ((unint64_t)v606 < v766)
            {
LABEL_926:
              if (*v607 == *(_DWORD *)v610)
              {
                v610 += 4;
                ++v607;
              }
            }
          }
          else
          {
            unint64_t v608 = *(void *)v606 ^ *(void *)v607;
            if (v608)
            {
              unint64_t v609 = (__clz(__rbit64(v608)) >> 3) + v604;
              uint64_t v484 = a1;
              if (v609 <= v387) {
                goto LABEL_924;
              }
LABEL_937:
              if (v609 > v383 - v372) {
                unsigned int v383 = v372 + v609;
              }
              uint64_t v611 = &v10[2 * v361];
              _DWORD *v611 = v603 - v372;
              v611[1] = v609;
              ++v361;
              BOOL v612 = v609 > 0x1000 || &v314[v609] == v362;
              unint64_t v387 = v609;
              unsigned int v15 = v763;
              if (v612) {
                goto LABEL_874;
              }
              goto LABEL_943;
            }
            uint64_t v614 = 0;
            unsigned int v615 = &v733[v604];
            while (1)
            {
              unint64_t v616 = &v615[v614];
              if ((unint64_t)&v615[v614] >= v778) {
                break;
              }
              uint64_t v617 = *(void *)(v724 + v604 + v372 + v614);
              v614 += 8;
              unint64_t v618 = *(void *)v616 ^ v617;
              unsigned int v363 = v11 + 7;
              uint64_t v362 = (unsigned __int8 *)v769;
              if (v618)
              {
                unint64_t v619 = __clz(__rbit64(v618));
                uint64_t v10 = v770;
                uint64_t v314 = v776;
                uint64_t v484 = a1;
                unint64_t v609 = v614 + (v619 >> 3) + v604;
                if (v609 > v387) {
                  goto LABEL_937;
                }
                goto LABEL_924;
              }
            }
            unint64_t v610 = (unsigned __int8 *)&v733[v604 + v614];
            long long v607 = (_DWORD *)(v724 + v604 + v372 + v614);
            uint64_t v10 = v770;
            uint64_t v314 = v776;
            if ((unint64_t)v610 < v766) {
              goto LABEL_926;
            }
          }
          if ((unint64_t)v610 >= v765)
          {
            if (v610 < v362) {
              goto LABEL_934;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v607 == *(unsigned __int16 *)v610)
            {
              v610 += 2;
              long long v607 = (_DWORD *)((char *)v607 + 2);
            }
            if (v610 >= v362) {
              goto LABEL_936;
            }
LABEL_934:
            if (*(unsigned __int8 *)v607 == *v610) {
              ++v610;
            }
          }
LABEL_936:
          unint64_t v609 = v610 - (unsigned __int8 *)v606 + v604;
          uint64_t v484 = a1;
          if (v609 > v387) {
            goto LABEL_937;
          }
LABEL_924:
          unsigned int v15 = v763;
LABEL_943:
          unint64_t v613 = (unsigned int *)(v740 + 8 * (v372 & v375));
          if (*(unsigned __int8 *)(v605 + v609) < v314[v609])
          {
            *unint64_t v382 = v372;
            if (v372 <= v736)
            {
              unint64_t v382 = (unsigned int *)&v784;
              goto LABEL_874;
            }
            ++v613;
            unint64_t v601 = v609;
            unint64_t v382 = v613;
            BOOL v118 = v602-- != 0;
            if (!v118) {
              goto LABEL_874;
            }
            goto LABEL_917;
          }
          *uint64_t v744 = v372;
          if (v372 > v736)
          {
            unint64_t v600 = v609;
            uint64_t v744 = (unsigned int *)(v740 + 8 * (v372 & v375));
            BOOL v118 = v602-- != 0;
            if (!v118) {
              goto LABEL_874;
            }
LABEL_917:
            unsigned int v372 = *v613;
            if (*v613 < v381) {
              goto LABEL_874;
            }
            continue;
          }
          break;
        }
        uint64_t v744 = (unsigned int *)&v784;
LABEL_874:
        *uint64_t v744 = 0;
        *unint64_t v382 = 0;
        *(_DWORD *)(v484 + 36) = v383 - 8;
LABEL_831:
        unsigned int v780 = v361;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v781, (uint64_t)v10, &v780, v314 - v754, v362 - v314);
        uint64_t v536 = v780;
        if (!v780)
        {
          uint64_t v18 = a1;
LABEL_469:
          unsigned int v14 = v768;
          int v308 = v762;
          goto LABEL_470;
        }
        uint64_t v537 = v780 - 1;
        unsigned int v270 = v10[2 * v537 + 1];
        if (v270 <= v735 && v270 + v313 <= 0xFFF)
        {
          uint64_t v538 = 0;
          int v539 = v748 + v753;
          uint64_t v18 = a1;
          while (1)
          {
            uint64_t v540 = &v10[2 * v538];
            unsigned int v541 = v15;
            if (v538) {
              unsigned int v541 = *(v540 - 1) + 1;
            }
            unsigned int v542 = v540[1];
            if (v542 >= v541) {
              break;
            }
LABEL_835:
            if (++v538 == v536) {
              goto LABEL_469;
            }
          }
          signed int v543 = *v540;
          uint64_t v544 = __clz(v543 + 1) ^ 0x1F;
          if (*(_DWORD *)(a1 + 160) == 1)
          {
            int v545 = 0;
            int v546 = v313 + v542;
            unsigned int v547 = v313 + v542;
            while (1)
            {
              unint64_t v549 = v542 + v313;
              unsigned int v550 = __clz(v542 - 2);
              signed int v551 = ((v542 - 2) << 8 >> (v550 ^ 0x1F)) + (((v550 ^ 0x1F) + v544) << 8) + v539 + 4096;
              if (v549 <= v307)
              {
                if (v551 >= (int)v11[7 * v549]) {
                  goto LABEL_842;
                }
                goto LABEL_841;
              }
              uint64_t v552 = v307;
              unint64_t v553 = (v546 - v545) - (unint64_t)v307;
              if (v553 >= 2)
              {
                unint64_t v307 = (v553 & 0xFFFFFFFFFFFFFFFELL) + v307;
                unint64_t v554 = (v547 - v552) & 0xFFFFFFFFFFFFFFFELL;
                v555 = &v779[7 * v552];
                do
                {
                  *(v555 - 7) = 0x40000000;
                  _DWORD *v555 = 0x40000000;
                  v555 += 14;
                  v554 -= 2;
                }
                while (v554);
                if (v553 == (v553 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_841;
                }
              }
              else
              {
                unint64_t v307 = v307;
              }
              unint64_t v556 = &v363[7 * v307];
              do
              {
                ++v307;
                *unint64_t v556 = 0x40000000;
                v556 += 7;
              }
              while (v307 < v549);
LABEL_841:
              v548 = (signed int *)&v11[7 * v549];
              v548[2] = v542;
              v548[3] = v23;
              signed int *v548 = v551;
              v548[1] = v543;
LABEL_842:
              --v542;
              ++v545;
              --v547;
              if (v542 < v541) {
                goto LABEL_835;
              }
            }
          }
          int v557 = 0;
          uint64_t v559 = *(void *)(a1 + 96);
          uint64_t v558 = *(void *)(a1 + 104);
          int v560 = *(_DWORD *)(a1 + 156) + *(_DWORD *)(a1 + 152) + 51;
          int v561 = v313 + v542;
          unsigned int v562 = v313 + v542;
          while (2)
          {
            unsigned int v564 = v542 - 3;
            if (v542 - 3 < 0x80) {
              unsigned int v565 = ZSTD_MLcode_ML_Code[v564];
            }
            else {
              unsigned int v565 = 67 - __clz(v564);
            }
            unint64_t v566 = v542 + v313;
            unsigned int v567 = *(_DWORD *)(v558 + 4 * v544) + 1;
            unsigned int v568 = __clz(v567) ^ 0x1F;
            uint64_t v569 = 4 * v565;
            int v570 = *(unsigned int *)((char *)ML_bits + v569);
            LODWORD(v569) = *(_DWORD *)(v559 + v569) + 1;
            unsigned int v571 = __clz(v569) ^ 0x1F;
            signed int v572 = v539
                 + v560
                 - (v567 << 8 >> v568)
                 - (v569 << 8 >> v571)
                 + ((v544 + v570 - v568 - v571) << 8);
            if (v566 <= v307)
            {
              if (v572 < (int)v11[7 * v566]) {
                goto LABEL_855;
              }
            }
            else
            {
              uint64_t v573 = v307;
              unint64_t v574 = (v561 - v557) - (unint64_t)v307;
              if (v574 < 2)
              {
                unint64_t v307 = v307;
                goto LABEL_868;
              }
              unint64_t v307 = (v574 & 0xFFFFFFFFFFFFFFFELL) + v307;
              unint64_t v575 = (v562 - v573) & 0xFFFFFFFFFFFFFFFELL;
              unsigned int v576 = &v779[7 * v573];
              do
              {
                *(v576 - 7) = 0x40000000;
                *unsigned int v576 = 0x40000000;
                v576 += 14;
                v575 -= 2;
              }
              while (v575);
              unsigned int v363 = v11 + 7;
              if (v574 != (v574 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_868:
                unsigned int v577 = &v363[7 * v307];
                do
                {
                  ++v307;
                  *unsigned int v577 = 0x40000000;
                  v577 += 7;
                }
                while (v307 < v566);
              }
LABEL_855:
              unsigned int v563 = &v11[7 * v566];
              v563[2] = v542;
              v563[3] = v23;
              *unsigned int v563 = v572;
              v563[1] = v543;
            }
            --v542;
            ++v557;
            --v562;
            if (v542 < v541) {
              goto LABEL_835;
            }
            continue;
          }
        }
        uint64_t v18 = a1;
        if (*v734) {
          unsigned int v693 = 0;
        }
        else {
          unsigned int v693 = v11[7 * v313 + 3];
        }
        uint64_t v17 = v747;
        unsigned int v14 = v768;
        unsigned int v279 = v10[2 * v537];
        unsigned int v697 = v313 - v693;
        if (v697 <= 0x1000) {
          unsigned int v278 = v697;
        }
        else {
          unsigned int v278 = 0;
        }
        if (!v270)
        {
LABEL_1081:
          v698 = &v11[7 * v278];
          uint64_t v699 = *((void *)v698 + 2);
          a3[2] = v698[6];
          *(void *)a3 = v699;
          goto LABEL_1011;
        }
LABEL_997:
        unint64_t v629 = &v11[7 * v278 + 4];
        if (v279 < 3)
        {
          if (v23) {
            unsigned int v634 = v279;
          }
          else {
            unsigned int v634 = v279 + 1;
          }
          if (v634)
          {
            if (v634 == 3)
            {
              unint64_t v631 = *v629;
              unsigned int v633 = v631 - 1;
            }
            else
            {
              unsigned int v633 = v629[v634];
              unint64_t v631 = *v629;
            }
            BOOL v645 = v634 > 1;
            uint64_t v636 = 2;
            if (v645) {
              uint64_t v636 = 1;
            }
            v630 = &v629[v636];
          }
          else
          {
            unint64_t v635 = *(void *)v629;
            v630 = &v11[7 * v278 + 6];
            unsigned int v633 = v635;
            unint64_t v631 = HIDWORD(v635);
          }
        }
        else
        {
          unsigned int v632 = *v629;
          v630 = &v11[7 * v278 + 5];
          unint64_t v631 = v632;
          unsigned int v633 = v279 - 2;
        }
        unsigned int v637 = *v630;
        *(void *)a3 = v633 | (v631 << 32);
        a3[2] = v637;
LABEL_1011:
        unsigned int v638 = v278 + 1;
        unint64_t v639 = &v11[7 * v278 + 7];
        unsigned int *v639 = v728;
        v639[1] = v279;
        v639[2] = v270;
        v639[3] = v23;
        *((void *)v639 + 2) = v785;
        v639[6] = v786;
        unsigned int v640 = v278;
        if (!v278)
        {
          unsigned int v646 = 1;
          uint64_t v648 = v726;
          uint64_t v647 = a2;
          unint64_t v649 = v769 - 32;
          goto LABEL_1020;
        }
        do
        {
          int v641 = &v11[7 * v640];
          unsigned int v642 = v641[3] + v641[2];
          unint64_t v643 = &v11[7 * v278];
          long long v644 = *(_OWORD *)v641;
          *(_OWORD *)(v643 + 3) = *(_OWORD *)(v641 + 3);
          *(_OWORD *)unint64_t v643 = v644;
          --v278;
          BOOL v118 = v640 >= v642;
          v640 -= v642;
          BOOL v645 = v640 != 0 && v118;
          if (!v118) {
            unsigned int v640 = 0;
          }
        }
        while (v645);
        unsigned int v646 = v278 + 1;
        uint64_t v648 = v726;
        uint64_t v647 = a2;
        unint64_t v649 = v769 - 32;
        if (v646 <= v638)
        {
          while (1)
          {
LABEL_1020:
            while (1)
            {
              unsigned int v652 = v646;
              unsigned int v654 = v11[7 * v646 + 2];
              uint64_t v653 = v11[7 * v646 + 3];
              if (v654) {
                break;
              }
              unsigned int v14 = &v17[v653];
              unsigned int v646 = v652 + 1;
              if (v652 + 1 > v638) {
                goto LABEL_1016;
              }
            }
            unsigned int v655 = v11[7 * v652 + 1];
            if (*(_DWORD *)(v18 + 176) != 2)
            {
              if (v653)
              {
                BOOL v656 = *v648;
                unint64_t v657 = v17;
                uint64_t v658 = v653;
                do
                {
                  unsigned int v659 = *v657++;
                  *(_DWORD *)&v656[4 * v659] += 2;
                  --v658;
                }
                while (v658);
              }
              *(_DWORD *)(v18 + 128) += 2 * v653;
            }
            unsigned int v660 = v653 < 0x40 ? ZSTD_LLcode_LL_Code[v653] : 50 - __clz(v653);
            ++*(_DWORD *)(*(void *)(v18 + 88) + 4 * v660);
            ++*(_DWORD *)(v18 + 132);
            unsigned int v661 = v655 + 1;
            unsigned int v662 = __clz(v655 + 1);
            ++*(_DWORD *)(*(void *)(v18 + 104) + 4 * (v662 ^ 0x1F));
            ++*(_DWORD *)(v18 + 140);
            unsigned int v663 = v654 - 3;
            unsigned int v664 = v654 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v663] : 67 - __clz(v663);
            ++*(_DWORD *)(*(void *)(v18 + 96) + 4 * v664);
            ++*(_DWORD *)(v18 + 136);
            unsigned int v665 = &v17[v653];
            uint64_t v666 = *(char **)(v647 + 24);
            if ((unint64_t)&v17[v653] > v649) {
              break;
            }
            *(_OWORD *)uint64_t v666 = *(_OWORD *)v17;
            uint64_t v669 = *(void *)(v647 + 24);
            if (v653 > 0x10)
            {
              unint64_t v670 = (_OWORD *)(v669 + 16);
              unint64_t v671 = v669 + v653;
              v672 = (long long *)(v17 + 16);
              do
              {
                long long v673 = *v672++;
                *v670++ = v673;
              }
              while ((unint64_t)v670 < v671);
LABEL_1065:
              *(void *)(v647 + 24) += v653;
              uint64_t v680 = *(void *)(v647 + 8);
              if (v653 >= 0x10000)
              {
                unint64_t v691 = (unint64_t)(v680 - *(void *)v647) >> 3;
                *(_DWORD *)(v647 + 72) = 1;
                *(_DWORD *)(v647 + 76) = v691;
              }
              goto LABEL_1067;
            }
            *(void *)(v647 + 24) = v669 + v653;
            uint64_t v680 = *(void *)(v647 + 8);
LABEL_1067:
            *(_WORD *)(v680 + 4) = v653;
            *(_DWORD *)uint64_t v680 = v661;
            if (v663 >= 0x10000)
            {
              unint64_t v692 = (unint64_t)(v680 - *(void *)v647) >> 3;
              *(_DWORD *)(v647 + 72) = 2;
              *(_DWORD *)(v647 + 76) = v692;
            }
            *(_WORD *)(v680 + 6) = v663;
            *(void *)(v647 + 8) = v680 + 8;
            v17 += v654 + v653;
            unsigned int v14 = v17;
            unsigned int v646 = v652 + 1;
            if (v652 + 1 > v638) {
              goto LABEL_1016;
            }
          }
          if ((unint64_t)v17 <= v649)
          {
            uint64_t v668 = &v666[v649 - (void)v17];
            unsigned int v674 = v17;
            unsigned int v675 = *(char **)(v647 + 24);
            do
            {
              long long v676 = *(_OWORD *)v674;
              v674 += 16;
              *(_OWORD *)unsigned int v675 = v676;
              v675 += 16;
            }
            while (v675 < v668);
            unint64_t v667 = (unsigned __int8 *)v649;
            if (v649 >= (unint64_t)v665) {
              goto LABEL_1065;
            }
          }
          else
          {
            unint64_t v667 = v17;
            uint64_t v668 = *(char **)(v647 + 24);
            if (v17 >= v665) {
              goto LABEL_1065;
            }
          }
          if ((unint64_t)v17 <= v649) {
            v677 = (unsigned __int8 *)v649;
          }
          else {
            v677 = v17;
          }
          unint64_t v678 = &v17[v653] - v677;
          if (v678 < 8)
          {
            v679 = v667;
            goto LABEL_1064;
          }
          if ((unint64_t)(v666 - (char *)v17) < 0x20)
          {
            v679 = v667;
            goto LABEL_1064;
          }
          if (v678 >= 0x20)
          {
            unint64_t v681 = v678 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v682 = (long long *)(v667 + 16);
            unint64_t v683 = &v666[v677 - v17 + 16];
            unint64_t v684 = v678 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v685 = *v682;
              *((_OWORD *)v683 - 1) = *(v682 - 1);
              *(_OWORD *)unint64_t v683 = v685;
              v682 += 2;
              v683 += 32;
              v684 -= 32;
            }
            while (v684);
            if (v678 == v681) {
              goto LABEL_1065;
            }
            if ((v678 & 0x18) == 0)
            {
              v679 = &v667[v681];
              v668 += v681;
              goto LABEL_1064;
            }
          }
          else
          {
            unint64_t v681 = 0;
          }
          v668 += v678 & 0xFFFFFFFFFFFFFFF8;
          v679 = &v667[v678 & 0xFFFFFFFFFFFFFFF8];
          v686 = &v667[v681];
          unint64_t v687 = &v666[&v677[v681] - v17];
          unint64_t v688 = v681 - (v678 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v689 = *(void *)v686;
            v686 += 8;
            *(void *)unint64_t v687 = v689;
            v687 += 8;
            v688 += 8;
          }
          while (v688);
          if (v678 == (v678 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_1065;
          }
          do
          {
LABEL_1064:
            char v690 = *v679++;
            *v668++ = v690;
          }
          while (v679 < v665);
          goto LABEL_1065;
        }
LABEL_1016:
        if (*(_DWORD *)(v18 + 176) != 2)
        {
          unsigned int v650 = *(_DWORD *)(v18 + 128) + 1;
          unsigned int v651 = __clz(v650) ^ 0x1F;
          *(_DWORD *)(v18 + 144) = (v650 << 8 >> v651) + (v651 << 8);
        }
        unsigned int v19 = *(_DWORD *)(v18 + 140) + 1;
        unsigned int v20 = __clz(v19);
        int32x2_t v21 = vadd_s32(*(int32x2_t *)(v18 + 132), (int32x2_t)0x100000001);
        int32x2_t v22 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v21), (int8x8_t)0x1F0000001FLL);
        *(int32x2_t *)(v18 + 148) = vadd_s32(vshl_n_s32(v22, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v21, 8uLL), (uint32x2_t)vneg_s32(v22)));
        *(_DWORD *)(v18 + 156) = (v19 << 8 >> (v20 ^ 0x1F)) + ((v20 ^ 0x1F) << 8);
        if ((unint64_t)v14 >= v764)
        {
LABEL_1112:
          unsigned int v754 = v17;
          return v769 - (void)v754;
        }
      }
      else
      {
        ++v14;
        uint64_t v18 = a1;
        if ((unint64_t)v14 >= v764) {
          goto LABEL_1112;
        }
      }
    }
    unsigned int v26 = 0;
    if (*(_DWORD *)(v18 + 212) >= 0xFFFu) {
      unsigned int v65 = 4095;
    }
    else {
      unsigned int v65 = *(_DWORD *)(v18 + 212);
    }
    uint64_t v66 = *(void *)(v18 + 8);
    int v67 = v14 - v66;
    int v68 = -1 << (*(_DWORD *)(v18 + 196) - 1);
    int v69 = ~v68;
    unsigned int v70 = v14 - v66 + v68 + 1;
    if ((int)v14 - (int)v66 < ~v68) {
      unsigned int v70 = 0;
    }
    unsigned int v772 = v70;
    unsigned int v71 = 1 << *(_DWORD *)(v18 + 192);
    if (v67 - *(_DWORD *)(v18 + 28) > v71 && *(_DWORD *)(v18 + 32) == 0) {
      unsigned int v73 = v67 - v71;
    }
    else {
      unsigned int v73 = *(_DWORD *)(v18 + 28);
    }
    if (v73 <= 1) {
      unsigned int v74 = 1;
    }
    else {
      unsigned int v74 = v73;
    }
    unsigned int v75 = v67 - *(_DWORD *)(v18 + 24);
    unsigned int v76 = (char *)(v14 + 12);
    int v750 = *(_DWORD *)(v18 + 204);
    unint64_t v77 = (0xCF1BBCDCBF9B0000 * *(void *)v14) >> -(char)*(_DWORD *)(v18 + 200);
    uint64_t v756 = *(void *)(v18 + 48);
    unsigned int v78 = *(_DWORD *)(v756 + 4 * v77);
    uint64_t v79 = v23 == 0;
    uint64_t v80 = *(void *)(v18 + 64);
    int v81 = (unsigned int *)(v80 + 8 * (v67 & ~v68));
    unint64_t v82 = v81 + 1;
    int v83 = v67 + 9;
    int v784 = 0;
    if (v23) {
      unint64_t v84 = 3;
    }
    else {
      unint64_t v84 = 4;
    }
    unint64_t v85 = (char *)(v14 + 4);
    if (v23) {
      int v86 = 0;
    }
    else {
      int v86 = -1;
    }
    unint64_t v87 = (v763 - 1);
    uint64_t v10 = v770;
LABEL_101:
    if (v79 == 3)
    {
      unsigned int v88 = *a3 - 1;
      if (*a3 - 2 >= v75) {
        goto LABEL_100;
      }
    }
    else
    {
      unsigned int v88 = a3[v79];
      if (v88 - 1 >= v75) {
        goto LABEL_100;
      }
    }
    int v89 = *(_DWORD *)v14;
    int v90 = *(_DWORD *)&v14[-v88];
    if (v67 - v88 < v73 || v89 != v90)
    {
      uint64_t v10 = v770;
      unsigned int v14 = v768;
      goto LABEL_100;
    }
    uint64_t v92 = -(uint64_t)v88;
    unint64_t v93 = &v85[-v88];
    if (v778 <= (unint64_t)v85)
    {
      uint64_t v97 = v85;
      unsigned int v14 = v768;
      if ((unint64_t)v85 >= v766) {
        goto LABEL_117;
      }
    }
    else
    {
      unint64_t v94 = *(void *)v85 ^ *(void *)v93;
      unsigned int v14 = v768;
      if (v94)
      {
        uint64_t v10 = v770;
        unsigned int v95 = (__clz(__rbit64(v94)) >> 3) + 4;
        unint64_t v96 = v95;
        if (v87 < v95) {
          goto LABEL_126;
        }
        goto LABEL_100;
      }
      while (1)
      {
        uint64_t v97 = &v76[v94];
        if ((unint64_t)&v76[v94] >= v778) {
          break;
        }
        uint64_t v100 = *(void *)&v76[v92 + v94];
        v94 += 8;
        unint64_t v101 = *(void *)v97 ^ v100;
        if (v101)
        {
          unint64_t v102 = __clz(__rbit64(v101));
          uint64_t v18 = a1;
          uint64_t v10 = v770;
          unsigned int v14 = v768;
          unsigned int v95 = v94 + (v102 >> 3) + 4;
          unint64_t v96 = v95;
          if (v87 < v95)
          {
LABEL_126:
            unint64_t v99 = &v10[2 * v26];
            *unint64_t v99 = v79 + v86;
            v99[1] = v95;
            ++v26;
            if (v95 > v65) {
              goto LABEL_289;
            }
            unint64_t v87 = v96;
            uint64_t v10 = v770;
            if (&v14[v96] == (unsigned __int8 *)v769) {
              goto LABEL_432;
            }
          }
LABEL_100:
          if (++v79 < v84) {
            goto LABEL_101;
          }
          *(_DWORD *)(v756 + 4 * v77) = v67;
          if (v78 < v74) {
            goto LABEL_430;
          }
          unint64_t v103 = 0;
          unint64_t v104 = 0;
          int v105 = ~(-1 << v750);
          int v106 = v67 + 2;
          unsigned int v757 = v14 + 8;
          uint64_t v107 = v66 + 8;
          while (2)
          {
            if (v104 >= v103) {
              unint64_t v108 = v103;
            }
            else {
              unint64_t v108 = v104;
            }
            uint64_t v109 = v66 + v78;
            unsigned int v110 = (char *)&v14[v108];
            unint64_t v111 = (void *)(v109 + v108);
            if (v778 <= (unint64_t)&v14[v108])
            {
              unint64_t v114 = &v14[v108];
              uint64_t v18 = a1;
              if ((unint64_t)v110 >= v766) {
                goto LABEL_148;
              }
            }
            else
            {
              unint64_t v112 = *(void *)v110 ^ *v111;
              if (v112)
              {
                uint64_t v18 = a1;
                unint64_t v113 = (__clz(__rbit64(v112)) >> 3) + v108;
                if (v113 <= v87) {
                  goto LABEL_163;
                }
LABEL_157:
                if (v113 > v83 - v78) {
                  int v83 = v78 + v113;
                }
                unint64_t v115 = &v10[2 * v26];
                *unint64_t v115 = v106 - v78;
                v115[1] = v113;
                ++v26;
                BOOL v116 = v113 > 0x1000 || &v14[v113] == (unsigned __int8 *)v769;
                unint64_t v87 = v113;
                if (v116) {
                  goto LABEL_430;
                }
LABEL_163:
                unint64_t v117 = (unsigned int *)(v80 + 8 * (v78 & v69));
                if (*(unsigned __int8 *)(v109 + v113) >= v14[v113])
                {
                  *unint64_t v82 = v78;
                  if (v78 <= v772) {
                    goto LABEL_429;
                  }
                  unint64_t v103 = v113;
                  unint64_t v82 = (unsigned int *)(v80 + 8 * (v78 & v69));
                  BOOL v118 = v105-- != 0;
                  if (!v118) {
                    goto LABEL_430;
                  }
                }
                else
                {
                  *int v81 = v78;
                  if (v78 <= v772)
                  {
LABEL_428:
                    int v81 = (unsigned int *)&v784;
                    goto LABEL_430;
                  }
                  ++v117;
                  unint64_t v104 = v113;
                  int v81 = v117;
                  BOOL v118 = v105-- != 0;
                  if (!v118) {
                    goto LABEL_430;
                  }
                }
                unsigned int v78 = *v117;
                if (*v117 < v74) {
                  goto LABEL_430;
                }
                continue;
              }
              uint64_t v119 = 0;
              uint64_t v120 = (char *)v757 + v108;
              while (1)
              {
                unint64_t v121 = &v120[v119];
                if ((unint64_t)&v120[v119] >= v778) {
                  break;
                }
                uint64_t v122 = *(void *)(v107 + v108 + v78 + v119);
                v119 += 8;
                unint64_t v123 = *(void *)v121 ^ v122;
                unsigned int v14 = v768;
                if (v123)
                {
                  uint64_t v18 = a1;
                  uint64_t v10 = v770;
                  unint64_t v113 = v119 + (__clz(__rbit64(v123)) >> 3) + v108;
                  if (v113 <= v87) {
                    goto LABEL_163;
                  }
                  goto LABEL_157;
                }
              }
              unint64_t v114 = (unsigned __int8 *)v757 + v108 + v119;
              unint64_t v111 = (void *)(v107 + v108 + v78 + v119);
              uint64_t v18 = a1;
              if ((unint64_t)v114 >= v766)
              {
LABEL_148:
                if ((unint64_t)v114 >= v765)
                {
                  if ((unint64_t)v114 >= v769) {
                    goto LABEL_156;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v111 == *(unsigned __int16 *)v114)
                  {
                    v114 += 2;
                    unint64_t v111 = (void *)((char *)v111 + 2);
                  }
                  if ((unint64_t)v114 >= v769)
                  {
LABEL_156:
                    uint64_t v10 = v770;
                    unint64_t v113 = v114 - (unsigned __int8 *)v110 + v108;
                    if (v113 <= v87) {
                      goto LABEL_163;
                    }
                    goto LABEL_157;
                  }
                }
                if (*(unsigned __int8 *)v111 == *v114) {
                  ++v114;
                }
                goto LABEL_156;
              }
            }
            break;
          }
          if (*(_DWORD *)v111 == *(_DWORD *)v114)
          {
            v114 += 4;
            unint64_t v111 = (void *)((char *)v111 + 4);
          }
          goto LABEL_148;
        }
      }
      unint64_t v93 = &v97[v92];
      unsigned int v14 = v768;
      if ((unint64_t)v97 >= v766)
      {
LABEL_117:
        if ((unint64_t)v97 >= v765)
        {
          if ((unint64_t)v97 >= v769) {
            goto LABEL_125;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v93 == *(unsigned __int16 *)v97)
          {
            v97 += 2;
            v93 += 2;
          }
          if ((unint64_t)v97 >= v769)
          {
LABEL_125:
            uint64_t v10 = v770;
            int v98 = v97 - v85;
            uint64_t v18 = a1;
            unsigned int v95 = v98 + 4;
            unint64_t v96 = v95;
            if (v87 < v95) {
              goto LABEL_126;
            }
            goto LABEL_100;
          }
        }
        if (*v93 == *v97) {
          LODWORD(v97) = v97 + 1;
        }
        goto LABEL_125;
      }
    }
    if (*(_DWORD *)v93 == *(_DWORD *)v97)
    {
      v97 += 4;
      v93 += 4;
    }
    goto LABEL_117;
  }
  return v769 - (void)v754;
}

int64_t ZSTD_compressBlock_btultra2(uint64_t a1, void *a2, unint64_t *a3, unsigned __int8 *a4, unint64_t a5)
{
  v1571 = a4;
  uint64_t v5 = a1;
  uint64_t v1636 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(a1 + 132))
  {
    unint64_t v7 = a2;
    if (a2[1] == *a2)
    {
      int v8 = *(_DWORD *)(a1 + 24);
      if (v8 == *(_DWORD *)(a1 + 28) && a5 >= 0x401 && v8 == a4 - v6)
      {
        unint64_t v1632 = *a3;
        unsigned int v1633 = *((_DWORD *)a3 + 2);
        unint64_t v9 = (unint64_t)&a4[a5];
        unint64_t v1594 = (unint64_t)&a4[a5 - 8];
        uint64_t v10 = (unsigned __int8 *)(v6 + (a4 - v6));
        unsigned int v11 = *(_DWORD *)(a1 + 212);
        if (v11 >= 0xFFF) {
          unsigned int v11 = 4095;
        }
        unsigned int v1543 = v11;
        if (*(_DWORD *)(a1 + 208) == 3) {
          uint64_t v12 = 3;
        }
        else {
          uint64_t v12 = 4;
        }
        uint64_t v1556 = v12;
        unsigned int v13 = *(_DWORD *)(a1 + 36);
        unsigned int v14 = *(_DWORD **)(a1 + 112);
        uint64_t v15 = *(void *)(a1 + 120);
        unsigned int v1635 = 0;
        uint64_t v1634 = 0;
        long long v1629 = 0u;
        memset(v1630, 0, sizeof(v1630));
        long long v1628 = 0u;
        uint64_t v16 = *(long long **)(a1 + 224);
        unsigned int v1497 = v13;
        if (v16)
        {
          long long v17 = v16[1];
          long long v1628 = *v16;
          long long v1629 = v17;
          *(void *)v1630 = *((void *)v16 + 4);
        }
        else
        {
          *(void *)v1630 = 0;
          long long v1628 = 0uLL;
          long long v1629 = 0uLL;
        }
        *(void *)&v1630[12] = 0;
        *(_DWORD *)&v1630[8] = 0;
        uint64_t v18 = a5;
        ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1628, 0, a5);
        v1527 = (uint64_t *)(v5 + 80);
        unint64_t v1490 = v18;
        ZSTD_rescaleFreqs((char **)(v5 + 80), v1571, v18, 2);
        if (v10 == v1571) {
          unsigned int v19 = v1571 + 1;
        }
        else {
          unsigned int v19 = v1571;
        }
        if ((unint64_t)v19 < v1594)
        {
          int v1528 = 0;
          unint64_t v1619 = v9 - 7;
          unint64_t v1602 = v9 - 3;
          unint64_t v1598 = v9 - 1;
          uint64_t v20 = (v1556 - 1) | 1;
          uint64_t v1621 = v15 + 56;
          v1493 = (_DWORD *)(v15 + 28 * v20);
          uint64_t v1495 = v1556 - v20;
          uint64_t v21 = v15 + 28;
          int32x2_t v22 = v1571;
          unint64_t v1569 = v9;
          v1612 = v14;
          unint64_t v1563 = v9 - 32;
          while (1)
          {
            v1596 = v22;
            int64_t v1623 = v19 - v22;
            unsigned int v1627 = 0;
            uint64_t v27 = *(void *)(v5 + 8);
            uint64_t v28 = *(unsigned int *)(v5 + 36);
            v1610 = v19;
            if (v27 + v28 > (unint64_t)v19)
            {
              unsigned int v29 = 0;
              unint64_t v7 = a2;
              int32x2_t v22 = v1596;
              goto LABEL_431;
            }
            int v30 = *(_DWORD *)(v5 + 208);
            for (unsigned int i = v19 - v27;
                  v28 < i;
            *(_DWORD *)(v5 + 36) = i;
            if ((v30 - 6) < 2) {
              break;
            }
            if (v30 == 5)
            {
              unsigned int v29 = 0;
              if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
                unsigned int v122 = 4095;
              }
              else {
                unsigned int v122 = *(_DWORD *)(v5 + 212);
              }
              uint64_t v123 = *(void *)(v5 + 8);
              int v124 = v1610 - v123;
              int v125 = -1 << (*(_DWORD *)(v5 + 196) - 1);
              int v126 = ~v125;
              unsigned int v127 = v1610 - v123 + v125 + 1;
              if ((int)v1610 - (int)v123 < ~v125) {
                unsigned int v127 = 0;
              }
              unsigned int v1590 = v127;
              unsigned int v128 = 1 << *(_DWORD *)(v5 + 192);
              if (v124 - *(_DWORD *)(v5 + 28) > v128 && *(_DWORD *)(v5 + 32) == 0) {
                unsigned int v130 = v124 - v128;
              }
              else {
                unsigned int v130 = *(_DWORD *)(v5 + 28);
              }
              if (v130 <= 1) {
                int v131 = 1;
              }
              else {
                int v131 = v130;
              }
              unsigned int v1606 = v131;
              unsigned int v132 = v124 - *(_DWORD *)(v5 + 24);
              unsigned int v133 = v1632 - 1;
              unsigned int v134 = (char *)(v1610 + 12);
              int v1574 = *(_DWORD *)(v5 + 204);
              unint64_t v135 = (0xCF1BBCDCBB000000 * *(void *)v1610) >> -(char)*(_DWORD *)(v5 + 200);
              uint64_t v1584 = *(void *)(v5 + 48);
              unsigned int v136 = *(_DWORD *)(v1584 + 4 * v135);
              uint64_t v137 = v1623 == 0;
              uint64_t v138 = *(void *)(v5 + 64);
              unint64_t v82 = (unsigned int *)(v138 + 8 * (v124 & ~v125));
              int v83 = v82 + 1;
              int v84 = v124 + 9;
              unsigned int v1631 = 0;
              if (v1623) {
                unint64_t v139 = 3;
              }
              else {
                unint64_t v139 = 4;
              }
              unint64_t v140 = v1610 + 4;
              if (v1623) {
                int v141 = 0;
              }
              else {
                int v141 = -1;
              }
              unint64_t v142 = (v1556 - 1);
              while (1)
              {
                unsigned int v143 = v133;
                if (v137 != 3) {
                  unsigned int v143 = *((_DWORD *)&v1632 + v137);
                }
                if (v143 - 1 >= v132)
                {
                  unsigned int v144 = 0;
                  goto LABEL_223;
                }
                unsigned int v144 = 0;
                if (v124 - v143 >= v130 && *(_DWORD *)v1610 == *(_DWORD *)&v1610[-v143]) {
                  break;
                }
LABEL_223:
                if (v142 < v144)
                {
                  unint64_t v150 = &v1612[2 * v29];
                  *unint64_t v150 = v137 + v141;
                  v150[1] = v144;
                  ++v29;
                  if (v144 > v122) {
                    goto LABEL_429;
                  }
                  unint64_t v142 = v144;
                  if (&v1610[v144] == (unsigned __int8 *)v9) {
                    goto LABEL_429;
                  }
                }
                if (++v137 >= v139)
                {
                  *(_DWORD *)(v1584 + 4 * v135) = v124;
                  if (v136 < v1606) {
                    goto LABEL_428;
                  }
                  unint64_t v190 = 0;
                  unint64_t v191 = 0;
                  int v192 = ~(-1 << v1574);
                  int v193 = v124 + 2;
                  uint64_t v194 = v1610 + 8;
                  uint64_t v195 = v123 + 8;
                  unsigned int v196 = v1590;
                  while (1)
                  {
                    unint64_t v197 = v191 >= v190 ? v190 : v191;
                    uint64_t v198 = v123 + v136;
                    int v199 = &v1610[v197];
                    uint64_t v200 = (void *)(v198 + v197);
                    if (v1619 <= (unint64_t)&v1610[v197]) {
                      break;
                    }
                    unint64_t v201 = *(void *)v199 ^ *v200;
                    if (v201)
                    {
                      BOOL v202 = v1612;
                      unint64_t v203 = (__clz(__rbit64(v201)) >> 3) + v197;
                      if (v203 <= v142) {
                        goto LABEL_304;
                      }
                      goto LABEL_317;
                    }
                    uint64_t v209 = (char *)v194 + v197;
                    do
                    {
                      uint64_t v210 = &v209[v201];
                      if ((unint64_t)&v209[v201] >= v1619)
                      {
                        int v205 = (unsigned __int8 *)v194 + v197 + v201;
                        uint64_t v200 = (void *)(v195 + v197 + v136 + v201);
                        unsigned int v196 = v1590;
                        BOOL v202 = v1612;
                        if ((unint64_t)v205 >= v1602) {
                          goto LABEL_308;
                        }
                        goto LABEL_306;
                      }
                      uint64_t v211 = *(void *)(v195 + v197 + v136 + v201);
                      v201 += 8;
                      unint64_t v212 = *(void *)v210 ^ v211;
                      uint64_t v5 = a1;
                    }
                    while (!v212);
                    BOOL v202 = v1612;
                    unsigned int v196 = v1590;
                    unint64_t v203 = v201 + (__clz(__rbit64(v212)) >> 3) + v197;
                    if (v203 <= v142)
                    {
LABEL_304:
                      unint64_t v204 = v1610;
                      goto LABEL_323;
                    }
LABEL_317:
                    if (v203 > v84 - v136) {
                      int v84 = v136 + v203;
                    }
                    int v206 = &v202[2 * v29];
                    *int v206 = v193 - v136;
                    v206[1] = v203;
                    ++v29;
                    unint64_t v204 = v1610;
                    BOOL v207 = v203 > 0x1000 || &v1610[v203] == (unsigned __int8 *)v9;
                    unint64_t v142 = v203;
                    if (v207) {
                      goto LABEL_428;
                    }
LABEL_323:
                    unint64_t v208 = (unsigned int *)(v138 + 8 * (v136 & v126));
                    if (*(unsigned __int8 *)(v198 + v203) < *((unsigned __int8 *)v204 + v203))
                    {
                      *unint64_t v82 = v136;
                      if (v136 > v196)
                      {
                        ++v208;
                        unint64_t v191 = v203;
                        unint64_t v82 = v208;
                        goto LABEL_328;
                      }
LABEL_426:
                      unint64_t v82 = &v1631;
                      goto LABEL_428;
                    }
                    *int v83 = v136;
                    if (v136 <= v196) {
                      goto LABEL_427;
                    }
                    unint64_t v190 = v203;
                    int v83 = (unsigned int *)(v138 + 8 * (v136 & v126));
LABEL_328:
                    BOOL v294 = v192-- != 0;
                    if (v294)
                    {
                      unsigned int v136 = *v208;
                      if (*v208 >= v1606) {
                        continue;
                      }
                    }
                    goto LABEL_428;
                  }
                  int v205 = &v1610[v197];
                  BOOL v202 = v1612;
                  if ((unint64_t)v199 >= v1602) {
                    goto LABEL_308;
                  }
LABEL_306:
                  if (*(_DWORD *)v200 == *(_DWORD *)v205)
                  {
                    v205 += 4;
                    uint64_t v200 = (void *)((char *)v200 + 4);
                  }
LABEL_308:
                  if ((unint64_t)v205 >= v1598)
                  {
                    if ((unint64_t)v205 >= v9) {
                      goto LABEL_316;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v200 == *(unsigned __int16 *)v205)
                    {
                      v205 += 2;
                      uint64_t v200 = (void *)((char *)v200 + 2);
                    }
                    if ((unint64_t)v205 >= v9)
                    {
LABEL_316:
                      unint64_t v203 = v205 - v1610;
                      if (v205 - v1610 <= v142) {
                        goto LABEL_304;
                      }
                      goto LABEL_317;
                    }
                  }
                  if (*(unsigned __int8 *)v200 == *v205) {
                    ++v205;
                  }
                  goto LABEL_316;
                }
              }
              uint64_t v145 = -(uint64_t)v143;
              int v146 = (char *)v140 - v143;
              if (v1619 <= (unint64_t)v140)
              {
                uint64_t v149 = (char *)(v1610 + 4);
                if ((unint64_t)v140 >= v1602) {
                  goto LABEL_213;
                }
              }
              else
              {
                unint64_t v147 = *v140 ^ *(void *)v146;
                if (v147)
                {
                  unint64_t v148 = __clz(__rbit64(v147)) >> 3;
                  goto LABEL_222;
                }
                while (1)
                {
                  uint64_t v149 = &v134[v147];
                  if ((unint64_t)&v134[v147] >= v1619) {
                    break;
                  }
                  uint64_t v151 = *(void *)&v134[v145 + v147];
                  v147 += 8;
                  unint64_t v152 = *(void *)v149 ^ v151;
                  if (v152)
                  {
                    unint64_t v148 = v147 + (__clz(__rbit64(v152)) >> 3);
                    uint64_t v5 = a1;
LABEL_222:
                    unsigned int v144 = v148 + 4;
                    goto LABEL_223;
                  }
                }
                int v146 = &v149[v145];
                uint64_t v5 = a1;
                if ((unint64_t)v149 >= v1602)
                {
LABEL_213:
                  if ((unint64_t)v149 >= v1598)
                  {
                    if ((unint64_t)v149 < v9) {
                      goto LABEL_219;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v146 == *(unsigned __int16 *)v149)
                    {
                      v149 += 2;
                      v146 += 2;
                    }
                    if ((unint64_t)v149 >= v9) {
                      goto LABEL_221;
                    }
LABEL_219:
                    if (*v146 == *v149) {
                      LODWORD(v149) = v149 + 1;
                    }
                  }
LABEL_221:
                  LODWORD(v148) = v149 - v140;
                  goto LABEL_222;
                }
              }
              if (*(_DWORD *)v146 == *(_DWORD *)v149)
              {
                v149 += 4;
                v146 += 4;
              }
              goto LABEL_213;
            }
            if (v30 != 3)
            {
              unsigned int v29 = 0;
              if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
                unsigned int v153 = 4095;
              }
              else {
                unsigned int v153 = *(_DWORD *)(v5 + 212);
              }
              uint64_t v154 = *(void *)(v5 + 8);
              int v155 = v1610 - v154;
              int v156 = -1 << (*(_DWORD *)(v5 + 196) - 1);
              int v157 = ~v156;
              unsigned int v158 = v1610 - v154 + v156 + 1;
              if ((int)v1610 - (int)v154 < ~v156) {
                unsigned int v158 = 0;
              }
              unsigned int v1591 = v158;
              unsigned int v159 = 1 << *(_DWORD *)(v5 + 192);
              if (v155 - *(_DWORD *)(v5 + 28) > v159 && *(_DWORD *)(v5 + 32) == 0) {
                unsigned int v161 = v155 - v159;
              }
              else {
                unsigned int v161 = *(_DWORD *)(v5 + 28);
              }
              if (v161 <= 1) {
                int v162 = 1;
              }
              else {
                int v162 = v161;
              }
              unsigned int v1607 = v162;
              unsigned int v163 = v155 - *(_DWORD *)(v5 + 24);
              unsigned int v164 = v1632 - 1;
              unsigned int v165 = (char *)(v1610 + 12);
              int v1575 = *(_DWORD *)(v5 + 204);
              uint64_t v166 = (-1640531535 * *(_DWORD *)v1610) >> -(char)*(_DWORD *)(v5 + 200);
              uint64_t v1585 = *(void *)(v5 + 48);
              unsigned int v167 = *(_DWORD *)(v1585 + 4 * v166);
              uint64_t v168 = v1623 == 0;
              uint64_t v169 = *(void *)(v5 + 64);
              unint64_t v82 = (unsigned int *)(v169 + 8 * (v155 & ~v156));
              int v83 = v82 + 1;
              int v84 = v155 + 9;
              unsigned int v1631 = 0;
              if (v1623) {
                unint64_t v170 = 3;
              }
              else {
                unint64_t v170 = 4;
              }
              uint64_t v171 = v1610 + 4;
              if (v1623) {
                int v172 = 0;
              }
              else {
                int v172 = -1;
              }
              unint64_t v173 = (v1556 - 1);
              while (1)
              {
                unsigned int v174 = v164;
                if (v168 != 3) {
                  unsigned int v174 = *((_DWORD *)&v1632 + v168);
                }
                if (v174 - 1 >= v163)
                {
                  unsigned int v175 = 0;
                  goto LABEL_277;
                }
                unsigned int v175 = 0;
                if (v155 - v174 >= v161 && *(_DWORD *)v1610 == *(_DWORD *)&v1610[-v174]) {
                  break;
                }
LABEL_277:
                if (v173 < v175)
                {
                  unint64_t v181 = &v1612[2 * v29];
                  _DWORD *v181 = v168 + v172;
                  v181[1] = v175;
                  ++v29;
                  if (v175 > v153) {
                    goto LABEL_429;
                  }
                  unint64_t v173 = v175;
                  if (&v1610[v175] == (unsigned __int8 *)v9) {
                    goto LABEL_429;
                  }
                }
                if (++v168 >= v170)
                {
                  *(_DWORD *)(v1585 + 4 * v166) = v155;
                  if (v167 < v1607) {
                    goto LABEL_428;
                  }
                  unint64_t v213 = 0;
                  unint64_t v214 = 0;
                  int v215 = ~(-1 << v1575);
                  int v216 = v155 + 2;
                  unint64_t v217 = v1610 + 8;
                  uint64_t v218 = v154 + 8;
                  unsigned int v219 = v1591;
                  while (1)
                  {
                    unint64_t v220 = v214 >= v213 ? v213 : v214;
                    uint64_t v221 = v154 + v167;
                    unint64_t v222 = &v1610[v220];
                    int v223 = (void *)(v221 + v220);
                    if (v1619 <= (unint64_t)&v1610[v220]) {
                      break;
                    }
                    unint64_t v224 = *(void *)v222 ^ *v223;
                    if (v224)
                    {
                      unint64_t v225 = v1612;
                      unint64_t v226 = (__clz(__rbit64(v224)) >> 3) + v220;
                      if (v226 <= v173) {
                        goto LABEL_347;
                      }
                      goto LABEL_360;
                    }
                    BOOL v232 = (char *)v217 + v220;
                    do
                    {
                      unint64_t v233 = &v232[v224];
                      if ((unint64_t)&v232[v224] >= v1619)
                      {
                        uint64_t v228 = (unsigned __int8 *)v217 + v220 + v224;
                        int v223 = (void *)(v218 + v220 + v167 + v224);
                        unsigned int v219 = v1591;
                        unint64_t v225 = v1612;
                        if ((unint64_t)v228 >= v1602) {
                          goto LABEL_351;
                        }
                        goto LABEL_349;
                      }
                      uint64_t v234 = *(void *)(v218 + v220 + v167 + v224);
                      v224 += 8;
                      unint64_t v235 = *(void *)v233 ^ v234;
                      uint64_t v5 = a1;
                    }
                    while (!v235);
                    unint64_t v225 = v1612;
                    unsigned int v219 = v1591;
                    unint64_t v226 = v224 + (__clz(__rbit64(v235)) >> 3) + v220;
                    if (v226 <= v173)
                    {
LABEL_347:
                      int v227 = v1610;
                      goto LABEL_366;
                    }
LABEL_360:
                    if (v226 > v84 - v167) {
                      int v84 = v167 + v226;
                    }
                    unint64_t v229 = &v225[2 * v29];
                    *unint64_t v229 = v216 - v167;
                    v229[1] = v226;
                    ++v29;
                    int v227 = v1610;
                    BOOL v230 = v226 > 0x1000 || &v1610[v226] == (unsigned __int8 *)v9;
                    unint64_t v173 = v226;
                    if (v230) {
                      goto LABEL_428;
                    }
LABEL_366:
                    unsigned int v231 = (unsigned int *)(v169 + 8 * (v167 & v157));
                    if (*(unsigned __int8 *)(v221 + v226) >= *((unsigned __int8 *)v227 + v226))
                    {
                      *int v83 = v167;
                      if (v167 > v219)
                      {
                        unint64_t v213 = v226;
                        int v83 = (unsigned int *)(v169 + 8 * (v167 & v157));
                        goto LABEL_371;
                      }
                      goto LABEL_427;
                    }
                    *unint64_t v82 = v167;
                    if (v167 <= v219) {
                      goto LABEL_426;
                    }
                    ++v231;
                    unint64_t v214 = v226;
                    unint64_t v82 = v231;
LABEL_371:
                    BOOL v294 = v215-- != 0;
                    if (v294)
                    {
                      unsigned int v167 = *v231;
                      if (*v231 >= v1607) {
                        continue;
                      }
                    }
LABEL_428:
                    *int v83 = 0;
                    *unint64_t v82 = 0;
                    *(_DWORD *)(v5 + 36) = v84 - 8;
                    goto LABEL_429;
                  }
                  uint64_t v228 = &v1610[v220];
                  unint64_t v225 = v1612;
                  if ((unint64_t)v222 >= v1602) {
                    goto LABEL_351;
                  }
LABEL_349:
                  if (*(_DWORD *)v223 == *(_DWORD *)v228)
                  {
                    v228 += 4;
                    int v223 = (void *)((char *)v223 + 4);
                  }
LABEL_351:
                  if ((unint64_t)v228 >= v1598)
                  {
                    if ((unint64_t)v228 >= v9) {
                      goto LABEL_359;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v223 == *(unsigned __int16 *)v228)
                    {
                      v228 += 2;
                      int v223 = (void *)((char *)v223 + 2);
                    }
                    if ((unint64_t)v228 >= v9)
                    {
LABEL_359:
                      unint64_t v226 = v228 - v1610;
                      if (v228 - v1610 <= v173) {
                        goto LABEL_347;
                      }
                      goto LABEL_360;
                    }
                  }
                  if (*(unsigned __int8 *)v223 == *v228) {
                    ++v228;
                  }
                  goto LABEL_359;
                }
              }
              uint64_t v176 = -(uint64_t)v174;
              int v177 = (char *)v171 - v174;
              if (v1619 <= (unint64_t)v171)
              {
                int v180 = (char *)(v1610 + 4);
                if ((unint64_t)v171 >= v1602) {
                  goto LABEL_267;
                }
              }
              else
              {
                unint64_t v178 = *v171 ^ *(void *)v177;
                if (v178)
                {
                  unint64_t v179 = __clz(__rbit64(v178)) >> 3;
                  goto LABEL_276;
                }
                while (1)
                {
                  int v180 = &v165[v178];
                  if ((unint64_t)&v165[v178] >= v1619) {
                    break;
                  }
                  uint64_t v182 = *(void *)&v165[v176 + v178];
                  v178 += 8;
                  unint64_t v183 = *(void *)v180 ^ v182;
                  if (v183)
                  {
                    unint64_t v179 = v178 + (__clz(__rbit64(v183)) >> 3);
                    uint64_t v5 = a1;
LABEL_276:
                    unsigned int v175 = v179 + 4;
                    goto LABEL_277;
                  }
                }
                int v177 = &v180[v176];
                uint64_t v5 = a1;
                if ((unint64_t)v180 >= v1602)
                {
LABEL_267:
                  if ((unint64_t)v180 >= v1598)
                  {
                    if ((unint64_t)v180 < v9) {
                      goto LABEL_273;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v177 == *(unsigned __int16 *)v180)
                    {
                      v180 += 2;
                      v177 += 2;
                    }
                    if ((unint64_t)v180 >= v9) {
                      goto LABEL_275;
                    }
LABEL_273:
                    if (*v177 == *v180) {
                      LODWORD(v180) = v180 + 1;
                    }
                  }
LABEL_275:
                  LODWORD(v179) = v180 - v171;
                  goto LABEL_276;
                }
              }
              if (*(_DWORD *)v177 == *(_DWORD *)v180)
              {
                v180 += 4;
                v177 += 4;
              }
              goto LABEL_267;
            }
            unsigned int v29 = 0;
            if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
              unsigned int v32 = 4095;
            }
            else {
              unsigned int v32 = *(_DWORD *)(v5 + 212);
            }
            uint64_t v33 = *(void *)(v5 + 8);
            unsigned int v34 = v1610 - v33;
            int v35 = -1 << (*(_DWORD *)(v5 + 196) - 1);
            int v36 = ~v35;
            unsigned int v37 = v1610 - v33 + v35 + 1;
            if ((int)v1610 - (int)v33 < ~v35) {
              unsigned int v37 = 0;
            }
            unsigned int v1604 = v37;
            unsigned int v38 = 1 << *(_DWORD *)(v5 + 192);
            if (v34 - *(_DWORD *)(v5 + 28) > v38 && *(_DWORD *)(v5 + 32) == 0) {
              unsigned int v40 = v34 - v38;
            }
            else {
              unsigned int v40 = *(_DWORD *)(v5 + 28);
            }
            if (v40 <= 1) {
              unsigned int v41 = 1;
            }
            else {
              unsigned int v41 = v40;
            }
            unsigned int v42 = v34 - *(_DWORD *)(v5 + 24);
            unsigned int v43 = v1632 - 1;
            uint64_t v44 = (char *)(v1610 + 11);
            int v1572 = *(_DWORD *)(v5 + 204);
            uint64_t v1582 = (-1640531535 * *(_DWORD *)v1610) >> -(char)*(_DWORD *)(v5 + 200);
            uint64_t v1588 = *(void *)(v5 + 48);
            unsigned int v45 = *(_DWORD *)(v1588 + 4 * v1582);
            unint64_t v46 = v1623 == 0;
            uint64_t v47 = *(void *)(v5 + 64);
            unint64_t v48 = (unsigned int *)(v47 + 8 * (v34 & ~v35));
            unint64_t v49 = v48 + 1;
            unsigned int v50 = v34 + 9;
            unsigned int v1631 = 0;
            if (v1623) {
              unint64_t v51 = 3;
            }
            else {
              unint64_t v51 = 4;
            }
            unsigned int v52 = v1610 + 3;
            if (v1623) {
              int v53 = 0;
            }
            else {
              int v53 = -1;
            }
            unint64_t v54 = (v1556 - 1);
            do
            {
              unsigned int v55 = v43;
              if (v46 != 3) {
                unsigned int v55 = *((_DWORD *)&v1632 + v46);
              }
              if (v55 - 1 >= v42 || v34 - v55 < v40 || ((*(_DWORD *)&v1610[-v55] ^ *(_DWORD *)v1610) & 0xFFFFFF) != 0) {
                goto LABEL_48;
              }
              uint64_t v56 = -(uint64_t)v55;
              unsigned int v57 = (char *)v52 - v55;
              if (v1619 <= (unint64_t)v52)
              {
                uint64_t v62 = (char *)(v1610 + 3);
                if ((unint64_t)v52 < v1602)
                {
LABEL_63:
                  if (*(_DWORD *)v57 == *(_DWORD *)v62)
                  {
                    v62 += 4;
                    v57 += 4;
                  }
                }
LABEL_65:
                if ((unint64_t)v62 >= v1598)
                {
                  if ((unint64_t)v62 >= v9) {
                    goto LABEL_73;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v57 == *(unsigned __int16 *)v62)
                  {
                    v62 += 2;
                    v57 += 2;
                  }
                  if ((unint64_t)v62 >= v9)
                  {
LABEL_73:
                    unsigned int v59 = v62 - v1610;
                    unint64_t v60 = v59;
                    if (v54 < v59) {
                      goto LABEL_59;
                    }
                    goto LABEL_48;
                  }
                }
                if (*v57 == *v62) {
                  LODWORD(v62) = v62 + 1;
                }
                goto LABEL_73;
              }
              unint64_t v58 = *v52 ^ *(void *)v57;
              if (v58)
              {
                unsigned int v59 = (__clz(__rbit64(v58)) >> 3) + 3;
                unint64_t v60 = v59;
                if (v54 < v59) {
                  goto LABEL_59;
                }
                goto LABEL_48;
              }
              do
              {
                uint64_t v62 = &v44[v58];
                if ((unint64_t)&v44[v58] >= v1619)
                {
                  unsigned int v57 = &v62[v56];
                  uint64_t v5 = a1;
                  if ((unint64_t)v62 < v1602) {
                    goto LABEL_63;
                  }
                  goto LABEL_65;
                }
                uint64_t v63 = *(void *)&v44[v56 + v58];
                v58 += 8;
                unint64_t v64 = *(void *)v62 ^ v63;
              }
              while (!v64);
              uint64_t v5 = a1;
              unsigned int v59 = v58 + (__clz(__rbit64(v64)) >> 3) + 3;
              unint64_t v60 = v59;
              if (v54 >= v59) {
                goto LABEL_48;
              }
LABEL_59:
              unint64_t v61 = &v1612[2 * v29];
              *unint64_t v61 = v46 + v53;
              v61[1] = v59;
              ++v29;
              if (v59 > v32)
              {
                unint64_t v7 = a2;
                unsigned int v14 = v1612;
                goto LABEL_430;
              }
              unint64_t v54 = v60;
              if (&v1610[v60] == (unsigned __int8 *)v9) {
                goto LABEL_429;
              }
LABEL_48:
              ++v46;
            }
            while (v46 < v51);
            if (v54 > 2)
            {
              unint64_t v7 = a2;
              unsigned int v14 = v1612;
              int32x2_t v22 = v1596;
              goto LABEL_383;
            }
            uint64_t v184 = *(void *)(v5 + 56);
            int v185 = *(_DWORD *)v1610;
            int v186 = 32 - *(_DWORD *)(v5 + 40);
            unsigned int v14 = v1612;
            if (v1497 < v34)
            {
              uint64_t v187 = v1497;
              do
              {
                *(_DWORD *)(v184 + 4 * ((900185344 * *(_DWORD *)(v33 + v187)) >> v186)) = v187;
                ++v187;
              }
              while (v1610 - v33 != v187);
            }
            uint64_t v188 = *(unsigned int *)(v184 + 4 * ((900185344 * v185) >> v186));
            BOOL v189 = v188 >= v41 && (v34 - v188) >> 18 == 0;
            unint64_t v7 = a2;
            int32x2_t v22 = v1596;
            if (!v189)
            {
              unsigned int v1497 = v1610 - v33;
              goto LABEL_383;
            }
            uint64_t v705 = (_DWORD *)(v33 + v188);
            if (v1619 <= (unint64_t)v1610)
            {
              uint64_t v710 = v1610;
              if ((unint64_t)v1610 < v1602)
              {
LABEL_1089:
                if (*v705 == *(_DWORD *)v710)
                {
                  v710 += 4;
                  ++v705;
                }
              }
            }
            else
            {
              unint64_t v706 = *(void *)v1610 ^ *(void *)v705;
              if (v706)
              {
                unint64_t v707 = __clz(__rbit64(v706)) >> 3;
                unsigned int v1497 = v1610 - v33;
                if (v707 < 3) {
                  goto LABEL_383;
                }
                goto LABEL_1100;
              }
              int v712 = v1610 + 8;
              while (1)
              {
                int v713 = (void *)((char *)v712 + v706);
                if ((unint64_t)v712 + v706 >= v1619) {
                  break;
                }
                uint64_t v714 = *(void *)(v33 + v188 + 8 + v706);
                v706 += 8;
                unint64_t v715 = *v713 ^ v714;
                if (v715)
                {
                  unint64_t v707 = v706 + (__clz(__rbit64(v715)) >> 3);
                  unint64_t v7 = a2;
                  unsigned int v1497 = v1610 - v33;
                  if (v707 >= 3) {
                    goto LABEL_1100;
                  }
                  goto LABEL_383;
                }
              }
              uint64_t v710 = &v1610[v706 + 8];
              uint64_t v705 = (_DWORD *)(v33 + v188 + v706 + 8);
              unint64_t v7 = a2;
              if ((unint64_t)v710 < v1602) {
                goto LABEL_1089;
              }
            }
            if ((unint64_t)v710 >= v1598)
            {
              if ((unint64_t)v710 >= v9) {
                goto LABEL_1099;
              }
LABEL_1097:
              if (*(unsigned __int8 *)v705 == *v710) {
                ++v710;
              }
              goto LABEL_1099;
            }
            if (*(unsigned __int16 *)v705 == *(unsigned __int16 *)v710)
            {
              v710 += 2;
              uint64_t v705 = (_DWORD *)((char *)v705 + 2);
            }
            if ((unint64_t)v710 < v9) {
              goto LABEL_1097;
            }
LABEL_1099:
            unint64_t v707 = v710 - v1610;
            unsigned int v1497 = v1610 - v33;
            if ((unint64_t)(v710 - v1610) < 3) {
              goto LABEL_383;
            }
LABEL_1100:
            _DWORD *v1612 = v34 - v188 + 2;
            v1612[1] = v707;
            if (v707 > v32 || &v1610[v707] == (unsigned __int8 *)v9)
            {
              unsigned int v29 = 1;
              unsigned int v1497 = v1610 - v33;
              unsigned int v19 = v1610;
              *(_DWORD *)(v5 + 36) = v34 + 1;
              goto LABEL_431;
            }
            unsigned int v29 = 1;
            unsigned int v1497 = v1610 - v33;
            unint64_t v54 = v707;
LABEL_383:
            *(_DWORD *)(v1588 + 4 * v1582) = v34;
            if (v45 < v41) {
              goto LABEL_1110;
            }
            unint64_t v236 = 0;
            unint64_t v237 = 0;
            int v238 = ~(-1 << v1572);
            unsigned int v239 = v34 + 2;
            unsigned int v19 = v1610;
            unsigned int v240 = v1610 + 8;
            uint64_t v241 = v33 + 8;
            while (2)
            {
              if (v237 >= v236) {
                unint64_t v242 = v236;
              }
              else {
                unint64_t v242 = v237;
              }
              uint64_t v243 = v33 + v45;
              unint64_t v244 = &v19[v242];
              unint64_t v245 = (_DWORD *)(v243 + v242);
              if (v1619 <= (unint64_t)v244)
              {
                unint64_t v249 = v244;
                if ((unint64_t)v244 < v1602)
                {
LABEL_393:
                  if (*v245 == *(_DWORD *)v249)
                  {
                    v249 += 4;
                    ++v245;
                  }
                }
              }
              else
              {
                unint64_t v246 = *(void *)v244 ^ *(void *)v245;
                if (v246)
                {
                  unint64_t v247 = (__clz(__rbit64(v246)) >> 3) + v242;
                  if (v247 <= v54) {
                    goto LABEL_391;
                  }
LABEL_404:
                  if (v247 > v50 - v45) {
                    unsigned int v50 = v45 + v247;
                  }
                  unint64_t v251 = &v14[2 * v29];
                  *unint64_t v251 = v239 - v45;
                  v251[1] = v247;
                  ++v29;
                  uint64_t v248 = v1610;
                  BOOL v252 = v247 > 0x1000 || &v1610[v247] == (unsigned __int8 *)v9;
                  unint64_t v54 = v247;
                  if (v252)
                  {
                    unint64_t v7 = a2;
                    int32x2_t v22 = v1596;
                    unsigned int v19 = v1610;
                    goto LABEL_1111;
                  }
                  goto LABEL_410;
                }
                unint64_t v254 = (char *)v240 + v242;
                while (1)
                {
                  uint64_t v255 = &v254[v246];
                  if ((unint64_t)&v254[v246] >= v1619) {
                    break;
                  }
                  uint64_t v256 = *(void *)(v241 + v242 + v45 + v246);
                  v246 += 8;
                  unint64_t v257 = *(void *)v255 ^ v256;
                  if (v257)
                  {
                    unint64_t v258 = __clz(__rbit64(v257));
                    uint64_t v5 = a1;
                    unsigned int v14 = v1612;
                    unint64_t v247 = v246 + (v258 >> 3) + v242;
                    if (v247 > v54) {
                      goto LABEL_404;
                    }
                    goto LABEL_391;
                  }
                }
                unint64_t v249 = (unsigned __int8 *)v240 + v242 + v246;
                unint64_t v245 = (_DWORD *)(v241 + v242 + v45 + v246);
                uint64_t v5 = a1;
                if ((unint64_t)v249 < v1602) {
                  goto LABEL_393;
                }
              }
              if ((unint64_t)v249 >= v1598)
              {
                if ((unint64_t)v249 < v9) {
                  goto LABEL_401;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v245 == *(unsigned __int16 *)v249)
                {
                  v249 += 2;
                  unint64_t v245 = (_DWORD *)((char *)v245 + 2);
                }
                if ((unint64_t)v249 >= v9) {
                  goto LABEL_403;
                }
LABEL_401:
                if (*(unsigned __int8 *)v245 == *v249) {
                  ++v249;
                }
              }
LABEL_403:
              int64_t v250 = v249 - v244;
              unsigned int v14 = v1612;
              unint64_t v247 = v250 + v242;
              if (v247 > v54) {
                goto LABEL_404;
              }
LABEL_391:
              uint64_t v248 = v1610;
LABEL_410:
              unint64_t v253 = (unsigned int *)(v47 + 8 * (v45 & v36));
              if (*(unsigned __int8 *)(v243 + v247) < *((unsigned __int8 *)v248 + v247))
              {
                *unint64_t v48 = v45;
                int32x2_t v22 = v1596;
                if (v45 <= v1604)
                {
                  unint64_t v48 = &v1631;
                  goto LABEL_1109;
                }
                ++v253;
                unint64_t v237 = v247;
                unint64_t v48 = v253;
                goto LABEL_415;
              }
              *unint64_t v49 = v45;
              int32x2_t v22 = v1596;
              if (v45 > v1604)
              {
                unint64_t v236 = v247;
                unint64_t v49 = (unsigned int *)(v47 + 8 * (v45 & v36));
LABEL_415:
                BOOL v294 = v238-- != 0;
                unint64_t v7 = a2;
                if (!v294) {
                  goto LABEL_1110;
                }
                unsigned int v45 = *v253;
                unsigned int v19 = v1610;
                if (v45 < v41) {
                  goto LABEL_1111;
                }
                continue;
              }
              break;
            }
            unint64_t v49 = &v1631;
LABEL_1109:
            unint64_t v7 = a2;
LABEL_1110:
            unsigned int v19 = v1610;
LABEL_1111:
            *unint64_t v49 = 0;
            *unint64_t v48 = 0;
            *(_DWORD *)(v5 + 36) = v50 - 8;
LABEL_431:
            unsigned int v1627 = v29;
            unsigned int v259 = v19;
            ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1628, (uint64_t)v14, &v1627, v19 - v1571, v9 - v19);
            LODWORD(v260) = v1627;
            if (v1627)
            {
              *(_DWORD *)(v15 + 24) = v1633;
              *(void *)(v15 + 16) = v1632;
              int64_t v261 = v1623;
              *(_DWORD *)(v15 + 8) = 0;
              *(_DWORD *)(v15 + 12) = v1623;
              int v262 = *(_DWORD *)(v5 + 160);
              if (v262 != 1)
              {
                if (v1623 < 0x40) {
                  unsigned int v268 = ZSTD_LLcode_LL_Code[v1623];
                }
                else {
                  unsigned int v268 = 50 - __clz(v1623);
                }
                uint64_t v269 = 4 * v268;
                int v270 = *(_DWORD *)(v5 + 148);
                int v271 = v270 + (*(unsigned int *)((char *)LL_bits + v269) << 8);
                unsigned int v272 = *(_DWORD **)(v5 + 88);
                LODWORD(v269) = *(_DWORD *)((char *)v272 + v269) + 1;
                unsigned int v273 = __clz(v269);
                unsigned int v264 = v271 - ((v269 << 8 >> (v273 ^ 0x1F)) + ((v273 ^ 0x1F) << 8));
                *(_DWORD *)uint64_t v15 = v264;
                uint64_t v265 = (v260 - 1);
                unsigned int v266 = v14[2 * v265 + 1];
                if (v266 <= v1543)
                {
                  unsigned int v276 = *v272 + 1;
                  unsigned int v277 = __clz(v276) ^ 0x1F;
                  int v267 = v270 - ((v276 << 8 >> v277) + (v277 << 8));
                  goto LABEL_443;
                }
LABEL_441:
                unsigned int v274 = 0;
                unsigned int v275 = v14[2 * v265];
                goto LABEL_1002;
              }
              unsigned int v263 = __clz(v1623 + 1);
              unsigned int v264 = (((v1623 + 1) << 8) >> (v263 ^ 0x1F)) + ((v263 ^ 0x1F) << 8);
              *(_DWORD *)uint64_t v15 = v264;
              uint64_t v265 = (v260 - 1);
              unsigned int v266 = v14[2 * v265 + 1];
              if (v266 > v1543) {
                goto LABEL_441;
              }
              int v267 = 256;
LABEL_443:
              unsigned int v278 = (_DWORD *)(v15 + 56);
              unint64_t v279 = (v1556 - 1) & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                *(v278 - 7) = 0x40000000;
                *unsigned int v278 = 0x40000000;
                v278 += 14;
                v279 -= 2;
              }
              while (v279);
              if (v1556 - 1 != ((v1556 - 1) & 0xFFFFFFFFFFFFFFFELL))
              {
                unsigned int v280 = v1493;
                uint64_t v281 = v1495;
                do
                {
                  _DWORD *v280 = 0x40000000;
                  v280 += 7;
                  --v281;
                }
                while (v281);
              }
              uint64_t v282 = 0;
              unsigned int v283 = v267 + v264;
              if (v260 <= 1) {
                uint64_t v260 = 1;
              }
              else {
                uint64_t v260 = v260;
              }
              unsigned int v284 = v283 + 51;
              unsigned int v285 = v283 + 4096;
              unsigned int v286 = v1556;
              while (2)
              {
                unsigned int v287 = &v14[2 * v282];
                unsigned int v288 = v287[1];
                if (v286 <= v288)
                {
                  int v289 = *v287;
                  uint64_t v290 = __clz(v289 + 1) ^ 0x1F;
                  if (v262 == 1)
                  {
                    unsigned int v291 = v286 + 1;
                    if (v286 + 1 <= v288 + 1) {
                      unsigned int v291 = v288 + 1;
                    }
                    unsigned int v292 = v291 - v286;
                    unsigned int v293 = v291 - 1;
                    BOOL v294 = v292 >= 2 && v293 >= v286;
                    if (!v294)
                    {
                      unsigned int v295 = v286;
                      goto LABEL_470;
                    }
                    unsigned int v295 = v286 + (v292 & 0xFFFFFFFE);
                    unsigned int v307 = (v286 << 8) - 256;
                    unsigned int v308 = v292 & 0xFFFFFFFE;
                    uint64_t v309 = v261;
                    do
                    {
                      unsigned int v310 = __clz(v286 - 2);
                      unsigned int v311 = __clz(v286 - 1) ^ 0x1F;
                      unsigned int v312 = (_DWORD *)(v15 + 28 * v286);
                      v312[2] = v286;
                      v312[3] = v309;
                      uint64_t v313 = (_DWORD *)(v15 + 28 * (v286 + 1));
                      v313[2] = v286 + 1;
                      v313[3] = v309;
                      *unsigned int v312 = v285 + ((v307 - 256) >> (v310 ^ 0x1F)) + (((v310 ^ 0x1F) + v290) << 8);
                      v312[1] = v289;
                      *uint64_t v313 = v285 + (v307 >> v311) + ((v311 + v290) << 8);
                      v313[1] = v289;
                      v307 += 512;
                      v286 += 2;
                      v308 -= 2;
                    }
                    while (v308);
                    unsigned int v286 = v295;
                    int32x2_t v22 = v1596;
                    int64_t v261 = v309;
                    if (v292 != (v292 & 0xFFFFFFFE))
                    {
LABEL_470:
                      unsigned int v314 = (v295 << 8) - 512;
                      unsigned int v286 = v295;
                      do
                      {
                        unsigned int v315 = __clz(v286 - 2);
                        int v316 = (_DWORD *)(v15 + 28 * v286);
                        v316[2] = v286;
                        v316[3] = v261;
                        _DWORD *v316 = v285 + (v314 >> (v315 ^ 0x1F)) + (((v315 ^ 0x1F) + v290) << 8);
                        v316[1] = v289;
                        ++v286;
                        v314 += 256;
                      }
                      while (v286 <= v288);
                    }
                  }
                  else
                  {
                    uint64_t v296 = *(void *)(v5 + 96);
                    uint64_t v297 = *(void *)(v5 + 104);
                    int v298 = v284 + *(_DWORD *)(v5 + 156) + *(_DWORD *)(v5 + 152);
                    do
                    {
                      unsigned int v306 = v286 - 3;
                      if (v286 - 3 < 0x80) {
                        unsigned int v299 = ZSTD_MLcode_ML_Code[v306];
                      }
                      else {
                        unsigned int v299 = 67 - __clz(v306);
                      }
                      unsigned int v300 = *(_DWORD *)(v297 + 4 * v290) + 1;
                      unsigned int v301 = __clz(v300);
                      uint64_t v302 = 4 * v299;
                      int v303 = *(unsigned int *)((char *)ML_bits + v302);
                      LODWORD(v302) = *(_DWORD *)(v296 + v302) + 1;
                      unsigned int v304 = __clz(v302) ^ 0x1F;
                      LODWORD(v302) = v298
                                    - (v300 << 8 >> (v301 ^ 0x1F))
                                    - (v302 << 8 >> v304)
                                    + ((v290 + v303 - (v301 ^ 0x1F) - v304) << 8);
                      unsigned int v305 = (_DWORD *)(v15 + 28 * v286);
                      v305[2] = v286;
                      v305[3] = v261;
                      *unsigned int v305 = v302;
                      v305[1] = v289;
                      ++v286;
                    }
                    while (v286 <= v288);
                  }
                }
                if (++v282 != v260) {
                  continue;
                }
                break;
              }
              unsigned int v317 = v286 - 1;
              if (v286 == 1) {
                goto LABEL_998;
              }
              v1523 = v1610 + 8;
              int v318 = v1610 + 1;
              unsigned int v319 = 1;
              while (2)
              {
                unsigned int v320 = v319 - 1;
                unsigned int v321 = (int *)(v15 + 28 * (v319 - 1));
                if (v321[2]) {
                  unsigned int v322 = 1u;
                }
                else {
                  unsigned int v322 = *(_DWORD *)(v15 + 28 * v320 + 12) + 1;
                }
                uint64_t v323 = v319;
                int v324 = &v1610[v319];
                int v325 = *v321;
                int v326 = *(_DWORD *)(v5 + 160);
                if (*(_DWORD *)(v5 + 176) == 2)
                {
                  int v327 = v325 + 2048;
                  if (v326 != 1)
                  {
                    if (v322 >= 0x40) {
                      goto LABEL_483;
                    }
LABEL_489:
                    unsigned int v328 = ZSTD_LLcode_LL_Code[v322];
                    unsigned int v329 = v322 - 1;
                    if (v322 - 1 >= 0x40) {
                      goto LABEL_490;
                    }
LABEL_484:
                    unsigned int v330 = ZSTD_LLcode_LL_Code[v329];
                    goto LABEL_491;
                  }
LABEL_487:
                  unsigned int v331 = __clz(v322 + 1);
                  int v332 = ((v322 + 1) << 8 >> (v331 ^ 0x1F)) + ((v331 ^ 0x1F) << 8);
                  unsigned int v333 = __clz(v322) ^ 0x1F;
                  int v334 = -((v322 << 8 >> v333) + (v333 << 8));
                }
                else
                {
                  if (v326 == 1)
                  {
                    int v327 = v325 + 1536;
                    goto LABEL_487;
                  }
                  unsigned int v335 = *(_DWORD *)(*(void *)(v5 + 80) + 4 * *(v324 - 1)) + 1;
                  unsigned int v336 = __clz(v335);
                  int v327 = *(_DWORD *)(v5 + 144) + v325 - ((v335 << 8 >> (v336 ^ 0x1F)) + ((v336 ^ 0x1F) << 8));
                  if (v322 < 0x40) {
                    goto LABEL_489;
                  }
LABEL_483:
                  unsigned int v328 = 50 - __clz(v322);
                  unsigned int v329 = v322 - 1;
                  if (v322 - 1 < 0x40) {
                    goto LABEL_484;
                  }
LABEL_490:
                  unsigned int v330 = 50 - __clz(v329);
LABEL_491:
                  uint64_t v337 = 4 * v328;
                  int v338 = *(unsigned int *)((char *)LL_bits + v337);
                  int v339 = *(_DWORD *)(v5 + 148);
                  uint64_t v340 = *(void *)(v5 + 88);
                  LODWORD(v337) = *(_DWORD *)(v340 + v337) + 1;
                  unsigned int v341 = __clz(v337) ^ 0x1F;
                  int v332 = v339 - (v337 << 8 >> v341) + ((v338 - v341) << 8);
                  uint64_t v342 = 4 * v330;
                  int v343 = *(unsigned int *)((char *)LL_bits + v342);
                  LODWORD(v342) = *(_DWORD *)(v340 + v342) + 1;
                  LODWORD(v340) = __clz(v342) ^ 0x1F;
                  int v334 = (v342 << 8 >> v340) - v339 + ((v340 - v343) << 8);
                }
                int v344 = v332 + v327 + v334;
                uint64_t v345 = (int *)(v15 + 28 * v323);
                int v348 = *v345;
                int v346 = v345 + 2;
                int v347 = v348;
                if (v344 <= v348)
                {
                  unint64_t v355 = (int *)(v15 + 28 * v323);
                  v355[1] = 0;
                  v355[2] = 0;
                  v355[3] = v322;
                  *unint64_t v355 = v344;
                  int v347 = v344;
LABEL_497:
                  int v356 = 0;
                  uint64_t v357 = v15 + 28 * v323;
                  uint64_t v358 = v15 + 28 * v320;
                  *(void *)(v357 + 16) = *(void *)(v358 + 16);
                  *(_DWORD *)(v357 + 24) = *(_DWORD *)(v358 + 24);
                  int v359 = 1;
                  if ((unint64_t)v324 <= v1594) {
                    goto LABEL_511;
                  }
LABEL_476:
                  unsigned int v319 = v323 + 1;
                  ++v318;
                  int32x2_t v22 = v1596;
                  if (v319 > v317) {
                    goto LABEL_998;
                  }
                  continue;
                }
                break;
              }
              if (!*v346) {
                goto LABEL_497;
              }
              int v349 = (unsigned int *)(v15 + 28 * (v323 - *v346) + 16);
              unsigned int v350 = *(_DWORD *)(v15 + 28 * v323 + 4);
              if (v350 < 3)
              {
                if (*(_DWORD *)(v15 + 28 * v323 + 12)) {
                  unsigned int v360 = *(_DWORD *)(v15 + 28 * v323 + 4);
                }
                else {
                  unsigned int v360 = v350 + 1;
                }
                if (v360)
                {
                  if (v360 == 3)
                  {
                    unint64_t v352 = *v349;
                    unsigned int v354 = v352 - 1;
                  }
                  else
                  {
                    unsigned int v354 = v349[v360];
                    unint64_t v352 = *v349;
                  }
                  BOOL v658 = v360 > 1;
                  uint64_t v362 = 2;
                  if (v658) {
                    uint64_t v362 = 1;
                  }
                  unint64_t v351 = &v349[v362];
                }
                else
                {
                  unint64_t v361 = *(void *)v349;
                  unint64_t v351 = (unsigned int *)(v15 + 28 * (v323 - *v346) + 24);
                  unsigned int v354 = v361;
                  unint64_t v352 = HIDWORD(v361);
                }
              }
              else
              {
                unsigned int v353 = *v349;
                unint64_t v351 = (unsigned int *)(v15 + 28 * (v323 - *v346) + 20);
                unint64_t v352 = v353;
                unsigned int v354 = v350 - 2;
              }
              int v359 = 0;
              unsigned int v363 = *v351;
              unint64_t v364 = v354 | (v352 << 32);
              uint64_t v365 = v15 + 28 * v323;
              *(void *)(v365 + 16) = v364;
              *(_DWORD *)(v365 + 24) = v363;
              int v356 = 1;
              if ((unint64_t)v324 > v1594) {
                goto LABEL_476;
              }
LABEL_511:
              if (v323 == v317)
              {
                int32x2_t v22 = v1596;
LABEL_998:
                int v641 = (int *)(v15 + 28 * v317);
                unsigned int v275 = v641[1];
                int v1528 = *v641;
                unsigned int v266 = v641[2];
                LODWORD(v261) = v641[3];
                uint64_t v1634 = *((void *)v641 + 2);
                unsigned int v1635 = v641[6];
                if (v317 >= v261 + v266) {
                  unsigned int v274 = v317 - (v261 + v266);
                }
                else {
                  unsigned int v274 = 0;
                }
                unint64_t v7 = a2;
                if (!v266) {
                  goto LABEL_1087;
                }
                goto LABEL_1002;
              }
              if (v359) {
                int v359 = *(_DWORD *)(v15 + 28 * v323 + 12);
              }
              if (*(_DWORD *)(v5 + 160) == 1)
              {
                int v366 = 256;
              }
              else
              {
                unsigned int v367 = **(_DWORD **)(v5 + 88) + 1;
                unsigned int v368 = __clz(v367) ^ 0x1F;
                int v366 = *(_DWORD *)(v5 + 148) - ((v367 << 8 >> v368) + (v368 << 8));
              }
              int v1576 = v366;
              int v1586 = v347;
              v1541 = v346;
              int v1592 = v318;
              unsigned int v1627 = 0;
              uint64_t v369 = *(void *)(v5 + 8);
              uint64_t v370 = v5;
              uint64_t v371 = *(unsigned int *)(v5 + 36);
              int v1624 = v359;
              if (v369 + v371 > (unint64_t)v324)
              {
                unsigned int v372 = 0;
                uint64_t v5 = v370;
                unint64_t v9 = v1569;
                goto LABEL_879;
              }
              unsigned int v1535 = v356;
              int v373 = *(_DWORD *)(v370 + 208);
              v1608 = v324;
              for (unsigned int j = v324 - v369;
                    v371 < j;
              int v375 = (_DWORD *)(v15 + 28 * v323 + 16);
              *(_DWORD *)(v370 + 36) = j;
              uint64_t v5 = v370;
              if ((v373 - 6) < 2)
              {
                unsigned int v372 = 0;
                if (*(_DWORD *)(v370 + 212) >= 0xFFFu) {
                  unsigned int v408 = 4095;
                }
                else {
                  unsigned int v408 = *(_DWORD *)(v370 + 212);
                }
                uint64_t v409 = *(void *)(v370 + 8);
                int v324 = v1608;
                int v410 = v1608 - v409;
                int v411 = (char *)(v1608 + 4);
                int v1500 = *(_DWORD *)(v370 + 204);
                unint64_t v1508 = (0xCF1BBCDCBF9B0000 * *(void *)v1608) >> -(char)*(_DWORD *)(v370 + 200);
                uint64_t v1516 = *(void *)(v370 + 48);
                unsigned int v412 = *(_DWORD *)(v1516 + 4 * v1508);
                int v413 = -1 << (*(_DWORD *)(v370 + 196) - 1);
                int v414 = ~v413;
                unsigned int v415 = v1608 - v409 + v413 + 1;
                if ((int)v1608 - (int)v409 < ~v413) {
                  unsigned int v415 = 0;
                }
                unsigned int v1549 = v415;
                int v416 = *(_DWORD *)(v370 + 24);
                unsigned int v417 = 1 << *(_DWORD *)(v370 + 192);
                if (v410 - *(_DWORD *)(v370 + 28) > v417 && *(_DWORD *)(v370 + 32) == 0) {
                  unsigned int v419 = v410 - v417;
                }
                else {
                  unsigned int v419 = *(_DWORD *)(v370 + 28);
                }
                if (v419 <= 1) {
                  unsigned int v420 = 1;
                }
                else {
                  unsigned int v420 = v419;
                }
                uint64_t v421 = *(void *)(v370 + 64);
                unsigned int v422 = (unsigned int *)(v421 + 8 * (v410 & ~v413));
                v1561 = v422 + 1;
                int v423 = v410 + 9;
                unsigned int v1631 = 0;
                if (v1535) {
                  unint64_t v424 = 4;
                }
                else {
                  unint64_t v424 = 3;
                }
                unsigned int v425 = v410 - v416;
                uint64_t v426 = v1535;
                unint64_t v427 = (v1556 - 1);
                unint64_t v9 = v1569;
                uint64_t v21 = v15 + 28;
                while (2)
                {
                  if (v426 != 3)
                  {
                    unsigned int v428 = v375[v426];
                    if (v428 - 1 < v425) {
                      goto LABEL_600;
                    }
                    goto LABEL_595;
                  }
                  unsigned int v428 = *v375 - 1;
                  if (*v375 - 2 >= v425) {
                    goto LABEL_595;
                  }
LABEL_600:
                  int v429 = *(_DWORD *)v324;
                  int v430 = *(_DWORD *)&v324[-v428];
                  if (v410 - v428 < v419 || v429 != v430)
                  {
                    int v324 = v1608;
                    goto LABEL_595;
                  }
                  unsigned int v432 = &v411[-v428];
                  if (v1619 > (unint64_t)v411)
                  {
                    unsigned int v433 = v1608 + 4;
                    unint64_t v434 = *(void *)v411 ^ *(void *)v432;
                    if (v434)
                    {
                      unint64_t v435 = __clz(__rbit64(v434)) >> 3;
                    }
                    else
                    {
                      do
                      {
                        v432 += 8;
                        if ((unint64_t)++v433 >= v1619) {
                          goto LABEL_614;
                        }
                        unint64_t v436 = *v433 ^ *(void *)v432;
                      }
                      while (!v436);
                      unint64_t v435 = (char *)v433 + (__clz(__rbit64(v436)) >> 3) - v411;
                    }
                    int v324 = v1608;
                    unsigned int v437 = v435 + 4;
                    unint64_t v438 = v437;
                    if (v427 < v437) {
                      goto LABEL_622;
                    }
                    goto LABEL_595;
                  }
                  unsigned int v433 = v1608 + 4;
LABEL_614:
                  if ((unint64_t)v433 >= v1602)
                  {
                    if ((unint64_t)v433 >= v1598) {
                      goto LABEL_618;
                    }
                  }
                  else
                  {
                    if (*(_DWORD *)v432 == *(_DWORD *)v433)
                    {
                      unsigned int v433 = (void *)((char *)v433 + 4);
                      v432 += 4;
                    }
                    if ((unint64_t)v433 >= v1598)
                    {
LABEL_618:
                      if ((unint64_t)v433 < v1569) {
                        goto LABEL_619;
                      }
                      goto LABEL_621;
                    }
                  }
                  if (*(unsigned __int16 *)v432 == *(unsigned __int16 *)v433)
                  {
                    unsigned int v433 = (void *)((char *)v433 + 2);
                    v432 += 2;
                  }
                  if ((unint64_t)v433 < v1569)
                  {
LABEL_619:
                    if (*v432 == *(unsigned char *)v433) {
                      LODWORD(v433) = v433 + 1;
                    }
                  }
LABEL_621:
                  int v324 = v1608;
                  unsigned int v437 = v433 - v1608;
                  unint64_t v438 = v437;
                  if (v427 >= v437) {
                    goto LABEL_595;
                  }
LABEL_622:
                  uint64_t v439 = &v1612[2 * v372];
                  _DWORD *v439 = v426 + ((int)(v1535 << 31) >> 31);
                  v439[1] = v437;
                  ++v372;
                  if (v437 > v408) {
                    goto LABEL_878;
                  }
                  unint64_t v427 = v438;
                  if (&v324[v438] == (unsigned __int8 *)v1569) {
                    goto LABEL_878;
                  }
LABEL_595:
                  if (++v426 < v424) {
                    continue;
                  }
                  break;
                }
                *(_DWORD *)(v1516 + 4 * v1508) = v410;
                if (v412 < v420) {
                  goto LABEL_877;
                }
                unint64_t v440 = 0;
                unint64_t v441 = 0;
                int v442 = ~(-1 << v1500);
                int v443 = v410 + 2;
                v1536 = (char *)v1523 + v323;
                uint64_t v444 = v409 + 8;
                while (2)
                {
                  if (v441 >= v440) {
                    unint64_t v445 = v440;
                  }
                  else {
                    unint64_t v445 = v441;
                  }
                  uint64_t v446 = v409 + v412;
                  uint64_t v447 = (char *)&v324[v445];
                  unint64_t v448 = (void *)(v446 + v445);
                  if (v1619 <= (unint64_t)&v324[v445])
                  {
                    int v452 = (char *)&v324[v445];
                    if ((unint64_t)v447 >= v1602) {
                      goto LABEL_642;
                    }
                  }
                  else
                  {
                    unint64_t v449 = *(void *)v447 ^ *v448;
                    if (v449)
                    {
                      unint64_t v450 = (__clz(__rbit64(v449)) >> 3) + v445;
                      v451 = v1612;
                      if (v450 <= v427) {
                        goto LABEL_657;
                      }
LABEL_651:
                      if (v450 > v423 - v412) {
                        int v423 = v412 + v450;
                      }
                      unint64_t v453 = &v451[2 * v372];
                      *unint64_t v453 = v443 - v412;
                      v453[1] = v450;
                      ++v372;
                      BOOL v454 = v450 > 0x1000 || &v324[v450] == (unsigned __int8 *)v1569;
                      unint64_t v427 = v450;
                      if (v454) {
                        goto LABEL_877;
                      }
LABEL_657:
                      unint64_t v455 = (unsigned int *)(v421 + 8 * (v412 & v414));
                      if (*(unsigned __int8 *)(v446 + v450) >= v324[v450])
                      {
                        unsigned int *v1561 = v412;
                        if (v412 <= v1549)
                        {
LABEL_875:
                          v1561 = &v1631;
                          goto LABEL_877;
                        }
                        unint64_t v440 = v450;
                        v1561 = (unsigned int *)(v421 + 8 * (v412 & v414));
                      }
                      else
                      {
                        *unsigned int v422 = v412;
                        if (v412 <= v1549)
                        {
LABEL_876:
                          unsigned int v422 = &v1631;
                          goto LABEL_877;
                        }
                        ++v455;
                        unint64_t v441 = v450;
                        unsigned int v422 = v455;
                      }
                      BOOL v294 = v442-- != 0;
                      if (!v294) {
                        goto LABEL_877;
                      }
                      unsigned int v412 = *v455;
                      if (*v455 < v420) {
                        goto LABEL_877;
                      }
                      continue;
                    }
                    uint64_t v456 = 0;
                    uint64_t v457 = &v1536[v445];
                    while (1)
                    {
                      unsigned int v458 = &v457[v456];
                      if ((unint64_t)&v457[v456] >= v1619) {
                        break;
                      }
                      uint64_t v459 = *(void *)(v444 + v445 + v412 + v456);
                      v456 += 8;
                      unint64_t v460 = *(void *)v458 ^ v459;
                      if (v460)
                      {
                        uint64_t v461 = v456 + (__clz(__rbit64(v460)) >> 3);
                        uint64_t v5 = a1;
                        uint64_t v21 = v15 + 28;
                        int v324 = v1608;
                        unint64_t v450 = v461 + v445;
                        v451 = v1612;
                        if (v450 <= v427) {
                          goto LABEL_657;
                        }
                        goto LABEL_651;
                      }
                    }
                    int v452 = &v1536[v445 + v456];
                    unint64_t v448 = (void *)(v444 + v445 + v412 + v456);
                    uint64_t v5 = a1;
                    uint64_t v21 = v15 + 28;
                    int v324 = v1608;
                    if ((unint64_t)v452 >= v1602)
                    {
LABEL_642:
                      if ((unint64_t)v452 >= v1598)
                      {
                        if ((unint64_t)v452 >= v1569) {
                          goto LABEL_650;
                        }
                      }
                      else
                      {
                        if (*(unsigned __int16 *)v448 == *(unsigned __int16 *)v452)
                        {
                          v452 += 2;
                          unint64_t v448 = (void *)((char *)v448 + 2);
                        }
                        if ((unint64_t)v452 >= v1569)
                        {
LABEL_650:
                          unint64_t v450 = v452 - v447 + v445;
                          v451 = v1612;
                          if (v450 <= v427) {
                            goto LABEL_657;
                          }
                          goto LABEL_651;
                        }
                      }
                      int v324 = v1608;
                      if (*(unsigned __int8 *)v448 == *v452) {
                        ++v452;
                      }
                      goto LABEL_650;
                    }
                  }
                  break;
                }
                if (*(_DWORD *)v448 == *(_DWORD *)v452)
                {
                  v452 += 4;
                  unint64_t v448 = (void *)((char *)v448 + 4);
                }
                goto LABEL_642;
              }
              unint64_t v9 = v1569;
              uint64_t v21 = v15 + 28;
              int v324 = v1608;
              if (v373 == 5)
              {
                unsigned int v372 = 0;
                if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
                  unsigned int v462 = 4095;
                }
                else {
                  unsigned int v462 = *(_DWORD *)(v5 + 212);
                }
                uint64_t v463 = *(void *)(v5 + 8);
                int v464 = v1608 - v463;
                int v465 = (char *)(v1608 + 4);
                int v1501 = *(_DWORD *)(v5 + 204);
                unint64_t v1509 = (0xCF1BBCDCBB000000 * *(void *)v1608) >> -(char)*(_DWORD *)(v5 + 200);
                uint64_t v1517 = *(void *)(v5 + 48);
                unsigned int v466 = *(_DWORD *)(v1517 + 4 * v1509);
                int v467 = -1 << (*(_DWORD *)(v5 + 196) - 1);
                int v468 = ~v467;
                unsigned int v469 = v1608 - v463 + v467 + 1;
                if ((int)v1608 - (int)v463 < ~v467) {
                  unsigned int v469 = 0;
                }
                unsigned int v1550 = v469;
                int v470 = *(_DWORD *)(v5 + 24);
                unsigned int v471 = 1 << *(_DWORD *)(v5 + 192);
                if (v464 - *(_DWORD *)(v5 + 28) > v471 && *(_DWORD *)(v5 + 32) == 0) {
                  unsigned int v473 = v464 - v471;
                }
                else {
                  unsigned int v473 = *(_DWORD *)(v5 + 28);
                }
                if (v473 <= 1) {
                  unsigned int v474 = 1;
                }
                else {
                  unsigned int v474 = v473;
                }
                uint64_t v475 = *(void *)(v5 + 64);
                unsigned int v422 = (unsigned int *)(v475 + 8 * (v464 & ~v467));
                v1561 = v422 + 1;
                int v423 = v464 + 9;
                unsigned int v1631 = 0;
                if (v1535) {
                  unint64_t v476 = 4;
                }
                else {
                  unint64_t v476 = 3;
                }
                unsigned int v477 = v464 - v470;
                uint64_t v478 = v1535;
                unint64_t v479 = (v1556 - 1);
                while (2)
                {
                  if (v478 != 3)
                  {
                    unsigned int v480 = v375[v478];
                    if (v480 - 1 < v477) {
                      goto LABEL_696;
                    }
                    goto LABEL_691;
                  }
                  unsigned int v480 = *v375 - 1;
                  if (*v375 - 2 >= v477) {
                    goto LABEL_691;
                  }
LABEL_696:
                  int v481 = *(_DWORD *)v324;
                  int v482 = *(_DWORD *)&v324[-v480];
                  if (v464 - v480 < v473 || v481 != v482)
                  {
                    int v324 = v1608;
                    goto LABEL_691;
                  }
                  uint64_t v484 = &v465[-v480];
                  if (v1619 > (unint64_t)v465)
                  {
                    uint64_t v485 = v1608 + 4;
                    unint64_t v486 = *(void *)v465 ^ *(void *)v484;
                    if (v486)
                    {
                      unint64_t v487 = __clz(__rbit64(v486)) >> 3;
                    }
                    else
                    {
                      do
                      {
                        v484 += 8;
                        if ((unint64_t)++v485 >= v1619) {
                          goto LABEL_710;
                        }
                        unint64_t v488 = *v485 ^ *(void *)v484;
                      }
                      while (!v488);
                      unint64_t v487 = (char *)v485 + (__clz(__rbit64(v488)) >> 3) - v465;
                    }
                    int v324 = v1608;
                    unsigned int v489 = v487 + 4;
                    unint64_t v490 = v489;
                    if (v479 < v489) {
                      goto LABEL_718;
                    }
                    goto LABEL_691;
                  }
                  uint64_t v485 = v1608 + 4;
LABEL_710:
                  if ((unint64_t)v485 >= v1602)
                  {
                    if ((unint64_t)v485 >= v1598) {
                      goto LABEL_714;
                    }
                  }
                  else
                  {
                    if (*(_DWORD *)v484 == *(_DWORD *)v485)
                    {
                      uint64_t v485 = (void *)((char *)v485 + 4);
                      v484 += 4;
                    }
                    if ((unint64_t)v485 >= v1598)
                    {
LABEL_714:
                      if ((unint64_t)v485 < v1569) {
                        goto LABEL_715;
                      }
                      goto LABEL_717;
                    }
                  }
                  if (*(unsigned __int16 *)v484 == *(unsigned __int16 *)v485)
                  {
                    uint64_t v485 = (void *)((char *)v485 + 2);
                    v484 += 2;
                  }
                  if ((unint64_t)v485 < v1569)
                  {
LABEL_715:
                    if (*v484 == *(unsigned char *)v485) {
                      LODWORD(v485) = v485 + 1;
                    }
                  }
LABEL_717:
                  int v324 = v1608;
                  unsigned int v489 = v485 - v1608;
                  unint64_t v490 = v489;
                  if (v479 >= v489) {
                    goto LABEL_691;
                  }
LABEL_718:
                  unint64_t v491 = &v1612[2 * v372];
                  *unint64_t v491 = v478 + ((int)(v1535 << 31) >> 31);
                  v491[1] = v489;
                  ++v372;
                  if (v489 > v462) {
                    goto LABEL_878;
                  }
                  unint64_t v479 = v490;
                  if (&v324[v490] == (unsigned __int8 *)v1569) {
                    goto LABEL_878;
                  }
LABEL_691:
                  if (++v478 < v476) {
                    continue;
                  }
                  break;
                }
                *(_DWORD *)(v1517 + 4 * v1509) = v464;
                if (v466 < v474) {
                  goto LABEL_877;
                }
                unint64_t v528 = 0;
                unint64_t v529 = 0;
                int v530 = ~(-1 << v1501);
                int v531 = v464 + 2;
                v1537 = (char *)v1523 + v323;
                uint64_t v532 = v463 + 8;
                while (2)
                {
                  if (v529 >= v528) {
                    unint64_t v533 = v528;
                  }
                  else {
                    unint64_t v533 = v529;
                  }
                  uint64_t v534 = v463 + v466;
                  uint64_t v535 = (char *)&v324[v533];
                  uint64_t v536 = (void *)(v534 + v533);
                  if (v1619 <= (unint64_t)&v324[v533])
                  {
                    uint64_t v540 = (char *)&v324[v533];
                    if ((unint64_t)v535 >= v1602) {
                      goto LABEL_801;
                    }
                  }
                  else
                  {
                    unint64_t v537 = *(void *)v535 ^ *v536;
                    if (v537)
                    {
                      unint64_t v538 = (__clz(__rbit64(v537)) >> 3) + v533;
                      int v539 = v1612;
                      if (v538 <= v479) {
                        goto LABEL_816;
                      }
LABEL_810:
                      if (v538 > v423 - v466) {
                        int v423 = v466 + v538;
                      }
                      unsigned int v541 = &v539[2 * v372];
                      *unsigned int v541 = v531 - v466;
                      v541[1] = v538;
                      ++v372;
                      BOOL v542 = v538 > 0x1000 || &v324[v538] == (unsigned __int8 *)v1569;
                      unint64_t v479 = v538;
                      if (v542) {
                        goto LABEL_877;
                      }
LABEL_816:
                      signed int v543 = (unsigned int *)(v475 + 8 * (v466 & v468));
                      if (*(unsigned __int8 *)(v534 + v538) >= v324[v538])
                      {
                        unsigned int *v1561 = v466;
                        if (v466 <= v1550) {
                          goto LABEL_875;
                        }
                        unint64_t v528 = v538;
                        v1561 = (unsigned int *)(v475 + 8 * (v466 & v468));
                      }
                      else
                      {
                        *unsigned int v422 = v466;
                        if (v466 <= v1550) {
                          goto LABEL_876;
                        }
                        ++v543;
                        unint64_t v529 = v538;
                        unsigned int v422 = v543;
                      }
                      BOOL v294 = v530-- != 0;
                      if (!v294) {
                        goto LABEL_877;
                      }
                      unsigned int v466 = *v543;
                      if (*v543 < v474) {
                        goto LABEL_877;
                      }
                      continue;
                    }
                    uint64_t v544 = 0;
                    int v545 = &v1537[v533];
                    while (1)
                    {
                      int v546 = &v545[v544];
                      if ((unint64_t)&v545[v544] >= v1619) {
                        break;
                      }
                      uint64_t v547 = *(void *)(v532 + v533 + v466 + v544);
                      v544 += 8;
                      unint64_t v548 = *(void *)v546 ^ v547;
                      if (v548)
                      {
                        uint64_t v549 = v544 + (__clz(__rbit64(v548)) >> 3);
                        uint64_t v5 = a1;
                        uint64_t v21 = v15 + 28;
                        int v324 = v1608;
                        unint64_t v538 = v549 + v533;
                        int v539 = v1612;
                        if (v538 <= v479) {
                          goto LABEL_816;
                        }
                        goto LABEL_810;
                      }
                    }
                    uint64_t v540 = &v1537[v533 + v544];
                    uint64_t v536 = (void *)(v532 + v533 + v466 + v544);
                    uint64_t v5 = a1;
                    uint64_t v21 = v15 + 28;
                    int v324 = v1608;
                    if ((unint64_t)v540 >= v1602)
                    {
LABEL_801:
                      if ((unint64_t)v540 >= v1598)
                      {
                        if ((unint64_t)v540 >= v1569) {
                          goto LABEL_809;
                        }
                      }
                      else
                      {
                        if (*(unsigned __int16 *)v536 == *(unsigned __int16 *)v540)
                        {
                          v540 += 2;
                          uint64_t v536 = (void *)((char *)v536 + 2);
                        }
                        if ((unint64_t)v540 >= v1569)
                        {
LABEL_809:
                          unint64_t v538 = v540 - v535 + v533;
                          int v539 = v1612;
                          if (v538 <= v479) {
                            goto LABEL_816;
                          }
                          goto LABEL_810;
                        }
                      }
                      int v324 = v1608;
                      if (*(unsigned __int8 *)v536 == *v540) {
                        ++v540;
                      }
                      goto LABEL_809;
                    }
                  }
                  break;
                }
                if (*(_DWORD *)v536 == *(_DWORD *)v540)
                {
                  v540 += 4;
                  uint64_t v536 = (void *)((char *)v536 + 4);
                }
                goto LABEL_801;
              }
              if (v373 != 3)
              {
                unsigned int v372 = 0;
                if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
                  unsigned int v492 = 4095;
                }
                else {
                  unsigned int v492 = *(_DWORD *)(v5 + 212);
                }
                uint64_t v493 = *(void *)(v5 + 8);
                int v494 = v1608 - v493;
                uint64_t v495 = (char *)(v1608 + 4);
                int v1502 = *(_DWORD *)(v5 + 204);
                uint64_t v1510 = (-1640531535 * *(_DWORD *)v1608) >> -(char)*(_DWORD *)(v5 + 200);
                uint64_t v1518 = *(void *)(v5 + 48);
                unsigned int v496 = *(_DWORD *)(v1518 + 4 * v1510);
                int v497 = -1 << (*(_DWORD *)(v5 + 196) - 1);
                int v498 = ~v497;
                unsigned int v499 = v1608 - v493 + v497 + 1;
                if ((int)v1608 - (int)v493 < ~v497) {
                  unsigned int v499 = 0;
                }
                unsigned int v1551 = v499;
                int v500 = *(_DWORD *)(v5 + 24);
                unsigned int v501 = 1 << *(_DWORD *)(v5 + 192);
                if (v494 - *(_DWORD *)(v5 + 28) > v501 && *(_DWORD *)(v5 + 32) == 0) {
                  unsigned int v503 = v494 - v501;
                }
                else {
                  unsigned int v503 = *(_DWORD *)(v5 + 28);
                }
                if (v503 <= 1) {
                  unsigned int v504 = 1;
                }
                else {
                  unsigned int v504 = v503;
                }
                uint64_t v505 = *(void *)(v5 + 64);
                unsigned int v422 = (unsigned int *)(v505 + 8 * (v494 & ~v497));
                v1561 = v422 + 1;
                int v423 = v494 + 9;
                unsigned int v1631 = 0;
                if (v1535) {
                  unint64_t v506 = 4;
                }
                else {
                  unint64_t v506 = 3;
                }
                unsigned int v507 = v494 - v500;
                uint64_t v508 = v1535;
                unint64_t v509 = (v1556 - 1);
                while (1)
                {
                  if (v508 == 3)
                  {
                    unsigned int v510 = *v375 - 1;
                    if (*v375 - 2 >= v507) {
                      goto LABEL_744;
                    }
                  }
                  else
                  {
                    unsigned int v510 = v375[v508];
                    if (v510 - 1 >= v507) {
                      goto LABEL_744;
                    }
                  }
                  int v511 = *(_DWORD *)v324;
                  int v512 = *(_DWORD *)&v324[-v510];
                  if (v494 - v510 < v503 || v511 != v512)
                  {
                    int v324 = v1608;
                    goto LABEL_744;
                  }
                  unint64_t v514 = &v495[-v510];
                  if (v1619 > (unint64_t)v495)
                  {
                    int v515 = v1608 + 4;
                    unint64_t v516 = *(void *)v495 ^ *(void *)v514;
                    if (v516)
                    {
                      unint64_t v517 = __clz(__rbit64(v516)) >> 3;
                    }
                    else
                    {
                      do
                      {
                        v514 += 8;
                        if ((unint64_t)++v515 >= v1619) {
                          goto LABEL_763;
                        }
                        unint64_t v518 = *v515 ^ *(void *)v514;
                      }
                      while (!v518);
                      unint64_t v517 = (char *)v515 + (__clz(__rbit64(v518)) >> 3) - v495;
                    }
                    int v324 = v1608;
                    unsigned int v519 = v517 + 4;
                    unint64_t v520 = v519;
                    if (v509 >= v519) {
                      goto LABEL_744;
                    }
LABEL_771:
                    uint64_t v521 = &v1612[2 * v372];
                    *uint64_t v521 = v508 + ((int)(v1535 << 31) >> 31);
                    v521[1] = v519;
                    ++v372;
                    if (v519 > v492) {
                      goto LABEL_878;
                    }
                    unint64_t v509 = v520;
                    if (&v324[v520] == (unsigned __int8 *)v1569) {
                      goto LABEL_878;
                    }
                    goto LABEL_744;
                  }
                  int v515 = v1608 + 4;
LABEL_763:
                  if ((unint64_t)v515 >= v1602)
                  {
                    if ((unint64_t)v515 >= v1598) {
                      goto LABEL_767;
                    }
                  }
                  else
                  {
                    if (*(_DWORD *)v514 == *(_DWORD *)v515)
                    {
                      int v515 = (void *)((char *)v515 + 4);
                      v514 += 4;
                    }
                    if ((unint64_t)v515 >= v1598)
                    {
LABEL_767:
                      if ((unint64_t)v515 >= v1569) {
                        goto LABEL_770;
                      }
LABEL_768:
                      if (*v514 == *(unsigned char *)v515) {
                        LODWORD(v515) = v515 + 1;
                      }
                      goto LABEL_770;
                    }
                  }
                  if (*(unsigned __int16 *)v514 == *(unsigned __int16 *)v515)
                  {
                    int v515 = (void *)((char *)v515 + 2);
                    v514 += 2;
                  }
                  if ((unint64_t)v515 < v1569) {
                    goto LABEL_768;
                  }
LABEL_770:
                  int v324 = v1608;
                  unsigned int v519 = v515 - v1608;
                  unint64_t v520 = v519;
                  if (v509 < v519) {
                    goto LABEL_771;
                  }
LABEL_744:
                  if (++v508 >= v506)
                  {
                    *(_DWORD *)(v1518 + 4 * v1510) = v494;
                    if (v496 < v504) {
                      goto LABEL_877;
                    }
                    unint64_t v550 = 0;
                    unint64_t v551 = 0;
                    int v552 = ~(-1 << v1502);
                    int v553 = v494 + 2;
                    v1538 = (char *)v1523 + v323;
                    uint64_t v554 = v493 + 8;
                    while (1)
                    {
                      unint64_t v555 = v551 >= v550 ? v550 : v551;
                      uint64_t v556 = v493 + v496;
                      int v557 = (char *)&v324[v555];
                      uint64_t v558 = (void *)(v556 + v555);
                      if (v1619 <= (unint64_t)&v324[v555]) {
                        break;
                      }
                      unint64_t v559 = *(void *)v557 ^ *v558;
                      if (v559)
                      {
                        unint64_t v560 = (__clz(__rbit64(v559)) >> 3) + v555;
                        int v561 = v1612;
                        if (v560 <= v509) {
                          goto LABEL_859;
                        }
                        goto LABEL_853;
                      }
                      uint64_t v566 = 0;
                      unsigned int v567 = &v1538[v555];
                      do
                      {
                        unsigned int v568 = &v567[v566];
                        if ((unint64_t)&v567[v566] >= v1619)
                        {
                          unsigned int v562 = &v1538[v555 + v566];
                          uint64_t v558 = (void *)(v554 + v555 + v496 + v566);
                          uint64_t v5 = a1;
                          int v324 = v1608;
                          if ((unint64_t)v562 >= v1602) {
                            goto LABEL_844;
                          }
                          goto LABEL_842;
                        }
                        uint64_t v569 = *(void *)(v554 + v555 + v496 + v566);
                        v566 += 8;
                        unint64_t v570 = *(void *)v568 ^ v569;
                      }
                      while (!v570);
                      uint64_t v571 = v566 + (__clz(__rbit64(v570)) >> 3);
                      uint64_t v5 = a1;
                      int v324 = v1608;
                      unint64_t v560 = v571 + v555;
                      int v561 = v1612;
                      if (v560 <= v509) {
                        goto LABEL_859;
                      }
LABEL_853:
                      if (v560 > v423 - v496) {
                        int v423 = v496 + v560;
                      }
                      unsigned int v563 = &v561[2 * v372];
                      *unsigned int v563 = v553 - v496;
                      v563[1] = v560;
                      ++v372;
                      BOOL v564 = v560 > 0x1000 || &v324[v560] == (unsigned __int8 *)v1569;
                      unint64_t v509 = v560;
                      if (v564) {
                        goto LABEL_877;
                      }
LABEL_859:
                      unsigned int v565 = (unsigned int *)(v505 + 8 * (v496 & v498));
                      if (*(unsigned __int8 *)(v556 + v560) >= v324[v560])
                      {
                        unsigned int *v1561 = v496;
                        if (v496 > v1551)
                        {
                          unint64_t v550 = v560;
                          v1561 = (unsigned int *)(v505 + 8 * (v496 & v498));
                          goto LABEL_864;
                        }
                        goto LABEL_875;
                      }
                      *unsigned int v422 = v496;
                      if (v496 <= v1551) {
                        goto LABEL_876;
                      }
                      ++v565;
                      unint64_t v551 = v560;
                      unsigned int v422 = v565;
LABEL_864:
                      BOOL v294 = v552-- != 0;
                      if (v294)
                      {
                        unsigned int v496 = *v565;
                        if (*v565 >= v504) {
                          continue;
                        }
                      }
LABEL_877:
                      unsigned int *v1561 = 0;
                      *unsigned int v422 = 0;
                      *(_DWORD *)(v5 + 36) = v423 - 8;
LABEL_878:
                      unsigned int v14 = v1612;
                      goto LABEL_879;
                    }
                    unsigned int v562 = (char *)&v324[v555];
                    if ((unint64_t)v557 >= v1602) {
                      goto LABEL_844;
                    }
LABEL_842:
                    if (*(_DWORD *)v558 == *(_DWORD *)v562)
                    {
                      v562 += 4;
                      uint64_t v558 = (void *)((char *)v558 + 4);
                    }
LABEL_844:
                    if ((unint64_t)v562 >= v1598)
                    {
                      if ((unint64_t)v562 >= v1569) {
                        goto LABEL_852;
                      }
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v558 == *(unsigned __int16 *)v562)
                      {
                        v562 += 2;
                        uint64_t v558 = (void *)((char *)v558 + 2);
                      }
                      if ((unint64_t)v562 >= v1569)
                      {
LABEL_852:
                        unint64_t v560 = v562 - v557 + v555;
                        int v561 = v1612;
                        if (v560 <= v509) {
                          goto LABEL_859;
                        }
                        goto LABEL_853;
                      }
                    }
                    int v324 = v1608;
                    if (*(unsigned __int8 *)v558 == *v562) {
                      ++v562;
                    }
                    goto LABEL_852;
                  }
                }
              }
              unsigned int v372 = 0;
              v1491 = (char *)v1523 + v323;
              if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
                unsigned int v376 = 4095;
              }
              else {
                unsigned int v376 = *(_DWORD *)(v5 + 212);
              }
              uint64_t v377 = *(void *)(v5 + 8);
              unsigned int v378 = v1608 - v377;
              unsigned int v379 = (char *)(v1608 + 3);
              int v1499 = *(_DWORD *)(v5 + 204);
              uint64_t v1507 = (-1640531535 * *(_DWORD *)v1608) >> -(char)*(_DWORD *)(v5 + 200);
              uint64_t v1515 = *(void *)(v5 + 48);
              unsigned int v380 = *(_DWORD *)(v1515 + 4 * v1507);
              uint64_t v381 = *(void *)(v5 + 64);
              int v382 = -1 << (*(_DWORD *)(v5 + 196) - 1);
              int v383 = ~v382;
              unsigned int v384 = v1608 - v377 + v382 + 1;
              if ((int)v1608 - (int)v377 < ~v382) {
                unsigned int v384 = 0;
              }
              unsigned int v1548 = v384;
              int v385 = *(_DWORD *)(v5 + 24);
              unsigned int v386 = 1 << *(_DWORD *)(v5 + 192);
              if (v378 - *(_DWORD *)(v5 + 28) > v386 && *(_DWORD *)(v5 + 32) == 0) {
                unsigned int v388 = v378 - v386;
              }
              else {
                unsigned int v388 = *(_DWORD *)(v5 + 28);
              }
              if (v388 <= 1) {
                unsigned int v389 = 1;
              }
              else {
                unsigned int v389 = v388;
              }
              unsigned int v390 = (unsigned int *)(v381 + 8 * (v378 & ~v382));
              v1560 = v390 + 1;
              unsigned int v391 = v378 + 9;
              unsigned int v1631 = 0;
              if (v1535) {
                unint64_t v392 = 4;
              }
              else {
                unint64_t v392 = 3;
              }
              unsigned int v393 = v378 - v385;
              uint64_t v394 = v1535;
              unint64_t v395 = (v1556 - 1);
              unsigned int v14 = v1612;
              while (1)
              {
                if (v394 == 3)
                {
                  unsigned int v396 = *v375 - 1;
                  if (*v375 - 2 >= v393) {
                    goto LABEL_542;
                  }
                }
                else
                {
                  unsigned int v396 = v375[v394];
                  if (v396 - 1 >= v393) {
                    goto LABEL_542;
                  }
                }
                int v397 = (*(_DWORD *)&v324[-v396] ^ *(_DWORD *)v324) & 0xFFFFFF;
                if (v378 - v396 < v388 || v397 != 0)
                {
                  uint64_t v5 = a1;
                  int v324 = v1608;
                  goto LABEL_542;
                }
                unsigned int v399 = &v379[-v396];
                if (v1619 > (unint64_t)v379) {
                  break;
                }
                uint64_t v400 = v1608 + 3;
LABEL_561:
                if ((unint64_t)v400 >= v1602)
                {
                  uint64_t v5 = a1;
                  if ((unint64_t)v400 >= v1598) {
                    goto LABEL_565;
                  }
                }
                else
                {
                  if (*(_DWORD *)v399 == *v400)
                  {
                    ++v400;
                    v399 += 4;
                  }
                  uint64_t v5 = a1;
                  if ((unint64_t)v400 >= v1598)
                  {
LABEL_565:
                    if ((unint64_t)v400 >= v1569) {
                      goto LABEL_568;
                    }
LABEL_566:
                    if (*v399 == *(unsigned char *)v400) {
                      LODWORD(v400) = v400 + 1;
                    }
                    goto LABEL_568;
                  }
                }
                if (*(unsigned __int16 *)v399 == *(unsigned __int16 *)v400)
                {
                  uint64_t v400 = (_DWORD *)((char *)v400 + 2);
                  v399 += 2;
                }
                if ((unint64_t)v400 < v1569) {
                  goto LABEL_566;
                }
LABEL_568:
                int v324 = v1608;
                int v406 = v400 - v379;
                unsigned int v14 = v1612;
                unsigned int v404 = v406 + 3;
                unint64_t v405 = v404;
                if (v395 < v404) {
                  goto LABEL_569;
                }
LABEL_542:
                if (++v394 >= v392)
                {
                  if (v395 > 2) {
                    goto LABEL_944;
                  }
                  uint64_t v522 = *(void *)(v5 + 56);
                  int v523 = *(_DWORD *)v324;
                  int v524 = 32 - *(_DWORD *)(v5 + 40);
                  if (v1497 < v378)
                  {
                    uint64_t v525 = v1497;
                    do
                    {
                      *(_DWORD *)(v522 + 4 * ((900185344 * *(_DWORD *)(v377 + v525)) >> v524)) = v525;
                      ++v525;
                    }
                    while (v1592 - v377 != v525);
                  }
                  uint64_t v526 = *(unsigned int *)(v522 + 4 * ((900185344 * v523) >> v524));
                  if (v526 < v389 || (v378 - v526) >> 18 != 0)
                  {
                    unsigned int v1497 = v1608 - v377;
                    goto LABEL_944;
                  }
                  BOOL v612 = (void *)(v377 + v526);
                  if (v1619 <= (unint64_t)v324)
                  {
                    unsigned int v615 = (char *)v324;
                    if ((unint64_t)v324 >= v1602) {
                      goto LABEL_929;
                    }
                  }
                  else
                  {
                    unint64_t v613 = *(void *)v324 ^ *v612;
                    if (v613)
                    {
                      unint64_t v614 = __clz(__rbit64(v613)) >> 3;
                      unsigned int v1497 = v1608 - v377;
                      if (v614 < 3) {
                        goto LABEL_944;
                      }
LABEL_938:
                      *unsigned int v14 = v378 - v526 + 2;
                      v14[1] = v614;
                      if (v614 > v376 || &v324[v614] == (unsigned __int8 *)v1569)
                      {
                        unsigned int v372 = 1;
                        unsigned int v1497 = v1608 - v377;
                        *(_DWORD *)(v5 + 36) = v378 + 1;
                        goto LABEL_879;
                      }
                      unsigned int v372 = 1;
                      unsigned int v1497 = v1608 - v377;
                      unint64_t v395 = v614;
LABEL_944:
                      *(_DWORD *)(v1515 + 4 * v1507) = v378;
                      if (v380 < v389) {
                        goto LABEL_945;
                      }
                      unint64_t v617 = 0;
                      unint64_t v618 = 0;
                      int v619 = ~(-1 << v1499);
                      unsigned int v620 = v378 + 2;
                      v1539 = (char *)v1523 + v323;
                      uint64_t v621 = v377 + 8;
                      while (1)
                      {
                        unint64_t v622 = v618 >= v617 ? v617 : v618;
                        uint64_t v623 = v377 + v380;
                        uint64_t v624 = (char *)&v324[v622];
                        uint64_t v625 = (_DWORD *)(v623 + v622);
                        if (v1619 <= (unint64_t)&v324[v622])
                        {
                          unint64_t v628 = (char *)&v324[v622];
                          if ((unint64_t)v624 < v1602)
                          {
LABEL_955:
                            if (*v625 == *(_DWORD *)v628)
                            {
                              v628 += 4;
                              ++v625;
                            }
                          }
                        }
                        else
                        {
                          unint64_t v626 = *(void *)v624 ^ *(void *)v625;
                          if (v626)
                          {
                            unint64_t v627 = (__clz(__rbit64(v626)) >> 3) + v622;
                            if (v627 <= v395) {
                              goto LABEL_953;
                            }
                            goto LABEL_966;
                          }
                          uint64_t v632 = 0;
                          unsigned int v633 = &v1539[v622];
                          while (1)
                          {
                            unsigned int v634 = &v633[v632];
                            if ((unint64_t)&v633[v632] >= v1619) {
                              break;
                            }
                            uint64_t v635 = *(void *)(v621 + v622 + v380 + v632);
                            v632 += 8;
                            unint64_t v636 = *(void *)v634 ^ v635;
                            uint64_t v5 = a1;
                            if (v636)
                            {
                              unint64_t v637 = __clz(__rbit64(v636));
                              uint64_t v21 = v15 + 28;
                              int v324 = v1608;
                              unint64_t v627 = v632 + (v637 >> 3) + v622;
                              if (v627 > v395) {
                                goto LABEL_966;
                              }
                              goto LABEL_953;
                            }
                          }
                          unint64_t v628 = &v1539[v622 + v632];
                          uint64_t v625 = (_DWORD *)(v621 + v622 + v380 + v632);
                          uint64_t v21 = v15 + 28;
                          int v324 = v1608;
                          if ((unint64_t)v628 < v1602) {
                            goto LABEL_955;
                          }
                        }
                        if ((unint64_t)v628 >= v1598) {
                          break;
                        }
                        if (*(unsigned __int16 *)v625 == *(unsigned __int16 *)v628)
                        {
                          v628 += 2;
                          uint64_t v625 = (_DWORD *)((char *)v625 + 2);
                        }
                        if ((unint64_t)v628 < v1569) {
                          goto LABEL_963;
                        }
LABEL_965:
                        unint64_t v627 = v628 - v624 + v622;
                        if (v627 <= v395)
                        {
LABEL_953:
                          unsigned int v14 = v1612;
                          goto LABEL_972;
                        }
LABEL_966:
                        if (v627 > v391 - v380) {
                          unsigned int v391 = v380 + v627;
                        }
                        unsigned int v14 = v1612;
                        unint64_t v629 = &v1612[2 * v372];
                        _DWORD *v629 = v620 - v380;
                        v629[1] = v627;
                        ++v372;
                        BOOL v630 = v627 > 0x1000 || &v324[v627] == (unsigned __int8 *)v1569;
                        unint64_t v395 = v627;
                        if (v630) {
                          goto LABEL_945;
                        }
LABEL_972:
                        unint64_t v631 = (unsigned int *)(v381 + 8 * (v380 & v383));
                        if (*(unsigned __int8 *)(v623 + v627) >= v324[v627])
                        {
                          unsigned int *v1560 = v380;
                          if (v380 <= v1548)
                          {
                            v1560 = &v1631;
LABEL_945:
                            unsigned int *v1560 = 0;
                            unsigned int *v390 = 0;
                            *(_DWORD *)(v5 + 36) = v391 - 8;
                            goto LABEL_879;
                          }
                          unint64_t v617 = v627;
                          v1560 = (unsigned int *)(v381 + 8 * (v380 & v383));
                        }
                        else
                        {
                          unsigned int *v390 = v380;
                          if (v380 <= v1548)
                          {
                            unsigned int v390 = &v1631;
                            goto LABEL_945;
                          }
                          ++v631;
                          unint64_t v618 = v627;
                          unsigned int v390 = v631;
                        }
                        BOOL v294 = v619-- != 0;
                        if (v294)
                        {
                          unsigned int v380 = *v631;
                          if (*v631 >= v389) {
                            continue;
                          }
                        }
                        goto LABEL_945;
                      }
                      if ((unint64_t)v628 >= v1569) {
                        goto LABEL_965;
                      }
LABEL_963:
                      if (*(unsigned __int8 *)v625 == *v628) {
                        ++v628;
                      }
                      goto LABEL_965;
                    }
                    uint64_t v638 = 0;
                    while (1)
                    {
                      unsigned int v615 = &v1491[v638];
                      if ((unint64_t)&v1491[v638] >= v1619) {
                        break;
                      }
                      uint64_t v639 = *(void *)(v377 + v526 + 8 + v638);
                      v638 += 8;
                      unint64_t v640 = *(void *)v615 ^ v639;
                      if (v640)
                      {
                        unint64_t v614 = v638 + (__clz(__rbit64(v640)) >> 3);
                        unsigned int v1497 = v1608 - v377;
                        if (v614 < 3) {
                          goto LABEL_944;
                        }
                        goto LABEL_938;
                      }
                    }
                    BOOL v612 = (void *)(v377 + v526 + v638 + 8);
                    if ((unint64_t)v615 >= v1602)
                    {
LABEL_929:
                      if ((unint64_t)v615 >= v1598)
                      {
                        if ((unint64_t)v615 >= v1569) {
                          goto LABEL_937;
                        }
                      }
                      else
                      {
                        if (*(unsigned __int16 *)v612 == *(unsigned __int16 *)v615)
                        {
                          v615 += 2;
                          BOOL v612 = (void *)((char *)v612 + 2);
                        }
                        if ((unint64_t)v615 >= v1569)
                        {
LABEL_937:
                          unint64_t v614 = v615 - (char *)v324;
                          unsigned int v1497 = v1608 - v377;
                          if (v614 < 3) {
                            goto LABEL_944;
                          }
                          goto LABEL_938;
                        }
                      }
                      if (*(unsigned __int8 *)v612 == *v615) {
                        ++v615;
                      }
                      goto LABEL_937;
                    }
                  }
                  if (*(_DWORD *)v612 == *(_DWORD *)v615)
                  {
                    v615 += 4;
                    BOOL v612 = (void *)((char *)v612 + 4);
                  }
                  goto LABEL_929;
                }
              }
              uint64_t v400 = v1608 + 3;
              unint64_t v401 = *(void *)v379 ^ *(void *)v399;
              uint64_t v5 = a1;
              if (v401)
              {
                unint64_t v402 = __clz(__rbit64(v401)) >> 3;
              }
              else
              {
                do
                {
                  v399 += 8;
                  v400 += 2;
                  if ((unint64_t)v400 >= v1619) {
                    goto LABEL_561;
                  }
                  unint64_t v403 = *(void *)v400 ^ *(void *)v399;
                }
                while (!v403);
                unint64_t v402 = (char *)v400 + (__clz(__rbit64(v403)) >> 3) - v379;
              }
              unsigned int v14 = v1612;
              int v324 = v1608;
              unsigned int v404 = v402 + 3;
              unint64_t v405 = v404;
              if (v395 >= v404) {
                goto LABEL_542;
              }
LABEL_569:
              int v407 = &v14[2 * v372];
              *int v407 = v394 + ((int)(v1535 << 31) >> 31);
              v407[1] = v404;
              ++v372;
              if (v404 > v376)
              {
                LODWORD(v324) = v1608;
                goto LABEL_879;
              }
              int v324 = v1608;
              unint64_t v395 = v405;
              if (&v1608[v405] != (unsigned __int8 *)v1569) {
                goto LABEL_542;
              }
LABEL_879:
              unsigned int v1627 = v372;
              ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1628, (uint64_t)v14, &v1627, v324 - v1571, v9 - v324);
              uint64_t v572 = v1627;
              if (!v1627)
              {
LABEL_475:
                int v318 = v1592;
                goto LABEL_476;
              }
              uint64_t v573 = v1627 - 1;
              unsigned int v266 = v14[2 * v573 + 1];
              if (v266 <= v1543 && v266 + v323 <= 0xFFF)
              {
                uint64_t v574 = 0;
                int v575 = v1624;
                while (1)
                {
                  unsigned int v576 = &v14[2 * v574];
                  unsigned int v577 = v1556;
                  if (v574) {
                    unsigned int v577 = *(v576 - 1) + 1;
                  }
                  unsigned int v578 = v576[1];
                  if (v578 >= v577) {
                    break;
                  }
LABEL_883:
                  if (++v574 == v572) {
                    goto LABEL_475;
                  }
                }
                int v579 = *v576;
                uint64_t v580 = __clz(v579 + 1) ^ 0x1F;
                if (*(_DWORD *)(v5 + 160) == 1)
                {
                  unsigned int v581 = v323 + v578;
                  while (1)
                  {
                    unsigned int v583 = v578 + v323;
                    unsigned int v584 = __clz(v578 - 2);
                    signed int v585 = v1576
                         + v1586
                         + 4096
                         + ((v578 - 2) << 8 >> (v584 ^ 0x1F))
                         + (((v584 ^ 0x1F) + v580) << 8);
                    if (v578 + v323 <= v317)
                    {
                      if (v585 >= *(_DWORD *)(v15 + 28 * v583)) {
                        goto LABEL_891;
                      }
                      goto LABEL_890;
                    }
                    unint64_t v586 = v581 - (unint64_t)v317;
                    if (v586 >= 2)
                    {
                      unint64_t v587 = (v586 & 0xFFFFFFFFFFFFFFFELL) + v317;
                      unint64_t v588 = (_DWORD *)(v1621 + 28 * v317);
                      unint64_t v589 = v586 & 0xFFFFFFFFFFFFFFFELL;
                      do
                      {
                        *(v588 - 7) = 0x40000000;
                        _DWORD *v588 = 0x40000000;
                        v588 += 14;
                        v589 -= 2;
                      }
                      while (v589);
                      if (v586 == (v586 & 0xFFFFFFFFFFFFFFFELL)) {
                        goto LABEL_889;
                      }
                    }
                    else
                    {
                      unint64_t v587 = v317;
                    }
                    unint64_t v590 = v581 - v587;
                    uint64_t v591 = (_DWORD *)(v21 + 28 * v587);
                    do
                    {
                      _DWORD *v591 = 0x40000000;
                      v591 += 7;
                      --v590;
                    }
                    while (v590);
LABEL_889:
                    unsigned int v317 = v581;
LABEL_890:
                    uint64_t v582 = (signed int *)(v15 + 28 * v583);
                    v582[2] = v578;
                    v582[3] = v575;
                    *uint64_t v582 = v585;
                    v582[1] = v579;
LABEL_891:
                    --v578;
                    --v581;
                    if (v578 < v577) {
                      goto LABEL_883;
                    }
                  }
                }
                uint64_t v593 = *(void *)(v5 + 96);
                uint64_t v592 = *(void *)(v5 + 104);
                int v594 = v1576 + v1586 + 51 + *(_DWORD *)(v5 + 156) + *(_DWORD *)(v5 + 152);
                unsigned int v595 = v323 + v578;
                while (2)
                {
                  unsigned int v597 = v578 - 3;
                  if (v578 - 3 < 0x80) {
                    unsigned int v598 = ZSTD_MLcode_ML_Code[v597];
                  }
                  else {
                    unsigned int v598 = 67 - __clz(v597);
                  }
                  unsigned int v599 = v578 + v323;
                  unsigned int v600 = *(_DWORD *)(v592 + 4 * v580) + 1;
                  unsigned int v601 = __clz(v600) ^ 0x1F;
                  uint64_t v602 = 4 * v598;
                  int v603 = *(unsigned int *)((char *)ML_bits + v602);
                  LODWORD(v602) = *(_DWORD *)(v593 + v602) + 1;
                  unsigned int v604 = __clz(v602) ^ 0x1F;
                  int v605 = v594
                       - (v600 << 8 >> v601)
                       - (v602 << 8 >> v604)
                       + ((v580 + v603 - v601 - v604) << 8);
                  if (v578 + v323 <= v317)
                  {
                    int v575 = v1624;
                    if (v605 < *(_DWORD *)(v15 + 28 * v599)) {
                      goto LABEL_905;
                    }
                  }
                  else
                  {
                    unint64_t v606 = v595 - (unint64_t)v317;
                    if (v606 < 2)
                    {
                      unint64_t v607 = v317;
                      int v575 = v1624;
                      goto LABEL_918;
                    }
                    unint64_t v607 = (v606 & 0xFFFFFFFFFFFFFFFELL) + v317;
                    unint64_t v608 = (_DWORD *)(v1621 + 28 * v317);
                    unint64_t v609 = v606 & 0xFFFFFFFFFFFFFFFELL;
                    do
                    {
                      *(v608 - 7) = 0x40000000;
                      _DWORD *v608 = 0x40000000;
                      v608 += 14;
                      v609 -= 2;
                    }
                    while (v609);
                    uint64_t v21 = v15 + 28;
                    int v575 = v1624;
                    if (v606 != (v606 & 0xFFFFFFFFFFFFFFFELL))
                    {
LABEL_918:
                      unint64_t v610 = v595 - v607;
                      uint64_t v611 = (_DWORD *)(v21 + 28 * v607);
                      do
                      {
                        _DWORD *v611 = 0x40000000;
                        v611 += 7;
                        --v610;
                      }
                      while (v610);
                    }
                    unsigned int v317 = v595;
LABEL_905:
                    uint64_t v596 = (int *)(v15 + 28 * v599);
                    v596[2] = v578;
                    v596[3] = v575;
                    *uint64_t v596 = v605;
                    v596[1] = v579;
                  }
                  --v578;
                  --v595;
                  if (v578 < v577) {
                    goto LABEL_883;
                  }
                  continue;
                }
              }
              LODWORD(v261) = v1624;
              if (*v1541) {
                int v704 = 0;
              }
              else {
                int v704 = *(_DWORD *)(v15 + 28 * v323 + 12);
              }
              unint64_t v7 = a2;
              unsigned int v275 = v14[2 * v573];
              unsigned int v708 = v323 - v704;
              if (v708 <= 0x1000) {
                unsigned int v274 = v708;
              }
              else {
                unsigned int v274 = 0;
              }
              int32x2_t v22 = v1596;
              if (!v266)
              {
LABEL_1087:
                uint64_t v709 = v15 + 28 * v274;
                unint64_t v1632 = *(void *)(v709 + 16);
                unsigned int v650 = *(_DWORD *)(v709 + 24);
                goto LABEL_1016;
              }
LABEL_1002:
              unsigned int v642 = (unsigned int *)(v15 + 28 * v274 + 16);
              if (v275 < 3)
              {
                if (v261) {
                  unsigned int v647 = v275;
                }
                else {
                  unsigned int v647 = v275 + 1;
                }
                if (v647)
                {
                  if (v647 == 3)
                  {
                    unint64_t v644 = *v642;
                    unsigned int v646 = v644 - 1;
                  }
                  else
                  {
                    unsigned int v646 = v642[v647];
                    unint64_t v644 = *v642;
                  }
                  BOOL v658 = v647 > 1;
                  uint64_t v649 = 2;
                  if (v658) {
                    uint64_t v649 = 1;
                  }
                  unint64_t v643 = &v642[v649];
                }
                else
                {
                  unint64_t v648 = *(void *)v642;
                  unint64_t v643 = (unsigned int *)(v15 + 28 * v274 + 24);
                  unsigned int v646 = v648;
                  unint64_t v644 = HIDWORD(v648);
                }
              }
              else
              {
                unsigned int v645 = *v642;
                unint64_t v643 = (unsigned int *)(v15 + 28 * v274 + 20);
                unint64_t v644 = v645;
                unsigned int v646 = v275 - 2;
              }
              unsigned int v650 = *v643;
              unint64_t v1632 = v646 | (v644 << 32);
LABEL_1016:
              unsigned int v1633 = v650;
              unsigned int v651 = v274 + 1;
              uint64_t v652 = v15 + 28 * (v274 + 1);
              *(_DWORD *)uint64_t v652 = v1528;
              *(_DWORD *)(v652 + 4) = v275;
              *(_DWORD *)(v652 + 8) = v266;
              *(_DWORD *)(v652 + 12) = v261;
              *(void *)(v652 + 16) = v1634;
              *(_DWORD *)(v652 + 24) = v1635;
              unsigned int v653 = v274;
              if (!v274)
              {
                unsigned int v659 = 1;
                unsigned int v660 = v1527;
                goto LABEL_1026;
              }
              do
              {
                unsigned int v654 = (long long *)(v15 + 28 * v653);
                unsigned int v655 = *((_DWORD *)v654 + 3) + *((_DWORD *)v654 + 2);
                BOOL v656 = (_OWORD *)(v15 + 28 * v274);
                long long v657 = *v654;
                *(_OWORD *)((char *)v656 + 12) = *(long long *)((char *)v654 + 12);
                *BOOL v656 = v657;
                --v274;
                BOOL v294 = v653 >= v655;
                v653 -= v655;
                BOOL v658 = v653 != 0 && v294;
                if (!v294) {
                  unsigned int v653 = 0;
                }
              }
              while (v658);
              unsigned int v659 = v274 + 1;
              unsigned int v660 = v1527;
              if (v659 <= v651)
              {
                while (1)
                {
LABEL_1026:
                  while (1)
                  {
                    unsigned int v663 = v659;
                    int v665 = *(_DWORD *)(v15 + 28 * v659 + 8);
                    uint64_t v664 = *(unsigned int *)(v15 + 28 * v659 + 12);
                    if (v665) {
                      break;
                    }
                    unsigned int v19 = &v22[v664];
                    unsigned int v659 = v663 + 1;
                    if (v663 + 1 > v651) {
                      goto LABEL_1022;
                    }
                  }
                  int v666 = *(_DWORD *)(v15 + 28 * v663 + 4);
                  if (*(_DWORD *)(v5 + 176) != 2)
                  {
                    if (v664)
                    {
                      uint64_t v667 = *v660;
                      uint64_t v668 = v22;
                      uint64_t v669 = v664;
                      do
                      {
                        unsigned int v670 = *v668++;
                        *(_DWORD *)(v667 + 4 * v670) += 2;
                        --v669;
                      }
                      while (v669);
                    }
                    *(_DWORD *)(v5 + 128) += 2 * v664;
                  }
                  unsigned int v671 = v664 < 0x40 ? ZSTD_LLcode_LL_Code[v664] : 50 - __clz(v664);
                  ++*(_DWORD *)(*(void *)(v5 + 88) + 4 * v671);
                  ++*(_DWORD *)(v5 + 132);
                  int v672 = v666 + 1;
                  unsigned int v673 = __clz(v666 + 1);
                  ++*(_DWORD *)(*(void *)(v5 + 104) + 4 * (v673 ^ 0x1F));
                  ++*(_DWORD *)(v5 + 140);
                  unsigned int v674 = v665 - 3;
                  unsigned int v675 = (v665 - 3) < 0x80 ? ZSTD_MLcode_ML_Code[v674] : 67 - __clz(v674);
                  ++*(_DWORD *)(*(void *)(v5 + 96) + 4 * v675);
                  ++*(_DWORD *)(v5 + 136);
                  long long v676 = &v22[v664];
                  v677 = (char *)v7[3];
                  if ((unint64_t)&v22[v664] > v1563) {
                    break;
                  }
                  *(_OWORD *)v677 = *(_OWORD *)v22;
                  uint64_t v680 = v7[3];
                  if (v664 > 0x10)
                  {
                    unint64_t v681 = (_OWORD *)(v680 + 16);
                    unint64_t v682 = v680 + v664;
                    unint64_t v683 = (long long *)(v22 + 16);
                    do
                    {
                      long long v684 = *v683++;
                      *v681++ = v684;
                    }
                    while ((unint64_t)v681 < v682);
LABEL_1071:
                    v7[3] += v664;
                    uint64_t v691 = v7[1];
                    if (v664 >= 0x10000)
                    {
                      unint64_t v702 = (unint64_t)(v691 - *v7) >> 3;
                      *((_DWORD *)v7 + 18) = 1;
                      *((_DWORD *)v7 + 19) = v702;
                    }
                    goto LABEL_1073;
                  }
                  v7[3] = v680 + v664;
                  uint64_t v691 = v7[1];
LABEL_1073:
                  *(_WORD *)(v691 + 4) = v664;
                  *(_DWORD *)uint64_t v691 = v672;
                  if (v674 >= 0x10000)
                  {
                    unint64_t v703 = (unint64_t)(v691 - *v7) >> 3;
                    *((_DWORD *)v7 + 18) = 2;
                    *((_DWORD *)v7 + 19) = v703;
                  }
                  *(_WORD *)(v691 + 6) = v674;
                  v7[1] = v691 + 8;
                  v22 += (v665 + v664);
                  unsigned int v19 = v22;
                  unsigned int v659 = v663 + 1;
                  if (v663 + 1 > v651) {
                    goto LABEL_1022;
                  }
                }
                if ((unint64_t)v22 <= v1563)
                {
                  v679 = &v677[v1563 - (void)v22];
                  long long v685 = v22;
                  v686 = (char *)v7[3];
                  do
                  {
                    long long v687 = *(_OWORD *)v685;
                    v685 += 16;
                    *(_OWORD *)v686 = v687;
                    v686 += 16;
                  }
                  while (v686 < v679);
                  unint64_t v678 = (unsigned __int8 *)v1563;
                  if (v1563 >= (unint64_t)v676) {
                    goto LABEL_1071;
                  }
                }
                else
                {
                  unint64_t v678 = v22;
                  v679 = (char *)v7[3];
                  if (v22 >= v676) {
                    goto LABEL_1071;
                  }
                }
                if ((unint64_t)v22 <= v1563) {
                  unint64_t v688 = (unsigned __int8 *)v1563;
                }
                else {
                  unint64_t v688 = v22;
                }
                unint64_t v689 = &v22[v664] - v688;
                if (v689 < 8)
                {
                  char v690 = v678;
                  goto LABEL_1070;
                }
                if ((unint64_t)(v677 - (char *)v22) < 0x20)
                {
                  char v690 = v678;
                  goto LABEL_1070;
                }
                if (v689 >= 0x20)
                {
                  unint64_t v692 = v689 & 0xFFFFFFFFFFFFFFE0;
                  unsigned int v693 = (long long *)(v678 + 16);
                  v694 = &v677[v688 - v22 + 16];
                  unint64_t v695 = v689 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v696 = *v693;
                    *((_OWORD *)v694 - 1) = *(v693 - 1);
                    *(_OWORD *)v694 = v696;
                    v693 += 2;
                    v694 += 32;
                    v695 -= 32;
                  }
                  while (v695);
                  if (v689 == v692) {
                    goto LABEL_1071;
                  }
                  if ((v689 & 0x18) == 0)
                  {
                    char v690 = &v678[v692];
                    v679 += v692;
                    goto LABEL_1070;
                  }
                }
                else
                {
                  unint64_t v692 = 0;
                }
                v679 += v689 & 0xFFFFFFFFFFFFFFF8;
                char v690 = &v678[v689 & 0xFFFFFFFFFFFFFFF8];
                unsigned int v697 = &v678[v692];
                v698 = &v677[&v688[v692] - v22];
                unint64_t v699 = v692 - (v689 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v700 = *(void *)v697;
                  v697 += 8;
                  *(void *)v698 = v700;
                  v698 += 8;
                  v699 += 8;
                }
                while (v699);
                if (v689 == (v689 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_1071;
                }
                do
                {
LABEL_1070:
                  char v701 = *v690++;
                  *v679++ = v701;
                }
                while (v690 < v676);
                goto LABEL_1071;
              }
              unsigned int v19 = v1610;
LABEL_1022:
              if (*(_DWORD *)(v5 + 176) != 2)
              {
                unsigned int v661 = *(_DWORD *)(v5 + 128) + 1;
                unsigned int v662 = __clz(v661) ^ 0x1F;
                *(_DWORD *)(v5 + 144) = (v661 << 8 >> v662) + (v662 << 8);
              }
              unsigned int v23 = *(_DWORD *)(v5 + 140) + 1;
              unsigned int v24 = __clz(v23);
              int32x2_t v25 = vadd_s32(*(int32x2_t *)(v5 + 132), (int32x2_t)0x100000001);
              int32x2_t v26 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v25), (int8x8_t)0x1F0000001FLL);
              *(int32x2_t *)(v5 + 148) = vadd_s32(vshl_n_s32(v26, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v25, 8uLL), (uint32x2_t)vneg_s32(v26)));
              *(_DWORD *)(v5 + 156) = (v23 << 8 >> (v24 ^ 0x1F)) + ((v24 ^ 0x1F) << 8);
              if ((unint64_t)v19 >= v1594) {
                goto LABEL_1119;
              }
            }
            else
            {
              unsigned int v19 = v259 + 1;
              if ((unint64_t)(v259 + 1) >= v1594) {
                goto LABEL_1119;
              }
            }
          }
          unsigned int v29 = 0;
          if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
            unsigned int v65 = 4095;
          }
          else {
            unsigned int v65 = *(_DWORD *)(v5 + 212);
          }
          uint64_t v66 = *(void *)(v5 + 8);
          int v67 = v1610 - v66;
          int v68 = -1 << (*(_DWORD *)(v5 + 196) - 1);
          int v69 = ~v68;
          unsigned int v70 = v1610 - v66 + v68 + 1;
          if ((int)v1610 - (int)v66 < ~v68) {
            unsigned int v70 = 0;
          }
          unsigned int v1589 = v70;
          unsigned int v71 = 1 << *(_DWORD *)(v5 + 192);
          if (v67 - *(_DWORD *)(v5 + 28) > v71 && *(_DWORD *)(v5 + 32) == 0) {
            unsigned int v73 = v67 - v71;
          }
          else {
            unsigned int v73 = *(_DWORD *)(v5 + 28);
          }
          if (v73 <= 1) {
            int v74 = 1;
          }
          else {
            int v74 = v73;
          }
          unsigned int v1605 = v74;
          unsigned int v75 = v67 - *(_DWORD *)(v5 + 24);
          unsigned int v76 = v1632 - 1;
          unint64_t v77 = (char *)(v1610 + 12);
          int v1573 = *(_DWORD *)(v5 + 204);
          unint64_t v78 = (0xCF1BBCDCBF9B0000 * *(void *)v1610) >> -(char)*(_DWORD *)(v5 + 200);
          uint64_t v1583 = *(void *)(v5 + 48);
          unsigned int v79 = *(_DWORD *)(v1583 + 4 * v78);
          uint64_t v80 = v1623 == 0;
          uint64_t v81 = *(void *)(v5 + 64);
          unint64_t v82 = (unsigned int *)(v81 + 8 * (v67 & ~v68));
          int v83 = v82 + 1;
          int v84 = v67 + 9;
          unsigned int v1631 = 0;
          if (v1623) {
            unint64_t v85 = 3;
          }
          else {
            unint64_t v85 = 4;
          }
          int v86 = v1610 + 4;
          if (v1623) {
            int v87 = 0;
          }
          else {
            int v87 = -1;
          }
          unint64_t v88 = (v1556 - 1);
          while (1)
          {
            unsigned int v89 = v76;
            if (v80 != 3) {
              unsigned int v89 = *((_DWORD *)&v1632 + v80);
            }
            if (v89 - 1 >= v75)
            {
              unsigned int v90 = 0;
              goto LABEL_126;
            }
            unsigned int v90 = 0;
            if (v67 - v89 >= v73 && *(_DWORD *)v1610 == *(_DWORD *)&v1610[-v89]) {
              break;
            }
LABEL_126:
            if (v88 < v90)
            {
              unint64_t v96 = &v1612[2 * v29];
              *unint64_t v96 = v80 + v87;
              v96[1] = v90;
              ++v29;
              if (v90 > v65 || (unint64_t v88 = v90, &v1610[v90] == (unsigned __int8 *)v9))
              {
LABEL_429:
                unint64_t v7 = a2;
                unsigned int v14 = v1612;
LABEL_430:
                int32x2_t v22 = v1596;
                unsigned int v19 = v1610;
                goto LABEL_431;
              }
            }
            if (++v80 >= v85)
            {
              *(_DWORD *)(v1583 + 4 * v78) = v67;
              if (v79 < v1605) {
                goto LABEL_428;
              }
              unint64_t v99 = 0;
              unint64_t v100 = 0;
              int v101 = ~(-1 << v1573);
              int v102 = v67 + 2;
              unint64_t v103 = v1610 + 8;
              uint64_t v104 = v66 + 8;
              unsigned int v105 = v1589;
              while (1)
              {
                unint64_t v106 = v100 >= v99 ? v99 : v100;
                uint64_t v107 = v66 + v79;
                unint64_t v108 = &v1610[v106];
                uint64_t v109 = (void *)(v107 + v106);
                if (v1619 <= (unint64_t)&v1610[v106]) {
                  break;
                }
                unint64_t v110 = *(void *)v108 ^ *v109;
                if (v110)
                {
                  unint64_t v111 = v1612;
                  unint64_t v112 = (__clz(__rbit64(v110)) >> 3) + v106;
                  if (v112 <= v88) {
                    goto LABEL_143;
                  }
                  goto LABEL_156;
                }
                BOOL v118 = (char *)v103 + v106;
                do
                {
                  uint64_t v119 = &v118[v110];
                  if ((unint64_t)&v118[v110] >= v1619)
                  {
                    unint64_t v114 = (unsigned __int8 *)v103 + v106 + v110;
                    uint64_t v109 = (void *)(v104 + v106 + v79 + v110);
                    unsigned int v105 = v1589;
                    unint64_t v111 = v1612;
                    if ((unint64_t)v114 >= v1602) {
                      goto LABEL_147;
                    }
                    goto LABEL_145;
                  }
                  uint64_t v120 = *(void *)(v104 + v106 + v79 + v110);
                  v110 += 8;
                  unint64_t v121 = *(void *)v119 ^ v120;
                  uint64_t v5 = a1;
                }
                while (!v121);
                unint64_t v111 = v1612;
                unsigned int v105 = v1589;
                unint64_t v112 = v110 + (__clz(__rbit64(v121)) >> 3) + v106;
                if (v112 <= v88)
                {
LABEL_143:
                  unint64_t v113 = v1610;
                  goto LABEL_162;
                }
LABEL_156:
                if (v112 > v84 - v79) {
                  int v84 = v79 + v112;
                }
                unint64_t v115 = &v111[2 * v29];
                *unint64_t v115 = v102 - v79;
                v115[1] = v112;
                ++v29;
                unint64_t v113 = v1610;
                BOOL v116 = v112 > 0x1000 || &v1610[v112] == (unsigned __int8 *)v9;
                unint64_t v88 = v112;
                if (v116) {
                  goto LABEL_428;
                }
LABEL_162:
                unint64_t v117 = (unsigned int *)(v81 + 8 * (v79 & v69));
                if (*(unsigned __int8 *)(v107 + v112) >= *((unsigned __int8 *)v113 + v112))
                {
                  *int v83 = v79;
                  if (v79 <= v105)
                  {
LABEL_427:
                    int v83 = &v1631;
                    goto LABEL_428;
                  }
                  unint64_t v99 = v112;
                  int v83 = (unsigned int *)(v81 + 8 * (v79 & v69));
                }
                else
                {
                  *unint64_t v82 = v79;
                  if (v79 <= v105) {
                    goto LABEL_426;
                  }
                  ++v117;
                  unint64_t v100 = v112;
                  unint64_t v82 = v117;
                }
                BOOL v294 = v101-- != 0;
                if (v294)
                {
                  unsigned int v79 = *v117;
                  if (*v117 >= v1605) {
                    continue;
                  }
                }
                goto LABEL_428;
              }
              unint64_t v114 = &v1610[v106];
              unint64_t v111 = v1612;
              if ((unint64_t)v108 >= v1602) {
                goto LABEL_147;
              }
LABEL_145:
              if (*(_DWORD *)v109 == *(_DWORD *)v114)
              {
                v114 += 4;
                uint64_t v109 = (void *)((char *)v109 + 4);
              }
LABEL_147:
              if ((unint64_t)v114 >= v1598)
              {
                if ((unint64_t)v114 >= v9) {
                  goto LABEL_155;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v109 == *(unsigned __int16 *)v114)
                {
                  v114 += 2;
                  uint64_t v109 = (void *)((char *)v109 + 2);
                }
                if ((unint64_t)v114 >= v9)
                {
LABEL_155:
                  unint64_t v112 = v114 - v1610;
                  if (v114 - v1610 <= v88) {
                    goto LABEL_143;
                  }
                  goto LABEL_156;
                }
              }
              if (*(unsigned __int8 *)v109 == *v114) {
                ++v114;
              }
              goto LABEL_155;
            }
          }
          uint64_t v91 = -(uint64_t)v89;
          uint64_t v92 = (char *)v86 - v89;
          if (v1619 <= (unint64_t)v86)
          {
            unsigned int v95 = (char *)(v1610 + 4);
            if ((unint64_t)v86 >= v1602) {
              goto LABEL_116;
            }
          }
          else
          {
            unint64_t v93 = *v86 ^ *(void *)v92;
            if (v93)
            {
              unint64_t v94 = __clz(__rbit64(v93)) >> 3;
              goto LABEL_125;
            }
            while (1)
            {
              unsigned int v95 = &v77[v93];
              if ((unint64_t)&v77[v93] >= v1619) {
                break;
              }
              uint64_t v97 = *(void *)&v77[v91 + v93];
              v93 += 8;
              unint64_t v98 = *(void *)v95 ^ v97;
              if (v98)
              {
                unint64_t v94 = v93 + (__clz(__rbit64(v98)) >> 3);
                uint64_t v5 = a1;
LABEL_125:
                unsigned int v90 = v94 + 4;
                goto LABEL_126;
              }
            }
            uint64_t v92 = &v95[v91];
            uint64_t v5 = a1;
            if ((unint64_t)v95 >= v1602)
            {
LABEL_116:
              if ((unint64_t)v95 >= v1598)
              {
                if ((unint64_t)v95 >= v9)
                {
LABEL_124:
                  LODWORD(v94) = v95 - v86;
                  goto LABEL_125;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v92 == *(unsigned __int16 *)v95)
                {
                  v95 += 2;
                  v92 += 2;
                }
                if ((unint64_t)v95 >= v9) {
                  goto LABEL_124;
                }
              }
              if (*v92 == *v95) {
                LODWORD(v95) = v95 + 1;
              }
              goto LABEL_124;
            }
          }
          if (*(_DWORD *)v92 == *(_DWORD *)v95)
          {
            v95 += 4;
            v92 += 4;
          }
          goto LABEL_116;
        }
LABEL_1119:
        v7[3] = v7[2];
        v7[1] = *v7;
        *((_DWORD *)v7 + 18) = 0;
        a5 = v1490;
        *(void *)(v5 + 8) -= v1490;
        int v716 = *(_DWORD *)(v5 + 24) + v1490;
        *(_DWORD *)(v5 + 24) = v716;
        *(_DWORD *)(v5 + 28) = v716;
        *(_DWORD *)(v5 + 36) = v716;
        if (*(_DWORD *)(v5 + 176) != 2)
        {
          uint64_t v717 = 0;
          uint64_t v718 = *v1527;
          int32x4_t v719 = 0uLL;
          v720.i64[0] = -1;
          v720.i64[1] = -1;
          int32x4_t v721 = 0uLL;
          do
          {
            uint64_t v722 = (int32x4_t *)(v718 + v717);
            int32x4_t v723 = vaddq_s32(vshlq_n_s32(*(int32x4_t *)(v718 + v717), 4uLL), v720);
            int32x4_t v724 = vaddq_s32(vshlq_n_s32(*(int32x4_t *)(v718 + v717 + 16), 4uLL), v720);
            int32x4_t *v722 = v723;
            v722[1] = v724;
            int32x4_t v719 = vaddq_s32(v723, v719);
            int32x4_t v721 = vaddq_s32(v724, v721);
            v717 += 32;
          }
          while (v717 != 1024);
          *(_DWORD *)(v5 + 128) = vaddvq_s32(vaddq_s32(v721, v719));
        }
        v725 = *(int32x4_t **)(v5 + 88);
        v726.i64[0] = -1;
        v726.i64[1] = -1;
        int32x4_t v727 = vaddq_s32(vshlq_n_s32(*v725, 4uLL), v726);
        int32x4_t v728 = vaddq_s32(vshlq_n_s32(v725[1], 4uLL), v726);
        int32x4_t *v725 = v727;
        v725[1] = v728;
        int32x4_t v729 = vaddq_s32(vshlq_n_s32(v725[2], 4uLL), v726);
        int32x4_t v730 = vaddq_s32(vshlq_n_s32(v725[3], 4uLL), v726);
        v725[2] = v729;
        v725[3] = v730;
        int32x4_t v731 = vaddq_s32(vshlq_n_s32(v725[4], 4uLL), v726);
        int32x4_t v732 = vaddq_s32(vshlq_n_s32(v725[5], 4uLL), v726);
        v725[4] = v731;
        v725[5] = v732;
        int32x4_t v733 = vaddq_s32(vshlq_n_s32(v725[6], 4uLL), v726);
        int32x4_t v734 = vaddq_s32(vshlq_n_s32(v725[7], 4uLL), v726);
        v725[6] = v733;
        v725[7] = v734;
        int32x4_t v735 = vaddq_s32(vshlq_n_s32(v725[8], 4uLL), v726);
        v725[8] = v735;
        *(_DWORD *)(v5 + 132) = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v735, v734), vaddq_s32(v733, v732)), vaddq_s32(vaddq_s32(v731, v730), vaddq_s32(v729, v728))), v727));
        unsigned int v736 = *(int32x4_t **)(v5 + 96);
        int32x4_t v737 = vaddq_s32(vshlq_n_s32(*v736, 4uLL), v726);
        int32x4_t v738 = vaddq_s32(vshlq_n_s32(v736[1], 4uLL), v726);
        *unsigned int v736 = v737;
        v736[1] = v738;
        int32x4_t v739 = vaddq_s32(vshlq_n_s32(v736[2], 4uLL), v726);
        int32x4_t v740 = vaddq_s32(vshlq_n_s32(v736[3], 4uLL), v726);
        v736[2] = v739;
        v736[3] = v740;
        int32x4_t v741 = vaddq_s32(vshlq_n_s32(v736[4], 4uLL), v726);
        int32x4_t v742 = vaddq_s32(vshlq_n_s32(v736[5], 4uLL), v726);
        v736[4] = v741;
        v736[5] = v742;
        int32x4_t v743 = vaddq_s32(vshlq_n_s32(v736[6], 4uLL), v726);
        int32x4_t v744 = vaddq_s32(vshlq_n_s32(v736[7], 4uLL), v726);
        v736[6] = v743;
        v736[7] = v744;
        int32x4_t v745 = vaddq_s32(vshlq_n_s32(v736[8], 4uLL), v726);
        int32x4_t v746 = vaddq_s32(vshlq_n_s32(v736[9], 4uLL), v726);
        v736[8] = v745;
        v736[9] = v746;
        int32x4_t v747 = vaddq_s32(vshlq_n_s32(v736[10], 4uLL), v726);
        int32x4_t v748 = vaddq_s32(vshlq_n_s32(v736[11], 4uLL), v726);
        v736[10] = v747;
        v736[11] = v748;
        int v749 = 16 * v736[12].i32[0] - 1;
        int v750 = v749
             + vaddvq_s32(vaddq_s32(vaddq_s32(v748, vaddq_s32(v746, vaddq_s32(v744, vaddq_s32(v742, vaddq_s32(v740, v738))))), vaddq_s32(v747, vaddq_s32(v745, vaddq_s32(v743, vaddq_s32(v741, vaddq_s32(v739, v737)))))));
        int v751 = 16 * v736[12].i32[1] - 1;
        v736[12].i32[0] = v749;
        v736[12].i32[1] = v751;
        int v752 = 16 * v736[12].i32[2] - 1;
        int v753 = 16 * v736[12].i32[3] - 1;
        v736[12].i32[2] = v752;
        v736[12].i32[3] = v753;
        int v754 = v753 + v752 + v751;
        int v755 = 16 * v736[13].i32[0] - 1;
        v736[13].i32[0] = v755;
        *(_DWORD *)(v5 + 136) = v755 + v754 + v750;
        uint64_t v756 = *(int32x4_t **)(v5 + 104);
        int32x4_t v757 = vaddq_s32(vshlq_n_s32(*v756, 4uLL), v726);
        int32x4_t v758 = vaddq_s32(vshlq_n_s32(v756[1], 4uLL), v726);
        int32x4_t v759 = vaddq_s32(vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v757.i8, 1), v757), vaddq_s32(vdupq_laneq_s32(v757, 2), vdupq_laneq_s32(v757, 3))), vaddq_s32(vaddq_s32(v758, vdupq_lane_s32(*(int32x2_t *)v758.i8, 1)), vdupq_laneq_s32(v758, 2)));
        *uint64_t v756 = v757;
        v756[1] = v758;
        int32x4_t v760 = vdupq_laneq_s32(v758, 3);
        int32x4_t v761 = vaddq_s32(vshlq_n_s32(v756[2], 4uLL), v726);
        int32x4_t v762 = vaddq_s32(vshlq_n_s32(v756[3], 4uLL), v726);
        v756[2] = v761;
        v756[3] = v762;
        int32x4_t v763 = vaddq_s32(vaddq_s32(v759, vaddq_s32(vaddq_s32(vaddq_s32(v760, v761), vdupq_lane_s32(*(int32x2_t *)v761.i8, 1)), vdupq_laneq_s32(v761, 2))), vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vdupq_laneq_s32(v761, 3), v762), vdupq_lane_s32(*(int32x2_t *)v762.i8, 1)), vdupq_laneq_s32(v762, 2)), vdupq_laneq_s32(v762, 3)));
        int32x4_t v764 = vaddq_s32(vshlq_n_s32(v756[4], 4uLL), v726);
        int32x4_t v765 = vaddq_s32(vshlq_n_s32(v756[5], 4uLL), v726);
        int32x4_t v766 = vaddq_s32(v763, vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v764, vdupq_lane_s32(*(int32x2_t *)v764.i8, 1)), vdupq_laneq_s32(v764, 2)), vdupq_laneq_s32(v764, 3)), v765), vdupq_lane_s32(*(int32x2_t *)v765.i8, 1)));
        v756[4] = v764;
        v756[5] = v765;
        int32x4_t v767 = vaddq_s32(vdupq_laneq_s32(v765, 2), vdupq_laneq_s32(v765, 3));
        int32x4_t v768 = vaddq_s32(vshlq_n_s32(v756[6], 4uLL), v726);
        int32x4_t v769 = vaddq_s32(vshlq_n_s32(v756[7], 4uLL), v726);
        v756[6] = v768;
        v756[7] = v769;
        *(_DWORD *)(v5 + 140) = vaddq_s32(vaddq_s32(v766, vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v767, v768), vdupq_lane_s32(*(int32x2_t *)v768.i8, 1)), vdupq_laneq_s32(v768, 2)), vdupq_laneq_s32(v768, 3)), v769)), vaddq_s32(vaddq_s32(vdupq_lane_s32(*(int32x2_t *)v769.i8, 1), vdupq_laneq_s32(v769, 2)), vdupq_laneq_s32(v769, 3))).u32[0];
        uint64_t v6 = *(void *)(v5 + 8);
      }
    }
  }
  v1570 = (char **)(v5 + 80);
  int v770 = &v1571[a5];
  unint64_t v1593 = (unint64_t)&v1571[a5 - 8];
  uint64_t v771 = (unsigned __int8 *)(v6 + *(unsigned int *)(v5 + 24));
  unsigned int v772 = *(_DWORD *)(v5 + 212);
  if (v772 >= 0xFFF) {
    unsigned int v772 = 4095;
  }
  unsigned int v1540 = v772;
  if (*(_DWORD *)(v5 + 208) == 3) {
    uint64_t v773 = 3;
  }
  else {
    uint64_t v773 = 4;
  }
  uint64_t v1542 = v773;
  unsigned int v774 = *(_DWORD *)(v5 + 36);
  v775 = *(unsigned int **)(v5 + 120);
  v1611 = *(_DWORD **)(v5 + 112);
  unsigned int v1635 = 0;
  uint64_t v1634 = 0;
  long long v1629 = 0u;
  memset(v1630, 0, sizeof(v1630));
  long long v1628 = 0u;
  v776 = *(long long **)(v5 + 224);
  if (v776)
  {
    long long v777 = v776[1];
    long long v1628 = *v776;
    long long v1629 = v777;
    *(void *)v1630 = *((void *)v776 + 4);
  }
  else
  {
    *(void *)v1630 = 0;
    long long v1628 = 0uLL;
    long long v1629 = 0uLL;
  }
  *(void *)&v1630[12] = 0;
  *(_DWORD *)&v1630[8] = 0;
  uint64_t v778 = a5;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1628, 0, a5);
  v779 = v1571;
  ZSTD_rescaleFreqs(v1570, v1571, v778, 2);
  if (v771 == v1571) {
    v779 = v1571 + 1;
  }
  if ((unint64_t)v779 < v1593)
  {
    unsigned int v1498 = v774;
    unsigned int v1526 = 0;
    unint64_t v1620 = (unint64_t)(v770 - 7);
    unint64_t v1597 = (unint64_t)(v770 - 1);
    unint64_t v1599 = (unint64_t)(v770 - 3);
    unint64_t v780 = (unint64_t)(v770 - 32);
    uint64_t v781 = (v1542 - 1) | 1;
    v1622 = v775 + 14;
    uint64_t v1494 = v1542 - v781;
    v1496 = &v775[7 * v781];
    unint64_t v1603 = (unint64_t)v770;
    long long v782 = v1571;
    v783 = v1611;
    v1587 = v770 - 32;
    while (1)
    {
      unsigned int v1625 = v779 - v782;
      unsigned int v1631 = 0;
      uint64_t v788 = *(void *)(v5 + 8);
      v789 = v779;
      uint64_t v790 = *(unsigned int *)(v5 + 36);
      v1595 = v782;
      v1609 = v789;
      if (v788 + v790 > (unint64_t)v789)
      {
        unsigned int v791 = 0;
        v779 = v789;
        goto LABEL_1555;
      }
      int v792 = *(_DWORD *)(v5 + 208);
      for (unsigned int k = v789 - v788;
            v790 < k;
      *(_DWORD *)(v5 + 36) = k;
      if ((v792 - 6) < 2) {
        break;
      }
      v779 = v1609;
      if (v792 == 5)
      {
        unsigned int v791 = 0;
        if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
          unsigned int v893 = 4095;
        }
        else {
          unsigned int v893 = *(_DWORD *)(v5 + 212);
        }
        uint64_t v894 = *(void *)(v5 + 8);
        int v895 = v1609 - v894;
        int v896 = -1 << (*(_DWORD *)(v5 + 196) - 1);
        int v897 = ~v896;
        unsigned int v898 = v1609 - v894 + v896 + 1;
        if ((int)v1609 - (int)v894 < ~v896) {
          unsigned int v898 = 0;
        }
        unsigned int v1615 = v898;
        unsigned int v899 = 1 << *(_DWORD *)(v5 + 192);
        if (v895 - *(_DWORD *)(v5 + 28) > v899 && *(_DWORD *)(v5 + 32) == 0) {
          unsigned int v901 = v895 - v899;
        }
        else {
          unsigned int v901 = *(_DWORD *)(v5 + 28);
        }
        if (v901 <= 1) {
          unsigned int v902 = 1;
        }
        else {
          unsigned int v902 = v901;
        }
        unsigned int v903 = v895 - *(_DWORD *)(v5 + 24);
        v904 = (char *)(v1609 + 12);
        int v1566 = *(_DWORD *)(v5 + 204);
        unint64_t v905 = (0xCF1BBCDCBB000000 * *(void *)v1609) >> -(char)*(_DWORD *)(v5 + 200);
        uint64_t v1579 = *(void *)(v5 + 48);
        unsigned int v906 = *(_DWORD *)(v1579 + 4 * v905);
        uint64_t v907 = v1625 == 0;
        uint64_t v908 = *(void *)(v5 + 64);
        v846 = (unsigned int *)(v908 + 8 * (v895 & ~v896));
        v847 = v846 + 1;
        int v848 = v895 + 9;
        LODWORD(v1632) = 0;
        if (v1625) {
          unint64_t v909 = 3;
        }
        else {
          unint64_t v909 = 4;
        }
        v910 = v1609 + 4;
        if (v1625) {
          int v911 = 0;
        }
        else {
          int v911 = -1;
        }
        unint64_t v912 = (v1542 - 1);
        v783 = v1611;
        while (1)
        {
          if (v907 == 3)
          {
            unsigned int v913 = *(_DWORD *)a3 - 1;
            if (*(_DWORD *)a3 - 2 >= v903) {
              goto LABEL_1319;
            }
          }
          else
          {
            unsigned int v913 = *((_DWORD *)a3 + v907);
            if (v913 - 1 >= v903) {
              goto LABEL_1319;
            }
          }
          v914 = v779;
          int v915 = *(_DWORD *)v779;
          int v916 = *(_DWORD *)&v914[-v913];
          if (v895 - v913 < v901 || v915 != v916)
          {
            uint64_t v5 = a1;
            v779 = v1609;
            goto LABEL_1319;
          }
          uint64_t v918 = -(uint64_t)v913;
          v919 = (char *)v910 - v913;
          uint64_t v5 = a1;
          if (v1620 <= (unint64_t)v910) {
            break;
          }
          unint64_t v920 = *v910 ^ *(void *)v919;
          if (v920)
          {
            v779 = v1609;
            unsigned int v921 = (__clz(__rbit64(v920)) >> 3) + 4;
            unint64_t v922 = v921;
            if (v912 < v921) {
              goto LABEL_1345;
            }
            goto LABEL_1319;
          }
          do
          {
            v923 = &v904[v920];
            if ((unint64_t)&v904[v920] >= v1620)
            {
              v919 = &v923[v918];
              uint64_t v5 = a1;
              if ((unint64_t)v923 >= v1599) {
                goto LABEL_1336;
              }
              goto LABEL_1334;
            }
            uint64_t v926 = *(void *)&v904[v918 + v920];
            v920 += 8;
            unint64_t v927 = *(void *)v923 ^ v926;
          }
          while (!v927);
          unint64_t v928 = __clz(__rbit64(v927));
          uint64_t v5 = a1;
          v779 = v1609;
          v783 = v1611;
          unsigned int v921 = v920 + (v928 >> 3) + 4;
          unint64_t v922 = v921;
          if (v912 < v921)
          {
LABEL_1345:
            v925 = &v783[2 * v791];
            _DWORD *v925 = v907 + v911;
            v925[1] = v921;
            ++v791;
            if (v921 > v893) {
              goto LABEL_1410;
            }
            v779 = v1609;
            unint64_t v912 = v922;
            if (&v1609[v922] == (unsigned __int8 *)v1603) {
              goto LABEL_1554;
            }
          }
LABEL_1319:
          if (++v907 >= v909)
          {
            *(_DWORD *)(v1579 + 4 * v905) = v895;
            if (v906 < v902) {
              goto LABEL_1552;
            }
            unint64_t v974 = 0;
            unint64_t v975 = 0;
            int v976 = ~(-1 << v1566);
            int v977 = v895 + 2;
            v978 = v779 + 8;
            uint64_t v979 = v894 + 8;
LABEL_1423:
            if (v975 >= v974) {
              unint64_t v980 = v974;
            }
            else {
              unint64_t v980 = v975;
            }
            uint64_t v981 = v894 + v906;
            v982 = (char *)&v779[v980];
            v983 = (void *)(v981 + v980);
            if (v1620 <= (unint64_t)&v779[v980])
            {
              v987 = &v779[v980];
              v783 = v1611;
              if ((unint64_t)v982 >= v1599) {
                goto LABEL_1433;
              }
            }
            else
            {
              unint64_t v984 = *(void *)v982 ^ *v983;
              if (v984)
              {
                v783 = v1611;
                v985 = (unsigned __int8 *)v1603;
                unint64_t v986 = (__clz(__rbit64(v984)) >> 3) + v980;
                if (v986 <= v912) {
                  goto LABEL_1429;
                }
                goto LABEL_1442;
              }
              uint64_t v991 = 0;
              v992 = (char *)v978 + v980;
              while (1)
              {
                v993 = &v992[v991];
                if ((unint64_t)&v992[v991] >= v1620) {
                  break;
                }
                uint64_t v994 = *(void *)(v979 + v980 + v906 + v991);
                v991 += 8;
                unint64_t v995 = *(void *)v993 ^ v994;
                uint64_t v5 = a1;
                if (v995)
                {
                  uint64_t v996 = v991 + (__clz(__rbit64(v995)) >> 3);
                  v783 = v1611;
                  v985 = (unsigned __int8 *)v1603;
                  unint64_t v986 = v996 + v980;
                  if (v986 <= v912)
                  {
LABEL_1429:
                    v882 = v1609;
                    goto LABEL_1448;
                  }
LABEL_1442:
                  if (v986 > v848 - v906) {
                    int v848 = v906 + v986;
                  }
                  v988 = &v783[2 * v791];
                  _DWORD *v988 = v977 - v906;
                  v988[1] = v986;
                  ++v791;
                  v882 = v1609;
                  BOOL v989 = v986 > 0x1000 || &v1609[v986] == v985;
                  unint64_t v912 = v986;
                  if (v989) {
                    goto LABEL_1549;
                  }
LABEL_1448:
                  v990 = (unsigned int *)(v908 + 8 * (v906 & v897));
                  v779 = v882;
                  if (*(unsigned __int8 *)(v981 + v986) < v882[v986])
                  {
                    unsigned int *v846 = v906;
                    if (v906 <= v1615) {
                      goto LABEL_1550;
                    }
                    ++v990;
                    unint64_t v975 = v986;
                    v846 = v990;
                    BOOL v294 = v976-- != 0;
                    if (!v294) {
                      goto LABEL_1552;
                    }
LABEL_1422:
                    unsigned int v906 = *v990;
                    if (*v990 < v902) {
                      goto LABEL_1552;
                    }
                    goto LABEL_1423;
                  }
                  unsigned int *v847 = v906;
                  if (v906 > v1615)
                  {
                    unint64_t v974 = v986;
                    v847 = (unsigned int *)(v908 + 8 * (v906 & v897));
                    BOOL v294 = v976-- != 0;
                    if (!v294) {
                      goto LABEL_1552;
                    }
                    goto LABEL_1422;
                  }
LABEL_1551:
                  v847 = (unsigned int *)&v1632;
LABEL_1552:
                  unsigned int *v847 = 0;
                  unsigned int *v846 = 0;
                  int v997 = v848 - 8;
                  goto LABEL_1553;
                }
              }
              v987 = (unsigned __int8 *)v978 + v980 + v991;
              v983 = (void *)(v979 + v980 + v906 + v991);
              v783 = v1611;
              if ((unint64_t)v987 >= v1599)
              {
LABEL_1433:
                if ((unint64_t)v987 >= v1597)
                {
                  if ((unint64_t)v987 >= v1603) {
                    goto LABEL_1441;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v983 == *(unsigned __int16 *)v987)
                  {
                    v987 += 2;
                    v983 = (void *)((char *)v983 + 2);
                  }
                  if ((unint64_t)v987 >= v1603)
                  {
LABEL_1441:
                    v985 = (unsigned __int8 *)v1603;
                    unint64_t v986 = v987 - (unsigned __int8 *)v982 + v980;
                    if (v986 <= v912) {
                      goto LABEL_1429;
                    }
                    goto LABEL_1442;
                  }
                }
                if (*(unsigned __int8 *)v983 == *v987) {
                  ++v987;
                }
                goto LABEL_1441;
              }
            }
            if (*(_DWORD *)v983 == *(_DWORD *)v987)
            {
              v987 += 4;
              v983 = (void *)((char *)v983 + 4);
            }
            goto LABEL_1433;
          }
        }
        v923 = (char *)(v1609 + 4);
        if ((unint64_t)v910 >= v1599) {
          goto LABEL_1336;
        }
LABEL_1334:
        if (*(_DWORD *)v919 == *(_DWORD *)v923)
        {
          v923 += 4;
          v919 += 4;
        }
LABEL_1336:
        if ((unint64_t)v923 >= v1597)
        {
          if ((unint64_t)v923 >= v1603) {
            goto LABEL_1344;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v919 == *(unsigned __int16 *)v923)
          {
            v923 += 2;
            v919 += 2;
          }
          if ((unint64_t)v923 >= v1603)
          {
LABEL_1344:
            int v924 = v923 - v910;
            v779 = v1609;
            v783 = v1611;
            unsigned int v921 = v924 + 4;
            unint64_t v922 = v921;
            if (v912 < v921) {
              goto LABEL_1345;
            }
            goto LABEL_1319;
          }
        }
        if (*v919 == *v923) {
          LODWORD(v923) = v923 + 1;
        }
        goto LABEL_1344;
      }
      v783 = v1611;
      unsigned int v791 = 0;
      if (v792 != 3)
      {
        if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
          unsigned int v929 = 4095;
        }
        else {
          unsigned int v929 = *(_DWORD *)(v5 + 212);
        }
        uint64_t v930 = *(void *)(v5 + 8);
        int v931 = v1609 - v930;
        int v932 = -1 << (*(_DWORD *)(v5 + 196) - 1);
        int v933 = ~v932;
        unsigned int v934 = v1609 - v930 + v932 + 1;
        if ((int)v1609 - (int)v930 < ~v932) {
          unsigned int v934 = 0;
        }
        unsigned int v1616 = v934;
        unsigned int v935 = 1 << *(_DWORD *)(v5 + 192);
        if (v931 - *(_DWORD *)(v5 + 28) > v935 && *(_DWORD *)(v5 + 32) == 0) {
          unsigned int v937 = v931 - v935;
        }
        else {
          unsigned int v937 = *(_DWORD *)(v5 + 28);
        }
        if (v937 <= 1) {
          unsigned int v938 = 1;
        }
        else {
          unsigned int v938 = v937;
        }
        unsigned int v939 = v931 - *(_DWORD *)(v5 + 24);
        v940 = (char *)(v1609 + 12);
        int v1567 = *(_DWORD *)(v5 + 204);
        uint64_t v941 = (-1640531535 * *(_DWORD *)v1609) >> -(char)*(_DWORD *)(v5 + 200);
        uint64_t v1580 = *(void *)(v5 + 48);
        unsigned int v942 = *(_DWORD *)(v1580 + 4 * v941);
        uint64_t v943 = v1625 == 0;
        uint64_t v944 = *(void *)(v5 + 64);
        v945 = (unsigned int *)(v944 + 8 * (v931 & ~v932));
        v946 = v945 + 1;
        int v947 = v931 + 9;
        LODWORD(v1632) = 0;
        if (v1625) {
          unint64_t v948 = 3;
        }
        else {
          unint64_t v948 = 4;
        }
        v949 = v1609 + 4;
        if (v1625) {
          int v950 = 0;
        }
        else {
          int v950 = -1;
        }
        unint64_t v951 = (v1542 - 1);
        while (1)
        {
          if (v943 == 3)
          {
            unsigned int v952 = *(_DWORD *)a3 - 1;
            if (*(_DWORD *)a3 - 2 >= v939) {
              goto LABEL_1375;
            }
          }
          else
          {
            unsigned int v952 = *((_DWORD *)a3 + v943);
            if (v952 - 1 >= v939) {
              goto LABEL_1375;
            }
          }
          v953 = v779;
          int v954 = *(_DWORD *)v779;
          int v955 = *(_DWORD *)&v953[-v952];
          if (v931 - v952 < v937 || v954 != v955)
          {
            uint64_t v5 = a1;
            v779 = v1609;
            goto LABEL_1375;
          }
          uint64_t v957 = -(uint64_t)v952;
          v958 = (char *)v949 - v952;
          uint64_t v5 = a1;
          if (v1620 <= (unint64_t)v949) {
            break;
          }
          unint64_t v959 = *v949 ^ *(void *)v958;
          if (v959)
          {
            v779 = v1609;
            unsigned int v960 = (__clz(__rbit64(v959)) >> 3) + 4;
            unint64_t v961 = v960;
            if (v951 < v960) {
              goto LABEL_1401;
            }
            goto LABEL_1375;
          }
          while (1)
          {
            v962 = &v940[v959];
            if ((unint64_t)&v940[v959] >= v1620) {
              break;
            }
            uint64_t v965 = *(void *)&v940[v957 + v959];
            v959 += 8;
            unint64_t v966 = *(void *)v962 ^ v965;
            if (v966)
            {
              unint64_t v967 = __clz(__rbit64(v966));
              uint64_t v5 = a1;
              v779 = v1609;
              v783 = v1611;
              unsigned int v960 = v959 + (v967 >> 3) + 4;
              unint64_t v961 = v960;
              if (v951 >= v960) {
                goto LABEL_1375;
              }
LABEL_1401:
              v964 = &v783[2 * v791];
              _DWORD *v964 = v943 + v950;
              v964[1] = v960;
              ++v791;
              if (v960 <= v929)
              {
                v779 = v1609;
                unint64_t v951 = v961;
                if (&v1609[v961] == (unsigned __int8 *)v1603) {
                  goto LABEL_1554;
                }
                goto LABEL_1375;
              }
LABEL_1410:
              v779 = v1609;
              goto LABEL_1554;
            }
          }
          v958 = &v962[v957];
          uint64_t v5 = a1;
          if ((unint64_t)v962 < v1599) {
            goto LABEL_1390;
          }
LABEL_1392:
          if ((unint64_t)v962 >= v1597)
          {
            if ((unint64_t)v962 >= v1603) {
              goto LABEL_1400;
            }
LABEL_1398:
            if (*v958 == *v962) {
              LODWORD(v962) = v962 + 1;
            }
            goto LABEL_1400;
          }
          if (*(unsigned __int16 *)v958 == *(unsigned __int16 *)v962)
          {
            v962 += 2;
            v958 += 2;
          }
          if ((unint64_t)v962 < v1603) {
            goto LABEL_1398;
          }
LABEL_1400:
          int v963 = v962 - v949;
          v779 = v1609;
          v783 = v1611;
          unsigned int v960 = v963 + 4;
          unint64_t v961 = v960;
          if (v951 < v960) {
            goto LABEL_1401;
          }
LABEL_1375:
          if (++v943 >= v948)
          {
            *(_DWORD *)(v1580 + 4 * v941) = v931;
            if (v942 < v938) {
              goto LABEL_1463;
            }
            unint64_t v998 = 0;
            unint64_t v999 = 0;
            int v1000 = ~(-1 << v1567);
            int v1001 = v931 + 2;
            v1002 = v779 + 8;
            uint64_t v1003 = v930 + 8;
            while (1)
            {
              unint64_t v1004 = v999 >= v998 ? v998 : v999;
              uint64_t v1005 = v930 + v942;
              v1006 = (char *)&v779[v1004];
              v1007 = (void *)(v1005 + v1004);
              if (v1620 <= (unint64_t)&v779[v1004]) {
                break;
              }
              unint64_t v1008 = *(void *)v1006 ^ *v1007;
              if (v1008)
              {
                v783 = v1611;
                v1009 = (unsigned __int8 *)v1603;
                unint64_t v1010 = (__clz(__rbit64(v1008)) >> 3) + v1004;
                if (v1010 <= v951) {
                  goto LABEL_1475;
                }
                goto LABEL_1488;
              }
              uint64_t v1016 = 0;
              v1017 = (char *)v1002 + v1004;
              do
              {
                v1018 = &v1017[v1016];
                if ((unint64_t)&v1017[v1016] >= v1620)
                {
                  v1012 = (unsigned __int8 *)v1002 + v1004 + v1016;
                  v1007 = (void *)(v1003 + v1004 + v942 + v1016);
                  v783 = v1611;
                  if ((unint64_t)v1012 >= v1599) {
                    goto LABEL_1479;
                  }
                  goto LABEL_1477;
                }
                uint64_t v1019 = *(void *)(v1003 + v1004 + v942 + v1016);
                v1016 += 8;
                unint64_t v1020 = *(void *)v1018 ^ v1019;
                uint64_t v5 = a1;
              }
              while (!v1020);
              uint64_t v1021 = v1016 + (__clz(__rbit64(v1020)) >> 3);
              v783 = v1611;
              v1009 = (unsigned __int8 *)v1603;
              unint64_t v1010 = v1021 + v1004;
              if (v1010 <= v951)
              {
LABEL_1475:
                v1011 = v1609;
                goto LABEL_1494;
              }
LABEL_1488:
              if (v1010 > v947 - v942) {
                int v947 = v942 + v1010;
              }
              v1013 = &v783[2 * v791];
              _DWORD *v1013 = v1001 - v942;
              v1013[1] = v1010;
              ++v791;
              v1011 = v1609;
              BOOL v1014 = v1010 > 0x1000 || &v1609[v1010] == v1009;
              unint64_t v951 = v1010;
              if (v1014)
              {
                v779 = v1609;
                goto LABEL_1463;
              }
LABEL_1494:
              v1015 = (unsigned int *)(v944 + 8 * (v942 & v933));
              v779 = v1011;
              if (*(unsigned __int8 *)(v1005 + v1010) >= v1011[v1010])
              {
                unsigned int *v946 = v942;
                if (v942 <= v1616)
                {
                  v946 = (unsigned int *)&v1632;
                  goto LABEL_1463;
                }
                unint64_t v998 = v1010;
                v946 = (unsigned int *)(v944 + 8 * (v942 & v933));
                BOOL v294 = v1000-- != 0;
                if (v294) {
                  goto LABEL_1468;
                }
LABEL_1463:
                unsigned int *v946 = 0;
                unsigned int *v945 = 0;
                int v997 = v947 - 8;
LABEL_1553:
                *(_DWORD *)(v5 + 36) = v997;
                goto LABEL_1554;
              }
              unsigned int *v945 = v942;
              if (v942 <= v1616)
              {
                v945 = (unsigned int *)&v1632;
                goto LABEL_1463;
              }
              ++v1015;
              unint64_t v999 = v1010;
              v945 = v1015;
              BOOL v294 = v1000-- != 0;
              if (!v294) {
                goto LABEL_1463;
              }
LABEL_1468:
              unsigned int v942 = *v1015;
              if (*v1015 < v938) {
                goto LABEL_1463;
              }
            }
            v1012 = &v779[v1004];
            v783 = v1611;
            if ((unint64_t)v1006 >= v1599) {
              goto LABEL_1479;
            }
LABEL_1477:
            if (*(_DWORD *)v1007 == *(_DWORD *)v1012)
            {
              v1012 += 4;
              v1007 = (void *)((char *)v1007 + 4);
            }
LABEL_1479:
            if ((unint64_t)v1012 >= v1597)
            {
              if ((unint64_t)v1012 >= v1603) {
                goto LABEL_1487;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v1007 == *(unsigned __int16 *)v1012)
              {
                v1012 += 2;
                v1007 = (void *)((char *)v1007 + 2);
              }
              if ((unint64_t)v1012 >= v1603)
              {
LABEL_1487:
                v1009 = (unsigned __int8 *)v1603;
                unint64_t v1010 = v1012 - (unsigned __int8 *)v1006 + v1004;
                if (v1010 <= v951) {
                  goto LABEL_1475;
                }
                goto LABEL_1488;
              }
            }
            if (*(unsigned __int8 *)v1007 == *v1012) {
              ++v1012;
            }
            goto LABEL_1487;
          }
        }
        v962 = (char *)(v1609 + 4);
        if ((unint64_t)v949 >= v1599) {
          goto LABEL_1392;
        }
LABEL_1390:
        if (*(_DWORD *)v958 == *(_DWORD *)v962)
        {
          v962 += 4;
          v958 += 4;
        }
        goto LABEL_1392;
      }
      if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
        unsigned int v794 = 4095;
      }
      else {
        unsigned int v794 = *(_DWORD *)(v5 + 212);
      }
      uint64_t v795 = *(void *)(v5 + 8);
      unsigned int v796 = v1609 - v795;
      int v797 = -1 << (*(_DWORD *)(v5 + 196) - 1);
      int v798 = ~v797;
      unsigned int v799 = v1609 - v795 + v797 + 1;
      if ((int)v1609 - (int)v795 < ~v797) {
        unsigned int v799 = 0;
      }
      unsigned int v800 = 1 << *(_DWORD *)(v5 + 192);
      if (v796 - *(_DWORD *)(v5 + 28) > v800 && *(_DWORD *)(v5 + 32) == 0) {
        unsigned int v802 = v796 - v800;
      }
      else {
        unsigned int v802 = *(_DWORD *)(v5 + 28);
      }
      if (v802 <= 1) {
        unsigned int v803 = 1;
      }
      else {
        unsigned int v803 = v802;
      }
      unsigned int v804 = v796 - *(_DWORD *)(v5 + 24);
      v805 = (char *)(v1609 + 11);
      int v1564 = *(_DWORD *)(v5 + 204);
      uint64_t v1613 = *(void *)(v5 + 48);
      uint64_t v1577 = (-1640531535 * *(_DWORD *)v1609) >> -(char)*(_DWORD *)(v5 + 200);
      unsigned int v806 = *(_DWORD *)(v1613 + 4 * v1577);
      unint64_t v807 = v1625 == 0;
      uint64_t v808 = *(void *)(v5 + 64);
      v809 = (unsigned int *)(v808 + 8 * (v796 & ~v797));
      v810 = v809 + 1;
      unsigned int v811 = v796 + 9;
      LODWORD(v1632) = 0;
      if (v1625) {
        unint64_t v812 = 3;
      }
      else {
        unint64_t v812 = 4;
      }
      v813 = v1609 + 3;
      if (v1625) {
        int v814 = 0;
      }
      else {
        int v814 = -1;
      }
      unint64_t v815 = (v1542 - 1);
      do
      {
        if (v807 == 3)
        {
          unsigned int v816 = *(_DWORD *)a3 - 1;
          if (*(_DWORD *)a3 - 2 >= v804) {
            goto LABEL_1165;
          }
        }
        else
        {
          unsigned int v816 = *((_DWORD *)a3 + v807);
          if (v816 - 1 >= v804) {
            goto LABEL_1165;
          }
        }
        int v817 = (*(_DWORD *)&v779[-v816] ^ *(_DWORD *)v779) & 0xFFFFFF;
        if (v796 - v816 < v802 || v817 != 0)
        {
          uint64_t v5 = a1;
          v779 = v1609;
          goto LABEL_1165;
        }
        uint64_t v819 = -(uint64_t)v816;
        v820 = (char *)v813 - v816;
        if (v1620 <= (unint64_t)v813)
        {
          v824 = (char *)(v1609 + 3);
          uint64_t v5 = a1;
          if ((unint64_t)v813 < v1599)
          {
LABEL_1180:
            if (*(_DWORD *)v820 == *(_DWORD *)v824)
            {
              v824 += 4;
              v820 += 4;
            }
          }
          goto LABEL_1182;
        }
        unint64_t v821 = *v813 ^ *(void *)v820;
        uint64_t v5 = a1;
        if (!v821)
        {
          while (1)
          {
            v824 = &v805[v821];
            if ((unint64_t)&v805[v821] >= v1620) {
              break;
            }
            uint64_t v827 = *(void *)&v805[v819 + v821];
            v821 += 8;
            unint64_t v828 = *(void *)v824 ^ v827;
            if (v828)
            {
              unint64_t v829 = __clz(__rbit64(v828));
              uint64_t v5 = a1;
              v779 = v1609;
              v783 = v1611;
              unsigned int v822 = v821 + (v829 >> 3) + 3;
              unint64_t v823 = v822;
              if (v815 < v822)
              {
LABEL_1191:
                v826 = &v783[2 * v791];
                _DWORD *v826 = v807 + v814;
                v826[1] = v822;
                ++v791;
                if (v822 > v794)
                {
                  unint64_t v780 = (unint64_t)v1587;
                  long long v782 = v1595;
                  v779 = v1609;
                  goto LABEL_1555;
                }
                v779 = v1609;
                unint64_t v815 = v823;
                if (&v1609[v823] == (unsigned __int8 *)v1603)
                {
LABEL_1554:
                  unint64_t v780 = (unint64_t)v1587;
                  long long v782 = v1595;
                  goto LABEL_1555;
                }
              }
              goto LABEL_1165;
            }
          }
          v820 = &v824[v819];
          uint64_t v5 = a1;
          if ((unint64_t)v824 < v1599) {
            goto LABEL_1180;
          }
LABEL_1182:
          if ((unint64_t)v824 >= v1597)
          {
            if ((unint64_t)v824 >= v1603) {
              goto LABEL_1190;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v820 == *(unsigned __int16 *)v824)
            {
              v824 += 2;
              v820 += 2;
            }
            if ((unint64_t)v824 >= v1603)
            {
LABEL_1190:
              int v825 = v824 - v813;
              v779 = v1609;
              v783 = v1611;
              unsigned int v822 = v825 + 3;
              unint64_t v823 = v822;
              if (v815 < v822) {
                goto LABEL_1191;
              }
              goto LABEL_1165;
            }
          }
          if (*v820 == *v824) {
            LODWORD(v824) = v824 + 1;
          }
          goto LABEL_1190;
        }
        v779 = v1609;
        unsigned int v822 = (__clz(__rbit64(v821)) >> 3) + 3;
        unint64_t v823 = v822;
        if (v815 < v822) {
          goto LABEL_1191;
        }
LABEL_1165:
        ++v807;
      }
      while (v807 < v812);
      if (v815 > 2)
      {
        unint64_t v780 = (unint64_t)v1587;
        long long v782 = v1595;
        goto LABEL_1465;
      }
      uint64_t v968 = *(void *)(v5 + 56);
      int v969 = *(_DWORD *)v779;
      int v970 = 32 - *(_DWORD *)(v5 + 40);
      if (v1498 < v796)
      {
        uint64_t v971 = v1498;
        do
        {
          *(_DWORD *)(v968 + 4 * ((900185344 * *(_DWORD *)(v795 + v971)) >> v970)) = v971;
          ++v971;
        }
        while (v1609 - v795 != v971);
      }
      uint64_t v972 = *(unsigned int *)(v968 + 4 * ((900185344 * v969) >> v970));
      BOOL v973 = v972 >= v803 && (v796 - v972) >> 18 == 0;
      unint64_t v780 = (unint64_t)v1587;
      long long v782 = v1595;
      if (!v973)
      {
        unsigned int v1498 = v1609 - v795;
        v779 = v1609;
        goto LABEL_1465;
      }
      v1476 = (_DWORD *)(v795 + v972);
      v779 = v1609;
      if (v1620 <= (unint64_t)v1609)
      {
        v1482 = v1609;
        if ((unint64_t)v1609 < v1599)
        {
LABEL_2200:
          if (*v1476 == *(_DWORD *)v1482)
          {
            v1482 += 4;
            ++v1476;
          }
        }
      }
      else
      {
        unint64_t v1477 = *(void *)v1609 ^ *(void *)v1476;
        if (v1477)
        {
          unint64_t v1478 = __clz(__rbit64(v1477)) >> 3;
          unsigned int v1498 = v1609 - v795;
          if (v1478 < 3) {
            goto LABEL_1465;
          }
          goto LABEL_2211;
        }
        unint64_t v1484 = 0;
        v1485 = v1609 + 8;
        while (1)
        {
          v1486 = &v1485[v1484 / 8];
          if ((unint64_t)&v1485[v1484 / 8] >= v1620) {
            break;
          }
          uint64_t v1487 = *(void *)(v795 + v972 + 8 + v1484);
          v1484 += 8;
          unint64_t v1488 = *v1486 ^ v1487;
          if (v1488)
          {
            unint64_t v1478 = v1484 + (__clz(__rbit64(v1488)) >> 3);
            v779 = v1609;
            unsigned int v1498 = v1609 - v795;
            if (v1478 >= 3) {
              goto LABEL_2211;
            }
            goto LABEL_1465;
          }
        }
        v779 = v1609;
        v1482 = &v1609[v1484 + 8];
        v1476 = (_DWORD *)(v795 + v972 + v1484 + 8);
        if ((unint64_t)v1482 < v1599) {
          goto LABEL_2200;
        }
      }
      if ((unint64_t)v1482 >= v1597)
      {
        if ((unint64_t)v1482 >= v1603) {
          goto LABEL_2210;
        }
LABEL_2208:
        if (*(unsigned __int8 *)v1476 == *v1482) {
          ++v1482;
        }
        goto LABEL_2210;
      }
      if (*(unsigned __int16 *)v1476 == *(unsigned __int16 *)v1482)
      {
        v1482 += 2;
        v1476 = (_DWORD *)((char *)v1476 + 2);
      }
      if ((unint64_t)v1482 < v1603) {
        goto LABEL_2208;
      }
LABEL_2210:
      unint64_t v1478 = v1482 - v779;
      unsigned int v1498 = v1609 - v795;
      if (v1478 < 3) {
        goto LABEL_1465;
      }
LABEL_2211:
      _DWORD *v783 = v796 - v972 + 2;
      v783[1] = v1478;
      if (v1478 > v794 || &v779[v1478] == (unsigned __int8 *)v1603)
      {
        unsigned int v791 = 1;
        unsigned int v1498 = v1609 - v795;
        *(_DWORD *)(v5 + 36) = v796 + 1;
        goto LABEL_1555;
      }
      unsigned int v791 = 1;
      unsigned int v1498 = v1609 - v795;
      unint64_t v815 = v1478;
LABEL_1465:
      *(_DWORD *)(v1613 + 4 * v1577) = v796;
      if (v806 < v803) {
        goto LABEL_1466;
      }
      unint64_t v1022 = 0;
      unint64_t v1023 = 0;
      int v1024 = ~(-1 << v1564);
      unsigned int v1025 = v796 + 2;
      v1617 = v779 + 8;
      uint64_t v1026 = v795 + 8;
      while (2)
      {
        if (v1023 >= v1022) {
          unint64_t v1027 = v1022;
        }
        else {
          unint64_t v1027 = v1023;
        }
        uint64_t v1028 = v795 + v806;
        v1029 = (char *)&v779[v1027];
        v1030 = (_DWORD *)(v1028 + v1027);
        if (v1620 <= (unint64_t)&v779[v1027])
        {
          v1033 = &v779[v1027];
          if ((unint64_t)v1029 < v1599)
          {
LABEL_1518:
            if (*v1030 == *(_DWORD *)v1033)
            {
              v1033 += 4;
              ++v1030;
            }
          }
        }
        else
        {
          unint64_t v1031 = *(void *)v1029 ^ *(void *)v1030;
          if (v1031)
          {
            v779 = v1609;
            v783 = v1611;
            unint64_t v1032 = (__clz(__rbit64(v1031)) >> 3) + v1027;
            unint64_t v780 = (unint64_t)v1587;
            if (v1032 <= v815) {
              goto LABEL_1535;
            }
            goto LABEL_1529;
          }
          uint64_t v1038 = 0;
          v1039 = (char *)v1617 + v1027;
          while (1)
          {
            v1040 = &v1039[v1038];
            if ((unint64_t)&v1039[v1038] >= v1620) {
              break;
            }
            uint64_t v1041 = *(void *)(v1026 + v1027 + v806 + v1038);
            v1038 += 8;
            unint64_t v1042 = *(void *)v1040 ^ v1041;
            if (v1042)
            {
              uint64_t v1043 = v1038 + (__clz(__rbit64(v1042)) >> 3);
              uint64_t v5 = a1;
              v779 = v1609;
              v783 = v1611;
              long long v782 = v1595;
              unint64_t v1032 = v1043 + v1027;
              unint64_t v780 = (unint64_t)v1587;
              if (v1032 > v815) {
                goto LABEL_1529;
              }
              goto LABEL_1535;
            }
          }
          v1033 = (unsigned __int8 *)v1617 + v1027 + v1038;
          v1030 = (_DWORD *)(v1026 + v1027 + v806 + v1038);
          uint64_t v5 = a1;
          v779 = v1609;
          if ((unint64_t)v1033 < v1599) {
            goto LABEL_1518;
          }
        }
        if ((unint64_t)v1033 >= v1597)
        {
          if ((unint64_t)v1033 >= v1603) {
            goto LABEL_1528;
          }
LABEL_1526:
          v779 = v1609;
          if (*(unsigned __int8 *)v1030 == *v1033) {
            ++v1033;
          }
          goto LABEL_1528;
        }
        if (*(unsigned __int16 *)v1030 == *(unsigned __int16 *)v1033)
        {
          v1033 += 2;
          v1030 = (_DWORD *)((char *)v1030 + 2);
        }
        if ((unint64_t)v1033 < v1603) {
          goto LABEL_1526;
        }
LABEL_1528:
        v783 = v1611;
        int64_t v1034 = v1033 - (unsigned __int8 *)v1029;
        long long v782 = v1595;
        unint64_t v1032 = v1034 + v1027;
        unint64_t v780 = (unint64_t)v1587;
        if (v1032 <= v815) {
          goto LABEL_1535;
        }
LABEL_1529:
        if (v1032 > v811 - v806) {
          unsigned int v811 = v806 + v1032;
        }
        v1035 = &v783[2 * v791];
        _DWORD *v1035 = v1025 - v806;
        v1035[1] = v1032;
        ++v791;
        BOOL v1036 = v1032 > 0x1000 || &v779[v1032] == (unsigned __int8 *)v1603;
        unint64_t v815 = v1032;
        if (v1036) {
          goto LABEL_1466;
        }
LABEL_1535:
        v1037 = (unsigned int *)(v808 + 8 * (v806 & v798));
        if (*(unsigned __int8 *)(v1028 + v1032) < v779[v1032])
        {
          unsigned int *v809 = v806;
          if (v806 <= v799)
          {
            v809 = (unsigned int *)&v1632;
            goto LABEL_1466;
          }
          ++v1037;
          unint64_t v1023 = v1032;
          v809 = v1037;
          BOOL v294 = v1024-- != 0;
          if (!v294) {
            goto LABEL_1466;
          }
          goto LABEL_1509;
        }
        unsigned int *v810 = v806;
        if (v806 > v799)
        {
          unint64_t v1022 = v1032;
          v810 = (unsigned int *)(v808 + 8 * (v806 & v798));
          BOOL v294 = v1024-- != 0;
          if (!v294) {
            goto LABEL_1466;
          }
LABEL_1509:
          unsigned int v806 = *v1037;
          if (*v1037 < v803) {
            goto LABEL_1466;
          }
          continue;
        }
        break;
      }
      v810 = (unsigned int *)&v1632;
LABEL_1466:
      unsigned int *v810 = 0;
      unsigned int *v809 = 0;
      *(_DWORD *)(v5 + 36) = v811 - 8;
LABEL_1555:
      unsigned int v1631 = v791;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1628, (uint64_t)v783, &v1631, v779 - v1571, v1603 - v779);
      LODWORD(v1044) = v1631;
      if (v1631)
      {
        v775[4] = *(_DWORD *)a3;
        v775[5] = *((_DWORD *)a3 + 1);
        v775[6] = *((_DWORD *)a3 + 2);
        unsigned int v1045 = v1625;
        v775[2] = 0;
        v775[3] = v1625;
        int v1046 = *(_DWORD *)(v5 + 160);
        if (v1046 != 1)
        {
          v783 = v1611;
          if (v1625 < 0x40) {
            unsigned int v1052 = ZSTD_LLcode_LL_Code[v1625];
          }
          else {
            unsigned int v1052 = 50 - __clz(v1625);
          }
          uint64_t v1053 = 4 * v1052;
          int v1054 = *(_DWORD *)(v5 + 148);
          int v1055 = v1054 + (*(unsigned int *)((char *)LL_bits + v1053) << 8);
          v1056 = *(_DWORD **)(v5 + 88);
          LODWORD(v1053) = *(_DWORD *)((char *)v1056 + v1053) + 1;
          unsigned int v1057 = __clz(v1053);
          unsigned int v1048 = v1055 - ((v1053 << 8 >> (v1057 ^ 0x1F)) + ((v1057 ^ 0x1F) << 8));
          unsigned int *v775 = v1048;
          uint64_t v1049 = (v1044 - 1);
          unsigned int v1050 = v1611[2 * v1049 + 1];
          if (v1050 <= v1540)
          {
            unsigned int v1060 = *v1056 + 1;
            unsigned int v1061 = __clz(v1060) ^ 0x1F;
            int v1051 = v1054 - ((v1060 << 8 >> v1061) + (v1061 << 8));
            goto LABEL_1567;
          }
LABEL_1565:
          unsigned int v1058 = 0;
          unsigned int v1059 = v783[2 * v1049];
          goto LABEL_2114;
        }
        unsigned int v1047 = __clz(v1625 + 1);
        unsigned int v1048 = ((v1625 + 1) << 8 >> (v1047 ^ 0x1F)) + ((v1047 ^ 0x1F) << 8);
        unsigned int *v775 = v1048;
        uint64_t v1049 = (v1044 - 1);
        v783 = v1611;
        unsigned int v1050 = v1611[2 * v1049 + 1];
        if (v1050 > v1540) {
          goto LABEL_1565;
        }
        int v1051 = 256;
LABEL_1567:
        v1062 = v775 + 14;
        unint64_t v1063 = (v1542 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v1062 - 7) = 0x40000000;
          _DWORD *v1062 = 0x40000000;
          v1062 += 14;
          v1063 -= 2;
        }
        while (v1063);
        if (v1542 - 1 != ((v1542 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          uint64_t v1064 = v1494;
          v1065 = v1496;
          do
          {
            unsigned int *v1065 = 0x40000000;
            v1065 += 7;
            --v1064;
          }
          while (v1064);
        }
        uint64_t v1066 = 0;
        unsigned int v1067 = v1051 + v1048;
        if (v1044 <= 1) {
          uint64_t v1044 = 1;
        }
        else {
          uint64_t v1044 = v1044;
        }
        unsigned int v1068 = v1542;
        do
        {
          v1069 = &v783[2 * v1066];
          unsigned int v1070 = v1069[1];
          if (v1068 <= v1070)
          {
            unsigned int v1071 = *v1069;
            uint64_t v1072 = __clz(v1071 + 1) ^ 0x1F;
            if (v1046 == 1)
            {
              unsigned int v1073 = (v1068 << 8) - 512;
              do
              {
                unsigned int v1074 = __clz(v1068 - 2);
                v1075 = &v775[7 * v1068];
                v1075[2] = v1068;
                v1075[3] = v1625;
                unsigned int *v1075 = (v1073 >> (v1074 ^ 0x1F)) + (((v1074 ^ 0x1F) + v1072) << 8) + v1067 + 4096;
                v1075[1] = v1071;
                ++v1068;
                v1073 += 256;
              }
              while (v1068 <= v1070);
            }
            else
            {
              uint64_t v1077 = *(void *)(v5 + 96);
              uint64_t v1076 = *(void *)(v5 + 104);
              int v1078 = *(_DWORD *)(v5 + 156) + *(_DWORD *)(v5 + 152) + 51;
              do
              {
                unsigned int v1086 = v1068 - 3;
                if (v1068 - 3 < 0x80) {
                  unsigned int v1079 = ZSTD_MLcode_ML_Code[v1086];
                }
                else {
                  unsigned int v1079 = 67 - __clz(v1086);
                }
                unsigned int v1080 = *(_DWORD *)(v1076 + 4 * v1072) + 1;
                unsigned int v1081 = __clz(v1080);
                uint64_t v1082 = 4 * v1079;
                int v1083 = *(unsigned int *)((char *)ML_bits + v1082);
                LODWORD(v1082) = *(_DWORD *)(v1077 + v1082) + 1;
                unsigned int v1084 = __clz(v1082) ^ 0x1F;
                LODWORD(v1082) = v1067
                               + v1078
                               - (v1080 << 8 >> (v1081 ^ 0x1F))
                               - (v1082 << 8 >> v1084)
                               + ((v1072 + v1083 - (v1081 ^ 0x1F) - v1084) << 8);
                v1085 = &v775[7 * v1068];
                v1085[2] = v1068;
                v1085[3] = v1625;
                unsigned int *v1085 = v1082;
                v1085[1] = v1071;
                ++v1068;
              }
              while (v1068 <= v1070);
            }
          }
          ++v1066;
        }
        while (v1066 != v1044);
        LODWORD(v1087) = v1068 - 1;
        if (v1068 == 1) {
          goto LABEL_2110;
        }
        v1524 = v779 + 8;
        int v1088 = v779 + 1;
        unsigned int v1089 = 1;
        while (2)
        {
          unsigned int v1090 = v1089 - 1;
          v1091 = &v775[7 * v1089 - 7];
          if (v1091[2]) {
            unsigned int v1092 = 1u;
          }
          else {
            unsigned int v1092 = v775[7 * v1090 + 3] + 1;
          }
          uint64_t v1093 = v1089;
          v1618 = &v779[v1089];
          unsigned int v1094 = *v1091;
          int v1095 = *(_DWORD *)(v5 + 160);
          if (*(_DWORD *)(v5 + 176) == 2)
          {
            unsigned int v1096 = v1094 + 2048;
            if (v1095 != 1)
            {
              if (v1092 >= 0x40) {
                goto LABEL_1597;
              }
LABEL_1603:
              unsigned int v1097 = ZSTD_LLcode_LL_Code[v1092];
              unsigned int v1098 = v1092 - 1;
              if (v1092 - 1 >= 0x40) {
                goto LABEL_1604;
              }
LABEL_1598:
              unsigned int v1099 = ZSTD_LLcode_LL_Code[v1098];
              goto LABEL_1605;
            }
LABEL_1601:
            unsigned int v1100 = __clz(v1092 + 1);
            int v1101 = ((v1092 + 1) << 8 >> (v1100 ^ 0x1F)) + ((v1100 ^ 0x1F) << 8);
            unsigned int v1102 = __clz(v1092) ^ 0x1F;
            int v1103 = -((v1092 << 8 >> v1102) + (v1102 << 8));
          }
          else
          {
            if (v1095 == 1)
            {
              unsigned int v1096 = v1094 + 1536;
              goto LABEL_1601;
            }
            unsigned int v1104 = *(_DWORD *)(*(void *)(v5 + 80) + 4 * *(v1618 - 1)) + 1;
            unsigned int v1105 = __clz(v1104);
            unsigned int v1096 = *(_DWORD *)(v5 + 144) - ((v1104 << 8 >> (v1105 ^ 0x1F)) + ((v1105 ^ 0x1F) << 8)) + v1094;
            if (v1092 < 0x40) {
              goto LABEL_1603;
            }
LABEL_1597:
            unsigned int v1097 = 50 - __clz(v1092);
            unsigned int v1098 = v1092 - 1;
            if (v1092 - 1 < 0x40) {
              goto LABEL_1598;
            }
LABEL_1604:
            unsigned int v1099 = 50 - __clz(v1098);
LABEL_1605:
            uint64_t v1106 = 4 * v1097;
            int v1107 = *(unsigned int *)((char *)LL_bits + v1106);
            int v1108 = *(_DWORD *)(v5 + 148);
            uint64_t v1109 = *(void *)(v5 + 88);
            LODWORD(v1106) = *(_DWORD *)(v1109 + v1106) + 1;
            unsigned int v1110 = __clz(v1106) ^ 0x1F;
            int v1101 = v1108 - (v1106 << 8 >> v1110) + ((v1107 - v1110) << 8);
            uint64_t v1111 = 4 * v1099;
            int v1112 = *(unsigned int *)((char *)LL_bits + v1111);
            LODWORD(v1111) = *(_DWORD *)(v1109 + v1111) + 1;
            LODWORD(v1109) = __clz(v1111) ^ 0x1F;
            int v1103 = (v1111 << 8 >> v1109) - v1108 + ((v1109 - v1112) << 8);
          }
          signed int v1113 = v1096 + v1101 + v1103;
          v1114 = &v775[7 * v1093];
          signed int v1117 = *v1114;
          v1115 = v1114 + 2;
          int v1116 = v1117;
          if (v1113 <= v1117)
          {
            v1124 = &v775[7 * v1093];
            v1124[1] = 0;
            v1124[2] = 0;
            v1124[3] = v1092;
            unsigned int *v1124 = v1113;
            int v1116 = v1113;
LABEL_1611:
            int v1125 = 0;
            v1126 = &v775[7 * v1093];
            v1127 = &v775[7 * v1090];
            *((void *)v1126 + 2) = *((void *)v1127 + 2);
            v1126[6] = v1127[6];
            int v1128 = 1;
            if ((unint64_t)v1618 <= v1593) {
              goto LABEL_1625;
            }
LABEL_1590:
            unsigned int v1089 = v1093 + 1;
            ++v1088;
            long long v782 = v1595;
            if (v1089 > v1087) {
              goto LABEL_2110;
            }
            continue;
          }
          break;
        }
        if (!*v1115) {
          goto LABEL_1611;
        }
        v1118 = &v775[7 * (v1093 - *v1115) + 4];
        unsigned int v1119 = v775[7 * v1093 + 1];
        if (v1119 < 3)
        {
          if (v775[7 * v1093 + 3]) {
            unsigned int v1129 = v775[7 * v1093 + 1];
          }
          else {
            unsigned int v1129 = v1119 + 1;
          }
          if (v1129)
          {
            if (v1129 == 3)
            {
              unint64_t v1121 = *v1118;
              unsigned int v1123 = v1121 - 1;
            }
            else
            {
              unsigned int v1123 = v1118[v1129];
              unint64_t v1121 = *v1118;
            }
            BOOL v658 = v1129 > 1;
            uint64_t v1131 = 2;
            if (v658) {
              uint64_t v1131 = 1;
            }
            v1120 = &v1118[v1131];
          }
          else
          {
            unint64_t v1130 = *(void *)v1118;
            v1120 = &v775[7 * (v1093 - *v1115) + 6];
            unsigned int v1123 = v1130;
            unint64_t v1121 = HIDWORD(v1130);
          }
        }
        else
        {
          unsigned int v1122 = *v1118;
          v1120 = &v775[7 * (v1093 - *v1115) + 5];
          unint64_t v1121 = v1122;
          unsigned int v1123 = v1119 - 2;
        }
        int v1128 = 0;
        unsigned int v1132 = *v1120;
        unint64_t v1133 = v1123 | (v1121 << 32);
        v1134 = &v775[7 * v1093];
        *((void *)v1134 + 2) = v1133;
        v1134[6] = v1132;
        int v1125 = 1;
        if ((unint64_t)v1618 > v1593) {
          goto LABEL_1590;
        }
LABEL_1625:
        if (v1093 == v1087)
        {
          long long v782 = v1595;
LABEL_2110:
          v1412 = &v775[7 * v1087];
          unsigned int v1059 = v1412[1];
          unsigned int v1526 = *v1412;
          unsigned int v1050 = v1412[2];
          unsigned int v1045 = v1412[3];
          uint64_t v1634 = *((void *)v1412 + 2);
          unsigned int v1635 = v1412[6];
          if (v1087 >= v1045 + v1050) {
            unsigned int v1058 = v1087 - (v1045 + v1050);
          }
          else {
            unsigned int v1058 = 0;
          }
          if (!v1050) {
            goto LABEL_2198;
          }
          goto LABEL_2114;
        }
        if (v1128) {
          int v1128 = v775[7 * v1093 + 3];
        }
        if (*(_DWORD *)(v5 + 160) == 1)
        {
          int v1135 = 256;
        }
        else
        {
          unsigned int v1136 = **(_DWORD **)(v5 + 88) + 1;
          unsigned int v1137 = __clz(v1136) ^ 0x1F;
          int v1135 = *(_DWORD *)(v5 + 148) - ((v1136 << 8 >> v1137) + (v1137 << 8));
        }
        int v1562 = v1135;
        int v1568 = v1116;
        v1534 = v1115;
        int v1581 = v1088;
        unsigned int v1631 = 0;
        uint64_t v1138 = *(void *)(v5 + 8);
        uint64_t v1139 = v5;
        uint64_t v1140 = *(unsigned int *)(v5 + 36);
        int v1626 = v1128;
        if (v1138 + v1140 > (unint64_t)v1618)
        {
          unsigned int v1141 = 0;
          uint64_t v5 = v1139;
          int v1142 = v1603;
          v1143 = v775 + 7;
          LODWORD(v1144) = v1618;
          goto LABEL_2042;
        }
        unsigned int v1529 = v1125;
        int v1145 = *(_DWORD *)(v1139 + 208);
        for (unsigned int m = v1618 - v1138;
              v1140 < m;
        v1147 = &v775[7 * v1093 + 4];
        *(_DWORD *)(v1139 + 36) = m;
        uint64_t v5 = v1139;
        if ((v1145 - 6) < 2)
        {
          unsigned int v1141 = 0;
          if (*(_DWORD *)(v1139 + 212) >= 0xFFFu) {
            unsigned int v1179 = 4095;
          }
          else {
            unsigned int v1179 = *(_DWORD *)(v1139 + 212);
          }
          uint64_t v1180 = *(void *)(v1139 + 8);
          v1144 = v1618;
          int v1181 = v1618 - v1180;
          v1182 = v1618 + 4;
          int v1504 = *(_DWORD *)(v1139 + 204);
          unint64_t v1512 = (0xCF1BBCDCBF9B0000 * *(void *)v1618) >> -(char)*(_DWORD *)(v1139 + 200);
          uint64_t v1520 = *(void *)(v1139 + 48);
          unsigned int v1183 = *(_DWORD *)(v1520 + 4 * v1512);
          int v1184 = -1 << (*(_DWORD *)(v1139 + 196) - 1);
          int v1185 = ~v1184;
          unsigned int v1186 = v1618 - v1180 + v1184 + 1;
          if ((int)v1618 - (int)v1180 < ~v1184) {
            unsigned int v1186 = 0;
          }
          unsigned int v1545 = v1186;
          int v1187 = *(_DWORD *)(v1139 + 24);
          unsigned int v1188 = 1 << *(_DWORD *)(v1139 + 192);
          if (v1181 - *(_DWORD *)(v1139 + 28) > v1188 && *(_DWORD *)(v1139 + 32) == 0) {
            unsigned int v1190 = v1181 - v1188;
          }
          else {
            unsigned int v1190 = *(_DWORD *)(v1139 + 28);
          }
          if (v1190 <= 1) {
            int v1191 = 1;
          }
          else {
            int v1191 = v1190;
          }
          unsigned int v1553 = v1191;
          uint64_t v1192 = *(void *)(v1139 + 64);
          v1193 = (unsigned int *)(v1192 + 8 * (v1181 & ~v1184));
          v1558 = v1193 + 1;
          int v1194 = v1181 + 9;
          LODWORD(v1632) = 0;
          unint64_t v1195 = (v1542 - 1);
          if (v1529) {
            unint64_t v1196 = 4;
          }
          else {
            unint64_t v1196 = 3;
          }
          unsigned int v1197 = v1181 - v1187;
          uint64_t v1198 = v1529;
          v1143 = v775 + 7;
          while (1)
          {
            if (v1198 == 3)
            {
              unsigned int v1199 = *v1147 - 1;
              if (*v1147 - 2 >= v1197) {
                goto LABEL_1709;
              }
            }
            else
            {
              unsigned int v1199 = v1147[v1198];
              if (v1199 - 1 >= v1197) {
                goto LABEL_1709;
              }
            }
            int v1200 = *(_DWORD *)v1144;
            int v1201 = *(_DWORD *)&v1144[-v1199];
            if (v1181 - v1199 < v1190 || v1200 != v1201)
            {
              v1144 = v1618;
              goto LABEL_1709;
            }
            v1203 = (void *)((char *)v1182 - v1199);
            if (v1620 <= (unint64_t)v1182) {
              break;
            }
            v1204 = v1618 + 4;
            unint64_t v1205 = *v1182 ^ *v1203;
            if (!v1205)
            {
              do
              {
                ++v1203;
                if ((unint64_t)++v1204 >= v1620) {
                  goto LABEL_1728;
                }
                unint64_t v1208 = *v1204 ^ *v1203;
              }
              while (!v1208);
              v1144 = v1618;
              unsigned int v1206 = v1204 + (__clz(__rbit64(v1208)) >> 3) - v1618;
              unint64_t v1207 = v1206;
              if (v1195 >= v1206) {
                goto LABEL_1709;
              }
LABEL_1736:
              v1209 = &v1611[2 * v1141];
              _DWORD *v1209 = v1198 + ((int)(v1529 << 31) >> 31);
              v1209[1] = v1206;
              ++v1141;
              if (v1206 > v1179) {
                goto LABEL_1746;
              }
              unint64_t v1195 = v1207;
              if (&v1144[v1207] == (unsigned __int8 *)v1603) {
                goto LABEL_1746;
              }
              goto LABEL_1709;
            }
            v1144 = v1618;
            unsigned int v1206 = (__clz(__rbit64(v1205)) >> 3) + 4;
            unint64_t v1207 = v1206;
            if (v1195 < v1206) {
              goto LABEL_1736;
            }
LABEL_1709:
            if (++v1198 >= v1196)
            {
              *(_DWORD *)(v1520 + 4 * v1512) = v1181;
              if (v1183 < v1553) {
                goto LABEL_1745;
              }
              unint64_t v1274 = 0;
              unint64_t v1275 = 0;
              int v1276 = ~(-1 << v1504);
              int v1277 = v1181 + 2;
              v1530 = (char *)v1524 + v1093;
              uint64_t v1278 = v1180 + 8;
              while (1)
              {
                unint64_t v1279 = v1275 >= v1274 ? v1274 : v1275;
                uint64_t v1280 = v1180 + v1183;
                v1281 = (char *)&v1144[v1279];
                v1282 = (void *)(v1280 + v1279);
                if (v1620 <= (unint64_t)&v1144[v1279]) {
                  break;
                }
                unint64_t v1283 = *(void *)v1281 ^ *v1282;
                if (v1283)
                {
                  v1284 = v1611;
                  unint64_t v1285 = (__clz(__rbit64(v1283)) >> 3) + v1279;
                  if (v1285 <= v1195) {
                    goto LABEL_1889;
                  }
                  goto LABEL_1883;
                }
                uint64_t v1290 = 0;
                v1291 = &v1530[v1279];
                do
                {
                  v1292 = &v1291[v1290];
                  if ((unint64_t)&v1291[v1290] >= v1620)
                  {
                    v1286 = &v1530[v1279 + v1290];
                    v1282 = (void *)(v1278 + v1279 + v1183 + v1290);
                    uint64_t v5 = a1;
                    v1144 = v1618;
                    if ((unint64_t)v1286 >= v1599) {
                      goto LABEL_1874;
                    }
                    goto LABEL_1872;
                  }
                  uint64_t v1293 = *(void *)(v1278 + v1279 + v1183 + v1290);
                  v1290 += 8;
                  unint64_t v1294 = *(void *)v1292 ^ v1293;
                }
                while (!v1294);
                uint64_t v1295 = v1290 + (__clz(__rbit64(v1294)) >> 3);
                uint64_t v5 = a1;
                v1284 = v1611;
                v1144 = v1618;
                unint64_t v1285 = v1295 + v1279;
                if (v1285 <= v1195) {
                  goto LABEL_1889;
                }
LABEL_1883:
                if (v1285 > v1194 - v1183) {
                  int v1194 = v1183 + v1285;
                }
                v1287 = &v1284[2 * v1141];
                _DWORD *v1287 = v1277 - v1183;
                v1287[1] = v1285;
                ++v1141;
                BOOL v1288 = v1285 > 0x1000 || &v1144[v1285] == (unsigned __int8 *)v1603;
                unint64_t v1195 = v1285;
                if (v1288) {
                  goto LABEL_1745;
                }
LABEL_1889:
                v1289 = (unsigned int *)(v1192 + 8 * (v1183 & v1185));
                if (*(unsigned __int8 *)(v1280 + v1285) >= v1144[v1285])
                {
                  unsigned int *v1558 = v1183;
                  if (v1183 <= v1545)
                  {
                    v1558 = (unsigned int *)&v1632;
                    goto LABEL_1745;
                  }
                  unint64_t v1274 = v1285;
                  v1558 = (unsigned int *)(v1192 + 8 * (v1183 & v1185));
                  BOOL v294 = v1276-- != 0;
                  if (v294) {
                    goto LABEL_1863;
                  }
LABEL_1745:
                  unsigned int *v1558 = 0;
                  unsigned int *v1193 = 0;
                  *(_DWORD *)(v5 + 36) = v1194 - 8;
LABEL_1746:
                  v783 = v1611;
                  unint64_t v780 = (unint64_t)v1587;
                  int v1142 = v1603;
                  goto LABEL_2042;
                }
                unsigned int *v1193 = v1183;
                if (v1183 <= v1545)
                {
                  v1193 = (unsigned int *)&v1632;
                  goto LABEL_1745;
                }
                ++v1289;
                unint64_t v1275 = v1285;
                v1193 = v1289;
                BOOL v294 = v1276-- != 0;
                if (!v294) {
                  goto LABEL_1745;
                }
LABEL_1863:
                unsigned int v1183 = *v1289;
                if (*v1289 < v1553) {
                  goto LABEL_1745;
                }
              }
              v1286 = (char *)&v1144[v1279];
              if ((unint64_t)v1281 >= v1599) {
                goto LABEL_1874;
              }
LABEL_1872:
              if (*(_DWORD *)v1282 == *(_DWORD *)v1286)
              {
                v1286 += 4;
                v1282 = (void *)((char *)v1282 + 4);
              }
LABEL_1874:
              if ((unint64_t)v1286 >= v1597)
              {
                if ((unint64_t)v1286 >= v1603) {
                  goto LABEL_1882;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v1282 == *(unsigned __int16 *)v1286)
                {
                  v1286 += 2;
                  v1282 = (void *)((char *)v1282 + 2);
                }
                if ((unint64_t)v1286 >= v1603)
                {
LABEL_1882:
                  v1284 = v1611;
                  unint64_t v1285 = v1286 - v1281 + v1279;
                  if (v1285 <= v1195) {
                    goto LABEL_1889;
                  }
                  goto LABEL_1883;
                }
              }
              v1144 = v1618;
              if (*(unsigned __int8 *)v1282 == *v1286) {
                ++v1286;
              }
              goto LABEL_1882;
            }
          }
          v1204 = v1618 + 4;
LABEL_1728:
          if ((unint64_t)v1204 >= v1599)
          {
            if ((unint64_t)v1204 >= v1597) {
              goto LABEL_1732;
            }
          }
          else
          {
            if (*(_DWORD *)v1203 == *(_DWORD *)v1204)
            {
              v1204 = (void *)((char *)v1204 + 4);
              v1203 = (void *)((char *)v1203 + 4);
            }
            if ((unint64_t)v1204 >= v1597)
            {
LABEL_1732:
              if ((unint64_t)v1204 < v1603) {
                goto LABEL_1733;
              }
              goto LABEL_1735;
            }
          }
          if (*(unsigned __int16 *)v1203 == *(unsigned __int16 *)v1204)
          {
            v1204 = (void *)((char *)v1204 + 2);
            v1203 = (void *)((char *)v1203 + 2);
          }
          if ((unint64_t)v1204 < v1603)
          {
LABEL_1733:
            if (*(unsigned __int8 *)v1203 == *(unsigned __int8 *)v1204) {
              LODWORD(v1204) = v1204 + 1;
            }
          }
LABEL_1735:
          v1144 = v1618;
          unsigned int v1206 = v1204 - v1618;
          unint64_t v1207 = v1206;
          if (v1195 < v1206) {
            goto LABEL_1736;
          }
          goto LABEL_1709;
        }
        int v1142 = v1603;
        v1143 = v775 + 7;
        v1144 = v1618;
        if (v1145 == 5)
        {
          unsigned int v1141 = 0;
          if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
            unsigned int v1210 = 4095;
          }
          else {
            unsigned int v1210 = *(_DWORD *)(v5 + 212);
          }
          uint64_t v1554 = *(void *)(v5 + 8);
          int v1211 = v1618 - v1554;
          v1212 = v1618 + 4;
          int v1505 = *(_DWORD *)(v5 + 204);
          unint64_t v1513 = (0xCF1BBCDCBB000000 * *(void *)v1618) >> -(char)*(_DWORD *)(v5 + 200);
          uint64_t v1521 = *(void *)(v5 + 48);
          unsigned int v1213 = *(_DWORD *)(v1521 + 4 * v1513);
          int v1214 = -1 << (*(_DWORD *)(v5 + 196) - 1);
          int v1215 = ~v1214;
          unsigned int v1216 = v1618 - v1554 + v1214 + 1;
          if ((int)v1618 - (int)v1554 < ~v1214) {
            unsigned int v1216 = 0;
          }
          unsigned int v1546 = v1216;
          int v1217 = *(_DWORD *)(v5 + 24);
          unsigned int v1218 = 1 << *(_DWORD *)(v5 + 192);
          if (v1211 - *(_DWORD *)(v5 + 28) > v1218 && *(_DWORD *)(v5 + 32) == 0) {
            unsigned int v1220 = v1211 - v1218;
          }
          else {
            unsigned int v1220 = *(_DWORD *)(v5 + 28);
          }
          if (v1220 <= 1) {
            unsigned int v1221 = 1;
          }
          else {
            unsigned int v1221 = v1220;
          }
          uint64_t v1222 = *(void *)(v5 + 64);
          v1223 = (unsigned int *)(v1222 + 8 * (v1211 & ~v1214));
          v1559 = v1223 + 1;
          int v1224 = v1211 + 9;
          LODWORD(v1632) = 0;
          if (v1529) {
            unint64_t v1225 = 4;
          }
          else {
            unint64_t v1225 = 3;
          }
          unsigned int v1226 = v1211 - v1217;
          uint64_t v1227 = v1529;
          unint64_t v1228 = (v1542 - 1);
          while (1)
          {
            if (v1227 == 3)
            {
              unsigned int v1229 = *v1147 - 1;
              if (*v1147 - 2 >= v1226) {
                goto LABEL_1765;
              }
            }
            else
            {
              unsigned int v1229 = v1147[v1227];
              if (v1229 - 1 >= v1226) {
                goto LABEL_1765;
              }
            }
            int v1230 = *(_DWORD *)v1144;
            int v1231 = *(_DWORD *)&v1144[-v1229];
            if (v1211 - v1229 < v1220 || v1230 != v1231)
            {
              v1144 = v1618;
              goto LABEL_1765;
            }
            v1233 = (void *)((char *)v1212 - v1229);
            if (v1620 <= (unint64_t)v1212) {
              break;
            }
            v1234 = v1618 + 4;
            unint64_t v1235 = *v1212 ^ *v1233;
            if (!v1235)
            {
              do
              {
                ++v1233;
                if ((unint64_t)++v1234 >= v1620) {
                  goto LABEL_1784;
                }
                unint64_t v1238 = *v1234 ^ *v1233;
              }
              while (!v1238);
              v1144 = v1618;
              unsigned int v1236 = v1234 + (__clz(__rbit64(v1238)) >> 3) - v1618;
              unint64_t v1237 = v1236;
              if (v1228 >= v1236) {
                goto LABEL_1765;
              }
LABEL_1792:
              v1239 = &v1611[2 * v1141];
              _DWORD *v1239 = v1227 + ((int)(v1529 << 31) >> 31);
              v1239[1] = v1236;
              ++v1141;
              if (v1236 > v1210) {
                goto LABEL_2041;
              }
              unint64_t v1228 = v1237;
              if (&v1144[v1237] == (unsigned __int8 *)v1603) {
                goto LABEL_2041;
              }
              goto LABEL_1765;
            }
            v1144 = v1618;
            unsigned int v1236 = (__clz(__rbit64(v1235)) >> 3) + 4;
            unint64_t v1237 = v1236;
            if (v1228 < v1236) {
              goto LABEL_1792;
            }
LABEL_1765:
            if (++v1227 >= v1225)
            {
              *(_DWORD *)(v1521 + 4 * v1513) = v1211;
              if (v1213 < v1221) {
                goto LABEL_2040;
              }
              unint64_t v1296 = 0;
              unint64_t v1297 = 0;
              int v1298 = ~(-1 << v1505);
              int v1299 = v1211 + 2;
              v1531 = (char *)v1524 + v1093;
              uint64_t v1300 = v1554 + 8;
              while (1)
              {
                unint64_t v1301 = v1297 >= v1296 ? v1296 : v1297;
                uint64_t v1302 = v1554 + v1213;
                v1303 = (char *)&v1144[v1301];
                v1304 = (void *)(v1302 + v1301);
                if (v1620 <= (unint64_t)&v1144[v1301]) {
                  break;
                }
                unint64_t v1305 = *(void *)v1303 ^ *v1304;
                if (v1305)
                {
                  v1306 = v1611;
                  unint64_t v1307 = (__clz(__rbit64(v1305)) >> 3) + v1301;
                  if (v1307 <= v1228) {
                    goto LABEL_1931;
                  }
                  goto LABEL_1925;
                }
                uint64_t v1312 = 0;
                v1313 = &v1531[v1301];
                while (1)
                {
                  v1314 = &v1313[v1312];
                  if ((unint64_t)&v1313[v1312] >= v1620) {
                    break;
                  }
                  uint64_t v1315 = *(void *)(v1300 + v1301 + v1213 + v1312);
                  v1312 += 8;
                  unint64_t v1316 = *(void *)v1314 ^ v1315;
                  if (v1316)
                  {
                    uint64_t v1317 = v1312 + (__clz(__rbit64(v1316)) >> 3);
                    uint64_t v5 = a1;
                    v1306 = v1611;
                    v1144 = v1618;
                    unint64_t v1307 = v1317 + v1301;
                    if (v1307 <= v1228) {
                      goto LABEL_1931;
                    }
                    goto LABEL_1925;
                  }
                }
                v1308 = &v1531[v1301 + v1312];
                v1304 = (void *)(v1300 + v1301 + v1213 + v1312);
                uint64_t v5 = a1;
                v1144 = v1618;
                if ((unint64_t)v1308 < v1599) {
                  goto LABEL_1914;
                }
LABEL_1916:
                if ((unint64_t)v1308 >= v1597)
                {
                  if ((unint64_t)v1308 >= v1603) {
                    goto LABEL_1924;
                  }
LABEL_1922:
                  v1144 = v1618;
                  if (*(unsigned __int8 *)v1304 == *v1308) {
                    ++v1308;
                  }
                  goto LABEL_1924;
                }
                if (*(unsigned __int16 *)v1304 == *(unsigned __int16 *)v1308)
                {
                  v1308 += 2;
                  v1304 = (void *)((char *)v1304 + 2);
                }
                if ((unint64_t)v1308 < v1603) {
                  goto LABEL_1922;
                }
LABEL_1924:
                v1306 = v1611;
                unint64_t v1307 = v1308 - v1303 + v1301;
                if (v1307 <= v1228) {
                  goto LABEL_1931;
                }
LABEL_1925:
                if (v1307 > v1224 - v1213) {
                  int v1224 = v1213 + v1307;
                }
                v1309 = &v1306[2 * v1141];
                _DWORD *v1309 = v1299 - v1213;
                v1309[1] = v1307;
                ++v1141;
                BOOL v1310 = v1307 > 0x1000 || &v1144[v1307] == (unsigned __int8 *)v1603;
                unint64_t v1228 = v1307;
                if (v1310) {
                  goto LABEL_2040;
                }
LABEL_1931:
                v1311 = (unsigned int *)(v1222 + 8 * (v1213 & v1215));
                if (*(unsigned __int8 *)(v1302 + v1307) >= v1144[v1307])
                {
                  unsigned int *v1559 = v1213;
                  if (v1213 <= v1546) {
                    goto LABEL_2038;
                  }
                  unint64_t v1296 = v1307;
                  v1559 = (unsigned int *)(v1222 + 8 * (v1213 & v1215));
                  BOOL v294 = v1298-- != 0;
                  if (!v294) {
                    goto LABEL_2040;
                  }
                }
                else
                {
                  unsigned int *v1223 = v1213;
                  if (v1213 <= v1546)
                  {
LABEL_2039:
                    v1223 = (unsigned int *)&v1632;
                    goto LABEL_2040;
                  }
                  ++v1311;
                  unint64_t v1297 = v1307;
                  v1223 = v1311;
                  BOOL v294 = v1298-- != 0;
                  if (!v294) {
                    goto LABEL_2040;
                  }
                }
                unsigned int v1213 = *v1311;
                if (*v1311 < v1221) {
                  goto LABEL_2040;
                }
              }
              v1308 = (char *)&v1144[v1301];
              if ((unint64_t)v1303 >= v1599) {
                goto LABEL_1916;
              }
LABEL_1914:
              if (*(_DWORD *)v1304 == *(_DWORD *)v1308)
              {
                v1308 += 4;
                v1304 = (void *)((char *)v1304 + 4);
              }
              goto LABEL_1916;
            }
          }
          v1234 = v1618 + 4;
LABEL_1784:
          if ((unint64_t)v1234 >= v1599)
          {
            if ((unint64_t)v1234 >= v1597) {
              goto LABEL_1788;
            }
          }
          else
          {
            if (*(_DWORD *)v1233 == *(_DWORD *)v1234)
            {
              v1234 = (void *)((char *)v1234 + 4);
              v1233 = (void *)((char *)v1233 + 4);
            }
            if ((unint64_t)v1234 >= v1597)
            {
LABEL_1788:
              if ((unint64_t)v1234 >= v1603) {
                goto LABEL_1791;
              }
              goto LABEL_1789;
            }
          }
          if (*(unsigned __int16 *)v1233 == *(unsigned __int16 *)v1234)
          {
            v1234 = (void *)((char *)v1234 + 2);
            v1233 = (void *)((char *)v1233 + 2);
          }
          if ((unint64_t)v1234 >= v1603)
          {
LABEL_1791:
            v1144 = v1618;
            unsigned int v1236 = v1234 - v1618;
            unint64_t v1237 = v1236;
            if (v1228 < v1236) {
              goto LABEL_1792;
            }
            goto LABEL_1765;
          }
LABEL_1789:
          if (*(unsigned __int8 *)v1233 == *(unsigned __int8 *)v1234) {
            LODWORD(v1234) = v1234 + 1;
          }
          goto LABEL_1791;
        }
        if (v1145 != 3)
        {
          unsigned int v1141 = 0;
          if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
            unsigned int v1240 = 4095;
          }
          else {
            unsigned int v1240 = *(_DWORD *)(v5 + 212);
          }
          uint64_t v1555 = *(void *)(v5 + 8);
          int v1241 = v1618 - v1555;
          v1242 = v1618 + 4;
          int v1506 = *(_DWORD *)(v5 + 204);
          uint64_t v1514 = (-1640531535 * *(_DWORD *)v1618) >> -(char)*(_DWORD *)(v5 + 200);
          uint64_t v1522 = *(void *)(v5 + 48);
          unsigned int v1243 = *(_DWORD *)(v1522 + 4 * v1514);
          int v1244 = -1 << (*(_DWORD *)(v5 + 196) - 1);
          int v1245 = ~v1244;
          unsigned int v1246 = v1618 - v1555 + v1244 + 1;
          if ((int)v1618 - (int)v1555 < ~v1244) {
            unsigned int v1246 = 0;
          }
          unsigned int v1547 = v1246;
          int v1247 = *(_DWORD *)(v5 + 24);
          unsigned int v1248 = 1 << *(_DWORD *)(v5 + 192);
          if (v1241 - *(_DWORD *)(v5 + 28) > v1248 && *(_DWORD *)(v5 + 32) == 0) {
            unsigned int v1250 = v1241 - v1248;
          }
          else {
            unsigned int v1250 = *(_DWORD *)(v5 + 28);
          }
          if (v1250 <= 1) {
            unsigned int v1251 = 1;
          }
          else {
            unsigned int v1251 = v1250;
          }
          uint64_t v1252 = *(void *)(v5 + 64);
          v1223 = (unsigned int *)(v1252 + 8 * (v1241 & ~v1244));
          v1559 = v1223 + 1;
          int v1224 = v1241 + 9;
          LODWORD(v1632) = 0;
          if (v1529) {
            unint64_t v1253 = 4;
          }
          else {
            unint64_t v1253 = 3;
          }
          unsigned int v1254 = v1241 - v1247;
          uint64_t v1255 = v1529;
          unint64_t v1256 = (v1542 - 1);
          while (1)
          {
            if (v1255 == 3)
            {
              unsigned int v1257 = *v1147 - 1;
              if (*v1147 - 2 >= v1254) {
                goto LABEL_1818;
              }
            }
            else
            {
              unsigned int v1257 = v1147[v1255];
              if (v1257 - 1 >= v1254) {
                goto LABEL_1818;
              }
            }
            int v1258 = *(_DWORD *)v1144;
            int v1259 = *(_DWORD *)&v1144[-v1257];
            if (v1241 - v1257 < v1250 || v1258 != v1259)
            {
              v1144 = v1618;
              goto LABEL_1818;
            }
            v1261 = (void *)((char *)v1242 - v1257);
            if (v1620 <= (unint64_t)v1242) {
              break;
            }
            v1262 = v1618 + 4;
            unint64_t v1263 = *v1242 ^ *v1261;
            if (!v1263)
            {
              do
              {
                ++v1261;
                if ((unint64_t)++v1262 >= v1620) {
                  goto LABEL_1837;
                }
                unint64_t v1266 = *v1262 ^ *v1261;
              }
              while (!v1266);
              v1144 = v1618;
              unsigned int v1264 = v1262 + (__clz(__rbit64(v1266)) >> 3) - v1618;
              unint64_t v1265 = v1264;
              if (v1256 >= v1264) {
                goto LABEL_1818;
              }
LABEL_1845:
              v1267 = &v1611[2 * v1141];
              _DWORD *v1267 = v1255 + ((int)(v1529 << 31) >> 31);
              v1267[1] = v1264;
              ++v1141;
              if (v1264 > v1240) {
                goto LABEL_2041;
              }
              unint64_t v1256 = v1265;
              if (&v1144[v1265] == (unsigned __int8 *)v1603) {
                goto LABEL_2041;
              }
              goto LABEL_1818;
            }
            v1144 = v1618;
            unsigned int v1264 = (__clz(__rbit64(v1263)) >> 3) + 4;
            unint64_t v1265 = v1264;
            if (v1256 < v1264) {
              goto LABEL_1845;
            }
LABEL_1818:
            if (++v1255 >= v1253)
            {
              *(_DWORD *)(v1522 + 4 * v1514) = v1241;
              if (v1243 < v1251) {
                goto LABEL_2040;
              }
              unint64_t v1318 = 0;
              unint64_t v1319 = 0;
              int v1320 = ~(-1 << v1506);
              int v1321 = v1241 + 2;
              v1532 = (char *)v1524 + v1093;
              uint64_t v1322 = v1555 + 8;
              while (1)
              {
                unint64_t v1323 = v1319 >= v1318 ? v1318 : v1319;
                uint64_t v1324 = v1555 + v1243;
                v1325 = (char *)&v1144[v1323];
                v1326 = (void *)(v1324 + v1323);
                if (v1620 <= (unint64_t)&v1144[v1323]) {
                  break;
                }
                unint64_t v1327 = *(void *)v1325 ^ *v1326;
                if (v1327)
                {
                  v1328 = v1611;
                  unint64_t v1329 = (__clz(__rbit64(v1327)) >> 3) + v1323;
                  if (v1329 <= v1256) {
                    goto LABEL_1973;
                  }
                  goto LABEL_1967;
                }
                uint64_t v1334 = 0;
                v1335 = &v1532[v1323];
                do
                {
                  v1336 = &v1335[v1334];
                  if ((unint64_t)&v1335[v1334] >= v1620)
                  {
                    v1330 = &v1532[v1323 + v1334];
                    v1326 = (void *)(v1322 + v1323 + v1243 + v1334);
                    uint64_t v5 = a1;
                    v1144 = v1618;
                    if ((unint64_t)v1330 >= v1599) {
                      goto LABEL_1958;
                    }
                    goto LABEL_1956;
                  }
                  uint64_t v1337 = *(void *)(v1322 + v1323 + v1243 + v1334);
                  v1334 += 8;
                  unint64_t v1338 = *(void *)v1336 ^ v1337;
                }
                while (!v1338);
                uint64_t v1339 = v1334 + (__clz(__rbit64(v1338)) >> 3);
                uint64_t v5 = a1;
                v1328 = v1611;
                v1144 = v1618;
                unint64_t v1329 = v1339 + v1323;
                if (v1329 <= v1256) {
                  goto LABEL_1973;
                }
LABEL_1967:
                if (v1329 > v1224 - v1243) {
                  int v1224 = v1243 + v1329;
                }
                v1331 = &v1328[2 * v1141];
                _DWORD *v1331 = v1321 - v1243;
                v1331[1] = v1329;
                ++v1141;
                BOOL v1332 = v1329 > 0x1000 || &v1144[v1329] == (unsigned __int8 *)v1603;
                unint64_t v1256 = v1329;
                if (v1332) {
                  goto LABEL_2040;
                }
LABEL_1973:
                v1333 = (unsigned int *)(v1252 + 8 * (v1243 & v1245));
                if (*(unsigned __int8 *)(v1324 + v1329) >= v1144[v1329])
                {
                  unsigned int *v1559 = v1243;
                  if (v1243 > v1547)
                  {
                    unint64_t v1318 = v1329;
                    v1559 = (unsigned int *)(v1252 + 8 * (v1243 & v1245));
                    BOOL v294 = v1320-- != 0;
                    if (v294) {
                      goto LABEL_1947;
                    }
LABEL_2040:
                    unsigned int *v1559 = 0;
                    unsigned int *v1223 = 0;
                    *(_DWORD *)(v5 + 36) = v1224 - 8;
LABEL_2041:
                    v783 = v1611;
                    unint64_t v780 = (unint64_t)v1587;
                    goto LABEL_2042;
                  }
LABEL_2038:
                  v1559 = (unsigned int *)&v1632;
                  goto LABEL_2040;
                }
                unsigned int *v1223 = v1243;
                if (v1243 <= v1547) {
                  goto LABEL_2039;
                }
                ++v1333;
                unint64_t v1319 = v1329;
                v1223 = v1333;
                BOOL v294 = v1320-- != 0;
                if (!v294) {
                  goto LABEL_2040;
                }
LABEL_1947:
                unsigned int v1243 = *v1333;
                if (*v1333 < v1251) {
                  goto LABEL_2040;
                }
              }
              v1330 = (char *)&v1144[v1323];
              if ((unint64_t)v1325 >= v1599) {
                goto LABEL_1958;
              }
LABEL_1956:
              if (*(_DWORD *)v1326 == *(_DWORD *)v1330)
              {
                v1330 += 4;
                v1326 = (void *)((char *)v1326 + 4);
              }
LABEL_1958:
              if ((unint64_t)v1330 >= v1597)
              {
                if ((unint64_t)v1330 >= v1603) {
                  goto LABEL_1966;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v1326 == *(unsigned __int16 *)v1330)
                {
                  v1330 += 2;
                  v1326 = (void *)((char *)v1326 + 2);
                }
                if ((unint64_t)v1330 >= v1603)
                {
LABEL_1966:
                  v1328 = v1611;
                  unint64_t v1329 = v1330 - v1325 + v1323;
                  if (v1329 <= v1256) {
                    goto LABEL_1973;
                  }
                  goto LABEL_1967;
                }
              }
              v1144 = v1618;
              if (*(unsigned __int8 *)v1326 == *v1330) {
                ++v1330;
              }
              goto LABEL_1966;
            }
          }
          v1262 = v1618 + 4;
LABEL_1837:
          if ((unint64_t)v1262 >= v1599)
          {
            if ((unint64_t)v1262 >= v1597) {
              goto LABEL_1841;
            }
          }
          else
          {
            if (*(_DWORD *)v1261 == *(_DWORD *)v1262)
            {
              v1262 = (void *)((char *)v1262 + 4);
              v1261 = (void *)((char *)v1261 + 4);
            }
            if ((unint64_t)v1262 >= v1597)
            {
LABEL_1841:
              if ((unint64_t)v1262 >= v1603) {
                goto LABEL_1844;
              }
              goto LABEL_1842;
            }
          }
          if (*(unsigned __int16 *)v1261 == *(unsigned __int16 *)v1262)
          {
            v1262 = (void *)((char *)v1262 + 2);
            v1261 = (void *)((char *)v1261 + 2);
          }
          if ((unint64_t)v1262 >= v1603)
          {
LABEL_1844:
            v1144 = v1618;
            unsigned int v1264 = v1262 - v1618;
            unint64_t v1265 = v1264;
            if (v1256 < v1264) {
              goto LABEL_1845;
            }
            goto LABEL_1818;
          }
LABEL_1842:
          if (*(unsigned __int8 *)v1261 == *(unsigned __int8 *)v1262) {
            LODWORD(v1262) = v1262 + 1;
          }
          goto LABEL_1844;
        }
        unsigned int v1141 = 0;
        v1492 = (char *)v1524 + v1093;
        if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
          unsigned int v1148 = 4095;
        }
        else {
          unsigned int v1148 = *(_DWORD *)(v5 + 212);
        }
        uint64_t v1149 = *(void *)(v5 + 8);
        unsigned int v1150 = v1618 - v1149;
        v1151 = (char *)(v1618 + 3);
        int v1503 = *(_DWORD *)(v5 + 204);
        uint64_t v1511 = (-1640531535 * *(_DWORD *)v1618) >> -(char)*(_DWORD *)(v5 + 200);
        uint64_t v1519 = *(void *)(v5 + 48);
        unsigned int v1152 = *(_DWORD *)(v1519 + 4 * v1511);
        int v1153 = -1 << (*(_DWORD *)(v5 + 196) - 1);
        int v1154 = ~v1153;
        unsigned int v1155 = v1618 - v1149 + v1153 + 1;
        if ((int)v1618 - (int)v1149 < ~v1153) {
          unsigned int v1155 = 0;
        }
        unsigned int v1544 = v1155;
        int v1156 = *(_DWORD *)(v5 + 24);
        unsigned int v1157 = 1 << *(_DWORD *)(v5 + 192);
        if (v1150 - *(_DWORD *)(v5 + 28) > v1157 && *(_DWORD *)(v5 + 32) == 0) {
          unsigned int v1159 = v1150 - v1157;
        }
        else {
          unsigned int v1159 = *(_DWORD *)(v5 + 28);
        }
        if (v1159 <= 1) {
          unsigned int v1160 = 1;
        }
        else {
          unsigned int v1160 = v1159;
        }
        v1161 = (unsigned int *)(*(void *)(v5 + 64) + 8 * (v1150 & ~v1153));
        uint64_t v1552 = *(void *)(v5 + 64);
        v1557 = v1161 + 1;
        unsigned int v1162 = v1150 + 9;
        LODWORD(v1632) = 0;
        if (v1529) {
          unint64_t v1163 = 4;
        }
        else {
          unint64_t v1163 = 3;
        }
        unsigned int v1164 = v1150 - v1156;
        uint64_t v1165 = v1529;
        unint64_t v1166 = (v1542 - 1);
        unint64_t v780 = (unint64_t)v1587;
        while (2)
        {
          if (v1165 != 3)
          {
            unsigned int v1167 = v1147[v1165];
            if (v1167 - 1 < v1164) {
              goto LABEL_1661;
            }
            goto LABEL_1656;
          }
          unsigned int v1167 = *v1147 - 1;
          if (*v1147 - 2 >= v1164) {
            goto LABEL_1656;
          }
LABEL_1661:
          int v1168 = (*(_DWORD *)&v1144[-v1167] ^ *(_DWORD *)v1144) & 0xFFFFFF;
          if (v1150 - v1167 < v1159 || v1168 != 0)
          {
            unint64_t v780 = (unint64_t)v1587;
            v1144 = v1618;
            goto LABEL_1656;
          }
          v1170 = &v1151[-v1167];
          if (v1620 <= (unint64_t)v1151)
          {
            v1171 = v1618 + 3;
          }
          else
          {
            v1171 = v1618 + 3;
            unint64_t v1172 = *(void *)v1151 ^ *(void *)v1170;
            if (v1172)
            {
              unint64_t v1173 = __clz(__rbit64(v1172)) >> 3;
LABEL_1672:
              unint64_t v780 = (unint64_t)v1587;
              v1144 = v1618;
              unsigned int v1175 = v1173 + 3;
              unint64_t v1176 = v1175;
              if (v1166 < v1175) {
                goto LABEL_1683;
              }
              goto LABEL_1656;
            }
            while (1)
            {
              v1170 += 8;
              if ((unint64_t)++v1171 >= v1620) {
                break;
              }
              unint64_t v1174 = *v1171 ^ *(void *)v1170;
              if (v1174)
              {
                unint64_t v1173 = (char *)v1171 + (__clz(__rbit64(v1174)) >> 3) - v1151;
                goto LABEL_1672;
              }
            }
          }
          if ((unint64_t)v1171 >= v1599)
          {
            if ((unint64_t)v1171 >= v1597) {
              goto LABEL_1679;
            }
          }
          else
          {
            if (*(_DWORD *)v1170 == *(_DWORD *)v1171)
            {
              v1171 = (void *)((char *)v1171 + 4);
              v1170 += 4;
            }
            if ((unint64_t)v1171 >= v1597)
            {
LABEL_1679:
              if ((unint64_t)v1171 < v1603) {
                goto LABEL_1680;
              }
              goto LABEL_1682;
            }
          }
          if (*(unsigned __int16 *)v1170 == *(unsigned __int16 *)v1171)
          {
            v1171 = (void *)((char *)v1171 + 2);
            v1170 += 2;
          }
          if ((unint64_t)v1171 < v1603)
          {
LABEL_1680:
            if (*v1170 == *(unsigned char *)v1171) {
              LODWORD(v1171) = v1171 + 1;
            }
          }
LABEL_1682:
          v1144 = v1618;
          int v1177 = v1171 - v1151;
          unint64_t v780 = (unint64_t)v1587;
          unsigned int v1175 = v1177 + 3;
          unint64_t v1176 = v1175;
          if (v1166 >= v1175) {
            goto LABEL_1656;
          }
LABEL_1683:
          v1178 = &v1611[2 * v1141];
          _DWORD *v1178 = v1165 + ((int)(v1529 << 31) >> 31);
          v1178[1] = v1175;
          ++v1141;
          if (v1175 > v1148)
          {
            v783 = v1611;
            LODWORD(v1144) = v1618;
            goto LABEL_2042;
          }
          v1144 = v1618;
          unint64_t v1166 = v1176;
          if (&v1618[v1176] == (unsigned __int8 *)v1603)
          {
            v783 = v1611;
            goto LABEL_2042;
          }
LABEL_1656:
          if (++v1165 < v1163) {
            continue;
          }
          break;
        }
        if (v1166 > 2)
        {
          v783 = v1611;
          goto LABEL_1988;
        }
        uint64_t v1268 = *(void *)(v5 + 56);
        int v1269 = *(_DWORD *)v1144;
        int v1270 = 32 - *(_DWORD *)(v5 + 40);
        v783 = v1611;
        if (v1498 < v1150)
        {
          uint64_t v1271 = v1498;
          do
          {
            *(_DWORD *)(v1268 + 4 * ((900185344 * *(_DWORD *)(v1149 + v1271)) >> v1270)) = v1271;
            ++v1271;
          }
          while (v1581 - v1149 != v1271);
        }
        uint64_t v1272 = *(unsigned int *)(v1268 + 4 * ((900185344 * v1269) >> v1270));
        if (v1272 < v1160 || (v1150 - v1272) >> 18 != 0)
        {
          unsigned int v1498 = v1618 - v1149;
          goto LABEL_1988;
        }
        v1361 = (_DWORD *)(v1149 + v1272);
        if (v1620 <= (unint64_t)v1144)
        {
          v1407 = (char *)v1144;
          if ((unint64_t)v1144 < v1599)
          {
LABEL_2083:
            if (*v1361 == *(_DWORD *)v1407)
            {
              v1407 += 4;
              ++v1361;
            }
          }
          goto LABEL_2085;
        }
        unint64_t v1362 = *(void *)v1144 ^ *(void *)v1361;
        if (!v1362)
        {
          uint64_t v1409 = 0;
          while (1)
          {
            v1407 = &v1492[v1409];
            if ((unint64_t)&v1492[v1409] >= v1620) {
              break;
            }
            uint64_t v1410 = *(void *)(v1149 + v1272 + 8 + v1409);
            v1409 += 8;
            unint64_t v1411 = *(void *)v1407 ^ v1410;
            if (v1411)
            {
              unint64_t v1363 = v1409 + (__clz(__rbit64(v1411)) >> 3);
              unsigned int v1498 = v1618 - v1149;
              if (v1363 < 3) {
                goto LABEL_1988;
              }
              goto LABEL_2094;
            }
          }
          v1361 = (_DWORD *)(v1149 + v1272 + v1409 + 8);
          if ((unint64_t)v1407 < v1599) {
            goto LABEL_2083;
          }
LABEL_2085:
          if ((unint64_t)v1407 >= v1597)
          {
            if ((unint64_t)v1407 >= v1603) {
              goto LABEL_2093;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v1361 == *(unsigned __int16 *)v1407)
            {
              v1407 += 2;
              v1361 = (_DWORD *)((char *)v1361 + 2);
            }
            if ((unint64_t)v1407 >= v1603)
            {
LABEL_2093:
              unint64_t v1363 = v1407 - (char *)v1144;
              unsigned int v1498 = v1618 - v1149;
              if (v1363 >= 3) {
                goto LABEL_2094;
              }
              goto LABEL_1988;
            }
          }
          if (*(unsigned __int8 *)v1361 == *v1407) {
            ++v1407;
          }
          goto LABEL_2093;
        }
        unint64_t v1363 = __clz(__rbit64(v1362)) >> 3;
        unsigned int v1498 = v1618 - v1149;
        if (v1363 >= 3)
        {
LABEL_2094:
          _DWORD *v1611 = v1150 - v1272 + 2;
          v1611[1] = v1363;
          if (v1363 > v1148 || &v1144[v1363] == (unsigned __int8 *)v1603)
          {
            unsigned int v1141 = 1;
            unsigned int v1498 = v1618 - v1149;
            *(_DWORD *)(v5 + 36) = v1150 + 1;
            goto LABEL_2042;
          }
          unsigned int v1141 = 1;
          unsigned int v1498 = v1618 - v1149;
          unint64_t v1166 = v1363;
        }
LABEL_1988:
        *(_DWORD *)(v1519 + 4 * v1511) = v1150;
        if (v1152 < v1160) {
          goto LABEL_1989;
        }
        unint64_t v1340 = 0;
        unint64_t v1341 = 0;
        int v1342 = ~(-1 << v1503);
        unsigned int v1343 = v1150 + 2;
        v1533 = (char *)v1524 + v1093;
        uint64_t v1344 = v1149 + 8;
        while (2)
        {
          if (v1341 >= v1340) {
            unint64_t v1345 = v1340;
          }
          else {
            unint64_t v1345 = v1341;
          }
          uint64_t v1346 = v1149 + v1152;
          v1347 = (char *)&v1144[v1345];
          v1348 = (_DWORD *)(v1346 + v1345);
          if (v1620 <= (unint64_t)&v1144[v1345])
          {
            v1351 = (char *)&v1144[v1345];
            if ((unint64_t)v1347 < v1599)
            {
LABEL_2000:
              if (*v1348 == *(_DWORD *)v1351)
              {
                v1351 += 4;
                ++v1348;
              }
            }
          }
          else
          {
            unint64_t v1349 = *(void *)v1347 ^ *(void *)v1348;
            if (v1349)
            {
              unint64_t v1350 = (__clz(__rbit64(v1349)) >> 3) + v1345;
              v783 = v1611;
              if (v1350 <= v1166) {
                goto LABEL_1998;
              }
LABEL_2011:
              if (v1350 > v1162 - v1152) {
                unsigned int v1162 = v1152 + v1350;
              }
              v1352 = &v783[2 * v1141];
              _DWORD *v1352 = v1343 - v1152;
              v1352[1] = v1350;
              ++v1141;
              BOOL v1353 = v1350 > 0x1000 || &v1144[v1350] == (unsigned __int8 *)v1603;
              unint64_t v1166 = v1350;
              unint64_t v780 = (unint64_t)v1587;
              if (v1353) {
                goto LABEL_1989;
              }
              goto LABEL_2017;
            }
            uint64_t v1355 = 0;
            v1356 = &v1533[v1345];
            while (1)
            {
              v1357 = &v1356[v1355];
              if ((unint64_t)&v1356[v1355] >= v1620) {
                break;
              }
              uint64_t v1358 = *(void *)(v1344 + v1345 + v1152 + v1355);
              v1355 += 8;
              unint64_t v1359 = *(void *)v1357 ^ v1358;
              uint64_t v5 = a1;
              if (v1359)
              {
                unint64_t v1360 = __clz(__rbit64(v1359));
                v1144 = v1618;
                unint64_t v1350 = v1355 + (v1360 >> 3) + v1345;
                v783 = v1611;
                if (v1350 > v1166) {
                  goto LABEL_2011;
                }
                goto LABEL_1998;
              }
            }
            v1351 = &v1533[v1345 + v1355];
            v1348 = (_DWORD *)(v1344 + v1345 + v1152 + v1355);
            v1144 = v1618;
            if ((unint64_t)v1351 < v1599) {
              goto LABEL_2000;
            }
          }
          if ((unint64_t)v1351 >= v1597)
          {
            if ((unint64_t)v1351 < v1603) {
              goto LABEL_2008;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v1348 == *(unsigned __int16 *)v1351)
            {
              v1351 += 2;
              v1348 = (_DWORD *)((char *)v1348 + 2);
            }
            if ((unint64_t)v1351 >= v1603) {
              goto LABEL_2010;
            }
LABEL_2008:
            if (*(unsigned __int8 *)v1348 == *v1351) {
              ++v1351;
            }
          }
LABEL_2010:
          unint64_t v1350 = v1351 - v1347 + v1345;
          v783 = v1611;
          if (v1350 > v1166) {
            goto LABEL_2011;
          }
LABEL_1998:
          unint64_t v780 = (unint64_t)v1587;
LABEL_2017:
          v1354 = (unsigned int *)(v1552 + 8 * (v1152 & v1154));
          if (*(unsigned __int8 *)(v1346 + v1350) < v1144[v1350])
          {
            unsigned int *v1161 = v1152;
            if (v1152 <= v1544)
            {
              v1161 = (unsigned int *)&v1632;
              goto LABEL_1989;
            }
            ++v1354;
            unint64_t v1341 = v1350;
            v1161 = v1354;
            BOOL v294 = v1342-- != 0;
            if (!v294) {
              goto LABEL_1989;
            }
            goto LABEL_1991;
          }
          unsigned int *v1557 = v1152;
          if (v1152 > v1544)
          {
            unint64_t v1340 = v1350;
            v1557 = (unsigned int *)(v1552 + 8 * (v1152 & v1154));
            BOOL v294 = v1342-- != 0;
            if (!v294) {
              goto LABEL_1989;
            }
LABEL_1991:
            unsigned int v1152 = *v1354;
            if (*v1354 < v1160) {
              goto LABEL_1989;
            }
            continue;
          }
          break;
        }
        v1557 = (unsigned int *)&v1632;
LABEL_1989:
        unsigned int *v1557 = 0;
        unsigned int *v1161 = 0;
        *(_DWORD *)(v5 + 36) = v1162 - 8;
LABEL_2042:
        unsigned int v1631 = v1141;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1628, (uint64_t)v783, &v1631, v1144 - v1571, v1142 - v1144);
        uint64_t v1364 = v1631;
        if (!v1631)
        {
LABEL_1589:
          v779 = v1609;
          int v1088 = v1581;
          goto LABEL_1590;
        }
        uint64_t v1365 = v1631 - 1;
        unsigned int v1050 = v783[2 * v1365 + 1];
        if (v1050 <= v1540 && v1050 + v1093 <= 0xFFF)
        {
          uint64_t v1366 = 0;
          int v1367 = v1562 + v1568;
          int v1368 = v1626;
          while (1)
          {
            v1369 = &v783[2 * v1366];
            unsigned int v1370 = v1542;
            if (v1366) {
              unsigned int v1370 = *(v1369 - 1) + 1;
            }
            unsigned int v1371 = v1369[1];
            if (v1371 >= v1370) {
              break;
            }
LABEL_2046:
            if (++v1366 == v1364) {
              goto LABEL_1589;
            }
          }
          signed int v1372 = *v1369;
          uint64_t v1373 = __clz(v1372 + 1) ^ 0x1F;
          if (*(_DWORD *)(v5 + 160) == 1)
          {
            int v1374 = 0;
            int v1375 = v1093 + v1371;
            unsigned int v1376 = v1093 + v1371;
            while (1)
            {
              unint64_t v1378 = v1371 + v1093;
              unsigned int v1379 = __clz(v1371 - 2);
              signed int v1380 = ((v1371 - 2) << 8 >> (v1379 ^ 0x1F)) + (((v1379 ^ 0x1F) + v1373) << 8) + v1367 + 4096;
              if (v1378 <= v1087)
              {
                if (v1380 >= (int)v775[7 * v1378]) {
                  goto LABEL_2053;
                }
                goto LABEL_2052;
              }
              uint64_t v1381 = v1087;
              unint64_t v1382 = (v1375 - v1374) - (unint64_t)v1087;
              if (v1382 >= 2)
              {
                unint64_t v1087 = (v1382 & 0xFFFFFFFFFFFFFFFELL) + v1087;
                unint64_t v1383 = (v1376 - v1381) & 0xFFFFFFFFFFFFFFFELL;
                v1384 = &v1622[7 * v1381];
                do
                {
                  *(v1384 - 7) = 0x40000000;
                  _DWORD *v1384 = 0x40000000;
                  v1384 += 14;
                  v1383 -= 2;
                }
                while (v1383);
                if (v1382 == (v1382 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_2052;
                }
              }
              else
              {
                unint64_t v1087 = v1087;
              }
              v1385 = &v1143[7 * v1087];
              do
              {
                ++v1087;
                _DWORD *v1385 = 0x40000000;
                v1385 += 7;
              }
              while (v1087 < v1378);
LABEL_2052:
              v1377 = (signed int *)&v775[7 * v1378];
              v1377[2] = v1371;
              v1377[3] = v1368;
              signed int *v1377 = v1380;
              v1377[1] = v1372;
LABEL_2053:
              --v1371;
              ++v1374;
              --v1376;
              if (v1371 < v1370) {
                goto LABEL_2046;
              }
            }
          }
          int v1386 = 0;
          uint64_t v1388 = *(void *)(v5 + 96);
          uint64_t v1387 = *(void *)(v5 + 104);
          int v1389 = *(_DWORD *)(v5 + 156) + *(_DWORD *)(v5 + 152) + 51;
          int v1390 = v1093 + v1371;
          unsigned int v1391 = v1093 + v1371;
          while (2)
          {
            unsigned int v1393 = v1371 - 3;
            if (v1371 - 3 < 0x80) {
              unsigned int v1394 = ZSTD_MLcode_ML_Code[v1393];
            }
            else {
              unsigned int v1394 = 67 - __clz(v1393);
            }
            unint64_t v1395 = v1371 + v1093;
            unsigned int v1396 = *(_DWORD *)(v1387 + 4 * v1373) + 1;
            unsigned int v1397 = __clz(v1396) ^ 0x1F;
            uint64_t v1398 = 4 * v1394;
            int v1399 = *(unsigned int *)((char *)ML_bits + v1398);
            LODWORD(v1398) = *(_DWORD *)(v1388 + v1398) + 1;
            unsigned int v1400 = __clz(v1398) ^ 0x1F;
            signed int v1401 = v1367
                  + v1389
                  - (v1396 << 8 >> v1397)
                  - (v1398 << 8 >> v1400)
                  + ((v1373 + v1399 - v1397 - v1400) << 8);
            if (v1395 <= v1087)
            {
              int v1368 = v1626;
              if (v1401 < (int)v775[7 * v1395]) {
                goto LABEL_2066;
              }
            }
            else
            {
              uint64_t v1402 = v1087;
              unint64_t v1403 = (v1390 - v1386) - (unint64_t)v1087;
              if (v1403 < 2)
              {
                unint64_t v1087 = v1087;
                int v1368 = v1626;
                goto LABEL_2079;
              }
              unint64_t v1087 = (v1403 & 0xFFFFFFFFFFFFFFFELL) + v1087;
              unint64_t v1404 = (v1391 - v1402) & 0xFFFFFFFFFFFFFFFELL;
              v1405 = &v1622[7 * v1402];
              do
              {
                *(v1405 - 7) = 0x40000000;
                _DWORD *v1405 = 0x40000000;
                v1405 += 14;
                v1404 -= 2;
              }
              while (v1404);
              v1143 = v775 + 7;
              int v1368 = v1626;
              if (v1403 != (v1403 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_2079:
                v1406 = &v1143[7 * v1087];
                do
                {
                  ++v1087;
                  _DWORD *v1406 = 0x40000000;
                  v1406 += 7;
                }
                while (v1087 < v1395);
              }
LABEL_2066:
              v1392 = &v775[7 * v1395];
              v1392[2] = v1371;
              v1392[3] = v1368;
              unsigned int *v1392 = v1401;
              v1392[1] = v1372;
            }
            --v1371;
            ++v1386;
            --v1391;
            if (v1371 < v1370) {
              goto LABEL_2046;
            }
            continue;
          }
        }
        unsigned int v1045 = v1626;
        if (*v1534) {
          unsigned int v1475 = 0;
        }
        else {
          unsigned int v1475 = v775[7 * v1093 + 3];
        }
        v779 = v1609;
        unsigned int v1059 = v783[2 * v1365];
        unsigned int v1479 = v1093 - v1475;
        if (v1479 <= 0x1000) {
          unsigned int v1058 = v1479;
        }
        else {
          unsigned int v1058 = 0;
        }
        long long v782 = v1595;
        if (!v1050)
        {
LABEL_2198:
          v1480 = &v775[7 * v1058];
          unint64_t v1481 = *((void *)v1480 + 2);
          *((_DWORD *)a3 + 2) = v1480[6];
          *a3 = v1481;
          goto LABEL_2128;
        }
LABEL_2114:
        v1413 = &v775[7 * v1058 + 4];
        if (v1059 < 3)
        {
          if (v1045) {
            unsigned int v1418 = v1059;
          }
          else {
            unsigned int v1418 = v1059 + 1;
          }
          if (v1418)
          {
            if (v1418 == 3)
            {
              unint64_t v1415 = *v1413;
              unsigned int v1417 = v1415 - 1;
            }
            else
            {
              unsigned int v1417 = v1413[v1418];
              unint64_t v1415 = *v1413;
            }
            BOOL v658 = v1418 > 1;
            uint64_t v1420 = 2;
            if (v658) {
              uint64_t v1420 = 1;
            }
            v1414 = &v1413[v1420];
          }
          else
          {
            unint64_t v1419 = *(void *)v1413;
            v1414 = &v775[7 * v1058 + 6];
            unsigned int v1417 = v1419;
            unint64_t v1415 = HIDWORD(v1419);
          }
        }
        else
        {
          unsigned int v1416 = *v1413;
          v1414 = &v775[7 * v1058 + 5];
          unint64_t v1415 = v1416;
          unsigned int v1417 = v1059 - 2;
        }
        unsigned int v1421 = *v1414;
        *a3 = v1417 | (v1415 << 32);
        *((_DWORD *)a3 + 2) = v1421;
LABEL_2128:
        unsigned int v1422 = v1058 + 1;
        v1423 = &v775[7 * v1058 + 7];
        unsigned int *v1423 = v1526;
        v1423[1] = v1059;
        v1423[2] = v1050;
        v1423[3] = v1045;
        *((void *)v1423 + 2) = v1634;
        v1423[6] = v1635;
        unsigned int v1424 = v1058;
        if (!v1058)
        {
          unsigned int v1430 = 1;
          v1431 = a2;
          goto LABEL_2137;
        }
        do
        {
          v1425 = &v775[7 * v1424];
          unsigned int v1426 = v1425[3] + v1425[2];
          v1427 = &v775[7 * v1058];
          long long v1428 = *(_OWORD *)v1425;
          *(_OWORD *)(v1427 + 3) = *(_OWORD *)(v1425 + 3);
          *(_OWORD *)v1427 = v1428;
          --v1058;
          BOOL v294 = v1424 >= v1426;
          v1424 -= v1426;
          BOOL v1429 = v1424 != 0 && v294;
          if (!v294) {
            unsigned int v1424 = 0;
          }
        }
        while (v1429);
        unsigned int v1430 = v1058 + 1;
        v1431 = a2;
        if (v1430 <= v1422)
        {
          while (1)
          {
LABEL_2137:
            while (1)
            {
              unsigned int v1434 = v1430;
              unsigned int v1436 = v775[7 * v1430 + 2];
              uint64_t v1435 = v775[7 * v1430 + 3];
              if (v1436) {
                break;
              }
              v779 = &v782[v1435];
              unsigned int v1430 = v1434 + 1;
              if (v1434 + 1 > v1422) {
                goto LABEL_2133;
              }
            }
            unsigned int v1437 = v775[7 * v1434 + 1];
            if (*(_DWORD *)(v5 + 176) != 2)
            {
              if (v1435)
              {
                v1438 = *v1570;
                v1439 = v782;
                uint64_t v1440 = v1435;
                do
                {
                  int v1441 = *v1439++;
                  *(_DWORD *)&v1438[4 * v1441] += 2;
                  --v1440;
                }
                while (v1440);
              }
              *(_DWORD *)(v5 + 128) += 2 * v1435;
            }
            unsigned int v1442 = v1435 < 0x40 ? ZSTD_LLcode_LL_Code[v1435] : 50 - __clz(v1435);
            ++*(_DWORD *)(*(void *)(v5 + 88) + 4 * v1442);
            ++*(_DWORD *)(v5 + 132);
            unsigned int v1443 = v1437 + 1;
            unsigned int v1444 = __clz(v1437 + 1);
            ++*(_DWORD *)(*(void *)(v5 + 104) + 4 * (v1444 ^ 0x1F));
            ++*(_DWORD *)(v5 + 140);
            unsigned int v1445 = v1436 - 3;
            unsigned int v1446 = v1436 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v1445] : 67 - __clz(v1445);
            ++*(_DWORD *)(*(void *)(v5 + 96) + 4 * v1446);
            ++*(_DWORD *)(v5 + 136);
            v1447 = &v782[v1435];
            v1448 = (char *)v1431[3];
            if ((unint64_t)&v782[v1435] > v780) {
              break;
            }
            *(_OWORD *)v1448 = *(_OWORD *)v782;
            uint64_t v1451 = v1431[3];
            if (v1435 > 0x10)
            {
              v1452 = (_OWORD *)(v1451 + 16);
              unint64_t v1453 = v1451 + v1435;
              v1454 = (long long *)(v782 + 16);
              do
              {
                long long v1455 = *v1454++;
                *v1452++ = v1455;
              }
              while ((unint64_t)v1452 < v1453);
LABEL_2182:
              v1431[3] += v1435;
              uint64_t v1462 = v1431[1];
              if (v1435 >= 0x10000)
              {
                unint64_t v1473 = (unint64_t)(v1462 - *v1431) >> 3;
                *((_DWORD *)v1431 + 18) = 1;
                *((_DWORD *)v1431 + 19) = v1473;
              }
              goto LABEL_2184;
            }
            v1431[3] = v1451 + v1435;
            uint64_t v1462 = v1431[1];
LABEL_2184:
            *(_WORD *)(v1462 + 4) = v1435;
            *(_DWORD *)uint64_t v1462 = v1443;
            if (v1445 >= 0x10000)
            {
              unint64_t v1474 = (unint64_t)(v1462 - *v1431) >> 3;
              *((_DWORD *)v1431 + 18) = 2;
              *((_DWORD *)v1431 + 19) = v1474;
            }
            *(_WORD *)(v1462 + 6) = v1445;
            v1431[1] = v1462 + 8;
            v782 += v1436 + v1435;
            v779 = v782;
            unsigned int v1430 = v1434 + 1;
            if (v1434 + 1 > v1422) {
              goto LABEL_2133;
            }
          }
          if ((unint64_t)v782 <= v780)
          {
            v1450 = &v1448[v780 - (void)v782];
            v1456 = v782;
            v1457 = (char *)v1431[3];
            do
            {
              long long v1458 = *(_OWORD *)v1456;
              v1456 += 16;
              *(_OWORD *)v1457 = v1458;
              v1457 += 16;
            }
            while (v1457 < v1450);
            v1449 = (unsigned __int8 *)v780;
            if (v780 >= (unint64_t)v1447) {
              goto LABEL_2182;
            }
          }
          else
          {
            v1449 = v782;
            v1450 = (char *)v1431[3];
            if (v782 >= v1447) {
              goto LABEL_2182;
            }
          }
          if ((unint64_t)v782 <= v780) {
            v1459 = (unsigned __int8 *)v780;
          }
          else {
            v1459 = v782;
          }
          unint64_t v1460 = &v782[v1435] - v1459;
          if (v1460 < 8)
          {
            v1461 = v1449;
            goto LABEL_2181;
          }
          if ((unint64_t)(v1448 - (char *)v782) < 0x20)
          {
            v1461 = v1449;
            goto LABEL_2181;
          }
          if (v1460 >= 0x20)
          {
            unint64_t v1463 = v1460 & 0xFFFFFFFFFFFFFFE0;
            v1464 = (long long *)(v1449 + 16);
            v1465 = &v1448[v1459 - v782 + 16];
            unint64_t v1466 = v1460 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v1467 = *v1464;
              *((_OWORD *)v1465 - 1) = *(v1464 - 1);
              *(_OWORD *)v1465 = v1467;
              v1464 += 2;
              v1465 += 32;
              v1466 -= 32;
            }
            while (v1466);
            if (v1460 == v1463) {
              goto LABEL_2182;
            }
            if ((v1460 & 0x18) == 0)
            {
              v1461 = &v1449[v1463];
              v1450 += v1463;
              goto LABEL_2181;
            }
          }
          else
          {
            unint64_t v1463 = 0;
          }
          v1450 += v1460 & 0xFFFFFFFFFFFFFFF8;
          v1461 = &v1449[v1460 & 0xFFFFFFFFFFFFFFF8];
          v1468 = &v1449[v1463];
          v1469 = &v1448[&v1459[v1463] - v782];
          unint64_t v1470 = v1463 - (v1460 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v1471 = *(void *)v1468;
            v1468 += 8;
            *(void *)v1469 = v1471;
            v1469 += 8;
            v1470 += 8;
          }
          while (v1470);
          if (v1460 == (v1460 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_2182;
          }
          do
          {
LABEL_2181:
            char v1472 = *v1461++;
            *v1450++ = v1472;
          }
          while (v1461 < v1447);
          goto LABEL_2182;
        }
LABEL_2133:
        if (*(_DWORD *)(v5 + 176) != 2)
        {
          unsigned int v1432 = *(_DWORD *)(v5 + 128) + 1;
          unsigned int v1433 = __clz(v1432) ^ 0x1F;
          *(_DWORD *)(v5 + 144) = (v1432 << 8 >> v1433) + (v1433 << 8);
        }
        unsigned int v784 = *(_DWORD *)(v5 + 140) + 1;
        unsigned int v785 = __clz(v784);
        int32x2_t v786 = vadd_s32(*(int32x2_t *)(v5 + 132), (int32x2_t)0x100000001);
        int32x2_t v787 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v786), (int8x8_t)0x1F0000001FLL);
        *(int32x2_t *)(v5 + 148) = vadd_s32(vshl_n_s32(v787, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v786, 8uLL), (uint32x2_t)vneg_s32(v787)));
        *(_DWORD *)(v5 + 156) = (v784 << 8 >> (v785 ^ 0x1F)) + ((v785 ^ 0x1F) << 8);
        if ((unint64_t)v779 >= v1593)
        {
LABEL_2230:
          v1571 = v782;
          int v770 = (unsigned __int8 *)v1603;
          return v770 - v1571;
        }
      }
      else
      {
        ++v779;
        v783 = v1611;
        if ((unint64_t)v779 >= v1593) {
          goto LABEL_2230;
        }
      }
    }
    unsigned int v791 = 0;
    if (*(_DWORD *)(v5 + 212) >= 0xFFFu) {
      unsigned int v830 = 4095;
    }
    else {
      unsigned int v830 = *(_DWORD *)(v5 + 212);
    }
    uint64_t v831 = *(void *)(v5 + 8);
    v779 = v1609;
    int v832 = v1609 - v831;
    int v833 = -1 << (*(_DWORD *)(v5 + 196) - 1);
    int v834 = ~v833;
    unsigned int v835 = v1609 - v831 + v833 + 1;
    if ((int)v1609 - (int)v831 < ~v833) {
      unsigned int v835 = 0;
    }
    unsigned int v1614 = v835;
    unsigned int v836 = 1 << *(_DWORD *)(v5 + 192);
    if (v832 - *(_DWORD *)(v5 + 28) > v836 && *(_DWORD *)(v5 + 32) == 0) {
      unsigned int v838 = v832 - v836;
    }
    else {
      unsigned int v838 = *(_DWORD *)(v5 + 28);
    }
    if (v838 <= 1) {
      unsigned int v839 = 1;
    }
    else {
      unsigned int v839 = v838;
    }
    unsigned int v840 = v832 - *(_DWORD *)(v5 + 24);
    v841 = (char *)(v1609 + 12);
    int v1565 = *(_DWORD *)(v5 + 204);
    unint64_t v842 = (0xCF1BBCDCBF9B0000 * *(void *)v1609) >> -(char)*(_DWORD *)(v5 + 200);
    uint64_t v1578 = *(void *)(v5 + 48);
    unsigned int v843 = *(_DWORD *)(v1578 + 4 * v842);
    uint64_t v844 = v1625 == 0;
    uint64_t v845 = *(void *)(v5 + 64);
    v846 = (unsigned int *)(v845 + 8 * (v832 & ~v833));
    v847 = v846 + 1;
    int v848 = v832 + 9;
    LODWORD(v1632) = 0;
    if (v1625) {
      unint64_t v849 = 3;
    }
    else {
      unint64_t v849 = 4;
    }
    v850 = v1609 + 4;
    if (v1625) {
      int v851 = 0;
    }
    else {
      int v851 = -1;
    }
    unint64_t v852 = (v1542 - 1);
    v783 = v1611;
    while (1)
    {
      if (v844 == 3)
      {
        unsigned int v853 = *(_DWORD *)a3 - 1;
        if (*(_DWORD *)a3 - 2 >= v840) {
          goto LABEL_1221;
        }
      }
      else
      {
        unsigned int v853 = *((_DWORD *)a3 + v844);
        if (v853 - 1 >= v840) {
          goto LABEL_1221;
        }
      }
      v854 = v779;
      int v855 = *(_DWORD *)v779;
      int v856 = *(_DWORD *)&v854[-v853];
      if (v832 - v853 < v838 || v855 != v856)
      {
        uint64_t v5 = a1;
        v779 = v1609;
        goto LABEL_1221;
      }
      uint64_t v858 = -(uint64_t)v853;
      v859 = (char *)v850 - v853;
      uint64_t v5 = a1;
      if (v1620 <= (unint64_t)v850) {
        break;
      }
      unint64_t v860 = *v850 ^ *(void *)v859;
      if (v860)
      {
        v779 = v1609;
        unsigned int v861 = (__clz(__rbit64(v860)) >> 3) + 4;
        unint64_t v862 = v861;
        if (v852 < v861) {
          goto LABEL_1247;
        }
        goto LABEL_1221;
      }
      do
      {
        v863 = &v841[v860];
        if ((unint64_t)&v841[v860] >= v1620)
        {
          v859 = &v863[v858];
          uint64_t v5 = a1;
          if ((unint64_t)v863 >= v1599) {
            goto LABEL_1238;
          }
          goto LABEL_1236;
        }
        uint64_t v866 = *(void *)&v841[v858 + v860];
        v860 += 8;
        unint64_t v867 = *(void *)v863 ^ v866;
      }
      while (!v867);
      unint64_t v868 = __clz(__rbit64(v867));
      uint64_t v5 = a1;
      v779 = v1609;
      v783 = v1611;
      unsigned int v861 = v860 + (v868 >> 3) + 4;
      unint64_t v862 = v861;
      if (v852 < v861)
      {
LABEL_1247:
        v865 = &v783[2 * v791];
        _DWORD *v865 = v844 + v851;
        v865[1] = v861;
        ++v791;
        if (v861 > v830) {
          goto LABEL_1410;
        }
        v779 = v1609;
        unint64_t v852 = v862;
        if (&v1609[v862] == (unsigned __int8 *)v1603) {
          goto LABEL_1554;
        }
      }
LABEL_1221:
      if (++v844 >= v849)
      {
        *(_DWORD *)(v1578 + 4 * v842) = v832;
        if (v843 < v839) {
          goto LABEL_1552;
        }
        unint64_t v869 = 0;
        unint64_t v870 = 0;
        int v871 = ~(-1 << v1565);
        int v872 = v832 + 2;
        v873 = v779 + 8;
        uint64_t v874 = v831 + 8;
        while (1)
        {
          unint64_t v875 = v870 >= v869 ? v869 : v870;
          uint64_t v876 = v831 + v843;
          v877 = (char *)&v779[v875];
          v878 = (void *)(v876 + v875);
          if (v1620 <= (unint64_t)&v779[v875]) {
            break;
          }
          unint64_t v879 = *(void *)v877 ^ *v878;
          if (v879)
          {
            v783 = v1611;
            v880 = (unsigned __int8 *)v1603;
            unint64_t v881 = (__clz(__rbit64(v879)) >> 3) + v875;
            if (v881 <= v852) {
              goto LABEL_1265;
            }
            goto LABEL_1278;
          }
          uint64_t v887 = 0;
          v888 = (char *)v873 + v875;
          do
          {
            v889 = &v888[v887];
            if ((unint64_t)&v888[v887] >= v1620)
            {
              v883 = (unsigned __int8 *)v873 + v875 + v887;
              v878 = (void *)(v874 + v875 + v843 + v887);
              v783 = v1611;
              if ((unint64_t)v883 >= v1599) {
                goto LABEL_1269;
              }
              goto LABEL_1267;
            }
            uint64_t v890 = *(void *)(v874 + v875 + v843 + v887);
            v887 += 8;
            unint64_t v891 = *(void *)v889 ^ v890;
            uint64_t v5 = a1;
          }
          while (!v891);
          uint64_t v892 = v887 + (__clz(__rbit64(v891)) >> 3);
          v783 = v1611;
          v880 = (unsigned __int8 *)v1603;
          unint64_t v881 = v892 + v875;
          if (v881 <= v852)
          {
LABEL_1265:
            v882 = v1609;
            goto LABEL_1284;
          }
LABEL_1278:
          if (v881 > v848 - v843) {
            int v848 = v843 + v881;
          }
          v884 = &v783[2 * v791];
          _DWORD *v884 = v872 - v843;
          v884[1] = v881;
          ++v791;
          v882 = v1609;
          BOOL v885 = v881 > 0x1000 || &v1609[v881] == v880;
          unint64_t v852 = v881;
          if (v885)
          {
LABEL_1549:
            v779 = v882;
            goto LABEL_1552;
          }
LABEL_1284:
          v886 = (unsigned int *)(v845 + 8 * (v843 & v834));
          v779 = v882;
          if (*(unsigned __int8 *)(v876 + v881) >= v882[v881])
          {
            unsigned int *v847 = v843;
            if (v843 <= v1614) {
              goto LABEL_1551;
            }
            unint64_t v869 = v881;
            v847 = (unsigned int *)(v845 + 8 * (v843 & v834));
            BOOL v294 = v871-- != 0;
            if (!v294) {
              goto LABEL_1552;
            }
          }
          else
          {
            unsigned int *v846 = v843;
            if (v843 <= v1614)
            {
LABEL_1550:
              v846 = (unsigned int *)&v1632;
              goto LABEL_1552;
            }
            ++v886;
            unint64_t v870 = v881;
            v846 = v886;
            BOOL v294 = v871-- != 0;
            if (!v294) {
              goto LABEL_1552;
            }
          }
          unsigned int v843 = *v886;
          if (*v886 < v839) {
            goto LABEL_1552;
          }
        }
        v883 = &v779[v875];
        v783 = v1611;
        if ((unint64_t)v877 >= v1599) {
          goto LABEL_1269;
        }
LABEL_1267:
        if (*(_DWORD *)v878 == *(_DWORD *)v883)
        {
          v883 += 4;
          v878 = (void *)((char *)v878 + 4);
        }
LABEL_1269:
        if ((unint64_t)v883 >= v1597)
        {
          if ((unint64_t)v883 >= v1603) {
            goto LABEL_1277;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v878 == *(unsigned __int16 *)v883)
          {
            v883 += 2;
            v878 = (void *)((char *)v878 + 2);
          }
          if ((unint64_t)v883 >= v1603)
          {
LABEL_1277:
            v880 = (unsigned __int8 *)v1603;
            unint64_t v881 = v883 - (unsigned __int8 *)v877 + v875;
            if (v881 <= v852) {
              goto LABEL_1265;
            }
            goto LABEL_1278;
          }
        }
        if (*(unsigned __int8 *)v878 == *v883) {
          ++v883;
        }
        goto LABEL_1277;
      }
    }
    v863 = (char *)(v1609 + 4);
    if ((unint64_t)v850 >= v1599) {
      goto LABEL_1238;
    }
LABEL_1236:
    if (*(_DWORD *)v859 == *(_DWORD *)v863)
    {
      v863 += 4;
      v859 += 4;
    }
LABEL_1238:
    if ((unint64_t)v863 >= v1597)
    {
      if ((unint64_t)v863 >= v1603) {
        goto LABEL_1246;
      }
    }
    else
    {
      if (*(unsigned __int16 *)v859 == *(unsigned __int16 *)v863)
      {
        v863 += 2;
        v859 += 2;
      }
      if ((unint64_t)v863 >= v1603)
      {
LABEL_1246:
        int v864 = v863 - v850;
        v779 = v1609;
        v783 = v1611;
        unsigned int v861 = v864 + 4;
        unint64_t v862 = v861;
        if (v852 < v861) {
          goto LABEL_1247;
        }
        goto LABEL_1221;
      }
    }
    if (*v859 == *v863) {
      LODWORD(v863) = v863 + 1;
    }
    goto LABEL_1246;
  }
  return v770 - v1571;
}

unint64_t ZSTD_compressBlock_fast_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  if ((*(_DWORD *)(a1 + 208) - 5) >= 3) {
    int v5 = 4;
  }
  else {
    int v5 = *(_DWORD *)(a1 + 208);
  }
  return ZSTD_compressBlock_fast_extDict_generic(a1, a2, a3, a4, a5, v5);
}

unint64_t ZSTD_compressBlock_doubleFast_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  if ((*(_DWORD *)(a1 + 208) - 5) >= 3) {
    int v5 = 4;
  }
  else {
    int v5 = *(_DWORD *)(a1 + 208);
  }
  return ZSTD_compressBlock_doubleFast_extDict_generic(a1, a2, a3, a4, a5, v5);
}

unint64_t ZSTD_compressBlock_greedy_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, _OWORD *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)a4 + a5;
  unint64_t v6 = v5 - 8;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  unint64_t v9 = (void *)(v7 + v8);
  uint64_t v11 = *a3;
  unsigned int v10 = a3[1];
  if ((_OWORD *)(v7 + v8) == a4) {
    uint64_t v12 = (unsigned __int8 *)a4 + 1;
  }
  else {
    uint64_t v12 = (unsigned __int8 *)a4;
  }
  uint64_t v243 = v12;
  unint64_t v244 = (unsigned __int8 *)a4;
  if ((unint64_t)v12 < v6)
  {
    uint64_t v13 = a2;
    uint64_t v14 = a1;
    uint64_t v15 = *(void *)(a1 + 16);
    unint64_t v237 = (char *)(v15 + v8);
    unint64_t v204 = v15 + *(unsigned int *)(a1 + 28);
    int v241 = v8 - 1;
    unsigned int v242 = 1 << *(_DWORD *)(a1 + 192);
    unint64_t v16 = v5 - 32;
    unint64_t v17 = v5 - 7;
    unint64_t v229 = v5 - 1;
    unint64_t v230 = v5 - 3;
    uint64_t v238 = v8 + v7 + 8;
    unint64_t v234 = v5;
    unint64_t v208 = v5 - 8;
    unsigned int v216 = *(_DWORD *)(a1 + 24);
    uint64_t v217 = *(void *)(a1 + 8);
    uint64_t v214 = v15;
    int v215 = (void *)(v7 + v8);
    unint64_t v232 = v5 - 32;
    unint64_t v233 = v5 - 7;
    do
    {
      unsigned int v236 = v10;
      unsigned int v239 = (char *)(v243 + 1);
      int v18 = v243 - v7 + 1;
      unsigned int v19 = *(_DWORD *)(v14 + 28);
      int v20 = *(_DWORD *)(v14 + 32);
      unsigned int v21 = v18 - v242;
      if (v18 - v19 <= v242 || v20 != 0) {
        unsigned int v21 = *(_DWORD *)(v14 + 28);
      }
      uint64_t v23 = (v18 - v11);
      if (v23 >= v8) {
        uint64_t v24 = v7;
      }
      else {
        uint64_t v24 = v15;
      }
      if ((v241 - v23) >= 3 && v23 > v21)
      {
        uint64_t v25 = v24 + v23;
        if (*(_DWORD *)v239 == *(_DWORD *)v25)
        {
          if (v23 >= v8) {
            int32x2_t v26 = (char *)v5;
          }
          else {
            int32x2_t v26 = v237;
          }
          unint64_t v27 = ZSTD_count_2segments(v243 + 5, (char *)(v25 + 4), v5, v26, v9);
          unint64_t v16 = v232;
          LODWORD(v28) = 0;
          unint64_t v29 = v27 + 4;
          int v30 = v243 + 1;
          unint64_t v31 = v239 - (char *)v244;
          unsigned int v32 = *(_OWORD **)(v13 + 24);
          if ((unint64_t)v239 <= v232) {
            goto LABEL_205;
          }
LABEL_24:
          if ((unint64_t)v244 <= v16)
          {
            int v146 = v244;
            unsigned int v34 = (char *)v32 + v16 - (void)v244;
            unint64_t v147 = v32;
            do
            {
              long long v148 = *(_OWORD *)v146;
              v146 += 16;
              *v147++ = v148;
            }
            while (v147 < (_OWORD *)v34);
            uint64_t v33 = (_OWORD *)v16;
            unint64_t v5 = v234;
            unint64_t v17 = v233;
            if (v16 >= (unint64_t)v30) {
              goto LABEL_222;
            }
          }
          else
          {
            uint64_t v33 = v244;
            unsigned int v34 = v32;
            unint64_t v5 = v234;
            unint64_t v17 = v233;
            if (v244 >= v30) {
              goto LABEL_222;
            }
          }
          if ((unint64_t)v244 <= v16) {
            uint64_t v149 = (unsigned __int8 *)v16;
          }
          else {
            uint64_t v149 = v244;
          }
          unint64_t v150 = v30 - v149;
          if ((unint64_t)(v30 - v149) < 8)
          {
            uint64_t v151 = (unsigned __int8 *)v33;
            goto LABEL_221;
          }
          if ((unint64_t)((char *)v32 - (char *)v244) < 0x20)
          {
            uint64_t v151 = (unsigned __int8 *)v33;
            goto LABEL_221;
          }
          if (v150 >= 0x20)
          {
            unint64_t v158 = v150 & 0xFFFFFFFFFFFFFFE0;
            unsigned int v159 = v33 + 1;
            uint64_t v160 = (_OWORD *)((char *)v32 + v149 - v244 + 16);
            unint64_t v161 = v150 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v162 = *v159;
              *(v160 - 1) = *(v159 - 1);
              _OWORD *v160 = v162;
              v159 += 2;
              v160 += 2;
              v161 -= 32;
            }
            while (v161);
            if (v150 == v158) {
              goto LABEL_222;
            }
            if ((v150 & 0x18) == 0)
            {
              uint64_t v151 = (unsigned __int8 *)v33 + v158;
              v34 += v158;
              do
              {
LABEL_221:
                char v167 = *v151++;
                *v34++ = v167;
              }
              while (v151 < v30);
              goto LABEL_222;
            }
          }
          else
          {
            unint64_t v158 = 0;
          }
          v34 += v150 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v151 = (unsigned __int8 *)v33 + (v150 & 0xFFFFFFFFFFFFFFF8);
          unsigned int v163 = (uint64_t *)((char *)v33 + v158);
          unsigned int v164 = (void *)((char *)v32 + &v149[v158] - v244);
          unint64_t v165 = v158 - (v150 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v166 = *v163++;
            *v164++ = v166;
            v165 += 8;
          }
          while (v165);
          if (v150 != (v150 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_221;
          }
LABEL_222:
          *(void *)(v13 + 24) += v31;
          uint64_t v157 = *(void *)(v13 + 8);
          if (v31 >= 0x10000)
          {
            unint64_t v168 = (unint64_t)(v157 - *(void *)v13) >> 3;
            *(_DWORD *)(v13 + 72) = 1;
            *(_DWORD *)(v13 + 76) = v168;
          }
          goto LABEL_224;
        }
      }
      int v35 = *(_DWORD *)(v14 + 208);
      unsigned int v231 = v11;
      if ((v35 - 6) < 2)
      {
        int v36 = *(_DWORD *)(v14 + 196);
        unsigned int v37 = 1 << v36;
        uint64_t v39 = *(void *)(v14 + 8);
        uint64_t v38 = *(void *)(v14 + 16);
        unsigned int v40 = v243 - v39;
        unsigned int v41 = 1 << *(_DWORD *)(v14 + 192);
        BOOL v42 = v243 - v39 - v19 > v41 && v20 == 0;
        uint64_t v43 = *(void *)(v14 + 64);
        uint64_t v44 = *(unsigned int *)(v14 + 24);
        if (v42) {
          uint64_t v45 = v243 - v39 - v41;
        }
        else {
          uint64_t v45 = v19;
        }
        if (v40 >= v37) {
          uint64_t v46 = v40 - v37;
        }
        else {
          uint64_t v46 = 0;
        }
        uint64_t v47 = *(void *)(v14 + 48);
        int v48 = *(_DWORD *)(v14 + 204);
        uint64_t v49 = *(unsigned int *)(v14 + 36);
        int v50 = 64 - *(_DWORD *)(v14 + 200);
        if (v49 < v40)
        {
          int v51 = ~(-1 << v36);
          do
          {
            unint64_t v52 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v39 + v49)) >> v50);
            *(_DWORD *)(v43 + 4 * (v49 & v51)) = *(_DWORD *)(v47 + v52);
            *(_DWORD *)(v47 + v52) = v49++;
          }
          while (v243 - v39 != v49);
        }
        *(_DWORD *)(v14 + 36) = v40;
        uint64_t v211 = *(void *)v243;
        unsigned int v53 = *(_DWORD *)(v47 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v243) >> v50));
        if (v53 >= v45)
        {
          uint64_t v54 = v37 - 1;
          unint64_t v224 = (char *)(v38 + v44);
          int v55 = 1 << v48;
          unsigned int v221 = v40 + 2;
          uint64_t v56 = v243 + 8;
          uint64_t v205 = v39 + 8;
          uint64_t v235 = 999999999;
          unint64_t v57 = 3;
          uint64_t v218 = v43;
          while (1)
          {
            uint64_t v58 = v53;
            if (v53 < v44)
            {
              if (*(_DWORD *)(v38 + v53) != *(_DWORD *)v243) {
                goto LABEL_64;
              }
              uint64_t v59 = v38;
              uint64_t v60 = v46;
              uint64_t v61 = v45;
              uint64_t v62 = v54;
              unint64_t v63 = v57;
              unint64_t v64 = ZSTD_count_2segments(v243 + 4, (char *)(v38 + v53 + 4), v5, v224, (void *)(v39 + v44));
              unint64_t v57 = v63;
              uint64_t v54 = v62;
              uint64_t v45 = v61;
              uint64_t v46 = v60;
              uint64_t v43 = v218;
              uint64_t v38 = v59;
              unint64_t v16 = v232;
              unint64_t v17 = v233;
              unint64_t v5 = v234;
              unint64_t v29 = v64 + 4;
              if (v64 + 4 <= v57) {
                goto LABEL_64;
              }
              goto LABEL_63;
            }
            unsigned int v65 = (_DWORD *)(v39 + v53);
            if (*(unsigned __int8 *)(v39 + v58 + v57) != v243[v57]) {
              goto LABEL_64;
            }
            if (v17 <= (unint64_t)v243)
            {
              int v67 = v243;
              if ((unint64_t)v243 < v230)
              {
LABEL_52:
                if (*v65 == *(_DWORD *)v67)
                {
                  v67 += 4;
                  ++v65;
                }
              }
              goto LABEL_54;
            }
            unint64_t v66 = *(void *)v65 ^ v211;
            if (!v66) {
              break;
            }
            unint64_t v29 = __clz(__rbit64(v66)) >> 3;
            if (v29 <= v57) {
              goto LABEL_64;
            }
LABEL_63:
            uint64_t v235 = v221 - v58;
            unint64_t v57 = v29;
            if (&v243[v29] == (unsigned __int8 *)v5) {
              goto LABEL_172;
            }
LABEL_64:
            if (v58 <= v46 || (--v55, !v55))
            {
              unint64_t v29 = v57;
              goto LABEL_172;
            }
            unsigned int v53 = *(_DWORD *)(v43 + 4 * (v58 & v54));
            unint64_t v29 = v57;
            if (v53 < v45) {
              goto LABEL_172;
            }
          }
          uint64_t v68 = 0;
          while (1)
          {
            int v67 = (unsigned __int8 *)&v56[v68];
            if ((unint64_t)&v56[v68] >= v17) {
              break;
            }
            uint64_t v69 = *(void *)(v205 + v58 + v68 * 8);
            ++v68;
            unint64_t v70 = *(void *)v67 ^ v69;
            if (v70)
            {
              unint64_t v29 = v68 * 8 + (__clz(__rbit64(v70)) >> 3);
              if (v29 > v57) {
                goto LABEL_63;
              }
              goto LABEL_64;
            }
          }
          unsigned int v65 = (_DWORD *)(v205 + v58 + v68 * 8);
          if ((unint64_t)v67 < v230) {
            goto LABEL_52;
          }
LABEL_54:
          if ((unint64_t)v67 >= v229)
          {
            if ((unint64_t)v67 >= v5) {
              goto LABEL_62;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v65 == *(unsigned __int16 *)v67)
            {
              v67 += 2;
              unsigned int v65 = (_DWORD *)((char *)v65 + 2);
            }
            if ((unint64_t)v67 >= v5)
            {
LABEL_62:
              unint64_t v29 = v67 - v243;
              if (v29 <= v57) {
                goto LABEL_64;
              }
              goto LABEL_63;
            }
          }
          if (*(unsigned __int8 *)v65 == *v67) {
            ++v67;
          }
          goto LABEL_62;
        }
LABEL_6:
        v243 += ((v243 - v244) >> 8) + 1;
        LODWORD(v8) = v216;
        uint64_t v7 = v217;
        uint64_t v11 = v231;
        uint64_t v15 = v214;
        unint64_t v9 = v215;
LABEL_7:
        unsigned int v10 = v236;
        continue;
      }
      if (v35 == 5)
      {
        int v71 = *(_DWORD *)(v14 + 196);
        unsigned int v72 = 1 << v71;
        uint64_t v74 = *(void *)(v14 + 8);
        uint64_t v73 = *(void *)(v14 + 16);
        unsigned int v75 = v243 - v74;
        unsigned int v76 = 1 << *(_DWORD *)(v14 + 192);
        BOOL v77 = v243 - v74 - v19 > v76 && v20 == 0;
        uint64_t v78 = *(void *)(v14 + 64);
        uint64_t v79 = *(unsigned int *)(v14 + 24);
        if (v77) {
          unsigned int v80 = v243 - v74 - v76;
        }
        else {
          unsigned int v80 = *(_DWORD *)(v14 + 28);
        }
        if (v75 >= v72) {
          uint64_t v81 = v75 - v72;
        }
        else {
          uint64_t v81 = 0;
        }
        uint64_t v82 = *(void *)(v14 + 48);
        int v83 = *(_DWORD *)(v14 + 204);
        uint64_t v84 = *(unsigned int *)(v14 + 36);
        int v85 = 64 - *(_DWORD *)(v14 + 200);
        if (v84 < v75)
        {
          int v86 = ~(-1 << v71);
          do
          {
            unint64_t v87 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v74 + v84)) >> v85);
            *(_DWORD *)(v78 + 4 * (v84 & v86)) = *(_DWORD *)(v82 + v87);
            *(_DWORD *)(v82 + v87) = v84++;
          }
          while (v243 - v74 != v84);
        }
        *(_DWORD *)(v14 + 36) = v75;
        unsigned int v88 = *(_DWORD *)(v82 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v243) >> v85));
        if (v88 < v80) {
          goto LABEL_6;
        }
        uint64_t v212 = *(void *)v243;
        unsigned int v89 = v72 - 1;
        int v227 = (void *)(v74 + v79);
        unint64_t v225 = (char *)(v73 + v79);
        int v90 = 1 << v83;
        unsigned int v222 = v75 + 2;
        uint64_t v91 = v243 + 8;
        uint64_t v206 = v74 + 8;
        uint64_t v235 = 999999999;
        unint64_t v92 = 3;
        uint64_t v219 = v78;
        while (2)
        {
          uint64_t v93 = v88;
          if (v88 < v79)
          {
            if (*(_DWORD *)(v73 + v88) != *(_DWORD *)v243) {
              goto LABEL_112;
            }
            uint64_t v94 = v79;
            uint64_t v95 = v73;
            uint64_t v96 = v81;
            unint64_t v97 = ZSTD_count_2segments(v243 + 4, (char *)(v73 + v88 + 4), v5, v225, v227);
            uint64_t v81 = v96;
            uint64_t v73 = v95;
            uint64_t v79 = v94;
            uint64_t v78 = v219;
            unint64_t v16 = v232;
            unint64_t v17 = v233;
            unint64_t v5 = v234;
            unint64_t v29 = v97 + 4;
            if (v97 + 4 <= v92) {
              goto LABEL_112;
            }
LABEL_111:
            uint64_t v235 = v222 - v93;
            unint64_t v92 = v29;
            if (&v243[v29] == (unsigned __int8 *)v5) {
              goto LABEL_172;
            }
            goto LABEL_112;
          }
          unint64_t v98 = (_DWORD *)(v74 + v88);
          if (*(unsigned __int8 *)(v74 + v93 + v92) == v243[v92])
          {
            if (v17 <= (unint64_t)v243)
            {
              unint64_t v100 = v243;
              if ((unint64_t)v243 < v230)
              {
LABEL_100:
                if (*v98 == *(_DWORD *)v100)
                {
                  v100 += 4;
                  ++v98;
                }
              }
            }
            else
            {
              unint64_t v99 = *(void *)v98 ^ v212;
              if (v99)
              {
                unint64_t v29 = __clz(__rbit64(v99)) >> 3;
                if (v29 > v92) {
                  goto LABEL_111;
                }
                goto LABEL_112;
              }
              uint64_t v101 = 0;
              while (1)
              {
                unint64_t v100 = (unsigned __int8 *)&v91[v101];
                if ((unint64_t)&v91[v101] >= v17) {
                  break;
                }
                uint64_t v102 = *(void *)(v206 + v93 + v101 * 8);
                ++v101;
                unint64_t v103 = *(void *)v100 ^ v102;
                if (v103)
                {
                  unint64_t v29 = v101 * 8 + (__clz(__rbit64(v103)) >> 3);
                  if (v29 > v92) {
                    goto LABEL_111;
                  }
                  goto LABEL_112;
                }
              }
              unint64_t v98 = (_DWORD *)(v206 + v93 + v101 * 8);
              if ((unint64_t)v100 < v230) {
                goto LABEL_100;
              }
            }
            if ((unint64_t)v100 >= v229)
            {
              if ((unint64_t)v100 < v5) {
                goto LABEL_108;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v98 == *(unsigned __int16 *)v100)
              {
                v100 += 2;
                unint64_t v98 = (_DWORD *)((char *)v98 + 2);
              }
              if ((unint64_t)v100 >= v5) {
                goto LABEL_110;
              }
LABEL_108:
              if (*(unsigned __int8 *)v98 == *v100) {
                ++v100;
              }
            }
LABEL_110:
            unint64_t v29 = v100 - v243;
            if (v29 > v92) {
              goto LABEL_111;
            }
          }
LABEL_112:
          if (v93 <= v81) {
            goto LABEL_171;
          }
          if (!--v90) {
            goto LABEL_171;
          }
          unsigned int v88 = *(_DWORD *)(v78 + 4 * (v93 & v89));
          unint64_t v29 = v92;
          if (v88 < v80) {
            goto LABEL_172;
          }
          continue;
        }
      }
      int v104 = *(_DWORD *)(v14 + 196);
      unsigned int v105 = 1 << v104;
      uint64_t v107 = *(void *)(v14 + 8);
      uint64_t v106 = *(void *)(v14 + 16);
      unsigned int v108 = v243 - v107;
      unsigned int v109 = 1 << *(_DWORD *)(v14 + 192);
      BOOL v110 = v243 - v107 - v19 > v109 && v20 == 0;
      uint64_t v111 = *(void *)(v14 + 64);
      uint64_t v112 = *(unsigned int *)(v14 + 24);
      if (v110) {
        uint64_t v113 = v243 - v107 - v109;
      }
      else {
        uint64_t v113 = v19;
      }
      if (v108 >= v105) {
        uint64_t v114 = v108 - v105;
      }
      else {
        uint64_t v114 = 0;
      }
      uint64_t v115 = *(void *)(v14 + 48);
      int v116 = *(_DWORD *)(v14 + 204);
      uint64_t v117 = *(unsigned int *)(v14 + 36);
      int v118 = 32 - *(_DWORD *)(v14 + 200);
      if (v117 < v108)
      {
        int v119 = ~(-1 << v104);
        do
        {
          uint64_t v120 = 4 * ((-1640531535 * *(_DWORD *)(v107 + v117)) >> v118);
          *(_DWORD *)(v111 + 4 * (v117 & v119)) = *(_DWORD *)(v115 + v120);
          *(_DWORD *)(v115 + v120) = v117++;
        }
        while (v243 - v107 != v117);
      }
      *(_DWORD *)(v14 + 36) = v108;
      int v121 = *(_DWORD *)v243;
      unsigned int v122 = *(_DWORD *)(v115 + 4 * ((-1640531535 * *(_DWORD *)v243) >> v118));
      if (v122 < v113) {
        goto LABEL_6;
      }
      unsigned int v123 = v105 - 1;
      unint64_t v226 = (void *)(v107 + v112);
      int v223 = (char *)(v106 + v112);
      int v124 = 1 << v116;
      unsigned int v220 = v108 + 2;
      int v125 = v243 + 8;
      uint64_t v207 = v107 + 8;
      uint64_t v235 = 999999999;
      unint64_t v92 = 3;
      uint64_t v228 = v111;
      int v213 = v112;
      while (1)
      {
        uint64_t v126 = v122;
        if (v122 < v112)
        {
          if (*(_DWORD *)(v106 + v122) != v121) {
            goto LABEL_159;
          }
          uint64_t v127 = v106;
          uint64_t v112 = v114;
          uint64_t v128 = v113;
          unsigned int v129 = v125;
          unint64_t v130 = ZSTD_count_2segments(v243 + 4, (char *)(v106 + v122 + 4), v5, v223, v226);
          int v125 = v129;
          uint64_t v113 = v128;
          uint64_t v114 = v112;
          LODWORD(v112) = v213;
          uint64_t v111 = v228;
          uint64_t v106 = v127;
          unint64_t v16 = v232;
          unint64_t v17 = v233;
          unint64_t v5 = v234;
          unint64_t v29 = v130 + 4;
          if (v130 + 4 <= v92) {
            goto LABEL_159;
          }
          goto LABEL_158;
        }
        int v131 = (_DWORD *)(v107 + v122);
        if (*(unsigned __int8 *)(v107 + v126 + v92) != v243[v92]) {
          goto LABEL_159;
        }
        if (v17 <= (unint64_t)v243)
        {
          unsigned int v133 = v243;
          if ((unint64_t)v243 < v230)
          {
LABEL_147:
            if (*v131 == *(_DWORD *)v133)
            {
              v133 += 4;
              ++v131;
            }
          }
          goto LABEL_149;
        }
        unint64_t v132 = *(void *)v243 ^ *(void *)v131;
        if (!v132)
        {
          uint64_t v134 = 0;
          while (1)
          {
            unsigned int v133 = (unsigned __int8 *)&v125[v134];
            if ((unint64_t)&v125[v134] >= v17) {
              break;
            }
            uint64_t v135 = *(void *)(v207 + v126 + v134 * 8);
            ++v134;
            unint64_t v136 = *(void *)v133 ^ v135;
            if (v136)
            {
              unint64_t v29 = v134 * 8 + (__clz(__rbit64(v136)) >> 3);
              if (v29 > v92) {
                goto LABEL_158;
              }
              goto LABEL_159;
            }
          }
          int v131 = (_DWORD *)(v207 + v126 + v134 * 8);
          if ((unint64_t)v133 < v230) {
            goto LABEL_147;
          }
LABEL_149:
          if ((unint64_t)v133 >= v229)
          {
            if ((unint64_t)v133 >= v5) {
              goto LABEL_157;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v131 == *(unsigned __int16 *)v133)
            {
              v133 += 2;
              int v131 = (_DWORD *)((char *)v131 + 2);
            }
            if ((unint64_t)v133 >= v5)
            {
LABEL_157:
              unint64_t v29 = v133 - v243;
              if (v29 <= v92) {
                goto LABEL_159;
              }
              goto LABEL_158;
            }
          }
          if (*(unsigned __int8 *)v131 == *v133) {
            ++v133;
          }
          goto LABEL_157;
        }
        unint64_t v29 = __clz(__rbit64(v132)) >> 3;
        if (v29 <= v92) {
          goto LABEL_159;
        }
LABEL_158:
        uint64_t v235 = v220 - v126;
        unint64_t v92 = v29;
        if (&v243[v29] == (unsigned __int8 *)v5) {
          goto LABEL_172;
        }
LABEL_159:
        if (v126 <= v114) {
          break;
        }
        if (!--v124) {
          break;
        }
        unsigned int v122 = *(_DWORD *)(v111 + 4 * (v126 & v123));
        unint64_t v29 = v92;
        if (v122 < v113) {
          goto LABEL_172;
        }
      }
LABEL_171:
      unint64_t v29 = v92;
LABEL_172:
      uint64_t v28 = v235;
      if (!v29) {
        uint64_t v28 = 0;
      }
      uint64_t v137 = v243 + 1;
      if (v29) {
        uint64_t v137 = v243;
      }
      unint64_t v240 = (unint64_t)v137;
      uint64_t v14 = a1;
      uint64_t v13 = a2;
      unint64_t v6 = v208;
      if (v29 <= 3) {
        goto LABEL_6;
      }
      if (!v28)
      {
        LODWORD(v8) = v216;
        uint64_t v7 = v217;
        uint64_t v11 = v231;
        uint64_t v15 = v214;
        unint64_t v9 = v215;
        int v30 = v137;
        unint64_t v31 = v137 - v244;
        unsigned int v32 = *(_OWORD **)(a2 + 24);
        if (v240 <= v16) {
          goto LABEL_205;
        }
        goto LABEL_24;
      }
      LODWORD(v8) = v216;
      uint64_t v7 = v217;
      int v30 = v137;
      unsigned int v138 = v137 - (v28 + v217) + 2;
      uint64_t v15 = v214;
      unint64_t v9 = v215;
      if (v216 <= v138) {
        uint64_t v139 = v217;
      }
      else {
        uint64_t v139 = v214;
      }
      unint64_t v140 = v204;
      if (v216 <= v138) {
        unint64_t v140 = (unint64_t)v215;
      }
      if (v240 <= (unint64_t)v244)
      {
        unsigned int v141 = v231;
      }
      else
      {
        unsigned int v141 = v231;
        if (v139 + (unint64_t)v138 > v140)
        {
          unint64_t v142 = (unsigned __int8 *)(v139 + v138 - 1);
          unsigned int v143 = (unsigned __int8 *)(v240 - 1);
          while (*v143 == *v142)
          {
            ++v29;
            unsigned int v144 = v143 - 1;
            if (v143 > v244)
            {
              --v143;
              if ((unint64_t)v142-- > v140) {
                continue;
              }
            }
            int v30 = v144 + 1;
            goto LABEL_204;
          }
          int v30 = v143 + 1;
        }
      }
LABEL_204:
      unsigned int v236 = v141;
      uint64_t v11 = (v28 - 2);
      unint64_t v31 = v30 - v244;
      unsigned int v32 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v30 > v16) {
        goto LABEL_24;
      }
LABEL_205:
      *unsigned int v32 = *(_OWORD *)v244;
      uint64_t v152 = *(void *)(v13 + 24);
      if (v31 > 0x10)
      {
        unsigned int v153 = (_OWORD *)(v152 + 16);
        unint64_t v154 = v152 + v31;
        int v155 = (long long *)(v244 + 16);
        unint64_t v5 = v234;
        unint64_t v17 = v233;
        do
        {
          long long v156 = *v155++;
          *v153++ = v156;
        }
        while ((unint64_t)v153 < v154);
        goto LABEL_222;
      }
      *(void *)(v13 + 24) = v152 + v31;
      uint64_t v157 = *(void *)(v13 + 8);
      unint64_t v5 = v234;
      unint64_t v17 = v233;
LABEL_224:
      *(_WORD *)(v157 + 4) = v31;
      *(_DWORD *)uint64_t v157 = v28 + 1;
      if (v29 - 3 >= 0x10000)
      {
        unint64_t v169 = (unint64_t)(v157 - *(void *)v13) >> 3;
        *(_DWORD *)(v13 + 72) = 2;
        *(_DWORD *)(v13 + 76) = v169;
      }
      *(_WORD *)(v157 + 6) = v29 - 3;
      uint64_t v170 = v157 + 8;
      *(void *)(v13 + 8) = v157 + 8;
      unint64_t v244 = &v30[v29];
      if ((unint64_t)&v30[v29] > v6)
      {
        uint64_t v243 = &v30[v29];
        goto LABEL_7;
      }
      uint64_t v171 = v11;
      uint64_t v172 = v236;
LABEL_230:
      uint64_t v11 = v172;
      uint64_t v172 = v171;
      unsigned int v174 = *(_DWORD *)(v14 + 28);
      if (v244 - v7 - v174 > v242 && *(_DWORD *)(v14 + 32) == 0) {
        unsigned int v174 = v244 - v7 - v242;
      }
      uint64_t v176 = (v244 - v7 - v11);
      if (v176 >= v8) {
        uint64_t v177 = v7;
      }
      else {
        uint64_t v177 = v15;
      }
      if ((v241 - v176) >= 3 && v176 > v174)
      {
        uint64_t v178 = v177 + v176;
        if (*(_DWORD *)v244 == *(_DWORD *)(v177 + v176))
        {
          if (v176 >= v8) {
            unint64_t v179 = (void *)v5;
          }
          else {
            unint64_t v179 = v237;
          }
          int v180 = (char *)(v244 + 4);
          unint64_t v181 = (void *)(v178 + 4);
          uint64_t v182 = (char *)v179 + (void)v244 - v178;
          if ((unint64_t)v182 >= v5) {
            uint64_t v182 = (char *)v5;
          }
          if (v182 - 7 <= v180)
          {
            int v186 = (char *)(v244 + 4);
            uint64_t v187 = v181;
            if (v180 < v182 - 3)
            {
LABEL_253:
              if (*v187 == *(_DWORD *)v186)
              {
                v186 += 4;
                ++v187;
              }
            }
          }
          else
          {
            unint64_t v183 = *(void *)v180 ^ *v181;
            if (v183)
            {
              unint64_t v184 = __clz(__rbit64(v183)) >> 3;
              if ((void *)((char *)v181 + v184) != v179) {
                goto LABEL_249;
              }
LABEL_264:
              uint64_t v188 = &v180[v184];
              if (v17 <= (unint64_t)v188)
              {
                uint64_t v194 = (unsigned __int8 *)v188;
                uint64_t v195 = v9;
                if ((unint64_t)v188 < v230)
                {
LABEL_274:
                  if (*v195 == *(_DWORD *)v194)
                  {
                    v194 += 4;
                    ++v195;
                  }
                }
              }
              else
              {
                unint64_t v189 = *(void *)v188 ^ *v9;
                if (v189)
                {
                  v184 += __clz(__rbit64(v189)) >> 3;
                  if ((unint64_t)v244 > v16) {
                    goto LABEL_250;
                  }
LABEL_285:
                  *(_OWORD *)*(void *)(v13 + 24) = *(_OWORD *)v244;
                  uint64_t v170 = *(void *)(v13 + 8);
                  __int16 v185 = v184 + 1;
                  *(_WORD *)(v170 + 4) = 0;
                  *(_DWORD *)uint64_t v170 = 1;
                  if (v184 + 1 >= 0x10000)
                  {
LABEL_286:
                    unint64_t v196 = (unint64_t)(v170 - *(void *)v13) >> 3;
                    *(_DWORD *)(v13 + 72) = 2;
                    *(_DWORD *)(v13 + 76) = v196;
                  }
LABEL_229:
                  *(_WORD *)(v170 + 6) = v185;
                  v170 += 8;
                  unint64_t v173 = &v244[v184 + 4];
                  *(void *)(v13 + 8) = v170;
                  uint64_t v171 = v11;
                  unsigned int v10 = v172;
                  uint64_t v243 = v173;
                  unint64_t v244 = v173;
                  if ((unint64_t)v173 > v6) {
                    continue;
                  }
                  goto LABEL_230;
                }
                uint64_t v197 = 0;
                uint64_t v198 = (uint64_t)&v244[v184 + 12];
                while (1)
                {
                  int v199 = (void *)(v198 + v197);
                  if (v198 + v197 >= v17) {
                    break;
                  }
                  uint64_t v200 = *(void *)(v238 + v197);
                  v197 += 8;
                  unint64_t v201 = *v199 ^ v200;
                  if (v201)
                  {
                    v184 += v197 + (__clz(__rbit64(v201)) >> 3);
                    if ((unint64_t)v244 <= v16) {
                      goto LABEL_285;
                    }
                    goto LABEL_250;
                  }
                }
                uint64_t v194 = &v244[v184 + 12 + v197];
                uint64_t v195 = (_DWORD *)(v238 + v197);
                if ((unint64_t)v194 < v230) {
                  goto LABEL_274;
                }
              }
              if ((unint64_t)v194 >= v229)
              {
                if ((unint64_t)v194 >= v5) {
                  goto LABEL_284;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v195 == *(unsigned __int16 *)v194)
                {
                  v194 += 2;
                  uint64_t v195 = (_DWORD *)((char *)v195 + 2);
                }
                if ((unint64_t)v194 >= v5)
                {
LABEL_284:
                  v184 += v194 - (unsigned __int8 *)v188;
                  if ((unint64_t)v244 > v16) {
                    goto LABEL_250;
                  }
                  goto LABEL_285;
                }
              }
              if (*(unsigned __int8 *)v195 == *v194) {
                ++v194;
              }
              goto LABEL_284;
            }
            unint64_t v190 = (char *)(v244 + 12);
            while (1)
            {
              unint64_t v191 = &v190[v183];
              if (&v190[v183] >= v182 - 7) {
                break;
              }
              uint64_t v192 = *(void *)(v177 + v176 + 12 + v183);
              v183 += 8;
              unint64_t v193 = *(void *)v191 ^ v192;
              if (v193)
              {
                unint64_t v184 = v183 + (__clz(__rbit64(v193)) >> 3);
                if ((void *)((char *)v181 + v184) != v179) {
                  goto LABEL_249;
                }
                goto LABEL_264;
              }
            }
            int v186 = (char *)&v244[v183 + 12];
            uint64_t v187 = (_DWORD *)(v177 + v176 + v183 + 12);
            if (v186 < v182 - 3) {
              goto LABEL_253;
            }
          }
          if (v186 >= v182 - 1)
          {
            if (v186 >= v182) {
              goto LABEL_263;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v187 == *(unsigned __int16 *)v186)
            {
              v186 += 2;
              uint64_t v187 = (_DWORD *)((char *)v187 + 2);
            }
            if (v186 >= v182)
            {
LABEL_263:
              unint64_t v184 = v186 - v180;
              if ((void *)((char *)v181 + v186 - v180) == v179) {
                goto LABEL_264;
              }
LABEL_249:
              if ((unint64_t)v244 <= v16) {
                goto LABEL_285;
              }
LABEL_250:
              __int16 v185 = v184 + 1;
              *(_WORD *)(v170 + 4) = 0;
              *(_DWORD *)uint64_t v170 = 1;
              if (v184 + 1 >= 0x10000) {
                goto LABEL_286;
              }
              goto LABEL_229;
            }
          }
          if (*(unsigned __int8 *)v187 == *v186) {
            ++v186;
          }
          goto LABEL_263;
        }
      }
      unsigned int v10 = v11;
      uint64_t v11 = v171;
      uint64_t v243 = v244;
    }
    while ((unint64_t)v243 < v6);
  }
  *a3 = v11;
  a3[1] = v10;
  return v5 - (void)v244;
}

unint64_t ZSTD_compressBlock_lazy_extDict(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = (unint64_t)&a4[a5];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  LODWORD(v10) = *a3;
  unsigned int v9 = a3[1];
  unsigned int v319 = (unsigned __int8 *)(v7 + v8);
  if ((unsigned __int8 *)(v7 + v8) == a4) {
    unint64_t v11 = (unint64_t)(a4 + 1);
  }
  else {
    unint64_t v11 = (unint64_t)a4;
  }
  unint64_t v348 = (unint64_t)&a4[a5 - 8];
  if (v11 < v348)
  {
    uint64_t v12 = a1;
    uint64_t v13 = (unsigned __int8 *)v11;
    unsigned int v334 = a3[1];
    unsigned int v314 = a3;
    uint64_t v14 = *(void *)(a1 + 16);
    int v332 = (char *)(v14 + v8);
    uint64_t v374 = v14;
    unsigned int v315 = (unsigned __int8 *)(v14 + *(unsigned int *)(a1 + 28));
    unsigned int v15 = 1 << *(_DWORD *)(a1 + 192);
    int v16 = v8 - 1;
    unint64_t v317 = v6 - 32;
    unint64_t v17 = v6 - 7;
    unint64_t v375 = v6 - 1;
    unint64_t v376 = v6 - 3;
    uint64_t v320 = (uint64_t)&a4[a5 - 8];
    unint64_t v378 = (unint64_t)&a4[a5];
    uint64_t v330 = *(void *)(a1 + 8);
    int v331 = *(_DWORD *)(a1 + 24);
    int v324 = v8 - 1;
    unsigned int v325 = v15;
    unint64_t v377 = v6 - 7;
    int v18 = v13;
    uint64_t v316 = v8 + v7 + 8;
    while (1)
    {
      unint64_t v19 = 0;
      int v20 = v18 + 1;
      int v373 = v18 - v7;
      int v21 = v18 - v7 + 1;
      unsigned int v22 = *(_DWORD *)(v12 + 28);
      int v23 = *(_DWORD *)(v12 + 32);
      unsigned int v24 = v21 - v15;
      if (v21 - v22 <= v15 || v23 != 0) {
        unsigned int v24 = *(_DWORD *)(v12 + 28);
      }
      uint64_t v26 = (v21 - v10);
      uint64_t v27 = v374;
      if (v26 >= v8) {
        uint64_t v27 = v7;
      }
      uint64_t v381 = v18;
      if ((v16 - v26) >= 3 && v26 > v24)
      {
        uint64_t v28 = v27 + v26;
        if (*(_DWORD *)v20 == *(_DWORD *)v28)
        {
          if (v26 >= v8) {
            unint64_t v29 = (char *)v6;
          }
          else {
            unint64_t v29 = v332;
          }
          unint64_t v30 = ZSTD_count_2segments(v18 + 5, (char *)(v28 + 4), v6, v29, v319);
          int v18 = v381;
          unint64_t v17 = v377;
          unint64_t v6 = v378;
          unint64_t v19 = v30 + 4;
        }
        else
        {
          unint64_t v19 = 0;
        }
      }
      int v31 = *(_DWORD *)(v12 + 208);
      unsigned int v335 = v5;
      unsigned int v333 = v10;
      uint64_t v371 = v20;
      unint64_t v379 = v19;
      if ((v31 - 6) < 2)
      {
        int v32 = *(_DWORD *)(v12 + 196);
        unsigned int v33 = 1 << v32;
        uint64_t v35 = *(void *)(v12 + 8);
        uint64_t v34 = *(void *)(v12 + 16);
        unsigned int v36 = v18 - v35;
        unsigned int v37 = 1 << *(_DWORD *)(v12 + 192);
        BOOL v38 = v18 - v35 - v22 > v37 && v23 == 0;
        uint64_t v39 = *(void *)(v12 + 64);
        uint64_t v40 = *(unsigned int *)(v12 + 24);
        if (v38) {
          unsigned int v41 = v18 - v35 - v37;
        }
        else {
          unsigned int v41 = v22;
        }
        if (v36 >= v33) {
          uint64_t v42 = v36 - v33;
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v43 = *(void *)(v12 + 48);
        int v44 = *(_DWORD *)(v12 + 204);
        uint64_t v45 = *(unsigned int *)(v12 + 36);
        int v46 = 64 - *(_DWORD *)(v12 + 200);
        if (v45 < v36)
        {
          int v47 = ~(-1 << v32);
          do
          {
            unint64_t v48 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v35 + v45)) >> v46);
            *(_DWORD *)(v39 + 4 * (v45 & v47)) = *(_DWORD *)(v43 + v48);
            *(_DWORD *)(v43 + v48) = v45++;
          }
          while (v18 - v35 != v45);
        }
        *(_DWORD *)(v12 + 36) = v36;
        unsigned int v49 = *(_DWORD *)(v43 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v18) >> v46));
        if (v49 >= v41)
        {
          uint64_t v340 = *(void *)v18;
          unsigned int v50 = v33 - 1;
          int v366 = (void *)(v35 + v40);
          unint64_t v361 = (char *)(v34 + v40);
          int v51 = 1 << v44;
          unint64_t v355 = v18 + 4;
          unsigned int v349 = v36 + 2;
          unint64_t v52 = v18 + 8;
          uint64_t v336 = v35 + 8;
          uint64_t v383 = 999999999;
          unint64_t v53 = 3;
          uint64_t v344 = v39;
          while (1)
          {
            uint64_t v54 = v49;
            if (v49 < v40)
            {
              if (*(_DWORD *)(v34 + v49) == *(_DWORD *)v18)
              {
                uint64_t v55 = v34;
                uint64_t v56 = v42;
                uint64_t v57 = v40;
                unint64_t v58 = ZSTD_count_2segments(v355, (char *)(v34 + v49 + 4), v6, v361, v366);
                uint64_t v40 = v57;
                uint64_t v42 = v56;
                uint64_t v34 = v55;
                uint64_t v39 = v344;
                int v18 = v381;
                unint64_t v17 = v377;
                unint64_t v6 = v378;
                unint64_t v59 = v58 + 4;
                if (v58 + 4 > v53) {
                  goto LABEL_59;
                }
              }
              goto LABEL_60;
            }
            uint64_t v60 = (void *)(v35 + v49);
            if (*((unsigned __int8 *)v60 + v53) != v18[v53]) {
              goto LABEL_60;
            }
            if (v17 <= (unint64_t)v18) {
              break;
            }
            unint64_t v61 = *v60 ^ v340;
            if (v61)
            {
              unint64_t v59 = __clz(__rbit64(v61)) >> 3;
              if (v59 > v53) {
                goto LABEL_59;
              }
              goto LABEL_60;
            }
            uint64_t v63 = 0;
            do
            {
              uint64_t v62 = (unsigned __int8 *)&v52[v63];
              if ((unint64_t)&v52[v63] >= v17)
              {
                uint64_t v60 = (void *)(v336 + v54 + v63 * 8);
                if ((unint64_t)v62 >= v376) {
                  goto LABEL_50;
                }
                goto LABEL_48;
              }
              uint64_t v64 = *(void *)(v336 + v54 + v63 * 8);
              ++v63;
              unint64_t v65 = *(void *)v62 ^ v64;
            }
            while (!v65);
            unint64_t v59 = v63 * 8 + (__clz(__rbit64(v65)) >> 3);
            if (v59 <= v53) {
              goto LABEL_60;
            }
LABEL_59:
            uint64_t v383 = v349 - v54;
            unint64_t v53 = v59;
            if (&v18[v59] == (unsigned __int8 *)v6) {
              goto LABEL_177;
            }
LABEL_60:
            if (v54 <= v42 || (--v51, !v51))
            {
              unint64_t v59 = v53;
              unint64_t v119 = v379;
              if (v53 <= v379) {
                unint64_t v120 = v379;
              }
              else {
                unint64_t v120 = v53;
              }
              if (v120 >= 4) {
                goto LABEL_181;
              }
LABEL_6:
              unint64_t v5 = v335;
              v18 += ((v18 - v335) >> 8) + 1;
              uint64_t v12 = a1;
              uint64_t v7 = v330;
              LODWORD(v10) = v333;
              LODWORD(v8) = v331;
              int v16 = v324;
              unsigned int v15 = v325;
              goto LABEL_7;
            }
            unsigned int v49 = *(_DWORD *)(v39 + 4 * (v54 & v50));
            unint64_t v59 = v53;
            if (v49 < v41) {
              goto LABEL_177;
            }
          }
          uint64_t v62 = v18;
          if ((unint64_t)v18 >= v376) {
            goto LABEL_50;
          }
LABEL_48:
          if (*(_DWORD *)v60 == *(_DWORD *)v62)
          {
            v62 += 4;
            uint64_t v60 = (void *)((char *)v60 + 4);
          }
LABEL_50:
          if ((unint64_t)v62 >= v375)
          {
            if ((unint64_t)v62 >= v6) {
              goto LABEL_58;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v60 == *(unsigned __int16 *)v62)
            {
              v62 += 2;
              uint64_t v60 = (void *)((char *)v60 + 2);
            }
            if ((unint64_t)v62 >= v6)
            {
LABEL_58:
              unint64_t v59 = v62 - v18;
              if (v59 > v53) {
                goto LABEL_59;
              }
              goto LABEL_60;
            }
          }
          if (*(unsigned __int8 *)v60 == *v62) {
            ++v62;
          }
          goto LABEL_58;
        }
LABEL_132:
        uint64_t v383 = 999999999;
        unint64_t v59 = 3;
        unint64_t v119 = v379;
        if (v379 >= 3) {
          unint64_t v120 = v379;
        }
        else {
          unint64_t v120 = 3;
        }
        if (v120 >= 4) {
          goto LABEL_181;
        }
        goto LABEL_6;
      }
      if (v31 == 5)
      {
        int v66 = *(_DWORD *)(v12 + 196);
        unsigned int v67 = 1 << v66;
        uint64_t v69 = *(void *)(v12 + 8);
        uint64_t v68 = *(void *)(v12 + 16);
        unsigned int v70 = v18 - v69;
        unsigned int v71 = 1 << *(_DWORD *)(v12 + 192);
        BOOL v72 = v18 - v69 - v22 > v71 && v23 == 0;
        uint64_t v73 = *(void *)(v12 + 64);
        uint64_t v74 = *(unsigned int *)(v12 + 24);
        if (v72) {
          unsigned int v75 = v18 - v69 - v71;
        }
        else {
          unsigned int v75 = v22;
        }
        if (v70 >= v67) {
          uint64_t v76 = v70 - v67;
        }
        else {
          uint64_t v76 = 0;
        }
        uint64_t v77 = *(void *)(v12 + 48);
        int v78 = *(_DWORD *)(v12 + 204);
        uint64_t v79 = *(unsigned int *)(v12 + 36);
        int v80 = 64 - *(_DWORD *)(v12 + 200);
        if (v79 < v70)
        {
          int v81 = ~(-1 << v66);
          do
          {
            unint64_t v82 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v69 + v79)) >> v80);
            *(_DWORD *)(v73 + 4 * (v79 & v81)) = *(_DWORD *)(v77 + v82);
            *(_DWORD *)(v77 + v82) = v79++;
          }
          while (v18 - v69 != v79);
        }
        *(_DWORD *)(v12 + 36) = v70;
        uint64_t v341 = *(void *)v18;
        unsigned int v83 = *(_DWORD *)(v77 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v18) >> v80));
        if (v83 < v75) {
          goto LABEL_132;
        }
        unsigned int v84 = v67 - 1;
        unsigned int v367 = (void *)(v69 + v74);
        uint64_t v362 = (char *)(v68 + v74);
        int v85 = 1 << v78;
        int v356 = v18 + 4;
        unsigned int v350 = v70 + 2;
        int v86 = v18 + 8;
        uint64_t v337 = v69 + 8;
        uint64_t v383 = 999999999;
        unint64_t v87 = 3;
        uint64_t v345 = v68;
        while (2)
        {
          uint64_t v88 = v83;
          if (v83 < v74)
          {
            if (*(_DWORD *)(v68 + v83) != *(_DWORD *)v18) {
              goto LABEL_108;
            }
            uint64_t v89 = v76;
            uint64_t v90 = v73;
            uint64_t v91 = v69;
            uint64_t v92 = v74;
            unint64_t v93 = ZSTD_count_2segments(v356, (char *)(v68 + v83 + 4), v6, v362, v367);
            uint64_t v74 = v92;
            uint64_t v69 = v91;
            uint64_t v73 = v90;
            uint64_t v76 = v89;
            uint64_t v68 = v345;
            int v18 = v381;
            unint64_t v17 = v377;
            unint64_t v6 = v378;
            unint64_t v59 = v93 + 4;
            if (v93 + 4 <= v87) {
              goto LABEL_108;
            }
            goto LABEL_107;
          }
          uint64_t v94 = (_DWORD *)(v69 + v83);
          if (*((unsigned __int8 *)v94 + v87) != v18[v87]) {
            goto LABEL_108;
          }
          if (v17 <= (unint64_t)v18)
          {
            uint64_t v96 = v18;
            if ((unint64_t)v18 < v376)
            {
LABEL_96:
              if (*v94 == *(_DWORD *)v96)
              {
                v96 += 4;
                ++v94;
              }
            }
          }
          else
          {
            unint64_t v95 = *(void *)v94 ^ v341;
            if (v95)
            {
              unint64_t v59 = __clz(__rbit64(v95)) >> 3;
              if (v59 <= v87) {
                goto LABEL_108;
              }
LABEL_107:
              uint64_t v383 = v350 - v88;
              unint64_t v87 = v59;
              if (&v18[v59] == (unsigned __int8 *)v6) {
                goto LABEL_177;
              }
LABEL_108:
              if (v88 <= v76 || (--v85, !v85))
              {
                unint64_t v59 = v87;
                goto LABEL_177;
              }
              unsigned int v83 = *(_DWORD *)(v73 + 4 * (v88 & v84));
              unint64_t v59 = v87;
              if (v83 < v75) {
                goto LABEL_177;
              }
              continue;
            }
            uint64_t v97 = 0;
            while (1)
            {
              uint64_t v96 = (unsigned __int8 *)&v86[v97];
              if ((unint64_t)&v86[v97] >= v17) {
                break;
              }
              uint64_t v98 = *(void *)(v337 + v88 + v97 * 8);
              ++v97;
              unint64_t v99 = *(void *)v96 ^ v98;
              if (v99)
              {
                unint64_t v59 = v97 * 8 + (__clz(__rbit64(v99)) >> 3);
                if (v59 > v87) {
                  goto LABEL_107;
                }
                goto LABEL_108;
              }
            }
            uint64_t v94 = (_DWORD *)(v337 + v88 + v97 * 8);
            if ((unint64_t)v96 < v376) {
              goto LABEL_96;
            }
          }
          break;
        }
        if ((unint64_t)v96 >= v375)
        {
          if ((unint64_t)v96 >= v6) {
            goto LABEL_106;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v94 == *(unsigned __int16 *)v96)
          {
            v96 += 2;
            uint64_t v94 = (_DWORD *)((char *)v94 + 2);
          }
          if ((unint64_t)v96 >= v6)
          {
LABEL_106:
            unint64_t v59 = v96 - v18;
            if (v59 <= v87) {
              goto LABEL_108;
            }
            goto LABEL_107;
          }
        }
        if (*(unsigned __int8 *)v94 == *v96) {
          ++v96;
        }
        goto LABEL_106;
      }
      int v100 = *(_DWORD *)(v12 + 196);
      unsigned int v101 = 1 << v100;
      uint64_t v103 = *(void *)(v12 + 8);
      uint64_t v102 = *(void *)(v12 + 16);
      unsigned int v104 = v18 - v103;
      unsigned int v105 = 1 << *(_DWORD *)(v12 + 192);
      BOOL v106 = v18 - v103 - v22 > v105 && v23 == 0;
      uint64_t v107 = *(void *)(v12 + 64);
      uint64_t v108 = *(unsigned int *)(v12 + 24);
      if (v106) {
        unsigned int v109 = v18 - v103 - v105;
      }
      else {
        unsigned int v109 = v22;
      }
      if (v104 >= v101) {
        uint64_t v110 = v104 - v101;
      }
      else {
        uint64_t v110 = 0;
      }
      uint64_t v111 = *(void *)(v12 + 48);
      int v112 = *(_DWORD *)(v12 + 204);
      uint64_t v113 = *(unsigned int *)(v12 + 36);
      int v114 = 32 - *(_DWORD *)(v12 + 200);
      if (v113 < v104)
      {
        int v115 = ~(-1 << v100);
        do
        {
          uint64_t v116 = 4 * ((-1640531535 * *(_DWORD *)(v103 + v113)) >> v114);
          *(_DWORD *)(v107 + 4 * (v113 & v115)) = *(_DWORD *)(v111 + v116);
          *(_DWORD *)(v111 + v116) = v113++;
        }
        while (v18 - v103 != v113);
      }
      *(_DWORD *)(v12 + 36) = v104;
      int v117 = *(_DWORD *)v18;
      unsigned int v118 = *(_DWORD *)(v111 + 4 * ((-1640531535 * *(_DWORD *)v18) >> v114));
      if (v118 < v109) {
        goto LABEL_132;
      }
      unsigned int v121 = v101 - 1;
      unsigned int v368 = (void *)(v103 + v108);
      unsigned int v363 = (char *)(v102 + v108);
      int v122 = 1 << v112;
      uint64_t v357 = v18 + 4;
      unsigned int v351 = v104 + 2;
      unsigned int v123 = v18 + 8;
      uint64_t v338 = v103 + 8;
      uint64_t v383 = 999999999;
      unint64_t v124 = 3;
      uint64_t v342 = v107;
      uint64_t v346 = v102;
      do
      {
        uint64_t v125 = v118;
        if (v118 < v108)
        {
          if (*(_DWORD *)(v102 + v118) != v117) {
            goto LABEL_165;
          }
          uint64_t v126 = v110;
          uint64_t v127 = v103;
          uint64_t v128 = v108;
          unint64_t v129 = ZSTD_count_2segments(v357, (char *)(v102 + v118 + 4), v6, v363, v368);
          uint64_t v108 = v128;
          uint64_t v103 = v127;
          uint64_t v107 = v342;
          uint64_t v102 = v346;
          uint64_t v110 = v126;
          int v18 = v381;
          unint64_t v17 = v377;
          unint64_t v6 = v378;
          unint64_t v59 = v129 + 4;
          if (v129 + 4 <= v124) {
            goto LABEL_165;
          }
          goto LABEL_164;
        }
        unint64_t v130 = (_DWORD *)(v103 + v118);
        if (*((unsigned __int8 *)v130 + v124) != v18[v124]) {
          goto LABEL_165;
        }
        if (v17 <= (unint64_t)v18)
        {
          unint64_t v132 = v18;
          if ((unint64_t)v18 < v376)
          {
LABEL_153:
            if (*v130 == *(_DWORD *)v132)
            {
              v132 += 4;
              ++v130;
            }
          }
          goto LABEL_155;
        }
        unint64_t v131 = *(void *)v18 ^ *(void *)v130;
        if (!v131)
        {
          uint64_t v133 = 0;
          while (1)
          {
            unint64_t v132 = (unsigned __int8 *)&v123[v133];
            if ((unint64_t)&v123[v133] >= v17) {
              break;
            }
            uint64_t v134 = *(void *)(v338 + v125 + v133 * 8);
            ++v133;
            unint64_t v135 = *(void *)v132 ^ v134;
            if (v135)
            {
              unint64_t v59 = v133 * 8 + (__clz(__rbit64(v135)) >> 3);
              if (v59 > v124) {
                goto LABEL_164;
              }
              goto LABEL_165;
            }
          }
          unint64_t v130 = (_DWORD *)(v338 + v125 + v133 * 8);
          if ((unint64_t)v132 < v376) {
            goto LABEL_153;
          }
LABEL_155:
          if ((unint64_t)v132 >= v375)
          {
            if ((unint64_t)v132 >= v6) {
              goto LABEL_163;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v130 == *(unsigned __int16 *)v132)
            {
              v132 += 2;
              unint64_t v130 = (_DWORD *)((char *)v130 + 2);
            }
            if ((unint64_t)v132 >= v6)
            {
LABEL_163:
              unint64_t v59 = v132 - v18;
              if (v59 <= v124) {
                goto LABEL_165;
              }
              goto LABEL_164;
            }
          }
          if (*(unsigned __int8 *)v130 == *v132) {
            ++v132;
          }
          goto LABEL_163;
        }
        unint64_t v59 = __clz(__rbit64(v131)) >> 3;
        if (v59 <= v124) {
          goto LABEL_165;
        }
LABEL_164:
        uint64_t v383 = v351 - v125;
        unint64_t v124 = v59;
        if (&v18[v59] == (unsigned __int8 *)v6) {
          break;
        }
LABEL_165:
        if (v125 <= v110 || (--v122, !v122))
        {
          unint64_t v59 = v124;
          unint64_t v119 = v379;
          if (v124 <= v379) {
            unint64_t v120 = v379;
          }
          else {
            unint64_t v120 = v124;
          }
          if (v120 >= 4) {
            goto LABEL_181;
          }
          goto LABEL_6;
        }
        unsigned int v118 = *(_DWORD *)(v107 + 4 * (v125 & v121));
        unint64_t v59 = v124;
      }
      while (v118 >= v109);
LABEL_177:
      unint64_t v119 = v379;
      if (v59 <= v379) {
        unint64_t v120 = v379;
      }
      else {
        unint64_t v120 = v59;
      }
      if (v120 < 4) {
        goto LABEL_6;
      }
LABEL_181:
      if (v59 <= v119) {
        unint64_t v136 = v371;
      }
      else {
        unint64_t v136 = v18;
      }
      if (v59 <= v119) {
        uint64_t v137 = 0;
      }
      else {
        uint64_t v137 = v383;
      }
      uint64_t v7 = v330;
      LODWORD(v8) = v331;
      unsigned int v138 = v335;
      if ((unint64_t)v18 >= v348)
      {
        uint64_t v12 = a1;
        if (!v137) {
          goto LABEL_375;
        }
        goto LABEL_361;
      }
      int v372 = v18 + 1;
      uint64_t v12 = a1;
      while (2)
      {
        int v382 = v18;
        unsigned int v384 = v18 + 1;
        int v139 = v373 + 1;
        if (v137)
        {
          if (v139 - *(_DWORD *)(v12 + 28) > v325 && *(_DWORD *)(v12 + 32) == 0) {
            unsigned int v141 = v139 - v325;
          }
          else {
            unsigned int v141 = *(_DWORD *)(v12 + 28);
          }
          uint64_t v142 = v139 - v333;
          uint64_t v143 = v374;
          if (v142 >= v8) {
            uint64_t v143 = v7;
          }
          if ((v324 - v142) >= 3 && v142 > v141)
          {
            uint64_t v144 = v143 + v142;
            if (*(_DWORD *)v384 == *(_DWORD *)v144)
            {
              if (v142 >= v8) {
                uint64_t v145 = (char *)v6;
              }
              else {
                uint64_t v145 = v332;
              }
              unint64_t v146 = ZSTD_count_2segments(v18 + 5, (char *)(v144 + 4), v6, v145, v319);
              if (v146 > 0xFFFFFFFFFFFFFFFBLL)
              {
                unint64_t v17 = v377;
                unint64_t v6 = v378;
                int v18 = v382;
              }
              else
              {
                unint64_t v17 = v377;
                unint64_t v6 = v378;
                int v18 = v382;
                if (3 * ((int)v146 + 4) > (int)(3 * v120 + (__clz(v137 + 1) ^ 0xFFFFFFE0) + 2))
                {
                  uint64_t v137 = 0;
                  unint64_t v136 = v384;
                  unint64_t v120 = v146 + 4;
                }
              }
            }
          }
        }
        int v147 = *(_DWORD *)(v12 + 208);
        ++v373;
        uint64_t v339 = v137;
        unint64_t v343 = v120;
        int v347 = v136;
        if ((v147 - 6) >= 2)
        {
          if (v147 == 5)
          {
            uint64_t v181 = *(void *)(v12 + 64);
            int v182 = *(_DWORD *)(v12 + 196);
            unsigned int v183 = 1 << v182;
            uint64_t v184 = *(void *)(v12 + 8);
            uint64_t v185 = *(void *)(v12 + 16);
            unsigned int v186 = v384 - v184;
            unsigned int v187 = 1 << *(_DWORD *)(v12 + 192);
            uint64_t v188 = *(unsigned int *)(v12 + 24);
            uint64_t v189 = *(unsigned int *)(v12 + 36);
            if ((int)v384 - (int)v184 - *(_DWORD *)(v12 + 28) > v187 && *(_DWORD *)(v12 + 32) == 0) {
              unsigned int v191 = v384 - v184 - v187;
            }
            else {
              unsigned int v191 = *(_DWORD *)(v12 + 28);
            }
            if (v186 >= v183) {
              uint64_t v192 = v186 - v183;
            }
            else {
              uint64_t v192 = 0;
            }
            uint64_t v193 = *(void *)(v12 + 48);
            int v194 = *(_DWORD *)(v12 + 204);
            int v195 = 64 - *(_DWORD *)(v12 + 200);
            if (v189 < v186)
            {
              int v196 = ~(-1 << v182);
              do
              {
                unint64_t v197 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v184 + v189)) >> v195);
                *(_DWORD *)(v181 + 4 * (v189 & v196)) = *(_DWORD *)(v193 + v197);
                *(_DWORD *)(v193 + v197) = v189++;
              }
              while (v372 - v184 != v189);
            }
            *(_DWORD *)(v12 + 36) = v186;
            uint64_t v327 = *(void *)v384;
            unsigned int v198 = *(_DWORD *)(v193 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v384) >> v195));
            if (v198 >= v191)
            {
              unsigned int v199 = v183 - 1;
              int v200 = 1 << v194;
              int v359 = v18 + 5;
              unsigned int v353 = v186 + 2;
              uint64_t v322 = v184 + 8;
              uint64_t v380 = 999999999;
              unint64_t v201 = 3;
              while (1)
              {
                uint64_t v202 = v198;
                if (v198 >= v188) {
                  break;
                }
                if (*(_DWORD *)(v185 + v198) == *(_DWORD *)v384)
                {
                  uint64_t v203 = v192;
                  unint64_t v204 = ZSTD_count_2segments(v359, (char *)(v185 + v198 + 4), v6, (char *)(v185 + v188), (void *)(v184 + v188));
                  uint64_t v192 = v203;
                  int v18 = v382;
                  unint64_t v17 = v377;
                  unint64_t v6 = v378;
                  unint64_t v174 = v204 + 4;
                  if (v204 + 4 > v201) {
                    goto LABEL_292;
                  }
                }
LABEL_293:
                if (v202 <= v192) {
                  goto LABEL_353;
                }
                if (!--v200)
                {
                  unint64_t v174 = v201;
                  goto LABEL_356;
                }
                unsigned int v198 = *(_DWORD *)(v181 + 4 * (v202 & v199));
                unint64_t v174 = v201;
                if (v198 < v191)
                {
LABEL_356:
                  LODWORD(v8) = v331;
                  unsigned int v138 = v335;
                  unint64_t v136 = v347;
                  if (v174 < 4) {
                    goto LABEL_400;
                  }
                  goto LABEL_357;
                }
              }
              uint64_t v205 = (void *)(v184 + v198);
              if (*((unsigned __int8 *)v205 + v201) != v384[v201]) {
                goto LABEL_293;
              }
              if (v17 <= (unint64_t)v384)
              {
                uint64_t v207 = v384;
                if ((unint64_t)v384 >= v376) {
                  goto LABEL_283;
                }
              }
              else
              {
                unint64_t v206 = *v205 ^ v327;
                if (v206)
                {
                  unint64_t v174 = __clz(__rbit64(v206)) >> 3;
                  if (v174 <= v201) {
                    goto LABEL_293;
                  }
                  goto LABEL_292;
                }
                unint64_t v208 = 0;
                while (1)
                {
                  uint64_t v207 = &v18[v208 + 9];
                  if ((unint64_t)v207 >= v17) {
                    break;
                  }
                  uint64_t v209 = *(void *)(v322 + v202 + v208);
                  v208 += 8;
                  unint64_t v210 = *(void *)v207 ^ v209;
                  if (v210)
                  {
                    unint64_t v174 = v208 + (__clz(__rbit64(v210)) >> 3);
                    if (v174 <= v201) {
                      goto LABEL_293;
                    }
LABEL_292:
                    uint64_t v380 = v353 - v202;
                    unint64_t v201 = v174;
                    if (&v384[v174] != (unsigned __int8 *)v6) {
                      goto LABEL_293;
                    }
                    goto LABEL_356;
                  }
                }
                uint64_t v205 = (void *)(v322 + v202 + v208);
                if ((unint64_t)v207 >= v376)
                {
LABEL_283:
                  if ((unint64_t)v207 >= v375)
                  {
                    if ((unint64_t)v207 >= v6) {
                      goto LABEL_291;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v205 == *(unsigned __int16 *)v207)
                    {
                      v207 += 2;
                      uint64_t v205 = (void *)((char *)v205 + 2);
                    }
                    if ((unint64_t)v207 >= v6)
                    {
LABEL_291:
                      unint64_t v174 = v207 - v384;
                      if (v174 <= v201) {
                        goto LABEL_293;
                      }
                      goto LABEL_292;
                    }
                  }
                  if (*(unsigned __int8 *)v205 == *v207) {
                    ++v207;
                  }
                  goto LABEL_291;
                }
              }
              if (*(_DWORD *)v205 == *(_DWORD *)v207)
              {
                v207 += 4;
                uint64_t v205 = (void *)((char *)v205 + 4);
              }
              goto LABEL_283;
            }
LABEL_405:
            unsigned int v138 = v335;
            LODWORD(v137) = v339;
            unint64_t v120 = v343;
            unint64_t v136 = v347;
            if (!v339) {
              goto LABEL_375;
            }
            goto LABEL_361;
          }
          uint64_t v211 = *(void *)(v12 + 64);
          int v212 = *(_DWORD *)(v12 + 196);
          unsigned int v213 = 1 << v212;
          uint64_t v215 = *(void *)(v12 + 8);
          uint64_t v214 = *(void *)(v12 + 16);
          unsigned int v216 = v384 - v215;
          unsigned int v217 = 1 << *(_DWORD *)(v12 + 192);
          uint64_t v218 = *(unsigned int *)(v12 + 24);
          uint64_t v219 = *(unsigned int *)(v12 + 36);
          if ((int)v384 - (int)v215 - *(_DWORD *)(v12 + 28) > v217 && *(_DWORD *)(v12 + 32) == 0) {
            unsigned int v221 = v384 - v215 - v217;
          }
          else {
            unsigned int v221 = *(_DWORD *)(v12 + 28);
          }
          if (v216 >= v213) {
            uint64_t v222 = v216 - v213;
          }
          else {
            uint64_t v222 = 0;
          }
          uint64_t v223 = *(void *)(v12 + 48);
          int v224 = *(_DWORD *)(v12 + 204);
          int v225 = 32 - *(_DWORD *)(v12 + 200);
          if (v219 < v216)
          {
            int v226 = ~(-1 << v212);
            do
            {
              uint64_t v227 = 4 * ((-1640531535 * *(_DWORD *)(v215 + v219)) >> v225);
              *(_DWORD *)(v211 + 4 * (v219 & v226)) = *(_DWORD *)(v223 + v227);
              *(_DWORD *)(v223 + v227) = v219++;
            }
            while (v372 - v215 != v219);
          }
          *(_DWORD *)(v12 + 36) = v216;
          int v228 = *(_DWORD *)v384;
          unsigned int v229 = *(_DWORD *)(v223 + 4 * ((-1640531535 * *(_DWORD *)v384) >> v225));
          if (v229 < v221)
          {
LABEL_404:
            LODWORD(v8) = v331;
            goto LABEL_405;
          }
          uint64_t v230 = v213 - 1;
          uint64_t v370 = (void *)(v215 + v218);
          uint64_t v365 = (char *)(v214 + v218);
          int v231 = 1 << v224;
          unsigned int v360 = v18 + 5;
          unsigned int v354 = v216 + 2;
          uint64_t v323 = v215 + 8;
          uint64_t v380 = 999999999;
          unint64_t v201 = 3;
          uint64_t v328 = v214;
          while (2)
          {
            uint64_t v232 = v229;
            if (v229 < v218)
            {
              if (*(_DWORD *)(v214 + v229) != v228) {
                goto LABEL_342;
              }
              uint64_t v233 = v222;
              uint64_t v234 = v218;
              uint64_t v235 = v230;
              unint64_t v236 = ZSTD_count_2segments(v360, (char *)(v214 + v229 + 4), v6, v365, v370);
              uint64_t v214 = v328;
              uint64_t v230 = v235;
              uint64_t v218 = v234;
              uint64_t v222 = v233;
              int v18 = v382;
              unint64_t v17 = v377;
              unint64_t v6 = v378;
              unint64_t v174 = v236 + 4;
              if (v236 + 4 <= v201) {
                goto LABEL_342;
              }
LABEL_341:
              uint64_t v380 = v354 - v232;
              unint64_t v201 = v174;
              if (&v384[v174] == (unsigned __int8 *)v6) {
                goto LABEL_356;
              }
              goto LABEL_342;
            }
            unint64_t v237 = (_DWORD *)(v215 + v229);
            if (*((unsigned __int8 *)v237 + v201) == v384[v201])
            {
              if (v17 <= (unint64_t)v384)
              {
                unsigned int v239 = v384;
                if ((unint64_t)v384 < v376)
                {
LABEL_330:
                  if (*v237 == *(_DWORD *)v239)
                  {
                    v239 += 4;
                    ++v237;
                  }
                }
              }
              else
              {
                unint64_t v238 = *(void *)v384 ^ *(void *)v237;
                if (v238)
                {
                  unint64_t v174 = __clz(__rbit64(v238)) >> 3;
                  if (v174 > v201) {
                    goto LABEL_341;
                  }
                  goto LABEL_342;
                }
                unint64_t v240 = 0;
                while (1)
                {
                  unsigned int v239 = &v18[v240 + 9];
                  if ((unint64_t)v239 >= v17) {
                    break;
                  }
                  uint64_t v241 = *(void *)(v323 + v232 + v240);
                  v240 += 8;
                  unint64_t v242 = *(void *)v239 ^ v241;
                  if (v242)
                  {
                    unint64_t v174 = v240 + (__clz(__rbit64(v242)) >> 3);
                    if (v174 > v201) {
                      goto LABEL_341;
                    }
                    goto LABEL_342;
                  }
                }
                unint64_t v237 = (_DWORD *)(v323 + v232 + v240);
                if ((unint64_t)v239 < v376) {
                  goto LABEL_330;
                }
              }
              if ((unint64_t)v239 >= v375)
              {
                if ((unint64_t)v239 < v6) {
                  goto LABEL_338;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v237 == *(unsigned __int16 *)v239)
                {
                  v239 += 2;
                  unint64_t v237 = (_DWORD *)((char *)v237 + 2);
                }
                if ((unint64_t)v239 >= v6) {
                  goto LABEL_340;
                }
LABEL_338:
                if (*(unsigned __int8 *)v237 == *v239) {
                  ++v239;
                }
              }
LABEL_340:
              unint64_t v174 = v239 - v384;
              if (v174 > v201) {
                goto LABEL_341;
              }
            }
LABEL_342:
            if (v232 <= v222 || (--v231, !v231))
            {
LABEL_353:
              unint64_t v174 = v201;
              LODWORD(v8) = v331;
              unsigned int v138 = v335;
              unint64_t v136 = v347;
              if (v201 >= 4) {
                goto LABEL_357;
              }
LABEL_400:
              uint64_t v12 = a1;
              uint64_t v7 = v330;
              LODWORD(v137) = v339;
              unint64_t v120 = v343;
              if (!v339)
              {
LABEL_375:
                unint64_t v250 = v317;
                uint64_t v249 = a2;
                uint64_t v10 = v333;
                int v16 = v324;
                unsigned int v15 = v325;
                uint64_t v251 = v316;
                unint64_t v254 = v136 - v138;
                uint64_t v255 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v136 <= v317) {
                  goto LABEL_376;
                }
LABEL_389:
                if ((unint64_t)v138 <= v250)
                {
                  unsigned int v263 = (char *)v255 + v250 - (void)v138;
                  unsigned int v264 = v138;
                  uint64_t v265 = v255;
                  do
                  {
                    long long v266 = *(_OWORD *)v264;
                    v264 += 16;
                    *v265++ = v266;
                  }
                  while (v265 < (_OWORD *)v263);
                  int v262 = (_OWORD *)v250;
                  if (v250 >= (unint64_t)v136) {
                    goto LABEL_419;
                  }
                }
                else
                {
                  int v262 = v138;
                  unsigned int v263 = v255;
                  if (v138 >= v136)
                  {
LABEL_419:
                    *(void *)(v249 + 24) += v254;
                    uint64_t v261 = *(void *)(v249 + 8);
                    if (v254 >= 0x10000)
                    {
                      unint64_t v280 = (unint64_t)(v261 - *(void *)v249) >> 3;
                      *(_DWORD *)(v249 + 72) = 1;
                      *(_DWORD *)(v249 + 76) = v280;
                    }
                    goto LABEL_421;
                  }
                }
                if ((unint64_t)v138 <= v250) {
                  int v267 = (unsigned __int8 *)v250;
                }
                else {
                  int v267 = v138;
                }
                unint64_t v268 = v136 - v267;
                if ((unint64_t)(v136 - v267) < 8)
                {
                  uint64_t v269 = (unsigned __int8 *)v262;
                  goto LABEL_418;
                }
                if ((unint64_t)((char *)v255 - (char *)v138) < 0x20)
                {
                  uint64_t v269 = (unsigned __int8 *)v262;
                  goto LABEL_418;
                }
                if (v268 >= 0x20)
                {
                  unint64_t v270 = v268 & 0xFFFFFFFFFFFFFFE0;
                  int v271 = v262 + 1;
                  unsigned int v272 = (_OWORD *)((char *)v255 + v267 - v138 + 16);
                  unint64_t v273 = v268 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v274 = *v271;
                    *(v272 - 1) = *(v271 - 1);
                    *unsigned int v272 = v274;
                    v271 += 2;
                    v272 += 2;
                    v273 -= 32;
                  }
                  while (v273);
                  if (v268 == v270) {
                    goto LABEL_419;
                  }
                  if ((v268 & 0x18) == 0)
                  {
                    uint64_t v269 = (unsigned __int8 *)v262 + v270;
                    v263 += v270;
                    do
                    {
LABEL_418:
                      char v279 = *v269++;
                      *v263++ = v279;
                    }
                    while (v269 < v136);
                    goto LABEL_419;
                  }
                }
                else
                {
                  unint64_t v270 = 0;
                }
                v263 += v268 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v269 = (unsigned __int8 *)v262 + (v268 & 0xFFFFFFFFFFFFFFF8);
                unsigned int v275 = (uint64_t *)((char *)v262 + v270);
                unsigned int v276 = (void *)((char *)v255 + &v267[v270] - v138);
                unint64_t v277 = v270 - (v268 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v278 = *v275++;
                  *v276++ = v278;
                  v277 += 8;
                }
                while (v277);
                if (v268 == (v268 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_419;
                }
                goto LABEL_418;
              }
              goto LABEL_361;
            }
            unsigned int v229 = *(_DWORD *)(v211 + 4 * (v232 & v230));
            unint64_t v174 = v201;
            if (v229 < v221) {
              goto LABEL_356;
            }
            continue;
          }
        }
        uint64_t v148 = *(void *)(v12 + 64);
        int v149 = *(_DWORD *)(v12 + 196);
        unsigned int v150 = 1 << v149;
        uint64_t v151 = *(void *)(v12 + 8);
        uint64_t v152 = *(void *)(v12 + 16);
        unsigned int v153 = v384 - v151;
        unsigned int v154 = 1 << *(_DWORD *)(v12 + 192);
        uint64_t v155 = *(unsigned int *)(v12 + 24);
        uint64_t v156 = *(unsigned int *)(v12 + 36);
        if ((int)v384 - (int)v151 - *(_DWORD *)(v12 + 28) > v154 && *(_DWORD *)(v12 + 32) == 0) {
          unsigned int v158 = v384 - v151 - v154;
        }
        else {
          unsigned int v158 = *(_DWORD *)(v12 + 28);
        }
        if (v153 >= v150) {
          unsigned int v159 = v153 - v150;
        }
        else {
          unsigned int v159 = 0;
        }
        uint64_t v160 = *(void *)(v12 + 48);
        int v161 = *(_DWORD *)(v12 + 204);
        int v162 = 64 - *(_DWORD *)(v12 + 200);
        if (v156 < v153)
        {
          int v163 = ~(-1 << v149);
          do
          {
            unint64_t v164 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v151 + v156)) >> v162);
            *(_DWORD *)(v148 + 4 * (v156 & v163)) = *(_DWORD *)(v160 + v164);
            *(_DWORD *)(v160 + v164) = v156++;
          }
          while (v372 - v151 != v156);
        }
        *(_DWORD *)(v12 + 36) = v153;
        uint64_t v326 = *(void *)v384;
        unsigned int v165 = *(_DWORD *)(v160 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v384) >> v162));
        if (v165 < v158) {
          goto LABEL_404;
        }
        uint64_t v166 = v150 - 1;
        uint64_t v369 = (void *)(v151 + v155);
        unint64_t v352 = (char *)(v152 + v155);
        int v167 = 1 << v161;
        unint64_t v364 = v18 + 5;
        unsigned int v358 = v153 + 2;
        uint64_t v321 = v151 + 8;
        uint64_t v380 = 999999999;
        unint64_t v168 = 3;
        while (2)
        {
          uint64_t v169 = v165;
          if (v165 < v155)
          {
            if (*(_DWORD *)(v152 + v165) != *(_DWORD *)v384) {
              goto LABEL_245;
            }
            uint64_t v170 = v155;
            uint64_t v171 = v148;
            uint64_t v172 = v166;
            unint64_t v173 = ZSTD_count_2segments(v364, (char *)(v152 + v165 + 4), v6, v352, v369);
            uint64_t v166 = v172;
            uint64_t v148 = v171;
            uint64_t v155 = v170;
            int v18 = v382;
            unint64_t v17 = v377;
            unint64_t v6 = v378;
            unint64_t v174 = v173 + 4;
            if (v173 + 4 <= v168) {
              goto LABEL_245;
            }
            goto LABEL_244;
          }
          unsigned int v175 = (_DWORD *)(v151 + v165);
          if (*((unsigned __int8 *)v175 + v168) != v384[v168]) {
            goto LABEL_245;
          }
          if (v17 <= (unint64_t)v384)
          {
            uint64_t v177 = v384;
            if ((unint64_t)v384 < v376)
            {
LABEL_233:
              if (*v175 == *(_DWORD *)v177)
              {
                v177 += 4;
                ++v175;
              }
            }
            goto LABEL_235;
          }
          unint64_t v176 = *(void *)v175 ^ v326;
          if (!v176)
          {
            unint64_t v178 = 0;
            while (1)
            {
              uint64_t v177 = &v18[v178 + 9];
              if ((unint64_t)v177 >= v17) {
                break;
              }
              uint64_t v179 = *(void *)(v321 + v169 + v178);
              v178 += 8;
              unint64_t v180 = *(void *)v177 ^ v179;
              if (v180)
              {
                unint64_t v174 = v178 + (__clz(__rbit64(v180)) >> 3);
                if (v174 > v168) {
                  goto LABEL_244;
                }
                goto LABEL_245;
              }
            }
            unsigned int v175 = (_DWORD *)(v321 + v169 + v178);
            if ((unint64_t)v177 < v376) {
              goto LABEL_233;
            }
LABEL_235:
            if ((unint64_t)v177 >= v375)
            {
              if ((unint64_t)v177 >= v6) {
                goto LABEL_243;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v175 == *(unsigned __int16 *)v177)
              {
                v177 += 2;
                unsigned int v175 = (_DWORD *)((char *)v175 + 2);
              }
              if ((unint64_t)v177 >= v6)
              {
LABEL_243:
                unint64_t v174 = v177 - v384;
                if (v174 <= v168) {
                  goto LABEL_245;
                }
                goto LABEL_244;
              }
            }
            if (*(unsigned __int8 *)v175 == *v177) {
              ++v177;
            }
            goto LABEL_243;
          }
          unint64_t v174 = __clz(__rbit64(v176)) >> 3;
          if (v174 <= v168) {
            goto LABEL_245;
          }
LABEL_244:
          uint64_t v380 = v358 - v169;
          unint64_t v168 = v174;
          if (&v384[v174] == (unsigned __int8 *)v6) {
            goto LABEL_356;
          }
LABEL_245:
          if (v169 > v159)
          {
            if (--v167)
            {
              unsigned int v165 = *(_DWORD *)(v148 + 4 * (v169 & v166));
              unint64_t v174 = v168;
              if (v165 < v158) {
                goto LABEL_356;
              }
              continue;
            }
          }
          break;
        }
        unint64_t v174 = v168;
        LODWORD(v8) = v331;
        unsigned int v138 = v335;
        unint64_t v136 = v347;
        if (v168 < 4) {
          goto LABEL_400;
        }
LABEL_357:
        uint64_t v137 = v339;
        unint64_t v120 = v343;
        uint64_t v12 = a1;
        uint64_t v7 = v330;
        if ((int)((__clz(v380 + 1) ^ 0xFFFFFFE0) + 4 * v174 + 1) > (int)((__clz(v339 + 1) ^ 0xFFFFFFE0) + 4 * v343 + 5))
        {
          ++v372;
          int v18 = v384;
          unint64_t v120 = v174;
          unint64_t v136 = v384;
          uint64_t v137 = v380;
          if (v384 == (unsigned __int8 *)v320)
          {
            uint64_t v137 = v380;
            unint64_t v136 = (unsigned __int8 *)v320;
            unint64_t v120 = v174;
            break;
          }
          continue;
        }
        break;
      }
      if (!v137) {
        goto LABEL_375;
      }
LABEL_361:
      unsigned int v243 = v136 - (v137 + v7) + 2;
      if (v8 <= v243) {
        uint64_t v244 = v7;
      }
      else {
        uint64_t v244 = v374;
      }
      unint64_t v245 = v319;
      if (v8 > v243) {
        unint64_t v245 = v315;
      }
      if (v136 > v138)
      {
        uint64_t v246 = (v136 - (v137 + v7) + 2);
        if (v244 + v246 > (unint64_t)v245)
        {
          unint64_t v247 = (unsigned __int8 *)(v244 + v246 - 1);
          uint64_t v248 = v136 - 1;
          unint64_t v250 = v317;
          uint64_t v249 = a2;
          int v16 = v324;
          unsigned int v15 = v325;
          uint64_t v251 = v316;
          while (*v248 == *v247)
          {
            ++v120;
            BOOL v252 = v248 - 1;
            if (v248 > v138)
            {
              --v248;
              if (v247-- > v245) {
                continue;
              }
            }
            unint64_t v136 = v252 + 1;
            unsigned int v334 = v333;
            uint64_t v10 = (v137 - 2);
            unint64_t v254 = v252 + 1 - v138;
            uint64_t v255 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v252 + 1) <= v317) {
              goto LABEL_376;
            }
            goto LABEL_389;
          }
          unint64_t v136 = v248 + 1;
          unsigned int v334 = v333;
          uint64_t v10 = (v137 - 2);
          unint64_t v254 = v248 + 1 - v138;
          uint64_t v255 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v136 <= v317) {
            goto LABEL_376;
          }
          goto LABEL_389;
        }
      }
      unint64_t v250 = v317;
      uint64_t v249 = a2;
      int v16 = v324;
      unsigned int v15 = v325;
      uint64_t v251 = v316;
      unsigned int v334 = v333;
      uint64_t v10 = (v137 - 2);
      unint64_t v254 = v136 - v138;
      uint64_t v255 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v136 > v317) {
        goto LABEL_389;
      }
LABEL_376:
      *uint64_t v255 = *(_OWORD *)v138;
      uint64_t v256 = *(void *)(v249 + 24);
      if (v254 > 0x10)
      {
        unint64_t v257 = (_OWORD *)(v256 + 16);
        unint64_t v258 = v256 + v254;
        unsigned int v259 = (long long *)(v138 + 16);
        do
        {
          long long v260 = *v259++;
          *v257++ = v260;
        }
        while ((unint64_t)v257 < v258);
        goto LABEL_419;
      }
      *(void *)(v249 + 24) = v256 + v254;
      uint64_t v261 = *(void *)(v249 + 8);
LABEL_421:
      *(_WORD *)(v261 + 4) = v254;
      *(_DWORD *)uint64_t v261 = v137 + 1;
      if (v120 - 3 >= 0x10000)
      {
        unint64_t v281 = (unint64_t)(v261 - *(void *)v249) >> 3;
        *(_DWORD *)(v249 + 72) = 2;
        *(_DWORD *)(v249 + 76) = v281;
      }
      *(_WORD *)(v261 + 6) = v120 - 3;
      uint64_t v282 = v261 + 8;
      *(void *)(v249 + 8) = v261 + 8;
      unint64_t v5 = &v136[v120];
      if ((unint64_t)v5 > v348)
      {
        int v18 = v5;
        goto LABEL_7;
      }
      uint64_t v283 = v10;
      uint64_t v284 = v334;
      while (2)
      {
        uint64_t v10 = v284;
        uint64_t v284 = v283;
        unsigned int v285 = *(_DWORD *)(v12 + 28);
        if (v5 - v7 - v285 > v15 && *(_DWORD *)(v12 + 32) == 0) {
          unsigned int v285 = v5 - v7 - v15;
        }
        uint64_t v287 = (v5 - v7 - v10);
        if (v287 >= v8) {
          uint64_t v288 = v7;
        }
        else {
          uint64_t v288 = v374;
        }
        if ((v16 - v287) >= 3 && v287 > v285)
        {
          uint64_t v289 = v288 + v287;
          if (*(_DWORD *)v5 == *(_DWORD *)(v288 + v287))
          {
            if (v287 >= v8) {
              uint64_t v290 = (void *)v6;
            }
            else {
              uint64_t v290 = v332;
            }
            unsigned int v291 = (char *)(v5 + 4);
            unsigned int v292 = (void *)(v289 + 4);
            unsigned int v293 = (char *)v290 + (void)v5 - v289;
            if ((unint64_t)v293 >= v6) {
              unsigned int v293 = (char *)v6;
            }
            if (v293 - 7 <= v291)
            {
              uint64_t v297 = (char *)(v5 + 4);
              int v298 = v292;
              if (v291 < v293 - 3)
              {
LABEL_450:
                if (*v298 == *(_DWORD *)v297)
                {
                  v297 += 4;
                  ++v298;
                }
              }
            }
            else
            {
              unint64_t v294 = *(void *)v291 ^ *v292;
              if (v294)
              {
                unint64_t v295 = __clz(__rbit64(v294)) >> 3;
                if ((void *)((char *)v292 + v295) != v290) {
                  goto LABEL_446;
                }
LABEL_461:
                unsigned int v299 = &v291[v295];
                if (v17 <= (unint64_t)v299)
                {
                  unsigned int v305 = (unsigned __int8 *)v299;
                  unsigned int v306 = v319;
                  if ((unint64_t)v299 < v376)
                  {
LABEL_471:
                    if (*(_DWORD *)v306 == *(_DWORD *)v305)
                    {
                      v305 += 4;
                      v306 += 4;
                    }
                  }
                }
                else
                {
                  unint64_t v300 = *(void *)v299 ^ *(void *)v319;
                  if (v300)
                  {
                    v295 += __clz(__rbit64(v300)) >> 3;
                    if ((unint64_t)v5 > v250) {
                      goto LABEL_447;
                    }
LABEL_482:
                    *(_OWORD *)*(void *)(v249 + 24) = *(_OWORD *)v5;
                    uint64_t v282 = *(void *)(v249 + 8);
                    __int16 v296 = v295 + 1;
                    *(_WORD *)(v282 + 4) = 0;
                    *(_DWORD *)uint64_t v282 = 1;
                    if (v295 + 1 >= 0x10000)
                    {
LABEL_483:
                      unint64_t v307 = (unint64_t)(v282 - *(void *)v249) >> 3;
                      *(_DWORD *)(v249 + 72) = 2;
                      *(_DWORD *)(v249 + 76) = v307;
                    }
LABEL_426:
                    *(_WORD *)(v282 + 6) = v296;
                    v282 += 8;
                    v5 += v295 + 4;
                    *(void *)(v249 + 8) = v282;
                    uint64_t v283 = v10;
                    unsigned int v334 = v284;
                    int v18 = v5;
                    if ((unint64_t)v5 > v348) {
                      goto LABEL_7;
                    }
                    continue;
                  }
                  uint64_t v308 = 0;
                  uint64_t v309 = (uint64_t)&v5[v295 + 12];
                  while (1)
                  {
                    unsigned int v310 = (void *)(v309 + v308);
                    if (v309 + v308 >= v17) {
                      break;
                    }
                    uint64_t v311 = *(void *)(v251 + v308);
                    v308 += 8;
                    unint64_t v312 = *v310 ^ v311;
                    if (v312)
                    {
                      v295 += v308 + (__clz(__rbit64(v312)) >> 3);
                      if ((unint64_t)v5 <= v250) {
                        goto LABEL_482;
                      }
                      goto LABEL_447;
                    }
                  }
                  unsigned int v305 = &v5[v295 + 12 + v308];
                  unsigned int v306 = (unsigned __int8 *)(v251 + v308);
                  if ((unint64_t)v305 < v376) {
                    goto LABEL_471;
                  }
                }
                if ((unint64_t)v305 >= v375)
                {
                  if ((unint64_t)v305 >= v6) {
                    goto LABEL_481;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v306 == *(unsigned __int16 *)v305)
                  {
                    v305 += 2;
                    v306 += 2;
                  }
                  if ((unint64_t)v305 >= v6)
                  {
LABEL_481:
                    v295 += v305 - (unsigned __int8 *)v299;
                    if ((unint64_t)v5 > v250) {
                      goto LABEL_447;
                    }
                    goto LABEL_482;
                  }
                }
                if (*v306 == *v305) {
                  ++v305;
                }
                goto LABEL_481;
              }
              unsigned int v301 = (char *)(v5 + 12);
              while (1)
              {
                uint64_t v302 = &v301[v294];
                if (&v301[v294] >= v293 - 7) {
                  break;
                }
                uint64_t v303 = *(void *)(v288 + v287 + 12 + v294);
                v294 += 8;
                unint64_t v304 = *(void *)v302 ^ v303;
                if (v304)
                {
                  unint64_t v295 = v294 + (__clz(__rbit64(v304)) >> 3);
                  if ((void *)((char *)v292 + v295) != v290) {
                    goto LABEL_446;
                  }
                  goto LABEL_461;
                }
              }
              uint64_t v297 = (char *)&v5[v294 + 12];
              int v298 = (_DWORD *)(v288 + v287 + v294 + 12);
              if (v297 < v293 - 3) {
                goto LABEL_450;
              }
            }
            if (v297 >= v293 - 1)
            {
              if (v297 >= v293) {
                goto LABEL_460;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v298 == *(unsigned __int16 *)v297)
              {
                v297 += 2;
                int v298 = (_DWORD *)((char *)v298 + 2);
              }
              if (v297 >= v293)
              {
LABEL_460:
                unint64_t v295 = v297 - v291;
                if ((void *)((char *)v292 + v297 - v291) == v290) {
                  goto LABEL_461;
                }
LABEL_446:
                if ((unint64_t)v5 <= v250) {
                  goto LABEL_482;
                }
LABEL_447:
                __int16 v296 = v295 + 1;
                *(_WORD *)(v282 + 4) = 0;
                *(_DWORD *)uint64_t v282 = 1;
                if (v295 + 1 >= 0x10000) {
                  goto LABEL_483;
                }
                goto LABEL_426;
              }
            }
            if (*(unsigned __int8 *)v298 == *v297) {
              ++v297;
            }
            goto LABEL_460;
          }
        }
        break;
      }
      unsigned int v334 = v10;
      LODWORD(v10) = v283;
      int v18 = v5;
LABEL_7:
      if ((unint64_t)v18 >= v348)
      {
        a3 = v314;
        unsigned int v9 = v334;
        break;
      }
    }
  }
  *a3 = v10;
  a3[1] = v9;
  return v6 - (void)v5;
}

unint64_t ZSTD_compressBlock_lazy2_extDict(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = (unint64_t)&a4[a5];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  LODWORD(v9) = *a3;
  LODWORD(v10) = a3[1];
  unint64_t v455 = (unsigned __int8 *)(v7 + v8);
  if ((unsigned __int8 *)(v7 + v8) == a4) {
    unint64_t v11 = a4 + 1;
  }
  else {
    unint64_t v11 = a4;
  }
  if ((unint64_t)v11 < v6 - 8)
  {
    uint64_t v12 = a1;
    uint64_t v13 = *(void *)(a1 + 16);
    uint64_t v478 = (char *)(v13 + v8);
    uint64_t v524 = v13;
    uint64_t v446 = (unsigned __int8 *)(v13 + *(unsigned int *)(a1 + 28));
    int v518 = v8 - 1;
    unsigned int v519 = 1 << *(_DWORD *)(a1 + 192);
    unint64_t v447 = v6 - 32;
    unint64_t v14 = v6 - 7;
    unint64_t v525 = v6 - 1;
    unint64_t v526 = v6 - 3;
    uint64_t v449 = v8 + v7 + 8;
    unint64_t v535 = v6;
    uint64_t v480 = *(void *)(a1 + 8);
    unint64_t v510 = v6 - 8;
    int v481 = *(_DWORD *)(a1 + 24);
    unint64_t v534 = v6 - 7;
    while (1)
    {
      unint64_t v16 = 0;
      unint64_t v17 = v11 + 1;
      int v520 = v11 - v7;
      int v18 = v11 - v7 + 1;
      unsigned int v19 = *(_DWORD *)(v12 + 28);
      int v20 = *(_DWORD *)(v12 + 32);
      unsigned int v21 = v18 - v519;
      if (v18 - v19 <= v519 || v20 != 0) {
        unsigned int v21 = *(_DWORD *)(v12 + 28);
      }
      uint64_t v23 = (v18 - v9);
      uint64_t v24 = v524;
      if (v23 >= v8) {
        uint64_t v24 = v7;
      }
      unint64_t v527 = v11;
      if ((v518 - v23) >= 3 && v23 > v21)
      {
        uint64_t v25 = v24 + v23;
        if (*(_DWORD *)v17 == *(_DWORD *)v25)
        {
          if (v23 >= v8) {
            uint64_t v26 = (char *)v6;
          }
          else {
            uint64_t v26 = v478;
          }
          unint64_t v27 = ZSTD_count_2segments(v11 + 5, (char *)(v25 + 4), v6, v26, v455);
          unint64_t v11 = v527;
          unint64_t v14 = v534;
          unint64_t v6 = v535;
          unint64_t v16 = v27 + 4;
        }
        else
        {
          unint64_t v16 = 0;
        }
      }
      int v28 = *(_DWORD *)(v12 + 208);
      unsigned int v509 = v9;
      unint64_t v454 = (unint64_t)v5;
      unsigned int v453 = v10;
      uint64_t v532 = v17;
      unint64_t v536 = v16;
      if ((v28 - 6) >= 2) {
        break;
      }
      int v29 = *(_DWORD *)(v12 + 196);
      unsigned int v30 = 1 << v29;
      uint64_t v32 = *(void *)(v12 + 8);
      uint64_t v31 = *(void *)(v12 + 16);
      unsigned int v33 = v11 - v32;
      unsigned int v34 = 1 << *(_DWORD *)(v12 + 192);
      BOOL v35 = v11 - v32 - v19 > v34 && v20 == 0;
      uint64_t v36 = *(void *)(v12 + 64);
      uint64_t v37 = *(unsigned int *)(v12 + 24);
      if (v35) {
        uint64_t v38 = v11 - v32 - v34;
      }
      else {
        uint64_t v38 = v19;
      }
      if (v33 >= v30) {
        uint64_t v39 = v33 - v30;
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v40 = *(void *)(v12 + 48);
      int v41 = *(_DWORD *)(v12 + 204);
      uint64_t v42 = *(unsigned int *)(v12 + 36);
      int v43 = 64 - *(_DWORD *)(v12 + 200);
      if (v42 < v33)
      {
        int v44 = ~(-1 << v29);
        do
        {
          unint64_t v45 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v32 + v42)) >> v43);
          *(_DWORD *)(v36 + 4 * (v42 & v44)) = *(_DWORD *)(v40 + v45);
          *(_DWORD *)(v40 + v45) = v42++;
        }
        while (v11 - v32 != v42);
      }
      *(_DWORD *)(v12 + 36) = v33;
      unsigned int v46 = *(_DWORD *)(v40 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v11) >> v43));
      if (v46 >= v38)
      {
        unsigned int v47 = v30 - 1;
        int v515 = (void *)(v32 + v37);
        int v511 = (char *)(v31 + v37);
        int v48 = 1 << v41;
        int v500 = v11 + 4;
        unsigned int v491 = v33 + 2;
        unsigned int v49 = v11 + 8;
        uint64_t v465 = v32 + 8;
        uint64_t v474 = *(void *)v11;
        uint64_t v539 = 999999999;
        unint64_t v50 = 3;
        int v482 = v37;
        while (1)
        {
          uint64_t v51 = v46;
          if (v46 < v37)
          {
            if (*(_DWORD *)(v31 + v46) == *(_DWORD *)v11)
            {
              uint64_t v37 = v31;
              uint64_t v52 = v39;
              uint64_t v53 = v36;
              uint64_t v54 = v32;
              uint64_t v55 = v38;
              unint64_t v56 = ZSTD_count_2segments(v500, (char *)(v31 + v46 + 4), v6, v511, v515);
              uint64_t v38 = v55;
              uint64_t v32 = v54;
              uint64_t v36 = v53;
              uint64_t v39 = v52;
              uint64_t v31 = v37;
              LODWORD(v37) = v482;
              unint64_t v11 = v527;
              unint64_t v14 = v534;
              unint64_t v6 = v535;
              unint64_t v57 = v56 + 4;
              if (v56 + 4 > v50) {
                goto LABEL_60;
              }
            }
            goto LABEL_61;
          }
          unint64_t v58 = (void *)(v32 + v46);
          if (*((unsigned __int8 *)v58 + v50) != v11[v50]) {
            goto LABEL_61;
          }
          if (v14 <= (unint64_t)v11) {
            break;
          }
          unint64_t v59 = *v58 ^ v474;
          if (v59)
          {
            unint64_t v57 = __clz(__rbit64(v59)) >> 3;
            if (v57 > v50) {
              goto LABEL_60;
            }
            goto LABEL_61;
          }
          uint64_t v61 = 0;
          do
          {
            uint64_t v60 = (unsigned __int8 *)&v49[v61];
            if ((unint64_t)&v49[v61] >= v14)
            {
              unint64_t v58 = (void *)(v465 + v51 + v61 * 8);
              if ((unint64_t)v60 >= v526) {
                goto LABEL_51;
              }
              goto LABEL_49;
            }
            uint64_t v62 = *(void *)(v465 + v51 + v61 * 8);
            ++v61;
            unint64_t v63 = *(void *)v60 ^ v62;
          }
          while (!v63);
          unint64_t v57 = v61 * 8 + (__clz(__rbit64(v63)) >> 3);
          if (v57 <= v50) {
            goto LABEL_61;
          }
LABEL_60:
          uint64_t v539 = v491 - v51;
          unint64_t v50 = v57;
          if (&v11[v57] == (unsigned __int8 *)v6) {
            goto LABEL_178;
          }
LABEL_61:
          if (v51 <= v39 || (--v48, !v48))
          {
            unint64_t v57 = v50;
            unint64_t v117 = v536;
            if (v50 <= v536) {
              unint64_t v118 = v536;
            }
            else {
              unint64_t v118 = v50;
            }
            if (v118 >= 4) {
              goto LABEL_182;
            }
LABEL_6:
            unint64_t v5 = (unsigned __int8 *)v454;
            v11 += ((uint64_t)&v11[-v454] >> 8) + 1;
            uint64_t v12 = a1;
            uint64_t v7 = v480;
            unint64_t v15 = v510;
            LODWORD(v8) = v481;
            LODWORD(v9) = v509;
            LODWORD(v10) = v453;
            goto LABEL_7;
          }
          unsigned int v46 = *(_DWORD *)(v36 + 4 * (v51 & v47));
          unint64_t v57 = v50;
          if (v46 < v38) {
            goto LABEL_178;
          }
        }
        uint64_t v60 = v11;
        if ((unint64_t)v11 >= v526) {
          goto LABEL_51;
        }
LABEL_49:
        if (*(_DWORD *)v58 == *(_DWORD *)v60)
        {
          v60 += 4;
          unint64_t v58 = (void *)((char *)v58 + 4);
        }
LABEL_51:
        if ((unint64_t)v60 >= v525)
        {
          if ((unint64_t)v60 >= v6) {
            goto LABEL_59;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v58 == *(unsigned __int16 *)v60)
          {
            v60 += 2;
            unint64_t v58 = (void *)((char *)v58 + 2);
          }
          if ((unint64_t)v60 >= v6)
          {
LABEL_59:
            unint64_t v57 = v60 - v11;
            if (v57 > v50) {
              goto LABEL_60;
            }
            goto LABEL_61;
          }
        }
        if (*(unsigned __int8 *)v58 == *v60) {
          ++v60;
        }
        goto LABEL_59;
      }
LABEL_133:
      uint64_t v539 = 999999999;
      unint64_t v57 = 3;
      unint64_t v117 = v536;
      if (v536 >= 3) {
        unint64_t v118 = v536;
      }
      else {
        unint64_t v118 = 3;
      }
      if (v118 < 4) {
        goto LABEL_6;
      }
LABEL_182:
      unint64_t v514 = v118;
      BOOL v134 = v57 > v117;
      unint64_t v135 = v532;
      if (v134) {
        unint64_t v135 = v11;
      }
      unsigned int v477 = v135;
      uint64_t v136 = v539;
      if (!v134) {
        uint64_t v136 = 0;
      }
      uint64_t v533 = v136;
      uint64_t v12 = a1;
      uint64_t v7 = v480;
      LODWORD(v8) = v481;
      if ((unint64_t)v11 >= v510)
      {
LABEL_526:
        int v370 = v533;
        if (!v533) {
          goto LABEL_555;
        }
        goto LABEL_527;
      }
LABEL_187:
      uint64_t v137 = (char *)(v11 + 1);
      int v138 = v520 + 1;
      unint64_t v528 = v11;
      uint64_t v139 = v533;
      unint64_t v537 = (char *)(v11 + 1);
      if (!v533) {
        goto LABEL_205;
      }
      if (v138 - *(_DWORD *)(v12 + 28) > v519 && *(_DWORD *)(v12 + 32) == 0) {
        unsigned int v141 = v138 - v519;
      }
      else {
        unsigned int v141 = *(_DWORD *)(v12 + 28);
      }
      uint64_t v142 = v138 - v509;
      uint64_t v143 = v524;
      if (v142 >= v8) {
        uint64_t v143 = v7;
      }
      if ((v518 - v142) < 3) {
        goto LABEL_205;
      }
      if (v142 <= v141) {
        goto LABEL_205;
      }
      uint64_t v144 = v143 + v142;
      if (*(_DWORD *)v137 != *(_DWORD *)v144) {
        goto LABEL_205;
      }
      if (v142 >= v8) {
        uint64_t v145 = (char *)v6;
      }
      else {
        uint64_t v145 = v478;
      }
      unint64_t v146 = ZSTD_count_2segments(v11 + 5, (char *)(v144 + 4), v6, v145, v455);
      if (v146 <= 0xFFFFFFFFFFFFFFFBLL)
      {
        unint64_t v14 = v534;
        unint64_t v6 = v535;
        unint64_t v11 = v528;
        uint64_t v137 = v537;
        if (3 * ((int)v146 + 4) > (int)(3 * v514 + (__clz(v533 + 1) ^ 0xFFFFFFE0) + 2))
        {
          uint64_t v139 = 0;
          unsigned int v477 = (unsigned __int8 *)v537;
          unint64_t v514 = v146 + 4;
        }
LABEL_205:
        int v147 = *(_DWORD *)(v12 + 208);
        uint64_t v533 = v139;
        int v517 = v520 + 1;
        if ((v147 - 6) < 2) {
          goto LABEL_206;
        }
        goto LABEL_255;
      }
      unint64_t v14 = v534;
      unint64_t v6 = v535;
      unint64_t v11 = v528;
      uint64_t v137 = v537;
      int v147 = *(_DWORD *)(v12 + 208);
      int v517 = v520 + 1;
      if ((v147 - 6) < 2)
      {
LABEL_206:
        uint64_t v148 = *(void *)(v12 + 64);
        int v149 = *(_DWORD *)(v12 + 196);
        unsigned int v150 = 1 << v149;
        uint64_t v152 = *(void *)(v12 + 8);
        uint64_t v151 = *(void *)(v12 + 16);
        unsigned int v153 = v137 - v152;
        unsigned int v154 = 1 << *(_DWORD *)(v12 + 192);
        uint64_t v155 = *(unsigned int *)(v12 + 24);
        uint64_t v156 = *(unsigned int *)(v12 + 36);
        if ((int)v137 - (int)v152 - *(_DWORD *)(v12 + 28) > v154 && *(_DWORD *)(v12 + 32) == 0) {
          unsigned int v158 = v137 - v152 - v154;
        }
        else {
          unsigned int v158 = *(_DWORD *)(v12 + 28);
        }
        if (v153 >= v150) {
          uint64_t v159 = v153 - v150;
        }
        else {
          uint64_t v159 = 0;
        }
        uint64_t v160 = *(void *)(v12 + 48);
        int v161 = *(_DWORD *)(v12 + 204);
        int v162 = 64 - *(_DWORD *)(v12 + 200);
        if (v156 < v153)
        {
          int v163 = ~(-1 << v149);
          do
          {
            unint64_t v164 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v152 + v156)) >> v162);
            *(_DWORD *)(v148 + 4 * (v156 & v163)) = *(_DWORD *)(v160 + v164);
            *(_DWORD *)(v160 + v164) = v156++;
          }
          while (v137 - v152 != v156);
        }
        *(_DWORD *)(v12 + 36) = v153;
        uint64_t v165 = *(void *)v137;
        unsigned int v166 = *(_DWORD *)(v160 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v137) >> v162));
        if (v166 < v158) {
          goto LABEL_353;
        }
        uint64_t v167 = v150 - 1;
        unsigned int v503 = (void *)(v152 + v155);
        int v494 = (char *)(v151 + v155);
        int v168 = 1 << v161;
        uint64_t v485 = v11 + 5;
        unsigned int v468 = v153 + 2;
        uint64_t v169 = (char *)(v11 + 9);
        uint64_t v450 = v152 + 8;
        uint64_t v540 = 999999999;
        unint64_t v170 = 3;
        uint64_t v456 = v148;
        uint64_t v459 = v151;
        while (2)
        {
          uint64_t v171 = v166;
          if (v166 < v155)
          {
            if (*(_DWORD *)(v151 + v166) != *(_DWORD *)v137) {
              goto LABEL_242;
            }
            uint64_t v172 = v165;
            uint64_t v173 = v159;
            uint64_t v174 = v167;
            uint64_t v175 = v155;
            unint64_t v176 = ZSTD_count_2segments(v485, (char *)(v151 + v166 + 4), v6, v494, v503);
            uint64_t v155 = v175;
            uint64_t v167 = v174;
            uint64_t v159 = v173;
            uint64_t v165 = v172;
            uint64_t v148 = v456;
            uint64_t v151 = v459;
            unint64_t v6 = v535;
            uint64_t v137 = v537;
            unint64_t v11 = v528;
            unint64_t v14 = v534;
            unint64_t v177 = v176 + 4;
            if (v176 + 4 <= v170) {
              goto LABEL_242;
            }
LABEL_241:
            uint64_t v540 = v468 - v171;
            unint64_t v170 = v177;
            if (&v137[v177] == (char *)v6) {
              goto LABEL_351;
            }
            goto LABEL_242;
          }
          unint64_t v178 = (_DWORD *)(v152 + v166);
          if (*((unsigned __int8 *)v178 + v170) == v137[v170])
          {
            if (v14 <= (unint64_t)v137)
            {
              unint64_t v180 = v137;
              if ((unint64_t)v137 < v526)
              {
LABEL_230:
                if (*v178 == *(_DWORD *)v180)
                {
                  v180 += 4;
                  ++v178;
                }
              }
            }
            else
            {
              unint64_t v179 = *(void *)v178 ^ v165;
              if (v179)
              {
                unint64_t v177 = __clz(__rbit64(v179)) >> 3;
                if (v177 > v170) {
                  goto LABEL_241;
                }
                goto LABEL_242;
              }
              uint64_t v181 = 0;
              while (1)
              {
                unint64_t v180 = &v169[v181];
                if ((unint64_t)&v169[v181] >= v14) {
                  break;
                }
                uint64_t v182 = *(void *)(v450 + v171 + v181);
                v181 += 8;
                unint64_t v183 = *(void *)v180 ^ v182;
                if (v183)
                {
                  unint64_t v177 = v181 + (__clz(__rbit64(v183)) >> 3);
                  if (v177 > v170) {
                    goto LABEL_241;
                  }
                  goto LABEL_242;
                }
              }
              unint64_t v178 = (_DWORD *)(v450 + v171 + v181);
              if ((unint64_t)v180 < v526) {
                goto LABEL_230;
              }
            }
            if ((unint64_t)v180 >= v525)
            {
              if ((unint64_t)v180 < v6) {
                goto LABEL_238;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v178 == *(unsigned __int16 *)v180)
              {
                v180 += 2;
                unint64_t v178 = (_DWORD *)((char *)v178 + 2);
              }
              if ((unint64_t)v180 >= v6) {
                goto LABEL_240;
              }
LABEL_238:
              if (*(unsigned __int8 *)v178 == *v180) {
                ++v180;
              }
            }
LABEL_240:
            unint64_t v177 = v180 - v137;
            if (v177 > v170) {
              goto LABEL_241;
            }
          }
LABEL_242:
          if (v171 <= v159 || (--v168, !v168))
          {
            unint64_t v177 = v170;
            goto LABEL_351;
          }
          unsigned int v166 = *(_DWORD *)(v148 + 4 * (v171 & v167));
          unint64_t v177 = v170;
          if (v166 < v158) {
            goto LABEL_351;
          }
          continue;
        }
      }
LABEL_255:
      if (v147 == 5)
      {
        uint64_t v184 = *(void *)(v12 + 64);
        int v185 = *(_DWORD *)(v12 + 196);
        unsigned int v186 = 1 << v185;
        uint64_t v187 = *(void *)(v12 + 8);
        uint64_t v188 = *(void *)(v12 + 16);
        unsigned int v189 = v137 - v187;
        unsigned int v190 = 1 << *(_DWORD *)(v12 + 192);
        uint64_t v191 = *(unsigned int *)(v12 + 24);
        uint64_t v192 = *(unsigned int *)(v12 + 36);
        if ((int)v137 - (int)v187 - *(_DWORD *)(v12 + 28) > v190 && *(_DWORD *)(v12 + 32) == 0) {
          unsigned int v194 = v137 - v187 - v190;
        }
        else {
          unsigned int v194 = *(_DWORD *)(v12 + 28);
        }
        if (v189 >= v186) {
          uint64_t v195 = v189 - v186;
        }
        else {
          uint64_t v195 = 0;
        }
        uint64_t v196 = *(void *)(v12 + 48);
        int v197 = *(_DWORD *)(v12 + 204);
        int v198 = 64 - *(_DWORD *)(v12 + 200);
        if (v192 < v189)
        {
          int v199 = ~(-1 << v185);
          do
          {
            unint64_t v200 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v187 + v192)) >> v198);
            *(_DWORD *)(v184 + 4 * (v192 & v199)) = *(_DWORD *)(v196 + v200);
            *(_DWORD *)(v196 + v200) = v192++;
          }
          while (v137 - v187 != v192);
        }
        *(_DWORD *)(v12 + 36) = v189;
        uint64_t v201 = *(void *)v137;
        unsigned int v202 = *(_DWORD *)(v196 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v137) >> v198));
        if (v202 < v194) {
          goto LABEL_353;
        }
        uint64_t v203 = v186 - 1;
        unsigned int v504 = (void *)(v187 + v191);
        uint64_t v495 = (char *)(v188 + v191);
        int v204 = 1 << v197;
        unint64_t v486 = v11 + 5;
        unsigned int v469 = v189 + 2;
        uint64_t v205 = (char *)(v11 + 9);
        uint64_t v451 = v187 + 8;
        uint64_t v540 = 999999999;
        unint64_t v206 = 3;
        uint64_t v457 = v187;
        uint64_t v460 = v184;
        while (1)
        {
          uint64_t v207 = v202;
          if (v202 < v191)
          {
            if (*(_DWORD *)(v188 + v202) != *(_DWORD *)v137) {
              goto LABEL_292;
            }
            uint64_t v208 = v201;
            uint64_t v209 = v195;
            uint64_t v210 = v191;
            uint64_t v211 = v203;
            unint64_t v212 = v206;
            unint64_t v213 = ZSTD_count_2segments(v486, (char *)(v188 + v202 + 4), v6, v495, v504);
            unint64_t v206 = v212;
            uint64_t v203 = v211;
            uint64_t v191 = v210;
            uint64_t v195 = v209;
            uint64_t v201 = v208;
            uint64_t v187 = v457;
            uint64_t v184 = v460;
            unint64_t v6 = v535;
            uint64_t v137 = v537;
            unint64_t v11 = v528;
            unint64_t v14 = v534;
            unint64_t v177 = v213 + 4;
            if (v213 + 4 <= v206) {
              goto LABEL_292;
            }
            goto LABEL_291;
          }
          uint64_t v214 = (_DWORD *)(v187 + v202);
          if (*((unsigned __int8 *)v214 + v206) != v137[v206]) {
            goto LABEL_292;
          }
          if (v14 <= (unint64_t)v137)
          {
            unsigned int v216 = v137;
            if ((unint64_t)v137 < v526)
            {
LABEL_280:
              if (*v214 == *(_DWORD *)v216)
              {
                v216 += 4;
                ++v214;
              }
            }
            goto LABEL_282;
          }
          unint64_t v215 = *(void *)v214 ^ v201;
          if (!v215) {
            break;
          }
          unint64_t v177 = __clz(__rbit64(v215)) >> 3;
          if (v177 <= v206) {
            goto LABEL_292;
          }
LABEL_291:
          uint64_t v540 = v469 - v207;
          unint64_t v206 = v177;
          if (&v137[v177] == (char *)v6) {
            goto LABEL_351;
          }
LABEL_292:
          if (v207 <= v195) {
            goto LABEL_350;
          }
          if (!--v204) {
            goto LABEL_350;
          }
          unsigned int v202 = *(_DWORD *)(v184 + 4 * (v207 & v203));
          unint64_t v177 = v206;
          if (v202 < v194) {
            goto LABEL_351;
          }
        }
        uint64_t v217 = 0;
        while (1)
        {
          unsigned int v216 = &v205[v217];
          if ((unint64_t)&v205[v217] >= v14) {
            break;
          }
          uint64_t v218 = *(void *)(v451 + v207 + v217);
          v217 += 8;
          unint64_t v219 = *(void *)v216 ^ v218;
          if (v219)
          {
            unint64_t v177 = v217 + (__clz(__rbit64(v219)) >> 3);
            if (v177 > v206) {
              goto LABEL_291;
            }
            goto LABEL_292;
          }
        }
        uint64_t v214 = (_DWORD *)(v451 + v207 + v217);
        if ((unint64_t)v216 < v526) {
          goto LABEL_280;
        }
LABEL_282:
        if ((unint64_t)v216 >= v525)
        {
          if ((unint64_t)v216 >= v6) {
            goto LABEL_290;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v214 == *(unsigned __int16 *)v216)
          {
            v216 += 2;
            uint64_t v214 = (_DWORD *)((char *)v214 + 2);
          }
          if ((unint64_t)v216 >= v6)
          {
LABEL_290:
            unint64_t v177 = v216 - v137;
            if (v177 <= v206) {
              goto LABEL_292;
            }
            goto LABEL_291;
          }
        }
        if (*(unsigned __int8 *)v214 == *v216) {
          ++v216;
        }
        goto LABEL_290;
      }
      uint64_t v220 = *(void *)(v12 + 64);
      int v221 = *(_DWORD *)(v12 + 196);
      unsigned int v222 = 1 << v221;
      uint64_t v223 = *(void *)(v12 + 8);
      uint64_t v224 = *(void *)(v12 + 16);
      unsigned int v225 = v137 - v223;
      unsigned int v226 = 1 << *(_DWORD *)(v12 + 192);
      uint64_t v227 = *(unsigned int *)(v12 + 24);
      uint64_t v228 = *(unsigned int *)(v12 + 36);
      if ((int)v137 - (int)v223 - *(_DWORD *)(v12 + 28) > v226 && *(_DWORD *)(v12 + 32) == 0) {
        unsigned int v230 = v137 - v223 - v226;
      }
      else {
        unsigned int v230 = *(_DWORD *)(v12 + 28);
      }
      if (v225 >= v222) {
        uint64_t v231 = v225 - v222;
      }
      else {
        uint64_t v231 = 0;
      }
      uint64_t v232 = *(void *)(v12 + 48);
      int v233 = *(_DWORD *)(v12 + 204);
      int v234 = 32 - *(_DWORD *)(v12 + 200);
      if (v228 < v225)
      {
        int v235 = ~(-1 << v221);
        do
        {
          uint64_t v236 = 4 * ((-1640531535 * *(_DWORD *)(v223 + v228)) >> v234);
          *(_DWORD *)(v220 + 4 * (v228 & v235)) = *(_DWORD *)(v232 + v236);
          *(_DWORD *)(v232 + v236) = v228++;
        }
        while (v137 - v223 != v228);
      }
      *(_DWORD *)(v12 + 36) = v225;
      uint64_t v237 = *(unsigned int *)v137;
      unsigned int v238 = *(_DWORD *)(v232 + 4 * ((-1640531535 * v237) >> v234));
      if (v238 < v230) {
        goto LABEL_353;
      }
      uint64_t v239 = v222 - 1;
      uint64_t v505 = (void *)(v223 + v227);
      unsigned int v496 = (char *)(v224 + v227);
      int v240 = 1 << v233;
      unint64_t v487 = v11 + 5;
      unsigned int v470 = v225 + 2;
      uint64_t v241 = (char *)(v11 + 9);
      uint64_t v452 = v223 + 8;
      uint64_t v540 = 999999999;
      unint64_t v206 = 3;
      uint64_t v458 = v223;
      uint64_t v461 = v220;
      while (1)
      {
        uint64_t v242 = v238;
        if (v238 < v227)
        {
          if (*(_DWORD *)(v224 + v238) != v237) {
            goto LABEL_339;
          }
          uint64_t v243 = v237;
          uint64_t v244 = v231;
          uint64_t v245 = v227;
          uint64_t v246 = v239;
          unint64_t v247 = v206;
          unint64_t v248 = ZSTD_count_2segments(v487, (char *)(v224 + v238 + 4), v6, v496, v505);
          unint64_t v206 = v247;
          uint64_t v239 = v246;
          uint64_t v227 = v245;
          uint64_t v231 = v244;
          uint64_t v237 = v243;
          uint64_t v223 = v458;
          uint64_t v220 = v461;
          unint64_t v6 = v535;
          uint64_t v137 = v537;
          unint64_t v11 = v528;
          unint64_t v14 = v534;
          unint64_t v177 = v248 + 4;
          if (v248 + 4 <= v206) {
            goto LABEL_339;
          }
          goto LABEL_338;
        }
        uint64_t v249 = (_DWORD *)(v223 + v238);
        if (*((unsigned __int8 *)v249 + v206) != v137[v206]) {
          goto LABEL_339;
        }
        if (v14 <= (unint64_t)v137)
        {
          uint64_t v251 = v137;
          if ((unint64_t)v137 < v526)
          {
LABEL_327:
            if (*v249 == *(_DWORD *)v251)
            {
              v251 += 4;
              ++v249;
            }
          }
          goto LABEL_329;
        }
        unint64_t v250 = *(void *)v137 ^ *(void *)v249;
        if (!v250)
        {
          uint64_t v252 = 0;
          while (1)
          {
            uint64_t v251 = &v241[v252];
            if ((unint64_t)&v241[v252] >= v14) {
              break;
            }
            uint64_t v253 = *(void *)(v452 + v242 + v252);
            v252 += 8;
            unint64_t v254 = *(void *)v251 ^ v253;
            if (v254)
            {
              unint64_t v177 = v252 + (__clz(__rbit64(v254)) >> 3);
              if (v177 > v206) {
                goto LABEL_338;
              }
              goto LABEL_339;
            }
          }
          uint64_t v249 = (_DWORD *)(v452 + v242 + v252);
          if ((unint64_t)v251 < v526) {
            goto LABEL_327;
          }
LABEL_329:
          if ((unint64_t)v251 >= v525)
          {
            if ((unint64_t)v251 >= v6) {
              goto LABEL_337;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v249 == *(unsigned __int16 *)v251)
            {
              v251 += 2;
              uint64_t v249 = (_DWORD *)((char *)v249 + 2);
            }
            if ((unint64_t)v251 >= v6)
            {
LABEL_337:
              unint64_t v177 = v251 - v137;
              if (v177 <= v206) {
                goto LABEL_339;
              }
              goto LABEL_338;
            }
          }
          if (*(unsigned __int8 *)v249 == *v251) {
            ++v251;
          }
          goto LABEL_337;
        }
        unint64_t v177 = __clz(__rbit64(v250)) >> 3;
        if (v177 <= v206) {
          goto LABEL_339;
        }
LABEL_338:
        uint64_t v540 = v470 - v242;
        unint64_t v206 = v177;
        if (&v137[v177] == (char *)v6) {
          goto LABEL_351;
        }
LABEL_339:
        if (v242 <= v231) {
          break;
        }
        if (!--v240) {
          break;
        }
        unsigned int v238 = *(_DWORD *)(v220 + 4 * (v242 & v239));
        unint64_t v177 = v206;
        if (v238 < v230) {
          goto LABEL_351;
        }
      }
LABEL_350:
      unint64_t v177 = v206;
LABEL_351:
      uint64_t v12 = a1;
      uint64_t v7 = v480;
      LODWORD(v8) = v481;
      uint64_t v255 = v540;
      if (v177 >= 4
        && (int)((__clz(v540 + 1) ^ 0xFFFFFFE0) + 4 * v177 + 1) > (int)((__clz(v533 + 1) ^ 0xFFFFFFE0) + 4 * v514 + 5))
      {
        goto LABEL_525;
      }
LABEL_353:
      if ((unint64_t)v137 >= v510) {
        goto LABEL_526;
      }
      uint64_t v137 = (char *)(v11 + 2);
      int v256 = v520 + 2;
      uint64_t v257 = v533;
      unint64_t v538 = (char *)(v11 + 2);
      if (!v533) {
        goto LABEL_372;
      }
      if (v256 - *(_DWORD *)(v12 + 28) > v519 && *(_DWORD *)(v12 + 32) == 0) {
        unsigned int v259 = v256 - v519;
      }
      else {
        unsigned int v259 = *(_DWORD *)(v12 + 28);
      }
      uint64_t v260 = v256 - v509;
      uint64_t v261 = v524;
      if (v260 >= v8) {
        uint64_t v261 = v7;
      }
      if ((v518 - v260) < 3
        || v260 <= v259
        || (uint64_t v262 = v261 + v260, *(_DWORD *)v137 != *(_DWORD *)v262))
      {
LABEL_372:
        int v265 = *(_DWORD *)(v12 + 208);
        uint64_t v533 = v257;
        int v517 = v520 + 2;
        if ((v265 - 6) >= 2) {
          goto LABEL_423;
        }
LABEL_373:
        uint64_t v266 = *(void *)(v12 + 64);
        int v267 = *(_DWORD *)(v12 + 196);
        unsigned int v268 = 1 << v267;
        uint64_t v270 = *(void *)(v12 + 8);
        uint64_t v269 = *(void *)(v12 + 16);
        unsigned int v271 = v137 - v270;
        unsigned int v272 = 1 << *(_DWORD *)(v12 + 192);
        uint64_t v274 = *(unsigned int *)(v12 + 24);
        unsigned int v273 = *(_DWORD *)(v12 + 28);
        uint64_t v275 = *(unsigned int *)(v12 + 36);
        if (v137 - v270 - v273 > v272 && *(_DWORD *)(v12 + 32) == 0) {
          uint64_t v277 = v137 - v270 - v272;
        }
        else {
          uint64_t v277 = v273;
        }
        if (v271 >= v268) {
          unsigned int v278 = v271 - v268;
        }
        else {
          unsigned int v278 = 0;
        }
        uint64_t v279 = *(void *)(v12 + 48);
        int v280 = *(_DWORD *)(v12 + 204);
        int v281 = 64 - *(_DWORD *)(v12 + 200);
        if (v275 < v271)
        {
          int v282 = ~(-1 << v267);
          do
          {
            unint64_t v283 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v270 + v275)) >> v281);
            *(_DWORD *)(v266 + 4 * (v275 & v282)) = *(_DWORD *)(v279 + v283);
            *(_DWORD *)(v279 + v283) = v275++;
          }
          while (v137 - v270 != v275);
        }
        *(_DWORD *)(v12 + 36) = v271;
        uint64_t v471 = *(void *)v137;
        unsigned int v284 = *(_DWORD *)(v279 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v137) >> v281));
        if (v284 < v277) {
          goto LABEL_569;
        }
        uint64_t v285 = v268 - 1;
        unint64_t v529 = (void *)(v270 + v274);
        uint64_t v521 = (char *)(v269 + v274);
        int v286 = 1 << v280;
        unint64_t v506 = v11 + 6;
        unsigned int v497 = v271 + 2;
        uint64_t v287 = (char *)(v11 + 10);
        uint64_t v462 = v270 + 8;
        uint64_t v541 = 999999999;
        unint64_t v288 = 3;
        int v488 = v274;
LABEL_387:
        uint64_t v289 = v284;
        if (v284 < v274)
        {
          if (*(_DWORD *)(v269 + v284) == *(_DWORD *)v137)
          {
            uint64_t v274 = v269;
            uint64_t v290 = v266;
            uint64_t v291 = v277;
            uint64_t v292 = v285;
            unint64_t v293 = ZSTD_count_2segments(v506, (char *)(v269 + v284 + 4), v6, v521, v529);
            uint64_t v285 = v292;
            uint64_t v277 = v291;
            uint64_t v266 = v290;
            uint64_t v269 = v274;
            LODWORD(v274) = v488;
            unint64_t v6 = v535;
            uint64_t v137 = v538;
            unint64_t v14 = v534;
            unint64_t v177 = v293 + 4;
            if (v293 + 4 > v288) {
              goto LABEL_408;
            }
          }
          goto LABEL_409;
        }
        unint64_t v294 = (void *)(v270 + v284);
        if (*((unsigned __int8 *)v294 + v288) != v137[v288]) {
          goto LABEL_409;
        }
        if (v14 <= (unint64_t)v137)
        {
          __int16 v296 = v137;
          if ((unint64_t)v137 >= v526) {
            goto LABEL_399;
          }
        }
        else
        {
          unint64_t v295 = *v294 ^ v471;
          if (v295)
          {
            unint64_t v177 = __clz(__rbit64(v295)) >> 3;
            if (v177 > v288) {
              goto LABEL_408;
            }
            goto LABEL_409;
          }
          uint64_t v297 = 0;
          while (1)
          {
            __int16 v296 = &v287[v297];
            if ((unint64_t)&v287[v297] >= v14) {
              break;
            }
            uint64_t v298 = *(void *)(v462 + v289 + v297);
            v297 += 8;
            unint64_t v299 = *(void *)v296 ^ v298;
            if (v299)
            {
              unint64_t v177 = v297 + (__clz(__rbit64(v299)) >> 3);
              if (v177 <= v288) {
                goto LABEL_409;
              }
LABEL_408:
              uint64_t v541 = v497 - v289;
              unint64_t v288 = v177;
              if (&v137[v177] == (char *)v6) {
                goto LABEL_523;
              }
LABEL_409:
              if (v289 > v278)
              {
                if (--v286)
                {
                  unsigned int v284 = *(_DWORD *)(v266 + 4 * (v289 & v285));
                  unint64_t v177 = v288;
                  if (v284 < v277) {
                    goto LABEL_523;
                  }
                  goto LABEL_387;
                }
              }
              unint64_t v177 = v288;
              uint64_t v7 = v480;
              LODWORD(v8) = v481;
              if (v288 < 4) {
                goto LABEL_554;
              }
LABEL_524:
              uint64_t v255 = v541;
              uint64_t v12 = a1;
              if ((int)((__clz(v541 + 1) ^ 0xFFFFFFE0) + 4 * v177 + 1) <= (int)((__clz(v533 + 1) ^ 0xFFFFFFE0)
                                                                               + 4 * v514
                                                                               + 8))
                goto LABEL_526;
LABEL_525:
              unint64_t v11 = (unsigned __int8 *)v137;
              unint64_t v514 = v177;
              int v520 = v517;
              unsigned int v477 = (unsigned __int8 *)v137;
              uint64_t v533 = v255;
              if ((unint64_t)v137 >= v510) {
                goto LABEL_526;
              }
              goto LABEL_187;
            }
          }
          unint64_t v294 = (void *)(v462 + v289 + v297);
          if ((unint64_t)v296 >= v526)
          {
LABEL_399:
            if ((unint64_t)v296 >= v525)
            {
              if ((unint64_t)v296 >= v6) {
                goto LABEL_407;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v294 == *(unsigned __int16 *)v296)
              {
                v296 += 2;
                unint64_t v294 = (void *)((char *)v294 + 2);
              }
              if ((unint64_t)v296 >= v6)
              {
LABEL_407:
                unint64_t v177 = v296 - v137;
                if (v177 > v288) {
                  goto LABEL_408;
                }
                goto LABEL_409;
              }
            }
            if (*(unsigned __int8 *)v294 == *v296) {
              ++v296;
            }
            goto LABEL_407;
          }
        }
        if (*(_DWORD *)v294 == *(_DWORD *)v296)
        {
          v296 += 4;
          unint64_t v294 = (void *)((char *)v294 + 4);
        }
        goto LABEL_399;
      }
      if (v260 >= v8) {
        unsigned int v263 = (char *)v6;
      }
      else {
        unsigned int v263 = v478;
      }
      unint64_t v264 = ZSTD_count_2segments(v11 + 6, (char *)(v262 + 4), v6, v263, v455);
      if (v264 <= 0xFFFFFFFFFFFFFFFBLL)
      {
        unint64_t v14 = v534;
        unint64_t v6 = v535;
        unint64_t v11 = v528;
        uint64_t v137 = v538;
        if ((int)((__clz(v533 + 1) ^ 0xFFFFFFE0) + 4 * v514 + 2) < 4 * ((int)v264 + 4))
        {
          uint64_t v257 = 0;
          unsigned int v477 = (unsigned __int8 *)v538;
          unint64_t v514 = v264 + 4;
        }
        goto LABEL_372;
      }
      unint64_t v14 = v534;
      unint64_t v6 = v535;
      unint64_t v11 = v528;
      uint64_t v137 = v538;
      int v265 = *(_DWORD *)(v12 + 208);
      int v517 = v520 + 2;
      if ((v265 - 6) < 2) {
        goto LABEL_373;
      }
LABEL_423:
      if (v265 != 5)
      {
        uint64_t v334 = *(void *)(v12 + 64);
        int v335 = *(_DWORD *)(v12 + 196);
        unsigned int v336 = 1 << v335;
        uint64_t v337 = *(void *)(v12 + 8);
        uint64_t v338 = *(void *)(v12 + 16);
        unsigned int v339 = v137 - v337;
        unsigned int v340 = 1 << *(_DWORD *)(v12 + 192);
        uint64_t v341 = *(unsigned int *)(v12 + 24);
        uint64_t v342 = *(unsigned int *)(v12 + 36);
        if ((int)v137 - (int)v337 - *(_DWORD *)(v12 + 28) > v340 && *(_DWORD *)(v12 + 32) == 0) {
          unsigned int v344 = v137 - v337 - v340;
        }
        else {
          unsigned int v344 = *(_DWORD *)(v12 + 28);
        }
        if (v339 >= v336) {
          uint64_t v345 = v339 - v336;
        }
        else {
          uint64_t v345 = 0;
        }
        uint64_t v346 = *(void *)(v12 + 48);
        int v347 = *(_DWORD *)(v12 + 204);
        int v348 = 32 - *(_DWORD *)(v12 + 200);
        if (v342 < v339)
        {
          int v349 = ~(-1 << v335);
          do
          {
            uint64_t v350 = 4 * ((-1640531535 * *(_DWORD *)(v337 + v342)) >> v348);
            *(_DWORD *)(v334 + 4 * (v342 & v349)) = *(_DWORD *)(v346 + v350);
            *(_DWORD *)(v346 + v350) = v342++;
          }
          while (v137 - v337 != v342);
        }
        *(_DWORD *)(v12 + 36) = v339;
        uint64_t v351 = *(unsigned int *)v137;
        unsigned int v352 = *(_DWORD *)(v346 + 4 * ((-1640531535 * v351) >> v348));
        if (v352 < v344)
        {
LABEL_569:
          LODWORD(v8) = v481;
          int v370 = v533;
          if (!v533) {
            goto LABEL_555;
          }
          goto LABEL_527;
        }
        uint64_t v353 = v336 - 1;
        int v531 = (void *)(v337 + v341);
        int v523 = (char *)(v338 + v341);
        int v354 = 1 << v347;
        uint64_t v508 = v11 + 6;
        unsigned int v499 = v339 + 2;
        unint64_t v355 = (char *)(v11 + 10);
        uint64_t v464 = v337 + 8;
        uint64_t v541 = 999999999;
        unint64_t v356 = 3;
        uint64_t v490 = v337;
        unsigned int v473 = v344;
        while (1)
        {
          uint64_t v357 = v352;
          if (v352 < v341)
          {
            if (*(_DWORD *)(v338 + v352) == v351)
            {
              uint64_t v358 = v351;
              uint64_t v359 = v341;
              uint64_t v360 = v345;
              uint64_t v361 = v334;
              uint64_t v362 = v353;
              unint64_t v363 = ZSTD_count_2segments(v508, (char *)(v338 + v352 + 4), v6, v523, v531);
              uint64_t v353 = v362;
              uint64_t v334 = v361;
              uint64_t v345 = v360;
              uint64_t v341 = v359;
              uint64_t v337 = v490;
              uint64_t v351 = v358;
              unsigned int v344 = v473;
              unint64_t v6 = v535;
              uint64_t v137 = v538;
              unint64_t v14 = v534;
              unint64_t v177 = v363 + 4;
              if (v363 + 4 > v356) {
                goto LABEL_506;
              }
            }
            goto LABEL_507;
          }
          unint64_t v364 = (void *)(v337 + v352);
          if (*((unsigned __int8 *)v364 + v356) != v137[v356]) {
            goto LABEL_507;
          }
          if (v14 <= (unint64_t)v137) {
            break;
          }
          unint64_t v365 = *(void *)v137 ^ *v364;
          if (v365)
          {
            unint64_t v177 = __clz(__rbit64(v365)) >> 3;
            if (v177 > v356) {
              goto LABEL_506;
            }
            goto LABEL_507;
          }
          uint64_t v367 = 0;
          do
          {
            int v366 = &v355[v367];
            if ((unint64_t)&v355[v367] >= v14)
            {
              unint64_t v364 = (void *)(v464 + v357 + v367);
              if ((unint64_t)v366 >= v526) {
                goto LABEL_497;
              }
              goto LABEL_495;
            }
            uint64_t v368 = *(void *)(v464 + v357 + v367);
            v367 += 8;
            unint64_t v369 = *(void *)v366 ^ v368;
          }
          while (!v369);
          unint64_t v177 = v367 + (__clz(__rbit64(v369)) >> 3);
          if (v177 <= v356) {
            goto LABEL_507;
          }
LABEL_506:
          uint64_t v541 = v499 - v357;
          unint64_t v356 = v177;
          if (&v137[v177] == (char *)v6) {
            goto LABEL_523;
          }
LABEL_507:
          if (v357 <= v345 || (--v354, !v354))
          {
            unint64_t v177 = v356;
            uint64_t v7 = v480;
            LODWORD(v8) = v481;
            if (v356 >= 4) {
              goto LABEL_524;
            }
            goto LABEL_554;
          }
          unsigned int v352 = *(_DWORD *)(v334 + 4 * (v357 & v353));
          unint64_t v177 = v356;
          if (v352 < v344)
          {
LABEL_523:
            uint64_t v7 = v480;
            LODWORD(v8) = v481;
            if (v177 < 4) {
              goto LABEL_554;
            }
            goto LABEL_524;
          }
        }
        int v366 = v137;
        if ((unint64_t)v137 >= v526) {
          goto LABEL_497;
        }
LABEL_495:
        if (*(_DWORD *)v364 == *(_DWORD *)v366)
        {
          v366 += 4;
          unint64_t v364 = (void *)((char *)v364 + 4);
        }
LABEL_497:
        if ((unint64_t)v366 >= v525)
        {
          if ((unint64_t)v366 >= v6) {
            goto LABEL_505;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v364 == *(unsigned __int16 *)v366)
          {
            v366 += 2;
            unint64_t v364 = (void *)((char *)v364 + 2);
          }
          if ((unint64_t)v366 >= v6)
          {
LABEL_505:
            unint64_t v177 = v366 - v137;
            if (v177 > v356) {
              goto LABEL_506;
            }
            goto LABEL_507;
          }
        }
        if (*(unsigned __int8 *)v364 == *v366) {
          ++v366;
        }
        goto LABEL_505;
      }
      uint64_t v300 = *(void *)(v12 + 64);
      int v301 = *(_DWORD *)(v12 + 196);
      unsigned int v302 = 1 << v301;
      uint64_t v303 = *(void *)(v12 + 8);
      uint64_t v304 = *(void *)(v12 + 16);
      unsigned int v305 = v137 - v303;
      unsigned int v306 = 1 << *(_DWORD *)(v12 + 192);
      uint64_t v308 = *(unsigned int *)(v12 + 24);
      unsigned int v307 = *(_DWORD *)(v12 + 28);
      uint64_t v309 = *(unsigned int *)(v12 + 36);
      if (v137 - v303 - v307 > v306 && *(_DWORD *)(v12 + 32) == 0) {
        uint64_t v311 = v137 - v303 - v306;
      }
      else {
        uint64_t v311 = v307;
      }
      if (v305 >= v302) {
        uint64_t v312 = v305 - v302;
      }
      else {
        uint64_t v312 = 0;
      }
      uint64_t v313 = *(void *)(v12 + 48);
      int v314 = *(_DWORD *)(v12 + 204);
      int v315 = 64 - *(_DWORD *)(v12 + 200);
      if (v309 < v305)
      {
        int v316 = ~(-1 << v301);
        do
        {
          unint64_t v317 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v303 + v309)) >> v315);
          *(_DWORD *)(v300 + 4 * (v309 & v316)) = *(_DWORD *)(v313 + v317);
          *(_DWORD *)(v313 + v317) = v309++;
        }
        while (v137 - v303 != v309);
      }
      *(_DWORD *)(v12 + 36) = v305;
      uint64_t v472 = *(void *)v137;
      unsigned int v318 = *(_DWORD *)(v313 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v137) >> v315));
      if (v318 < v311)
      {
        uint64_t v7 = v480;
        LODWORD(v8) = v481;
        int v370 = v533;
        if (!v533) {
          goto LABEL_555;
        }
        goto LABEL_527;
      }
      unsigned int v319 = v302 - 1;
      int v530 = (void *)(v303 + v308);
      uint64_t v522 = (char *)(v304 + v308);
      int v320 = 1 << v314;
      unsigned int v507 = v11 + 6;
      unsigned int v498 = v305 + 2;
      uint64_t v321 = (char *)(v11 + 10);
      uint64_t v463 = v303 + 8;
      uint64_t v541 = 999999999;
      unint64_t v322 = 3;
      int v489 = v308;
      while (2)
      {
        uint64_t v323 = v318;
        if (v318 < v308)
        {
          if (*(_DWORD *)(v304 + v318) != *(_DWORD *)v137) {
            goto LABEL_460;
          }
          uint64_t v308 = v311;
          int v324 = v321;
          uint64_t v325 = v303;
          uint64_t v326 = v312;
          unint64_t v327 = ZSTD_count_2segments(v507, (char *)(v304 + v318 + 4), v6, v522, v530);
          uint64_t v312 = v326;
          uint64_t v303 = v325;
          uint64_t v321 = v324;
          uint64_t v311 = v308;
          LODWORD(v308) = v489;
          unint64_t v6 = v535;
          uint64_t v137 = v538;
          unint64_t v14 = v534;
          unint64_t v177 = v327 + 4;
          if (v327 + 4 <= v322) {
            goto LABEL_460;
          }
          goto LABEL_459;
        }
        uint64_t v328 = (_DWORD *)(v303 + v318);
        if (*((unsigned __int8 *)v328 + v322) != v137[v322]) {
          goto LABEL_460;
        }
        if (v14 <= (unint64_t)v137)
        {
          uint64_t v330 = v137;
          if ((unint64_t)v137 < v526)
          {
LABEL_448:
            if (*v328 == *(_DWORD *)v330)
            {
              v330 += 4;
              ++v328;
            }
          }
        }
        else
        {
          unint64_t v329 = *(void *)v328 ^ v472;
          if (v329)
          {
            unint64_t v177 = __clz(__rbit64(v329)) >> 3;
            if (v177 <= v322) {
              goto LABEL_460;
            }
            goto LABEL_459;
          }
          uint64_t v331 = 0;
          while (1)
          {
            uint64_t v330 = &v321[v331];
            if ((unint64_t)&v321[v331] >= v14) {
              break;
            }
            uint64_t v332 = *(void *)(v463 + v323 + v331);
            v331 += 8;
            unint64_t v333 = *(void *)v330 ^ v332;
            if (v333)
            {
              unint64_t v177 = v331 + (__clz(__rbit64(v333)) >> 3);
              if (v177 > v322) {
                goto LABEL_459;
              }
              goto LABEL_460;
            }
          }
          uint64_t v328 = (_DWORD *)(v463 + v323 + v331);
          if ((unint64_t)v330 < v526) {
            goto LABEL_448;
          }
        }
        if ((unint64_t)v330 >= v525)
        {
          if ((unint64_t)v330 >= v6) {
            goto LABEL_458;
          }
LABEL_456:
          if (*(unsigned __int8 *)v328 == *v330) {
            ++v330;
          }
          goto LABEL_458;
        }
        if (*(unsigned __int16 *)v328 == *(unsigned __int16 *)v330)
        {
          v330 += 2;
          uint64_t v328 = (_DWORD *)((char *)v328 + 2);
        }
        if ((unint64_t)v330 < v6) {
          goto LABEL_456;
        }
LABEL_458:
        unint64_t v177 = v330 - v137;
        if (v177 <= v322) {
          goto LABEL_460;
        }
LABEL_459:
        uint64_t v541 = v498 - v323;
        unint64_t v322 = v177;
        if (&v137[v177] == (char *)v6) {
          goto LABEL_523;
        }
LABEL_460:
        if (v323 > v312)
        {
          if (!--v320)
          {
            unint64_t v177 = v322;
            goto LABEL_523;
          }
          unsigned int v318 = *(_DWORD *)(v300 + 4 * (v323 & v319));
          unint64_t v177 = v322;
          if (v318 < v311) {
            goto LABEL_523;
          }
          continue;
        }
        break;
      }
      unint64_t v177 = v322;
      uint64_t v7 = v480;
      LODWORD(v8) = v481;
      if (v322 >= 4) {
        goto LABEL_524;
      }
LABEL_554:
      uint64_t v12 = a1;
      int v370 = v533;
      if (!v533)
      {
LABEL_555:
        unint64_t v380 = v447;
        uint64_t v379 = a2;
        uint64_t v9 = v509;
        uint64_t v374 = (unsigned __int8 *)v454;
        uint64_t v10 = v453;
        unint64_t v15 = v510;
        unint64_t v381 = v514;
        uint64_t v371 = v477;
        unint64_t v383 = (unint64_t)&v477[-v454];
        unsigned int v384 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v477 > v447) {
          goto LABEL_556;
        }
        goto LABEL_541;
      }
LABEL_527:
      uint64_t v371 = v477;
      unsigned int v372 = v477 - (v370 + v7) + 2;
      if (v8 <= v372) {
        uint64_t v373 = v7;
      }
      else {
        uint64_t v373 = v524;
      }
      uint64_t v374 = (unsigned __int8 *)v454;
      unint64_t v375 = v455;
      if (v8 > v372) {
        unint64_t v375 = v446;
      }
      if ((unint64_t)v477 <= v454
        || (uint64_t v376 = (v477 - (v370 + v7) + 2), v373 + v376 <= (unint64_t)v375))
      {
        unint64_t v380 = v447;
        uint64_t v379 = a2;
        unint64_t v15 = v510;
        unint64_t v381 = v514;
        uint64_t v10 = v509;
        uint64_t v9 = (v370 - 2);
        unint64_t v383 = (unint64_t)&v477[-v454];
        unsigned int v384 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v477 > v447) {
          goto LABEL_556;
        }
        goto LABEL_541;
      }
      unint64_t v377 = (unsigned __int8 *)(v373 + v376 - 1);
      unint64_t v378 = v477 - 1;
      unint64_t v380 = v447;
      uint64_t v379 = a2;
      unint64_t v15 = v510;
      unint64_t v381 = v514;
      while (2)
      {
        if (*v378 != *v377)
        {
          uint64_t v371 = v378 + 1;
          uint64_t v10 = v509;
          uint64_t v9 = (v370 - 2);
          unint64_t v383 = (unint64_t)&v378[-v454 + 1];
          unsigned int v384 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v371 <= v447) {
            goto LABEL_541;
          }
LABEL_556:
          if ((unint64_t)v374 <= v380)
          {
            uint64_t v394 = (char *)v384 + v380 - (void)v374;
            unint64_t v395 = v374;
            unsigned int v396 = v384;
            do
            {
              long long v397 = *(_OWORD *)v395;
              v395 += 16;
              *v396++ = v397;
            }
            while (v396 < (_OWORD *)v394);
            unsigned int v393 = (_OWORD *)v380;
            uint64_t v389 = v449;
            if (v380 >= (unint64_t)v371) {
              goto LABEL_585;
            }
          }
          else
          {
            unsigned int v393 = v374;
            uint64_t v394 = v384;
            uint64_t v389 = v449;
            if (v374 >= v371) {
              goto LABEL_585;
            }
          }
          if ((unint64_t)v374 <= v380) {
            unsigned int v398 = (unsigned __int8 *)v380;
          }
          else {
            unsigned int v398 = v374;
          }
          unint64_t v399 = v371 - v398;
          if ((unint64_t)(v371 - v398) < 8)
          {
            uint64_t v400 = (unsigned __int8 *)v393;
            goto LABEL_584;
          }
          if ((unint64_t)((char *)v384 - (char *)v374) < 0x20)
          {
            uint64_t v400 = (unsigned __int8 *)v393;
            goto LABEL_584;
          }
          if (v399 < 0x20)
          {
            unint64_t v401 = 0;
            goto LABEL_577;
          }
          unint64_t v401 = v399 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v402 = v393 + 1;
          unint64_t v403 = (_OWORD *)((char *)v384 + v398 - v374 + 16);
          unint64_t v404 = v399 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v405 = *v402;
            *(v403 - 1) = *(v402 - 1);
            *unint64_t v403 = v405;
            v402 += 2;
            v403 += 2;
            v404 -= 32;
          }
          while (v404);
          if (v399 == v401) {
            goto LABEL_585;
          }
          if ((v399 & 0x18) != 0)
          {
LABEL_577:
            v394 += v399 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v400 = (unsigned __int8 *)v393 + (v399 & 0xFFFFFFFFFFFFFFF8);
            int v406 = (uint64_t *)((char *)v393 + v401);
            int v407 = (void *)((char *)v384 + &v398[v401] - v374);
            unint64_t v408 = v401 - (v399 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v409 = *v406++;
              *v407++ = v409;
              v408 += 8;
            }
            while (v408);
            if (v399 == (v399 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_585;
            }
          }
          else
          {
            uint64_t v400 = (unsigned __int8 *)v393 + v401;
            v394 += v401;
          }
          do
          {
LABEL_584:
            char v410 = *v400++;
            *v394++ = v410;
          }
          while (v400 < v371);
          goto LABEL_585;
        }
        ++v381;
        int v382 = v378 - 1;
        if ((unint64_t)v378 > v454)
        {
          --v378;
          BOOL v134 = v377-- > v375;
          if (v134) {
            continue;
          }
        }
        break;
      }
      uint64_t v371 = v382 + 1;
      uint64_t v10 = v509;
      uint64_t v9 = (v370 - 2);
      unint64_t v383 = (unint64_t)&v382[-v454 + 1];
      unsigned int v384 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)(v382 + 1) > v447) {
        goto LABEL_556;
      }
LABEL_541:
      *unsigned int v384 = *(_OWORD *)v374;
      uint64_t v385 = *(void *)(v379 + 24);
      if (v383 <= 0x10)
      {
        *(void *)(v379 + 24) = v385 + v383;
        uint64_t v391 = *(void *)(v379 + 8);
        uint64_t v389 = v449;
        __int16 v392 = v381 - 3;
        *(_WORD *)(v391 + 4) = v383;
        *(_DWORD *)uint64_t v391 = v370 + 1;
        if (v381 - 3 < 0x10000) {
          goto LABEL_587;
        }
        goto LABEL_590;
      }
      unsigned int v386 = (_OWORD *)(v385 + 16);
      unint64_t v387 = v385 + v383;
      unsigned int v388 = (long long *)(v374 + 16);
      uint64_t v389 = v449;
      do
      {
        long long v390 = *v388++;
        *v386++ = v390;
      }
      while ((unint64_t)v386 < v387);
LABEL_585:
      *(void *)(v379 + 24) += v383;
      uint64_t v391 = *(void *)(v379 + 8);
      if (v383 < 0x10000)
      {
        __int16 v392 = v381 - 3;
        *(_WORD *)(v391 + 4) = v383;
        *(_DWORD *)uint64_t v391 = v370 + 1;
        if (v381 - 3 >= 0x10000) {
          goto LABEL_590;
        }
LABEL_587:
        *(_WORD *)(v391 + 6) = v392;
        uint64_t v412 = v391 + 8;
        *(void *)(v379 + 8) = v391 + 8;
        unint64_t v5 = &v371[v381];
        if ((unint64_t)&v371[v381] <= v15) {
          goto LABEL_591;
        }
LABEL_588:
        unint64_t v11 = v5;
        goto LABEL_7;
      }
      unint64_t v411 = (unint64_t)(v391 - *(void *)v379) >> 3;
      *(_DWORD *)(v379 + 72) = 1;
      *(_DWORD *)(v379 + 76) = v411;
      __int16 v392 = v381 - 3;
      *(_WORD *)(v391 + 4) = v383;
      *(_DWORD *)uint64_t v391 = v370 + 1;
      if (v381 - 3 < 0x10000) {
        goto LABEL_587;
      }
LABEL_590:
      unint64_t v413 = (unint64_t)(v391 - *(void *)v379) >> 3;
      *(_DWORD *)(v379 + 72) = 2;
      *(_DWORD *)(v379 + 76) = v413;
      *(_WORD *)(v391 + 6) = v392;
      uint64_t v412 = v391 + 8;
      *(void *)(v379 + 8) = v391 + 8;
      unint64_t v5 = &v371[v381];
      if ((unint64_t)&v371[v381] > v15) {
        goto LABEL_588;
      }
LABEL_591:
      uint64_t v414 = v9;
      uint64_t v415 = v10;
      while (2)
      {
        uint64_t v9 = v415;
        uint64_t v415 = v414;
        unsigned int v416 = *(_DWORD *)(v12 + 28);
        if (v5 - v7 - v416 > v519 && *(_DWORD *)(v12 + 32) == 0) {
          unsigned int v416 = v5 - v7 - v519;
        }
        uint64_t v418 = (v5 - v7 - v9);
        if (v418 >= v8) {
          uint64_t v419 = v7;
        }
        else {
          uint64_t v419 = v524;
        }
        if ((v518 - v418) >= 3 && v418 > v416)
        {
          uint64_t v420 = v419 + v418;
          if (*(_DWORD *)v5 == *(_DWORD *)(v419 + v418))
          {
            if (v418 >= v8) {
              uint64_t v421 = (void *)v6;
            }
            else {
              uint64_t v421 = v478;
            }
            unsigned int v422 = (char *)(v5 + 4);
            int v423 = (void *)(v420 + 4);
            unint64_t v424 = (char *)v421 + (void)v5 - v420;
            if ((unint64_t)v424 >= v6) {
              unint64_t v424 = (char *)v6;
            }
            if (v424 - 7 <= v422)
            {
              unsigned int v428 = (char *)(v5 + 4);
              int v429 = v423;
              if (v422 < v424 - 3)
              {
LABEL_616:
                if (*v429 == *(_DWORD *)v428)
                {
                  v428 += 4;
                  ++v429;
                }
              }
            }
            else
            {
              unint64_t v425 = *(void *)v422 ^ *v423;
              if (v425)
              {
                unint64_t v426 = __clz(__rbit64(v425)) >> 3;
                if ((void *)((char *)v423 + v426) != v421) {
                  goto LABEL_612;
                }
LABEL_627:
                int v430 = &v422[v426];
                if (v14 <= (unint64_t)v430)
                {
                  unint64_t v436 = (unsigned __int8 *)v430;
                  unsigned int v437 = v455;
                  if ((unint64_t)v430 < v526)
                  {
LABEL_637:
                    if (*(_DWORD *)v437 == *(_DWORD *)v436)
                    {
                      v436 += 4;
                      v437 += 4;
                    }
                  }
                }
                else
                {
                  unint64_t v431 = *(void *)v430 ^ *(void *)v455;
                  if (v431)
                  {
                    v426 += __clz(__rbit64(v431)) >> 3;
                    if ((unint64_t)v5 > v380) {
                      goto LABEL_613;
                    }
LABEL_648:
                    *(_OWORD *)*(void *)(v379 + 24) = *(_OWORD *)v5;
                    uint64_t v412 = *(void *)(v379 + 8);
                    __int16 v427 = v426 + 1;
                    *(_WORD *)(v412 + 4) = 0;
                    *(_DWORD *)uint64_t v412 = 1;
                    if (v426 + 1 >= 0x10000)
                    {
LABEL_649:
                      unint64_t v438 = (unint64_t)(v412 - *(void *)v379) >> 3;
                      *(_DWORD *)(v379 + 72) = 2;
                      *(_DWORD *)(v379 + 76) = v438;
                    }
LABEL_592:
                    *(_WORD *)(v412 + 6) = v427;
                    v412 += 8;
                    v5 += v426 + 4;
                    *(void *)(v379 + 8) = v412;
                    uint64_t v414 = v9;
                    LODWORD(v10) = v415;
                    unint64_t v11 = v5;
                    if ((unint64_t)v5 > v15) {
                      goto LABEL_7;
                    }
                    continue;
                  }
                  uint64_t v439 = 0;
                  uint64_t v440 = (uint64_t)&v5[v426 + 12];
                  while (1)
                  {
                    unint64_t v441 = (void *)(v440 + v439);
                    if (v440 + v439 >= v14) {
                      break;
                    }
                    uint64_t v442 = *(void *)(v389 + v439);
                    v439 += 8;
                    unint64_t v443 = *v441 ^ v442;
                    if (v443)
                    {
                      v426 += v439 + (__clz(__rbit64(v443)) >> 3);
                      if ((unint64_t)v5 <= v380) {
                        goto LABEL_648;
                      }
                      goto LABEL_613;
                    }
                  }
                  unint64_t v436 = &v5[v426 + 12 + v439];
                  unsigned int v437 = (unsigned __int8 *)(v389 + v439);
                  if ((unint64_t)v436 < v526) {
                    goto LABEL_637;
                  }
                }
                if ((unint64_t)v436 >= v525)
                {
                  if ((unint64_t)v436 >= v6) {
                    goto LABEL_647;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v437 == *(unsigned __int16 *)v436)
                  {
                    v436 += 2;
                    v437 += 2;
                  }
                  if ((unint64_t)v436 >= v6)
                  {
LABEL_647:
                    v426 += v436 - (unsigned __int8 *)v430;
                    if ((unint64_t)v5 > v380) {
                      goto LABEL_613;
                    }
                    goto LABEL_648;
                  }
                }
                if (*v437 == *v436) {
                  ++v436;
                }
                goto LABEL_647;
              }
              unsigned int v432 = (char *)(v5 + 12);
              while (1)
              {
                unsigned int v433 = &v432[v425];
                if (&v432[v425] >= v424 - 7) {
                  break;
                }
                uint64_t v434 = *(void *)(v419 + v418 + 12 + v425);
                v425 += 8;
                unint64_t v435 = *(void *)v433 ^ v434;
                if (v435)
                {
                  unint64_t v426 = v425 + (__clz(__rbit64(v435)) >> 3);
                  if ((void *)((char *)v423 + v426) != v421) {
                    goto LABEL_612;
                  }
                  goto LABEL_627;
                }
              }
              unsigned int v428 = (char *)&v5[v425 + 12];
              int v429 = (_DWORD *)(v419 + v418 + v425 + 12);
              if (v428 < v424 - 3) {
                goto LABEL_616;
              }
            }
            if (v428 >= v424 - 1)
            {
              if (v428 >= v424) {
                goto LABEL_626;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v429 == *(unsigned __int16 *)v428)
              {
                v428 += 2;
                int v429 = (_DWORD *)((char *)v429 + 2);
              }
              if (v428 >= v424)
              {
LABEL_626:
                unint64_t v426 = v428 - v422;
                if ((void *)((char *)v423 + v428 - v422) == v421) {
                  goto LABEL_627;
                }
LABEL_612:
                if ((unint64_t)v5 <= v380) {
                  goto LABEL_648;
                }
LABEL_613:
                __int16 v427 = v426 + 1;
                *(_WORD *)(v412 + 4) = 0;
                *(_DWORD *)uint64_t v412 = 1;
                if (v426 + 1 >= 0x10000) {
                  goto LABEL_649;
                }
                goto LABEL_592;
              }
            }
            if (*(unsigned __int8 *)v429 == *v428) {
              ++v428;
            }
            goto LABEL_626;
          }
        }
        break;
      }
      LODWORD(v10) = v9;
      LODWORD(v9) = v414;
      unint64_t v11 = v5;
LABEL_7:
      if ((unint64_t)v11 >= v15) {
        goto LABEL_660;
      }
    }
    if (v28 == 5)
    {
      int v64 = *(_DWORD *)(v12 + 196);
      unsigned int v65 = 1 << v64;
      uint64_t v67 = *(void *)(v12 + 8);
      uint64_t v66 = *(void *)(v12 + 16);
      unsigned int v68 = v11 - v67;
      unsigned int v69 = 1 << *(_DWORD *)(v12 + 192);
      BOOL v70 = v11 - v67 - v19 > v69 && v20 == 0;
      uint64_t v71 = *(void *)(v12 + 64);
      uint64_t v72 = *(unsigned int *)(v12 + 24);
      if (v70) {
        unsigned int v73 = v11 - v67 - v69;
      }
      else {
        unsigned int v73 = v19;
      }
      if (v68 >= v65) {
        uint64_t v74 = v68 - v65;
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = *(void *)(v12 + 48);
      int v76 = *(_DWORD *)(v12 + 204);
      uint64_t v77 = *(unsigned int *)(v12 + 36);
      int v78 = 64 - *(_DWORD *)(v12 + 200);
      if (v77 < v68)
      {
        int v79 = ~(-1 << v64);
        do
        {
          unint64_t v80 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v67 + v77)) >> v78);
          *(_DWORD *)(v71 + 4 * (v77 & v79)) = *(_DWORD *)(v75 + v80);
          *(_DWORD *)(v75 + v80) = v77++;
        }
        while (v11 - v67 != v77);
      }
      *(_DWORD *)(v12 + 36) = v68;
      uint64_t v475 = *(void *)v11;
      unsigned int v81 = *(_DWORD *)(v75 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v11) >> v78));
      if (v81 < v73) {
        goto LABEL_133;
      }
      uint64_t v82 = v65 - 1;
      int v512 = (char *)(v66 + v72);
      int v83 = 1 << v76;
      unsigned int v501 = v11 + 4;
      unsigned int v492 = v68 + 2;
      unsigned int v84 = v11 + 8;
      uint64_t v466 = v67 + 8;
      uint64_t v539 = 999999999;
      unint64_t v85 = 3;
      uint64_t v483 = v66;
      while (1)
      {
        uint64_t v86 = v81;
        if (v81 < v72)
        {
          if (*(_DWORD *)(v66 + v81) == *(_DWORD *)v11)
          {
            uint64_t v87 = v74;
            uint64_t v88 = v71;
            uint64_t v89 = v84;
            uint64_t v90 = v82;
            unint64_t v91 = ZSTD_count_2segments(v501, (char *)(v66 + v81 + 4), v6, v512, (void *)(v67 + v72));
            uint64_t v82 = v90;
            uint64_t v74 = v87;
            uint64_t v66 = v483;
            unsigned int v84 = v89;
            uint64_t v71 = v88;
            unint64_t v11 = v527;
            unint64_t v14 = v534;
            unint64_t v6 = v535;
            unint64_t v57 = v91 + 4;
            if (v91 + 4 > v85) {
              goto LABEL_108;
            }
          }
          goto LABEL_109;
        }
        uint64_t v92 = (void *)(v67 + v81);
        if (*((unsigned __int8 *)v92 + v85) != v11[v85]) {
          goto LABEL_109;
        }
        if (v14 <= (unint64_t)v11) {
          break;
        }
        unint64_t v93 = *v92 ^ v475;
        if (v93)
        {
          unint64_t v57 = __clz(__rbit64(v93)) >> 3;
          if (v57 > v85) {
            goto LABEL_108;
          }
          goto LABEL_109;
        }
        uint64_t v95 = 0;
        do
        {
          uint64_t v94 = (unsigned __int8 *)&v84[v95];
          if ((unint64_t)&v84[v95] >= v14)
          {
            uint64_t v92 = (void *)(v466 + v86 + v95 * 8);
            if ((unint64_t)v94 >= v526) {
              goto LABEL_99;
            }
            goto LABEL_97;
          }
          uint64_t v96 = *(void *)(v466 + v86 + v95 * 8);
          ++v95;
          unint64_t v97 = *(void *)v94 ^ v96;
        }
        while (!v97);
        unint64_t v57 = v95 * 8 + (__clz(__rbit64(v97)) >> 3);
        if (v57 <= v85) {
          goto LABEL_109;
        }
LABEL_108:
        uint64_t v539 = v492 - v86;
        unint64_t v85 = v57;
        if (&v11[v57] == (unsigned __int8 *)v6) {
          goto LABEL_178;
        }
LABEL_109:
        if (v86 <= v74 || (--v83, !v83))
        {
          unint64_t v57 = v85;
          goto LABEL_178;
        }
        unsigned int v81 = *(_DWORD *)(v71 + 4 * (v86 & v82));
        unint64_t v57 = v85;
        if (v81 < v73)
        {
LABEL_178:
          unint64_t v117 = v536;
          if (v57 <= v536) {
            unint64_t v118 = v536;
          }
          else {
            unint64_t v118 = v57;
          }
          if (v118 >= 4) {
            goto LABEL_182;
          }
          goto LABEL_6;
        }
      }
      uint64_t v94 = v11;
      if ((unint64_t)v11 >= v526) {
        goto LABEL_99;
      }
LABEL_97:
      if (*(_DWORD *)v92 == *(_DWORD *)v94)
      {
        v94 += 4;
        uint64_t v92 = (void *)((char *)v92 + 4);
      }
LABEL_99:
      if ((unint64_t)v94 >= v525)
      {
        if ((unint64_t)v94 >= v6) {
          goto LABEL_107;
        }
      }
      else
      {
        if (*(unsigned __int16 *)v92 == *(unsigned __int16 *)v94)
        {
          v94 += 2;
          uint64_t v92 = (void *)((char *)v92 + 2);
        }
        if ((unint64_t)v94 >= v6)
        {
LABEL_107:
          unint64_t v57 = v94 - v11;
          if (v57 > v85) {
            goto LABEL_108;
          }
          goto LABEL_109;
        }
      }
      if (*(unsigned __int8 *)v92 == *v94) {
        ++v94;
      }
      goto LABEL_107;
    }
    int v98 = *(_DWORD *)(v12 + 196);
    unsigned int v99 = 1 << v98;
    uint64_t v100 = *(void *)(v12 + 8);
    uint64_t v101 = *(void *)(v12 + 16);
    unsigned int v102 = v11 - v100;
    unsigned int v103 = 1 << *(_DWORD *)(v12 + 192);
    BOOL v104 = v11 - v100 - v19 > v103 && v20 == 0;
    uint64_t v105 = *(void *)(v12 + 64);
    uint64_t v106 = *(unsigned int *)(v12 + 24);
    if (v104) {
      uint64_t v107 = v11 - v100 - v103;
    }
    else {
      uint64_t v107 = v19;
    }
    if (v102 >= v99) {
      uint64_t v108 = v102 - v99;
    }
    else {
      uint64_t v108 = 0;
    }
    uint64_t v109 = *(void *)(v12 + 48);
    int v110 = *(_DWORD *)(v12 + 204);
    uint64_t v111 = *(unsigned int *)(v12 + 36);
    int v112 = 32 - *(_DWORD *)(v12 + 200);
    if (v111 < v102)
    {
      int v113 = ~(-1 << v98);
      do
      {
        uint64_t v114 = 4 * ((-1640531535 * *(_DWORD *)(v100 + v111)) >> v112);
        *(_DWORD *)(v105 + 4 * (v111 & v113)) = *(_DWORD *)(v109 + v114);
        *(_DWORD *)(v109 + v114) = v111++;
      }
      while (v11 - v100 != v111);
    }
    *(_DWORD *)(v12 + 36) = v102;
    uint64_t v115 = *(unsigned int *)v11;
    unsigned int v116 = *(_DWORD *)(v109 + 4 * ((-1640531535 * v115) >> v112));
    if (v116 < v107) {
      goto LABEL_133;
    }
    unsigned int v119 = v99 - 1;
    unint64_t v516 = (void *)(v100 + v106);
    unint64_t v513 = (char *)(v101 + v106);
    int v120 = 1 << v110;
    unint64_t v502 = v11 + 4;
    unsigned int v493 = v102 + 2;
    unsigned int v121 = v11 + 8;
    uint64_t v467 = v100 + 8;
    uint64_t v539 = 999999999;
    unint64_t v122 = 3;
    int v484 = v106;
    uint64_t v476 = v105;
    while (1)
    {
      uint64_t v123 = v116;
      if (v116 < v106)
      {
        if (*(_DWORD *)(v101 + v116) != v115) {
          goto LABEL_166;
        }
        uint64_t v106 = v115;
        uint64_t v124 = v108;
        uint64_t v125 = v100;
        uint64_t v126 = v107;
        unint64_t v127 = ZSTD_count_2segments(v502, (char *)(v101 + v116 + 4), v6, v513, v516);
        uint64_t v107 = v126;
        uint64_t v100 = v125;
        uint64_t v105 = v476;
        uint64_t v108 = v124;
        uint64_t v115 = v106;
        LODWORD(v106) = v484;
        unint64_t v11 = v527;
        unint64_t v14 = v534;
        unint64_t v6 = v535;
        unint64_t v57 = v127 + 4;
        if (v127 + 4 <= v122) {
          goto LABEL_166;
        }
        goto LABEL_165;
      }
      uint64_t v128 = (_DWORD *)(v100 + v116);
      if (*((unsigned __int8 *)v128 + v122) != v11[v122]) {
        goto LABEL_166;
      }
      if (v14 <= (unint64_t)v11)
      {
        unint64_t v130 = v11;
        if ((unint64_t)v11 < v526)
        {
LABEL_154:
          if (*v128 == *(_DWORD *)v130)
          {
            v130 += 4;
            ++v128;
          }
        }
        goto LABEL_156;
      }
      unint64_t v129 = *(void *)v11 ^ *(void *)v128;
      if (!v129) {
        break;
      }
      unint64_t v57 = __clz(__rbit64(v129)) >> 3;
      if (v57 <= v122) {
        goto LABEL_166;
      }
LABEL_165:
      uint64_t v539 = v493 - v123;
      unint64_t v122 = v57;
      if (&v11[v57] == (unsigned __int8 *)v6) {
        goto LABEL_178;
      }
LABEL_166:
      if (v123 <= v108 || (--v120, !v120))
      {
        unint64_t v57 = v122;
        unint64_t v117 = v536;
        if (v122 <= v536) {
          unint64_t v118 = v536;
        }
        else {
          unint64_t v118 = v122;
        }
        if (v118 < 4) {
          goto LABEL_6;
        }
        goto LABEL_182;
      }
      unsigned int v116 = *(_DWORD *)(v105 + 4 * (v123 & v119));
      unint64_t v57 = v122;
      if (v116 < v107) {
        goto LABEL_178;
      }
    }
    uint64_t v131 = 0;
    while (1)
    {
      unint64_t v130 = (unsigned __int8 *)&v121[v131];
      if ((unint64_t)&v121[v131] >= v14) {
        break;
      }
      uint64_t v132 = *(void *)(v467 + v123 + v131 * 8);
      ++v131;
      unint64_t v133 = *(void *)v130 ^ v132;
      if (v133)
      {
        unint64_t v57 = v131 * 8 + (__clz(__rbit64(v133)) >> 3);
        if (v57 > v122) {
          goto LABEL_165;
        }
        goto LABEL_166;
      }
    }
    uint64_t v128 = (_DWORD *)(v467 + v123 + v131 * 8);
    if ((unint64_t)v130 < v526) {
      goto LABEL_154;
    }
LABEL_156:
    if ((unint64_t)v130 >= v525)
    {
      if ((unint64_t)v130 >= v6) {
        goto LABEL_164;
      }
    }
    else
    {
      if (*(unsigned __int16 *)v128 == *(unsigned __int16 *)v130)
      {
        v130 += 2;
        uint64_t v128 = (_DWORD *)((char *)v128 + 2);
      }
      if ((unint64_t)v130 >= v6)
      {
LABEL_164:
        unint64_t v57 = v130 - v11;
        if (v57 <= v122) {
          goto LABEL_166;
        }
        goto LABEL_165;
      }
    }
    if (*(unsigned __int8 *)v128 == *v130) {
      ++v130;
    }
    goto LABEL_164;
  }
LABEL_660:
  *a3 = v9;
  a3[1] = v10;
  return v6 - (void)v5;
}

unint64_t ZSTD_compressBlock_btlazy2_extDict(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (char *)a4;
  unint64_t v6 = a4 + a5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v124 = (_DWORD *)a3;
  unint64_t v9 = *(unsigned int *)a3;
  LODWORD(a3) = *(_DWORD *)(a3 + 4);
  unint64_t v133 = (unsigned __int8 *)(v7 + v8);
  if (v7 + v8 == a4) {
    uint64_t v10 = (uint64_t *)(a4 + 1);
  }
  else {
    uint64_t v10 = (uint64_t *)a4;
  }
  unint64_t v141 = a4 + a5 - 8;
  if ((unint64_t)v10 < v141)
  {
    uint64_t v11 = a1;
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v135 = (char *)(v12 + v8);
    uint64_t v140 = v12;
    uint64_t v125 = (unsigned __int8 *)(v12 + *(unsigned int *)(a1 + 28));
    unsigned int v139 = 1 << *(_DWORD *)(a1 + 192);
    int v138 = v8 - 1;
    unint64_t v130 = v6 - 1;
    unint64_t v131 = v6 - 3;
    unsigned int v136 = *(_DWORD *)(a1 + 24);
    unint64_t v128 = v6 - 32;
    uint64_t v134 = *(void *)(a1 + 8);
    uint64_t v126 = v8 + v7 + 8;
    unint64_t v127 = v6 - 7;
LABEL_8:
    unint64_t v13 = 0;
    unint64_t v14 = (uint64_t *)((char *)v10 + 1);
    int v15 = v10 - v7;
    int v16 = v10 - v7 + 1;
    if (v16 - *(_DWORD *)(v11 + 28) > v139 && *(_DWORD *)(v11 + 32) == 0) {
      unsigned int v18 = v16 - v139;
    }
    else {
      unsigned int v18 = *(_DWORD *)(v11 + 28);
    }
    uint64_t v19 = (v16 - v9);
    uint64_t v20 = v140;
    if (v19 >= v8) {
      uint64_t v20 = v7;
    }
    unsigned int v132 = a3;
    if ((v138 - v19) >= 3 && v19 > v18)
    {
      uint64_t v21 = v20 + v19;
      if (*(_DWORD *)v14 == *(_DWORD *)v21)
      {
        if (v19 >= v8) {
          unsigned int v22 = (char *)v6;
        }
        else {
          unsigned int v22 = v135;
        }
        unint64_t v23 = ZSTD_count_2segments((uint64_t *)((char *)v10 + 5), (char *)(v21 + 4), v6, v22, v133);
        uint64_t v11 = a1;
        unint64_t v13 = v23 + 4;
      }
      else
      {
        unint64_t v13 = 0;
      }
    }
    uint64_t v142 = 999999999;
    unint64_t BestMatch_extDict_selectMLS = ZSTD_BtFindBestMatch_extDict_selectMLS(v11, v10, v6, &v142);
    if (BestMatch_extDict_selectMLS <= v13) {
      unint64_t v25 = v13;
    }
    else {
      unint64_t v25 = BestMatch_extDict_selectMLS;
    }
    if (v25 < 4)
    {
      uint64_t v10 = (uint64_t *)((char *)v10 + (((char *)v10 - v5) >> 8) + 1);
      LODWORD(v8) = v136;
      uint64_t v11 = a1;
      LODWORD(a3) = v132;
      goto LABEL_7;
    }
    if (BestMatch_extDict_selectMLS <= v13)
    {
      uint64_t v26 = 0;
    }
    else
    {
      unint64_t v14 = v10;
      uint64_t v26 = v142;
    }
    uint64_t v27 = v26;
    int v28 = (char *)v14;
    unint64_t v29 = v25;
    uint64_t v11 = a1;
    if ((unint64_t)v10 >= v141)
    {
LABEL_32:
      a3 = v132;
      if (!v27) {
        goto LABEL_116;
      }
LABEL_33:
      uint64_t v7 = v134;
      unsigned int v30 = v28 - (v27 + v134) + 2;
      LODWORD(v8) = v136;
      if (v136 <= v30) {
        uint64_t v31 = v134;
      }
      else {
        uint64_t v31 = v140;
      }
      uint64_t v32 = v133;
      if (v136 > v30) {
        uint64_t v32 = v125;
      }
      if (v28 <= v5 || (uint64_t v33 = (v28 - (v27 + v134) + 2), v31 + v33 <= (unint64_t)v32))
      {
        unint64_t v36 = v128;
        uint64_t v37 = a2;
        uint64_t v39 = v126;
        unint64_t v38 = v127;
      }
      else
      {
        unsigned int v34 = (unsigned __int8 *)(v31 + v33 - 1);
        BOOL v35 = (unsigned __int8 *)(v28 - 1);
        unint64_t v36 = v128;
        uint64_t v37 = a2;
        uint64_t v39 = v126;
        unint64_t v38 = v127;
        while (*v35 == *v34)
        {
          ++v29;
          uint64_t v40 = v35 - 1;
          if (v35 > (unsigned __int8 *)v5)
          {
            --v35;
            BOOL v60 = v34-- > v32;
            if (v60) {
              continue;
            }
          }
          int v28 = (char *)(v40 + 1);
          goto LABEL_101;
        }
        int v28 = (char *)(v35 + 1);
      }
LABEL_101:
      a3 = v9;
      unint64_t v9 = (v27 - 2);
      unint64_t v63 = v28 - v5;
      int v64 = *(_OWORD **)(v37 + 24);
      if ((unint64_t)v28 <= v36) {
        goto LABEL_117;
      }
LABEL_102:
      if ((unint64_t)v5 <= v36)
      {
        uint64_t v66 = (char *)v64 + v36 - (void)v5;
        uint64_t v67 = v5;
        unsigned int v68 = v64;
        do
        {
          long long v69 = *(_OWORD *)v67;
          v67 += 16;
          *v68++ = v69;
        }
        while (v68 < (_OWORD *)v66);
        unsigned int v65 = (char *)v36;
        if (v36 < (unint64_t)v28) {
          goto LABEL_108;
        }
      }
      else
      {
        unsigned int v65 = v5;
        uint64_t v66 = v64;
        if (v5 >= v28) {
          goto LABEL_134;
        }
LABEL_108:
        if ((unint64_t)v5 <= v36) {
          BOOL v70 = (char *)v36;
        }
        else {
          BOOL v70 = v5;
        }
        unint64_t v71 = v28 - v70;
        if ((unint64_t)(v28 - v70) < 8)
        {
          uint64_t v72 = v65;
          goto LABEL_133;
        }
        if ((unint64_t)((char *)v64 - v5) < 0x20)
        {
          uint64_t v72 = v65;
          goto LABEL_133;
        }
        if (v71 >= 0x20)
        {
          unint64_t v79 = v71 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v80 = (long long *)(v65 + 16);
          unsigned int v81 = (_OWORD *)((char *)v64 + v70 - v5 + 16);
          unint64_t v82 = v71 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v83 = *v80;
            *(v81 - 1) = *(v80 - 1);
            *unsigned int v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 32;
          }
          while (v82);
          if (v71 != v79)
          {
            if ((v71 & 0x18) == 0)
            {
              uint64_t v72 = &v65[v79];
              v66 += v79;
              goto LABEL_133;
            }
            goto LABEL_128;
          }
        }
        else
        {
          unint64_t v79 = 0;
LABEL_128:
          v66 += v71 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v72 = &v65[v71 & 0xFFFFFFFFFFFFFFF8];
          unsigned int v84 = &v65[v79];
          unint64_t v85 = (void *)((char *)v64 + &v70[v79] - v5);
          unint64_t v86 = v79 - (v71 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v87 = *(void *)v84;
            v84 += 8;
            *v85++ = v87;
            v86 += 8;
          }
          while (v86);
          if (v71 != (v71 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_133:
              char v88 = *v72++;
              *v66++ = v88;
            }
            while (v72 < v28);
          }
        }
      }
LABEL_134:
      *(void *)(v37 + 24) += v63;
      uint64_t v78 = *(void *)(v37 + 8);
      if (v63 >= 0x10000)
      {
        unint64_t v89 = (unint64_t)(v78 - *(void *)v37) >> 3;
        *(_DWORD *)(v37 + 72) = 1;
        *(_DWORD *)(v37 + 76) = v89;
      }
      goto LABEL_136;
    }
    while (1)
    {
      unint64_t v41 = v6;
      int v28 = (char *)v10 + 1;
      int v42 = v15 + 1;
      if (v26)
      {
        if (v42 - *(_DWORD *)(v11 + 28) > v139 && *(_DWORD *)(v11 + 32) == 0) {
          unsigned int v44 = v42 - v139;
        }
        else {
          unsigned int v44 = *(_DWORD *)(v11 + 28);
        }
        uint64_t v45 = (v42 - v9);
        uint64_t v46 = v134;
        if (v45 < v136) {
          uint64_t v46 = v140;
        }
        if ((v138 - v45) >= 3 && v45 > v44)
        {
          uint64_t v47 = v46 + v45;
          if (*(_DWORD *)v28 == *(_DWORD *)v47)
          {
            if (v45 >= v136) {
              int v48 = (char *)v41;
            }
            else {
              int v48 = v135;
            }
            unint64_t v49 = ZSTD_count_2segments((uint64_t *)((char *)v10 + 5), (char *)(v47 + 4), v41, v48, v133);
            if (v49 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v49 + 4) > (int)((__clz(v26 + 1) ^ 0xFFFFFFE0) + 3 * v25 + 2))
            {
              uint64_t v26 = 0;
              unint64_t v14 = (uint64_t *)((char *)v10 + 1);
              unint64_t v25 = v49 + 4;
            }
            uint64_t v11 = a1;
          }
        }
      }
      uint64_t v142 = 999999999;
      unint64_t v29 = ZSTD_BtFindBestMatch_extDict_selectMLS(v11, (uint64_t *)((char *)v10 + 1), v41, &v142);
      if (v29 >= 4
        && (uint64_t v27 = v142,
            (int)((__clz(v142 + 1) ^ 0xFFFFFFE0) + 4 * v29 + 1) > (int)((__clz(v26 + 1) ^ 0xFFFFFFE0) + 4 * v25 + 5)))
      {
        ++v15;
        unint64_t v6 = v41;
      }
      else
      {
        if ((unint64_t)v28 >= v141)
        {
          LODWORD(v27) = v26;
          int v28 = (char *)v14;
          unint64_t v29 = v25;
          unint64_t v6 = v41;
          uint64_t v11 = a1;
          a3 = v132;
          if (v26) {
            goto LABEL_33;
          }
LABEL_116:
          unint64_t v36 = v128;
          uint64_t v37 = a2;
          uint64_t v7 = v134;
          LODWORD(v8) = v136;
          uint64_t v39 = v126;
          unint64_t v38 = v127;
          unint64_t v63 = v28 - v5;
          int v64 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v28 > v128) {
            goto LABEL_102;
          }
LABEL_117:
          *int v64 = *(_OWORD *)v5;
          uint64_t v73 = *(void *)(v37 + 24);
          if (v63 > 0x10)
          {
            uint64_t v74 = (_OWORD *)(v73 + 16);
            unint64_t v75 = v73 + v63;
            int v76 = (long long *)(v5 + 16);
            do
            {
              long long v77 = *v76++;
              *v74++ = v77;
            }
            while ((unint64_t)v74 < v75);
            goto LABEL_134;
          }
          *(void *)(v37 + 24) = v73 + v63;
          uint64_t v78 = *(void *)(v37 + 8);
LABEL_136:
          *(_WORD *)(v78 + 4) = v63;
          *(_DWORD *)uint64_t v78 = v27 + 1;
          if (v29 - 3 >= 0x10000)
          {
            unint64_t v90 = (unint64_t)(v78 - *(void *)v37) >> 3;
            *(_DWORD *)(v37 + 72) = 2;
            *(_DWORD *)(v37 + 76) = v90;
          }
          *(_WORD *)(v78 + 6) = v29 - 3;
          uint64_t v91 = v78 + 8;
          *(void *)(v37 + 8) = v78 + 8;
          unint64_t v5 = &v28[v29];
          if ((unint64_t)&v28[v29] > v141)
          {
            uint64_t v10 = (uint64_t *)&v28[v29];
            goto LABEL_7;
          }
          uint64_t v92 = (unsigned int *)v9;
          unint64_t v93 = (unsigned int *)a3;
          while (2)
          {
            unint64_t v9 = (unint64_t)v93;
            unint64_t v93 = v92;
            unsigned int v94 = *(_DWORD *)(v11 + 28);
            if (v5 - v7 - v94 > v139 && *(_DWORD *)(v11 + 32) == 0) {
              unsigned int v94 = v5 - v7 - v139;
            }
            uint64_t v96 = (v5 - v7 - v9);
            if (v96 >= v8) {
              uint64_t v97 = v7;
            }
            else {
              uint64_t v97 = v140;
            }
            if ((v138 - v96) >= 3 && v96 > v94)
            {
              uint64_t v98 = v97 + v96;
              if (*(_DWORD *)v5 == *(_DWORD *)(v97 + v96))
              {
                if (v96 >= v8) {
                  unsigned int v99 = (void *)v6;
                }
                else {
                  unsigned int v99 = v135;
                }
                uint64_t v100 = v5 + 4;
                uint64_t v101 = (void *)(v98 + 4);
                unsigned int v102 = (char *)v99 + (void)v5 - v98;
                if ((unint64_t)v102 >= v6) {
                  unsigned int v102 = (char *)v6;
                }
                if (v102 - 7 <= v100)
                {
                  uint64_t v105 = v5 + 4;
                  uint64_t v106 = v101;
                  if (v100 < v102 - 3)
                  {
LABEL_163:
                    if (*v106 == *(_DWORD *)v105)
                    {
                      v105 += 4;
                      ++v106;
                    }
                  }
                }
                else
                {
                  unint64_t v103 = *(void *)v100 ^ *v101;
                  if (v103)
                  {
                    unint64_t v104 = __clz(__rbit64(v103)) >> 3;
                    if ((void *)((char *)v101 + v104) != v99) {
                      goto LABEL_191;
                    }
LABEL_170:
                    uint64_t v107 = &v100[v104];
                    if (v38 <= (unint64_t)v107)
                    {
                      uint64_t v114 = v107;
                      uint64_t v115 = v133;
                      if ((unint64_t)v107 >= v131) {
                        goto LABEL_185;
                      }
                    }
                    else
                    {
                      unint64_t v108 = *(void *)v107 ^ *(void *)v133;
                      if (v108)
                      {
                        unint64_t v109 = __clz(__rbit64(v108)) >> 3;
                        goto LABEL_190;
                      }
                      uint64_t v118 = 0;
                      uint64_t v119 = (uint64_t)&v5[v104 + 12];
                      while (1)
                      {
                        int v120 = (void *)(v119 + v118);
                        if (v119 + v118 >= v38) {
                          break;
                        }
                        uint64_t v121 = *(void *)(v39 + v118);
                        v118 += 8;
                        unint64_t v122 = *v120 ^ v121;
                        if (v122)
                        {
                          unint64_t v109 = v118 + (__clz(__rbit64(v122)) >> 3);
                          goto LABEL_190;
                        }
                      }
                      uint64_t v114 = &v5[v104 + 12 + v118];
                      uint64_t v115 = (unsigned __int8 *)(v39 + v118);
                      if ((unint64_t)v114 >= v131)
                      {
LABEL_185:
                        if ((unint64_t)v114 < v130)
                        {
                          if (*(unsigned __int16 *)v115 == *(unsigned __int16 *)v114)
                          {
                            v114 += 2;
                            v115 += 2;
                          }
                          if ((unint64_t)v114 < v6)
                          {
LABEL_187:
                            if (*v115 == *v114) {
                              ++v114;
                            }
                          }
                        }
                        else if ((unint64_t)v114 < v6)
                        {
                          goto LABEL_187;
                        }
                        unint64_t v109 = v114 - v107;
LABEL_190:
                        v104 += v109;
LABEL_191:
                        if ((unint64_t)v5 <= v36)
                        {
                          *(_OWORD *)*(void *)(v37 + 24) = *(_OWORD *)v5;
                          uint64_t v91 = *(void *)(v37 + 8);
                          __int16 v116 = v104 + 1;
                          *(_WORD *)(v91 + 4) = 0;
                          *(_DWORD *)uint64_t v91 = 1;
                          if (v104 + 1 >= 0x10000) {
                            goto LABEL_195;
                          }
                        }
                        else
                        {
                          __int16 v116 = v104 + 1;
                          *(_WORD *)(v91 + 4) = 0;
                          *(_DWORD *)uint64_t v91 = 1;
                          if (v104 + 1 >= 0x10000)
                          {
LABEL_195:
                            unint64_t v117 = (unint64_t)(v91 - *(void *)v37) >> 3;
                            *(_DWORD *)(v37 + 72) = 2;
                            *(_DWORD *)(v37 + 76) = v117;
                          }
                        }
                        *(_WORD *)(v91 + 6) = v116;
                        v91 += 8;
                        v5 += v104 + 4;
                        *(void *)(v37 + 8) = v91;
                        uint64_t v92 = (unsigned int *)v9;
                        LODWORD(a3) = v93;
                        uint64_t v10 = (uint64_t *)v5;
                        if ((unint64_t)v5 > v141) {
                          goto LABEL_7;
                        }
                        continue;
                      }
                    }
                    if (*(_DWORD *)v115 == *(_DWORD *)v114)
                    {
                      v114 += 4;
                      v115 += 4;
                    }
                    goto LABEL_185;
                  }
                  int v110 = v5 + 12;
                  while (1)
                  {
                    uint64_t v111 = &v110[v103];
                    if (&v110[v103] >= v102 - 7) {
                      break;
                    }
                    uint64_t v112 = *(void *)(v97 + v96 + 12 + v103);
                    v103 += 8;
                    unint64_t v113 = *(void *)v111 ^ v112;
                    if (v113)
                    {
                      unint64_t v104 = v103 + (__clz(__rbit64(v113)) >> 3);
                      if ((void *)((char *)v101 + v104) != v99) {
                        goto LABEL_191;
                      }
                      goto LABEL_170;
                    }
                  }
                  uint64_t v105 = &v5[v103 + 12];
                  uint64_t v106 = (_DWORD *)(v97 + v96 + v103 + 12);
                  if (v105 < v102 - 3) {
                    goto LABEL_163;
                  }
                }
                if (v105 < v102 - 1)
                {
                  if (*(unsigned __int16 *)v106 == *(unsigned __int16 *)v105)
                  {
                    v105 += 2;
                    uint64_t v106 = (_DWORD *)((char *)v106 + 2);
                  }
                  if (v105 < v102)
                  {
LABEL_167:
                    if (*(unsigned __int8 *)v106 == *v105) {
                      ++v105;
                    }
                  }
                }
                else if (v105 < v102)
                {
                  goto LABEL_167;
                }
                unint64_t v104 = v105 - v100;
                if ((void *)((char *)v101 + v105 - v100) == v99) {
                  goto LABEL_170;
                }
                goto LABEL_191;
              }
            }
            break;
          }
          LODWORD(a3) = v9;
          unint64_t v9 = (unint64_t)v92;
          uint64_t v10 = (uint64_t *)v5;
LABEL_7:
          if ((unint64_t)v10 >= v141) {
            break;
          }
          goto LABEL_8;
        }
        int v28 = (char *)v10 + 2;
        v15 += 2;
        if (v26)
        {
          uint64_t v50 = a1;
          if (v15 - *(_DWORD *)(a1 + 28) > v139 && *(_DWORD *)(a1 + 32) == 0) {
            unsigned int v52 = v15 - v139;
          }
          else {
            unsigned int v52 = *(_DWORD *)(a1 + 28);
          }
          uint64_t v53 = (v15 - v9);
          uint64_t v54 = v134;
          if (v53 < v136) {
            uint64_t v54 = v140;
          }
          unint64_t v6 = v41;
          if ((v138 - v53) >= 3 && v53 > v52)
          {
            uint64_t v55 = v54 + v53;
            if (*(_DWORD *)v28 == *(_DWORD *)v55)
            {
              if (v53 >= v136) {
                unint64_t v56 = (char *)v41;
              }
              else {
                unint64_t v56 = v135;
              }
              unint64_t v57 = ZSTD_count_2segments((uint64_t *)((char *)v10 + 6), (char *)(v55 + 4), v41, v56, v133);
              uint64_t v50 = a1;
              unint64_t v58 = v57 + 4;
              int v59 = (__clz(v26 + 1) ^ 0xFFFFFFE0) + 4 * v25 + 2;
              BOOL v60 = v59 < 4 * ((int)v57 + 4);
              if (v59 < 4 * ((int)v57 + 4)) {
                uint64_t v61 = 0;
              }
              else {
                uint64_t v61 = v26;
              }
              if (v60) {
                uint64_t v62 = (uint64_t *)((char *)v10 + 2);
              }
              else {
                uint64_t v62 = v14;
              }
              if (!v60) {
                unint64_t v58 = v25;
              }
              if (v57 <= 0xFFFFFFFFFFFFFFFBLL)
              {
                uint64_t v26 = v61;
                unint64_t v14 = v62;
                unint64_t v25 = v58;
              }
            }
          }
        }
        else
        {
          unint64_t v6 = v41;
          uint64_t v50 = a1;
        }
        uint64_t v142 = 999999999;
        unint64_t v29 = ZSTD_BtFindBestMatch_extDict_selectMLS(v50, (uint64_t *)((char *)v10 + 2), v6, &v142);
        if (v29 < 4
          || (uint64_t v27 = v142,
              (int)((__clz(v142 + 1) ^ 0xFFFFFFE0) + 4 * v29 + 1) <= (int)((__clz(v26 + 1) ^ 0xFFFFFFE0) + 4 * v25 + 8)))
        {
          LODWORD(v27) = v26;
          int v28 = (char *)v14;
          unint64_t v29 = v25;
          uint64_t v11 = a1;
          a3 = v132;
          if (v26) {
            goto LABEL_33;
          }
          goto LABEL_116;
        }
      }
      uint64_t v11 = a1;
      uint64_t v10 = (uint64_t *)v28;
      unint64_t v25 = v29;
      unint64_t v14 = (uint64_t *)v28;
      uint64_t v26 = v27;
      if ((unint64_t)v28 >= v141) {
        goto LABEL_32;
      }
    }
  }
  *uint64_t v124 = v9;
  v124[1] = a3;
  return v6 - (void)v5;
}