unint64_t ZSTD_compressBlock_btopt_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7;
  char **v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  long long *v15;
  long long v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unsigned int i;
  int inserted;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  void *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  _DWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  void *v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v89;
  void *v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  _DWORD *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  unsigned int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  void *v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v130;
  void *v131;
  int v132;
  unsigned int v133;
  unint64_t v134;
  _DWORD *v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unsigned int v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  void *v161;
  int v162;
  unint64_t v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v168;
  void *v169;
  int v170;
  unsigned int v171;
  unint64_t v172;
  _DWORD *v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  BOOL v188;
  char **v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  char *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  _DWORD *v199;
  void *v200;
  unint64_t v201;
  unsigned __int8 *v202;
  unsigned int *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unsigned int v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  unint64_t v213;
  char *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  _DWORD *v219;
  void *v220;
  unint64_t v221;
  unsigned __int8 *v222;
  unsigned int *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unsigned int v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  unint64_t v233;
  char *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  _DWORD *v239;
  void *v240;
  unint64_t v241;
  unsigned __int8 *v242;
  unsigned int *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  unint64_t v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unint64_t v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  _DWORD *v261;
  _DWORD *v262;
  unint64_t v263;
  unsigned __int8 *v264;
  unsigned int *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unsigned __int8 *v272;
  uint64_t v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  _DWORD *v280;
  int v281;
  unsigned int v282;
  unsigned int v283;
  _DWORD *v284;
  unint64_t v285;
  uint64_t v286;
  unsigned int *v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v300;
  int v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int *v311;
  unsigned int *v312;
  unsigned int *v313;
  unint64_t v314;
  unsigned __int8 *v315;
  int v316;
  unsigned int v317;
  unint64_t v318;
  unsigned int v319;
  unsigned int *v320;
  unsigned int v321;
  uint64_t v322;
  unsigned __int8 *v323;
  unsigned int v324;
  int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  uint64_t v333;
  signed int v334;
  signed int *v335;
  _DWORD *v336;
  signed int v337;
  signed int v338;
  unsigned int *v339;
  unsigned int v340;
  unsigned int *v341;
  unint64_t v342;
  unsigned int v343;
  unsigned int v344;
  signed int *v345;
  uint64_t v346;
  unsigned int *v347;
  unsigned int *v348;
  int v349;
  unint64_t v350;
  uint64_t v351;
  unsigned int v352;
  unint64_t v353;
  unsigned int *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  unsigned int j;
  int v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int v365;
  void *v366;
  int v367;
  unint64_t v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v372;
  int v373;
  uint64_t v374;
  unint64_t v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int v380;
  unsigned int v381;
  unsigned int v382;
  uint64_t v384;
  uint64_t v385;
  int v386;
  unsigned int v387;
  unint64_t v388;
  void *v390;
  void *v391;
  unint64_t v392;
  unint64_t v393;
  _DWORD *v394;
  unsigned int v395;
  void *v396;
  uint64_t v397;
  unsigned int v398;
  int v399;
  unint64_t v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v404;
  int v405;
  uint64_t v406;
  unint64_t v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  unsigned int v413;
  unsigned int v414;
  uint64_t v416;
  uint64_t v417;
  int v418;
  unsigned int v419;
  unint64_t v420;
  void *v422;
  void *v423;
  unint64_t v424;
  unint64_t v425;
  _DWORD *v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  void *v431;
  uint64_t v432;
  unsigned int v433;
  int v434;
  unint64_t v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v439;
  int v440;
  uint64_t v441;
  unint64_t v442;
  unsigned int v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int v449;
  uint64_t v451;
  uint64_t v452;
  int v453;
  unsigned int v454;
  unint64_t v455;
  void *v457;
  void *v458;
  unint64_t v459;
  unint64_t v460;
  _DWORD *v461;
  unsigned int v462;
  void *v463;
  uint64_t v464;
  unsigned int v465;
  int v466;
  unint64_t v467;
  unsigned int v468;
  unsigned int v469;
  unsigned int v471;
  int v472;
  uint64_t v473;
  unint64_t v474;
  unsigned int v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  uint64_t v484;
  uint64_t v485;
  int v486;
  unsigned int v487;
  unint64_t v488;
  void *v490;
  void *v491;
  unint64_t v492;
  unint64_t v493;
  _DWORD *v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  BOOL v502;
  unsigned int v503;
  unint64_t v504;
  unint64_t v505;
  int v506;
  unint64_t v507;
  uint64_t v508;
  unsigned __int8 *v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  _DWORD *v515;
  void *v516;
  unint64_t v517;
  char *v518;
  unsigned int *v519;
  uint64_t v520;
  char *v521;
  char *v522;
  uint64_t v523;
  unint64_t v524;
  unsigned int v525;
  unint64_t v526;
  unint64_t v527;
  int v528;
  unint64_t v529;
  unsigned __int8 *v530;
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  unsigned int v536;
  _DWORD *v537;
  void *v538;
  unint64_t v539;
  char *v540;
  unsigned int *v541;
  uint64_t v542;
  char *v543;
  char *v544;
  uint64_t v545;
  unint64_t v546;
  unsigned int v547;
  unint64_t v548;
  unint64_t v549;
  int v550;
  unint64_t v551;
  unsigned __int8 *v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  unsigned int v558;
  _DWORD *v559;
  void *v560;
  unint64_t v561;
  char *v562;
  unsigned int *v563;
  uint64_t v564;
  char *v565;
  char *v566;
  uint64_t v567;
  unint64_t v568;
  unsigned int v569;
  unint64_t v570;
  unint64_t v571;
  int v572;
  unint64_t v573;
  unsigned __int8 *v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  unsigned int v580;
  _DWORD *v581;
  _DWORD *v582;
  unint64_t v583;
  char *v584;
  unsigned int *v585;
  uint64_t v586;
  char *v587;
  char *v588;
  uint64_t v589;
  unint64_t v590;
  uint64_t v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unsigned int v596;
  _DWORD *v597;
  signed int *v598;
  unsigned int v599;
  unsigned int v600;
  signed int v601;
  uint64_t v602;
  int v603;
  int v604;
  int v605;
  unsigned int v606;
  signed int *v607;
  unint64_t v608;
  signed int v609;
  uint64_t v610;
  unint64_t v611;
  unint64_t v612;
  _DWORD *v613;
  _DWORD *v614;
  int v615;
  int v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  int v621;
  unsigned int v622;
  signed int *v623;
  unsigned int v624;
  unsigned int v625;
  unint64_t v626;
  signed int v627;
  uint64_t v628;
  unint64_t v629;
  unint64_t v630;
  _DWORD *v631;
  _DWORD *v632;
  _DWORD *v633;
  unint64_t v634;
  unsigned __int8 *v635;
  uint64_t v637;
  char *v638;
  char *v639;
  uint64_t v640;
  unint64_t v641;
  unsigned int *v642;
  unsigned int *v643;
  unsigned int *v644;
  unint64_t v645;
  unsigned int v646;
  unsigned int v647;
  unsigned int v648;
  unint64_t v649;
  uint64_t v650;
  unsigned int v651;
  unsigned int v652;
  unsigned int *v653;
  unsigned int v654;
  unsigned int *v655;
  unsigned int v656;
  unsigned int *v657;
  long long v658;
  BOOL v659;
  unsigned int v660;
  uint64_t v661;
  unsigned int v662;
  uint64_t v663;
  unsigned int v664;
  unsigned int v665;
  char *v666;
  unsigned __int8 *v667;
  uint64_t v668;
  int v669;
  unsigned int v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int v673;
  unsigned int v674;
  unsigned __int8 *v675;
  char *v676;
  unsigned __int8 *v677;
  unsigned __int8 *v678;
  char *v679;
  uint64_t v680;
  _OWORD *v681;
  unint64_t v682;
  long long *v683;
  long long v684;
  unsigned __int8 *v685;
  char *v686;
  long long v687;
  unint64_t v688;
  unint64_t v689;
  unsigned __int8 *v690;
  uint64_t v691;
  unint64_t v692;
  long long *v693;
  char *v694;
  unint64_t v695;
  long long v696;
  unsigned __int8 *v697;
  char *v698;
  unint64_t v699;
  uint64_t v700;
  char v701;
  unint64_t v702;
  unint64_t v703;
  unsigned int v704;
  _DWORD *v705;
  unint64_t v706;
  unsigned int v707;
  unsigned int *v708;
  uint64_t v709;
  unsigned __int8 *v710;
  unint64_t v712;
  void *v713;
  void *v714;
  uint64_t v715;
  unint64_t v716;
  unsigned int v718;
  uint64_t v719;
  unsigned int *v720;
  int v721;
  int v722;
  int v723;
  int v724;
  uint64_t v725;
  unint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unsigned int v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v736;
  void *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unsigned int v743;
  unsigned int v744;
  unsigned int v745;
  unsigned int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unsigned int v750;
  unsigned int v751;
  unsigned int v752;
  unsigned int v753;
  char *v754;
  char *v755;
  char *v756;
  uint64_t v757;
  unint64_t v758;
  unint64_t v759;
  unint64_t v760;
  unint64_t v761;
  unsigned int v762;
  unsigned int v763;
  unsigned int v764;
  char *v765;
  unsigned int v766;
  unsigned int v767;
  unsigned int v768;
  unsigned int v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;
  unsigned int v773;
  int v774;
  int v775;
  int v776;
  int v777;
  unsigned int v778;
  unsigned int v779;
  unsigned int v780;
  unsigned int v781;
  uint64_t v782;
  unint64_t v783;
  uint64_t v784;
  unint64_t v785;
  unint64_t v786;
  uint64_t v787;
  unsigned int v788;
  unsigned int v789;
  unsigned int v790;
  unsigned int v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  _DWORD *v799;
  unsigned int v800;
  unsigned int v801;
  unsigned int v802;
  unsigned int v803;
  unsigned int v804;
  uint64_t v805;
  unsigned int v806;
  unsigned int v807;
  unsigned int v808;
  unsigned int v809;
  int v810;
  int v811;
  uint64_t v812;
  int v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unsigned int v817;
  unsigned int v818;
  int v819;
  unsigned int v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  _DWORD *v824;
  int v825;
  int v826;
  int v827;
  unint64_t v828;
  unsigned int v829;
  unsigned int v830;
  unsigned int v831;
  unsigned int v832;
  _DWORD *v833;
  _DWORD *v834;
  _DWORD *v835;
  unsigned int v836;
  void *v837;
  uint64_t v838;
  uint64_t v839;
  unint64_t v840;
  unint64_t v841;
  uint64_t v842;
  unsigned int v843;
  unsigned int v844;
  unsigned int v845;
  int v846;
  int v847;
  int v848;
  char *v849;
  unsigned int v850;
  unsigned int v851;
  uint64_t v852;
  unsigned int v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  void *v858;
  void *v859;
  unsigned int v860;
  int v861;
  unsigned int v862;
  unsigned int v863;
  unsigned int v864;
  uint64_t v865;
  char *v866;
  char *v867;
  void *v868;
  void *v869;
  int v870;
  int v871;
  int v872;
  unsigned int *v873;
  unint64_t v874;
  unint64_t v875;
  char *v876;
  char *v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unsigned int *v881;
  unsigned int *v882;
  unsigned int *v883;
  unint64_t v884;
  unsigned int v885;
  unsigned int v886;
  unsigned int v887;
  unsigned int v888;
  unsigned int *v889;
  unsigned int *v890;
  uint64_t v891;
  void *v892;
  void *v893;
  void *v894;
  unsigned int v895;
  unsigned int v896;
  unsigned int v897;
  unsigned int v898;
  char **v899;
  unsigned int v900;
  uint64_t v901;
  char *v902;
  char *v903;
  char *v904;
  unsigned int v905;
  unsigned int *v906;
  unint64_t v907;
  unint64_t v908;
  unint64_t v909;
  signed int v910;
  unsigned int *v911;
  unsigned int *v912;
  unsigned int *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v918;
  unsigned int *v919;
  unsigned int *v920;
  unsigned int v921;
  unsigned int v922;
  int v923;
  int v924;
  int v925;
  int v926;
  unsigned __int8 *v927;
  unint64_t v928;
  uint64_t v929;
  unsigned int v930;
  unint64_t v931;
  unint64_t v932;
  unint64_t v933;
  int v934;
  int v935;
  int v936;
  int v937;
  unsigned __int8 *v938;
  unint64_t v939;
  unint64_t v940;
  unint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  unint64_t v946;
  unint64_t v947;
  unint64_t v948;
  unint64_t v949;
  unsigned __int8 *v950;
  unsigned int v952;
  unsigned int *v953;
  int v954;
  int v955;
  int v956;
  int v957;
  uint64_t v958;
  unsigned __int8 *v959;
  unint64_t v960;
  unsigned __int8 *v961;
  _DWORD *v962;
  _DWORD *v963;
  unsigned int v964;
  long long v965;
  long long v966;
  unsigned char v967[24];
  int v968;
  uint64_t v969;
  unsigned int v970;
  uint64_t v971;

  v7 = a1;
  v971 = *MEMORY[0x1E4F143B8];
  v8 = (char **)(a1 + 80);
  v927 = a4;
  v959 = &a4[a5];
  v928 = (unint64_t)&a4[a5 - 8];
  v9 = (unsigned __int8 *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
    v10 = 4095;
  }
  else {
    v10 = *(_DWORD *)(a1 + 212);
  }
  v900 = v10;
  if (*(_DWORD *)(a1 + 208) == 3) {
    v11 = 3;
  }
  else {
    v11 = 4;
  }
  v958 = v11;
  v12 = *(_DWORD *)(a1 + 36);
  v13 = *(void *)(a1 + 112);
  v14 = *(unsigned int **)(a1 + 120);
  v970 = 0;
  v969 = 0;
  v966 = 0u;
  memset(v967, 0, sizeof(v967));
  v965 = 0u;
  v15 = *(long long **)(a1 + 224);
  if (v15)
  {
    v16 = v15[1];
    v965 = *v15;
    v966 = v16;
    *(void *)v967 = *((void *)v15 + 4);
  }
  else
  {
    *(void *)v967 = 0;
    v965 = 0uLL;
    v966 = 0uLL;
  }
  *(void *)&v967[12] = 0;
  *(_DWORD *)&v967[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v965, 0, a5);
  ZSTD_rescaleFreqs(v8, v927, a5, 0);
  if (v9 == v927) {
    v17 = v927 + 1;
  }
  else {
    v17 = v927;
  }
  v18 = (unint64_t)v959;
  if ((unint64_t)v17 < v928)
  {
    v718 = v12;
    v800 = 0;
    v960 = (unint64_t)(v959 - 7);
    v939 = (unint64_t)(v959 - 1);
    v940 = (unint64_t)(v959 - 3);
    v19 = (v958 - 1) | 1;
    v963 = v14 + 14;
    v719 = v958 - v19;
    v720 = &v14[7 * v19];
    v20 = v927;
    v929 = v7;
    v899 = v8;
    v962 = (_DWORD *)v13;
    v738 = a2;
    while (1)
    {
      v952 = 0;
      v961 = v20;
      v22 = v17 - v20;
      v964 = 0;
      v23 = *(void *)(v7 + 8);
      v24 = *(unsigned int *)(v7 + 36);
      v950 = v17;
      if (v23 + v24 > (unint64_t)v17)
      {
        v25 = v8;
        goto LABEL_498;
      }
      v26 = *(_DWORD *)(v7 + 208);
      for (i = v17 - v23; v24 < i; LODWORD(v24) = inserted + v24)
      {
        inserted = ZSTD_insertBt1(v7, (void *)(v23 + v24), v18, v26, 1);
        v18 = (unint64_t)v959;
      }
      *(_DWORD *)(v7 + 36) = i;
      if ((v26 - 6) < 2)
      {
        v952 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          v65 = 4095;
        }
        else {
          v65 = *(_DWORD *)(v7 + 212);
        }
        v66 = *(void *)(v7 + 8);
        v67 = *(void *)(v7 + 16);
        v68 = v950 - v66;
        v69 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v870 = ~v69;
        v70 = v950 - v66 + v69 + 1;
        if ((int)v950 - (int)v66 < ~v69) {
          v70 = 0;
        }
        v862 = v70;
        v71 = *(unsigned int *)(v7 + 24);
        v72 = 1 << *(_DWORD *)(v7 + 192);
        if (v68 - *(_DWORD *)(v7 + 28) > v72 && *(_DWORD *)(v7 + 32) == 0) {
          v74 = v68 - v72;
        }
        else {
          v74 = *(_DWORD *)(v7 + 28);
        }
        v17 = v950;
        if (v74 <= 1) {
          v75 = 1;
        }
        else {
          v75 = v74;
        }
        v885 = v75;
        v76 = v68 - v71;
        v77 = v68 - v74;
        v78 = v7;
        v79 = v22 == 0;
        v80 = (char *)(v950 + 12);
        v775 = *(_DWORD *)(v78 + 204);
        v785 = (0xCF1BBCDCBF9B0000 * *(void *)v950) >> -(char)*(_DWORD *)(v78 + 200);
        v796 = *(void *)(v78 + 48);
        v802 = *(_DWORD *)(v796 + 4 * v785);
        v942 = v67;
        v902 = (char *)(v67 + v71);
        v907 = v71;
        v878 = v66;
        v892 = (void *)(v66 + v71);
        v854 = *(void *)(v78 + 64);
        v912 = (unsigned int *)(v854 + 8 * (v68 & ~v69));
        v919 = v912 + 1;
        v923 = v68 + 9;
        v968 = 0;
        if (v22) {
          v81 = 3;
        }
        else {
          v81 = 4;
        }
        v82 = v950 + 4;
        if (v22) {
          v83 = 0;
        }
        else {
          v83 = -1;
        }
        v84 = (v958 - 1);
        v843 = v65;
        v830 = v74;
        v818 = v68 - v74;
        v810 = v950 - v66;
        while (1)
        {
          if (v79 == 3)
          {
            v85 = *a3 - 1;
            v86 = v68 - v85;
            v87 = *a3 - 2;
            if (v87 >= v76) {
              goto LABEL_112;
            }
          }
          else
          {
            v85 = a3[v79];
            v86 = v68 - v85;
            v87 = v85 - 1;
            if (v85 - 1 >= v76)
            {
LABEL_112:
              if (v87 < v77 && v71 + ~v86 >= 3)
              {
                v89 = v942 + v86;
                if (*(_DWORD *)v17 == *(_DWORD *)v89)
                {
                  v931 = v84;
                  v90 = v82;
                  v91 = ZSTD_count_2segments(v82, (char *)(v89 + 4), v18, v902, v892);
                  v82 = v90;
                  v68 = v810;
                  v84 = v931;
                  v77 = v818;
                  v74 = v830;
                  v71 = v907;
                  v17 = v950;
                  v18 = (unint64_t)v959;
                  v92 = v91 + 4;
                  v65 = v843;
                  v93 = v92;
                  if (v931 < v92) {
                    goto LABEL_126;
                  }
                }
              }
              goto LABEL_109;
            }
          }
          if (v86 < v74 || *(_DWORD *)v17 != *(_DWORD *)&v17[-v85]) {
            goto LABEL_109;
          }
          v96 = -(uint64_t)v85;
          v97 = (char *)v82 - v85;
          if (v960 <= (unint64_t)v82) {
            break;
          }
          v98 = *v82 ^ *(void *)v97;
          if (v98)
          {
            v92 = (__clz(__rbit64(v98)) >> 3) + 4;
            v93 = v92;
            if (v84 < v92) {
              goto LABEL_126;
            }
            goto LABEL_109;
          }
          v100 = 0;
          do
          {
            v99 = &v80[v100];
            if ((unint64_t)&v80[v100] >= v960)
            {
              v97 = &v99[v96];
              if ((unint64_t)v99 >= v940) {
                goto LABEL_136;
              }
              goto LABEL_134;
            }
            v101 = *(void *)&v80[v96 + v100];
            v100 += 8;
            v102 = *(void *)v99 ^ v101;
          }
          while (!v102);
          v92 = v100 + (__clz(__rbit64(v102)) >> 3) + 4;
          v93 = v92;
          if (v84 < v92)
          {
LABEL_126:
            v95 = &v962[2 * v952];
            *v95 = v79 + v83;
            v95[1] = v92;
            ++v952;
            if (v92 > v65) {
              goto LABEL_497;
            }
            v84 = v93;
            if (&v17[v93] == (unsigned __int8 *)v18) {
              goto LABEL_497;
            }
          }
LABEL_109:
          if (++v79 >= v81)
          {
            *(_DWORD *)(v796 + 4 * v785) = v68;
            v103 = v802;
            if (v802 < v885)
            {
              v104 = v923;
              goto LABEL_155;
            }
            v191 = 0;
            v192 = 0;
            v193 = ~(-1 << v775);
            v846 = v68 + 2;
            v833 = v17 + 8;
            v821 = v878 + 8;
            v104 = v923;
            while (1)
            {
              v934 = v193;
              v194 = v192 >= v191 ? v191 : v192;
              v195 = (char *)&v17[v194];
              if (v194 + v103 >= v71) {
                break;
              }
              v925 = v104;
              v196 = ZSTD_count_2segments(v195, (char *)(v942 + v103 + v194), v18, v902, v892);
              v71 = v907;
              v197 = v196 + v194;
              if (v196 + v194 + v103 >= v907) {
                v198 = v878 + v103;
              }
              else {
                v198 = v942 + v103;
              }
              v104 = v925;
              if (v197 > v84) {
                goto LABEL_305;
              }
LABEL_326:
              v18 = (unint64_t)v959;
              v17 = v950;
LABEL_327:
              v203 = (unsigned int *)(v854 + 8 * (v103 & v870));
              if (*(unsigned __int8 *)(v198 + v197) >= v17[v197])
              {
                *v919 = v103;
                if (v103 <= v862)
                {
                  v919 = (unsigned int *)&v968;
                  goto LABEL_155;
                }
                v191 = v197;
                v919 = (unsigned int *)(v854 + 8 * (v103 & v870));
                v193 = v934 - 1;
                if (!v934) {
                  goto LABEL_155;
                }
              }
              else
              {
                *v912 = v103;
                if (v103 <= v862)
                {
                  v912 = (unsigned int *)&v968;
                  goto LABEL_155;
                }
                ++v203;
                v192 = v197;
                v912 = v203;
                v193 = v934 - 1;
                if (!v934) {
                  goto LABEL_155;
                }
              }
              v103 = *v203;
              if (*v203 < v885)
              {
LABEL_155:
                *v919 = 0;
                *v912 = 0;
                v105 = v104 - 8;
                goto LABEL_496;
              }
            }
            v198 = v878 + v103;
            v200 = (void *)(v198 + v194);
            if (v960 <= (unint64_t)v195)
            {
              v202 = &v17[v194];
              if ((unint64_t)v195 >= v940) {
                goto LABEL_317;
              }
            }
            else
            {
              v201 = *(void *)v195 ^ *v200;
              if (v201)
              {
                v197 = (__clz(__rbit64(v201)) >> 3) + v194;
                if (v197 <= v84) {
                  goto LABEL_326;
                }
                goto LABEL_305;
              }
              v204 = 0;
              v205 = (char *)v833 + v194;
              while (1)
              {
                v206 = &v205[v204];
                if ((unint64_t)&v205[v204] >= v960) {
                  break;
                }
                v207 = *(void *)(v821 + v194 + v103 + v204);
                v204 += 8;
                v208 = *(void *)v206 ^ v207;
                if (v208)
                {
                  v197 = v204 + (__clz(__rbit64(v208)) >> 3) + v194;
                  if (v197 <= v84) {
                    goto LABEL_326;
                  }
LABEL_305:
                  if (v197 > v104 - v103) {
                    v104 = v103 + v197;
                  }
                  v199 = &v962[2 * v952];
                  *v199 = v846 - v103;
                  v199[1] = v197;
                  ++v952;
                  v18 = (unint64_t)v959;
                  v17 = v950;
                  if (v197 > 0x1000) {
                    goto LABEL_155;
                  }
                  v84 = v197;
                  if (&v950[v197] == v959) {
                    goto LABEL_155;
                  }
                  goto LABEL_327;
                }
              }
              v202 = (unsigned __int8 *)v833 + v194 + v204;
              v200 = (void *)(v821 + v194 + v103 + v204);
              if ((unint64_t)v202 >= v940)
              {
LABEL_317:
                if ((unint64_t)v202 >= v939)
                {
                  if ((unint64_t)v202 >= v18) {
                    goto LABEL_325;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v200 == *(unsigned __int16 *)v202)
                  {
                    v202 += 2;
                    v200 = (void *)((char *)v200 + 2);
                  }
                  if ((unint64_t)v202 >= v18)
                  {
LABEL_325:
                    v197 = v202 - (unsigned __int8 *)v195 + v194;
                    if (v197 <= v84) {
                      goto LABEL_326;
                    }
                    goto LABEL_305;
                  }
                }
                if (*(unsigned __int8 *)v200 == *v202) {
                  ++v202;
                }
                goto LABEL_325;
              }
            }
            if (*(_DWORD *)v200 == *(_DWORD *)v202)
            {
              v202 += 4;
              v200 = (void *)((char *)v200 + 4);
            }
            goto LABEL_317;
          }
        }
        v99 = (char *)v82;
        if ((unint64_t)v82 >= v940) {
          goto LABEL_136;
        }
LABEL_134:
        if (*(_DWORD *)v97 == *(_DWORD *)v99)
        {
          v99 += 4;
          v97 += 4;
        }
LABEL_136:
        if ((unint64_t)v99 >= v939)
        {
          if ((unint64_t)v99 >= v18) {
            goto LABEL_144;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v97 == *(unsigned __int16 *)v99)
          {
            v99 += 2;
            v97 += 2;
          }
          if ((unint64_t)v99 >= v18)
          {
LABEL_144:
            v92 = v99 - v82 + 4;
            v93 = v92;
            if (v84 < v92) {
              goto LABEL_126;
            }
            goto LABEL_109;
          }
        }
        if (*v97 == *v99) {
          LODWORD(v99) = v99 + 1;
        }
        goto LABEL_144;
      }
      if (v26 == 5)
      {
        v952 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          v106 = 4095;
        }
        else {
          v106 = *(_DWORD *)(v7 + 212);
        }
        v107 = *(void *)(v7 + 8);
        v108 = *(void *)(v7 + 16);
        v109 = v950 - v107;
        v110 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v871 = ~v110;
        v111 = v950 - v107 + v110 + 1;
        if ((int)v950 - (int)v107 < ~v110) {
          v111 = 0;
        }
        v863 = v111;
        v112 = *(unsigned int *)(v7 + 24);
        v113 = 1 << *(_DWORD *)(v7 + 192);
        if (v109 - *(_DWORD *)(v7 + 28) > v113 && *(_DWORD *)(v7 + 32) == 0) {
          v115 = v109 - v113;
        }
        else {
          v115 = *(_DWORD *)(v7 + 28);
        }
        v17 = v950;
        if (v115 <= 1) {
          v116 = 1;
        }
        else {
          v116 = v115;
        }
        v886 = v116;
        v117 = v109 - v112;
        v118 = v109 - v115;
        v119 = v7;
        v120 = v22 == 0;
        v121 = (char *)(v950 + 12);
        v776 = *(_DWORD *)(v119 + 204);
        v786 = (0xCF1BBCDCBB000000 * *(void *)v950) >> -(char)*(_DWORD *)(v119 + 200);
        v797 = *(void *)(v119 + 48);
        v803 = *(_DWORD *)(v797 + 4 * v786);
        v943 = v108;
        v903 = (char *)(v108 + v112);
        v908 = v112;
        v879 = v107;
        v893 = (void *)(v107 + v112);
        v855 = *(void *)(v119 + 64);
        v913 = (unsigned int *)(v855 + 8 * (v109 & ~v110));
        v920 = v913 + 1;
        v924 = v109 + 9;
        v968 = 0;
        if (v22) {
          v122 = 3;
        }
        else {
          v122 = 4;
        }
        v123 = v950 + 4;
        if (v22) {
          v124 = 0;
        }
        else {
          v124 = -1;
        }
        v125 = (v958 - 1);
        v844 = v115;
        v831 = v109 - v112;
        v819 = v950 - v107;
        while (1)
        {
          if (v120 == 3)
          {
            v126 = *a3 - 1;
            v127 = v109 - v126;
            v128 = *a3 - 2;
            if (v128 >= v117) {
              goto LABEL_180;
            }
          }
          else
          {
            v126 = a3[v120];
            v127 = v109 - v126;
            v128 = v126 - 1;
            if (v126 - 1 >= v117)
            {
LABEL_180:
              if (v128 < v118 && v112 + ~v127 >= 3)
              {
                v130 = v943 + v127;
                if (*(_DWORD *)v17 == *(_DWORD *)v130)
                {
                  v932 = v125;
                  v131 = v123;
                  v132 = ZSTD_count_2segments(v123, (char *)(v130 + 4), v18, v903, v893);
                  v123 = v131;
                  v121 = (char *)(v950 + 12);
                  v109 = v819;
                  v125 = v932;
                  v117 = v831;
                  v112 = v908;
                  v17 = v950;
                  v18 = (unint64_t)v959;
                  v133 = v132 + 4;
                  v115 = v844;
                  v134 = v133;
                  if (v932 < v133) {
                    goto LABEL_194;
                  }
                }
              }
              goto LABEL_177;
            }
          }
          if (v127 < v115 || *(_DWORD *)v17 != *(_DWORD *)&v17[-v126]) {
            goto LABEL_177;
          }
          v137 = -(uint64_t)v126;
          v138 = (char *)v123 - v126;
          if (v960 <= (unint64_t)v123) {
            break;
          }
          v139 = *v123 ^ *(void *)v138;
          if (v139)
          {
            v133 = (__clz(__rbit64(v139)) >> 3) + 4;
            v134 = v133;
            if (v125 < v133) {
              goto LABEL_194;
            }
            goto LABEL_177;
          }
          v141 = 0;
          do
          {
            v140 = &v121[v141];
            if ((unint64_t)&v121[v141] >= v960)
            {
              v138 = &v140[v137];
              if ((unint64_t)v140 >= v940) {
                goto LABEL_204;
              }
              goto LABEL_202;
            }
            v142 = *(void *)&v121[v137 + v141];
            v141 += 8;
            v143 = *(void *)v140 ^ v142;
          }
          while (!v143);
          v133 = v141 + (__clz(__rbit64(v143)) >> 3) + 4;
          v134 = v133;
          if (v125 < v133)
          {
LABEL_194:
            v136 = &v962[2 * v952];
            *v136 = v120 + v124;
            v136[1] = v133;
            ++v952;
            if (v133 > v106) {
              goto LABEL_497;
            }
            v125 = v134;
            if (&v17[v134] == (unsigned __int8 *)v18) {
              goto LABEL_497;
            }
          }
LABEL_177:
          if (++v120 >= v122)
          {
            *(_DWORD *)(v797 + 4 * v786) = v109;
            v209 = v803;
            if (v803 < v886) {
              goto LABEL_495;
            }
            v210 = 0;
            v211 = 0;
            v212 = ~(-1 << v776);
            v847 = v109 + 2;
            v834 = v17 + 8;
            v822 = v879 + 8;
            while (1)
            {
              v935 = v212;
              if (v211 >= v210) {
                v213 = v210;
              }
              else {
                v213 = v211;
              }
              v214 = (char *)&v17[v213];
              if (v213 + v209 < v112)
              {
                v215 = ZSTD_count_2segments(v214, (char *)(v943 + v209 + v213), v18, v903, v893);
                v112 = v908;
                v216 = v215 + v213;
                if (v215 + v213 + v209 >= v908) {
                  v217 = v879 + v209;
                }
                else {
                  v217 = v943 + v209;
                }
                if (v216 > v125) {
                  goto LABEL_352;
                }
LABEL_373:
                v18 = (unint64_t)v959;
                v17 = v950;
                goto LABEL_374;
              }
              v217 = v879 + v209;
              v220 = (void *)(v217 + v213);
              if (v960 <= (unint64_t)v214) {
                break;
              }
              v221 = *(void *)v214 ^ *v220;
              if (v221)
              {
                v216 = (__clz(__rbit64(v221)) >> 3) + v213;
                if (v216 <= v125) {
                  goto LABEL_373;
                }
                goto LABEL_352;
              }
              v224 = 0;
              v225 = (char *)v834 + v213;
              do
              {
                v226 = &v225[v224];
                if ((unint64_t)&v225[v224] >= v960)
                {
                  v222 = (unsigned __int8 *)v834 + v213 + v224;
                  v220 = (void *)(v822 + v213 + v209 + v224);
                  if ((unint64_t)v222 >= v940) {
                    goto LABEL_364;
                  }
                  goto LABEL_362;
                }
                v227 = *(void *)(v822 + v213 + v209 + v224);
                v224 += 8;
                v228 = *(void *)v226 ^ v227;
              }
              while (!v228);
              v216 = v224 + (__clz(__rbit64(v228)) >> 3) + v213;
              if (v216 <= v125) {
                goto LABEL_373;
              }
LABEL_352:
              v218 = v924;
              if (v216 > v924 - v209) {
                v218 = v209 + v216;
              }
              v924 = v218;
              v219 = &v962[2 * v952];
              *v219 = v847 - v209;
              v219[1] = v216;
              ++v952;
              v18 = (unint64_t)v959;
              v17 = v950;
              if (v216 > 0x1000) {
                goto LABEL_495;
              }
              v125 = v216;
              if (&v950[v216] == v959) {
                goto LABEL_495;
              }
LABEL_374:
              v223 = (unsigned int *)(v855 + 8 * (v209 & v871));
              if (*(unsigned __int8 *)(v217 + v216) >= v17[v216])
              {
                *v920 = v209;
                if (v209 <= v863)
                {
LABEL_494:
                  v920 = (unsigned int *)&v968;
                  goto LABEL_495;
                }
                v210 = v216;
                v920 = (unsigned int *)(v855 + 8 * (v209 & v871));
                v212 = v935 - 1;
                if (!v935) {
                  goto LABEL_495;
                }
              }
              else
              {
                *v913 = v209;
                if (v209 <= v863) {
                  goto LABEL_493;
                }
                ++v223;
                v211 = v216;
                v913 = v223;
                v212 = v935 - 1;
                if (!v935) {
                  goto LABEL_495;
                }
              }
              v209 = *v223;
              if (*v223 < v886) {
                goto LABEL_495;
              }
            }
            v222 = &v17[v213];
            if ((unint64_t)v214 >= v940) {
              goto LABEL_364;
            }
LABEL_362:
            if (*(_DWORD *)v220 == *(_DWORD *)v222)
            {
              v222 += 4;
              v220 = (void *)((char *)v220 + 4);
            }
LABEL_364:
            if ((unint64_t)v222 >= v939)
            {
              if ((unint64_t)v222 >= v18) {
                goto LABEL_372;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v220 == *(unsigned __int16 *)v222)
              {
                v222 += 2;
                v220 = (void *)((char *)v220 + 2);
              }
              if ((unint64_t)v222 >= v18)
              {
LABEL_372:
                v216 = v222 - (unsigned __int8 *)v214 + v213;
                if (v216 <= v125) {
                  goto LABEL_373;
                }
                goto LABEL_352;
              }
            }
            if (*(unsigned __int8 *)v220 == *v222) {
              ++v222;
            }
            goto LABEL_372;
          }
        }
        v140 = (char *)v123;
        if ((unint64_t)v123 >= v940) {
          goto LABEL_204;
        }
LABEL_202:
        if (*(_DWORD *)v138 == *(_DWORD *)v140)
        {
          v140 += 4;
          v138 += 4;
        }
LABEL_204:
        if ((unint64_t)v140 >= v939)
        {
          if ((unint64_t)v140 >= v18) {
            goto LABEL_212;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v138 == *(unsigned __int16 *)v140)
          {
            v140 += 2;
            v138 += 2;
          }
          if ((unint64_t)v140 >= v18)
          {
LABEL_212:
            v133 = v140 - v123 + 4;
            v134 = v133;
            if (v125 < v133) {
              goto LABEL_194;
            }
            goto LABEL_177;
          }
        }
        if (*v138 == *v140) {
          LODWORD(v140) = v140 + 1;
        }
        goto LABEL_212;
      }
      if (v26 != 3)
      {
        v952 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          v144 = 4095;
        }
        else {
          v144 = *(_DWORD *)(v7 + 212);
        }
        v145 = *(void *)(v7 + 8);
        v146 = *(void *)(v7 + 16);
        v147 = v950 - v145;
        v148 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        v872 = ~v148;
        v149 = v950 - v145 + v148 + 1;
        if ((int)v950 - (int)v145 < ~v148) {
          v149 = 0;
        }
        v864 = v149;
        v150 = *(unsigned int *)(v7 + 24);
        v151 = 1 << *(_DWORD *)(v7 + 192);
        if (v147 - *(_DWORD *)(v7 + 28) > v151 && *(_DWORD *)(v7 + 32) == 0) {
          v153 = v147 - v151;
        }
        else {
          v153 = *(_DWORD *)(v7 + 28);
        }
        v17 = v950;
        if (v153 <= 1) {
          v154 = 1;
        }
        else {
          v154 = v153;
        }
        v887 = v154;
        v155 = v147 - v150;
        v156 = v147 - v153;
        v157 = v7;
        v158 = v22 == 0;
        v159 = (char *)(v950 + 12);
        v777 = *(_DWORD *)(v157 + 204);
        v787 = (-1640531535 * *(_DWORD *)v950) >> -(char)*(_DWORD *)(v157 + 200);
        v798 = *(void *)(v157 + 48);
        v804 = *(_DWORD *)(v798 + 4 * v787);
        v944 = v146;
        v904 = (char *)(v146 + v150);
        v909 = v150;
        v880 = v145;
        v894 = (void *)(v145 + v150);
        v856 = *(void *)(v157 + 64);
        v913 = (unsigned int *)(v856 + 8 * (v147 & ~v148));
        v920 = v913 + 1;
        v924 = v147 + 9;
        v968 = 0;
        if (v22) {
          v160 = 3;
        }
        else {
          v160 = 4;
        }
        v161 = v950 + 4;
        if (v22) {
          v162 = 0;
        }
        else {
          v162 = -1;
        }
        v163 = (v958 - 1);
        v845 = v153;
        v832 = v147 - v153;
        v820 = v147 - v150;
        v811 = v950 - v145;
        while (1)
        {
          if (v158 == 3)
          {
            v164 = *a3 - 1;
            v165 = v147 - v164;
            v166 = *a3 - 2;
            if (v166 >= v155) {
              goto LABEL_245;
            }
          }
          else
          {
            v164 = a3[v158];
            v165 = v147 - v164;
            v166 = v164 - 1;
            if (v164 - 1 >= v155)
            {
LABEL_245:
              if (v166 < v156 && v150 + ~v165 >= 3)
              {
                v168 = v944 + v165;
                if (*(_DWORD *)v17 == *(_DWORD *)v168)
                {
                  v933 = v163;
                  v169 = v161;
                  v170 = ZSTD_count_2segments(v161, (char *)(v168 + 4), v18, v904, v894);
                  v161 = v169;
                  v147 = v811;
                  v163 = v933;
                  v155 = v820;
                  v156 = v832;
                  v150 = v909;
                  v17 = v950;
                  v18 = (unint64_t)v959;
                  v171 = v170 + 4;
                  v153 = v845;
                  v172 = v171;
                  if (v933 < v171) {
                    goto LABEL_259;
                  }
                }
              }
              goto LABEL_242;
            }
          }
          if (v165 < v153 || *(_DWORD *)v17 != *(_DWORD *)&v17[-v164]) {
            goto LABEL_242;
          }
          v175 = -(uint64_t)v164;
          v176 = (char *)v161 - v164;
          if (v960 <= (unint64_t)v161) {
            break;
          }
          v177 = *v161 ^ *(void *)v176;
          if (v177)
          {
            v171 = (__clz(__rbit64(v177)) >> 3) + 4;
            v172 = v171;
            if (v163 < v171) {
              goto LABEL_259;
            }
            goto LABEL_242;
          }
          v179 = 0;
          do
          {
            v178 = &v159[v179];
            if ((unint64_t)&v159[v179] >= v960)
            {
              v176 = &v178[v175];
              if ((unint64_t)v178 >= v940) {
                goto LABEL_269;
              }
              goto LABEL_267;
            }
            v180 = *(void *)&v159[v175 + v179];
            v179 += 8;
            v181 = *(void *)v178 ^ v180;
          }
          while (!v181);
          v171 = v179 + (__clz(__rbit64(v181)) >> 3) + 4;
          v172 = v171;
          if (v163 < v171)
          {
LABEL_259:
            v174 = &v962[2 * v952];
            *v174 = v158 + v162;
            v174[1] = v171;
            ++v952;
            if (v171 > v144) {
              goto LABEL_497;
            }
            v163 = v172;
            if (&v17[v172] == (unsigned __int8 *)v18) {
              goto LABEL_497;
            }
          }
LABEL_242:
          if (++v158 >= v160)
          {
            *(_DWORD *)(v798 + 4 * v787) = v147;
            v229 = v804;
            if (v804 < v887) {
              goto LABEL_495;
            }
            v230 = 0;
            v231 = 0;
            v232 = ~(-1 << v777);
            v848 = v147 + 2;
            v835 = v17 + 8;
            v823 = v880 + 8;
            while (1)
            {
              v936 = v232;
              if (v231 >= v230) {
                v233 = v230;
              }
              else {
                v233 = v231;
              }
              v234 = (char *)&v17[v233];
              if (v233 + v229 < v150)
              {
                v235 = ZSTD_count_2segments(v234, (char *)(v944 + v229 + v233), v18, v904, v894);
                v150 = v909;
                v236 = v235 + v233;
                if (v235 + v233 + v229 >= v909) {
                  v237 = v880 + v229;
                }
                else {
                  v237 = v944 + v229;
                }
                if (v236 > v163) {
                  goto LABEL_399;
                }
LABEL_420:
                v18 = (unint64_t)v959;
                v17 = v950;
                goto LABEL_421;
              }
              v237 = v880 + v229;
              v240 = (void *)(v237 + v233);
              if (v960 <= (unint64_t)v234) {
                break;
              }
              v241 = *(void *)v234 ^ *v240;
              if (v241)
              {
                v236 = (__clz(__rbit64(v241)) >> 3) + v233;
                if (v236 <= v163) {
                  goto LABEL_420;
                }
                goto LABEL_399;
              }
              v244 = 0;
              v245 = (char *)v835 + v233;
              do
              {
                v246 = &v245[v244];
                if ((unint64_t)&v245[v244] >= v960)
                {
                  v242 = (unsigned __int8 *)v835 + v233 + v244;
                  v240 = (void *)(v823 + v233 + v229 + v244);
                  if ((unint64_t)v242 >= v940) {
                    goto LABEL_411;
                  }
                  goto LABEL_409;
                }
                v247 = *(void *)(v823 + v233 + v229 + v244);
                v244 += 8;
                v248 = *(void *)v246 ^ v247;
              }
              while (!v248);
              v236 = v244 + (__clz(__rbit64(v248)) >> 3) + v233;
              if (v236 <= v163) {
                goto LABEL_420;
              }
LABEL_399:
              v238 = v924;
              if (v236 > v924 - v229) {
                v238 = v229 + v236;
              }
              v924 = v238;
              v239 = &v962[2 * v952];
              *v239 = v848 - v229;
              v239[1] = v236;
              ++v952;
              v18 = (unint64_t)v959;
              v17 = v950;
              if (v236 > 0x1000 || (v163 = v236, &v950[v236] == v959))
              {
LABEL_495:
                *v920 = 0;
                *v913 = 0;
                v105 = v924 - 8;
LABEL_496:
                *(_DWORD *)(v929 + 36) = v105;
LABEL_497:
                v7 = v929;
                v25 = v899;
                v13 = (uint64_t)v962;
LABEL_498:
                v190 = (unint64_t)(v959 - 32);
                goto LABEL_499;
              }
LABEL_421:
              v243 = (unsigned int *)(v856 + 8 * (v229 & v872));
              if (*(unsigned __int8 *)(v237 + v236) < v17[v236])
              {
                *v913 = v229;
                if (v229 > v864)
                {
                  ++v243;
                  v231 = v236;
                  v913 = v243;
                  v232 = v936 - 1;
                  if (!v936) {
                    goto LABEL_495;
                  }
                  goto LABEL_390;
                }
LABEL_493:
                v913 = (unsigned int *)&v968;
                goto LABEL_495;
              }
              *v920 = v229;
              if (v229 <= v864) {
                goto LABEL_494;
              }
              v230 = v236;
              v920 = (unsigned int *)(v856 + 8 * (v229 & v872));
              v232 = v936 - 1;
              if (!v936) {
                goto LABEL_495;
              }
LABEL_390:
              v229 = *v243;
              if (*v243 < v887) {
                goto LABEL_495;
              }
            }
            v242 = &v17[v233];
            if ((unint64_t)v234 >= v940) {
              goto LABEL_411;
            }
LABEL_409:
            if (*(_DWORD *)v240 == *(_DWORD *)v242)
            {
              v242 += 4;
              v240 = (void *)((char *)v240 + 4);
            }
LABEL_411:
            if ((unint64_t)v242 >= v939)
            {
              if ((unint64_t)v242 >= v18) {
                goto LABEL_419;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v240 == *(unsigned __int16 *)v242)
              {
                v242 += 2;
                v240 = (void *)((char *)v240 + 2);
              }
              if ((unint64_t)v242 >= v18)
              {
LABEL_419:
                v236 = v242 - (unsigned __int8 *)v234 + v233;
                if (v236 <= v163) {
                  goto LABEL_420;
                }
                goto LABEL_399;
              }
            }
            if (*(unsigned __int8 *)v240 == *v242) {
              ++v242;
            }
            goto LABEL_419;
          }
        }
        v178 = (char *)v161;
        if ((unint64_t)v161 >= v940) {
          goto LABEL_269;
        }
LABEL_267:
        if (*(_DWORD *)v176 == *(_DWORD *)v178)
        {
          v178 += 4;
          v176 += 4;
        }
LABEL_269:
        if ((unint64_t)v178 >= v939)
        {
          if ((unint64_t)v178 >= v18) {
            goto LABEL_277;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v176 == *(unsigned __int16 *)v178)
          {
            v178 += 2;
            v176 += 2;
          }
          if ((unint64_t)v178 >= v18)
          {
LABEL_277:
            v171 = v178 - v161 + 4;
            v172 = v171;
            if (v163 < v171) {
              goto LABEL_259;
            }
            goto LABEL_242;
          }
        }
        if (*v176 == *v178) {
          LODWORD(v178) = v178 + 1;
        }
        goto LABEL_277;
      }
      v952 = 0;
      if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
        v29 = 4095;
      }
      else {
        v29 = *(_DWORD *)(v7 + 212);
      }
      v30 = *(void *)(v7 + 8);
      v31 = *(void *)(v7 + 16);
      v32 = v950 - v30;
      v33 = -1 << (*(_DWORD *)(v7 + 196) - 1);
      v861 = ~v33;
      v34 = v950 - v30 + v33 + 1;
      if ((int)v950 - (int)v30 < ~v33) {
        v34 = 0;
      }
      v853 = v34;
      v35 = *(unsigned int *)(v7 + 24);
      v36 = 1 << *(_DWORD *)(v7 + 192);
      if (v32 - *(_DWORD *)(v7 + 28) > v36 && *(_DWORD *)(v7 + 32) == 0) {
        v38 = v32 - v36;
      }
      else {
        v38 = *(_DWORD *)(v7 + 28);
      }
      v17 = v950;
      if (v38 <= 1) {
        v39 = 1;
      }
      else {
        v39 = v38;
      }
      v922 = v39;
      v40 = v32 - v35;
      v41 = v32 - v38;
      v42 = v7;
      v43 = v22 == 0;
      v44 = (char *)(v950 + 11);
      v774 = *(_DWORD *)(v42 + 204);
      v784 = (-1640531535 * *(_DWORD *)v950) >> -(char)*(_DWORD *)(v42 + 200);
      v795 = *(void *)(v42 + 48);
      v801 = *(_DWORD *)(v795 + 4 * v784);
      v877 = (char *)(v31 + v35);
      v869 = (void *)(v30 + v35);
      v829 = v950 - v30;
      v842 = *(void *)(v42 + 64);
      v911 = (unsigned int *)(v842 + 8 * (v32 & ~v33));
      v901 = v30;
      v906 = v911 + 1;
      v918 = v32 + 9;
      v968 = 0;
      if (v22) {
        v45 = 3;
      }
      else {
        v45 = 4;
      }
      v46 = v950 + 3;
      if (v22) {
        v47 = 0;
      }
      else {
        v47 = -1;
      }
      v941 = (v958 - 1);
      v884 = v35;
      v891 = v31;
      v930 = v29;
      v817 = v38;
      v809 = v32 - v35;
      do
      {
        if (v43 == 3)
        {
          v48 = *a3 - 1;
          v49 = v32 - v48;
          v50 = *a3 - 2;
          if (v50 >= v40) {
            goto LABEL_47;
          }
        }
        else
        {
          v48 = a3[v43];
          v49 = v32 - v48;
          v50 = v48 - 1;
          if (v48 - 1 >= v40)
          {
LABEL_47:
            v51 = v50 < v41 && v35 + ~v49 >= 3;
            if (!v51) {
              goto LABEL_44;
            }
            v52 = v31 + v49;
            if (((*(_DWORD *)v52 ^ *(_DWORD *)v17) & 0xFFFFFF) != 0) {
              goto LABEL_44;
            }
            v53 = ZSTD_count_2segments(v46, (char *)(v52 + 3), v18, v877, v869);
            v40 = v809;
            v32 = v829;
            v29 = v930;
            v35 = v884;
            v31 = v891;
            v30 = v901;
            v17 = v950;
            v18 = (unint64_t)v959;
            v54 = v53 + 3;
            v38 = v817;
            v55 = v54;
            if (v941 >= v54) {
              goto LABEL_44;
            }
            goto LABEL_61;
          }
        }
        if (v49 < v38 || ((*(_DWORD *)&v17[-v48] ^ *(_DWORD *)v17) & 0xFFFFFF) != 0) {
          goto LABEL_44;
        }
        v58 = -(uint64_t)v48;
        v59 = (char *)v46 - v48;
        if (v960 <= (unint64_t)v46)
        {
          v61 = (char *)(v950 + 3);
          if ((unint64_t)v46 < v940)
          {
LABEL_69:
            if (*(_DWORD *)v59 == *(_DWORD *)v61)
            {
              v61 += 4;
              v59 += 4;
            }
          }
          goto LABEL_71;
        }
        v60 = *v46 ^ *(void *)v59;
        if (!v60)
        {
          v62 = 0;
          while (1)
          {
            v61 = &v44[v62];
            if ((unint64_t)&v44[v62] >= v960) {
              break;
            }
            v63 = *(void *)&v44[v58 + v62];
            v62 += 8;
            v64 = *(void *)v61 ^ v63;
            if (v64)
            {
              v54 = v62 + (__clz(__rbit64(v64)) >> 3) + 3;
              v55 = v54;
              if (v941 >= v54) {
                goto LABEL_44;
              }
              goto LABEL_61;
            }
          }
          v59 = &v61[v58];
          if ((unint64_t)v61 < v940) {
            goto LABEL_69;
          }
LABEL_71:
          if ((unint64_t)v61 >= v939)
          {
            if ((unint64_t)v61 >= v18) {
              goto LABEL_79;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v59 == *(unsigned __int16 *)v61)
            {
              v61 += 2;
              v59 += 2;
            }
            if ((unint64_t)v61 >= v18)
            {
LABEL_79:
              v54 = v61 - v950;
              v55 = v54;
              if (v941 >= v54) {
                goto LABEL_44;
              }
              goto LABEL_61;
            }
          }
          if (*v59 == *v61) {
            LODWORD(v61) = v61 + 1;
          }
          goto LABEL_79;
        }
        v54 = (__clz(__rbit64(v60)) >> 3) + 3;
        v55 = v54;
        if (v941 >= v54) {
          goto LABEL_44;
        }
LABEL_61:
        v57 = &v962[2 * v952];
        *v57 = v43 + v47;
        v57[1] = v54;
        ++v952;
        if (v54 > v29 || (v941 = v55, &v17[v55] == (unsigned __int8 *)v18))
        {
          v7 = v929;
          v189 = v899;
          v13 = (uint64_t)v962;
          v190 = (unint64_t)(v959 - 32);
          goto LABEL_441;
        }
LABEL_44:
        ++v43;
      }
      while (v43 < v45);
      if (v941 > 2)
      {
        v189 = v899;
        v13 = (uint64_t)v962;
        v190 = (unint64_t)(v959 - 32);
        goto LABEL_437;
      }
      v7 = v929;
      v182 = *(void *)(v929 + 56);
      v183 = *(_DWORD *)v17;
      v184 = 32 - *(_DWORD *)(v929 + 40);
      v13 = (uint64_t)v962;
      if (v718 < v32)
      {
        v185 = v718;
        do
        {
          *(_DWORD *)(v182 + 4 * ((900185344 * *(_DWORD *)(v30 + v185)) >> v184)) = v185;
          ++v185;
        }
        while (v32 != v185);
      }
      v186 = *(unsigned int *)(v182 + 4 * ((900185344 * v183) >> v184));
      v187 = v32 - v186;
      v188 = v186 >= v922 && (v32 - v186) >> 18 == 0;
      v189 = v899;
      v190 = (unint64_t)(v959 - 32);
      if (!v188)
      {
        v718 = v32;
        v17 = v950;
        goto LABEL_437;
      }
      v17 = v950;
      if (v186 >= v35)
      {
        v705 = (_DWORD *)(v30 + v186);
        if (v960 <= (unint64_t)v950)
        {
          v710 = v950;
          if ((unint64_t)v950 < v940)
          {
LABEL_1206:
            if (*v705 == *(_DWORD *)v710)
            {
              v710 += 4;
              ++v705;
            }
          }
        }
        else
        {
          v706 = *(void *)v950 ^ *(void *)v705;
          if (v706)
          {
            v271 = __clz(__rbit64(v706)) >> 3;
            v718 = v32;
            if (v271 >= 3) {
              goto LABEL_1217;
            }
            goto LABEL_437;
          }
          v712 = 0;
          v713 = v950 + 8;
          while (1)
          {
            v714 = &v713[v712 / 8];
            if ((unint64_t)&v713[v712 / 8] >= v960) {
              break;
            }
            v715 = *(void *)(v30 + v186 + 8 + v712);
            v712 += 8;
            v716 = *v714 ^ v715;
            if (v716)
            {
              v271 = v712 + (__clz(__rbit64(v716)) >> 3);
              v17 = v950;
              v718 = v32;
              if (v271 >= 3) {
                goto LABEL_1217;
              }
              goto LABEL_437;
            }
          }
          v17 = v950;
          v710 = &v950[v712 + 8];
          v705 = (_DWORD *)(v30 + v186 + v712 + 8);
          if ((unint64_t)v710 < v940) {
            goto LABEL_1206;
          }
        }
        if ((unint64_t)v710 >= v939)
        {
          if ((unint64_t)v710 >= v18) {
            goto LABEL_1216;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v705 == *(unsigned __int16 *)v710)
          {
            v710 += 2;
            v705 = (_DWORD *)((char *)v705 + 2);
          }
          if ((unint64_t)v710 >= v18)
          {
LABEL_1216:
            v271 = v710 - v17;
            v718 = v32;
            if ((unint64_t)(v710 - v17) < 3) {
              goto LABEL_437;
            }
            goto LABEL_1217;
          }
        }
        if (*(unsigned __int8 *)v705 == *v710) {
          ++v710;
        }
        goto LABEL_1216;
      }
      v271 = ZSTD_count_2segments(v950, (char *)(v31 + v186), v18, v877, v869);
      v32 = v829;
      v29 = v930;
      v35 = v884;
      v31 = v891;
      v30 = v901;
      v189 = v899;
      v17 = v950;
      v18 = (unint64_t)v959;
      v718 = v829;
      if (v271 < 3) {
        goto LABEL_437;
      }
LABEL_1217:
      *v962 = v187 + 2;
      v962[1] = v271;
      if (v271 > v29 || &v17[v271] == (unsigned __int8 *)v18)
      {
        v251 = v32 + 1;
        v952 = 1;
        v718 = v32;
        goto LABEL_440;
      }
      v952 = 1;
      v718 = v32;
      v941 = v271;
LABEL_437:
      *(_DWORD *)(v795 + 4 * v784) = v32;
      v249 = v801;
      if (v801 < v922)
      {
        v250 = v918;
        goto LABEL_439;
      }
      v252 = 0;
      v253 = 0;
      v254 = ~(-1 << v774);
      v836 = v32 + 2;
      v812 = v30 + 8;
      v824 = v17 + 8;
      v250 = v918;
      while (2)
      {
        v937 = v254;
        if (v253 >= v252) {
          v255 = v252;
        }
        else {
          v255 = v253;
        }
        v256 = (char *)&v17[v255];
        if (v255 + v249 >= v35)
        {
          v260 = v30 + v249;
          v262 = (_DWORD *)(v260 + v255);
          if (v960 <= (unint64_t)v256)
          {
            v264 = &v17[v255];
            v189 = v899;
            v13 = (uint64_t)v962;
            if ((unint64_t)v256 < v940)
            {
LABEL_462:
              if (*v262 == *(_DWORD *)v264)
              {
                v264 += 4;
                ++v262;
              }
            }
          }
          else
          {
            v263 = *(void *)v256 ^ *(void *)v262;
            if (v263)
            {
              v189 = v899;
              v13 = (uint64_t)v962;
              v259 = (__clz(__rbit64(v263)) >> 3) + v255;
              v190 = (unint64_t)(v959 - 32);
              if (v259 <= v941) {
                goto LABEL_473;
              }
              goto LABEL_452;
            }
            v266 = 0;
            v267 = (char *)v824 + v255;
            while (1)
            {
              v268 = &v267[v266];
              if ((unint64_t)&v267[v266] >= v960) {
                break;
              }
              v269 = *(void *)(v812 + v255 + v249 + v266);
              v266 += 8;
              v270 = *(void *)v268 ^ v269;
              if (v270)
              {
                v189 = v899;
                v13 = (uint64_t)v962;
                v259 = v266 + (__clz(__rbit64(v270)) >> 3) + v255;
                v190 = (unint64_t)(v959 - 32);
                if (v259 > v941) {
                  goto LABEL_452;
                }
                goto LABEL_473;
              }
            }
            v264 = (unsigned __int8 *)v824 + v255 + v266;
            v262 = (_DWORD *)(v812 + v255 + v249 + v266);
            v189 = v899;
            v13 = (uint64_t)v962;
            if ((unint64_t)v264 < v940) {
              goto LABEL_462;
            }
          }
          if ((unint64_t)v264 >= v939)
          {
            if ((unint64_t)v264 >= v18) {
              goto LABEL_472;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v262 == *(unsigned __int16 *)v264)
            {
              v264 += 2;
              v262 = (_DWORD *)((char *)v262 + 2);
            }
            if ((unint64_t)v264 >= v18)
            {
LABEL_472:
              v259 = v264 - (unsigned __int8 *)v256 + v255;
              v190 = (unint64_t)(v959 - 32);
              if (v259 <= v941) {
                goto LABEL_473;
              }
LABEL_452:
              if (v259 > v250 - v249) {
                v250 = v249 + v259;
              }
              v261 = (_DWORD *)(v13 + 8 * v952);
              *v261 = v836 - v249;
              v261[1] = v259;
              ++v952;
              v18 = (unint64_t)v959;
              v17 = v950;
              if (v259 > 0x1000) {
                goto LABEL_439;
              }
              v941 = v259;
              if (&v950[v259] == v959) {
                goto LABEL_439;
              }
              goto LABEL_474;
            }
          }
          if (*(unsigned __int8 *)v262 == *v264) {
            ++v264;
          }
          goto LABEL_472;
        }
        v921 = v250;
        v257 = v31 + v249;
        v258 = ZSTD_count_2segments(v256, (char *)(v257 + v255), v18, v877, v869);
        v35 = v884;
        v31 = v891;
        v30 = v901;
        v259 = v258 + v255;
        if (v258 + v255 + v249 >= v884) {
          v260 = v901 + v249;
        }
        else {
          v260 = v257;
        }
        v250 = v921;
        v189 = v899;
        v13 = (uint64_t)v962;
        v190 = (unint64_t)(v959 - 32);
        if (v259 > v941) {
          goto LABEL_452;
        }
LABEL_473:
        v18 = (unint64_t)v959;
        v17 = v950;
LABEL_474:
        v265 = (unsigned int *)(v842 + 8 * (v249 & v861));
        if (*(unsigned __int8 *)(v260 + v259) < v17[v259])
        {
          *v911 = v249;
          if (v249 <= v853)
          {
            v911 = (unsigned int *)&v968;
            goto LABEL_439;
          }
          ++v265;
          v253 = v259;
          v911 = v265;
          v254 = v937 - 1;
          if (!v937) {
            goto LABEL_439;
          }
          goto LABEL_443;
        }
        *v906 = v249;
        if (v249 > v853)
        {
          v252 = v259;
          v906 = (unsigned int *)(v842 + 8 * (v249 & v861));
          v254 = v937 - 1;
          if (!v937) {
            goto LABEL_439;
          }
LABEL_443:
          v249 = *v265;
          if (*v265 < v922) {
            goto LABEL_439;
          }
          continue;
        }
        break;
      }
      v906 = (unsigned int *)&v968;
LABEL_439:
      *v906 = 0;
      *v911 = 0;
      v251 = v250 - 8;
      v7 = v929;
LABEL_440:
      *(_DWORD *)(v7 + 36) = v251;
LABEL_441:
      v25 = v189;
LABEL_499:
      v964 = v952;
      v272 = v17;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v965, v13, &v964, v17 - v927, v18 - v17);
      LODWORD(v273) = v964;
      if (v964)
      {
        v14[4] = *a3;
        v14[5] = a3[1];
        v14[6] = a3[2];
        v14[2] = 0;
        v14[3] = v22;
        v274 = *(_DWORD *)(v7 + 160);
        if (v274 != 1)
        {
          v18 = (unint64_t)v959;
          v20 = v961;
          v8 = v25;
          if (v22 < 0x40) {
            v278 = ZSTD_LLcode_LL_Code[v22];
          }
          else {
            v278 = 50 - __clz(v22);
          }
          v280 = *(_DWORD **)(v7 + 88);
          v281 = *(_DWORD *)(v7 + 148) + 1;
          v275 = v281 + (LL_bits[v278] << 8) + ((__clz(v280[v278] + 1) << 8) ^ 0xFFFFE0FF);
          *v14 = v275;
          v276 = (v273 - 1);
          v277 = *(_DWORD *)(v13 + 8 * v276 + 4);
          if (v277 <= v900)
          {
            v279 = v281 + ((__clz(*v280 + 1) << 8) ^ 0xFFFFE0FF);
            goto LABEL_512;
          }
LABEL_510:
          v282 = 0;
          v283 = *(_DWORD *)(v13 + 8 * v276);
          goto LABEL_1118;
        }
        v275 = (__clz(v22 + 1) << 8) ^ 0x1F00;
        *v14 = v275;
        v276 = (v273 - 1);
        v277 = *(_DWORD *)(v13 + 8 * v276 + 4);
        v18 = (unint64_t)v959;
        v20 = v961;
        if (v277 > v900)
        {
          v8 = v25;
          goto LABEL_510;
        }
        v279 = 0;
LABEL_512:
        v284 = v14 + 14;
        v285 = (v958 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v284 - 7) = 0x40000000;
          *v284 = 0x40000000;
          v284 += 14;
          v285 -= 2;
        }
        while (v285);
        if (v958 - 1 != ((v958 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          v286 = v719;
          v287 = v720;
          do
          {
            *v287 = 0x40000000;
            v287 += 7;
            --v286;
          }
          while (v286);
        }
        v288 = 0;
        v289 = v279 + v275;
        if (v273 <= 1) {
          v273 = 1;
        }
        else {
          v273 = v273;
        }
        v290 = v958;
        while (2)
        {
          v291 = (unsigned int *)(v13 + 8 * v288);
          v292 = v291[1];
          if (v290 <= v292)
          {
            v293 = *v291;
            v294 = __clz(v293 + 1) ^ 0x1F;
            if (v274 == 1)
            {
              v295 = (v294 << 8) + 4096;
              if (v290 + 1 <= v292 + 1) {
                v296 = v292 + 1;
              }
              else {
                v296 = v290 + 1;
              }
              v297 = v296 - v290;
              v298 = v296 - 1;
              if (v297 < 2 || v298 < v290)
              {
                v300 = v290;
                goto LABEL_543;
              }
              v300 = v290 + (v297 & 0xFFFFFFFE);
              v310 = v297 & 0xFFFFFFFE;
              do
              {
                v311 = &v14[7 * v290];
                v311[2] = v290;
                v311[3] = v22;
                v312 = &v14[7 * v290 + 7];
                v312[2] = v290 + 1;
                v312[3] = v22;
                *v311 = v289 + v295 + ((__clz(v290 - 2) << 8) ^ 0x1F00);
                v311[1] = v293;
                *v312 = v289 + v295 + ((__clz(v290 - 1) << 8) ^ 0x1F00);
                v312[1] = v293;
                v290 += 2;
                v310 -= 2;
              }
              while (v310);
              v290 = v300;
              if (v297 != (v297 & 0xFFFFFFFE))
              {
LABEL_543:
                v290 = v300;
                do
                {
                  v313 = &v14[7 * v290];
                  v313[2] = v290;
                  v313[3] = v22;
                  *v313 = v289 + v295 + ((__clz(v290 - 2) << 8) ^ 0x1F00);
                  v313[1] = v293;
                  ++v290;
                }
                while (v290 <= v292);
              }
            }
            else
            {
              if (v294 <= 0x13) {
                v301 = 53;
              }
              else {
                v301 = (v294 << 9) - 9675;
              }
              v302 = *(_DWORD *)(v7 + 152);
              v303 = *(void *)(v7 + 96);
              v304 = *(void *)(v7 + 104);
              v305 = v301 + *(_DWORD *)(v7 + 156);
              do
              {
                v309 = v290 - 3;
                if (v290 - 3 < 0x80) {
                  v306 = ZSTD_MLcode_ML_Code[v309];
                }
                else {
                  v306 = 67 - __clz(v309);
                }
                v307 = v289
                     + v305
                     + ((__clz(*(_DWORD *)(v304 + 4 * v294) + 1) << 8) ^ 0xFFFFE0FF)
                     + v302
                     + ((ML_bits[v306] + v294) << 8)
                     + ((__clz(*(_DWORD *)(v303 + 4 * v306) + 1) << 8) ^ 0xFFFFE0FF);
                v308 = &v14[7 * v290];
                v308[2] = v290;
                v308[3] = v22;
                *v308 = v307;
                v308[1] = v293;
                ++v290;
              }
              while (v290 <= v292);
            }
          }
          ++v288;
          v20 = v961;
          if (v288 != v273) {
            continue;
          }
          break;
        }
        LODWORD(v314) = v290 - 1;
        v315 = v950;
        if (v290 == 1) {
          goto LABEL_1114;
        }
        v737 = v950 + 8;
        v316 = v950 + 1;
        v317 = 1;
        v318 = v928;
        while (2)
        {
          v319 = v317 - 1;
          v320 = &v14[7 * v317 - 7];
          if (v320[2]) {
            v321 = 1u;
          }
          else {
            v321 = v14[7 * v319 + 3] + 1;
          }
          v322 = v317;
          v323 = &v315[v317];
          v324 = *v320;
          v325 = *(_DWORD *)(v7 + 160);
          if (*(_DWORD *)(v7 + 176) == 2)
          {
            v326 = v324 + 2048;
            if (v325 != 1)
            {
              if (v321 >= 0x40) {
                goto LABEL_556;
              }
LABEL_562:
              v327 = ZSTD_LLcode_LL_Code[v321];
              v328 = v321 - 1;
              if (v321 - 1 >= 0x40) {
                goto LABEL_563;
              }
LABEL_557:
              v329 = ZSTD_LLcode_LL_Code[v328];
              goto LABEL_564;
            }
LABEL_560:
            v330 = (__clz(v321 + 1) << 8) ^ 0x1F00;
            v331 = ((__clz(v321) << 8) ^ 0xFFFFE0FF) + 1;
          }
          else
          {
            if (v325 == 1)
            {
              v326 = v324 + 1536;
              goto LABEL_560;
            }
            v326 = *(_DWORD *)(v7 + 144)
                 + v324
                 + ((__clz(*(_DWORD *)(*(void *)(v7 + 80) + 4 * *(v323 - 1)) + 1) << 8) ^ 0xFFFFE0FF)
                 + 1;
            if (v321 < 0x40) {
              goto LABEL_562;
            }
LABEL_556:
            v327 = 50 - __clz(v321);
            v328 = v321 - 1;
            if (v321 - 1 < 0x40) {
              goto LABEL_557;
            }
LABEL_563:
            v329 = 50 - __clz(v328);
LABEL_564:
            v332 = *(_DWORD *)(v7 + 148);
            v333 = *(void *)(v7 + 88);
            v330 = v332 + (LL_bits[v327] << 8) + ((__clz(*(_DWORD *)(v333 + 4 * v327) + 1) << 8) ^ 0xFFFFE0FF) + 1;
            v331 = ~v332 - (LL_bits[v329] << 8) + ((__clz(*(_DWORD *)(v333 + 4 * v329) + 1) << 8) ^ 0x1F01);
            v315 = v950;
          }
          v334 = v326 + v330 + v331;
          v335 = (signed int *)&v14[7 * v322];
          v338 = *v335;
          v336 = v335 + 2;
          v337 = v338;
          if (v334 <= v338)
          {
            v345 = (signed int *)&v14[7 * v322];
            v345[1] = 0;
            v345[2] = 0;
            v345[3] = v321;
            *v345 = v334;
            v337 = v334;
LABEL_570:
            v346 = 0;
            v347 = &v14[7 * v322];
            v348 = &v14[7 * v319];
            *((void *)v347 + 2) = *((void *)v348 + 2);
            v347[6] = v348[6];
            v349 = 1;
            if ((unint64_t)v323 <= v318) {
              goto LABEL_583;
            }
LABEL_548:
            v317 = v322 + 1;
LABEL_549:
            ++v316;
            v190 = (unint64_t)(v959 - 32);
            if (v317 > v314) {
              goto LABEL_1114;
            }
            continue;
          }
          break;
        }
        if (!*v336) {
          goto LABEL_570;
        }
        v339 = &v14[7 * (v322 - *v336) + 4];
        v340 = v14[7 * v322 + 1];
        if (v340 < 3)
        {
          if (!v14[7 * v322 + 3]) {
            ++v340;
          }
          if (v340)
          {
            if (v340 == 3)
            {
              v342 = *v339;
              v344 = v342 - 1;
            }
            else
            {
              v344 = v339[v340];
              v342 = *v339;
            }
            v659 = v340 > 1;
            v351 = 2;
            if (v659) {
              v351 = 1;
            }
            v341 = &v339[v351];
          }
          else
          {
            v350 = *(void *)v339;
            v341 = &v14[7 * (v322 - *v336) + 6];
            v344 = v350;
            v342 = HIDWORD(v350);
          }
        }
        else
        {
          v343 = *v339;
          v341 = &v14[7 * (v322 - *v336) + 5];
          v342 = v343;
          v344 = v340 - 2;
        }
        v349 = 0;
        v352 = *v341;
        v353 = v344 | (v342 << 32);
        v354 = &v14[7 * v322];
        *((void *)v354 + 2) = v353;
        v354[6] = v352;
        v346 = 1;
        if ((unint64_t)v323 > v318) {
          goto LABEL_548;
        }
LABEL_583:
        if (v322 == v314)
        {
          v190 = (unint64_t)(v959 - 32);
LABEL_1114:
          v642 = &v14[7 * v314];
          v283 = v642[1];
          v800 = *v642;
          v277 = v642[2];
          v22 = v642[3];
          v969 = *((void *)v642 + 2);
          v970 = v642[6];
          if (v314 >= v22 + v277) {
            v282 = v314 - (v22 + v277);
          }
          else {
            v282 = 0;
          }
          v8 = v899;
          v13 = (uint64_t)v962;
          if (!v277) {
            goto LABEL_1202;
          }
          goto LABEL_1118;
        }
        v317 = v322 + 1;
        if ((int)v14[7 * (v322 + 1)] <= v337 + 128) {
          goto LABEL_549;
        }
        v926 = v316;
        if (v349)
        {
          v22 = v14[7 * v322 + 3];
          if (*(_DWORD *)(v7 + 160) != 1) {
            goto LABEL_587;
          }
LABEL_589:
          v905 = 0;
        }
        else
        {
          v22 = 0;
          if (*(_DWORD *)(v7 + 160) == 1) {
            goto LABEL_589;
          }
LABEL_587:
          v905 = *(_DWORD *)(v7 + 148) + ((__clz(**(_DWORD **)(v7 + 88) + 1) << 8) ^ 0xFFFFE0FF) + 1;
        }
        v910 = v337;
        v799 = v336;
        v964 = 0;
        v355 = *(void *)(v7 + 8);
        v356 = v7;
        v357 = *(unsigned int *)(v7 + 36);
        if (v355 + v357 > (unint64_t)v323)
        {
          LODWORD(v358) = 0;
          goto LABEL_1041;
        }
        v945 = v346;
        v359 = *(_DWORD *)(v356 + 208);
        v938 = v323;
        for (j = v323 - v355; v357 < j; LODWORD(v357) = v361 + v357)
        {
          v361 = ZSTD_insertBt1(v356, (void *)(v355 + v357), v18, v359, 1);
          v18 = (unint64_t)v959;
        }
        v953 = &v14[7 * v322 + 4];
        *(_DWORD *)(v356 + 36) = j;
        if ((v359 - 6) < 2)
        {
          v358 = 0;
          if (*(_DWORD *)(v356 + 212) >= 0xFFFu) {
            v395 = 4095;
          }
          else {
            v395 = *(_DWORD *)(v356 + 212);
          }
          v323 = v938;
          v396 = v938 + 4;
          v722 = *(_DWORD *)(v356 + 204);
          v726 = (0xCF1BBCDCBF9B0000 * *(void *)v938) >> -(char)*(_DWORD *)(v356 + 200);
          v730 = *(void *)(v356 + 48);
          v896 = *(_DWORD *)(v730 + 4 * v726);
          v397 = *(void *)(v356 + 8);
          v398 = v938 - v397;
          v399 = -1 << (*(_DWORD *)(v356 + 196) - 1);
          v400 = *(unsigned int *)(v356 + 24);
          v915 = *(void *)(v356 + 16);
          v838 = v397;
          v858 = (void *)(v397 + v400);
          v866 = (char *)(v915 + v400);
          v825 = ~v399;
          v401 = v938 - v397 + v399 + 1;
          if (v398 < ~v399) {
            v401 = 0;
          }
          v806 = v401;
          v402 = 1 << *(_DWORD *)(v356 + 192);
          if (v398 - *(_DWORD *)(v356 + 28) > v402 && *(_DWORD *)(v356 + 32) == 0) {
            v404 = v398 - v402;
          }
          else {
            v404 = *(_DWORD *)(v356 + 28);
          }
          if (v404 <= 1) {
            v405 = 1;
          }
          else {
            v405 = v404;
          }
          v850 = v405;
          v814 = *(void *)(v356 + 64);
          v889 = (unsigned int *)(v814 + 8 * (v398 & ~v399));
          v874 = *(unsigned int *)(v356 + 24);
          v882 = v889 + 1;
          v734 = v398 + 9;
          v968 = 0;
          v406 = v945;
          if (v945) {
            v407 = 4;
          }
          else {
            v407 = 3;
          }
          v408 = v398 - v400;
          v409 = v398 - v404;
          v410 = v945;
          v411 = v945 << 63 >> 63;
          v947 = (v958 - 1);
          v789 = v395;
          v779 = v398;
          v767 = v404;
          v759 = v407;
          v751 = v398 - v400;
          v744 = v398 - v404;
          v740 = v406 << 63 >> 63;
          while (1)
          {
            if (v410 == 3)
            {
              v412 = *v953 - 1;
              v413 = v398 - v412;
              v414 = *v953 - 2;
              if (v414 < v408) {
                goto LABEL_686;
              }
            }
            else
            {
              v412 = v953[v410];
              v413 = v398 - v412;
              v414 = v412 - 1;
              if (v412 - 1 < v408)
              {
LABEL_686:
                if (v413 < v404 || *(_DWORD *)v323 != *(_DWORD *)&v323[-v412]) {
                  goto LABEL_674;
                }
                v422 = (void *)((char *)v396 - v412);
                if (v960 > (unint64_t)v396)
                {
                  v423 = v938 + 4;
                  v424 = *v396 ^ *v422;
                  if (v424)
                  {
                    v419 = (__clz(__rbit64(v424)) >> 3) + 4;
                    v420 = v419;
                    if (v947 < v419) {
                      goto LABEL_707;
                    }
                    goto LABEL_674;
                  }
                  do
                  {
                    ++v422;
                    if ((unint64_t)++v423 >= v960) {
                      goto LABEL_699;
                    }
                    v425 = *v423 ^ *v422;
                  }
                  while (!v425);
                  v423 = (void *)((char *)v423 + (__clz(__rbit64(v425)) >> 3));
                  goto LABEL_706;
                }
                v423 = v938 + 4;
LABEL_699:
                if ((unint64_t)v423 >= v940)
                {
                  if ((unint64_t)v423 >= v939) {
                    goto LABEL_703;
                  }
                }
                else
                {
                  if (*(_DWORD *)v422 == *(_DWORD *)v423)
                  {
                    v423 = (void *)((char *)v423 + 4);
                    v422 = (void *)((char *)v422 + 4);
                  }
                  if ((unint64_t)v423 >= v939)
                  {
LABEL_703:
                    if ((unint64_t)v423 < v18) {
                      goto LABEL_704;
                    }
                    goto LABEL_706;
                  }
                }
                if (*(unsigned __int16 *)v422 == *(unsigned __int16 *)v423)
                {
                  v423 = (void *)((char *)v423 + 2);
                  v422 = (void *)((char *)v422 + 2);
                }
                if ((unint64_t)v423 < v18)
                {
LABEL_704:
                  if (*(unsigned __int8 *)v422 == *(unsigned __int8 *)v423) {
                    LODWORD(v423) = v423 + 1;
                  }
                }
LABEL_706:
                v419 = v423 - v938;
                v420 = v419;
                if (v947 < v419) {
                  goto LABEL_707;
                }
                goto LABEL_674;
              }
            }
            if (v414 < v409 && v400 + ~v413 >= 3)
            {
              v416 = v915 + v413;
              if (*(_DWORD *)v323 == *(_DWORD *)v416)
              {
                v417 = v358;
                v418 = ZSTD_count_2segments(v396, (char *)(v416 + 4), v18, v866, v858);
                LODWORD(v411) = v740;
                v409 = v744;
                v408 = v751;
                v407 = v759;
                v404 = v767;
                v395 = v789;
                v400 = v874;
                v358 = v417;
                v323 = v938;
                v18 = (unint64_t)v959;
                v419 = v418 + 4;
                v398 = v779;
                v420 = v419;
                if (v947 < v419)
                {
LABEL_707:
                  v426 = &v962[2 * v358];
                  *v426 = v410 + v411;
                  v426[1] = v419;
                  v358 = (v358 + 1);
                  if (v419 > v395) {
                    goto LABEL_1041;
                  }
                  v947 = v420;
                  if (&v323[v420] == (unsigned __int8 *)v18) {
                    goto LABEL_1041;
                  }
                }
              }
            }
LABEL_674:
            if (++v410 >= v407)
            {
              *(_DWORD *)(v730 + 4 * v726) = v398;
              v427 = v896;
              if (v896 < v850)
              {
                v428 = v734;
                goto LABEL_717;
              }
              v504 = 0;
              v505 = 0;
              v506 = ~(-1 << v722);
              v762 = v398 + 2;
              v754 = (char *)v737 + v322;
              v747 = v838 + 8;
              v428 = v734;
              while (1)
              {
                v954 = v506;
                v507 = v505 >= v504 ? v504 : v505;
                v508 = v427;
                v509 = &v323[v507];
                if (v507 + v427 >= v400) {
                  break;
                }
                v782 = v915 + v427;
                v792 = v504;
                v510 = v505;
                v770 = v507;
                v898 = v427;
                v511 = v358;
                v512 = ZSTD_count_2segments(v509, (char *)(v782 + v507), v18, v866, v858);
                v505 = v510;
                v400 = v874;
                v358 = v511;
                v427 = v898;
                v513 = v512 + v770;
                v514 = v782;
                v504 = v792;
                if (v512 + v770 + v508 >= v874) {
                  v514 = v838 + v508;
                }
                if (v513 > v947) {
                  goto LABEL_854;
                }
LABEL_875:
                v18 = (unint64_t)v959;
                v323 = v938;
LABEL_876:
                v519 = (unsigned int *)(v814 + 8 * (v427 & v825));
                if (*(unsigned __int8 *)(v514 + v513) >= v323[v513])
                {
                  *v882 = v427;
                  if (v427 <= v806)
                  {
                    v882 = (unsigned int *)&v968;
                    goto LABEL_717;
                  }
                  v504 = v513;
                  v882 = (unsigned int *)(v814 + 8 * (v427 & v825));
                  v506 = v954 - 1;
                  if (!v954) {
                    goto LABEL_717;
                  }
                }
                else
                {
                  *v889 = v427;
                  if (v427 <= v806)
                  {
                    v889 = (unsigned int *)&v968;
                    goto LABEL_717;
                  }
                  ++v519;
                  v505 = v513;
                  v889 = v519;
                  v506 = v954 - 1;
                  if (!v954) {
                    goto LABEL_717;
                  }
                }
                v427 = *v519;
                if (*v519 < v850)
                {
LABEL_717:
                  *v882 = 0;
                  *v889 = 0;
                  v429 = v428 - 8;
LABEL_1040:
                  *(_DWORD *)(v929 + 36) = v429;
                  goto LABEL_1041;
                }
              }
              v514 = v838 + v427;
              v516 = (void *)(v514 + v507);
              if (v960 <= (unint64_t)v509)
              {
                v518 = (char *)&v323[v507];
                if ((unint64_t)v509 >= v940) {
                  goto LABEL_866;
                }
              }
              else
              {
                v517 = *(void *)v509 ^ *v516;
                if (v517)
                {
                  v513 = (__clz(__rbit64(v517)) >> 3) + v507;
                  if (v513 <= v947) {
                    goto LABEL_875;
                  }
                  goto LABEL_854;
                }
                v520 = 0;
                v521 = &v754[v507];
                while (1)
                {
                  v522 = &v521[v520];
                  if ((unint64_t)&v521[v520] >= v960) {
                    break;
                  }
                  v523 = *(void *)(v747 + v507 + v427 + v520);
                  v520 += 8;
                  v524 = *(void *)v522 ^ v523;
                  if (v524)
                  {
                    v513 = v520 + (__clz(__rbit64(v524)) >> 3) + v507;
                    if (v513 <= v947) {
                      goto LABEL_875;
                    }
LABEL_854:
                    if (v513 > v428 - v427) {
                      v428 = v427 + v513;
                    }
                    v515 = &v962[2 * v358];
                    *v515 = v762 - v427;
                    v515[1] = v513;
                    v358 = (v358 + 1);
                    v18 = (unint64_t)v959;
                    v323 = v938;
                    if (v513 > 0x1000) {
                      goto LABEL_717;
                    }
                    v947 = v513;
                    if (&v938[v513] == v959) {
                      goto LABEL_717;
                    }
                    goto LABEL_876;
                  }
                }
                v518 = &v754[v507 + v520];
                v516 = (void *)(v747 + v507 + v427 + v520);
                if ((unint64_t)v518 >= v940)
                {
LABEL_866:
                  if ((unint64_t)v518 >= v939)
                  {
                    if ((unint64_t)v518 >= v18) {
                      goto LABEL_874;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v516 == *(unsigned __int16 *)v518)
                    {
                      v518 += 2;
                      v516 = (void *)((char *)v516 + 2);
                    }
                    if ((unint64_t)v518 >= v18)
                    {
LABEL_874:
                      v513 = v518 - (char *)v323;
                      if (v513 <= v947) {
                        goto LABEL_875;
                      }
                      goto LABEL_854;
                    }
                  }
                  if (*(unsigned __int8 *)v516 == *v518) {
                    ++v518;
                  }
                  goto LABEL_874;
                }
              }
              if (*(_DWORD *)v516 == *(_DWORD *)v518)
              {
                v518 += 4;
                v516 = (void *)((char *)v516 + 4);
              }
              goto LABEL_866;
            }
          }
        }
        v323 = v938;
        if (v359 == 5)
        {
          v358 = 0;
          if (*(_DWORD *)(v356 + 212) >= 0xFFFu) {
            v430 = 4095;
          }
          else {
            v430 = *(_DWORD *)(v356 + 212);
          }
          v431 = v938 + 4;
          v723 = *(_DWORD *)(v356 + 204);
          v727 = (0xCF1BBCDCBB000000 * *(void *)v938) >> -(char)*(_DWORD *)(v356 + 200);
          v731 = *(void *)(v356 + 48);
          v735 = *(_DWORD *)(v731 + 4 * v727);
          v432 = *(void *)(v356 + 8);
          v433 = v938 - v432;
          v434 = -1 << (*(_DWORD *)(v356 + 196) - 1);
          v435 = *(unsigned int *)(v356 + 24);
          v916 = *(void *)(v356 + 16);
          v839 = v432;
          v859 = (void *)(v432 + v435);
          v867 = (char *)(v916 + v435);
          v826 = ~v434;
          v436 = v938 - v432 + v434 + 1;
          if (v433 < ~v434) {
            v436 = 0;
          }
          v807 = v436;
          v437 = 1 << *(_DWORD *)(v356 + 192);
          if (v433 - *(_DWORD *)(v356 + 28) > v437 && *(_DWORD *)(v356 + 32) == 0) {
            v439 = v433 - v437;
          }
          else {
            v439 = *(_DWORD *)(v356 + 28);
          }
          if (v439 <= 1) {
            v440 = 1;
          }
          else {
            v440 = v439;
          }
          v851 = v440;
          v815 = *(void *)(v356 + 64);
          v890 = (unsigned int *)(v815 + 8 * (v433 & ~v434));
          v875 = *(unsigned int *)(v356 + 24);
          v883 = v890 + 1;
          v897 = v433 + 9;
          v968 = 0;
          v441 = v945;
          if (v945) {
            v442 = 4;
          }
          else {
            v442 = 3;
          }
          v443 = v433 - v435;
          v444 = v433 - v439;
          v445 = v945;
          v446 = v945 << 63 >> 63;
          v948 = (v958 - 1);
          v790 = v430;
          v780 = v433;
          v768 = v439;
          v760 = v442;
          v752 = v433 - v435;
          v745 = v433 - v439;
          v741 = v441 << 63 >> 63;
          while (1)
          {
            if (v445 == 3)
            {
              v447 = *v953 - 1;
              v448 = v433 - v447;
              v449 = *v953 - 2;
              if (v449 < v443) {
                goto LABEL_748;
              }
            }
            else
            {
              v447 = v953[v445];
              v448 = v433 - v447;
              v449 = v447 - 1;
              if (v447 - 1 < v443)
              {
LABEL_748:
                if (v448 < v439 || *(_DWORD *)v323 != *(_DWORD *)&v323[-v447]) {
                  goto LABEL_736;
                }
                v457 = (void *)((char *)v431 - v447);
                if (v960 > (unint64_t)v431)
                {
                  v458 = v938 + 4;
                  v459 = *v431 ^ *v457;
                  if (v459)
                  {
                    v454 = (__clz(__rbit64(v459)) >> 3) + 4;
                    v455 = v454;
                    if (v948 < v454) {
                      goto LABEL_769;
                    }
                    goto LABEL_736;
                  }
                  do
                  {
                    ++v457;
                    if ((unint64_t)++v458 >= v960) {
                      goto LABEL_761;
                    }
                    v460 = *v458 ^ *v457;
                  }
                  while (!v460);
                  v458 = (void *)((char *)v458 + (__clz(__rbit64(v460)) >> 3));
                  goto LABEL_768;
                }
                v458 = v938 + 4;
LABEL_761:
                if ((unint64_t)v458 >= v940)
                {
                  if ((unint64_t)v458 >= v939) {
                    goto LABEL_765;
                  }
                }
                else
                {
                  if (*(_DWORD *)v457 == *(_DWORD *)v458)
                  {
                    v458 = (void *)((char *)v458 + 4);
                    v457 = (void *)((char *)v457 + 4);
                  }
                  if ((unint64_t)v458 >= v939)
                  {
LABEL_765:
                    if ((unint64_t)v458 < v18) {
                      goto LABEL_766;
                    }
                    goto LABEL_768;
                  }
                }
                if (*(unsigned __int16 *)v457 == *(unsigned __int16 *)v458)
                {
                  v458 = (void *)((char *)v458 + 2);
                  v457 = (void *)((char *)v457 + 2);
                }
                if ((unint64_t)v458 < v18)
                {
LABEL_766:
                  if (*(unsigned __int8 *)v457 == *(unsigned __int8 *)v458) {
                    LODWORD(v458) = v458 + 1;
                  }
                }
LABEL_768:
                v454 = v458 - v938;
                v455 = v454;
                if (v948 < v454) {
                  goto LABEL_769;
                }
                goto LABEL_736;
              }
            }
            if (v449 < v444 && v435 + ~v448 >= 3)
            {
              v451 = v916 + v448;
              if (*(_DWORD *)v323 == *(_DWORD *)v451)
              {
                v452 = v358;
                v453 = ZSTD_count_2segments(v431, (char *)(v451 + 4), v18, v867, v859);
                LODWORD(v446) = v741;
                v444 = v745;
                v443 = v752;
                v442 = v760;
                v439 = v768;
                v430 = v790;
                v435 = v875;
                v358 = v452;
                v323 = v938;
                v18 = (unint64_t)v959;
                v454 = v453 + 4;
                v433 = v780;
                v455 = v454;
                if (v948 < v454)
                {
LABEL_769:
                  v461 = &v962[2 * v358];
                  *v461 = v445 + v446;
                  v461[1] = v454;
                  v358 = (v358 + 1);
                  if (v454 > v430) {
                    goto LABEL_1041;
                  }
                  v948 = v455;
                  if (&v323[v455] == (unsigned __int8 *)v18) {
                    goto LABEL_1041;
                  }
                }
              }
            }
LABEL_736:
            if (++v445 >= v442)
            {
              *(_DWORD *)(v731 + 4 * v727) = v433;
              v525 = v735;
              if (v735 < v851) {
                goto LABEL_1039;
              }
              v526 = 0;
              v527 = 0;
              v528 = ~(-1 << v723);
              v763 = v433 + 2;
              v755 = (char *)v737 + v322;
              v748 = v839 + 8;
              while (1)
              {
                v955 = v528;
                if (v527 >= v526) {
                  v529 = v526;
                }
                else {
                  v529 = v527;
                }
                v530 = &v323[v529];
                if (v529 + v525 < v435)
                {
                  v793 = v527;
                  v771 = v529;
                  v531 = v358;
                  v532 = v526;
                  v533 = ZSTD_count_2segments(v530, (char *)(v916 + v525 + v529), v18, v867, v859);
                  v526 = v532;
                  v435 = v875;
                  v358 = v531;
                  v534 = v533 + v771;
                  v535 = v916 + v525;
                  v527 = v793;
                  if (v533 + v771 + v525 >= v875) {
                    v535 = v839 + v525;
                  }
                  if (v534 > v948) {
                    goto LABEL_900;
                  }
LABEL_921:
                  v18 = (unint64_t)v959;
                  v323 = v938;
                  goto LABEL_922;
                }
                v535 = v839 + v525;
                v538 = (void *)(v535 + v529);
                if (v960 <= (unint64_t)v530) {
                  break;
                }
                v539 = *(void *)v530 ^ *v538;
                if (v539)
                {
                  v534 = (__clz(__rbit64(v539)) >> 3) + v529;
                  if (v534 <= v948) {
                    goto LABEL_921;
                  }
                  goto LABEL_900;
                }
                v542 = 0;
                v543 = &v755[v529];
                do
                {
                  v544 = &v543[v542];
                  if ((unint64_t)&v543[v542] >= v960)
                  {
                    v540 = &v755[v529 + v542];
                    v538 = (void *)(v748 + v529 + v525 + v542);
                    if ((unint64_t)v540 >= v940) {
                      goto LABEL_912;
                    }
                    goto LABEL_910;
                  }
                  v545 = *(void *)(v748 + v529 + v525 + v542);
                  v542 += 8;
                  v546 = *(void *)v544 ^ v545;
                }
                while (!v546);
                v534 = v542 + (__clz(__rbit64(v546)) >> 3) + v529;
                if (v534 <= v948) {
                  goto LABEL_921;
                }
LABEL_900:
                v536 = v897;
                if (v534 > v897 - v525) {
                  v536 = v525 + v534;
                }
                v897 = v536;
                v537 = &v962[2 * v358];
                *v537 = v763 - v525;
                v537[1] = v534;
                v358 = (v358 + 1);
                v18 = (unint64_t)v959;
                v323 = v938;
                if (v534 > 0x1000) {
                  goto LABEL_1039;
                }
                v948 = v534;
                if (&v938[v534] == v959) {
                  goto LABEL_1039;
                }
LABEL_922:
                v541 = (unsigned int *)(v815 + 8 * (v525 & v826));
                if (*(unsigned __int8 *)(v535 + v534) >= v323[v534])
                {
                  *v883 = v525;
                  if (v525 <= v807)
                  {
LABEL_1038:
                    v883 = (unsigned int *)&v968;
                    goto LABEL_1039;
                  }
                  v526 = v534;
                  v883 = (unsigned int *)(v815 + 8 * (v525 & v826));
                  v528 = v955 - 1;
                  if (!v955) {
                    goto LABEL_1039;
                  }
                }
                else
                {
                  *v890 = v525;
                  if (v525 <= v807) {
                    goto LABEL_1037;
                  }
                  ++v541;
                  v527 = v534;
                  v890 = v541;
                  v528 = v955 - 1;
                  if (!v955) {
                    goto LABEL_1039;
                  }
                }
                v525 = *v541;
                if (*v541 < v851) {
                  goto LABEL_1039;
                }
              }
              v540 = (char *)&v323[v529];
              if ((unint64_t)v530 >= v940) {
                goto LABEL_912;
              }
LABEL_910:
              if (*(_DWORD *)v538 == *(_DWORD *)v540)
              {
                v540 += 4;
                v538 = (void *)((char *)v538 + 4);
              }
LABEL_912:
              if ((unint64_t)v540 >= v939)
              {
                if ((unint64_t)v540 >= v18) {
                  goto LABEL_920;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v538 == *(unsigned __int16 *)v540)
                {
                  v540 += 2;
                  v538 = (void *)((char *)v538 + 2);
                }
                if ((unint64_t)v540 >= v18)
                {
LABEL_920:
                  v534 = v540 - (char *)v323;
                  if (v534 <= v948) {
                    goto LABEL_921;
                  }
                  goto LABEL_900;
                }
              }
              if (*(unsigned __int8 *)v538 == *v540) {
                ++v540;
              }
              goto LABEL_920;
            }
          }
        }
        if (v359 != 3)
        {
          v358 = 0;
          if (*(_DWORD *)(v356 + 212) >= 0xFFFu) {
            v462 = 4095;
          }
          else {
            v462 = *(_DWORD *)(v356 + 212);
          }
          v463 = v938 + 4;
          v724 = *(_DWORD *)(v356 + 204);
          v728 = (-1640531535 * *(_DWORD *)v938) >> -(char)*(_DWORD *)(v356 + 200);
          v732 = *(void *)(v356 + 48);
          v736 = *(_DWORD *)(v732 + 4 * v728);
          v464 = *(void *)(v356 + 8);
          v465 = v938 - v464;
          v466 = -1 << (*(_DWORD *)(v356 + 196) - 1);
          v467 = *(unsigned int *)(v356 + 24);
          v917 = *(void *)(v356 + 16);
          v852 = v464;
          v868 = (void *)(v464 + v467);
          v876 = (char *)(v917 + v467);
          v827 = ~v466;
          v468 = v938 - v464 + v466 + 1;
          if (v465 < ~v466) {
            v468 = 0;
          }
          v808 = v468;
          v469 = 1 << *(_DWORD *)(v356 + 192);
          if (v465 - *(_DWORD *)(v356 + 28) > v469 && *(_DWORD *)(v356 + 32) == 0) {
            v471 = v465 - v469;
          }
          else {
            v471 = *(_DWORD *)(v356 + 28);
          }
          if (v471 <= 1) {
            v472 = 1;
          }
          else {
            v472 = v471;
          }
          v860 = v472;
          v816 = *(void *)(v356 + 64);
          v890 = (unsigned int *)(v816 + 8 * (v465 & ~v466));
          v883 = v890 + 1;
          v897 = v465 + 9;
          v968 = 0;
          v473 = v945;
          if (v945) {
            v474 = 4;
          }
          else {
            v474 = 3;
          }
          v475 = v465 - v467;
          v476 = v465 - v471;
          v477 = v945;
          v478 = v945 << 63 >> 63;
          v479 = (v958 - 1);
          v949 = v467;
          v791 = v462;
          v781 = v465;
          v769 = v471;
          v761 = v474;
          v753 = v465 - v467;
          v746 = v465 - v471;
          v742 = v473 << 63 >> 63;
          while (1)
          {
            if (v477 == 3)
            {
              v480 = *v953 - 1;
              v481 = v465 - v480;
              v482 = *v953 - 2;
              if (v482 < v475) {
                goto LABEL_807;
              }
            }
            else
            {
              v480 = v953[v477];
              v481 = v465 - v480;
              v482 = v480 - 1;
              if (v480 - 1 < v475)
              {
LABEL_807:
                if (v481 < v471 || *(_DWORD *)v323 != *(_DWORD *)&v323[-v480]) {
                  goto LABEL_795;
                }
                v490 = (void *)((char *)v463 - v480);
                if (v960 > (unint64_t)v463)
                {
                  v491 = v938 + 4;
                  v492 = *v463 ^ *v490;
                  if (v492)
                  {
                    v487 = (__clz(__rbit64(v492)) >> 3) + 4;
                    v488 = v487;
                    if (v479 < v487) {
                      goto LABEL_828;
                    }
                    goto LABEL_795;
                  }
                  do
                  {
                    ++v490;
                    if ((unint64_t)++v491 >= v960) {
                      goto LABEL_820;
                    }
                    v493 = *v491 ^ *v490;
                  }
                  while (!v493);
                  v491 = (void *)((char *)v491 + (__clz(__rbit64(v493)) >> 3));
                  goto LABEL_827;
                }
                v491 = v938 + 4;
LABEL_820:
                if ((unint64_t)v491 >= v940)
                {
                  if ((unint64_t)v491 >= v939) {
                    goto LABEL_824;
                  }
                }
                else
                {
                  if (*(_DWORD *)v490 == *(_DWORD *)v491)
                  {
                    v491 = (void *)((char *)v491 + 4);
                    v490 = (void *)((char *)v490 + 4);
                  }
                  if ((unint64_t)v491 >= v939)
                  {
LABEL_824:
                    if ((unint64_t)v491 < v18) {
                      goto LABEL_825;
                    }
                    goto LABEL_827;
                  }
                }
                if (*(unsigned __int16 *)v490 == *(unsigned __int16 *)v491)
                {
                  v491 = (void *)((char *)v491 + 2);
                  v490 = (void *)((char *)v490 + 2);
                }
                if ((unint64_t)v491 < v18)
                {
LABEL_825:
                  if (*(unsigned __int8 *)v490 == *(unsigned __int8 *)v491) {
                    LODWORD(v491) = v491 + 1;
                  }
                }
LABEL_827:
                v487 = v491 - v938;
                v488 = v487;
                if (v479 < v487) {
                  goto LABEL_828;
                }
                goto LABEL_795;
              }
            }
            if (v482 < v476 && v467 + ~v481 >= 3)
            {
              v484 = v917 + v481;
              if (*(_DWORD *)v323 == *(_DWORD *)v484)
              {
                v485 = v358;
                v840 = v479;
                v486 = ZSTD_count_2segments(v463, (char *)(v484 + 4), v18, v876, v868);
                LODWORD(v478) = v742;
                v476 = v746;
                v475 = v753;
                v474 = v761;
                v471 = v769;
                v465 = v781;
                v462 = v791;
                v479 = v840;
                v467 = v949;
                v358 = v485;
                v323 = v938;
                v18 = (unint64_t)v959;
                v487 = v486 + 4;
                v488 = (v486 + 4);
                if (v840 < v488)
                {
LABEL_828:
                  v494 = &v962[2 * v358];
                  *v494 = v477 + v478;
                  v494[1] = v487;
                  v358 = (v358 + 1);
                  if (v487 > v462) {
                    goto LABEL_1041;
                  }
                  v479 = v488;
                  if (&v323[v488] == (unsigned __int8 *)v18) {
                    goto LABEL_1041;
                  }
                }
              }
            }
LABEL_795:
            if (++v477 >= v474)
            {
              *(_DWORD *)(v732 + 4 * v728) = v465;
              v547 = v736;
              if (v736 < v860) {
                goto LABEL_1039;
              }
              v548 = 0;
              v549 = 0;
              v550 = ~(-1 << v724);
              v764 = v465 + 2;
              v756 = (char *)v737 + v322;
              v749 = v852 + 8;
              while (1)
              {
                v956 = v550;
                if (v549 >= v548) {
                  v551 = v548;
                }
                else {
                  v551 = v549;
                }
                v552 = &v323[v551];
                if (v551 + v547 < v467)
                {
                  v794 = v549;
                  v841 = v548;
                  v772 = v551;
                  v553 = v358;
                  v554 = v479;
                  v555 = ZSTD_count_2segments(v552, (char *)(v917 + v547 + v551), v18, v876, v868);
                  v548 = v841;
                  v479 = v554;
                  v467 = v949;
                  v358 = v553;
                  v556 = v555 + v772;
                  v557 = v917 + v547;
                  v549 = v794;
                  if (v555 + v772 + v547 >= v949) {
                    v557 = v852 + v547;
                  }
                  if (v556 > v554) {
                    goto LABEL_946;
                  }
LABEL_967:
                  v18 = (unint64_t)v959;
                  v323 = v938;
                  goto LABEL_968;
                }
                v557 = v852 + v547;
                v560 = (void *)(v557 + v551);
                if (v960 <= (unint64_t)v552) {
                  break;
                }
                v561 = *(void *)v552 ^ *v560;
                if (v561)
                {
                  v556 = (__clz(__rbit64(v561)) >> 3) + v551;
                  if (v556 <= v479) {
                    goto LABEL_967;
                  }
                  goto LABEL_946;
                }
                v564 = 0;
                v565 = &v756[v551];
                do
                {
                  v566 = &v565[v564];
                  if ((unint64_t)&v565[v564] >= v960)
                  {
                    v562 = &v756[v551 + v564];
                    v560 = (void *)(v749 + v551 + v547 + v564);
                    if ((unint64_t)v562 >= v940) {
                      goto LABEL_958;
                    }
                    goto LABEL_956;
                  }
                  v567 = *(void *)(v749 + v551 + v547 + v564);
                  v564 += 8;
                  v568 = *(void *)v566 ^ v567;
                }
                while (!v568);
                v556 = v564 + (__clz(__rbit64(v568)) >> 3) + v551;
                if (v556 <= v479) {
                  goto LABEL_967;
                }
LABEL_946:
                v558 = v897;
                if (v556 > v897 - v547) {
                  v558 = v547 + v556;
                }
                v897 = v558;
                v559 = &v962[2 * v358];
                *v559 = v764 - v547;
                v559[1] = v556;
                v358 = (v358 + 1);
                v18 = (unint64_t)v959;
                v323 = v938;
                if (v556 > 0x1000 || (v479 = v556, &v938[v556] == v959))
                {
LABEL_1039:
                  *v883 = 0;
                  *v890 = 0;
                  v429 = v897 - 8;
                  goto LABEL_1040;
                }
LABEL_968:
                v563 = (unsigned int *)(v816 + 8 * (v547 & v827));
                if (*(unsigned __int8 *)(v557 + v556) < v323[v556])
                {
                  *v890 = v547;
                  if (v547 > v808)
                  {
                    ++v563;
                    v549 = v556;
                    v890 = v563;
                    v550 = v956 - 1;
                    if (!v956) {
                      goto LABEL_1039;
                    }
                    goto LABEL_938;
                  }
LABEL_1037:
                  v890 = (unsigned int *)&v968;
                  goto LABEL_1039;
                }
                *v883 = v547;
                if (v547 <= v808) {
                  goto LABEL_1038;
                }
                v548 = v556;
                v883 = (unsigned int *)(v816 + 8 * (v547 & v827));
                v550 = v956 - 1;
                if (!v956) {
                  goto LABEL_1039;
                }
LABEL_938:
                v547 = *v563;
                if (*v563 < v860) {
                  goto LABEL_1039;
                }
              }
              v562 = (char *)&v323[v551];
              if ((unint64_t)v552 >= v940) {
                goto LABEL_958;
              }
LABEL_956:
              if (*(_DWORD *)v560 == *(_DWORD *)v562)
              {
                v562 += 4;
                v560 = (void *)((char *)v560 + 4);
              }
LABEL_958:
              if ((unint64_t)v562 >= v939)
              {
                if ((unint64_t)v562 >= v18) {
                  goto LABEL_966;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v560 == *(unsigned __int16 *)v562)
                {
                  v562 += 2;
                  v560 = (void *)((char *)v560 + 2);
                }
                if ((unint64_t)v562 >= v18)
                {
LABEL_966:
                  v556 = v562 - (char *)v323;
                  if (v556 <= v479) {
                    goto LABEL_967;
                  }
                  goto LABEL_946;
                }
              }
              if (*(unsigned __int8 *)v560 == *v562) {
                ++v562;
              }
              goto LABEL_966;
            }
          }
        }
        v358 = 0;
        if (*(_DWORD *)(v356 + 212) >= 0xFFFu) {
          v362 = 4095;
        }
        else {
          v362 = *(_DWORD *)(v356 + 212);
        }
        v363 = *(void *)(v356 + 8);
        v364 = *(void *)(v356 + 16);
        v365 = v938 - v363;
        v366 = v938 + 3;
        v721 = *(_DWORD *)(v356 + 204);
        v725 = (-1640531535 * *(_DWORD *)v938) >> -(char)*(_DWORD *)(v356 + 200);
        v729 = *(void *)(v356 + 48);
        v733 = *(_DWORD *)(v729 + 4 * v725);
        v367 = -1 << (*(_DWORD *)(v356 + 196) - 1);
        v368 = *(unsigned int *)(v356 + 24);
        v849 = (char *)(v364 + v368);
        v914 = v363;
        v837 = (void *)(v363 + v368);
        v813 = ~v367;
        v369 = v938 - v363 + v367 + 1;
        if ((int)v938 - (int)v363 < ~v367) {
          v369 = 0;
        }
        v788 = v369;
        v370 = 1 << *(_DWORD *)(v356 + 192);
        if (v365 - *(_DWORD *)(v356 + 28) > v370 && *(_DWORD *)(v356 + 32) == 0) {
          v372 = v365 - v370;
        }
        else {
          v372 = *(_DWORD *)(v356 + 28);
        }
        if (v372 <= 1) {
          v373 = 1;
        }
        else {
          v373 = v372;
        }
        v895 = v373;
        v805 = *(void *)(v356 + 64);
        v881 = (unsigned int *)(v805 + 8 * (v365 & ~v367));
        v865 = *(void *)(v356 + 16);
        v873 = v881 + 1;
        v888 = v365 + 9;
        v968 = 0;
        v374 = v945;
        if (v945) {
          v375 = 4;
        }
        else {
          v375 = 3;
        }
        v376 = v365 - v368;
        v377 = v365 - v372;
        v378 = v945;
        v379 = v945 << 63 >> 63;
        v946 = (v958 - 1);
        v857 = v368;
        v778 = v365;
        v766 = v362;
        v758 = v375;
        v750 = v365 - v368;
        v743 = v365 - v372;
        v739 = v374 << 63 >> 63;
        while (2)
        {
          if (v378 == 3)
          {
            v380 = *v953 - 1;
            v381 = v365 - v380;
            v382 = *v953 - 2;
            if (v382 >= v376) {
              goto LABEL_618;
            }
LABEL_627:
            if (v381 < v372 || ((*(_DWORD *)&v323[-v380] ^ *(_DWORD *)v323) & 0xFFFFFF) != 0) {
              goto LABEL_615;
            }
            v390 = (void *)((char *)v366 - v380);
            if (v960 <= (unint64_t)v366)
            {
              v391 = v366;
            }
            else
            {
              v391 = v366;
              v392 = *v366 ^ *v390;
              if (v392)
              {
                v387 = (__clz(__rbit64(v392)) >> 3) + 3;
                v388 = v387;
                if (v946 >= v387) {
                  goto LABEL_615;
                }
                goto LABEL_648;
              }
              while (1)
              {
                ++v390;
                if ((unint64_t)++v391 >= v960) {
                  break;
                }
                v393 = *v391 ^ *v390;
                if (v393)
                {
                  v391 = (void *)((char *)v391 + (__clz(__rbit64(v393)) >> 3));
                  goto LABEL_647;
                }
              }
            }
            if ((unint64_t)v391 >= v940)
            {
              if ((unint64_t)v391 >= v939) {
                goto LABEL_644;
              }
            }
            else
            {
              if (*(_DWORD *)v390 == *(_DWORD *)v391)
              {
                v391 = (void *)((char *)v391 + 4);
                v390 = (void *)((char *)v390 + 4);
              }
              if ((unint64_t)v391 >= v939)
              {
LABEL_644:
                if ((unint64_t)v391 < v18) {
                  goto LABEL_645;
                }
                goto LABEL_647;
              }
            }
            if (*(unsigned __int16 *)v390 == *(unsigned __int16 *)v391)
            {
              v391 = (void *)((char *)v391 + 2);
              v390 = (void *)((char *)v390 + 2);
            }
            if ((unint64_t)v391 < v18)
            {
LABEL_645:
              if (*(unsigned __int8 *)v390 == *(unsigned __int8 *)v391) {
                LODWORD(v391) = v391 + 1;
              }
            }
LABEL_647:
            v387 = v391 - v366 + 3;
            v388 = v387;
            if (v946 >= v387) {
              goto LABEL_615;
            }
            goto LABEL_648;
          }
          v380 = v953[v378];
          v381 = v365 - v380;
          v382 = v380 - 1;
          if (v380 - 1 < v376) {
            goto LABEL_627;
          }
LABEL_618:
          if (v382 < v377 && v368 + ~v381 >= 3)
          {
            v384 = v364 + v381;
            if (((*(_DWORD *)v384 ^ *(_DWORD *)v323) & 0xFFFFFF) == 0)
            {
              v385 = v358;
              v386 = ZSTD_count_2segments(v938 + 3, (char *)(v384 + 3), v18, v849, v837);
              LODWORD(v379) = v739;
              v377 = v743;
              v375 = v758;
              v362 = v766;
              v365 = v778;
              v368 = v857;
              v364 = v865;
              v358 = v385;
              v323 = v938;
              v18 = (unint64_t)v959;
              v387 = v386 + 3;
              v376 = v750;
              v366 = v938 + 3;
              v388 = v387;
              if (v946 < v387)
              {
LABEL_648:
                v394 = &v962[2 * v358];
                *v394 = v378 + v379;
                v394[1] = v387;
                v358 = (v358 + 1);
                if (v387 > v362) {
                  goto LABEL_1041;
                }
                v946 = v388;
                if (&v323[v388] == (unsigned __int8 *)v18) {
                  goto LABEL_1041;
                }
              }
            }
          }
LABEL_615:
          if (++v378 < v375) {
            continue;
          }
          break;
        }
        if (v946 > 2)
        {
          v495 = v929;
          v503 = v733;
          goto LABEL_983;
        }
        v495 = v929;
        v496 = *(void *)(v929 + 56);
        v497 = *(_DWORD *)v323;
        v498 = 32 - *(_DWORD *)(v929 + 40);
        if (v718 < v365)
        {
          v499 = v718;
          do
          {
            *(_DWORD *)(v496 + 4 * ((900185344 * *(_DWORD *)(v914 + v499)) >> v498)) = v499;
            ++v499;
          }
          while (v926 - v914 != v499);
        }
        v500 = *(unsigned int *)(v496 + 4 * ((900185344 * v497) >> v498));
        v501 = v365 - v500;
        v502 = v500 >= v895 && (v365 - v500) >> 18 == 0;
        v503 = v733;
        if (!v502)
        {
          v718 = v365;
          goto LABEL_983;
        }
        if (v500 < v368)
        {
          v591 = v358;
          v592 = ZSTD_count_2segments(v323, (char *)(v364 + v500), v18, v849, v837);
          v362 = v766;
          v365 = v778;
          v503 = v733;
          v368 = v857;
          v364 = v865;
          v358 = v591;
          v323 = v938;
          v18 = (unint64_t)v959;
          v718 = v778;
          if (v592 >= 3) {
            goto LABEL_1100;
          }
          goto LABEL_983;
        }
        v633 = (_DWORD *)(v914 + v500);
        if (v960 <= (unint64_t)v323)
        {
          v635 = v323;
          if ((unint64_t)v323 < v940)
          {
LABEL_1089:
            if (*v633 == *(_DWORD *)v635)
            {
              v635 += 4;
              ++v633;
            }
          }
          goto LABEL_1091;
        }
        v634 = *(void *)v323 ^ *(void *)v633;
        if (!v634)
        {
          v637 = 0;
          v638 = (char *)v737 + v322;
          while (1)
          {
            v639 = &v638[v637];
            if ((unint64_t)&v638[v637] >= v960) {
              break;
            }
            v640 = *(void *)(v914 + v500 + 8 + v637);
            v637 += 8;
            v641 = *(void *)v639 ^ v640;
            if (v641)
            {
              v592 = v637 + (__clz(__rbit64(v641)) >> 3);
              v503 = v733;
              v718 = v365;
              if (v592 < 3) {
                goto LABEL_983;
              }
              goto LABEL_1100;
            }
          }
          v635 = (unsigned __int8 *)v737 + v322 + v637;
          v633 = (_DWORD *)(v914 + v500 + v637 + 8);
          v503 = v733;
          if ((unint64_t)v635 < v940) {
            goto LABEL_1089;
          }
LABEL_1091:
          if ((unint64_t)v635 >= v939)
          {
            if ((unint64_t)v635 >= v18) {
              goto LABEL_1099;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v633 == *(unsigned __int16 *)v635)
            {
              v635 += 2;
              v633 = (_DWORD *)((char *)v633 + 2);
            }
            if ((unint64_t)v635 >= v18)
            {
LABEL_1099:
              v592 = v635 - v323;
              v718 = v365;
              if ((unint64_t)(v635 - v323) >= 3) {
                goto LABEL_1100;
              }
              goto LABEL_983;
            }
          }
          if (*(unsigned __int8 *)v633 == *v635) {
            ++v635;
          }
          goto LABEL_1099;
        }
        v592 = __clz(__rbit64(v634)) >> 3;
        v718 = v365;
        if (v592 >= 3)
        {
LABEL_1100:
          *v962 = v501 + 2;
          v962[1] = v592;
          if (v592 > v362 || &v323[v592] == (unsigned __int8 *)v18)
          {
            v569 = v365 + 1;
            LODWORD(v358) = 1;
            v718 = v365;
            goto LABEL_985;
          }
          v358 = 1;
          v718 = v365;
          v946 = v592;
        }
LABEL_983:
        *(_DWORD *)(v729 + 4 * v725) = v365;
        if (v503 < v895) {
          goto LABEL_984;
        }
        v570 = 0;
        v571 = 0;
        v572 = ~(-1 << v721);
        v773 = v365 + 2;
        v765 = (char *)v737 + v322;
        v757 = v914 + 8;
        while (2)
        {
          v957 = v572;
          if (v571 >= v570) {
            v573 = v570;
          }
          else {
            v573 = v571;
          }
          v574 = &v323[v573];
          if (v573 + v503 >= v368)
          {
            v579 = v914 + v503;
            v582 = (_DWORD *)(v579 + v573);
            if (v960 <= (unint64_t)v574)
            {
              v584 = (char *)&v323[v573];
              v495 = v929;
              if ((unint64_t)v574 < v940)
              {
LABEL_1006:
                if (*v582 == *(_DWORD *)v584)
                {
                  v584 += 4;
                  ++v582;
                }
              }
            }
            else
            {
              v583 = *(void *)v574 ^ *(void *)v582;
              if (v583)
              {
                v495 = v929;
                v578 = (__clz(__rbit64(v583)) >> 3) + v573;
                if (v578 <= v946) {
                  goto LABEL_1017;
                }
                goto LABEL_996;
              }
              v586 = 0;
              v587 = &v765[v573];
              while (1)
              {
                v588 = &v587[v586];
                if ((unint64_t)&v587[v586] >= v960) {
                  break;
                }
                v589 = *(void *)(v757 + v573 + v503 + v586);
                v586 += 8;
                v590 = *(void *)v588 ^ v589;
                if (v590)
                {
                  v495 = v929;
                  v578 = v586 + (__clz(__rbit64(v590)) >> 3) + v573;
                  if (v578 > v946) {
                    goto LABEL_996;
                  }
                  goto LABEL_1017;
                }
              }
              v584 = &v765[v573 + v586];
              v582 = (_DWORD *)(v757 + v573 + v503 + v586);
              v495 = v929;
              if ((unint64_t)v584 < v940) {
                goto LABEL_1006;
              }
            }
            if ((unint64_t)v584 >= v939)
            {
              if ((unint64_t)v584 >= v18) {
                goto LABEL_1016;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v582 == *(unsigned __int16 *)v584)
              {
                v584 += 2;
                v582 = (_DWORD *)((char *)v582 + 2);
              }
              if ((unint64_t)v584 >= v18)
              {
LABEL_1016:
                v578 = v584 - (char *)v323;
                if (v578 <= v946) {
                  goto LABEL_1017;
                }
LABEL_996:
                v580 = v888;
                if (v578 > v888 - v503) {
                  v580 = v503 + v578;
                }
                v888 = v580;
                v581 = &v962[2 * v358];
                *v581 = v773 - v503;
                v581[1] = v578;
                v358 = (v358 + 1);
                v18 = (unint64_t)v959;
                v323 = v938;
                if (v578 > 0x1000) {
                  goto LABEL_984;
                }
                v946 = v578;
                if (&v938[v578] == v959) {
                  goto LABEL_984;
                }
                goto LABEL_1018;
              }
            }
            if (*(unsigned __int8 *)v582 == *v584) {
              ++v584;
            }
            goto LABEL_1016;
          }
          v575 = v364 + v503;
          v828 = v570;
          v783 = v571;
          v576 = v358;
          v577 = ZSTD_count_2segments(v574, (char *)(v575 + v573), v18, v849, v837);
          v571 = v783;
          v570 = v828;
          v368 = v857;
          v364 = v865;
          v358 = v576;
          v578 = v577 + v573;
          if (v577 + v573 + v503 >= v857) {
            v579 = v914 + v503;
          }
          else {
            v579 = v575;
          }
          v495 = v929;
          if (v578 > v946) {
            goto LABEL_996;
          }
LABEL_1017:
          v18 = (unint64_t)v959;
          v323 = v938;
LABEL_1018:
          v585 = (unsigned int *)(v805 + 8 * (v503 & v813));
          if (*(unsigned __int8 *)(v579 + v578) < v323[v578])
          {
            *v881 = v503;
            if (v503 <= v788)
            {
              v881 = (unsigned int *)&v968;
              goto LABEL_984;
            }
            ++v585;
            v571 = v578;
            v881 = v585;
            v572 = v957 - 1;
            if (!v957) {
              goto LABEL_984;
            }
            goto LABEL_987;
          }
          *v873 = v503;
          if (v503 > v788)
          {
            v570 = v578;
            v873 = (unsigned int *)(v805 + 8 * (v503 & v813));
            v572 = v957 - 1;
            if (!v957) {
              goto LABEL_984;
            }
LABEL_987:
            v503 = *v585;
            if (*v585 < v895) {
              goto LABEL_984;
            }
            continue;
          }
          break;
        }
        v873 = (unsigned int *)&v968;
LABEL_984:
        *v873 = 0;
        *v881 = 0;
        v569 = v888 - 8;
LABEL_985:
        *(_DWORD *)(v495 + 36) = v569;
LABEL_1041:
        v964 = v358;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v965, (uint64_t)v962, &v964, v323 - v927, v18 - v323);
        v593 = v964;
        if (!v964)
        {
          v18 = (unint64_t)v959;
          v7 = v929;
          v20 = v961;
LABEL_1081:
          v315 = v950;
          v318 = v928;
          v316 = v926;
          v317 = v322 + 1;
          goto LABEL_549;
        }
        v594 = v964 - 1;
        v277 = v962[2 * v594 + 1];
        v20 = v961;
        if (v277 <= v900 && v277 + v322 <= 0xFFF)
        {
          v595 = 0;
          v596 = v905 + v910;
          v18 = (unint64_t)v959;
          v597 = v14 + 7;
          v7 = v929;
          while (1)
          {
            v598 = &v962[2 * v595];
            v599 = v958;
            if (v595) {
              v599 = *(v598 - 1) + 1;
            }
            v600 = v598[1];
            if (v600 >= v599) {
              break;
            }
LABEL_1045:
            ++v595;
            v20 = v961;
            if (v595 == v593) {
              goto LABEL_1081;
            }
          }
          v601 = *v598;
          v602 = __clz(v601 + 1) ^ 0x1F;
          if (*(_DWORD *)(v929 + 160) == 1)
          {
            v603 = 0;
            v604 = (v602 << 8) + 4096;
            v605 = v322 + v600;
            v606 = v322 + v600;
            while (1)
            {
              v608 = v600 + v322;
              v609 = v596 + v604 + ((__clz(v600 - 2) << 8) ^ 0x1F00);
              if (v608 <= v314)
              {
                if (v609 >= (int)v14[7 * v608]) {
                  goto LABEL_1045;
                }
                goto LABEL_1052;
              }
              v610 = v314;
              v611 = (v605 - v603) - (unint64_t)v314;
              if (v611 >= 2)
              {
                v314 = (v611 & 0xFFFFFFFFFFFFFFFELL) + v314;
                v612 = (v606 - v610) & 0xFFFFFFFFFFFFFFFELL;
                v613 = &v963[7 * v610];
                do
                {
                  *(v613 - 7) = 0x40000000;
                  *v613 = 0x40000000;
                  v613 += 14;
                  v612 -= 2;
                }
                while (v612);
                if (v611 == (v611 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_1052;
                }
              }
              else
              {
                v314 = v314;
              }
              v614 = &v597[7 * v314];
              do
              {
                ++v314;
                *v614 = 0x40000000;
                v614 += 7;
              }
              while (v314 < v608);
LABEL_1052:
              v607 = (signed int *)&v14[7 * v608];
              v607[2] = v600;
              v607[3] = v22;
              *v607 = v609;
              v607[1] = v601;
              --v600;
              ++v603;
              --v606;
              if (v600 < v599) {
                goto LABEL_1045;
              }
            }
          }
          v615 = 0;
          if (v602 <= 0x13) {
            v616 = 53;
          }
          else {
            v616 = (v602 << 9) - 9675;
          }
          v617 = *(_DWORD *)(v929 + 152);
          v618 = *(void *)(v929 + 96);
          v619 = *(void *)(v929 + 104);
          v620 = v616 + *(_DWORD *)(v929 + 156);
          v621 = v322 + v600;
          v622 = v322 + v600;
          while (2)
          {
            v624 = v600 - 3;
            if (v600 - 3 < 0x80) {
              v625 = ZSTD_MLcode_ML_Code[v624];
            }
            else {
              v625 = 67 - __clz(v624);
            }
            v626 = v600 + v322;
            v627 = v596
                 + v620
                 + ((__clz(*(_DWORD *)(v619 + 4 * v602) + 1) << 8) ^ 0xFFFFE0FF)
                 + v617
                 + ((ML_bits[v625] + v602) << 8)
                 + ((__clz(*(_DWORD *)(v618 + 4 * v625) + 1) << 8) ^ 0xFFFFE0FF);
            if (v626 <= v314)
            {
              if (v627 >= (int)v14[7 * v626]) {
                goto LABEL_1045;
              }
            }
            else
            {
              v628 = v314;
              v629 = (v621 - v615) - (unint64_t)v314;
              if (v629 < 2)
              {
                v314 = v314;
                goto LABEL_1077;
              }
              v314 = (v629 & 0xFFFFFFFFFFFFFFFELL) + v314;
              v630 = (v622 - v628) & 0xFFFFFFFFFFFFFFFELL;
              v631 = &v963[7 * v628];
              do
              {
                *(v631 - 7) = 0x40000000;
                *v631 = 0x40000000;
                v631 += 14;
                v630 -= 2;
              }
              while (v630);
              v597 = v14 + 7;
              if (v629 != (v629 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_1077:
                v632 = &v597[7 * v314];
                do
                {
                  ++v314;
                  *v632 = 0x40000000;
                  v632 += 7;
                }
                while (v314 < v626);
              }
            }
            v623 = (signed int *)&v14[7 * v626];
            v623[2] = v600;
            v623[3] = v22;
            *v623 = v627;
            v623[1] = v601;
            --v600;
            ++v615;
            --v622;
            if (v600 < v599) {
              goto LABEL_1045;
            }
            continue;
          }
        }
        v18 = (unint64_t)v959;
        v7 = v929;
        if (*v799) {
          v704 = 0;
        }
        else {
          v704 = v14[7 * v322 + 3];
        }
        v8 = v899;
        v13 = (uint64_t)v962;
        v283 = v962[2 * v594];
        v707 = v322 - v704;
        if (v707 <= 0x1000) {
          v282 = v707;
        }
        else {
          v282 = 0;
        }
        v190 = (unint64_t)(v959 - 32);
        if (!v277)
        {
LABEL_1202:
          v708 = &v14[7 * v282];
          v709 = *((void *)v708 + 2);
          a3[2] = v708[6];
          *(void *)a3 = v709;
          goto LABEL_1132;
        }
LABEL_1118:
        v643 = &v14[7 * v282 + 4];
        if (v283 < 3)
        {
          if (v22) {
            v648 = v283;
          }
          else {
            v648 = v283 + 1;
          }
          if (v648)
          {
            if (v648 == 3)
            {
              v645 = *v643;
              v647 = v645 - 1;
            }
            else
            {
              v647 = v643[v648];
              v645 = *v643;
            }
            v659 = v648 > 1;
            v650 = 2;
            if (v659) {
              v650 = 1;
            }
            v644 = &v643[v650];
          }
          else
          {
            v649 = *(void *)v643;
            v644 = &v14[7 * v282 + 6];
            v647 = v649;
            v645 = HIDWORD(v649);
          }
        }
        else
        {
          v646 = *v643;
          v644 = &v14[7 * v282 + 5];
          v645 = v646;
          v647 = v283 - 2;
        }
        v651 = *v644;
        *(void *)a3 = v647 | (v645 << 32);
        a3[2] = v651;
LABEL_1132:
        v652 = v282 + 1;
        v653 = &v14[7 * v282 + 7];
        *v653 = v800;
        v653[1] = v283;
        v653[2] = v277;
        v653[3] = v22;
        *((void *)v653 + 2) = v969;
        v653[6] = v970;
        v654 = v282;
        if (!v282)
        {
          v660 = 1;
          v661 = v738;
          goto LABEL_1140;
        }
        do
        {
          v655 = &v14[7 * v654];
          v656 = v655[3] + v655[2];
          v657 = &v14[7 * v282];
          v658 = *(_OWORD *)v655;
          *(_OWORD *)(v657 + 3) = *(_OWORD *)(v655 + 3);
          *(_OWORD *)v657 = v658;
          --v282;
          v51 = v654 >= v656;
          v654 -= v656;
          v659 = v654 != 0 && v51;
          if (!v51) {
            v654 = 0;
          }
        }
        while (v659);
        v660 = v282 + 1;
        v661 = v738;
        if (v660 <= v652)
        {
          while (1)
          {
LABEL_1140:
            while (1)
            {
              v662 = v660;
              v664 = v14[7 * v660 + 2];
              v663 = v14[7 * v660 + 3];
              if (v664) {
                break;
              }
              v17 = &v20[v663];
              v660 = v662 + 1;
              if (v662 + 1 > v652) {
                goto LABEL_1189;
              }
            }
            v665 = v14[7 * v662 + 1];
            if (*(_DWORD *)(v7 + 176) != 2)
            {
              if (v663)
              {
                v666 = *v8;
                v667 = v20;
                v668 = v663;
                do
                {
                  v669 = *v667++;
                  *(_DWORD *)&v666[4 * v669] += 2;
                  --v668;
                }
                while (v668);
              }
              *(_DWORD *)(v7 + 128) += 2 * v663;
            }
            if (v663 < 0x40) {
              v670 = ZSTD_LLcode_LL_Code[v663];
            }
            else {
              v670 = 50 - __clz(v663);
            }
            ++*(_DWORD *)(*(void *)(v7 + 88) + 4 * v670);
            ++*(_DWORD *)(v7 + 132);
            v671 = v665 + 1;
            v672 = __clz(v665 + 1);
            ++*(_DWORD *)(*(void *)(v7 + 104) + 4 * (v672 ^ 0x1F));
            ++*(_DWORD *)(v7 + 140);
            v673 = v664 - 3;
            if (v664 - 3 < 0x80) {
              v674 = ZSTD_MLcode_ML_Code[v673];
            }
            else {
              v674 = 67 - __clz(v673);
            }
            ++*(_DWORD *)(*(void *)(v7 + 96) + 4 * v674);
            ++*(_DWORD *)(v7 + 136);
            v675 = &v20[v663];
            v676 = *(char **)(v661 + 24);
            if ((unint64_t)&v20[v663] <= v190)
            {
              *(_OWORD *)v676 = *(_OWORD *)v20;
              v680 = *(void *)(v661 + 24);
              if (v663 <= 0x10)
              {
                *(void *)(v661 + 24) = v680 + v663;
                v691 = *(void *)(v661 + 8);
                *(_WORD *)(v691 + 4) = v663;
                *(_DWORD *)v691 = v671;
                if (v673 < 0x10000) {
                  goto LABEL_1188;
                }
                goto LABEL_1187;
              }
              v681 = (_OWORD *)(v680 + 16);
              v682 = v680 + v663;
              v677 = v20;
              v683 = (long long *)(v20 + 16);
              do
              {
                v684 = *v683++;
                *v681++ = v684;
              }
              while ((unint64_t)v681 < v682);
            }
            else
            {
              if ((unint64_t)v20 <= v190)
              {
                v679 = &v676[v190 - (void)v20];
                v685 = v20;
                v686 = *(char **)(v661 + 24);
                do
                {
                  v687 = *(_OWORD *)v685;
                  v685 += 16;
                  *(_OWORD *)v686 = v687;
                  v686 += 16;
                }
                while (v686 < v679);
                v677 = v20;
                v678 = (unsigned __int8 *)v190;
                if (v190 >= (unint64_t)v675) {
                  goto LABEL_1184;
                }
              }
              else
              {
                v677 = v20;
                v678 = v20;
                v679 = *(char **)(v661 + 24);
                if (v20 >= v675) {
                  goto LABEL_1184;
                }
              }
              if ((unint64_t)v677 <= v190) {
                v688 = v190;
              }
              else {
                v688 = (unint64_t)v677;
              }
              v689 = (unint64_t)&v677[v663 - v688];
              if (v689 < 8)
              {
                v690 = v678;
                goto LABEL_1183;
              }
              if ((unint64_t)(v676 - (char *)v677) < 0x20)
              {
                v690 = v678;
                goto LABEL_1183;
              }
              if (v689 >= 0x20)
              {
                v692 = v689 & 0xFFFFFFFFFFFFFFE0;
                v693 = (long long *)(v678 + 16);
                v694 = &v676[v688 - (void)v677 + 16];
                v695 = v689 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v696 = *v693;
                  *((_OWORD *)v694 - 1) = *(v693 - 1);
                  *(_OWORD *)v694 = v696;
                  v693 += 2;
                  v694 += 32;
                  v695 -= 32;
                }
                while (v695);
                if (v689 == v692) {
                  goto LABEL_1184;
                }
                if ((v689 & 0x18) == 0)
                {
                  v690 = &v678[v692];
                  v679 += v692;
                  do
                  {
LABEL_1183:
                    v701 = *v690++;
                    *v679++ = v701;
                  }
                  while (v690 < v675);
                  goto LABEL_1184;
                }
              }
              else
              {
                v692 = 0;
              }
              v679 += v689 & 0xFFFFFFFFFFFFFFF8;
              v690 = &v678[v689 & 0xFFFFFFFFFFFFFFF8];
              v697 = &v678[v692];
              v698 = &v676[v692 + v688 - (void)v677];
              v699 = v692 - (v689 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v700 = *(void *)v697;
                v697 += 8;
                *(void *)v698 = v700;
                v698 += 8;
                v699 += 8;
              }
              while (v699);
              if (v689 != (v689 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_1183;
              }
            }
LABEL_1184:
            *(void *)(v661 + 24) += v663;
            v691 = *(void *)(v661 + 8);
            if (v663 >= 0x10000)
            {
              v702 = (unint64_t)(v691 - *(void *)v661) >> 3;
              *(_DWORD *)(v661 + 72) = 1;
              *(_DWORD *)(v661 + 76) = v702;
            }
            v20 = v677;
            *(_WORD *)(v691 + 4) = v663;
            *(_DWORD *)v691 = v671;
            if (v673 < 0x10000) {
              goto LABEL_1188;
            }
LABEL_1187:
            v703 = (unint64_t)(v691 - *(void *)v661) >> 3;
            *(_DWORD *)(v661 + 72) = 2;
            *(_DWORD *)(v661 + 76) = v703;
LABEL_1188:
            *(_WORD *)(v691 + 6) = v673;
            *(void *)(v661 + 8) = v691 + 8;
            v20 += v664 + v663;
            v17 = v20;
            v660 = v662 + 1;
            if (v662 + 1 > v652) {
              goto LABEL_1189;
            }
          }
        }
        v17 = v950;
LABEL_1189:
        if (*(_DWORD *)(v7 + 176) != 2) {
          *(_DWORD *)(v7 + 144) = (__clz(*(_DWORD *)(v7 + 128) + 1) << 8) ^ 0x1F00;
        }
        v21 = __clz(*(_DWORD *)(v7 + 140) + 1);
        *(int8x8_t *)(v7 + 148) = veor_s8((int8x8_t)vshl_n_s32(vclz_s32(vadd_s32(*(int32x2_t *)(v7 + 132), (int32x2_t)0x100000001)), 8uLL), (int8x8_t)0x1F0000001F00);
        *(_DWORD *)(v7 + 156) = (v21 << 8) ^ 0x1F00;
        if ((unint64_t)v17 >= v928)
        {
LABEL_1230:
          v927 = v20;
          return v18 - (void)v927;
        }
      }
      else
      {
        v17 = v272 + 1;
        v18 = (unint64_t)v959;
        v20 = v961;
        v8 = v25;
        if ((unint64_t)v17 >= v928) {
          goto LABEL_1230;
        }
      }
    }
  }
  return v18 - (void)v927;
}

unint64_t ZSTD_compressBlock_btultra_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7 = a1;
  uint64_t v1016 = *MEMORY[0x1E4F143B8];
  v963 = (char **)(a1 + 80);
  v974 = a4;
  v1005 = &a4[a5];
  unint64_t v984 = (unint64_t)&a4[a5 - 8];
  v8 = (unsigned __int8 *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
    int v9 = 4095;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 212);
  }
  unsigned int v850 = v9;
  if (*(_DWORD *)(a1 + 208) == 3) {
    uint64_t v10 = 3;
  }
  else {
    uint64_t v10 = 4;
  }
  uint64_t v983 = v10;
  unsigned int v752 = *(_DWORD *)(a1 + 36);
  uint64_t v12 = *(void *)(a1 + 112);
  v11 = *(unsigned int **)(a1 + 120);
  unsigned int v1015 = 0;
  uint64_t v1014 = 0;
  long long v1011 = 0u;
  memset(v1012, 0, sizeof(v1012));
  long long v1010 = 0u;
  v13 = *(long long **)(a1 + 224);
  if (v13)
  {
    long long v14 = v13[1];
    long long v1010 = *v13;
    long long v1011 = v14;
    *(void *)v1012 = *((void *)v13 + 4);
  }
  else
  {
    *(void *)v1012 = 0;
    long long v1010 = 0uLL;
    long long v1011 = 0uLL;
  }
  *(void *)&v1012[12] = 0;
  *(_DWORD *)&v1012[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1010, 0, a5);
  ZSTD_rescaleFreqs(v963, v974, a5, 2);
  if (v8 == v974) {
    v15 = v974 + 1;
  }
  else {
    v15 = v974;
  }
  unint64_t v16 = (unint64_t)v1005;
  if ((unint64_t)v15 < v984)
  {
    unsigned int v770 = 0;
    unint64_t v1006 = (unint64_t)(v1005 - 7);
    unint64_t v986 = (unint64_t)(v1005 - 1);
    unint64_t v987 = (unint64_t)(v1005 - 3);
    uint64_t v17 = (v983 - 1) | 1;
    v1008 = v11 + 14;
    uint64_t v748 = v983 - v17;
    v749 = &v11[7 * v17];
    v18 = v974;
    uint64_t v964 = v7;
    v1007 = (_DWORD *)v12;
    uint64_t v769 = a2;
    while (1)
    {
      unsigned int v23 = v15 - v18;
      unsigned int v1009 = 0;
      uint64_t v24 = *(void *)(v7 + 8);
      uint64_t v25 = *(unsigned int *)(v7 + 36);
      v985 = v18;
      v994 = v15;
      if (v24 + v25 > (unint64_t)v15)
      {
        LODWORD(v26) = 0;
        unsigned int v27 = v983;
        goto LABEL_495;
      }
      int v28 = *(_DWORD *)(v7 + 208);
      for (unsigned int i = v15 - v24; v25 < i; LODWORD(v25) = inserted + v25)
      {
        int inserted = ZSTD_insertBt1(v7, (void *)(v24 + v25), v16, v28, 1);
        unint64_t v16 = (unint64_t)v1005;
      }
      *(_DWORD *)(v7 + 36) = i;
      if ((v28 - 6) < 2) {
        break;
      }
      v18 = v985;
      if (v28 == 5)
      {
        uint64_t v26 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          unsigned int v111 = 4095;
        }
        else {
          unsigned int v111 = *(_DWORD *)(v7 + 212);
        }
        uint64_t v112 = *(void *)(v7 + 8);
        uint64_t v113 = *(void *)(v7 + 16);
        int v114 = v994 - v112;
        int v115 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        int v906 = ~v115;
        unsigned int v116 = v994 - v112 + v115 + 1;
        if ((int)v994 - (int)v112 < ~v115) {
          unsigned int v116 = 0;
        }
        unsigned int v898 = v116;
        unint64_t v117 = *(unsigned int *)(v7 + 24);
        unsigned int v118 = 1 << *(_DWORD *)(v7 + 192);
        if (v114 - *(_DWORD *)(v7 + 28) > v118 && *(_DWORD *)(v7 + 32) == 0) {
          unsigned int v120 = v114 - v118;
        }
        else {
          unsigned int v120 = *(_DWORD *)(v7 + 28);
        }
        v15 = v994;
        if (v120 <= 1) {
          int v121 = 1;
        }
        else {
          int v121 = v120;
        }
        unsigned int v921 = v121;
        unsigned int v122 = v114 - v117;
        unsigned int v123 = v114 - v120;
        uint64_t v124 = v7;
        uint64_t v125 = v23 == 0;
        v126 = (char *)(v994 + 12);
        int v788 = *(_DWORD *)(v124 + 204);
        unint64_t v800 = (0xCF1BBCDCBB000000 * *(void *)v994) >> -(char)*(_DWORD *)(v124 + 200);
        uint64_t v812 = *(void *)(v124 + 48);
        unsigned int v823 = *(_DWORD *)(v812 + 4 * v800);
        uint64_t v990 = v113;
        v937 = (char *)(v113 + v117);
        uint64_t v914 = v112;
        v930 = (void *)(v112 + v117);
        uint64_t v888 = *(void *)(v124 + 64);
        v957 = (unsigned int *)(v888 + 8 * (v114 & ~v115));
        v961 = v957 + 1;
        int v967 = v114 + 9;
        int v1013 = 0;
        if (v23) {
          unint64_t v127 = 3;
        }
        else {
          unint64_t v127 = 4;
        }
        v128 = v994 + 4;
        if (v23) {
          int v129 = 0;
        }
        else {
          int v129 = -1;
        }
        unint64_t v998 = (v983 - 1);
        unint64_t v947 = v117;
        unsigned int v977 = v111;
        int v865 = v994 - v112;
        unsigned int v877 = v120;
        unsigned int v853 = v114 - v117;
        unsigned int v844 = v114 - v120;
        int v835 = v129;
        while (1)
        {
          if (v125 == 3)
          {
            unsigned int v130 = *a3 - 1;
            unsigned int v131 = v114 - v130;
            unsigned int v132 = *a3 - 2;
            if (v132 >= v122) {
              goto LABEL_180;
            }
          }
          else
          {
            unsigned int v130 = a3[v125];
            unsigned int v131 = v114 - v130;
            unsigned int v132 = v130 - 1;
            if (v130 - 1 >= v122)
            {
LABEL_180:
              if (v132 < v123 && v117 + ~v131 >= 3)
              {
                uint64_t v134 = v990 + v131;
                if (*(_DWORD *)v15 == *(_DWORD *)v134)
                {
                  uint64_t v135 = v26;
                  int v136 = ZSTD_count_2segments(v128, (char *)(v134 + 4), v16, v937, v930);
                  int v129 = v835;
                  unsigned int v123 = v844;
                  unsigned int v122 = v853;
                  int v114 = v865;
                  unsigned int v120 = v877;
                  unint64_t v117 = v947;
                  uint64_t v26 = v135;
                  v15 = v994;
                  unint64_t v16 = (unint64_t)v1005;
                  unsigned int v137 = v136 + 4;
                  unsigned int v111 = v977;
                  unint64_t v138 = v137;
                  if (v998 < v137) {
                    goto LABEL_194;
                  }
                }
              }
              goto LABEL_177;
            }
          }
          if (v131 < v120 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v130]) {
            goto LABEL_177;
          }
          uint64_t v141 = -(uint64_t)v130;
          v142 = (char *)v128 - v130;
          if (v1006 <= (unint64_t)v128) {
            break;
          }
          unint64_t v143 = *v128 ^ *(void *)v142;
          if (v143)
          {
            unsigned int v137 = (__clz(__rbit64(v143)) >> 3) + 4;
            unint64_t v138 = v137;
            if (v998 < v137) {
              goto LABEL_194;
            }
            goto LABEL_177;
          }
          uint64_t v145 = 0;
          do
          {
            v144 = &v126[v145];
            if ((unint64_t)&v126[v145] >= v1006)
            {
              v142 = &v144[v141];
              if ((unint64_t)v144 >= v987) {
                goto LABEL_204;
              }
              goto LABEL_202;
            }
            uint64_t v146 = *(void *)&v126[v141 + v145];
            v145 += 8;
            unint64_t v147 = *(void *)v144 ^ v146;
          }
          while (!v147);
          unsigned int v137 = v145 + (__clz(__rbit64(v147)) >> 3) + 4;
          unint64_t v138 = v137;
          if (v998 < v137)
          {
LABEL_194:
            v140 = &v1007[2 * v26];
            _DWORD *v140 = v125 + v129;
            v140[1] = v137;
            uint64_t v26 = (v26 + 1);
            if (v137 > v111) {
              goto LABEL_494;
            }
            unint64_t v998 = v138;
            if (&v15[v138] == (unsigned __int8 *)v16) {
              goto LABEL_494;
            }
          }
LABEL_177:
          if (++v125 >= v127)
          {
            *(_DWORD *)(v812 + 4 * v800) = v114;
            unsigned int v212 = v823;
            if (v823 < v921) {
              goto LABEL_492;
            }
            unint64_t v213 = 0;
            unint64_t v214 = 0;
            int v215 = ~(-1 << v788);
            int v868 = v114 + 2;
            v856 = v15 + 8;
            uint64_t v846 = v914 + 8;
            while (1)
            {
              int v980 = v215;
              if (v214 >= v213) {
                unint64_t v216 = v213;
              }
              else {
                unint64_t v216 = v214;
              }
              v217 = (char *)&v15[v216];
              if (v216 + v212 < v117)
              {
                unint64_t v879 = v214;
                uint64_t v218 = v26;
                unint64_t v219 = ZSTD_count_2segments(v217, (char *)(v990 + v212 + v216), v16, v937, v930);
                unint64_t v214 = v879;
                unint64_t v117 = v947;
                uint64_t v26 = v218;
                unint64_t v220 = v219 + v216;
                if (v219 + v216 + v212 >= v947) {
                  uint64_t v221 = v914 + v212;
                }
                else {
                  uint64_t v221 = v990 + v212;
                }
                if (v220 > v998) {
                  goto LABEL_351;
                }
LABEL_372:
                unint64_t v16 = (unint64_t)v1005;
                v18 = v985;
                v15 = v994;
                goto LABEL_373;
              }
              uint64_t v221 = v914 + v212;
              v224 = (void *)(v221 + v216);
              if (v1006 <= (unint64_t)v217) {
                break;
              }
              unint64_t v225 = *(void *)v217 ^ *v224;
              if (v225)
              {
                unint64_t v220 = (__clz(__rbit64(v225)) >> 3) + v216;
                if (v220 <= v998) {
                  goto LABEL_372;
                }
                goto LABEL_351;
              }
              uint64_t v228 = 0;
              v229 = (char *)v856 + v216;
              do
              {
                v230 = &v229[v228];
                if ((unint64_t)&v229[v228] >= v1006)
                {
                  v226 = (unsigned __int8 *)v856 + v216 + v228;
                  v224 = (void *)(v846 + v216 + v212 + v228);
                  if ((unint64_t)v226 >= v987) {
                    goto LABEL_363;
                  }
                  goto LABEL_361;
                }
                uint64_t v231 = *(void *)(v846 + v216 + v212 + v228);
                v228 += 8;
                unint64_t v232 = *(void *)v230 ^ v231;
              }
              while (!v232);
              unint64_t v220 = v228 + (__clz(__rbit64(v232)) >> 3) + v216;
              if (v220 <= v998) {
                goto LABEL_372;
              }
LABEL_351:
              int v222 = v967;
              if (v220 > v967 - v212) {
                int v222 = v212 + v220;
              }
              int v967 = v222;
              v223 = &v1007[2 * v26];
              _DWORD *v223 = v868 - v212;
              v223[1] = v220;
              uint64_t v26 = (v26 + 1);
              unint64_t v16 = (unint64_t)v1005;
              v18 = v985;
              v15 = v994;
              if (v220 > 0x1000) {
                goto LABEL_492;
              }
              unint64_t v998 = v220;
              if (&v994[v220] == v1005) {
                goto LABEL_492;
              }
LABEL_373:
              v227 = (unsigned int *)(v888 + 8 * (v212 & v906));
              if (*(unsigned __int8 *)(v221 + v220) >= v15[v220])
              {
                unsigned int *v961 = v212;
                if (v212 <= v898)
                {
LABEL_491:
                  v961 = (unsigned int *)&v1013;
                  goto LABEL_492;
                }
                unint64_t v213 = v220;
                v961 = (unsigned int *)(v888 + 8 * (v212 & v906));
                int v215 = v980 - 1;
                if (!v980) {
                  goto LABEL_492;
                }
              }
              else
              {
                unsigned int *v957 = v212;
                if (v212 <= v898) {
                  goto LABEL_490;
                }
                ++v227;
                unint64_t v214 = v220;
                v957 = v227;
                int v215 = v980 - 1;
                if (!v980) {
                  goto LABEL_492;
                }
              }
              unsigned int v212 = *v227;
              if (*v227 < v921) {
                goto LABEL_492;
              }
            }
            v226 = &v15[v216];
            if ((unint64_t)v217 >= v987) {
              goto LABEL_363;
            }
LABEL_361:
            if (*(_DWORD *)v224 == *(_DWORD *)v226)
            {
              v226 += 4;
              v224 = (void *)((char *)v224 + 4);
            }
LABEL_363:
            if ((unint64_t)v226 >= v986)
            {
              if ((unint64_t)v226 >= v16) {
                goto LABEL_371;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v224 == *(unsigned __int16 *)v226)
              {
                v226 += 2;
                v224 = (void *)((char *)v224 + 2);
              }
              if ((unint64_t)v226 >= v16)
              {
LABEL_371:
                unint64_t v220 = v226 - (unsigned __int8 *)v217 + v216;
                if (v220 <= v998) {
                  goto LABEL_372;
                }
                goto LABEL_351;
              }
            }
            if (*(unsigned __int8 *)v224 == *v226) {
              ++v226;
            }
            goto LABEL_371;
          }
        }
        v144 = (char *)(v994 + 4);
        if ((unint64_t)v128 >= v987) {
          goto LABEL_204;
        }
LABEL_202:
        if (*(_DWORD *)v142 == *(_DWORD *)v144)
        {
          v144 += 4;
          v142 += 4;
        }
LABEL_204:
        if ((unint64_t)v144 >= v986)
        {
          if ((unint64_t)v144 >= v16) {
            goto LABEL_212;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v142 == *(unsigned __int16 *)v144)
          {
            v144 += 2;
            v142 += 2;
          }
          if ((unint64_t)v144 >= v16)
          {
LABEL_212:
            unsigned int v137 = v144 - v994;
            unint64_t v138 = v137;
            if (v998 < v137) {
              goto LABEL_194;
            }
            goto LABEL_177;
          }
        }
        if (*v142 == *v144) {
          LODWORD(v144) = v144 + 1;
        }
        goto LABEL_212;
      }
      if (v28 != 3)
      {
        uint64_t v26 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          unsigned int v148 = 4095;
        }
        else {
          unsigned int v148 = *(_DWORD *)(v7 + 212);
        }
        uint64_t v149 = *(void *)(v7 + 8);
        uint64_t v150 = *(void *)(v7 + 16);
        int v151 = v994 - v149;
        int v152 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        int v907 = ~v152;
        unsigned int v153 = v994 - v149 + v152 + 1;
        if ((int)v994 - (int)v149 < ~v152) {
          unsigned int v153 = 0;
        }
        unsigned int v899 = v153;
        unint64_t v154 = *(unsigned int *)(v7 + 24);
        unsigned int v155 = 1 << *(_DWORD *)(v7 + 192);
        if (v151 - *(_DWORD *)(v7 + 28) > v155 && *(_DWORD *)(v7 + 32) == 0) {
          unsigned int v157 = v151 - v155;
        }
        else {
          unsigned int v157 = *(_DWORD *)(v7 + 28);
        }
        v15 = v994;
        if (v157 <= 1) {
          int v158 = 1;
        }
        else {
          int v158 = v157;
        }
        unsigned int v922 = v158;
        unsigned int v159 = v151 - v154;
        unsigned int v160 = v151 - v157;
        uint64_t v161 = v7;
        uint64_t v162 = v23 == 0;
        v163 = (char *)(v994 + 12);
        int v789 = *(_DWORD *)(v161 + 204);
        uint64_t v801 = (-1640531535 * *(_DWORD *)v994) >> -(char)*(_DWORD *)(v161 + 200);
        uint64_t v813 = *(void *)(v161 + 48);
        unsigned int v824 = *(_DWORD *)(v813 + 4 * v801);
        uint64_t v991 = v150;
        v938 = (char *)(v150 + v154);
        uint64_t v915 = v149;
        v931 = (void *)(v149 + v154);
        uint64_t v889 = *(void *)(v161 + 64);
        v957 = (unsigned int *)(v889 + 8 * (v151 & ~v152));
        v961 = v957 + 1;
        int v967 = v151 + 9;
        int v1013 = 0;
        if (v23) {
          unint64_t v164 = 3;
        }
        else {
          unint64_t v164 = 4;
        }
        v165 = v994 + 4;
        if (v23) {
          int v166 = 0;
        }
        else {
          int v166 = -1;
        }
        unint64_t v999 = (v983 - 1);
        unint64_t v948 = v154;
        unsigned int v978 = v148;
        int v866 = v994 - v149;
        unsigned int v878 = v157;
        unsigned int v854 = v151 - v154;
        unsigned int v845 = v151 - v157;
        int v836 = v166;
        while (1)
        {
          if (v162 == 3)
          {
            unsigned int v167 = *a3 - 1;
            unsigned int v168 = v151 - v167;
            unsigned int v169 = *a3 - 2;
            if (v169 >= v159) {
              goto LABEL_245;
            }
          }
          else
          {
            unsigned int v167 = a3[v162];
            unsigned int v168 = v151 - v167;
            unsigned int v169 = v167 - 1;
            if (v167 - 1 >= v159)
            {
LABEL_245:
              if (v169 < v160 && v154 + ~v168 >= 3)
              {
                uint64_t v171 = v991 + v168;
                if (*(_DWORD *)v15 == *(_DWORD *)v171)
                {
                  uint64_t v172 = v26;
                  int v173 = ZSTD_count_2segments(v165, (char *)(v171 + 4), v16, v938, v931);
                  int v166 = v836;
                  unsigned int v160 = v845;
                  unsigned int v159 = v854;
                  int v151 = v866;
                  unsigned int v157 = v878;
                  unint64_t v154 = v948;
                  uint64_t v26 = v172;
                  v15 = v994;
                  unint64_t v16 = (unint64_t)v1005;
                  unsigned int v174 = v173 + 4;
                  unsigned int v148 = v978;
                  unint64_t v175 = v174;
                  if (v999 < v174) {
                    goto LABEL_259;
                  }
                }
              }
              goto LABEL_242;
            }
          }
          if (v168 < v157 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v167]) {
            goto LABEL_242;
          }
          uint64_t v178 = -(uint64_t)v167;
          v179 = (char *)v165 - v167;
          if (v1006 <= (unint64_t)v165) {
            break;
          }
          unint64_t v180 = *v165 ^ *(void *)v179;
          if (v180)
          {
            unsigned int v174 = (__clz(__rbit64(v180)) >> 3) + 4;
            unint64_t v175 = v174;
            if (v999 < v174) {
              goto LABEL_259;
            }
            goto LABEL_242;
          }
          uint64_t v182 = 0;
          do
          {
            v181 = &v163[v182];
            if ((unint64_t)&v163[v182] >= v1006)
            {
              v179 = &v181[v178];
              if ((unint64_t)v181 >= v987) {
                goto LABEL_269;
              }
              goto LABEL_267;
            }
            uint64_t v183 = *(void *)&v163[v178 + v182];
            v182 += 8;
            unint64_t v184 = *(void *)v181 ^ v183;
          }
          while (!v184);
          unsigned int v174 = v182 + (__clz(__rbit64(v184)) >> 3) + 4;
          unint64_t v175 = v174;
          if (v999 < v174)
          {
LABEL_259:
            v177 = &v1007[2 * v26];
            _DWORD *v177 = v162 + v166;
            v177[1] = v174;
            uint64_t v26 = (v26 + 1);
            if (v174 > v148) {
              goto LABEL_494;
            }
            unint64_t v999 = v175;
            if (&v15[v175] == (unsigned __int8 *)v16) {
              goto LABEL_494;
            }
          }
LABEL_242:
          if (++v162 >= v164)
          {
            *(_DWORD *)(v813 + 4 * v801) = v151;
            unsigned int v233 = v824;
            if (v824 < v922) {
              goto LABEL_492;
            }
            unint64_t v234 = 0;
            unint64_t v235 = 0;
            int v236 = ~(-1 << v789);
            int v869 = v151 + 2;
            v857 = v15 + 8;
            uint64_t v847 = v915 + 8;
            while (1)
            {
              int v981 = v236;
              if (v235 >= v234) {
                unint64_t v237 = v234;
              }
              else {
                unint64_t v237 = v235;
              }
              v238 = (char *)&v15[v237];
              if (v237 + v233 < v154)
              {
                unint64_t v880 = v235;
                uint64_t v239 = v26;
                unint64_t v240 = ZSTD_count_2segments(v238, (char *)(v991 + v233 + v237), v16, v938, v931);
                unint64_t v235 = v880;
                unint64_t v154 = v948;
                uint64_t v26 = v239;
                unint64_t v241 = v240 + v237;
                if (v240 + v237 + v233 >= v948) {
                  uint64_t v242 = v915 + v233;
                }
                else {
                  uint64_t v242 = v991 + v233;
                }
                if (v241 > v999) {
                  goto LABEL_398;
                }
LABEL_419:
                unint64_t v16 = (unint64_t)v1005;
                v18 = v985;
                v15 = v994;
                goto LABEL_420;
              }
              uint64_t v242 = v915 + v233;
              v245 = (void *)(v242 + v237);
              if (v1006 <= (unint64_t)v238) {
                break;
              }
              unint64_t v246 = *(void *)v238 ^ *v245;
              if (v246)
              {
                unint64_t v241 = (__clz(__rbit64(v246)) >> 3) + v237;
                if (v241 <= v999) {
                  goto LABEL_419;
                }
                goto LABEL_398;
              }
              uint64_t v249 = 0;
              v250 = (char *)v857 + v237;
              do
              {
                v251 = &v250[v249];
                if ((unint64_t)&v250[v249] >= v1006)
                {
                  v247 = (unsigned __int8 *)v857 + v237 + v249;
                  v245 = (void *)(v847 + v237 + v233 + v249);
                  if ((unint64_t)v247 >= v987) {
                    goto LABEL_410;
                  }
                  goto LABEL_408;
                }
                uint64_t v252 = *(void *)(v847 + v237 + v233 + v249);
                v249 += 8;
                unint64_t v253 = *(void *)v251 ^ v252;
              }
              while (!v253);
              unint64_t v241 = v249 + (__clz(__rbit64(v253)) >> 3) + v237;
              if (v241 <= v999) {
                goto LABEL_419;
              }
LABEL_398:
              int v243 = v967;
              if (v241 > v967 - v233) {
                int v243 = v233 + v241;
              }
              int v967 = v243;
              v244 = &v1007[2 * v26];
              _DWORD *v244 = v869 - v233;
              v244[1] = v241;
              uint64_t v26 = (v26 + 1);
              unint64_t v16 = (unint64_t)v1005;
              v18 = v985;
              v15 = v994;
              if (v241 > 0x1000 || (unint64_t v999 = v241, &v994[v241] == v1005))
              {
LABEL_492:
                unsigned int *v961 = 0;
                unsigned int *v957 = 0;
                int v110 = v967 - 8;
LABEL_493:
                *(_DWORD *)(v964 + 36) = v110;
LABEL_494:
                uint64_t v7 = v964;
                unsigned int v27 = v983;
                uint64_t v12 = (uint64_t)v1007;
                goto LABEL_495;
              }
LABEL_420:
              v248 = (unsigned int *)(v889 + 8 * (v233 & v907));
              if (*(unsigned __int8 *)(v242 + v241) < v15[v241])
              {
                unsigned int *v957 = v233;
                if (v233 > v899)
                {
                  ++v248;
                  unint64_t v235 = v241;
                  v957 = v248;
                  int v236 = v981 - 1;
                  if (!v981) {
                    goto LABEL_492;
                  }
                  goto LABEL_389;
                }
LABEL_490:
                v957 = (unsigned int *)&v1013;
                goto LABEL_492;
              }
              unsigned int *v961 = v233;
              if (v233 <= v899) {
                goto LABEL_491;
              }
              unint64_t v234 = v241;
              v961 = (unsigned int *)(v889 + 8 * (v233 & v907));
              int v236 = v981 - 1;
              if (!v981) {
                goto LABEL_492;
              }
LABEL_389:
              unsigned int v233 = *v248;
              if (*v248 < v922) {
                goto LABEL_492;
              }
            }
            v247 = &v15[v237];
            if ((unint64_t)v238 >= v987) {
              goto LABEL_410;
            }
LABEL_408:
            if (*(_DWORD *)v245 == *(_DWORD *)v247)
            {
              v247 += 4;
              v245 = (void *)((char *)v245 + 4);
            }
LABEL_410:
            if ((unint64_t)v247 >= v986)
            {
              if ((unint64_t)v247 >= v16) {
                goto LABEL_418;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v245 == *(unsigned __int16 *)v247)
              {
                v247 += 2;
                v245 = (void *)((char *)v245 + 2);
              }
              if ((unint64_t)v247 >= v16)
              {
LABEL_418:
                unint64_t v241 = v247 - (unsigned __int8 *)v238 + v237;
                if (v241 <= v999) {
                  goto LABEL_419;
                }
                goto LABEL_398;
              }
            }
            if (*(unsigned __int8 *)v245 == *v247) {
              ++v247;
            }
            goto LABEL_418;
          }
        }
        v181 = (char *)(v994 + 4);
        if ((unint64_t)v165 >= v987) {
          goto LABEL_269;
        }
LABEL_267:
        if (*(_DWORD *)v179 == *(_DWORD *)v181)
        {
          v181 += 4;
          v179 += 4;
        }
LABEL_269:
        if ((unint64_t)v181 >= v986)
        {
          if ((unint64_t)v181 >= v16) {
            goto LABEL_277;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v179 == *(unsigned __int16 *)v181)
          {
            v181 += 2;
            v179 += 2;
          }
          if ((unint64_t)v181 >= v16)
          {
LABEL_277:
            unsigned int v174 = v181 - v994;
            unint64_t v175 = v174;
            if (v999 < v174) {
              goto LABEL_259;
            }
            goto LABEL_242;
          }
        }
        if (*v179 == *v181) {
          LODWORD(v181) = v181 + 1;
        }
        goto LABEL_277;
      }
      uint64_t v26 = 0;
      if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
        unsigned int v31 = 4095;
      }
      else {
        unsigned int v31 = *(_DWORD *)(v7 + 212);
      }
      uint64_t v32 = *(void *)(v7 + 8);
      uint64_t v33 = *(void *)(v7 + 16);
      unsigned int v34 = v994 - v32;
      int v35 = -1 << (*(_DWORD *)(v7 + 196) - 1);
      int v912 = ~v35;
      unsigned int v36 = v994 - v32 + v35 + 1;
      if ((int)v994 - (int)v32 < ~v35) {
        unsigned int v36 = 0;
      }
      unsigned int v904 = v36;
      unint64_t v37 = *(unsigned int *)(v7 + 24);
      unsigned int v38 = 1 << *(_DWORD *)(v7 + 192);
      if (v34 - *(_DWORD *)(v7 + 28) > v38 && *(_DWORD *)(v7 + 32) == 0) {
        unsigned int v40 = v34 - v38;
      }
      else {
        unsigned int v40 = *(_DWORD *)(v7 + 28);
      }
      v15 = v994;
      if (v40 <= 1) {
        int v41 = 1;
      }
      else {
        int v41 = v40;
      }
      unsigned int v975 = v41;
      unsigned int v42 = v34 - v37;
      unsigned int v43 = v34 - v40;
      uint64_t v44 = v7;
      unint64_t v45 = v23 == 0;
      v46 = (char *)(v994 + 11);
      int v787 = *(_DWORD *)(v44 + 204);
      uint64_t v798 = (-1640531535 * *(_DWORD *)v994) >> -(char)*(_DWORD *)(v44 + 200);
      uint64_t v810 = *(void *)(v44 + 48);
      unsigned int v821 = *(_DWORD *)(v810 + 4 * v798);
      v928 = (char *)(v33 + v37);
      v919 = (void *)(v32 + v37);
      uint64_t v896 = *(void *)(v44 + 64);
      v965 = (unsigned int *)(v896 + 8 * (v34 & ~v35));
      v959 = v965 + 1;
      unsigned int v833 = v34 + 9;
      int v1013 = 0;
      if (v23) {
        unint64_t v47 = 3;
      }
      else {
        unint64_t v47 = 4;
      }
      v48 = v994 + 3;
      if (v23) {
        uint64_t v49 = 0;
      }
      else {
        uint64_t v49 = -1;
      }
      unint64_t v996 = (v983 - 1);
      uint64_t v945 = v33;
      uint64_t v955 = v32;
      unint64_t v935 = v37;
      unsigned int v988 = v31;
      unsigned int v886 = v994 - v32;
      unsigned int v863 = v34 - v37;
      unsigned int v875 = v40;
      unint64_t v851 = v47;
      do
      {
        if (v45 == 3)
        {
          unsigned int v50 = *a3 - 1;
          unsigned int v51 = v34 - v50;
          unsigned int v52 = *a3 - 2;
          if (v52 >= v42) {
            goto LABEL_47;
          }
        }
        else
        {
          unsigned int v50 = a3[v45];
          unsigned int v51 = v34 - v50;
          unsigned int v52 = v50 - 1;
          if (v50 - 1 >= v42)
          {
LABEL_47:
            BOOL v53 = v52 < v43 && v37 + ~v51 >= 3;
            if (!v53) {
              goto LABEL_44;
            }
            uint64_t v54 = v33 + v51;
            if (((*(_DWORD *)v54 ^ *(_DWORD *)v15) & 0xFFFFFF) != 0) {
              goto LABEL_44;
            }
            v55 = v48;
            uint64_t v56 = v26;
            uint64_t v57 = v49;
            int v58 = ZSTD_count_2segments(v55, (char *)(v54 + 3), v16, v928, v919);
            unint64_t v47 = v851;
            uint64_t v49 = v57;
            v48 = v994 + 3;
            unsigned int v34 = v886;
            unsigned int v31 = v988;
            unint64_t v37 = v935;
            uint64_t v33 = v945;
            uint64_t v32 = v955;
            uint64_t v26 = v56;
            v15 = v994;
            unint64_t v16 = (unint64_t)v1005;
            unsigned int v59 = v58 + 3;
            unsigned int v42 = v863;
            unsigned int v40 = v875;
            unint64_t v60 = v59;
            if (v996 >= v59) {
              goto LABEL_44;
            }
            goto LABEL_61;
          }
        }
        if (v51 < v40 || ((*(_DWORD *)&v15[-v50] ^ *(_DWORD *)v15) & 0xFFFFFF) != 0) {
          goto LABEL_44;
        }
        uint64_t v63 = -(uint64_t)v50;
        v64 = (char *)v48 - v50;
        if (v1006 <= (unint64_t)v48)
        {
          v66 = (char *)v48;
          if ((unint64_t)v48 < v987)
          {
LABEL_69:
            if (*(_DWORD *)v64 == *(_DWORD *)v66)
            {
              v66 += 4;
              v64 += 4;
            }
          }
LABEL_71:
          if ((unint64_t)v66 >= v986)
          {
            if ((unint64_t)v66 >= v16) {
              goto LABEL_79;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v64 == *(unsigned __int16 *)v66)
            {
              v66 += 2;
              v64 += 2;
            }
            if ((unint64_t)v66 >= v16)
            {
LABEL_79:
              unsigned int v59 = v66 - v48 + 3;
              unint64_t v60 = v59;
              if (v996 >= v59) {
                goto LABEL_44;
              }
LABEL_61:
              v62 = &v1007[2 * v26];
              _DWORD *v62 = v45 + v49;
              v62[1] = v59;
              uint64_t v26 = (v26 + 1);
              if (v59 <= v31)
              {
                unint64_t v996 = v60;
                if (&v15[v60] != (unsigned __int8 *)v16) {
                  goto LABEL_44;
                }
              }
              goto LABEL_494;
            }
          }
          if (*v64 == *v66) {
            LODWORD(v66) = v66 + 1;
          }
          goto LABEL_79;
        }
        unint64_t v65 = *v48 ^ *(void *)v64;
        if (v65)
        {
          unsigned int v59 = (__clz(__rbit64(v65)) >> 3) + 3;
          unint64_t v60 = v59;
          if (v996 >= v59) {
            goto LABEL_44;
          }
          goto LABEL_61;
        }
        uint64_t v67 = 0;
        do
        {
          v66 = &v46[v67];
          if ((unint64_t)&v46[v67] >= v1006)
          {
            v64 = &v66[v63];
            if ((unint64_t)v66 < v987) {
              goto LABEL_69;
            }
            goto LABEL_71;
          }
          uint64_t v68 = *(void *)&v46[v63 + v67];
          v67 += 8;
          unint64_t v69 = *(void *)v66 ^ v68;
        }
        while (!v69);
        unsigned int v59 = v67 + (__clz(__rbit64(v69)) >> 3) + 3;
        unint64_t v60 = v59;
        if (v996 < v59) {
          goto LABEL_61;
        }
LABEL_44:
        ++v45;
      }
      while (v45 < v47);
      if (v996 > 2)
      {
        uint64_t v12 = (uint64_t)v1007;
        goto LABEL_435;
      }
      uint64_t v7 = v964;
      uint64_t v185 = *(void *)(v964 + 56);
      int v186 = *(_DWORD *)v15;
      int v187 = 32 - *(_DWORD *)(v964 + 40);
      uint64_t v12 = (uint64_t)v1007;
      if (v752 < v34)
      {
        uint64_t v188 = v752;
        do
        {
          *(_DWORD *)(v185 + 4 * ((900185344 * *(_DWORD *)(v32 + v188)) >> v187)) = v188;
          ++v188;
        }
        while (v34 != v188);
      }
      uint64_t v189 = *(unsigned int *)(v185 + 4 * ((900185344 * v186) >> v187));
      int v190 = v34 - v189;
      if (v189 < v975 || (v34 - v189) >> 18 != 0)
      {
        unsigned int v752 = v34;
        v15 = v994;
        goto LABEL_435;
      }
      v15 = v994;
      if (v189 >= v37)
      {
        v738 = (_DWORD *)(v32 + v189);
        if (v1006 <= (unint64_t)v994)
        {
          v740 = v994;
          if ((unint64_t)v994 < v987)
          {
LABEL_1191:
            if (*v738 == *(_DWORD *)v740)
            {
              v740 += 4;
              ++v738;
            }
          }
        }
        else
        {
          unint64_t v739 = *(void *)v994 ^ *(void *)v738;
          if (v739)
          {
            unint64_t v278 = __clz(__rbit64(v739)) >> 3;
            unsigned int v752 = v34;
            if (v278 >= 3) {
              goto LABEL_1202;
            }
            goto LABEL_435;
          }
          unint64_t v742 = 0;
          v743 = v994 + 8;
          while (1)
          {
            v744 = &v743[v742 / 8];
            if ((unint64_t)&v743[v742 / 8] >= v1006) {
              break;
            }
            uint64_t v745 = *(void *)(v32 + v189 + 8 + v742);
            v742 += 8;
            unint64_t v746 = *v744 ^ v745;
            if (v746)
            {
              unint64_t v278 = v742 + (__clz(__rbit64(v746)) >> 3);
              v15 = v994;
              unsigned int v752 = v34;
              if (v278 >= 3) {
                goto LABEL_1202;
              }
              goto LABEL_435;
            }
          }
          v15 = v994;
          v740 = &v994[v742 + 8];
          v738 = (_DWORD *)(v32 + v189 + v742 + 8);
          if ((unint64_t)v740 < v987) {
            goto LABEL_1191;
          }
        }
        if ((unint64_t)v740 >= v986)
        {
          if ((unint64_t)v740 >= v16) {
            goto LABEL_1201;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v738 == *(unsigned __int16 *)v740)
          {
            v740 += 2;
            v738 = (_DWORD *)((char *)v738 + 2);
          }
          if ((unint64_t)v740 >= v16)
          {
LABEL_1201:
            unint64_t v278 = v740 - v15;
            unsigned int v752 = v34;
            if ((unint64_t)(v740 - v15) < 3) {
              goto LABEL_435;
            }
            goto LABEL_1202;
          }
        }
        if (*(unsigned __int8 *)v738 == *v740) {
          ++v740;
        }
        goto LABEL_1201;
      }
      uint64_t v277 = v26;
      unint64_t v278 = ZSTD_count_2segments(v994, (char *)(v33 + v189), v16, v928, v919);
      unsigned int v34 = v886;
      unsigned int v31 = v988;
      unint64_t v37 = v935;
      uint64_t v33 = v945;
      uint64_t v32 = v955;
      uint64_t v26 = v277;
      v15 = v994;
      unint64_t v16 = (unint64_t)v1005;
      unsigned int v752 = v886;
      if (v278 < 3) {
        goto LABEL_435;
      }
LABEL_1202:
      _DWORD *v1007 = v190 + 2;
      v1007[1] = v278;
      if (v278 > v31 || &v15[v278] == (unsigned __int8 *)v16)
      {
        unsigned int v256 = v34 + 1;
        LODWORD(v26) = 1;
        unsigned int v752 = v34;
        goto LABEL_438;
      }
      uint64_t v26 = 1;
      unsigned int v752 = v34;
      unint64_t v996 = v278;
LABEL_435:
      *(_DWORD *)(v810 + 4 * v798) = v34;
      unsigned int v254 = v821;
      if (v821 < v975)
      {
        unsigned int v255 = v833;
        goto LABEL_437;
      }
      unint64_t v257 = 0;
      unint64_t v258 = 0;
      int v259 = ~(-1 << v787);
      unsigned int v870 = v34 + 2;
      v858 = v15 + 8;
      uint64_t v848 = v32 + 8;
      unsigned int v255 = v833;
      while (2)
      {
        int v992 = v259;
        if (v258 >= v257) {
          unint64_t v260 = v257;
        }
        else {
          unint64_t v260 = v258;
        }
        v261 = (char *)&v15[v260];
        if (v260 + v254 >= v37)
        {
          uint64_t v266 = v32 + v254;
          v268 = (_DWORD *)(v266 + v260);
          if (v1006 <= (unint64_t)v261)
          {
            v270 = &v15[v260];
            v18 = v985;
            if ((unint64_t)v261 < v987)
            {
LABEL_459:
              if (*v268 == *(_DWORD *)v270)
              {
                v270 += 4;
                ++v268;
              }
            }
          }
          else
          {
            unint64_t v269 = *(void *)v261 ^ *(void *)v268;
            if (v269)
            {
              v18 = v985;
              unint64_t v265 = (__clz(__rbit64(v269)) >> 3) + v260;
              if (v265 <= v996) {
                goto LABEL_470;
              }
              goto LABEL_449;
            }
            uint64_t v272 = 0;
            v273 = (char *)v858 + v260;
            while (1)
            {
              v274 = &v273[v272];
              if ((unint64_t)&v273[v272] >= v1006) {
                break;
              }
              uint64_t v275 = *(void *)(v848 + v260 + v254 + v272);
              v272 += 8;
              unint64_t v276 = *(void *)v274 ^ v275;
              if (v276)
              {
                v18 = v985;
                unint64_t v265 = v272 + (__clz(__rbit64(v276)) >> 3) + v260;
                if (v265 > v996) {
                  goto LABEL_449;
                }
                goto LABEL_470;
              }
            }
            v270 = (unsigned __int8 *)v858 + v260 + v272;
            v268 = (_DWORD *)(v848 + v260 + v254 + v272);
            v18 = v985;
            if ((unint64_t)v270 < v987) {
              goto LABEL_459;
            }
          }
          if ((unint64_t)v270 >= v986)
          {
            if ((unint64_t)v270 >= v16) {
              goto LABEL_469;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v268 == *(unsigned __int16 *)v270)
            {
              v270 += 2;
              v268 = (_DWORD *)((char *)v268 + 2);
            }
            if ((unint64_t)v270 >= v16)
            {
LABEL_469:
              unint64_t v265 = v270 - (unsigned __int8 *)v261 + v260;
              if (v265 <= v996) {
                goto LABEL_470;
              }
LABEL_449:
              if (v265 > v255 - v254) {
                unsigned int v255 = v254 + v265;
              }
              v267 = (_DWORD *)(v12 + 8 * v26);
              _DWORD *v267 = v870 - v254;
              v267[1] = v265;
              uint64_t v26 = (v26 + 1);
              unint64_t v16 = (unint64_t)v1005;
              v15 = v994;
              if (v265 > 0x1000) {
                goto LABEL_437;
              }
              unint64_t v996 = v265;
              if (&v994[v265] == v1005) {
                goto LABEL_437;
              }
              goto LABEL_471;
            }
          }
          if (*(unsigned __int8 *)v268 == *v270) {
            ++v270;
          }
          goto LABEL_469;
        }
        uint64_t v262 = v33 + v254;
        unint64_t v881 = v260;
        unint64_t v891 = v257;
        uint64_t v263 = v26;
        unint64_t v264 = ZSTD_count_2segments(v261, (char *)(v262 + v260), v16, v928, v919);
        unint64_t v257 = v891;
        unint64_t v37 = v935;
        uint64_t v33 = v945;
        uint64_t v32 = v955;
        uint64_t v26 = v263;
        unint64_t v265 = v264 + v881;
        if (v264 + v881 + v254 >= v935) {
          uint64_t v266 = v955 + v254;
        }
        else {
          uint64_t v266 = v262;
        }
        uint64_t v12 = (uint64_t)v1007;
        v18 = v985;
        if (v265 > v996) {
          goto LABEL_449;
        }
LABEL_470:
        unint64_t v16 = (unint64_t)v1005;
        v15 = v994;
LABEL_471:
        v271 = (unsigned int *)(v896 + 8 * (v254 & v912));
        if (*(unsigned __int8 *)(v266 + v265) < v15[v265])
        {
          unsigned int *v965 = v254;
          if (v254 <= v904)
          {
            v965 = (unsigned int *)&v1013;
            goto LABEL_437;
          }
          ++v271;
          unint64_t v258 = v265;
          v965 = v271;
          int v259 = v992 - 1;
          if (!v992) {
            goto LABEL_437;
          }
          goto LABEL_440;
        }
        unsigned int *v959 = v254;
        if (v254 > v904)
        {
          unint64_t v257 = v265;
          v959 = (unsigned int *)(v896 + 8 * (v254 & v912));
          int v259 = v992 - 1;
          if (!v992) {
            goto LABEL_437;
          }
LABEL_440:
          unsigned int v254 = *v271;
          if (*v271 < v975) {
            goto LABEL_437;
          }
          continue;
        }
        break;
      }
      v959 = (unsigned int *)&v1013;
LABEL_437:
      unsigned int *v959 = 0;
      uint64_t v7 = v964;
      unsigned int *v965 = 0;
      unsigned int v256 = v255 - 8;
LABEL_438:
      unsigned int v27 = v983;
      *(_DWORD *)(v7 + 36) = v256;
LABEL_495:
      unint64_t v279 = (unint64_t)(v1005 - 32);
      unsigned int v1009 = v26;
      v280 = v15;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1010, v12, &v1009, v15 - v974, v16 - v15);
      LODWORD(v281) = v1009;
      if (v1009)
      {
        v11[4] = *a3;
        v11[5] = a3[1];
        v11[6] = a3[2];
        v11[2] = 0;
        v11[3] = v23;
        int v282 = *(_DWORD *)(v7 + 160);
        if (v282 != 1)
        {
          unint64_t v16 = (unint64_t)v1005;
          if (v23 < 0x40) {
            unsigned int v288 = ZSTD_LLcode_LL_Code[v23];
          }
          else {
            unsigned int v288 = 50 - __clz(v23);
          }
          uint64_t v289 = 4 * v288;
          int v290 = *(_DWORD *)(v7 + 148);
          int v291 = v290 + (*(unsigned int *)((char *)LL_bits + v289) << 8);
          v292 = *(_DWORD **)(v7 + 88);
          LODWORD(v289) = *(_DWORD *)((char *)v292 + v289) + 1;
          unsigned int v293 = __clz(v289);
          unsigned int v284 = v291 - ((v289 << 8 >> (v293 ^ 0x1F)) + ((v293 ^ 0x1F) << 8));
          unsigned int *v11 = v284;
          uint64_t v285 = (v281 - 1);
          unsigned int v286 = *(_DWORD *)(v12 + 8 * v285 + 4);
          if (v286 <= v850)
          {
            unsigned int v296 = *v292 + 1;
            unsigned int v297 = __clz(v296) ^ 0x1F;
            int v287 = v290 - ((v296 << 8 >> v297) + (v297 << 8));
            goto LABEL_507;
          }
LABEL_505:
          unsigned int v294 = 0;
          unsigned int v295 = *(_DWORD *)(v12 + 8 * v285);
          goto LABEL_1103;
        }
        unsigned int v283 = __clz(v23 + 1);
        unsigned int v284 = ((v23 + 1) << 8 >> (v283 ^ 0x1F)) + ((v283 ^ 0x1F) << 8);
        unsigned int *v11 = v284;
        uint64_t v285 = (v281 - 1);
        unsigned int v286 = *(_DWORD *)(v12 + 8 * v285 + 4);
        unint64_t v16 = (unint64_t)v1005;
        if (v286 > v850) {
          goto LABEL_505;
        }
        int v287 = 256;
LABEL_507:
        v298 = v11 + 14;
        unint64_t v299 = (v983 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v298 - 7) = 0x40000000;
          _DWORD *v298 = 0x40000000;
          v298 += 14;
          v299 -= 2;
        }
        while (v299);
        if (v983 - 1 != ((v983 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          uint64_t v300 = v748;
          v301 = v749;
          do
          {
            unsigned int *v301 = 0x40000000;
            v301 += 7;
            --v300;
          }
          while (v300);
        }
        uint64_t v302 = 0;
        unsigned int v303 = v287 + v284;
        if (v281 <= 1) {
          uint64_t v281 = 1;
        }
        else {
          uint64_t v281 = v281;
        }
        unsigned int v304 = v27;
        do
        {
          v305 = (unsigned int *)(v12 + 8 * v302);
          unsigned int v306 = v305[1];
          if (v304 <= v306)
          {
            unsigned int v307 = *v305;
            uint64_t v308 = __clz(v307 + 1) ^ 0x1F;
            if (v282 == 1)
            {
              unsigned int v309 = (v304 << 8) - 512;
              do
              {
                unsigned int v310 = __clz(v304 - 2);
                v311 = &v11[7 * v304];
                v311[2] = v304;
                v311[3] = v23;
                unsigned int *v311 = (v309 >> (v310 ^ 0x1F)) + (((v310 ^ 0x1F) + v308) << 8) + v303 + 4096;
                v311[1] = v307;
                ++v304;
                v309 += 256;
              }
              while (v304 <= v306);
            }
            else
            {
              uint64_t v313 = *(void *)(v7 + 96);
              uint64_t v312 = *(void *)(v7 + 104);
              int v314 = *(_DWORD *)(v7 + 156) + *(_DWORD *)(v7 + 152) + 51;
              do
              {
                unsigned int v322 = v304 - 3;
                if (v304 - 3 < 0x80) {
                  unsigned int v315 = ZSTD_MLcode_ML_Code[v322];
                }
                else {
                  unsigned int v315 = 67 - __clz(v322);
                }
                unsigned int v316 = *(_DWORD *)(v312 + 4 * v308) + 1;
                unsigned int v317 = __clz(v316);
                uint64_t v318 = 4 * v315;
                int v319 = *(unsigned int *)((char *)ML_bits + v318);
                LODWORD(v318) = *(_DWORD *)(v313 + v318) + 1;
                unsigned int v320 = __clz(v318) ^ 0x1F;
                LODWORD(v318) = v303
                              + v314
                              - (v316 << 8 >> (v317 ^ 0x1F))
                              - (v318 << 8 >> v320)
                              + ((v308 + v319 - (v317 ^ 0x1F) - v320) << 8);
                v321 = &v11[7 * v304];
                v321[2] = v304;
                v321[3] = v23;
                unsigned int *v321 = v318;
                v321[1] = v307;
                ++v304;
              }
              while (v304 <= v306);
            }
          }
          ++v302;
        }
        while (v302 != v281);
        LODWORD(v323) = v304 - 1;
        v324 = v994;
        if (v304 == 1)
        {
LABEL_1099:
          v671 = &v11[7 * v323];
          unsigned int v295 = v671[1];
          unsigned int v770 = *v671;
          unsigned int v286 = v671[2];
          unsigned int v23 = v671[3];
          uint64_t v1014 = *((void *)v671 + 2);
          unsigned int v1015 = v671[6];
          if (v323 >= v23 + v286) {
            unsigned int v294 = v323 - (v23 + v286);
          }
          else {
            unsigned int v294 = 0;
          }
          uint64_t v12 = (uint64_t)v1007;
          if (!v286) {
            goto LABEL_1183;
          }
          goto LABEL_1103;
        }
        v768 = v994 + 8;
        int v325 = v994 + 1;
        unsigned int v326 = 1;
        while (2)
        {
          unsigned int v327 = v326 - 1;
          v328 = &v11[7 * v326 - 7];
          if (v328[2]) {
            unsigned int v329 = 1u;
          }
          else {
            unsigned int v329 = v11[7 * v327 + 3] + 1;
          }
          uint64_t v330 = v326;
          v331 = &v324[v326];
          unsigned int v332 = *v328;
          int v333 = *(_DWORD *)(v7 + 160);
          if (*(_DWORD *)(v7 + 176) == 2)
          {
            unsigned int v334 = v332 + 2048;
            if (v333 != 1)
            {
              if (v329 >= 0x40) {
                goto LABEL_538;
              }
LABEL_544:
              unsigned int v335 = ZSTD_LLcode_LL_Code[v329];
              unsigned int v336 = v329 - 1;
              if (v329 - 1 >= 0x40) {
                goto LABEL_545;
              }
LABEL_539:
              unsigned int v337 = ZSTD_LLcode_LL_Code[v336];
              goto LABEL_546;
            }
LABEL_542:
            unsigned int v338 = __clz(v329 + 1);
            int v339 = ((v329 + 1) << 8 >> (v338 ^ 0x1F)) + ((v338 ^ 0x1F) << 8);
            unsigned int v340 = __clz(v329) ^ 0x1F;
            int v341 = -((v329 << 8 >> v340) + (v340 << 8));
          }
          else
          {
            if (v333 == 1)
            {
              unsigned int v334 = v332 + 1536;
              goto LABEL_542;
            }
            unsigned int v342 = *(_DWORD *)(*(void *)(v7 + 80) + 4 * *(v331 - 1)) + 1;
            unsigned int v343 = __clz(v342);
            unsigned int v334 = *(_DWORD *)(v7 + 144) - ((v342 << 8 >> (v343 ^ 0x1F)) + ((v343 ^ 0x1F) << 8)) + v332;
            if (v329 < 0x40) {
              goto LABEL_544;
            }
LABEL_538:
            unsigned int v335 = 50 - __clz(v329);
            unsigned int v336 = v329 - 1;
            if (v329 - 1 < 0x40) {
              goto LABEL_539;
            }
LABEL_545:
            unsigned int v337 = 50 - __clz(v336);
LABEL_546:
            uint64_t v344 = 4 * v335;
            int v345 = *(unsigned int *)((char *)LL_bits + v344);
            int v346 = *(_DWORD *)(v7 + 148);
            uint64_t v347 = *(void *)(v7 + 88);
            LODWORD(v344) = *(_DWORD *)(v347 + v344) + 1;
            unsigned int v348 = __clz(v344) ^ 0x1F;
            int v339 = v346 - (v344 << 8 >> v348) + ((v345 - v348) << 8);
            uint64_t v349 = 4 * v337;
            int v350 = *(unsigned int *)((char *)LL_bits + v349);
            LODWORD(v349) = *(_DWORD *)(v347 + v349) + 1;
            LODWORD(v347) = __clz(v349) ^ 0x1F;
            int v341 = (v349 << 8 >> v347) - v346 + ((v347 - v350) << 8);
          }
          signed int v351 = v334 + v339 + v341;
          v352 = &v11[7 * v330];
          signed int v355 = *v352;
          v353 = v352 + 2;
          int v354 = v355;
          v324 = v994;
          if (v351 <= v355)
          {
            v362 = &v11[7 * v330];
            v362[1] = 0;
            v362[2] = 0;
            v362[3] = v329;
            unsigned int *v362 = v351;
            int v354 = v351;
LABEL_552:
            uint64_t v363 = 0;
            v364 = &v11[7 * v330];
            v365 = &v11[7 * v327];
            *((void *)v364 + 2) = *((void *)v365 + 2);
            v364[6] = v365[6];
            int v366 = 1;
            if ((unint64_t)v331 <= v984) {
              goto LABEL_566;
            }
LABEL_531:
            unsigned int v326 = v330 + 1;
            ++v325;
            if ((int)v330 + 1 > v323) {
              goto LABEL_1099;
            }
            continue;
          }
          break;
        }
        if (!*v353) {
          goto LABEL_552;
        }
        v356 = &v11[7 * (v330 - *v353) + 4];
        unsigned int v357 = v11[7 * v330 + 1];
        if (v357 < 3)
        {
          if (v11[7 * v330 + 3]) {
            unsigned int v367 = v11[7 * v330 + 1];
          }
          else {
            unsigned int v367 = v357 + 1;
          }
          if (v367)
          {
            if (v367 == 3)
            {
              unint64_t v359 = *v356;
              unsigned int v361 = v359 - 1;
            }
            else
            {
              unsigned int v361 = v356[v367];
              unint64_t v359 = *v356;
            }
            BOOL v688 = v367 > 1;
            uint64_t v369 = 2;
            if (v688) {
              uint64_t v369 = 1;
            }
            v358 = &v356[v369];
          }
          else
          {
            unint64_t v368 = *(void *)v356;
            v358 = &v11[7 * (v330 - *v353) + 6];
            unsigned int v361 = v368;
            unint64_t v359 = HIDWORD(v368);
          }
        }
        else
        {
          unsigned int v360 = *v356;
          v358 = &v11[7 * (v330 - *v353) + 5];
          unint64_t v359 = v360;
          unsigned int v361 = v357 - 2;
        }
        int v366 = 0;
        unsigned int v370 = *v358;
        unint64_t v371 = v361 | (v359 << 32);
        v372 = &v11[7 * v330];
        *((void *)v372 + 2) = v371;
        v372[6] = v370;
        uint64_t v363 = 1;
        if ((unint64_t)v331 > v984) {
          goto LABEL_531;
        }
LABEL_566:
        if (v330 == v323) {
          goto LABEL_1099;
        }
        int v982 = v325;
        if (v366)
        {
          unsigned int v23 = v11[7 * v330 + 3];
          if (*(_DWORD *)(v7 + 160) != 1) {
            goto LABEL_569;
          }
LABEL_571:
          int v375 = 256;
        }
        else
        {
          unsigned int v23 = 0;
          if (*(_DWORD *)(v7 + 160) == 1) {
            goto LABEL_571;
          }
LABEL_569:
          unsigned int v373 = **(_DWORD **)(v7 + 88) + 1;
          unsigned int v374 = __clz(v373) ^ 0x1F;
          int v375 = *(_DWORD *)(v7 + 148) - ((v373 << 8 >> v374) + (v374 << 8));
        }
        int v958 = v375;
        int v962 = v354;
        v849 = v353;
        unsigned int v1009 = 0;
        uint64_t v376 = *(void *)(v7 + 8);
        uint64_t v377 = *(unsigned int *)(v7 + 36);
        if (v376 + v377 > (unint64_t)v331)
        {
          LODWORD(v378) = 0;
          goto LABEL_924;
        }
        uint64_t v923 = v363;
        int v379 = *(_DWORD *)(v7 + 208);
        uint64_t v380 = v7;
        v993 = v331;
        for (unsigned int j = v331 - v376; v377 < j; LODWORD(v377) = v382 + v377)
        {
          int v382 = ZSTD_insertBt1(v380, (void *)(v376 + v377), v16, v379, 1);
          unint64_t v16 = (unint64_t)v1005;
        }
        v1000 = &v11[7 * v330 + 4];
        *(_DWORD *)(v380 + 36) = j;
        if ((v379 - 6) < 2)
        {
          uint64_t v378 = 0;
          if (*(_DWORD *)(v380 + 212) >= 0xFFFu) {
            unsigned int v418 = 4095;
          }
          else {
            unsigned int v418 = *(_DWORD *)(v380 + 212);
          }
          v331 = v993;
          v419 = v993 + 4;
          int v754 = *(_DWORD *)(v380 + 204);
          unint64_t v758 = (0xCF1BBCDCBF9B0000 * *(void *)v993) >> -(char)*(_DWORD *)(v380 + 200);
          uint64_t v762 = *(void *)(v380 + 48);
          unsigned int v766 = *(_DWORD *)(v762 + 4 * v758);
          uint64_t v420 = *(void *)(v380 + 8);
          unsigned int v421 = v993 - v420;
          int v422 = -1 << (*(_DWORD *)(v380 + 196) - 1);
          unint64_t v423 = *(unsigned int *)(v380 + 24);
          uint64_t v969 = *(void *)(v380 + 16);
          uint64_t v893 = v420;
          v909 = (void *)(v420 + v423);
          v917 = (char *)(v969 + v423);
          unsigned int v424 = v993 - v420 + v422 + 1;
          if (v421 < ~v422) {
            unsigned int v424 = 0;
          }
          unsigned int v872 = v424;
          int v883 = ~v422;
          unsigned int v425 = 1 << *(_DWORD *)(v380 + 192);
          if (v421 - *(_DWORD *)(v380 + 28) > v425 && *(_DWORD *)(v380 + 32) == 0) {
            unsigned int v427 = v421 - v425;
          }
          else {
            unsigned int v427 = *(_DWORD *)(v380 + 28);
          }
          if (v427 <= 1) {
            int v428 = 1;
          }
          else {
            int v428 = v427;
          }
          unsigned int v901 = v428;
          uint64_t v860 = *(void *)(v380 + 64);
          v940 = (unsigned int *)(v860 + 8 * (v421 & ~v422));
          v933 = v940 + 1;
          unsigned int v950 = v421 + 9;
          int v1013 = 0;
          uint64_t v429 = v923;
          if (v923) {
            unint64_t v430 = 4;
          }
          else {
            unint64_t v430 = 3;
          }
          unsigned int v431 = v421 - v423;
          unsigned int v432 = v421 - v427;
          uint64_t v433 = v923;
          uint64_t v434 = v923 << 63 >> 63;
          unint64_t v435 = (v983 - 1);
          v436 = &v11[7 * v330 + 4];
          unint64_t v925 = v423;
          unsigned int v839 = v418;
          unsigned int v826 = v421;
          unsigned int v815 = v427;
          unint64_t v803 = v430;
          unsigned int v791 = v421 - v423;
          unsigned int v780 = v421 - v427;
          uint64_t v772 = v429 << 63 >> 63;
          while (1)
          {
            if (v433 == 3)
            {
              unsigned int v437 = *v436 - 1;
              unsigned int v438 = v421 - v437;
              unsigned int v439 = *v436 - 2;
              if (v439 < v431) {
                goto LABEL_669;
              }
            }
            else
            {
              unsigned int v437 = v436[v433];
              unsigned int v438 = v421 - v437;
              unsigned int v439 = v437 - 1;
              if (v437 - 1 < v431)
              {
LABEL_669:
                if (v438 < v427 || *(_DWORD *)v331 != *(_DWORD *)&v331[-v437]) {
                  goto LABEL_657;
                }
                v448 = (void *)((char *)v419 - v437);
                if (v1006 > (unint64_t)v419)
                {
                  v449 = v993 + 4;
                  unint64_t v450 = *v419 ^ *v448;
                  if (v450)
                  {
                    unsigned int v445 = (__clz(__rbit64(v450)) >> 3) + 4;
                    unint64_t v446 = v445;
                    if (v435 < v445) {
                      goto LABEL_690;
                    }
                    goto LABEL_657;
                  }
                  do
                  {
                    ++v448;
                    if ((unint64_t)++v449 >= v1006) {
                      goto LABEL_682;
                    }
                    unint64_t v451 = *v449 ^ *v448;
                  }
                  while (!v451);
                  v449 = (void *)((char *)v449 + (__clz(__rbit64(v451)) >> 3));
                  goto LABEL_689;
                }
                v449 = v993 + 4;
LABEL_682:
                if ((unint64_t)v449 >= v987)
                {
                  if ((unint64_t)v449 >= v986) {
                    goto LABEL_686;
                  }
                }
                else
                {
                  if (*(_DWORD *)v448 == *(_DWORD *)v449)
                  {
                    v449 = (void *)((char *)v449 + 4);
                    v448 = (void *)((char *)v448 + 4);
                  }
                  if ((unint64_t)v449 >= v986)
                  {
LABEL_686:
                    if ((unint64_t)v449 < v16) {
                      goto LABEL_687;
                    }
                    goto LABEL_689;
                  }
                }
                if (*(unsigned __int16 *)v448 == *(unsigned __int16 *)v449)
                {
                  v449 = (void *)((char *)v449 + 2);
                  v448 = (void *)((char *)v448 + 2);
                }
                if ((unint64_t)v449 < v16)
                {
LABEL_687:
                  if (*(unsigned __int8 *)v448 == *(unsigned __int8 *)v449) {
                    LODWORD(v449) = v449 + 1;
                  }
                }
LABEL_689:
                unsigned int v445 = v449 - v993;
                unint64_t v446 = v445;
                if (v435 < v445) {
                  goto LABEL_690;
                }
                goto LABEL_657;
              }
            }
            if (v439 < v432 && v423 + ~v438 >= 3)
            {
              uint64_t v441 = v969 + v438;
              if (*(_DWORD *)v331 == *(_DWORD *)v441)
              {
                uint64_t v442 = v378;
                unint64_t v443 = v435;
                int v444 = ZSTD_count_2segments(v419, (char *)(v441 + 4), v16, v917, v909);
                v436 = &v11[7 * v330 + 4];
                unint64_t v16 = (unint64_t)v1005;
                LODWORD(v434) = v772;
                unsigned int v432 = v780;
                unsigned int v431 = v791;
                unint64_t v430 = v803;
                unsigned int v427 = v815;
                unsigned int v421 = v826;
                unsigned int v418 = v839;
                unint64_t v435 = v443;
                unint64_t v423 = v925;
                uint64_t v378 = v442;
                v331 = v993;
                unsigned int v445 = v444 + 4;
                unint64_t v446 = (v444 + 4);
                if (v443 < v446)
                {
LABEL_690:
                  v452 = &v1007[2 * v378];
                  _DWORD *v452 = v433 + v434;
                  v452[1] = v445;
                  uint64_t v378 = (v378 + 1);
                  if (v445 > v418) {
                    goto LABEL_923;
                  }
                  unint64_t v435 = v446;
                  if (&v331[v446] == (unsigned __int8 *)v16) {
                    goto LABEL_923;
                  }
                }
              }
            }
LABEL_657:
            if (++v433 >= v430)
            {
              *(_DWORD *)(v762 + 4 * v758) = v421;
              unsigned int v453 = v766;
              if (v766 < v901) {
                goto LABEL_699;
              }
              unint64_t v529 = 0;
              unint64_t v530 = 0;
              int v531 = ~(-1 << v754);
              unsigned int v794 = v421 + 2;
              v783 = (char *)v768 + v330;
              uint64_t v775 = v893 + 8;
              while (1)
              {
                int v1001 = v531;
                unint64_t v532 = v530 >= v529 ? v529 : v530;
                v533 = &v331[v532];
                if (v532 + v453 >= v423) {
                  break;
                }
                unint64_t v829 = v530;
                unint64_t v842 = v529;
                unint64_t v806 = v532;
                uint64_t v534 = v378;
                unint64_t v535 = v435;
                unint64_t v536 = ZSTD_count_2segments(v533, (char *)(v969 + v453 + v532), v16, v917, v909);
                unint64_t v530 = v829;
                unint64_t v529 = v842;
                unint64_t v435 = v535;
                unint64_t v423 = v925;
                uint64_t v378 = v534;
                unint64_t v537 = v536 + v806;
                uint64_t v538 = v969 + v453;
                if (v536 + v806 + v453 >= v925) {
                  uint64_t v538 = v893 + v453;
                }
                if (v537 > v535) {
                  goto LABEL_836;
                }
LABEL_857:
                unint64_t v16 = (unint64_t)v1005;
                v331 = v993;
LABEL_858:
                v544 = (unsigned int *)(v860 + 8 * (v453 & v883));
                if (*(unsigned __int8 *)(v538 + v537) >= v331[v537])
                {
                  unsigned int *v933 = v453;
                  if (v453 <= v872)
                  {
                    v933 = (unsigned int *)&v1013;
                    goto LABEL_699;
                  }
                  unint64_t v529 = v537;
                  v933 = (unsigned int *)(v860 + 8 * (v453 & v883));
                  int v531 = v1001 - 1;
                  if (!v1001) {
                    goto LABEL_699;
                  }
                }
                else
                {
                  unsigned int *v940 = v453;
                  if (v453 <= v872)
                  {
                    v940 = (unsigned int *)&v1013;
                    goto LABEL_699;
                  }
                  ++v544;
                  unint64_t v530 = v537;
                  v940 = v544;
                  int v531 = v1001 - 1;
                  if (!v1001) {
                    goto LABEL_699;
                  }
                }
                unsigned int v453 = *v544;
                if (*v544 < v901)
                {
LABEL_699:
                  unsigned int *v933 = 0;
                  unsigned int *v940 = 0;
                  unsigned int v454 = v950 - 8;
                  goto LABEL_922;
                }
              }
              uint64_t v538 = v893 + v453;
              v541 = (void *)(v538 + v532);
              if (v1006 <= (unint64_t)v533)
              {
                v543 = (char *)&v331[v532];
                if ((unint64_t)v533 >= v987) {
                  goto LABEL_848;
                }
              }
              else
              {
                unint64_t v542 = *(void *)v533 ^ *v541;
                if (v542)
                {
                  unint64_t v537 = (__clz(__rbit64(v542)) >> 3) + v532;
                  if (v537 <= v435) {
                    goto LABEL_857;
                  }
                  goto LABEL_836;
                }
                uint64_t v545 = 0;
                v546 = &v783[v532];
                while (1)
                {
                  v547 = &v546[v545];
                  if ((unint64_t)&v546[v545] >= v1006) {
                    break;
                  }
                  uint64_t v548 = *(void *)(v775 + v532 + v453 + v545);
                  v545 += 8;
                  unint64_t v549 = *(void *)v547 ^ v548;
                  if (v549)
                  {
                    unint64_t v537 = v545 + (__clz(__rbit64(v549)) >> 3) + v532;
                    if (v537 <= v435) {
                      goto LABEL_857;
                    }
LABEL_836:
                    unsigned int v539 = v950;
                    if (v537 > v950 - v453) {
                      unsigned int v539 = v453 + v537;
                    }
                    unsigned int v950 = v539;
                    v540 = &v1007[2 * v378];
                    _DWORD *v540 = v794 - v453;
                    v540[1] = v537;
                    uint64_t v378 = (v378 + 1);
                    unint64_t v16 = (unint64_t)v1005;
                    v331 = v993;
                    if (v537 > 0x1000) {
                      goto LABEL_699;
                    }
                    unint64_t v435 = v537;
                    if (&v993[v537] == v1005) {
                      goto LABEL_699;
                    }
                    goto LABEL_858;
                  }
                }
                v543 = &v783[v532 + v545];
                v541 = (void *)(v775 + v532 + v453 + v545);
                if ((unint64_t)v543 >= v987)
                {
LABEL_848:
                  if ((unint64_t)v543 >= v986)
                  {
                    if ((unint64_t)v543 >= v16) {
                      goto LABEL_856;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v541 == *(unsigned __int16 *)v543)
                    {
                      v543 += 2;
                      v541 = (void *)((char *)v541 + 2);
                    }
                    if ((unint64_t)v543 >= v16)
                    {
LABEL_856:
                      unint64_t v537 = v543 - (char *)v331;
                      if (v537 <= v435) {
                        goto LABEL_857;
                      }
                      goto LABEL_836;
                    }
                  }
                  if (*(unsigned __int8 *)v541 == *v543) {
                    ++v543;
                  }
                  goto LABEL_856;
                }
              }
              if (*(_DWORD *)v541 == *(_DWORD *)v543)
              {
                v543 += 4;
                v541 = (void *)((char *)v541 + 4);
              }
              goto LABEL_848;
            }
          }
        }
        v331 = v993;
        if (v379 == 5)
        {
          uint64_t v378 = 0;
          if (*(_DWORD *)(v380 + 212) >= 0xFFFu) {
            unsigned int v455 = 4095;
          }
          else {
            unsigned int v455 = *(_DWORD *)(v380 + 212);
          }
          v456 = v993 + 4;
          int v755 = *(_DWORD *)(v380 + 204);
          unint64_t v759 = (0xCF1BBCDCBB000000 * *(void *)v993) >> -(char)*(_DWORD *)(v380 + 200);
          uint64_t v763 = *(void *)(v380 + 48);
          unsigned int v941 = *(_DWORD *)(v763 + 4 * v759);
          uint64_t v457 = *(void *)(v380 + 8);
          unsigned int v458 = v993 - v457;
          int v459 = -1 << (*(_DWORD *)(v380 + 196) - 1);
          unint64_t v460 = *(unsigned int *)(v380 + 24);
          uint64_t v951 = *(void *)(v380 + 16);
          uint64_t v884 = v457;
          v902 = (void *)(v457 + v460);
          v910 = (char *)(v951 + v460);
          int v873 = ~v459;
          unsigned int v461 = v993 - v457 + v459 + 1;
          if (v458 < ~v459) {
            unsigned int v461 = 0;
          }
          unsigned int v861 = v461;
          unsigned int v462 = 1 << *(_DWORD *)(v380 + 192);
          if (v458 - *(_DWORD *)(v380 + 28) > v462 && *(_DWORD *)(v380 + 32) == 0) {
            unsigned int v464 = v458 - v462;
          }
          else {
            unsigned int v464 = *(_DWORD *)(v380 + 28);
          }
          if (v464 <= 1) {
            int v465 = 1;
          }
          else {
            int v465 = v464;
          }
          unsigned int v894 = v465;
          uint64_t v840 = *(void *)(v380 + 64);
          v934 = (unsigned int *)(v840 + 8 * (v458 & ~v459));
          unsigned int v767 = v458 + 9;
          int v1013 = 0;
          uint64_t v466 = v923;
          if (v923) {
            unint64_t v467 = 4;
          }
          else {
            unint64_t v467 = 3;
          }
          unsigned int v468 = v458 - v460;
          unsigned int v469 = v458 - v464;
          uint64_t v470 = v923;
          uint64_t v471 = v923 << 63 >> 63;
          unint64_t v472 = (v983 - 1);
          v918 = v934 + 1;
          unint64_t v926 = v460;
          unsigned int v827 = v458;
          unsigned int v816 = v464;
          unsigned int v804 = v455;
          unsigned int v792 = v458 - v460;
          unsigned int v781 = v458 - v464;
          uint64_t v773 = v466 << 63 >> 63;
          while (1)
          {
            if (v470 == 3)
            {
              unsigned int v473 = *v1000 - 1;
              unsigned int v474 = v458 - v473;
              unsigned int v475 = *v1000 - 2;
              if (v475 < v468) {
                goto LABEL_730;
              }
            }
            else
            {
              unsigned int v473 = v1000[v470];
              unsigned int v474 = v458 - v473;
              unsigned int v475 = v473 - 1;
              if (v473 - 1 < v468)
              {
LABEL_730:
                if (v474 < v464 || *(_DWORD *)v331 != *(_DWORD *)&v331[-v473]) {
                  goto LABEL_718;
                }
                v483 = (void *)((char *)v456 - v473);
                if (v1006 > (unint64_t)v456)
                {
                  v484 = v993 + 4;
                  unint64_t v485 = *v456 ^ *v483;
                  if (v485)
                  {
                    unsigned int v480 = (__clz(__rbit64(v485)) >> 3) + 4;
                    unint64_t v481 = v480;
                    if (v472 < v480) {
                      goto LABEL_751;
                    }
                    goto LABEL_718;
                  }
                  do
                  {
                    ++v483;
                    if ((unint64_t)++v484 >= v1006) {
                      goto LABEL_743;
                    }
                    unint64_t v486 = *v484 ^ *v483;
                  }
                  while (!v486);
                  v484 = (void *)((char *)v484 + (__clz(__rbit64(v486)) >> 3));
                  goto LABEL_750;
                }
                v484 = v993 + 4;
LABEL_743:
                if ((unint64_t)v484 >= v987)
                {
                  if ((unint64_t)v484 >= v986) {
                    goto LABEL_747;
                  }
                }
                else
                {
                  if (*(_DWORD *)v483 == *(_DWORD *)v484)
                  {
                    v484 = (void *)((char *)v484 + 4);
                    v483 = (void *)((char *)v483 + 4);
                  }
                  if ((unint64_t)v484 >= v986)
                  {
LABEL_747:
                    if ((unint64_t)v484 < v16) {
                      goto LABEL_748;
                    }
                    goto LABEL_750;
                  }
                }
                if (*(unsigned __int16 *)v483 == *(unsigned __int16 *)v484)
                {
                  v484 = (void *)((char *)v484 + 2);
                  v483 = (void *)((char *)v483 + 2);
                }
                if ((unint64_t)v484 < v16)
                {
LABEL_748:
                  if (*(unsigned __int8 *)v483 == *(unsigned __int8 *)v484) {
                    LODWORD(v484) = v484 + 1;
                  }
                }
LABEL_750:
                unsigned int v480 = v484 - v993;
                unint64_t v481 = v480;
                if (v472 < v480) {
                  goto LABEL_751;
                }
                goto LABEL_718;
              }
            }
            if (v475 < v469 && v460 + ~v474 >= 3)
            {
              uint64_t v477 = v951 + v474;
              if (*(_DWORD *)v331 == *(_DWORD *)v477)
              {
                unint64_t v970 = v472;
                uint64_t v478 = v378;
                int v479 = ZSTD_count_2segments(v456, (char *)(v477 + 4), v16, v910, v902);
                LODWORD(v471) = v773;
                unsigned int v469 = v781;
                unsigned int v468 = v792;
                unsigned int v464 = v816;
                unsigned int v455 = v804;
                unint64_t v472 = v970;
                unint64_t v460 = v926;
                uint64_t v378 = v478;
                v331 = v993;
                unint64_t v16 = (unint64_t)v1005;
                unsigned int v480 = v479 + 4;
                unsigned int v458 = v827;
                unint64_t v481 = v480;
                if (v970 < v480)
                {
LABEL_751:
                  v487 = &v1007[2 * v378];
                  _DWORD *v487 = v470 + v471;
                  v487[1] = v480;
                  uint64_t v378 = (v378 + 1);
                  if (v480 > v455) {
                    goto LABEL_923;
                  }
                  unint64_t v472 = v481;
                  if (&v331[v481] == (unsigned __int8 *)v16) {
                    goto LABEL_923;
                  }
                }
              }
            }
LABEL_718:
            if (++v470 >= v467)
            {
              *(_DWORD *)(v763 + 4 * v759) = v458;
              unsigned int v550 = v941;
              if (v941 < v894)
              {
LABEL_920:
                unsigned int v554 = v767;
                goto LABEL_921;
              }
              unint64_t v551 = 0;
              unint64_t v552 = 0;
              int v553 = ~(-1 << v755);
              unsigned int v795 = v458 + 2;
              v784 = (char *)v768 + v330;
              uint64_t v776 = v884 + 8;
              unsigned int v554 = v767;
              while (1)
              {
                int v1002 = v553;
                if (v552 >= v551) {
                  unint64_t v555 = v551;
                }
                else {
                  unint64_t v555 = v552;
                }
                uint64_t v556 = v550;
                v557 = &v331[v555];
                if (v555 + v550 < v460)
                {
                  uint64_t v558 = v951 + v550;
                  unint64_t v972 = v472;
                  unint64_t v818 = v552;
                  unint64_t v830 = v551;
                  unsigned int v943 = v550;
                  uint64_t v559 = v378;
                  unint64_t v807 = v555;
                  unint64_t v560 = ZSTD_count_2segments(v557, (char *)(v558 + v555), v16, v910, v902);
                  unint64_t v552 = v818;
                  unint64_t v551 = v830;
                  unint64_t v472 = v972;
                  unint64_t v460 = v926;
                  uint64_t v378 = v559;
                  unsigned int v550 = v943;
                  unint64_t v561 = v560 + v807;
                  if (v560 + v807 + v556 >= v926) {
                    uint64_t v562 = v884 + v556;
                  }
                  else {
                    uint64_t v562 = v558;
                  }
                  if (v561 > v972) {
                    goto LABEL_883;
                  }
LABEL_904:
                  unint64_t v16 = (unint64_t)v1005;
                  v331 = v993;
                  goto LABEL_905;
                }
                uint64_t v562 = v884 + v550;
                v564 = (void *)(v562 + v555);
                if (v1006 <= (unint64_t)v557) {
                  break;
                }
                unint64_t v565 = *(void *)v557 ^ *v564;
                if (v565)
                {
                  unint64_t v561 = (__clz(__rbit64(v565)) >> 3) + v555;
                  if (v561 <= v472) {
                    goto LABEL_904;
                  }
                  goto LABEL_883;
                }
                uint64_t v568 = 0;
                v569 = &v784[v555];
                do
                {
                  v570 = &v569[v568];
                  if ((unint64_t)&v569[v568] >= v1006)
                  {
                    v566 = &v784[v555 + v568];
                    v564 = (void *)(v776 + v555 + v550 + v568);
                    if ((unint64_t)v566 >= v987) {
                      goto LABEL_895;
                    }
                    goto LABEL_893;
                  }
                  uint64_t v571 = *(void *)(v776 + v555 + v550 + v568);
                  v568 += 8;
                  unint64_t v572 = *(void *)v570 ^ v571;
                }
                while (!v572);
                unint64_t v561 = v568 + (__clz(__rbit64(v572)) >> 3) + v555;
                if (v561 <= v472) {
                  goto LABEL_904;
                }
LABEL_883:
                if (v561 > v554 - v550) {
                  unsigned int v554 = v550 + v561;
                }
                v563 = &v1007[2 * v378];
                _DWORD *v563 = v795 - v550;
                v563[1] = v561;
                uint64_t v378 = (v378 + 1);
                unint64_t v16 = (unint64_t)v1005;
                v331 = v993;
                if (v561 > 0x1000) {
                  goto LABEL_921;
                }
                unint64_t v472 = v561;
                if (&v993[v561] == v1005) {
                  goto LABEL_921;
                }
LABEL_905:
                v567 = (unsigned int *)(v840 + 8 * (v550 & v873));
                if (*(unsigned __int8 *)(v562 + v561) >= v331[v561])
                {
                  unsigned int *v918 = v550;
                  if (v550 <= v861)
                  {
LABEL_1067:
                    v918 = (unsigned int *)&v1013;
                    goto LABEL_921;
                  }
                  unint64_t v551 = v561;
                  v918 = (unsigned int *)(v840 + 8 * (v550 & v873));
                  int v553 = v1002 - 1;
                  if (!v1002) {
                    goto LABEL_921;
                  }
                }
                else
                {
                  unsigned int *v934 = v550;
                  if (v550 <= v861) {
                    goto LABEL_1066;
                  }
                  ++v567;
                  unint64_t v552 = v561;
                  v934 = v567;
                  int v553 = v1002 - 1;
                  if (!v1002) {
                    goto LABEL_921;
                  }
                }
                unsigned int v550 = *v567;
                if (*v567 < v894) {
                  goto LABEL_921;
                }
              }
              v566 = (char *)&v331[v555];
              if ((unint64_t)v557 >= v987) {
                goto LABEL_895;
              }
LABEL_893:
              if (*(_DWORD *)v564 == *(_DWORD *)v566)
              {
                v566 += 4;
                v564 = (void *)((char *)v564 + 4);
              }
LABEL_895:
              if ((unint64_t)v566 >= v986)
              {
                if ((unint64_t)v566 >= v16) {
                  goto LABEL_903;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v564 == *(unsigned __int16 *)v566)
                {
                  v566 += 2;
                  v564 = (void *)((char *)v564 + 2);
                }
                if ((unint64_t)v566 >= v16)
                {
LABEL_903:
                  unint64_t v561 = v566 - (char *)v331;
                  if (v561 <= v472) {
                    goto LABEL_904;
                  }
                  goto LABEL_883;
                }
              }
              if (*(unsigned __int8 *)v564 == *v566) {
                ++v566;
              }
              goto LABEL_903;
            }
          }
        }
        if (v379 != 3)
        {
          uint64_t v378 = 0;
          if (*(_DWORD *)(v380 + 212) >= 0xFFFu) {
            unsigned int v488 = 4095;
          }
          else {
            unsigned int v488 = *(_DWORD *)(v380 + 212);
          }
          v489 = v993 + 4;
          int v756 = *(_DWORD *)(v380 + 204);
          uint64_t v760 = (-1640531535 * *(_DWORD *)v993) >> -(char)*(_DWORD *)(v380 + 200);
          uint64_t v764 = *(void *)(v380 + 48);
          unsigned int v942 = *(_DWORD *)(v764 + 4 * v760);
          uint64_t v490 = *(void *)(v380 + 8);
          unsigned int v491 = v993 - v490;
          int v492 = -1 << (*(_DWORD *)(v380 + 196) - 1);
          unint64_t v493 = *(unsigned int *)(v380 + 24);
          uint64_t v952 = *(void *)(v380 + 16);
          uint64_t v885 = v490;
          v903 = (void *)(v490 + v493);
          v911 = (char *)(v952 + v493);
          int v874 = ~v492;
          unsigned int v494 = v993 - v490 + v492 + 1;
          if (v491 < ~v492) {
            unsigned int v494 = 0;
          }
          unsigned int v841 = v494;
          unsigned int v495 = 1 << *(_DWORD *)(v380 + 192);
          if (v491 - *(_DWORD *)(v380 + 28) > v495 && *(_DWORD *)(v380 + 32) == 0) {
            unsigned int v497 = v491 - v495;
          }
          else {
            unsigned int v497 = *(_DWORD *)(v380 + 28);
          }
          if (v497 <= 1) {
            int v498 = 1;
          }
          else {
            int v498 = v497;
          }
          unsigned int v895 = v498;
          uint64_t v862 = *(void *)(v380 + 64);
          v934 = (unsigned int *)(v862 + 8 * (v491 & ~v492));
          unsigned int v767 = v491 + 9;
          int v1013 = 0;
          uint64_t v499 = v923;
          if (v923) {
            unint64_t v500 = 4;
          }
          else {
            unint64_t v500 = 3;
          }
          unsigned int v501 = v491 - v493;
          unsigned int v502 = v491 - v497;
          uint64_t v503 = v923;
          uint64_t v504 = v923 << 63 >> 63;
          unint64_t v505 = (v983 - 1);
          v918 = v934 + 1;
          unint64_t v927 = v493;
          unsigned int v828 = v491;
          unsigned int v817 = v497;
          unsigned int v805 = v488;
          unsigned int v793 = v491 - v493;
          unsigned int v782 = v491 - v497;
          uint64_t v774 = v499 << 63 >> 63;
          while (1)
          {
            if (v503 == 3)
            {
              unsigned int v506 = *v1000 - 1;
              unsigned int v507 = v491 - v506;
              unsigned int v508 = *v1000 - 2;
              if (v508 < v501) {
                goto LABEL_789;
              }
            }
            else
            {
              unsigned int v506 = v1000[v503];
              unsigned int v507 = v491 - v506;
              unsigned int v508 = v506 - 1;
              if (v506 - 1 < v501)
              {
LABEL_789:
                if (v507 < v497 || *(_DWORD *)v331 != *(_DWORD *)&v331[-v506]) {
                  goto LABEL_777;
                }
                v516 = (void *)((char *)v489 - v506);
                if (v1006 > (unint64_t)v489)
                {
                  v517 = v993 + 4;
                  unint64_t v518 = *v489 ^ *v516;
                  if (v518)
                  {
                    unsigned int v513 = (__clz(__rbit64(v518)) >> 3) + 4;
                    unint64_t v514 = v513;
                    if (v505 < v513) {
                      goto LABEL_810;
                    }
                    goto LABEL_777;
                  }
                  do
                  {
                    ++v516;
                    if ((unint64_t)++v517 >= v1006) {
                      goto LABEL_802;
                    }
                    unint64_t v519 = *v517 ^ *v516;
                  }
                  while (!v519);
                  v517 = (void *)((char *)v517 + (__clz(__rbit64(v519)) >> 3));
                  goto LABEL_809;
                }
                v517 = v993 + 4;
LABEL_802:
                if ((unint64_t)v517 >= v987)
                {
                  if ((unint64_t)v517 >= v986) {
                    goto LABEL_806;
                  }
                }
                else
                {
                  if (*(_DWORD *)v516 == *(_DWORD *)v517)
                  {
                    v517 = (void *)((char *)v517 + 4);
                    v516 = (void *)((char *)v516 + 4);
                  }
                  if ((unint64_t)v517 >= v986)
                  {
LABEL_806:
                    if ((unint64_t)v517 < v16) {
                      goto LABEL_807;
                    }
                    goto LABEL_809;
                  }
                }
                if (*(unsigned __int16 *)v516 == *(unsigned __int16 *)v517)
                {
                  v517 = (void *)((char *)v517 + 2);
                  v516 = (void *)((char *)v516 + 2);
                }
                if ((unint64_t)v517 < v16)
                {
LABEL_807:
                  if (*(unsigned __int8 *)v516 == *(unsigned __int8 *)v517) {
                    LODWORD(v517) = v517 + 1;
                  }
                }
LABEL_809:
                unsigned int v513 = v517 - v993;
                unint64_t v514 = v513;
                if (v505 < v513) {
                  goto LABEL_810;
                }
                goto LABEL_777;
              }
            }
            if (v508 < v502 && v493 + ~v507 >= 3)
            {
              uint64_t v510 = v952 + v507;
              if (*(_DWORD *)v331 == *(_DWORD *)v510)
              {
                unint64_t v971 = v505;
                uint64_t v511 = v378;
                int v512 = ZSTD_count_2segments(v489, (char *)(v510 + 4), v16, v911, v903);
                LODWORD(v504) = v774;
                unsigned int v502 = v782;
                unsigned int v501 = v793;
                unsigned int v497 = v817;
                unsigned int v488 = v805;
                unint64_t v505 = v971;
                unint64_t v493 = v927;
                uint64_t v378 = v511;
                v331 = v993;
                unint64_t v16 = (unint64_t)v1005;
                unsigned int v513 = v512 + 4;
                unsigned int v491 = v828;
                unint64_t v514 = v513;
                if (v971 < v513)
                {
LABEL_810:
                  v520 = &v1007[2 * v378];
                  _DWORD *v520 = v503 + v504;
                  v520[1] = v513;
                  uint64_t v378 = (v378 + 1);
                  if (v513 > v488) {
                    goto LABEL_923;
                  }
                  unint64_t v505 = v514;
                  if (&v331[v514] == (unsigned __int8 *)v16) {
                    goto LABEL_923;
                  }
                }
              }
            }
LABEL_777:
            if (++v503 >= v500)
            {
              *(_DWORD *)(v764 + 4 * v760) = v491;
              unsigned int v573 = v942;
              if (v942 < v895) {
                goto LABEL_920;
              }
              unint64_t v617 = 0;
              unint64_t v618 = 0;
              int v619 = ~(-1 << v756);
              unsigned int v796 = v491 + 2;
              v785 = (char *)v768 + v330;
              uint64_t v777 = v885 + 8;
              unsigned int v554 = v767;
              while (1)
              {
                int v1003 = v619;
                if (v618 >= v617) {
                  unint64_t v620 = v617;
                }
                else {
                  unint64_t v620 = v618;
                }
                uint64_t v621 = v573;
                v622 = &v331[v620];
                if (v620 + v573 < v493)
                {
                  uint64_t v623 = v952 + v573;
                  unint64_t v973 = v505;
                  unint64_t v819 = v618;
                  unint64_t v831 = v617;
                  unsigned int v944 = v573;
                  uint64_t v624 = v378;
                  unint64_t v808 = v620;
                  unint64_t v625 = ZSTD_count_2segments(v622, (char *)(v623 + v620), v16, v911, v903);
                  unint64_t v618 = v819;
                  unint64_t v617 = v831;
                  unint64_t v505 = v973;
                  unint64_t v493 = v927;
                  uint64_t v378 = v624;
                  unsigned int v573 = v944;
                  unint64_t v626 = v625 + v808;
                  if (v625 + v808 + v621 >= v927) {
                    uint64_t v627 = v885 + v621;
                  }
                  else {
                    uint64_t v627 = v623;
                  }
                  if (v626 > v973) {
                    goto LABEL_980;
                  }
LABEL_1001:
                  unint64_t v16 = (unint64_t)v1005;
                  v331 = v993;
                  goto LABEL_1002;
                }
                uint64_t v627 = v885 + v573;
                v629 = (void *)(v627 + v620);
                if (v1006 <= (unint64_t)v622) {
                  break;
                }
                unint64_t v630 = *(void *)v622 ^ *v629;
                if (v630)
                {
                  unint64_t v626 = (__clz(__rbit64(v630)) >> 3) + v620;
                  if (v626 <= v505) {
                    goto LABEL_1001;
                  }
                  goto LABEL_980;
                }
                uint64_t v633 = 0;
                v634 = &v785[v620];
                do
                {
                  v635 = &v634[v633];
                  if ((unint64_t)&v634[v633] >= v1006)
                  {
                    v631 = &v785[v620 + v633];
                    v629 = (void *)(v777 + v620 + v573 + v633);
                    if ((unint64_t)v631 >= v987) {
                      goto LABEL_992;
                    }
                    goto LABEL_990;
                  }
                  uint64_t v636 = *(void *)(v777 + v620 + v573 + v633);
                  v633 += 8;
                  unint64_t v637 = *(void *)v635 ^ v636;
                }
                while (!v637);
                unint64_t v626 = v633 + (__clz(__rbit64(v637)) >> 3) + v620;
                if (v626 <= v505) {
                  goto LABEL_1001;
                }
LABEL_980:
                if (v626 > v554 - v573) {
                  unsigned int v554 = v573 + v626;
                }
                v628 = &v1007[2 * v378];
                _DWORD *v628 = v796 - v573;
                v628[1] = v626;
                uint64_t v378 = (v378 + 1);
                unint64_t v16 = (unint64_t)v1005;
                v331 = v993;
                if (v626 > 0x1000 || (unint64_t v505 = v626, &v993[v626] == v1005))
                {
LABEL_921:
                  unsigned int *v918 = 0;
                  unsigned int *v934 = 0;
                  unsigned int v454 = v554 - 8;
LABEL_922:
                  *(_DWORD *)(v964 + 36) = v454;
LABEL_923:
                  uint64_t v7 = v964;
LABEL_924:
                  unsigned int v574 = v983;
                  v402 = v11 + 7;
                  goto LABEL_925;
                }
LABEL_1002:
                v632 = (unsigned int *)(v862 + 8 * (v573 & v874));
                if (*(unsigned __int8 *)(v627 + v626) < v331[v626])
                {
                  unsigned int *v934 = v573;
                  if (v573 > v841)
                  {
                    ++v632;
                    unint64_t v618 = v626;
                    v934 = v632;
                    int v619 = v1003 - 1;
                    if (!v1003) {
                      goto LABEL_921;
                    }
                    goto LABEL_971;
                  }
LABEL_1066:
                  v934 = (unsigned int *)&v1013;
                  goto LABEL_921;
                }
                unsigned int *v918 = v573;
                if (v573 <= v841) {
                  goto LABEL_1067;
                }
                unint64_t v617 = v626;
                v918 = (unsigned int *)(v862 + 8 * (v573 & v874));
                int v619 = v1003 - 1;
                if (!v1003) {
                  goto LABEL_921;
                }
LABEL_971:
                unsigned int v573 = *v632;
                if (*v632 < v895) {
                  goto LABEL_921;
                }
              }
              v631 = (char *)&v331[v620];
              if ((unint64_t)v622 >= v987) {
                goto LABEL_992;
              }
LABEL_990:
              if (*(_DWORD *)v629 == *(_DWORD *)v631)
              {
                v631 += 4;
                v629 = (void *)((char *)v629 + 4);
              }
LABEL_992:
              if ((unint64_t)v631 >= v986)
              {
                if ((unint64_t)v631 >= v16) {
                  goto LABEL_1000;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v629 == *(unsigned __int16 *)v631)
                {
                  v631 += 2;
                  v629 = (void *)((char *)v629 + 2);
                }
                if ((unint64_t)v631 >= v16)
                {
LABEL_1000:
                  unint64_t v626 = v631 - (char *)v331;
                  if (v626 <= v505) {
                    goto LABEL_1001;
                  }
                  goto LABEL_980;
                }
              }
              if (*(unsigned __int8 *)v629 == *v631) {
                ++v631;
              }
              goto LABEL_1000;
            }
          }
        }
        uint64_t v378 = 0;
        v750 = (char *)v768 + v330;
        if (*(_DWORD *)(v380 + 212) >= 0xFFFu) {
          unsigned int v383 = 4095;
        }
        else {
          unsigned int v383 = *(_DWORD *)(v380 + 212);
        }
        uint64_t v384 = *(void *)(v380 + 8);
        uint64_t v385 = *(void *)(v380 + 16);
        unsigned int v386 = v993 - v384;
        v387 = v993 + 3;
        int v751 = *(_DWORD *)(v380 + 204);
        uint64_t v753 = (-1640531535 * *(_DWORD *)v993) >> -(char)*(_DWORD *)(v380 + 200);
        uint64_t v757 = *(void *)(v380 + 48);
        unsigned int v761 = *(_DWORD *)(v757 + 4 * v753);
        int v388 = -1 << (*(_DWORD *)(v380 + 196) - 1);
        unint64_t v389 = *(unsigned int *)(v380 + 24);
        v892 = (char *)(v385 + v389);
        uint64_t v968 = v384;
        v882 = (void *)(v384 + v389);
        int v871 = ~v388;
        unsigned int v390 = v993 - v384 + v388 + 1;
        if ((int)v993 - (int)v384 < ~v388) {
          unsigned int v390 = 0;
        }
        unsigned int v859 = v390;
        unsigned int v391 = 1 << *(_DWORD *)(v380 + 192);
        if (v386 - *(_DWORD *)(v380 + 28) > v391 && *(_DWORD *)(v380 + 32) == 0) {
          unsigned int v393 = v386 - v391;
        }
        else {
          unsigned int v393 = *(_DWORD *)(v380 + 28);
        }
        if (v393 <= 1) {
          int v394 = 1;
        }
        else {
          int v394 = v393;
        }
        unsigned int v939 = v394;
        uint64_t v838 = *(void *)(v380 + 64);
        v916 = (unsigned int *)(v838 + 8 * (v386 & ~v388));
        v908 = v916 + 1;
        unsigned int v932 = v386 + 9;
        int v1013 = 0;
        uint64_t v395 = v923;
        if (v923) {
          unint64_t v396 = 4;
        }
        else {
          unint64_t v396 = 3;
        }
        unsigned int v397 = v386 - v389;
        unsigned int v398 = v386 - v393;
        uint64_t v399 = v923;
        uint64_t v400 = v923 << 63 >> 63;
        unint64_t v401 = (v983 - 1);
        v402 = v11 + 7;
        uint64_t v924 = v385;
        unint64_t v900 = v389;
        unsigned int v825 = v386;
        unsigned int v814 = v383;
        unsigned int v802 = v393;
        unint64_t v790 = v396;
        unsigned int v779 = v386 - v389;
        unsigned int v771 = v386 - v393;
        uint64_t v765 = v395 << 63 >> 63;
        while (2)
        {
          if (v399 == 3)
          {
            unsigned int v403 = *v1000 - 1;
            unsigned int v404 = v386 - v403;
            unsigned int v405 = *v1000 - 2;
            if (v405 >= v397) {
              goto LABEL_600;
            }
LABEL_609:
            if (v404 < v393 || ((*(_DWORD *)&v331[-v403] ^ *(_DWORD *)v331) & 0xFFFFFF) != 0) {
              goto LABEL_597;
            }
            v413 = (void *)((char *)v387 - v403);
            if (v1006 <= (unint64_t)v387)
            {
              v414 = v993 + 3;
            }
            else
            {
              v414 = v993 + 3;
              unint64_t v415 = *v387 ^ *v413;
              if (v415)
              {
                unsigned int v410 = (__clz(__rbit64(v415)) >> 3) + 3;
                unint64_t v411 = v410;
                if (v401 >= v410) {
                  goto LABEL_597;
                }
                goto LABEL_631;
              }
              while (1)
              {
                ++v413;
                if ((unint64_t)++v414 >= v1006) {
                  break;
                }
                unint64_t v416 = *v414 ^ *v413;
                if (v416)
                {
                  unsigned int v410 = v414 + (__clz(__rbit64(v416)) >> 3) - v993;
                  unint64_t v411 = v410;
                  if (v401 >= v410) {
                    goto LABEL_597;
                  }
                  goto LABEL_631;
                }
              }
            }
            if ((unint64_t)v414 >= v987)
            {
              if ((unint64_t)v414 >= v986) {
                goto LABEL_627;
              }
            }
            else
            {
              if (*(_DWORD *)v413 == *(_DWORD *)v414)
              {
                v414 = (void *)((char *)v414 + 4);
                v413 = (void *)((char *)v413 + 4);
              }
              if ((unint64_t)v414 >= v986)
              {
LABEL_627:
                if ((unint64_t)v414 < v16) {
                  goto LABEL_628;
                }
                goto LABEL_630;
              }
            }
            if (*(unsigned __int16 *)v413 == *(unsigned __int16 *)v414)
            {
              v414 = (void *)((char *)v414 + 2);
              v413 = (void *)((char *)v413 + 2);
            }
            if ((unint64_t)v414 < v16)
            {
LABEL_628:
              if (*(unsigned __int8 *)v413 == *(unsigned __int8 *)v414) {
                LODWORD(v414) = v414 + 1;
              }
            }
LABEL_630:
            unsigned int v410 = v414 - v993;
            unint64_t v411 = v410;
            if (v401 >= v410) {
              goto LABEL_597;
            }
            goto LABEL_631;
          }
          unsigned int v403 = v1000[v399];
          unsigned int v404 = v386 - v403;
          unsigned int v405 = v403 - 1;
          if (v403 - 1 < v397) {
            goto LABEL_609;
          }
LABEL_600:
          if (v405 < v398 && v389 + ~v404 >= 3)
          {
            uint64_t v407 = v385 + v404;
            if (((*(_DWORD *)v407 ^ *(_DWORD *)v331) & 0xFFFFFF) == 0)
            {
              unint64_t v949 = v401;
              uint64_t v408 = v378;
              int v409 = ZSTD_count_2segments(v387, (char *)(v407 + 3), v16, v892, v882);
              LODWORD(v400) = v765;
              unsigned int v398 = v771;
              unint64_t v396 = v790;
              unsigned int v393 = v802;
              unsigned int v383 = v814;
              unsigned int v386 = v825;
              unint64_t v401 = v949;
              unint64_t v389 = v900;
              uint64_t v385 = v924;
              uint64_t v378 = v408;
              v331 = v993;
              unint64_t v16 = (unint64_t)v1005;
              unsigned int v410 = v409 + 3;
              unsigned int v397 = v779;
              unint64_t v411 = v410;
              if (v949 < v410)
              {
LABEL_631:
                v417 = &v1007[2 * v378];
                _DWORD *v417 = v399 + v400;
                v417[1] = v410;
                uint64_t v378 = (v378 + 1);
                if (v410 > v383 || (unint64_t v401 = v411, &v331[v411] == (unsigned __int8 *)v16))
                {
                  uint64_t v7 = v964;
                  unsigned int v574 = v983;
                  goto LABEL_925;
                }
              }
            }
          }
LABEL_597:
          if (++v399 < v396) {
            continue;
          }
          break;
        }
        if (v401 > 2)
        {
          uint64_t v7 = v964;
          unsigned int v528 = v761;
          goto LABEL_967;
        }
        uint64_t v7 = v964;
        uint64_t v521 = *(void *)(v964 + 56);
        int v522 = *(_DWORD *)v331;
        int v523 = 32 - *(_DWORD *)(v964 + 40);
        if (v752 < v386)
        {
          uint64_t v524 = v752;
          do
          {
            *(_DWORD *)(v521 + 4 * ((900185344 * *(_DWORD *)(v968 + v524)) >> v523)) = v524;
            ++v524;
          }
          while (v982 - v968 != v524);
        }
        uint64_t v525 = *(unsigned int *)(v521 + 4 * ((900185344 * v522) >> v523));
        int v526 = v386 - v525;
        BOOL v527 = v525 >= v939 && (v386 - v525) >> 18 == 0;
        unsigned int v528 = v761;
        if (!v527)
        {
          unsigned int v752 = v386;
          goto LABEL_967;
        }
        if (v525 < v389)
        {
          unint64_t v954 = v401;
          uint64_t v662 = v378;
          unint64_t v663 = ZSTD_count_2segments(v331, (char *)(v385 + v525), v16, v892, v882);
          unsigned int v383 = v814;
          unsigned int v386 = v825;
          unint64_t v401 = v954;
          unsigned int v528 = v761;
          unint64_t v389 = v900;
          uint64_t v385 = v924;
          uint64_t v378 = v662;
          v331 = v993;
          unint64_t v16 = (unint64_t)v1005;
          unsigned int v752 = v825;
          if (v663 >= 3) {
            goto LABEL_1086;
          }
          goto LABEL_967;
        }
        v664 = (_DWORD *)(v968 + v525);
        if (v1006 <= (unint64_t)v331)
        {
          v666 = (char *)v331;
          if ((unint64_t)v331 < v987)
          {
LABEL_1075:
            if (*v664 == *(_DWORD *)v666)
            {
              v666 += 4;
              ++v664;
            }
          }
          goto LABEL_1077;
        }
        unint64_t v665 = *(void *)v331 ^ *(void *)v664;
        if (!v665)
        {
          uint64_t v668 = 0;
          while (1)
          {
            v666 = &v750[v668];
            if ((unint64_t)&v750[v668] >= v1006) {
              break;
            }
            uint64_t v669 = *(void *)(v968 + v525 + 8 + v668);
            v668 += 8;
            unint64_t v670 = *(void *)v666 ^ v669;
            if (v670)
            {
              unint64_t v663 = v668 + (__clz(__rbit64(v670)) >> 3);
              unsigned int v752 = v386;
              if (v663 < 3) {
                goto LABEL_967;
              }
              goto LABEL_1086;
            }
          }
          v664 = (_DWORD *)(v968 + v525 + v668 + 8);
          if ((unint64_t)v666 < v987) {
            goto LABEL_1075;
          }
LABEL_1077:
          if ((unint64_t)v666 >= v986)
          {
            if ((unint64_t)v666 >= v16) {
              goto LABEL_1085;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v664 == *(unsigned __int16 *)v666)
            {
              v666 += 2;
              v664 = (_DWORD *)((char *)v664 + 2);
            }
            if ((unint64_t)v666 >= v16)
            {
LABEL_1085:
              unint64_t v663 = v666 - (char *)v331;
              unsigned int v752 = v386;
              if ((unint64_t)(v666 - (char *)v331) >= 3) {
                goto LABEL_1086;
              }
              goto LABEL_967;
            }
          }
          if (*(unsigned __int8 *)v664 == *v666) {
            ++v666;
          }
          goto LABEL_1085;
        }
        unint64_t v663 = __clz(__rbit64(v665)) >> 3;
        unsigned int v752 = v386;
        if (v663 >= 3)
        {
LABEL_1086:
          _DWORD *v1007 = v526 + 2;
          v1007[1] = v663;
          if (v663 > v383 || &v331[v663] == (unsigned __int8 *)v16)
          {
            LODWORD(v378) = 1;
            unsigned int v752 = v386;
            unsigned int v574 = v983;
            *(_DWORD *)(v964 + 36) = v386 + 1;
            goto LABEL_925;
          }
          uint64_t v378 = 1;
          unsigned int v752 = v386;
          unint64_t v401 = v663;
        }
LABEL_967:
        *(_DWORD *)(v757 + 4 * v753) = v386;
        if (v528 < v939)
        {
          unsigned int v574 = v983;
          goto LABEL_969;
        }
        unint64_t v638 = 0;
        unint64_t v639 = 0;
        int v640 = ~(-1 << v751);
        unsigned int v797 = v386 + 2;
        v786 = (char *)v768 + v330;
        uint64_t v778 = v968 + 8;
        while (2)
        {
          int v1004 = v640;
          if (v639 >= v638) {
            unint64_t v641 = v638;
          }
          else {
            unint64_t v641 = v639;
          }
          uint64_t v642 = v528;
          v643 = &v331[v641];
          if (v641 + v528 >= v389)
          {
            uint64_t v649 = v968 + v528;
            v652 = (_DWORD *)(v649 + v641);
            if (v1006 <= (unint64_t)v643)
            {
              v654 = (char *)&v331[v641];
              v402 = v11 + 7;
              if ((unint64_t)v643 < v987)
              {
LABEL_1035:
                if (*v652 == *(_DWORD *)v654)
                {
                  v654 += 4;
                  ++v652;
                }
              }
            }
            else
            {
              unint64_t v653 = *(void *)v643 ^ *(void *)v652;
              if (v653)
              {
                v402 = v11 + 7;
                unint64_t v648 = (__clz(__rbit64(v653)) >> 3) + v641;
                unsigned int v574 = v983;
                if (v648 <= v401) {
                  goto LABEL_1046;
                }
                goto LABEL_1025;
              }
              unsigned int v656 = v528;
              uint64_t v657 = 0;
              v658 = &v786[v641];
              while (1)
              {
                v659 = &v658[v657];
                if ((unint64_t)&v658[v657] >= v1006) {
                  break;
                }
                uint64_t v660 = *(void *)(v778 + v641 + v642 + v657);
                v657 += 8;
                unint64_t v661 = *(void *)v659 ^ v660;
                if (v661)
                {
                  v402 = v11 + 7;
                  unsigned int v528 = v656;
                  unint64_t v648 = v657 + (__clz(__rbit64(v661)) >> 3) + v641;
                  unsigned int v574 = v983;
                  if (v648 > v401) {
                    goto LABEL_1025;
                  }
                  goto LABEL_1046;
                }
              }
              v654 = &v786[v641 + v657];
              v652 = (_DWORD *)(v778 + v641 + v642 + v657);
              unsigned int v528 = v656;
              v402 = v11 + 7;
              if ((unint64_t)v654 < v987) {
                goto LABEL_1035;
              }
            }
            if ((unint64_t)v654 >= v986)
            {
              if ((unint64_t)v654 >= v16) {
                goto LABEL_1045;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v652 == *(unsigned __int16 *)v654)
              {
                v654 += 2;
                v652 = (_DWORD *)((char *)v652 + 2);
              }
              if ((unint64_t)v654 >= v16)
              {
LABEL_1045:
                unint64_t v648 = v654 - (char *)v331;
                unsigned int v574 = v983;
                if (v648 <= v401) {
                  goto LABEL_1046;
                }
LABEL_1025:
                unsigned int v650 = v932;
                if (v648 > v932 - v528) {
                  unsigned int v650 = v528 + v648;
                }
                unsigned int v932 = v650;
                v651 = &v1007[2 * v378];
                _DWORD *v651 = v797 - v528;
                v651[1] = v648;
                uint64_t v378 = (v378 + 1);
                unint64_t v16 = (unint64_t)v1005;
                uint64_t v7 = v964;
                v331 = v993;
                if (v648 > 0x1000) {
                  goto LABEL_969;
                }
                unint64_t v401 = v648;
                if (&v993[v648] == v1005) {
                  goto LABEL_969;
                }
                goto LABEL_1047;
              }
            }
            if (*(unsigned __int8 *)v652 == *v654) {
              ++v654;
            }
            goto LABEL_1045;
          }
          unint64_t v809 = v641;
          uint64_t v820 = v385 + v528;
          unint64_t v953 = v401;
          unint64_t v832 = v638;
          uint64_t v644 = v378;
          unsigned int v645 = v528;
          unint64_t v646 = v639;
          unint64_t v647 = ZSTD_count_2segments(v643, (char *)(v820 + v641), v16, v892, v882);
          unint64_t v639 = v646;
          unint64_t v401 = v953;
          unsigned int v528 = v645;
          unint64_t v389 = v900;
          uint64_t v385 = v924;
          uint64_t v378 = v644;
          unint64_t v648 = v647 + v809;
          uint64_t v649 = v820;
          unint64_t v638 = v832;
          if (v647 + v809 + v642 >= v900) {
            uint64_t v649 = v968 + v642;
          }
          v402 = v11 + 7;
          unsigned int v574 = v983;
          if (v648 > v953) {
            goto LABEL_1025;
          }
LABEL_1046:
          unint64_t v16 = (unint64_t)v1005;
          uint64_t v7 = v964;
          v331 = v993;
LABEL_1047:
          v655 = (unsigned int *)(v838 + 8 * (v528 & v871));
          if (*(unsigned __int8 *)(v649 + v648) < v331[v648])
          {
            unsigned int *v916 = v528;
            if (v528 <= v859)
            {
              v916 = (unsigned int *)&v1013;
              goto LABEL_969;
            }
            ++v655;
            unint64_t v639 = v648;
            v916 = v655;
            int v640 = v1004 - 1;
            if (!v1004) {
              goto LABEL_969;
            }
            goto LABEL_1017;
          }
          unsigned int *v908 = v528;
          if (v528 > v859)
          {
            unint64_t v638 = v648;
            v908 = (unsigned int *)(v838 + 8 * (v528 & v871));
            int v640 = v1004 - 1;
            if (!v1004) {
              goto LABEL_969;
            }
LABEL_1017:
            unsigned int v528 = *v655;
            if (*v655 < v939) {
              goto LABEL_969;
            }
            continue;
          }
          break;
        }
        v908 = (unsigned int *)&v1013;
LABEL_969:
        unsigned int *v908 = 0;
        unsigned int *v916 = 0;
        *(_DWORD *)(v7 + 36) = v932 - 8;
LABEL_925:
        unsigned int v1009 = v378;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1010, (uint64_t)v1007, &v1009, v331 - v974, v16 - v331);
        uint64_t v575 = v1009;
        if (!v1009)
        {
          unint64_t v16 = (unint64_t)v1005;
LABEL_530:
          unint64_t v279 = (unint64_t)(v1005 - 32);
          v18 = v985;
          v324 = v994;
          int v325 = v982;
          goto LABEL_531;
        }
        uint64_t v576 = v1009 - 1;
        unsigned int v286 = v1007[2 * v576 + 1];
        unint64_t v16 = (unint64_t)v1005;
        if (v286 <= v850 && v286 + v330 <= 0xFFF)
        {
          uint64_t v577 = 0;
          int v578 = v958 + v962;
          while (1)
          {
            v579 = &v1007[2 * v577];
            unsigned int v580 = v574;
            if (v577) {
              unsigned int v580 = *(v579 - 1) + 1;
            }
            unsigned int v581 = v579[1];
            if (v581 >= v580) {
              break;
            }
LABEL_929:
            if (++v577 == v575) {
              goto LABEL_530;
            }
          }
          signed int v582 = *v579;
          uint64_t v583 = __clz(v582 + 1) ^ 0x1F;
          if (*(_DWORD *)(v7 + 160) == 1)
          {
            int v584 = 0;
            int v585 = v330 + v581;
            unsigned int v586 = v330 + v581;
            while (1)
            {
              unint64_t v588 = v581 + v330;
              unsigned int v589 = __clz(v581 - 2);
              signed int v590 = ((v581 - 2) << 8 >> (v589 ^ 0x1F)) + (((v589 ^ 0x1F) + v583) << 8) + v578 + 4096;
              if (v588 <= v323)
              {
                if (v590 >= (int)v11[7 * v588]) {
                  goto LABEL_936;
                }
                goto LABEL_935;
              }
              uint64_t v591 = v323;
              unint64_t v592 = (v585 - v584) - (unint64_t)v323;
              if (v592 >= 2)
              {
                unint64_t v323 = (v592 & 0xFFFFFFFFFFFFFFFELL) + v323;
                unint64_t v593 = (v586 - v591) & 0xFFFFFFFFFFFFFFFELL;
                v594 = &v1008[7 * v591];
                do
                {
                  *(v594 - 7) = 0x40000000;
                  _DWORD *v594 = 0x40000000;
                  v594 += 14;
                  v593 -= 2;
                }
                while (v593);
                if (v592 == (v592 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_935;
                }
              }
              else
              {
                unint64_t v323 = v323;
              }
              v595 = &v402[7 * v323];
              do
              {
                ++v323;
                _DWORD *v595 = 0x40000000;
                v595 += 7;
              }
              while (v323 < v588);
LABEL_935:
              v587 = (signed int *)&v11[7 * v588];
              v587[2] = v581;
              v587[3] = v23;
              signed int *v587 = v590;
              v587[1] = v582;
LABEL_936:
              --v581;
              ++v584;
              --v586;
              if (v581 < v580) {
                goto LABEL_929;
              }
            }
          }
          int v596 = 0;
          uint64_t v598 = *(void *)(v7 + 96);
          uint64_t v597 = *(void *)(v7 + 104);
          int v599 = *(_DWORD *)(v7 + 156) + *(_DWORD *)(v7 + 152) + 51;
          int v600 = v330 + v581;
          unsigned int v601 = v330 + v581;
          while (2)
          {
            unsigned int v603 = v581 - 3;
            if (v581 - 3 < 0x80) {
              unsigned int v604 = ZSTD_MLcode_ML_Code[v603];
            }
            else {
              unsigned int v604 = 67 - __clz(v603);
            }
            unint64_t v605 = v581 + v330;
            unsigned int v606 = *(_DWORD *)(v597 + 4 * v583) + 1;
            unsigned int v607 = __clz(v606) ^ 0x1F;
            uint64_t v608 = 4 * v604;
            int v609 = *(unsigned int *)((char *)ML_bits + v608);
            LODWORD(v608) = *(_DWORD *)(v598 + v608) + 1;
            unsigned int v610 = __clz(v608) ^ 0x1F;
            signed int v611 = v578
                 + v599
                 - (v606 << 8 >> v607)
                 - (v608 << 8 >> v610)
                 + ((v583 + v609 - v607 - v610) << 8);
            if (v605 <= v323)
            {
              if (v611 < (int)v11[7 * v605]) {
                goto LABEL_949;
              }
            }
            else
            {
              uint64_t v612 = v323;
              unint64_t v613 = (v600 - v596) - (unint64_t)v323;
              if (v613 < 2)
              {
                unint64_t v323 = v323;
                goto LABEL_962;
              }
              unint64_t v323 = (v613 & 0xFFFFFFFFFFFFFFFELL) + v323;
              unint64_t v614 = (v601 - v612) & 0xFFFFFFFFFFFFFFFELL;
              v615 = &v1008[7 * v612];
              do
              {
                *(v615 - 7) = 0x40000000;
                _DWORD *v615 = 0x40000000;
                v615 += 14;
                v614 -= 2;
              }
              while (v614);
              v402 = v11 + 7;
              if (v613 != (v613 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_962:
                v616 = &v402[7 * v323];
                do
                {
                  ++v323;
                  _DWORD *v616 = 0x40000000;
                  v616 += 7;
                }
                while (v323 < v605);
              }
LABEL_949:
              v602 = &v11[7 * v605];
              v602[2] = v581;
              v602[3] = v23;
              unsigned int *v602 = v611;
              v602[1] = v582;
            }
            --v581;
            ++v596;
            --v601;
            if (v581 < v580) {
              goto LABEL_929;
            }
            continue;
          }
        }
        if (*v849) {
          unsigned int v734 = 0;
        }
        else {
          unsigned int v734 = v11[7 * v330 + 3];
        }
        uint64_t v12 = (uint64_t)v1007;
        unint64_t v279 = (unint64_t)(v1005 - 32);
        v18 = v985;
        unsigned int v295 = v1007[2 * v576];
        unsigned int v735 = v330 - v734;
        if (v735 <= 0x1000) {
          unsigned int v294 = v735;
        }
        else {
          unsigned int v294 = 0;
        }
        if (!v286)
        {
LABEL_1183:
          v736 = &v11[7 * v294];
          uint64_t v737 = *((void *)v736 + 2);
          a3[2] = v736[6];
          *(void *)a3 = v737;
          goto LABEL_1117;
        }
LABEL_1103:
        v672 = &v11[7 * v294 + 4];
        if (v295 < 3)
        {
          if (v23) {
            unsigned int v677 = v295;
          }
          else {
            unsigned int v677 = v295 + 1;
          }
          if (v677)
          {
            if (v677 == 3)
            {
              unint64_t v674 = *v672;
              unsigned int v676 = v674 - 1;
            }
            else
            {
              unsigned int v676 = v672[v677];
              unint64_t v674 = *v672;
            }
            BOOL v688 = v677 > 1;
            uint64_t v679 = 2;
            if (v688) {
              uint64_t v679 = 1;
            }
            v673 = &v672[v679];
          }
          else
          {
            unint64_t v678 = *(void *)v672;
            v673 = &v11[7 * v294 + 6];
            unsigned int v676 = v678;
            unint64_t v674 = HIDWORD(v678);
          }
        }
        else
        {
          unsigned int v675 = *v672;
          v673 = &v11[7 * v294 + 5];
          unint64_t v674 = v675;
          unsigned int v676 = v295 - 2;
        }
        unsigned int v680 = *v673;
        *(void *)a3 = v676 | (v674 << 32);
        a3[2] = v680;
LABEL_1117:
        unsigned int v681 = v294 + 1;
        v682 = &v11[7 * v294 + 7];
        unsigned int *v682 = v770;
        v682[1] = v295;
        v682[2] = v286;
        v682[3] = v23;
        *((void *)v682 + 2) = v1014;
        v682[6] = v1015;
        unsigned int v683 = v294;
        if (!v294)
        {
          unsigned int v689 = 1;
          uint64_t v690 = v769;
          goto LABEL_1127;
        }
        do
        {
          v684 = &v11[7 * v683];
          unsigned int v685 = v684[3] + v684[2];
          v686 = &v11[7 * v294];
          long long v687 = *(_OWORD *)v684;
          *(_OWORD *)(v686 + 3) = *(_OWORD *)(v684 + 3);
          *(_OWORD *)v686 = v687;
          --v294;
          BOOL v53 = v683 >= v685;
          v683 -= v685;
          BOOL v688 = v683 != 0 && v53;
          if (!v53) {
            unsigned int v683 = 0;
          }
        }
        while (v688);
        unsigned int v689 = v294 + 1;
        uint64_t v690 = v769;
        if (v689 <= v681)
        {
          while (1)
          {
LABEL_1127:
            while (1)
            {
              unsigned int v693 = v689;
              unsigned int v695 = v11[7 * v689 + 2];
              uint64_t v694 = v11[7 * v689 + 3];
              if (v695) {
                break;
              }
              v15 = &v18[v694];
              unsigned int v689 = v693 + 1;
              if (v693 + 1 > v681) {
                goto LABEL_1123;
              }
            }
            unsigned int v696 = v11[7 * v693 + 1];
            if (*(_DWORD *)(v7 + 176) != 2)
            {
              if (v694)
              {
                v697 = *v963;
                v698 = v18;
                uint64_t v699 = v694;
                do
                {
                  int v700 = *v698++;
                  *(_DWORD *)&v697[4 * v700] += 2;
                  --v699;
                }
                while (v699);
              }
              *(_DWORD *)(v7 + 128) += 2 * v694;
            }
            unsigned int v701 = v694 < 0x40 ? ZSTD_LLcode_LL_Code[v694] : 50 - __clz(v694);
            ++*(_DWORD *)(*(void *)(v7 + 88) + 4 * v701);
            ++*(_DWORD *)(v7 + 132);
            unsigned int v702 = v696 + 1;
            unsigned int v703 = __clz(v696 + 1);
            ++*(_DWORD *)(*(void *)(v7 + 104) + 4 * (v703 ^ 0x1F));
            ++*(_DWORD *)(v7 + 140);
            unsigned int v704 = v695 - 3;
            unsigned int v705 = v695 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v704] : 67 - __clz(v704);
            ++*(_DWORD *)(*(void *)(v7 + 96) + 4 * v705);
            ++*(_DWORD *)(v7 + 136);
            v706 = &v18[v694];
            v707 = *(char **)(v690 + 24);
            if ((unint64_t)&v18[v694] > v279) {
              break;
            }
            *(_OWORD *)v707 = *(_OWORD *)v18;
            uint64_t v710 = *(void *)(v690 + 24);
            if (v694 > 0x10)
            {
              v711 = (_OWORD *)(v710 + 16);
              unint64_t v712 = v710 + v694;
              v713 = (long long *)(v18 + 16);
              do
              {
                long long v714 = *v713++;
                *v711++ = v714;
              }
              while ((unint64_t)v711 < v712);
LABEL_1172:
              *(void *)(v690 + 24) += v694;
              uint64_t v721 = *(void *)(v690 + 8);
              if (v694 >= 0x10000)
              {
                unint64_t v732 = (unint64_t)(v721 - *(void *)v690) >> 3;
                *(_DWORD *)(v690 + 72) = 1;
                *(_DWORD *)(v690 + 76) = v732;
              }
              goto LABEL_1174;
            }
            *(void *)(v690 + 24) = v710 + v694;
            uint64_t v721 = *(void *)(v690 + 8);
LABEL_1174:
            *(_WORD *)(v721 + 4) = v694;
            *(_DWORD *)uint64_t v721 = v702;
            if (v704 >= 0x10000)
            {
              unint64_t v733 = (unint64_t)(v721 - *(void *)v690) >> 3;
              *(_DWORD *)(v690 + 72) = 2;
              *(_DWORD *)(v690 + 76) = v733;
            }
            *(_WORD *)(v721 + 6) = v704;
            *(void *)(v690 + 8) = v721 + 8;
            v18 += v695 + v694;
            v15 = v18;
            unsigned int v689 = v693 + 1;
            if (v693 + 1 > v681) {
              goto LABEL_1123;
            }
          }
          if ((unint64_t)v18 <= v279)
          {
            v709 = &v707[v279 - (void)v18];
            v715 = v18;
            v716 = *(char **)(v690 + 24);
            do
            {
              long long v717 = *(_OWORD *)v715;
              v715 += 16;
              *(_OWORD *)v716 = v717;
              v716 += 16;
            }
            while (v716 < v709);
            v708 = (unsigned __int8 *)v279;
            if (v279 >= (unint64_t)v706) {
              goto LABEL_1172;
            }
          }
          else
          {
            v708 = v18;
            v709 = *(char **)(v690 + 24);
            if (v18 >= v706) {
              goto LABEL_1172;
            }
          }
          if ((unint64_t)v18 <= v279) {
            v718 = (unsigned __int8 *)v279;
          }
          else {
            v718 = v18;
          }
          unint64_t v719 = &v18[v694] - v718;
          if (v719 < 8)
          {
            v720 = v708;
            goto LABEL_1171;
          }
          if ((unint64_t)(v707 - (char *)v18) < 0x20)
          {
            v720 = v708;
            goto LABEL_1171;
          }
          if (v719 >= 0x20)
          {
            unint64_t v722 = v719 & 0xFFFFFFFFFFFFFFE0;
            v723 = (long long *)(v708 + 16);
            v724 = &v707[v718 - v18 + 16];
            unint64_t v725 = v719 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v726 = *v723;
              *((_OWORD *)v724 - 1) = *(v723 - 1);
              *(_OWORD *)v724 = v726;
              v723 += 2;
              v724 += 32;
              v725 -= 32;
            }
            while (v725);
            if (v719 == v722) {
              goto LABEL_1172;
            }
            if ((v719 & 0x18) == 0)
            {
              v720 = &v708[v722];
              v709 += v722;
              goto LABEL_1171;
            }
          }
          else
          {
            unint64_t v722 = 0;
          }
          v709 += v719 & 0xFFFFFFFFFFFFFFF8;
          v720 = &v708[v719 & 0xFFFFFFFFFFFFFFF8];
          v727 = &v708[v722];
          v728 = &v707[&v718[v722] - v18];
          unint64_t v729 = v722 - (v719 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v730 = *(void *)v727;
            v727 += 8;
            *(void *)v728 = v730;
            v728 += 8;
            v729 += 8;
          }
          while (v729);
          if (v719 == (v719 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_1172;
          }
          do
          {
LABEL_1171:
            char v731 = *v720++;
            *v709++ = v731;
          }
          while (v720 < v706);
          goto LABEL_1172;
        }
        v15 = v994;
LABEL_1123:
        if (*(_DWORD *)(v7 + 176) != 2)
        {
          unsigned int v691 = *(_DWORD *)(v7 + 128) + 1;
          unsigned int v692 = __clz(v691) ^ 0x1F;
          *(_DWORD *)(v7 + 144) = (v691 << 8 >> v692) + (v692 << 8);
        }
        unsigned int v19 = *(_DWORD *)(v7 + 140) + 1;
        unsigned int v20 = __clz(v19);
        int32x2_t v21 = vadd_s32(*(int32x2_t *)(v7 + 132), (int32x2_t)0x100000001);
        int32x2_t v22 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v21), (int8x8_t)0x1F0000001FLL);
        *(int32x2_t *)(v7 + 148) = vadd_s32(vshl_n_s32(v22, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v21, 8uLL), (uint32x2_t)vneg_s32(v22)));
        *(_DWORD *)(v7 + 156) = (v19 << 8 >> (v20 ^ 0x1F)) + ((v20 ^ 0x1F) << 8);
        if ((unint64_t)v15 >= v984)
        {
LABEL_1215:
          v974 = v18;
          return v16 - (void)v974;
        }
      }
      else
      {
        v15 = v280 + 1;
        unint64_t v16 = (unint64_t)v1005;
        if ((unint64_t)(v280 + 1) >= v984) {
          goto LABEL_1215;
        }
      }
    }
    uint64_t v26 = 0;
    if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
      unsigned int v70 = 4095;
    }
    else {
      unsigned int v70 = *(_DWORD *)(v7 + 212);
    }
    uint64_t v71 = *(void *)(v7 + 8);
    uint64_t v72 = *(void *)(v7 + 16);
    int v73 = v994 - v71;
    int v74 = -1 << (*(_DWORD *)(v7 + 196) - 1);
    int v913 = ~v74;
    unsigned int v75 = v994 - v71 + v74 + 1;
    if ((int)v994 - (int)v71 < ~v74) {
      unsigned int v75 = 0;
    }
    unsigned int v905 = v75;
    unint64_t v76 = *(unsigned int *)(v7 + 24);
    unsigned int v77 = 1 << *(_DWORD *)(v7 + 192);
    if (v73 - *(_DWORD *)(v7 + 28) > v77 && *(_DWORD *)(v7 + 32) == 0) {
      unsigned int v79 = v73 - v77;
    }
    else {
      unsigned int v79 = *(_DWORD *)(v7 + 28);
    }
    v15 = v994;
    if (v79 <= 1) {
      int v80 = 1;
    }
    else {
      int v80 = v79;
    }
    unsigned int v929 = v80;
    unsigned int v81 = v73 - v76;
    unsigned int v82 = v73 - v79;
    uint64_t v83 = v7;
    uint64_t v84 = v23 == 0;
    v85 = (char *)(v994 + 12);
    int v799 = *(_DWORD *)(v83 + 204);
    unint64_t v822 = (0xCF1BBCDCBF9B0000 * *(void *)v994) >> -(char)*(_DWORD *)(v83 + 200);
    uint64_t v834 = *(void *)(v83 + 48);
    unsigned int v843 = *(_DWORD *)(v834 + 4 * v822);
    uint64_t v989 = v72;
    v946 = (char *)(v72 + v76);
    uint64_t v920 = v71;
    v936 = (void *)(v71 + v76);
    uint64_t v897 = *(void *)(v83 + 64);
    v960 = (unsigned int *)(v897 + 8 * (v73 & ~v74));
    v966 = v960 + 1;
    int v811 = v73 + 9;
    int v1013 = 0;
    if (v23) {
      unint64_t v86 = 3;
    }
    else {
      unint64_t v86 = 4;
    }
    v87 = v994 + 4;
    if (v23) {
      uint64_t v88 = 0;
    }
    else {
      uint64_t v88 = -1;
    }
    unint64_t v997 = (v983 - 1);
    v18 = v985;
    unint64_t v956 = v76;
    unsigned int v976 = v70;
    unsigned int v887 = v79;
    unsigned int v864 = v73 - v79;
    int v876 = v73;
    unint64_t v852 = v86;
    while (1)
    {
      if (v84 == 3)
      {
        unsigned int v89 = *a3 - 1;
        unsigned int v90 = v73 - v89;
        unsigned int v91 = *a3 - 2;
        if (v91 >= v81) {
          goto LABEL_112;
        }
      }
      else
      {
        unsigned int v89 = a3[v84];
        unsigned int v90 = v73 - v89;
        unsigned int v91 = v89 - 1;
        if (v89 - 1 >= v81)
        {
LABEL_112:
          if (v91 < v82 && v76 + ~v90 >= 3)
          {
            uint64_t v93 = v989 + v90;
            if (*(_DWORD *)v15 == *(_DWORD *)v93)
            {
              uint64_t v94 = v26;
              uint64_t v95 = v88;
              int v96 = ZSTD_count_2segments(v87, (char *)(v93 + 4), v16, v946, v936);
              unint64_t v86 = v852;
              uint64_t v88 = v95;
              unsigned int v82 = v864;
              int v73 = v876;
              v18 = v985;
              unsigned int v79 = v887;
              unint64_t v76 = v956;
              uint64_t v26 = v94;
              v15 = v994;
              unint64_t v16 = (unint64_t)v1005;
              unsigned int v97 = v96 + 4;
              unsigned int v70 = v976;
              unint64_t v98 = v97;
              if (v997 < v97) {
                goto LABEL_126;
              }
            }
          }
          goto LABEL_109;
        }
      }
      if (v90 < v79 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v89]) {
        goto LABEL_109;
      }
      uint64_t v101 = -(uint64_t)v89;
      v102 = (char *)v87 - v89;
      if (v1006 <= (unint64_t)v87) {
        break;
      }
      unint64_t v103 = *v87 ^ *(void *)v102;
      if (v103)
      {
        unsigned int v97 = (__clz(__rbit64(v103)) >> 3) + 4;
        unint64_t v98 = v97;
        if (v997 < v97) {
          goto LABEL_126;
        }
        goto LABEL_109;
      }
      uint64_t v105 = 0;
      do
      {
        v104 = &v85[v105];
        if ((unint64_t)&v85[v105] >= v1006)
        {
          v102 = &v104[v101];
          if ((unint64_t)v104 >= v987) {
            goto LABEL_136;
          }
          goto LABEL_134;
        }
        uint64_t v106 = *(void *)&v85[v101 + v105];
        v105 += 8;
        unint64_t v107 = *(void *)v104 ^ v106;
      }
      while (!v107);
      unsigned int v97 = v105 + (__clz(__rbit64(v107)) >> 3) + 4;
      unint64_t v98 = v97;
      if (v997 < v97)
      {
LABEL_126:
        v100 = &v1007[2 * v26];
        _DWORD *v100 = v84 + v88;
        v100[1] = v97;
        uint64_t v26 = (v26 + 1);
        if (v97 > v70) {
          goto LABEL_494;
        }
        unint64_t v997 = v98;
        if (&v15[v98] == (unsigned __int8 *)v16) {
          goto LABEL_494;
        }
      }
LABEL_109:
      if (++v84 >= v86)
      {
        *(_DWORD *)(v834 + 4 * v822) = v73;
        unsigned int v108 = v843;
        if (v843 < v929)
        {
          int v109 = v811;
          goto LABEL_155;
        }
        unint64_t v192 = 0;
        unint64_t v193 = 0;
        int v194 = ~(-1 << v799);
        int v867 = v73 + 2;
        v855 = v15 + 8;
        uint64_t v837 = v920 + 8;
        int v109 = v811;
        while (1)
        {
          int v979 = v194;
          unint64_t v195 = v193 >= v192 ? v192 : v193;
          v196 = (char *)&v15[v195];
          if (v195 + v108 >= v76) {
            break;
          }
          unint64_t v890 = v193;
          uint64_t v197 = v26;
          unint64_t v198 = v192;
          unint64_t v199 = ZSTD_count_2segments(v196, (char *)(v989 + v108 + v195), v16, v946, v936);
          unint64_t v192 = v198;
          unint64_t v76 = v956;
          uint64_t v26 = v197;
          unint64_t v200 = v199 + v195;
          uint64_t v201 = v989 + v108;
          unint64_t v193 = v890;
          if (v199 + v195 + v108 >= v956) {
            uint64_t v201 = v920 + v108;
          }
          if (v200 > v997) {
            goto LABEL_304;
          }
LABEL_325:
          unint64_t v16 = (unint64_t)v1005;
          v18 = v985;
          v15 = v994;
LABEL_326:
          v206 = (unsigned int *)(v897 + 8 * (v108 & v913));
          if (*(unsigned __int8 *)(v201 + v200) >= v15[v200])
          {
            unsigned int *v966 = v108;
            if (v108 <= v905)
            {
              v966 = (unsigned int *)&v1013;
              goto LABEL_155;
            }
            unint64_t v192 = v200;
            v966 = (unsigned int *)(v897 + 8 * (v108 & v913));
            int v194 = v979 - 1;
            if (!v979) {
              goto LABEL_155;
            }
          }
          else
          {
            unsigned int *v960 = v108;
            if (v108 <= v905)
            {
              v960 = (unsigned int *)&v1013;
              goto LABEL_155;
            }
            ++v206;
            unint64_t v193 = v200;
            v960 = v206;
            int v194 = v979 - 1;
            if (!v979) {
              goto LABEL_155;
            }
          }
          unsigned int v108 = *v206;
          if (*v206 < v929)
          {
LABEL_155:
            unsigned int *v966 = 0;
            unsigned int *v960 = 0;
            int v110 = v109 - 8;
            goto LABEL_493;
          }
        }
        uint64_t v201 = v920 + v108;
        v203 = (void *)(v201 + v195);
        if (v1006 <= (unint64_t)v196)
        {
          v205 = &v15[v195];
          if ((unint64_t)v196 >= v987) {
            goto LABEL_316;
          }
        }
        else
        {
          unint64_t v204 = *(void *)v196 ^ *v203;
          if (v204)
          {
            unint64_t v200 = (__clz(__rbit64(v204)) >> 3) + v195;
            if (v200 <= v997) {
              goto LABEL_325;
            }
            goto LABEL_304;
          }
          uint64_t v207 = 0;
          v208 = (char *)v855 + v195;
          while (1)
          {
            v209 = &v208[v207];
            if ((unint64_t)&v208[v207] >= v1006) {
              break;
            }
            uint64_t v210 = *(void *)(v837 + v195 + v108 + v207);
            v207 += 8;
            unint64_t v211 = *(void *)v209 ^ v210;
            if (v211)
            {
              unint64_t v200 = v207 + (__clz(__rbit64(v211)) >> 3) + v195;
              if (v200 <= v997) {
                goto LABEL_325;
              }
LABEL_304:
              if (v200 > v109 - v108) {
                int v109 = v108 + v200;
              }
              v202 = &v1007[2 * v26];
              _DWORD *v202 = v867 - v108;
              v202[1] = v200;
              uint64_t v26 = (v26 + 1);
              unint64_t v16 = (unint64_t)v1005;
              v18 = v985;
              v15 = v994;
              if (v200 > 0x1000) {
                goto LABEL_155;
              }
              unint64_t v997 = v200;
              if (&v994[v200] == v1005) {
                goto LABEL_155;
              }
              goto LABEL_326;
            }
          }
          v205 = (unsigned __int8 *)v855 + v195 + v207;
          v203 = (void *)(v837 + v195 + v108 + v207);
          if ((unint64_t)v205 >= v987)
          {
LABEL_316:
            if ((unint64_t)v205 >= v986)
            {
              if ((unint64_t)v205 >= v16) {
                goto LABEL_324;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v203 == *(unsigned __int16 *)v205)
              {
                v205 += 2;
                v203 = (void *)((char *)v203 + 2);
              }
              if ((unint64_t)v205 >= v16)
              {
LABEL_324:
                unint64_t v200 = v205 - (unsigned __int8 *)v196 + v195;
                if (v200 <= v997) {
                  goto LABEL_325;
                }
                goto LABEL_304;
              }
            }
            if (*(unsigned __int8 *)v203 == *v205) {
              ++v205;
            }
            goto LABEL_324;
          }
        }
        if (*(_DWORD *)v203 == *(_DWORD *)v205)
        {
          v205 += 4;
          v203 = (void *)((char *)v203 + 4);
        }
        goto LABEL_316;
      }
    }
    v104 = (char *)(v994 + 4);
    if ((unint64_t)v87 >= v987) {
      goto LABEL_136;
    }
LABEL_134:
    if (*(_DWORD *)v102 == *(_DWORD *)v104)
    {
      v104 += 4;
      v102 += 4;
    }
LABEL_136:
    if ((unint64_t)v104 >= v986)
    {
      if ((unint64_t)v104 >= v16) {
        goto LABEL_144;
      }
    }
    else
    {
      if (*(unsigned __int16 *)v102 == *(unsigned __int16 *)v104)
      {
        v104 += 2;
        v102 += 2;
      }
      if ((unint64_t)v104 >= v16)
      {
LABEL_144:
        unsigned int v97 = v104 - v994;
        unint64_t v98 = v97;
        if (v997 < v97) {
          goto LABEL_126;
        }
        goto LABEL_109;
      }
    }
    if (*v102 == *v104) {
      LODWORD(v104) = v104 + 1;
    }
    goto LABEL_144;
  }
  return v16 - (void)v974;
}

unint64_t ZSTD_compressBlock_fast_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  int v7 = *(_DWORD *)(a1 + 208);
  if (v7 == 5)
  {
    uint64_t v136 = *(void *)(a1 + 8);
    uint64_t v137 = *(unsigned int *)(a1 + 24);
    unint64_t v10 = a4 + a5;
    uint64_t v12 = *a3;
    uint64_t v11 = a3[1];
    uint64_t v138 = *(void *)(a1 + 184);
    v139 = *(char **)v138;
    uint64_t v140 = *(void *)(v138 + 8);
    uint64_t v541 = *(unsigned int *)(v138 + 24);
    unint64_t v581 = v10 - 8;
    int v585 = (unsigned __int8 *)(v136 + v137);
    if (*(void *)v138 + v5 - (v136 + v137) == v140 + v541) {
      unint64_t v141 = v5 + 1;
    }
    else {
      unint64_t v141 = v5;
    }
    if (v141 >= v10 - 8) {
      goto LABEL_713;
    }
    unint64_t v512 = v140 + v541;
    int v531 = a3;
    uint64_t v577 = *(void *)(a1 + 48);
    LODWORD(v142) = *(_DWORD *)(a1 + 212);
    if (v142) {
      uint64_t v142 = v142;
    }
    else {
      uint64_t v142 = 1;
    }
    uint64_t v545 = v142;
    int v573 = 64 - *(_DWORD *)(a1 + 200);
    int v569 = v137 - 1;
    uint64_t v533 = *(void *)(v138 + 48);
    char v537 = 64 - *(_DWORD *)(v138 + 200);
    unint64_t v143 = v10 - 32;
    unint64_t v524 = v10 - 3;
    unint64_t v528 = v10 - 7;
    unsigned int v553 = v137 + v140 - v139;
    uint64_t v557 = v140 - v553;
    uint64_t v508 = v140 - 1;
    uint64_t v516 = v136 + 12;
    unint64_t v520 = v10 - 1;
    unint64_t v589 = v10;
    uint64_t v549 = *(void *)(v138 + 8);
    unint64_t v561 = v10 - 32;
    unint64_t v565 = *(char **)v138;
    while (1)
    {
      unint64_t v144 = 0xCF1BBCDCBB000000 * *(void *)v141;
      uint64_t v145 = 4 * (v144 >> v573);
      uint64_t v146 = *(unsigned int *)(v577 + v145);
      unsigned int v147 = v141 - v136;
      uint64_t v148 = (v141 - v136 - v12 + 1);
      uint64_t v149 = v140 + v148 - v553;
      if (v148 >= v137) {
        uint64_t v149 = v136 + v148;
      }
      *(_DWORD *)(v577 + v145) = v147;
      if ((v569 - v148) >= 3)
      {
        uint64_t v150 = (unsigned __int8 *)(v141 + 1);
        if (*(_DWORD *)v149 == *(_DWORD *)(v141 + 1)) {
          break;
        }
      }
      if (v146 <= v137)
      {
        uint64_t v165 = *(unsigned int *)(v533 + 4 * (v144 >> v537));
        if (v165 > v541 && *(_DWORD *)(v140 + v165) == *(_DWORD *)v141)
        {
          unint64_t v160 = ZSTD_count_2segments((void *)(v141 + 4), (char *)(v140 + v165 + 4), v10, v139, v585) + 4;
          if (v141 > v5)
          {
            int v166 = (unsigned __int8 *)(v508 + v165);
            unsigned int v167 = (unsigned __int8 *)(v141 - 1);
            unint64_t v10 = v589;
            v139 = v565;
            unsigned int v147 = v141 - v136;
            while (*v167 == *v166)
            {
              ++v160;
              unsigned int v168 = v167 - 1;
              if ((unint64_t)v167 > v5)
              {
                --v167;
                BOOL v44 = (unint64_t)v166-- > v512;
                if (v44) {
                  continue;
                }
              }
              unint64_t v141 = (unint64_t)(v168 + 1);
              unint64_t v143 = v561;
              uint64_t v150 = (unsigned __int8 *)v141;
              unint64_t v169 = (unint64_t)&v168[-v5 + 1];
              v170 = *(_OWORD **)(a2 + 24);
              if (v141 <= v561) {
                goto LABEL_296;
              }
              goto LABEL_286;
            }
            unint64_t v141 = (unint64_t)(v167 + 1);
            unint64_t v143 = v561;
            uint64_t v150 = v167 + 1;
            unint64_t v169 = (unint64_t)&v167[-v5 + 1];
            v170 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v167 + 1) > v561) {
              goto LABEL_286;
            }
LABEL_296:
            _OWORD *v170 = *(_OWORD *)v5;
            uint64_t v218 = *(void *)(a2 + 24);
            if (v169 > 0x10)
            {
              unint64_t v219 = (_OWORD *)(v218 + 16);
              unint64_t v220 = v218 + v169;
              uint64_t v221 = (long long *)(v5 + 16);
              do
              {
                long long v222 = *v221++;
                *v219++ = v222;
              }
              while ((unint64_t)v219 < v220);
              goto LABEL_354;
            }
            *(void *)(a2 + 24) = v218 + v169;
            uint64_t v188 = *(void *)(a2 + 8);
LABEL_356:
            uint64_t v191 = v147 - v553 - v165;
            __int16 v190 = v160 - 3;
            *(_WORD *)(v188 + 4) = v169;
            *(_DWORD *)uint64_t v188 = v191 + 3;
            uint64_t v11 = v12;
            if (!((v160 - 3) >> 16))
            {
LABEL_257:
              *(_WORD *)(v188 + 6) = v190;
              uint64_t v193 = v188 + 8;
              *(void *)(a2 + 8) = v188 + 8;
              unint64_t v5 = (unint64_t)&v150[v160];
              if ((unint64_t)&v150[v160] <= v581)
              {
                *(_DWORD *)(v577 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v136 + 2 + v147)) >> v573)) = v147 + 2;
                *(_DWORD *)(v577 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v5 - 2)) >> v573)) = v5 - 2 - v136;
                uint64_t v194 = v11;
                while (1)
                {
                  uint64_t v11 = v191;
                  uint64_t v191 = v194;
                  uint64_t v195 = (v5 - v136 - v194);
                  uint64_t v196 = v557;
                  if (v195 >= v137) {
                    uint64_t v196 = v136;
                  }
                  if ((v569 - v195) < 3) {
                    break;
                  }
                  uint64_t v197 = v196 + v195;
                  if (*(_DWORD *)v197 != *(_DWORD *)v5) {
                    break;
                  }
                  if (v195 >= v137) {
                    v139 = (char *)v10;
                  }
                  unint64_t v198 = ZSTD_count_2segments((void *)(v5 + 4), (char *)(v197 + 4), v10, v139, v585);
                  unint64_t v143 = v561;
                  if (v5 <= v561)
                  {
                    *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
                    uint64_t v193 = *(void *)(a2 + 8);
                  }
                  *(_WORD *)(v193 + 4) = 0;
                  *(_DWORD *)uint64_t v193 = 1;
                  if (v198 + 1 >= 0x10000)
                  {
                    unint64_t v199 = (unint64_t)(v193 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v199;
                  }
                  *(_WORD *)(v193 + 6) = v198 + 1;
                  v193 += 8;
                  *(_DWORD *)(v577 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v5) >> v573)) = v5 - v136;
                  v5 += v198 + 4;
                  *(void *)(a2 + 8) = v193;
                  uint64_t v194 = v11;
                  uint64_t v12 = v191;
                  unint64_t v141 = v5;
                  unint64_t v10 = v589;
                  v139 = v565;
                  if (v5 > v581) {
                    goto LABEL_190;
                  }
                }
                uint64_t v12 = v11;
                uint64_t v11 = v191;
                unint64_t v141 = v5;
              }
              else
              {
                uint64_t v12 = v191;
                unint64_t v141 = (unint64_t)&v150[v160];
              }
              goto LABEL_190;
            }
LABEL_256:
            unint64_t v192 = (unint64_t)(v188 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v192;
            goto LABEL_257;
          }
          uint64_t v150 = (unsigned __int8 *)v141;
          unint64_t v10 = v589;
          unint64_t v143 = v561;
          v139 = v565;
          unsigned int v147 = v141 - v136;
          unint64_t v169 = v141 - v5;
          v170 = *(_OWORD **)(a2 + 24);
          if (v141 <= v561) {
            goto LABEL_296;
          }
LABEL_286:
          if (v5 <= v143)
          {
            unsigned int v212 = (char *)v170 + v143 - v5;
            v223 = (long long *)v5;
            v224 = v170;
            do
            {
              long long v225 = *v223++;
              *v224++ = v225;
            }
            while (v224 < (_OWORD *)v212);
            unint64_t v211 = v143;
            if (v143 < v141) {
              goto LABEL_305;
            }
          }
          else
          {
            unint64_t v211 = v5;
            unsigned int v212 = v170;
            if (v5 >= v141) {
              goto LABEL_354;
            }
LABEL_305:
            if (v5 <= v143) {
              unint64_t v226 = v143;
            }
            else {
              unint64_t v226 = v5;
            }
            unint64_t v227 = v141 - v226;
            if (v141 - v226 < 8)
            {
              uint64_t v228 = (char *)v211;
              goto LABEL_353;
            }
            if ((unint64_t)v170 - v5 < 0x20)
            {
              uint64_t v228 = (char *)v211;
              goto LABEL_353;
            }
            if (v227 >= 0x20)
            {
              unint64_t v247 = v227 & 0xFFFFFFFFFFFFFFE0;
              v248 = (long long *)(v211 + 16);
              uint64_t v249 = (_OWORD *)((char *)v170 + v226 - v5 + 16);
              unint64_t v250 = v227 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v251 = *v248;
                *(v249 - 1) = *(v248 - 1);
                *uint64_t v249 = v251;
                v248 += 2;
                v249 += 2;
                v250 -= 32;
              }
              while (v250);
              if (v227 != v247)
              {
                if ((v227 & 0x18) == 0)
                {
                  uint64_t v228 = (char *)(v211 + v247);
                  v212 += v247;
                  goto LABEL_353;
                }
                goto LABEL_341;
              }
            }
            else
            {
              unint64_t v247 = 0;
LABEL_341:
              v212 += v227 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v228 = (char *)(v211 + (v227 & 0xFFFFFFFFFFFFFFF8));
              uint64_t v252 = (uint64_t *)(v211 + v247);
              unint64_t v253 = (void *)((char *)v170 + v247 + v226 - v5);
              unint64_t v254 = v247 - (v227 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v255 = *v252++;
                *v253++ = v255;
                v254 += 8;
              }
              while (v254);
              if (v227 != (v227 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_353:
                  char v258 = *v228++;
                  *v212++ = v258;
                }
                while ((unint64_t)v228 < v141);
              }
            }
          }
LABEL_354:
          *(void *)(a2 + 24) += v169;
          uint64_t v188 = *(void *)(a2 + 8);
          if (v169 >= 0x10000)
          {
            unint64_t v259 = (unint64_t)(v188 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v259;
          }
          goto LABEL_356;
        }
      }
      else
      {
        uint64_t v156 = v136 + v146;
        if (*(_DWORD *)(v136 + v146) == *(_DWORD *)v141)
        {
          unsigned int v157 = (void *)(v141 + 4);
          int v158 = (_DWORD *)(v156 + 4);
          if (v528 <= v141 + 4)
          {
            v176 = (_DWORD *)(v141 + 4);
            if ((unint64_t)v157 < v524)
            {
LABEL_224:
              if (*v158 == *v176)
              {
                ++v176;
                ++v158;
              }
            }
          }
          else
          {
            unint64_t v159 = *v157 ^ *(void *)v158;
            if (v159)
            {
              unint64_t v160 = (__clz(__rbit64(v159)) >> 3) + 4;
              if (v141 <= v5) {
                goto LABEL_206;
              }
LABEL_235:
              v177 = (unsigned __int8 *)(v141 - 1);
              uint64_t v178 = (unsigned __int8 *)(v136 - 1 + v146);
              while (*v177 == *v178)
              {
                ++v160;
                v179 = v177 - 1;
                if (v178 > v585)
                {
                  --v178;
                  BOOL v44 = (unint64_t)v177-- > v5;
                  if (v44) {
                    continue;
                  }
                }
                uint64_t v150 = v179 + 1;
                unint64_t v161 = (unint64_t)&v179[-v5 + 1];
                uint64_t v162 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v150 <= v143) {
                  goto LABEL_273;
                }
                goto LABEL_207;
              }
              uint64_t v150 = v177 + 1;
              unint64_t v161 = (unint64_t)&v177[-v5 + 1];
              uint64_t v162 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)(v177 + 1) > v143) {
                goto LABEL_207;
              }
              goto LABEL_273;
            }
            uint64_t v213 = 0;
            unint64_t v214 = v141 + 12;
            while (1)
            {
              int v215 = (void *)(v214 + v213);
              if (v214 + v213 >= v528) {
                break;
              }
              uint64_t v216 = *(void *)(v516 + v146 + v213);
              v213 += 8;
              unint64_t v217 = *v215 ^ v216;
              if (v217)
              {
                unint64_t v160 = v213 + (__clz(__rbit64(v217)) >> 3) + 4;
                if (v141 > v5) {
                  goto LABEL_235;
                }
                goto LABEL_206;
              }
            }
            v176 = (_DWORD *)(v141 + v213 + 12);
            int v158 = (_DWORD *)(v516 + v146 + v213);
            if ((unint64_t)v176 < v524) {
              goto LABEL_224;
            }
          }
          if ((unint64_t)v176 >= v520)
          {
            if ((unint64_t)v176 >= v10) {
              goto LABEL_234;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v158 == *(unsigned __int16 *)v176)
            {
              v176 = (_DWORD *)((char *)v176 + 2);
              int v158 = (_DWORD *)((char *)v158 + 2);
            }
            if ((unint64_t)v176 >= v10)
            {
LABEL_234:
              unint64_t v160 = (unint64_t)v176 - v141;
              if (v141 > v5) {
                goto LABEL_235;
              }
LABEL_206:
              uint64_t v150 = (unsigned __int8 *)v141;
              unint64_t v161 = v141 - v5;
              uint64_t v162 = *(_OWORD **)(a2 + 24);
              if (v141 <= v143)
              {
LABEL_273:
                *uint64_t v162 = *(_OWORD *)v5;
                uint64_t v200 = *(void *)(a2 + 24);
                if (v161 > 0x10)
                {
                  uint64_t v201 = (_OWORD *)(v200 + 16);
                  unint64_t v202 = v200 + v161;
                  v203 = (long long *)(v5 + 16);
                  do
                  {
                    long long v204 = *v203++;
                    *v201++ = v204;
                  }
                  while ((unint64_t)v201 < v202);
                  goto LABEL_348;
                }
                *(void *)(a2 + 24) = v200 + v161;
                uint64_t v188 = *(void *)(a2 + 8);
LABEL_350:
                uint64_t v191 = (v141 - v156);
                __int16 v190 = v160 - 3;
                *(_WORD *)(v188 + 4) = v161;
                *(_DWORD *)uint64_t v188 = v191 + 3;
                uint64_t v11 = v12;
                if (v160 - 3 < 0x10000) {
                  goto LABEL_257;
                }
                goto LABEL_256;
              }
LABEL_207:
              if (v5 <= v143)
              {
                unint64_t v164 = (char *)v162 + v143 - v5;
                v205 = (long long *)v5;
                v206 = v162;
                do
                {
                  long long v207 = *v205++;
                  *v206++ = v207;
                }
                while (v206 < (_OWORD *)v164);
                unint64_t v163 = v143;
                if (v143 >= (unint64_t)v150) {
                  goto LABEL_348;
                }
              }
              else
              {
                unint64_t v163 = v5;
                unint64_t v164 = v162;
                if (v5 >= (unint64_t)v150)
                {
LABEL_348:
                  *(void *)(a2 + 24) += v161;
                  uint64_t v188 = *(void *)(a2 + 8);
                  if (v161 >= 0x10000)
                  {
                    unint64_t v257 = (unint64_t)(v188 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v257;
                  }
                  goto LABEL_350;
                }
              }
              if (v5 <= v143) {
                unint64_t v208 = v143;
              }
              else {
                unint64_t v208 = v5;
              }
              unint64_t v209 = (unint64_t)&v150[-v208];
              if ((unint64_t)&v150[-v208] < 8)
              {
                uint64_t v210 = (unsigned __int8 *)v163;
                goto LABEL_347;
              }
              if ((unint64_t)v162 - v5 < 0x20)
              {
                uint64_t v210 = (unsigned __int8 *)v163;
                goto LABEL_347;
              }
              if (v209 >= 0x20)
              {
                unint64_t v230 = v209 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v239 = (long long *)(v163 + 16);
                unint64_t v240 = (_OWORD *)((char *)v162 + v208 - v5 + 16);
                unint64_t v241 = v209 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v242 = *v239;
                  *(v240 - 1) = *(v239 - 1);
                  *unint64_t v240 = v242;
                  v239 += 2;
                  v240 += 2;
                  v241 -= 32;
                }
                while (v241);
                if (v209 == v230) {
                  goto LABEL_348;
                }
                if ((v209 & 0x18) == 0)
                {
                  uint64_t v210 = (unsigned __int8 *)(v163 + v230);
                  v164 += v230;
                  do
                  {
LABEL_347:
                    char v256 = *v210++;
                    *v164++ = v256;
                  }
                  while (v210 < v150);
                  goto LABEL_348;
                }
              }
              else
              {
                unint64_t v230 = 0;
              }
              v164 += v209 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v210 = (unsigned __int8 *)(v163 + (v209 & 0xFFFFFFFFFFFFFFF8));
              int v243 = (uint64_t *)(v163 + v230);
              v244 = (void *)((char *)v162 + v230 + v208 - v5);
              unint64_t v245 = v230 - (v209 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v246 = *v243++;
                *v244++ = v246;
                v245 += 8;
              }
              while (v245);
              if (v209 == (v209 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_348;
              }
              goto LABEL_347;
            }
          }
          if (*(unsigned __int8 *)v158 == *(unsigned __int8 *)v176) {
            v176 = (_DWORD *)((char *)v176 + 1);
          }
          goto LABEL_234;
        }
      }
      v141 += v545 + ((uint64_t)(v141 - v5) >> 8);
LABEL_190:
      uint64_t v140 = v549;
      if (v141 >= v581)
      {
LABEL_712:
        a3 = v531;
        goto LABEL_713;
      }
    }
    if (v148 >= v137) {
      v139 = (char *)v10;
    }
    unint64_t v151 = ZSTD_count_2segments((void *)(v141 + 5), (char *)(v149 + 4), v10, v139, v585);
    unint64_t v143 = v561;
    unint64_t v152 = (unint64_t)&v150[-v5];
    unsigned int v153 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v150 <= v561)
    {
      *unsigned int v153 = *(_OWORD *)v5;
      uint64_t v171 = *(void *)(a2 + 24);
      if (v152 <= 0x10)
      {
        *(void *)(a2 + 24) = v171 + v152;
        uint64_t v188 = *(void *)(a2 + 8);
        unint64_t v10 = v589;
        v139 = v565;
        unsigned int v147 = v141 - v136;
        goto LABEL_255;
      }
      uint64_t v172 = (_OWORD *)(v171 + 16);
      unint64_t v173 = v171 + v152;
      unsigned int v174 = (long long *)(v5 + 16);
      unint64_t v10 = v589;
      v139 = v565;
      unsigned int v147 = v141 - v136;
      do
      {
        long long v175 = *v174++;
        *v172++ = v175;
      }
      while ((unint64_t)v172 < v173);
    }
    else
    {
      if (v5 <= v561)
      {
        unsigned int v155 = (char *)v153 + v561 - v5;
        unint64_t v180 = (long long *)v5;
        v181 = *(_OWORD **)(a2 + 24);
        unint64_t v10 = v589;
        v139 = v565;
        unsigned int v147 = v141 - v136;
        do
        {
          long long v182 = *v180++;
          *v181++ = v182;
        }
        while (v181 < (_OWORD *)v155);
        unint64_t v154 = v561;
        if (v561 >= (unint64_t)v150) {
          goto LABEL_252;
        }
      }
      else
      {
        unint64_t v154 = v5;
        unsigned int v155 = *(unsigned char **)(a2 + 24);
        unint64_t v10 = v589;
        v139 = v565;
        unsigned int v147 = v141 - v136;
        if (v5 >= (unint64_t)v150) {
          goto LABEL_252;
        }
      }
      if (v5 <= v561) {
        unint64_t v183 = v561;
      }
      else {
        unint64_t v183 = v5;
      }
      unint64_t v184 = v141 - v183 + 1;
      if (v184 < 8 || (unint64_t)v153 - v5 < 0x20)
      {
        uint64_t v185 = (char *)v154;
        goto LABEL_250;
      }
      if (v184 >= 0x20)
      {
        unint64_t v229 = v184 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v231 = (long long *)(v154 + 16);
        unint64_t v232 = (_OWORD *)((char *)v153 + v183 - v5 + 16);
        unint64_t v233 = v184 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v234 = *v231;
          *(v232 - 1) = *(v231 - 1);
          *unint64_t v232 = v234;
          v231 += 2;
          v232 += 2;
          v233 -= 32;
        }
        while (v233);
        if (v184 == v229) {
          goto LABEL_252;
        }
        if ((v184 & 0x18) == 0)
        {
          uint64_t v185 = (char *)(v154 + v229);
          v155 += v229;
LABEL_250:
          int v186 = (char *)(v184 + v154);
          do
          {
            char v187 = *v185++;
            *v155++ = v187;
          }
          while (v185 != v186);
          goto LABEL_252;
        }
      }
      else
      {
        unint64_t v229 = 0;
      }
      v155 += v184 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v185 = (char *)(v154 + (v184 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v235 = (uint64_t *)(v154 + v229);
      int v236 = (void *)((char *)v153 + v229 + v183 - v5);
      unint64_t v237 = v229 - (v184 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v238 = *v235++;
        *v236++ = v238;
        v237 += 8;
      }
      while (v237);
      if (v184 != (v184 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_250;
      }
    }
LABEL_252:
    *(void *)(a2 + 24) += v152;
    uint64_t v188 = *(void *)(a2 + 8);
    if (v152 >= 0x10000)
    {
      unint64_t v189 = (unint64_t)(v188 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v189;
    }
LABEL_255:
    unint64_t v160 = v151 + 4;
    __int16 v190 = v151 + 1;
    *(_WORD *)(v188 + 4) = v152;
    *(_DWORD *)uint64_t v188 = 1;
    uint64_t v191 = v12;
    if (!((v151 + 1) >> 16)) {
      goto LABEL_257;
    }
    goto LABEL_256;
  }
  if (v7 == 6)
  {
    uint64_t v260 = *(void *)(a1 + 8);
    uint64_t v261 = *(unsigned int *)(a1 + 24);
    unint64_t v10 = a4 + a5;
    uint64_t v12 = *a3;
    uint64_t v11 = a3[1];
    uint64_t v262 = *(void *)(a1 + 184);
    uint64_t v263 = *(char **)v262;
    uint64_t v264 = *(void *)(v262 + 8);
    uint64_t v542 = *(unsigned int *)(v262 + 24);
    unint64_t v582 = v10 - 8;
    unsigned int v586 = (unsigned __int8 *)(v260 + v261);
    if (*(void *)v262 + v5 - (v260 + v261) == v264 + v542) {
      unint64_t v265 = v5 + 1;
    }
    else {
      unint64_t v265 = v5;
    }
    if (v265 >= v10 - 8) {
      goto LABEL_713;
    }
    unint64_t v513 = v264 + v542;
    int v531 = a3;
    uint64_t v578 = *(void *)(a1 + 48);
    LODWORD(v266) = *(_DWORD *)(a1 + 212);
    if (v266) {
      uint64_t v266 = v266;
    }
    else {
      uint64_t v266 = 1;
    }
    uint64_t v546 = v266;
    int v574 = 64 - *(_DWORD *)(a1 + 200);
    int v570 = v261 - 1;
    uint64_t v534 = *(void *)(v262 + 48);
    char v538 = 64 - *(_DWORD *)(v262 + 200);
    unint64_t v267 = v10 - 32;
    unint64_t v525 = v10 - 3;
    unint64_t v529 = v10 - 7;
    unsigned int v554 = v261 + v264 - v263;
    uint64_t v558 = v264 - v554;
    uint64_t v509 = v264 - 1;
    uint64_t v517 = v260 + 12;
    unint64_t v521 = v10 - 1;
    unint64_t v590 = v10;
    uint64_t v550 = *(void *)(v262 + 8);
    unint64_t v562 = v10 - 32;
    v566 = *(char **)v262;
    while (1)
    {
      unint64_t v268 = 0xCF1BBCDCBF9B0000 * *(void *)v265;
      uint64_t v269 = 4 * (v268 >> v574);
      uint64_t v270 = *(unsigned int *)(v578 + v269);
      unsigned int v271 = v265 - v260;
      uint64_t v272 = (v265 - v260 - v12 + 1);
      uint64_t v273 = v264 + v272 - v554;
      if (v272 >= v261) {
        uint64_t v273 = v260 + v272;
      }
      *(_DWORD *)(v578 + v269) = v271;
      if ((v570 - v272) >= 3)
      {
        v274 = (unsigned __int8 *)(v265 + 1);
        if (*(_DWORD *)v273 == *(_DWORD *)(v265 + 1)) {
          break;
        }
      }
      if (v270 <= v261)
      {
        uint64_t v289 = *(unsigned int *)(v534 + 4 * (v268 >> v538));
        if (v289 > v542 && *(_DWORD *)(v264 + v289) == *(_DWORD *)v265)
        {
          unint64_t v284 = ZSTD_count_2segments((void *)(v265 + 4), (char *)(v264 + v289 + 4), v10, v263, v586) + 4;
          if (v265 > v5)
          {
            int v290 = (unsigned __int8 *)(v509 + v289);
            int v291 = (unsigned __int8 *)(v265 - 1);
            unint64_t v10 = v590;
            uint64_t v263 = v566;
            unsigned int v271 = v265 - v260;
            while (*v291 == *v290)
            {
              ++v284;
              v292 = v291 - 1;
              if ((unint64_t)v291 > v5)
              {
                --v291;
                BOOL v44 = (unint64_t)v290-- > v513;
                if (v44) {
                  continue;
                }
              }
              unint64_t v265 = (unint64_t)(v292 + 1);
              unint64_t v267 = v562;
              v274 = (unsigned __int8 *)v265;
              unint64_t v293 = (unint64_t)&v292[-v5 + 1];
              unsigned int v294 = *(_OWORD **)(a2 + 24);
              if (v265 <= v562) {
                goto LABEL_473;
              }
              goto LABEL_463;
            }
            unint64_t v265 = (unint64_t)(v291 + 1);
            unint64_t v267 = v562;
            v274 = v291 + 1;
            unint64_t v293 = (unint64_t)&v291[-v5 + 1];
            unsigned int v294 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v291 + 1) > v562) {
              goto LABEL_463;
            }
LABEL_473:
            *unsigned int v294 = *(_OWORD *)v5;
            uint64_t v342 = *(void *)(a2 + 24);
            if (v293 > 0x10)
            {
              unsigned int v343 = (_OWORD *)(v342 + 16);
              unint64_t v344 = v342 + v293;
              int v345 = (long long *)(v5 + 16);
              do
              {
                long long v346 = *v345++;
                *v343++ = v346;
              }
              while ((unint64_t)v343 < v344);
              goto LABEL_531;
            }
            *(void *)(a2 + 24) = v342 + v293;
            uint64_t v312 = *(void *)(a2 + 8);
LABEL_533:
            uint64_t v315 = v271 - v554 - v289;
            __int16 v314 = v284 - 3;
            *(_WORD *)(v312 + 4) = v293;
            *(_DWORD *)uint64_t v312 = v315 + 3;
            uint64_t v11 = v12;
            if (!((v284 - 3) >> 16))
            {
LABEL_434:
              *(_WORD *)(v312 + 6) = v314;
              uint64_t v317 = v312 + 8;
              *(void *)(a2 + 8) = v312 + 8;
              unint64_t v5 = (unint64_t)&v274[v284];
              if ((unint64_t)&v274[v284] <= v582)
              {
                *(_DWORD *)(v578 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v260 + 2 + v271)) >> v574)) = v271 + 2;
                *(_DWORD *)(v578 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v5 - 2)) >> v574)) = v5 - 2 - v260;
                uint64_t v318 = v11;
                while (1)
                {
                  uint64_t v11 = v315;
                  uint64_t v315 = v318;
                  uint64_t v319 = (v5 - v260 - v318);
                  uint64_t v320 = v558;
                  if (v319 >= v261) {
                    uint64_t v320 = v260;
                  }
                  if ((v570 - v319) < 3) {
                    break;
                  }
                  uint64_t v321 = v320 + v319;
                  if (*(_DWORD *)v321 != *(_DWORD *)v5) {
                    break;
                  }
                  if (v319 >= v261) {
                    uint64_t v263 = (char *)v10;
                  }
                  unint64_t v322 = ZSTD_count_2segments((void *)(v5 + 4), (char *)(v321 + 4), v10, v263, v586);
                  unint64_t v267 = v562;
                  if (v5 <= v562)
                  {
                    *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
                    uint64_t v317 = *(void *)(a2 + 8);
                  }
                  *(_WORD *)(v317 + 4) = 0;
                  *(_DWORD *)uint64_t v317 = 1;
                  if (v322 + 1 >= 0x10000)
                  {
                    unint64_t v323 = (unint64_t)(v317 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v323;
                  }
                  *(_WORD *)(v317 + 6) = v322 + 1;
                  v317 += 8;
                  *(_DWORD *)(v578 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v5) >> v574)) = v5 - v260;
                  v5 += v322 + 4;
                  *(void *)(a2 + 8) = v317;
                  uint64_t v318 = v11;
                  uint64_t v12 = v315;
                  unint64_t v265 = v5;
                  unint64_t v10 = v590;
                  uint64_t v263 = v566;
                  if (v5 > v582) {
                    goto LABEL_367;
                  }
                }
                uint64_t v12 = v11;
                uint64_t v11 = v315;
                unint64_t v265 = v5;
              }
              else
              {
                uint64_t v12 = v315;
                unint64_t v265 = (unint64_t)&v274[v284];
              }
              goto LABEL_367;
            }
LABEL_433:
            unint64_t v316 = (unint64_t)(v312 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v316;
            goto LABEL_434;
          }
          v274 = (unsigned __int8 *)v265;
          unint64_t v10 = v590;
          unint64_t v267 = v562;
          uint64_t v263 = v566;
          unsigned int v271 = v265 - v260;
          unint64_t v293 = v265 - v5;
          unsigned int v294 = *(_OWORD **)(a2 + 24);
          if (v265 <= v562) {
            goto LABEL_473;
          }
LABEL_463:
          if (v5 <= v267)
          {
            unsigned int v336 = (char *)v294 + v267 - v5;
            uint64_t v347 = (long long *)v5;
            unsigned int v348 = v294;
            do
            {
              long long v349 = *v347++;
              *v348++ = v349;
            }
            while (v348 < (_OWORD *)v336);
            unint64_t v335 = v267;
            if (v267 < v265) {
              goto LABEL_482;
            }
          }
          else
          {
            unint64_t v335 = v5;
            unsigned int v336 = v294;
            if (v5 >= v265) {
              goto LABEL_531;
            }
LABEL_482:
            if (v5 <= v267) {
              unint64_t v350 = v267;
            }
            else {
              unint64_t v350 = v5;
            }
            unint64_t v351 = v265 - v350;
            if (v265 - v350 < 8)
            {
              v352 = (char *)v335;
              goto LABEL_530;
            }
            if ((unint64_t)v294 - v5 < 0x20)
            {
              v352 = (char *)v335;
              goto LABEL_530;
            }
            if (v351 >= 0x20)
            {
              unint64_t v371 = v351 & 0xFFFFFFFFFFFFFFE0;
              v372 = (long long *)(v335 + 16);
              unsigned int v373 = (_OWORD *)((char *)v294 + v350 - v5 + 16);
              unint64_t v374 = v351 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v375 = *v372;
                *(v373 - 1) = *(v372 - 1);
                *unsigned int v373 = v375;
                v372 += 2;
                v373 += 2;
                v374 -= 32;
              }
              while (v374);
              if (v351 != v371)
              {
                if ((v351 & 0x18) == 0)
                {
                  v352 = (char *)(v335 + v371);
                  v336 += v371;
                  goto LABEL_530;
                }
                goto LABEL_518;
              }
            }
            else
            {
              unint64_t v371 = 0;
LABEL_518:
              v336 += v351 & 0xFFFFFFFFFFFFFFF8;
              v352 = (char *)(v335 + (v351 & 0xFFFFFFFFFFFFFFF8));
              uint64_t v376 = (uint64_t *)(v335 + v371);
              uint64_t v377 = (void *)((char *)v294 + v371 + v350 - v5);
              unint64_t v378 = v371 - (v351 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v379 = *v376++;
                *v377++ = v379;
                v378 += 8;
              }
              while (v378);
              if (v351 != (v351 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_530:
                  char v382 = *v352++;
                  *v336++ = v382;
                }
                while ((unint64_t)v352 < v265);
              }
            }
          }
LABEL_531:
          *(void *)(a2 + 24) += v293;
          uint64_t v312 = *(void *)(a2 + 8);
          if (v293 >= 0x10000)
          {
            unint64_t v383 = (unint64_t)(v312 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v383;
          }
          goto LABEL_533;
        }
      }
      else
      {
        uint64_t v280 = v260 + v270;
        if (*(_DWORD *)(v260 + v270) == *(_DWORD *)v265)
        {
          uint64_t v281 = (void *)(v265 + 4);
          int v282 = (_DWORD *)(v280 + 4);
          if (v529 <= v265 + 4)
          {
            uint64_t v300 = (_DWORD *)(v265 + 4);
            if ((unint64_t)v281 < v525)
            {
LABEL_401:
              if (*v282 == *v300)
              {
                ++v300;
                ++v282;
              }
            }
          }
          else
          {
            unint64_t v283 = *v281 ^ *(void *)v282;
            if (v283)
            {
              unint64_t v284 = (__clz(__rbit64(v283)) >> 3) + 4;
              if (v265 <= v5) {
                goto LABEL_383;
              }
LABEL_412:
              v301 = (unsigned __int8 *)(v265 - 1);
              uint64_t v302 = (unsigned __int8 *)(v260 - 1 + v270);
              while (*v301 == *v302)
              {
                ++v284;
                unsigned int v303 = v301 - 1;
                if (v302 > v586)
                {
                  --v302;
                  BOOL v44 = (unint64_t)v301-- > v5;
                  if (v44) {
                    continue;
                  }
                }
                v274 = v303 + 1;
                unint64_t v285 = (unint64_t)&v303[-v5 + 1];
                unsigned int v286 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v274 <= v267) {
                  goto LABEL_450;
                }
                goto LABEL_384;
              }
              v274 = v301 + 1;
              unint64_t v285 = (unint64_t)&v301[-v5 + 1];
              unsigned int v286 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)(v301 + 1) > v267) {
                goto LABEL_384;
              }
              goto LABEL_450;
            }
            uint64_t v337 = 0;
            unint64_t v338 = v265 + 12;
            while (1)
            {
              int v339 = (void *)(v338 + v337);
              if (v338 + v337 >= v529) {
                break;
              }
              uint64_t v340 = *(void *)(v517 + v270 + v337);
              v337 += 8;
              unint64_t v341 = *v339 ^ v340;
              if (v341)
              {
                unint64_t v284 = v337 + (__clz(__rbit64(v341)) >> 3) + 4;
                if (v265 > v5) {
                  goto LABEL_412;
                }
                goto LABEL_383;
              }
            }
            uint64_t v300 = (_DWORD *)(v265 + v337 + 12);
            int v282 = (_DWORD *)(v517 + v270 + v337);
            if ((unint64_t)v300 < v525) {
              goto LABEL_401;
            }
          }
          if ((unint64_t)v300 >= v521)
          {
            if ((unint64_t)v300 >= v10) {
              goto LABEL_411;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v282 == *(unsigned __int16 *)v300)
            {
              uint64_t v300 = (_DWORD *)((char *)v300 + 2);
              int v282 = (_DWORD *)((char *)v282 + 2);
            }
            if ((unint64_t)v300 >= v10)
            {
LABEL_411:
              unint64_t v284 = (unint64_t)v300 - v265;
              if (v265 > v5) {
                goto LABEL_412;
              }
LABEL_383:
              v274 = (unsigned __int8 *)v265;
              unint64_t v285 = v265 - v5;
              unsigned int v286 = *(_OWORD **)(a2 + 24);
              if (v265 <= v267)
              {
LABEL_450:
                *unsigned int v286 = *(_OWORD *)v5;
                uint64_t v324 = *(void *)(a2 + 24);
                if (v285 > 0x10)
                {
                  int v325 = (_OWORD *)(v324 + 16);
                  unint64_t v326 = v324 + v285;
                  unsigned int v327 = (long long *)(v5 + 16);
                  do
                  {
                    long long v328 = *v327++;
                    *v325++ = v328;
                  }
                  while ((unint64_t)v325 < v326);
                  goto LABEL_525;
                }
                *(void *)(a2 + 24) = v324 + v285;
                uint64_t v312 = *(void *)(a2 + 8);
LABEL_527:
                uint64_t v315 = (v265 - v280);
                __int16 v314 = v284 - 3;
                *(_WORD *)(v312 + 4) = v285;
                *(_DWORD *)uint64_t v312 = v315 + 3;
                uint64_t v11 = v12;
                if (v284 - 3 < 0x10000) {
                  goto LABEL_434;
                }
                goto LABEL_433;
              }
LABEL_384:
              if (v5 <= v267)
              {
                unsigned int v288 = (char *)v286 + v267 - v5;
                unsigned int v329 = (long long *)v5;
                uint64_t v330 = v286;
                do
                {
                  long long v331 = *v329++;
                  *v330++ = v331;
                }
                while (v330 < (_OWORD *)v288);
                unint64_t v287 = v267;
                if (v267 >= (unint64_t)v274) {
                  goto LABEL_525;
                }
              }
              else
              {
                unint64_t v287 = v5;
                unsigned int v288 = v286;
                if (v5 >= (unint64_t)v274)
                {
LABEL_525:
                  *(void *)(a2 + 24) += v285;
                  uint64_t v312 = *(void *)(a2 + 8);
                  if (v285 >= 0x10000)
                  {
                    unint64_t v381 = (unint64_t)(v312 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v381;
                  }
                  goto LABEL_527;
                }
              }
              if (v5 <= v267) {
                unint64_t v332 = v267;
              }
              else {
                unint64_t v332 = v5;
              }
              unint64_t v333 = (unint64_t)&v274[-v332];
              if ((unint64_t)&v274[-v332] < 8)
              {
                unsigned int v334 = (unsigned __int8 *)v287;
                goto LABEL_524;
              }
              if ((unint64_t)v286 - v5 < 0x20)
              {
                unsigned int v334 = (unsigned __int8 *)v287;
                goto LABEL_524;
              }
              if (v333 >= 0x20)
              {
                unint64_t v354 = v333 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v363 = (long long *)(v287 + 16);
                v364 = (_OWORD *)((char *)v286 + v332 - v5 + 16);
                unint64_t v365 = v333 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v366 = *v363;
                  *(v364 - 1) = *(v363 - 1);
                  _OWORD *v364 = v366;
                  v363 += 2;
                  v364 += 2;
                  v365 -= 32;
                }
                while (v365);
                if (v333 == v354) {
                  goto LABEL_525;
                }
                if ((v333 & 0x18) == 0)
                {
                  unsigned int v334 = (unsigned __int8 *)(v287 + v354);
                  v288 += v354;
                  do
                  {
LABEL_524:
                    char v380 = *v334++;
                    *v288++ = v380;
                  }
                  while (v334 < v274);
                  goto LABEL_525;
                }
              }
              else
              {
                unint64_t v354 = 0;
              }
              v288 += v333 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v334 = (unsigned __int8 *)(v287 + (v333 & 0xFFFFFFFFFFFFFFF8));
              unsigned int v367 = (uint64_t *)(v287 + v354);
              unint64_t v368 = (void *)((char *)v286 + v354 + v332 - v5);
              unint64_t v369 = v354 - (v333 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v370 = *v367++;
                *v368++ = v370;
                v369 += 8;
              }
              while (v369);
              if (v333 == (v333 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_525;
              }
              goto LABEL_524;
            }
          }
          if (*(unsigned __int8 *)v282 == *(unsigned __int8 *)v300) {
            uint64_t v300 = (_DWORD *)((char *)v300 + 1);
          }
          goto LABEL_411;
        }
      }
      v265 += v546 + ((uint64_t)(v265 - v5) >> 8);
LABEL_367:
      uint64_t v264 = v550;
      if (v265 >= v582) {
        goto LABEL_712;
      }
    }
    if (v272 >= v261) {
      uint64_t v263 = (char *)v10;
    }
    unint64_t v275 = ZSTD_count_2segments((void *)(v265 + 5), (char *)(v273 + 4), v10, v263, v586);
    unint64_t v267 = v562;
    unint64_t v276 = (unint64_t)&v274[-v5];
    uint64_t v277 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v274 <= v562)
    {
      *uint64_t v277 = *(_OWORD *)v5;
      uint64_t v295 = *(void *)(a2 + 24);
      if (v276 <= 0x10)
      {
        *(void *)(a2 + 24) = v295 + v276;
        uint64_t v312 = *(void *)(a2 + 8);
        unint64_t v10 = v590;
        uint64_t v263 = v566;
        unsigned int v271 = v265 - v260;
        goto LABEL_432;
      }
      unsigned int v296 = (_OWORD *)(v295 + 16);
      unint64_t v297 = v295 + v276;
      v298 = (long long *)(v5 + 16);
      unint64_t v10 = v590;
      uint64_t v263 = v566;
      unsigned int v271 = v265 - v260;
      do
      {
        long long v299 = *v298++;
        *v296++ = v299;
      }
      while ((unint64_t)v296 < v297);
    }
    else
    {
      if (v5 <= v562)
      {
        unint64_t v279 = (char *)v277 + v562 - v5;
        unsigned int v304 = (long long *)v5;
        v305 = *(_OWORD **)(a2 + 24);
        unint64_t v10 = v590;
        uint64_t v263 = v566;
        unsigned int v271 = v265 - v260;
        do
        {
          long long v306 = *v304++;
          *v305++ = v306;
        }
        while (v305 < (_OWORD *)v279);
        unint64_t v278 = v562;
        if (v562 >= (unint64_t)v274) {
          goto LABEL_429;
        }
      }
      else
      {
        unint64_t v278 = v5;
        unint64_t v279 = *(unsigned char **)(a2 + 24);
        unint64_t v10 = v590;
        uint64_t v263 = v566;
        unsigned int v271 = v265 - v260;
        if (v5 >= (unint64_t)v274) {
          goto LABEL_429;
        }
      }
      if (v5 <= v562) {
        unint64_t v307 = v562;
      }
      else {
        unint64_t v307 = v5;
      }
      unint64_t v308 = v265 - v307 + 1;
      if (v308 < 8 || (unint64_t)v277 - v5 < 0x20)
      {
        unsigned int v309 = (char *)v278;
        goto LABEL_427;
      }
      if (v308 >= 0x20)
      {
        unint64_t v353 = v308 & 0xFFFFFFFFFFFFFFE0;
        signed int v355 = (long long *)(v278 + 16);
        v356 = (_OWORD *)((char *)v277 + v307 - v5 + 16);
        unint64_t v357 = v308 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v358 = *v355;
          *(v356 - 1) = *(v355 - 1);
          _OWORD *v356 = v358;
          v355 += 2;
          v356 += 2;
          v357 -= 32;
        }
        while (v357);
        if (v308 == v353) {
          goto LABEL_429;
        }
        if ((v308 & 0x18) == 0)
        {
          unsigned int v309 = (char *)(v278 + v353);
          v279 += v353;
LABEL_427:
          unsigned int v310 = (char *)(v308 + v278);
          do
          {
            char v311 = *v309++;
            *v279++ = v311;
          }
          while (v309 != v310);
          goto LABEL_429;
        }
      }
      else
      {
        unint64_t v353 = 0;
      }
      v279 += v308 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v309 = (char *)(v278 + (v308 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v359 = (uint64_t *)(v278 + v353);
      unsigned int v360 = (void *)((char *)v277 + v353 + v307 - v5);
      unint64_t v361 = v353 - (v308 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v362 = *v359++;
        *v360++ = v362;
        v361 += 8;
      }
      while (v361);
      if (v308 != (v308 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_427;
      }
    }
LABEL_429:
    *(void *)(a2 + 24) += v276;
    uint64_t v312 = *(void *)(a2 + 8);
    if (v276 >= 0x10000)
    {
      unint64_t v313 = (unint64_t)(v312 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v313;
    }
LABEL_432:
    unint64_t v284 = v275 + 4;
    __int16 v314 = v275 + 1;
    *(_WORD *)(v312 + 4) = v276;
    *(_DWORD *)uint64_t v312 = 1;
    uint64_t v315 = v12;
    if (!((v275 + 1) >> 16)) {
      goto LABEL_434;
    }
    goto LABEL_433;
  }
  if (v7 != 7)
  {
    uint64_t v384 = *(void *)(a1 + 8);
    uint64_t v385 = *(unsigned int *)(a1 + 24);
    unint64_t v10 = a4 + a5;
    uint64_t v12 = *a3;
    uint64_t v11 = a3[1];
    uint64_t v386 = *(void *)(a1 + 184);
    v387 = *(char **)v386;
    uint64_t v388 = *(void *)(v386 + 8);
    uint64_t v543 = *(unsigned int *)(v386 + 24);
    unint64_t v583 = v10 - 8;
    v587 = (unsigned __int8 *)(v384 + v385);
    if (*(void *)v386 + v5 - (v384 + v385) == v388 + v543) {
      unint64_t v389 = v5 + 1;
    }
    else {
      unint64_t v389 = v5;
    }
    if (v389 >= v10 - 8) {
      goto LABEL_713;
    }
    unint64_t v514 = v388 + v543;
    int v531 = a3;
    uint64_t v579 = *(void *)(a1 + 48);
    LODWORD(v390) = *(_DWORD *)(a1 + 212);
    if (v390) {
      uint64_t v390 = v390;
    }
    else {
      uint64_t v390 = 1;
    }
    uint64_t v547 = v390;
    int v575 = 32 - *(_DWORD *)(a1 + 200);
    int v571 = v385 - 1;
    char v539 = 32 - *(_DWORD *)(v386 + 200);
    uint64_t v535 = *(void *)(v386 + 48);
    unint64_t v391 = v10 - 32;
    unint64_t v526 = v10 - 3;
    unint64_t v530 = v10 - 7;
    unsigned int v555 = v385 + v388 - v387;
    uint64_t v559 = v388 - v555;
    uint64_t v510 = v388 - 1;
    uint64_t v518 = v384 + 12;
    unint64_t v522 = v10 - 1;
    unint64_t v591 = v10;
    uint64_t v551 = *(void *)(v386 + 8);
    unint64_t v563 = v10 - 32;
    v567 = *(char **)v386;
    while (1)
    {
      uint64_t v392 = *(unsigned int *)(v579 + 4 * ((-1640531535 * *(_DWORD *)v389) >> v575));
      unsigned int v393 = v389 - v384;
      uint64_t v394 = (v389 - v384 - v12 + 1);
      uint64_t v395 = v388 + v394 - v555;
      if (v394 >= v385) {
        uint64_t v395 = v384 + v394;
      }
      *(_DWORD *)(v579 + 4 * ((-1640531535 * *(_DWORD *)v389) >> v575)) = v393;
      if ((v571 - v394) >= 3)
      {
        unint64_t v396 = (unsigned __int8 *)(v389 + 1);
        if (*(_DWORD *)v395 == *(_DWORD *)(v389 + 1)) {
          break;
        }
      }
      if (v392 <= v385)
      {
        uint64_t v411 = *(unsigned int *)(v535 + 4 * ((-1640531535 * *(_DWORD *)v389) >> v539));
        if (v411 > v543 && *(_DWORD *)(v388 + v411) == *(_DWORD *)v389)
        {
          unint64_t v406 = ZSTD_count_2segments((void *)(v389 + 4), (char *)(v388 + v411 + 4), v10, v387, v587) + 4;
          if (v389 > v5)
          {
            v412 = (unsigned __int8 *)(v510 + v411);
            v413 = (unsigned __int8 *)(v389 - 1);
            unint64_t v10 = v591;
            v387 = v567;
            unsigned int v393 = v389 - v384;
            while (*v413 == *v412)
            {
              ++v406;
              v414 = v413 - 1;
              if ((unint64_t)v413 > v5)
              {
                --v413;
                BOOL v44 = (unint64_t)v412-- > v514;
                if (v44) {
                  continue;
                }
              }
              unint64_t v389 = (unint64_t)(v414 + 1);
              unint64_t v391 = v563;
              unint64_t v396 = (unsigned __int8 *)v389;
              unint64_t v415 = (unint64_t)&v414[-v5 + 1];
              unint64_t v416 = *(_OWORD **)(a2 + 24);
              if (v389 <= v563) {
                goto LABEL_650;
              }
              goto LABEL_640;
            }
            unint64_t v389 = (unint64_t)(v413 + 1);
            unint64_t v391 = v563;
            unint64_t v396 = v413 + 1;
            unint64_t v415 = (unint64_t)&v413[-v5 + 1];
            unint64_t v416 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v413 + 1) > v563) {
              goto LABEL_640;
            }
LABEL_650:
            *unint64_t v416 = *(_OWORD *)v5;
            uint64_t v464 = *(void *)(a2 + 24);
            if (v415 > 0x10)
            {
              int v465 = (_OWORD *)(v464 + 16);
              unint64_t v466 = v464 + v415;
              unint64_t v467 = (long long *)(v5 + 16);
              do
              {
                long long v468 = *v467++;
                *v465++ = v468;
              }
              while ((unint64_t)v465 < v466);
              goto LABEL_708;
            }
            *(void *)(a2 + 24) = v464 + v415;
            uint64_t v434 = *(void *)(a2 + 8);
LABEL_710:
            uint64_t v437 = v393 - v555 - v411;
            __int16 v436 = v406 - 3;
            *(_WORD *)(v434 + 4) = v415;
            *(_DWORD *)uint64_t v434 = v437 + 3;
            uint64_t v11 = v12;
            if (!((v406 - 3) >> 16))
            {
LABEL_611:
              *(_WORD *)(v434 + 6) = v436;
              uint64_t v439 = v434 + 8;
              *(void *)(a2 + 8) = v434 + 8;
              unint64_t v5 = (unint64_t)&v396[v406];
              if ((unint64_t)&v396[v406] <= v583)
              {
                *(_DWORD *)(v579 + 4 * ((-1640531535 * *(_DWORD *)(v384 + 2 + v393)) >> v575)) = v393 + 2;
                *(_DWORD *)(v579 + 4 * ((-1640531535 * *(_DWORD *)(v5 - 2)) >> v575)) = v5 - 2 - v384;
                uint64_t v440 = v11;
                while (1)
                {
                  uint64_t v11 = v437;
                  uint64_t v437 = v440;
                  uint64_t v441 = (v5 - v384 - v440);
                  uint64_t v442 = v559;
                  if (v441 >= v385) {
                    uint64_t v442 = v384;
                  }
                  if ((v571 - v441) < 3) {
                    break;
                  }
                  uint64_t v443 = v442 + v441;
                  if (*(_DWORD *)v443 != *(_DWORD *)v5) {
                    break;
                  }
                  if (v441 >= v385) {
                    v387 = (char *)v10;
                  }
                  unint64_t v444 = ZSTD_count_2segments((void *)(v5 + 4), (char *)(v443 + 4), v10, v387, v587);
                  unint64_t v391 = v563;
                  if (v5 <= v563)
                  {
                    *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
                    uint64_t v439 = *(void *)(a2 + 8);
                  }
                  *(_WORD *)(v439 + 4) = 0;
                  *(_DWORD *)uint64_t v439 = 1;
                  if (v444 + 1 >= 0x10000)
                  {
                    unint64_t v445 = (unint64_t)(v439 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v445;
                  }
                  *(_WORD *)(v439 + 6) = v444 + 1;
                  v439 += 8;
                  *(_DWORD *)(v579 + 4 * ((-1640531535 * *(_DWORD *)v5) >> v575)) = v5 - v384;
                  v5 += v444 + 4;
                  *(void *)(a2 + 8) = v439;
                  uint64_t v440 = v11;
                  uint64_t v12 = v437;
                  unint64_t v389 = v5;
                  unint64_t v10 = v591;
                  v387 = v567;
                  if (v5 > v583) {
                    goto LABEL_544;
                  }
                }
                uint64_t v12 = v11;
                uint64_t v11 = v437;
                unint64_t v389 = v5;
              }
              else
              {
                uint64_t v12 = v437;
                unint64_t v389 = (unint64_t)&v396[v406];
              }
              goto LABEL_544;
            }
LABEL_610:
            unint64_t v438 = (unint64_t)(v434 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v438;
            goto LABEL_611;
          }
          unint64_t v396 = (unsigned __int8 *)v389;
          unint64_t v10 = v591;
          unint64_t v391 = v563;
          v387 = v567;
          unsigned int v393 = v389 - v384;
          unint64_t v415 = v389 - v5;
          unint64_t v416 = *(_OWORD **)(a2 + 24);
          if (v389 <= v563) {
            goto LABEL_650;
          }
LABEL_640:
          if (v5 <= v391)
          {
            unsigned int v458 = (char *)v416 + v391 - v5;
            unsigned int v469 = (long long *)v5;
            uint64_t v470 = v416;
            do
            {
              long long v471 = *v469++;
              *v470++ = v471;
            }
            while (v470 < (_OWORD *)v458);
            unint64_t v457 = v391;
            if (v391 < v389) {
              goto LABEL_659;
            }
          }
          else
          {
            unint64_t v457 = v5;
            unsigned int v458 = v416;
            if (v5 >= v389) {
              goto LABEL_708;
            }
LABEL_659:
            if (v5 <= v391) {
              unint64_t v472 = v391;
            }
            else {
              unint64_t v472 = v5;
            }
            unint64_t v473 = v389 - v472;
            if (v389 - v472 < 8)
            {
              unsigned int v474 = (char *)v457;
              goto LABEL_707;
            }
            if ((unint64_t)v416 - v5 < 0x20)
            {
              unsigned int v474 = (char *)v457;
              goto LABEL_707;
            }
            if (v473 >= 0x20)
            {
              unint64_t v493 = v473 & 0xFFFFFFFFFFFFFFE0;
              unsigned int v494 = (long long *)(v457 + 16);
              unsigned int v495 = (_OWORD *)((char *)v416 + v472 - v5 + 16);
              unint64_t v496 = v473 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v497 = *v494;
                *(v495 - 1) = *(v494 - 1);
                *unsigned int v495 = v497;
                v494 += 2;
                v495 += 2;
                v496 -= 32;
              }
              while (v496);
              if (v473 != v493)
              {
                if ((v473 & 0x18) == 0)
                {
                  unsigned int v474 = (char *)(v457 + v493);
                  v458 += v493;
                  goto LABEL_707;
                }
                goto LABEL_695;
              }
            }
            else
            {
              unint64_t v493 = 0;
LABEL_695:
              v458 += v473 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v474 = (char *)(v457 + (v473 & 0xFFFFFFFFFFFFFFF8));
              int v498 = (uint64_t *)(v457 + v493);
              uint64_t v499 = (void *)((char *)v416 + v493 + v472 - v5);
              unint64_t v500 = v493 - (v473 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v501 = *v498++;
                *v499++ = v501;
                v500 += 8;
              }
              while (v500);
              if (v473 != (v473 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_707:
                  char v504 = *v474++;
                  *v458++ = v504;
                }
                while ((unint64_t)v474 < v389);
              }
            }
          }
LABEL_708:
          *(void *)(a2 + 24) += v415;
          uint64_t v434 = *(void *)(a2 + 8);
          if (v415 >= 0x10000)
          {
            unint64_t v505 = (unint64_t)(v434 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v505;
          }
          goto LABEL_710;
        }
      }
      else
      {
        uint64_t v402 = v384 + v392;
        if (*(_DWORD *)(v384 + v392) == *(_DWORD *)v389)
        {
          unsigned int v403 = (void *)(v389 + 4);
          unsigned int v404 = (_DWORD *)(v402 + 4);
          if (v530 <= v389 + 4)
          {
            int v422 = (_DWORD *)(v389 + 4);
            if ((unint64_t)v403 < v526)
            {
LABEL_578:
              if (*v404 == *v422)
              {
                ++v422;
                ++v404;
              }
            }
          }
          else
          {
            unint64_t v405 = *v403 ^ *(void *)v404;
            if (v405)
            {
              unint64_t v406 = (__clz(__rbit64(v405)) >> 3) + 4;
              if (v389 <= v5) {
                goto LABEL_560;
              }
LABEL_589:
              unint64_t v423 = (unsigned __int8 *)(v389 - 1);
              unsigned int v424 = (unsigned __int8 *)(v384 - 1 + v392);
              while (*v423 == *v424)
              {
                ++v406;
                unsigned int v425 = v423 - 1;
                if (v424 > v587)
                {
                  --v424;
                  BOOL v44 = (unint64_t)v423-- > v5;
                  if (v44) {
                    continue;
                  }
                }
                unint64_t v396 = v425 + 1;
                unint64_t v407 = (unint64_t)&v425[-v5 + 1];
                uint64_t v408 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v396 <= v391) {
                  goto LABEL_627;
                }
                goto LABEL_561;
              }
              unint64_t v396 = v423 + 1;
              unint64_t v407 = (unint64_t)&v423[-v5 + 1];
              uint64_t v408 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)(v423 + 1) > v391) {
                goto LABEL_561;
              }
              goto LABEL_627;
            }
            uint64_t v459 = 0;
            unint64_t v460 = v389 + 12;
            while (1)
            {
              unsigned int v461 = (void *)(v460 + v459);
              if (v460 + v459 >= v530) {
                break;
              }
              uint64_t v462 = *(void *)(v518 + v392 + v459);
              v459 += 8;
              unint64_t v463 = *v461 ^ v462;
              if (v463)
              {
                unint64_t v406 = v459 + (__clz(__rbit64(v463)) >> 3) + 4;
                if (v389 > v5) {
                  goto LABEL_589;
                }
                goto LABEL_560;
              }
            }
            int v422 = (_DWORD *)(v389 + v459 + 12);
            unsigned int v404 = (_DWORD *)(v518 + v392 + v459);
            if ((unint64_t)v422 < v526) {
              goto LABEL_578;
            }
          }
          if ((unint64_t)v422 >= v522)
          {
            if ((unint64_t)v422 >= v10) {
              goto LABEL_588;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v404 == *(unsigned __int16 *)v422)
            {
              int v422 = (_DWORD *)((char *)v422 + 2);
              unsigned int v404 = (_DWORD *)((char *)v404 + 2);
            }
            if ((unint64_t)v422 >= v10)
            {
LABEL_588:
              unint64_t v406 = (unint64_t)v422 - v389;
              if (v389 > v5) {
                goto LABEL_589;
              }
LABEL_560:
              unint64_t v396 = (unsigned __int8 *)v389;
              unint64_t v407 = v389 - v5;
              uint64_t v408 = *(_OWORD **)(a2 + 24);
              if (v389 <= v391)
              {
LABEL_627:
                *uint64_t v408 = *(_OWORD *)v5;
                uint64_t v446 = *(void *)(a2 + 24);
                if (v407 > 0x10)
                {
                  v447 = (_OWORD *)(v446 + 16);
                  unint64_t v448 = v446 + v407;
                  v449 = (long long *)(v5 + 16);
                  do
                  {
                    long long v450 = *v449++;
                    *v447++ = v450;
                  }
                  while ((unint64_t)v447 < v448);
                  goto LABEL_702;
                }
                *(void *)(a2 + 24) = v446 + v407;
                uint64_t v434 = *(void *)(a2 + 8);
LABEL_704:
                uint64_t v437 = (v389 - v402);
                __int16 v436 = v406 - 3;
                *(_WORD *)(v434 + 4) = v407;
                *(_DWORD *)uint64_t v434 = v437 + 3;
                uint64_t v11 = v12;
                if (v406 - 3 < 0x10000) {
                  goto LABEL_611;
                }
                goto LABEL_610;
              }
LABEL_561:
              if (v5 <= v391)
              {
                unsigned int v410 = (char *)v408 + v391 - v5;
                unint64_t v451 = (long long *)v5;
                v452 = v408;
                do
                {
                  long long v453 = *v451++;
                  *v452++ = v453;
                }
                while (v452 < (_OWORD *)v410);
                unint64_t v409 = v391;
                if (v391 >= (unint64_t)v396) {
                  goto LABEL_702;
                }
              }
              else
              {
                unint64_t v409 = v5;
                unsigned int v410 = v408;
                if (v5 >= (unint64_t)v396)
                {
LABEL_702:
                  *(void *)(a2 + 24) += v407;
                  uint64_t v434 = *(void *)(a2 + 8);
                  if (v407 >= 0x10000)
                  {
                    unint64_t v503 = (unint64_t)(v434 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v503;
                  }
                  goto LABEL_704;
                }
              }
              if (v5 <= v391) {
                unint64_t v454 = v391;
              }
              else {
                unint64_t v454 = v5;
              }
              unint64_t v455 = (unint64_t)&v396[-v454];
              if ((unint64_t)&v396[-v454] < 8)
              {
                v456 = (unsigned __int8 *)v409;
                goto LABEL_701;
              }
              if ((unint64_t)v408 - v5 < 0x20)
              {
                v456 = (unsigned __int8 *)v409;
                goto LABEL_701;
              }
              if (v455 >= 0x20)
              {
                unint64_t v476 = v455 & 0xFFFFFFFFFFFFFFE0;
                unint64_t v485 = (long long *)(v409 + 16);
                unint64_t v486 = (_OWORD *)((char *)v408 + v454 - v5 + 16);
                unint64_t v487 = v455 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v488 = *v485;
                  *(v486 - 1) = *(v485 - 1);
                  *unint64_t v486 = v488;
                  v485 += 2;
                  v486 += 2;
                  v487 -= 32;
                }
                while (v487);
                if (v455 == v476) {
                  goto LABEL_702;
                }
                if ((v455 & 0x18) == 0)
                {
                  v456 = (unsigned __int8 *)(v409 + v476);
                  v410 += v476;
                  do
                  {
LABEL_701:
                    char v502 = *v456++;
                    *v410++ = v502;
                  }
                  while (v456 < v396);
                  goto LABEL_702;
                }
              }
              else
              {
                unint64_t v476 = 0;
              }
              v410 += v455 & 0xFFFFFFFFFFFFFFF8;
              v456 = (unsigned __int8 *)(v409 + (v455 & 0xFFFFFFFFFFFFFFF8));
              v489 = (uint64_t *)(v409 + v476);
              uint64_t v490 = (void *)((char *)v408 + v476 + v454 - v5);
              unint64_t v491 = v476 - (v455 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v492 = *v489++;
                *v490++ = v492;
                v491 += 8;
              }
              while (v491);
              if (v455 == (v455 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_702;
              }
              goto LABEL_701;
            }
          }
          if (*(unsigned __int8 *)v404 == *(unsigned __int8 *)v422) {
            int v422 = (_DWORD *)((char *)v422 + 1);
          }
          goto LABEL_588;
        }
      }
      v389 += v547 + ((uint64_t)(v389 - v5) >> 8);
LABEL_544:
      uint64_t v388 = v551;
      if (v389 >= v583) {
        goto LABEL_712;
      }
    }
    if (v394 >= v385) {
      v387 = (char *)v10;
    }
    unint64_t v397 = ZSTD_count_2segments((void *)(v389 + 5), (char *)(v395 + 4), v10, v387, v587);
    unint64_t v391 = v563;
    unint64_t v398 = (unint64_t)&v396[-v5];
    uint64_t v399 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v396 <= v563)
    {
      *uint64_t v399 = *(_OWORD *)v5;
      uint64_t v417 = *(void *)(a2 + 24);
      if (v398 <= 0x10)
      {
        *(void *)(a2 + 24) = v417 + v398;
        uint64_t v434 = *(void *)(a2 + 8);
        unint64_t v10 = v591;
        v387 = v567;
        unsigned int v393 = v389 - v384;
        goto LABEL_609;
      }
      unsigned int v418 = (_OWORD *)(v417 + 16);
      unint64_t v419 = v417 + v398;
      uint64_t v420 = (long long *)(v5 + 16);
      unint64_t v10 = v591;
      v387 = v567;
      unsigned int v393 = v389 - v384;
      do
      {
        long long v421 = *v420++;
        *v418++ = v421;
      }
      while ((unint64_t)v418 < v419);
    }
    else
    {
      if (v5 <= v563)
      {
        unint64_t v401 = (char *)v399 + v563 - v5;
        v426 = (long long *)v5;
        unsigned int v427 = *(_OWORD **)(a2 + 24);
        unint64_t v10 = v591;
        v387 = v567;
        unsigned int v393 = v389 - v384;
        do
        {
          long long v428 = *v426++;
          *v427++ = v428;
        }
        while (v427 < (_OWORD *)v401);
        unint64_t v400 = v563;
        if (v563 >= (unint64_t)v396) {
          goto LABEL_606;
        }
      }
      else
      {
        unint64_t v400 = v5;
        unint64_t v401 = *(unsigned char **)(a2 + 24);
        unint64_t v10 = v591;
        v387 = v567;
        unsigned int v393 = v389 - v384;
        if (v5 >= (unint64_t)v396) {
          goto LABEL_606;
        }
      }
      if (v5 <= v563) {
        unint64_t v429 = v563;
      }
      else {
        unint64_t v429 = v5;
      }
      unint64_t v430 = v389 - v429 + 1;
      if (v430 < 8 || (unint64_t)v399 - v5 < 0x20)
      {
        unsigned int v431 = (char *)v400;
        goto LABEL_604;
      }
      if (v430 >= 0x20)
      {
        unint64_t v475 = v430 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v477 = (long long *)(v400 + 16);
        uint64_t v478 = (_OWORD *)((char *)v399 + v429 - v5 + 16);
        unint64_t v479 = v430 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v480 = *v477;
          *(v478 - 1) = *(v477 - 1);
          *uint64_t v478 = v480;
          v477 += 2;
          v478 += 2;
          v479 -= 32;
        }
        while (v479);
        if (v430 == v475) {
          goto LABEL_606;
        }
        if ((v430 & 0x18) == 0)
        {
          unsigned int v431 = (char *)(v400 + v475);
          v401 += v475;
LABEL_604:
          unsigned int v432 = (char *)(v430 + v400);
          do
          {
            char v433 = *v431++;
            *v401++ = v433;
          }
          while (v431 != v432);
          goto LABEL_606;
        }
      }
      else
      {
        unint64_t v475 = 0;
      }
      v401 += v430 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v431 = (char *)(v400 + (v430 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v481 = (uint64_t *)(v400 + v475);
      v482 = (void *)((char *)v399 + v475 + v429 - v5);
      unint64_t v483 = v475 - (v430 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v484 = *v481++;
        *v482++ = v484;
        v483 += 8;
      }
      while (v483);
      if (v430 != (v430 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_604;
      }
    }
LABEL_606:
    *(void *)(a2 + 24) += v398;
    uint64_t v434 = *(void *)(a2 + 8);
    if (v398 >= 0x10000)
    {
      unint64_t v435 = (unint64_t)(v434 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v435;
    }
LABEL_609:
    unint64_t v406 = v397 + 4;
    __int16 v436 = v397 + 1;
    *(_WORD *)(v434 + 4) = v398;
    *(_DWORD *)uint64_t v434 = 1;
    uint64_t v437 = v12;
    if (!((v397 + 1) >> 16)) {
      goto LABEL_611;
    }
    goto LABEL_610;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  unint64_t v10 = a4 + a5;
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v13 = *(void *)(a1 + 184);
  long long v14 = *(char **)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v540 = *(unsigned int *)(v13 + 24);
  unint64_t v580 = v10 - 8;
  int v584 = (unsigned __int8 *)(v8 + v9);
  if (*(void *)v13 + v5 - (v8 + v9) == v15 + v540) {
    unint64_t v16 = v5 + 1;
  }
  else {
    unint64_t v16 = v5;
  }
  if (v16 < v10 - 8)
  {
    unint64_t v511 = v15 + v540;
    int v531 = a3;
    uint64_t v576 = *(void *)(a1 + 48);
    LODWORD(v17) = *(_DWORD *)(a1 + 212);
    if (v17) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 1;
    }
    uint64_t v544 = v17;
    int v572 = 64 - *(_DWORD *)(a1 + 200);
    int v568 = v9 - 1;
    uint64_t v532 = *(void *)(v13 + 48);
    char v536 = 64 - *(_DWORD *)(v13 + 200);
    unint64_t v18 = v10 - 32;
    unint64_t v523 = v10 - 3;
    unint64_t v527 = v10 - 7;
    unsigned int v552 = v9 + v15 - v14;
    uint64_t v556 = v15 - v552;
    uint64_t v507 = v15 - 1;
    uint64_t v515 = v8 + 12;
    unint64_t v519 = v10 - 1;
    unint64_t v588 = v10;
    uint64_t v548 = *(void *)(v13 + 8);
    unint64_t v560 = v10 - 32;
    v564 = *(char **)v13;
    while (1)
    {
      unint64_t v19 = 0xCF1BBCDCBFA56300 * *(void *)v16;
      uint64_t v20 = 4 * (v19 >> v572);
      uint64_t v21 = *(unsigned int *)(v576 + v20);
      unsigned int v22 = v16 - v8;
      uint64_t v23 = (v16 - v8 - v12 + 1);
      uint64_t v24 = v15 + v23 - v552;
      if (v23 >= v9) {
        uint64_t v24 = v8 + v23;
      }
      *(_DWORD *)(v576 + v20) = v22;
      if ((v568 - v23) >= 3)
      {
        uint64_t v25 = (unsigned __int8 *)(v16 + 1);
        if (*(_DWORD *)v24 == *(_DWORD *)(v16 + 1)) {
          break;
        }
      }
      if (v21 <= v9)
      {
        uint64_t v40 = *(unsigned int *)(v532 + 4 * (v19 >> v536));
        if (v40 > v540 && *(_DWORD *)(v15 + v40) == *(_DWORD *)v16)
        {
          unint64_t v35 = ZSTD_count_2segments((void *)(v16 + 4), (char *)(v15 + v40 + 4), v10, v14, v584) + 4;
          if (v16 > v5)
          {
            int v41 = (unsigned __int8 *)(v507 + v40);
            unsigned int v42 = (unsigned __int8 *)(v16 - 1);
            unint64_t v10 = v588;
            long long v14 = v564;
            unsigned int v22 = v16 - v8;
            while (*v42 == *v41)
            {
              ++v35;
              unsigned int v43 = v42 - 1;
              if ((unint64_t)v42 > v5)
              {
                --v42;
                BOOL v44 = (unint64_t)v41-- > v511;
                if (v44) {
                  continue;
                }
              }
              unint64_t v16 = (unint64_t)(v43 + 1);
              unint64_t v18 = v560;
              uint64_t v25 = (unsigned __int8 *)v16;
              unint64_t v45 = (unint64_t)&v43[-v5 + 1];
              v46 = *(_OWORD **)(a2 + 24);
              if (v16 <= v560) {
                goto LABEL_119;
              }
              goto LABEL_109;
            }
            unint64_t v16 = (unint64_t)(v42 + 1);
            unint64_t v18 = v560;
            uint64_t v25 = v42 + 1;
            unint64_t v45 = (unint64_t)&v42[-v5 + 1];
            v46 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)(v42 + 1) > v560) {
              goto LABEL_109;
            }
LABEL_119:
            _OWORD *v46 = *(_OWORD *)v5;
            uint64_t v94 = *(void *)(a2 + 24);
            if (v45 > 0x10)
            {
              uint64_t v95 = (_OWORD *)(v94 + 16);
              unint64_t v96 = v94 + v45;
              unsigned int v97 = (long long *)(v5 + 16);
              do
              {
                long long v98 = *v97++;
                *v95++ = v98;
              }
              while ((unint64_t)v95 < v96);
              goto LABEL_177;
            }
            *(void *)(a2 + 24) = v94 + v45;
            uint64_t v64 = *(void *)(a2 + 8);
LABEL_179:
            uint64_t v67 = v22 - v552 - v40;
            __int16 v66 = v35 - 3;
            *(_WORD *)(v64 + 4) = v45;
            *(_DWORD *)uint64_t v64 = v67 + 3;
            uint64_t v11 = v12;
            if (!((v35 - 3) >> 16))
            {
LABEL_80:
              *(_WORD *)(v64 + 6) = v66;
              uint64_t v69 = v64 + 8;
              *(void *)(a2 + 8) = v64 + 8;
              unint64_t v5 = (unint64_t)&v25[v35];
              if ((unint64_t)&v25[v35] <= v580)
              {
                *(_DWORD *)(v576 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v8 + 2 + v22)) >> v572)) = v22 + 2;
                *(_DWORD *)(v576 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v5 - 2)) >> v572)) = v5 - 2 - v8;
                uint64_t v70 = v11;
                while (1)
                {
                  uint64_t v11 = v67;
                  uint64_t v67 = v70;
                  uint64_t v71 = (v5 - v8 - v70);
                  uint64_t v72 = v556;
                  if (v71 >= v9) {
                    uint64_t v72 = v8;
                  }
                  if ((v568 - v71) < 3) {
                    break;
                  }
                  uint64_t v73 = v72 + v71;
                  if (*(_DWORD *)v73 != *(_DWORD *)v5) {
                    break;
                  }
                  if (v71 >= v9) {
                    long long v14 = (char *)v10;
                  }
                  unint64_t v74 = ZSTD_count_2segments((void *)(v5 + 4), (char *)(v73 + 4), v10, v14, v584);
                  unint64_t v18 = v560;
                  if (v5 <= v560)
                  {
                    *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
                    uint64_t v69 = *(void *)(a2 + 8);
                  }
                  *(_WORD *)(v69 + 4) = 0;
                  *(_DWORD *)uint64_t v69 = 1;
                  if (v74 + 1 >= 0x10000)
                  {
                    unint64_t v75 = (unint64_t)(v69 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v75;
                  }
                  *(_WORD *)(v69 + 6) = v74 + 1;
                  v69 += 8;
                  *(_DWORD *)(v576 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)v5) >> v572)) = v5 - v8;
                  v5 += v74 + 4;
                  *(void *)(a2 + 8) = v69;
                  uint64_t v70 = v11;
                  uint64_t v12 = v67;
                  unint64_t v16 = v5;
                  unint64_t v10 = v588;
                  long long v14 = v564;
                  if (v5 > v580) {
                    goto LABEL_13;
                  }
                }
                uint64_t v12 = v11;
                uint64_t v11 = v67;
                unint64_t v16 = v5;
              }
              else
              {
                uint64_t v12 = v67;
                unint64_t v16 = (unint64_t)&v25[v35];
              }
              goto LABEL_13;
            }
LABEL_79:
            unint64_t v68 = (unint64_t)(v64 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v68;
            goto LABEL_80;
          }
          uint64_t v25 = (unsigned __int8 *)v16;
          unint64_t v10 = v588;
          unint64_t v18 = v560;
          long long v14 = v564;
          unsigned int v22 = v16 - v8;
          unint64_t v45 = v16 - v5;
          v46 = *(_OWORD **)(a2 + 24);
          if (v16 <= v560) {
            goto LABEL_119;
          }
LABEL_109:
          if (v5 <= v18)
          {
            uint64_t v88 = (char *)v46 + v18 - v5;
            v99 = (long long *)v5;
            v100 = v46;
            do
            {
              long long v101 = *v99++;
              *v100++ = v101;
            }
            while (v100 < (_OWORD *)v88);
            unint64_t v87 = v18;
            if (v18 < v16) {
              goto LABEL_128;
            }
          }
          else
          {
            unint64_t v87 = v5;
            uint64_t v88 = v46;
            if (v5 >= v16) {
              goto LABEL_177;
            }
LABEL_128:
            if (v5 <= v18) {
              unint64_t v102 = v18;
            }
            else {
              unint64_t v102 = v5;
            }
            unint64_t v103 = v16 - v102;
            if (v16 - v102 < 8)
            {
              v104 = (char *)v87;
              goto LABEL_176;
            }
            if ((unint64_t)v46 - v5 < 0x20)
            {
              v104 = (char *)v87;
              goto LABEL_176;
            }
            if (v103 >= 0x20)
            {
              unint64_t v123 = v103 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v124 = (long long *)(v87 + 16);
              uint64_t v125 = (_OWORD *)((char *)v46 + v102 - v5 + 16);
              unint64_t v126 = v103 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v127 = *v124;
                *(v125 - 1) = *(v124 - 1);
                *uint64_t v125 = v127;
                v124 += 2;
                v125 += 2;
                v126 -= 32;
              }
              while (v126);
              if (v103 != v123)
              {
                if ((v103 & 0x18) == 0)
                {
                  v104 = (char *)(v87 + v123);
                  v88 += v123;
                  goto LABEL_176;
                }
                goto LABEL_164;
              }
            }
            else
            {
              unint64_t v123 = 0;
LABEL_164:
              v88 += v103 & 0xFFFFFFFFFFFFFFF8;
              v104 = (char *)(v87 + (v103 & 0xFFFFFFFFFFFFFFF8));
              v128 = (uint64_t *)(v87 + v123);
              int v129 = (void *)((char *)v46 + v123 + v102 - v5);
              unint64_t v130 = v123 - (v103 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v131 = *v128++;
                *v129++ = v131;
                v130 += 8;
              }
              while (v130);
              if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_176:
                  char v134 = *v104++;
                  *v88++ = v134;
                }
                while ((unint64_t)v104 < v16);
              }
            }
          }
LABEL_177:
          *(void *)(a2 + 24) += v45;
          uint64_t v64 = *(void *)(a2 + 8);
          if (v45 >= 0x10000)
          {
            unint64_t v135 = (unint64_t)(v64 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v135;
          }
          goto LABEL_179;
        }
      }
      else
      {
        uint64_t v31 = v8 + v21;
        if (*(_DWORD *)(v8 + v21) == *(_DWORD *)v16)
        {
          uint64_t v32 = (void *)(v16 + 4);
          uint64_t v33 = (_DWORD *)(v31 + 4);
          if (v527 <= v16 + 4)
          {
            unsigned int v52 = (_DWORD *)(v16 + 4);
            if ((unint64_t)v32 < v523)
            {
LABEL_47:
              if (*v33 == *v52)
              {
                ++v52;
                ++v33;
              }
            }
          }
          else
          {
            unint64_t v34 = *v32 ^ *(void *)v33;
            if (v34)
            {
              unint64_t v35 = (__clz(__rbit64(v34)) >> 3) + 4;
              if (v16 <= v5) {
                goto LABEL_29;
              }
LABEL_58:
              BOOL v53 = (unsigned __int8 *)(v16 - 1);
              uint64_t v54 = (unsigned __int8 *)(v8 - 1 + v21);
              while (*v53 == *v54)
              {
                ++v35;
                v55 = v53 - 1;
                if (v54 > v584)
                {
                  --v54;
                  BOOL v44 = (unint64_t)v53-- > v5;
                  if (v44) {
                    continue;
                  }
                }
                uint64_t v25 = v55 + 1;
                unint64_t v36 = (unint64_t)&v55[-v5 + 1];
                unint64_t v37 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v25 <= v18) {
                  goto LABEL_96;
                }
                goto LABEL_30;
              }
              uint64_t v25 = v53 + 1;
              unint64_t v36 = (unint64_t)&v53[-v5 + 1];
              unint64_t v37 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)(v53 + 1) > v18) {
                goto LABEL_30;
              }
              goto LABEL_96;
            }
            uint64_t v89 = 0;
            unint64_t v90 = v16 + 12;
            while (1)
            {
              unsigned int v91 = (void *)(v90 + v89);
              if (v90 + v89 >= v527) {
                break;
              }
              uint64_t v92 = *(void *)(v515 + v21 + v89);
              v89 += 8;
              unint64_t v93 = *v91 ^ v92;
              if (v93)
              {
                unint64_t v35 = v89 + (__clz(__rbit64(v93)) >> 3) + 4;
                if (v16 > v5) {
                  goto LABEL_58;
                }
                goto LABEL_29;
              }
            }
            unsigned int v52 = (_DWORD *)(v16 + v89 + 12);
            uint64_t v33 = (_DWORD *)(v515 + v21 + v89);
            if ((unint64_t)v52 < v523) {
              goto LABEL_47;
            }
          }
          if ((unint64_t)v52 >= v519)
          {
            if ((unint64_t)v52 >= v10) {
              goto LABEL_57;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v33 == *(unsigned __int16 *)v52)
            {
              unsigned int v52 = (_DWORD *)((char *)v52 + 2);
              uint64_t v33 = (_DWORD *)((char *)v33 + 2);
            }
            if ((unint64_t)v52 >= v10)
            {
LABEL_57:
              unint64_t v35 = (unint64_t)v52 - v16;
              if (v16 > v5) {
                goto LABEL_58;
              }
LABEL_29:
              uint64_t v25 = (unsigned __int8 *)v16;
              unint64_t v36 = v16 - v5;
              unint64_t v37 = *(_OWORD **)(a2 + 24);
              if (v16 <= v18)
              {
LABEL_96:
                *unint64_t v37 = *(_OWORD *)v5;
                uint64_t v76 = *(void *)(a2 + 24);
                if (v36 > 0x10)
                {
                  unsigned int v77 = (_OWORD *)(v76 + 16);
                  unint64_t v78 = v76 + v36;
                  unsigned int v79 = (long long *)(v5 + 16);
                  do
                  {
                    long long v80 = *v79++;
                    *v77++ = v80;
                  }
                  while ((unint64_t)v77 < v78);
                  goto LABEL_171;
                }
                *(void *)(a2 + 24) = v76 + v36;
                uint64_t v64 = *(void *)(a2 + 8);
LABEL_173:
                uint64_t v67 = (v16 - v31);
                __int16 v66 = v35 - 3;
                *(_WORD *)(v64 + 4) = v36;
                *(_DWORD *)uint64_t v64 = v67 + 3;
                uint64_t v11 = v12;
                if (v35 - 3 < 0x10000) {
                  goto LABEL_80;
                }
                goto LABEL_79;
              }
LABEL_30:
              if (v5 <= v18)
              {
                v39 = (char *)v37 + v18 - v5;
                unsigned int v81 = (long long *)v5;
                unsigned int v82 = v37;
                do
                {
                  long long v83 = *v81++;
                  *v82++ = v83;
                }
                while (v82 < (_OWORD *)v39);
                unint64_t v38 = v18;
                if (v18 >= (unint64_t)v25) {
                  goto LABEL_171;
                }
              }
              else
              {
                unint64_t v38 = v5;
                v39 = v37;
                if (v5 >= (unint64_t)v25)
                {
LABEL_171:
                  *(void *)(a2 + 24) += v36;
                  uint64_t v64 = *(void *)(a2 + 8);
                  if (v36 >= 0x10000)
                  {
                    unint64_t v133 = (unint64_t)(v64 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v133;
                  }
                  goto LABEL_173;
                }
              }
              if (v5 <= v18) {
                unint64_t v84 = v18;
              }
              else {
                unint64_t v84 = v5;
              }
              unint64_t v85 = (unint64_t)&v25[-v84];
              if ((unint64_t)&v25[-v84] < 8)
              {
                unint64_t v86 = (unsigned __int8 *)v38;
                goto LABEL_170;
              }
              if ((unint64_t)v37 - v5 < 0x20)
              {
                unint64_t v86 = (unsigned __int8 *)v38;
                goto LABEL_170;
              }
              if (v85 >= 0x20)
              {
                unint64_t v106 = v85 & 0xFFFFFFFFFFFFFFE0;
                int v115 = (long long *)(v38 + 16);
                unsigned int v116 = (_OWORD *)((char *)v37 + v84 - v5 + 16);
                unint64_t v117 = v85 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v118 = *v115;
                  *(v116 - 1) = *(v115 - 1);
                  *unsigned int v116 = v118;
                  v115 += 2;
                  v116 += 2;
                  v117 -= 32;
                }
                while (v117);
                if (v85 == v106) {
                  goto LABEL_171;
                }
                if ((v85 & 0x18) == 0)
                {
                  unint64_t v86 = (unsigned __int8 *)(v38 + v106);
                  v39 += v106;
                  do
                  {
LABEL_170:
                    char v132 = *v86++;
                    *v39++ = v132;
                  }
                  while (v86 < v25);
                  goto LABEL_171;
                }
              }
              else
              {
                unint64_t v106 = 0;
              }
              v39 += v85 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v86 = (unsigned __int8 *)(v38 + (v85 & 0xFFFFFFFFFFFFFFF8));
              v119 = (uint64_t *)(v38 + v106);
              unsigned int v120 = (void *)((char *)v37 + v106 + v84 - v5);
              unint64_t v121 = v106 - (v85 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v122 = *v119++;
                *v120++ = v122;
                v121 += 8;
              }
              while (v121);
              if (v85 == (v85 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_171;
              }
              goto LABEL_170;
            }
          }
          if (*(unsigned __int8 *)v33 == *(unsigned __int8 *)v52) {
            unsigned int v52 = (_DWORD *)((char *)v52 + 1);
          }
          goto LABEL_57;
        }
      }
      v16 += v544 + ((uint64_t)(v16 - v5) >> 8);
LABEL_13:
      uint64_t v15 = v548;
      if (v16 >= v580) {
        goto LABEL_712;
      }
    }
    if (v23 >= v9) {
      long long v14 = (char *)v10;
    }
    unint64_t v26 = ZSTD_count_2segments((void *)(v16 + 5), (char *)(v24 + 4), v10, v14, v584);
    unint64_t v18 = v560;
    unint64_t v27 = (unint64_t)&v25[-v5];
    int v28 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v25 <= v560)
    {
      *int v28 = *(_OWORD *)v5;
      uint64_t v47 = *(void *)(a2 + 24);
      if (v27 <= 0x10)
      {
        *(void *)(a2 + 24) = v47 + v27;
        uint64_t v64 = *(void *)(a2 + 8);
        unint64_t v10 = v588;
        long long v14 = v564;
        unsigned int v22 = v16 - v8;
        goto LABEL_78;
      }
      v48 = (_OWORD *)(v47 + 16);
      unint64_t v49 = v47 + v27;
      unsigned int v50 = (long long *)(v5 + 16);
      unint64_t v10 = v588;
      long long v14 = v564;
      unsigned int v22 = v16 - v8;
      do
      {
        long long v51 = *v50++;
        *v48++ = v51;
      }
      while ((unint64_t)v48 < v49);
    }
    else
    {
      if (v5 <= v560)
      {
        v30 = (char *)v28 + v560 - v5;
        uint64_t v56 = (long long *)v5;
        uint64_t v57 = *(_OWORD **)(a2 + 24);
        unint64_t v10 = v588;
        long long v14 = v564;
        unsigned int v22 = v16 - v8;
        do
        {
          long long v58 = *v56++;
          *v57++ = v58;
        }
        while (v57 < (_OWORD *)v30);
        unint64_t v29 = v560;
        if (v560 >= (unint64_t)v25) {
          goto LABEL_75;
        }
      }
      else
      {
        unint64_t v29 = v5;
        v30 = *(unsigned char **)(a2 + 24);
        unint64_t v10 = v588;
        long long v14 = v564;
        unsigned int v22 = v16 - v8;
        if (v5 >= (unint64_t)v25) {
          goto LABEL_75;
        }
      }
      if (v5 <= v560) {
        unint64_t v59 = v560;
      }
      else {
        unint64_t v59 = v5;
      }
      unint64_t v60 = v16 - v59 + 1;
      if (v60 < 8 || (unint64_t)v28 - v5 < 0x20)
      {
        v61 = (char *)v29;
        goto LABEL_73;
      }
      if (v60 >= 0x20)
      {
        unint64_t v105 = v60 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v107 = (long long *)(v29 + 16);
        unsigned int v108 = (_OWORD *)((char *)v28 + v59 - v5 + 16);
        unint64_t v109 = v60 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v110 = *v107;
          *(v108 - 1) = *(v107 - 1);
          *unsigned int v108 = v110;
          v107 += 2;
          v108 += 2;
          v109 -= 32;
        }
        while (v109);
        if (v60 == v105) {
          goto LABEL_75;
        }
        if ((v60 & 0x18) == 0)
        {
          v61 = (char *)(v29 + v105);
          v30 += v105;
LABEL_73:
          v62 = (char *)(v60 + v29);
          do
          {
            char v63 = *v61++;
            *v30++ = v63;
          }
          while (v61 != v62);
          goto LABEL_75;
        }
      }
      else
      {
        unint64_t v105 = 0;
      }
      v30 += v60 & 0xFFFFFFFFFFFFFFF8;
      v61 = (char *)(v29 + (v60 & 0xFFFFFFFFFFFFFFF8));
      unsigned int v111 = (uint64_t *)(v29 + v105);
      uint64_t v112 = (void *)((char *)v28 + v105 + v59 - v5);
      unint64_t v113 = v105 - (v60 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v114 = *v111++;
        *v112++ = v114;
        v113 += 8;
      }
      while (v113);
      if (v60 != (v60 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_73;
      }
    }
LABEL_75:
    *(void *)(a2 + 24) += v27;
    uint64_t v64 = *(void *)(a2 + 8);
    if (v27 >= 0x10000)
    {
      unint64_t v65 = (unint64_t)(v64 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v65;
    }
LABEL_78:
    unint64_t v35 = v26 + 4;
    __int16 v66 = v26 + 1;
    *(_WORD *)(v64 + 4) = v27;
    *(_DWORD *)uint64_t v64 = 1;
    uint64_t v67 = v12;
    if (!((v26 + 1) >> 16)) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
LABEL_713:
  *a3 = v12;
  a3[1] = v11;
  return v10 - v5;
}

unint64_t ZSTD_compressBlock_doubleFast_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5 = a4;
  int v7 = *(_DWORD *)(a1 + 208);
  if (v7 == 5)
  {
    uint64_t v163 = *(void *)(a1 + 8);
    unint64_t v9 = a4 + a5;
    int v164 = a4 + a5 - v163;
    unsigned int v165 = *(_DWORD *)(a1 + 24);
    unsigned int v166 = 1 << *(_DWORD *)(a1 + 192);
    unsigned int v167 = v164 - v165;
    unsigned int v168 = v164 - v166;
    if (v167 > v166 && *(_DWORD *)(a1 + 32) == 0) {
      uint64_t v170 = v168;
    }
    else {
      uint64_t v170 = v165;
    }
    uint64_t v171 = (unsigned __int8 *)(v163 + v170);
    unint64_t v172 = v9 - 8;
    uint64_t v19 = *a3;
    uint64_t v20 = a3[1];
    uint64_t v173 = *(void *)(a1 + 184);
    uint64_t v174 = *(unsigned int *)(v173 + 24);
    long long v175 = *(char **)v173;
    uint64_t v176 = *(void *)(v173 + 8);
    if (v5 - (v176 + v174) - (v163 + v170) + *(void *)v173) {
      v177 = (unsigned __int8 *)v5;
    }
    else {
      v177 = (unsigned __int8 *)(v5 + 1);
    }
    if ((unint64_t)v177 >= v172) {
      goto LABEL_691;
    }
    unint64_t v613 = v176 + v174;
    unsigned int v653 = *(_DWORD *)(v173 + 24);
    v628 = a3;
    uint64_t v697 = *(void *)(a1 + 48);
    uint64_t v689 = *(void *)(a1 + 64);
    uint64_t v649 = *(void *)(v173 + 48);
    int v693 = 64 - *(_DWORD *)(a1 + 200);
    int v685 = 64 - *(_DWORD *)(a1 + 196);
    int v635 = 64 - *(_DWORD *)(v173 + 196);
    unint64_t v641 = v9 - 7;
    int v645 = 64 - *(_DWORD *)(v173 + 200);
    unint64_t v621 = v9 - 1;
    unint64_t v625 = v9 - 3;
    unint64_t v178 = v9 - 32;
    unsigned int v657 = v170 + v176 - v175;
    uint64_t v665 = v176 - v657;
    uint64_t v631 = *(void *)(v173 + 64);
    uint64_t v606 = v176 - 1;
    uint64_t v609 = v163 + 16;
    uint64_t v617 = v163 - 1;
    uint64_t v669 = *(char **)v173;
    unint64_t v673 = v9 - 8;
    unint64_t v677 = v9 - 32;
    unint64_t v681 = v9;
    uint64_t v661 = *(void *)(v173 + 8);
    while (1)
    {
      uint64_t v179 = *(void *)v177;
      unint64_t v180 = 0xCF1BBCDCB7A56463 * *(void *)v177;
      unint64_t v181 = 0xCF1BBCDCBB000000 * *(void *)v177;
      uint64_t v182 = 4 * (v180 >> v693);
      uint64_t v183 = *(unsigned int *)(v697 + v182);
      int v184 = v177 - v163;
      uint64_t v185 = 4 * (v181 >> v685);
      uint64_t v186 = *(unsigned int *)(v689 + v185);
      int v187 = v177 - v163 + 1;
      uint64_t v188 = (v187 - v19);
      *(_DWORD *)(v689 + v185) = v177 - v163;
      uint64_t v189 = v188 >= v170 ? v163 + v188 : v176 + v188 - v657;
      *(_DWORD *)(v697 + v182) = v184;
      if ((v170 + ~v188) >= 3)
      {
        __int16 v190 = v177 + 1;
        if (*(_DWORD *)v189 == *(_DWORD *)(v177 + 1)) {
          break;
        }
      }
      if (v183 <= v170)
      {
        uint64_t v202 = *(unsigned int *)(v649 + 4 * (v180 >> v645));
        if (v202 > v653 && *(void *)(v661 + v202) == v179)
        {
          unint64_t v9 = v681;
          unint64_t v203 = ZSTD_count_2segments((void *)v177 + 1, (char *)(v661 + v202 + 8), v681, v175, v171);
          int v184 = v177 - v163;
          uint64_t v200 = v203 + 8;
          uint64_t v201 = v177 - v163 - v657 - v202;
          if ((unint64_t)v177 > v5)
          {
            long long v204 = v177 - 1;
            v205 = (unsigned __int8 *)(v606 + v202);
            uint64_t v171 = (unsigned __int8 *)(v163 + v170);
            unint64_t v178 = v677;
            long long v175 = v669;
            unint64_t v172 = v673;
            while (*v204 == *v205)
            {
              ++v200;
              v206 = v204 - 1;
              if ((unint64_t)v205 > v613)
              {
                --v205;
                BOOL v55 = (unint64_t)v204-- > v5;
                if (v55) {
                  continue;
                }
              }
LABEL_364:
              __int16 v190 = v206 + 1;
              goto LABEL_395;
            }
LABEL_365:
            __int16 v190 = v204 + 1;
LABEL_395:
            unint64_t v259 = (unint64_t)&v190[-v5];
            uint64_t v260 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v190 > v178)
            {
              if (v5 <= v178)
              {
                uint64_t v262 = (char *)v260 + v178 - v5;
                unint64_t v268 = (long long *)v5;
                uint64_t v269 = *(_OWORD **)(a2 + 24);
                do
                {
                  long long v270 = *v268++;
                  *v269++ = v270;
                }
                while (v269 < (_OWORD *)v262);
                unint64_t v261 = v178;
                if (v178 >= (unint64_t)v190) {
                  goto LABEL_443;
                }
              }
              else
              {
                unint64_t v261 = v5;
                uint64_t v262 = *(unsigned char **)(a2 + 24);
                if (v5 >= (unint64_t)v190)
                {
LABEL_443:
                  *(void *)(a2 + 24) += v259;
                  uint64_t v240 = *(void *)(a2 + 8);
                  if (v259 >= 0x10000)
                  {
                    unint64_t v297 = (unint64_t)(v240 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v297;
                  }
                  goto LABEL_445;
                }
              }
              if (v5 <= v178) {
                unint64_t v271 = v178;
              }
              else {
                unint64_t v271 = v5;
              }
              unint64_t v272 = (unint64_t)&v190[-v271];
              if ((unint64_t)&v190[-v271] < 8)
              {
                uint64_t v273 = (unsigned __int8 *)v261;
                goto LABEL_442;
              }
              if ((unint64_t)v260 - v5 < 0x20)
              {
                uint64_t v273 = (unsigned __int8 *)v261;
                goto LABEL_442;
              }
              if (v272 >= 0x20)
              {
                unint64_t v274 = v272 & 0xFFFFFFFFFFFFFFE0;
                unint64_t v275 = (long long *)(v261 + 16);
                unint64_t v276 = (_OWORD *)((char *)v260 + v271 - v5 + 16);
                unint64_t v277 = v272 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v278 = *v275;
                  *(v276 - 1) = *(v275 - 1);
                  *unint64_t v276 = v278;
                  v275 += 2;
                  v276 += 2;
                  v277 -= 32;
                }
                while (v277);
                if (v272 == v274) {
                  goto LABEL_443;
                }
                if ((v272 & 0x18) == 0)
                {
                  uint64_t v273 = (unsigned __int8 *)(v261 + v274);
                  v262 += v274;
                  do
                  {
LABEL_442:
                    char v296 = *v273++;
                    *v262++ = v296;
                  }
                  while (v273 < v190);
                  goto LABEL_443;
                }
              }
              else
              {
                unint64_t v274 = 0;
              }
              v262 += v272 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v273 = (unsigned __int8 *)(v261 + (v272 & 0xFFFFFFFFFFFFFFF8));
              unint64_t v279 = (uint64_t *)(v261 + v274);
              uint64_t v280 = (void *)((char *)v260 + v274 + v271 - v5);
              unint64_t v281 = v274 - (v272 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v282 = *v279++;
                *v280++ = v282;
                v281 += 8;
              }
              while (v281);
              if (v272 == (v272 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_443;
              }
              goto LABEL_442;
            }
            *uint64_t v260 = *(_OWORD *)v5;
            uint64_t v263 = *(void *)(a2 + 24);
            if (v259 > 0x10)
            {
              uint64_t v264 = (_OWORD *)(v263 + 16);
              unint64_t v265 = v263 + v259;
              uint64_t v266 = (long long *)(v5 + 16);
              do
              {
                long long v267 = *v266++;
                *v264++ = v267;
              }
              while ((unint64_t)v264 < v265);
              goto LABEL_443;
            }
            *(void *)(a2 + 24) = v263 + v259;
            uint64_t v240 = *(void *)(a2 + 8);
LABEL_445:
            __int16 v242 = v200 - 3;
            *(_WORD *)(v240 + 4) = v259;
            *(_DWORD *)uint64_t v240 = v201 + 3;
            uint64_t v20 = v19;
            uint64_t v19 = v201;
            if ((unint64_t)(v200 - 3) >= 0x10000)
            {
LABEL_446:
              unint64_t v298 = (unint64_t)(v240 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v298;
              uint64_t v19 = v201;
            }
LABEL_447:
            *(_WORD *)(v240 + 6) = v242;
            uint64_t v299 = v240 + 8;
            *(void *)(a2 + 8) = v240 + 8;
            unint64_t v5 = (unint64_t)&v190[v200];
            if ((unint64_t)&v190[v200] <= v172)
            {
              uint64_t v300 = *(void *)(v163 + (v184 + 2));
              *(_DWORD *)(v697 + 4 * ((0xCF1BBCDCB7A56463 * v300) >> v693)) = v184 + 2;
              *(_DWORD *)(v697 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v5 - 2)) >> v693)) = v5 - 2 - v163;
              *(_DWORD *)(v689 + 4 * ((0xCF1BBCDCBB000000 * v300) >> v685)) = v184 + 2;
              *(_DWORD *)(v689 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v5 - 1)) >> v685)) = v5 - 1 - v163;
              uint64_t v301 = v19;
              uint64_t v302 = v20;
              while (1)
              {
                uint64_t v19 = v302;
                uint64_t v302 = v301;
                int v304 = v5 - v163;
                uint64_t v305 = (v5 - v163 - v19);
                uint64_t v306 = v665;
                if (v305 >= v170) {
                  uint64_t v306 = v163;
                }
                if ((v170 + ~v305) < 3) {
                  break;
                }
                uint64_t v307 = v306 + v305;
                if (*(_DWORD *)v307 != *(_DWORD *)v5) {
                  break;
                }
                if (v305 >= v170) {
                  long long v175 = (char *)v9;
                }
                unint64_t v308 = ZSTD_count_2segments((void *)(v5 + 4), (char *)(v307 + 4), v9, v175, v171);
                unint64_t v178 = v677;
                if (v5 <= v677)
                {
                  *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
                  uint64_t v299 = *(void *)(a2 + 8);
                }
                *(_WORD *)(v299 + 4) = 0;
                *(_DWORD *)uint64_t v299 = 1;
                unint64_t v172 = v673;
                if (v308 + 1 >= 0x10000)
                {
                  unint64_t v309 = (unint64_t)(v299 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v309;
                }
                *(_WORD *)(v299 + 6) = v308 + 1;
                v299 += 8;
                uint64_t v303 = *(void *)v5;
                *(_DWORD *)(v689 + 4 * ((0xCF1BBCDCBB000000 * *(void *)v5) >> v685)) = v304;
                *(_DWORD *)(v697 + 4 * ((0xCF1BBCDCB7A56463 * v303) >> v693)) = v304;
                v5 += v308 + 4;
                *(void *)(a2 + 8) = v299;
                uint64_t v301 = v19;
                uint64_t v20 = v302;
                v177 = (unsigned __int8 *)v5;
                uint64_t v171 = (unsigned __int8 *)(v163 + v170);
                long long v175 = v669;
                if (v5 > v673) {
                  goto LABEL_245;
                }
              }
              uint64_t v20 = v19;
              uint64_t v19 = v301;
            }
            v177 = (unsigned __int8 *)v5;
            goto LABEL_245;
          }
LABEL_337:
          __int16 v190 = v177;
          uint64_t v171 = (unsigned __int8 *)(v163 + v170);
          unint64_t v178 = v677;
          long long v175 = v669;
          unint64_t v172 = v673;
          goto LABEL_395;
        }
      }
      else
      {
        uint64_t v196 = v163 + v183;
        if (*(void *)(v163 + v183) == v179)
        {
          uint64_t v197 = v177 + 8;
          unint64_t v198 = (_DWORD *)(v196 + 8);
          if (v641 <= (unint64_t)(v177 + 8))
          {
            v223 = v177 + 8;
            if ((unint64_t)v197 < v625)
            {
LABEL_289:
              if (*v198 == *(_DWORD *)v223)
              {
                v223 += 4;
                ++v198;
              }
            }
          }
          else
          {
            unint64_t v199 = *v197 ^ *(void *)v198;
            if (v199)
            {
              unint64_t v9 = v681;
              uint64_t v200 = (__clz(__rbit64(v199)) >> 3) + 8;
              uint64_t v201 = (v177 - v196);
              if ((unint64_t)v177 <= v5) {
                goto LABEL_394;
              }
              goto LABEL_300;
            }
            uint64_t v244 = 0;
            unint64_t v245 = v177 + 16;
            unint64_t v9 = v681;
            while (1)
            {
              uint64_t v246 = &v245[v244];
              if ((unint64_t)&v245[v244] >= v641) {
                break;
              }
              uint64_t v247 = *(void *)(v609 + v183 + v244);
              v244 += 8;
              unint64_t v248 = *(void *)v246 ^ v247;
              if (v248)
              {
                uint64_t v200 = v244 + (__clz(__rbit64(v248)) >> 3) + 8;
                uint64_t v201 = (v177 - v196);
                if ((unint64_t)v177 > v5) {
                  goto LABEL_300;
                }
                goto LABEL_394;
              }
            }
            v223 = &v177[v244 + 16];
            unint64_t v198 = (_DWORD *)(v609 + v183 + v244);
            if ((unint64_t)v223 < v625) {
              goto LABEL_289;
            }
          }
          unint64_t v9 = v681;
          if ((unint64_t)v223 >= v621)
          {
            if ((unint64_t)v223 >= v681) {
              goto LABEL_299;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v198 == *(unsigned __int16 *)v223)
            {
              v223 += 2;
              unint64_t v198 = (_DWORD *)((char *)v198 + 2);
            }
            if ((unint64_t)v223 >= v681)
            {
LABEL_299:
              uint64_t v200 = v223 - v177;
              uint64_t v201 = (v177 - v196);
              if ((unint64_t)v177 <= v5) {
                goto LABEL_394;
              }
LABEL_300:
              v224 = v177 - 1;
              long long v225 = (unsigned __int8 *)(v617 + v183);
              while (*v224 == *v225)
              {
                ++v200;
                v206 = v224 - 1;
                if (v225 > v171)
                {
                  --v225;
                  BOOL v55 = (unint64_t)v224-- > v5;
                  if (v55) {
                    continue;
                  }
                }
                goto LABEL_364;
              }
LABEL_382:
              __int16 v190 = v224 + 1;
              goto LABEL_395;
            }
          }
          if (*(unsigned __int8 *)v198 == *v223) {
            ++v223;
          }
          goto LABEL_299;
        }
      }
      if (v186 <= v170)
      {
        uint64_t v208 = *(unsigned int *)(v631 + 4 * (v181 >> v635));
        if (v208 > v653)
        {
          unint64_t v207 = v661 + v208;
          if (*(_DWORD *)(v661 + v208) == *(_DWORD *)v177)
          {
            LODWORD(v186) = v208 + v657;
LABEL_277:
            __int16 v190 = v177 + 1;
            uint64_t v209 = *(void *)(v177 + 1);
            unint64_t v210 = 4 * ((0xCF1BBCDCB7A56463 * v209) >> v693);
            uint64_t v211 = *(unsigned int *)(v697 + v210);
            *(_DWORD *)(v697 + v210) = v187;
            if (v211 <= v170)
            {
              uint64_t v226 = *(unsigned int *)(v649 + 4 * ((0xCF1BBCDCB7A56463 * v209) >> v645));
              if (v226 > v653 && *(void *)(v661 + v226) == v209)
              {
                uint64_t v200 = ZSTD_count_2segments(v177 + 9, (char *)(v661 + v226 + 8), v681, v175, v171) + 8;
                uint64_t v201 = v187 - v657 - v226;
                if ((unint64_t)v190 <= v5)
                {
                  unint64_t v178 = v677;
                  unint64_t v9 = v681;
                  uint64_t v171 = (unsigned __int8 *)(v163 + v170);
                  long long v175 = v669;
                  unint64_t v172 = v673;
                  int v184 = v177 - v163;
                  goto LABEL_395;
                }
                unint64_t v227 = (unsigned __int8 *)(v606 + v226);
                unint64_t v178 = v677;
                unint64_t v9 = v681;
                uint64_t v171 = (unsigned __int8 *)(v163 + v170);
                long long v175 = v669;
                unint64_t v172 = v673;
                int v184 = v177 - v163;
                while (*v177 == *v227)
                {
                  ++v200;
                  v224 = v177 - 1;
                  if ((unint64_t)v177 > v5)
                  {
                    --v177;
                    BOOL v55 = (unint64_t)v227-- > v613;
                    if (v55) {
                      continue;
                    }
                  }
                  goto LABEL_382;
                }
                goto LABEL_385;
              }
            }
            else
            {
              uint64_t v212 = v163 + v211;
              if (*(void *)(v163 + v211) == v209)
              {
                uint64_t v213 = (char *)(v177 + 9);
                unint64_t v214 = (_DWORD *)(v212 + 8);
                if (v641 <= (unint64_t)(v177 + 9))
                {
                  long long v251 = v177 + 9;
                  unint64_t v9 = v681;
                  if ((unint64_t)v213 < v625)
                  {
LABEL_367:
                    if (*v214 == *(_DWORD *)v251)
                    {
                      v251 += 4;
                      ++v214;
                    }
                  }
                }
                else
                {
                  unint64_t v215 = *(void *)v213 ^ *(void *)v214;
                  unint64_t v9 = v681;
                  if (v215)
                  {
                    uint64_t v200 = (__clz(__rbit64(v215)) >> 3) + 8;
                    uint64_t v201 = (v190 - v212);
                    if ((unint64_t)v190 <= v5) {
                      goto LABEL_395;
                    }
LABEL_378:
                    uint64_t v252 = (unsigned __int8 *)(v617 + v211);
                    while (*v177 == *v252)
                    {
                      ++v200;
                      v224 = v177 - 1;
                      if ((unint64_t)v177 > v5)
                      {
                        --v177;
                        BOOL v55 = v252-- > v171;
                        if (v55) {
                          continue;
                        }
                      }
                      goto LABEL_382;
                    }
LABEL_385:
                    __int16 v190 = v177 + 1;
                    goto LABEL_395;
                  }
                  uint64_t v283 = 0;
                  unint64_t v284 = v177 + 17;
                  while (1)
                  {
                    unint64_t v285 = &v284[v283];
                    if ((unint64_t)&v284[v283] >= v641) {
                      break;
                    }
                    uint64_t v286 = *(void *)(v609 + v211 + v283);
                    v283 += 8;
                    unint64_t v287 = *(void *)v285 ^ v286;
                    if (v287)
                    {
                      uint64_t v200 = v283 + (__clz(__rbit64(v287)) >> 3) + 8;
                      uint64_t v201 = (v190 - v212);
                      if ((unint64_t)v190 > v5) {
                        goto LABEL_378;
                      }
                      goto LABEL_395;
                    }
                  }
                  long long v251 = &v177[v283 + 17];
                  unint64_t v214 = (_DWORD *)(v609 + v211 + v283);
                  if ((unint64_t)v251 < v625) {
                    goto LABEL_367;
                  }
                }
                if ((unint64_t)v251 >= v621)
                {
                  if ((unint64_t)v251 >= v9) {
                    goto LABEL_377;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v214 == *(unsigned __int16 *)v251)
                  {
                    v251 += 2;
                    unint64_t v214 = (_DWORD *)((char *)v214 + 2);
                  }
                  if ((unint64_t)v251 >= v9)
                  {
LABEL_377:
                    uint64_t v200 = v251 - (unsigned __int8 *)v213 + 8;
                    uint64_t v201 = (v190 - v212);
                    if ((unint64_t)v190 <= v5) {
                      goto LABEL_395;
                    }
                    goto LABEL_378;
                  }
                }
                if (*(unsigned __int8 *)v214 == *v251) {
                  ++v251;
                }
                goto LABEL_377;
              }
            }
            uint64_t v228 = v177 + 4;
            unint64_t v229 = (char *)(v207 + 4);
            if (v186 < v170)
            {
              unint64_t v9 = v681;
              unint64_t v230 = v207;
              uint64_t v200 = ZSTD_count_2segments(v228, v229, v681, v175, v171) + 4;
              int v184 = v177 - v163;
              uint64_t v201 = (v177 - v163 - v186);
              if (v230 > v613)
              {
                unint64_t v178 = v677;
                if ((unint64_t)v177 > v5)
                {
                  long long v204 = v177 - 1;
                  uint64_t v231 = (unsigned __int8 *)(v230 - 1);
                  uint64_t v171 = (unsigned __int8 *)(v163 + v170);
                  long long v175 = v669;
                  unint64_t v172 = v673;
                  while (*v204 == *v231)
                  {
                    ++v200;
                    v206 = v204 - 1;
                    if ((unint64_t)v231 > v613)
                    {
                      --v231;
                      BOOL v55 = (unint64_t)v204-- > v5;
                      if (v55) {
                        continue;
                      }
                    }
                    goto LABEL_364;
                  }
                  goto LABEL_365;
                }
                __int16 v190 = v177;
                uint64_t v171 = (unsigned __int8 *)(v163 + v170);
                long long v175 = v669;
                unint64_t v172 = v673;
                goto LABEL_395;
              }
              goto LABEL_337;
            }
            unint64_t v9 = v681;
            if (v641 <= (unint64_t)v228)
            {
              uint64_t v249 = v177 + 4;
              if ((unint64_t)v228 < v625)
              {
LABEL_348:
                if (*(_DWORD *)v229 == *(_DWORD *)v249)
                {
                  v249 += 4;
                  v229 += 4;
                }
              }
            }
            else
            {
              unint64_t v243 = *v228 ^ *(void *)v229;
              if (v243)
              {
                uint64_t v200 = (__clz(__rbit64(v243)) >> 3) + 4;
                uint64_t v201 = (v177 - v207);
                if (v207 <= (unint64_t)v171) {
                  goto LABEL_394;
                }
LABEL_359:
                if ((unint64_t)v177 > v5)
                {
                  long long v204 = v177 - 1;
                  unint64_t v250 = (unsigned __int8 *)(v207 - 1);
                  while (*v204 == *v250)
                  {
                    ++v200;
                    v206 = v204 - 1;
                    if (v250 > v171)
                    {
                      --v250;
                      BOOL v55 = (unint64_t)v204-- > v5;
                      if (v55) {
                        continue;
                      }
                    }
                    goto LABEL_364;
                  }
                  goto LABEL_365;
                }
                goto LABEL_394;
              }
              uint64_t v254 = 0;
              uint64_t v255 = v177 + 12;
              while (1)
              {
                char v256 = &v255[v254];
                if ((unint64_t)&v255[v254] >= v641) {
                  break;
                }
                uint64_t v257 = *(void *)(v207 + 12 + v254);
                v254 += 8;
                unint64_t v258 = *(void *)v256 ^ v257;
                if (v258)
                {
                  uint64_t v200 = v254 + (__clz(__rbit64(v258)) >> 3) + 4;
                  uint64_t v201 = (v177 - v207);
                  if (v207 > (unint64_t)v171) {
                    goto LABEL_359;
                  }
                  goto LABEL_394;
                }
              }
              uint64_t v249 = &v177[v254 + 12];
              unint64_t v229 = (char *)(v207 + v254 + 12);
              if ((unint64_t)v249 < v625) {
                goto LABEL_348;
              }
            }
            if ((unint64_t)v249 >= v621)
            {
              if ((unint64_t)v249 < v681) {
                goto LABEL_356;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v229 == *(unsigned __int16 *)v249)
              {
                v249 += 2;
                v229 += 2;
              }
              if ((unint64_t)v249 >= v681) {
                goto LABEL_358;
              }
LABEL_356:
              if (*v229 == *v249) {
                ++v249;
              }
            }
LABEL_358:
            uint64_t v200 = v249 - v177;
            uint64_t v201 = (v177 - v207);
            if (v207 > (unint64_t)v171) {
              goto LABEL_359;
            }
LABEL_394:
            __int16 v190 = v177;
            goto LABEL_395;
          }
        }
      }
      else
      {
        unint64_t v207 = v163 + v186;
        if (*(_DWORD *)(v163 + v186) == *(_DWORD *)v177) {
          goto LABEL_277;
        }
      }
      _X8 = &v177[(uint64_t)&v177[-v5] >> 8];
      v177 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      unint64_t v9 = v681;
LABEL_245:
      uint64_t v176 = v661;
      if ((unint64_t)v177 >= v172)
      {
LABEL_690:
        a3 = v628;
        goto LABEL_691;
      }
    }
    unint64_t v9 = v681;
    if (v188 >= v170) {
      long long v175 = (char *)v681;
    }
    unint64_t v191 = ZSTD_count_2segments(v177 + 5, (char *)(v189 + 4), v681, v175, v171);
    unint64_t v178 = v677;
    unint64_t v192 = (unint64_t)&v190[-v5];
    uint64_t v193 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v190 <= v677)
    {
      *uint64_t v193 = *(_OWORD *)v5;
      uint64_t v218 = *(void *)(a2 + 24);
      if (v192 <= 0x10)
      {
        *(void *)(a2 + 24) = v218 + v192;
        uint64_t v240 = *(void *)(a2 + 8);
        uint64_t v171 = (unsigned __int8 *)(v163 + v170);
        long long v175 = v669;
        unint64_t v172 = v673;
        int v184 = v177 - v163;
        goto LABEL_335;
      }
      unint64_t v219 = (_OWORD *)(v218 + 16);
      unint64_t v220 = v218 + v192;
      uint64_t v221 = (long long *)(v5 + 16);
      uint64_t v171 = (unsigned __int8 *)(v163 + v170);
      long long v175 = v669;
      unint64_t v172 = v673;
      int v184 = v177 - v163;
      do
      {
        long long v222 = *v221++;
        *v219++ = v222;
      }
      while ((unint64_t)v219 < v220);
    }
    else
    {
      if (v5 <= v677)
      {
        uint64_t v195 = (char *)v193 + v677 - v5;
        unint64_t v232 = (long long *)v5;
        unint64_t v233 = *(_OWORD **)(a2 + 24);
        uint64_t v171 = (unsigned __int8 *)(v163 + v170);
        long long v175 = v669;
        unint64_t v172 = v673;
        int v184 = v177 - v163;
        do
        {
          long long v234 = *v232++;
          *v233++ = v234;
        }
        while (v233 < (_OWORD *)v195);
        unint64_t v194 = v677;
        if (v677 >= (unint64_t)v190) {
          goto LABEL_332;
        }
      }
      else
      {
        unint64_t v194 = v5;
        uint64_t v195 = *(unsigned char **)(a2 + 24);
        uint64_t v171 = (unsigned __int8 *)(v163 + v170);
        long long v175 = v669;
        unint64_t v172 = v673;
        int v184 = v177 - v163;
        if (v5 >= (unint64_t)v190) {
          goto LABEL_332;
        }
      }
      if (v5 <= v677) {
        unint64_t v235 = v677;
      }
      else {
        unint64_t v235 = v5;
      }
      unint64_t v236 = (unint64_t)&v177[-v235 + 1];
      if (v236 < 8 || (unint64_t)v193 - v5 < 0x20)
      {
        unint64_t v237 = (char *)v194;
        goto LABEL_330;
      }
      if (v236 >= 0x20)
      {
        unint64_t v253 = v236 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v288 = (long long *)(v194 + 16);
        uint64_t v289 = (_OWORD *)((char *)v193 + v235 - v5 + 16);
        unint64_t v290 = v236 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v291 = *v288;
          *(v289 - 1) = *(v288 - 1);
          *uint64_t v289 = v291;
          v288 += 2;
          v289 += 2;
          v290 -= 32;
        }
        while (v290);
        if (v236 == v253) {
          goto LABEL_332;
        }
        if ((v236 & 0x18) == 0)
        {
          unint64_t v237 = (char *)(v194 + v253);
          v195 += v253;
LABEL_330:
          uint64_t v238 = (char *)(v236 + v194);
          do
          {
            char v239 = *v237++;
            *v195++ = v239;
          }
          while (v237 != v238);
          goto LABEL_332;
        }
      }
      else
      {
        unint64_t v253 = 0;
      }
      v195 += v236 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v237 = (char *)(v194 + (v236 & 0xFFFFFFFFFFFFFFF8));
      v292 = (uint64_t *)(v194 + v253);
      unint64_t v293 = (void *)((char *)v193 + v253 + v235 - v5);
      unint64_t v294 = v253 - (v236 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v295 = *v292++;
        *v293++ = v295;
        v294 += 8;
      }
      while (v294);
      if (v236 != (v236 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_330;
      }
    }
LABEL_332:
    *(void *)(a2 + 24) += v192;
    uint64_t v240 = *(void *)(a2 + 8);
    if (v192 >= 0x10000)
    {
      unint64_t v241 = (unint64_t)(v240 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v241;
    }
LABEL_335:
    uint64_t v200 = v191 + 4;
    __int16 v242 = v191 + 1;
    *(_WORD *)(v240 + 4) = v192;
    *(_DWORD *)uint64_t v240 = 1;
    uint64_t v201 = v19;
    if ((v191 + 1) >> 16) {
      goto LABEL_446;
    }
    goto LABEL_447;
  }
  if (v7 != 6)
  {
    if (v7 == 7)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      unint64_t v9 = a4 + a5;
      int v10 = a4 + a5 - v8;
      unsigned int v11 = *(_DWORD *)(a1 + 24);
      unsigned int v12 = 1 << *(_DWORD *)(a1 + 192);
      unsigned int v13 = v10 - v11;
      unsigned int v14 = v10 - v12;
      if (v13 > v12 && *(_DWORD *)(a1 + 32) == 0) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v11;
      }
      uint64_t v17 = (unsigned __int8 *)(v8 + v16);
      unint64_t v18 = v9 - 8;
      uint64_t v19 = *a3;
      uint64_t v20 = a3[1];
      uint64_t v21 = *(void *)(a1 + 184);
      uint64_t v22 = *(unsigned int *)(v21 + 24);
      uint64_t v23 = *(char **)v21;
      uint64_t v24 = *(void *)(v21 + 8);
      if (v5 - (v24 + v22) - (v8 + v16) + *(void *)v21) {
        uint64_t v25 = (unsigned __int8 *)v5;
      }
      else {
        uint64_t v25 = (unsigned __int8 *)(v5 + 1);
      }
      if ((unint64_t)v25 < v18)
      {
        unint64_t v616 = v24 + v22;
        unsigned int v652 = *(_DWORD *)(v21 + 24);
        v628 = a3;
        uint64_t v696 = *(void *)(a1 + 48);
        uint64_t v688 = *(void *)(a1 + 64);
        uint64_t v648 = *(void *)(v21 + 48);
        int v692 = 64 - *(_DWORD *)(a1 + 200);
        int v684 = 64 - *(_DWORD *)(a1 + 196);
        int v638 = 64 - *(_DWORD *)(v21 + 196);
        unint64_t v640 = v9 - 7;
        int v644 = 64 - *(_DWORD *)(v21 + 200);
        unint64_t v26 = v9 - 32;
        unsigned int v656 = v16 + v24 - v23;
        uint64_t v664 = v24 - v656;
        unint64_t v630 = v9 - 3;
        uint64_t v634 = *(void *)(v21 + 64);
        uint64_t v608 = v24 - 1;
        uint64_t v612 = v8 + 16;
        uint64_t v620 = v8 - 1;
        unint64_t v624 = v9 - 1;
        uint64_t v668 = *(char **)v21;
        unint64_t v672 = v9 - 8;
        unint64_t v676 = v9 - 32;
        unint64_t v680 = v9;
        uint64_t v660 = *(void *)(v21 + 8);
        while (1)
        {
          uint64_t v27 = *(void *)v25;
          unint64_t v28 = 0xCF1BBCDCB7A56463 * *(void *)v25;
          unint64_t v29 = 0xCF1BBCDCBFA56300 * *(void *)v25;
          uint64_t v30 = 4 * (v28 >> v692);
          uint64_t v31 = *(unsigned int *)(v696 + v30);
          int v32 = v25 - v8;
          uint64_t v33 = 4 * (v29 >> v684);
          uint64_t v34 = *(unsigned int *)(v688 + v33);
          int v35 = v25 - v8 + 1;
          uint64_t v36 = (v35 - v19);
          *(_DWORD *)(v688 + v33) = v25 - v8;
          uint64_t v37 = v36 >= v16 ? v8 + v36 : v24 + v36 - v656;
          *(_DWORD *)(v696 + v30) = v32;
          if ((v16 + ~v36) >= 3)
          {
            unint64_t v38 = v25 + 1;
            if (*(_DWORD *)v37 == *(_DWORD *)(v25 + 1)) {
              break;
            }
          }
          if (v31 <= v16)
          {
            uint64_t v50 = *(unsigned int *)(v648 + 4 * (v28 >> v644));
            if (v50 > v652 && *(void *)(v660 + v50) == v27)
            {
              unint64_t v9 = v680;
              unint64_t v51 = ZSTD_count_2segments((void *)v25 + 1, (char *)(v660 + v50 + 8), v680, v23, v17);
              int v32 = v25 - v8;
              uint64_t v48 = v51 + 8;
              uint64_t v49 = v25 - v8 - v656 - v50;
              if ((unint64_t)v25 > v5)
              {
                unsigned int v52 = v25 - 1;
                BOOL v53 = (unsigned __int8 *)(v608 + v50);
                uint64_t v17 = (unsigned __int8 *)(v8 + v16);
                unint64_t v26 = v676;
                uint64_t v23 = v668;
                unint64_t v18 = v672;
                while (*v52 == *v53)
                {
                  ++v48;
                  uint64_t v54 = v52 - 1;
                  if ((unint64_t)v53 > v616)
                  {
                    --v53;
                    BOOL v55 = (unint64_t)v52-- > v5;
                    if (v55) {
                      continue;
                    }
                  }
LABEL_136:
                  unint64_t v38 = v54 + 1;
                  goto LABEL_166;
                }
LABEL_137:
                unint64_t v38 = v52 + 1;
LABEL_166:
                unint64_t v112 = (unint64_t)&v38[-v5];
                unint64_t v113 = *(_OWORD **)(a2 + 24);
                if ((unint64_t)v38 > v26)
                {
                  if (v5 <= v26)
                  {
                    int v115 = (char *)v113 + v26 - v5;
                    unint64_t v121 = (long long *)v5;
                    uint64_t v122 = *(_OWORD **)(a2 + 24);
                    do
                    {
                      long long v123 = *v121++;
                      *v122++ = v123;
                    }
                    while (v122 < (_OWORD *)v115);
                    unint64_t v114 = v26;
                    if (v26 >= (unint64_t)v38) {
                      goto LABEL_214;
                    }
                  }
                  else
                  {
                    unint64_t v114 = v5;
                    int v115 = *(unsigned char **)(a2 + 24);
                    if (v5 >= (unint64_t)v38)
                    {
LABEL_214:
                      *(void *)(a2 + 24) += v112;
                      uint64_t v93 = *(void *)(a2 + 8);
                      if (v112 >= 0x10000)
                      {
                        unint64_t v150 = (unint64_t)(v93 - *(void *)a2) >> 3;
                        *(_DWORD *)(a2 + 72) = 1;
                        *(_DWORD *)(a2 + 76) = v150;
                      }
                      goto LABEL_216;
                    }
                  }
                  if (v5 <= v26) {
                    unint64_t v124 = v26;
                  }
                  else {
                    unint64_t v124 = v5;
                  }
                  unint64_t v125 = (unint64_t)&v38[-v124];
                  if ((unint64_t)&v38[-v124] < 8)
                  {
                    unint64_t v126 = (unsigned __int8 *)v114;
                    goto LABEL_213;
                  }
                  if ((unint64_t)v113 - v5 < 0x20)
                  {
                    unint64_t v126 = (unsigned __int8 *)v114;
                    goto LABEL_213;
                  }
                  if (v125 >= 0x20)
                  {
                    unint64_t v127 = v125 & 0xFFFFFFFFFFFFFFE0;
                    v128 = (long long *)(v114 + 16);
                    int v129 = (_OWORD *)((char *)v113 + v124 - v5 + 16);
                    unint64_t v130 = v125 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v131 = *v128;
                      *(v129 - 1) = *(v128 - 1);
                      *int v129 = v131;
                      v128 += 2;
                      v129 += 2;
                      v130 -= 32;
                    }
                    while (v130);
                    if (v125 == v127) {
                      goto LABEL_214;
                    }
                    if ((v125 & 0x18) == 0)
                    {
                      unint64_t v126 = (unsigned __int8 *)(v114 + v127);
                      v115 += v127;
                      do
                      {
LABEL_213:
                        char v149 = *v126++;
                        *v115++ = v149;
                      }
                      while (v126 < v38);
                      goto LABEL_214;
                    }
                  }
                  else
                  {
                    unint64_t v127 = 0;
                  }
                  v115 += v125 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v126 = (unsigned __int8 *)(v114 + (v125 & 0xFFFFFFFFFFFFFFF8));
                  char v132 = (uint64_t *)(v114 + v127);
                  unint64_t v133 = (void *)((char *)v113 + v127 + v124 - v5);
                  unint64_t v134 = v127 - (v125 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v135 = *v132++;
                    *v133++ = v135;
                    v134 += 8;
                  }
                  while (v134);
                  if (v125 == (v125 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_214;
                  }
                  goto LABEL_213;
                }
                *unint64_t v113 = *(_OWORD *)v5;
                uint64_t v116 = *(void *)(a2 + 24);
                if (v112 > 0x10)
                {
                  unint64_t v117 = (_OWORD *)(v116 + 16);
                  unint64_t v118 = v116 + v112;
                  v119 = (long long *)(v5 + 16);
                  do
                  {
                    long long v120 = *v119++;
                    *v117++ = v120;
                  }
                  while ((unint64_t)v117 < v118);
                  goto LABEL_214;
                }
                *(void *)(a2 + 24) = v116 + v112;
                uint64_t v93 = *(void *)(a2 + 8);
LABEL_216:
                __int16 v95 = v48 - 3;
                *(_WORD *)(v93 + 4) = v112;
                *(_DWORD *)uint64_t v93 = v49 + 3;
                uint64_t v20 = v19;
                uint64_t v19 = v49;
                if ((unint64_t)(v48 - 3) >= 0x10000)
                {
LABEL_217:
                  unint64_t v151 = (unint64_t)(v93 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v151;
                  uint64_t v19 = v49;
                }
LABEL_218:
                *(_WORD *)(v93 + 6) = v95;
                uint64_t v152 = v93 + 8;
                *(void *)(a2 + 8) = v93 + 8;
                unint64_t v5 = (unint64_t)&v38[v48];
                if ((unint64_t)&v38[v48] <= v18)
                {
                  uint64_t v153 = *(void *)(v8 + (v32 + 2));
                  *(_DWORD *)(v696 + 4 * ((0xCF1BBCDCB7A56463 * v153) >> v692)) = v32 + 2;
                  *(_DWORD *)(v696 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v5 - 2)) >> v692)) = v5 - 2 - v8;
                  *(_DWORD *)(v688 + 4 * ((0xCF1BBCDCBFA56300 * v153) >> v684)) = v32 + 2;
                  *(_DWORD *)(v688 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v5 - 1)) >> v684)) = v5 - 1 - v8;
                  uint64_t v154 = v19;
                  uint64_t v155 = v20;
                  while (1)
                  {
                    uint64_t v19 = v155;
                    uint64_t v155 = v154;
                    int v157 = v5 - v8;
                    uint64_t v158 = (v5 - v8 - v19);
                    uint64_t v159 = v664;
                    if (v158 >= v16) {
                      uint64_t v159 = v8;
                    }
                    if ((v16 + ~v158) < 3) {
                      break;
                    }
                    uint64_t v160 = v159 + v158;
                    if (*(_DWORD *)v160 != *(_DWORD *)v5) {
                      break;
                    }
                    if (v158 >= v16) {
                      uint64_t v23 = (char *)v9;
                    }
                    unint64_t v161 = ZSTD_count_2segments((void *)(v5 + 4), (char *)(v160 + 4), v9, v23, v17);
                    unint64_t v26 = v676;
                    if (v5 <= v676)
                    {
                      *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
                      uint64_t v152 = *(void *)(a2 + 8);
                    }
                    *(_WORD *)(v152 + 4) = 0;
                    *(_DWORD *)uint64_t v152 = 1;
                    unint64_t v18 = v672;
                    if (v161 + 1 >= 0x10000)
                    {
                      unint64_t v162 = (unint64_t)(v152 - *(void *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 2;
                      *(_DWORD *)(a2 + 76) = v162;
                    }
                    *(_WORD *)(v152 + 6) = v161 + 1;
                    v152 += 8;
                    uint64_t v156 = *(void *)v5;
                    *(_DWORD *)(v688 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)v5) >> v684)) = v157;
                    *(_DWORD *)(v696 + 4 * ((0xCF1BBCDCB7A56463 * v156) >> v692)) = v157;
                    v5 += v161 + 4;
                    *(void *)(a2 + 8) = v152;
                    uint64_t v154 = v19;
                    uint64_t v20 = v155;
                    uint64_t v25 = (unsigned __int8 *)v5;
                    uint64_t v17 = (unsigned __int8 *)(v8 + v16);
                    uint64_t v23 = v668;
                    if (v5 > v672) {
                      goto LABEL_17;
                    }
                  }
                  uint64_t v20 = v19;
                  uint64_t v19 = v154;
                }
                uint64_t v25 = (unsigned __int8 *)v5;
                goto LABEL_17;
              }
LABEL_93:
              unint64_t v38 = v25;
              uint64_t v17 = (unsigned __int8 *)(v8 + v16);
              unint64_t v26 = v676;
              uint64_t v23 = v668;
              unint64_t v18 = v672;
              goto LABEL_166;
            }
          }
          else
          {
            uint64_t v44 = v8 + v31;
            if (*(void *)(v8 + v31) == v27)
            {
              unint64_t v45 = v25 + 8;
              v46 = (_DWORD *)(v44 + 8);
              if (v640 <= (unint64_t)(v25 + 8))
              {
                unint64_t v75 = v25 + 8;
                if ((unint64_t)v45 < v630)
                {
LABEL_61:
                  if (*v46 == *(_DWORD *)v75)
                  {
                    v75 += 4;
                    ++v46;
                  }
                }
              }
              else
              {
                unint64_t v47 = *v45 ^ *(void *)v46;
                if (v47)
                {
                  unint64_t v9 = v680;
                  uint64_t v48 = (__clz(__rbit64(v47)) >> 3) + 8;
                  uint64_t v49 = (v25 - v44);
                  if ((unint64_t)v25 <= v5) {
                    goto LABEL_165;
                  }
                  goto LABEL_72;
                }
                uint64_t v97 = 0;
                long long v98 = v25 + 16;
                unint64_t v9 = v680;
                while (1)
                {
                  v99 = &v98[v97];
                  if ((unint64_t)&v98[v97] >= v640) {
                    break;
                  }
                  uint64_t v100 = *(void *)(v612 + v31 + v97);
                  v97 += 8;
                  unint64_t v101 = *(void *)v99 ^ v100;
                  if (v101)
                  {
                    uint64_t v48 = v97 + (__clz(__rbit64(v101)) >> 3) + 8;
                    uint64_t v49 = (v25 - v44);
                    if ((unint64_t)v25 > v5) {
                      goto LABEL_72;
                    }
                    goto LABEL_165;
                  }
                }
                unint64_t v75 = &v25[v97 + 16];
                v46 = (_DWORD *)(v612 + v31 + v97);
                if ((unint64_t)v75 < v630) {
                  goto LABEL_61;
                }
              }
              unint64_t v9 = v680;
              if ((unint64_t)v75 >= v624)
              {
                if ((unint64_t)v75 >= v680) {
                  goto LABEL_71;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v46 == *(unsigned __int16 *)v75)
                {
                  v75 += 2;
                  v46 = (_DWORD *)((char *)v46 + 2);
                }
                if ((unint64_t)v75 >= v680)
                {
LABEL_71:
                  uint64_t v48 = v75 - v25;
                  uint64_t v49 = (v25 - v44);
                  if ((unint64_t)v25 <= v5) {
                    goto LABEL_165;
                  }
LABEL_72:
                  uint64_t v76 = v25 - 1;
                  unsigned int v77 = (unsigned __int8 *)(v620 + v31);
                  while (*v76 == *v77)
                  {
                    ++v48;
                    uint64_t v54 = v76 - 1;
                    if (v77 > v17)
                    {
                      --v77;
                      BOOL v55 = (unint64_t)v76-- > v5;
                      if (v55) {
                        continue;
                      }
                    }
                    goto LABEL_136;
                  }
LABEL_154:
                  unint64_t v38 = v76 + 1;
                  goto LABEL_166;
                }
              }
              if (*(unsigned __int8 *)v46 == *v75) {
                ++v75;
              }
              goto LABEL_71;
            }
          }
          if (v34 <= v16)
          {
            uint64_t v57 = *(unsigned int *)(v634 + 4 * (v29 >> v638));
            if (v57 > v652)
            {
              unint64_t v56 = v660 + v57;
              if (*(_DWORD *)(v660 + v57) == *(_DWORD *)v25)
              {
                LODWORD(v34) = v57 + v656;
LABEL_49:
                unint64_t v38 = v25 + 1;
                uint64_t v58 = *(void *)(v25 + 1);
                unint64_t v59 = 4 * ((0xCF1BBCDCB7A56463 * v58) >> v692);
                uint64_t v60 = *(unsigned int *)(v696 + v59);
                *(_DWORD *)(v696 + v59) = v35;
                if (v60 <= v16)
                {
                  uint64_t v78 = *(unsigned int *)(v648 + 4 * ((0xCF1BBCDCB7A56463 * v58) >> v644));
                  if (v78 > v652 && *(void *)(v660 + v78) == v58)
                  {
                    uint64_t v48 = ZSTD_count_2segments(v25 + 9, (char *)(v660 + v78 + 8), v680, v23, v17) + 8;
                    uint64_t v49 = v35 - v656 - v78;
                    if ((unint64_t)v38 <= v5)
                    {
                      unint64_t v26 = v676;
                      unint64_t v9 = v680;
                      uint64_t v17 = (unsigned __int8 *)(v8 + v16);
                      uint64_t v23 = v668;
                      unint64_t v18 = v672;
                      int v32 = v25 - v8;
                      goto LABEL_166;
                    }
                    unsigned int v79 = (unsigned __int8 *)(v608 + v78);
                    unint64_t v26 = v676;
                    unint64_t v9 = v680;
                    uint64_t v17 = (unsigned __int8 *)(v8 + v16);
                    uint64_t v23 = v668;
                    unint64_t v18 = v672;
                    int v32 = v25 - v8;
                    while (*v25 == *v79)
                    {
                      ++v48;
                      uint64_t v76 = v25 - 1;
                      if ((unint64_t)v25 > v5)
                      {
                        --v25;
                        BOOL v55 = (unint64_t)v79-- > v616;
                        if (v55) {
                          continue;
                        }
                      }
                      goto LABEL_154;
                    }
                    goto LABEL_157;
                  }
                }
                else
                {
                  uint64_t v61 = v8 + v60;
                  if (*(void *)(v8 + v60) == v58)
                  {
                    v62 = (char *)(v25 + 9);
                    char v63 = (_DWORD *)(v61 + 8);
                    if (v640 <= (unint64_t)(v25 + 9))
                    {
                      v104 = v25 + 9;
                      unint64_t v9 = v680;
                      if ((unint64_t)v62 < v630)
                      {
LABEL_139:
                        if (*v63 == *(_DWORD *)v104)
                        {
                          v104 += 4;
                          ++v63;
                        }
                      }
                    }
                    else
                    {
                      unint64_t v64 = *(void *)v62 ^ *(void *)v63;
                      if (v64)
                      {
                        unint64_t v9 = v680;
                        uint64_t v48 = (__clz(__rbit64(v64)) >> 3) + 8;
                        uint64_t v49 = (v38 - v61);
                        if ((unint64_t)v38 <= v5) {
                          goto LABEL_166;
                        }
LABEL_150:
                        unint64_t v105 = (unsigned __int8 *)(v620 + v60);
                        while (*v25 == *v105)
                        {
                          ++v48;
                          uint64_t v76 = v25 - 1;
                          if ((unint64_t)v25 > v5)
                          {
                            --v25;
                            BOOL v55 = v105-- > v17;
                            if (v55) {
                              continue;
                            }
                          }
                          goto LABEL_154;
                        }
LABEL_157:
                        unint64_t v38 = v25 + 1;
                        goto LABEL_166;
                      }
                      uint64_t v136 = 0;
                      uint64_t v137 = v25 + 17;
                      unint64_t v9 = v680;
                      while (1)
                      {
                        uint64_t v138 = &v137[v136];
                        if ((unint64_t)&v137[v136] >= v640) {
                          break;
                        }
                        uint64_t v139 = *(void *)(v612 + v60 + v136);
                        v136 += 8;
                        unint64_t v140 = *(void *)v138 ^ v139;
                        if (v140)
                        {
                          uint64_t v48 = v136 + (__clz(__rbit64(v140)) >> 3) + 8;
                          uint64_t v49 = (v38 - v61);
                          if ((unint64_t)v38 > v5) {
                            goto LABEL_150;
                          }
                          goto LABEL_166;
                        }
                      }
                      v104 = &v25[v136 + 17];
                      char v63 = (_DWORD *)(v612 + v60 + v136);
                      if ((unint64_t)v104 < v630) {
                        goto LABEL_139;
                      }
                    }
                    if ((unint64_t)v104 >= v624)
                    {
                      if ((unint64_t)v104 >= v9) {
                        goto LABEL_149;
                      }
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v63 == *(unsigned __int16 *)v104)
                      {
                        v104 += 2;
                        char v63 = (_DWORD *)((char *)v63 + 2);
                      }
                      if ((unint64_t)v104 >= v9)
                      {
LABEL_149:
                        uint64_t v48 = v104 - (unsigned __int8 *)v62 + 8;
                        uint64_t v49 = (v38 - v61);
                        if ((unint64_t)v38 <= v5) {
                          goto LABEL_166;
                        }
                        goto LABEL_150;
                      }
                    }
                    if (*(unsigned __int8 *)v63 == *v104) {
                      ++v104;
                    }
                    goto LABEL_149;
                  }
                }
                long long v80 = v25 + 4;
                unsigned int v81 = (char *)(v56 + 4);
                if (v34 < v16)
                {
                  unint64_t v9 = v680;
                  unint64_t v82 = v56;
                  unint64_t v83 = ZSTD_count_2segments(v80, v81, v680, v23, v17);
                  int v32 = v25 - v8;
                  uint64_t v48 = v83 + 4;
                  uint64_t v49 = (v25 - v8 - v34);
                  if (v82 > v616 && (unint64_t)v25 > v5)
                  {
                    unsigned int v52 = v25 - 1;
                    unint64_t v84 = (unsigned __int8 *)(v82 - 1);
                    uint64_t v17 = (unsigned __int8 *)(v8 + v16);
                    unint64_t v26 = v676;
                    uint64_t v23 = v668;
                    unint64_t v18 = v672;
                    while (*v52 == *v84)
                    {
                      ++v48;
                      uint64_t v54 = v52 - 1;
                      if ((unint64_t)v84 > v616)
                      {
                        --v84;
                        BOOL v55 = (unint64_t)v52-- > v5;
                        if (v55) {
                          continue;
                        }
                      }
                      goto LABEL_136;
                    }
                    goto LABEL_137;
                  }
                  goto LABEL_93;
                }
                if (v640 <= (unint64_t)v80)
                {
                  unint64_t v102 = v25 + 4;
                  if ((unint64_t)v80 < v630)
                  {
LABEL_120:
                    if (*(_DWORD *)v81 == *(_DWORD *)v102)
                    {
                      v102 += 4;
                      v81 += 4;
                    }
                  }
                }
                else
                {
                  unint64_t v96 = *v80 ^ *(void *)v81;
                  if (v96)
                  {
                    unint64_t v9 = v680;
                    uint64_t v48 = (__clz(__rbit64(v96)) >> 3) + 4;
                    uint64_t v49 = (v25 - v56);
                    if (v56 <= (unint64_t)v17) {
                      goto LABEL_165;
                    }
LABEL_131:
                    if ((unint64_t)v25 > v5)
                    {
                      unsigned int v52 = v25 - 1;
                      unint64_t v103 = (unsigned __int8 *)(v56 - 1);
                      while (*v52 == *v103)
                      {
                        ++v48;
                        uint64_t v54 = v52 - 1;
                        if (v103 > v17)
                        {
                          --v103;
                          BOOL v55 = (unint64_t)v52-- > v5;
                          if (v55) {
                            continue;
                          }
                        }
                        goto LABEL_136;
                      }
                      goto LABEL_137;
                    }
                    goto LABEL_165;
                  }
                  uint64_t v107 = 0;
                  unsigned int v108 = v25 + 12;
                  unint64_t v9 = v680;
                  while (1)
                  {
                    unint64_t v109 = &v108[v107];
                    if ((unint64_t)&v108[v107] >= v640) {
                      break;
                    }
                    uint64_t v110 = *(void *)(v56 + 12 + v107);
                    v107 += 8;
                    unint64_t v111 = *(void *)v109 ^ v110;
                    if (v111)
                    {
                      uint64_t v48 = v107 + (__clz(__rbit64(v111)) >> 3) + 4;
                      uint64_t v49 = (v25 - v56);
                      if (v56 > (unint64_t)v17) {
                        goto LABEL_131;
                      }
                      goto LABEL_165;
                    }
                  }
                  unint64_t v102 = &v25[v107 + 12];
                  unsigned int v81 = (char *)(v56 + v107 + 12);
                  if ((unint64_t)v102 < v630) {
                    goto LABEL_120;
                  }
                }
                unint64_t v9 = v680;
                if ((unint64_t)v102 >= v624)
                {
                  if ((unint64_t)v102 < v680) {
                    goto LABEL_128;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v81 == *(unsigned __int16 *)v102)
                  {
                    v102 += 2;
                    v81 += 2;
                  }
                  if ((unint64_t)v102 >= v680) {
                    goto LABEL_130;
                  }
LABEL_128:
                  if (*v81 == *v102) {
                    ++v102;
                  }
                }
LABEL_130:
                uint64_t v48 = v102 - v25;
                uint64_t v49 = (v25 - v56);
                if (v56 > (unint64_t)v17) {
                  goto LABEL_131;
                }
LABEL_165:
                unint64_t v38 = v25;
                goto LABEL_166;
              }
            }
          }
          else
          {
            unint64_t v56 = v8 + v34;
            if (*(_DWORD *)(v8 + v34) == *(_DWORD *)v25) {
              goto LABEL_49;
            }
          }
          _X8 = &v25[(uint64_t)&v25[-v5] >> 8];
          uint64_t v25 = _X8 + 1;
          _X8 += 257;
          __asm { PRFM            #0, [X8] }
          unint64_t v9 = v680;
LABEL_17:
          uint64_t v24 = v660;
          if ((unint64_t)v25 >= v18) {
            goto LABEL_690;
          }
        }
        unint64_t v9 = v680;
        if (v36 >= v16) {
          uint64_t v23 = (char *)v680;
        }
        unint64_t v39 = ZSTD_count_2segments(v25 + 5, (char *)(v37 + 4), v680, v23, v17);
        unint64_t v26 = v676;
        unint64_t v40 = (unint64_t)&v38[-v5];
        int v41 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v38 <= v676)
        {
          *int v41 = *(_OWORD *)v5;
          uint64_t v70 = *(void *)(a2 + 24);
          if (v40 <= 0x10)
          {
            *(void *)(a2 + 24) = v70 + v40;
            uint64_t v93 = *(void *)(a2 + 8);
            uint64_t v17 = (unsigned __int8 *)(v8 + v16);
            uint64_t v23 = v668;
            unint64_t v18 = v672;
            int v32 = v25 - v8;
            goto LABEL_108;
          }
          uint64_t v71 = (_OWORD *)(v70 + 16);
          unint64_t v72 = v70 + v40;
          uint64_t v73 = (long long *)(v5 + 16);
          uint64_t v17 = (unsigned __int8 *)(v8 + v16);
          uint64_t v23 = v668;
          unint64_t v18 = v672;
          int v32 = v25 - v8;
          do
          {
            long long v74 = *v73++;
            *v71++ = v74;
          }
          while ((unint64_t)v71 < v72);
        }
        else
        {
          if (v5 <= v676)
          {
            unsigned int v43 = (char *)v41 + v676 - v5;
            unint64_t v85 = (long long *)v5;
            unint64_t v86 = *(_OWORD **)(a2 + 24);
            uint64_t v17 = (unsigned __int8 *)(v8 + v16);
            uint64_t v23 = v668;
            unint64_t v18 = v672;
            int v32 = v25 - v8;
            do
            {
              long long v87 = *v85++;
              *v86++ = v87;
            }
            while (v86 < (_OWORD *)v43);
            unint64_t v42 = v676;
            if (v676 >= (unint64_t)v38) {
              goto LABEL_105;
            }
          }
          else
          {
            unint64_t v42 = v5;
            unsigned int v43 = *(unsigned char **)(a2 + 24);
            uint64_t v17 = (unsigned __int8 *)(v8 + v16);
            uint64_t v23 = v668;
            unint64_t v18 = v672;
            int v32 = v25 - v8;
            if (v5 >= (unint64_t)v38) {
              goto LABEL_105;
            }
          }
          if (v5 <= v676) {
            unint64_t v88 = v676;
          }
          else {
            unint64_t v88 = v5;
          }
          unint64_t v89 = (unint64_t)&v25[-v88 + 1];
          if (v89 < 8 || (unint64_t)v41 - v5 < 0x20)
          {
            unint64_t v90 = (char *)v42;
            goto LABEL_103;
          }
          if (v89 >= 0x20)
          {
            unint64_t v106 = v89 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v141 = (long long *)(v42 + 16);
            uint64_t v142 = (_OWORD *)((char *)v41 + v88 - v5 + 16);
            unint64_t v143 = v89 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v144 = *v141;
              *(v142 - 1) = *(v141 - 1);
              _OWORD *v142 = v144;
              v141 += 2;
              v142 += 2;
              v143 -= 32;
            }
            while (v143);
            if (v89 == v106) {
              goto LABEL_105;
            }
            if ((v89 & 0x18) == 0)
            {
              unint64_t v90 = (char *)(v42 + v106);
              v43 += v106;
LABEL_103:
              unsigned int v91 = (char *)(v89 + v42);
              do
              {
                char v92 = *v90++;
                *v43++ = v92;
              }
              while (v90 != v91);
              goto LABEL_105;
            }
          }
          else
          {
            unint64_t v106 = 0;
          }
          v43 += v89 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v90 = (char *)(v42 + (v89 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v145 = (uint64_t *)(v42 + v106);
          uint64_t v146 = (void *)((char *)v41 + v106 + v88 - v5);
          unint64_t v147 = v106 - (v89 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v148 = *v145++;
            *v146++ = v148;
            v147 += 8;
          }
          while (v147);
          if (v89 != (v89 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_103;
          }
        }
LABEL_105:
        *(void *)(a2 + 24) += v40;
        uint64_t v93 = *(void *)(a2 + 8);
        if (v40 >= 0x10000)
        {
          unint64_t v94 = (unint64_t)(v93 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v94;
        }
LABEL_108:
        uint64_t v48 = v39 + 4;
        __int16 v95 = v39 + 1;
        *(_WORD *)(v93 + 4) = v40;
        *(_DWORD *)uint64_t v93 = 1;
        uint64_t v49 = v19;
        if ((v39 + 1) >> 16) {
          goto LABEL_217;
        }
        goto LABEL_218;
      }
      goto LABEL_691;
    }
    uint64_t v457 = *(void *)(a1 + 8);
    unint64_t v9 = a4 + a5;
    int v458 = a4 + a5 - v457;
    unsigned int v459 = *(_DWORD *)(a1 + 24);
    unsigned int v460 = 1 << *(_DWORD *)(a1 + 192);
    unsigned int v461 = v458 - v459;
    unsigned int v462 = v458 - v460;
    if (v461 > v460 && *(_DWORD *)(a1 + 32) == 0) {
      uint64_t v464 = v462;
    }
    else {
      uint64_t v464 = v459;
    }
    int v465 = (unsigned __int8 *)(v457 + v464);
    unint64_t v466 = v9 - 8;
    uint64_t v468 = *a3;
    uint64_t v467 = a3[1];
    uint64_t v469 = *(void *)(a1 + 184);
    uint64_t v470 = *(unsigned int *)(v469 + 24);
    long long v471 = *(char **)v469;
    uint64_t v472 = *(void *)(v469 + 8);
    if (v5 - (v472 + v470) - (v457 + v464) + *(void *)v469) {
      unint64_t v473 = (unsigned __int8 *)v5;
    }
    else {
      unint64_t v473 = (unsigned __int8 *)(v5 + 1);
    }
    if ((unint64_t)v473 >= v466)
    {
LABEL_921:
      *a3 = v468;
      a3[1] = v467;
      return v9 - v5;
    }
    unint64_t v619 = v472 + v470;
    unsigned int v655 = *(_DWORD *)(v469 + 24);
    v629 = a3;
    uint64_t v699 = *(void *)(a1 + 48);
    uint64_t v691 = *(void *)(a1 + 64);
    uint64_t v651 = *(void *)(v469 + 48);
    int v695 = 64 - *(_DWORD *)(a1 + 200);
    int v687 = 32 - *(_DWORD *)(a1 + 196);
    int v639 = 32 - *(_DWORD *)(v469 + 196);
    unint64_t v643 = v9 - 7;
    int v647 = 64 - *(_DWORD *)(v469 + 200);
    unint64_t v633 = v9 - 3;
    uint64_t v637 = *(void *)(v469 + 64);
    unint64_t v474 = v9 - 32;
    unsigned int v659 = v464 + v472 - v471;
    uint64_t v667 = v472 - v659;
    uint64_t v611 = v472 - 1;
    uint64_t v615 = v457 + 16;
    uint64_t v623 = v457 - 1;
    unint64_t v627 = v9 - 1;
    v671 = *(char **)v469;
    unint64_t v675 = v9 - 8;
    unint64_t v679 = v9 - 32;
    unint64_t v683 = v9;
    uint64_t v663 = *(void *)(v469 + 8);
    while (1)
    {
      unint64_t v475 = 0xCF1BBCDCB7A56463 * *(void *)v473;
      unsigned int v476 = -1640531535 * *(void *)v473;
      uint64_t v477 = 4 * (v475 >> v695);
      uint64_t v478 = *(unsigned int *)(v699 + v477);
      int v479 = v473 - v457;
      uint64_t v480 = 4 * (v476 >> v687);
      uint64_t v481 = *(unsigned int *)(v691 + v480);
      int v482 = v473 - v457 + 1;
      uint64_t v483 = (v482 - v468);
      *(_DWORD *)(v691 + v480) = v473 - v457;
      uint64_t v484 = v483 >= v464 ? v457 + v483 : v472 + v483 - v659;
      *(_DWORD *)(v699 + v477) = v479;
      if ((v464 + ~v483) >= 3)
      {
        unint64_t v485 = v473 + 1;
        if (*(_DWORD *)v484 == *(_DWORD *)(v473 + 1)) {
          break;
        }
      }
      if (v478 <= v464)
      {
        uint64_t v497 = *(unsigned int *)(v651 + 4 * (v475 >> v647));
        if (v497 > v655 && *(void *)(v663 + v497) == *(void *)v473)
        {
          unint64_t v9 = v683;
          unint64_t v498 = ZSTD_count_2segments((void *)v473 + 1, (char *)(v663 + v497 + 8), v683, v471, v465);
          int v479 = v473 - v457;
          uint64_t v495 = v498 + 8;
          uint64_t v496 = v473 - v457 - v659 - v497;
          if ((unint64_t)v473 > v5)
          {
            uint64_t v499 = v473 - 1;
            unint64_t v500 = (unsigned __int8 *)(v611 + v497);
            int v465 = (unsigned __int8 *)(v457 + v464);
            unint64_t v474 = v679;
            long long v471 = v671;
            unint64_t v466 = v675;
            while (*v499 == *v500)
            {
              ++v495;
              uint64_t v501 = v499 - 1;
              if ((unint64_t)v500 > v619)
              {
                --v500;
                BOOL v55 = (unint64_t)v499-- > v5;
                if (v55) {
                  continue;
                }
              }
LABEL_824:
              unint64_t v485 = v501 + 1;
              goto LABEL_854;
            }
LABEL_825:
            unint64_t v485 = v499 + 1;
LABEL_854:
            unint64_t v555 = (unint64_t)&v485[-v5];
            uint64_t v556 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v485 > v474)
            {
              if (v5 <= v474)
              {
                uint64_t v558 = (char *)v556 + v474 - v5;
                v564 = (long long *)v5;
                unint64_t v565 = *(_OWORD **)(a2 + 24);
                do
                {
                  long long v566 = *v564++;
                  *v565++ = v566;
                }
                while (v565 < (_OWORD *)v558);
                unint64_t v557 = v474;
                if (v474 >= (unint64_t)v485) {
                  goto LABEL_902;
                }
              }
              else
              {
                unint64_t v557 = v5;
                uint64_t v558 = *(unsigned char **)(a2 + 24);
                if (v5 >= (unint64_t)v485)
                {
LABEL_902:
                  *(void *)(a2 + 24) += v555;
                  uint64_t v536 = *(void *)(a2 + 8);
                  if (v555 >= 0x10000)
                  {
                    unint64_t v593 = (unint64_t)(v536 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v593;
                  }
                  goto LABEL_904;
                }
              }
              if (v5 <= v474) {
                unint64_t v567 = v474;
              }
              else {
                unint64_t v567 = v5;
              }
              unint64_t v568 = (unint64_t)&v485[-v567];
              if ((unint64_t)&v485[-v567] < 8)
              {
                int v569 = (unsigned __int8 *)v557;
                goto LABEL_901;
              }
              if ((unint64_t)v556 - v5 < 0x20)
              {
                int v569 = (unsigned __int8 *)v557;
                goto LABEL_901;
              }
              if (v568 >= 0x20)
              {
                unint64_t v570 = v568 & 0xFFFFFFFFFFFFFFE0;
                int v571 = (long long *)(v557 + 16);
                int v572 = (_OWORD *)((char *)v556 + v567 - v5 + 16);
                unint64_t v573 = v568 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v574 = *v571;
                  *(v572 - 1) = *(v571 - 1);
                  *int v572 = v574;
                  v571 += 2;
                  v572 += 2;
                  v573 -= 32;
                }
                while (v573);
                if (v568 == v570) {
                  goto LABEL_902;
                }
                if ((v568 & 0x18) == 0)
                {
                  int v569 = (unsigned __int8 *)(v557 + v570);
                  v558 += v570;
                  do
                  {
LABEL_901:
                    char v592 = *v569++;
                    *v558++ = v592;
                  }
                  while (v569 < v485);
                  goto LABEL_902;
                }
              }
              else
              {
                unint64_t v570 = 0;
              }
              v558 += v568 & 0xFFFFFFFFFFFFFFF8;
              int v569 = (unsigned __int8 *)(v557 + (v568 & 0xFFFFFFFFFFFFFFF8));
              int v575 = (uint64_t *)(v557 + v570);
              uint64_t v576 = (void *)((char *)v556 + v570 + v567 - v5);
              unint64_t v577 = v570 - (v568 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v578 = *v575++;
                *v576++ = v578;
                v577 += 8;
              }
              while (v577);
              if (v568 == (v568 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_902;
              }
              goto LABEL_901;
            }
            *uint64_t v556 = *(_OWORD *)v5;
            uint64_t v559 = *(void *)(a2 + 24);
            if (v555 > 0x10)
            {
              unint64_t v560 = (_OWORD *)(v559 + 16);
              unint64_t v561 = v559 + v555;
              unint64_t v562 = (long long *)(v5 + 16);
              do
              {
                long long v563 = *v562++;
                *v560++ = v563;
              }
              while ((unint64_t)v560 < v561);
              goto LABEL_902;
            }
            *(void *)(a2 + 24) = v559 + v555;
            uint64_t v536 = *(void *)(a2 + 8);
LABEL_904:
            __int16 v538 = v495 - 3;
            *(_WORD *)(v536 + 4) = v555;
            *(_DWORD *)uint64_t v536 = v496 + 3;
            uint64_t v467 = v468;
            uint64_t v468 = v496;
            if ((unint64_t)(v495 - 3) >= 0x10000)
            {
LABEL_905:
              unint64_t v594 = (unint64_t)(v536 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v594;
              uint64_t v468 = v496;
            }
LABEL_906:
            *(_WORD *)(v536 + 6) = v538;
            uint64_t v595 = v536 + 8;
            *(void *)(a2 + 8) = v536 + 8;
            unint64_t v5 = (unint64_t)&v485[v495];
            if ((unint64_t)&v485[v495] <= v466)
            {
              uint64_t v596 = (v479 + 2);
              *(_DWORD *)(v699 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v457 + v596)) >> v695)) = v596;
              *(_DWORD *)(v699 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v5 - 2)) >> v695)) = v5 - 2 - v457;
              *(_DWORD *)(v691 + 4 * ((-1640531535 * *(_DWORD *)(v457 + v596)) >> v687)) = v596;
              *(_DWORD *)(v691 + 4 * ((-1640531535 * *(_DWORD *)(v5 - 1)) >> v687)) = v5 - 1 - v457;
              uint64_t v597 = v468;
              uint64_t v598 = v467;
              while (1)
              {
                uint64_t v468 = v598;
                uint64_t v598 = v597;
                int v599 = v5 - v457;
                uint64_t v600 = (v5 - v457 - v468);
                uint64_t v601 = v667;
                if (v600 >= v464) {
                  uint64_t v601 = v457;
                }
                if ((v464 + ~v600) < 3) {
                  break;
                }
                uint64_t v602 = v601 + v600;
                if (*(_DWORD *)v602 != *(_DWORD *)v5) {
                  break;
                }
                if (v600 >= v464) {
                  long long v471 = (char *)v9;
                }
                unint64_t v603 = ZSTD_count_2segments((void *)(v5 + 4), (char *)(v602 + 4), v9, v471, v465);
                unint64_t v474 = v679;
                if (v5 <= v679)
                {
                  *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
                  uint64_t v595 = *(void *)(a2 + 8);
                }
                *(_WORD *)(v595 + 4) = 0;
                *(_DWORD *)uint64_t v595 = 1;
                unint64_t v466 = v675;
                if (v603 + 1 >= 0x10000)
                {
                  unint64_t v604 = (unint64_t)(v595 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v604;
                }
                *(_WORD *)(v595 + 6) = v603 + 1;
                *(_DWORD *)(v691 + 4 * ((-1640531535 * *(_DWORD *)v5) >> v687)) = v599;
                v595 += 8;
                *(_DWORD *)(v699 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)v5) >> v695)) = v599;
                v5 += v603 + 4;
                *(void *)(a2 + 8) = v595;
                uint64_t v597 = v468;
                uint64_t v467 = v598;
                unint64_t v473 = (unsigned __int8 *)v5;
                int v465 = (unsigned __int8 *)(v457 + v464);
                long long v471 = v671;
                if (v5 > v675) {
                  goto LABEL_705;
                }
              }
              uint64_t v467 = v468;
              uint64_t v468 = v597;
            }
            unint64_t v473 = (unsigned __int8 *)v5;
            goto LABEL_705;
          }
LABEL_781:
          unint64_t v485 = v473;
          int v465 = (unsigned __int8 *)(v457 + v464);
          unint64_t v474 = v679;
          long long v471 = v671;
          unint64_t v466 = v675;
          goto LABEL_854;
        }
      }
      else
      {
        uint64_t v491 = v457 + v478;
        if (*(void *)(v457 + v478) == *(void *)v473)
        {
          uint64_t v492 = v473 + 8;
          unint64_t v493 = (_DWORD *)(v491 + 8);
          if (v643 <= (unint64_t)(v473 + 8))
          {
            uint64_t v518 = v473 + 8;
            if ((unint64_t)v492 < v633)
            {
LABEL_749:
              if (*v493 == *(_DWORD *)v518)
              {
                v518 += 4;
                ++v493;
              }
            }
          }
          else
          {
            unint64_t v494 = *v492 ^ *(void *)v493;
            if (v494)
            {
              unint64_t v9 = v683;
              uint64_t v495 = (__clz(__rbit64(v494)) >> 3) + 8;
              uint64_t v496 = (v473 - v491);
              if ((unint64_t)v473 <= v5) {
                goto LABEL_853;
              }
              goto LABEL_760;
            }
            uint64_t v540 = 0;
            uint64_t v541 = v473 + 16;
            unint64_t v9 = v683;
            while (1)
            {
              uint64_t v542 = &v541[v540];
              if ((unint64_t)&v541[v540] >= v643) {
                break;
              }
              uint64_t v543 = *(void *)(v615 + v478 + v540);
              v540 += 8;
              unint64_t v544 = *(void *)v542 ^ v543;
              if (v544)
              {
                uint64_t v495 = v540 + (__clz(__rbit64(v544)) >> 3) + 8;
                uint64_t v496 = (v473 - v491);
                if ((unint64_t)v473 > v5) {
                  goto LABEL_760;
                }
                goto LABEL_853;
              }
            }
            uint64_t v518 = &v473[v540 + 16];
            unint64_t v493 = (_DWORD *)(v615 + v478 + v540);
            if ((unint64_t)v518 < v633) {
              goto LABEL_749;
            }
          }
          unint64_t v9 = v683;
          if ((unint64_t)v518 >= v627)
          {
            if ((unint64_t)v518 >= v683) {
              goto LABEL_759;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v493 == *(unsigned __int16 *)v518)
            {
              v518 += 2;
              unint64_t v493 = (_DWORD *)((char *)v493 + 2);
            }
            if ((unint64_t)v518 >= v683)
            {
LABEL_759:
              uint64_t v495 = v518 - v473;
              uint64_t v496 = (v473 - v491);
              if ((unint64_t)v473 <= v5) {
                goto LABEL_853;
              }
LABEL_760:
              unint64_t v519 = v473 - 1;
              unint64_t v520 = (unsigned __int8 *)(v623 + v478);
              while (*v519 == *v520)
              {
                ++v495;
                uint64_t v501 = v519 - 1;
                if (v520 > v465)
                {
                  --v520;
                  BOOL v55 = (unint64_t)v519-- > v5;
                  if (v55) {
                    continue;
                  }
                }
                goto LABEL_824;
              }
LABEL_842:
              unint64_t v485 = v519 + 1;
              goto LABEL_854;
            }
          }
          if (*(unsigned __int8 *)v493 == *v518) {
            ++v518;
          }
          goto LABEL_759;
        }
      }
      if (v481 <= v464)
      {
        uint64_t v503 = *(unsigned int *)(v637 + 4 * (v476 >> v639));
        if (v503 > v655)
        {
          unint64_t v502 = v663 + v503;
          if (*(_DWORD *)(v663 + v503) == *(_DWORD *)v473)
          {
            LODWORD(v481) = v503 + v659;
LABEL_737:
            unint64_t v485 = v473 + 1;
            uint64_t v504 = *(void *)(v473 + 1);
            unint64_t v505 = 4 * ((0xCF1BBCDCB7A56463 * v504) >> v695);
            uint64_t v506 = *(unsigned int *)(v699 + v505);
            *(_DWORD *)(v699 + v505) = v482;
            if (v506 <= v464)
            {
              uint64_t v521 = *(unsigned int *)(v651 + 4 * ((0xCF1BBCDCB7A56463 * v504) >> v647));
              if (v521 > v655 && *(void *)(v663 + v521) == v504)
              {
                uint64_t v495 = ZSTD_count_2segments(v473 + 9, (char *)(v663 + v521 + 8), v683, v471, v465) + 8;
                uint64_t v496 = v482 - v659 - v521;
                if ((unint64_t)v485 <= v5)
                {
                  unint64_t v474 = v679;
                  unint64_t v9 = v683;
                  int v465 = (unsigned __int8 *)(v457 + v464);
                  long long v471 = v671;
                  unint64_t v466 = v675;
                  int v479 = v473 - v457;
                  goto LABEL_854;
                }
                unint64_t v522 = (unsigned __int8 *)(v611 + v521);
                unint64_t v474 = v679;
                unint64_t v9 = v683;
                int v465 = (unsigned __int8 *)(v457 + v464);
                long long v471 = v671;
                unint64_t v466 = v675;
                int v479 = v473 - v457;
                while (*v473 == *v522)
                {
                  ++v495;
                  unint64_t v519 = v473 - 1;
                  if ((unint64_t)v473 > v5)
                  {
                    --v473;
                    BOOL v55 = (unint64_t)v522-- > v619;
                    if (v55) {
                      continue;
                    }
                  }
                  goto LABEL_842;
                }
                goto LABEL_845;
              }
            }
            else
            {
              uint64_t v507 = v457 + v506;
              if (*(void *)(v457 + v506) == v504)
              {
                uint64_t v508 = (char *)(v473 + 9);
                uint64_t v509 = (_DWORD *)(v507 + 8);
                if (v643 <= (unint64_t)(v473 + 9))
                {
                  uint64_t v547 = v473 + 9;
                  unint64_t v9 = v683;
                  if ((unint64_t)v508 < v633)
                  {
LABEL_827:
                    if (*v509 == *(_DWORD *)v547)
                    {
                      v547 += 4;
                      ++v509;
                    }
                  }
                }
                else
                {
                  unint64_t v510 = *(void *)v508 ^ *(void *)v509;
                  if (v510)
                  {
                    unint64_t v9 = v683;
                    uint64_t v495 = (__clz(__rbit64(v510)) >> 3) + 8;
                    uint64_t v496 = (v485 - v507);
                    if ((unint64_t)v485 <= v5) {
                      goto LABEL_854;
                    }
LABEL_838:
                    uint64_t v548 = (unsigned __int8 *)(v623 + v506);
                    while (*v473 == *v548)
                    {
                      ++v495;
                      unint64_t v519 = v473 - 1;
                      if ((unint64_t)v473 > v5)
                      {
                        --v473;
                        BOOL v55 = v548-- > v465;
                        if (v55) {
                          continue;
                        }
                      }
                      goto LABEL_842;
                    }
LABEL_845:
                    unint64_t v485 = v473 + 1;
                    goto LABEL_854;
                  }
                  uint64_t v579 = 0;
                  unint64_t v580 = v473 + 17;
                  unint64_t v9 = v683;
                  while (1)
                  {
                    unint64_t v581 = &v580[v579];
                    if ((unint64_t)&v580[v579] >= v643) {
                      break;
                    }
                    uint64_t v582 = *(void *)(v615 + v506 + v579);
                    v579 += 8;
                    unint64_t v583 = *(void *)v581 ^ v582;
                    if (v583)
                    {
                      uint64_t v495 = v579 + (__clz(__rbit64(v583)) >> 3) + 8;
                      uint64_t v496 = (v485 - v507);
                      if ((unint64_t)v485 > v5) {
                        goto LABEL_838;
                      }
                      goto LABEL_854;
                    }
                  }
                  uint64_t v547 = &v473[v579 + 17];
                  uint64_t v509 = (_DWORD *)(v615 + v506 + v579);
                  if ((unint64_t)v547 < v633) {
                    goto LABEL_827;
                  }
                }
                if ((unint64_t)v547 >= v627)
                {
                  if ((unint64_t)v547 >= v9) {
                    goto LABEL_837;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v509 == *(unsigned __int16 *)v547)
                  {
                    v547 += 2;
                    uint64_t v509 = (_DWORD *)((char *)v509 + 2);
                  }
                  if ((unint64_t)v547 >= v9)
                  {
LABEL_837:
                    uint64_t v495 = v547 - (unsigned __int8 *)v508 + 8;
                    uint64_t v496 = (v485 - v507);
                    if ((unint64_t)v485 <= v5) {
                      goto LABEL_854;
                    }
                    goto LABEL_838;
                  }
                }
                if (*(unsigned __int8 *)v509 == *v547) {
                  ++v547;
                }
                goto LABEL_837;
              }
            }
            unint64_t v523 = v473 + 4;
            unint64_t v524 = (char *)(v502 + 4);
            if (v481 < v464)
            {
              unint64_t v9 = v683;
              unint64_t v525 = v502;
              unint64_t v526 = ZSTD_count_2segments(v523, v524, v683, v471, v465);
              int v479 = v473 - v457;
              uint64_t v495 = v526 + 4;
              uint64_t v496 = (v473 - v457 - v481);
              if (v525 > v619 && (unint64_t)v473 > v5)
              {
                uint64_t v499 = v473 - 1;
                unint64_t v527 = (unsigned __int8 *)(v525 - 1);
                int v465 = (unsigned __int8 *)(v457 + v464);
                unint64_t v474 = v679;
                long long v471 = v671;
                unint64_t v466 = v675;
                while (*v499 == *v527)
                {
                  ++v495;
                  uint64_t v501 = v499 - 1;
                  if ((unint64_t)v527 > v619)
                  {
                    --v527;
                    BOOL v55 = (unint64_t)v499-- > v5;
                    if (v55) {
                      continue;
                    }
                  }
                  goto LABEL_824;
                }
                goto LABEL_825;
              }
              goto LABEL_781;
            }
            if (v643 <= (unint64_t)v523)
            {
              uint64_t v545 = v473 + 4;
              if ((unint64_t)v523 < v633)
              {
LABEL_808:
                if (*(_DWORD *)v524 == *(_DWORD *)v545)
                {
                  v545 += 4;
                  v524 += 4;
                }
              }
            }
            else
            {
              unint64_t v539 = *v523 ^ *(void *)v524;
              if (v539)
              {
                unint64_t v9 = v683;
                uint64_t v495 = (__clz(__rbit64(v539)) >> 3) + 4;
                uint64_t v496 = (v473 - v502);
                if (v502 <= (unint64_t)v465) {
                  goto LABEL_853;
                }
LABEL_819:
                if ((unint64_t)v473 > v5)
                {
                  uint64_t v499 = v473 - 1;
                  uint64_t v546 = (unsigned __int8 *)(v502 - 1);
                  while (*v499 == *v546)
                  {
                    ++v495;
                    uint64_t v501 = v499 - 1;
                    if (v546 > v465)
                    {
                      --v546;
                      BOOL v55 = (unint64_t)v499-- > v5;
                      if (v55) {
                        continue;
                      }
                    }
                    goto LABEL_824;
                  }
                  goto LABEL_825;
                }
                goto LABEL_853;
              }
              uint64_t v550 = 0;
              uint64_t v551 = v473 + 12;
              unint64_t v9 = v683;
              while (1)
              {
                unsigned int v552 = &v551[v550];
                if ((unint64_t)&v551[v550] >= v643) {
                  break;
                }
                uint64_t v553 = *(void *)(v502 + 12 + v550);
                v550 += 8;
                unint64_t v554 = *(void *)v552 ^ v553;
                if (v554)
                {
                  uint64_t v495 = v550 + (__clz(__rbit64(v554)) >> 3) + 4;
                  uint64_t v496 = (v473 - v502);
                  if (v502 > (unint64_t)v465) {
                    goto LABEL_819;
                  }
                  goto LABEL_853;
                }
              }
              uint64_t v545 = &v473[v550 + 12];
              unint64_t v524 = (char *)(v502 + v550 + 12);
              if ((unint64_t)v545 < v633) {
                goto LABEL_808;
              }
            }
            unint64_t v9 = v683;
            if ((unint64_t)v545 >= v627)
            {
              if ((unint64_t)v545 < v683) {
                goto LABEL_816;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v524 == *(unsigned __int16 *)v545)
              {
                v545 += 2;
                v524 += 2;
              }
              if ((unint64_t)v545 >= v683) {
                goto LABEL_818;
              }
LABEL_816:
              if (*v524 == *v545) {
                ++v545;
              }
            }
LABEL_818:
            uint64_t v495 = v545 - v473;
            uint64_t v496 = (v473 - v502);
            if (v502 > (unint64_t)v465) {
              goto LABEL_819;
            }
LABEL_853:
            unint64_t v485 = v473;
            goto LABEL_854;
          }
        }
      }
      else
      {
        unint64_t v502 = v457 + v481;
        if (*(_DWORD *)(v457 + v481) == *(_DWORD *)v473) {
          goto LABEL_737;
        }
      }
      _X8 = &v473[(uint64_t)&v473[-v5] >> 8];
      unint64_t v473 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      unint64_t v9 = v683;
LABEL_705:
      uint64_t v472 = v663;
      if ((unint64_t)v473 >= v466)
      {
        a3 = v629;
        goto LABEL_921;
      }
    }
    unint64_t v9 = v683;
    if (v483 >= v464) {
      long long v471 = (char *)v683;
    }
    unint64_t v486 = ZSTD_count_2segments(v473 + 5, (char *)(v484 + 4), v683, v471, v465);
    unint64_t v474 = v679;
    unint64_t v487 = (unint64_t)&v485[-v5];
    long long v488 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v485 <= v679)
    {
      *long long v488 = *(_OWORD *)v5;
      uint64_t v513 = *(void *)(a2 + 24);
      if (v487 <= 0x10)
      {
        *(void *)(a2 + 24) = v513 + v487;
        uint64_t v536 = *(void *)(a2 + 8);
        int v465 = (unsigned __int8 *)(v457 + v464);
        long long v471 = v671;
        unint64_t v466 = v675;
        int v479 = v473 - v457;
        goto LABEL_796;
      }
      unint64_t v514 = (_OWORD *)(v513 + 16);
      unint64_t v515 = v513 + v487;
      uint64_t v516 = (long long *)(v5 + 16);
      int v465 = (unsigned __int8 *)(v457 + v464);
      long long v471 = v671;
      unint64_t v466 = v675;
      int v479 = v473 - v457;
      do
      {
        long long v517 = *v516++;
        *v514++ = v517;
      }
      while ((unint64_t)v514 < v515);
    }
    else
    {
      if (v5 <= v679)
      {
        uint64_t v490 = (char *)v488 + v679 - v5;
        unint64_t v528 = (long long *)v5;
        unint64_t v529 = *(_OWORD **)(a2 + 24);
        int v465 = (unsigned __int8 *)(v457 + v464);
        long long v471 = v671;
        unint64_t v466 = v675;
        int v479 = v473 - v457;
        do
        {
          long long v530 = *v528++;
          *v529++ = v530;
        }
        while (v529 < (_OWORD *)v490);
        unint64_t v489 = v679;
        if (v679 >= (unint64_t)v485) {
          goto LABEL_793;
        }
      }
      else
      {
        unint64_t v489 = v5;
        uint64_t v490 = *(unsigned char **)(a2 + 24);
        int v465 = (unsigned __int8 *)(v457 + v464);
        long long v471 = v671;
        unint64_t v466 = v675;
        int v479 = v473 - v457;
        if (v5 >= (unint64_t)v485) {
          goto LABEL_793;
        }
      }
      if (v5 <= v679) {
        unint64_t v531 = v679;
      }
      else {
        unint64_t v531 = v5;
      }
      unint64_t v532 = (unint64_t)&v473[-v531 + 1];
      if (v532 < 8 || (unint64_t)v488 - v5 < 0x20)
      {
        uint64_t v533 = (char *)v489;
        goto LABEL_791;
      }
      if (v532 >= 0x20)
      {
        unint64_t v549 = v532 & 0xFFFFFFFFFFFFFFE0;
        int v584 = (long long *)(v489 + 16);
        int v585 = (_OWORD *)((char *)v488 + v531 - v5 + 16);
        unint64_t v586 = v532 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v587 = *v584;
          *(v585 - 1) = *(v584 - 1);
          *int v585 = v587;
          v584 += 2;
          v585 += 2;
          v586 -= 32;
        }
        while (v586);
        if (v532 == v549) {
          goto LABEL_793;
        }
        if ((v532 & 0x18) == 0)
        {
          uint64_t v533 = (char *)(v489 + v549);
          v490 += v549;
LABEL_791:
          uint64_t v534 = (char *)(v532 + v489);
          do
          {
            char v535 = *v533++;
            *v490++ = v535;
          }
          while (v533 != v534);
          goto LABEL_793;
        }
      }
      else
      {
        unint64_t v549 = 0;
      }
      v490 += v532 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v533 = (char *)(v489 + (v532 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v588 = (uint64_t *)(v489 + v549);
      unint64_t v589 = (void *)((char *)v488 + v549 + v531 - v5);
      unint64_t v590 = v549 - (v532 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v591 = *v588++;
        *v589++ = v591;
        v590 += 8;
      }
      while (v590);
      if (v532 != (v532 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_791;
      }
    }
LABEL_793:
    *(void *)(a2 + 24) += v487;
    uint64_t v536 = *(void *)(a2 + 8);
    if (v487 >= 0x10000)
    {
      unint64_t v537 = (unint64_t)(v536 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v537;
    }
LABEL_796:
    uint64_t v495 = v486 + 4;
    __int16 v538 = v486 + 1;
    *(_WORD *)(v536 + 4) = v487;
    *(_DWORD *)uint64_t v536 = 1;
    uint64_t v496 = v468;
    if ((v486 + 1) >> 16) {
      goto LABEL_905;
    }
    goto LABEL_906;
  }
  uint64_t v310 = *(void *)(a1 + 8);
  unint64_t v9 = a4 + a5;
  int v311 = a4 + a5 - v310;
  unsigned int v312 = *(_DWORD *)(a1 + 24);
  unsigned int v313 = 1 << *(_DWORD *)(a1 + 192);
  unsigned int v314 = v311 - v312;
  unsigned int v315 = v311 - v313;
  if (v314 > v313 && *(_DWORD *)(a1 + 32) == 0) {
    uint64_t v317 = v315;
  }
  else {
    uint64_t v317 = v312;
  }
  uint64_t v318 = (unsigned __int8 *)(v310 + v317);
  unint64_t v319 = v9 - 8;
  uint64_t v19 = *a3;
  uint64_t v20 = a3[1];
  uint64_t v320 = *(void *)(a1 + 184);
  uint64_t v321 = *(unsigned int *)(v320 + 24);
  unint64_t v322 = *(char **)v320;
  uint64_t v323 = *(void *)(v320 + 8);
  if (v5 - (v323 + v321) - (v310 + v317) + *(void *)v320) {
    uint64_t v324 = (unsigned __int8 *)v5;
  }
  else {
    uint64_t v324 = (unsigned __int8 *)(v5 + 1);
  }
  if ((unint64_t)v324 < v319)
  {
    unint64_t v614 = v323 + v321;
    unsigned int v654 = *(_DWORD *)(v320 + 24);
    v628 = a3;
    uint64_t v698 = *(void *)(a1 + 48);
    uint64_t v690 = *(void *)(a1 + 64);
    uint64_t v650 = *(void *)(v320 + 48);
    int v694 = 64 - *(_DWORD *)(a1 + 200);
    int v686 = 64 - *(_DWORD *)(a1 + 196);
    int v636 = 64 - *(_DWORD *)(v320 + 196);
    unint64_t v642 = v9 - 7;
    int v646 = 64 - *(_DWORD *)(v320 + 200);
    unint64_t v622 = v9 - 1;
    unint64_t v626 = v9 - 3;
    unint64_t v325 = v9 - 32;
    unsigned int v658 = v317 + v323 - v322;
    uint64_t v666 = v323 - v658;
    uint64_t v632 = *(void *)(v320 + 64);
    uint64_t v607 = v323 - 1;
    uint64_t v610 = v310 + 16;
    uint64_t v618 = v310 - 1;
    unint64_t v670 = *(char **)v320;
    unint64_t v674 = v9 - 8;
    unint64_t v678 = v9 - 32;
    unint64_t v682 = v9;
    uint64_t v662 = *(void *)(v320 + 8);
    while (1)
    {
      uint64_t v326 = *(void *)v324;
      unint64_t v327 = 0xCF1BBCDCB7A56463 * *(void *)v324;
      unint64_t v328 = 0xCF1BBCDCBF9B0000 * *(void *)v324;
      uint64_t v329 = 4 * (v327 >> v694);
      uint64_t v330 = *(unsigned int *)(v698 + v329);
      int v331 = v324 - v310;
      uint64_t v332 = 4 * (v328 >> v686);
      uint64_t v333 = *(unsigned int *)(v690 + v332);
      int v334 = v324 - v310 + 1;
      uint64_t v335 = (v334 - v19);
      *(_DWORD *)(v690 + v332) = v324 - v310;
      uint64_t v336 = v335 >= v317 ? v310 + v335 : v323 + v335 - v658;
      *(_DWORD *)(v698 + v329) = v331;
      if ((v317 + ~v335) >= 3)
      {
        uint64_t v337 = v324 + 1;
        if (*(_DWORD *)v336 == *(_DWORD *)(v324 + 1)) {
          break;
        }
      }
      if (v330 <= v317)
      {
        uint64_t v349 = *(unsigned int *)(v650 + 4 * (v327 >> v646));
        if (v349 > v654 && *(void *)(v662 + v349) == v326)
        {
          unint64_t v9 = v682;
          unint64_t v350 = ZSTD_count_2segments((void *)v324 + 1, (char *)(v662 + v349 + 8), v682, v322, v318);
          int v331 = v324 - v310;
          uint64_t v347 = v350 + 8;
          uint64_t v348 = v324 - v310 - v658 - v349;
          if ((unint64_t)v324 > v5)
          {
            unint64_t v351 = v324 - 1;
            v352 = (unsigned __int8 *)(v607 + v349);
            uint64_t v318 = (unsigned __int8 *)(v310 + v317);
            unint64_t v325 = v678;
            unint64_t v322 = v670;
            unint64_t v319 = v674;
            while (*v351 == *v352)
            {
              ++v347;
              unint64_t v353 = v351 - 1;
              if ((unint64_t)v352 > v614)
              {
                --v352;
                BOOL v55 = (unint64_t)v351-- > v5;
                if (v55) {
                  continue;
                }
              }
LABEL_593:
              uint64_t v337 = v353 + 1;
              goto LABEL_624;
            }
LABEL_594:
            uint64_t v337 = v351 + 1;
LABEL_624:
            unint64_t v406 = (unint64_t)&v337[-v5];
            unint64_t v407 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v337 > v325)
            {
              if (v5 <= v325)
              {
                unint64_t v409 = (char *)v407 + v325 - v5;
                unint64_t v415 = (long long *)v5;
                unint64_t v416 = *(_OWORD **)(a2 + 24);
                do
                {
                  long long v417 = *v415++;
                  *v416++ = v417;
                }
                while (v416 < (_OWORD *)v409);
                unint64_t v408 = v325;
                if (v325 >= (unint64_t)v337) {
                  goto LABEL_672;
                }
              }
              else
              {
                unint64_t v408 = v5;
                unint64_t v409 = *(unsigned char **)(a2 + 24);
                if (v5 >= (unint64_t)v337)
                {
LABEL_672:
                  *(void *)(a2 + 24) += v406;
                  uint64_t v387 = *(void *)(a2 + 8);
                  if (v406 >= 0x10000)
                  {
                    unint64_t v444 = (unint64_t)(v387 - *(void *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v444;
                  }
                  goto LABEL_674;
                }
              }
              if (v5 <= v325) {
                unint64_t v418 = v325;
              }
              else {
                unint64_t v418 = v5;
              }
              unint64_t v419 = (unint64_t)&v337[-v418];
              if ((unint64_t)&v337[-v418] < 8)
              {
                uint64_t v420 = (unsigned __int8 *)v408;
                goto LABEL_671;
              }
              if ((unint64_t)v407 - v5 < 0x20)
              {
                uint64_t v420 = (unsigned __int8 *)v408;
                goto LABEL_671;
              }
              if (v419 >= 0x20)
              {
                unint64_t v421 = v419 & 0xFFFFFFFFFFFFFFE0;
                int v422 = (long long *)(v408 + 16);
                unint64_t v423 = (_OWORD *)((char *)v407 + v418 - v5 + 16);
                unint64_t v424 = v419 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v425 = *v422;
                  *(v423 - 1) = *(v422 - 1);
                  *unint64_t v423 = v425;
                  v422 += 2;
                  v423 += 2;
                  v424 -= 32;
                }
                while (v424);
                if (v419 == v421) {
                  goto LABEL_672;
                }
                if ((v419 & 0x18) == 0)
                {
                  uint64_t v420 = (unsigned __int8 *)(v408 + v421);
                  v409 += v421;
                  do
                  {
LABEL_671:
                    char v443 = *v420++;
                    *v409++ = v443;
                  }
                  while (v420 < v337);
                  goto LABEL_672;
                }
              }
              else
              {
                unint64_t v421 = 0;
              }
              v409 += v419 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v420 = (unsigned __int8 *)(v408 + (v419 & 0xFFFFFFFFFFFFFFF8));
              v426 = (uint64_t *)(v408 + v421);
              unsigned int v427 = (void *)((char *)v407 + v421 + v418 - v5);
              unint64_t v428 = v421 - (v419 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v429 = *v426++;
                *v427++ = v429;
                v428 += 8;
              }
              while (v428);
              if (v419 == (v419 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_672;
              }
              goto LABEL_671;
            }
            *unint64_t v407 = *(_OWORD *)v5;
            uint64_t v410 = *(void *)(a2 + 24);
            if (v406 > 0x10)
            {
              uint64_t v411 = (_OWORD *)(v410 + 16);
              unint64_t v412 = v410 + v406;
              v413 = (long long *)(v5 + 16);
              do
              {
                long long v414 = *v413++;
                *v411++ = v414;
              }
              while ((unint64_t)v411 < v412);
              goto LABEL_672;
            }
            *(void *)(a2 + 24) = v410 + v406;
            uint64_t v387 = *(void *)(a2 + 8);
LABEL_674:
            __int16 v389 = v347 - 3;
            *(_WORD *)(v387 + 4) = v406;
            *(_DWORD *)uint64_t v387 = v348 + 3;
            uint64_t v20 = v19;
            uint64_t v19 = v348;
            if ((unint64_t)(v347 - 3) >= 0x10000)
            {
LABEL_675:
              unint64_t v445 = (unint64_t)(v387 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v445;
              uint64_t v19 = v348;
            }
LABEL_676:
            *(_WORD *)(v387 + 6) = v389;
            uint64_t v446 = v387 + 8;
            *(void *)(a2 + 8) = v387 + 8;
            unint64_t v5 = (unint64_t)&v337[v347];
            if ((unint64_t)&v337[v347] <= v319)
            {
              uint64_t v447 = *(void *)(v310 + (v331 + 2));
              *(_DWORD *)(v698 + 4 * ((0xCF1BBCDCB7A56463 * v447) >> v694)) = v331 + 2;
              *(_DWORD *)(v698 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v5 - 2)) >> v694)) = v5 - 2 - v310;
              *(_DWORD *)(v690 + 4 * ((0xCF1BBCDCBF9B0000 * v447) >> v686)) = v331 + 2;
              *(_DWORD *)(v690 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v5 - 1)) >> v686)) = v5 - 1 - v310;
              uint64_t v448 = v19;
              uint64_t v449 = v20;
              while (1)
              {
                uint64_t v19 = v449;
                uint64_t v449 = v448;
                int v451 = v5 - v310;
                uint64_t v452 = (v5 - v310 - v19);
                uint64_t v453 = v666;
                if (v452 >= v317) {
                  uint64_t v453 = v310;
                }
                if ((v317 + ~v452) < 3) {
                  break;
                }
                uint64_t v454 = v453 + v452;
                if (*(_DWORD *)v454 != *(_DWORD *)v5) {
                  break;
                }
                if (v452 >= v317) {
                  unint64_t v322 = (char *)v9;
                }
                unint64_t v455 = ZSTD_count_2segments((void *)(v5 + 4), (char *)(v454 + 4), v9, v322, v318);
                unint64_t v325 = v678;
                if (v5 <= v678)
                {
                  *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
                  uint64_t v446 = *(void *)(a2 + 8);
                }
                *(_WORD *)(v446 + 4) = 0;
                *(_DWORD *)uint64_t v446 = 1;
                unint64_t v319 = v674;
                if (v455 + 1 >= 0x10000)
                {
                  unint64_t v456 = (unint64_t)(v446 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v456;
                }
                *(_WORD *)(v446 + 6) = v455 + 1;
                v446 += 8;
                uint64_t v450 = *(void *)v5;
                *(_DWORD *)(v690 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v5) >> v686)) = v451;
                *(_DWORD *)(v698 + 4 * ((0xCF1BBCDCB7A56463 * v450) >> v694)) = v451;
                v5 += v455 + 4;
                *(void *)(a2 + 8) = v446;
                uint64_t v448 = v19;
                uint64_t v20 = v449;
                uint64_t v324 = (unsigned __int8 *)v5;
                uint64_t v318 = (unsigned __int8 *)(v310 + v317);
                unint64_t v322 = v670;
                if (v5 > v674) {
                  goto LABEL_474;
                }
              }
              uint64_t v20 = v19;
              uint64_t v19 = v448;
            }
            uint64_t v324 = (unsigned __int8 *)v5;
            goto LABEL_474;
          }
LABEL_566:
          uint64_t v337 = v324;
          uint64_t v318 = (unsigned __int8 *)(v310 + v317);
          unint64_t v325 = v678;
          unint64_t v322 = v670;
          unint64_t v319 = v674;
          goto LABEL_624;
        }
      }
      else
      {
        uint64_t v343 = v310 + v330;
        if (*(void *)(v310 + v330) == v326)
        {
          unint64_t v344 = v324 + 8;
          int v345 = (_DWORD *)(v343 + 8);
          if (v642 <= (unint64_t)(v324 + 8))
          {
            uint64_t v370 = v324 + 8;
            if ((unint64_t)v344 < v626)
            {
LABEL_518:
              if (*v345 == *(_DWORD *)v370)
              {
                v370 += 4;
                ++v345;
              }
            }
          }
          else
          {
            unint64_t v346 = *v344 ^ *(void *)v345;
            if (v346)
            {
              unint64_t v9 = v682;
              uint64_t v347 = (__clz(__rbit64(v346)) >> 3) + 8;
              uint64_t v348 = (v324 - v343);
              if ((unint64_t)v324 <= v5) {
                goto LABEL_623;
              }
              goto LABEL_529;
            }
            uint64_t v391 = 0;
            uint64_t v392 = v324 + 16;
            unint64_t v9 = v682;
            while (1)
            {
              unsigned int v393 = &v392[v391];
              if ((unint64_t)&v392[v391] >= v642) {
                break;
              }
              uint64_t v394 = *(void *)(v610 + v330 + v391);
              v391 += 8;
              unint64_t v395 = *(void *)v393 ^ v394;
              if (v395)
              {
                uint64_t v347 = v391 + (__clz(__rbit64(v395)) >> 3) + 8;
                uint64_t v348 = (v324 - v343);
                if ((unint64_t)v324 > v5) {
                  goto LABEL_529;
                }
                goto LABEL_623;
              }
            }
            uint64_t v370 = &v324[v391 + 16];
            int v345 = (_DWORD *)(v610 + v330 + v391);
            if ((unint64_t)v370 < v626) {
              goto LABEL_518;
            }
          }
          unint64_t v9 = v682;
          if ((unint64_t)v370 >= v622)
          {
            if ((unint64_t)v370 >= v682) {
              goto LABEL_528;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v345 == *(unsigned __int16 *)v370)
            {
              v370 += 2;
              int v345 = (_DWORD *)((char *)v345 + 2);
            }
            if ((unint64_t)v370 >= v682)
            {
LABEL_528:
              uint64_t v347 = v370 - v324;
              uint64_t v348 = (v324 - v343);
              if ((unint64_t)v324 <= v5) {
                goto LABEL_623;
              }
LABEL_529:
              unint64_t v371 = v324 - 1;
              v372 = (unsigned __int8 *)(v618 + v330);
              while (*v371 == *v372)
              {
                ++v347;
                unint64_t v353 = v371 - 1;
                if (v372 > v318)
                {
                  --v372;
                  BOOL v55 = (unint64_t)v371-- > v5;
                  if (v55) {
                    continue;
                  }
                }
                goto LABEL_593;
              }
LABEL_611:
              uint64_t v337 = v371 + 1;
              goto LABEL_624;
            }
          }
          if (*(unsigned __int8 *)v345 == *v370) {
            ++v370;
          }
          goto LABEL_528;
        }
      }
      if (v333 <= v317)
      {
        uint64_t v355 = *(unsigned int *)(v632 + 4 * (v328 >> v636));
        if (v355 > v654)
        {
          unint64_t v354 = v662 + v355;
          if (*(_DWORD *)(v662 + v355) == *(_DWORD *)v324)
          {
            LODWORD(v333) = v355 + v658;
LABEL_506:
            uint64_t v337 = v324 + 1;
            uint64_t v356 = *(void *)(v324 + 1);
            unint64_t v357 = 4 * ((0xCF1BBCDCB7A56463 * v356) >> v694);
            uint64_t v358 = *(unsigned int *)(v698 + v357);
            *(_DWORD *)(v698 + v357) = v334;
            if (v358 <= v317)
            {
              uint64_t v373 = *(unsigned int *)(v650 + 4 * ((0xCF1BBCDCB7A56463 * v356) >> v646));
              if (v373 > v654 && *(void *)(v662 + v373) == v356)
              {
                uint64_t v347 = ZSTD_count_2segments(v324 + 9, (char *)(v662 + v373 + 8), v682, v322, v318) + 8;
                uint64_t v348 = v334 - v658 - v373;
                if ((unint64_t)v337 <= v5)
                {
                  unint64_t v325 = v678;
                  unint64_t v9 = v682;
                  uint64_t v318 = (unsigned __int8 *)(v310 + v317);
                  unint64_t v322 = v670;
                  unint64_t v319 = v674;
                  int v331 = v324 - v310;
                  goto LABEL_624;
                }
                unint64_t v374 = (unsigned __int8 *)(v607 + v373);
                unint64_t v325 = v678;
                unint64_t v9 = v682;
                uint64_t v318 = (unsigned __int8 *)(v310 + v317);
                unint64_t v322 = v670;
                unint64_t v319 = v674;
                int v331 = v324 - v310;
                while (*v324 == *v374)
                {
                  ++v347;
                  unint64_t v371 = v324 - 1;
                  if ((unint64_t)v324 > v5)
                  {
                    --v324;
                    BOOL v55 = (unint64_t)v374-- > v614;
                    if (v55) {
                      continue;
                    }
                  }
                  goto LABEL_611;
                }
                goto LABEL_614;
              }
            }
            else
            {
              uint64_t v359 = v310 + v358;
              if (*(void *)(v310 + v358) == v356)
              {
                unsigned int v360 = (char *)(v324 + 9);
                unint64_t v361 = (_DWORD *)(v359 + 8);
                if (v642 <= (unint64_t)(v324 + 9))
                {
                  unint64_t v398 = v324 + 9;
                  unint64_t v9 = v682;
                  if ((unint64_t)v360 < v626)
                  {
LABEL_596:
                    if (*v361 == *(_DWORD *)v398)
                    {
                      v398 += 4;
                      ++v361;
                    }
                  }
                }
                else
                {
                  unint64_t v362 = *(void *)v360 ^ *(void *)v361;
                  unint64_t v9 = v682;
                  if (v362)
                  {
                    uint64_t v347 = (__clz(__rbit64(v362)) >> 3) + 8;
                    uint64_t v348 = (v337 - v359);
                    if ((unint64_t)v337 <= v5) {
                      goto LABEL_624;
                    }
LABEL_607:
                    uint64_t v399 = (unsigned __int8 *)(v618 + v358);
                    while (*v324 == *v399)
                    {
                      ++v347;
                      unint64_t v371 = v324 - 1;
                      if ((unint64_t)v324 > v5)
                      {
                        --v324;
                        BOOL v55 = v399-- > v318;
                        if (v55) {
                          continue;
                        }
                      }
                      goto LABEL_611;
                    }
LABEL_614:
                    uint64_t v337 = v324 + 1;
                    goto LABEL_624;
                  }
                  uint64_t v430 = 0;
                  unsigned int v431 = v324 + 17;
                  while (1)
                  {
                    unsigned int v432 = &v431[v430];
                    if ((unint64_t)&v431[v430] >= v642) {
                      break;
                    }
                    uint64_t v433 = *(void *)(v610 + v358 + v430);
                    v430 += 8;
                    unint64_t v434 = *(void *)v432 ^ v433;
                    if (v434)
                    {
                      uint64_t v347 = v430 + (__clz(__rbit64(v434)) >> 3) + 8;
                      uint64_t v348 = (v337 - v359);
                      if ((unint64_t)v337 > v5) {
                        goto LABEL_607;
                      }
                      goto LABEL_624;
                    }
                  }
                  unint64_t v398 = &v324[v430 + 17];
                  unint64_t v361 = (_DWORD *)(v610 + v358 + v430);
                  if ((unint64_t)v398 < v626) {
                    goto LABEL_596;
                  }
                }
                if ((unint64_t)v398 >= v622)
                {
                  if ((unint64_t)v398 >= v9) {
                    goto LABEL_606;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v361 == *(unsigned __int16 *)v398)
                  {
                    v398 += 2;
                    unint64_t v361 = (_DWORD *)((char *)v361 + 2);
                  }
                  if ((unint64_t)v398 >= v9)
                  {
LABEL_606:
                    uint64_t v347 = v398 - (unsigned __int8 *)v360 + 8;
                    uint64_t v348 = (v337 - v359);
                    if ((unint64_t)v337 <= v5) {
                      goto LABEL_624;
                    }
                    goto LABEL_607;
                  }
                }
                if (*(unsigned __int8 *)v361 == *v398) {
                  ++v398;
                }
                goto LABEL_606;
              }
            }
            long long v375 = v324 + 4;
            uint64_t v376 = (char *)(v354 + 4);
            if (v333 < v317)
            {
              unint64_t v9 = v682;
              unint64_t v377 = v354;
              uint64_t v347 = ZSTD_count_2segments(v375, v376, v682, v322, v318) + 4;
              int v331 = v324 - v310;
              uint64_t v348 = (v324 - v310 - v333);
              if (v377 > v614)
              {
                unint64_t v325 = v678;
                if ((unint64_t)v324 > v5)
                {
                  unint64_t v351 = v324 - 1;
                  unint64_t v378 = (unsigned __int8 *)(v377 - 1);
                  uint64_t v318 = (unsigned __int8 *)(v310 + v317);
                  unint64_t v322 = v670;
                  unint64_t v319 = v674;
                  while (*v351 == *v378)
                  {
                    ++v347;
                    unint64_t v353 = v351 - 1;
                    if ((unint64_t)v378 > v614)
                    {
                      --v378;
                      BOOL v55 = (unint64_t)v351-- > v5;
                      if (v55) {
                        continue;
                      }
                    }
                    goto LABEL_593;
                  }
                  goto LABEL_594;
                }
                uint64_t v337 = v324;
                uint64_t v318 = (unsigned __int8 *)(v310 + v317);
                unint64_t v322 = v670;
                unint64_t v319 = v674;
                goto LABEL_624;
              }
              goto LABEL_566;
            }
            unint64_t v9 = v682;
            if (v642 <= (unint64_t)v375)
            {
              unint64_t v396 = v324 + 4;
              if ((unint64_t)v375 < v626)
              {
LABEL_577:
                if (*(_DWORD *)v376 == *(_DWORD *)v396)
                {
                  v396 += 4;
                  v376 += 4;
                }
              }
            }
            else
            {
              unint64_t v390 = *v375 ^ *(void *)v376;
              if (v390)
              {
                uint64_t v347 = (__clz(__rbit64(v390)) >> 3) + 4;
                uint64_t v348 = (v324 - v354);
                if (v354 <= (unint64_t)v318) {
                  goto LABEL_623;
                }
LABEL_588:
                if ((unint64_t)v324 > v5)
                {
                  unint64_t v351 = v324 - 1;
                  unint64_t v397 = (unsigned __int8 *)(v354 - 1);
                  while (*v351 == *v397)
                  {
                    ++v347;
                    unint64_t v353 = v351 - 1;
                    if (v397 > v318)
                    {
                      --v397;
                      BOOL v55 = (unint64_t)v351-- > v5;
                      if (v55) {
                        continue;
                      }
                    }
                    goto LABEL_593;
                  }
                  goto LABEL_594;
                }
                goto LABEL_623;
              }
              uint64_t v401 = 0;
              uint64_t v402 = v324 + 12;
              while (1)
              {
                unsigned int v403 = &v402[v401];
                if ((unint64_t)&v402[v401] >= v642) {
                  break;
                }
                uint64_t v404 = *(void *)(v354 + 12 + v401);
                v401 += 8;
                unint64_t v405 = *(void *)v403 ^ v404;
                if (v405)
                {
                  uint64_t v347 = v401 + (__clz(__rbit64(v405)) >> 3) + 4;
                  uint64_t v348 = (v324 - v354);
                  if (v354 > (unint64_t)v318) {
                    goto LABEL_588;
                  }
                  goto LABEL_623;
                }
              }
              unint64_t v396 = &v324[v401 + 12];
              uint64_t v376 = (char *)(v354 + v401 + 12);
              if ((unint64_t)v396 < v626) {
                goto LABEL_577;
              }
            }
            if ((unint64_t)v396 >= v622)
            {
              if ((unint64_t)v396 < v682) {
                goto LABEL_585;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v376 == *(unsigned __int16 *)v396)
              {
                v396 += 2;
                v376 += 2;
              }
              if ((unint64_t)v396 >= v682) {
                goto LABEL_587;
              }
LABEL_585:
              if (*v376 == *v396) {
                ++v396;
              }
            }
LABEL_587:
            uint64_t v347 = v396 - v324;
            uint64_t v348 = (v324 - v354);
            if (v354 > (unint64_t)v318) {
              goto LABEL_588;
            }
LABEL_623:
            uint64_t v337 = v324;
            goto LABEL_624;
          }
        }
      }
      else
      {
        unint64_t v354 = v310 + v333;
        if (*(_DWORD *)(v310 + v333) == *(_DWORD *)v324) {
          goto LABEL_506;
        }
      }
      _X8 = &v324[(uint64_t)&v324[-v5] >> 8];
      uint64_t v324 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      unint64_t v9 = v682;
LABEL_474:
      uint64_t v323 = v662;
      if ((unint64_t)v324 >= v319) {
        goto LABEL_690;
      }
    }
    unint64_t v9 = v682;
    if (v335 >= v317) {
      unint64_t v322 = (char *)v682;
    }
    unint64_t v338 = ZSTD_count_2segments(v324 + 5, (char *)(v336 + 4), v682, v322, v318);
    unint64_t v325 = v678;
    unint64_t v339 = (unint64_t)&v337[-v5];
    uint64_t v340 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v337 <= v678)
    {
      *uint64_t v340 = *(_OWORD *)v5;
      uint64_t v365 = *(void *)(a2 + 24);
      if (v339 <= 0x10)
      {
        *(void *)(a2 + 24) = v365 + v339;
        uint64_t v387 = *(void *)(a2 + 8);
        uint64_t v318 = (unsigned __int8 *)(v310 + v317);
        unint64_t v322 = v670;
        unint64_t v319 = v674;
        int v331 = v324 - v310;
        goto LABEL_564;
      }
      long long v366 = (_OWORD *)(v365 + 16);
      unint64_t v367 = v365 + v339;
      unint64_t v368 = (long long *)(v5 + 16);
      uint64_t v318 = (unsigned __int8 *)(v310 + v317);
      unint64_t v322 = v670;
      unint64_t v319 = v674;
      int v331 = v324 - v310;
      do
      {
        long long v369 = *v368++;
        *v366++ = v369;
      }
      while ((unint64_t)v366 < v367);
    }
    else
    {
      if (v5 <= v678)
      {
        uint64_t v342 = (char *)v340 + v678 - v5;
        uint64_t v379 = (long long *)v5;
        char v380 = *(_OWORD **)(a2 + 24);
        uint64_t v318 = (unsigned __int8 *)(v310 + v317);
        unint64_t v322 = v670;
        unint64_t v319 = v674;
        int v331 = v324 - v310;
        do
        {
          long long v381 = *v379++;
          *v380++ = v381;
        }
        while (v380 < (_OWORD *)v342);
        unint64_t v341 = v678;
        if (v678 >= (unint64_t)v337) {
          goto LABEL_561;
        }
      }
      else
      {
        unint64_t v341 = v5;
        uint64_t v342 = *(unsigned char **)(a2 + 24);
        uint64_t v318 = (unsigned __int8 *)(v310 + v317);
        unint64_t v322 = v670;
        unint64_t v319 = v674;
        int v331 = v324 - v310;
        if (v5 >= (unint64_t)v337) {
          goto LABEL_561;
        }
      }
      if (v5 <= v678) {
        unint64_t v382 = v678;
      }
      else {
        unint64_t v382 = v5;
      }
      unint64_t v383 = (unint64_t)&v324[-v382 + 1];
      if (v383 < 8 || (unint64_t)v340 - v5 < 0x20)
      {
        uint64_t v384 = (char *)v341;
        goto LABEL_559;
      }
      if (v383 >= 0x20)
      {
        unint64_t v400 = v383 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v435 = (long long *)(v341 + 16);
        __int16 v436 = (_OWORD *)((char *)v340 + v382 - v5 + 16);
        unint64_t v437 = v383 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v438 = *v435;
          *(v436 - 1) = *(v435 - 1);
          _OWORD *v436 = v438;
          v435 += 2;
          v436 += 2;
          v437 -= 32;
        }
        while (v437);
        if (v383 == v400) {
          goto LABEL_561;
        }
        if ((v383 & 0x18) == 0)
        {
          uint64_t v384 = (char *)(v341 + v400);
          v342 += v400;
LABEL_559:
          uint64_t v385 = (char *)(v383 + v341);
          do
          {
            char v386 = *v384++;
            *v342++ = v386;
          }
          while (v384 != v385);
          goto LABEL_561;
        }
      }
      else
      {
        unint64_t v400 = 0;
      }
      v342 += v383 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v384 = (char *)(v341 + (v383 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v439 = (uint64_t *)(v341 + v400);
      uint64_t v440 = (void *)((char *)v340 + v400 + v382 - v5);
      unint64_t v441 = v400 - (v383 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v442 = *v439++;
        *v440++ = v442;
        v441 += 8;
      }
      while (v441);
      if (v383 != (v383 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_559;
      }
    }
LABEL_561:
    *(void *)(a2 + 24) += v339;
    uint64_t v387 = *(void *)(a2 + 8);
    if (v339 >= 0x10000)
    {
      unint64_t v388 = (unint64_t)(v387 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v388;
    }
LABEL_564:
    uint64_t v347 = v338 + 4;
    __int16 v389 = v338 + 1;
    *(_WORD *)(v387 + 4) = v339;
    *(_DWORD *)uint64_t v387 = 1;
    uint64_t v348 = v19;
    if ((v338 + 1) >> 16) {
      goto LABEL_675;
    }
    goto LABEL_676;
  }
LABEL_691:
  *a3 = v19;
  a3[1] = v20;
  return v9 - v5;
}

unint64_t ZSTD_compressBlock_greedy_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (char *)a4;
  unint64_t v6 = a4 + a5;
  unint64_t v7 = a4 + a5 - 8;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v12 = *(void *)(a1 + 184);
  unsigned int v14 = *(char **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  unint64_t v109 = v6;
  uint64_t v110 = (void *)(v8 + v9);
  unint64_t v100 = v13 + *(unsigned int *)(v12 + 24);
  if (a4 - (v8 + v9) - v100 + *(void *)v12) {
    uint64_t v15 = (void *)a4;
  }
  else {
    uint64_t v15 = (void *)(a4 + 1);
  }
  if ((unint64_t)v15 < v7)
  {
    v99 = a3;
    unint64_t v17 = v6 - 32;
    unint64_t v18 = v6 - 7;
    unint64_t v102 = v6 - 1;
    unint64_t v103 = v6 - 3;
    unsigned int v108 = v9 + v13 - v14;
    unint64_t v106 = *(char **)v12;
    unint64_t v107 = v7;
    unint64_t v19 = v6;
    uint64_t v105 = *(void *)(v12 + 8);
    uint64_t v101 = v13 - v108;
    while (1)
    {
      unint64_t v21 = v18;
      unint64_t v22 = v17;
      uint64_t v23 = (char *)v15 + 1;
      int v24 = v15 - v8 - v11;
      uint64_t v25 = (v24 + 1);
      uint64_t v26 = v13 + v25 - v108;
      if (v25 >= v9) {
        uint64_t v26 = v8 + v25;
      }
      if ((v9 - v24 - 5) <= 0xFFFFFFFC && *(_DWORD *)v26 == *(_DWORD *)v23) {
        break;
      }
      uint64_t v111 = 999999999;
      unint64_t BestMatch_dictMatchState_selectMLS = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v15, v19, &v111);
      uint64_t v29 = v111;
      if (BestMatch_dictMatchState_selectMLS) {
        uint64_t v23 = (char *)v15;
      }
      else {
        uint64_t v29 = 0;
      }
      if (BestMatch_dictMatchState_selectMLS <= 3)
      {
        uint64_t v15 = (void *)((char *)v15 + (((char *)v15 - v5) >> 8) + 1);
        unsigned int v14 = v106;
        unint64_t v20 = v107;
        uint64_t v13 = v105;
        unint64_t v17 = v22;
        unint64_t v18 = v21;
        unint64_t v19 = v109;
        goto LABEL_7;
      }
      unint64_t v17 = v22;
      if (!v29)
      {
        unint64_t v18 = v21;
        goto LABEL_33;
      }
      unint64_t v31 = v8 + v9;
      if (v9 > (int)v23 - (int)v8 - (int)v29 + 2) {
        unint64_t v31 = v100;
      }
      uint64_t v32 = v101;
      if (v9 <= (int)v23 - (int)v8 - (int)v29 + 2) {
        uint64_t v32 = v8;
      }
      if (v23 <= v5 || (uint64_t v33 = (v23 - v8 - v29 + 2), v32 + v33 <= v31))
      {
        unint64_t v18 = v21;
        uint64_t v36 = v9 + v8 + 8;
      }
      else
      {
        uint64_t v34 = (unsigned __int8 *)(v32 + v33 - 1);
        int v35 = (unsigned __int8 *)(v23 - 1);
        unint64_t v18 = v21;
        uint64_t v36 = v9 + v8 + 8;
        while (*v35 == *v34)
        {
          ++BestMatch_dictMatchState_selectMLS;
          uint64_t v37 = v35 - 1;
          if (v35 > (unsigned __int8 *)v5)
          {
            --v35;
            if ((unint64_t)v34-- > v31) {
              continue;
            }
          }
          uint64_t v23 = (char *)(v37 + 1);
          goto LABEL_49;
        }
        uint64_t v23 = (char *)(v35 + 1);
      }
LABEL_49:
      uint64_t v10 = v11;
      uint64_t v11 = (v29 - 2);
      unint64_t v39 = v23 - v5;
      unint64_t v40 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v23 <= v17)
      {
LABEL_50:
        *unint64_t v40 = *(_OWORD *)v5;
        uint64_t v49 = *(void *)(a2 + 24);
        if (v39 <= 0x10)
        {
          *(void *)(a2 + 24) = v49 + v39;
          uint64_t v54 = *(void *)(a2 + 8);
          unsigned int v14 = v106;
          unint64_t v20 = v107;
          uint64_t v13 = v105;
          unint64_t v19 = v109;
          __int16 v55 = BestMatch_dictMatchState_selectMLS - 3;
          *(_WORD *)(v54 + 4) = v39;
          *(_DWORD *)uint64_t v54 = v29 + 1;
          if (BestMatch_dictMatchState_selectMLS - 3 >= 0x10000) {
            goto LABEL_73;
          }
          goto LABEL_70;
        }
        uint64_t v50 = (_OWORD *)(v49 + 16);
        unint64_t v51 = v49 + v39;
        unsigned int v52 = (long long *)(v5 + 16);
        unsigned int v14 = v106;
        unint64_t v20 = v107;
        uint64_t v13 = v105;
        unint64_t v19 = v109;
        do
        {
          long long v53 = *v52++;
          *v50++ = v53;
        }
        while ((unint64_t)v50 < v51);
        goto LABEL_68;
      }
LABEL_34:
      if ((unint64_t)v5 <= v17)
      {
        unint64_t v42 = (char *)v40 + v17 - (void)v5;
        unsigned int v43 = v5;
        uint64_t v44 = v40;
        do
        {
          long long v45 = *(_OWORD *)v43;
          v43 += 16;
          *v44++ = v45;
        }
        while (v44 < (_OWORD *)v42);
        int v41 = (char *)v17;
        unsigned int v14 = v106;
        unint64_t v20 = v107;
        uint64_t v13 = v105;
        unint64_t v19 = v109;
        if (v17 >= (unint64_t)v23) {
          goto LABEL_68;
        }
      }
      else
      {
        int v41 = v5;
        unint64_t v42 = v40;
        unsigned int v14 = v106;
        unint64_t v20 = v107;
        uint64_t v13 = v105;
        unint64_t v19 = v109;
        if (v5 >= v23) {
          goto LABEL_68;
        }
      }
      if ((unint64_t)v5 <= v17) {
        v46 = (char *)v17;
      }
      else {
        v46 = v5;
      }
      unint64_t v47 = v23 - v46;
      if ((unint64_t)(v23 - v46) < 8)
      {
        uint64_t v48 = v41;
        goto LABEL_67;
      }
      if ((unint64_t)((char *)v40 - v5) < 0x20)
      {
        uint64_t v48 = v41;
        goto LABEL_67;
      }
      if (v47 >= 0x20)
      {
        unint64_t v56 = v47 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v57 = (long long *)(v41 + 16);
        uint64_t v58 = (_OWORD *)((char *)v40 + v46 - v5 + 16);
        unint64_t v59 = v47 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *uint64_t v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 32;
        }
        while (v59);
        if (v47 == v56) {
          goto LABEL_68;
        }
        if ((v47 & 0x18) == 0)
        {
          uint64_t v48 = &v41[v56];
          v42 += v56;
          do
          {
LABEL_67:
            char v65 = *v48++;
            *v42++ = v65;
          }
          while (v48 < v23);
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v56 = 0;
      }
      v42 += v47 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v48 = &v41[v47 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v61 = &v41[v56];
      v62 = (void *)((char *)v40 + &v46[v56] - v5);
      unint64_t v63 = v56 - (v47 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v64 = *(void *)v61;
        v61 += 8;
        *v62++ = v64;
        v63 += 8;
      }
      while (v63);
      if (v47 != (v47 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_67;
      }
LABEL_68:
      *(void *)(a2 + 24) += v39;
      uint64_t v54 = *(void *)(a2 + 8);
      if (v39 >= 0x10000)
      {
        unint64_t v67 = (unint64_t)(v54 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v67;
        __int16 v55 = BestMatch_dictMatchState_selectMLS - 3;
        *(_WORD *)(v54 + 4) = v39;
        *(_DWORD *)uint64_t v54 = v29 + 1;
        if (BestMatch_dictMatchState_selectMLS - 3 >= 0x10000)
        {
LABEL_73:
          unint64_t v68 = (unint64_t)(v54 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v68;
          *(_WORD *)(v54 + 6) = v55;
          uint64_t v66 = v54 + 8;
          *(void *)(a2 + 8) = v54 + 8;
          unint64_t v5 = &v23[BestMatch_dictMatchState_selectMLS];
          if ((unint64_t)&v23[BestMatch_dictMatchState_selectMLS] > v20)
          {
LABEL_71:
            uint64_t v15 = v5;
            goto LABEL_7;
          }
          goto LABEL_74;
        }
      }
      else
      {
        __int16 v55 = BestMatch_dictMatchState_selectMLS - 3;
        *(_WORD *)(v54 + 4) = v39;
        *(_DWORD *)uint64_t v54 = v29 + 1;
        if (BestMatch_dictMatchState_selectMLS - 3 >= 0x10000) {
          goto LABEL_73;
        }
      }
LABEL_70:
      *(_WORD *)(v54 + 6) = v55;
      uint64_t v66 = v54 + 8;
      *(void *)(a2 + 8) = v54 + 8;
      unint64_t v5 = &v23[BestMatch_dictMatchState_selectMLS];
      if ((unint64_t)&v23[BestMatch_dictMatchState_selectMLS] > v20) {
        goto LABEL_71;
      }
LABEL_74:
      uint64_t v69 = v11;
      uint64_t v70 = v10;
      while (1)
      {
        uint64_t v11 = v70;
        uint64_t v70 = v69;
        uint64_t v71 = (v5 - v8 - v11);
        uint64_t v72 = v71 >= v9 ? v8 : v101;
        if ((v9 + ~v71) < 3) {
          break;
        }
        uint64_t v73 = v72 + v71;
        if (*(_DWORD *)(v72 + v71) != *(_DWORD *)v5) {
          break;
        }
        if (v71 >= v9) {
          long long v74 = (void *)v19;
        }
        else {
          long long v74 = v14;
        }
        unint64_t v75 = v5 + 4;
        uint64_t v76 = (void *)(v73 + 4);
        unsigned int v77 = (char *)v74 + (void)v5 - v73;
        if ((unint64_t)v77 >= v19) {
          unsigned int v77 = (char *)v19;
        }
        if (v77 - 7 <= v75)
        {
          long long v80 = v5 + 4;
          unsigned int v81 = v76;
          if (v75 < v77 - 3)
          {
LABEL_91:
            if (*v81 == *(_DWORD *)v80)
            {
              v80 += 4;
              ++v81;
            }
          }
        }
        else
        {
          unint64_t v78 = *(void *)v75 ^ *v76;
          if (v78)
          {
            unint64_t v79 = __clz(__rbit64(v78)) >> 3;
            if ((void *)((char *)v76 + v79) != v74) {
              goto LABEL_119;
            }
            goto LABEL_98;
          }
          unint64_t v85 = v5 + 12;
          while (1)
          {
            unint64_t v86 = &v85[v78];
            if (&v85[v78] >= v77 - 7) {
              break;
            }
            uint64_t v87 = *(void *)(v72 + v71 + 12 + v78);
            v78 += 8;
            unint64_t v88 = *(void *)v86 ^ v87;
            if (v88)
            {
              unint64_t v79 = v78 + (__clz(__rbit64(v88)) >> 3);
              unint64_t v19 = v109;
              if ((void *)((char *)v76 + v79) != v74) {
                goto LABEL_119;
              }
              goto LABEL_98;
            }
          }
          long long v80 = &v5[v78 + 12];
          unsigned int v81 = (_DWORD *)(v72 + v71 + v78 + 12);
          unint64_t v19 = v109;
          if (v80 < v77 - 3) {
            goto LABEL_91;
          }
        }
        if (v80 >= v77 - 1)
        {
          if (v80 >= v77) {
            goto LABEL_97;
          }
LABEL_95:
          if (*(unsigned __int8 *)v81 == *v80) {
            ++v80;
          }
          goto LABEL_97;
        }
        if (*(unsigned __int16 *)v81 == *(unsigned __int16 *)v80)
        {
          v80 += 2;
          unsigned int v81 = (_DWORD *)((char *)v81 + 2);
        }
        if (v80 < v77) {
          goto LABEL_95;
        }
LABEL_97:
        unint64_t v79 = v80 - v75;
        if ((void *)((char *)v76 + v80 - v75) != v74) {
          goto LABEL_119;
        }
LABEL_98:
        unint64_t v82 = &v75[v79];
        if (v18 <= (unint64_t)v82)
        {
          unint64_t v89 = v82;
          unint64_t v90 = (_DWORD *)(v8 + v9);
          if ((unint64_t)v82 >= v103) {
            goto LABEL_113;
          }
          goto LABEL_111;
        }
        unint64_t v83 = *(void *)v82 ^ *v110;
        if (!v83)
        {
          uint64_t v93 = 0;
          uint64_t v94 = (uint64_t)&v5[v79 + 12];
          while (1)
          {
            __int16 v95 = (void *)(v94 + v93);
            if (v94 + v93 >= v18) {
              break;
            }
            uint64_t v96 = *(void *)(v36 + v93);
            v93 += 8;
            unint64_t v97 = *v95 ^ v96;
            if (v97)
            {
              unint64_t v84 = v93 + (__clz(__rbit64(v97)) >> 3);
              goto LABEL_118;
            }
          }
          unint64_t v89 = &v5[v79 + 12 + v93];
          unint64_t v90 = (_DWORD *)(v36 + v93);
          if ((unint64_t)v89 >= v103)
          {
LABEL_113:
            if ((unint64_t)v89 < v102)
            {
              if (*(unsigned __int16 *)v90 == *(unsigned __int16 *)v89)
              {
                v89 += 2;
                unint64_t v90 = (_DWORD *)((char *)v90 + 2);
              }
              if ((unint64_t)v89 < v19)
              {
LABEL_115:
                if (*(unsigned __int8 *)v90 == *v89) {
                  ++v89;
                }
              }
            }
            else if ((unint64_t)v89 < v19)
            {
              goto LABEL_115;
            }
            unint64_t v84 = v89 - v82;
            goto LABEL_118;
          }
LABEL_111:
          if (*v90 == *(_DWORD *)v89)
          {
            v89 += 4;
            ++v90;
          }
          goto LABEL_113;
        }
        unint64_t v84 = __clz(__rbit64(v83)) >> 3;
LABEL_118:
        v79 += v84;
LABEL_119:
        if ((unint64_t)v5 <= v17)
        {
          *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
          uint64_t v66 = *(void *)(a2 + 8);
          __int16 v91 = v79 + 1;
          *(_WORD *)(v66 + 4) = 0;
          *(_DWORD *)uint64_t v66 = 1;
          if (v79 + 1 >= 0x10000)
          {
LABEL_123:
            unint64_t v92 = (unint64_t)(v66 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v92;
          }
        }
        else
        {
          __int16 v91 = v79 + 1;
          *(_WORD *)(v66 + 4) = 0;
          *(_DWORD *)uint64_t v66 = 1;
          if (v79 + 1 >= 0x10000) {
            goto LABEL_123;
          }
        }
        *(_WORD *)(v66 + 6) = v91;
        v66 += 8;
        v5 += v79 + 4;
        *(void *)(a2 + 8) = v66;
        uint64_t v69 = v11;
        uint64_t v10 = v70;
        uint64_t v15 = v5;
        if ((unint64_t)v5 > v20) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = v11;
      uint64_t v11 = v69;
      uint64_t v15 = v5;
LABEL_7:
      if ((unint64_t)v15 >= v20)
      {
        a3 = v99;
        goto LABEL_138;
      }
    }
    if (v25 >= v9) {
      uint64_t v27 = (char *)v19;
    }
    else {
      uint64_t v27 = v14;
    }
    unint64_t v28 = ZSTD_count_2segments((void *)((char *)v15 + 5), (char *)(v26 + 4), v19, v27, v110);
    LODWORD(v29) = 0;
    unint64_t BestMatch_dictMatchState_selectMLS = v28 + 4;
    unint64_t v17 = v22;
    unint64_t v18 = v21;
LABEL_33:
    uint64_t v36 = v9 + v8 + 8;
    unint64_t v39 = v23 - v5;
    unint64_t v40 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v23 <= v17) {
      goto LABEL_50;
    }
    goto LABEL_34;
  }
LABEL_138:
  *a3 = v11;
  a3[1] = v10;
  return v109 - (void)v5;
}

unint64_t ZSTD_compressBlock_lazy_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = (unint64_t)&a4[a5];
  unint64_t v7 = (unint64_t)&a4[a5 - 8];
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v11 = *a3;
  LODWORD(v10) = a3[1];
  uint64_t v12 = *(void *)(a1 + 184);
  unsigned int v14 = *(char **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v135 = (unsigned __int8 *)(v8 + v9);
  int v129 = (unsigned __int8 *)(v13 + *(unsigned int *)(v12 + 24));
  if (a4 - (v8 + v9) - v129 + *(void *)v12) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = a4 + 1;
  }
  unint64_t v141 = (unsigned __int8 *)v7;
  if ((unint64_t)v15 < v7)
  {
    uint64_t v16 = a2;
    unint64_t v127 = a3;
    unint64_t v131 = v6 - 1;
    unint64_t v132 = v6 - 3;
    uint64_t v133 = v9 + v8 + 8;
    unsigned int v139 = v9 + v13 - v14;
    uint64_t v130 = v13 - v139;
    uint64_t v137 = *(void *)(a1 + 8);
    uint64_t v138 = *(void *)(v12 + 8);
    unint64_t v134 = *(char **)v12;
    while (1)
    {
      int v17 = v15 - v8 - v11;
      uint64_t v18 = (v17 + 1);
      uint64_t v19 = v13 + v18 - v139;
      if (v18 >= v9) {
        uint64_t v19 = v8 + v18;
      }
      unsigned int v136 = v10;
      if ((v9 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *(_DWORD *)(v15 + 1))
      {
        if (v18 >= v9) {
          unint64_t v20 = (char *)v6;
        }
        else {
          unint64_t v20 = v14;
        }
        unint64_t v21 = ZSTD_count_2segments(v15 + 5, (char *)(v19 + 4), v6, v20, v135) + 4;
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v142 = 999999999;
      unint64_t BestMatch_dictMatchState_selectMLS = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v15, v6, &v142);
      if (BestMatch_dictMatchState_selectMLS <= v21) {
        unint64_t v23 = v21;
      }
      else {
        unint64_t v23 = BestMatch_dictMatchState_selectMLS;
      }
      if (v23 < 4)
      {
        v15 += ((v15 - v5) >> 8) + 1;
        uint64_t v13 = v138;
        unsigned int v14 = v134;
        LODWORD(v10) = v136;
        goto LABEL_7;
      }
      char v24 = BestMatch_dictMatchState_selectMLS > v21;
      if (BestMatch_dictMatchState_selectMLS <= v21) {
        uint64_t v25 = v15 + 1;
      }
      else {
        uint64_t v25 = v15;
      }
      if (v24) {
        uint64_t v26 = v142;
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v13 = v138;
      if (v15 >= v141)
      {
LABEL_94:
        uint64_t v59 = v133;
        unint64_t v58 = v6 - 7;
        unint64_t v60 = v6 - 32;
        uint64_t v10 = v136;
        if (!v26) {
          goto LABEL_112;
        }
LABEL_95:
        uint64_t v61 = v137;
        v62 = v135;
        if (v9 > (int)v25 - ((int)v26 + (int)v137) + 2)
        {
          v62 = v129;
          uint64_t v61 = v130;
        }
        if (v25 <= v5 || (uint64_t v63 = (v25 - (v26 + v137) + 2), v61 + v63 <= (unint64_t)v62))
        {
LABEL_104:
          uint64_t v10 = v11;
          uint64_t v11 = (v26 - 2);
          unint64_t v67 = v25 - v5;
          unint64_t v68 = *(_OWORD **)(v16 + 24);
          if ((unint64_t)v25 > v60) {
            goto LABEL_113;
          }
          goto LABEL_105;
        }
        uint64_t v64 = (unsigned __int8 *)(v61 + v63 - 1);
        char v65 = v25 - 1;
        while (*v65 == *v64)
        {
          ++v23;
          uint64_t v66 = v65 - 1;
          if (v65 > v5)
          {
            --v65;
            char v24 = v64-- > v62;
            if (v24) {
              continue;
            }
          }
          uint64_t v25 = v66 + 1;
          goto LABEL_104;
        }
        uint64_t v25 = v65 + 1;
        uint64_t v10 = v11;
        uint64_t v11 = (v26 - 2);
        unint64_t v67 = v65 + 1 - v5;
        unint64_t v68 = *(_OWORD **)(v16 + 24);
        if ((unint64_t)v25 <= v60) {
          goto LABEL_105;
        }
LABEL_113:
        if ((unint64_t)v5 <= v60)
        {
          unint64_t v78 = (char *)v68 + v60 - (void)v5;
          unint64_t v79 = v5;
          long long v80 = v68;
          do
          {
            long long v81 = *(_OWORD *)v79;
            v79 += 16;
            *v80++ = v81;
          }
          while (v80 < (_OWORD *)v78);
          uint64_t v70 = v10;
          unsigned int v77 = (_OWORD *)v60;
          if (v60 >= (unint64_t)v25) {
            goto LABEL_140;
          }
        }
        else
        {
          uint64_t v70 = v10;
          unsigned int v77 = v5;
          unint64_t v78 = v68;
          if (v5 >= v25) {
            goto LABEL_140;
          }
        }
        if ((unint64_t)v5 <= v60) {
          unint64_t v82 = (unsigned __int8 *)v60;
        }
        else {
          unint64_t v82 = v5;
        }
        unint64_t v83 = v25 - v82;
        if ((unint64_t)(v25 - v82) < 8)
        {
          unint64_t v84 = (unsigned __int8 *)v77;
          goto LABEL_139;
        }
        if ((unint64_t)((char *)v68 - (char *)v5) < 0x20)
        {
          unint64_t v84 = (unsigned __int8 *)v77;
          goto LABEL_139;
        }
        if (v83 < 0x20)
        {
          unint64_t v85 = 0;
          goto LABEL_134;
        }
        unint64_t v85 = v83 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v86 = v77 + 1;
        uint64_t v87 = (_OWORD *)((char *)v68 + v82 - v5 + 16);
        unint64_t v88 = v83 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v89 = *v86;
          *(v87 - 1) = *(v86 - 1);
          _OWORD *v87 = v89;
          v86 += 2;
          v87 += 2;
          v88 -= 32;
        }
        while (v88);
        if (v83 == v85) {
          goto LABEL_140;
        }
        if ((v83 & 0x18) != 0)
        {
LABEL_134:
          v78 += v83 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v84 = (unsigned __int8 *)v77 + (v83 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v90 = (uint64_t *)((char *)v77 + v85);
          __int16 v91 = (void *)((char *)v68 + &v82[v85] - v5);
          unint64_t v92 = v85 - (v83 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v93 = *v90++;
            *v91++ = v93;
            v92 += 8;
          }
          while (v92);
          if (v83 == (v83 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_140;
          }
        }
        else
        {
          unint64_t v84 = (unsigned __int8 *)v77 + v85;
          v78 += v85;
        }
        do
        {
LABEL_139:
          char v94 = *v84++;
          *v78++ = v94;
        }
        while (v84 < v25);
        goto LABEL_140;
      }
      uint64_t v27 = (char *)(v15 + 13);
      do
      {
        unint64_t v28 = v15 + 1;
        uint64_t v29 = (v15 + 1 - v137 - v11);
        if (v29 >= v9) {
          uint64_t v30 = (_DWORD *)(v137 + v29);
        }
        else {
          uint64_t v30 = (_DWORD *)(v13 + v29 - v139);
        }
        if ((v9 + ~v29) < 3 || *v30 != *(_DWORD *)v28) {
          goto LABEL_81;
        }
        if (v29 >= v9) {
          unint64_t v31 = (char *)v6;
        }
        else {
          unint64_t v31 = v134;
        }
        uint64_t v32 = (char *)(v15 + 5);
        uint64_t v33 = v30 + 1;
        unint64_t v34 = (unint64_t)&v15[v31 - (char *)(v30 + 1) + 5];
        if (v34 >= v6) {
          unint64_t v34 = v6;
        }
        if (v34 - 7 <= (unint64_t)v32)
        {
          unint64_t v39 = v15 + 5;
          unint64_t v40 = v30 + 1;
          uint64_t v37 = v133;
          unint64_t v36 = v6 - 7;
          if ((unint64_t)v32 < v34 - 3)
          {
LABEL_44:
            if (*v40 == *(_DWORD *)v39)
            {
              v39 += 4;
              ++v40;
            }
          }
        }
        else
        {
          unint64_t v35 = *(void *)v32 ^ *v33;
          uint64_t v37 = v133;
          unint64_t v36 = v6 - 7;
          if (v35)
          {
            unint64_t v38 = __clz(__rbit64(v35)) >> 3;
            if ((char *)v33 + v38 != v31) {
              goto LABEL_76;
            }
            goto LABEL_55;
          }
          uint64_t v44 = 0;
          while (1)
          {
            unint64_t v39 = &v15[v44 * 4 + 13];
            if ((unint64_t)v39 >= v34 - 7) {
              break;
            }
            uint64_t v45 = *(void *)&v30[v44 + 3];
            v44 += 2;
            unint64_t v46 = *(void *)v39 ^ v45;
            if (v46)
            {
              unint64_t v38 = v44 * 4 + (__clz(__rbit64(v46)) >> 3);
              if ((char *)v33 + v38 != v31) {
                goto LABEL_76;
              }
              goto LABEL_55;
            }
          }
          unint64_t v40 = &v30[v44 + 3];
          if ((unint64_t)v39 < v34 - 3) {
            goto LABEL_44;
          }
        }
        if ((unint64_t)v39 >= v34 - 1)
        {
          if ((unint64_t)v39 >= v34) {
            goto LABEL_54;
          }
LABEL_52:
          if (*(unsigned __int8 *)v40 == *v39) {
            ++v39;
          }
          goto LABEL_54;
        }
        if (*(unsigned __int16 *)v40 == *(unsigned __int16 *)v39)
        {
          v39 += 2;
          unint64_t v40 = (_DWORD *)((char *)v40 + 2);
        }
        if ((unint64_t)v39 < v34) {
          goto LABEL_52;
        }
LABEL_54:
        unint64_t v38 = v39 - (unsigned __int8 *)v32;
        if ((char *)v33 + v39 - (unsigned __int8 *)v32 != v31) {
          goto LABEL_76;
        }
LABEL_55:
        int v41 = &v32[v38];
        if (v36 <= (unint64_t)v41)
        {
          unint64_t v47 = v41;
          uint64_t v48 = v135;
          if ((unint64_t)v41 >= v132) {
            goto LABEL_66;
          }
          goto LABEL_64;
        }
        unint64_t v42 = *(void *)v41 ^ *(void *)v135;
        if (!v42)
        {
          uint64_t v53 = 0;
          uint64_t v54 = &v27[v38];
          while (1)
          {
            __int16 v55 = &v54[v53];
            if ((unint64_t)&v54[v53] >= v36) {
              break;
            }
            uint64_t v56 = *(void *)(v37 + v53);
            v53 += 8;
            unint64_t v57 = *(void *)v55 ^ v56;
            if (v57)
            {
              unint64_t v43 = v53 + (__clz(__rbit64(v57)) >> 3);
              goto LABEL_75;
            }
          }
          unint64_t v47 = &v27[v38 + v53];
          uint64_t v48 = (unsigned __int8 *)(v37 + v53);
          if ((unint64_t)v47 >= v132)
          {
LABEL_66:
            if ((unint64_t)v47 >= v131)
            {
              if ((unint64_t)v47 < v6) {
                goto LABEL_72;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v48 == *(unsigned __int16 *)v47)
              {
                v47 += 2;
                v48 += 2;
              }
              if ((unint64_t)v47 >= v6) {
                goto LABEL_74;
              }
LABEL_72:
              if (*v48 == *v47) {
                ++v47;
              }
            }
LABEL_74:
            unint64_t v43 = v47 - v41;
            goto LABEL_75;
          }
LABEL_64:
          if (*(_DWORD *)v48 == *(_DWORD *)v47)
          {
            v47 += 4;
            v48 += 4;
          }
          goto LABEL_66;
        }
        unint64_t v43 = __clz(__rbit64(v42)) >> 3;
LABEL_75:
        v38 += v43;
LABEL_76:
        unint64_t v49 = v38 + 4;
        char v24 = (v38 != -5) & __CFADD__(v38, 5);
        int v50 = 3 * v23 + (__clz(v26 + 1) ^ 0xFFFFFFE0) + 2;
        if (v24) {
          BOOL v51 = 1;
        }
        else {
          BOOL v51 = 3 * (int)v49 <= v50;
        }
        if (!v51)
        {
          uint64_t v26 = 0;
          unint64_t v23 = v49;
          uint64_t v25 = v15 + 1;
        }
LABEL_81:
        uint64_t v142 = 999999999;
        unint64_t v52 = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v15 + 1, v6, &v142);
        if (v52 < 4
          || (int)((__clz(v142 + 1) ^ 0xFFFFFFE0) + 4 * v52 + 1) <= (int)((__clz(v26 + 1) ^ 0xFFFFFFE0) + 4 * v23 + 5))
        {
          uint64_t v16 = a2;
          uint64_t v13 = v138;
          goto LABEL_94;
        }
        ++v27;
        ++v15;
        uint64_t v25 = v28;
        uint64_t v26 = v142;
        unint64_t v23 = v52;
        uint64_t v13 = v138;
      }
      while (v28 != v141);
      unint64_t v23 = v52;
      LODWORD(v26) = v142;
      uint64_t v25 = v141;
      uint64_t v16 = a2;
      uint64_t v59 = v133;
      unint64_t v58 = v6 - 7;
      unint64_t v60 = v6 - 32;
      uint64_t v10 = v136;
      if (v142) {
        goto LABEL_95;
      }
LABEL_112:
      unint64_t v67 = v25 - v5;
      unint64_t v68 = *(_OWORD **)(v16 + 24);
      if ((unint64_t)v25 > v60) {
        goto LABEL_113;
      }
LABEL_105:
      *unint64_t v68 = *(_OWORD *)v5;
      uint64_t v69 = *(void *)(v16 + 24);
      if (v67 <= 0x10)
      {
        *(void *)(v16 + 24) = v69 + v67;
        uint64_t v75 = *(void *)(v16 + 8);
        __int16 v76 = v23 - 3;
        *(_WORD *)(v75 + 4) = v67;
        *(_DWORD *)uint64_t v75 = v26 + 1;
        if (v23 - 3 >= 0x10000) {
          goto LABEL_143;
        }
      }
      else
      {
        uint64_t v70 = v10;
        uint64_t v71 = (_OWORD *)(v69 + 16);
        unint64_t v72 = v69 + v67;
        uint64_t v73 = (long long *)(v5 + 16);
        do
        {
          long long v74 = *v73++;
          *v71++ = v74;
        }
        while ((unint64_t)v71 < v72);
LABEL_140:
        *(void *)(v16 + 24) += v67;
        uint64_t v75 = *(void *)(v16 + 8);
        if (v67 >= 0x10000)
        {
          unint64_t v95 = (unint64_t)(v75 - *(void *)v16) >> 3;
          *(_DWORD *)(v16 + 72) = 1;
          *(_DWORD *)(v16 + 76) = v95;
        }
        uint64_t v10 = v70;
        __int16 v76 = v23 - 3;
        *(_WORD *)(v75 + 4) = v67;
        *(_DWORD *)uint64_t v75 = v26 + 1;
        if (v23 - 3 >= 0x10000)
        {
LABEL_143:
          unint64_t v96 = (unint64_t)(v75 - *(void *)v16) >> 3;
          *(_DWORD *)(v16 + 72) = 2;
          *(_DWORD *)(v16 + 76) = v96;
        }
      }
      *(_WORD *)(v75 + 6) = v76;
      uint64_t v97 = v75 + 8;
      *(void *)(v16 + 8) = v75 + 8;
      unint64_t v5 = &v25[v23];
      uint64_t v8 = v137;
      if (&v25[v23] > v141)
      {
        uint64_t v15 = &v25[v23];
        unsigned int v14 = v134;
        goto LABEL_7;
      }
      uint64_t v98 = v11;
      uint64_t v99 = v10;
      unsigned int v14 = v134;
      while (2)
      {
        uint64_t v11 = v99;
        uint64_t v99 = v98;
        uint64_t v100 = (v5 - v137 - v11);
        if (v100 >= v9) {
          uint64_t v101 = v137;
        }
        else {
          uint64_t v101 = v130;
        }
        if ((v9 + ~v100) >= 3)
        {
          uint64_t v102 = v101 + v100;
          if (*(_DWORD *)(v101 + v100) == *(_DWORD *)v5)
          {
            if (v100 >= v9) {
              unint64_t v103 = (void *)v6;
            }
            else {
              unint64_t v103 = v134;
            }
            v104 = (char *)(v5 + 4);
            uint64_t v105 = (void *)(v102 + 4);
            unint64_t v106 = (char *)v103 + (void)v5 - v102;
            if ((unint64_t)v106 >= v6) {
              unint64_t v106 = (char *)v6;
            }
            if (v106 - 7 <= v104)
            {
              uint64_t v110 = (char *)(v5 + 4);
              uint64_t v111 = v105;
              if (v104 < v106 - 3)
              {
LABEL_165:
                if (*v111 == *(_DWORD *)v110)
                {
                  v110 += 4;
                  ++v111;
                }
              }
            }
            else
            {
              unint64_t v107 = *(void *)v104 ^ *v105;
              if (v107)
              {
                unint64_t v108 = __clz(__rbit64(v107)) >> 3;
                if ((void *)((char *)v105 + v108) != v103) {
                  goto LABEL_161;
                }
LABEL_176:
                unint64_t v112 = &v104[v108];
                if (v58 <= (unint64_t)v112)
                {
                  unint64_t v118 = (unsigned __int8 *)v112;
                  v119 = v135;
                  if ((unint64_t)v112 < v132)
                  {
LABEL_186:
                    if (*(_DWORD *)v119 == *(_DWORD *)v118)
                    {
                      v118 += 4;
                      v119 += 4;
                    }
                  }
                }
                else
                {
                  unint64_t v113 = *(void *)v112 ^ *(void *)v135;
                  if (v113)
                  {
                    v108 += __clz(__rbit64(v113)) >> 3;
                    if ((unint64_t)v5 > v60) {
                      goto LABEL_162;
                    }
LABEL_197:
                    *(_OWORD *)*(void *)(v16 + 24) = *(_OWORD *)v5;
                    uint64_t v97 = *(void *)(v16 + 8);
                    __int16 v109 = v108 + 1;
                    *(_WORD *)(v97 + 4) = 0;
                    *(_DWORD *)uint64_t v97 = 1;
                    if (v108 + 1 >= 0x10000)
                    {
LABEL_198:
                      unint64_t v120 = (unint64_t)(v97 - *(void *)v16) >> 3;
                      *(_DWORD *)(v16 + 72) = 2;
                      *(_DWORD *)(v16 + 76) = v120;
                    }
LABEL_147:
                    *(_WORD *)(v97 + 6) = v109;
                    v97 += 8;
                    v5 += v108 + 4;
                    *(void *)(v16 + 8) = v97;
                    uint64_t v98 = v11;
                    LODWORD(v10) = v99;
                    uint64_t v15 = v5;
                    if (v5 > v141) {
                      goto LABEL_7;
                    }
                    continue;
                  }
                  uint64_t v121 = 0;
                  uint64_t v122 = (uint64_t)&v5[v108 + 12];
                  while (1)
                  {
                    long long v123 = (void *)(v122 + v121);
                    if (v122 + v121 >= v58) {
                      break;
                    }
                    uint64_t v124 = *(void *)(v59 + v121);
                    v121 += 8;
                    unint64_t v125 = *v123 ^ v124;
                    if (v125)
                    {
                      v108 += v121 + (__clz(__rbit64(v125)) >> 3);
                      if ((unint64_t)v5 <= v60) {
                        goto LABEL_197;
                      }
                      goto LABEL_162;
                    }
                  }
                  unint64_t v118 = &v5[v108 + 12 + v121];
                  v119 = (unsigned __int8 *)(v59 + v121);
                  if ((unint64_t)v118 < v132) {
                    goto LABEL_186;
                  }
                }
                if ((unint64_t)v118 >= v131)
                {
                  if ((unint64_t)v118 >= v6) {
                    goto LABEL_196;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v119 == *(unsigned __int16 *)v118)
                  {
                    v118 += 2;
                    v119 += 2;
                  }
                  if ((unint64_t)v118 >= v6)
                  {
LABEL_196:
                    v108 += v118 - (unsigned __int8 *)v112;
                    if ((unint64_t)v5 > v60) {
                      goto LABEL_162;
                    }
                    goto LABEL_197;
                  }
                }
                if (*v119 == *v118) {
                  ++v118;
                }
                goto LABEL_196;
              }
              unint64_t v114 = (char *)(v5 + 12);
              while (1)
              {
                int v115 = &v114[v107];
                if (&v114[v107] >= v106 - 7) {
                  break;
                }
                uint64_t v116 = *(void *)(v101 + v100 + 12 + v107);
                v107 += 8;
                unint64_t v117 = *(void *)v115 ^ v116;
                if (v117)
                {
                  unint64_t v108 = v107 + (__clz(__rbit64(v117)) >> 3);
                  if ((void *)((char *)v105 + v108) != v103) {
                    goto LABEL_161;
                  }
                  goto LABEL_176;
                }
              }
              uint64_t v110 = (char *)&v5[v107 + 12];
              uint64_t v111 = (_DWORD *)(v101 + v100 + v107 + 12);
              if (v110 < v106 - 3) {
                goto LABEL_165;
              }
            }
            if (v110 >= v106 - 1)
            {
              if (v110 >= v106) {
                goto LABEL_175;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v111 == *(unsigned __int16 *)v110)
              {
                v110 += 2;
                uint64_t v111 = (_DWORD *)((char *)v111 + 2);
              }
              if (v110 >= v106)
              {
LABEL_175:
                unint64_t v108 = v110 - v104;
                if ((void *)((char *)v105 + v110 - v104) == v103) {
                  goto LABEL_176;
                }
LABEL_161:
                if ((unint64_t)v5 <= v60) {
                  goto LABEL_197;
                }
LABEL_162:
                __int16 v109 = v108 + 1;
                *(_WORD *)(v97 + 4) = 0;
                *(_DWORD *)uint64_t v97 = 1;
                if (v108 + 1 >= 0x10000) {
                  goto LABEL_198;
                }
                goto LABEL_147;
              }
            }
            if (*(unsigned __int8 *)v111 == *v110) {
              ++v110;
            }
            goto LABEL_175;
          }
        }
        break;
      }
      LODWORD(v10) = v11;
      uint64_t v11 = v98;
      uint64_t v15 = v5;
LABEL_7:
      if (v15 >= v141)
      {
        a3 = v127;
        break;
      }
    }
  }
  *a3 = v11;
  a3[1] = v10;
  return v6 - (void)v5;
}

unint64_t ZSTD_compressBlock_lazy2_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = (unint64_t)&a4[a5];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v10 = *a3;
  LODWORD(v9) = a3[1];
  uint64_t v11 = *(void *)(a1 + 184);
  uint64_t v12 = *(char **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  unint64_t v140 = (void *)(v7 + v8);
  unint64_t v132 = v13 + *(unsigned int *)(v11 + 24);
  if (a4 - (v7 + v8) - v132 + *(void *)v11) {
    unsigned int v14 = a4;
  }
  else {
    unsigned int v14 = a4 + 1;
  }
  unint64_t v144 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v14 >= v144) {
    goto LABEL_222;
  }
  unint64_t v131 = a3;
  unint64_t v136 = v6 - 1;
  unint64_t v137 = v6 - 3;
  unint64_t v133 = v6 - 32;
  unsigned int v142 = v8 + v13 - v12;
  uint64_t v134 = v13 - v142;
  unint64_t v139 = *(void *)v11;
  uint64_t v141 = *(void *)(v11 + 8);
  while (2)
  {
    uint64_t v15 = v14 + 1;
    int v16 = v14 - v7 - v10;
    uint64_t v17 = (v16 + 1);
    uint64_t v18 = v13 + v17 - v142;
    if (v17 >= v8) {
      uint64_t v18 = v7 + v17;
    }
    unsigned int v138 = v9;
    if ((v8 - v16 - 5) <= 0xFFFFFFFC && *(_DWORD *)v18 == *(_DWORD *)v15)
    {
      if (v17 >= v8) {
        uint64_t v19 = (char *)v6;
      }
      else {
        uint64_t v19 = v12;
      }
      unint64_t v20 = ZSTD_count_2segments(v14 + 5, (char *)(v18 + 4), v6, v19, v140) + 4;
    }
    else
    {
      unint64_t v20 = 0;
    }
    uint64_t v145 = 999999999;
    unint64_t BestMatch_dictMatchState_selectMLS = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v14, v6, &v145);
    if (BestMatch_dictMatchState_selectMLS <= v20) {
      unint64_t v22 = v20;
    }
    else {
      unint64_t v22 = BestMatch_dictMatchState_selectMLS;
    }
    if (v22 < 4)
    {
      v14 += ((v14 - v5) >> 8) + 1;
      uint64_t v12 = (char *)v139;
      LODWORD(v9) = v138;
      goto LABEL_7;
    }
    if (BestMatch_dictMatchState_selectMLS <= v20)
    {
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v15 = v14;
      uint64_t v23 = v145;
    }
    unint64_t v24 = v22;
    uint64_t v25 = v23;
    uint64_t v26 = v15;
    if ((unint64_t)v14 >= v144)
    {
LABEL_25:
      uint64_t v27 = a2;
      if (!v25) {
        goto LABEL_117;
      }
      goto LABEL_26;
    }
    while (1)
    {
      uint64_t v26 = v14 + 1;
      uint64_t v40 = (v14 + 1 - v7 - v10);
      if (v40 >= v8) {
        int v41 = (_DWORD *)(v7 + v40);
      }
      else {
        int v41 = (_DWORD *)(v141 + v40 - v142);
      }
      if ((v8 + ~v40) < 3 || *v41 != *(_DWORD *)v26) {
        goto LABEL_92;
      }
      if (v40 >= v8) {
        unint64_t v42 = (char *)v6;
      }
      else {
        unint64_t v42 = (char *)v139;
      }
      unint64_t v43 = v14 + 5;
      uint64_t v44 = v41 + 1;
      unint64_t v45 = (unint64_t)&v14[v42 - (char *)(v41 + 1) + 5];
      if (v45 >= v6) {
        unint64_t v45 = v6;
      }
      if (v45 - 7 <= (unint64_t)v43)
      {
        int v50 = v14 + 5;
        BOOL v51 = v41 + 1;
        uint64_t v48 = v8 + v7 + 8;
        unint64_t v47 = v6 - 7;
        if ((unint64_t)v43 < v45 - 3)
        {
LABEL_55:
          if (*v51 == *(_DWORD *)v50)
          {
            v50 += 4;
            ++v51;
          }
        }
      }
      else
      {
        unint64_t v46 = *(void *)v43 ^ *v44;
        uint64_t v48 = v8 + v7 + 8;
        unint64_t v47 = v6 - 7;
        if (v46)
        {
          unint64_t v49 = __clz(__rbit64(v46)) >> 3;
          if ((char *)v44 + v49 != v42) {
            goto LABEL_87;
          }
          goto LABEL_66;
        }
        __int16 v55 = v14 + 13;
        while (1)
        {
          uint64_t v56 = &v55[v46];
          if ((unint64_t)&v55[v46] >= v45 - 7) {
            break;
          }
          uint64_t v57 = *(void *)((char *)v41 + v46 + 12);
          v46 += 8;
          unint64_t v58 = *(void *)v56 ^ v57;
          if (v58)
          {
            unint64_t v49 = v46 + (__clz(__rbit64(v58)) >> 3);
            if ((char *)v44 + v49 != v42) {
              goto LABEL_87;
            }
            goto LABEL_66;
          }
        }
        int v50 = &v14[v46 + 13];
        BOOL v51 = (_DWORD *)((char *)v41 + v46 + 12);
        if ((unint64_t)v50 < v45 - 3) {
          goto LABEL_55;
        }
      }
      if ((unint64_t)v50 >= v45 - 1)
      {
        if ((unint64_t)v50 >= v45) {
          goto LABEL_65;
        }
LABEL_63:
        if (*(unsigned __int8 *)v51 == *v50) {
          ++v50;
        }
        goto LABEL_65;
      }
      if (*(unsigned __int16 *)v51 == *(unsigned __int16 *)v50)
      {
        v50 += 2;
        BOOL v51 = (_DWORD *)((char *)v51 + 2);
      }
      if ((unint64_t)v50 < v45) {
        goto LABEL_63;
      }
LABEL_65:
      unint64_t v49 = v50 - v43;
      if ((char *)v44 + v50 - v43 != v42) {
        goto LABEL_87;
      }
LABEL_66:
      unint64_t v52 = &v43[v49];
      if (v47 <= (unint64_t)v52)
      {
        uint64_t v59 = v52;
        unint64_t v60 = (_DWORD *)(v7 + v8);
        if ((unint64_t)v52 >= v137) {
          goto LABEL_77;
        }
        goto LABEL_75;
      }
      unint64_t v53 = *(void *)v52 ^ *v140;
      if (!v53)
      {
        uint64_t v68 = 0;
        uint64_t v69 = (uint64_t)&v14[v49 + 13];
        while (1)
        {
          uint64_t v70 = (void *)(v69 + v68);
          if (v69 + v68 >= v47) {
            break;
          }
          uint64_t v71 = *(void *)(v48 + v68);
          v68 += 8;
          unint64_t v72 = *v70 ^ v71;
          if (v72)
          {
            unint64_t v54 = v68 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_86;
          }
        }
        uint64_t v59 = &v14[v49 + 13 + v68];
        unint64_t v60 = (_DWORD *)(v48 + v68);
        if ((unint64_t)v59 >= v137)
        {
LABEL_77:
          if ((unint64_t)v59 >= v136)
          {
            if ((unint64_t)v59 >= v6)
            {
LABEL_85:
              unint64_t v54 = v59 - v52;
              goto LABEL_86;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v60 == *(unsigned __int16 *)v59)
            {
              v59 += 2;
              unint64_t v60 = (_DWORD *)((char *)v60 + 2);
            }
            if ((unint64_t)v59 >= v6) {
              goto LABEL_85;
            }
          }
          if (*(unsigned __int8 *)v60 == *v59) {
            ++v59;
          }
          goto LABEL_85;
        }
LABEL_75:
        if (*v60 == *(_DWORD *)v59)
        {
          v59 += 4;
          ++v60;
        }
        goto LABEL_77;
      }
      unint64_t v54 = __clz(__rbit64(v53)) >> 3;
LABEL_86:
      v49 += v54;
LABEL_87:
      unint64_t v61 = v49 + 4;
      char v63 = (v49 != -5) & __CFADD__(v49, 5);
      int v62 = 3 * v22 + (__clz(v23 + 1) ^ 0xFFFFFFE0) + 2;
      if (v63) {
        char v63 = 1;
      }
      else {
        char v63 = 3 * (int)v61 <= v62;
      }
      if (!v63)
      {
        uint64_t v23 = 0;
        unint64_t v22 = v61;
        uint64_t v15 = v14 + 1;
      }
LABEL_92:
      uint64_t v145 = 999999999;
      unint64_t v24 = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v14 + 1, v6, &v145);
      if (v24 < 4
        || (uint64_t v25 = v145,
            (int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 1) <= (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 5)))
      {
        if ((unint64_t)v26 >= v144) {
          break;
        }
        uint64_t v26 = v14 + 2;
        uint64_t v64 = (v14 + 2 - v7 - v10);
        uint64_t v65 = v141 + v64 - v142;
        if (v64 >= v8) {
          uint64_t v65 = v7 + v64;
        }
        if ((v8 + ~v64) >= 3 && *(_DWORD *)v65 == *(_DWORD *)v26)
        {
          uint64_t v66 = (char *)(v64 >= v8 ? v6 : v139);
          unint64_t v67 = ZSTD_count_2segments(v14 + 6, (char *)(v65 + 4), v6, v66, v140);
          if (v67 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 2) < 4 * ((int)v67 + 4))
          {
            uint64_t v23 = 0;
            unint64_t v22 = v67 + 4;
            uint64_t v15 = v14 + 2;
          }
        }
        uint64_t v145 = 999999999;
        unint64_t v24 = ZSTD_HcFindBestMatch_dictMatchState_selectMLS(a1, v14 + 2, v6, &v145);
        if (v24 < 4) {
          break;
        }
        uint64_t v25 = v145;
        if ((int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 1) <= (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 8)) {
          break;
        }
      }
      unsigned int v14 = v26;
      uint64_t v15 = v26;
      uint64_t v23 = v25;
      unint64_t v22 = v24;
      if ((unint64_t)v26 >= v144) {
        goto LABEL_25;
      }
    }
    unint64_t v24 = v22;
    LODWORD(v25) = v23;
    uint64_t v26 = v15;
    uint64_t v27 = a2;
    if (!v23)
    {
LABEL_117:
      uint64_t v12 = (char *)v139;
      uint64_t v35 = v8 + v7 + 8;
      unint64_t v34 = v6 - 7;
      unint64_t v36 = v6 - 32;
      uint64_t v29 = v134;
      uint64_t v9 = v138;
      unint64_t v38 = v26 - v5;
      unint64_t v39 = *(_OWORD **)(v27 + 24);
      if ((unint64_t)v26 <= v133) {
        goto LABEL_118;
      }
LABEL_127:
      uint64_t v74 = v9;
      if ((unint64_t)v5 <= v36)
      {
        unint64_t v82 = (char *)v39 + v36 - (void)v5;
        unint64_t v83 = (long long *)v5;
        unint64_t v84 = v39;
        do
        {
          long long v85 = *v83++;
          *v84++ = v85;
        }
        while (v84 < (_OWORD *)v82);
        long long v81 = (_OWORD *)v36;
        if (v36 < (unint64_t)v26) {
          goto LABEL_133;
        }
      }
      else
      {
        long long v81 = v5;
        unint64_t v82 = v39;
        if (v5 >= v26) {
          goto LABEL_152;
        }
LABEL_133:
        if ((unint64_t)v5 <= v36) {
          unint64_t v86 = (char *)v36;
        }
        else {
          unint64_t v86 = v5;
        }
        unint64_t v87 = v26 - v86;
        if ((unint64_t)(v26 - v86) < 8)
        {
          unint64_t v88 = (char *)v81;
          goto LABEL_151;
        }
        if ((unint64_t)((char *)v39 - v5) < 0x20)
        {
          unint64_t v88 = (char *)v81;
          goto LABEL_151;
        }
        if (v87 >= 0x20)
        {
          unint64_t v89 = v87 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v90 = v81 + 1;
          __int16 v91 = (_OWORD *)((char *)v39 + v86 - v5 + 16);
          unint64_t v92 = v87 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v93 = *v90;
            *(v91 - 1) = *(v90 - 1);
            *__int16 v91 = v93;
            v90 += 2;
            v91 += 2;
            v92 -= 32;
          }
          while (v92);
          if (v87 != v89)
          {
            if ((v87 & 0x18) == 0)
            {
              unint64_t v88 = (char *)v81 + v89;
              v82 += v89;
              goto LABEL_151;
            }
            goto LABEL_146;
          }
        }
        else
        {
          unint64_t v89 = 0;
LABEL_146:
          v82 += v87 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v88 = (char *)v81 + (v87 & 0xFFFFFFFFFFFFFFF8);
          char v94 = (uint64_t *)((char *)v81 + v89);
          unint64_t v95 = (void *)((char *)v39 + &v86[v89] - v5);
          unint64_t v96 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v97 = *v94++;
            *v95++ = v97;
            v96 += 8;
          }
          while (v96);
          if (v87 != (v87 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_151:
              char v98 = *v88++;
              *v82++ = v98;
            }
            while (v88 < v26);
          }
        }
      }
LABEL_152:
      *(void *)(v27 + 24) += v38;
      uint64_t v79 = *(void *)(v27 + 8);
      if (v38 >= 0x10000)
      {
        unint64_t v99 = (unint64_t)(v79 - *(void *)v27) >> 3;
        *(_DWORD *)(v27 + 72) = 1;
        *(_DWORD *)(v27 + 76) = v99;
      }
      uint64_t v9 = v74;
      __int16 v80 = v24 - 3;
      *(_WORD *)(v79 + 4) = v38;
      *(_DWORD *)uint64_t v79 = v25 + 1;
      if (v24 - 3 >= 0x10000) {
        goto LABEL_155;
      }
      goto LABEL_156;
    }
LABEL_26:
    unint64_t v28 = v7 + v8;
    if (v8 > (int)v26 - ((int)v25 + (int)v7) + 2) {
      unint64_t v28 = v132;
    }
    uint64_t v29 = v134;
    if (v8 <= (int)v26 - ((int)v25 + (int)v7) + 2) {
      uint64_t v30 = v7;
    }
    else {
      uint64_t v30 = v134;
    }
    if (v26 > v5)
    {
      uint64_t v31 = (v26 - (v25 + v7) + 2);
      if (v30 + v31 > v28)
      {
        uint64_t v32 = (unsigned __int8 *)(v30 + v31 - 1);
        uint64_t v33 = (unsigned __int8 *)(v26 - 1);
        uint64_t v12 = (char *)v139;
        uint64_t v35 = v8 + v7 + 8;
        unint64_t v34 = v6 - 7;
        unint64_t v36 = v6 - 32;
        while (*v33 == *v32)
        {
          ++v24;
          uint64_t v37 = v33 - 1;
          if (v33 > (unsigned __int8 *)v5)
          {
            --v33;
            char v63 = (unint64_t)v32-- > v28;
            if (v63) {
              continue;
            }
          }
          uint64_t v26 = (char *)(v37 + 1);
          uint64_t v9 = v10;
          uint64_t v10 = (v25 - 2);
          unint64_t v38 = v26 - v5;
          unint64_t v39 = *(_OWORD **)(v27 + 24);
          if ((unint64_t)v26 <= v133) {
            goto LABEL_118;
          }
          goto LABEL_127;
        }
        uint64_t v26 = (char *)(v33 + 1);
        uint64_t v9 = v10;
        uint64_t v10 = (v25 - 2);
        unint64_t v38 = v33 + 1 - (unsigned __int8 *)v5;
        unint64_t v39 = *(_OWORD **)(v27 + 24);
        if ((unint64_t)v26 <= v133) {
          goto LABEL_118;
        }
        goto LABEL_127;
      }
    }
    uint64_t v12 = (char *)v139;
    uint64_t v35 = v8 + v7 + 8;
    unint64_t v34 = v6 - 7;
    unint64_t v36 = v6 - 32;
    uint64_t v9 = v10;
    uint64_t v10 = (v25 - 2);
    unint64_t v38 = v26 - v5;
    unint64_t v39 = *(_OWORD **)(v27 + 24);
    if ((unint64_t)v26 > v133) {
      goto LABEL_127;
    }
LABEL_118:
    _OWORD *v39 = *(_OWORD *)v5;
    uint64_t v73 = *(void *)(v27 + 24);
    if (v38 > 0x10)
    {
      uint64_t v74 = v9;
      uint64_t v75 = (_OWORD *)(v73 + 16);
      unint64_t v76 = v73 + v38;
      unsigned int v77 = (long long *)(v5 + 16);
      do
      {
        long long v78 = *v77++;
        *v75++ = v78;
      }
      while ((unint64_t)v75 < v76);
      goto LABEL_152;
    }
    *(void *)(v27 + 24) = v73 + v38;
    uint64_t v79 = *(void *)(v27 + 8);
    __int16 v80 = v24 - 3;
    *(_WORD *)(v79 + 4) = v38;
    *(_DWORD *)uint64_t v79 = v25 + 1;
    if (v24 - 3 >= 0x10000)
    {
LABEL_155:
      unint64_t v100 = (unint64_t)(v79 - *(void *)v27) >> 3;
      *(_DWORD *)(v27 + 72) = 2;
      *(_DWORD *)(v27 + 76) = v100;
    }
LABEL_156:
    *(_WORD *)(v79 + 6) = v80;
    uint64_t v101 = v79 + 8;
    *(void *)(v27 + 8) = v79 + 8;
    unint64_t v5 = &v26[v24];
    if ((unint64_t)&v26[v24] > v144)
    {
      unsigned int v14 = &v26[v24];
      uint64_t v13 = v141;
      goto LABEL_7;
    }
    uint64_t v102 = v10;
    uint64_t v103 = v9;
    uint64_t v13 = v141;
    while (2)
    {
      uint64_t v10 = v103;
      uint64_t v103 = v102;
      uint64_t v104 = (v5 - v7 - v10);
      if (v104 >= v8) {
        uint64_t v105 = v7;
      }
      else {
        uint64_t v105 = v29;
      }
      if ((v8 + ~v104) >= 3)
      {
        uint64_t v106 = v105 + v104;
        if (*(_DWORD *)(v105 + v104) == *(_DWORD *)v5)
        {
          if (v104 >= v8) {
            unint64_t v107 = (void *)v6;
          }
          else {
            unint64_t v107 = v12;
          }
          unint64_t v108 = v5 + 4;
          __int16 v109 = (void *)(v106 + 4);
          uint64_t v110 = (char *)v107 + (void)v5 - v106;
          if ((unint64_t)v110 >= v6) {
            uint64_t v110 = (char *)v6;
          }
          if (v110 - 7 <= v108)
          {
            unint64_t v114 = v5 + 4;
            int v115 = v109;
            if (v108 < v110 - 3)
            {
LABEL_177:
              if (*v115 == *(_DWORD *)v114)
              {
                v114 += 4;
                ++v115;
              }
            }
          }
          else
          {
            unint64_t v111 = *(void *)v108 ^ *v109;
            if (v111)
            {
              unint64_t v112 = __clz(__rbit64(v111)) >> 3;
              if ((void *)((char *)v109 + v112) != v107) {
                goto LABEL_173;
              }
LABEL_188:
              uint64_t v116 = &v108[v112];
              if (v34 <= (unint64_t)v116)
              {
                uint64_t v122 = v116;
                long long v123 = (_DWORD *)(v7 + v8);
                if ((unint64_t)v116 < v137)
                {
LABEL_198:
                  if (*v123 == *(_DWORD *)v122)
                  {
                    v122 += 4;
                    ++v123;
                  }
                }
              }
              else
              {
                unint64_t v117 = *(void *)v116 ^ *v140;
                if (v117)
                {
                  v112 += __clz(__rbit64(v117)) >> 3;
                  if ((unint64_t)v5 > v36) {
                    goto LABEL_174;
                  }
LABEL_209:
                  *(_OWORD *)*(void *)(v27 + 24) = *(_OWORD *)v5;
                  uint64_t v101 = *(void *)(v27 + 8);
                  __int16 v113 = v112 + 1;
                  *(_WORD *)(v101 + 4) = 0;
                  *(_DWORD *)uint64_t v101 = 1;
                  if (v112 + 1 >= 0x10000)
                  {
LABEL_210:
                    unint64_t v124 = (unint64_t)(v101 - *(void *)v27) >> 3;
                    *(_DWORD *)(v27 + 72) = 2;
                    *(_DWORD *)(v27 + 76) = v124;
                  }
LABEL_159:
                  *(_WORD *)(v101 + 6) = v113;
                  v101 += 8;
                  v5 += v112 + 4;
                  *(void *)(v27 + 8) = v101;
                  uint64_t v102 = v10;
                  LODWORD(v9) = v103;
                  unsigned int v14 = v5;
                  if ((unint64_t)v5 > v144) {
                    goto LABEL_7;
                  }
                  continue;
                }
                uint64_t v125 = 0;
                uint64_t v126 = (uint64_t)&v5[v112 + 12];
                while (1)
                {
                  unint64_t v127 = (void *)(v126 + v125);
                  if (v126 + v125 >= v34) {
                    break;
                  }
                  uint64_t v128 = *(void *)(v35 + v125);
                  v125 += 8;
                  unint64_t v129 = *v127 ^ v128;
                  if (v129)
                  {
                    v112 += v125 + (__clz(__rbit64(v129)) >> 3);
                    if ((unint64_t)v5 <= v36) {
                      goto LABEL_209;
                    }
                    goto LABEL_174;
                  }
                }
                uint64_t v122 = &v5[v112 + 12 + v125];
                long long v123 = (_DWORD *)(v35 + v125);
                if ((unint64_t)v122 < v137) {
                  goto LABEL_198;
                }
              }
              if ((unint64_t)v122 >= v136)
              {
                if ((unint64_t)v122 >= v6) {
                  goto LABEL_208;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v123 == *(unsigned __int16 *)v122)
                {
                  v122 += 2;
                  long long v123 = (_DWORD *)((char *)v123 + 2);
                }
                if ((unint64_t)v122 >= v6)
                {
LABEL_208:
                  v112 += v122 - v116;
                  if ((unint64_t)v5 > v36) {
                    goto LABEL_174;
                  }
                  goto LABEL_209;
                }
              }
              if (*(unsigned __int8 *)v123 == *v122) {
                ++v122;
              }
              goto LABEL_208;
            }
            unint64_t v118 = v5 + 12;
            while (1)
            {
              v119 = &v118[v111];
              if (&v118[v111] >= v110 - 7) {
                break;
              }
              uint64_t v120 = *(void *)(v105 + v104 + 12 + v111);
              v111 += 8;
              unint64_t v121 = *(void *)v119 ^ v120;
              if (v121)
              {
                unint64_t v112 = v111 + (__clz(__rbit64(v121)) >> 3);
                if ((void *)((char *)v109 + v112) != v107) {
                  goto LABEL_173;
                }
                goto LABEL_188;
              }
            }
            unint64_t v114 = &v5[v111 + 12];
            int v115 = (_DWORD *)(v105 + v104 + v111 + 12);
            if (v114 < v110 - 3) {
              goto LABEL_177;
            }
          }
          if (v114 >= v110 - 1)
          {
            if (v114 >= v110) {
              goto LABEL_187;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v115 == *(unsigned __int16 *)v114)
            {
              v114 += 2;
              int v115 = (_DWORD *)((char *)v115 + 2);
            }
            if (v114 >= v110)
            {
LABEL_187:
              unint64_t v112 = v114 - v108;
              if ((void *)((char *)v109 + v114 - v108) == v107) {
                goto LABEL_188;
              }
LABEL_173:
              if ((unint64_t)v5 <= v36) {
                goto LABEL_209;
              }
LABEL_174:
              __int16 v113 = v112 + 1;
              *(_WORD *)(v101 + 4) = 0;
              *(_DWORD *)uint64_t v101 = 1;
              if (v112 + 1 >= 0x10000) {
                goto LABEL_210;
              }
              goto LABEL_159;
            }
          }
          if (*(unsigned __int8 *)v115 == *v114) {
            ++v114;
          }
          goto LABEL_187;
        }
      }
      break;
    }
    LODWORD(v9) = v10;
    uint64_t v10 = v102;
    unsigned int v14 = v5;
LABEL_7:
    if ((unint64_t)v14 < v144) {
      continue;
    }
    break;
  }
  a3 = v131;
LABEL_222:
  *a3 = v10;
  a3[1] = v9;
  return v6 - (void)v5;
}

unint64_t ZSTD_compressBlock_btlazy2_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = (unint64_t)a4 + a5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v10 = *a3;
  LODWORD(v9) = a3[1];
  uint64_t v11 = *(void *)(a1 + 184);
  uint64_t v12 = *(char **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  unint64_t v140 = (void *)(v7 + v8);
  unint64_t v132 = v13 + *(unsigned int *)(v11 + 24);
  if (a4 - (v7 + v8) - v132 + *(void *)v11) {
    unsigned int v14 = a4;
  }
  else {
    unsigned int v14 = (uint64_t *)((char *)a4 + 1);
  }
  unint64_t v144 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 >= v144) {
    goto LABEL_222;
  }
  unint64_t v131 = a3;
  unint64_t v136 = v6 - 1;
  unint64_t v137 = v6 - 3;
  unint64_t v133 = v6 - 32;
  unsigned int v142 = v8 + v13 - v12;
  uint64_t v134 = v13 - v142;
  unint64_t v139 = *(void *)v11;
  uint64_t v141 = *(void *)(v11 + 8);
  while (2)
  {
    uint64_t v15 = (uint64_t *)((char *)v14 + 1);
    int v16 = v14 - v7 - v10;
    uint64_t v17 = (v16 + 1);
    uint64_t v18 = v13 + v17 - v142;
    if (v17 >= v8) {
      uint64_t v18 = v7 + v17;
    }
    unsigned int v138 = v9;
    if ((v8 - v16 - 5) <= 0xFFFFFFFC && *(_DWORD *)v18 == *(_DWORD *)v15)
    {
      if (v17 >= v8) {
        uint64_t v19 = (char *)v6;
      }
      else {
        uint64_t v19 = v12;
      }
      unint64_t v20 = ZSTD_count_2segments((uint64_t *)((char *)v14 + 5), (char *)(v18 + 4), v6, v19, v140) + 4;
    }
    else
    {
      unint64_t v20 = 0;
    }
    uint64_t v145 = 999999999;
    unint64_t BestMatch_dictMatchState_selectMLS = ZSTD_BtFindBestMatch_dictMatchState_selectMLS(a1, v14, v6, &v145);
    if (BestMatch_dictMatchState_selectMLS <= v20) {
      unint64_t v22 = v20;
    }
    else {
      unint64_t v22 = BestMatch_dictMatchState_selectMLS;
    }
    if (v22 < 4)
    {
      unsigned int v14 = (uint64_t *)((char *)v14 + (((char *)v14 - (char *)v5) >> 8) + 1);
      uint64_t v12 = (char *)v139;
      LODWORD(v9) = v138;
      goto LABEL_7;
    }
    if (BestMatch_dictMatchState_selectMLS <= v20)
    {
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v15 = v14;
      uint64_t v23 = v145;
    }
    unint64_t v24 = v22;
    uint64_t v25 = v23;
    uint64_t v26 = v15;
    if ((unint64_t)v14 >= v144)
    {
LABEL_25:
      uint64_t v27 = a2;
      if (!v25) {
        goto LABEL_117;
      }
      goto LABEL_26;
    }
    while (1)
    {
      uint64_t v26 = (uint64_t *)((char *)v14 + 1);
      uint64_t v40 = (v14 + 1 - v7 - v10);
      if (v40 >= v8) {
        int v41 = (_DWORD *)(v7 + v40);
      }
      else {
        int v41 = (_DWORD *)(v141 + v40 - v142);
      }
      if ((v8 + ~v40) < 3 || *v41 != *(_DWORD *)v26) {
        goto LABEL_92;
      }
      if (v40 >= v8) {
        unint64_t v42 = (char *)v6;
      }
      else {
        unint64_t v42 = (char *)v139;
      }
      unint64_t v43 = (char *)v14 + 5;
      uint64_t v44 = v41 + 1;
      unint64_t v45 = (unint64_t)v14 + v42 - (char *)(v41 + 1) + 5;
      if (v45 >= v6) {
        unint64_t v45 = v6;
      }
      if (v45 - 7 <= (unint64_t)v43)
      {
        int v50 = (_DWORD *)((char *)v14 + 5);
        BOOL v51 = v41 + 1;
        uint64_t v48 = v8 + v7 + 8;
        unint64_t v47 = v6 - 7;
        if ((unint64_t)v43 < v45 - 3)
        {
LABEL_55:
          if (*v51 == *v50)
          {
            ++v50;
            ++v51;
          }
        }
      }
      else
      {
        unint64_t v46 = *(void *)v43 ^ *v44;
        uint64_t v48 = v8 + v7 + 8;
        unint64_t v47 = v6 - 7;
        if (v46)
        {
          unint64_t v49 = __clz(__rbit64(v46)) >> 3;
          if ((char *)v44 + v49 != v42) {
            goto LABEL_87;
          }
          goto LABEL_66;
        }
        __int16 v55 = (char *)v14 + 13;
        while (1)
        {
          uint64_t v56 = &v55[v46];
          if ((unint64_t)&v55[v46] >= v45 - 7) {
            break;
          }
          uint64_t v57 = *(void *)((char *)v41 + v46 + 12);
          v46 += 8;
          unint64_t v58 = *(void *)v56 ^ v57;
          if (v58)
          {
            unint64_t v49 = v46 + (__clz(__rbit64(v58)) >> 3);
            if ((char *)v44 + v49 != v42) {
              goto LABEL_87;
            }
            goto LABEL_66;
          }
        }
        int v50 = (_DWORD *)((char *)v14 + v46 + 13);
        BOOL v51 = (_DWORD *)((char *)v41 + v46 + 12);
        if ((unint64_t)v50 < v45 - 3) {
          goto LABEL_55;
        }
      }
      if ((unint64_t)v50 >= v45 - 1)
      {
        if ((unint64_t)v50 >= v45) {
          goto LABEL_65;
        }
LABEL_63:
        if (*(unsigned __int8 *)v51 == *(unsigned __int8 *)v50) {
          int v50 = (_DWORD *)((char *)v50 + 1);
        }
        goto LABEL_65;
      }
      if (*(unsigned __int16 *)v51 == *(unsigned __int16 *)v50)
      {
        int v50 = (_DWORD *)((char *)v50 + 2);
        BOOL v51 = (_DWORD *)((char *)v51 + 2);
      }
      if ((unint64_t)v50 < v45) {
        goto LABEL_63;
      }
LABEL_65:
      unint64_t v49 = (char *)v50 - v43;
      if ((char *)v44 + (char *)v50 - v43 != v42) {
        goto LABEL_87;
      }
LABEL_66:
      unint64_t v52 = &v43[v49];
      if (v47 <= (unint64_t)v52)
      {
        uint64_t v59 = v52;
        unint64_t v60 = (_DWORD *)(v7 + v8);
        if ((unint64_t)v52 >= v137) {
          goto LABEL_77;
        }
        goto LABEL_75;
      }
      unint64_t v53 = *(void *)v52 ^ *v140;
      if (!v53)
      {
        uint64_t v68 = 0;
        uint64_t v69 = (uint64_t)v14 + v49 + 13;
        while (1)
        {
          uint64_t v70 = (void *)(v69 + v68);
          if (v69 + v68 >= v47) {
            break;
          }
          uint64_t v71 = *(void *)(v48 + v68);
          v68 += 8;
          unint64_t v72 = *v70 ^ v71;
          if (v72)
          {
            unint64_t v54 = v68 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_86;
          }
        }
        uint64_t v59 = (_DWORD *)((char *)v14 + v49 + v68 + 13);
        unint64_t v60 = (_DWORD *)(v48 + v68);
        if ((unint64_t)v59 >= v137)
        {
LABEL_77:
          if ((unint64_t)v59 >= v136)
          {
            if ((unint64_t)v59 >= v6)
            {
LABEL_85:
              unint64_t v54 = (char *)v59 - v52;
              goto LABEL_86;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v60 == *(unsigned __int16 *)v59)
            {
              uint64_t v59 = (_DWORD *)((char *)v59 + 2);
              unint64_t v60 = (_DWORD *)((char *)v60 + 2);
            }
            if ((unint64_t)v59 >= v6) {
              goto LABEL_85;
            }
          }
          if (*(unsigned __int8 *)v60 == *(unsigned __int8 *)v59) {
            uint64_t v59 = (_DWORD *)((char *)v59 + 1);
          }
          goto LABEL_85;
        }
LABEL_75:
        if (*v60 == *v59)
        {
          ++v59;
          ++v60;
        }
        goto LABEL_77;
      }
      unint64_t v54 = __clz(__rbit64(v53)) >> 3;
LABEL_86:
      v49 += v54;
LABEL_87:
      unint64_t v61 = v49 + 4;
      char v63 = (v49 != -5) & __CFADD__(v49, 5);
      int v62 = 3 * v22 + (__clz(v23 + 1) ^ 0xFFFFFFE0) + 2;
      if (v63) {
        char v63 = 1;
      }
      else {
        char v63 = 3 * (int)v61 <= v62;
      }
      if (!v63)
      {
        uint64_t v23 = 0;
        unint64_t v22 = v61;
        uint64_t v15 = (uint64_t *)((char *)v14 + 1);
      }
LABEL_92:
      uint64_t v145 = 999999999;
      unint64_t v24 = ZSTD_BtFindBestMatch_dictMatchState_selectMLS(a1, (uint64_t *)((char *)v14 + 1), v6, &v145);
      if (v24 < 4
        || (uint64_t v25 = v145,
            (int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 1) <= (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 5)))
      {
        if ((unint64_t)v26 >= v144) {
          break;
        }
        uint64_t v26 = (uint64_t *)((char *)v14 + 2);
        uint64_t v64 = (v14 + 2 - v7 - v10);
        uint64_t v65 = v141 + v64 - v142;
        if (v64 >= v8) {
          uint64_t v65 = v7 + v64;
        }
        if ((v8 + ~v64) >= 3 && *(_DWORD *)v65 == *(_DWORD *)v26)
        {
          uint64_t v66 = (char *)(v64 >= v8 ? v6 : v139);
          unint64_t v67 = ZSTD_count_2segments((uint64_t *)((char *)v14 + 6), (char *)(v65 + 4), v6, v66, v140);
          if (v67 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 2) < 4 * ((int)v67 + 4))
          {
            uint64_t v23 = 0;
            unint64_t v22 = v67 + 4;
            uint64_t v15 = (uint64_t *)((char *)v14 + 2);
          }
        }
        uint64_t v145 = 999999999;
        unint64_t v24 = ZSTD_BtFindBestMatch_dictMatchState_selectMLS(a1, (uint64_t *)((char *)v14 + 2), v6, &v145);
        if (v24 < 4) {
          break;
        }
        uint64_t v25 = v145;
        if ((int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 1) <= (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 8)) {
          break;
        }
      }
      unsigned int v14 = v26;
      uint64_t v15 = v26;
      uint64_t v23 = v25;
      unint64_t v22 = v24;
      if ((unint64_t)v26 >= v144) {
        goto LABEL_25;
      }
    }
    unint64_t v24 = v22;
    LODWORD(v25) = v23;
    uint64_t v26 = v15;
    uint64_t v27 = a2;
    if (!v23)
    {
LABEL_117:
      uint64_t v12 = (char *)v139;
      uint64_t v35 = v8 + v7 + 8;
      unint64_t v34 = v6 - 7;
      unint64_t v36 = v6 - 32;
      uint64_t v29 = v134;
      uint64_t v9 = v138;
      unint64_t v38 = (char *)v26 - (char *)v5;
      unint64_t v39 = *(_OWORD **)(v27 + 24);
      if ((unint64_t)v26 <= v133) {
        goto LABEL_118;
      }
LABEL_127:
      uint64_t v74 = v9;
      if ((unint64_t)v5 <= v36)
      {
        unint64_t v82 = (char *)v39 + v36 - (void)v5;
        unint64_t v83 = v5;
        unint64_t v84 = v39;
        do
        {
          long long v85 = *(_OWORD *)v83;
          v83 += 2;
          *v84++ = v85;
        }
        while (v84 < (_OWORD *)v82);
        long long v81 = (uint64_t *)v36;
        if (v36 < (unint64_t)v26) {
          goto LABEL_133;
        }
      }
      else
      {
        long long v81 = v5;
        unint64_t v82 = v39;
        if (v5 >= v26) {
          goto LABEL_152;
        }
LABEL_133:
        if ((unint64_t)v5 <= v36) {
          unint64_t v86 = (uint64_t *)v36;
        }
        else {
          unint64_t v86 = v5;
        }
        unint64_t v87 = (char *)v26 - (char *)v86;
        if ((unint64_t)((char *)v26 - (char *)v86) < 8)
        {
          unint64_t v88 = v81;
          goto LABEL_151;
        }
        if ((unint64_t)((char *)v39 - (char *)v5) < 0x20)
        {
          unint64_t v88 = v81;
          goto LABEL_151;
        }
        if (v87 >= 0x20)
        {
          unint64_t v89 = v87 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v90 = (long long *)(v81 + 2);
          __int16 v91 = (_OWORD *)((char *)v39 + (char *)v86 - (char *)v5 + 16);
          unint64_t v92 = v87 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v93 = *v90;
            *(v91 - 1) = *(v90 - 1);
            *__int16 v91 = v93;
            v90 += 2;
            v91 += 2;
            v92 -= 32;
          }
          while (v92);
          if (v87 != v89)
          {
            if ((v87 & 0x18) == 0)
            {
              unint64_t v88 = (uint64_t *)((char *)v81 + v89);
              v82 += v89;
              goto LABEL_151;
            }
            goto LABEL_146;
          }
        }
        else
        {
          unint64_t v89 = 0;
LABEL_146:
          v82 += v87 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v88 = (uint64_t *)((char *)v81 + (v87 & 0xFFFFFFFFFFFFFFF8));
          char v94 = (uint64_t *)((char *)v81 + v89);
          unint64_t v95 = (void *)((char *)v39 + (char *)v86 + v89 - (char *)v5);
          unint64_t v96 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v97 = *v94++;
            *v95++ = v97;
            v96 += 8;
          }
          while (v96);
          if (v87 != (v87 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_151:
              char v98 = *(unsigned char *)v88;
              unint64_t v88 = (uint64_t *)((char *)v88 + 1);
              *v82++ = v98;
            }
            while (v88 < v26);
          }
        }
      }
LABEL_152:
      *(void *)(v27 + 24) += v38;
      uint64_t v79 = *(void *)(v27 + 8);
      if (v38 >= 0x10000)
      {
        unint64_t v99 = (unint64_t)(v79 - *(void *)v27) >> 3;
        *(_DWORD *)(v27 + 72) = 1;
        *(_DWORD *)(v27 + 76) = v99;
      }
      uint64_t v9 = v74;
      __int16 v80 = v24 - 3;
      *(_WORD *)(v79 + 4) = v38;
      *(_DWORD *)uint64_t v79 = v25 + 1;
      if (v24 - 3 >= 0x10000) {
        goto LABEL_155;
      }
      goto LABEL_156;
    }
LABEL_26:
    unint64_t v28 = v7 + v8;
    if (v8 > (int)v26 - ((int)v25 + (int)v7) + 2) {
      unint64_t v28 = v132;
    }
    uint64_t v29 = v134;
    if (v8 <= (int)v26 - ((int)v25 + (int)v7) + 2) {
      uint64_t v30 = v7;
    }
    else {
      uint64_t v30 = v134;
    }
    if (v26 > v5)
    {
      uint64_t v31 = (v26 - (v25 + v7) + 2);
      if (v30 + v31 > v28)
      {
        uint64_t v32 = (unsigned __int8 *)(v30 + v31 - 1);
        uint64_t v33 = (unsigned __int8 *)v26 - 1;
        uint64_t v12 = (char *)v139;
        uint64_t v35 = v8 + v7 + 8;
        unint64_t v34 = v6 - 7;
        unint64_t v36 = v6 - 32;
        while (*v33 == *v32)
        {
          ++v24;
          uint64_t v37 = v33 - 1;
          if (v33 > (unsigned __int8 *)v5)
          {
            --v33;
            char v63 = (unint64_t)v32-- > v28;
            if (v63) {
              continue;
            }
          }
          uint64_t v26 = (uint64_t *)(v37 + 1);
          uint64_t v9 = v10;
          uint64_t v10 = (v25 - 2);
          unint64_t v38 = (char *)v26 - (char *)v5;
          unint64_t v39 = *(_OWORD **)(v27 + 24);
          if ((unint64_t)v26 <= v133) {
            goto LABEL_118;
          }
          goto LABEL_127;
        }
        uint64_t v26 = (uint64_t *)(v33 + 1);
        uint64_t v9 = v10;
        uint64_t v10 = (v25 - 2);
        unint64_t v38 = v33 + 1 - (unsigned __int8 *)v5;
        unint64_t v39 = *(_OWORD **)(v27 + 24);
        if ((unint64_t)v26 <= v133) {
          goto LABEL_118;
        }
        goto LABEL_127;
      }
    }
    uint64_t v12 = (char *)v139;
    uint64_t v35 = v8 + v7 + 8;
    unint64_t v34 = v6 - 7;
    unint64_t v36 = v6 - 32;
    uint64_t v9 = v10;
    uint64_t v10 = (v25 - 2);
    unint64_t v38 = (char *)v26 - (char *)v5;
    unint64_t v39 = *(_OWORD **)(v27 + 24);
    if ((unint64_t)v26 > v133) {
      goto LABEL_127;
    }
LABEL_118:
    _OWORD *v39 = *(_OWORD *)v5;
    uint64_t v73 = *(void *)(v27 + 24);
    if (v38 > 0x10)
    {
      uint64_t v74 = v9;
      uint64_t v75 = (_OWORD *)(v73 + 16);
      unint64_t v76 = v73 + v38;
      unsigned int v77 = (long long *)(v5 + 2);
      do
      {
        long long v78 = *v77++;
        *v75++ = v78;
      }
      while ((unint64_t)v75 < v76);
      goto LABEL_152;
    }
    *(void *)(v27 + 24) = v73 + v38;
    uint64_t v79 = *(void *)(v27 + 8);
    __int16 v80 = v24 - 3;
    *(_WORD *)(v79 + 4) = v38;
    *(_DWORD *)uint64_t v79 = v25 + 1;
    if (v24 - 3 >= 0x10000)
    {
LABEL_155:
      unint64_t v100 = (unint64_t)(v79 - *(void *)v27) >> 3;
      *(_DWORD *)(v27 + 72) = 2;
      *(_DWORD *)(v27 + 76) = v100;
    }
LABEL_156:
    *(_WORD *)(v79 + 6) = v80;
    uint64_t v101 = v79 + 8;
    *(void *)(v27 + 8) = v79 + 8;
    unint64_t v5 = (uint64_t *)((char *)v26 + v24);
    if ((unint64_t)v26 + v24 > v144)
    {
      unsigned int v14 = (uint64_t *)((char *)v26 + v24);
      uint64_t v13 = v141;
      goto LABEL_7;
    }
    uint64_t v102 = v10;
    uint64_t v103 = v9;
    uint64_t v13 = v141;
    while (2)
    {
      uint64_t v10 = v103;
      uint64_t v103 = v102;
      uint64_t v104 = (v5 - v7 - v10);
      if (v104 >= v8) {
        uint64_t v105 = v7;
      }
      else {
        uint64_t v105 = v29;
      }
      if ((v8 + ~v104) >= 3)
      {
        uint64_t v106 = v105 + v104;
        if (*(_DWORD *)(v105 + v104) == *(_DWORD *)v5)
        {
          if (v104 >= v8) {
            unint64_t v107 = (void *)v6;
          }
          else {
            unint64_t v107 = v12;
          }
          unint64_t v108 = (char *)v5 + 4;
          __int16 v109 = (void *)(v106 + 4);
          uint64_t v110 = (char *)v107 + (void)v5 - v106;
          if ((unint64_t)v110 >= v6) {
            uint64_t v110 = (char *)v6;
          }
          if (v110 - 7 <= v108)
          {
            unint64_t v114 = (char *)v5 + 4;
            int v115 = v109;
            if (v108 < v110 - 3)
            {
LABEL_177:
              if (*v115 == *(_DWORD *)v114)
              {
                v114 += 4;
                ++v115;
              }
            }
          }
          else
          {
            unint64_t v111 = *(void *)v108 ^ *v109;
            if (v111)
            {
              unint64_t v112 = __clz(__rbit64(v111)) >> 3;
              if ((void *)((char *)v109 + v112) != v107) {
                goto LABEL_173;
              }
LABEL_188:
              uint64_t v116 = &v108[v112];
              if (v34 <= (unint64_t)v116)
              {
                uint64_t v122 = v116;
                long long v123 = (_DWORD *)(v7 + v8);
                if ((unint64_t)v116 < v137)
                {
LABEL_198:
                  if (*v123 == *v122)
                  {
                    ++v122;
                    ++v123;
                  }
                }
              }
              else
              {
                unint64_t v117 = *(void *)v116 ^ *v140;
                if (v117)
                {
                  v112 += __clz(__rbit64(v117)) >> 3;
                  if ((unint64_t)v5 > v36) {
                    goto LABEL_174;
                  }
LABEL_209:
                  *(_OWORD *)*(void *)(v27 + 24) = *(_OWORD *)v5;
                  uint64_t v101 = *(void *)(v27 + 8);
                  __int16 v113 = v112 + 1;
                  *(_WORD *)(v101 + 4) = 0;
                  *(_DWORD *)uint64_t v101 = 1;
                  if (v112 + 1 >= 0x10000)
                  {
LABEL_210:
                    unint64_t v124 = (unint64_t)(v101 - *(void *)v27) >> 3;
                    *(_DWORD *)(v27 + 72) = 2;
                    *(_DWORD *)(v27 + 76) = v124;
                  }
LABEL_159:
                  *(_WORD *)(v101 + 6) = v113;
                  v101 += 8;
                  unint64_t v5 = (uint64_t *)((char *)v5 + v112 + 4);
                  *(void *)(v27 + 8) = v101;
                  uint64_t v102 = v10;
                  LODWORD(v9) = v103;
                  unsigned int v14 = v5;
                  if ((unint64_t)v5 > v144) {
                    goto LABEL_7;
                  }
                  continue;
                }
                uint64_t v125 = 0;
                uint64_t v126 = (uint64_t)v5 + v112 + 12;
                while (1)
                {
                  unint64_t v127 = (void *)(v126 + v125);
                  if (v126 + v125 >= v34) {
                    break;
                  }
                  uint64_t v128 = *(void *)(v35 + v125);
                  v125 += 8;
                  unint64_t v129 = *v127 ^ v128;
                  if (v129)
                  {
                    v112 += v125 + (__clz(__rbit64(v129)) >> 3);
                    if ((unint64_t)v5 <= v36) {
                      goto LABEL_209;
                    }
                    goto LABEL_174;
                  }
                }
                uint64_t v122 = (_DWORD *)((char *)v5 + v112 + v125 + 12);
                long long v123 = (_DWORD *)(v35 + v125);
                if ((unint64_t)v122 < v137) {
                  goto LABEL_198;
                }
              }
              if ((unint64_t)v122 >= v136)
              {
                if ((unint64_t)v122 >= v6) {
                  goto LABEL_208;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v123 == *(unsigned __int16 *)v122)
                {
                  uint64_t v122 = (_DWORD *)((char *)v122 + 2);
                  long long v123 = (_DWORD *)((char *)v123 + 2);
                }
                if ((unint64_t)v122 >= v6)
                {
LABEL_208:
                  v112 += (char *)v122 - v116;
                  if ((unint64_t)v5 > v36) {
                    goto LABEL_174;
                  }
                  goto LABEL_209;
                }
              }
              if (*(unsigned __int8 *)v123 == *(unsigned __int8 *)v122) {
                uint64_t v122 = (_DWORD *)((char *)v122 + 1);
              }
              goto LABEL_208;
            }
            unint64_t v118 = (char *)v5 + 12;
            while (1)
            {
              v119 = &v118[v111];
              if (&v118[v111] >= v110 - 7) {
                break;
              }
              uint64_t v120 = *(void *)(v105 + v104 + 12 + v111);
              v111 += 8;
              unint64_t v121 = *(void *)v119 ^ v120;
              if (v121)
              {
                unint64_t v112 = v111 + (__clz(__rbit64(v121)) >> 3);
                if ((void *)((char *)v109 + v112) != v107) {
                  goto LABEL_173;
                }
                goto LABEL_188;
              }
            }
            unint64_t v114 = (char *)v5 + v111 + 12;
            int v115 = (_DWORD *)(v105 + v104 + v111 + 12);
            if (v114 < v110 - 3) {
              goto LABEL_177;
            }
          }
          if (v114 >= v110 - 1)
          {
            if (v114 >= v110) {
              goto LABEL_187;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v115 == *(unsigned __int16 *)v114)
            {
              v114 += 2;
              int v115 = (_DWORD *)((char *)v115 + 2);
            }
            if (v114 >= v110)
            {
LABEL_187:
              unint64_t v112 = v114 - v108;
              if ((void *)((char *)v109 + v114 - v108) == v107) {
                goto LABEL_188;
              }
LABEL_173:
              if ((unint64_t)v5 <= v36) {
                goto LABEL_209;
              }
LABEL_174:
              __int16 v113 = v112 + 1;
              *(_WORD *)(v101 + 4) = 0;
              *(_DWORD *)uint64_t v101 = 1;
              if (v112 + 1 >= 0x10000) {
                goto LABEL_210;
              }
              goto LABEL_159;
            }
          }
          if (*(unsigned __int8 *)v115 == *v114) {
            ++v114;
          }
          goto LABEL_187;
        }
      }
      break;
    }
    LODWORD(v9) = v10;
    uint64_t v10 = v102;
    unsigned int v14 = v5;
LABEL_7:
    if ((unint64_t)v14 < v144) {
      continue;
    }
    break;
  }
  a3 = v131;
LABEL_222:
  *a3 = v10;
  a3[1] = v9;
  return v6 - (void)v5;
}

unint64_t ZSTD_compressBlock_btopt_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7 = a1;
  uint64_t v1270 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (char **)(a1 + 80);
  v1213 = a4;
  v1259 = &a4[a5];
  unint64_t v1223 = (unint64_t)&a4[a5 - 8];
  uint64_t v9 = (unsigned __int8 *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
    int v10 = 4095;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 212);
  }
  unsigned int v1189 = v10;
  if (*(_DWORD *)(a1 + 208) == 3) {
    uint64_t v11 = 3;
  }
  else {
    uint64_t v11 = 4;
  }
  uint64_t v1258 = v11;
  unsigned int v940 = *(_DWORD *)(a1 + 36);
  uint64_t v12 = *(unsigned int **)(a1 + 120);
  v1261 = *(_DWORD **)(a1 + 112);
  unsigned int v1269 = 0;
  uint64_t v1268 = 0;
  long long v1265 = 0u;
  memset(v1266, 0, sizeof(v1266));
  long long v1264 = 0u;
  uint64_t v13 = *(long long **)(a1 + 224);
  if (v13)
  {
    long long v14 = v13[1];
    long long v1264 = *v13;
    long long v1265 = v14;
    *(void *)v1266 = *((void *)v13 + 4);
  }
  else
  {
    *(void *)v1266 = 0;
    long long v1264 = 0uLL;
    long long v1265 = 0uLL;
  }
  *(void *)&v1266[12] = 0;
  *(_DWORD *)&v1266[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1264, 0, a5);
  ZSTD_rescaleFreqs(v8, v1213, a5, 0);
  if (v9 == v1213) {
    uint64_t v15 = v1213 + 1;
  }
  else {
    uint64_t v15 = v1213;
  }
  unint64_t v16 = (unint64_t)v1259;
  if ((unint64_t)v15 < v1223)
  {
    unsigned int v1113 = 0;
    unint64_t v1260 = (unint64_t)(v1259 - 7);
    unint64_t v1236 = (unint64_t)(v1259 - 1);
    unint64_t v1237 = (unint64_t)(v1259 - 3);
    uint64_t v17 = (v1258 - 1) | 1;
    v1262 = v12 + 14;
    uint64_t v938 = v1258 - v17;
    unsigned int v939 = &v12[7 * v17];
    uint64_t v18 = v12 + 7;
    uint64_t v1224 = v7;
    v1225 = v8;
    uint64_t v19 = v1213;
    uint64_t v1024 = a2;
    while (1)
    {
      v1238 = v19;
      unsigned int v21 = v15 - v19;
      unsigned int v1263 = 0;
      uint64_t v22 = *(void *)(v7 + 8);
      uint64_t v23 = *(unsigned int *)(v7 + 36);
      v1257 = v15;
      if (v22 + v23 > (unint64_t)v15)
      {
        LODWORD(v24) = 0;
        goto LABEL_602;
      }
      int v25 = *(_DWORD *)(v7 + 208);
      for (unsigned int i = v15 - v22; v23 < i; LODWORD(v23) = inserted + v23)
      {
        int inserted = ZSTD_insertBt1(v7, (void *)(v22 + v23), v16, v25, 0);
        unint64_t v16 = (unint64_t)v1259;
      }
      *(_DWORD *)(v7 + 36) = i;
      if ((v25 - 6) < 2) {
        break;
      }
      if (v25 == 5)
      {
        LODWORD(v24) = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          unsigned int v139 = 4095;
        }
        else {
          unsigned int v139 = *(_DWORD *)(v7 + 212);
        }
        uint64_t v140 = *(void *)(v7 + 8);
        uint64_t v141 = (v1257 - v140);
        unsigned int v142 = (char *)(v1257 + 12);
        int v1043 = *(_DWORD *)(v7 + 204);
        uint64_t v1052 = *(void *)(v7 + 48);
        unint64_t v1034 = (0xCF1BBCDCBB000000 * *(void *)v1257) >> -(char)*(_DWORD *)(v7 + 200);
        unsigned int v143 = *(_DWORD *)(v1052 + 4 * v1034);
        int v144 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        int v989 = ~v144;
        unsigned int v145 = v141 + v144 + 1;
        if (v141 < ~v144) {
          unsigned int v145 = 0;
        }
        unsigned int v981 = v145;
        uint64_t v146 = *(unsigned int *)(v7 + 24);
        unsigned int v147 = 1 << *(_DWORD *)(v7 + 192);
        if ((int)v141 - *(_DWORD *)(v7 + 28) > v147 && *(_DWORD *)(v7 + 32) == 0) {
          unsigned int v149 = v141 - v147;
        }
        else {
          unsigned int v149 = *(_DWORD *)(v7 + 28);
        }
        uint64_t v15 = v1257;
        if (v149 <= 1) {
          int v150 = 1;
        }
        else {
          int v150 = v149;
        }
        unsigned int v1198 = v150;
        uint64_t v151 = *(void *)(v7 + 184);
        uint64_t v152 = *(void *)(v151 + 8);
        v1210 = *(char **)v151;
        unsigned int v153 = *(_DWORD *)(v151 + 28);
        uint64_t v154 = v149 - (*(void *)v151 - v152);
        uint64_t v1005 = v151;
        int v997 = *(_DWORD *)(v151 + 200);
        unsigned int v155 = ~(-1 << (*(_DWORD *)(v151 + 196) - 1));
        unsigned int v156 = *(void *)v151 - v152 - v153;
        uint64_t v157 = *(void *)(v7 + 64);
        unsigned int v976 = v1210 - v152;
        unsigned int v1069 = v155;
        if (v156 <= v155) {
          unsigned int v158 = v153;
        }
        else {
          unsigned int v158 = v1210 - v152 - v155;
        }
        unsigned int v1080 = v158;
        unsigned int v159 = v141 - v146;
        uint64_t v1091 = v152;
        uint64_t v160 = v152 - v154;
        unsigned int v1101 = v153;
        uint64_t v1061 = v149 - (v1210 - v152);
        uint64_t v161 = v141 - v153 - v154;
        uint64_t v162 = v21 == 0;
        uint64_t v1026 = v140;
        v1206 = (void *)(v140 + v146);
        uint64_t v1192 = v157;
        v1018 = (unsigned int *)(v157 + 8 * (v141 & ~v144));
        int v1267 = 0;
        int v1215 = v141 + 9;
        if (v21) {
          unint64_t v163 = 3;
        }
        else {
          unint64_t v163 = 4;
        }
        int v164 = v1257 + 4;
        if (v21) {
          int v165 = 0;
        }
        else {
          int v165 = -1;
        }
        unint64_t v166 = (v1258 - 1);
        unsigned int v1179 = v139;
        int v1157 = v146;
        unsigned int v1144 = v143;
        unsigned int v1129 = v149;
        unint64_t v1116 = v163;
        int v1109 = v165;
        while (1)
        {
          if (v162 == 3)
          {
            unsigned int v167 = *a3 - 1;
            unsigned int v168 = v141 - v167;
            unsigned int v169 = *a3 - 2;
            if (v169 >= v159) {
              goto LABEL_211;
            }
          }
          else
          {
            unsigned int v167 = a3[v162];
            unsigned int v168 = v141 - v167;
            unsigned int v169 = v167 - 1;
            if (v167 - 1 >= v159)
            {
LABEL_211:
              if (v169 < v161 && v146 + ~v168 >= 3)
              {
                uint64_t v171 = v160 + v168;
                if (*(_DWORD *)v15 == *(_DWORD *)v171)
                {
                  int v1242 = v24;
                  unint64_t v1229 = v166;
                  uint64_t v172 = v141;
                  uint64_t v173 = v161;
                  int v174 = ZSTD_count_2segments(v164, (char *)(v171 + 4), v16, v1210, v1206);
                  unint64_t v163 = v1116;
                  uint64_t v161 = v173;
                  int v165 = v1109;
                  unsigned int v149 = v1129;
                  LODWORD(v146) = v1157;
                  unsigned int v142 = (char *)(v1257 + 12);
                  unsigned int v143 = v1144;
                  uint64_t v141 = v172;
                  unint64_t v166 = v1229;
                  LODWORD(v24) = v1242;
                  uint64_t v15 = v1257;
                  unint64_t v16 = (unint64_t)v1259;
                  unsigned int v175 = v174 + 4;
                  unsigned int v139 = v1179;
                  unint64_t v176 = v175;
                  if (v1229 < v175) {
                    goto LABEL_225;
                  }
                }
              }
              goto LABEL_208;
            }
          }
          if (v168 < v149 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v167]) {
            goto LABEL_208;
          }
          uint64_t v179 = -(uint64_t)v167;
          unint64_t v180 = (char *)v164 - v167;
          if (v1260 <= (unint64_t)v164) {
            break;
          }
          unint64_t v181 = *v164 ^ *(void *)v180;
          if (v181)
          {
            unsigned int v175 = (__clz(__rbit64(v181)) >> 3) + 4;
            unint64_t v176 = v175;
            if (v166 < v175) {
              goto LABEL_225;
            }
            goto LABEL_208;
          }
          uint64_t v183 = 0;
          do
          {
            uint64_t v182 = &v142[v183];
            if ((unint64_t)&v142[v183] >= v1260)
            {
              unint64_t v180 = &v182[v179];
              if ((unint64_t)v182 >= v1237) {
                goto LABEL_235;
              }
              goto LABEL_233;
            }
            uint64_t v184 = *(void *)&v142[v179 + v183];
            v183 += 8;
            unint64_t v185 = *(void *)v182 ^ v184;
          }
          while (!v185);
          unsigned int v175 = v183 + (__clz(__rbit64(v185)) >> 3) + 4;
          unint64_t v176 = v175;
          if (v166 < v175)
          {
LABEL_225:
            unint64_t v178 = &v1261[2 * v24];
            *unint64_t v178 = v162 + v165;
            v178[1] = v175;
            LODWORD(v24) = v24 + 1;
            if (v175 > v139) {
              goto LABEL_601;
            }
            unint64_t v166 = v176;
            if (&v15[v176] == (unsigned __int8 *)v16) {
              goto LABEL_601;
            }
          }
LABEL_208:
          if (++v162 >= v163)
          {
            *(_DWORD *)(v1052 + 4 * v1034) = v141;
            int v263 = ~(-1 << v1043);
            if (v143 < v1198)
            {
              uint64_t v264 = v1026;
              unint64_t v127 = v1018 + 1;
              uint64_t v126 = v1018;
LABEL_373:
              *unint64_t v127 = 0;
              unsigned int *v126 = 0;
              int v1241 = v24;
              if (!v263) {
                goto LABEL_599;
              }
              uint64_t v15 = v1257;
              unsigned int v265 = *(_DWORD *)(*(void *)(v1005 + 48) + 4
                                                         * ((0xCF1BBCDCBB000000 * *(void *)v1257) >> -(char)v997));
              if (v265 <= v1101) {
                goto LABEL_600;
              }
              unint64_t v266 = 0;
              unint64_t v267 = 0;
              uint64_t v1170 = *(void *)(v1005 + 64);
              uint64_t v1180 = v264 + v1061;
              int v1159 = v141 + 2;
              int v1200 = v263 - 1;
              while (1)
              {
                unint64_t v1231 = v166;
                if (v267 >= v266) {
                  unint64_t v268 = v266;
                }
                else {
                  unint64_t v268 = v267;
                }
                unint64_t v269 = ZSTD_count_2segments(&v15[v268], (char *)(v1091 + v265 + v268), v16, v1210, v1206) + v268;
                unint64_t v166 = v1231;
                if (v269 + v265 >= v976) {
                  uint64_t v270 = v1180 + v265;
                }
                else {
                  uint64_t v270 = v1091 + v265;
                }
                if (v269 <= v1231)
                {
                  unint64_t v16 = (unint64_t)v1259;
                  uint64_t v15 = v1257;
                  if (v265 <= v1080) {
                    goto LABEL_600;
                  }
                }
                else
                {
                  int v271 = v1215;
                  if (v269 > v1215 - (v265 + v1061)) {
                    int v271 = v265 + v1061 + v269;
                  }
                  int v1215 = v271;
                  unint64_t v272 = &v1261[2 * v1241];
                  *unint64_t v272 = v1159 - (v265 + v1061);
                  v272[1] = v269;
                  ++v1241;
                  if (v269 > 0x1000) {
                    goto LABEL_598;
                  }
                  uint64_t v15 = v1257;
                  unint64_t v166 = v269;
                  unint64_t v16 = (unint64_t)v1259;
                  if (&v1257[v269] == v1259 || v265 <= v1080) {
                    goto LABEL_600;
                  }
                }
                unsigned int v273 = *(unsigned __int8 *)(v270 + v269);
                unsigned int v274 = v15[v269];
                BOOL v57 = v273 >= v274;
                BOOL v275 = v273 < v274;
                if (v57) {
                  unint64_t v266 = v269;
                }
                else {
                  unint64_t v267 = v269;
                }
                if (v1200)
                {
                  --v1200;
                  unsigned int v265 = *(_DWORD *)(v1170 + 8 * (v265 & v1069) + 4 * v275);
                  if (v265 > v1101) {
                    continue;
                  }
                }
                goto LABEL_600;
              }
            }
            unint64_t v303 = 0;
            unint64_t v304 = 0;
            v1246 = v1257 + 8;
            uint64_t v264 = v1026;
            uint64_t v305 = v1026 + 8;
            unint64_t v127 = v1018 + 1;
            uint64_t v126 = v1018;
            while (2)
            {
              if (v304 >= v303) {
                unint64_t v306 = v303;
              }
              else {
                unint64_t v306 = v304;
              }
              uint64_t v307 = v143;
              uint64_t v308 = v1026 + v143;
              unint64_t v309 = &v1257[v306];
              uint64_t v310 = (void *)(v308 + v306);
              if (v1260 <= (unint64_t)&v1257[v306])
              {
                unsigned int v313 = &v1257[v306];
                if ((unint64_t)v309 >= v1237) {
                  goto LABEL_459;
                }
              }
              else
              {
                unint64_t v311 = *(void *)v309 ^ *v310;
                if (v311)
                {
                  unint64_t v312 = (__clz(__rbit64(v311)) >> 3) + v306;
                  if (v312 <= v166) {
                    goto LABEL_475;
                  }
LABEL_468:
                  int v314 = v1215;
                  if (v312 > v1215 - v143) {
                    int v314 = v143 + v312;
                  }
                  int v1215 = v314;
                  unsigned int v315 = &v1261[2 * v24];
                  *unsigned int v315 = v141 + 2 - v143;
                  v315[1] = v312;
                  LODWORD(v24) = v24 + 1;
                  if (v312 > 0x1000 || &v1257[v312] == (unsigned __int8 *)v16) {
                    goto LABEL_573;
                  }
                  unint64_t v166 = v312;
LABEL_475:
                  uint64_t v317 = (unsigned int *)(v1192 + 8 * (v143 & v989));
                  if (*(unsigned __int8 *)(v308 + v312) >= v1257[v312])
                  {
                    *unint64_t v127 = v143;
                    if (v143 <= v981)
                    {
                      unint64_t v127 = (unsigned int *)&v1267;
                      goto LABEL_373;
                    }
                    unint64_t v303 = v312;
                    unint64_t v127 = (unsigned int *)(v1192 + 8 * (v143 & v989));
                    BOOL v57 = v263-- != 0;
                    if (!v57) {
                      goto LABEL_373;
                    }
                  }
                  else
                  {
                    unsigned int *v126 = v143;
                    if (v143 <= v981)
                    {
                      uint64_t v126 = (unsigned int *)&v1267;
                      goto LABEL_373;
                    }
                    ++v317;
                    unint64_t v304 = v312;
                    uint64_t v126 = v317;
                    BOOL v57 = v263-- != 0;
                    if (!v57) {
                      goto LABEL_373;
                    }
                  }
                  unsigned int v143 = *v317;
                  if (*v317 < v1198) {
                    goto LABEL_373;
                  }
                  continue;
                }
                unsigned int v318 = v143;
                uint64_t v319 = 0;
                uint64_t v320 = (char *)v1246 + v306;
                while (1)
                {
                  uint64_t v321 = &v320[v319];
                  if ((unint64_t)&v320[v319] >= v1260) {
                    break;
                  }
                  uint64_t v322 = *(void *)(v305 + v306 + v307 + v319);
                  v319 += 8;
                  unint64_t v323 = *(void *)v321 ^ v322;
                  if (v323)
                  {
                    unint64_t v324 = __clz(__rbit64(v323));
                    unsigned int v143 = v318;
                    unint64_t v312 = v319 + (v324 >> 3) + v306;
                    if (v312 <= v166) {
                      goto LABEL_475;
                    }
                    goto LABEL_468;
                  }
                }
                unsigned int v313 = (unsigned __int8 *)v1246 + v306 + v319;
                uint64_t v310 = (void *)(v305 + v306 + v307 + v319);
                unsigned int v143 = v318;
                if ((unint64_t)v313 >= v1237)
                {
LABEL_459:
                  if ((unint64_t)v313 >= v1236)
                  {
                    if ((unint64_t)v313 >= v16) {
                      goto LABEL_467;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v310 == *(unsigned __int16 *)v313)
                    {
                      v313 += 2;
                      uint64_t v310 = (void *)((char *)v310 + 2);
                    }
                    if ((unint64_t)v313 >= v16)
                    {
LABEL_467:
                      unint64_t v312 = v313 - v1257;
                      if (v313 - v1257 <= v166) {
                        goto LABEL_475;
                      }
                      goto LABEL_468;
                    }
                  }
                  if (*(unsigned __int8 *)v310 == *v313) {
                    ++v313;
                  }
                  goto LABEL_467;
                }
              }
              break;
            }
            if (*(_DWORD *)v310 == *(_DWORD *)v313)
            {
              v313 += 4;
              uint64_t v310 = (void *)((char *)v310 + 4);
            }
            goto LABEL_459;
          }
        }
        uint64_t v182 = (char *)(v1257 + 4);
        if ((unint64_t)v164 >= v1237) {
          goto LABEL_235;
        }
LABEL_233:
        if (*(_DWORD *)v180 == *(_DWORD *)v182)
        {
          v182 += 4;
          v180 += 4;
        }
LABEL_235:
        if ((unint64_t)v182 >= v1236)
        {
          if ((unint64_t)v182 >= v16) {
            goto LABEL_243;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v180 == *(unsigned __int16 *)v182)
          {
            v182 += 2;
            v180 += 2;
          }
          if ((unint64_t)v182 >= v16)
          {
LABEL_243:
            unsigned int v175 = v182 - v1257;
            unint64_t v176 = v175;
            if (v166 < v175) {
              goto LABEL_225;
            }
            goto LABEL_208;
          }
        }
        if (*v180 == *v182) {
          LODWORD(v182) = v182 + 1;
        }
        goto LABEL_243;
      }
      if (v25 != 3)
      {
        uint64_t v24 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          unsigned int v186 = 4095;
        }
        else {
          unsigned int v186 = *(_DWORD *)(v7 + 212);
        }
        uint64_t v187 = *(void *)(v7 + 8);
        uint64_t v188 = (v1257 - v187);
        uint64_t v189 = (char *)(v1257 + 12);
        int v1044 = *(_DWORD *)(v7 + 204);
        uint64_t v1053 = *(void *)(v7 + 48);
        uint64_t v1035 = (-1640531535 * *(_DWORD *)v1257) >> -(char)*(_DWORD *)(v7 + 200);
        unsigned int v190 = *(_DWORD *)(v1053 + 4 * v1035);
        int v191 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        int v990 = ~v191;
        unsigned int v192 = v188 + v191 + 1;
        if (v188 < ~v191) {
          unsigned int v192 = 0;
        }
        unsigned int v982 = v192;
        uint64_t v193 = *(unsigned int *)(v7 + 24);
        unsigned int v194 = 1 << *(_DWORD *)(v7 + 192);
        if ((int)v188 - *(_DWORD *)(v7 + 28) > v194 && *(_DWORD *)(v7 + 32) == 0) {
          unsigned int v196 = v188 - v194;
        }
        else {
          unsigned int v196 = *(_DWORD *)(v7 + 28);
        }
        uint64_t v15 = v1257;
        if (v196 <= 1) {
          int v197 = 1;
        }
        else {
          int v197 = v196;
        }
        unsigned int v1243 = v197;
        uint64_t v198 = *(void *)(v7 + 184);
        uint64_t v199 = *(void *)(v198 + 8);
        v1211 = *(char **)v198;
        unsigned int v200 = *(_DWORD *)(v198 + 28);
        uint64_t v201 = v196 - (*(void *)v198 - v199);
        uint64_t v1006 = v198;
        int v998 = *(_DWORD *)(v198 + 200);
        unsigned int v202 = ~(-1 << (*(_DWORD *)(v198 + 196) - 1));
        unsigned int v203 = *(void *)v198 - v199 - v200;
        uint64_t v204 = *(void *)(v7 + 64);
        unsigned int v977 = v1211 - v199;
        unsigned int v1070 = v202;
        if (v203 <= v202) {
          unsigned int v205 = v200;
        }
        else {
          unsigned int v205 = v1211 - v199 - v202;
        }
        unsigned int v1081 = v205;
        unsigned int v206 = v188 - v193;
        uint64_t v1092 = v199;
        uint64_t v207 = v199 - v201;
        unsigned int v1102 = v200;
        uint64_t v1062 = v196 - (v1211 - v199);
        uint64_t v208 = v188 - v200 - v201;
        uint64_t v209 = v21 == 0;
        uint64_t v1027 = v187;
        uint64_t v1199 = v204;
        v1207 = (void *)(v187 + v193);
        v1019 = (unsigned int *)(v204 + 8 * (v188 & ~v191));
        int v1267 = 0;
        int v1215 = v188 + 9;
        if (v21) {
          unint64_t v210 = 3;
        }
        else {
          unint64_t v210 = 4;
        }
        uint64_t v211 = v1257 + 4;
        if (v21) {
          int v212 = 0;
        }
        else {
          int v212 = -1;
        }
        unint64_t v213 = (v1258 - 1);
        unsigned int v1193 = v186;
        unsigned int v1169 = v196;
        unsigned int v1158 = v190;
        unint64_t v1130 = v210;
        int v1145 = v193;
        uint64_t v1117 = v207;
        int v1110 = v212;
        while (1)
        {
          if (v209 == 3)
          {
            unsigned int v214 = *a3 - 1;
            unsigned int v215 = v188 - v214;
            unsigned int v216 = *a3 - 2;
            if (v216 >= v206) {
              goto LABEL_279;
            }
          }
          else
          {
            unsigned int v214 = a3[v209];
            unsigned int v215 = v188 - v214;
            unsigned int v216 = v214 - 1;
            if (v214 - 1 >= v206)
            {
LABEL_279:
              if (v216 < v208 && v193 + ~v215 >= 3)
              {
                uint64_t v218 = v207 + v215;
                if (*(_DWORD *)v15 == *(_DWORD *)v218)
                {
                  uint64_t v219 = v24;
                  unint64_t v1230 = v213;
                  uint64_t v220 = v188;
                  uint64_t v221 = v208;
                  int v222 = ZSTD_count_2segments(v211, (char *)(v218 + 4), v16, v1211, v1207);
                  unint64_t v210 = v1130;
                  LODWORD(v193) = v1145;
                  uint64_t v208 = v221;
                  int v212 = v1110;
                  uint64_t v207 = v1117;
                  unsigned int v196 = v1169;
                  uint64_t v189 = (char *)(v1257 + 12);
                  unsigned int v190 = v1158;
                  uint64_t v188 = v220;
                  unint64_t v213 = v1230;
                  uint64_t v24 = v219;
                  uint64_t v15 = v1257;
                  unint64_t v16 = (unint64_t)v1259;
                  unsigned int v223 = v222 + 4;
                  unsigned int v186 = v1193;
                  unint64_t v224 = v223;
                  if (v1230 < v223) {
                    goto LABEL_293;
                  }
                }
              }
              goto LABEL_276;
            }
          }
          if (v215 < v196 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v214]) {
            goto LABEL_276;
          }
          uint64_t v227 = -(uint64_t)v214;
          uint64_t v228 = (char *)v211 - v214;
          if (v1260 <= (unint64_t)v211) {
            break;
          }
          unint64_t v229 = *v211 ^ *(void *)v228;
          if (v229)
          {
            unsigned int v223 = (__clz(__rbit64(v229)) >> 3) + 4;
            unint64_t v224 = v223;
            if (v213 < v223) {
              goto LABEL_293;
            }
            goto LABEL_276;
          }
          uint64_t v231 = 0;
          do
          {
            unint64_t v230 = &v189[v231];
            if ((unint64_t)&v189[v231] >= v1260)
            {
              uint64_t v228 = &v230[v227];
              if ((unint64_t)v230 >= v1237) {
                goto LABEL_303;
              }
              goto LABEL_301;
            }
            uint64_t v232 = *(void *)&v189[v227 + v231];
            v231 += 8;
            unint64_t v233 = *(void *)v230 ^ v232;
          }
          while (!v233);
          unsigned int v223 = v231 + (__clz(__rbit64(v233)) >> 3) + 4;
          unint64_t v224 = v223;
          if (v213 < v223)
          {
LABEL_293:
            uint64_t v226 = &v1261[2 * v24];
            _DWORD *v226 = v209 + v212;
            v226[1] = v223;
            uint64_t v24 = (v24 + 1);
            if (v223 > v186) {
              goto LABEL_601;
            }
            unint64_t v213 = v224;
            if (&v15[v224] == (unsigned __int8 *)v16) {
              goto LABEL_601;
            }
          }
LABEL_276:
          if (++v209 >= v210)
          {
            *(_DWORD *)(v1053 + 4 * v1035) = v188;
            int v276 = ~(-1 << v1044);
            if (v190 < v1243)
            {
              uint64_t v277 = v1027;
              unint64_t v127 = v1019 + 1;
              uint64_t v126 = v1019;
              goto LABEL_398;
            }
            unint64_t v325 = 0;
            unint64_t v326 = 0;
            v1234 = v1257 + 8;
            uint64_t v277 = v1027;
            uint64_t v327 = v1027 + 8;
            unint64_t v127 = v1019 + 1;
            uint64_t v126 = v1019;
            while (1)
            {
              unint64_t v328 = v326 >= v325 ? v325 : v326;
              uint64_t v329 = v190;
              uint64_t v330 = v1027 + v190;
              int v331 = &v1257[v328];
              uint64_t v332 = (void *)(v330 + v328);
              if (v1260 <= (unint64_t)&v1257[v328]) {
                break;
              }
              unint64_t v333 = *(void *)v331 ^ *v332;
              if (v333)
              {
                unint64_t v334 = (__clz(__rbit64(v333)) >> 3) + v328;
                if (v334 <= v213) {
                  goto LABEL_517;
                }
LABEL_510:
                int v336 = v1215;
                if (v334 > v1215 - v190) {
                  int v336 = v190 + v334;
                }
                int v1215 = v336;
                uint64_t v337 = &v1261[2 * v24];
                *uint64_t v337 = v188 + 2 - v190;
                v337[1] = v334;
                LODWORD(v24) = v24 + 1;
                if (v334 <= 0x1000 && &v1257[v334] != (unsigned __int8 *)v16)
                {
                  unint64_t v213 = v334;
                  goto LABEL_517;
                }
LABEL_573:
                int v1241 = v24;
                *unint64_t v127 = 0;
                unsigned int *v126 = 0;
                goto LABEL_599;
              }
              unsigned int v340 = v190;
              uint64_t v341 = 0;
              uint64_t v342 = (char *)v1234 + v328;
              do
              {
                uint64_t v343 = &v342[v341];
                if ((unint64_t)&v342[v341] >= v1260)
                {
                  uint64_t v335 = (unsigned __int8 *)v1234 + v328 + v341;
                  uint64_t v332 = (void *)(v327 + v328 + v329 + v341);
                  unsigned int v190 = v340;
                  if ((unint64_t)v335 >= v1237) {
                    goto LABEL_501;
                  }
                  goto LABEL_499;
                }
                uint64_t v344 = *(void *)(v327 + v328 + v329 + v341);
                v341 += 8;
                unint64_t v345 = *(void *)v343 ^ v344;
              }
              while (!v345);
              unint64_t v346 = __clz(__rbit64(v345));
              unsigned int v190 = v340;
              unint64_t v334 = v341 + (v346 >> 3) + v328;
              if (v334 > v213) {
                goto LABEL_510;
              }
LABEL_517:
              unint64_t v339 = (unsigned int *)(v1199 + 8 * (v190 & v990));
              if (*(unsigned __int8 *)(v330 + v334) >= v1257[v334])
              {
                *unint64_t v127 = v190;
                if (v190 <= v982)
                {
                  unint64_t v127 = (unsigned int *)&v1267;
                  goto LABEL_398;
                }
                unint64_t v325 = v334;
                unint64_t v127 = (unsigned int *)(v1199 + 8 * (v190 & v990));
                BOOL v57 = v276-- != 0;
                if (v57) {
                  goto LABEL_490;
                }
LABEL_398:
                *unint64_t v127 = 0;
                unsigned int *v126 = 0;
                int v1241 = v24;
                if (v276)
                {
                  uint64_t v15 = v1257;
                  unsigned int v278 = *(_DWORD *)(*(void *)(v1006 + 48)
                                   + 4 * ((-1640531535 * *(_DWORD *)v1257) >> -(char)v998));
                  if (v278 > v1102)
                  {
                    unint64_t v279 = 0;
                    unint64_t v280 = 0;
                    uint64_t v1171 = *(void *)(v1006 + 64);
                    uint64_t v1181 = v277 + v1062;
                    int v1160 = v188 + 2;
                    int v1201 = v276 - 1;
                    while (1)
                    {
                      unint64_t v1232 = v213;
                      if (v280 >= v279) {
                        unint64_t v281 = v279;
                      }
                      else {
                        unint64_t v281 = v280;
                      }
                      unint64_t v282 = ZSTD_count_2segments(&v15[v281], (char *)(v1092 + v278 + v281), v16, v1211, v1207) + v281;
                      unint64_t v213 = v1232;
                      if (v282 + v278 >= v977) {
                        uint64_t v283 = v1181 + v278;
                      }
                      else {
                        uint64_t v283 = v1092 + v278;
                      }
                      if (v282 <= v1232)
                      {
                        unint64_t v16 = (unint64_t)v1259;
                        uint64_t v15 = v1257;
                        if (v278 <= v1081) {
                          break;
                        }
                      }
                      else
                      {
                        int v284 = v1215;
                        if (v282 > v1215 - (v278 + v1062)) {
                          int v284 = v278 + v1062 + v282;
                        }
                        int v1215 = v284;
                        unint64_t v285 = &v1261[2 * v1241];
                        *unint64_t v285 = v1160 - (v278 + v1062);
                        v285[1] = v282;
                        ++v1241;
                        if (v282 > 0x1000) {
                          goto LABEL_598;
                        }
                        uint64_t v15 = v1257;
                        unint64_t v213 = v282;
                        unint64_t v16 = (unint64_t)v1259;
                        if (&v1257[v282] == v1259 || v278 <= v1081) {
                          break;
                        }
                      }
                      unsigned int v286 = *(unsigned __int8 *)(v283 + v282);
                      unsigned int v287 = v15[v282];
                      BOOL v57 = v286 >= v287;
                      BOOL v288 = v286 < v287;
                      if (v57) {
                        unint64_t v279 = v282;
                      }
                      else {
                        unint64_t v280 = v282;
                      }
                      if (v1201)
                      {
                        --v1201;
                        unsigned int v278 = *(_DWORD *)(v1171 + 8 * (v278 & v1070) + 4 * v288);
                        if (v278 > v1102) {
                          continue;
                        }
                      }
                      break;
                    }
                  }
LABEL_600:
                  *(_DWORD *)(v1224 + 36) = v1215 - 8;
                  LODWORD(v24) = v1241;
LABEL_601:
                  uint64_t v7 = v1224;
                  uint64_t v18 = v12 + 7;
LABEL_602:
                  uint64_t v19 = v1238;
                  goto LABEL_603;
                }
LABEL_599:
                uint64_t v15 = v1257;
                goto LABEL_600;
              }
              unsigned int *v126 = v190;
              if (v190 <= v982)
              {
                uint64_t v126 = (unsigned int *)&v1267;
                goto LABEL_398;
              }
              ++v339;
              unint64_t v326 = v334;
              uint64_t v126 = v339;
              BOOL v57 = v276-- != 0;
              if (!v57) {
                goto LABEL_398;
              }
LABEL_490:
              unsigned int v190 = *v339;
              if (*v339 < v1243) {
                goto LABEL_398;
              }
            }
            uint64_t v335 = &v1257[v328];
            if ((unint64_t)v331 >= v1237) {
              goto LABEL_501;
            }
LABEL_499:
            if (*(_DWORD *)v332 == *(_DWORD *)v335)
            {
              v335 += 4;
              uint64_t v332 = (void *)((char *)v332 + 4);
            }
LABEL_501:
            if ((unint64_t)v335 >= v1236)
            {
              if ((unint64_t)v335 >= v16) {
                goto LABEL_509;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v332 == *(unsigned __int16 *)v335)
              {
                v335 += 2;
                uint64_t v332 = (void *)((char *)v332 + 2);
              }
              if ((unint64_t)v335 >= v16)
              {
LABEL_509:
                unint64_t v334 = v335 - v1257;
                if (v335 - v1257 <= v213) {
                  goto LABEL_517;
                }
                goto LABEL_510;
              }
            }
            if (*(unsigned __int8 *)v332 == *v335) {
              ++v335;
            }
            goto LABEL_509;
          }
        }
        unint64_t v230 = (char *)(v1257 + 4);
        if ((unint64_t)v211 >= v1237) {
          goto LABEL_303;
        }
LABEL_301:
        if (*(_DWORD *)v228 == *(_DWORD *)v230)
        {
          v230 += 4;
          v228 += 4;
        }
LABEL_303:
        if ((unint64_t)v230 >= v1236)
        {
          if ((unint64_t)v230 >= v16) {
            goto LABEL_311;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v228 == *(unsigned __int16 *)v230)
          {
            v230 += 2;
            v228 += 2;
          }
          if ((unint64_t)v230 >= v16)
          {
LABEL_311:
            unsigned int v223 = v230 - v1257;
            unint64_t v224 = v223;
            if (v213 < v223) {
              goto LABEL_293;
            }
            goto LABEL_276;
          }
        }
        if (*v228 == *v230) {
          LODWORD(v230) = v230 + 1;
        }
        goto LABEL_311;
      }
      LODWORD(v24) = 0;
      if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
        unsigned int v28 = 4095;
      }
      else {
        unsigned int v28 = *(_DWORD *)(v7 + 212);
      }
      uint64_t v29 = *(void *)(v7 + 8);
      uint64_t v30 = (char *)&v1257[-v29];
      uint64_t v31 = (char *)(v1257 + 11);
      int v1011 = *(_DWORD *)(v7 + 204);
      uint64_t v1016 = *(void *)(v7 + 48);
      uint64_t v1003 = (-1640531535 * *(_DWORD *)v1257) >> -(char)*(_DWORD *)(v7 + 200);
      unsigned int v32 = *(_DWORD *)(v1016 + 4 * v1003);
      int v33 = -1 << (*(_DWORD *)(v7 + 196) - 1);
      int v979 = ~v33;
      unsigned int v34 = v1257 - v29 + v33 + 1;
      if ((int)v1257 - (int)v29 < ~v33) {
        unsigned int v34 = 0;
      }
      unsigned int v1195 = v34;
      uint64_t v35 = *(unsigned int *)(v7 + 24);
      unsigned int v36 = *(_DWORD *)(v7 + 28);
      unsigned int v37 = 1 << *(_DWORD *)(v7 + 192);
      if (v30 - v36 > v37 && *(_DWORD *)(v7 + 32) == 0) {
        uint64_t v39 = v30 - v37;
      }
      else {
        uint64_t v39 = v36;
      }
      uint64_t v15 = v1257;
      if (v39 <= 1) {
        unsigned int v40 = 1;
      }
      else {
        unsigned int v40 = v39;
      }
      uint64_t v41 = *(void *)(v7 + 184);
      uint64_t v42 = *(void *)(v41 + 8);
      v1208 = *(char **)v41;
      int v43 = *(_DWORD *)(v41 + 28);
      uint64_t v44 = v39 - (*(void *)v41 - v42);
      uint64_t v995 = v41;
      int v987 = *(_DWORD *)(v41 + 200);
      unsigned int v974 = *(void *)v41 - v42;
      unsigned int v1127 = ~(-1 << (*(_DWORD *)(v41 + 196) - 1));
      if (v974 - v43 <= v1127) {
        unsigned int v45 = *(_DWORD *)(v41 + 28);
      }
      else {
        unsigned int v45 = *(void *)v41 - v42 + (-1 << (*(_DWORD *)(v41 + 196) - 1)) + 1;
      }
      unsigned int v1142 = v45;
      unsigned int v46 = v30 - v35;
      uint64_t v1154 = *(void *)(v41 + 8);
      uint64_t v47 = v42 - v44;
      unsigned int v1167 = *(_DWORD *)(v41 + 28);
      uint64_t v1041 = *(void *)(v7 + 8);
      uint64_t v1050 = (v39 - (v1208 - v42));
      uint64_t v48 = (v30 - v43 - v44);
      unint64_t v49 = v21 == 0;
      v1204 = (void *)(v29 + v35);
      uint64_t v1190 = *(void *)(v7 + 64);
      v1032 = (unsigned int *)(v1190 + 8 * (v30 & ~v33));
      int v1267 = 0;
      int v1214 = v30 + 9;
      if (v21) {
        unint64_t v50 = 3;
      }
      else {
        unint64_t v50 = 4;
      }
      BOOL v51 = v1257 + 3;
      if (v21) {
        uint64_t v52 = 0;
      }
      else {
        uint64_t v52 = -1;
      }
      unint64_t v53 = (v1258 - 1);
      unsigned int v1176 = v40;
      unsigned int v1114 = v28;
      int v1099 = v35;
      unsigned int v1089 = v32;
      unsigned int v1078 = v30 - v35;
      unint64_t v1067 = v50;
      do
      {
        if (v49 == 3)
        {
          unsigned int v54 = *a3 - 1;
          unsigned int v55 = v30 - v54;
          unsigned int v56 = *a3 - 2;
          if (v56 >= v46) {
            goto LABEL_50;
          }
        }
        else
        {
          unsigned int v54 = a3[v49];
          unsigned int v55 = v30 - v54;
          unsigned int v56 = v54 - 1;
          if (v54 - 1 >= v46)
          {
LABEL_50:
            BOOL v57 = v56 < v48 && v35 + ~v55 >= 3;
            if (!v57) {
              goto LABEL_47;
            }
            uint64_t v58 = v47 + v55;
            if (((*(_DWORD *)v58 ^ *(_DWORD *)v15) & 0xFFFFFF) != 0) {
              goto LABEL_47;
            }
            uint64_t v59 = v51;
            int v1239 = v24;
            unint64_t v1226 = v53;
            unint64_t v60 = v30;
            uint64_t v61 = v39;
            uint64_t v62 = v48;
            uint64_t v63 = v52;
            int v64 = ZSTD_count_2segments(v59, (char *)(v58 + 3), v16, v1208, v1204);
            uint64_t v52 = v63;
            BOOL v51 = v1257 + 3;
            unint64_t v50 = v1067;
            uint64_t v48 = v62;
            unsigned int v46 = v1078;
            uint64_t v39 = v61;
            LODWORD(v35) = v1099;
            uint64_t v31 = (char *)(v1257 + 11);
            unsigned int v32 = v1089;
            unsigned int v40 = v1176;
            uint64_t v30 = v60;
            unint64_t v53 = v1226;
            LODWORD(v24) = v1239;
            uint64_t v15 = v1257;
            unint64_t v16 = (unint64_t)v1259;
            unsigned int v65 = v64 + 3;
            unsigned int v28 = v1114;
            unint64_t v66 = v65;
            if (v1226 >= v65) {
              goto LABEL_47;
            }
            goto LABEL_64;
          }
        }
        if (v55 < v39 || ((*(_DWORD *)&v15[-v54] ^ *(_DWORD *)v15) & 0xFFFFFF) != 0) {
          goto LABEL_47;
        }
        uint64_t v69 = -(uint64_t)v54;
        uint64_t v70 = (char *)v51 - v54;
        if (v1260 <= (unint64_t)v51)
        {
          unint64_t v72 = (char *)v51;
          if ((unint64_t)v51 < v1237)
          {
LABEL_72:
            if (*(_DWORD *)v70 == *(_DWORD *)v72)
            {
              v72 += 4;
              v70 += 4;
            }
          }
LABEL_74:
          if ((unint64_t)v72 >= v1236)
          {
            if ((unint64_t)v72 >= v16) {
              goto LABEL_82;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v70 == *(unsigned __int16 *)v72)
            {
              v72 += 2;
              v70 += 2;
            }
            if ((unint64_t)v72 >= v16)
            {
LABEL_82:
              unsigned int v65 = v72 - v51 + 3;
              unint64_t v66 = v65;
              if (v53 >= v65) {
                goto LABEL_47;
              }
LABEL_64:
              uint64_t v68 = &v1261[2 * v24];
              *uint64_t v68 = v49 + v52;
              v68[1] = v65;
              LODWORD(v24) = v24 + 1;
              if (v65 <= v28)
              {
                unint64_t v53 = v66;
                if (&v15[v66] != (unsigned __int8 *)v16) {
                  goto LABEL_47;
                }
              }
              goto LABEL_601;
            }
          }
          if (*v70 == *v72) {
            LODWORD(v72) = v72 + 1;
          }
          goto LABEL_82;
        }
        unint64_t v71 = *v51 ^ *(void *)v70;
        if (v71)
        {
          unsigned int v65 = (__clz(__rbit64(v71)) >> 3) + 3;
          unint64_t v66 = v65;
          if (v53 >= v65) {
            goto LABEL_47;
          }
          goto LABEL_64;
        }
        uint64_t v73 = 0;
        do
        {
          unint64_t v72 = &v31[v73];
          if ((unint64_t)&v31[v73] >= v1260)
          {
            uint64_t v70 = &v72[v69];
            if ((unint64_t)v72 < v1237) {
              goto LABEL_72;
            }
            goto LABEL_74;
          }
          uint64_t v74 = *(void *)&v31[v69 + v73];
          v73 += 8;
          unint64_t v75 = *(void *)v72 ^ v74;
        }
        while (!v75);
        unsigned int v65 = v73 + (__clz(__rbit64(v75)) >> 3) + 3;
        unint64_t v66 = v65;
        if (v53 < v65) {
          goto LABEL_64;
        }
LABEL_47:
        ++v49;
      }
      while (v49 < v50);
      if (v53 > 2)
      {
        uint64_t v18 = v12 + 7;
        uint64_t v237 = v1041;
        goto LABEL_422;
      }
      uint64_t v7 = v1224;
      uint64_t v234 = *(void *)(v1224 + 56);
      int v235 = *(_DWORD *)v15;
      int v236 = 32 - *(_DWORD *)(v1224 + 40);
      uint64_t v237 = v1041;
      if (v940 < v30)
      {
        uint64_t v238 = v940;
        do
        {
          *(_DWORD *)(v234 + 4 * ((900185344 * *(_DWORD *)(v1041 + v238)) >> v236)) = v238;
          ++v238;
        }
        while (v30 != v238);
      }
      uint64_t v239 = *(unsigned int *)(v234 + 4 * ((900185344 * v235) >> v236));
      BOOL v240 = v239 >= v40 && (v30 - v239) >> 18 == 0;
      uint64_t v18 = v12 + 7;
      uint64_t v19 = v1238;
      if (!v240)
      {
        unsigned int v940 = v30;
        goto LABEL_422;
      }
      long long v369 = (_DWORD *)(v1041 + v239);
      uint64_t v15 = v1257;
      if (v1260 <= (unint64_t)v1257)
      {
        v372 = v1257;
        if ((unint64_t)v1257 < v1237)
        {
LABEL_581:
          if (*v369 == *(_DWORD *)v372)
          {
            v372 += 4;
            ++v369;
          }
        }
      }
      else
      {
        unint64_t v370 = *(void *)v1257 ^ *(void *)v369;
        if (v370)
        {
          unint64_t v371 = __clz(__rbit64(v370)) >> 3;
          unsigned int v940 = v30;
          if (v371 < 3) {
            goto LABEL_422;
          }
          goto LABEL_592;
        }
        unint64_t v932 = 0;
        v933 = v1257 + 8;
        while (1)
        {
          v934 = &v933[v932 / 8];
          if ((unint64_t)&v933[v932 / 8] >= v1260) {
            break;
          }
          uint64_t v935 = *(void *)(v1041 + v239 + 8 + v932);
          v932 += 8;
          unint64_t v936 = *v934 ^ v935;
          if (v936)
          {
            unint64_t v371 = v932 + (__clz(__rbit64(v936)) >> 3);
            uint64_t v15 = v1257;
            unsigned int v940 = v30;
            if (v371 >= 3) {
              goto LABEL_592;
            }
            goto LABEL_422;
          }
        }
        uint64_t v15 = v1257;
        v372 = &v1257[v932 + 8];
        long long v369 = (_DWORD *)(v1041 + v239 + v932 + 8);
        if ((unint64_t)v372 < v1237) {
          goto LABEL_581;
        }
      }
      if ((unint64_t)v372 >= v1236)
      {
        if ((unint64_t)v372 >= v16) {
          goto LABEL_591;
        }
LABEL_589:
        if (*(unsigned __int8 *)v369 == *v372) {
          ++v372;
        }
        goto LABEL_591;
      }
      if (*(unsigned __int16 *)v369 == *(unsigned __int16 *)v372)
      {
        v372 += 2;
        long long v369 = (_DWORD *)((char *)v369 + 2);
      }
      if ((unint64_t)v372 < v16) {
        goto LABEL_589;
      }
LABEL_591:
      unint64_t v371 = v372 - v15;
      unsigned int v940 = v30;
      if (v371 < 3) {
        goto LABEL_422;
      }
LABEL_592:
      _DWORD *v1261 = v30 - v239 + 2;
      v1261[1] = v371;
      if (v371 > v28 || &v15[v371] == (unsigned __int8 *)v16)
      {
        LODWORD(v24) = 1;
        unsigned int v940 = v30;
        *(_DWORD *)(v1224 + 36) = v30 + 1;
        goto LABEL_603;
      }
      LODWORD(v24) = 1;
      unsigned int v940 = v30;
      unint64_t v53 = v371;
LABEL_422:
      *(_DWORD *)(v1016 + 4 * v1003) = v30;
      int v289 = ~(-1 << v1011);
      if (v32 < v40)
      {
        long long v291 = v1032 + 1;
        unint64_t v290 = v1032;
        goto LABEL_424;
      }
      unint64_t v347 = 0;
      unint64_t v348 = 0;
      v1247 = v1257 + 8;
      uint64_t v349 = v237 + 8;
      long long v291 = v1032 + 1;
      unint64_t v290 = v1032;
      while (2)
      {
        if (v348 >= v347) {
          unint64_t v350 = v347;
        }
        else {
          unint64_t v350 = v348;
        }
        uint64_t v351 = v32;
        uint64_t v352 = v237 + v32;
        unint64_t v353 = &v1257[v350];
        unint64_t v354 = (_DWORD *)(v352 + v350);
        if (v1260 <= (unint64_t)&v1257[v350])
        {
          unint64_t v357 = &v1257[v350];
          if ((unint64_t)v353 < v1237)
          {
LABEL_541:
            if (*v354 == *(_DWORD *)v357)
            {
              v357 += 4;
              ++v354;
            }
          }
        }
        else
        {
          unint64_t v355 = *(void *)v353 ^ *(void *)v354;
          if (v355)
          {
            unint64_t v356 = (__clz(__rbit64(v355)) >> 3) + v350;
            if (v356 <= v53) {
              goto LABEL_559;
            }
            goto LABEL_552;
          }
          unsigned int v362 = v32;
          uint64_t v363 = 0;
          v364 = (char *)v1247 + v350;
          while (1)
          {
            uint64_t v365 = &v364[v363];
            if ((unint64_t)&v364[v363] >= v1260) {
              break;
            }
            uint64_t v366 = *(void *)(v349 + v350 + v351 + v363);
            v363 += 8;
            unint64_t v367 = *(void *)v365 ^ v366;
            if (v367)
            {
              unint64_t v368 = __clz(__rbit64(v367));
              unsigned int v40 = v1176;
              unsigned int v32 = v362;
              unint64_t v356 = v363 + (v368 >> 3) + v350;
              if (v356 > v53) {
                goto LABEL_552;
              }
              goto LABEL_559;
            }
          }
          unint64_t v357 = (unsigned __int8 *)v1247 + v350 + v363;
          unint64_t v354 = (_DWORD *)(v349 + v350 + v351 + v363);
          unsigned int v40 = v1176;
          unsigned int v32 = v362;
          if ((unint64_t)v357 < v1237) {
            goto LABEL_541;
          }
        }
        if ((unint64_t)v357 >= v1236)
        {
          if ((unint64_t)v357 >= v16) {
            goto LABEL_551;
          }
LABEL_549:
          if (*(unsigned __int8 *)v354 == *v357) {
            ++v357;
          }
          goto LABEL_551;
        }
        if (*(unsigned __int16 *)v354 == *(unsigned __int16 *)v357)
        {
          v357 += 2;
          unint64_t v354 = (_DWORD *)((char *)v354 + 2);
        }
        if ((unint64_t)v357 < v16) {
          goto LABEL_549;
        }
LABEL_551:
        unint64_t v356 = v357 - v1257;
        if (v357 - v1257 <= v53) {
          goto LABEL_559;
        }
LABEL_552:
        int v358 = v1214;
        if (v356 > v1214 - v32) {
          int v358 = v32 + v356;
        }
        int v1214 = v358;
        uint64_t v359 = &v1261[2 * v24];
        *uint64_t v359 = v30 + 2 - v32;
        v359[1] = v356;
        LODWORD(v24) = v24 + 1;
        if (v356 > 0x1000 || &v1257[v356] == (unsigned __int8 *)v16)
        {
          int v1245 = v24;
          *long long v291 = 0;
          *unint64_t v290 = 0;
          goto LABEL_1419;
        }
        unint64_t v53 = v356;
LABEL_559:
        unint64_t v361 = (unsigned int *)(v1190 + 8 * (v32 & v979));
        if (*(unsigned __int8 *)(v352 + v356) < v1257[v356])
        {
          *unint64_t v290 = v32;
          if (v32 <= v1195)
          {
            unint64_t v290 = (unsigned int *)&v1267;
            goto LABEL_424;
          }
          ++v361;
          unint64_t v348 = v356;
          unint64_t v290 = v361;
          BOOL v57 = v289-- != 0;
          if (!v57) {
            goto LABEL_424;
          }
          goto LABEL_532;
        }
        *long long v291 = v32;
        if (v32 > v1195)
        {
          unint64_t v347 = v356;
          long long v291 = (unsigned int *)(v1190 + 8 * (v32 & v979));
          BOOL v57 = v289-- != 0;
          if (!v57) {
            goto LABEL_424;
          }
LABEL_532:
          unsigned int v32 = *v361;
          if (*v361 < v40) {
            goto LABEL_424;
          }
          continue;
        }
        break;
      }
      long long v291 = (unsigned int *)&v1267;
LABEL_424:
      *long long v291 = 0;
      *unint64_t v290 = 0;
      int v1245 = v24;
      if (!v289) {
        goto LABEL_1419;
      }
      uint64_t v15 = v1257;
      unsigned int v292 = *(_DWORD *)(*(void *)(v995 + 48) + 4 * ((-1640531535 * *(_DWORD *)v1257) >> -(char)v987));
      if (v292 <= v1167) {
        goto LABEL_1420;
      }
      unint64_t v293 = 0;
      unint64_t v294 = 0;
      uint64_t v1118 = *(void *)(v995 + 64);
      uint64_t v1182 = v237 + v1050;
      int v1111 = v30 + 2;
      int v1202 = v289 - 1;
      while (2)
      {
        unint64_t v1233 = v53;
        if (v294 >= v293) {
          unint64_t v295 = v293;
        }
        else {
          unint64_t v295 = v294;
        }
        unint64_t v296 = ZSTD_count_2segments(&v15[v295], (char *)(v1154 + v292 + v295), v16, v1208, v1204) + v295;
        unint64_t v53 = v1233;
        if (v296 + v292 >= v974) {
          uint64_t v297 = v1182 + v292;
        }
        else {
          uint64_t v297 = v1154 + v292;
        }
        if (v296 <= v1233)
        {
          unint64_t v16 = (unint64_t)v1259;
          uint64_t v18 = v12 + 7;
          uint64_t v15 = v1257;
          if (v292 <= v1142) {
            goto LABEL_1420;
          }
          goto LABEL_441;
        }
        int v298 = v1214;
        if (v296 > v1214 - (v292 + v1050)) {
          int v298 = v292 + v1050 + v296;
        }
        int v1214 = v298;
        uint64_t v299 = &v1261[2 * v1245];
        *uint64_t v299 = v1111 - (v292 + v1050);
        v299[1] = v296;
        ++v1245;
        if (v296 <= 0x1000)
        {
          uint64_t v15 = v1257;
          unint64_t v53 = v296;
          unint64_t v16 = (unint64_t)v1259;
          uint64_t v18 = v12 + 7;
          if (&v1257[v296] == v1259 || v292 <= v1142) {
            goto LABEL_1420;
          }
LABEL_441:
          unsigned int v300 = *(unsigned __int8 *)(v297 + v296);
          unsigned int v301 = v15[v296];
          BOOL v57 = v300 >= v301;
          BOOL v302 = v300 < v301;
          if (v57) {
            unint64_t v293 = v296;
          }
          else {
            unint64_t v294 = v296;
          }
          if (!v1202) {
            goto LABEL_1420;
          }
          --v1202;
          unsigned int v292 = *(_DWORD *)(v1118 + 8 * (v292 & v1127) + 4 * v302);
          if (v292 <= v1167) {
            goto LABEL_1420;
          }
          continue;
        }
        break;
      }
      LODWORD(v16) = v1259;
      uint64_t v18 = v12 + 7;
LABEL_1419:
      uint64_t v15 = v1257;
LABEL_1420:
      uint64_t v7 = v1224;
      uint64_t v19 = v1238;
      LODWORD(v24) = v1245;
      *(_DWORD *)(v1224 + 36) = v1214 - 8;
LABEL_603:
      unsigned int v1263 = v24;
      unint64_t v374 = v15;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1264, (uint64_t)v1261, &v1263, v15 - v1213, v16 - v15);
      LODWORD(v375) = v1263;
      if (v1263)
      {
        v12[4] = *a3;
        v12[5] = a3[1];
        v12[6] = a3[2];
        v12[2] = 0;
        v12[3] = v21;
        int v376 = *(_DWORD *)(v7 + 160);
        if (v376 != 1)
        {
          unint64_t v16 = (unint64_t)v1259;
          if (v21 < 0x40) {
            unsigned int v381 = ZSTD_LLcode_LL_Code[v21];
          }
          else {
            unsigned int v381 = 50 - __clz(v21);
          }
          unint64_t v380 = (unint64_t)(v1259 - 32);
          unint64_t v383 = *(_DWORD **)(v7 + 88);
          int v384 = *(_DWORD *)(v7 + 148) + 1;
          unsigned int v377 = v384 + (LL_bits[v381] << 8) + ((__clz(v383[v381] + 1) << 8) ^ 0xFFFFE0FF);
          *uint64_t v12 = v377;
          uint64_t v378 = (v375 - 1);
          unsigned int v379 = v1261[2 * v378 + 1];
          if (v379 <= v1189)
          {
            unsigned int v382 = v384 + ((__clz(*v383 + 1) << 8) ^ 0xFFFFE0FF);
            goto LABEL_616;
          }
LABEL_614:
          unsigned int v385 = 0;
          unsigned int v386 = v1261[2 * v378];
          goto LABEL_1325;
        }
        unsigned int v377 = (__clz(v21 + 1) << 8) ^ 0x1F00;
        *uint64_t v12 = v377;
        uint64_t v378 = (v375 - 1);
        unsigned int v379 = v1261[2 * v378 + 1];
        unint64_t v16 = (unint64_t)v1259;
        if (v379 > v1189)
        {
          unint64_t v380 = (unint64_t)(v1259 - 32);
          goto LABEL_614;
        }
        unsigned int v382 = 0;
LABEL_616:
        uint64_t v387 = v12 + 14;
        unint64_t v388 = (v1258 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v387 - 7) = 0x40000000;
          _DWORD *v387 = 0x40000000;
          v387 += 14;
          v388 -= 2;
        }
        while (v388);
        if (v1258 - 1 != ((v1258 - 1) & 0xFFFFFFFFFFFFFFFELL))
        {
          uint64_t v389 = v938;
          unint64_t v390 = v939;
          do
          {
            *unint64_t v390 = 0x40000000;
            v390 += 7;
            --v389;
          }
          while (v389);
        }
        uint64_t v391 = 0;
        unsigned int v392 = v382 + v377;
        if (v375 <= 1) {
          uint64_t v375 = 1;
        }
        else {
          uint64_t v375 = v375;
        }
        unsigned int v393 = v1258;
        while (2)
        {
          uint64_t v394 = &v1261[2 * v391];
          unsigned int v395 = v394[1];
          if (v393 <= v395)
          {
            unsigned int v396 = *v394;
            uint64_t v397 = __clz(v396 + 1) ^ 0x1F;
            if (v376 == 1)
            {
              int v398 = (v397 << 8) + 4096;
              if (v393 + 1 <= v395 + 1) {
                unsigned int v399 = v395 + 1;
              }
              else {
                unsigned int v399 = v393 + 1;
              }
              unsigned int v400 = v399 - v393;
              unsigned int v401 = v399 - 1;
              if (v400 < 2 || v401 < v393)
              {
                unsigned int v403 = v393;
                goto LABEL_647;
              }
              unsigned int v403 = v393 + (v400 & 0xFFFFFFFE);
              unsigned int v413 = v400 & 0xFFFFFFFE;
              do
              {
                long long v414 = &v12[7 * v393];
                v414[2] = v393;
                v414[3] = v21;
                unint64_t v415 = &v12[7 * v393 + 7];
                v415[2] = v393 + 1;
                v415[3] = v21;
                unsigned int *v414 = v392 + v398 + ((__clz(v393 - 2) << 8) ^ 0x1F00);
                v414[1] = v396;
                *unint64_t v415 = v392 + v398 + ((__clz(v393 - 1) << 8) ^ 0x1F00);
                v415[1] = v396;
                v393 += 2;
                v413 -= 2;
              }
              while (v413);
              unsigned int v393 = v403;
              if (v400 != (v400 & 0xFFFFFFFE))
              {
LABEL_647:
                unsigned int v393 = v403;
                do
                {
                  unint64_t v416 = &v12[7 * v393];
                  v416[2] = v393;
                  v416[3] = v21;
                  *unint64_t v416 = v392 + v398 + ((__clz(v393 - 2) << 8) ^ 0x1F00);
                  v416[1] = v396;
                  ++v393;
                }
                while (v393 <= v395);
              }
            }
            else
            {
              if (v397 <= 0x13) {
                int v404 = 53;
              }
              else {
                int v404 = (v397 << 9) - 9675;
              }
              int v405 = *(_DWORD *)(v7 + 152);
              uint64_t v406 = *(void *)(v7 + 96);
              uint64_t v407 = *(void *)(v7 + 104);
              int v408 = v404 + *(_DWORD *)(v7 + 156);
              do
              {
                unsigned int v412 = v393 - 3;
                if (v393 - 3 < 0x80) {
                  unsigned int v409 = ZSTD_MLcode_ML_Code[v412];
                }
                else {
                  unsigned int v409 = 67 - __clz(v412);
                }
                unsigned int v410 = v392
                     + v408
                     + ((__clz(*(_DWORD *)(v407 + 4 * v397) + 1) << 8) ^ 0xFFFFE0FF)
                     + v405
                     + ((ML_bits[v409] + v397) << 8)
                     + ((__clz(*(_DWORD *)(v406 + 4 * v409) + 1) << 8) ^ 0xFFFFE0FF);
                uint64_t v411 = &v12[7 * v393];
                v411[2] = v393;
                v411[3] = v21;
                *uint64_t v411 = v410;
                v411[1] = v396;
                ++v393;
              }
              while (v393 <= v395);
            }
          }
          if (++v391 != v375) {
            continue;
          }
          break;
        }
        LODWORD(v417) = v393 - 1;
        unint64_t v418 = v1257;
        if (v393 == 1) {
          goto LABEL_1321;
        }
        unsigned int v978 = v1257 + 8;
        int v419 = v1257 + 1;
        unsigned int v420 = 1;
        unint64_t v421 = v1223;
        while (2)
        {
          unsigned int v422 = v420 - 1;
          unint64_t v423 = &v12[7 * v420 - 7];
          if (v423[2]) {
            unsigned int v424 = 1u;
          }
          else {
            unsigned int v424 = v12[7 * v422 + 3] + 1;
          }
          uint64_t v425 = v420;
          v426 = &v418[v420];
          unsigned int v427 = *v423;
          int v428 = *(_DWORD *)(v7 + 160);
          if (*(_DWORD *)(v7 + 176) == 2)
          {
            unsigned int v429 = v427 + 2048;
            if (v428 != 1)
            {
              if (v424 >= 0x40) {
                goto LABEL_660;
              }
LABEL_666:
              unsigned int v430 = ZSTD_LLcode_LL_Code[v424];
              unsigned int v431 = v424 - 1;
              if (v424 - 1 >= 0x40) {
                goto LABEL_667;
              }
LABEL_661:
              unsigned int v432 = ZSTD_LLcode_LL_Code[v431];
              goto LABEL_668;
            }
LABEL_664:
            unsigned int v433 = (__clz(v424 + 1) << 8) ^ 0x1F00;
            unsigned int v434 = ((__clz(v424) << 8) ^ 0xFFFFE0FF) + 1;
          }
          else
          {
            if (v428 == 1)
            {
              unsigned int v429 = v427 + 1536;
              goto LABEL_664;
            }
            unsigned int v429 = *(_DWORD *)(v7 + 144)
                 + v427
                 + ((__clz(*(_DWORD *)(*(void *)(v7 + 80) + 4 * *(v426 - 1)) + 1) << 8) ^ 0xFFFFE0FF)
                 + 1;
            if (v424 < 0x40) {
              goto LABEL_666;
            }
LABEL_660:
            unsigned int v430 = 50 - __clz(v424);
            unsigned int v431 = v424 - 1;
            if (v424 - 1 < 0x40) {
              goto LABEL_661;
            }
LABEL_667:
            unsigned int v432 = 50 - __clz(v431);
LABEL_668:
            int v435 = *(_DWORD *)(v7 + 148);
            uint64_t v436 = *(void *)(v7 + 88);
            unsigned int v433 = v435 + (LL_bits[v430] << 8) + ((__clz(*(_DWORD *)(v436 + 4 * v430) + 1) << 8) ^ 0xFFFFE0FF) + 1;
            unsigned int v434 = ~v435 - (LL_bits[v432] << 8) + ((__clz(*(_DWORD *)(v436 + 4 * v432) + 1) << 8) ^ 0x1F01);
            unint64_t v418 = v1257;
          }
          signed int v437 = v429 + v433 + v434;
          long long v438 = (signed int *)&v12[7 * v425];
          signed int v441 = *v438;
          uint64_t v439 = v438 + 2;
          signed int v440 = v441;
          if (v437 <= v441)
          {
            uint64_t v448 = (signed int *)&v12[7 * v425];
            v448[1] = 0;
            v448[2] = 0;
            v448[3] = v424;
            signed int *v448 = v437;
            signed int v440 = v437;
LABEL_674:
            uint64_t v449 = 0;
            uint64_t v450 = &v12[7 * v425];
            int v451 = &v12[7 * v422];
            *((void *)v450 + 2) = *((void *)v451 + 2);
            v450[6] = v451[6];
            int v452 = 1;
            if ((unint64_t)v426 <= v421) {
              goto LABEL_687;
            }
LABEL_652:
            unsigned int v420 = v425 + 1;
LABEL_653:
            ++v419;
            uint64_t v19 = v1238;
            if (v420 > v417) {
              goto LABEL_1321;
            }
            continue;
          }
          break;
        }
        if (!*v439) {
          goto LABEL_674;
        }
        uint64_t v442 = &v12[7 * (v425 - *v439) + 4];
        unsigned int v443 = v12[7 * v425 + 1];
        if (v443 < 3)
        {
          if (!v12[7 * v425 + 3]) {
            ++v443;
          }
          if (v443)
          {
            if (v443 == 3)
            {
              unint64_t v445 = *v442;
              unsigned int v447 = v445 - 1;
            }
            else
            {
              unsigned int v447 = v442[v443];
              unint64_t v445 = *v442;
            }
            BOOL v884 = v443 > 1;
            uint64_t v454 = 2;
            if (v884) {
              uint64_t v454 = 1;
            }
            unint64_t v444 = &v442[v454];
          }
          else
          {
            unint64_t v453 = *(void *)v442;
            unint64_t v444 = &v12[7 * (v425 - *v439) + 6];
            unsigned int v447 = v453;
            unint64_t v445 = HIDWORD(v453);
          }
        }
        else
        {
          unsigned int v446 = *v442;
          unint64_t v444 = &v12[7 * (v425 - *v439) + 5];
          unint64_t v445 = v446;
          unsigned int v447 = v443 - 2;
        }
        int v452 = 0;
        unsigned int v455 = *v444;
        unint64_t v456 = v447 | (v445 << 32);
        uint64_t v457 = &v12[7 * v425];
        *((void *)v457 + 2) = v456;
        v457[6] = v455;
        uint64_t v449 = 1;
        if ((unint64_t)v426 > v421) {
          goto LABEL_652;
        }
LABEL_687:
        if (v425 == v417)
        {
          uint64_t v19 = v1238;
LABEL_1321:
          int v867 = &v12[7 * v417];
          unsigned int v386 = v867[1];
          unsigned int v1113 = *v867;
          unsigned int v379 = v867[2];
          unsigned int v21 = v867[3];
          uint64_t v1268 = *((void *)v867 + 2);
          unsigned int v1269 = v867[6];
          if (v417 >= v21 + v379) {
            unsigned int v385 = v417 - (v21 + v379);
          }
          else {
            unsigned int v385 = 0;
          }
          unint64_t v380 = (unint64_t)(v1259 - 32);
          if (!v379) {
            goto LABEL_1405;
          }
          goto LABEL_1325;
        }
        unsigned int v420 = v425 + 1;
        if ((int)v12[7 * (v425 + 1)] <= v440 + 128) {
          goto LABEL_653;
        }
        int v1212 = v419;
        if (v452)
        {
          unsigned int v21 = v12[7 * v425 + 3];
          if (*(_DWORD *)(v7 + 160) != 1) {
            goto LABEL_691;
          }
LABEL_693:
          unsigned int v1194 = 0;
        }
        else
        {
          unsigned int v21 = 0;
          if (*(_DWORD *)(v7 + 160) == 1) {
            goto LABEL_693;
          }
LABEL_691:
          unsigned int v1194 = *(_DWORD *)(v7 + 148) + ((__clz(**(_DWORD **)(v7 + 88) + 1) << 8) ^ 0xFFFFE0FF) + 1;
        }
        signed int v1203 = v440;
        v1112 = v439;
        unsigned int v1263 = 0;
        uint64_t v458 = *(void *)(v7 + 8);
        uint64_t v459 = *(unsigned int *)(v7 + 36);
        if (v458 + v459 > (unint64_t)v426)
        {
          LODWORD(v460) = 0;
          goto LABEL_1274;
        }
        uint64_t v1131 = v449;
        int v461 = *(_DWORD *)(v7 + 208);
        v1235 = v426;
        for (unsigned int j = v426 - v458; v459 < j; LODWORD(v459) = v463 + v459)
        {
          int v463 = ZSTD_insertBt1(v7, (void *)(v458 + v459), v16, v461, 0);
          unint64_t v16 = (unint64_t)v1259;
        }
        v1248 = &v12[7 * v425 + 4];
        *(_DWORD *)(v7 + 36) = j;
        if ((v461 - 6) < 2)
        {
          uint64_t v460 = 0;
          if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
            unsigned int v507 = 4095;
          }
          else {
            unsigned int v507 = *(_DWORD *)(v7 + 212);
          }
          uint64_t v508 = *(void *)(v7 + 8);
          v426 = v1235;
          unsigned int v509 = v1235 - v508;
          unint64_t v510 = v1235 + 4;
          int v957 = *(_DWORD *)(v7 + 204);
          uint64_t v961 = *(void *)(v7 + 48);
          unint64_t v953 = (0xCF1BBCDCBF9B0000 * *(void *)v1235) >> -(char)*(_DWORD *)(v7 + 200);
          unsigned int v511 = *(_DWORD *)(v961 + 4 * v953);
          int v512 = -1 << (*(_DWORD *)(v7 + 196) - 1);
          uint64_t v513 = *(unsigned int *)(v7 + 24);
          uint64_t v971 = v508;
          v1184 = (void *)(v508 + v513);
          int v984 = ~v512;
          unsigned int v514 = v1235 - v508 + v512 + 1;
          if (v509 < ~v512) {
            unsigned int v514 = 0;
          }
          unsigned int v1120 = v514;
          unsigned int v515 = 1 << *(_DWORD *)(v7 + 192);
          if (v509 - *(_DWORD *)(v7 + 28) > v515 && *(_DWORD *)(v7 + 32) == 0) {
            unsigned int v517 = v509 - v515;
          }
          else {
            unsigned int v517 = *(_DWORD *)(v7 + 28);
          }
          if (v517 <= 1) {
            int v518 = 1;
          }
          else {
            int v518 = v517;
          }
          unsigned int v1162 = v518;
          uint64_t v992 = *(void *)(v7 + 64);
          int v967 = (unsigned int *)(v992 + 8 * (v509 & ~v512));
          unsigned int v1147 = v509 + 9;
          uint64_t v519 = *(void *)(v7 + 184);
          uint64_t v520 = *(void *)(v519 + 8);
          v1173 = *(char **)v519;
          uint64_t v521 = v517 - (*(void *)v519 - v520);
          int v946 = *(_DWORD *)(v519 + 200);
          uint64_t v950 = v519;
          unsigned int v522 = *(_DWORD *)(v519 + 28);
          unsigned int v523 = ~(-1 << (*(_DWORD *)(v519 + 196) - 1));
          unsigned int v524 = *(void *)v519 - v520 - v522;
          uint64_t v942 = *(void *)v519 - v520;
          unsigned int v525 = *(void *)v519 - v520 + (-1 << (*(_DWORD *)(v519 + 196) - 1)) + 1;
          unsigned int v1008 = v523;
          if (v524 <= v523) {
            unsigned int v526 = v522;
          }
          else {
            unsigned int v526 = v525;
          }
          unsigned int v1013 = v526;
          int v1267 = 0;
          unint64_t v527 = (v1258 - 1);
          unsigned int v1029 = v522;
          unsigned int v528 = v509 - v522 - v521;
          uint64_t v529 = v1131;
          uint64_t v530 = v1131 << 63 >> 63;
          if (v1131) {
            unint64_t v531 = 4;
          }
          else {
            unint64_t v531 = 3;
          }
          unsigned int v532 = v509 - v513;
          uint64_t v1021 = v520;
          uint64_t v1000 = v517 - (v1173 - v520);
          uint64_t v533 = v520 - v521;
          uint64_t v534 = &v12[7 * v425 + 4];
          unsigned int v1104 = v509;
          unsigned int v1094 = v511;
          int v1083 = v513;
          unsigned int v1072 = v517;
          unsigned int v1064 = v507;
          uint64_t v1046 = v520 - v521;
          uint64_t v1055 = v1131 << 63 >> 63;
          unsigned int v1037 = v509 - v513;
          while (2)
          {
            if (v529 == 3)
            {
              unsigned int v535 = *v534 - 1;
              unsigned int v536 = v509 - v535;
              unsigned int v537 = *v534 - 2;
              if (v537 >= v532) {
                goto LABEL_788;
              }
LABEL_797:
              if (v536 < v517 || *(_DWORD *)v426 != *(_DWORD *)&v426[-v535]) {
                goto LABEL_785;
              }
              uint64_t v545 = (void *)((char *)v510 - v535);
              if (v1260 > (unint64_t)v510)
              {
                uint64_t v546 = v510;
                unint64_t v547 = *v510 ^ *v545;
                if (v547)
                {
                  unsigned int v542 = (__clz(__rbit64(v547)) >> 3) + 4;
                  unint64_t v543 = v542;
                  if (v527 >= v542) {
                    goto LABEL_785;
                  }
                  goto LABEL_818;
                }
                do
                {
                  ++v545;
                  if ((unint64_t)++v546 >= v1260) {
                    goto LABEL_810;
                  }
                  unint64_t v548 = *v546 ^ *v545;
                }
                while (!v548);
                uint64_t v546 = (void *)((char *)v546 + (__clz(__rbit64(v548)) >> 3));
LABEL_817:
                unsigned int v542 = v546 - v510 + 4;
                unint64_t v543 = v542;
                if (v527 >= v542) {
                  goto LABEL_785;
                }
                goto LABEL_818;
              }
              uint64_t v546 = v510;
LABEL_810:
              if ((unint64_t)v546 >= v1237)
              {
                if ((unint64_t)v546 < v1236) {
                  goto LABEL_822;
                }
LABEL_814:
                if ((unint64_t)v546 >= v16) {
                  goto LABEL_817;
                }
              }
              else
              {
                if (*(_DWORD *)v545 == *(_DWORD *)v546)
                {
                  uint64_t v546 = (void *)((char *)v546 + 4);
                  uint64_t v545 = (void *)((char *)v545 + 4);
                }
                if ((unint64_t)v546 >= v1236) {
                  goto LABEL_814;
                }
LABEL_822:
                if (*(unsigned __int16 *)v545 == *(unsigned __int16 *)v546)
                {
                  uint64_t v546 = (void *)((char *)v546 + 2);
                  uint64_t v545 = (void *)((char *)v545 + 2);
                }
                if ((unint64_t)v546 >= v16) {
                  goto LABEL_817;
                }
              }
              if (*(unsigned __int8 *)v545 == *(unsigned __int8 *)v546) {
                LODWORD(v546) = v546 + 1;
              }
              goto LABEL_817;
            }
            unsigned int v535 = v534[v529];
            unsigned int v536 = v509 - v535;
            unsigned int v537 = v535 - 1;
            if (v535 - 1 < v532) {
              goto LABEL_797;
            }
LABEL_788:
            if (v537 < v528 && v513 + ~v536 >= 3)
            {
              uint64_t v539 = v533 + v536;
              if (*(_DWORD *)v426 == *(_DWORD *)v539)
              {
                unint64_t v1133 = v527;
                uint64_t v540 = v460;
                int v541 = ZSTD_count_2segments(v1235 + 4, (char *)(v539 + 4), v16, v1173, v1184);
                uint64_t v533 = v1046;
                LODWORD(v530) = v1055;
                unsigned int v517 = v1072;
                LODWORD(v513) = v1083;
                unsigned int v507 = v1064;
                unsigned int v511 = v1094;
                unint64_t v527 = v1133;
                unsigned int v509 = v1104;
                uint64_t v460 = v540;
                unsigned int v532 = v1037;
                uint64_t v534 = &v12[7 * v425 + 4];
                v426 = v1235;
                unint64_t v16 = (unint64_t)v1259;
                unsigned int v542 = v541 + 4;
                unint64_t v510 = v1235 + 4;
                unint64_t v543 = v542;
                if (v1133 < v542)
                {
LABEL_818:
                  unint64_t v549 = &v1261[2 * v460];
                  *unint64_t v549 = v529 + v530;
                  v549[1] = v542;
                  uint64_t v460 = (v460 + 1);
                  if (v542 > v507) {
                    goto LABEL_1273;
                  }
                  unint64_t v527 = v543;
                  if (&v426[v543] == (unsigned __int8 *)v16) {
                    goto LABEL_1273;
                  }
                }
              }
            }
LABEL_785:
            if (++v529 < v531) {
              continue;
            }
            break;
          }
          *(_DWORD *)(v961 + 4 * v953) = v509;
          int v550 = ~(-1 << v957);
          if (v511 < v1162)
          {
            unsigned int v551 = v1147;
            uint64_t v553 = v967;
            uint64_t v552 = v971;
            unint64_t v554 = v967 + 1;
            goto LABEL_828;
          }
          unint64_t v664 = 0;
          unint64_t v665 = 0;
          unsigned int v666 = v509 + 2;
          v1250 = (char *)v978 + v425;
          uint64_t v553 = v967;
          uint64_t v552 = v971;
          uint64_t v1220 = v971 + 8;
          unsigned int v551 = v1147;
          unint64_t v554 = v967 + 1;
          uint64_t v667 = v992;
          int v668 = v984;
          while (2)
          {
            if (v665 >= v664) {
              unint64_t v669 = v664;
            }
            else {
              unint64_t v669 = v665;
            }
            uint64_t v670 = v971 + v511;
            v671 = &v426[v669];
            unint64_t v672 = (void *)(v670 + v669);
            if (v1260 <= (unint64_t)&v426[v669])
            {
              unint64_t v675 = (char *)&v426[v669];
              unsigned int v676 = v511;
              if ((unint64_t)v671 >= v1237) {
                goto LABEL_996;
              }
            }
            else
            {
              unint64_t v673 = *(void *)v671 ^ *v672;
              if (v673)
              {
                unint64_t v674 = (__clz(__rbit64(v673)) >> 3) + v669;
                if (v674 <= v527) {
                  goto LABEL_1012;
                }
LABEL_1005:
                if (v674 > v551 - v511) {
                  unsigned int v551 = v511 + v674;
                }
                unint64_t v677 = &v1261[2 * v460];
                *unint64_t v677 = v666 - v511;
                v677[1] = v674;
                LODWORD(v460) = v460 + 1;
                if (v674 > 0x1000 || &v426[v674] == (unsigned __int8 *)v16)
                {
                  unsigned int v1148 = v551;
                  int v1217 = v460;
                  *unint64_t v554 = 0;
                  *uint64_t v553 = 0;
LABEL_1263:
                  unsigned int v727 = v1148;
                  goto LABEL_1264;
                }
                unint64_t v527 = v674;
LABEL_1012:
                unint64_t v679 = (unsigned int *)(v667 + 8 * (v511 & v668));
                if (*(unsigned __int8 *)(v670 + v674) >= v426[v674])
                {
                  *unint64_t v554 = v511;
                  if (v511 <= v1120)
                  {
                    unint64_t v554 = (unsigned int *)&v1267;
LABEL_828:
                    unsigned int v1148 = v551;
                    *unint64_t v554 = 0;
                    *uint64_t v553 = 0;
                    int v1217 = v460;
                    if (!v550) {
                      goto LABEL_1263;
                    }
                    unsigned int v555 = *(_DWORD *)(*(void *)(v950 + 48)
                                     + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v426) >> -(char)v946));
                    if (v555 <= v1029) {
                      goto LABEL_1263;
                    }
                    unint64_t v556 = 0;
                    unint64_t v557 = 0;
                    uint64_t v1073 = *(void *)(v950 + 64);
                    uint64_t v1084 = v552 + v1000;
                    unsigned int v1105 = v1104 + 2;
                    int v1121 = v550 - 1;
                    while (1)
                    {
                      unsigned int v1249 = v555;
                      unint64_t v1163 = v556;
                      unint64_t v1134 = v557;
                      if (v557 >= v556) {
                        unint64_t v558 = v556;
                      }
                      else {
                        unint64_t v558 = v557;
                      }
                      uint64_t v559 = v555;
                      uint64_t v560 = v1021 + v555;
                      unint64_t v561 = v527;
                      unint64_t v562 = ZSTD_count_2segments(&v426[v558], (char *)(v560 + v558), v16, v1173, v1184);
                      unint64_t v563 = v562 + v558;
                      if (v562 + v558 + v559 >= v942) {
                        uint64_t v564 = v1084 + v559;
                      }
                      else {
                        uint64_t v564 = v560;
                      }
                      if (v563 <= v561)
                      {
                        unint64_t v527 = v561;
                        unint64_t v16 = (unint64_t)v1259;
                        v426 = v1235;
                        unint64_t v556 = v1163;
                        unint64_t v557 = v1134;
                        unsigned int v567 = v1249;
                        if (v1249 <= v1013) {
                          goto LABEL_1263;
                        }
                      }
                      else
                      {
                        unsigned int v565 = v1148;
                        if (v563 > v1148 - (v1249 + v1000)) {
                          unsigned int v565 = v1249 + v1000 + v563;
                        }
                        unsigned int v1148 = v565;
                        long long v566 = &v1261[2 * v1217];
                        _DWORD *v566 = v1105 - (v1249 + v1000);
                        v566[1] = v563;
                        ++v1217;
                        if (v563 > 0x1000)
                        {
                          LODWORD(v16) = v1259;
                          LODWORD(v426) = v1235;
                          goto LABEL_1263;
                        }
                        unsigned int v567 = v1249;
                        v426 = v1235;
                        unint64_t v527 = v562 + v558;
                        unint64_t v16 = (unint64_t)v1259;
                        unint64_t v556 = v1163;
                        unint64_t v557 = v1134;
                        if (&v1235[v563] == v1259 || v1249 <= v1013) {
                          goto LABEL_1263;
                        }
                      }
                      unsigned int v568 = *(unsigned __int8 *)(v564 + v563);
                      unsigned int v569 = v426[v563];
                      BOOL v57 = v568 >= v569;
                      BOOL v570 = v568 < v569;
                      if (v57) {
                        unint64_t v556 = v562 + v558;
                      }
                      else {
                        unint64_t v557 = v562 + v558;
                      }
                      if (v1121)
                      {
                        --v1121;
                        unsigned int v555 = *(_DWORD *)(v1073 + 8 * (v567 & v1008) + 4 * v570);
                        if (v555 > v1029) {
                          continue;
                        }
                      }
                      goto LABEL_1263;
                    }
                  }
                  unint64_t v664 = v674;
                  unint64_t v554 = (unsigned int *)(v667 + 8 * (v511 & v668));
                  BOOL v57 = v550-- != 0;
                  if (!v57) {
                    goto LABEL_828;
                  }
                }
                else
                {
                  *uint64_t v553 = v511;
                  if (v511 <= v1120)
                  {
                    uint64_t v553 = (unsigned int *)&v1267;
                    goto LABEL_828;
                  }
                  ++v679;
                  unint64_t v665 = v674;
                  uint64_t v553 = v679;
                  BOOL v57 = v550-- != 0;
                  if (!v57) {
                    goto LABEL_828;
                  }
                }
                unsigned int v511 = *v679;
                if (*v679 < v1162) {
                  goto LABEL_828;
                }
                continue;
              }
              unsigned int v676 = v511;
              unint64_t v680 = v554;
              unint64_t v681 = v527;
              uint64_t v682 = 0;
              unint64_t v683 = &v1250[v669];
              while (1)
              {
                int v684 = &v683[v682];
                if ((unint64_t)&v683[v682] >= v1260) {
                  break;
                }
                uint64_t v685 = *(void *)(v1220 + v669 + v511 + v682);
                v682 += 8;
                unint64_t v686 = *(void *)v684 ^ v685;
                if (v686)
                {
                  unint64_t v687 = __clz(__rbit64(v686));
                  unint64_t v527 = v681;
                  unint64_t v554 = v680;
                  uint64_t v667 = v992;
                  int v668 = v984;
                  unint64_t v674 = v682 + (v687 >> 3) + v669;
                  if (v674 <= v527) {
                    goto LABEL_1012;
                  }
                  goto LABEL_1005;
                }
              }
              unint64_t v675 = &v1250[v669 + v682];
              unint64_t v672 = (void *)(v1220 + v669 + v511 + v682);
              unint64_t v527 = v681;
              unint64_t v554 = v680;
              uint64_t v667 = v992;
              int v668 = v984;
              if ((unint64_t)v675 >= v1237)
              {
LABEL_996:
                if ((unint64_t)v675 >= v1236)
                {
                  if ((unint64_t)v675 >= v16) {
                    goto LABEL_1004;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v672 == *(unsigned __int16 *)v675)
                  {
                    v675 += 2;
                    unint64_t v672 = (void *)((char *)v672 + 2);
                  }
                  if ((unint64_t)v675 >= v16)
                  {
LABEL_1004:
                    unsigned int v511 = v676;
                    unint64_t v674 = v675 - (char *)v426;
                    if (v675 - (char *)v426 <= v527) {
                      goto LABEL_1012;
                    }
                    goto LABEL_1005;
                  }
                }
                if (*(unsigned __int8 *)v672 == *v675) {
                  ++v675;
                }
                goto LABEL_1004;
              }
            }
            break;
          }
          if (*(_DWORD *)v672 == *(_DWORD *)v675)
          {
            v675 += 4;
            unint64_t v672 = (void *)((char *)v672 + 4);
          }
          goto LABEL_996;
        }
        v426 = v1235;
        if (v461 == 5)
        {
          LODWORD(v460) = 0;
          unsigned int v571 = *(_DWORD *)(v7 + 212);
          if (v571 >= 0xFFF) {
            uint64_t v572 = 4095;
          }
          else {
            uint64_t v572 = v571;
          }
          uint64_t v573 = *(void *)(v7 + 8);
          unsigned int v574 = v1235 - v573;
          int v575 = v1235 + 4;
          int v958 = *(_DWORD *)(v7 + 204);
          uint64_t v962 = *(void *)(v7 + 48);
          unint64_t v954 = (0xCF1BBCDCBB000000 * *(void *)v1235) >> -(char)*(_DWORD *)(v7 + 200);
          unsigned int v576 = *(_DWORD *)(v962 + 4 * v954);
          int v577 = -1 << (*(_DWORD *)(v7 + 196) - 1);
          uint64_t v578 = *(unsigned int *)(v7 + 24);
          uint64_t v972 = v573;
          v1174 = (void *)(v573 + v578);
          int v985 = ~v577;
          unsigned int v579 = v1235 - v573 + v577 + 1;
          if (v574 < ~v577) {
            unsigned int v579 = 0;
          }
          unsigned int v1122 = v579;
          unsigned int v580 = 1 << *(_DWORD *)(v7 + 192);
          if (v574 - *(_DWORD *)(v7 + 28) > v580 && *(_DWORD *)(v7 + 32) == 0) {
            unsigned int v582 = v574 - v580;
          }
          else {
            unsigned int v582 = *(_DWORD *)(v7 + 28);
          }
          if (v582 <= 1) {
            int v583 = 1;
          }
          else {
            int v583 = v582;
          }
          unsigned int v1149 = v583;
          uint64_t v993 = *(void *)(v7 + 64);
          uint64_t v968 = (unsigned int *)(v993 + 8 * (v574 & ~v577));
          unsigned int v1185 = v574 + 9;
          uint64_t v584 = *(void *)(v7 + 184);
          uint64_t v585 = *(void *)(v584 + 8);
          v1164 = *(char **)v584;
          uint64_t v586 = v582 - (*(void *)v584 - v585);
          int v947 = *(_DWORD *)(v584 + 200);
          uint64_t v951 = v584;
          unsigned int v587 = *(_DWORD *)(v584 + 28);
          unsigned int v588 = ~(-1 << (*(_DWORD *)(v584 + 196) - 1));
          unsigned int v589 = *(void *)v584 - v585 - v587;
          uint64_t v943 = *(void *)v584 - v585;
          unsigned int v590 = *(void *)v584 - v585 + (-1 << (*(_DWORD *)(v584 + 196) - 1)) + 1;
          unsigned int v1009 = v588;
          if (v589 <= v588) {
            unsigned int v591 = v587;
          }
          else {
            unsigned int v591 = v590;
          }
          unsigned int v1014 = v591;
          int v1267 = 0;
          unint64_t v592 = (v1258 - 1);
          unsigned int v1030 = v587;
          unsigned int v593 = v574 - v587 - v586;
          uint64_t v594 = v1131;
          uint64_t v595 = v1131 << 63 >> 63;
          if (v1131) {
            unint64_t v596 = 4;
          }
          else {
            unint64_t v596 = 3;
          }
          unsigned int v597 = v574 - v578;
          uint64_t v1022 = v585;
          uint64_t v1001 = v582 - (v1164 - v585);
          uint64_t v598 = v585 - v586;
          unsigned int v1106 = v576;
          unsigned int v1095 = v574;
          int v1085 = v578;
          unsigned int v1074 = v582;
          unsigned int v1065 = v593;
          uint64_t v1047 = v585 - v586;
          unint64_t v1056 = v596;
          unsigned int v1038 = v574 - v578;
          while (2)
          {
            if (v594 == 3)
            {
              unsigned int v599 = *v1248 - 1;
              unsigned int v600 = v574 - v599;
              unsigned int v601 = *v1248 - 2;
              if (v601 >= v597) {
                goto LABEL_875;
              }
LABEL_884:
              if (v600 < v582 || *(_DWORD *)v426 != *(_DWORD *)&v426[-v599]) {
                goto LABEL_872;
              }
              uint64_t v609 = (void *)((char *)v575 - v599);
              if (v1260 > (unint64_t)v575)
              {
                uint64_t v610 = v1235 + 4;
                unint64_t v611 = *v575 ^ *v609;
                if (v611)
                {
                  unsigned int v606 = (__clz(__rbit64(v611)) >> 3) + 4;
                  unint64_t v607 = v606;
                  if (v592 >= v606) {
                    goto LABEL_872;
                  }
                  goto LABEL_905;
                }
                do
                {
                  ++v609;
                  if ((unint64_t)++v610 >= v1260) {
                    goto LABEL_897;
                  }
                  unint64_t v612 = *v610 ^ *v609;
                }
                while (!v612);
                uint64_t v610 = (void *)((char *)v610 + (__clz(__rbit64(v612)) >> 3));
LABEL_904:
                unsigned int v606 = v610 - v1235;
                unint64_t v607 = v606;
                if (v592 >= v606) {
                  goto LABEL_872;
                }
                goto LABEL_905;
              }
              uint64_t v610 = v1235 + 4;
LABEL_897:
              if ((unint64_t)v610 >= v1237)
              {
                if ((unint64_t)v610 < v1236) {
                  goto LABEL_909;
                }
LABEL_901:
                if ((unint64_t)v610 >= v16) {
                  goto LABEL_904;
                }
              }
              else
              {
                if (*(_DWORD *)v609 == *(_DWORD *)v610)
                {
                  uint64_t v610 = (void *)((char *)v610 + 4);
                  uint64_t v609 = (void *)((char *)v609 + 4);
                }
                if ((unint64_t)v610 >= v1236) {
                  goto LABEL_901;
                }
LABEL_909:
                if (*(unsigned __int16 *)v609 == *(unsigned __int16 *)v610)
                {
                  uint64_t v610 = (void *)((char *)v610 + 2);
                  uint64_t v609 = (void *)((char *)v609 + 2);
                }
                if ((unint64_t)v610 >= v16) {
                  goto LABEL_904;
                }
              }
              if (*(unsigned __int8 *)v609 == *(unsigned __int8 *)v610) {
                LODWORD(v610) = v610 + 1;
              }
              goto LABEL_904;
            }
            unsigned int v599 = v1248[v594];
            unsigned int v600 = v574 - v599;
            unsigned int v601 = v599 - 1;
            if (v599 - 1 < v597) {
              goto LABEL_884;
            }
LABEL_875:
            if (v601 < v593 && v578 + ~v600 >= 3)
            {
              uint64_t v603 = v598 + v600;
              if (*(_DWORD *)v426 == *(_DWORD *)v603)
              {
                unint64_t v1135 = v592;
                int v1218 = v460;
                uint64_t v604 = v572;
                uint64_t v605 = v595;
                LODWORD(v578) = ZSTD_count_2segments(v575, (char *)(v603 + 4), v16, v1164, v1174);
                unsigned int v597 = v1038;
                uint64_t v598 = v1047;
                unint64_t v596 = v1056;
                uint64_t v595 = v605;
                unsigned int v593 = v1065;
                unsigned int v582 = v1074;
                uint64_t v572 = v604;
                unsigned int v576 = v1106;
                unint64_t v592 = v1135;
                LODWORD(v460) = v1218;
                unsigned int v574 = v1095;
                v426 = v1235;
                unint64_t v16 = (unint64_t)v1259;
                unsigned int v606 = v578 + 4;
                LODWORD(v578) = v1085;
                unint64_t v607 = v606;
                if (v1135 < v606)
                {
LABEL_905:
                  unint64_t v613 = &v1261[2 * v460];
                  *unint64_t v613 = v594 + v595;
                  v613[1] = v606;
                  LODWORD(v460) = v460 + 1;
                  if (v606 > v572) {
                    goto LABEL_1273;
                  }
                  unint64_t v592 = v607;
                  if (&v426[v607] == (unsigned __int8 *)v16) {
                    goto LABEL_1273;
                  }
                }
              }
            }
LABEL_872:
            if (++v594 < v596) {
              continue;
            }
            break;
          }
          *(_DWORD *)(v962 + 4 * v954) = v574;
          int v688 = ~(-1 << v958);
          if (v576 < v1149)
          {
            uint64_t v689 = v1224;
            unsigned int v690 = v1185;
            uint64_t v691 = v968;
            uint64_t v692 = v972;
            int v693 = v968 + 1;
            goto LABEL_1028;
          }
          unint64_t v748 = 0;
          unint64_t v749 = 0;
          v1222 = (char *)v978 + v425;
          uint64_t v691 = v968;
          uint64_t v692 = v972;
          uint64_t v1140 = v972 + 8;
          uint64_t v689 = v1224;
          unsigned int v690 = v1185;
          int v693 = v968 + 1;
          uint64_t v750 = v993;
          int v751 = v985;
          while (2)
          {
            if (v749 >= v748) {
              unint64_t v752 = v748;
            }
            else {
              unint64_t v752 = v749;
            }
            uint64_t v753 = v972 + v576;
            int v754 = &v426[v752];
            int v755 = (void *)(v753 + v752);
            if (v1260 <= (unint64_t)&v426[v752])
            {
              unint64_t v758 = (char *)&v426[v752];
              unsigned int v759 = v576;
              if ((unint64_t)v754 >= v1237) {
                goto LABEL_1114;
              }
            }
            else
            {
              unint64_t v756 = *(void *)v754 ^ *v755;
              if (v756)
              {
                unint64_t v757 = (__clz(__rbit64(v756)) >> 3) + v752;
                if (v757 <= v592) {
                  goto LABEL_1130;
                }
LABEL_1123:
                if (v757 > v690 - v576) {
                  unsigned int v690 = v576 + v757;
                }
                uint64_t v760 = &v1261[2 * v460];
                *uint64_t v760 = v574 + 2 - v576;
                v760[1] = v757;
                LODWORD(v460) = v460 + 1;
                if (v757 > 0x1000 || &v426[v757] == (unsigned __int8 *)v16)
                {
                  int v1217 = v460;
                  *int v693 = 0;
                  *uint64_t v691 = 0;
LABEL_1271:
                  *(_DWORD *)(v689 + 36) = v690 - 8;
                  goto LABEL_1272;
                }
                unint64_t v592 = v757;
LABEL_1130:
                uint64_t v762 = (unsigned int *)(v750 + 8 * (v576 & v751));
                if (*(unsigned __int8 *)(v753 + v757) >= v426[v757])
                {
                  *int v693 = v576;
                  if (v576 <= v1122)
                  {
                    int v693 = (unsigned int *)&v1267;
LABEL_1028:
                    *int v693 = 0;
                    *uint64_t v691 = 0;
                    int v1217 = v460;
                    if (!v688) {
                      goto LABEL_1271;
                    }
                    unsigned int v694 = *(_DWORD *)(*(void *)(v951 + 48)
                                     + 4 * ((0xCF1BBCDCBB000000 * *(void *)v426) >> -(char)v947));
                    if (v694 <= v1030) {
                      goto LABEL_1271;
                    }
                    unint64_t v695 = 0;
                    unint64_t v696 = 0;
                    uint64_t v1076 = *(void *)(v951 + 64);
                    uint64_t v1087 = v692 + v1001;
                    unsigned int v1097 = v574 + 2;
                    int v1124 = v688 - 1;
                    while (1)
                    {
                      unsigned int v1251 = v694;
                      unsigned int v1187 = v690;
                      unint64_t v1137 = v696;
                      unint64_t v1151 = v695;
                      if (v696 >= v695) {
                        unint64_t v697 = v695;
                      }
                      else {
                        unint64_t v697 = v696;
                      }
                      uint64_t v698 = v694;
                      uint64_t v699 = v1022 + v694;
                      unint64_t v700 = v592;
                      unint64_t v701 = ZSTD_count_2segments(&v426[v697], (char *)(v699 + v697), v16, v1164, v1174) + v697;
                      if (v701 + v698 >= v943) {
                        uint64_t v702 = v1087 + v698;
                      }
                      else {
                        uint64_t v702 = v699;
                      }
                      if (v701 <= v700)
                      {
                        unint64_t v592 = v700;
                        unint64_t v16 = (unint64_t)v1259;
                        uint64_t v689 = v1224;
                        v426 = v1235;
                        unsigned int v690 = v1187;
                        unint64_t v696 = v1137;
                        unint64_t v695 = v1151;
                        unsigned int v704 = v1251;
                        if (v1251 <= v1014) {
                          goto LABEL_1271;
                        }
                      }
                      else
                      {
                        unsigned int v690 = v1187;
                        if (v701 > v1187 - (v1251 + v1001)) {
                          unsigned int v690 = v1251 + v1001 + v701;
                        }
                        unsigned int v703 = &v1261[2 * v1217];
                        *unsigned int v703 = v1097 - (v1251 + v1001);
                        v703[1] = v701;
                        ++v1217;
                        if (v701 > 0x1000)
                        {
                          LODWORD(v16) = v1259;
                          uint64_t v689 = v1224;
                          LODWORD(v426) = v1235;
                          goto LABEL_1271;
                        }
                        unsigned int v704 = v1251;
                        v426 = v1235;
                        unint64_t v592 = v701;
                        unint64_t v16 = (unint64_t)v1259;
                        uint64_t v689 = v1224;
                        unint64_t v696 = v1137;
                        unint64_t v695 = v1151;
                        if (&v1235[v701] == v1259 || v1251 <= v1014) {
                          goto LABEL_1271;
                        }
                      }
                      unsigned int v705 = *(unsigned __int8 *)(v702 + v701);
                      unsigned int v706 = v426[v701];
                      BOOL v57 = v705 >= v706;
                      BOOL v707 = v705 < v706;
                      if (v57) {
                        unint64_t v695 = v701;
                      }
                      else {
                        unint64_t v696 = v701;
                      }
                      if (v1124)
                      {
                        --v1124;
                        unsigned int v694 = *(_DWORD *)(v1076 + 8 * (v704 & v1009) + 4 * v707);
                        if (v694 > v1030) {
                          continue;
                        }
                      }
                      goto LABEL_1271;
                    }
                  }
                  unint64_t v748 = v757;
                  int v693 = (unsigned int *)(v750 + 8 * (v576 & v751));
                  BOOL v57 = v688-- != 0;
                  if (!v57) {
                    goto LABEL_1028;
                  }
                }
                else
                {
                  *uint64_t v691 = v576;
                  if (v576 <= v1122)
                  {
                    uint64_t v691 = (unsigned int *)&v1267;
                    goto LABEL_1028;
                  }
                  ++v762;
                  unint64_t v749 = v757;
                  uint64_t v691 = v762;
                  BOOL v57 = v688-- != 0;
                  if (!v57) {
                    goto LABEL_1028;
                  }
                }
                unsigned int v576 = *v762;
                if (*v762 < v1149) {
                  goto LABEL_1028;
                }
                continue;
              }
              unsigned int v759 = v576;
              uint64_t v763 = v693;
              uint64_t v764 = v691;
              unint64_t v765 = v592;
              uint64_t v766 = 0;
              unsigned int v767 = &v1222[v752];
              while (1)
              {
                v768 = &v767[v766];
                if ((unint64_t)&v767[v766] >= v1260) {
                  break;
                }
                uint64_t v769 = *(void *)(v1140 + v752 + v576 + v766);
                v766 += 8;
                unint64_t v770 = *(void *)v768 ^ v769;
                if (v770)
                {
                  unint64_t v771 = __clz(__rbit64(v770));
                  unint64_t v592 = v765;
                  uint64_t v691 = v764;
                  int v693 = v763;
                  uint64_t v750 = v993;
                  int v751 = v985;
                  unint64_t v757 = v766 + (v771 >> 3) + v752;
                  if (v757 <= v592) {
                    goto LABEL_1130;
                  }
                  goto LABEL_1123;
                }
              }
              unint64_t v758 = &v1222[v752 + v766];
              int v755 = (void *)(v1140 + v752 + v576 + v766);
              unint64_t v592 = v765;
              uint64_t v691 = v764;
              int v693 = v763;
              uint64_t v750 = v993;
              int v751 = v985;
              if ((unint64_t)v758 >= v1237)
              {
LABEL_1114:
                if ((unint64_t)v758 >= v1236)
                {
                  if ((unint64_t)v758 >= v16) {
                    goto LABEL_1122;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v755 == *(unsigned __int16 *)v758)
                  {
                    v758 += 2;
                    int v755 = (void *)((char *)v755 + 2);
                  }
                  if ((unint64_t)v758 >= v16)
                  {
LABEL_1122:
                    unsigned int v576 = v759;
                    unint64_t v757 = v758 - (char *)v426;
                    if (v758 - (char *)v426 <= v592) {
                      goto LABEL_1130;
                    }
                    goto LABEL_1123;
                  }
                }
                if (*(unsigned __int8 *)v755 == *v758) {
                  ++v758;
                }
                goto LABEL_1122;
              }
            }
            break;
          }
          if (*(_DWORD *)v755 == *(_DWORD *)v758)
          {
            v758 += 4;
            int v755 = (void *)((char *)v755 + 4);
          }
          goto LABEL_1114;
        }
        if (v461 != 3)
        {
          uint64_t v460 = 0;
          if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
            unsigned int v614 = 4095;
          }
          else {
            unsigned int v614 = *(_DWORD *)(v7 + 212);
          }
          uint64_t v615 = *(void *)(v7 + 8);
          unsigned int v616 = v1235 - v615;
          uint64_t v617 = v1235 + 4;
          int v959 = *(_DWORD *)(v7 + 204);
          uint64_t v963 = *(void *)(v7 + 48);
          uint64_t v955 = (-1640531535 * *(_DWORD *)v1235) >> -(char)*(_DWORD *)(v7 + 200);
          unsigned int v618 = *(_DWORD *)(v963 + 4 * v955);
          int v619 = -1 << (*(_DWORD *)(v7 + 196) - 1);
          uint64_t v620 = *(unsigned int *)(v7 + 24);
          uint64_t v969 = v615;
          v1175 = (void *)(v615 + v620);
          int v1096 = ~v619;
          unsigned int v621 = v1235 - v615 + v619 + 1;
          if (v616 < ~v619) {
            unsigned int v621 = 0;
          }
          unsigned int v1086 = v621;
          unsigned int v622 = 1 << *(_DWORD *)(v7 + 192);
          if (v616 - *(_DWORD *)(v7 + 28) > v622 && *(_DWORD *)(v7 + 32) == 0) {
            unsigned int v624 = v616 - v622;
          }
          else {
            unsigned int v624 = *(_DWORD *)(v7 + 28);
          }
          if (v624 <= 1) {
            int v625 = 1;
          }
          else {
            int v625 = v624;
          }
          unsigned int v1219 = v625;
          uint64_t v1107 = *(void *)(v7 + 64);
          v965 = (unsigned int *)(v1107 + 8 * (v616 & ~v619));
          unsigned int v1123 = v616 + 9;
          uint64_t v626 = *(void *)(v7 + 184);
          uint64_t v627 = *(void *)(v626 + 8);
          v1150 = v965 + 1;
          v1165 = *(char **)v626;
          uint64_t v628 = *(void *)v626 - v627;
          uint64_t v629 = v624 - (*(void *)v626 - v627);
          int v948 = *(_DWORD *)(v626 + 200);
          uint64_t v952 = v626;
          unsigned int v630 = *(_DWORD *)(v626 + 28);
          unsigned int v631 = ~(-1 << (*(_DWORD *)(v626 + 196) - 1));
          unsigned int v944 = v628;
          unsigned int v632 = v628 + (-1 << (*(_DWORD *)(v626 + 196) - 1)) + 1;
          if (v628 - v630 <= v631) {
            unsigned int v633 = v630;
          }
          else {
            unsigned int v633 = v632;
          }
          unsigned int v986 = v631;
          unsigned int v994 = v633;
          int v1267 = 0;
          unint64_t v634 = (v1258 - 1);
          unsigned int v1010 = v630;
          unsigned int v635 = v616 - v630 - v629;
          uint64_t v636 = v1131;
          uint64_t v637 = v1131 << 63 >> 63;
          if (v1131) {
            unint64_t v638 = 4;
          }
          else {
            unint64_t v638 = 3;
          }
          unsigned int v639 = v616 - v620;
          uint64_t v1002 = v627;
          uint64_t v973 = v629;
          uint64_t v640 = v627 - v629;
          unsigned int v1136 = v616;
          unsigned int v1075 = v618;
          unsigned int v1066 = v614;
          int v1057 = v620;
          unsigned int v1048 = v624;
          unint64_t v1039 = v638;
          unsigned int v1031 = v616 - v620;
          uint64_t v1023 = v627 - v629;
          unsigned int v1015 = v616 - v630 - v629;
          while (2)
          {
            if (v636 == 3)
            {
              unsigned int v641 = *v1248 - 1;
              unsigned int v642 = v616 - v641;
              unsigned int v643 = *v1248 - 2;
              if (v643 >= v639) {
                goto LABEL_937;
              }
LABEL_946:
              if (v642 < v624 || *(_DWORD *)v426 != *(_DWORD *)&v426[-v641]) {
                goto LABEL_934;
              }
              uint64_t v651 = (void *)((char *)v617 - v641);
              if (v1260 > (unint64_t)v617)
              {
                unsigned int v652 = v1235 + 4;
                unint64_t v653 = *v617 ^ *v651;
                if (v653)
                {
                  unsigned int v648 = (__clz(__rbit64(v653)) >> 3) + 4;
                  unint64_t v649 = v648;
                  if (v634 >= v648) {
                    goto LABEL_934;
                  }
                  goto LABEL_967;
                }
                do
                {
                  ++v651;
                  if ((unint64_t)++v652 >= v1260) {
                    goto LABEL_959;
                  }
                  unint64_t v654 = *v652 ^ *v651;
                }
                while (!v654);
                unsigned int v652 = (void *)((char *)v652 + (__clz(__rbit64(v654)) >> 3));
LABEL_966:
                unsigned int v648 = v652 - v1235;
                unint64_t v649 = v648;
                if (v634 >= v648) {
                  goto LABEL_934;
                }
                goto LABEL_967;
              }
              unsigned int v652 = v1235 + 4;
LABEL_959:
              if ((unint64_t)v652 >= v1237)
              {
                if ((unint64_t)v652 < v1236) {
                  goto LABEL_971;
                }
LABEL_963:
                if ((unint64_t)v652 >= v16) {
                  goto LABEL_966;
                }
              }
              else
              {
                if (*(_DWORD *)v651 == *(_DWORD *)v652)
                {
                  unsigned int v652 = (void *)((char *)v652 + 4);
                  uint64_t v651 = (void *)((char *)v651 + 4);
                }
                if ((unint64_t)v652 >= v1236) {
                  goto LABEL_963;
                }
LABEL_971:
                if (*(unsigned __int16 *)v651 == *(unsigned __int16 *)v652)
                {
                  unsigned int v652 = (void *)((char *)v652 + 2);
                  uint64_t v651 = (void *)((char *)v651 + 2);
                }
                if ((unint64_t)v652 >= v16) {
                  goto LABEL_966;
                }
              }
              if (*(unsigned __int8 *)v651 == *(unsigned __int8 *)v652) {
                LODWORD(v652) = v652 + 1;
              }
              goto LABEL_966;
            }
            unsigned int v641 = v1248[v636];
            unsigned int v642 = v616 - v641;
            unsigned int v643 = v641 - 1;
            if (v641 - 1 < v639) {
              goto LABEL_946;
            }
LABEL_937:
            if (v643 < v635 && v620 + ~v642 >= 3)
            {
              uint64_t v645 = v640 + v642;
              if (*(_DWORD *)v426 == *(_DWORD *)v645)
              {
                unint64_t v1186 = v634;
                uint64_t v646 = v460;
                int v647 = ZSTD_count_2segments(v617, (char *)(v645 + 4), v16, v1165, v1175);
                unsigned int v635 = v1015;
                uint64_t v640 = v1023;
                unsigned int v639 = v1031;
                unint64_t v638 = v1039;
                unsigned int v624 = v1048;
                LODWORD(v620) = v1057;
                unsigned int v614 = v1066;
                unsigned int v618 = v1075;
                unsigned int v616 = v1136;
                uint64_t v460 = v646;
                unint64_t v634 = v1186;
                v426 = v1235;
                unint64_t v16 = (unint64_t)v1259;
                unsigned int v648 = v647 + 4;
                unint64_t v649 = (v647 + 4);
                if (v1186 < v649)
                {
LABEL_967:
                  unsigned int v655 = &v1261[2 * v460];
                  _DWORD *v655 = v636 + v637;
                  v655[1] = v648;
                  uint64_t v460 = (v460 + 1);
                  if (v648 > v614) {
                    goto LABEL_1273;
                  }
                  unint64_t v634 = v649;
                  if (&v426[v649] == (unsigned __int8 *)v16) {
                    goto LABEL_1273;
                  }
                }
              }
            }
LABEL_934:
            if (++v636 < v638) {
              continue;
            }
            break;
          }
          *(_DWORD *)(v963 + 4 * v955) = v616;
          int v708 = ~(-1 << v959);
          if (v618 < v1219)
          {
            unsigned int v709 = v1123;
            v711 = v965;
            uint64_t v710 = v969;
            goto LABEL_1053;
          }
          unint64_t v772 = 0;
          unint64_t v773 = 0;
          unsigned int v774 = v616 + 2;
          v1254 = (char *)v978 + v425;
          v711 = v965;
          uint64_t v710 = v969;
          uint64_t v775 = v969 + 8;
          unsigned int v709 = v1123;
          while (2)
          {
            if (v773 >= v772) {
              unint64_t v776 = v772;
            }
            else {
              unint64_t v776 = v773;
            }
            uint64_t v777 = v618;
            uint64_t v778 = v969 + v618;
            unsigned int v779 = &v426[v776];
            unsigned int v780 = (void *)(v778 + v776);
            if (v1260 <= (unint64_t)&v426[v776])
            {
              v783 = (char *)&v426[v776];
              if ((unint64_t)v779 >= v1237) {
                goto LABEL_1156;
              }
            }
            else
            {
              unint64_t v781 = *(void *)v779 ^ *v780;
              if (v781)
              {
                unint64_t v782 = (__clz(__rbit64(v781)) >> 3) + v776;
                if (v782 <= v634) {
                  goto LABEL_1172;
                }
LABEL_1165:
                if (v782 > v709 - v618) {
                  unsigned int v709 = v618 + v782;
                }
                v784 = &v1261[2 * v460];
                _DWORD *v784 = v774 - v618;
                v784[1] = v782;
                LODWORD(v460) = v460 + 1;
                if (v782 > 0x1000 || &v426[v782] == (unsigned __int8 *)v16)
                {
                  int v1217 = v460;
                  unsigned int *v1150 = 0;
                  unsigned int *v711 = 0;
                  unsigned int v727 = v709;
                  goto LABEL_1264;
                }
                unint64_t v634 = v782;
LABEL_1172:
                v786 = (unsigned int *)(v1107 + 8 * (v618 & v1096));
                if (*(unsigned __int8 *)(v778 + v782) >= v426[v782])
                {
                  unsigned int *v1150 = v618;
                  if (v618 <= v1086)
                  {
                    v1150 = (unsigned int *)&v1267;
LABEL_1053:
                    unsigned int v1125 = v709;
                    unsigned int *v1150 = 0;
                    unsigned int *v711 = 0;
                    int v1217 = v460;
                    if (!v708
                      || (unsigned int v712 = *(_DWORD *)(*(void *)(v952 + 48)
                                           + 4 * ((-1640531535 * *(_DWORD *)v426) >> -(char)v948)),
                          v712 <= v1010))
                    {
LABEL_1075:
                      unsigned int v727 = v1125;
                      goto LABEL_1264;
                    }
                    unint64_t v1188 = v634;
                    unint64_t v713 = 0;
                    unint64_t v714 = 0;
                    uint64_t v1088 = *(void *)(v952 + 64);
                    uint64_t v1098 = v710 + v973;
                    unsigned int v1077 = v1136 + 2;
                    int v1138 = v708 - 1;
                    while (1)
                    {
                      unsigned int v1252 = v712;
                      unint64_t v1152 = v713;
                      if (v714 >= v713) {
                        unint64_t v715 = v713;
                      }
                      else {
                        unint64_t v715 = v714;
                      }
                      uint64_t v716 = v712;
                      uint64_t v717 = v1002 + v712;
                      unint64_t v718 = ZSTD_count_2segments(&v426[v715], (char *)(v717 + v715), v16, v1165, v1175);
                      unint64_t v719 = v718 + v715;
                      if (v718 + v715 + v716 >= v944) {
                        uint64_t v720 = v1098 + v716;
                      }
                      else {
                        uint64_t v720 = v717;
                      }
                      if (v719 <= v1188)
                      {
                        unint64_t v16 = (unint64_t)v1259;
                        v426 = v1235;
                        unint64_t v713 = v1152;
                        unsigned int v723 = v1252;
                        if (v1252 <= v994) {
                          goto LABEL_1075;
                        }
                      }
                      else
                      {
                        unsigned int v721 = v1125;
                        if (v719 > v1125 - (v1252 + v973)) {
                          unsigned int v721 = v1252 + v973 + v719;
                        }
                        unsigned int v1125 = v721;
                        unint64_t v722 = &v1261[2 * v1217];
                        *unint64_t v722 = v1077 - (v1252 + v973);
                        v722[1] = v719;
                        ++v1217;
                        if (v719 > 0x1000)
                        {
                          LODWORD(v16) = v1259;
                          LODWORD(v426) = v1235;
                          unsigned int v727 = v721;
LABEL_1264:
                          *(_DWORD *)(v1224 + 36) = v727 - 8;
LABEL_1272:
                          LODWORD(v460) = v1217;
LABEL_1273:
                          uint64_t v18 = v12 + 7;
                          goto LABEL_1274;
                        }
                        unsigned int v723 = v1252;
                        v426 = v1235;
                        unint64_t v1188 = v718 + v715;
                        unint64_t v16 = (unint64_t)v1259;
                        unint64_t v713 = v1152;
                        if (&v1235[v719] == v1259 || v1252 <= v994) {
                          goto LABEL_1075;
                        }
                      }
                      unsigned int v724 = *(unsigned __int8 *)(v720 + v719);
                      unsigned int v725 = v426[v719];
                      BOOL v57 = v724 >= v725;
                      BOOL v726 = v724 < v725;
                      if (v57) {
                        unint64_t v713 = v718 + v715;
                      }
                      else {
                        unint64_t v714 = v718 + v715;
                      }
                      if (v1138)
                      {
                        --v1138;
                        unsigned int v712 = *(_DWORD *)(v1088 + 8 * (v723 & v986) + 4 * v726);
                        if (v712 > v1010) {
                          continue;
                        }
                      }
                      goto LABEL_1075;
                    }
                  }
                  unint64_t v772 = v782;
                  v1150 = (unsigned int *)(v1107 + 8 * (v618 & v1096));
                  BOOL v57 = v708-- != 0;
                  if (!v57) {
                    goto LABEL_1053;
                  }
                }
                else
                {
                  unsigned int *v711 = v618;
                  if (v618 <= v1086)
                  {
                    v711 = (unsigned int *)&v1267;
                    goto LABEL_1053;
                  }
                  ++v786;
                  unint64_t v773 = v782;
                  v711 = v786;
                  BOOL v57 = v708-- != 0;
                  if (!v57) {
                    goto LABEL_1053;
                  }
                }
                unsigned int v618 = *v786;
                if (*v786 < v1219) {
                  goto LABEL_1053;
                }
                continue;
              }
              unsigned int v787 = v618;
              uint64_t v788 = 0;
              int v789 = &v1254[v776];
              while (1)
              {
                unint64_t v790 = &v789[v788];
                if ((unint64_t)&v789[v788] >= v1260) {
                  break;
                }
                uint64_t v791 = *(void *)(v775 + v776 + v777 + v788);
                v788 += 8;
                unint64_t v792 = *(void *)v790 ^ v791;
                if (v792)
                {
                  unint64_t v793 = __clz(__rbit64(v792));
                  unsigned int v618 = v787;
                  unint64_t v782 = v788 + (v793 >> 3) + v776;
                  if (v782 <= v634) {
                    goto LABEL_1172;
                  }
                  goto LABEL_1165;
                }
              }
              v783 = &v1254[v776 + v788];
              unsigned int v780 = (void *)(v775 + v776 + v777 + v788);
              unsigned int v618 = v787;
              if ((unint64_t)v783 >= v1237)
              {
LABEL_1156:
                if ((unint64_t)v783 >= v1236)
                {
                  if ((unint64_t)v783 >= v16) {
                    goto LABEL_1164;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v780 == *(unsigned __int16 *)v783)
                  {
                    v783 += 2;
                    unsigned int v780 = (void *)((char *)v780 + 2);
                  }
                  if ((unint64_t)v783 >= v16)
                  {
LABEL_1164:
                    unint64_t v782 = v783 - (char *)v426;
                    if (v783 - (char *)v426 <= v634) {
                      goto LABEL_1172;
                    }
                    goto LABEL_1165;
                  }
                }
                if (*(unsigned __int8 *)v780 == *v783) {
                  ++v783;
                }
                goto LABEL_1164;
              }
            }
            break;
          }
          if (*(_DWORD *)v780 == *(_DWORD *)v783)
          {
            v783 += 4;
            unsigned int v780 = (void *)((char *)v780 + 4);
          }
          goto LABEL_1156;
        }
        uint64_t v460 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          unsigned int v464 = 4095;
        }
        else {
          unsigned int v464 = *(_DWORD *)(v7 + 212);
        }
        uint64_t v465 = *(void *)(v7 + 8);
        unsigned int v466 = v1235 - v465;
        uint64_t v467 = v1235 + 3;
        int v964 = *(_DWORD *)(v7 + 204);
        uint64_t v966 = *(void *)(v7 + 48);
        uint64_t v970 = v465;
        uint64_t v960 = (-1640531535 * *(_DWORD *)v1235) >> -(char)*(_DWORD *)(v7 + 200);
        unsigned int v468 = *(_DWORD *)(v966 + 4 * v960);
        int v469 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        uint64_t v470 = *(unsigned int *)(v7 + 24);
        v1183 = (void *)(v465 + v470);
        int v983 = ~v469;
        unsigned int v471 = v1235 - v465 + v469 + 1;
        if (v466 < ~v469) {
          unsigned int v471 = 0;
        }
        unsigned int v1146 = v471;
        unsigned int v472 = 1 << *(_DWORD *)(v7 + 192);
        if (v466 - *(_DWORD *)(v7 + 28) > v472 && *(_DWORD *)(v7 + 32) == 0) {
          unsigned int v474 = v466 - v472;
        }
        else {
          unsigned int v474 = *(_DWORD *)(v7 + 28);
        }
        if (v474 <= 1) {
          int v475 = 1;
        }
        else {
          int v475 = v474;
        }
        unsigned int v1216 = v475;
        uint64_t v991 = *(void *)(v7 + 64);
        unint64_t v956 = (unsigned int *)(v991 + 8 * (v466 & ~v469));
        unsigned int v1161 = v466 + 9;
        uint64_t v476 = *(void *)(v7 + 184);
        uint64_t v477 = *(void *)(v476 + 8);
        v1172 = *(char **)v476;
        unsigned int v478 = *(_DWORD *)(v476 + 28);
        uint64_t v479 = v474 - (*(void *)v476 - v477);
        int v945 = *(_DWORD *)(v476 + 200);
        uint64_t v949 = v476;
        unsigned int v480 = ~(-1 << (*(_DWORD *)(v476 + 196) - 1));
        unsigned int v481 = *(void *)v476 - v477 - v478;
        uint64_t v941 = *(void *)v476 - v477;
        unsigned int v482 = *(void *)v476 - v477 + (-1 << (*(_DWORD *)(v476 + 196) - 1)) + 1;
        unsigned int v1071 = v480;
        if (v481 <= v480) {
          unsigned int v483 = v478;
        }
        else {
          unsigned int v483 = v482;
        }
        unsigned int v1082 = v483;
        int v1267 = 0;
        unint64_t v484 = (v1258 - 1);
        unsigned int v1103 = v478;
        unsigned int v485 = v466 - v478 - v479;
        uint64_t v486 = v1131;
        uint64_t v487 = v1131 << 63 >> 63;
        if (v1131) {
          unint64_t v488 = 4;
        }
        else {
          unint64_t v488 = 3;
        }
        unsigned int v489 = v466 - v470;
        uint64_t v1093 = v477;
        uint64_t v999 = v474 - (v1172 - v477);
        uint64_t v490 = v477 - v479;
        unsigned int v1119 = v466;
        unsigned int v1063 = v468;
        int v1054 = v470;
        unsigned int v1045 = v474;
        unsigned int v1036 = v464;
        uint64_t v1028 = v1131 << 63 >> 63;
        unint64_t v1020 = v488;
        unsigned int v1012 = v466 - v470;
        uint64_t v1007 = v490;
        while (2)
        {
          if (v486 == 3)
          {
            unsigned int v491 = *v1248 - 1;
            unsigned int v492 = v466 - v491;
            unsigned int v493 = *v1248 - 2;
            if (v493 >= v489) {
              goto LABEL_725;
            }
LABEL_734:
            if (v492 < v474 || ((*(_DWORD *)&v426[-v491] ^ *(_DWORD *)v426) & 0xFFFFFF) != 0) {
              goto LABEL_722;
            }
            unint64_t v502 = (void *)((char *)v467 - v491);
            if (v1260 > (unint64_t)v467)
            {
              uint64_t v503 = v467;
              unint64_t v504 = *v467 ^ *v502;
              if (v504)
              {
                unsigned int v499 = (__clz(__rbit64(v504)) >> 3) + 3;
                unint64_t v500 = v499;
                if (v484 >= v499) {
                  goto LABEL_722;
                }
              }
              else
              {
                do
                {
                  ++v502;
                  if ((unint64_t)++v503 >= v1260) {
                    goto LABEL_748;
                  }
                  unint64_t v505 = *v503 ^ *v502;
                }
                while (!v505);
                unsigned int v499 = v503 + (__clz(__rbit64(v505)) >> 3) - v467 + 3;
                unint64_t v500 = v499;
                if (v484 >= v499) {
                  goto LABEL_722;
                }
              }
              goto LABEL_756;
            }
            uint64_t v503 = v467;
LABEL_748:
            if ((unint64_t)v503 >= v1237)
            {
              if ((unint64_t)v503 >= v1236) {
                goto LABEL_752;
              }
            }
            else
            {
              if (*(_DWORD *)v502 == *(_DWORD *)v503)
              {
                uint64_t v503 = (void *)((char *)v503 + 4);
                unint64_t v502 = (void *)((char *)v502 + 4);
              }
              if ((unint64_t)v503 >= v1236)
              {
LABEL_752:
                if ((unint64_t)v503 < v16) {
                  goto LABEL_753;
                }
                goto LABEL_755;
              }
            }
            if (*(unsigned __int16 *)v502 == *(unsigned __int16 *)v503)
            {
              uint64_t v503 = (void *)((char *)v503 + 2);
              unint64_t v502 = (void *)((char *)v502 + 2);
            }
            if ((unint64_t)v503 < v16)
            {
LABEL_753:
              if (*(unsigned __int8 *)v502 == *(unsigned __int8 *)v503) {
                LODWORD(v503) = v503 + 1;
              }
            }
LABEL_755:
            unsigned int v499 = v503 - v467 + 3;
            unint64_t v500 = v499;
            if (v484 >= v499) {
              goto LABEL_722;
            }
LABEL_756:
            uint64_t v506 = &v1261[2 * v460];
            *uint64_t v506 = v486 + v487;
            v506[1] = v499;
            uint64_t v460 = (v460 + 1);
            if (v499 > v464) {
              goto LABEL_1273;
            }
            unint64_t v484 = v500;
            if (&v426[v500] == (unsigned __int8 *)v16) {
              goto LABEL_1273;
            }
            goto LABEL_722;
          }
          unsigned int v491 = v1248[v486];
          unsigned int v492 = v466 - v491;
          unsigned int v493 = v491 - 1;
          if (v491 - 1 < v489) {
            goto LABEL_734;
          }
LABEL_725:
          if (v493 < v485 && v470 + ~v492 >= 3)
          {
            uint64_t v495 = v490 + v492;
            if (((*(_DWORD *)v495 ^ *(_DWORD *)v426) & 0xFFFFFF) == 0)
            {
              uint64_t v496 = v467;
              unint64_t v1132 = v484;
              uint64_t v497 = v460;
              int v498 = ZSTD_count_2segments(v467, (char *)(v495 + 3), v16, v1172, v1183);
              uint64_t v490 = v1007;
              unsigned int v489 = v1012;
              unint64_t v488 = v1020;
              LODWORD(v487) = v1028;
              unsigned int v464 = v1036;
              unsigned int v474 = v1045;
              LODWORD(v470) = v1054;
              unsigned int v468 = v1063;
              unint64_t v484 = v1132;
              unsigned int v466 = v1119;
              uint64_t v460 = v497;
              v426 = v1235;
              unint64_t v16 = (unint64_t)v1259;
              unsigned int v499 = v498 + 3;
              uint64_t v467 = v496;
              unint64_t v500 = v499;
              if (v1132 < v499) {
                goto LABEL_756;
              }
            }
          }
LABEL_722:
          if (++v486 < v488) {
            continue;
          }
          break;
        }
        if (v484 > 2)
        {
          uint64_t v656 = v1224;
          uint64_t v660 = v970;
          goto LABEL_1077;
        }
        uint64_t v656 = v1224;
        uint64_t v657 = *(void *)(v1224 + 56);
        int v658 = *(_DWORD *)v426;
        int v659 = 32 - *(_DWORD *)(v1224 + 40);
        uint64_t v660 = v970;
        if (v940 < v466)
        {
          uint64_t v661 = v940;
          do
          {
            *(_DWORD *)(v657 + 4 * ((900185344 * *(_DWORD *)(v970 + v661)) >> v659)) = v661;
            ++v661;
          }
          while (v1212 - v970 != v661);
        }
        uint64_t v662 = *(unsigned int *)(v657 + 4 * ((900185344 * v658) >> v659));
        BOOL v663 = v662 >= v1216 && (v466 - v662) >> 18 == 0;
        uint64_t v18 = v12 + 7;
        if (!v663)
        {
          unsigned int v940 = v466;
          goto LABEL_1077;
        }
        unint64_t v818 = (_DWORD *)(v970 + v662);
        if (v1260 <= (unint64_t)v426)
        {
          unsigned int v821 = v426;
          if ((unint64_t)v426 >= v1237) {
            goto LABEL_1238;
          }
LABEL_1236:
          if (*v818 == *(_DWORD *)v821)
          {
            v821 += 4;
            ++v818;
          }
LABEL_1238:
          if ((unint64_t)v821 >= v1236)
          {
            if ((unint64_t)v821 >= v16) {
              goto LABEL_1246;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v818 == *(unsigned __int16 *)v821)
            {
              v821 += 2;
              unint64_t v818 = (_DWORD *)((char *)v818 + 2);
            }
            if ((unint64_t)v821 >= v16)
            {
LABEL_1246:
              unint64_t v820 = v821 - v426;
              unsigned int v940 = v466;
              if (v820 >= 3) {
                goto LABEL_1247;
              }
              goto LABEL_1077;
            }
          }
          if (*(unsigned __int8 *)v818 == *v821) {
            ++v821;
          }
          goto LABEL_1246;
        }
        unint64_t v819 = *(void *)v426 ^ *(void *)v818;
        if (v819)
        {
          unint64_t v820 = __clz(__rbit64(v819)) >> 3;
          unsigned int v940 = v466;
          if (v820 >= 3) {
            goto LABEL_1247;
          }
LABEL_1077:
          *(_DWORD *)(v966 + 4 * v960) = v466;
          int v728 = ~(-1 << v964);
          if (v468 < v1216)
          {
            unsigned int v729 = v1161;
            char v731 = v956 + 1;
            uint64_t v730 = v956;
LABEL_1079:
            unsigned int v1166 = v729;
            *char v731 = 0;
            *uint64_t v730 = 0;
            int v1221 = v460;
            if (v728)
            {
              unsigned int v732 = *(_DWORD *)(*(void *)(v949 + 48)
                               + 4 * ((-1640531535 * *(_DWORD *)v426) >> -(char)v945));
              if (v732 > v1103)
              {
                unint64_t v733 = 0;
                unint64_t v734 = 0;
                uint64_t v1049 = *(void *)(v949 + 64);
                uint64_t v1058 = v660 + v999;
                unsigned int v1040 = v1119 + 2;
                int v1126 = v728 - 1;
                while (1)
                {
                  unsigned int v1253 = v732;
                  unint64_t v1139 = v734;
                  unint64_t v1153 = v733;
                  if (v734 >= v733) {
                    unint64_t v735 = v733;
                  }
                  else {
                    unint64_t v735 = v734;
                  }
                  uint64_t v736 = v732;
                  uint64_t v737 = v1093 + v732;
                  unint64_t v738 = v484;
                  unint64_t v739 = ZSTD_count_2segments(&v426[v735], (char *)(v737 + v735), v16, v1172, v1183);
                  unint64_t v740 = v739 + v735;
                  if (v739 + v735 + v736 >= v941) {
                    uint64_t v741 = v1058 + v736;
                  }
                  else {
                    uint64_t v741 = v737;
                  }
                  if (v740 <= v738)
                  {
                    unint64_t v484 = v738;
                    unint64_t v16 = (unint64_t)v1259;
                    uint64_t v656 = v1224;
                    v426 = v1235;
                    unint64_t v734 = v1139;
                    unint64_t v733 = v1153;
                    unsigned int v744 = v1253;
                    if (v1253 <= v1082) {
                      break;
                    }
                  }
                  else
                  {
                    unsigned int v742 = v1166;
                    if (v740 > v1166 - (v1253 + v999)) {
                      unsigned int v742 = v1253 + v999 + v740;
                    }
                    unsigned int v1166 = v742;
                    v743 = &v1261[2 * v1221];
                    _DWORD *v743 = v1040 - (v1253 + v999);
                    v743[1] = v740;
                    ++v1221;
                    if (v740 > 0x1000)
                    {
                      LODWORD(v16) = v1259;
                      uint64_t v656 = v1224;
                      LODWORD(v426) = v1235;
                      break;
                    }
                    unsigned int v744 = v1253;
                    v426 = v1235;
                    unint64_t v484 = v739 + v735;
                    unint64_t v16 = (unint64_t)v1259;
                    uint64_t v656 = v1224;
                    unint64_t v734 = v1139;
                    unint64_t v733 = v1153;
                    if (&v1235[v740] == v1259 || v1253 <= v1082) {
                      break;
                    }
                  }
                  unsigned int v745 = *(unsigned __int8 *)(v741 + v740);
                  unsigned int v746 = v426[v740];
                  BOOL v57 = v745 >= v746;
                  BOOL v747 = v745 < v746;
                  if (v57) {
                    unint64_t v733 = v739 + v735;
                  }
                  else {
                    unint64_t v734 = v739 + v735;
                  }
                  if (v1126)
                  {
                    --v1126;
                    unsigned int v732 = *(_DWORD *)(v1049 + 8 * (v744 & v1071) + 4 * v747);
                    if (v732 > v1103) {
                      continue;
                    }
                  }
                  break;
                }
              }
            }
LABEL_1317:
            uint64_t v18 = v12 + 7;
            LODWORD(v460) = v1221;
            *(_DWORD *)(v656 + 36) = v1166 - 8;
            goto LABEL_1274;
          }
          unint64_t v794 = 0;
          unint64_t v795 = 0;
          unsigned int v1255 = v466 + 2;
          v1141 = (char *)v978 + v425;
          uint64_t v1059 = v660 + 8;
          unsigned int v729 = v1161;
          char v731 = v956 + 1;
          uint64_t v730 = v956;
          uint64_t v796 = v991;
          int v797 = v983;
          while (2)
          {
            if (v795 >= v794) {
              unint64_t v798 = v794;
            }
            else {
              unint64_t v798 = v795;
            }
            uint64_t v799 = v660 + v468;
            unint64_t v800 = &v426[v798];
            uint64_t v801 = (_DWORD *)(v799 + v798);
            if (v1260 <= (unint64_t)&v426[v798])
            {
              unsigned int v804 = (char *)&v426[v798];
              unsigned int v805 = v468;
              if ((unint64_t)v800 < v1237)
              {
LABEL_1196:
                if (*v801 == *(_DWORD *)v804)
                {
                  v804 += 4;
                  ++v801;
                }
              }
            }
            else
            {
              unint64_t v802 = *(void *)v800 ^ *(void *)v801;
              if (v802)
              {
                unint64_t v803 = (__clz(__rbit64(v802)) >> 3) + v798;
                if (v803 <= v484) {
                  goto LABEL_1214;
                }
                goto LABEL_1207;
              }
              unsigned int v805 = v468;
              unint64_t v809 = v731;
              uint64_t v810 = v730;
              unint64_t v811 = v484;
              uint64_t v812 = 0;
              uint64_t v813 = &v1141[v798];
              while (1)
              {
                unsigned int v814 = &v813[v812];
                if ((unint64_t)&v813[v812] >= v1260) {
                  break;
                }
                uint64_t v815 = *(void *)(v1059 + v798 + v468 + v812);
                v812 += 8;
                unint64_t v816 = *(void *)v814 ^ v815;
                if (v816)
                {
                  unint64_t v817 = __clz(__rbit64(v816));
                  unint64_t v484 = v811;
                  uint64_t v730 = v810;
                  char v731 = v809;
                  uint64_t v796 = v991;
                  int v797 = v983;
                  unint64_t v803 = v812 + (v817 >> 3) + v798;
                  if (v803 > v484) {
                    goto LABEL_1207;
                  }
                  goto LABEL_1214;
                }
              }
              unsigned int v804 = &v1141[v798 + v812];
              uint64_t v801 = (_DWORD *)(v1059 + v798 + v468 + v812);
              unint64_t v484 = v811;
              uint64_t v730 = v810;
              char v731 = v809;
              uint64_t v796 = v991;
              int v797 = v983;
              if ((unint64_t)v804 < v1237) {
                goto LABEL_1196;
              }
            }
            if ((unint64_t)v804 >= v1236)
            {
              if ((unint64_t)v804 >= v16) {
                goto LABEL_1206;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v801 == *(unsigned __int16 *)v804)
              {
                v804 += 2;
                uint64_t v801 = (_DWORD *)((char *)v801 + 2);
              }
              if ((unint64_t)v804 >= v16)
              {
LABEL_1206:
                unsigned int v468 = v805;
                unint64_t v803 = v804 - (char *)v426;
                if (v804 - (char *)v426 <= v484)
                {
LABEL_1214:
                  unint64_t v808 = (unsigned int *)(v796 + 8 * (v468 & v797));
                  if (*(unsigned __int8 *)(v799 + v803) >= v426[v803])
                  {
                    *char v731 = v468;
                    if (v468 <= v1146)
                    {
                      char v731 = (unsigned int *)&v1267;
                      goto LABEL_1079;
                    }
                    unint64_t v794 = v803;
                    char v731 = (unsigned int *)(v796 + 8 * (v468 & v797));
                    BOOL v57 = v728-- != 0;
                    if (!v57) {
                      goto LABEL_1079;
                    }
                  }
                  else
                  {
                    *uint64_t v730 = v468;
                    if (v468 <= v1146)
                    {
                      uint64_t v730 = (unsigned int *)&v1267;
                      goto LABEL_1079;
                    }
                    ++v808;
                    unint64_t v795 = v803;
                    uint64_t v730 = v808;
                    BOOL v57 = v728-- != 0;
                    if (!v57) {
                      goto LABEL_1079;
                    }
                  }
                  unsigned int v468 = *v808;
                  if (*v808 < v1216) {
                    goto LABEL_1079;
                  }
                  continue;
                }
LABEL_1207:
                if (v803 > v729 - v468) {
                  unsigned int v729 = v468 + v803;
                }
                unint64_t v806 = &v1261[2 * v460];
                *unint64_t v806 = v1255 - v468;
                v806[1] = v803;
                LODWORD(v460) = v460 + 1;
                if (v803 > 0x1000 || &v426[v803] == (unsigned __int8 *)v16)
                {
                  unsigned int v1166 = v729;
                  int v1221 = v460;
                  *char v731 = 0;
                  *uint64_t v730 = 0;
                  goto LABEL_1317;
                }
                unint64_t v484 = v803;
                goto LABEL_1214;
              }
            }
            break;
          }
          if (*(unsigned __int8 *)v801 == *v804) {
            ++v804;
          }
          goto LABEL_1206;
        }
        uint64_t v823 = 0;
        unsigned int v824 = (char *)v978 + v425;
        while (2)
        {
          unsigned int v825 = &v824[v823];
          if ((unint64_t)&v824[v823] >= v1260)
          {
            unsigned int v821 = (unsigned __int8 *)v978 + v425 + v823;
            unint64_t v818 = (_DWORD *)(v970 + v662 + v823 + 8);
            if ((unint64_t)v821 >= v1237) {
              goto LABEL_1238;
            }
            goto LABEL_1236;
          }
          uint64_t v826 = *(void *)(v970 + v662 + 8 + v823);
          v823 += 8;
          unint64_t v827 = *(void *)v825 ^ v826;
          if (!v827) {
            continue;
          }
          break;
        }
        unint64_t v820 = v823 + (__clz(__rbit64(v827)) >> 3);
        unsigned int v940 = v466;
        if (v820 < 3) {
          goto LABEL_1077;
        }
LABEL_1247:
        _DWORD *v1261 = v466 - v662 + 2;
        v1261[1] = v820;
        if (v820 <= v464 && &v426[v820] != (unsigned __int8 *)v16)
        {
          LODWORD(v460) = 1;
          unsigned int v940 = v466;
          unint64_t v484 = v820;
          goto LABEL_1077;
        }
        LODWORD(v460) = 1;
        unsigned int v940 = v466;
        *(_DWORD *)(v1224 + 36) = v466 + 1;
LABEL_1274:
        unsigned int v1263 = v460;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1264, (uint64_t)v1261, &v1263, v426 - v1213, v16 - v426);
        uint64_t v828 = v1263;
        if (!v1263)
        {
          unint64_t v16 = (unint64_t)v1259;
          uint64_t v7 = v1224;
LABEL_1314:
          unint64_t v418 = v1257;
          int v419 = v1212;
          unsigned int v420 = v425 + 1;
          unint64_t v421 = v1223;
          goto LABEL_653;
        }
        uint64_t v829 = v1263 - 1;
        unsigned int v379 = v1261[2 * v829 + 1];
        if (v379 <= v1189 && v379 + v425 <= 0xFFF)
        {
          uint64_t v830 = 0;
          unsigned int v831 = v1194 + v1203;
          unint64_t v16 = (unint64_t)v1259;
          uint64_t v7 = v1224;
          while (1)
          {
            unint64_t v832 = &v1261[2 * v830];
            unsigned int v833 = v1258;
            if (v830) {
              unsigned int v833 = *(v832 - 1) + 1;
            }
            unsigned int v834 = v832[1];
            if (v834 >= v833) {
              break;
            }
LABEL_1278:
            if (++v830 == v828) {
              goto LABEL_1314;
            }
          }
          signed int v835 = *v832;
          uint64_t v836 = __clz(v835 + 1) ^ 0x1F;
          if (*(_DWORD *)(v1224 + 160) == 1)
          {
            int v837 = 0;
            int v838 = (v836 << 8) + 4096;
            int v839 = v425 + v834;
            unsigned int v840 = v425 + v834;
            while (1)
            {
              unint64_t v842 = v834 + v425;
              signed int v843 = v831 + v838 + ((__clz(v834 - 2) << 8) ^ 0x1F00);
              if (v842 <= v417)
              {
                if (v843 >= (int)v12[7 * v842]) {
                  goto LABEL_1278;
                }
                goto LABEL_1285;
              }
              uint64_t v844 = v417;
              unint64_t v845 = (v839 - v837) - (unint64_t)v417;
              if (v845 >= 2)
              {
                unint64_t v417 = (v845 & 0xFFFFFFFFFFFFFFFELL) + v417;
                unint64_t v846 = (v840 - v844) & 0xFFFFFFFFFFFFFFFELL;
                uint64_t v847 = &v1262[7 * v844];
                do
                {
                  *(v847 - 7) = 0x40000000;
                  *uint64_t v847 = 0x40000000;
                  v847 += 14;
                  v846 -= 2;
                }
                while (v846);
                if (v845 == (v845 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_1285;
                }
              }
              else
              {
                unint64_t v417 = v417;
              }
              uint64_t v848 = &v18[7 * v417];
              do
              {
                ++v417;
                *uint64_t v848 = 0x40000000;
                v848 += 7;
              }
              while (v417 < v842);
LABEL_1285:
              unsigned int v841 = (signed int *)&v12[7 * v842];
              v841[2] = v834;
              v841[3] = v21;
              *unsigned int v841 = v843;
              v841[1] = v835;
              --v834;
              ++v837;
              --v840;
              if (v834 < v833) {
                goto LABEL_1278;
              }
            }
          }
          int v849 = 0;
          if (v836 <= 0x13) {
            int v850 = 53;
          }
          else {
            int v850 = (v836 << 9) - 9675;
          }
          int v851 = *(_DWORD *)(v1224 + 152);
          uint64_t v852 = *(void *)(v1224 + 96);
          uint64_t v853 = *(void *)(v1224 + 104);
          int v854 = v850 + *(_DWORD *)(v1224 + 156);
          int v855 = v425 + v834;
          unsigned int v856 = v425 + v834;
          while (2)
          {
            unsigned int v858 = v834 - 3;
            if (v834 - 3 < 0x80) {
              unsigned int v859 = ZSTD_MLcode_ML_Code[v858];
            }
            else {
              unsigned int v859 = 67 - __clz(v858);
            }
            unint64_t v860 = v834 + v425;
            signed int v861 = v831
                 + v854
                 + ((__clz(*(_DWORD *)(v853 + 4 * v836) + 1) << 8) ^ 0xFFFFE0FF)
                 + v851
                 + ((ML_bits[v859] + v836) << 8)
                 + ((__clz(*(_DWORD *)(v852 + 4 * v859) + 1) << 8) ^ 0xFFFFE0FF);
            if (v860 <= v417)
            {
              if (v861 >= (int)v12[7 * v860]) {
                goto LABEL_1278;
              }
            }
            else
            {
              uint64_t v862 = v417;
              unint64_t v863 = (v855 - v849) - (unint64_t)v417;
              if (v863 < 2)
              {
                unint64_t v417 = v417;
                goto LABEL_1310;
              }
              unint64_t v417 = (v863 & 0xFFFFFFFFFFFFFFFELL) + v417;
              unint64_t v864 = (v856 - v862) & 0xFFFFFFFFFFFFFFFELL;
              int v865 = &v1262[7 * v862];
              do
              {
                *(v865 - 7) = 0x40000000;
                *int v865 = 0x40000000;
                v865 += 14;
                v864 -= 2;
              }
              while (v864);
              uint64_t v18 = v12 + 7;
              if (v863 != (v863 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_1310:
                int v866 = &v18[7 * v417];
                do
                {
                  ++v417;
                  *int v866 = 0x40000000;
                  v866 += 7;
                }
                while (v417 < v860);
              }
            }
            v857 = (signed int *)&v12[7 * v860];
            v857[2] = v834;
            v857[3] = v21;
            signed int *v857 = v861;
            v857[1] = v835;
            --v834;
            ++v849;
            --v856;
            if (v834 < v833) {
              goto LABEL_1278;
            }
            continue;
          }
        }
        unint64_t v16 = (unint64_t)v1259;
        uint64_t v7 = v1224;
        if (*v1112) {
          unsigned int v928 = 0;
        }
        else {
          unsigned int v928 = v12[7 * v425 + 3];
        }
        unint64_t v380 = (unint64_t)(v1259 - 32);
        unsigned int v386 = v1261[2 * v829];
        unsigned int v929 = v425 - v928;
        if (v929 <= 0x1000) {
          unsigned int v385 = v929;
        }
        else {
          unsigned int v385 = 0;
        }
        uint64_t v19 = v1238;
        if (!v379)
        {
LABEL_1405:
          v930 = &v12[7 * v385];
          uint64_t v931 = *((void *)v930 + 2);
          a3[2] = v930[6];
          *(void *)a3 = v931;
          goto LABEL_1339;
        }
LABEL_1325:
        int v868 = &v12[7 * v385 + 4];
        if (v386 < 3)
        {
          if (v21) {
            unsigned int v873 = v386;
          }
          else {
            unsigned int v873 = v386 + 1;
          }
          if (v873)
          {
            if (v873 == 3)
            {
              unint64_t v870 = *v868;
              unsigned int v872 = v870 - 1;
            }
            else
            {
              unsigned int v872 = v868[v873];
              unint64_t v870 = *v868;
            }
            BOOL v884 = v873 > 1;
            uint64_t v875 = 2;
            if (v884) {
              uint64_t v875 = 1;
            }
            int v869 = &v868[v875];
          }
          else
          {
            unint64_t v874 = *(void *)v868;
            int v869 = &v12[7 * v385 + 6];
            unsigned int v872 = v874;
            unint64_t v870 = HIDWORD(v874);
          }
        }
        else
        {
          unsigned int v871 = *v868;
          int v869 = &v12[7 * v385 + 5];
          unint64_t v870 = v871;
          unsigned int v872 = v386 - 2;
        }
        unsigned int v876 = *v869;
        *(void *)a3 = v872 | (v870 << 32);
        a3[2] = v876;
LABEL_1339:
        unsigned int v877 = v385 + 1;
        unsigned int v878 = &v12[7 * v385 + 7];
        *unsigned int v878 = v1113;
        v878[1] = v386;
        v878[2] = v379;
        v878[3] = v21;
        *((void *)v878 + 2) = v1268;
        v878[6] = v1269;
        unsigned int v879 = v385;
        if (!v385)
        {
          unsigned int v885 = 1;
          uint64_t v886 = v1024;
          goto LABEL_1349;
        }
        do
        {
          unint64_t v880 = &v12[7 * v879];
          unsigned int v881 = v880[3] + v880[2];
          v882 = &v12[7 * v385];
          long long v883 = *(_OWORD *)v880;
          *(_OWORD *)(v882 + 3) = *(_OWORD *)(v880 + 3);
          *(_OWORD *)v882 = v883;
          --v385;
          BOOL v57 = v879 >= v881;
          v879 -= v881;
          BOOL v884 = v879 != 0 && v57;
          if (!v57) {
            unsigned int v879 = 0;
          }
        }
        while (v884);
        unsigned int v885 = v385 + 1;
        uint64_t v886 = v1024;
        if (v885 <= v877)
        {
          while (1)
          {
LABEL_1349:
            while (1)
            {
              unsigned int v887 = v885;
              unsigned int v889 = v12[7 * v885 + 2];
              uint64_t v888 = v12[7 * v885 + 3];
              if (v889) {
                break;
              }
              uint64_t v15 = &v19[v888];
              unsigned int v885 = v887 + 1;
              if (v887 + 1 > v877) {
                goto LABEL_1345;
              }
            }
            unsigned int v890 = v12[7 * v887 + 1];
            if (*(_DWORD *)(v7 + 176) != 2)
            {
              if (v888)
              {
                unint64_t v891 = *v1225;
                v892 = v19;
                uint64_t v893 = v888;
                do
                {
                  int v894 = *v892++;
                  *(_DWORD *)&v891[4 * v894] += 2;
                  --v893;
                }
                while (v893);
              }
              *(_DWORD *)(v7 + 128) += 2 * v888;
            }
            unsigned int v895 = v888 < 0x40 ? ZSTD_LLcode_LL_Code[v888] : 50 - __clz(v888);
            ++*(_DWORD *)(*(void *)(v7 + 88) + 4 * v895);
            ++*(_DWORD *)(v7 + 132);
            unsigned int v896 = v890 + 1;
            unsigned int v897 = __clz(v890 + 1);
            ++*(_DWORD *)(*(void *)(v7 + 104) + 4 * (v897 ^ 0x1F));
            ++*(_DWORD *)(v7 + 140);
            unsigned int v898 = v889 - 3;
            unsigned int v899 = v889 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v898] : 67 - __clz(v898);
            ++*(_DWORD *)(*(void *)(v7 + 96) + 4 * v899);
            ++*(_DWORD *)(v7 + 136);
            unint64_t v900 = &v19[v888];
            unsigned int v901 = *(char **)(v886 + 24);
            if ((unint64_t)&v19[v888] > v380) {
              break;
            }
            *(_OWORD *)unsigned int v901 = *(_OWORD *)v19;
            uint64_t v904 = *(void *)(v886 + 24);
            if (v888 > 0x10)
            {
              unsigned int v905 = (_OWORD *)(v904 + 16);
              unint64_t v906 = v904 + v888;
              int v907 = (long long *)(v19 + 16);
              do
              {
                long long v908 = *v907++;
                *v905++ = v908;
              }
              while ((unint64_t)v905 < v906);
LABEL_1394:
              *(void *)(v886 + 24) += v888;
              uint64_t v915 = *(void *)(v886 + 8);
              if (v888 >= 0x10000)
              {
                unint64_t v926 = (unint64_t)(v915 - *(void *)v886) >> 3;
                *(_DWORD *)(v886 + 72) = 1;
                *(_DWORD *)(v886 + 76) = v926;
              }
              goto LABEL_1396;
            }
            *(void *)(v886 + 24) = v904 + v888;
            uint64_t v915 = *(void *)(v886 + 8);
LABEL_1396:
            *(_WORD *)(v915 + 4) = v888;
            *(_DWORD *)uint64_t v915 = v896;
            if (v898 >= 0x10000)
            {
              unint64_t v927 = (unint64_t)(v915 - *(void *)v886) >> 3;
              *(_DWORD *)(v886 + 72) = 2;
              *(_DWORD *)(v886 + 76) = v927;
            }
            *(_WORD *)(v915 + 6) = v898;
            *(void *)(v886 + 8) = v915 + 8;
            v19 += v889 + v888;
            uint64_t v15 = v19;
            unsigned int v885 = v887 + 1;
            if (v887 + 1 > v877) {
              goto LABEL_1345;
            }
          }
          if ((unint64_t)v19 <= v380)
          {
            v903 = &v901[v380 - (void)v19];
            v909 = v19;
            v910 = *(char **)(v886 + 24);
            do
            {
              long long v911 = *(_OWORD *)v909;
              v909 += 16;
              *(_OWORD *)v910 = v911;
              v910 += 16;
            }
            while (v910 < v903);
            v902 = (unsigned __int8 *)v380;
            if (v380 >= (unint64_t)v900) {
              goto LABEL_1394;
            }
          }
          else
          {
            v902 = v19;
            v903 = *(char **)(v886 + 24);
            if (v19 >= v900) {
              goto LABEL_1394;
            }
          }
          if ((unint64_t)v19 <= v380) {
            int v912 = (unsigned __int8 *)v380;
          }
          else {
            int v912 = v19;
          }
          unint64_t v913 = &v19[v888] - v912;
          if (v913 < 8)
          {
            uint64_t v914 = v902;
            goto LABEL_1393;
          }
          if ((unint64_t)(v901 - (char *)v19) < 0x20)
          {
            uint64_t v914 = v902;
            goto LABEL_1393;
          }
          if (v913 < 0x20)
          {
            unint64_t v916 = 0;
            goto LABEL_1388;
          }
          unint64_t v916 = v913 & 0xFFFFFFFFFFFFFFE0;
          v917 = (long long *)(v902 + 16);
          v918 = &v901[v912 - v19 + 16];
          unint64_t v919 = v913 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v920 = *v917;
            *((_OWORD *)v918 - 1) = *(v917 - 1);
            *(_OWORD *)v918 = v920;
            v917 += 2;
            v918 += 32;
            v919 -= 32;
          }
          while (v919);
          if (v913 == v916) {
            goto LABEL_1394;
          }
          if ((v913 & 0x18) != 0)
          {
LABEL_1388:
            v903 += v913 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v914 = &v902[v913 & 0xFFFFFFFFFFFFFFF8];
            unsigned int v921 = &v902[v916];
            unsigned int v922 = &v901[&v912[v916] - v19];
            unint64_t v923 = v916 - (v913 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v924 = *(void *)v921;
              v921 += 8;
              *(void *)unsigned int v922 = v924;
              v922 += 8;
              v923 += 8;
            }
            while (v923);
            if (v913 == (v913 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_1394;
            }
          }
          else
          {
            uint64_t v914 = &v902[v916];
            v903 += v916;
          }
          do
          {
LABEL_1393:
            char v925 = *v914++;
            *v903++ = v925;
          }
          while (v914 < v900);
          goto LABEL_1394;
        }
        uint64_t v15 = v1257;
LABEL_1345:
        if (*(_DWORD *)(v7 + 176) != 2) {
          *(_DWORD *)(v7 + 144) = (__clz(*(_DWORD *)(v7 + 128) + 1) << 8) ^ 0x1F00;
        }
        unsigned int v20 = __clz(*(_DWORD *)(v7 + 140) + 1);
        *(int8x8_t *)(v7 + 148) = veor_s8((int8x8_t)vshl_n_s32(vclz_s32(vadd_s32(*(int32x2_t *)(v7 + 132), (int32x2_t)0x100000001)), 8uLL), (int8x8_t)0x1F0000001F00);
        *(_DWORD *)(v7 + 156) = (v20 << 8) ^ 0x1F00;
        if ((unint64_t)v15 >= v1223)
        {
LABEL_1423:
          v1213 = v19;
          return v16 - (void)v1213;
        }
      }
      else
      {
        uint64_t v15 = v374 + 1;
        unint64_t v16 = (unint64_t)v1259;
        if ((unint64_t)(v374 + 1) >= v1223) {
          goto LABEL_1423;
        }
      }
    }
    LODWORD(v24) = 0;
    if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
      unsigned int v76 = 4095;
    }
    else {
      unsigned int v76 = *(_DWORD *)(v7 + 212);
    }
    uint64_t v77 = *(void *)(v7 + 8);
    uint64_t v78 = (v1257 - v77);
    uint64_t v79 = (char *)(v1257 + 12);
    int v1042 = *(_DWORD *)(v7 + 204);
    uint64_t v1051 = *(void *)(v7 + 48);
    unint64_t v1033 = (0xCF1BBCDCBF9B0000 * *(void *)v1257) >> -(char)*(_DWORD *)(v7 + 200);
    unsigned int v80 = *(_DWORD *)(v1051 + 4 * v1033);
    int v81 = -1 << (*(_DWORD *)(v7 + 196) - 1);
    int v988 = ~v81;
    unsigned int v82 = v78 + v81 + 1;
    if (v78 < ~v81) {
      unsigned int v82 = 0;
    }
    unsigned int v980 = v82;
    uint64_t v83 = *(unsigned int *)(v7 + 24);
    unsigned int v84 = 1 << *(_DWORD *)(v7 + 192);
    if ((int)v78 - *(_DWORD *)(v7 + 28) > v84 && *(_DWORD *)(v7 + 32) == 0) {
      unsigned int v86 = v78 - v84;
    }
    else {
      unsigned int v86 = *(_DWORD *)(v7 + 28);
    }
    uint64_t v15 = v1257;
    if (v86 <= 1) {
      int v87 = 1;
    }
    else {
      int v87 = v86;
    }
    unsigned int v1196 = v87;
    uint64_t v88 = *(void *)(v7 + 184);
    uint64_t v89 = *(void *)(v88 + 8);
    v1209 = *(char **)v88;
    unsigned int v90 = *(_DWORD *)(v88 + 28);
    uint64_t v91 = v86 - (*(void *)v88 - v89);
    uint64_t v1004 = v88;
    int v996 = *(_DWORD *)(v88 + 200);
    unsigned int v92 = ~(-1 << (*(_DWORD *)(v88 + 196) - 1));
    unsigned int v93 = *(void *)v88 - v89 - v90;
    uint64_t v94 = *(void *)(v7 + 64);
    unsigned int v975 = v1209 - v89;
    unsigned int v1068 = v92;
    if (v93 <= v92) {
      unsigned int v95 = v90;
    }
    else {
      unsigned int v95 = v1209 - v89 - v92;
    }
    unsigned int v1079 = v95;
    unsigned int v96 = v78 - v83;
    uint64_t v1090 = v89;
    uint64_t v97 = v89 - v91;
    unsigned int v1100 = v90;
    uint64_t v1060 = v86 - (v1209 - v89);
    unsigned int v98 = v78 - v90 - v91;
    uint64_t v99 = v21 == 0;
    uint64_t v1025 = v77;
    v1205 = (void *)(v77 + v83);
    uint64_t v1191 = v94;
    v1017 = (unsigned int *)(v94 + 8 * (v78 & ~v81));
    int v1267 = 0;
    int v1215 = v78 + 9;
    if (v21) {
      unint64_t v100 = 3;
    }
    else {
      unint64_t v100 = 4;
    }
    uint64_t v101 = v1257 + 4;
    if (v21) {
      int v102 = 0;
    }
    else {
      int v102 = -1;
    }
    unint64_t v103 = (v1258 - 1);
    unsigned int v1177 = v76;
    int v1155 = v83;
    unsigned int v1143 = v80;
    unsigned int v1128 = v86;
    unint64_t v1115 = v100;
    int v1108 = v102;
    while (1)
    {
      if (v99 == 3)
      {
        unsigned int v104 = *a3 - 1;
        unsigned int v105 = v78 - v104;
        unsigned int v106 = *a3 - 2;
        if (v106 >= v96) {
          goto LABEL_118;
        }
      }
      else
      {
        unsigned int v104 = a3[v99];
        unsigned int v105 = v78 - v104;
        unsigned int v106 = v104 - 1;
        if (v104 - 1 >= v96)
        {
LABEL_118:
          if (v106 < v98 && v83 + ~v105 >= 3)
          {
            uint64_t v108 = v97 + v105;
            if (*(_DWORD *)v15 == *(_DWORD *)v108)
            {
              unint64_t v1227 = v103;
              int v1240 = v24;
              uint64_t v109 = v78;
              uint64_t v110 = v97;
              unint64_t v111 = v101;
              int v112 = ZSTD_count_2segments(v101, (char *)(v108 + 4), v16, v1209, v1205);
              uint64_t v101 = v111;
              unint64_t v100 = v1115;
              uint64_t v97 = v110;
              int v102 = v1108;
              unsigned int v86 = v1128;
              LODWORD(v83) = v1155;
              uint64_t v79 = (char *)(v1257 + 12);
              unsigned int v80 = v1143;
              uint64_t v78 = v109;
              LODWORD(v24) = v1240;
              unint64_t v103 = v1227;
              uint64_t v15 = v1257;
              unint64_t v16 = (unint64_t)v1259;
              unsigned int v113 = v112 + 4;
              unsigned int v76 = v1177;
              unint64_t v114 = v113;
              if (v1227 < v113) {
                goto LABEL_132;
              }
            }
          }
          goto LABEL_115;
        }
      }
      if (v105 < v86 || *(_DWORD *)v15 != *(_DWORD *)&v15[-v104]) {
        goto LABEL_115;
      }
      uint64_t v117 = -(uint64_t)v104;
      unint64_t v118 = (char *)v101 - v104;
      if (v1260 <= (unint64_t)v101) {
        break;
      }
      unint64_t v119 = *v101 ^ *(void *)v118;
      if (v119)
      {
        unsigned int v113 = (__clz(__rbit64(v119)) >> 3) + 4;
        unint64_t v114 = v113;
        if (v103 < v113) {
          goto LABEL_132;
        }
        goto LABEL_115;
      }
      uint64_t v121 = 0;
      do
      {
        uint64_t v120 = &v79[v121];
        if ((unint64_t)&v79[v121] >= v1260)
        {
          unint64_t v118 = &v120[v117];
          if ((unint64_t)v120 >= v1237) {
            goto LABEL_142;
          }
          goto LABEL_140;
        }
        uint64_t v122 = *(void *)&v79[v117 + v121];
        v121 += 8;
        unint64_t v123 = *(void *)v120 ^ v122;
      }
      while (!v123);
      unsigned int v113 = v121 + (__clz(__rbit64(v123)) >> 3) + 4;
      unint64_t v114 = v113;
      if (v103 < v113)
      {
LABEL_132:
        uint64_t v116 = &v1261[2 * v24];
        *uint64_t v116 = v99 + v102;
        v116[1] = v113;
        LODWORD(v24) = v24 + 1;
        if (v113 > v76) {
          goto LABEL_601;
        }
        unint64_t v103 = v114;
        if (&v15[v114] == (unsigned __int8 *)v16) {
          goto LABEL_601;
        }
      }
LABEL_115:
      if (++v99 >= v100)
      {
        *(_DWORD *)(v1051 + 4 * v1033) = v78;
        int v124 = ~(-1 << v1042);
        if (v80 < v1196)
        {
          uint64_t v125 = v1025;
          unint64_t v127 = v1017 + 1;
          uint64_t v126 = v1017;
LABEL_161:
          *unint64_t v127 = 0;
          unsigned int *v126 = 0;
          int v1241 = v24;
          if (!v124) {
            goto LABEL_599;
          }
          uint64_t v15 = v1257;
          unsigned int v128 = *(_DWORD *)(*(void *)(v1004 + 48) + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v1257) >> -(char)v996));
          if (v128 <= v1100) {
            goto LABEL_600;
          }
          unint64_t v129 = 0;
          unint64_t v130 = 0;
          uint64_t v1168 = *(void *)(v1004 + 64);
          uint64_t v1178 = v125 + v1060;
          int v1156 = v78 + 2;
          int v1197 = v124 - 1;
          while (1)
          {
            unint64_t v1228 = v103;
            if (v130 >= v129) {
              unint64_t v131 = v129;
            }
            else {
              unint64_t v131 = v130;
            }
            unint64_t v132 = ZSTD_count_2segments(&v15[v131], (char *)(v1090 + v128 + v131), v16, v1209, v1205) + v131;
            unint64_t v103 = v1228;
            if (v132 + v128 >= v975) {
              uint64_t v133 = v1178 + v128;
            }
            else {
              uint64_t v133 = v1090 + v128;
            }
            if (v132 <= v1228)
            {
              unint64_t v16 = (unint64_t)v1259;
              uint64_t v15 = v1257;
              if (v128 <= v1079) {
                goto LABEL_600;
              }
            }
            else
            {
              int v134 = v1215;
              if (v132 > v1215 - (v128 + v1060)) {
                int v134 = v128 + v1060 + v132;
              }
              int v1215 = v134;
              uint64_t v135 = &v1261[2 * v1241];
              *uint64_t v135 = v1156 - (v128 + v1060);
              v135[1] = v132;
              ++v1241;
              if (v132 > 0x1000)
              {
LABEL_598:
                LODWORD(v16) = v1259;
                goto LABEL_599;
              }
              uint64_t v15 = v1257;
              unint64_t v103 = v132;
              unint64_t v16 = (unint64_t)v1259;
              if (&v1257[v132] == v1259 || v128 <= v1079) {
                goto LABEL_600;
              }
            }
            unsigned int v136 = *(unsigned __int8 *)(v133 + v132);
            unsigned int v137 = v15[v132];
            BOOL v57 = v136 >= v137;
            BOOL v138 = v136 < v137;
            if (v57) {
              unint64_t v129 = v132;
            }
            else {
              unint64_t v130 = v132;
            }
            if (v1197)
            {
              --v1197;
              unsigned int v128 = *(_DWORD *)(v1168 + 8 * (v128 & v1068) + 4 * v138);
              if (v128 > v1100) {
                continue;
              }
            }
            goto LABEL_600;
          }
        }
        unint64_t v241 = 0;
        unint64_t v242 = 0;
        v1244 = v1257 + 8;
        uint64_t v125 = v1025;
        uint64_t v243 = v1025 + 8;
        unint64_t v127 = v1017 + 1;
        uint64_t v126 = v1017;
        while (2)
        {
          if (v242 >= v241) {
            unint64_t v244 = v241;
          }
          else {
            unint64_t v244 = v242;
          }
          uint64_t v245 = v80;
          uint64_t v246 = v1025 + v80;
          uint64_t v247 = &v1257[v244];
          unint64_t v248 = (void *)(v246 + v244);
          if (v1260 <= (unint64_t)&v1257[v244])
          {
            long long v251 = &v1257[v244];
            if ((unint64_t)v247 >= v1237) {
              goto LABEL_341;
            }
          }
          else
          {
            unint64_t v249 = *(void *)v247 ^ *v248;
            if (v249)
            {
              unint64_t v250 = (__clz(__rbit64(v249)) >> 3) + v244;
              if (v250 <= v103) {
                goto LABEL_357;
              }
LABEL_350:
              int v252 = v1215;
              if (v250 > v1215 - v80) {
                int v252 = v80 + v250;
              }
              int v1215 = v252;
              unint64_t v253 = &v1261[2 * v24];
              *unint64_t v253 = v78 + 2 - v80;
              v253[1] = v250;
              LODWORD(v24) = v24 + 1;
              if (v250 > 0x1000 || &v1257[v250] == (unsigned __int8 *)v16) {
                goto LABEL_573;
              }
              unint64_t v103 = v250;
LABEL_357:
              uint64_t v255 = (unsigned int *)(v1191 + 8 * (v80 & v988));
              if (*(unsigned __int8 *)(v246 + v250) >= v1257[v250])
              {
                *unint64_t v127 = v80;
                if (v80 <= v980)
                {
                  unint64_t v127 = (unsigned int *)&v1267;
                  goto LABEL_161;
                }
                unint64_t v241 = v250;
                unint64_t v127 = (unsigned int *)(v1191 + 8 * (v80 & v988));
                BOOL v57 = v124-- != 0;
                if (!v57) {
                  goto LABEL_161;
                }
              }
              else
              {
                unsigned int *v126 = v80;
                if (v80 <= v980)
                {
                  uint64_t v126 = (unsigned int *)&v1267;
                  goto LABEL_161;
                }
                ++v255;
                unint64_t v242 = v250;
                uint64_t v126 = v255;
                BOOL v57 = v124-- != 0;
                if (!v57) {
                  goto LABEL_161;
                }
              }
              unsigned int v80 = *v255;
              if (*v255 < v1196) {
                goto LABEL_161;
              }
              continue;
            }
            unsigned int v256 = v80;
            uint64_t v257 = 0;
            unint64_t v258 = (char *)v1244 + v244;
            while (1)
            {
              unint64_t v259 = &v258[v257];
              if ((unint64_t)&v258[v257] >= v1260) {
                break;
              }
              uint64_t v260 = *(void *)(v243 + v244 + v245 + v257);
              v257 += 8;
              unint64_t v261 = *(void *)v259 ^ v260;
              if (v261)
              {
                unint64_t v262 = __clz(__rbit64(v261));
                unsigned int v80 = v256;
                unint64_t v250 = v257 + (v262 >> 3) + v244;
                if (v250 <= v103) {
                  goto LABEL_357;
                }
                goto LABEL_350;
              }
            }
            long long v251 = (unsigned __int8 *)v1244 + v244 + v257;
            unint64_t v248 = (void *)(v243 + v244 + v245 + v257);
            unsigned int v80 = v256;
            if ((unint64_t)v251 >= v1237)
            {
LABEL_341:
              if ((unint64_t)v251 >= v1236)
              {
                if ((unint64_t)v251 >= v16) {
                  goto LABEL_349;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v248 == *(unsigned __int16 *)v251)
                {
                  v251 += 2;
                  unint64_t v248 = (void *)((char *)v248 + 2);
                }
                if ((unint64_t)v251 >= v16)
                {
LABEL_349:
                  unint64_t v250 = v251 - v1257;
                  if (v251 - v1257 <= v103) {
                    goto LABEL_357;
                  }
                  goto LABEL_350;
                }
              }
              if (*(unsigned __int8 *)v248 == *v251) {
                ++v251;
              }
              goto LABEL_349;
            }
          }
          break;
        }
        if (*(_DWORD *)v248 == *(_DWORD *)v251)
        {
          v251 += 4;
          unint64_t v248 = (void *)((char *)v248 + 4);
        }
        goto LABEL_341;
      }
    }
    uint64_t v120 = (char *)v101;
    if ((unint64_t)v101 >= v1237) {
      goto LABEL_142;
    }
LABEL_140:
    if (*(_DWORD *)v118 == *(_DWORD *)v120)
    {
      v120 += 4;
      v118 += 4;
    }
LABEL_142:
    if ((unint64_t)v120 >= v1236)
    {
      if ((unint64_t)v120 >= v16) {
        goto LABEL_150;
      }
    }
    else
    {
      if (*(unsigned __int16 *)v118 == *(unsigned __int16 *)v120)
      {
        v120 += 2;
        v118 += 2;
      }
      if ((unint64_t)v120 >= v16)
      {
LABEL_150:
        unsigned int v113 = v120 - v101 + 4;
        unint64_t v114 = v113;
        if (v103 < v113) {
          goto LABEL_132;
        }
        goto LABEL_115;
      }
    }
    if (*v118 == *v120) {
      LODWORD(v120) = v120 + 1;
    }
    goto LABEL_150;
  }
  return v16 - (void)v1213;
}

unint64_t ZSTD_compressBlock_btultra_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v7 = a1;
  uint64_t v1345 = *MEMORY[0x1E4F143B8];
  long long v1265 = (char **)(a1 + 80);
  v1266 = a4;
  v1335 = &a4[a5];
  unint64_t v1303 = (unint64_t)&a4[a5 - 8];
  uint64_t v8 = (unsigned __int8 *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 212) >= 0xFFFu) {
    int v9 = 4095;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 212);
  }
  unsigned int v1190 = v9;
  if (*(_DWORD *)(a1 + 208) == 3) {
    uint64_t v10 = 3;
  }
  else {
    uint64_t v10 = 4;
  }
  unsigned int v1009 = *(_DWORD *)(a1 + 36);
  uint64_t v11 = *(unsigned int **)(a1 + 120);
  v1336 = *(_DWORD **)(a1 + 112);
  unsigned int v1344 = 0;
  uint64_t v1343 = 0;
  long long v1340 = 0u;
  memset(v1341, 0, sizeof(v1341));
  long long v1339 = 0u;
  uint64_t v12 = *(long long **)(a1 + 224);
  if (v12)
  {
    long long v13 = v12[1];
    long long v1339 = *v12;
    long long v1340 = v13;
    *(void *)v1341 = *((void *)v12 + 4);
  }
  else
  {
    *(void *)v1341 = 0;
    long long v1339 = 0uLL;
    long long v1340 = 0uLL;
  }
  *(void *)&v1341[12] = 0;
  *(_DWORD *)&v1341[8] = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t *)&v1339, 0, a5);
  ZSTD_rescaleFreqs(v1265, v1266, a5, 2);
  if (v8 == v1266) {
    long long v14 = v1266 + 1;
  }
  else {
    long long v14 = v1266;
  }
  unint64_t v15 = (unint64_t)v1335;
  if ((unint64_t)v14 < v1303)
  {
    unsigned int v1083 = 0;
    unint64_t v1183 = (v10 - 1);
    unint64_t v1330 = (unint64_t)(v1335 - 1);
    unint64_t v1331 = (unint64_t)(v1335 - 3);
    unint64_t v1061 = (v10 - 1) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v1010 = v10 - 1;
    uint64_t v16 = (v10 - 1) | 1;
    v1337 = v11 + 14;
    uint64_t v1005 = v10 - v16;
    uint64_t v1006 = &v11[7 * v16];
    uint64_t v17 = v11 + 7;
    uint64_t v18 = v1266;
    uint64_t v1304 = v7;
    int v1250 = v10;
    uint64_t v1062 = a2;
    v1332 = (char *)(v1335 - 7);
    while (1)
    {
      unint64_t v1229 = v18;
      unsigned int v23 = v14 - v18;
      unsigned int v1338 = 0;
      uint64_t v24 = *(void *)(v7 + 8);
      uint64_t v25 = *(unsigned int *)(v7 + 36);
      v1334 = v14;
      if (v24 + v25 > (unint64_t)v14)
      {
        LODWORD(v26) = 0;
        uint64_t v27 = (uint64_t)v1336;
        goto LABEL_604;
      }
      int v28 = *(_DWORD *)(v7 + 208);
      for (unsigned int i = v14 - v24; v25 < i; LODWORD(v25) = inserted + v25)
      {
        int inserted = ZSTD_insertBt1(v7, (void *)(v24 + v25), v15, v28, 0);
        unint64_t v15 = (unint64_t)v1335;
      }
      *(_DWORD *)(v7 + 36) = i;
      if ((v28 - 6) < 2) {
        break;
      }
      if (v28 == 5)
      {
        uint64_t v26 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          unsigned int v151 = 4095;
        }
        else {
          unsigned int v151 = *(_DWORD *)(v7 + 212);
        }
        uint64_t v152 = *(void *)(v7 + 8);
        int v153 = v1334 - v152;
        uint64_t v154 = (char *)(v1334 + 12);
        int v1101 = *(_DWORD *)(v7 + 204);
        uint64_t v1109 = *(void *)(v7 + 48);
        unint64_t v1093 = (0xCF1BBCDCBB000000 * *(void *)v1334) >> -(char)*(_DWORD *)(v7 + 200);
        unsigned int v1117 = *(_DWORD *)(v1109 + 4 * v1093);
        int v155 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        int v1050 = ~v155;
        unsigned int v156 = v1334 - v152 + v155 + 1;
        if ((int)v1334 - (int)v152 < ~v155) {
          unsigned int v156 = 0;
        }
        unsigned int v1127 = v156;
        uint64_t v157 = *(unsigned int *)(v7 + 24);
        unsigned int v158 = 1 << *(_DWORD *)(v7 + 192);
        long long v14 = v1334;
        if (v153 - *(_DWORD *)(v7 + 28) > v158 && *(_DWORD *)(v7 + 32) == 0) {
          unsigned int v160 = v153 - v158;
        }
        else {
          unsigned int v160 = *(_DWORD *)(v7 + 28);
        }
        if (v160 <= 1) {
          int v161 = 1;
        }
        else {
          int v161 = v160;
        }
        unsigned int v1143 = v161;
        uint64_t v162 = *(void *)(v7 + 184);
        uint64_t v163 = *(void *)(v162 + 8);
        v1307 = *(char **)v162;
        unsigned int v164 = *(_DWORD *)(v162 + 28);
        uint64_t v165 = v160 - (*(void *)v162 - v163);
        uint64_t v1065 = v162;
        int v1058 = *(_DWORD *)(v162 + 200);
        unsigned int v166 = ~(-1 << (*(_DWORD *)(v162 + 196) - 1));
        unsigned int v167 = *(void *)v162 - v163 - v164;
        uint64_t v168 = *(void *)(v7 + 64);
        unsigned int v1042 = v1307 - v163;
        unsigned int v1152 = v166;
        if (v167 <= v166) {
          unsigned int v169 = v164;
        }
        else {
          unsigned int v169 = v1307 - v163 - v166;
        }
        unsigned int v1163 = v169;
        unsigned int v170 = v153 - v157;
        uint64_t v1174 = v163;
        uint64_t v171 = v163 - v165;
        unsigned int v1186 = v164;
        uint64_t v1135 = v160 - (v1307 - v163);
        uint64_t v172 = v153 - v164 - v165;
        uint64_t v173 = v23 == 0;
        uint64_t v1085 = v152;
        v1292 = (void *)(v152 + v157);
        uint64_t v1270 = v168;
        unsigned int v1078 = (unsigned int *)(v168 + 8 * (v153 & ~v155));
        int v1342 = 0;
        int v1286 = v153 + 9;
        if (v23) {
          unint64_t v174 = 3;
        }
        else {
          unint64_t v174 = 4;
        }
        unsigned int v175 = v1334 + 4;
        if (v23) {
          int v176 = 0;
        }
        else {
          int v176 = -1;
        }
        unint64_t v177 = v1183;
        unint64_t v178 = (unint64_t)(v1335 - 7);
        int v1259 = v1334 - v152;
        unsigned int v1253 = v151;
        int v1233 = v157;
        int v1203 = v176;
        uint64_t v1217 = v171;
        while (1)
        {
          if (v173 == 3)
          {
            unsigned int v179 = *a3 - 1;
            unsigned int v180 = v153 - v179;
            unsigned int v181 = *a3 - 2;
            if (v181 >= v170) {
              goto LABEL_211;
            }
          }
          else
          {
            unsigned int v179 = a3[v173];
            unsigned int v180 = v153 - v179;
            unsigned int v181 = v179 - 1;
            if (v179 - 1 >= v170)
            {
LABEL_211:
              if (v181 < v172 && v157 + ~v180 >= 3)
              {
                uint64_t v183 = v171 + v180;
                if (*(_DWORD *)v14 == *(_DWORD *)v183)
                {
                  uint64_t v184 = v175;
                  unint64_t v1313 = v177;
                  uint64_t v185 = v26;
                  uint64_t v186 = v172;
                  int v187 = ZSTD_count_2segments(v184, (char *)(v183 + 4), v15, v1307, v1292);
                  uint64_t v172 = v186;
                  uint64_t v171 = v1217;
                  LODWORD(v157) = v1233;
                  uint64_t v154 = (char *)(v1334 + 12);
                  unsigned int v151 = v1253;
                  unint64_t v177 = v1313;
                  int v153 = v1259;
                  uint64_t v26 = v185;
                  long long v14 = v1334;
                  unint64_t v15 = (unint64_t)v1335;
                  unint64_t v178 = (unint64_t)(v1335 - 7);
                  unsigned int v188 = v187 + 4;
                  unsigned int v175 = v1334 + 4;
                  int v176 = v1203;
                  unint64_t v189 = v188;
                  if (v1313 < v188) {
                    goto LABEL_225;
                  }
                }
              }
              goto LABEL_208;
            }
          }
          if (v180 < v160 || *(_DWORD *)v14 != *(_DWORD *)&v14[-v179]) {
            goto LABEL_208;
          }
          uint64_t v192 = -(uint64_t)v179;
          uint64_t v193 = (char *)v175 - v179;
          if (v178 <= (unint64_t)v175) {
            break;
          }
          unint64_t v194 = *v175 ^ *(void *)v193;
          if (v194)
          {
            unsigned int v188 = (__clz(__rbit64(v194)) >> 3) + 4;
            unint64_t v189 = v188;
            if (v177 < v188) {
              goto LABEL_225;
            }
            goto LABEL_208;
          }
          uint64_t v196 = 0;
          do
          {
            uint64_t v195 = &v154[v196];
            if ((unint64_t)&v154[v196] >= v178)
            {
              uint64_t v193 = &v195[v192];
              if ((unint64_t)v195 >= v1331) {
                goto LABEL_235;
              }
              goto LABEL_233;
            }
            uint64_t v197 = *(void *)&v154[v192 + v196];
            v196 += 8;
            unint64_t v198 = *(void *)v195 ^ v197;
            long long v14 = v1334;
          }
          while (!v198);
          unsigned int v188 = v196 + (__clz(__rbit64(v198)) >> 3) + 4;
          unint64_t v189 = v188;
          if (v177 < v188)
          {
LABEL_225:
            int v191 = &v1336[2 * v26];
            *int v191 = v173 + v176;
            v191[1] = v188;
            uint64_t v26 = (v26 + 1);
            if (v188 > v151) {
              goto LABEL_603;
            }
            unint64_t v177 = v189;
            if (&v14[v189] == (unsigned __int8 *)v15) {
              goto LABEL_603;
            }
          }
LABEL_208:
          if (++v173 >= v174)
          {
            *(_DWORD *)(v1109 + 4 * v1093) = v153;
            int v278 = ~(-1 << v1101);
            unsigned int v279 = v1143;
            unsigned int v280 = v1117;
            if (v1117 < v1143)
            {
              uint64_t v130 = v1304;
              int v281 = v1286;
              uint64_t v282 = v1085;
              int v284 = v1078 + 1;
              uint64_t v283 = v1078;
LABEL_373:
              int v1285 = v281;
              *int v284 = 0;
              *uint64_t v283 = 0;
              int v1312 = v26;
              if (!v278) {
                goto LABEL_601;
              }
              long long v14 = v1334;
              unsigned int v285 = *(_DWORD *)(*(void *)(v1065 + 48)
                               + 4 * ((0xCF1BBCDCBB000000 * *(void *)v1334) >> -(char)v1058));
              if (v285 <= v1186) {
                goto LABEL_602;
              }
              unint64_t v286 = 0;
              unint64_t v287 = 0;
              uint64_t v1235 = *(void *)(v1065 + 64);
              uint64_t v1244 = v282 + v1135;
              int v1219 = v1259 + 2;
              int v1261 = v278 - 1;
              while (1)
              {
                unsigned int v1272 = v285;
                if (v287 >= v286) {
                  unint64_t v288 = v286;
                }
                else {
                  unint64_t v288 = v287;
                }
                uint64_t v289 = v285;
                uint64_t v290 = v1174 + v285;
                unint64_t v291 = v177;
                unint64_t v292 = ZSTD_count_2segments(&v14[v288], (char *)(v290 + v288), v15, v1307, v1292);
                unint64_t v293 = v292 + v288;
                if (v292 + v288 + v289 >= v1042) {
                  uint64_t v294 = v1244 + v289;
                }
                else {
                  uint64_t v294 = v290;
                }
                if (v293 <= v291)
                {
                  unint64_t v177 = v291;
                  long long v14 = v1334;
                  unint64_t v15 = (unint64_t)v1335;
                  uint64_t v130 = v1304;
                  unsigned int v297 = v1272;
                  if (v1272 <= v1163) {
                    goto LABEL_602;
                  }
                }
                else
                {
                  int v295 = v1285;
                  if (v293 > v1285 - (v1272 + v1135)) {
                    int v295 = v1272 + v1135 + v293;
                  }
                  int v1285 = v295;
                  unint64_t v296 = &v1336[2 * v1312];
                  *unint64_t v296 = v1219 - (v1272 + v1135);
                  v296[1] = v293;
                  ++v1312;
                  if (v293 > 0x1000) {
                    goto LABEL_599;
                  }
                  unsigned int v297 = v1272;
                  long long v14 = v1334;
                  unint64_t v15 = (unint64_t)v1335;
                  unint64_t v177 = v292 + v288;
                  uint64_t v130 = v1304;
                  if (&v1334[v293] == v1335 || v1272 <= v1163) {
                    goto LABEL_602;
                  }
                }
                unsigned int v298 = *(unsigned __int8 *)(v294 + v293);
                unsigned int v299 = v14[v293];
                BOOL v63 = v298 >= v299;
                BOOL v300 = v298 < v299;
                if (v63) {
                  unint64_t v286 = v292 + v288;
                }
                else {
                  unint64_t v287 = v292 + v288;
                }
                if (v1261)
                {
                  --v1261;
                  unsigned int v285 = *(_DWORD *)(v1235 + 8 * (v297 & v1152) + 4 * v300);
                  if (v285 > v1186) {
                    continue;
                  }
                }
                goto LABEL_602;
              }
            }
            unint64_t v341 = 0;
            unint64_t v342 = 0;
            int v343 = v153 + 2;
            v1317 = v1334 + 8;
            uint64_t v282 = v1085;
            uint64_t v344 = v1085 + 8;
            uint64_t v130 = v1304;
            int v281 = v1286;
            int v284 = v1078 + 1;
            uint64_t v283 = v1078;
            unsigned int v345 = v1127;
            while (2)
            {
              if (v342 >= v341) {
                unint64_t v346 = v341;
              }
              else {
                unint64_t v346 = v342;
              }
              unsigned int v347 = v280;
              uint64_t v348 = v280;
              uint64_t v349 = v1085 + v280;
              unint64_t v350 = &v1334[v346];
              uint64_t v351 = (void *)(v349 + v346);
              if (v1332 <= (char *)&v1334[v346])
              {
                unint64_t v354 = &v1334[v346];
                if ((unint64_t)v350 >= v1331) {
                  goto LABEL_459;
                }
              }
              else
              {
                unint64_t v352 = *(void *)v350 ^ *v351;
                if (v352)
                {
                  unint64_t v353 = (__clz(__rbit64(v352)) >> 3) + v346;
                  if (v353 <= v177) {
                    goto LABEL_475;
                  }
LABEL_468:
                  if (v353 > v281 - v347) {
                    int v281 = v347 + v353;
                  }
                  unint64_t v355 = &v1336[2 * v26];
                  *unint64_t v355 = v343 - v347;
                  v355[1] = v353;
                  LODWORD(v26) = v26 + 1;
                  if (v353 > 0x1000 || &v1334[v353] == (unsigned __int8 *)v15)
                  {
                    int v1285 = v281;
                    int v1312 = v26;
                    *int v284 = 0;
                    *uint64_t v283 = 0;
                    goto LABEL_601;
                  }
                  unint64_t v177 = v353;
LABEL_475:
                  unint64_t v357 = (unsigned int *)(v1270 + 8 * (v347 & v1050));
                  if (*(unsigned __int8 *)(v349 + v353) >= v1334[v353])
                  {
                    *int v284 = v347;
                    if (v347 <= v345)
                    {
                      int v284 = (unsigned int *)&v1342;
                      goto LABEL_373;
                    }
                    unint64_t v341 = v353;
                    int v284 = (unsigned int *)(v1270 + 8 * (v347 & v1050));
                    BOOL v63 = v278-- != 0;
                    if (!v63) {
                      goto LABEL_373;
                    }
                  }
                  else
                  {
                    *uint64_t v283 = v347;
                    if (v347 <= v345)
                    {
                      uint64_t v283 = (unsigned int *)&v1342;
                      goto LABEL_373;
                    }
                    ++v357;
                    unint64_t v342 = v353;
                    uint64_t v283 = v357;
                    BOOL v63 = v278-- != 0;
                    if (!v63) {
                      goto LABEL_373;
                    }
                  }
                  unsigned int v280 = *v357;
                  if (*v357 < v279) {
                    goto LABEL_373;
                  }
                  continue;
                }
                unint64_t v358 = v177;
                uint64_t v359 = 0;
                unsigned int v360 = (char *)v1317 + v346;
                while (1)
                {
                  unint64_t v361 = &v360[v359];
                  if (&v360[v359] >= v1332) {
                    break;
                  }
                  uint64_t v362 = *(void *)(v344 + v346 + v348 + v359);
                  v359 += 8;
                  unint64_t v363 = *(void *)v361 ^ v362;
                  if (v363)
                  {
                    unint64_t v364 = __clz(__rbit64(v363));
                    unint64_t v177 = v358;
                    unsigned int v345 = v1127;
                    unsigned int v279 = v1143;
                    unint64_t v353 = v359 + (v364 >> 3) + v346;
                    if (v353 <= v177) {
                      goto LABEL_475;
                    }
                    goto LABEL_468;
                  }
                }
                unint64_t v354 = (unsigned __int8 *)v1317 + v346 + v359;
                uint64_t v351 = (void *)(v344 + v346 + v348 + v359);
                unint64_t v177 = v358;
                unsigned int v345 = v1127;
                unsigned int v279 = v1143;
                if ((unint64_t)v354 >= v1331)
                {
LABEL_459:
                  if ((unint64_t)v354 >= v1330)
                  {
                    if ((unint64_t)v354 >= v15) {
                      goto LABEL_467;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)v351 == *(unsigned __int16 *)v354)
                    {
                      v354 += 2;
                      uint64_t v351 = (void *)((char *)v351 + 2);
                    }
                    if ((unint64_t)v354 >= v15)
                    {
LABEL_467:
                      unint64_t v353 = v354 - v1334;
                      if (v354 - v1334 <= v177) {
                        goto LABEL_475;
                      }
                      goto LABEL_468;
                    }
                  }
                  if (*(unsigned __int8 *)v351 == *v354) {
                    ++v354;
                  }
                  goto LABEL_467;
                }
              }
              break;
            }
            if (*(_DWORD *)v351 == *(_DWORD *)v354)
            {
              v354 += 4;
              uint64_t v351 = (void *)((char *)v351 + 4);
            }
            goto LABEL_459;
          }
        }
        uint64_t v195 = (char *)v175;
        if ((unint64_t)v175 >= v1331) {
          goto LABEL_235;
        }
LABEL_233:
        if (*(_DWORD *)v193 == *(_DWORD *)v195)
        {
          v195 += 4;
          v193 += 4;
        }
LABEL_235:
        if ((unint64_t)v195 >= v1330)
        {
          if ((unint64_t)v195 >= v15) {
            goto LABEL_243;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v193 == *(unsigned __int16 *)v195)
          {
            v195 += 2;
            v193 += 2;
          }
          if ((unint64_t)v195 >= v15)
          {
LABEL_243:
            unsigned int v188 = v195 - v175 + 4;
            unint64_t v189 = v188;
            if (v177 < v188) {
              goto LABEL_225;
            }
            goto LABEL_208;
          }
        }
        if (*v193 == *v195) {
          LODWORD(v195) = v195 + 1;
        }
        goto LABEL_243;
      }
      if (v28 != 3)
      {
        uint64_t v26 = 0;
        if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
          unsigned int v199 = 4095;
        }
        else {
          unsigned int v199 = *(_DWORD *)(v7 + 212);
        }
        uint64_t v200 = *(void *)(v7 + 8);
        int v201 = v1334 - v200;
        unsigned int v202 = (char *)(v1334 + 12);
        int v1102 = *(_DWORD *)(v7 + 204);
        uint64_t v1110 = *(void *)(v7 + 48);
        uint64_t v1094 = (-1640531535 * *(_DWORD *)v1334) >> -(char)*(_DWORD *)(v7 + 200);
        unsigned int v1118 = *(_DWORD *)(v1110 + 4 * v1094);
        int v203 = -1 << (*(_DWORD *)(v7 + 196) - 1);
        int v1051 = ~v203;
        unsigned int v204 = v1334 - v200 + v203 + 1;
        if ((int)v1334 - (int)v200 < ~v203) {
          unsigned int v204 = 0;
        }
        unsigned int v1128 = v204;
        uint64_t v205 = *(unsigned int *)(v7 + 24);
        unsigned int v206 = 1 << *(_DWORD *)(v7 + 192);
        long long v14 = v1334;
        if (v201 - *(_DWORD *)(v7 + 28) > v206 && *(_DWORD *)(v7 + 32) == 0) {
          unsigned int v208 = v201 - v206;
        }
        else {
          unsigned int v208 = *(_DWORD *)(v7 + 28);
        }
        if (v208 <= 1) {
          int v209 = 1;
        }
        else {
          int v209 = v208;
        }
        unsigned int v1144 = v209;
        uint64_t v210 = *(void *)(v7 + 184);
        uint64_t v211 = *(void *)(v210 + 8);
        v1308 = *(char **)v210;
        unsigned int v212 = *(_DWORD *)(v210 + 28);
        uint64_t v213 = v208 - (*(void *)v210 - v211);
        uint64_t v1066 = v210;
        int v1059 = *(_DWORD *)(v210 + 200);
        unsigned int v214 = ~(-1 << (*(_DWORD *)(v210 + 196) - 1));
        unsigned int v215 = *(void *)v210 - v211 - v212;
        uint64_t v216 = *(void *)(v7 + 64);
        unsigned int v1043 = v1308 - v211;
        unsigned int v1153 = v214;
        if (v215 <= v214) {
          unsigned int v217 = v212;
        }
        else {
          unsigned int v217 = v1308 - v211 - v214;
        }
        unsigned int v1164 = v217;
        unsigned int v218 = v201 - v205;
        uint64_t v1175 = v211;
        uint64_t v219 = v211 - v213;
        unsigned int v1187 = v212;
        uint64_t v1136 = v208 - (v1308 - v211);
        unsigned int v220 = v201 - v212 - v213;
        uint64_t v221 = v23 == 0;
        uint64_t v1086 = v200;
        v1293 = (void *)(v200 + v205);
        uint64_t v1271 = v216;
        unsigned int v1079 = (unsigned int *)(v216 + 8 * (v201 & ~v203));
        int v1342 = 0;
        int v1287 = v201 + 9;
        if (v23) {
          unint64_t v222 = 3;
        }
        else {
          unint64_t v222 = 4;
        }
        unsigned int v223 = v1334 + 4;
        if (v23) {
          uint64_t v224 = 0;
        }
        else {
          uint64_t v224 = -1;
        }
        unint64_t v225 = v1183;
        unint64_t v226 = (unint64_t)(v1335 - 7);
        int v1260 = v201;
        unsigned int v1254 = v199;
        int v1234 = v205;
        unint64_t v1204 = v222;
        uint64_t v1218 = v211 - v213;
        while (1)
        {
          if (v221 == 3)
          {
            unsigned int v227 = *a3 - 1;
            unsigned int v228 = v201 - v227;
            unsigned int v229 = *a3 - 2;
            if (v229 >= v218) {
              goto LABEL_279;
            }
          }
          else
          {
            unsigned int v227 = a3[v221];
            unsigned int v228 = v201 - v227;
            unsigned int v229 = v227 - 1;
            if (v227 - 1 >= v218)
            {
LABEL_279:
              if (v229 < v220 && v205 + ~v228 >= 3)
              {
                uint64_t v231 = v219 + v228;
                if (*(_DWORD *)v14 == *(_DWORD *)v231)
                {
                  uint64_t v232 = v223;
                  unint64_t v1314 = v225;
                  uint64_t v233 = v26;
                  uint64_t v234 = v224;
                  int v235 = ZSTD_count_2segments(v232, (char *)(v231 + 4), v15, v1308, v1293);
                  uint64_t v224 = v234;
                  uint64_t v219 = v1218;
                  LODWORD(v205) = v1234;
                  unsigned int v202 = (char *)(v1334 + 12);
                  unsigned int v199 = v1254;
                  unint64_t v225 = v1314;
                  int v201 = v1260;
                  uint64_t v26 = v233;
                  long long v14 = v1334;
                  unint64_t v15 = (unint64_t)v1335;
                  unint64_t v226 = (unint64_t)(v1335 - 7);
                  unsigned int v236 = v235 + 4;
                  unsigned int v223 = v1334 + 4;
                  unint64_t v222 = v1204;
                  unint64_t v237 = v236;
                  if (v1314 < v236) {
                    goto LABEL_293;
                  }
                }
              }
              goto LABEL_276;
            }
          }
          if (v228 < v208 || *(_DWORD *)v14 != *(_DWORD *)&v14[-v227]) {
            goto LABEL_276;
          }
          uint64_t v240 = -(uint64_t)v227;
          unint64_t v241 = (char *)v223 - v227;
          if (v226 <= (unint64_t)v223) {
            break;
          }
          unint64_t v242 = *v223 ^ *(void *)v241;
          if (v242)
          {
            unsigned int v236 = (__clz(__rbit64(v242)) >> 3) + 4;
            unint64_t v237 = v236;
            if (v225 < v236) {
              goto LABEL_293;
            }
            goto LABEL_276;
          }
          uint64_t v244 = 0;
          do
          {
            uint64_t v243 = &v202[v244];
            if ((unint64_t)&v202[v244] >= v226)
            {
              unint64_t v241 = &v243[v240];
              if ((unint64_t)v243 >= v1331) {
                goto LABEL_303;
              }
              goto LABEL_301;
            }
            uint64_t v245 = *(void *)&v202[v240 + v244];
            v244 += 8;
            unint64_t v246 = *(void *)v243 ^ v245;
            long long v14 = v1334;
          }
          while (!v246);
          unsigned int v236 = v244 + (__clz(__rbit64(v246)) >> 3) + 4;
          unint64_t v237 = v236;
          if (v225 < v236)
          {
LABEL_293:
            uint64_t v239 = &v1336[2 * v26];
            *uint64_t v239 = v221 + v224;
            v239[1] = v236;
            uint64_t v26 = (v26 + 1);
            if (v236 > v199) {
              goto LABEL_603;
            }
            unint64_t v225 = v237;
            if (&v14[v237] == (unsigned __int8 *)v15) {
              goto LABEL_603;
            }
          }
LABEL_276:
          if (++v221 >= v222)
          {
            *(_DWORD *)(v1110 + 4 * v1094) = v201;
            int v301 = ~(-1 << v1102);
            unsigned int v302 = v1144;
            unsigned int v303 = v1118;
            if (v1118 < v1144)
            {
              uint64_t v130 = v1304;
              int v131 = v1287;
              uint64_t v304 = v1086;
              int v134 = v1079 + 1;
              uint64_t v133 = v1079;
              goto LABEL_398;
            }
            unint64_t v365 = 0;
            unint64_t v366 = 0;
            int v367 = v201 + 2;
            v1318 = v1334 + 8;
            uint64_t v304 = v1086;
            uint64_t v368 = v1086 + 8;
            uint64_t v130 = v1304;
            int v131 = v1287;
            int v134 = v1079 + 1;
            uint64_t v133 = v1079;
            unsigned int v369 = v1128;
            while (1)
            {
              unint64_t v370 = v366 >= v365 ? v365 : v366;
              unsigned int v371 = v303;
              uint64_t v372 = v303;
              uint64_t v373 = v1086 + v303;
              unint64_t v374 = &v1334[v370];
              uint64_t v375 = (void *)(v373 + v370);
              if (v1332 <= (char *)&v1334[v370]) {
                break;
              }
              unint64_t v376 = *(void *)v374 ^ *v375;
              if (v376)
              {
                unint64_t v377 = (__clz(__rbit64(v376)) >> 3) + v370;
                if (v377 <= v225) {
                  goto LABEL_517;
                }
LABEL_510:
                if (v377 > v131 - v371) {
                  int v131 = v371 + v377;
                }
                unsigned int v379 = &v1336[2 * v26];
                *unsigned int v379 = v367 - v371;
                v379[1] = v377;
                LODWORD(v26) = v26 + 1;
                if (v377 <= 0x1000 && &v1334[v377] != (unsigned __int8 *)v15)
                {
                  unint64_t v225 = v377;
                  goto LABEL_517;
                }
LABEL_574:
                int v1285 = v131;
                int v1312 = v26;
                *int v134 = 0;
                *uint64_t v133 = 0;
                goto LABEL_601;
              }
              unint64_t v382 = v225;
              uint64_t v383 = 0;
              int v384 = (char *)v1318 + v370;
              do
              {
                unsigned int v385 = &v384[v383];
                if (&v384[v383] >= v1332)
                {
                  uint64_t v378 = (unsigned __int8 *)v1318 + v370 + v383;
                  uint64_t v375 = (void *)(v368 + v370 + v372 + v383);
                  unint64_t v225 = v382;
                  unsigned int v369 = v1128;
                  unsigned int v302 = v1144;
                  if ((unint64_t)v378 >= v1331) {
                    goto LABEL_501;
                  }
                  goto LABEL_499;
                }
                uint64_t v386 = *(void *)(v368 + v370 + v372 + v383);
                v383 += 8;
                unint64_t v387 = *(void *)v385 ^ v386;
              }
              while (!v387);
              unint64_t v388 = __clz(__rbit64(v387));
              unint64_t v225 = v382;
              unsigned int v369 = v1128;
              unsigned int v302 = v1144;
              unint64_t v377 = v383 + (v388 >> 3) + v370;
              if (v377 > v225) {
                goto LABEL_510;
              }
LABEL_517:
              unsigned int v381 = (unsigned int *)(v1271 + 8 * (v371 & v1051));
              if (*(unsigned __int8 *)(v373 + v377) >= v1334[v377])
              {
                *int v134 = v371;
                if (v371 <= v369)
                {
                  int v134 = (unsigned int *)&v1342;
                  goto LABEL_398;
                }
                unint64_t v365 = v377;
                int v134 = (unsigned int *)(v1271 + 8 * (v371 & v1051));
                BOOL v63 = v301-- != 0;
                if (v63) {
                  goto LABEL_490;
                }
LABEL_398:
                int v1285 = v131;
                *int v134 = 0;
                *uint64_t v133 = 0;
                int v1312 = v26;
                if (v301)
                {
                  long long v14 = v1334;
                  unsigned int v305 = *(_DWORD *)(*(void *)(v1066 + 48)
                                   + 4 * ((-1640531535 * *(_DWORD *)v1334) >> -(char)v1059));
                  if (v305 > v1187)
                  {
                    unint64_t v306 = 0;
                    unint64_t v307 = 0;
                    uint64_t v1236 = *(void *)(v1066 + 64);
                    uint64_t v1245 = v304 + v1136;
                    int v1220 = v1260 + 2;
                    int v1262 = v301 - 1;
                    while (1)
                    {
                      unsigned int v1273 = v305;
                      if (v307 >= v306) {
                        unint64_t v308 = v306;
                      }
                      else {
                        unint64_t v308 = v307;
                      }
                      uint64_t v309 = v305;
                      uint64_t v310 = v1175 + v305;
                      unint64_t v311 = v225;
                      unint64_t v312 = ZSTD_count_2segments(&v14[v308], (char *)(v310 + v308), v15, v1308, v1293);
                      unint64_t v313 = v312 + v308;
                      if (v312 + v308 + v309 >= v1043) {
                        uint64_t v314 = v1245 + v309;
                      }
                      else {
                        uint64_t v314 = v310;
                      }
                      if (v313 <= v311)
                      {
                        unint64_t v225 = v311;
                        long long v14 = v1334;
                        unint64_t v15 = (unint64_t)v1335;
                        uint64_t v130 = v1304;
                        unsigned int v317 = v1273;
                        if (v1273 <= v1164) {
                          break;
                        }
                      }
                      else
                      {
                        int v315 = v1285;
                        if (v313 > v1285 - (v1273 + v1136)) {
                          int v315 = v1273 + v1136 + v313;
                        }
                        int v1285 = v315;
                        unint64_t v316 = &v1336[2 * v1312];
                        *unint64_t v316 = v1220 - (v1273 + v1136);
                        v316[1] = v313;
                        ++v1312;
                        if (v313 > 0x1000) {
                          goto LABEL_599;
                        }
                        unsigned int v317 = v1273;
                        long long v14 = v1334;
                        unint64_t v15 = (unint64_t)v1335;
                        unint64_t v225 = v312 + v308;
                        uint64_t v130 = v1304;
                        if (&v1334[v313] == v1335 || v1273 <= v1164) {
                          break;
                        }
                      }
                      unsigned int v318 = *(unsigned __int8 *)(v314 + v313);
                      unsigned int v319 = v14[v313];
                      BOOL v63 = v318 >= v319;
                      BOOL v320 = v318 < v319;
                      if (v63) {
                        unint64_t v306 = v312 + v308;
                      }
                      else {
                        unint64_t v307 = v312 + v308;
                      }
                      if (v1262)
                      {
                        --v1262;
                        unsigned int v305 = *(_DWORD *)(v1236 + 8 * (v317 & v1153) + 4 * v320);
                        if (v305 > v1187) {
                          continue;
                        }
                      }
                      break;
                    }
                  }
LABEL_602:
                  *(_DWORD *)(v130 + 36) = v1285 - 8;
                  LODWORD(v26) = v1312;
LABEL_603:
                  uint64_t v7 = v1304;
                  LODWORD(v10) = v1250;
                  uint64_t v27 = (uint64_t)v1336;
                  uint64_t v17 = v11 + 7;
                  goto LABEL_604;
                }
LABEL_601:
                long long v14 = v1334;
                goto LABEL_602;
              }
              *uint64_t v133 = v371;
              if (v371 <= v369)
              {
                uint64_t v133 = (unsigned int *)&v1342;
                goto LABEL_398;
              }
              ++v381;
              unint64_t v366 = v377;
              uint64_t v133 = v381;
              BOOL v63 = v301-- != 0;
              if (!v63) {
                goto LABEL_398;
              }
LABEL_490:
              unsigned int v303 = *v381;
              if (*v381 < v302) {
                goto LABEL_398;
              }
            }
            uint64_t v378 = &v1334[v370];
            if ((unint64_t)v374 >= v1331) {
              goto LABEL_501;
            }
LABEL_499:
            if (*(_DWORD *)v375 == *(_DWORD *)v378)
            {
              v378 += 4;
              uint64_t v375 = (void *)((char *)v375 + 4);
            }
LABEL_501:
            if ((unint64_t)v378 >= v1330)
            {
              if ((unint64_t)v378 >= v15) {
                goto LABEL_509;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v375 == *(unsigned __int16 *)v378)
              {
                v378 += 2;
                uint64_t v375 = (void *)((char *)v375 + 2);
              }
              if ((unint64_t)v378 >= v15)
              {
LABEL_509:
                unint64_t v377 = v378 - v1334;
                if (v378 - v1334 <= v225) {
                  goto LABEL_517;
                }
                goto LABEL_510;
              }
            }
            if (*(unsigned __int8 *)v375 == *v378) {
              ++v378;
            }
            goto LABEL_509;
          }
        }
        uint64_t v243 = (char *)v223;
        if ((unint64_t)v223 >= v1331) {
          goto LABEL_303;
        }
LABEL_301:
        if (*(_DWORD *)v241 == *(_DWORD *)v243)
        {
          v243 += 4;
          v241 += 4;
        }
LABEL_303:
        if ((unint64_t)v243 >= v1330)
        {
          if ((unint64_t)v243 >= v15) {
            goto LABEL_311;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v241 == *(unsigned __int16 *)v243)
          {
            v243 += 2;
            v241 += 2;
          }
          if ((unint64_t)v243 >= v15)
          {
LABEL_311:
            unsigned int v236 = v243 - v223 + 4;
            unint64_t v237 = v236;
            if (v225 < v236) {
              goto LABEL_293;
            }
            goto LABEL_276;
          }
        }
        if (*v241 == *v243) {
          LODWORD(v243) = v243 + 1;
        }
        goto LABEL_311;
      }
      uint64_t v26 = 0;
      if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
        unsigned int v31 = 4095;
      }
      else {
        unsigned int v31 = *(_DWORD *)(v7 + 212);
      }
      uint64_t v32 = *(void *)(v7 + 8);
      unsigned int v33 = v1334 - v32;
      unsigned int v34 = (char *)(v1334 + 11);
      int v1071 = *(_DWORD *)(v7 + 204);
      uint64_t v1076 = *(void *)(v7 + 48);
      uint64_t v1063 = (-1640531535 * *(_DWORD *)v1334) >> -(char)*(_DWORD *)(v7 + 200);
      unsigned int v35 = *(_DWORD *)(v1076 + 4 * v1063);
      int v36 = -1 << (*(_DWORD *)(v7 + 196) - 1);
      int v1115 = ~v36;
      unsigned int v37 = v1334 - v32 + v36 + 1;
      if ((int)v1334 - (int)v32 < ~v36) {
        unsigned int v37 = 0;
      }
      unsigned int v1107 = v37;
      uint64_t v38 = *(unsigned int *)(v7 + 24);
      unsigned int v39 = 1 << *(_DWORD *)(v7 + 192);
      long long v14 = v1334;
      if (v33 - *(_DWORD *)(v7 + 28) > v39 && *(_DWORD *)(v7 + 32) == 0) {
        unsigned int v41 = v33 - v39;
      }
      else {
        unsigned int v41 = *(_DWORD *)(v7 + 28);
      }
      if (v41 <= 1) {
        int v42 = 1;
      }
      else {
        int v42 = v41;
      }
      unsigned int v1310 = v42;
      uint64_t v43 = *(void *)(v7 + 184);
      uint64_t v44 = *(void *)(v43 + 8);
      v1305 = *(char **)v43;
      unsigned int v45 = *(_DWORD *)(v43 + 28);
      uint64_t v46 = v41 - (*(void *)v43 - v44);
      uint64_t v1056 = v43;
      int v1048 = *(_DWORD *)(v43 + 200);
      unsigned int v47 = ~(-1 << (*(_DWORD *)(v43 + 196) - 1));
      unsigned int v48 = *(void *)v43 - v44 - v45;
      uint64_t v49 = *(void *)(v7 + 64);
      unsigned int v1040 = v1305 - v44;
      unsigned int v1214 = v47;
      if (v48 <= v47) {
        unsigned int v50 = v45;
      }
      else {
        unsigned int v50 = v1305 - v44 - v47;
      }
      unsigned int v1230 = v50;
      unsigned int v51 = v33 - v38;
      uint64_t v1242 = v44;
      uint64_t v52 = v44 - v46;
      unsigned int v1251 = v45;
      uint64_t v1125 = v41 - (v1305 - v44);
      unsigned int v53 = v33 - v45 - v46;
      unint64_t v54 = v23 == 0;
      v1290 = (void *)(v32 + v38);
      uint64_t v1267 = v49;
      uint64_t v1091 = (unsigned int *)(v49 + 8 * (v33 & ~v36));
      uint64_t v1099 = v32;
      int v1342 = 0;
      unsigned int v1283 = v33 + 9;
      if (v23) {
        unint64_t v55 = 3;
      }
      else {
        unint64_t v55 = 4;
      }
      unsigned int v56 = v1334 + 3;
      if (v23) {
        int v57 = 0;
      }
      else {
        int v57 = -1;
      }
      unint64_t v58 = v1183;
      unint64_t v59 = (unint64_t)(v1335 - 7);
      unsigned int v1201 = v31;
      unsigned int v1184 = v35;
      int v1172 = v38;
      unsigned int v1161 = v33 - v38;
      unint64_t v1141 = v55;
      unsigned int v1150 = v33;
      int v1133 = v57;
      do
      {
        if (v54 == 3)
        {
          unsigned int v60 = *a3 - 1;
          unsigned int v61 = v33 - v60;
          unsigned int v62 = *a3 - 2;
          if (v62 >= v51) {
            goto LABEL_50;
          }
        }
        else
        {
          unsigned int v60 = a3[v54];
          unsigned int v61 = v33 - v60;
          unsigned int v62 = v60 - 1;
          if (v60 - 1 >= v51)
          {
LABEL_50:
            BOOL v63 = v62 < v53 && v38 + ~v61 >= 3;
            if (!v63) {
              goto LABEL_47;
            }
            uint64_t v64 = v52 + v61;
            if (((*(_DWORD *)v64 ^ *(_DWORD *)v14) & 0xFFFFFF) != 0) {
              goto LABEL_47;
            }
            unint64_t v1256 = v58;
            uint64_t v65 = v26;
            unint64_t v66 = v56;
            int v67 = ZSTD_count_2segments(v56, (char *)(v64 + 3), v15, v1305, v1290);
            int v57 = v1133;
            unint64_t v55 = v1141;
            unsigned int v56 = v66;
            LODWORD(v38) = v1172;
            unsigned int v34 = (char *)(v1334 + 11);
            unsigned int v35 = v1184;
            unint64_t v58 = v1256;
            uint64_t v26 = v65;
            unsigned int v33 = v1150;
            unsigned int v51 = v1161;
            long long v14 = v1334;
            unint64_t v15 = (unint64_t)v1335;
            unint64_t v59 = (unint64_t)(v1335 - 7);
            unsigned int v68 = v67 + 3;
            unsigned int v31 = v1201;
            unint64_t v69 = v68;
            if (v1256 >= v68) {
              goto LABEL_47;
            }
            goto LABEL_64;
          }
        }
        if (v61 < v41 || ((*(_DWORD *)&v14[-v60] ^ *(_DWORD *)v14) & 0xFFFFFF) != 0) {
          goto LABEL_47;
        }
        uint64_t v72 = -(uint64_t)v60;
        uint64_t v73 = (char *)v56 - v60;
        if (v59 <= (unint64_t)v56)
        {
          unint64_t v75 = (char *)v56;
          if ((unint64_t)v56 < v1331)
          {
LABEL_72:
            if (*(_DWORD *)v73 == *(_DWORD *)v75)
            {
              v75 += 4;
              v73 += 4;
            }
          }
LABEL_74:
          if ((unint64_t)v75 >= v1330)
          {
            if ((unint64_t)v75 >= v15) {
              goto LABEL_82;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v73 == *(unsigned __int16 *)v75)
            {
              v75 += 2;
              v73 += 2;
            }
            if ((unint64_t)v75 >= v15)
            {
LABEL_82:
              unsigned int v68 = v75 - v56 + 3;
              unint64_t v69 = v68;
              if (v58 >= v68) {
                goto LABEL_47;
              }
LABEL_64:
              unint64_t v71 = &v1336[2 * v26];
              *unint64_t v71 = v54 + v57;
              v71[1] = v68;
              uint64_t v26 = (v26 + 1);
              if (v68 <= v31)
              {
                unint64_t v58 = v69;
                if (&v14[v69] != (unsigned __int8 *)v15) {
                  goto LABEL_47;
                }
              }
              goto LABEL_603;
            }
          }
          if (*v73 == *v75) {
            LODWORD(v75) = v75 + 1;
          }
          goto LABEL_82;
        }
        unint64_t v74 = *v56 ^ *(void *)v73;
        if (v74)
        {
          unsigned int v68 = (__clz(__rbit64(v74)) >> 3) + 3;
          unint64_t v69 = v68;
          if (v58 >= v68) {
            goto LABEL_47;
          }
          goto LABEL_64;
        }
        uint64_t v76 = 0;
        do
        {
          unint64_t v75 = &v34[v76];
          if ((unint64_t)&v34[v76] >= v59)
          {
            uint64_t v73 = &v75[v72];
            if ((unint64_t)v75 < v1331) {
              goto LABEL_72;
            }
            goto LABEL_74;
          }
          uint64_t v77 = *(void *)&v34[v72 + v76];
          v76 += 8;
          unint64_t v78 = *(void *)v75 ^ v77;
          long long v14 = v1334;
        }
        while (!v78);
        unsigned int v68 = v76 + (__clz(__rbit64(v78)) >> 3) + 3;
        unint64_t v69 = v68;
        if (v58 < v68) {
          goto LABEL_64;
        }
LABEL_47:
        ++v54;
      }
      while (v54 < v55);
      if (v58 > 2)
      {
        uint64_t v7 = v1304;
        LODWORD(v10) = v1250;
        uint64_t v27 = (uint64_t)v1336;
        uint64_t v250 = v1099;
        goto LABEL_422;
      }
      uint64_t v7 = v1304;
      uint64_t v247 = *(void *)(v1304 + 56);
      int v248 = *(_DWORD *)v14;
      int v249 = 32 - *(_DWORD *)(v1304 + 40);
      uint64_t v27 = (uint64_t)v1336;
      uint64_t v250 = v1099;
      if (v1009 < v33)
      {
        uint64_t v251 = v1009;
        do
        {
          *(_DWORD *)(v247 + 4 * ((900185344 * *(_DWORD *)(v1099 + v251)) >> v249)) = v251;
          ++v251;
        }
        while (v33 != v251);
      }
      uint64_t v252 = *(unsigned int *)(v247 + 4 * ((900185344 * v248) >> v249));
      BOOL v253 = v252 >= v1310 && (v33 - v252) >> 18 == 0;
      LODWORD(v10) = v1250;
      uint64_t v17 = v11 + 7;
      if (!v253)
      {
        unsigned int v1009 = v33;
        goto LABEL_422;
      }
      unsigned int v413 = (_DWORD *)(v1099 + v252);
      long long v14 = v1334;
      if (v59 <= (unint64_t)v1334)
      {
        unint64_t v416 = v1334;
        if ((unint64_t)v1334 < v1331)
        {
LABEL_582:
          if (*v413 == *(_DWORD *)v416)
          {
            v416 += 4;
            ++v413;
          }
        }
      }
      else
      {
        unint64_t v414 = *(void *)v1334 ^ *(void *)v413;
        if (v414)
        {
          unint64_t v415 = __clz(__rbit64(v414)) >> 3;
          unsigned int v1009 = v33;
          if (v415 < 3) {
            goto LABEL_422;
          }
          goto LABEL_593;
        }
        unint64_t v999 = 0;
        uint64_t v1000 = v1334 + 8;
        while (1)
        {
          uint64_t v1001 = &v1000[v999 / 8];
          if ((unint64_t)&v1000[v999 / 8] >= v59) {
            break;
          }
          uint64_t v1002 = *(void *)(v1099 + v252 + 8 + v999);
          v999 += 8;
          unint64_t v1003 = *v1001 ^ v1002;
          if (v1003)
          {
            unint64_t v415 = v999 + (__clz(__rbit64(v1003)) >> 3);
            long long v14 = v1334;
            unsigned int v1009 = v33;
            if (v415 >= 3) {
              goto LABEL_593;
            }
            goto LABEL_422;
          }
        }
        unint64_t v416 = &v1334[v999 + 8];
        unsigned int v413 = (_DWORD *)(v1099 + v252 + v999 + 8);
        if ((unint64_t)v416 < v1331) {
          goto LABEL_582;
        }
      }
      if ((unint64_t)v416 >= v1330)
      {
        if ((unint64_t)v416 >= v15) {
          goto LABEL_592;
        }
LABEL_590:
        if (*(unsigned __int8 *)v413 == *v416) {
          ++v416;
        }
        goto LABEL_592;
      }
      if (*(unsigned __int16 *)v413 == *(unsigned __int16 *)v416)
      {
        v416 += 2;
        unsigned int v413 = (_DWORD *)((char *)v413 + 2);
      }
      if ((unint64_t)v416 < v15) {
        goto LABEL_590;
      }
LABEL_592:
      long long v14 = v1334;
      unint64_t v415 = v416 - v1334;
      unsigned int v1009 = v33;
      if (v415 < 3) {
        goto LABEL_422;
      }
LABEL_593:
      _DWORD *v1336 = v33 - v252 + 2;
      v1336[1] = v415;
      if (v415 > v31 || &v14[v415] == (unsigned __int8 *)v15)
      {
        LODWORD(v26) = 1;
        unsigned int v1009 = v33;
        *(_DWORD *)(v1304 + 36) = v33 + 1;
        goto LABEL_604;
      }
      LODWORD(v26) = 1;
      unsigned int v1009 = v33;
      unint64_t v58 = v415;
LABEL_422:
      *(_DWORD *)(v1076 + 4 * v1063) = v33;
      int v321 = ~(-1 << v1071);
      if (v35 < v1310)
      {
        unsigned int v322 = v1283;
        unint64_t v324 = v1091 + 1;
        unint64_t v323 = v1091;
        goto LABEL_424;
      }
      unint64_t v389 = 0;
      unint64_t v390 = 0;
      uint64_t v1192 = v250 + 8;
      v1205 = v1334 + 8;
      unsigned int v322 = v1283;
      unint64_t v324 = v1091 + 1;
      unint64_t v323 = v1091;
      int v391 = v1115;
      unsigned int v392 = v1107;
      while (2)
      {
        if (v390 >= v389) {
          unint64_t v393 = v389;
        }
        else {
          unint64_t v393 = v390;
        }
        uint64_t v394 = v250 + v35;
        unsigned int v395 = &v1334[v393];
        unsigned int v396 = (_DWORD *)(v394 + v393);
        if (v59 <= (unint64_t)&v1334[v393])
        {
          unsigned int v399 = &v1334[v393];
          unsigned int v400 = v35;
          if ((unint64_t)v395 < v1331)
          {
LABEL_541:
            if (*v396 == *(_DWORD *)v399)
            {
              v399 += 4;
              ++v396;
            }
          }
        }
        else
        {
          unint64_t v397 = *(void *)v395 ^ *(void *)v396;
          if (v397)
          {
            unint64_t v398 = (__clz(__rbit64(v397)) >> 3) + v393;
            if (v398 <= v58) {
              goto LABEL_559;
            }
            goto LABEL_552;
          }
          unsigned int v400 = v35;
          int v404 = v324;
          int v405 = v323;
          unint64_t v406 = v58;
          uint64_t v407 = 0;
          int v408 = (char *)v1205 + v393;
          while (1)
          {
            unsigned int v409 = &v408[v407];
            if ((unint64_t)&v408[v407] >= v59) {
              break;
            }
            uint64_t v410 = *(void *)(v1192 + v393 + v35 + v407);
            v407 += 8;
            unint64_t v411 = *(void *)v409 ^ v410;
            if (v411)
            {
              unint64_t v412 = __clz(__rbit64(v411));
              unint64_t v58 = v406;
              unint64_t v323 = v405;
              unint64_t v324 = v404;
              int v391 = v1115;
              unsigned int v392 = v1107;
              unint64_t v398 = v407 + (v412 >> 3) + v393;
              if (v398 > v58) {
                goto LABEL_552;
              }
              goto LABEL_559;
            }
          }
          unsigned int v399 = (unsigned __int8 *)v1205 + v393 + v407;
          unsigned int v396 = (_DWORD *)(v1192 + v393 + v35 + v407);
          unint64_t v58 = v406;
          unint64_t v323 = v405;
          unint64_t v324 = v404;
          int v391 = v1115;
          unsigned int v392 = v1107;
          if ((unint64_t)v399 < v1331) {
            goto LABEL_541;
          }
        }
        if ((unint64_t)v399 >= v1330)
        {
          if ((unint64_t)v399 >= v15) {
            goto LABEL_551;
          }
LABEL_549:
          if (*(unsigned __int8 *)v396 == *v399) {
            ++v399;
          }
          goto LABEL_551;
        }
        if (*(unsigned __int16 *)v396 == *(unsigned __int16 *)v399)
        {
          v399 += 2;
          unsigned int v396 = (_DWORD *)((char *)v396 + 2);
        }
        if ((unint64_t)v399 < v15) {
          goto LABEL_549;
        }
LABEL_551:
        unsigned int v35 = v400;
        unint64_t v398 = v399 - v1334;
        if (v399 - v1334 <= v58) {
          goto LABEL_559;
        }
LABEL_552:
        if (v398 > v322 - v35) {
          unsigned int v322 = v35 + v398;
        }
        unsigned int v401 = (_DWORD *)(v27 + 8 * v26);
        *unsigned int v401 = v33 + 2 - v35;
        v401[1] = v398;
        LODWORD(v26) = v26 + 1;
        if (v398 > 0x1000 || &v1334[v398] == (unsigned __int8 *)v15)
        {
          unsigned int v1288 = v322;
          int v1316 = v26;
          unsigned int *v324 = 0;
          *unint64_t v323 = 0;
          long long v14 = v1334;
          goto LABEL_1402;
        }
        unint64_t v58 = v398;
LABEL_559:
        unsigned int v403 = (unsigned int *)(v1267 + 8 * (v35 & v391));
        if (*(unsigned __int8 *)(v394 + v398) < v1334[v398])
        {
          *unint64_t v323 = v35;
          if (v35 <= v392)
          {
            unint64_t v323 = (unsigned int *)&v1342;
            goto LABEL_424;
          }
          ++v403;
          unint64_t v390 = v398;
          unint64_t v323 = v403;
          BOOL v63 = v321-- != 0;
          if (!v63) {
            goto LABEL_424;
          }
          goto LABEL_532;
        }
        unsigned int *v324 = v35;
        if (v35 > v392)
        {
          unint64_t v389 = v398;
          unint64_t v324 = (unsigned int *)(v1267 + 8 * (v35 & v391));
          BOOL v63 = v321-- != 0;
          if (!v63) {
            goto LABEL_424;
          }
LABEL_532:
          unsigned int v35 = *v403;
          if (*v403 < v1310) {
            goto LABEL_424;
          }
          continue;
        }
        break;
      }
      unint64_t v324 = (unsigned int *)&v1342;
LABEL_424:
      unsigned int v1288 = v322;
      unsigned int *v324 = 0;
      *unint64_t v323 = 0;
      int v1316 = v26;
      if (!v321)
      {
        long long v14 = v1334;
        goto LABEL_1402;
      }
      long long v14 = v1334;
      unsigned int v325 = *(_DWORD *)(*(void *)(v1056 + 48) + 4
                                                 * ((-1640531535 * *(_DWORD *)v1334) >> -(char)v1048));
      if (v325 <= v1251) {
        goto LABEL_1402;
      }
      unint64_t v326 = 0;
      uint64_t v327 = v250;
      unint64_t v328 = 0;
      uint64_t v1188 = *(void *)(v1056 + 64);
      uint64_t v1191 = v327 + v1125;
      unsigned int v1176 = v33 + 2;
      int v1263 = v321 - 1;
      while (2)
      {
        unsigned int v1274 = v325;
        if (v328 >= v326) {
          uint64_t v10 = v326;
        }
        else {
          uint64_t v10 = v328;
        }
        uint64_t v329 = v325;
        uint64_t v330 = v1242 + v325;
        unint64_t v331 = v58;
        unint64_t v332 = ZSTD_count_2segments(&v14[v10], (char *)(v330 + v10), v15, v1305, v1290);
        unint64_t v333 = v332 + v10;
        if (v332 + v10 + v329 >= v1040) {
          uint64_t v334 = v1191 + v329;
        }
        else {
          uint64_t v334 = v330;
        }
        if (v333 <= v331)
        {
          unint64_t v58 = v331;
          long long v14 = v1334;
          unint64_t v15 = (unint64_t)v1335;
          uint64_t v7 = v1304;
          LODWORD(v10) = v1250;
          unsigned int v337 = v1274;
          if (v1274 <= v1230) {
            goto LABEL_1402;
          }
          goto LABEL_441;
        }
        unsigned int v335 = v1288;
        if (v333 > v1288 - (v1274 + v1125)) {
          unsigned int v335 = v1274 + v1125 + v333;
        }
        unsigned int v1288 = v335;
        int v336 = &v1336[2 * v1316];
        *int v336 = v1176 - (v1274 + v1125);
        v336[1] = v333;
        ++v1316;
        if (v333 <= 0x1000)
        {
          unsigned int v337 = v1274;
          long long v14 = v1334;
          unint64_t v15 = (unint64_t)v1335;
          unint64_t v58 = v332 + v10;
          uint64_t v7 = v1304;
          LODWORD(v10) = v1250;
          if (&v1334[v333] == v1335 || v1274 <= v1230) {
            goto LABEL_1402;
          }
LABEL_441:
          unsigned int v338 = *(unsigned __int8 *)(v334 + v333);
          unsigned int v339 = v14[v333];
          BOOL v63 = v338 >= v339;
          BOOL v340 = v338 < v339;
          if (v63) {
            unint64_t v326 = v333;
          }
          else {
            unint64_t v328 = v333;
          }
          if (!v1263) {
            goto LABEL_1402;
          }
          --v1263;
          unsigned int v325 = *(_DWORD *)(v1188 + 8 * (v337 & v1214) + 4 * v340);
          if (v325 <= v1251) {
            goto LABEL_1402;
          }
          continue;
        }
        break;
      }
      long long v14 = v1334;
      LODWORD(v15) = v1335;
      uint64_t v7 = v1304;
      LODWORD(v10) = v1250;
LABEL_1402:
      uint64_t v27 = (uint64_t)v1336;
      uint64_t v17 = v11 + 7;
      LODWORD(v26) = v1316;
      *(_DWORD *)(v7 + 36) = v1288 - 8;
LABEL_604:
      unsigned int v1338 = v26;
      unint64_t v418 = v14;
      ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1339, v27, &v1338, v14 - v1266, v15 - v14);
      LODWORD(v419) = v1338;
      if (v1338)
      {
        v11[4] = *a3;
        v11[5] = a3[1];
        v11[6] = a3[2];
        v11[2] = 0;
        v11[3] = v23;
        int v420 = *(_DWORD *)(v7 + 160);
        if (v420 != 1)
        {
          unint64_t v15 = (unint64_t)v1335;
          if (v23 < 0x40) {
            unsigned int v426 = ZSTD_LLcode_LL_Code[v23];
          }
          else {
            unsigned int v426 = 50 - __clz(v23);
          }
          uint64_t v427 = 4 * v426;
          int v428 = *(_DWORD *)(v7 + 148);
          int v429 = v428 + (*(unsigned int *)((char *)LL_bits + v427) << 8);
          unsigned int v430 = *(_DWORD **)(v7 + 88);
          LODWORD(v427) = *(_DWORD *)((char *)v430 + v427) + 1;
          unsigned int v431 = __clz(v427);
          unsigned int v422 = v429 - ((v427 << 8 >> (v431 ^ 0x1F)) + ((v431 ^ 0x1F) << 8));
          unsigned int *v11 = v422;
          uint64_t v423 = (v419 - 1);
          unsigned int v424 = *(_DWORD *)(v27 + 8 * v423 + 4);
          if (v424 <= v1190)
          {
            unsigned int v435 = *v430 + 1;
            unsigned int v436 = __clz(v435) ^ 0x1F;
            int v425 = v428 - ((v435 << 8 >> v436) + (v436 << 8));
            goto LABEL_616;
          }
LABEL_614:
          unsigned int v432 = 0;
          unsigned int v433 = *(_DWORD *)(v27 + 8 * v423);
          unint64_t v434 = (unint64_t)(v1335 - 32);
          goto LABEL_1308;
        }
        unsigned int v421 = __clz(v23 + 1);
        unsigned int v422 = ((v23 + 1) << 8 >> (v421 ^ 0x1F)) + ((v421 ^ 0x1F) << 8);
        unsigned int *v11 = v422;
        uint64_t v423 = (v419 - 1);
        unsigned int v424 = *(_DWORD *)(v27 + 8 * v423 + 4);
        unint64_t v15 = (unint64_t)v1335;
        if (v424 > v1190) {
          goto LABEL_614;
        }
        int v425 = 256;
LABEL_616:
        signed int v437 = v11 + 14;
        unint64_t v438 = v1061;
        do
        {
          *(v437 - 7) = 0x40000000;
          *signed int v437 = 0x40000000;
          v437 += 14;
          v438 -= 2;
        }
        while (v438);
        if (v1010 != v1061)
        {
          uint64_t v439 = v1005;
          signed int v440 = v1006;
          do
          {
            *signed int v440 = 0x40000000;
            v440 += 7;
            --v439;
          }
          while (v439);
        }
        uint64_t v441 = 0;
        unsigned int v442 = v425 + v422;
        if (v419 <= 1) {
          uint64_t v419 = 1;
        }
        else {
          uint64_t v419 = v419;
        }
        unsigned int v443 = v10;
        do
        {
          unint64_t v444 = (unsigned int *)(v27 + 8 * v441);
          unsigned int v445 = v444[1];
          if (v443 <= v445)
          {
            unsigned int v446 = *v444;
            uint64_t v447 = __clz(v446 + 1) ^ 0x1F;
            if (v420 == 1)
            {
              unsigned int v448 = (v443 << 8) - 512;
              do
              {
                unsigned int v449 = __clz(v443 - 2);
                uint64_t v450 = &v11[7 * v443];
                v450[2] = v443;
                v450[3] = v23;
                *uint64_t v450 = (v448 >> (v449 ^ 0x1F)) + (((v449 ^ 0x1F) + v447) << 8) + v442 + 4096;
                v450[1] = v446;
                ++v443;
                v448 += 256;
              }
              while (v443 <= v445);
            }
            else
            {
              uint64_t v452 = *(void *)(v7 + 96);
              uint64_t v451 = *(void *)(v7 + 104);
              int v453 = *(_DWORD *)(v7 + 156) + *(_DWORD *)(v7 + 152) + 51;
              do
              {
                unsigned int v461 = v443 - 3;
                if (v443 - 3 < 0x80) {
                  unsigned int v454 = ZSTD_MLcode_ML_Code[v461];
                }
                else {
                  unsigned int v454 = 67 - __clz(v461);
                }
                unsigned int v455 = *(_DWORD *)(v451 + 4 * v447) + 1;
                unsigned int v456 = __clz(v455);
                uint64_t v457 = 4 * v454;
                int v458 = *(unsigned int *)((char *)ML_bits + v457);
                LODWORD(v457) = *(_DWORD *)(v452 + v457) + 1;
                unsigned int v459 = __clz(v457) ^ 0x1F;
                LODWORD(v457) = v442
                              + v453
                              - (v455 << 8 >> (v456 ^ 0x1F))
                              - (v457 << 8 >> v459)
                              + ((v447 + v458 - (v456 ^ 0x1F) - v459) << 8);
                uint64_t v460 = &v11[7 * v443];
                v460[2] = v443;
                v460[3] = v23;
                *uint64_t v460 = v457;
                v460[1] = v446;
                ++v443;
              }
              while (v443 <= v445);
            }
          }
          ++v441;
        }
        while (v441 != v419);
        LODWORD(v462) = v443 - 1;
        if (v443 == 1)
        {
LABEL_1304:
          unint64_t v932 = &v11[7 * v462];
          unsigned int v433 = v932[1];
          unsigned int v1083 = *v932;
          unsigned int v424 = v932[2];
          unsigned int v23 = v932[3];
          uint64_t v1343 = *((void *)v932 + 2);
          unsigned int v1344 = v932[6];
          if (v462 >= v23 + v424) {
            unsigned int v432 = v462 - (v23 + v424);
          }
          else {
            unsigned int v432 = 0;
          }
          unint64_t v434 = (unint64_t)(v1335 - 32);
          if (!v424) {
            goto LABEL_1388;
          }
          goto LABEL_1308;
        }
        int v463 = v1334;
        uint64_t v1060 = v1334 + 8;
        int v464 = v1334 + 1;
        unsigned int v465 = 1;
        while (2)
        {
          unsigned int v466 = v465 - 1;
          uint64_t v467 = &v11[7 * v465 - 7];
          if (v467[2]) {
            unsigned int v468 = 1u;
          }
          else {
            unsigned int v468 = v11[7 * v466 + 3] + 1;
          }
          uint64_t v469 = v465;
          uint64_t v470 = &v463[v465];
          unsigned int v471 = *v467;
          int v472 = *(_DWORD *)(v7 + 160);
          if (*(_DWORD *)(v7 + 176) == 2)
          {
            unsigned int v473 = v471 + 2048;
            if (v472 != 1)
            {
              if (v468 >= 0x40) {
                goto LABEL_647;
              }
LABEL_653:
              unsigned int v474 = ZSTD_LLcode_LL_Code[v468];
              unsigned int v475 = v468 - 1;
              if (v468 - 1 >= 0x40) {
                goto LABEL_654;
              }
LABEL_648:
              unsigned int v476 = ZSTD_LLcode_LL_Code[v475];
              goto LABEL_655;
            }
LABEL_651:
            unsigned int v477 = __clz(v468 + 1);
            int v478 = ((v468 + 1) << 8 >> (v477 ^ 0x1F)) + ((v477 ^ 0x1F) << 8);
            unsigned int v479 = __clz(v468) ^ 0x1F;
            int v480 = -((v468 << 8 >> v479) + (v479 << 8));
          }
          else
          {
            if (v472 == 1)
            {
              unsigned int v473 = v471 + 1536;
              goto LABEL_651;
            }
            unsigned int v481 = *(_DWORD *)(*(void *)(v7 + 80) + 4 * *(v470 - 1)) + 1;
            unsigned int v482 = __clz(v481);
            unsigned int v473 = *(_DWORD *)(v7 + 144) - ((v481 << 8 >> (v482 ^ 0x1F)) + ((v482 ^ 0x1F) << 8)) + v471;
            if (v468 < 0x40) {
              goto LABEL_653;
            }
LABEL_647:
            unsigned int v474 = 50 - __clz(v468);
            unsigned int v475 = v468 - 1;
            if (v468 - 1 < 0x40) {
              goto LABEL_648;
            }
LABEL_654:
            unsigned int v476 = 50 - __clz(v475);
LABEL_655:
            uint64_t v483 = 4 * v474;
            int v484 = *(unsigned int *)((char *)LL_bits + v483);
            int v485 = *(_DWORD *)(v7 + 148);
            uint64_t v486 = *(void *)(v7 + 88);
            LODWORD(v483) = *(_DWORD *)(v486 + v483) + 1;
            unsigned int v487 = __clz(v483) ^ 0x1F;
            int v478 = v485 - (v483 << 8 >> v487) + ((v484 - v487) << 8);
            uint64_t v488 = 4 * v476;
            int v489 = *(unsigned int *)((char *)LL_bits + v488);
            LODWORD(v488) = *(_DWORD *)(v486 + v488) + 1;
            LODWORD(v486) = __clz(v488) ^ 0x1F;
            int v480 = (v488 << 8 >> v486) - v485 + ((v486 - v489) << 8);
          }
          signed int v490 = v473 + v478 + v480;
          unsigned int v491 = &v11[7 * v469];
          signed int v494 = *v491;
          unsigned int v492 = v491 + 2;
          int v493 = v494;
          if (v490 <= v494)
          {
            uint64_t v501 = &v11[7 * v469];
            v501[1] = 0;
            v501[2] = 0;
            v501[3] = v468;
            *uint64_t v501 = v490;
            int v493 = v490;
            int v463 = v1334;
LABEL_661:
            uint64_t v502 = 0;
            uint64_t v503 = &v11[7 * v469];
            unint64_t v504 = &v11[7 * v466];
            *((void *)v503 + 2) = *((void *)v504 + 2);
            v503[6] = v504[6];
            int v505 = 1;
            if ((unint64_t)v470 <= v1303) {
              goto LABEL_675;
            }
LABEL_640:
            unsigned int v465 = v469 + 1;
            ++v464;
            if ((int)v469 + 1 > v462) {
              goto LABEL_1304;
            }
            continue;
          }
          break;
        }
        int v463 = v1334;
        if (!*v492) {
          goto LABEL_661;
        }
        uint64_t v495 = &v11[7 * (v469 - *v492) + 4];
        unsigned int v496 = v11[7 * v469 + 1];
        if (v496 < 3)
        {
          if (v11[7 * v469 + 3]) {
            unsigned int v506 = v11[7 * v469 + 1];
          }
          else {
            unsigned int v506 = v496 + 1;
          }
          if (v506)
          {
            if (v506 == 3)
            {
              unint64_t v498 = *v495;
              unsigned int v500 = v498 - 1;
            }
            else
            {
              unsigned int v500 = v495[v506];
              unint64_t v498 = *v495;
            }
            BOOL v949 = v506 > 1;
            uint64_t v508 = 2;
            if (v949) {
              uint64_t v508 = 1;
            }
            uint64_t v497 = &v495[v508];
            int v463 = v1334;
          }
          else
          {
            unint64_t v507 = *(void *)v495;
            uint64_t v497 = &v11[7 * (v469 - *v492) + 6];
            unsigned int v500 = v507;
            unint64_t v498 = HIDWORD(v507);
          }
        }
        else
        {
          unsigned int v499 = *v495;
          uint64_t v497 = &v11[7 * (v469 - *v492) + 5];
          unint64_t v498 = v499;
          unsigned int v500 = v496 - 2;
        }
        int v505 = 0;
        unsigned int v509 = *v497;
        unint64_t v510 = v500 | (v498 << 32);
        unsigned int v511 = &v11[7 * v469];
        *((void *)v511 + 2) = v510;
        v511[6] = v509;
        uint64_t v502 = 1;
        if ((unint64_t)v470 > v1303) {
          goto LABEL_640;
        }
LABEL_675:
        if (v469 == v462) {
          goto LABEL_1304;
        }
        int v1289 = v464;
        if (v505)
        {
          unsigned int v23 = v11[7 * v469 + 3];
          if (*(_DWORD *)(v7 + 160) != 1) {
            goto LABEL_678;
          }
LABEL_680:
          int v514 = 256;
        }
        else
        {
          unsigned int v23 = 0;
          if (*(_DWORD *)(v7 + 160) == 1) {
            goto LABEL_680;
          }
LABEL_678:
          unsigned int v512 = **(_DWORD **)(v7 + 88) + 1;
          unsigned int v513 = __clz(v512) ^ 0x1F;
          int v514 = *(_DWORD *)(v7 + 148) - ((v512 << 8 >> v513) + (v513 << 8));
        }
        int v1255 = v514;
        int v1264 = v493;
        unsigned int v1189 = v492;
        unsigned int v1338 = 0;
        uint64_t v515 = *(void *)(v7 + 8);
        uint64_t v516 = *(unsigned int *)(v7 + 36);
        if (v515 + v516 > (unint64_t)v470)
        {
          LODWORD(v517) = 0;
          LODWORD(v10) = v1250;
          goto LABEL_1253;
        }
        v1309 = v470;
        uint64_t v1319 = v502;
        int v518 = *(_DWORD *)(v7 + 208);
        uint64_t v519 = v7;
        for (unsigned int j = v470 - v515; v516 < j; LODWORD(v516) = v521 + v516)
        {
          int v521 = ZSTD_insertBt1(v519, (void *)(v515 + v516), v15, v518, 0);
          unint64_t v15 = (unint64_t)v1335;
        }
        unsigned int v522 = &v11[7 * v469 + 4];
        *(_DWORD *)(v519 + 36) = j;
        uint64_t v7 = v519;
        if ((v518 - 6) < 2)
        {
          uint64_t v517 = 0;
          if (*(_DWORD *)(v519 + 212) >= 0xFFFu) {
            unsigned int v565 = 4095;
          }
          else {
            unsigned int v565 = *(_DWORD *)(v519 + 212);
          }
          uint64_t v566 = *(void *)(v519 + 8);
          uint64_t v470 = v1309;
          unsigned int v567 = v1309 - v566;
          unsigned int v568 = v1309 + 4;
          int v1028 = *(_DWORD *)(v519 + 204);
          uint64_t v1032 = *(void *)(v519 + 48);
          unint64_t v1024 = (0xCF1BBCDCBF9B0000 * *(void *)v1309) >> -(char)*(_DWORD *)(v519 + 200);
          unsigned int v1035 = *(_DWORD *)(v1032 + 4 * v1024);
          int v569 = -1 << (*(_DWORD *)(v519 + 196) - 1);
          uint64_t v570 = *(unsigned int *)(v519 + 24);
          uint64_t v1053 = v566;
          v1247 = (void *)(v566 + v570);
          int v1068 = ~v569;
          unsigned int v571 = v1309 - v566 + v569 + 1;
          if (v567 < ~v569) {
            unsigned int v571 = 0;
          }
          unsigned int v1194 = v571;
          unsigned int v572 = 1 << *(_DWORD *)(v519 + 192);
          if (v567 - *(_DWORD *)(v519 + 28) > v572 && *(_DWORD *)(v519 + 32) == 0) {
            unsigned int v574 = v567 - v572;
          }
          else {
            unsigned int v574 = *(_DWORD *)(v519 + 28);
          }
          if (v574 <= 1) {
            int v575 = 1;
          }
          else {
            int v575 = v574;
          }
          unsigned int v1222 = v575;
          uint64_t v1073 = *(void *)(v519 + 64);
          unsigned int v1045 = (unsigned int *)(v1073 + 8 * (v567 & ~v569));
          unsigned int v1207 = v567 + 9;
          uint64_t v576 = *(void *)(v519 + 184);
          uint64_t v577 = *(void *)(v576 + 8);
          v1238 = *(char **)v576;
          uint64_t v578 = v574 - (*(void *)v576 - v577);
          int v1016 = *(_DWORD *)(v576 + 200);
          uint64_t v1020 = v576;
          unsigned int v579 = *(_DWORD *)(v576 + 28);
          unsigned int v580 = ~(-1 << (*(_DWORD *)(v576 + 196) - 1));
          unsigned int v581 = *(void *)v576 - v577 - v579;
          uint64_t v1012 = *(void *)v576 - v577;
          unsigned int v582 = *(void *)v576 - v577 + (-1 << (*(_DWORD *)(v576 + 196) - 1)) + 1;
          unsigned int v1088 = v580;
          if (v581 <= v580) {
            unsigned int v583 = v579;
          }
          else {
            unsigned int v583 = v582;
          }
          unsigned int v1096 = v583;
          int v1342 = 0;
          unsigned int v1112 = v579;
          unsigned int v584 = v567 - v579 - v578;
          uint64_t v585 = v1319;
          uint64_t v586 = v1319 << 63 >> 63;
          if (v1319) {
            unint64_t v587 = 4;
          }
          else {
            unint64_t v587 = 3;
          }
          unsigned int v588 = v567 - v570;
          uint64_t v1104 = v577;
          uint64_t v1080 = v574 - (v1238 - v577);
          uint64_t v589 = v577 - v578;
          unint64_t v590 = v1183;
          unint64_t v591 = (unint64_t)(v1335 - 7);
          unsigned int v1178 = v567;
          unsigned int v1166 = v565;
          unsigned int v1155 = v574;
          unint64_t v1138 = v587;
          unsigned int v1120 = v567 - v570;
          unsigned int v1129 = v584;
          while (2)
          {
            if (v585 == 3)
            {
              unsigned int v592 = *v522 - 1;
              unsigned int v593 = v567 - v592;
              unsigned int v594 = *v522 - 2;
              if (v594 >= v588) {
                goto LABEL_775;
              }
LABEL_784:
              if (v593 < v574 || *(_DWORD *)v470 != *(_DWORD *)&v470[-v592]) {
                goto LABEL_772;
              }
              uint64_t v603 = (void *)((char *)v568 - v592);
              if (v591 > (unint64_t)v568)
              {
                uint64_t v604 = v568;
                unint64_t v605 = *v568 ^ *v603;
                if (v605)
                {
                  unsigned int v600 = (__clz(__rbit64(v605)) >> 3) + 4;
                  unint64_t v601 = v600;
                  if (v590 >= v600) {
                    goto LABEL_772;
                  }
                  goto LABEL_805;
                }
                do
                {
                  ++v603;
                  if ((unint64_t)++v604 >= v591) {
                    goto LABEL_797;
                  }
                  unint64_t v606 = *v604 ^ *v603;
                }
                while (!v606);
                uint64_t v604 = (void *)((char *)v604 + (__clz(__rbit64(v606)) >> 3));
LABEL_804:
                unsigned int v600 = v604 - v568 + 4;
                unint64_t v601 = v600;
                if (v590 >= v600) {
                  goto LABEL_772;
                }
                goto LABEL_805;
              }
              uint64_t v604 = v568;
LABEL_797:
              if ((unint64_t)v604 >= v1331)
              {
                if ((unint64_t)v604 < v1330) {
                  goto LABEL_809;
                }
LABEL_801:
                if ((unint64_t)v604 >= v15) {
                  goto LABEL_804;
                }
              }
              else
              {
                if (*(_DWORD *)v603 == *(_DWORD *)v604)
                {
                  uint64_t v604 = (void *)((char *)v604 + 4);
                  uint64_t v603 = (void *)((char *)v603 + 4);
                }
                if ((unint64_t)v604 >= v1330) {
                  goto LABEL_801;
                }
LABEL_809:
                if (*(unsigned __int16 *)v603 == *(unsigned __int16 *)v604)
                {
                  uint64_t v604 = (void *)((char *)v604 + 2);
                  uint64_t v603 = (void *)((char *)v603 + 2);
                }
                if ((unint64_t)v604 >= v15) {
                  goto LABEL_804;
                }
              }
              if (*(unsigned __int8 *)v603 == *(unsigned __int8 *)v604) {
                LODWORD(v604) = v604 + 1;
              }
              goto LABEL_804;
            }
            unsigned int v592 = v522[v585];
            unsigned int v593 = v567 - v592;
            unsigned int v594 = v592 - 1;
            if (v592 - 1 < v588) {
              goto LABEL_784;
            }
LABEL_775:
            if (v594 < v584 && v570 + ~v593 >= 3)
            {
              uint64_t v596 = v589 + v593;
              if (*(_DWORD *)v470 == *(_DWORD *)v596)
              {
                unint64_t v1295 = v590;
                unsigned int v1321 = v517;
                uint64_t v597 = v570;
                uint64_t v598 = v586;
                int v599 = ZSTD_count_2segments(v568, (char *)(v596 + 4), v15, v1238, v1247);
                unint64_t v587 = v1138;
                unsigned int v568 = v1309 + 4;
                uint64_t v586 = v598;
                uint64_t v570 = v597;
                unsigned int v565 = v1166;
                unsigned int v567 = v1178;
                unsigned int v522 = &v11[7 * v469 + 4];
                uint64_t v517 = v1321;
                unsigned int v574 = v1155;
                unint64_t v590 = v1295;
                uint64_t v470 = v1309;
                unint64_t v591 = (unint64_t)(v1335 - 7);
                unint64_t v15 = (unint64_t)v1335;
                unsigned int v600 = v599 + 4;
                unsigned int v588 = v1120;
                unsigned int v584 = v1129;
                unint64_t v601 = v600;
                if (v1295 < v600)
                {
LABEL_805:
                  unint64_t v607 = &v1336[2 * v517];
                  *unint64_t v607 = v585 + v586;
                  v607[1] = v600;
                  uint64_t v517 = (v517 + 1);
                  if (v600 > v565) {
                    goto LABEL_1251;
                  }
                  unint64_t v590 = v601;
                  if (&v470[v601] == (unsigned __int8 *)v15) {
                    goto LABEL_1251;
                  }
                }
              }
            }
LABEL_772:
            if (++v585 < v587) {
              continue;
            }
            break;
          }
          *(_DWORD *)(v1032 + 4 * v1024) = v567;
          int v608 = ~(-1 << v1028);
          unsigned int v609 = v1035;
          if (v1035 < v1222)
          {
            uint64_t v610 = v1304;
            unsigned int v611 = v1207;
            unint64_t v612 = v1045;
            uint64_t v613 = v1053;
            unsigned int v614 = v1045 + 1;
            goto LABEL_815;
          }
          unint64_t v722 = 0;
          unint64_t v723 = 0;
          unsigned int v1325 = v567 + 2;
          uint64_t v613 = v1053;
          v1299 = (char *)v1060 + v469;
          uint64_t v1276 = v1053 + 8;
          uint64_t v610 = v1304;
          unsigned int v611 = v1207;
          unsigned int v614 = v1045 + 1;
          unint64_t v612 = v1045;
          uint64_t v724 = v1073;
          int v725 = v1068;
          while (2)
          {
            if (v723 >= v722) {
              unint64_t v726 = v722;
            }
            else {
              unint64_t v726 = v723;
            }
            unsigned int v727 = v609;
            uint64_t v728 = v609;
            uint64_t v729 = v1053 + v609;
            uint64_t v730 = &v470[v726];
            char v731 = (void *)(v729 + v726);
            if (v591 <= (unint64_t)&v470[v726])
            {
              unint64_t v734 = (char *)&v470[v726];
              if ((unint64_t)v730 >= v1331) {
                goto LABEL_983;
              }
            }
            else
            {
              unint64_t v732 = *(void *)v730 ^ *v731;
              if (v732)
              {
                unint64_t v733 = (__clz(__rbit64(v732)) >> 3) + v726;
                if (v733 <= v590) {
                  goto LABEL_999;
                }
LABEL_992:
                if (v733 > v611 - v727) {
                  unsigned int v611 = v727 + v733;
                }
                unint64_t v735 = &v1336[2 * v517];
                *unint64_t v735 = v1325 - v727;
                v735[1] = v733;
                uint64_t v517 = (v517 + 1);
                if (v733 > 0x1000 || &v470[v733] == (unsigned __int8 *)v15) {
                  goto LABEL_1216;
                }
                unint64_t v590 = v733;
LABEL_999:
                uint64_t v737 = (unsigned int *)(v724 + 8 * (v727 & v725));
                if (*(unsigned __int8 *)(v729 + v733) >= v470[v733])
                {
                  *unsigned int v614 = v727;
                  if (v727 <= v1194)
                  {
                    unsigned int v614 = (unsigned int *)&v1342;
LABEL_815:
                    unsigned int v1208 = v611;
                    *unsigned int v614 = 0;
                    *unint64_t v612 = 0;
                    int v1322 = v517;
                    if (!v608) {
                      goto LABEL_1250;
                    }
                    unsigned int v615 = *(_DWORD *)(*(void *)(v1020 + 48)
                                     + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v470) >> -(char)v1016));
                    if (v615 <= v1112) {
                      goto LABEL_1250;
                    }
                    unint64_t v616 = 0;
                    unint64_t v617 = 0;
                    uint64_t v1146 = *(void *)(v1020 + 64);
                    uint64_t v1156 = v613 + v1080;
                    unsigned int v1179 = v1178 + 2;
                    int v1195 = v608 - 1;
                    while (1)
                    {
                      unsigned int v1275 = v615;
                      unint64_t v1296 = v590;
                      unint64_t v1223 = v616;
                      if (v617 >= v616) {
                        unint64_t v618 = v616;
                      }
                      else {
                        unint64_t v618 = v617;
                      }
                      uint64_t v619 = v615;
                      uint64_t v620 = v1104 + v615;
                      unint64_t v621 = ZSTD_count_2segments(&v470[v618], (char *)(v620 + v618), v15, v1238, v1247);
                      unint64_t v622 = v621 + v618;
                      unint64_t v590 = v1296;
                      if (v621 + v618 + v619 >= v1012) {
                        uint64_t v623 = v1156 + v619;
                      }
                      else {
                        uint64_t v623 = v620;
                      }
                      if (v622 <= v1296)
                      {
                        unint64_t v15 = (unint64_t)v1335;
                        uint64_t v610 = v1304;
                        uint64_t v470 = v1309;
                        unint64_t v616 = v1223;
                        unsigned int v626 = v1275;
                        if (v1275 <= v1096) {
                          goto LABEL_1250;
                        }
                      }
                      else
                      {
                        unsigned int v624 = v1208;
                        if (v622 > v1208 - (v1275 + v1080)) {
                          unsigned int v624 = v1275 + v1080 + v622;
                        }
                        unsigned int v1208 = v624;
                        int v625 = &v1336[2 * v1322];
                        *int v625 = v1179 - (v1275 + v1080);
                        v625[1] = v622;
                        ++v1322;
                        if (v622 > 0x1000)
                        {
LABEL_1249:
                          LODWORD(v15) = v1335;
                          uint64_t v610 = v1304;
                          LODWORD(v470) = v1309;
                          goto LABEL_1250;
                        }
                        unsigned int v626 = v1275;
                        uint64_t v610 = v1304;
                        uint64_t v470 = v1309;
                        unint64_t v590 = v621 + v618;
                        unint64_t v15 = (unint64_t)v1335;
                        unint64_t v616 = v1223;
                        if (&v1309[v622] == v1335 || v1275 <= v1096)
                        {
LABEL_1250:
                          *(_DWORD *)(v610 + 36) = v1208 - 8;
                          LODWORD(v517) = v1322;
LABEL_1251:
                          uint64_t v7 = v1304;
                          goto LABEL_1252;
                        }
                      }
                      unsigned int v627 = *(unsigned __int8 *)(v623 + v622);
                      unsigned int v628 = v470[v622];
                      BOOL v63 = v627 >= v628;
                      BOOL v629 = v627 < v628;
                      if (v63) {
                        unint64_t v616 = v621 + v618;
                      }
                      else {
                        unint64_t v617 = v621 + v618;
                      }
                      if (v1195)
                      {
                        --v1195;
                        unsigned int v615 = *(_DWORD *)(v1146 + 8 * (v626 & v1088) + 4 * v629);
                        if (v615 > v1112) {
                          continue;
                        }
                      }
                      goto LABEL_1250;
                    }
                  }
                  unint64_t v722 = v733;
                  unsigned int v614 = (unsigned int *)(v724 + 8 * (v727 & v725));
                  BOOL v63 = v608-- != 0;
                  if (!v63) {
                    goto LABEL_815;
                  }
                }
                else
                {
                  *unint64_t v612 = v727;
                  if (v727 <= v1194)
                  {
                    unint64_t v612 = (unsigned int *)&v1342;
                    goto LABEL_815;
                  }
                  ++v737;
                  unint64_t v723 = v733;
                  unint64_t v612 = v737;
                  BOOL v63 = v608-- != 0;
                  if (!v63) {
                    goto LABEL_815;
                  }
                }
                unsigned int v609 = *v737;
                if (v609 < v1222) {
                  goto LABEL_815;
                }
                continue;
              }
              unint64_t v738 = v614;
              unint64_t v739 = v612;
              unint64_t v740 = v590;
              uint64_t v741 = v517;
              uint64_t v742 = 0;
              v743 = &v1299[v726];
              while (1)
              {
                unsigned int v744 = &v743[v742];
                if ((unint64_t)&v743[v742] >= v591) {
                  break;
                }
                uint64_t v745 = *(void *)(v1276 + v726 + v728 + v742);
                v742 += 8;
                unint64_t v746 = *(void *)v744 ^ v745;
                if (v746)
                {
                  unint64_t v747 = __clz(__rbit64(v746));
                  uint64_t v517 = v741;
                  unint64_t v590 = v740;
                  unint64_t v612 = v739;
                  unsigned int v614 = v738;
                  uint64_t v724 = v1073;
                  int v725 = v1068;
                  unint64_t v733 = v742 + (v747 >> 3) + v726;
                  if (v733 <= v590) {
                    goto LABEL_999;
                  }
                  goto LABEL_992;
                }
              }
              unint64_t v734 = &v1299[v726 + v742];
              char v731 = (void *)(v1276 + v726 + v728 + v742);
              uint64_t v517 = v741;
              unint64_t v590 = v740;
              unint64_t v612 = v739;
              unsigned int v614 = v738;
              uint64_t v724 = v1073;
              int v725 = v1068;
              if ((unint64_t)v734 >= v1331)
              {
LABEL_983:
                if ((unint64_t)v734 >= v1330)
                {
                  if ((unint64_t)v734 >= v15) {
                    goto LABEL_991;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v731 == *(unsigned __int16 *)v734)
                  {
                    v734 += 2;
                    char v731 = (void *)((char *)v731 + 2);
                  }
                  if ((unint64_t)v734 >= v15)
                  {
LABEL_991:
                    unint64_t v733 = v734 - (char *)v470;
                    if (v734 - (char *)v470 <= v590) {
                      goto LABEL_999;
                    }
                    goto LABEL_992;
                  }
                }
                if (*(unsigned __int8 *)v731 == *v734) {
                  ++v734;
                }
                goto LABEL_991;
              }
            }
            break;
          }
          if (*(_DWORD *)v731 == *(_DWORD *)v734)
          {
            v734 += 4;
            char v731 = (void *)((char *)v731 + 4);
          }
          goto LABEL_983;
        }
        unint64_t v523 = (unint64_t)(v1335 - 7);
        uint64_t v470 = v1309;
        if (v518 == 5)
        {
          uint64_t v517 = 0;
          if (*(_DWORD *)(v519 + 212) >= 0xFFFu) {
            unsigned int v630 = 4095;
          }
          else {
            unsigned int v630 = *(_DWORD *)(v519 + 212);
          }
          uint64_t v631 = *(void *)(v519 + 8);
          unsigned int v632 = v1309 - v631;
          unsigned int v633 = v1309 + 4;
          int v1025 = *(_DWORD *)(v519 + 204);
          uint64_t v1029 = *(void *)(v519 + 48);
          unint64_t v1021 = (0xCF1BBCDCBB000000 * *(void *)v1309) >> -(char)*(_DWORD *)(v519 + 200);
          unsigned int v634 = *(_DWORD *)(v1029 + 4 * v1021);
          int v635 = -1 << (*(_DWORD *)(v519 + 196) - 1);
          uint64_t v636 = *(unsigned int *)(v519 + 24);
          uint64_t v1054 = v631;
          v1297 = (void *)(v631 + v636);
          int v1196 = ~v635;
          unsigned int v637 = v1309 - v631 + v635 + 1;
          if (v632 < ~v635) {
            unsigned int v637 = 0;
          }
          unsigned int v1180 = v637;
          unsigned int v638 = 1 << *(_DWORD *)(v519 + 192);
          if (v632 - *(_DWORD *)(v519 + 28) > v638 && *(_DWORD *)(v519 + 32) == 0) {
            unsigned int v640 = v632 - v638;
          }
          else {
            unsigned int v640 = *(_DWORD *)(v519 + 28);
          }
          if (v640 <= 1) {
            int v641 = 1;
          }
          else {
            int v641 = v640;
          }
          unsigned int v1239 = v641;
          uint64_t v1036 = *(void *)(v519 + 64) + 8 * (v632 & ~v635);
          uint64_t v1039 = *(void *)(v519 + 64);
          unsigned int v1224 = v632 + 9;
          uint64_t v642 = *(void *)(v519 + 184);
          uint64_t v643 = *(void *)(v642 + 8);
          v1248 = *(char **)v642;
          uint64_t v644 = v640 - (*(void *)v642 - v643);
          int v1013 = *(_DWORD *)(v642 + 200);
          uint64_t v1017 = v642;
          unsigned int v645 = *(_DWORD *)(v642 + 28);
          unsigned int v646 = ~(-1 << (*(_DWORD *)(v642 + 196) - 1));
          unsigned int v647 = *(void *)v642 - v643 - v645;
          uint64_t v1008 = *(void *)v642 - v643;
          unsigned int v648 = *(void *)v642 - v643 + (-1 << (*(_DWORD *)(v642 + 196) - 1)) + 1;
          unsigned int v1069 = v646;
          if (v647 <= v646) {
            unsigned int v649 = v645;
          }
          else {
            unsigned int v649 = v648;
          }
          unsigned int v1074 = v649;
          int v1342 = 0;
          unsigned int v1089 = v645;
          unsigned int v650 = v632 - v645 - v644;
          uint64_t v651 = v1319;
          uint64_t v652 = v1319 << 63 >> 63;
          if (v1319) {
            unint64_t v653 = 4;
          }
          else {
            unint64_t v653 = 3;
          }
          unsigned int v654 = v632 - v636;
          uint64_t v1081 = v643;
          uint64_t v1046 = v640 - (v1248 - v643);
          uint64_t v655 = v643 - v644;
          unint64_t v656 = v1183;
          unsigned int v1167 = v632;
          unsigned int v1157 = v634;
          int v1147 = v636;
          unsigned int v1139 = v640;
          unsigned int v1121 = v630;
          unsigned int v1130 = v650;
          unint64_t v1113 = v653;
          unsigned int v1105 = v632 - v636;
          uint64_t v1097 = v643 - v644;
          while (1)
          {
            if (v651 == 3)
            {
              unsigned int v657 = *v522 - 1;
              unsigned int v658 = v632 - v657;
              unsigned int v659 = *v522 - 2;
              if (v659 < v654) {
                goto LABEL_871;
              }
            }
            else
            {
              unsigned int v657 = v522[v651];
              unsigned int v658 = v632 - v657;
              unsigned int v659 = v657 - 1;
              if (v657 - 1 < v654)
              {
LABEL_871:
                if (v658 < v640 || *(_DWORD *)v470 != *(_DWORD *)&v470[-v657]) {
                  goto LABEL_859;
                }
                int v668 = (void *)((char *)v633 - v657);
                if (v523 > (unint64_t)v633)
                {
                  unint64_t v669 = v633;
                  unint64_t v670 = *v633 ^ *v668;
                  if (v670)
                  {
                    unsigned int v665 = (__clz(__rbit64(v670)) >> 3) + 4;
                    unint64_t v666 = v665;
                    if (v656 < v665) {
                      goto LABEL_892;
                    }
                    goto LABEL_859;
                  }
                  do
                  {
                    ++v668;
                    if ((unint64_t)++v669 >= v523) {
                      goto LABEL_884;
                    }
                    unint64_t v671 = *v669 ^ *v668;
                  }
                  while (!v671);
                  unint64_t v669 = (void *)((char *)v669 + (__clz(__rbit64(v671)) >> 3));
                  goto LABEL_891;
                }
                unint64_t v669 = v633;
LABEL_884:
                if ((unint64_t)v669 >= v1331)
                {
                  if ((unint64_t)v669 >= v1330) {
                    goto LABEL_888;
                  }
                }
                else
                {
                  if (*(_DWORD *)v668 == *(_DWORD *)v669)
                  {
                    unint64_t v669 = (void *)((char *)v669 + 4);
                    int v668 = (void *)((char *)v668 + 4);
                  }
                  if ((unint64_t)v669 >= v1330)
                  {
LABEL_888:
                    if ((unint64_t)v669 < v15) {
                      goto LABEL_889;
                    }
                    goto LABEL_891;
                  }
                }
                if (*(unsigned __int16 *)v668 == *(unsigned __int16 *)v669)
                {
                  unint64_t v669 = (void *)((char *)v669 + 2);
                  int v668 = (void *)((char *)v668 + 2);
                }
                if ((unint64_t)v669 < v15)
                {
LABEL_889:
                  if (*(unsigned __int8 *)v668 == *(unsigned __int8 *)v669) {
                    LODWORD(v669) = v669 + 1;
                  }
                }
LABEL_891:
                unsigned int v665 = v669 - v633 + 4;
                unint64_t v666 = v665;
                if (v656 < v665) {
                  goto LABEL_892;
                }
                goto LABEL_859;
              }
            }
            if (v659 < v650 && v636 + ~v658 >= 3)
            {
              uint64_t v661 = v655 + v658;
              if (*(_DWORD *)v470 == *(_DWORD *)v661)
              {
                uint64_t v662 = v633;
                unsigned int v1323 = v517;
                unint64_t v1209 = v656;
                uint64_t v663 = v652;
                int v664 = ZSTD_count_2segments(v633, (char *)(v661 + 4), v15, v1248, v1297);
                unsigned int v654 = v1105;
                unint64_t v653 = v1113;
                uint64_t v652 = v663;
                unsigned int v630 = v1121;
                unsigned int v650 = v1130;
                unsigned int v640 = v1139;
                LODWORD(v636) = v1147;
                unsigned int v634 = v1157;
                unint64_t v656 = v1209;
                unsigned int v522 = &v11[7 * v469 + 4];
                uint64_t v517 = v1323;
                unsigned int v632 = v1167;
                uint64_t v470 = v1309;
                unint64_t v523 = (unint64_t)(v1335 - 7);
                unint64_t v15 = (unint64_t)v1335;
                unsigned int v665 = v664 + 4;
                unsigned int v633 = v662;
                uint64_t v655 = v1097;
                unint64_t v666 = v665;
                if (v1209 < v665)
                {
LABEL_892:
                  unint64_t v672 = &v1336[2 * v517];
                  _DWORD *v672 = v651 + v652;
                  v672[1] = v665;
                  uint64_t v517 = (v517 + 1);
                  if (v665 > v630) {
                    goto LABEL_1252;
                  }
                  unint64_t v656 = v666;
                  if (&v470[v666] == (unsigned __int8 *)v15) {
                    goto LABEL_1252;
                  }
                }
              }
            }
LABEL_859:
            if (++v651 >= v653)
            {
              *(_DWORD *)(v1029 + 4 * v1021) = v632;
              int v748 = ~(-1 << v1025);
              if (v634 < v1239)
              {
                unsigned int v749 = v1224;
                uint64_t v750 = v1054;
                unint64_t v752 = (unsigned int *)(v1036 + 4);
                int v751 = (int *)v1036;
LABEL_1015:
                unsigned int v1226 = v749;
                *unint64_t v752 = 0;
                *int v751 = 0;
                int v1326 = v517;
                if (v748)
                {
                  unsigned int v753 = *(_DWORD *)(*(void *)(v1017 + 48)
                                   + 4 * ((0xCF1BBCDCBB000000 * *(void *)v470) >> -(char)v1013));
                  if (v753 > v1089)
                  {
                    unint64_t v754 = 0;
                    unint64_t v755 = 0;
                    uint64_t v1148 = *(void *)(v1017 + 64);
                    uint64_t v1159 = v750 + v1046;
                    unsigned int v1169 = v632 + 2;
                    int v1198 = v748 - 1;
                    while (1)
                    {
                      unsigned int v1277 = v753;
                      unint64_t v1241 = v754;
                      unint64_t v1211 = v755;
                      if (v755 >= v754) {
                        unint64_t v756 = v754;
                      }
                      else {
                        unint64_t v756 = v755;
                      }
                      uint64_t v757 = v753;
                      uint64_t v758 = v1081 + v753;
                      unint64_t v759 = v656;
                      unint64_t v760 = ZSTD_count_2segments(&v470[v756], (char *)(v758 + v756), v15, v1248, v1297) + v756;
                      if (v760 + v757 >= v1008) {
                        uint64_t v761 = v1159 + v757;
                      }
                      else {
                        uint64_t v761 = v758;
                      }
                      if (v760 <= v759)
                      {
                        unint64_t v656 = v759;
                        unint64_t v15 = (unint64_t)v1335;
                        uint64_t v7 = v1304;
                        uint64_t v470 = v1309;
                        unint64_t v754 = v1241;
                        unint64_t v755 = v1211;
                        unsigned int v764 = v1277;
                        if (v1277 <= v1074) {
                          break;
                        }
                      }
                      else
                      {
                        unsigned int v762 = v1226;
                        if (v760 > v1226 - (v1277 + v1046)) {
                          unsigned int v762 = v1277 + v1046 + v760;
                        }
                        unsigned int v1226 = v762;
                        uint64_t v763 = &v1336[2 * v1326];
                        *uint64_t v763 = v1169 - (v1277 + v1046);
                        v763[1] = v760;
                        ++v1326;
                        if (v760 > 0x1000)
                        {
                          LODWORD(v15) = v1335;
                          uint64_t v7 = v1304;
                          LODWORD(v470) = v1309;
                          break;
                        }
                        unsigned int v764 = v1277;
                        uint64_t v7 = v1304;
                        uint64_t v470 = v1309;
                        unint64_t v656 = v760;
                        unint64_t v15 = (unint64_t)v1335;
                        unint64_t v754 = v1241;
                        unint64_t v755 = v1211;
                        if (&v1309[v760] == v1335 || v1277 <= v1074) {
                          break;
                        }
                      }
                      unsigned int v765 = *(unsigned __int8 *)(v761 + v760);
                      unsigned int v766 = v470[v760];
                      BOOL v63 = v765 >= v766;
                      BOOL v767 = v765 < v766;
                      if (v63) {
                        unint64_t v754 = v760;
                      }
                      else {
                        unint64_t v755 = v760;
                      }
                      if (v1198)
                      {
                        --v1198;
                        unsigned int v753 = *(_DWORD *)(v1148 + 8 * (v764 & v1069) + 4 * v767);
                        if (v753 > v1089) {
                          continue;
                        }
                      }
                      break;
                    }
                  }
                }
LABEL_1299:
                *(_DWORD *)(v7 + 36) = v1226 - 8;
                LODWORD(v517) = v1326;
LABEL_1252:
                LODWORD(v10) = v1250;
                uint64_t v17 = v11 + 7;
                goto LABEL_1253;
              }
              unint64_t v808 = 0;
              unint64_t v809 = 0;
              uint64_t v750 = v1054;
              v1280 = (char *)v1060 + v469;
              uint64_t v1213 = v1054 + 8;
              unsigned int v749 = v1224;
              unint64_t v752 = (unsigned int *)(v1036 + 4);
              int v751 = (int *)v1036;
              uint64_t v810 = v1039;
              while (2)
              {
                if (v809 >= v808) {
                  unint64_t v811 = v808;
                }
                else {
                  unint64_t v811 = v809;
                }
                uint64_t v812 = v750 + v634;
                uint64_t v813 = &v470[v811];
                unsigned int v814 = (void *)(v812 + v811);
                if (v523 <= (unint64_t)&v470[v811])
                {
                  unint64_t v817 = (char *)&v470[v811];
                  unsigned int v818 = v634;
                  if ((unint64_t)v813 >= v1331) {
                    goto LABEL_1102;
                  }
                }
                else
                {
                  unint64_t v815 = *(void *)v813 ^ *v814;
                  if (v815)
                  {
                    unint64_t v816 = (__clz(__rbit64(v815)) >> 3) + v811;
                    if (v816 <= v656) {
                      goto LABEL_1118;
                    }
LABEL_1111:
                    if (v816 > v749 - v634) {
                      unsigned int v749 = v634 + v816;
                    }
                    unint64_t v819 = &v1336[2 * v517];
                    *unint64_t v819 = v632 + 2 - v634;
                    v819[1] = v816;
                    uint64_t v517 = (v517 + 1);
                    if (v816 > 0x1000 || &v470[v816] == (unsigned __int8 *)v15)
                    {
                      unsigned int v1226 = v749;
                      int v1326 = v517;
                      *unint64_t v752 = 0;
                      *int v751 = 0;
                      goto LABEL_1299;
                    }
                    unint64_t v656 = v816;
LABEL_1118:
                    unsigned int v821 = (unsigned int *)(v810 + 8 * (v634 & v1196));
                    if (*(unsigned __int8 *)(v812 + v816) >= v470[v816])
                    {
                      *unint64_t v752 = v634;
                      if (v634 <= v1180)
                      {
                        unint64_t v752 = (unsigned int *)&v1342;
                        goto LABEL_1015;
                      }
                      unint64_t v808 = v816;
                      unint64_t v752 = (unsigned int *)(v810 + 8 * (v634 & v1196));
                      BOOL v63 = v748-- != 0;
                      if (!v63) {
                        goto LABEL_1015;
                      }
                    }
                    else
                    {
                      *int v751 = v634;
                      if (v634 <= v1180)
                      {
                        int v751 = &v1342;
                        goto LABEL_1015;
                      }
                      ++v821;
                      unint64_t v809 = v816;
                      int v751 = (int *)v821;
                      BOOL v63 = v748-- != 0;
                      if (!v63) {
                        goto LABEL_1015;
                      }
                    }
                    unsigned int v634 = *v821;
                    if (*v821 < v1239) {
                      goto LABEL_1015;
                    }
                    continue;
                  }
                  unint64_t v822 = v752;
                  uint64_t v823 = v751;
                  unint64_t v824 = v656;
                  uint64_t v825 = v517;
                  uint64_t v826 = 0;
                  unint64_t v827 = &v1280[v811];
                  while (1)
                  {
                    uint64_t v828 = &v827[v826];
                    if ((unint64_t)&v827[v826] >= v523) {
                      break;
                    }
                    uint64_t v829 = *(void *)(v1213 + v811 + v634 + v826);
                    v826 += 8;
                    unint64_t v830 = *(void *)v828 ^ v829;
                    if (v830)
                    {
                      unint64_t v831 = __clz(__rbit64(v830));
                      uint64_t v517 = v825;
                      unint64_t v656 = v824;
                      int v751 = v823;
                      unint64_t v752 = v822;
                      uint64_t v810 = v1039;
                      uint64_t v750 = v1054;
                      unint64_t v816 = v826 + (v831 >> 3) + v811;
                      if (v816 <= v656) {
                        goto LABEL_1118;
                      }
                      goto LABEL_1111;
                    }
                  }
                  unint64_t v817 = &v1280[v811 + v826];
                  unsigned int v814 = (void *)(v1213 + v811 + v634 + v826);
                  uint64_t v517 = v825;
                  unint64_t v656 = v824;
                  int v751 = v823;
                  unint64_t v752 = v822;
                  uint64_t v810 = v1039;
                  uint64_t v750 = v1054;
                  unsigned int v818 = v634;
                  if ((unint64_t)v817 >= v1331)
                  {
LABEL_1102:
                    if ((unint64_t)v817 >= v1330)
                    {
                      if ((unint64_t)v817 >= v15) {
                        goto LABEL_1110;
                      }
                    }
                    else
                    {
                      if (*(unsigned __int16 *)v814 == *(unsigned __int16 *)v817)
                      {
                        v817 += 2;
                        unsigned int v814 = (void *)((char *)v814 + 2);
                      }
                      if ((unint64_t)v817 >= v15)
                      {
LABEL_1110:
                        unsigned int v634 = v818;
                        unint64_t v816 = v817 - (char *)v470;
                        if (v817 - (char *)v470 <= v656) {
                          goto LABEL_1118;
                        }
                        goto LABEL_1111;
                      }
                    }
                    if (*(unsigned __int8 *)v814 == *v817) {
                      ++v817;
                    }
                    goto LABEL_1110;
                  }
                }
                break;
              }
              if (*(_DWORD *)v814 == *(_DWORD *)v817)
              {
                v817 += 4;
                unsigned int v814 = (void *)((char *)v814 + 4);
              }
              goto LABEL_1102;
            }
          }
        }
        uint64_t v517 = 0;
        if (v518 != 3)
        {
          if (*(_DWORD *)(v519 + 212) >= 0xFFFu) {
            unsigned int v673 = 4095;
          }
          else {
            unsigned int v673 = *(_DWORD *)(v519 + 212);
          }
          uint64_t v674 = *(void *)(v519 + 8);
          unsigned int v675 = v1309 - v674;
          unsigned int v676 = v1309 + 4;
          int v1030 = *(_DWORD *)(v519 + 204);
          uint64_t v1033 = *(void *)(v519 + 48);
          uint64_t v1026 = (-1640531535 * *(_DWORD *)v1309) >> -(char)*(_DWORD *)(v519 + 200);
          unsigned int v1037 = *(_DWORD *)(v1033 + 4 * v1026);
          int v677 = -1 << (*(_DWORD *)(v519 + 196) - 1);
          uint64_t v678 = *(unsigned int *)(v519 + 24);
          uint64_t v1055 = v674;
          unsigned int v1249 = (void *)(v674 + v678);
          int v1070 = ~v677;
          unsigned int v679 = v1309 - v674 + v677 + 1;
          if (v675 < ~v677) {
            unsigned int v679 = 0;
          }
          unsigned int v1197 = v679;
          unsigned int v680 = 1 << *(_DWORD *)(v519 + 192);
          if (v675 - *(_DWORD *)(v519 + 28) > v680 && *(_DWORD *)(v519 + 32) == 0) {
            unsigned int v682 = v675 - v680;
          }
          else {
            unsigned int v682 = *(_DWORD *)(v519 + 28);
          }
          if (v682 <= 1) {
            int v683 = 1;
          }
          else {
            int v683 = v682;
          }
          unsigned int v1225 = v683;
          uint64_t v1075 = *(void *)(v519 + 64);
          uint64_t v1047 = (unsigned int *)(v1075 + 8 * (v675 & ~v677));
          unsigned int v1210 = v675 + 9;
          uint64_t v684 = *(void *)(v519 + 184);
          uint64_t v685 = *(void *)(v684 + 8);
          int v1240 = *(char **)v684;
          uint64_t v686 = v682 - (*(void *)v684 - v685);
          int v1018 = *(_DWORD *)(v684 + 200);
          uint64_t v1022 = v684;
          unsigned int v687 = *(_DWORD *)(v684 + 28);
          unsigned int v688 = ~(-1 << (*(_DWORD *)(v684 + 196) - 1));
          unsigned int v689 = *(void *)v684 - v685 - v687;
          uint64_t v1014 = *(void *)v684 - v685;
          unsigned int v690 = *(void *)v684 - v685 + (-1 << (*(_DWORD *)(v684 + 196) - 1)) + 1;
          unsigned int v1090 = v688;
          if (v689 <= v688) {
            unsigned int v691 = v687;
          }
          else {
            unsigned int v691 = v690;
          }
          unsigned int v1098 = v691;
          int v1342 = 0;
          unsigned int v1114 = v687;
          unsigned int v692 = v675 - v687 - v686;
          uint64_t v693 = v1319;
          uint64_t v694 = v1319 << 63 >> 63;
          if (v1319) {
            unint64_t v695 = 4;
          }
          else {
            unint64_t v695 = 3;
          }
          unsigned int v696 = v675 - v678;
          uint64_t v1106 = v685;
          uint64_t v1082 = v682 - (v1240 - v685);
          uint64_t v697 = v685 - v686;
          unint64_t v698 = v1183;
          unsigned int v1181 = v675;
          unsigned int v1168 = v673;
          unsigned int v1158 = v682;
          unint64_t v1140 = v695;
          unsigned int v1122 = v675 - v678;
          unsigned int v1131 = v692;
          while (1)
          {
            if (v693 == 3)
            {
              unsigned int v699 = *v522 - 1;
              unsigned int v700 = v675 - v699;
              unsigned int v701 = *v522 - 2;
              if (v701 < v696) {
                goto LABEL_933;
              }
            }
            else
            {
              unsigned int v699 = v522[v693];
              unsigned int v700 = v675 - v699;
              unsigned int v701 = v699 - 1;
              if (v699 - 1 < v696)
              {
LABEL_933:
                if (v700 < v682 || *(_DWORD *)v470 != *(_DWORD *)&v470[-v699]) {
                  goto LABEL_921;
                }
                uint64_t v710 = (void *)((char *)v676 - v699);
                if (v523 > (unint64_t)v676)
                {
                  v711 = v676;
                  unint64_t v712 = *v676 ^ *v710;
                  if (v712)
                  {
                    unsigned int v707 = (__clz(__rbit64(v712)) >> 3) + 4;
                    unint64_t v708 = v707;
                    if (v698 < v707) {
                      goto LABEL_954;
                    }
                    goto LABEL_921;
                  }
                  do
                  {
                    ++v710;
                    if ((unint64_t)++v711 >= v523) {
                      goto LABEL_946;
                    }
                    unint64_t v713 = *v711 ^ *v710;
                  }
                  while (!v713);
                  v711 = (void *)((char *)v711 + (__clz(__rbit64(v713)) >> 3));
                  goto LABEL_953;
                }
                v711 = v676;
LABEL_946:
                if ((unint64_t)v711 >= v1331)
                {
                  if ((unint64_t)v711 >= v1330) {
                    goto LABEL_950;
                  }
                }
                else
                {
                  if (*(_DWORD *)v710 == *(_DWORD *)v711)
                  {
                    v711 = (void *)((char *)v711 + 4);
                    uint64_t v710 = (void *)((char *)v710 + 4);
                  }
                  if ((unint64_t)v711 >= v1330)
                  {
LABEL_950:
                    if ((unint64_t)v711 < v15) {
                      goto LABEL_951;
                    }
                    goto LABEL_953;
                  }
                }
                if (*(unsigned __int16 *)v710 == *(unsigned __int16 *)v711)
                {
                  v711 = (void *)((char *)v711 + 2);
                  uint64_t v710 = (void *)((char *)v710 + 2);
                }
                if ((unint64_t)v711 < v15)
                {
LABEL_951:
                  if (*(unsigned __int8 *)v710 == *(unsigned __int8 *)v711) {
                    LODWORD(v711) = v711 + 1;
                  }
                }
LABEL_953:
                unsigned int v707 = v711 - v676 + 4;
                unint64_t v708 = v707;
                if (v698 < v707) {
                  goto LABEL_954;
                }
                goto LABEL_921;
              }
            }
            if (v701 < v692 && v678 + ~v700 >= 3)
            {
              uint64_t v703 = v697 + v700;
              if (*(_DWORD *)v470 == *(_DWORD *)v703)
              {
                unint64_t v1298 = v698;
                unsigned int v1324 = v517;
                uint64_t v704 = v678;
                uint64_t v705 = v694;
                int v706 = ZSTD_count_2segments(v676, (char *)(v703 + 4), v15, v1240, v1249);
                unint64_t v695 = v1140;
                unsigned int v676 = v1309 + 4;
                uint64_t v694 = v705;
                uint64_t v678 = v704;
                unsigned int v673 = v1168;
                unsigned int v675 = v1181;
                unsigned int v522 = &v11[7 * v469 + 4];
                uint64_t v517 = v1324;
                unsigned int v682 = v1158;
                unint64_t v698 = v1298;
                uint64_t v470 = v1309;
                unint64_t v523 = (unint64_t)(v1335 - 7);
                unint64_t v15 = (unint64_t)v1335;
                unsigned int v707 = v706 + 4;
                unsigned int v696 = v1122;
                unsigned int v692 = v1131;
                unint64_t v708 = v707;
                if (v1298 < v707)
                {
LABEL_954:
                  unint64_t v714 = &v1336[2 * v517];
                  *unint64_t v714 = v693 + v694;
                  v714[1] = v707;
                  uint64_t v517 = (v517 + 1);
                  if (v707 > v673) {
                    goto LABEL_1251;
                  }
                  unint64_t v698 = v708;
                  if (&v470[v708] == (unsigned __int8 *)v15) {
                    goto LABEL_1251;
                  }
                }
              }
            }
LABEL_921:
            if (++v693 >= v695)
            {
              *(_DWORD *)(v1033 + 4 * v1026) = v675;
              int v768 = ~(-1 << v1030);
              unsigned int v769 = v1037;
              if (v1037 < v1225)
              {
                uint64_t v610 = v1304;
                unsigned int v611 = v1210;
                unint64_t v612 = v1047;
                uint64_t v770 = v1055;
                unsigned int v614 = v1047 + 1;
                goto LABEL_1040;
              }
              unint64_t v832 = 0;
              unint64_t v833 = 0;
              unsigned int v1328 = v675 + 2;
              uint64_t v770 = v1055;
              v1302 = (char *)v1060 + v469;
              uint64_t v1281 = v1055 + 8;
              uint64_t v610 = v1304;
              unsigned int v611 = v1210;
              unsigned int v614 = v1047 + 1;
              unint64_t v612 = v1047;
              uint64_t v834 = v1075;
              int v835 = v1070;
              while (1)
              {
                unint64_t v836 = v833 >= v832 ? v832 : v833;
                unsigned int v837 = v769;
                uint64_t v838 = v769;
                uint64_t v839 = v1055 + v769;
                unsigned int v840 = &v470[v836];
                unsigned int v841 = (void *)(v839 + v836);
                if (v523 <= (unint64_t)&v470[v836]) {
                  break;
                }
                unint64_t v842 = *(void *)v840 ^ *v841;
                if (v842)
                {
                  unint64_t v843 = (__clz(__rbit64(v842)) >> 3) + v836;
                  if (v843 <= v698) {
                    goto LABEL_1160;
                  }
LABEL_1153:
                  if (v843 > v611 - v837) {
                    unsigned int v611 = v837 + v843;
                  }
                  unint64_t v845 = &v1336[2 * v517];
                  *unint64_t v845 = v1328 - v837;
                  v845[1] = v843;
                  uint64_t v517 = (v517 + 1);
                  if (v843 <= 0x1000 && &v470[v843] != (unsigned __int8 *)v15)
                  {
                    unint64_t v698 = v843;
                    goto LABEL_1160;
                  }
LABEL_1216:
                  unsigned int v1208 = v611;
                  int v1322 = v517;
                  *unsigned int v614 = 0;
                  *unint64_t v612 = 0;
                  goto LABEL_1250;
                }
                uint64_t v848 = v614;
                int v849 = v612;
                unint64_t v850 = v698;
                uint64_t v851 = v517;
                uint64_t v852 = 0;
                uint64_t v853 = &v1302[v836];
                do
                {
                  int v854 = &v853[v852];
                  if ((unint64_t)&v853[v852] >= v523)
                  {
                    uint64_t v844 = &v1302[v836 + v852];
                    unsigned int v841 = (void *)(v1281 + v836 + v838 + v852);
                    uint64_t v517 = v851;
                    unint64_t v698 = v850;
                    unint64_t v612 = v849;
                    unsigned int v614 = v848;
                    uint64_t v834 = v1075;
                    int v835 = v1070;
                    if ((unint64_t)v844 >= v1331) {
                      goto LABEL_1144;
                    }
                    goto LABEL_1142;
                  }
                  uint64_t v855 = *(void *)(v1281 + v836 + v838 + v852);
                  v852 += 8;
                  unint64_t v856 = *(void *)v854 ^ v855;
                }
                while (!v856);
                unint64_t v857 = __clz(__rbit64(v856));
                uint64_t v517 = v851;
                unint64_t v698 = v850;
                unint64_t v612 = v849;
                unsigned int v614 = v848;
                uint64_t v834 = v1075;
                int v835 = v1070;
                unint64_t v843 = v852 + (v857 >> 3) + v836;
                if (v843 > v698) {
                  goto LABEL_1153;
                }
LABEL_1160:
                uint64_t v847 = (unsigned int *)(v834 + 8 * (v837 & v835));
                if (*(unsigned __int8 *)(v839 + v843) >= v470[v843])
                {
                  *unsigned int v614 = v837;
                  if (v837 <= v1197)
                  {
                    unsigned int v614 = (unsigned int *)&v1342;
                    goto LABEL_1040;
                  }
                  unint64_t v832 = v843;
                  unsigned int v614 = (unsigned int *)(v834 + 8 * (v837 & v835));
                  BOOL v63 = v768-- != 0;
                  if (v63) {
                    goto LABEL_1133;
                  }
LABEL_1040:
                  unsigned int v1208 = v611;
                  *unsigned int v614 = 0;
                  *unint64_t v612 = 0;
                  int v1322 = v517;
                  if (v768)
                  {
                    unsigned int v771 = *(_DWORD *)(*(void *)(v1022 + 48)
                                     + 4 * ((-1640531535 * *(_DWORD *)v470) >> -(char)v1018));
                    if (v771 > v1114)
                    {
                      unint64_t v772 = 0;
                      unint64_t v773 = 0;
                      uint64_t v1149 = *(void *)(v1022 + 64);
                      uint64_t v1160 = v770 + v1082;
                      unsigned int v1182 = v1181 + 2;
                      int v1199 = v768 - 1;
                      while (1)
                      {
                        unsigned int v1278 = v771;
                        unint64_t v1300 = v698;
                        unint64_t v1227 = v772;
                        if (v773 >= v772) {
                          unint64_t v774 = v772;
                        }
                        else {
                          unint64_t v774 = v773;
                        }
                        uint64_t v775 = v771;
                        uint64_t v776 = v1106 + v771;
                        unint64_t v777 = ZSTD_count_2segments(&v470[v774], (char *)(v776 + v774), v15, v1240, v1249);
                        unint64_t v778 = v777 + v774;
                        unint64_t v698 = v1300;
                        if (v777 + v774 + v775 >= v1014) {
                          uint64_t v779 = v1160 + v775;
                        }
                        else {
                          uint64_t v779 = v776;
                        }
                        if (v778 <= v1300)
                        {
                          unint64_t v15 = (unint64_t)v1335;
                          uint64_t v610 = v1304;
                          uint64_t v470 = v1309;
                          unint64_t v772 = v1227;
                          unsigned int v782 = v1278;
                          if (v1278 <= v1098) {
                            goto LABEL_1250;
                          }
                        }
                        else
                        {
                          unsigned int v780 = v1208;
                          if (v778 > v1208 - (v1278 + v1082)) {
                            unsigned int v780 = v1278 + v1082 + v778;
                          }
                          unsigned int v1208 = v780;
                          unint64_t v781 = &v1336[2 * v1322];
                          *unint64_t v781 = v1182 - (v1278 + v1082);
                          v781[1] = v778;
                          ++v1322;
                          if (v778 > 0x1000) {
                            goto LABEL_1249;
                          }
                          unsigned int v782 = v1278;
                          uint64_t v610 = v1304;
                          uint64_t v470 = v1309;
                          unint64_t v698 = v777 + v774;
                          unint64_t v15 = (unint64_t)v1335;
                          unint64_t v772 = v1227;
                          if (&v1309[v778] == v1335 || v1278 <= v1098) {
                            goto LABEL_1250;
                          }
                        }
                        unsigned int v783 = *(unsigned __int8 *)(v779 + v778);
                        unsigned int v784 = v470[v778];
                        BOOL v63 = v783 >= v784;
                        BOOL v785 = v783 < v784;
                        if (v63) {
                          unint64_t v772 = v777 + v774;
                        }
                        else {
                          unint64_t v773 = v777 + v774;
                        }
                        if (v1199)
                        {
                          --v1199;
                          unsigned int v771 = *(_DWORD *)(v1149 + 8 * (v782 & v1090) + 4 * v785);
                          if (v771 > v1114) {
                            continue;
                          }
                        }
                        goto LABEL_1250;
                      }
                    }
                  }
                  goto LABEL_1250;
                }
                *unint64_t v612 = v837;
                if (v837 <= v1197)
                {
                  unint64_t v612 = (unsigned int *)&v1342;
                  goto LABEL_1040;
                }
                ++v847;
                unint64_t v833 = v843;
                unint64_t v612 = v847;
                BOOL v63 = v768-- != 0;
                if (!v63) {
                  goto LABEL_1040;
                }
LABEL_1133:
                unsigned int v769 = *v847;
                if (v769 < v1225) {
                  goto LABEL_1040;
                }
              }
              uint64_t v844 = (char *)&v470[v836];
              if ((unint64_t)v840 >= v1331) {
                goto LABEL_1144;
              }
LABEL_1142:
              if (*(_DWORD *)v841 == *(_DWORD *)v844)
              {
                v844 += 4;
                unsigned int v841 = (void *)((char *)v841 + 4);
              }
LABEL_1144:
              if ((unint64_t)v844 >= v1330)
              {
                if ((unint64_t)v844 >= v15) {
                  goto LABEL_1152;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v841 == *(unsigned __int16 *)v844)
                {
                  v844 += 2;
                  unsigned int v841 = (void *)((char *)v841 + 2);
                }
                if ((unint64_t)v844 >= v15)
                {
LABEL_1152:
                  unint64_t v843 = v844 - (char *)v470;
                  if (v844 - (char *)v470 <= v698) {
                    goto LABEL_1160;
                  }
                  goto LABEL_1153;
                }
              }
              if (*(unsigned __int8 *)v841 == *v844) {
                ++v844;
              }
              goto LABEL_1152;
            }
          }
        }
        uint64_t v1007 = (char *)v1060 + v469;
        if (*(_DWORD *)(v519 + 212) >= 0xFFFu) {
          unsigned int v524 = 4095;
        }
        else {
          unsigned int v524 = *(_DWORD *)(v519 + 212);
        }
        uint64_t v525 = *(void *)(v519 + 8);
        uint64_t v526 = (v1309 - v525);
        unint64_t v527 = v1309 + 3;
        int v1027 = *(_DWORD *)(v519 + 204);
        uint64_t v1031 = *(void *)(v519 + 48);
        uint64_t v1023 = (-1640531535 * *(_DWORD *)v1309) >> -(char)*(_DWORD *)(v519 + 200);
        unsigned int v1119 = *(_DWORD *)(v1031 + 4 * v1023);
        int v528 = -1 << (*(_DWORD *)(v519 + 196) - 1);
        uint64_t v529 = *(unsigned int *)(v519 + 24);
        uint64_t v1044 = v525;
        v1246 = (void *)(v525 + v529);
        int v1193 = ~v528;
        unsigned int v530 = v526 + v528 + 1;
        if (v526 < ~v528) {
          unsigned int v530 = 0;
        }
        unsigned int v1177 = v530;
        unsigned int v531 = 1 << *(_DWORD *)(v519 + 192);
        if ((int)v526 - *(_DWORD *)(v519 + 28) > v531 && *(_DWORD *)(v519 + 32) == 0) {
          unsigned int v533 = v526 - v531;
        }
        else {
          unsigned int v533 = *(_DWORD *)(v519 + 28);
        }
        if (v533 <= 1) {
          int v534 = 1;
        }
        else {
          int v534 = v533;
        }
        unsigned int v1294 = v534;
        uint64_t v1206 = *(void *)(v519 + 64);
        unint64_t v1034 = (unsigned int *)(v1206 + 8 * (v526 & ~v528));
        uint64_t v535 = *(void *)(v519 + 184);
        uint64_t v536 = *(void *)(v535 + 8);
        unint64_t v1237 = *(char **)v535;
        uint64_t v537 = v533 - (*(void *)v535 - v536);
        int v1015 = *(_DWORD *)(v535 + 200);
        uint64_t v1019 = v535;
        unsigned int v538 = *(_DWORD *)(v535 + 28);
        unsigned int v539 = ~(-1 << (*(_DWORD *)(v535 + 196) - 1));
        unsigned int v540 = *(void *)v535 - v536 - v538;
        uint64_t v1011 = *(void *)v535 - v536;
        unsigned int v541 = *(void *)v535 - v536 + (-1 << (*(_DWORD *)(v535 + 196) - 1)) + 1;
        unsigned int v1111 = v539;
        if (v540 <= v539) {
          unsigned int v542 = v538;
        }
        else {
          unsigned int v542 = v541;
        }
        unsigned int v1137 = v542;
        int v1342 = 0;
        unsigned int v1154 = v538;
        uint64_t v543 = v526 - v538 - v537;
        uint64_t v544 = v1319;
        uint64_t v545 = v1319 << 63 >> 63;
        int v1221 = v526 + 9;
        if (v1319) {
          unint64_t v546 = 4;
        }
        else {
          unint64_t v546 = 3;
        }
        unsigned int v547 = v526 - v529;
        uint64_t v1145 = v536;
        uint64_t v1038 = v533 - (v1237 - v536);
        uint64_t v548 = v536 - v537;
        unint64_t v549 = v1183;
        unsigned int v1103 = v524;
        int v1095 = v529;
        unsigned int v1087 = v533;
        unsigned int v1072 = v526;
        uint64_t v1067 = v536 - v537;
        uint64_t v1052 = v1319 << 63 >> 63;
        while (2)
        {
          if (v544 == 3)
          {
            unsigned int v550 = *v522 - 1;
            unsigned int v551 = v526 - v550;
            unsigned int v552 = *v522 - 2;
            if (v552 >= v547) {
              goto LABEL_712;
            }
LABEL_721:
            if (v551 < v533 || ((*(_DWORD *)&v470[-v550] ^ *(_DWORD *)v470) & 0xFFFFFF) != 0) {
              goto LABEL_709;
            }
            uint64_t v560 = (void *)((char *)v527 - v550);
            if (v523 > (unint64_t)v527)
            {
              unint64_t v561 = v527;
              unint64_t v562 = *v527 ^ *v560;
              if (v562)
              {
                unsigned int v557 = (__clz(__rbit64(v562)) >> 3) + 3;
                unint64_t v558 = v557;
                if (v549 >= v557) {
                  goto LABEL_709;
                }
              }
              else
              {
                do
                {
                  ++v560;
                  if ((unint64_t)++v561 >= v523) {
                    goto LABEL_735;
                  }
                  unint64_t v563 = *v561 ^ *v560;
                }
                while (!v563);
                unsigned int v557 = v561 + (__clz(__rbit64(v563)) >> 3) - v527 + 3;
                unint64_t v558 = v557;
                if (v549 >= v557) {
                  goto LABEL_709;
                }
              }
              goto LABEL_743;
            }
            unint64_t v561 = v527;
LABEL_735:
            if ((unint64_t)v561 >= v1331)
            {
              if ((unint64_t)v561 >= v1330) {
                goto LABEL_739;
              }
            }
            else
            {
              if (*(_DWORD *)v560 == *(_DWORD *)v561)
              {
                unint64_t v561 = (void *)((char *)v561 + 4);
                uint64_t v560 = (void *)((char *)v560 + 4);
              }
              if ((unint64_t)v561 >= v1330)
              {
LABEL_739:
                if ((unint64_t)v561 < v15) {
                  goto LABEL_740;
                }
                goto LABEL_742;
              }
            }
            if (*(unsigned __int16 *)v560 == *(unsigned __int16 *)v561)
            {
              unint64_t v561 = (void *)((char *)v561 + 2);
              uint64_t v560 = (void *)((char *)v560 + 2);
            }
            if ((unint64_t)v561 < v15)
            {
LABEL_740:
              if (*(unsigned __int8 *)v560 == *(unsigned __int8 *)v561) {
                LODWORD(v561) = v561 + 1;
              }
            }
LABEL_742:
            unsigned int v557 = v561 - v527 + 3;
            unint64_t v558 = v557;
            if (v549 >= v557) {
              goto LABEL_709;
            }
LABEL_743:
            uint64_t v564 = &v1336[2 * v517];
            _DWORD *v564 = v544 + v545;
            v564[1] = v557;
            uint64_t v517 = (v517 + 1);
            if (v557 > v524) {
              goto LABEL_1251;
            }
            unint64_t v549 = v558;
            if (&v470[v558] == (unsigned __int8 *)v15) {
              goto LABEL_1251;
            }
            goto LABEL_709;
          }
          unsigned int v550 = v522[v544];
          unsigned int v551 = v526 - v550;
          unsigned int v552 = v550 - 1;
          if (v550 - 1 < v547) {
            goto LABEL_721;
          }
LABEL_712:
          if (v552 < v543 && v529 + ~v551 >= 3)
          {
            uint64_t v554 = v548 + v551;
            if (((*(_DWORD *)v554 ^ *(_DWORD *)v470) & 0xFFFFFF) == 0)
            {
              unint64_t v1165 = v549;
              unsigned int v1320 = v517;
              uint64_t v555 = v543;
              int v556 = ZSTD_count_2segments(v527, (char *)(v554 + 3), v15, v1237, v1246);
              uint64_t v548 = v1067;
              LODWORD(v545) = v1052;
              uint64_t v543 = v555;
              LODWORD(v529) = v1095;
              unint64_t v527 = v1309 + 3;
              unsigned int v533 = v1087;
              unint64_t v549 = v1165;
              uint64_t v526 = v1072;
              unsigned int v522 = &v11[7 * v469 + 4];
              uint64_t v517 = v1320;
              uint64_t v470 = v1309;
              unint64_t v523 = (unint64_t)(v1335 - 7);
              unint64_t v15 = (unint64_t)v1335;
              unsigned int v557 = v556 + 3;
              unsigned int v524 = v1103;
              unint64_t v558 = v557;
              if (v1165 < v557) {
                goto LABEL_743;
              }
            }
          }
LABEL_709:
          if (++v544 < v546) {
            continue;
          }
          break;
        }
        if (v549 > 2)
        {
          uint64_t v7 = v1304;
          uint64_t v17 = v11 + 7;
          goto LABEL_1064;
        }
        uint64_t v7 = v1304;
        uint64_t v715 = *(void *)(v1304 + 56);
        int v716 = *(_DWORD *)v470;
        int v717 = 32 - *(_DWORD *)(v1304 + 40);
        if (v1009 < v526)
        {
          uint64_t v718 = v1009;
          do
          {
            *(_DWORD *)(v715 + 4 * ((900185344 * *(_DWORD *)(v1044 + v718)) >> v717)) = v718;
            ++v718;
          }
          while (v1289 - v1044 != v718);
        }
        uint64_t v719 = *(unsigned int *)(v715 + 4 * ((900185344 * v716) >> v717));
        int v720 = v526 - v719;
        BOOL v721 = v719 >= v1294 && (v526 - v719) >> 18 == 0;
        LODWORD(v10) = v1250;
        uint64_t v17 = v11 + 7;
        if (!v721)
        {
          unsigned int v1009 = v526;
LABEL_1064:
          v786 = v1034 + 1;
          goto LABEL_1065;
        }
        v882 = (_DWORD *)(v1044 + v719);
        if (v523 <= (unint64_t)v470)
        {
          unsigned int v885 = (char *)v470;
          if ((unint64_t)v470 >= v1331) {
            goto LABEL_1226;
          }
LABEL_1224:
          if (*v882 == *(_DWORD *)v885)
          {
            v885 += 4;
            ++v882;
          }
LABEL_1226:
          if ((unint64_t)v885 >= v1330)
          {
            if ((unint64_t)v885 >= v15) {
              goto LABEL_1234;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v882 == *(unsigned __int16 *)v885)
            {
              v885 += 2;
              v882 = (_DWORD *)((char *)v882 + 2);
            }
            if ((unint64_t)v885 >= v15)
            {
LABEL_1234:
              v786 = v1034 + 1;
              unint64_t v884 = v885 - (char *)v470;
              unsigned int v1009 = v526;
              if (v884 >= 3) {
                goto LABEL_1235;
              }
              goto LABEL_1065;
            }
          }
          if (*(unsigned __int8 *)v882 == *v885) {
            ++v885;
          }
          goto LABEL_1234;
        }
        unint64_t v883 = *(void *)v470 ^ *(void *)v882;
        if (v883)
        {
          unint64_t v884 = __clz(__rbit64(v883)) >> 3;
          v786 = v1034 + 1;
          unsigned int v1009 = v526;
          if (v884 >= 3) {
            goto LABEL_1235;
          }
LABEL_1065:
          *(_DWORD *)(v1031 + 4 * v1023) = v526;
          int v787 = ~(-1 << v1027);
          unsigned int v788 = v1119;
          if (v1119 < v1294)
          {
            int v789 = v1221;
            uint64_t v790 = v1044;
            uint64_t v791 = v1034;
LABEL_1067:
            int v1228 = v789;
            unsigned int *v786 = 0;
            *uint64_t v791 = 0;
            int v1327 = v517;
            if (v787)
            {
              unsigned int v792 = *(_DWORD *)(*(void *)(v1019 + 48)
                               + 4 * ((-1640531535 * *(_DWORD *)v470) >> -(char)v1015));
              if (v792 > v1154)
              {
                unint64_t v793 = 0;
                unint64_t v794 = 0;
                uint64_t v1132 = *(void *)(v1019 + 64);
                uint64_t v1170 = v790 + v1038;
                int v1123 = v526 + 2;
                int v1200 = v787 - 1;
                while (1)
                {
                  unsigned int v1301 = v792;
                  unint64_t v1279 = v793;
                  unint64_t v1212 = v794;
                  if (v794 >= v793) {
                    unint64_t v795 = v793;
                  }
                  else {
                    unint64_t v795 = v794;
                  }
                  uint64_t v796 = v792;
                  uint64_t v797 = v1145 + v792;
                  unint64_t v798 = v549;
                  unint64_t v799 = ZSTD_count_2segments(&v470[v795], (char *)(v797 + v795), v15, v1237, v1246);
                  unint64_t v800 = v799 + v795;
                  if (v799 + v795 + v796 >= v1011) {
                    uint64_t v801 = v1170 + v796;
                  }
                  else {
                    uint64_t v801 = v797;
                  }
                  if (v800 <= v798)
                  {
                    unint64_t v549 = v798;
                    unint64_t v15 = (unint64_t)v1335;
                    uint64_t v7 = v1304;
                    uint64_t v470 = v1309;
                    uint64_t v17 = v11 + 7;
                    unint64_t v793 = v1279;
                    unsigned int v804 = v1301;
                    unint64_t v794 = v1212;
                    if (v1301 <= v1137) {
                      break;
                    }
                  }
                  else
                  {
                    int v802 = v1228;
                    if (v800 > v1228 - (v1301 + v1038)) {
                      int v802 = v1301 + v1038 + v800;
                    }
                    int v1228 = v802;
                    unint64_t v803 = &v1336[2 * v1327];
                    *unint64_t v803 = v1123 - (v1301 + v1038);
                    v803[1] = v800;
                    ++v1327;
                    if (v800 > 0x1000)
                    {
                      LODWORD(v15) = v1335;
                      uint64_t v7 = v1304;
                      LODWORD(v470) = v1309;
                      uint64_t v17 = v11 + 7;
                      break;
                    }
                    unsigned int v804 = v1301;
                    uint64_t v7 = v1304;
                    uint64_t v470 = v1309;
                    unint64_t v549 = v799 + v795;
                    unint64_t v15 = (unint64_t)v1335;
                    uint64_t v17 = v11 + 7;
                    unint64_t v793 = v1279;
                    unint64_t v794 = v1212;
                    if (&v1309[v800] == v1335 || v1301 <= v1137) {
                      break;
                    }
                  }
                  unsigned int v805 = *(unsigned __int8 *)(v801 + v800);
                  unsigned int v806 = v470[v800];
                  BOOL v63 = v805 >= v806;
                  BOOL v807 = v805 < v806;
                  if (v63) {
                    unint64_t v793 = v800;
                  }
                  else {
                    unint64_t v794 = v800;
                  }
                  if (v1200)
                  {
                    --v1200;
                    unsigned int v792 = *(_DWORD *)(v1132 + 8 * (v804 & v1111) + 4 * v807);
                    if (v792 > v1154) {
                      continue;
                    }
                  }
                  break;
                }
              }
            }
LABEL_1301:
            LODWORD(v10) = v1250;
            LODWORD(v517) = v1327;
            *(_DWORD *)(v7 + 36) = v1228 - 8;
            goto LABEL_1253;
          }
          unint64_t v858 = 0;
          unint64_t v859 = 0;
          int v1329 = v526 + 2;
          v1282 = (char *)v1060 + v469;
          uint64_t v790 = v1044;
          uint64_t v1171 = v1044 + 8;
          int v789 = v1221;
          uint64_t v791 = v1034;
          while (2)
          {
            if (v859 >= v858) {
              unint64_t v860 = v858;
            }
            else {
              unint64_t v860 = v859;
            }
            uint64_t v861 = v788;
            uint64_t v862 = v790 + v788;
            unint64_t v863 = &v470[v860];
            unint64_t v864 = (_DWORD *)(v862 + v860);
            if (v523 <= (unint64_t)&v470[v860])
            {
              uint64_t v867 = v790;
              int v868 = (char *)&v470[v860];
              unsigned int v869 = v788;
              unint64_t v870 = v549;
              if ((unint64_t)v863 < v1331)
              {
LABEL_1184:
                if (*v864 == *(_DWORD *)v868)
                {
                  v868 += 4;
                  ++v864;
                }
              }
            }
            else
            {
              unint64_t v865 = *(void *)v863 ^ *(void *)v864;
              if (v865)
              {
                unint64_t v866 = (__clz(__rbit64(v865)) >> 3) + v860;
                if (v866 <= v549) {
                  goto LABEL_1202;
                }
                goto LABEL_1195;
              }
              unsigned int v1124 = v788;
              uint64_t v874 = v526;
              uint64_t v875 = v517;
              uint64_t v876 = 0;
              unsigned int v877 = &v1282[v860];
              while (1)
              {
                unsigned int v878 = &v877[v876];
                if ((unint64_t)&v877[v876] >= v523) {
                  break;
                }
                uint64_t v879 = *(void *)(v1171 + v860 + v861 + v876);
                v876 += 8;
                unint64_t v880 = *(void *)v878 ^ v879;
                if (v880)
                {
                  unint64_t v881 = __clz(__rbit64(v880));
                  uint64_t v517 = v875;
                  uint64_t v526 = v874;
                  uint64_t v790 = v1044;
                  unsigned int v788 = v1124;
                  unint64_t v866 = v876 + (v881 >> 3) + v860;
                  if (v866 > v549) {
                    goto LABEL_1195;
                  }
                  goto LABEL_1202;
                }
              }
              int v868 = &v1282[v860 + v876];
              unint64_t v864 = (_DWORD *)(v1171 + v860 + v861 + v876);
              uint64_t v517 = v875;
              uint64_t v526 = v874;
              uint64_t v867 = v1044;
              unsigned int v869 = v1124;
              unint64_t v870 = v549;
              if ((unint64_t)v868 < v1331) {
                goto LABEL_1184;
              }
            }
            if ((unint64_t)v868 >= v1330)
            {
              if ((unint64_t)v868 >= v15) {
                goto LABEL_1194;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v864 == *(unsigned __int16 *)v868)
              {
                v868 += 2;
                unint64_t v864 = (_DWORD *)((char *)v864 + 2);
              }
              if ((unint64_t)v868 >= v15)
              {
LABEL_1194:
                unint64_t v549 = v870;
                unsigned int v788 = v869;
                uint64_t v790 = v867;
                unint64_t v866 = v868 - (char *)v470;
                if (v868 - (char *)v470 <= v549)
                {
LABEL_1202:
                  unsigned int v873 = (unsigned int *)(v1206 + 8 * (v788 & v1193));
                  if (*(unsigned __int8 *)(v862 + v866) >= v470[v866])
                  {
                    unsigned int *v786 = v788;
                    if (v788 <= v1177)
                    {
                      v786 = (unsigned int *)&v1342;
                      goto LABEL_1067;
                    }
                    unint64_t v858 = v866;
                    v786 = (unsigned int *)(v1206 + 8 * (v788 & v1193));
                    BOOL v63 = v787-- != 0;
                    if (!v63) {
                      goto LABEL_1067;
                    }
                  }
                  else
                  {
                    *uint64_t v791 = v788;
                    if (v788 <= v1177)
                    {
                      uint64_t v791 = (unsigned int *)&v1342;
                      goto LABEL_1067;
                    }
                    ++v873;
                    unint64_t v859 = v866;
                    uint64_t v791 = v873;
                    BOOL v63 = v787-- != 0;
                    if (!v63) {
                      goto LABEL_1067;
                    }
                  }
                  unsigned int v788 = *v873;
                  if (*v873 < v1294) {
                    goto LABEL_1067;
                  }
                  continue;
                }
LABEL_1195:
                if (v866 > v789 - v788) {
                  int v789 = v788 + v866;
                }
                unsigned int v871 = &v1336[2 * v517];
                *unsigned int v871 = v1329 - v788;
                v871[1] = v866;
                uint64_t v517 = (v517 + 1);
                if (v866 > 0x1000 || &v470[v866] == (unsigned __int8 *)v15)
                {
                  int v1228 = v789;
                  int v1327 = v517;
                  unsigned int *v786 = 0;
                  *uint64_t v791 = 0;
                  goto LABEL_1301;
                }
                unint64_t v549 = v866;
                goto LABEL_1202;
              }
            }
            break;
          }
          if (*(unsigned __int8 *)v864 == *v868) {
            ++v868;
          }
          goto LABEL_1194;
        }
        uint64_t v929 = 0;
        while (2)
        {
          unsigned int v885 = &v1007[v929];
          if ((unint64_t)&v1007[v929] >= v523)
          {
            v882 = (_DWORD *)(v1044 + v719 + v929 + 8);
            if ((unint64_t)v885 >= v1331) {
              goto LABEL_1226;
            }
            goto LABEL_1224;
          }
          uint64_t v930 = *(void *)(v1044 + v719 + 8 + v929);
          v929 += 8;
          unint64_t v931 = *(void *)v885 ^ v930;
          if (!v931) {
            continue;
          }
          break;
        }
        unint64_t v884 = v929 + (__clz(__rbit64(v931)) >> 3);
        v786 = v1034 + 1;
        unsigned int v1009 = v526;
        if (v884 < 3) {
          goto LABEL_1065;
        }
LABEL_1235:
        _DWORD *v1336 = v720 + 2;
        v1336[1] = v884;
        if (v884 <= v524 && &v470[v884] != (unsigned __int8 *)v15)
        {
          uint64_t v517 = 1;
          unsigned int v1009 = v526;
          unint64_t v549 = v884;
          goto LABEL_1065;
        }
        LODWORD(v517) = 1;
        unsigned int v1009 = v526;
        *(_DWORD *)(v1304 + 36) = v526 + 1;
LABEL_1253:
        unsigned int v1338 = v517;
        ZSTD_optLdm_processMatchCandidate((uint64_t *)&v1339, (uint64_t)v1336, &v1338, v470 - v1266, v15 - v470);
        uint64_t v887 = v1338;
        if (!v1338)
        {
          unint64_t v15 = (unint64_t)v1335;
LABEL_639:
          int v463 = v1334;
          int v464 = v1289;
          goto LABEL_640;
        }
        uint64_t v888 = v1338 - 1;
        unsigned int v424 = v1336[2 * v888 + 1];
        unint64_t v15 = (unint64_t)v1335;
        if (v424 <= v1190 && v424 + v469 <= 0xFFF)
        {
          uint64_t v889 = 0;
          int v890 = v1255 + v1264;
          while (1)
          {
            unint64_t v891 = &v1336[2 * v889];
            unsigned int v892 = v10;
            if (v889) {
              unsigned int v892 = *(v891 - 1) + 1;
            }
            unsigned int v893 = v891[1];
            if (v893 >= v892) {
              break;
            }
LABEL_1257:
            if (++v889 == v887) {
              goto LABEL_639;
            }
          }
          signed int v894 = *v891;
          uint64_t v895 = __clz(v894 + 1) ^ 0x1F;
          if (*(_DWORD *)(v7 + 160) == 1)
          {
            int v896 = 0;
            int v897 = v469 + v893;
            unsigned int v898 = v469 + v893;
            while (1)
            {
              unint64_t v900 = v893 + v469;
              unsigned int v901 = __clz(v893 - 2);
              signed int v902 = ((v893 - 2) << 8 >> (v901 ^ 0x1F)) + (((v901 ^ 0x1F) + v895) << 8) + v890 + 4096;
              if (v900 <= v462)
              {
                if (v902 >= (int)v11[7 * v900]) {
                  goto LABEL_1264;
                }
                goto LABEL_1263;
              }
              uint64_t v903 = v462;
              unint64_t v904 = (v897 - v896) - (unint64_t)v462;
              if (v904 >= 2)
              {
                unint64_t v462 = (v904 & 0xFFFFFFFFFFFFFFFELL) + v462;
                unint64_t v905 = (v898 - v903) & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v906 = &v1337[7 * v903];
                do
                {
                  *(v906 - 7) = 0x40000000;
                  *unint64_t v906 = 0x40000000;
                  v906 += 14;
                  v905 -= 2;
                }
                while (v905);
                if (v904 == (v904 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_1263;
                }
              }
              else
              {
                unint64_t v462 = v462;
              }
              int v907 = &v17[7 * v462];
              do
              {
                ++v462;
                *int v907 = 0x40000000;
                v907 += 7;
              }
              while (v462 < v900);
LABEL_1263:
              unsigned int v899 = (signed int *)&v11[7 * v900];
              v899[2] = v893;
              v899[3] = v23;
              *unsigned int v899 = v902;
              v899[1] = v894;
LABEL_1264:
              --v893;
              ++v896;
              --v898;
              if (v893 < v892) {
                goto LABEL_1257;
              }
            }
          }
          int v908 = 0;
          uint64_t v910 = *(void *)(v7 + 96);
          uint64_t v909 = *(void *)(v7 + 104);
          int v911 = *(_DWORD *)(v7 + 156) + *(_DWORD *)(v7 + 152) + 51;
          int v912 = v469 + v893;
          unsigned int v913 = v469 + v893;
          while (2)
          {
            unsigned int v915 = v893 - 3;
            if (v893 - 3 < 0x80) {
              unsigned int v916 = ZSTD_MLcode_ML_Code[v915];
            }
            else {
              unsigned int v916 = 67 - __clz(v915);
            }
            unint64_t v917 = v893 + v469;
            unsigned int v918 = *(_DWORD *)(v909 + 4 * v895) + 1;
            unsigned int v919 = __clz(v918) ^ 0x1F;
            uint64_t v920 = 4 * v916;
            int v921 = *(unsigned int *)((char *)ML_bits + v920);
            LODWORD(v920) = *(_DWORD *)(v910 + v920) + 1;
            unsigned int v922 = __clz(v920) ^ 0x1F;
            signed int v923 = v890
                 + v911
                 - (v918 << 8 >> v919)
                 - (v920 << 8 >> v922)
                 + ((v895 + v921 - v919 - v922) << 8);
            if (v917 <= v462)
            {
              if (v923 < (int)v11[7 * v917]) {
                goto LABEL_1277;
              }
            }
            else
            {
              uint64_t v924 = v462;
              unint64_t v925 = (v912 - v908) - (unint64_t)v462;
              if (v925 < 2)
              {
                unint64_t v462 = v462;
                goto LABEL_1290;
              }
              unint64_t v462 = (v925 & 0xFFFFFFFFFFFFFFFELL) + v462;
              unint64_t v926 = (v913 - v924) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v927 = &v1337[7 * v924];
              do
              {
                *(v927 - 7) = 0x40000000;
                *unint64_t v927 = 0x40000000;
                v927 += 14;
                v926 -= 2;
              }
              while (v926);
              uint64_t v17 = v11 + 7;
              if (v925 != (v925 & 0xFFFFFFFFFFFFFFFELL))
              {
LABEL_1290:
                unsigned int v928 = &v17[7 * v462];
                do
                {
                  ++v462;
                  _DWORD *v928 = 0x40000000;
                  v928 += 7;
                }
                while (v462 < v917);
              }
LABEL_1277:
              uint64_t v914 = &v11[7 * v917];
              v914[2] = v893;
              v914[3] = v23;
              *uint64_t v914 = v923;
              v914[1] = v894;
            }
            --v893;
            ++v908;
            --v913;
            if (v893 < v892) {
              goto LABEL_1257;
            }
            continue;
          }
        }
        if (*v1189) {
          unsigned int v995 = 0;
        }
        else {
          unsigned int v995 = v11[7 * v469 + 3];
        }
        unint64_t v434 = (unint64_t)(v1335 - 32);
        unsigned int v433 = v1336[2 * v888];
        unsigned int v996 = v469 - v995;
        if (v996 <= 0x1000) {
          unsigned int v432 = v996;
        }
        else {
          unsigned int v432 = 0;
        }
        if (!v424)
        {
LABEL_1388:
          int v997 = &v11[7 * v432];
          uint64_t v998 = *((void *)v997 + 2);
          a3[2] = v997[6];
          *(void *)a3 = v998;
          goto LABEL_1322;
        }
LABEL_1308:
        v933 = &v11[7 * v432 + 4];
        if (v433 < 3)
        {
          if (v23) {
            unsigned int v938 = v433;
          }
          else {
            unsigned int v938 = v433 + 1;
          }
          if (v938)
          {
            if (v938 == 3)
            {
              unint64_t v935 = *v933;
              unsigned int v937 = v935 - 1;
            }
            else
            {
              unsigned int v937 = v933[v938];
              unint64_t v935 = *v933;
            }
            BOOL v949 = v938 > 1;
            uint64_t v940 = 2;
            if (v949) {
              uint64_t v940 = 1;
            }
            v934 = &v933[v940];
          }
          else
          {
            unint64_t v939 = *(void *)v933;
            v934 = &v11[7 * v432 + 6];
            unsigned int v937 = v939;
            unint64_t v935 = HIDWORD(v939);
          }
        }
        else
        {
          unsigned int v936 = *v933;
          v934 = &v11[7 * v432 + 5];
          unint64_t v935 = v936;
          unsigned int v937 = v433 - 2;
        }
        unsigned int v941 = *v934;
        *(void *)a3 = v937 | (v935 << 32);
        a3[2] = v941;
LABEL_1322:
        unsigned int v942 = v432 + 1;
        uint64_t v943 = &v11[7 * v432 + 7];
        *uint64_t v943 = v1083;
        v943[1] = v433;
        v943[2] = v424;
        v943[3] = v23;
        *((void *)v943 + 2) = v1343;
        v943[6] = v1344;
        unsigned int v944 = v432;
        if (!v432)
        {
          unsigned int v950 = 1;
          uint64_t v951 = v1062;
          uint64_t v18 = v1229;
          goto LABEL_1332;
        }
        do
        {
          int v945 = &v11[7 * v944];
          unsigned int v946 = v945[3] + v945[2];
          int v947 = &v11[7 * v432];
          long long v948 = *(_OWORD *)v945;
          *(_OWORD *)(v947 + 3) = *(_OWORD *)(v945 + 3);
          *(_OWORD *)int v947 = v948;
          --v432;
          BOOL v63 = v944 >= v946;
          v944 -= v946;
          BOOL v949 = v944 != 0 && v63;
          if (!v63) {
            unsigned int v944 = 0;
          }
        }
        while (v949);
        unsigned int v950 = v432 + 1;
        uint64_t v951 = v1062;
        uint64_t v18 = v1229;
        if (v950 <= v942)
        {
          while (1)
          {
LABEL_1332:
            while (1)
            {
              unsigned int v954 = v950;
              unsigned int v956 = v11[7 * v950 + 2];
              uint64_t v955 = v11[7 * v950 + 3];
              if (v956) {
                break;
              }
              long long v14 = &v18[v955];
              unsigned int v950 = v954 + 1;
              if (v954 + 1 > v942) {
                goto LABEL_1328;
              }
            }
            unsigned int v957 = v11[7 * v954 + 1];
            if (*(_DWORD *)(v7 + 176) != 2)
            {
              if (v955)
              {
                int v958 = *v1265;
                int v959 = v18;
                uint64_t v960 = v955;
                do
                {
                  int v961 = *v959++;
                  *(_DWORD *)&v958[4 * v961] += 2;
                  --v960;
                }
                while (v960);
              }
              *(_DWORD *)(v7 + 128) += 2 * v955;
            }
            unsigned int v962 = v955 < 0x40 ? ZSTD_LLcode_LL_Code[v955] : 50 - __clz(v955);
            ++*(_DWORD *)(*(void *)(v7 + 88) + 4 * v962);
            ++*(_DWORD *)(v7 + 132);
            unsigned int v963 = v957 + 1;
            unsigned int v964 = __clz(v957 + 1);
            ++*(_DWORD *)(*(void *)(v7 + 104) + 4 * (v964 ^ 0x1F));
            ++*(_DWORD *)(v7 + 140);
            unsigned int v965 = v956 - 3;
            unsigned int v966 = v956 - 3 < 0x80 ? ZSTD_MLcode_ML_Code[v965] : 67 - __clz(v965);
            ++*(_DWORD *)(*(void *)(v7 + 96) + 4 * v966);
            ++*(_DWORD *)(v7 + 136);
            int v967 = &v18[v955];
            uint64_t v968 = *(char **)(v951 + 24);
            if ((unint64_t)&v18[v955] > v434) {
              break;
            }
            *(_OWORD *)uint64_t v968 = *(_OWORD *)v18;
            uint64_t v971 = *(void *)(v951 + 24);
            if (v955 > 0x10)
            {
              uint64_t v972 = (_OWORD *)(v971 + 16);
              unint64_t v973 = v971 + v955;
              unsigned int v974 = (long long *)(v18 + 16);
              do
              {
                long long v975 = *v974++;
                *v972++ = v975;
              }
              while ((unint64_t)v972 < v973);
LABEL_1377:
              *(void *)(v951 + 24) += v955;
              uint64_t v982 = *(void *)(v951 + 8);
              if (v955 >= 0x10000)
              {
                unint64_t v993 = (unint64_t)(v982 - *(void *)v951) >> 3;
                *(_DWORD *)(v951 + 72) = 1;
                *(_DWORD *)(v951 + 76) = v993;
              }
              goto LABEL_1379;
            }
            *(void *)(v951 + 24) = v971 + v955;
            uint64_t v982 = *(void *)(v951 + 8);
LABEL_1379:
            *(_WORD *)(v982 + 4) = v955;
            *(_DWORD *)uint64_t v982 = v963;
            if (v965 >= 0x10000)
            {
              unint64_t v994 = (unint64_t)(v982 - *(void *)v951) >> 3;
              *(_DWORD *)(v951 + 72) = 2;
              *(_DWORD *)(v951 + 76) = v994;
            }
            *(_WORD *)(v982 + 6) = v965;
            *(void *)(v951 + 8) = v982 + 8;
            v18 += v956 + v955;
            long long v14 = v18;
            unsigned int v950 = v954 + 1;
            if (v954 + 1 > v942) {
              goto LABEL_1328;
            }
          }
          if ((unint64_t)v18 <= v434)
          {
            uint64_t v970 = &v968[v434 - (void)v18];
            unsigned int v976 = v18;
            unsigned int v977 = *(char **)(v951 + 24);
            do
            {
              long long v978 = *(_OWORD *)v976;
              v976 += 16;
              *(_OWORD *)unsigned int v977 = v978;
              v977 += 16;
            }
            while (v977 < v970);
            uint64_t v969 = (unsigned __int8 *)v434;
            if (v434 >= (unint64_t)v967) {
              goto LABEL_1377;
            }
          }
          else
          {
            uint64_t v969 = v18;
            uint64_t v970 = *(char **)(v951 + 24);
            if (v18 >= v967) {
              goto LABEL_1377;
            }
          }
          if ((unint64_t)v18 <= v434) {
            int v979 = (unsigned __int8 *)v434;
          }
          else {
            int v979 = v18;
          }
          unint64_t v980 = &v18[v955] - v979;
          if (v980 < 8)
          {
            unsigned int v981 = v969;
            goto LABEL_1376;
          }
          if ((unint64_t)(v968 - (char *)v18) < 0x20)
          {
            unsigned int v981 = v969;
            goto LABEL_1376;
          }
          if (v980 >= 0x20)
          {
            unint64_t v983 = v980 & 0xFFFFFFFFFFFFFFE0;
            int v984 = (long long *)(v969 + 16);
            int v985 = &v968[v979 - v18 + 16];
            unint64_t v986 = v980 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v987 = *v984;
              *((_OWORD *)v985 - 1) = *(v984 - 1);
              *(_OWORD *)int v985 = v987;
              v984 += 2;
              v985 += 32;
              v986 -= 32;
            }
            while (v986);
            if (v980 == v983) {
              goto LABEL_1377;
            }
            if ((v980 & 0x18) == 0)
            {
              unsigned int v981 = &v969[v983];
              v970 += v983;
              goto LABEL_1376;
            }
          }
          else
          {
            unint64_t v983 = 0;
          }
          v970 += v980 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v981 = &v969[v980 & 0xFFFFFFFFFFFFFFF8];
          int v988 = &v969[v983];
          int v989 = &v968[&v979[v983] - v18];
          unint64_t v990 = v983 - (v980 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v991 = *(void *)v988;
            v988 += 8;
            *(void *)int v989 = v991;
            v989 += 8;
            v990 += 8;
          }
          while (v990);
          if (v980 == (v980 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_1377;
          }
          do
          {
LABEL_1376:
            char v992 = *v981++;
            *v970++ = v992;
          }
          while (v981 < v967);
          goto LABEL_1377;
        }
        long long v14 = v1334;
LABEL_1328:
        if (*(_DWORD *)(v7 + 176) != 2)
        {
          unsigned int v952 = *(_DWORD *)(v7 + 128) + 1;
          unsigned int v953 = __clz(v952) ^ 0x1F;
          *(_DWORD *)(v7 + 144) = (v952 << 8 >> v953) + (v953 << 8);
        }
        unsigned int v19 = *(_DWORD *)(v7 + 140) + 1;
        unsigned int v20 = __clz(v19);
        int32x2_t v21 = vadd_s32(*(int32x2_t *)(v7 + 132), (int32x2_t)0x100000001);
        int32x2_t v22 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v21), (int8x8_t)0x1F0000001FLL);
        *(int32x2_t *)(v7 + 148) = vadd_s32(vshl_n_s32(v22, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v21, 8uLL), (uint32x2_t)vneg_s32(v22)));
        *(_DWORD *)(v7 + 156) = (v19 << 8 >> (v20 ^ 0x1F)) + ((v20 ^ 0x1F) << 8);
        if ((unint64_t)v14 >= v1303)
        {
LABEL_1405:
          v1266 = v18;
          return v15 - (void)v1266;
        }
      }
      else
      {
        long long v14 = v418 + 1;
        unint64_t v15 = (unint64_t)v1335;
        uint64_t v18 = v1229;
        if ((unint64_t)(v418 + 1) >= v1303) {
          goto LABEL_1405;
        }
      }
    }
    uint64_t v26 = 0;
    if (*(_DWORD *)(v7 + 212) >= 0xFFFu) {
      unsigned int v79 = 4095;
    }
    else {
      unsigned int v79 = *(_DWORD *)(v7 + 212);
    }
    uint64_t v80 = *(void *)(v7 + 8);
    int v81 = v1334 - v80;
    unsigned int v82 = (char *)(v1334 + 12);
    int v1100 = *(_DWORD *)(v7 + 204);
    uint64_t v1108 = *(void *)(v7 + 48);
    unint64_t v1092 = (0xCF1BBCDCBF9B0000 * *(void *)v1334) >> -(char)*(_DWORD *)(v7 + 200);
    int v83 = -1 << (*(_DWORD *)(v7 + 196) - 1);
    int v1049 = ~v83;
    unsigned int v84 = v1334 - v80 + v83 + 1;
    if ((int)v1334 - (int)v80 < ~v83) {
      unsigned int v84 = 0;
    }
    unsigned int v1116 = *(_DWORD *)(v1108 + 4 * v1092);
    unsigned int v1126 = v84;
    uint64_t v85 = *(unsigned int *)(v7 + 24);
    unsigned int v86 = 1 << *(_DWORD *)(v7 + 192);
    long long v14 = v1334;
    if (v81 - *(_DWORD *)(v7 + 28) > v86 && *(_DWORD *)(v7 + 32) == 0) {
      unsigned int v88 = v81 - v86;
    }
    else {
      unsigned int v88 = *(_DWORD *)(v7 + 28);
    }
    if (v88 <= 1) {
      int v89 = 1;
    }
    else {
      int v89 = v88;
    }
    unsigned int v1142 = v89;
    uint64_t v90 = *(void *)(v7 + 184);
    uint64_t v91 = *(void *)(v90 + 8);
    v1306 = *(char **)v90;
    unsigned int v92 = *(_DWORD *)(v90 + 28);
    uint64_t v93 = v88 - (*(void *)v90 - v91);
    uint64_t v1064 = v90;
    int v1057 = *(_DWORD *)(v90 + 200);
    unsigned int v94 = ~(-1 << (*(_DWORD *)(v90 + 196) - 1));
    unsigned int v95 = *(void *)v90 - v91 - v92;
    uint64_t v96 = *(void *)(v7 + 64);
    unsigned int v1041 = v1306 - v91;
    unsigned int v1151 = v94;
    if (v95 <= v94) {
      unsigned int v97 = v92;
    }
    else {
      unsigned int v97 = v1306 - v91 - v94;
    }
    unsigned int v1162 = v97;
    unsigned int v98 = v81 - v85;
    uint64_t v1173 = v91;
    uint64_t v99 = v91 - v93;
    unsigned int v1185 = v92;
    uint64_t v1134 = v88 - (v1306 - v91);
    unsigned int v100 = v81 - v92 - v93;
    uint64_t v101 = v23 == 0;
    uint64_t v1084 = v80;
    v1291 = (void *)(v80 + v85);
    uint64_t v1268 = v96;
    unsigned int v1077 = (unsigned int *)(v96 + 8 * (v81 & ~v83));
    int v1342 = 0;
    int v1284 = v81 + 9;
    if (v23) {
      unint64_t v102 = 3;
    }
    else {
      unint64_t v102 = 4;
    }
    unint64_t v103 = v1334 + 4;
    if (v23) {
      int v104 = 0;
    }
    else {
      int v104 = -1;
    }
    unint64_t v105 = v1183;
    unint64_t v106 = (unint64_t)(v1335 - 7);
    int v1257 = v81;
    unsigned int v1252 = v79;
    int v1231 = v85;
    unsigned int v1215 = v81 - v85;
    int v1202 = v104;
    while (1)
    {
      if (v101 == 3)
      {
        unsigned int v107 = *a3 - 1;
        unsigned int v108 = v81 - v107;
        unsigned int v109 = *a3 - 2;
        if (v109 >= v98) {
          goto LABEL_118;
        }
      }
      else
      {
        unsigned int v107 = a3[v101];
        unsigned int v108 = v81 - v107;
        unsigned int v109 = v107 - 1;
        if (v107 - 1 >= v98)
        {
LABEL_118:
          if (v109 < v100 && v85 + ~v108 >= 3)
          {
            uint64_t v111 = v99 + v108;
            if (*(_DWORD *)v14 == *(_DWORD *)v111)
            {
              int v112 = v103;
              unint64_t v1311 = v105;
              uint64_t v113 = v26;
              unint64_t v114 = v102;
              int v115 = ZSTD_count_2segments(v112, (char *)(v111 + 4), v15, v1306, v1291);
              unint64_t v102 = v114;
              unsigned int v98 = v1215;
              LODWORD(v85) = v1231;
              unsigned int v82 = (char *)(v1334 + 12);
              unsigned int v79 = v1252;
              unint64_t v105 = v1311;
              int v81 = v1257;
              uint64_t v26 = v113;
              long long v14 = v1334;
              unint64_t v15 = (unint64_t)v1335;
              unint64_t v106 = (unint64_t)(v1335 - 7);
              unsigned int v116 = v115 + 4;
              unint64_t v103 = v1334 + 4;
              int v104 = v1202;
              unint64_t v117 = v116;
              if (v1311 < v116) {
                goto LABEL_132;
              }
            }
          }
          goto LABEL_115;
        }
      }
      if (v108 < v88 || *(_DWORD *)v14 != *(_DWORD *)&v14[-v107]) {
        goto LABEL_115;
      }
      uint64_t v120 = -(uint64_t)v107;
      uint64_t v121 = (char *)v103 - v107;
      if (v106 <= (unint64_t)v103) {
        break;
      }
      unint64_t v122 = *v103 ^ *(void *)v121;
      if (v122)
      {
        unsigned int v116 = (__clz(__rbit64(v122)) >> 3) + 4;
        unint64_t v117 = v116;
        if (v105 < v116) {
          goto LABEL_132;
        }
        goto LABEL_115;
      }
      uint64_t v124 = 0;
      do
      {
        unint64_t v123 = &v82[v124];
        if ((unint64_t)&v82[v124] >= v106)
        {
          uint64_t v121 = &v123[v120];
          if ((unint64_t)v123 >= v1331) {
            goto LABEL_142;
          }
          goto LABEL_140;
        }
        uint64_t v125 = *(void *)&v82[v120 + v124];
        v124 += 8;
        unint64_t v126 = *(void *)v123 ^ v125;
        long long v14 = v1334;
      }
      while (!v126);
      unsigned int v116 = v124 + (__clz(__rbit64(v126)) >> 3) + 4;
      unint64_t v117 = v116;
      if (v105 < v116)
      {
LABEL_132:
        unint64_t v119 = &v1336[2 * v26];
        _DWORD *v119 = v101 + v104;
        v119[1] = v116;
        uint64_t v26 = (v26 + 1);
        if (v116 > v79) {
          goto LABEL_603;
        }
        unint64_t v105 = v117;
        if (&v14[v117] == (unsigned __int8 *)v15) {
          goto LABEL_603;
        }
      }
LABEL_115:
      if (++v101 >= v102)
      {
        *(_DWORD *)(v1108 + 4 * v1092) = v81;
        int v127 = ~(-1 << v1100);
        unsigned int v128 = v1142;
        unsigned int v129 = v1116;
        if (v1116 < v1142)
        {
          uint64_t v130 = v1304;
          int v131 = v1284;
          uint64_t v132 = v1084;
          int v134 = v1077 + 1;
          uint64_t v133 = v1077;
LABEL_161:
          int v1285 = v131;
          *int v134 = 0;
          *uint64_t v133 = 0;
          int v1312 = v26;
          if (!v127) {
            goto LABEL_601;
          }
          long long v14 = v1334;
          unsigned int v135 = *(_DWORD *)(*(void *)(v1064 + 48) + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)v1334) >> -(char)v1057));
          if (v135 <= v1185) {
            goto LABEL_602;
          }
          unint64_t v136 = 0;
          unint64_t v137 = 0;
          uint64_t v1232 = *(void *)(v1064 + 64);
          uint64_t v1243 = v132 + v1134;
          int v1216 = v1257 + 2;
          int v1258 = v127 - 1;
          while (1)
          {
            unsigned int v1269 = v135;
            if (v137 >= v136) {
              unint64_t v138 = v136;
            }
            else {
              unint64_t v138 = v137;
            }
            uint64_t v139 = v135;
            uint64_t v140 = v1173 + v135;
            unint64_t v141 = v105;
            unint64_t v142 = ZSTD_count_2segments(&v14[v138], (char *)(v140 + v138), v15, v1306, v1291);
            unint64_t v143 = v142 + v138;
            if (v142 + v138 + v139 >= v1041) {
              uint64_t v144 = v1243 + v139;
            }
            else {
              uint64_t v144 = v140;
            }
            if (v143 <= v141)
            {
              unint64_t v105 = v141;
              long long v14 = v1334;
              unint64_t v15 = (unint64_t)v1335;
              uint64_t v130 = v1304;
              unsigned int v147 = v1269;
              if (v1269 <= v1162) {
                goto LABEL_602;
              }
            }
            else
            {
              int v145 = v1285;
              if (v143 > v1285 - (v1269 + v1134)) {
                int v145 = v1269 + v1134 + v143;
              }
              int v1285 = v145;
              uint64_t v146 = &v1336[2 * v1312];
              *uint64_t v146 = v1216 - (v1269 + v1134);
              v146[1] = v143;
              ++v1312;
              if (v143 > 0x1000)
              {
LABEL_599:
                long long v14 = v1334;
                LODWORD(v15) = v1335;
                uint64_t v130 = v1304;
                goto LABEL_602;
              }
              unsigned int v147 = v1269;
              long long v14 = v1334;
              unint64_t v15 = (unint64_t)v1335;
              unint64_t v105 = v142 + v138;
              uint64_t v130 = v1304;
              if (&v1334[v143] == v1335 || v1269 <= v1162) {
                goto LABEL_602;
              }
            }
            unsigned int v148 = *(unsigned __int8 *)(v144 + v143);
            unsigned int v149 = v14[v143];
            BOOL v63 = v148 >= v149;
            BOOL v150 = v148 < v149;
            if (v63) {
              unint64_t v136 = v142 + v138;
            }
            else {
              unint64_t v137 = v142 + v138;
            }
            if (v1258)
            {
              --v1258;
              unsigned int v135 = *(_DWORD *)(v1232 + 8 * (v147 & v1151) + 4 * v150);
              if (v135 > v1185) {
                continue;
              }
            }
            goto LABEL_602;
          }
        }
        unint64_t v254 = 0;
        unint64_t v255 = 0;
        int v256 = v81 + 2;
        v1315 = v1334 + 8;
        uint64_t v132 = v1084;
        uint64_t v257 = v1084 + 8;
        uint64_t v130 = v1304;
        int v131 = v1284;
        int v134 = v1077 + 1;
        uint64_t v133 = v1077;
        unsigned int v258 = v1126;
        while (2)
        {
          if (v255 >= v254) {
            unint64_t v259 = v254;
          }
          else {
            unint64_t v259 = v255;
          }
          unsigned int v260 = v129;
          uint64_t v261 = v129;
          uint64_t v262 = v1084 + v129;
          int v263 = &v1334[v259];
          uint64_t v264 = (void *)(v262 + v259);
          if (v1332 <= (char *)&v1334[v259])
          {
            unint64_t v267 = &v1334[v259];
            if ((unint64_t)v263 >= v1331) {
              goto LABEL_341;
            }
          }
          else
          {
            unint64_t v265 = *(void *)v263 ^ *v264;
            if (v265)
            {
              unint64_t v266 = (__clz(__rbit64(v265)) >> 3) + v259;
              if (v266 <= v105) {
                goto LABEL_357;
              }
LABEL_350:
              if (v266 > v131 - v260) {
                int v131 = v260 + v266;
              }
              unint64_t v268 = &v1336[2 * v26];
              _DWORD *v268 = v256 - v260;
              v268[1] = v266;
              LODWORD(v26) = v26 + 1;
              if (v266 > 0x1000 || &v1334[v266] == (unsigned __int8 *)v15) {
                goto LABEL_574;
              }
              unint64_t v105 = v266;
LABEL_357:
              uint64_t v270 = (unsigned int *)(v1268 + 8 * (v260 & v1049));
              if (*(unsigned __int8 *)(v262 + v266) >= v1334[v266])
              {
                *int v134 = v260;
                if (v260 <= v258)
                {
                  int v134 = (unsigned int *)&v1342;
                  goto LABEL_161;
                }
                unint64_t v254 = v266;
                int v134 = (unsigned int *)(v1268 + 8 * (v260 & v1049));
                BOOL v63 = v127-- != 0;
                if (!v63) {
                  goto LABEL_161;
                }
              }
              else
              {
                *uint64_t v133 = v260;
                if (v260 <= v258)
                {
                  uint64_t v133 = (unsigned int *)&v1342;
                  goto LABEL_161;
                }
                ++v270;
                unint64_t v255 = v266;
                uint64_t v133 = v270;
                BOOL v63 = v127-- != 0;
                if (!v63) {
                  goto LABEL_161;
                }
              }
              unsigned int v129 = *v270;
              if (*v270 < v128) {
                goto LABEL_161;
              }
              continue;
            }
            unint64_t v271 = v105;
            uint64_t v272 = 0;
            unsigned int v273 = (char *)v1315 + v259;
            while (1)
            {
              unsigned int v274 = &v273[v272];
              if (&v273[v272] >= v1332) {
                break;
              }
              uint64_t v275 = *(void *)(v257 + v259 + v261 + v272);
              v272 += 8;
              unint64_t v276 = *(void *)v274 ^ v275;
              if (v276)
              {
                unint64_t v277 = __clz(__rbit64(v276));
                unint64_t v105 = v271;
                unsigned int v258 = v1126;
                unsigned int v128 = v1142;
                unint64_t v266 = v272 + (v277 >> 3) + v259;
                if (v266 <= v105) {
                  goto LABEL_357;
                }
                goto LABEL_350;
              }
            }
            unint64_t v267 = (unsigned __int8 *)v1315 + v259 + v272;
            uint64_t v264 = (void *)(v257 + v259 + v261 + v272);
            unint64_t v105 = v271;
            unsigned int v258 = v1126;
            unsigned int v128 = v1142;
            if ((unint64_t)v267 >= v1331)
            {
LABEL_341:
              if ((unint64_t)v267 >= v1330)
              {
                if ((unint64_t)v267 >= v15) {
                  goto LABEL_349;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v264 == *(unsigned __int16 *)v267)
                {
                  v267 += 2;
                  uint64_t v264 = (void *)((char *)v264 + 2);
                }
                if ((unint64_t)v267 >= v15)
                {
LABEL_349:
                  unint64_t v266 = v267 - v1334;
                  if (v267 - v1334 <= v105) {
                    goto LABEL_357;
                  }
                  goto LABEL_350;
                }
              }
              if (*(unsigned __int8 *)v264 == *v267) {
                ++v267;
              }
              goto LABEL_349;
            }
          }
          break;
        }
        if (*(_DWORD *)v264 == *(_DWORD *)v267)
        {
          v267 += 4;
          uint64_t v264 = (void *)((char *)v264 + 4);
        }
        goto LABEL_341;
      }
    }
    unint64_t v123 = (char *)v103;
    if ((unint64_t)v103 >= v1331) {
      goto LABEL_142;
    }
LABEL_140:
    if (*(_DWORD *)v121 == *(_DWORD *)v123)
    {
      v123 += 4;
      v121 += 4;
    }
LABEL_142:
    if ((unint64_t)v123 >= v1330)
    {
      if ((unint64_t)v123 >= v15) {
        goto LABEL_150;
      }
    }
    else
    {
      if (*(unsigned __int16 *)v121 == *(unsigned __int16 *)v123)
      {
        v123 += 2;
        v121 += 2;
      }
      if ((unint64_t)v123 >= v15)
      {
LABEL_150:
        unsigned int v116 = v123 - v103 + 4;
        unint64_t v117 = v116;
        if (v105 < v116) {
          goto LABEL_132;
        }
        goto LABEL_115;
      }
    }
    if (*v121 == *v123) {
      LODWORD(v123) = v123 + 1;
    }
    goto LABEL_150;
  }
  return v15 - (void)v1266;
}

unint64_t ZSTD_compressBlock_greedy_dedicatedDictSearch(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (char *)a4;
  unint64_t v6 = a4 + a5;
  unint64_t v7 = a4 + a5 - 8;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v12 = *(void *)(a1 + 184);
  long long v14 = *(char **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  unint64_t v109 = v6;
  uint64_t v110 = (void *)(v8 + v9);
  unint64_t v100 = v13 + *(unsigned int *)(v12 + 24);
  if (a4 - (v8 + v9) - v100 + *(void *)v12) {
    unint64_t v15 = (void *)a4;
  }
  else {
    unint64_t v15 = (void *)(a4 + 1);
  }
  if ((unint64_t)v15 < v7)
  {
    uint64_t v99 = a3;
    unint64_t v17 = v6 - 32;
    unint64_t v18 = v6 - 7;
    unint64_t v102 = v6 - 1;
    unint64_t v103 = v6 - 3;
    unsigned int v108 = v9 + v13 - v14;
    unint64_t v106 = *(char **)v12;
    unint64_t v107 = v7;
    unint64_t v19 = v6;
    uint64_t v105 = *(void *)(v12 + 8);
    uint64_t v101 = v13 - v108;
    while (1)
    {
      unint64_t v21 = v18;
      unint64_t v22 = v17;
      unsigned int v23 = (char *)v15 + 1;
      int v24 = v15 - v8 - v11;
      uint64_t v25 = (v24 + 1);
      uint64_t v26 = v13 + v25 - v108;
      if (v25 >= v9) {
        uint64_t v26 = v8 + v25;
      }
      if ((v9 - v24 - 5) <= 0xFFFFFFFC && *(_DWORD *)v26 == *(_DWORD *)v23) {
        break;
      }
      uint64_t v111 = 999999999;
      unint64_t BestMatch_dedicatedDictSearch_selectMLS = ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS(a1, v15, v19, &v111);
      uint64_t v29 = v111;
      if (BestMatch_dedicatedDictSearch_selectMLS) {
        unsigned int v23 = (char *)v15;
      }
      else {
        uint64_t v29 = 0;
      }
      if (BestMatch_dedicatedDictSearch_selectMLS <= 3)
      {
        unint64_t v15 = (void *)((char *)v15 + (((char *)v15 - v5) >> 8) + 1);
        long long v14 = v106;
        unint64_t v20 = v107;
        uint64_t v13 = v105;
        unint64_t v17 = v22;
        unint64_t v18 = v21;
        unint64_t v19 = v109;
        goto LABEL_7;
      }
      unint64_t v17 = v22;
      if (!v29)
      {
        unint64_t v18 = v21;
        goto LABEL_33;
      }
      unint64_t v31 = v8 + v9;
      if (v9 > (int)v23 - (int)v8 - (int)v29 + 2) {
        unint64_t v31 = v100;
      }
      uint64_t v32 = v101;
      if (v9 <= (int)v23 - (int)v8 - (int)v29 + 2) {
        uint64_t v32 = v8;
      }
      if (v23 <= v5 || (uint64_t v33 = (v23 - v8 - v29 + 2), v32 + v33 <= v31))
      {
        unint64_t v18 = v21;
        uint64_t v36 = v9 + v8 + 8;
      }
      else
      {
        unsigned int v34 = (unsigned __int8 *)(v32 + v33 - 1);
        unsigned int v35 = (unsigned __int8 *)(v23 - 1);
        unint64_t v18 = v21;
        uint64_t v36 = v9 + v8 + 8;
        while (*v35 == *v34)
        {
          ++BestMatch_dedicatedDictSearch_selectMLS;
          unsigned int v37 = v35 - 1;
          if (v35 > (unsigned __int8 *)v5)
          {
            --v35;
            if ((unint64_t)v34-- > v31) {
              continue;
            }
          }
          unsigned int v23 = (char *)(v37 + 1);
          goto LABEL_49;
        }
        unsigned int v23 = (char *)(v35 + 1);
      }
LABEL_49:
      uint64_t v10 = v11;
      uint64_t v11 = (v29 - 2);
      unint64_t v39 = v23 - v5;
      unsigned int v40 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v23 <= v17)
      {
LABEL_50:
        *unsigned int v40 = *(_OWORD *)v5;
        uint64_t v49 = *(void *)(a2 + 24);
        if (v39 <= 0x10)
        {
          *(void *)(a2 + 24) = v49 + v39;
          uint64_t v54 = *(void *)(a2 + 8);
          long long v14 = v106;
          unint64_t v20 = v107;
          uint64_t v13 = v105;
          unint64_t v19 = v109;
          __int16 v55 = BestMatch_dedicatedDictSearch_selectMLS - 3;
          *(_WORD *)(v54 + 4) = v39;
          *(_DWORD *)uint64_t v54 = v29 + 1;
          if (BestMatch_dedicatedDictSearch_selectMLS - 3 >= 0x10000) {
            goto LABEL_73;
          }
          goto LABEL_70;
        }
        unsigned int v50 = (_OWORD *)(v49 + 16);
        unint64_t v51 = v49 + v39;
        uint64_t v52 = (long long *)(v5 + 16);
        long long v14 = v106;
        unint64_t v20 = v107;
        uint64_t v13 = v105;
        unint64_t v19 = v109;
        do
        {
          long long v53 = *v52++;
          *v50++ = v53;
        }
        while ((unint64_t)v50 < v51);
        goto LABEL_68;
      }
LABEL_34:
      if ((unint64_t)v5 <= v17)
      {
        int v42 = (char *)v40 + v17 - (void)v5;
        uint64_t v43 = v5;
        uint64_t v44 = v40;
        do
        {
          long long v45 = *(_OWORD *)v43;
          v43 += 16;
          *v44++ = v45;
        }
        while (v44 < (_OWORD *)v42);
        unsigned int v41 = (char *)v17;
        long long v14 = v106;
        unint64_t v20 = v107;
        uint64_t v13 = v105;
        unint64_t v19 = v109;
        if (v17 >= (unint64_t)v23) {
          goto LABEL_68;
        }
      }
      else
      {
        unsigned int v41 = v5;
        int v42 = v40;
        long long v14 = v106;
        unint64_t v20 = v107;
        uint64_t v13 = v105;
        unint64_t v19 = v109;
        if (v5 >= v23) {
          goto LABEL_68;
        }
      }
      if ((unint64_t)v5 <= v17) {
        uint64_t v46 = (char *)v17;
      }
      else {
        uint64_t v46 = v5;
      }
      unint64_t v47 = v23 - v46;
      if ((unint64_t)(v23 - v46) < 8)
      {
        unsigned int v48 = v41;
        goto LABEL_67;
      }
      if ((unint64_t)((char *)v40 - v5) < 0x20)
      {
        unsigned int v48 = v41;
        goto LABEL_67;
      }
      if (v47 >= 0x20)
      {
        unint64_t v56 = v47 & 0xFFFFFFFFFFFFFFE0;
        int v57 = (long long *)(v41 + 16);
        unint64_t v58 = (_OWORD *)((char *)v40 + v46 - v5 + 16);
        unint64_t v59 = v47 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *unint64_t v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 32;
        }
        while (v59);
        if (v47 == v56) {
          goto LABEL_68;
        }
        if ((v47 & 0x18) == 0)
        {
          unsigned int v48 = &v41[v56];
          v42 += v56;
          do
          {
LABEL_67:
            char v65 = *v48++;
            *v42++ = v65;
          }
          while (v48 < v23);
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v56 = 0;
      }
      v42 += v47 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v48 = &v41[v47 & 0xFFFFFFFFFFFFFFF8];
      unsigned int v61 = &v41[v56];
      unsigned int v62 = (void *)((char *)v40 + &v46[v56] - v5);
      unint64_t v63 = v56 - (v47 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v64 = *(void *)v61;
        v61 += 8;
        *v62++ = v64;
        v63 += 8;
      }
      while (v63);
      if (v47 != (v47 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_67;
      }
LABEL_68:
      *(void *)(a2 + 24) += v39;
      uint64_t v54 = *(void *)(a2 + 8);
      if (v39 >= 0x10000)
      {
        unint64_t v67 = (unint64_t)(v54 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v67;
        __int16 v55 = BestMatch_dedicatedDictSearch_selectMLS - 3;
        *(_WORD *)(v54 + 4) = v39;
        *(_DWORD *)uint64_t v54 = v29 + 1;
        if (BestMatch_dedicatedDictSearch_selectMLS - 3 >= 0x10000)
        {
LABEL_73:
          unint64_t v68 = (unint64_t)(v54 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v68;
          *(_WORD *)(v54 + 6) = v55;
          uint64_t v66 = v54 + 8;
          *(void *)(a2 + 8) = v54 + 8;
          unint64_t v5 = &v23[BestMatch_dedicatedDictSearch_selectMLS];
          if ((unint64_t)&v23[BestMatch_dedicatedDictSearch_selectMLS] > v20)
          {
LABEL_71:
            unint64_t v15 = v5;
            goto LABEL_7;
          }
          goto LABEL_74;
        }
      }
      else
      {
        __int16 v55 = BestMatch_dedicatedDictSearch_selectMLS - 3;
        *(_WORD *)(v54 + 4) = v39;
        *(_DWORD *)uint64_t v54 = v29 + 1;
        if (BestMatch_dedicatedDictSearch_selectMLS - 3 >= 0x10000) {
          goto LABEL_73;
        }
      }
LABEL_70:
      *(_WORD *)(v54 + 6) = v55;
      uint64_t v66 = v54 + 8;
      *(void *)(a2 + 8) = v54 + 8;
      unint64_t v5 = &v23[BestMatch_dedicatedDictSearch_selectMLS];
      if ((unint64_t)&v23[BestMatch_dedicatedDictSearch_selectMLS] > v20) {
        goto LABEL_71;
      }
LABEL_74:
      uint64_t v69 = v11;
      uint64_t v70 = v10;
      while (1)
      {
        uint64_t v11 = v70;
        uint64_t v70 = v69;
        uint64_t v71 = (v5 - v8 - v11);
        uint64_t v72 = v71 >= v9 ? v8 : v101;
        if ((v9 + ~v71) < 3) {
          break;
        }
        uint64_t v73 = v72 + v71;
        if (*(_DWORD *)(v72 + v71) != *(_DWORD *)v5) {
          break;
        }
        if (v71 >= v9) {
          unint64_t v74 = (void *)v19;
        }
        else {
          unint64_t v74 = v14;
        }
        unint64_t v75 = v5 + 4;
        uint64_t v76 = (void *)(v73 + 4);
        uint64_t v77 = (char *)v74 + (void)v5 - v73;
        if ((unint64_t)v77 >= v19) {
          uint64_t v77 = (char *)v19;
        }
        if (v77 - 7 <= v75)
        {
          uint64_t v80 = v5 + 4;
          int v81 = v76;
          if (v75 < v77 - 3)
          {
LABEL_91:
            if (*v81 == *(_DWORD *)v80)
            {
              v80 += 4;
              ++v81;
            }
          }
        }
        else
        {
          unint64_t v78 = *(void *)v75 ^ *v76;
          if (v78)
          {
            unint64_t v79 = __clz(__rbit64(v78)) >> 3;
            if ((void *)((char *)v76 + v79) != v74) {
              goto LABEL_119;
            }
            goto LABEL_98;
          }
          uint64_t v85 = v5 + 12;
          while (1)
          {
            unsigned int v86 = &v85[v78];
            if (&v85[v78] >= v77 - 7) {
              break;
            }
            uint64_t v87 = *(void *)(v72 + v71 + 12 + v78);
            v78 += 8;
            unint64_t v88 = *(void *)v86 ^ v87;
            if (v88)
            {
              unint64_t v79 = v78 + (__clz(__rbit64(v88)) >> 3);
              unint64_t v19 = v109;
              if ((void *)((char *)v76 + v79) != v74) {
                goto LABEL_119;
              }
              goto LABEL_98;
            }
          }
          uint64_t v80 = &v5[v78 + 12];
          int v81 = (_DWORD *)(v72 + v71 + v78 + 12);
          unint64_t v19 = v109;
          if (v80 < v77 - 3) {
            goto LABEL_91;
          }
        }
        if (v80 >= v77 - 1)
        {
          if (v80 >= v77) {
            goto LABEL_97;
          }
LABEL_95:
          if (*(unsigned __int8 *)v81 == *v80) {
            ++v80;
          }
          goto LABEL_97;
        }
        if (*(unsigned __int16 *)v81 == *(unsigned __int16 *)v80)
        {
          v80 += 2;
          int v81 = (_DWORD *)((char *)v81 + 2);
        }
        if (v80 < v77) {
          goto LABEL_95;
        }
LABEL_97:
        unint64_t v79 = v80 - v75;
        if ((void *)((char *)v76 + v80 - v75) != v74) {
          goto LABEL_119;
        }
LABEL_98:
        unsigned int v82 = &v75[v79];
        if (v18 <= (unint64_t)v82)
        {
          int v89 = v82;
          uint64_t v90 = (_DWORD *)(v8 + v9);
          if ((unint64_t)v82 >= v103) {
            goto LABEL_113;
          }
          goto LABEL_111;
        }
        unint64_t v83 = *(void *)v82 ^ *v110;
        if (!v83)
        {
          uint64_t v93 = 0;
          uint64_t v94 = (uint64_t)&v5[v79 + 12];
          while (1)
          {
            unsigned int v95 = (void *)(v94 + v93);
            if (v94 + v93 >= v18) {
              break;
            }
            uint64_t v96 = *(void *)(v36 + v93);
            v93 += 8;
            unint64_t v97 = *v95 ^ v96;
            if (v97)
            {
              unint64_t v84 = v93 + (__clz(__rbit64(v97)) >> 3);
              goto LABEL_118;
            }
          }
          int v89 = &v5[v79 + 12 + v93];
          uint64_t v90 = (_DWORD *)(v36 + v93);
          if ((unint64_t)v89 >= v103)
          {
LABEL_113:
            if ((unint64_t)v89 < v102)
            {
              if (*(unsigned __int16 *)v90 == *(unsigned __int16 *)v89)
              {
                v89 += 2;
                uint64_t v90 = (_DWORD *)((char *)v90 + 2);
              }
              if ((unint64_t)v89 < v19)
              {
LABEL_115:
                if (*(unsigned __int8 *)v90 == *v89) {
                  ++v89;
                }
              }
            }
            else if ((unint64_t)v89 < v19)
            {
              goto LABEL_115;
            }
            unint64_t v84 = v89 - v82;
            goto LABEL_118;
          }
LABEL_111:
          if (*v90 == *(_DWORD *)v89)
          {
            v89 += 4;
            ++v90;
          }
          goto LABEL_113;
        }
        unint64_t v84 = __clz(__rbit64(v83)) >> 3;
LABEL_118:
        v79 += v84;
LABEL_119:
        if ((unint64_t)v5 <= v17)
        {
          *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v5;
          uint64_t v66 = *(void *)(a2 + 8);
          __int16 v91 = v79 + 1;
          *(_WORD *)(v66 + 4) = 0;
          *(_DWORD *)uint64_t v66 = 1;
          if (v79 + 1 >= 0x10000)
          {
LABEL_123:
            unint64_t v92 = (unint64_t)(v66 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v92;
          }
        }
        else
        {
          __int16 v91 = v79 + 1;
          *(_WORD *)(v66 + 4) = 0;
          *(_DWORD *)uint64_t v66 = 1;
          if (v79 + 1 >= 0x10000) {
            goto LABEL_123;
          }
        }
        *(_WORD *)(v66 + 6) = v91;
        v66 += 8;
        v5 += v79 + 4;
        *(void *)(a2 + 8) = v66;
        uint64_t v69 = v11;
        uint64_t v10 = v70;
        unint64_t v15 = v5;
        if ((unint64_t)v5 > v20) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = v11;
      uint64_t v11 = v69;
      unint64_t v15 = v5;
LABEL_7:
      if ((unint64_t)v15 >= v20)
      {
        a3 = v99;
        goto LABEL_138;
      }
    }
    if (v25 >= v9) {
      uint64_t v27 = (char *)v19;
    }
    else {
      uint64_t v27 = v14;
    }
    unint64_t v28 = ZSTD_count_2segments((void *)((char *)v15 + 5), (char *)(v26 + 4), v19, v27, v110);
    LODWORD(v29) = 0;
    unint64_t BestMatch_dedicatedDictSearch_selectMLS = v28 + 4;
    unint64_t v17 = v22;
    unint64_t v18 = v21;
LABEL_33:
    uint64_t v36 = v9 + v8 + 8;
    unint64_t v39 = v23 - v5;
    unsigned int v40 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v23 <= v17) {
      goto LABEL_50;
    }
    goto LABEL_34;
  }
LABEL_138:
  *a3 = v11;
  a3[1] = v10;
  return v109 - (void)v5;
}

unint64_t ZSTD_compressBlock_lazy_dedicatedDictSearch(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = (unint64_t)&a4[a5];
  unint64_t v7 = (unint64_t)&a4[a5 - 8];
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  uint64_t v11 = *a3;
  LODWORD(v10) = a3[1];
  uint64_t v12 = *(void *)(a1 + 184);
  long long v14 = *(char **)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  unsigned int v135 = (unsigned __int8 *)(v8 + v9);
  unsigned int v129 = (unsigned __int8 *)(v13 + *(unsigned int *)(v12 + 24));
  if (a4 - (v8 + v9) - v129 + *(void *)v12) {
    unint64_t v15 = a4;
  }
  else {
    unint64_t v15 = a4 + 1;
  }
  unint64_t v141 = (unsigned __int8 *)v7;
  if ((unint64_t)v15 < v7)
  {
    uint64_t v16 = a2;
    int v127 = a3;
    unint64_t v131 = v6 - 1;
    unint64_t v132 = v6 - 3;
    uint64_t v133 = v9 + v8 + 8;
    unsigned int v139 = v9 + v13 - v14;
    uint64_t v130 = v13 - v139;
    uint64_t v137 = *(void *)(a1 + 8);
    uint64_t v138 = *(void *)(v12 + 8);
    int v134 = *(char **)v12;
    while (1)
    {
      int v17 = v15 - v8 - v11;
      uint64_t v18 = (v17 + 1);
      uint64_t v19 = v13 + v18 - v139;
      if (v18 >= v9) {
        uint64_t v19 = v8 + v18;
      }
      unsigned int v136 = v10;
      if ((v9 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *(_DWORD *)(v15 + 1))
      {
        if (v18 >= v9) {
          unint64_t v20 = (char *)v6;
        }
        else {
          unint64_t v20 = v14;
        }
        unint64_t v21 = ZSTD_count_2segments(v15 + 5, (char *)(v19 + 4), v6, v20, v135) + 4;
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v142 = 999999999;
      unint64_t BestMatch_dedicatedDictSearch_selectMLS = ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS(a1, v15, v6, &v142);
      if (BestMatch_dedicatedDictSearch_selectMLS <= v21) {
        unint64_t v23 = v21;
      }
      else {
        unint64_t v23 = BestMatch_dedicatedDictSearch_selectMLS;
      }
      if (v23 < 4)
      {
        v15 += ((v15 - v5) >> 8) + 1;
        uint64_t v13 = v138;
        long long v14 = v134;
        LODWORD(v10) = v136;
        goto LABEL_7;
      }
      char v24 = BestMatch_dedicatedDictSearch_selectMLS > v21;
      if (BestMatch_dedicatedDictSearch_selectMLS <= v21) {
        uint64_t v25 = v15 + 1;
      }
      else {
        uint64_t v25 = v15;
      }
      if (v24) {
        uint64_t v26 = v142;
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v13 = v138;
      if (v15 >= v141)
      {
LABEL_94:
        uint64_t v59 = v133;
        unint64_t v58 = v6 - 7;
        unint64_t v60 = v6 - 32;
        uint64_t v10 = v136;
        if (!v26) {
          goto LABEL_112;
        }
LABEL_95:
        uint64_t v61 = v137;
        unsigned int v62 = v135;
        if (v9 > (int)v25 - ((int)v26 + (int)v137) + 2)
        {
          unsigned int v62 = v129;
          uint64_t v61 = v130;
        }
        if (v25 <= v5 || (uint64_t v63 = (v25 - (v26 + v137) + 2), v61 + v63 <= (unint64_t)v62))
        {
LABEL_104:
          uint64_t v10 = v11;
          uint64_t v11 = (v26 - 2);
          unint64_t v67 = v25 - v5;
          unint64_t v68 = *(_OWORD **)(v16 + 24);
          if ((unint64_t)v25 > v60) {
            goto LABEL_113;
          }
          goto LABEL_105;
        }
        uint64_t v64 = (unsigned __int8 *)(v61 + v63 - 1);
        char v65 = v25 - 1;
        while (*v65 == *v64)
        {
          ++v23;
          uint64_t v66 = v65 - 1;
          if (v65 > v5)
          {
            --v65;
            char v24 = v64-- > v62;
            if (v24) {
              continue;
            }
          }
          uint64_t v25 = v66 + 1;
          goto LABEL_104;
        }
        uint64_t v25 = v65 + 1;
        uint64_t v10 = v11;
        uint64_t v11 = (v26 - 2);
        unint64_t v67 = v65 + 1 - v5;
        unint64_t v68 = *(_OWORD **)(v16 + 24);
        if ((unint64_t)v25 <= v60) {
          goto LABEL_105;
        }
LABEL_113:
        if ((unint64_t)v5 <= v60)
        {
          unint64_t v78 = (char *)v68 + v60 - (void)v5;
          unint64_t v79 = v5;
          uint64_t v80 = v68;
          do
          {
            long long v81 = *(_OWORD *)v79;
            v79 += 16;
            *v80++ = v81;
          }
          while (v80 < (_OWORD *)v78);
          uint64_t v70 = v10;
          uint64_t v77 = (_OWORD *)v60;
          if (v60 >= (unint64_t)v25) {
            goto LABEL_140;
          }
        }
        else
        {
          uint64_t v70 = v10;
          uint64_t v77 = v5;
          unint64_t v78 = v68;
          if (v5 >= v25) {
            goto LABEL_140;
          }
        }
        if ((unint64_t)v5 <= v60) {
          unsigned int v82 = (unsigned __int8 *)v60;
        }
        else {
          unsigned int v82 = v5;
        }
        unint64_t v83 = v25 - v82;
        if ((unint64_t)(v25 - v82) < 8)
        {
          unint64_t v84 = (unsigned __int8 *)v77;
          goto LABEL_139;
        }
        if ((unint64_t)((char *)v68 - (char *)v5) < 0x20)
        {
          unint64_t v84 = (unsigned __int8 *)v77;
          goto LABEL_139;
        }
        if (v83 < 0x20)
        {
          unint64_t v85 = 0;
          goto LABEL_134;
        }
        unint64_t v85 = v83 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v86 = v77 + 1;
        uint64_t v87 = (_OWORD *)((char *)v68 + v82 - v5 + 16);
        unint64_t v88 = v83 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v89 = *v86;
          *(v87 - 1) = *(v86 - 1);
          _OWORD *v87 = v89;
          v86 += 2;
          v87 += 2;
          v88 -= 32;
        }
        while (v88);
        if (v83 == v85) {
          goto LABEL_140;
        }
        if ((v83 & 0x18) != 0)
        {
LABEL_134:
          v78 += v83 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v84 = (unsigned __int8 *)v77 + (v83 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v90 = (uint64_t *)((char *)v77 + v85);
          __int16 v91 = (void *)((char *)v68 + &v82[v85] - v5);
          unint64_t v92 = v85 - (v83 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v93 = *v90++;
            *v91++ = v93;
            v92 += 8;
          }
          while (v92);
          if (v83 == (v83 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_140;
          }
        }
        else
        {
          unint64_t v84 = (unsigned __int8 *)v77 + v85;
          v78 += v85;
        }
        do
        {
LABEL_139:
          char v94 = *v84++;
          *v78++ = v94;
        }
        while (v84 < v25);
        goto LABEL_140;
      }
      uint64_t v27 = (char *)(v15 + 13);
      do
      {
        unint64_t v28 = v15 + 1;
        uint64_t v29 = (v15 + 1 - v137 - v11);
        if (v29 >= v9) {
          uint64_t v30 = (_DWORD *)(v137 + v29);
        }
        else {
          uint64_t v30 = (_DWORD *)(v13 + v29 - v139);
        }
        if ((v9 + ~v29) < 3 || *v30 != *(_DWORD *)v28) {
          goto LABEL_81;
        }
        if (v29 >= v9) {
          unint64_t v31 = (char *)v6;
        }
        else {
          unint64_t v31 = v134;
        }
        uint64_t v32 = (char *)(v15 + 5);
        uint64_t v33 = v30 + 1;
        unint64_t v34 = (unint64_t)&v15[v31 - (char *)(v30 + 1) + 5];
        if (v34 >= v6) {
          unint64_t v34 = v6;
        }
        if (v34 - 7 <= (unint64_t)v32)
        {
          unint64_t v39 = v15 + 5;
          unsigned int v40 = v30 + 1;
          uint64_t v37 = v133;
          unint64_t v36 = v6 - 7;
          if ((unint64_t)v32 < v34 - 3)
          {
LABEL_44:
            if (*v40 == *(_DWORD *)v39)
            {
              v39 += 4;
              ++v40;
            }
          }
        }
        else
        {
          unint64_t v35 = *(void *)v32 ^ *v33;
          uint64_t v37 = v133;
          unint64_t v36 = v6 - 7;
          if (v35)
          {
            unint64_t v38 = __clz(__rbit64(v35)) >> 3;
            if ((char *)v33 + v38 != v31) {
              goto LABEL_76;
            }
            goto LABEL_55;
          }
          uint64_t v44 = 0;
          while (1)
          {
            unint64_t v39 = &v15[v44 * 4 + 13];
            if ((unint64_t)v39 >= v34 - 7) {
              break;
            }
            uint64_t v45 = *(void *)&v30[v44 + 3];
            v44 += 2;
            unint64_t v46 = *(void *)v39 ^ v45;
            if (v46)
            {
              unint64_t v38 = v44 * 4 + (__clz(__rbit64(v46)) >> 3);
              if ((char *)v33 + v38 != v31) {
                goto LABEL_76;
              }
              goto LABEL_55;
            }
          }
          unsigned int v40 = &v30[v44 + 3];
          if ((unint64_t)v39 < v34 - 3) {
            goto LABEL_44;
          }
        }
        if ((unint64_t)v39 >= v34 - 1)
        {
          if ((unint64_t)v39 >= v34) {
            goto LABEL_54;
          }
LABEL_52:
          if (*(unsigned __int8 *)v40 == *v39) {
            ++v39;
          }
          goto LABEL_54;
        }
        if (*(unsigned __int16 *)v40 == *(unsigned __int16 *)v39)
        {
          v39 += 2;
          unsigned int v40 = (_DWORD *)((char *)v40 + 2);
        }
        if ((unint64_t)v39 < v34) {
          goto LABEL_52;
        }
LABEL_54:
        unint64_t v38 = v39 - (unsigned __int8 *)v32;
        if ((char *)v33 + v39 - (unsigned __int8 *)v32 != v31) {
          goto LABEL_76;
        }
LABEL_55:
        unsigned int v41 = &v32[v38];
        if (v36 <= (unint64_t)v41)
        {
          unint64_t v47 = v41;
          unsigned int v48 = v135;
          if ((unint64_t)v41 >= v132) {
            goto LABEL_66;
          }
          goto LABEL_64;
        }
        unint64_t v42 = *(void *)v41 ^ *(void *)v135;
        if (!v42)
        {
          uint64_t v53 = 0;
          uint64_t v54 = &v27[v38];
          while (1)
          {
            __int16 v55 = &v54[v53];
            if ((unint64_t)&v54[v53] >= v36) {
              break;
            }
            uint64_t v56 = *(void *)(v37 + v53);
            v53 += 8;
            unint64_t v57 = *(void *)v55 ^ v56;
            if (v57)
            {
              unint64_t v43 = v53 + (__clz(__rbit64(v57)) >> 3);
              goto LABEL_75;
            }
          }
          unint64_t v47 = &v27[v38 + v53];
          unsigned int v48 = (unsigned __int8 *)(v37 + v53);
          if ((unint64_t)v47 >= v132)
          {
LABEL_66:
            if ((unint64_t)v47 >= v131)
            {
              if ((unint64_t)v47 < v6) {
                goto LABEL_72;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v48 == *(unsigned __int16 *)v47)
              {
                v47 += 2;
                v48 += 2;
              }
              if ((unint64_t)v47 >= v6) {
                goto LABEL_74;
              }
LABEL_72:
              if (*v48 == *v47) {
                ++v47;
              }
            }
LABEL_74:
            unint64_t v43 = v47 - v41;
            goto LABEL_75;
          }
LABEL_64:
          if (*(_DWORD *)v48 == *(_DWORD *)v47)
          {
            v47 += 4;
            v48 += 4;
          }
          goto LABEL_66;
        }
        unint64_t v43 = __clz(__rbit64(v42)) >> 3;
LABEL_75:
        v38 += v43;
LABEL_76:
        unint64_t v49 = v38 + 4;
        char v24 = (v38 != -5) & __CFADD__(v38, 5);
        int v50 = 3 * v23 + (__clz(v26 + 1) ^ 0xFFFFFFE0) + 2;
        if (v24) {
          BOOL v51 = 1;
        }
        else {
          BOOL v51 = 3 * (int)v49 <= v50;
        }
        if (!v51)
        {
          uint64_t v26 = 0;
          unint64_t v23 = v49;
          uint64_t v25 = v15 + 1;
        }
LABEL_81:
        uint64_t v142 = 999999999;
        unint64_t v52 = ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS(a1, v15 + 1, v6, &v142);
        if (v52 < 4
          || (int)((__clz(v142 + 1) ^ 0xFFFFFFE0) + 4 * v52 + 1) <= (int)((__clz(v26 + 1) ^ 0xFFFFFFE0) + 4 * v23 + 5))
        {
          uint64_t v16 = a2;
          uint64_t v13 = v138;
          goto LABEL_94;
        }
        ++v27;
        ++v15;
        uint64_t v25 = v28;
        uint64_t v26 = v142;
        unint64_t v23 = v52;
        uint64_t v13 = v138;
      }
      while (v28 != v141);
      unint64_t v23 = v52;
      LODWORD(v26) = v142;
      uint64_t v25 = v141;
      uint64_t v16 = a2;
      uint64_t v59 = v133;
      unint64_t v58 = v6 - 7;
      unint64_t v60 = v6 - 32;
      uint64_t v10 = v136;
      if (v142) {
        goto LABEL_95;
      }
LABEL_112:
      unint64_t v67 = v25 - v5;
      unint64_t v68 = *(_OWORD **)(v16 + 24);
      if ((unint64_t)v25 > v60) {
        goto LABEL_113;
      }
LABEL_105:
      *unint64_t v68 = *(_OWORD *)v5;
      uint64_t v69 = *(void *)(v16 + 24);
      if (v67 <= 0x10)
      {
        *(void *)(v16 + 24) = v69 + v67;
        uint64_t v75 = *(void *)(v16 + 8);
        __int16 v76 = v23 - 3;
        *(_WORD *)(v75 + 4) = v67;
        *(_DWORD *)uint64_t v75 = v26 + 1;
        if (v23 - 3 >= 0x10000) {
          goto LABEL_143;
        }
      }
      else
      {
        uint64_t v70 = v10;
        uint64_t v71 = (_OWORD *)(v69 + 16);
        unint64_t v72 = v69 + v67;
        uint64_t v73 = (long long *)(v5 + 16);
        do
        {
          long long v74 = *v73++;
          *v71++ = v74;
        }
        while ((unint64_t)v71 < v72);
LABEL_140:
        *(void *)(v16 + 24) += v67;
        uint64_t v75 = *(void *)(v16 + 8);
        if (v67 >= 0x10000)
        {
          unint64_t v95 = (unint64_t)(v75 - *(void *)v16) >> 3;
          *(_DWORD *)(v16 + 72) = 1;
          *(_DWORD *)(v16 + 76) = v95;
        }
        uint64_t v10 = v70;
        __int16 v76 = v23 - 3;
        *(_WORD *)(v75 + 4) = v67;
        *(_DWORD *)uint64_t v75 = v26 + 1;
        if (v23 - 3 >= 0x10000)
        {
LABEL_143:
          unint64_t v96 = (unint64_t)(v75 - *(void *)v16) >> 3;
          *(_DWORD *)(v16 + 72) = 2;
          *(_DWORD *)(v16 + 76) = v96;
        }
      }
      *(_WORD *)(v75 + 6) = v76;
      uint64_t v97 = v75 + 8;
      *(void *)(v16 + 8) = v75 + 8;
      unint64_t v5 = &v25[v23];
      uint64_t v8 = v137;
      if (&v25[v23] > v141)
      {
        unint64_t v15 = &v25[v23];
        long long v14 = v134;
        goto LABEL_7;
      }
      uint64_t v98 = v11;
      uint64_t v99 = v10;
      long long v14 = v134;
      while (2)
      {
        uint64_t v11 = v99;
        uint64_t v99 = v98;
        uint64_t v100 = (v5 - v137 - v11);
        if (v100 >= v9) {
          uint64_t v101 = v137;
        }
        else {
          uint64_t v101 = v130;
        }
        if ((v9 + ~v100) >= 3)
        {
          uint64_t v102 = v101 + v100;
          if (*(_DWORD *)(v101 + v100) == *(_DWORD *)v5)
          {
            if (v100 >= v9) {
              unint64_t v103 = (void *)v6;
            }
            else {
              unint64_t v103 = v134;
            }
            int v104 = (char *)(v5 + 4);
            uint64_t v105 = (void *)(v102 + 4);
            unint64_t v106 = (char *)v103 + (void)v5 - v102;
            if ((unint64_t)v106 >= v6) {
              unint64_t v106 = (char *)v6;
            }
            if (v106 - 7 <= v104)
            {
              uint64_t v110 = (char *)(v5 + 4);
              uint64_t v111 = v105;
              if (v104 < v106 - 3)
              {
LABEL_165:
                if (*v111 == *(_DWORD *)v110)
                {
                  v110 += 4;
                  ++v111;
                }
              }
            }
            else
            {
              unint64_t v107 = *(void *)v104 ^ *v105;
              if (v107)
              {
                unint64_t v108 = __clz(__rbit64(v107)) >> 3;
                if ((void *)((char *)v105 + v108) != v103) {
                  goto LABEL_161;
                }
LABEL_176:
                int v112 = &v104[v108];
                if (v58 <= (unint64_t)v112)
                {
                  unint64_t v118 = (unsigned __int8 *)v112;
                  unint64_t v119 = v135;
                  if ((unint64_t)v112 < v132)
                  {
LABEL_186:
                    if (*(_DWORD *)v119 == *(_DWORD *)v118)
                    {
                      v118 += 4;
                      v119 += 4;
                    }
                  }
                }
                else
                {
                  unint64_t v113 = *(void *)v112 ^ *(void *)v135;
                  if (v113)
                  {
                    v108 += __clz(__rbit64(v113)) >> 3;
                    if ((unint64_t)v5 > v60) {
                      goto LABEL_162;
                    }
LABEL_197:
                    *(_OWORD *)*(void *)(v16 + 24) = *(_OWORD *)v5;
                    uint64_t v97 = *(void *)(v16 + 8);
                    __int16 v109 = v108 + 1;
                    *(_WORD *)(v97 + 4) = 0;
                    *(_DWORD *)uint64_t v97 = 1;
                    if (v108 + 1 >= 0x10000)
                    {
LABEL_198:
                      unint64_t v120 = (unint64_t)(v97 - *(void *)v16) >> 3;
                      *(_DWORD *)(v16 + 72) = 2;
                      *(_DWORD *)(v16 + 76) = v120;
                    }
LABEL_147:
                    *(_WORD *)(v97 + 6) = v109;
                    v97 += 8;
                    v5 += v108 + 4;
                    *(void *)(v16 + 8) = v97;
                    uint64_t v98 = v11;
                    LODWORD(v10) = v99;
                    unint64_t v15 = v5;
                    if (v5 > v141) {
                      goto LABEL_7;
                    }
                    continue;
                  }
                  uint64_t v121 = 0;
                  uint64_t v122 = (uint64_t)&v5[v108 + 12];
                  while (1)
                  {
                    unint64_t v123 = (void *)(v122 + v121);
                    if (v122 + v121 >= v58) {
                      break;
                    }
                    uint64_t v124 = *(void *)(v59 + v121);
                    v121 += 8;
                    unint64_t v125 = *v123 ^ v124;
                    if (v125)
                    {
                      v108 += v121 + (__clz(__rbit64(v125)) >> 3);
                      if ((unint64_t)v5 <= v60) {
                        goto LABEL_197;
                      }
                      goto LABEL_162;
                    }
                  }
                  unint64_t v118 = &v5[v108 + 12 + v121];
                  unint64_t v119 = (unsigned __int8 *)(v59 + v121);
                  if ((unint64_t)v118 < v132) {
                    goto LABEL_186;
                  }
                }
                if ((unint64_t)v118 >= v131)
                {
                  if ((unint64_t)v118 >= v6) {
                    goto LABEL_196;
                  }
                }
                else
                {
                  if (*(unsigned __int16 *)v119 == *(unsigned __int16 *)v118)
                  {
                    v118 += 2;
                    v119 += 2;
                  }
                  if ((unint64_t)v118 >= v6)
                  {
LABEL_196:
                    v108 += v118 - (unsigned __int8 *)v112;
                    if ((unint64_t)v5 > v60) {
                      goto LABEL_162;
                    }
                    goto LABEL_197;
                  }
                }
                if (*v119 == *v118) {
                  ++v118;
                }
                goto LABEL_196;
              }
              unint64_t v114 = (char *)(v5 + 12);
              while (1)
              {
                int v115 = &v114[v107];
                if (&v114[v107] >= v106 - 7) {
                  break;
                }
                uint64_t v116 = *(void *)(v101 + v100 + 12 + v107);
                v107 += 8;
                unint64_t v117 = *(void *)v115 ^ v116;
                if (v117)
                {
                  unint64_t v108 = v107 + (__clz(__rbit64(v117)) >> 3);
                  if ((void *)((char *)v105 + v108) != v103) {
                    goto LABEL_161;
                  }
                  goto LABEL_176;
                }
              }
              uint64_t v110 = (char *)&v5[v107 + 12];
              uint64_t v111 = (_DWORD *)(v101 + v100 + v107 + 12);
              if (v110 < v106 - 3) {
                goto LABEL_165;
              }
            }
            if (v110 >= v106 - 1)
            {
              if (v110 >= v106) {
                goto LABEL_175;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v111 == *(unsigned __int16 *)v110)
              {
                v110 += 2;
                uint64_t v111 = (_DWORD *)((char *)v111 + 2);
              }
              if (v110 >= v106)
              {
LABEL_175:
                unint64_t v108 = v110 - v104;
                if ((void *)((char *)v105 + v110 - v104) == v103) {
                  goto LABEL_176;
                }
LABEL_161:
                if ((unint64_t)v5 <= v60) {
                  goto LABEL_197;
                }
LABEL_162:
                __int16 v109 = v108 + 1;
                *(_WORD *)(v97 + 4) = 0;
                *(_DWORD *)uint64_t v97 = 1;
                if (v108 + 1 >= 0x10000) {
                  goto LABEL_198;
                }
                goto LABEL_147;
              }
            }
            if (*(unsigned __int8 *)v111 == *v110) {
              ++v110;
            }
            goto LABEL_175;
          }
        }
        break;
      }
      LODWORD(v10) = v11;
      uint64_t v11 = v98;
      unint64_t v15 = v5;
LABEL_7:
      if (v15 >= v141)
      {
        a3 = v127;
        break;
      }
    }
  }
  *a3 = v11;
  a3[1] = v10;
  return v6 - (void)v5;
}

unint64_t ZSTD_compressBlock_lazy2_dedicatedDictSearch(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  unint64_t v6 = (unint64_t)&a4[a5];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v10 = *a3;
  LODWORD(v9) = a3[1];
  uint64_t v11 = *(void *)(a1 + 184);
  uint64_t v12 = *(char **)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v140 = (void *)(v7 + v8);
  unint64_t v132 = v13 + *(unsigned int *)(v11 + 24);
  if (a4 - (v7 + v8) - v132 + *(void *)v11) {
    long long v14 = a4;
  }
  else {
    long long v14 = a4 + 1;
  }
  unint64_t v144 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v14 >= v144) {
    goto LABEL_222;
  }
  unint64_t v131 = a3;
  unint64_t v136 = v6 - 1;
  unint64_t v137 = v6 - 3;
  unint64_t v133 = v6 - 32;
  unsigned int v142 = v8 + v13 - v12;
  uint64_t v134 = v13 - v142;
  unint64_t v139 = *(void *)v11;
  uint64_t v141 = *(void *)(v11 + 8);
  while (2)
  {
    unint64_t v15 = v14 + 1;
    int v16 = v14 - v7 - v10;
    uint64_t v17 = (v16 + 1);
    uint64_t v18 = v13 + v17 - v142;
    if (v17 >= v8) {
      uint64_t v18 = v7 + v17;
    }
    unsigned int v138 = v9;
    if ((v8 - v16 - 5) <= 0xFFFFFFFC && *(_DWORD *)v18 == *(_DWORD *)v15)
    {
      if (v17 >= v8) {
        uint64_t v19 = (char *)v6;
      }
      else {
        uint64_t v19 = v12;
      }
      unint64_t v20 = ZSTD_count_2segments(v14 + 5, (char *)(v18 + 4), v6, v19, v140) + 4;
    }
    else
    {
      unint64_t v20 = 0;
    }
    uint64_t v145 = 999999999;
    unint64_t BestMatch_dedicatedDictSearch_selectMLS = ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS(a1, v14, v6, &v145);
    if (BestMatch_dedicatedDictSearch_selectMLS <= v20) {
      unint64_t v22 = v20;
    }
    else {
      unint64_t v22 = BestMatch_dedicatedDictSearch_selectMLS;
    }
    if (v22 < 4)
    {
      v14 += ((v14 - v5) >> 8) + 1;
      uint64_t v12 = (char *)v139;
      LODWORD(v9) = v138;
      goto LABEL_7;
    }
    if (BestMatch_dedicatedDictSearch_selectMLS <= v20)
    {
      uint64_t v23 = 0;
    }
    else
    {
      unint64_t v15 = v14;
      uint64_t v23 = v145;
    }
    unint64_t v24 = v22;
    uint64_t v25 = v23;
    uint64_t v26 = v15;
    if ((unint64_t)v14 >= v144)
    {
LABEL_25:
      uint64_t v27 = a2;
      if (!v25) {
        goto LABEL_117;
      }
      goto LABEL_26;
    }
    while (1)
    {
      uint64_t v26 = v14 + 1;
      uint64_t v40 = (v14 + 1 - v7 - v10);
      if (v40 >= v8) {
        unsigned int v41 = (_DWORD *)(v7 + v40);
      }
      else {
        unsigned int v41 = (_DWORD *)(v141 + v40 - v142);
      }
      if ((v8 + ~v40) < 3 || *v41 != *(_DWORD *)v26) {
        goto LABEL_92;
      }
      if (v40 >= v8) {
        unint64_t v42 = (char *)v6;
      }
      else {
        unint64_t v42 = (char *)v139;
      }
      unint64_t v43 = v14 + 5;
      uint64_t v44 = v41 + 1;
      unint64_t v45 = (unint64_t)&v14[v42 - (char *)(v41 + 1) + 5];
      if (v45 >= v6) {
        unint64_t v45 = v6;
      }
      if (v45 - 7 <= (unint64_t)v43)
      {
        int v50 = v14 + 5;
        BOOL v51 = v41 + 1;
        uint64_t v48 = v8 + v7 + 8;
        unint64_t v47 = v6 - 7;
        if ((unint64_t)v43 < v45 - 3)
        {
LABEL_55:
          if (*v51 == *(_DWORD *)v50)
          {
            v50 += 4;
            ++v51;
          }
        }
      }
      else
      {
        unint64_t v46 = *(void *)v43 ^ *v44;
        uint64_t v48 = v8 + v7 + 8;
        unint64_t v47 = v6 - 7;
        if (v46)
        {
          unint64_t v49 = __clz(__rbit64(v46)) >> 3;
          if ((char *)v44 + v49 != v42) {
            goto LABEL_87;
          }
          goto LABEL_66;
        }
        __int16 v55 = v14 + 13;
        while (1)
        {
          uint64_t v56 = &v55[v46];
          if ((unint64_t)&v55[v46] >= v45 - 7) {
            break;
          }
          uint64_t v57 = *(void *)((char *)v41 + v46 + 12);
          v46 += 8;
          unint64_t v58 = *(void *)v56 ^ v57;
          if (v58)
          {
            unint64_t v49 = v46 + (__clz(__rbit64(v58)) >> 3);
            if ((char *)v44 + v49 != v42) {
              goto LABEL_87;
            }
            goto LABEL_66;
          }
        }
        int v50 = &v14[v46 + 13];
        BOOL v51 = (_DWORD *)((char *)v41 + v46 + 12);
        if ((unint64_t)v50 < v45 - 3) {
          goto LABEL_55;
        }
      }
      if ((unint64_t)v50 >= v45 - 1)
      {
        if ((unint64_t)v50 >= v45) {
          goto LABEL_65;
        }
LABEL_63:
        if (*(unsigned __int8 *)v51 == *v50) {
          ++v50;
        }
        goto LABEL_65;
      }
      if (*(unsigned __int16 *)v51 == *(unsigned __int16 *)v50)
      {
        v50 += 2;
        BOOL v51 = (_DWORD *)((char *)v51 + 2);
      }
      if ((unint64_t)v50 < v45) {
        goto LABEL_63;
      }
LABEL_65:
      unint64_t v49 = v50 - v43;
      if ((char *)v44 + v50 - v43 != v42) {
        goto LABEL_87;
      }
LABEL_66:
      unint64_t v52 = &v43[v49];
      if (v47 <= (unint64_t)v52)
      {
        uint64_t v59 = v52;
        unint64_t v60 = (_DWORD *)(v7 + v8);
        if ((unint64_t)v52 >= v137) {
          goto LABEL_77;
        }
        goto LABEL_75;
      }
      unint64_t v53 = *(void *)v52 ^ *v140;
      if (!v53)
      {
        uint64_t v68 = 0;
        uint64_t v69 = (uint64_t)&v14[v49 + 13];
        while (1)
        {
          uint64_t v70 = (void *)(v69 + v68);
          if (v69 + v68 >= v47) {
            break;
          }
          uint64_t v71 = *(void *)(v48 + v68);
          v68 += 8;
          unint64_t v72 = *v70 ^ v71;
          if (v72)
          {
            unint64_t v54 = v68 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_86;
          }
        }
        uint64_t v59 = &v14[v49 + 13 + v68];
        unint64_t v60 = (_DWORD *)(v48 + v68);
        if ((unint64_t)v59 >= v137)
        {
LABEL_77:
          if ((unint64_t)v59 >= v136)
          {
            if ((unint64_t)v59 >= v6)
            {
LABEL_85:
              unint64_t v54 = v59 - v52;
              goto LABEL_86;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v60 == *(unsigned __int16 *)v59)
            {
              v59 += 2;
              unint64_t v60 = (_DWORD *)((char *)v60 + 2);
            }
            if ((unint64_t)v59 >= v6) {
              goto LABEL_85;
            }
          }
          if (*(unsigned __int8 *)v60 == *v59) {
            ++v59;
          }
          goto LABEL_85;
        }
LABEL_75:
        if (*v60 == *(_DWORD *)v59)
        {
          v59 += 4;
          ++v60;
        }
        goto LABEL_77;
      }
      unint64_t v54 = __clz(__rbit64(v53)) >> 3;
LABEL_86:
      v49 += v54;
LABEL_87:
      unint64_t v61 = v49 + 4;
      char v63 = (v49 != -5) & __CFADD__(v49, 5);
      int v62 = 3 * v22 + (__clz(v23 + 1) ^ 0xFFFFFFE0) + 2;
      if (v63) {
        char v63 = 1;
      }
      else {
        char v63 = 3 * (int)v61 <= v62;
      }
      if (!v63)
      {
        uint64_t v23 = 0;
        unint64_t v22 = v61;
        unint64_t v15 = v14 + 1;
      }
LABEL_92:
      uint64_t v145 = 999999999;
      unint64_t v24 = ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS(a1, v14 + 1, v6, &v145);
      if (v24 < 4
        || (uint64_t v25 = v145,
            (int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 1) <= (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 5)))
      {
        if ((unint64_t)v26 >= v144) {
          break;
        }
        uint64_t v26 = v14 + 2;
        uint64_t v64 = (v14 + 2 - v7 - v10);
        uint64_t v65 = v141 + v64 - v142;
        if (v64 >= v8) {
          uint64_t v65 = v7 + v64;
        }
        if ((v8 + ~v64) >= 3 && *(_DWORD *)v65 == *(_DWORD *)v26)
        {
          uint64_t v66 = (char *)(v64 >= v8 ? v6 : v139);
          unint64_t v67 = ZSTD_count_2segments(v14 + 6, (char *)(v65 + 4), v6, v66, v140);
          if (v67 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 2) < 4 * ((int)v67 + 4))
          {
            uint64_t v23 = 0;
            unint64_t v22 = v67 + 4;
            unint64_t v15 = v14 + 2;
          }
        }
        uint64_t v145 = 999999999;
        unint64_t v24 = ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS(a1, v14 + 2, v6, &v145);
        if (v24 < 4) {
          break;
        }
        uint64_t v25 = v145;
        if ((int)((__clz(v145 + 1) ^ 0xFFFFFFE0) + 4 * v24 + 1) <= (int)((__clz(v23 + 1) ^ 0xFFFFFFE0) + 4 * v22 + 8)) {
          break;
        }
      }
      long long v14 = v26;
      unint64_t v15 = v26;
      uint64_t v23 = v25;
      unint64_t v22 = v24;
      if ((unint64_t)v26 >= v144) {
        goto LABEL_25;
      }
    }
    unint64_t v24 = v22;
    LODWORD(v25) = v23;
    uint64_t v26 = v15;
    uint64_t v27 = a2;
    if (!v23)
    {
LABEL_117:
      uint64_t v12 = (char *)v139;
      uint64_t v35 = v8 + v7 + 8;
      unint64_t v34 = v6 - 7;
      unint64_t v36 = v6 - 32;
      uint64_t v29 = v134;
      uint64_t v9 = v138;
      unint64_t v38 = v26 - v5;
      unint64_t v39 = *(_OWORD **)(v27 + 24);
      if ((unint64_t)v26 <= v133) {
        goto LABEL_118;
      }
LABEL_127:
      uint64_t v74 = v9;
      if ((unint64_t)v5 <= v36)
      {
        unsigned int v82 = (char *)v39 + v36 - (void)v5;
        unint64_t v83 = (long long *)v5;
        unint64_t v84 = v39;
        do
        {
          long long v85 = *v83++;
          *v84++ = v85;
        }
        while (v84 < (_OWORD *)v82);
        long long v81 = (_OWORD *)v36;
        if (v36 < (unint64_t)v26) {
          goto LABEL_133;
        }
      }
      else
      {
        long long v81 = v5;
        unsigned int v82 = v39;
        if (v5 >= v26) {
          goto LABEL_152;
        }
LABEL_133:
        if ((unint64_t)v5 <= v36) {
          unsigned int v86 = (char *)v36;
        }
        else {
          unsigned int v86 = v5;
        }
        unint64_t v87 = v26 - v86;
        if ((unint64_t)(v26 - v86) < 8)
        {
          unint64_t v88 = (char *)v81;
          goto LABEL_151;
        }
        if ((unint64_t)((char *)v39 - v5) < 0x20)
        {
          unint64_t v88 = (char *)v81;
          goto LABEL_151;
        }
        if (v87 >= 0x20)
        {
          unint64_t v89 = v87 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v90 = v81 + 1;
          __int16 v91 = (_OWORD *)((char *)v39 + v86 - v5 + 16);
          unint64_t v92 = v87 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v93 = *v90;
            *(v91 - 1) = *(v90 - 1);
            *__int16 v91 = v93;
            v90 += 2;
            v91 += 2;
            v92 -= 32;
          }
          while (v92);
          if (v87 != v89)
          {
            if ((v87 & 0x18) == 0)
            {
              unint64_t v88 = (char *)v81 + v89;
              v82 += v89;
              goto LABEL_151;
            }
            goto LABEL_146;
          }
        }
        else
        {
          unint64_t v89 = 0;
LABEL_146:
          v82 += v87 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v88 = (char *)v81 + (v87 & 0xFFFFFFFFFFFFFFF8);
          char v94 = (uint64_t *)((char *)v81 + v89);
          unint64_t v95 = (void *)((char *)v39 + &v86[v89] - v5);
          unint64_t v96 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v97 = *v94++;
            *v95++ = v97;
            v96 += 8;
          }
          while (v96);
          if (v87 != (v87 & 0xFFFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_151:
              char v98 = *v88++;
              *v82++ = v98;
            }
            while (v88 < v26);
          }
        }
      }
LABEL_152:
      *(void *)(v27 + 24) += v38;
      uint64_t v79 = *(void *)(v27 + 8);
      if (v38 >= 0x10000)
      {
        unint64_t v99 = (unint64_t)(v79 - *(void *)v27) >> 3;
        *(_DWORD *)(v27 + 72) = 1;
        *(_DWORD *)(v27 + 76) = v99;
      }
      uint64_t v9 = v74;
      __int16 v80 = v24 - 3;
      *(_WORD *)(v79 + 4) = v38;
      *(_DWORD *)uint64_t v79 = v25 + 1;
      if (v24 - 3 >= 0x10000) {
        goto LABEL_155;
      }
      goto LABEL_156;
    }
LABEL_26:
    unint64_t v28 = v7 + v8;
    if (v8 > (int)v26 - ((int)v25 + (int)v7) + 2) {
      unint64_t v28 = v132;
    }
    uint64_t v29 = v134;
    if (v8 <= (int)v26 - ((int)v25 + (int)v7) + 2) {
      uint64_t v30 = v7;
    }
    else {
      uint64_t v30 = v134;
    }
    if (v26 > v5)
    {
      uint64_t v31 = (v26 - (v25 + v7) + 2);
      if (v30 + v31 > v28)
      {
        uint64_t v32 = (unsigned __int8 *)(v30 + v31 - 1);
        uint64_t v33 = (unsigned __int8 *)(v26 - 1);
        uint64_t v12 = (char *)v139;
        uint64_t v35 = v8 + v7 + 8;
        unint64_t v34 = v6 - 7;
        unint64_t v36 = v6 - 32;
        while (*v33 == *v32)
        {
          ++v24;
          uint64_t v37 = v33 - 1;
          if (v33 > (unsigned __int8 *)v5)
          {
            --v33;
            char v63 = (unint64_t)v32-- > v28;
            if (v63) {
              continue;
            }
          }
          uint64_t v26 = (char *)(v37 + 1);
          uint64_t v9 = v10;
          uint64_t v10 = (v25 - 2);
          unint64_t v38 = v26 - v5;
          unint64_t v39 = *(_OWORD **)(v27 + 24);
          if ((unint64_t)v26 <= v133) {
            goto LABEL_118;
          }
          goto LABEL_127;
        }
        uint64_t v26 = (char *)(v33 + 1);
        uint64_t v9 = v10;
        uint64_t v10 = (v25 - 2);
        unint64_t v38 = v33 + 1 - (unsigned __int8 *)v5;
        unint64_t v39 = *(_OWORD **)(v27 + 24);
        if ((unint64_t)v26 <= v133) {
          goto LABEL_118;
        }
        goto LABEL_127;
      }
    }
    uint64_t v12 = (char *)v139;
    uint64_t v35 = v8 + v7 + 8;
    unint64_t v34 = v6 - 7;
    unint64_t v36 = v6 - 32;
    uint64_t v9 = v10;
    uint64_t v10 = (v25 - 2);
    unint64_t v38 = v26 - v5;
    unint64_t v39 = *(_OWORD **)(v27 + 24);
    if ((unint64_t)v26 > v133) {
      goto LABEL_127;
    }
LABEL_118:
    _OWORD *v39 = *(_OWORD *)v5;
    uint64_t v73 = *(void *)(v27 + 24);
    if (v38 > 0x10)
    {
      uint64_t v74 = v9;
      uint64_t v75 = (_OWORD *)(v73 + 16);
      unint64_t v76 = v73 + v38;
      uint64_t v77 = (long long *)(v5 + 16);
      do
      {
        long long v78 = *v77++;
        *v75++ = v78;
      }
      while ((unint64_t)v75 < v76);
      goto LABEL_152;
    }
    *(void *)(v27 + 24) = v73 + v38;
    uint64_t v79 = *(void *)(v27 + 8);
    __int16 v80 = v24 - 3;
    *(_WORD *)(v79 + 4) = v38;
    *(_DWORD *)uint64_t v79 = v25 + 1;
    if (v24 - 3 >= 0x10000)
    {
LABEL_155:
      unint64_t v100 = (unint64_t)(v79 - *(void *)v27) >> 3;
      *(_DWORD *)(v27 + 72) = 2;
      *(_DWORD *)(v27 + 76) = v100;
    }
LABEL_156:
    *(_WORD *)(v79 + 6) = v80;
    uint64_t v101 = v79 + 8;
    *(void *)(v27 + 8) = v79 + 8;
    unint64_t v5 = &v26[v24];
    if ((unint64_t)&v26[v24] > v144)
    {
      long long v14 = &v26[v24];
      uint64_t v13 = v141;
      goto LABEL_7;
    }
    uint64_t v102 = v10;
    uint64_t v103 = v9;
    uint64_t v13 = v141;
    while (2)
    {
      uint64_t v10 = v103;
      uint64_t v103 = v102;
      uint64_t v104 = (v5 - v7 - v10);
      if (v104 >= v8) {
        uint64_t v105 = v7;
      }
      else {
        uint64_t v105 = v29;
      }
      if ((v8 + ~v104) >= 3)
      {
        uint64_t v106 = v105 + v104;
        if (*(_DWORD *)(v105 + v104) == *(_DWORD *)v5)
        {
          if (v104 >= v8) {
            unint64_t v107 = (void *)v6;
          }
          else {
            unint64_t v107 = v12;
          }
          unint64_t v108 = v5 + 4;
          __int16 v109 = (void *)(v106 + 4);
          uint64_t v110 = (char *)v107 + (void)v5 - v106;
          if ((unint64_t)v110 >= v6) {
            uint64_t v110 = (char *)v6;
          }
          if (v110 - 7 <= v108)
          {
            unint64_t v114 = v5 + 4;
            int v115 = v109;
            if (v108 < v110 - 3)
            {
LABEL_177:
              if (*v115 == *(_DWORD *)v114)
              {
                v114 += 4;
                ++v115;
              }
            }
          }
          else
          {
            unint64_t v111 = *(void *)v108 ^ *v109;
            if (v111)
            {
              unint64_t v112 = __clz(__rbit64(v111)) >> 3;
              if ((void *)((char *)v109 + v112) != v107) {
                goto LABEL_173;
              }
LABEL_188:
              uint64_t v116 = &v108[v112];
              if (v34 <= (unint64_t)v116)
              {
                uint64_t v122 = v116;
                unint64_t v123 = (_DWORD *)(v7 + v8);
                if ((unint64_t)v116 < v137)
                {
LABEL_198:
                  if (*v123 == *(_DWORD *)v122)
                  {
                    v122 += 4;
                    ++v123;
                  }
                }
              }
              else
              {
                unint64_t v117 = *(void *)v116 ^ *v140;
                if (v117)
                {
                  v112 += __clz(__rbit64(v117)) >> 3;
                  if ((unint64_t)v5 > v36) {
                    goto LABEL_174;
                  }
LABEL_209:
                  *(_OWORD *)*(void *)(v27 + 24) = *(_OWORD *)v5;
                  uint64_t v101 = *(void *)(v27 + 8);
                  __int16 v113 = v112 + 1;
                  *(_WORD *)(v101 + 4) = 0;
                  *(_DWORD *)uint64_t v101 = 1;
                  if (v112 + 1 >= 0x10000)
                  {
LABEL_210:
                    unint64_t v124 = (unint64_t)(v101 - *(void *)v27) >> 3;
                    *(_DWORD *)(v27 + 72) = 2;
                    *(_DWORD *)(v27 + 76) = v124;
                  }
LABEL_159:
                  *(_WORD *)(v101 + 6) = v113;
                  v101 += 8;
                  v5 += v112 + 4;
                  *(void *)(v27 + 8) = v101;
                  uint64_t v102 = v10;
                  LODWORD(v9) = v103;
                  long long v14 = v5;
                  if ((unint64_t)v5 > v144) {
                    goto LABEL_7;
                  }
                  continue;
                }
                uint64_t v125 = 0;
                uint64_t v126 = (uint64_t)&v5[v112 + 12];
                while (1)
                {
                  int v127 = (void *)(v126 + v125);
                  if (v126 + v125 >= v34) {
                    break;
                  }
                  uint64_t v128 = *(void *)(v35 + v125);
                  v125 += 8;
                  unint64_t v129 = *v127 ^ v128;
                  if (v129)
                  {
                    v112 += v125 + (__clz(__rbit64(v129)) >> 3);
                    if ((unint64_t)v5 <= v36) {
                      goto LABEL_209;
                    }
                    goto LABEL_174;
                  }
                }
                uint64_t v122 = &v5[v112 + 12 + v125];
                unint64_t v123 = (_DWORD *)(v35 + v125);
                if ((unint64_t)v122 < v137) {
                  goto LABEL_198;
                }
              }
              if ((unint64_t)v122 >= v136)
              {
                if ((unint64_t)v122 >= v6) {
                  goto LABEL_208;
                }
              }
              else
              {
                if (*(unsigned __int16 *)v123 == *(unsigned __int16 *)v122)
                {
                  v122 += 2;
                  unint64_t v123 = (_DWORD *)((char *)v123 + 2);
                }
                if ((unint64_t)v122 >= v6)
                {
LABEL_208:
                  v112 += v122 - v116;
                  if ((unint64_t)v5 > v36) {
                    goto LABEL_174;
                  }
                  goto LABEL_209;
                }
              }
              if (*(unsigned __int8 *)v123 == *v122) {
                ++v122;
              }
              goto LABEL_208;
            }
            unint64_t v118 = v5 + 12;
            while (1)
            {
              unint64_t v119 = &v118[v111];
              if (&v118[v111] >= v110 - 7) {
                break;
              }
              uint64_t v120 = *(void *)(v105 + v104 + 12 + v111);
              v111 += 8;
              unint64_t v121 = *(void *)v119 ^ v120;
              if (v121)
              {
                unint64_t v112 = v111 + (__clz(__rbit64(v121)) >> 3);
                if ((void *)((char *)v109 + v112) != v107) {
                  goto LABEL_173;
                }
                goto LABEL_188;
              }
            }
            unint64_t v114 = &v5[v111 + 12];
            int v115 = (_DWORD *)(v105 + v104 + v111 + 12);
            if (v114 < v110 - 3) {
              goto LABEL_177;
            }
          }
          if (v114 >= v110 - 1)
          {
            if (v114 >= v110) {
              goto LABEL_187;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v115 == *(unsigned __int16 *)v114)
            {
              v114 += 2;
              int v115 = (_DWORD *)((char *)v115 + 2);
            }
            if (v114 >= v110)
            {
LABEL_187:
              unint64_t v112 = v114 - v108;
              if ((void *)((char *)v109 + v114 - v108) == v107) {
                goto LABEL_188;
              }
LABEL_173:
              if ((unint64_t)v5 <= v36) {
                goto LABEL_209;
              }
LABEL_174:
              __int16 v113 = v112 + 1;
              *(_WORD *)(v101 + 4) = 0;
              *(_DWORD *)uint64_t v101 = 1;
              if (v112 + 1 >= 0x10000) {
                goto LABEL_210;
              }
              goto LABEL_159;
            }
          }
          if (*(unsigned __int8 *)v115 == *v114) {
            ++v114;
          }
          goto LABEL_187;
        }
      }
      break;
    }
    LODWORD(v9) = v10;
    uint64_t v10 = v102;
    long long v14 = v5;
LABEL_7:
    if ((unint64_t)v14 < v144) {
      continue;
    }
    break;
  }
  a3 = v131;
LABEL_222:
  *a3 = v10;
  a3[1] = v9;
  return v6 - (void)v5;
}

uint64_t ZSTD_resetSeqStore(uint64_t result)
{
  *(void *)(result + 24) = *(void *)(result + 16);
  *(void *)(result + 8) = *(void *)result;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

uint64_t ZSTD_generateSequences(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10 = a5 + (a5 >> 8);
  unint64_t v11 = (0x20000 - a5) >> 11;
  if (a5 >= 0x20000) {
    unint64_t v11 = 0;
  }
  uint64_t v12 = v10 + v11;
  uint64_t v13 = malloc_type_malloc(v10 + v11, 0x26AA08A0uLL);
  if (!v13) {
    return -64;
  }
  long long v14 = v13;
  *(void *)(a1 + 592) = 1;
  *(void *)(a1 + 600) = a2;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = a3;
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = 0;
  v18[0] = (uint64_t)v13;
  v18[1] = v12;
  v18[2] = 0;
  v17[0] = a4;
  v17[1] = a5;
  v17[2] = 0;
  uint64_t v15 = *(void *)(a1 + 140);
  *(void *)(a1 + 140) = 0x100000001;
  ZSTD_compressStream2(a1, v18, v17, 2u);
  *(void *)(a1 + 140) = v15;
  free(v14);
  return *(void *)(a1 + 608);
}

void ZSTD_compress2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = 0;
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = 0;
  v7[0] = a4;
  v7[1] = a5;
  v7[2] = 0;
  uint64_t v6 = *(void *)(a1 + 140);
  *(void *)(a1 + 140) = 0x100000001;
  ZSTD_compressStream2(a1, v8, v7, 2u);
  *(void *)(a1 + 140) = v6;
}

uint64_t ZSTD_mergeBlockDelimiters(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = a1;
  do
  {
    if (*(_DWORD *)v4 || *(_DWORD *)(v4 + 8))
    {
      *(_OWORD *)(a1 + 16 * result++) = *(_OWORD *)v4;
    }
    else if (a2 != 1)
    {
      *(_DWORD *)(v4 + 20) += *(_DWORD *)(v4 + 4);
    }
    v4 += 16;
    --a2;
  }
  while (a2);
  return result;
}

uint64_t ZSTD_writeSkippableFrame(_DWORD *a1, size_t a2, void *__src, size_t __n, unsigned int a5)
{
  size_t v5 = __n + 8;
  if (__n + 8 > a2) {
    return -70;
  }
  if (HIDWORD(__n)) {
    return -72;
  }
  if (a5 > 0xF) {
    return -42;
  }
  *a1 = a5 + 407710288;
  a1[1] = __n;
  memcpy(a1 + 2, __src, __n);
  return v5;
}

uint64_t ZSTD_writeLastEmptyBlock(uint64_t a1, unint64_t a2)
{
  if (a2 < 3) {
    return -70;
  }
  *(_WORD *)a1 = 1;
  *(unsigned char *)(a1 + 2) = 0;
  return 3;
}

uint64_t ZSTD_referenceExternalSequences(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a1 != 1) {
    return -60;
  }
  if (*(_DWORD *)(a1 + 280)) {
    return -40;
  }
  uint64_t result = 0;
  *(void *)(a1 + 2832) = a2;
  *(void *)(a1 + 2856) = a3;
  *(void *)(a1 + 2864) = a3;
  *(void *)(a1 + 2848) = 0;
  *(void *)(a1 + 2840) = 0;
  return result;
}

uint64_t ZSTD_compressContinue(int32x2_t *a1, unsigned char *a2, unint64_t a3, char *a4, size_t a5)
{
  return ZSTD_compressContinue_internal(a1, a2, a3, a4, a5, 1, 0);
}

uint64_t ZSTD_compressContinue_internal(int32x2_t *a1, unsigned char *a2, unint64_t a3, char *__src, size_t __n, int a6, int a7)
{
  if (!a1->i32[0]) {
    return -60;
  }
  unint64_t v10 = a3;
  unint64_t v11 = a2;
  unint64_t v13 = 0;
  if (a6 && a1->i32[0] == 1)
  {
    int v14 = a7;
    unint64_t v15 = ZSTD_writeFrameHeader(a2, a3, &a1[23], *(void *)&a1[55] - 1, a1[44].u32[0]);
    unint64_t v13 = v15;
    if (v15 > 0xFFFFFFFFFFFFFF88) {
      return v13;
    }
    v10 -= v15;
    v11 += v15;
    a1->i32[0] = 2;
    a7 = v14;
  }
  if (!__n) {
    return v13;
  }
  unint64_t v54 = (uint32x4_t *)&a1[361];
  int v16 = (char *)a1[361];
  int v53 = a7;
  if (v16 == __src)
  {
    int32x2_t v17 = a1[363];
    unsigned __int32 v19 = a1[364].u32[1];
    unsigned __int32 v18 = a1[364].u32[0];
  }
  else
  {
    int32x2_t v17 = a1[362];
    unsigned __int32 v18 = v16 - v17.i32[0];
    unsigned __int32 v19 = a1[364].u32[0];
    a1[364].i32[1] = v19;
    a1[364].i32[0] = v16 - v17.i32[0];
    a1[363] = v17;
    a1[362] = (int32x2_t)(__src - &v16[-*(void *)&v17]);
    if (v16 - v17.i32[0] - v19 <= 7)
    {
      a1[364].i32[1] = v18;
      unsigned __int32 v19 = v16 - v17.i32[0];
    }
  }
  unint64_t v22 = &__src[__n];
  v54->i64[0] = (uint64_t)&__src[__n];
  if ((unint64_t)&__src[__n] > *(void *)&v17 + (unint64_t)v19
    && *(void *)&v17 + (unint64_t)v18 > (unint64_t)__src)
  {
    uint64_t v23 = (uint64_t)&v22[-*(void *)&v17];
    if (v23 > v18) {
      LODWORD(v23) = v18;
    }
    a1[364].i32[1] = v23;
  }
  if (v16 != __src) {
    a1[365].i32[1] = v18;
  }
  if (a1[35].i32[0])
  {
    unint64_t v24 = (char *)a1[89];
    if (v24 == __src)
    {
      int32x2_t v25 = a1[91];
      unsigned __int32 v27 = a1[92].u32[1];
      LODWORD(v26) = a1[92].i32[0];
    }
    else
    {
      int32x2_t v25 = a1[90];
      uint64_t v26 = &v24[-*(void *)&v25];
      unsigned __int32 v27 = a1[92].u32[0];
      a1[92].i32[1] = v27;
      a1[92].i32[0] = (int)v26;
      a1[91] = v25;
      a1[90] = (int32x2_t)(__src - v26);
      if (v26 - v27 <= 7)
      {
        a1[92].i32[1] = (int)v26;
        unsigned __int32 v27 = v26;
      }
    }
    a1[89] = (int32x2_t)v22;
    if ((unint64_t)v22 > *(void *)&v25 + (unint64_t)v27
      && *(void *)&v25 + (unint64_t)v26 > (unint64_t)__src)
    {
      uint64_t v28 = (uint64_t)&v22[-*(void *)&v25];
      if (v28 > v26) {
        LODWORD(v28) = v26;
      }
      a1[92].i32[1] = v28;
    }
  }
  if (!a6)
  {
    ZSTD_overflowCorrectIfNeeded(v54, &a1[46], &a1[23], (int)__src, (int)v22);
    unint64_t v20 = ZSTD_compressBlock_internal((uint64_t)a1, v11, v10, __src, __n, 0);
    if (v20 <= 0xFFFFFFFFFFFFFF88) {
      goto LABEL_79;
    }
    return v20;
  }
  BOOL v51 = v11;
  unint64_t v49 = v13;
  unint64_t v29 = (unint64_t)a1[54];
  __int32 v30 = a1[23].i32[1];
  if (a1[27].i32[1]) {
    ZSTD_XXH64_update((unsigned int *)&a1[58], __src, __n);
  }
  unint64_t v52 = (int8x16_t *)&a1[359];
  unint64_t v31 = (unint64_t)v11;
  size_t v50 = __n;
  uint64_t v32 = a1 + 23;
  do
  {
    BOOL v37 = v29 >= __n;
    if (v10 < 6) {
      return -70;
    }
    if (__n < v29) {
      unint64_t v29 = __n;
    }
    ZSTD_overflowCorrectIfNeeded(v54, &a1[46], v32, (int)__src, __src + v29);
    if (a1[365].i32[0] + (1 << v30) >= (__src + v29 - a1[362].i32[0]))
    {
      unsigned __int32 v38 = a1[364].u32[1];
      if (a1[365].i32[1] >= v38) {
        goto LABEL_43;
      }
LABEL_53:
      a1[365].i32[1] = v38;
      int v34 = v37 & v53;
      if (!*(void *)&a1[30]) {
        goto LABEL_54;
      }
LABEL_44:
      unint64_t v39 = ZSTD_buildSeqStore(a1, (unint64_t)__src, v29);
      unint64_t v20 = v39;
      if (v39 > 0xFFFFFFFFFFFFFF88) {
        return v20;
      }
      if (!v39)
      {
        if (!a1[78].i32[0]
          && *(void *)&a1[80] - *(void *)&a1[79] <= 0x1FuLL
          && *(void *)&a1[82] - *(void *)&a1[81] <= 9uLL
          && ZSTD_isRLE(__src, v29))
        {
          char v44 = *__src;
          *(_WORD *)unint64_t v31 = v34 | (8 * v29) | 2;
          *(unsigned char *)(v31 + 2) = v29 >> 13;
          *(unsigned char *)(v31 + 3) = v44;
          unint64_t v20 = 4;
LABEL_50:
          if (*(_DWORD *)(v52->i64[0] + 4568) == 2) {
            *(_DWORD *)(v52->i64[0] + 4568) = 1;
          }
          goto LABEL_37;
        }
        unint64_t v40 = ZSTD_compressSuperBlock((uint64_t)a1, v31, v10, __src, v29, v34);
        if (v40 != -70)
        {
          unint64_t v20 = v40;
          if (v40 > 0xFFFFFFFFFFFFFF88) {
            return v20;
          }
          unsigned int v42 = a1[26].u32[1];
          char v43 = v42 <= 7 ? 6 : v42 - 1;
          if (v40 && v40 < v29 - (v29 >> v43) + 1)
          {
            *unint64_t v52 = vextq_s8(*v52, *v52, 8uLL);
            goto LABEL_50;
          }
        }
      }
      unint64_t v20 = v29 + 3;
      if (v29 + 3 > v10) {
        return -70;
      }
      *(_WORD *)unint64_t v31 = v34 | (8 * v29);
      *(unsigned char *)(v31 + 2) = v29 >> 13;
      memcpy((void *)(v31 + 3), __src, v29);
      if (v20 > 0xFFFFFFFFFFFFFF88) {
        return v20;
      }
      goto LABEL_50;
    }
    a1[365].i32[0] = 0;
    a1[384] = 0;
    unsigned __int32 v38 = a1[364].u32[1];
    if (a1[365].i32[1] < v38) {
      goto LABEL_53;
    }
LABEL_43:
    int v34 = v37 & v53;
    if (a1[30]) {
      goto LABEL_44;
    }
LABEL_54:
    unint64_t v41 = ZSTD_compressBlock_internal((uint64_t)a1, (unsigned char *)(v31 + 3), v10 - 3, __src, v29, 1);
    unint64_t v20 = v41;
    if (v41 > 0xFFFFFFFFFFFFFF88) {
      return v20;
    }
    if (v41 == 1)
    {
      int v33 = 8 * v29;
      __int16 v35 = 2;
      goto LABEL_36;
    }
    if (v41)
    {
      int v33 = v34;
      int v34 = 8 * v41;
      __int16 v35 = 4;
LABEL_36:
      int v36 = v34 | v33;
      *(_WORD *)unint64_t v31 = v36 | v35;
      *(unsigned char *)(v31 + 2) = BYTE2(v36);
      unint64_t v20 = v41 + 3;
      uint64_t v32 = a1 + 23;
      goto LABEL_37;
    }
    unint64_t v20 = v29 + 3;
    if (v29 + 3 > v10) {
      return -70;
    }
    *(_WORD *)unint64_t v31 = v34 | (8 * v29);
    *(unsigned char *)(v31 + 2) = v29 >> 13;
    memcpy((void *)(v31 + 3), __src, v29);
    uint64_t v32 = a1 + 23;
    if (v20 >= 0xFFFFFFFFFFFFFF89) {
      return v20;
    }
LABEL_37:
    v31 += v20;
    v10 -= v20;
    a1[78].i32[0] = 0;
    __src += v29;
    __n -= v29;
  }
  while (__n);
  if (v53 && v31 > (unint64_t)v51) {
    a1->i32[0] = 3;
  }
  unint64_t v20 = v31 - (void)v51;
  unint64_t v13 = v49;
  __n = v50;
  if (v20 <= 0xFFFFFFFFFFFFFF88)
  {
LABEL_79:
    unint64_t v45 = (unint64_t)a1[55];
    int32x2_t v46 = (int32x2_t)(*(void *)&a1[56] + __n);
    unint64_t v47 = *(void *)&a1[57] + v20 + v13;
    a1[56] = v46;
    a1[57] = (int32x2_t)v47;
    if (*(void *)&v46 + 1 <= v45 || v45 == 0) {
      v20 += v13;
    }
    else {
      return -72;
    }
  }
  return v20;
}

uint64_t ZSTD_getBlockSize(uint64_t a1)
{
  unsigned int v1 = 1 << *(_DWORD *)(a1 + 188);
  if (v1 >= 0x20000) {
    return 0x20000;
  }
  else {
    return v1;
  }
}

uint64_t ZSTD_compressBlock(int32x2_t *a1, unsigned char *a2, unint64_t a3, char *a4, size_t a5)
{
  LODWORD(v5) = 1 << a1[23].i32[1];
  if (v5 >= 0x20000) {
    unint64_t v5 = 0x20000;
  }
  else {
    unint64_t v5 = v5;
  }
  if (v5 >= a5) {
    return ZSTD_compressContinue_internal(a1, a2, a3, a4, a5, 0, 0);
  }
  else {
    return -72;
  }
}

uint64_t ZSTD_loadCEntropy(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a3 + 8;
  *(_DWORD *)(a1 + 1024) = 1;
  unsigned int v40 = 31;
  v41.i32[0] = 255;
  *(_DWORD *)unint64_t v49 = 1;
  unint64_t v9 = HUF_readCTable(a1, &v41, (char *)(a3 + 8), a4 - 8, v49);
  if (!*(_DWORD *)v49) {
    *(_DWORD *)(a1 + 1024) = 2;
  }
  if (v9 < 0xFFFFFFFFFFFFFF89 && v41.i32[0] > 0xFEu) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  if (v9 >= 0xFFFFFFFFFFFFFF89 || v41.i32[0] <= 0xFEu) {
    return -30;
  }
  unint64_t v11 = a3 + a4;
  uint64_t v12 = v8 + v10;
  v41.i32[0] = 0;
  unint64_t v13 = FSE_readNCount_bmi2(v49, &v40, &v41, (_DWORD *)(v8 + v10), v11 - (v8 + v10));
  if (v13 > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  if (v41.i32[0] >= 9u) {
    return -30;
  }
  unint64_t v14 = v13;
  if ((unint64_t)FSE_buildCTable_wksp((_WORD *)(a1 + 1028), v49, 31, v41.i32[0], a2, 0x1900uLL) > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  unint64_t v15 = (_DWORD *)(v12 + v14);
  unsigned int v38 = 0;
  int v39 = 52;
  unint64_t v16 = FSE_readNCount_bmi2(&v41, &v39, &v38, v15, v11 - (void)v15);
  if (v16 > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  if (v38 > 9) {
    return -30;
  }
  unint64_t v17 = v16;
  unsigned int v18 = v39;
  if ((unint64_t)FSE_buildCTable_wksp((_WORD *)(a1 + 1800), v41.i16, v39, v38, a2, 0x1900uLL) > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  int v19 = (v18 < 0x34) | vmaxv_u16((uint16x4_t)vceqz_s16(v47)) & 1 | (v48 == 0) | (vmaxvq_u8((uint8x16_t)vorrq_s8(vuzp1q_s8((int8x16_t)vceqzq_s16(v41), (int8x16_t)vceqzq_s16(v42)), vuzp1q_s8((int8x16_t)vceqzq_s16(v43), (int8x16_t)vceqzq_s16(v44)))) | vmaxvq_u8((uint8x16_t)vuzp1q_s8((int8x16_t)vceqzq_s16(v45), (int8x16_t)vceqzq_s16(v46)))) & 1
      ? 1
      : 2;
  *(_DWORD *)(a1 + 4572) = v19;
  unint64_t v20 = (_DWORD *)((char *)v15 + v17);
  unsigned int v38 = 0;
  int v39 = 35;
  unint64_t v21 = FSE_readNCount_bmi2(&v41, &v39, &v38, v20, v11 - (void)v20);
  if (v21 >= 0xFFFFFFFFFFFFFF89) {
    return -30;
  }
  if (v38 > 9) {
    return -30;
  }
  unint64_t v22 = v21;
  unsigned int v23 = v39;
  if ((unint64_t)FSE_buildCTable_wksp((_WORD *)(a1 + 3252), v41.i16, v39, v38, a2, 0x1900uLL) > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  int v24 = (vmaxvq_u8((uint8x16_t)vorrq_s8(vuzp1q_s8((int8x16_t)vceqzq_s16(v41), (int8x16_t)vceqzq_s16(v42)), vuzp1q_s8((int8x16_t)vceqzq_s16(v43), (int8x16_t)vceqzq_s16(v44)))) | vmaxv_u16((uint16x4_t)vceqz_s16(*(int16x4_t *)v45.i8))) & 1 | (v23 < 0x23)? 1: 2;
  *(_DWORD *)(a1 + 4576) = v24;
  int32x2_t v25 = (_DWORD *)((char *)v20 + v22);
  unint64_t v26 = (unint64_t)v20 + v22 + 12;
  if (v26 > v11) {
    return -30;
  }
  unint64_t v28 = *v25;
  *(_DWORD *)(a1 + 4580) = v28;
  unint64_t v29 = v25[1];
  *(_DWORD *)(a1 + 4584) = v29;
  unint64_t v30 = v25[2];
  *(_DWORD *)(a1 + 4588) = v30;
  unint64_t v31 = v11 - v26;
  unsigned int v32 = __clz(v11 - v26 + 0x20000) ^ 0x1F;
  if (v11 - v26 >= 0xFFFE0000) {
    unsigned int v32 = 31;
  }
  if (v40 >= v32)
  {
    uint64_t v34 = v32 + 1;
    __int16 v35 = (unsigned __int16 *)v49;
    while (*v35++)
    {
      if (!--v34)
      {
        int v33 = 2;
        goto LABEL_32;
      }
    }
  }
  int v33 = 1;
LABEL_32:
  *(_DWORD *)(a1 + 4568) = v33;
  uint64_t v37 = v26 - a3;
  if (v31 < v30) {
    uint64_t v37 = -30;
  }
  if (!v30) {
    uint64_t v37 = -30;
  }
  if (v31 < v29) {
    uint64_t v37 = -30;
  }
  if (!v29) {
    uint64_t v37 = -30;
  }
  if (v31 < v28) {
    uint64_t v37 = -30;
  }
  if (v28) {
    return v37;
  }
  else {
    return -30;
  }
}

unint64_t ZSTD_compressBegin_advanced_internal(uint64_t a1, _DWORD *a2, unint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1889B9F30, (uint32x4_t)vaddq_s32(*(int32x4_t *)(a7 + 4), (int32x4_t)xmmword_1889B9F20)))) & 1) != 0|| (*(_DWORD *)(a7 + 20) - 8) < 0xFFFFFFFB|| *(_DWORD *)(a7 + 24) > 0x20000u|| (*(_DWORD *)(a7 + 28) - 1) > 8)
  {
    return -42;
  }
  else
  {
    return ZSTD_compressBegin_internal(a1, a2, a3, a4, a5, a6, (uint64_t *)a7, a8, 0);
  }
}

unint64_t ZSTD_compressBegin_internal(uint64_t a1, _DWORD *a2, unint64_t a3, int a4, int a5, uint64_t a6, uint64_t *a7, unint64_t a8, int a9)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    uint64_t v15 = *(void *)(a6 + 8);
    if (v15)
    {
      if (a8 < 0x20000 || a8 == -1 || 6 * v15 > a8 || !*(_DWORD *)(a6 + 4948))
      {
        int v16 = *((_DWORD *)a7 + 17);
        if (v16 != 3)
        {
          int v17 = *(_DWORD *)(a6 + 168);
          uint64_t v18 = *(unsigned int *)(a6 + 312);
          if (v17) {
            goto LABEL_6;
          }
          if (a8 == -1 || attachDictSizeCutoffs[v18] >= a8)
          {
            if (v16 == 2) {
              goto LABEL_46;
            }
          }
          else if (v16 != 1)
          {
            goto LABEL_46;
          }
          if (!*((_DWORD *)a7 + 12))
          {
LABEL_6:
            uint64_t v20 = *a7;
            int v19 = a7 + 4;
            uint64_t v21 = v20;
            unsigned int v22 = *(_DWORD *)(a6 + 288);
            unsigned int v23 = *(_DWORD *)(a6 + 292);
            if ((v18 - 3) >= 3 || v17 == 0) {
              unsigned int v25 = *(_DWORD *)(a6 + 296);
            }
            else {
              unsigned int v25 = *(_DWORD *)(a6 + 296) - 2;
            }
            if (a8 >> 30)
            {
              if (a8 == -1)
              {
LABEL_39:
                *(void *)uint64_t v56 = v21;
                *(_DWORD *)&v56[8] = v23;
                *(_DWORD *)&v56[12] = v25;
                *(void *)&v56[16] = *(void *)(a6 + 300);
                *(_DWORD *)&v56[24] = *(_DWORD *)(a6 + 308);
                *(_DWORD *)&v56[28] = v18;
                long long v39 = *((_OWORD *)v19 + 7);
                *(_OWORD *)&v56[128] = *((_OWORD *)v19 + 6);
                *(_OWORD *)&v56[144] = v39;
                *(void *)&v56[160] = v19[16];
                long long v40 = *((_OWORD *)v19 + 3);
                *(_OWORD *)&v56[64] = *((_OWORD *)v19 + 2);
                *(_OWORD *)&v56[80] = v40;
                long long v41 = *((_OWORD *)v19 + 5);
                *(_OWORD *)&v56[96] = *((_OWORD *)v19 + 4);
                *(_OWORD *)&v56[112] = v41;
                long long v42 = *((_OWORD *)v19 + 1);
                *(_OWORD *)&v56[32] = *(_OWORD *)v19;
                *(_OWORD *)&v56[48] = v42;
                unint64_t result = ZSTD_resetCCtx_internal(a1, (long long *)v56, a8, 0, a9);
                if (result > 0xFFFFFFFFFFFFFF88) {
                  return result;
                }
                uint64_t v43 = *(void *)(a6 + 96) - *(void *)(a6 + 104);
                if (*(_DWORD *)(a6 + 120) != v43)
                {
                  *(void *)(a1 + 3072) = a6 + 96;
                  unsigned int v44 = *(_DWORD *)(a1 + 2912);
                  if (v44 < v43)
                  {
                    *(void *)(a1 + 2888) = *(void *)(a1 + 2896) + v43;
                    *(_DWORD *)(a1 + 2916) = v43;
                    *(_DWORD *)(a1 + 2912) = v43;
                    unsigned int v44 = v43;
                  }
                  *(_DWORD *)(a1 + 2920) = v44;
                }
LABEL_56:
                *(_DWORD *)(a1 + 352) = *(_DWORD *)(a6 + 4944);
                *(void *)(a1 + 360) = *(void *)(a6 + 8);
                memcpy(*(void **)(a1 + 2872), (const void *)(a6 + 328), 0x11F0uLL);
                return 0;
              }
            }
            else
            {
              unsigned int v26 = __clz(a8 - 1) ^ 0x1F;
              if (a8 >= 0x40) {
                unsigned int v27 = v26 + 1;
              }
              else {
                unsigned int v27 = 6;
              }
              if (v22 >= v27) {
                unsigned int v22 = v27;
              }
            }
            if (v25 >= v22 + 1) {
              unsigned int v25 = v22 + 1;
            }
            if (v23 - (v18 > 5) > v22)
            {
              if (v18 <= 5) {
                unsigned int v23 = v22;
              }
              else {
                unsigned int v23 = v22 + 1;
              }
            }
            goto LABEL_39;
          }
LABEL_46:
          long long v45 = *(_OWORD *)(a7 + 15);
          long long v63 = *(_OWORD *)(a7 + 13);
          long long v64 = v45;
          long long v46 = *(_OWORD *)(a7 + 19);
          long long v65 = *(_OWORD *)(a7 + 17);
          long long v66 = v46;
          long long v47 = *(_OWORD *)(a7 + 7);
          long long v59 = *(_OWORD *)(a7 + 5);
          long long v60 = v47;
          long long v48 = *(_OWORD *)(a7 + 11);
          long long v61 = *(_OWORD *)(a7 + 9);
          long long v62 = v48;
          long long v49 = *(_OWORD *)(a7 + 3);
          long long v57 = *(_OWORD *)(a7 + 1);
          long long v58 = v49;
          uint64_t v50 = (_OWORD *)(a6 + 96);
          *(void *)&long long v47 = *a7;
          *(void *)&long long v58 = *(void *)(a6 + 308);
          long long v57 = *(_OWORD *)(a6 + 292);
          *(void *)uint64_t v56 = v47;
          *(_OWORD *)&v56[104] = v63;
          *(_OWORD *)&v56[120] = v45;
          *(_OWORD *)&v56[136] = v65;
          *(_OWORD *)&v56[152] = v66;
          *(_OWORD *)&v56[40] = v59;
          *(_OWORD *)&v56[56] = v60;
          *(_OWORD *)&v56[72] = v61;
          *(_OWORD *)&v56[88] = v62;
          *(_OWORD *)&v56[8] = v57;
          *(_OWORD *)&v56[24] = v58;
          unint64_t result = ZSTD_resetCCtx_internal(a1, (long long *)v56, a8, 1, a9);
          if (result > 0xFFFFFFFFFFFFFF88) {
            return result;
          }
          *(void *)(a1 + 400) = *(void *)(a1 + 384);
          if (*(_DWORD *)(a6 + 312) == 1) {
            size_t v51 = 0;
          }
          else {
            size_t v51 = 4 << *(_DWORD *)(a6 + 292);
          }
          memcpy(*(void **)(a1 + 2936), *(const void **)(a6 + 144), 4 << *(_DWORD *)(a6 + 296));
          memcpy(*(void **)(a1 + 2952), *(const void **)(a6 + 160), v51);
          int v52 = *(_DWORD *)(a1 + 2928);
          if (v52) {
            size_t v53 = 4 << v52;
          }
          else {
            size_t v53 = 0;
          }
          bzero(*(void **)(a1 + 2944), v53);
          unint64_t v54 = *(void *)(a1 + 392);
          if (*(void *)(a1 + 400) < v54) {
            *(void *)(a1 + 400) = v54;
          }
          long long v55 = *(_OWORD *)(a6 + 112);
          *(_OWORD *)(a1 + 2888) = *v50;
          *(_OWORD *)(a1 + 2904) = v55;
          *(void *)(a1 + 2920) = *(void *)(a6 + 128);
          goto LABEL_56;
        }
      }
    }
  }
  long long v28 = *((_OWORD *)a7 + 9);
  *(_OWORD *)&v56[128] = *((_OWORD *)a7 + 8);
  *(_OWORD *)&v56[144] = v28;
  *(void *)&v56[160] = a7[20];
  long long v29 = *((_OWORD *)a7 + 5);
  *(_OWORD *)&v56[64] = *((_OWORD *)a7 + 4);
  *(_OWORD *)&v56[80] = v29;
  long long v30 = *((_OWORD *)a7 + 7);
  *(_OWORD *)&v56[96] = *((_OWORD *)a7 + 6);
  *(_OWORD *)&v56[112] = v30;
  long long v31 = *((_OWORD *)a7 + 1);
  *(_OWORD *)uint64_t v56 = *(_OWORD *)a7;
  *(_OWORD *)&v56[16] = v31;
  long long v32 = *((_OWORD *)a7 + 3);
  *(_OWORD *)&v56[32] = *((_OWORD *)a7 + 2);
  *(_OWORD *)&v56[48] = v32;
  unint64_t result = ZSTD_resetCCtx_internal(a1, (long long *)v56, a8, 0, a9);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  uint64_t v34 = *(void *)(a1 + 2872);
  unint64_t v35 = a1 + 2888;
  unint64_t v36 = a1 + 712;
  uint64_t v37 = (void *)(a1 + 368);
  unsigned int v38 = (_DWORD *)(a1 + 184);
  if (a6)
  {
    unint64_t result = ZSTD_compress_insertDictionary(v34, v35, v36, v37, v38, *(_DWORD **)a6, *(void *)(a6 + 8), *(_DWORD *)(a6 + 16), a5, *(_DWORD **)(a1 + 3120));
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    *(_DWORD *)(a1 + 352) = result;
    a3 = *(void *)(a6 + 8);
  }
  else
  {
    unint64_t result = ZSTD_compress_insertDictionary(v34, v35, v36, v37, v38, a2, a3, a4, a5, *(_DWORD **)(a1 + 3120));
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    *(_DWORD *)(a1 + 352) = result;
  }
  unint64_t result = 0;
  *(void *)(a1 + 360) = a3;
  return result;
}

unint64_t ZSTD_compressBegin_advanced(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  int32x4_t v6 = *(int32x4_t *)a4;
  unint64_t result = -42;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)vaddq_s32(*(int32x4_t *)a4, (int32x4_t)xmmword_1889B9F40), (uint32x4_t)xmmword_1889B9F50))) & 1) == 0)
  {
    int v8 = *(_DWORD *)(a4 + 16);
    if ((v8 - 3) <= 4)
    {
      unsigned int v9 = *(_DWORD *)(a4 + 20);
      int v10 = *(_DWORD *)(a4 + 24);
      if (v9 <= 0x20000 && (v10 - 1) <= 8)
      {
        int v17 = 0;
        int32x4_t v18 = v6;
        int v19 = v8;
        unsigned int v20 = v9;
        int v21 = v10;
        uint64_t v22 = *(void *)(a4 + 28);
        int v23 = *(_DWORD *)(a4 + 36);
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        memset(v30, 0, sizeof(v30));
        unint64_t result = ZSTD_resetCCtx_internal(a1, (long long *)&v17, a5, 0, 0);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          int v14 = 0;
          if (a2 && a3 >= 8)
          {
            uint64_t v15 = *(void *)(a1 + 2872);
            int v16 = *(_DWORD **)(a1 + 3120);
            *(void *)(v15 + 4580) = 0x400000001;
            *(_DWORD *)(v15 + 4588) = 8;
            *(_DWORD *)(v15 + 1024) = 0;
            *(void *)(v15 + 4568) = 0;
            *(_DWORD *)(v15 + 4576) = 0;
            if (*a2 == -332356553)
            {
              if (*(_DWORD *)(a1 + 224))
              {
                int v14 = 0;
                unint64_t result = ZSTD_loadCEntropy(v15, v16, (uint64_t)a2, a3);
                if (result > 0xFFFFFFFFFFFFFF88) {
                  return result;
                }
              }
              else
              {
                int v14 = a2[1];
                unint64_t result = ZSTD_loadCEntropy(v15, v16, (uint64_t)a2, a3);
                if (result > 0xFFFFFFFFFFFFFF88) {
                  return result;
                }
              }
              ZSTD_loadDictionaryContent(a1 + 2888, 0, (void *)(a1 + 368), (_DWORD *)(a1 + 184), (unint64_t)a2 + result, a3 - result, 0);
            }
            else
            {
              ZSTD_loadDictionaryContent(a1 + 2888, a1 + 712, (void *)(a1 + 368), (_DWORD *)(a1 + 184), (unint64_t)a2, a3, 0);
              int v14 = 0;
            }
          }
          unint64_t result = 0;
          *(_DWORD *)(a1 + 352) = v14;
          *(void *)(a1 + 360) = a3;
        }
      }
    }
  }
  return result;
}

unint64_t ZSTD_compressBegin_usingDict(uint64_t a1, _DWORD *a2, unint64_t a3, int a4)
{
  unint64_t v7 = a3 + 499;
  if (!a3) {
    unint64_t v7 = -1;
  }
  int v8 = v7 < 0x40001;
  if (v7 <= 0x20000) {
    ++v8;
  }
  if (v7 > 0x4000) {
    int v9 = v8;
  }
  else {
    int v9 = v8 + 1;
  }
  if (a4 >= 0x16) {
    unsigned int v10 = 22;
  }
  else {
    unsigned int v10 = a4;
  }
  if (a4 < 0) {
    unsigned int v10 = 0;
  }
  if (!a4) {
    unsigned int v10 = 3;
  }
  unint64_t v11 = (char *)&ZSTD_defaultCParameters + 644 * v9 + 28 * v10;
  unsigned int v12 = *(_DWORD *)v11;
  uint64_t v13 = *(void *)(v11 + 12);
  int v14 = *((_DWORD *)v11 + 5);
  int v15 = *((_DWORD *)v11 + 6);
  if (a4) {
    int v16 = a4;
  }
  else {
    int v16 = 3;
  }
  if (a4 <= 0xFFFE0000) {
    int v17 = -131072;
  }
  else {
    int v17 = a4;
  }
  if (a4 < 0) {
    int v14 = -v17;
  }
  if (v12 <= 0xA) {
    unsigned int v12 = 10;
  }
  LODWORD(v22) = 0;
  DWORD1(v22) = v12;
  *((void *)&v22 + 1) = *(void *)(v11 + 4);
  uint64_t v23 = v13;
  int v24 = v14;
  int v25 = v15;
  int v26 = 1;
  uint64_t v27 = 0;
  int v28 = v16;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  unint64_t result = ZSTD_resetCCtx_internal(a1, &v22, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    int v19 = 0;
    if (a2 && a3 >= 8)
    {
      uint64_t v20 = *(void *)(a1 + 2872);
      int v21 = *(_DWORD **)(a1 + 3120);
      *(void *)(v20 + 4580) = 0x400000001;
      *(_DWORD *)(v20 + 4588) = 8;
      *(_DWORD *)(v20 + 1024) = 0;
      *(void *)(v20 + 4568) = 0;
      *(_DWORD *)(v20 + 4576) = 0;
      if (*a2 == -332356553)
      {
        if (*(_DWORD *)(a1 + 224))
        {
          int v19 = 0;
          unint64_t result = ZSTD_loadCEntropy(v20, v21, (uint64_t)a2, a3);
          if (result > 0xFFFFFFFFFFFFFF88) {
            return result;
          }
        }
        else
        {
          int v19 = a2[1];
          unint64_t result = ZSTD_loadCEntropy(v20, v21, (uint64_t)a2, a3);
          if (result > 0xFFFFFFFFFFFFFF88) {
            return result;
          }
        }
        ZSTD_loadDictionaryContent(a1 + 2888, 0, (void *)(a1 + 368), (_DWORD *)(a1 + 184), (unint64_t)a2 + result, a3 - result, 0);
      }
      else
      {
        ZSTD_loadDictionaryContent(a1 + 2888, a1 + 712, (void *)(a1 + 368), (_DWORD *)(a1 + 184), (unint64_t)a2, a3, 0);
        int v19 = 0;
      }
    }
    unint64_t result = 0;
    *(_DWORD *)(a1 + 352) = v19;
    *(void *)(a1 + 360) = a3;
  }
  return result;
}

unint64_t ZSTD_compressBegin(uint64_t a1, int a2)
{
  if (a2 >= 0x16) {
    unsigned int v3 = 22;
  }
  else {
    unsigned int v3 = a2;
  }
  if (a2 < 0) {
    unsigned int v3 = 0;
  }
  if (!a2) {
    unsigned int v3 = 3;
  }
  uint64_t v4 = (char *)&ZSTD_defaultCParameters + 28 * v3;
  unsigned int v5 = *(_DWORD *)v4;
  uint64_t v6 = *(void *)(v4 + 12);
  int v7 = *((_DWORD *)v4 + 5);
  int v8 = *((_DWORD *)v4 + 6);
  if (a2) {
    int v9 = a2;
  }
  else {
    int v9 = 3;
  }
  if (a2 <= 0xFFFE0000) {
    int v10 = -131072;
  }
  else {
    int v10 = a2;
  }
  if (a2 < 0) {
    int v7 = -v10;
  }
  if (v5 <= 0xA) {
    unsigned int v5 = 10;
  }
  LODWORD(v12) = 0;
  DWORD1(v12) = v5;
  *((void *)&v12 + 1) = *(void *)(v4 + 4);
  uint64_t v13 = v6;
  int v14 = v7;
  int v15 = v8;
  int v16 = 1;
  uint64_t v17 = 0;
  int v18 = v9;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  unint64_t result = ZSTD_resetCCtx_internal(a1, &v12, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    unint64_t result = 0;
    *(_DWORD *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
  }
  return result;
}

unint64_t ZSTD_compressEnd(int *a1, unsigned char *a2, unint64_t a3, char *a4, size_t a5)
{
  unint64_t result = ZSTD_compressContinue_internal((int32x2_t *)a1, a2, a3, a4, a5, 1, 1);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  int v9 = *a1;
  if (!*a1) {
    return -60;
  }
  unint64_t v10 = result;
  unint64_t v11 = &a2[result];
  unint64_t v12 = a3 - result;
  if (v9 == 3)
  {
    int v14 = v11;
    if (a1[55]) {
      goto LABEL_24;
    }
  }
  else if (v9 == 1)
  {
    int v13 = a1[54];
    if (v12 < 0x12) {
      return -70;
    }
    char v16 = 8 * *((unsigned char *)a1 + 188) - 80;
    char v17 = (4 * (a1[55] > 0)) | (32 * (v13 != 0));
    if (a1[46])
    {
      uint64_t v18 = 0;
    }
    else
    {
      *(_DWORD *)unint64_t v11 = -47205080;
      uint64_t v18 = 4;
    }
    v11[v18] = v17;
    if (v13) {
      char v19 = 0;
    }
    else {
      char v19 = v16;
    }
    v11[v18 | 1] = v19;
    long long v20 = &v11[v18 | 2];
    *a1 = 2;
    *(_DWORD *)long long v20 = 1;
    int v14 = v20 + 3;
    unint64_t v12 = v12 - (v18 | 2) - 3;
    if (a1[55]) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v12 < 4) {
      return -70;
    }
    *(_DWORD *)unint64_t v11 = 1;
    int v14 = v11 + 3;
    v12 -= 3;
    if (a1[55])
    {
LABEL_24:
      int v21 = ZSTD_XXH64_digest((uint64_t *)a1 + 58);
      if (v12 >= 4)
      {
        *(_DWORD *)int v14 = v21;
        *a1 = 0;
        unint64_t result = v14 + 4 - v11;
        if (result > 0xFFFFFFFFFFFFFF88) {
          return result;
        }
        goto LABEL_10;
      }
      return -70;
    }
  }
  *a1 = 0;
  unint64_t result = v14 - v11;
  if ((unint64_t)(v14 - v11) > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
LABEL_10:
  uint64_t v15 = *((void *)a1 + 55);
  if (v15 && v15 != *((void *)a1 + 56) + 1) {
    return -72;
  }
  result += v10;
  return result;
}

unint64_t ZSTD_compress_advanced(uint64_t a1, unsigned char *a2, unint64_t a3, char *a4, unint64_t a5, _DWORD *a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8 = -42;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1889B9F30, (uint32x4_t)vaddq_s32(*(int32x4_t *)a8, (int32x4_t)xmmword_1889B9F20)))) & 1) != 0|| (*(_DWORD *)(a8 + 16) - 8) < 0xFFFFFFFB|| *(_DWORD *)(a8 + 20) > 0x20000u)
  {
    return v8;
  }
  if ((*(_DWORD *)(a8 + 24) - 1) <= 8)
  {
    memset(v10, 0, sizeof(v10));
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    *(_OWORD *)((char *)v10 + 4) = *(_OWORD *)a8;
    v10[1] = *(_OWORD *)(a8 + 12);
    DWORD2(v11) = *(_DWORD *)(a8 + 36);
    *(void *)&long long v11 = *(void *)(a8 + 28);
    return ZSTD_compress_advanced_internal(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v10);
  }
  return -42;
}

unint64_t ZSTD_compress_advanced_internal(uint64_t a1, unsigned char *a2, unint64_t a3, char *a4, unint64_t a5, _DWORD *a6, unint64_t a7, uint64_t a8)
{
  long long v15 = *(_OWORD *)(a8 + 144);
  v24[8] = *(_OWORD *)(a8 + 128);
  v24[9] = v15;
  uint64_t v25 = *(void *)(a8 + 160);
  long long v16 = *(_OWORD *)(a8 + 80);
  v24[4] = *(_OWORD *)(a8 + 64);
  v24[5] = v16;
  long long v17 = *(_OWORD *)(a8 + 112);
  v24[6] = *(_OWORD *)(a8 + 96);
  v24[7] = v17;
  long long v18 = *(_OWORD *)(a8 + 16);
  v24[0] = *(_OWORD *)a8;
  v24[1] = v18;
  long long v19 = *(_OWORD *)(a8 + 48);
  v24[2] = *(_OWORD *)(a8 + 32);
  v24[3] = v19;
  unint64_t result = ZSTD_resetCCtx_internal(a1, v24, a5, 0, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    int v21 = 0;
    if (a6 && a7 >= 8)
    {
      uint64_t v22 = *(void *)(a1 + 2872);
      long long v23 = *(_DWORD **)(a1 + 3120);
      *(void *)(v22 + 4580) = 0x400000001;
      *(_DWORD *)(v22 + 4588) = 8;
      *(_DWORD *)(v22 + 1024) = 0;
      *(void *)(v22 + 4568) = 0;
      *(_DWORD *)(v22 + 4576) = 0;
      if (*a6 == -332356553)
      {
        if (*(_DWORD *)(a1 + 224))
        {
          int v21 = 0;
          unint64_t result = ZSTD_loadCEntropy(v22, v23, (uint64_t)a6, a7);
          if (result > 0xFFFFFFFFFFFFFF88) {
            return result;
          }
        }
        else
        {
          int v21 = a6[1];
          unint64_t result = ZSTD_loadCEntropy(v22, v23, (uint64_t)a6, a7);
          if (result > 0xFFFFFFFFFFFFFF88) {
            return result;
          }
        }
        ZSTD_loadDictionaryContent(a1 + 2888, 0, (void *)(a1 + 368), (_DWORD *)(a1 + 184), (unint64_t)a6 + result, a7 - result, 0);
      }
      else
      {
        ZSTD_loadDictionaryContent(a1 + 2888, a1 + 712, (void *)(a1 + 368), (_DWORD *)(a1 + 184), (unint64_t)a6, a7, 0);
        int v21 = 0;
      }
    }
    *(_DWORD *)(a1 + 352) = v21;
    *(void *)(a1 + 360) = a7;
    return ZSTD_compressEnd((int *)a1, a2, a3, a4, a5);
  }
  return result;
}

unint64_t ZSTD_compress_usingDict(uint64_t a1, unsigned char *a2, unint64_t a3, char *a4, unint64_t a5, _DWORD *a6, unint64_t a7, int a8)
{
  *(_OWORD *)long long v20 = 0uLL;
  if (a6) {
    unint64_t v16 = a7;
  }
  else {
    unint64_t v16 = 0;
  }
  *(_DWORD *)&v20[24] = 0;
  *(void *)&v20[16] = 0;
  ZSTD_getCParams_internal((uint64_t)v20, a8, a5, v16, 0);
  *(_OWORD *)&v19[12] = *(_OWORD *)&v20[12];
  *(_OWORD *)long long v19 = *(_OWORD *)v20;
  if (a8) {
    int v17 = a8;
  }
  else {
    int v17 = 3;
  }
  *(_DWORD *)long long v20 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v29 = 0;
  *(_OWORD *)&v20[4] = *(_OWORD *)v19;
  *(_OWORD *)&v20[16] = *(_OWORD *)&v19[12];
  long long v21 = 0u;
  LODWORD(v21) = 1;
  HIDWORD(v21) = v17;
  return ZSTD_compress_advanced_internal(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v20);
}

unint64_t ZSTD_compressCCtx(uint64_t a1, unsigned char *a2, unint64_t a3, char *a4, unint64_t a5, int a6)
{
  int v11 = a5 < 0x40001;
  if (a5 <= 0x20000) {
    ++v11;
  }
  if (a5 <= 0x4000) {
    ++v11;
  }
  unsigned int v12 = 3;
  if (a6 >= 0x16) {
    int v13 = 22;
  }
  else {
    int v13 = a6;
  }
  if (a6 < 0) {
    int v13 = 0;
  }
  if (a6) {
    unsigned int v12 = v13;
  }
  long long v14 = (char *)&ZSTD_defaultCParameters + 644 * v11 + 28 * v12;
  unsigned int v16 = *(_DWORD *)v14;
  unsigned int v15 = *((_DWORD *)v14 + 1);
  unsigned int v17 = *((_DWORD *)v14 + 2);
  uint64_t v18 = *(void *)(v14 + 12);
  int v20 = *((_DWORD *)v14 + 5);
  unsigned int v19 = *((_DWORD *)v14 + 6);
  if (a5 >> 30)
  {
    if (a5 == -1) {
      goto LABEL_26;
    }
  }
  else
  {
    unsigned int v21 = __clz(a5 - 1) ^ 0x1F;
    if (a5 >= 0x40) {
      unsigned int v22 = v21 + 1;
    }
    else {
      unsigned int v22 = 6;
    }
    if (v16 >= v22) {
      unsigned int v16 = v22;
    }
  }
  if (v17 >= v16 + 1) {
    unsigned int v17 = v16 + 1;
  }
  if (v19 <= 5) {
    unsigned int v23 = v16;
  }
  else {
    unsigned int v23 = v16 + 1;
  }
  if (v15 - (v19 > 5) > v16) {
    unsigned int v15 = v23;
  }
LABEL_26:
  uint64_t v41 = 0;
  long long v40 = 0u;
  if (a6 <= 0xFFFE0000) {
    int v24 = -131072;
  }
  else {
    int v24 = a6;
  }
  if (v16 <= 0xA) {
    unsigned int v16 = 10;
  }
  long long v39 = 0uLL;
  long long v38 = 0uLL;
  if (a6 < 0) {
    int v20 = -v24;
  }
  if (a6) {
    int v25 = a6;
  }
  else {
    int v25 = 3;
  }
  long long v37 = 0uLL;
  long long v36 = 0uLL;
  long long v35 = 0uLL;
  long long v34 = 0uLL;
  LODWORD(v27) = 0;
  *(void *)((char *)&v27 + 4) = __PAIR64__(v15, v16);
  HIDWORD(v27) = v17;
  uint64_t v28 = v18;
  int v29 = v20;
  unsigned int v30 = v19;
  int v31 = 1;
  uint64_t v32 = 0;
  int v33 = v25;
  unint64_t result = ZSTD_resetCCtx_internal(a1, &v27, a5, 0, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    *(_DWORD *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
    return ZSTD_compressEnd((int *)a1, a2, a3, a4, a5);
  }
  return result;
}

unint64_t ZSTD_compress(unsigned char *a1, unint64_t a2, char *a3, unint64_t a4, int a5)
{
  bzero(v19, 0xD00uLL);
  v19[15] = 3;
  v19[12] = 1;
  unint64_t v10 = ZSTD_compressCCtx((uint64_t)v19, a1, a2, a3, a4, a5);
  if (!(void)v26)
  {
LABEL_4:
    unint64_t v11 = v28;
    if (!(void)v28) {
      goto LABEL_18;
    }
LABEL_5:
    unsigned int v12 = *(void (**)(uint64_t))(v11 + 4928);
    uint64_t v13 = *(void *)(v11 + 4936);
    unsigned int v15 = (_OWORD *)(v11 + 32);
    long long v14 = *(void **)(v11 + 32);
    if ((unint64_t)v14 <= v11)
    {
      BOOL v16 = *(void *)(v11 + 40) >= v11;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      _OWORD *v15 = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      if (!v14)
      {
LABEL_7:
        if (v16) {
          goto LABEL_18;
        }
        goto LABEL_12;
      }
    }
    else
    {
      BOOL v16 = 0;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      _OWORD *v15 = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      if (!v14) {
        goto LABEL_7;
      }
    }
    if (!v12)
    {
      free(v14);
      if (v16) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    v12(v13);
    if (v16) {
      goto LABEL_18;
    }
LABEL_12:
    if (v12)
    {
      ((void (*)(uint64_t, unint64_t))v12)(v13, v11);
      goto LABEL_18;
    }
LABEL_17:
    free((void *)v11);
    goto LABEL_18;
  }
  if (v24)
  {
    v24(v25);
    goto LABEL_4;
  }
  free((void *)v26);
  unint64_t v11 = v28;
  if ((void)v28) {
    goto LABEL_5;
  }
LABEL_18:
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  ZSTDMT_freeCCtx(v31);
  uint64_t v31 = 0;
  unsigned int v17 = v20[0];
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)int v20 = 0u;
  long long v21 = 0u;
  if (v17)
  {
    if (v24) {
      v24(v25);
    }
    else {
      free(v17);
    }
  }
  return v10;
}

uint64_t ZSTD_estimateCDictSize_advanced(uint64_t a1, _DWORD *a2, int a3)
{
  if (a2[6] == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 4 << a2[1];
  }
  unint64_t v4 = ((a1 + 7) & 0xFFFFFFFFFFFFFFF8) + 11352;
  if (a3 == 1) {
    unint64_t v4 = 11352;
  }
  return v4 + v3 + (4 << a2[2]);
}

unint64_t ZSTD_estimateCDictSize(unint64_t a1, int a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  int v8 = 0;
  uint64_t v7 = 0;
  ZSTD_getCParams_internal((uint64_t)&v5, a2, -1, a1, 2);
  uint64_t v3 = 4 << SBYTE4(v5);
  if (v8 == 1) {
    uint64_t v3 = 0;
  }
  return ((a1 + 7) & 0xFFFFFFFFFFFFFFF8) + (4 << v6) + v3 + 11352;
}

uint64_t ZSTD_sizeof_CDict(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 32);
    uint64_t v2 = 4952;
    if (v1 == result) {
      uint64_t v2 = 0;
    }
    return *(void *)(result + 40) - v1 + v2;
  }
  return result;
}

char *ZSTD_createCDict_advanced(const void *a1, unint64_t a2, int a3, int a4, long long *a5, long long *a6)
{
  memset(v9, 0, sizeof(v9));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(long long *)((char *)v9 + 4) = *a5;
  v9[1] = *(long long *)((char *)a5 + 12);
  long long v10 = 0u;
  LODWORD(v10) = 1;
  long long v17 = *a6;
  uint64_t v18 = *((void *)a6 + 2);
  long long v7 = *a6;
  uint64_t v8 = *((void *)a6 + 2);
  return ZSTD_createCDict_advanced2(a1, a2, a3, a4, v9, (uint64_t)&v7);
}

char *ZSTD_createCDict_advanced2(const void *a1, unint64_t a2, int a3, int a4, long long *a5, uint64_t a6)
{
  long long v6 = a5[9];
  long long v81 = a5[8];
  long long v82 = v6;
  uint64_t v83 = *((void *)a5 + 20);
  long long v7 = a5[5];
  long long v77 = a5[4];
  long long v78 = v7;
  long long v8 = a5[7];
  long long v79 = a5[6];
  long long v80 = v8;
  long long v9 = a5[1];
  long long v73 = *a5;
  long long v74 = v9;
  __n128 v10 = (__n128)a5[3];
  long long v11 = *(uint64_t (**)(void, unint64_t, __n128))a6;
  uint64_t v12 = *(void *)(a6 + 8);
  BOOL v13 = *(void *)a6 == 0;
  long long v75 = a5[2];
  __n128 v76 = v10;
  if ((v13 ^ (v12 == 0))) {
    return 0;
  }
  if (DWORD2(v80))
  {
    int v20 = a2 < 0x40001;
    if (a2 <= 0x20000) {
      ++v20;
    }
    if (a2 <= 0x4000) {
      ++v20;
    }
    unsigned int v21 = 3;
    if (HIDWORD(v75) >= 0x16) {
      int v22 = 22;
    }
    else {
      int v22 = HIDWORD(v75);
    }
    if (v75 < 0) {
      int v22 = 0;
    }
    if (HIDWORD(v75)) {
      unsigned int v21 = v22;
    }
    long long v23 = (char *)&ZSTD_defaultCParameters + 644 * v20 + 28 * v21;
    unsigned int v24 = *(_DWORD *)v23;
    unsigned int v25 = *((_DWORD *)v23 + 1);
    unsigned int v26 = *((_DWORD *)v23 + 2);
    unint64_t v27 = *(void *)(v23 + 12);
    int v28 = *((_DWORD *)v23 + 5);
    unsigned int v29 = *((_DWORD *)v23 + 6);
    if (a2 >> 30) {
      goto LABEL_23;
    }
    unsigned int v30 = __clz(a2 - 1) ^ 0x1F;
    if (a2 >= 0x40) {
      unsigned int v31 = v30 + 1;
    }
    else {
      unsigned int v31 = 6;
    }
    if (v24 >= v31) {
      unsigned int v24 = v31;
    }
    unsigned int v32 = v24;
    if (a2)
    {
LABEL_23:
      unint64_t v33 = (1 << v24) + a2;
      unint64_t v34 = v33 >> 31;
      unsigned int v35 = __clz(v33 - 1) ^ 0x1F;
      if (v34) {
        int v36 = 31;
      }
      else {
        int v36 = v35 + 1;
      }
      if (1 << v24 < a2) {
        unsigned int v32 = v36;
      }
      else {
        unsigned int v32 = v24;
      }
    }
    if (v29 <= 5) {
      unsigned int v37 = v32;
    }
    else {
      unsigned int v37 = v32 + 1;
    }
    if (v26 >= v32 + 1) {
      unsigned int v26 = v32 + 1;
    }
    if (v25 - (v29 > 5) > v32) {
      unsigned int v25 = v37;
    }
    if (HIDWORD(v75) <= 0xFFFE0000) {
      int v38 = -131072;
    }
    else {
      int v38 = HIDWORD(v75);
    }
    if (v75 < 0) {
      int v39 = -v38;
    }
    else {
      int v39 = v28;
    }
    if (v24 <= 0xA) {
      int v40 = 10;
    }
    else {
      int v40 = v24;
    }
    if (v29 - 3 >= 3) {
      unsigned int v41 = v26;
    }
    else {
      unsigned int v41 = v26 + 2;
    }
    unint64_t v42 = HIDWORD(v27);
    int v43 = DWORD1(v73);
    if (!DWORD1(v73)) {
      int v43 = v40;
    }
    unsigned int v44 = HIDWORD(v73);
    if (!HIDWORD(v73)) {
      unsigned int v44 = v41;
    }
    if (DWORD2(v73)) {
      unsigned int v45 = DWORD2(v73);
    }
    else {
      unsigned int v45 = v25;
    }
    if (v74) {
      LODWORD(v27) = v74;
    }
    if (DWORD1(v74)) {
      uint64_t v46 = DWORD1(v74);
    }
    else {
      uint64_t v46 = v42;
    }
    if (DWORD2(v74)) {
      int v47 = DWORD2(v74);
    }
    else {
      int v47 = v39;
    }
    if (HIDWORD(v74)) {
      unsigned int v29 = HIDWORD(v74);
    }
    if (v29 - 6 <= 0xFFFFFFFC) {
      goto LABEL_66;
    }
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)ZSTD_getCParamsFromCCtxParams((int8x8_t *)&v73, -1, a2, 2, (uint64_t)&v62);
    int v43 = v62;
    unsigned int v45 = DWORD1(v62);
    unsigned int v44 = DWORD2(v62);
    LODWORD(v27) = HIDWORD(v62);
    uint64_t v46 = v63;
    int v47 = DWORD1(v63);
    unsigned int v29 = DWORD2(v63);
    if ((DWORD2(v63) - 6) <= 0xFFFFFFFC)
    {
LABEL_66:
      DWORD2(v80) = 0;
      v10.n128_u64[0] = (unint64_t)ZSTD_getCParamsFromCCtxParams((int8x8_t *)&v73, -1, a2, 2, (uint64_t)&v62);
      int v43 = v62;
      unsigned int v45 = DWORD1(v62);
      unsigned int v44 = DWORD2(v62);
      LODWORD(v27) = HIDWORD(v62);
      uint64_t v46 = v63;
      int v47 = DWORD1(v63);
      unsigned int v29 = DWORD2(v63);
    }
  }
  *(void *)((char *)&v73 + 4) = __PAIR64__(v45, v43);
  HIDWORD(v73) = v44;
  *(void *)&long long v74 = v27 | (unint64_t)(v46 << 32);
  *((void *)&v74 + 1) = __PAIR64__(v29, v47);
  uint64_t v48 = *(void *)(a6 + 16);
  uint64_t v49 = 4 << v45;
  if (v29 == 1) {
    uint64_t v49 = 0;
  }
  uint64_t v50 = 4 << v44;
  unint64_t v51 = ((a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 11352;
  if (a3 == 1) {
    unint64_t v51 = 11352;
  }
  unint64_t v52 = v50 + v51;
  unint64_t v53 = v52 + v49;
  if (v11)
  {
    unint64_t v54 = (char *)v11(*(void *)(a6 + 16), v52 + v49, v10);
    if (!v54) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  unint64_t v54 = (char *)malloc_type_malloc(v52 + v49, 0x26AA08A0uLL);
  if (v54)
  {
LABEL_73:
    *((void *)v54 + 4) = v54;
    *((void *)v54 + 5) = &v54[v53];
    *((void *)v54 + 6) = v54 + 4952;
    *((void *)v54 + 7) = v54 + 4952;
    *((void *)v54 + 8) = v54 + 4952;
    *((void *)v54 + 9) = &v54[v53];
    *((void *)v54 + 10) = 0;
    *((void *)v54 + 11) = 0;
    *((void *)v54 + 615) = v11;
    *((void *)v54 + 616) = v12;
    *((void *)v54 + 617) = v48;
    *((_DWORD *)v54 + 1237) = 0;
  }
LABEL_74:
  long long v70 = v81;
  long long v71 = v82;
  uint64_t v72 = v83;
  long long v66 = v77;
  long long v67 = v78;
  long long v68 = v79;
  long long v69 = v80;
  long long v62 = v73;
  long long v63 = v74;
  long long v64 = v75;
  __n128 v65 = v76;
  unint64_t inited = ZSTD_initCDict_internal((uint64_t)v54, a1, a2, a3, a4, (uint64_t)&v62);
  BOOL v56 = __CFADD__(inited, 119);
  if (inited >= 0xFFFFFFFFFFFFFF89) {
    unint64_t result = 0;
  }
  else {
    unint64_t result = v54;
  }
  if (v56 && v54)
  {
    long long v57 = (void (*)(uint64_t))*((void *)v54 + 616);
    uint64_t v58 = *((void *)v54 + 617);
    long long v60 = v54 + 32;
    long long v59 = (char *)*((void *)v54 + 4);
    if (v59 <= v54)
    {
      BOOL v61 = *((void *)v54 + 5) >= (unint64_t)v54;
      *((_OWORD *)v54 + 4) = 0u;
      *((_OWORD *)v54 + 5) = 0u;
      *long long v60 = 0u;
      *((_OWORD *)v54 + 3) = 0u;
      if (!v59) {
        goto LABEL_90;
      }
    }
    else
    {
      BOOL v61 = 0;
      *((_OWORD *)v54 + 4) = 0u;
      *((_OWORD *)v54 + 5) = 0u;
      *long long v60 = 0u;
      *((_OWORD *)v54 + 3) = 0u;
      if (!v59) {
        goto LABEL_90;
      }
    }
    if (!v57)
    {
      free(v59);
      if (v61) {
        return 0;
      }
      goto LABEL_94;
    }
    v57(v58);
LABEL_90:
    if (v61) {
      return 0;
    }
    if (v57)
    {
      ((void (*)(uint64_t, char *))v57)(v58, v54);
      return 0;
    }
LABEL_94:
    free(v54);
    return 0;
  }
  return result;
}

unint64_t ZSTD_initCDict_internal(uint64_t a1, const void *a2, size_t __n, int a4, int a5, uint64_t a6)
{
  unint64_t v10 = a1 + 96;
  long long v11 = *(_OWORD *)(a6 + 4);
  *(_OWORD *)(a1 + 300) = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 288) = v11;
  int v12 = *(_DWORD *)(a6 + 120);
  if (v12) {
    BOOL v13 = (__n & 0xFFFFFFFFE0000000) == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13) {
    int v12 = 0;
  }
  *(_DWORD *)(a1 + 168) = v12;
  if (__n && a2 && a4 != 1)
  {
    if (*(_DWORD *)(a1 + 88)
      || (size_t v15 = *(void *)(a1 + 40),
          long long v14 = *(void **)(a1 + 48),
          size_t v16 = (size_t)v14 + ((__n + 7) & 0xFFFFFFFFFFFFFFF8),
          v16 > v15))
    {
      *(unsigned char *)(a1 + 80) = 1;
      return -64;
    }
    *(void *)(a1 + 48) = v16;
    *(void *)(a1 + 56) = v16;
    *(void *)(a1 + 64) = v16;
    if (!v14) {
      return -64;
    }
    *(void *)a1 = v14;
    memcpy(v14, a2, __n);
    uint64_t v18 = (long long *)(a6 + 4);
    *(void *)(a1 + 8) = __n;
    *(_DWORD *)(a1 + 16) = a5;
    unsigned int v19 = (void *)(a1 + 32);
    if (*(_DWORD *)(a1 + 88)) {
      goto LABEL_18;
    }
  }
  else
  {
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = __n;
    uint64_t v18 = (long long *)(a6 + 4);
    *(_DWORD *)(a1 + 16) = a5;
    unsigned int v19 = (void *)(a1 + 32);
    if (*(_DWORD *)(a1 + 88)) {
      goto LABEL_18;
    }
  }
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = v20 + 6400;
  if ((unint64_t)(v20 + 6400) <= *(void *)(a1 + 40))
  {
    *(void *)(a1 + 48) = v21;
    *(void *)(a1 + 56) = v21;
    *(void *)(a1 + 64) = v21;
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v20 = 0;
  *(unsigned char *)(a1 + 80) = 1;
LABEL_19:
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 4908) = 0x400000001;
  *(_DWORD *)(a1 + 4916) = 8;
  *(_DWORD *)(a1 + 1352) = 0;
  *(void *)(a1 + 4896) = 0;
  *(_DWORD *)(a1 + 4904) = 0;
  unint64_t result = ZSTD_reset_matchState(v10, (uint64_t)v19, v18, 0, 1, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    *(_DWORD *)(a6 + 44) = 3;
    *(_DWORD *)(a6 + 32) = 1;
    unint64_t result = ZSTD_compress_insertDictionary(a1 + 328, v10, 0, v19, (_DWORD *)a6, *(_DWORD **)a1, *(void *)(a1 + 8), a5, 1, *(_DWORD **)(a1 + 24));
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      *(_DWORD *)(a1 + 4944) = result;
      return 0;
    }
  }
  return result;
}

uint64_t ZSTD_freeCDict(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = (void (*)(uint64_t))a1[616];
  uint64_t v3 = a1[617];
  uint64_t v5 = a1 + 4;
  unint64_t v4 = (void *)a1[4];
  if (v4 <= a1)
  {
    BOOL v6 = a1[5] >= (unint64_t)a1;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *uint64_t v5 = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    if (!v4)
    {
LABEL_4:
      if (!v6) {
        goto LABEL_9;
      }
      return 0;
    }
  }
  else
  {
    BOOL v6 = 0;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *uint64_t v5 = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    if (!v4) {
      goto LABEL_4;
    }
  }
  if (!v2)
  {
    free(v4);
    if (v6) {
      return 0;
    }
    goto LABEL_12;
  }
  v2(v3);
  if (!v6)
  {
LABEL_9:
    if (v2)
    {
      ((void (*)(uint64_t, void *))v2)(v3, a1);
      return 0;
    }
LABEL_12:
    free(a1);
  }
  return 0;
}

char *ZSTD_createCDict(const void *a1, unint64_t a2, int a3)
{
  memset(v8, 0, 28);
  ZSTD_getCParams_internal((uint64_t)v8, a3, -1, a2, 2);
  int v9 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)unint64_t v10 = v8[0];
  *(_OWORD *)&v10[12] = *(_OWORD *)((char *)v8 + 12);
  long long v11 = 0u;
  LODWORD(v11) = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  unint64_t result = ZSTD_createCDict_advanced2(a1, a2, 0, 0, (long long *)&v9, (uint64_t)&ZSTD_defaultCMem);
  if (result)
  {
    if (a3) {
      int v7 = a3;
    }
    else {
      int v7 = 3;
    }
    *((_DWORD *)result + 1237) = v7;
  }
  return result;
}

char *ZSTD_createCDict_byReference(const void *a1, unint64_t a2, int a3)
{
  memset(v8, 0, 28);
  ZSTD_getCParams_internal((uint64_t)v8, a3, -1, a2, 2);
  int v9 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)unint64_t v10 = v8[0];
  *(_OWORD *)&v10[12] = *(_OWORD *)((char *)v8 + 12);
  long long v11 = 0u;
  LODWORD(v11) = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  unint64_t result = ZSTD_createCDict_advanced2(a1, a2, 1, 0, (long long *)&v9, (uint64_t)&ZSTD_defaultCMem);
  if (result)
  {
    if (a3) {
      int v7 = a3;
    }
    else {
      int v7 = 3;
    }
    *((_DWORD *)result + 1237) = v7;
  }
  return result;
}

uint64_t ZSTD_initStaticCDict(uint64_t a1, uint64_t a2, const void *a3, size_t __n, int a5, int a6, unsigned int *a7)
{
  if (a7[6] == 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 4 << a7[1];
  }
  size_t v9 = ((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 11352;
  if (a5 == 1) {
    size_t v9 = 11352;
  }
  if ((a1 & 7) != 0) {
    return 0;
  }
  uint64_t result = 0;
  if (a1)
  {
    if (a2 >= 4952)
    {
      uint64_t result = 0;
      uint64_t v11 = 4 << a7[2];
      *(void *)(a1 + 32) = a1;
      *(void *)(a1 + 40) = a1 + a2;
      *(void *)(a1 + 48) = a1 + 4952;
      *(void *)(a1 + 56) = a1 + 4952;
      *(void *)(a1 + 64) = a1 + 4952;
      *(void *)(a1 + 72) = a1 + a2;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0x100000000;
      if (v8 + v9 + v11 <= a2)
      {
        unint64_t v12 = (unint64_t)*a7 << 32;
        long long v26 = *(_OWORD *)(a7 + 1);
        uint64_t v27 = *(void *)(a7 + 5);
        unint64_t v13 = v12;
        long long v14 = v26;
        uint64_t v15 = v27;
        int v16 = 1;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        int v25 = 0;
        if (ZSTD_initCDict_internal(a1, a3, __n, a5, a6, (uint64_t)&v13) >= 0xFFFFFFFFFFFFFF89) {
          return 0;
        }
        else {
          return a1;
        }
      }
    }
  }
  return result;
}

__n128 ZSTD_getCParamsFromCDict@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 288);
  __n128 result = *(__n128 *)(a1 + 300);
  *(__n128 *)(a2 + 12) = result;
  return result;
}

uint64_t ZSTD_getDictID_fromCDict(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4944);
  }
  return result;
}

unint64_t ZSTD_compressBegin_usingCDict_advanced(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5)
{
  if (!a2) {
    return -32;
  }
  memset(v17, 0, 28);
  if (a5 < 0x20000 || a5 == -1 || (v16 = *(void *)(a2 + 8), 6 * v16 > a5) || (int v10 = *(_DWORD *)(a2 + 4948)) == 0)
  {
    v17[0] = *(_OWORD *)(a2 + 288);
    *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a2 + 300);
    int v10 = *(_DWORD *)(a2 + 4948);
  }
  else
  {
    ZSTD_getCParams_internal((uint64_t)v17, *(_DWORD *)(a2 + 4948), a5, v16, 3);
  }
  int v18 = 0;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  *(_OWORD *)long long v19 = v17[0];
  *(_OWORD *)&v19[12] = *(_OWORD *)((char *)v17 + 12);
  uint64_t v20 = a3;
  int v21 = a4;
  int v22 = v10;
  if (a5 != -1)
  {
    unsigned int v11 = 0x80000;
    if (a5 < 0x80000) {
      unsigned int v11 = a5;
    }
    BOOL v12 = v11 > 1;
    unsigned int v13 = __clz(v11 - 1) ^ 0x1F;
    if (v12) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 1;
    }
    if (*(_DWORD *)v19 > v14) {
      unsigned int v14 = *(_DWORD *)v19;
    }
    *(_DWORD *)long long v19 = v14;
  }
  return ZSTD_compressBegin_internal(a1, 0, 0, 0, 0, a2, (uint64_t *)&v18, a5, 0);
}

uint64_t ZSTD_getCParams@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = -1;
  }
  return ZSTD_getCParams_internal(a4, a1, v5, a3, 3);
}

unint64_t ZSTD_compressBegin_usingCDict(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return -32;
  }
  int v2 = *(_DWORD *)(a2 + 4948);
  memset(v4, 0, sizeof(v4));
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  *(_OWORD *)((char *)v4 + 4) = *(_OWORD *)(a2 + 288);
  v4[1] = *(_OWORD *)(a2 + 300);
  uint64_t v5 = 0;
  int v6 = 0;
  int v7 = v2;
  return ZSTD_compressBegin_internal(a1, 0, 0, 0, 0, a2, (uint64_t *)v4, 0xFFFFFFFFFFFFFFFFLL, 0);
}

unint64_t ZSTD_compress_usingCDict_advanced(int *a1, unsigned char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t result = ZSTD_compressBegin_usingCDict_advanced((uint64_t)a1, a6, a7, a8, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    return ZSTD_compressEnd(a1, a2, a3, a4, a5);
  }
  return result;
}

unint64_t ZSTD_compress_usingCDict(int *a1, unsigned char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = ZSTD_compressBegin_usingCDict_advanced((uint64_t)a1, a6, 1, 0, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    return ZSTD_compressEnd(a1, a2, a3, a4, a5);
  }
  return result;
}

uint64_t ZSTD_createCStream()
{
  v0 = malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
  uint64_t v1 = (uint64_t)v0;
  if (v0)
  {
    bzero(v0, 0xD00uLL);
    ZSTD_clearAllDicts(v1);
    *(void *)(v1 + 176) = 0;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_DWORD *)(v1 + 60) = 3;
    *(_DWORD *)(v1 + 48) = 1;
  }
  return v1;
}

void *ZSTD_createCStream_advanced(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t))a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if ((*(void *)a1 == 0) != (v2 == 0)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v3 = (void *)v1(*(void *)(a1 + 16), 3328);
    if (!v3) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
    if (!v3) {
      return v3;
    }
  }
  bzero(v3, 0xD00uLL);
  *((void *)v3 + 69) = v1;
  *((void *)v3 + 70) = v2;
  *((void *)v3 + 71) = v5;
  ZSTD_clearAllDicts((uint64_t)v3);
  *((void *)v3 + 22) = 0;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_DWORD *)v3 + 15) = 3;
  *((_DWORD *)v3 + 12) = 1;
  return v3;
}

char *ZSTD_initStaticCStream(char *a1, uint64_t a2)
{
  unint64_t result = 0;
  if ((unint64_t)a2 >= 0xD01 && (a1 & 7) == 0)
  {
    unint64_t result = 0;
    if (a1)
    {
      unint64_t v5 = a2 - 3328;
      if (a2 >= 3328)
      {
        int v6 = &a1[a2];
        bzero(a1, 0xD00uLL);
        unint64_t result = 0;
        *((void *)a1 + 46) = a1;
        *((void *)a1 + 47) = v6;
        *((void *)a1 + 48) = a1 + 3328;
        *((void *)a1 + 49) = a1 + 3328;
        *((void *)a1 + 50) = a1 + 3328;
        *((void *)a1 + 51) = v6;
        *((void *)a1 + 52) = 0;
        *((void *)a1 + 53) = 0x100000000;
        *((void *)a1 + 73) = a2;
        if (v5 >> 3 >= 0x7B7)
        {
          *((void *)a1 + 359) = a1 + 3328;
          *((void *)a1 + 360) = a1 + 7920;
          *((void *)a1 + 48) = a1 + 19128;
          *((void *)a1 + 49) = a1 + 19128;
          *((void *)a1 + 50) = a1 + 19128;
          *((void *)a1 + 390) = a1 + 12512;
          return a1;
        }
      }
    }
  }
  return result;
}

uint64_t ZSTD_CStreamInSize()
{
  return 0x20000;
}

uint64_t ZSTD_CStreamOutSize()
{
  return 131591;
}

uint64_t ZSTD_resetCStream(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 3208) = 0;
  if (a2) {
    uint64_t v2 = a2 + 1;
  }
  else {
    uint64_t v2 = 0;
  }
  *(void *)(a1 + 440) = v2;
  return 0;
}

uint64_t ZSTD_initCStream_internal(uint64_t a1, const void *a2, size_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = a6 + 1;
  long long v10 = *a5;
  long long v11 = a5[2];
  *(_OWORD *)(a1 + 32) = a5[1];
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 16) = v10;
  long long v12 = a5[3];
  long long v13 = a5[4];
  long long v14 = a5[6];
  *(_OWORD *)(a1 + 96) = a5[5];
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  long long v15 = a5[7];
  long long v16 = a5[8];
  long long v17 = a5[9];
  *(void *)(a1 + 176) = *((void *)a5 + 20);
  *(_OWORD *)(a1 + 144) = v16;
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 128) = v15;
  double v18 = ZSTD_clearAllDicts(a1);
  if (!a2)
  {
    uint64_t result = 0;
    *(void *)(a1 + 3288) = a4;
    return result;
  }
  if (!a3) {
    return 0;
  }
  if (*(void *)(a1 + 584)) {
    return -64;
  }
  uint64_t v20 = *(uint64_t (**)(void, size_t, double))(a1 + 552);
  if (v20)
  {
    int v21 = (void *)v20(*(void *)(a1 + 568), a3, v18);
    if (v21)
    {
LABEL_9:
      memcpy(v21, a2, a3);
      uint64_t result = 0;
      *(void *)(a1 + 3248) = v21;
      *(void *)(a1 + 3256) = v21;
      *(void *)(a1 + 3264) = a3;
      *(_DWORD *)(a1 + 3272) = 0;
      return result;
    }
  }
  else
  {
    int v21 = malloc_type_malloc(a3, 0x26AA08A0uLL);
    if (v21) {
      goto LABEL_9;
    }
  }
  return -64;
}

uint64_t ZSTD_initCStream_usingCDict_advanced(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = a5 + 1;
  *(void *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 56) = a4;
  ZSTD_clearAllDicts(a1);
  *(void *)(a1 + 3288) = a2;
  return 0;
}

uint64_t ZSTD_initCStream_usingCDict(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = 0;
  ZSTD_clearAllDicts(a1);
  *(void *)(a1 + 3288) = a2;
  return 0;
}

uint64_t ZSTD_initCStream_advanced(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 || *(_DWORD *)(a4 + 28)) {
    uint64_t v8 = a5 + 1;
  }
  else {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = v8;
  uint64_t result = -42;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1889B9F30, (uint32x4_t)vaddq_s32(*(int32x4_t *)a4, (int32x4_t)xmmword_1889B9F20)))) & 1) == 0&& (*(_DWORD *)(a4 + 16) - 8) >= 0xFFFFFFFB&& *(_DWORD *)(a4 + 20) <= 0x20000u&& (*(_DWORD *)(a4 + 24) - 1) <= 8)
  {
    int32x4_t v10 = *(int32x4_t *)a4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a4 + 12);
    *(int32x4_t *)(a1 + 20) = v10;
    unsigned int v11 = *(_DWORD *)(a4 + 36);
    *(void *)(a1 + 48) = *(void *)(a4 + 28);
    *(void *)(a1 + 56) = v11;
    double v12 = ZSTD_clearAllDicts(a1);
    uint64_t result = 0;
    if (a2)
    {
      if (a3)
      {
        if (*(void *)(a1 + 584)) {
          return -64;
        }
        long long v13 = *(uint64_t (**)(void, size_t, double))(a1 + 552);
        if (v13)
        {
          long long v14 = (void *)v13(*(void *)(a1 + 568), a3, v12);
          if (v14)
          {
LABEL_16:
            memcpy(v14, a2, a3);
            uint64_t result = 0;
            *(void *)(a1 + 3248) = v14;
            *(void *)(a1 + 3256) = v14;
            *(void *)(a1 + 3264) = a3;
            *(_DWORD *)(a1 + 3272) = 0;
            return result;
          }
        }
        else
        {
          long long v14 = malloc_type_malloc(a3, 0x26AA08A0uLL);
          if (v14) {
            goto LABEL_16;
          }
        }
        return -64;
      }
    }
  }
  return result;
}

uint64_t ZSTD_initCStream_usingDict(uint64_t a1, const void *a2, size_t a3, int a4)
{
  if (a4 <= -131072) {
    int v7 = -131072;
  }
  else {
    int v7 = a4;
  }
  BOOL v8 = v7 <= 22;
  if (v7 >= 22) {
    int v7 = 22;
  }
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = 0;
  if (!v8 || a4 < -131072) {
    int v10 = v7;
  }
  else {
    int v10 = a4;
  }
  if (!v10) {
    int v10 = 3;
  }
  *(_DWORD *)(a1 + 60) = v10;
  double v11 = ZSTD_clearAllDicts(a1);
  uint64_t result = 0;
  if (a2 && a3)
  {
    if (*(void *)(a1 + 584)) {
      return -64;
    }
    long long v13 = *(uint64_t (**)(void, size_t, double))(a1 + 552);
    if (v13)
    {
      long long v14 = (void *)v13(*(void *)(a1 + 568), a3, v11);
      if (v14)
      {
LABEL_21:
        memcpy(v14, a2, a3);
        uint64_t result = 0;
        *(void *)(a1 + 3248) = v14;
        *(void *)(a1 + 3256) = v14;
        *(void *)(a1 + 3264) = a3;
        *(_DWORD *)(a1 + 3272) = 0;
        return result;
      }
    }
    else
    {
      long long v14 = malloc_type_malloc(a3, 0x26AA08A0uLL);
      if (v14) {
        goto LABEL_21;
      }
    }
    return -64;
  }
  return result;
}

uint64_t ZSTD_initCStream_srcSize(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = 0;
  ZSTD_clearAllDicts(a1);
  *(void *)(a1 + 3288) = 0;
  if (*(_DWORD *)(a1 + 3208))
  {
    *(_DWORD *)(a1 + 4) = 1;
    uint64_t result = -60;
  }
  else
  {
    uint64_t result = 0;
    if (a3) {
      uint64_t v7 = a3 + 1;
    }
    else {
      uint64_t v7 = 0;
    }
    *(void *)(a1 + 440) = v7;
  }
  if (a2 <= -131072) {
    int v8 = -131072;
  }
  else {
    int v8 = a2;
  }
  BOOL v9 = v8 <= 22;
  if (v8 >= 22) {
    int v8 = 22;
  }
  if (!v9 || a2 < -131072) {
    int v11 = v8;
  }
  else {
    int v11 = a2;
  }
  if (!v11) {
    int v11 = 3;
  }
  *(_DWORD *)(a1 + 60) = v11;
  return result;
}

uint64_t ZSTD_initCStream(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 3208) = 0;
  *(void *)(a1 + 440) = 0;
  ZSTD_clearAllDicts(a1);
  *(void *)(a1 + 3288) = 0;
  if (*(_DWORD *)(a1 + 3208)) {
    *(_DWORD *)(a1 + 4) = 1;
  }
  if (a2 <= -131072) {
    int v4 = -131072;
  }
  else {
    int v4 = a2;
  }
  BOOL v5 = v4 <= 22;
  if (v4 >= 22) {
    int v4 = 22;
  }
  if (!v5 || a2 < -131072) {
    int v7 = v4;
  }
  else {
    int v7 = a2;
  }
  if (!v7) {
    int v7 = 3;
  }
  *(_DWORD *)(a1 + 60) = v7;
  return 0;
}

void ZSTD_compressStream(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
}

void ZSTD_compressStream2(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  if (a2[2] > (unint64_t)a2[1]) {
    return;
  }
  int v6 = a3 + 1;
  unint64_t v5 = a3[1];
  if (v6[1] > v5 || a4 > 2) {
    return;
  }
  if (*(_DWORD *)(a1 + 3208))
  {
    int v10 = *(_DWORD *)(a1 + 308);
    goto LABEL_7;
  }
  ZSTD_CCtx_init_compressStream2(a1, a4, v5);
  if (v11 > 0xFFFFFFFFFFFFFF88) {
    return;
  }
  int v10 = *(_DWORD *)(a1 + 308);
  if (v10 == 1)
  {
    long long v21 = *(_OWORD *)a3;
    *(void *)(a1 + 3232) = a3[2];
    *(_OWORD *)(a1 + 3216) = v21;
    if (*(_DWORD *)(a1 + 312) != 1) {
      goto LABEL_7;
    }
  }
  else if (*(_DWORD *)(a1 + 312) != 1)
  {
    goto LABEL_7;
  }
  *(void *)(a1 + 3240) = a2[1] - a2[2];
LABEL_7:
  if ((v10 != 1
     || *(void *)(a1 + 3216) == *a3 && *(void *)(a1 + 3232) == a3[2] && a4 == 2 && *(void *)(a1 + 3224) == a3[1])
    && (*(_DWORD *)(a1 + 312) != 1 || *(void *)(a1 + 3240) == a2[1] - a2[2]))
  {
    if (*(int *)(a1 + 260) < 1)
    {
      if (ZSTD_compressStream_generic((int32x2_t *)a1, a2, a3, a4) <= 0xFFFFFFFFFFFFFF88)
      {
        if (*(_DWORD *)(a1 + 308) == 1)
        {
          long long v20 = *(_OWORD *)a3;
          *(void *)(a1 + 3232) = a3[2];
          *(_OWORD *)(a1 + 3216) = v20;
        }
        if (*(_DWORD *)(a1 + 312) == 1) {
          *(void *)(a1 + 3240) = a2[1] - a2[2];
        }
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 4))
      {
        uint64_t v12 = *(void *)(a1 + 3320);
        int v13 = *(_DWORD *)(v12 + 44);
        *(_DWORD *)(v12 + 84) = *(_DWORD *)(a1 + 60);
        memset(&v36[4], 0, 24);
        ZSTD_getCParamsFromCCtxParams((int8x8_t *)(a1 + 16), -1, 0, 0, (uint64_t)v36);
        *(_DWORD *)int v36 = v13;
        *(_OWORD *)(v12 + 56) = *(_OWORD *)&v36[12];
        *(_OWORD *)(v12 + 44) = *(_OWORD *)v36;
        *(_DWORD *)(a1 + 4) = 0;
      }
      if (a4)
      {
        if (a4 == 2)
        {
          uint64_t v14 = a3[2];
          uint64_t v15 = a2[2];
          while (1)
          {
            unint64_t v16 = ZSTDMT_compressStream_generic(*(void *)(a1 + 3320), a2, a3, 2);
            uint64_t v17 = a3[2];
            uint64_t v18 = *(void *)(a1 + 456);
            *(void *)(a1 + 448) += v17 - v14;
            uint64_t v19 = a2[2];
            *(void *)(a1 + 456) = v19 - v15 + v18;
            if (v16 > 0xFFFFFFFFFFFFFF88) {
              break;
            }
            if (!v16)
            {
              *(_DWORD *)(a1 + 3208) = 0;
              *(void *)(a1 + 440) = 0;
              goto LABEL_55;
            }
            uint64_t v15 = v19;
            uint64_t v14 = v17;
            if (v19 == a2[1]) {
              goto LABEL_55;
            }
          }
        }
        else
        {
          uint64_t v29 = a3[2];
          uint64_t v30 = a2[2];
          while (1)
          {
            unint64_t v31 = ZSTDMT_compressStream_generic(*(void *)(a1 + 3320), a2, a3, a4);
            uint64_t v32 = a3[2];
            uint64_t v33 = *(void *)(a1 + 456);
            *(void *)(a1 + 448) += v32 - v29;
            uint64_t v34 = a2[2];
            *(void *)(a1 + 456) = v34 - v30 + v33;
            if (v31 > 0xFFFFFFFFFFFFFF88) {
              break;
            }
            if (v31)
            {
              uint64_t v30 = v34;
              uint64_t v29 = v32;
              if (v34 != a2[1]) {
                continue;
              }
            }
            goto LABEL_55;
          }
        }
      }
      else
      {
        uint64_t v22 = a3[2];
        uint64_t v23 = a2[2];
        while (1)
        {
          unint64_t v24 = ZSTDMT_compressStream_generic(*(void *)(a1 + 3320), a2, a3, 0);
          uint64_t v25 = a3[2];
          uint64_t v26 = *(void *)(a1 + 456);
          *(void *)(a1 + 448) += v25 - v22;
          uint64_t v27 = a2[2];
          *(void *)(a1 + 456) = v27 - v23 + v26;
          if (v24 > 0xFFFFFFFFFFFFFF88) {
            break;
          }
          BOOL v28 = v25 == v22 && v27 == v23;
          if (!v28 || v22 == a3[1] || v23 == a2[1])
          {
LABEL_55:
            if (*(_DWORD *)(a1 + 308) == 1)
            {
              long long v35 = *(_OWORD *)a3;
              *(void *)(a1 + 3232) = a3[2];
              *(_OWORD *)(a1 + 3216) = v35;
            }
            if (*(_DWORD *)(a1 + 312) == 1) {
              *(void *)(a1 + 3240) = a2[1] - a2[2];
            }
            return;
          }
        }
      }
      *(_DWORD *)(a1 + 3208) = 0;
      *(void *)(a1 + 440) = 0;
    }
  }
}

__n128 ZSTD_CCtx_init_compressStream2(uint64_t a1, int a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a1 + 160);
  __n128 v55 = *(__n128 *)(a1 + 144);
  long long v56 = v6;
  uint64_t v57 = *(void *)(a1 + 176);
  long long v7 = *(_OWORD *)(a1 + 96);
  long long v51 = *(_OWORD *)(a1 + 80);
  long long v52 = v7;
  long long v8 = *(_OWORD *)(a1 + 128);
  long long v53 = *(_OWORD *)(a1 + 112);
  long long v54 = v8;
  long long v9 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v48[16] = v9;
  long long v10 = *(_OWORD *)(a1 + 64);
  long long v49 = *(_OWORD *)(a1 + 48);
  long long v50 = v10;
  unint64_t v11 = *(_DWORD **)(a1 + 3296);
  unint64_t v12 = *(void *)(a1 + 3304);
  int v13 = *(_DWORD *)(a1 + 3312);
  uint64_t v14 = *(const void **)(a1 + 3256);
  if (v14 && !*(void *)(a1 + 3280))
  {
    unint64_t v21 = *(void *)(a1 + 3264);
    int v22 = *(_DWORD *)(a1 + 3272);
    *(_OWORD *)int v38 = *(_OWORD *)(a1 + 552);
    *(void *)&v38[16] = *(void *)(a1 + 568);
    CDict_advanced2 = ZSTD_createCDict_advanced2(v14, v21, 1, v22, (long long *)(a1 + 16), (uint64_t)v38);
    *(void *)(a1 + 3280) = CDict_advanced2;
    if (!CDict_advanced2) {
      return result;
    }
    *(void *)(a1 + 3288) = CDict_advanced2;
    *(void *)(a1 + 3296) = 0;
    *(void *)(a1 + 3304) = 0;
    *(void *)(a1 + 3312) = 0;
    uint64_t v15 = (uint64_t)CDict_advanced2;
  }
  else
  {
    *(void *)(a1 + 3296) = 0;
    *(void *)(a1 + 3304) = 0;
    *(void *)(a1 + 3312) = 0;
    uint64_t v15 = *(void *)(a1 + 3288);
    if (!v15) {
      goto LABEL_5;
    }
  }
  HIDWORD(v49) = *(_DWORD *)(v15 + 4948);
LABEL_5:
  if (a2 == 2) {
    *(void *)(a1 + 440) = a3 + 1;
  }
  if (v11)
  {
    unint64_t v16 = (void *)(a1 + 440);
    unint64_t v17 = *(void *)(a1 + 440) - 1;
    if (!v15)
    {
      unint64_t v20 = v12;
      goto LABEL_24;
    }
    int v18 = v50;
    int v19 = DWORD1(v51);
    unint64_t v20 = v12;
    if (!*(_DWORD *)(v15 + 168))
    {
LABEL_13:
      if (v17 == -1 || attachDictSizeCutoffs[*(unsigned int *)(v15 + 312)] >= v17)
      {
        if (v19 == 2) {
          goto LABEL_24;
        }
      }
      else if (v19 != 1)
      {
        goto LABEL_24;
      }
      if (!v18) {
        goto LABEL_23;
      }
LABEL_24:
      int v25 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    if (!v15)
    {
      unint64_t v20 = 0;
      unint64_t v16 = (void *)(a1 + 440);
      unint64_t v17 = *(void *)(a1 + 440) - 1;
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v15 + 8);
    unint64_t v16 = (void *)(a1 + 440);
    unint64_t v17 = *(void *)(a1 + 440) - 1;
    int v18 = v50;
    int v19 = DWORD1(v51);
    if (!*(_DWORD *)(v15 + 168)) {
      goto LABEL_13;
    }
  }
LABEL_23:
  int v25 = 1;
LABEL_25:
  ZSTD_getCParamsFromCCtxParams((int8x8_t *)v48, v17, v20, v25, (uint64_t)v38);
  *(_OWORD *)&v48[16] = *(_OWORD *)&v38[12];
  *(_OWORD *)&v48[4] = *(_OWORD *)v38;
  if (*(_DWORD *)&v38[24] >= 7u && *(_DWORD *)&v48[4] >= 0x1Bu) {
    LODWORD(v53) = 1;
  }
  if (v17 <= 0x100000)
  {
    HIDWORD(v51) = 0;
    goto LABEL_37;
  }
  if (SHIDWORD(v51) < 1)
  {
LABEL_37:
    if (ZSTD_compressBegin_internal(a1, v11, v12, v13, 0, v15, (uint64_t *)v48, v17, 1) <= 0xFFFFFFFFFFFFFF88)
    {
      __n128 result = 0uLL;
      *(_OWORD *)(a1 + 3152) = 0u;
      if (*(_DWORD *)(a1 + 308))
      {
        uint64_t v32 = 0;
      }
      else
      {
        uint64_t v32 = *(void *)(a1 + 432);
        if (v32 == v17) {
          ++v32;
        }
      }
      *(void *)(a1 + 3168) = v32;
      *(_OWORD *)(a1 + 3192) = 0uLL;
      result.n128_u64[0] = 1;
      *(void *)(a1 + 3208) = 1;
    }
    return result;
  }
  CCtx_advanced = *(int64x2_t **)(a1 + 3320);
  if (!CCtx_advanced)
  {
    uint64_t v27 = *(void *)(a1 + 576);
    *(_OWORD *)int v38 = *(_OWORD *)(a1 + 552);
    *(void *)&v38[16] = *(void *)(a1 + 568);
    CCtx_advanced = ZSTDMT_createCCtx_advanced(HIDWORD(v51), (uint64_t)v38, v27);
    *(void *)(a1 + 3320) = CCtx_advanced;
    if (!CCtx_advanced) {
      return result;
    }
    uint64_t v15 = *(void *)(a1 + 3288);
  }
  uint64_t v28 = *v16 - 1;
  __n128 v45 = v55;
  long long v46 = v56;
  uint64_t v47 = v57;
  long long v41 = v51;
  long long v42 = v52;
  long long v43 = v53;
  long long v44 = v54;
  *(_OWORD *)int v38 = *(_OWORD *)v48;
  *(_OWORD *)&v38[16] = *(_OWORD *)&v48[16];
  long long v39 = v49;
  long long v40 = v50;
  result.n128_u64[0] = ZSTDMT_initCStream_internal((uint64_t)CCtx_advanced, v11, v12, v13, v15, (uint64_t)v38, v28).n128_u64[0];
  if (v29 <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v30 = *(void *)(a1 + 3288);
    if (v30)
    {
      int v31 = *(_DWORD *)(v30 + 4944);
      unint64_t v12 = *(void *)(v30 + 8);
    }
    else
    {
      int v31 = 0;
    }
    long long v33 = v49;
    *(_OWORD *)(a1 + 232) = v50;
    long long v34 = v52;
    *(_OWORD *)(a1 + 248) = v51;
    long long v35 = *(_OWORD *)&v48[16];
    *(_OWORD *)(a1 + 184) = *(_OWORD *)v48;
    *(_OWORD *)(a1 + 200) = v35;
    *(_OWORD *)(a1 + 216) = v33;
    __n128 result = v55;
    long long v36 = v56;
    long long v37 = v53;
    *(_OWORD *)(a1 + 296) = v54;
    *(__n128 *)(a1 + 312) = result;
    *(_OWORD *)(a1 + 328) = v36;
    *(_DWORD *)(a1 + 352) = v31;
    *(void *)(a1 + 360) = v12;
    *(_DWORD *)(a1 + 3208) = 1;
    *(void *)(a1 + 344) = v57;
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 456) = 0;
    *(_OWORD *)(a1 + 264) = v34;
    *(_OWORD *)(a1 + 280) = v37;
  }
  return result;
}

double ZSTDMT_updateCParams_whileCompressing(uint64_t a1, int8x8_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 84) = a2[5].i32[1];
  memset(&v5[4], 0, 24);
  ZSTD_getCParamsFromCCtxParams(a2, -1, 0, 0, (uint64_t)v5);
  *(_DWORD *)unint64_t v5 = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v5[12];
  double result = *(double *)v5;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)v5;
  return result;
}

uint64_t ZSTDMT_compressStream_generic(uint64_t a1, void *a2, uint64_t *a3, int a4)
{
  int v4 = a4;
  if (!a4 && *(_DWORD *)(a1 + 2956)) {
    return -60;
  }
  if (*(_DWORD *)(a1 + 224)) {
    goto LABEL_97;
  }
  unint64_t v9 = a3[1];
  unint64_t v10 = a3[2];
  if (v9 <= v10) {
    goto LABEL_97;
  }
  unint64_t v11 = *(void *)(a1 + 248);
  if (v11) {
    goto LABEL_90;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 2948);
  unsigned int v13 = *(_DWORD *)(a1 + 2952);
  if (v12 >= v13)
  {
LABEL_11:
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    size_t v21 = *(void *)(a1 + 288);
    size_t v22 = *(void *)(a1 + 208);
    if (*(void *)(a1 + 280) - v21 >= v22) {
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 8);
    while (1)
    {
      unsigned int v15 = *(_DWORD *)(a1 + 2944) & v12;
      pthread_mutex_lock((pthread_mutex_t *)(v14 + 424 * v15 + 16));
      uint64_t v16 = *(void *)(a1 + 8) + 424 * v15;
      unint64_t v17 = *(void *)v16;
      pthread_mutex_unlock((pthread_mutex_t *)(v16 + 16));
      uint64_t v14 = *(void *)(a1 + 8);
      unint64_t v18 = *(void *)(v14 + 424 * v15 + 200);
      if (v17 < v18) {
        break;
      }
      if (v13 == ++v12) {
        goto LABEL_11;
      }
    }
    uint64_t v23 = (void *)(v14 + 424 * v15);
    unint64_t v24 = v23 + 22;
    unint64_t v25 = v23[23];
    uint64_t v26 = v23 + 24;
    if (v25) {
      unint64_t v19 = v25;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v25) {
      uint64_t v26 = v24;
    }
    unint64_t v20 = *v26;
    size_t v21 = *(void *)(a1 + 288);
    size_t v22 = *(void *)(a1 + 208);
    if (*(void *)(a1 + 280) - v21 >= v22) {
      goto LABEL_53;
    }
  }
  uint64_t v27 = *(char **)(a1 + 272);
  size_t v21 = *(void *)(a1 + 240);
  if (v20 && v27 && v19 && v21 && v20 + v19 > (unint64_t)v27 && (unint64_t)&v27[v21] > v20) {
    goto LABEL_59;
  }
  if (*(_DWORD *)(a1 + 136))
  {
    size_t v144 = v22;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 2776));
    if (v27 && v21)
    {
      uint64_t v28 = &v27[v21];
      while (1)
      {
        unint64_t v33 = *(void *)(a1 + 2888);
        uint64_t v34 = *(void *)(a1 + 2896);
        uint64_t v35 = *(void *)(a1 + 2904);
        uint64_t v36 = *(unsigned int *)(a1 + 2912);
        uint64_t v37 = *(unsigned int *)(a1 + 2916);
        BOOL v38 = !v35 || v36 == v37;
        if (v38
          || ((unint64_t v39 = v35 + v37, v39 + (v36 - v37) > (unint64_t)v27)
            ? (BOOL v40 = (unint64_t)v28 > v39)
            : (BOOL v40 = 0),
              !v40))
        {
          unint64_t v29 = v34 + v36;
          BOOL v30 = !v34 || v33 == v29;
          BOOL v31 = !v30 && v33 > (unint64_t)v27;
          if (!v31 || (unint64_t)v28 <= v29) {
            break;
          }
        }
        pthread_cond_wait((pthread_cond_t *)(a1 + 2840), (pthread_mutex_t *)(a1 + 2776));
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2776));
    size_t v22 = v144;
  }
  memmove(v27, *(const void **)(a1 + 232), v21);
  *(void *)(a1 + 232) = v27;
  *(void *)(a1 + 288) = v21;
LABEL_53:
  uint64_t v41 = *(void *)(a1 + 272);
  unint64_t v11 = v41 + v21;
  if (v20 && v41 && v19 && v22 && v20 + v19 > v11 && v11 + v22 > v20)
  {
LABEL_59:
    unint64_t v11 = *(void *)(a1 + 248);
    goto LABEL_88;
  }
  if (*(_DWORD *)(a1 + 136))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 2776));
    if (v11 && v22)
    {
      size_t v42 = v11 + v22;
      while (1)
      {
        unint64_t v47 = *(void *)(a1 + 2888);
        uint64_t v48 = *(void *)(a1 + 2896);
        uint64_t v49 = *(void *)(a1 + 2904);
        uint64_t v50 = *(unsigned int *)(a1 + 2912);
        uint64_t v51 = *(unsigned int *)(a1 + 2916);
        BOOL v52 = !v49 || v50 == v51;
        if (v52 || ((size_t v53 = v49 + v51, v53 + (v50 - v51) > v11) ? (v54 = v42 > v53) : (v54 = 0), !v54))
        {
          size_t v43 = v48 + v50;
          BOOL v44 = !v48 || v47 == v43;
          BOOL v45 = !v44 && v47 > v11;
          if (!v45 || v42 <= v43) {
            break;
          }
        }
        pthread_cond_wait((pthread_cond_t *)(a1 + 2840), (pthread_mutex_t *)(a1 + 2776));
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2776));
  }
  *(void *)(a1 + 248) = v11;
  *(void *)(a1 + 256) = v22;
  *(void *)(a1 + 264) = 0;
LABEL_88:
  if (!v11)
  {
LABEL_97:
    BOOL v66 = 1;
    goto LABEL_98;
  }
  unint64_t v9 = a3[1];
  unint64_t v10 = a3[2];
LABEL_90:
  BOOL v55 = 0;
  uint64_t v56 = *a3;
  size_t v57 = v9 - v10;
  unint64_t v58 = *(void *)(a1 + 264);
  if (v57 >= *(void *)(a1 + 208) - v58) {
    size_t v57 = *(void *)(a1 + 208) - v58;
  }
  if (!*(_DWORD *)(a1 + 132) || v57 + v58 < 0x20)
  {
LABEL_209:
    size_t v62 = v57;
    goto LABEL_210;
  }
  long long v59 = (unsigned __int8 *)(v56 + v10);
  uint64_t v60 = *(void *)(a1 + 2928);
  unint64_t v61 = v58 - 32;
  if (v58 < 0x20)
  {
    long long v63 = (unsigned __int8 *)(v58 + v11 - 32);
    if (v58)
    {
      uint64_t v133 = 0;
      uint64_t v65 = 0;
      do
        uint64_t v65 = *(unsigned __int8 *)(v11 + v133++) - 0x30E44323485A9B9DLL * v65 + 10;
      while (v58 != v133);
    }
    else
    {
      uint64_t v65 = 0;
    }
    size_t v62 = 32 - v58;
    unint64_t v137 = v59;
    do
    {
      unsigned int v138 = *v137++;
      uint64_t v65 = v138 - 0x30E44323485A9B9DLL * v65 + 10;
    }
    while (!__CFADD__(v61++, 1));
LABEL_201:
    if (v62 <= v57) {
      size_t v140 = v57;
    }
    else {
      size_t v140 = v62;
    }
    while (1)
    {
      BOOL v55 = v140 != v62;
      if (v140 == v62) {
        goto LABEL_209;
      }
      uint64_t v141 = &v63[v62];
      if (v62 >= 0x20) {
        uint64_t v141 = &v59[v62 - 32];
      }
      uint64_t v65 = v59[v62++] - 0x30E44323485A9B9DLL * (v65 - (*v141 + 10) * *(void *)(a1 + 2936)) + 10;
      if ((v60 & ~v65) == 0) {
        goto LABEL_208;
      }
    }
  }
  size_t v62 = 0;
  long long v63 = (unsigned __int8 *)(v11 + v58 - 32);
  uint64_t v64 = *(unsigned __int8 *)(v11 + v58 - 15)
      - 0x30E44323485A9B9DLL
      * (*(unsigned __int8 *)(v11 + v58 - 16)
       - 0x30E44323485A9B9DLL
       * (*(unsigned __int8 *)(v11 + v58 - 17)
        - 0x30E44323485A9B9DLL
        * (*(unsigned __int8 *)(v11 + v58 - 18)
         - 0x30E44323485A9B9DLL
         * (*(unsigned __int8 *)(v11 + v58 - 19)
          - 0x30E44323485A9B9DLL
          * (*(unsigned __int8 *)(v11 + v58 - 20)
           - 0x30E44323485A9B9DLL
           * (*(unsigned __int8 *)(v11 + v58 - 21)
            - 0x30E44323485A9B9DLL
            * (*(unsigned __int8 *)(v11 + v58 - 22)
             - 0x30E44323485A9B9DLL
             * (*(unsigned __int8 *)(v11 + v58 - 23)
              - 0x30E44323485A9B9DLL
              * (*(unsigned __int8 *)(v11 + v58 - 24)
               - 0x30E44323485A9B9DLL
               * (*(unsigned __int8 *)(v11 + v58 - 25)
                - 0x30E44323485A9B9DLL
                * (*(unsigned __int8 *)(v11 + v58 - 26)
                 - 0x30E44323485A9B9DLL
                 * (*(unsigned __int8 *)(v11 + v58 - 27)
                  - 0x30E44323485A9B9DLL
                  * (*(unsigned __int8 *)(v11 + v58 - 28)
                   - 0x30E44323485A9B9DLL
                   * (*(unsigned __int8 *)(v11 + v58 - 29)
                    - 0x30E44323485A9B9DLL
                    * (*(unsigned __int8 *)(v11 + v58 - 30)
                     - 0x30E44323485A9B9DLL
                     * (*(unsigned __int8 *)(v11 + v58 - 31) - 0x30E44323485A9B9DLL * *v63 + 0x1715609F2C75EBE8)
                     + 10)
                    + 10)
                   + 10)
                  + 10)
                 + 10)
                + 10)
               + 10)
              + 10)
             + 10)
            + 10)
           + 10)
          + 10)
         + 10)
        + 10)
       + 10)
      + 10;
  uint64_t v65 = *(unsigned __int8 *)(v11 + v58 - 1)
      - 0x30E44323485A9B9DLL
      * (*(unsigned __int8 *)(v11 + v58 - 2)
       - 0x30E44323485A9B9DLL
       * (*(unsigned __int8 *)(v11 + v58 - 3)
        - 0x30E44323485A9B9DLL
        * (*(unsigned __int8 *)(v11 + v58 - 4)
         - 0x30E44323485A9B9DLL
         * (*(unsigned __int8 *)(v11 + v58 - 5)
          - 0x30E44323485A9B9DLL
          * (*(unsigned __int8 *)(v11 + v58 - 6)
           - 0x30E44323485A9B9DLL
           * (*(unsigned __int8 *)(v11 + v58 - 7)
            - 0x30E44323485A9B9DLL
            * (*(unsigned __int8 *)(v11 + v58 - 8)
             - 0x30E44323485A9B9DLL
             * (*(unsigned __int8 *)(v11 + v58 - 9)
              - 0x30E44323485A9B9DLL
              * (*(unsigned __int8 *)(v11 + v58 - 10)
               - 0x30E44323485A9B9DLL
               * (*(unsigned __int8 *)(v11 + v58 - 11)
                - 0x30E44323485A9B9DLL
                * (*(unsigned __int8 *)(v11 + v58 - 12)
                 - 0x30E44323485A9B9DLL
                 * (*(unsigned __int8 *)(v11 + v58 - 13)
                  - 0x30E44323485A9B9DLL * (*(unsigned __int8 *)(v11 + v58 - 14) - 0x30E44323485A9B9DLL * v64 + 10)
                  + 10)
                 + 10)
                + 10)
               + 10)
              + 10)
             + 10)
            + 10)
           + 10)
          + 10)
         + 10)
        + 10)
       + 10)
      + 10;
  if ((v60 & ~v65) != 0) {
    goto LABEL_201;
  }
LABEL_208:
  BOOL v55 = 1;
LABEL_210:
  if (v4 == 0 && v55) {
    int v4 = 1;
  }
  memcpy((void *)(v11 + v58), (const void *)(v56 + a3[2]), v62);
  a3[2] += v62;
  *(void *)(a1 + 264) += v62;
  BOOL v66 = v62 == 0;
LABEL_98:
  if (a3[2] < (unint64_t)a3[1] && v4 == 2) {
    int v68 = 1;
  }
  else {
    int v68 = v4;
  }
  int v69 = *(_DWORD *)(a1 + 224);
  unint64_t v70 = *(void *)(a1 + 264);
  if (v69
    || v70 >= *(void *)(a1 + 208)
    || (v68 ? (BOOL v71 = v70 == 0) : (BOOL v71 = 1), !v71 || v68 == 2 && !*(_DWORD *)(a1 + 2956)))
  {
    unsigned int v72 = *(_DWORD *)(a1 + 2952);
    int v73 = *(_DWORD *)(a1 + 2944);
    BOOL v74 = v68 == 2;
    if (v72 <= *(_DWORD *)(a1 + 2948) + v73)
    {
      unsigned int v75 = v73 & v72;
      if (v69)
      {
        uint64_t v76 = *(void *)(a1 + 8);
        goto LABEL_116;
      }
      uint64_t v109 = 0;
      uint64_t v110 = *(void *)(a1 + 248);
      uint64_t v111 = *(void *)(a1 + 8) + 424 * v75;
      *(void *)(v111 + 192) = v110;
      *(void *)(v111 + 200) = v70;
      *(_OWORD *)(v111 + 176) = *(_OWORD *)(a1 + 232);
      uint64_t v112 = *(void *)(a1 + 8) + 424 * v75;
      *(void *)uint64_t v112 = 0;
      *(void *)(v112 + 8) = 0;
      long long v113 = *(_OWORD *)(a1 + 40);
      long long v114 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(v112 + 240) = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(v112 + 256) = v114;
      *(_OWORD *)(v112 + 224) = v113;
      long long v115 = *(_OWORD *)(a1 + 88);
      long long v116 = *(_OWORD *)(a1 + 104);
      long long v117 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(v112 + 304) = *(_OWORD *)(a1 + 120);
      *(_OWORD *)(v112 + 320) = v117;
      *(_OWORD *)(v112 + 272) = v115;
      *(_OWORD *)(v112 + 288) = v116;
      long long v118 = *(_OWORD *)(a1 + 152);
      long long v119 = *(_OWORD *)(a1 + 168);
      long long v120 = *(_OWORD *)(a1 + 184);
      *(void *)(v112 + 384) = *(void *)(a1 + 200);
      *(_OWORD *)(v112 + 352) = v119;
      *(_OWORD *)(v112 + 368) = v120;
      *(_OWORD *)(v112 + 336) = v118;
      if (!*(_DWORD *)(a1 + 2952)) {
        uint64_t v109 = *(void *)(a1 + 3024);
      }
      BOOL v121 = v68 == 2;
      uint64_t v122 = (void *)(*(void *)(a1 + 8) + 424 * v75);
      uint64_t v123 = *(void *)(a1 + 2968);
      v122[20] = 0;
      v122[21] = 0;
      __int32 v124 = *(_DWORD *)(a1 + 2952);
      if (!*(_DWORD *)(a1 + 76)) {
        BOOL v121 = 0;
      }
      if (!v124) {
        BOOL v121 = 0;
      }
      v122[49] = v109;
      v122[50] = v123;
      uint64_t v76 = *(void *)(a1 + 8);
      uint64_t v125 = (int8x16_t *)(v76 + 424 * v75);
      v125[8] = vextq_s8(*(int8x16_t *)(a1 + 16), *(int8x16_t *)(a1 + 16), 8uLL);
      v125[9].i64[0] = *(void *)(a1 + 32);
      v125[9].i64[1] = a1 + 296;
      v125[13].i32[0] = v124;
      v125[13].i32[1] = v124 == 0;
      v125[13].i32[2] = v74;
      v125[26].i32[0] = v121;
      v125[25].i64[1] = 0;
      *(void *)(a1 + 288) += v70;
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      *(void *)(a1 + 248) = 0;
      if (v68 == 2)
      {
        *(void *)(a1 + 232) = 0;
        *(void *)(a1 + 240) = 0;
        *(_DWORD *)(a1 + 2956) = v74;
        if (v124)
        {
          if (!v70)
          {
LABEL_170:
            uint64_t v127 = v76 + 424 * v75;
            Buffer = ZSTDMT_getBuffer(v125[8].i64[1]);
            *(void *)(v127 + 160) = Buffer;
            *(void *)(v127 + 168) = v129;
            if (Buffer)
            {
              uint64_t v130 = v76 + 424 * v75;
              *(void *)(v130 + 192) = 0;
              *(void *)(v130 + 200) = 0;
              if (v129 >= 3)
              {
                *(_WORD *)Buffer = 1;
                Buffer[2] = 0;
                uint64_t v131 = 3;
              }
              else
              {
                uint64_t v131 = -70;
              }
            }
            else
            {
              uint64_t v131 = -64;
            }
            *(void *)(v76 + 424 * v75 + 8) = v131;
            ++*(_DWORD *)(a1 + 2952);
            goto LABEL_126;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 76) = 0;
        }
      }
      else
      {
        unint64_t v126 = *(void *)(a1 + 216);
        if (v126 >= v70) {
          unint64_t v126 = v70;
        }
        *(void *)(a1 + 232) = v110 + v70 - v126;
        *(void *)(a1 + 240) = v126;
        if (!v70 && v124) {
          goto LABEL_170;
        }
      }
LABEL_116:
      uint64_t v77 = *(void *)a1;
      long long v78 = (pthread_mutex_t *)(*(void *)a1 + 96);
      pthread_mutex_lock(v78);
      unint64_t v79 = *(void *)(v77 + 72);
      if (v79 < 2)
      {
        if (*(void *)(v77 + 80) == *(void *)(v77 + 40) || !*(_DWORD *)(v77 + 88)) {
          goto LABEL_124;
        }
      }
      else if (*(void *)(v77 + 56) == (*(void *)(v77 + 64) + 1) % v79)
      {
LABEL_124:
        pthread_mutex_unlock(v78);
        int v82 = 1;
LABEL_125:
        *(_DWORD *)(a1 + 224) = v82;
        goto LABEL_126;
      }
      if (!*(_DWORD *)(v77 + 256))
      {
        *(_DWORD *)(v77 + 88) = 0;
        uint64_t v80 = *(void *)(v77 + 64);
        long long v81 = (uint64_t (**)(uint64_t))(*(void *)(v77 + 48) + 16 * v80);
        *long long v81 = ZSTDMT_compressionJob;
        v81[1] = (uint64_t (*)(uint64_t))(v76 + 424 * v75);
        *(void *)(v77 + 64) = (v80 + 1) % v79;
        pthread_cond_signal((pthread_cond_t *)(v77 + 208));
      }
      pthread_mutex_unlock(v78);
      int v82 = 0;
      ++*(_DWORD *)(a1 + 2952);
      goto LABEL_125;
    }
  }
LABEL_126:
  unsigned int v83 = *(_DWORD *)(a1 + 2944) & *(_DWORD *)(a1 + 2948);
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 8) + 424 * v83 + 16));
  if (v66)
  {
    uint64_t v84 = *(void *)(a1 + 8);
    if (*(_DWORD *)(a1 + 2948) < *(_DWORD *)(a1 + 2952)
      && *(void *)(v84 + 424 * v83 + 408) == *(void *)(v84 + 424 * v83 + 8))
    {
      do
      {
        if (*(void *)(v84 + 424 * v83) == *(void *)(v84 + 424 * v83 + 200)) {
          break;
        }
        pthread_cond_wait((pthread_cond_t *)(v84 + 424 * v83 + 80), (pthread_mutex_t *)(v84 + 424 * v83 + 16));
        uint64_t v84 = *(void *)(a1 + 8);
      }
      while (*(void *)(v84 + 424 * v83 + 408) == *(void *)(v84 + 424 * v83 + 8));
    }
  }
  else
  {
    uint64_t v84 = *(void *)(a1 + 8);
  }
  long long v85 = (uint64_t *)(v84 + 424 * v83);
  unint64_t v87 = *v85;
  unint64_t v86 = v85[1];
  unint64_t v88 = v85[25];
  pthread_mutex_unlock((pthread_mutex_t *)(v85 + 2));
  if (v86 >= 0xFFFFFFFFFFFFFF89)
  {
    for (unsigned int i = *(_DWORD *)(a1 + 2948); i < *(_DWORD *)(a1 + 2952); *(_DWORD *)(a1 + 2948) = i)
    {
      unsigned int v96 = *(_DWORD *)(a1 + 2944) & i;
      pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 8) + 424 * v96 + 16));
      for (uint64_t j = *(void *)(a1 + 8);
            *(void *)(j + 424 * v96) < *(void *)(j + 424 * v96 + 200);
            uint64_t j = *(void *)(a1 + 8))
      {
        pthread_cond_wait((pthread_cond_t *)(j + 424 * v96 + 80), (pthread_mutex_t *)(j + 424 * v96 + 16));
      }
      pthread_mutex_unlock((pthread_mutex_t *)(j + 424 * v96 + 16));
      unsigned int i = *(_DWORD *)(a1 + 2948) + 1;
    }
    ZSTDMT_releaseAllJobResources(a1);
    goto LABEL_189;
  }
  uint64_t v89 = *(void *)(a1 + 8);
  if (v87 == v88)
  {
    uint64_t v90 = v89 + 424 * v83;
    if (*(_DWORD *)(v90 + 416))
    {
      __int16 v91 = (_DWORD *)(v90 + 416);
      int v92 = ZSTD_XXH64_digest((uint64_t *)(a1 + 2680));
      uint64_t v93 = v89 + 424 * v83;
      uint64_t v94 = *(void *)(v93 + 8);
      *(_DWORD *)(*(void *)(v93 + 160) + v94) = v92;
      v86 += 4;
      *(void *)(v93 + 8) = v94 + 4;
      *__int16 v91 = 0;
      goto LABEL_143;
    }
  }
  if (v86)
  {
LABEL_143:
    uint64_t v98 = *(void *)(v89 + 424 * v83 + 408);
    uint64_t v99 = a2[2];
    if (v86 - v98 >= a2[1] - v99) {
      size_t v100 = a2[1] - v99;
    }
    else {
      size_t v100 = v86 - v98;
    }
    if (v100)
    {
      memcpy((void *)(*a2 + v99), (const void *)(*(void *)(v89 + 424 * v83 + 160) + v98), v100);
      uint64_t v99 = a2[2];
      uint64_t v89 = *(void *)(a1 + 8);
      uint64_t v98 = *(void *)(v89 + 424 * v83 + 408);
    }
    a2[2] = v99 + v100;
    unint64_t v101 = v98 + v100;
    *(void *)(v89 + 424 * v83 + 408) = v101;
    if (v87 == v88 && v101 == v86)
    {
      uint64_t v103 = v89 + 424 * v83;
      uint64_t v104 = *(void **)(v103 + 160);
      if (v104)
      {
        uint64_t v105 = *(void *)(a1 + 16);
        uint64_t v106 = *(void *)(v103 + 168);
        pthread_mutex_lock((pthread_mutex_t *)v105);
        uint64_t v107 = *(unsigned int *)(v105 + 76);
        if (v107 >= *(_DWORD *)(v105 + 72))
        {
          pthread_mutex_unlock((pthread_mutex_t *)v105);
          unint64_t v132 = *(void (**)(void, void *))(v105 + 88);
          if (v132) {
            v132(*(void *)(v105 + 96), v104);
          }
          else {
            free(v104);
          }
        }
        else
        {
          *(_DWORD *)(v105 + 76) = v107 + 1;
          uint64_t v108 = v105 + 16 * v107;
          *(void *)(v108 + 104) = v104;
          *(void *)(v108 + 112) = v106;
          pthread_mutex_unlock((pthread_mutex_t *)v105);
        }
      }
      uint64_t v134 = *(void *)(a1 + 8) + 424 * v83;
      *(void *)(v134 + 160) = 0;
      *(void *)(v134 + 168) = 0;
      uint64_t v135 = *(void *)(a1 + 8) + 424 * v83;
      *(void *)(v135 + 8) = 0;
      *(void *)(a1 + 2976) += v87;
      *(void *)(a1 + 2984) += v86;
      ++*(_DWORD *)(a1 + 2948);
      unint64_t v101 = *(void *)(v135 + 408);
    }
    BOOL v31 = v86 > v101;
    v86 -= v101;
    if (v31) {
      goto LABEL_189;
    }
  }
  if (v88 > v87 || *(_DWORD *)(a1 + 2948) < *(_DWORD *)(a1 + 2952) || *(_DWORD *)(a1 + 224) || *(void *)(a1 + 264))
  {
    unint64_t v86 = 1;
  }
  else
  {
    int v142 = *(_DWORD *)(a1 + 2956);
    *(_DWORD *)(a1 + 2960) = v142;
    BOOL v143 = v142 == 0;
    unint64_t v86 = v68 == 2 && v143;
  }
LABEL_189:
  if (v86 <= 1) {
    uint64_t v136 = 1;
  }
  else {
    uint64_t v136 = v86;
  }
  if (a3[2] >= (unint64_t)a3[1]) {
    return v86;
  }
  else {
    return v136;
  }
}

unint64_t ZSTD_compressStream_generic(int32x2_t *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  int v4 = a4;
  BOOL v40 = (char *)(*a3 + a3[1]);
  uint64_t v38 = *a3;
  long long v8 = (char *)(*a3 + a3[2]);
  uint64_t v9 = *a2 + a2[1];
  uint64_t v37 = *a2;
  unint64_t v10 = (unsigned char *)(*a2 + a2[2]);
  unint64_t v11 = a1 + 399;
  while (2)
  {
    __int32 v12 = a1[401].i32[0];
    while (1)
    {
      if (!v12) {
        return -62;
      }
      if (v12 == 1) {
        break;
      }
      if (v12 == 2)
      {
        int32x2_t v13 = a1[399];
        int32x2_t v14 = a1[400];
        unint64_t v15 = *(void *)&v13 - *(void *)&v14;
        unint64_t v16 = v9 - (void)v10;
        if ((unint64_t)(v9 - (void)v10) >= *(void *)&v13 - *(void *)&v14) {
          size_t v17 = *(void *)&v13 - *(void *)&v14;
        }
        else {
          size_t v17 = v9 - (void)v10;
        }
        if (v17) {
          goto LABEL_10;
        }
        goto LABEL_11;
      }
    }
    if (v4 == 2)
    {
      unint64_t v18 = v9 - (void)v10;
      unint64_t v19 = (unint64_t)(0x20000 - (v40 - v8)) >> 11;
      if ((unint64_t)(v40 - v8) >= 0x20000) {
        unint64_t v19 = 0;
      }
      if ((v18 >= v40 - v8 + ((unint64_t)(v40 - v8) >> 8) + v19 || a1[39].i32[0] == 1) && !*(void *)&a1[395])
      {
        unint64_t result = ZSTD_compressEnd((int *)a1, v10, v18, v8, v40 - v8);
        if (result > 0xFFFFFFFFFFFFFF88) {
          return result;
        }
        v10 += result;
        a1[401].i32[1] = 1;
        long long v8 = v40;
        goto LABEL_73;
      }
    }
    if (a1[38].i32[1])
    {
      unint64_t v20 = v9 - (void)v10;
    }
    else
    {
      int32x2_t v21 = a1[395];
      if (*(void *)&a1[396] - *(void *)&v21 >= (unint64_t)(v40 - v8)) {
        size_t v22 = v40 - v8;
      }
      else {
        size_t v22 = *(void *)&a1[396] - *(void *)&v21;
      }
      if (v22)
      {
        memcpy((void *)(*(void *)&a1[392] + *(void *)&v21), v8, v22);
        int32x2_t v21 = a1[395];
      }
      int32x2_t v23 = (int32x2_t)(*(void *)&v21 + v22);
      a1[395] = v23;
      v8 += v22;
      if (v4 == 1)
      {
        if (*(void *)&v23 == *(void *)&a1[394]) {
          goto LABEL_74;
        }
      }
      else if (!v4 && *(void *)&v23 < *(void *)&a1[396])
      {
        goto LABEL_74;
      }
      unint64_t v20 = v9 - (void)v10;
      if (!a1[38].i32[1])
      {
        size_t v25 = *(void *)&v23 - *(void *)&a1[394];
        int v24 = 1;
        goto LABEL_36;
      }
    }
    int v24 = 0;
    if ((unint64_t)(v40 - v8) >= *(void *)&a1[54]) {
      size_t v25 = (size_t)a1[54];
    }
    else {
      size_t v25 = v40 - v8;
    }
LABEL_36:
    unint64_t v26 = (0x20000 - v25) >> 11;
    if (v25 >= 0x20000) {
      unint64_t v26 = 0;
    }
    if (v20 >= v25 + (v25 >> 8) + v26)
    {
      uint64_t v27 = v10;
      if (v24) {
        goto LABEL_42;
      }
LABEL_52:
      BOOL v31 = &v8[v25];
      BOOL v29 = &v8[v25] == v40;
      if (&v8[v25] == v40)
      {
        unint64_t result = ZSTD_compressEnd((int *)a1, v27, v20, v8, v25);
        if (result > 0xFFFFFFFFFFFFFF88) {
          return result;
        }
      }
      else
      {
        unint64_t result = ZSTD_compressContinue_internal(a1, v27, v20, v8, v25, 1, 0);
        if (result > 0xFFFFFFFFFFFFFF88) {
          return result;
        }
      }
      a1[401].i32[1] = v29;
      long long v8 = v31;
      int v4 = a4;
      if (v27 != v10) {
        goto LABEL_59;
      }
      goto LABEL_66;
    }
    uint64_t v27 = v10;
    if (a1[39].i32[0] != 1)
    {
      uint64_t v27 = (unsigned char *)a1[397];
      unint64_t v20 = (unint64_t)a1[398];
    }
    if (!v24) {
      goto LABEL_52;
    }
LABEL_42:
    BOOL v28 = v4 == 2 && v8 == v40;
    BOOL v29 = v28;
    BOOL v30 = (char *)(*(void *)&a1[392] + *(void *)&a1[394]);
    if (v28) {
      unint64_t result = ZSTD_compressEnd((int *)a1, v27, v20, v30, v25);
    }
    else {
      unint64_t result = ZSTD_compressContinue_internal(a1, v27, v20, v30, v25, 1, 0);
    }
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      a1[401].i32[1] = v29;
      int32x2_t v33 = a1[395];
      int32x2_t v34 = a1[54];
      a1[396] = (int32x2_t)(*(void *)&v34 + *(void *)&v33);
      if (*(void *)&v34 + *(void *)&v33 > *(void *)&a1[393])
      {
        int32x2_t v33 = 0;
        a1[395] = 0;
        a1[396] = v34;
      }
      a1[394] = v33;
      if (v27 != v10)
      {
LABEL_59:
        int32x2_t v14 = 0;
        a1[399] = (int32x2_t)result;
        a1[400] = 0;
        a1[401].i32[0] = 2;
        unint64_t v15 = result;
        unint64_t v16 = v9 - (void)v10;
        if (v9 - (uint64_t)v10 >= result) {
          size_t v17 = result;
        }
        else {
          size_t v17 = v9 - (void)v10;
        }
        if (v17)
        {
LABEL_10:
          memcpy(v10, (const void *)(*(void *)&a1[397] + *(void *)&v14), v17);
          int32x2_t v14 = a1[400];
        }
LABEL_11:
        v10 += v17;
        a1[400] = (int32x2_t)(*(void *)&v14 + v17);
        if (v15 > v16)
        {
LABEL_74:
          a3[2] = (uint64_t)&v8[-v38];
          a2[2] = (uint64_t)&v10[-v37];
          if (a1[401].i32[1]) {
            return 0;
          }
          int32x2_t v35 = a1[396];
          int32x2_t v36 = a1[395];
          unint64_t result = *(void *)&v35 - *(void *)&v36;
          if (*(void *)&v35 == *(void *)&v36) {
            return (unint64_t)a1[54];
          }
          return result;
        }
        int32x2_t *v11 = 0;
        v11[1] = 0;
        if (!a1[401].i32[1])
        {
          a1[401].i32[0] = 1;
          int v4 = a4;
          continue;
        }
LABEL_73:
        a1[401].i32[0] = 0;
        a1[55] = 0;
        goto LABEL_74;
      }
LABEL_66:
      v10 += result;
      if (!v29) {
        continue;
      }
      goto LABEL_73;
    }
    return result;
  }
}

void ZSTD_compressStream2_simpleArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned int a8)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v13 = *a4;
  v10[0] = a5;
  v10[1] = a6;
  uint64_t v11 = *a7;
  ZSTD_compressStream2(a1, v12, v10, a8);
  *a4 = v13;
  *a7 = v11;
}

uint64_t ZSTD_compressSequences(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4, unint64_t a5, char *a6, unint64_t a7)
{
  ZSTD_CCtx_init_compressStream2(a1, 2, a7);
  unint64_t v13 = v12;
  if (v12 <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v14 = ZSTD_writeFrameHeader(a2, a3, (_DWORD *)(a1 + 184), a7, *(_DWORD *)(a1 + 352));
    unint64_t v15 = &a2[v14];
    if (a7 && *(_DWORD *)(a1 + 220)) {
      ZSTD_XXH64_update((unsigned int *)(a1 + 464), a6, a7);
    }
    unint64_t v16 = a3 - v14;
    v46[0] = 0;
    v46[1] = 0;
    int v17 = *(_DWORD *)(a1 + 316);
    if (v17) {
      unint64_t v18 = 0;
    }
    else {
      unint64_t v18 = ZSTD_copySequencesToSeqStoreNoBlockDelim;
    }
    if (v17 == 1) {
      unint64_t v19 = ZSTD_copySequencesToSeqStoreExplicitBlockDelim;
    }
    else {
      unint64_t v19 = (uint64_t (*)(uint64_t, unsigned int *, uint64_t, unint64_t, char *, uint64_t))v18;
    }
    size_t v42 = v19;
    if (a7)
    {
      uint64_t v37 = v14;
      uint64_t v38 = a2;
      unint64_t v20 = 0;
      unint64_t v41 = a7;
      unint64_t v39 = a3 - v14;
      BOOL v40 = a6;
      unint64_t v21 = a7;
      while (1)
      {
        unint64_t v45 = v20;
        unint64_t v22 = *(void *)(a1 + 432);
        __int16 v23 = v21 <= v22;
        if (v21 >= v22) {
          uint64_t v24 = *(void *)(a1 + 432);
        }
        else {
          LODWORD(v24) = v21;
        }
        uint64_t v25 = v24;
        *(void *)(a1 + 656) = *(void *)(a1 + 648);
        *(void *)(a1 + 640) = *(void *)(a1 + 632);
        *(_DWORD *)(a1 + 704) = 0;
        unint64_t v26 = v42(a1, (unsigned int *)v46, a4, a5, a6, v24);
        unint64_t v13 = v26;
        if (v26 > 0xFFFFFFFFFFFFFF88) {
          return v13;
        }
        size_t v27 = v25 - v26;
        if (v25 - v26 <= 6)
        {
          unint64_t v13 = v27 + 3;
          if (v27 + 3 > v16) {
            return -70;
          }
          *(_WORD *)unint64_t v15 = v23 | (8 * v27);
          v15[2] = v27 >> 13;
          memcpy(v15 + 3, a6, v27);
          unint64_t v20 = v13 + v45;
          goto LABEL_13;
        }
        unint64_t v13 = ZSTD_entropyCompressSequences(a1 + 632, *(unsigned __int16 **)(a1 + 2872), *(char **)(a1 + 2880), (_DWORD *)(a1 + 184), (uint64_t)(v15 + 3), v16 - 3, v25 - v26, *(uint32x4_t **)(a1 + 3120));
        if (v13 > 0xFFFFFFFFFFFFFF88) {
          return v13;
        }
        if (!*(_DWORD *)(a1 + 624)
          && *(void *)(a1 + 640) - *(void *)(a1 + 632) <= 0x1FuLL
          && *(void *)(a1 + 656) - *(void *)(a1 + 648) <= 9uLL
          && ZSTD_isRLE(v40, v41)
          || v13 == 1)
        {
          if (v16 < 4) {
            return -70;
          }
          char v29 = *a6;
          if (v21 > v22) {
            __int16 v30 = 2;
          }
          else {
            __int16 v30 = 3;
          }
          *(_WORD *)unint64_t v15 = v30 | (8 * v27);
          v15[2] = v27 >> 13;
          v15[3] = v29;
          unint64_t v13 = 4;
        }
        else
        {
          if (!v13)
          {
            unint64_t v13 = v27 + 3;
            if (v27 + 3 > v16) {
              return -70;
            }
            *(_WORD *)unint64_t v15 = v23 | (8 * v27);
            v15[2] = v27 >> 13;
            memcpy(v15 + 3, a6, v27);
            unint64_t v28 = v45;
            if (v13 >= 0xFFFFFFFFFFFFFF89) {
              return v13;
            }
            goto LABEL_43;
          }
          uint64_t v31 = *(void *)(a1 + 2872);
          uint64_t v32 = *(void *)(a1 + 2880);
          *(void *)(a1 + 2872) = v32;
          *(void *)(a1 + 2880) = v31;
          if (*(_DWORD *)(v32 + 4568) == 2) {
            *(_DWORD *)(v32 + 4568) = 1;
          }
          if (v21 > v22) {
            __int16 v33 = 4;
          }
          else {
            __int16 v33 = 5;
          }
          *(_WORD *)unint64_t v15 = v33 | (8 * v13);
          v15[2] = v13 >> 13;
          v13 += 3;
        }
        unint64_t v28 = v45;
LABEL_43:
        unint64_t v20 = v13 + v28;
        if (v21 <= v22)
        {
LABEL_47:
          unint64_t v13 = v20;
          uint64_t v14 = v37;
          a2 = v38;
          if (v20 > 0xFFFFFFFFFFFFFF88) {
            return v13;
          }
          goto LABEL_48;
        }
        *(_DWORD *)(a1 + 624) = 0;
LABEL_13:
        v15 += v13;
        a6 += v27;
        v16 -= v13;
        v21 -= v27;
        if (!v21) {
          goto LABEL_47;
        }
      }
    }
    if (v16 < 4) {
      return -70;
    }
    unint64_t v39 = a3 - v14;
    *(_DWORD *)unint64_t v15 = 1;
    unint64_t v20 = 3;
LABEL_48:
    unint64_t v13 = v20 + v14;
    if (*(_DWORD *)(a1 + 220))
    {
      unint64_t v34 = v39 - v20;
      int v35 = ZSTD_XXH64_digest((uint64_t *)(a1 + 464));
      if (v34 >= 4)
      {
        *(_DWORD *)&a2[v13] = v35;
        v13 += 4;
        return v13;
      }
      return -70;
    }
  }
  return v13;
}

uint64_t ZSTD_writeFrameHeader(unsigned char *a1, unint64_t a2, _DWORD *a3, unint64_t a4, unsigned int a5)
{
  int v5 = a5 > 0xFF;
  if (a5) {
    ++v5;
  }
  if ((a5 & 0xFFFF0000) != 0) {
    ++v5;
  }
  if (a3[10]) {
    int v6 = 0;
  }
  else {
    int v6 = v5;
  }
  int v7 = a3[1];
  int v8 = a3[8];
  if (v8) {
    BOOL v9 = 1 << v7 >= a4;
  }
  else {
    BOOL v9 = 0;
  }
  int v10 = v9;
  int v11 = a4 >> 8 > 0x100;
  if (a4 > 0xFF) {
    ++v11;
  }
  if (a4 > 0xFFFFFFFE) {
    ++v11;
  }
  if (v8) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v10) {
    char v13 = 32;
  }
  else {
    char v13 = 0;
  }
  if (a2 < 0x12) {
    return -70;
  }
  char v15 = v13 | (v6 + 4 * (a3[9] > 0)) | ((_BYTE)v12 << 6);
  if (*a3)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 1;
    *a1 = v15;
    if (v10) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  *(_DWORD *)a1 = -47205080;
  uint64_t v16 = 4;
  uint64_t v17 = 5;
  a1[4] = v15;
  if ((v10 & 1) == 0)
  {
LABEL_28:
    a1[v17] = 8 * v7 - 80;
    uint64_t v17 = v16 | 2;
  }
LABEL_29:
  if (v6 == 3)
  {
    *(_DWORD *)&a1[v17] = a5;
    v17 += 4;
    goto LABEL_37;
  }
  if (v6 == 2)
  {
    *(_WORD *)&a1[v17] = a5;
    v17 += 2;
    if (v12 != 1) {
      goto LABEL_38;
    }
LABEL_42:
    *(_WORD *)&a1[v17] = a4 - 256;
    return v17 + 2;
  }
  if (v6 != 1)
  {
LABEL_37:
    if (v12 != 1) {
      goto LABEL_38;
    }
    goto LABEL_42;
  }
  a1[v17++] = a5;
  if (v12 == 1) {
    goto LABEL_42;
  }
LABEL_38:
  if (v12 == 2)
  {
    *(_DWORD *)&a1[v17] = a4;
    return v17 + 4;
  }
  if (v12 == 3)
  {
    *(void *)&a1[v17] = a4;
    v17 += 8;
  }
  else if (v10)
  {
    a1[v17] = a4;
    return v17 + 1;
  }
  return v17;
}

unsigned int *ZSTD_XXH64_update(unsigned int *result, char *__src, size_t __n)
{
  int v3 = __n;
  int v4 = __src;
  int v5 = result;
  *(void *)result += __n;
  uint64_t v6 = result[18];
  if (v6 + __n > 0x1F)
  {
    int v7 = &__src[__n];
    if (v6)
    {
      unint64_t result = (unsigned int *)memcpy((char *)result + v6 + 40, __src, (32 - v6));
      uint64_t v8 = __ROR8__(v5[2] - 0x3D4D51C2D82B14B1 * v5[6], 33);
      v5[1] = 0x9E3779B185EBCA87 * __ROR8__(v5[1] - 0x3D4D51C2D82B14B1 * v5[5], 33);
      v5[2] = 0x9E3779B185EBCA87 * v8;
      unint64_t v9 = 0x9E3779B185EBCA87 * __ROR8__(v5[4] - 0x3D4D51C2D82B14B1 * v5[8], 33);
      v5[3] = 0x9E3779B185EBCA87 * __ROR8__(v5[3] - 0x3D4D51C2D82B14B1 * v5[7], 33);
      v5[4] = v9;
      v4 += (32 - *((_DWORD *)v5 + 18));
      *((_DWORD *)v5 + 18) = 0;
    }
    if (v4 + 32 <= v7)
    {
      unint64_t v10 = v5[1];
      unint64_t v11 = v5[2];
      unint64_t v13 = v5[3];
      unint64_t v12 = v5[4];
      do
      {
        unint64_t v10 = 0x9E3779B185EBCA87 * __ROR8__(v10 - 0x3D4D51C2D82B14B1 * *(void *)v4, 33);
        unint64_t v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 1), 33);
        unint64_t v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 2), 33);
        unint64_t v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 3), 33);
        v4 += 32;
      }
      while (v4 <= v7 - 32);
      v5[1] = v10;
      v5[2] = v11;
      v5[3] = v13;
      v5[4] = v12;
      if (v4 >= v7) {
        return result;
      }
    }
    else if (v4 >= v7)
    {
      return result;
    }
    size_t v14 = v7 - v4;
    unint64_t result = (unsigned int *)memcpy(v5 + 5, v4, v14);
    *((_DWORD *)v5 + 18) = v14;
    return result;
  }
  if (__src)
  {
    unint64_t result = (unsigned int *)memcpy((char *)result + v6 + 40, __src, __n);
    LODWORD(v6) = *((_DWORD *)v5 + 18);
  }
  *((_DWORD *)v5 + 18) = v6 + v3;
  return result;
}

unint64_t ZSTD_XXH64_digest(uint64_t *a1)
{
  uint64_t v1 = a1 + 5;
  uint64_t v2 = *((unsigned int *)a1 + 18);
  unint64_t v3 = (unint64_t)a1 + v2 + 40;
  unint64_t v4 = *a1;
  if ((unint64_t)*a1 < 0x20)
  {
    unint64_t v5 = a1[3] + 0x27D4EB2F165667C5 + v4;
    if ((unint64_t)(a1 + 6) > v3)
    {
LABEL_5:
      uint64_t v6 = (unsigned int *)(a1 + 5);
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v5 = 0x85EBCA77C2B2AE63
       - 0x61C8864E7A143579
       * ((0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)))
       + v4;
    if ((unint64_t)(a1 + 6) > v3) {
      goto LABEL_5;
    }
  }
  do
  {
    uint64_t v6 = (unsigned int *)(v1 + 1);
    unint64_t v5 = 0x85EBCA77C2B2AE63
       - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * *v1, 33)) ^ v5, 37);
    BOOL v7 = (unint64_t)(v1 + 2) > v3;
    ++v1;
  }
  while (!v7);
LABEL_8:
  if ((unint64_t)(v6 + 1) <= v3) {
    unint64_t v5 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * *v6++) ^ v5, 41);
  }
  if ((unint64_t)v6 < v3)
  {
    uint64_t v8 = (char *)a1 + v2 - (char *)v6 + 40;
    do
    {
      unsigned int v9 = *(unsigned __int8 *)v6;
      uint64_t v6 = (unsigned int *)((char *)v6 + 1);
      unint64_t v5 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v9) ^ v5, 53);
      --v8;
    }
    while (v8);
  }
  unint64_t v10 = 0x165667B19E3779F9
      * ((0xC2B2AE3D27D4EB4FLL * (v5 ^ (v5 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v5 ^ (v5 >> 33))) >> 29));
  return v10 ^ HIDWORD(v10);
}

void ZSTD_flushStream(uint64_t a1, uint64_t *a2)
{
  memset(v2, 0, sizeof(v2));
  ZSTD_compressStream2(a1, a2, v2, 1u);
}

void ZSTD_endStream(uint64_t a1, uint64_t *a2)
{
  memset(v2, 0, sizeof(v2));
  ZSTD_compressStream2(a1, a2, v2, 2u);
}

double ZSTD_getParams@<D0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)uint64_t v8 = 0uLL;
  if (a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = -1;
  }
  *(_DWORD *)&v8[24] = 0;
  *(void *)&v8[16] = 0;
  ZSTD_getCParams_internal((uint64_t)v8, a1, v6, a3, 3);
  *(void *)(a4 + 32) = 0;
  *(_OWORD *)a4 = *(_OWORD *)v8;
  double result = *(double *)&v8[12];
  *(_OWORD *)(a4 + 12) = *(_OWORD *)&v8[12];
  *(_DWORD *)(a4 + 28) = 1;
  return result;
}

uint64_t ZSTD_fillDoubleHashTable(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(unsigned int *)(result + 36);
  unint64_t v5 = a2 - 8;
  if (v3 + v4 + 2 > (unint64_t)(a2 - 8)) {
    return result;
  }
  uint64_t v6 = *(void *)(result + 48);
  int v7 = *(_DWORD *)(result + 208);
  uint64_t v8 = *(void *)(result + 64);
  int v9 = *(_DWORD *)(result + 196);
  int v10 = *(_DWORD *)(result + 200);
  double result = (64 - v9);
  char v11 = 32 - v9;
  char v12 = 64 - v10;
  if (a3)
  {
    uint64_t v13 = 0;
    int v14 = v7 - 5;
    while (1)
    {
      switch(v14)
      {
        case 0:
          uint64_t v16 = *(void *)(v3 + v4);
          unint64_t v17 = 0xCF1BBCDCBB000000 * v16;
          goto LABEL_13;
        case 1:
          uint64_t v16 = *(void *)(v3 + v4);
          unint64_t v17 = 0xCF1BBCDCBF9B0000 * v16;
          goto LABEL_13;
        case 2:
          uint64_t v16 = *(void *)(v3 + v4);
          unint64_t v17 = 0xCF1BBCDCBFA56300 * v16;
          goto LABEL_13;
        case 3:
          uint64_t v16 = *(void *)(v3 + v4);
          unint64_t v17 = 0xCF1BBCDCB7A56463 * v16;
LABEL_13:
          unint64_t v18 = v17 >> result;
          break;
        default:
          unint64_t v18 = (-1640531535 * *(_DWORD *)(v3 + v4)) >> v11;
          uint64_t v16 = *(void *)(v3 + v4);
          break;
      }
      *(_DWORD *)(v8 + 4 * v18) = v4 + v13;
      *(_DWORD *)(v6 + 4 * ((0xCF1BBCDCB7A56463 * v16) >> v12)) = v4 + v13;
      uint64_t v19 = v3 + v4;
      unint64_t v20 = (0xCF1BBCDCB7A56463 * *(void *)(v3 + v4 + 1)) >> v12;
      if (*(_DWORD *)(v6 + 4 * v20))
      {
        unint64_t v15 = (0xCF1BBCDCB7A56463 * *(void *)(v19 + 2)) >> v12;
        if (!*(_DWORD *)(v6 + 4 * v15)) {
          goto LABEL_16;
        }
LABEL_6:
        v3 += 3;
        v13 += 3;
        if (v3 + v4 + 2 > v5) {
          return result;
        }
      }
      else
      {
        *(_DWORD *)(v6 + 4 * v20) = v4 + v13 + 1;
        unint64_t v15 = (0xCF1BBCDCB7A56463 * *(void *)(v19 + 2)) >> v12;
        if (*(_DWORD *)(v6 + 4 * v15)) {
          goto LABEL_6;
        }
LABEL_16:
        *(_DWORD *)(v6 + 4 * v15) = v4 + v13 + 2;
        v3 += 3;
        v13 += 3;
        if (v3 + v4 + 2 > v5) {
          return result;
        }
      }
    }
  }
  switch(v7)
  {
    case 5:
      do
      {
        uint64_t v21 = *(void *)(v3 + v4);
        *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBB000000 * v21) >> result)) = v4;
        *(_DWORD *)(v6 + 4 * ((0xCF1BBCDCB7A56463 * v21) >> v12)) = v4;
        v4 += 3;
      }
      while (v3 + v4 + 2 <= v5);
      break;
    case 6:
      do
      {
        uint64_t v24 = *(void *)(v3 + v4);
        *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBF9B0000 * v24) >> result)) = v4;
        *(_DWORD *)(v6 + 4 * ((0xCF1BBCDCB7A56463 * v24) >> v12)) = v4;
        v4 += 3;
      }
      while (v3 + v4 + 2 <= v5);
      break;
    case 7:
      do
      {
        uint64_t v25 = *(void *)(v3 + v4);
        *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBFA56300 * v25) >> result)) = v4;
        *(_DWORD *)(v6 + 4 * ((0xCF1BBCDCB7A56463 * v25) >> v12)) = v4;
        v4 += 3;
      }
      while (v3 + v4 + 2 <= v5);
      break;
    case 8:
      do
      {
        unint64_t v22 = 0xCF1BBCDCB7A56463 * *(void *)(v3 + v4);
        *(_DWORD *)(v8 + 4 * (v22 >> result)) = v4;
        *(_DWORD *)(v6 + 4 * (v22 >> v12)) = v4;
        v4 += 3;
      }
      while (v3 + v4 + 2 <= v5);
      break;
    default:
      do
      {
        unint64_t v23 = (0xCF1BBCDCB7A56463 * *(void *)(v3 + v4)) >> v12;
        *(_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)(v3 + v4)) >> v11)) = v4;
        *(_DWORD *)(v6 + 4 * v23) = v4;
        v4 += 3;
      }
      while (v3 + v4 + 2 <= v5);
      break;
  }
  return result;
}

unint64_t ZSTD_compressBlock_doubleFast_extDict_generic(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  uint64_t v6 = a4;
  uint64_t v8 = *(void *)(a1 + 48);
  int v10 = *(_DWORD *)(a1 + 196);
  int v9 = *(_DWORD *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = (unint64_t)&a4[a5];
  unint64_t v13 = (unint64_t)&a4[a5 - 8];
  uint64_t v14 = *(void *)(a1 + 8);
  int v15 = a4 + a5 - v14;
  unsigned int v17 = *(_DWORD *)(a1 + 28);
  int v16 = *(_DWORD *)(a1 + 32);
  unsigned int v18 = 1 << *(_DWORD *)(a1 + 192);
  unsigned int v19 = *(_DWORD *)(a1 + 24);
  unsigned int v20 = v15 - v18;
  if (v15 - v17 > v18 && v16 == 0) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = v17;
  }
  if (v19 <= v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = v19;
  }
  uint64_t v24 = *a3;
  uint64_t v25 = a3[1];
  unint64_t v356 = v12;
  uint64_t v357 = *(void *)(a1 + 48);
  uint64_t v374 = *(void *)(a1 + 64);
  unint64_t v375 = v13;
  uint64_t v376 = *(void *)(a1 + 8);
  if (v22 >= v19)
  {
    BOOL v186 = v16 == 0;
    if (v186 && v15 - v19 > v18) {
      uint64_t v187 = v20;
    }
    else {
      uint64_t v187 = v19;
    }
    unsigned int v373 = v187;
    unint64_t v188 = v14 + v187;
    if (v6 == v188) {
      unint64_t v189 = v6 + 1;
    }
    else {
      unint64_t v189 = v6;
    }
    BOOL v190 = v189 - v14 - v19 > v18;
    unsigned int v191 = v189 - v14 - v18;
    if (v186 && v190) {
      unsigned int v19 = v191;
    }
    unsigned int v192 = v189 - v14 - v19;
    if (v25 <= v192) {
      uint64_t v193 = (unsigned __int8 *)v25;
    }
    else {
      uint64_t v193 = 0;
    }
    if (v25 <= v192) {
      unsigned int v194 = 0;
    }
    else {
      unsigned int v194 = a3[1];
    }
    BOOL v195 = v24 > v192;
    if (v24 <= v192) {
      unsigned int v196 = v194;
    }
    else {
      unsigned int v196 = *a3;
    }
    uint64_t v197 = *(void *)(a1 + 8);
    if (v195) {
      unint64_t v198 = 0;
    }
    else {
      unint64_t v198 = (unsigned __int8 *)v24;
    }
    if ((unint64_t)v189 >= v13) {
      goto LABEL_498;
    }
    unsigned int v367 = v196;
    unint64_t v353 = a3;
    char v199 = 64 - v9;
    char v200 = 64 - v10;
    char v201 = 32 - v10;
    unint64_t v202 = v12 - 7;
    unint64_t v203 = v12 - 3;
    unint64_t v204 = v12 - 1;
    unint64_t v205 = v12 - 32;
    uint64_t v365 = v197 + 12;
    uint64_t v369 = v197 + 16;
    uint64_t v371 = v197 - 1;
    while (1)
    {
      uint64_t v210 = v193;
      uint64_t v211 = v198;
      uint64_t v212 = *(void *)v189;
      unint64_t v213 = 0xCF1BBCDCB7A56463 * *(void *)v189;
      unsigned int v214 = a6 - 5;
      switch(a6)
      {
        case 5:
          unsigned int v215 = -1157627904;
          goto LABEL_258;
        case 6:
          unsigned int v215 = -1080360960;
          goto LABEL_258;
        case 7:
          unsigned int v215 = -1079680256;
LABEL_258:
          unint64_t v216 = (v212 * (v215 | 0xCF1BBCDC00000000)) >> v200;
          break;
        case 8:
          unint64_t v216 = v213 >> v200;
          break;
        default:
          unint64_t v216 = (-1640531535 * v212) >> v201;
          break;
      }
      uint64_t v217 = 4 * (v213 >> v199);
      uint64_t v218 = *(unsigned int *)(v8 + v217);
      int v219 = v189 - v376;
      uint64_t v220 = 4 * v216;
      uint64_t v221 = v11;
      uint64_t v222 = *(unsigned int *)(v11 + v220);
      *(_DWORD *)(v221 + v220) = v189 - v376;
      *(_DWORD *)(v8 + v217) = v189 - v376;
      unsigned int v223 = (char *)(v189 + 1);
      if (!v198 || *(_DWORD *)&v223[-v198] != *(_DWORD *)(v189 + 1)) {
        break;
      }
      uint64_t v224 = (char *)(v189 + 5);
      unint64_t v225 = &v189[-v198 + 5];
      if (v202 <= (unint64_t)(v189 + 5))
      {
        uint64_t v250 = v189 + 5;
        if ((unint64_t)v224 >= v203) {
          goto LABEL_286;
        }
LABEL_284:
        if (*(_DWORD *)v225 == *(_DWORD *)v250)
        {
          v250 += 4;
          v225 += 4;
        }
LABEL_286:
        if ((unint64_t)v250 >= v204)
        {
          if ((unint64_t)v250 >= v12) {
            goto LABEL_294;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v225 == *(unsigned __int16 *)v250)
          {
            v250 += 2;
            v225 += 2;
          }
          if ((unint64_t)v250 >= v12)
          {
LABEL_294:
            uint64_t v8 = v357;
            unint64_t v228 = v375;
            unint64_t v227 = v250 - (unsigned __int8 *)v224;
            unint64_t v229 = v223 - (char *)v6;
            unint64_t v230 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v223 <= v205) {
              goto LABEL_265;
            }
LABEL_295:
            if ((unint64_t)v6 <= v205)
            {
              uint64_t v252 = (char *)v230 + v205 - (void)v6;
              unint64_t v254 = v6;
              unint64_t v255 = v230;
              do
              {
                long long v256 = *(_OWORD *)v254;
                v254 += 16;
                *v255++ = v256;
              }
              while (v255 < (_OWORD *)v252);
              uint64_t v251 = (unsigned __int8 *)v205;
              if (v205 < (unint64_t)v223) {
                goto LABEL_302;
              }
            }
            else
            {
              uint64_t v251 = v6;
              uint64_t v252 = v230;
              if (v6 >= (unsigned __int8 *)v223) {
                goto LABEL_309;
              }
LABEL_302:
              if ((unint64_t)v6 <= v205) {
                uint64_t v257 = (unsigned __int8 *)v205;
              }
              else {
                uint64_t v257 = v6;
              }
              unint64_t v258 = v189 - v257 + 1;
              if (v258 < 8 || (unint64_t)((char *)v230 - (char *)v6) < 0x20)
              {
                unint64_t v259 = v251;
                goto LABEL_308;
              }
              if (v258 >= 0x20)
              {
                unint64_t v299 = v258 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v304 = (long long *)(v251 + 16);
                unsigned int v305 = (_OWORD *)((char *)v230 + v257 - v6 + 16);
                unint64_t v306 = v258 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v307 = *v304;
                  *(v305 - 1) = *(v304 - 1);
                  _OWORD *v305 = v307;
                  v304 += 2;
                  v305 += 2;
                  v306 -= 32;
                }
                while (v306);
                if (v258 != v299)
                {
                  if ((v258 & 0x18) == 0)
                  {
                    unint64_t v259 = &v251[v299];
                    v252 += v299;
                    goto LABEL_308;
                  }
                  goto LABEL_420;
                }
              }
              else
              {
                unint64_t v299 = 0;
LABEL_420:
                v252 += v258 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v259 = &v251[v258 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v308 = &v251[v299];
                uint64_t v309 = (void *)((char *)v230 + &v257[v299] - v6);
                unint64_t v310 = v299 - (v258 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v311 = *(void *)v308;
                  v308 += 8;
                  *v309++ = v311;
                  v310 += 8;
                }
                while (v310);
                if (v258 != (v258 & 0xFFFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_308:
                    char v260 = *v259++;
                    *v252++ = v260;
                  }
                  while (v259 != &v251[v258]);
                }
              }
            }
LABEL_309:
            *(void *)(a2 + 24) += v229;
            uint64_t v253 = *(void *)(a2 + 8);
            if (v229 >= 0x10000)
            {
              unint64_t v261 = (unint64_t)(v253 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v261;
            }
            unint64_t v12 = v356;
            uint64_t v8 = v357;
            unint64_t v228 = v375;
            goto LABEL_312;
          }
        }
        if (*v225 == *v250) {
          ++v250;
        }
        goto LABEL_294;
      }
      unint64_t v226 = *(void *)v224 ^ *(void *)v225;
      if (v226)
      {
        unint64_t v227 = __clz(__rbit64(v226)) >> 3;
        uint64_t v8 = v357;
        unint64_t v228 = v375;
        unint64_t v229 = v223 - (char *)v6;
        unint64_t v230 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v223 <= v205) {
          goto LABEL_265;
        }
        goto LABEL_295;
      }
      unint64_t v269 = v189 + 13;
      do
      {
        uint64_t v270 = &v269[v226];
        if ((unint64_t)&v269[v226] >= v202)
        {
          uint64_t v250 = &v189[v226 + 13];
          unint64_t v225 = &v250[-v211];
          if ((unint64_t)v250 >= v203) {
            goto LABEL_286;
          }
          goto LABEL_284;
        }
        uint64_t v271 = *(void *)&v189[v226 + 13 - v211];
        v226 += 8;
        unint64_t v272 = *(void *)v270 ^ v271;
      }
      while (!v272);
      unint64_t v227 = v226 + (__clz(__rbit64(v272)) >> 3);
      uint64_t v8 = v357;
      unint64_t v228 = v375;
      unint64_t v229 = v223 - (char *)v6;
      unint64_t v230 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v223 > v205) {
        goto LABEL_295;
      }
LABEL_265:
      _OWORD *v230 = *(_OWORD *)v6;
      uint64_t v231 = *(void *)(a2 + 24);
      if (v229 > 0x10)
      {
        uint64_t v232 = (_OWORD *)(v231 + 16);
        unint64_t v233 = v231 + v229;
        uint64_t v234 = (long long *)(v6 + 16);
        do
        {
          long long v235 = *v234++;
          *v232++ = v235;
        }
        while ((unint64_t)v232 < v233);
        goto LABEL_309;
      }
      *(void *)(a2 + 24) = v231 + v229;
      uint64_t v253 = *(void *)(a2 + 8);
LABEL_312:
      uint64_t v240 = v227 + 4;
      __int16 v262 = v227 + 1;
      *(_WORD *)(v253 + 4) = v229;
      *(_DWORD *)uint64_t v253 = 1;
      unint64_t v263 = (v227 + 1) >> 16;
      unint64_t v241 = v211;
      uint64_t v11 = v374;
      if (v263)
      {
LABEL_313:
        unint64_t v264 = (unint64_t)(v253 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v264;
        uint64_t v211 = v241;
      }
LABEL_314:
      *(_WORD *)(v253 + 6) = v262;
      uint64_t v265 = v253 + 8;
      *(void *)(a2 + 8) = v253 + 8;
      uint64_t v6 = (unsigned __int8 *)&v223[v240];
      if ((unint64_t)&v223[v240] <= v228)
      {
        uint64_t v266 = (v219 + 2);
        uint64_t v267 = *(void *)(v376 + v266);
        *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * v267) >> v199)) = v266;
        *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v6 - 2)) >> v199)) = v6 - 2 - v376;
        switch(a6)
        {
          case 5:
            unsigned int v268 = -1157627904;
            goto LABEL_326;
          case 6:
            unsigned int v268 = -1080360960;
            goto LABEL_326;
          case 7:
            unsigned int v268 = -1079680256;
LABEL_326:
            unint64_t v275 = v268 | 0xCF1BBCDC00000000;
            *(_DWORD *)(v11 + 4 * ((v267 * v275) >> v200)) = v266;
            int v273 = v6 - 1;
            unint64_t v276 = *(void *)(v6 - 1) * v275;
            goto LABEL_328;
          case 8:
            *(_DWORD *)(v11 + 4 * ((0xCF1BBCDCB7A56463 * v267) >> v200)) = v266;
            int v273 = v6 - 1;
            unint64_t v276 = 0xCF1BBCDCB7A56463 * *(void *)(v6 - 1);
LABEL_328:
            unint64_t v274 = v276 >> v200;
            break;
          default:
            *(_DWORD *)(v11 + 4 * ((-1640531535 * *(_DWORD *)(v376 + v266)) >> v201)) = v266;
            int v273 = v6 - 1;
            unint64_t v274 = (-1640531535 * *(_DWORD *)(v6 - 1)) >> v201;
            break;
        }
        *(_DWORD *)(v11 + 4 * v274) = v273 - v376;
        while (1)
        {
          unint64_t v198 = v210;
          uint64_t v210 = v211;
          if (!v198 || *(_DWORD *)v6 != *(_DWORD *)&v6[-v198]) {
            break;
          }
          unint64_t v277 = (char *)(v6 + 4);
          int v278 = &v6[-v198 + 4];
          if (v202 <= (unint64_t)(v6 + 4))
          {
            uint64_t v283 = v6 + 4;
            if ((unint64_t)v277 >= v203) {
              goto LABEL_340;
            }
LABEL_338:
            if (*(_DWORD *)v278 == *(_DWORD *)v283)
            {
              v283 += 4;
              v278 += 4;
            }
LABEL_340:
            if ((unint64_t)v283 >= v204)
            {
              if ((unint64_t)v283 < v12) {
                goto LABEL_346;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v278 == *(unsigned __int16 *)v283)
              {
                v283 += 2;
                v278 += 2;
              }
              if ((unint64_t)v283 >= v12) {
                goto LABEL_348;
              }
LABEL_346:
              if (*v278 == *v283) {
                ++v283;
              }
            }
LABEL_348:
            unint64_t v280 = v283 - (unsigned __int8 *)v277;
            goto LABEL_349;
          }
          unint64_t v279 = *(void *)v277 ^ *(void *)v278;
          if (v279)
          {
            unint64_t v280 = __clz(__rbit64(v279)) >> 3;
            if (v214 > 3) {
              goto LABEL_336;
            }
            goto LABEL_349;
          }
          unint64_t v286 = v6 + 12;
          do
          {
            unint64_t v287 = &v286[v279];
            if ((unint64_t)&v286[v279] >= v202)
            {
              uint64_t v283 = &v6[v279 + 12];
              int v278 = &v283[-v198];
              unint64_t v228 = v375;
              if ((unint64_t)v283 >= v203) {
                goto LABEL_340;
              }
              goto LABEL_338;
            }
            uint64_t v288 = *(void *)&v6[v279 + 12 - v198];
            v279 += 8;
            unint64_t v289 = *(void *)v287 ^ v288;
          }
          while (!v289);
          unint64_t v280 = v279 + (__clz(__rbit64(v289)) >> 3);
          unint64_t v228 = v375;
          if (v214 > 3)
          {
LABEL_336:
            unint64_t v281 = (-1640531535 * *(_DWORD *)v6) >> v201;
            uint64_t v282 = *(void *)v6;
            goto LABEL_355;
          }
LABEL_349:
          switch(a6)
          {
            case 5:
              uint64_t v282 = *(void *)v6;
              unint64_t v284 = 0xCF1BBCDCBB000000 * *(void *)v6;
              break;
            case 6:
              uint64_t v282 = *(void *)v6;
              unint64_t v284 = 0xCF1BBCDCBF9B0000 * *(void *)v6;
              break;
            case 7:
              uint64_t v282 = *(void *)v6;
              unint64_t v284 = 0xCF1BBCDCBFA56300 * *(void *)v6;
              break;
            case 8:
              uint64_t v282 = *(void *)v6;
              unint64_t v284 = 0xCF1BBCDCB7A56463 * *(void *)v6;
              break;
            default:
              goto LABEL_336;
          }
          unint64_t v281 = v284 >> v200;
LABEL_355:
          *(_DWORD *)(v11 + 4 * v281) = v6 - v376;
          *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * v282) >> v199)) = v6 - v376;
          if ((unint64_t)v6 <= v205)
          {
            *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v6;
            uint64_t v265 = *(void *)(a2 + 8);
          }
          *(_WORD *)(v265 + 4) = 0;
          *(_DWORD *)uint64_t v265 = 1;
          if (v280 + 1 >= 0x10000)
          {
            unint64_t v285 = (unint64_t)(v265 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v285;
          }
          *(_WORD *)(v265 + 6) = v280 + 1;
          v265 += 8;
          v6 += v280 + 4;
          *(void *)(a2 + 8) = v265;
          uint64_t v211 = v198;
          uint64_t v193 = v210;
          unint64_t v189 = v6;
          if ((unint64_t)v6 > v228) {
            goto LABEL_252;
          }
        }
        uint64_t v193 = v198;
        unint64_t v198 = v211;
      }
      else
      {
        uint64_t v193 = v210;
        unint64_t v198 = v211;
      }
      unint64_t v189 = v6;
LABEL_252:
      if ((unint64_t)v189 >= v228)
      {
        a3 = v353;
        unsigned int v196 = v367;
LABEL_498:
        if (v198) {
          unsigned int v348 = v198;
        }
        else {
          unsigned int v348 = v196;
        }
        *a3 = v348;
        if (v193) {
          LODWORD(v25) = v193;
        }
        else {
          LODWORD(v25) = v196;
        }
        goto LABEL_504;
      }
    }
    unint64_t v228 = v375;
    if (v218 > v373)
    {
      uint64_t v236 = v376 + v218;
      if (*(void *)(v376 + v218) == v212)
      {
        unint64_t v237 = v189 + 8;
        uint64_t v238 = (void *)(v236 + 8);
        if (v202 <= (unint64_t)(v189 + 8))
        {
          unint64_t v293 = v189 + 8;
          if ((unint64_t)v237 >= v203) {
            goto LABEL_375;
          }
        }
        else
        {
          unint64_t v239 = *v237 ^ *v238;
          if (v239)
          {
            uint64_t v11 = v374;
            uint64_t v240 = (__clz(__rbit64(v239)) >> 3) + 8;
            unint64_t v241 = &v189[-v236];
            if (v189 <= v6) {
              goto LABEL_274;
            }
            goto LABEL_384;
          }
          BOOL v300 = v189 + 16;
          uint64_t v11 = v374;
          while (1)
          {
            int v301 = &v300[v239];
            if ((unint64_t)&v300[v239] >= v202) {
              break;
            }
            uint64_t v302 = *(void *)(v369 + v218 + v239);
            v239 += 8;
            unint64_t v303 = *(void *)v301 ^ v302;
            if (v303)
            {
              unint64_t v228 = v375;
              uint64_t v240 = v239 + (__clz(__rbit64(v303)) >> 3) + 8;
              unint64_t v241 = &v189[-v236];
              if (v189 <= v6)
              {
LABEL_274:
                unsigned int v223 = (char *)v189;
                goto LABEL_448;
              }
LABEL_384:
              uint64_t v294 = v189 - 1;
              int v295 = (unsigned __int8 *)(v371 + v218);
              while (*v294 == *v295)
              {
                ++v240;
                unint64_t v296 = v294 - 1;
                if ((unint64_t)v295 > v188)
                {
                  --v295;
                  BOOL v62 = v294-- > v6;
                  if (v62) {
                    continue;
                  }
                }
                goto LABEL_447;
              }
LABEL_408:
              unsigned int v223 = (char *)(v294 + 1);
LABEL_448:
              unint64_t v318 = v223 - (char *)v6;
              unsigned int v319 = *(char **)(a2 + 24);
              if ((unint64_t)v223 <= v205)
              {
                *(_OWORD *)unsigned int v319 = *(_OWORD *)v6;
                uint64_t v322 = *(void *)(a2 + 24);
                if (v318 > 0x10)
                {
                  unint64_t v323 = (_OWORD *)(v322 + 16);
                  unint64_t v324 = v322 + v318;
                  unsigned int v325 = (long long *)(v6 + 16);
                  do
                  {
                    long long v326 = *v325++;
                    *v323++ = v326;
                  }
                  while ((unint64_t)v323 < v324);
                  goto LABEL_490;
                }
                *(void *)(a2 + 24) = v322 + v318;
                uint64_t v253 = *(void *)(a2 + 8);
              }
              else
              {
                if ((unint64_t)v6 <= v205)
                {
                  int v321 = &v319[v205 - (void)v6];
                  uint64_t v327 = v6;
                  unint64_t v328 = *(char **)(a2 + 24);
                  do
                  {
                    long long v329 = *(_OWORD *)v327;
                    v327 += 16;
                    *(_OWORD *)unint64_t v328 = v329;
                    v328 += 16;
                  }
                  while (v328 < v321);
                  BOOL v320 = (unsigned __int8 *)v205;
                  if (v205 < (unint64_t)v223) {
                    goto LABEL_459;
                  }
                }
                else
                {
                  BOOL v320 = v6;
                  int v321 = *(char **)(a2 + 24);
                  if (v6 >= (unsigned __int8 *)v223) {
                    goto LABEL_490;
                  }
LABEL_459:
                  if ((unint64_t)v6 <= v205) {
                    uint64_t v330 = (char *)v205;
                  }
                  else {
                    uint64_t v330 = (char *)v6;
                  }
                  unint64_t v331 = v223 - v330;
                  if ((unint64_t)(v223 - v330) < 8)
                  {
                    unint64_t v332 = v320;
                    goto LABEL_489;
                  }
                  if ((unint64_t)(v319 - (char *)v6) < 0x20)
                  {
                    unint64_t v332 = v320;
                    goto LABEL_489;
                  }
                  if (v331 >= 0x20)
                  {
                    unint64_t v333 = v331 & 0xFFFFFFFFFFFFFFE0;
                    uint64_t v334 = (long long *)(v320 + 16);
                    unsigned int v335 = &v319[v330 - (char *)v6 + 16];
                    unint64_t v336 = v331 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v337 = *v334;
                      *((_OWORD *)v335 - 1) = *(v334 - 1);
                      *(_OWORD *)unsigned int v335 = v337;
                      v334 += 2;
                      v335 += 32;
                      v336 -= 32;
                    }
                    while (v336);
                    if (v331 != v333)
                    {
                      if ((v331 & 0x18) == 0)
                      {
                        unint64_t v332 = &v320[v333];
                        v321 += v333;
                        goto LABEL_489;
                      }
                      goto LABEL_473;
                    }
                  }
                  else
                  {
                    unint64_t v333 = 0;
LABEL_473:
                    v321 += v331 & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v332 = &v320[v331 & 0xFFFFFFFFFFFFFFF8];
                    unsigned int v338 = &v320[v333];
                    unsigned int v339 = &v319[&v330[v333] - (char *)v6];
                    unint64_t v340 = v333 - (v331 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint64_t v341 = *(void *)v338;
                      v338 += 8;
                      *(void *)unsigned int v339 = v341;
                      v339 += 8;
                      v340 += 8;
                    }
                    while (v340);
                    if (v331 != (v331 & 0xFFFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_489:
                        char v346 = *v332++;
                        *v321++ = v346;
                      }
                      while (v332 < (unsigned __int8 *)v223);
                    }
                  }
                }
LABEL_490:
                *(void *)(a2 + 24) += v318;
                uint64_t v253 = *(void *)(a2 + 8);
                if (v318 >= 0x10000)
                {
                  unint64_t v347 = (unint64_t)(v253 - *(void *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v347;
                }
                unint64_t v12 = v356;
                uint64_t v8 = v357;
                uint64_t v11 = v374;
                unint64_t v228 = v375;
              }
              __int16 v262 = v240 - 3;
              *(_WORD *)(v253 + 4) = v318;
              *(_DWORD *)uint64_t v253 = v241 + 3;
              uint64_t v210 = v211;
              uint64_t v211 = v241;
              if ((unint64_t)(v240 - 3) >= 0x10000) {
                goto LABEL_313;
              }
              goto LABEL_314;
            }
          }
          unint64_t v293 = &v189[v239 + 16];
          uint64_t v238 = (void *)(v369 + v218 + v239);
          if ((unint64_t)v293 >= v203)
          {
LABEL_375:
            uint64_t v11 = v374;
            if ((unint64_t)v293 >= v204)
            {
              if ((unint64_t)v293 >= v12) {
                goto LABEL_383;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v238 == *(unsigned __int16 *)v293)
              {
                v293 += 2;
                uint64_t v238 = (void *)((char *)v238 + 2);
              }
              if ((unint64_t)v293 >= v12)
              {
LABEL_383:
                unint64_t v228 = v375;
                uint64_t v240 = v293 - v189;
                unint64_t v241 = &v189[-v236];
                if (v189 <= v6) {
                  goto LABEL_274;
                }
                goto LABEL_384;
              }
            }
            if (*(unsigned __int8 *)v238 == *v293) {
              ++v293;
            }
            goto LABEL_383;
          }
        }
        if (*(_DWORD *)v238 == *(_DWORD *)v293)
        {
          v293 += 4;
          uint64_t v238 = (void *)((char *)v238 + 4);
        }
        goto LABEL_375;
      }
    }
    if (v222 <= v373 || (uint64_t v242 = v376 + v222, *(_DWORD *)(v376 + v222) != *(_DWORD *)v189))
    {
      _X8 = &v189[(v189 - v6) >> 8];
      unint64_t v189 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      uint64_t v193 = v210;
      uint64_t v11 = v374;
      goto LABEL_252;
    }
    uint64_t v243 = *(void *)v223;
    unint64_t v244 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)v223) >> v199);
    uint64_t v245 = *(unsigned int *)(v8 + v244);
    *(_DWORD *)(v8 + v244) = v219 + 1;
    if (v245 > v373)
    {
      uint64_t v246 = v376 + v245;
      if (*(void *)(v376 + v245) == v243)
      {
        uint64_t v247 = (char *)(v189 + 9);
        int v248 = (void *)(v246 + 8);
        if (v202 <= (unint64_t)(v189 + 9))
        {
          unint64_t v316 = v189 + 9;
          if ((unint64_t)v247 >= v203) {
            goto LABEL_434;
          }
        }
        else
        {
          unint64_t v249 = *(void *)v247 ^ *v248;
          if (v249)
          {
            uint64_t v8 = v357;
            uint64_t v11 = v374;
            unint64_t v228 = v375;
            uint64_t v240 = (__clz(__rbit64(v249)) >> 3) + 8;
            unint64_t v241 = (unsigned __int8 *)&v223[-v246];
            if (v223 <= (char *)v6) {
              goto LABEL_448;
            }
            goto LABEL_443;
          }
          unint64_t v342 = v189 + 17;
          uint64_t v11 = v374;
          while (1)
          {
            int v343 = &v342[v249];
            if ((unint64_t)&v342[v249] >= v202) {
              break;
            }
            uint64_t v344 = *(void *)(v369 + v245 + v249);
            v249 += 8;
            unint64_t v345 = *(void *)v343 ^ v344;
            if (v345)
            {
              uint64_t v8 = v357;
              unint64_t v228 = v375;
              uint64_t v240 = v249 + (__clz(__rbit64(v345)) >> 3) + 8;
              unint64_t v241 = (unsigned __int8 *)&v223[-v246];
              if (v223 <= (char *)v6) {
                goto LABEL_448;
              }
LABEL_443:
              unsigned int v317 = (unsigned __int8 *)(v371 + v245);
              do
              {
                if (*v189 != *v317)
                {
                  unsigned int v223 = (char *)(v189 + 1);
                  goto LABEL_448;
                }
                ++v240;
                unint64_t v296 = v189 - 1;
                if (v189 <= v6) {
                  break;
                }
                --v189;
                BOOL v62 = (unint64_t)v317-- > v188;
              }
              while (v62);
LABEL_447:
              unsigned int v223 = (char *)(v296 + 1);
              goto LABEL_448;
            }
          }
          unint64_t v316 = &v189[v249 + 17];
          int v248 = (void *)(v369 + v245 + v249);
          if ((unint64_t)v316 >= v203)
          {
LABEL_434:
            uint64_t v11 = v374;
            if ((unint64_t)v316 >= v204)
            {
              if ((unint64_t)v316 >= v12) {
                goto LABEL_442;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v248 == *(unsigned __int16 *)v316)
              {
                v316 += 2;
                int v248 = (void *)((char *)v248 + 2);
              }
              if ((unint64_t)v316 >= v12)
              {
LABEL_442:
                uint64_t v8 = v357;
                unint64_t v228 = v375;
                uint64_t v240 = v316 - (unsigned __int8 *)v247 + 8;
                unint64_t v241 = (unsigned __int8 *)&v223[-v246];
                if (v223 <= (char *)v6) {
                  goto LABEL_448;
                }
                goto LABEL_443;
              }
            }
            if (*(unsigned __int8 *)v248 == *v316) {
              ++v316;
            }
            goto LABEL_442;
          }
        }
        if (*(_DWORD *)v248 == *(_DWORD *)v316)
        {
          v316 += 4;
          int v248 = (void *)((char *)v248 + 4);
        }
        goto LABEL_434;
      }
    }
    uint64_t v290 = v189 + 4;
    unint64_t v291 = (void *)(v242 + 4);
    if (v202 <= (unint64_t)(v189 + 4))
    {
      unsigned int v297 = v189 + 4;
      if ((unint64_t)v290 >= v203) {
        goto LABEL_394;
      }
    }
    else
    {
      unint64_t v292 = *v290 ^ *v291;
      unint64_t v228 = v375;
      if (v292)
      {
        uint64_t v240 = (__clz(__rbit64(v292)) >> 3) + 4;
        unint64_t v241 = &v189[-v242];
        if (v189 > v6) {
          goto LABEL_403;
        }
        goto LABEL_371;
      }
      unint64_t v312 = v189 + 12;
      while (1)
      {
        unint64_t v313 = &v312[v292];
        if ((unint64_t)&v312[v292] >= v202) {
          break;
        }
        uint64_t v314 = *(void *)(v365 + v222 + v292);
        v292 += 8;
        unint64_t v315 = *(void *)v313 ^ v314;
        if (v315)
        {
          unint64_t v228 = v375;
          uint64_t v240 = v292 + (__clz(__rbit64(v315)) >> 3) + 4;
          unint64_t v241 = &v189[-v242];
          if (v189 <= v6) {
            goto LABEL_371;
          }
LABEL_403:
          uint64_t v294 = v189 - 1;
          unsigned int v298 = (unsigned __int8 *)(v371 + v222);
          uint64_t v11 = v374;
          do
          {
            if (*v294 != *v298) {
              goto LABEL_408;
            }
            ++v240;
            unint64_t v296 = v294 - 1;
            if ((unint64_t)v298 <= v188) {
              break;
            }
            --v298;
            BOOL v62 = v294-- > v6;
          }
          while (v62);
          goto LABEL_447;
        }
      }
      unsigned int v297 = &v189[v292 + 12];
      unint64_t v291 = (void *)(v365 + v222 + v292);
      if ((unint64_t)v297 >= v203)
      {
LABEL_394:
        if ((unint64_t)v297 >= v204)
        {
          if ((unint64_t)v297 >= v12) {
            goto LABEL_402;
          }
        }
        else
        {
          if (*(unsigned __int16 *)v291 == *(unsigned __int16 *)v297)
          {
            v297 += 2;
            unint64_t v291 = (void *)((char *)v291 + 2);
          }
          if ((unint64_t)v297 >= v12)
          {
LABEL_402:
            unint64_t v228 = v375;
            uint64_t v240 = v297 - v189;
            unint64_t v241 = &v189[-v242];
            if (v189 > v6) {
              goto LABEL_403;
            }
LABEL_371:
            unsigned int v223 = (char *)v189;
            uint64_t v11 = v374;
            goto LABEL_448;
          }
        }
        if (*(unsigned __int8 *)v291 == *v297) {
          ++v297;
        }
        goto LABEL_402;
      }
    }
    if (*(_DWORD *)v291 == *(_DWORD *)v297)
    {
      v297 += 4;
      unint64_t v291 = (void *)((char *)v291 + 4);
    }
    goto LABEL_394;
  }
  if (v13 <= (unint64_t)v6) {
    goto LABEL_496;
  }
  unint64_t v366 = (unsigned __int8 *)(v14 + v23);
  uint64_t v26 = *(void *)(a1 + 16);
  unint64_t v352 = a3;
  unint64_t v354 = (unsigned __int8 *)(v26 + v22);
  uint64_t v370 = v26;
  unint64_t v364 = (char *)(v26 + v23);
  char v358 = 64 - v10;
  char v355 = 32 - v10;
  char v372 = 64 - v9;
  int v368 = v23 - 1;
  unint64_t v363 = v12 - 32;
  int v27 = a6 - 5;
  unint64_t v28 = (unint64_t)v6;
  unint64_t v29 = v13;
  int v360 = v23;
  int v362 = v22;
  int v359 = a6 - 5;
  do
  {
    uint64_t v30 = v25;
    switch(v27)
    {
      case 0:
        uint64_t v31 = *(void *)v6;
        unsigned int v32 = -1157627904;
        goto LABEL_21;
      case 1:
        uint64_t v31 = *(void *)v6;
        unsigned int v32 = -1080360960;
        goto LABEL_21;
      case 2:
        uint64_t v31 = *(void *)v6;
        unsigned int v32 = -1079680256;
        goto LABEL_21;
      case 3:
        uint64_t v31 = *(void *)v6;
        unsigned int v32 = -1213897629;
LABEL_21:
        unint64_t v33 = (v31 * (v32 | 0xCF1BBCDC00000000)) >> v358;
        break;
      default:
        unint64_t v33 = (-1640531535 * *(_DWORD *)v6) >> v355;
        uint64_t v31 = *(void *)v6;
        break;
    }
    uint64_t v34 = 4 * v33;
    uint64_t v35 = *(unsigned int *)(v11 + 4 * v33);
    uint64_t v36 = v370;
    if (v35 >= v23) {
      uint64_t v37 = v14;
    }
    else {
      uint64_t v37 = v370;
    }
    unint64_t v38 = 4 * ((0xCF1BBCDCB7A56463 * v31) >> v372);
    uint64_t v39 = v11;
    uint64_t v40 = *(unsigned int *)(v8 + v38);
    uint64_t v41 = v8;
    if (v40 >= v23) {
      uint64_t v42 = v14;
    }
    else {
      uint64_t v42 = v370;
    }
    int v43 = v6 - v14;
    int v44 = v6 - v14 + 1;
    uint64_t v45 = (v44 - v24);
    if (v45 >= v23) {
      uint64_t v36 = v14;
    }
    *(_DWORD *)(v41 + v38) = v43;
    *(_DWORD *)(v39 + v34) = v43;
    if (v45 <= v22
      || (v368 - v45) < 3
      || (uint64_t v46 = v36 + v45, *(_DWORD *)v46 != *(_DWORD *)(v6 + 1)))
    {
      if (v40 > v22)
      {
        unint64_t v56 = v42 + v40;
        if (*(void *)(v42 + v40) == v31)
        {
          int v57 = v43;
          uint64_t v30 = v24;
          _CF = v40 >= v23;
          unint64_t v12 = v356;
          if (v40 >= v23) {
            long long v59 = (char *)v356;
          }
          else {
            long long v59 = v364;
          }
          if (_CF) {
            uint64_t v60 = v366;
          }
          else {
            uint64_t v60 = v354;
          }
          unint64_t v61 = ZSTD_count_2segments((void *)v6 + 1, (char *)(v56 + 8), v356, v59, v366) + 8;
          BOOL v62 = v56 > (unint64_t)v60 && (unint64_t)v6 > v28;
          if (v62)
          {
            unint64_t v95 = v6 - 1;
            unsigned int v96 = (unsigned __int8 *)(v42 + v40 - 1);
            uint64_t v8 = v357;
            unint64_t v29 = v375;
            uint64_t v14 = v376;
            LODWORD(v23) = v360;
            LODWORD(v22) = v362;
            int v27 = v359;
            int v64 = v57;
            while (*v95 == *v96)
            {
              ++v61;
              uint64_t v97 = v95 - 1;
              if (v96 > v60)
              {
                --v96;
                BOOL v62 = (unint64_t)v95-- > v28;
                if (v62) {
                  continue;
                }
              }
              uint64_t v6 = v97 + 1;
              unint64_t v63 = v363;
              uint64_t v50 = v6;
              unint64_t v65 = (unint64_t)&v97[-v28 + 1];
              BOOL v66 = *(_OWORD **)(a2 + 24);
              if ((unint64_t)v6 <= v363) {
                goto LABEL_52;
              }
              goto LABEL_116;
            }
            uint64_t v6 = v95 + 1;
            unint64_t v63 = v363;
            uint64_t v50 = v6;
            unint64_t v65 = (unint64_t)&v95[-v28 + 1];
            BOOL v66 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v6 <= v363) {
              goto LABEL_52;
            }
          }
          else
          {
            uint64_t v50 = v6;
            uint64_t v8 = v357;
            unint64_t v29 = v375;
            uint64_t v14 = v376;
            LODWORD(v23) = v360;
            LODWORD(v22) = v362;
            unint64_t v63 = v363;
            int v27 = v359;
            int v64 = v57;
            unint64_t v65 = (unint64_t)&v6[-v28];
            BOOL v66 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v6 <= v363)
            {
LABEL_52:
              _OWORD *v66 = *(_OWORD *)v28;
              uint64_t v67 = *(void *)(a2 + 24);
              if (v65 <= 0x10)
              {
                *(void *)(a2 + 24) = v67 + v65;
                uint64_t v105 = *(void *)(a2 + 8);
                uint64_t v47 = (v64 - v40);
                goto LABEL_195;
              }
              int v68 = (_OWORD *)(v67 + 16);
              unint64_t v69 = v67 + v65;
              unint64_t v70 = (long long *)(v28 + 16);
              do
              {
                long long v71 = *v70++;
                *v68++ = v71;
              }
              while ((unint64_t)v68 < v69);
              goto LABEL_188;
            }
          }
LABEL_116:
          if (v28 <= v63)
          {
            long long v113 = (char *)v66 + v63 - v28;
            long long v114 = (long long *)v28;
            long long v115 = v66;
            do
            {
              long long v116 = *v114++;
              *v115++ = v116;
            }
            while (v115 < (_OWORD *)v113);
            unint64_t v112 = v63;
            if (v63 >= (unint64_t)v6) {
              goto LABEL_188;
            }
          }
          else
          {
            unint64_t v112 = v28;
            long long v113 = v66;
            if (v28 >= (unint64_t)v6)
            {
LABEL_188:
              *(void *)(a2 + 24) += v65;
              uint64_t v105 = *(void *)(a2 + 8);
              if (v65 >= 0x10000)
              {
                unint64_t v162 = (unint64_t)(v105 - *(void *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v162;
              }
              uint64_t v47 = (v64 - v40);
              goto LABEL_195;
            }
          }
          if (v28 > v63) {
            unint64_t v63 = v28;
          }
          unint64_t v117 = (unint64_t)&v6[-v63];
          if ((unint64_t)&v6[-v63] < 8)
          {
            long long v118 = (unsigned __int8 *)v112;
            goto LABEL_187;
          }
          if ((unint64_t)v66 - v28 < 0x20)
          {
            long long v118 = (unsigned __int8 *)v112;
            goto LABEL_187;
          }
          if (v117 >= 0x20)
          {
            unint64_t v135 = v117 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v145 = (long long *)(v112 + 16);
            uint64_t v146 = (_OWORD *)((char *)v66 + v63 - v28 + 16);
            unint64_t v147 = v117 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v148 = *v145;
              *(v146 - 1) = *(v145 - 1);
              *uint64_t v146 = v148;
              v145 += 2;
              v146 += 2;
              v147 -= 32;
            }
            while (v147);
            unint64_t v29 = v375;
            if (v117 == v135) {
              goto LABEL_188;
            }
            if ((v117 & 0x18) == 0)
            {
              long long v118 = (unsigned __int8 *)(v112 + v135);
              v113 += v135;
              do
              {
LABEL_187:
                char v161 = *v118++;
                *v113++ = v161;
              }
              while (v118 < v6);
              goto LABEL_188;
            }
          }
          else
          {
            unint64_t v135 = 0;
          }
          v113 += v117 & 0xFFFFFFFFFFFFFFF8;
          long long v118 = (unsigned __int8 *)(v112 + (v117 & 0xFFFFFFFFFFFFFFF8));
          unsigned int v149 = (uint64_t *)(v112 + v135);
          BOOL v150 = (void *)((char *)v66 + v135 + v63 - v28);
          unint64_t v151 = v135 - (v117 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v152 = *v149++;
            *v150++ = v152;
            v151 += 8;
          }
          while (v151);
          if (v117 == (v117 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_188;
          }
          goto LABEL_187;
        }
      }
      if (v35 <= v22 || (unint64_t v72 = v37 + v35, *(_DWORD *)(v37 + v35) != *(_DWORD *)v6))
      {
        v6 += ((uint64_t)&v6[-v28] >> 8) + 1;
        uint64_t v25 = v30;
        unint64_t v12 = v356;
        uint64_t v8 = v357;
        uint64_t v14 = v376;
        goto LABEL_14;
      }
      uint64_t v73 = *(void *)(v6 + 1);
      unint64_t v74 = 4 * ((0xCF1BBCDCB7A56463 * v73) >> v372);
      uint64_t v75 = *(unsigned int *)(v357 + v74);
      uint64_t v76 = v376;
      if (v75 < v23) {
        uint64_t v76 = v370;
      }
      *(_DWORD *)(v357 + v74) = v44;
      if (v75 > v22 && (unint64_t v77 = v76 + v75, *(void *)(v76 + v75) == v73))
      {
        uint64_t v350 = v76;
        int v351 = v43;
        uint64_t v78 = v24;
        BOOL v79 = v75 >= v23;
        if (v75 >= v23) {
          uint64_t v80 = (char *)v356;
        }
        else {
          uint64_t v80 = v364;
        }
        if (v79) {
          long long v81 = v366;
        }
        else {
          long long v81 = v354;
        }
        unint64_t v61 = ZSTD_count_2segments(v6 + 9, (char *)(v77 + 8), v356, v80, v366) + 8;
        uint64_t v47 = (v44 - v75);
        if (v77 > (unint64_t)v81 && (unint64_t)(v6 + 1) > v28)
        {
          unint64_t v132 = (unsigned __int8 *)(v350 + v75 - 1);
          unint64_t v12 = v356;
          uint64_t v8 = v357;
          unint64_t v29 = v375;
          uint64_t v14 = v376;
          LODWORD(v23) = v360;
          LODWORD(v22) = v362;
          int v27 = v359;
          uint64_t v30 = v78;
          int v64 = v351;
          while (*v6 == *v132)
          {
            ++v61;
            uint64_t v133 = v6 - 1;
            if (v132 > v81)
            {
              --v132;
              BOOL v62 = (unint64_t)v6-- > v28;
              if (v62) {
                continue;
              }
            }
            uint64_t v50 = v133 + 1;
            unint64_t v83 = v363;
            goto LABEL_129;
          }
          uint64_t v50 = v6 + 1;
          unint64_t v83 = v363;
        }
        else
        {
          uint64_t v50 = v6 + 1;
          unint64_t v12 = v356;
          uint64_t v8 = v357;
          unint64_t v29 = v375;
          uint64_t v14 = v376;
          LODWORD(v23) = v360;
          LODWORD(v22) = v362;
          unint64_t v83 = v363;
          int v27 = v359;
          uint64_t v30 = v78;
          int v64 = v351;
        }
      }
      else
      {
        uint64_t v30 = v24;
        BOOL v89 = v35 >= v23;
        unint64_t v12 = v356;
        if (v35 >= v23) {
          uint64_t v90 = (char *)v356;
        }
        else {
          uint64_t v90 = v364;
        }
        if (v89) {
          __int16 v91 = v366;
        }
        else {
          __int16 v91 = v354;
        }
        int v92 = v43;
        unint64_t v93 = ZSTD_count_2segments(v6 + 4, (char *)(v72 + 4), v356, v90, v366);
        int v64 = v92;
        unint64_t v61 = v93 + 4;
        uint64_t v47 = (v92 - v35);
        if (v72 > (unint64_t)v91 && (unint64_t)v6 > v28)
        {
          uint64_t v109 = v6 - 1;
          uint64_t v110 = (unsigned __int8 *)(v37 + v35 - 1);
          unint64_t v29 = v375;
          uint64_t v14 = v376;
          LODWORD(v23) = v360;
          LODWORD(v22) = v362;
          unint64_t v83 = v363;
          int v27 = v359;
          while (*v109 == *v110)
          {
            ++v61;
            uint64_t v111 = v109 - 1;
            if (v110 > v91)
            {
              --v110;
              BOOL v62 = (unint64_t)v109-- > v28;
              if (v62) {
                continue;
              }
            }
            uint64_t v50 = v111 + 1;
            goto LABEL_128;
          }
          uint64_t v50 = v109 + 1;
LABEL_128:
          uint64_t v8 = v357;
        }
        else
        {
          uint64_t v50 = v6;
          uint64_t v8 = v357;
          unint64_t v29 = v375;
          uint64_t v14 = v376;
          LODWORD(v23) = v360;
          LODWORD(v22) = v362;
          unint64_t v83 = v363;
          int v27 = v359;
        }
      }
LABEL_129:
      unint64_t v65 = (unint64_t)&v50[-v28];
      long long v119 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v50 <= v83)
      {
        _OWORD *v119 = *(_OWORD *)v28;
        uint64_t v122 = *(void *)(a2 + 24);
        if (v65 <= 0x10)
        {
          *(void *)(a2 + 24) = v122 + v65;
          uint64_t v105 = *(void *)(a2 + 8);
          goto LABEL_195;
        }
        uint64_t v123 = (_OWORD *)(v122 + 16);
        unint64_t v124 = v122 + v65;
        uint64_t v125 = (long long *)(v28 + 16);
        do
        {
          long long v126 = *v125++;
          *v123++ = v126;
        }
        while ((unint64_t)v123 < v124);
        goto LABEL_193;
      }
      if (v28 <= v83)
      {
        BOOL v121 = (char *)v119 + v83 - v28;
        uint64_t v127 = (long long *)v28;
        uint64_t v128 = *(_OWORD **)(a2 + 24);
        do
        {
          long long v129 = *v127++;
          *v128++ = v129;
        }
        while (v128 < (_OWORD *)v121);
        unint64_t v120 = v83;
        if (v83 >= (unint64_t)v50) {
          goto LABEL_193;
        }
      }
      else
      {
        unint64_t v120 = v28;
        BOOL v121 = *(unsigned char **)(a2 + 24);
        if (v28 >= (unint64_t)v50) {
          goto LABEL_193;
        }
      }
      if (v28 > v83) {
        unint64_t v83 = v28;
      }
      unint64_t v130 = (unint64_t)&v50[-v83];
      if ((unint64_t)&v50[-v83] < 8)
      {
        uint64_t v131 = (unsigned __int8 *)v120;
        goto LABEL_192;
      }
      if ((unint64_t)v119 - v28 < 0x20)
      {
        uint64_t v131 = (unsigned __int8 *)v120;
        goto LABEL_192;
      }
      if (v130 >= 0x20)
      {
        unint64_t v136 = v130 & 0xFFFFFFFFFFFFFFE0;
        int v153 = (long long *)(v120 + 16);
        uint64_t v154 = (_OWORD *)((char *)v119 + v83 - v28 + 16);
        unint64_t v155 = v130 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v156 = *v153;
          *(v154 - 1) = *(v153 - 1);
          *uint64_t v154 = v156;
          v153 += 2;
          v154 += 2;
          v155 -= 32;
        }
        while (v155);
        unint64_t v29 = v375;
        if (v130 == v136) {
          goto LABEL_193;
        }
        if ((v130 & 0x18) == 0)
        {
          uint64_t v131 = (unsigned __int8 *)(v120 + v136);
          v121 += v136;
          do
          {
LABEL_192:
            char v163 = *v131++;
            *v121++ = v163;
          }
          while (v131 < v50);
          goto LABEL_193;
        }
      }
      else
      {
        unint64_t v136 = 0;
      }
      v121 += v130 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v131 = (unsigned __int8 *)(v120 + (v130 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v157 = (uint64_t *)(v120 + v136);
      unsigned int v158 = (void *)((char *)v119 + v136 + v83 - v28);
      unint64_t v159 = v136 - (v130 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v160 = *v157++;
        *v158++ = v160;
        v159 += 8;
      }
      while (v159);
      if (v130 != (v130 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_192;
      }
LABEL_193:
      *(void *)(a2 + 24) += v65;
      uint64_t v105 = *(void *)(a2 + 8);
      if (v65 >= 0x10000)
      {
        unint64_t v164 = (unint64_t)(v105 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v164;
      }
LABEL_195:
      __int16 v107 = v61 - 3;
      *(_WORD *)(v105 + 4) = v65;
      *(_DWORD *)uint64_t v105 = v47 + 3;
      if (!((v61 - 3) >> 16)) {
        goto LABEL_197;
      }
LABEL_196:
      unint64_t v165 = (unint64_t)(v105 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v165;
      goto LABEL_197;
    }
    uint64_t v47 = v24;
    unint64_t v12 = v356;
    if (v45 >= v23) {
      uint64_t v48 = (char *)v356;
    }
    else {
      uint64_t v48 = v364;
    }
    unint64_t v49 = ZSTD_count_2segments(v6 + 5, (char *)(v46 + 4), v356, v48, v366);
    uint64_t v50 = v6 + 1;
    unint64_t v51 = (unint64_t)&v6[-v28 + 1];
    BOOL v52 = *(_OWORD **)(a2 + 24);
    unint64_t v53 = v363;
    if ((unint64_t)(v6 + 1) <= v363)
    {
      *BOOL v52 = *(_OWORD *)v28;
      uint64_t v84 = *(void *)(a2 + 24);
      if (v51 <= 0x10)
      {
        *(void *)(a2 + 24) = v84 + v51;
        uint64_t v105 = *(void *)(a2 + 8);
        uint64_t v8 = v357;
        LODWORD(v23) = v360;
        LODWORD(v22) = v362;
        int v27 = v359;
        int v64 = v6 - v14;
        goto LABEL_108;
      }
      long long v85 = (_OWORD *)(v84 + 16);
      unint64_t v86 = v84 + v51;
      unint64_t v87 = (long long *)(v28 + 16);
      uint64_t v8 = v357;
      LODWORD(v23) = v360;
      LODWORD(v22) = v362;
      int v27 = v359;
      int v64 = v6 - v14;
      do
      {
        long long v88 = *v87++;
        *v85++ = v88;
      }
      while ((unint64_t)v85 < v86);
    }
    else
    {
      if (v28 <= v363)
      {
        BOOL v55 = (char *)v52 + v363 - v28;
        uint64_t v98 = (long long *)v28;
        uint64_t v99 = *(_OWORD **)(a2 + 24);
        do
        {
          long long v100 = *v98++;
          *v99++ = v100;
        }
        while (v99 < (_OWORD *)v55);
        unint64_t v54 = v363;
      }
      else
      {
        unint64_t v54 = v28;
        BOOL v55 = *(unsigned char **)(a2 + 24);
      }
      uint64_t v8 = v357;
      LODWORD(v23) = v360;
      LODWORD(v22) = v362;
      int v27 = v359;
      int v64 = v6 - v14;
      if (v54 < (unint64_t)v50)
      {
        if (v28 > v363) {
          unint64_t v53 = v28;
        }
        unint64_t v101 = (unint64_t)&v6[-v53 + 1];
        if (v101 < 8 || (unint64_t)v52 - v28 < 0x20)
        {
          uint64_t v102 = (char *)v54;
          goto LABEL_103;
        }
        if (v101 >= 0x20)
        {
          unint64_t v134 = v101 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v137 = (long long *)(v54 + 16);
          unsigned int v138 = (_OWORD *)((char *)v52 + v53 - v28 + 16);
          unint64_t v139 = v101 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v140 = *v137;
            *(v138 - 1) = *(v137 - 1);
            *unsigned int v138 = v140;
            v137 += 2;
            v138 += 2;
            v139 -= 32;
          }
          while (v139);
          if (v101 == v134) {
            goto LABEL_105;
          }
          if ((v101 & 0x18) == 0)
          {
            uint64_t v102 = (char *)(v54 + v134);
            v55 += v134;
LABEL_103:
            uint64_t v103 = (char *)(v101 + v54);
            do
            {
              char v104 = *v102++;
              *v55++ = v104;
            }
            while (v102 != v103);
            goto LABEL_105;
          }
        }
        else
        {
          unint64_t v134 = 0;
        }
        v55 += v101 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v102 = (char *)(v54 + (v101 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v141 = (uint64_t *)(v54 + v134);
        int v142 = (void *)((char *)v52 + v134 + v53 - v28);
        unint64_t v143 = v134 - (v101 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v144 = *v141++;
          *v142++ = v144;
          v143 += 8;
        }
        while (v143);
        if (v101 != (v101 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_103;
        }
      }
    }
LABEL_105:
    *(void *)(a2 + 24) += v51;
    uint64_t v105 = *(void *)(a2 + 8);
    if (v51 >= 0x10000)
    {
      unint64_t v106 = (unint64_t)(v105 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v106;
    }
LABEL_108:
    unint64_t v61 = v49 + 4;
    __int16 v107 = v49 + 1;
    *(_WORD *)(v105 + 4) = v51;
    *(_DWORD *)uint64_t v105 = 1;
    unint64_t v108 = (v49 + 1) >> 16;
    unint64_t v29 = v375;
    if (v108) {
      goto LABEL_196;
    }
LABEL_197:
    *(_WORD *)(v105 + 6) = v107;
    uint64_t v166 = v105 + 8;
    *(void *)(a2 + 8) = v105 + 8;
    unint64_t v28 = (unint64_t)&v50[v61];
    if ((unint64_t)&v50[v61] <= v29)
    {
      uint64_t v167 = (v64 + 2);
      uint64_t v168 = *(void *)(v14 + v167);
      *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * v168) >> v372)) = v167;
      *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v28 - 2)) >> v372)) = v28 - 2 - v14;
      switch(v27)
      {
        case 0:
          unsigned int v169 = -1157627904;
          goto LABEL_204;
        case 1:
          unsigned int v169 = -1080360960;
          goto LABEL_204;
        case 2:
          unsigned int v169 = -1079680256;
LABEL_204:
          unint64_t v173 = v169 | 0xCF1BBCDC00000000;
          char v174 = v358;
          uint64_t v170 = v374;
          *(_DWORD *)(v374 + 4 * ((v168 * v173) >> v358)) = v167;
          int v171 = v28 - 1;
          uint64_t v175 = *(void *)(v28 - 1);
          goto LABEL_206;
        case 3:
          char v174 = v358;
          uint64_t v170 = v374;
          *(_DWORD *)(v374 + 4 * ((0xCF1BBCDCB7A56463 * v168) >> v358)) = v167;
          int v171 = v28 - 1;
          uint64_t v175 = *(void *)(v28 - 1);
          unint64_t v173 = 0xCF1BBCDCB7A56463;
LABEL_206:
          unint64_t v172 = (v175 * v173) >> v174;
          break;
        default:
          uint64_t v170 = v374;
          *(_DWORD *)(v374 + 4 * ((-1640531535 * *(_DWORD *)(v14 + v167)) >> v355)) = v167;
          int v171 = v28 - 1;
          unint64_t v172 = (-1640531535 * *(_DWORD *)(v28 - 1)) >> v355;
          break;
      }
      *(_DWORD *)(v170 + 4 * v172) = v171 - v14;
      while (1)
      {
        uint64_t v25 = v47;
        uint64_t v47 = v30;
        int v179 = v28 - v14;
        uint64_t v180 = (v28 - v14 - v30);
        uint64_t v181 = v370;
        if (v180 >= v23) {
          uint64_t v181 = v14;
        }
        if (v180 <= v22) {
          break;
        }
        if ((v368 - v180) < 3) {
          break;
        }
        uint64_t v182 = v181 + v180;
        if (*(_DWORD *)v182 != *(_DWORD *)v28) {
          break;
        }
        if (v180 >= v23) {
          uint64_t v183 = (char *)v12;
        }
        else {
          uint64_t v183 = v364;
        }
        unint64_t v184 = ZSTD_count_2segments((void *)(v28 + 4), (char *)(v182 + 4), v12, v183, v366);
        if (v28 <= v363)
        {
          *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v28;
          uint64_t v166 = *(void *)(a2 + 8);
        }
        *(_WORD *)(v166 + 4) = 0;
        *(_DWORD *)uint64_t v166 = 1;
        int v27 = v359;
        if (v184 + 1 >= 0x10000)
        {
          unint64_t v185 = (unint64_t)(v166 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v185;
        }
        *(_WORD *)(v166 + 6) = v184 + 1;
        v166 += 8;
        *(void *)(a2 + 8) = v166;
        LODWORD(v23) = v360;
        LODWORD(v22) = v362;
        switch(v359)
        {
          case 0:
            uint64_t v176 = *(void *)v28;
            unsigned int v177 = -1157627904;
            goto LABEL_209;
          case 1:
            uint64_t v176 = *(void *)v28;
            unsigned int v177 = -1080360960;
            goto LABEL_209;
          case 2:
            uint64_t v176 = *(void *)v28;
            unsigned int v177 = -1079680256;
            goto LABEL_209;
          case 3:
            uint64_t v176 = *(void *)v28;
            unsigned int v177 = -1213897629;
LABEL_209:
            unint64_t v178 = (v176 * (v177 | 0xCF1BBCDC00000000)) >> v358;
            break;
          default:
            unint64_t v178 = (-1640531535 * *(_DWORD *)v28) >> v355;
            uint64_t v176 = *(void *)v28;
            break;
        }
        *(_DWORD *)(v374 + 4 * v178) = v179;
        *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * v176) >> v372)) = v179;
        v28 += v184 + 4;
        uint64_t v30 = v25;
        uint64_t v24 = v47;
        uint64_t v6 = (unsigned __int8 *)v28;
        unint64_t v29 = v375;
        if (v28 > v375) {
          goto LABEL_14;
        }
      }
      uint64_t v24 = v25;
      uint64_t v25 = v30;
      uint64_t v6 = (unsigned __int8 *)v28;
    }
    else
    {
      uint64_t v24 = v47;
      uint64_t v25 = v30;
      uint64_t v6 = &v50[v61];
    }
LABEL_14:
    uint64_t v11 = v374;
  }
  while ((unint64_t)v6 < v29);
  uint64_t v6 = (unsigned __int8 *)v28;
  a3 = v352;
LABEL_496:
  *a3 = v24;
LABEL_504:
  a3[1] = v25;
  return v12 - (void)v6;
}

uint64_t ZSTD_fillHashTable(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(unsigned int *)(result + 36);
  unint64_t v5 = (void *)(v3 + v4);
  unint64_t v6 = a2 - 6;
  unint64_t v7 = v3 + v4 + 3;
  if (v7 < a2 - 6)
  {
    uint64_t v8 = *(void *)(result + 48);
    int v9 = *(_DWORD *)(result + 208);
    int v10 = *(_DWORD *)(result + 200);
    char v11 = 64 - v10;
    char v12 = 32 - v10;
    if (a3)
    {
      double result = 0xCF1BBCDCBF9B0000;
      int v13 = v9 - 5;
      do
      {
        switch(v13)
        {
          case 0:
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v3 + v4)) >> v11)) = v4;
            unint64_t v14 = (0xCF1BBCDCBB000000 * *(void *)(v3 + v4 + 1)) >> v11;
            if (!*(_DWORD *)(v8 + 4 * v14)) {
              *(_DWORD *)(v8 + 4 * v14) = v4 + 1;
            }
            int v15 = (_DWORD *)(v8 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v3 + v4 + 2)) >> v11));
            if (!*v15) {
              goto LABEL_25;
            }
            break;
          case 1:
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v3 + v4)) >> v11)) = v4;
            unint64_t v17 = (0xCF1BBCDCBF9B0000 * *(void *)(v3 + v4 + 1)) >> v11;
            if (!*(_DWORD *)(v8 + 4 * v17)) {
              *(_DWORD *)(v8 + 4 * v17) = v4 + 1;
            }
            int v15 = (_DWORD *)(v8 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v3 + v4 + 2)) >> v11));
            if (!*v15) {
              goto LABEL_25;
            }
            break;
          case 2:
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v3 + v4)) >> v11)) = v4;
            unint64_t v18 = (0xCF1BBCDCBFA56300 * *(void *)(v3 + v4 + 1)) >> v11;
            if (!*(_DWORD *)(v8 + 4 * v18)) {
              *(_DWORD *)(v8 + 4 * v18) = v4 + 1;
            }
            int v15 = (_DWORD *)(v8 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v3 + v4 + 2)) >> v11));
            if (!*v15) {
              goto LABEL_25;
            }
            break;
          case 3:
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v3 + v4)) >> v11)) = v4;
            unint64_t v19 = (0xCF1BBCDCB7A56463 * *(void *)(v3 + v4 + 1)) >> v11;
            if (!*(_DWORD *)(v8 + 4 * v19)) {
              *(_DWORD *)(v8 + 4 * v19) = v4 + 1;
            }
            int v15 = (_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v3 + v4 + 2)) >> v11));
            if (!*v15) {
              goto LABEL_25;
            }
            break;
          default:
            *(_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)(v3 + v4)) >> v12)) = v4;
            uint64_t v16 = (-1640531535 * *(_DWORD *)(v3 + v4 + 1)) >> v12;
            if (!*(_DWORD *)(v8 + 4 * v16)) {
              *(_DWORD *)(v8 + 4 * v16) = v4 + 1;
            }
            int v15 = (_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)(v3 + v4 + 2)) >> v12));
            if (!*v15) {
LABEL_25:
            }
              _DWORD *v15 = v4 + 2;
            break;
        }
        v4 += 3;
      }
      while (v3 + v4 + 3 < v6);
    }
    else
    {
      switch(v9)
      {
        case 5:
          unint64_t v20 = v3 + v4 + 6;
          if (v20 <= v6) {
            unint64_t v20 = a2 - 6;
          }
          uint64_t v21 = v20 - v3 - 6;
          if (v21 == v4) {
            uint64_t v22 = *(unsigned int *)(result + 36);
          }
          else {
            uint64_t v22 = v4 + 1;
          }
          unint64_t v23 = (v21 - v22) / 3uLL;
          if (v21 != v4) {
            ++v23;
          }
          if (!v23) {
            goto LABEL_82;
          }
          unint64_t v24 = v23 + 1;
          uint64_t v25 = 3 * (v24 & 0x7FFFFFFFFFFFFFFELL);
          v7 += v25;
          unint64_t v5 = (void *)((char *)v5 + v25);
          double result = v24 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v26 = (0xCF1BBCDCBB000000 * *(void *)(v3 + v4 + 3)) >> v11;
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v3 + v4)) >> v11)) = v4;
            *(_DWORD *)(v8 + 4 * v26) = v4 + 3;
            v4 += 6;
            result -= 2;
          }
          while (result);
          if (v24 != (v24 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_82:
            do
            {
              *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBB000000 * *v5) >> v11)) = v5 - v3;
              unint64_t v5 = (void *)v7;
              v7 += 3;
            }
            while (v7 < v6);
          }
          break;
        case 6:
          unint64_t v27 = v3 + v4 + 6;
          if (v27 <= v6) {
            unint64_t v27 = a2 - 6;
          }
          uint64_t v28 = v27 - v3 - 6;
          if (v28 == v4) {
            uint64_t v29 = *(unsigned int *)(result + 36);
          }
          else {
            uint64_t v29 = v4 + 1;
          }
          unint64_t v30 = (v28 - v29) / 3uLL;
          if (v28 != v4) {
            ++v30;
          }
          if (!v30) {
            goto LABEL_83;
          }
          unint64_t v31 = v30 + 1;
          uint64_t v32 = 3 * (v31 & 0x7FFFFFFFFFFFFFFELL);
          v7 += v32;
          unint64_t v5 = (void *)((char *)v5 + v32);
          double result = v31 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v33 = (0xCF1BBCDCBF9B0000 * *(void *)(v3 + v4 + 3)) >> v11;
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v3 + v4)) >> v11)) = v4;
            *(_DWORD *)(v8 + 4 * v33) = v4 + 3;
            v4 += 6;
            result -= 2;
          }
          while (result);
          if (v31 != (v31 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_83:
            do
            {
              *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBF9B0000 * *v5) >> v11)) = v5 - v3;
              unint64_t v5 = (void *)v7;
              v7 += 3;
            }
            while (v7 < v6);
          }
          break;
        case 7:
          unint64_t v34 = v3 + v4 + 6;
          if (v34 <= v6) {
            unint64_t v34 = a2 - 6;
          }
          uint64_t v35 = v34 - v3 - 6;
          if (v35 == v4) {
            uint64_t v36 = *(unsigned int *)(result + 36);
          }
          else {
            uint64_t v36 = v4 + 1;
          }
          unint64_t v37 = (v35 - v36) / 3uLL;
          if (v35 != v4) {
            ++v37;
          }
          if (!v37) {
            goto LABEL_84;
          }
          unint64_t v38 = v37 + 1;
          uint64_t v39 = 3 * (v38 & 0x7FFFFFFFFFFFFFFELL);
          v7 += v39;
          unint64_t v5 = (void *)((char *)v5 + v39);
          double result = v38 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v40 = (0xCF1BBCDCBFA56300 * *(void *)(v3 + v4 + 3)) >> v11;
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v3 + v4)) >> v11)) = v4;
            *(_DWORD *)(v8 + 4 * v40) = v4 + 3;
            v4 += 6;
            result -= 2;
          }
          while (result);
          if (v38 != (v38 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_84:
            do
            {
              *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBFA56300 * *v5) >> v11)) = v5 - v3;
              unint64_t v5 = (void *)v7;
              v7 += 3;
            }
            while (v7 < v6);
          }
          break;
        case 8:
          unint64_t v41 = v3 + v4 + 6;
          if (v41 <= v6) {
            unint64_t v41 = a2 - 6;
          }
          uint64_t v42 = v41 - v3 - 6;
          if (v42 == v4) {
            uint64_t v43 = *(unsigned int *)(result + 36);
          }
          else {
            uint64_t v43 = v4 + 1;
          }
          unint64_t v44 = (v42 - v43) / 3uLL;
          if (v42 != v4) {
            ++v44;
          }
          if (!v44) {
            goto LABEL_85;
          }
          unint64_t v45 = v44 + 1;
          uint64_t v46 = 3 * (v45 & 0x7FFFFFFFFFFFFFFELL);
          v7 += v46;
          unint64_t v5 = (void *)((char *)v5 + v46);
          double result = v45 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v47 = (0xCF1BBCDCB7A56463 * *(void *)(v3 + v4 + 3)) >> v11;
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v3 + v4)) >> v11)) = v4;
            *(_DWORD *)(v8 + 4 * v47) = v4 + 3;
            v4 += 6;
            result -= 2;
          }
          while (result);
          if (v45 != (v45 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_85:
            do
            {
              *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * *v5) >> v11)) = v5 - v3;
              unint64_t v5 = (void *)v7;
              v7 += 3;
            }
            while (v7 < v6);
          }
          break;
        default:
          do
          {
            *(_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)(v3 + v4)) >> v12)) = v4;
            v4 += 3;
          }
          while (v3 + v4 + 3 < v6);
          break;
      }
    }
  }
  return result;
}

unint64_t ZSTD_compressBlock_fast_extDict_generic(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t v6 = (unsigned __int8 *)a4;
  uint64_t v8 = *(void *)(a1 + 48);
  int v9 = *(_DWORD *)(a1 + 200);
  LODWORD(v10) = *(_DWORD *)(a1 + 212);
  if (v10) {
    uint64_t v10 = v10;
  }
  else {
    uint64_t v10 = 1;
  }
  uint64_t v232 = v10;
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = a4 + a5;
  int v13 = a4 + a5 - v11;
  LODWORD(v15) = *(_DWORD *)(a1 + 28);
  int v14 = *(_DWORD *)(a1 + 32);
  unsigned int v16 = 1 << *(_DWORD *)(a1 + 192);
  unsigned int v17 = *(_DWORD *)(a1 + 24);
  unsigned int v18 = v13 - v16;
  if (v13 - (int)v15 > v16 && v14 == 0) {
    uint64_t v15 = v18;
  }
  else {
    uint64_t v15 = v15;
  }
  if (v17 <= v15) {
    uint64_t v20 = v15;
  }
  else {
    uint64_t v20 = v17;
  }
  unint64_t v21 = v12 - 8;
  uint64_t v23 = *a3;
  uint64_t v22 = a3[1];
  unsigned int v246 = v15;
  unint64_t v234 = a4 + a5;
  uint64_t v243 = *(void *)(a1 + 48);
  unint64_t v248 = v12 - 8;
  if (v15 >= v17)
  {
    unint64_t v229 = a3;
    BOOL v125 = v14 == 0;
    if (v125 && v13 - v17 > v16) {
      uint64_t v126 = v18;
    }
    else {
      uint64_t v126 = v17;
    }
    unint64_t v127 = v11 + v126;
    if (v11 + v126 == a4) {
      _X22 = (unsigned __int8 *)(a4 + 1);
    }
    else {
      _X22 = (unsigned __int8 *)a4;
    }
    long long v129 = _X22 + 1;
    BOOL v130 = _X22 - v11 - v17 > v16;
    int v131 = _X22 - v11 - v16;
    if (!v125 || !v130) {
      int v131 = *(_DWORD *)(a1 + 24);
    }
    unsigned int v132 = _X22 - v11 - v131;
    if (v22 <= v132) {
      uint64_t v133 = v22;
    }
    else {
      uint64_t v133 = 0;
    }
    if (v22 <= v132) {
      unsigned int v134 = 0;
    }
    else {
      unsigned int v134 = a3[1];
    }
    if (v23 <= v132) {
      uint64_t v135 = v23;
    }
    else {
      uint64_t v135 = 0;
    }
    if (v23 <= v132) {
      unsigned int v136 = v134;
    }
    else {
      unsigned int v136 = *a3;
    }
    if ((unint64_t)v129 >= v21) {
      goto LABEL_319;
    }
    unsigned int v241 = v136;
    uint64_t v245 = v11 + 2;
    int v247 = v126;
    char v137 = 64 - v9;
    char v138 = 32 - v9;
    unint64_t v139 = v12 - 7;
    unint64_t v140 = v12 - 3;
    unint64_t v141 = v12 - 1;
    unint64_t v142 = v12 - 32;
    while (1)
    {
      unsigned int v143 = a6 - 5;
      switch(a6)
      {
        case 5:
          uint64_t v144 = *(void *)_X22;
          unint64_t v145 = (0xCF1BBCDCBB000000 * *(void *)_X22) >> v137;
          uint64_t v146 = *(void *)v129;
          unint64_t v147 = (0xCF1BBCDCBB000000 * *(void *)v129) >> v137;
          goto LABEL_190;
        case 6:
          uint64_t v144 = *(void *)_X22;
          unsigned int v148 = -1080360960;
          goto LABEL_189;
        case 7:
          uint64_t v144 = *(void *)_X22;
          unsigned int v148 = -1079680256;
          goto LABEL_189;
        case 8:
          uint64_t v144 = *(void *)_X22;
          unsigned int v148 = -1213897629;
LABEL_189:
          unint64_t v149 = v148 | 0xCF1BBCDC00000000;
          unint64_t v145 = (v144 * v149) >> v137;
          uint64_t v146 = *(void *)v129;
          unint64_t v147 = (*(void *)v129 * v149) >> v137;
          break;
        default:
          LODWORD(v144) = *(_DWORD *)_X22;
          unint64_t v145 = (-1640531535 * *(_DWORD *)_X22) >> v138;
          LODWORD(v146) = *(_DWORD *)v129;
          unint64_t v147 = (-1640531535 * *(_DWORD *)v129) >> v138;
          break;
      }
      unsigned int v150 = _X22 - v11;
      uint64_t v151 = 4 * v145;
      uint64_t v152 = *(unsigned int *)(v8 + v151);
      uint64_t v153 = 4 * v147;
      uint64_t v154 = *(unsigned int *)(v8 + 4 * v147);
      __asm { PRFM            #0, [X22,#0x100] }
      *(_DWORD *)(v8 + v151) = _X22 - v11;
      *(_DWORD *)(v8 + v153) = v129 - v11;
      if (!v135) {
        goto LABEL_328;
      }
LABEL_190:
      unint64_t v159 = &_X22[-v135 + 2];
      if (*(_DWORD *)v159 == *(_DWORD *)(_X22 + 2))
      {
        int v160 = 0;
        BOOL v161 = _X22[1] == *(v159 - 1);
        uint64_t v162 = _X22[1] == *(v159 - 1) ? 5 : 4;
        _X22 = &_X22[-v161 + 2];
        char v163 = &v159[-v161];
        uint64_t v126 = v135;
        uint64_t v135 = v133;
      }
      else
      {
LABEL_328:
        if (v152 <= v126
          || (char v163 = (unsigned __int8 *)(v11 + v152), *(_DWORD *)(v11 + v152) != v144))
        {
          if (v154 <= v126
            || (char v163 = (unsigned __int8 *)(v11 + v154), *(_DWORD *)(v11 + v154) != v146))
          {
            unint64_t v182 = (v232 + 1) + ((unint64_t)(_X22 - v6) >> 7);
            _X22 += v182;
            v129 += v182;
            if ((unint64_t)v129 >= v21) {
              goto LABEL_318;
            }
            continue;
          }
          _X22 = v129;
        }
        uint64_t v126 = (_X22 - v163);
        int v160 = v126 + 2;
        if (_X22 <= v6 || (unint64_t)v163 <= v127)
        {
          uint64_t v162 = 4;
        }
        else
        {
          uint64_t v175 = v163 - 1;
          uint64_t v176 = _X22 - 1;
          uint64_t v162 = 4;
          while (*v176 == *v175)
          {
            ++v162;
            unsigned int v177 = v175 - 1;
            unint64_t v178 = v176 - 1;
            if (v176 > v6)
            {
              --v176;
              BOOL v48 = (unint64_t)v175-- > v127;
              if (v48) {
                continue;
              }
            }
            char v163 = v177 + 1;
            _X22 = v178 + 1;
            goto LABEL_196;
          }
          char v163 = v175 + 1;
          _X22 = v176 + 1;
        }
      }
LABEL_196:
      unint64_t v164 = (char *)&_X22[v162];
      unint64_t v165 = &v163[v162];
      if (v139 <= (unint64_t)&_X22[v162]) {
        break;
      }
      unint64_t v166 = *(void *)v164 ^ *(void *)v165;
      if (v166)
      {
        unint64_t v167 = __clz(__rbit64(v166)) >> 3;
        unint64_t v168 = _X22 - v6;
        unsigned int v169 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X22 <= v142) {
          goto LABEL_199;
        }
        goto LABEL_227;
      }
      uint64_t v190 = (uint64_t)&_X22[v162 + 8];
      do
      {
        unsigned int v191 = (void *)(v190 + v166);
        if (v190 + v166 >= v139)
        {
          int v179 = &_X22[v162 + 8 + v166];
          unint64_t v165 = &v163[v162 + 8 + v166];
          unint64_t v12 = v234;
          if ((unint64_t)v179 >= v140) {
            goto LABEL_218;
          }
          goto LABEL_216;
        }
        uint64_t v192 = *(void *)&v163[v162 + 8 + v166];
        v166 += 8;
        unint64_t v193 = *v191 ^ v192;
      }
      while (!v193);
      unint64_t v167 = v166 + (__clz(__rbit64(v193)) >> 3);
      unint64_t v168 = _X22 - v6;
      unsigned int v169 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)_X22 > v142) {
        goto LABEL_227;
      }
LABEL_199:
      *unsigned int v169 = *(_OWORD *)v6;
      uint64_t v170 = *(void *)(a2 + 24);
      if (v168 > 0x10)
      {
        int v171 = (_OWORD *)(v170 + 16);
        unint64_t v172 = v170 + v168;
        unint64_t v173 = (long long *)(v6 + 16);
        do
        {
          long long v174 = *v173++;
          *v171++ = v174;
        }
        while ((unint64_t)v171 < v172);
        goto LABEL_264;
      }
      *(void *)(a2 + 24) = v170 + v168;
      uint64_t v183 = *(void *)(a2 + 8);
LABEL_267:
      unint64_t v205 = v167 + v162;
      unint64_t v206 = v167 + v162 - 3;
      *(_WORD *)(v183 + 4) = v168;
      *(_DWORD *)uint64_t v183 = v160 + 1;
      if (v206 >= 0x10000)
      {
        unint64_t v207 = (unint64_t)(v183 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v207;
      }
      *(_WORD *)(v183 + 6) = v206;
      uint64_t v208 = v183 + 8;
      *(void *)(a2 + 8) = v183 + 8;
      unint64_t v6 = &_X22[v205];
      unint64_t v12 = v234;
      if ((unint64_t)&_X22[v205] > v21)
      {
        uint64_t v133 = v135;
      }
      else
      {
        unsigned int v209 = v150 + 2;
        switch(a6)
        {
          case 5:
            uint64_t v210 = *(void *)(v245 + v150);
            unsigned int v211 = -1157627904;
            goto LABEL_277;
          case 6:
            uint64_t v210 = *(void *)(v245 + v150);
            unsigned int v211 = -1080360960;
            goto LABEL_277;
          case 7:
            uint64_t v210 = *(void *)(v245 + v150);
            unsigned int v211 = -1079680256;
            goto LABEL_277;
          case 8:
            uint64_t v210 = *(void *)(v245 + v150);
            unsigned int v211 = -1213897629;
LABEL_277:
            unint64_t v212 = v211 | 0xCF1BBCDC00000000;
            *(_DWORD *)(v8 + 4 * ((v210 * v212) >> v137)) = v209;
            *(_DWORD *)(v8 + 4 * ((*(void *)(v6 - 2) * v212) >> v137)) = v6 - 2 - v11;
            if (v135) {
              goto LABEL_278;
            }
            goto LABEL_273;
          default:
            *(_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)(v245 + v150)) >> v138)) = v209;
            *(_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)(v6 - 2)) >> v138)) = v6 - 2 - v11;
            if (!v135)
            {
LABEL_273:
              uint64_t v133 = 0;
              goto LABEL_182;
            }
LABEL_278:
            uint64_t v213 = v126;
            break;
        }
        while (1)
        {
          uint64_t v133 = v213;
          uint64_t v213 = v135;
          if (*(_DWORD *)v6 != *(_DWORD *)&v6[-v135]) {
            break;
          }
          unsigned int v214 = (char *)(v6 + 4);
          unsigned int v215 = &v6[-v135 + 4];
          if (v139 <= (unint64_t)(v6 + 4))
          {
            uint64_t v218 = v6 + 4;
            if ((unint64_t)v214 >= v140) {
              goto LABEL_289;
            }
LABEL_287:
            if (*(_DWORD *)v215 == *(_DWORD *)v218)
            {
              v218 += 4;
              v215 += 4;
            }
LABEL_289:
            if ((unint64_t)v218 >= v141)
            {
              if ((unint64_t)v218 < v234) {
                goto LABEL_295;
              }
            }
            else
            {
              if (*(unsigned __int16 *)v215 == *(unsigned __int16 *)v218)
              {
                v218 += 2;
                v215 += 2;
              }
              if ((unint64_t)v218 >= v234) {
                goto LABEL_297;
              }
LABEL_295:
              if (*v215 == *v218) {
                ++v218;
              }
            }
LABEL_297:
            unint64_t v217 = v218 - (unsigned __int8 *)v214;
            goto LABEL_298;
          }
          unint64_t v216 = *(void *)v214 ^ *(void *)v215;
          if (v216)
          {
            unint64_t v217 = __clz(__rbit64(v216)) >> 3;
            if (v143 > 3) {
              goto LABEL_284;
            }
            goto LABEL_298;
          }
          uint64_t v222 = v6 + 12;
          do
          {
            unsigned int v223 = &v222[v216];
            if ((unint64_t)&v222[v216] >= v139)
            {
              uint64_t v218 = &v6[v216 + 12];
              unsigned int v215 = &v218[-v135];
              if ((unint64_t)v218 >= v140) {
                goto LABEL_289;
              }
              goto LABEL_287;
            }
            uint64_t v224 = *(void *)&v6[v216 + 12 - v135];
            v216 += 8;
            unint64_t v225 = *(void *)v223 ^ v224;
          }
          while (!v225);
          unint64_t v217 = v216 + (__clz(__rbit64(v225)) >> 3);
          if (v143 > 3)
          {
LABEL_284:
            *(_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)v6) >> v138)) = v6 - v11;
            if ((unint64_t)v6 > v142) {
              goto LABEL_305;
            }
LABEL_304:
            *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v6;
            uint64_t v208 = *(void *)(a2 + 8);
            goto LABEL_305;
          }
LABEL_298:
          switch(a6)
          {
            case 5:
              uint64_t v219 = *(void *)v6;
              unsigned int v220 = -1157627904;
              break;
            case 6:
              uint64_t v219 = *(void *)v6;
              unsigned int v220 = -1080360960;
              break;
            case 7:
              uint64_t v219 = *(void *)v6;
              unsigned int v220 = -1079680256;
              break;
            case 8:
              uint64_t v219 = *(void *)v6;
              unsigned int v220 = -1213897629;
              break;
            default:
              goto LABEL_284;
          }
          *(_DWORD *)(v8 + 4 * ((v219 * (v220 | 0xCF1BBCDC00000000)) >> v137)) = v6 - v11;
          if ((unint64_t)v6 <= v142) {
            goto LABEL_304;
          }
LABEL_305:
          *(_WORD *)(v208 + 4) = 0;
          *(_DWORD *)uint64_t v208 = 1;
          if (v217 + 1 >= 0x10000)
          {
            unint64_t v221 = (unint64_t)(v208 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v221;
          }
          v6 += v217 + 4;
          *(_WORD *)(v208 + 6) = v217 + 1;
          v208 += 8;
          *(void *)(a2 + 8) = v208;
          uint64_t v135 = v133;
          uint64_t v126 = v213;
          if ((unint64_t)v6 > v21) {
            goto LABEL_182;
          }
        }
        uint64_t v126 = v133;
        uint64_t v133 = v135;
      }
LABEL_182:
      long long v129 = v6 + 1;
      uint64_t v135 = v126;
      _X22 = v6;
      LODWORD(v126) = v247;
      if ((unint64_t)(v6 + 1) >= v21)
      {
LABEL_318:
        a3 = v229;
        unsigned int v136 = v241;
LABEL_319:
        if (v135) {
          unsigned int v226 = v135;
        }
        else {
          unsigned int v226 = v136;
        }
        *a3 = v226;
        if (v133) {
          LODWORD(v22) = v133;
        }
        else {
          LODWORD(v22) = v136;
        }
        goto LABEL_325;
      }
    }
    int v179 = &_X22[v162];
    if ((unint64_t)v164 >= v140) {
      goto LABEL_218;
    }
LABEL_216:
    if (*(_DWORD *)v165 == *(_DWORD *)v179)
    {
      v179 += 4;
      v165 += 4;
    }
LABEL_218:
    if ((unint64_t)v179 >= v141)
    {
      if ((unint64_t)v179 >= v12) {
        goto LABEL_226;
      }
    }
    else
    {
      if (*(unsigned __int16 *)v165 == *(unsigned __int16 *)v179)
      {
        v179 += 2;
        v165 += 2;
      }
      if ((unint64_t)v179 >= v12)
      {
LABEL_226:
        unint64_t v167 = v179 - (unsigned __int8 *)v164;
        unint64_t v168 = _X22 - v6;
        unsigned int v169 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)_X22 <= v142) {
          goto LABEL_199;
        }
LABEL_227:
        if ((unint64_t)v6 <= v142)
        {
          uint64_t v181 = (char *)v169 + v142 - (void)v6;
          unint64_t v184 = v6;
          unint64_t v185 = v169;
          do
          {
            long long v186 = *(_OWORD *)v184;
            v184 += 16;
            *v185++ = v186;
          }
          while (v185 < (_OWORD *)v181);
          unint64_t v180 = v142;
          if (v142 >= (unint64_t)_X22) {
            goto LABEL_264;
          }
        }
        else
        {
          unint64_t v180 = (unint64_t)v6;
          uint64_t v181 = v169;
          if (v6 >= _X22) {
            goto LABEL_264;
          }
        }
        if ((unint64_t)v6 <= v142) {
          unint64_t v187 = v142;
        }
        else {
          unint64_t v187 = (unint64_t)v6;
        }
        unint64_t v188 = (unint64_t)&_X22[-v187];
        if ((unint64_t)&_X22[-v187] < 8)
        {
          unint64_t v189 = (unsigned __int8 *)v180;
          goto LABEL_263;
        }
        if ((unint64_t)((char *)v169 - (char *)v6) < 0x20)
        {
          unint64_t v189 = (unsigned __int8 *)v180;
          goto LABEL_263;
        }
        if (v188 >= 0x20)
        {
          unint64_t v194 = v188 & 0xFFFFFFFFFFFFFFE0;
          BOOL v195 = (long long *)(v180 + 16);
          unsigned int v196 = (_OWORD *)((char *)v169 + v187 - (void)v6 + 16);
          unint64_t v197 = v188 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v198 = *v195;
            *(v196 - 1) = *(v195 - 1);
            _OWORD *v196 = v198;
            v195 += 2;
            v196 += 2;
            v197 -= 32;
          }
          while (v197);
          if (v188 == v194) {
            goto LABEL_264;
          }
          if ((v188 & 0x18) == 0)
          {
            unint64_t v189 = (unsigned __int8 *)(v180 + v194);
            v181 += v194;
            do
            {
LABEL_263:
              char v203 = *v189++;
              *v181++ = v203;
            }
            while (v189 < _X22);
LABEL_264:
            *(void *)(a2 + 24) += v168;
            uint64_t v183 = *(void *)(a2 + 8);
            if (v168 >= 0x10000)
            {
              unint64_t v204 = (unint64_t)(v183 - *(void *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v204;
            }
            uint64_t v8 = v243;
            unint64_t v21 = v248;
            goto LABEL_267;
          }
        }
        else
        {
          unint64_t v194 = 0;
        }
        v181 += v188 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v189 = (unsigned __int8 *)(v180 + (v188 & 0xFFFFFFFFFFFFFFF8));
        char v199 = (uint64_t *)(v180 + v194);
        char v200 = (void *)((char *)v169 + v194 + v187 - (void)v6);
        unint64_t v201 = v194 - (v188 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v202 = *v199++;
          *v200++ = v202;
          v201 += 8;
        }
        while (v201);
        if (v188 == (v188 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_264;
        }
        goto LABEL_263;
      }
    }
    if (*v165 == *v179) {
      ++v179;
    }
    goto LABEL_226;
  }
  if (v21 <= a4) {
    goto LABEL_316;
  }
  unint64_t v228 = a3;
  uint64_t v24 = *(void *)(a1 + 16);
  unint64_t v230 = v24 + v15;
  uint64_t v238 = (void *)(v11 + v20);
  uint64_t v244 = v24;
  unint64_t v237 = (char *)(v24 + v20);
  uint64_t v231 = v11 + 2;
  char v239 = 64 - v9;
  char v233 = 32 - v9;
  int v242 = v20 - 1;
  unint64_t v240 = v12 - 32;
  int v25 = a6 - 5;
  unint64_t v26 = a4;
  int v236 = a6 - 5;
  do
  {
    switch(v25)
    {
      case 0:
        uint64_t v27 = *(void *)v6;
        unsigned int v28 = -1157627904;
        goto LABEL_24;
      case 1:
        uint64_t v27 = *(void *)v6;
        unsigned int v28 = -1080360960;
        goto LABEL_24;
      case 2:
        uint64_t v27 = *(void *)v6;
        unsigned int v28 = -1079680256;
        goto LABEL_24;
      case 3:
        uint64_t v27 = *(void *)v6;
        unsigned int v28 = -1213897629;
LABEL_24:
        unint64_t v29 = (v27 * (v28 | 0xCF1BBCDC00000000)) >> v239;
        break;
      default:
        unint64_t v29 = (-1640531535 * *(_DWORD *)v6) >> v233;
        break;
    }
    uint64_t v30 = 4 * v29;
    uint64_t v31 = *(unsigned int *)(v8 + 4 * v29);
    uint64_t v32 = v244;
    if (v31 >= v20) {
      uint64_t v33 = v11;
    }
    else {
      uint64_t v33 = v244;
    }
    uint64_t v34 = (v6 - v11 - v23 + 1);
    if (v34 >= v20) {
      uint64_t v32 = v11;
    }
    *(_DWORD *)(v8 + v30) = v6 - v11;
    if (v34 > v246 && (v242 - v34) >= 3)
    {
      uint64_t v35 = v32 + v34;
      uint64_t v36 = v6 + 1;
      if (*(_DWORD *)v35 == *(_DWORD *)(v6 + 1))
      {
        if (v34 >= v20) {
          unint64_t v37 = (char *)v234;
        }
        else {
          unint64_t v37 = v237;
        }
        unint64_t v38 = ZSTD_count_2segments(v6 + 5, (char *)(v35 + 4), v234, v37, v238);
        unint64_t v39 = (unint64_t)&v36[-v26];
        unint64_t v40 = *(_OWORD **)(a2 + 24);
        if ((unint64_t)v36 <= v240)
        {
          *unint64_t v40 = *(_OWORD *)v26;
          uint64_t v54 = *(void *)(a2 + 24);
          if (v39 <= 0x10)
          {
            *(void *)(a2 + 24) = v54 + v39;
            uint64_t v70 = *(void *)(a2 + 8);
            uint64_t v8 = v243;
            int v25 = v236;
            unsigned int v43 = v6 - v11;
            __int16 v72 = v38 + 1;
            *(_WORD *)(v70 + 4) = v39;
            *(_DWORD *)uint64_t v70 = 1;
            if (v38 + 1 < 0x10000)
            {
LABEL_82:
              *(_WORD *)(v70 + 6) = v72;
              uint64_t v74 = v70 + 8;
              *(void *)(a2 + 8) = v70 + 8;
              unint64_t v26 = (unint64_t)&v36[v38 + 4];
              uint64_t v75 = v23;
              uint64_t v76 = v22;
              unint64_t v12 = v234;
              if (v26 > v248) {
                goto LABEL_83;
              }
              goto LABEL_130;
            }
LABEL_81:
            unint64_t v73 = (unint64_t)(v70 - *(void *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v73;
            goto LABEL_82;
          }
          BOOL v55 = (_OWORD *)(v54 + 16);
          unint64_t v56 = v54 + v39;
          int v57 = (long long *)(v26 + 16);
          uint64_t v8 = v243;
          int v25 = v236;
          unsigned int v43 = v6 - v11;
          do
          {
            long long v58 = *v57++;
            *v55++ = v58;
          }
          while ((unint64_t)v55 < v56);
        }
        else
        {
          if (v26 <= v240)
          {
            uint64_t v42 = (char *)v40 + v240 - v26;
            BOOL v62 = (long long *)v26;
            unint64_t v63 = *(_OWORD **)(a2 + 24);
            uint64_t v8 = v243;
            int v25 = v236;
            unsigned int v43 = v6 - v11;
            do
            {
              long long v64 = *v62++;
              *v63++ = v64;
            }
            while (v63 < (_OWORD *)v42);
            unint64_t v41 = v240;
            if (v240 >= (unint64_t)v36) {
              goto LABEL_77;
            }
          }
          else
          {
            unint64_t v41 = v26;
            uint64_t v42 = *(unsigned char **)(a2 + 24);
            uint64_t v8 = v243;
            int v25 = v236;
            unsigned int v43 = v6 - v11;
            if (v26 >= (unint64_t)v36) {
              goto LABEL_77;
            }
          }
          if (v26 <= v240) {
            unint64_t v65 = v240;
          }
          else {
            unint64_t v65 = v26;
          }
          unint64_t v66 = (unint64_t)&v6[-v65 + 1];
          if (v66 < 8 || (unint64_t)v40 - v26 < 0x20)
          {
            uint64_t v67 = (char *)v41;
            goto LABEL_75;
          }
          if (v66 >= 0x20)
          {
            unint64_t v89 = v66 & 0xFFFFFFFFFFFFFFE0;
            __int16 v91 = (long long *)(v41 + 16);
            int v92 = (_OWORD *)((char *)v40 + v65 - v26 + 16);
            unint64_t v93 = v66 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v94 = *v91;
              *(v92 - 1) = *(v91 - 1);
              *int v92 = v94;
              v91 += 2;
              v92 += 2;
              v93 -= 32;
            }
            while (v93);
            if (v66 == v89) {
              goto LABEL_77;
            }
            if ((v66 & 0x18) == 0)
            {
              uint64_t v67 = (char *)(v41 + v89);
              v42 += v89;
LABEL_75:
              int v68 = (char *)(v66 + v41);
              do
              {
                char v69 = *v67++;
                *v42++ = v69;
              }
              while (v67 != v68);
              goto LABEL_77;
            }
          }
          else
          {
            unint64_t v89 = 0;
          }
          v42 += v66 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v67 = (char *)(v41 + (v66 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v95 = (uint64_t *)(v41 + v89);
          unsigned int v96 = (void *)((char *)v40 + v89 + v65 - v26);
          unint64_t v97 = v89 - (v66 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v98 = *v95++;
            *v96++ = v98;
            v97 += 8;
          }
          while (v97);
          if (v66 != (v66 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_75;
          }
        }
LABEL_77:
        *(void *)(a2 + 24) += v39;
        uint64_t v70 = *(void *)(a2 + 8);
        if (v39 < 0x10000)
        {
          __int16 v72 = v38 + 1;
          *(_WORD *)(v70 + 4) = v39;
          *(_DWORD *)uint64_t v70 = 1;
          if (v38 + 1 < 0x10000) {
            goto LABEL_82;
          }
        }
        else
        {
          unint64_t v71 = (unint64_t)(v70 - *(void *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v71;
          __int16 v72 = v38 + 1;
          *(_WORD *)(v70 + 4) = v39;
          *(_DWORD *)uint64_t v70 = 1;
          if (v38 + 1 < 0x10000) {
            goto LABEL_82;
          }
        }
        goto LABEL_81;
      }
    }
    if (v31 < v246 || (unint64_t v44 = v33 + v31, *(_DWORD *)(v33 + v31) != *(_DWORD *)v6))
    {
      v6 += v232 + ((uint64_t)&v6[-v26] >> 8);
      unint64_t v12 = v234;
      continue;
    }
    if (v31 >= v20) {
      unint64_t v45 = (char *)v234;
    }
    else {
      unint64_t v45 = v237;
    }
    if (v31 >= v20) {
      unint64_t v46 = v11 + v20;
    }
    else {
      unint64_t v46 = v230;
    }
    unint64_t v47 = ZSTD_count_2segments(v6 + 4, (char *)(v44 + 4), v234, v45, v238) + 4;
    BOOL v48 = v44 > v46 && (unint64_t)v6 > v26;
    if (v48)
    {
      long long v59 = v6 - 1;
      uint64_t v60 = (unsigned __int8 *)(v33 + v31 - 1);
      unint64_t v12 = v234;
      int v25 = v236;
      uint64_t v8 = v243;
      unsigned int v43 = v6 - v11;
      while (*v59 == *v60)
      {
        ++v47;
        unint64_t v61 = v59 - 1;
        if ((unint64_t)v60 > v46)
        {
          --v60;
          BOOL v48 = (unint64_t)v59-- > v26;
          if (v48) {
            continue;
          }
        }
        unint64_t v6 = v61 + 1;
        unint64_t v49 = (unint64_t)&v61[-v26 + 1];
        uint64_t v50 = *(_OWORD **)(a2 + 24);
        unint64_t v51 = v240;
        if ((unint64_t)v6 > v240) {
          goto LABEL_53;
        }
        goto LABEL_87;
      }
      unint64_t v6 = v59 + 1;
      unint64_t v49 = (unint64_t)&v59[-v26 + 1];
      uint64_t v50 = *(_OWORD **)(a2 + 24);
      unint64_t v51 = v240;
      if ((unint64_t)v6 > v240) {
        goto LABEL_53;
      }
LABEL_87:
      *uint64_t v50 = *(_OWORD *)v26;
      uint64_t v77 = *(void *)(a2 + 24);
      if (v49 <= 0x10)
      {
        *(void *)(a2 + 24) = v77 + v49;
        uint64_t v88 = *(void *)(a2 + 8);
        goto LABEL_127;
      }
      uint64_t v78 = (_OWORD *)(v77 + 16);
      unint64_t v79 = v77 + v49;
      uint64_t v80 = (long long *)(v26 + 16);
      do
      {
        long long v81 = *v80++;
        *v78++ = v81;
      }
      while ((unint64_t)v78 < v79);
      goto LABEL_125;
    }
    unint64_t v12 = v234;
    int v25 = v236;
    uint64_t v8 = v243;
    unsigned int v43 = v6 - v11;
    unint64_t v49 = (unint64_t)&v6[-v26];
    uint64_t v50 = *(_OWORD **)(a2 + 24);
    unint64_t v51 = v240;
    if ((unint64_t)v6 <= v240) {
      goto LABEL_87;
    }
LABEL_53:
    if (v26 <= v51)
    {
      unint64_t v53 = (char *)v50 + v51 - v26;
      int v82 = (long long *)v26;
      unint64_t v83 = v50;
      do
      {
        long long v84 = *v82++;
        *v83++ = v84;
      }
      while (v83 < (_OWORD *)v53);
      unint64_t v52 = v240;
      if (v240 >= (unint64_t)v6) {
        goto LABEL_125;
      }
    }
    else
    {
      unint64_t v52 = v26;
      unint64_t v53 = v50;
      if (v26 >= (unint64_t)v6) {
        goto LABEL_125;
      }
    }
    if (v26 <= v240) {
      unint64_t v85 = v240;
    }
    else {
      unint64_t v85 = v26;
    }
    unint64_t v86 = (unint64_t)&v6[-v85];
    if ((unint64_t)&v6[-v85] < 8)
    {
      unint64_t v87 = (unsigned __int8 *)v52;
      goto LABEL_124;
    }
    if ((unint64_t)v50 - v26 < 0x20)
    {
      unint64_t v87 = (unsigned __int8 *)v52;
      goto LABEL_124;
    }
    if (v86 >= 0x20)
    {
      unint64_t v90 = v86 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v99 = (long long *)(v52 + 16);
      long long v100 = (_OWORD *)((char *)v50 + v85 - v26 + 16);
      unint64_t v101 = v86 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v102 = *v99;
        *(v100 - 1) = *(v99 - 1);
        _OWORD *v100 = v102;
        v99 += 2;
        v100 += 2;
        v101 -= 32;
      }
      while (v101);
      if (v86 == v90) {
        goto LABEL_125;
      }
      if ((v86 & 0x18) == 0)
      {
        unint64_t v87 = (unsigned __int8 *)(v52 + v90);
        v53 += v90;
        do
        {
LABEL_124:
          char v107 = *v87++;
          *v53++ = v107;
        }
        while (v87 < v6);
        goto LABEL_125;
      }
    }
    else
    {
      unint64_t v90 = 0;
    }
    v53 += v86 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v87 = (unsigned __int8 *)(v52 + (v86 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v103 = (uint64_t *)(v52 + v90);
    char v104 = (void *)((char *)v50 + v90 + v85 - v26);
    unint64_t v105 = v90 - (v86 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v106 = *v103++;
      *v104++ = v106;
      v105 += 8;
    }
    while (v105);
    if (v86 != (v86 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_124;
    }
LABEL_125:
    *(void *)(a2 + 24) += v49;
    uint64_t v88 = *(void *)(a2 + 8);
    if (v49 >= 0x10000)
    {
      unint64_t v108 = (unint64_t)(v88 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v108;
    }
LABEL_127:
    uint64_t v75 = v43 - v31;
    *(_WORD *)(v88 + 4) = v49;
    *(_DWORD *)uint64_t v88 = v75 + 3;
    if (v47 - 3 >= 0x10000)
    {
      unint64_t v109 = (unint64_t)(v88 - *(void *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v109;
    }
    *(_WORD *)(v88 + 6) = v47 - 3;
    uint64_t v74 = v88 + 8;
    *(void *)(a2 + 8) = v88 + 8;
    unint64_t v26 = (unint64_t)&v6[v47];
    uint64_t v76 = v23;
    if (v26 > v248)
    {
LABEL_83:
      uint64_t v23 = v75;
      uint64_t v22 = v76;
      unint64_t v6 = (unsigned __int8 *)v26;
      continue;
    }
LABEL_130:
    unsigned int v110 = v43 + 2;
    switch(v25)
    {
      case 0:
        uint64_t v111 = *(void *)(v231 + v43);
        unsigned int v112 = -1157627904;
        goto LABEL_136;
      case 1:
        uint64_t v111 = *(void *)(v231 + v43);
        unsigned int v112 = -1080360960;
        goto LABEL_136;
      case 2:
        uint64_t v111 = *(void *)(v231 + v43);
        unsigned int v112 = -1079680256;
        goto LABEL_136;
      case 3:
        uint64_t v111 = *(void *)(v231 + v43);
        unsigned int v112 = -1213897629;
LABEL_136:
        unint64_t v115 = v112 | 0xCF1BBCDC00000000;
        *(_DWORD *)(v8 + 4 * ((v111 * v115) >> v239)) = v110;
        int v113 = v26 - 2;
        unint64_t v114 = (*(void *)(v26 - 2) * v115) >> v239;
        break;
      default:
        *(_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)(v231 + v43)) >> v233)) = v110;
        int v113 = v26 - 2;
        unint64_t v114 = (-1640531535 * *(_DWORD *)(v26 - 2)) >> v233;
        break;
    }
    *(_DWORD *)(v8 + 4 * v114) = v113 - v11;
    while (1)
    {
      uint64_t v22 = v75;
      uint64_t v75 = v76;
      uint64_t v119 = (v26 - v11 - v76);
      uint64_t v120 = v244;
      if (v119 >= v20) {
        uint64_t v120 = v11;
      }
      if (v119 <= v246) {
        break;
      }
      if ((v242 - v119) < 3) {
        break;
      }
      uint64_t v121 = v120 + v119;
      if (*(_DWORD *)v121 != *(_DWORD *)v26) {
        break;
      }
      if (v119 >= v20) {
        uint64_t v122 = (char *)v12;
      }
      else {
        uint64_t v122 = v237;
      }
      unint64_t v123 = ZSTD_count_2segments((void *)(v26 + 4), (char *)(v121 + 4), v12, v122, v238);
      if (v26 <= v240)
      {
        *(_OWORD *)*(void *)(a2 + 24) = *(_OWORD *)v26;
        uint64_t v74 = *(void *)(a2 + 8);
      }
      *(_WORD *)(v74 + 4) = 0;
      *(_DWORD *)uint64_t v74 = 1;
      int v25 = v236;
      if (v123 + 1 >= 0x10000)
      {
        unint64_t v124 = (unint64_t)(v74 - *(void *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v124;
      }
      *(_WORD *)(v74 + 6) = v123 + 1;
      v74 += 8;
      *(void *)(a2 + 8) = v74;
      uint64_t v8 = v243;
      switch(v236)
      {
        case 0:
          uint64_t v116 = *(void *)v26;
          unsigned int v117 = -1157627904;
          goto LABEL_139;
        case 1:
          uint64_t v116 = *(void *)v26;
          unsigned int v117 = -1080360960;
          goto LABEL_139;
        case 2:
          uint64_t v116 = *(void *)v26;
          unsigned int v117 = -1079680256;
          goto LABEL_139;
        case 3:
          uint64_t v116 = *(void *)v26;
          unsigned int v117 = -1213897629;
LABEL_139:
          unint64_t v118 = (v116 * (v117 | 0xCF1BBCDC00000000)) >> v239;
          break;
        default:
          unint64_t v118 = (-1640531535 * *(_DWORD *)v26) >> v233;
          break;
      }
      *(_DWORD *)(v243 + 4 * v118) = v26 - v11;
      v26 += v123 + 4;
      uint64_t v76 = v22;
      uint64_t v23 = v75;
      unint64_t v6 = (unsigned __int8 *)v26;
      if (v26 > v248) {
        goto LABEL_17;
      }
    }
    uint64_t v23 = v22;
    uint64_t v22 = v75;
    unint64_t v6 = (unsigned __int8 *)v26;
LABEL_17:
    ;
  }
  while ((unint64_t)v6 < v248);
  unint64_t v6 = (unsigned __int8 *)v26;
  a3 = v228;
LABEL_316:
  *a3 = v23;
LABEL_325:
  a3[1] = v22;
  return v12 - (void)v6;
}

uint64_t ZSTD_insertAndFindFirstIndex(uint64_t a1, uint64_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 208);
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 200);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(unsigned int *)(a1 + 36);
  if (v6 < (int)a2 - (int)v5)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    int v8 = ~(-1 << *(_DWORD *)(a1 + 196));
    char v9 = 64 - v4;
    switch(v2)
    {
      case 5:
        do
        {
          unint64_t v10 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v5 + v6)) >> v9);
          *(_DWORD *)(v7 + 4 * (v6 & v8)) = *(_DWORD *)(v3 + v10);
          *(_DWORD *)(v3 + v10) = v6++;
        }
        while (v6 < (a2 - v5));
        break;
      case 6:
        do
        {
          unint64_t v12 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v5 + v6)) >> v9);
          *(_DWORD *)(v7 + 4 * (v6 & v8)) = *(_DWORD *)(v3 + v12);
          *(_DWORD *)(v3 + v12) = v6++;
        }
        while (v6 < (a2 - v5));
        break;
      case 7:
        do
        {
          unint64_t v13 = 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v5 + v6)) >> v9);
          *(_DWORD *)(v7 + 4 * (v6 & v8)) = *(_DWORD *)(v3 + v13);
          *(_DWORD *)(v3 + v13) = v6++;
        }
        while (v6 < (a2 - v5));
        break;
      case 8:
        do
        {
          unint64_t v14 = 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v5 + v6)) >> v9);
          *(_DWORD *)(v7 + 4 * (v6 & v8)) = *(_DWORD *)(v3 + v14);
          *(_DWORD *)(v3 + v14) = v6++;
        }
        while (v6 < (a2 - v5));
        break;
      default:
        do
        {
          uint64_t v11 = 4 * ((-1640531535 * *(_DWORD *)(v5 + v6)) >> (32 - v4));
          *(_DWORD *)(v7 + 4 * (v6 & v8)) = *(_DWORD *)(v3 + v11);
          *(_DWORD *)(v3 + v11) = v6++;
        }
        while (v6 < (a2 - v5));
        break;
    }
  }
  *(_DWORD *)(a1 + 36) = a2 - v5;
  switch(v2)
  {
    case 5:
      uint64_t v15 = *a2;
      unsigned int v16 = -1157627904;
      goto LABEL_17;
    case 6:
      uint64_t v15 = *a2;
      unsigned int v16 = -1080360960;
      goto LABEL_17;
    case 7:
      uint64_t v15 = *a2;
      unsigned int v16 = -1079680256;
      goto LABEL_17;
    case 8:
      uint64_t v15 = *a2;
      unsigned int v16 = -1213897629;
LABEL_17:
      uint64_t result = *(unsigned int *)(v3 + 4 * ((v15 * (v16 | 0xCF1BBCDC00000000)) >> -(char)v4));
      break;
    default:
      uint64_t result = *(unsigned int *)(v3 + 4 * ((-1640531535 * *(_DWORD *)a2) >> -(char)v4));
      break;
  }
  return result;
}

uint64_t ZSTD_dedicatedDictSearch_lazy_loadDictionary(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = a2 - v2;
  uint64_t v4 = *(void *)(result + 48);
  uint64_t v5 = *(void *)(result + 64);
  int v6 = *(_DWORD *)(result + 200);
  unsigned int v7 = 1 << *(_DWORD *)(result + 196);
  unint64_t v8 = *(unsigned int *)(result + 36);
  BOOL v9 = v3 >= v7;
  unsigned int v10 = v3 - v7;
  if (v10 != 0 && v9) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = *(_DWORD *)(result + 36);
  }
  if (((1 << *(_DWORD *)(result + 204)) - 3) >= 0xFF) {
    int v12 = 255;
  }
  else {
    int v12 = (1 << *(_DWORD *)(result + 204)) - 3;
  }
  char v13 = v6 - 2;
  uint64_t v14 = v4 + 4 * (1 << (v6 - 2));
  unsigned int v15 = 3 << (v6 - 2);
  BOOL v9 = v3 >= v15;
  unsigned int v16 = v3 - v15;
  if (v16 != 0 && v9) {
    unint64_t v17 = v16;
  }
  else {
    unint64_t v17 = v8;
  }
  if (v8 < v3)
  {
    char v18 = 66 - v6;
    do
    {
      switch(*(_DWORD *)(result + 208))
      {
        case 5:
          uint64_t v19 = ((0xCF1BBCDCBB000000 * *(void *)(v2 + v8)) >> v18);
          if (v8 >= v17) {
            goto LABEL_12;
          }
          break;
        case 6:
          uint64_t v19 = ((0xCF1BBCDCBF9B0000 * *(void *)(v2 + v8)) >> v18);
          if (v8 >= v17) {
            goto LABEL_12;
          }
          break;
        case 7:
          uint64_t v19 = ((0xCF1BBCDCBFA56300 * *(void *)(v2 + v8)) >> v18);
          if (v8 >= v17) {
            goto LABEL_12;
          }
          break;
        case 8:
          uint64_t v19 = ((0xCF1BBCDCB7A56463 * *(void *)(v2 + v8)) >> v18);
          if (v8 >= v17) {
            goto LABEL_12;
          }
          break;
        default:
          uint64_t v19 = (-1640531535 * *(_DWORD *)(v2 + v8)) >> (34 - v6);
          if (v8 >= v17) {
LABEL_12:
          }
            *(_DWORD *)(v14 + 4 * (v8 - v17)) = *(_DWORD *)(v4 + 4 * v19);
          break;
      }
      *(_DWORD *)(v4 + 4 * v19) = v8++;
    }
    while (v8 < v3);
  }
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v22 = (1 << v13);
  do
  {
    unsigned int v24 = *(_DWORD *)(v4 + 4 * v20);
    unsigned int v25 = v24 - v17;
    if (v24 < v17) {
      goto LABEL_26;
    }
    unsigned int v26 = v24 < v11;
    unsigned int v27 = *(_DWORD *)(v14 + 4 * v25);
    if (v27 < v17) {
      goto LABEL_26;
    }
    if (v27 < v11) {
      ++v26;
    }
    unsigned int v28 = *(_DWORD *)(v14 + 4 * (v27 - v17));
    if (v28 < v17) {
      goto LABEL_26;
    }
    if (v28 < v11) {
      ++v26;
    }
    unsigned int v29 = *(_DWORD *)(v14 + 4 * (v28 - v17));
    if (!v12)
    {
LABEL_26:
      int v23 = 0;
      goto LABEL_27;
    }
    int v30 = 0;
    while (v29 >= v11)
    {
LABEL_42:
      *(_DWORD *)(v5 + 4 * (v21 + v30++)) = v29;
      BOOL v9 = v29 >= v17;
      unsigned int v31 = v29 - v17;
      if (!v9)
      {
        int v23 = v30 + (v21 << 8);
        v21 += v30;
        goto LABEL_27;
      }
      unsigned int v29 = *(_DWORD *)(v14 + 4 * v31);
      if (v12 == v30)
      {
        v21 += v30;
        int v30 = v12;
        goto LABEL_47;
      }
    }
    if (v29 && v26 <= 3)
    {
      ++v26;
      goto LABEL_42;
    }
    v21 += v30;
    if (!v30) {
      goto LABEL_26;
    }
LABEL_47:
    int v23 = v30 + ((v21 - v30) << 8);
LABEL_27:
    *(_DWORD *)(v4 + 4 * v20++) = v23;
  }
  while (v20 != v22);
  unsigned int v32 = (4 << v13) - 4;
  uint64_t v33 = (int *)(v4 + 4 * (v22 - 1));
  unsigned int v34 = 4 * v22 - 1;
  do
  {
    uint64_t v35 = v4 + 4 * v32;
    int v36 = *v33--;
    *(_DWORD *)(v35 + 8) = 0;
    *(void *)uint64_t v35 = 0;
    *(_DWORD *)(v4 + 4 * v34) = v36;
    v32 -= 4;
    v34 -= 4;
    LODWORD(v22) = v22 - 1;
  }
  while (v22);
  unint64_t v37 = *(unsigned int *)(result + 36);
  if (v37 < v3)
  {
    char v38 = 66 - v6;
    char v39 = 34 - v6;
    do
    {
      switch(*(_DWORD *)(result + 208))
      {
        case 5:
          unint64_t v40 = 0xCF1BBCDCBB000000 * *(void *)(v2 + v37);
          goto LABEL_53;
        case 6:
          unint64_t v40 = 0xCF1BBCDCBF9B0000 * *(void *)(v2 + v37);
          goto LABEL_53;
        case 7:
          unint64_t v40 = 0xCF1BBCDCBFA56300 * *(void *)(v2 + v37);
          goto LABEL_53;
        case 8:
          unint64_t v40 = 0xCF1BBCDCB7A56463 * *(void *)(v2 + v37);
LABEL_53:
          unint64_t v41 = v40 >> v38;
          break;
        default:
          LODWORD(v41) = (-1640531535 * *(_DWORD *)(v2 + v37)) >> v39;
          break;
      }
      uint64_t v42 = (void *)(v4 + 4 * (4 * v41));
      *(void *)((char *)v42 + 4) = *v42;
      *(_DWORD *)uint64_t v42 = v37++;
    }
    while (v37 < v3);
  }
  *(_DWORD *)(result + 36) = v3;
  return result;
}

_DWORD *ZSTD_ldm_adjustParameters(_DWORD *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  result[5] = *a2;
  if (result[3])
  {
    unsigned int v3 = result[1];
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    result[3] = 64;
    unsigned int v3 = result[1];
    if (v3)
    {
LABEL_3:
      unsigned int v4 = result[2];
      if (result[4]) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  unsigned int v3 = v2 - 7;
  if (v2 - 7 <= 6) {
    unsigned int v3 = 6;
  }
  result[1] = v3;
  unsigned int v4 = result[2];
  if (!result[4])
  {
LABEL_14:
    BOOL v6 = v2 >= v3;
    unsigned int v7 = v2 - v3;
    if (!v6) {
      unsigned int v7 = 0;
    }
    result[4] = v7;
  }
LABEL_4:
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if (v5 >= v3) {
    unsigned int v5 = v3;
  }
  result[2] = v5;
  return result;
}

uint64_t ZSTD_ldm_getTableSize(_DWORD *a1)
{
  unsigned int v2 = a1[1];
  unsigned int v1 = a1[2];
  if (v1 >= v2) {
    LOBYTE(v1) = a1[1];
  }
  uint64_t v3 = (1 << (v2 - v1)) + (8 << v2);
  if (*a1) {
    return v3;
  }
  else {
    return 0;
  }
}

unint64_t ZSTD_ldm_getMaxNbSeq(_DWORD *a1, unint64_t a2)
{
  if (*a1) {
    return a2 / a1[3];
  }
  else {
    return 0;
  }
}

unint64_t ZSTD_ldm_fillHashTable(unint64_t result, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  int v4 = a4[1];
  int v5 = a4[2];
  uint64_t v28 = *(void *)(result + 8);
  unint64_t v7 = a4[3];
  int v6 = a4[4];
  if (v7 >= 0x40) {
    unsigned int v8 = 64;
  }
  else {
    unsigned int v8 = a4[3];
  }
  unsigned int v9 = v6 - 1;
  uint64_t v10 = ~(-1 << v6);
  char v11 = v8 - v6;
  if (v9 >= v8) {
    char v11 = 0;
  }
  v30[0] = 0xFFFFFFFFLL;
  v30[1] = v10 << v11;
  if (a2 < a3)
  {
    unint64_t v12 = a2;
    unint64_t v13 = result;
    unint64_t v25 = a3;
    uint64_t v26 = result + 56;
    unint64_t v15 = a2 + v7;
    uint64_t v16 = ~(-1 << (v4 - v5));
    do
    {
      unsigned int v29 = 0;
      uint64_t result = ZSTD_ldm_gear_feed(v30, v12, a3 - v12, v26, &v29);
      unint64_t v27 = result;
      uint64_t v17 = v29;
      if (v29)
      {
        char v18 = (uint64_t *)v26;
        do
        {
          uint64_t v19 = *v18++;
          uint64_t v20 = v12 + v19;
          if (v12 + v19 >= v15)
          {
            int v21 = v20 - v7;
            uint64_t result = ZSTD_XXH64((unsigned int *)(v20 - v7), v7);
            char v22 = a4[2];
            uint64_t v23 = *(void *)(v13 + 48);
            unsigned __int8 v24 = *(unsigned char *)(v23 + (result & v16));
            *(void *)(*(void *)(v13 + 32) + 8 * ((result & v16) << v22) + 8 * v24) = result & 0xFFFFFFFF00000000 | (v21 - v28);
            *(unsigned char *)(v23 + (result & v16)) = (v24 + 1) & ~(-1 << v22);
          }
          --v17;
        }
        while (v17);
      }
      v12 += v27;
      a3 = v25;
    }
    while (v12 < v25);
  }
  return result;
}

unint64_t ZSTD_ldm_gear_feed(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (a3 < 4)
  {
    unint64_t v12 = 0;
LABEL_18:
    if (v12 < a3)
    {
      uint64_t v5 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(a2 + v12)] + 2 * v5;
      unint64_t v17 = v12 + 1;
      if ((v5 & v6) == 0) {
        goto LABEL_22;
      }
      while (v17 < a3)
      {
        while (1)
        {
          ++v12;
          uint64_t v5 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(a2 + v12)] + 2 * v5;
          unint64_t v17 = v12 + 1;
          if ((v5 & v6) != 0) {
            break;
          }
LABEL_22:
          uint64_t v18 = *a5;
          *(void *)(a4 + 8 * v18) = v17;
          LODWORD(v18) = v18 + 1;
          *a5 = v18;
          if (v18 == 64 || v17 >= a3) {
            goto LABEL_27;
          }
        }
      }
LABEL_27:
      ++v12;
    }
    *a1 = v5;
    return v12;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 + 1;
    while (1)
    {
      uint64_t v9 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(a2 + v7)] + 2 * v5;
      if ((v9 & v6) == 0)
      {
        uint64_t v13 = *a5;
        *(void *)(a4 + 8 * v13) = v7 + 1;
        *a5 = v13 + 1;
        if (v13 == 63)
        {
          *a1 = v9;
          return v7 + 1;
        }
      }
      uint64_t v10 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v8 + v7)] + 2 * v9;
      if ((v10 & v6) == 0)
      {
        uint64_t v14 = *a5;
        *(void *)(a4 + 8 * v14) = v7 + 2;
        *a5 = v14 + 1;
        if (v14 == 63)
        {
          *a1 = v10;
          return v7 + 2;
        }
      }
      uint64_t v11 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v8 + v7 + 1)] + 2 * v10;
      if ((v11 & v6) == 0)
      {
        uint64_t v15 = *a5;
        *(void *)(a4 + 8 * v15) = v7 + 3;
        *a5 = v15 + 1;
        if (v15 == 63)
        {
          *a1 = v11;
          return v7 + 3;
        }
      }
      uint64_t v5 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v8 + v7 + 2)] + 2 * v11;
      unint64_t v12 = v7 + 4;
      if ((v5 & v6) == 0)
      {
        uint64_t v16 = *a5;
        *(void *)(a4 + 8 * v16) = v12;
        LODWORD(v16) = v16 + 1;
        *a5 = v16;
        if (v16 == 64) {
          break;
        }
      }
      v7 += 4;
      if (v12 + 3 >= a3) {
        goto LABEL_18;
      }
    }
    *a1 = v5;
    return v7 + 4;
  }
}

unint64_t ZSTD_XXH64(unsigned int *a1, unint64_t a2)
{
  unint64_t v2 = (unint64_t)a1 + a2;
  unint64_t v3 = 0x27D4EB2F165667C5;
  int v4 = a1;
  if ((a1 & 7) != 0)
  {
    if (a2 >= 0x20)
    {
      unint64_t v18 = 0;
      unint64_t v19 = 0x61C8864E7A143579;
      unint64_t v20 = 0x60EA27EEADC0B5D6;
      unint64_t v21 = 0xC2B2AE3D27D4EB4FLL;
      int v4 = a1;
      do
      {
        uint64_t v22 = __ROR8__(v20 - 0x3D4D51C2D82B14B1 * *(void *)v4, 33);
        unint64_t v20 = 0x9E3779B185EBCA87 * v22;
        uint64_t v23 = __ROR8__(v21 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 1), 33);
        unint64_t v21 = 0x9E3779B185EBCA87 * v23;
        uint64_t v24 = __ROR8__(v18 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 2), 33);
        unint64_t v18 = 0x9E3779B185EBCA87 * v24;
        uint64_t v25 = __ROR8__(v19 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 3), 33);
        unint64_t v19 = 0x9E3779B185EBCA87 * v25;
        v4 += 8;
      }
      while ((unint64_t)v4 <= v2 - 32);
      unint64_t v5 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((0x85EBCA77C2B2AE63
               - 0x61C8864E7A143579
               * ((__ROR8__(v21, 57) + __ROR8__(v20, 63) + __ROR8__(v18, 52) + __ROR8__(v19, 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v22, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v23, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v24, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v25, 33)))
         + a2;
      if ((unint64_t)(v4 + 2) > v2) {
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v5 = a2 + 0x27D4EB2F165667C5;
      if ((unint64_t)(a1 + 2) > v2)
      {
LABEL_22:
        uint64_t v26 = v4;
LABEL_25:
        if ((unint64_t)(v26 + 1) <= v2) {
          unint64_t v5 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * *v26++) ^ v5, 41);
        }
        if ((unint64_t)v26 < v2)
        {
          unint64_t v27 = (char *)a1 + a2 - (char *)v26;
          do
          {
            unsigned int v28 = *(unsigned __int8 *)v26;
            uint64_t v26 = (unsigned int *)((char *)v26 + 1);
            unint64_t v5 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v28) ^ v5, 53);
            --v27;
          }
          while (v27);
        }
        goto LABEL_30;
      }
    }
    do
    {
      uint64_t v26 = v4 + 2;
      unint64_t v5 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * *(void *)v4, 33)) ^ v5, 37);
      BOOL v15 = (unint64_t)(v4 + 4) > v2;
      v4 += 2;
    }
    while (!v15);
    goto LABEL_25;
  }
  if (a2 >= 0x20)
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0x61C8864E7A143579;
    unint64_t v8 = 0x60EA27EEADC0B5D6;
    unint64_t v9 = 0xC2B2AE3D27D4EB4FLL;
    int v4 = a1;
    do
    {
      uint64_t v10 = __ROR8__(v8 - 0x3D4D51C2D82B14B1 * *(void *)v4, 33);
      unint64_t v8 = 0x9E3779B185EBCA87 * v10;
      uint64_t v11 = __ROR8__(v9 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 1), 33);
      unint64_t v9 = 0x9E3779B185EBCA87 * v11;
      uint64_t v12 = __ROR8__(v6 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 2), 33);
      unint64_t v6 = 0x9E3779B185EBCA87 * v12;
      uint64_t v13 = __ROR8__(v7 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 3), 33);
      unint64_t v7 = 0x9E3779B185EBCA87 * v13;
      v4 += 8;
    }
    while ((unint64_t)v4 <= v2 - 32);
    unint64_t v3 = 0x85EBCA77C2B2AE63
       - 0x61C8864E7A143579
       * ((0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((__ROR8__(v9, 57) + __ROR8__(v8, 63) + __ROR8__(v6, 52) + __ROR8__(v7, 46)) ^ (0x9E3779B185EBCA87
                                                                                             * __ROR8__(0xDEF35B010F796CA9* v10, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v11, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v12, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v13, 33)));
  }
  unint64_t v5 = v3 + a2;
  if ((unint64_t)(v4 + 2) <= v2)
  {
    do
    {
      uint64_t v14 = v4 + 2;
      unint64_t v5 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * *(void *)v4, 33)) ^ v5, 37);
      BOOL v15 = (unint64_t)(v4 + 4) > v2;
      v4 += 2;
    }
    while (!v15);
  }
  else
  {
    uint64_t v14 = v4;
  }
  if ((unint64_t)(v14 + 1) <= v2) {
    unint64_t v5 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * *v14++) ^ v5, 41);
  }
  if ((unint64_t)v14 < v2)
  {
    unint64_t v16 = (char *)a1 + a2 - (char *)v14;
    do
    {
      unsigned int v17 = *(unsigned __int8 *)v14;
      uint64_t v14 = (unsigned int *)((char *)v14 + 1);
      unint64_t v5 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v17) ^ v5, 53);
      --v16;
    }
    while (v16);
  }
LABEL_30:
  unint64_t v29 = 0x165667B19E3779F9
      * ((0xC2B2AE3D27D4EB4FLL * (v5 ^ (v5 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v5 ^ (v5 >> 33))) >> 29));
  return v29 ^ HIDWORD(v29);
}

unint64_t ZSTD_ldm_generateSequences(int32x2_t *a1, void *a2, _DWORD *a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0xFFFFF) != 0) {
    uint64_t v5 = (a5 >> 20) + 1;
  }
  else {
    uint64_t v5 = a5 >> 20;
  }
  if (!v5) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v8 = 0;
  unsigned int v9 = 1 << a3[5];
  uint64_t v10 = (char *)(a4 + a5);
  int v11 = ~v9;
  uint64_t v12 = (uint64_t)&a1[7];
  unint64_t v180 = a1 + 71;
  uint64_t v174 = a4;
  unint64_t v13 = a2[3];
  uint64_t v14 = a4 + 1;
  unint64_t v166 = (uint64_t *)&a1[73];
LABEL_8:
  if (v13 < a2[4])
  {
    unint64_t v169 = result;
    BOOL v15 = (unsigned __int8 *)(a4 + (v8 << 20));
    if ((unint64_t)(v10 - (char *)v15) >= 0x100000) {
      unint64_t v16 = (char *)(v15 + 0x100000);
    }
    else {
      unint64_t v16 = v10;
    }
    int32x2_t v17 = a1[1];
    unsigned int v18 = v16 - v17.i32[0];
    if ((v16 - v17.i32[0]) > 0xE0000000)
    {
      unsigned int v25 = a3[1];
      uint64_t v26 = 1 << v25;
      uint64_t v27 = (v15 - v17.i32[0] + v11);
      int32x2_t v28 = (int32x2_t)(*(void *)&a1[2] + v27);
      a1[1] = (int32x2_t)(*(void *)&v17 + v27);
      a1[2] = v28;
      int32x2_t v29 = a1[3];
      int32x2_t v30 = vdup_n_s32(v27);
      int8x8_t v31 = (int8x8_t)vcgt_u32((uint32x2_t)v29, (uint32x2_t)v30);
      a1[3] = vsub_s32((int32x2_t)vand_s8((int8x8_t)vsub_s32(v29, v30), v31), (int32x2_t)vmvn_s8(v31));
      int32x2_t v32 = a1[4];
      if (v25 >= 3)
      {
        uint64_t v34 = (1 << v25) & 3;
        if ((v26 & 3) == 0) {
          uint64_t v34 = 4;
        }
        uint64_t v33 = v26 - v34;
        uint32x4_t v35 = (uint32x4_t)vdupq_n_s32(v27);
        uint64_t v36 = v33;
        unint64_t v37 = (float *)a1[4];
        char v38 = v37;
        do
        {
          unsigned long long v39 = (unsigned __int128)vld2q_f32(v38);
          v38 += 8;
          uint32x4_t v40 = vqsubq_u32((uint32x4_t)v39, v35);
          *unint64_t v37 = *(float *)v40.i32;
          v37[2] = *(float *)&v40.i32[1];
          v37[4] = *(float *)&v40.i32[2];
          v37[6] = *(float *)&v40.i32[3];
          unint64_t v37 = (float *)v38;
          v36 -= 4;
        }
        while (v36);
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v41 = v26 - v33;
      uint64_t v42 = (_DWORD *)(*(void *)&v32 + 8 * v33);
      do
      {
        int v43 = *v42 - v27;
        if (*v42 < v27) {
          int v43 = 0;
        }
        *uint64_t v42 = v43;
        v42 += 2;
        --v41;
      }
      while (v41);
      a1[5].i32[0] = 0;
      int32x2_t v184 = a1[1];
      unsigned int v18 = v16 - v184.i32[0];
      unsigned __int32 v19 = a1[3].u32[1];
      if (v9 >= (int)v16 - v184.i32[0])
      {
LABEL_14:
        unsigned int v20 = a1[3].u32[0];
        unint64_t v192 = a3[3];
        int v22 = a3[1];
        int v21 = a3[2];
        if (v19 >= v20)
        {
LABEL_15:
          int32x2_t v23 = 0;
          unsigned int v24 = v20;
LABEL_33:
          unint64_t v45 = v16 - (char *)v15;
          if (v19 >= v20) {
            unint64_t v46 = 0;
          }
          else {
            unint64_t v46 = *(void *)&v23 + v24;
          }
          unint64_t v47 = (char *)(*(void *)&v23 + v20);
          if (v19 >= v20) {
            unint64_t v48 = 0;
          }
          else {
            unint64_t v48 = *(void *)&v23 + v20;
          }
          unint64_t result = v16 - (char *)v15;
          if (v45 < v192) {
            goto LABEL_209;
          }
          unint64_t v179 = v48;
          unint64_t v194 = v46;
          unsigned int v191 = v24;
          int32x2_t v190 = v23;
          unint64_t v167 = v16 - (char *)v15;
          unsigned int v178 = v19;
          int v49 = a3[4];
          if (v192 >= 0x40) {
            unsigned int v50 = 64;
          }
          else {
            unsigned int v50 = v192;
          }
          unsigned int v51 = v49 - 1;
          uint64_t v52 = ~(-1 << v49);
          char v53 = v50 - v49;
          if (v51 >= v50) {
            char v53 = 0;
          }
          uint64_t v54 = v52 << v53;
          v196[0] = 0xFFFFFFFFLL;
          v196[1] = v54;
          unint64_t v189 = v47;
          if (v192)
          {
            unint64_t v55 = 0;
            uint64_t v56 = 0xFFFFFFFFLL;
            unint64_t v57 = v192;
            while (1)
            {
              unint64_t v59 = v57 - v55;
              if (v59 < 4)
              {
                unsigned int v60 = 0;
                unint64_t v58 = 0;
LABEL_66:
                if (v58 >= v59) {
                  goto LABEL_48;
                }
                do
                {
                  while (1)
                  {
                    unint64_t v61 = v58;
                    uint64_t v56 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v174 + v55 + v58++)] + 2 * v56;
                    if ((v56 & v54) == 0) {
                      break;
                    }
                    if (v58 >= v59) {
                      goto LABEL_47;
                    }
                  }
                  *(void *)(v12 + 8 * v60++) = v58;
                }
                while (v60 != 64 && v58 < v59);
              }
              else
              {
                unsigned int v60 = 0;
                unint64_t v61 = 0;
                uint64_t v62 = v14 + v55;
                while (1)
                {
                  uint64_t v56 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v62 + v61 - 1)] + 2 * v56;
                  if ((v56 & v54) == 0)
                  {
                    *(void *)(v12 + 8 * v60++) = v61 + 1;
                    if (v60 == 64) {
                      break;
                    }
                  }
                  uint64_t v56 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v62 + v61)] + 2 * v56;
                  if ((v56 & v54) == 0)
                  {
                    *(void *)(v12 + 8 * v60++) = v61 + 2;
                    if (v60 == 64)
                    {
                      unint64_t v58 = v61 + 2;
                      goto LABEL_48;
                    }
                  }
                  uint64_t v56 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v62 + v61 + 1)] + 2 * v56;
                  if ((v56 & v54) == 0)
                  {
                    *(void *)(v12 + 8 * v60++) = v61 + 3;
                    if (v60 == 64)
                    {
                      unint64_t v58 = v61 + 3;
                      goto LABEL_48;
                    }
                  }
                  uint64_t v56 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v62 + v61 + 2)] + 2 * v56;
                  unint64_t v58 = v61 + 4;
                  if ((v56 & v54) == 0)
                  {
                    *(void *)(v12 + 8 * v60++) = v58;
                    if (v60 == 64)
                    {
                      unint64_t v58 = v61 + 4;
                      goto LABEL_48;
                    }
                  }
                  v61 += 4;
                  if (v58 + 3 >= v59) {
                    goto LABEL_66;
                  }
                }
              }
LABEL_47:
              unint64_t v58 = v61 + 1;
LABEL_48:
              v55 += v58;
              unint64_t v57 = v192;
              if (v55 >= v192)
              {
                v196[0] = v56;
                break;
              }
            }
          }
          unint64_t v63 = (unint64_t)v16;
          long long v64 = v16 - 8;
          if (&v15[v192] >= (unsigned __int8 *)v16 - 8) {
            goto LABEL_208;
          }
          unint64_t v156 = v13;
          uint64_t v157 = v14;
          int v158 = v11;
          unint64_t v159 = v10;
          uint64_t v160 = v8;
          uint64_t v161 = v5;
          uint64_t v183 = a1;
          uint64_t v162 = a4;
          uint64_t v177 = 1 << v21;
          unint64_t v186 = (unint64_t)(v16 - 3);
          unint64_t v193 = (unint64_t)v16;
          unint64_t v185 = (unint64_t)(v16 - 1);
          uint64_t v182 = *(void *)&v184 + 8;
          uint64_t v172 = *(void *)&v184 + 8 + v20;
          unint64_t v173 = (unsigned __int8 *)(v48 - 1);
          unint64_t v65 = v192;
          uint64_t v66 = (uint64_t)&v15[v192];
          unint64_t v188 = a3;
          uint64_t v165 = v12;
          unsigned int v187 = v20;
          unint64_t v168 = (unint64_t)(v16 - 8);
          uint64_t v176 = (void *)(*(void *)&v184 + v20);
          int v164 = ~(-1 << (v22 - v21));
          unint64_t v163 = (unint64_t)(v16 - 7);
LABEL_78:
          unsigned int v195 = 0;
          unint64_t v170 = ZSTD_ldm_gear_feed(v196, v66, (unint64_t)&v64[-v66], v12, &v195);
          uint64_t v171 = v66;
          uint64_t v67 = v195;
          if (!v195)
          {
            a3 = v188;
            goto LABEL_77;
          }
          unint64_t v68 = v66 - v192;
          char v69 = v166;
          uint64_t v70 = (uint64_t *)v12;
          uint64_t v181 = v195;
          do
          {
            uint64_t v71 = *v70++;
            unint64_t v72 = ZSTD_XXH64((unsigned int *)(v68 + v71), v65);
            a3 = v188;
            uint64_t v73 = v72 & v164;
            *(v69 - 2) = v68 + v71;
            *((_DWORD *)v69 - 2) = v73;
            *((_DWORD *)v69 - 1) = HIDWORD(v72);
            _X8 = *(void *)&v183[4] + 8 * (v73 << v188[2]);
            *char v69 = _X8;
            v69 += 3;
            __asm { PRFM            #0, [X8] }
            --v67;
          }
          while (v67);
          uint64_t v80 = 0;
          uint64_t v12 = v165;
          int v82 = v180;
          uint64_t v81 = v181;
          int32x2_t v83 = v184;
          unsigned int v84 = v191;
          unint64_t v85 = v176;
LABEL_83:
          while (1)
          {
            unint64_t v90 = &v82[3 * v80];
            __int16 v91 = (char *)*v90;
            long long v94 = v90 + 1;
            uint64_t v92 = v90[1].u32[0];
            unsigned int v93 = v94->u32[1];
            unsigned int v95 = v91 - v83.i32[0];
            if (v91 >= (char *)v15) {
              break;
            }
            unint64_t v86 = (v91 - v83.i32[0]) | ((unint64_t)v93 << 32);
            char v87 = a3[2];
            int32x2_t v88 = v183[6];
            unsigned __int8 v89 = *(unsigned char *)(*(void *)&v88 + v92);
            *(void *)(*(void *)&v183[4] + 8 * (v92 << v87) + 8 * v89) = v86;
            *(unsigned char *)(*(void *)&v88 + v92) = (v89 + 1) & ~(-1 << v87);
            if (++v80 == v81) {
              goto LABEL_77;
            }
          }
          unsigned int v96 = (unsigned int *)v82[3 * v80 + 2];
          unint64_t v97 = &v96[2 * v177];
          if (v178 < v187)
          {
            uint64_t v98 = 0;
            unint64_t v99 = 0;
            int v100 = 0;
            unint64_t v101 = 0;
            long long v102 = v91 + 8;
            while (1)
            {
              if (v96[1] != v93) {
                goto LABEL_89;
              }
              uint64_t v104 = *v96;
              if (v104 <= v84) {
                goto LABEL_89;
              }
              if (v104 >= v187) {
                int32x2_t v105 = v83;
              }
              else {
                int32x2_t v105 = v190;
              }
              uint64_t v106 = (char *)(*(void *)&v105 + v104);
              if (v104 >= v187) {
                char v107 = (char *)v193;
              }
              else {
                char v107 = v189;
              }
              unint64_t v108 = &v91[v107 - v106];
              if ((unint64_t)v108 >= v193) {
                unint64_t v108 = (char *)v193;
              }
              if (v108 - 7 <= v91)
              {
                uint64_t v111 = v91;
                unsigned int v112 = (_DWORD *)(*(void *)&v105 + v104);
                if (v91 < v108 - 3)
                {
LABEL_106:
                  if (*v112 == *(_DWORD *)v111)
                  {
                    v111 += 4;
                    ++v112;
                  }
                }
              }
              else
              {
                unint64_t v109 = *(void *)v91 ^ *(void *)v106;
                if (v109)
                {
                  unint64_t v110 = __clz(__rbit64(v109)) >> 3;
                  int32x2_t v83 = v184;
                  if (&v106[v110] != v107) {
                    goto LABEL_103;
                  }
                  goto LABEL_117;
                }
                while (1)
                {
                  uint64_t v111 = (char *)v102 + v109;
                  if ((char *)v102 + v109 >= v108 - 7) {
                    break;
                  }
                  uint64_t v115 = *(void *)(*(void *)&v105 + v104 + 8 + v109);
                  v109 += 8;
                  unint64_t v116 = *(void *)v111 ^ v115;
                  if (v116)
                  {
                    unint64_t v110 = v109 + (__clz(__rbit64(v116)) >> 3);
                    int32x2_t v83 = v184;
                    unint64_t v65 = v192;
                    unsigned int v84 = v191;
                    unint64_t v85 = v176;
                    if (&v106[v110] != v107) {
                      goto LABEL_103;
                    }
                    goto LABEL_117;
                  }
                }
                unsigned int v112 = (_DWORD *)(*(void *)&v105 + v104 + v109 + 8);
                int32x2_t v83 = v184;
                unint64_t v85 = v176;
                if (v111 < v108 - 3) {
                  goto LABEL_106;
                }
              }
              if (v111 >= v108 - 1) {
                break;
              }
              if (*(unsigned __int16 *)v112 == *(unsigned __int16 *)v111)
              {
                v111 += 2;
                unsigned int v112 = (_DWORD *)((char *)v112 + 2);
              }
              if (v111 < v108) {
                goto LABEL_114;
              }
LABEL_116:
              unint64_t v110 = v111 - v91;
              unint64_t v65 = v192;
              unsigned int v84 = v191;
              if (&v106[v110] != v107)
              {
LABEL_103:
                if (v110 >= v65) {
                  goto LABEL_137;
                }
                goto LABEL_89;
              }
LABEL_117:
              int v113 = &v91[v110];
              if (v163 <= (unint64_t)&v91[v110])
              {
                unsigned int v117 = &v91[v110];
                unint64_t v118 = v85;
                if ((unint64_t)v113 < v186)
                {
LABEL_126:
                  if (*v118 == *(_DWORD *)v117)
                  {
                    v117 += 4;
                    ++v118;
                  }
                }
              }
              else
              {
                unint64_t v114 = *(void *)v113 ^ *v85;
                if (v114)
                {
                  v110 += __clz(__rbit64(v114)) >> 3;
                  if (v110 >= v65) {
                    goto LABEL_137;
                  }
                  goto LABEL_89;
                }
                unint64_t v127 = (char *)v102 + v110;
                while (1)
                {
                  uint64_t v128 = &v127[v114];
                  if ((unint64_t)&v127[v114] >= v163) {
                    break;
                  }
                  uint64_t v129 = *(void *)(v172 + v114);
                  v114 += 8;
                  unint64_t v130 = *(void *)v128 ^ v129;
                  if (v130)
                  {
                    unint64_t v131 = v114 + (__clz(__rbit64(v130)) >> 3);
                    int32x2_t v83 = v184;
                    unint64_t v65 = v192;
                    unsigned int v84 = v191;
                    v110 += v131;
                    if (v110 < v192) {
                      goto LABEL_89;
                    }
                    goto LABEL_137;
                  }
                }
                unsigned int v117 = (char *)v102 + v110 + v114;
                unint64_t v118 = (_DWORD *)(v172 + v114);
                int32x2_t v83 = v184;
                if ((unint64_t)v117 < v186) {
                  goto LABEL_126;
                }
              }
              if ((unint64_t)v117 >= v185)
              {
                if ((unint64_t)v117 >= v193) {
                  goto LABEL_136;
                }
LABEL_134:
                int32x2_t v83 = v184;
                if (*(unsigned __int8 *)v118 == *v117) {
                  ++v117;
                }
                goto LABEL_136;
              }
              if (*(unsigned __int16 *)v118 == *(unsigned __int16 *)v117)
              {
                v117 += 2;
                unint64_t v118 = (_DWORD *)((char *)v118 + 2);
              }
              if ((unint64_t)v117 < v193) {
                goto LABEL_134;
              }
LABEL_136:
              int64_t v119 = v117 - v113;
              unint64_t v65 = v192;
              unsigned int v84 = v191;
              v110 += v119;
              if (v110 >= v192)
              {
LABEL_137:
                uint64_t v103 = 0;
                if (v104 >= v187) {
                  uint64_t v120 = (unsigned __int8 *)v85;
                }
                else {
                  uint64_t v120 = (unsigned __int8 *)v194;
                }
                if (v91 > (char *)v15 && v106 > (char *)v120)
                {
                  uint64_t v103 = 0;
                  uint64_t v121 = (unsigned __int8 *)(*(void *)&v105 + v104 - 1);
                  uint64_t v122 = (unsigned __int8 *)(v91 - 1);
                  do
                  {
                    if (*v122 != *v121) {
                      break;
                    }
                    ++v103;
                    if (v122 <= v15) {
                      break;
                    }
                    --v122;
                    BOOL v123 = v121-- > v120;
                  }
                  while (v123);
                }
                if (v120 == (unsigned __int8 *)v194 || &v106[-v103] != (char *)v120)
                {
                  unint64_t v65 = v192;
                  unsigned int v84 = v191;
                }
                else
                {
                  uint64_t v124 = 0;
                  unint64_t v65 = v192;
                  unsigned int v84 = v191;
                  if (v179 > v194 && &v91[-v103] > (char *)v15)
                  {
                    uint64_t v124 = 0;
                    BOOL v125 = (unsigned __int8 *)&v91[-v103 - 1];
                    uint64_t v126 = v173;
                    do
                    {
                      if (*v125 != *v126) {
                        break;
                      }
                      ++v124;
                      if (v125 <= v15) {
                        break;
                      }
                      --v125;
                      BOOL v123 = (unint64_t)v126-- > v194;
                    }
                    while (v123);
                  }
                  v103 += v124;
                }
                if (v103 + v110 > v99)
                {
                  unint64_t v101 = v110;
                  int v100 = v103;
                  unint64_t v99 = v103 + v110;
                  uint64_t v98 = v96;
                }
              }
LABEL_89:
              v96 += 2;
              if (v96 >= v97) {
                goto LABEL_201;
              }
            }
            if (v111 >= v108) {
              goto LABEL_116;
            }
LABEL_114:
            if (*(unsigned __int8 *)v112 == *v111) {
              ++v111;
            }
            goto LABEL_116;
          }
          uint64_t v98 = 0;
          unint64_t v132 = 0;
          int v100 = 0;
          unint64_t v101 = 0;
          uint64_t v133 = v91 + 8;
          while (1)
          {
            if (v96[1] != v93) {
              goto LABEL_168;
            }
            uint64_t v134 = *v96;
            if (v134 <= v84) {
              goto LABEL_168;
            }
            uint64_t v135 = (_DWORD *)(*(void *)&v83 + v134);
            if (v163 <= (unint64_t)v91)
            {
              char v138 = v91;
              if ((unint64_t)v91 < v186)
              {
LABEL_176:
                if (*v135 == *v138)
                {
                  ++v138;
                  ++v135;
                }
              }
            }
            else
            {
              unint64_t v136 = *(void *)v91 ^ *(void *)v135;
              if (v136)
              {
                unint64_t v137 = __clz(__rbit64(v136)) >> 3;
                if (v137 >= v65) {
                  goto LABEL_187;
                }
                goto LABEL_168;
              }
              uint64_t v142 = 0;
              while (1)
              {
                char v138 = &v133[v142];
                if ((unint64_t)&v133[v142] >= v163) {
                  break;
                }
                uint64_t v143 = *(void *)(v182 + v134 + v142 * 8);
                ++v142;
                unint64_t v144 = *(void *)v138 ^ v143;
                if (v144)
                {
                  unint64_t v137 = v142 * 8 + (__clz(__rbit64(v144)) >> 3);
                  if (v137 < v65) {
                    goto LABEL_168;
                  }
                  goto LABEL_187;
                }
              }
              uint64_t v135 = (_DWORD *)(v182 + v134 + v142 * 8);
              if ((unint64_t)v138 < v186) {
                goto LABEL_176;
              }
            }
            if ((unint64_t)v138 >= v185) {
              break;
            }
            if (*(unsigned __int16 *)v135 == *(unsigned __int16 *)v138)
            {
              char v138 = (_DWORD *)((char *)v138 + 2);
              uint64_t v135 = (_DWORD *)((char *)v135 + 2);
            }
            if ((unint64_t)v138 < v193) {
              goto LABEL_184;
            }
LABEL_186:
            unint64_t v137 = (char *)v138 - v91;
            if (v137 >= v65)
            {
LABEL_187:
              uint64_t v139 = 0;
              if (v91 > (char *)v15 && v134 > v187)
              {
                uint64_t v139 = 0;
                unint64_t v140 = (unsigned __int8 *)(*(void *)&v184 - 1 + v134);
                unint64_t v141 = (unsigned __int8 *)(v91 - 1);
                do
                {
                  if (*v141 != *v140) {
                    break;
                  }
                  ++v139;
                  if (v141 <= v15) {
                    break;
                  }
                  --v141;
                  BOOL v123 = v140-- > (unsigned __int8 *)v85;
                }
                while (v123);
              }
              if (v139 + v137 > v132)
              {
                unint64_t v101 = v137;
                int v100 = v139;
                unint64_t v132 = v139 + v137;
                uint64_t v98 = v96;
              }
            }
LABEL_168:
            v96 += 2;
            if (v96 >= v97)
            {
LABEL_201:
              if (v98)
              {
                uint64_t v145 = a2[3];
                if (v145 == a2[4]) {
                  return -70;
                }
                uint64_t v146 = (unsigned int *)(*a2 + 12 * v145);
                unsigned int v147 = v95 - *v98;
                v146[1] = v91 - v100 - v15;
                v146[2] = v100 + v101;
                *uint64_t v146 = v147;
                a2[3] = v145 + 1;
                unint64_t v148 = v95 | ((unint64_t)v93 << 32);
                a3 = v188;
                char v149 = v188[2];
                int32x2_t v150 = v183[6];
                LOBYTE(v147) = *(unsigned char *)(*(void *)&v150 + v92);
                *(void *)(*(void *)&v183[4] + 8 * (v92 << v149) + 8 * v147) = v148;
                *(unsigned char *)(*(void *)&v150 + v92) = (v147 + 1) & ~(-1 << v149);
                BOOL v15 = (unsigned __int8 *)&v91[v101];
                int v82 = v180;
                uint64_t v81 = v181;
                if (++v80 == v181) {
                  goto LABEL_77;
                }
                goto LABEL_83;
              }
              unint64_t v151 = v95 | ((unint64_t)v93 << 32);
              a3 = v188;
              char v152 = v188[2];
              int32x2_t v153 = v183[6];
              unsigned __int8 v154 = *(unsigned char *)(*(void *)&v153 + v92);
              *(void *)(*(void *)&v183[4] + 8 * (v92 << v152) + 8 * v154) = v151;
              *(unsigned char *)(*(void *)&v153 + v92) = (v154 + 1) & ~(-1 << v152);
              int v82 = v180;
              uint64_t v81 = v181;
              if (++v80 != v181) {
                goto LABEL_83;
              }
LABEL_77:
              uint64_t v66 = v171 + v170;
              long long v64 = (char *)v168;
              if (v171 + v170 < v168) {
                goto LABEL_78;
              }
              uint64_t v5 = v161;
              a4 = v162;
              a1 = v183;
              uint64_t v8 = v160;
              uint64_t v10 = v159;
              int v11 = v158;
              unint64_t v13 = v156;
              uint64_t v14 = v157;
              unint64_t v63 = v193;
LABEL_208:
              unint64_t result = v63 - (void)v15;
              unint64_t v45 = v167;
LABEL_209:
              if (result > 0xFFFFFFFFFFFFFF88) {
                return result;
              }
              unint64_t v155 = a2[3];
              if (v13 >= v155) {
                unint64_t result = v45 + v169;
              }
              else {
                *(_DWORD *)(*a2 + 12 * v13 + 4) += v169;
              }
              ++v8;
              v14 += 0x100000;
              v174 += 0x100000;
              unint64_t v13 = v155;
              if (v8 == v5) {
                return 0;
              }
              goto LABEL_8;
            }
          }
          if ((unint64_t)v138 >= v193) {
            goto LABEL_186;
          }
LABEL_184:
          if (*(unsigned __int8 *)v135 == *(unsigned __int8 *)v138) {
            char v138 = (_DWORD *)((char *)v138 + 1);
          }
          goto LABEL_186;
        }
LABEL_32:
        int32x2_t v23 = a1[2];
        unsigned int v24 = v19;
        goto LABEL_33;
      }
    }
    else
    {
      int32x2_t v184 = a1[1];
      unsigned __int32 v19 = a1[3].u32[1];
      if (a1[5].i32[0] + v9 >= v18) {
        goto LABEL_14;
      }
    }
    unsigned int v44 = v18 - v9;
    if (v19 < v44)
    {
      a1[3].i32[1] = v44;
      unsigned __int32 v19 = v44;
    }
    unsigned int v20 = a1[3].u32[0];
    if (v20 < v19)
    {
      a1[3].i32[0] = v19;
      unsigned int v20 = v19;
    }
    a1[5].i32[0] = 0;
    unint64_t v192 = a3[3];
    int v22 = a3[1];
    int v21 = a3[2];
    if (v19 >= v20) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
  return 0;
}

uint64_t *ZSTD_ldm_skipSequences(uint64_t *result, unint64_t a2, unsigned int a3)
{
  if (a2)
  {
    unint64_t v3 = result[3];
    unint64_t v4 = result[1];
    if (v4 <= v3) {
      uint64_t v5 = result[3];
    }
    else {
      uint64_t v5 = result[1];
    }
    uint64_t v6 = 12 * v4;
    while (v5 != v4)
    {
      uint64_t v7 = *result;
      uint64_t v8 = *result + v6;
      unint64_t v9 = *(unsigned int *)(v8 + 4);
      unint64_t v10 = a2 - v9;
      if (a2 <= v9)
      {
        *(_DWORD *)(v8 + 4) = v9 - a2;
        return result;
      }
      *(_DWORD *)(v8 + 4) = 0;
      unint64_t v11 = *(unsigned int *)(v8 + 8);
      a2 = v10 - v11;
      if (v10 < v11)
      {
        *(_DWORD *)(v7 + v6 + 8) = v11 - v10;
        if ((int)v11 - (int)v10 < a3)
        {
          unint64_t v12 = v4 + 1;
          if (v12 < v3) {
            *(_DWORD *)(v7 + v6 + 16) += v11 - v10;
          }
          result[1] = v12;
        }
        return result;
      }
      *(_DWORD *)(v8 + 8) = 0;
      result[1] = ++v4;
      v6 += 12;
      if (v10 == v11) {
        return result;
      }
    }
  }
  return result;
}

uint64_t ZSTD_ldm_skipRawSeqStoreBytes(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 16) + a2;
  if (!v2) {
    goto LABEL_12;
  }
  unint64_t v3 = *(void *)(result + 24);
  unint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = v4 <= v3 ? *(void *)(result + 24) : *(void *)(result + 8);
  uint64_t v6 = 12 * v4;
  while (v5 != v4)
  {
    unsigned int v7 = *(_DWORD *)(*(void *)result + v6 + 8) + *(_DWORD *)(*(void *)result + v6 + 4);
    BOOL v8 = v2 >= v7;
    unsigned int v9 = v2 - v7;
    if (!v8)
    {
      *(void *)(result + 16) = v2;
      break;
    }
    *(void *)(result + 8) = ++v4;
    v6 += 12;
    unsigned int v2 = v9;
    if (!v9) {
      goto LABEL_12;
    }
  }
  if (v3 == v4) {
LABEL_12:
  }
    *(void *)(result + 16) = 0;
  return result;
}

uint64_t ZSTD_ldm_blockCompress(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6)
{
  unint64_t v7 = a5;
  uint64_t v12 = *(int *)(a2 + 216);
  if (*(_DWORD *)(a2 + 28) >= *(_DWORD *)(a2 + 24))
  {
    uint64_t v13 = *(void *)(a2 + 184);
    if (v13)
    {
      BOOL v14 = *(_DWORD *)(v13 + 72) == 0;
      uint64_t v13 = 2;
      if (!v14) {
        uint64_t v13 = 3;
      }
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
  BOOL v15 = (uint64_t (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))*(&ZSTD_selectBlockCompressor_blockCompressor[10 * v13]
                                                                                       + v12);
  if (v12 <= 6)
  {
    uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, void *, unint64_t, unint64_t))*(&ZSTD_selectBlockCompressor_blockCompressor[10 * v13]
                                                                                                  + v12);
    unint64_t v25 = a5 + a6;
    unint64_t v26 = *(void *)(a1 + 8);
    unint64_t v27 = *(void *)(a1 + 24);
    if (v26 >= v27 || a6 < 1)
    {
LABEL_22:
      unsigned int v29 = v7 - *(_DWORD *)(a2 + 8);
      int v30 = *(_DWORD *)(a2 + 36);
      if (v30 + 1024 < v29)
      {
        unsigned int v31 = v29 - v30 - 1024;
        if (v31 >= 0x200) {
          unsigned int v31 = 512;
        }
        *(_DWORD *)(a2 + 36) = v29 - v31;
      }
      ZSTD_ldm_fillFastTables(a2, v7);
      return v78(a2, a3, a4, v7, v25 - v7);
    }
    unint64_t v32 = v25 - 32;
    unsigned int v77 = *(_DWORD *)(a2 + 208);
    while (1)
    {
      unsigned int v33 = v25 - v7;
      uint64_t v34 = *(void *)a1 + 12 * v26;
      uint64_t v35 = *(void *)v34;
      unint64_t v36 = HIDWORD(*(void *)v34);
      unsigned int v37 = *(_DWORD *)(v34 + 8);
      if (v37 + v36 <= (int)v25 - (int)v7)
      {
        unint64_t v45 = v26 + 1;
LABEL_47:
        *(void *)(a1 + 8) = v45;
      }
      else
      {
        if (v33 - v36 >= v77) {
          int v38 = *(void *)v34;
        }
        else {
          int v38 = 0;
        }
        if (v33 <= v36)
        {
          LODWORD(v35) = 0;
        }
        else
        {
          unsigned int v37 = v33 - v36;
          LODWORD(v35) = v38;
        }
        if (v33)
        {
          unint64_t v39 = (v25 - v7);
          if (v26 <= v27) {
            unint64_t v40 = v27;
          }
          else {
            unint64_t v40 = v26;
          }
          uint64_t v41 = (unsigned int *)(*(void *)a1 + 12 * v26 + 8);
          while (v40 != v26)
          {
            unint64_t v42 = *(v41 - 1);
            unint64_t v43 = v39 - v42;
            if (v39 <= v42)
            {
              *(v41 - 1) = v42 - v39;
              break;
            }
            *(v41 - 1) = 0;
            unint64_t v44 = *v41;
            unint64_t v39 = v43 - v44;
            if (v43 < v44)
            {
              *uint64_t v41 = v44 - v43;
              if ((int)v44 - (int)v43 >= v77) {
                break;
              }
              unint64_t v45 = v26 + 1;
              if (v45 < v27) {
                v41[2] += v44 - v43;
              }
              goto LABEL_47;
            }
            *uint64_t v41 = 0;
            v41 += 3;
            *(void *)(a1 + 8) = ++v26;
            if (v43 == v44) {
              break;
            }
          }
        }
      }
      if (!v35) {
        goto LABEL_22;
      }
      unsigned int v46 = v7 - *(_DWORD *)(a2 + 8);
      int v47 = *(_DWORD *)(a2 + 36);
      if (v47 + 1024 < v46)
      {
        unsigned int v48 = v46 - v47 - 1024;
        if (v48 >= 0x200) {
          unsigned int v48 = 512;
        }
        *(_DWORD *)(a2 + 36) = v46 - v48;
      }
      ZSTD_ldm_fillFastTables(a2, v7);
      unint64_t v49 = v78(a2, a3, a4, v7, v36);
      *(void *)((char *)a4 + 4) = *a4;
      unint64_t v50 = v7 + v36;
      *(_DWORD *)a4 = v35;
      unsigned int v51 = (long long *)(v7 + v36 - v49);
      uint64_t v52 = *(long long **)(a3 + 24);
      if (v7 + v36 > v32) {
        break;
      }
      *uint64_t v52 = *v51;
      uint64_t v58 = *(void *)(a3 + 24);
      if (v49 > 0x10)
      {
        unint64_t v59 = (_OWORD *)(v58 + 16);
        unint64_t v60 = v58 + v49;
        unint64_t v61 = (long long *)(v7 + v36 - v49 + 16);
        do
        {
          long long v62 = *v61++;
          *v59++ = v62;
        }
        while ((unint64_t)v59 < v60);
LABEL_85:
        *(void *)(a3 + 24) += v49;
        uint64_t v63 = *(void *)(a3 + 8);
        if (v49 >= 0x10000)
        {
          unint64_t v75 = (unint64_t)(v63 - *(void *)a3) >> 3;
          *(_DWORD *)(a3 + 72) = 1;
          *(_DWORD *)(a3 + 76) = v75;
        }
        goto LABEL_87;
      }
      *(void *)(a3 + 24) = v58 + v49;
      uint64_t v63 = *(void *)(a3 + 8);
LABEL_87:
      *(_WORD *)(v63 + 4) = v49;
      *(_DWORD *)uint64_t v63 = v35 + 3;
      if (((v37 - 3) & 0xFFFF0000) != 0)
      {
        unint64_t v76 = (unint64_t)(v63 - *(void *)a3) >> 3;
        *(_DWORD *)(a3 + 72) = 2;
        *(_DWORD *)(a3 + 76) = v76;
      }
      *(_WORD *)(v63 + 6) = v37 - 3;
      *(void *)(a3 + 8) = v63 + 8;
      unint64_t v7 = v50 + v37;
      unint64_t v26 = *(void *)(a1 + 8);
      unint64_t v27 = *(void *)(a1 + 24);
      if (v26 >= v27 || v7 >= v25) {
        goto LABEL_22;
      }
    }
    if ((unint64_t)v51 <= v32)
    {
      char v53 = (long long *)((char *)v52 + v32 - (void)v51);
      do
      {
        long long v54 = *v51++;
        *v52++ = v54;
      }
      while (v52 < v53);
      unsigned int v51 = (long long *)(v25 - 32);
      uint64_t v52 = v53;
    }
    if ((unint64_t)v51 >= v50) {
      goto LABEL_85;
    }
    unint64_t v55 = v36 + v7 - v49;
    if (v55 <= v32) {
      unint64_t v55 = v25 - 32;
    }
    unint64_t v56 = v36 + v7 - v55;
    if (v56 < 8 || (unint64_t)v52 - v55 < 0x20)
    {
      long long v64 = v52;
      unint64_t v65 = (char *)v51;
      goto LABEL_84;
    }
    if (v56 >= 0x20)
    {
      unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v66 = v51 + 1;
      uint64_t v67 = v52 + 1;
      unint64_t v68 = v56 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v69 = *v66;
        *(v67 - 1) = *(v66 - 1);
        *uint64_t v67 = v69;
        v66 += 2;
        v67 += 2;
        v68 -= 32;
      }
      while (v68);
      if (v56 == v57) {
        goto LABEL_85;
      }
      if ((v56 & 0x18) == 0)
      {
        unint64_t v65 = (char *)v51 + v57;
        long long v64 = (long long *)((char *)v52 + v57);
        goto LABEL_84;
      }
    }
    else
    {
      unint64_t v57 = 0;
    }
    long long v64 = (long long *)((char *)v52 + (v56 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v65 = (char *)v51 + (v56 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v70 = (uint64_t *)((char *)v51 + v57);
    uint64_t v71 = (void *)((char *)v52 + v57);
    unint64_t v72 = v57 - (v56 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v73 = *v70++;
      *v71++ = v73;
      v72 += 8;
    }
    while (v72);
    if (v56 == (v56 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_85;
    }
    do
    {
LABEL_84:
      char v74 = *v65++;
      *(unsigned char *)long long v64 = v74;
      long long v64 = (long long *)((char *)v64 + 1);
    }
    while ((unint64_t)v65 < v50);
    goto LABEL_85;
  }
  *(void *)(a2 + 224) = a1;
  uint64_t result = v15(a2, a3, a4, a5, a6);
  unsigned int v17 = *(_DWORD *)(a1 + 16) + a6;
  if (v17)
  {
    unint64_t v18 = *(void *)(a1 + 24);
    unint64_t v19 = *(void *)(a1 + 8);
    if (v19 <= v18) {
      uint64_t v20 = *(void *)(a1 + 24);
    }
    else {
      uint64_t v20 = *(void *)(a1 + 8);
    }
    uint64_t v21 = 12 * v19;
    while (1)
    {
      if (v20 == v19)
      {
        if (v20 == v18) {
          goto LABEL_95;
        }
        return result;
      }
      unsigned int v22 = *(_DWORD *)(*(void *)a1 + v21 + 8) + *(_DWORD *)(*(void *)a1 + v21 + 4);
      BOOL v23 = v17 >= v22;
      unsigned int v24 = v17 - v22;
      if (!v23) {
        break;
      }
      *(void *)(a1 + 8) = ++v19;
      v21 += 12;
      unsigned int v17 = v24;
      if (!v24) {
        goto LABEL_95;
      }
    }
    *(void *)(a1 + 16) = v17;
    if (v19 != v18) {
      return result;
    }
  }
LABEL_95:
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t ZSTD_ldm_fillFastTables(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 216);
  if (v2 == 2) {
    return ZSTD_fillDoubleHashTable(result, a2, 0);
  }
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v4 = *(unsigned int *)(result + 36);
    uint64_t v5 = (void *)(v3 + v4);
    unint64_t v6 = a2 - 6;
    unint64_t v7 = v3 + v4 + 3;
    if (v7 < a2 - 6)
    {
      uint64_t v8 = *(void *)(result + 48);
      int v9 = 64 - *(_DWORD *)(result + 200);
      switch(*(_DWORD *)(result + 208))
      {
        case 5:
          unint64_t v10 = v3 + v4 + 6;
          if (v10 <= v6) {
            unint64_t v10 = a2 - 6;
          }
          uint64_t v11 = v10 - v3 - 6;
          if (v11 == v4) {
            uint64_t v12 = *(unsigned int *)(result + 36);
          }
          else {
            uint64_t v12 = v4 + 1;
          }
          unint64_t v13 = (v11 - v12) / 3uLL;
          if (v11 != v4) {
            ++v13;
          }
          if (!v13) {
            goto LABEL_62;
          }
          unint64_t v14 = v13 + 1;
          uint64_t v15 = 3 * (v14 & 0x7FFFFFFFFFFFFFFELL);
          v7 += v15;
          uint64_t v5 = (void *)((char *)v5 + v15);
          uint64_t result = v14 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v16 = (0xCF1BBCDCBB000000 * *(void *)(v3 + v4 + 3)) >> v9;
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBB000000 * *(void *)(v3 + v4)) >> v9)) = v4;
            *(_DWORD *)(v8 + 4 * v16) = v4 + 3;
            v4 += 6;
            result -= 2;
          }
          while (result);
          if (v14 != (v14 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_62:
            do
            {
              *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBB000000 * *v5) >> v9)) = v5 - v3;
              uint64_t v5 = (void *)v7;
              v7 += 3;
            }
            while (v7 < v6);
          }
          break;
        case 6:
          unint64_t v18 = v3 + v4 + 6;
          if (v18 <= v6) {
            unint64_t v18 = a2 - 6;
          }
          uint64_t v19 = v18 - v3 - 6;
          if (v19 == v4) {
            uint64_t v20 = *(unsigned int *)(result + 36);
          }
          else {
            uint64_t v20 = v4 + 1;
          }
          unint64_t v21 = (v19 - v20) / 3uLL;
          if (v19 != v4) {
            ++v21;
          }
          if (!v21) {
            goto LABEL_63;
          }
          unint64_t v22 = v21 + 1;
          uint64_t v23 = 3 * (v22 & 0x7FFFFFFFFFFFFFFELL);
          v7 += v23;
          uint64_t v5 = (void *)((char *)v5 + v23);
          uint64_t result = v22 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v24 = (0xCF1BBCDCBF9B0000 * *(void *)(v3 + v4 + 3)) >> v9;
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v3 + v4)) >> v9)) = v4;
            *(_DWORD *)(v8 + 4 * v24) = v4 + 3;
            v4 += 6;
            result -= 2;
          }
          while (result);
          if (v22 != (v22 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_63:
            do
            {
              *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBF9B0000 * *v5) >> v9)) = v5 - v3;
              uint64_t v5 = (void *)v7;
              v7 += 3;
            }
            while (v7 < v6);
          }
          break;
        case 7:
          unint64_t v25 = v3 + v4 + 6;
          if (v25 <= v6) {
            unint64_t v25 = a2 - 6;
          }
          uint64_t v26 = v25 - v3 - 6;
          if (v26 == v4) {
            uint64_t v27 = *(unsigned int *)(result + 36);
          }
          else {
            uint64_t v27 = v4 + 1;
          }
          unint64_t v28 = (v26 - v27) / 3uLL;
          if (v26 != v4) {
            ++v28;
          }
          if (!v28) {
            goto LABEL_64;
          }
          unint64_t v29 = v28 + 1;
          uint64_t v30 = 3 * (v29 & 0x7FFFFFFFFFFFFFFELL);
          v7 += v30;
          uint64_t v5 = (void *)((char *)v5 + v30);
          uint64_t result = v29 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v31 = (0xCF1BBCDCBFA56300 * *(void *)(v3 + v4 + 3)) >> v9;
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBFA56300 * *(void *)(v3 + v4)) >> v9)) = v4;
            *(_DWORD *)(v8 + 4 * v31) = v4 + 3;
            v4 += 6;
            result -= 2;
          }
          while (result);
          if (v29 != (v29 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_64:
            do
            {
              *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCBFA56300 * *v5) >> v9)) = v5 - v3;
              uint64_t v5 = (void *)v7;
              v7 += 3;
            }
            while (v7 < v6);
          }
          break;
        case 8:
          unint64_t v32 = v3 + v4 + 6;
          if (v32 <= v6) {
            unint64_t v32 = a2 - 6;
          }
          uint64_t v33 = v32 - v3 - 6;
          if (v33 == v4) {
            uint64_t v34 = *(unsigned int *)(result + 36);
          }
          else {
            uint64_t v34 = v4 + 1;
          }
          unint64_t v35 = (v33 - v34) / 3uLL;
          if (v33 != v4) {
            ++v35;
          }
          if (!v35) {
            goto LABEL_65;
          }
          unint64_t v36 = v35 + 1;
          uint64_t v37 = 3 * (v36 & 0x7FFFFFFFFFFFFFFELL);
          v7 += v37;
          uint64_t v5 = (void *)((char *)v5 + v37);
          uint64_t result = v36 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            unint64_t v38 = (0xCF1BBCDCB7A56463 * *(void *)(v3 + v4 + 3)) >> v9;
            *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * *(void *)(v3 + v4)) >> v9)) = v4;
            *(_DWORD *)(v8 + 4 * v38) = v4 + 3;
            v4 += 6;
            result -= 2;
          }
          while (result);
          if (v36 != (v36 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_65:
            do
            {
              *(_DWORD *)(v8 + 4 * ((0xCF1BBCDCB7A56463 * *v5) >> v9)) = v5 - v3;
              uint64_t v5 = (void *)v7;
              v7 += 3;
            }
            while (v7 < v6);
          }
          break;
        default:
          char v17 = *(unsigned char *)(result + 200) - 32;
          do
          {
            *(_DWORD *)(v8 + 4 * ((-1640531535 * *(_DWORD *)(v3 + v4)) >> v17)) = v4;
            v4 += 3;
          }
          while (v3 + v4 + 3 < v6);
          break;
      }
    }
  }
  return result;
}

uint64_t ZSTD_updateTree(uint64_t result, int a2, unint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  unsigned int v5 = a2 - v4;
  unsigned int v6 = *(_DWORD *)(result + 36);
  if (v6 < a2 - (int)v4)
  {
    int v8 = *(_DWORD *)(result + 208);
    do
    {
      uint64_t result = ZSTD_insertBt1(v3, (void *)(v4 + v6), a3, v8, 0);
      v6 += result;
    }
    while (v6 < v5);
  }
  *(_DWORD *)(v3 + 36) = v5;
  return result;
}

int64x2_t *ZSTDMT_createCCtx_advanced(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))a2;
  uint64_t v3 = *(void (**)(uint64_t, pthread_mutex_t *))(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned int v22 = a1 + 2;
  if (!a1) {
    return 0;
  }
  uint64_t v6 = a1 >= 0xC8 ? 200 : a1;
  if ((v4 != 0) != (v3 != 0)) {
    return 0;
  }
  if (v4)
  {
    int v8 = (int64x2_t *)v4(v5, 3040);
    bzero(v8, 0xBE0uLL);
  }
  else
  {
    int v8 = (int64x2_t *)malloc_type_calloc(1uLL, 0xBE0uLL, 0xEC864E14uLL);
    if (!v8) {
      return v8;
    }
  }
  v8[7].i32[1] = v6;
  v8[187].i64[0] = (uint64_t)v4;
  v8[187].i64[1] = (uint64_t)v3;
  v8[188].i64[0] = v5;
  v8[185].i32[0] = 1;
  if (a3)
  {
    v8->i64[0] = a3;
    __int8 v9 = v8[189].i8[8] | 1;
  }
  else
  {
    *(void *)&long long v20 = v4;
    *((void *)&v20 + 1) = v3;
    uint64_t v21 = v5;
    v8->i64[0] = (uint64_t)POOL_create_advanced(v6, 0, &v20);
    __int8 v9 = v8[189].i8[8] & 0xFE;
  }
  v8[189].i8[8] = v9;
  *(void *)&long long v20 = v4;
  *((void *)&v20 + 1) = v3;
  uint64_t v21 = v5;
  v8->i64[1] = (uint64_t)ZSTDMT_createJobsTable(&v22, (uint64_t)&v20);
  v8[184].i32[0] = v22 - 1;
  int v10 = 2 * v6 + 3;
  int v11 = 32 * v6;
  size_t v12 = (32 * v6 + 152);
  if (v4)
  {
    unint64_t v13 = (pthread_mutex_t *)v4(v5, (v11 + 152));
    bzero(v13, v12);
    if (!v13) {
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v13 = (pthread_mutex_t *)malloc_type_calloc(1uLL, (v11 + 152), 0xEC864E14uLL);
    if (!v13) {
      goto LABEL_22;
    }
  }
  if (pthread_mutex_init(v13, 0))
  {
    if (v3) {
      v3(v5, v13);
    }
    else {
      free(v13);
    }
    unint64_t v13 = 0;
  }
  else
  {
    v13[1].__sig = 0x10000;
    *(_DWORD *)v13[1].__opaque = v10;
    *(_DWORD *)&v13[1].__opaque[4] = 0;
    *(void *)&v13[1].__opaque[8] = v4;
    *(void *)&v13[1].__opaque[16] = v3;
    *(void *)&v13[1].__opaque[24] = v5;
  }
LABEL_22:
  v8[1].i64[0] = (uint64_t)v13;
  *(void *)&long long v20 = v4;
  *((void *)&v20 + 1) = v3;
  uint64_t v21 = v5;
  v8[1].i64[1] = (uint64_t)ZSTDMT_createCCtxPool(v6, &v20);
  if (v4)
  {
    unint64_t v14 = (pthread_mutex_t *)v4(v5, v12);
    bzero(v14, v12);
    if (!v14) {
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v14 = (pthread_mutex_t *)malloc_type_calloc(1uLL, v12, 0xEC864E14uLL);
    if (!v14) {
      goto LABEL_32;
    }
  }
  if (pthread_mutex_init(v14, 0))
  {
    if (v3) {
      v3(v5, v14);
    }
    else {
      free(v14);
    }
    unint64_t v14 = 0;
  }
  else
  {
    v14[1].__sig = 0x10000;
    *(_DWORD *)v14[1].__opaque = v10;
    *(_DWORD *)&v14[1].__opaque[4] = 0;
    *(void *)&v14[1].__opaque[8] = v4;
    *(void *)&v14[1].__opaque[16] = v3;
    *(void *)&v14[1].__opaque[24] = v5;
    pthread_mutex_lock(v14);
    v14[1].__sig = 0;
    pthread_mutex_unlock(v14);
  }
LABEL_32:
  v8[2].i64[0] = (uint64_t)v14;
  bzero(&v8[18].u64[1], 0xA40uLL);
  int v15 = pthread_mutex_init((pthread_mutex_t *)&v8[18].u64[1], 0);
  int v16 = pthread_cond_init((pthread_cond_t *)&v8[22].u64[1], 0) | v15;
  int v17 = pthread_mutex_init((pthread_mutex_t *)&v8[173].u64[1], 0);
  int v18 = v16 | v17 | pthread_cond_init((pthread_cond_t *)&v8[177].u64[1], 0);
  v8[17].i64[1] = 0;
  v8[18].i64[0] = 0;
  v8[17].i64[0] = 0;
  if (v18 | vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*v8), (int32x4_t)vceqzq_s64(v8[1])))) & 1 | (v8[2].i64[0] == 0))
  {
    ZSTDMT_freeCCtx((uint64_t)v8);
    return 0;
  }
  return v8;
}

uint64_t ZSTDMT_freeCCtx(uint64_t a1)
{
  if (a1)
  {
    if ((*(unsigned char *)(a1 + 3032) & 1) == 0) {
      POOL_free(*(void *)a1);
    }
    ZSTDMT_releaseAllJobResources(a1);
    int v2 = *(char **)(a1 + 8);
    if (v2)
    {
      int v3 = *(_DWORD *)(a1 + 2944);
      uint64_t v4 = *(void (**)(uint64_t, char *))(a1 + 3000);
      uint64_t v5 = *(void *)(a1 + 3008);
      uint64_t v6 = (v3 + 1);
      if (v3 != -1)
      {
        unint64_t v7 = (pthread_cond_t *)(v2 + 80);
        do
        {
          pthread_mutex_destroy((pthread_mutex_t *)&v7[-2].__opaque[24]);
          pthread_cond_destroy(v7);
          unint64_t v7 = (pthread_cond_t *)((char *)v7 + 424);
          --v6;
        }
        while (v6);
      }
      if (!v4)
      {
        free(v2);
        uint64_t v8 = *(void *)(a1 + 16);
        if (!v8) {
          goto LABEL_23;
        }
        goto LABEL_11;
      }
      v4(v5, v2);
    }
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      goto LABEL_23;
    }
LABEL_11:
    if (*(_DWORD *)(v8 + 72))
    {
      unint64_t v9 = 0;
      int v10 = (void **)(v8 + 104);
      do
      {
        if (*v10)
        {
          int v11 = *(void (**)(void))(v8 + 88);
          if (v11) {
            v11(*(void *)(v8 + 96));
          }
          else {
            free(*v10);
          }
        }
        ++v9;
        v10 += 2;
      }
      while (v9 < *(unsigned int *)(v8 + 72));
    }
    pthread_mutex_destroy((pthread_mutex_t *)v8);
    size_t v12 = *(void (**)(void, uint64_t))(v8 + 88);
    if (v12) {
      v12(*(void *)(v8 + 96), v8);
    }
    else {
      free((void *)v8);
    }
LABEL_23:
    uint64_t v13 = *(void *)(a1 + 24);
    if (*(int *)(v13 + 64) >= 1)
    {
      uint64_t v14 = 0;
      do
        ZSTD_freeCCtx(*(void *)(v13 + 96 + 8 * v14++));
      while (v14 < *(int *)(v13 + 64));
    }
    pthread_mutex_destroy((pthread_mutex_t *)v13);
    int v15 = *(void (**)(void, uint64_t))(v13 + 80);
    if (v15)
    {
      v15(*(void *)(v13 + 88), v13);
      uint64_t v16 = *(void *)(a1 + 32);
      if (!v16) {
        goto LABEL_40;
      }
    }
    else
    {
      free((void *)v13);
      uint64_t v16 = *(void *)(a1 + 32);
      if (!v16) {
        goto LABEL_40;
      }
    }
    if (*(_DWORD *)(v16 + 72))
    {
      unint64_t v17 = 0;
      int v18 = (void **)(v16 + 104);
      do
      {
        if (*v18)
        {
          uint64_t v19 = *(void (**)(void))(v16 + 88);
          if (v19) {
            v19(*(void *)(v16 + 96));
          }
          else {
            free(*v18);
          }
        }
        ++v17;
        v18 += 2;
      }
      while (v17 < *(unsigned int *)(v16 + 72));
    }
    pthread_mutex_destroy((pthread_mutex_t *)v16);
    long long v20 = *(void (**)(void, uint64_t))(v16 + 88);
    if (v20) {
      v20(*(void *)(v16 + 96), v16);
    }
    else {
      free((void *)v16);
    }
LABEL_40:
    uint64_t v21 = *(void (**)(uint64_t))(a1 + 560);
    uint64_t v22 = *(void *)(a1 + 568);
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 296));
    pthread_cond_destroy((pthread_cond_t *)(a1 + 360));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2776));
    pthread_cond_destroy((pthread_cond_t *)(a1 + 2840));
    if (*(void *)(a1 + 608))
    {
      if (!v21)
      {
        free(*(void **)(a1 + 608));
        uint64_t v23 = *(void **)(a1 + 624);
        if (!v23) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }
      v21(v22);
    }
    uint64_t v23 = *(void **)(a1 + 624);
    if (!v23) {
      goto LABEL_48;
    }
    if (v21)
    {
      v21(v22);
      goto LABEL_48;
    }
LABEL_47:
    free(v23);
LABEL_48:
    unint64_t v24 = *(void *)(a1 + 3016);
    if (!v24) {
      goto LABEL_60;
    }
    unint64_t v25 = *(void (**)(uint64_t))(v24 + 4928);
    uint64_t v26 = *(void *)(v24 + 4936);
    unint64_t v28 = (_OWORD *)(v24 + 32);
    uint64_t v27 = *(void **)(v24 + 32);
    if ((unint64_t)v27 <= v24)
    {
      BOOL v29 = *(void *)(v24 + 40) >= v24;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *unint64_t v28 = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      if (!v27) {
        goto LABEL_55;
      }
    }
    else
    {
      BOOL v29 = 0;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *unint64_t v28 = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      if (!v27) {
        goto LABEL_55;
      }
    }
    if (!v25)
    {
      free(v27);
      if (v29) {
        goto LABEL_60;
      }
      goto LABEL_59;
    }
    v25(v26);
LABEL_55:
    if (v29) {
      goto LABEL_60;
    }
    if (v25)
    {
      ((void (*)(uint64_t, unint64_t))v25)(v26, v24);
      goto LABEL_60;
    }
LABEL_59:
    free((void *)v24);
LABEL_60:
    if (*(void *)(a1 + 272))
    {
      uint64_t v30 = *(void (**)(void))(a1 + 3000);
      if (!v30)
      {
        free(*(void **)(a1 + 272));
        unint64_t v31 = *(void (**)(void, uint64_t))(a1 + 3000);
        if (v31) {
          goto LABEL_64;
        }
        goto LABEL_66;
      }
      v30(*(void *)(a1 + 3008));
    }
    unint64_t v31 = *(void (**)(void, uint64_t))(a1 + 3000);
    if (v31)
    {
LABEL_64:
      v31(*(void *)(a1 + 3008), a1);
      return 0;
    }
LABEL_66:
    free((void *)a1);
  }
  return 0;
}

void ZSTDMT_releaseAllJobResources(uint64_t a1)
{
  unsigned int v2 = 0;
  do
  {
    uint64_t v7 = *(void *)(a1 + 8) + 424 * v2;
    long long v16 = *(_OWORD *)(v7 + 16);
    long long v17 = *(_OWORD *)(v7 + 32);
    long long v18 = *(_OWORD *)(v7 + 48);
    long long v19 = *(_OWORD *)(v7 + 64);
    long long v13 = *(_OWORD *)(v7 + 80);
    long long v14 = *(_OWORD *)(v7 + 96);
    long long v15 = *(_OWORD *)(v7 + 112);
    uint64_t v8 = *(void **)(v7 + 160);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(v7 + 168);
      pthread_mutex_lock((pthread_mutex_t *)v9);
      uint64_t v11 = *(unsigned int *)(v9 + 76);
      if (v11 < *(_DWORD *)(v9 + 72))
      {
        *(_DWORD *)(v9 + 76) = v11 + 1;
        uint64_t v3 = v9 + 16 * v11;
        *(void *)(v3 + 104) = v8;
        *(void *)(v3 + 112) = v10;
        pthread_mutex_unlock((pthread_mutex_t *)v9);
      }
      else
      {
        pthread_mutex_unlock((pthread_mutex_t *)v9);
        size_t v12 = *(void (**)(void, void *))(v9 + 88);
        if (v12) {
          v12(*(void *)(v9 + 96), v8);
        }
        else {
          free(v8);
        }
      }
    }
    uint64_t v4 = *(void *)(a1 + 8) + 424 * v2;
    *(void *)(v4 + 416) = 0;
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_OWORD *)(v4 + 368) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    uint64_t v5 = (_OWORD *)(*(void *)(a1 + 8) + 424 * v2);
    v5[1] = v16;
    v5[2] = v17;
    v5[3] = v18;
    v5[4] = v19;
    uint64_t v6 = (_OWORD *)(*(void *)(a1 + 8) + 424 * v2);
    v6[5] = v13;
    v6[6] = v14;
    v6[7] = v15;
    ++v2;
  }
  while (v2 <= *(_DWORD *)(a1 + 2944));
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 2960) = 1;
}

void *ZSTDMT_sizeof_CCtx(void *result)
{
  if (result)
  {
    unsigned int v1 = result;
    if (*result) {
      uint64_t v2 = 16 * *(void *)(*result + 72) + 8 * *(void *)(*result + 32) + 3648;
    }
    else {
      uint64_t v2 = 3384;
    }
    uint64_t v58 = v2;
    uint64_t v3 = result[2];
    int v4 = *(_DWORD *)(v3 + 72);
    pthread_mutex_lock((pthread_mutex_t *)v3);
    uint64_t v5 = *(unsigned int *)(v3 + 72);
    if (v5)
    {
      if (v5 >= 5)
      {
        uint64_t v8 = v5 & 3;
        if ((v5 & 3) == 0) {
          uint64_t v8 = 4;
        }
        uint64_t v6 = v5 - v8;
        uint64_t v9 = (const double *)(v3 + 144);
        int64x2_t v10 = 0uLL;
        uint64_t v11 = v6;
        int64x2_t v12 = 0uLL;
        do
        {
          long long v13 = v9 - 4;
          unsigned long long v14 = (unsigned __int128)vld2q_f64(v13);
          unsigned long long v15 = (unsigned __int128)vld2q_f64(v9);
          int64x2_t v10 = vaddq_s64((int64x2_t)v14, v10);
          int64x2_t v12 = vaddq_s64((int64x2_t)v15, v12);
          v9 += 8;
          v11 -= 4;
        }
        while (v11);
        uint64_t v7 = vaddvq_s64(vaddq_s64(v12, v10));
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
      }
      uint64_t v16 = v5 - v6;
      long long v17 = (uint64_t *)(v3 + 16 * v6 + 112);
      do
      {
        uint64_t v18 = *v17;
        v17 += 2;
        v7 += v18;
        --v16;
      }
      while (v16);
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v57 = (v4 - 1);
    pthread_mutex_unlock((pthread_mutex_t *)v3);
    int v55 = *((_DWORD *)v1 + 736);
    unint64_t v59 = v1;
    uint64_t v19 = v1[3];
    pthread_mutex_lock((pthread_mutex_t *)v19);
    uint64_t v20 = *(unsigned int *)(v19 + 64);
    unint64_t v56 = (pthread_mutex_t *)v19;
    int v54 = v20;
    uint64_t v21 = 0;
    if (v20)
    {
      uint64_t v22 = (uint64_t *)(v19 + 96);
      do
      {
        uint64_t v29 = *v22;
        if (*v22)
        {
          uint64_t v30 = *(void *)(v29 + 368);
          if (v30 == v29) {
            uint64_t v31 = 0;
          }
          else {
            uint64_t v31 = 3328;
          }
          uint64_t v32 = *(void *)(v29 + 3280);
          if (*(void *)(v29 + 3248)) {
            uint64_t v33 = *(void *)(v29 + 3264);
          }
          else {
            uint64_t v33 = 0;
          }
          if (v32)
          {
            uint64_t v23 = *(void *)(v32 + 32);
            uint64_t v24 = *(void *)(v32 + 40);
            BOOL v25 = v23 == v32;
            uint64_t v26 = 4952;
            if (v25) {
              uint64_t v26 = 0;
            }
            uint64_t v27 = v24 - v23 + v26;
          }
          else
          {
            uint64_t v27 = 0;
          }
          uint64_t v28 = *(void *)(v29 + 376);
          uint64_t v29 = v28 - v30 + v31 + v33 + v27 + ZSTDMT_sizeof_CCtx(*(void *)(v29 + 3320));
        }
        v21 += v29;
        ++v22;
        --v20;
      }
      while (v20);
    }
    pthread_mutex_unlock(v56);
    uint64_t v34 = v59[4];
    int v35 = *(_DWORD *)(v34 + 72);
    pthread_mutex_lock((pthread_mutex_t *)v34);
    uint64_t v36 = *(unsigned int *)(v34 + 72);
    if (v36)
    {
      if (v36 >= 5)
      {
        uint64_t v39 = v36 & 3;
        if ((v36 & 3) == 0) {
          uint64_t v39 = 4;
        }
        uint64_t v37 = v36 - v39;
        unint64_t v40 = (const double *)(v34 + 144);
        int64x2_t v41 = 0uLL;
        uint64_t v42 = v37;
        int64x2_t v43 = 0uLL;
        do
        {
          unint64_t v44 = v40 - 4;
          unsigned long long v45 = (unsigned __int128)vld2q_f64(v44);
          unsigned long long v46 = (unsigned __int128)vld2q_f64(v40);
          int64x2_t v41 = vaddq_s64((int64x2_t)v45, v41);
          int64x2_t v43 = vaddq_s64((int64x2_t)v46, v43);
          v40 += 8;
          v42 -= 4;
        }
        while (v42);
        uint64_t v38 = vaddvq_s64(vaddq_s64(v43, v41));
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v38 = 0;
      }
      uint64_t v47 = v36 - v37;
      unsigned int v48 = (uint64_t *)(v34 + 16 * v37 + 112);
      do
      {
        uint64_t v49 = *v48;
        v48 += 2;
        v38 += v49;
        --v47;
      }
      while (v47);
    }
    else
    {
      uint64_t v38 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)v34);
    uint64_t v50 = v59[377];
    if (v50)
    {
      uint64_t v51 = *(void *)(v50 + 32);
      uint64_t v52 = *(void *)(v50 + 40);
      BOOL v25 = v51 == v50;
      uint64_t v53 = 4952;
      if (v25) {
        uint64_t v53 = 0;
      }
      uint64_t v50 = v52 - v51 + v53;
    }
    return (void *)(v58
                    + v7
                    + 424 * (v55 + 1)
                    + 8 * (v54 - 1)
                    + v21
                    + 16 * ((v35 - 1) + v57)
                    + v38
                    + v50
                    + v59[35]);
  }
  return result;
}

__n128 ZSTDMT_initCStream_internal(uint64_t a1, const void *a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = *(_DWORD *)(a6 + 76);
  if (v14 == *(_DWORD *)(a1 + 116))
  {
    unint64_t v15 = *(void *)(a6 + 80);
    if (v15 - 1 < 0xFFFFF)
    {
LABEL_3:
      uint64_t v16 = 0x100000;
      goto LABEL_38;
    }
LABEL_36:
    if (v15 < 0x40000001) {
      goto LABEL_39;
    }
    uint64_t v16 = 0x40000000;
LABEL_38:
    *(void *)(a6 + 80) = v16;
LABEL_39:
    if (!*(_DWORD *)(a1 + 2960))
    {
      int v34 = a4;
      for (unsigned int i = *(_DWORD *)(a1 + 2948); i < *(_DWORD *)(a1 + 2952); *(_DWORD *)(a1 + 2948) = i)
      {
        unsigned int v36 = *(_DWORD *)(a1 + 2944) & i;
        pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 8) + 424 * v36 + 16));
        for (uint64_t j = *(void *)(a1 + 8);
              *(void *)(j + 424 * v36) < *(void *)(j + 424 * v36 + 200);
              uint64_t j = *(void *)(a1 + 8))
        {
          pthread_cond_wait((pthread_cond_t *)(j + 424 * v36 + 80), (pthread_mutex_t *)(j + 424 * v36 + 16));
        }
        pthread_mutex_unlock((pthread_mutex_t *)(j + 424 * v36 + 16));
        unsigned int i = *(_DWORD *)(a1 + 2948) + 1;
      }
      ZSTDMT_releaseAllJobResources(a1);
      *(_DWORD *)(a1 + 2960) = 1;
      a4 = v34;
    }
    long long v38 = *(_OWORD *)a6;
    long long v39 = *(_OWORD *)(a6 + 32);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(a1 + 72) = v39;
    *(_OWORD *)(a1 + 40) = v38;
    long long v40 = *(_OWORD *)(a6 + 48);
    long long v41 = *(_OWORD *)(a6 + 64);
    long long v42 = *(_OWORD *)(a6 + 96);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a6 + 80);
    *(_OWORD *)(a1 + 136) = v42;
    *(_OWORD *)(a1 + 88) = v40;
    *(_OWORD *)(a1 + 104) = v41;
    long long v43 = *(_OWORD *)(a6 + 112);
    long long v44 = *(_OWORD *)(a6 + 128);
    long long v45 = *(_OWORD *)(a6 + 144);
    *(void *)(a1 + 200) = *(void *)(a6 + 160);
    *(_OWORD *)(a1 + 168) = v44;
    *(_OWORD *)(a1 + 184) = v45;
    *(_OWORD *)(a1 + 152) = v43;
    *(void *)(a1 + 2968) = a7;
    unint64_t v46 = *(void *)(a1 + 3016);
    if (a2)
    {
      if (!v46) {
        goto LABEL_68;
      }
      uint64_t v47 = *(void (**)(uint64_t))(v46 + 4928);
      uint64_t v48 = *(void *)(v46 + 4936);
      uint64_t v50 = (_OWORD *)(v46 + 32);
      uint64_t v49 = *(void **)(v46 + 32);
      if ((unint64_t)v49 <= v46)
      {
        BOOL v51 = *(void *)(v46 + 40) >= v46;
        *(_OWORD *)(v46 + 64) = 0u;
        *(_OWORD *)(v46 + 80) = 0u;
        *uint64_t v50 = 0u;
        *(_OWORD *)(v46 + 48) = 0u;
        if (!v49) {
          goto LABEL_57;
        }
      }
      else
      {
        BOOL v51 = 0;
        *(_OWORD *)(v46 + 64) = 0u;
        *(_OWORD *)(v46 + 80) = 0u;
        *uint64_t v50 = 0u;
        *(_OWORD *)(v46 + 48) = 0u;
        if (!v49) {
          goto LABEL_57;
        }
      }
      if (!v47)
      {
        free(v49);
        if (v51) {
          goto LABEL_68;
        }
        goto LABEL_67;
      }
      v47(v48);
LABEL_57:
      if (v51) {
        goto LABEL_68;
      }
      if (v47)
      {
        ((void (*)(uint64_t, unint64_t))v47)(v48, v46);
        goto LABEL_68;
      }
LABEL_67:
      free((void *)v46);
LABEL_68:
      long long v129 = *(_OWORD *)(a1 + 2992);
      uint64_t v130 = *(void *)(a1 + 3008);
      memset(v131, 0, sizeof(v131));
      long long v137 = 0u;
      long long v138 = 0u;
      long long v135 = 0u;
      long long v136 = 0u;
      __n128 v133 = 0u;
      long long v134 = 0u;
      *(long long *)((char *)v131 + 4) = *(_OWORD *)(a6 + 4);
      v131[1] = *(_OWORD *)(a6 + 16);
      long long v132 = 0u;
      LODWORD(v132) = 1;
      long long v139 = *(_OWORD *)(a1 + 2992);
      uint64_t v140 = *(void *)(a1 + 3008);
      CDict_advanced2 = ZSTD_createCDict_advanced2(a2, a3, 0, a4, v131, (uint64_t)&v129);
      *(void *)(a1 + 3016) = CDict_advanced2;
      *(void *)(a1 + 3024) = CDict_advanced2;
      if (!CDict_advanced2) {
        return result;
      }
      int v58 = *(_DWORD *)(a6 + 88);
      unsigned int v59 = *(_DWORD *)(a6 + 28);
      if (v58)
      {
LABEL_70:
        int v60 = 9 - v58;
        if (v58 < 2)
        {
          int v61 = 0;
          int v62 = *(_DWORD *)(a6 + 96);
          if (!v62) {
            goto LABEL_89;
          }
          goto LABEL_79;
        }
LABEL_78:
        int v61 = *(_DWORD *)(a6 + 4) - v60;
        int v62 = *(_DWORD *)(a6 + 96);
        if (!v62) {
          goto LABEL_89;
        }
LABEL_79:
        unsigned int v63 = *(_DWORD *)(a6 + 4);
        if (v59 > 5) {
          int v64 = 2;
        }
        else {
          int v64 = 3;
        }
        unsigned int v65 = *(_DWORD *)(a6 + 8) + v64;
        if (v65 >= 0x1E) {
          unsigned int v65 = 30;
        }
        if (v65 <= 0x15) {
          unsigned int v65 = 21;
        }
        unsigned int v66 = v65 - 2;
        if (v63 >= v66) {
          unsigned int v63 = v66;
        }
        int v61 = v63 - v60;
LABEL_89:
        uint64_t v67 = 1 << v61;
        if (v61) {
          unint64_t v68 = 1 << v61;
        }
        else {
          unint64_t v68 = 0;
        }
        *(void *)(a1 + 216) = v68;
        unint64_t v69 = *(void *)(a6 + 80);
        *(void *)(a1 + 208) = v69;
        if (v69)
        {
LABEL_106:
          if (*(_DWORD *)(a6 + 92))
          {
            *(void *)(a1 + 2920) = 0;
            *(void *)(a1 + 2928) = ~(-1 << ((__clz(v69 >> 20) ^ 0x1F) + 20));
            *(void *)(a1 + 2936) = 0xF5507FE35F91F8CBLL;
          }
          int v128 = a4;
          if (v69 < v68)
          {
            *(void *)(a1 + 208) = v68;
            unint64_t v69 = v67;
          }
          unint64_t v72 = *(pthread_mutex_t **)(a1 + 16);
          unint64_t v73 = (0x20000 - v69) >> 11;
          if (v69 >= 0x20000) {
            unint64_t v73 = 0;
          }
          uint64_t v74 = v69 + (v69 >> 8) + v73;
          pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
          v72[1].__sig = v74;
          pthread_mutex_unlock(v72);
          if (*(_DWORD *)(a1 + 136)) {
            unint64_t v75 = 1 << *(_DWORD *)(a1 + 44);
          }
          else {
            unint64_t v75 = 0;
          }
          unint64_t v76 = *(void *)(a1 + 208);
          uint64_t v77 = 2;
          if (*(void *)(a1 + 216)) {
            uint64_t v77 = 3;
          }
          LODWORD(v78) = *(_DWORD *)(a1 + 116);
          if ((int)v78 <= 1) {
            uint64_t v78 = 1;
          }
          else {
            uint64_t v78 = v78;
          }
          unint64_t v79 = v76 * v78;
          if (v75 <= v79) {
            unint64_t v75 = v79;
          }
          size_t v80 = v75 + v77 * v76;
          if (*(void *)(a1 + 280) >= v80)
          {
LABEL_129:
            *(void *)(a1 + 288) = 0;
            *(_OWORD *)(a1 + 2948) = 0u;
            *(_OWORD *)(a1 + 2976) = 0u;
            *(_OWORD *)(a1 + 232) = 0u;
            *(_OWORD *)(a1 + 248) = 0u;
            *(void *)(a1 + 264) = 0;
            unsigned int v84 = *(pthread_mutex_t **)(a1 + 32);
            long long v85 = *(_OWORD *)(a6 + 144);
            long long v138 = *(_OWORD *)(a6 + 128);
            long long v139 = v85;
            uint64_t v140 = *(void *)(a6 + 160);
            long long v86 = *(_OWORD *)(a6 + 80);
            long long v134 = *(_OWORD *)(a6 + 64);
            long long v135 = v86;
            long long v87 = *(_OWORD *)(a6 + 112);
            long long v136 = *(_OWORD *)(a6 + 96);
            long long v137 = v87;
            long long v88 = *(_OWORD *)(a6 + 16);
            v131[0] = *(_OWORD *)a6;
            v131[1] = v88;
            __n128 v89 = *(__n128 *)(a6 + 48);
            long long v132 = *(_OWORD *)(a6 + 32);
            __n128 v133 = v89;
            int v90 = v136;
            if (!v136)
            {
              unsigned int v91 = 0;
              unsigned int v92 = 0;
              unsigned int v93 = 0;
              long long v136 = 0uLL;
              *(void *)&long long v137 = 0;
              *(_DWORD *)(a1 + 2768) = 0;
              if (DWORD1(v132))
              {
LABEL_139:
                *(void *)(a1 + 2680) = 0;
                *(_OWORD *)(a1 + 2688) = xmmword_1889AD000;
                *(_OWORD *)(a1 + 2704) = xmmword_1889B9F60;
                *(_OWORD *)(a1 + 2720) = 0u;
                *(_OWORD *)(a1 + 2736) = 0u;
                *(_OWORD *)(a1 + 2752) = 0u;
              }
LABEL_140:
              if (!v90)
              {
LABEL_192:
                *(void *)(a1 + 568) = v140;
                long long v114 = v139;
                *(_OWORD *)(a1 + 536) = v138;
                *(_OWORD *)(a1 + 552) = v114;
                long long v115 = v135;
                *(_OWORD *)(a1 + 472) = v134;
                *(_OWORD *)(a1 + 488) = v115;
                long long v116 = v137;
                *(_OWORD *)(a1 + 504) = v136;
                *(_OWORD *)(a1 + 520) = v116;
                long long v117 = v131[1];
                *(_OWORD *)(a1 + 408) = v131[0];
                *(_OWORD *)(a1 + 424) = v117;
                __n128 result = v133;
                *(_OWORD *)(a1 + 440) = v132;
                *(__n128 *)(a1 + 456) = result;
                *(void *)(a1 + 488) = v76;
                return result;
              }
              unint64_t v125 = (unint64_t)a2;
              long long v94 = (uint64_t (*)(uint64_t, uint64_t))v139;
              uint64_t v123 = v140;
              unsigned int v95 = v93 - v92;
              int v118 = *(_DWORD *)(a1 + 508);
              int v96 = *(_DWORD *)(a1 + 512);
              int64_t v119 = (void (*)(void))*((void *)&v139 + 1);
              uint64_t sizea = 1 << (v93 - v92);
              unint64_t v97 = a3;
              unint64_t v98 = 12 * (v76 / v91);
              pthread_mutex_lock(v84);
              v84[1].__sig = v98;
              unint64_t v99 = v97;
              pthread_mutex_unlock(v84);
              *(void *)(a1 + 584) = "";
              *(void *)(a1 + 592) = "";
              result.n128_u64[0] = 0x100000001;
              *(void *)(a1 + 600) = 0x100000001;
              *(void *)(a1 + 576) = "Mnum_stages";
              int v100 = *(void **)(a1 + 608);
              if (v100)
              {
                if (*(_DWORD *)(a1 + 508) >= v93)
                {
LABEL_162:
                  uint64_t v104 = *(void **)(a1 + 624);
                  if (v104 && v118 - v96 >= v95)
                  {
                    unint64_t v105 = v125;
                    if (!v100) {
                      return result;
                    }
LABEL_174:
                    if (v104)
                    {
                      uint64_t v106 = (unint64_t *)(a1 + 576);
                      bzero(v100, 8 << v93);
                      bzero(*(void **)(a1 + 624), sizea);
                      *(_DWORD *)(a1 + 616) = 0;
                      if (v99 && v128 == 1)
                      {
                        unint64_t v107 = v105 + v99;
                        if (*v106 == v105)
                        {
                          uint64_t v108 = *(void *)(a1 + 592);
                          unsigned int v110 = *(_DWORD *)(a1 + 604);
                          LODWORD(v109) = *(_DWORD *)(a1 + 600);
                        }
                        else
                        {
                          uint64_t v108 = *(void *)(a1 + 584);
                          uint64_t v109 = *v106 - v108;
                          unsigned int v110 = *(_DWORD *)(a1 + 600);
                          *(_DWORD *)(a1 + 604) = v110;
                          *(_DWORD *)(a1 + 600) = v109;
                          *(void *)(a1 + 592) = v108;
                          *(void *)(a1 + 584) = v105 - v109;
                          if (v109 - v110 <= 7)
                          {
                            *(_DWORD *)(a1 + 604) = v109;
                            unsigned int v110 = v109;
                          }
                        }
                        *uint64_t v106 = v107;
                        if (v107 > v108 + (unint64_t)v110 && v108 + (unint64_t)v109 > v105)
                        {
                          uint64_t v111 = v107 - v108;
                          if (v111 > v109) {
                            LODWORD(v111) = v109;
                          }
                          *(_DWORD *)(a1 + 604) = v111;
                        }
                        ZSTD_ldm_fillHashTable(a1 + 576, v105, v105 + v99, &v136);
                        if (v133.n128_u32[0]) {
                          int v112 = 0;
                        }
                        else {
                          int v112 = v107 - *(_DWORD *)(a1 + 584);
                        }
                        *(_DWORD *)(a1 + 616) = v112;
                      }
                      long long v113 = *(_OWORD *)(a1 + 592);
                      *(_OWORD *)(a1 + 2888) = *(_OWORD *)v106;
                      *(_OWORD *)(a1 + 2904) = v113;
                      goto LABEL_192;
                    }
                    return result;
                  }
                  if (v104)
                  {
                    if (!v119)
                    {
                      free(*(void **)(a1 + 624));
                      if (v94)
                      {
LABEL_170:
                        uint64_t v104 = (void *)v94(v123, sizea);
                        unint64_t v105 = v125;
                        *(void *)(a1 + 624) = v104;
                        int v100 = *(void **)(a1 + 608);
                        if (!v100) {
                          return result;
                        }
                        goto LABEL_174;
                      }
LABEL_173:
                      uint64_t v104 = malloc_type_malloc(sizea, 0x26AA08A0uLL);
                      unint64_t v105 = v125;
                      *(void *)(a1 + 624) = v104;
                      int v100 = *(void **)(a1 + 608);
                      if (!v100) {
                        return result;
                      }
                      goto LABEL_174;
                    }
                    ((void (*)(uint64_t, void))v119)(v123, *(void *)(a1 + 624));
                  }
                  if (v94) {
                    goto LABEL_170;
                  }
                  goto LABEL_173;
                }
                if (!v119)
                {
                  free(v100);
                  if (v94) {
                    goto LABEL_146;
                  }
                  goto LABEL_160;
                }
                v119(v123);
              }
              if (v94)
              {
LABEL_146:
                unint64_t v101 = (void *)v94(v123, 8 << v93);
LABEL_161:
                int v100 = v101;
                *(void *)(a1 + 608) = v101;
                goto LABEL_162;
              }
LABEL_160:
              unint64_t v101 = malloc_type_malloc(8 << v93, 0x26AA08A0uLL);
              goto LABEL_161;
            }
            unsigned int v92 = DWORD2(v136);
            unsigned int v91 = HIDWORD(v136);
            if (!HIDWORD(v136)) {
              unsigned int v91 = 64;
            }
            unsigned int v93 = DWORD1(v136);
            DWORD1(v137) = DWORD1(v131[0]);
            HIDWORD(v136) = v91;
            if (DWORD1(v136))
            {
              if (v137) {
                goto LABEL_134;
              }
            }
            else
            {
              if ((DWORD1(v131[0]) - 7) <= 6) {
                unsigned int v93 = 6;
              }
              else {
                unsigned int v93 = DWORD1(v131[0]) - 7;
              }
              DWORD1(v136) = v93;
              if (v137) {
                goto LABEL_134;
              }
            }
            unsigned int v102 = DWORD1(v131[0]) - v93;
            if (DWORD1(v131[0]) < v93) {
              unsigned int v102 = 0;
            }
            LODWORD(v137) = v102;
LABEL_134:
            if (!DWORD2(v136)) {
              unsigned int v92 = 3;
            }
            if (v92 >= v93) {
              unsigned int v92 = v93;
            }
            DWORD2(v136) = v92;
            *(_DWORD *)(a1 + 2768) = 0;
            if (DWORD1(v132)) {
              goto LABEL_139;
            }
            goto LABEL_140;
          }
          if (*(void *)(a1 + 272))
          {
            uint64_t v81 = *(void (**)(void))(a1 + 3000);
            if (!v81)
            {
              free(*(void **)(a1 + 272));
              int v82 = *(uint64_t (**)(void, size_t))(a1 + 2992);
              if (v82)
              {
LABEL_127:
                uint64_t v83 = v82(*(void *)(a1 + 3008), v80);
                *(void *)(a1 + 272) = v83;
                if (v83)
                {
LABEL_128:
                  *(void *)(a1 + 280) = v80;
                  unint64_t v76 = *(void *)(a1 + 208);
                  goto LABEL_129;
                }
LABEL_158:
                *(void *)(a1 + 280) = 0;
                return result;
              }
LABEL_157:
              uint64_t v103 = malloc_type_malloc(v80, 0x26AA08A0uLL);
              *(void *)(a1 + 272) = v103;
              if (v103) {
                goto LABEL_128;
              }
              goto LABEL_158;
            }
            v81(*(void *)(a1 + 3008));
          }
          int v82 = *(uint64_t (**)(void, size_t))(a1 + 2992);
          if (v82) {
            goto LABEL_127;
          }
          goto LABEL_157;
        }
        if (v62)
        {
          if (v59 > 5) {
            int v70 = 2;
          }
          else {
            int v70 = 3;
          }
          unsigned int v71 = v70 + *(_DWORD *)(a6 + 8);
          if (v71 < 0x15)
          {
            LOBYTE(v71) = 21;
LABEL_105:
            unint64_t v69 = 1 << v71;
            *(void *)(a1 + 208) = 1 << v71;
            goto LABEL_106;
          }
        }
        else
        {
          unsigned int v71 = *(_DWORD *)(a6 + 4) + 2;
          if (v71 < 0x14)
          {
            LOBYTE(v71) = 20;
            goto LABEL_105;
          }
        }
        if (v71 >= 0x1E) {
          LOBYTE(v71) = 30;
        }
        goto LABEL_105;
      }
LABEL_76:
      if (v59 - 5 >= 5)
      {
        int v60 = 3;
        int v61 = *(_DWORD *)(a6 + 4) - 3;
        int v62 = *(_DWORD *)(a6 + 96);
        if (!v62) {
          goto LABEL_89;
        }
        goto LABEL_79;
      }
      int v60 = dword_1889BCBF0[v59 - 5];
      goto LABEL_78;
    }
    if (!v46)
    {
LABEL_75:
      *(void *)(a1 + 3016) = 0;
      *(void *)(a1 + 3024) = a5;
      int v58 = *(_DWORD *)(a6 + 88);
      unsigned int v59 = *(_DWORD *)(a6 + 28);
      if (v58) {
        goto LABEL_70;
      }
      goto LABEL_76;
    }
    uint64_t v52 = *(void (**)(uint64_t))(v46 + 4928);
    uint64_t v53 = *(void *)(v46 + 4936);
    int v55 = (_OWORD *)(v46 + 32);
    int v54 = *(void **)(v46 + 32);
    if ((unint64_t)v54 <= v46)
    {
      BOOL v56 = *(void *)(v46 + 40) >= v46;
      *(_OWORD *)(v46 + 64) = 0u;
      *(_OWORD *)(v46 + 80) = 0u;
      _OWORD *v55 = 0u;
      *(_OWORD *)(v46 + 48) = 0u;
      if (!v54) {
        goto LABEL_63;
      }
    }
    else
    {
      BOOL v56 = 0;
      *(_OWORD *)(v46 + 64) = 0u;
      *(_OWORD *)(v46 + 80) = 0u;
      _OWORD *v55 = 0u;
      *(_OWORD *)(v46 + 48) = 0u;
      if (!v54) {
        goto LABEL_63;
      }
    }
    if (!v52)
    {
      free(v54);
      if (v56) {
        goto LABEL_75;
      }
      goto LABEL_74;
    }
    v52(v53);
LABEL_63:
    if (v56) {
      goto LABEL_75;
    }
    if (v52)
    {
      ((void (*)(uint64_t, unint64_t))v52)(v53, v46);
      goto LABEL_75;
    }
LABEL_74:
    free((void *)v46);
    goto LABEL_75;
  }
  if (POOL_resize(*(void *)a1, *(unsigned int *)(a6 + 76))) {
    return result;
  }
  LODWORD(v129) = v14 + 2;
  uint64_t v18 = (*(_DWORD *)(a1 + 2944) + 1);
  if (v14 + 2 > v18)
  {
    unint64_t v122 = a3;
    uint64_t v19 = *(char **)(a1 + 8);
    if (v19)
    {
      int v126 = a4;
      uint64_t v124 = a2;
      uint64_t v20 = *(void (**)(size_t, char *))(a1 + 3000);
      size_t size = *(void *)(a1 + 3008);
      if (*(_DWORD *)(a1 + 2944) != -1)
      {
        uint64_t v21 = (pthread_cond_t *)(v19 + 80);
        do
        {
          pthread_mutex_destroy((pthread_mutex_t *)&v21[-2].__opaque[24]);
          pthread_cond_destroy(v21);
          uint64_t v21 = (pthread_cond_t *)((char *)v21 + 424);
          --v18;
        }
        while (v18);
      }
      if (v20) {
        v20(size, v19);
      }
      else {
        free(v19);
      }
      a2 = v124;
      a4 = v126;
    }
    *(_DWORD *)(a1 + 2944) = 0;
    v131[0] = *(_OWORD *)(a1 + 2992);
    *(void *)&v131[1] = *(void *)(a1 + 3008);
    JobsTable = ZSTDMT_createJobsTable((unsigned int *)&v129, (uint64_t)v131);
    *(void *)(a1 + 8) = JobsTable;
    if (!JobsTable) {
      return result;
    }
    *(_DWORD *)(a1 + 2944) = v129 - 1;
    a3 = v122;
  }
  uint64_t v23 = ZSTDMT_expandBufferPool(*(pthread_mutex_t **)(a1 + 16), v14);
  *(void *)(a1 + 16) = v23;
  if (v23)
  {
    int v127 = a4;
    unint64_t v24 = a3;
    uint64_t v25 = *(void *)(a1 + 24);
    if (!v25)
    {
      *(void *)(a1 + 24) = 0;
      return result;
    }
    int v26 = *(_DWORD *)(v25 + 64);
    if (v26 >= v14) {
      goto LABEL_195;
    }
    v131[0] = *(_OWORD *)(v25 + 72);
    *(void *)&v131[1] = *(void *)(v25 + 88);
    if (v26 >= 1)
    {
      uint64_t v27 = 0;
      do
        ZSTD_freeCCtx(*(void *)(v25 + 96 + 8 * v27++));
      while (v27 < *(int *)(v25 + 64));
    }
    pthread_mutex_destroy((pthread_mutex_t *)v25);
    uint64_t v28 = *(void (**)(void, uint64_t))(v25 + 80);
    if (v28) {
      v28(*(void *)(v25 + 88), v25);
    }
    else {
      free((void *)v25);
    }
    long long v129 = v131[0];
    uint64_t v130 = *(void *)&v131[1];
    uint64_t v29 = ZSTDMT_createCCtxPool(v14, &v129);
    *(void *)(a1 + 24) = v29;
    if (v29)
    {
LABEL_195:
      uint64_t v30 = ZSTDMT_expandBufferPool(*(pthread_mutex_t **)(a1 + 32), v14);
      *(void *)(a1 + 32) = v30;
      if (v30)
      {
        int v31 = v14 & ~(v14 >> 31);
        BOOL v32 = v31 > 0xC8;
        if (v31 >= 200) {
          int v31 = 200;
        }
        if (!v32 && v14 >= 0) {
          int v31 = v14;
        }
        *(_DWORD *)(a1 + 116) = v31;
        a3 = v24;
        a4 = v127;
        unint64_t v15 = *(void *)(a6 + 80);
        if (v15 - 1 < 0xFFFFF) {
          goto LABEL_3;
        }
        goto LABEL_36;
      }
    }
  }
  return result;
}

uint64_t ZSTDMT_nextInputSizeHint(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 208);
  uint64_t v2 = *(void *)(a1 + 264);
  if (v1 == v2) {
    uint64_t v2 = 0;
  }
  return v1 - v2;
}

unint64_t HUF_readDTableX1_wksp_bmi2(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v172 = 0;
  if (a5 < 0x3E4) {
    return -44;
  }
  unint64_t result = HUF_readStats_wksp((unsigned __int8 *)(a4 + 740), 0x100uLL, a4, &v172, (_DWORD *)&v172 + 1, a2, a3, (unsigned __int16 *)(a4 + 128), 0x164uLL);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  int v9 = *a1;
  uint64_t v10 = HIDWORD(v172);
  if (HIDWORD(v172) > *a1 + 1) {
    return -44;
  }
  *(_WORD *)a1 = v9;
  *((unsigned char *)a1 + 2) = v10;
  *((unsigned char *)a1 + 3) = HIBYTE(v9);
  uint64_t v11 = v172;
  if ((v10 & 0x80000000) == 0)
  {
    int v12 = 0;
    uint64_t v13 = v10 + 1;
    int v14 = (_DWORD *)(a4 + 64);
    do
    {
      int v15 = *(v14 - 16);
      *v14++ = v12;
      v12 += v15;
      --v13;
    }
    while (v13);
  }
  if ((int)v11 < 4)
  {
    LODWORD(v16) = 0;
    if ((int)v11 <= 0) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  unint64_t v16 = 0;
  do
  {
    uint64_t v17 = 4 * *(unsigned __int8 *)(a4 + v16 + 740);
    uint64_t v18 = a4 + 64;
    uint64_t v19 = *(unsigned int *)(a4 + 64 + v17);
    *(_DWORD *)(v18 + v17) = v19 + 1;
    uint64_t v20 = a4 + 484;
    *(unsigned char *)(v20 + v19) = v16;
    uint64_t v21 = 4 * *(unsigned __int8 *)(a4 + v16 + 741);
    uint64_t v22 = *(unsigned int *)(a4 + 64 + v21);
    *(_DWORD *)(v18 + v21) = v22 + 1;
    *(unsigned char *)(v20 + v22) = v16 + 1;
    uint64_t v23 = 4 * *(unsigned __int8 *)(a4 + v16 + 742);
    uint64_t v24 = *(unsigned int *)(a4 + 64 + v23);
    *(_DWORD *)(v18 + v23) = v24 + 1;
    *(unsigned char *)(v20 + v24) = v16 + 2;
    uint64_t v25 = 4 * *(unsigned __int8 *)(a4 + v16 + 743);
    uint64_t v26 = *(unsigned int *)(a4 + 64 + v25);
    *(_DWORD *)(v18 + v25) = v26 + 1;
    *(unsigned char *)(v20 + v26) = v16 + 3;
    v16 += 4;
  }
  while (v16 < (v11 - 3));
  if ((int)v16 < (int)v11)
  {
LABEL_14:
    unint64_t v16 = v16;
    do
    {
      uint64_t v27 = a4 + 4 * *(unsigned __int8 *)(a4 + 740 + v16);
      uint64_t v28 = *(unsigned int *)(v27 + 64);
      *(_DWORD *)(v27 + 64) = v28 + 1;
      *(unsigned char *)(a4 + v28 + 484) = v16++;
    }
    while (v11 != v16);
  }
LABEL_16:
  uint64_t v29 = (v10 + 1);
  if (v29 >= 2)
  {
    int v30 = 0;
    int v31 = *(_DWORD *)a4;
    BOOL v32 = a1 + 1;
    uint64_t v33 = a4 + 484;
    uint64_t v171 = a1 + 17;
    uint64_t v34 = 1;
    while (1)
    {
      uint64_t v35 = *(unsigned int *)(a4 + 4 * v34);
      int v36 = 1 << v34 >> 1;
      unsigned int v37 = v29 - v34;
      switch(v36)
      {
        case 1:
          if ((int)v35 < 1) {
            goto LABEL_18;
          }
          if (v35 < 8
            || ((unint64_t)v32 + 2 * v30 < v33 + v31 + v35
              ? (BOOL v38 = v33 + v31 >= (unint64_t)v32 + 2 * v30 + 2 * v35)
              : (BOOL v38 = 1),
                !v38))
          {
            uint64_t v39 = 0;
            uint64_t v72 = v30;
            goto LABEL_70;
          }
          if (v35 >= 0x20)
          {
            uint64_t v39 = v35 & 0x7FFFFFE0;
            int8x16_t v8 = vdupq_n_s8(v37);
            uint64_t v108 = (long long *)(v33 + v31);
            uint64_t v109 = (char *)a1 + 2 * v30 + 36;
            uint64_t v110 = v35 & 0xFFFFFFE0;
            do
            {
              long long v111 = *v108;
              v173.val[0] = (int8x16_t)v108[1];
              v108 += 2;
              int v112 = v109 - 32;
              vst2q_s8(v112, *(int8x16x2_t *)(&v8 - 1));
              v173.val[1] = v8;
              vst2q_s8(v109, v173);
              v109 += 64;
              v110 -= 32;
            }
            while (v110);
            if (v39 == v35) {
              goto LABEL_18;
            }
            if ((v35 & 0x18) == 0)
            {
              uint64_t v72 = v39 + v30;
LABEL_70:
              unint64_t v73 = (char *)a1 + 2 * v72 + 5;
              uint64_t v74 = (char *)(v33 + v39 + v31);
              uint64_t v75 = v35 - v39;
              do
              {
                char v76 = *v74++;
                *(v73 - 1) = v76;
                *unint64_t v73 = v37;
                v73 += 2;
                --v75;
              }
              while (v75);
              goto LABEL_18;
            }
          }
          else
          {
            uint64_t v39 = 0;
          }
          uint64_t v113 = v39;
          uint64_t v39 = v35 & 0xFFFFFFF8;
          int8x8_t v114 = vdup_n_s8(v37);
          uint64_t v72 = v39 + v30;
          long long v115 = (uint64_t *)(v33 + v113 + v31);
          uint64_t v116 = v113 - v39;
          long long v117 = (char *)v32 + 2 * v113 + 2 * v30;
          do
          {
            uint64_t v118 = *v115++;
            uint64_t v119 = v118;
            vst2_s8(v117, *(int8x8x2_t *)(&v114 - 1));
            v117 += 16;
            v116 += 8;
          }
          while (v116);
          if (v39 != v35) {
            goto LABEL_70;
          }
LABEL_18:
          v31 += v35;
          v30 += v35 * v36;
          if (++v34 == v29) {
            return result;
          }
          break;
        case 2:
          if ((int)v35 < 1) {
            goto LABEL_18;
          }
          if (v35 < 8
            || ((unint64_t)v32 + 2 * v30 < v33 + v31 + v35
              ? (BOOL v40 = v33 + v31 >= (unint64_t)&v32[v35] + 2 * v30)
              : (BOOL v40 = 1),
                !v40))
          {
            uint64_t v41 = 0;
            uint64_t v77 = v30;
            goto LABEL_74;
          }
          if (v35 >= 0x20)
          {
            uint64_t v41 = v35 & 0x7FFFFFE0;
            int8x16_t v8 = vdupq_n_s8(v37);
            uint64_t v120 = (char *)v171 + 2 * v30;
            uint64_t v121 = (long long *)(v33 + v31);
            uint64_t v122 = v35 & 0xFFFFFFE0;
            do
            {
              long long v123 = *v121;
              v184.val[0] = (int8x16_t)v121[1];
              v121 += 2;
              long long v124 = v123;
              int8x16_t v125 = v8;
              v184.val[1] = v8;
              v184.val[2] = v184.val[0];
              v184.val[3] = v8;
              int v126 = v120 - 64;
              vst4q_s8(v126, *(int8x16x4_t *)(&v8 - 1));
              vst4q_s8(v120, v184);
              v120 += 128;
              v122 -= 32;
            }
            while (v122);
            if (v41 == v35) {
              goto LABEL_18;
            }
            if ((v35 & 0x18) == 0)
            {
              uint64_t v77 = v30 + 2 * v41;
LABEL_74:
              uint64_t v78 = v35 - v41;
              unint64_t v79 = (char *)(v33 + v41 + v31);
              size_t v80 = (char *)a1 + 2 * v77 + 7;
              do
              {
                char v81 = *v79++;
                *(v80 - 3) = v81;
                *(v80 - 2) = v37;
                *(v80 - 1) = v81;
                *size_t v80 = v37;
                v80 += 4;
                --v78;
              }
              while (v78);
              goto LABEL_18;
            }
          }
          else
          {
            uint64_t v41 = 0;
          }
          uint64_t v127 = v41;
          uint64_t v41 = v35 & 0xFFFFFFF8;
          uint64_t v77 = v30 + 2 * v41;
          int8x8_t v128 = vdup_n_s8(v37);
          long long v129 = (char *)&v32[v127] + 2 * v30;
          uint64_t v130 = (uint64_t *)(v33 + v127 + v31);
          uint64_t v131 = v127 - v41;
          do
          {
            uint64_t v132 = *v130++;
            uint64_t v133 = v132;
            uint64_t v134 = v132;
            int8x8_t v135 = v128;
            vst4_s8(v129, *(int8x8x4_t *)(&v128 - 1));
            v129 += 32;
            v131 += 8;
          }
          while (v131);
          if (v41 != v35) {
            goto LABEL_74;
          }
          goto LABEL_18;
        case 4:
          if ((int)v35 < 1) {
            goto LABEL_18;
          }
          unsigned int v57 = (v29 - v34) << 8;
          if (v35 < 8
            || (unint64_t)v32 + 2 * v30 < v33 + v31 + v35
            && v33 + v31 < (unint64_t)&v32[2 * v35] + 2 * v30)
          {
            uint64_t v58 = 0;
            uint64_t v59 = v30;
            goto LABEL_58;
          }
          int8x16_t v82 = (int8x16_t)vdupq_n_s32(v57);
          if (v35 >= 0x10)
          {
            uint64_t v58 = v35 & 0x7FFFFFF0;
            long long v136 = (_OWORD *)((char *)v32 + 2 * v30);
            long long v137 = (int8x16_t *)(v33 + v31);
            uint64_t v138 = v35 & 0xFFFFFFF0;
            do
            {
              int8x16_t v139 = *v137++;
              int8x16_t v140 = vorrq_s8(v82, vqtbl1q_s8(v139, (int8x16_t)xmmword_1889B9F10));
              int8x16_t v141 = vorrq_s8(v82, vqtbl1q_s8(v139, (int8x16_t)xmmword_1889B9EE0));
              int8x16_t v142 = vorrq_s8(v82, vqtbl1q_s8(v139, (int8x16_t)xmmword_1889B9EF0));
              int8x16_t v143 = vorrq_s8(v82, vqtbl1q_s8(v139, (int8x16_t)xmmword_1889B9F00));
              *(void *)&long long v144 = v143.u32[2];
              *((void *)&v144 + 1) = v143.u32[3];
              long long v145 = v144;
              *(void *)&long long v144 = v142.u32[2];
              *((void *)&v144 + 1) = v142.u32[3];
              long long v146 = v144;
              *(void *)&long long v144 = v141.u32[2];
              *((void *)&v144 + 1) = v141.u32[3];
              long long v147 = v144;
              *(void *)&long long v144 = v140.u32[2];
              *((void *)&v144 + 1) = v140.u32[3];
              long long v148 = v144;
              *(void *)&long long v144 = v143.u32[0];
              *((void *)&v144 + 1) = v143.u32[1];
              long long v149 = v144;
              *(void *)&long long v144 = v142.u32[0];
              *((void *)&v144 + 1) = v142.u32[1];
              long long v150 = v144;
              *(void *)&long long v144 = v141.u32[0];
              *((void *)&v144 + 1) = v141.u32[1];
              long long v151 = v144;
              *((void *)&v144 + 1) = v140.u32[1];
              v8.i64[0] = 0x1000100010001 * v140.u32[0];
              v8.i64[1] = 0x1000100010001 * *((void *)&v144 + 1);
              *(void *)&long long v151 = 0x1000100010001 * v151;
              *((void *)&v151 + 1) *= 0x1000100010001;
              *(void *)&long long v150 = 0x1000100010001 * v150;
              *((void *)&v150 + 1) *= 0x1000100010001;
              *(void *)&long long v149 = 0x1000100010001 * v149;
              *((void *)&v149 + 1) *= 0x1000100010001;
              *(void *)&long long v148 = 0x1000100010001 * v148;
              *((void *)&v148 + 1) *= 0x1000100010001;
              *(void *)&long long v147 = 0x1000100010001 * v147;
              *((void *)&v147 + 1) *= 0x1000100010001;
              *(void *)&long long v146 = 0x1000100010001 * v146;
              *((void *)&v146 + 1) *= 0x1000100010001;
              *(void *)&long long v145 = 0x1000100010001 * v145;
              *((void *)&v145 + 1) *= 0x1000100010001;
              v136[4] = v149;
              v136[5] = v145;
              v136[2] = v150;
              v136[3] = v146;
              *long long v136 = v151;
              v136[1] = v147;
              v136[6] = v8;
              v136[7] = v148;
              v136 += 8;
              v138 -= 16;
            }
            while (v138);
            if (v58 == v35) {
              goto LABEL_18;
            }
            if ((v35 & 8) == 0)
            {
              uint64_t v59 = v30 + 4 * v58;
LABEL_58:
              int v60 = (void *)((char *)v32 + 2 * v59);
              int v61 = (unsigned __int8 *)(v33 + v58 + v31);
              uint64_t v62 = v35 - v58;
              do
              {
                int v63 = *v61++;
                *v60++ = 0x1000100010001 * (v57 | v63);
                --v62;
              }
              while (v62);
              goto LABEL_18;
            }
          }
          else
          {
            uint64_t v58 = 0;
          }
          uint64_t v83 = v58;
          uint64_t v58 = v35 & 0xFFFFFFF8;
          uint64_t v59 = v30 + 4 * v58;
          unsigned int v84 = (int8x16_t *)((char *)&v32[2 * v83] + 2 * v30);
          long long v85 = (uint64_t *)(v33 + v83 + v31);
          uint64_t v86 = v83 - v58;
          do
          {
            uint64_t v87 = *v85++;
            v8.i64[0] = v87;
            int8x16_t v88 = vqtbl1q_s8(v8, (int8x16_t)xmmword_1889B9EF0);
            int8x16_t v89 = vorrq_s8(v82, vqtbl1q_s8(v8, (int8x16_t)xmmword_1889B9EE0));
            int8x16_t v90 = vorrq_s8(v82, v88);
            v91.i64[0] = v90.u32[2];
            v91.i64[1] = v90.u32[3];
            int8x16_t v92 = v91;
            v91.i64[0] = v89.u32[2];
            v91.i64[1] = v89.u32[3];
            int8x16_t v93 = v91;
            v91.i64[0] = v90.u32[0];
            v91.i64[1] = v90.u32[1];
            int8x16_t v94 = v91;
            v91.i64[1] = v89.u32[1];
            v8.i64[0] = 0x1000100010001 * v89.u32[0];
            v8.i64[1] = 0x1000100010001 * v91.i64[1];
            v94.i64[0] *= 0x1000100010001;
            v94.i64[1] *= 0x1000100010001;
            v93.i64[0] *= 0x1000100010001;
            v93.i64[1] *= 0x1000100010001;
            v92.i64[0] *= 0x1000100010001;
            v92.i64[1] *= 0x1000100010001;
            v84[2] = v94;
            v84[3] = v92;
            *unsigned int v84 = v8;
            v84[1] = v93;
            v84 += 4;
            v86 += 8;
          }
          while (v86);
          if (v58 != v35) {
            goto LABEL_58;
          }
          goto LABEL_18;
        case 8:
          if ((int)v35 < 1) {
            goto LABEL_18;
          }
          unsigned int v64 = (v29 - v34) << 8;
          if (v35 < 8
            || (unint64_t)v32 + 2 * v30 < v33 + v31 + v35
            && v33 + v31 < (unint64_t)&v32[4 * v35] + 2 * v30)
          {
            uint64_t v65 = 0;
            uint64_t v66 = v30;
            goto LABEL_66;
          }
          int8x16_t v95 = (int8x16_t)vdupq_n_s32(v64);
          if (v35 >= 0x10)
          {
            uint64_t v65 = v35 & 0x7FFFFFF0;
            char v152 = (double *)((char *)v32 + 2 * v30);
            int32x2_t v153 = (int8x16_t *)(v33 + v31);
            uint64_t v154 = v35 & 0xFFFFFFF0;
            do
            {
              int8x16_t v155 = *v153++;
              int8x16_t v156 = vorrq_s8(v95, vqtbl1q_s8(v155, (int8x16_t)xmmword_1889B9F10));
              v174.val[0] = (float64x2_t)vorrq_s8(v95, vqtbl1q_s8(v155, (int8x16_t)xmmword_1889B9F00));
              int8x16_t v157 = vorrq_s8(v95, vqtbl1q_s8(v155, (int8x16_t)xmmword_1889B9EF0));
              int8x16_t v158 = vorrq_s8(v95, vqtbl1q_s8(v155, (int8x16_t)xmmword_1889B9EE0));
              *(void *)&v159.f64[0] = v158.u32[0];
              *(void *)&v159.f64[1] = v158.u32[1];
              float64x2_t v160 = v159;
              *(void *)&v159.f64[0] = v158.u32[2];
              *(void *)&v159.f64[1] = v158.u32[3];
              v176.val[0] = v159;
              *(void *)&v159.f64[0] = v157.u32[0];
              *(void *)&v159.f64[1] = v157.u32[1];
              float64x2_t v161 = v159;
              *(void *)&v159.f64[0] = v157.u32[2];
              *(void *)&v159.f64[1] = v157.u32[3];
              v178.val[0] = v159;
              *(void *)&v159.f64[0] = LODWORD(v174.val[0].f64[0]);
              *(void *)&v159.f64[1] = HIDWORD(v174.val[0].f64[0]);
              float64x2_t v162 = v159;
              *(void *)&v159.f64[0] = LODWORD(v174.val[0].f64[1]);
              *(void *)&v159.f64[1] = HIDWORD(v174.val[0].f64[1]);
              v180.val[0] = v159;
              *(void *)&v159.f64[0] = v156.u32[0];
              *(void *)&v159.f64[1] = v156.u32[1];
              v8.i64[0] = 0x1000100010001 * v156.u32[2];
              v8.i64[1] = 0x1000100010001 * v156.u32[3];
              *(void *)&v174.val[0].f64[0] = 0x1000100010001 * *(void *)&v159.f64[0];
              *(void *)&v174.val[0].f64[1] = 0x1000100010001 * *(void *)&v159.f64[1];
              *(void *)&v180.val[0].f64[0] *= 0x1000100010001;
              *(void *)&v180.val[0].f64[1] *= 0x1000100010001;
              *(void *)&v181.val[0].f64[0] = 0x1000100010001 * *(void *)&v162.f64[0];
              *(void *)&v181.val[0].f64[1] = 0x1000100010001 * *(void *)&v162.f64[1];
              *(void *)&v178.val[0].f64[0] *= 0x1000100010001;
              *(void *)&v178.val[0].f64[1] *= 0x1000100010001;
              *(void *)&v182.val[0].f64[0] = 0x1000100010001 * *(void *)&v161.f64[0];
              *(void *)&v182.val[0].f64[1] = 0x1000100010001 * *(void *)&v161.f64[1];
              int8x16_t v163 = v8;
              *(void *)&v176.val[0].f64[0] *= 0x1000100010001;
              *(void *)&v176.val[0].f64[1] *= 0x1000100010001;
              *(void *)&v183.val[0].f64[0] = 0x1000100010001 * *(void *)&v160.f64[0];
              *(void *)&v183.val[0].f64[1] = 0x1000100010001 * *(void *)&v160.f64[1];
              v183.val[1] = v183.val[0];
              int v164 = v152;
              vst2q_f64(v164, v183);
              v164 += 4;
              v174.val[1] = v174.val[0];
              v176.val[1] = v176.val[0];
              vst2q_f64(v164, v176);
              v182.val[1] = v182.val[0];
              uint64_t v165 = v152 + 8;
              vst2q_f64(v165, v182);
              v178.val[1] = v178.val[0];
              unint64_t v166 = v152 + 12;
              vst2q_f64(v166, v178);
              v181.val[1] = v181.val[0];
              unint64_t v167 = v152 + 16;
              vst2q_f64(v167, v181);
              v180.val[1] = v180.val[0];
              unint64_t v168 = v152 + 20;
              vst2q_f64(v168, v180);
              unint64_t v169 = v152 + 24;
              vst2q_f64(v169, v174);
              unint64_t v170 = v152 + 28;
              vst2q_f64(v170, *(float64x2x2_t *)v8.i8);
              v152 += 32;
              v154 -= 16;
            }
            while (v154);
            if (v65 == v35) {
              goto LABEL_18;
            }
            if ((v35 & 8) == 0)
            {
              uint64_t v66 = v30 + 8 * v65;
LABEL_66:
              uint64_t v67 = (uint64_t *)((char *)a1 + 2 * v66 + 12);
              unint64_t v68 = (unsigned __int8 *)(v33 + v65 + v31);
              uint64_t v69 = v35 - v65;
              do
              {
                int v70 = *v68++;
                uint64_t v71 = 0x1000100010001 * (v64 | v70);
                *(v67 - 1) = v71;
                *uint64_t v67 = v71;
                v67 += 2;
                --v69;
              }
              while (v69);
              goto LABEL_18;
            }
          }
          else
          {
            uint64_t v65 = 0;
          }
          uint64_t v96 = v65;
          uint64_t v65 = v35 & 0xFFFFFFF8;
          uint64_t v66 = v30 + 8 * v65;
          unint64_t v97 = (double *)((char *)&v32[4 * v96] + 2 * v30);
          unint64_t v98 = (uint64_t *)(v33 + v96 + v31);
          uint64_t v99 = v96 - v65;
          do
          {
            uint64_t v100 = *v98++;
            v8.i64[0] = v100;
            int8x16_t v101 = vqtbl1q_s8(v8, (int8x16_t)xmmword_1889B9EE0);
            int8x16_t v102 = vorrq_s8(v95, vqtbl1q_s8(v8, (int8x16_t)xmmword_1889B9EF0));
            int8x16_t v103 = vorrq_s8(v95, v101);
            *(void *)&v175.val[0].f64[0] = 0x1000100010001 * v102.u32[2];
            *(void *)&v175.val[0].f64[1] = 0x1000100010001 * v102.u32[3];
            *(void *)&v177.val[0].f64[0] = 0x1000100010001 * v102.u32[0];
            *(void *)&v177.val[0].f64[1] = 0x1000100010001 * v102.u32[1];
            v175.val[1] = v175.val[0];
            v8.i64[0] = 0x1000100010001 * v103.u32[2];
            v8.i64[1] = 0x1000100010001 * v103.u32[3];
            *(void *)&v179.val[0].f64[0] = 0x1000100010001 * v103.u32[0];
            *(void *)&v179.val[0].f64[1] = 0x1000100010001 * v103.u32[1];
            v179.val[1] = v179.val[0];
            uint64_t v104 = v97;
            vst2q_f64(v104, v179);
            v104 += 4;
            v177.val[1] = v177.val[0];
            int8x16_t v105 = v8;
            vst2q_f64(v104, *(float64x2x2_t *)v8.i8);
            uint64_t v106 = v97 + 8;
            vst2q_f64(v106, v177);
            unint64_t v107 = v97 + 12;
            vst2q_f64(v107, v175);
            v97 += 16;
            v99 += 8;
          }
          while (v99);
          if (v65 != v35) {
            goto LABEL_66;
          }
          goto LABEL_18;
        default:
          if ((int)v35 < 1) {
            goto LABEL_18;
          }
          uint64_t v42 = 0;
          if (v36 <= 16) {
            unint64_t v43 = 16;
          }
          else {
            unint64_t v43 = v36;
          }
          unint64_t v44 = ((v43 - 1) >> 4) + 1;
          uint64_t v45 = 2 * v30;
          unint64_t v46 = (int64x2_t *)((char *)v171 + v45);
          uint64_t v47 = 2 * v36;
          uint64_t v48 = (uint64_t)a1 + v45;
          while (2)
          {
            if (1 << v34 < 2) {
              goto LABEL_43;
            }
            unint64_t v49 = 0x1000100010001
                * (((v29 - v34) << 8) | *(unsigned __int8 *)(a4 + v42 + v31 + 484));
            if (v43 < 0x31)
            {
              uint64_t v50 = 0;
              goto LABEL_50;
            }
            int64x2_t v51 = vdupq_n_s64(v49);
            uint64_t v52 = v44 & 0x1FFFFFFFFFFFFFFCLL;
            uint64_t v53 = v46;
            do
            {
              v53[-4] = v51;
              v53[-3] = v51;
              v53[-2] = v51;
              v53[-1] = v51;
              *uint64_t v53 = v51;
              v53[1] = v51;
              v53[2] = v51;
              v53[3] = v51;
              v53 += 8;
              v52 -= 4;
            }
            while (v52);
            uint64_t v50 = 16 * (v44 & 0x1FFFFFFFFFFFFFFCLL);
            if (v44 != (v44 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_50:
              uint64_t v54 = 2 * v50;
              uint64_t v55 = v48;
              do
              {
                uint64_t v56 = v55 + v54;
                *(void *)(v56 + 4) = v49;
                *(void *)(v56 + 12) = v49;
                *(void *)(v56 + 20) = v49;
                *(void *)(v56 + 28) = v49;
                v50 += 16;
                v55 += 32;
              }
              while (v50 < v36);
            }
LABEL_43:
            ++v42;
            unint64_t v46 = (int64x2_t *)((char *)v46 + v47);
            v48 += v47;
            if (v42 == v35) {
              goto LABEL_18;
            }
            continue;
          }
      }
    }
  }
  return result;
}

uint64_t HUF_decompress1X1_usingDTable(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a5 + 1)) {
    return -1;
  }
  else {
    return HUF_decompress1X1_usingDTable_internal(a1, a2, a3, a4, a5);
  }
}

uint64_t HUF_decompress1X1_usingDTable_internal(unsigned char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (!a4) {
    return -72;
  }
  uint64_t v5 = a4 - 8;
  if (a4 < 8)
  {
    uint64_t v6 = *a3;
    switch(a4)
    {
      case 2uLL:
        goto LABEL_14;
      case 3uLL:
        goto LABEL_13;
      case 4uLL:
        goto LABEL_12;
      case 5uLL:
        goto LABEL_11;
      case 6uLL:
        goto LABEL_10;
      case 7uLL:
        v6 |= (unint64_t)a3[6] << 48;
LABEL_10:
        v6 += (unint64_t)a3[5] << 40;
LABEL_11:
        v6 += (unint64_t)a3[4] << 32;
LABEL_12:
        v6 += (unint64_t)a3[3] << 24;
LABEL_13:
        v6 += (unint64_t)a3[2] << 16;
LABEL_14:
        v6 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1]) {
      return -20;
    }
    uint64_t v5 = 0;
    unsigned int v7 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    goto LABEL_17;
  }
  if (!a3[a4 - 1]) {
    return -1;
  }
  if (a4 > 0xFFFFFFFFFFFFFF88) {
    return a4;
  }
  uint64_t v6 = *(void *)&a3[v5];
  unsigned int v7 = __clz(a3[a4 - 1]) - 23;
LABEL_17:
  unint64_t v9 = (unint64_t)&a1[a2];
  uint64_t v10 = a5 + 4;
  uint64_t v11 = &a3[v5];
  unint64_t v12 = (unint64_t)&a1[a2 - 3];
  int v13 = -*(unsigned __int16 *)(a5 + 2) & 0x3F;
  int v14 = a1;
  while (1)
  {
    if (v5 >= 8)
    {
      BOOL v17 = 0;
      unsigned int v18 = v7 >> 3;
      v7 &= 7u;
      v5 -= v18;
      uint64_t v11 = &a3[v5];
      uint64_t v6 = *(void *)&a3[v5];
      if ((unint64_t)v14 >= v12) {
        goto LABEL_30;
      }
      goto LABEL_25;
    }
    if (!v5) {
      break;
    }
    uint64_t v15 = v7 >> 3;
    unint64_t v16 = (unint64_t)&v11[-v15];
    BOOL v17 = v16 < (unint64_t)a3;
    if (v16 < (unint64_t)a3) {
      LODWORD(v15) = v5;
    }
    v7 -= 8 * v15;
    v5 -= v15;
    uint64_t v11 = &a3[v5];
    uint64_t v6 = *(void *)&a3[v5];
    if ((unint64_t)v14 >= v12)
    {
LABEL_30:
      uint64_t v27 = v14;
LABEL_31:
      if ((unint64_t)v27 >= v9) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }
LABEL_25:
    if (v17) {
      goto LABEL_30;
    }
    uint64_t v19 = (unsigned char *)(v10 + 2 * ((unint64_t)(v6 << v7) >> v13));
    unsigned int v20 = v7 + v19[1];
    *int v14 = *v19;
    uint64_t v21 = (unsigned char *)(v10 + 2 * ((unint64_t)(v6 << v20) >> v13));
    unsigned int v22 = v20 + v21[1];
    v14[1] = *v21;
    uint64_t v23 = (unsigned char *)(v10 + 2 * ((unint64_t)(v6 << v22) >> v13));
    unsigned int v24 = v22 + v23[1];
    v14[2] = *v23;
    uint64_t v25 = (char *)(v10 + 2 * ((unint64_t)(v6 << v24) >> v13));
    char v26 = *v25;
    unsigned int v7 = v24 + v25[1];
    uint64_t v27 = v14 + 4;
    v14[3] = v26;
    v14 += 4;
    if (v7 >= 0x41) {
      goto LABEL_31;
    }
  }
  uint64_t v27 = v14;
  if ((unint64_t)v14 >= v9) {
    goto LABEL_34;
  }
LABEL_32:
  uint64_t v28 = &a1[a2] - v27;
  do
  {
    uint64_t v29 = (unsigned char *)(v10 + 2 * ((unint64_t)(v6 << v7) >> v13));
    v7 += v29[1];
    *v27++ = *v29;
    --v28;
  }
  while (v28);
LABEL_34:
  if (v7 == 64 && v11 == a3) {
    return a2;
  }
  else {
    return -20;
  }
}

unint64_t HUF_decompress1X1_DCtx_wksp(int *a1, unsigned char *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return HUF_decompress1X1_usingDTable_internal(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

unint64_t HUF_decompress4X1_usingDTable(unsigned char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a5 + 1)) {
    return -1;
  }
  else {
    return HUF_decompress4X1_usingDTable_internal(a1, a2, a3, a4, a5);
  }
}

unint64_t HUF_decompress4X1_usingDTable_internal(unsigned char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v162 = v5;
  uint64_t v163 = v6;
  unint64_t v161 = 0;
  long long v159 = 0u;
  long long v160 = 0u;
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v11 = a3[2];
  unint64_t v12 = v9 + 6 + v10 + v11;
  unint64_t v13 = a4 - v12;
  if (a4 < v12) {
    return -20;
  }
  if (!v9) {
    return -72;
  }
  uint64_t v15 = (unsigned __int8 *)(a3 + 3);
  if (v9 < 8)
  {
    uint64_t v18 = *v15;
    switch((int)v9)
    {
      case 2:
        goto LABEL_16;
      case 3:
        goto LABEL_15;
      case 4:
        goto LABEL_14;
      case 5:
        goto LABEL_13;
      case 6:
        goto LABEL_12;
      case 7:
        v18 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_12:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_13:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_14:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_15:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_16:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 7) << 8;
        break;
      default:
        break;
    }
    unsigned int v20 = v15[v9 - 1];
    if (!v20) {
      return -20;
    }
    unsigned int v19 = __clz(v20) - 8 * v9 + 41;
    uint64_t v17 = 6;
    if (v10) {
      goto LABEL_19;
    }
    return -72;
  }
  unsigned int v16 = v15[v9 - 1];
  if (!v16) {
    return -1;
  }
  uint64_t v17 = v9 - 2;
  uint64_t v18 = *(void *)((char *)a3 + v9 - 2);
  unsigned int v19 = __clz(v16) - 23;
  if (!v10) {
    return -72;
  }
LABEL_19:
  uint64_t v21 = (unsigned __int8 *)a3 + v9 + 6;
  if (v10 >= 8)
  {
    if (v21[v10 - 1])
    {
      uint64_t v22 = v10 - 8;
      uint64_t v23 = *(void *)&v21[v10 - 8];
      unsigned int v24 = __clz(v21[v10 - 1]) - 23;
      goto LABEL_31;
    }
    return -1;
  }
  uint64_t v23 = *v21;
  switch((int)v10)
  {
    case 2:
      goto LABEL_28;
    case 3:
      goto LABEL_27;
    case 4:
      goto LABEL_26;
    case 5:
      goto LABEL_25;
    case 6:
      goto LABEL_24;
    case 7:
      v23 |= (unint64_t)v21[6] << 48;
LABEL_24:
      v23 += (unint64_t)v21[5] << 40;
LABEL_25:
      v23 += (unint64_t)v21[4] << 32;
LABEL_26:
      v23 += (unint64_t)v21[3] << 24;
LABEL_27:
      v23 += (unint64_t)v21[2] << 16;
LABEL_28:
      v23 += (unint64_t)v21[1] << 8;
      break;
    default:
      break;
  }
  if (!v21[v10 - 1]) {
    return -20;
  }
  uint64_t v22 = 0;
  unsigned int v24 = __clz(v21[v10 - 1]) - 8 * v10 + 41;
LABEL_31:
  if (!v11) {
    return -72;
  }
  uint64_t v25 = &v21[v10];
  if (v11 < 8)
  {
    uint64_t v27 = *v25;
    switch((int)v11)
    {
      case 2:
        goto LABEL_44;
      case 3:
        goto LABEL_43;
      case 4:
        goto LABEL_42;
      case 5:
        goto LABEL_41;
      case 6:
        goto LABEL_40;
      case 7:
        v27 |= (unint64_t)v25[6] << 48;
LABEL_40:
        v27 += (unint64_t)v25[5] << 40;
LABEL_41:
        v27 += (unint64_t)v25[4] << 32;
LABEL_42:
        v27 += (unint64_t)v25[3] << 24;
LABEL_43:
        v27 += (unint64_t)v25[2] << 16;
LABEL_44:
        v27 += (unint64_t)v25[1] << 8;
        break;
      default:
        break;
    }
    if (v25[v11 - 1])
    {
      int8x16_t v156 = a1;
      int8x16_t v157 = v21;
      uint64_t v154 = a2;
      uint64_t v155 = v17;
      int v153 = *(unsigned __int16 *)(a5 + 2);
      uint64_t v26 = 0;
      unsigned int v28 = __clz(v25[v11 - 1]) - 8 * v11 + 41;
      goto LABEL_47;
    }
    return -20;
  }
  if (!v25[v11 - 1]) {
    return -1;
  }
  int8x16_t v156 = a1;
  int8x16_t v157 = v21;
  uint64_t v154 = a2;
  uint64_t v155 = v17;
  int v153 = *(unsigned __int16 *)(a5 + 2);
  uint64_t v26 = v11 - 8;
  uint64_t v27 = *(void *)&v25[v11 - 8];
  unsigned int v28 = __clz(v25[v11 - 1]) - 23;
LABEL_47:
  int8x16_t v158 = &v21[v10];
  unint64_t result = BIT_initDStream((uint64_t)&v159, &v25[v11], v13);
  uint64_t v30 = v155;
  uint64_t v29 = v156;
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  unint64_t v31 = (unint64_t)&v156[v154];
  unint64_t v32 = (unint64_t)&v156[v154 - 3];
  uint64_t v33 = a5 + 4;
  unint64_t v34 = (unint64_t)(v154 + 3) >> 2;
  unint64_t v35 = (unint64_t)&v156[v34];
  unint64_t v36 = (unint64_t)&v156[v34 + v34];
  unint64_t v37 = v36 + v34;
  uint64_t v38 = v159;
  if (v36 + v34 >= v32)
  {
    long long v85 = v156;
    int8x16_t v88 = &v156[v34];
    uint64_t v87 = &v156[v34 + v34];
    uint64_t v86 = (unsigned char *)(v36 + v34);
    goto LABEL_63;
  }
  uint64_t v39 = v155;
  int v40 = -v153 & 0x3F;
  unsigned int v41 = DWORD2(v159);
  unint64_t v42 = v161;
  unint64_t v43 = (uint64_t *)v160;
  uint64_t v44 = 2 * v34;
  uint64_t v45 = v156;
  do
  {
    unint64_t v46 = v45;
    uint64_t v47 = &v45[3 * v34];
    uint64_t v48 = &v46[v44];
    unint64_t v49 = &v46[v34];
    uint64_t v50 = (unsigned char *)(v33 + 2 * ((unint64_t)(v18 << v19) >> v40));
    unsigned int v51 = v19 + v50[1];
    unsigned char *v46 = *v50;
    uint64_t v52 = (unsigned char *)(v33 + 2 * ((unint64_t)(v23 << v24) >> v40));
    unsigned int v53 = v24 + v52[1];
    *unint64_t v49 = *v52;
    uint64_t v54 = (char *)(v33 + 2 * ((unint64_t)(v27 << v28) >> v40));
    char v55 = *v54;
    LODWORD(v54) = v28 + v54[1];
    unsigned char *v48 = v55;
    uint64_t v56 = (unsigned char *)(v33 + 2 * ((unint64_t)(v38 << v41) >> v40));
    unsigned int v57 = v41 + v56[1];
    *uint64_t v47 = *v56;
    uint64_t v58 = (unsigned char *)(v33 + 2 * ((unint64_t)(v18 << v51) >> v40));
    unsigned int v59 = v51 + v58[1];
    v46[1] = *v58;
    int v60 = (unsigned char *)(v33 + 2 * ((unint64_t)(v23 << v53) >> v40));
    unsigned int v61 = v53 + v60[1];
    v49[1] = *v60;
    uint64_t v62 = (unsigned char *)(v33 + 2 * ((unint64_t)(v27 << (char)v54) >> v40));
    LODWORD(v54) = v54 + v62[1];
    v48[1] = *v62;
    int v63 = (unsigned char *)(v33 + 2 * ((unint64_t)(v38 << v57) >> v40));
    unsigned int v64 = v57 + v63[1];
    v47[1] = *v63;
    uint64_t v65 = (unsigned char *)(v33 + 2 * ((unint64_t)(v18 << v59) >> v40));
    unsigned int v66 = v59 + v65[1];
    void v46[2] = *v65;
    uint64_t v67 = (unsigned char *)(v33 + 2 * ((unint64_t)(v23 << v61) >> v40));
    unsigned int v68 = v61 + v67[1];
    v49[2] = *v67;
    uint64_t v69 = (unsigned char *)(v33 + 2 * ((unint64_t)(v27 << (char)v54) >> v40));
    int v70 = v54 + v69[1];
    v48[2] = *v69;
    uint64_t v71 = (unsigned char *)(v33 + 2 * ((unint64_t)(v38 << v64) >> v40));
    unsigned int v72 = v64 + v71[1];
    v47[2] = *v71;
    unint64_t v73 = (unsigned char *)(v33 + 2 * ((unint64_t)(v18 << v66) >> v40));
    unsigned int v19 = v66 + v73[1];
    v46[3] = *v73;
    uint64_t v74 = (unsigned char *)(v33 + 2 * ((unint64_t)(v23 << v68) >> v40));
    int v75 = v74[1];
    v49[3] = *v74;
    char v76 = (unsigned char *)(v33 + 2 * ((unint64_t)(v27 << v70) >> v40));
    int v77 = v76[1];
    v48[3] = *v76;
    uint64_t v78 = (unsigned char *)(v33 + 2 * ((unint64_t)(v38 << v72) >> v40));
    int v79 = v78[1];
    v47[3] = *v78;
    if (v39 < 14)
    {
      int v80 = 3;
      unsigned int v24 = v68 + v75;
      if (v22 >= 8)
      {
LABEL_52:
        int v82 = 0;
        v22 -= v24 >> 3;
        v24 &= 7u;
        uint64_t v23 = *(void *)&v157[v22];
        unsigned int v28 = v70 + v77;
        if (v26 >= 8) {
          goto LABEL_53;
        }
        goto LABEL_59;
      }
    }
    else
    {
      int v80 = 0;
      uint64_t v81 = v39 - (v19 >> 3);
      v19 &= 7u;
      uint64_t v39 = v81;
      uint64_t v18 = *(void *)((char *)a3 + v81);
      unsigned int v24 = v68 + v75;
      if (v22 >= 8) {
        goto LABEL_52;
      }
    }
    int v82 = 3;
    unsigned int v28 = v70 + v77;
    if (v26 >= 8)
    {
LABEL_53:
      int v83 = 0;
      v26 -= v28 >> 3;
      v28 &= 7u;
      uint64_t v27 = *(void *)&v158[v26];
      unsigned int v41 = v72 + v79;
      if ((unint64_t)v43 >= v42) {
        goto LABEL_54;
      }
      goto LABEL_60;
    }
LABEL_59:
    int v83 = 3;
    unsigned int v41 = v72 + v79;
    if ((unint64_t)v43 >= v42)
    {
LABEL_54:
      int v84 = 0;
      unint64_t v43 = (uint64_t *)((char *)v43 - (v41 >> 3));
      v41 &= 7u;
      uint64_t v38 = *v43;
      if ((unint64_t)(v47 + 4) >= v32) {
        break;
      }
      goto LABEL_55;
    }
LABEL_60:
    int v84 = 3;
    if ((unint64_t)(v47 + 4) >= v32) {
      break;
    }
LABEL_55:
    uint64_t v45 = v46 + 4;
  }
  while (!(v82 | v80 | v83 | v84));
  long long v85 = v46 + 4;
  DWORD2(v159) = v41;
  *(void *)&long long v160 = v43;
  uint64_t v86 = &v46[3 * v34 + 4];
  uint64_t v87 = &v46[v44 + 4];
  int8x16_t v88 = &v46[v34 + 4];
  uint64_t v29 = v156;
  uint64_t v30 = v39;
  unint64_t v37 = v36 + v34;
  unint64_t v31 = (unint64_t)&v156[v154];
  unint64_t v35 = (unint64_t)&v156[v34];
LABEL_63:
  *(void *)&long long v159 = v38;
  unint64_t result = -20;
  if ((unint64_t)v85 > v35 || (unint64_t)v88 > v36 || (unint64_t)v87 > v37) {
    return result;
  }
  if (v19 > 0x40)
  {
    int8x16_t v89 = v85;
    int v90 = v153;
    int8x16_t v91 = v158;
    goto LABEL_81;
  }
  int v90 = v153;
  int v92 = -v153 & 0x3F;
  int8x16_t v91 = v158;
  while (2)
  {
    if (v30 >= 14)
    {
      BOOL v95 = 0;
      unsigned int v94 = v19 >> 3;
      v19 &= 7u;
LABEL_75:
      v30 -= v94;
      uint64_t v18 = *(void *)((char *)a3 + v30);
      if ((unint64_t)v85 >= v35 - 3 || v95)
      {
        int8x16_t v89 = v85;
        goto LABEL_81;
      }
      uint64_t v96 = (char *)(v33 + 2 * ((unint64_t)(v18 << v19) >> v92));
      char v97 = *v96;
      LODWORD(v96) = v19 + v96[1];
      unsigned char *v85 = v97;
      unint64_t v98 = (unsigned char *)(v33 + 2 * ((unint64_t)(v18 << (char)v96) >> v92));
      LODWORD(v96) = v96 + v98[1];
      v85[1] = *v98;
      uint64_t v99 = (unsigned char *)(v33 + 2 * ((unint64_t)(v18 << (char)v96) >> v92));
      LODWORD(v96) = v96 + v99[1];
      v85[2] = *v99;
      uint64_t v100 = (char *)(v33 + 2 * ((unint64_t)(v18 << (char)v96) >> v92));
      char v101 = *v100;
      unsigned int v19 = v96 + v100[1];
      int8x16_t v89 = v85 + 4;
      v85[3] = v101;
      v85 += 4;
      if (v19 >= 0x41) {
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  if (v30 != 6)
  {
    uint64_t v93 = v19 >> 3;
    unsigned int v94 = v30 - 6;
    BOOL v95 = v30 - v93 < 6;
    if (v30 - v93 >= 6) {
      unsigned int v94 = v19 >> 3;
    }
    v19 -= 8 * v94;
    goto LABEL_75;
  }
  int8x16_t v89 = v85;
LABEL_81:
  if ((unint64_t)v89 < v35)
  {
    unint64_t v102 = &v29[v34] - v89;
    do
    {
      int8x16_t v103 = (unsigned char *)(v33 + 2 * ((unint64_t)(v18 << v19) >> (-(char)v90 & 0x3F)));
      v19 += v103[1];
      *v89++ = *v103;
      --v102;
    }
    while (v102);
  }
  uint64_t v104 = &v157[v22];
  if (v24 <= 0x40)
  {
    int v106 = -v90 & 0x3F;
    while (1)
    {
      if (v22 >= 8)
      {
        BOOL v108 = 0;
        unsigned int v109 = v24 >> 3;
        v24 &= 7u;
      }
      else
      {
        if (!v22) {
          goto LABEL_85;
        }
        unint64_t v107 = (unint64_t)&v104[-(v24 >> 3)];
        BOOL v108 = v107 < (unint64_t)v157;
        unsigned int v109 = v107 >= (unint64_t)v157 ? v24 >> 3 : v22;
        v24 -= 8 * v109;
      }
      v22 -= v109;
      uint64_t v104 = &v157[v22];
      uint64_t v23 = *(void *)&v157[v22];
      if ((unint64_t)v88 >= v36 - 3 || v108) {
        break;
      }
      uint64_t v110 = (char *)(v33 + 2 * ((unint64_t)(v23 << v24) >> v106));
      char v111 = *v110;
      LODWORD(v110) = v24 + v110[1];
      *int8x16_t v88 = v111;
      int v112 = (unsigned char *)(v33 + 2 * ((unint64_t)(v23 << (char)v110) >> v106));
      LODWORD(v110) = v110 + v112[1];
      v88[1] = *v112;
      uint64_t v113 = (unsigned char *)(v33 + 2 * ((unint64_t)(v23 << (char)v110) >> v106));
      LODWORD(v110) = v110 + v113[1];
      v88[2] = *v113;
      int8x8_t v114 = (char *)(v33 + 2 * ((unint64_t)(v23 << (char)v110) >> v106));
      char v115 = *v114;
      unsigned int v24 = v110 + v114[1];
      int8x16_t v105 = v88 + 4;
      v88[3] = v115;
      v88 += 4;
      if (v24 >= 0x41) {
        goto LABEL_99;
      }
    }
    int8x16_t v105 = v88;
  }
  else
  {
LABEL_85:
    int8x16_t v105 = v88;
  }
LABEL_99:
  while ((unint64_t)v105 < v36)
  {
    uint64_t v116 = (unsigned char *)(v33 + 2 * ((unint64_t)(v23 << v24) >> (-(char)v90 & 0x3F)));
    v24 += v116[1];
    *v105++ = *v116;
  }
  long long v117 = &v91[v26];
  if (v28 <= 0x40)
  {
    int v119 = -v90 & 0x3F;
    while (1)
    {
      if (v26 >= 8)
      {
        BOOL v121 = 0;
        unsigned int v122 = v28 >> 3;
        v28 &= 7u;
      }
      else
      {
        if (!v26) {
          goto LABEL_102;
        }
        unint64_t v120 = (unint64_t)&v117[-(v28 >> 3)];
        BOOL v121 = v120 < (unint64_t)v91;
        unsigned int v122 = v120 >= (unint64_t)v91 ? v28 >> 3 : v26;
        v28 -= 8 * v122;
      }
      v26 -= v122;
      long long v117 = &v91[v26];
      uint64_t v27 = *(void *)&v91[v26];
      if ((unint64_t)v87 >= v37 - 3 || v121) {
        break;
      }
      long long v123 = (char *)(v33 + 2 * ((unint64_t)(v27 << v28) >> v119));
      char v124 = *v123;
      LODWORD(v123) = v28 + v123[1];
      unsigned char *v87 = v124;
      int8x16_t v125 = (unsigned char *)(v33 + 2 * ((unint64_t)(v27 << (char)v123) >> v119));
      LODWORD(v123) = v123 + v125[1];
      v87[1] = *v125;
      int v126 = (unsigned char *)(v33 + 2 * ((unint64_t)(v27 << (char)v123) >> v119));
      LODWORD(v123) = v123 + v126[1];
      v87[2] = *v126;
      uint64_t v127 = (char *)(v33 + 2 * ((unint64_t)(v27 << (char)v123) >> v119));
      char v128 = *v127;
      unsigned int v28 = v123 + v127[1];
      uint64_t v118 = v87 + 4;
      v87[3] = v128;
      v87 += 4;
      if (v28 >= 0x41) {
        goto LABEL_116;
      }
    }
    uint64_t v118 = v87;
  }
  else
  {
LABEL_102:
    uint64_t v118 = v87;
  }
LABEL_116:
  if ((unint64_t)v118 >= v37)
  {
    uint64_t v129 = v154;
  }
  else
  {
    uint64_t v129 = v154;
    do
    {
      uint64_t v130 = (unsigned char *)(v33 + 2 * ((unint64_t)(v27 << v28) >> (-(char)v90 & 0x3F)));
      v28 += v130[1];
      *v118++ = *v130;
    }
    while ((unint64_t)v118 < v37);
  }
  unsigned int v131 = DWORD2(v159);
  if (DWORD2(v159) <= 0x40)
  {
    int v143 = -v90 & 0x3F;
    while (1)
    {
      if ((unint64_t)v160 >= v161)
      {
        BOOL v145 = 0;
        long long v146 = (uint64_t *)(v160 - (v131 >> 3));
        *(void *)&long long v160 = v146;
        v131 &= 7u;
      }
      else
      {
        if ((void)v160 == *((void *)&v160 + 1)) {
          break;
        }
        uint64_t v144 = v131 >> 3;
        BOOL v145 = (unint64_t)(v160 - v144) < *((void *)&v160 + 1);
        uint64_t v144 = (unint64_t)(v160 - v144) >= *((void *)&v160 + 1)
             ? v144
             : (v160 - DWORD2(v160));
        long long v146 = (uint64_t *)(v160 - v144);
        *(void *)&long long v160 = v160 - v144;
        v131 -= 8 * v144;
      }
      DWORD2(v159) = v131;
      uint64_t v147 = *v146;
      *(void *)&long long v159 = v147;
      if ((unint64_t)v86 >= v32 || v145) {
        break;
      }
      long long v148 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v147 << v131) >> v143));
      int v149 = *v148;
      LODWORD(v148) = v131 + v148[1];
      *uint64_t v86 = v149;
      long long v150 = (unsigned char *)(v33 + 2 * ((unint64_t)(v147 << (char)v148) >> v143));
      LOBYTE(v149) = *v150;
      LODWORD(v148) = v148 + v150[1];
      DWORD2(v159) = v148;
      v86[1] = v149;
      long long v151 = (unsigned char *)(v33 + 2 * ((unint64_t)(v147 << SBYTE8(v159)) >> v143));
      LOBYTE(v149) = *v151;
      LODWORD(v148) = v148 + v151[1];
      DWORD2(v159) = v148;
      v86[2] = v149;
      char v152 = (unsigned char *)(v33 + 2 * ((unint64_t)(v147 << SBYTE8(v159)) >> v143));
      LOBYTE(v149) = *v152;
      DWORD2(v159) = v148 + v152[1];
      uint64_t v132 = v86 + 4;
      v86[3] = v149;
      unsigned int v131 = DWORD2(v159);
      v86 += 4;
      if (DWORD2(v159) >= 0x41) {
        goto LABEL_123;
      }
    }
  }
  uint64_t v132 = v86;
LABEL_123:
  if ((unint64_t)v132 < v31)
  {
    uint64_t v133 = &v29[v129] - v132;
    do
    {
      uint64_t v134 = (char *)(v33 + 2 * ((void)v159 << SBYTE8(v159) >> (-(char)v90 & 0x3F)));
      char v135 = *v134;
      DWORD2(v159) += v134[1];
      *v132++ = v135;
      --v133;
    }
    while (v133);
    unsigned int v131 = DWORD2(v159);
  }
  if (v131 == 64
    && (void)v160 == *((void *)&v160 + 1)
    && v28 == 64
    && v117 == v91
    && v24 == 64
    && v104 == v157
    && v19 == 64
    && v30 == 6)
  {
    return v129;
  }
  else
  {
    return -20;
  }
}

unint64_t HUF_decompress4X1_DCtx_wksp(int *a1, unsigned char *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return HUF_decompress4X1_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

unint64_t HUF_readDTableX2_wksp(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (a5 >= 0x5DC)
  {
    unsigned int v7 = a1 + 1;
    int v6 = *a1;
    uint64_t v8 = a4 + 624;
    *(_OWORD *)(a4 + 716) = 0u;
    uint64_t v9 = v6;
    *(_OWORD *)(a4 + 688) = 0u;
    *(_OWORD *)(a4 + 704) = 0u;
    *(_OWORD *)(a4 + 656) = 0u;
    *(_OWORD *)(a4 + 672) = 0u;
    *(_OWORD *)(a4 + 624) = 0u;
    *(_OWORD *)(a4 + 640) = 0u;
    if (v6 <= 0xCu)
    {
      int v103 = v6;
      uint64_t v108 = 0;
      unint64_t result = HUF_readStats_wksp((unsigned __int8 *)(a4 + 1244), 0x100uLL, v8, &v108, (_DWORD *)&v108 + 1, a2, a3, (unsigned __int16 *)v109, 0x164uLL);
      if (result > 0xFFFFFFFFFFFFFF88) {
        return result;
      }
      int v11 = v9 - HIDWORD(v108);
      if (v9 >= HIDWORD(v108))
      {
        int v12 = 0;
        uint64_t v13 = a4 + 732;
        int v14 = (_DWORD *)(a4 + 680);
        int v15 = HIDWORD(v108) + 1;
        while (!*(_DWORD *)(v8 + 4 * (HIDWORD(v108) + v12--)))
          ;
        int v17 = 0;
        uint64_t v18 = (HIDWORD(v108) + v12 + 2);
        unsigned int v19 = HIDWORD(v108) + v12 + 2;
        if ((HIDWORD(v108) + v12) < 0xFFFFFFFE)
        {
          int v20 = 0;
          uint64_t v21 = (_DWORD *)(a4 + 628);
          uint64_t v22 = v18 - 1;
          do
          {
            int v17 = *v21 + v20;
            v21[14] = v20;
            ++v21;
            int v20 = v17;
            --v22;
          }
          while (v22);
        }
        *int v14 = v17;
        uint64_t v23 = v108;
        if (v108)
        {
          uint64_t v24 = 0;
          do
          {
            uint64_t v25 = *(unsigned __int8 *)(a4 + 1244 + v24);
            uint64_t v26 = v14[v25];
            v14[v25] = v26 + 1;
            uint64_t v27 = (unsigned char *)(v13 + 2 * v26);
            *uint64_t v27 = v24;
            v27[1] = v25;
            ++v24;
          }
          while (v23 != v24);
        }
        *int v14 = 0;
        unint64_t v101 = result;
        if (v19 < 2)
        {
          unsigned int v28 = -v12;
LABEL_25:
          int8x16_t v105 = v7;
          long long v40 = *(_OWORD *)(a4 + 16);
          v111[0] = *(_OWORD *)a4;
          v111[1] = v40;
          v111[2] = *(_OWORD *)(a4 + 32);
          int v112 = *(_DWORD *)(a4 + 48);
          if (!v17)
          {
LABEL_66:
            *(unsigned char *)a1 = v103;
            *((unsigned char *)a1 + 1) = 1;
            *((unsigned char *)a1 + 2) = v103;
            *((unsigned char *)a1 + 3) = HIBYTE(v103);
            return v101;
          }
          uint64_t v41 = 0;
          int v107 = v15 - v9;
          unint64_t v102 = a1 + 5;
          int v106 = a1 + 1;
          while (1)
          {
            unint64_t v43 = (unsigned __int8 *)(v13 + 2 * v41);
            int v44 = *v43;
            uint64_t v45 = v43[1];
            unsigned int v46 = v15 - v45;
            uint64_t v47 = *((unsigned int *)v111 + v45);
            unsigned int v48 = v9 - (v15 - v45);
            int v49 = 1 << (v9 - (v15 - v45));
            if (v48 < v28)
            {
              uint64_t v42 = (v49 + v47);
              if (v47 < v42)
              {
                unsigned int v50 = v44 & 0xFF00FFFF | ((v15 - v45) << 16) | 0x1000000;
                uint64_t v51 = v42 - v47;
                uint64_t v52 = *((unsigned int *)v111 + v45);
                if ((unint64_t)(v42 - v47) < 8) {
                  goto LABEL_35;
                }
                uint64_t v52 = (v51 & 0xFFFFFFFFFFFFFFF8) + v47;
                int32x4_t v53 = vdupq_n_s32(v50);
                uint64_t v54 = (int32x4_t *)&v102[v47];
                unint64_t v55 = v51 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v54[-1] = v53;
                  *uint64_t v54 = v53;
                  v54 += 2;
                  v55 -= 8;
                }
                while (v55);
                if (v51 != (v51 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_35:
                  uint64_t v56 = v42 - v52;
                  unsigned int v57 = (unsigned int *)&v106[v52];
                  do
                  {
                    *v57++ = v50;
                    --v56;
                  }
                  while (v56);
                }
              }
              goto LABEL_28;
            }
            uint64_t v58 = v9;
            LODWORD(v59) = v107 + v46;
            if ((int)(v107 + v46) <= 1) {
              uint64_t v59 = 1;
            }
            else {
              uint64_t v59 = v59;
            }
            uint64_t v60 = *(unsigned int *)(a4 + 676 + 4 * v59);
            uint64_t v61 = a4 + 52 * v46;
            long long v62 = *(_OWORD *)(v61 + 16);
            v109[0] = *(_OWORD *)v61;
            v109[1] = v62;
            v109[2] = *(_OWORD *)(v61 + 32);
            int v110 = *(_DWORD *)(v61 + 48);
            if (v59 >= 2)
            {
              uint64_t v63 = *((unsigned int *)v109 + v59);
              if (v63)
              {
                unsigned int v64 = v44 & 0xFF00FFFF | ((v15 - v45) << 16) | 0x1000000;
                if (v63 < 8)
                {
                  uint64_t v65 = 0;
LABEL_48:
                  uint64_t v69 = v63 - v65;
                  int v70 = (unsigned int *)&v106[v65 + v47];
                  do
                  {
                    *v70++ = v64;
                    --v69;
                  }
                  while (v69);
                  goto LABEL_50;
                }
                uint64_t v65 = v63 & 0xFFFFFFF8;
                int32x4_t v66 = vdupq_n_s32(v64);
                uint64_t v67 = (int32x4_t *)&v102[v47];
                uint64_t v68 = v65;
                do
                {
                  v67[-1] = v66;
                  *uint64_t v67 = v66;
                  v67 += 2;
                  v68 -= 8;
                }
                while (v68);
                if (v65 != v63) {
                  goto LABEL_48;
                }
              }
            }
LABEL_50:
            if (v17 != v60)
            {
              uint64_t v71 = 0;
              unsigned int v72 = &v105[v47];
              uint64_t v73 = (v17 - v60);
              uint64_t v74 = v13 + 2 * v60;
              do
              {
                int v75 = (unsigned __int8 *)(v74 + 2 * v71);
                int v76 = *v75;
                uint64_t v77 = v75[1];
                unsigned int v78 = *((_DWORD *)v109 + v77);
                unsigned int v79 = (1 << (v48 - (v15 - v77))) + v78;
                unsigned int v80 = (v76 << 8) & 0xFF00FFFF | ((v15 - v77 + v46) << 16) | v44 | 0x2000000;
                if (v79 <= v78 + 1) {
                  unsigned int v81 = v78 + 1;
                }
                else {
                  unsigned int v81 = (1 << (v48 - (v15 - v77))) + v78;
                }
                unsigned int v82 = v81 - v78;
                unsigned int v83 = v81 - 1;
                if (v82 >= 0x10 && v83 >= v78)
                {
                  unsigned int v85 = v78 + (v82 & 0xFFFFFFF8);
                  int32x4_t v86 = vdupq_n_s32(v80);
                  unsigned int v87 = v82 & 0xFFFFFFF8;
                  do
                  {
                    int8x16_t v88 = (int32x4_t *)&v72[v78];
                    *int8x16_t v88 = v86;
                    v88[1] = v86;
                    v78 += 8;
                    v87 -= 8;
                  }
                  while (v87);
                  if (v82 == (v82 & 0xFFFFFFF8)) {
                    goto LABEL_52;
                  }
                }
                else
                {
                  unsigned int v85 = *((_DWORD *)v109 + v77);
                }
                do
                  v72[v85++] = v80;
                while (v85 < v79);
LABEL_52:
                *((_DWORD *)v109 + v77) = v79;
                ++v71;
              }
              while (v71 != v73);
            }
            LODWORD(v42) = v49 + v47;
            uint64_t v9 = v58;
LABEL_28:
            *((_DWORD *)v111 + v45) = v42;
            if (++v41 == v17) {
              goto LABEL_66;
            }
          }
        }
        int v29 = 0;
        int v30 = v9 + v12 + 1;
        unsigned int v31 = -v12;
        unint64_t v32 = v18 - 1;
        uint64_t v33 = v18 - 1;
        uint64_t v34 = a4;
        do
        {
          *(_DWORD *)(v34 + 4) = v29;
          v34 += 4;
          v29 += *(_DWORD *)(v34 + 624) << v11++;
          --v33;
        }
        while (v33);
        unsigned int v28 = -v12;
        if (-v12 >= (v9 + v12 + 1)) {
          goto LABEL_25;
        }
        uint64_t v35 = a4 + 4;
        if (v32 < 8)
        {
          uint64_t v36 = v18 - 1;
          uint64_t v37 = 13 * v31;
          do
          {
            uint64_t v38 = (_DWORD *)(a4 + 4);
            uint64_t v39 = v36;
            do
            {
              v38[v37] = *v38 >> v31;
              ++v38;
              --v39;
            }
            while (v39);
            ++v31;
            v37 += 13;
          }
          while (v30 != v31);
          goto LABEL_25;
        }
        uint64_t v89 = 0;
        uint64_t v90 = v35 + 52 * v31;
        uint64_t v91 = 13 * v31;
        while (1)
        {
          if ((unint64_t)(v90 + 52 * v89 - v35) >= 0x20)
          {
            int32x4_t v93 = vdupq_n_s32(v31);
            unint64_t v94 = (v18 - 1) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v95 = a4;
            do
            {
              uint32x4_t v96 = (uint32x4_t)vnegq_s32(v93);
              uint32x4_t v97 = vshlq_u32(*(uint32x4_t *)(v95 + 20), v96);
              uint64_t v98 = v95 + v91 * 4;
              *(uint32x4_t *)(v98 + 4) = vshlq_u32(*(uint32x4_t *)(v95 + 4), v96);
              *(uint32x4_t *)(v98 + 20) = v97;
              v95 += 32;
              v94 -= 8;
            }
            while (v94);
            unint64_t v92 = v32 & 0xFFFFFFFFFFFFFFF8 | 1;
            if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_68;
            }
          }
          else
          {
            unint64_t v92 = 1;
          }
          uint64_t v99 = (_DWORD *)(a4 + 4 * v92);
          uint64_t v100 = v18 - v92;
          do
          {
            v99[v91] = *v99 >> v31;
            ++v99;
            --v100;
          }
          while (v100);
LABEL_68:
          ++v31;
          ++v89;
          v91 += 13;
          if (v30 == v31) {
            goto LABEL_25;
          }
        }
      }
    }
  }
  return -44;
}

uint64_t HUF_decompress1X2_usingDTable(char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned __int8 *)(a5 + 1) << 8 == 256) {
    return HUF_decompress1X2_usingDTable_internal(a1, a2, a3, a4, a5);
  }
  else {
    return -1;
  }
}

uint64_t HUF_decompress1X2_usingDTable_internal(char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (!a4) {
    return -72;
  }
  uint64_t v5 = a4 - 8;
  if (a4 >= 8)
  {
    if (!a3[a4 - 1]) {
      return -1;
    }
    if (a4 <= 0xFFFFFFFFFFFFFF88)
    {
      uint64_t v6 = *(void *)&a3[v5];
      unsigned int v7 = __clz(a3[a4 - 1]) - 23;
      goto LABEL_17;
    }
    return a4;
  }
  uint64_t v6 = *a3;
  switch(a4)
  {
    case 2uLL:
      goto LABEL_14;
    case 3uLL:
      goto LABEL_13;
    case 4uLL:
      goto LABEL_12;
    case 5uLL:
      goto LABEL_11;
    case 6uLL:
      goto LABEL_10;
    case 7uLL:
      v6 |= (unint64_t)a3[6] << 48;
LABEL_10:
      v6 += (unint64_t)a3[5] << 40;
LABEL_11:
      v6 += (unint64_t)a3[4] << 32;
LABEL_12:
      v6 += (unint64_t)a3[3] << 24;
LABEL_13:
      v6 += (unint64_t)a3[2] << 16;
LABEL_14:
      v6 += (unint64_t)a3[1] << 8;
      break;
    default:
      break;
  }
  if (!a3[a4 - 1]) {
    return -20;
  }
  uint64_t v5 = 0;
  unsigned int v7 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
LABEL_17:
  uint64_t v9 = &a1[a2];
  uint64_t v10 = a5 + 4;
  for (int i = -*(unsigned __int16 *)(a5 + 2) & 0x3F; v7 <= 0x40; a1 = &v23[*(unsigned __int8 *)(v24 + 3)])
  {
    if (v5 >= 8)
    {
      BOOL v13 = 0;
      unsigned int v14 = v7 >> 3;
      v7 &= 7u;
    }
    else
    {
      if (!v5) {
        break;
      }
      int v12 = &a3[v5 - (v7 >> 3)];
      BOOL v13 = v12 < a3;
      if (v12 >= a3) {
        unsigned int v14 = v7 >> 3;
      }
      else {
        unsigned int v14 = v5;
      }
      v7 -= 8 * v14;
    }
    v5 -= v14;
    uint64_t v6 = *(void *)&a3[v5];
    if (a1 >= v9 - 7) {
      break;
    }
    if (v13) {
      break;
    }
    uint64_t v15 = v10 + 4 * ((unint64_t)(v6 << v7) >> i);
    *(_WORD *)a1 = *(_WORD *)v15;
    unsigned int v16 = v7 + *(unsigned __int8 *)(v15 + 2);
    int v17 = &a1[*(unsigned __int8 *)(v15 + 3)];
    uint64_t v18 = v10 + 4 * ((unint64_t)(v6 << v16) >> i);
    *(_WORD *)int v17 = *(_WORD *)v18;
    unsigned int v19 = v16 + *(unsigned __int8 *)(v18 + 2);
    int v20 = &v17[*(unsigned __int8 *)(v18 + 3)];
    uint64_t v21 = v10 + 4 * ((unint64_t)(v6 << v19) >> i);
    *(_WORD *)int v20 = *(_WORD *)v21;
    unsigned int v22 = v19 + *(unsigned __int8 *)(v21 + 2);
    uint64_t v23 = &v20[*(unsigned __int8 *)(v21 + 3)];
    uint64_t v24 = v10 + 4 * ((unint64_t)(v6 << v22) >> i);
    *(_WORD *)uint64_t v23 = *(_WORD *)v24;
    unsigned int v7 = v22 + *(unsigned __int8 *)(v24 + 2);
  }
  for (unint64_t j = (unint64_t)(v9 - 2); v7 <= 0x40; a1 += *(unsigned __int8 *)(v29 + 3))
  {
    if (v5 >= 8)
    {
      BOOL v27 = 0;
      unsigned int v28 = v7 >> 3;
      v7 &= 7u;
    }
    else
    {
      if (!v5) {
        break;
      }
      uint64_t v26 = &a3[v5 - (v7 >> 3)];
      BOOL v27 = v26 < a3;
      if (v26 >= a3) {
        unsigned int v28 = v7 >> 3;
      }
      else {
        unsigned int v28 = v5;
      }
      v7 -= 8 * v28;
    }
    v5 -= v28;
    uint64_t v6 = *(void *)&a3[v5];
    if ((unint64_t)a1 > j) {
      break;
    }
    if (v27) {
      break;
    }
    uint64_t v29 = v10 + 4 * ((unint64_t)(v6 << v7) >> i);
    *(_WORD *)a1 = *(_WORD *)v29;
    v7 += *(unsigned __int8 *)(v29 + 2);
  }
  while ((unint64_t)a1 <= j)
  {
    uint64_t v30 = v10 + 4 * ((unint64_t)(v6 << v7) >> i);
    *(_WORD *)a1 = *(_WORD *)v30;
    v7 += *(unsigned __int8 *)(v30 + 2);
    a1 += *(unsigned __int8 *)(v30 + 3);
  }
  if (a1 >= v9) {
    goto LABEL_49;
  }
  unint64_t v31 = (unint64_t)(v6 << v7) >> i;
  unint64_t v32 = (char *)(v10 + 4 * v31);
  *a1 = *v32;
  if (v32[3] == 1)
  {
    v7 += v32[2];
LABEL_49:
    if (v7 == 64 && v5 == 0) {
      return a2;
    }
    else {
      return -20;
    }
  }
  if (v7 > 0x3F) {
    goto LABEL_49;
  }
  unsigned int v34 = v7 + *(unsigned __int8 *)(v10 + 4 * v31 + 2);
  if (v34 >= 0x40) {
    int v35 = 64;
  }
  else {
    int v35 = v34;
  }
  if (v35 == 64 && v5 == 0) {
    return a2;
  }
  else {
    return -20;
  }
}

unint64_t HUF_decompress1X2_DCtx_wksp(int *a1, char *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result = HUF_readDTableX2_wksp(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return HUF_decompress1X2_usingDTable_internal(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

unint64_t HUF_decompress4X2_usingDTable(char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned __int8 *)(a5 + 1) << 8 == 256) {
    return HUF_decompress4X2_usingDTable_internal(a1, a2, a3, a4, a5);
  }
  else {
    return -1;
  }
}

unint64_t HUF_decompress4X2_usingDTable_internal(char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  if (a4 < 0xA) {
    return -20;
  }
  uint64_t v219 = v5;
  uint64_t v220 = v6;
  unint64_t v218 = 0;
  long long v216 = 0u;
  long long v217 = 0u;
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v11 = a3[2];
  unint64_t v13 = v9 + 6 + v10 + v11;
  unint64_t v14 = a4 - v13;
  if (a4 < v13) {
    return -20;
  }
  if (!v9) {
    return -72;
  }
  int v17 = (unsigned __int8 *)(a3 + 3);
  if (v9 < 8)
  {
    uint64_t v20 = *v17;
    switch((int)v9)
    {
      case 2:
        goto LABEL_16;
      case 3:
        goto LABEL_15;
      case 4:
        goto LABEL_14;
      case 5:
        goto LABEL_13;
      case 6:
        goto LABEL_12;
      case 7:
        v20 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_12:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_13:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_14:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_15:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_16:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 7) << 8;
        break;
      default:
        break;
    }
    unsigned int v22 = v17[v9 - 1];
    if (!v22) {
      return -20;
    }
    unsigned int v21 = __clz(v22) - 8 * v9 + 41;
    uint64_t v19 = 6;
    if (!v10) {
      return -72;
    }
  }
  else
  {
    unsigned int v18 = v17[v9 - 1];
    if (!v18) {
      return -1;
    }
    uint64_t v19 = v9 - 2;
    uint64_t v20 = *(void *)((char *)a3 + v9 - 2);
    unsigned int v21 = __clz(v18) - 23;
    if (!v10) {
      return -72;
    }
  }
  uint64_t v12 = v9 + 6;
  uint64_t v23 = (unsigned __int8 *)a3 + v9 + 6;
  if (v10 >= 8)
  {
    if (v23[v10 - 1])
    {
      uint64_t v24 = v10 - 8;
      uint64_t v25 = *(void *)&v23[v10 - 8];
      unsigned int v26 = __clz(v23[v10 - 1]) - 23;
      goto LABEL_31;
    }
    return -1;
  }
  uint64_t v25 = *v23;
  switch((int)v10)
  {
    case 2:
      goto LABEL_28;
    case 3:
      goto LABEL_27;
    case 4:
      goto LABEL_26;
    case 5:
      goto LABEL_25;
    case 6:
      goto LABEL_24;
    case 7:
      v25 |= (unint64_t)v23[6] << 48;
LABEL_24:
      v25 += (unint64_t)v23[5] << 40;
LABEL_25:
      v25 += (unint64_t)v23[4] << 32;
LABEL_26:
      v25 += (unint64_t)v23[3] << 24;
LABEL_27:
      v25 += (unint64_t)v23[2] << 16;
LABEL_28:
      v25 += (unint64_t)v23[1] << 8;
      break;
    default:
      break;
  }
  if (!v23[v10 - 1]) {
    return -20;
  }
  uint64_t v24 = 0;
  unsigned int v26 = __clz(v23[v10 - 1]) - 8 * v10 + 41;
LABEL_31:
  if (!v11) {
    return -72;
  }
  BOOL v27 = &v23[v10];
  if (v11 < 8)
  {
    uint64_t v28 = *v27;
    switch((int)v11)
    {
      case 2:
        goto LABEL_44;
      case 3:
        goto LABEL_43;
      case 4:
        goto LABEL_42;
      case 5:
        goto LABEL_41;
      case 6:
        goto LABEL_40;
      case 7:
        v28 |= (unint64_t)v27[6] << 48;
LABEL_40:
        v28 += (unint64_t)v27[5] << 40;
LABEL_41:
        v28 += (unint64_t)v27[4] << 32;
LABEL_42:
        v28 += (unint64_t)v27[3] << 24;
LABEL_43:
        v28 += (unint64_t)v27[2] << 16;
LABEL_44:
        v28 += (unint64_t)v27[1] << 8;
        break;
      default:
        break;
    }
    if (v27[v11 - 1])
    {
      int v209 = *(unsigned __int16 *)(a5 + 2);
      uint64_t v211 = a2;
      unint64_t v212 = (char *)a3 + v12;
      uint64_t v215 = v24;
      uint64_t v210 = 0;
      unsigned int v29 = __clz(v27[v11 - 1]) - 8 * v11 + 41;
      goto LABEL_47;
    }
    return -20;
  }
  if (!v27[v11 - 1]) {
    return -1;
  }
  int v209 = *(unsigned __int16 *)(a5 + 2);
  uint64_t v211 = a2;
  unint64_t v212 = (char *)a3 + v12;
  uint64_t v215 = v24;
  uint64_t v210 = v11 - 8;
  uint64_t v28 = *(void *)&v27[v11 - 8];
  unsigned int v29 = __clz(v27[v11 - 1]) - 23;
LABEL_47:
  uint64_t v213 = &v23[v10];
  unint64_t result = BIT_initDStream((uint64_t)&v216, &v27[v11], v14);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v30 = &a1[v211];
    uint64_t v31 = a5 + 4;
    unint64_t v32 = (unint64_t)(v211 + 3) >> 2;
    uint64_t v33 = &a1[v32];
    unsigned int v34 = &a1[v32 + v32];
    unint64_t v35 = (unint64_t)&v34[v32];
    uint64_t v36 = v216;
    unint64_t v214 = (unint64_t)&a1[v211 - 7];
    if ((unint64_t)&v34[v32] < v214)
    {
      unint64_t v207 = &v34[v32];
      uint64_t v208 = &a1[v211];
      int v37 = -v209 & 0x3F;
      unsigned int v38 = DWORD2(v216);
      unint64_t v39 = v218;
      long long v40 = (uint64_t *)v217;
      uint64_t v41 = &v34[v32];
      unint64_t v205 = &a1[v32];
      unint64_t v206 = &a1[v32 + v32];
      uint64_t v42 = v206;
      unint64_t v43 = &a1[v32];
      uint64_t v44 = v210;
      while (1)
      {
        uint64_t v45 = v31 + 4 * ((unint64_t)(v20 << v21) >> v37);
        *(_WORD *)a1 = *(_WORD *)v45;
        unsigned int v46 = v21 + *(unsigned __int8 *)(v45 + 2);
        uint64_t v47 = &a1[*(unsigned __int8 *)(v45 + 3)];
        uint64_t v48 = v31 + 4 * ((unint64_t)(v25 << v26) >> v37);
        *(_WORD *)unint64_t v43 = *(_WORD *)v48;
        unsigned int v49 = v26 + *(unsigned __int8 *)(v48 + 2);
        unsigned int v50 = &v43[*(unsigned __int8 *)(v48 + 3)];
        uint64_t v51 = v31 + 4 * ((unint64_t)(v28 << v29) >> v37);
        *(_WORD *)uint64_t v42 = *(_WORD *)v51;
        unsigned int v52 = v29 + *(unsigned __int8 *)(v51 + 2);
        int32x4_t v53 = &v42[*(unsigned __int8 *)(v51 + 3)];
        uint64_t v54 = v31 + 4 * ((unint64_t)(v36 << v38) >> v37);
        *(_WORD *)uint64_t v41 = *(_WORD *)v54;
        unsigned int v55 = v38 + *(unsigned __int8 *)(v54 + 2);
        uint64_t v56 = &v41[*(unsigned __int8 *)(v54 + 3)];
        uint64_t v57 = v31 + 4 * ((unint64_t)(v20 << v46) >> v37);
        *(_WORD *)uint64_t v47 = *(_WORD *)v57;
        unsigned int v58 = v46 + *(unsigned __int8 *)(v57 + 2);
        uint64_t v59 = *(unsigned __int8 *)(v57 + 3);
        uint64_t v60 = v31 + 4 * ((unint64_t)(v25 << v49) >> v37);
        *(_WORD *)unsigned int v50 = *(_WORD *)v60;
        unsigned int v61 = v49 + *(unsigned __int8 *)(v60 + 2);
        long long v62 = &v50[*(unsigned __int8 *)(v60 + 3)];
        uint64_t v63 = v31 + 4 * ((unint64_t)(v28 << v52) >> v37);
        *(_WORD *)int32x4_t v53 = *(_WORD *)v63;
        unsigned int v64 = v52 + *(unsigned __int8 *)(v63 + 2);
        uint64_t v65 = &v53[*(unsigned __int8 *)(v63 + 3)];
        uint64_t v66 = v31 + 4 * ((unint64_t)(v36 << v55) >> v37);
        *(_WORD *)uint64_t v56 = *(_WORD *)v66;
        unsigned int v67 = v55 + *(unsigned __int8 *)(v66 + 2);
        uint64_t v68 = &v56[*(unsigned __int8 *)(v66 + 3)];
        uint64_t v69 = &v47[v59];
        uint64_t v70 = v31 + 4 * ((unint64_t)(v20 << v58) >> v37);
        *(_WORD *)uint64_t v69 = *(_WORD *)v70;
        unsigned int v71 = v58 + *(unsigned __int8 *)(v70 + 2);
        unsigned int v72 = &v69[*(unsigned __int8 *)(v70 + 3)];
        uint64_t v73 = v31 + 4 * ((unint64_t)(v25 << v61) >> v37);
        *(_WORD *)long long v62 = *(_WORD *)v73;
        unsigned int v74 = v61 + *(unsigned __int8 *)(v73 + 2);
        int v75 = &v62[*(unsigned __int8 *)(v73 + 3)];
        uint64_t v76 = v31 + 4 * ((unint64_t)(v28 << v64) >> v37);
        *(_WORD *)uint64_t v65 = *(_WORD *)v76;
        unsigned int v77 = v64 + *(unsigned __int8 *)(v76 + 2);
        unsigned int v78 = &v65[*(unsigned __int8 *)(v76 + 3)];
        uint64_t v79 = v31 + 4 * ((unint64_t)(v36 << v67) >> v37);
        *(_WORD *)uint64_t v68 = *(_WORD *)v79;
        unsigned int v80 = v67 + *(unsigned __int8 *)(v79 + 2);
        unsigned int v81 = &v68[*(unsigned __int8 *)(v79 + 3)];
        uint64_t v82 = v31 + 4 * ((unint64_t)(v20 << v71) >> v37);
        *(_WORD *)unsigned int v72 = *(_WORD *)v82;
        unsigned int v21 = v71 + *(unsigned __int8 *)(v82 + 2);
        uint64_t v83 = *(unsigned __int8 *)(v82 + 3);
        uint64_t v84 = v31 + 4 * ((unint64_t)(v25 << v74) >> v37);
        *(_WORD *)int v75 = *(_WORD *)v84;
        int v85 = *(unsigned __int8 *)(v84 + 2);
        uint64_t v86 = *(unsigned __int8 *)(v84 + 3);
        uint64_t v87 = v31 + 4 * ((unint64_t)(v28 << v77) >> v37);
        *(_WORD *)unsigned int v78 = *(_WORD *)v87;
        int v88 = *(unsigned __int8 *)(v87 + 2);
        uint64_t v89 = *(unsigned __int8 *)(v87 + 3);
        uint64_t v90 = v31 + 4 * ((unint64_t)(v36 << v80) >> v37);
        *(_WORD *)unsigned int v81 = *(_WORD *)v90;
        uint64_t v91 = v44;
        if (v19 < 14)
        {
          int v92 = 3;
          unsigned int v26 = v74 + v85;
          int v93 = *(unsigned __int8 *)(v90 + 2);
          uint64_t v94 = *(unsigned __int8 *)(v90 + 3);
          uint64_t v95 = v215;
          if (v215 >= 8)
          {
LABEL_52:
            int v96 = 0;
            uint64_t v97 = v95 - (v26 >> 3);
            v26 &= 7u;
            uint64_t v215 = v97;
            uint64_t v25 = *(void *)&v212[v97];
            unsigned int v29 = v77 + v88;
            uint64_t v44 = v91;
            if (v91 >= 8) {
              goto LABEL_53;
            }
            goto LABEL_60;
          }
        }
        else
        {
          int v92 = 0;
          v19 -= v21 >> 3;
          v21 &= 7u;
          uint64_t v20 = *(void *)((char *)a3 + v19);
          unsigned int v26 = v74 + v85;
          int v93 = *(unsigned __int8 *)(v90 + 2);
          uint64_t v94 = *(unsigned __int8 *)(v90 + 3);
          uint64_t v95 = v215;
          if (v215 >= 8) {
            goto LABEL_52;
          }
        }
        int v96 = 3;
        unsigned int v29 = v77 + v88;
        uint64_t v44 = v91;
        if (v91 >= 8)
        {
LABEL_53:
          int v98 = 0;
          v44 -= v29 >> 3;
          v29 &= 7u;
          uint64_t v28 = *(void *)&v213[v44];
          unsigned int v38 = v80 + v93;
          if ((unint64_t)v40 >= v39) {
            goto LABEL_54;
          }
          goto LABEL_61;
        }
LABEL_60:
        int v98 = 3;
        unsigned int v38 = v80 + v93;
        if ((unint64_t)v40 >= v39)
        {
LABEL_54:
          int v99 = 0;
          long long v40 = (uint64_t *)((char *)v40 - (v38 >> 3));
          v38 &= 7u;
          uint64_t v36 = *v40;
          goto LABEL_55;
        }
LABEL_61:
        int v99 = 3;
LABEL_55:
        a1 = &v72[v83];
        unint64_t v43 = &v75[v86];
        uint64_t v42 = &v78[v89];
        uint64_t v41 = &v81[v94];
        if (v96 | v92 | v98 | v99 || (unint64_t)v41 >= v214)
        {
          DWORD2(v216) = v38;
          *(void *)&long long v217 = v40;
          unint64_t v35 = (unint64_t)v207;
          uint64_t v30 = v208;
          uint64_t v33 = v205;
          unsigned int v34 = v206;
          goto LABEL_64;
        }
      }
    }
    unint64_t v43 = &a1[v32];
    uint64_t v42 = &a1[v32 + v32];
    uint64_t v41 = &v34[v32];
    uint64_t v44 = v210;
LABEL_64:
    *(void *)&long long v216 = v36;
    unint64_t result = -20;
    if (a1 <= v33 && v43 <= v34 && (unint64_t)v42 <= v35)
    {
      uint64_t v100 = v44;
      int v101 = -v209 & 0x3F;
      if (v21 <= 0x40)
      {
        uint64_t v102 = v215;
        int v103 = v212;
        uint64_t v104 = v213;
        do
        {
          if (v19 >= 14)
          {
            BOOL v107 = 0;
            LODWORD(v106) = v21 >> 3;
            v21 &= 7u;
          }
          else
          {
            if (v19 == 6) {
              break;
            }
            uint64_t v106 = v21 >> 3;
            BOOL v107 = v19 - v106 < 6;
            if (v19 - v106 < 6) {
              LODWORD(v106) = v19 - 6;
            }
            v21 -= 8 * v106;
          }
          v19 -= v106;
          uint64_t v20 = *(void *)((char *)a3 + v19);
          if (a1 >= v33 - 7) {
            break;
          }
          if (v107) {
            break;
          }
          uint64_t v108 = v31 + 4 * ((unint64_t)(v20 << v21) >> v101);
          *(_WORD *)a1 = *(_WORD *)v108;
          unsigned int v109 = v21 + *(unsigned __int8 *)(v108 + 2);
          int v110 = &a1[*(unsigned __int8 *)(v108 + 3)];
          uint64_t v111 = v31 + 4 * ((unint64_t)(v20 << v109) >> v101);
          *(_WORD *)int v110 = *(_WORD *)v111;
          unsigned int v112 = v109 + *(unsigned __int8 *)(v111 + 2);
          uint64_t v113 = &v110[*(unsigned __int8 *)(v111 + 3)];
          uint64_t v114 = v31 + 4 * ((unint64_t)(v20 << v112) >> v101);
          *(_WORD *)uint64_t v113 = *(_WORD *)v114;
          unsigned int v115 = v112 + *(unsigned __int8 *)(v114 + 2);
          uint64_t v116 = &v113[*(unsigned __int8 *)(v114 + 3)];
          uint64_t v117 = v31 + 4 * ((unint64_t)(v20 << v115) >> v101);
          *(_WORD *)uint64_t v116 = *(_WORD *)v117;
          unsigned int v21 = v115 + *(unsigned __int8 *)(v117 + 2);
          a1 = &v116[*(unsigned __int8 *)(v117 + 3)];
        }
        while (v21 <= 0x40);
        for (unint64_t i = (unint64_t)(v33 - 2); v21 <= 0x40; a1 += *(unsigned __int8 *)(v120 + 3))
        {
          if (v19 >= 14)
          {
            BOOL v119 = 0;
            LODWORD(v118) = v21 >> 3;
            v21 &= 7u;
          }
          else
          {
            if (v19 == 6) {
              break;
            }
            uint64_t v118 = v21 >> 3;
            BOOL v119 = v19 - v118 < 6;
            if (v19 - v118 < 6) {
              LODWORD(v118) = v19 - 6;
            }
            v21 -= 8 * v118;
          }
          v19 -= v118;
          uint64_t v20 = *(void *)((char *)a3 + v19);
          if ((unint64_t)a1 > i) {
            break;
          }
          if (v119) {
            break;
          }
          uint64_t v120 = v31 + 4 * ((unint64_t)(v20 << v21) >> v101);
          *(_WORD *)a1 = *(_WORD *)v120;
          v21 += *(unsigned __int8 *)(v120 + 2);
        }
      }
      else
      {
        uint64_t v102 = v215;
        int v103 = v212;
        uint64_t v104 = v213;
        unint64_t i = (unint64_t)(v33 - 2);
      }
      for (unsigned int j = v21; (unint64_t)a1 <= i; a1 += *(unsigned __int8 *)(v122 + 3))
      {
        uint64_t v122 = v31 + 4 * ((unint64_t)(v20 << j) >> v101);
        *(_WORD *)a1 = *(_WORD *)v122;
        j += *(unsigned __int8 *)(v122 + 2);
      }
      if (a1 < v33)
      {
        unint64_t v123 = (unint64_t)(v20 << j) >> v101;
        char v124 = (char *)(v31 + 4 * v123);
        *a1 = *v124;
        if (v124[3] == 1)
        {
          j += v124[2];
        }
        else if (j <= 0x3F)
        {
          unsigned int v125 = j + *(unsigned __int8 *)(v31 + 4 * v123 + 2);
          if (v125 >= 0x40) {
            unsigned int j = 64;
          }
          else {
            unsigned int j = v125;
          }
        }
      }
      for (; v26 <= 0x40; unint64_t v43 = &v138[*(unsigned __int8 *)(v139 + 3)])
      {
        if (v102 >= 8)
        {
          BOOL v129 = 0;
          LODWORD(v126) = v26 >> 3;
          v26 &= 7u;
        }
        else
        {
          if (!v102) {
            break;
          }
          uint64_t v126 = v26 >> 3;
          uint64_t v127 = &v103[v102 - v126];
          BOOL v128 = v127 >= v103;
          BOOL v129 = v127 < v103;
          if (!v128) {
            LODWORD(v126) = v102;
          }
          v26 -= 8 * v126;
        }
        v102 -= v126;
        uint64_t v25 = *(void *)&v103[v102];
        if (v43 >= v34 - 7) {
          break;
        }
        if (v129) {
          break;
        }
        uint64_t v130 = v31 + 4 * ((unint64_t)(v25 << v26) >> v101);
        *(_WORD *)unint64_t v43 = *(_WORD *)v130;
        unsigned int v131 = v26 + *(unsigned __int8 *)(v130 + 2);
        uint64_t v132 = &v43[*(unsigned __int8 *)(v130 + 3)];
        uint64_t v133 = v31 + 4 * ((unint64_t)(v25 << v131) >> v101);
        *(_WORD *)uint64_t v132 = *(_WORD *)v133;
        unsigned int v134 = v131 + *(unsigned __int8 *)(v133 + 2);
        char v135 = &v132[*(unsigned __int8 *)(v133 + 3)];
        uint64_t v136 = v31 + 4 * ((unint64_t)(v25 << v134) >> v101);
        *(_WORD *)char v135 = *(_WORD *)v136;
        unsigned int v137 = v134 + *(unsigned __int8 *)(v136 + 2);
        uint64_t v138 = &v135[*(unsigned __int8 *)(v136 + 3)];
        uint64_t v139 = v31 + 4 * ((unint64_t)(v25 << v137) >> v101);
        *(_WORD *)uint64_t v138 = *(_WORD *)v139;
        unsigned int v26 = v137 + *(unsigned __int8 *)(v139 + 2);
      }
      for (unint64_t k = (unint64_t)(v34 - 2); v26 <= 0x40; v43 += *(unsigned __int8 *)(v144 + 3))
      {
        if (v102 >= 8)
        {
          BOOL v143 = 0;
          LODWORD(v141) = v26 >> 3;
          v26 &= 7u;
        }
        else
        {
          if (!v102) {
            break;
          }
          uint64_t v141 = v26 >> 3;
          int8x16_t v142 = &v103[v102 - v141];
          BOOL v128 = v142 >= v103;
          BOOL v143 = v142 < v103;
          if (!v128) {
            LODWORD(v141) = v102;
          }
          v26 -= 8 * v141;
        }
        v102 -= v141;
        uint64_t v25 = *(void *)&v103[v102];
        if ((unint64_t)v43 > k) {
          break;
        }
        if (v143) {
          break;
        }
        uint64_t v144 = v31 + 4 * ((unint64_t)(v25 << v26) >> v101);
        *(_WORD *)unint64_t v43 = *(_WORD *)v144;
        v26 += *(unsigned __int8 *)(v144 + 2);
      }
      while ((unint64_t)v43 <= k)
      {
        uint64_t v145 = v31 + 4 * ((unint64_t)(v25 << v26) >> v101);
        *(_WORD *)unint64_t v43 = *(_WORD *)v145;
        v26 += *(unsigned __int8 *)(v145 + 2);
        v43 += *(unsigned __int8 *)(v145 + 3);
      }
      if (v43 < v34)
      {
        unint64_t v146 = (unint64_t)(v25 << v26) >> v101;
        uint64_t v147 = (char *)(v31 + 4 * v146);
        *unint64_t v43 = *v147;
        if (v147[3] != 1)
        {
          uint64_t v148 = v211;
          if (v26 <= 0x3F)
          {
            unsigned int v162 = v26 + *(unsigned __int8 *)(v31 + 4 * v146 + 2);
            if (v162 >= 0x40) {
              unsigned int v26 = 64;
            }
            else {
              unsigned int v26 = v162;
            }
          }
          goto LABEL_124;
        }
        v26 += v147[2];
      }
      uint64_t v148 = v211;
LABEL_124:
      while (v29 <= 0x40)
      {
        if (v100 >= 8)
        {
          BOOL v151 = 0;
          LODWORD(v149) = v29 >> 3;
          v29 &= 7u;
        }
        else
        {
          if (!v100) {
            break;
          }
          uint64_t v149 = v29 >> 3;
          long long v150 = &v104[v100 - v149];
          BOOL v128 = v150 >= v104;
          BOOL v151 = v150 < v104;
          if (!v128) {
            LODWORD(v149) = v100;
          }
          v29 -= 8 * v149;
        }
        v100 -= v149;
        uint64_t v28 = *(void *)&v104[v100];
        if ((unint64_t)v42 >= v35 - 7) {
          break;
        }
        if (v151) {
          break;
        }
        uint64_t v152 = v31 + 4 * ((unint64_t)(v28 << v29) >> v101);
        *(_WORD *)uint64_t v42 = *(_WORD *)v152;
        unsigned int v153 = v29 + *(unsigned __int8 *)(v152 + 2);
        uint64_t v154 = &v42[*(unsigned __int8 *)(v152 + 3)];
        uint64_t v155 = v31 + 4 * ((unint64_t)(v28 << v153) >> v101);
        *(_WORD *)uint64_t v154 = *(_WORD *)v155;
        unsigned int v156 = v153 + *(unsigned __int8 *)(v155 + 2);
        int8x16_t v157 = &v154[*(unsigned __int8 *)(v155 + 3)];
        uint64_t v158 = v31 + 4 * ((unint64_t)(v28 << v156) >> v101);
        *(_WORD *)int8x16_t v157 = *(_WORD *)v158;
        unsigned int v159 = v156 + *(unsigned __int8 *)(v158 + 2);
        long long v160 = &v157[*(unsigned __int8 *)(v158 + 3)];
        uint64_t v161 = v31 + 4 * ((unint64_t)(v28 << v159) >> v101);
        *(_WORD *)long long v160 = *(_WORD *)v161;
        unsigned int v29 = v159 + *(unsigned __int8 *)(v161 + 2);
        uint64_t v42 = &v160[*(unsigned __int8 *)(v161 + 3)];
      }
      for (unint64_t m = v35 - 2; v29 <= 0x40; v42 += *(unsigned __int8 *)(v167 + 3))
      {
        if (v100 >= 8)
        {
          BOOL v166 = 0;
          LODWORD(v164) = v29 >> 3;
          v29 &= 7u;
        }
        else
        {
          if (!v100) {
            break;
          }
          uint64_t v164 = v29 >> 3;
          uint64_t v165 = &v104[v100 - v164];
          BOOL v128 = v165 >= v104;
          BOOL v166 = v165 < v104;
          if (!v128) {
            LODWORD(v164) = v100;
          }
          v29 -= 8 * v164;
        }
        v100 -= v164;
        uint64_t v28 = *(void *)&v104[v100];
        if ((unint64_t)v42 > m) {
          break;
        }
        if (v166) {
          break;
        }
        uint64_t v167 = v31 + 4 * ((unint64_t)(v28 << v29) >> v101);
        *(_WORD *)uint64_t v42 = *(_WORD *)v167;
        v29 += *(unsigned __int8 *)(v167 + 2);
      }
      while ((unint64_t)v42 <= m)
      {
        uint64_t v168 = v31 + 4 * ((unint64_t)(v28 << v29) >> v101);
        *(_WORD *)uint64_t v42 = *(_WORD *)v168;
        v29 += *(unsigned __int8 *)(v168 + 2);
        v42 += *(unsigned __int8 *)(v168 + 3);
      }
      if ((unint64_t)v42 < v35)
      {
        unint64_t v169 = (unint64_t)(v28 << v29) >> v101;
        unint64_t v170 = (char *)(v31 + 4 * v169);
        *uint64_t v42 = *v170;
        if (v170[3] == 1)
        {
          v29 += v170[2];
        }
        else if (v29 <= 0x3F)
        {
          unsigned int v171 = v29 + *(unsigned __int8 *)(v31 + 4 * v169 + 2);
          if (v171 >= 0x40) {
            unsigned int v29 = 64;
          }
          else {
            unsigned int v29 = v171;
          }
        }
      }
      unsigned int v172 = DWORD2(v216);
      for (n = v100; v172 <= 0x40; uint64_t v41 = &v186[*(unsigned __int8 *)(v187 + 3)])
      {
        if ((unint64_t)v217 >= v218)
        {
          BOOL v175 = 0;
          float64x2x2_t v176 = (uint64_t *)(v217 - (v172 >> 3));
          *(void *)&long long v217 = v176;
          v172 &= 7u;
        }
        else
        {
          if ((void)v217 == *((void *)&v217 + 1)) {
            break;
          }
          uint64_t v174 = v172 >> 3;
          uint64_t v100 = n;
          BOOL v175 = (unint64_t)(v217 - v174) < *((void *)&v217 + 1);
          if ((unint64_t)(v217 - v174) >= *((void *)&v217 + 1)) {
            uint64_t v174 = v174;
          }
          else {
            uint64_t v174 = (v217 - DWORD2(v217));
          }
          float64x2x2_t v176 = (uint64_t *)(v217 - v174);
          *(void *)&long long v217 = v217 - v174;
          v172 -= 8 * v174;
        }
        DWORD2(v216) = v172;
        uint64_t v177 = *v176;
        *(void *)&long long v216 = v177;
        if ((unint64_t)v41 >= v214) {
          break;
        }
        if (v175) {
          break;
        }
        uint64_t v178 = v31 + 4 * ((unint64_t)(v177 << v172) >> v101);
        *(_WORD *)uint64_t v41 = *(_WORD *)v178;
        unsigned int v179 = v172 + *(unsigned __int8 *)(v178 + 2);
        float64x2x2_t v180 = &v41[*(unsigned __int8 *)(v178 + 3)];
        uint64_t v181 = v31 + 4 * ((unint64_t)(v177 << v179) >> v101);
        *(_WORD *)float64x2x2_t v180 = *(_WORD *)v181;
        unsigned int v182 = v179 + *(unsigned __int8 *)(v181 + 2);
        float64x2x2_t v183 = &v180[*(unsigned __int8 *)(v181 + 3)];
        uint64_t v184 = v31 + 4 * ((unint64_t)(v177 << v182) >> v101);
        *(_WORD *)float64x2x2_t v183 = *(_WORD *)v184;
        unsigned int v185 = v182 + *(unsigned __int8 *)(v184 + 2);
        unint64_t v186 = &v183[*(unsigned __int8 *)(v184 + 3)];
        uint64_t v187 = v31 + 4 * ((unint64_t)(v177 << v185) >> v101);
        *(_WORD *)unint64_t v186 = *(_WORD *)v187;
        unsigned int v172 = v185 + *(unsigned __int8 *)(v187 + 2);
        DWORD2(v216) = v172;
      }
      for (iunint64_t i = (unint64_t)(v30 - 2); v172 <= 0x40; v41 += *(unsigned __int8 *)(v193 + 3))
      {
        if ((unint64_t)v217 >= v218)
        {
          BOOL v190 = 0;
          unsigned int v191 = (uint64_t *)(v217 - (v172 >> 3));
          *(void *)&long long v217 = v191;
          v172 &= 7u;
        }
        else
        {
          if ((void)v217 == *((void *)&v217 + 1)) {
            break;
          }
          uint64_t v189 = v172 >> 3;
          uint64_t v100 = n;
          BOOL v190 = (unint64_t)(v217 - v189) < *((void *)&v217 + 1);
          if ((unint64_t)(v217 - v189) >= *((void *)&v217 + 1)) {
            uint64_t v189 = v189;
          }
          else {
            uint64_t v189 = (v217 - DWORD2(v217));
          }
          unsigned int v191 = (uint64_t *)(v217 - v189);
          *(void *)&long long v217 = v217 - v189;
          v172 -= 8 * v189;
        }
        DWORD2(v216) = v172;
        uint64_t v192 = *v191;
        *(void *)&long long v216 = v192;
        if ((unint64_t)v41 > ii) {
          break;
        }
        if (v190) {
          break;
        }
        uint64_t v193 = v31 + 4 * ((unint64_t)(v192 << v172) >> v101);
        *(_WORD *)uint64_t v41 = *(_WORD *)v193;
        v172 += *(unsigned __int8 *)(v193 + 2);
        DWORD2(v216) = v172;
      }
      while ((unint64_t)v41 <= ii)
      {
        uint64_t v194 = v31 + 4 * ((void)v216 << v172 >> v101);
        *(_WORD *)uint64_t v41 = *(_WORD *)v194;
        v172 += *(unsigned __int8 *)(v194 + 2);
        DWORD2(v216) = v172;
        v41 += *(unsigned __int8 *)(v194 + 3);
      }
      if (v41 < v30)
      {
        uint64_t v195 = (void)v216 << v172 >> v101;
        unsigned int v196 = (char *)(v31 + 4 * v195);
        *uint64_t v41 = *v196;
        if (v196[3] == 1)
        {
          unsigned int v172 = DWORD2(v216) + v196[2];
        }
        else
        {
          unsigned int v172 = DWORD2(v216);
          if (DWORD2(v216) <= 0x3F)
          {
            unsigned int v197 = DWORD2(v216) + *(unsigned __int8 *)(v31 + 4 * v195 + 2);
            if (v197 >= 0x40) {
              unsigned int v172 = 64;
            }
            else {
              unsigned int v172 = v197;
            }
          }
        }
      }
      if (v172 == 64
        && (void)v217 == *((void *)&v217 + 1)
        && v29 == 64
        && v100 == 0
        && v26 == 64
        && v102 == 0
        && j == 64
        && v19 == 6)
      {
        return v148;
      }
      else
      {
        return -20;
      }
    }
  }
  return result;
}

unint64_t HUF_decompress4X2_DCtx_wksp(int *a1, char *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result = HUF_readDTableX2_wksp(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return HUF_decompress4X2_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

uint64_t HUF_decompress1X_usingDTable(char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a5 + 1)) {
    return HUF_decompress1X2_usingDTable_internal(a1, a2, a3, a4, a5);
  }
  else {
    return HUF_decompress1X1_usingDTable_internal(a1, a2, a3, a4, a5);
  }
}

unint64_t HUF_decompress4X_usingDTable(char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a5 + 1)) {
    return HUF_decompress4X2_usingDTable_internal(a1, a2, a3, a4, a5);
  }
  else {
    return HUF_decompress4X1_usingDTable_internal(a1, a2, a3, a4, a5);
  }
}

BOOL HUF_selectDecoder(unint64_t a1, unint64_t a2)
{
  if (a2 >= a1) {
    unsigned int v2 = 15;
  }
  else {
    unsigned int v2 = 16 * a2 / a1;
  }
  uint64_t v3 = (_DWORD *)((char *)&algoTime + 24 * v2);
  unsigned int v4 = *v3 + v3[1] * (a1 >> 8);
  LODWORD(v3) = v3[2] + v3[3] * (a1 >> 8);
  return v3 + (v3 >> 3) < v4;
}

unint64_t HUF_decompress4X_hufOnly_wksp(int *a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!a3) {
    return -70;
  }
  if (!a5) {
    return -20;
  }
  if (a5 >= a3) {
    unsigned int v12 = 15;
  }
  else {
    unsigned int v12 = 16 * a5 / a3;
  }
  unint64_t v14 = (_DWORD *)((char *)&algoTime + 24 * v12);
  unsigned int v15 = *v14 + v14[1] * (a3 >> 8);
  LODWORD(v14) = v14[2] + v14[3] * (a3 >> 8);
  if (v14 + (v14 >> 3) < v15)
  {
    unint64_t result = HUF_readDTableX2_wksp(a1, a4, a5, a6, a7);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    if (a5 > result)
    {
      return HUF_decompress4X2_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
    }
    return -72;
  }
  unint64_t result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, a6, a7);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  if (a5 <= result) {
    return -72;
  }

  return HUF_decompress4X1_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
}

unint64_t HUF_decompress1X_DCtx_wksp(int *a1, unsigned char *__b, size_t __len, unsigned __int8 *__src, unint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!__len) {
    return -70;
  }
  if (a5 > __len) {
    return -20;
  }
  if (a5 == __len)
  {
    memcpy(__b, __src, __len);
    return __len;
  }
  if (a5 == 1)
  {
    memset(__b, *__src, __len);
    return __len;
  }
  if (a5 >= __len) {
    unsigned int v13 = 15;
  }
  else {
    unsigned int v13 = 16 * a5 / __len;
  }
  unint64_t v14 = (_DWORD *)((char *)&algoTime + 24 * v13);
  unsigned int v15 = *v14 + v14[1] * (__len >> 8);
  LODWORD(v14) = v14[2] + v14[3] * (__len >> 8);
  if (v14 + (v14 >> 3) < v15)
  {
    unint64_t result = HUF_readDTableX2_wksp(a1, (char *)__src, a5, a6, a7);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    if (a5 > result)
    {
      return HUF_decompress1X2_usingDTable_internal(__b, __len, &__src[result], a5 - result, (uint64_t)a1);
    }
    return -72;
  }
  unint64_t result = HUF_readDTableX1_wksp_bmi2(a1, (char *)__src, a5, a6, a7);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  if (a5 <= result) {
    return -72;
  }

  return HUF_decompress1X1_usingDTable_internal(__b, __len, &__src[result], a5 - result, (uint64_t)a1);
}

uint64_t HUF_decompress1X_usingDTable_bmi2(char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a5 + 1)) {
    return HUF_decompress1X2_usingDTable_internal(a1, a2, a3, a4, a5);
  }
  else {
    return HUF_decompress1X1_usingDTable_internal(a1, a2, a3, a4, a5);
  }
}

unint64_t HUF_decompress1X1_DCtx_wksp_bmi2(int *a1, unsigned char *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
    {
      return -72;
    }
    else
    {
      return HUF_decompress1X1_usingDTable_internal(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

unint64_t HUF_decompress4X_usingDTable_bmi2(char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a5 + 1)) {
    return HUF_decompress4X2_usingDTable_internal(a1, a2, a3, a4, a5);
  }
  else {
    return HUF_decompress4X1_usingDTable_internal(a1, a2, a3, a4, a5);
  }
}

unint64_t HUF_decompress4X_hufOnly_wksp_bmi2(int *a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!a3) {
    return -70;
  }
  if (!a5) {
    return -20;
  }
  if (a5 >= a3) {
    unsigned int v12 = 15;
  }
  else {
    unsigned int v12 = 16 * a5 / a3;
  }
  unint64_t v14 = (_DWORD *)((char *)&algoTime + 24 * v12);
  unsigned int v15 = *v14 + v14[1] * (a3 >> 8);
  LODWORD(v14) = v14[2] + v14[3] * (a3 >> 8);
  if (v14 + (v14 >> 3) < v15)
  {
    unint64_t result = HUF_readDTableX2_wksp(a1, a4, a5, a6, a7);
    if (result > 0xFFFFFFFFFFFFFF88) {
      return result;
    }
    if (a5 > result)
    {
      return HUF_decompress4X2_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
    }
    return -72;
  }
  unint64_t result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, a6, a7);
  if (result > 0xFFFFFFFFFFFFFF88) {
    return result;
  }
  if (a5 <= result) {
    return -72;
  }

  return HUF_decompress4X1_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
}

unint64_t HUF_readDTableX1(int *a1, char *a2, unint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  return HUF_readDTableX1_wksp_bmi2(a1, a2, a3, (uint64_t)v4, 0x800uLL);
}

unint64_t HUF_decompress1X1_DCtx(int *a1, unsigned char *a2, uint64_t a3, char *a4, unint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, (uint64_t)v11, 0x800uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result) {
      return -72;
    }
    else {
      return HUF_decompress1X1_usingDTable_internal(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

unint64_t HUF_decompress1X1(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  v13[256] = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0x2000uLL);
  int v11 = 184549387;
  unint64_t result = HUF_readDTableX1_wksp_bmi2(&v11, v5, v3, (uint64_t)v13, 0x800uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v3 <= result) {
      return -72;
    }
    else {
      return HUF_decompress1X1_usingDTable_internal(v9, v7, (unsigned __int8 *)&v5[result], v3 - result, (uint64_t)&v11);
    }
  }
  return result;
}

unint64_t HUF_readDTableX2(int *a1, char *a2, unint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  return HUF_readDTableX2_wksp(a1, a2, a3, (uint64_t)v4, 0x800uLL);
}

unint64_t HUF_decompress1X2_DCtx(int *a1, char *a2, uint64_t a3, char *a4, unint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t result = HUF_readDTableX2_wksp(a1, a4, a5, (uint64_t)v11, 0x800uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result) {
      return -72;
    }
    else {
      return HUF_decompress1X2_usingDTable_internal(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

unint64_t HUF_decompress1X2(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  v13[256] = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0x4000uLL);
  int v11 = 201326604;
  unint64_t result = HUF_readDTableX2_wksp(&v11, v5, v3, (uint64_t)v13, 0x800uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v3 <= result) {
      return -72;
    }
    else {
      return HUF_decompress1X2_usingDTable_internal(v9, v7, (unsigned __int8 *)&v5[result], v3 - result, (uint64_t)&v11);
    }
  }
  return result;
}

unint64_t HUF_decompress4X1_DCtx(int *a1, unsigned char *a2, uint64_t a3, char *a4, unint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, (uint64_t)v11, 0x800uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result) {
      return -72;
    }
    else {
      return HUF_decompress4X1_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

unint64_t HUF_decompress4X1(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  v13[256] = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0x2000uLL);
  int v11 = 184549387;
  unint64_t result = HUF_readDTableX1_wksp_bmi2(&v11, v5, v3, (uint64_t)v13, 0x800uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v3 <= result) {
      return -72;
    }
    else {
      return HUF_decompress4X1_usingDTable_internal(v9, v7, (unsigned __int16 *)&v5[result], v3 - result, (uint64_t)&v11);
    }
  }
  return result;
}

unint64_t HUF_decompress4X2_DCtx(int *a1, char *a2, uint64_t a3, char *a4, unint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t result = HUF_readDTableX2_wksp(a1, a4, a5, (uint64_t)v11, 0x800uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result) {
      return -72;
    }
    else {
      return HUF_decompress4X2_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
    }
  }
  return result;
}

unint64_t HUF_decompress4X2(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  v13[256] = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0x4000uLL);
  int v11 = 201326604;
  unint64_t result = HUF_readDTableX2_wksp(&v11, v5, v3, (uint64_t)v13, 0x800uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v3 <= result) {
      return -72;
    }
    else {
      return HUF_decompress4X2_usingDTable_internal(v9, v7, (unsigned __int16 *)&v5[result], v3 - result, (uint64_t)&v11);
    }
  }
  return result;
}

uint64_t HUF_decompress(void *a1, size_t __len, unsigned __int8 *__src, size_t a4)
{
  if (!__len) {
    return -70;
  }
  if (a4 > __len) {
    return -20;
  }
  if (a4 == __len)
  {
    memcpy(a1, __src, __len);
    return __len;
  }
  else if (a4 == 1)
  {
    memset(a1, *__src, __len);
    return __len;
  }
  else
  {
    if (a4 >= __len) {
      unsigned int v6 = 15;
    }
    else {
      unsigned int v6 = 16 * a4 / __len;
    }
    uint64_t v7 = (_DWORD *)((char *)&algoTime + 24 * v6);
    unsigned int v8 = *v7 + v7[1] * (__len >> 8);
    LODWORD(v7) = v7[2] + v7[3] * (__len >> 8);
    uint64_t v9 = HUF_decompress_decompress[v7 + (v7 >> 3) < v8];
    return v9();
  }
}

uint64_t HUF_decompress4X_DCtx(int *a1, unsigned char *__b, size_t __len, unsigned __int8 *__src, unint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!__len) {
    return -70;
  }
  uint64_t v6 = __len;
  if (a5 <= __len)
  {
    if (a5 == __len)
    {
      memcpy(__b, __src, __len);
      return v6;
    }
    if (a5 == 1)
    {
      memset(__b, *__src, __len);
      return v6;
    }
    if (a5 >= __len) {
      unsigned int v10 = 15;
    }
    else {
      unsigned int v10 = 16 * a5 / __len;
    }
    int v11 = (_DWORD *)((char *)&algoTime + 24 * v10);
    unsigned int v12 = *v11 + v11[1] * (__len >> 8);
    LODWORD(v11) = v11[2] + v11[3] * (__len >> 8);
    if (v11 + (v11 >> 3) >= v12)
    {
      unint64_t DTableX1_wksp_bmi2 = HUF_readDTableX1_wksp_bmi2(a1, (char *)__src, a5, (uint64_t)v15, 0x800uLL);
      if (DTableX1_wksp_bmi2 > 0xFFFFFFFFFFFFFF88) {
        return DTableX1_wksp_bmi2;
      }
      if (a5 > DTableX1_wksp_bmi2) {
        return HUF_decompress4X1_usingDTable_internal(__b, v6, (unsigned __int16 *)&__src[DTableX1_wksp_bmi2], a5 - DTableX1_wksp_bmi2, (uint64_t)a1);
      }
    }
    else
    {
      unint64_t DTableX1_wksp_bmi2 = HUF_readDTableX2_wksp(a1, (char *)__src, a5, (uint64_t)v15, 0x800uLL);
      if (DTableX1_wksp_bmi2 > 0xFFFFFFFFFFFFFF88) {
        return DTableX1_wksp_bmi2;
      }
      if (a5 > DTableX1_wksp_bmi2) {
        return HUF_decompress4X2_usingDTable_internal(__b, v6, (unsigned __int16 *)&__src[DTableX1_wksp_bmi2], a5 - DTableX1_wksp_bmi2, (uint64_t)a1);
      }
    }
    return -72;
  }
  return -20;
}

unint64_t HUF_decompress4X_hufOnly(int *a1, char *a2, unint64_t a3, char *a4, unint64_t a5)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  return HUF_decompress4X_hufOnly_wksp(a1, a2, a3, a4, a5, (uint64_t)v6, 0x800uLL);
}

unint64_t HUF_decompress1X_DCtx(int *a1, unsigned char *a2, size_t a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  return HUF_decompress1X_DCtx_wksp(a1, a2, a3, a4, a5, (uint64_t)v6, 0x800uLL);
}

uint64_t ZSTD_DDict_dictContent(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t ZSTD_DDict_dictSize(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

double ZSTD_copyDDictParameters(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 29680) = *(_DWORD *)(a2 + 27316);
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 29384) = v2;
  *(void *)(a1 + 29392) = v2;
  uint64_t v4 = v2 + v3;
  *(void *)(a1 + 29400) = v4;
  *(void *)(a1 + 29376) = v4;
  if (*(_DWORD *)(a2 + 27320))
  {
    *(void *)a1 = a2 + 24;
    *(void *)(a1 + 8) = a2 + 6184;
    *(void *)&double result = 0x100000001;
    *(void *)(a1 + 29480) = 0x100000001;
    *(void *)(a1 + 16) = a2 + 4128;
    *(void *)(a1 + 24) = a2 + 10288;
    *(_DWORD *)(a1 + 26684) = *(_DWORD *)(a2 + 26676);
    *(_DWORD *)(a1 + 26688) = *(_DWORD *)(a2 + 26680);
    *(_DWORD *)(a1 + 26692) = *(_DWORD *)(a2 + 26684);
  }
  else
  {
    double result = 0.0;
    *(void *)(a1 + 29480) = 0;
  }
  return result;
}

char *ZSTD_createDDict_advanced(const void *a1, size_t a2, int a3, int a4, long long *a5)
{
  uint64_t v5 = *(uint64_t (**)(void, uint64_t))a5;
  if ((*(void *)a5 == 0) != (*((void *)a5 + 1) == 0)) {
    return 0;
  }
  if (v5)
  {
    uint64_t v6 = (char *)v5(*((void *)a5 + 2), 27352);
    if (!v6) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = (char *)malloc_type_malloc(0x6AD8uLL, 0x26AA08A0uLL);
    if (!v6) {
      return v6;
    }
  }
  long long v13 = *a5;
  *((void *)v6 + 3418) = *((void *)a5 + 2);
  *((_OWORD *)v6 + 1708) = v13;
  if (a1 && a2 && a3 != 1)
  {
    unint64_t v14 = (uint64_t (*)(void, size_t))*((void *)v6 + 3416);
    if (v14)
    {
      unsigned int v15 = (void *)v14(*((void *)v6 + 3418), a2);
      *(void *)uint64_t v6 = v15;
      *((void *)v6 + 1) = v15;
      if (v15)
      {
LABEL_13:
        memcpy(v15, a1, a2);
        goto LABEL_16;
      }
    }
    else
    {
      unsigned int v15 = malloc_type_malloc(a2, 0x26AA08A0uLL);
      *(void *)uint64_t v6 = v15;
      *((void *)v6 + 1) = v15;
      if (v15) {
        goto LABEL_13;
      }
    }
    int v17 = (void (*)(uint64_t, char *))*((void *)v6 + 3417);
    if (v17)
    {
      uint64_t v18 = *((void *)v6 + 3418);
      goto LABEL_29;
    }
LABEL_31:
    free(v6);
    return 0;
  }
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = a1;
  if (!a1) {
    a2 = 0;
  }
LABEL_16:
  *((void *)v6 + 2) = a2;
  *((_DWORD *)v6 + 2572) = 201326604;
  *(void *)(v6 + 27316) = 0;
  if (a4 == 1) {
    return v6;
  }
  if (a2 <= 7 || (uint64_t v16 = (_DWORD *)*((void *)v6 + 1), *v16 != -332356553))
  {
    if (a4 != 2) {
      return v6;
    }
LABEL_22:
    int v17 = (void (*)(uint64_t, char *))*((void *)v6 + 3417);
    uint64_t v18 = *((void *)v6 + 3418);
    if (*(void *)v6)
    {
      if (v17)
      {
        ((void (*)(void))v17)(*((void *)v6 + 3418));
LABEL_29:
        v17(v18, v6);
        return 0;
      }
      free(*(void **)v6);
    }
    else if (v17)
    {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  *((_DWORD *)v6 + 6829) = v16[1];
  if ((unint64_t)ZSTD_loadDEntropy((int *)v6 + 6, (uint64_t)v16, a2) > 0xFFFFFFFFFFFFFF88) {
    goto LABEL_22;
  }
  *((_DWORD *)v6 + 6830) = 1;
  return v6;
}

uint64_t ZSTD_freeDDict(void **a1)
{
  if (a1)
  {
    uint64_t v2 = (void (*)(void *))a1[3417];
    uint64_t v3 = a1[3418];
    if (*a1)
    {
      if (v2)
      {
        v2(a1[3418]);
LABEL_6:
        ((void (*)(void *, void **))v2)(v3, a1);
        return 0;
      }
      free(*a1);
    }
    else if (v2)
    {
      goto LABEL_6;
    }
    free(a1);
  }
  return 0;
}

char *ZSTD_createDDict(const void *a1, size_t a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  return ZSTD_createDDict_advanced(a1, a2, 0, 0, &v3);
}

char *ZSTD_createDDict_byReference(const void *a1, size_t a2)
{
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  return ZSTD_createDDict_advanced(a1, a2, 1, 0, &v3);
}

uint64_t ZSTD_initStaticDDict(uint64_t a1, unint64_t a2, _DWORD *__src, size_t __n, int a5, int a6)
{
  if ((a1 & 7) != 0) {
    return 0;
  }
  unint64_t v9 = 27352;
  if (a5 != 1) {
    unint64_t v9 = __n + 27352;
  }
  if (v9 > a2) {
    return 0;
  }
  uint64_t v6 = a1;
  uint64_t v11 = a1 + 27316;
  if (!a5)
  {
    memcpy((void *)(a1 + 27352), __src, __n);
    __src = (_DWORD *)(v11 + 36);
  }
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = __src;
  if (__src) {
    unint64_t v12 = __n;
  }
  else {
    unint64_t v12 = 0;
  }
  *(void *)(v6 + 16) = v12;
  *(_DWORD *)(v6 + 10288) = 201326604;
  *(void *)uint64_t v11 = 0;
  if (a6 == 1) {
    return v6;
  }
  if (v12 <= 7 || *__src != -332356553)
  {
    if (a6 != 2) {
      return v6;
    }
    return 0;
  }
  *(_DWORD *)uint64_t v11 = __src[1];
  if ((unint64_t)ZSTD_loadDEntropy((int *)(v6 + 24), (uint64_t)__src, v12) > 0xFFFFFFFFFFFFFF88) {
    return 0;
  }
  *(_DWORD *)(v11 + 4) = 1;
  return v6;
}

uint64_t ZSTD_estimateDDictSize(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 27352;
  }
  else {
    return a1 + 27352;
  }
}

uint64_t ZSTD_sizeof_DDict(uint64_t result)
{
  if (result)
  {
    if (*(void *)result) {
      return *(void *)(result + 16) + 27352;
    }
    else {
      return 27352;
    }
  }
  return result;
}

uint64_t ZSTD_getDictID_fromDDict(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 16) >= 8uLL && (uint64_t v1 = *(_DWORD **)(result + 8), *v1 == -332356553)) {
      return v1[1];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t ZSTD_getDictID_fromDict(_DWORD *a1, unint64_t a2)
{
  if (a2 >= 8 && *a1 == -332356553) {
    return a1[1];
  }
  else {
    return 0;
  }
}

void *ZSTD_sizeof_DCtx(void *result)
{
  if (result)
  {
    uint64_t v1 = (void *)result[3708];
    if (v1)
    {
      uint64_t v2 = 188328;
      if (*v1) {
        uint64_t v2 = v1[2] + 188328;
      }
    }
    else
    {
      uint64_t v2 = 160976;
    }
    return (void *)(result[3715] + v2 + result[3719]);
  }
  return result;
}

uint64_t ZSTD_estimateDCtxSize()
{
  return 160976;
}

uint64_t ZSTD_initStaticDCtx(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a2 >= 0x274D0 && (a1 & 7) == 0)
  {
    *(void *)(a1 + 29400) = 0;
    *(void *)(a1 + 29684) = 0;
    *(void *)(a1 + 29752) = 0;
    *(void *)(a1 + 29784) = 0;
    *(_DWORD *)(a1 + 29792) = 0;
    *(void *)(a1 + 160968) = 0;
    *(_DWORD *)(a1 + 29656) = 0;
    *(void *)(a1 + 29696) = 0;
    *(_OWORD *)(a1 + 29664) = 0u;
    *(_OWORD *)(a1 + 29708) = 0u;
    *(_DWORD *)(a1 + 29724) = 0;
    *(void *)(a1 + 29736) = 134217729;
    *(void *)(a1 + 29804) = 0;
    *(void *)(a1 + 29584) = 0;
    *(_DWORD *)(a1 + 29704) = 0;
    *(void *)(a1 + 29648) = a2;
    uint64_t v2 = a1;
    *(void *)(a1 + 29712) = a1 + 160976;
  }
  return v2;
}

double ZSTD_createDCtx_advanced(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t))a1;
  if ((*(void *)a1 == 0) == (*(void *)(a1 + 8) == 0))
  {
    if (v1)
    {
      long long v3 = (char *)v1(*(void *)(a1 + 16), 160976);
      if (!v3) {
        return result;
      }
    }
    else
    {
      long long v3 = (char *)malloc_type_malloc(0x274D0uLL, 0x26AA08A0uLL);
      if (!v3) {
        return result;
      }
    }
    uint64_t v5 = *(void *)(a1 + 16);
    *(_OWORD *)(v3 + 29608) = *(_OWORD *)a1;
    *((void *)v3 + 3703) = v5;
    *((void *)v3 + 3706) = 0;
    *((void *)v3 + 3675) = 0;
    double result = 0.0;
    *(void *)(v3 + 29684) = 0;
    *((void *)v3 + 3719) = 0;
    *((void *)v3 + 3723) = 0;
    *((_DWORD *)v3 + 7448) = 0;
    *((void *)v3 + 20121) = 0;
    *((_DWORD *)v3 + 7414) = 0;
    *((void *)v3 + 3712) = 0;
    *((_OWORD *)v3 + 1854) = 0u;
    *(_OWORD *)(v3 + 29708) = 0u;
    *((_DWORD *)v3 + 7431) = 0;
    *((void *)v3 + 3717) = 134217729;
    *(void *)(v3 + 29804) = 0;
    *((void *)v3 + 3698) = 0;
    *((_DWORD *)v3 + 7426) = 0;
  }
  return result;
}

double ZSTD_createDCtx()
{
  v0 = (char *)malloc_type_malloc(0x274D0uLL, 0x26AA08A0uLL);
  if (v0)
  {
    *((void *)v0 + 3706) = 0;
    *((void *)v0 + 3675) = 0;
    double result = 0.0;
    *(void *)(v0 + 29684) = 0;
    *((void *)v0 + 3719) = 0;
    *((void *)v0 + 3723) = 0;
    *((_DWORD *)v0 + 7448) = 0;
    *((void *)v0 + 20121) = 0;
    *((_DWORD *)v0 + 7414) = 0;
    *((void *)v0 + 3712) = 0;
    *((_OWORD *)v0 + 1854) = 0u;
    *(_OWORD *)(v0 + 29708) = 0u;
    *((_DWORD *)v0 + 7431) = 0;
    *((void *)v0 + 3701) = 0;
    *((void *)v0 + 3703) = 0;
    *((void *)v0 + 3702) = 0;
    *((void *)v0 + 3717) = 134217729;
    *(void *)(v0 + 29804) = 0;
    *((void *)v0 + 3698) = 0;
    *((_DWORD *)v0 + 7426) = 0;
  }
  return result;
}

uint64_t ZSTD_freeDCtx(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(void *)(result + 29648)) {
    return -64;
  }
  uint64_t v2 = *(void (**)(uint64_t))(result + 29616);
  uint64_t v3 = *(void *)(result + 29624);
  uint64_t v4 = (void *)(result + 29664);
  uint64_t v5 = *(void *)(result + 29664);
  if (v5)
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 27336);
    uint64_t v7 = *(void *)(v5 + 27344);
    if (*(void *)v5)
    {
      if (v6)
      {
        ((void (*)(void))v6)(*(void *)(v5 + 27344));
LABEL_9:
        v6(v7, v5);
        goto LABEL_10;
      }
      free(*(void **)v5);
    }
    else if (v6)
    {
      goto LABEL_9;
    }
    free((void *)v5);
    *(_DWORD *)(v1 + 29688) = 0;
    *uint64_t v4 = 0;
    *(void *)(v1 + 29672) = 0;
    unsigned int v8 = *(void **)(v1 + 29712);
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(_DWORD *)(v1 + 29688) = 0;
  *uint64_t v4 = 0;
  *(void *)(v1 + 29672) = 0;
  unsigned int v8 = *(void **)(v1 + 29712);
  if (!v8) {
    goto LABEL_16;
  }
LABEL_11:
  if (v2) {
    v2(v3);
  }
  else {
    free(v8);
  }
LABEL_16:
  *(void *)(v1 + 29712) = 0;
  unint64_t v9 = *(void ***)(v1 + 29696);
  if (v9)
  {
    if (*v9)
    {
      if (v2)
      {
        v2(v3);
LABEL_21:
        ((void (*)(uint64_t, void **))v2)(v3, v9);
LABEL_24:
        *(void *)(v1 + 29696) = 0;
        goto LABEL_25;
      }
      free(*v9);
    }
    else if (v2)
    {
      goto LABEL_21;
    }
    free(v9);
    goto LABEL_24;
  }
LABEL_25:
  if (v2) {
    ((void (*)(uint64_t, uint64_t))v2)(v3, v1);
  }
  else {
    free((void *)v1);
  }
  return 0;
}

void *ZSTD_copyDCtx(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x7410uLL);
}

BOOL ZSTD_isFrame(_DWORD *a1, unint64_t a2)
{
  if (a2 < 4) {
    return 0;
  }
  if (*a1 == -47205080) {
    return 1;
  }
  return *a1 >> 4 == 25481893;
}

uint64_t ZSTD_frameHeaderSize(uint64_t a1, unint64_t a2)
{
  if (a2 < 5) {
    return -72;
  }
  unint64_t v3 = *(unsigned __int8 *)(a1 + 4);
  uint64_t v4 = v3 & 3;
  BOOL v5 = v3 < 0x40;
  uint64_t v6 = *(void *)((char *)&ZSTD_fcs_fieldSize + ((v3 >> 3) & 0x18));
  LODWORD(v3) = v3 & 0x20;
  BOOL v7 = v3 == 0;
  uint64_t v8 = v5 & (v3 >> 5);
  uint64_t v9 = ZSTD_did_fieldSize[v4] + v6;
  if (v7) {
    ++v9;
  }
  return v9 + v8 + 5;
}

unint64_t ZSTD_getFrameHeader_advanced(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  if (a4) {
    unint64_t result = 1;
  }
  else {
    unint64_t result = 5;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (result <= a3)
  {
    if (!a2) {
      return -1;
    }
    if (a4 == 1)
    {
      if (!a3) {
        return -72;
      }
      uint64_t v6 = 1;
      BOOL v7 = a2;
    }
    else
    {
      if (*(_DWORD *)a2 != -47205080)
      {
        if (*(_DWORD *)a2 >> 4 != 25481893) {
          return -10;
        }
        if (a3 < 8) {
          return 8;
        }
        unint64_t result = 0;
        *(void *)a1 = *((unsigned int *)a2 + 1);
        *(_DWORD *)(a1 + 20) = 1;
        return result;
      }
      BOOL v7 = &a2[result - 1];
      uint64_t v6 = result;
    }
    unint64_t v8 = *v7;
    BOOL v9 = v8 < 0x40;
    uint64_t v10 = ZSTD_did_fieldSize[v8 & 3];
    uint64_t v11 = *(void *)((char *)&ZSTD_fcs_fieldSize + ((v8 >> 3) & 0x18));
    LODWORD(v8) = v8 & 0x20;
    BOOL v12 = v8 == 0;
    uint64_t v13 = v9 & (v8 >> 5);
    uint64_t v14 = v10 + v6 + v11;
    if (v12) {
      ++v14;
    }
    unint64_t v15 = v14 + v13;
    if (v15 > a3) {
      return v15;
    }
    *(_DWORD *)(a1 + 24) = v15;
    unsigned int v16 = a2[result - 1];
    if ((v16 & 8) != 0) {
      return -14;
    }
    if ((v16 & 0x20) != 0)
    {
      unint64_t v18 = 0;
    }
    else
    {
      unint64_t v17 = a2[result];
      if (v17 > 0xAF) {
        return -16;
      }
      ++result;
      unint64_t v18 = (1 << ((v17 >> 3) + 10))
          + ((unint64_t)(1 << ((v17 >> 3) + 10)) >> 3) * (v17 & 7);
    }
    int v19 = v16 & 3;
    unsigned int v20 = v16 >> 6;
    switch(v19)
    {
      case 3:
        int v21 = *(_DWORD *)&a2[result];
        result += 4;
        break;
      case 2:
        int v21 = *(unsigned __int16 *)&a2[result];
        result += 2;
        break;
      case 1:
        int v21 = a2[result++];
        break;
      default:
        int v21 = 0;
        break;
    }
    int v22 = (v16 >> 2) & 1;
    switch(v20)
    {
      case 1u:
        uint64_t v23 = *(unsigned __int16 *)&a2[result] + 256;
        break;
      case 2u:
        uint64_t v23 = *(unsigned int *)&a2[result];
        break;
      case 3u:
        uint64_t v23 = *(void *)&a2[result];
        break;
      default:
        if ((v16 & 0x20) != 0) {
          uint64_t v23 = a2[result];
        }
        else {
          uint64_t v23 = -1;
        }
        break;
    }
    unint64_t result = 0;
    if ((v16 & 0x20) != 0) {
      unint64_t v24 = v23;
    }
    else {
      unint64_t v24 = v18;
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v24;
    if (v24 >= 0x20000) {
      LODWORD(v24) = 0x20000;
    }
    *(_DWORD *)(a1 + 16) = v24;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 28) = v21;
    *(_DWORD *)(a1 + 32) = v22;
  }
  return result;
}

unint64_t ZSTD_getFrameHeader(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  return ZSTD_getFrameHeader_advanced(a1, a2, a3, 0);
}

uint64_t ZSTD_getFrameContentSize(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  unint64_t FrameHeader_advanced = ZSTD_getFrameHeader_advanced((uint64_t)&v5, a1, a2, 0);
  if (DWORD1(v6) == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v5;
  }
  if (FrameHeader_advanced) {
    return -2;
  }
  else {
    return v3;
  }
}

unint64_t ZSTD_findDecompressedSize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2 >= 5)
  {
    uint64_t v3 = 0;
    while (1)
    {
      if (*(_DWORD *)a1 >> 4 == 25481893)
      {
        if (v2 < 8) {
          return -2;
        }
        uint64_t v6 = *(unsigned int *)(a1 + 4);
        unint64_t FrameSizeInfo = v6 + 8;
        if (v6 > 0xFFFFFFF7 || FrameSizeInfo > v2) {
          return -2;
        }
      }
      else
      {
        uint64_t v14 = 0;
        long long v12 = 0u;
        long long v13 = 0u;
        unint64_t FrameHeader_advanced = ZSTD_getFrameHeader_advanced((uint64_t)&v12, (unsigned __int8 *)a1, v2, 0);
        if (DWORD1(v13) == 1) {
          unint64_t v10 = 0;
        }
        else {
          unint64_t v10 = v12;
        }
        if (FrameHeader_advanced) {
          unint64_t result = -2;
        }
        else {
          unint64_t result = v10;
        }
        if (result > 0xFFFFFFFFFFFFFFFDLL) {
          return result;
        }
        BOOL v11 = __CFADD__(result, v3);
        v3 += result;
        if (v11) {
          return -2;
        }
        unint64_t FrameSizeInfo = ZSTD_findFrameSizeInfo(a1, v2);
        if (FrameSizeInfo > 0xFFFFFFFFFFFFFF88) {
          return -2;
        }
      }
      v2 -= FrameSizeInfo;
      a1 += FrameSizeInfo;
      if (v2 <= 4) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v3 = 0;
LABEL_3:
  if (v2) {
    return -2;
  }
  else {
    return v3;
  }
}

unint64_t ZSTD_getDecompressedSize(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  unint64_t FrameHeader_advanced = ZSTD_getFrameHeader_advanced((uint64_t)&v5, a1, a2, 0);
  if (DWORD1(v6) == 1) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = v5;
  }
  if (FrameHeader_advanced) {
    unint64_t v3 = -2;
  }
  if (v3 <= 0xFFFFFFFFFFFFFFFDLL) {
    return v3;
  }
  else {
    return 0;
  }
}

unint64_t ZSTD_findFrameSizeInfo(uint64_t a1, unint64_t a2)
{
  if (a2 >= 8 && *(_DWORD *)a1 >> 4 == 25481893)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 4);
    uint64_t v5 = v4 + 8;
    if (v4 + 8 > a2) {
      uint64_t v5 = -72;
    }
    if (v4 <= 0xFFFFFFF7) {
      return v5;
    }
    else {
      return -14;
    }
  }
  else
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    unint64_t result = ZSTD_getFrameHeader_advanced((uint64_t)&v14, (unsigned __int8 *)a1, a2, 0);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      if (!result)
      {
        uint64_t v7 = 0;
        unint64_t v8 = (unsigned __int16 *)(a1 + DWORD2(v15));
        unint64_t v9 = a2 - DWORD2(v15);
        while (v9 >= 3)
        {
          int v10 = *v8;
          unint64_t v11 = ((unint64_t)*v8 >> 1) & 3;
          if (v11 != 1)
          {
            if (v11 == 3) {
              return -20;
            }
            unint64_t v11 = (v10 | (*((unsigned __int8 *)v8 + 2) << 16)) >> 3;
          }
          unint64_t v12 = v11 + 3;
          BOOL v13 = v9 >= v12;
          v9 -= v12;
          if (!v13) {
            return -72;
          }
          unint64_t v8 = (unsigned __int16 *)((char *)v8 + v12);
          ++v7;
          if (v10)
          {
            if (v16)
            {
              if (v9 < 4) {
                return -72;
              }
              v8 += 2;
            }
            return (unint64_t)v8 - a1;
          }
        }
      }
      return -72;
    }
  }
  return result;
}

uint64_t ZSTD_decompressBound(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 0;
  while (a2)
  {
    unint64_t FrameSizeInfo = ZSTD_findFrameSizeInfo(a1, a2);
    uint64_t result = -2;
    if (FrameSizeInfo <= 0xFFFFFFFFFFFFFF88)
    {
      a1 += FrameSizeInfo;
      a2 -= FrameSizeInfo;
      v4 += v5;
      if (v5 != -2) {
        continue;
      }
    }
    return result;
  }
  return v4;
}

uint64_t ZSTD_insertBlock(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a1[3672];
    if (v3 != a2)
    {
      a1[3675] = v3;
      a1[3674] = a2 + a1[3673] - v3;
      a1[3673] = a2;
    }
  }
  a1[3672] = a2 + a3;
  return a3;
}

void *ZSTD_checkContinuity(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result[3672];
    if (v3 != a2)
    {
      result[3675] = v3;
      result[3674] = a2 + result[3673] - v3;
      result[3673] = a2;
      result[3672] = a2;
    }
  }
  return result;
}

uint64_t ZSTD_decompress_usingDict(uint64_t a1, char *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, char *a6, unint64_t a7)
{
  return ZSTD_decompressMultiFrame(a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t ZSTD_decompressMultiFrame(uint64_t a1, char *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, char *a6, unint64_t a7, uint64_t a8)
{
  unint64_t v11 = a5;
  uint64_t v14 = (uint64_t)a2;
  uint64_t v16 = a1 + 26684;
  if (a8)
  {
    a6 = *(char **)(a8 + 8);
    a7 = *(void *)(a8 + 16);
  }
  unint64_t v17 = 5;
  if (*(_DWORD *)(a1 + 29584)) {
    unint64_t v17 = 1;
  }
  if (v17 <= a5)
  {
    char v20 = 0;
    int v21 = (_DWORD *)(a8 + 26676);
    unsigned int v72 = (void *)(a1 + 29456);
    uint64_t v68 = (_OWORD *)(a1 + 29376);
    uint64_t v69 = (int *)(a1 + 32);
    uint64_t v67 = a1 + 10296;
    uint64_t v66 = a1 + 6192;
    uint64_t v65 = a1 + 4136;
    uint64_t v64 = a8 + 24;
    uint64_t v63 = a8 + 6184;
    uint64_t v62 = a8 + 4128;
    uint64_t v61 = a8 + 10288;
    if (a6) {
      BOOL v22 = a7 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    int v23 = !v22;
    int v60 = v23;
    unsigned int v58 = &a6[a7];
    uint64_t v70 = (void *)(a1 + 29416);
    unsigned int v74 = (unsigned int *)(a1 + 29488);
    uint64_t v59 = (_OWORD *)(a1 + 29528);
    unint64_t v18 = a2;
    int v75 = (_DWORD *)(a8 + 26676);
LABEL_17:
    while (*(_DWORD *)a4 >> 4 == 25481893)
    {
      if (v11 < 8) {
        return -72;
      }
      uint64_t v24 = *((unsigned int *)a4 + 1);
      if (v24 > 0xFFFFFFF7) {
        return -14;
      }
      unint64_t v25 = v24 + 8;
      if (v25 <= v11) {
        unint64_t v19 = v25;
      }
      else {
        unint64_t v19 = -72;
      }
      if (v19 > 0xFFFFFFFFFFFFFF88) {
        return v19;
      }
      a4 += v19;
      v11 -= v19;
      if (v11 < v17) {
        goto LABEL_7;
      }
    }
    char v57 = v20;
    uint64_t v73 = v18;
    if (a8)
    {
      *(_DWORD *)(v16 + 3000) = *(void *)(a1 + 29400) != *(void *)(a8 + 8) + *(void *)(a8 + 16);
      *(void *)(a1 + 29408) = v17;
      *uint64_t v68 = 0u;
      v68[1] = 0u;
      *unsigned int v72 = 0;
      v72[1] = 0;
      *(_DWORD *)(a1 + 10296) = 201326604;
      *(_OWORD *)(a1 + 29472) = xmmword_1889B9F70;
      *(void *)uint64_t v16 = 0x400000001;
      *(_DWORD *)(v16 + 8) = 8;
      *(void *)a1 = v69;
      *(void *)(a1 + 8) = v66;
      *(void *)(a1 + 16) = v65;
      *(void *)(a1 + 24) = v67;
      *(_DWORD *)(v16 + 2996) = v21[160];
      BOOL v27 = *(char **)(a8 + 8);
      uint64_t v26 = *(void *)(a8 + 16);
      *(void *)(a1 + 29384) = v27;
      *(void *)(a1 + 29392) = v27;
      uint64_t v28 = &v27[v26];
      *(void *)(a1 + 29400) = &v27[v26];
      *(void *)(a1 + 29376) = &v27[v26];
      if (v21[161])
      {
        *(void *)(a1 + 29480) = 0x100000001;
        *(void *)a1 = v64;
        *(void *)(a1 + 8) = v63;
        *(void *)(a1 + 16) = v62;
        *(void *)(a1 + 24) = v61;
        *(_DWORD *)uint64_t v16 = *v21;
        *(_DWORD *)(v16 + 4) = v21[1];
        *(_DWORD *)(v16 + 8) = v21[2];
      }
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = 0;
      *(void *)(a1 + 29408) = v17;
      *uint64_t v68 = 0u;
      v68[1] = 0u;
      *unsigned int v72 = 0;
      v72[1] = 0;
      *(_DWORD *)(a1 + 10296) = 201326604;
      *(_DWORD *)(v16 + 2996) = 0;
      *(_OWORD *)(a1 + 29472) = xmmword_1889B9F70;
      *(void *)uint64_t v16 = 0x400000001;
      *(_DWORD *)(v16 + 8) = 8;
      *(void *)a1 = v69;
      *(void *)(a1 + 8) = v66;
      *(void *)(a1 + 16) = v65;
      *(void *)(a1 + 24) = v67;
      if (v60)
      {
        unsigned int v29 = a6;
        BOOL v27 = a6;
        if (a7 >= 8)
        {
          unsigned int v29 = a6;
          BOOL v27 = a6;
          if (*(_DWORD *)a6 == -332356553)
          {
            *(_DWORD *)(v16 + 2996) = *((_DWORD *)a6 + 1);
            unint64_t DEntropy = ZSTD_loadDEntropy(v69, (uint64_t)a6, a7);
            if (DEntropy > 0xFFFFFFFFFFFFFF88) {
              return -30;
            }
            BOOL v27 = &a6[DEntropy];
            *(void *)(a1 + 29480) = 0x100000001;
            uint64_t v31 = *(void *)(a1 + 29376);
            *(void *)(a1 + 29400) = v31;
            unsigned int v29 = &a6[DEntropy + *(void *)(a1 + 29384) - v31];
            unint64_t v18 = v73;
          }
        }
        *(void *)(a1 + 29392) = v29;
        *(void *)(a1 + 29384) = v27;
        uint64_t v28 = v58;
        *(void *)(a1 + 29376) = v58;
      }
    }
    if (a3 && v28 != v18)
    {
      *(void *)(a1 + 29400) = v28;
      *(void *)(a1 + 29392) = &v18[v27 - v28];
      *(void *)(a1 + 29384) = v18;
      *(void *)(a1 + 29376) = v18;
    }
    int v32 = *(_DWORD *)(v16 + 2900);
    unint64_t v33 = 9;
    if (v32) {
      unint64_t v33 = 5;
    }
    if (v11 < v33) {
      return -72;
    }
    if (v32) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = 5;
    }
    unint64_t v35 = a4[v34 - 1];
    uint64_t v36 = (v35 < 0x40) & ((v35 & 0x20) >> 5);
    uint64_t v37 = ZSTD_did_fieldSize[v35 & 3] + v34 + *(void *)((char *)&ZSTD_fcs_fieldSize + ((v35 >> 3) & 0x18));
    if ((v35 & 0x20) == 0) {
      ++v37;
    }
    unint64_t v19 = v37 + v36;
    if ((unint64_t)(v37 + v36) <= 0xFFFFFFFFFFFFFF88)
    {
      if (v11 < v19 + 3) {
        return -72;
      }
      unint64_t FrameHeader_advanced = ZSTD_getFrameHeader_advanced((uint64_t)v70, a4, v19, v32);
      if (FrameHeader_advanced <= 0xFFFFFFFFFFFFFF88)
      {
        if (!FrameHeader_advanced)
        {
          if (*(_DWORD *)(v16 + 3020) == 1 && *(void *)(a1 + 29696)) {
            ZSTD_DCtx_selectFrameDDict(a1);
          }
          int v39 = *(_DWORD *)(v16 + 2760);
          if (v39 && *(_DWORD *)(v16 + 2996) != v39) {
            return -32;
          }
          unint64_t v55 = a7;
          uint64_t v56 = v14;
          if (*(_DWORD *)(v16 + 2764))
          {
            int v40 = *(_DWORD *)(v16 + 2904);
            *(_DWORD *)(v16 + 2908) = v40 == 0;
            uint64_t v41 = v73;
            if (!v40)
            {
              *(_OWORD *)(a1 + 29488) = xmmword_1889B9F80;
              *(_OWORD *)(a1 + 29504) = xmmword_1889B9F90;
              *(void *)(a1 + 29520) = 0x61C8864E7A143579;
              *uint64_t v59 = 0u;
              v59[1] = 0u;
              v59[2] = 0u;
            }
          }
          else
          {
            *(_DWORD *)(v16 + 2908) = 0;
            uint64_t v41 = v73;
          }
          uint64_t v54 = a3;
          unsigned int v71 = &v41[a3];
          *v72 += v19;
          a4 += v19;
          v11 -= v19;
          uint64_t v42 = v41;
          while (1)
          {
            unint64_t v44 = v11 - 3;
            if (v11 < 3) {
              return -72;
            }
            int v45 = *(unsigned __int16 *)a4;
            unsigned int v46 = v45 | (a4[2] << 16);
            unint64_t v19 = v46 >> 3;
            unint64_t v47 = ((unint64_t)*(unsigned __int16 *)a4 >> 1) & 3;
            unint64_t v48 = v47;
            if (v47 != 1)
            {
              if (v47 == 3) {
                return -20;
              }
              unint64_t v48 = v46 >> 3;
            }
            unint64_t v11 = v44 - v48;
            if (v44 < v48) {
              return -72;
            }
            unsigned int v49 = a4 + 3;
            if (v47 == 2)
            {
              unint64_t v19 = ZSTD_decompressBlock_internal(a1, v42, v71 - v42, v49, v48, 1);
              if (v19 > 0xFFFFFFFFFFFFFF88) {
                goto LABEL_105;
              }
              if (!*(_DWORD *)(v16 + 2908)) {
                goto LABEL_61;
              }
            }
            else if (v47 == 1)
            {
              if (v71 - v42 < v19) {
                return -70;
              }
              if (v42)
              {
                memset(v42, *v49, v46 >> 3);
                if (!*(_DWORD *)(v16 + 2908)) {
                  goto LABEL_61;
                }
              }
              else
              {
                if (v46 >= 8) {
                  return -74;
                }
                unint64_t v19 = 0;
                if (!*(_DWORD *)(v16 + 2908)) {
                  goto LABEL_61;
                }
              }
            }
            else
            {
              if (v48 > v71 - v42) {
                return -70;
              }
              if (v42)
              {
                memcpy(v42, v49, v48);
                unint64_t v19 = v48;
                if (!*(_DWORD *)(v16 + 2908)) {
                  goto LABEL_61;
                }
              }
              else
              {
                if (v48) {
                  return -74;
                }
                unint64_t v19 = 0;
                if (!*(_DWORD *)(v16 + 2908)) {
                  goto LABEL_61;
                }
              }
            }
            ZSTD_XXH64_update(v74, v42, v19);
LABEL_61:
            v42 += v19;
            a4 = &v49[v48];
            int v21 = v75;
            unint64_t v43 = v73;
            if (v45)
            {
              unint64_t v19 = v42 - v73;
              if (*v70 != -1 && v19 != *v70) {
                return -20;
              }
              if (*(_DWORD *)(v16 + 2764))
              {
                BOOL v50 = v11 >= 4;
                v11 -= 4;
                a7 = v55;
                uint64_t v14 = v56;
                uint64_t v51 = v54;
                if (!v50) {
                  return -22;
                }
                if (!*(_DWORD *)(v16 + 2904))
                {
                  int v52 = ZSTD_XXH64_digest((uint64_t *)v74);
                  unint64_t v43 = v73;
                  int v21 = v75;
                  if (*(_DWORD *)a4 != v52) {
                    return -22;
                  }
                }
                a4 += 4;
              }
              else
              {
                a7 = v55;
                uint64_t v14 = v56;
                uint64_t v51 = v54;
              }
              if (v19 >= 0xFFFFFFFFFFFFFF89) {
                goto LABEL_105;
              }
              unint64_t v18 = &v43[v19];
              a3 = v51 - v19;
              unint64_t v17 = 5;
              if (*(_DWORD *)(v16 + 2900)) {
                unint64_t v17 = 1;
              }
              char v20 = 1;
              if (v11 >= v17) {
                goto LABEL_17;
              }
              goto LABEL_7;
            }
          }
        }
        return -72;
      }
      unint64_t v19 = FrameHeader_advanced;
    }
LABEL_105:
    if (((v19 == -10) & v57) == 0) {
      return v19;
    }
    return -72;
  }
  unint64_t v18 = a2;
LABEL_7:
  if (v11) {
    return -72;
  }
  else {
    return (uint64_t)&v18[-v14];
  }
}

uint64_t ZSTD_decompressDCtx(uint64_t a1, char *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  int v10 = (_DWORD *)(a1 + 29688);
  int v11 = *(_DWORD *)(a1 + 29688);
  if (v11 == -1) {
    goto LABEL_4;
  }
  if (v11 == 1)
  {
    *int v10 = 0;
LABEL_4:
    uint64_t v12 = *(void *)(a1 + 29672);
    goto LABEL_14;
  }
  BOOL v13 = (void *)(a1 + 29664);
  uint64_t v14 = *(void *)(a1 + 29664);
  if (v14)
  {
    long long v15 = *(void (**)(uint64_t, uint64_t))(v14 + 27336);
    uint64_t v16 = *(void *)(v14 + 27344);
    if (*(void *)v14)
    {
      if (v15)
      {
        ((void (*)(void))v15)(*(void *)(v14 + 27344));
LABEL_10:
        v15(v16, v14);
        goto LABEL_13;
      }
      free(*(void **)v14);
    }
    else if (v15)
    {
      goto LABEL_10;
    }
    free((void *)v14);
  }
LABEL_13:
  uint64_t v12 = 0;
  *int v10 = 0;
  void *v13 = 0;
  *(void *)(a1 + 29672) = 0;
LABEL_14:

  return ZSTD_decompressMultiFrame(a1, a2, a3, a4, a5, 0, 0, v12);
}

uint64_t ZSTD_decompress_usingDDict(uint64_t a1, char *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, uint64_t a6)
{
  return ZSTD_decompressMultiFrame(a1, a2, a3, a4, a5, 0, 0, a6);
}

uint64_t ZSTD_getDDict(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 29688);
  int v2 = *(_DWORD *)(a1 + 29688);
  if (v2 == -1) {
    return *(void *)(a1 + 29672);
  }
  if (v2 == 1)
  {
    *uint64_t v1 = 0;
    return *(void *)(a1 + 29672);
  }
  uint64_t v4 = (void *)(a1 + 29664);
  uint64_t v5 = *(void *)(a1 + 29664);
  if (v5)
  {
    long long v6 = *(void (**)(uint64_t, uint64_t))(v5 + 27336);
    uint64_t v7 = *(void *)(v5 + 27344);
    if (*(void *)v5)
    {
      if (v6)
      {
        ((void (*)(void))v6)(*(void *)(v5 + 27344));
LABEL_10:
        v6(v7, v5);
        goto LABEL_13;
      }
      free(*(void **)v5);
    }
    else if (v6)
    {
      goto LABEL_10;
    }
    free((void *)v5);
  }
LABEL_13:
  uint64_t result = 0;
  *uint64_t v1 = 0;
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t ZSTD_decompress(char *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t v8 = (char *)malloc_type_malloc(0x274D0uLL, 0x26AA08A0uLL);
  if (!v8) {
    return -64;
  }
  uint64_t v9 = (uint64_t)v8;
  *((void *)v8 + 3706) = 0;
  *((void *)v8 + 3675) = 0;
  *((void *)v8 + 3719) = 0;
  *((void *)v8 + 3723) = 0;
  *((_DWORD *)v8 + 7448) = 0;
  *((void *)v8 + 20121) = 0;
  *((_DWORD *)v8 + 7414) = 0;
  *((void *)v8 + 3712) = 0;
  *(_OWORD *)(v8 + 29708) = 0u;
  *((_DWORD *)v8 + 7431) = 0;
  *((void *)v8 + 3701) = 0;
  *((_OWORD *)v8 + 1851) = 0u;
  *((void *)v8 + 3717) = 134217729;
  *(void *)(v8 + 29804) = 0;
  *((void *)v8 + 3698) = 0;
  *((_DWORD *)v8 + 7426) = 0;
  *(void *)(v8 + 29684) = 0;
  *((_OWORD *)v8 + 1854) = 0u;
  uint64_t v10 = ZSTD_decompressMultiFrame((uint64_t)v8, a1, a2, a3, a4, 0, 0, 0);
  ZSTD_freeDCtx(v9);
  return v10;
}

uint64_t ZSTD_nextSrcSizeToDecompress(uint64_t a1)
{
  return *(void *)(a1 + 29408);
}

uint64_t ZSTD_nextInputType(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 29476) - 2;
  if (v1 > 5) {
    return 0;
  }
  else {
    return dword_1889BCC04[v1];
  }
}

size_t ZSTD_decompressContinue(uint64_t a1, char *__b, unint64_t a3, char *__src, size_t __n)
{
  size_t v5 = __n;
  unint64_t v8 = (unsigned int *)(a1 + 29432);
  int v9 = *(_DWORD *)(a1 + 29476);
  if ((v9 - 3) >= 2 || *(_DWORD *)(a1 + 29472))
  {
    if (*(void *)(a1 + 29408) == __n) {
      goto LABEL_4;
    }
    return -72;
  }
  if (__n <= 1) {
    size_t v12 = 1;
  }
  else {
    size_t v12 = __n;
  }
  if (v12 >= *(void *)(a1 + 29408)) {
    size_t v12 = *(void *)(a1 + 29408);
  }
  if (v12 != __n) {
    return -72;
  }
LABEL_4:
  if (a3)
  {
    uint64_t v10 = *(char **)(a1 + 29376);
    if (v10 != __b)
    {
      *(void *)(a1 + 29400) = v10;
      *(void *)(a1 + 29392) = &__b[*(void *)(a1 + 29384) - (void)v10];
      *(void *)(a1 + 29384) = __b;
      *(void *)(a1 + 29376) = __b;
    }
  }
  *(void *)(a1 + 29456) += __n;
  switch(v9)
  {
    case 0:
      if (*(_DWORD *)(a1 + 29584))
      {
        uint64_t v15 = 1;
        if (!__n)
        {
LABEL_23:
          *(void *)(a1 + 29576) = -72;
          return -72;
        }
      }
      else
      {
        if (*(_DWORD *)__src >> 4 == 25481893)
        {
          memcpy((void *)(a1 + 160944), __src, __n);
          *(void *)(a1 + 29408) = 8 - v5;
          int v22 = 6;
          goto LABEL_34;
        }
        uint64_t v15 = 5;
        if (__n < 5) {
          goto LABEL_23;
        }
      }
      unint64_t v25 = __src[v15 - 1];
      uint64_t v26 = (v25 < 0x40) & ((v25 & 0x20) >> 5);
      uint64_t v27 = ZSTD_did_fieldSize[v25 & 3] + v15 + *(void *)((char *)&ZSTD_fcs_fieldSize + ((v25 >> 3) & 0x18));
      if ((v25 & 0x20) == 0) {
        ++v27;
      }
      unint64_t v13 = v27 + v26;
      *(void *)(a1 + 29576) = v27 + v26;
      if ((unint64_t)(v27 + v26) > 0xFFFFFFFFFFFFFF88) {
        return v13;
      }
      memcpy((void *)(a1 + 160944), __src, __n);
      *(void *)(a1 + 29408) = v13 - v5;
      v8[11] = 1;
      return 0;
    case 1:
      memcpy((void *)(a1 + 160944 + *(void *)(a1 + 29576) - __n), __src, __n);
      unint64_t v16 = *(void *)(a1 + 29576);
      unint64_t FrameHeader_advanced = ZSTD_getFrameHeader_advanced(a1 + 29416, (unsigned __int8 *)(a1 + 160944), v16, v8[38]);
      unint64_t v13 = FrameHeader_advanced;
      if (FrameHeader_advanced > 0xFFFFFFFFFFFFFF88) {
        return v13;
      }
      if (FrameHeader_advanced) {
        return -72;
      }
      if (v8[68] == 1 && *(void *)(a1 + 29696)) {
        ZSTD_DCtx_selectFrameDDict(a1);
      }
      unsigned int v23 = v8[3];
      if (!v23 || v8[62] == v23)
      {
        if (v8[4])
        {
          unsigned int v24 = v8[39];
          v8[40] = v24 == 0;
          if (!v24)
          {
            *(_OWORD *)(a1 + 29488) = xmmword_1889B9F80;
            *(_OWORD *)(a1 + 29504) = xmmword_1889B9F90;
            *(void *)(a1 + 29520) = 0x61C8864E7A143579;
            *(_OWORD *)(a1 + 29528) = 0u;
            *(_OWORD *)(a1 + 29544) = 0u;
            *(_OWORD *)(a1 + 29560) = 0u;
          }
        }
        else
        {
          v8[40] = 0;
        }
        *(void *)(a1 + 29456) += v16;
        goto LABEL_91;
      }
      return -32;
    case 2:
      int v18 = *(unsigned __int16 *)__src;
      uint64_t v19 = (v18 | (__src[2] << 16)) >> 3;
      unint64_t v20 = ((unint64_t)*(unsigned __int16 *)__src >> 1) & 3;
      if (v20 == 1)
      {
        unint64_t v21 = ((unint64_t)*(unsigned __int16 *)__src >> 1) & 3;
      }
      else
      {
        if (v20 == 3) {
          return -20;
        }
        unint64_t v21 = (v18 | (__src[2] << 16)) >> 3;
      }
      if (v21 > *v8) {
        return -20;
      }
      *(void *)(a1 + 29408) = v21;
      *(_DWORD *)(a1 + 29472) = v20;
      *(void *)(a1 + 29640) = v19;
      if (v21)
      {
        if (v18) {
          int v22 = 4;
        }
        else {
          int v22 = 3;
        }
      }
      else if (v18)
      {
        if (!*(_DWORD *)(a1 + 29448)) {
          goto LABEL_32;
        }
        *(void *)(a1 + 29408) = 4;
        int v22 = 5;
      }
      else
      {
LABEL_91:
        *(void *)(a1 + 29408) = 3;
        int v22 = 2;
      }
      goto LABEL_34;
    case 3:
    case 4:
      int v11 = *(_DWORD *)(a1 + 29472);
      if (v11)
      {
        if (v11 == 1)
        {
          size_t v5 = *(void *)(a1 + 29640);
          if (v5 <= a3)
          {
            if (__b)
            {
              memset(__b, *__src, *(void *)(a1 + 29640));
            }
            else if (v5)
            {
              size_t v5 = -74;
            }
            else
            {
              size_t v5 = 0;
            }
          }
          else
          {
            size_t v5 = -70;
          }
        }
        else
        {
          if (v11 != 2) {
            return -20;
          }
          size_t v5 = ZSTD_decompressBlock_internal(a1, __b, a3, (unsigned __int8 *)__src, __n, 1);
        }
        size_t v28 = 0;
        *(void *)(a1 + 29408) = 0;
        unint64_t v13 = v5;
        if (v5 > 0xFFFFFFFFFFFFFF88) {
          return v13;
        }
      }
      else
      {
        if (__n > a3) {
          return -70;
        }
        if (__b)
        {
          memcpy(__b, __src, __n);
          if (v5 > 0xFFFFFFFFFFFFFF88) {
            goto LABEL_93;
          }
        }
        else if (__n)
        {
          return -74;
        }
        size_t v28 = *(void *)(a1 + 29408) - v5;
        *(void *)(a1 + 29408) = v28;
      }
      if (v5 > *v8) {
        return -20;
      }
      *(void *)(a1 + 29464) += v5;
      if (v8[40])
      {
        ZSTD_XXH64_update((unsigned int *)(a1 + 29488), __b, v5);
        size_t v28 = *(void *)(a1 + 29408);
      }
      *(void *)(a1 + 29376) = &__b[v5];
      if (!v28)
      {
        if (v8[11] == 4)
        {
          uint64_t v29 = *(void *)(a1 + 29416);
          if (v29 != -1 && *(void *)(a1 + 29464) != v29) {
            return -20;
          }
          if (v8[4])
          {
            *(void *)(a1 + 29408) = 4;
            v8[11] = 5;
          }
          else
          {
            *(void *)(a1 + 29408) = 0;
            v8[11] = 0;
          }
        }
        else
        {
          v8[11] = 2;
          *(void *)(a1 + 29408) = 3;
        }
      }
LABEL_93:
      size_t result = v5;
      break;
    case 5:
      if (!*(_DWORD *)(a1 + 29592) || *(_DWORD *)__src == ZSTD_XXH64_digest((uint64_t *)(a1 + 29488))) {
        goto LABEL_32;
      }
      return -22;
    case 6:
      memcpy((void *)(a1 - __n + 160952), __src, __n);
      *(void *)(a1 + 29408) = *(unsigned int *)(a1 + 160948);
      int v22 = 7;
LABEL_34:
      v8[11] = v22;
      return 0;
    case 7:
LABEL_32:
      *(void *)(a1 + 29408) = 0;
      v8[11] = 0;
      return 0;
    default:
      return -1;
  }
  return result;
}

uint64_t ZSTD_getcBlockSize(unsigned __int16 *a1, unint64_t a2, _DWORD *a3)
{
  if (a2 < 3) {
    return -72;
  }
  unint64_t v4 = *a1;
  unint64_t v5 = (v4 & 0xFFF8 | (*((unsigned __int8 *)a1 + 2) << 16)) >> 3;
  uint64_t result = (v4 >> 1) & 3;
  *a3 = result;
  a3[1] = v4 & 1;
  a3[2] = v5;
  if (result != 1)
  {
    if (result == 3) {
      return -20;
    }
    else {
      return v5;
    }
  }
  return result;
}

uint64_t ZSTD_decompressBlock_internal(uint64_t a1, char *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  v236[14] = *MEMORY[0x1E4F143B8];
  if (a5 >> 17) {
    return -72;
  }
  unint64_t v13 = ZSTD_decodeLiteralsBlock(a1, a4, a5);
  unint64_t v6 = v13;
  if (v13 <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v14 = (int32x2_t *)(a1 + 26684);
    uint64_t v15 = &a4[v13];
    uint64_t v16 = a5 - v13;
    int v17 = *(_DWORD *)(a1 + 29684);
    int v219 = 0;
    unint64_t v18 = ZSTD_decodeSeqHeaders(a1, &v219, v15, v16);
    unint64_t v6 = v18;
    if (v18 <= 0xFFFFFFFFFFFFFF88)
    {
      int v19 = v219;
      if (!a2 && v219 > 0) {
        return -70;
      }
      unint64_t v20 = &v15[v18];
      unint64_t v21 = v16 - v18;
      if (v17)
      {
        *(_DWORD *)(a1 + 29684) = 0;
        goto LABEL_10;
      }
      if (a6)
      {
        if (*(void *)(a1 + 29424) >= 0x1000001uLL && v219 > 4) {
          goto LABEL_19;
        }
      }
      else if (v219 >= 5)
      {
LABEL_19:
        int v30 = 0;
        uint64_t v31 = *(void *)(a1 + 16);
        int v32 = *(_DWORD *)(v31 + 4);
        uint64_t v33 = v31 + 8;
        unsigned int v34 = 1;
        do
        {
          if (*(unsigned __int8 *)(v33 + 8 * (v34 - 1) + 2) > 0x16u) {
            ++v30;
          }
        }
        while (!(v34++ >> v32));
        *(_DWORD *)(a1 + 29684) = 0;
        if ((v30 << (8 - v32)) >= 7)
        {
LABEL_10:
          int v22 = *(long long **)(a1 + 29600);
          unint64_t v230 = v22;
          unint64_t v218 = (unint64_t)v22 + *(void *)(a1 + 29632);
          if (!v19)
          {
            uint64_t v36 = a2;
            size_t v37 = v218 - (void)v22;
            if (v218 - (unint64_t)v22 <= a3) {
              goto LABEL_26;
            }
            return -70;
          }
          unsigned int v23 = *(char **)(a1 + 29384);
          uint64_t v211 = *(void *)(a1 + 29392);
          unint64_t v24 = *(void *)(a1 + 29400);
          long long v223 = 0u;
          long long v224 = 0u;
          long long v221 = 0u;
          long long v222 = 0u;
          long long v220 = 0u;
          *(_DWORD *)(a1 + 29484) = 1;
          unint64_t v25 = v14->u32[0];
          uint64_t v225 = 0;
          *(void *)unsigned int v226 = v25;
          uint64_t v26 = *(void *)(a1 + 26688);
          *(void *)&long long v27 = v26;
          *((void *)&v27 + 1) = HIDWORD(v26);
          *(_OWORD *)&v226[8] = v27;
          if (v19 >= 4) {
            int v28 = 4;
          }
          else {
            int v28 = v19;
          }
          uint64_t v29 = (char *)(a2 - v23);
          unint64_t v229 = (char *)(a2 - v23);
          unint64_t v227 = v23;
          unint64_t v228 = v24;
          unint64_t v217 = v24;
          if (v16 == v6) {
            return -20;
          }
          *((void *)&v221 + 1) = v20;
          *(void *)&long long v222 = v20 + 8;
          uint64_t v39 = v21 - 8;
          if (v21 < 8)
          {
            unint64_t v40 = *v20;
            *(void *)&long long v221 = v20;
            *(void *)&long long v220 = v40;
            switch(v21)
            {
              case 2uLL:
                goto LABEL_41;
              case 3uLL:
                goto LABEL_40;
              case 4uLL:
                goto LABEL_39;
              case 5uLL:
                goto LABEL_38;
              case 6uLL:
                goto LABEL_37;
              case 7uLL:
                v40 |= (unint64_t)v20[6] << 48;
LABEL_37:
                v40 += (unint64_t)v20[5] << 40;
LABEL_38:
                v40 += (unint64_t)v20[4] << 32;
LABEL_39:
                v40 += (unint64_t)v20[3] << 24;
LABEL_40:
                v40 += (unint64_t)v20[2] << 16;
LABEL_41:
                v40 += (unint64_t)v20[1] << 8;
                *(void *)&long long v220 = v40;
                break;
              default:
                break;
            }
            if (!v20[v21 - 1]) {
              return -20;
            }
            uint64_t v39 = 0;
            unsigned int v41 = __clz(v20[v21 - 1]) - 8 * v21 + 41;
            DWORD2(v220) = v41;
          }
          else
          {
            unint64_t v40 = *(void *)&v20[v39];
            *(void *)&long long v221 = &v20[v39];
            *(void *)&long long v220 = v40;
            if (!HIBYTE(v40) || v21 > 0xFFFFFFFFFFFFFF88) {
              return -20;
            }
            unsigned int v41 = __clz(HIBYTE(v40)) - 23;
          }
          uint64_t v42 = *(void *)a1;
          uint64_t v43 = *(unsigned int *)(*(void *)a1 + 4);
          unsigned int v44 = v43 + v41;
          unint64_t v45 = (v40 >> -(char)v44) & BIT_mask[v43];
          *((void *)&v222 + 1) = v45;
          if (v44 <= 0x40)
          {
            if (v39 >= 8)
            {
              v39 -= v44 >> 3;
              *(void *)&long long v221 = &v20[v39];
              v44 &= 7u;
            }
            else
            {
              if (!v39) {
                goto LABEL_56;
              }
              uint64_t v46 = v44 >> 3;
              if (&v20[v39 - v46] >= v20) {
                uint64_t v47 = v46;
              }
              else {
                uint64_t v47 = v39;
              }
              v39 -= v47;
              *(void *)&long long v221 = &v20[v39];
              v44 -= 8 * v47;
            }
            unint64_t v40 = *(void *)&v20[v39];
            *(void *)&long long v220 = v40;
          }
LABEL_56:
          uint64_t v213 = v42 + 8;
          *(void *)&long long v223 = v42 + 8;
          uint64_t v49 = *(void *)(a1 + 16);
          uint64_t v50 = *(unsigned int *)(v49 + 4);
          unsigned int v51 = v50 + v44;
          unint64_t v52 = (v40 >> -(char)(v50 + v44)) & BIT_mask[v50];
          *((void *)&v223 + 1) = v52;
          uint64_t v210 = &a2[a3];
          int v205 = v28;
          if (v50 + v44 <= 0x40)
          {
            if (v39 >= 8)
            {
              v39 -= v51 >> 3;
              *(void *)&long long v221 = &v20[v39];
              v51 &= 7u;
LABEL_64:
              unint64_t v40 = *(void *)&v20[v39];
              *(void *)&long long v220 = v40;
              goto LABEL_65;
            }
            if (v39)
            {
              uint64_t v53 = v51 >> 3;
              if (&v20[v39 - v53] >= v20) {
                uint64_t v54 = v53;
              }
              else {
                uint64_t v54 = v39;
              }
              v39 -= v54;
              *(void *)&long long v221 = &v20[v39];
              v51 -= 8 * v54;
              goto LABEL_64;
            }
          }
LABEL_65:
          uint64_t v55 = v49 + 8;
          *(void *)&long long v224 = v49 + 8;
          uint64_t v56 = *(void *)(a1 + 8);
          uint64_t v57 = *(unsigned int *)(v56 + 4);
          unsigned int v58 = v57 + v51;
          unint64_t v59 = (v40 >> -(char)(v57 + v51)) & BIT_mask[v57];
          DWORD2(v220) = v57 + v51;
          *((void *)&v224 + 1) = v59;
          uint64_t v215 = (int32x2_t *)(a1 + 26684);
          long long v216 = v23;
          int v209 = v19;
          unint64_t v207 = a2;
          if (v57 + v51 >= 0x41)
          {
            LODWORD(v60) = 0;
            uint64_t v225 = v56 + 8;
            goto LABEL_124;
          }
          if (v39 >= 8)
          {
            v39 -= v58 >> 3;
            v58 &= 7u;
            DWORD2(v220) = v58;
            unint64_t v40 = *(void *)&v20[v39];
            *(void *)&long long v220 = v40;
            *(void *)&long long v221 = &v20[v39];
            uint64_t v225 = v56 + 8;
          }
          else if (v39)
          {
            uint64_t v61 = v58 >> 3;
            if (&v20[v39 - v61] >= v20) {
              uint64_t v62 = v61;
            }
            else {
              uint64_t v62 = v39;
            }
            v39 -= v62;
            v58 -= 8 * v62;
            DWORD2(v220) = v58;
            unint64_t v40 = *(void *)&v20[v39];
            *(void *)&long long v220 = v40;
            *(void *)&long long v221 = &v20[v39];
            uint64_t v225 = v56 + 8;
            if (v58 > 0x40)
            {
              LODWORD(v60) = 0;
              goto LABEL_124;
            }
          }
          else
          {
            uint64_t v225 = v56 + 8;
          }
          uint64_t v63 = 0;
          uint64_t v60 = v28 & ~(v28 >> 31);
          uint64_t v64 = v56 + 8;
          uint64_t v65 = v26;
          uint64_t v66 = v236;
          while (1)
          {
            if (v39 >= 8)
            {
              v39 -= v58 >> 3;
              *(void *)&long long v221 = &v20[v39];
              v58 &= 7u;
              DWORD2(v220) = v58;
              unint64_t v40 = *(void *)&v20[v39];
            }
            else
            {
              if (!v39) {
                goto LABEL_85;
              }
              uint64_t v67 = v58 >> 3;
              if (&v20[v39 - v67] >= v20) {
                uint64_t v68 = v67;
              }
              else {
                uint64_t v68 = v39;
              }
              v39 -= v68;
              *(void *)&long long v221 = &v20[v39];
              v58 -= 8 * v68;
              DWORD2(v220) = v58;
              unint64_t v40 = *(void *)&v20[v39];
            }
            *(void *)&long long v220 = v40;
LABEL_85:
            if (v60 == v63)
            {
              uint64_t v105 = (uint64_t)v210;
              unsigned int v23 = v216;
              uint64_t v106 = v210 - 32;
              uint64_t v36 = a2;
              uint64_t v208 = v210 - 32;
              if (v58 < 0x41) {
                goto LABEL_126;
              }
              goto LABEL_203;
            }
            uint64_t v69 = v60;
            uint64_t v70 = (unsigned __int16 *)(v213 + 8 * v45);
            uint64_t v71 = *v70;
            int v72 = *((unsigned __int8 *)v70 + 2);
            int v73 = *((unsigned __int8 *)v70 + 3);
            unint64_t v74 = *((unsigned int *)v70 + 1);
            int v75 = (unsigned __int16 *)(v64 + 8 * v59);
            uint64_t v76 = *v75;
            int v77 = *((unsigned __int8 *)v75 + 2);
            int v78 = *((unsigned __int8 *)v75 + 3);
            unint64_t v79 = *((unsigned int *)v75 + 1);
            unsigned int v80 = (unsigned __int16 *)(v55 + 8 * v52);
            uint64_t v81 = *v80;
            unsigned int v82 = *((unsigned __int8 *)v80 + 2);
            int v83 = *((unsigned __int8 *)v80 + 3);
            uint64_t v84 = *((unsigned int *)v80 + 1);
            if (v82 >= 2)
            {
              unint64_t v85 = v40 << v58 >> -(char)v82;
              uint64_t v14 = v215;
              v58 += v82;
              uint64_t v86 = v85 + v84;
              goto LABEL_88;
            }
            if (v82)
            {
              if (v74) {
                uint64_t v84 = v84;
              }
              else {
                uint64_t v84 = (v84 + 1);
              }
              unint64_t v103 = v40 << v58++;
              uint64_t v104 = v84 + (v103 >> 63);
              if (v104 == 3)
              {
                uint64_t v86 = v25 - 1;
                if (v25 == 1) {
                  uint64_t v86 = 1;
                }
                uint64_t v14 = v215;
                int v19 = v209;
                a2 = v207;
                goto LABEL_88;
              }
              uint64_t v86 = *(void *)&v226[8 * v104];
              if (!v86) {
                uint64_t v86 = 1;
              }
              uint64_t v14 = v215;
              int v19 = v209;
              a2 = v207;
              if (v104 != 1) {
LABEL_88:
              }
                *(void *)&v226[16] = v65;
LABEL_89:
              *(void *)unsigned int v226 = v86;
              *(void *)&v226[8] = v25;
              uint64_t v65 = v25;
              unint64_t v25 = v86;
              goto LABEL_92;
            }
            uint64_t v86 = v65;
            if (!v74) {
              goto LABEL_89;
            }
LABEL_92:
            unsigned __int8 v87 = v77 + v72 + v82;
            unint64_t v88 = (v40 << v58 >> -(char)v77) + v79;
            if (v77)
            {
              v58 += v77;
              unint64_t v79 = v88;
            }
            if (v87 < 0x1Fu) {
              goto LABEL_95;
            }
            if (v58 <= 0x40)
            {
              if (v39 >= 8)
              {
                v39 -= v58 >> 3;
                unint64_t v40 = *(void *)&v20[v39];
                v58 &= 7u;
                *(void *)&long long v221 = &v20[v39];
LABEL_116:
                *(void *)&long long v220 = v40;
                goto LABEL_117;
              }
              if (v39)
              {
                uint64_t v102 = v58 >> 3;
                if (&v20[v39 - v102] >= v20) {
                  uint64_t v102 = v102;
                }
                else {
                  uint64_t v102 = v39;
                }
                v39 -= v102;
                unint64_t v40 = *(void *)&v20[v39];
                v58 -= 8 * v102;
                *(void *)&long long v221 = &v20[v39];
                goto LABEL_116;
              }
            }
LABEL_117:
            uint64_t v14 = v215;
            int v19 = v209;
            a2 = v207;
LABEL_95:
            unint64_t v89 = (v40 << v58 >> -(char)v72) + v74;
            if (v72)
            {
              v58 += v72;
              unint64_t v74 = v89;
            }
            uint64_t v90 = &v29[v74];
            unint64_t v91 = v217;
            if (v25 <= (unint64_t)&v29[v74]) {
              unint64_t v91 = (unint64_t)v216;
            }
            uint64_t v29 = &v90[v79];
            unint64_t v229 = &v90[v79];
            int v92 = v58 + v73;
            unint64_t v45 = ((v40 >> -(char)v92) & BIT_mask[v73]) + v71;
            int v93 = v92 + v78;
            unint64_t v59 = ((v40 >> -(char)v93) & BIT_mask[v78]) + v76;
            *((void *)&v224 + 1) = v59;
            unsigned int v58 = v93 + v83;
            uint64_t v94 = BIT_mask[v83];
            DWORD2(v220) = v58;
            unint64_t v52 = ((v40 >> -(char)v58) & v94) + v81;
            *((void *)&v222 + 1) = v45;
            *((void *)&v223 + 1) = v52;
            *(v66 - 2) = v74;
            *(v66 - 1) = v79;
            _X5 = (unint64_t)&v90[v91 - v25];
            unint64_t *v66 = v25;
            v66[1] = _X5;
            v66 += 4;
            __asm { PRFM            #0, [X5] }
            _X5 = _X5 + v79;
            __asm { PRFUM           #0, [X5,#-1] }
            ++v63;
            uint64_t v60 = v69;
            if (v58 > 0x40)
            {
              LODWORD(v60) = v63;
              unsigned int v23 = v216;
LABEL_124:
              uint64_t v105 = (uint64_t)v210;
              if ((int)v60 < v28) {
                return -20;
              }
              uint64_t v106 = v210 - 32;
              uint64_t v36 = a2;
              uint64_t v208 = v210 - 32;
              if (v58 < 0x41)
              {
LABEL_126:
                while (2)
                {
                  BOOL v107 = (void *)v221;
                  if ((unint64_t)v221 >= (unint64_t)v222)
                  {
                    BOOL v107 = (void *)(v221 - (v58 >> 3));
                    *(void *)&long long v221 = v107;
                    v58 &= 7u;
                    goto LABEL_133;
                  }
                  if ((void)v221 != *((void *)&v221 + 1))
                  {
                    uint64_t v108 = v58 >> 3;
                    if ((unint64_t)(v221 - v108) >= *((void *)&v221 + 1)) {
                      uint64_t v109 = v108;
                    }
                    else {
                      uint64_t v109 = (v221 - DWORD2(v221));
                    }
                    BOOL v107 = (void *)(v221 - v109);
                    *(void *)&long long v221 = v221 - v109;
                    v58 -= 8 * v109;
LABEL_133:
                    DWORD2(v220) = v58;
                    *(void *)&long long v220 = *v107;
                  }
                  if ((int)v60 >= v19) {
                    goto LABEL_204;
                  }
                  int v110 = (unsigned __int16 *)(v223 + 8 * *((void *)&v222 + 1));
                  uint64_t v111 = *v110;
                  int v112 = *((unsigned __int8 *)v110 + 2);
                  int v113 = *((unsigned __int8 *)v110 + 3);
                  unint64_t v114 = *((unsigned int *)v110 + 1);
                  unsigned int v115 = (unsigned __int16 *)(v225 + 8 * *((void *)&v224 + 1));
                  uint64_t v116 = *v115;
                  int v117 = *((unsigned __int8 *)v115 + 2);
                  int v118 = *((unsigned __int8 *)v115 + 3);
                  unint64_t v119 = *((unsigned int *)v115 + 1);
                  uint64_t v120 = (unsigned __int16 *)(v224 + 8 * *((void *)&v223 + 1));
                  uint64_t v121 = *v120;
                  unsigned int v122 = *((unsigned __int8 *)v120 + 2);
                  int v123 = *((unsigned __int8 *)v120 + 3);
                  uint64_t v124 = *((unsigned int *)v120 + 1);
                  if (v122 >= 2)
                  {
                    uint64_t v125 = (void)v220 << v58 >> -(char)v122;
                    unsigned int v23 = v216;
                    v58 += v122;
                    unint64_t v126 = v125 + v124;
                    *(_OWORD *)&v226[8] = *(_OWORD *)v226;
                    *(void *)unsigned int v226 = v125 + v124;
                    goto LABEL_140;
                  }
                  if (!v122)
                  {
                    if (v114)
                    {
                      unint64_t v126 = *(void *)v226;
                    }
                    else
                    {
                      unint64_t v126 = *(void *)&v226[8];
                      uint64_t v171 = *(void *)v226;
                      *(void *)unsigned int v226 = *(void *)&v226[8];
                      *(void *)&v226[8] = v171;
                    }
LABEL_140:
                    if (v117)
                    {
                      uint64_t v127 = (void)v220 << v58 >> -(char)v117;
                      v58 += v117;
                      v119 += v127;
                    }
                    if ((v117 + v112 + v122) < 0x1Fu)
                    {
LABEL_143:
                      unint64_t v128 = ((void)v220 << v58 >> -(char)v112) + v114;
                      _ZF = v112 == 0;
                      if (v112) {
                        unsigned int v130 = v58 + v112;
                      }
                      else {
                        unsigned int v130 = v58;
                      }
                      if (_ZF) {
                        unint64_t v131 = v114;
                      }
                      else {
                        unint64_t v131 = v128;
                      }
                      uint64_t v132 = &v229[v131];
                      uint64_t v133 = (uint64_t *)&v228;
                      unint64_t v212 = v126;
                      if (v126 <= (unint64_t)&v229[v131]) {
                        uint64_t v133 = (uint64_t *)&v227;
                      }
                      uint64_t v134 = *v133;
                      unint64_t v214 = v119;
                      unint64_t v229 = &v132[v119];
                      char v135 = v130 + v113;
                      uint64_t v136 = (((unint64_t)v220 >> -(char)(v130 + v113)) & BIT_mask[v113]) + v111;
                      int v137 = v130 + v113 + v118;
                      *((void *)&v224 + 1) = (((unint64_t)v220 >> -(char)(v135 + v118)) & BIT_mask[v118])
                                             + v116;
                      unint64_t v138 = ((unint64_t)v220 >> -(char)(v137 + v123)) & BIT_mask[v123];
                      DWORD2(v220) = v137 + v123;
                      *((void *)&v222 + 1) = v136;
                      *((void *)&v223 + 1) = v138 + v121;
                      uint64_t v139 = (unint64_t *)&v235[32 * (v60 & 3)];
                      unint64_t v140 = *v139;
                      size_t v141 = v139[1];
                      unint64_t v142 = v139[2];
                      BOOL v143 = v230;
                      uint64_t v144 = (long long *)((char *)v230 + *v139);
                      if ((unint64_t)v144 > v218 || (unint64_t v6 = v141 + v140, &v36[v141 + v140] > v106))
                      {
                        unint64_t v157 = v139[3];
                        unint64_t v231 = *v139;
                        size_t v232 = v141;
                        unint64_t v233 = v142;
                        unint64_t v234 = v157;
                        uint64_t v158 = v134;
                        unint64_t v159 = v131;
                        uint64_t v160 = ZSTD_execSequenceEnd(v36, v105, (uint64_t *)&v231, &v230, v218, v216, v211, v217);
                        uint64_t v134 = v158;
                        uint64_t v14 = v215;
                        unsigned int v23 = v216;
                        uint64_t v105 = (uint64_t)v210;
                        int v19 = v209;
                        unint64_t v6 = v160;
                        unint64_t v131 = v159;
                        a2 = v207;
                        uint64_t v106 = v208;
                      }
                      else
                      {
                        uint64_t v145 = &v36[v140];
                        *(_OWORD *)uint64_t v36 = *v230;
                        if (v140 > 0x10)
                        {
                          uint64_t v164 = v36 + 16;
                          uint64_t v165 = v143 + 1;
                          do
                          {
                            long long v166 = *v165++;
                            *(_OWORD *)uint64_t v164 = v166;
                            v164 += 16;
                          }
                          while (v164 < v145);
                        }
                        unint64_t v146 = &v145[-v142];
                        unint64_t v230 = v144;
                        if (v142 <= v145 - v23)
                        {
LABEL_158:
                          if (v142 < 0x10)
                          {
                            if (v142 > 7)
                            {
                              *(void *)uint64_t v145 = *(void *)v146;
                            }
                            else
                            {
                              uint64_t v167 = ZSTD_overlapCopy8_dec64table[v142];
                              *uint64_t v145 = *v146;
                              v145[1] = v146[1];
                              v145[2] = v146[2];
                              v145[3] = v146[3];
                              uint64_t v168 = &v146[ZSTD_overlapCopy8_dec32table[v142]];
                              *((_DWORD *)v145 + 1) = *(_DWORD *)v168;
                              unint64_t v146 = &v168[-v167];
                            }
                            if (v141 >= 9)
                            {
                              unsigned int v172 = v145 + 8;
                              int8x16x2_t v173 = (long long *)(v146 + 8);
                              uint64_t v174 = &v145[v141];
                              if (v145 + 8 - (char *)v173 >= 16)
                              {
                                do
                                {
                                  long long v176 = *v173++;
                                  *v172++ = v176;
                                }
                                while (v172 < (_OWORD *)v174);
                              }
                              else
                              {
                                do
                                {
                                  uint64_t v175 = *(void *)v173;
                                  int8x16x2_t v173 = (long long *)((char *)v173 + 8);
                                  *(void *)unsigned int v172 = v175;
                                  unsigned int v172 = (_OWORD *)((char *)v172 + 8);
                                }
                                while (v172 < (_OWORD *)v174);
                              }
                            }
                            uint64_t v14 = v215;
                            unsigned int v23 = v216;
                            int v19 = v209;
                            uint64_t v105 = (uint64_t)v210;
                            a2 = v207;
                            uint64_t v106 = v208;
                          }
                          else
                          {
                            BOOL v151 = &v145[v141];
                            do
                            {
                              long long v152 = *(_OWORD *)v146;
                              v146 += 16;
                              *(_OWORD *)uint64_t v145 = v152;
                              v145 += 16;
                            }
                            while (v145 < v151);
                            uint64_t v14 = v215;
                          }
                        }
                        else
                        {
                          if (v142 > (unint64_t)&v145[-v211]) {
                            return -20;
                          }
                          uint64_t v147 = v134;
                          unint64_t v148 = v131;
                          uint64_t v149 = v146 - v23;
                          long long v150 = (const void *)(v217 + v146 - v23);
                          if ((unint64_t)v150 + v141 > v217)
                          {
                            size_t v206 = v141;
                            memmove(v145, v150, v23 - v146);
                            v145 -= v149;
                            size_t v141 = v149 + v206;
                            unsigned int v23 = v216;
                            unint64_t v146 = v216;
                            int v19 = v209;
                            uint64_t v105 = (uint64_t)v210;
                            unint64_t v131 = v148;
                            a2 = v207;
                            uint64_t v106 = v208;
                            uint64_t v134 = v147;
                            goto LABEL_158;
                          }
                          memmove(v145, v150, v141);
                          unsigned int v23 = v216;
                          int v19 = v209;
                          uint64_t v105 = (uint64_t)v210;
                          unint64_t v131 = v148;
                          a2 = v207;
                          uint64_t v106 = v208;
                          uint64_t v134 = v147;
                          uint64_t v14 = v215;
                        }
                      }
                      if (v6 > 0xFFFFFFFFFFFFFF88) {
                        return v6;
                      }
                      _X8 = (unint64_t)&v132[v134 - v212];
                      __asm { PRFM            #0, [X8] }
                      _X9 = _X8 + v214;
                      __asm { PRFUM           #0, [X9,#-1] }
                      unint64_t *v139 = v131;
                      v139[1] = v214;
                      v139[2] = v212;
                      v139[3] = _X8;
                      v36 += v6;
                      LODWORD(v60) = v60 + 1;
                      unsigned int v58 = DWORD2(v220);
                      if (DWORD2(v220) >= 0x41) {
                        goto LABEL_203;
                      }
                      continue;
                    }
                    if (v58 <= 0x40)
                    {
                      if ((unint64_t)v107 >= (unint64_t)v222)
                      {
                        uint64_t v163 = (void *)((char *)v107 - (v58 >> 3));
                        *(void *)&long long v221 = v163;
                        v58 &= 7u;
                        goto LABEL_195;
                      }
                      if (v107 != *((void **)&v221 + 1))
                      {
                        uint64_t v161 = v58 >> 3;
                        if ((unint64_t)v107 - v161 >= *((void *)&v221 + 1)) {
                          uint64_t v162 = v161;
                        }
                        else {
                          uint64_t v162 = (v107 - DWORD2(v221));
                        }
                        uint64_t v163 = (void *)((char *)v107 - v162);
                        *(void *)&long long v221 = v163;
                        v58 -= 8 * v162;
LABEL_195:
                        *(void *)&long long v220 = *v163;
                      }
                    }
                    int v19 = v209;
                    uint64_t v105 = (uint64_t)v210;
                    unsigned int v23 = v216;
                    a2 = v207;
                    uint64_t v106 = v208;
                    goto LABEL_143;
                  }
                  break;
                }
                if (v114) {
                  uint64_t v124 = v124;
                }
                else {
                  uint64_t v124 = (v124 + 1);
                }
                unint64_t v169 = (void)v220 << v58++;
                DWORD2(v220) = v58;
                uint64_t v170 = v124 + (v169 >> 63);
                if (v170 == 3)
                {
                  if (*(void *)v226 == 1) {
                    unint64_t v126 = 1;
                  }
                  else {
                    unint64_t v126 = *(void *)v226 - 1;
                  }
                  goto LABEL_201;
                }
                if (*(void *)&v226[8 * v170]) {
                  unint64_t v126 = *(void *)&v226[8 * v170];
                }
                else {
                  unint64_t v126 = 1;
                }
                if (v170 != 1) {
LABEL_201:
                }
                  *(void *)&v226[16] = *(void *)&v226[8];
                uint64_t v177 = *(void *)v226;
                *(void *)unsigned int v226 = v126;
                *(void *)&v226[8] = v177;
                int v19 = v209;
                uint64_t v105 = (uint64_t)v210;
                unsigned int v23 = v216;
                a2 = v207;
                uint64_t v106 = v208;
                goto LABEL_140;
              }
LABEL_203:
              if ((int)v60 >= v19)
              {
LABEL_204:
                int v178 = v60 - v205;
                if ((int)v60 - v205 < v19)
                {
                  do
                  {
                    unsigned int v179 = (unint64_t *)&v235[32 * (v178 & 3)];
                    unint64_t v180 = *v179;
                    size_t v181 = v179[1];
                    unint64_t v182 = v179[2];
                    unint64_t v6 = v181 + *v179;
                    float64x2x2_t v183 = v230;
                    uint64_t v184 = (long long *)((char *)v230 + *v179);
                    if ((unint64_t)v184 > v218 || &v36[v6] > v106)
                    {
                      unint64_t v193 = v179[3];
                      unint64_t v231 = *v179;
                      size_t v232 = v181;
                      unint64_t v233 = v182;
                      unint64_t v234 = v193;
                      uint64_t v194 = ZSTD_execSequenceEnd(v36, v105, (uint64_t *)&v231, &v230, v218, v216, v211, v217);
                      uint64_t v106 = v208;
                      uint64_t v14 = v215;
                      unsigned int v23 = v216;
                      uint64_t v105 = (uint64_t)v210;
                      int v19 = v209;
                      unint64_t v6 = v194;
                    }
                    else
                    {
                      unint64_t v186 = &v36[v180];
                      *(_OWORD *)uint64_t v36 = *v230;
                      if (v180 > 0x10)
                      {
                        uint64_t v195 = v36 + 16;
                        unsigned int v196 = v183 + 1;
                        do
                        {
                          long long v197 = *v196++;
                          *(_OWORD *)uint64_t v195 = v197;
                          v195 += 16;
                        }
                        while (v195 < v186);
                      }
                      uint64_t v187 = &v186[-v182];
                      unint64_t v230 = v184;
                      if (v182 <= v186 - v23) {
                        goto LABEL_214;
                      }
                      if (v182 > (unint64_t)&v186[-v211]) {
                        return -20;
                      }
                      uint64_t v188 = v187 - v23;
                      uint64_t v189 = (const void *)(v217 + v187 - v23);
                      BOOL v190 = v23;
                      if ((unint64_t)v189 + v181 > v217)
                      {
                        memmove(v186, v189, v23 - v187);
                        v186 -= v188;
                        v181 += v188;
                        uint64_t v187 = v190;
                        int v19 = v209;
                        uint64_t v105 = (uint64_t)v210;
                        unsigned int v23 = v190;
                        uint64_t v106 = v208;
LABEL_214:
                        if (v182 < 0x10)
                        {
                          if (v182 > 7)
                          {
                            *(void *)unint64_t v186 = *(void *)v187;
                          }
                          else
                          {
                            uint64_t v198 = ZSTD_overlapCopy8_dec64table[v182];
                            *unint64_t v186 = *v187;
                            v186[1] = v187[1];
                            v186[2] = v187[2];
                            v186[3] = v187[3];
                            char v199 = &v187[ZSTD_overlapCopy8_dec32table[v182]];
                            *((_DWORD *)v186 + 1) = *(_DWORD *)v199;
                            uint64_t v187 = &v199[-v198];
                          }
                          if (v181 >= 9)
                          {
                            char v200 = v186 + 8;
                            unint64_t v201 = (long long *)(v187 + 8);
                            uint64_t v202 = &v186[v181];
                            if (v186 + 8 - (char *)v201 >= 16)
                            {
                              do
                              {
                                long long v204 = *v201++;
                                *(_OWORD *)char v200 = v204;
                                v200 += 16;
                              }
                              while (v200 < v202);
                            }
                            else
                            {
                              do
                              {
                                uint64_t v203 = *(void *)v201;
                                unint64_t v201 = (long long *)((char *)v201 + 8);
                                *(void *)char v200 = v203;
                                v200 += 8;
                              }
                              while (v200 < v202);
                            }
                          }
                          uint64_t v14 = v215;
                          unsigned int v23 = v216;
                          int v19 = v209;
                          uint64_t v105 = (uint64_t)v210;
                          a2 = v207;
                          uint64_t v106 = v208;
                        }
                        else
                        {
                          unsigned int v191 = &v186[v181];
                          do
                          {
                            long long v192 = *(_OWORD *)v187;
                            v187 += 16;
                            *(_OWORD *)unint64_t v186 = v192;
                            v186 += 16;
                          }
                          while (v186 < v191);
                          uint64_t v14 = v215;
                        }
                        goto LABEL_219;
                      }
                      memmove(v186, v189, v181);
                      uint64_t v14 = v215;
                      int v19 = v209;
                      uint64_t v105 = (uint64_t)v210;
                      unsigned int v23 = v190;
                      uint64_t v106 = v208;
                    }
LABEL_219:
                    if (v6 > 0xFFFFFFFFFFFFFF88) {
                      return v6;
                    }
                    v36 += v6;
                    ++v178;
                  }
                  while (v178 != v19);
                }
                *uint64_t v14 = vmovn_s64(*(int64x2_t *)v226);
                v14[1].i32[0] = *(_DWORD *)&v226[16];
                int v22 = v230;
                size_t v37 = v218 - (void)v230;
                if (v218 - (unint64_t)v230 <= v105 - (uint64_t)v36)
                {
LABEL_26:
                  if (v36)
                  {
                    memcpy(v36, v22, v37);
                    unsigned int v38 = &v36[v37];
                  }
                  else
                  {
                    unsigned int v38 = 0;
                  }
                  return v38 - a2;
                }
                return -70;
              }
              return -20;
            }
          }
        }
        return ZSTD_decompressSequences((uint64_t *)a1, a2, a3, v20, v21, v19);
      }
      *(_DWORD *)(a1 + 29684) = 0;
      return ZSTD_decompressSequences((uint64_t *)a1, a2, a3, v20, v21, v19);
    }
  }
  return v6;
}

uint64_t ZSTD_loadDEntropy(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a3 < 9) {
    return -30;
  }
  uint64_t v6 = a2 + 8;
  unint64_t DTableX2_wksp = HUF_readDTableX2_wksp(a1 + 2566, (char *)(a2 + 8), a3 - 8, (uint64_t)a1, 0x2818uLL);
  if (DTableX2_wksp > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  unint64_t v8 = a2 + a3;
  int v9 = (_DWORD *)(v6 + DTableX2_wksp);
  unsigned int v25 = 0;
  unsigned int v26 = 31;
  unint64_t v10 = FSE_readNCount_bmi2(v27, &v26, &v25, v9, a2 + a3 - (void)v9);
  if (v10 > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  if (v26 > 0x1F) {
    return -30;
  }
  if (v25 >= 9) {
    return -30;
  }
  unint64_t v11 = v10;
  ZSTD_buildFSETable(a1 + 1026, (uint64_t)v27, v26, (uint64_t)&OF_base, (uint64_t)&OF_bits, v25, (uint64_t)(a1 + 6666));
  size_t v12 = (_DWORD *)((char *)v9 + v11);
  unsigned int v25 = 0;
  unsigned int v26 = 52;
  unint64_t v13 = FSE_readNCount_bmi2(v27, &v26, &v25, v12, v8 - (void)v12);
  if (v13 > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  if (v26 > 0x34) {
    return -30;
  }
  if (v25 >= 0xA) {
    return -30;
  }
  unint64_t v14 = v13;
  ZSTD_buildFSETable(a1 + 1540, (uint64_t)v27, v26, (uint64_t)&ML_base, (uint64_t)ML_bits, v25, (uint64_t)(a1 + 6666));
  uint64_t v15 = (_DWORD *)((char *)v12 + v14);
  unsigned int v25 = 0;
  unsigned int v26 = 35;
  unint64_t v16 = FSE_readNCount_bmi2(v27, &v26, &v25, v15, v8 - (void)v15);
  if (v16 > 0xFFFFFFFFFFFFFF88) {
    return -30;
  }
  if (v26 > 0x23) {
    return -30;
  }
  if (v25 >= 0xA) {
    return -30;
  }
  unint64_t v17 = v16;
  ZSTD_buildFSETable(a1, (uint64_t)v27, v26, (uint64_t)&LL_base, (uint64_t)LL_bits, v25, (uint64_t)(a1 + 6666));
  unint64_t v18 = (_DWORD *)((char *)v15 + v17);
  unint64_t v19 = (unint64_t)v15 + v17 + 12;
  if (v19 > v8) {
    return -30;
  }
  unint64_t v21 = *v18;
  uint64_t result = -30;
  if (v21)
  {
    unint64_t v22 = v8 - v19;
    if (v8 - v19 >= v21)
    {
      a1[6663] = v21;
      unint64_t v23 = v18[1];
      if (v23)
      {
        if (v22 >= v23)
        {
          a1[6664] = v23;
          unint64_t v24 = v18[2];
          if (v24)
          {
            if (v22 >= v24)
            {
              a1[6665] = v24;
              return v19 - a2;
            }
          }
        }
      }
    }
  }
  return result;
}

int *ZSTD_buildFSETable(int *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v7 = result + 2;
  unint64_t v8 = (1 << a6);
  uint64_t v9 = (v8 - 1);
  uint64_t v10 = (a3 + 1);
  if (a3 != -1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a7 + 106;
    int v14 = 1;
    unsigned int v15 = v8 - 1;
    do
    {
      while (1)
      {
        int v16 = *(__int16 *)(a2 + 2 * v12);
        if (v16 != -1) {
          break;
        }
        unint64_t v17 = &v7[2 * v15--];
        v17[1] = v12;
        *(_WORD *)(a7 + 2 * v12++) = 1;
        if (v10 == v12) {
          goto LABEL_9;
        }
      }
      if (0x10000 << (a6 - 1) >> 16 <= v16) {
        int v14 = 0;
      }
      *(_WORD *)(a7 + 2 * v12++) = v16;
    }
    while (v10 != v12);
LABEL_9:
    *uint64_t result = v14;
    result[1] = a6;
    unsigned int v18 = v8 >> 3;
    if (v15 != v9)
    {
      uint64_t v31 = 0;
      unsigned int v32 = 0;
      unsigned int v33 = v18 + (v8 >> 1) + 3;
      do
      {
        int v34 = *(__int16 *)(a2 + 2 * v31);
        if (v34 >= 1)
        {
          for (int i = 0; i != v34; ++i)
          {
            v7[2 * v32 + 1] = v31;
            do
              unsigned int v32 = (v33 + v32) & v9;
            while (v32 > v15);
          }
        }
        ++v31;
      }
      while (v31 != v10);
      goto LABEL_34;
    }
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    while (1)
    {
      int v22 = *(__int16 *)(a2 + 2 * v19);
      unint64_t v23 = *(unsigned __int16 *)(a2 + 2 * v19);
      *(void *)(v13 + v21) = v20;
      if (v22 >= 9)
      {
        if (v23 <= 0x10) {
          uint64_t v24 = 16;
        }
        else {
          uint64_t v24 = v23;
        }
        unint64_t v25 = v24 - 9;
        if (v25 >= 0x18)
        {
          uint64_t v27 = (v25 >> 3) + 1;
          unint64_t v26 = (32 * ((v27 & 0x3FFFFFFFFFFFFFFCuLL) >> 2)) | 8;
          int64x2_t v28 = vdupq_n_s64(v20);
          uint64_t v29 = (int64x2_t *)(a7 + 130 + v21);
          uint64_t v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v29[-1] = v28;
            *uint64_t v29 = v28;
            v29 += 2;
            v30 -= 4;
          }
          while (v30);
          if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_11;
          }
        }
        else
        {
          unint64_t v26 = 8;
        }
        do
        {
          *(void *)(v13 + v21 + v26) = v20;
          v26 += 8;
        }
        while (v26 < v23);
      }
LABEL_11:
      v21 += (__int16)v23;
      ++v19;
      v20 += 0x101010101010101;
      if (v19 == v10)
      {
        unsigned int v11 = v18 + 3 + (v8 >> 1);
        goto LABEL_32;
      }
    }
  }
  *uint64_t result = 1;
  result[1] = a6;
  unsigned int v11 = (v8 >> 3) + (v8 >> 1) + 3;
LABEL_32:
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  do
  {
    v7[2 * (v37 & v9) + 1] = *(unsigned __int8 *)(a7 + v36 + 106);
    v7[2 * ((v37 + v11) & v9) + 1] = *(unsigned __int8 *)(a7 + v36 + 107);
    uint64_t v37 = (v37 + 2 * v11) & v9;
    v36 += 2;
  }
  while (v36 < v8);
LABEL_34:
  unsigned int v38 = result + 3;
  uint64_t v39 = (1 << a6);
  do
  {
    uint64_t v40 = *v38;
    unsigned int v41 = *(unsigned __int16 *)(a7 + 2 * v40);
    *(_WORD *)(a7 + 2 * v40) = v41 + 1;
    char v42 = a6 + 1 + (__clz(v41) ^ 0xE0);
    *((unsigned char *)v38 - 1) = v42;
    *((_WORD *)v38 - 2) = (v41 << v42) - v8;
    v40 *= 4;
    *((unsigned char *)v38 - 2) = *(_DWORD *)(a5 + v40);
    *unsigned int v38 = *(_DWORD *)(a4 + v40);
    v38 += 2;
    --v39;
  }
  while (v39);
  return result;
}

uint64_t ZSTD_decompressBegin(uint64_t a1)
{
  uint64_t v1 = 5;
  if (*(_DWORD *)(a1 + 29584)) {
    uint64_t v1 = 1;
  }
  *(void *)(a1 + 29408) = v1;
  *(_OWORD *)(a1 + 29376) = 0u;
  *(_OWORD *)(a1 + 29392) = 0u;
  *(_OWORD *)(a1 + 29456) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  *(_DWORD *)(a1 + 29680) = 0;
  *(_OWORD *)(a1 + 29472) = xmmword_1889B9F70;
  *(void *)(a1 + 26684) = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 6192;
  *(void *)(a1 + 16) = a1 + 4136;
  *(void *)(a1 + 24) = a1 + 10296;
  return 0;
}

uint64_t ZSTD_decompressBegin_usingDict(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  uint64_t result = 0;
  uint64_t v5 = 5;
  if (*(_DWORD *)(a1 + 29584)) {
    uint64_t v5 = 1;
  }
  *(void *)(a1 + 29408) = v5;
  *(void *)(a1 + 26684) = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(_OWORD *)(a1 + 29376) = 0u;
  *(_OWORD *)(a1 + 29392) = 0u;
  *(_OWORD *)(a1 + 29456) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  *(_DWORD *)(a1 + 29680) = 0;
  *(_OWORD *)(a1 + 29472) = xmmword_1889B9F70;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 6192;
  *(void *)(a1 + 16) = a1 + 4136;
  *(void *)(a1 + 24) = a1 + 10296;
  if (a2 && a3)
  {
    if (a3 > 7 && *a2 == -332356553)
    {
      *(_DWORD *)(a1 + 29680) = a2[1];
      unint64_t DEntropy = ZSTD_loadDEntropy((int *)(a1 + 32), (uint64_t)a2, a3);
      if (DEntropy > 0xFFFFFFFFFFFFFF88) {
        return -30;
      }
      *(void *)(a1 + 29480) = 0x100000001;
      uint64_t v9 = *(void *)(a1 + 29376);
      *(void *)(a1 + 29400) = v9;
      *(void *)(a1 + 29392) = (char *)a2 + DEntropy + *(void *)(a1 + 29384) - v9;
      *(void *)(a1 + 29384) = (char *)a2 + DEntropy;
    }
    else
    {
      *(void *)(a1 + 29392) = a2;
      *(void *)(a1 + 29384) = a2;
    }
    uint64_t result = 0;
    *(void *)(a1 + 29376) = (char *)a2 + a3;
  }
  return result;
}

uint64_t ZSTD_decompressBegin_usingDDict(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)(a1 + 26684);
  if (a2) {
    *(_DWORD *)(a1 + 29684) = *(void *)(a1 + 29400) != *(void *)(a2 + 8) + *(void *)(a2 + 16);
  }
  uint64_t v3 = 5;
  if (*(_DWORD *)(a1 + 29584)) {
    uint64_t v3 = 1;
  }
  *(void *)(a1 + 29408) = v3;
  *(_OWORD *)(a1 + 29376) = 0u;
  *(_OWORD *)(a1 + 29392) = 0u;
  *(_OWORD *)(a1 + 29456) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  *(_DWORD *)(a1 + 29680) = 0;
  *(_OWORD *)(a1 + 29472) = xmmword_1889B9F70;
  *int v2 = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 6192;
  *(void *)(a1 + 16) = a1 + 4136;
  *(void *)(a1 + 24) = a1 + 10296;
  if (a2)
  {
    *(_DWORD *)(a1 + 29680) = *(_DWORD *)(a2 + 27316);
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 29384) = v4;
    *(void *)(a1 + 29392) = v4;
    uint64_t v6 = v4 + v5;
    *(void *)(a1 + 29400) = v6;
    *(void *)(a1 + 29376) = v6;
    if (*(_DWORD *)(a2 + 27320))
    {
      *(void *)a1 = a2 + 24;
      *(void *)(a1 + 8) = a2 + 6184;
      *(void *)(a1 + 29480) = 0x100000001;
      *(void *)(a1 + 16) = a2 + 4128;
      *(void *)(a1 + 24) = a2 + 10288;
      *(_DWORD *)int v2 = *(_DWORD *)(a2 + 26676);
      *(_DWORD *)(a1 + 26688) = *(_DWORD *)(a2 + 26680);
      *(_DWORD *)(a1 + 26692) = *(_DWORD *)(a2 + 26684);
      return 0;
    }
    *(_DWORD *)(a1 + 29484) = 0;
  }
  return 0;
}

uint64_t ZSTD_getDictID_fromFrame(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  if (ZSTD_getFrameHeader_advanced((uint64_t)&v3, a1, a2, 0) >= 0xFFFFFFFFFFFFFF89) {
    return 0;
  }
  else {
    return HIDWORD(v4);
  }
}

double ZSTD_createDStream()
{
  v0 = (char *)malloc_type_malloc(0x274D0uLL, 0x26AA08A0uLL);
  if (v0)
  {
    *((void *)v0 + 3706) = 0;
    *((void *)v0 + 3675) = 0;
    double result = 0.0;
    *(void *)(v0 + 29684) = 0;
    *((void *)v0 + 3719) = 0;
    *((void *)v0 + 3723) = 0;
    *((_DWORD *)v0 + 7448) = 0;
    *((void *)v0 + 20121) = 0;
    *((_DWORD *)v0 + 7414) = 0;
    *((void *)v0 + 3712) = 0;
    *((_OWORD *)v0 + 1854) = 0u;
    *(_OWORD *)(v0 + 29708) = 0u;
    *((_DWORD *)v0 + 7431) = 0;
    *((void *)v0 + 3701) = 0;
    *((void *)v0 + 3703) = 0;
    *((void *)v0 + 3702) = 0;
    *((void *)v0 + 3717) = 134217729;
    *(void *)(v0 + 29804) = 0;
    *((void *)v0 + 3698) = 0;
    *((_DWORD *)v0 + 7426) = 0;
  }
  return result;
}

double ZSTD_createDStream_advanced(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t))a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if ((*(void *)a1 == 0) == (v2 == 0))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v1)
    {
      long long v4 = (char *)v1(*(void *)(a1 + 16), 160976);
      if (!v4) {
        return result;
      }
    }
    else
    {
      long long v4 = (char *)malloc_type_malloc(0x274D0uLL, 0x26AA08A0uLL);
      if (!v4) {
        return result;
      }
    }
    *((void *)v4 + 3701) = v1;
    *((void *)v4 + 3702) = v2;
    *((void *)v4 + 3703) = v3;
    *((void *)v4 + 3706) = 0;
    *((void *)v4 + 3675) = 0;
    double result = 0.0;
    *(void *)(v4 + 29684) = 0;
    *((void *)v4 + 3719) = 0;
    *((void *)v4 + 3723) = 0;
    *((_DWORD *)v4 + 7448) = 0;
    *((void *)v4 + 20121) = 0;
    *((_DWORD *)v4 + 7414) = 0;
    *((void *)v4 + 3712) = 0;
    *((_OWORD *)v4 + 1854) = 0u;
    *(_OWORD *)(v4 + 29708) = 0u;
    *((_DWORD *)v4 + 7431) = 0;
    *((void *)v4 + 3717) = 134217729;
    *(void *)(v4 + 29804) = 0;
    *((void *)v4 + 3698) = 0;
    *((_DWORD *)v4 + 7426) = 0;
  }
  return result;
}

uint64_t ZSTD_initStaticDStream(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a2 >= 0x274D0 && (a1 & 7) == 0)
  {
    *(void *)(a1 + 29400) = 0;
    *(void *)(a1 + 29684) = 0;
    *(void *)(a1 + 29752) = 0;
    *(void *)(a1 + 29784) = 0;
    *(_DWORD *)(a1 + 29792) = 0;
    *(void *)(a1 + 160968) = 0;
    *(_DWORD *)(a1 + 29656) = 0;
    *(void *)(a1 + 29696) = 0;
    *(_OWORD *)(a1 + 29664) = 0u;
    *(_OWORD *)(a1 + 29708) = 0u;
    *(_DWORD *)(a1 + 29724) = 0;
    *(void *)(a1 + 29736) = 134217729;
    *(void *)(a1 + 29804) = 0;
    *(void *)(a1 + 29584) = 0;
    *(_DWORD *)(a1 + 29704) = 0;
    *(void *)(a1 + 29648) = a2;
    uint64_t v2 = a1;
    *(void *)(a1 + 29712) = a1 + 160976;
  }
  return v2;
}

uint64_t ZSTD_DStreamInSize()
{
  return 131075;
}

uint64_t ZSTD_DStreamOutSize()
{
  return 0x20000;
}

uint64_t ZSTD_DCtx_loadDictionary_advanced(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  uint64_t v5 = (_DWORD *)(a1 + 29688);
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  uint64_t v12 = (void *)(a1 + 29664);
  uint64_t v13 = *(void *)(a1 + 29664);
  if (!v13)
  {
LABEL_10:
    uint64_t result = 0;
    *uint64_t v5 = 0;
    *uint64_t v12 = 0;
    v12[1] = 0;
    if (!a2) {
      return result;
    }
    goto LABEL_11;
  }
  int v14 = *(void (**)(uint64_t, uint64_t))(v13 + 27336);
  uint64_t v15 = *(void *)(v13 + 27344);
  if (*(void *)v13)
  {
    if (v14)
    {
      ((void (*)(void))v14)(*(void *)(v13 + 27344));
LABEL_9:
      v14(v15, v13);
      goto LABEL_10;
    }
    free(*(void **)v13);
  }
  else if (v14)
  {
    goto LABEL_9;
  }
  free((void *)v13);
  uint64_t result = 0;
  *uint64_t v5 = 0;
  *uint64_t v12 = 0;
  v12[1] = 0;
  if (!a2) {
    return result;
  }
LABEL_11:
  if (a3)
  {
    uint64_t v19 = *(void *)(a1 + 29624);
    long long v18 = *(_OWORD *)(a1 + 29608);
    int v16 = ZSTD_createDDict_advanced(a2, a3, a4, a5, &v18);
    *(void *)(a1 + 29664) = v16;
    if (v16)
    {
      unint64_t v17 = v16;
      uint64_t result = 0;
      *(void *)(a1 + 29672) = v17;
      *uint64_t v5 = -1;
    }
    else
    {
      return -64;
    }
  }
  return result;
}

uint64_t ZSTD_DCtx_loadDictionary_byReference(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3 = (_DWORD *)(a1 + 29688);
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  unint64_t v8 = (void *)(a1 + 29664);
  uint64_t v9 = *(void *)(a1 + 29664);
  if (!v9)
  {
LABEL_10:
    uint64_t result = 0;
    *uint64_t v3 = 0;
    void *v8 = 0;
    v8[1] = 0;
    if (!a2) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 27336);
  uint64_t v11 = *(void *)(v9 + 27344);
  if (*(void *)v9)
  {
    if (v10)
    {
      ((void (*)(void))v10)(*(void *)(v9 + 27344));
LABEL_9:
      v10(v11, v9);
      goto LABEL_10;
    }
    free(*(void **)v9);
  }
  else if (v10)
  {
    goto LABEL_9;
  }
  free((void *)v9);
  uint64_t result = 0;
  *uint64_t v3 = 0;
  void *v8 = 0;
  v8[1] = 0;
  if (!a2) {
    return result;
  }
LABEL_11:
  if (a3)
  {
    uint64_t v15 = *(void *)(a1 + 29624);
    long long v14 = *(_OWORD *)(a1 + 29608);
    uint64_t v12 = ZSTD_createDDict_advanced(a2, a3, 1, 0, &v14);
    *(void *)(a1 + 29664) = v12;
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t result = 0;
      *(void *)(a1 + 29672) = v13;
      *uint64_t v3 = -1;
    }
    else
    {
      return -64;
    }
  }
  return result;
}

uint64_t ZSTD_DCtx_loadDictionary(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3 = (_DWORD *)(a1 + 29688);
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  unint64_t v8 = (void *)(a1 + 29664);
  uint64_t v9 = *(void *)(a1 + 29664);
  if (!v9)
  {
LABEL_10:
    uint64_t result = 0;
    *uint64_t v3 = 0;
    void *v8 = 0;
    v8[1] = 0;
    if (!a2) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 27336);
  uint64_t v11 = *(void *)(v9 + 27344);
  if (*(void *)v9)
  {
    if (v10)
    {
      ((void (*)(void))v10)(*(void *)(v9 + 27344));
LABEL_9:
      v10(v11, v9);
      goto LABEL_10;
    }
    free(*(void **)v9);
  }
  else if (v10)
  {
    goto LABEL_9;
  }
  free((void *)v9);
  uint64_t result = 0;
  *uint64_t v3 = 0;
  void *v8 = 0;
  v8[1] = 0;
  if (!a2) {
    return result;
  }
LABEL_11:
  if (a3)
  {
    uint64_t v15 = *(void *)(a1 + 29624);
    long long v14 = *(_OWORD *)(a1 + 29608);
    uint64_t v12 = ZSTD_createDDict_advanced(a2, a3, 0, 0, &v14);
    *(void *)(a1 + 29664) = v12;
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t result = 0;
      *(void *)(a1 + 29672) = v13;
      *uint64_t v3 = -1;
    }
    else
    {
      return -64;
    }
  }
  return result;
}

uint64_t ZSTD_DCtx_refPrefix_advanced(uint64_t a1, const void *a2, size_t a3, int a4)
{
  long long v4 = (_DWORD *)(a1 + 29688);
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  uint64_t v10 = (void *)(a1 + 29664);
  uint64_t v11 = *(void *)(a1 + 29664);
  if (v11)
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 27336);
    uint64_t v13 = *(void *)(v11 + 27344);
    if (*(void *)v11)
    {
      if (v12)
      {
        ((void (*)(void))v12)(*(void *)(v11 + 27344));
LABEL_8:
        v12(v13, v11);
        goto LABEL_9;
      }
      free(*(void **)v11);
    }
    else if (v12)
    {
      goto LABEL_8;
    }
    free((void *)v11);
    *long long v4 = 0;
    *uint64_t v10 = 0;
    v10[1] = 0;
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_9:
  *long long v4 = 0;
  *uint64_t v10 = 0;
  v10[1] = 0;
  if (!a2)
  {
LABEL_13:
    uint64_t result = 0;
    *long long v4 = 1;
    return result;
  }
LABEL_10:
  if (!a3) {
    goto LABEL_13;
  }
  uint64_t v16 = *(void *)(a1 + 29624);
  long long v15 = *(_OWORD *)(a1 + 29608);
  long long v14 = ZSTD_createDDict_advanced(a2, a3, 1, a4, &v15);
  *(void *)(a1 + 29664) = v14;
  if (v14)
  {
    *(void *)(a1 + 29672) = v14;
    goto LABEL_13;
  }
  return -64;
}

uint64_t ZSTD_DCtx_refPrefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a1 + 29688);
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  unint64_t v8 = (void *)(a1 + 29664);
  uint64_t v9 = *(void *)(a1 + 29664);
  if (v9)
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 27336);
    uint64_t v11 = *(void *)(v9 + 27344);
    if (*(void *)v9)
    {
      if (v10)
      {
        ((void (*)(void))v10)(*(void *)(v9 + 27344));
LABEL_8:
        v10(v11, v9);
        goto LABEL_9;
      }
      free(*(void **)v9);
    }
    else if (v10)
    {
      goto LABEL_8;
    }
    free((void *)v9);
    *uint64_t v3 = 0;
    void *v8 = 0;
    v8[1] = 0;
    if (!a2) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
LABEL_9:
  *uint64_t v3 = 0;
  void *v8 = 0;
  v8[1] = 0;
  if (!a2)
  {
LABEL_17:
    uint64_t result = 0;
    *uint64_t v3 = 1;
    return result;
  }
LABEL_10:
  if (!a3) {
    goto LABEL_17;
  }
  uint64_t v12 = *(uint64_t (**)(void, uint64_t))(a1 + 29608);
  uint64_t v13 = *(void *)(a1 + 29616);
  if ((v12 == 0) == (v13 == 0))
  {
    uint64_t v14 = *(void *)(a1 + 29624);
    if (v12)
    {
      long long v15 = (void *)v12(*(void *)(a1 + 29624), 27352);
      if (v15)
      {
LABEL_14:
        v15[3416] = v12;
        v15[3417] = v13;
        v15[3418] = v14;
        void *v15 = 0;
        v15[1] = a2;
        v15[2] = a3;
        *((_DWORD *)v15 + 2572) = 201326604;
        *(void *)((char *)v15 + 27316) = 0;
        *(void *)(a1 + 29664) = v15;
        *(void *)(a1 + 29672) = v15;
        goto LABEL_17;
      }
    }
    else
    {
      long long v15 = malloc_type_malloc(0x6AD8uLL, 0x26AA08A0uLL);
      if (v15) {
        goto LABEL_14;
      }
    }
  }
  void *v8 = 0;
  return -64;
}

uint64_t ZSTD_initDStream_usingDict(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6 = (_DWORD *)(a1 + 29584);
  *(_DWORD *)(a1 + 29708) = 0;
  *(_DWORD *)(a1 + 29804) = 0;
  uint64_t v7 = (void *)(a1 + 29664);
  uint64_t v8 = *(void *)(a1 + 29664);
  if (v8)
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 27336);
    uint64_t v10 = *(void *)(v8 + 27344);
    if (*(void *)v8)
    {
      if (v9)
      {
        ((void (*)(void))v9)(*(void *)(v8 + 27344));
LABEL_6:
        v9(v10, v8);
        goto LABEL_7;
      }
      free(*(void **)v8);
    }
    else if (v9)
    {
      goto LABEL_6;
    }
    free((void *)v8);
    v6[26] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    if (!a2) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
LABEL_7:
  v6[26] = 0;
  *uint64_t v7 = 0;
  v7[1] = 0;
  if (!a2) {
    goto LABEL_11;
  }
LABEL_8:
  if (a3)
  {
    uint64_t v14 = *(void *)(a1 + 29624);
    long long v13 = *(_OWORD *)(a1 + 29608);
    uint64_t v11 = ZSTD_createDDict_advanced(a2, a3, 0, 0, &v13);
    *(void *)(a1 + 29664) = v11;
    if (!v11) {
      return -64;
    }
    *(void *)(a1 + 29672) = v11;
    v6[26] = -1;
  }
LABEL_11:
  if (*v6) {
    return 1;
  }
  else {
    return 5;
  }
}

double ZSTD_DCtx_reset(uint64_t a1, int a2)
{
  uint64_t v3 = (_DWORD *)(a1 + 29688);
  if ((a2 & 0xFFFFFFFD) == 1)
  {
    *(_DWORD *)(a1 + 29708) = 0;
    *(_DWORD *)(a1 + 29804) = 0;
  }
  if ((a2 & 0xFFFFFFFE) == 2 && !*(_DWORD *)(a1 + 29708))
  {
    long long v4 = (void *)(a1 + 29664);
    uint64_t v5 = *(void *)(a1 + 29664);
    if (!v5)
    {
LABEL_15:
      *uint64_t v3 = 0;
      *long long v4 = 0;
      *(void *)(a1 + 29672) = 0;
      *(void *)(a1 + 29736) = 134217729;
      v3[30] = 0;
      double result = 0.0;
      *(void *)(a1 + 29584) = 0;
      v3[4] = 0;
      return result;
    }
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 27336);
    uint64_t v7 = *(void *)(v5 + 27344);
    if (*(void *)v5)
    {
      if (v6)
      {
        ((void (*)(void))v6)(*(void *)(v5 + 27344));
LABEL_12:
        v6(v7, v5);
        goto LABEL_15;
      }
      free(*(void **)v5);
    }
    else if (v6)
    {
      goto LABEL_12;
    }
    free((void *)v5);
    goto LABEL_15;
  }
  return result;
}

uint64_t ZSTD_initDStream(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 29584);
  *(_DWORD *)(a1 + 29708) = 0;
  *(_DWORD *)(a1 + 29804) = 0;
  uint64_t v2 = (void *)(a1 + 29664);
  uint64_t v3 = *(void *)(a1 + 29664);
  if (!v3) {
    goto LABEL_9;
  }
  long long v4 = *(void (**)(uint64_t, uint64_t))(v3 + 27336);
  uint64_t v5 = *(void *)(v3 + 27344);
  if (*(void *)v3)
  {
    if (v4)
    {
      ((void (*)(void))v4)(*(void *)(v3 + 27344));
LABEL_6:
      v4(v5, v3);
      goto LABEL_9;
    }
    free(*(void **)v3);
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  free((void *)v3);
LABEL_9:
  v1[26] = 0;
  *uint64_t v2 = 0;
  v2[1] = 0;
  if (*v1) {
    return 1;
  }
  else {
    return 5;
  }
}

unint64_t ZSTD_initDStream_usingDDict(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)(a1 + 29584);
  *(_DWORD *)(a1 + 29708) = 0;
  *(_DWORD *)(a1 + 29804) = 0;
  unint64_t result = ZSTD_DCtx_refDDict(a1, a2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (*v2) {
      return 1;
    }
    else {
      return 5;
    }
  }
  return result;
}

uint64_t ZSTD_DCtx_refDDict(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)(a1 + 29688);
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  uint64_t v6 = (void *)(a1 + 29664);
  uint64_t v7 = *(void *)(a1 + 29664);
  if (v7)
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 27336);
    uint64_t v9 = *(void *)(v7 + 27344);
    if (*(void *)v7)
    {
      if (v8)
      {
        ((void (*)(void))v8)(*(void *)(v7 + 27344));
LABEL_8:
        v8(v9, v7);
        goto LABEL_9;
      }
      free(*(void **)v7);
    }
    else if (v8)
    {
      goto LABEL_8;
    }
    free((void *)v7);
    *uint64_t v2 = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    if (!a2) {
      return 0;
    }
    goto LABEL_10;
  }
LABEL_9:
  *uint64_t v2 = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  if (!a2) {
    return 0;
  }
LABEL_10:
  *(void *)(a1 + 29672) = a2;
  *uint64_t v2 = -1;
  if (v2[4] != 1) {
    return 0;
  }
  uint64_t v10 = *(void **)(a1 + 29696);
  if (!v10)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 29608);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 29624);
      uint64_t v13 = v11(v12, 24);
      uint64_t v14 = (_OWORD *)v11(v12, 512);
      *uint64_t v14 = 0u;
      v14[1] = 0u;
      v14[2] = 0u;
      v14[3] = 0u;
      v14[4] = 0u;
      v14[5] = 0u;
      v14[6] = 0u;
      v14[7] = 0u;
      v14[8] = 0u;
      v14[9] = 0u;
      v14[10] = 0u;
      v14[11] = 0u;
      v14[12] = 0u;
      v14[13] = 0u;
      v14[14] = 0u;
      v14[15] = 0u;
      v14[16] = 0u;
      v14[17] = 0u;
      v14[18] = 0u;
      v14[19] = 0u;
      v14[20] = 0u;
      v14[21] = 0u;
      v14[22] = 0u;
      v14[23] = 0u;
      v14[24] = 0u;
      v14[25] = 0u;
      v14[26] = 0u;
      v14[27] = 0u;
      v14[28] = 0u;
      v14[29] = 0u;
      v14[30] = 0u;
      v14[31] = 0u;
      *(void *)uint64_t v13 = v14;
      *(_OWORD *)(v13 + 8) = xmmword_1889B9FA0;
      if (v14) {
        uint64_t v10 = (void *)v13;
      }
      else {
        uint64_t v10 = 0;
      }
      *(void *)(a1 + 29696) = v10;
    }
    else
    {
      uint64_t v10 = malloc_type_malloc(0x18uLL, 0x26AA08A0uLL);
      long long v15 = malloc_type_calloc(1uLL, 0x200uLL, 0xEC864E14uLL);
      *uint64_t v10 = v15;
      *(_OWORD *)(v10 + 1) = xmmword_1889B9FA0;
      if (v15) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = 0;
      }
      *(void *)(a1 + 29696) = v16;
      if (!v15) {
        return -64;
      }
    }
  }
  unint64_t v17 = v10[1];
  if (v17 > 4 * v10[2]) {
    goto LABEL_25;
  }
  unint64_t v23 = *(uint64_t (**)(uint64_t, unint64_t))(a1 + 29608);
  uint64_t v24 = *(void (**)(uint64_t, void *))(a1 + 29616);
  uint64_t v25 = *(void *)(a1 + 29624);
  if (!v23)
  {
    unint64_t v26 = malloc_type_calloc(1uLL, 16 * v17, 0xEC864E14uLL);
    if (v26) {
      goto LABEL_33;
    }
    return -64;
  }
  unint64_t v26 = (void *)v23(v25, 16 * v17);
  bzero(v26, 16 * v17);
  if (!v26) {
    return -64;
  }
LABEL_33:
  uint64_t v46 = v25;
  uint64_t v47 = v24;
  uint64_t v27 = (void *)*v10;
  uint64_t v28 = v10[1];
  *uint64_t v10 = v26;
  v10[1] = 2 * v17;
  uint64_t v48 = 2 * v17;
  uint64_t v10[2] = 0;
  if (!v28) {
    goto LABEL_59;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = v48 - 1;
  while (2)
  {
    uint64_t v32 = v27[v30];
    if (!v32) {
      goto LABEL_36;
    }
    if (*(void *)(v32 + 16) >= 8uLL && (unsigned int v33 = *(_DWORD **)(v32 + 8), *v33 == -332356553)) {
      unsigned int v34 = v33[1];
    }
    else {
      unsigned int v34 = 0;
    }
    unsigned int v49 = v34;
    unint64_t v35 = ZSTD_XXH64(&v49, 4uLL);
    if (v29 == v48) {
      return -1;
    }
    uint64_t v36 = v35 & v31;
    uint64_t v37 = *v10;
    uint64_t v38 = *(void *)(*v10 + 8 * (v35 & v31));
    if (!v38)
    {
LABEL_35:
      *(void *)(v37 + 8 * v36) = v32;
      uint64_t v10[2] = ++v29;
      goto LABEL_36;
    }
    while (1)
    {
      if (*(void *)(v38 + 16) >= 8uLL)
      {
        uint64_t v39 = *(_DWORD **)(v38 + 8);
        if (*v39 == -332356553) {
          break;
        }
      }
      if (!v34) {
        goto LABEL_50;
      }
LABEL_46:
      uint64_t v36 = (v36 & v31) + 1;
      uint64_t v38 = *(void *)(v37 + 8 * v36);
      if (!v38) {
        goto LABEL_35;
      }
    }
    if (v39[1] != v34) {
      goto LABEL_46;
    }
LABEL_50:
    *(void *)(v37 + 8 * v36) = v32;
LABEL_36:
    if (++v30 != v28) {
      continue;
    }
    break;
  }
LABEL_59:
  if (v27)
  {
    if (v47) {
      v47(v46, v27);
    }
    else {
      free(v27);
    }
  }
LABEL_25:
  if (*(void *)(a2 + 16) >= 8uLL && (long long v18 = *(_DWORD **)(a2 + 8), *v18 == -332356553)) {
    unsigned int v19 = v18[1];
  }
  else {
    unsigned int v19 = 0;
  }
  unsigned int v50 = v19;
  unint64_t v20 = ZSTD_XXH64(&v50, 4uLL);
  uint64_t v22 = v10[1];
  uint64_t v21 = v10[2];
  if (v21 == v22) {
    return -1;
  }
  uint64_t v40 = v22 - 1;
  uint64_t v41 = (v22 - 1) & v20;
  uint64_t v42 = *v10;
  uint64_t v43 = *(void *)(*v10 + 8 * v41);
  if (v43)
  {
    while (1)
    {
      if (*(void *)(v43 + 16) >= 8uLL && (unsigned int v44 = *(_DWORD **)(v43 + 8), *v44 == -332356553)) {
        int v45 = v44[1];
      }
      else {
        int v45 = 0;
      }
      if (v45 == v19) {
        break;
      }
      uint64_t v41 = (v41 & v40) + 1;
      uint64_t v43 = *(void *)(v42 + 8 * v41);
      if (!v43) {
        goto LABEL_58;
      }
    }
    uint64_t result = 0;
    *(void *)(v42 + 8 * v41) = a2;
  }
  else
  {
LABEL_58:
    uint64_t result = 0;
    *(void *)(v42 + 8 * v41) = a2;
    uint64_t v10[2] = v21 + 1;
  }
  return result;
}

uint64_t ZSTD_resetDStream(_DWORD *a1)
{
  a1[7427] = 0;
  a1[7451] = 0;
  if (a1[7396]) {
    return 1;
  }
  else {
    return 5;
  }
}

uint64_t ZSTD_DCtx_setMaxWindowSize(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  if ((unint64_t)(a2 - 2147483649) < 0xFFFFFFFF800003FFLL) {
    return -42;
  }
  uint64_t result = 0;
  *(void *)(a1 + 29736) = a2;
  return result;
}

uint64_t ZSTD_dParam_getBounds(int a1)
{
  switch(a1)
  {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
      uint64_t result = 0;
      break;
    default:
      if (a1 == 100) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = -40;
      }
      break;
  }
  return result;
}

uint64_t ZSTD_DCtx_setFormat(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (unsigned int *)(a1 + 29584);
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  if (a2 > 1) {
    return -42;
  }
  uint64_t result = 0;
  *uint64_t v2 = a2;
  return result;
}

uint64_t ZSTD_DCtx_setParameter(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = (unsigned int *)(a1 + 29584);
  if (*(_DWORD *)(a1 + 29708)) {
    return -60;
  }
  switch(a2)
  {
    case 1000:
      if (a3 <= 1)
      {
        uint64_t result = 0;
        *uint64_t v3 = a3;
      }
      else
      {
        uint64_t result = -42;
      }
      break;
    case 1001:
      if (a3 <= 1)
      {
        uint64_t result = 0;
        v3[56] = a3;
      }
      else
      {
        uint64_t result = -42;
      }
      break;
    case 1002:
      if (a3 <= 1)
      {
        uint64_t result = 0;
        v3[1] = a3;
      }
      else
      {
        uint64_t result = -42;
      }
      break;
    case 1003:
      if (a3 <= 1)
      {
        if (*(void *)(a1 + 29648)) {
          goto LABEL_23;
        }
        uint64_t result = 0;
        v3[30] = a3;
      }
      else
      {
        uint64_t result = -42;
      }
      break;
    default:
      if (a2 == 100)
      {
        if (a3) {
          int v6 = a3;
        }
        else {
          int v6 = 27;
        }
        if ((v6 - 32) >= 0xFFFFFFEA)
        {
          uint64_t result = 0;
          *(void *)(a1 + 29736) = 1 << v6;
        }
        else
        {
          uint64_t result = -42;
        }
      }
      else
      {
LABEL_23:
        uint64_t result = -40;
      }
      break;
  }
  return result;
}

uint64_t ZSTD_DCtx_getParameter(_DWORD *a1, int a2, unsigned int *a3)
{
  uint64_t v3 = a1 + 7396;
  switch(a2)
  {
    case 1000:
      uint64_t result = 0;
      *a3 = *v3;
      break;
    case 1001:
      unsigned int v6 = a1[7452];
      uint64_t result = 0;
      *a3 = v6;
      break;
    case 1002:
      unsigned int v7 = a1[7397];
      uint64_t result = 0;
      *a3 = v7;
      break;
    case 1003:
      unsigned int v8 = a1[7426];
      uint64_t result = 0;
      *a3 = v8;
      break;
    default:
      if (a2 == 100)
      {
        unsigned int v5 = __clz(a1[7434]) ^ 0x1F;
        uint64_t result = 0;
        *a3 = v5;
      }
      else
      {
        uint64_t result = -40;
      }
      break;
  }
  return result;
}

void *ZSTD_sizeof_DStream(void *result)
{
  if (result)
  {
    uint64_t v1 = (void *)result[3708];
    if (v1)
    {
      uint64_t v2 = 188328;
      if (*v1) {
        uint64_t v2 = v1[2] + 188328;
      }
    }
    else
    {
      uint64_t v2 = 160976;
    }
    return (void *)(result[3715] + v2 + result[3719]);
  }
  return result;
}

unint64_t ZSTD_decodingBufferSize_min(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0x20000;
  if (a1 < 0x20000) {
    uint64_t v2 = a1;
  }
  unint64_t v3 = a1 + v2 + 64;
  if (v3 >= a2) {
    return a2;
  }
  else {
    return v3;
  }
}

uint64_t ZSTD_estimateDStreamSize(unint64_t a1)
{
  uint64_t v1 = 0x20000;
  if (a1 < 0x20000) {
    uint64_t v1 = a1;
  }
  return a1 + 2 * v1 + 161040;
}

unint64_t ZSTD_estimateDStreamSize_fromFrame(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  unint64_t result = ZSTD_getFrameHeader_advanced((uint64_t)v5, a1, a2, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (result)
    {
      return -72;
    }
    else
    {
      uint64_t v3 = 0x20000;
      if (*((void *)&v5[0] + 1) < 0x20000uLL) {
        uint64_t v3 = *((void *)&v5[0] + 1);
      }
      uint64_t v4 = *((void *)&v5[0] + 1) + 2 * v3 + 161040;
      if (*((void *)&v5[0] + 1) <= 0x80000000uLL) {
        return v4;
      }
      else {
        return -16;
      }
    }
  }
  return result;
}

uint64_t ZSTD_decompressStream(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v4 = a3[1];
  unint64_t v3 = a3[2];
  if (v3 > v4) {
    return -72;
  }
  unint64_t v7 = a2[1];
  unint64_t v6 = a2[2];
  if (v6 > v7) {
    return -70;
  }
  uint64_t v10 = a1 + 26684;
  uint64_t v11 = *a3;
  uint64_t v12 = *a2;
  if (*(_DWORD *)(a1 + 29808) == 1)
  {
    if (*(_DWORD *)(a1 + 29708))
    {
      unint64_t FrameHeader_advanced = -104;
      if (*(void *)(a1 + 29816) != v12 || *(void *)(a1 + 29832) != v6 || *(void *)(a1 + 29824) != v7) {
        return FrameHeader_advanced;
      }
    }
  }
  unint64_t v119 = (unsigned __int8 *)(a1 + 160944);
  uint64_t v113 = a3[1];
  uint64_t v114 = a3[2];
  uint64_t v111 = a2[1];
  uint64_t v112 = a2[2];
  uint64_t v13 = (char *)(v12 + v6);
  uint64_t v14 = v12 + v7;
  uint64_t v116 = a1 + 29816;
  long long v15 = (uint64_t *)(a1 + 29760);
  int v118 = (unint64_t *)(a1 + 29416);
  uint64_t v120 = (char *)(v11 + v4);
  unint64_t v102 = v4 - v3;
  unint64_t v103 = (uint64_t *)(a1 + 29664);
  int v110 = (void *)(a1 + 29456);
  uint64_t v108 = (_OWORD *)(a1 + 29376);
  uint64_t v106 = a1 + 10296;
  uint64_t v107 = a1 + 32;
  uint64_t v105 = a1 + 6192;
  uint64_t v104 = a1 + 4136;
  int v101 = (_OWORD *)(a1 + 29528);
  unsigned int v115 = (unsigned __int8 *)(v11 + v3);
  uint64_t v121 = (char *)(v11 + v3);
  uint64_t v109 = (char *)(v12 + v6);
  while (2)
  {
    while (1)
    {
      int v16 = *(_DWORD *)(v10 + 3024);
      if (v16 != 4) {
        break;
      }
      uint64_t v17 = *(void *)(a1 + 29768);
      uint64_t v18 = *(void *)(a1 + 29760);
      unint64_t v19 = v17 - v18;
      unint64_t v20 = v14 - (void)v13;
      if (v14 - (uint64_t)v13 >= (unint64_t)(v17 - v18)) {
        size_t v21 = v17 - v18;
      }
      else {
        size_t v21 = v14 - (void)v13;
      }
      if (v21)
      {
        memcpy(v13, (const void *)(*(void *)(a1 + 29744) + v18), v21);
        uint64_t v18 = *(void *)(a1 + 29760);
      }
      v13 += v21;
      uint64_t v22 = v18 + v21;
      uint64_t *v15 = v22;
      if (v19 > v20) {
        goto LABEL_173;
      }
      *(_DWORD *)(v10 + 3024) = 2;
      size_t v23 = *(void *)(a1 + 29752);
      if (v23 < *(void *)(a1 + 29416) && v22 + (unint64_t)*(unsigned int *)(v10 + 2748) > v23)
      {
        uint64_t *v15 = 0;
        *(void *)(a1 + 29768) = 0;
      }
    }
    uint64_t v24 = v121;
    switch(v16)
    {
      case 0:
        *(_DWORD *)(v10 + 3024) = 1;
        *(void *)(a1 + 29728) = 0;
        *(void *)(v10 + 3112) = 0;
        *(void *)(a1 + 29768) = 0;
        *(void *)(a1 + 29776) = 0;
        uint64_t *v15 = 0;
        long long v25 = *(_OWORD *)a2;
        *(void *)(v116 + 16) = a2[2];
        *(_OWORD *)uint64_t v116 = v25;
        unint64_t FrameHeader_advanced = ZSTD_getFrameHeader_advanced((uint64_t)v118, v119, 0, *(_DWORD *)(v10 + 2900));
        if (*(_DWORD *)(v10 + 3020)) {
          goto LABEL_25;
        }
        goto LABEL_27;
      case 1:
        unint64_t FrameHeader_advanced = ZSTD_getFrameHeader_advanced((uint64_t)v118, v119, *(void *)(a1 + 29776), *(_DWORD *)(v10 + 2900));
        if (*(_DWORD *)(v10 + 3020))
        {
LABEL_25:
          if (*(void *)(a1 + 29696)) {
            ZSTD_DCtx_selectFrameDDict(a1);
          }
        }
LABEL_27:
        if (FrameHeader_advanced > 0xFFFFFFFFFFFFFF88) {
          return FrameHeader_advanced;
        }
        if (FrameHeader_advanced)
        {
          size_t v26 = *(void *)(a1 + 29776);
          unint64_t v27 = FrameHeader_advanced - v26;
          size_t v28 = v120 - v121;
          if (FrameHeader_advanced - v26 > v120 - v121)
          {
            if (v120 != v121)
            {
              memcpy(&v119[v26], v121, v28);
              size_t v26 = *(void *)(a1 + 29776) + v28;
              *(void *)(a1 + 29776) = v26;
            }
            a3[2] = a3[1];
            unint64_t v89 = 2;
            if (!*(_DWORD *)(v10 + 2900)) {
              unint64_t v89 = 6;
            }
            if (v89 <= FrameHeader_advanced) {
              unint64_t v89 = FrameHeader_advanced;
            }
            return v89 - v26 + 3;
          }
          memcpy(&v119[v26], v121, FrameHeader_advanced - v26);
          *(void *)(a1 + 29776) = FrameHeader_advanced;
          v121 += v27;
          continue;
        }
        unsigned int v33 = v119;
        if (*v118 == -1
          || *(_DWORD *)(v10 + 2752) == 1
          || v14 - (uint64_t)v13 < *v118
          || (FrameSizeInfo = ZSTD_findFrameSizeInfo((uint64_t)v115, v102), unsigned int v33 = v119, FrameSizeInfo > v102))
        {
          if (*(_DWORD *)(v10 + 3124) == 1
            && *(_DWORD *)(v10 + 2752) != 1
            && *v118 != -1
            && v14 - (uint64_t)v13 < *v118)
          {
            return -70;
          }
          int v35 = *(_DWORD *)(v10 + 3004);
          if (v35 == -1) {
            goto LABEL_46;
          }
          if (v35 != 1)
          {
            uint64_t v38 = *v103;
            if (*v103)
            {
              uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v38 + 27336);
              uint64_t v40 = *(void *)(v38 + 27344);
              if (*(void *)v38)
              {
                if (v39)
                {
                  ((void (*)(void))v39)(*(void *)(v38 + 27344));
                  goto LABEL_54;
                }
                free(*(void **)v38);
LABEL_56:
                free((void *)v38);
              }
              else
              {
                if (!v39) {
                  goto LABEL_56;
                }
LABEL_54:
                v39(v40, v38);
              }
              unsigned int v33 = v119;
            }
            uint64_t v36 = 0;
            *(_DWORD *)(v10 + 3004) = 0;
            char v37 = 1;
            *unint64_t v103 = 0;
            v103[1] = 0;
            goto LABEL_59;
          }
          *(_DWORD *)(v10 + 3004) = 0;
LABEL_46:
          uint64_t v36 = *(void *)(a1 + 29672);
          if (v36)
          {
            char v37 = 0;
            *(_DWORD *)(v10 + 3000) = *(void *)(a1 + 29400) != *(void *)(v36 + 8) + *(void *)(v36 + 16);
          }
          else
          {
            char v37 = 1;
          }
LABEL_59:
          int v41 = *(_DWORD *)(v10 + 2900);
          uint64_t v42 = 5;
          if (v41) {
            uint64_t v42 = 1;
          }
          *(void *)(a1 + 29408) = v42;
          *uint64_t v108 = 0u;
          v108[1] = 0u;
          *int v110 = 0;
          v110[1] = 0;
          *(_DWORD *)(a1 + 10296) = 201326604;
          *(_DWORD *)(v10 + 2996) = 0;
          *(_OWORD *)(a1 + 29472) = xmmword_1889B9F70;
          *(void *)uint64_t v10 = 0x400000001;
          *(_DWORD *)(v10 + 8) = 8;
          *(void *)a1 = v107;
          *(void *)(a1 + 8) = v105;
          *(void *)(a1 + 16) = v104;
          *(void *)(a1 + 24) = v106;
          if ((v37 & 1) == 0)
          {
            *(_DWORD *)(v10 + 2996) = *(_DWORD *)(v36 + 27316);
            uint64_t v43 = *(void *)(v36 + 8);
            uint64_t v44 = *(void *)(v36 + 16);
            *(void *)(a1 + 29384) = v43;
            *(void *)(a1 + 29392) = v43;
            uint64_t v45 = v43 + v44;
            *(void *)(a1 + 29400) = v45;
            *(void *)(a1 + 29376) = v45;
            if (*(_DWORD *)(v36 + 27320))
            {
              *(void *)(a1 + 29480) = 0x100000001;
              *(void *)a1 = v36 + 24;
              *(void *)(a1 + 8) = v36 + 6184;
              *(void *)(a1 + 16) = v36 + 4128;
              *(void *)(a1 + 24) = v36 + 10288;
              *(_DWORD *)uint64_t v10 = *(_DWORD *)(v36 + 26676);
              *(_DWORD *)(v10 + 4) = *(_DWORD *)(v36 + 26680);
              *(_DWORD *)(v10 + 8) = *(_DWORD *)(v36 + 26684);
            }
          }
          if (*(_DWORD *)v33 >> 4 == 25481893)
          {
            uint64_t v46 = *((unsigned int *)v33 + 1);
            int v47 = 7;
          }
          else
          {
            unint64_t v48 = *(void *)(a1 + 29776);
            unint64_t v49 = ZSTD_getFrameHeader_advanced((uint64_t)v118, v33, v48, v41);
            unint64_t FrameHeader_advanced = v49;
            if (v49 > 0xFFFFFFFFFFFFFF88) {
              return FrameHeader_advanced;
            }
            if (v49) {
              return -72;
            }
            if (*(_DWORD *)(v10 + 3020) == 1 && *(void *)(a1 + 29696)) {
              ZSTD_DCtx_selectFrameDDict(a1);
            }
            int v50 = *(_DWORD *)(v10 + 2760);
            if (v50 && *(_DWORD *)(v10 + 2996) != v50) {
              return -32;
            }
            if (*(_DWORD *)(v10 + 2764))
            {
              int v51 = *(_DWORD *)(v10 + 2904);
              *(_DWORD *)(v10 + 2908) = v51 == 0;
              unsigned int v33 = v119;
              if (!v51)
              {
                *(_OWORD *)(a1 + 29488) = xmmword_1889B9F80;
                *(_OWORD *)(a1 + 29504) = xmmword_1889B9F90;
                *(void *)(a1 + 29520) = 0x61C8864E7A143579;
                *int v101 = 0u;
                v101[1] = 0u;
                v101[2] = 0u;
              }
            }
            else
            {
              *(_DWORD *)(v10 + 2908) = 0;
              unsigned int v33 = v119;
            }
            *v110 += v48;
            int v47 = 2;
            uint64_t v46 = 3;
          }
          *(void *)(a1 + 29408) = v46;
          *(_DWORD *)(v10 + 2792) = v47;
          unint64_t v52 = *(void *)(a1 + 29424);
          if (v52 <= 0x400) {
            unint64_t v52 = 1024;
          }
          *(void *)(a1 + 29424) = v52;
          if (v52 > *(void *)(a1 + 29736)) {
            return -16;
          }
          unsigned int v53 = *(_DWORD *)(v10 + 2748);
          if (v53 <= 4) {
            unint64_t v54 = 4;
          }
          else {
            unint64_t v54 = v53;
          }
          if (*(_DWORD *)(v10 + 3124))
          {
            unint64_t v55 = 0;
          }
          else
          {
            uint64_t v56 = 0x20000;
            if (v52 < 0x20000) {
              uint64_t v56 = v52;
            }
            unint64_t v57 = v52 + v56 + 64;
            if (v57 >= *v118) {
              unint64_t v55 = *v118;
            }
            else {
              unint64_t v55 = v57;
            }
          }
          unint64_t v58 = *(void *)(a1 + 29720);
          unint64_t v59 = *(void *)(a1 + 29752);
          if (v59 + v58 >= 3 * (v55 + v54))
          {
            unint64_t v60 = *((void *)v33 + 3) + 1;
            *((void *)v33 + 3) = v60;
            if (v58 < v54) {
              goto LABEL_97;
            }
          }
          else
          {
            unint64_t v60 = 0;
            *((void *)v33 + 3) = 0;
            if (v58 < v54) {
              goto LABEL_97;
            }
          }
          if (v59 < v55 || v60 >= 0x80)
          {
LABEL_97:
            uint64_t v61 = *(void *)(a1 + 29648);
            if (v61)
            {
              if (v55 + v54 > v61 - 160976) {
                return -64;
              }
              uint64_t v62 = *(char **)(a1 + 29712);
            }
            else
            {
              if (*(void *)(a1 + 29712))
              {
                uint64_t v63 = *(void (**)(void))(a1 + 29616);
                if (v63) {
                  v63(*(void *)(a1 + 29624));
                }
                else {
                  free(*(void **)(a1 + 29712));
                }
              }
              *(void *)(a1 + 29720) = 0;
              *(void *)(a1 + 29752) = 0;
              uint64_t v64 = *(uint64_t (**)(void, unint64_t))(a1 + 29608);
              if (v64) {
                uint64_t v62 = (char *)v64(*(void *)(a1 + 29624), v55 + v54);
              }
              else {
                uint64_t v62 = (char *)malloc_type_malloc(v55 + v54, 0x26AA08A0uLL);
              }
              *(void *)(a1 + 29712) = v62;
              if (!v62) {
                return -64;
              }
            }
            *(void *)(a1 + 29720) = v54;
            *(void *)(a1 + 29744) = &v62[v54];
            *(void *)(a1 + 29752) = v55;
          }
          *(_DWORD *)(v10 + 3024) = 2;
          uint64_t v24 = v121;
LABEL_110:
          unint64_t v65 = v120 - v24;
          int v66 = *(_DWORD *)(v10 + 2792);
          if ((v66 - 3) >= 2 || *(_DWORD *)(v10 + 2788))
          {
            size_t v29 = *(void *)(a1 + 29408);
            size_t v67 = v29;
            if (!v29) {
              goto LABEL_162;
            }
          }
          else
          {
            if (v65 <= 1) {
              unint64_t v78 = 1;
            }
            else {
              unint64_t v78 = v120 - v24;
            }
            size_t v29 = *(void *)(a1 + 29408);
            if (v78 >= v29) {
              size_t v67 = *(void *)(a1 + 29408);
            }
            else {
              size_t v67 = v78;
            }
            if (!v67)
            {
LABEL_162:
              uint64_t v84 = v113;
              uint64_t v83 = v114;
              uint64_t v86 = v111;
              uint64_t v85 = v112;
              unsigned __int8 v87 = a2;
              unint64_t v88 = v115;
              goto LABEL_163;
            }
          }
          if (v65 >= v67)
          {
            if (*(_DWORD *)(v10 + 3124))
            {
              if (v66 == 7) {
                unint64_t v72 = 0;
              }
              else {
                unint64_t v72 = v14 - (void)v13;
              }
              size_t v73 = ZSTD_decompressContinue(a1, v13, v72, v24, v67);
              unint64_t FrameHeader_advanced = v73;
              if (v73 > 0xFFFFFFFFFFFFFF88) {
                return FrameHeader_advanced;
              }
              v13 += v73;
LABEL_158:
              int v82 = 2;
              goto LABEL_159;
            }
            if (v66 == 7)
            {
              unint64_t v79 = 0;
              uint64_t v80 = *v15;
            }
            else
            {
              uint64_t v80 = *(void *)(a1 + 29760);
              unint64_t v79 = *(void *)(a1 + 29752) - v80;
            }
            size_t v81 = ZSTD_decompressContinue(a1, (char *)(*(void *)(a1 + 29744) + v80), v79, v24, v67);
            unint64_t FrameHeader_advanced = v81;
            if (v81 > 0xFFFFFFFFFFFFFF88) {
              return FrameHeader_advanced;
            }
            if (v66 != 7 && !v81) {
              goto LABEL_158;
            }
            *(void *)(a1 + 29768) = *(void *)(a1 + 29760) + v81;
            int v82 = 4;
LABEL_159:
            *(_DWORD *)(v10 + 3024) = v82;
            v121 += v67;
          }
          else
          {
            if (v24 == v120)
            {
              uint64_t v121 = v120;
LABEL_173:
              uint64_t v84 = v113;
              uint64_t v83 = v114;
              uint64_t v86 = v111;
              uint64_t v85 = v112;
              unsigned __int8 v87 = a2;
              unint64_t v88 = v115;
              goto LABEL_174;
            }
            *(_DWORD *)(v10 + 3024) = 3;
            uint64_t v30 = *(void *)(a1 + 29728);
            size_t v31 = v29 - v30;
            if (v66 == 7)
            {
LABEL_32:
              if (v31 >= v120 - v24) {
                size_t v32 = v120 - v24;
              }
              else {
                size_t v32 = v31;
              }
            }
            else
            {
LABEL_116:
              if (v31 > *(void *)(a1 + 29720) - v30) {
                return -20;
              }
              if (v31 >= v120 - v24) {
                size_t v32 = v120 - v24;
              }
              else {
                size_t v32 = v31;
              }
              if (v32)
              {
                memcpy((void *)(*(void *)(a1 + 29712) + v30), v24, v32);
                uint64_t v24 = v121;
                uint64_t v30 = *(void *)(a1 + 29728);
              }
            }
            *(void *)(a1 + 29728) = v30 + v32;
            uint64_t v121 = &v24[v32];
            if (v32 < v31) {
              goto LABEL_173;
            }
            *(void *)(a1 + 29728) = 0;
            uint64_t v68 = *(char **)(a1 + 29712);
            int v69 = *(_DWORD *)(v10 + 2792);
            if (*(_DWORD *)(v10 + 3124))
            {
              if (v69 == 7) {
                unint64_t v70 = 0;
              }
              else {
                unint64_t v70 = v14 - (void)v13;
              }
              size_t v71 = ZSTD_decompressContinue(a1, v13, v70, v68, v29);
              unint64_t FrameHeader_advanced = v71;
              if (v71 > 0xFFFFFFFFFFFFFF88) {
                return FrameHeader_advanced;
              }
              v13 += v71;
LABEL_141:
              int v77 = 2;
              goto LABEL_142;
            }
            if (v69 == 7)
            {
              unint64_t v74 = 0;
              uint64_t v75 = *v15;
            }
            else
            {
              uint64_t v75 = *(void *)(a1 + 29760);
              unint64_t v74 = *(void *)(a1 + 29752) - v75;
            }
            size_t v76 = ZSTD_decompressContinue(a1, (char *)(*(void *)(a1 + 29744) + v75), v74, v68, v29);
            unint64_t FrameHeader_advanced = v76;
            if (v76 > 0xFFFFFFFFFFFFFF88) {
              return FrameHeader_advanced;
            }
            if (v69 != 7 && !v76) {
              goto LABEL_141;
            }
            *(void *)(a1 + 29768) = *(void *)(a1 + 29760) + v76;
            int v77 = 4;
LABEL_142:
            *(_DWORD *)(v10 + 3024) = v77;
          }
          continue;
        }
        unint64_t v98 = FrameSizeInfo;
        uint64_t DDict = ZSTD_getDDict(a1);
        unint64_t v88 = v115;
        unint64_t v100 = ZSTD_decompressMultiFrame(a1, v13, v14 - (void)v13, v115, v98, 0, 0, DDict);
        unint64_t FrameHeader_advanced = v100;
        uint64_t v84 = v113;
        uint64_t v83 = v114;
        uint64_t v86 = v111;
        uint64_t v85 = v112;
        unsigned __int8 v87 = a2;
        if (v100 > 0xFFFFFFFFFFFFFF88) {
          return FrameHeader_advanced;
        }
        uint64_t v121 = (char *)&v115[v98];
        v13 += v100;
        *(void *)(a1 + 29408) = 0;
LABEL_163:
        *(_DWORD *)(v10 + 3024) = 0;
LABEL_174:
        a3[2] = (uint64_t)&v121[-*a3];
        uint64_t v90 = &v13[-*v87];
        v87[2] = v90;
        long long v91 = *(_OWORD *)v87;
        *(void *)(v116 + 16) = v90;
        *(_OWORD *)uint64_t v116 = v91;
        if (v121 != (char *)v88 || v13 != v109)
        {
          *(_DWORD *)(v10 + 3120) = 0;
LABEL_181:
          uint64_t v93 = *(void *)(a1 + 29408);
          if (v93)
          {
            uint64_t v94 = 3;
            if (*(_DWORD *)(v10 + 2792) != 3) {
              uint64_t v94 = 0;
            }
            return v93 - *(void *)(a1 + 29728) + v94;
          }
          else
          {
            int v96 = *(_DWORD *)(v10 + 3116);
            if (*(void *)(a1 + 29768) == *(void *)(a1 + 29760))
            {
              if (v96)
              {
                unint64_t v97 = a3[2];
                if (v97 >= a3[1])
                {
                  *(_DWORD *)(v10 + 3024) = 2;
                  return 1;
                }
                else
                {
                  unint64_t FrameHeader_advanced = 0;
                  a3[2] = v97 + 1;
                }
              }
              else
              {
                return 0;
              }
            }
            else
            {
              unint64_t FrameHeader_advanced = 1;
              if (!v96)
              {
                --a3[2];
                *(_DWORD *)(v10 + 3116) = 1;
              }
            }
          }
          return FrameHeader_advanced;
        }
        int v92 = *(_DWORD *)(v10 + 3120);
        *(_DWORD *)(v10 + 3120) = v92 + 1;
        if (v92 < 15) {
          goto LABEL_181;
        }
        if (v85 == v86) {
          return -70;
        }
        if (v83 != v84) {
          goto LABEL_181;
        }
        return -72;
      case 2:
        goto LABEL_110;
      case 3:
        size_t v29 = *(void *)(a1 + 29408);
        uint64_t v30 = *(void *)(a1 + 29728);
        size_t v31 = v29 - v30;
        if (*(_DWORD *)(v10 + 2792) == 7) {
          goto LABEL_32;
        }
        goto LABEL_116;
      default:
        return -1;
    }
  }
}

void ZSTD_DCtx_selectFrameDDict(uint64_t a1)
{
  if (*(void *)(a1 + 29672))
  {
    uint64_t v2 = (_DWORD *)(a1 + 29444);
    unint64_t v3 = *(void **)(a1 + 29696);
    unsigned int v4 = *(_DWORD *)(a1 + 29444);
    unsigned int v15 = v4;
    unint64_t v5 = ZSTD_XXH64(&v15, 4uLL);
    uint64_t v6 = v3[1] - 1;
    uint64_t v7 = v6 & v5;
    do
    {
      uint64_t v8 = *(void *)(*v3 + 8 * v7);
      if (!v8) {
        return;
      }
      if (*(void *)(v8 + 16) < 8uLL) {
        break;
      }
      uint64_t v9 = *(_DWORD **)(v8 + 8);
      if (*v9 != -332356553) {
        break;
      }
      int v10 = v9[1];
      uint64_t v7 = (v7 & v6) + 1;
    }
    while (v10 != v4 && v10 != 0);
    uint64_t v12 = *(void *)(a1 + 29664);
    if (!v12)
    {
LABEL_19:
      *(void *)(a1 + 29664) = 0;
      v2[59] = *v2;
      *(void *)(a1 + 29672) = v8;
      v2[61] = -1;
      return;
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 27336);
    uint64_t v14 = *(void *)(v12 + 27344);
    if (*(void *)v12)
    {
      if (v13)
      {
        ((void (*)(void))v13)(*(void *)(v12 + 27344));
LABEL_16:
        v13(v14, v12);
        goto LABEL_19;
      }
      free(*(void **)v12);
    }
    else if (v13)
    {
      goto LABEL_16;
    }
    free((void *)v12);
    goto LABEL_19;
  }
}

uint64_t ZSTD_decompressStream_simpleArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v13 = *a4;
  v10[0] = a5;
  v10[1] = a6;
  uint64_t v11 = *a7;
  uint64_t result = ZSTD_decompressStream(a1, v12, v10);
  *a4 = v13;
  *a7 = v11;
  return result;
}

uint64_t ZSTD_decodeLiteralsBlock(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a3 < 3) {
    return -20;
  }
  unint64_t v5 = (_DWORD *)(a1 + 29480);
  unint64_t v6 = *a2;
  int v7 = v6 & 3;
  switch(v6 & 3)
  {
    case 1uLL:
      unsigned int v14 = (v6 >> 2) & 3;
      if (v14 == 1)
      {
        unint64_t v16 = (unint64_t)*(unsigned __int16 *)a2 >> 4;
        uint64_t v17 = 2;
      }
      else if (v14 == 3)
      {
        if (a3 < 4) {
          return -20;
        }
        unint64_t v15 = *(unsigned __int16 *)a2 | ((unint64_t)a2[2] << 16);
        if (v15 > 0x20000F) {
          return -20;
        }
        unint64_t v16 = v15 >> 4;
        uint64_t v17 = 3;
      }
      else
      {
        unint64_t v16 = v6 >> 3;
        uint64_t v17 = 1;
      }
      memset((void *)(a1 + 29840), a2[v17], v16 + 32);
      *(void *)(a1 + 29600) = a1 + 29840;
      *(void *)(a1 + 29632) = v16;
      return v17 + 1;
    case 2uLL:
      goto LABEL_15;
    case 3uLL:
      if (!*v5) {
        return -30;
      }
LABEL_15:
      if (a3 < 5) {
        return -20;
      }
      unsigned int v18 = (v6 >> 2) & 3;
      unint64_t v19 = *(unsigned int *)a2;
      if (v18 == 2)
      {
        BOOL v21 = 0;
        unsigned int v20 = (v19 >> 4) & 0x3FFF;
        uint64_t v23 = 4;
        unint64_t v22 = v19 >> 18;
        unint64_t v11 = v22 + 4;
        if (v22 + 4 > a3) {
          return -20;
        }
      }
      else if (v18 == 3)
      {
        unsigned int v20 = (v19 >> 4) & 0x3FFFF;
        if (v20 > 0x20000) {
          return -20;
        }
        BOOL v21 = 0;
        unint64_t v22 = (v19 >> 22) | ((unint64_t)a2[4] << 10);
        uint64_t v23 = 5;
        unint64_t v11 = v22 + 5;
        if (v22 + 5 > a3) {
          return -20;
        }
      }
      else
      {
        BOOL v21 = v18 == 0;
        unsigned int v20 = (v19 >> 4) & 0x3FF;
        uint64_t v23 = 3;
        unint64_t v22 = (v19 >> 14) & 0x3FF;
        unint64_t v11 = v22 + 3;
        if (v22 + 3 > a3) {
          return -20;
        }
      }
      uint64_t v24 = v20;
      if (v20 >= 0x301 && *(_DWORD *)(a1 + 29684))
      {
        unint64_t v25 = 0;
        do
        {
          _X13 = *(void *)(a1 + 24) + v25;
          __asm { PRFM            #2, [X13] }
          unint64_t v32 = v25 >> 2;
          v25 += 64;
        }
        while (v32 < 0xFF1);
      }
      if (v7 == 3)
      {
        unsigned int v33 = (char *)(a1 + 29840);
        unsigned int v34 = &a2[v23];
        uint64_t v35 = *(void *)(a1 + 24);
        if (v21) {
          unint64_t v36 = HUF_decompress1X_usingDTable_bmi2(v33, v20, v34, v22, v35);
        }
        else {
          unint64_t v36 = HUF_decompress4X_usingDTable_bmi2(v33, v20, (unsigned __int16 *)v34, v22, v35);
        }
      }
      else
      {
        char v37 = (int *)(a1 + 10296);
        uint64_t v38 = (char *)&a2[v23];
        uint64_t v39 = a1 + 27324;
        uint64_t v40 = (char *)(a1 + 29840);
        if (v21) {
          unint64_t v36 = HUF_decompress1X1_DCtx_wksp_bmi2(v37, v40, v20, v38, v22, v39, 0x800uLL);
        }
        else {
          unint64_t v36 = HUF_decompress4X_hufOnly_wksp_bmi2(v37, v40, v20, v38, v22, v39, 0x800uLL);
        }
      }
      if (v36 > 0xFFFFFFFFFFFFFF88) {
        return -20;
      }
      *(void *)(a1 + 29600) = a1 + 29840;
      *(void *)(a1 + 29632) = v24;
      *unint64_t v5 = 1;
      if (v7 == 2) {
        *(void *)(a1 + 24) = a1 + 10296;
      }
      uint64_t v13 = (_OWORD *)(a1 + 29840 + v24);
      goto LABEL_48;
    default:
      unsigned int v8 = (v6 >> 2) & 3;
      if (v8 == 1)
      {
        size_t v9 = (unint64_t)*(unsigned __int16 *)a2 >> 4;
        uint64_t v10 = 2;
        unint64_t v11 = v9 + 2;
        if (v9 + 34 > a3) {
          goto LABEL_7;
        }
LABEL_26:
        *(void *)(a1 + 29600) = &a2[v10];
        *(void *)(a1 + 29632) = v9;
        return v11;
      }
      if (v8 != 3)
      {
        size_t v9 = v6 >> 3;
        uint64_t v10 = 1;
        unint64_t v11 = v9 + 1;
        if (v9 + 33 > a3) {
          goto LABEL_7;
        }
        goto LABEL_26;
      }
      size_t v9 = (*(unsigned __int16 *)a2 | ((unint64_t)a2[2] << 16)) >> 4;
      uint64_t v10 = 3;
      unint64_t v11 = v9 + 3;
      if (v9 + 35 <= a3) {
        goto LABEL_26;
      }
LABEL_7:
      if (v11 > a3) {
        return -20;
      }
      uint64_t v12 = a1 + 29840;
      memcpy((void *)(a1 + 29840), &a2[v10], v9);
      *(void *)(a1 + 29600) = v12;
      *(void *)(a1 + 29632) = v9;
      uint64_t v13 = (_OWORD *)(v12 + v9);
LABEL_48:
      _OWORD *v13 = 0u;
      v13[1] = 0u;
      return v11;
  }
}

uint64_t ZSTD_decodeSeqHeaders(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (!a4) {
    return -72;
  }
  unint64_t v5 = a3 + 1;
  int v6 = *a3;
  if (*a3)
  {
    if ((v6 & 0x80) != 0)
    {
      if (v6 == 255)
      {
        if (a4 < 3) {
          return -72;
        }
        unint64_t v5 = a3 + 3;
        int v6 = *(unsigned __int16 *)(a3 + 1) + 32512;
      }
      else
      {
        if (a4 < 2) {
          return -72;
        }
        unint64_t v5 = a3 + 2;
        int v6 = (a3[1] | (v6 << 8)) - 0x8000;
      }
    }
    unsigned int v8 = &a3[a4];
    *a2 = v6;
    size_t v9 = v5 + 1;
    if (v5 + 1 > &a3[a4]) {
      return -72;
    }
    unint64_t v11 = (int *)(a1 + 29484);
    unsigned int v12 = *v5;
    unint64_t v13 = ZSTD_buildSeqTable(a1 + 32, (void *)a1, v12 >> 6, 0x23u, 9u, v9, v8 - v9, (uint64_t)&LL_base, (uint64_t)LL_bits, (uint64_t)&LL_defaultDTable, *(_DWORD *)(a1 + 29484), *(_DWORD *)(a1 + 29684), v6, a1 + 27324);
    if (v13 > 0xFFFFFFFFFFFFFF88) {
      return -20;
    }
    unsigned int v14 = &v9[v13];
    unint64_t v15 = ZSTD_buildSeqTable(a1 + 4136, (void *)(a1 + 16), (v12 >> 4) & 3, 0x1Fu, 8u, v14, v8 - v14, (uint64_t)&OF_base, (uint64_t)&OF_bits, (uint64_t)&OF_defaultDTable, *v11, *(_DWORD *)(a1 + 29684), v6, a1 + 27324);
    if (v15 > 0xFFFFFFFFFFFFFF88) {
      return -20;
    }
    unint64_t v16 = &v14[v15];
    unint64_t v17 = ZSTD_buildSeqTable(a1 + 6192, (void *)(a1 + 8), (v12 >> 2) & 3, 0x34u, 9u, v16, v8 - v16, (uint64_t)&ML_base, (uint64_t)ML_bits, (uint64_t)&ML_defaultDTable, *v11, *(_DWORD *)(a1 + 29684), v6, a1 + 27324);
    if (v17 > 0xFFFFFFFFFFFFFF88) {
      return -20;
    }
    else {
      return &v16[v17] - a3;
    }
  }
  else
  {
    *a2 = 0;
    if (a4 == 1) {
      return 1;
    }
    else {
      return -72;
    }
  }
}

uint64_t ZSTD_buildSeqTable(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5, _DWORD *a6, size_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, uint64_t a14)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unsigned int v33 = a4;
  switch(a3)
  {
    case 0:
      uint64_t v18 = 0;
      *a2 = a10;
      break;
    case 1:
      if (a7)
      {
        uint64_t v19 = *(unsigned __int8 *)a6;
        if (v19 > a4) {
          goto LABEL_18;
        }
        uint64_t v20 = 4 * v19;
        int v21 = *(_DWORD *)(a8 + v20);
        LOBYTE(v20) = *(_DWORD *)(a9 + v20);
        *(void *)a1 = 0;
        *(unsigned char *)(a1 + 11) = 0;
        *(_WORD *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 10) = v20;
        *(_DWORD *)(a1 + 12) = v21;
        *a2 = a1;
        uint64_t v18 = 1;
      }
      else
      {
        uint64_t v18 = -72;
      }
      break;
    case 2:
      unsigned int v32 = 0;
      unint64_t v22 = FSE_readNCount_bmi2(v34, &v33, &v32, a6, a7);
      if (v22 > 0xFFFFFFFFFFFFFF88 || v32 > a5) {
        goto LABEL_18;
      }
      uint64_t v18 = v22;
      ZSTD_buildFSETable((int *)a1, (uint64_t)v34, v33, a8, a9, v32, a14);
      *a2 = a1;
      break;
    case 3:
      if (a11)
      {
        if (a12) {
          BOOL v23 = a13 < 25;
        }
        else {
          BOOL v23 = 1;
        }
        if (!v23)
        {
          unint64_t v24 = 0;
          do
          {
            _X11 = *a2 + v24;
            __asm { PRFM            #2, [X11] }
            v24 += 64;
          }
          while (v24 < 8 * (unint64_t)((1 << a5) + 1));
        }
        uint64_t v18 = 0;
      }
      else
      {
LABEL_18:
        uint64_t v18 = -20;
      }
      break;
    default:
      uint64_t v18 = -1;
      break;
  }
  return v18;
}

unint64_t ZSTD_decompressSequences(uint64_t *a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  int v6 = __dst;
  int v7 = &__dst[a3];
  unsigned int v8 = (long long *)a1[3700];
  unint64_t v119 = v8;
  unint64_t v9 = (unint64_t)v8 + a1[3704];
  if (!a6)
  {
    uint64_t v18 = v6;
    size_t v19 = a1[3704];
    if (v19 <= v7 - v6) {
      goto LABEL_133;
    }
    return -70;
  }
  int v10 = a6;
  unint64_t v11 = (char *)a1[3673];
  unint64_t v109 = a1[3675];
  uint64_t v110 = a1[3674];
  long long v116 = 0u;
  memset(v117, 0, sizeof(v117));
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  *((_DWORD *)a1 + 7371) = 1;
  uint64_t v12 = *(uint64_t *)((char *)a1 + 26684);
  v13.i64[0] = v12;
  v13.i64[1] = HIDWORD(v12);
  *(int64x2_t *)((char *)v117 + 8) = v13;
  uint64_t v14 = *((unsigned int *)a1 + 6673);
  uint64_t v118 = 0;
  v117[1].i64[1] = v14;
  if (!a5) {
    return -20;
  }
  *((void *)&v113 + 1) = a4;
  *(void *)&long long v114 = a4 + 8;
  uint64_t v15 = a5 - 8;
  if (a5 >= 8)
  {
    unint64_t v16 = *(void *)&a4[v15];
    *(void *)&long long v113 = &a4[v15];
    *(void *)&long long v112 = v16;
    if (HIBYTE(v16) && a5 <= 0xFFFFFFFFFFFFFF88)
    {
      uint64_t v105 = (int32x2_t *)((char *)a1 + 26684);
      uint64_t v106 = v6;
      uint64_t v107 = (uint64_t)v7;
      unsigned int v17 = __clz(HIBYTE(v16)) - 23;
      goto LABEL_18;
    }
    return -20;
  }
  unint64_t v16 = *a4;
  *(void *)&long long v113 = a4;
  *(void *)&long long v112 = v16;
  switch(a5)
  {
    case 2uLL:
      goto LABEL_15;
    case 3uLL:
      goto LABEL_14;
    case 4uLL:
      goto LABEL_13;
    case 5uLL:
      goto LABEL_12;
    case 6uLL:
      goto LABEL_11;
    case 7uLL:
      v16 |= (unint64_t)a4[6] << 48;
LABEL_11:
      v16 += (unint64_t)a4[5] << 40;
LABEL_12:
      v16 += (unint64_t)a4[4] << 32;
LABEL_13:
      v16 += (unint64_t)a4[3] << 24;
LABEL_14:
      v16 += (unint64_t)a4[2] << 16;
LABEL_15:
      v16 += (unint64_t)a4[1] << 8;
      *(void *)&long long v112 = v16;
      break;
    default:
      break;
  }
  if (!a4[a5 - 1]) {
    return -20;
  }
  uint64_t v105 = (int32x2_t *)((char *)a1 + 26684);
  uint64_t v106 = v6;
  uint64_t v107 = (uint64_t)v7;
  uint64_t v15 = 0;
  unsigned int v17 = __clz(a4[a5 - 1]) - 8 * a5 + 41;
  DWORD2(v112) = v17;
LABEL_18:
  uint64_t v21 = *a1;
  uint64_t v22 = *(unsigned int *)(*a1 + 4);
  unsigned int v23 = v22 + v17;
  unint64_t v24 = BIT_mask;
  *((void *)&v114 + 1) = (v16 >> -(char)v23) & BIT_mask[v22];
  if (v23 > 0x40) {
    goto LABEL_27;
  }
  if (v15 >= 8)
  {
    v15 -= v23 >> 3;
    *(void *)&long long v113 = &a4[v15];
    v23 &= 7u;
  }
  else
  {
    if (!v15) {
      goto LABEL_27;
    }
    uint64_t v25 = v23 >> 3;
    if (&a4[v15 - v25] >= a4) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = v15;
    }
    v15 -= v26;
    *(void *)&long long v113 = &a4[v15];
    v23 -= 8 * v26;
  }
  unint64_t v16 = *(void *)&a4[v15];
  *(void *)&long long v112 = v16;
LABEL_27:
  *(void *)&long long v115 = v21 + 8;
  uint64_t v27 = a1[2];
  uint64_t v28 = *(unsigned int *)(v27 + 4);
  unsigned int v29 = v28 + v23;
  *((void *)&v115 + 1) = (v16 >> -(char)v29) & BIT_mask[v28];
  if (v29 > 0x40) {
    goto LABEL_36;
  }
  if (v15 >= 8)
  {
    v15 -= v29 >> 3;
    *(void *)&long long v113 = &a4[v15];
    v29 &= 7u;
  }
  else
  {
    if (!v15) {
      goto LABEL_36;
    }
    uint64_t v30 = v29 >> 3;
    if (&a4[v15 - v30] >= a4) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = v15;
    }
    v15 -= v31;
    *(void *)&long long v113 = &a4[v15];
    v29 -= 8 * v31;
  }
  unint64_t v16 = *(void *)&a4[v15];
  *(void *)&long long v112 = v16;
LABEL_36:
  *(void *)&long long v116 = v27 + 8;
  uint64_t v32 = a1[1];
  uint64_t v33 = *(unsigned int *)(v32 + 4);
  unsigned int v34 = v33 + v29;
  unint64_t v35 = (v16 >> -(char)v34) & BIT_mask[v33];
  DWORD2(v112) = v34;
  *((void *)&v116 + 1) = v35;
  if (v34 <= 0x40)
  {
    unint64_t v36 = &a4[v15];
    if (v15 >= 8)
    {
      uint64_t v38 = &v36[-(v34 >> 3)];
      *(void *)&long long v113 = v38;
      v34 &= 7u;
LABEL_44:
      DWORD2(v112) = v34;
      *(void *)&long long v112 = *(void *)v38;
      goto LABEL_45;
    }
    if (v15)
    {
      uint64_t v37 = v34 >> 3;
      if (&v36[-v37] >= a4) {
        uint64_t v37 = v37;
      }
      else {
        uint64_t v37 = v15;
      }
      uint64_t v38 = &v36[-v37];
      *(void *)&long long v113 = &v36[-v37];
      v34 -= 8 * v37;
      goto LABEL_44;
    }
  }
LABEL_45:
  unint64_t v20 = 0;
  v117[0].i64[0] = v32 + 8;
  uint64_t v18 = v106;
  unint64_t v39 = v107 - 32;
  unint64_t v108 = v9;
  do
  {
    uint64_t v40 = (unsigned __int16 *)(v115 + 8 * *((void *)&v114 + 1));
    uint64_t v41 = *v40;
    int v42 = *((unsigned __int8 *)v40 + 2);
    int v43 = *((unsigned __int8 *)v40 + 3);
    unint64_t v44 = *((unsigned int *)v40 + 1);
    uint64_t v45 = (unsigned __int16 *)(v117[0].i64[0] + 8 * *((void *)&v116 + 1));
    uint64_t v46 = *v45;
    int v47 = *((unsigned __int8 *)v45 + 2);
    int v48 = *((unsigned __int8 *)v45 + 3);
    size_t v49 = *((unsigned int *)v45 + 1);
    int v50 = (unsigned __int16 *)(v116 + 8 * *((void *)&v115 + 1));
    uint64_t v51 = *v50;
    unsigned int v52 = *((unsigned __int8 *)v50 + 2);
    int v53 = *((unsigned __int8 *)v50 + 3);
    uint64_t v54 = *((unsigned int *)v50 + 1);
    if (v52 < 2)
    {
      if (!v52)
      {
        if (v44)
        {
          unint64_t v56 = v117[0].u64[1];
          if (!v47) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
        unint64_t v56 = v117[1].u64[0];
LABEL_123:
        uint64_t v102 = v117[0].i64[1];
        v117[0].i64[1] = v56;
        v117[1].i64[0] = v102;
        if (!v47) {
          goto LABEL_49;
        }
LABEL_48:
        uint64_t v57 = (void)v112 << v34 >> -(char)v47;
        v34 += v47;
        v49 += v57;
        goto LABEL_49;
      }
      if (v44) {
        uint64_t v54 = v54;
      }
      else {
        uint64_t v54 = (v54 + 1);
      }
      unint64_t v95 = (void)v112 << v34++;
      DWORD2(v112) = v34;
      uint64_t v96 = v54 + (v95 >> 63);
      if (v96 == 3)
      {
        if (v117[0].i64[1] == 1) {
          unint64_t v56 = 1;
        }
        else {
          unint64_t v56 = v117[0].i64[1] - 1;
        }
      }
      else
      {
        if (v117[0].i64[v96 + 1]) {
          unint64_t v56 = v117[0].u64[v96 + 1];
        }
        else {
          unint64_t v56 = 1;
        }
        if (v96 == 1) {
          goto LABEL_123;
        }
      }
      v117[1].i64[1] = v117[1].i64[0];
      goto LABEL_123;
    }
    uint64_t v55 = (void)v112 << v34 >> -(char)v52;
    v34 += v52;
    unint64_t v56 = v55 + v54;
    v117[1] = *(int64x2_t *)((char *)v117 + 8);
    v117[0].i64[1] = v55 + v54;
    if (v47) {
      goto LABEL_48;
    }
LABEL_49:
    if ((v47 + v42 + v52) < 0x1Fu || v34 > 0x40) {
      goto LABEL_50;
    }
    if ((unint64_t)v113 >= (unint64_t)v114)
    {
      unint64_t v89 = (void *)(v113 - (v34 >> 3));
      *(void *)&long long v113 = v89;
      v34 &= 7u;
    }
    else
    {
      if ((void)v113 == *((void *)&v113 + 1)) {
        goto LABEL_50;
      }
      uint64_t v87 = v34 >> 3;
      if ((unint64_t)(v113 - v87) >= *((void *)&v113 + 1)) {
        uint64_t v88 = v87;
      }
      else {
        uint64_t v88 = (v113 - DWORD2(v113));
      }
      unint64_t v89 = (void *)(v113 - v88);
      *(void *)&long long v113 = v113 - v88;
      v34 -= 8 * v88;
    }
    *(void *)&long long v112 = *v89;
LABEL_50:
    unint64_t v58 = ((void)v112 << v34 >> -(char)v42) + v44;
    BOOL v59 = v42 == 0;
    if (v42) {
      unsigned int v60 = v34 + v42;
    }
    else {
      unsigned int v60 = v34;
    }
    if (v59) {
      unint64_t v61 = v44;
    }
    else {
      unint64_t v61 = v58;
    }
    char v62 = v60 + v43;
    uint64_t v63 = (((unint64_t)v112 >> -(char)(v60 + v43)) & v24[v43]) + v41;
    int v64 = v60 + v43 + v48;
    *((void *)&v116 + 1) = (((unint64_t)v112 >> -(char)(v62 + v48)) & v24[v48]) + v46;
    int v65 = v64 + v53;
    unint64_t v66 = ((unint64_t)v112 >> -(char)(v64 + v53)) & v24[v53];
    DWORD2(v112) = v65;
    *((void *)&v114 + 1) = v63;
    *((void *)&v115 + 1) = v66 + v51;
    size_t v67 = v119;
    uint64_t v68 = (long long *)((char *)v119 + v61);
    if ((unint64_t)v119 + v61 > v9 || (unint64_t v69 = v61 + v49, (unint64_t)&v18[v61 + v49] > v39))
    {
      v120[0] = v61;
      v120[1] = v49;
      v120[2] = v56;
      v120[3] = 0;
      uint64_t v85 = v11;
      uint64_t v86 = ZSTD_execSequenceEnd(v18, v107, v120, &v119, v9, v11, v110, v109);
      unint64_t v11 = v85;
      unint64_t v9 = v108;
      unint64_t v69 = v86;
      goto LABEL_72;
    }
    unint64_t v70 = &v18[v61];
    *(_OWORD *)uint64_t v18 = *v119;
    if (v61 > 0x10)
    {
      uint64_t v90 = v18 + 16;
      long long v91 = v67 + 1;
      do
      {
        long long v92 = *v91++;
        *(_OWORD *)uint64_t v90 = v92;
        v90 += 16;
      }
      while (v90 < v70);
    }
    size_t v71 = &v70[-v56];
    unint64_t v119 = v68;
    if (v56 > v70 - v11)
    {
      if (v56 > (unint64_t)&v70[-v110])
      {
        unint64_t v69 = -20;
        goto LABEL_72;
      }
      unint64_t v111 = v20;
      unint64_t v72 = v24;
      unint64_t v73 = v39;
      uint64_t v74 = v71 - v11;
      uint64_t v75 = (const void *)(v109 + v71 - v11);
      size_t v76 = v11;
      if ((unint64_t)v75 + v49 <= v109)
      {
        memmove(v70, v75, v49);
        unint64_t v9 = v108;
        unint64_t v39 = v73;
        unint64_t v24 = v72;
        unint64_t v11 = v76;
        unint64_t v20 = v111;
        goto LABEL_72;
      }
      size_t v77 = v49;
      memmove(v70, v75, v11 - v71);
      v70 -= v74;
      size_t v49 = v74 + v77;
      size_t v71 = v76;
      unint64_t v9 = v108;
      unint64_t v39 = v73;
      unint64_t v24 = v72;
      unint64_t v11 = v76;
      unint64_t v20 = v111;
    }
    if (v56 < 0x10)
    {
      if (v56 > 7)
      {
        *(void *)unint64_t v70 = *(void *)v71;
      }
      else
      {
        uint64_t v93 = ZSTD_overlapCopy8_dec64table[v56];
        *unint64_t v70 = *v71;
        v70[1] = v71[1];
        v70[2] = v71[2];
        v70[3] = v71[3];
        uint64_t v94 = &v71[ZSTD_overlapCopy8_dec32table[v56]];
        *((_DWORD *)v70 + 1) = *(_DWORD *)v94;
        size_t v71 = &v94[-v93];
      }
      if (v49 >= 9)
      {
        unint64_t v97 = v70 + 8;
        unint64_t v98 = (long long *)(v71 + 8);
        int v99 = &v70[v49];
        if (v70 + 8 - (char *)v98 >= 16)
        {
          do
          {
            long long v101 = *v98++;
            *(_OWORD *)unint64_t v97 = v101;
            v97 += 16;
          }
          while (v97 < v99);
        }
        else
        {
          do
          {
            uint64_t v100 = *(void *)v98;
            unint64_t v98 = (long long *)((char *)v98 + 8);
            *(void *)unint64_t v97 = v100;
            v97 += 8;
          }
          while (v97 < v99);
        }
      }
    }
    else
    {
      unint64_t v78 = &v70[v49];
      do
      {
        long long v79 = *(_OWORD *)v71;
        v71 += 16;
        *(_OWORD *)unint64_t v70 = v79;
        v70 += 16;
      }
      while (v70 < v78);
    }
LABEL_72:
    unsigned int v80 = DWORD2(v112);
    if (DWORD2(v112) > 0x40) {
      goto LABEL_81;
    }
    if ((unint64_t)v113 >= (unint64_t)v114)
    {
      uint64_t v83 = (void *)(v113 - ((unint64_t)DWORD2(v112) >> 3));
      *(void *)&long long v113 = v83;
      unsigned int v80 = BYTE8(v112) & 7;
    }
    else
    {
      if ((void)v113 == *((void *)&v113 + 1)) {
        goto LABEL_81;
      }
      unint64_t v81 = (unint64_t)DWORD2(v112) >> 3;
      if ((unint64_t)v113 - v81 >= *((void *)&v113 + 1)) {
        uint64_t v82 = v81;
      }
      else {
        uint64_t v82 = (v113 - DWORD2(v113));
      }
      uint64_t v83 = (void *)(v113 - v82);
      *(void *)&long long v113 = v113 - v82;
      unsigned int v80 = DWORD2(v112) - 8 * v82;
    }
    DWORD2(v112) = v80;
    *(void *)&long long v112 = *v83;
LABEL_81:
    v18 += v69;
    int v84 = v10 - 1;
    if (v69 >= 0xFFFFFFFFFFFFFF89) {
      unint64_t v20 = v69;
    }
    else {
      --v10;
    }
    if (v69 > 0xFFFFFFFFFFFFFF88) {
      break;
    }
    unsigned int v34 = v80;
  }
  while (v84);
  if (v20 <= 0xFFFFFFFFFFFFFF88)
  {
    if (v10) {
      return -20;
    }
    if (v80 > 0x40
      || (unint64_t v20 = -20, v80 == 64)
      && (unint64_t)v113 < (unint64_t)v114
      && (void)v113 == *((void *)&v113 + 1))
    {
      int v6 = v106;
      *uint64_t v105 = vmovn_s64(*(int64x2_t *)((char *)v117 + 8));
      v105[1].i32[0] = v117[1].i32[2];
      unsigned int v8 = v119;
      size_t v19 = v9 - (void)v119;
      if (v9 - (unint64_t)v119 <= v107 - (uint64_t)v18)
      {
LABEL_133:
        if (v18)
        {
          memcpy(v18, v8, v19);
          unint64_t v103 = &v18[v19];
        }
        else
        {
          unint64_t v103 = 0;
        }
        return v103 - v6;
      }
      return -70;
    }
  }
  return v20;
}

uint64_t ZSTD_decompressBlock(void *a1, char *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  if (a3)
  {
    int v7 = (char *)a1[3672];
    if (v7 != a2)
    {
      a1[3675] = v7;
      a1[3674] = &a2[a1[3673] - (void)v7];
      a1[3673] = a2;
      a1[3672] = a2;
    }
  }
  uint64_t result = ZSTD_decompressBlock_internal((uint64_t)a1, a2, a3, a4, a5, 0);
  a1[3672] = &a2[result];
  return result;
}

uint64_t COVER_sum(int64x2_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 4)
  {
    uint64_t v2 = a2 & 0xFFFFFFFC;
    unint64_t v5 = a1 + 1;
    int64x2_t v6 = 0uLL;
    uint64_t v7 = v2;
    int64x2_t v8 = 0uLL;
    do
    {
      int64x2_t v6 = vaddq_s64(v5[-1], v6);
      int64x2_t v8 = vaddq_s64(*v5, v8);
      v5 += 2;
      v7 -= 4;
    }
    while (v7);
    uint64_t v3 = vaddvq_s64(vaddq_s64(v8, v6));
    if (v2 == a2) {
      return v3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  unint64_t v9 = &a1->i64[v2];
  uint64_t v10 = a2 - v2;
  do
  {
    uint64_t v11 = *v9++;
    v3 += v11;
    --v10;
  }
  while (v10);
  return v3;
}

unint64_t COVER_warnOnSmallCorpus(unint64_t result, unint64_t a2, int a3)
{
  if (a3 >= 1 && (double)a2 / (double)result < 10.0)
  {
    unsigned int v4 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "WARNING: The maximum dictionary size %u is too large compared to the source size %u! size(source)/size(dictionary) = %f, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! \n", result, a2, (double)a2 / (double)result);
    unint64_t v5 = *v4;
    return fflush(v5);
  }
  return result;
}

unint64_t COVER_computeEpochs(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = 10 * a3;
  if (a1 / a3 >= a4)
  {
    unsigned int v5 = a1 / a3 / a4;
    uint64_t v6 = a2 / v5;
    if (v6 >= v4) {
      return v5 | (unint64_t)(v6 << 32);
    }
  }
  else
  {
    unsigned int v5 = 1;
    uint64_t v6 = a2;
    if (a2 >= v4) {
      return v5 | (unint64_t)(v6 << 32);
    }
  }
  if (v4 >= a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = v4;
  }
  unsigned int v5 = a2 / v6;
  return v5 | (unint64_t)(v6 << 32);
}

uint64_t ZDICT_trainFromBuffer_cover(char *a1, size_t a2, uint64_t a3, int64x2_t *a4, uint64_t a5, unsigned int *a6)
{
  *((void *)a6 + 2) = 0x3FF0000000000000;
  int v7 = a6[9];
  g_displayLevel = v7;
  unsigned int v8 = a6[1];
  if (!v8 || ((v11 = *a6, v8 <= v11) ? (BOOL v12 = v11 > a2) : (BOOL v12 = 1), v12))
  {
    if (v7 >= 1)
    {
      int64x2_t v13 = (FILE **)MEMORY[0x1E4F143C8];
      fwrite("Cover parameters incorrect\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      fflush(*v13);
    }
    return -42;
  }
  else if (a5)
  {
    if (a2 > 0xFF)
    {
      uint64_t v41 = 0;
      *(_OWORD *)unint64_t v39 = 0u;
      *(_OWORD *)uint64_t v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      *(_OWORD *)unint64_t v36 = 0u;
      unint64_t v14 = COVER_ctx_init((uint64_t)v36, a3, a4, a5, v8, 1.0);
      if (v14 <= 0xFFFFFFFFFFFFFF88)
      {
        if (g_displayLevel >= 1 && (double)(unint64_t)v39[1] / (double)a2 < 10.0)
        {
          unint64_t v20 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "WARNING: The maximum dictionary size %u is too large compared to the source size %u! size(source)/size(dictionary) = %f, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! \n", a2, LODWORD(v39[1]), (double)(unint64_t)v39[1] / (double)a2);
          fflush(*v20);
        }
        *(void *)&v35[4] = 0;
        unsigned int v21 = __clz(*a6 - a6[1] + 1) ^ 0x1F;
        unsigned int v34 = v21 + 2;
        *(void *)unint64_t v35 = (4 << v21);
        *(void *)&v35[4] = ((4 << v21) - 1);
        size_t v22 = 8 * (4 << v21);
        unsigned int v23 = malloc_type_malloc(v22, 0x100004000313F17uLL);
        uint64_t v33 = v23;
        if (v23)
        {
          unint64_t v24 = v23;
          memset(v23, 255, v22);
          if (g_displayLevel >= 2)
          {
            uint64_t v25 = (FILE **)MEMORY[0x1E4F143C8];
            fwrite("Building dictionary\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            fflush(*v25);
          }
          long long v26 = *((_OWORD *)a6 + 1);
          v32[0] = *(_OWORD *)a6;
          v32[1] = v26;
          v32[2] = *((_OWORD *)a6 + 2);
          size_t v27 = COVER_buildDictionary((uint64_t)v36, (uint64_t)v40[0], (uint64_t)&v33, (uint64_t)a1, a2, (int *)v32);
          unint64_t v14 = ZDICT_finalizeDictionary(a1, a2, (unsigned int *)&a1[v27], a2 - v27, a3, (uint64_t)a4, a5, v28, *((void *)a6 + 4), HIDWORD(*((void *)a6 + 4)), a6[10]);
          if (v14 <= 0xFFFFFFFFFFFFFF88 && g_displayLevel >= 2)
          {
            unsigned int v29 = (FILE **)MEMORY[0x1E4F143C8];
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "Constructed dictionary of size %u\n", v14);
            fflush(*v29);
          }
          if (v39[0])
          {
            free(v39[0]);
            v39[0] = 0;
          }
          if (v40[0])
          {
            free(v40[0]);
            v40[0] = 0;
          }
          if (v40[1])
          {
            free(v40[1]);
            v40[1] = 0;
          }
          if (v36[1])
          {
            free(v36[1]);
            v36[1] = 0;
          }
          free(v24);
        }
        else
        {
          if (g_displayLevel >= 1)
          {
            uint64_t v30 = (FILE **)MEMORY[0x1E4F143C8];
            fwrite("Failed to allocate dmer map: out of memory\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            fflush(*v30);
          }
          if (v39[0])
          {
            free(v39[0]);
            v39[0] = 0;
          }
          if (v40[0])
          {
            free(v40[0]);
            v40[0] = 0;
          }
          if (v40[1])
          {
            free(v40[1]);
            v40[1] = 0;
          }
          if (v36[1]) {
            free(v36[1]);
          }
          return -64;
        }
      }
    }
    else
    {
      if (v7 >= 1)
      {
        uint64_t v15 = (FILE **)MEMORY[0x1E4F143C8];
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "dictBufferCapacity must be at least %u\n", 256);
        fflush(*v15);
      }
      return -70;
    }
  }
  else
  {
    if (v7 >= 1)
    {
      unint64_t v16 = (FILE **)MEMORY[0x1E4F143C8];
      fwrite("Cover must have at least one input file\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      fflush(*v16);
    }
    return -72;
  }
  return v14;
}

uint64_t COVER_ctx_init(uint64_t a1, uint64_t a2, int64x2_t *a3, unsigned int a4, unsigned int a5, double a6)
{
  unsigned int v8 = (uint64_t *)a3;
  if (a4)
  {
    if (a4 >= 4)
    {
      uint64_t v10 = a4 & 0xFFFFFFFC;
      BOOL v12 = a3 + 1;
      int64x2_t v13 = 0uLL;
      uint64_t v14 = v10;
      int64x2_t v15 = 0uLL;
      do
      {
        int64x2_t v13 = vaddq_s64(v12[-1], v13);
        int64x2_t v15 = vaddq_s64(*v12, v15);
        v12 += 2;
        v14 -= 4;
      }
      while (v14);
      unint64_t v11 = vaddvq_s64(vaddq_s64(v15, v13));
      if (v10 == a4) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
    }
    uint64_t v16 = a4 - v10;
    unsigned int v17 = &a3->i64[v10];
    do
    {
      uint64_t v18 = *v17++;
      v11 += v18;
      --v16;
    }
    while (v16);
  }
  else
  {
    unint64_t v11 = 0;
  }
LABEL_10:
  uint64_t v19 = ((double)a4 * a6);
  if (a6 >= 1.0) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = ((double)a4 * a6);
  }
  uint64_t v21 = a4 - v20;
  if (a6 >= 1.0) {
    uint64_t v22 = a4;
  }
  else {
    uint64_t v22 = v19;
  }
  uint64_t v23 = v11;
  int v24 = v11;
  if (a6 >= 1.0) {
    goto LABEL_35;
  }
  if (!v19)
  {
    uint64_t v19 = 0;
    uint64_t v23 = 0;
    goto LABEL_26;
  }
  if (v19 < 4)
  {
    uint64_t v25 = 0;
    uint64_t v23 = 0;
LABEL_24:
    uint64_t v30 = v19 - v25;
    uint64_t v31 = &a3->i64[v25];
    do
    {
      uint64_t v32 = *v31++;
      v23 += v32;
      --v30;
    }
    while (v30);
    goto LABEL_26;
  }
  uint64_t v25 = v19 & 0xFFFFFFFC;
  long long v26 = a3 + 1;
  int64x2_t v27 = 0uLL;
  uint64_t v28 = v25;
  int64x2_t v29 = 0uLL;
  do
  {
    int64x2_t v27 = vaddq_s64(v26[-1], v27);
    int64x2_t v29 = vaddq_s64(*v26, v29);
    v26 += 2;
    v28 -= 4;
  }
  while (v28);
  uint64_t v23 = vaddvq_s64(vaddq_s64(v29, v27));
  if (v25 != v19) {
    goto LABEL_24;
  }
LABEL_26:
  if (a4 == v20)
  {
    int v24 = 0;
  }
  else
  {
    if (v21 >= 4)
    {
      uint64_t v33 = v21 & 0xFFFFFFFC;
      unsigned int v34 = (int64x2_t *)((char *)a3 + 8 * v19 + 16);
      int64x2_t v35 = 0uLL;
      uint64_t v36 = v33;
      int64x2_t v37 = 0uLL;
      do
      {
        int64x2_t v35 = vaddq_s64(v34[-1], v35);
        int64x2_t v37 = vaddq_s64(*v34, v37);
        v34 += 2;
        v36 -= 4;
      }
      while (v36);
      int v24 = vaddvq_s64(vaddq_s64(v37, v35));
      if (v33 == v21) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v33 = 0;
      int v24 = 0;
    }
    uint64_t v38 = v21 - v33;
    unint64_t v39 = &a3->i64[v19 + v33];
    do
    {
      uint64_t v40 = *v39++;
      v24 += v40;
      --v38;
    }
    while (v38);
  }
LABEL_35:
  if (a5 <= 8) {
    unint64_t v41 = 8;
  }
  else {
    unint64_t v41 = a5;
  }
  if (v11 < v41 || v11 >= 0xFFFFFFFF)
  {
    if (g_displayLevel >= 1)
    {
      int v43 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Total samples size is too large (%u MB), maximum size is %u MB\n");
LABEL_51:
      fflush(*v43);
    }
    return -72;
  }
  if (v22 <= 4)
  {
    if (g_displayLevel >= 1)
    {
      int v43 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Total number of training samples is %u and is invalid.");
      goto LABEL_51;
    }
    return -72;
  }
  if (a4 == v20)
  {
    if (g_displayLevel >= 1)
    {
      int v43 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Total number of testing samples is %u and is invalid.");
      goto LABEL_51;
    }
    return -72;
  }
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (g_displayLevel >= 2)
  {
    uint64_t v45 = (FILE **)MEMORY[0x1E4F143C8];
    uint64_t v94 = a2;
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Training on %u samples of total size %u\n", v22, v23);
    fflush(*v45);
    a2 = v94;
    if (g_displayLevel >= 2)
    {
      fprintf(*v45, "Testing on %u samples of total size %u\n", v21, v24);
      fflush(*v45);
      a2 = v94;
    }
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = v22;
  *(void *)(a1 + 40) = v21;
  uint64_t v46 = v23 - v41 + 1;
  *(void *)(a1 + 56) = v46;
  *(void *)(a1 + 48) = malloc_type_malloc(4 * v46, 0x100004052888210uLL);
  *(void *)(a1 + 72) = malloc_type_malloc(4 * *(void *)(a1 + 56), 0x100004052888210uLL);
  unsigned int v47 = a4 + 1;
  int v48 = malloc_type_malloc(8 * (a4 + 1), 0x100004000313F17uLL);
  *(void *)(a1 + 8) = v48;
  size_t v49 = *(int32x4_t **)(a1 + 48);
  if (!v49 || !*(void *)(a1 + 72) || !v48)
  {
    if (g_displayLevel >= 1)
    {
      uint64_t v85 = (FILE **)MEMORY[0x1E4F143C8];
      fwrite("Failed to allocate scratch buffers\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      fflush(*v85);
      size_t v49 = *(int32x4_t **)(a1 + 48);
    }
    if (v49)
    {
      free(v49);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v86 = *(void **)(a1 + 64);
    if (v86)
    {
      free(v86);
      *(void *)(a1 + 64) = 0;
    }
    uint64_t v87 = *(void **)(a1 + 72);
    if (v87)
    {
      free(v87);
      *(void *)(a1 + 72) = 0;
    }
    uint64_t v88 = *(void **)(a1 + 8);
    if (v88)
    {
      free(v88);
      *(void *)(a1 + 8) = 0;
    }
    return -64;
  }
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 80) = a5;
  void *v48 = 0;
  if (a4)
  {
    uint64_t v50 = 0;
    if (v47 <= 2) {
      uint64_t v51 = 2;
    }
    else {
      uint64_t v51 = v47;
    }
    unsigned int v52 = v48 + 1;
    uint64_t v53 = v51 - 1;
    do
    {
      uint64_t v54 = *v8++;
      v50 += v54;
      *v52++ = v50;
      --v53;
    }
    while (v53);
  }
  if (g_displayLevel >= 2)
  {
    uint64_t v55 = (FILE **)MEMORY[0x1E4F143C8];
    fwrite("Constructing partial suffix array\n", 0x22uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    fflush(*v55);
    size_t v49 = *(int32x4_t **)(a1 + 48);
  }
  size_t v56 = *(void *)(a1 + 56);
  if (v56)
  {
    if (v56 < 0x10 || (v56 ? (BOOL v57 = (v56 - 1) >> 32 == 0) : (BOOL v57 = 0), !v57))
    {
      unint64_t v58 = 0;
      for (unsigned __int32 i = 0; i < v56; v58 = i)
LABEL_74:
        v49->i32[v58] = i++;
      goto LABEL_75;
    }
    unint64_t v58 = v56 & 0xFFFFFFFFFFFFFFF8;
    unsigned __int32 i = v56 & 0xFFFFFFF8;
    int32x4_t v89 = (int32x4_t)xmmword_18898C3A0;
    uint64_t v90 = v49 + 1;
    v91.i64[0] = 0x400000004;
    v91.i64[1] = 0x400000004;
    v92.i64[0] = 0x800000008;
    v92.i64[1] = 0x800000008;
    unint64_t v93 = v56 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v90[-1] = v89;
      *uint64_t v90 = vaddq_s32(v89, v91);
      int32x4_t v89 = vaddq_s32(v89, v92);
      v90 += 2;
      v93 -= 8;
    }
    while (v93);
    if (v56 != v58) {
      goto LABEL_74;
    }
  }
LABEL_75:
  g_coverCtx = a1;
  if (*(_DWORD *)(a1 + 80) >= 9u) {
    unsigned int v60 = (int (__cdecl *)(const void *, const void *))COVER_strict_cmp;
  }
  else {
    unsigned int v60 = (int (__cdecl *)(const void *, const void *))COVER_strict_cmp8;
  }
  qsort(v49, v56, 4uLL, v60);
  if (g_displayLevel >= 2)
  {
    unint64_t v61 = (FILE **)MEMORY[0x1E4F143C8];
    fwrite("Computing frequencies\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    fflush(*v61);
  }
  char v62 = *(unsigned int **)(a1 + 48);
  unint64_t v63 = *(void *)(a1 + 56);
  if (*(_DWORD *)(a1 + 80) >= 9u) {
    int v64 = COVER_cmp;
  }
  else {
    int v64 = COVER_cmp8;
  }
  if (v63)
  {
    unint64_t v65 = 0;
    do
    {
      if (v63 <= v65 + 1) {
        unint64_t v66 = v65 + 1;
      }
      else {
        unint64_t v66 = v63;
      }
      uint64_t v67 = 4;
      while (1)
      {
        uint64_t v68 = v67;
        unint64_t v69 = (unsigned int *)((char *)v62 + v67);
        if (v66 - 1 == v65) {
          break;
        }
        ++v65;
        int v70 = v64(a1, v62, (unsigned int *)((char *)v62 + v67));
        uint64_t v67 = v68 + 4;
        if (v70)
        {
          uint64_t v71 = *(void *)(a1 + 48);
          unint64_t v72 = (unint64_t)v62 - v71;
          int v73 = 0;
          if (!v68) {
            goto LABEL_85;
          }
          goto LABEL_95;
        }
      }
      unint64_t v65 = v66;
      uint64_t v71 = *(void *)(a1 + 48);
      unint64_t v72 = (unint64_t)v62 - v71;
      int v73 = 0;
      if (!v68) {
        goto LABEL_85;
      }
LABEL_95:
      uint64_t v74 = *(unint64_t **)(a1 + 8);
      uint64_t v75 = &v74[*(void *)(a1 + 24)];
      unint64_t v76 = *v74;
      uint64_t v77 = *(void *)(a1 + 72);
      do
      {
        *(_DWORD *)(v77 + 4 * *v62) = v72 >> 2;
        unint64_t v78 = *v62;
        if (v76 <= v78)
        {
          ++v73;
          if (v69 != v62 + 1)
          {
            long long v79 = v75;
            if (v75 != v74)
            {
              unint64_t v80 = v75 - v74;
              long long v79 = v74;
              do
              {
                unint64_t v81 = v80 >> 1;
                uint64_t v82 = &v79[v80 >> 1];
                unint64_t v84 = *v82;
                uint64_t v83 = v82 + 1;
                v80 += ~(v80 >> 1);
                if (v84 >= v78) {
                  unint64_t v80 = v81;
                }
                else {
                  long long v79 = v83;
                }
              }
              while (v80);
            }
            unint64_t v76 = *v79;
            uint64_t v74 = v79 + 1;
          }
        }
        ++v62;
      }
      while (v69 != v62);
LABEL_85:
      *(_DWORD *)(v71 + (v72 & 0x3FFFFFFFCLL)) = v73;
      char v62 = v69;
    }
    while (v65 < v63);
  }
  else
  {
    uint64_t v71 = *(void *)(a1 + 48);
  }
  uint64_t result = 0;
  *(void *)(a1 + 64) = v71;
  *(void *)(a1 + 48) = 0;
  return result;
}

size_t COVER_buildDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, int *a6)
{
  size_t v6 = a5;
  unsigned int v9 = *(_DWORD *)(a1 + 56);
  unsigned int v10 = 10 * *a6;
  unsigned int v11 = a5 / *a6;
  if (v11 < 4) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = v11 >> 2;
  }
  int v68 = v9 / v12;
  if (v9 / v12 < v10)
  {
    if (v10 >= v9) {
      unsigned int v13 = *(_DWORD *)(a1 + 56);
    }
    else {
      unsigned int v13 = 10 * *a6;
    }
    int v68 = v13;
    unsigned int v12 = v9 / v13;
  }
  unint64_t v67 = v12;
  LODWORD(v14) = v12 >> 3;
  if (v14 >= 0x64) {
    LODWORD(v14) = 100;
  }
  if (v14 <= 0xA) {
    uint64_t v14 = 10;
  }
  else {
    uint64_t v14 = v14;
  }
  unint64_t v65 = v14;
  if (g_displayLevel >= 2)
  {
    int64x2_t v15 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Breaking content into %u epochs of size %u\n", v67, v68);
    fflush(*v15);
  }
  if (!v6) {
    goto LABEL_76;
  }
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  size_t v63 = v6;
LABEL_20:
  uint64_t v18 = (v68 * v16);
  uint64_t v19 = (v18 + v68);
  int v20 = *a6;
  int v21 = a6[1];
  memset(*(void **)a3, 255, 8 * *(unsigned int *)(a3 + 12));
  if (v18 < v19)
  {
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    unsigned int v24 = 0;
    unsigned int v25 = 0;
    uint64_t v26 = *(void *)(a1 + 72);
    int64x2_t v27 = *(_DWORD **)a3;
    int v28 = v20 - v21 + 2;
    unsigned int v29 = v68 * v16;
    while (1)
    {
      uint64_t v31 = *(unsigned int *)(v26 + 4 * v18);
      uint64_t v32 = (-1640531535 * v31) >> -*(unsigned char *)(a3 + 8);
      int v33 = v27[2 * v32 + 1];
      if (v33 == -1) {
        goto LABEL_33;
      }
      if (v27[2 * v32] != v31) {
        break;
      }
LABEL_30:
      unsigned int v34 = &v27[2 * v32 + 1];
      if (v33)
      {
        ++v18;
        *unsigned int v34 = v33 + 1;
        if (v18 - v29 != v28) {
          goto LABEL_23;
        }
        goto LABEL_35;
      }
LABEL_34:
      v25 += *(_DWORD *)(a2 + 4 * v31);
      ++v18;
      *unsigned int v34 = 1;
      if (v18 - v29 != v28) {
        goto LABEL_23;
      }
LABEL_35:
      uint64_t v37 = *(unsigned int *)(v26 + 4 * v29);
      uint64_t v38 = (-1640531535 * v37) >> -*(unsigned char *)(a3 + 8);
      int v39 = v27[2 * v38 + 1];
      if (v39 != -1)
      {
        if (v27[2 * v38] == v37)
        {
LABEL_39:
          ++v29;
          int v40 = v39 - 1;
          v27[2 * v38 + 1] = v40;
          if (!v40)
          {
            int v41 = *(_DWORD *)(a3 + 8);
            uint64_t v42 = (-1640531535 * v37) >> -(char)v41;
            if (v27[2 * v42 + 1] != -1)
            {
              char v43 = 32 - v41;
              while (v27[2 * v42] != v37)
              {
                uint64_t v42 = *(_DWORD *)(a3 + 16) & (v42 + 1);
                if (v27[2 * v42 + 1] == -1) {
                  goto LABEL_51;
                }
              }
              unint64_t v44 = &v27[2 * v42];
              unsigned int v45 = *(_DWORD *)(a3 + 16);
              uint64_t v46 = v45 & (v42 + 1);
              int v47 = v27[2 * v46 + 1];
              if (v47 != -1)
              {
                unsigned int v48 = 1;
                do
                {
                  while (1)
                  {
                    int v49 = v27[2 * v46];
                    if (((v46 - ((-1640531535 * v49) >> v43)) & v45) >= v48) {
                      break;
                    }
                    ++v48;
                    uint64_t v46 = (v46 + 1) & v45;
                    int v47 = v27[2 * v46 + 1];
                    if (v47 == -1) {
                      goto LABEL_50;
                    }
                  }
                  *unint64_t v44 = v49;
                  v44[1] = v47;
                  unsigned int v48 = 1;
                  unint64_t v44 = &v27[2 * v46];
                  uint64_t v46 = (v46 + 1) & v45;
                  int v47 = v27[2 * v46 + 1];
                }
                while (v47 != -1);
              }
LABEL_50:
              v44[1] = -1;
            }
LABEL_51:
            v25 -= *(_DWORD *)(a2 + 4 * v37);
          }
          goto LABEL_23;
        }
        while (1)
        {
          uint64_t v38 = *(_DWORD *)(a3 + 16) & (v38 + 1);
          int v39 = v27[2 * v38 + 1];
          if (v39 == -1) {
            break;
          }
          if (v27[2 * v38] == v37) {
            goto LABEL_39;
          }
        }
      }
      uint64_t v30 = &v27[2 * v38];
      ++v29;
      _DWORD *v30 = v37;
      v30[1] = -1;
LABEL_23:
      if (v25 > v24)
      {
        unsigned int v24 = v25;
        unsigned int v23 = v18;
        unsigned int v22 = v29;
      }
      if (v18 == v19)
      {
        unsigned int v50 = v22;
        unsigned int v51 = v23;
        if (v22 == v23) {
          goto LABEL_63;
        }
        do
        {
          int v52 = *(_DWORD *)(a2 + 4 * *(unsigned int *)(v26 + 4 * v22));
          if (v51 >= v22) {
            unsigned int v53 = v22;
          }
          else {
            unsigned int v53 = v51;
          }
          BOOL v54 = v52 == 0;
          if (v52) {
            unsigned int v50 = v22 + 1;
          }
          unsigned int v55 = v22 + 1;
          if (!v54) {
            unsigned int v51 = v53;
          }
          ++v22;
        }
        while (v23 != v55);
        unsigned int v56 = v51;
        if (v51 != v50)
        {
          do
            *(_DWORD *)(a2 + 4 * *(unsigned int *)(v26 + 4 * v56++)) = 0;
          while (v50 != v56);
          unsigned int v23 = v50;
          if (v24) {
            goto LABEL_64;
          }
          goto LABEL_18;
        }
        unsigned int v23 = v51;
LABEL_63:
        if (!v24) {
          goto LABEL_18;
        }
LABEL_64:
        size_t v57 = a6[1];
        size_t v58 = v23 + ~v51 + v57;
        if (v6 >= v58) {
          size_t v59 = v58;
        }
        else {
          size_t v59 = v6;
        }
        if (v59 < v57) {
          goto LABEL_76;
        }
        v6 -= v59;
        memcpy((void *)(a4 + v6), (const void *)(*(void *)a1 + v51), v59);
        if (g_displayLevel >= 2 && (clock() - g_time > 0x249F0 || g_displayLevel >= 4))
        {
          g_time = clock();
          unsigned int v60 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%u%%       ", 100 * (v63 - v6) / v63);
          fflush(*v60);
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = 0;
        }
LABEL_19:
        unint64_t v16 = (v16 + 1) % v67;
        if (!v6) {
          goto LABEL_76;
        }
        goto LABEL_20;
      }
    }
    while (1)
    {
      uint64_t v32 = *(_DWORD *)(a3 + 16) & (v32 + 1);
      int v33 = v27[2 * v32 + 1];
      if (v33 == -1) {
        break;
      }
      if (v27[2 * v32] == v31) {
        goto LABEL_30;
      }
    }
LABEL_33:
    uint64_t v35 = 2 * v32;
    uint64_t v36 = (char *)&v27[2 * v32];
    *((_DWORD *)v36 + 1) = 0;
    unsigned int v34 = v36 + 4;
    v27[v35] = v31;
    goto LABEL_34;
  }
LABEL_18:
  if (++v17 < v65) {
    goto LABEL_19;
  }
LABEL_76:
  if (g_displayLevel >= 2)
  {
    unint64_t v61 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%79s\r", "");
    fflush(*v61);
  }
  return v6;
}

uint64_t ZDICT_finalizeDictionary(char *a1, unint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, int a11)
{
  v27[31] = *MEMORY[0x1E4F143B8];
  if (a9) {
    uint64_t v11 = a9;
  }
  else {
    uint64_t v11 = 3;
  }
  if (a2 < a4) {
    return -70;
  }
  if (a4 < 0x80) {
    return -72;
  }
  if (a2 < 0x100) {
    return -70;
  }
  __src[0] = -332356553;
  int v21 = ZSTD_XXH64(a3, a4) % 0x7FFF8000 + 0x8000;
  if (a11) {
    int v21 = a11;
  }
  __src[1] = v21;
  if (a10 >= 2)
  {
    unsigned int v22 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%70s\r", "");
    fflush(*v22);
    fwrite("statistics ... \n", 0x10uLL, 1uLL, *v22);
    fflush(*v22);
  }
  unint64_t v23 = ZDICT_analyzeEntropy((uint64_t)v27, 248, v11, a5, a6, a7, (uint64_t)a3, a4, a10);
  unint64_t v13 = v23;
  if (v23 <= 0xFFFFFFFFFFFFFF88)
  {
    size_t v24 = v23 + 8;
    if (v23 + 8 + a4 <= a2) {
      size_t v25 = a4;
    }
    else {
      size_t v25 = a2 - (v23 + 8);
    }
    unint64_t v13 = v25 + v24;
    memmove(&a1[v24], a3, v25);
    memcpy(a1, __src, v24);
  }
  return v13;
}

unint64_t COVER_checkTotalCompressedSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, const void *a7, unint64_t a8)
{
  if (*(double *)(a1 + 16) >= 1.0) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = a5;
  }
  unint64_t v15 = a6 - v14;
  if (a6 <= v14)
  {
    unint64_t v18 = 0;
    unint64_t v19 = 64;
    goto LABEL_24;
  }
  if (v15 >= 2)
  {
    unint64_t v16 = 0;
    unint64_t v20 = 0;
    unint64_t v17 = v14 + (v15 & 0xFFFFFFFFFFFFFFFELL);
    int v21 = (unint64_t *)(a2 + 8 * v14 + 8);
    unint64_t v22 = v15 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (*(v21 - 1) > v16) {
        unint64_t v16 = *(v21 - 1);
      }
      if (*v21 > v20) {
        unint64_t v20 = *v21;
      }
      v21 += 2;
      v22 -= 2;
    }
    while (v22);
    if (v16 <= v20) {
      unint64_t v16 = v20;
    }
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v16 = 0;
    unint64_t v17 = v14;
  }
  unint64_t v23 = a6 - v17;
  size_t v24 = (unint64_t *)(a2 + 8 * v17);
  do
  {
    unint64_t v26 = *v24++;
    unint64_t v25 = v26;
    if (v26 > v16) {
      unint64_t v16 = v25;
    }
    --v23;
  }
  while (v23);
LABEL_21:
  unint64_t v18 = v16 + (v16 >> 8);
  if (v16 >> 17) {
    unint64_t v19 = 0;
  }
  else {
    unint64_t v19 = (0x20000 - v16) >> 11;
  }
LABEL_24:
  unint64_t v27 = v18 + v19;
  int v28 = malloc_type_malloc(v18 + v19, 0x2575891FuLL);
  unsigned int v29 = malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
  unint64_t v30 = (unint64_t)v29;
  if (v29)
  {
    bzero(v29, 0xD00uLL);
    ZSTD_clearAllDicts(v30);
    *(void *)(v30 + 176) = 0;
    *(_OWORD *)(v30 + 144) = 0u;
    *(_OWORD *)(v30 + 160) = 0u;
    *(_OWORD *)(v30 + 112) = 0u;
    *(_OWORD *)(v30 + 128) = 0u;
    *(_OWORD *)(v30 + 80) = 0u;
    *(_OWORD *)(v30 + 96) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_OWORD *)(v30 + 16) = 0u;
    *(_OWORD *)(v30 + 32) = 0u;
    *(_DWORD *)(v30 + 60) = 3;
    *(_DWORD *)(v30 + 48) = 1;
  }
  int v31 = *(_DWORD *)(a1 + 32);
  memset(v54, 0, 28);
  ZSTD_getCParams_internal((uint64_t)v54, v31, -1, a8, 2);
  int v55 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  *(_OWORD *)unsigned int v56 = v54[0];
  *(_OWORD *)&v56[12] = *(_OWORD *)((char *)v54 + 12);
  long long v57 = 0u;
  LODWORD(v57) = 1;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = 0;
  CDict_advanced2 = ZSTD_createCDict_advanced2(a7, a8, 0, 0, (long long *)&v55, (uint64_t)&ZSTD_defaultCMem);
  if (!CDict_advanced2)
  {
    ZSTD_freeCCtx(v30);
    a8 = -1;
    if (!v28) {
      return a8;
    }
    goto LABEL_56;
  }
  int v33 = CDict_advanced2;
  if (v31) {
    int v34 = v31;
  }
  else {
    int v34 = 3;
  }
  *((_DWORD *)CDict_advanced2 + 1237) = v34;
  if (!v28 || !v30)
  {
    ZSTD_freeCCtx(v30);
    a8 = -1;
    uint64_t v46 = (void (*)(uint64_t))*((void *)v33 + 616);
    uint64_t v47 = *((void *)v33 + 617);
    int v49 = v33 + 32;
    unsigned int v48 = (char *)*((void *)v33 + 4);
    if (v48 > v33) {
      goto LABEL_53;
    }
LABEL_45:
    BOOL v50 = *((void *)v33 + 5) >= (unint64_t)v33;
    v49[2] = 0u;
    v49[3] = 0u;
    *int v49 = 0u;
    v49[1] = 0u;
    if (!v48) {
      goto LABEL_54;
    }
LABEL_46:
    if (!v46)
    {
      free(v48);
      if (v50) {
        goto LABEL_55;
      }
LABEL_61:
      free(v33);
      if (!v28) {
        return a8;
      }
      goto LABEL_56;
    }
    v46(v47);
    if (v50) {
      goto LABEL_55;
    }
LABEL_58:
    if (v46)
    {
      ((void (*)(uint64_t, char *))v46)(v47, v33);
      if (!v28) {
        return a8;
      }
      goto LABEL_56;
    }
    goto LABEL_61;
  }
  if (*(double *)(a1 + 16) >= 1.0) {
    unint64_t v35 = 0;
  }
  else {
    unint64_t v35 = a5;
  }
  BOOL v36 = a6 > v35;
  unint64_t v37 = a6 - v35;
  if (v36)
  {
    uint64_t v38 = 8 * v35;
    int v39 = (unint64_t *)(a2 + v38);
    int v40 = (uint64_t *)(a4 + v38);
    while (1)
    {
      uint64_t v42 = *v40++;
      uint64_t v41 = v42;
      unint64_t v44 = *v39++;
      size_t v43 = v44;
      unint64_t v45 = ZSTD_compressBegin_usingCDict_advanced(v30, (uint64_t)v33, 1, 0, v44);
      if (v45 > 0xFFFFFFFFFFFFFF88) {
        break;
      }
      unint64_t v45 = ZSTD_compressEnd((int *)v30, v28, v27, (char *)(a3 + v41), v43);
      if (v45 > 0xFFFFFFFFFFFFFF88) {
        break;
      }
      a8 += v45;
      if (!--v37) {
        goto LABEL_52;
      }
    }
    a8 = v45;
  }
LABEL_52:
  ZSTD_freeCCtx(v30);
  uint64_t v46 = (void (*)(uint64_t))*((void *)v33 + 616);
  uint64_t v47 = *((void *)v33 + 617);
  int v49 = v33 + 32;
  unsigned int v48 = (char *)*((void *)v33 + 4);
  if (v48 <= v33) {
    goto LABEL_45;
  }
LABEL_53:
  BOOL v50 = 0;
  v49[2] = 0u;
  v49[3] = 0u;
  *int v49 = 0u;
  v49[1] = 0u;
  if (v48) {
    goto LABEL_46;
  }
LABEL_54:
  if (!v50) {
    goto LABEL_58;
  }
LABEL_55:
  if (v28) {
LABEL_56:
  }
    free(v28);
  return a8;
}

double COVER_best_init(uint64_t a1)
{
  if (a1)
  {
    pthread_mutex_init((pthread_mutex_t *)a1, 0);
    pthread_cond_init((pthread_cond_t *)(a1 + 64), 0);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 184) = -1;
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
  }
  return result;
}

pthread_mutex_t *COVER_best_wait(pthread_mutex_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    pthread_mutex_lock(result);
    while (*(void *)&v1[1].__opaque[40])
      pthread_cond_wait((pthread_cond_t *)&v1[1], v1);
    return (pthread_mutex_t *)pthread_mutex_unlock(v1);
  }
  return result;
}

pthread_mutex_t *COVER_best_destroy(pthread_mutex_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    pthread_mutex_lock(result);
    while (*(void *)&v1[1].__opaque[40])
      pthread_cond_wait((pthread_cond_t *)&v1[1], v1);
    pthread_mutex_unlock(v1);
    uint64_t v2 = *(void **)&v1[1].__opaque[48];
    if (v2) {
      free(v2);
    }
    pthread_mutex_destroy(v1);
    return (pthread_mutex_t *)pthread_cond_destroy((pthread_cond_t *)&v1[1]);
  }
  return result;
}

pthread_mutex_t *COVER_best_start(pthread_mutex_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    pthread_mutex_lock(result);
    ++*(void *)&v1[1].__opaque[40];
    return (pthread_mutex_t *)pthread_mutex_unlock(v1);
  }
  return result;
}

pthread_mutex_t *COVER_best_finish(pthread_mutex_t *result, _OWORD *a2, uint64_t a3)
{
  if (!result) {
    return result;
  }
  unsigned int v4 = result;
  size_t v5 = *(void *)(a3 + 8);
  unint64_t v6 = *(void *)(a3 + 16);
  int v7 = *(const void **)a3;
  pthread_mutex_lock(result);
  uint64_t v8 = *(void *)&v4[1].__opaque[40] - 1;
  *(void *)&v4[1].__opaque[40] = v8;
  if (v6 >= *(void *)&v4[2].__opaque[48]) {
    goto LABEL_9;
  }
  unsigned int v9 = *(void **)&v4[1].__opaque[48];
  if (v9)
  {
    if (v4[2].__sig >= v5) {
      goto LABEL_7;
    }
    free(v9);
  }
  unsigned int v9 = malloc_type_malloc(v5, 0xEF4369FAuLL);
  *(void *)&v4[1].__opaque[48] = v9;
  if (v9)
  {
LABEL_7:
    if (v7)
    {
      memcpy(v9, v7, v5);
      v4[2].__sig = v5;
      long long v11 = a2[1];
      long long v10 = a2[2];
      *(_OWORD *)v4[2].__opaque = *a2;
      *(_OWORD *)&v4[2].__opaque[16] = v11;
      *(_OWORD *)&v4[2].__opaque[32] = v10;
      *(void *)&v4[2].__opaque[48] = v6;
    }
LABEL_9:
    if (!v8) {
      pthread_cond_broadcast((pthread_cond_t *)&v4[1]);
    }
    goto LABEL_13;
  }
  *(void *)&v4[2].__opaque[48] = -1;
  v4[2].__sig = 0;
  pthread_cond_signal((pthread_cond_t *)&v4[1]);
LABEL_13:

  return (pthread_mutex_t *)pthread_mutex_unlock(v4);
}

uint64_t COVER_dictSelectionError@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = result;
  return result;
}

BOOL COVER_dictSelectionIsError(void *a1)
{
  return a1[2] > 0xFFFFFFFFFFFFFF88 || *a1 == 0;
}

void COVER_dictSelectionFree(void **a1)
{
}

void COVER_selectDict(size_t size@<X1>, char *a2@<X0>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, long long *a10, uint64_t a11)
{
  unint64_t v18 = malloc_type_malloc(size, 0xE41D5588uLL);
  unint64_t v19 = malloc_type_malloc(size, 0xF02885DFuLL);
  unint64_t v20 = v19;
  if (!v18 || !v19)
  {
LABEL_13:
    free(v18);
    free(v20);
    *a9 = 0;
    a9[1] = 0;
    a9[2] = a3;
    return;
  }
  LODWORD(v11) = *((_DWORD *)a10 + 7);
  memcpy(v18, a2, a3);
  unsigned int v35 = a6;
  unint64_t v22 = ZDICT_finalizeDictionary((char *)v18, size, (unsigned int *)a2, a3, a4, a5, a6, v21, *((void *)a10 + 4), HIDWORD(*((void *)a10 + 4)), *((_DWORD *)a10 + 10));
  if (v22 >= 0xFFFFFFFFFFFFFF89)
  {
    free(v18);
    free(v20);
    *a9 = 0;
    a9[1] = 0;
    a9[2] = v22;
  }
  else
  {
    long long v23 = a10[1];
    long long v39 = *a10;
    long long v40 = v23;
    long long v41 = a10[2];
    unint64_t v24 = COVER_checkTotalCompressedSize((uint64_t)&v39, a5, a4, a11, a7, a8, v18, v22);
    unint64_t v25 = v24;
    if (v24 >= 0xFFFFFFFFFFFFFF89)
    {
      free(v18);
      free(v20);
      *a9 = 0;
      a9[1] = 0;
      a9[2] = v25;
    }
    else
    {
      if (*((_DWORD *)a10 + 6))
      {
        unint64_t v33 = v24;
        if (v22 >= 0x101)
        {
          int v34 = &a2[a3];
          double v26 = ((double)v11 / 100.0 + 1.0) * (double)v24;
          for (unint64_t i = 256; i < v22; unint64_t i = 2 * a3)
          {
            memcpy(v20, v18, v22);
            unint64_t v25 = v25 & 0xFFFFFFFF00000000 | *((unsigned int *)a10 + 10);
            a3 = ZDICT_finalizeDictionary((char *)v20, size, (unsigned int *)&v34[-i], i, a4, a5, v35, v28, *((void *)a10 + 4), HIDWORD(*((void *)a10 + 4)), v25);
            if (a3 >= 0xFFFFFFFFFFFFFF89) {
              goto LABEL_13;
            }
            long long v29 = a10[1];
            long long v39 = *a10;
            long long v40 = v29;
            long long v41 = a10[2];
            unint64_t v30 = COVER_checkTotalCompressedSize((uint64_t)&v39, a5, a4, a11, a7, a8, v20, a3);
            unint64_t v31 = v30;
            if (v30 >= 0xFFFFFFFFFFFFFF89)
            {
              free(v18);
              free(v20);
              *a9 = 0;
              a9[1] = 0;
              a9[2] = v31;
              return;
            }
            if (v26 >= (double)v30)
            {
              *a9 = v20;
              a9[1] = a3;
              a9[2] = v30;
              uint64_t v32 = v18;
              goto LABEL_18;
            }
          }
        }
        *a9 = v18;
        a9[1] = v22;
        a9[2] = v33;
      }
      else
      {
        *a9 = v18;
        a9[1] = v22;
        a9[2] = v24;
      }
      uint64_t v32 = v20;
LABEL_18:
      free(v32);
    }
  }
}

BOOL ZDICT_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

uint64_t ZDICT_optimizeTrainFromBuffer_cover(void *a1, unint64_t a2, uint64_t a3, int64x2_t *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (*(double *)(a6 + 16) <= 0.0) {
    double v6 = 1.0;
  }
  else {
    double v6 = *(double *)(a6 + 16);
  }
  unsigned int v8 = *(_DWORD *)a6;
  int v7 = *(_DWORD *)(a6 + 4);
  char v9 = v7 == 0;
  if (v7) {
    unsigned int v10 = *(_DWORD *)(a6 + 4);
  }
  else {
    unsigned int v10 = 6;
  }
  if (v7) {
    unsigned int v11 = *(_DWORD *)(a6 + 4);
  }
  else {
    unsigned int v11 = 8;
  }
  if (*(_DWORD *)(a6 + 8)) {
    unsigned int v12 = *(_DWORD *)(a6 + 8);
  }
  else {
    unsigned int v12 = 40;
  }
  if (v8) {
    unsigned int v13 = *(_DWORD *)a6;
  }
  else {
    unsigned int v13 = 50;
  }
  if (v8) {
    unsigned int v14 = *(_DWORD *)a6;
  }
  else {
    unsigned int v14 = 2000;
  }
  if (v8) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = 1950;
  }
  if (v15 / v12 <= 1) {
    unsigned int v16 = 1;
  }
  else {
    unsigned int v16 = v15 / v12;
  }
  int v17 = *(_DWORD *)(a6 + 36);
  if (v6 <= 0.0 || v6 > 1.0 || v13 < v11 || v14 < v13)
  {
    if (v17 >= 1)
    {
      uint64_t v21 = (FILE **)MEMORY[0x1E4F143C8];
      fwrite("Incorrect parameters\n", 0x15uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      fflush(*v21);
    }
    return -42;
  }
  if (!a5)
  {
    if (g_displayLevel >= 1)
    {
      long long v23 = (FILE **)MEMORY[0x1E4F143C8];
      fwrite("Cover must have at least one input file\n", 0x28uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      fflush(*v23);
    }
    return -72;
  }
  if (a2 <= 0xFF)
  {
    if (g_displayLevel >= 1)
    {
      unint64_t v19 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "dictBufferCapacity must be at least %u\n", 256);
      fflush(*v19);
    }
    return -70;
  }
  unsigned int v55 = v11;
  uint64_t v26 = *(unsigned int *)(a6 + 12);
  __dst = a1;
  unsigned int v50 = v13;
  if (v26 < 2)
  {
    advanced = 0;
  }
  else
  {
    advanced = POOL_create_advanced(v26, 1, &ZSTD_defaultCMem);
    if (!advanced) {
      return -64;
    }
  }
  uint64_t v56 = (uint64_t)advanced;
  memset(v67, 0, sizeof(v67));
  *(_OWORD *)uint64_t v66 = 0u;
  memset(&v65, 0, sizeof(v65));
  unsigned int v54 = (v15 / v16 + 1) << v9;
  memset(&v64, 0, sizeof(v64));
  pthread_mutex_init(&v64, 0);
  pthread_cond_init(&v65, 0);
  v66[0] = 0;
  v66[1] = 0;
  memset(v67, 0, 56);
  *((void *)&v67[3] + 1) = -1;
  int v28 = v17 - 1;
  if (!v17) {
    int v28 = 0;
  }
  g_displayLevel = v28;
  if (v17 >= 2)
  {
    long long v29 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Trying %u different sets of parameters\n", v54);
    fflush(*v29);
  }
  if (v10 > v55) {
    goto LABEL_50;
  }
  char v32 = 1;
  long long v33 = 0uLL;
  int v34 = 1;
  while (2)
  {
    int v57 = v34;
    uint64_t v63 = 0;
    *(_OWORD *)long long v61 = v33;
    *(_OWORD *)long long v62 = v33;
    long long v59 = v33;
    long long v60 = v33;
    *(_OWORD *)long long v58 = v33;
    if (v17 >= 3)
    {
      unsigned int v35 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "d=%u\n", v10);
      fflush(*v35);
    }
    unint64_t v36 = COVER_ctx_init((uint64_t)v58, a3, a4, a5, v10, v6);
    if (v36 >= 0xFFFFFFFFFFFFFF89)
    {
      uint64_t v20 = v36;
      if (v17 >= 1)
      {
        unsigned int v48 = (FILE **)MEMORY[0x1E4F143C8];
        fwrite("Failed to initialize context\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        fflush(*v48);
      }
      pthread_mutex_lock(&v64);
      while (v66[0])
        pthread_cond_wait(&v65, &v64);
      goto LABEL_113;
    }
    if ((v32 & 1) != 0 && v17 >= 1 && (double)(unint64_t)v61[1] / (double)a2 < 10.0)
    {
      unint64_t v37 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "WARNING: The maximum dictionary size %u is too large compared to the source size %u! size(source)/size(dictionary) = %f, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! \n", a2, LODWORD(v61[1]), (double)(unint64_t)v61[1] / (double)a2);
      fflush(*v37);
    }
    unsigned int v38 = v50;
    do
    {
      while (1)
      {
        long long v40 = (char *)malloc_type_malloc(0x48uLL, 0x1060040023D7745uLL);
        if (v17 >= 3)
        {
          long long v41 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "k=%u\n", v38);
          fflush(*v41);
        }
        if (!v40)
        {
          if (v17 >= 1)
          {
            uint64_t v47 = (FILE **)MEMORY[0x1E4F143C8];
            fwrite("Failed to allocate parameters\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            fflush(*v47);
          }
          pthread_mutex_lock(&v64);
          while (v66[0])
            pthread_cond_wait(&v65, &v64);
          pthread_mutex_unlock(&v64);
          if (v66[1]) {
            free(v66[1]);
          }
          pthread_mutex_destroy(&v64);
          pthread_cond_destroy(&v65);
          if (v61[0])
          {
            free(v61[0]);
            v61[0] = 0;
          }
          if (v62[0])
          {
            free(v62[0]);
            v62[0] = 0;
          }
          if (v62[1])
          {
            free(v62[1]);
            v62[1] = 0;
          }
          if (v58[1])
          {
            free(v58[1]);
            v58[1] = 0;
          }
          uint64_t v20 = -64;
          goto LABEL_116;
        }
        *(void *)long long v40 = v58;
        *((void *)v40 + 1) = &v64;
        *((void *)v40 + 2) = a2;
        long long v43 = *(_OWORD *)(a6 + 16);
        long long v42 = *(_OWORD *)(a6 + 32);
        *(_OWORD *)(v40 + 24) = *(_OWORD *)a6;
        *(_OWORD *)(v40 + 40) = v43;
        *(_OWORD *)(v40 + 56) = v42;
        *((_DWORD *)v40 + 6) = v38;
        *((_DWORD *)v40 + 7) = v10;
        *((double *)v40 + 5) = v6;
        *((_DWORD *)v40 + 8) = v12;
        *((_DWORD *)v40 + 12) = 0;
        int v44 = g_displayLevel;
        *((_DWORD *)v40 + 15) = g_displayLevel;
        if (!v10 || v38 > a2 || v10 > v38) {
          break;
        }
        pthread_mutex_lock(&v64);
        ++v66[0];
        pthread_mutex_unlock(&v64);
        if (v56)
        {
          POOL_add(v56, (uint64_t)COVER_tryParameters, (uint64_t)v40);
          int v45 = v57;
          if (v17 >= 2) {
            goto LABEL_80;
          }
        }
        else
        {
          COVER_tryParameters(v40);
          int v45 = v57;
          if (v17 >= 2)
          {
LABEL_80:
            if (clock() - g_time > 0x249F0 || v17 >= 4)
            {
              g_time = clock();
              long long v39 = (FILE **)MEMORY[0x1E4F143C8];
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%u%%       ", 100 * v45 / v54);
              fflush(*v39);
            }
          }
        }
        int v57 = v45 + 1;
        v38 += v16;
        if (v38 > v14) {
          goto LABEL_83;
        }
      }
      if (v44 >= 1)
      {
        uint64_t v46 = (FILE **)MEMORY[0x1E4F143C8];
        fwrite("Cover parameters incorrect\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        fflush(*v46);
      }
      free(v40);
      v38 += v16;
    }
    while (v38 <= v14);
LABEL_83:
    pthread_mutex_lock(&v64);
    while (v66[0])
      pthread_cond_wait(&v65, &v64);
    pthread_mutex_unlock(&v64);
    int v34 = v57;
    if (v61[0])
    {
      free(v61[0]);
      v61[0] = 0;
    }
    if (v62[0])
    {
      free(v62[0]);
      v62[0] = 0;
    }
    if (v62[1])
    {
      free(v62[1]);
      v62[1] = 0;
    }
    if (v58[1]) {
      free(v58[1]);
    }
    char v32 = 0;
    v10 += 2;
    long long v33 = 0uLL;
    if (v10 <= v55) {
      continue;
    }
    break;
  }
LABEL_50:
  if (v17 >= 2)
  {
    unint64_t v30 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%79s\r", "");
    fflush(*v30);
  }
  uint64_t v20 = *((void *)&v67[3] + 1);
  if (*((void *)&v67[3] + 1) < 0xFFFFFFFFFFFFFF89)
  {
    long long v31 = *(_OWORD *)((char *)&v67[1] + 8);
    *(_OWORD *)a6 = *(_OWORD *)((char *)v67 + 8);
    *(_OWORD *)(a6 + 16) = v31;
    *(_OWORD *)(a6 + 32) = *(_OWORD *)((char *)&v67[2] + 8);
    uint64_t v20 = *(void *)&v67[0];
    memcpy(__dst, v66[1], *(size_t *)&v67[0]);
    COVER_best_destroy(&v64);
    goto LABEL_116;
  }
  pthread_mutex_lock(&v64);
  while (v66[0])
    pthread_cond_wait(&v65, &v64);
LABEL_113:
  pthread_mutex_unlock(&v64);
  if (v66[1]) {
    free(v66[1]);
  }
  pthread_mutex_destroy(&v64);
  pthread_cond_destroy(&v65);
LABEL_116:
  POOL_free(v56);
  return v20;
}

void COVER_tryParameters(void *a1)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *((_DWORD *)a1 + 6);
  int v4 = *((_DWORD *)a1 + 7);
  long long v5 = *((_OWORD *)a1 + 3);
  long long v38 = *((_OWORD *)a1 + 2);
  long long v39 = v5;
  uint64_t v40 = *((void *)a1 + 8);
  size_t v6 = *((void *)a1 + 2);
  *(void *)&v37[4] = 0;
  int v7 = (char *)malloc_type_malloc(v6, 0xB39D0365uLL);
  unsigned int v8 = malloc_type_malloc(4 * *(void *)(v2 + 56), 0x100004052888210uLL);
  unsigned int v9 = __clz(v3 - v4 + 1) ^ 0x1F;
  unsigned int v36 = v9 + 2;
  *(void *)unint64_t v37 = (4 << v9);
  *(void *)&v37[4] = (*(_DWORD *)v37 - 1);
  size_t v10 = 8 * *(unsigned int *)v37;
  unsigned int v11 = malloc_type_malloc(v10, 0x100004000313F17uLL);
  unsigned int v12 = v11;
  unsigned int v35 = v11;
  if (!v11)
  {
    if (g_displayLevel >= 1)
    {
      long long v23 = (FILE *)*MEMORY[0x1E4F143C8];
      unint64_t v24 = "Failed to allocate dmer map: out of memory\n";
      size_t v25 = 43;
LABEL_15:
      fwrite(v24, v25, 1uLL, v23);
      uint64_t v20 = 0;
      unint64_t v19 = 0;
      uint64_t v21 = -1;
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v20 = 0;
    unint64_t v19 = 0;
    uint64_t v21 = -1;
    goto LABEL_18;
  }
  memset(v11, 255, v10);
  if (!v7 || !v8)
  {
    if (g_displayLevel >= 1)
    {
      long long v23 = (FILE *)*MEMORY[0x1E4F143C8];
      unint64_t v24 = "Failed to allocate buffers: out of memory\n";
      size_t v25 = 42;
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  memcpy(v8, *(const void **)(v2 + 64), 4 * *(void *)(v2 + 56));
  int v30 = v3;
  int v31 = v4;
  long long v32 = v38;
  long long v33 = v39;
  uint64_t v34 = v40;
  size_t v13 = COVER_buildDictionary(v2, (uint64_t)v8, (uint64_t)&v35, (uint64_t)v7, v6, &v30);
  long long v32 = v38;
  long long v33 = v39;
  unint64_t v15 = *(void *)(v2 + 24);
  unint64_t v14 = *(void *)(v2 + 32);
  uint64_t v17 = *(void *)(v2 + 8);
  uint64_t v16 = *(void *)(v2 + 16);
  uint64_t v18 = *(void *)v2;
  int v30 = v3;
  int v31 = v4;
  uint64_t v34 = v40;
  COVER_selectDict(v6, &v7[v13], v6 - v13, v18, v16, v14, v14, v15, &v27, (long long *)&v30, v17);
  unint64_t v19 = v27;
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  if (v27) {
    BOOL v22 = v29 > 0xFFFFFFFFFFFFFF88;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22 && g_displayLevel >= 1)
  {
    fwrite("Failed to select dictionary\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
LABEL_16:
    fflush((FILE *)*MEMORY[0x1E4F143C8]);
  }
LABEL_18:
  free(v7);
  uint64_t v26 = (pthread_mutex_t *)*((void *)a1 + 1);
  int v30 = v3;
  int v31 = v4;
  long long v32 = v38;
  long long v33 = v39;
  uint64_t v34 = v40;
  unint64_t v27 = v19;
  uint64_t v28 = v20;
  unint64_t v29 = v21;
  COVER_best_finish(v26, &v30, (uint64_t)&v27);
  free(a1);
  if (v12) {
    free(v12);
  }
  free(v19);

  free(v8);
}

uint64_t divsufsort(unsigned __int8 *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      unsigned int v5 = a3;
      if ((a3 & 0x80000000) == 0)
      {
        if (!a3) {
          return a3;
        }
        int v7 = a3 - 2;
        if (a3 != 2)
        {
          int v8 = a3 - 1;
          if (a3 == 1)
          {
            uint64_t v3 = 0;
            *a2 = 0;
            return v3;
          }
          unint64_t v14 = (char *)malloc_type_malloc(0x400uLL, 0x100004052888210uLL);
          unint64_t v15 = (int *)malloc_type_malloc(0x40000uLL, 0x100004052888210uLL);
          uint64_t v16 = v15;
          uint64_t v3 = 4294967294;
          if (v14 && v15)
          {
            if ((int)sort_typeBstar((uint64_t)a1, a2, v14, v15, v5) >= 1)
            {
              uint64_t v17 = 254;
              while (1)
              {
                uint64_t v18 = v17;
                int v19 = v17 + 1;
                int v20 = v17 << 8;
                uint64_t v21 = &a2[v16[v20 | v19]];
                BOOL v22 = &a2[*(int *)&v14[4 * v18 + 4] - 1];
                if (v21 <= v22) {
                  break;
                }
LABEL_17:
                uint64_t v17 = v18 - 1;
                if (!v18) {
                  goto LABEL_33;
                }
              }
              long long v23 = 0;
              int v24 = -1;
              while (1)
              {
                int v25 = *v22;
                *BOOL v22 = ~*v22;
                if (v25 < 1) {
                  goto LABEL_22;
                }
                unsigned int v26 = a1[v25 - 1];
                if (v25 == 1)
                {
                  int v27 = 0;
                  if (v24 != v26) {
                    goto LABEL_31;
                  }
                }
                else
                {
                  if (a1[v25 - 2] > v26) {
                    int v27 = -v25;
                  }
                  else {
                    int v27 = v25 - 1;
                  }
                  if (v24 != v26)
                  {
LABEL_31:
                    if ((v24 & 0x80000000) == 0) {
                      v16[v24 | v20] = (unint64_t)((char *)v23 - (char *)a2) >> 2;
                    }
                    long long v23 = &a2[v16[v20 | v26]];
                    int v24 = v26;
                  }
                }
                *v23-- = v27;
LABEL_22:
                if (v21 > --v22) {
                  goto LABEL_17;
                }
              }
            }
LABEL_33:
            uint64_t v28 = a1[v8];
            unint64_t v29 = &a2[*(int *)&v14[4 * v28]];
            if (a1[v7] < v28) {
              int v30 = -v5;
            }
            else {
              int v30 = v8;
            }
            *unint64_t v29 = v30;
            if (v5)
            {
              int v31 = &a2[v5];
              long long v32 = (unsigned int *)(v29 + 1);
              long long v33 = a2;
              do
              {
                while (1)
                {
                  int v34 = *v33;
                  unsigned int v35 = *v33 - 1;
                  if (*v33 >= 1) {
                    break;
                  }
                  *v33++ = ~v34;
                  if (v33 >= v31) {
                    goto LABEL_46;
                  }
                }
                unsigned int v36 = a1[v35];
                if (v34 == 1 || a1[v34 - 2] < v36) {
                  unsigned int v35 = -v34;
                }
                if (v28 != v36)
                {
                  *(_DWORD *)&v14[4 * v28] = (unint64_t)((char *)v32 - (char *)a2) >> 2;
                  long long v32 = (unsigned int *)&a2[*(int *)&v14[4 * v36]];
                  LODWORD(v28) = v36;
                }
                *v32++ = v35;
                ++v33;
              }
              while (v33 < v31);
            }
LABEL_46:
            uint64_t v3 = 0;
          }
          free(v16);
          free(v14);
          return v3;
        }
        uint64_t v3 = 0;
        unsigned int v9 = *a1;
        unsigned int v10 = a1[1];
        BOOL v11 = v9 >= v10;
        BOOL v12 = v9 < v10;
        unsigned int v13 = v11;
        a2[v13] = 0;
        a2[v12] = 1;
      }
    }
  }
  return v3;
}

uint64_t sort_typeBstar(uint64_t a1, int *a2, char *a3, _DWORD *a4, int a5)
{
  uint64_t v581 = *MEMORY[0x1E4F143B8];
  bzero(a3, 0x400uLL);
  bzero(a4, 0x40000uLL);
  int v9 = a5;
  int v548 = a5;
  if (a5 >= 1)
  {
    unint64_t v10 = *(unsigned __int8 *)(a1 + (a5 - 1));
    int v9 = a5;
    int v11 = a5 - 1;
LABEL_3:
    uint64_t v12 = v11;
    int v13 = v11 - 1;
    unint64_t v14 = v10;
    while (1)
    {
      unint64_t v15 = v14;
      int v11 = v13;
      ++*(_DWORD *)&a3[4 * v14];
      if (!v12) {
        break;
      }
      int v16 = v12 - 1;
      unint64_t v14 = *(unsigned __int8 *)(a1 - 1 + v12);
      --v13;
      --v12;
      if (v15 > v14)
      {
        ++*(_DWORD *)((char *)a4 + ((v14 << 10) | (4 * v15)));
        a2[--v9] = v16;
        if (v16 + 1 < 2) {
          break;
        }
        while (1)
        {
          unint64_t v10 = *(unsigned __int8 *)(a1 + --v11);
          if (v14 < v10) {
            goto LABEL_3;
          }
          ++*(_DWORD *)((char *)a4 + ((4 * v10) | (v14 << 10)));
          unint64_t v14 = v10;
          if (v11 <= 0) {
            goto LABEL_9;
          }
        }
      }
    }
  }
LABEL_9:
  uint64_t v546 = (a5 - 1);
  int v547 = a5 - 1;
  unint64_t v17 = 0;
  int v18 = 0;
  int v19 = 0;
  int v20 = 256;
  do
  {
    unint64_t v21 = v17;
    uint64_t v22 = 4 * v17;
    int v23 = *(_DWORD *)&a3[v22] + v19;
    *(_DWORD *)&a3[v22] = v18 + v19;
    int v19 = v23 + a4[v21 | (v21 << 8)];
    unint64_t v17 = v21 + 1;
    if (v21 <= 0xFE)
    {
      int v24 = v20;
      unsigned int v25 = v21 + 1;
      do
      {
        uint64_t v26 = v25 | (v21 << 8);
        v18 += a4[v26];
        a4[v26] = v18;
        v19 += a4[v24 | v21];
        ++v25;
        v24 += 256;
      }
      while (v25 != 256);
    }
    v20 += 256;
  }
  while (v21 != 255);
  uint64_t v557 = (a5 - v9);
  if ((int)v557 < 1) {
    return v557;
  }
  uint64_t v27 = 4 * (a5 - v9);
  uint64_t v28 = (uint64_t)&a2[a5 + v27 / 0xFFFFFFFFFFFFFFFCLL];
  unint64_t v29 = &a2[(unint64_t)v27 / 4];
  int v30 = v557 - 1;
  if (v557 != 1)
  {
    int v31 = (int *)((char *)a2 + 4 * v548 + 4 * (v557 - 2) - 4 * v557);
    int v32 = ~v9 + v548;
    do
    {
      uint64_t v33 = *v31--;
      unint64_t v34 = (4 * *(unsigned __int8 *)(a1 + v33 + 1)) | ((unint64_t)*(unsigned __int8 *)(a1 + v33) << 10);
      uint64_t v35 = *(int *)((char *)a4 + v34) - 1;
      *(_DWORD *)((char *)a4 + v34) = v35;
      a2[v35] = --v32;
    }
    while (v32 > 0);
  }
  unsigned int v36 = (unsigned __int8 *)(a1 + *(int *)(v28 + 4 * v30));
  unint64_t v37 = (4 * v36[1]) | ((unint64_t)*v36 << 10);
  int v38 = v548 - 2 * v557;
  uint64_t v39 = *(int *)((char *)a4 + v37) - 1;
  *(_DWORD *)((char *)a4 + v37) = v39;
  unsigned int v551 = a4;
  unint64_t v552 = a1 + 2 + v548 - 2;
  a2[v39] = v30;
  uint64_t v550 = v38;
  uint64_t v553 = a1 + 2;
  uint64_t v554 = a1 + 3;
  int v40 = 254;
  int v41 = v557;
  unsigned int v571 = a2;
  unsigned int v572 = v29;
  while (2)
  {
    int v42 = v40 << 8;
    int v43 = 255;
    int v555 = v40 << 8;
    int v556 = v40;
    while (2)
    {
      int v44 = v41;
      int v41 = a4[v43 | v42];
      if (v44 - v41 < 2) {
        goto LABEL_23;
      }
      int v45 = (char *)&a2[v44];
      uint64_t v46 = &a2[v41];
      int v49 = *v46;
      uint64_t v47 = v46 + 1;
      int v48 = v49;
      if (v49 == v30) {
        unsigned int v50 = v47;
      }
      else {
        unsigned int v50 = &a2[v41];
      }
      int v569 = a4[v43 | v42];
      int v567 = v43;
      unint64_t v558 = &a2[v41];
      uint64_t v559 = v47;
      int v565 = v48;
      if (v38 < 1024)
      {
        unint64_t v51 = v45 - (char *)v50;
        uint64_t v52 = (v45 - (char *)v50) >> 2;
        if (v52 > v550)
        {
          unint64_t v53 = v51 >> 2;
          if ((int)(v51 >> 2) >= 0x100000)
          {
            int v54 = 1024;
            goto LABEL_64;
          }
          if (v53 >= 0x10000)
          {
            if (BYTE3(v53))
            {
              int v70 = lg_table[BYTE3(v52)] + 24;
              if (v70 >= 16) {
                goto LABEL_53;
              }
            }
            else
            {
              int v70 = lg_table[WORD1(v52)] + 16;
              if (v70 >= 16) {
                goto LABEL_53;
              }
            }
          }
          else if ((v53 & 0xFF00) != 0)
          {
            int v70 = lg_table[v52 >> 8] + 8;
            if (v70 >= 16)
            {
LABEL_53:
              int v71 = sqq_table[(int)v53 >> ((v70 & 0xFE) - 6)] << ((v70 >> 1) - 7);
              if (v70 >= 0x18) {
                int v71 = (v71 + (int)v53 / v71 + 1) >> 1;
              }
              int v72 = (v71 + (int)v53 / v71 + 1) >> 1;
              goto LABEL_60;
            }
          }
          else
          {
            int v70 = *(_DWORD *)((char *)lg_table + (v51 & 0x3FC));
            if (v70 >= 16) {
              goto LABEL_53;
            }
          }
          if (v70 < 8)
          {
            int v54 = sqq_table[(int)v53] >> 4;
LABEL_64:
            if (v54 >= 1024) {
              int v73 = 1024;
            }
            else {
              int v73 = v54;
            }
            BOOL v74 = v54 <= v38;
            if (v54 > v38) {
              int v75 = v73;
            }
            else {
              int v75 = v38;
            }
            int v577 = v75;
            if (v74) {
              unint64_t v76 = (unint64_t)v29;
            }
            else {
              unint64_t v76 = (unint64_t)&v45[-4 * v73];
            }
            unint64_t v573 = (unint64_t)v45;
            unint64_t v575 = v76;
            if (v74) {
              unsigned int v55 = v45;
            }
            else {
              unsigned int v55 = &v45[-4 * v73];
            }
            if (v74) {
              int v77 = 0;
            }
            else {
              int v77 = v73;
            }
            int v561 = v77;
            unint64_t v563 = (char *)v50;
            if (v55 - (char *)v50 <= 4096) {
              goto LABEL_80;
            }
LABEL_33:
            unsigned int v56 = 0;
            do
            {
              ss_mintrosort(a1, v28, v50, (unint64_t)(v50 + 1024));
              unint64_t v58 = (v573 - (unint64_t)(v50 + 1024)) >> 2;
              unsigned int v579 = v50 + 1024;
              if (v577 >= (int)v58) {
                unint64_t v59 = v575;
              }
              else {
                unint64_t v59 = (unint64_t)(v50 + 1024);
              }
              uint64_t v60 = v28;
              uint64_t v61 = a1;
              if (v577 <= (int)v58) {
                int v62 = (v573 - (unint64_t)(v50 + 1024)) >> 2;
              }
              else {
                int v62 = v577;
              }
              if (v56)
              {
                int v63 = 1024;
                unsigned int v64 = v56;
                do
                {
                  unsigned int v65 = v64;
                  uint64_t v66 = 4 * v63;
                  unint64_t v67 = &v50[v66 / 0xFFFFFFFFFFFFFFFCLL];
                  ss_swapmerge(v61, v60, &v50[v66 / 0xFFFFFFFFFFFFFFFCLL], v50, (char *)&v50[(unint64_t)v66 / 4], v59, v62);
                  v63 *= 2;
                  unsigned int v64 = v65 >> 1;
                  unsigned int v50 = v67;
                }
                while ((v65 & 2) != 0);
              }
              ++v56;
              int v57 = v579;
              unsigned int v50 = v579;
              a1 = v61;
              uint64_t v28 = v60;
            }
            while (v55 - (char *)v579 > 4096);
            ss_mintrosort(a1, v60, v579, (unint64_t)v55);
            int v68 = 1024;
            int v38 = v548 - 2 * v557;
            a4 = v551;
            a2 = v571;
            do
            {
              if (v56)
              {
                unint64_t v69 = v57;
                v57 -= v68;
                ss_swapmerge(a1, v60, v57, v69, v55, v575, v577);
              }
              v68 *= 2;
              BOOL v74 = v56 > 1;
              v56 >>= 1;
            }
            while (v74);
            goto LABEL_81;
          }
          int v72 = (sqq_table[(int)v53 >> ((v70 & 0xFE) - 6)] >> (7 - (v70 >> 1))) + 1;
LABEL_60:
          int v54 = v72 - (v72 * v72 > (int)v53);
          goto LABEL_64;
        }
      }
      int v561 = 0;
      int v577 = v38;
      unint64_t v573 = (unint64_t)&a2[v44];
      unint64_t v575 = (unint64_t)v29;
      unsigned int v55 = (char *)v573;
      unint64_t v563 = (char *)v50;
      if (v45 - (char *)v50 > 4096) {
        goto LABEL_33;
      }
LABEL_80:
      ss_mintrosort(a1, v28, v50, (unint64_t)v55);
LABEL_81:
      int v30 = v557 - 1;
      if (!v561) {
        goto LABEL_145;
      }
      ss_mintrosort(a1, v28, (int *)v55, v573);
      unint64_t v78 = (char *)v573;
      do
      {
        int v79 = *((_DWORD *)v78 - 1);
        unint64_t v80 = (unint64_t)(v55 - v563) >> 2;
        if ((int)v80 >= 1)
        {
          unint64_t v81 = (int *)(v28 + 4 * (v79 ^ (v79 >> 31)));
          uint64_t v83 = *v81;
          uint64_t v82 = v81[1];
          unint64_t v84 = v553 + v82;
          BOOL v85 = v553 + v83 < (unint64_t)(v553 + v82);
          int v86 = -1;
          uint64_t v87 = v563;
          while (1)
          {
            unsigned int v91 = v80 >> 1;
            int32x4_t v92 = (int *)&v87[4 * (v80 >> 1)];
            unint64_t v93 = (int *)(v28 + 4 * (*v92 ^ (*v92 >> 31)));
            uint64_t v94 = *v93;
            uint64_t v95 = v93[1];
            uint64_t v96 = (unsigned __int8 *)(v553 + v94);
            unint64_t v97 = v553 + v95;
            BOOL v99 = v553 + v94 >= (unint64_t)(v553 + v95);
            BOOL v98 = v553 + v94 < (unint64_t)(v553 + v95);
            BOOL v99 = v99 || v553 + v83 >= v84;
            if (!v99) {
              break;
            }
            uint64_t v100 = (unsigned __int8 *)(v553 + v83);
            int v101 = v85;
            if (v98)
            {
LABEL_103:
              if (!v101)
              {
                int v88 = 1;
                goto LABEL_87;
              }
              int v104 = *v96;
              int v105 = *v100;
              goto LABEL_105;
            }
LABEL_86:
            int v88 = v101 << 31 >> 31;
LABEL_87:
            int32x4_t v89 = (char *)(v92 + 1);
            int v90 = (v80 | 0xFFFFFFFE) + 1;
            if (v88 < 0) {
              uint64_t v87 = v89;
            }
            LODWORD(v80) = (v90 & (v88 >> 31)) + v91;
            if (v88 >= 0) {
              int v86 = v88;
            }
            if ((int)v80 <= 0)
            {
              if (v87 >= v55) {
                goto LABEL_142;
              }
              if (!v86) {
                *(_DWORD *)uint64_t v87 = ~*(_DWORD *)v87;
              }
LABEL_111:
              unint64_t v108 = (unint64_t)(v55 - v87) >> 2;
              if ((int)v108 >= 1)
              {
                unint64_t v109 = (unint64_t)(v78 - v55) >> 2;
                if ((int)v109 >= 1)
                {
                  uint64_t v110 = v78;
                  unint64_t v111 = v87;
                  while (v108 != v109)
                  {
                    if (v108 >= v109)
                    {
                      do
                      {
                        int v117 = *(_DWORD *)v111;
                        v111 += 4;
                        int v116 = v117;
                        uint64_t v118 = v55;
                        do
                        {
                          *((_DWORD *)v111 - 1) = *(_DWORD *)v118;
                          int v119 = *(_DWORD *)v111;
                          v111 += 4;
                          *(_DWORD *)uint64_t v118 = v119;
                          v118 += 4;
                        }
                        while (v110 > v118);
                        *((_DWORD *)v111 - 1) = v116;
                        LODWORD(v108) = v108 + ~v109;
                      }
                      while ((int)v108 > (int)v109);
                    }
                    else
                    {
                      for (v110 -= 4; ; v110 -= 4)
                      {
                        int v112 = *(_DWORD *)v110;
                        long long v113 = v55 - 4;
                        do
                        {
                          long long v114 = v110;
                          int v115 = *((_DWORD *)v110 - 1);
                          v110 -= 4;
                          *(_DWORD *)long long v114 = *(_DWORD *)v113;
                          *(_DWORD *)long long v113 = v115;
                          v113 -= 4;
                        }
                        while (v113 >= v111);
                        *(_DWORD *)uint64_t v110 = v112;
                        LODWORD(v109) = v109 + ~v108;
                        if ((int)v109 <= (int)v108) {
                          break;
                        }
                      }
                    }
                    if ((int)v108 < 1 || (int)v109 <= 0) {
                      goto LABEL_140;
                    }
                  }
                  uint64_t v120 = (v109 - 1);
                  if (v120 < 7
                    || (v111 < &v55[4 * v120 + 4] ? (BOOL v121 = v55 >= &v111[4 * v120 + 4]) : (BOOL v121 = 1), !v121))
                  {
                    uint64_t v124 = v55;
                    uint64_t v125 = v111;
                    goto LABEL_138;
                  }
                  uint64_t v122 = v120 + 1;
                  uint64_t v123 = (v120 + 1) & 0x1FFFFFFF8;
                  LODWORD(v109) = v109 - v123;
                  uint64_t v124 = &v55[4 * v123];
                  uint64_t v125 = &v111[4 * v123];
                  unint64_t v126 = (long long *)(v111 + 16);
                  uint64_t v127 = (long long *)(v55 + 16);
                  uint64_t v128 = v123;
                  do
                  {
                    long long v129 = *(v126 - 1);
                    long long v130 = *v126;
                    long long v131 = *v127;
                    *(v126 - 1) = *(v127 - 1);
                    long long *v126 = v131;
                    *(v127 - 1) = v129;
                    *uint64_t v127 = v130;
                    v126 += 2;
                    v127 += 2;
                    v128 -= 8;
                  }
                  while (v128);
                  if (v122 != v123)
                  {
LABEL_138:
                    unsigned int v132 = v109 + 1;
                    do
                    {
                      int v133 = *(_DWORD *)v125;
                      *(_DWORD *)uint64_t v125 = *(_DWORD *)v124;
                      v125 += 4;
                      *(_DWORD *)uint64_t v124 = v133;
                      v124 += 4;
                      --v132;
                    }
                    while (v132 > 1);
                  }
                }
              }
LABEL_140:
              if (v87 != v563)
              {
                v78 -= v55 - v87;
                unsigned int v55 = v87;
                goto LABEL_142;
              }
              goto LABEL_145;
            }
          }
          uint64_t v102 = a1;
          while (1)
          {
            uint64_t v103 = v102 + v94;
            int v104 = *(unsigned __int8 *)(v102 + v94 + 2);
            int v105 = *(unsigned __int8 *)(v102 + v83 + 2);
            if (v104 != v105) {
              break;
            }
            unint64_t v106 = v102 + v83 + 3;
            int v101 = v106 < v84;
            ++v102;
            BOOL v107 = v103 + 3 < v97;
            if (v103 + 3 >= v97 || v106 >= v84)
            {
              uint64_t v100 = (unsigned __int8 *)(v102 + v83 + 2);
              uint64_t v96 = (unsigned __int8 *)(v102 + v94 + 2);
              if (!v107) {
                goto LABEL_86;
              }
              goto LABEL_103;
            }
          }
LABEL_105:
          int v88 = v104 - v105;
          goto LABEL_87;
        }
        uint64_t v87 = v563;
        if (v55 > v563) {
          goto LABEL_111;
        }
LABEL_142:
        v78 -= 4;
        if (v79 < 0)
        {
          do
          {
            int v134 = *((_DWORD *)v78 - 1);
            v78 -= 4;
          }
          while (v134 < 0);
        }
      }
      while (v55 != v78);
LABEL_145:
      unint64_t v29 = v572;
      int v42 = v555;
      int v40 = v556;
      int v41 = v569;
      int v43 = v567;
      if (v565 == v557 - 1)
      {
        char v135 = v559;
        int v136 = *v558;
        if ((unint64_t)v559 < v573)
        {
          uint64_t v137 = *(int *)(v28 + 4 * v136);
          if (v553 + v137 >= v552)
          {
            do
            {
              if ((*v135 & 0x80000000) == 0) {
                break;
              }
              *(v135 - 1) = *v135;
              ++v135;
            }
            while ((unint64_t)v135 < v573);
          }
          else
          {
            unint64_t v138 = (unsigned __int8 *)(v554 + v137);
            do
            {
              uint64_t v139 = *v135;
              if ((v139 & 0x80000000) == 0)
              {
                unint64_t v140 = (int *)(v28 + 4 * v139);
                uint64_t v141 = *v140;
                unint64_t v142 = v553 + v140[1];
                if (v553 + v141 < v142)
                {
                  BOOL v143 = (unsigned __int8 *)(v554 + v141);
                  uint64_t v144 = v138;
                  do
                  {
                    uint64_t v145 = v143;
                    unint64_t v146 = v144;
                    unsigned int v147 = *(v144 - 1);
                    unsigned int v148 = *(v143 - 1);
                    if (v147 != v148) {
                      goto LABEL_152;
                    }
                    BOOL v143 = v145 + 1;
                    uint64_t v144 = v146 + 1;
                  }
                  while ((unint64_t)v146 < v552 && (unint64_t)v145 < v142);
                  if ((unint64_t)v146 >= v552) {
                    break;
                  }
                  if ((unint64_t)v145 < v142)
                  {
                    unsigned int v147 = *v146;
                    unsigned int v148 = *v145;
LABEL_152:
                    if (v147 <= v148) {
                      break;
                    }
                  }
                }
              }
              *(v135++ - 1) = v139;
            }
            while ((unint64_t)v135 < v573);
          }
        }
        *(v135 - 1) = v136;
      }
LABEL_23:
      if (v40 < --v43) {
        continue;
      }
      break;
    }
    --v40;
    if (v41 > 0) {
      continue;
    }
    break;
  }
  uint64_t v149 = a2 - 1;
  unsigned int v150 = v30;
  do
  {
    uint64_t v151 = a2[v150];
    if ((v151 & 0x80000000) == 0)
    {
      int v152 = 0;
      uint64_t v153 = v150;
      while (1)
      {
        v29[v151] = v150 + v152;
        if (!(v153 * 4)) {
          break;
        }
        uint64_t v151 = v149[v153--];
        --v152;
        if ((v151 & 0x80000000) != 0)
        {
          v150 += v152;
          v149[v153 + 2] = v152;
          if (v150 + 1 < 2) {
            goto LABEL_174;
          }
          goto LABEL_171;
        }
      }
      *a2 = ~v150;
      unsigned int v159 = v557;
      if (v557 < 0x10000) {
        goto LABEL_175;
      }
      goto LABEL_179;
    }
LABEL_171:
    uint64_t v154 = &a2[v150];
    LODWORD(v155) = *v154;
    int v156 = v150 + 1;
    do
    {
      int v157 = ~v155;
      *uint64_t v154 = v157;
      v29[v157] = v150;
      unsigned int v158 = *--v154;
      uint64_t v155 = v158;
      --v156;
    }
    while ((v158 & 0x80000000) != 0);
    v29[v155] = v150;
    unsigned int v150 = v156 - 2;
  }
  while (v156 > 1);
LABEL_174:
  unsigned int v159 = v557;
  if (v557 < 0x10000)
  {
LABEL_175:
    if ((v159 & 0xFF00) != 0)
    {
      int v160 = lg_table[v159 >> 8] + 8;
      int v161 = -v159;
      int v162 = *a2;
      int v560 = v161;
      if (*a2 <= v161) {
        goto LABEL_767;
      }
    }
    else
    {
      int v160 = lg_table[v159];
      int v165 = -v159;
      int v162 = *a2;
      int v560 = v165;
      if (*a2 <= v165) {
        goto LABEL_767;
      }
    }
    goto LABEL_185;
  }
LABEL_179:
  if (HIBYTE(v159))
  {
    int v160 = lg_table[HIBYTE(v159)] + 24;
    int v164 = -v159;
    int v162 = *a2;
    int v560 = v164;
    if (*a2 <= v164) {
      goto LABEL_767;
    }
  }
  else
  {
    int v160 = lg_table[HIWORD(v159)] + 16;
    int v163 = -v159;
    int v162 = *a2;
    int v560 = v163;
    if (*a2 <= v163) {
      goto LABEL_767;
    }
  }
LABEL_185:
  long long v166 = (char *)(v29 + 1);
  int v167 = 2 * v160 / 3;
  uint64_t v168 = a2 + 1;
  uint64_t v169 = -(uint64_t)a2;
  uint64_t v578 = 4 - (void)a2;
  int v170 = v557;
  uint64_t v564 = a2 + 1;
  uint64_t v566 = a1;
  while (2)
  {
    LODWORD(v171) = 0;
    int v570 = 0;
    int64_t v562 = v166 - (char *)v29;
    uint64_t v172 = (int)((v166 - (char *)v29) >> 2);
    int8x16x2_t v173 = a2;
    unsigned int v568 = v166;
LABEL_190:
    if (v162 < 0)
    {
      uint64_t v174 = &v173[-v162];
      LODWORD(v171) = v171 + v162;
LABEL_188:
      if (v174 >= v29)
      {
        if (v171) {
          v174[(int)v171] = v171;
        }
        if (!v570) {
          goto LABEL_767;
        }
LABEL_764:
        v166 += v562;
        int v162 = *a2;
        if (*a2 <= v560) {
          goto LABEL_767;
        }
        continue;
      }
LABEL_189:
      int v162 = *v174;
      int8x16x2_t v173 = v174;
      goto LABEL_190;
    }
    break;
  }
  if (v171) {
    v173[(int)v171] = v171;
  }
  uint64_t v174 = &v168[v29[v162]];
  unint64_t v175 = (char *)v174 - (char *)v173;
  if ((char *)v174 - (char *)v173 < 5)
  {
    if (v175 == 4) {
      LODWORD(v171) = -1;
    }
    else {
      LODWORD(v171) = 0;
    }
    goto LABEL_188;
  }
  unint64_t v176 = v175 >> 2;
  if ((v175 >> 2) >= 0x10000)
  {
    if (BYTE3(v176)) {
      int v177 = lg_table[(v175 >> 26)] + 24;
    }
    else {
      int v177 = lg_table[(unsigned __int16)(v175 >> 18)] + 16;
    }
  }
  else if ((v176 & 0xFF00) != 0)
  {
    int v177 = lg_table[(v175 >> 10) & 0xFFFFFF] + 8;
  }
  else
  {
    int v177 = *(_DWORD *)((char *)lg_table + (v175 & 0x3FC));
  }
  int v178 = 0;
  uint64_t v179 = 0;
  uint64_t v180 = 0xFFFFFFFFLL;
  unsigned int v574 = v173;
  uint64_t v576 = v174;
  size_t v181 = v173;
  unint64_t v182 = (unint64_t)v174;
  float64x2x2_t v183 = v166;
  while (1)
  {
LABEL_209:
    while (1)
    {
      uint64_t v186 = v179;
      uint64_t v187 = v183;
      unint64_t v188 = v182;
      uint64_t v189 = v181;
      if ((v177 & 0x80000000) == 0) {
        break;
      }
      if (v177 == -2)
      {
        long long v224 = &v580[2 * (int)v179 - 2];
        uint64_t v226 = *((void *)v224 + 1);
        unint64_t v225 = *((void *)v224 + 2);
        unint64_t v29 = v572;
        if (*((_DWORD *)v224 + 6))
        {
          a2 = v571;
          if ((v180 & 0x80000000) == 0) {
            DWORD2(v580[2 * v180 + 1]) = -1;
          }
          unint64_t v227 = (unint64_t)(v183 - (char *)v572) >> 2;
          int v228 = ((v225 - (unint64_t)v571) >> 2) - 1;
          unint64_t v229 = (char *)(v226 - 4);
          int v230 = -1;
          if (v226 - 4 >= (unint64_t)v181)
          {
            int v356 = -1;
            uint64_t v357 = v181;
            do
            {
              uint64_t v358 = *v357;
              uint64_t v359 = (v358 - v227);
              if ((int)v358 - (int)v227 >= 0 && v572[v359] == v228)
              {
                *((_DWORD *)v229 + 1) = v359;
                v229 += 4;
                int v360 = v572[v358];
                if (v356 != v360) {
                  int v230 = (unint64_t)(v229 - (char *)v571) >> 2;
                }
                v572[v359] = v230;
                int v356 = v360;
              }
              ++v357;
            }
            while (v357 <= (int *)v229);
          }
          if (v229 >= (char *)v181)
          {
            unint64_t v361 = (unint64_t)&v229[v169];
            int v362 = -1;
            unint64_t v363 = (int *)v229;
            do
            {
              uint64_t v364 = *v363;
              int v365 = v572[v364];
              if (v362 != v365) {
                int v230 = v361 >> 2;
              }
              if (v230 != v365) {
                v572[v364] = v230;
              }
              --v363;
              v361 -= 4;
              int v362 = v365;
            }
            while (v363 >= v181);
          }
          unint64_t v231 = (unint64_t)(v229 + 4);
          if ((unint64_t)(v229 + 4) < v225)
          {
            size_t v232 = (int *)(v182 - 4);
            int v233 = -1;
            do
            {
              uint64_t v235 = *v232--;
              uint64_t v234 = v235;
              uint64_t v236 = (v235 - v227);
              if ((int)v235 - (int)v227 >= 0 && v572[v236] == v228)
              {
                *(_DWORD *)(v225 - 4) = v236;
                v225 -= 4;
                int v237 = v572[v234];
                if (v233 != v237) {
                  int v230 = (v225 - (unint64_t)v571) >> 2;
                }
                v572[v236] = v230;
                int v233 = v237;
              }
            }
            while (v231 < v225);
          }
        }
        else
        {
          unint64_t v348 = (unint64_t)(v183 - (char *)v572) >> 2;
          a2 = v571;
          int v349 = ((v225 - (unint64_t)v571) >> 2) - 1;
          unint64_t v350 = v226 - 4;
          if (v350 >= (unint64_t)v181)
          {
            do
            {
              uint64_t v353 = (*v189 - v348);
              if (*v189 - (int)v348 >= 0 && v572[v353] == v349)
              {
                *(_DWORD *)(v350 + 4) = v353;
                v350 += 4;
                v572[v353] = (v350 - (unint64_t)v571) >> 2;
              }
              ++v189;
            }
            while ((unint64_t)v189 <= v350);
          }
          unint64_t v351 = v350 + 4;
          if (v351 < v225)
          {
            unint64_t v352 = (int *)(v182 - 4);
            do
            {
              int v354 = *v352--;
              uint64_t v355 = (v354 - v348);
              if (v354 - (int)v348 >= 0 && v572[v355] == v349)
              {
                *(_DWORD *)(v225 - 4) = v355;
                v225 -= 4;
                v572[v355] = (v225 - (unint64_t)v571) >> 2;
              }
            }
            while (v351 < v225);
          }
        }
        if (v179 == 1) {
          goto LABEL_753;
        }
        uint64_t v179 = (int)v179 - 2;
        goto LABEL_208;
      }
      unint64_t v29 = v572;
      if (v177 == -1)
      {
        uint64_t v203 = &v183[-4 * v172];
        int v204 = ((v182 - (unint64_t)v571) >> 2) - 1;
        int v205 = v181;
        do
        {
          size_t v206 = (char *)v205;
          if ((unint64_t)v205 >= v182) {
            goto LABEL_336;
          }
          ++v205;
          int v207 = *(_DWORD *)&v203[4 * *(int *)v206];
        }
        while (v207 == v204);
        if (v207 >= v204)
        {
LABEL_336:
          int v205 = (int *)v206;
          goto LABEL_337;
        }
        for (; (unint64_t)v205 < v182; ++v205)
        {
          uint64_t v222 = *v205;
          int v223 = *(_DWORD *)&v203[4 * v222];
          if (v223 > v204) {
            break;
          }
          if (v223 == v204)
          {
            int *v205 = *(_DWORD *)v206;
            *(_DWORD *)size_t v206 = v222;
            v206 += 4;
          }
        }
LABEL_337:
        unint64_t v275 = (int *)(v182 - 4);
        while (1)
        {
          unint64_t v276 = v275;
          if (v205 >= v275) {
            break;
          }
          --v275;
          int v277 = *(_DWORD *)&v203[4 * *v276];
          if (v277 != v204)
          {
            if (v277 <= v204)
            {
              unint64_t v275 = v276;
            }
            else
            {
              for (; v205 < v275; --v275)
              {
                uint64_t v278 = *v275;
                int v279 = *(_DWORD *)&v203[4 * v278];
                if (v279 < v204) {
                  break;
                }
                if (v279 == v204)
                {
                  *unint64_t v275 = *v276;
                  *v276-- = v278;
                }
              }
            }
            break;
          }
        }
        while (v205 < v275)
        {
          int v366 = *v205;
          *v205++ = *v275;
          *unint64_t v275 = v366;
          while (v205 < v275)
          {
            uint64_t v367 = *v205;
            int v368 = *(_DWORD *)&v203[4 * v367];
            if (v368 > v204) {
              break;
            }
            if (v368 == v204)
            {
              int *v205 = *(_DWORD *)v206;
              *(_DWORD *)size_t v206 = v367;
              v206 += 4;
            }
            ++v205;
          }
          while (v205 < --v275)
          {
            uint64_t v369 = *v275;
            int v370 = *(_DWORD *)&v203[4 * v369];
            if (v370 < v204) {
              break;
            }
            if (v370 == v204)
            {
              *unint64_t v275 = *v276;
              *v276-- = v369;
            }
          }
        }
        size_t v181 = (int *)v182;
        unint64_t v182 = (unint64_t)v189;
        if (v206 <= (char *)v276)
        {
          unint64_t v371 = (unint64_t)(v206 - (char *)v189) >> 2;
          uint64_t v372 = ((char *)v205 - v206) >> 2;
          if ((int)v371 >= (int)v372) {
            uint64_t v373 = v372;
          }
          else {
            uint64_t v373 = v371;
          }
          uint64_t v374 = (v373 - 1);
          if ((int)v373 >= 1)
          {
            unint64_t v375 = &v205[-v373];
            if (v373 < 8)
            {
              uint64_t v376 = v189;
              goto LABEL_552;
            }
            BOOL v409 = v189 >= &v205[v374 - v373 + 1] || v375 >= &v189[v374 + 1];
            uint64_t v376 = v189;
            if (!v409) {
              goto LABEL_552;
            }
            uint64_t v410 = v373 & 0xFFFFFFF8;
            unint64_t v375 = (int *)((char *)v375 + v410 * 4);
            uint64_t v376 = &v189[v410];
            unint64_t v411 = (long long *)(v189 + 4);
            unint64_t v412 = &v205[-v373 + 4];
            uint64_t v413 = v373 & 0xFFFFFFF8;
            do
            {
              long long v414 = *(v411 - 1);
              long long v415 = *v411;
              long long v416 = *(_OWORD *)v412;
              *(v411 - 1) = *((_OWORD *)v412 - 1);
              *unint64_t v411 = v416;
              *((_OWORD *)v412 - 1) = v414;
              *(_OWORD *)unint64_t v412 = v415;
              v411 += 2;
              v412 += 8;
              v413 -= 8;
            }
            while (v413);
            BOOL v519 = (v373 & 0x7FFFFFF8) == v373;
            LODWORD(v373) = v373 - (v373 & 0xFFFFFFF8);
            if (!v519)
            {
LABEL_552:
              unsigned int v417 = v373 + 1;
              do
              {
                int v418 = *v376;
                *v376++ = *v375;
                *v375++ = v418;
                --v417;
              }
              while (v417 > 1);
            }
          }
          uint64_t v419 = v276 - (v205 - 1);
          int v420 = ((v188 - (unint64_t)v276) >> 2) - 1;
          if (v420 >= (int)v419) {
            uint64_t v421 = v419;
          }
          else {
            uint64_t v421 = v420;
          }
          uint64_t v422 = (v421 - 1);
          if ((int)v421 >= 1)
          {
            uint64_t v423 = (int *)(v188 - 4 * v421);
            if (v421 < 8
              || ((unint64_t)v205 < v188 + 4 * (v422 - v421) + 4
                ? (BOOL v424 = v423 >= &v205[v422 + 1])
                : (BOOL v424 = 1),
                  !v424))
            {
              int v425 = v421;
              uint64_t v427 = v205;
              goto LABEL_569;
            }
            int v425 = v421 - (v421 & 0xFFFFFFF8);
            uint64_t v426 = v421 & 0xFFFFFFF8;
            uint64_t v423 = (int *)((char *)v423 + v426 * 4);
            uint64_t v427 = &v205[v426];
            int v428 = (long long *)(v205 + 4);
            int v429 = (long long *)(v188 - 4 * v421 + 16);
            uint64_t v430 = v421 & 0xFFFFFFF8;
            do
            {
              long long v431 = *(v428 - 1);
              long long v432 = *v428;
              long long v433 = *v429;
              *(v428 - 1) = *(v429 - 1);
              *int v428 = v433;
              *(v429 - 1) = v431;
              *int v429 = v432;
              v428 += 2;
              v429 += 2;
              v430 -= 8;
            }
            while (v430);
            if ((v421 & 0x7FFFFFF8) != v421)
            {
LABEL_569:
              unsigned int v434 = v425 + 1;
              do
              {
                int v435 = *v427;
                *v427++ = *v423;
                *v423++ = v435;
                --v434;
              }
              while (v434 > 1);
            }
          }
          unint64_t v182 = (unint64_t)&v189[v372];
          size_t v181 = (int *)(v188 - 4 * v419);
        }
        if (v182 < v188 && (unint64_t)v189 < v182)
        {
          unsigned int v436 = v189;
          do
          {
            uint64_t v437 = *v436++;
            v572[v437] = ((v182 - (unint64_t)v571) >> 2) - 1;
          }
          while ((unint64_t)v436 < v182);
        }
        if ((unint64_t)v181 < v188 && v182 < (unint64_t)v181)
        {
          unint64_t v438 = (int *)v182;
          do
          {
            uint64_t v439 = *v438++;
            v572[v439] = ((unint64_t)((char *)v181 - (char *)v571) >> 2) - 1;
          }
          while (v438 < v181);
        }
        if ((uint64_t)((uint64_t)v181 - v182) >= 5)
        {
          signed int v440 = &v580[2 * (int)v179];
          *(void *)signed int v440 = 0;
          *((void *)v440 + 1) = v182;
          *((void *)v440 + 2) = v181;
          *((void *)v440 + 3) = 0;
          *((void *)v440 + 4) = v203;
          *((void *)v440 + 5) = v189;
          *((void *)v440 + 6) = v188;
          uint64_t v179 = (v179 + 2);
          *((_DWORD *)v440 + 14) = -2;
          *((_DWORD *)v440 + 15) = v180;
          unint64_t v441 = v182 - (void)v189;
          uint64_t v442 = (uint64_t)(v182 - (void)v189) >> 2;
          unint64_t v443 = v188 - (void)v181;
          uint64_t v444 = (uint64_t)(v188 - (void)v181) >> 2;
          if (v442 <= v444) {
            goto LABEL_582;
          }
LABEL_589:
          if ((uint64_t)v443 >= 5)
          {
            uint64_t v450 = (char **)&v580[2 * (int)v179];
            *uint64_t v450 = v187;
            v450[1] = (char *)v189;
            v450[2] = (char *)v182;
            unint64_t v451 = v441 >> 2;
            if ((v441 >> 2) >= 0x10000)
            {
              if (BYTE3(v451))
              {
                unsigned int v491 = &v580[2 * (int)v179];
                uint64_t v179 = (v179 + 1);
                *((_DWORD *)v491 + 6) = lg_table[(v441 >> 26)] + 24;
                *((_DWORD *)v491 + 7) = v186;
                unint64_t v453 = v443 >> 2;
                if ((v443 >> 2) >= 0x10000) {
                  goto LABEL_613;
                }
              }
              else
              {
                unsigned int v459 = &v580[2 * (int)v179];
                uint64_t v179 = (v179 + 1);
                *((_DWORD *)v459 + 6) = lg_table[(unsigned __int16)(v441 >> 18)] + 16;
                *((_DWORD *)v459 + 7) = v186;
                unint64_t v453 = v443 >> 2;
                if ((v443 >> 2) >= 0x10000) {
                  goto LABEL_613;
                }
              }
            }
            else
            {
              if ((v451 & 0xFF00) != 0)
              {
                uint64_t v452 = &v580[2 * (int)v179];
                uint64_t v179 = (v179 + 1);
                *((_DWORD *)v452 + 6) = lg_table[(v441 >> 10) & 0xFFFFFF] + 8;
                *((_DWORD *)v452 + 7) = v186;
                unint64_t v453 = v443 >> 2;
                if ((v443 >> 2) < 0x10000) {
                  goto LABEL_593;
                }
LABEL_613:
                if (!BYTE3(v453))
                {
                  uint64_t v460 = (unsigned __int16)(v443 >> 18);
                  goto LABEL_682;
                }
                uint64_t v492 = (v443 >> 26);
LABEL_734:
                int v177 = lg_table[v492] + 24;
                unint64_t v182 = v188;
                goto LABEL_738;
              }
              signed int v494 = &v580[2 * (int)v179];
              uint64_t v179 = (v179 + 1);
              *((_DWORD *)v494 + 6) = *(_DWORD *)((char *)lg_table + (v441 & 0x3FC));
              *((_DWORD *)v494 + 7) = v186;
              unint64_t v453 = v443 >> 2;
              if ((v443 >> 2) >= 0x10000) {
                goto LABEL_613;
              }
            }
LABEL_593:
            if ((v453 & 0xFF00) != 0)
            {
              uint64_t v454 = (v443 >> 10) & 0xFFFFFF;
LABEL_599:
              int v177 = lg_table[v454] + 8;
              unint64_t v182 = v188;
              goto LABEL_738;
            }
            goto LABEL_678;
          }
          if ((uint64_t)v441 < 5)
          {
LABEL_605:
            if (!v179) {
              goto LABEL_759;
            }
            uint64_t v184 = (int)v179;
            goto LABEL_207;
          }
          unint64_t v456 = v441 >> 2;
          if ((v441 >> 2) < 0x10000)
          {
            if ((v456 & 0xFF00) != 0)
            {
              uint64_t v449 = v442 >> 8;
LABEL_604:
              int v177 = lg_table[v449] + 8;
LABEL_737:
              size_t v181 = v189;
              goto LABEL_738;
            }
LABEL_679:
            int v177 = *(_DWORD *)((char *)lg_table + (v441 & 0x3FC));
            goto LABEL_737;
          }
          if (!BYTE3(v456))
          {
            uint64_t v458 = WORD1(v442);
            goto LABEL_685;
          }
          uint64_t v490 = BYTE3(v442);
          goto LABEL_736;
        }
        uint64_t v186 = v180;
        unint64_t v441 = v182 - (void)v189;
        uint64_t v442 = (uint64_t)(v182 - (void)v189) >> 2;
        unint64_t v443 = v188 - (void)v181;
        uint64_t v444 = (uint64_t)(v188 - (void)v181) >> 2;
        if (v442 > v444) {
          goto LABEL_589;
        }
LABEL_582:
        if ((uint64_t)v441 < 5)
        {
          if ((uint64_t)v443 < 5) {
            goto LABEL_605;
          }
          unint64_t v455 = v443 >> 2;
          if ((v443 >> 2) >= 0x10000)
          {
            if (BYTE3(v455))
            {
              uint64_t v492 = BYTE3(v444);
              goto LABEL_734;
            }
            uint64_t v460 = WORD1(v444);
LABEL_682:
            int v177 = lg_table[v460] + 16;
            unint64_t v182 = v188;
LABEL_738:
            float64x2x2_t v183 = v187;
            uint64_t v180 = v186;
            continue;
          }
          if ((v455 & 0xFF00) != 0)
          {
            uint64_t v454 = v444 >> 8;
            goto LABEL_599;
          }
LABEL_678:
          int v177 = *(_DWORD *)((char *)lg_table + (v443 & 0x3FC));
          unint64_t v182 = v188;
          goto LABEL_738;
        }
        unsigned int v445 = (char **)&v580[2 * (int)v179];
        *unsigned int v445 = v187;
        v445[1] = (char *)v181;
        v445[2] = (char *)v188;
        unint64_t v446 = v443 >> 2;
        if ((v443 >> 2) >= 0x10000)
        {
          if (BYTE3(v446))
          {
            int v489 = &v580[2 * (int)v179];
            uint64_t v179 = (v179 + 1);
            *((_DWORD *)v489 + 6) = lg_table[(v443 >> 26)] + 24;
            *((_DWORD *)v489 + 7) = v186;
            unint64_t v448 = v441 >> 2;
            if ((v441 >> 2) >= 0x10000) {
              goto LABEL_609;
            }
          }
          else
          {
            uint64_t v457 = &v580[2 * (int)v179];
            uint64_t v179 = (v179 + 1);
            *((_DWORD *)v457 + 6) = lg_table[(unsigned __int16)(v443 >> 18)] + 16;
            *((_DWORD *)v457 + 7) = v186;
            unint64_t v448 = v441 >> 2;
            if ((v441 >> 2) >= 0x10000) {
              goto LABEL_609;
            }
          }
        }
        else
        {
          if ((v446 & 0xFF00) != 0)
          {
            uint64_t v447 = &v580[2 * (int)v179];
            uint64_t v179 = (v179 + 1);
            *((_DWORD *)v447 + 6) = lg_table[(v443 >> 10) & 0xFFFFFF] + 8;
            *((_DWORD *)v447 + 7) = v186;
            unint64_t v448 = v441 >> 2;
            if ((v441 >> 2) < 0x10000) {
              goto LABEL_586;
            }
LABEL_609:
            if (!BYTE3(v448))
            {
              uint64_t v458 = (unsigned __int16)(v441 >> 18);
LABEL_685:
              int v177 = lg_table[v458] + 16;
              goto LABEL_737;
            }
            uint64_t v490 = (v441 >> 26);
LABEL_736:
            int v177 = lg_table[v490] + 24;
            goto LABEL_737;
          }
          int v493 = &v580[2 * (int)v179];
          uint64_t v179 = (v179 + 1);
          *((_DWORD *)v493 + 6) = *(_DWORD *)((char *)lg_table + (v443 & 0x3FC));
          *((_DWORD *)v493 + 7) = v186;
          unint64_t v448 = v441 >> 2;
          if ((v441 >> 2) >= 0x10000) {
            goto LABEL_609;
          }
        }
LABEL_586:
        if ((v448 & 0xFF00) != 0)
        {
          uint64_t v449 = (v441 >> 10) & 0xFFFFFF;
          goto LABEL_604;
        }
        goto LABEL_679;
      }
LABEL_632:
      uint64_t v472 = *v181;
      if ((v472 & 0x80000000) != 0)
      {
        if ((unint64_t)v181 >= v188) {
          goto LABEL_205;
        }
      }
      else
      {
        unsigned int v473 = v181 + 1;
        unint64_t v474 = (unint64_t)v181 + v169;
        do
        {
          size_t v181 = v473;
          v29[v472] = v474 >> 2;
          if ((unint64_t)v473 >= v188) {
            break;
          }
          ++v473;
          uint64_t v472 = *v181;
          v474 += 4;
        }
        while ((v472 & 0x80000000) == 0);
        if ((unint64_t)v181 >= v188)
        {
LABEL_205:
          if (!v186)
          {
            a2 = v571;
LABEL_753:
            a4 = v551;
            a1 = v566;
            int v30 = v557 - 1;
            uint64_t v508 = v574;
            uint64_t v174 = v576;
            if (v178) {
              goto LABEL_754;
            }
            goto LABEL_760;
          }
LABEL_206:
          uint64_t v184 = (int)v186;
LABEL_207:
          uint64_t v179 = v184 - 1;
LABEL_208:
          unsigned int v185 = &v580[2 * v179];
          float64x2x2_t v183 = *(char **)v185;
          size_t v181 = (int *)*((void *)v185 + 1);
          unint64_t v182 = *((void *)v185 + 2);
          int v177 = *((_DWORD *)v185 + 6);
          uint64_t v180 = *((unsigned int *)v185 + 7);
          continue;
        }
      }
      uint64_t v479 = 0;
      LODWORD(v480) = *v181;
      do
      {
        v181[v479] = ~v480;
        uint64_t v480 = v181[++v479];
      }
      while ((v480 & 0x80000000) != 0);
      if (v29[v480] == *(_DWORD *)&v187[4 * v480])
      {
        int v177 = -1;
        unint64_t v182 = (unint64_t)&v181[v479 + 1];
        if (v182 < v188) {
          goto LABEL_660;
        }
      }
      else
      {
        unsigned int v481 = ((unint64_t)(v479 * 4) >> 2) + 1;
        if (v481 >= 0x10000)
        {
          if (HIBYTE(v481))
          {
            int v177 = lg_table[HIBYTE(v481)] + 24;
            unint64_t v182 = (unint64_t)&v181[v479 + 1];
            if (v182 < v188) {
              goto LABEL_660;
            }
          }
          else
          {
            int v177 = lg_table[HIWORD(v481)] + 16;
            unint64_t v182 = (unint64_t)&v181[v479 + 1];
            if (v182 < v188) {
              goto LABEL_660;
            }
          }
        }
        else if ((v481 & 0xFF00) != 0)
        {
          int v177 = lg_table[v481 >> 8] + 8;
          unint64_t v182 = (unint64_t)&v181[v479 + 1];
          if (v182 < v188) {
            goto LABEL_660;
          }
        }
        else
        {
          int v177 = lg_table[(((unint64_t)(v479 * 4) >> 2) + 1)];
          unint64_t v182 = (unint64_t)&v181[v479 + 1];
          if (v182 < v188)
          {
LABEL_660:
            if ((unint64_t)v181 < v182)
            {
              unsigned int v482 = v181;
              do
              {
                uint64_t v483 = *v482++;
                v29[v483] = (((unint64_t)v181 + v578 + v479 * 4) >> 2) - 1;
              }
              while ((unint64_t)v482 < v182);
            }
          }
        }
      }
      unint64_t v484 = (unint64_t)(v479 * 4 + 4) >> 2;
      if (v170 >= (int)v484)
      {
LABEL_666:
        v170 -= v484;
        uint64_t v485 = v188 - (void)v181 - v479 * 4 - 4;
        if (v479 * 4 + 4 <= v485)
        {
          unsigned int v487 = &v580[2 * (int)v186];
          *(void *)unsigned int v487 = v187;
          *((void *)v487 + 1) = v182;
          *((void *)v487 + 2) = v188;
          uint64_t v179 = (v186 + 1);
          *((_DWORD *)v487 + 6) = -3;
          *((_DWORD *)v487 + 7) = v180;
          float64x2x2_t v183 = &v187[4 * v172];
        }
        else
        {
          float64x2x2_t v183 = &v187[4 * v172];
          uint64_t v179 = v186;
          if (v485 >= 5)
          {
            uint64_t v486 = &v580[2 * (int)v186];
            *(void *)uint64_t v486 = v183;
            *((void *)v486 + 1) = v181;
            *((void *)v486 + 2) = v182;
            uint64_t v179 = (v186 + 1);
            *((_DWORD *)v486 + 6) = v177;
            *((_DWORD *)v486 + 7) = v180;
            int v177 = -3;
            size_t v181 = (int *)v182;
            unint64_t v182 = v188;
            float64x2x2_t v183 = v187;
          }
        }
      }
      else
      {
        if (v167)
        {
          v170 += v557;
          --v167;
          goto LABEL_666;
        }
        if ((v180 & 0x80000000) == 0) {
          DWORD2(v580[2 * v180 + 1]) = -1;
        }
        int v167 = 0;
        v178 += v484;
        uint64_t v488 = v188 - (void)v181 - v479 * 4 - 4;
        int v177 = -3;
        size_t v181 = (int *)v182;
        unint64_t v182 = v188;
        float64x2x2_t v183 = v187;
        uint64_t v179 = v186;
        if (v488 <= 4)
        {
          if (v186) {
            goto LABEL_674;
          }
          int v167 = 0;
LABEL_759:
          a2 = v571;
          unint64_t v29 = v572;
          a4 = v551;
          a1 = v566;
          int v30 = v557 - 1;
          uint64_t v508 = v574;
          uint64_t v174 = v576;
          if (v178) {
            goto LABEL_754;
          }
LABEL_760:
          unint64_t v171 = (unint64_t)((char *)v508 - (char *)v174) >> 2;
          long long v166 = v568;
          uint64_t v168 = v564;
          goto LABEL_188;
        }
      }
    }
    unint64_t v190 = v182 - (void)v181;
    uint64_t v191 = (uint64_t)(v182 - (void)v181) >> 2;
    LODWORD(v192) = v191 - 1;
    if ((int)v191 >= 1) {
      int v193 = v191 - 1;
    }
    else {
      int v193 = (uint64_t)(v182 - (void)v181) >> 2;
    }
    if ((uint64_t)v190 <= 35)
    {
      uint64_t v194 = v181 + 1;
      unint64_t v29 = v572;
      if ((unint64_t)(v181 + 1) < v182)
      {
        uint64_t v195 = (unsigned int *)v181;
        do
        {
          unsigned int v196 = (unsigned int *)v194;
          int v197 = v195[1];
          uint64_t v198 = (int)*v195;
          int v199 = *(_DWORD *)&v187[4 * v197];
          int v200 = *(_DWORD *)&v187[4 * v198];
          if (v199 >= v200)
          {
            uint64_t v202 = v195;
          }
          else
          {
LABEL_218:
            unint64_t v201 = (int *)(v195 - 1);
            while (1)
            {
              uint64_t v202 = (unsigned int *)v201;
              v201[2] = v198;
              if (v201 < v181) {
                break;
              }
              --v201;
              uint64_t v198 = *v202;
              if ((v198 & 0x80000000) == 0)
              {
                int v199 = *(_DWORD *)&v187[4 * v197];
                int v200 = *(_DWORD *)&v187[4 * v198];
                uint64_t v195 = v202;
                if (v199 < v200) {
                  goto LABEL_218;
                }
                break;
              }
            }
          }
          if (v199 == v200) {
            unsigned int *v202 = ~*v202;
          }
          v202[1] = v197;
          uint64_t v194 = (int *)(v196 + 1);
          uint64_t v195 = v196;
        }
        while ((unint64_t)(v196 + 1) < v182);
      }
      goto LABEL_632;
    }
    uint64_t v208 = (char *)(v182 - 4);
    if (!v177)
    {
      if (v191)
      {
        uint64_t v192 = (uint64_t)(v188 - (void)v181) >> 2;
        if ((int)v191 < 2)
        {
LABEL_631:
          unint64_t v29 = v572;
          while (v181 < (int *)v208)
          {
            uint64_t v476 = *(int *)v208;
            v208 -= 4;
            uint64_t v475 = v476;
            if (v181 <= (int *)v208)
            {
              int v477 = *(_DWORD *)&v187[4 * v475];
              do
              {
                uint64_t v478 = *(int *)v208;
                if (*(_DWORD *)&v187[4 * v478] != v477) {
                  break;
                }
                *(_DWORD *)uint64_t v208 = ~v478;
                v208 -= 4;
              }
              while (v181 <= (int *)v208);
            }
          }
          goto LABEL_632;
        }
      }
      else
      {
        uint64_t v238 = (uint64_t)v193 >> 1;
        uint64_t v239 = v181[v238];
        uint64_t v240 = (int)v192;
        uint64_t v241 = v181[(int)v192];
        if (*(_DWORD *)&v187[4 * v239] < *(_DWORD *)&v187[4 * v241])
        {
          v181[(int)v192] = v239;
          v181[v238] = v241;
        }
        if ((int)v191 <= 2)
        {
          int v242 = *v181;
          uint64_t v243 = v240;
          int *v181 = v181[v243];
          v181[v243] = v242;
          goto LABEL_631;
        }
      }
      uint64_t v280 = v192 >> 1;
      do
      {
        uint64_t v282 = v181[(v280 - 1)];
        int v283 = (2 * (v280 - 1)) | 1;
        if (v283 >= (int)v192)
        {
          int v281 = v280 - 1;
        }
        else
        {
          int v284 = *(_DWORD *)&v187[4 * v282];
          int v285 = 2 * (v280 - 1);
          int v286 = v280 - 1;
          while (1)
          {
            int v281 = v285 + 2;
            int v287 = *(_DWORD *)&v187[4 * v181[v283]];
            int v288 = *(_DWORD *)&v187[4 * v181[v281]];
            int v289 = v287 <= v288 ? *(_DWORD *)&v187[4 * v181[v281]] : *(_DWORD *)&v187[4 * v181[v283]];
            if (v289 <= v284) {
              break;
            }
            if (v287 >= v288) {
              int v281 = v283;
            }
            v181[v286] = v181[v281];
            int v285 = 2 * v281;
            int v283 = (2 * v281) | 1;
            int v286 = v281;
            if (v283 >= (int)v192) {
              goto LABEL_351;
            }
          }
          int v281 = v286;
        }
LABEL_351:
        v181[v281] = v282;
        BOOL v74 = v280-- <= 1;
      }
      while (!v74);
      if ((v191 & 1) == 0)
      {
        int v290 = 0;
        LODWORD(v291) = 0;
        int v292 = *v181;
        uint64_t v293 = (int)v192;
        int *v181 = v181[v293];
        v181[v293] = v292;
        uint64_t v294 = *v181;
        int v295 = *(_DWORD *)&v187[4 * v294];
        int v296 = 1;
        while (1)
        {
          int v297 = v290 + 2;
          int v298 = *(_DWORD *)&v187[4 * v181[v296]];
          int v299 = *(_DWORD *)&v187[4 * v181[v297]];
          int v300 = v298 <= v299 ? *(_DWORD *)&v187[4 * v181[v297]] : *(_DWORD *)&v187[4 * v181[v296]];
          if (v300 <= v295) {
            break;
          }
          if (v298 >= v299) {
            int v297 = v296;
          }
          v181[(int)v291] = v181[v297];
          int v290 = 2 * v297;
          int v296 = (2 * v297) | 1;
          LODWORD(v291) = v297;
          if (v296 >= (int)v192)
          {
            uint64_t v291 = v297;
            goto LABEL_616;
          }
        }
        uint64_t v291 = (int)v291;
LABEL_616:
        v181[v291] = v294;
      }
      uint64_t v461 = v192;
      do
      {
        int v463 = *v181;
        uint64_t v464 = v181[(v461 - 1)];
        int *v181 = v464;
        if ((v461 - 1) < 2)
        {
          int v462 = 0;
        }
        else
        {
          int v465 = 0;
          int v466 = 0;
          int v467 = *(_DWORD *)&v187[4 * v464];
          int v468 = 1;
          while (1)
          {
            int v462 = v465 + 2;
            int v469 = *(_DWORD *)&v187[4 * v181[v468]];
            int v470 = *(_DWORD *)&v187[4 * v181[v462]];
            int v471 = v469 <= v470 ? *(_DWORD *)&v187[4 * v181[v462]] : *(_DWORD *)&v187[4 * v181[v468]];
            if (v471 <= v467) {
              break;
            }
            if (v469 >= v470) {
              int v462 = v468;
            }
            v181[v466] = v181[v462];
            int v465 = 2 * v462;
            int v468 = (2 * v462) | 1;
            int v466 = v462;
            if (v468 >= (int)v461 - 1) {
              goto LABEL_619;
            }
          }
          int v462 = v466;
        }
LABEL_619:
        v181[v462] = v464;
        v181[(v461 - 1)] = v463;
        BOOL v74 = v461-- <= 2;
      }
      while (!v74);
      goto LABEL_631;
    }
    unint64_t v209 = v190 >> 2;
    int v210 = ((v190 >> 2) & 0x80000000) == 0 ? v190 >> 2 : (int)v209 + 1;
    uint64_t v211 = &v181[v210 >> 1];
    if ((int)v209 > 512)
    {
      uint64_t v244 = v209 >> 3;
      uint64_t v245 = &v181[v244];
      uint64_t v246 = (2 * v244);
      uint64_t v212 = *v189;
      int v247 = *(_DWORD *)&v187[4 * v212];
      int v248 = *(_DWORD *)&v187[4 * *v245];
      if (v247 <= v248) {
        int v249 = *v245;
      }
      else {
        int v249 = *v189;
      }
      if (v247 <= v248) {
        uint64_t v250 = &v189[v244];
      }
      else {
        uint64_t v250 = v189;
      }
      int v251 = *(_DWORD *)&v187[4 * v189[v246]];
      if (*(_DWORD *)&v187[4 * v249] > v251)
      {
        if (v247 <= v248) {
          int v252 = *v189;
        }
        else {
          int v252 = *v245;
        }
        if (v247 <= v248) {
          uint64_t v245 = v189;
        }
        if (*(_DWORD *)&v187[4 * v252] <= v251) {
          uint64_t v250 = &v189[v246];
        }
        else {
          uint64_t v250 = v245;
        }
      }
      uint64_t v253 = &v211[v244];
      int v254 = *(_DWORD *)&v187[4 * v211[-v244]];
      int v255 = *(_DWORD *)&v187[4 * *v211];
      if (v254 <= v255) {
        int v256 = *v211;
      }
      else {
        int v256 = v211[-v244];
      }
      if (v254 <= v255) {
        uint64_t v257 = v211;
      }
      else {
        uint64_t v257 = &v211[-v244];
      }
      int v258 = *(_DWORD *)&v187[4 * v256];
      int v259 = *(_DWORD *)&v187[4 * *v253];
      if (v258 > v259)
      {
        if (v254 <= v255) {
          int v260 = v211[-v244];
        }
        else {
          int v260 = *v211;
        }
        if (v254 <= v255) {
          v211 -= v244;
        }
        if (*(_DWORD *)&v187[4 * v260] <= v259) {
          uint64_t v257 = v253;
        }
        else {
          uint64_t v257 = v211;
        }
      }
      unint64_t v261 = (int *)&v208[-4 * v246];
      __int16 v262 = (int *)&v208[-4 * v244];
      int v263 = *(_DWORD *)&v187[4 * *v261];
      int v264 = *(_DWORD *)&v187[4 * *v262];
      if (v263 <= v264) {
        int v265 = *v262;
      }
      else {
        int v265 = *v261;
      }
      if (v263 <= v264) {
        uint64_t v266 = (int *)&v208[-4 * v244];
      }
      else {
        uint64_t v266 = (int *)&v208[-4 * v246];
      }
      int v267 = *(_DWORD *)&v187[4 * v265];
      int v268 = *(_DWORD *)&v187[4 * *(int *)v208];
      if (v267 > v268)
      {
        if (v263 <= v264) {
          int v269 = *v261;
        }
        else {
          int v269 = *v262;
        }
        int v270 = *(_DWORD *)&v187[4 * v269];
        if (v263 > v264) {
          unint64_t v261 = (int *)&v208[-4 * v244];
        }
        if (v270 <= v268) {
          uint64_t v266 = (int *)(v188 - 4);
        }
        else {
          uint64_t v266 = v261;
        }
        int v267 = *(_DWORD *)&v187[4 * *v266];
      }
      uint64_t v271 = *v250;
      int v272 = *(_DWORD *)&v187[4 * v271];
      int v273 = *(_DWORD *)&v187[4 * *v257];
      if (v272 <= v273) {
        int v274 = *v257;
      }
      else {
        int v274 = *v250;
      }
      if (v272 <= v273) {
        long long v216 = v257;
      }
      else {
        long long v216 = v250;
      }
      if (*(_DWORD *)&v187[4 * v274] > v267)
      {
        if (v272 > v273)
        {
          LODWORD(v271) = *v257;
          uint64_t v250 = v257;
        }
        if (*(_DWORD *)&v187[4 * (int)v271] <= v267) {
          long long v216 = v266;
        }
        else {
          long long v216 = v250;
        }
      }
    }
    else if ((int)v209 > 32)
    {
      uint64_t v301 = (v190 >> 4) & 0x3FFFFFFF;
      uint64_t v302 = &v181[v301];
      unint64_t v303 = (int *)&v208[-(v301 * 4)];
      uint64_t v304 = *v302;
      int v305 = *(_DWORD *)&v187[4 * v304];
      int v306 = *(_DWORD *)&v187[4 * *v211];
      BOOL v307 = v305 <= v306;
      if (v305 <= v306)
      {
        unint64_t v308 = v302;
      }
      else
      {
        LODWORD(v304) = *v211;
        unint64_t v308 = v211;
      }
      if (v307) {
        uint64_t v302 = v211;
      }
      uint64_t v309 = *v303;
      int v310 = *(_DWORD *)&v187[4 * v309];
      int v311 = *(_DWORD *)&v187[4 * *(int *)v208];
      BOOL v312 = v310 <= v311;
      if (v310 <= v311)
      {
        unint64_t v313 = v303;
      }
      else
      {
        LODWORD(v309) = *(_DWORD *)v208;
        unint64_t v313 = (int *)(v188 - 4);
      }
      if (v312) {
        unint64_t v303 = (int *)(v188 - 4);
      }
      int v314 = *(_DWORD *)&v187[4 * (int)v304];
      int v315 = *(_DWORD *)&v187[4 * (int)v309];
      BOOL v316 = v314 <= v315;
      if (v314 <= v315) {
        unsigned int v317 = v302;
      }
      else {
        unsigned int v317 = v303;
      }
      if (v316) {
        unint64_t v318 = v313;
      }
      else {
        unint64_t v318 = v308;
      }
      if (!v316) {
        unint64_t v303 = v302;
      }
      int v319 = *(_DWORD *)&v187[4 * *v181];
      int v320 = *(_DWORD *)&v187[4 * *v317];
      BOOL v321 = v319 <= v320;
      if (v319 <= v320) {
        int v322 = *v181;
      }
      else {
        int v322 = *v317;
      }
      if (v321) {
        unint64_t v323 = v181;
      }
      else {
        unint64_t v323 = v317;
      }
      if (!v321) {
        unsigned int v317 = v181;
      }
      if (*(_DWORD *)&v187[4 * v322] > *(_DWORD *)&v187[4 * *v318])
      {
        unint64_t v324 = v323;
      }
      else
      {
        unint64_t v303 = v317;
        unint64_t v324 = v318;
      }
      long long v216 = *(_DWORD *)&v187[4 * *v303] <= *(_DWORD *)&v187[4 * *v324] ? v303 : v324;
      LODWORD(v212) = *v181;
    }
    else
    {
      uint64_t v212 = *v181;
      int v213 = *(_DWORD *)&v187[4 * v212];
      int v214 = *(_DWORD *)&v187[4 * *v211];
      if (v213 <= v214) {
        int v215 = *v211;
      }
      else {
        int v215 = *v181;
      }
      if (v213 <= v214) {
        long long v216 = v211;
      }
      else {
        long long v216 = v181;
      }
      int v217 = *(_DWORD *)&v187[4 * v215];
      int v218 = *(_DWORD *)&v187[4 * *(int *)v208];
      if (v217 > v218)
      {
        BOOL v219 = v213 <= v214;
        if (v213 <= v214) {
          int v220 = *v181;
        }
        else {
          int v220 = *v211;
        }
        if (v219) {
          long long v221 = v181;
        }
        else {
          long long v221 = v211;
        }
        if (*(_DWORD *)&v187[4 * v220] <= v218) {
          long long v216 = (int *)(v188 - 4);
        }
        else {
          long long v216 = v221;
        }
      }
    }
    int v325 = v177 - 1;
    *uint64_t v189 = *v216;
    *long long v216 = v212;
    long long v326 = v189 + 1;
    int v327 = *(_DWORD *)&v187[4 * *v189];
    do
    {
      unint64_t v328 = (char *)v326;
      if ((unint64_t)v326 >= v188) {
        goto LABEL_420;
      }
      ++v326;
      int v329 = *(_DWORD *)&v187[4 * *(int *)v328];
    }
    while (v329 == v327);
    if (v329 >= v327)
    {
      long long v326 = (int *)v328;
    }
    else
    {
      for (; (unint64_t)v326 < v188; ++v326)
      {
        uint64_t v330 = *v326;
        int v331 = *(_DWORD *)&v187[4 * v330];
        if (v331 > v327) {
          break;
        }
        if (v331 == v327)
        {
          *long long v326 = *(_DWORD *)v328;
          *(_DWORD *)unint64_t v328 = v330;
          v328 += 4;
        }
      }
    }
LABEL_420:
    while (1)
    {
      unint64_t v332 = v208;
      if (v326 >= (int *)v208) {
        break;
      }
      v208 -= 4;
      int v333 = *(_DWORD *)&v187[4 * *(int *)v332];
      if (v333 != v327)
      {
        if (v333 <= v327)
        {
          uint64_t v208 = v332;
        }
        else
        {
          for (; v326 < (int *)v208; v208 -= 4)
          {
            uint64_t v334 = *(int *)v208;
            int v335 = *(_DWORD *)&v187[4 * v334];
            if (v335 < v327) {
              break;
            }
            if (v335 == v327)
            {
              *(_DWORD *)uint64_t v208 = *(_DWORD *)v332;
              *(_DWORD *)unint64_t v332 = v334;
              v332 -= 4;
            }
          }
        }
        break;
      }
    }
    while (v326 < (int *)v208)
    {
      int v336 = *v326;
      *v326++ = *(_DWORD *)v208;
      *(_DWORD *)uint64_t v208 = v336;
      while (v326 < (int *)v208)
      {
        uint64_t v337 = *v326;
        int v338 = *(_DWORD *)&v187[4 * v337];
        if (v338 > v327) {
          break;
        }
        if (v338 == v327)
        {
          *long long v326 = *(_DWORD *)v328;
          *(_DWORD *)unint64_t v328 = v337;
          v328 += 4;
        }
        ++v326;
      }
      while (1)
      {
        v208 -= 4;
        if (v326 >= (int *)v208) {
          break;
        }
        uint64_t v339 = *(int *)v208;
        int v340 = *(_DWORD *)&v187[4 * v339];
        if (v340 < v327) {
          break;
        }
        if (v340 == v327)
        {
          *(_DWORD *)uint64_t v208 = *(_DWORD *)v332;
          *(_DWORD *)unint64_t v332 = v339;
          v332 -= 4;
        }
      }
    }
    if (v328 > v332) {
      break;
    }
    unint64_t v341 = (unint64_t)(v328 - (char *)v189) >> 2;
    uint64_t v342 = (char *)v326 - v328;
    uint64_t v343 = ((char *)v326 - v328) >> 2;
    if ((int)v341 >= (int)v343) {
      uint64_t v344 = v343;
    }
    else {
      uint64_t v344 = v341;
    }
    uint64_t v345 = (v344 - 1);
    if ((int)v344 >= 1)
    {
      char v346 = &v326[-v344];
      if (v344 < 8)
      {
        unint64_t v347 = v189;
LABEL_502:
        unsigned int v385 = v344 + 1;
        do
        {
          int v386 = *v347;
          *v347++ = *v346;
          *v346++ = v386;
          --v385;
        }
        while (v385 > 1);
        goto LABEL_504;
      }
      BOOL v377 = v189 >= &v326[v345 - v344 + 1] || v346 >= &v189[v345 + 1];
      unint64_t v347 = v189;
      if (!v377) {
        goto LABEL_502;
      }
      uint64_t v378 = v344 & 0xFFFFFFF8;
      char v346 = (int *)((char *)v346 + v378 * 4);
      unint64_t v347 = &v189[v378];
      unsigned int v379 = (long long *)(v189 + 4);
      unint64_t v380 = &v326[-v344 + 4];
      uint64_t v381 = v344 & 0xFFFFFFF8;
      do
      {
        long long v382 = *(v379 - 1);
        long long v383 = *v379;
        long long v384 = *(_OWORD *)v380;
        *(v379 - 1) = *((_OWORD *)v380 - 1);
        *unsigned int v379 = v384;
        *((_OWORD *)v380 - 1) = v382;
        *(_OWORD *)unint64_t v380 = v383;
        v379 += 2;
        v380 += 8;
        v381 -= 8;
      }
      while (v381);
      BOOL v519 = (v344 & 0x7FFFFFF8) == v344;
      LODWORD(v344) = v344 - (v344 & 0xFFFFFFF8);
      if (!v519) {
        goto LABEL_502;
      }
    }
LABEL_504:
    uint64_t v387 = v332 - (char *)(v326 - 1);
    uint64_t v388 = v387 >> 2;
    int v389 = ((v188 - (unint64_t)v332) >> 2) - 1;
    if (v389 >= (int)(v387 >> 2)) {
      uint64_t v390 = v388;
    }
    else {
      uint64_t v390 = v389;
    }
    uint64_t v391 = (v390 - 1);
    if ((int)v390 >= 1)
    {
      unsigned int v392 = (int *)(v188 - 4 * v390);
      if (v390 < 8
        || ((unint64_t)v326 < v188 + 4 * (v391 - v390) + 4
          ? (BOOL v393 = v392 >= &v326[v391 + 1])
          : (BOOL v393 = 1),
            !v393))
      {
        int v394 = v390;
        unsigned int v396 = v326;
LABEL_519:
        unsigned int v403 = v394 + 1;
        do
        {
          int v404 = *v396;
          *v396++ = *v392;
          *v392++ = v404;
          --v403;
        }
        while (v403 > 1);
        goto LABEL_521;
      }
      int v394 = v390 - (v390 & 0xFFFFFFF8);
      uint64_t v395 = v390 & 0xFFFFFFF8;
      unsigned int v392 = (int *)((char *)v392 + v395 * 4);
      unsigned int v396 = &v326[v395];
      unint64_t v397 = (long long *)(v326 + 4);
      unint64_t v398 = (long long *)(v188 - 4 * v390 + 16);
      uint64_t v399 = v390 & 0xFFFFFFF8;
      do
      {
        long long v400 = *(v397 - 1);
        long long v401 = *v397;
        long long v402 = *v398;
        *(v397 - 1) = *(v398 - 1);
        *unint64_t v397 = v402;
        *(v398 - 1) = v400;
        *unint64_t v398 = v401;
        v397 += 2;
        v398 += 2;
        v399 -= 8;
      }
      while (v399);
      if ((v390 & 0x7FFFFFF8) != v390) {
        goto LABEL_519;
      }
    }
LABEL_521:
    int v405 = &v189[v343];
    unint64_t v182 = v188 - 4 * v388;
    uint64_t v406 = v182 - (void)v405;
    uint64_t v407 = (uint64_t)(v182 - (void)v405) >> 2;
    if (v191 == v407) {
      break;
    }
    unint64_t v408 = (unint64_t)v406 >> 2;
    if (v572[*v405] == v327)
    {
      int v177 = -1;
      if (v342 < 1) {
        goto LABEL_701;
      }
    }
    else if (v408 >= 0x10000)
    {
      if (BYTE3(v408))
      {
        int v177 = lg_table[BYTE3(v407)] + 24;
        if (v342 < 1) {
          goto LABEL_701;
        }
      }
      else
      {
        int v177 = lg_table[WORD1(v407)] + 16;
        if (v342 < 1) {
          goto LABEL_701;
        }
      }
    }
    else if ((v408 & 0xFF00) != 0)
    {
      int v177 = lg_table[v407 >> 8] + 8;
      if (v342 < 1) {
        goto LABEL_701;
      }
    }
    else
    {
      int v177 = *(_DWORD *)((char *)lg_table + (v406 & 0x3FC));
      if (v342 < 1) {
        goto LABEL_701;
      }
    }
    uint64_t v495 = v189;
    do
    {
      uint64_t v496 = *v495++;
      v572[v496] = ((unint64_t)((char *)v405 - (char *)v571) >> 2) - 1;
    }
    while (v495 < v405);
LABEL_701:
    if (v387 >= 1 && (unint64_t)v405 < v182)
    {
      uint64_t v497 = &v189[v343];
      do
      {
        uint64_t v498 = *v497++;
        v572[v498] = ((v182 - (unint64_t)v571) >> 2) - 1;
      }
      while ((unint64_t)v497 < v182);
    }
    if (v406 < 5) {
      goto LABEL_723;
    }
    if (v170 >= (int)v408)
    {
LABEL_709:
      v170 -= v408;
      if (v343 <= v388)
      {
        if (v388 <= v407)
        {
          float64x2x2_t v183 = &v187[4 * v172];
          if (v342 >= 5)
          {
            uint64_t v501 = &v580[2 * (int)v186];
            *(void *)uint64_t v501 = v183;
            *((void *)v501 + 1) = v405;
            *((void *)v501 + 2) = v182;
            *((_DWORD *)v501 + 6) = v177;
            *((_DWORD *)v501 + 7) = v180;
            *((void *)v501 + 4) = v187;
            *((void *)v501 + 5) = v182;
            *((void *)v501 + 6) = v188;
            uint64_t v179 = (v186 + 2);
            *((_DWORD *)v501 + 14) = v325;
            *((_DWORD *)v501 + 15) = v180;
            goto LABEL_746;
          }
          size_t v181 = &v189[v343];
          uint64_t v179 = v186;
          if (v387 < 5) {
            continue;
          }
          int v505 = &v580[2 * (int)v186];
          *(void *)int v505 = v183;
          *((void *)v505 + 1) = v405;
          *((void *)v505 + 2) = v182;
          uint64_t v179 = (v186 + 1);
LABEL_749:
          *((_DWORD *)v505 + 6) = v177;
          *((_DWORD *)v505 + 7) = v180;
LABEL_750:
          size_t v181 = (int *)(v188 - 4 * v388);
          unint64_t v182 = v188;
LABEL_751:
          float64x2x2_t v183 = v187;
          int v177 = v325;
          continue;
        }
        if (v343 > v407)
        {
          unsigned int v499 = &v580[2 * (int)v186];
          *(void *)unsigned int v499 = v187;
          *((void *)v499 + 1) = v182;
          *((void *)v499 + 2) = v188;
          *((_DWORD *)v499 + 6) = v325;
          *((_DWORD *)v499 + 7) = v180;
          *((void *)v499 + 4) = v187;
          *((void *)v499 + 5) = v189;
          *((void *)v499 + 6) = v405;
          goto LABEL_716;
        }
        unsigned int v506 = &v580[2 * (int)v186];
        *(void *)unsigned int v506 = v187;
        *((void *)v506 + 1) = v182;
        *((void *)v506 + 2) = v188;
        *((_DWORD *)v506 + 6) = v325;
        *((_DWORD *)v506 + 7) = v180;
        float64x2x2_t v183 = &v187[4 * v172];
        size_t v181 = &v189[v343];
        uint64_t v179 = (int)v186 + 1;
        if (v342 >= 5)
        {
          unint64_t v507 = &v580[2 * (int)v186 + 2];
          *(void *)unint64_t v507 = v183;
          *((void *)v507 + 1) = v405;
          *((void *)v507 + 2) = v182;
          uint64_t v179 = (v186 + 2);
          goto LABEL_745;
        }
      }
      else
      {
        if (v343 <= v407)
        {
          float64x2x2_t v183 = &v187[4 * v172];
          if (v387 >= 5)
          {
            unsigned int v500 = &v580[2 * (int)v186];
            *(void *)unsigned int v500 = v183;
            *((void *)v500 + 1) = v405;
            *((void *)v500 + 2) = v182;
            *((_DWORD *)v500 + 6) = v177;
            *((_DWORD *)v500 + 7) = v180;
            *((void *)v500 + 4) = v187;
            *((void *)v500 + 5) = v189;
            *((void *)v500 + 6) = v405;
            uint64_t v179 = (v186 + 2);
            *((_DWORD *)v500 + 14) = v325;
            *((_DWORD *)v500 + 15) = v180;
            goto LABEL_750;
          }
          size_t v181 = &v189[v343];
          uint64_t v179 = v186;
          if (v342 < 5) {
            continue;
          }
          unint64_t v507 = &v580[2 * (int)v186];
          *(void *)unint64_t v507 = v183;
          *((void *)v507 + 1) = v405;
          *((void *)v507 + 2) = v182;
          uint64_t v179 = (v186 + 1);
LABEL_745:
          *((_DWORD *)v507 + 6) = v177;
          *((_DWORD *)v507 + 7) = v180;
LABEL_746:
          size_t v181 = v189;
          unint64_t v182 = (unint64_t)v405;
          goto LABEL_751;
        }
        if (v388 > v407)
        {
          unsigned int v499 = &v580[2 * (int)v186];
          *(void *)unsigned int v499 = v187;
          *((void *)v499 + 1) = v189;
          *((void *)v499 + 2) = v405;
          *((_DWORD *)v499 + 6) = v325;
          *((_DWORD *)v499 + 7) = v180;
          *((void *)v499 + 4) = v187;
          *((void *)v499 + 5) = v182;
          *((void *)v499 + 6) = v188;
LABEL_716:
          uint64_t v179 = (v186 + 2);
          *((_DWORD *)v499 + 14) = v325;
          *((_DWORD *)v499 + 15) = v180;
          float64x2x2_t v183 = &v187[4 * v172];
          size_t v181 = &v189[v343];
          continue;
        }
        unint64_t v504 = &v580[2 * (int)v186];
        *(void *)unint64_t v504 = v187;
        *((void *)v504 + 1) = v189;
        *((void *)v504 + 2) = v405;
        *((_DWORD *)v504 + 6) = v325;
        *((_DWORD *)v504 + 7) = v180;
        float64x2x2_t v183 = &v187[4 * v172];
        size_t v181 = &v189[v343];
        uint64_t v179 = (int)v186 + 1;
        if (v387 >= 5)
        {
          int v505 = &v580[2 * (int)v186 + 2];
          *(void *)int v505 = v183;
          *((void *)v505 + 1) = v405;
          *((void *)v505 + 2) = v182;
          uint64_t v179 = (v186 + 2);
          goto LABEL_749;
        }
      }
    }
    else
    {
      if (v167)
      {
        v170 += v557;
        --v167;
        goto LABEL_709;
      }
      v178 += v408;
      if ((v180 & 0x80000000) == 0) {
        DWORD2(v580[2 * v180 + 1]) = -1;
      }
LABEL_723:
      if (v342 <= v387)
      {
        if (v342 >= 5)
        {
          uint64_t v503 = &v580[2 * (int)v186];
          *(void *)uint64_t v503 = v187;
          *((void *)v503 + 1) = v182;
          *((void *)v503 + 2) = v188;
          uint64_t v179 = (v186 + 1);
          *((_DWORD *)v503 + 6) = v325;
          *((_DWORD *)v503 + 7) = v180;
          goto LABEL_746;
        }
        size_t v181 = (int *)(v188 - 4 * v388);
        unint64_t v182 = v188;
        float64x2x2_t v183 = v187;
        int v177 = v325;
        uint64_t v179 = v186;
        if (v387 <= 4)
        {
LABEL_731:
          if (!v186) {
            goto LABEL_759;
          }
          goto LABEL_206;
        }
      }
      else
      {
        if (v387 >= 5)
        {
          uint64_t v502 = &v580[2 * (int)v186];
          *(void *)uint64_t v502 = v187;
          *((void *)v502 + 1) = v189;
          *((void *)v502 + 2) = v405;
          uint64_t v179 = (v186 + 1);
          *((_DWORD *)v502 + 6) = v325;
          *((_DWORD *)v502 + 7) = v180;
          goto LABEL_750;
        }
        size_t v181 = v189;
        unint64_t v182 = (unint64_t)&v189[v343];
        float64x2x2_t v183 = v187;
        int v177 = v325;
        uint64_t v179 = v186;
        if (v342 <= 4) {
          goto LABEL_731;
        }
      }
    }
  }
  if (v170 >= (int)v191)
  {
LABEL_525:
    if (v191 >= 0x10000)
    {
      if (BYTE3(v191)) {
        int v177 = lg_table[BYTE3(v191)] + 24;
      }
      else {
        int v177 = lg_table[WORD1(v191)] + 16;
      }
    }
    else if ((v191 & 0xFF00) != 0)
    {
      int v177 = lg_table[v191 >> 8] + 8;
    }
    else
    {
      int v177 = *(_DWORD *)((char *)lg_table + (v190 & 0x3FC));
    }
    v170 -= v191;
    size_t v181 = v189;
    unint64_t v182 = v188;
    uint64_t v179 = v186;
    float64x2x2_t v183 = &v187[4 * v172];
    goto LABEL_209;
  }
  a2 = v571;
  if (v167)
  {
    v170 += v557;
    --v167;
    goto LABEL_525;
  }
  if ((v180 & 0x80000000) == 0) {
    DWORD2(v580[2 * v180 + 1]) = -1;
  }
  v178 += v191;
  if (v186)
  {
LABEL_674:
    int v167 = 0;
    goto LABEL_206;
  }
  int v167 = 0;
  unint64_t v29 = v572;
  a4 = v551;
  a1 = v566;
  int v30 = v557 - 1;
  uint64_t v508 = v574;
  uint64_t v174 = v576;
  if (!v178) {
    goto LABEL_760;
  }
LABEL_754:
  v570 += v178;
  long long v166 = v568;
  if (v174 < v29)
  {
    LODWORD(v171) = 0;
    uint64_t v168 = v564;
    goto LABEL_189;
  }
  uint64_t v168 = v564;
  if (v570) {
    goto LABEL_764;
  }
LABEL_767:
  int v509 = v547;
  if (v548 >= 1)
  {
    unsigned int v510 = *(unsigned __int8 *)(a1 + v546);
    int v511 = v557;
LABEL_769:
    uint64_t v512 = 0;
    uint64_t v513 = a1 - 1;
    unsigned int v514 = v510;
    int v515 = v509;
    while (v509 != v512)
    {
      int v516 = v512;
      unsigned int v510 = *(unsigned __int8 *)(v513 + v509);
      ++v512;
      --v513;
      BOOL v74 = v514 > v510;
      unsigned int v514 = v510;
      if (v74)
      {
        int v517 = v509 - v512;
        if (v509 - (int)v512 + 1 <= 1)
        {
          int v509 = v509 - 1 - v512;
        }
        else
        {
          v509 += ~v516;
          while (1)
          {
            unsigned int v518 = v510;
            unsigned int v510 = *(unsigned __int8 *)(a1 + --v509);
            if (v518 < v510) {
              break;
            }
            if (v509 <= 0)
            {
              int v509 = -1;
              break;
            }
          }
        }
        BOOL v519 = v515 - v509 - (int)v512 > 1 || v515 == v512;
        int v520 = ~v515 + v512;
        if (v519) {
          int v520 = v517;
        }
        a2[v29[--v511]] = v520;
        if ((v509 & 0x80000000) == 0) {
          goto LABEL_769;
        }
        break;
      }
    }
  }
  a4[0xFFFF] = v548;
  int v521 = a2 - 3;
  uint64_t v522 = 254;
  do
  {
    unint64_t v524 = v522;
    int v525 = v522 + 1;
    LODWORD(v526) = *(_DWORD *)&a3[4 * v524 + 4] - 1;
    int v527 = v524 << 8;
    LODWORD(v528) = 255;
    do
    {
      int v529 = v526;
      unint64_t v526 = 4 * (int)(v524 | (v528 << 8));
      int v530 = *(_DWORD *)((char *)a4 + v526);
      *(_DWORD *)((char *)a4 + v526) = v529;
      LODWORD(v526) = v529 - v530;
      int64_t v531 = (int)a4[(int)(v528 | v527)];
      if ((int)v531 <= v30)
      {
        unint64_t v532 = v30;
        unint64_t v526 = (int)v526;
        unint64_t v533 = v30 - v531;
        unint64_t v534 = v533 + 1;
        if (v533 + 1 < 0x20) {
          goto LABEL_804;
        }
        uint64_t v535 = (int)v526;
        uint64_t v536 = v30;
        BOOL v537 = &a2[v535 - v533] > &a2[v535] || &a2[v30 - v533] > &a2[v30];
        unint64_t v538 = v533 >> 62;
        if (v537 || v538 != 0) {
          goto LABEL_804;
        }
        if ((unint64_t)(v536 * 4 - v535 * 4) < 0x20) {
          goto LABEL_804;
        }
        unint64_t v526 = (int)v526 - (v534 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v532 = v30 - (v534 & 0xFFFFFFFFFFFFFFF8);
        unsigned int v540 = &v521[v536];
        unsigned int v541 = &v521[v535];
        unint64_t v542 = v534 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v543 = *(_OWORD *)v540;
          *((_OWORD *)v541 - 1) = *((_OWORD *)v540 - 1);
          *(_OWORD *)unsigned int v541 = v543;
          v540 -= 8;
          v541 -= 8;
          v542 -= 8;
        }
        while (v542);
        if (v534 != (v534 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_804:
          int64_t v544 = v532;
          do
          {
            a2[v526--] = a2[v544];
            LODWORD(v532) = v544 - 1;
            BOOL v74 = v544-- <= v531;
          }
          while (!v74);
        }
        int v30 = v532;
      }
      unint64_t v528 = (v528 - 1);
    }
    while (v524 < v528);
    uint64_t v523 = (int)(v527 | v524);
    a4[v527 | v525] = v526 - a4[v523] + 1;
    a4[v523] = v526;
    uint64_t v522 = v524 - 1;
  }
  while (v524);
  return v557;
}

uint64_t divbwt(unsigned char *a1, unsigned char *a2, int *a3, unsigned int a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v6 = 0xFFFFFFFFLL;
  if (a1 && a2 && (a4 & 0x80000000) == 0)
  {
    uint64_t v10 = a4 - 1;
    if (a4 <= 1)
    {
      if (a4 != 1) {
        return 0;
      }
      *a2 = *a1;
      return 1;
    }
    int v13 = a3;
    if (!a3) {
      int v13 = (int *)malloc_type_malloc(4 * (a4 + 1), 0x100004052888210uLL);
    }
    unint64_t v14 = (char *)malloc_type_malloc(0x400uLL, 0x100004052888210uLL);
    unint64_t v15 = (int *)malloc_type_malloc(0x40000uLL, 0x100004052888210uLL);
    int v16 = v15;
    uint64_t v6 = 4294967294;
    if (v13 && v14 && v15)
    {
      int v17 = sort_typeBstar((uint64_t)a1, v13, v14, v15, a4);
      if (a5 && a6)
      {
        unsigned int v18 = (a4 >> 3) | (a4 >> 4) | (((a4 >> 3) | (a4 >> 4)) >> 2);
        unsigned int v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        int v20 = (v19 >> 17) | (v19 >> 1);
        unsigned int v21 = v20 + 1;
        unsigned int v22 = v10 / (v20 + 1);
        *a5 = v22;
        if (v17 >= 1)
        {
          uint64_t v23 = 254;
          while (1)
          {
            uint64_t v24 = v23;
            int v25 = v23 + 1;
            int v26 = v23 << 8;
            unint64_t v27 = (unint64_t)&v13[v16[v26 | v25]];
            uint64_t v28 = *(int *)&v14[4 * v24 + 4];
            if (v27 <= (unint64_t)&v13[v28 - 1]) {
              break;
            }
LABEL_17:
            uint64_t v23 = v24 - 1;
            if (!v24) {
              goto LABEL_57;
            }
          }
          unint64_t v29 = 0;
          unint64_t v30 = 4 * v28 - 4;
          int v31 = -1;
          while (1)
          {
            unsigned int v32 = *(int *)((char *)v13 + v30);
            unsigned int v33 = v32 - 1;
            if ((int)v32 < 1)
            {
              if (v32) {
                *(int *)((char *)v13 + v30) = ~v32;
              }
              goto LABEL_22;
            }
            if ((v32 & v20) != 0)
            {
              unsigned int v34 = a1[v33];
              *(int *)((char *)v13 + v30) = ~v34;
              unsigned int v35 = v32 - 2;
              if (v32 < 2) {
                goto LABEL_34;
              }
            }
            else
            {
              *(_DWORD *)(a6 + 4 * (int)(v32 / v21 - 1)) = v30 >> 2;
              unsigned int v34 = a1[v33];
              *(int *)((char *)v13 + v30) = ~v34;
              unsigned int v35 = v32 - 2;
              if (v32 < 2)
              {
LABEL_34:
                int v36 = 0;
                if (v31 != v34) {
                  goto LABEL_35;
                }
                goto LABEL_21;
              }
            }
            if (a1[v35] > v34) {
              int v36 = -v32;
            }
            else {
              int v36 = v32 - 1;
            }
            if (v31 != v34)
            {
LABEL_35:
              if ((v31 & 0x80000000) == 0) {
                v16[v31 | v26] = (unint64_t)((char *)v29 - (char *)v13) >> 2;
              }
              unint64_t v29 = &v13[v16[v26 | v34]];
              int v31 = v34;
            }
LABEL_21:
            *v29-- = v36;
LABEL_22:
            v30 -= 4;
            if (v27 > (unint64_t)v13 + v30) {
              goto LABEL_17;
            }
          }
        }
LABEL_57:
        unsigned int v49 = a1[v10];
        uint64_t v50 = *(int *)&v14[4 * a1[v10]];
        unint64_t v51 = &v13[v50];
        uint64_t v52 = a4 - 2;
        unsigned int v53 = a1[v52];
        int v54 = a4 - 1;
        if (v53 < v49)
        {
          if ((v20 & v10) == 0)
          {
            *(_DWORD *)(a6 + 4 * (int)(v22 - 1)) = v50;
            unsigned int v53 = a1[v52];
          }
          int v54 = ~v53;
        }
        int v55 = 0;
        *unint64_t v51 = v54;
        unsigned int v56 = (unsigned int *)(v51 + 1);
        int v57 = v13;
        unint64_t v58 = (unsigned int *)v13;
        while (1)
        {
          unsigned int v60 = *v58;
          unsigned int v59 = *v58 - 1;
          if ((int)*v58 < 1)
          {
            if (v60) {
              *unint64_t v58 = ~v60;
            }
            else {
              int v57 = (int *)v58;
            }
            goto LABEL_64;
          }
          if ((v60 & v20) != 0)
          {
            uint64_t v61 = a1[v59];
            *unint64_t v58 = v61;
            if (v49 == v61) {
              goto LABEL_68;
            }
          }
          else
          {
            *(_DWORD *)(a6 + 4 * (int)(v60 / v21 - 1)) = v55;
            uint64_t v61 = a1[v59];
            *unint64_t v58 = v61;
            if (v49 == v61)
            {
LABEL_68:
              BOOL v62 = v60 >= 2;
              uint64_t v63 = v60 - 2;
              if (v62) {
                goto LABEL_76;
              }
              goto LABEL_63;
            }
          }
          *(_DWORD *)&v14[4 * v49] = (unint64_t)((char *)v56 - (char *)v13) >> 2;
          unsigned int v56 = (unsigned int *)&v13[*(int *)&v14[4 * v61]];
          unsigned int v49 = v61;
          BOOL v62 = v60 >= 2;
          uint64_t v63 = v60 - 2;
          if (v62)
          {
LABEL_76:
            unsigned int v64 = a1[v63];
            if (v64 < v61)
            {
              if ((v59 & v20) == 0)
              {
                *(_DWORD *)(a6 + 4 * (int)(v59 / v21 - 1)) = (unint64_t)((char *)v56 - (char *)v13) >> 2;
                unsigned int v64 = a1[v63];
              }
              unsigned int v59 = ~v64;
            }
          }
LABEL_63:
          *v56++ = v59;
LABEL_64:
          ++v58;
          ++v55;
          if (v58 >= (unsigned int *)&v13[a4]) {
            goto LABEL_99;
          }
        }
      }
      if (v17 > 0)
      {
        uint64_t v37 = 254;
        while (1)
        {
          uint64_t v38 = v37;
          int v39 = v37 + 1;
          int v40 = v37 << 8;
          int v41 = &v13[v16[v40 | v39]];
          int v42 = &v13[*(int *)&v14[4 * v38 + 4] - 1];
          if (v41 <= v42) {
            break;
          }
LABEL_39:
          uint64_t v37 = v38 - 1;
          if (!v38) {
            goto LABEL_80;
          }
        }
        int v43 = 0;
        int v44 = -1;
        while (1)
        {
          int v45 = *v42;
          unsigned int v46 = *v42 - 1;
          if (*v42 < 1)
          {
            if (v45) {
              *int v42 = ~v45;
            }
            goto LABEL_44;
          }
          unsigned int v47 = a1[v46];
          *int v42 = ~v47;
          if (v45 == 1)
          {
            int v48 = 0;
            if (v44 != v47) {
              goto LABEL_55;
            }
          }
          else
          {
            if (a1[v45 - 2] > v47) {
              int v48 = -v45;
            }
            else {
              int v48 = v46;
            }
            if (v44 != v47)
            {
LABEL_55:
              if ((v44 & 0x80000000) == 0) {
                v16[v44 | v40] = (unint64_t)((char *)v43 - (char *)v13) >> 2;
              }
              int v43 = &v13[v16[v40 | v47]];
              int v44 = v47;
            }
          }
          *v43-- = v48;
LABEL_44:
          if (v41 > --v42) {
            goto LABEL_39;
          }
        }
      }
LABEL_80:
      uint64_t v65 = a1[v10];
      uint64_t v66 = &v13[*(int *)&v14[4 * v65]];
      unsigned int v67 = a1[a4 - 2];
      if (v67 < v65) {
        int v68 = ~v67;
      }
      else {
        int v68 = v10;
      }
      int *v66 = v68;
      unint64_t v69 = v66 + 1;
      int v57 = v13;
      int v70 = v13;
      while (1)
      {
        int v71 = *v70;
        unsigned int v72 = *v70 - 1;
        if (*v70 < 1)
        {
          if (v71) {
            *int v70 = ~v71;
          }
          else {
            int v57 = v70;
          }
          goto LABEL_86;
        }
        unsigned int v73 = a1[v72];
        *int v70 = v73;
        if (v71 == 1)
        {
          int v74 = 0;
          if (v65 == v73) {
            goto LABEL_85;
          }
        }
        else
        {
          unsigned int v75 = a1[v71 - 2];
          if (v75 < v73) {
            int v74 = ~v75;
          }
          else {
            int v74 = v72;
          }
          if (v65 == v73) {
            goto LABEL_85;
          }
        }
        *(_DWORD *)&v14[4 * v65] = (unint64_t)((char *)v69 - (char *)v13) >> 2;
        unint64_t v69 = &v13[*(int *)&v14[4 * v73]];
        LODWORD(v65) = v73;
LABEL_85:
        *v69++ = v74;
LABEL_86:
        if (++v70 >= &v13[a4])
        {
LABEL_99:
          unint64_t v76 = (char *)v57 - (char *)v13;
          unint64_t v77 = (unint64_t)((char *)v57 - (char *)v13) >> 2;
          *a2 = a1[v10];
          if ((int)v77 < 1)
          {
            unsigned int v84 = 0;
          }
          else
          {
            unint64_t v78 = (v76 >> 2);
            if (v78 < 8 || a2 + 1 < (unsigned char *)&v13[v78] && v13 < (int *)&a2[v78 + 1])
            {
              unint64_t v79 = 0;
              goto LABEL_104;
            }
            if (v78 >= 0x20)
            {
              unint64_t v90 = (v76 >> 2) & 0x1F;
              unint64_t v79 = v78 - v90;
              unsigned int v91 = (int8x16_t *)(a2 + 17);
              int32x4_t v92 = (int8x16x4_t *)(v13 + 16);
              unint64_t v93 = v78 - v90;
              do
              {
                int8x16x4_t v114 = *v92;
                v91[-1] = vqtbl4q_s8(v92[-1], (int8x16_t)xmmword_1889B9EC0);
                *unsigned int v91 = vqtbl4q_s8(v114, (int8x16_t)xmmword_1889B9EC0);
                v91 += 2;
                v92 += 2;
                v93 -= 32;
              }
              while (v93);
              unsigned int v84 = v77;
              if (v90)
              {
                if (v90 < 8) {
                  goto LABEL_104;
                }
                goto LABEL_121;
              }
            }
            else
            {
              unint64_t v79 = 0;
LABEL_121:
              uint64_t v94 = (v76 >> 2) & 7;
              uint64_t v95 = (int8x16x2_t *)&v13[v79];
              uint64_t v96 = &a2[v79];
              unint64_t v97 = v79 + v94;
              unint64_t v79 = v78 - v94;
              BOOL v98 = v96 + 1;
              unint64_t v99 = v97 - v78;
              do
              {
                int8x16x2_t v112 = *v95++;
                *v98++ = vqtbl2q_s8(v112, (int8x16_t)xmmword_1889B9ED0).u64[0];
                v99 += 8;
              }
              while (v99);
              unsigned int v84 = v77;
              if (v94)
              {
LABEL_104:
                unint64_t v80 = &v13[v79];
                unint64_t v81 = v79 - v78;
                uint64_t v82 = &a2[v79 + 1];
                do
                {
                  int v83 = *v80++;
                  *v82++ = v83;
                  BOOL v62 = __CFADD__(v81++, 1);
                }
                while (!v62);
                unsigned int v84 = v77;
              }
            }
          }
          if ((int)(v84 + 1) >= (int)a4) {
            goto LABEL_136;
          }
          uint64_t v85 = v84;
          uint64_t v86 = v84 + 1;
          uint64_t v87 = a4 - v84 - 2;
          if (v87 >= 7
            && (&a2[v86] >= (unsigned char *)&v13[v84 + 2 + v87] || &v13[v84 + 1] >= (int *)&a2[v84 + 2 + v87]))
          {
            uint64_t v88 = v87 + 1;
            if (v87 >= 0x1F)
            {
              uint64_t v89 = v88 & 0x1FFFFFFE0;
              uint64_t v100 = (int8x16_t *)&a2[v84 + 17];
              int v101 = (int8x16x4_t *)&v13[v85 + 17];
              uint64_t v102 = v88 & 0x1FFFFFFE0;
              do
              {
                int8x16x4_t v115 = *v101;
                v100[-1] = vqtbl4q_s8(v101[-1], (int8x16_t)xmmword_1889B9EC0);
                int8x16_t *v100 = vqtbl4q_s8(v115, (int8x16_t)xmmword_1889B9EC0);
                v100 += 2;
                v101 += 2;
                v102 -= 32;
              }
              while (v102);
              if (v88 == v89) {
                goto LABEL_136;
              }
              if ((v88 & 0x18) != 0) {
                goto LABEL_129;
              }
              v86 += v89;
            }
            else
            {
              uint64_t v89 = 0;
LABEL_129:
              v86 += v88 & 0x1FFFFFFF8;
              uint64_t v103 = v89 - (v88 & 0x1FFFFFFF8);
              uint64_t v104 = v89 + v85;
              int v105 = (int8x16x2_t *)&v13[v104 + 1];
              unint64_t v106 = &a2[v104 + 1];
              do
              {
                int8x16x2_t v113 = *v105++;
                *v106++ = vqtbl2q_s8(v113, (int8x16_t)xmmword_1889B9ED0).u64[0];
                v103 += 8;
              }
              while (v103);
              if (v88 == (v88 & 0x1FFFFFFF8))
              {
LABEL_136:
                uint64_t v6 = (v77 + 1);
                break;
              }
            }
          }
          BOOL v107 = &a2[v86];
          unint64_t v108 = &v13[v86];
          do
          {
            int v109 = *v108++;
            *v107++ = v109;
            LODWORD(v86) = v86 + 1;
          }
          while ((int)v86 < (int)a4);
          goto LABEL_136;
        }
      }
    }
    free(v16);
    free(v14);
    if (!a3) {
      free(v13);
    }
  }
  return v6;
}

uint64_t ZDICT_trainFromBuffer_fastCover(char *a1, size_t a2, uint64_t a3, int64x2_t *a4, unsigned int a5, uint64_t *a6)
{
  int v7 = *((_DWORD *)a6 + 12);
  g_displayLevel = v7;
  a6[3] = 0x3FF0000000000000;
  if (*((_DWORD *)a6 + 2)) {
    int v8 = *((_DWORD *)a6 + 2);
  }
  else {
    int v8 = 20;
  }
  *((_DWORD *)a6 + 2) = v8;
  if (*((_DWORD *)a6 + 8) <= 1u) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = *((_DWORD *)a6 + 8);
  }
  *((_DWORD *)a6 + 8) = v9;
  unsigned int v10 = HIDWORD(*a6);
  size_t v11 = *a6;
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12
    || (v10 != 8 ? (BOOL v14 = v10 == 6) : (BOOL v14 = 1),
        v14 ? (BOOL v15 = v11 > a2) : (BOOL v15 = 1),
        v15
     || ((v8 - 32) >= 0xFFFFFFE1 ? (BOOL v16 = v10 > v11) : (BOOL v16 = 1),
         !v16 ? (BOOL v17 = v9 >= 0xB) : (BOOL v17 = 1),
         v17)))
  {
    if (v7 >= 1)
    {
      unsigned int v18 = (FILE **)MEMORY[0x1E4F143C8];
      fwrite("FASTCOVER parameters incorrect\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      fflush(*v18);
    }
    return -42;
  }
  else if (a5)
  {
    if (a2 > 0xFF)
    {
      uint64_t v40 = *a6;
      uint64_t v39 = *(uint64_t *)((char *)a6 + 12);
      int v26 = *((_DWORD *)a6 + 9);
      uint64_t v27 = *(uint64_t *)((char *)a6 + 44);
      int v28 = *((_DWORD *)a6 + 13);
      *(_OWORD *)unint64_t v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      *(_OWORD *)int v48 = 0u;
      unint64_t v29 = FASTCOVER_ctx_init((uint64_t *)v48, a3, a4, a5, v10, v8, FASTCOVER_defaultAccelParameters[v9], 1.0);
      if (v29 >= 0xFFFFFFFFFFFFFF89)
      {
        unint64_t v19 = v29;
        if (g_displayLevel >= 1)
        {
          uint64_t v38 = (FILE **)MEMORY[0x1E4F143C8];
          fwrite("Failed to initialize context\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          fflush(*v38);
        }
      }
      else
      {
        int v30 = g_displayLevel;
        if (g_displayLevel >= 1 && (double)(unint64_t)v51[0] / (double)a2 < 10.0)
        {
          int v31 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "WARNING: The maximum dictionary size %u is too large compared to the source size %u! size(source)/size(dictionary) = %f, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! \n", a2, LODWORD(v51[0]), (double)(unint64_t)v51[0] / (double)a2);
          fflush(*v31);
          int v30 = g_displayLevel;
        }
        if (v30 > 1)
        {
          unsigned int v32 = (FILE **)MEMORY[0x1E4F143C8];
          fwrite("Building dictionary\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          fflush(*v32);
        }
        unsigned int v33 = malloc_type_calloc(1 << *((_DWORD *)a6 + 2), 2uLL, 0x1000040BDFB0063uLL);
        *(void *)&long long v34 = v40;
        *((void *)&v34 + 1) = v39;
        long long v41 = v34;
        uint64_t v42 = 0x3FF0000000000000;
        int v43 = v26;
        int v44 = 0;
        uint64_t v45 = v27;
        int v46 = v28;
        int v47 = 0;
        size_t v35 = FASTCOVER_buildDictionary((uint64_t *)v48, (uint64_t)v51[1], (uint64_t)a1, a2, &v41, (uint64_t)v33);
        unint64_t v19 = ZDICT_finalizeDictionary(a1, a2, (unsigned int *)&a1[v35], a2 - v35, a3, (uint64_t)a4, (unint64_t)v50 * DWORD2(v52) / 0x64, v36, v27, HIDWORD(v27), v28);
        if (v19 <= 0xFFFFFFFFFFFFFF88 && g_displayLevel >= 2)
        {
          uint64_t v37 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "Constructed dictionary of size %u\n", v19);
          fflush(*v37);
        }
        free(v51[1]);
        v51[1] = 0;
        free(v48[1]);
        v48[1] = 0;
        free(v33);
      }
    }
    else
    {
      if (v7 >= 1)
      {
        unsigned int v21 = (FILE **)MEMORY[0x1E4F143C8];
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "dictBufferCapacity must be at least %u\n", 256);
        fflush(*v21);
      }
      return -70;
    }
  }
  else
  {
    if (v7 >= 1)
    {
      unsigned int v22 = (FILE **)MEMORY[0x1E4F143C8];
      fwrite("FASTCOVER must have at least one input file\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      fflush(*v22);
    }
    return -72;
  }
  return v19;
}

uint64_t FASTCOVER_ctx_init(uint64_t *a1, uint64_t a2, int64x2_t *a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, double a8)
{
  unsigned int v10 = (uint64_t *)a3;
  if (a4)
  {
    if (a4 >= 4)
    {
      uint64_t v12 = a4 & 0xFFFFFFFC;
      BOOL v14 = a3 + 1;
      int64x2_t v15 = 0uLL;
      uint64_t v16 = v12;
      int64x2_t v17 = 0uLL;
      do
      {
        int64x2_t v15 = vaddq_s64(v14[-1], v15);
        int64x2_t v17 = vaddq_s64(*v14, v17);
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      unint64_t v13 = vaddvq_s64(vaddq_s64(v17, v15));
      if (v12 == a4) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
    }
    uint64_t v18 = a4 - v12;
    unint64_t v19 = &a3->i64[v12];
    do
    {
      uint64_t v20 = *v19++;
      v13 += v20;
      --v18;
    }
    while (v18);
  }
  else
  {
    unint64_t v13 = 0;
  }
LABEL_10:
  uint64_t v21 = ((double)a4 * a8);
  if (a8 >= 1.0) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = ((double)a4 * a8);
  }
  uint64_t v23 = a4 - v22;
  if (a8 >= 1.0) {
    uint64_t v24 = a4;
  }
  else {
    uint64_t v24 = v21;
  }
  uint64_t v25 = v13;
  int v26 = v13;
  if (a8 >= 1.0) {
    goto LABEL_35;
  }
  if (!v21)
  {
    uint64_t v21 = 0;
    uint64_t v25 = 0;
    goto LABEL_26;
  }
  if (v21 < 4)
  {
    uint64_t v27 = 0;
    uint64_t v25 = 0;
LABEL_24:
    uint64_t v32 = v21 - v27;
    unsigned int v33 = &a3->i64[v27];
    do
    {
      uint64_t v34 = *v33++;
      v25 += v34;
      --v32;
    }
    while (v32);
    goto LABEL_26;
  }
  uint64_t v27 = v21 & 0xFFFFFFFC;
  int v28 = a3 + 1;
  int64x2_t v29 = 0uLL;
  uint64_t v30 = v27;
  int64x2_t v31 = 0uLL;
  do
  {
    int64x2_t v29 = vaddq_s64(v28[-1], v29);
    int64x2_t v31 = vaddq_s64(*v28, v31);
    v28 += 2;
    v30 -= 4;
  }
  while (v30);
  uint64_t v25 = vaddvq_s64(vaddq_s64(v31, v29));
  if (v27 != v21) {
    goto LABEL_24;
  }
LABEL_26:
  if (a4 == v22)
  {
    int v26 = 0;
  }
  else
  {
    if (v23 >= 4)
    {
      uint64_t v35 = v23 & 0xFFFFFFFC;
      uint64_t v36 = (int64x2_t *)((char *)a3 + 8 * v21 + 16);
      int64x2_t v37 = 0uLL;
      uint64_t v38 = v35;
      int64x2_t v39 = 0uLL;
      do
      {
        int64x2_t v37 = vaddq_s64(v36[-1], v37);
        int64x2_t v39 = vaddq_s64(*v36, v39);
        v36 += 2;
        v38 -= 4;
      }
      while (v38);
      int v26 = vaddvq_s64(vaddq_s64(v39, v37));
      if (v35 == v23) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v35 = 0;
      int v26 = 0;
    }
    uint64_t v40 = v23 - v35;
    long long v41 = &a3->i64[v21 + v35];
    do
    {
      uint64_t v42 = *v41++;
      v26 += v42;
      --v40;
    }
    while (v40);
  }
LABEL_35:
  if (a5 <= 8) {
    unint64_t v43 = 8;
  }
  else {
    unint64_t v43 = a5;
  }
  if (v13 < v43 || v13 >= 0xFFFFFFFF)
  {
    if (g_displayLevel >= 1)
    {
      uint64_t v45 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Total samples size is too large (%u MB), maximum size is %u MB\n");
LABEL_51:
      fflush(*v45);
    }
    return -72;
  }
  if (v24 <= 4)
  {
    if (g_displayLevel >= 1)
    {
      uint64_t v45 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Total number of training samples is %u and is invalid\n");
      goto LABEL_51;
    }
    return -72;
  }
  if (a4 == v22)
  {
    if (g_displayLevel >= 1)
    {
      uint64_t v45 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Total number of testing samples is %u and is invalid.\n");
      goto LABEL_51;
    }
    return -72;
  }
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  if (g_displayLevel >= 2)
  {
    int v48 = (FILE **)MEMORY[0x1E4F143C8];
    uint64_t v76 = a2;
    int v77 = a6;
    uint64_t v75 = a7;
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Training on %u samples of total size %u\n", v24, v25);
    fflush(*v48);
    a7 = v75;
    a2 = v76;
    a6 = v77;
    if (g_displayLevel >= 2)
    {
      fprintf(*v48, "Testing on %u samples of total size %u\n", v23, v26);
      fflush(*v48);
      a7 = v75;
      a2 = v76;
      a6 = v77;
    }
  }
  *a1 = a2;
  a1[2] = (uint64_t)v10;
  a1[3] = a4;
  a1[4] = v24;
  a1[5] = v23;
  a1[6] = v25 - v43 + 1;
  *((_DWORD *)a1 + 16) = a5;
  *((_DWORD *)a1 + 17) = a6;
  char v49 = a6;
  unsigned int v50 = a4 + 1;
  a1[9] = a7;
  unint64_t v51 = malloc_type_calloc(a4 + 1, 8uLL, 0x100004000313F17uLL);
  a1[1] = (uint64_t)v51;
  if (!v51)
  {
    if (g_displayLevel < 1)
    {
LABEL_84:
      int v74 = (void *)a1[7];
LABEL_85:
      free(v74);
      a1[7] = 0;
      free((void *)a1[1]);
      a1[1] = 0;
      return -64;
    }
    int v71 = (FILE **)MEMORY[0x1E4F143C8];
    unsigned int v72 = (FILE *)*MEMORY[0x1E4F143C8];
    unsigned int v73 = "Failed to allocate scratch buffers \n";
LABEL_83:
    fwrite(v73, 0x24uLL, 1uLL, v72);
    fflush(*v71);
    goto LABEL_84;
  }
  *unint64_t v51 = 0;
  if (a4)
  {
    uint64_t v52 = 0;
    if (v50 <= 2) {
      uint64_t v53 = 2;
    }
    else {
      uint64_t v53 = v50;
    }
    int v54 = v51 + 1;
    uint64_t v55 = v53 - 1;
    do
    {
      uint64_t v56 = *v10++;
      v52 += v56;
      *v54++ = v52;
      --v55;
    }
    while (v55);
  }
  int v57 = (char *)malloc_type_calloc(1 << v49, 4uLL, 0x100004052888210uLL);
  a1[7] = (uint64_t)v57;
  if (!v57)
  {
    if (g_displayLevel < 1)
    {
      int v74 = 0;
      goto LABEL_85;
    }
    int v71 = (FILE **)MEMORY[0x1E4F143C8];
    unsigned int v72 = (FILE *)*MEMORY[0x1E4F143C8];
    unsigned int v73 = "Failed to allocate frequency table \n";
    goto LABEL_83;
  }
  if (g_displayLevel >= 2)
  {
    unint64_t v58 = (FILE **)MEMORY[0x1E4F143C8];
    fwrite("Computing frequencies\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    fflush(*v58);
    int v57 = (char *)a1[7];
  }
  uint64_t v59 = a1[4];
  if (!v59) {
    return 0;
  }
  uint64_t v60 = 0;
  unsigned int v61 = *((_DWORD *)a1 + 16);
  if (v61 <= 8) {
    uint64_t v62 = 8;
  }
  else {
    uint64_t v62 = v61;
  }
  uint64_t v63 = (unint64_t *)a1[1];
  char v64 = 64 - *((_DWORD *)a1 + 17);
  unint64_t v65 = 0xCF1BBCDCBF9B0000;
  if (v61 != 6) {
    unint64_t v65 = 0xCF1BBCDCB7A56463;
  }
  uint64_t v66 = *((unsigned int *)a1 + 19) + 1;
  unint64_t v67 = *v63;
  do
  {
    unint64_t v68 = v63[++v60];
    if (v67 + v62 <= v68)
    {
      uint64_t v69 = *a1;
      do
      {
        uint64_t v70 = 4 * ((*(void *)(v69 + v67) * v65) >> v64);
        ++*(_DWORD *)&v57[v70];
        v67 += v66;
      }
      while (v62 + v67 <= v68);
    }
    uint64_t v46 = 0;
    unint64_t v67 = v68;
  }
  while (v60 != v59);
  return v46;
}

size_t FASTCOVER_buildDictionary(uint64_t *a1, uint64_t a2, uint64_t a3, size_t a4, _DWORD *a5, uint64_t a6)
{
  size_t v8 = a4;
  unsigned int v11 = *((_DWORD *)a1 + 12);
  unsigned int v12 = 10 * *a5;
  if (*a5 > a4) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = a4 / *a5;
  }
  unsigned int v14 = v11 / v13;
  if (v11 / v13 >= v12)
  {
    unint64_t v15 = v13;
    uint64_t v16 = (int *)&unk_1E90FF000;
    if (g_displayLevel < 2) {
      goto LABEL_6;
    }
LABEL_12:
    int64x2_t v17 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Breaking content into %u epochs of size %u\n", v15, v14);
    uint64_t v18 = *v17;
    uint64_t v16 = (_DWORD *)&unk_1E90FF000;
    fflush(v18);
    if (!v8) {
      goto LABEL_62;
    }
    goto LABEL_13;
  }
  if (v12 >= v11) {
    unsigned int v14 = *((_DWORD *)a1 + 12);
  }
  else {
    unsigned int v14 = 10 * *a5;
  }
  unint64_t v15 = v11 / v14;
  uint64_t v16 = (int *)&unk_1E90FF000;
  if (g_displayLevel >= 2) {
    goto LABEL_12;
  }
LABEL_6:
  if (a4)
  {
LABEL_13:
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    size_t v57 = v8;
    while (1)
    {
      unsigned int v23 = v14 * v19;
      uint64_t v24 = v14 * v19 + v14;
      int v25 = a5[1];
      int v26 = *((_DWORD *)a1 + 17);
      if (v14 * v19 < v24) {
        break;
      }
      uint64_t v29 = 0;
      int v28 = 0;
      unsigned int v27 = 0;
LABEL_35:
      if (v23 < v24)
      {
        if (v25 == 6) {
          unint64_t v40 = 0xCF1BBCDCBF9B0000;
        }
        else {
          unint64_t v40 = 0xCF1BBCDCB7A56463;
        }
        uint64_t v41 = v24 - v23;
        uint64_t v42 = (uint64_t *)(*a1 + v23);
        do
        {
          uint64_t v43 = *v42;
          uint64_t v42 = (uint64_t *)((char *)v42 + 1);
          --*(_WORD *)(a6 + 2 * ((v43 * v40) >> (64 - v26)));
          --v41;
        }
        while (v41);
      }
      unsigned int v44 = v28 - v27;
      if (v28 != v27)
      {
        uint64_t v45 = *a1;
        char v46 = 64 - v26;
        unint64_t v47 = v25 == 6 ? 0xCF1BBCDCBF9B0000 : 0xCF1BBCDCB7A56463;
        unsigned int v48 = v27;
        if (v44 < 2) {
          goto LABEL_67;
        }
        unsigned int v48 = v27;
        if (v28 - 1 < v27) {
          goto LABEL_67;
        }
        unsigned int v48 = v27 + (v44 & 0xFFFFFFFE);
        unsigned int v49 = v27;
        unsigned int v50 = v44 & 0xFFFFFFFE;
        do
        {
          unint64_t v51 = (*(void *)(v45 + v49 + 1) * v47) >> v46;
          *(_DWORD *)(a2 + 4 * ((*(void *)(v45 + v49) * v47) >> v46)) = 0;
          *(_DWORD *)(a2 + 4 * v51) = 0;
          v49 += 2;
          v50 -= 2;
        }
        while (v50);
        if (v44 != (v44 & 0xFFFFFFFE))
        {
LABEL_67:
          do
            *(_DWORD *)(a2 + 4 * ((*(void *)(v45 + v48++) * v47) >> v46)) = 0;
          while (v28 != v48);
        }
      }
      if (v29)
      {
        size_t v52 = a5[1];
        size_t v53 = v28 + ~v27 + v52;
        if (v8 >= v53) {
          size_t v54 = v53;
        }
        else {
          size_t v54 = v8;
        }
        if (v54 < v52) {
          goto LABEL_62;
        }
        v8 -= v54;
        memcpy((void *)(a3 + v8), (const void *)(*a1 + v27), v54);
        if (v16[234] >= 2 && (clock() - g_time > 0x249F0 || v16[234] >= 4))
        {
          g_time = clock();
          uint64_t v21 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%u%%       ", 100 * (v57 - v8) / v57);
          unsigned int v22 = *v21;
          uint64_t v16 = (int *)&unk_1E90FF000;
          fflush(v22);
        }
        unint64_t v20 = 0;
        unint64_t v19 = (v19 + 1) % v15;
        if (!v8) {
          goto LABEL_62;
        }
      }
      else
      {
        if (v20 > 8) {
          goto LABEL_62;
        }
        ++v20;
        unint64_t v19 = (v19 + 1) % v15;
        if (!v8) {
          goto LABEL_62;
        }
      }
    }
    unsigned int v27 = 0;
    int v28 = 0;
    LODWORD(v29) = 0;
    unsigned int v30 = 0;
    uint64_t v31 = *a1;
    char v32 = 64 - v26;
    if (v25 == 6) {
      unint64_t v33 = 0xCF1BBCDCBF9B0000;
    }
    else {
      unint64_t v33 = 0xCF1BBCDCB7A56463;
    }
    int v34 = *a5 - v25 + 1;
    uint64_t v35 = v14 * v19;
    while (1)
    {
      unint64_t v37 = (*(void *)(v31 + v35) * v33) >> v32;
      if (*(_WORD *)(a6 + 2 * v37))
      {
        ++*(_WORD *)(a6 + 2 * v37);
        if (v34 + v23 == v35) {
          goto LABEL_32;
        }
      }
      else
      {
        v30 += *(_DWORD *)(a2 + 4 * v37);
        *(_WORD *)(a6 + 2 * v37) = 1;
        if (v34 + v23 == v35)
        {
LABEL_32:
          unint64_t v38 = (*(void *)(v31 + v23) * v33) >> v32;
          __int16 v39 = *(_WORD *)(a6 + 2 * v38) - 1;
          *(_WORD *)(a6 + 2 * v38) = v39;
          if (!v39) {
            v30 -= *(_DWORD *)(a2 + 4 * v38);
          }
          ++v23;
        }
      }
      ++v35;
      BOOL v36 = v30 > v29;
      if (v30 <= v29) {
        uint64_t v29 = v29;
      }
      else {
        uint64_t v29 = v30;
      }
      if (v36)
      {
        int v28 = v35;
        unsigned int v27 = v23;
      }
      if (v24 == v35) {
        goto LABEL_35;
      }
    }
  }
LABEL_62:
  if (v16[234] >= 2)
  {
    uint64_t v55 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%79s\r", "");
    fflush(*v55);
  }
  return v8;
}

uint64_t ZDICT_optimizeTrainFromBuffer_fastCover(void *a1, unint64_t a2, uint64_t a3, int64x2_t *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (*(double *)(a6 + 24) <= 0.0) {
    double v6 = 0.75;
  }
  else {
    double v6 = *(double *)(a6 + 24);
  }
  unsigned int v8 = *(_DWORD *)a6;
  int v7 = *(_DWORD *)(a6 + 4);
  char v9 = v7 == 0;
  if (v7) {
    unsigned int v10 = *(_DWORD *)(a6 + 4);
  }
  else {
    unsigned int v10 = 6;
  }
  if (v7) {
    unsigned int v11 = *(_DWORD *)(a6 + 4);
  }
  else {
    unsigned int v11 = 8;
  }
  if (*(_DWORD *)(a6 + 12)) {
    unsigned int v12 = *(_DWORD *)(a6 + 12);
  }
  else {
    unsigned int v12 = 40;
  }
  if (v8) {
    unsigned int v13 = *(_DWORD *)a6;
  }
  else {
    unsigned int v13 = 50;
  }
  if (v8) {
    unsigned int v14 = *(_DWORD *)a6;
  }
  else {
    unsigned int v14 = 2000;
  }
  if (v8) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = 1950;
  }
  if (v15 / v12 <= 1) {
    unsigned int v16 = 1;
  }
  else {
    unsigned int v16 = v15 / v12;
  }
  if (*(_DWORD *)(a6 + 8)) {
    int v17 = *(_DWORD *)(a6 + 8);
  }
  else {
    int v17 = 20;
  }
  unsigned int v18 = *(_DWORD *)(a6 + 32);
  if (v18 <= 1) {
    unsigned int v18 = 1;
  }
  int v19 = *(_DWORD *)(a6 + 48);
  if (v6 <= 0.0 || v6 > 1.0)
  {
    if (v19 >= 1)
    {
      unint64_t v20 = (FILE **)MEMORY[0x1E4F143C8];
      uint64_t v21 = (FILE *)*MEMORY[0x1E4F143C8];
      unsigned int v22 = "Incorrect splitPoint\n";
      size_t v23 = 21;
      goto LABEL_37;
    }
    return -42;
  }
  if (v18 >= 0xB)
  {
    if (v19 >= 1)
    {
      unint64_t v20 = (FILE **)MEMORY[0x1E4F143C8];
      uint64_t v21 = (FILE *)*MEMORY[0x1E4F143C8];
      unsigned int v22 = "Incorrect accel\n";
      size_t v23 = 16;
LABEL_37:
      fwrite(v22, v23, 1uLL, v21);
      fflush(*v20);
      return -42;
    }
    return -42;
  }
  if (v13 < v11 || v14 < v13)
  {
    if (v19 >= 1)
    {
      unint64_t v20 = (FILE **)MEMORY[0x1E4F143C8];
      uint64_t v21 = (FILE *)*MEMORY[0x1E4F143C8];
      unsigned int v22 = "Incorrect k\n";
      size_t v23 = 12;
      goto LABEL_37;
    }
    return -42;
  }
  if (a5)
  {
    if (a2 <= 0xFF)
    {
      if (v19 >= 1)
      {
        int v26 = (FILE **)MEMORY[0x1E4F143C8];
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "dictBufferCapacity must be at least %u\n", 256);
        fflush(*v26);
      }
      return -70;
    }
    unsigned int v62 = v18;
    unsigned int v63 = v11;
    int v61 = v17;
    uint64_t v31 = *(unsigned int *)(a6 + 16);
    __dst = a1;
    unsigned int v57 = v13;
    if (v31 < 2)
    {
      advanced = 0;
    }
    else
    {
      advanced = POOL_create_advanced(v31, 1, &ZSTD_defaultCMem);
      if (!advanced) {
        return -64;
      }
    }
    uint64_t v65 = (uint64_t)advanced;
    memset(v75, 0, sizeof(v75));
    *(_OWORD *)int v74 = 0u;
    memset(&v73, 0, sizeof(v73));
    int v33 = (v15 / v16 + 1) << v9;
    memset(&v72, 0, sizeof(v72));
    pthread_mutex_init(&v72, 0);
    pthread_cond_init(&v73, 0);
    v74[0] = 0;
    v74[1] = 0;
    memset(v75, 0, 56);
    *((void *)&v75[3] + 1) = -1;
    int v66 = *(_DWORD *)(a6 + 16);
    *(_OWORD *)unint64_t v67 = *(_OWORD *)(a6 + 40);
    uint64_t v76 = *(uint64_t *)((char *)v67 + 4);
    uint64_t v56 = FASTCOVER_defaultAccelParameters[v62];
    unsigned int v77 = HIDWORD(v67[1]);
    int v34 = v19 - 1;
    if (!v19) {
      int v34 = 0;
    }
    g_displayLevel = v34;
    if (v19 >= 2)
    {
      uint64_t v35 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Trying %u different sets of parameters\n", v33);
      fflush(*v35);
    }
    unsigned int v54 = v33;
    if (v10 <= v63)
    {
      char v40 = 1;
      long long v41 = 0uLL;
      int v64 = 1;
      while (2)
      {
        *(_OWORD *)uint64_t v70 = v41;
        long long v71 = v41;
        long long v68 = v41;
        long long v69 = v41;
        *(_OWORD *)unint64_t v67 = v41;
        if (v19 >= 3)
        {
          uint64_t v42 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "d=%u\n", v10);
          fflush(*v42);
        }
        unint64_t v43 = FASTCOVER_ctx_init((uint64_t *)v67, a3, a4, a5, v10, v61, v56, v6);
        if (v43 >= 0xFFFFFFFFFFFFFF89)
        {
          uint64_t v24 = v43;
          if (v19 >= 1)
          {
            size_t v53 = (FILE **)MEMORY[0x1E4F143C8];
            fwrite("Failed to initialize context\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            fflush(*v53);
          }
          pthread_mutex_lock(&v72);
          while (v74[0])
            pthread_cond_wait(&v73, &v72);
          pthread_mutex_unlock(&v72);
          if (v74[1]) {
            free(v74[1]);
          }
          pthread_mutex_destroy(&v72);
          pthread_cond_destroy(&v73);
          goto LABEL_109;
        }
        if ((v40 & 1) != 0 && v19 >= 1 && (double)(unint64_t)v70[0] / (double)a2 < 10.0)
        {
          unsigned int v44 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "WARNING: The maximum dictionary size %u is too large compared to the source size %u! size(source)/size(dictionary) = %f, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! \n", a2, LODWORD(v70[0]), (double)(unint64_t)v70[0] / (double)a2);
          fflush(*v44);
        }
        unsigned int v45 = v57;
        do
        {
          while (1)
          {
            char v46 = malloc_type_malloc(0x48uLL, 0x1060040023D7745uLL);
            if (v19 >= 3)
            {
              unint64_t v47 = (FILE **)MEMORY[0x1E4F143C8];
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "k=%u\n", v45);
              fflush(*v47);
            }
            if (!v46)
            {
              if (v19 >= 1)
              {
                size_t v52 = (FILE **)MEMORY[0x1E4F143C8];
                fwrite("Failed to allocate parameters\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
                fflush(*v52);
              }
              pthread_mutex_lock(&v72);
              while (v74[0])
                pthread_cond_wait(&v73, &v72);
              pthread_mutex_unlock(&v72);
              if (v74[1]) {
                free(v74[1]);
              }
              pthread_mutex_destroy(&v72);
              pthread_cond_destroy(&v73);
              free(v70[1]);
              v70[1] = 0;
              free(v67[1]);
              v67[1] = 0;
              uint64_t v24 = -64;
              goto LABEL_109;
            }
            void *v46 = v67;
            v46[1] = &v72;
            void v46[2] = a2;
            uint64_t v48 = v76;
            v46[8] = v77;
            *((_DWORD *)v46 + 6) = v45;
            *((_DWORD *)v46 + 7) = v10;
            *((double *)v46 + 5) = v6;
            *((_DWORD *)v46 + 8) = v12;
            *((_DWORD *)v46 + 9) = v66;
            v46[6] = 0;
            v46[7] = v48;
            int v49 = g_displayLevel;
            *((_DWORD *)v46 + 15) = g_displayLevel;
            if (!v45 || !v10 || v10 != 8 && v10 != 6) {
              break;
            }
            if (v45 > a2 || (DWORD1(v71) - 32) < 0xFFFFFFE1 || v10 > v45) {
              break;
            }
            pthread_mutex_lock(&v72);
            ++v74[0];
            pthread_mutex_unlock(&v72);
            if (v65) {
              POOL_add(v65, (uint64_t)FASTCOVER_tryParameters, (uint64_t)v46);
            }
            else {
              FASTCOVER_tryParameters((char *)v46);
            }
            if (v19 >= 2 && (clock() - g_time > 0x249F0 || v19 >= 4))
            {
              g_time = clock();
              unint64_t v51 = (FILE **)MEMORY[0x1E4F143C8];
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%u%%       ", 100 * v64 / v54);
              fflush(*v51);
            }
            ++v64;
            v45 += v16;
            if (v45 > v14) {
              goto LABEL_97;
            }
          }
          if (v49 >= 1)
          {
            unsigned int v50 = (FILE **)MEMORY[0x1E4F143C8];
            fwrite("FASTCOVER parameters incorrect\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            fflush(*v50);
          }
          free(v46);
          v45 += v16;
        }
        while (v45 <= v14);
LABEL_97:
        pthread_mutex_lock(&v72);
        while (v74[0])
          pthread_cond_wait(&v73, &v72);
        pthread_mutex_unlock(&v72);
        free(v70[1]);
        v70[1] = 0;
        free(v67[1]);
        char v40 = 0;
        v10 += 2;
        long long v41 = 0uLL;
        if (v10 <= v63) {
          continue;
        }
        break;
      }
    }
    if (v19 >= 2)
    {
      BOOL v36 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%79s\r", "");
      fflush(*v36);
    }
    uint64_t v24 = *((void *)&v75[3] + 1);
    if (*((void *)&v75[3] + 1) < 0xFFFFFFFFFFFFFF89)
    {
      *(_OWORD *)unint64_t v67 = *(_OWORD *)((char *)&v75[2] + 4);
      uint64_t v37 = *(void *)&v75[1];
      *(void *)a6 = *((void *)&v75[0] + 1);
      uint64_t v38 = *((void *)&v75[1] + 1);
      int v39 = v75[2];
      *(void *)(a6 + 12) = v37;
      *(void *)(a6 + 24) = v38;
      *(_DWORD *)(a6 + 8) = v61;
      *(void **)(a6 + 44) = *(void **)((char *)v67 + 4);
      *(_DWORD *)(a6 + 52) = HIDWORD(v67[1]);
      *(_DWORD *)(a6 + 32) = v62;
      *(_DWORD *)(a6 + 36) = v39;
      uint64_t v24 = *(void *)&v75[0];
      memcpy(__dst, v74[1], *(size_t *)&v75[0]);
    }
    COVER_best_destroy(&v72);
LABEL_109:
    POOL_free(v65);
    return v24;
  }
  if (v19 >= 1)
  {
    int v28 = (FILE **)MEMORY[0x1E4F143C8];
    fwrite("FASTCOVER must have at least one input file\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    fflush(*v28);
  }
  return -72;
}

void FASTCOVER_tryParameters(char *a1)
{
  uint64_t v2 = *(void *)a1;
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v29 = *(_OWORD *)(a1 + 24);
  long long v30 = v3;
  long long v31 = *(_OWORD *)(a1 + 56);
  size_t v4 = *((void *)a1 + 2);
  unsigned int v5 = malloc_type_calloc(1 << *(_DWORD *)(v2 + 68), 2uLL, 0x1000040BDFB0063uLL);
  double v6 = (char *)malloc_type_malloc(v4, 0xF5C648D8uLL);
  int v7 = malloc_type_malloc(4 << *(_DWORD *)(v2 + 68), 0x957A37F4uLL);
  unsigned int v8 = v7;
  if (v5) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9 || v7 == 0)
  {
    if (g_displayLevel >= 1)
    {
      fwrite("Failed to allocate buffers: out of memory\n", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      uint64_t v11 = 0;
      unsigned int v12 = 0;
      uint64_t v13 = -1;
LABEL_18:
      fflush((FILE *)*MEMORY[0x1E4F143C8]);
      goto LABEL_20;
    }
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = -1;
  }
  else
  {
    memcpy(v7, *(const void **)(v2 + 56), 4 << *(_DWORD *)(v2 + 68));
    long long v26 = v29;
    long long v27 = v30;
    long long v28 = v31;
    size_t v14 = FASTCOVER_buildDictionary((uint64_t *)v2, (uint64_t)v8, (uint64_t)v6, v4, &v26, (uint64_t)v5);
    unint64_t v16 = *(void *)(v2 + 24);
    unint64_t v15 = *(void *)(v2 + 32);
    unint64_t v17 = v15 * *(unsigned int *)(v2 + 72) / 0x64;
    uint64_t v19 = *(void *)(v2 + 8);
    uint64_t v18 = *(void *)(v2 + 16);
    uint64_t v20 = *(void *)v2;
    long long v26 = v29;
    long long v27 = v30;
    long long v28 = v31;
    COVER_selectDict(v4, &v6[v14], v4 - v14, v20, v18, v17, v15, v16, &v23, &v26, v19);
    unsigned int v12 = v23;
    uint64_t v11 = v24;
    uint64_t v13 = v25;
    if (v23) {
      BOOL v21 = v25 > 0xFFFFFFFFFFFFFF88;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21 && g_displayLevel >= 1)
    {
      fwrite("Failed to select dictionary\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      goto LABEL_18;
    }
  }
LABEL_20:
  free(v6);
  unsigned int v22 = (pthread_mutex_t *)*((void *)a1 + 1);
  long long v26 = v29;
  long long v27 = v30;
  long long v28 = v31;
  size_t v23 = v12;
  uint64_t v24 = v11;
  unint64_t v25 = v13;
  COVER_best_finish(v22, &v26, (uint64_t)&v23);
  free(a1);
  free(v5);
  free(v12);

  free(v8);
}

const char *ZDICT_getErrorName()
{
  return ERR_getErrorString();
}

uint64_t ZDICT_getDictID(_DWORD *a1, unint64_t a2)
{
  if (a2 >= 8 && *a1 == -332356553) {
    return a1[1];
  }
  else {
    return 0;
  }
}

uint64_t ZDICT_getDictHeaderSize(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9 || *a1 != -332356553) {
    return -30;
  }
  size_t v4 = (char *)malloc_type_malloc(0x11F0uLL, 0x1000040F01E3A99uLL);
  unsigned int v5 = malloc_type_malloc(0x1900uLL, 0xEC1534D4uLL);
  double v6 = v5;
  uint64_t CEntropy = -64;
  if (v4)
  {
    if (v5)
    {
      *(void *)(v4 + 4580) = 0x400000001;
      *((_DWORD *)v4 + 1147) = 8;
      *((_DWORD *)v4 + 256) = 0;
      *((void *)v4 + 571) = 0;
      *((_DWORD *)v4 + 1144) = 0;
      uint64_t CEntropy = ZSTD_loadCEntropy((uint64_t)v4, v5, (uint64_t)a1, a2);
    }
  }
  free(v4);
  free(v6);
  return CEntropy;
}

uint64_t ZDICT_analyzeEntropy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v15 = v14;
  unsigned int v16 = v12;
  uint64_t v133 = v17;
  int v19 = v18;
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = __clz(v14 + 0x20000) ^ 0x1F;
  if (!v12)
  {
    unint64_t v22 = 0;
    goto LABEL_10;
  }
  if (v12 < 4)
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
LABEL_8:
    uint64_t v27 = v12 - v21;
    long long v28 = &v11->i64[v21];
    do
    {
      uint64_t v29 = *v28++;
      v22 += v29;
      --v27;
    }
    while (v27);
    goto LABEL_10;
  }
  uint64_t v21 = v12 & 0xFFFFFFFC;
  size_t v23 = v11 + 1;
  int64x2_t v24 = 0uLL;
  uint64_t v25 = v21;
  int64x2_t v26 = 0uLL;
  do
  {
    int64x2_t v24 = vaddq_s64(v23[-1], v24);
    int64x2_t v26 = vaddq_s64(*v23, v26);
    v23 += 2;
    v25 -= 4;
  }
  while (v25);
  unint64_t v22 = vaddvq_s64(vaddq_s64(v26, v24));
  if (v21 != v12) {
    goto LABEL_8;
  }
LABEL_10:
  if (v20 <= 0x1E)
  {
    uint64_t v129 = v9;
    unint64_t v130 = v10;
    char v135 = v11;
    if (v12) {
      unint64_t v33 = v12;
    }
    else {
      unint64_t v33 = 1;
    }
    int v34 = v13;
    memset_pattern16(v156, &unk_18898EB90, 0x400uLL);
    uint64_t v131 = v20;
    memset_pattern16(&v147, &unk_18898EB90, (4 * v20 + 4));
    memset_pattern16(v144, &unk_18898EB90, 0xD4uLL);
    memset_pattern16(v143, &unk_18898EB90, 0x90uLL);
    bzero(v138, 0x1000uLL);
    int v141 = 1;
    int v140 = 1;
    int v139 = 1;
    if (v19) {
      int v35 = v19;
    }
    else {
      int v35 = 3;
    }
    if (v22 < v33) {
      uint64_t v36 = -1;
    }
    else {
      uint64_t v36 = v22 / v33;
    }
    memset(v158, 0, 28);
    ZSTD_getCParams_internal((uint64_t)v158, v35, v36, v15, 3);
    int v37 = v158[0];
    long long v137 = *(long long *)((char *)v158 + 4);
    uint64_t v38 = *(void *)((char *)&v158[1] + 4);
    LODWORD(v158[0]) = 0;
    long long v165 = 0u;
    long long v164 = 0u;
    long long v163 = 0u;
    long long v162 = 0u;
    long long v161 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    LODWORD(v159) = 1;
    DWORD1(v158[0]) = v37;
    *(long long *)((char *)v158 + 8) = v137;
    *((void *)&v158[1] + 1) = v38;
    *(void *)&long long v167 = 0;
    long long v166 = 0uLL;
    CDict_advanced2 = ZSTD_createCDict_advanced2(v34, v15, 1, 1, v158, (uint64_t)&ZSTD_defaultCMem);
    char v40 = malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
    uint64_t v136 = (uint64_t)v40;
    if (v40)
    {
      bzero(v40, 0xD00uLL);
      ZSTD_clearAllDicts(v136);
      *(void *)(v136 + 176) = 0;
      *(_OWORD *)(v136 + 144) = 0u;
      *(_OWORD *)(v136 + 160) = 0u;
      *(_OWORD *)(v136 + 112) = 0u;
      *(_OWORD *)(v136 + 128) = 0u;
      *(_OWORD *)(v136 + 80) = 0u;
      *(_OWORD *)(v136 + 96) = 0u;
      *(_OWORD *)(v136 + 48) = 0u;
      *(_OWORD *)(v136 + 64) = 0u;
      *(_OWORD *)(v136 + 16) = 0u;
      *(_OWORD *)(v136 + 32) = 0u;
      *(_DWORD *)(v136 + 60) = 3;
      *(_DWORD *)(v136 + 48) = 1;
    }
    long long v41 = malloc_type_malloc(0x20000uLL, 0x7B020AB6uLL);
    uint64_t v42 = (int32x2_t *)v136;
    long long v30 = v41;
    if (!CDict_advanced2 || !v136 || !v41)
    {
      if (a9)
      {
        uint64_t v85 = (FILE **)MEMORY[0x1E4F143C8];
        fwrite("Not enough memory \n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        fflush(*v85);
      }
      uint64_t v32 = -64;
      if (!CDict_advanced2) {
        goto LABEL_138;
      }
LABEL_127:
      BOOL v121 = (void (*)(uint64_t))*((void *)CDict_advanced2 + 616);
      uint64_t v122 = *((void *)CDict_advanced2 + 617);
      uint64_t v124 = CDict_advanced2 + 32;
      uint64_t v123 = (char *)*((void *)CDict_advanced2 + 4);
      if (v123 <= CDict_advanced2)
      {
        BOOL v125 = *((void *)CDict_advanced2 + 5) >= (unint64_t)CDict_advanced2;
        *((_OWORD *)CDict_advanced2 + 4) = 0u;
        *((_OWORD *)CDict_advanced2 + 5) = 0u;
        *uint64_t v124 = 0u;
        *((_OWORD *)CDict_advanced2 + 3) = 0u;
        if (!v123) {
          goto LABEL_133;
        }
      }
      else
      {
        BOOL v125 = 0;
        *((_OWORD *)CDict_advanced2 + 4) = 0u;
        *((_OWORD *)CDict_advanced2 + 5) = 0u;
        *uint64_t v124 = 0u;
        *((_OWORD *)CDict_advanced2 + 3) = 0u;
        if (!v123) {
          goto LABEL_133;
        }
      }
      if (!v121)
      {
        free(v123);
        if (v125) {
          goto LABEL_138;
        }
        goto LABEL_137;
      }
      v121(v122);
LABEL_133:
      if (v125)
      {
LABEL_138:
        unint64_t v31 = v136;
        goto LABEL_139;
      }
      if (v121)
      {
        ((void (*)(uint64_t, char *))v121)(v122, CDict_advanced2);
        goto LABEL_138;
      }
LABEL_137:
      free(CDict_advanced2);
      goto LABEL_138;
    }
    unsigned int v132 = v41;
    uint64_t v134 = (uint64_t)CDict_advanced2;
    unint64_t v43 = v135;
    if (v16)
    {
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      int v46 = 1 << v37;
      if (1 << v37 >= 0x20000) {
        int v46 = 0x20000;
      }
      size_t v47 = v46;
      do
      {
        if (v47 >= v43->i64[v44]) {
          size_t v48 = v43->u64[v44];
        }
        else {
          size_t v48 = v47;
        }
        int v49 = *(_DWORD *)(v134 + 4948);
        long long v161 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        long long v164 = 0u;
        long long v165 = 0u;
        long long v166 = 0u;
        *(void *)&long long v167 = 0;
        long long v160 = 0u;
        long long v159 = 0u;
        v158[1] = 0u;
        v158[0] = 0u;
        *(long long *)((char *)v158 + 4) = *(_OWORD *)(v134 + 288);
        v158[1] = *(_OWORD *)(v134 + 300);
        HIDWORD(v159) = v49;
        if (ZSTD_compressBegin_internal((uint64_t)v42, 0, 0, 0, 0, v134, (uint64_t *)v158, 0xFFFFFFFFFFFFFFFFLL, 0) >= 0xFFFFFFFFFFFFFF89)
        {
          if (!a9) {
            goto LABEL_31;
          }
          long long v71 = (FILE **)MEMORY[0x1E4F143C8];
          fwrite("warning : ZSTD_compressBegin_usingCDict failed \n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
          pthread_mutex_t v72 = *v71;
          goto LABEL_30;
        }
        LODWORD(v50) = 1 << v42[23].i32[1];
        if (v50 >= 0x20000) {
          unint64_t v50 = 0x20000;
        }
        else {
          unint64_t v50 = v50;
        }
        if (v48 > v50
          || (unint64_t v51 = ZSTD_compressContinue_internal(v42, v132, 0x20000uLL, (char *)(v133 + v45), v48, 0, 0),
              uint64_t v42 = (int32x2_t *)v136,
              v51 >= 0xFFFFFFFFFFFFFF89))
        {
          if (a9 < 3) {
            goto LABEL_31;
          }
          pthread_cond_t v73 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "warning : could not compress sample size %u \n", v48);
          pthread_mutex_t v72 = *v73;
LABEL_30:
          fflush(v72);
          uint64_t v42 = (int32x2_t *)v136;
          goto LABEL_31;
        }
        if (!v51) {
          goto LABEL_31;
        }
        size_t v52 = *(unsigned __int8 **)(v136 + 648);
        unint64_t v53 = *(void *)(v136 + 656);
        if ((unint64_t)v52 < v53)
        {
          unint64_t v54 = v53 - (void)v52;
          do
          {
            int v55 = *v52++;
            ++v156[v55];
            --v54;
          }
          while (v54);
        }
        uint64_t v56 = *(void *)(v136 + 632);
        unint64_t v57 = *(void *)(v136 + 640) - v56;
        uint64_t v58 = *(void *)(v136 + 664);
        uint64_t v59 = *(void *)(v136 + 672);
        uint64_t v60 = (v57 >> 3);
        if ((v57 & 0x7FFFFFFF8) != 0)
        {
          int v61 = *(unsigned char **)(v136 + 680);
          unsigned int v62 = (unsigned __int16 *)(v56 + 6);
          unsigned int v63 = *(unsigned char **)(v136 + 664);
          int v64 = *(unsigned char **)(v136 + 672);
          uint64_t v65 = (v57 >> 3);
          do
          {
            while (1)
            {
              unsigned int v66 = *(v62 - 1);
              if (v66 < 0x40) {
                LOBYTE(v67) = ZSTD_LLcode_LL_Code[*(v62 - 1)];
              }
              else {
                unsigned int v67 = 50 - __clz(v66);
              }
              unsigned int v68 = *v62;
              *unsigned int v63 = v67;
              unsigned char *v61 = __clz(*(_DWORD *)(v62 - 3)) ^ 0x1F;
              if (v68 >= 0x80) {
                break;
              }
              v62 += 4;
              *v64++ = ZSTD_MLcode_ML_Code[v68];
              ++v61;
              ++v63;
              if (!--v65) {
                goto LABEL_53;
              }
            }
            v62 += 4;
            *v64++ = 67 - __clz(v68);
            ++v61;
            ++v63;
            --v65;
          }
          while (v65);
        }
LABEL_53:
        int v69 = *(_DWORD *)(v136 + 704);
        if (v69 == 1)
        {
          *(unsigned char *)(v58 + *(unsigned int *)(v136 + 708)) = 35;
          if (*(_DWORD *)(v136 + 704) != 2) {
            goto LABEL_55;
          }
        }
        else if (v69 != 2)
        {
LABEL_55:
          unint64_t v70 = v57 >> 3;
          if (v70) {
            goto LABEL_63;
          }
          goto LABEL_31;
        }
        *(unsigned char *)(v59 + *(unsigned int *)(v136 + 708)) = 52;
        unint64_t v70 = v57 >> 3;
        if (v70)
        {
LABEL_63:
          int v74 = *(unsigned __int8 **)(v136 + 680);
          uint64_t v75 = v60;
          do
          {
            int v76 = *v74++;
            ++v147.i32[v76];
            --v75;
          }
          while (v75);
          unsigned int v77 = *(unsigned __int8 **)(v136 + 672);
          uint64_t v78 = v60;
          do
          {
            int v79 = *v77++;
            ++v144[0].i32[v79];
            --v78;
          }
          while (v78);
          unint64_t v80 = *(unsigned __int8 **)(v136 + 664);
          do
          {
            int v81 = *v80++;
            ++v143[0].i32[v81];
            --v60;
          }
          while (v60);
          if (v70 >= 2)
          {
            uint64_t v82 = *(_DWORD **)(v136 + 632);
            unsigned int v83 = *v82 - 3;
            unsigned int v84 = v82[2] - 3;
            if (v83 > 0x3FF) {
              unsigned int v83 = 0;
            }
            if (v84 > 0x3FF) {
              unsigned int v84 = 0;
            }
            *(_DWORD *)&v138[4 * v83] += 3;
            ++*(_DWORD *)&v138[4 * v84];
          }
        }
LABEL_31:
        unint64_t v43 = v135;
        v45 += v135->i64[v44++];
      }
      while (v44 != v16);
    }
    long long v188 = 0u;
    long long v187 = 0u;
    long long v186 = 0u;
    long long v185 = 0u;
    long long v184 = 0u;
    long long v183 = 0u;
    long long v182 = 0u;
    long long v181 = 0u;
    long long v180 = 0u;
    long long v179 = 0u;
    long long v178 = 0u;
    long long v177 = 0u;
    long long v176 = 0u;
    long long v175 = 0u;
    long long v174 = 0u;
    long long v173 = 0u;
    long long v172 = 0u;
    long long v171 = 0u;
    long long v170 = 0u;
    long long v169 = 0u;
    long long v168 = 0u;
    long long v167 = 0u;
    long long v166 = 0u;
    long long v165 = 0u;
    long long v164 = 0u;
    long long v163 = 0u;
    long long v162 = 0u;
    long long v161 = 0u;
    long long v160 = 0u;
    long long v159 = 0u;
    memset(v158, 0, sizeof(v158));
    unint64_t v86 = HUF_buildCTable_wksp((uint64_t)v155, v156, 255, 0xBu, (char *)v158, 0x1100uLL);
    uint64_t v32 = v86;
    if (v86 >= 0xFFFFFFFFFFFFFF89)
    {
      CDict_advanced2 = (char *)v134;
      if (!a9)
      {
LABEL_126:
        long long v30 = v132;
        goto LABEL_127;
      }
      unint64_t v90 = (FILE **)MEMORY[0x1E4F143C8];
      unsigned int v91 = (FILE *)*MEMORY[0x1E4F143C8];
      int32x4_t v92 = " HUF_buildCTable error \n";
      size_t v93 = 24;
LABEL_88:
      fwrite(v92, v93, 1uLL, v91);
      fflush(*v90);
      goto LABEL_126;
    }
    CDict_advanced2 = (char *)v134;
    if (v86 == 8)
    {
      if (a9 >= 2)
      {
        uint64_t v87 = (FILE **)MEMORY[0x1E4F143C8];
        fwrite("warning : pathological dataset : literals are not compressible : samples are noisy or too regular \n", 0x63uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        fflush(*v87);
      }
      memset_pattern16(v157, &unk_1889B9FD0, 0x3FCuLL);
      v156[0] = 4;
      v157[126] = 0x100000001;
      long long v188 = 0u;
      long long v187 = 0u;
      long long v186 = 0u;
      long long v185 = 0u;
      long long v184 = 0u;
      long long v183 = 0u;
      long long v182 = 0u;
      long long v181 = 0u;
      long long v180 = 0u;
      long long v179 = 0u;
      long long v178 = 0u;
      long long v177 = 0u;
      long long v176 = 0u;
      long long v175 = 0u;
      long long v174 = 0u;
      long long v173 = 0u;
      long long v172 = 0u;
      long long v171 = 0u;
      long long v170 = 0u;
      long long v169 = 0u;
      long long v168 = 0u;
      long long v167 = 0u;
      long long v166 = 0u;
      long long v165 = 0u;
      long long v164 = 0u;
      long long v163 = 0u;
      long long v162 = 0u;
      long long v161 = 0u;
      long long v160 = 0u;
      long long v159 = 0u;
      memset(v158, 0, sizeof(v158));
      LODWORD(v32) = HUF_buildCTable_wksp((uint64_t)v155, v156, 255, 0xBu, (char *)v158, 0x1100uLL);
    }
    if (v131 >= 7)
    {
      uint64_t v88 = ((_BYTE)v131 + 1) & 0x78;
      int32x4_t v94 = v147;
      int32x4_t v95 = v148;
      if (v88 != 8)
      {
        int32x4_t v94 = vaddq_s32(v149, v147);
        int32x4_t v95 = vaddq_s32(v150, v148);
        if (v88 != 16)
        {
          int32x4_t v94 = vaddq_s32(v151, v94);
          int32x4_t v95 = vaddq_s32(v152, v95);
          if (v88 != 24)
          {
            int32x4_t v94 = vaddq_s32(v153, v94);
            int32x4_t v95 = vaddq_s32(v154, v95);
            if (v88 != 32)
            {
              int32x4_t v94 = vaddq_s32(v155[0], v94);
              int32x4_t v95 = vaddq_s32(v155[1], v95);
              if (v88 != 40)
              {
                int32x4_t v94 = vaddq_s32(v155[2], v94);
                int32x4_t v95 = vaddq_s32(v155[3], v95);
                if (v88 != 48)
                {
                  int32x4_t v94 = vaddq_s32(v155[4], v94);
                  int32x4_t v95 = vaddq_s32(v155[5], v95);
                  if (v88 != 56)
                  {
                    int32x4_t v94 = vaddq_s32(v155[6], v94);
                    int32x4_t v95 = vaddq_s32(v155[7], v95);
                  }
                }
              }
            }
          }
        }
      }
      unsigned int v89 = vaddvq_s32(vaddq_s32(v95, v94));
      if (v88 == v131 + 1) {
        goto LABEL_100;
      }
    }
    else
    {
      uint64_t v88 = 0;
      unsigned int v89 = 0;
    }
    uint64_t v96 = &v147.i32[v88];
    uint64_t v97 = v131 - v88 + 1;
    do
    {
      int v98 = *v96++;
      v89 += v98;
      --v97;
    }
    while (v97);
LABEL_100:
    unint64_t v99 = FSE_normalizeCount(v146, 8u, (unsigned int *)&v147, v89, v131, 1);
    if (v99 >= 0xFFFFFFFFFFFFFF89)
    {
      if (a9)
      {
        int8x16x2_t v112 = (FILE **)MEMORY[0x1E4F143C8];
        int8x16x2_t v113 = (FILE *)*MEMORY[0x1E4F143C8];
        int8x16x4_t v114 = "FSE_normalizeCount error with offcodeCount \n";
        size_t v115 = 44;
LABEL_113:
        fwrite(v114, v115, 1uLL, v113);
        fflush(*v112);
        uint64_t v32 = v99;
        goto LABEL_126;
      }
LABEL_125:
      uint64_t v32 = v99;
      goto LABEL_126;
    }
    unint64_t v100 = FSE_normalizeCount((__int16 *)v158, 9u, (unsigned int *)v144, (vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v144[0], v144[4]), vaddq_s32(v144[2], v144[6])), vaddq_s32(vaddq_s32(v144[1], v144[5]), vaddq_s32(v144[3], v144[7]))), vaddq_s32(vaddq_s32(vaddq_s32(v144[8], v144[10]), vaddq_s32(v144[9], v144[11])), v144[12])))+ v145), 0x34u, 1);
    if (v100 >= 0xFFFFFFFFFFFFFF89)
    {
      if (!a9)
      {
LABEL_117:
        uint64_t v32 = v100;
        goto LABEL_126;
      }
      int v116 = (FILE **)MEMORY[0x1E4F143C8];
      int v117 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v118 = "FSE_normalizeCount error with matchLengthCount \n";
      size_t v119 = 48;
LABEL_116:
      fwrite(v118, v119, 1uLL, v117);
      fflush(*v116);
      goto LABEL_117;
    }
    unint64_t v101 = FSE_normalizeCount(v142, 9u, (unsigned int *)v143, vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v143[0], v143[4]), vaddq_s32(v143[2], v143[6])), vaddq_s32(vaddq_s32(v143[1], v143[5]), vaddq_s32(v143[3], v143[7]))), v143[8])), 0x23u, 1);
    if (v101 >= 0xFFFFFFFFFFFFFF89)
    {
      if (a9)
      {
        uint64_t v120 = (FILE **)MEMORY[0x1E4F143C8];
        fwrite("FSE_normalizeCount error with litLengthCount \n", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        fflush(*v120);
      }
      uint64_t v32 = v101;
      goto LABEL_126;
    }
    unint64_t v102 = HUF_writeCTable(v129, v130, (uint64_t)v155, 0xFFu, v32);
    uint64_t v32 = v102;
    if (v102 < 0xFFFFFFFFFFFFFF89)
    {
      unint64_t v103 = FSE_writeNCount((_WORD *)(v129 + v102), v130 - v102, (uint64_t)v146, 30, v99);
      unint64_t v99 = v103;
      if (v103 < 0xFFFFFFFFFFFFFF89)
      {
        uint64_t v104 = (_WORD *)(v129 + v32 + v103);
        unint64_t v105 = v130 - v32 - v103;
        unint64_t v106 = FSE_writeNCount(v104, v105, (uint64_t)v158, 52, v100);
        unint64_t v100 = v106;
        if (v106 < 0xFFFFFFFFFFFFFF89)
        {
          BOOL v107 = (char *)v104 + v106;
          unint64_t v108 = v105 - v106;
          unint64_t v109 = FSE_writeNCount((_WORD *)((char *)v104 + v106), v108, (uint64_t)v142, 35, v101);
          unint64_t v110 = v109;
          if (v109 >= 0xFFFFFFFFFFFFFF89)
          {
            if (a9)
            {
              uint64_t v127 = (FILE **)MEMORY[0x1E4F143C8];
              fwrite("FSE_writeNCount error with litlengthNCount \n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              fflush(*v127);
              uint64_t v32 = v110;
            }
            else
            {
              uint64_t v32 = v109;
            }
          }
          else if (v108 - v109 > 0xB)
          {
            uint64_t v128 = &v107[v109];
            *(void *)uint64_t v128 = 0x400000001;
            *((_DWORD *)v128 + 2) = 8;
            v32 += v99 + v100 + v109 + 12;
          }
          else
          {
            if (a9)
            {
              unint64_t v111 = (FILE **)MEMORY[0x1E4F143C8];
              fwrite("not enough space to write RepOffsets \n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
              fflush(*v111);
            }
            uint64_t v32 = -70;
          }
          goto LABEL_126;
        }
        if (!a9) {
          goto LABEL_117;
        }
        int v116 = (FILE **)MEMORY[0x1E4F143C8];
        int v117 = (FILE *)*MEMORY[0x1E4F143C8];
        uint64_t v118 = "FSE_writeNCount error with matchLengthNCount \n";
        size_t v119 = 46;
        goto LABEL_116;
      }
      if (a9)
      {
        int8x16x2_t v112 = (FILE **)MEMORY[0x1E4F143C8];
        int8x16x2_t v113 = (FILE *)*MEMORY[0x1E4F143C8];
        int8x16x4_t v114 = "FSE_writeNCount error with offcodeNCount \n";
        size_t v115 = 42;
        goto LABEL_113;
      }
      goto LABEL_125;
    }
    if (!a9) {
      goto LABEL_126;
    }
    unint64_t v90 = (FILE **)MEMORY[0x1E4F143C8];
    unsigned int v91 = (FILE *)*MEMORY[0x1E4F143C8];
    int32x4_t v92 = "HUF_writeCTable error \n";
    size_t v93 = 23;
    goto LABEL_88;
  }
  long long v30 = 0;
  unint64_t v31 = 0;
  uint64_t v32 = -34;
LABEL_139:
  ZSTD_freeCCtx(v31);
  free(v30);
  return v32;
}

uint64_t ZDICT_trainFromBuffer_legacy(char *a1, unint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v332 = *MEMORY[0x1E4F143B8];
  if (!a5) {
    return 0;
  }
  uint64_t v14 = a5;
  if (a5 < 4)
  {
    uint64_t v15 = 0;
    size_t v16 = 0;
LABEL_7:
    uint64_t v21 = a5 - v15;
    unint64_t v22 = (uint64_t *)(a4 + 8 * v15);
    do
    {
      uint64_t v23 = *v22++;
      v16 += v23;
      --v21;
    }
    while (v21);
    goto LABEL_9;
  }
  uint64_t v15 = a5 & 0xFFFFFFFC;
  uint64_t v17 = (int64x2_t *)(a4 + 16);
  int64x2_t v18 = 0uLL;
  uint64_t v19 = v15;
  int64x2_t v20 = 0uLL;
  do
  {
    int64x2_t v18 = vaddq_s64(v17[-1], v18);
    int64x2_t v20 = vaddq_s64(*v17, v20);
    v17 += 2;
    v19 -= 4;
  }
  while (v19);
  size_t v16 = vaddvq_s64(vaddq_s64(v20, v18));
  if (v15 != a5) {
    goto LABEL_7;
  }
LABEL_9:
  if (v16 >= 0x200)
  {
    uint64_t v25 = (char *)malloc_type_malloc(v16 + 32, 0xFEBA5CBFuLL);
    if (!v25) {
      return -64;
    }
    int64x2_t v26 = v25;
    memcpy(v25, a3, v16);
    uint64_t v27 = &v26[v16];
    *(_OWORD *)uint64_t v27 = xmmword_1889B9FB0;
    *((_OWORD *)v27 + 1) = xmmword_1889B9FC0;
    *(_DWORD *)int v299 = HIDWORD(a6);
    *(void *)&v299[4] = a7;
    unint64_t v28 = a2 >> 4;
    if (a5 > (a2 >> 4)) {
      LODWORD(v28) = a5;
    }
    if (v28 <= 0x2710) {
      unsigned int v29 = 10000;
    }
    else {
      unsigned int v29 = v28;
    }
    long long v30 = (unsigned int *)malloc_type_malloc(12 * v29, 0x10000403E1C8BA9uLL);
    unint64_t v31 = v30;
    if (a6) {
      unsigned int v32 = a6;
    }
    else {
      unsigned int v32 = 9;
    }
    if (v32 <= 0x1E) {
      unsigned int v33 = a5 >> v32;
    }
    else {
      unsigned int v33 = 4;
    }
    if (a5 >= 4)
    {
      uint64_t v34 = v14 & 0xFFFFFFFC;
      uint64_t v36 = (int64x2_t *)(a4 + 16);
      int64x2_t v37 = 0uLL;
      uint64_t v38 = v34;
      int64x2_t v39 = 0uLL;
      do
      {
        int64x2_t v37 = vaddq_s64(v36[-1], v37);
        int64x2_t v39 = vaddq_s64(*v36, v39);
        v36 += 2;
        v38 -= 4;
      }
      while (v38);
      unint64_t v35 = vaddvq_s64(vaddq_s64(v39, v37));
      if (v34 == v14)
      {
LABEL_31:
        if (!v30)
        {
          unint64_t v24 = -64;
LABEL_340:
          free(v26);
          return v24;
        }
        if (a2 < 0x100)
        {
          unint64_t v24 = -70;
LABEL_339:
          free(v31);
          goto LABEL_340;
        }
        if (v35 < 0x200)
        {
LABEL_338:
          unint64_t v24 = -34;
          goto LABEL_339;
        }
        unsigned int v292 = v33;
        unsigned int v288 = v32;
        int v289 = a1;
        unint64_t v290 = a2;
        *(void *)long long v30 = 1;
        int v298 = v30;
        uint64_t v30[2] = -1;
        int v296 = (int *)malloc_type_malloc(4 * v35 + 8, 0x100004052888210uLL);
        unint64_t v43 = (unsigned int *)malloc_type_malloc(4 * v35, 0x100004052888210uLL);
        int v295 = (char *)malloc_type_malloc(v35 + 16, 0x100004077774924uLL);
        uint64_t v294 = malloc_type_malloc(4 * v14, 0x100004052888210uLL);
        if (a7 >= 2)
        {
          uint64_t v44 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%70s\r", "");
          fflush(*v44);
        }
        unsigned int v293 = a7;
        uint64_t v45 = v295;
        int v46 = (char *)v296;
        if (!v296 || !v43 || !v295 || !v294)
        {
LABEL_54:
          unint64_t v53 = v45;
          free(v46);
          free(v43);
          free(v53);
          free(v294);
          if (a7 >= 3)
          {
            uint64_t v54 = *v298;
            uint64_t v55 = v54 >= 0x19 ? 25 : v54;
            uint64_t v297 = v55;
            if (v54 < 2)
            {
              int v56 = 0;
            }
            else
            {
              if (v54 >= 0xA)
              {
                uint64_t v225 = (v54 - 1) & 7;
                if (!v225) {
                  uint64_t v225 = 8;
                }
                uint64_t v226 = v54 - 1 - v225;
                uint64_t v57 = v54 - v225;
                unint64_t v227 = (const float *)(v298 + 16);
                int32x4_t v228 = 0uLL;
                int32x4_t v229 = 0uLL;
                do
                {
                  int v230 = v227 - 12;
                  unsigned long long v231 = (unsigned __int128)vld3q_f32(v230);
                  unsigned long long v232 = (unsigned __int128)vld3q_f32(v227);
                  int32x4_t v228 = vaddq_s32((int32x4_t)v231, v228);
                  int32x4_t v229 = vaddq_s32((int32x4_t)v232, v229);
                  v227 += 24;
                  v226 -= 8;
                }
                while (v226);
                int v56 = vaddvq_s32(vaddq_s32(v229, v228));
              }
              else
              {
                int v56 = 0;
                uint64_t v57 = 1;
              }
              uint64_t v233 = v54 - v57;
              uint64_t v234 = &v298[3 * v57 + 1];
              do
              {
                unsigned int v235 = *v234;
                v234 += 3;
                v56 += v235;
                --v233;
              }
              while (v233);
            }
            uint64_t v236 = (FILE **)MEMORY[0x1E4F143C8];
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "\n %u segments found, of total size %u \n", v54 - 1, v56);
            fflush(*v236);
            fprintf(*v236, "list %u best segments \n", v297 - 1);
            fflush(*v236);
            if (v297 >= 2)
            {
              uint64_t v237 = 1;
              while (1)
              {
                unint64_t v31 = v298;
                uint64_t v238 = &v298[3 * v237];
                unint64_t v240 = *v238;
                unsigned int v239 = v238[1];
                if (v35 < v240 || v35 < v239 + v240) {
                  break;
                }
                if (v239 >= 0x28) {
                  uint64_t v242 = 40;
                }
                else {
                  uint64_t v242 = v239;
                }
                fprintf(*v236, "%3u:%3u bytes at pos %8u, savings %7u bytes |", v237, v239, v240, v298[3 * v237 + 2]);
                fflush(*v236);
                if (v242)
                {
                  uint64_t v243 = &v26[v240];
                  do
                  {
                    int v245 = *v243++;
                    int v244 = v245;
                    if ((v245 - 127) >= 0xFFFFFFA1) {
                      int v246 = v244;
                    }
                    else {
                      int v246 = 46;
                    }
                    fputc(v246, *v236);
                    fflush(*v236);
                    --v242;
                  }
                  while (v242);
                }
                fwrite("| \n", 3uLL, 1uLL, *v236);
                fflush(*v236);
                if (++v237 == v297) {
                  goto LABEL_327;
                }
              }
              unint64_t v24 = -1;
              goto LABEL_339;
            }
          }
LABEL_327:
          unint64_t v31 = v298;
          uint64_t v247 = *v298;
          if (v247 < 2) {
            goto LABEL_338;
          }
          unint64_t v248 = v290;
          if (v247 >= 0xA)
          {
            uint64_t v252 = (v247 - 1) & 7;
            if (!v252) {
              uint64_t v252 = 8;
            }
            uint64_t v253 = v247 - 1 - v252;
            uint64_t v250 = v253 + 1;
            int v254 = (const float *)(v298 + 16);
            int32x4_t v255 = 0uLL;
            int32x4_t v256 = 0uLL;
            int v251 = v289;
            do
            {
              uint64_t v257 = v254 - 12;
              unsigned long long v258 = (unsigned __int128)vld3q_f32(v257);
              unsigned long long v259 = (unsigned __int128)vld3q_f32(v254);
              int32x4_t v255 = vaddq_s32((int32x4_t)v258, v255);
              int32x4_t v256 = vaddq_s32((int32x4_t)v259, v256);
              v254 += 24;
              v253 -= 8;
            }
            while (v253);
            LODWORD(v249) = vaddvq_s32(vaddq_s32(v256, v255));
          }
          else
          {
            LODWORD(v249) = 0;
            uint64_t v250 = 1;
            int v251 = v289;
          }
          uint64_t v260 = v247 - v250;
          uint64_t v261 = 12 * v250 + 4;
          do
          {
            unint64_t v249 = *(unsigned int *)((char *)v298 + v261) + v249;
            v261 += 12;
            --v260;
          }
          while (v260);
          if (v249 < 0x80) {
            goto LABEL_338;
          }
          if (v293 >= 2 && v290 >> 2 > v249)
          {
            int v263 = (FILE **)MEMORY[0x1E4F143C8];
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "!  warning : selected content significantly smaller than requested (%u < %u) \n", v249, v290);
            fflush(*v263);
            if (v35 < 10 * v290)
            {
              fprintf(*v263, "!  consider increasing the number of samples (total size : %u MB)\n", v35 >> 20);
              fflush(*v263);
            }
            unint64_t v31 = v298;
            if (v292 >= 5)
            {
              fprintf(*v263, "!  consider increasing selectivity to produce larger dictionary (-s%u) \n", v288 + 1);
              fflush(*v263);
              fwrite("!  note : larger dictionaries are not necessarily better, test its efficiency on samples \n", 0x5AuLL, 1uLL, *v263);
              fflush(*v263);
              unint64_t v31 = v298;
            }
          }
          unsigned int v264 = v288;
          if (a5 >= 9 && 3 * v290 < v249 && v288 >= 2)
          {
            do
              --v264;
            while (a5 >> v264 < 5);
            if (v293 >= 2)
            {
              uint64_t v266 = (FILE **)MEMORY[0x1E4F143C8];
              unsigned int v267 = v264;
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "!  note : calculated dictionary significantly larger than requested (%u > %u) \n", v249, v290);
              fflush(*v266);
              fprintf(*v266, "!  consider increasing dictionary size, or produce denser dictionary (-s%u) \n", v267);
              fflush(*v266);
              fwrite("!  always test dictionary efficiency on real samples \n", 0x36uLL, 1uLL, *v266);
              fflush(*v266);
              unint64_t v31 = v298;
            }
          }
          uint64_t v268 = *v31;
          if (v268 <= 1)
          {
            unsigned int v269 = 0;
            *unint64_t v31 = 1;
          }
          else
          {
            unsigned int v269 = 0;
            uint64_t v270 = 1;
            uint64_t v271 = 4;
            while (1)
            {
              unint64_t v272 = v31[v271] + v269;
              if (v272 > v290) {
                break;
              }
              ++v270;
              v271 += 3;
              unsigned int v269 = v272;
              if (v268 == v270)
              {
                unsigned int v269 = v272;
                LODWORD(v270) = *v31;
                break;
              }
            }
            *unint64_t v31 = v270;
            if (v270 >= 2)
            {
              int v273 = &v251[v290];
              int v274 = v31 + 4;
              unint64_t v275 = 1;
              while (1)
              {
                size_t v276 = *v274;
                v273 -= v276;
                if (v273 < v251) {
                  break;
                }
                memcpy(v273, &v26[*(v274 - 1)], v276);
                ++v275;
                v274 += 3;
                if (v275 >= *v298)
                {
                  unint64_t v248 = v290;
                  goto LABEL_368;
                }
              }
              unint64_t v24 = -1;
              goto LABEL_369;
            }
          }
LABEL_368:
          unint64_t v24 = ZDICT_addEntropyTablesFromBuffer_advanced(v251, v269, v248, (uint64_t)v26, a4, a5, *(unint64_t *)v299, *(int *)&v299[8]);
LABEL_369:
          unint64_t v31 = v298;
          goto LABEL_339;
        }
        if (v292 <= 4) {
          int v47 = 4;
        }
        else {
          int v47 = v292;
        }
        unsigned int v287 = v47;
        bzero(v295, v35 + 16);
        if (a7 < 3 || v35 < 0x7D000001)
        {
          unsigned int v49 = a5;
          unint64_t v50 = v35;
          if (v35 < 0x7D000001) {
            goto LABEL_51;
          }
        }
        else
        {
          size_t v48 = (FILE **)MEMORY[0x1E4F143C8];
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "sample set too large : reduced to %u MB ...\n", 2000);
          fflush(*v48);
        }
        unint64_t v50 = v35;
        unsigned int v49 = a5;
        do
          v50 -= *(void *)(a4 + 8 * --v49);
        while (v50 > 0x7D000000);
LABEL_51:
        unint64_t v51 = v296 + 1;
        if (a7 >= 2)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "sorting %u files of total size %u MB ...\n", v49, v50 >> 20);
          fflush((FILE *)*MEMORY[0x1E4F143C8]);
        }
        int v52 = divsufsort((unsigned __int8 *)v26, v51, v50);
        uint64_t v45 = v295;
        int v46 = (char *)v296;
        if (!v52)
        {
          v51[v50] = v50;
          *int v296 = v50;
          if (v50)
          {
            for (uint64_t i = 0; i != v50; ++i)
              v43[v51[i]] = i;
          }
          *uint64_t v294 = 0;
          if (v49 >= 2)
          {
            int v59 = 0;
            uint64_t v60 = v49 - 1;
            int v61 = v294 + 1;
            unsigned int v62 = (int *)a4;
            do
            {
              int v63 = *v62;
              v62 += 2;
              v59 += v63;
              *v61++ = v59;
              --v60;
            }
            while (v60);
          }
          if (a7 >= 2)
          {
            int v64 = (FILE **)MEMORY[0x1E4F143C8];
            fwrite("finding patterns ... \n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
            fflush(*v64);
            int v46 = (char *)v296;
            if (a7 >= 3)
            {
              fprintf(*v64, "minimum ratio : %u \n", v287);
              fflush(*v64);
              int v46 = (char *)v296;
            }
          }
          uint64_t v45 = v295;
          if (v50)
          {
            uint64_t v65 = 0;
            unsigned int v66 = 0;
            unsigned int v279 = v29 - 1;
            unsigned int v280 = v29;
            unsigned int v67 = v26 + 8;
            clock_t v281 = 0;
            uint64_t v282 = v46 + 4;
            long long v68 = 0uLL;
            uint64_t v291 = v43;
            while (1)
            {
              if (v45[v65])
              {
                ++v66;
              }
              else
              {
                unint64_t v69 = v43[v65];
                long long v314 = v68;
                long long v315 = v68;
                long long v312 = v68;
                long long v313 = v68;
                long long v310 = v68;
                long long v311 = v68;
                long long v308 = v68;
                long long v309 = v68;
                long long v306 = v68;
                long long v307 = v68;
                long long v304 = v68;
                long long v305 = v68;
                long long v302 = v68;
                long long v303 = v68;
                long long v300 = v68;
                long long v301 = v68;
                uint64_t v70 = v51[v69];
                v45[v70] = 1;
                long long v71 = &v26[v70];
                int v72 = *(unsigned __int16 *)&v26[v70 + 2];
                if (*(unsigned __int16 *)&v26[v70] == v72
                  || *(unsigned __int16 *)(v71 + 1) == *(unsigned __int16 *)(v71 + 3)
                  || v72 == *((unsigned __int16 *)v71 + 2))
                {
                  unsigned int v73 = 6;
                  do
                  {
                    uint64_t v74 = v73;
                    int v75 = *(unsigned __int16 *)&v71[v73];
                    v73 += 2;
                  }
                  while (v75 == *((unsigned __int16 *)v71 + 2));
                  if (v73 != 2)
                  {
                    if (v26[v74 + v70] == v26[v74 - 1 + v70]) {
                      unsigned int v76 = v73 + 1;
                    }
                    else {
                      unsigned int v76 = v73;
                    }
                    unsigned int v77 = v66;
                    memset(&v45[v70 + 1], 1, v76 - 4 + 1);
                    long long v68 = 0uLL;
                    unsigned int v67 = v26 + 8;
                    unsigned int v66 = v77;
                    uint64_t v45 = v295;
                    int v46 = (char *)v296;
                  }
                }
                else
                {
                  uint64_t v78 = *(void *)v71;
                  int v79 = 1;
                  unsigned int v80 = v69;
                  unsigned int v81 = v287;
                  do
                  {
                    int v83 = v79;
                    uint64_t v84 = v51[++v80];
                    uint64_t v85 = &v26[v70];
                    unint64_t v86 = *(void *)&v26[v84] ^ v78;
                    if (!v86)
                    {
                      uint64_t v87 = &v67[v84];
                      uint64_t v85 = &v26[v70];
                      do
                      {
                        uint64_t v89 = *((void *)v85 + 1);
                        v85 += 8;
                        uint64_t v88 = v89;
                        uint64_t v90 = *(void *)v87;
                        v87 += 8;
                        unint64_t v86 = v88 ^ v90;
                      }
                      while (!v86);
                    }
                    unint64_t v82 = &v85[__clz(__rbit64(v86)) >> 3] - v71;
                    int v79 = v83 + 1;
                  }
                  while (v82 > 6);
                  do
                  {
                    LODWORD(v92) = v69;
                    int v93 = v83;
                    uint64_t v94 = *(int *)&v46[4 * v69];
                    unint64_t v69 = (unint64_t)&v26[v70];
                    unint64_t v95 = *(void *)&v26[v94] ^ v78;
                    if (!v95)
                    {
                      uint64_t v96 = &v67[v94];
                      unint64_t v69 = (unint64_t)&v26[v70];
                      do
                      {
                        uint64_t v98 = *(void *)(v69 + 8);
                        v69 += 8;
                        uint64_t v97 = v98;
                        uint64_t v99 = *(void *)v96;
                        v96 += 8;
                        unint64_t v95 = v97 ^ v99;
                      }
                      while (!v95);
                    }
                    unint64_t v91 = v69 + (__clz(__rbit64(v95)) >> 3) - (void)v71;
                    LODWORD(v69) = v92 - 1;
                    int v83 = v93 + 1;
                  }
                  while (v91 > 6);
                  if (v80 - v92 >= v287)
                  {
                    unsigned int v283 = v66;
                    if (v293 >= 4)
                    {
                      fputc(10, (FILE *)*MEMORY[0x1E4F143C8]);
                      fflush((FILE *)*MEMORY[0x1E4F143C8]);
                      fprintf((FILE *)*MEMORY[0x1E4F143C8], "found %3u matches of length >= %i at pos %7u  ", v80 - v92, 7, v70);
                      unint64_t v102 = (FILE **)MEMORY[0x1E4F143C8];
                      fflush((FILE *)*MEMORY[0x1E4F143C8]);
                      fputc(10, *v102);
                      fflush(*v102);
                      long long v68 = 0uLL;
                      unsigned int v81 = v287;
                      unsigned int v67 = v26 + 8;
                      unsigned int v66 = v283;
                      uint64_t v45 = v295;
                      int v46 = (char *)v296;
                    }
                    int v103 = 7;
                    if (v92 >= v80)
                    {
LABEL_106:
                      unsigned int v104 = 0;
                      unsigned int v105 = 0;
                      int v106 = v92;
                      int v107 = v92;
                      goto LABEL_107;
                    }
                    while (1)
                    {
                      unsigned int v105 = 0;
                      unsigned int v104 = 0;
                      char v109 = 0;
                      int v107 = v92;
                      int v106 = v92;
                      uint64_t v110 = v92;
                      do
                      {
                        if (v26[v51[v110] + v103] != v109)
                        {
                          if (v104 > v105)
                          {
                            unsigned int v105 = v104;
                            int v107 = v106;
                          }
                          char v109 = v26[v51[v110] + v103];
                          int v106 = v110;
                          unsigned int v104 = 0;
                        }
                        ++v104;
                        ++v110;
                      }
                      while (v80 != v110);
LABEL_107:
                      unsigned int v108 = v104 <= v105 ? v105 : v104;
                      if (v108 < v81) {
                        break;
                      }
                      if (v104 <= v105) {
                        LODWORD(v92) = v107;
                      }
                      else {
                        LODWORD(v92) = v106;
                      }
                      unsigned int v80 = v92 + v108;
                      ++v103;
                      if (v92 >= v92 + v108) {
                        goto LABEL_106;
                      }
                    }
                    uint64_t v111 = v51[v92];
                    uint64_t v278 = v51[v92];
                    long long v330 = v68;
                    long long v331 = v68;
                    long long v328 = v68;
                    long long v329 = v68;
                    long long v326 = v68;
                    long long v327 = v68;
                    long long v324 = v68;
                    long long v325 = v68;
                    long long v322 = v68;
                    long long v323 = v68;
                    long long v320 = v68;
                    long long v321 = v68;
                    long long v318 = v68;
                    long long v319 = v68;
                    long long v316 = v68;
                    long long v317 = v68;
                    uint64_t v285 = v111;
                    int8x16x2_t v112 = &v26[v111];
                    LODWORD(v113) = v92;
                    uint64_t v114 = *(void *)&v26[v111];
                    do
                    {
                      uint64_t v113 = (v113 + 1);
                      uint64_t v116 = v51[v113];
                      int v117 = v112;
                      unint64_t v118 = *(void *)&v26[v116] ^ v114;
                      if (!v118)
                      {
                        size_t v119 = &v67[v116];
                        int v117 = v112;
                        do
                        {
                          uint64_t v121 = v117[1];
                          ++v117;
                          uint64_t v120 = v121;
                          uint64_t v122 = *(void *)v119;
                          v119 += 8;
                          unint64_t v118 = v120 ^ v122;
                        }
                        while (!v118);
                      }
                      unint64_t v115 = (char *)v117 + (__clz(__rbit64(v118)) >> 3) - v112;
                      if (v115 >= 0x3F) {
                        unint64_t v115 = 63;
                      }
                      ++*((_DWORD *)&v316 + v115);
                    }
                    while (v115 > 6);
                    if (v92)
                    {
                      do
                      {
                        uint64_t v180 = v51[(v92 - 1)];
                        long long v181 = v112;
                        unint64_t v182 = *(void *)&v26[v180] ^ v114;
                        if (!v182)
                        {
                          long long v183 = &v67[v180];
                          long long v181 = v112;
                          do
                          {
                            uint64_t v185 = v181[1];
                            ++v181;
                            uint64_t v184 = v185;
                            uint64_t v186 = *(void *)v183;
                            v183 += 8;
                            unint64_t v182 = v184 ^ v186;
                          }
                          while (!v182);
                        }
                        unint64_t v178 = (char *)v181 + (__clz(__rbit64(v182)) >> 3) - v112;
                        if (v178 >= 0x3F) {
                          unint64_t v178 = 63;
                        }
                        ++*((_DWORD *)&v316 + v178);
                        if (v178 > 6) {
                          LODWORD(v92) = v92 - 1;
                        }
                      }
                      while (v178 >= 7 && v92 != 0);
                    }
                    uint64_t v284 = v113;
                    if (HIDWORD(v331) >= v81)
                    {
                      unsigned int v177 = 63;
                    }
                    else if (DWORD2(v331) + HIDWORD(v331) >= v81)
                    {
                      unsigned int v177 = 62;
                    }
                    else
                    {
                      unsigned int v123 = DWORD1(v331) + DWORD2(v331) + HIDWORD(v331);
                      if (v123 >= v81)
                      {
                        unsigned int v177 = 61;
                      }
                      else
                      {
                        unsigned int v124 = v331 + v123;
                        if (v124 >= v81)
                        {
                          unsigned int v177 = 60;
                        }
                        else
                        {
                          unsigned int v125 = HIDWORD(v330) + v124;
                          if (v125 >= v81)
                          {
                            unsigned int v177 = 59;
                          }
                          else
                          {
                            unsigned int v126 = DWORD2(v330) + v125;
                            if (v126 >= v81)
                            {
                              unsigned int v177 = 58;
                            }
                            else
                            {
                              unsigned int v127 = DWORD1(v330) + v126;
                              if (v127 >= v81)
                              {
                                unsigned int v177 = 57;
                              }
                              else
                              {
                                unsigned int v128 = v330 + v127;
                                if (v128 >= v287)
                                {
                                  unsigned int v177 = 56;
                                }
                                else
                                {
                                  unsigned int v129 = HIDWORD(v329) + v128;
                                  if (v129 >= v287)
                                  {
                                    unsigned int v177 = 55;
                                  }
                                  else
                                  {
                                    unsigned int v130 = DWORD2(v329) + v129;
                                    if (v130 >= v287)
                                    {
                                      unsigned int v177 = 54;
                                    }
                                    else
                                    {
                                      unsigned int v131 = DWORD1(v329) + v130;
                                      if (v131 >= v287)
                                      {
                                        unsigned int v177 = 53;
                                      }
                                      else
                                      {
                                        unsigned int v132 = v329 + v131;
                                        if (v132 >= v287)
                                        {
                                          unsigned int v177 = 52;
                                        }
                                        else
                                        {
                                          unsigned int v133 = HIDWORD(v328) + v132;
                                          if (v133 >= v287)
                                          {
                                            unsigned int v177 = 51;
                                          }
                                          else
                                          {
                                            unsigned int v134 = DWORD2(v328) + v133;
                                            if (v134 >= v287)
                                            {
                                              unsigned int v177 = 50;
                                            }
                                            else
                                            {
                                              unsigned int v135 = DWORD1(v328) + v134;
                                              if (v135 >= v287)
                                              {
                                                unsigned int v177 = 49;
                                              }
                                              else
                                              {
                                                unsigned int v136 = v328 + v135;
                                                if (v136 >= v287)
                                                {
                                                  unsigned int v177 = 48;
                                                }
                                                else
                                                {
                                                  unsigned int v137 = HIDWORD(v327) + v136;
                                                  if (v137 >= v287)
                                                  {
                                                    unsigned int v177 = 47;
                                                  }
                                                  else
                                                  {
                                                    unsigned int v138 = DWORD2(v327) + v137;
                                                    if (v138 >= v287)
                                                    {
                                                      unsigned int v177 = 46;
                                                    }
                                                    else
                                                    {
                                                      unsigned int v139 = DWORD1(v327) + v138;
                                                      if (v139 >= v287)
                                                      {
                                                        unsigned int v177 = 45;
                                                      }
                                                      else
                                                      {
                                                        unsigned int v140 = v327 + v139;
                                                        if (v140 >= v287)
                                                        {
                                                          unsigned int v177 = 44;
                                                        }
                                                        else
                                                        {
                                                          unsigned int v141 = HIDWORD(v326) + v140;
                                                          if (v141 >= v287)
                                                          {
                                                            unsigned int v177 = 43;
                                                          }
                                                          else
                                                          {
                                                            unsigned int v142 = DWORD2(v326) + v141;
                                                            if (v142 >= v287)
                                                            {
                                                              unsigned int v177 = 42;
                                                            }
                                                            else
                                                            {
                                                              unsigned int v143 = DWORD1(v326) + v142;
                                                              if (v143 >= v287)
                                                              {
                                                                unsigned int v177 = 41;
                                                              }
                                                              else
                                                              {
                                                                unsigned int v144 = v326 + v143;
                                                                if (v144 >= v287)
                                                                {
                                                                  unsigned int v177 = 40;
                                                                }
                                                                else
                                                                {
                                                                  unsigned int v145 = HIDWORD(v325) + v144;
                                                                  if (v145 >= v287)
                                                                  {
                                                                    unsigned int v177 = 39;
                                                                  }
                                                                  else
                                                                  {
                                                                    unsigned int v146 = DWORD2(v325) + v145;
                                                                    if (v146 >= v287)
                                                                    {
                                                                      unsigned int v177 = 38;
                                                                    }
                                                                    else
                                                                    {
                                                                      unsigned int v147 = DWORD1(v325) + v146;
                                                                      if (v147 >= v287)
                                                                      {
                                                                        unsigned int v177 = 37;
                                                                      }
                                                                      else
                                                                      {
                                                                        unsigned int v148 = v325 + v147;
                                                                        if (v148 >= v287)
                                                                        {
                                                                          unsigned int v177 = 36;
                                                                        }
                                                                        else
                                                                        {
                                                                          unsigned int v149 = HIDWORD(v324) + v148;
                                                                          if (v149 >= v287)
                                                                          {
                                                                            unsigned int v177 = 35;
                                                                          }
                                                                          else
                                                                          {
                                                                            unsigned int v150 = DWORD2(v324) + v149;
                                                                            if (v150 >= v287)
                                                                            {
                                                                              unsigned int v177 = 34;
                                                                            }
                                                                            else
                                                                            {
                                                                              unsigned int v151 = DWORD1(v324) + v150;
                                                                              if (v151 >= v287)
                                                                              {
                                                                                unsigned int v177 = 33;
                                                                              }
                                                                              else
                                                                              {
                                                                                unsigned int v152 = v324 + v151;
                                                                                if (v152 >= v287)
                                                                                {
                                                                                  unsigned int v177 = 32;
                                                                                }
                                                                                else
                                                                                {
                                                                                  unsigned int v153 = HIDWORD(v323) + v152;
                                                                                  if (v153 >= v287)
                                                                                  {
                                                                                    unsigned int v177 = 31;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    unsigned int v154 = DWORD2(v323) + v153;
                                                                                    if (v154 >= v287)
                                                                                    {
                                                                                      unsigned int v177 = 30;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      unsigned int v155 = DWORD1(v323) + v154;
                                                                                      if (v155 >= v287)
                                                                                      {
                                                                                        unsigned int v177 = 29;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        unsigned int v156 = v323 + v155;
                                                                                        if (v156 >= v287)
                                                                                        {
                                                                                          unsigned int v177 = 28;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          unsigned int v157 = HIDWORD(v322) + v156;
                                                                                          if (v157 >= v287)
                                                                                          {
                                                                                            unsigned int v177 = 27;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            unsigned int v158 = DWORD2(v322) + v157;
                                                                                            if (v158 >= v287)
                                                                                            {
                                                                                              unsigned int v177 = 26;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              unsigned int v159 = DWORD1(v322) + v158;
                                                                                              if (v159 >= v287)
                                                                                              {
                                                                                                unsigned int v177 = 25;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                unsigned int v160 = v322 + v159;
                                                                                                if (v160 >= v287)
                                                                                                {
                                                                                                  unsigned int v177 = 24;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  unsigned int v161 = HIDWORD(v321) + v160;
                                                                                                  if (v161 >= v287)
                                                                                                  {
                                                                                                    unsigned int v177 = 23;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    unsigned int v162 = DWORD2(v321) + v161;
                                                                                                    if (v162 >= v287)
                                                                                                    {
                                                                                                      unsigned int v177 = 22;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      unsigned int v163 = DWORD1(v321) + v162;
                                                                                                      if (v163 >= v287)
                                                                                                      {
                                                                                                        unsigned int v177 = 21;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        unsigned int v164 = v321 + v163;
                                                                                                        if (v164 >= v287)
                                                                                                        {
                                                                                                          unsigned int v177 = 20;
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          unsigned int v165 = HIDWORD(v320) + v164;
                                                                                                          if (v165 >= v287)
                                                                                                          {
                                                                                                            unsigned int v177 = 19;
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            unsigned int v166 = DWORD2(v320) + v165;
                                                                                                            if (v166 >= v287)
                                                                                                            {
                                                                                                              unsigned int v177 = 18;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              unsigned int v167 = DWORD1(v320) + v166;
                                                                                                              if (v167 >= v287)
                                                                                                              {
                                                                                                                unsigned int v177 = 17;
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                unsigned int v168 = v320 + v167;
                                                                                                                if (v168 >= v287)
                                                                                                                {
                                                                                                                  unsigned int v177 = 16;
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  unsigned int v169 = HIDWORD(v319) + v168;
                                                                                                                  if (v169 >= v287)
                                                                                                                  {
                                                                                                                    unsigned int v177 = 15;
                                                                                                                  }
                                                                                                                  else
                                                                                                                  {
                                                                                                                    unsigned int v170 = DWORD2(v319) + v169;
                                                                                                                    if (v170 >= v287)
                                                                                                                    {
                                                                                                                      unsigned int v177 = 14;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      unsigned int v171 = DWORD1(v319) + v170;
                                                                                                                      if (v171 >= v287)
                                                                                                                      {
                                                                                                                        unsigned int v177 = 13;
                                                                                                                      }
                                                                                                                      else
                                                                                                                      {
                                                                                                                        unsigned int v172 = v319 + v171;
                                                                                                                        if (v172 >= v287)
                                                                                                                        {
                                                                                                                          unsigned int v177 = 12;
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          unsigned int v173 = HIDWORD(v318) + v172;
                                                                                                                          if (v173 >= v287)
                                                                                                                          {
                                                                                                                            unsigned int v177 = 11;
                                                                                                                          }
                                                                                                                          else
                                                                                                                          {
                                                                                                                            unsigned int v174 = DWORD2(v318) + v173;
                                                                                                                            if (v174 >= v287)
                                                                                                                            {
                                                                                                                              unsigned int v177 = 10;
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              unsigned int v175 = DWORD1(v318) + v174;
                                                                                                                              if (v175 >= v287)
                                                                                                                              {
                                                                                                                                unsigned int v177 = 9;
                                                                                                                              }
                                                                                                                              else
                                                                                                                              {
                                                                                                                                unsigned int v176 = v318 + v175;
                                                                                                                                if (v176 >= v287)
                                                                                                                                {
                                                                                                                                  unsigned int v177 = 8;
                                                                                                                                }
                                                                                                                                else if (HIDWORD(v317) + v176 < v287)
                                                                                                                                {
                                                                                                                                  unsigned int v177 = 6;
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                  unsigned int v177 = 7;
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              uint64_t v45 = v295;
                              int v46 = (char *)v296;
                              unsigned int v67 = v26 + 8;
                              long long v68 = 0uLL;
                            }
                          }
                        }
                      }
                    }
                    int v187 = v26[v285 - 1 + v177];
                    unsigned int v188 = v177 + 1;
                    do
                    {
                      unsigned int v189 = v188;
                      uint64_t v190 = v177;
                      int v191 = v26[v285 - 2 + v177--];
                      --v188;
                    }
                    while (v191 == v187);
                    int v192 = v177 + 1;
                    if (v177 + 1 >= 7)
                    {
                      DWORD1(v301) = 0;
                      if (v192 >= 7)
                      {
                        int v193 = 0;
                        uint64_t v194 = 7;
                        do
                        {
                          v193 += (v194 - 3) * *((_DWORD *)&v316 + v194);
                          *((_DWORD *)&v300 + v194++) = v193;
                        }
                        while (v189 != v194);
                      }
                      unsigned int v277 = *((_DWORD *)&v300 + v190);
                      if (v293 > 3)
                      {
                        uint64_t v195 = v112;
                        fprintf((FILE *)*MEMORY[0x1E4F143C8], "Selected dict at position %u, of length %u : saves %u (ratio: %.2f)  \n", v285, v177 + 1, *((_DWORD *)&v300 + v190), (double)*((unsigned int *)&v300 + v190) / (double)v192);
                        fflush((FILE *)*MEMORY[0x1E4F143C8]);
                        int v192 = v177 + 1;
                        uint64_t v113 = v284;
                        int8x16x2_t v112 = v195;
                        unsigned int v67 = v26 + 8;
                      }
                      uint64_t v196 = v285;
                      if (v92 >= v113)
                      {
LABEL_279:
                        unint64_t v286 = v278 | (v190 << 32);
                        unsigned int v206 = ZDICT_tryMerge(v298, v286, v277, 0, (uint64_t)v26);
                        if (v206)
                        {
                          unsigned int v207 = v206;
                          unsigned int v208 = ZDICT_tryMerge(v298, *(void *)&v298[3 * v206], v298[3 * v206 + 2], v206, (uint64_t)v26);
                          if (v208)
                          {
                            uint64_t v209 = v207;
                            do
                            {
                              unsigned int v210 = v207;
                              unsigned int v207 = v208;
                              uint64_t v211 = *v298 - 1;
                              if (v211 > v210)
                              {
                                uint64_t v212 = v211 - v209;
                                int v213 = &v298[3 * v209];
                                int v214 = v213;
                                do
                                {
                                  uint64_t v215 = *(void *)(v214 + 3);
                                  v214 += 3;
                                  *(void *)int v213 = v215;
                                  v213[2] = v213[5];
                                  int v213 = v214;
                                  --v212;
                                }
                                while (v212);
                                LODWORD(v211) = *v298 - 1;
                              }
                              unsigned int *v298 = v211;
                              uint64_t v209 = v208;
                              unsigned int v208 = ZDICT_tryMerge(v298, *(void *)&v298[3 * v208], v298[3 * v208 + 2], v208, (uint64_t)v26);
                            }
                            while (v208);
                          }
                        }
                        else
                        {
                          unsigned int v216 = *v298;
                          if (*v298 >= v280) {
                            unsigned int v216 = v279;
                          }
                          uint64_t v217 = v216 - 1;
                          if (v298[3 * v217 + 2] >= v277)
                          {
                            unsigned int v218 = v216;
                          }
                          else
                          {
                            unsigned int v218 = v216;
                            do
                            {
                              BOOL v219 = &v298[3 * v217];
                              int v220 = &v298[3 * v218];
                              uint64_t v221 = *(void *)v219;
                              v220[2] = v219[2];
                              *(void *)int v220 = v221;
                              uint64_t v217 = v218 - 2;
                              --v218;
                            }
                            while (v298[3 * v217 + 2] < v277);
                          }
                          uint64_t v222 = &v298[3 * v218];
                          *(void *)uint64_t v222 = v286;
                          v222[2] = v277;
                          unsigned int *v298 = v216 + 1;
                        }
                        unsigned int v66 = v283 + v177 + 1;
                        LODWORD(a7) = v293;
                        if (v293 < 2)
                        {
                          uint64_t v45 = v295;
                          int v46 = (char *)v296;
                          unint64_t v43 = v291;
                        }
                        else
                        {
                          unsigned int v223 = v283 + v177 + 1;
                          clock_t v224 = clock();
                          unsigned int v66 = v223;
                          uint64_t v45 = v295;
                          int v46 = (char *)v296;
                          unint64_t v43 = v291;
                          unsigned int v67 = v26 + 8;
                          long long v68 = 0uLL;
                          if (v224 - v281 < 0x493E1) {
                            goto LABEL_74;
                          }
                          clock_t v281 = clock();
                          fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%4.2f %% \r", (double)v223 / (double)v50 * 100.0);
                          fflush((FILE *)*MEMORY[0x1E4F143C8]);
                          if (v293 >= 4) {
                            fflush((FILE *)*MEMORY[0x1E4F143C8]);
                          }
                          uint64_t v45 = v295;
                          int v46 = (char *)v296;
                          unsigned int v66 = v223;
                        }
                        unsigned int v67 = v26 + 8;
                        long long v68 = 0uLL;
                        goto LABEL_74;
                      }
                      uint64_t v92 = v92;
                      while (2)
                      {
                        uint64_t v197 = v51[v92];
                        unsigned int v198 = v192;
                        if (v197 == v196)
                        {
                          if (v197 < v192 + (int)v197) {
                            goto LABEL_278;
                          }
                        }
                        else
                        {
                          LODWORD(v199) = v112;
                          unint64_t v200 = *(void *)v112 ^ *(void *)&v26[v197];
                          if (!v200)
                          {
                            unint64_t v201 = &v67[v197];
                            int v199 = v112;
                            do
                            {
                              uint64_t v203 = *((void *)v199 + 1);
                              v199 += 8;
                              uint64_t v202 = v203;
                              uint64_t v204 = *(void *)v201;
                              v201 += 8;
                              unint64_t v200 = v202 ^ v204;
                            }
                            while (!v200);
                          }
                          unsigned int v198 = v199 + (__clz(__rbit64(v200)) >> 3) - v112;
                          if (v192 < v198) {
                            unsigned int v198 = v192;
                          }
                          if (v197 < v198 + v197)
                          {
LABEL_278:
                            int v205 = v112;
                            memset(&v295[v197], 1, v198 - 1 + 1);
                            uint64_t v113 = v284;
                            uint64_t v196 = v285;
                            int v192 = v177 + 1;
                            int8x16x2_t v112 = v205;
                            unsigned int v67 = v26 + 8;
                          }
                        }
                        if (++v92 == v113) {
                          goto LABEL_279;
                        }
                        continue;
                      }
                    }
                  }
                  else if (v80 > v92)
                  {
                    unint64_t v100 = &v282[4 * v92];
                    do
                    {
                      uint64_t v101 = *(int *)v100;
                      v100 += 4;
                      v45[v101] = 1;
                      --v93;
                    }
                    while (v93);
                  }
                }
                ++v66;
                LODWORD(a7) = v293;
                unint64_t v43 = v291;
              }
LABEL_74:
              uint64_t v65 = v66;
              if (v50 <= v66) {
                goto LABEL_54;
              }
            }
          }
        }
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
    }
    uint64_t v40 = v14 - v34;
    long long v41 = (uint64_t *)(a4 + 8 * v34);
    do
    {
      uint64_t v42 = *v41++;
      v35 += v42;
      --v40;
    }
    while (v40);
    goto LABEL_31;
  }
  return 0;
}

uint64_t ZDICT_trainFromBuffer(void *a1, unint64_t a2, uint64_t a3, int64x2_t *a4, unsigned int a5)
{
  long long v7 = 0u;
  uint64_t v8 = 0;
  memset(v6, 0, sizeof(v6));
  DWORD1(v6[0]) = 8;
  HIDWORD(v6[0]) = 4;
  HIDWORD(v7) = 3;
  return ZDICT_optimizeTrainFromBuffer_fastCover(a1, a2, a3, a4, a5, (uint64_t)v6);
}

unint64_t ZDICT_addEntropyTablesFromBuffer(_DWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (_DWORD *)((char *)a1 + a3 - a2);
  unint64_t result = ZDICT_analyzeEntropy((uint64_t)(a1 + 2), a3 - 8, 3, a4, a5, a6, (uint64_t)v9, a2, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    unint64_t v11 = result + 8;
    *a1 = -332356553;
    a1[1] = ZSTD_XXH64(v9, a2) % 0x7FFF8000 + 0x8000;
    if (v11 + a2 >= a3)
    {
      return a3;
    }
    else
    {
      memmove((char *)a1 + v11, v9, a2);
      return v11 + a2;
    }
  }
  return result;
}

unint64_t ZDICT_addEntropyTablesFromBuffer_advanced(_DWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8)
{
  unint64_t v15 = HIDWORD(a7);
  if (a7) {
    uint64_t v16 = a7;
  }
  else {
    uint64_t v16 = 3;
  }
  if (HIDWORD(a7) >= 2)
  {
    uint64_t v17 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "\r%70s\r", "");
    fflush(*v17);
    fwrite("statistics ... \n", 0x10uLL, 1uLL, *v17);
    fflush(*v17);
  }
  unint64_t result = ZDICT_analyzeEntropy((uint64_t)(a1 + 2), a3 - 8, v16, a4, a5, a6, (uint64_t)a1 + a3 - a2, a2, v15);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    unint64_t v19 = result + 8;
    *a1 = -332356553;
    int v20 = ZSTD_XXH64((_DWORD *)((char *)a1 + a3 - a2), a2) % 0x7FFF8000 + 0x8000;
    if (a8) {
      int v20 = a8;
    }
    a1[1] = v20;
    if (v19 + a2 >= a3)
    {
      return a3;
    }
    else
    {
      memmove((char *)a1 + v19, (char *)a1 + a3 - a2, a2);
      return v19 + a2;
    }
  }
  return result;
}

uint64_t BIT_initDStream(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  if (a3)
  {
    *(void *)(a1 + 24) = a2;
    *(void *)(a1 + 32) = a2 + 8;
    if (a3 < 8)
    {
      *(void *)(a1 + 16) = a2;
      uint64_t v5 = *a2;
      *(void *)a1 = v5;
      switch(a3)
      {
        case 2uLL:
          goto LABEL_12;
        case 3uLL:
          goto LABEL_11;
        case 4uLL:
          goto LABEL_10;
        case 5uLL:
          goto LABEL_9;
        case 6uLL:
          goto LABEL_8;
        case 7uLL:
          v5 |= (unint64_t)a2[6] << 48;
          *(void *)a1 = v5;
LABEL_8:
          v5 += (unint64_t)a2[5] << 40;
          *(void *)a1 = v5;
LABEL_9:
          v5 += (unint64_t)a2[4] << 32;
          *(void *)a1 = v5;
LABEL_10:
          v5 += (unint64_t)a2[3] << 24;
          *(void *)a1 = v5;
LABEL_11:
          v5 += (unint64_t)a2[2] << 16;
          *(void *)a1 = v5;
LABEL_12:
          *(void *)a1 = v5 + ((unint64_t)a2[1] << 8);
          break;
        default:
          break;
      }
      if (a2[a3 - 1])
      {
        *(_DWORD *)(a1 + 8) = __clz(a2[a3 - 1]) - 8 * a3 + 41;
        return a3;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        return -20;
      }
    }
    else
    {
      uint64_t v3 = *(void *)&a2[a3 - 8];
      *(void *)(a1 + 16) = &a2[a3 - 8];
      *(void *)a1 = v3;
      if (a2[a3 - 1])
      {
        *(_DWORD *)(a1 + 8) = __clz(a2[a3 - 1]) - 23;
        return a3;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        return -1;
      }
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return -72;
  }
}

unint64_t HUF_compressCTable_internal(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7)
{
  unint64_t v10 = a3 - (void)a2;
  if (a6) {
    unint64_t result = HUF_compress4X_usingCTable_internal((uint64_t)a2, v10, a4, a5, a7);
  }
  else {
    unint64_t result = HUF_compress1X_usingCTable_internal(a2, v10, a4, a5, a7);
  }
  unint64_t v12 = (unint64_t)a2 + result - a1;
  if (v12 >= a5 - 1) {
    unint64_t v12 = 0;
  }
  if (!result) {
    unint64_t v12 = 0;
  }
  if (result <= 0xFFFFFFFFFFFFFF88) {
    return v12;
  }
  return result;
}

uint64_t ZSTD_estimateSubBlockSize_symbolType(int a1, unsigned int *a2, unsigned int a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, int8x16_t a15, unsigned int a16, char *a17)
{
  unint64_t v24 = (unsigned int *)a17;
  uint64_t v25 = (unsigned int *)((char *)a2 + a4);
  unsigned int v94 = a3;
  if ((unint64_t)a4 > 0x5DB)
  {
    if ((a17 & 3) != 0)
    {
      if (a1 == 1) {
        goto LABEL_26;
      }
    }
    else
    {
      HIST_count_parallel_wksp(a17, &v94, a2, a4, 0, a17);
      if (a1 == 1) {
        goto LABEL_26;
      }
    }
    goto LABEL_10;
  }
  unsigned int v26 = a3;
  bzero(a17, 4 * (a3 + 1));
  if (!a4)
  {
    unsigned int v94 = 0;
    if (a1 == 1) {
      goto LABEL_26;
    }
LABEL_10:
    if (a1)
    {
      if ((a1 & 0xFFFFFFFE) != 2) {
        goto LABEL_26;
      }
      int v34 = *a5;
      if (*a5) {
        uint64_t v35 = 1 << (v34 - 1);
      }
      else {
        uint64_t v35 = 1;
      }
      if (v94 <= a5[1])
      {
        unint64_t v52 = 0;
        uint64_t v53 = v94 + 1;
        uint64_t v54 = &a5[2 * v35 + 4];
        do
        {
          unsigned int v56 = *(_DWORD *)v54;
          v54 += 4;
          unsigned int v55 = v56;
          unsigned int v58 = *v24++;
          unsigned int v57 = v58;
          if (v58)
          {
            unsigned int v59 = ((HIWORD(v55) + 1) << 8) - ((((HIWORD(v55) + 1) << 24) - ((v55 + (1 << v34)) << 8)) >> v34);
            if (v59 >= (v34 << 8) + 256) {
              return 10 * a4;
            }
            v52 += v57 * (unint64_t)v59;
          }
          --v53;
        }
        while (v53);
        unint64_t v37 = v52 >> 8;
        if (a4 < 1) {
          return v37 >> 3;
        }
        goto LABEL_47;
      }
    }
    else if (v94 <= a16)
    {
      char v30 = 8 - a8;
      if (v94 + 1 > 1) {
        uint64_t v31 = v94 + 1;
      }
      else {
        uint64_t v31 = 1;
      }
      if (v31 >= 2)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v32 = v31 & 0xFFFFFFFE;
        uint64_t v40 = (unsigned __int16 *)(a7 + 2);
        long long v41 = a17 + 4;
        uint64_t v42 = v32;
        do
        {
          int v43 = *(v40 - 1);
          int v45 = *v40;
          v40 += 2;
          int v44 = v45;
          if (v43 == 0xFFFF) {
            LOWORD(v43) = 1;
          }
          if (v44 == 0xFFFF) {
            LOWORD(v44) = 1;
          }
          v38 += (kInverseProbabilityLog256[(__int16)v43 << v30] * *(v41 - 1));
          v39 += (kInverseProbabilityLog256[(__int16)v44 << v30] * *v41);
          v41 += 2;
          v42 -= 2;
        }
        while (v42);
        unint64_t v33 = v39 + v38;
        if (v32 == v31)
        {
LABEL_39:
          unint64_t v37 = v33 >> 8;
          if (a4 < 1) {
            return v37 >> 3;
          }
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v32 = 0;
        unint64_t v33 = 0;
      }
      uint64_t v46 = v31 - v32;
      int v47 = &a17[4 * v32];
      size_t v48 = (unsigned __int16 *)(a7 + 2 * v32);
      do
      {
        int v50 = *v48++;
        __int16 v49 = v50;
        if (v50 == 0xFFFF) {
          __int16 v49 = 1;
        }
        int v51 = *(_DWORD *)v47;
        v47 += 4;
        v33 += (kInverseProbabilityLog256[v49 << v30] * v51);
        --v46;
      }
      while (v46);
      goto LABEL_39;
    }
    return 10 * a4;
  }
  uint64_t v27 = a2;
  do
  {
    int v28 = *(unsigned __int8 *)v27;
    uint64_t v27 = (unsigned int *)((char *)v27 + 1);
    ++*(_DWORD *)&a17[4 * v28];
  }
  while (v27 < v25);
  while (!*(_DWORD *)&a17[4 * v26--])
    ;
  unsigned int v94 = v26 + 1;
  if (a1 != 1) {
    goto LABEL_10;
  }
LABEL_26:
  unint64_t v37 = 0;
  if (a4 < 1) {
    return v37 >> 3;
  }
LABEL_47:
  uint64_t v60 = (char *)a2 + a4;
  if ((char *)a2 + a4 <= (char *)a2 + 1) {
    uint64_t v60 = (char *)a2 + 1;
  }
  unint64_t v61 = v60 - (char *)a2;
  if (!a6)
  {
    if (v61 < 8)
    {
      int v63 = a2;
      goto LABEL_70;
    }
    if (v61 >= 0x10)
    {
      unint64_t v70 = v61 & 0xFFFFFFFFFFFFFFF0;
      int64x2_t v79 = 0uLL;
      int64x2_t v80 = (int64x2_t)v37;
      unint64_t v81 = v61 & 0xFFFFFFFFFFFFFFF0;
      unint64_t v82 = (int8x16_t *)a2;
      int64x2_t v83 = 0uLL;
      a15 = 0uLL;
      int64x2_t v84 = 0uLL;
      int64x2_t v85 = 0uLL;
      int64x2_t v86 = 0uLL;
      int64x2_t v87 = 0uLL;
      do
      {
        int8x16_t v88 = *v82++;
        uint32x4_t v89 = (uint32x4_t)vqtbl1q_s8(v88, (int8x16_t)xmmword_1889B9EF0);
        uint32x4_t v90 = (uint32x4_t)vqtbl1q_s8(v88, (int8x16_t)xmmword_1889B9EE0);
        uint32x4_t v91 = (uint32x4_t)vqtbl1q_s8(v88, (int8x16_t)xmmword_1889B9F00);
        uint32x4_t v92 = (uint32x4_t)vqtbl1q_s8(v88, (int8x16_t)xmmword_1889B9F10);
        int64x2_t v79 = (int64x2_t)vaddw_high_u32((uint64x2_t)v79, v90);
        a15 = (int8x16_t)vaddw_high_u32((uint64x2_t)a15, v89);
        int64x2_t v83 = (int64x2_t)vaddw_u32((uint64x2_t)v83, *(uint32x2_t *)v89.i8);
        int64x2_t v80 = (int64x2_t)vaddw_u32((uint64x2_t)v80, *(uint32x2_t *)v90.i8);
        int64x2_t v84 = (int64x2_t)vaddw_u32((uint64x2_t)v84, *(uint32x2_t *)v91.i8);
        int64x2_t v85 = (int64x2_t)vaddw_high_u32((uint64x2_t)v85, v91);
        int64x2_t v86 = (int64x2_t)vaddw_u32((uint64x2_t)v86, *(uint32x2_t *)v92.i8);
        int64x2_t v87 = (int64x2_t)vaddw_high_u32((uint64x2_t)v87, v92);
        v81 -= 16;
      }
      while (v81);
      unint64_t v37 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v80, v84), vaddq_s64(v83, v86)), vaddq_s64(vaddq_s64(v79, v85), vaddq_s64((int64x2_t)a15, v87))));
      if (v61 == v70) {
        return v37 >> 3;
      }
      if ((v61 & 8) == 0)
      {
        int v63 = (unsigned int *)((char *)a2 + v70);
        do
        {
LABEL_70:
          unsigned int v93 = *(unsigned __int8 *)v63;
          int v63 = (unsigned int *)((char *)v63 + 1);
          v37 += v93;
        }
        while (v63 < v25);
        return v37 >> 3;
      }
    }
    else
    {
      unint64_t v70 = 0;
    }
    int v63 = (unsigned int *)((char *)a2 + (v61 & 0xFFFFFFFFFFFFFFF8));
    int64x2_t v71 = 0uLL;
    int64x2_t v72 = (int64x2_t)v37;
    unsigned int v73 = (unint64_t *)((char *)a2 + v70);
    unint64_t v74 = v70 - (v61 & 0xFFFFFFFFFFFFFFF8);
    int64x2_t v75 = 0uLL;
    int64x2_t v76 = 0uLL;
    do
    {
      unint64_t v77 = *v73++;
      a15.i64[0] = v77;
      uint32x4_t v78 = (uint32x4_t)vqtbl1q_s8(a15, (int8x16_t)xmmword_1889B9EF0);
      a15 = vqtbl1q_s8(a15, (int8x16_t)xmmword_1889B9EE0);
      int64x2_t v76 = (int64x2_t)vaddw_high_u32((uint64x2_t)v76, v78);
      int64x2_t v71 = (int64x2_t)vaddw_high_u32((uint64x2_t)v71, (uint32x4_t)a15);
      int64x2_t v75 = (int64x2_t)vaddw_u32((uint64x2_t)v75, *(uint32x2_t *)v78.i8);
      int64x2_t v72 = (int64x2_t)vaddw_u32((uint64x2_t)v72, *(uint32x2_t *)a15.i8);
      v74 += 8;
    }
    while (v74);
    unint64_t v37 = vaddvq_s64(vaddq_s64(vaddq_s64(v72, v75), vaddq_s64(v71, v76)));
    if (v61 == (v61 & 0xFFFFFFFFFFFFFFF8)) {
      return v37 >> 3;
    }
    goto LABEL_70;
  }
  if (v61 >= 2)
  {
    uint64_t v64 = 0;
    unsigned int v62 = (unsigned int *)((char *)a2 + (v61 & 0xFFFFFFFFFFFFFFFELL));
    uint64_t v65 = (unsigned __int8 *)a2 + 1;
    unint64_t v66 = v61 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v67 = *(v65 - 1);
      unsigned int v68 = *v65;
      v65 += 2;
      v37 += *(unsigned int *)(a6 + 4 * v67);
      v64 += *(unsigned int *)(a6 + 4 * v68);
      v66 -= 2;
    }
    while (v66);
    v37 += v64;
    if (v61 == (v61 & 0xFFFFFFFFFFFFFFFELL)) {
      return v37 >> 3;
    }
  }
  else
  {
    unsigned int v62 = a2;
  }
  do
  {
    unsigned int v69 = *(unsigned __int8 *)v62;
    unsigned int v62 = (unsigned int *)((char *)v62 + 1);
    v37 += *(unsigned int *)(a6 + 4 * v69);
  }
  while (v62 < v25);
  return v37 >> 3;
}

uint64_t ZSTD_resetCCtx_internal(uint64_t a1, long long *a2, unint64_t a3, int a4, int a5)
{
  *(_DWORD *)(a1 + 624) = 1;
  unint64_t v10 = (long long *)((char *)a2 + 4);
  unsigned int v9 = *((_DWORD *)a2 + 1);
  int v11 = *((_DWORD *)a2 + 24);
  if (!v11) {
    goto LABEL_10;
  }
  *((_DWORD *)a2 + 29) = v9;
  if (*((_DWORD *)a2 + 27))
  {
    unsigned int v12 = *((_DWORD *)a2 + 25);
    if (v12) {
      goto LABEL_4;
    }
LABEL_77:
    unsigned int v12 = v9 - 7;
    if (v9 - 7 <= 6) {
      unsigned int v12 = 6;
    }
    *((_DWORD *)a2 + 25) = v12;
    unsigned int v13 = *((_DWORD *)a2 + 26);
    if (*((_DWORD *)a2 + 28)) {
      goto LABEL_5;
    }
    goto LABEL_80;
  }
  *((_DWORD *)a2 + 27) = 64;
  unsigned int v12 = *((_DWORD *)a2 + 25);
  if (!v12) {
    goto LABEL_77;
  }
LABEL_4:
  unsigned int v13 = *((_DWORD *)a2 + 26);
  if (!*((_DWORD *)a2 + 28))
  {
LABEL_80:
    unsigned int v50 = v9 - v12;
    if (v9 < v12) {
      unsigned int v50 = 0;
    }
    *((_DWORD *)a2 + 28) = v50;
  }
LABEL_5:
  if (!v13) {
    unsigned int v13 = 3;
  }
  if (v13 < v12) {
    unsigned int v12 = v13;
  }
  *((_DWORD *)a2 + 26) = v12;
LABEL_10:
  if (1 << v9 >= a3) {
    unint64_t v14 = a3;
  }
  else {
    unint64_t v14 = 1 << v9;
  }
  if (a3) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = 1;
  }
  if (v15 >= 0x20000) {
    unint64_t v16 = 0x20000;
  }
  else {
    unint64_t v16 = v15;
  }
  int v17 = *((_DWORD *)a2 + 5);
  if (v17 == 3) {
    unsigned int v18 = 3;
  }
  else {
    unsigned int v18 = 4;
  }
  if (a5 == 1)
  {
    unint64_t v19 = (0x20000 - v16) >> 11;
    if (v15 >= 0x20000) {
      unint64_t v19 = 0;
    }
    unint64_t v20 = v16 + (v16 >> 8) + v19;
    if (*((_DWORD *)a2 + 32)) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v20 + 1;
    }
    unint64_t v22 = v16 + v15;
    if (*((_DWORD *)a2 + 31)) {
      unint64_t v23 = 0;
    }
    else {
      unint64_t v23 = v22;
    }
  }
  else
  {
    unint64_t v21 = 0;
    unint64_t v23 = 0;
  }
  unsigned int v24 = *((_DWORD *)a2 + 27);
  if (v11) {
    uint64_t v25 = v16 / v24;
  }
  else {
    uint64_t v25 = 0;
  }
  BOOL v26 = *(void *)(a1 + 2888) - *(void *)(a1 + 2896) <= 0xDF000000uLL && *(_DWORD *)(a1 + 628) != 0;
  if (v14 >= 0x20000) {
    unint64_t v14 = 0x20000;
  }
  if (!a3) {
    unint64_t v14 = 1;
  }
  unsigned int v27 = *((_DWORD *)a2 + 7);
  if (v27 != 1)
  {
    uint64_t v28 = 4 << *((_DWORD *)a2 + 2);
    int v29 = *((_DWORD *)a2 + 3);
    if (v17 != 3) {
      goto LABEL_44;
    }
LABEL_53:
    if (v27 <= 6) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = 149000;
    }
    uint64_t v31 = (4 << v29) + v28;
    if (v9 <= 0x11)
    {
      if (!v9) {
        goto LABEL_48;
      }
      uint64_t v32 = 4 << v9;
      uint64_t v33 = *(void *)(a1 + 584);
      if (v11) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v32 = 0x80000;
      uint64_t v33 = *(void *)(a1 + 584);
      if (v11) {
        goto LABEL_49;
      }
    }
LABEL_58:
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    goto LABEL_59;
  }
  uint64_t v28 = 0;
  int v29 = *((_DWORD *)a2 + 3);
  if (v17 == 3) {
    goto LABEL_53;
  }
LABEL_44:
  if (v27 <= 6) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = 149000;
  }
  uint64_t v31 = (4 << v29) + v28;
LABEL_48:
  uint64_t v32 = 0;
  uint64_t v33 = *(void *)(a1 + 584);
  if (!v11) {
    goto LABEL_58;
  }
LABEL_49:
  unsigned int v34 = *((_DWORD *)a2 + 25);
  unsigned int v35 = *((_DWORD *)a2 + 26);
  if (v35 >= v34) {
    LOBYTE(v35) = *((_DWORD *)a2 + 25);
  }
  uint64_t v36 = (1 << (v34 - v35)) + (8 << v34);
  uint64_t v37 = 12 * (v14 / v24);
LABEL_59:
  uint64_t v38 = 19128;
  if (!v33) {
    uint64_t v38 = 15800;
  }
  size_t matched = v14 + v21 + v23 + v38 + v31 + v30 + v32 + v36 + v37 + 11 * (v14 / v18) + 32;
  if (matched <= 0xFFFFFFFFFFFFFF88)
  {
    uint64_t v105 = v25;
    if (!v33) {
      ++*(_DWORD *)(a1 + 420);
    }
    uint64_t v40 = *(unsigned char **)(a1 + 368);
    long long v41 = *(char **)(a1 + 376);
    size_t v42 = v41 - v40;
    if (*(void *)(a1 + 408) - *(void *)(a1 + 392) >= 3 * matched)
    {
      BOOL v43 = *(_DWORD *)(a1 + 420) > 128;
      int v44 = (_OWORD *)(a1 + 368);
      if (v42 < matched) {
        goto LABEL_74;
      }
    }
    else
    {
      BOOL v43 = 0;
      int v44 = (_OWORD *)(a1 + 368);
      if (v42 < matched) {
        goto LABEL_74;
      }
    }
    if (!v43)
    {
      int v45 = !v26;
      uint64_t v46 = *(char **)(a1 + 384);
      unsigned int v47 = *(_DWORD *)(a1 + 424);
      *(void *)(a1 + 392) = v46;
      *(void *)(a1 + 408) = v41;
      size_t v48 = (unsigned char *)(a1 + 416);
      *(unsigned char *)(a1 + 416) = 0;
      __int16 v49 = (_DWORD *)(a1 + 424);
      if (v47 >= 2) {
        *(_DWORD *)(a1 + 424) = 1;
      }
      goto LABEL_83;
    }
LABEL_74:
    if (v33) {
      return -64;
    }
    uint64_t v67 = *(void (**)(uint64_t))(a1 + 560);
    uint64_t v68 = *(void *)(a1 + 568);
    *int v44 = 0u;
    v44[1] = 0u;
    v44[2] = 0u;
    v44[3] = 0u;
    int v103 = a4;
    unint64_t v102 = v44;
    if (v40)
    {
      if (!v67)
      {
        free(v40);
        unsigned int v69 = *(uint64_t (**)(void, size_t))(a1 + 552);
        if (v69)
        {
LABEL_103:
          unint64_t v70 = (char *)v69(*(void *)(a1 + 568), matched);
          if (!v70) {
            return -64;
          }
LABEL_165:
          long long v41 = &v70[matched];
          *(void *)(a1 + 368) = v70;
          *(void *)(a1 + 376) = &v70[matched];
          *(void *)(a1 + 424) = 0;
          *(void *)(a1 + 384) = v70;
          *(void *)(a1 + 392) = v70;
          *(void *)(a1 + 400) = v70;
          *(void *)(a1 + 408) = &v70[matched];
          *(unsigned char *)(a1 + 416) = 0;
          *(_DWORD *)(a1 + 420) = 0;
          if ((uint64_t)matched <= 4591)
          {
            *(unsigned char *)(a1 + 416) = 1;
            *(void *)(a1 + 2872) = 0;
            return -64;
          }
          *(void *)(a1 + 384) = v70 + 4592;
          *(void *)(a1 + 392) = v70 + 4592;
          *(void *)(a1 + 400) = v70 + 4592;
          *(void *)(a1 + 2872) = v70;
          if (matched >> 5 <= 0x11E)
          {
            *(unsigned char *)(a1 + 416) = 1;
            *(void *)(a1 + 2880) = 0;
            return -64;
          }
          __int16 v49 = (_DWORD *)(a1 + 424);
          size_t v48 = (unsigned char *)(a1 + 416);
          uint64_t v101 = v70 + 9184;
          *(void *)(a1 + 384) = v70 + 9184;
          *(void *)(a1 + 400) = v70 + 9184;
          *(void *)(a1 + 2880) = v70 + 4592;
          a4 = v103;
          int v44 = v102;
          if (matched >> 3 >= 0x7B7)
          {
            uint64_t v46 = v70 + 15800;
            *(void *)(a1 + 384) = v70 + 15800;
            *(void *)(a1 + 400) = v70 + 15800;
          }
          else
          {
            uint64_t v46 = v70 + 9184;
            uint64_t v101 = 0;
          }
          *(void *)(a1 + 3120) = v101;
          *(void *)(a1 + 392) = v46;
          *(void *)(a1 + 408) = v41;
          int v45 = 1;
          *(unsigned char *)(a1 + 416) = 0;
LABEL_83:
          long long v51 = *a2;
          long long v52 = a2[1];
          *(_OWORD *)(a1 + 216) = a2[2];
          *(_OWORD *)(a1 + 200) = v52;
          *(_OWORD *)(a1 + 184) = v51;
          long long v53 = a2[3];
          long long v54 = a2[4];
          long long v55 = a2[6];
          *(_OWORD *)(a1 + 264) = a2[5];
          *(_OWORD *)(a1 + 280) = v55;
          *(_OWORD *)(a1 + 248) = v54;
          *(_OWORD *)(a1 + 232) = v53;
          long long v56 = a2[7];
          long long v57 = a2[8];
          long long v58 = a2[9];
          *(void *)(a1 + 344) = *((void *)a2 + 20);
          *(_OWORD *)(a1 + 312) = v57;
          *(_OWORD *)(a1 + 328) = v58;
          *(_OWORD *)(a1 + 296) = v56;
          long long v59 = *v10;
          *(_OWORD *)(a1 + 3092) = *(long long *)((char *)v10 + 12);
          *(_OWORD *)(a1 + 3080) = v59;
          *(void *)(a1 + 448) = 0;
          *(void *)(a1 + 456) = 0;
          *(void *)(a1 + 440) = a3 + 1;
          if (a3 == -1) {
            *(_DWORD *)(a1 + 216) = 0;
          }
          *(void *)(a1 + 432) = v16;
          *(_OWORD *)(a1 + 464) = xmmword_1889B9F80;
          *(_OWORD *)(a1 + 480) = xmmword_1889B9F90;
          *(void *)(a1 + 496) = 0x61C8864E7A143579;
          *(_OWORD *)(a1 + 536) = 0u;
          *(_OWORD *)(a1 + 520) = 0u;
          *(_OWORD *)(a1 + 504) = 0u;
          *(_DWORD *)a1 = 1;
          *(_DWORD *)(a1 + 352) = 0;
          *(void *)(a1 + 360) = 0;
          uint64_t v60 = *(void *)(a1 + 2872);
          *(void *)(v60 + 4580) = 0x400000001;
          *(_DWORD *)(v60 + 4588) = 8;
          *(_DWORD *)(v60 + 1024) = 0;
          *(void *)(v60 + 4568) = 0;
          *(_DWORD *)(v60 + 4576) = 0;
          unint64_t v61 = v48;
          if (*(_DWORD *)(a1 + 424))
          {
            unint64_t v62 = (unint64_t)&v41[-v16 - 32];
            if (v62 < (unint64_t)v46) {
              goto LABEL_87;
            }
          }
          else
          {
            *(void *)(a1 + 400) = v46;
            *(_DWORD *)(a1 + 424) = 1;
            unint64_t v62 = (unint64_t)&v41[-v16 - 32];
            if (v62 < (unint64_t)v46)
            {
LABEL_87:
              unsigned char *v48 = 1;
              unint64_t v62 = (unint64_t)v41;
              *(void *)(a1 + 648) = 0;
              *(void *)(a1 + 696) = v16;
              *(_DWORD *)(a1 + 3128) = a5;
              *(void *)(a1 + 3144) = v23;
              uint64_t v63 = v16 / v18;
              if (v23) {
                goto LABEL_88;
              }
              goto LABEL_95;
            }
          }
          if (v62 < *(void *)(a1 + 400)) {
            *(void *)(a1 + 400) = v62;
          }
          *(void *)(a1 + 408) = v62;
          *(void *)(a1 + 648) = v62;
          *(void *)(a1 + 696) = v16;
          *(_DWORD *)(a1 + 3128) = a5;
          *(void *)(a1 + 3144) = v23;
          uint64_t v63 = v16 / v18;
          if (v23)
          {
LABEL_88:
            unint64_t v64 = v62 - v23;
            if (v62 - v23 >= (unint64_t)v46)
            {
              uint64_t v65 = v49;
              if (v64 < *(void *)(a1 + 400)) {
                *(void *)(a1 + 400) = v64;
              }
              *(void *)(a1 + 408) = v64;
              *(void *)(a1 + 3136) = v64;
              *(void *)(a1 + 3184) = v21;
              if (!v21)
              {
LABEL_108:
                unint64_t v66 = v64;
                *(void *)(a1 + 3176) = 0;
                if (!*((_DWORD *)a2 + 24)) {
                  goto LABEL_119;
                }
                goto LABEL_113;
              }
            }
            else
            {
              unsigned char *v61 = 1;
              unint64_t v64 = v62;
              uint64_t v65 = v49;
              *(void *)(a1 + 3136) = 0;
              *(void *)(a1 + 3184) = v21;
              if (!v21) {
                goto LABEL_108;
              }
            }
LABEL_96:
            unint64_t v66 = v64 - v21;
            if (v64 - v21 >= (unint64_t)v46)
            {
              if (v66 < *(void *)(a1 + 400)) {
                *(void *)(a1 + 400) = v66;
              }
              *(void *)(a1 + 408) = v66;
              *(void *)(a1 + 3176) = v66;
              if (!*((_DWORD *)a2 + 24))
              {
LABEL_119:
                if (!*(_DWORD *)(a1 + 280))
                {
                  *(void *)(a1 + 2864) = 0;
                  *(_OWORD *)(a1 + 2848) = 0u;
                  *(_OWORD *)(a1 + 2832) = 0u;
                  *(void *)(a1 + 688) = v63;
                  unsigned int v81 = *(_DWORD *)(a1 + 424);
                  if (v81)
                  {
LABEL_121:
                    unint64_t v82 = *(void *)(a1 + 392);
                    unint64_t v83 = *(void *)(a1 + 408);
                    if (v18 > v16) {
                      goto LABEL_122;
                    }
                    goto LABEL_130;
                  }
LABEL_129:
                  *(void *)(a1 + 400) = *(void *)(a1 + 384);
                  unsigned int v81 = 1;
                  *(_DWORD *)(a1 + 424) = 1;
                  unint64_t v82 = *(void *)(a1 + 392);
                  unint64_t v83 = *(void *)(a1 + 408);
                  if (v18 > v16)
                  {
LABEL_122:
                    *(void *)(a1 + 672) = 0;
                    *(void *)(a1 + 664) = 0;
                    uint64_t v84 = a1 + 2888;
                    *(void *)(a1 + 680) = 0;
                    if (v81 <= 1) {
                      goto LABEL_123;
                    }
LABEL_147:
                    if (v18 <= v16)
                    {
LABEL_126:
                      unint64_t v86 = v83 - 8 * v63;
                      if (v86 >= v82)
                      {
                        if (v86 < *(void *)(a1 + 400)) {
                          *(void *)(a1 + 400) = v86;
                        }
                        *(void *)(a1 + 408) = v86;
                      }
                      else
                      {
                        unint64_t v86 = 0;
                        unsigned char *v61 = 1;
                      }
LABEL_149:
                      *(void *)(a1 + 632) = v86;
                      size_t matched = ZSTD_reset_matchState(v84, (uint64_t)v44, v10, a4, v45, 1);
                      if (matched > 0xFFFFFFFFFFFFFF88) {
                        return matched;
                      }
                      if (!*((_DWORD *)a2 + 24))
                      {
LABEL_186:
                        size_t matched = 0;
                        *(_DWORD *)(a1 + 628) = 1;
                        return matched;
                      }
                      unsigned int v89 = *((_DWORD *)a2 + 25);
                      size_t v90 = 8 << v89;
                      unsigned int v91 = *(_DWORD *)(a1 + 424);
                      if (v91 >= 2)
                      {
                        unint64_t v93 = *(void *)(a1 + 408);
                        if (v89 > 0x3C) {
                          goto LABEL_177;
                        }
                      }
                      else
                      {
                        if (v91)
                        {
                          unint64_t v92 = *(void *)(a1 + 400);
                        }
                        else
                        {
                          unint64_t v92 = *(void *)(a1 + 384);
                          *(void *)(a1 + 400) = v92;
                        }
                        unint64_t v93 = *(void *)(a1 + 408) & 0xFFFFFFFFFFFFFFFCLL;
                        *(void *)(a1 + 408) = v93;
                        if (v93 < v92) {
                          *(void *)(a1 + 400) = v93;
                        }
                        *uint64_t v65 = 2;
                        if (v89 > 0x3C)
                        {
LABEL_177:
                          *(void *)(a1 + 744) = 0;
                          bzero(0, v90);
                          unsigned int v95 = *(_DWORD *)(a1 + 424);
                          if (v95 < 2) {
                            goto LABEL_178;
                          }
                          goto LABEL_157;
                        }
                      }
                      unsigned int v94 = (void *)(v93 - v90);
                      if (v93 - v90 >= *(void *)(a1 + 392))
                      {
                        if ((unint64_t)v94 < *(void *)(a1 + 400)) {
                          *(void *)(a1 + 400) = v94;
                        }
                        *(void *)(a1 + 408) = v94;
                        *(void *)(a1 + 744) = v94;
                        bzero(v94, v90);
                        unsigned int v95 = *(_DWORD *)(a1 + 424);
                        if (v95 < 2)
                        {
LABEL_178:
                          uint64_t v97 = v105;
                          if (v95)
                          {
                            unint64_t v99 = *(void *)(a1 + 400);
                          }
                          else
                          {
                            unint64_t v99 = *(void *)(a1 + 384);
                            *(void *)(a1 + 400) = v99;
                          }
                          unint64_t v96 = *(void *)(a1 + 408) & 0xFFFFFFFFFFFFFFFCLL;
                          *(void *)(a1 + 408) = v96;
                          if (v96 < v99) {
                            *(void *)(a1 + 400) = v96;
                          }
                          *uint64_t v65 = 2;
                          if (!v105) {
                            goto LABEL_184;
                          }
                          goto LABEL_158;
                        }
                      }
                      else
                      {
                        unsigned char *v61 = 1;
                        *(void *)(a1 + 744) = 0;
                        bzero(0, v90);
                        unsigned int v95 = *(_DWORD *)(a1 + 424);
                        if (v95 < 2) {
                          goto LABEL_178;
                        }
                      }
LABEL_157:
                      unint64_t v96 = *(void *)(a1 + 408);
                      uint64_t v97 = v105;
                      if (!v105)
                      {
LABEL_184:
                        unint64_t v98 = 0;
LABEL_185:
                        *(void *)(a1 + 2816) = v98;
                        *(void *)(a1 + 2824) = v97;
                        *(void *)(a1 + 720) = "";
                        *(void *)(a1 + 728) = "";
                        *(void *)(a1 + 712) = "Mnum_stages";
                        *(void *)(a1 + 736) = 0x100000001;
                        *(_DWORD *)(a1 + 752) = 0;
                        goto LABEL_186;
                      }
LABEL_158:
                      unint64_t v98 = v96 - 12 * v97;
                      if (v98 >= *(void *)(a1 + 392))
                      {
                        if (v98 < *(void *)(a1 + 400)) {
                          *(void *)(a1 + 400) = v98;
                        }
                        *(void *)(a1 + 408) = v98;
                      }
                      else
                      {
                        unint64_t v98 = 0;
                        unsigned char *v61 = 1;
                      }
                      goto LABEL_185;
                    }
LABEL_148:
                    unint64_t v86 = 0;
                    goto LABEL_149;
                  }
LABEL_130:
                  unint64_t v87 = v83 - v63;
                  if (v83 - v63 >= v82)
                  {
                    if (v87 < *(void *)(a1 + 400)) {
                      *(void *)(a1 + 400) = v87;
                    }
                    *(void *)(a1 + 408) = v87;
                    *(void *)(a1 + 664) = v87;
                    unint64_t v88 = v87 - v63;
                    if (v87 - v63 >= v82)
                    {
                      if (v88 < *(void *)(a1 + 400)) {
                        *(void *)(a1 + 400) = v88;
                      }
                      *(void *)(a1 + 408) = v88;
                      *(void *)(a1 + 672) = v88;
                      unint64_t v83 = v88 - v63;
                      if (v88 - v63 < v82)
                      {
LABEL_146:
                        unsigned char *v61 = 1;
                        unint64_t v83 = v88;
                        uint64_t v84 = a1 + 2888;
                        *(void *)(a1 + 680) = 0;
                        if (v81 > 1) {
                          goto LABEL_147;
                        }
                        goto LABEL_123;
                      }
LABEL_135:
                      if (v83 < *(void *)(a1 + 400)) {
                        *(void *)(a1 + 400) = v83;
                      }
                      *(void *)(a1 + 408) = v83;
                      uint64_t v84 = a1 + 2888;
                      *(void *)(a1 + 680) = v83;
                      if (v81 > 1) {
                        goto LABEL_147;
                      }
LABEL_123:
                      unint64_t v85 = *(void *)(a1 + 400);
                      v83 &= 0xFFFFFFFFFFFFFFFCLL;
                      *(void *)(a1 + 408) = v83;
                      if (v83 < v85) {
                        *(void *)(a1 + 400) = v83;
                      }
                      *uint64_t v65 = 2;
                      if (v18 <= v16) {
                        goto LABEL_126;
                      }
                      goto LABEL_148;
                    }
                  }
                  else
                  {
                    unsigned char *v61 = 1;
                    unint64_t v87 = v83;
                    *(void *)(a1 + 664) = 0;
                  }
                  unsigned char *v61 = 1;
                  unint64_t v88 = v87;
                  *(void *)(a1 + 672) = 0;
                  unint64_t v83 = v87 - v63;
                  if (v87 - v63 < v82) {
                    goto LABEL_146;
                  }
                  goto LABEL_135;
                }
LABEL_120:
                *(void *)(a1 + 688) = v63;
                unsigned int v81 = *(_DWORD *)(a1 + 424);
                if (v81) {
                  goto LABEL_121;
                }
                goto LABEL_129;
              }
            }
            else
            {
              unsigned char *v61 = 1;
              unint64_t v66 = v64;
              *(void *)(a1 + 3176) = 0;
              if (!*((_DWORD *)a2 + 24)) {
                goto LABEL_119;
              }
            }
LABEL_113:
            unsigned int v104 = v10;
            size_t v71 = 1 << (*((unsigned char *)a2 + 100) - *((unsigned char *)a2 + 104));
            int64x2_t v72 = (void *)(v66 - v71);
            unsigned int v73 = v18;
            if (v66 - v71 >= (unint64_t)v46)
            {
              int64x2_t v80 = v61;
              unint64_t v77 = v65;
              if ((unint64_t)v72 < *(void *)(a1 + 400)) {
                *(void *)(a1 + 400) = v72;
              }
              uint64_t v74 = v63;
              int v76 = v45;
              uint32x4_t v78 = v44;
              int v79 = a4;
              *(void *)(a1 + 408) = v72;
            }
            else
            {
              uint64_t v74 = v63;
              int64x2_t v75 = v61;
              int v76 = v45;
              unint64_t v77 = v65;
              uint32x4_t v78 = v44;
              int v79 = a4;
              int64x2_t v72 = 0;
              int64x2_t v80 = v75;
              *int64x2_t v75 = 1;
            }
            *(void *)(a1 + 760) = v72;
            bzero(v72, v71);
            a4 = v79;
            int v44 = v78;
            uint64_t v65 = v77;
            int v45 = v76;
            unint64_t v61 = v80;
            uint64_t v63 = v74;
            unsigned int v18 = v73;
            unint64_t v10 = v104;
            if (*(_DWORD *)a1 != 1) {
              goto LABEL_120;
            }
            goto LABEL_119;
          }
LABEL_95:
          unint64_t v64 = v62;
          uint64_t v65 = v49;
          *(void *)(a1 + 3136) = 0;
          *(void *)(a1 + 3184) = v21;
          if (!v21) {
            goto LABEL_108;
          }
          goto LABEL_96;
        }
LABEL_164:
        unint64_t v70 = (char *)malloc_type_malloc(matched, 0x26AA08A0uLL);
        if (!v70) {
          return -64;
        }
        goto LABEL_165;
      }
      v67(v68);
    }
    unsigned int v69 = *(uint64_t (**)(void, size_t))(a1 + 552);
    if (v69) {
      goto LABEL_103;
    }
    goto LABEL_164;
  }
  return matched;
}

uint64_t ZSTD_reset_matchState(uint64_t a1, uint64_t a2, long long *a3, int a4, int a5, int a6)
{
  if (*((_DWORD *)a3 + 6) == 1)
  {
    uint64_t v10 = 0;
    int v11 = *((_DWORD *)a3 + 2);
    if (a6 != 1) {
      goto LABEL_10;
    }
  }
  else
  {
    int v11 = *((_DWORD *)a3 + 2);
    uint64_t v10 = 4 << *((_DWORD *)a3 + 1);
    if (a6 != 1) {
      goto LABEL_10;
    }
  }
  if (*((_DWORD *)a3 + 4) == 3)
  {
    int v12 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 >= 0x11u) {
      int v12 = 17;
    }
    if (a5 == 1) {
      goto LABEL_11;
    }
LABEL_9:
    unint64_t v14 = *(const char **)a1;
    unsigned int v13 = *(const char **)(a1 + 8);
    unint64_t v15 = *(void *)(a2 + 16);
    goto LABEL_12;
  }
LABEL_10:
  int v12 = 0;
  if (a5 != 1) {
    goto LABEL_9;
  }
LABEL_11:
  unsigned int v13 = "";
  *(void *)(a1 + 8) = "";
  *(void *)(a1 + 16) = "";
  unint64_t v14 = "Mnum_stages";
  *(void *)a1 = "Mnum_stages";
  unint64_t v15 = *(void *)(a2 + 16);
  *(void *)(a2 + 32) = v15;
LABEL_12:
  *(_DWORD *)(a1 + 40) = v12;
  *(int32x4_t *)(a1 + 24) = vzip1q_s32((int32x4_t)(v14 - v13), vdupq_lane_s32((int32x2_t)(v14 - v13), 0));
  *(_DWORD *)(a1 + 132) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a2 + 24) = v15;
  unint64_t v16 = v15 + (4 << v11);
  unint64_t v17 = *(void *)(a2 + 40);
  unsigned int v18 = *(_DWORD *)(a2 + 56);
  unint64_t v19 = v17;
  if (v18 > 1) {
    goto LABEL_17;
  }
  if (!v18)
  {
    unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    *(void *)(a2 + 32) = v15;
    *(void *)(a2 + 40) = v17 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v17 & 0xFFFFFFFFFFFFFFFCLL) >= v15) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  unint64_t v20 = *(void *)(a2 + 32);
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  *(void *)(a2 + 40) = v17 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v17 & 0xFFFFFFFFFFFFFFFCLL) < v20) {
LABEL_15:
  }
    *(void *)(a2 + 32) = v19;
LABEL_16:
  *(_DWORD *)(a2 + 56) = 2;
LABEL_17:
  if (v16 <= v17)
  {
    *(void *)(a2 + 24) = v16;
    uint64_t v21 = 4 << v12;
    *(void *)(a1 + 48) = v15;
    unint64_t v22 = v16 + v10;
    if (v16 + v10 <= v19)
    {
LABEL_19:
      *(void *)(a2 + 24) = v22;
      *(void *)(a1 + 64) = v16;
      if (v12) {
        uint64_t v23 = v21;
      }
      else {
        uint64_t v23 = 0;
      }
      unint64_t v24 = v22 + v23;
      if (v24 <= v19) {
        goto LABEL_23;
      }
LABEL_30:
      *(unsigned char *)(a2 + 48) = 1;
      *(void *)(a1 + 56) = 0;
      return -64;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 48) = 1;
    unint64_t v16 = v15;
    uint64_t v21 = 4 << v12;
    *(void *)(a1 + 48) = 0;
    unint64_t v22 = v15 + v10;
    if (v22 <= v19) {
      goto LABEL_19;
    }
  }
  *(unsigned char *)(a2 + 48) = 1;
  unint64_t v22 = v16;
  *(void *)(a1 + 64) = 0;
  if (v12) {
    uint64_t v27 = v21;
  }
  else {
    uint64_t v27 = 0;
  }
  unint64_t v24 = v16 + v27;
  if (v24 > v19) {
    goto LABEL_30;
  }
LABEL_23:
  *(void *)(a2 + 24) = v24;
  int v25 = *(unsigned __int8 *)(a2 + 48);
  *(void *)(a1 + 56) = v22;
  if (v25) {
    return -64;
  }
  if (a4 != 1)
  {
    uint64_t v28 = *(void **)(a2 + 32);
    if ((unint64_t)v28 < v24)
    {
      bzero(v28, v24 - (void)v28);
      unint64_t v24 = *(void *)(a2 + 24);
      uint64_t v28 = *(void **)(a2 + 32);
    }
    if ((unint64_t)v28 < v24) {
      *(void *)(a2 + 32) = v24;
    }
  }
  if (a6 != 1 || *((_DWORD *)a3 + 6) < 7u) {
    goto LABEL_73;
  }
  unsigned int v29 = *(_DWORD *)(a2 + 56);
  if (v29 >= 2)
  {
    unint64_t v31 = *(void *)(a2 + 40);
    unint64_t v32 = v31 - 1024;
    if (v31 - 1024 < v24) {
      goto LABEL_66;
    }
  }
  else
  {
    if (v29)
    {
      unint64_t v30 = *(void *)(a2 + 32);
    }
    else
    {
      unint64_t v30 = *(void *)(a2 + 16);
      *(void *)(a2 + 32) = v30;
    }
    unint64_t v31 = *(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL;
    *(void *)(a2 + 40) = v31;
    if (v31 < v30) {
      *(void *)(a2 + 32) = v31;
    }
    *(_DWORD *)(a2 + 56) = 2;
    unint64_t v32 = v31 - 1024;
    if (v31 - 1024 < v24)
    {
LABEL_66:
      *(unsigned char *)(a2 + 48) = 1;
      unint64_t v32 = v31;
      *(void *)(a1 + 80) = 0;
      unint64_t v33 = v31 - 144;
      if (v33 < v24) {
        goto LABEL_67;
      }
      goto LABEL_47;
    }
  }
  if (v32 < *(void *)(a2 + 32)) {
    *(void *)(a2 + 32) = v32;
  }
  *(void *)(a2 + 40) = v32;
  *(void *)(a1 + 80) = v32;
  unint64_t v33 = v32 - 144;
  if (v32 - 144 < v24)
  {
LABEL_67:
    *(unsigned char *)(a2 + 48) = 1;
    unint64_t v33 = v32;
    *(void *)(a1 + 88) = 0;
    unint64_t v34 = v32 - 212;
    if (v32 - 212 < v24) {
      goto LABEL_68;
    }
    goto LABEL_50;
  }
LABEL_47:
  if (v33 < *(void *)(a2 + 32)) {
    *(void *)(a2 + 32) = v33;
  }
  *(void *)(a2 + 40) = v33;
  *(void *)(a1 + 88) = v33;
  unint64_t v34 = v33 - 212;
  if (v33 - 212 < v24)
  {
LABEL_68:
    *(unsigned char *)(a2 + 48) = 1;
    unint64_t v34 = v33;
    *(void *)(a1 + 96) = 0;
    unint64_t v35 = v33 - 128;
    if (v33 - 128 < v24) {
      goto LABEL_69;
    }
    goto LABEL_53;
  }
LABEL_50:
  if (v34 < *(void *)(a2 + 32)) {
    *(void *)(a2 + 32) = v34;
  }
  *(void *)(a2 + 40) = v34;
  *(void *)(a1 + 96) = v34;
  unint64_t v35 = v34 - 128;
  if (v34 - 128 < v24)
  {
LABEL_69:
    *(unsigned char *)(a2 + 48) = 1;
    unint64_t v35 = v34;
    *(void *)(a1 + 104) = 0;
    unint64_t v36 = v34 - 32776;
    if (v34 - 32776 < v24) {
      goto LABEL_70;
    }
LABEL_56:
    if (v36 < *(void *)(a2 + 32)) {
      *(void *)(a2 + 32) = v36;
    }
    *(void *)(a2 + 40) = v36;
    *(void *)(a1 + 112) = v36;
    unint64_t v37 = v36 - 114716;
    if (v36 - 114716 < v24) {
      goto LABEL_71;
    }
LABEL_59:
    if (v37 < *(void *)(a2 + 32)) {
      *(void *)(a2 + 32) = v37;
    }
    *(void *)(a2 + 40) = v37;
    goto LABEL_72;
  }
LABEL_53:
  if (v35 < *(void *)(a2 + 32)) {
    *(void *)(a2 + 32) = v35;
  }
  *(void *)(a2 + 40) = v35;
  *(void *)(a1 + 104) = v35;
  unint64_t v36 = v35 - 32776;
  if (v35 - 32776 >= v24) {
    goto LABEL_56;
  }
LABEL_70:
  *(unsigned char *)(a2 + 48) = 1;
  *(void *)(a1 + 112) = 0;
  unint64_t v37 = v35 - 114716;
  if (v37 >= v24) {
    goto LABEL_59;
  }
LABEL_71:
  unint64_t v37 = 0;
  *(unsigned char *)(a2 + 48) = 1;
LABEL_72:
  *(void *)(a1 + 120) = v37;
LABEL_73:
  long long v38 = *a3;
  *(_OWORD *)(a1 + 204) = *(long long *)((char *)a3 + 12);
  *(_OWORD *)(a1 + 192) = v38;
  if (*(unsigned char *)(a2 + 48)) {
    return -64;
  }
  else {
    return 0;
  }
}

uint32x4_t *ZSTD_overflowCorrectIfNeeded(uint32x4_t *result, void *a2, _DWORD *a3, int a4, int a5)
{
  uint64_t v5 = result->i64[1];
  if ((a5 - v5) >= 0xE0000001)
  {
    uint64_t v8 = result;
    int v9 = 1 << (a3[2] - (a3[7] > 5u));
    if (((v9 - 1) & (a4 - v5)) != 0) {
      int v9 = (v9 - 1) & (a4 - v5);
    }
    uint64_t v10 = ((-1 << a3[1]) + a4 - v5 - v9);
    uint64_t v11 = result[1].i64[0] + v10;
    result->i64[1] = v5 + v10;
    result[1].i64[0] = v11;
    int32x2_t v12 = vdup_n_s32(v10);
    int32x2_t v13 = (int32x2_t)result[1].u64[1];
    int8x8_t v14 = (int8x8_t)vcgt_u32((uint32x2_t)v13, (uint32x2_t)v12);
    result[1].u64[1] = (unint64_t)vsub_s32((int32x2_t)vand_s8((int8x8_t)vsub_s32(v13, v12), v14), (int32x2_t)vmvn_s8(v14));
    a2[4] = a2[2];
    unint64_t result = ZSTD_reduceTable((uint32x4_t *)result[3].i64[0], 1 << a3[3], v10);
    int v15 = a3[7];
    if (v15 != 1)
    {
      int v16 = 1 << a3[2];
      unint64_t result = (uint32x4_t *)v8[4].i64[0];
      if (v15 == 6)
      {
        int v17 = v16 + 15;
        if (v16 >= 0) {
          int v17 = 1 << a3[2];
        }
        if (v16 >= 16)
        {
          int v18 = v17 >> 4;
          int8x16_t v19 = (int8x16_t)vdupq_n_s32(v10);
          unint64_t v20 = (int32x4_t *)&result[2];
          v21.i64[0] = 0x100000001;
          v21.i64[1] = 0x100000001;
          do
          {
            uint32x4_t v22 = vqsubq_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v19, (int8x16_t)vceqq_s32(v20[-1], v21)), v20[-1]), (uint32x4_t)v19);
            v20[-2] = (int32x4_t)vqsubq_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v19, (int8x16_t)vceqq_s32(v20[-2], v21)), v20[-2]), (uint32x4_t)v19);
            v20[-1] = (int32x4_t)v22;
            uint32x4_t v23 = vqsubq_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v19, (int8x16_t)vceqq_s32(v20[1], v21)), v20[1]), (uint32x4_t)v19);
            *(uint32x4_t *)unint64_t v20 = vqsubq_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v19, (int8x16_t)vceqq_s32(*v20, v21)), *v20), (uint32x4_t)v19);
            v20[1] = (int32x4_t)v23;
            v20 += 4;
            --v18;
          }
          while (v18);
        }
      }
      else
      {
        unint64_t result = ZSTD_reduceTable(result, v16, v10);
      }
    }
    __int32 v24 = v8[2].i32[2];
    if (v24) {
      unint64_t result = ZSTD_reduceTable((uint32x4_t *)v8[3].i64[1], 1 << v24, v10);
    }
    unint64_t v25 = a2[3];
    if (a2[4] < v25) {
      a2[4] = v25;
    }
    unsigned int v26 = v8[2].u32[1];
    BOOL v27 = v26 >= v10;
    __int32 v28 = v26 - v10;
    if (!v27) {
      __int32 v28 = 0;
    }
    v8[2].i32[0] = 0;
    v8[2].i32[1] = v28;
    v8[11].i64[1] = 0;
  }
  return result;
}

uint64_t ZSTD_compressBlock_internal(uint64_t a1, unsigned char *a2, unint64_t a3, void *a4, unint64_t a5, int a6)
{
  unint64_t v12 = ZSTD_buildSeqStore((int32x2_t *)a1, (unint64_t)a4, a5);
  int v13 = 4 * (v12 == 1);
  if (v12 >= 0xFFFFFFFFFFFFFF89) {
    int v13 = 1;
  }
  if (v13 == 4)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = v12;
    if (v13) {
      return v14;
    }
    int v15 = (int8x16_t *)(a1 + 2872);
    if (*(_DWORD *)(a1 + 592))
    {
      ZSTD_copyBlockSequences(a1);
      uint64_t v14 = 0;
      int8x16_t *v15 = vextq_s8(*v15, *v15, 8uLL);
      return v14;
    }
    unint64_t v17 = ZSTD_entropyCompressSequences(a1 + 632, *(unsigned __int16 **)(a1 + 2872), *(char **)(a1 + 2880), (_DWORD *)(a1 + 184), (uint64_t)a2, a3, a5, *(uint32x4_t **)(a1 + 3120));
    if (*(_DWORD *)(a1 + 592))
    {
      ZSTD_copyBlockSequences(a1);
      return 0;
    }
    uint64_t v14 = v17;
    if (a6 && !*(_DWORD *)(a1 + 624) && v17 <= 0x18 && ZSTD_isRLE(a4, a5))
    {
      *a2 = *(unsigned char *)a4;
      uint64_t v14 = 1;
    }
    else if ((unint64_t)(v14 - 2) <= 0xFFFFFFFFFFFFFF86)
    {
      int8x16_t *v15 = vextq_s8(*v15, *v15, 8uLL);
    }
  }
  uint64_t v16 = *(void *)(a1 + 2872);
  if (*(_DWORD *)(v16 + 4568) == 2) {
    *(_DWORD *)(v16 + 4568) = 1;
  }
  return v14;
}

uint32x4_t *ZSTD_reduceTable(uint32x4_t *result, int a2, unsigned int a3)
{
  int v3 = a2 + 15;
  if (a2 >= 0) {
    int v3 = a2;
  }
  if (a2 >= 16)
  {
    int v4 = v3 >> 4;
    uint32x4_t v5 = (uint32x4_t)vdupq_n_s32(a3);
    double v6 = result + 2;
    do
    {
      uint32x4_t v7 = vqsubq_u32(v6[-1], v5);
      v6[-2] = vqsubq_u32(v6[-2], v5);
      v6[-1] = v7;
      uint32x4_t v8 = vqsubq_u32(v6[1], v5);
      *double v6 = vqsubq_u32(*v6, v5);
      v6[1] = v8;
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t ZSTD_buildSeqStore(int32x2_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  if (a3 > 6)
  {
    a1[82] = a1[81];
    a1[80] = a1[79];
    a1[88].i32[0] = 0;
    uint64_t v14 = (_DWORD *)a1[359];
    a1[382] = (int32x2_t)v14;
    a1[383].i32[0] = a1[32].i32[0];
    unsigned int v15 = a2 - a1[362].i32[0];
    __int32 v16 = a1[365].i32[1];
    if (v16 + 384 < v15)
    {
      unsigned int v17 = v15 - v16 - 384;
      if (v17 >= 0xC0) {
        unsigned int v17 = 192;
      }
      a1[365].i32[1] = v15 - v17;
    }
    if (a1[364].i32[1] >= (unsigned __int32)a1[364].i32[0])
    {
      uint64_t v18 = (uint64_t)a1[384];
      if (v18)
      {
        BOOL v30 = *(_DWORD *)(v18 + 72) == 0;
        uint64_t v18 = 2;
        if (!v30) {
          uint64_t v18 = 3;
        }
      }
    }
    else
    {
      uint64_t v18 = 1;
    }
    unint64_t v31 = (_DWORD *)a1[360];
    unint64_t v32 = v31 + 1145;
    v31[1145] = v14[1145];
    v31[1146] = v14[1146];
    v31[1147] = v14[1147];
    if (*(void *)&a1[355] >= *(void *)&a1[357])
    {
      if (!a1[35].i32[0])
      {
        unint64_t v35 = (uint64_t (*)(int32x2_t *, int32x2_t *, void *, unint64_t, unint64_t))*(&ZSTD_selectBlockCompressor_blockCompressor[10 * v18] + a1[26].i32[1]);
        a1[389] = 0;
        size_t v34 = v35(a1 + 361, a1 + 79, v32, a2, a3);
        goto LABEL_40;
      }
      v38[0] = a1[352];
      memset(&v38[1], 0, 24);
      v38[4] = a1[353];
      unint64_t result = ZSTD_ldm_generateSequences(a1 + 89, v38, &a1[35], a2, a3);
      if (result > 0xFFFFFFFFFFFFFF88) {
        return result;
      }
      unint64_t v32 = (void *)(*(void *)&a1[360] + 4580);
      unint64_t v33 = (int32x2_t *)v38;
    }
    else
    {
      unint64_t v33 = a1 + 354;
    }
    size_t v34 = ZSTD_ldm_blockCompress((uint64_t)v33, (uint64_t)&a1[361], (uint64_t)&a1[79], v32, a2, v3);
LABEL_40:
    size_t v36 = v34;
    memcpy(*(void **)&a1[82], (const void *)(a2 + v3 - v34), v34);
    unint64_t result = 0;
    *(void *)&a1[82] += v36;
    return result;
  }
  if (a1[26].i32[1] >= 7u)
  {
    unsigned int v5 = a1[356].i32[0] + a3;
    if (v5)
    {
      int32x2_t v6 = a1[357];
      int32x2_t v7 = a1[355];
      if (*(void *)&v7 <= *(void *)&v6) {
        int32x2_t v8 = a1[357];
      }
      else {
        int32x2_t v8 = a1[355];
      }
      uint64_t v9 = 12 * *(void *)&v7;
      while (1)
      {
        if (*(void *)&v8 == *(void *)&v7)
        {
          if (*(void *)&v8 != *(void *)&v6) {
            return 1;
          }
          goto LABEL_44;
        }
        unsigned int v10 = *(_DWORD *)(*(void *)&a1[354] + v9 + 8) + *(_DWORD *)(*(void *)&a1[354] + v9 + 4);
        BOOL v11 = v5 >= v10;
        unsigned int v12 = v5 - v10;
        if (!v11) {
          break;
        }
        ++*(void *)&v7;
        a1[355] = v7;
        v9 += 12;
        unsigned int v5 = v12;
        if (!v12) {
          goto LABEL_44;
        }
      }
      a1[356] = (int32x2_t)v5;
      if (*(void *)&v7 != *(void *)&v6) {
        return 1;
      }
    }
LABEL_44:
    a1[356] = 0;
    return 1;
  }
  if (!a3) {
    return 1;
  }
  unsigned int v19 = a1[25].u32[1];
  int32x2_t v20 = a1[357];
  int32x2_t v21 = a1[355];
  if (*(void *)&v21 <= *(void *)&v20) {
    int32x2_t v22 = a1[357];
  }
  else {
    int32x2_t v22 = a1[355];
  }
  uint64_t v23 = 12 * *(void *)&v21;
  unint64_t result = 1;
  while (*(void *)&v22 != *(void *)&v21)
  {
    int32x2_t v25 = a1[354];
    uint64_t v26 = *(void *)&v25 + v23;
    unint64_t v27 = *(unsigned int *)(*(void *)&v25 + v23 + 4);
    unint64_t v28 = v3 - v27;
    if (v3 <= v27)
    {
      *(_DWORD *)(v26 + 4) = v27 - v3;
      return 1;
    }
    *(_DWORD *)(v26 + 4) = 0;
    unint64_t v29 = *(unsigned int *)(v26 + 8);
    unint64_t v3 = v28 - v29;
    if (v28 < v29)
    {
      *(_DWORD *)(*(void *)&v25 + v23 + 8) = v29 - v28;
      if ((int)v29 - (int)v28 < v19)
      {
        int32x2_t v37 = (int32x2_t)(*(void *)&v21 + 1);
        if (*(void *)&v37 < *(void *)&v20) {
          *(_DWORD *)(*(void *)&v25 + v23 + 16) += v29 - v28;
        }
        a1[355] = v37;
      }
      return 1;
    }
    *(_DWORD *)(v26 + 8) = 0;
    ++*(void *)&v21;
    a1[355] = v21;
    v23 += 12;
    if (v28 == v29) {
      return result;
    }
  }
  return result;
}

uint64_t ZSTD_isRLE(void *a1, unint64_t a2)
{
  if (a2 == 1) {
    return 1;
  }
  unint64_t v2 = a2 & 0x1F;
  if ((a2 & 0x1F) == 0)
  {
LABEL_21:
    if (a2 < 0x20) {
      return 1;
    }
    uint64_t v11 = 0x101010101010101 * *(unsigned __int8 *)a1;
    unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFE0;
    for (uint64_t i = (void *)((char *)a1 + v2 + 16); *(i - 2) == v11 && *(i - 1) == v11 && *i == v11 && i[1] == v11; i += 4)
    {
      v12 -= 32;
      if (!v12) {
        return 1;
      }
    }
    return 0;
  }
  unint64_t v3 = (char *)a1 + v2;
  int v4 = (char *)a1 + 1;
  unsigned int v5 = a1;
  if (v2 < 9)
  {
LABEL_13:
    if (v4 >= v3 - 3)
    {
      if (v4 >= v3 - 1) {
        goto LABEL_17;
      }
    }
    else
    {
      if (*v5 == *(_DWORD *)v4)
      {
        v4 += 4;
        ++v5;
      }
      if (v4 >= v3 - 1)
      {
LABEL_17:
        if (v4 >= v3) {
          goto LABEL_20;
        }
        goto LABEL_18;
      }
    }
    if (*(unsigned __int16 *)v5 == *(unsigned __int16 *)v4)
    {
      v4 += 2;
      unsigned int v5 = (_DWORD *)((char *)v5 + 2);
    }
    if (v4 >= v3)
    {
LABEL_20:
      if (v4 - ((char *)a1 + 1) != v2 - 1) {
        return 0;
      }
      goto LABEL_21;
    }
LABEL_18:
    if (*(unsigned __int8 *)v5 == *v4) {
      ++v4;
    }
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)((char *)a1 + 1) ^ *a1;
  if (!v6)
  {
    uint64_t v7 = 0;
    do
    {
      int32x2_t v8 = &a1[v7];
      int v4 = (char *)&a1[v7 + 1] + 1;
      if (v4 >= v3 - 7)
      {
        unsigned int v5 = v8 + 1;
        goto LABEL_13;
      }
      ++v7;
      unint64_t v9 = *(void *)v4 ^ v8[1];
    }
    while (!v9);
    if (v7 * 8 + (__clz(__rbit64(v9)) >> 3) == v2 - 1) {
      goto LABEL_21;
    }
    return 0;
  }
  if (__clz(__rbit64(v6)) >> 3 == v2 - 1) {
    goto LABEL_21;
  }
  return 0;
}

uint64_t ZSTD_copyBlockSequences(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 632);
  uint64_t v2 = *(void *)(result + 640);
  uint64_t v3 = *(void *)(result + 656);
  uint64_t v4 = *(void *)(result + 648);
  uint64_t v5 = *(void *)(result + 608);
  uint64_t v6 = *(void *)(result + 2872);
  uint64_t v7 = *(void *)(result + 600) + 16 * v5;
  unint64_t v31 = *(void *)(v6 + 4580);
  int v32 = *(_DWORD *)(v6 + 4588);
  uint64_t v9 = v2 - v1;
  BOOL v8 = v9 == 0;
  unint64_t v10 = v9 >> 3;
  int v11 = 0;
  if (!v8)
  {
    uint64_t v12 = *(unsigned int *)(result + 708);
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    uint64_t v14 = v7 + 8;
    unsigned int v15 = (unsigned __int16 *)(v1 + 6);
    uint64_t v16 = v13;
    while (1)
    {
      unsigned int v22 = *(_DWORD *)(v15 - 3);
      int v23 = *(v15 - 1);
      *(_DWORD *)(v14 - 4) = v23;
      int v24 = *v15;
      *(void *)uint64_t v14 = (v24 + 3);
      if (v12) {
        goto LABEL_10;
      }
      int v27 = *(_DWORD *)(result + 704);
      if (v27 == 2) {
        break;
      }
      int v25 = v23;
      if (v27 == 1)
      {
        int v25 = v23 | 0x10000;
        *(_DWORD *)(v14 - 4) = v23 | 0x10000;
      }
LABEL_11:
      if (v22 >= 4)
      {
        *(_DWORD *)(v14 - 8) = v22 - 3;
        int v17 = v22 - 1;
LABEL_7:
        uint64_t v18 = v31;
        unsigned int v19 = v17 - 2;
        int32x2_t v20 = (int *)&v31 + 1;
        goto LABEL_8;
      }
      *(_DWORD *)(v14 + 4) = v22;
      if (v25)
      {
        unsigned int v26 = v22 - 1;
        *(_DWORD *)(v14 - 8) = *((_DWORD *)&v31 + v22 - 1);
        if (v22 - 1 >= 3) {
          goto LABEL_35;
        }
      }
      else
      {
        if (v22 == 3)
        {
          *(_DWORD *)(v14 - 8) = v31 - 1;
          if (v23) {
            unsigned int v26 = 2;
          }
          else {
            unsigned int v26 = 3;
          }
LABEL_17:
          if (v26 == 3)
          {
            uint64_t v18 = v31;
            unsigned int v19 = v31 - 1;
          }
          else
          {
            unsigned int v19 = *((_DWORD *)&v31 + v26);
            uint64_t v18 = v31;
          }
          if (v26 <= 1) {
            uint64_t v28 = 8;
          }
          else {
            uint64_t v28 = 4;
          }
          int32x2_t v20 = (int *)((char *)&v31 + v28);
          goto LABEL_8;
        }
        unsigned int v26 = v22 - 1;
        *(_DWORD *)(v14 - 8) = *((_DWORD *)&v31 + v22);
        if (v22 - 1 >= 3)
        {
LABEL_35:
          int v17 = -1;
          goto LABEL_7;
        }
      }
      if (!v23) {
        ++v26;
      }
      if (v26) {
        goto LABEL_17;
      }
      unsigned int v19 = v31;
      uint64_t v18 = HIDWORD(v31);
      int32x2_t v20 = &v32;
LABEL_8:
      v15 += 4;
      int v21 = *v20;
      unint64_t v31 = v19 | (unint64_t)(v18 << 32);
      int v32 = v21;
      v11 += v25;
      --v12;
      v14 += 16;
      if (!--v16) {
        goto LABEL_37;
      }
    }
    *(_DWORD *)uint64_t v14 = v24 + 65539;
LABEL_10:
    int v25 = v23;
    goto LABEL_11;
  }
  uint64_t v13 = 0;
LABEL_37:
  int v29 = v3 - (v11 + v4);
  uint64_t v30 = v7 + 16 * v13;
  *(_DWORD *)uint64_t v30 = 0;
  *(_DWORD *)(v30 + 4) = v29;
  *(void *)(v30 + 8) = 0;
  *(void *)(result + 608) = v10 + v5 + 1;
  return result;
}

unint64_t ZSTD_entropyCompressSequences(uint64_t a1, unsigned __int16 *__src, char *__dst, _DWORD *a4, uint64_t a5, unint64_t a6, unint64_t a7, uint32x4_t *a8)
{
  BOOL v119 = a4[1] > 0x39u;
  unsigned int v13 = a4[7];
  uint64_t v14 = &a8[13].i8[4];
  int v15 = a4[18];
  if (v15 == 1) {
    goto LABEL_6;
  }
  if (v15 == 2)
  {
    BOOL v16 = 1;
    goto LABEL_7;
  }
  if (v13 != 1) {
LABEL_6:
  }
    BOOL v16 = 0;
  else {
    BOOL v16 = a4[6] != 0;
  }
LABEL_7:
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v123 = *(void *)a1;
  unsigned int v124 = *(unsigned int **)(a1 + 32);
  uint64_t v120 = *(unsigned int **)(a1 + 40);
  uint64_t v121 = *(unsigned int **)(a1 + 48);
  unint64_t v18 = a6;
  uint64_t v19 = a5;
  unint64_t result = ZSTD_compressLiterals(__src, __dst, v13, v16, a5, a6, *(unsigned int **)(a1 + 16), *(void *)(a1 + 24) - *(void *)(a1 + 16), v14, 0x1904uLL);
  if (result > 0xFFFFFFFFFFFFFF88) {
    goto LABEL_111;
  }
  uint64_t v116 = __dst;
  int v117 = __src;
  unint64_t v118 = v14;
  unint64_t v21 = v19 + v18;
  unsigned int v22 = (char *)(v19 + result);
  unint64_t v23 = v18;
  if ((uint64_t)(v18 - result) < 4)
  {
    if (a7 <= v18) {
      return 0;
    }
    else {
      return -70;
    }
  }
  unint64_t v24 = v17 - v123;
  uint64_t v25 = (v17 - v123) >> 3;
  if ((unint64_t)(v17 - v123) > 0x3FF)
  {
    if (v24 >> 11 > 0x7E)
    {
      *unsigned int v22 = -1;
      *(_WORD *)(v22 + 1) = (v24 >> 3) - 32512;
      unsigned int v26 = v22 + 3;
      if (v17 == v123) {
        goto LABEL_39;
      }
    }
    else
    {
      *unsigned int v22 = BYTE1(v25) ^ 0x80;
      v22[1] = v24 >> 3;
      unsigned int v26 = v22 + 2;
      if (v17 == v123) {
        goto LABEL_39;
      }
    }
LABEL_14:
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v27 = *(void *)(a1 + 40);
    unint64_t v29 = *(void *)(a1 + 8) - *(void *)a1;
    if ((v29 & 0x7FFFFFFF8) != 0)
    {
      uint64_t v30 = (v29 >> 3);
      unint64_t v31 = (unsigned __int16 *)(*(void *)a1 + 6);
      int v32 = *(unsigned char **)(a1 + 48);
      unint64_t v33 = *(unsigned char **)(a1 + 32);
      size_t v34 = *(unsigned char **)(a1 + 40);
      do
      {
        while (1)
        {
          unsigned int v35 = *(v31 - 1);
          if (v35 < 0x40) {
            LOBYTE(v36) = ZSTD_LLcode_LL_Code[*(v31 - 1)];
          }
          else {
            unsigned int v36 = 50 - __clz(v35);
          }
          unsigned int v37 = *v31;
          *unint64_t v33 = v36;
          *int v32 = __clz(*(_DWORD *)(v31 - 3)) ^ 0x1F;
          if (v37 >= 0x80) {
            break;
          }
          v31 += 4;
          *v34++ = ZSTD_MLcode_ML_Code[v37];
          ++v32;
          ++v33;
          if (!--v30) {
            goto LABEL_22;
          }
        }
        v31 += 4;
        *v34++ = 67 - __clz(v37);
        ++v32;
        ++v33;
        --v30;
      }
      while (v30);
    }
LABEL_22:
    int8x16x2_t v112 = (unsigned __int16 *)(v116 + 1028);
    int v38 = *(_DWORD *)(a1 + 72);
    if (v38 == 1)
    {
      *(unsigned char *)(v28 + *(unsigned int *)(a1 + 76)) = 35;
      int v38 = *(_DWORD *)(a1 + 72);
    }
    __dsta = (unsigned __int16 *)(v116 + 3252);
    if (v38 == 2) {
      *(unsigned char *)(v27 + *(unsigned int *)(a1 + 76)) = 52;
    }
    v127[0] = 35;
    unint64_t v110 = v24 >> 5;
    unint64_t v114 = a7;
    unint64_t v115 = v23;
    uint64_t v107 = v19;
    unint64_t v113 = v21;
    if (v24 >> 5 > 0x176)
    {
      if ((v118 & 3) != 0)
      {
        unint64_t v44 = -1;
        LODWORD(v41) = 35;
      }
      else
      {
        unint64_t v44 = HIST_count_parallel_wksp(a8, v127, v124, v25, 0, v118);
        LODWORD(v41) = v127[0];
      }
      goto LABEL_51;
    }
    a8[7] = 0u;
    a8[8] = 0u;
    uint64_t v39 = v124;
    a8[5] = 0u;
    a8[6] = 0u;
    a8[3] = 0u;
    a8[4] = 0u;
    a8[1] = 0u;
    a8[2] = 0u;
    *a8 = 0u;
    do
    {
      int v40 = *(unsigned __int8 *)v39;
      uint64_t v39 = (unsigned int *)((char *)v39 + 1);
      ++a8->i32[v40];
    }
    while (v39 < (unsigned int *)((char *)v124 + v25));
    LODWORD(v41) = 36;
    do
      uint64_t v41 = (v41 - 1);
    while (!a8->i32[v41]);
    if (v41 >= 7)
    {
      uint64_t v42 = (v41 + 1) & 0x1FFFFFFF8;
      int v45 = a8 + 1;
      uint64_t v46 = v42;
      uint32x4_t v47 = 0uLL;
      uint32x4_t v48 = 0uLL;
      do
      {
        uint32x4_t v47 = vmaxq_u32(v45[-1], v47);
        uint32x4_t v48 = vmaxq_u32(*v45, v48);
        v45 += 2;
        v46 -= 8;
      }
      while (v46);
      unsigned int v43 = vmaxvq_u32(vmaxq_u32(v47, v48));
      if (v41 + 1 == v42)
      {
LABEL_49:
        unint64_t v44 = v43;
LABEL_51:
        *((_DWORD *)v116 + 1144) = *((_DWORD *)__src + 1144);
        int v53 = ZSTD_selectEncodingType((_DWORD *)v116 + 1144, (unsigned int *)a8, v41, v44, v25, 9u, __src + 1626, (uint64_t)LL_defaultNorm, 6, 1, v13);
        unint64_t result = ZSTD_buildCTable(v26 + 1, v113 - (void)(v26 + 1), __dsta, 9u, v53, (unsigned int *)a8, v41, v124, v25, LL_defaultNorm, 6, 35, __src + 1626, 0x524uLL, v118, 0x1904uLL);
        if (result >= 0xFFFFFFFFFFFFFF89) {
          unint64_t v54 = 0;
        }
        else {
          unint64_t v54 = result;
        }
        char v108 = v53;
        if (result < 0xFFFFFFFFFFFFFF89 && v53 == 2) {
          long long v56 = v26 + 1;
        }
        else {
          long long v56 = 0;
        }
        uint64_t v57 = (v17 - v123) >> 3;
        unint64_t v18 = v115;
        if (result > 0xFFFFFFFFFFFFFF88) {
          goto LABEL_111;
        }
        uint64_t v109 = (v17 - v123) >> 3;
        long long v58 = &v26[v54 + 1];
        unsigned int v126 = 31;
        if (v110 > 0x176)
        {
          unint64_t v64 = v56;
          if ((v118 & 3) != 0)
          {
            unint64_t v67 = -1;
            LODWORD(v62) = 31;
            uint64_t v63 = v116;
            uint64_t v68 = v117;
            unsigned int v69 = v13;
            unint64_t v60 = v109;
            goto LABEL_80;
          }
          unint64_t v60 = v109;
          unint64_t v67 = HIST_count_parallel_wksp(a8, &v126, v121, v109, 0, v118);
          LODWORD(v62) = v126;
          uint64_t v63 = v116;
          uint64_t v68 = v117;
LABEL_79:
          unsigned int v69 = v13;
LABEL_80:
          *((_DWORD *)v63 + 1142) = *((_DWORD *)v68 + 1142);
          int v78 = ZSTD_selectEncodingType((_DWORD *)v63 + 1142, (unsigned int *)a8, v62, v67, v60, 8u, v117 + 514, (uint64_t)OF_defaultNorm, 5, v62 < 0x1D, v69);
          unint64_t result = ZSTD_buildCTable(v58, v113 - (void)v58, v112, 8u, v78, (unsigned int *)a8, v62, v121, v60, OF_defaultNorm, 5, 28, v117 + 514, 0x304uLL, v118, 0x1904uLL);
          unint64_t v18 = v115;
          if (result > 0xFFFFFFFFFFFFFF88) {
            goto LABEL_111;
          }
          int v79 = &v58[result];
          if (v78 == 2) {
            int64x2_t v80 = v58;
          }
          else {
            int64x2_t v80 = v64;
          }
          unsigned int v125 = 52;
          int v106 = v80;
          if (v110 > 0x176)
          {
            if ((v118 & 3) != 0)
            {
              unint64_t v88 = -1;
              LODWORD(v84) = 52;
              unsigned int v89 = v117;
              unsigned int v90 = v13;
              unint64_t v82 = v109;
            }
            else
            {
              unint64_t v82 = v109;
              unint64_t v88 = HIST_count_parallel_wksp(a8, &v125, v120, v109, 0, v118);
              LODWORD(v84) = v125;
              unsigned int v89 = v117;
              unsigned int v90 = v13;
            }
            unint64_t v85 = (unsigned __int16 *)(v63 + 1800);
            goto LABEL_103;
          }
          unsigned int v81 = v120;
          unint64_t v82 = v109;
          a8[13].i32[0] = 0;
          a8[11] = 0u;
          a8[12] = 0u;
          a8[9] = 0u;
          a8[10] = 0u;
          a8[7] = 0u;
          a8[8] = 0u;
          a8[5] = 0u;
          a8[6] = 0u;
          a8[3] = 0u;
          a8[4] = 0u;
          a8[1] = 0u;
          a8[2] = 0u;
          *a8 = 0u;
          do
          {
            int v83 = *(unsigned __int8 *)v81;
            unsigned int v81 = (unsigned int *)((char *)v81 + 1);
            ++a8->i32[v83];
          }
          while (v81 < (unsigned int *)((char *)v120 + v109));
          LODWORD(v84) = 53;
          unint64_t v85 = (unsigned __int16 *)(v63 + 1800);
          do
            uint64_t v84 = (v84 - 1);
          while (!a8->i32[v84]);
          if (v84 >= 7)
          {
            uint64_t v86 = (v84 + 1) & 0x1FFFFFFF8;
            unsigned int v91 = a8 + 1;
            uint64_t v92 = v86;
            uint32x4_t v93 = 0uLL;
            uint32x4_t v94 = 0uLL;
            do
            {
              uint32x4_t v93 = vmaxq_u32(v91[-1], v93);
              uint32x4_t v94 = vmaxq_u32(*v91, v94);
              v91 += 2;
              v92 -= 8;
            }
            while (v92);
            unsigned int v87 = vmaxvq_u32(vmaxq_u32(v93, v94));
            if (v84 + 1 == v86)
            {
LABEL_100:
              unint64_t v88 = v87;
              unsigned int v89 = v117;
              unsigned int v90 = v13;
LABEL_103:
              *((_DWORD *)v63 + 1143) = *((_DWORD *)v89 + 1143);
              unint64_t v99 = v89 + 900;
              int v100 = ZSTD_selectEncodingType((_DWORD *)v63 + 1143, (unsigned int *)a8, v84, v88, v82, 9u, v89 + 900, (uint64_t)ML_defaultNorm, 6, 1, v90);
              unint64_t result = ZSTD_buildCTable(v79, v113 - (void)v79, v85, 9u, v100, (unsigned int *)a8, v84, v120, v82, ML_defaultNorm, 6, 52, v99, 0x5ACuLL, v118, 0x1904uLL);
              if (v100 == 2) {
                uint64_t v101 = v79;
              }
              else {
                uint64_t v101 = v106;
              }
              unint64_t v102 = v82;
              a7 = v114;
              unint64_t v18 = v115;
              if (result > 0xFFFFFFFFFFFFFF88) {
                goto LABEL_111;
              }
              int v103 = (unint64_t *)&v79[result];
              *unsigned int v26 = (v108 << 6) + 16 * v78 + 4 * v100;
              unint64_t result = ZSTD_encodeSequences(v103, v113 - (void)v103, v85, (uint64_t)v120, v112, (uint64_t)v121, __dsta, (uint64_t)v124, v123, v102, v119);
              if (result > 0xFFFFFFFFFFFFFF88) {
                goto LABEL_111;
              }
              unsigned int v26 = (char *)v103 + result;
              if (v101)
              {
                uint64_t v19 = v107;
                unint64_t v23 = v115;
                if (v26 - v101 < 4) {
                  return 0;
                }
              }
              else
              {
                uint64_t v19 = v107;
                unint64_t v23 = v115;
              }
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v86 = 0;
            unsigned int v87 = 0;
          }
          uint64_t v95 = v84 - v86 + 1;
          unint64_t v96 = (unsigned int *)a8 + v86;
          do
          {
            unsigned int v98 = *v96++;
            unsigned int v97 = v98;
            if (v98 > v87) {
              unsigned int v87 = v97;
            }
            --v95;
          }
          while (v95);
          goto LABEL_100;
        }
        long long v59 = v121;
        unint64_t v60 = v57;
        a8[6] = 0u;
        a8[7] = 0u;
        a8[4] = 0u;
        a8[5] = 0u;
        a8[2] = 0u;
        a8[3] = 0u;
        *a8 = 0u;
        a8[1] = 0u;
        do
        {
          int v61 = *(unsigned __int8 *)v59;
          long long v59 = (unsigned int *)((char *)v59 + 1);
          ++a8->i32[v61];
        }
        while (v59 < (unsigned int *)((char *)v121 + v57));
        LODWORD(v62) = 32;
        do
          uint64_t v62 = (v62 - 1);
        while (!a8->i32[v62]);
        uint64_t v63 = v116;
        unint64_t v64 = v56;
        if (v62 >= 7)
        {
          uint64_t v65 = (v62 + 1) & 0x1FFFFFFF8;
          unint64_t v70 = a8 + 1;
          uint64_t v71 = v65;
          uint32x4_t v72 = 0uLL;
          uint32x4_t v73 = 0uLL;
          do
          {
            uint32x4_t v72 = vmaxq_u32(v70[-1], v72);
            uint32x4_t v73 = vmaxq_u32(*v70, v73);
            v70 += 2;
            v71 -= 8;
          }
          while (v71);
          unsigned int v66 = vmaxvq_u32(vmaxq_u32(v72, v73));
          if (v62 + 1 == v65)
          {
LABEL_77:
            unint64_t v67 = v66;
            uint64_t v68 = v117;
            goto LABEL_79;
          }
        }
        else
        {
          uint64_t v65 = 0;
          unsigned int v66 = 0;
        }
        uint64_t v74 = v62 - v65 + 1;
        int64x2_t v75 = (unsigned int *)a8 + v65;
        do
        {
          unsigned int v77 = *v75++;
          unsigned int v76 = v77;
          if (v77 > v66) {
            unsigned int v66 = v76;
          }
          --v74;
        }
        while (v74);
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v42 = 0;
      unsigned int v43 = 0;
    }
    uint64_t v49 = v41 - v42 + 1;
    unsigned int v50 = (unsigned int *)a8 + v42;
    do
    {
      unsigned int v52 = *v50++;
      unsigned int v51 = v52;
      if (v52 > v43) {
        unsigned int v43 = v51;
      }
      --v49;
    }
    while (v49);
    goto LABEL_49;
  }
  *unsigned int v22 = v24 >> 3;
  unsigned int v26 = v22 + 1;
  if (v17 != v123) {
    goto LABEL_14;
  }
LABEL_39:
  memcpy(v116 + 1028, __src + 514, 0xDE0uLL);
LABEL_40:
  unint64_t result = (unint64_t)&v26[-v19];
  if (v26 == (char *)v19) {
    return result;
  }
  unint64_t v18 = v23;
LABEL_111:
  if (a7 <= v18 && result == -70) {
    return 0;
  }
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    unsigned int v104 = a4[7];
    if (v104 <= 7) {
      char v105 = 6;
    }
    else {
      char v105 = v104 - 1;
    }
    if (result >= a7 - (a7 >> v105) - 2) {
      return 0;
    }
  }
  return result;
}

unint64_t ZSTD_compress_insertDictionary(uint64_t a1, unint64_t a2, unint64_t a3, void *a4, _DWORD *a5, _DWORD *a6, unint64_t a7, int a8, int a9, _DWORD *a10)
{
  if (a6 && a7 > 7)
  {
    *(void *)(a1 + 4580) = 0x400000001;
    *(_DWORD *)(a1 + 4588) = 8;
    *(_DWORD *)(a1 + 1024) = 0;
    *(void *)(a1 + 4568) = 0;
    *(_DWORD *)(a1 + 4576) = 0;
    if (a8 == 1) {
      goto LABEL_4;
    }
    if (*a6 == -332356553) {
      goto LABEL_20;
    }
    if (a8 == 2) {
      return -32;
    }
    if (a8)
    {
LABEL_20:
      if (a5[10])
      {
        uint64_t v16 = 0;
        unint64_t result = ZSTD_loadCEntropy(a1, a10, (uint64_t)a6, a7);
        if (result <= 0xFFFFFFFFFFFFFF88) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v16 = a6[1];
        unint64_t result = ZSTD_loadCEntropy(a1, a10, (uint64_t)a6, a7);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
LABEL_16:
          ZSTD_loadDictionaryContent(a2, 0, a4, a5, (unint64_t)a6 + result, a7 - result, a9);
          return v16;
        }
      }
    }
    else
    {
LABEL_4:
      ZSTD_loadDictionaryContent(a2, a3, a4, a5, (unint64_t)a6, a7, a9);
      return 0;
    }
  }
  else if (a8 == 2)
  {
    return -32;
  }
  else
  {
    return 0;
  }
  return result;
}

unint64_t ZSTD_loadDictionaryContent(unint64_t result, unint64_t a2, void *a3, _DWORD *a4, unint64_t a5, uint64_t a6, int a7)
{
  unint64_t v7 = a5;
  BOOL v8 = a4;
  unint64_t v10 = a2;
  int v11 = (uint32x4_t *)result;
  unint64_t v12 = a5 + a6;
  if (a6)
  {
    if (*(void *)result == a5)
    {
      uint64_t v13 = *(void *)(result + 16);
      LODWORD(v14) = *(_DWORD *)(result + 24);
      unsigned int v15 = *(_DWORD *)(result + 28);
    }
    else
    {
      uint64_t v13 = *(void *)(result + 8);
      uint64_t v14 = *(void *)result - v13;
      unsigned int v15 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = v14;
      *(_DWORD *)(result + 28) = v15;
      *(void *)(result + 8) = a5 - v14;
      *(void *)(result + 16) = v13;
      if (v14 - v15 <= 7)
      {
        *(_DWORD *)(result + 28) = v14;
        unsigned int v15 = v14;
      }
    }
    *(void *)unint64_t result = v12;
    if (v12 > v13 + (unint64_t)v15 && v13 + (unint64_t)v14 > a5)
    {
      uint64_t v17 = v12 - v13;
      if (v17 > v14) {
        LODWORD(v17) = v14;
      }
      *(_DWORD *)(result + 28) = v17;
    }
  }
  int v18 = a4[12];
  if (v18)
  {
    *(_DWORD *)(result + 32) = 0;
    int v19 = a4[24];
    uint64_t v39 = a4 + 24;
    if (!a2) {
      goto LABEL_33;
    }
  }
  else
  {
    *(_DWORD *)(result + 32) = v12 - *(_DWORD *)(result + 8);
    int v19 = a4[24];
    uint64_t v39 = a4 + 24;
    if (!a2) {
      goto LABEL_33;
    }
  }
  if (v19)
  {
    if (a6)
    {
      if (*(void *)a2 == a5)
      {
        uint64_t v20 = *(void *)(a2 + 16);
        LODWORD(v21) = *(_DWORD *)(a2 + 24);
        unsigned int v22 = *(_DWORD *)(a2 + 28);
      }
      else
      {
        uint64_t v20 = *(void *)(a2 + 8);
        uint64_t v21 = *(void *)a2 - v20;
        unsigned int v22 = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v21;
        *(_DWORD *)(a2 + 28) = v22;
        *(void *)(a2 + 8) = a5 - v21;
        *(void *)(a2 + 16) = v20;
        if (v21 - v22 <= 7)
        {
          *(_DWORD *)(a2 + 28) = v21;
          unsigned int v22 = v21;
        }
      }
      *(void *)a2 = v12;
      if (v12 > v20 + (unint64_t)v22 && v20 + (unint64_t)v21 > a5)
      {
        uint64_t v23 = v12 - v20;
        if (v23 > v21) {
          LODWORD(v23) = v21;
        }
        *(_DWORD *)(a2 + 28) = v23;
      }
    }
    if (v18) {
      int v24 = 0;
    }
    else {
      int v24 = v12 - *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a2 + 40) = v24;
  }
LABEL_33:
  if ((unint64_t)a6 >= 9)
  {
    if (a6 >= 9)
    {
      unint64_t v25 = a5;
      do
      {
        int v26 = v25;
        if ((unint64_t)a6 >= 0x1FFFFFFF) {
          uint64_t v27 = 0x1FFFFFFFLL;
        }
        else {
          uint64_t v27 = a6;
        }
        v25 += v27;
        unint64_t result = (unint64_t)ZSTD_overflowCorrectIfNeeded(v11, a3, v8, v26, v25);
        if (v10 && v8[24]) {
          unint64_t result = ZSTD_ldm_fillHashTable(v10, v7, v12, v39);
        }
        switch(v8[7])
        {
          case 1:
            unint64_t result = ZSTD_fillHashTable((uint64_t)v11, v25, a7);
            break;
          case 2:
            unint64_t result = ZSTD_fillDoubleHashTable((uint64_t)v11, v25, a7);
            break;
          case 3:
          case 4:
          case 5:
            unsigned int v36 = (uint64_t *)(v25 - 8);
            if (v11[4].i32[2]) {
              unint64_t result = ZSTD_dedicatedDictSearch_lazy_loadDictionary((uint64_t)v11, (int)v36);
            }
            else {
              unint64_t result = ZSTD_insertAndFindFirstIndex((uint64_t)v11, v36);
            }
            break;
          case 6:
          case 7:
          case 8:
          case 9:
            unint64_t v28 = v10;
            unint64_t v29 = a3;
            unint64_t v30 = v12;
            unint64_t v31 = v7;
            uint64_t v32 = v11->i64[1];
            unsigned __int32 v33 = v25 - v32 - 8;
            unsigned __int32 v34 = v11[2].u32[1];
            if (v34 < v33)
            {
              int v35 = v11[13].i32[0];
              do
              {
                unint64_t result = ZSTD_insertBt1((uint64_t)v11, (void *)(v32 + v34), v25, v35, 0);
                v34 += result;
              }
              while (v34 < v33);
            }
            v11[2].i32[1] = v33;
            unint64_t v7 = v31;
            unint64_t v12 = v30;
            a3 = v29;
            unint64_t v10 = v28;
            BOOL v8 = a4;
            break;
          default:
            break;
        }
        a6 = v12 - v25;
      }
      while ((uint64_t)(v12 - v25) > 8);
    }
    v11[2].i32[1] = v12 - v11->i32[2];
  }
  return result;
}

uint64_t ZSTD_copySequencesToSeqStoreExplicitBlockDelim(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, char *__src, uint64_t a6)
{
  uint64_t v6 = __src;
  unsigned int v9 = *a2;
  unint64_t v10 = &__src[a6];
  uint64_t v11 = *(void *)(a1 + 3288);
  if (v11)
  {
    unint64_t v12 = (unsigned int *)(v11 + 8);
LABEL_5:
    uint64_t v13 = *v12;
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(a1 + 3296);
  if (v13)
  {
    unint64_t v12 = (unsigned int *)(a1 + 3304);
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v14 = *(void *)(a1 + 2872);
  unint64_t v71 = *(void *)(v14 + 4580);
  unsigned int v15 = (char *)&v71 + 4;
  uint64_t v16 = v10 - 32;
  int v17 = *(_DWORD *)(v14 + 4588);
  int v72 = v17;
  while (1)
  {
    unint64_t v18 = v9;
    int v19 = (unsigned int *)(a3 + 16 * v9);
    unsigned int v20 = v19[2];
    if (!v20) {
      break;
    }
    if (v18 >= a4) {
      goto LABEL_82;
    }
    unsigned int v21 = *v19;
LABEL_15:
    uint64_t v23 = a3 + 16 * v18;
    uint64_t v24 = *(unsigned int *)(v23 + 4);
    int v25 = *(_DWORD *)(v23 + 4) == 0;
    uint64_t v26 = v71;
    if (v24) {
      BOOL v27 = v71 == v21;
    }
    else {
      BOOL v27 = 0;
    }
    if (v27)
    {
      unsigned int v29 = 0;
      goto LABEL_25;
    }
    if (HIDWORD(v71) == v21)
    {
      int v28 = 2;
LABEL_24:
      unsigned int v29 = v28 + ~v25;
      goto LABEL_25;
    }
    if (v17 == v21)
    {
      int v28 = 3;
      goto LABEL_24;
    }
    if (v24 || v71 - 1 != v21)
    {
      unsigned int v29 = v21 + 2;
      if (v21 != 0 && v21 < 0xFFFFFFFE)
      {
        unint64_t v31 = (int *)v15;
        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v29 = 2;
    }
LABEL_25:
    unsigned int v30 = v29 + v25;
    if (v29 + v25)
    {
      if (v30 == 3)
      {
        unsigned int v21 = v71 - 1;
      }
      else
      {
        unsigned int v21 = *((_DWORD *)&v71 + v30);
        uint64_t v26 = v71;
      }
      if (v30 <= 1) {
        uint64_t v32 = 8;
      }
      else {
        uint64_t v32 = 4;
      }
      unint64_t v31 = (int *)((char *)&v71 + v32);
    }
    else
    {
      unsigned int v21 = v71;
      uint64_t v26 = HIDWORD(v71);
      unint64_t v31 = &v72;
    }
LABEL_34:
    int v17 = *v31;
    unint64_t v71 = v21 | (unint64_t)(v26 << 32);
    int v72 = v17;
    if (*(_DWORD *)(a1 + 320))
    {
      unint64_t v33 = *((void *)a2 + 1) + v24 + v20;
      *((void *)a2 + 1) = v33;
      unint64_t v34 = v33 <= 1 << *(_DWORD *)(a1 + 188) ? v33 + v13 : 1 << *(_DWORD *)(a1 + 188);
      uint64_t result = -20;
      if (v20 < *(_DWORD *)(a1 + 204) || v34 + 2 < v29) {
        return result;
      }
    }
    if (*(void *)(a1 + 688) < (unint64_t)(v18 - *a2)) {
      return -64;
    }
    unsigned int v36 = (char *)v6 + v24;
    unsigned int v37 = *(char **)(a1 + 656);
    if ((char *)v6 + v24 <= v16)
    {
      *(_OWORD *)unsigned int v37 = *v6;
      uint64_t v40 = *(void *)(a1 + 656);
      if (v24 <= 0x10)
      {
        *(void *)(a1 + 656) = v40 + v24;
        uint64_t v52 = *(void *)(a1 + 640);
        goto LABEL_80;
      }
      uint64_t v41 = (_OWORD *)(v40 + 16);
      unint64_t v42 = v40 + v24;
      unsigned int v43 = v6 + 1;
      do
      {
        long long v44 = *v43++;
        *v41++ = v44;
      }
      while ((unint64_t)v41 < v42);
    }
    else
    {
      if (v6 <= (_OWORD *)v16)
      {
        uint64_t v39 = &v37[v16 - (char *)v6];
        int v45 = v6;
        uint64_t v46 = *(char **)(a1 + 656);
        do
        {
          long long v47 = *v45++;
          *(_OWORD *)uint64_t v46 = v47;
          v46 += 16;
        }
        while (v46 < v39);
        int v38 = v16;
        if (v16 >= v36) {
          goto LABEL_78;
        }
      }
      else
      {
        int v38 = v6;
        uint64_t v39 = *(char **)(a1 + 656);
        if (v6 >= (_OWORD *)v36) {
          goto LABEL_78;
        }
      }
      uint32x4_t v48 = (char *)v6 + v24;
      if (v6 <= (_OWORD *)v16) {
        uint64_t v49 = v16;
      }
      else {
        uint64_t v49 = (char *)v6;
      }
      unint64_t v50 = v48 - v49;
      if ((unint64_t)(v48 - v49) < 8)
      {
        unsigned int v51 = (char *)v38;
        goto LABEL_77;
      }
      if ((unint64_t)(v37 - (char *)v6) < 0x20)
      {
        unsigned int v51 = (char *)v38;
        goto LABEL_77;
      }
      if (v50 >= 0x20)
      {
        unint64_t v54 = v10;
        long long v55 = v15;
        unint64_t v53 = v50 & 0xFFFFFFFFFFFFFFE0;
        long long v56 = v38 + 1;
        uint64_t v57 = &v37[v49 - (char *)v6 + 16];
        unint64_t v58 = v50 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v59 = *v56;
          *((_OWORD *)v57 - 1) = *(v56 - 1);
          *(_OWORD *)uint64_t v57 = v59;
          v56 += 2;
          v57 += 32;
          v58 -= 32;
        }
        while (v58);
        unsigned int v15 = v55;
        unint64_t v10 = v54;
        if (v50 == v53) {
          goto LABEL_78;
        }
        if ((v50 & 0x18) == 0)
        {
          unsigned int v51 = (char *)v38 + v53;
          v39 += v53;
          do
          {
LABEL_77:
            char v64 = *v51++;
            *v39++ = v64;
          }
          while (v51 < v36);
          goto LABEL_78;
        }
      }
      else
      {
        unint64_t v53 = 0;
      }
      v39 += v50 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v51 = (char *)v38 + (v50 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v60 = (uint64_t *)((char *)v38 + v53);
      int v61 = &v37[&v49[v53] - (char *)v6];
      unint64_t v62 = v53 - (v50 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v63 = *v60++;
        *(void *)int v61 = v63;
        v61 += 8;
        v62 += 8;
      }
      while (v62);
      if (v50 != (v50 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_77;
      }
    }
LABEL_78:
    *(void *)(a1 + 656) += v24;
    uint64_t v52 = *(void *)(a1 + 640);
    if (v24 >= 0x10000)
    {
      *(_DWORD *)(a1 + 704) = 1;
      *(_DWORD *)(a1 + 708) = (unint64_t)(v52 - *(void *)(a1 + 632)) >> 3;
    }
LABEL_80:
    *(_WORD *)(v52 + 4) = v24;
    *(_DWORD *)uint64_t v52 = v29 + 1;
    if (v20 - 3 >= 0x10000)
    {
      *(_DWORD *)(a1 + 704) = 2;
      *(_DWORD *)(a1 + 708) = (unint64_t)(v52 - *(void *)(a1 + 632)) >> 3;
    }
    *(_WORD *)(v52 + 6) = v20 - 3;
    *(void *)(a1 + 640) = v52 + 8;
    uint64_t v6 = (_OWORD *)((char *)v6 + v24 + v20);
    unsigned int v9 = v18 + 1;
  }
  unsigned int v21 = *v19;
  if (v18 < a4 && v21 != 0) {
    goto LABEL_15;
  }
LABEL_82:
  uint64_t v65 = *(void *)(a1 + 2880);
  *(void *)(v65 + 4580) = v71;
  *(_DWORD *)(v65 + 4588) = v72;
  uint64_t v66 = a3 + 16 * v18;
  unsigned int v69 = *(_DWORD *)(v66 + 4);
  uint64_t v68 = (unsigned int *)(v66 + 4);
  size_t v67 = v69;
  if (v69)
  {
    memcpy(*(void **)(a1 + 656), v6, v67);
    *(void *)(a1 + 656) += v67;
    uint64_t v70 = *v68;
    uint64_t v6 = (_OWORD *)((char *)v6 + v70);
    *((void *)a2 + 1) += v70;
  }
  if (v6 != (_OWORD *)v10) {
    return -20;
  }
  uint64_t result = 0;
  *a2 = v18 + 1;
  return result;
}

uint64_t ZSTD_copySequencesToSeqStoreNoBlockDelim(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6)
{
  unsigned int v8 = *a2;
  unsigned int v9 = a2[1];
  unsigned int v10 = v9 + a6;
  uint64_t v11 = *(void *)(a1 + 3288);
  if (v11)
  {
    unint64_t v12 = (uint64_t *)(v11 + 8);
LABEL_5:
    uint64_t v13 = *v12;
    goto LABEL_6;
  }
  if (*(void *)(a1 + 3296))
  {
    unint64_t v12 = (uint64_t *)(a1 + 3304);
    goto LABEL_5;
  }
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = &a5[a6];
  uint64_t v15 = *(void *)(a1 + 2872);
  unint64_t v78 = *(void *)(v15 + 4580);
  int v79 = *(_DWORD *)(v15 + 4588);
  if (v10)
  {
    int v16 = 0;
    unsigned int v17 = 0;
    unint64_t v18 = (unint64_t)(v14 - 32);
    int v19 = v79;
    while (1)
    {
      if (v16 || v8 >= a4) {
        goto LABEL_103;
      }
      unsigned int v20 = (unsigned int *)(a3 + 16 * v8);
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      unint64_t v23 = v20[2];
      int v24 = v23 + v21;
      unsigned int v25 = v23 + v21 - v10;
      if (v23 + v21 <= v10)
      {
        int v16 = 0;
        if (v21 >= v9) {
          unsigned int v26 = v21 - v9;
        }
        else {
          unsigned int v26 = 0;
        }
        BOOL v34 = v9 >= v21;
        unsigned int v35 = v9 - v21;
        if (!v34) {
          unsigned int v35 = 0;
        }
        unsigned int v29 = v23 - v35;
        ++v8;
        unsigned int v9 = 0;
        int v30 = v26 == 0;
        uint64_t v31 = v78;
        if (v26) {
          BOOL v36 = v78 == v22;
        }
        else {
          BOOL v36 = 0;
        }
        if (v36) {
          goto LABEL_28;
        }
      }
      else
      {
        if (v10 <= v21) {
          goto LABEL_103;
        }
        if (v21 >= v9) {
          unsigned int v26 = v21 - v9;
        }
        else {
          unsigned int v26 = 0;
        }
        if (v23 <= a6 || (unsigned int v27 = v10 - v9 - v26, v28 = *(_DWORD *)(a1 + 204), v27 < v28))
        {
          unsigned int v17 = v10 - v21;
          unsigned int v10 = v20[1];
          goto LABEL_103;
        }
        if (v28 > v25) {
          unsigned int v17 = v28 - v25;
        }
        if (v28 >= v25) {
          int v24 = v28 - v25;
        }
        else {
          int v24 = 0;
        }
        unsigned int v29 = v27 - v24;
        int v16 = 1;
        int v30 = v26 == 0;
        uint64_t v31 = v78;
        if (v26) {
          BOOL v32 = v78 == v22;
        }
        else {
          BOOL v32 = 0;
        }
        if (v32)
        {
LABEL_28:
          unsigned int v33 = 0;
          goto LABEL_43;
        }
      }
      if (HIDWORD(v78) == v22) {
        break;
      }
      if (v19 == v22)
      {
        int v37 = 3;
        goto LABEL_42;
      }
      if (v26 || v31 - 1 != v22)
      {
        unsigned int v33 = v22 + 2;
        if (v22 != 0 && v22 < 0xFFFFFFFE)
        {
          uint64_t v39 = (int *)&v78 + 1;
          goto LABEL_51;
        }
      }
      else
      {
        unsigned int v33 = 2;
      }
LABEL_43:
      unsigned int v38 = v33 + v30;
      if (v33 + v30)
      {
        if (v38 == 3)
        {
          unsigned int v22 = v31 - 1;
        }
        else
        {
          unsigned int v22 = *((_DWORD *)&v78 + v38);
          uint64_t v31 = v78;
        }
        BOOL v40 = v38 > 1;
        uint64_t v41 = 8;
        if (v40) {
          uint64_t v41 = 4;
        }
        uint64_t v39 = (int *)((char *)&v78 + v41);
      }
      else
      {
        unsigned int v22 = v78;
        uint64_t v31 = HIDWORD(v78);
        uint64_t v39 = &v79;
      }
LABEL_51:
      int v19 = *v39;
      unint64_t v78 = v22 | (unint64_t)(v31 << 32);
      int v79 = v19;
      if (*(_DWORD *)(a1 + 320))
      {
        unint64_t v42 = *((void *)a2 + 1) + v29 + v26;
        *((void *)a2 + 1) = v42;
        unint64_t v43 = v42 <= 1 << *(_DWORD *)(a1 + 188) ? v42 + v13 : 1 << *(_DWORD *)(a1 + 188);
        uint64_t v44 = -20;
        if (v29 < *(_DWORD *)(a1 + 204) || v43 + 2 < v33) {
          return v44;
        }
      }
      if (*(void *)(a1 + 688) < (unint64_t)(v8 - *a2)) {
        return -64;
      }
      int v45 = &a5[v26];
      uint64_t v46 = *(char **)(a1 + 656);
      if ((unint64_t)v45 > v18)
      {
        if ((unint64_t)a5 <= v18)
        {
          uint32x4_t v48 = &v46[v18 - (void)a5];
          unint64_t v54 = a5;
          long long v55 = *(char **)(a1 + 656);
          do
          {
            long long v56 = *(_OWORD *)v54;
            v54 += 16;
            *(_OWORD *)long long v55 = v56;
            v55 += 16;
          }
          while (v55 < v48);
          long long v47 = (_OWORD *)v18;
          if (v18 < (unint64_t)v45) {
            goto LABEL_69;
          }
        }
        else
        {
          long long v47 = a5;
          uint32x4_t v48 = *(char **)(a1 + 656);
          if (a5 >= v45) {
            goto LABEL_96;
          }
LABEL_69:
          uint64_t v57 = &a5[v26];
          if ((unint64_t)a5 <= v18) {
            unint64_t v58 = (char *)v18;
          }
          else {
            unint64_t v58 = a5;
          }
          unint64_t v59 = v57 - v58;
          if ((unint64_t)(v57 - v58) < 8)
          {
            unint64_t v60 = (char *)v47;
            goto LABEL_95;
          }
          if ((unint64_t)(v46 - a5) < 0x20)
          {
            unint64_t v60 = (char *)v47;
            goto LABEL_95;
          }
          unsigned int v77 = v14;
          if (v59 >= 0x20)
          {
            unint64_t v63 = v59 & 0xFFFFFFFFFFFFFFE0;
            char v64 = v47 + 1;
            uint64_t v65 = &v46[v58 - a5 + 16];
            unint64_t v66 = v59 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)uint64_t v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 32;
            }
            while (v66);
            uint64_t v14 = v77;
            if (v59 != v63)
            {
              if ((v59 & 0x18) == 0)
              {
                unint64_t v60 = (char *)v47 + v63;
                v48 += v63;
                goto LABEL_95;
              }
              goto LABEL_90;
            }
          }
          else
          {
            unint64_t v63 = 0;
LABEL_90:
            v48 += v59 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v60 = (char *)v47 + (v59 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v68 = (uint64_t *)((char *)v47 + v63);
            unsigned int v69 = &v46[&v58[v63] - a5];
            unint64_t v70 = v63 - (v59 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v71 = *v68++;
              *(void *)unsigned int v69 = v71;
              v69 += 8;
              v70 += 8;
            }
            while (v70);
            uint64_t v14 = v77;
            if (v59 != (v59 & 0xFFFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_95:
                char v72 = *v60++;
                *v48++ = v72;
              }
              while (v60 < v45);
            }
          }
        }
LABEL_96:
        *(void *)(a1 + 656) += v26;
        uint64_t v61 = *(void *)(a1 + 640);
        if (v26 >= 0x10000)
        {
          *(_DWORD *)(a1 + 704) = 1;
          *(_DWORD *)(a1 + 708) = (unint64_t)(v61 - *(void *)(a1 + 632)) >> 3;
        }
        __int16 v62 = v29 - 3;
        *(_WORD *)(v61 + 4) = v26;
        *(_DWORD *)uint64_t v61 = v33 + 1;
        if (v29 - 3 < 0x10000) {
          goto LABEL_8;
        }
LABEL_99:
        *(_DWORD *)(a1 + 704) = 2;
        *(_DWORD *)(a1 + 708) = (unint64_t)(v61 - *(void *)(a1 + 632)) >> 3;
        goto LABEL_8;
      }
      *(_OWORD *)uint64_t v46 = *(_OWORD *)a5;
      uint64_t v49 = *(void *)(a1 + 656);
      if (v26 > 0x10)
      {
        unint64_t v50 = (_OWORD *)(v49 + 16);
        unint64_t v51 = v49 + v26;
        uint64_t v52 = (long long *)(a5 + 16);
        do
        {
          long long v53 = *v52++;
          *v50++ = v53;
        }
        while ((unint64_t)v50 < v51);
        goto LABEL_96;
      }
      *(void *)(a1 + 656) = v49 + v26;
      uint64_t v61 = *(void *)(a1 + 640);
      __int16 v62 = v29 - 3;
      *(_WORD *)(v61 + 4) = v26;
      *(_DWORD *)uint64_t v61 = v33 + 1;
      if (v29 - 3 >= 0x10000) {
        goto LABEL_99;
      }
LABEL_8:
      *(_WORD *)(v61 + 6) = v62;
      *(void *)(a1 + 640) = v61 + 8;
      a5 += v29 + v26;
      v10 -= v24;
      if (!v10) {
        goto LABEL_103;
      }
    }
    int v37 = 2;
LABEL_42:
    unsigned int v33 = v37 + ~v30;
    goto LABEL_43;
  }
  unsigned int v17 = 0;
LABEL_103:
  *a2 = v8;
  a2[1] = v10;
  uint64_t v73 = *(void *)(a1 + 2880);
  *(void *)(v73 + 4580) = v78;
  *(_DWORD *)(v73 + 4588) = v79;
  uint64_t v44 = v17;
  uint64_t v74 = &v14[-v17];
  if (a5 != v74)
  {
    size_t v75 = (v74 - a5);
    memcpy(*(void **)(a1 + 656), a5, v75);
    *(void *)(a1 + 656) += v75;
    *((void *)a2 + 1) += v75;
  }
  return v44;
}

unint64_t ZSTD_count_2segments(void *a1, char *a2, unint64_t a3, char *a4, void *a5)
{
  uint64_t v5 = (char *)a1 + a4 - a2;
  if ((unint64_t)v5 >= a3) {
    uint64_t v5 = (char *)a3;
  }
  uint64_t v6 = (char *)a1;
  unint64_t v7 = a2;
  if (v5 - 7 > (char *)a1)
  {
    unint64_t v8 = *a1 ^ *(void *)a2;
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8)) >> 3;
      goto LABEL_17;
    }
    uint64_t v10 = 0;
    uint64_t v11 = a1 + 1;
    while (1)
    {
      unint64_t v12 = &v11[v10];
      if (&v11[v10] >= (void *)(v5 - 7)) {
        break;
      }
      uint64_t v13 = *(void *)&a2[v10 * 8 + 8];
      ++v10;
      unint64_t v14 = *v12 ^ v13;
      if (v14)
      {
        unint64_t v9 = v10 * 8 + (__clz(__rbit64(v14)) >> 3);
        goto LABEL_17;
      }
    }
    uint64_t v6 = (char *)&a1[v10 + 1];
    unint64_t v7 = &a2[v10 * 8 + 8];
  }
  if (v6 >= v5 - 3)
  {
    if (v6 >= v5 - 1) {
      goto LABEL_13;
    }
LABEL_25:
    if (*(unsigned __int16 *)v7 == *(unsigned __int16 *)v6)
    {
      v6 += 2;
      v7 += 2;
    }
    if (v6 >= v5) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (*(_DWORD *)v7 == *(_DWORD *)v6)
  {
    v6 += 4;
    v7 += 4;
  }
  if (v6 < v5 - 1) {
    goto LABEL_25;
  }
LABEL_13:
  if (v6 < v5)
  {
LABEL_14:
    if (*v7 == *v6) {
      ++v6;
    }
  }
LABEL_16:
  unint64_t v9 = v6 - (char *)a1;
LABEL_17:
  if (&a2[v9] != a4) {
    return v9;
  }
  int v16 = (void *)((char *)a1 + v9);
  if (a3 - 7 <= (unint64_t)a1 + v9)
  {
    unint64_t v18 = (_DWORD *)((char *)a1 + v9);
    if ((unint64_t)v16 >= a3 - 3) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  unint64_t v17 = *v16 ^ *a5;
  if (v17) {
    return (__clz(__rbit64(v17)) >> 3) + v9;
  }
  uint64_t v19 = (uint64_t)a1 + v9 + 8;
  while (1)
  {
    unsigned int v20 = (void *)(v19 + v17);
    if (v19 + v17 >= a3 - 7) {
      break;
    }
    uint64_t v21 = *(void *)((char *)a5 + v17 + 8);
    v17 += 8;
    unint64_t v22 = *v20 ^ v21;
    if (v22) {
      return v17 + (__clz(__rbit64(v22)) >> 3) + v9;
    }
  }
  unint64_t v18 = (_DWORD *)((char *)a1 + v9 + v17 + 8);
  a5 = (void *)((char *)a5 + v17 + 8);
  if ((unint64_t)v18 < a3 - 3)
  {
LABEL_30:
    if (*(_DWORD *)a5 == *v18)
    {
      ++v18;
      a5 = (void *)((char *)a5 + 4);
    }
  }
LABEL_32:
  if ((unint64_t)v18 < a3 - 1)
  {
    if (*(unsigned __int16 *)a5 == *(unsigned __int16 *)v18)
    {
      unint64_t v18 = (_DWORD *)((char *)v18 + 2);
      a5 = (void *)((char *)a5 + 2);
    }
    if ((unint64_t)v18 >= a3) {
      return (char *)v18 - (char *)a1;
    }
    goto LABEL_34;
  }
  if ((unint64_t)v18 < a3)
  {
LABEL_34:
    if (*(unsigned __int8 *)a5 == *(unsigned __int8 *)v18) {
      unint64_t v18 = (_DWORD *)((char *)v18 + 1);
    }
  }
  return (char *)v18 - (char *)a1;
}

unint64_t ZSTD_BtFindBestMatch_selectMLS(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4)
{
  int v4 = *(_DWORD *)(a1 + 208);
  if ((v4 - 6) >= 2)
  {
    if (v4 == 5)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(unsigned int *)(a1 + 36);
      if (v15 + v16 <= (unint64_t)a2)
      {
        if (v16 < (int)a2 - (int)v15)
        {
          uint64_t v17 = *(void *)(a1 + 48);
          int v18 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          uint64_t v19 = *(void *)(a1 + 64);
          int v20 = 64 - *(_DWORD *)(a1 + 200);
          do
          {
            unint64_t v21 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v15 + v16)) >> v20);
            int v22 = *(_DWORD *)(v17 + v21);
            unint64_t v23 = (_DWORD *)(v19 + 8 * (v16 & v18));
            *(_DWORD *)(v17 + v21) = v16;
            *unint64_t v23 = v22;
            v23[1] = 1;
            ++v16;
          }
          while (a2 - v15 != v16);
        }
        *(_DWORD *)(a1 + 36) = a2 - v15;
        int v14 = 5;
        return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 0);
      }
    }
    else
    {
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = *(unsigned int *)(a1 + 36);
      if (v25 + v26 <= (unint64_t)a2)
      {
        if (v26 < (int)a2 - (int)v25)
        {
          uint64_t v27 = *(void *)(a1 + 48);
          int v28 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          uint64_t v29 = *(void *)(a1 + 64);
          int v30 = 32 - *(_DWORD *)(a1 + 200);
          do
          {
            uint64_t v31 = 4 * ((-1640531535 * *(_DWORD *)(v25 + v26)) >> v30);
            int v32 = *(_DWORD *)(v27 + v31);
            unsigned int v33 = (_DWORD *)(v29 + 8 * (v26 & v28));
            *(_DWORD *)(v27 + v31) = v26;
            *unsigned int v33 = v32;
            v33[1] = 1;
            ++v26;
          }
          while (a2 - v25 != v26);
        }
        *(_DWORD *)(a1 + 36) = a2 - v25;
        int v14 = 4;
        return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 0);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 36);
    if (v5 + v6 <= (unint64_t)a2)
    {
      if (v6 < (int)a2 - (int)v5)
      {
        uint64_t v7 = *(void *)(a1 + 48);
        int v8 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
        uint64_t v9 = *(void *)(a1 + 64);
        int v10 = 64 - *(_DWORD *)(a1 + 200);
        do
        {
          unint64_t v11 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v5 + v6)) >> v10);
          int v12 = *(_DWORD *)(v7 + v11);
          uint64_t v13 = (_DWORD *)(v9 + 8 * (v6 & v8));
          *(_DWORD *)(v7 + v11) = v6;
          _DWORD *v13 = v12;
          v13[1] = 1;
          ++v6;
        }
        while (a2 - v5 != v6);
      }
      *(_DWORD *)(a1 + 36) = a2 - v5;
      int v14 = 6;
      return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 0);
    }
  }
  return 0;
}

unint64_t ZSTD_HcFindBestMatch_dictMatchState_selectMLS(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 - 6) < 2)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    int v7 = *(_DWORD *)(a1 + 196);
    unsigned int v8 = 1 << v7;
    uint64_t v9 = *(void *)(a1 + 8);
    unsigned int v10 = a2 - v9;
    unsigned int v11 = 1 << *(_DWORD *)(a1 + 192);
    uint64_t v12 = *(unsigned int *)(a1 + 24);
    unsigned int v13 = *(_DWORD *)(a1 + 28);
    unint64_t v14 = *(unsigned int *)(a1 + 36);
    if (a2 - v9 - v13 > v11 && *(_DWORD *)(a1 + 32) == 0) {
      unsigned int v13 = a2 - v9 - v11;
    }
    if (v10 >= v8) {
      unsigned int v16 = v10 - v8;
    }
    else {
      unsigned int v16 = 0;
    }
    int v17 = 1 << *(_DWORD *)(a1 + 204);
    uint64_t v18 = *(void *)(a1 + 184);
    uint64_t v19 = *(void *)(a1 + 48);
    int v20 = 64 - *(_DWORD *)(a1 + 200);
    if (v14 < v10)
    {
      int v21 = ~(-1 << v7);
      do
      {
        unint64_t v22 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v14)) >> v20);
        *(_DWORD *)(v6 + 4 * (v14 & v21)) = *(_DWORD *)(v19 + v22);
        *(_DWORD *)(v19 + v22) = v14++;
      }
      while (v14 < (a2 - v9));
    }
    *(_DWORD *)(a1 + 36) = v10;
    unint64_t v23 = 0xCF1BBCDCBF9B0000 * *a2;
    unsigned int v24 = *(_DWORD *)(v19 + 4 * (v23 >> v20));
    if (v24 < v13)
    {
      unint64_t v25 = 3;
LABEL_15:
      unsigned int v26 = 1 << *(_DWORD *)(v18 + 196);
      uint64_t v27 = *(void *)(v18 + 8);
      unsigned int v153 = *(char **)v18;
      unsigned int v28 = *(void *)v18 - v27;
      if (v28 >= v26) {
        unsigned int v29 = v28 - v26;
      }
      else {
        unsigned int v29 = 0;
      }
      if (v17)
      {
        unsigned int v30 = *(_DWORD *)(v18 + 24);
        unsigned int v31 = *(_DWORD *)(*(void *)(v18 + 48) + 4 * (v23 >> -*(unsigned char *)(v18 + 200)));
        if (v31 >= v30)
        {
          unsigned int v148 = a2;
          unsigned int v146 = (void *)(v9 + v12);
          uint64_t v32 = *(void *)(v18 + 64);
          unsigned int v33 = v26 - 1;
          int v36 = *(_DWORD *)a2;
          unsigned int v35 = (void *)((char *)a2 + 4);
          int v34 = v36;
          int v143 = v10 - v12 + v28 + 2;
          int v37 = v17 - 1;
          do
          {
            uint64_t v38 = v27 + v31;
            if (*(_DWORD *)v38 == v34)
            {
              unint64_t v39 = ZSTD_count_2segments(v35, (char *)(v38 + 4), a3, v153, v146);
              if (v39 + 4 > v25)
              {
                *a4 = v143 - v31;
                unint64_t v25 = v39 + 4;
                if ((void *)((char *)v148 + v39 + 4) == (void *)a3) {
                  break;
                }
              }
            }
            if (v31 <= v29) {
              break;
            }
            BOOL v40 = v37-- != 0;
            if (!v40) {
              break;
            }
            unsigned int v31 = *(_DWORD *)(v32 + 4 * (v31 & v33));
          }
          while (v31 >= v30);
        }
      }
      return v25;
    }
    unsigned int v74 = v8 - 1;
    unint64_t v75 = a3 - 7;
    unint64_t v76 = a3 - 3;
    unsigned int v77 = a2 + 1;
    uint64_t v78 = v9 + 8;
    unint64_t v25 = 3;
    while (1)
    {
      int v79 = (_DWORD *)(v9 + v24);
      if (*((unsigned __int8 *)v79 + v25) != *((unsigned __int8 *)a2 + v25)) {
        goto LABEL_72;
      }
      if (v75 <= (unint64_t)a2)
      {
        unint64_t v82 = a2;
        if ((unint64_t)a2 < v76)
        {
LABEL_64:
          if (*v79 == *v82)
          {
            ++v82;
            ++v79;
          }
        }
      }
      else
      {
        unint64_t v80 = *a2 ^ *(void *)v79;
        if (v80)
        {
          unint64_t v81 = __clz(__rbit64(v80)) >> 3;
          if (v81 <= v25) {
            goto LABEL_72;
          }
          goto LABEL_71;
        }
        uint64_t v83 = 0;
        while (1)
        {
          unint64_t v82 = &v77[v83];
          if ((unint64_t)&v77[v83] >= v75) {
            break;
          }
          uint64_t v84 = *(void *)(v78 + v24 + v83 * 8);
          ++v83;
          unint64_t v85 = *(void *)v82 ^ v84;
          if (v85)
          {
            unint64_t v81 = v83 * 8 + (__clz(__rbit64(v85)) >> 3);
            if (v81 > v25) {
              goto LABEL_71;
            }
            goto LABEL_72;
          }
        }
        int v79 = (_DWORD *)(v78 + v24 + v83 * 8);
        if ((unint64_t)v82 < v76) {
          goto LABEL_64;
        }
      }
      if ((unint64_t)v82 >= a3 - 1) {
        break;
      }
      if (*(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        unint64_t v82 = (_DWORD *)((char *)v82 + 2);
        int v79 = (_DWORD *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3) {
        goto LABEL_68;
      }
LABEL_70:
      unint64_t v81 = (char *)v82 - (char *)a2;
      if (v81 <= v25) {
        goto LABEL_72;
      }
LABEL_71:
      *a4 = v10 + 2 - v24;
      unint64_t v25 = v81;
      if ((void *)((char *)a2 + v81) == (void *)a3)
      {
        unint64_t v25 = v81;
        goto LABEL_15;
      }
LABEL_72:
      if (v24 > v16)
      {
        if (--v17)
        {
          unsigned int v24 = *(_DWORD *)(v6 + 4 * (v24 & v74));
          if (v24 >= v13) {
            continue;
          }
        }
      }
      goto LABEL_15;
    }
    if ((unint64_t)v82 >= a3) {
      goto LABEL_70;
    }
LABEL_68:
    if (*(unsigned __int8 *)v79 == *(unsigned __int8 *)v82) {
      unint64_t v82 = (_DWORD *)((char *)v82 + 1);
    }
    goto LABEL_70;
  }
  if (v5 == 5)
  {
    uint64_t v41 = *(void *)(a1 + 64);
    int v42 = *(_DWORD *)(a1 + 196);
    unsigned int v43 = 1 << v42;
    uint64_t v44 = *(void *)(a1 + 8);
    unsigned int v45 = a2 - v44;
    unsigned int v46 = 1 << *(_DWORD *)(a1 + 192);
    uint64_t v47 = *(unsigned int *)(a1 + 24);
    unsigned int v48 = *(_DWORD *)(a1 + 28);
    unint64_t v49 = *(unsigned int *)(a1 + 36);
    if (a2 - v44 - v48 > v46 && *(_DWORD *)(a1 + 32) == 0) {
      unsigned int v48 = a2 - v44 - v46;
    }
    if (v45 >= v43) {
      unsigned int v51 = v45 - v43;
    }
    else {
      unsigned int v51 = 0;
    }
    int v52 = 1 << *(_DWORD *)(a1 + 204);
    uint64_t v53 = *(void *)(a1 + 184);
    uint64_t v54 = *(void *)(a1 + 48);
    int v55 = 64 - *(_DWORD *)(a1 + 200);
    if (v49 < v45)
    {
      int v56 = ~(-1 << v42);
      do
      {
        unint64_t v57 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v44 + v49)) >> v55);
        *(_DWORD *)(v41 + 4 * (v49 & v56)) = *(_DWORD *)(v54 + v57);
        *(_DWORD *)(v54 + v57) = v49++;
      }
      while (v49 < (a2 - v44));
    }
    *(_DWORD *)(a1 + 36) = v45;
    unint64_t v58 = 0xCF1BBCDCBB000000 * *a2;
    unsigned int v59 = *(_DWORD *)(v54 + 4 * (v58 >> v55));
    if (v59 < v48)
    {
      unint64_t v25 = 3;
LABEL_43:
      unsigned int v60 = 1 << *(_DWORD *)(v53 + 196);
      uint64_t v61 = *(void *)(v53 + 8);
      unsigned int v154 = *(char **)v53;
      unsigned int v62 = *(void *)v53 - v61;
      if (v62 >= v60) {
        unsigned int v63 = v62 - v60;
      }
      else {
        unsigned int v63 = 0;
      }
      if (v52)
      {
        unsigned int v64 = *(_DWORD *)(v53 + 24);
        unsigned int v65 = *(_DWORD *)(*(void *)(v53 + 48) + 4 * (v58 >> -*(unsigned char *)(v53 + 200)));
        if (v65 >= v64)
        {
          unsigned int v149 = a2;
          unsigned int v147 = (void *)(v44 + v47);
          uint64_t v66 = *(void *)(v53 + 64);
          unsigned int v67 = v60 - 1;
          int v70 = *(_DWORD *)a2;
          unsigned int v69 = (void *)((char *)a2 + 4);
          int v68 = v70;
          int v144 = v45 - v47 + v62 + 2;
          int v71 = v52 - 1;
          do
          {
            uint64_t v72 = v61 + v65;
            if (*(_DWORD *)v72 == v68)
            {
              unint64_t v73 = ZSTD_count_2segments(v69, (char *)(v72 + 4), a3, v154, v147);
              if (v73 + 4 > v25)
              {
                *a4 = v144 - v65;
                unint64_t v25 = v73 + 4;
                if ((void *)((char *)v149 + v73 + 4) == (void *)a3) {
                  break;
                }
              }
            }
            if (v65 <= v63) {
              break;
            }
            BOOL v40 = v71-- != 0;
            if (!v40) {
              break;
            }
            unsigned int v65 = *(_DWORD *)(v66 + 4 * (v65 & v67));
          }
          while (v65 >= v64);
        }
      }
      return v25;
    }
    unsigned int v119 = v43 - 1;
    unint64_t v120 = a3 - 7;
    unint64_t v121 = a3 - 3;
    uint64_t v122 = a2 + 1;
    uint64_t v123 = v44 + 8;
    unint64_t v25 = 3;
    while (1)
    {
      unsigned int v124 = (_DWORD *)(v44 + v59);
      if (*((unsigned __int8 *)v124 + v25) != *((unsigned __int8 *)a2 + v25)) {
        goto LABEL_129;
      }
      if (v120 <= (unint64_t)a2)
      {
        unsigned int v127 = a2;
        if ((unint64_t)a2 < v121)
        {
LABEL_121:
          if (*v124 == *v127)
          {
            ++v127;
            ++v124;
          }
        }
      }
      else
      {
        unint64_t v125 = *a2 ^ *(void *)v124;
        if (v125)
        {
          unint64_t v126 = __clz(__rbit64(v125)) >> 3;
          if (v126 <= v25) {
            goto LABEL_129;
          }
          goto LABEL_128;
        }
        uint64_t v128 = 0;
        while (1)
        {
          unsigned int v127 = &v122[v128];
          if ((unint64_t)&v122[v128] >= v120) {
            break;
          }
          uint64_t v129 = *(void *)(v123 + v59 + v128 * 8);
          ++v128;
          unint64_t v130 = *(void *)v127 ^ v129;
          if (v130)
          {
            unint64_t v126 = v128 * 8 + (__clz(__rbit64(v130)) >> 3);
            if (v126 > v25) {
              goto LABEL_128;
            }
            goto LABEL_129;
          }
        }
        unsigned int v124 = (_DWORD *)(v123 + v59 + v128 * 8);
        if ((unint64_t)v127 < v121) {
          goto LABEL_121;
        }
      }
      if ((unint64_t)v127 >= a3 - 1) {
        break;
      }
      if (*(unsigned __int16 *)v124 == *(unsigned __int16 *)v127)
      {
        unsigned int v127 = (_DWORD *)((char *)v127 + 2);
        unsigned int v124 = (_DWORD *)((char *)v124 + 2);
      }
      if ((unint64_t)v127 < a3) {
        goto LABEL_125;
      }
LABEL_127:
      unint64_t v126 = (char *)v127 - (char *)a2;
      if (v126 <= v25) {
        goto LABEL_129;
      }
LABEL_128:
      *a4 = v45 + 2 - v59;
      unint64_t v25 = v126;
      if ((void *)((char *)a2 + v126) == (void *)a3)
      {
        unint64_t v25 = v126;
        goto LABEL_43;
      }
LABEL_129:
      if (v59 > v51)
      {
        if (--v52)
        {
          unsigned int v59 = *(_DWORD *)(v41 + 4 * (v59 & v119));
          if (v59 >= v48) {
            continue;
          }
        }
      }
      goto LABEL_43;
    }
    if ((unint64_t)v127 >= a3) {
      goto LABEL_127;
    }
LABEL_125:
    if (*(unsigned __int8 *)v124 == *(unsigned __int8 *)v127) {
      unsigned int v127 = (_DWORD *)((char *)v127 + 1);
    }
    goto LABEL_127;
  }
  uint64_t v86 = *(void *)(a1 + 64);
  int v87 = *(_DWORD *)(a1 + 196);
  unsigned int v88 = 1 << v87;
  uint64_t v89 = *(void *)(a1 + 8);
  unsigned int v90 = a2 - v89;
  unsigned int v91 = 1 << *(_DWORD *)(a1 + 192);
  uint64_t v92 = *(unsigned int *)(a1 + 24);
  unsigned int v93 = *(_DWORD *)(a1 + 28);
  unint64_t v94 = *(unsigned int *)(a1 + 36);
  if (a2 - v89 - v93 > v91 && *(_DWORD *)(a1 + 32) == 0) {
    unsigned int v93 = a2 - v89 - v91;
  }
  if (v90 >= v88) {
    unsigned int v96 = v90 - v88;
  }
  else {
    unsigned int v96 = 0;
  }
  int v97 = 1 << *(_DWORD *)(a1 + 204);
  uint64_t v98 = *(void *)(a1 + 184);
  uint64_t v99 = *(void *)(a1 + 48);
  int v100 = 32 - *(_DWORD *)(a1 + 200);
  if (v94 < v90)
  {
    int v101 = ~(-1 << v87);
    do
    {
      uint64_t v102 = 4 * ((-1640531535 * *(_DWORD *)(v89 + v94)) >> v100);
      *(_DWORD *)(v86 + 4 * (v94 & v101)) = *(_DWORD *)(v99 + v102);
      *(_DWORD *)(v99 + v102) = v94++;
    }
    while (v94 < (a2 - v89));
  }
  *(_DWORD *)(a1 + 36) = v90;
  int v103 = *(_DWORD *)a2;
  unsigned int v104 = -1640531535 * *(_DWORD *)a2;
  unsigned int v105 = *(_DWORD *)(v99 + 4 * (v104 >> v100));
  if (v105 >= v93)
  {
    unsigned int v131 = v88 - 1;
    unint64_t v132 = a3 - 7;
    unint64_t v133 = a3 - 3;
    unsigned int v134 = a2 + 1;
    uint64_t v135 = v89 + 8;
    unint64_t v25 = 3;
    while (1)
    {
      unsigned int v136 = (_DWORD *)(v89 + v105);
      if (*((unsigned __int8 *)v136 + v25) != *((unsigned __int8 *)a2 + v25)) {
        goto LABEL_159;
      }
      if (v132 <= (unint64_t)a2)
      {
        unsigned int v139 = a2;
        if ((unint64_t)a2 < v133)
        {
LABEL_151:
          if (*v136 == *v139)
          {
            ++v139;
            ++v136;
          }
        }
      }
      else
      {
        unint64_t v137 = *a2 ^ *(void *)v136;
        if (v137)
        {
          unint64_t v138 = __clz(__rbit64(v137)) >> 3;
          if (v138 <= v25) {
            goto LABEL_159;
          }
          goto LABEL_158;
        }
        uint64_t v140 = 0;
        while (1)
        {
          unsigned int v139 = &v134[v140];
          if ((unint64_t)&v134[v140] >= v132) {
            break;
          }
          uint64_t v141 = *(void *)(v135 + v105 + v140 * 8);
          ++v140;
          unint64_t v142 = *(void *)v139 ^ v141;
          if (v142)
          {
            unint64_t v138 = v140 * 8 + (__clz(__rbit64(v142)) >> 3);
            if (v138 > v25) {
              goto LABEL_158;
            }
            goto LABEL_159;
          }
        }
        unsigned int v136 = (_DWORD *)(v135 + v105 + v140 * 8);
        if ((unint64_t)v139 < v133) {
          goto LABEL_151;
        }
      }
      if ((unint64_t)v139 >= a3 - 1) {
        break;
      }
      if (*(unsigned __int16 *)v136 == *(unsigned __int16 *)v139)
      {
        unsigned int v139 = (_DWORD *)((char *)v139 + 2);
        unsigned int v136 = (_DWORD *)((char *)v136 + 2);
      }
      if ((unint64_t)v139 < a3) {
        goto LABEL_155;
      }
LABEL_157:
      unint64_t v138 = (char *)v139 - (char *)a2;
      if (v138 <= v25) {
        goto LABEL_159;
      }
LABEL_158:
      *a4 = v90 + 2 - v105;
      unint64_t v25 = v138;
      if ((void *)((char *)a2 + v138) == (void *)a3)
      {
        unint64_t v25 = v138;
        goto LABEL_100;
      }
LABEL_159:
      if (v105 > v96)
      {
        if (--v97)
        {
          unsigned int v105 = *(_DWORD *)(v86 + 4 * (v105 & v131));
          if (v105 >= v93) {
            continue;
          }
        }
      }
      goto LABEL_100;
    }
    if ((unint64_t)v139 >= a3) {
      goto LABEL_157;
    }
LABEL_155:
    if (*(unsigned __int8 *)v136 == *(unsigned __int8 *)v139) {
      unsigned int v139 = (_DWORD *)((char *)v139 + 1);
    }
    goto LABEL_157;
  }
  unint64_t v25 = 3;
LABEL_100:
  unsigned int v106 = 1 << *(_DWORD *)(v98 + 196);
  uint64_t v107 = *(char **)v98;
  uint64_t v108 = *(void *)(v98 + 8);
  unsigned int v109 = *(void *)v98 - v108;
  if (v109 >= v106) {
    unsigned int v110 = v109 - v106;
  }
  else {
    unsigned int v110 = 0;
  }
  if (v97)
  {
    unsigned int v111 = *(_DWORD *)(v98 + 24);
    unsigned int v112 = *(_DWORD *)(*(void *)(v98 + 48) + 4 * (v104 >> -*(unsigned char *)(v98 + 200)));
    if (v112 >= v111)
    {
      unsigned int v155 = (void *)(v89 + v92);
      uint64_t v113 = *(void *)(v98 + 64);
      unsigned int v114 = v106 - 1;
      int v145 = v90 - v92 + v109 + 2;
      int v115 = v97 - 1;
      do
      {
        uint64_t v116 = v108 + v112;
        if (*(_DWORD *)v116 == v103)
        {
          unint64_t v117 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v116 + 4), a3, v107, v155);
          if (v117 + 4 > v25)
          {
            *a4 = v145 - v112;
            unint64_t v25 = v117 + 4;
            if ((void *)((char *)a2 + v117 + 4) == (void *)a3) {
              break;
            }
          }
        }
        if (v112 <= v110) {
          break;
        }
        BOOL v40 = v115-- != 0;
        if (!v40) {
          break;
        }
        unsigned int v112 = *(_DWORD *)(v113 + 4 * (v112 & v114));
      }
      while (v112 >= v111);
    }
  }
  return v25;
}

unint64_t ZSTD_BtFindBestMatch_dictMatchState_selectMLS(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4)
{
  int v4 = *(_DWORD *)(a1 + 208);
  if ((v4 - 6) >= 2)
  {
    if (v4 == 5)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(unsigned int *)(a1 + 36);
      if (v15 + v16 <= (unint64_t)a2)
      {
        if (v16 < (int)a2 - (int)v15)
        {
          uint64_t v17 = *(void *)(a1 + 48);
          int v18 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          uint64_t v19 = *(void *)(a1 + 64);
          int v20 = 64 - *(_DWORD *)(a1 + 200);
          do
          {
            unint64_t v21 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v15 + v16)) >> v20);
            int v22 = *(_DWORD *)(v17 + v21);
            unint64_t v23 = (_DWORD *)(v19 + 8 * (v16 & v18));
            *(_DWORD *)(v17 + v21) = v16;
            *unint64_t v23 = v22;
            v23[1] = 1;
            ++v16;
          }
          while (a2 - v15 != v16);
        }
        *(_DWORD *)(a1 + 36) = a2 - v15;
        int v14 = 5;
        return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 2);
      }
    }
    else
    {
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = *(unsigned int *)(a1 + 36);
      if (v25 + v26 <= (unint64_t)a2)
      {
        if (v26 < (int)a2 - (int)v25)
        {
          uint64_t v27 = *(void *)(a1 + 48);
          int v28 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          uint64_t v29 = *(void *)(a1 + 64);
          int v30 = 32 - *(_DWORD *)(a1 + 200);
          do
          {
            uint64_t v31 = 4 * ((-1640531535 * *(_DWORD *)(v25 + v26)) >> v30);
            int v32 = *(_DWORD *)(v27 + v31);
            unsigned int v33 = (_DWORD *)(v29 + 8 * (v26 & v28));
            *(_DWORD *)(v27 + v31) = v26;
            *unsigned int v33 = v32;
            v33[1] = 1;
            ++v26;
          }
          while (a2 - v25 != v26);
        }
        *(_DWORD *)(a1 + 36) = a2 - v25;
        int v14 = 4;
        return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 2);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 36);
    if (v5 + v6 <= (unint64_t)a2)
    {
      if (v6 < (int)a2 - (int)v5)
      {
        uint64_t v7 = *(void *)(a1 + 48);
        int v8 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
        uint64_t v9 = *(void *)(a1 + 64);
        int v10 = 64 - *(_DWORD *)(a1 + 200);
        do
        {
          unint64_t v11 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v5 + v6)) >> v10);
          int v12 = *(_DWORD *)(v7 + v11);
          unsigned int v13 = (_DWORD *)(v9 + 8 * (v6 & v8));
          *(_DWORD *)(v7 + v11) = v6;
          _DWORD *v13 = v12;
          v13[1] = 1;
          ++v6;
        }
        while (a2 - v5 != v6);
      }
      *(_DWORD *)(a1 + 36) = a2 - v5;
      int v14 = 6;
      return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 2);
    }
  }
  return 0;
}

unint64_t ZSTD_HcFindBestMatch_dedicatedDictSearch_selectMLS(uint64_t a1, void *a2, unint64_t a3, void *a4)
{
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 - 6) >= 2)
  {
    if (v5 == 5)
    {
      uint64_t v73 = *(void *)(a1 + 64);
      int v74 = *(_DWORD *)(a1 + 196);
      unsigned int v75 = 1 << v74;
      uint64_t v76 = *(void *)(a1 + 8);
      unsigned int v77 = a2 - v76;
      unsigned int v78 = 1 << *(_DWORD *)(a1 + 192);
      uint64_t v79 = *(unsigned int *)(a1 + 24);
      unsigned int v80 = a2 - v76 - *(_DWORD *)(a1 + 28);
      unsigned int v81 = a2 - v76 - v78;
      unint64_t v82 = *(unsigned int *)(a1 + 36);
      if (v80 > v78 && *(_DWORD *)(a1 + 32) == 0) {
        unsigned int v84 = v81;
      }
      else {
        unsigned int v84 = *(_DWORD *)(a1 + 28);
      }
      unsigned int v85 = v77 - v75;
      if (v77 < v75) {
        unsigned int v85 = 0;
      }
      unsigned int v86 = 1 << *(_DWORD *)(a1 + 204);
      uint64_t v87 = *(void *)(a1 + 184);
      unint64_t v88 = 0xCF1BBCDCBB000000 * *a2;
      unint64_t v89 = v88 >> (66 - *(_DWORD *)(v87 + 200));
      uint64_t v90 = *(void *)(v87 + 48);
      _X1 = v90 + 16 * v89;
      __asm { PRFM            #0, [X1] }
      uint64_t v93 = *(void *)(a1 + 48);
      int v94 = 64 - *(_DWORD *)(a1 + 200);
      if (v82 < v77)
      {
        int v95 = ~(-1 << v74);
        do
        {
          unint64_t v96 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v76 + v82)) >> v94);
          *(_DWORD *)(v73 + 4 * (v82 & v95)) = *(_DWORD *)(v93 + v96);
          *(_DWORD *)(v93 + v96) = v82++;
        }
        while (v82 < v77);
      }
      int v97 = (void *)(v76 + v79);
      *(_DWORD *)(a1 + 36) = v77;
      unsigned int v98 = *(_DWORD *)(v93 + 4 * (v88 >> v94));
      if (v98 < v84)
      {
        unint64_t v34 = 3;
        goto LABEL_59;
      }
      unsigned int v210 = v75 - 1;
      unint64_t v211 = a3 - 7;
      unint64_t v212 = a3 - 3;
      int v213 = a2 + 1;
      uint64_t v214 = v76 + 8;
      unint64_t v34 = 3;
LABEL_164:
      uint64_t v215 = (void *)(v76 + v98);
      if (*((unsigned __int8 *)v215 + v34) != *((unsigned __int8 *)a2 + v34)) {
        goto LABEL_178;
      }
      if (v211 <= (unint64_t)a2)
      {
        unsigned int v218 = a2;
        if ((unint64_t)a2 >= v212) {
          goto LABEL_172;
        }
      }
      else
      {
        unint64_t v216 = *a2 ^ *v215;
        if (v216)
        {
          unint64_t v217 = __clz(__rbit64(v216)) >> 3;
          if (v217 > v34) {
            goto LABEL_177;
          }
          goto LABEL_178;
        }
        uint64_t v219 = 0;
        while (1)
        {
          unsigned int v218 = &v213[v219];
          if ((unint64_t)&v213[v219] >= v211) {
            break;
          }
          uint64_t v220 = *(void *)(v214 + v98 + v219 * 8);
          ++v219;
          unint64_t v221 = *v218 ^ v220;
          if (v221)
          {
            unint64_t v217 = v219 * 8 + (__clz(__rbit64(v221)) >> 3);
            int v97 = (void *)(v76 + v79);
            if (v217 <= v34) {
              goto LABEL_178;
            }
LABEL_177:
            *a4 = v77 + 2 - v98;
            unint64_t v34 = v217;
            if ((void *)((char *)a2 + v217) == (void *)a3)
            {
              unint64_t v34 = v217;
              goto LABEL_59;
            }
LABEL_178:
            if (v98 <= v85 || (--v86, !v86) || (unsigned int v98 = *(_DWORD *)(v73 + 4 * (v98 & v210)), v98 < v84))
            {
LABEL_59:
              uint64_t v99 = 16 * v89;
              uint64_t v100 = *(void *)(v87 + 8);
              _X10 = v100 + *(unsigned int *)(v90 + 16 * v89);
              __asm { PRFM            #0, [X10] }
              unsigned int v267 = *(char **)v87;
              _X10 = v100 + *(unsigned int *)(v90 + ((16 * v89) | 4));
              __asm { PRFM            #0, [X10] }
              int v105 = *(void *)v87 - v100 - v79;
              _X8 = v100 + *(unsigned int *)(v90 + ((16 * v89) | 8));
              __asm { PRFM            #0, [X8] }
              if (v86 >= 3) {
                int v108 = 3;
              }
              else {
                int v108 = v86;
              }
              unint64_t v109 = *(unsigned int *)(v90 + (v99 | 0xC));
              unint64_t v110 = v109 >> 8;
              uint64_t v111 = *(void *)(v87 + 64);
              _X8 = v111 + 4 * (v109 >> 8);
              __asm { PRFM            #0, [X8] }
              if (!v108) {
                goto LABEL_80;
              }
              uint64_t v114 = *(unsigned int *)(v90 + 16 * v89);
              if (v114)
              {
                int v255 = v77 + v105 + 2;
                if (*(_DWORD *)(v100 + v114) != *(_DWORD *)a2) {
                  goto LABEL_228;
                }
                int v262 = v105;
                unint64_t v238 = v109 >> 8;
                int v244 = *(_DWORD *)(v90 + (v99 | 0xC));
                uint64_t v249 = *(void *)(v87 + 64);
                unint64_t v115 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v100 + v114 + 4), a3, v267, v97);
                LOBYTE(v109) = v244;
                uint64_t v111 = v249;
                unint64_t v110 = v238;
                int v105 = v262;
                if (v115 + 4 <= v34
                  || (*a4 = (v255 - v114),
                      unint64_t v34 = v115 + 4,
                      (void *)((char *)a2 + v115 + 4) != (void *)a3))
                {
LABEL_228:
                  if (v108 == 1) {
                    goto LABEL_80;
                  }
                  uint64_t v116 = *(unsigned int *)(v90 + (v99 | 4));
                  if (v116)
                  {
                    if (*(_DWORD *)(v100 + v116) != *(_DWORD *)a2) {
                      goto LABEL_229;
                    }
                    int v263 = v105;
                    unint64_t v239 = v110;
                    char v245 = v109;
                    uint64_t v250 = v111;
                    unint64_t v117 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v100 + v116 + 4), a3, v267, v97);
                    LOBYTE(v109) = v245;
                    uint64_t v111 = v250;
                    unint64_t v110 = v239;
                    int v105 = v263;
                    if (v117 + 4 <= v34
                      || (*a4 = (v255 - v116),
                          unint64_t v34 = v117 + 4,
                          (void *)((char *)a2 + v117 + 4) != (void *)a3))
                    {
LABEL_229:
                      if (v108 == 2) {
                        goto LABEL_80;
                      }
                      uint64_t v118 = *(unsigned int *)(v90 + (v99 | 8));
                      if (v118)
                      {
                        if (*(_DWORD *)(v100 + v118) != *(_DWORD *)a2) {
                          goto LABEL_80;
                        }
                        int v264 = v105;
                        unint64_t v119 = v110;
                        uint64_t v120 = v111;
                        char v121 = v109;
                        unint64_t v122 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v100 + v118 + 4), a3, v267, v97);
                        LOBYTE(v109) = v121;
                        uint64_t v111 = v120;
                        unint64_t v110 = v119;
                        int v105 = v264;
                        if (v122 + 4 <= v34
                          || (*a4 = (v255 - v118),
                              unint64_t v34 = v122 + 4,
                              (void *)((char *)a2 + v122 + 4) != (void *)a3))
                        {
LABEL_80:
                          uint64_t v123 = v86 - v108 >= v109 ? v109 : v86 - v108;
                          if (v123)
                          {
                            unsigned int v124 = (unsigned int *)(v111 + 4 * v110);
                            uint64_t v125 = v123;
                            do
                            {
                              unsigned int v126 = *v124++;
                              _X10 = v100 + v126;
                              __asm { PRFM            #0, [X10] }
                              --v125;
                            }
                            while (v125);
                            int v129 = *(_DWORD *)a2;
                            int v130 = v77 + v105 + 2;
                            unsigned int v131 = (unsigned int *)(v111 + 4 * v110);
                            do
                            {
                              unsigned int v133 = *v131++;
                              unsigned int v132 = v133;
                              uint64_t v134 = v100 + v133;
                              if (*(_DWORD *)v134 == v129)
                              {
                                unint64_t v135 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v134 + 4), a3, v267, v97);
                                if (v135 + 4 > v34)
                                {
                                  *a4 = v130 - v132;
                                  unint64_t v34 = v135 + 4;
                                  if ((void *)((char *)a2 + v135 + 4) == (void *)a3) {
                                    break;
                                  }
                                }
                              }
                              LODWORD(v123) = v123 - 1;
                            }
                            while (v123);
                          }
                        }
                      }
                    }
                  }
                }
              }
              return v34;
            }
            goto LABEL_164;
          }
        }
        uint64_t v215 = (void *)(v214 + v98 + v219 * 8);
        if ((unint64_t)v218 >= v212)
        {
LABEL_172:
          if ((unint64_t)v218 < a3 - 1)
          {
            if (*(unsigned __int16 *)v215 == *(unsigned __int16 *)v218)
            {
              unsigned int v218 = (void *)((char *)v218 + 2);
              uint64_t v215 = (void *)((char *)v215 + 2);
            }
            if ((unint64_t)v218 >= a3)
            {
LABEL_176:
              int v97 = (void *)(v76 + v79);
              unint64_t v217 = (char *)v218 - (char *)a2;
              if (v217 > v34) {
                goto LABEL_177;
              }
              goto LABEL_178;
            }
          }
          else if ((unint64_t)v218 >= a3)
          {
            goto LABEL_176;
          }
          if (*(unsigned __int8 *)v215 == *(unsigned __int8 *)v218) {
            unsigned int v218 = (void *)((char *)v218 + 1);
          }
          goto LABEL_176;
        }
      }
      if (*(_DWORD *)v215 == *(_DWORD *)v218)
      {
        unsigned int v218 = (void *)((char *)v218 + 4);
        uint64_t v215 = (void *)((char *)v215 + 4);
      }
      goto LABEL_172;
    }
    uint64_t v148 = *(void *)(a1 + 64);
    int v149 = *(_DWORD *)(a1 + 196);
    unsigned int v150 = 1 << v149;
    uint64_t v151 = *(void *)(a1 + 8);
    unsigned int v152 = a2 - v151;
    unsigned int v153 = 1 << *(_DWORD *)(a1 + 192);
    uint64_t v154 = *(unsigned int *)(a1 + 24);
    unint64_t v155 = *(unsigned int *)(a1 + 36);
    if ((int)a2 - (int)v151 - *(_DWORD *)(a1 + 28) > v153 && *(_DWORD *)(a1 + 32) == 0) {
      unsigned int v157 = a2 - v151 - v153;
    }
    else {
      unsigned int v157 = *(_DWORD *)(a1 + 28);
    }
    unsigned int v158 = v152 - v150;
    if (v152 < v150) {
      unsigned int v158 = 0;
    }
    unsigned int v159 = 1 << *(_DWORD *)(a1 + 204);
    uint64_t v160 = *(void *)(a1 + 184);
    int v161 = *(_DWORD *)a2;
    unsigned int v162 = -1640531535 * *(_DWORD *)a2;
    unsigned int v163 = v162 >> (34 - *(_DWORD *)(v160 + 200));
    uint64_t v164 = *(void *)(v160 + 48);
    _X15 = v164 + 16 * v163;
    __asm { PRFM            #0, [X15] }
    uint64_t v167 = *(void *)(a1 + 48);
    int v168 = 32 - *(_DWORD *)(a1 + 200);
    if (v155 < v152)
    {
      int v169 = ~(-1 << v149);
      do
      {
        uint64_t v170 = 4 * ((-1640531535 * *(_DWORD *)(v151 + v155)) >> v168);
        *(_DWORD *)(v148 + 4 * (v155 & v169)) = *(_DWORD *)(v167 + v170);
        *(_DWORD *)(v167 + v170) = v155++;
      }
      while (v155 < v152);
      int v161 = *(_DWORD *)a2;
      unsigned int v162 = -1640531535 * *(_DWORD *)a2;
    }
    uint64_t v268 = (void *)(v151 + v154);
    uint64_t v171 = 4 * v163;
    *(_DWORD *)(a1 + 36) = v152;
    unsigned int v172 = *(_DWORD *)(v167 + 4 * (v162 >> v168));
    if (v172 < v157)
    {
      unint64_t v34 = 3;
      goto LABEL_133;
    }
    unsigned int v222 = v150 - 1;
    unint64_t v223 = a3 - 7;
    unint64_t v224 = a3 - 3;
    uint64_t v225 = a2 + 1;
    uint64_t v226 = v151 + 8;
    unint64_t v34 = 3;
LABEL_194:
    unint64_t v227 = (void *)(v151 + v172);
    if (*((unsigned __int8 *)v227 + v34) != *((unsigned __int8 *)a2 + v34)) {
      goto LABEL_208;
    }
    if (v223 <= (unint64_t)a2)
    {
      int v230 = a2;
      if ((unint64_t)a2 >= v224) {
        goto LABEL_202;
      }
    }
    else
    {
      unint64_t v228 = *a2 ^ *v227;
      if (v228)
      {
        unint64_t v229 = __clz(__rbit64(v228)) >> 3;
        if (v229 > v34) {
          goto LABEL_207;
        }
        goto LABEL_208;
      }
      uint64_t v231 = 0;
      while (1)
      {
        int v230 = &v225[v231];
        if ((unint64_t)&v225[v231] >= v223) {
          break;
        }
        uint64_t v232 = *(void *)(v226 + v172 + v231 * 8);
        ++v231;
        unint64_t v233 = *v230 ^ v232;
        if (v233)
        {
          unint64_t v229 = v231 * 8 + (__clz(__rbit64(v233)) >> 3);
          if (v229 <= v34) {
            goto LABEL_208;
          }
LABEL_207:
          *a4 = v152 + 2 - v172;
          unint64_t v34 = v229;
          if ((void *)((char *)a2 + v229) == (void *)a3)
          {
            unint64_t v34 = v229;
            goto LABEL_133;
          }
LABEL_208:
          if (v172 <= v158 || (--v159, !v159) || (unsigned int v172 = *(_DWORD *)(v148 + 4 * (v172 & v222)), v172 < v157))
          {
LABEL_133:
            uint64_t v173 = 4 * v171;
            unsigned int v175 = *(char **)v160;
            uint64_t v174 = *(void *)(v160 + 8);
            _X10 = v174 + *(unsigned int *)(v164 + 4 * v171);
            __asm { PRFM            #0, [X10] }
            _X10 = v174 + *(unsigned int *)(v164 + ((4 * v171) | 4));
            __asm { PRFM            #0, [X10] }
            int v180 = *(void *)v160 - v174 - v154;
            _X8 = v174 + *(unsigned int *)(v164 + ((4 * v171) | 8));
            __asm { PRFM            #0, [X8] }
            if (v159 >= 3) {
              int v183 = 3;
            }
            else {
              int v183 = v159;
            }
            unint64_t v184 = *(unsigned int *)(v164 + (v173 | 0xC));
            unint64_t v185 = v184 >> 8;
            uint64_t v186 = *(void *)(v160 + 64);
            _X8 = v186 + 4 * (v184 >> 8);
            __asm { PRFM            #0, [X8] }
            if (!v183) {
              goto LABEL_154;
            }
            uint64_t v265 = v164;
            uint64_t v189 = *(unsigned int *)(v164 + 4 * v171);
            if (v189)
            {
              int v246 = v152 + v180 + 2;
              if (*(_DWORD *)(v174 + v189) != v161) {
                goto LABEL_230;
              }
              unint64_t v256 = v184 >> 8;
              int v234 = v180;
              uint64_t v240 = *(void *)(v160 + 64);
              char v251 = v184;
              unint64_t v190 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v174 + v189 + 4), a3, v175, v268);
              LOBYTE(v184) = v251;
              unint64_t v185 = v256;
              uint64_t v186 = v240;
              int v180 = v234;
              if (v190 + 4 <= v34
                || (*a4 = (v246 - v189), unint64_t v34 = v190 + 4, (void *)((char *)a2 + v190 + 4) != (void *)a3))
              {
LABEL_230:
                if (v183 == 1) {
                  goto LABEL_154;
                }
                uint64_t v191 = *(unsigned int *)(v265 + (v173 | 4));
                if (v191)
                {
                  if (*(_DWORD *)(v174 + v191) != v161) {
                    goto LABEL_231;
                  }
                  unint64_t v257 = v185;
                  int v235 = v180;
                  uint64_t v241 = v186;
                  char v252 = v184;
                  unint64_t v192 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v174 + v191 + 4), a3, v175, v268);
                  LOBYTE(v184) = v252;
                  unint64_t v185 = v257;
                  uint64_t v186 = v241;
                  int v180 = v235;
                  if (v192 + 4 <= v34
                    || (*a4 = (v246 - v191),
                        unint64_t v34 = v192 + 4,
                        (void *)((char *)a2 + v192 + 4) != (void *)a3))
                  {
LABEL_231:
                    if (v183 == 2) {
                      goto LABEL_154;
                    }
                    uint64_t v193 = *(unsigned int *)(v265 + (v173 | 8));
                    if (v193)
                    {
                      if (*(_DWORD *)(v174 + v193) != v161) {
                        goto LABEL_154;
                      }
                      unint64_t v258 = v185;
                      int v194 = v180;
                      uint64_t v195 = v186;
                      char v253 = v184;
                      unint64_t v196 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v174 + v193 + 4), a3, v175, v268);
                      LOBYTE(v184) = v253;
                      unint64_t v185 = v258;
                      uint64_t v186 = v195;
                      int v180 = v194;
                      if (v196 + 4 <= v34
                        || (*a4 = (v246 - v193),
                            unint64_t v34 = v196 + 4,
                            (void *)((char *)a2 + v196 + 4) != (void *)a3))
                      {
LABEL_154:
                        uint64_t v197 = v159 - v183 >= v184 ? v184 : v159 - v183;
                        if (v197)
                        {
                          unsigned int v198 = (unsigned int *)(v186 + 4 * v185);
                          uint64_t v199 = v197;
                          do
                          {
                            unsigned int v200 = *v198++;
                            _X10 = v174 + v200;
                            __asm { PRFM            #0, [X10] }
                            --v199;
                          }
                          while (v199);
                          int v203 = v152 + v180 + 2;
                          uint64_t v204 = (unsigned int *)(v186 + 4 * v185);
                          do
                          {
                            unsigned int v206 = *v204++;
                            unsigned int v205 = v206;
                            uint64_t v207 = v174 + v206;
                            if (*(_DWORD *)v207 == v161)
                            {
                              unint64_t v208 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v207 + 4), a3, v175, v268);
                              if (v208 + 4 > v34)
                              {
                                *a4 = v203 - v205;
                                unint64_t v34 = v208 + 4;
                                if ((void *)((char *)a2 + v208 + 4) == (void *)a3) {
                                  break;
                                }
                              }
                            }
                            LODWORD(v197) = v197 - 1;
                          }
                          while (v197);
                        }
                      }
                    }
                  }
                }
              }
            }
            return v34;
          }
          goto LABEL_194;
        }
      }
      unint64_t v227 = (void *)(v226 + v172 + v231 * 8);
      if ((unint64_t)v230 >= v224)
      {
LABEL_202:
        if ((unint64_t)v230 < a3 - 1)
        {
          if (*(unsigned __int16 *)v227 == *(unsigned __int16 *)v230)
          {
            int v230 = (void *)((char *)v230 + 2);
            unint64_t v227 = (void *)((char *)v227 + 2);
          }
          if ((unint64_t)v230 >= a3)
          {
LABEL_206:
            unint64_t v229 = (char *)v230 - (char *)a2;
            if (v229 > v34) {
              goto LABEL_207;
            }
            goto LABEL_208;
          }
        }
        else if ((unint64_t)v230 >= a3)
        {
          goto LABEL_206;
        }
        if (*(unsigned __int8 *)v227 == *(unsigned __int8 *)v230) {
          int v230 = (void *)((char *)v230 + 1);
        }
        goto LABEL_206;
      }
    }
    if (*(_DWORD *)v227 == *(_DWORD *)v230)
    {
      int v230 = (void *)((char *)v230 + 4);
      unint64_t v227 = (void *)((char *)v227 + 4);
    }
    goto LABEL_202;
  }
  uint64_t v6 = *(void *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 196);
  unsigned int v8 = 1 << v7;
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v10 = a2 - v9;
  unsigned int v11 = 1 << *(_DWORD *)(a1 + 192);
  uint64_t v12 = *(unsigned int *)(a1 + 24);
  unsigned int v13 = a2 - v9 - *(_DWORD *)(a1 + 28);
  unsigned int v14 = a2 - v9 - v11;
  unint64_t v15 = *(unsigned int *)(a1 + 36);
  if (v13 > v11 && *(_DWORD *)(a1 + 32) == 0) {
    unsigned int v17 = v14;
  }
  else {
    unsigned int v17 = *(_DWORD *)(a1 + 28);
  }
  unsigned int v18 = v10 - v8;
  if (v10 < v8) {
    unsigned int v18 = 0;
  }
  unsigned int v19 = 1 << *(_DWORD *)(a1 + 204);
  uint64_t v20 = *(void *)(a1 + 184);
  unint64_t v21 = 0xCF1BBCDCBF9B0000 * *a2;
  unint64_t v22 = v21 >> (66 - *(_DWORD *)(v20 + 200));
  uint64_t v23 = *(void *)(v20 + 48);
  _X1 = v23 + 16 * v22;
  __asm { PRFM            #0, [X1] }
  uint64_t v29 = *(void *)(a1 + 48);
  int v30 = 64 - *(_DWORD *)(a1 + 200);
  if (v15 < v10)
  {
    int v31 = ~(-1 << v7);
    do
    {
      unint64_t v32 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v9 + v15)) >> v30);
      *(_DWORD *)(v6 + 4 * (v15 & v31)) = *(_DWORD *)(v29 + v32);
      *(_DWORD *)(v29 + v32) = v15++;
    }
    while (v15 < v10);
  }
  uint64_t v266 = (void *)(v9 + v12);
  *(_DWORD *)(a1 + 36) = v10;
  unsigned int v33 = *(_DWORD *)(v29 + 4 * (v21 >> v30));
  if (v33 < v17)
  {
    unint64_t v34 = 3;
    goto LABEL_15;
  }
  unsigned int v136 = v8 - 1;
  unint64_t v137 = a3 - 7;
  unint64_t v138 = a3 - 3;
  unsigned int v139 = a2 + 1;
  uint64_t v140 = v9 + 8;
  unint64_t v34 = 3;
  while (1)
  {
    uint64_t v141 = (_DWORD *)(v9 + v33);
    if (*((unsigned __int8 *)v141 + v34) != *((unsigned __int8 *)a2 + v34)) {
      goto LABEL_104;
    }
    if (v137 <= (unint64_t)a2)
    {
      int v144 = a2;
      if ((unint64_t)a2 < v138)
      {
LABEL_96:
        if (*v141 == *v144)
        {
          ++v144;
          ++v141;
        }
      }
      goto LABEL_98;
    }
    unint64_t v142 = *a2 ^ *(void *)v141;
    if (!v142) {
      break;
    }
    unint64_t v143 = __clz(__rbit64(v142)) >> 3;
    if (v143 > v34) {
      goto LABEL_103;
    }
LABEL_104:
    if (v33 > v18)
    {
      if (--v19)
      {
        unsigned int v33 = *(_DWORD *)(v6 + 4 * (v33 & v136));
        if (v33 >= v17) {
          continue;
        }
      }
    }
    goto LABEL_15;
  }
  uint64_t v145 = 0;
  while (1)
  {
    int v144 = &v139[v145];
    if ((unint64_t)&v139[v145] >= v137) {
      break;
    }
    uint64_t v146 = *(void *)(v140 + v33 + v145 * 8);
    ++v145;
    unint64_t v147 = *(void *)v144 ^ v146;
    if (v147)
    {
      unint64_t v143 = v145 * 8 + (__clz(__rbit64(v147)) >> 3);
      if (v143 > v34) {
        goto LABEL_103;
      }
      goto LABEL_104;
    }
  }
  uint64_t v141 = (_DWORD *)(v140 + v33 + v145 * 8);
  if ((unint64_t)v144 < v138) {
    goto LABEL_96;
  }
LABEL_98:
  if ((unint64_t)v144 >= a3 - 1)
  {
    if ((unint64_t)v144 >= a3) {
      goto LABEL_102;
    }
    goto LABEL_100;
  }
  if (*(unsigned __int16 *)v141 == *(unsigned __int16 *)v144)
  {
    int v144 = (_DWORD *)((char *)v144 + 2);
    uint64_t v141 = (_DWORD *)((char *)v141 + 2);
  }
  if ((unint64_t)v144 < a3)
  {
LABEL_100:
    if (*(unsigned __int8 *)v141 == *(unsigned __int8 *)v144) {
      int v144 = (_DWORD *)((char *)v144 + 1);
    }
  }
LABEL_102:
  unint64_t v143 = (char *)v144 - (char *)a2;
  if (v143 <= v34) {
    goto LABEL_104;
  }
LABEL_103:
  *a4 = v10 + 2 - v33;
  unint64_t v34 = v143;
  if ((void *)((char *)a2 + v143) != (void *)a3) {
    goto LABEL_104;
  }
  unint64_t v34 = v143;
LABEL_15:
  uint64_t v35 = 16 * v22;
  int v37 = *(char **)v20;
  uint64_t v36 = *(void *)(v20 + 8);
  _X10 = v36 + *(unsigned int *)(v23 + 16 * v22);
  __asm { PRFM            #0, [X10] }
  _X10 = v36 + *(unsigned int *)(v23 + ((16 * v22) | 4));
  __asm { PRFM            #0, [X10] }
  int v42 = *(void *)v20 - v36 - v12;
  _X8 = v36 + *(unsigned int *)(v23 + ((16 * v22) | 8));
  __asm { PRFM            #0, [X8] }
  if (v19 >= 3) {
    int v45 = 3;
  }
  else {
    int v45 = v19;
  }
  unint64_t v46 = *(unsigned int *)(v23 + (v35 | 0xC));
  unint64_t v47 = v46 >> 8;
  uint64_t v48 = *(void *)(v20 + 64);
  _X8 = v48 + 4 * (v46 >> 8);
  __asm { PRFM            #0, [X8] }
  if (!v45) {
    goto LABEL_36;
  }
  uint64_t v51 = *(unsigned int *)(v23 + 16 * v22);
  if (v51)
  {
    int v254 = v10 + v42 + 2;
    if (*(_DWORD *)(v36 + v51) != *(_DWORD *)a2) {
      goto LABEL_232;
    }
    int v259 = *(_DWORD *)(v23 + (v35 | 0xC));
    int v236 = v42;
    uint64_t v242 = *(void *)(v20 + 64);
    unint64_t v247 = v46 >> 8;
    unint64_t v52 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v36 + v51 + 4), a3, v37, v266);
    LOBYTE(v46) = v259;
    uint64_t v48 = v242;
    unint64_t v47 = v247;
    int v42 = v236;
    if (v52 + 4 <= v34
      || (*a4 = (v254 - v51), unint64_t v34 = v52 + 4, (void *)((char *)a2 + v52 + 4) != (void *)a3))
    {
LABEL_232:
      if (v45 == 1) {
        goto LABEL_36;
      }
      uint64_t v53 = *(unsigned int *)(v23 + (v35 | 4));
      if (v53)
      {
        if (*(_DWORD *)(v36 + v53) != *(_DWORD *)a2) {
          goto LABEL_233;
        }
        char v260 = v46;
        int v237 = v42;
        uint64_t v243 = v48;
        unint64_t v248 = v47;
        unint64_t v54 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v36 + v53 + 4), a3, v37, v266);
        LOBYTE(v46) = v260;
        uint64_t v48 = v243;
        unint64_t v47 = v248;
        int v42 = v237;
        if (v54 + 4 <= v34
          || (*a4 = (v254 - v53), unint64_t v34 = v54 + 4, (void *)((char *)a2 + v54 + 4) != (void *)a3))
        {
LABEL_233:
          if (v45 == 2) {
            goto LABEL_36;
          }
          uint64_t v55 = *(unsigned int *)(v23 + (v35 | 8));
          if (v55)
          {
            if (*(_DWORD *)(v36 + v55) != *(_DWORD *)a2) {
              goto LABEL_36;
            }
            char v261 = v46;
            int v56 = v42;
            unint64_t v57 = v47;
            uint64_t v58 = v48;
            unint64_t v59 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v36 + v55 + 4), a3, v37, v266);
            LOBYTE(v46) = v261;
            uint64_t v48 = v58;
            unint64_t v47 = v57;
            int v42 = v56;
            if (v59 + 4 <= v34
              || (*a4 = (v254 - v55), unint64_t v34 = v59 + 4, (void *)((char *)a2 + v59 + 4) != (void *)a3))
            {
LABEL_36:
              uint64_t v60 = v19 - v45 >= v46 ? v46 : v19 - v45;
              if (v60)
              {
                uint64_t v61 = (unsigned int *)(v48 + 4 * v47);
                uint64_t v62 = v60;
                do
                {
                  unsigned int v63 = *v61++;
                  _X10 = v36 + v63;
                  __asm { PRFM            #0, [X10] }
                  --v62;
                }
                while (v62);
                int v66 = *(_DWORD *)a2;
                int v67 = v10 + v42 + 2;
                int v68 = (unsigned int *)(v48 + 4 * v47);
                do
                {
                  unsigned int v70 = *v68++;
                  unsigned int v69 = v70;
                  uint64_t v71 = v36 + v70;
                  if (*(_DWORD *)v71 == v66)
                  {
                    unint64_t v72 = ZSTD_count_2segments((void *)((char *)a2 + 4), (char *)(v71 + 4), a3, v37, v266);
                    if (v72 + 4 > v34)
                    {
                      *a4 = v67 - v69;
                      unint64_t v34 = v72 + 4;
                      if ((void *)((char *)a2 + v72 + 4) == (void *)a3) {
                        break;
                      }
                    }
                  }
                  LODWORD(v60) = v60 - 1;
                }
                while (v60);
              }
            }
          }
        }
      }
    }
  }
  return v34;
}

unint64_t ZSTD_DUBT_findBestMatch(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4, int a5, int a6)
{
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 200);
  int v8 = a5 - 5;
  switch(a5)
  {
    case 5:
      int v9 = (int)a2;
      uint64_t v10 = *a2;
      unsigned int v11 = -1157627904;
      goto LABEL_7;
    case 6:
      int v9 = (int)a2;
      uint64_t v10 = *a2;
      unsigned int v11 = -1080360960;
      goto LABEL_7;
    case 7:
      int v9 = (int)a2;
      uint64_t v10 = *a2;
      unsigned int v11 = -1079680256;
      goto LABEL_7;
    case 8:
      int v9 = (int)a2;
      uint64_t v10 = *a2;
      unsigned int v11 = -1213897629;
LABEL_7:
      unint64_t v12 = (v10 * (v11 | 0xCF1BBCDC00000000)) >> -(char)v7;
      break;
    default:
      int v9 = (int)a2;
      unint64_t v12 = (-1640531535 * *(_DWORD *)a2) >> -(char)v7;
      break;
  }
  uint64_t v13 = *(void *)(a1 + 8);
  unsigned int v14 = v9 - v13;
  int v15 = *(_DWORD *)(a1 + 196);
  unsigned int v16 = 1 << *(_DWORD *)(a1 + 192);
  if (v14 - *(_DWORD *)(a1 + 28) > v16 && *(_DWORD *)(a1 + 32) == 0) {
    unsigned int v18 = v14 - v16;
  }
  else {
    unsigned int v18 = *(_DWORD *)(a1 + 28);
  }
  uint64_t v19 = *(void *)(a1 + 64);
  unsigned int v20 = ~(-1 << (v15 - 1));
  unsigned int v21 = v14 + (-1 << (v15 - 1)) + 1;
  if (v14 < v20) {
    unsigned int v21 = 0;
  }
  unsigned int v136 = v18;
  unsigned int v137 = v21;
  if (v21 <= v18) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = v21;
  }
  int v23 = 1 << *(_DWORD *)(a1 + 204);
  unsigned int v24 = *(_DWORD *)(v6 + 4 * v12);
  uint64_t v141 = a1;
  uint64_t v144 = *(void *)(a1 + 64);
  uint64_t v145 = *(void *)(a1 + 8);
  int v155 = a6;
  int v142 = ~(-1 << (v15 - 1));
  unsigned int v135 = v14;
  int v134 = v8;
  if (v24 <= v22) {
    goto LABEL_92;
  }
  unsigned int v25 = 0;
  unsigned int v26 = 1 << *(_DWORD *)(a1 + 204);
  do
  {
    unsigned int v27 = v24;
    int v28 = (unsigned int *)(v19 + 8 * (v24 & v20));
    unsigned int v29 = v28[1];
    BOOL v30 = v29 == 1 && v26 >= 2;
    if (!v30) {
      break;
    }
    v28[1] = v25;
    --v26;
    unsigned int v24 = *v28;
    unsigned int v25 = v27;
  }
  while (v24 > v22);
  if (v29 == 1) {
    *(void *)int v28 = 0;
  }
  unsigned int v27 = v25;
  if (!v25)
  {
LABEL_92:
    uint64_t v31 = *(void *)(a1 + 16);
    goto LABEL_94;
  }
  int v131 = v23;
  unint64_t v132 = v12;
  uint64_t v133 = v6;
  uint64_t v140 = v19 + 4;
  uint64_t v31 = *(void *)(a1 + 16);
  do
  {
    unsigned int v33 = v27;
    unsigned int v34 = *(_DWORD *)(v140 + 8 * (v27 & v20));
    int v35 = *(_DWORD *)(a1 + 192);
    int v36 = -1 << (*(unsigned char *)(a1 + 196) - 1);
    unint64_t v37 = *(unsigned int *)(a1 + 24);
    unsigned int v38 = *(_DWORD *)(a1 + 28);
    if (v37 <= v33) {
      uint64_t v39 = v13;
    }
    else {
      uint64_t v39 = v31;
    }
    uint64_t v164 = (char *)(v31 + v37);
    if (v37 <= v33) {
      unint64_t v40 = a3;
    }
    else {
      unint64_t v40 = v31 + v37;
    }
    unint64_t v32 = (unsigned int *)(v19 + 8 * (v33 & ~v36));
    uint64_t v41 = v32 + 1;
    unsigned int v42 = *v32;
    v180[0] = 0;
    unsigned int v43 = 1 << v35;
    if (v33 - v38 <= v43) {
      unsigned int v44 = v38;
    }
    else {
      unsigned int v44 = v33 - v43;
    }
    unsigned int v160 = v26;
    unsigned int v157 = v34;
    if (v26 && v42 > v44)
    {
      int v45 = 0;
      unint64_t v46 = 0;
      uint64_t v47 = ~v36;
      unsigned int v48 = v33;
      uint64_t v49 = v39 + v33;
      uint64_t v148 = (void *)(v13 + v37);
      unint64_t v50 = v40 - 7;
      unint64_t v51 = v40 - 3;
      unint64_t v52 = v40 - 1;
      uint64_t v143 = v49 + 8;
      unsigned int v173 = v44;
      unsigned int v152 = v33;
      unint64_t v154 = v37;
      uint64_t v150 = v49;
      unint64_t v146 = v40 - 3;
      unint64_t v147 = v40 - 7;
      while (1)
      {
        if (v46 >= v45) {
          uint64_t v53 = v45;
        }
        else {
          uint64_t v53 = v46;
        }
        uint64_t v54 = v13;
        unsigned int v175 = v46;
        if (a6 != 1) {
          goto LABEL_61;
        }
        unint64_t v55 = (unint64_t)&v53[v42];
        if (v37 > v48 || v55 >= v37) {
          break;
        }
        uint64_t v167 = v31 + v42;
        uint64_t v170 = v41;
        int v56 = &v53[v49];
        uint64_t v57 = v31;
        unint64_t v58 = v40;
        uint64_t v59 = v47;
        uint64_t v60 = v22;
        uint64_t v61 = v32;
        unint64_t v62 = ZSTD_count_2segments(v56, &v53[v167], v40, v164, v148);
        uint64_t v47 = v59;
        unint64_t v40 = v58;
        unsigned int v48 = v152;
        unint64_t v37 = v154;
        unint64_t v32 = v61;
        uint64_t v22 = v60;
        uint64_t v49 = v150;
        uint64_t v31 = v57;
        unint64_t v51 = v146;
        unint64_t v50 = v147;
        uint64_t v19 = v144;
        uint64_t v13 = v145;
        a6 = v155;
        unsigned int v63 = &v53[v62];
        BOOL v30 = (unint64_t)&v53[v62 + v42] >= v154;
        uint64_t v64 = v167;
        uint64_t v41 = v170;
        if (v30) {
          uint64_t v64 = v145 + v42;
        }
        unsigned int v65 = &v63[v150];
        if (&v63[v150] == (char *)v40) {
          goto LABEL_33;
        }
LABEL_77:
        unsigned int v70 = (unsigned int *)(v19 + 8 * (v42 & v47));
        if (v63[v64] >= *v65)
        {
          *uint64_t v41 = v42;
          if (v42 <= v22)
          {
            uint64_t v41 = v180;
            goto LABEL_33;
          }
          int v45 = v63;
          uint64_t v41 = (unsigned int *)(v19 + 8 * (v42 & v47));
          unsigned int v71 = v173;
          unint64_t v46 = v175;
          if (!--v26) {
            goto LABEL_33;
          }
        }
        else
        {
          *unint64_t v32 = v42;
          if (v42 <= v22)
          {
            unint64_t v32 = v180;
            goto LABEL_33;
          }
          unint64_t v32 = v70 + 1;
          unint64_t v46 = v63;
          ++v70;
          unsigned int v71 = v173;
          if (!--v26) {
            goto LABEL_33;
          }
        }
        unsigned int v42 = *v70;
        if (*v70 <= v71) {
          goto LABEL_33;
        }
      }
      if (v55 >= v37) {
        uint64_t v54 = v13;
      }
      else {
        uint64_t v54 = v31;
      }
LABEL_61:
      uint64_t v64 = v54 + v42;
      int v66 = &v53[v49];
      int v67 = &v53[v64];
      if (v50 <= (unint64_t)&v53[v49])
      {
        unsigned int v69 = &v53[v49];
        if ((unint64_t)v66 < v51)
        {
LABEL_66:
          if (*(_DWORD *)v67 == *(_DWORD *)v69)
          {
            v69 += 4;
            v67 += 4;
          }
        }
      }
      else
      {
        unint64_t v68 = *(void *)v66 ^ *(void *)v67;
        if (v68)
        {
          unsigned int v63 = &v53[__clz(__rbit64(v68)) >> 3];
          unsigned int v65 = &v63[v49];
          if (&v63[v49] == (char *)v40) {
            goto LABEL_33;
          }
          goto LABEL_77;
        }
        uint64_t v72 = 0;
        uint64_t v73 = &v53[v143];
        while (1)
        {
          int v74 = &v73[v72];
          if ((unint64_t)&v73[v72] >= v50) {
            break;
          }
          uint64_t v75 = *(void *)&v53[v42 + 8 + v54 + v72];
          v72 += 8;
          unint64_t v76 = *(void *)v74 ^ v75;
          if (v76)
          {
            unsigned int v63 = &v53[v72 + (__clz(__rbit64(v76)) >> 3)];
            unsigned int v65 = &v63[v49];
            if (&v63[v49] != (char *)v40) {
              goto LABEL_77;
            }
            goto LABEL_33;
          }
        }
        unsigned int v69 = &v53[v143 + v72];
        int v67 = &v53[v42 + 8 + v54 + v72];
        if ((unint64_t)v69 < v51) {
          goto LABEL_66;
        }
      }
      if ((unint64_t)v69 >= v52)
      {
        if ((unint64_t)v69 >= v40) {
          goto LABEL_76;
        }
      }
      else
      {
        if (*(unsigned __int16 *)v67 == *(unsigned __int16 *)v69)
        {
          v69 += 2;
          v67 += 2;
        }
        if ((unint64_t)v69 >= v40)
        {
LABEL_76:
          unsigned int v63 = &v69[-v49];
          unsigned int v65 = v69;
          if (v69 == (char *)v40) {
            goto LABEL_33;
          }
          goto LABEL_77;
        }
      }
      if (*v67 == *v69) {
        ++v69;
      }
      goto LABEL_76;
    }
LABEL_33:
    *uint64_t v41 = 0;
    *unint64_t v32 = 0;
    unsigned int v26 = v160 + 1;
    a1 = v141;
    unsigned int v20 = v142;
    unsigned int v27 = v157;
  }
  while (v157);
  unsigned int v14 = v135;
  unint64_t v12 = v132;
  uint64_t v6 = v133;
  int v23 = v131;
LABEL_94:
  unint64_t v77 = *(unsigned int *)(a1 + 24);
  unsigned int v78 = (unsigned int *)(v19 + 8 * (v20 & v14));
  uint64_t v79 = v78 + 1;
  int v179 = 0;
  unsigned int v80 = *(_DWORD *)(v6 + 4 * v12);
  *(_DWORD *)(v6 + 4 * v12) = v14;
  int v81 = v23 - 1;
  int v174 = v14 + 9;
  if (v80 <= v136)
  {
    unint64_t v178 = 0;
    uint64_t v107 = a2;
    goto LABEL_144;
  }
  unint64_t v178 = 0;
  unint64_t v82 = 0;
  unint64_t v83 = 0;
  int v168 = (char *)(v31 + v77);
  unsigned int v165 = (void *)(v13 + v77);
  unint64_t v84 = a3 - 7;
  unint64_t v158 = a3 - 3;
  int v161 = v14 + 1;
  int v153 = v14 + 2;
  uint64_t v107 = a2;
  uint64_t v149 = v13 + 8;
  uint64_t v151 = a2 + 1;
  unsigned int v85 = v136;
  while (2)
  {
    if (v83 >= v82) {
      unint64_t v86 = v82;
    }
    else {
      unint64_t v86 = v83;
    }
    uint64_t v87 = (char *)v107 + v86;
    int v176 = v81;
    if (a6 != 1 || v86 + v80 >= v77)
    {
      uint64_t v96 = v13 + v80;
      unsigned int v98 = (_DWORD *)(v96 + v86);
      if (v84 <= (unint64_t)v87)
      {
        uint64_t v100 = (_DWORD *)((char *)v107 + v86);
        if ((unint64_t)v87 < v158)
        {
LABEL_118:
          if (*v98 == *v100)
          {
            ++v100;
            ++v98;
          }
        }
      }
      else
      {
        unint64_t v99 = *(void *)v87 ^ *(void *)v98;
        if (v99)
        {
          uint64_t v107 = a2;
          unint64_t v95 = (__clz(__rbit64(v99)) >> 3) + v86;
          if (v95 > v178) {
            break;
          }
          goto LABEL_129;
        }
        uint64_t v102 = 0;
        int v103 = (char *)v151 + v86;
        while (1)
        {
          unsigned int v104 = &v103[v102];
          if ((unint64_t)&v103[v102] >= v84) {
            break;
          }
          uint64_t v105 = *(void *)(v149 + v86 + v80 + v102);
          v102 += 8;
          unint64_t v106 = *(void *)v104 ^ v105;
          if (v106)
          {
            uint64_t v107 = a2;
            unint64_t v95 = v102 + (__clz(__rbit64(v106)) >> 3) + v86;
            if (v95 <= v178) {
              goto LABEL_129;
            }
            goto LABEL_107;
          }
        }
        uint64_t v100 = (_DWORD *)((char *)v151 + v86 + v102);
        unsigned int v98 = (_DWORD *)(v149 + v86 + v80 + v102);
        if ((unint64_t)v100 < v158) {
          goto LABEL_118;
        }
      }
      if ((unint64_t)v100 >= a3 - 1)
      {
        if ((unint64_t)v100 >= a3) {
          goto LABEL_128;
        }
      }
      else
      {
        if (*(unsigned __int16 *)v98 == *(unsigned __int16 *)v100)
        {
          uint64_t v100 = (_DWORD *)((char *)v100 + 2);
          unsigned int v98 = (_DWORD *)((char *)v98 + 2);
        }
        if ((unint64_t)v100 >= a3)
        {
LABEL_128:
          uint64_t v107 = a2;
          unint64_t v95 = (char *)v100 - v87 + v86;
          if (v95 > v178) {
            break;
          }
          goto LABEL_129;
        }
      }
      if (*(unsigned __int8 *)v98 == *(unsigned __int8 *)v100) {
        uint64_t v100 = (_DWORD *)((char *)v100 + 1);
      }
      goto LABEL_128;
    }
    uint64_t v171 = v79;
    uint64_t v88 = v31 + v80;
    unint64_t v89 = (char *)(v88 + v86);
    unint64_t v90 = v86;
    unint64_t v91 = v83;
    unint64_t v92 = v77;
    uint64_t v93 = v31;
    unint64_t v94 = ZSTD_count_2segments(v87, v89, a3, v168, v165);
    uint64_t v31 = v93;
    unint64_t v77 = v92;
    unint64_t v83 = v91;
    uint64_t v19 = v144;
    uint64_t v13 = v145;
    unsigned int v85 = v136;
    unint64_t v95 = v94 + v90;
    if (v94 + v90 + v80 >= v77) {
      uint64_t v96 = v145 + v80;
    }
    else {
      uint64_t v96 = v88;
    }
    uint64_t v79 = v171;
    unsigned int v20 = v142;
    uint64_t v107 = a2;
    if (v95 <= v178)
    {
LABEL_129:
      a6 = v155;
      int v81 = v176;
LABEL_130:
      int v101 = (unsigned int *)(v19 + 8 * (v80 & v20));
      if (*(unsigned __int8 *)(v96 + v95) >= *((unsigned __int8 *)v107 + v95))
      {
        *uint64_t v79 = v80;
        if (v80 <= v137)
        {
          uint64_t v79 = (unsigned int *)&v179;
          goto LABEL_144;
        }
        unint64_t v82 = v95;
        uint64_t v79 = (unsigned int *)(v19 + 8 * (v80 & v20));
        BOOL v30 = v81-- != 0;
        if (!v30) {
          goto LABEL_144;
        }
      }
      else
      {
        *unsigned int v78 = v80;
        if (v80 <= v137)
        {
          unsigned int v78 = (unsigned int *)&v179;
          goto LABEL_144;
        }
        ++v101;
        unint64_t v83 = v95;
        unsigned int v78 = v101;
        BOOL v30 = v81-- != 0;
        if (!v30) {
          goto LABEL_144;
        }
      }
      unsigned int v80 = *v101;
      if (*v101 <= v85) {
        goto LABEL_144;
      }
      continue;
    }
    break;
  }
LABEL_107:
  int v97 = v174;
  if (v95 > v174 - v80) {
    int v97 = v80 + v95;
  }
  int v174 = v97;
  if ((int)((__clz(v161 - v80) ^ 0x1F) + (__clz(*(_DWORD *)a4 + 1) ^ 0xFFFFFFE0) + 1) < 4 * ((int)v95 - (int)v178))
  {
    *a4 = v153 - v80;
    unint64_t v178 = v95;
  }
  a6 = v155;
  int v81 = v176;
  if ((uint64_t *)((char *)v107 + v95) != (uint64_t *)a3) {
    goto LABEL_130;
  }
  if (v155 == 2) {
    int v81 = 0;
  }
LABEL_144:
  *uint64_t v79 = 0;
  *unsigned int v78 = 0;
  if (a6 == 2 && v81)
  {
    uint64_t v108 = *(void *)(v141 + 184);
    int v109 = *(_DWORD *)(v108 + 200);
    switch(v134)
    {
      case 0:
        uint64_t v110 = *v107;
        unsigned int v111 = -1157627904;
        goto LABEL_156;
      case 1:
        uint64_t v110 = *v107;
        unsigned int v111 = -1080360960;
        goto LABEL_156;
      case 2:
        uint64_t v110 = *v107;
        unsigned int v111 = -1079680256;
        goto LABEL_156;
      case 3:
        uint64_t v110 = *v107;
        unsigned int v111 = -1213897629;
LABEL_156:
        unint64_t v112 = (v110 * (v111 | 0xCF1BBCDC00000000)) >> -(char)v109;
        break;
      default:
        unint64_t v112 = (-1640531535 * *(_DWORD *)v107) >> -(char)v109;
        break;
    }
    uint64_t v113 = *(char **)v108;
    uint64_t v114 = *(void *)(v108 + 8);
    uint64_t v115 = *(void *)v108 - v114;
    unsigned int v116 = *(_DWORD *)(v108 + 28);
    unsigned int v117 = ~(-1 << (*(_DWORD *)(v108 + 196) - 1));
    unsigned int v118 = v115 - v116 <= v117 ? *(_DWORD *)(v108 + 28) : v115 + (-1 << (*(_DWORD *)(v108 + 196) - 1)) + 1;
    unsigned int v119 = *(_DWORD *)(*(void *)(v108 + 48) + 4 * v112);
    if (v119 > v116)
    {
      unsigned int v159 = *(_DWORD *)(v108 + 28);
      unint64_t v120 = 0;
      unint64_t v177 = 0;
      unsigned int v172 = (void *)(v13 + *(unsigned int *)(v141 + 24));
      unint64_t v169 = (*(_DWORD *)v108 - v114);
      uint64_t v162 = *(void *)(v108 + 64);
      uint64_t v156 = (*(_DWORD *)(v141 + 28) - v115);
      uint64_t v166 = v13 + v156;
      int v121 = v81 - 1;
      do
      {
        if (v177 >= v120) {
          unint64_t v122 = v120;
        }
        else {
          unint64_t v122 = v177;
        }
        uint64_t v123 = v114;
        uint64_t v124 = v114 + v119;
        uint64_t v125 = v113;
        unint64_t v126 = ZSTD_count_2segments((uint64_t *)((char *)v107 + v122), (char *)(v124 + v122), a3, v113, v172);
        unint64_t v127 = v126 + v122;
        if (v126 + v122 + v119 >= v169) {
          uint64_t v128 = v166 + v119;
        }
        else {
          uint64_t v128 = v124;
        }
        if (v127 <= v178)
        {
          uint64_t v107 = a2;
          uint64_t v114 = v123;
          uint64_t v113 = v125;
        }
        else
        {
          if ((int)((__clz(v135 + 1 - (v119 + v156)) ^ 0x1F) + (__clz(*(_DWORD *)a4 + 1) ^ 0xFFFFFFE0) + 1) < 4 * ((int)v127 - (int)v178))
          {
            *a4 = v135 + 2 - (v119 + v156);
            unint64_t v178 = v126 + v122;
          }
          uint64_t v107 = a2;
          uint64_t v114 = v123;
          uint64_t v113 = v125;
          if ((uint64_t *)((char *)a2 + v127) == (uint64_t *)a3) {
            break;
          }
        }
        int v129 = (unsigned int *)(v162 + 8 * (v119 & v117));
        if (*(unsigned __int8 *)(v128 + v127) >= *((unsigned __int8 *)v107 + v127))
        {
          if (v119 <= v118) {
            break;
          }
        }
        else
        {
          if (v119 <= v118) {
            break;
          }
          ++v129;
          unint64_t v177 = v126 + v122;
          unint64_t v127 = v120;
        }
        BOOL v30 = v121-- != 0;
        if (!v30) {
          break;
        }
        unsigned int v119 = *v129;
        unint64_t v120 = v127;
      }
      while (*v129 > v159);
    }
  }
  *(_DWORD *)(v141 + 36) = v174 - 8;
  return v178;
}

unint64_t ZSTD_BtFindBestMatch_extDict_selectMLS(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4)
{
  int v4 = *(_DWORD *)(a1 + 208);
  if ((v4 - 6) >= 2)
  {
    if (v4 == 5)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(unsigned int *)(a1 + 36);
      if (v15 + v16 <= (unint64_t)a2)
      {
        if (v16 < (int)a2 - (int)v15)
        {
          uint64_t v17 = *(void *)(a1 + 48);
          int v18 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          uint64_t v19 = *(void *)(a1 + 64);
          int v20 = 64 - *(_DWORD *)(a1 + 200);
          do
          {
            unint64_t v21 = 4 * ((0xCF1BBCDCBB000000 * *(void *)(v15 + v16)) >> v20);
            int v22 = *(_DWORD *)(v17 + v21);
            int v23 = (_DWORD *)(v19 + 8 * (v16 & v18));
            *(_DWORD *)(v17 + v21) = v16;
            *int v23 = v22;
            v23[1] = 1;
            ++v16;
          }
          while (a2 - v15 != v16);
        }
        *(_DWORD *)(a1 + 36) = a2 - v15;
        int v14 = 5;
        return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 1);
      }
    }
    else
    {
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = *(unsigned int *)(a1 + 36);
      if (v25 + v26 <= (unint64_t)a2)
      {
        if (v26 < (int)a2 - (int)v25)
        {
          uint64_t v27 = *(void *)(a1 + 48);
          int v28 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
          uint64_t v29 = *(void *)(a1 + 64);
          int v30 = 32 - *(_DWORD *)(a1 + 200);
          do
          {
            uint64_t v31 = 4 * ((-1640531535 * *(_DWORD *)(v25 + v26)) >> v30);
            int v32 = *(_DWORD *)(v27 + v31);
            unsigned int v33 = (_DWORD *)(v29 + 8 * (v26 & v28));
            *(_DWORD *)(v27 + v31) = v26;
            *unsigned int v33 = v32;
            v33[1] = 1;
            ++v26;
          }
          while (a2 - v25 != v26);
        }
        *(_DWORD *)(a1 + 36) = a2 - v25;
        int v14 = 4;
        return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 1);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 36);
    if (v5 + v6 <= (unint64_t)a2)
    {
      if (v6 < (int)a2 - (int)v5)
      {
        uint64_t v7 = *(void *)(a1 + 48);
        int v8 = ~(-1 << (*(_DWORD *)(a1 + 196) - 1));
        uint64_t v9 = *(void *)(a1 + 64);
        int v10 = 64 - *(_DWORD *)(a1 + 200);
        do
        {
          unint64_t v11 = 4 * ((0xCF1BBCDCBF9B0000 * *(void *)(v5 + v6)) >> v10);
          int v12 = *(_DWORD *)(v7 + v11);
          uint64_t v13 = (_DWORD *)(v9 + 8 * (v6 & v8));
          *(_DWORD *)(v7 + v11) = v6;
          _DWORD *v13 = v12;
          v13[1] = 1;
          ++v6;
        }
        while (a2 - v5 != v6);
      }
      *(_DWORD *)(a1 + 36) = a2 - v5;
      int v14 = 6;
      return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, v14, 1);
    }
  }
  return 0;
}

uint64_t ZSTD_insertBt1(uint64_t a1, void *a2, unint64_t a3, int a4, int a5)
{
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(_DWORD *)(a1 + 200);
  switch(a4)
  {
    case 5:
      uint64_t v8 = *a2;
      unsigned int v9 = -1157627904;
      goto LABEL_7;
    case 6:
      uint64_t v8 = *a2;
      unsigned int v9 = -1080360960;
      goto LABEL_7;
    case 7:
      uint64_t v8 = *a2;
      unsigned int v9 = -1079680256;
      goto LABEL_7;
    case 8:
      uint64_t v8 = *a2;
      unsigned int v9 = -1213897629;
LABEL_7:
      unint64_t v10 = (v8 * (v9 | 0xCF1BBCDC00000000)) >> -(char)v7;
      break;
    default:
      unint64_t v10 = (-1640531535 * *(_DWORD *)a2) >> -(char)v7;
      break;
  }
  uint64_t v11 = *(void *)(a1 + 64);
  int v12 = -1 << (*(_DWORD *)(a1 + 196) - 1);
  uint64_t v13 = ~v12;
  uint64_t v14 = 4 * v10;
  unsigned int v15 = *(_DWORD *)(v6 + 4 * v10);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16);
  int v18 = a2 - v16;
  if ((int)a2 - (int)v16 >= v13) {
    uint64_t v19 = (a2 - v16 + v12 + 1);
  }
  else {
    uint64_t v19 = 0;
  }
  int v20 = (int *)(v11 + 8 * (v18 & ~v12));
  int v78 = 0;
  unint64_t v22 = *(unsigned int *)(a1 + 24);
  unsigned int v21 = *(_DWORD *)(a1 + 28);
  int v23 = v18 + 9;
  int v24 = *(_DWORD *)(a1 + 204);
  *(_DWORD *)(v6 + v14) = v18;
  if (v15 < v21)
  {
    unsigned int v25 = 0;
    *(void *)int v20 = 0;
    goto LABEL_63;
  }
  unsigned int v74 = v21;
  int v59 = a2 - v16;
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  int v66 = (char *)(v17 + v22);
  unsigned int v65 = (void *)(v16 + v22);
  int v28 = (unsigned int *)(v20 + 1);
  int v29 = ~(-1 << v24);
  unint64_t v30 = a3 - 7;
  unint64_t v62 = a3 - 1;
  unint64_t v63 = a3 - 3;
  uint64_t v60 = v16 + 8;
  uint64_t v61 = a2 + 1;
  unint64_t v31 = 8;
  uint64_t v69 = v16;
  unsigned int v70 = a2;
  unint64_t v68 = v22;
  int v67 = a5;
  unint64_t v64 = a3 - 7;
  while (1)
  {
    if (v27 >= v26) {
      unint64_t v32 = v26;
    }
    else {
      unint64_t v32 = v27;
    }
    uint64_t v33 = v15;
    unsigned int v34 = (char *)a2 + v32;
    unint64_t v75 = v27;
    unint64_t v76 = v26;
    int v77 = v29;
    if (!a5 || v32 + v15 >= v22)
    {
      uint64_t v45 = v16 + v15;
      unint64_t v46 = (void *)(v45 + v32);
      if (v30 <= (unint64_t)v34)
      {
        uint64_t v49 = (_DWORD *)((char *)a2 + v32);
        if ((unint64_t)v34 >= v63) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v47 = *(void *)v34 ^ *v46;
        if (v47)
        {
          unint64_t v48 = __clz(__rbit64(v47)) >> 3;
LABEL_37:
          unint64_t v44 = v48 + v32;
          goto LABEL_38;
        }
        uint64_t v52 = 0;
        uint64_t v53 = (char *)v61 + v32;
        while (1)
        {
          uint64_t v54 = &v53[v52];
          if ((unint64_t)&v53[v52] >= v30) {
            break;
          }
          uint64_t v55 = *(void *)(v60 + v32 + v15 + v52);
          v52 += 8;
          unint64_t v56 = *(void *)v54 ^ v55;
          if (v56)
          {
            unint64_t v48 = v52 + (__clz(__rbit64(v56)) >> 3);
            goto LABEL_37;
          }
        }
        uint64_t v49 = (_DWORD *)((char *)v61 + v32 + v52);
        unint64_t v46 = (void *)(v60 + v32 + v15 + v52);
        if ((unint64_t)v49 >= v63)
        {
LABEL_28:
          if ((unint64_t)v49 >= v62)
          {
            if ((unint64_t)v49 >= a3)
            {
LABEL_36:
              unint64_t v48 = (char *)v49 - v34;
              goto LABEL_37;
            }
          }
          else
          {
            if (*(unsigned __int16 *)v46 == *(unsigned __int16 *)v49)
            {
              uint64_t v49 = (_DWORD *)((char *)v49 + 2);
              unint64_t v46 = (void *)((char *)v46 + 2);
            }
            if ((unint64_t)v49 >= a3) {
              goto LABEL_36;
            }
          }
          if (*(unsigned __int8 *)v46 == *(unsigned __int8 *)v49) {
            uint64_t v49 = (_DWORD *)((char *)v49 + 1);
          }
          goto LABEL_36;
        }
      }
      if (*(_DWORD *)v46 == *v49)
      {
        ++v49;
        unint64_t v46 = (void *)((char *)v46 + 4);
      }
      goto LABEL_28;
    }
    unint64_t v71 = v32;
    uint64_t v72 = v17 + v15;
    int v35 = (char *)(v72 + v32);
    int v36 = v20;
    uint64_t v37 = v13;
    int v38 = v23;
    uint64_t v39 = v17;
    uint64_t v40 = v19;
    unsigned int v73 = v15;
    uint64_t v41 = v28;
    unint64_t v42 = v31;
    unint64_t v43 = ZSTD_count_2segments(v34, v35, a3, v66, v65);
    unint64_t v31 = v42;
    int v28 = v41;
    unsigned int v15 = v73;
    uint64_t v19 = v40;
    uint64_t v17 = v39;
    int v23 = v38;
    uint64_t v13 = v37;
    unint64_t v30 = v64;
    int v20 = v36;
    unint64_t v22 = v68;
    uint64_t v16 = v69;
    a2 = v70;
    a5 = v67;
    unint64_t v44 = v43 + v71;
    uint64_t v45 = v72;
    if (v43 + v71 + v33 >= v68) {
      uint64_t v45 = v69 + v33;
    }
LABEL_38:
    int v50 = v15 + v44;
    if (v44 <= v23 - v15) {
      int v50 = v23;
    }
    if (v44 > v31)
    {
      int v23 = v50;
      unint64_t v31 = v44;
    }
    if ((void *)((char *)a2 + v44) == (void *)a3) {
      goto LABEL_58;
    }
    unint64_t v51 = (unsigned int *)(v11 + 8 * (v15 & v13));
    if (*(unsigned __int8 *)(v45 + v44) >= *((unsigned __int8 *)a2 + v44)) {
      break;
    }
    *int v20 = v15;
    if (v15 <= v19)
    {
      int v20 = &v78;
      goto LABEL_58;
    }
    ++v51;
    unint64_t v27 = v44;
    int v20 = (int *)v51;
    unint64_t v26 = v76;
    int v29 = v77 - 1;
    if (!v77) {
      goto LABEL_58;
    }
LABEL_14:
    unsigned int v15 = *v51;
    if (*v51 < v74) {
      goto LABEL_58;
    }
  }
  *int v28 = v15;
  if (v15 > v19)
  {
    unint64_t v26 = v44;
    int v28 = (unsigned int *)(v11 + 8 * (v15 & v13));
    unint64_t v27 = v75;
    int v29 = v77 - 1;
    if (!v77) {
      goto LABEL_58;
    }
    goto LABEL_14;
  }
  int v28 = (unsigned int *)&v78;
LABEL_58:
  *int v28 = 0;
  *int v20 = 0;
  unsigned int v25 = v31 - 384;
  if ((v31 - 384) >= 0xC0) {
    unsigned int v25 = 192;
  }
  if (v31 <= 0x180) {
    unsigned int v25 = 0;
  }
  int v18 = v59;
LABEL_63:
  unsigned int v57 = v23 - v18 - 8;
  if (v25 <= v57) {
    return v57;
  }
  else {
    return v25;
  }
}

uint64_t *ZSTD_opt_getNextMatchAndUpdateSeqStore(uint64_t *result, int a2, unsigned int a3)
{
  unint64_t v3 = result[3];
  if (!v3 || (unint64_t v4 = result[1], v4 >= v3))
  {
    result[5] = -1;
    return result;
  }
  uint64_t v5 = *result;
  uint64_t v6 = (int *)(*result + 12 * v4);
  unint64_t v7 = v6[1];
  unint64_t v8 = result[2];
  int v9 = v7 - v8;
  if (v8 >= v7) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = v7 - v8;
  }
  if (v10) {
    int v11 = 0;
  }
  else {
    int v11 = v9;
  }
  if (v10 >= a3)
  {
    result[5] = -1;
    unsigned int v15 = v8 + a3;
    if (!(v8 + a3)) {
      goto LABEL_45;
    }
    if (v4 <= v3) {
      unint64_t v16 = v3;
    }
    else {
      unint64_t v16 = v4;
    }
    unsigned int v21 = (_DWORD *)(v5 + 12 * v4 + 8);
    while (v16 != v4)
    {
      unsigned int v22 = *v21 + *(v21 - 1);
      BOOL v19 = v15 >= v22;
      unsigned int v23 = v15 - v22;
      if (!v19)
      {
LABEL_44:
        result[2] = v15;
        if (v4 != v3) {
          return result;
        }
        goto LABEL_45;
      }
      result[1] = ++v4;
      v21 += 3;
      unsigned int v15 = v23;
      if (!v23) {
        goto LABEL_45;
      }
    }
LABEL_42:
    if (v16 != v3) {
      return result;
    }
    goto LABEL_45;
  }
  int v12 = v11 + v6[2];
  int v13 = *v6;
  unsigned int v14 = v12 + v10 + a2;
  *((_DWORD *)result + 10) = v10 + a2;
  *((_DWORD *)result + 11) = v14;
  *((_DWORD *)result + 12) = v13;
  if (v14 <= a3 + a2)
  {
    unsigned int v15 = v10 + v8 + v12;
    if (!v15) {
      goto LABEL_45;
    }
    if (v4 <= v3) {
      unint64_t v16 = v3;
    }
    else {
      unint64_t v16 = v4;
    }
    int v24 = (_DWORD *)(v5 + 12 * v4 + 8);
    while (v16 != v4)
    {
      unsigned int v25 = *v24 + *(v24 - 1);
      BOOL v19 = v15 >= v25;
      unsigned int v26 = v15 - v25;
      if (!v19) {
        goto LABEL_44;
      }
      result[1] = ++v4;
      v24 += 3;
      unsigned int v15 = v26;
      if (!v26) {
        goto LABEL_45;
      }
    }
    goto LABEL_42;
  }
  *((_DWORD *)result + 11) = a3 + a2;
  unsigned int v15 = v8 + a3;
  if (v8 + a3)
  {
    if (v4 <= v3) {
      unint64_t v16 = v3;
    }
    else {
      unint64_t v16 = v4;
    }
    uint64_t v17 = (_DWORD *)(v5 + 12 * v4 + 8);
    while (v16 != v4)
    {
      unsigned int v18 = *v17 + *(v17 - 1);
      BOOL v19 = v15 >= v18;
      unsigned int v20 = v15 - v18;
      if (!v19) {
        goto LABEL_44;
      }
      result[1] = ++v4;
      v17 += 3;
      unsigned int v15 = v20;
      if (!v20) {
        goto LABEL_45;
      }
    }
    goto LABEL_42;
  }
LABEL_45:
  result[2] = 0;
  return result;
}

void ZSTD_rescaleFreqs(char **a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  int v6 = *((_DWORD *)a1 + 24);
  *((_DWORD *)a1 + 20) = 0;
  if (*((_DWORD *)a1 + 13))
  {
    if (v6 != 2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = *a1;
      int32x4_t v9 = 0uLL;
      int32x4_t v10 = 0uLL;
      do
      {
        int v11 = (int32x4_t *)&v8[v7];
        v12.i64[0] = 0x100000001;
        v12.i64[1] = 0x100000001;
        int32x4_t v13 = (int32x4_t)vsraq_n_u32(v12, *(uint32x4_t *)&v8[v7], 5uLL);
        v14.i64[0] = 0x100000001;
        v14.i64[1] = 0x100000001;
        int32x4_t v15 = (int32x4_t)vsraq_n_u32(v14, *(uint32x4_t *)&v8[v7 + 16], 5uLL);
        int32x4_t *v11 = v13;
        v11[1] = v15;
        int32x4_t v9 = vaddq_s32(v13, v9);
        int32x4_t v10 = vaddq_s32(v15, v10);
        v7 += 32;
      }
      while (v7 != 1024);
      *((_DWORD *)a1 + 12) = vaddvq_s32(vaddq_s32(v10, v9));
    }
    v16.i64[0] = 0x100000001;
    v16.i64[1] = 0x100000001;
    v17.i64[0] = 0x100000001;
    v17.i64[1] = 0x100000001;
    BOOL v19 = (uint32x4_t *)a1[1];
    unsigned int v18 = (uint32x4_t *)a1[2];
    int32x4_t v20 = (int32x4_t)vsraq_n_u32(v17, *v19, 4uLL);
    v21.i64[0] = 0x100000001;
    v21.i64[1] = 0x100000001;
    int32x4_t v22 = (int32x4_t)vsraq_n_u32(v21, v19[1], 4uLL);
    *BOOL v19 = (uint32x4_t)v20;
    v19[1] = (uint32x4_t)v22;
    v23.i64[0] = 0x100000001;
    v23.i64[1] = 0x100000001;
    int32x4_t v24 = (int32x4_t)vsraq_n_u32(v23, v19[2], 4uLL);
    v25.i64[0] = 0x100000001;
    v25.i64[1] = 0x100000001;
    int32x4_t v26 = (int32x4_t)vsraq_n_u32(v25, v19[3], 4uLL);
    v19[2] = (uint32x4_t)v24;
    v19[3] = (uint32x4_t)v26;
    v27.i64[0] = 0x100000001;
    v27.i64[1] = 0x100000001;
    int32x4_t v28 = (int32x4_t)vsraq_n_u32(v27, v19[4], 4uLL);
    v29.i64[0] = 0x100000001;
    v29.i64[1] = 0x100000001;
    int32x4_t v30 = (int32x4_t)vsraq_n_u32(v29, v19[5], 4uLL);
    v19[4] = (uint32x4_t)v28;
    v19[5] = (uint32x4_t)v30;
    v31.i64[0] = 0x100000001;
    v31.i64[1] = 0x100000001;
    int32x4_t v32 = (int32x4_t)vsraq_n_u32(v31, v19[6], 4uLL);
    v33.i64[0] = 0x100000001;
    v33.i64[1] = 0x100000001;
    int32x4_t v34 = (int32x4_t)vsraq_n_u32(v33, v19[7], 4uLL);
    v19[6] = (uint32x4_t)v32;
    v19[7] = (uint32x4_t)v34;
    v35.i64[0] = 0x100000001;
    v35.i64[1] = 0x100000001;
    int32x4_t v36 = (int32x4_t)vsraq_n_u32(v35, v19[8], 4uLL);
    v19[8] = (uint32x4_t)v36;
    *((_DWORD *)a1 + 13) = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v36, v34), vaddq_s32(v32, v30)), vaddq_s32(vaddq_s32(v28, v26), vaddq_s32(v24, v22))), v20));
    v24.i64[0] = 0x100000001;
    v24.i64[1] = 0x100000001;
    int32x4_t v37 = (int32x4_t)vsraq_n_u32((uint32x4_t)v24, *v18, 4uLL);
    v20.i64[0] = 0x100000001;
    v20.i64[1] = 0x100000001;
    int32x4_t v38 = (int32x4_t)vsraq_n_u32((uint32x4_t)v20, v18[1], 4uLL);
    uint32x4_t *v18 = (uint32x4_t)v37;
    v18[1] = (uint32x4_t)v38;
    v28.i64[0] = 0x100000001;
    v28.i64[1] = 0x100000001;
    int32x4_t v39 = (int32x4_t)vsraq_n_u32((uint32x4_t)v28, v18[2], 4uLL);
    v22.i64[0] = 0x100000001;
    v22.i64[1] = 0x100000001;
    int32x4_t v40 = (int32x4_t)vsraq_n_u32((uint32x4_t)v22, v18[3], 4uLL);
    v18[2] = (uint32x4_t)v39;
    uint64_t v18[3] = (uint32x4_t)v40;
    v32.i64[0] = 0x100000001;
    v32.i64[1] = 0x100000001;
    int32x4_t v41 = (int32x4_t)vsraq_n_u32((uint32x4_t)v32, v18[4], 4uLL);
    v26.i64[0] = 0x100000001;
    v26.i64[1] = 0x100000001;
    int32x4_t v42 = (int32x4_t)vsraq_n_u32((uint32x4_t)v26, v18[5], 4uLL);
    v18[4] = (uint32x4_t)v41;
    v18[5] = (uint32x4_t)v42;
    v43.i64[0] = 0x100000001;
    v43.i64[1] = 0x100000001;
    int32x4_t v44 = (int32x4_t)vsraq_n_u32(v43, v18[6], 4uLL);
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    int32x4_t v45 = (int32x4_t)vsraq_n_u32((uint32x4_t)v30, v18[7], 4uLL);
    v18[6] = (uint32x4_t)v44;
    v18[7] = (uint32x4_t)v45;
    v46.i64[0] = 0x100000001;
    v46.i64[1] = 0x100000001;
    int32x4_t v47 = (int32x4_t)vsraq_n_u32(v46, v18[8], 4uLL);
    v34.i64[0] = 0x100000001;
    v34.i64[1] = 0x100000001;
    int32x4_t v48 = (int32x4_t)vsraq_n_u32((uint32x4_t)v34, v18[9], 4uLL);
    v18[8] = (uint32x4_t)v47;
    v18[9] = (uint32x4_t)v48;
    v49.i64[0] = 0x100000001;
    v49.i64[1] = 0x100000001;
    int32x4_t v50 = (int32x4_t)vsraq_n_u32(v49, v18[10], 4uLL);
    v36.i64[0] = 0x100000001;
    v36.i64[1] = 0x100000001;
    int32x4_t v51 = (int32x4_t)vsraq_n_u32((uint32x4_t)v36, v18[11], 4uLL);
    v18[10] = (uint32x4_t)v50;
    v18[11] = (uint32x4_t)v51;
    int v52 = ((unsigned __int32)v18[12].i32[0] >> 4) + 1;
    LODWORD(v19) = v52
                 + vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v51, v48), vaddq_s32(vaddq_s32(v45, v42), vaddq_s32(v40, v38))), vaddq_s32(vaddq_s32(v50, v47), vaddq_s32(vaddq_s32(v44, v41), vaddq_s32(v39, v37)))));
    int v53 = ((unsigned __int32)v18[12].i32[1] >> 4) + 1;
    v18[12].i32[0] = v52;
    v18[12].i32[1] = v53;
    int v54 = ((unsigned __int32)v18[12].i32[2] >> 4) + 1;
    int v55 = ((unsigned __int32)v18[12].i32[3] >> 4) + 1;
    v18[12].i32[2] = v54;
    v18[12].i32[3] = v55;
    int v56 = v55 + v54 + v53;
    int v57 = ((unsigned __int32)v18[13].i32[0] >> 4) + 1;
    v18[13].i32[0] = v57;
    *((_DWORD *)a1 + 14) = v57 + v56 + v19;
    unint64_t v58 = (uint32x4_t *)a1[3];
    v44.i64[0] = 0x100000001;
    v44.i64[1] = 0x100000001;
    int32x4_t v59 = (int32x4_t)vsraq_n_u32((uint32x4_t)v44, v58[7], 4uLL);
    v48.i64[0] = 0x100000001;
    v48.i64[1] = 0x100000001;
    int32x4_t v60 = (int32x4_t)vsraq_n_u32((uint32x4_t)v48, v58[6], 4uLL);
    v41.i64[0] = 0x100000001;
    v41.i64[1] = 0x100000001;
    int32x4_t v61 = (int32x4_t)vsraq_n_u32((uint32x4_t)v41, v58[5], 4uLL);
    v45.i64[0] = 0x100000001;
    v45.i64[1] = 0x100000001;
    int32x4_t v62 = (int32x4_t)vsraq_n_u32((uint32x4_t)v45, v58[4], 4uLL);
    v39.i64[0] = 0x100000001;
    v39.i64[1] = 0x100000001;
    int32x4_t v63 = (int32x4_t)vsraq_n_u32((uint32x4_t)v39, v58[3], 4uLL);
    v42.i64[0] = 0x100000001;
    v42.i64[1] = 0x100000001;
    int32x4_t v64 = (int32x4_t)vsraq_n_u32((uint32x4_t)v42, v58[2], 4uLL);
    v37.i64[0] = 0x100000001;
    v37.i64[1] = 0x100000001;
    int32x4_t v65 = (int32x4_t)vsraq_n_u32((uint32x4_t)v37, v58[1], 4uLL);
    int32x4_t v66 = (int32x4_t)vsraq_n_u32(v16, *v58, 4uLL);
    *unint64_t v58 = (uint32x4_t)v66;
    v58[1] = (uint32x4_t)v65;
    v58[2] = (uint32x4_t)v64;
    v58[3] = (uint32x4_t)v63;
    v58[4] = (uint32x4_t)v62;
    v58[5] = (uint32x4_t)v61;
    v58[6] = (uint32x4_t)v60;
    v58[7] = (uint32x4_t)v59;
    int v67 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v66, v62), vaddq_s32(v64, v60)), vaddq_s32(vaddq_s32(v65, v61), vaddq_s32(v63, v59))));
    goto LABEL_53;
  }
  if ((unint64_t)a3 <= 0x400) {
    *((_DWORD *)a1 + 20) = 1;
  }
  unsigned int v70 = a1[11];
  if (*((_DWORD *)v70 + 256) != 2)
  {
    if (v6 != 2)
    {
      uint64_t v107 = *a1;
      bzero(*a1, 0x400uLL);
      if (a3 >= 1)
      {
        uint64_t v108 = &a2[a3];
        do
        {
          int v109 = *a2++;
          ++*(_DWORD *)&v107[4 * v109];
        }
        while (a2 < v108);
      }
      uint64_t v110 = 0;
      unsigned int v111 = *a1;
      int32x4_t v112 = 0uLL;
      int32x4_t v113 = 0uLL;
      do
      {
        uint64_t v114 = (int32x4_t *)&v111[v110];
        v115.i64[0] = 0x100000001;
        v115.i64[1] = 0x100000001;
        int32x4_t v116 = (int32x4_t)vsraq_n_u32(v115, *(uint32x4_t *)&v111[v110], 5uLL);
        v117.i64[0] = 0x100000001;
        v117.i64[1] = 0x100000001;
        int32x4_t v118 = (int32x4_t)vsraq_n_u32(v117, *(uint32x4_t *)&v111[v110 + 16], 5uLL);
        *uint64_t v114 = v116;
        v114[1] = v118;
        int32x4_t v112 = vaddq_s32(v116, v112);
        int32x4_t v113 = vaddq_s32(v118, v113);
        v110 += 32;
      }
      while (v110 != 1024);
      *((_DWORD *)a1 + 12) = vaddvq_s32(vaddq_s32(v113, v112));
    }
    memset_pattern16(a1[1], &unk_18898EB90, 0x90uLL);
    *((_DWORD *)a1 + 13) = 36;
    memset_pattern16(a1[2], &unk_18898EB90, 0xD4uLL);
    *((_DWORD *)a1 + 14) = 53;
    memset_pattern16(a1[3], &unk_18898EB90, 0x80uLL);
    int v67 = 32;
LABEL_53:
    *((_DWORD *)a1 + 15) = v67;
    if (*((_DWORD *)a1 + 24) == 2) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  *((_DWORD *)a1 + 20) = 0;
  if (v6 != 2)
  {
    uint64_t v71 = 0;
    *((_DWORD *)a1 + 12) = 0;
    uint64_t v72 = *a1;
    unsigned int v73 = v70 + 2;
    do
    {
      if (v73[v71]) {
        int v74 = 1 << (11 - v73[v71]);
      }
      else {
        int v74 = 1;
      }
      *(_DWORD *)&v72[v71] = v74;
      *((_DWORD *)a1 + 12) += v74;
      v71 += 4;
    }
    while (v71 != 1024);
  }
  uint64_t v75 = 0;
  uint64_t v76 = 1 << (*((_WORD *)v70 + 1626) - 1);
  if (!*((_WORD *)v70 + 1626)) {
    uint64_t v76 = 1;
  }
  *((_DWORD *)a1 + 13) = 0;
  int v77 = a1[1];
  int v78 = (int *)&v70[4 * v76 + 3260];
  do
  {
    int v79 = *v78;
    v78 += 2;
    int v80 = 1 << (10 - ((v79 + 0xFFFF) >> 16));
    if ((v79 + 0xFFFF) < 0x10000) {
      int v81 = 1;
    }
    else {
      int v81 = v80;
    }
    *(_DWORD *)&v77[v75] = v81;
    *((_DWORD *)a1 + 13) += v81;
    v75 += 4;
  }
  while (v75 != 144);
  uint64_t v82 = 0;
  uint64_t v83 = 1 << (*((_WORD *)v70 + 900) - 1);
  if (!*((_WORD *)v70 + 900)) {
    uint64_t v83 = 1;
  }
  *((_DWORD *)a1 + 14) = 0;
  unint64_t v84 = a1[2];
  unsigned int v85 = (int *)&v70[4 * v83 + 1808];
  do
  {
    int v86 = *v85;
    v85 += 2;
    int v87 = 1 << (10 - ((v86 + 0xFFFF) >> 16));
    if ((v86 + 0xFFFF) < 0x10000) {
      int v88 = 1;
    }
    else {
      int v88 = v87;
    }
    *(_DWORD *)&v84[v82] = v88;
    *((_DWORD *)a1 + 14) += v88;
    v82 += 4;
  }
  while (v82 != 212);
  uint64_t v89 = 0;
  uint64_t v90 = 1 << (*((_WORD *)v70 + 514) - 1);
  if (!*((_WORD *)v70 + 514)) {
    uint64_t v90 = 1;
  }
  *((_DWORD *)a1 + 15) = 0;
  unint64_t v91 = a1[3];
  unint64_t v92 = (int *)&v70[4 * v90 + 1036];
  do
  {
    int v93 = *v92;
    v92 += 2;
    int v94 = 1 << (10 - ((v93 + 0xFFFF) >> 16));
    if ((v93 + 0xFFFF) < 0x10000) {
      int v95 = 1;
    }
    else {
      int v95 = v94;
    }
    *(_DWORD *)&v91[v89] = v95;
    int v67 = v95 + *((_DWORD *)a1 + 15);
    *((_DWORD *)a1 + 15) = v67;
    v89 += 4;
  }
  while (v89 != 128);
  if (*((_DWORD *)a1 + 24) != 2)
  {
LABEL_38:
    unsigned int v96 = *((_DWORD *)a1 + 12) + 1;
    unsigned int v97 = __clz(v96);
    int v98 = (v96 << 8 >> (v97 ^ 0x1F)) + ((v97 ^ 0x1F) << 8);
    if (!a4) {
      int v98 = (v97 << 8) ^ 0x1F00;
    }
    *((_DWORD *)a1 + 16) = v98;
  }
LABEL_41:
  unsigned int v99 = *((_DWORD *)a1 + 13) + 1;
  unsigned int v100 = __clz(v99);
  if (a4)
  {
    int v101 = (v99 << 8 >> (v100 ^ 0x1F)) + ((v100 ^ 0x1F) << 8);
    v102.i32[0] = *((_DWORD *)a1 + 14);
    v102.i32[1] = v67;
    int32x2_t v103 = vadd_s32(v102, (int32x2_t)0x100000001);
    int32x2_t v104 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v103), (int8x8_t)0x1F0000001FLL);
    int8x8_t v105 = (int8x8_t)vadd_s32(vshl_n_s32(v104, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v103, 8uLL), (uint32x2_t)vneg_s32(v104)));
  }
  else
  {
    int v101 = (v100 << 8) ^ 0x1F00;
    v106.i32[0] = *((_DWORD *)a1 + 14);
    v106.i32[1] = v67;
    int8x8_t v105 = veor_s8((int8x8_t)vshl_n_s32(vclz_s32(vadd_s32(v106, (int32x2_t)0x100000001)), 8uLL), (int8x8_t)0x1F0000001F00);
  }
  *((_DWORD *)a1 + 17) = v101;
  a1[9] = (char *)v105;
}

uint64_t *ZSTD_optLdm_processMatchCandidate(uint64_t *result, uint64_t a2, _DWORD *a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5 = result[3];
  if (v5)
  {
    int v6 = result;
    unint64_t v7 = result[1];
    if (v7 < v5)
    {
      unsigned int v11 = *((_DWORD *)result + 11);
      if (a4 >= v11)
      {
        if (a4 > v11)
        {
          unsigned int v12 = a4 - v11 + *((_DWORD *)result + 4);
          if (!v12) {
            goto LABEL_17;
          }
          uint64_t v13 = v7 <= v5 ? result[3] : result[1];
          uint64_t v14 = 12 * v7;
          while (v13 != v7)
          {
            unsigned int v15 = *(_DWORD *)(*result + v14 + 8) + *(_DWORD *)(*result + v14 + 4);
            BOOL v19 = v12 >= v15;
            unsigned int v16 = v12 - v15;
            if (!v19)
            {
              result[2] = v12;
              goto LABEL_16;
            }
            result[1] = ++v7;
            v14 += 12;
            unsigned int v12 = v16;
            if (!v16) {
              goto LABEL_17;
            }
          }
          unint64_t v7 = v13;
LABEL_16:
          if (v7 == v5) {
LABEL_17:
          }
            result[2] = 0;
        }
        uint64_t result = ZSTD_opt_getNextMatchAndUpdateSeqStore(result, a4, a5);
        unsigned int v11 = *((_DWORD *)v6 + 11);
      }
      unsigned int v17 = v11 - a4;
      BOOL v19 = *((_DWORD *)v6 + 10) <= a4 && v11 > a4 && v17 >= 3;
      if (v19)
      {
        int v20 = *((_DWORD *)v6 + 12);
        uint64_t v21 = *a3;
        if (!v21 || v21 <= 0xFFF && v17 > *(_DWORD *)(a2 + 8 * (v21 - 1) + 4))
        {
          *(_DWORD *)(a2 + 8 * v21 + 4) = v17;
          *(_DWORD *)(a2 + 8 * (*a3)++) = v20 + 2;
        }
      }
    }
  }
  return result;
}

char *ZSTDMT_createJobsTable(unsigned int *a1, uint64_t a2)
{
  unsigned int v4 = __clz(*a1);
  unsigned int v5 = v4 ^ 0x1F;
  uint64_t v6 = (2 << (v4 ^ 0x1F));
  if (*(void *)a2)
  {
    unint64_t v7 = (char *)(*(uint64_t (**)(void, uint64_t))a2)(*(void *)(a2 + 16), 424 * v6);
    bzero(v7, 424 * v6);
    if (!v7) {
      return v7;
    }
  }
  else
  {
    unint64_t v7 = (char *)malloc_type_calloc(1uLL, 424 * v6, 0xEC864E14uLL);
    if (!v7) {
      return v7;
    }
  }
  *a1 = v6;
  if (v5 <= 0x1E)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    if (v6 <= 1) {
      unsigned int v10 = 1;
    }
    else {
      unsigned int v10 = v6;
    }
    uint64_t v11 = 424 * v10;
    do
    {
      int v12 = pthread_mutex_init((pthread_mutex_t *)&v7[v8 + 16], 0);
      v9 |= v12 | pthread_cond_init((pthread_cond_t *)&v7[v8 + 80], 0);
      v8 += 424;
    }
    while (v11 != v8);
    if (v9)
    {
      uint64_t v14 = *(void (**)(uint64_t, char *))(a2 + 8);
      uint64_t v13 = *(void *)(a2 + 16);
      unsigned int v15 = (pthread_cond_t *)(v7 + 80);
      do
      {
        pthread_mutex_destroy((pthread_mutex_t *)&v15[-2].__opaque[24]);
        pthread_cond_destroy(v15);
        unsigned int v15 = (pthread_cond_t *)((char *)v15 + 424);
        --v6;
      }
      while (v6);
      if (v14) {
        v14(v13, v7);
      }
      else {
        free(v7);
      }
      return 0;
    }
  }
  return v7;
}

char *ZSTDMT_createCCtxPool(int a1, long long *a2)
{
  int v3 = a1;
  size_t v4 = 8 * (a1 - 1) + 104;
  if (*(void *)a2)
  {
    unsigned int v5 = (char *)(*(uint64_t (**)(void, size_t))a2)(*((void *)a2 + 2), v4);
    bzero(v5, v4);
    if (!v5) {
      return v5;
    }
  }
  else
  {
    unsigned int v5 = (char *)malloc_type_calloc(1uLL, v4, 0xEC864E14uLL);
    if (!v5) {
      return v5;
    }
  }
  if (!pthread_mutex_init((pthread_mutex_t *)v5, 0))
  {
    long long v9 = *a2;
    *((void *)v5 + 11) = *((void *)a2 + 2);
    *(_OWORD *)(v5 + 72) = v9;
    *((_DWORD *)v5 + 16) = v3;
    *((_DWORD *)v5 + 17) = 1;
    unsigned int v10 = *(uint64_t (**)(void, size_t))a2;
    uint64_t v11 = *((void *)a2 + 1);
    if ((*(void *)a2 == 0) == (v11 == 0))
    {
      uint64_t v12 = *((void *)a2 + 2);
      if (v10)
      {
        uint64_t v13 = (void *)v10(*((void *)a2 + 2), 3328);
        if (v13)
        {
LABEL_11:
          bzero(v13, 0xD00uLL);
          *((void *)v13 + 69) = v10;
          *((void *)v13 + 70) = v11;
          *((void *)v13 + 71) = v12;
          ZSTD_clearAllDicts((uint64_t)v13);
          *((void *)v13 + 22) = 0;
          *((_OWORD *)v13 + 9) = 0u;
          *((_OWORD *)v13 + 10) = 0u;
          *((_OWORD *)v13 + 7) = 0u;
          *((_OWORD *)v13 + 8) = 0u;
          *((_OWORD *)v13 + 5) = 0u;
          *((_OWORD *)v13 + 6) = 0u;
          *((_OWORD *)v13 + 3) = 0u;
          *((_OWORD *)v13 + 4) = 0u;
          *((_OWORD *)v13 + 1) = 0u;
          *((_OWORD *)v13 + 2) = 0u;
          *((_DWORD *)v13 + 15) = 3;
          *((_DWORD *)v13 + 12) = 1;
          *((void *)v5 + 12) = v13;
          return v5;
        }
      }
      else
      {
        uint64_t v13 = malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
        if (v13) {
          goto LABEL_11;
        }
      }
      int v3 = *((_DWORD *)v5 + 16);
    }
    *((void *)v5 + 12) = 0;
    if (v3 >= 1)
    {
      uint64_t v14 = 0;
      do
        ZSTD_freeCCtx(*(void *)&v5[8 * v14++ + 96]);
      while (v14 < *((int *)v5 + 16));
    }
    pthread_mutex_destroy((pthread_mutex_t *)v5);
    unint64_t v7 = (void (*)(uint64_t, char *))*((void *)v5 + 10);
    if (v7)
    {
      uint64_t v8 = *((void *)v5 + 11);
      goto LABEL_19;
    }
LABEL_20:
    free(v5);
    return 0;
  }
  unint64_t v7 = (void (*)(uint64_t, char *))*((void *)a2 + 1);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v8 = *((void *)a2 + 2);
LABEL_19:
  v7(v8, v5);
  return 0;
}

pthread_mutex_t *ZSTDMT_expandBufferPool(pthread_mutex_t *a1, int a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    return v2;
  }
  int v3 = 2 * a2;
  unsigned int v4 = 2 * a2 + 3;
  unsigned int v5 = *(_DWORD *)a1[1].__opaque;
  if (v5 >= v4) {
    return v2;
  }
  unint64_t v7 = *(uint64_t (**)(uint64_t, size_t))&a1[1].__opaque[8];
  uint64_t v6 = *(void (**)(uint64_t, pthread_mutex_t *))&a1[1].__opaque[16];
  uint64_t v8 = *(void *)&a1[1].__opaque[24];
  uint64_t sig = a1[1].__sig;
  if (v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = (void **)&a1[1].__opaque[32];
    do
    {
      if (*v11)
      {
        uint64_t v12 = *(void (**)(void))&v2[1].__opaque[16];
        if (v12) {
          v12(*(void *)&v2[1].__opaque[24]);
        }
        else {
          free(*v11);
        }
      }
      ++v10;
      v11 += 2;
    }
    while (v10 < *(unsigned int *)v2[1].__opaque);
  }
  pthread_mutex_destroy(v2);
  uint64_t v13 = *(void (**)(void, pthread_mutex_t *))&v2[1].__opaque[16];
  if (v13)
  {
    v13(*(void *)&v2[1].__opaque[24], v2);
    size_t v14 = 16 * (v3 + 2) + 120;
    if (v7) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v2 = (pthread_mutex_t *)malloc_type_calloc(1uLL, v14, 0xEC864E14uLL);
    if (!v2) {
      return v2;
    }
    goto LABEL_16;
  }
  free(v2);
  size_t v14 = 16 * (v3 + 2) + 120;
  if (!v7) {
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v2 = (pthread_mutex_t *)v7(v8, v14);
  bzero(v2, v14);
  if (!v2) {
    return v2;
  }
LABEL_16:
  if (pthread_mutex_init(v2, 0))
  {
    if (v6) {
      v6(v8, v2);
    }
    else {
      free(v2);
    }
    return 0;
  }
  else
  {
    v2[1].__uint64_t sig = 0x10000;
    *(_DWORD *)v2[1].__opaque = v4;
    *(_DWORD *)&v2[1].__opaque[4] = 0;
    *(void *)&v2[1].__opaque[8] = v7;
    *(void *)&v2[1].__opaque[16] = v6;
    *(void *)&v2[1].__opaque[24] = v8;
    pthread_mutex_lock(v2);
    v2[1].__uint64_t sig = sig;
    pthread_mutex_unlock(v2);
  }
  return v2;
}

uint64_t ZSTDMT_compressionJob(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 368);
  long long v84 = *(_OWORD *)(a1 + 352);
  long long v85 = v2;
  uint64_t v86 = *(void *)(a1 + 384);
  long long v3 = *(_OWORD *)(a1 + 304);
  long long v80 = *(_OWORD *)(a1 + 288);
  long long v81 = v3;
  long long v4 = *(_OWORD *)(a1 + 336);
  long long v82 = *(_OWORD *)(a1 + 320);
  long long v83 = v4;
  long long v5 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)int v77 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)&v77[16] = v5;
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v78 = *(_OWORD *)(a1 + 256);
  long long v79 = v6;
  uint64_t v7 = *(void *)(a1 + 128);
  pthread_mutex_lock((pthread_mutex_t *)v7);
  int v8 = *(_DWORD *)(v7 + 68);
  if (v8)
  {
    int v9 = v8 - 1;
    *(_DWORD *)(v7 + 68) = v9;
    unint64_t v10 = *(int32x2_t **)(v7 + 8 * v9 + 96);
    pthread_mutex_unlock((pthread_mutex_t *)v7);
    goto LABEL_8;
  }
  pthread_mutex_unlock((pthread_mutex_t *)v7);
  uint64_t v11 = *(uint64_t (**)(void, uint64_t))(v7 + 72);
  int32x2_t v12 = *(int32x2_t *)(v7 + 80);
  if ((v11 == 0) != (*(void *)&v12 == 0))
  {
    unint64_t v10 = 0;
    goto LABEL_8;
  }
  int32x2_t v13 = *(int32x2_t *)(v7 + 88);
  if (v11)
  {
    unint64_t v10 = (int32x2_t *)v11(*(void *)&v13, 3328);
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v10 = (int32x2_t *)malloc_type_malloc(0xD00uLL, 0x26AA08A0uLL);
  if (v10)
  {
LABEL_7:
    bzero(v10, 0xD00uLL);
    v10[69] = (int32x2_t)v11;
    v10[70] = v12;
    v10[71] = v13;
    ZSTD_clearAllDicts((uint64_t)v10);
    v10[22] = 0;
    *(_OWORD *)v10[18].i8 = 0u;
    *(_OWORD *)v10[20].i8 = 0u;
    *(_OWORD *)v10[14].i8 = 0u;
    *(_OWORD *)v10[16].i8 = 0u;
    *(_OWORD *)v10[10].i8 = 0u;
    *(_OWORD *)v10[12].i8 = 0u;
    *(_OWORD *)v10[6].i8 = 0u;
    *(_OWORD *)v10[8].i8 = 0u;
    *(_OWORD *)v10[2].i8 = 0u;
    *(_OWORD *)v10[4].i8 = 0u;
    v10[7].i32[1] = 3;
    v10[6].i32[0] = 1;
  }
LABEL_8:
  uint64_t v14 = *(void *)(a1 + 144);
  if (*(void *)(v14 + 64))
  {
    Buffer = ZSTDMT_getBuffer(v14);
    int32x2_t v76 = 0;
    long long v75 = 0uLL;
    unint64_t v17 = v16 / 0xC;
    if (!v10) {
      goto LABEL_18;
    }
  }
  else
  {
    unint64_t v17 = 0;
    Buffer = 0;
    long long v75 = 0uLL;
    int32x2_t v76 = 0;
    if (!v10) {
      goto LABEL_18;
    }
  }
  unsigned int v18 = *(unsigned char **)(a1 + 160);
  if (!v18)
  {
    int v20 = ZSTDMT_getBuffer(*(void *)(a1 + 136));
    if (!v20) {
      goto LABEL_18;
    }
    unsigned int v18 = v20;
    unint64_t v19 = v21;
    *(void *)(a1 + 160) = v20;
    *(void *)(a1 + 168) = v21;
    if (!v82) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  unint64_t v19 = *(void *)(a1 + 168);
  if (v82)
  {
LABEL_17:
    if (Buffer) {
      goto LABEL_19;
    }
LABEL_18:
    int32x4_t v22 = (pthread_mutex_t *)(a1 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    *(void *)(a1 + 8) = -64;
LABEL_85:
    pthread_mutex_unlock(v22);
    goto LABEL_86;
  }
LABEL_19:
  if (*(_DWORD *)(a1 + 208)) {
    DWORD1(v78) = 0;
  }
  LODWORD(v82) = 0;
  HIDWORD(v80) = 0;
  uint64_t v23 = *(void *)(a1 + 392);
  if (v23)
  {
    unint64_t v24 = -42;
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1889B9F30, (uint32x4_t)vaddq_s32(*(int32x4_t *)&v77[4], (int32x4_t)xmmword_1889B9F20)))))goto LABEL_84; {
    if ((*(_DWORD *)&v77[20] - 8) < 0xFFFFFFFB)
    }
      goto LABEL_84;
    if (*(_DWORD *)&v77[24] > 0x20000u) {
      goto LABEL_84;
    }
    if ((*(_DWORD *)&v77[28] - 1) > 8) {
      goto LABEL_84;
    }
    unint64_t v24 = ZSTD_compressBegin_internal((uint64_t)v10, 0, 0, 0, 0, v23, (uint64_t *)v77, *(void *)(a1 + 400), 0);
    if (v24 >= 0xFFFFFFFFFFFFFF89) {
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v25 = 400;
    if (!*(_DWORD *)(a1 + 212)) {
      uint64_t v25 = 200;
    }
    unint64_t v26 = *(void *)(a1 + v25);
    LODWORD(v79) = *(_DWORD *)(a1 + 212) == 0;
    unint64_t v24 = -42;
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1889B9F30, (uint32x4_t)vaddq_s32(*(int32x4_t *)&v77[4], (int32x4_t)xmmword_1889B9F20)))))goto LABEL_84; {
    if ((*(_DWORD *)&v77[20] - 8) < 0xFFFFFFFB)
    }
      goto LABEL_84;
    if (*(_DWORD *)&v77[24] > 0x20000u) {
      goto LABEL_84;
    }
    if ((*(_DWORD *)&v77[28] - 1) > 8) {
      goto LABEL_84;
    }
    unint64_t v24 = ZSTD_compressBegin_internal((uint64_t)v10, *(_DWORD **)(a1 + 176), *(void *)(a1 + 184), 1, 0, 0, (uint64_t *)v77, v26, 0);
    if (v24 >= 0xFFFFFFFFFFFFFF89) {
      goto LABEL_84;
    }
  }
  uint64_t v27 = *(void *)(a1 + 152);
  unsigned int v28 = *(_DWORD *)(a1 + 208);
  long long v72 = v75;
  int32x2_t v73 = v76;
  unint64_t v74 = v17;
  unint64_t v29 = *(void *)(a1 + 200);
  __src = *(char **)(a1 + 192);
  int32x2_t v71 = (int32x2_t)Buffer;
  pthread_mutex_lock((pthread_mutex_t *)v27);
  for (unsigned int i = *(_DWORD *)(v27 + 2472); i < v28; unsigned int i = *(_DWORD *)(v27 + 2472))
    pthread_cond_wait((pthread_cond_t *)(v27 + 64), (pthread_mutex_t *)v27);
  if (i == v28)
  {
    if (*(_DWORD *)(v27 + 208))
    {
      uint32x4_t v31 = (char **)(v27 + 280);
      if (v29)
      {
        if (*v31 == __src)
        {
          uint64_t v32 = *(void *)(v27 + 296);
          unsigned int v34 = *(_DWORD *)(v27 + 308);
          LODWORD(v33) = *(_DWORD *)(v27 + 304);
        }
        else
        {
          uint64_t v32 = *(void *)(v27 + 288);
          uint32x4_t v33 = &(*v31)[-v32];
          unsigned int v34 = *(_DWORD *)(v27 + 304);
          *(_DWORD *)(v27 + 308) = v34;
          *(_DWORD *)(v27 + 304) = v33;
          *(void *)(v27 + 288) = __src - v33;
          *(void *)(v27 + 296) = v32;
          if (v33 - v34 <= 7)
          {
            *(_DWORD *)(v27 + 308) = v33;
            unsigned int v34 = v33;
          }
        }
        *uint32x4_t v31 = &__src[v29];
        if ((unint64_t)&__src[v29] > v32 + (unint64_t)v34
          && v32 + (unint64_t)v33 > (unint64_t)__src)
        {
          uint64_t v35 = (uint64_t)&__src[v29 - v32];
          if (v35 > v33) {
            LODWORD(v35) = v33;
          }
          *(_DWORD *)(v27 + 308) = v35;
        }
      }
      ZSTD_ldm_generateSequences((int32x2_t *)(v27 + 280), &v71, (_DWORD *)(v27 + 208), (uint64_t)__src, v29);
      pthread_mutex_lock((pthread_mutex_t *)(v27 + 2480));
      long long v36 = *(_OWORD *)(v27 + 296);
      *(_OWORD *)(v27 + 2592) = *(_OWORD *)v31;
      *(_OWORD *)(v27 + 2608) = v36;
      pthread_cond_signal((pthread_cond_t *)(v27 + 2544));
      pthread_mutex_unlock((pthread_mutex_t *)(v27 + 2480));
    }
    if (*(_DWORD *)(v27 + 148) && v29) {
      ZSTD_XXH64_update((unsigned int *)(v27 + 2384), __src, v29);
    }
  }
  ++*(_DWORD *)(v27 + 2472);
  pthread_cond_broadcast((pthread_cond_t *)(v27 + 64));
  pthread_mutex_unlock((pthread_mutex_t *)v27);
  int32x2_t v37 = v73;
  if (*(void *)&v73 && v10->i32[0] == 1 && !v10[35].i32[0])
  {
    v10[354] = v71;
    v10[357] = v37;
    v10[358] = v37;
    v10[356] = 0;
    v10[355] = 0;
  }
  if (!*(_DWORD *)(a1 + 212))
  {
    if (v10->i32[0])
    {
      if (v10->i32[0] != 1)
      {
LABEL_64:
        int32x2_t v38 = v10[359];
        *(void *)(*(void *)&v38 + 4580) = 0;
        *(_DWORD *)(*(void *)&v38 + 4588) = 0;
        goto LABEL_65;
      }
      unint64_t v24 = ZSTD_writeFrameHeader(v18, v19, &v10[23], *(void *)&v10[55] - 1, v10[44].u32[0]);
      if (v24 <= 0xFFFFFFFFFFFFFF88)
      {
        v10->i32[0] = 2;
        goto LABEL_64;
      }
    }
    else
    {
      unint64_t v24 = -60;
    }
LABEL_84:
    int32x4_t v22 = (pthread_mutex_t *)(a1 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    *(void *)(a1 + 8) = v24;
    goto LABEL_85;
  }
LABEL_65:
  __srca = *(char **)(a1 + 192);
  unint64_t v39 = *(void *)(a1 + 200) + 0x7FFFFLL;
  unint64_t v40 = v39 >> 19;
  int32x4_t v41 = &v18[v19];
  if ((int)(v39 >> 19) >= 2)
  {
    unint64_t v67 = v39 >> 19;
    unint64_t v68 = v17;
    int32x4_t v22 = (pthread_mutex_t *)(a1 + 16);
    uint64_t v42 = (v39 >> 19) - 1;
    uint64_t v43 = 0x80000;
    while (1)
    {
      unint64_t v44 = ZSTD_compressContinue_internal(v10, v18, v41 - v18, &__srca[v43 - 0x80000], 0x80000uLL, 1, 0);
      unint64_t v45 = v44;
      if (v44 >= 0xFFFFFFFFFFFFFF89) {
        break;
      }
      v18 += v44;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
      unint64_t v46 = *(void *)(a1 + 8) + v45;
      *(void *)a1 = v43;
      *(void *)(a1 + 8) = v46;
      pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
      v43 += 0x80000;
      if (!--v42)
      {
        __srca = &__srca[v43 - 0x80000];
        LODWORD(v40) = v67;
        unint64_t v17 = v68;
        goto LABEL_70;
      }
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    *(void *)(a1 + 8) = v45;
    unint64_t v17 = v68;
    goto LABEL_85;
  }
LABEL_70:
  int v47 = *(_DWORD *)(a1 + 216);
  if (!(v47 | ((int)v40 > 0)))
  {
LABEL_86:
    unint64_t v55 = 0;
    goto LABEL_87;
  }
  uint64_t v48 = *(void *)(a1 + 200);
  uint64_t v49 = v48 & 0x7FFFF;
  BOOL v51 = (v48 & 0x7FFFF) == 0;
  unint64_t v50 = v48 & 0xFFFFFFFFFFF80000;
  BOOL v51 = !v51 || v50 == 0;
  if (v51) {
    size_t v52 = v49;
  }
  else {
    size_t v52 = 0x80000;
  }
  unint64_t v53 = v41 - v18;
  if (v47) {
    unint64_t v54 = ZSTD_compressEnd((int *)v10, v18, v53, __srca, v52);
  }
  else {
    unint64_t v54 = ZSTD_compressContinue_internal(v10, v18, v53, __srca, v52, 1, 0);
  }
  unint64_t v55 = v54;
  if (v54 >= 0xFFFFFFFFFFFFFF89)
  {
    int32x4_t v22 = (pthread_mutex_t *)(a1 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    *(void *)(a1 + 8) = v55;
    goto LABEL_85;
  }
LABEL_87:
  uint64_t v56 = *(void *)(a1 + 152);
  unsigned int v57 = *(_DWORD *)(a1 + 208);
  pthread_mutex_lock((pthread_mutex_t *)v56);
  if (*(_DWORD *)(v56 + 2472) <= v57)
  {
    *(_DWORD *)(v56 + 2472) = v57 + 1;
    pthread_cond_broadcast((pthread_cond_t *)(v56 + 64));
    pthread_mutex_lock((pthread_mutex_t *)(v56 + 2480));
    int v58 = *(_DWORD *)(v56 + 2592) - *(_DWORD *)(v56 + 2600);
    *(_DWORD *)(v56 + 2620) = v58;
    *(_DWORD *)(v56 + 2616) = v58;
    pthread_cond_signal((pthread_cond_t *)(v56 + 2544));
    pthread_mutex_unlock((pthread_mutex_t *)(v56 + 2480));
  }
  pthread_mutex_unlock((pthread_mutex_t *)v56);
  if (!Buffer)
  {
LABEL_95:
    if (!v10) {
      goto LABEL_100;
    }
    goto LABEL_96;
  }
  uint64_t v59 = *(void *)(a1 + 144);
  pthread_mutex_lock((pthread_mutex_t *)v59);
  uint64_t v60 = *(unsigned int *)(v59 + 76);
  if (v60 < *(_DWORD *)(v59 + 72))
  {
    *(_DWORD *)(v59 + 76) = v60 + 1;
    uint64_t v61 = v59 + 16 * v60;
    *(void *)(v61 + 104) = Buffer;
    *(void *)(v61 + 112) = 12 * v17;
    pthread_mutex_unlock((pthread_mutex_t *)v59);
    if (!v10) {
      goto LABEL_100;
    }
LABEL_96:
    uint64_t v63 = *(void *)(a1 + 128);
    pthread_mutex_lock((pthread_mutex_t *)v63);
    uint64_t v64 = *(int *)(v63 + 68);
    if ((int)v64 >= *(_DWORD *)(v63 + 64))
    {
      ZSTD_freeCCtx((unint64_t)v10);
    }
    else
    {
      *(_DWORD *)(v63 + 68) = v64 + 1;
      *(void *)(v63 + 8 * v64 + 96) = v10;
    }
    pthread_mutex_unlock((pthread_mutex_t *)v63);
    goto LABEL_100;
  }
  pthread_mutex_unlock((pthread_mutex_t *)v59);
  int32x4_t v62 = *(void (**)(void, void *))(v59 + 88);
  if (v62)
  {
    v62(*(void *)(v59 + 96), Buffer);
    goto LABEL_95;
  }
  free(Buffer);
  if (v10) {
    goto LABEL_96;
  }
LABEL_100:
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  unint64_t v65 = *(void *)(a1 + 8) + v55;
  *(void *)a1 = *(void *)(a1 + 200);
  *(void *)(a1 + 8) = v65;
  pthread_cond_signal((pthread_cond_t *)(a1 + 80));

  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
}

void *ZSTDMT_getBuffer(uint64_t a1)
{
  size_t v2 = *(void *)(a1 + 64);
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v3 = *(_DWORD *)(a1 + 76);
  if (v3)
  {
    unsigned int v4 = v3 - 1;
    *(_DWORD *)(a1 + 76) = v4;
    uint64_t v5 = a1 + 16 * v4;
    long long v6 = *(void **)(v5 + 104);
    size_t v7 = *(void *)(v5 + 112);
    *(void *)(v5 + 104) = 0;
    *(void *)(v5 + 112) = 0;
    if (v7 >= v2 && v7 >> 3 <= v2)
    {
      pthread_mutex_unlock((pthread_mutex_t *)a1);
      return v6;
    }
    if (v6)
    {
      int v9 = *(void (**)(void, void *))(a1 + 88);
      if (!v9)
      {
        free(v6);
        pthread_mutex_unlock((pthread_mutex_t *)a1);
        unint64_t v10 = *(uint64_t (**)(void, size_t))(a1 + 80);
        if (v10) {
          return (void *)v10(*(void *)(a1 + 96), v2);
        }
        return malloc_type_malloc(v2, 0x26AA08A0uLL);
      }
      v9(*(void *)(a1 + 96), v6);
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  unint64_t v10 = *(uint64_t (**)(void, size_t))(a1 + 80);
  if (v10) {
    return (void *)v10(*(void *)(a1 + 96), v2);
  }
  return malloc_type_malloc(v2, 0x26AA08A0uLL);
}

uint64_t ZSTD_execSequenceEnd(_OWORD *a1, uint64_t a2, uint64_t *a3, long long **a4, uint64_t a5, char *a6, uint64_t a7, unint64_t a8)
{
  uint64_t v8 = *a3;
  unint64_t v9 = a3[1] + *a3;
  if (v9 > a2 - (uint64_t)a1) {
    return -70;
  }
  uint64_t v11 = *a4;
  if (v8 > (unint64_t)(a5 - (void)*a4)) {
    return -20;
  }
  int32x2_t v12 = a6;
  uint64_t v14 = (void *)((char *)a1 + v8);
  unsigned int v15 = (char *)v11 + v8;
  uint64_t v16 = a3[2];
  unint64_t v17 = a2 - 32;
  if (v8 <= 7)
  {
    if (v8 < 1) {
      goto LABEL_53;
    }
    unsigned int v18 = (char *)a1 + v8;
    if ((char *)a1 + v8 <= (char *)a1 + 1) {
      unsigned int v18 = (char *)a1 + 1;
    }
    unint64_t v19 = v18 - (char *)a1;
    if (v19 < 8 || (unint64_t)((char *)a1 - (char *)v11) < 0x20)
    {
      unint64_t v24 = (char *)*a4;
      uint64_t v25 = a1;
      goto LABEL_49;
    }
    if (v19 < 0x20)
    {
      unint64_t v20 = 0;
      goto LABEL_32;
    }
    unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFE0;
    uint32x4_t v33 = a1 + 1;
    unsigned int v34 = v11 + 1;
    unint64_t v35 = v19 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v36 = *v34;
      *(v33 - 1) = *(v34 - 1);
      *uint32x4_t v33 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v19 != v20)
    {
      if ((v19 & 0x18) == 0)
      {
        uint64_t v25 = (char *)a1 + v20;
        unint64_t v24 = (char *)v11 + v20;
        goto LABEL_49;
      }
LABEL_32:
      unint64_t v24 = (char *)v11 + (v19 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v25 = (char *)a1 + (v19 & 0xFFFFFFFFFFFFFFF8);
      int32x2_t v37 = (void *)((char *)a1 + v20);
      int32x2_t v38 = (uint64_t *)((char *)v11 + v20);
      unint64_t v39 = v20 - (v19 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v40 = *v38++;
        *v37++ = v40;
        v39 += 8;
      }
      while (v39);
      if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_53;
      }
      do
      {
LABEL_49:
        char v50 = *v24++;
        *v25++ = v50;
      }
      while (v25 < (unsigned char *)v14);
      goto LABEL_53;
    }
    goto LABEL_53;
  }
  if ((unint64_t)v14 <= v17)
  {
    do
    {
      long long v23 = *v11++;
      *a1++ = v23;
    }
    while (a1 < (_OWORD *)v14);
    goto LABEL_53;
  }
  if (v17 >= (unint64_t)a1)
  {
    unint64_t v26 = *a4;
    uint64_t v27 = a1;
    do
    {
      long long v28 = *v26++;
      *v27++ = v28;
    }
    while ((unint64_t)v27 < v17);
    int32x4_t v22 = (char *)v11 + v17 - (void)a1;
    unint64_t v21 = (_OWORD *)(a2 - 32);
  }
  else
  {
    unint64_t v21 = a1;
    int32x4_t v22 = (char *)*a4;
  }
  if (v21 < (_OWORD *)v14)
  {
    unint64_t v29 = (char *)a1 + v8;
    if ((unint64_t)a1 <= v17) {
      int32x4_t v30 = (char *)(a2 - 32);
    }
    else {
      int32x4_t v30 = (char *)a1;
    }
    unint64_t v31 = v29 - v30;
    if (v31 < 8)
    {
      uint64_t v32 = v21;
      goto LABEL_52;
    }
    if ((unint64_t)((char *)a1 - (char *)v11) < 0x20)
    {
      uint64_t v32 = v21;
      goto LABEL_52;
    }
    if (v31 >= 0x20)
    {
      unint64_t v41 = v31 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v42 = v21 + 1;
      uint64_t v43 = (long long *)((char *)v11 + v30 - (char *)a1 + 16);
      unint64_t v44 = v31 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v45 = *v43;
        *(v42 - 1) = *(v43 - 1);
        *uint64_t v42 = v45;
        v42 += 2;
        v43 += 2;
        v44 -= 32;
      }
      while (v44);
      if (v31 == v41) {
        goto LABEL_53;
      }
      if ((v31 & 0x18) == 0)
      {
        uint64_t v32 = (char *)v21 + v41;
        v22 += v41;
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t v41 = 0;
    }
    v22 += v31 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = (char *)v21 + (v31 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v46 = (void *)((char *)v21 + v41);
    int v47 = (uint64_t *)((char *)v11 + &v30[v41] - (char *)a1);
    unint64_t v48 = v41 - (v31 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v49 = *v47++;
      *v46++ = v49;
      v48 += 8;
    }
    while (v48);
    if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_53;
    }
    do
    {
LABEL_52:
      char v51 = *v22++;
      *v32++ = v51;
    }
    while (v32 < (unsigned char *)v14);
  }
LABEL_53:
  size_t v52 = (char *)v14 - v16;
  *a4 = (long long *)v15;
  unint64_t v53 = a3[2];
  if (v53 <= (char *)v14 - a6)
  {
    uint64_t v54 = a3[1];
    int32x2_t v12 = v52;
    unint64_t v55 = (char *)v14 + v54;
    if (v54 > 7) {
      goto LABEL_66;
    }
    goto LABEL_57;
  }
  if (v53 > (unint64_t)v14 - a7) {
    return -20;
  }
  uint64_t v59 = (char *)(v52 - a6);
  uint64_t v60 = (char *)(a8 + v52 - a6);
  size_t v61 = a3[1];
  if ((unint64_t)&v60[v61] > a8)
  {
    memmove(v14, v60, a6 - v52);
    uint64_t v14 = (void *)((char *)v14 - v59);
    uint64_t v54 = (uint64_t)&v59[a3[1]];
    a3[1] = v54;
    unint64_t v55 = (char *)v14 + v54;
    if (v54 > 7)
    {
LABEL_66:
      if ((unint64_t)((char *)v14 - v12) > 7)
      {
        *uint64_t v14 = *(void *)v12;
        unint64_t v65 = v12 + 8;
        int32x4_t v66 = (char *)(v14 + 1);
        if ((unint64_t)v55 <= v17)
        {
LABEL_68:
          unint64_t v67 = &v66[v54];
          if (v66 - v65 >= 16)
          {
            do
            {
              long long v69 = *(_OWORD *)v65;
              v65 += 16;
              *(_OWORD *)int32x4_t v66 = v69;
              v66 += 16;
            }
            while (v66 < v67);
          }
          else
          {
            do
            {
              uint64_t v68 = *(void *)v65;
              v65 += 8;
              *(void *)int32x4_t v66 = v68;
              v66 += 8;
            }
            while (v66 < v67);
          }
          return v9;
        }
      }
      else
      {
        uint64_t v62 = 4 * ((char *)v14 - v12);
        uint64_t v63 = *(int *)((char *)&ZSTD_overlapCopy8_dec64table + v62);
        *(unsigned char *)uint64_t v14 = *v12;
        *((unsigned char *)v14 + 1) = v12[1];
        *((unsigned char *)v14 + 2) = v12[2];
        *((unsigned char *)v14 + 3) = v12[3];
        uint64_t v64 = &v12[*(unsigned int *)((char *)&ZSTD_overlapCopy8_dec32table + v62)];
        *((_DWORD *)v14 + 1) = *(_DWORD *)v64;
        int32x2_t v12 = &v64[-v63];
        unint64_t v65 = &v64[-v63 + 8];
        int32x4_t v66 = (char *)(v14 + 1);
        if ((unint64_t)v55 <= v17) {
          goto LABEL_68;
        }
      }
      if ((unint64_t)v66 <= v17)
      {
        unint64_t v70 = v17 - (void)v66;
        if (v66 - v65 >= 16)
        {
          long long v83 = (long long *)v65;
          do
          {
            long long v84 = *v83++;
            *(_OWORD *)int32x4_t v66 = v84;
            v66 += 16;
          }
          while ((unint64_t)v66 < v17);
        }
        else
        {
          int32x2_t v71 = (uint64_t *)v65;
          do
          {
            uint64_t v72 = *v71++;
            *(void *)int32x4_t v66 = v72;
            v66 += 8;
          }
          while ((unint64_t)v66 < v17);
        }
        v65 += v70;
        int32x4_t v66 = (char *)v17;
      }
      if (v66 >= v55) {
        return v9;
      }
      long long v85 = (char *)v14 + v54;
      uint64_t v86 = (char *)(v14 + 1);
      if (v17 > (unint64_t)(v14 + 1)) {
        uint64_t v86 = (char *)v17;
      }
      unint64_t v87 = v85 - v86;
      if (v87 < 8)
      {
        int v88 = v66;
        goto LABEL_113;
      }
      if ((unint64_t)((char *)v14 - v12) < 0x20)
      {
        int v88 = v66;
        goto LABEL_113;
      }
      if (v87 >= 0x20)
      {
        unint64_t v89 = v87 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v90 = v66 + 16;
        unint64_t v91 = &v12[v86 - (char *)v14 + 16];
        unint64_t v92 = v87 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v93 = *(_OWORD *)v91;
          *(v90 - 1) = *((_OWORD *)v91 - 1);
          *uint64_t v90 = v93;
          v90 += 2;
          v91 += 32;
          v92 -= 32;
        }
        while (v92);
        if (v87 == v89) {
          return v9;
        }
        if ((v87 & 0x18) == 0)
        {
          int v88 = &v66[v89];
          v65 += v89;
          do
          {
LABEL_113:
            char v99 = *v65++;
            *v88++ = v99;
          }
          while (v88 < v55);
          return v9;
        }
      }
      else
      {
        unint64_t v89 = 0;
      }
      v65 += v87 & 0xFFFFFFFFFFFFFFF8;
      int v88 = &v66[v87 & 0xFFFFFFFFFFFFFFF8];
      int v94 = &v66[v89];
      int v95 = &v12[&v86[v89] - (char *)v14];
      unint64_t v96 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v97 = *(void *)v95;
        v95 += 8;
        *(void *)int v94 = v97;
        v94 += 8;
        v96 += 8;
      }
      while (v96);
      if (v87 == (v87 & 0xFFFFFFFFFFFFFFF8)) {
        return v9;
      }
      goto LABEL_113;
    }
LABEL_57:
    if (v54 < 1) {
      return v9;
    }
    uint64_t v56 = (char *)v14 + v54;
    if ((char *)v14 + v54 <= (char *)v14 + 1) {
      uint64_t v56 = (char *)v14 + 1;
    }
    unint64_t v57 = v56 - (char *)v14;
    if (v57 < 8 || (unint64_t)((char *)v14 - v12) < 0x20)
    {
      int32x2_t v73 = v12;
      unint64_t v74 = (char *)v14;
    }
    else
    {
      if (v57 < 0x20)
      {
        unint64_t v58 = 0;
        goto LABEL_85;
      }
      unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFE0;
      long long v75 = v14 + 2;
      int32x2_t v76 = (long long *)(v12 + 16);
      unint64_t v77 = v57 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v78 = *v76;
        *(v75 - 1) = *(v76 - 1);
        *long long v75 = v78;
        v75 += 2;
        v76 += 2;
        v77 -= 32;
      }
      while (v77);
      if (v57 == v58) {
        return v9;
      }
      if ((v57 & 0x18) != 0)
      {
LABEL_85:
        int32x2_t v73 = &v12[v57 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v74 = (char *)v14 + (v57 & 0xFFFFFFFFFFFFFFF8);
        long long v79 = (void *)((char *)v14 + v58);
        long long v80 = &v12[v58];
        unint64_t v81 = v58 - (v57 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v82 = *(void *)v80;
          v80 += 8;
          *v79++ = v82;
          v81 += 8;
        }
        while (v81);
        if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8)) {
          return v9;
        }
        goto LABEL_110;
      }
      unint64_t v74 = (char *)v14 + v58;
      int32x2_t v73 = &v12[v58];
    }
    do
    {
LABEL_110:
      char v98 = *v73++;
      *v74++ = v98;
    }
    while (v74 < v55);
    return v9;
  }
  memmove(v14, v60, v61);
  return v9;
}

uint64_t COVER_strict_cmp8(unsigned int *a1, unsigned int *a2)
{
  int v2 = *(_DWORD *)(g_coverCtx + 80);
  if (v2 == 8) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = ~(-1 << (8 * v2));
  }
  unint64_t v4 = v3 & *(void *)(*(void *)g_coverCtx + *a1);
  unint64_t v5 = *(void *)(*(void *)g_coverCtx + *a2) & v3;
  BOOL v6 = v4 >= v5;
  unsigned int v7 = v4 > v5;
  if (!v6) {
    unsigned int v7 = -1;
  }
  if (a1 < a2) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 1;
  }
  if (v7) {
    return v7;
  }
  else {
    return v8;
  }
}

uint64_t COVER_strict_cmp(unsigned int *a1, unsigned int *a2)
{
  LODWORD(result) = memcmp((const void *)(*(void *)g_coverCtx + *a1), (const void *)(*(void *)g_coverCtx + *a2), *(unsigned int *)(g_coverCtx + 80));
  if (a1 < a2) {
    unsigned int v5 = -1;
  }
  else {
    unsigned int v5 = 1;
  }
  if (result) {
    return result;
  }
  else {
    return v5;
  }
}

uint64_t COVER_cmp8(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  int v3 = *(_DWORD *)(a1 + 80);
  if (v3 == 8) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = ~(-1 << (8 * v3));
  }
  unint64_t v5 = v4 & *(void *)(*(void *)a1 + *a2);
  unint64_t v6 = *(void *)(*(void *)a1 + *a3) & v4;
  BOOL v7 = v5 >= v6;
  BOOL v8 = v5 > v6;
  if (v7) {
    return v8;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t COVER_cmp(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return memcmp((const void *)(*(void *)a1 + *a2), (const void *)(*(void *)a1 + *a3), *(unsigned int *)(a1 + 80));
}

uint64_t ss_mintrosort(uint64_t result, uint64_t a2, int *a3, unint64_t a4)
{
  v236[48] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a4 - (void)a3;
  if (((a4 - (void)a3) & 0x3FC00) != 0) {
    int v5 = lg_table[(v4 >> 10)] + 8;
  }
  else {
    int v5 = *(_DWORD *)((char *)lg_table + (v4 & 0x3FC));
  }
  LODWORD(v6) = 0;
  uint64_t v7 = result + 2;
  int v8 = 2;
LABEL_5:
  unint64_t v9 = a4 - (void)a3;
  if ((uint64_t)(a4 - (void)a3) > 35) {
    goto LABEL_35;
  }
  uint64_t v6 = (int)v6;
  while (1)
  {
    if ((uint64_t)v9 >= 5)
    {
      unint64_t v10 = (int *)(a4 - 8);
      if (a4 - 8 >= (unint64_t)a3)
      {
        uint64_t v12 = result + v8;
        do
        {
          uint64_t v13 = *v10;
          unsigned int v15 = v10 + 1;
          int v14 = v10[1];
          uint64_t v16 = (int *)(a2 + 4 * v13);
LABEL_15:
          unint64_t v17 = (int *)(a2 + 4 * v14);
          uint64_t v18 = *v16;
          uint64_t v19 = *v17;
          uint64_t v20 = v17[1];
          unint64_t v21 = (unsigned __int8 *)(v12 + v18);
          int32x4_t v22 = (unsigned __int8 *)(v12 + v19);
          unint64_t v23 = v7 + v16[1];
          unint64_t v24 = v7 + v20;
          int v25 = v12 + v19 < (unint64_t)(v7 + v20);
          BOOL v26 = v12 + v18 < v23;
          if (v12 + v18 >= v23 || (unint64_t)v22 >= v24)
          {
LABEL_20:
            if (!v26)
            {
              int v30 = v25 << 31 >> 31;
              goto LABEL_33;
            }
            if (!v25) {
              goto LABEL_24;
            }
            int v28 = *v21;
            int v29 = *v22;
          }
          else
          {
            uint64_t v32 = v12;
            while (1)
            {
              int v28 = *(unsigned __int8 *)(v32 + v18);
              int v29 = *(unsigned __int8 *)(v32 + v19);
              if (v28 != v29) {
                break;
              }
              unint64_t v21 = (unsigned __int8 *)(++v32 + v18);
              int32x4_t v22 = (unsigned __int8 *)(v32 + v19);
              int v25 = v32 + v19 < v24;
              BOOL v26 = v32 + v18 < v23;
              if (v32 + v18 >= v23 || (unint64_t)v22 >= v24) {
                goto LABEL_20;
              }
            }
          }
          int v30 = v28 - v29;
          if (v30 >= 1)
          {
LABEL_24:
            ++v15;
            while (1)
            {
              *(v15 - 2) = v14;
              if ((unint64_t)v15 >= a4) {
                goto LABEL_13;
              }
              int v31 = *v15++;
              int v14 = v31;
              if ((v31 & 0x80000000) == 0)
              {
                --v15;
                goto LABEL_15;
              }
            }
          }
LABEL_33:
          if (!v30) {
            int *v15 = ~v14;
          }
LABEL_13:
          *(v15 - 1) = v13;
          --v10;
        }
        while (v10 >= a3);
      }
    }
    if (!v6) {
      return result;
    }
    --v6;
    uint64_t v11 = &v236[3 * v6];
    a3 = (int *)*v11;
    a4 = v11[1];
    int v8 = *((_DWORD *)v11 + 4);
    unint64_t v9 = a4 - (void)a3;
    if ((uint64_t)(a4 - (void)a3) >= 36)
    {
      int v5 = HIDWORD(v236[3 * v6 + 2]);
LABEL_35:
      unint64_t v33 = v9 >> 2;
      uint64_t v34 = result + v8;
      if (!v5)
      {
        uint64_t v35 = v9 >> 2;
        if ((v9 & 4) == 0)
        {
          LODWORD(v35) = v33 - 1;
          int v36 = (int)v33 >= 1 ? v33 - 1 : v9 >> 2;
          uint64_t v37 = a3[v36 >> 1];
          uint64_t v38 = a3[(int)v35];
          if (*(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v37)) < *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v38)))
          {
            a3[(int)v35] = v37;
            a3[(uint64_t)v36 >> 1] = v38;
          }
        }
        if ((int)v35 >= 2)
        {
          uint64_t v39 = v35 >> 1;
          do
          {
            uint64_t v41 = a3[(v39 - 1)];
            int v42 = (2 * (v39 - 1)) | 1;
            if (v42 >= (int)v35)
            {
              int v40 = v39 - 1;
            }
            else
            {
              unsigned int v43 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v41));
              int v44 = 2 * (v39 - 1);
              int v45 = v39 - 1;
              while (1)
              {
                int v40 = v44 + 2;
                unsigned int v46 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v42]));
                unsigned int v47 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v40]));
                unsigned int v48 = v46 <= v47
                    ? *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v40]))
                    : *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v42]));
                if (v48 <= v43) {
                  break;
                }
                if (v46 >= v47) {
                  int v40 = v42;
                }
                a3[v45] = a3[v40];
                int v44 = 2 * v40;
                int v42 = (2 * v40) | 1;
                int v45 = v40;
                if (v42 >= (int)v35) {
                  goto LABEL_45;
                }
              }
              int v40 = v45;
            }
LABEL_45:
            a3[v40] = v41;
            BOOL v81 = v39-- <= 1;
          }
          while (!v81);
        }
        if ((v9 & 4) == 0)
        {
          uint64_t v49 = (int)v35;
          int v50 = *a3;
          *a3 = a3[v49];
          a3[v49] = v50;
          uint64_t v51 = *a3;
          if ((int)v35 < 2)
          {
            int v60 = 0;
          }
          else
          {
            int v52 = 0;
            int v53 = 0;
            unsigned int v54 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v51));
            int v55 = 1;
            while (1)
            {
              int v56 = v52 + 2;
              unsigned int v57 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v55]));
              unsigned int v58 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v56]));
              unsigned int v59 = v57 <= v58
                  ? *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v56]))
                  : *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v55]));
              if (v59 <= v54) {
                break;
              }
              if (v57 >= v58) {
                int v60 = v55;
              }
              else {
                int v60 = v56;
              }
              a3[v53] = a3[v60];
              int v52 = 2 * v60;
              int v55 = (2 * v60) | 1;
              int v53 = v60;
              if (v55 >= (int)v35) {
                goto LABEL_71;
              }
            }
            int v60 = v53;
          }
LABEL_71:
          a3[v60] = v51;
        }
        if ((int)v35 > 1)
        {
          uint64_t v35 = v35;
          do
          {
            int v62 = *a3;
            uint64_t v63 = a3[(v35 - 1)];
            *a3 = v63;
            if ((v35 - 1) < 2)
            {
              int v61 = 0;
            }
            else
            {
              int v64 = 0;
              int v65 = 0;
              unsigned int v66 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v63));
              int v67 = 1;
              while (1)
              {
                int v68 = v64 + 2;
                unsigned int v69 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v67]));
                unsigned int v70 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v68]));
                unsigned int v71 = v69 <= v70
                    ? *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v68]))
                    : *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v67]));
                if (v71 <= v66) {
                  break;
                }
                if (v69 >= v70) {
                  int v61 = v67;
                }
                else {
                  int v61 = v68;
                }
                a3[v65] = a3[v61];
                int v64 = 2 * v61;
                int v67 = (2 * v61) | 1;
                int v65 = v61;
                if (v67 >= (int)v35 - 1) {
                  goto LABEL_75;
                }
              }
              int v61 = v65;
            }
LABEL_75:
            a3[v61] = v63;
            a3[(v35 - 1)] = v62;
            BOOL v81 = v35-- <= 2;
          }
          while (!v81);
        }
      }
      if (v5 < 1)
      {
        long long v83 = (char *)(a3 + 1);
        uint64_t v84 = *(int *)(a2 + 4 * *a3);
        uint64_t v85 = *(unsigned __int8 *)(v34 + v84);
        if ((unint64_t)(a3 + 1) >= a4) {
          goto LABEL_117;
        }
        uint64_t v86 = a3 + 1;
        while (1)
        {
          uint64_t v88 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *(int *)v83));
          if (v85 != v88) {
            break;
          }
          unint64_t v87 = a3;
          uint64_t v88 = v85;
LABEL_112:
          v83 += 4;
          ++v86;
          uint64_t v85 = v88;
          a3 = v87;
          if ((unint64_t)v83 >= a4) {
            goto LABEL_116;
          }
        }
        unint64_t v87 = (int *)v83;
        if ((char *)v86 - (char *)a3 <= 4) {
          goto LABEL_112;
        }
        unint64_t v87 = a3;
        LODWORD(v88) = v85;
LABEL_116:
        LODWORD(v84) = *(_DWORD *)(a2 + 4 * *v87);
        a3 = v87;
        LODWORD(v85) = v88;
LABEL_117:
        if ((int)v85 <= *(unsigned __int8 *)(v34 + (int)v84 - 1))
        {
          uint64_t v90 = (char *)a3;
        }
        else
        {
          unint64_t v89 = v83;
          uint64_t v90 = (char *)a3;
          if (a3 >= (int *)v83) {
            goto LABEL_121;
          }
          do
          {
LABEL_119:
            uint64_t v91 = *(int *)v90;
            if (*(_DWORD *)(a2 + 4 * v91) + v8 <= *(_DWORD *)(a2 + 4 * ((int)v91 + 1))) {
              break;
            }
            *(_DWORD *)uint64_t v90 = ~v91;
            v90 += 4;
          }
          while (v90 < v89);
LABEL_121:
          while (1)
          {
            v89 -= 4;
            if (v90 >= v89) {
              break;
            }
            uint64_t v92 = *(int *)v89;
            if (*(_DWORD *)(a2 + 4 * v92) + v8 > *(_DWORD *)(a2 + 4 * ((int)v92 + 1)))
            {
              *(_DWORD *)unint64_t v89 = *(_DWORD *)v90;
              *(_DWORD *)uint64_t v90 = ~v92;
              v90 += 4;
              if (v90 < v89) {
                goto LABEL_119;
              }
            }
          }
          if (v90 > (char *)a3) {
            *a3 = ~*a3;
          }
        }
        uint64_t v124 = v83 - v90;
        uint64_t v125 = (v83 - v90) >> 2;
        if (v125 <= (uint64_t)(a4 - (void)v83) >> 2)
        {
          int v5 = -1;
          a3 = (int *)v83;
          if (v124 < 5) {
            goto LABEL_5;
          }
          uint64_t v128 = (char **)&v236[3 * (int)v6];
          char *v128 = v83;
          v128[1] = (char *)a4;
          LODWORD(v6) = v6 + 1;
          *((_DWORD *)v128 + 4) = v8;
          *((_DWORD *)v128 + 5) = -1;
LABEL_195:
          ++v8;
          if ((v124 & 0x3FC00) != 0) {
            int v5 = lg_table[BYTE1(v125)] + 8;
          }
          else {
            int v5 = *(_DWORD *)((char *)lg_table + (v124 & 0x3FC));
          }
          a3 = (int *)v90;
          a4 = (unint64_t)v83;
        }
        else
        {
          if ((uint64_t)(a4 - (void)v83) < 5) {
            goto LABEL_195;
          }
          unint64_t v126 = (char **)&v236[3 * (int)v6];
          long long *v126 = v90;
          v126[1] = v83;
          *((_DWORD *)v126 + 4) = v8 + 1;
          if ((v124 & 0x3FC00) != 0) {
            int v127 = lg_table[BYTE1(v125)] + 8;
          }
          else {
            int v127 = *(_DWORD *)((char *)lg_table + (v124 & 0x3FC));
          }
          int v233 = v6;
          LODWORD(v6) = v6 + 1;
          HIDWORD(v236[3 * v233 + 2]) = v127;
          int v5 = -1;
          a3 = (int *)v83;
        }
      }
      else
      {
        if ((v33 & 0x80000000) == 0) {
          int v72 = v9 >> 2;
        }
        else {
          int v72 = v33 + 1;
        }
        int32x2_t v73 = &a3[v72 >> 1];
        if ((int)v33 > 512)
        {
          uint64_t v93 = v33 >> 3;
          int v94 = &a3[v93];
          uint64_t v95 = (2 * v93);
          uint64_t v74 = *a3;
          unsigned int v96 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v74));
          unsigned int v97 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v94));
          if (v96 <= v97) {
            int v98 = *v94;
          }
          else {
            int v98 = *a3;
          }
          if (v96 <= v97) {
            char v99 = &a3[v93];
          }
          else {
            char v99 = a3;
          }
          unsigned int v100 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v98));
          unsigned int v101 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * a3[v95]));
          if (v100 > v101)
          {
            if (v96 <= v97) {
              int v102 = *a3;
            }
            else {
              int v102 = *v94;
            }
            if (v96 <= v97) {
              int v94 = a3;
            }
            if (*(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v102)) <= v101) {
              char v99 = &a3[v95];
            }
            else {
              char v99 = v94;
            }
          }
          int32x2_t v103 = &v73[v93];
          unsigned int v104 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v73[-v93]));
          unsigned int v105 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v73));
          if (v104 <= v105) {
            int v106 = *v73;
          }
          else {
            int v106 = v73[-v93];
          }
          if (v104 <= v105) {
            uint64_t v107 = v73;
          }
          else {
            uint64_t v107 = &v73[-v93];
          }
          unsigned int v108 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v106));
          unsigned int v109 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v103));
          if (v108 > v109)
          {
            if (v104 <= v105) {
              int v110 = v73[-v93];
            }
            else {
              int v110 = *v73;
            }
            if (v104 <= v105) {
              v73 -= v93;
            }
            if (*(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v110)) <= v109) {
              uint64_t v107 = v103;
            }
            else {
              uint64_t v107 = v73;
            }
          }
          unsigned int v111 = (int *)(a4 - 4 - 4 * v95);
          unsigned int v112 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v111));
          int32x4_t v113 = (int *)(a4 - 4 - 4 * v93);
          unsigned int v114 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v113));
          if (v112 <= v114) {
            int v115 = *v113;
          }
          else {
            int v115 = *v111;
          }
          unsigned int v116 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v115));
          if (v112 <= v114) {
            uint32x4_t v117 = v113;
          }
          else {
            uint32x4_t v117 = v111;
          }
          unsigned int v118 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *(int *)(a4 - 4)));
          if (v116 > v118)
          {
            if (v112 <= v114) {
              int v119 = *v111;
            }
            else {
              int v119 = *v113;
            }
            if (v112 > v114) {
              unsigned int v111 = v113;
            }
            if (*(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v119)) <= v118) {
              uint32x4_t v117 = (int *)(a4 - 4);
            }
            else {
              uint32x4_t v117 = v111;
            }
            unsigned int v116 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v117));
          }
          unsigned int v120 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v99));
          unsigned int v121 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v107));
          if (v120 <= v121) {
            int v122 = *v107;
          }
          else {
            int v122 = *v99;
          }
          if (v120 <= v121) {
            long long v79 = v107;
          }
          else {
            long long v79 = v99;
          }
          if (*(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v122)) > v116)
          {
            if (v120 <= v121) {
              int v123 = *v99;
            }
            else {
              int v123 = *v107;
            }
            if (v120 > v121) {
              char v99 = v107;
            }
            if (*(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v123)) <= v116) {
              long long v79 = v117;
            }
            else {
              long long v79 = v99;
            }
          }
        }
        else if ((int)v33 > 32)
        {
          uint64_t v129 = (v9 >> 4) & 0x3FFFFFFF;
          int v130 = &a3[v129];
          uint64_t v131 = a3[v129];
          unsigned int v132 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v131));
          uint64_t v133 = (int *)(a4 - 4 - v129 * 4);
          unsigned int v134 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v73));
          BOOL v135 = v132 > v134;
          if (v132 <= v134)
          {
            unsigned int v136 = v130;
          }
          else
          {
            LODWORD(v131) = *v73;
            unsigned int v136 = v73;
          }
          if (!v135) {
            int v130 = v73;
          }
          uint64_t v137 = *v133;
          unsigned int v138 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v137));
          unsigned int v139 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *(int *)(a4 - 4)));
          if (v138 <= v139)
          {
            uint64_t v140 = v133;
          }
          else
          {
            LODWORD(v137) = *(_DWORD *)(a4 - 4);
            uint64_t v140 = (int *)(a4 - 4);
          }
          if (v138 <= v139) {
            uint64_t v133 = (int *)(a4 - 4);
          }
          unsigned int v141 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * (int)v131));
          unsigned int v142 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * (int)v137));
          BOOL v143 = v141 > v142;
          if (v141 <= v142) {
            uint64_t v144 = v130;
          }
          else {
            uint64_t v144 = v133;
          }
          if (v143) {
            uint64_t v145 = v136;
          }
          else {
            uint64_t v145 = v140;
          }
          unsigned int v146 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *a3));
          if (v143) {
            uint64_t v133 = v130;
          }
          uint64_t v147 = *v144;
          unsigned int v148 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v147));
          BOOL v149 = v146 > v148;
          if (v146 <= v148) {
            LODWORD(v147) = *a3;
          }
          unsigned int v150 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * (int)v147));
          if (v146 <= v148) {
            uint64_t v151 = a3;
          }
          else {
            uint64_t v151 = v144;
          }
          if (v149) {
            uint64_t v144 = a3;
          }
          if (v150 > *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v145)))
          {
            unsigned int v152 = v151;
          }
          else
          {
            uint64_t v133 = v144;
            unsigned int v152 = v145;
          }
          if (*(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v133)) <= *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v152))) {
            long long v79 = v133;
          }
          else {
            long long v79 = v152;
          }
          LODWORD(v74) = *a3;
        }
        else
        {
          uint64_t v74 = *a3;
          unsigned int v75 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v74));
          unsigned int v76 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v73));
          if (v75 <= v76) {
            int v77 = *v73;
          }
          else {
            int v77 = *a3;
          }
          unsigned int v78 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v77));
          if (v75 <= v76) {
            long long v79 = v73;
          }
          else {
            long long v79 = a3;
          }
          unsigned int v80 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *(int *)(a4 - 4)));
          if (v78 > v80)
          {
            BOOL v81 = v75 > v76;
            if (v75 <= v76) {
              int v82 = *a3;
            }
            else {
              int v82 = *v73;
            }
            if (!v81) {
              int32x2_t v73 = a3;
            }
            if (*(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v82)) <= v80) {
              long long v79 = (int *)(a4 - 4);
            }
            else {
              long long v79 = v73;
            }
          }
        }
        uint64_t v153 = *v79;
        unsigned int v154 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v153));
        *a3 = v153;
        int v155 = a3 + 1;
        *long long v79 = v74;
        unsigned int j = a3 + 1;
        if ((unint64_t)(a3 + 1) >= a4) {
          goto LABEL_232;
        }
        while (1)
        {
          unsigned int v157 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v155));
          if (v157 != v154) {
            break;
          }
          unsigned int j = ++v155;
          if ((unint64_t)v155 >= a4) {
            goto LABEL_232;
          }
        }
        if (v157 >= v154)
        {
          unsigned int j = v155;
          unint64_t v158 = (int *)(a4 - 4);
          unsigned int i = (int *)(a4 - 4);
          if ((unint64_t)v155 < a4 - 4)
          {
LABEL_233:
            while (1)
            {
              unsigned int v160 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * *v158));
              if (v160 != v154) {
                break;
              }
              unsigned int i = --v158;
              if (j >= v158) {
                goto LABEL_263;
              }
            }
            if (v160 > v154)
            {
              for (unsigned int i = v158 - 1; j < i; --i)
              {
                uint64_t v163 = *i;
                unsigned int v164 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v163));
                if (v164 < v154) {
                  break;
                }
                if (v164 == v154)
                {
                  *unsigned int i = *v158;
                  *v158-- = v163;
                }
              }
            }
            else
            {
              unsigned int i = v158;
            }
          }
        }
        else
        {
          for (unsigned int j = v155 + 1; (unint64_t)j < a4; ++j)
          {
            uint64_t v161 = *j;
            unsigned int v162 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v161));
            if (v162 > v154) {
              break;
            }
            if (v162 == v154)
            {
              *unsigned int j = *v155;
              *v155++ = v161;
            }
          }
LABEL_232:
          unint64_t v158 = (int *)(a4 - 4);
          unsigned int i = (int *)(a4 - 4);
          if ((unint64_t)j < a4 - 4) {
            goto LABEL_233;
          }
        }
LABEL_263:
        while (j < i)
        {
          int v165 = *j;
          *j++ = *i;
          *unsigned int i = v165;
          while (j < i)
          {
            uint64_t v166 = *j;
            unsigned int v167 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v166));
            if (v167 > v154) {
              break;
            }
            if (v167 == v154)
            {
              *unsigned int j = *v155;
              *v155++ = v166;
            }
            ++j;
          }
          while (j < --i)
          {
            uint64_t v168 = *i;
            unsigned int v169 = *(unsigned __int8 *)(v34 + *(int *)(a2 + 4 * v168));
            if (v169 < v154) {
              break;
            }
            if (v169 == v154)
            {
              *unsigned int i = *v158;
              *v158-- = v168;
            }
          }
        }
        if (v155 <= v158)
        {
          unint64_t v174 = (unint64_t)((char *)v155 - (char *)a3) >> 2;
          uint64_t v175 = j - v155;
          if ((int)v174 >= (int)v175) {
            uint64_t v176 = v175;
          }
          else {
            uint64_t v176 = v174;
          }
          uint64_t v177 = (v176 - 1);
          if ((int)v176 >= 1)
          {
            unint64_t v178 = &j[-v176];
            if (v176 < 8)
            {
              int v179 = a3;
LABEL_292:
              unsigned int v190 = v176 + 1;
              do
              {
                int v191 = *v179;
                *v179++ = *v178;
                *v178++ = v191;
                --v190;
              }
              while (v190 > 1);
              goto LABEL_294;
            }
            BOOL v181 = a3 >= &j[v177 - v176 + 1] || v178 >= &a3[v177 + 1];
            int v179 = a3;
            if (!v181) {
              goto LABEL_292;
            }
            uint64_t v182 = v176 & 0xFFFFFFF8;
            unint64_t v178 = (int *)((char *)v178 + v182 * 4);
            int v179 = &a3[v182];
            int v183 = (long long *)(a3 + 4);
            unint64_t v184 = &j[-v176 + 4];
            uint64_t v185 = v176 & 0xFFFFFFF8;
            do
            {
              long long v186 = *(v183 - 1);
              long long v187 = *v183;
              long long v188 = *(_OWORD *)v184;
              *(v183 - 1) = *((_OWORD *)v184 - 1);
              *int v183 = v188;
              *((_OWORD *)v184 - 1) = v186;
              *(_OWORD *)unint64_t v184 = v187;
              v183 += 2;
              v184 += 8;
              v185 -= 8;
            }
            while (v185);
            BOOL v189 = (v176 & 0x7FFFFFF8) == v176;
            LODWORD(v176) = v176 - (v176 & 0xFFFFFFF8);
            if (!v189) {
              goto LABEL_292;
            }
          }
LABEL_294:
          uint64_t v192 = v158 - (j - 1);
          int v193 = ((a4 - (unint64_t)v158) >> 2) - 1;
          if (v193 >= (int)v192) {
            uint64_t v194 = v192;
          }
          else {
            uint64_t v194 = v193;
          }
          uint64_t v195 = (v194 - 1);
          if ((int)v194 < 1) {
            goto LABEL_311;
          }
          unint64_t v196 = (int *)(a4 - 4 * v194);
          if (v194 >= 8
            && ((unint64_t)j < a4 + 4 * (v195 - v194) + 4
              ? (BOOL v197 = v196 >= &j[v195 + 1])
              : (BOOL v197 = 1),
                v197))
          {
            int v198 = v194 - (v194 & 0xFFFFFFF8);
            uint64_t v199 = v194 & 0xFFFFFFF8;
            unint64_t v196 = (int *)((char *)v196 + v199 * 4);
            unsigned int v200 = &j[v199];
            unint64_t v201 = (long long *)(j + 4);
            uint64_t v202 = (long long *)(a4 - 4 * v194 + 16);
            uint64_t v203 = v194 & 0xFFFFFFF8;
            do
            {
              long long v204 = *(v201 - 1);
              long long v205 = *v201;
              long long v206 = *v202;
              *(v201 - 1) = *(v202 - 1);
              *unint64_t v201 = v206;
              *(v202 - 1) = v204;
              long long *v202 = v205;
              v201 += 2;
              v202 += 2;
              v203 -= 8;
            }
            while (v203);
            if ((v194 & 0x7FFFFFF8) == v194) {
              goto LABEL_311;
            }
          }
          else
          {
            int v198 = v194;
            unsigned int v200 = j;
          }
          unsigned int v207 = v198 + 1;
          do
          {
            int v208 = *v200;
            *v200++ = *v196;
            *v196++ = v208;
            --v207;
          }
          while (v207 > 1);
LABEL_311:
          uint64_t v209 = &a3[v175];
          unint64_t v210 = a4 - 4 * v192;
          unsigned int v211 = *(unsigned __int8 *)(*(int *)(a2 + 4 * *v209) + v34 - 1);
          unint64_t v212 = v209;
          if (v154 > v211)
          {
            int v213 = (int *)(a4 - 4 * v192);
            unint64_t v212 = &a3[v175];
            if ((unint64_t)v209 >= v210) {
              goto LABEL_315;
            }
            do
            {
LABEL_313:
              uint64_t v214 = *v212;
              if (*(_DWORD *)(a2 + 4 * v214) + v8 <= *(_DWORD *)(a2 + 4 * ((int)v214 + 1))) {
                break;
              }
              *v212++ = ~v214;
            }
            while (v212 < v213);
LABEL_315:
            while (v212 < --v213)
            {
              uint64_t v215 = *v213;
              if (*(_DWORD *)(a2 + 4 * v215) + v8 > *(_DWORD *)(a2 + 4 * ((int)v215 + 1)))
              {
                *int v213 = *v212;
                *v212++ = ~v215;
                if (v212 < v213) {
                  goto LABEL_313;
                }
              }
            }
            if (v212 > v209) {
              int *v209 = ~*v209;
            }
          }
          --v5;
          __int16 v216 = v210 - (_WORD)v212;
          uint64_t v217 = (uint64_t)(v210 - (void)v212) >> 2;
          if (v175 <= v192)
          {
            unint64_t v223 = &v236[3 * (int)v6];
            if (v192 <= v217)
            {
              void *v223 = v212;
              v223[1] = v210;
              *((_DWORD *)v223 + 4) = v8 + 1;
              if (((v210 - v212) & 0x3FC00) != 0) {
                int v230 = lg_table[BYTE1(v217)] + 8;
              }
              else {
                int v230 = *(_DWORD *)((char *)lg_table + (v216 & 0x3FC));
              }
              int v235 = &v236[3 * (int)v6];
              *((_DWORD *)v235 + 5) = v230;
              v235[3] = v210;
              v235[4] = a4;
              LODWORD(v6) = v6 + 2;
              *((_DWORD *)v235 + 10) = v8;
              *((_DWORD *)v235 + 11) = v5;
              a4 = (unint64_t)&a3[v175];
            }
            else
            {
              void *v223 = v210;
              v223[1] = a4;
              uint64_t v224 = (int)v6 + 1;
              *((_DWORD *)v223 + 4) = v8;
              *((_DWORD *)v223 + 5) = v5;
              uint64_t v225 = (int **)(v223 + 3);
              uint64_t v226 = v223 + 4;
              if (v175 > v217)
              {
                *uint64_t v225 = a3;
                void *v226 = v209;
                unint64_t v227 = &v236[3 * v224];
                LODWORD(v6) = v6 + 2;
                *((_DWORD *)v227 + 4) = v8;
                *((_DWORD *)v227 + 5) = v5;
                ++v8;
                if (((v210 - v212) & 0x3FC00) != 0) {
                  goto LABEL_325;
                }
                goto LABEL_329;
              }
              *uint64_t v225 = v212;
              void *v226 = v210;
              LODWORD(v236[3 * v224 + 2]) = v8 + 1;
              if (((v210 - v212) & 0x3FC00) != 0) {
                int v232 = lg_table[BYTE1(v217)] + 8;
              }
              else {
                int v232 = *(_DWORD *)((char *)lg_table + (v216 & 0x3FC));
              }
              LODWORD(v6) = v6 + 2;
              HIDWORD(v236[3 * v224 + 2]) = v232;
              a4 = (unint64_t)&a3[v175];
            }
          }
          else if (v175 <= v217)
          {
            unint64_t v228 = (int **)&v236[3 * (int)v6];
            *unint64_t v228 = v212;
            v228[1] = (int *)v210;
            *((_DWORD *)v228 + 4) = v8 + 1;
            if (((v210 - v212) & 0x3FC00) != 0) {
              int v229 = lg_table[BYTE1(v217)] + 8;
            }
            else {
              int v229 = *(_DWORD *)((char *)lg_table + (v216 & 0x3FC));
            }
            int v234 = &v236[3 * (int)v6];
            *((_DWORD *)v234 + 5) = v229;
            v234[3] = a3;
            v234[4] = v209;
            LODWORD(v6) = v6 + 2;
            *((_DWORD *)v234 + 10) = v8;
            *((_DWORD *)v234 + 11) = v5;
            a3 = (int *)(a4 - 4 * v192);
          }
          else
          {
            unsigned int v218 = (int **)&v236[3 * (int)v6];
            *unsigned int v218 = a3;
            v218[1] = v209;
            uint64_t v219 = (int)v6 + 1;
            *((_DWORD *)v218 + 4) = v8;
            *((_DWORD *)v218 + 5) = v5;
            uint64_t v220 = v218 + 3;
            unint64_t v221 = (unint64_t *)(v218 + 4);
            if (v192 > v217)
            {
              *uint64_t v220 = v210;
              *unint64_t v221 = a4;
              unsigned int v222 = &v236[3 * v219];
              LODWORD(v6) = v6 + 2;
              *((_DWORD *)v222 + 4) = v8;
              *((_DWORD *)v222 + 5) = v5;
              ++v8;
              if (((v210 - v212) & 0x3FC00) != 0)
              {
LABEL_325:
                int v5 = lg_table[BYTE1(v217)] + 8;
LABEL_330:
                a3 = v212;
                a4 = v210;
                goto LABEL_5;
              }
LABEL_329:
              int v5 = *(_DWORD *)((char *)lg_table + (v216 & 0x3FC));
              goto LABEL_330;
            }
            *uint64_t v220 = v212;
            *unint64_t v221 = v210;
            LODWORD(v236[3 * v219 + 2]) = v8 + 1;
            if (((v210 - v212) & 0x3FC00) != 0) {
              int v231 = lg_table[BYTE1(v217)] + 8;
            }
            else {
              int v231 = *(_DWORD *)((char *)lg_table + (v216 & 0x3FC));
            }
            LODWORD(v6) = v6 + 2;
            HIDWORD(v236[3 * v219 + 2]) = v231;
            a3 = (int *)(a4 - 4 * v192);
          }
        }
        else
        {
          if (*(unsigned __int8 *)(*(int *)(a2 + 4 * *a3) + v34 - 1) >= v154)
          {
            uint64_t v171 = a3;
          }
          else
          {
            uint64_t v170 = (int *)a4;
            uint64_t v171 = a3;
            if ((unint64_t)a3 >= a4) {
              goto LABEL_269;
            }
            do
            {
LABEL_267:
              uint64_t v172 = *v171;
              if (*(_DWORD *)(a2 + 4 * v172) + v8 <= *(_DWORD *)(a2 + 4 * ((int)v172 + 1))) {
                break;
              }
              *v171++ = ~v172;
            }
            while (v171 < v170);
LABEL_269:
            while (v171 < --v170)
            {
              uint64_t v173 = *v170;
              if (*(_DWORD *)(a2 + 4 * v173) + v8 > *(_DWORD *)(a2 + 4 * ((int)v173 + 1)))
              {
                int *v170 = *v171;
                *v171++ = ~v173;
                if (v171 < v170) {
                  goto LABEL_267;
                }
              }
            }
            if (v171 > a3) {
              *a3 = ~*a3;
            }
            unint64_t v180 = a4 - (void)v171;
            if (((a4 - (void)v171) & 0x3FC00) != 0) {
              int v5 = lg_table[(v180 >> 10)] + 8;
            }
            else {
              int v5 = *(_DWORD *)((char *)lg_table + (v180 & 0x3FC));
            }
          }
          ++v8;
          a3 = v171;
        }
      }
      goto LABEL_5;
    }
  }
}

uint64_t ss_swapmerge(uint64_t result, uint64_t a2, int *a3, int *a4, char *a5, unint64_t a6, int a7)
{
  LODWORD(v7) = 0;
  LOBYTE(v8) = 0;
  uint64_t v322 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a7;
  unint64_t v10 = a6 - 4;
  uint64_t v11 = result + 2;
  unint64_t v12 = a6 + 4;
  uint64_t v13 = (int *)(a5 + 4);
  int v14 = a4;
  unint64_t v15 = a5 - (char *)a4;
  uint64_t v16 = (a5 - (char *)a4) >> 2;
  if (v16 > v9)
  {
    while (1)
    {
LABEL_65:
      unint64_t v90 = (char *)v14 - (char *)a3;
      uint64_t v91 = v14 - a3;
      if (v91 <= v9)
      {
        if (a3 >= v14) {
          goto LABEL_271;
        }
        unint64_t v153 = v90 >> 2;
        if ((int)(v90 >> 2) >= 1)
        {
          unint64_t v154 = (v90 >> 2);
          if (v154 < 8
            || (uint64_t v155 = (v90 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL, (unint64_t)a3 + v155 + 4 > a6)
            && (unint64_t)a3 < v12 + v155)
          {
            uint64_t v156 = a3;
            unsigned int v157 = (int *)a6;
            goto LABEL_133;
          }
          uint64_t v245 = (v90 >> 2) & 7;
          unint64_t v246 = v154 - v245;
          LODWORD(v153) = v153 - (v154 - v245);
          uint64_t v247 = v154 - v245;
          uint64_t v156 = &a3[v247];
          unsigned int v157 = (int *)(a6 + v247 * 4);
          unint64_t v248 = (long long *)(a3 + 4);
          uint64_t v249 = (long long *)(a6 + 16);
          do
          {
            long long v250 = *(v249 - 1);
            long long v251 = *v249;
            long long v252 = *v248;
            *(v249 - 1) = *(v248 - 1);
            *uint64_t v249 = v252;
            *(v248 - 1) = v250;
            long long *v248 = v251;
            v249 += 2;
            v248 += 2;
            v246 -= 8;
          }
          while (v246);
          if (v245)
          {
LABEL_133:
            unsigned int v158 = v153 + 1;
            do
            {
              int v159 = *v157;
              *v157++ = *v156;
              *v156++ = v159;
              --v158;
            }
            while (v158 > 1);
          }
        }
        unsigned int v160 = (int *)(v10 + 4 * v91);
        int v161 = *a3;
        unsigned int v162 = a3;
        uint64_t v163 = (int *)a6;
        while (1)
        {
          uint64_t v164 = *v163;
          int v165 = (int *)(a2 + 4 * v164);
          uint64_t v166 = *v14;
          unsigned int v167 = (int *)(a2 + 4 * v166);
          uint64_t v168 = *v165;
          uint64_t v170 = *v167;
          uint64_t v169 = v167[1];
          uint64_t v171 = (unsigned __int8 *)(v11 + v168);
          uint64_t v172 = (unsigned __int8 *)(v11 + v170);
          unint64_t v173 = v11 + v165[1];
          unint64_t v174 = v11 + v169;
          int v175 = v11 + v170 < (unint64_t)(v11 + v169);
          BOOL v176 = v11 + v168 < v173;
          if (v11 + v168 < v173 && (unint64_t)v172 < v174)
          {
            uint64_t v178 = result;
            do
            {
              uint64_t v179 = v178 + v170;
              int v180 = *(unsigned __int8 *)(v178 + v168 + 2);
              int v181 = *(unsigned __int8 *)(v178 + v170 + 2);
              if (v180 != v181) {
                goto LABEL_148;
              }
              unint64_t v182 = v178 + v168 + 3;
              unint64_t v183 = v179 + 3;
              int v175 = v179 + 3 < v174;
              ++v178;
              BOOL v176 = v182 < v173;
            }
            while (v182 < v173 && v183 < v174);
            uint64_t v172 = (unsigned __int8 *)(v178 + v170 + 2);
            uint64_t v171 = (unsigned __int8 *)(v178 + v168 + 2);
          }
          if (v176)
          {
            if (!v175) {
              goto LABEL_150;
            }
            int v180 = *v171;
            int v181 = *v172;
LABEL_148:
            int v184 = v180 - v181;
            if (v184 < 0) {
              goto LABEL_155;
            }
          }
          else
          {
            int v184 = v175 << 31 >> 31;
            if (v184 < 0)
            {
              do
              {
LABEL_155:
                *unsigned int v162 = v164;
                if (v160 <= v163) {
                  goto LABEL_270;
                }
                int v188 = v162[1];
                ++v162;
                BOOL v189 = v163 + 1;
                LODWORD(v164) = v163[1];
                *v163++ = v188;
              }
              while ((v164 & 0x80000000) != 0);
              uint64_t v163 = v189;
              continue;
            }
          }
          if (v184)
          {
LABEL_150:
            uint64_t v185 = v162 + 1;
            long long v186 = (char *)(v14 + 1);
            do
            {
              *(v185 - 1) = v166;
              *((_DWORD *)v186 - 1) = *v185;
              if (v186 >= a5)
              {
                if (v163 >= v160) {
                  goto LABEL_268;
                }
                int v235 = v185;
                do
                {
                  int v236 = v235[1];
                  ++v235;
                  *uint64_t v185 = *v163;
                  *v163++ = v236;
                  uint64_t v185 = v235;
                }
                while (v163 < v160);
                goto LABEL_269;
              }
              int v187 = *(_DWORD *)v186;
              v186 += 4;
              LODWORD(v166) = v187;
              ++v185;
            }
            while (v187 < 0);
            unsigned int v162 = v185 - 1;
            int v14 = (int *)(v186 - 4);
            continue;
          }
          *int v14 = ~v166;
          int v190 = *v163;
          int v191 = v163;
          do
          {
            *unsigned int v162 = v190;
            if (v160 <= v191) {
              goto LABEL_270;
            }
            int v192 = v162[1];
            ++v162;
            uint64_t v163 = v191 + 1;
            int v190 = v191[1];
            *v191++ = v192;
          }
          while (v190 < 0);
          uint64_t v193 = 0;
          int v194 = *v14;
          do
          {
            v162[v193] = v194;
            v14[v193] = v162[v193 + 1];
            unint64_t v196 = &v14[v193 + 1];
            if (v196 >= (int *)a5)
            {
              uint64_t v195 = &v162[v193];
              uint64_t v185 = &v162[v193 + 1];
              if (v163 < v160)
              {
                int v235 = v195 + 1;
                do
                {
                  int v290 = v235[1];
                  ++v235;
                  *uint64_t v185 = *v163;
                  *v163++ = v290;
                  uint64_t v185 = v235;
                }
                while (v163 < v160);
                goto LABEL_269;
              }
LABEL_268:
              int v235 = v185;
LABEL_269:
              *int v235 = *v163;
              unsigned int v160 = v163;
LABEL_270:
              *unsigned int v160 = v161;
LABEL_271:
              if (v8)
              {
                LODWORD(v291) = *a3;
                goto LABEL_287;
              }
              if ((v8 & 2) != 0)
              {
                uint64_t v291 = *a3;
                unsigned int v292 = (int *)(a2 + 4 * (*(a3 - 1) ^ (*(a3 - 1) >> 31)));
                unsigned int v293 = (int *)(a2 + 4 * v291);
                uint64_t v294 = *v292;
                uint64_t v296 = *v293;
                uint64_t v295 = v293[1];
                uint64_t v297 = (unsigned __int8 *)(v11 + v294);
                int v298 = (unsigned __int8 *)(v11 + v296);
                unint64_t v299 = v11 + v292[1];
                unint64_t v300 = v11 + v295;
                BOOL v301 = v11 + v296 < (unint64_t)(v11 + v295);
                BOOL v302 = v11 + v294 < v299;
                if (v11 + v294 >= v299 || (unint64_t)v298 >= v300)
                {
LABEL_282:
                  if (v302)
                  {
                    if (v301 && *v297 == *v298) {
                      goto LABEL_287;
                    }
                  }
                  else if (!v301)
                  {
                    goto LABEL_287;
                  }
                }
                else
                {
                  uint64_t v304 = result;
                  while (1)
                  {
                    uint64_t v305 = v304 + v296;
                    int v306 = *(unsigned __int8 *)(v304 + v294 + 2);
                    if (v306 != *(unsigned __int8 *)(v304 + v296 + 2)) {
                      break;
                    }
                    unint64_t v307 = v304 + v294 + 3;
                    unint64_t v308 = v305 + 3;
                    BOOL v301 = v308 < v300;
                    ++v304;
                    BOOL v302 = v307 < v299;
                    if (v307 >= v299 || v308 >= v300)
                    {
                      int v298 = (unsigned __int8 *)(v304 + v296 + 2);
                      uint64_t v297 = (unsigned __int8 *)(v304 + v294 + 2);
                      goto LABEL_282;
                    }
                  }
                  if (v306 == *(unsigned __int8 *)(v305 + 2)) {
LABEL_287:
                  }
                    *a3 = ~v291;
                }
              }
              if ((v8 & 4) != 0)
              {
                uint64_t v272 = *(int *)a5;
                long long v309 = (int *)(a2 + 4 * (*((_DWORD *)a5 - 1) ^ (*((int *)a5 - 1) >> 31)));
                long long v310 = (int *)(a2 + 4 * v272);
                uint64_t v311 = *v309;
                uint64_t v313 = *v310;
                uint64_t v312 = v310[1];
                uint64_t v278 = (unsigned __int8 *)(v11 + v311);
                unsigned int v279 = (unsigned __int8 *)(v11 + v313);
                unint64_t v314 = v11 + v309[1];
                unint64_t v315 = v11 + v312;
                BOOL v282 = v11 + v313 < (unint64_t)(v11 + v312);
                BOOL v316 = v11 + v311 < v314;
                if (v11 + v311 < v314 && (unint64_t)v279 < v315)
                {
                  uint64_t v318 = result;
                  do
                  {
                    uint64_t v286 = v318 + v313;
                    int v287 = *(unsigned __int8 *)(v318 + v311 + 2);
                    if (v287 != *(unsigned __int8 *)(v318 + v313 + 2)) {
                      goto LABEL_301;
                    }
                    unint64_t v319 = v318 + v311 + 3;
                    unint64_t v320 = v286 + 3;
                    BOOL v282 = v320 < v315;
                    ++v318;
                    BOOL v316 = v319 < v314;
                  }
                  while (v319 < v314 && v320 < v315);
                  unsigned int v279 = (unsigned __int8 *)(v318 + v313 + 2);
                  uint64_t v278 = (unsigned __int8 *)(v318 + v311 + 2);
                }
                if (v316)
                {
LABEL_257:
                  if (v282 && *v278 == *v279) {
                    goto LABEL_302;
                  }
                }
                else
                {
LABEL_299:
                  if (!v282) {
                    goto LABEL_302;
                  }
                }
              }
              goto LABEL_6;
            }
            int v194 = *v196;
            ++v193;
          }
          while (*v196 < 0);
          unsigned int v162 = (int *)((char *)v162 + v193 * 4);
          int v14 = (int *)((char *)v14 + v193 * 4);
        }
      }
      if (v91 < v16) {
        uint64_t v16 = v14 - a3;
      }
      if ((int)v16 < 1)
      {
LABEL_114:
        uint64_t v135 = *v14;
        unsigned int v136 = (int *)(a2 + 4 * (*(v14 - 1) ^ (*(v14 - 1) >> 31)));
        uint64_t v137 = (int *)(a2 + 4 * v135);
        uint64_t v138 = *v136;
        uint64_t v140 = *v137;
        uint64_t v139 = v137[1];
        unsigned int v141 = (unsigned __int8 *)(v11 + v138);
        unsigned int v142 = (unsigned __int8 *)(v11 + v140);
        unint64_t v143 = v11 + v136[1];
        unint64_t v144 = v11 + v139;
        BOOL v145 = v11 + v140 < (unint64_t)(v11 + v139);
        BOOL v146 = v11 + v138 < v143;
        if (v11 + v138 >= v143 || (unint64_t)v142 >= v144)
        {
LABEL_123:
          if (v146)
          {
            if (v145 && *v141 == *v142) {
              goto LABEL_182;
            }
          }
          else if (!v145)
          {
            goto LABEL_182;
          }
        }
        else
        {
          uint64_t v148 = result;
          while (1)
          {
            uint64_t v149 = v148 + v140;
            int v150 = *(unsigned __int8 *)(v148 + v138 + 2);
            if (v150 != *(unsigned __int8 *)(v148 + v140 + 2)) {
              break;
            }
            unint64_t v151 = v148 + v138 + 3;
            unint64_t v152 = v149 + 3;
            BOOL v145 = v152 < v144;
            ++v148;
            BOOL v146 = v151 < v143;
            if (v151 >= v143 || v152 >= v144)
            {
              unsigned int v142 = (unsigned __int8 *)(v148 + v140 + 2);
              unsigned int v141 = (unsigned __int8 *)(v148 + v138 + 2);
              goto LABEL_123;
            }
          }
          if (v150 == *(unsigned __int8 *)(v149 + 2))
          {
LABEL_182:
            *int v14 = ~v135;
            if (v8)
            {
LABEL_183:
              LODWORD(v197) = *a3;
              goto LABEL_184;
            }
LABEL_167:
            if ((v8 & 2) != 0)
            {
              uint64_t v197 = *a3;
              int v198 = (int *)(a2 + 4 * (*(a3 - 1) ^ (*(a3 - 1) >> 31)));
              uint64_t v199 = (int *)(a2 + 4 * v197);
              uint64_t v200 = *v198;
              uint64_t v202 = *v199;
              uint64_t v201 = v199[1];
              uint64_t v203 = (unsigned __int8 *)(v11 + v200);
              long long v204 = (unsigned __int8 *)(v11 + v202);
              unint64_t v205 = v11 + v198[1];
              unint64_t v206 = v11 + v201;
              BOOL v207 = v11 + v202 < (unint64_t)(v11 + v201);
              BOOL v208 = v11 + v200 < v205;
              if (v11 + v200 >= v205 || (unint64_t)v204 >= v206)
              {
LABEL_177:
                if (v208)
                {
                  if (v207 && *v203 == *v204) {
                    goto LABEL_184;
                  }
                }
                else if (!v207)
                {
                  goto LABEL_184;
                }
              }
              else
              {
                uint64_t v210 = result;
                while (1)
                {
                  uint64_t v211 = v210 + v202;
                  int v212 = *(unsigned __int8 *)(v210 + v200 + 2);
                  if (v212 != *(unsigned __int8 *)(v210 + v202 + 2)) {
                    break;
                  }
                  unint64_t v213 = v210 + v200 + 3;
                  unint64_t v214 = v211 + 3;
                  BOOL v207 = v214 < v206;
                  ++v210;
                  BOOL v208 = v213 < v205;
                  if (v213 >= v205 || v214 >= v206)
                  {
                    long long v204 = (unsigned __int8 *)(v210 + v202 + 2);
                    uint64_t v203 = (unsigned __int8 *)(v210 + v200 + 2);
                    goto LABEL_177;
                  }
                }
                if (v212 == *(unsigned __int8 *)(v211 + 2)) {
LABEL_184:
                }
                  *a3 = ~v197;
              }
            }
            if ((v8 & 4) == 0) {
              goto LABEL_6;
            }
            uint64_t v215 = *(int *)a5;
            __int16 v216 = (int *)(a2 + 4 * (*((_DWORD *)a5 - 1) ^ (*((int *)a5 - 1) >> 31)));
            uint64_t v217 = (int *)(a2 + 4 * v215);
            uint64_t v218 = *v216;
            uint64_t v220 = *v217;
            uint64_t v219 = v217[1];
            unint64_t v221 = (unsigned __int8 *)(v11 + v218);
            unsigned int v222 = (unsigned __int8 *)(v11 + v220);
            unint64_t v223 = v11 + v216[1];
            unint64_t v224 = v11 + v219;
            BOOL v225 = v11 + v220 < (unint64_t)(v11 + v219);
            BOOL v226 = v11 + v218 < v223;
            if (v11 + v218 >= v223 || (unint64_t)v222 >= v224)
            {
LABEL_195:
              if (v226)
              {
                if (!v225 || *v221 != *v222) {
                  goto LABEL_6;
                }
              }
              else if (v225)
              {
                goto LABEL_6;
              }
            }
            else
            {
              uint64_t v228 = result;
              while (1)
              {
                uint64_t v229 = v228 + v220;
                int v230 = *(unsigned __int8 *)(v228 + v218 + 2);
                if (v230 != *(unsigned __int8 *)(v228 + v220 + 2)) {
                  break;
                }
                unint64_t v231 = v228 + v218 + 3;
                unint64_t v232 = v229 + 3;
                BOOL v225 = v232 < v224;
                ++v228;
                BOOL v226 = v231 < v223;
                if (v231 >= v223 || v232 >= v224)
                {
                  unsigned int v222 = (unsigned __int8 *)(v228 + v220 + 2);
                  unint64_t v221 = (unsigned __int8 *)(v228 + v218 + 2);
                  goto LABEL_195;
                }
              }
              if (v230 != *(unsigned __int8 *)(v229 + 2)) {
                goto LABEL_6;
              }
            }
            *(_DWORD *)a5 = ~v215;
            goto LABEL_6;
          }
        }
        if (v8) {
          goto LABEL_183;
        }
        goto LABEL_167;
      }
      unsigned int v92 = 0;
      do
      {
        signed int v93 = v16 >> 1;
        uint64_t v94 = 4 * (int)v92;
        uint64_t v95 = 4 * (v16 >> 1);
        unsigned int v96 = (int *)(a2
                    + 4
                    * (v14[(unint64_t)v94 / 4 + (unint64_t)v95 / 4] ^ (v14[(unint64_t)v94 / 4 + (unint64_t)v95 / 4] >> 31)));
        unsigned int v97 = (int *)(a2
                    + 4
                    * (v14[v94 / 0xFFFFFFFFFFFFFFFCLL - 1 + v95 / 0xFFFFFFFFFFFFFFFCLL] ^ (v14[v94 / 0xFFFFFFFFFFFFFFFCLL - 1 + v95 / 0xFFFFFFFFFFFFFFFCLL] >> 31)));
        uint64_t v99 = *v96;
        uint64_t v98 = v96[1];
        uint64_t v101 = *v97;
        uint64_t v100 = v97[1];
        int v102 = (unsigned __int8 *)(v11 + v99);
        int32x2_t v103 = (unsigned __int8 *)(v11 + v101);
        unint64_t v104 = v11 + v98;
        unint64_t v105 = v11 + v100;
        int v106 = v11 + v101 < (unint64_t)(v11 + v100);
        BOOL v107 = v11 + v99 < v104;
        if (v11 + v99 >= v104 || (unint64_t)v103 >= v105)
        {
LABEL_81:
          if (v107)
          {
            if (v106 && *v102 - *v103 < 0) {
              goto LABEL_70;
            }
          }
          else if (v106 << 31 >> 31 < 0)
          {
            goto LABEL_70;
          }
        }
        else
        {
          uint64_t v109 = result;
          while (1)
          {
            uint64_t v110 = v109 + v101;
            int v111 = *(unsigned __int8 *)(v109 + v99 + 2);
            if (v111 != *(unsigned __int8 *)(v109 + v101 + 2)) {
              break;
            }
            unint64_t v112 = v109 + v99 + 3;
            unint64_t v113 = v110 + 3;
            int v106 = v113 < v105;
            ++v109;
            BOOL v107 = v112 < v104;
            if (v112 >= v104 || v113 >= v105)
            {
              int32x2_t v103 = (unsigned __int8 *)(v109 + v101 + 2);
              int v102 = (unsigned __int8 *)(v109 + v99 + 2);
              goto LABEL_81;
            }
          }
          if (v111 - *(unsigned __int8 *)(v110 + 2) < 0)
          {
LABEL_70:
            v92 += v93 + 1;
            v93 += 1 + (v16 | 0xFFFFFFFE);
          }
        }
        LODWORD(v16) = v93;
      }
      while (v93 > 0);
      uint64_t v114 = v92 - 1;
      if ((int)v92 < 1) {
        goto LABEL_114;
      }
      uint64_t v115 = v92;
      unint64_t v116 = (unint64_t)&v14[-v92];
      if (v92 < 8 || v116 < (unint64_t)&v14[v114 + 1] && v14 < &v14[v114 - v92 + 1])
      {
        uint32x4_t v117 = v14;
        unsigned int v118 = &v14[-v92];
        goto LABEL_94;
      }
      v92 -= v92 & 0xFFFFFFF8;
      uint64_t v125 = v115 & 0xFFFFFFF8;
      uint32x4_t v117 = &v14[v125];
      unsigned int v118 = (int *)(v116 + v125 * 4);
      uint64_t v126 = v115 & 0xFFFFFFF8;
      int v127 = v14;
      do
      {
        uint64_t v128 = &v127[-v115];
        long long v129 = *(_OWORD *)v128;
        long long v130 = *((_OWORD *)v128 + 1);
        long long v131 = *((_OWORD *)v127 + 1);
        *(_OWORD *)uint64_t v128 = *(_OWORD *)v127;
        *((_OWORD *)v128 + 1) = v131;
        *(_OWORD *)int v127 = v129;
        *((_OWORD *)v127 + 1) = v130;
        v127 += 8;
        v126 -= 8;
      }
      while (v126);
      if ((v115 & 0x7FFFFFF8) != v115)
      {
LABEL_94:
        unsigned int v119 = v92 + 1;
        do
        {
          int v120 = *v118;
          *v118++ = *v117;
          *v117++ = v120;
          --v119;
        }
        while (v119 > 1);
      }
      unsigned int v121 = (char *)&v14[v115];
      if (v121 >= a5)
      {
LABEL_60:
        char v84 = 0;
        uint64_t v85 = v14;
        uint64_t v86 = (uint64_t)v14;
        int v87 = v8 & 3;
        if ((uint64_t)v90 <= (uint64_t)v15) {
          goto LABEL_3;
        }
        goto LABEL_61;
      }
      if ((*(_DWORD *)v121 & 0x80000000) != 0)
      {
        *(_DWORD *)unsigned int v121 = ~*(_DWORD *)v121;
        if ((unint64_t)a3 >= v116)
        {
          char v84 = 1;
          uint64_t v85 = v14;
          uint64_t v86 = (uint64_t)v14;
          int v87 = v8 & 3;
          if ((uint64_t)v90 <= (uint64_t)v15) {
            goto LABEL_3;
          }
          goto LABEL_61;
        }
        uint64_t v132 = 0;
        do
          int v133 = v14[--v132];
        while (v133 < 0);
        int64_t v134 = v90 + v132 * 4;
        uint64_t v85 = &v14[v132];
        char v84 = 5;
        uint64_t v86 = (uint64_t)v14;
        int v87 = v8 & 3;
        if (v134 > (uint64_t)v15) {
          goto LABEL_61;
        }
LABEL_3:
        unint64_t v17 = &v321[2 * (int)v7];
        *(void *)unint64_t v17 = v86;
        *((void *)v17 + 1) = v121;
        *((void *)v17 + 2) = a5;
        LODWORD(v7) = v7 + 1;
        *((_DWORD *)v17 + 6) = v8 & 4 | v84 & 3;
        LOBYTE(v8) = v84 & 4 | v87;
        a5 = (char *)v85;
        uint64_t v13 = v85 + 1;
        int v14 = (int *)v116;
        unint64_t v15 = (unint64_t)v85 - v116;
        uint64_t v16 = (uint64_t)((uint64_t)v85 - v116) >> 2;
        if (v16 <= v9) {
          break;
        }
      }
      else
      {
        if ((unint64_t)a3 >= v116) {
          goto LABEL_60;
        }
        uint64_t v122 = 0;
        do
          int v123 = v14[v122++];
        while (v123 < 0);
        int64_t v124 = (char *)v13 - (char *)v14 - v122 * 4;
        uint64_t v86 = (uint64_t)&v14[v122 - 1];
        char v84 = 2;
        uint64_t v85 = v14;
        int v87 = v8 & 3;
        if ((uint64_t)v90 <= v124) {
          goto LABEL_3;
        }
LABEL_61:
        if (((v86 == (void)v14) & ((v84 & 2) >> 1)) != 0) {
          char v88 = v84 ^ 6;
        }
        else {
          char v88 = v84;
        }
        unint64_t v89 = &v321[2 * (int)v7];
        *(void *)unint64_t v89 = a3;
        *((void *)v89 + 1) = v116;
        *((void *)v89 + 2) = v85;
        LODWORD(v7) = v7 + 1;
        *((_DWORD *)v89 + 6) = v88 & 4 | v87;
        LOBYTE(v8) = v8 & 4 | v88 & 3;
        int v14 = (int *)v121;
        a3 = (int *)v86;
        unint64_t v15 = a5 - v121;
        uint64_t v16 = (a5 - v121) >> 2;
        if (v16 <= v9) {
          break;
        }
      }
    }
  }
  while (2)
  {
    if (v14 >= (int *)a5 || a3 >= v14) {
      goto LABEL_229;
    }
    unint64_t v19 = v15 >> 2;
    if ((int)(v15 >> 2) < 1) {
      goto LABEL_17;
    }
    unint64_t v20 = (v15 >> 2);
    if (v20 >= 8
      && ((uint64_t v21 = (v15 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL, (unint64_t)v14 + v21 + 4 <= a6)
       || (unint64_t)v14 >= v12 + v21))
    {
      uint64_t v237 = (v15 >> 2) & 7;
      unint64_t v238 = v20 - v237;
      LODWORD(v19) = v19 - (v20 - v237);
      uint64_t v239 = v20 - v237;
      int32x4_t v22 = &v14[v239];
      unint64_t v23 = (int *)(a6 + v239 * 4);
      uint64_t v240 = (long long *)(v14 + 4);
      uint64_t v241 = (long long *)(a6 + 16);
      do
      {
        long long v242 = *(v241 - 1);
        long long v243 = *v241;
        long long v244 = *v240;
        *(v241 - 1) = *(v240 - 1);
        *uint64_t v241 = v244;
        *(v240 - 1) = v242;
        *uint64_t v240 = v243;
        v241 += 2;
        v240 += 2;
        v238 -= 8;
      }
      while (v238);
      if (!v237) {
        goto LABEL_17;
      }
    }
    else
    {
      int32x4_t v22 = v14;
      unint64_t v23 = (int *)a6;
    }
    unsigned int v24 = v19 + 1;
    do
    {
      int v25 = *v23;
      *v23++ = *v22;
      *v22++ = v25;
      --v24;
    }
    while (v24 > 1);
LABEL_17:
    BOOL v26 = (int *)(v10 + 4 * v16);
    unsigned int v27 = *v26 >> 31;
    int v28 = (int *)(a2 + 4 * (*v26 ^ (*v26 >> 31)));
    int v30 = *(v14 - 1);
    int v29 = v14 - 1;
    unsigned int v31 = v30 ^ (v30 >> 31);
    if (v30 < 0) {
      unsigned int v27 = (*v26 >> 31) | 2;
    }
    uint64_t v32 = (int *)(a2 + 4 * v31);
    uint64_t v34 = (int *)(a5 - 4);
    int v33 = *((_DWORD *)a5 - 1);
    while (1)
    {
      while (1)
      {
        uint64_t v35 = *v28;
        uint64_t v37 = *v32;
        uint64_t v36 = v32[1];
        uint64_t v38 = (unsigned __int8 *)(v11 + v35);
        uint64_t v39 = (unsigned __int8 *)(v11 + v37);
        unint64_t v40 = v11 + v28[1];
        unint64_t v41 = v11 + v36;
        int v42 = v11 + v37 < (unint64_t)(v11 + v36);
        BOOL v43 = v11 + v35 < v40;
        if (v11 + v35 < v40 && (unint64_t)v39 < v41)
        {
          uint64_t v45 = result;
          while (1)
          {
            uint64_t v46 = v45 + v37;
            int v47 = *(unsigned __int8 *)(v45 + v35 + 2);
            int v48 = *(unsigned __int8 *)(v45 + v37 + 2);
            if (v47 != v48) {
              goto LABEL_32;
            }
            unint64_t v49 = v45 + v35 + 3;
            unint64_t v50 = v46 + 3;
            int v42 = v46 + 3 < v41;
            ++v45;
            BOOL v43 = v49 < v40;
            if (v49 >= v40 || v50 >= v41)
            {
              uint64_t v39 = (unsigned __int8 *)(v45 + v37 + 2);
              uint64_t v38 = (unsigned __int8 *)(v45 + v35 + 2);
              break;
            }
          }
        }
        if (!v43) {
          break;
        }
        if (!v42) {
          goto LABEL_52;
        }
        int v47 = *v38;
        int v48 = *v39;
LABEL_32:
        int v51 = v47 - v48;
        if (v51 >= 1)
        {
LABEL_52:
          int v76 = *v26;
          if (v27)
          {
            do
            {
              int v77 = v26;
              unsigned int v78 = v34;
              int v80 = *--v34;
              int v79 = v80;
              *unsigned int v78 = v76;
              int v81 = *--v26;
              int v76 = v81;
              *int v77 = v79;
            }
            while (v81 < 0);
            v27 ^= 1u;
          }
          *v34-- = v76;
          if ((unint64_t)v26 <= a6)
          {
LABEL_221:
            BOOL v26 = (int *)a6;
            goto LABEL_228;
          }
          *BOOL v26 = *v34;
          int v82 = *--v26;
          int v28 = (int *)(a2 + 4 * v82);
          long long v83 = (int *)(a2 + 4 * ~v82);
          if (v82 < 0)
          {
            int v28 = v83;
            v27 |= 1u;
          }
        }
        else
        {
          if (v51 < 0) {
            goto LABEL_34;
          }
LABEL_42:
          int v61 = *v26;
          if (v27)
          {
            do
            {
              int v62 = v26;
              uint64_t v63 = v34;
              int v65 = *--v34;
              int v64 = v65;
              *uint64_t v63 = v61;
              int v66 = *--v26;
              int v61 = v66;
              int *v62 = v64;
            }
            while (v66 < 0);
            v27 ^= 1u;
          }
          *uint64_t v34 = ~v61;
          if ((unint64_t)v26 <= a6) {
            goto LABEL_221;
          }
          int v67 = v34 - 1;
          *v26-- = *(v34 - 1);
          int v68 = *v29;
          if ((v27 & 2) != 0)
          {
            do
            {
              unsigned int v69 = v29;
              unsigned int v70 = v67;
              int v72 = *--v67;
              int v71 = v72;
              *unsigned int v70 = v68;
              int v73 = *--v29;
              int v68 = v73;
              *unsigned int v69 = v71;
            }
            while (v73 < 0);
            v27 ^= 2u;
          }
          uint64_t v34 = v67 - 1;
          unsigned int v74 = *(v67 - 1);
          *int v67 = v68;
          *v29-- = v74;
          if (v29 < a3)
          {
            if ((unint64_t)v26 > a6)
            {
              int v233 = v67 - 1;
              do
              {
                int v253 = *--v233;
                *uint64_t v34 = *v26;
                *v26-- = v253;
                uint64_t v34 = v233;
              }
              while ((unint64_t)v26 > a6);
              goto LABEL_227;
            }
LABEL_226:
            int v233 = v34;
            goto LABEL_227;
          }
          v27 |= *v26 >> 31;
          int v28 = (int *)(a2 + 4 * (*v26 ^ (*v26 >> 31)));
          uint64_t v75 = *v29;
          if ((v75 & 0x80000000) != 0)
          {
            uint64_t v32 = (int *)(a2 + 4 * ~v75);
            v27 |= 2u;
          }
          else
          {
            uint64_t v32 = (int *)(a2 + 4 * v75);
          }
        }
      }
      if (((v42 << 31 >> 31) & 0x80000000) == 0) {
        goto LABEL_42;
      }
LABEL_34:
      int v52 = *v29;
      if ((v27 & 2) != 0)
      {
        do
        {
          int v53 = v29;
          unsigned int v54 = v34;
          int v56 = *--v34;
          int v55 = v56;
          *unsigned int v54 = v52;
          int v57 = *--v29;
          int v52 = v57;
          *int v53 = v55;
        }
        while (v57 < 0);
        v27 ^= 2u;
      }
      unsigned int v58 = v34;
      unsigned int v59 = *--v34;
      *unsigned int v58 = v52;
      *v29-- = v59;
      if (v29 < a3) {
        break;
      }
      unsigned int v60 = *v29;
      if (*v29 < 0)
      {
        unsigned int v60 = ~v60;
        v27 |= 2u;
      }
      uint64_t v32 = (int *)(a2 + 4 * v60);
    }
    if ((unint64_t)v26 <= a6) {
      goto LABEL_226;
    }
    int v233 = v34;
    do
    {
      int v234 = *--v233;
      *uint64_t v34 = *v26;
      *v26-- = v234;
      uint64_t v34 = v233;
    }
    while ((unint64_t)v26 > a6);
LABEL_227:
    *int v233 = *v26;
LABEL_228:
    *BOOL v26 = v33;
LABEL_229:
    if (v8)
    {
      LODWORD(v254) = *a3;
      goto LABEL_245;
    }
    if ((v8 & 2) != 0)
    {
      uint64_t v254 = *a3;
      int v255 = (int *)(a2 + 4 * (*(a3 - 1) ^ (*(a3 - 1) >> 31)));
      unint64_t v256 = (int *)(a2 + 4 * v254);
      uint64_t v257 = *v255;
      uint64_t v259 = *v256;
      uint64_t v258 = v256[1];
      char v260 = (unsigned __int8 *)(v11 + v257);
      char v261 = (unsigned __int8 *)(v11 + v259);
      unint64_t v262 = v11 + v255[1];
      unint64_t v263 = v11 + v258;
      BOOL v264 = v11 + v259 < (unint64_t)(v11 + v258);
      BOOL v265 = v11 + v257 < v262;
      if (v11 + v257 >= v262 || (unint64_t)v261 >= v263)
      {
LABEL_240:
        if (v265)
        {
          if (v264 && *v260 == *v261) {
            goto LABEL_245;
          }
        }
        else if (!v264)
        {
          goto LABEL_245;
        }
      }
      else
      {
        uint64_t v267 = result;
        while (1)
        {
          uint64_t v268 = v267 + v259;
          int v269 = *(unsigned __int8 *)(v267 + v257 + 2);
          if (v269 != *(unsigned __int8 *)(v267 + v259 + 2)) {
            break;
          }
          unint64_t v270 = v267 + v257 + 3;
          unint64_t v271 = v268 + 3;
          BOOL v264 = v271 < v263;
          ++v267;
          BOOL v265 = v270 < v262;
          if (v270 >= v262 || v271 >= v263)
          {
            char v261 = (unsigned __int8 *)(v267 + v259 + 2);
            char v260 = (unsigned __int8 *)(v267 + v257 + 2);
            goto LABEL_240;
          }
        }
        if (v269 == *(unsigned __int8 *)(v268 + 2)) {
LABEL_245:
        }
          *a3 = ~v254;
      }
    }
    if ((v8 & 4) == 0) {
      goto LABEL_6;
    }
    uint64_t v272 = *(int *)a5;
    int v273 = (int *)(a2 + 4 * (*((_DWORD *)a5 - 1) ^ (*((int *)a5 - 1) >> 31)));
    int v274 = (int *)(a2 + 4 * v272);
    uint64_t v275 = *v273;
    uint64_t v277 = *v274;
    uint64_t v276 = v274[1];
    uint64_t v278 = (unsigned __int8 *)(v11 + v275);
    unsigned int v279 = (unsigned __int8 *)(v11 + v277);
    unint64_t v280 = v11 + v273[1];
    unint64_t v281 = v11 + v276;
    BOOL v282 = v11 + v277 < (unint64_t)(v11 + v276);
    BOOL v283 = v11 + v275 < v280;
    if (v11 + v275 >= v280 || (unint64_t)v279 >= v281)
    {
LABEL_256:
      if (!v283) {
        goto LABEL_299;
      }
      goto LABEL_257;
    }
    uint64_t v285 = result;
    while (1)
    {
      uint64_t v286 = v285 + v277;
      int v287 = *(unsigned __int8 *)(v285 + v275 + 2);
      if (v287 != *(unsigned __int8 *)(v285 + v277 + 2)) {
        break;
      }
      unint64_t v288 = v285 + v275 + 3;
      unint64_t v289 = v286 + 3;
      BOOL v282 = v289 < v281;
      ++v285;
      BOOL v283 = v288 < v280;
      if (v288 >= v280 || v289 >= v281)
      {
        unsigned int v279 = (unsigned __int8 *)(v285 + v277 + 2);
        uint64_t v278 = (unsigned __int8 *)(v285 + v275 + 2);
        goto LABEL_256;
      }
    }
LABEL_301:
    if (v287 != *(unsigned __int8 *)(v286 + 2))
    {
LABEL_6:
      if (!v7) {
        return result;
      }
LABEL_7:
      uint64_t v7 = (int)v7 - 1;
      uint64_t v18 = &v321[2 * v7];
      a3 = *(int **)v18;
      a5 = (char *)*((void *)v18 + 2);
      int v8 = *((_DWORD *)v18 + 6);
      uint64_t v13 = (int *)(a5 + 4);
      int v14 = (int *)*((void *)v18 + 1);
      unint64_t v15 = a5 - (char *)v14;
      uint64_t v16 = (a5 - (char *)v14) >> 2;
      if (v16 > v9) {
        goto LABEL_65;
      }
      continue;
    }
    break;
  }
LABEL_302:
  *(_DWORD *)a5 = ~v272;
  if (v7) {
    goto LABEL_7;
  }
  return result;
}

uint64_t ZDICT_tryMerge(unsigned int *a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  if (v5 < 2) {
    return 0;
  }
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = HIDWORD(a2);
  unsigned int v9 = HIDWORD(a2) + a2;
  uint64_t v10 = a4;
  uint64_t v11 = 12 * a4 - 12;
  do
  {
    if (v11 != v6)
    {
      unint64_t v12 = &a1[v6 / 4];
      unsigned int v13 = a1[v6 / 4 + 3];
      int v14 = v13 - a2;
      if (v13 > a2 && v13 <= v9)
      {
        v12[3] = a2;
        uint64_t v16 = v12 + 3;
        unsigned int v17 = v14 * a3 / HIDWORD(a2) + (HIDWORD(a2) >> 3) + v16[2];
        v16[1] += v14;
        v16[2] = v17;
        uint64_t v18 = *(void *)v16;
        if ((v7 + 1) <= 1)
        {
          uint64_t v22 = v7 + 1;
        }
        else
        {
          while (a1[3 * v7 + 2] < v17)
          {
            unint64_t v19 = &a1[3 * v7];
            uint64_t v20 = *(void *)v19;
            v16[2] = v19[2];
            *(void *)uint64_t v16 = v20;
            v16 -= 3;
            uint64_t v21 = v7 & 0xFFFFFFFE;
            LODWORD(v7) = v7 - 1;
            if (!v21)
            {
              uint64_t v22 = 1;
              goto LABEL_33;
            }
          }
          uint64_t v22 = (v7 + 1);
        }
LABEL_33:
        uint64_t v37 = &a1[3 * v22];
        *(void *)uint64_t v37 = v18;
        v37[2] = v17;
        return v22;
      }
    }
    ++v7;
    v6 += 12;
  }
  while (12 * v5 - 12 != v6);
  int v23 = 0;
  unsigned int v24 = (void *)(a5 + a2 + 1);
  int v25 = a1 + 3;
  uint64_t v26 = 1;
  while (1)
  {
    if (v26 == v10) {
      goto LABEL_15;
    }
    unsigned int v27 = &a1[3 * v26];
    uint64_t v28 = *v27;
    int v30 = v27 + 1;
    uint64_t v29 = v27[1];
    unsigned int v31 = v27[1] + v28;
    if (v28 < a2 && v31 >= a2) {
      break;
    }
    int v33 = (void *)(a5 + v28);
    if (*v33 == *v24)
    {
      uint64_t v34 = 0;
      if (v29)
      {
        while (*((unsigned __int8 *)v33 + v34) == *((unsigned __int8 *)v24 + v34))
        {
          if (v29 == ++v34) {
            goto LABEL_25;
          }
        }
      }
      if (v34 == v29)
      {
LABEL_25:
        unsigned int v35 = HIDWORD(a2) - v29;
        if (HIDWORD(a2) - (int)v29 <= 1) {
          unsigned int v35 = 1;
        }
        *unsigned int v27 = a2;
        a1[3 * v26 + 2] += a3 * (unint64_t)v35 / v8;
        if ((v29 + 1) < HIDWORD(a2)) {
          LODWORD(v8) = v29 + 1;
        }
        _DWORD *v30 = v8;
        return v26;
      }
    }
LABEL_15:
    ++v26;
    ++v23;
    v25 += 3;
    if (v26 == v5) {
      return 0;
    }
  }
  int v38 = v9 - v31;
  uint64_t v39 = &a1[3 * v26];
  unsigned int v41 = v39[2];
  unint64_t v40 = v39 + 2;
  unsigned int v42 = v41 + (HIDWORD(a2) >> 3);
  *unint64_t v40 = v42;
  if (v38 >= 1)
  {
    _DWORD *v30 = v38 + v29;
    v42 += v38 * a3 / HIDWORD(a2);
    *unint64_t v40 = v42;
  }
  uint64_t v43 = *(void *)v27;
  if (v26 >= 2)
  {
    while (a1[3 * v23 + 2] < v42)
    {
      int v44 = &a1[3 * v23];
      uint64_t v45 = *(void *)v44;
      v25[2] = v44[2];
      *(void *)int v25 = v45;
      v25 -= 3;
      if (!(unint64_t)(v23-- & 0xFFFFFFFE))
      {
        uint64_t v26 = 1;
        goto LABEL_41;
      }
    }
    uint64_t v26 = (v23 + 1);
  }
LABEL_41:
  int v47 = &a1[3 * v26];
  *(void *)int v47 = v43;
  v47[2] = v42;
  return v26;
}

uint64_t ktxCheckHeader1_(int8x16_t *a1, uint64_t a2)
{
  if (a1->i64[0] != 0xBB31312058544BABLL || a1->i32[2] != 169478669) {
    return 15;
  }
  __int32 v6 = a1->i32[3];
  if (v6 != 67305985)
  {
    if (v6 != 16909060) {
      return 1;
    }
    _ktxSwapEndian32(a1 + 1, 0xCuLL);
    unsigned int v7 = a1[1].u32[1];
    uint64_t result = 1;
    if (v7 > 4 || ((1 << v7) & 0x16) == 0) {
      return result;
    }
  }
  *(unsigned char *)a2 = 0;
  __int32 v8 = a1[1].i32[0];
  __int32 v9 = a1[1].i32[2];
  if (v8 && v9)
  {
    if (v9 == a1[1].i32[3]) {
      return 1;
    }
  }
  else
  {
    uint64_t result = 1;
    if (v8 + v9) {
      return result;
    }
    *(unsigned char *)a2 = 1;
    if (v9 == a1[1].i32[3]) {
      return 1;
    }
  }
  unsigned __int32 v10 = a1[2].u32[1];
  if (!v10) {
    return 1;
  }
  int v12 = a1[2].i32[2];
  unsigned __int32 v11 = a1[2].u32[3];
  if (v11)
  {
    if (v12)
    {
      int v12 = a1[3].i32[0];
      if (v12) {
        return 16;
      }
      __int16 v13 = 3;
      goto LABEL_26;
    }
    return 1;
  }
  if (v12)
  {
    *(_WORD *)(a2 + 2) = 2;
    int v12 = 1;
    goto LABEL_27;
  }
  __int16 v13 = 1;
LABEL_26:
  *(_WORD *)(a2 + 2) = v13;
LABEL_27:
  __int32 v14 = a1[3].i32[1];
  if (v14 != 1 && (v14 != 6 || !v12)) {
    return 1;
  }
  if (a1[3].i32[2])
  {
    char v15 = 0;
  }
  else
  {
    char v15 = 1;
    a1[3].i32[2] = 1;
  }
  *(unsigned char *)(a2 + 1) = v15;
  if (v10 <= a1[2].i32[2]) {
    unsigned __int32 v10 = a1[2].u32[2];
  }
  if (v10 <= v11) {
    unsigned __int32 v10 = v11;
  }
  return v10 >> (a1[3].i8[8] - 1) == 0;
}

uint64_t ktxCheckHeader2_(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != 0xBB30322058544BABLL || *(_DWORD *)(a1 + 8) != 169478669) {
    return 15;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (!v4) {
    return 1;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 24);
  unsigned int v5 = *(_DWORD *)(a1 + 28);
  if (!v5)
  {
    if (v6)
    {
      *(_WORD *)(a2 + 2) = 2;
      int v7 = 1;
      int v8 = *(_DWORD *)(a1 + 36);
      if (v8 == 1) {
        goto LABEL_19;
      }
    }
    else
    {
      int v7 = 0;
      *(_WORD *)(a2 + 2) = 1;
      int v8 = *(_DWORD *)(a1 + 36);
      if (v8 == 1) {
        goto LABEL_19;
      }
    }
    goto LABEL_17;
  }
  if (!v6) {
    return 1;
  }
  int v7 = *(_DWORD *)(a1 + 32);
  if (v7) {
    return 16;
  }
  *(_WORD *)(a2 + 2) = 3;
  int v8 = *(_DWORD *)(a1 + 36);
  if (v8 != 1)
  {
LABEL_17:
    if (v8 != 6 || !v7) {
      return 1;
    }
  }
LABEL_19:
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  if (v9)
  {
    *(unsigned char *)(a2 + 1) = 0;
    if (v9 > 0x20) {
      return 1;
    }
  }
  else
  {
    LOBYTE(v9) = 1;
    *(unsigned char *)(a2 + 1) = 1;
    *(_DWORD *)(a1 + 40) = 1;
  }
  if (v4 <= v6) {
    unsigned int v4 = v6;
  }
  if (v4 <= v5) {
    unsigned int v4 = v5;
  }
  return v4 >> (v9 - 1) == 0;
}

_DWORD *createDFDUnpacked(int a1, int a2, int a3, unsigned int a4, int a5)
{
  int v9 = a3 * a2;
  if (a5 == 8) {
    int v10 = 131329;
  }
  else {
    int v10 = 65793;
  }
  if (a1)
  {
    unsigned __int32 v11 = malloc_type_malloc(4 * (4 * v9 + 7), 0x100004052888210uLL);
    int v12 = v11;
    _DWORD *v11 = 4 * (4 * v9 + 7);
    v11[1] = 0;
    v11[2] = (v9 << 20) + 1572866;
    v11[3] = v10;
    v11[4] = 0;
    v11[5] = v9;
    v11[6] = 0;
    if (a2 >= 1)
    {
      uint64_t v13 = (a3 - 1);
      if (a3 >= 1)
      {
        __int32 v14 = v11 + 7;
        if (a5 == 2 || a5 == 4)
        {
          int v15 = 0;
          uint64_t v16 = 0;
          int v17 = 8 * a3;
          int v18 = 8 * a3 - 8;
          int v19 = 4 * a3;
          int v20 = a5 - 1;
          uint64_t v21 = a3;
          do
          {
            uint64_t v22 = 0;
            BOOL v23 = (v16 & 0x7FFFFFFD) != 0 || a4 == 0;
            int v24 = v16 ^ 2;
            if (v23) {
              int v24 = v16;
            }
            if (v24 == 3) {
              int v24 = 15;
            }
            int v25 = v24 << 24;
            if (v24 == 15) {
              int v26 = 520552448;
            }
            else {
              int v26 = (v24 << 24) | 0x70000;
            }
            int v27 = v15;
            int v28 = v18;
            do
            {
              int v30 = v22 == 0;
              unsigned int v31 = &v14[v27];
              switch(v20)
              {
                case 0:
                  *(void *)unsigned int v31 = v25 | v28 | 0x40070000u;
                  if (v13 == v22) {
                    int v32 = -128;
                  }
                  else {
                    int v32 = -256;
                  }
                  int v29 = v32 | v30;
                  int v30 = ~v32;
                  break;
                case 2:
                case 4:
                  *unsigned int v31 = v25 | v28 | 0x40070000;
                  v31[1] = 0;
                  int v29 = -1;
                  break;
                case 5:
                  *unsigned int v31 = v25 | v28 | 0xC0070000;
                  v31[1] = 0;
                  int v30 = 1065353216;
                  int v29 = -1082130432;
                  break;
                case 6:
                  int v29 = 0;
                  *(void *)unsigned int v31 = v25 | v28 | 0x80070000;
                  int v30 = 1065353216;
                  break;
                case 7:
                  int v29 = 0;
                  *(void *)unsigned int v31 = v28 | v26;
                  int v30 = 255;
                  break;
                default:
                  int v29 = 0;
                  *(void *)unsigned int v31 = v25 | v28 | 0x70000u;
                  break;
              }
              v31[2] = v29;
              v31[3] = v30;
              ++v22;
              v28 -= 8;
              v27 += 4;
            }
            while (v21 != v22);
            ++v16;
            v18 += v17;
            v15 += v19;
          }
          while (v16 != a2);
        }
        else
        {
          int v38 = 0;
          uint64_t v39 = 0;
          int v40 = 8 * a3;
          int v41 = 8 * a3 - 8;
          uint64_t v42 = 4 * (a3 - 1);
          int v43 = 4 * a3;
          uint64_t v44 = 4 * a3;
          do
          {
            uint64_t v45 = 0;
            BOOL v46 = (v39 & 0x7FFFFFFD) != 0 || a4 == 0;
            int v47 = v39 ^ 2;
            if (v46) {
              int v47 = v39;
            }
            if (v47 == 3) {
              int v47 = 15;
            }
            int v48 = v47 << 24;
            if (v47 == 15) {
              int v49 = 520552448;
            }
            else {
              int v49 = (v47 << 24) | 0x70000;
            }
            int v50 = v41;
            do
            {
              unsigned int v54 = &v14[v38 + (int)v45];
              switch(a5)
              {
                case 1:
                  *(void *)unsigned int v54 = v48 | v50 | 0x40070000u;
                  if (v42 == v45) {
                    int v55 = -128;
                  }
                  else {
                    int v55 = -256;
                  }
                  int v53 = ~v55;
                  int v51 = v55 | (v45 == 0);
                  break;
                case 3:
                case 5:
                  int v53 = v45 == 0;
                  *unsigned int v54 = v48 | v50 | 0x40070000;
                  v54[1] = 0;
                  int v51 = -1;
                  break;
                case 6:
                  *unsigned int v54 = v48 | v50 | 0xC0070000;
                  v54[1] = 0;
                  int v53 = 1065353216;
                  int v51 = -1082130432;
                  break;
                case 7:
                  int v51 = 0;
                  *unsigned int v54 = v48 | v50 | 0x80070000;
                  v54[1] = 0;
                  int v53 = 1065353216;
                  break;
                case 8:
                  int v51 = 0;
                  int v52 = v50 | v49;
                  goto LABEL_57;
                default:
                  int v51 = 0;
                  int v52 = v48 | v50 | 0x70000;
LABEL_57:
                  *unsigned int v54 = v52;
                  v54[1] = 0;
                  int v53 = 255;
                  break;
              }
              _OWORD v54[2] = v51;
              v54[3] = v53;
              v50 -= 8;
              v45 += 4;
            }
            while (v44 != v45);
            ++v39;
            v41 += v40;
            v38 += v43;
          }
          while (v39 != a2);
        }
      }
    }
  }
  else
  {
    int v33 = 4 * (4 * a2 + 7);
    int v12 = malloc_type_malloc(4 * (4 * a2 + 7), 0x100004052888210uLL);
    *int v12 = v33;
    v12[1] = 0;
    void v12[2] = (a2 << 20) + 1572866;
    v12[3] = v10;
    v12[4] = 0;
    v12[5] = v9;
    v12[6] = 0;
    if (a2 >= 1)
    {
      int v34 = 8 * a3;
      if (a4)
      {
        unsigned int v35 = 0;
        int v36 = 0;
        do
        {
          if ((v36 & 0x7FFFFFFD) != 0) {
            int v37 = v36;
          }
          else {
            int v37 = v36 ^ 2;
          }
          writeSample((uint64_t)v12, v36++, v37, v34, v35, 1, 1, a5);
          v35 += v34;
        }
        while (a2 != v36);
      }
      else
      {
        int v56 = 0;
        do
        {
          writeSample((uint64_t)v12, v56, v56, v34, a4, 1, 1, a5);
          ++v56;
          a4 += v34;
        }
        while (a2 != v56);
      }
    }
  }
  return v12;
}

uint64_t writeSample(uint64_t result, int a2, int a3, int a4, unsigned int a5, int a6, int a7, int a8)
{
  int v8 = (void *)(result + 16 * a2 + 28);
  if (a3 == 3) {
    int v9 = 15;
  }
  else {
    int v9 = a3;
  }
  switch(a8)
  {
    case 1:
      char v10 = a4 - 1;
      void *v8 = (v9 << 24) | ((a4 - 1) << 16) | a5 | 0x40000000;
      if (!a6) {
        char v10 = a4;
      }
      int v11 = -1 << v10;
      if (a4 <= 32) {
        int v12 = ~v11;
      }
      else {
        int v12 = 0x7FFFFFFF;
      }
      int v13 = -v12;
      if (!a7) {
        int v13 = ~v12;
      }
      *(_DWORD *)(result + 16 * a2 + 36) = v13;
      *(_DWORD *)(result + 16 * a2 + 40) = v12;
      break;
    case 3:
    case 5:
      void *v8 = ((a4 << 16) - 0x10000) | (v9 << 24) | a5 | 0x40000000;
      *(_DWORD *)(result + 16 * a2 + 36) = -1;
      *(_DWORD *)(result + 16 * a2 + 40) = a7 != 0;
      break;
    case 6:
      *(_DWORD *)int v8 = ((a4 << 16) + 1073676288) | (v9 << 24) | a5 | 0xC0000000;
      *(_DWORD *)(result + 16 * a2 + 32) = 0;
      *(_DWORD *)(result + 16 * a2 + 36) = -1082130432;
      *(_DWORD *)(result + 16 * a2 + 40) = 1065353216;
      break;
    case 7:
      *(_DWORD *)int v8 = ((a4 << 16) + 2147418112) | (v9 << 24) | a5 | 0x80000000;
      *(_DWORD *)(result + 16 * a2 + 32) = 0;
      *(_DWORD *)(result + 16 * a2 + 36) = 0;
      *(_DWORD *)(result + 16 * a2 + 40) = 1065353216;
      break;
    case 8:
      int v14 = v9 << 24;
      if (v9 == 15) {
        int v14 = 520093696;
      }
      void *v8 = ((a4 << 16) - 0x10000) | a5 | v14;
      goto LABEL_20;
    default:
      void *v8 = ((a4 << 16) - 0x10000) | (v9 << 24) | a5;
      if (a8 == 2 || a8 == 4)
      {
        *(_DWORD *)(result + 16 * a2 + 36) = 0;
        *(_DWORD *)(result + 16 * a2 + 40) = a7 != 0;
      }
      else
      {
LABEL_20:
        if (a4 <= 32) {
          int v15 = ~(-1 << a4);
        }
        else {
          int v15 = -1;
        }
        *(_DWORD *)(result + 16 * a2 + 36) = 0;
        *(_DWORD *)(result + 16 * a2 + 40) = v15;
      }
      break;
  }
  return result;
}

_OWORD *createDFDPacked(int a1, int a2, int32x4_t *a3, uint64_t a4, int a5)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (a2 == 6)
  {
    unsigned int v5 = malloc_type_malloc(0x7CuLL, 0x100004052888210uLL);
    *unsigned int v5 = xmmword_1889BCC20;
    v5[1] = xmmword_1889BCC30;
    _OWORD v5[2] = xmmword_1889BCC40;
    v5[3] = xmmword_1889BCC50;
    v5[4] = xmmword_1889BCC60;
    v5[5] = xmmword_1889BCC70;
    v5[6] = xmmword_1889BCC80;
    *((void *)v5 + 14) = 0xF00000000;
    *((_DWORD *)v5 + 30) = 31;
    return v5;
  }
  int v9 = a3;
  int v10 = a2;
  if (!a1)
  {
    if (a2 < 1)
    {
      int v37 = 0;
      goto LABEL_36;
    }
    if (a2 >= 8)
    {
      uint64_t v21 = a2 & 0xFFFFFFF8;
      int v38 = a3 + 1;
      int32x4_t v39 = 0uLL;
      uint64_t v40 = v21;
      int32x4_t v41 = 0uLL;
      do
      {
        int32x4_t v39 = vaddq_s32(v38[-1], v39);
        int32x4_t v41 = vaddq_s32(*v38, v41);
        v38 += 2;
        v40 -= 8;
      }
      while (v40);
      int v22 = vaddvq_s32(vaddq_s32(v41, v39));
      if (v21 == a2) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v21 = 0;
      int v22 = 0;
    }
    uint64_t v42 = &a3->i32[v21];
    uint64_t v43 = a2 - v21;
    do
    {
      int v44 = *v42++;
      v22 += v44;
      --v43;
    }
    while (v43);
LABEL_35:
    int v37 = v22 >> 3;
LABEL_36:
    int v45 = 4 * (4 * a2 + 7);
    BOOL v46 = malloc_type_malloc(4 * (4 * a2 + 7), 0x100004052888210uLL);
    unsigned int v5 = v46;
    _DWORD *v46 = v45;
    v46[1] = 0;
    if (a5 == 8) {
      int v47 = 131329;
    }
    else {
      int v47 = 65793;
    }
    void v46[2] = (v10 << 20) + 1572866;
    v46[3] = v47;
    v46[4] = 0;
    v46[5] = v37;
    v46[6] = 0;
    if (v10 >= 1)
    {
      uint64_t v48 = 0;
      unsigned int v49 = 0;
      do
      {
        writeSample((uint64_t)v5, v48, *(_DWORD *)(a4 + 4 * v48), a3->i32[v48], v49, 1, 1, a5);
        v49 += a3->u32[v48++];
      }
      while (v10 != v48);
    }
    return v5;
  }
  int v11 = 0;
  if (a2 < 1)
  {
    int v50 = 24;
  }
  else
  {
    int v12 = v52;
    uint64_t v13 = a2;
    int v14 = a3;
    do
    {
      *v12++ = v11;
      __int32 v15 = v14->i32[0];
      int v14 = (int32x4_t *)((char *)v14 + 4);
      v11 += v15;
      --v13;
    }
    while (v13);
    uint64_t v16 = 0;
    int v17 = 0;
    int v18 = ((_BYTE)v11 - 1) & 0x18;
    do
    {
      v52[(v17 ^ v18) + 4] = v16;
      int v19 = a3->i32[v16] + v17;
      unsigned int v20 = (v19 - 1) & 0xFFFFFFF8;
      if (v20 != (v17 & 0xFFFFFFF8))
      {
        v52[(v20 ^ v18) + 4] = v16;
        ++v10;
      }
      ++v16;
      int v17 = v19;
    }
    while (a2 != v16);
    int v50 = ((_BYTE)v11 - 1) & 0x18;
  }
  BOOL v23 = malloc_type_malloc(4 * (4 * v10 + 7), 0x100004052888210uLL);
  unsigned int v5 = v23;
  if (a5 == 8) {
    int v24 = 131329;
  }
  else {
    int v24 = 65793;
  }
  *BOOL v23 = 4 * (4 * v10 + 7);
  v23[1] = 0;
  v23[2] = (v10 << 20) + 1572866;
  v23[3] = v24;
  v23[4] = 0;
  v23[5] = v11 >> 3;
  v23[6] = 0;
  int v25 = v50;
  if (v11 >= 1)
  {
    int v26 = 0;
    for (signed int i = 0; i < v11; i += v33)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v28 = (int)v52[i + 4];
          if (v28 != -1) {
            break;
          }
          signed int i = (i & 0xFFFFFFF8) + 8;
          if (i >= v11) {
            return v5;
          }
        }
        unsigned int v29 = v52[v28] ^ v25;
        if (v29 != i) {
          break;
        }
        uint64_t v30 = v28;
        writeSample((uint64_t)v5, v26++, *(_DWORD *)(a4 + 4 * v28), v9->i32[v28], i, 1, 1, a5);
        i += v9->i32[v30];
        if (i >= v11) {
          return v5;
        }
      }
      int v31 = 8 - (v52[v28] & 7);
      uint64_t v32 = 4 * v28;
      int v33 = v9->i32[v28] - v31;
      int v34 = v26 + 1;
      writeSample((uint64_t)v5, v26, *(_DWORD *)(a4 + 4 * v28), v31, v29, 0, 1, a5);
      v52[v29 + 4] = -1;
      v26 += 2;
      int v35 = *(_DWORD *)(a4 + v32);
      int v25 = v50;
      int v36 = v34;
      int v9 = a3;
      writeSample((uint64_t)v5, v36, v35, v33, i, 1, 0, a5);
    }
  }
  return v5;
}

char *createDFDCompressed(unsigned int a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = a1;
  uint64_t v11 = 4 * a1;
  int v12 = *(_DWORD *)((char *)&compSampleCount + v11);
  uint64_t result = (char *)malloc_type_malloc(4 * (4 * v12 + 7), 0x100004052888210uLL);
  *(_DWORD *)uint64_t result = 4 * (4 * v12 + 7);
  *((_DWORD *)result + 1) = 0;
  *((_DWORD *)result + 2) = (v12 << 20) + 1572866;
  if (a5 == 8) {
    int v14 = 131328;
  }
  else {
    int v14 = 65792;
  }
  *((_DWORD *)result + 3) = *(_DWORD *)((char *)&compModelMapping + v11) | v14;
  *((_DWORD *)result + 4) = ((a3 << 8) - 256) | (a2 - 1) | ((a4 << 16) - 0x10000);
  *((_DWORD *)result + 5) = *(_DWORD *)((char *)&compBytes + v11);
  *((_DWORD *)result + 6) = 0;
  int v15 = *(_DWORD *)((char *)&compFirstChannel + v11);
  switch(a5)
  {
    case 1:
      int v16 = (compChannelBits[v10] << 16) - 0x10000;
      *((_DWORD *)result + 7) = v16 | (v15 << 24) | 0x40000000;
      *((_DWORD *)result + 8) = 0;
      int v17 = 0x7FFFFFFF;
      unsigned int v18 = 0x80000000;
      *((_DWORD *)result + 9) = 0x80000000;
      *((_DWORD *)result + 10) = 0x7FFFFFFF;
      if ((0x162CuLL >> v10)) {
        goto LABEL_22;
      }
      break;
    case 3:
    case 5:
      int v16 = (compChannelBits[v10] << 16) - 0x10000;
      *((_DWORD *)result + 7) = v16 | (v15 << 24) | 0x40000000;
      *((_DWORD *)result + 8) = 0;
      int v17 = 1;
      unsigned int v18 = -1;
      *((_DWORD *)result + 9) = -1;
      *((_DWORD *)result + 10) = 1;
      if ((0x162CuLL >> v10)) {
        goto LABEL_22;
      }
      break;
    case 6:
      int v16 = (compChannelBits[v10] << 16) - 0x10000;
      *((_DWORD *)result + 7) = v16 | (v15 << 24) | 0xC0000000;
      *((_DWORD *)result + 8) = 0;
      int v17 = 1065353216;
      unsigned int v18 = -1082130432;
      *((_DWORD *)result + 9) = -1082130432;
      *((_DWORD *)result + 10) = 1065353216;
      if ((0x162CuLL >> v10)) {
        goto LABEL_22;
      }
      break;
    case 7:
      unsigned int v18 = 0;
      int v16 = (compChannelBits[v10] << 16) - 0x10000;
      *((_DWORD *)result + 7) = v16 | (v15 << 24) | 0x80000000;
      *((_DWORD *)result + 8) = 0;
      int v17 = 1065353216;
      *((_DWORD *)result + 9) = 0;
      *((_DWORD *)result + 10) = 1065353216;
      if ((0x162CuLL >> v10)) {
        goto LABEL_22;
      }
      break;
    case 8:
      unsigned int v18 = 0;
      int v19 = v15 << 24;
      if ((0x40CuLL >> v10)) {
        int v19 = 520093696;
      }
      int v16 = (compChannelBits[v10] << 16) - 0x10000;
      *((_DWORD *)result + 7) = v16 | v19;
      *((_DWORD *)result + 8) = 0;
      int v17 = -1;
      *((_DWORD *)result + 9) = 0;
      *((_DWORD *)result + 10) = -1;
      if ((0x162CuLL >> v10)) {
        goto LABEL_22;
      }
      break;
    default:
      int v16 = (compChannelBits[v10] << 16) - 0x10000;
      *(void *)(result + 28) = v16 | (v15 << 24);
      if (a5 == 4 || a5 == 2)
      {
        unsigned int v18 = 0;
        int v17 = 1;
        *((_DWORD *)result + 9) = 0;
        *((_DWORD *)result + 10) = 1;
        if (((0x162CuLL >> v10) & 1) == 0) {
          return result;
        }
      }
      else
      {
        unsigned int v18 = 0;
        int v17 = -1;
        *((_DWORD *)result + 9) = 0;
        *((_DWORD *)result + 10) = -1;
        if (((0x162CuLL >> v10) & 1) == 0) {
          return result;
        }
      }
LABEL_22:
      int v20 = compSecondChannel[v10];
      switch(a5)
      {
        case 1:
        case 3:
        case 5:
          v20 |= 0x40u;
          break;
        case 6:
          v20 |= 0xC0u;
          break;
        case 7:
          v20 |= 0x80u;
          break;
        case 8:
          if (a1 == 9) {
            int v20 = 31;
          }
          break;
        default:
          break;
      }
      *(void *)(result + 44) = compSecondChannelOffset[v10] | v16 | (v20 << 24);
      *((_DWORD *)result + 13) = v18;
      *((_DWORD *)result + 14) = v17;
      break;
  }
  return result;
}

char *createDFDDepthStencil(int a1, int a2, int a3)
{
  if (a2 <= 0) {
    int v6 = a1 > 0;
  }
  else {
    int v6 = (a1 > 0) + 1;
  }
  uint64_t result = (char *)malloc_type_malloc((16 * v6 + 28), 0x100004052888210uLL);
  *(_DWORD *)uint64_t result = 16 * v6 + 28;
  *((_DWORD *)result + 1) = 0;
  *((_DWORD *)result + 2) = (v6 << 20) + 1572866;
  *(void *)(result + 12) = 65793;
  *((_DWORD *)result + 5) = a3;
  *((_DWORD *)result + 6) = 0;
  if (a1 == 32)
  {
    *(_OWORD *)(result + 28) = xmmword_1889BCC90;
    if (a2 <= 0) {
      return result;
    }
    goto LABEL_12;
  }
  if (a1 <= 0)
  {
    if (a2 > 0)
    {
      int v9 = (int *)(result + 28);
      int v10 = (a2 << 16) - 0x10000;
      uint64_t v11 = 10;
      uint64_t v12 = 9;
      uint64_t v13 = 8;
      goto LABEL_13;
    }
  }
  else
  {
    *((_DWORD *)result + 7) = ((a1 << 16) - 0x10000) | 0xE000000;
    *((void *)result + 4) = 0;
    if (a1 <= 0x20) {
      int v8 = ~(-1 << a1);
    }
    else {
      int v8 = -1;
    }
    *((_DWORD *)result + 10) = v8;
    if (a2 > 0)
    {
LABEL_12:
      int v9 = (int *)(result + 44);
      int v10 = ((a2 << 16) - 0x10000) | a1;
      uint64_t v11 = 14;
      uint64_t v12 = 13;
      uint64_t v13 = 12;
LABEL_13:
      *int v9 = v10 | 0xD000000;
      *(_DWORD *)&result[4 * v13] = 0;
      *(_DWORD *)&result[4 * v12] = 0;
      *(_DWORD *)&result[4 * v11] = 1;
    }
  }
  return result;
}

uint64_t interpretDFD(_DWORD *a1, void *a2, void *a3, void *a4, void *a5, unsigned int *a6)
{
  if (*a1 < 0x2Cu) {
    return 64;
  }
  unsigned int v6 = (a1[2] >> 18) - 6;
  if (v6 > 0x103 || *a1 != ((4 * v6) & 0x7FFFFFF0) + 28) {
    return 64;
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  if (a1[5] > 0xFFu || a1[6]) {
    return 66;
  }
  int v8 = a1[3];
  if (v8 != 1) {
    return 67;
  }
  unsigned int v9 = v6 >> 2;
  uint64_t v10 = 4 * ((v8 & 0xFF0000) == 0x20000);
  if (v6 < 4) {
    goto LABEL_9;
  }
  if (v9 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v9;
  }
  uint64_t v12 = a1 + 8;
  uint64_t v13 = v11;
  do
  {
    int v14 = *v12;
    v12 += 4;
    if (v14) {
      return 65;
    }
    --v13;
  }
  while (v13);
  int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  unsigned int v18 = a1 + 7;
  uint64_t v19 = v11;
  do
  {
    int v20 = *v18;
    if (v15)
    {
      if (v20 < 0)
      {
        if ((v10 & 0x20) == 0) {
          return 68;
        }
      }
      else if ((v10 & 0x20) != 0)
      {
        return 68;
      }
      int v15 = 1;
    }
    else
    {
      int v15 = v20 >> 31;
      if (v20 >= 0) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = v10 | 0x20;
      }
    }
    unsigned int v21 = *v18 & 0x40000000;
    if (v16)
    {
      if (v21)
      {
        if ((v10 & 0x10) == 0) {
          return 68;
        }
      }
      else if ((v10 & 0x10) != 0)
      {
        return 68;
      }
      int v16 = 1;
    }
    else
    {
      int v16 = v21 >> 30;
      uint64_t v10 = v10 | (v21 >> 26);
    }
    if (v17) {
      goto LABEL_23;
    }
    int v17 = *((unsigned __int8 *)v18 + 2);
    if (*((unsigned char *)v18 + 2))
    {
      if ((v10 & 0x20) == 0)
      {
        if (v18[3] == 1) {
          uint64_t v10 = v10;
        }
        else {
          uint64_t v10 = v10 | 8;
        }
LABEL_23:
        int v17 = 1;
        goto LABEL_24;
      }
      int v17 = 1;
      if (*((float *)v18 + 3) == 1.0) {
        uint64_t v10 = v10;
      }
      else {
        uint64_t v10 = v10 | 8;
      }
    }
LABEL_24:
    v18 += 4;
    --v19;
  }
  while (v19);
  BOOL v46 = (char *)(a1 + 7);
  while (1)
  {
    char v47 = *v46;
    v46 += 16;
    if ((v47 & 7) != 0) {
      break;
    }
    if (!--v11) {
      goto LABEL_9;
    }
  }
  uint64_t v10 = v10 | 2;
LABEL_9:
  if ((v10 & 2) != 0)
  {
    *a6 = a1[5];
    if (v6 >= 4)
    {
      char v35 = 0;
      int v36 = 0;
      char v37 = 0;
      if (v9 <= 1) {
        uint64_t v38 = 1;
      }
      else {
        uint64_t v38 = v9;
      }
      int32x4_t v39 = a1 + 7;
      int v40 = -1;
      while (1)
      {
        unsigned int v42 = *v39;
        v39 += 4;
        unsigned int v41 = v42;
        int v43 = HIBYTE(v42) & 0xF;
        uint64_t result = 67;
        int v44 = a2;
        switch(v43)
        {
          case 0:
            goto LABEL_81;
          case 1:
            int v44 = a3;
            goto LABEL_81;
          case 2:
            int v44 = a4;
            goto LABEL_81;
          case 15:
            int v44 = a5;
LABEL_81:
            int v45 = BYTE2(v41) + 1;
            if (v43 == v40)
            {
              if ((unsigned __int16)v41 >> 3 != v36 - 1
                || ((v41 | (v35 + v37)) & 7) != 0)
              {
                return 64;
              }
              uint64_t v10 = v10 | 1;
              v44[1] += v45;
              char v35 = BYTE2(v41) + 1;
              int v36 = (unsigned __int16)v41 >> 3;
              char v37 = v41;
              if (!--v38) {
                goto LABEL_48;
              }
            }
            else
            {
              if (v44[1]) {
                return 64;
              }
              *int v44 = (unsigned __int16)v41;
              v44[1] = v45;
              int v40 = v43;
              char v35 = BYTE2(v41) + 1;
              int v36 = (unsigned __int16)v41 >> 3;
              char v37 = v41;
              if (!--v38) {
                goto LABEL_48;
              }
            }
            break;
          default:
            return result;
        }
      }
    }
LABEL_48:
    if (v10)
    {
      int v48 = 8 * *a6 - 8;
      *(_DWORD *)a2 ^= v48;
      *(_DWORD *)a3 ^= v48;
      *(_DWORD *)a4 ^= v48;
      *(_DWORD *)a5 ^= v48;
      return v10;
    }
    else
    {
      return v10;
    }
  }
  else
  {
    if (v6 >= 4)
    {
      unsigned int v22 = 0;
      int v23 = 0;
      int v24 = 0;
      if (v9 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v9;
      }
      int v26 = a1 + 7;
      int v27 = -1;
      while (1)
      {
        unsigned int v30 = *v26;
        v26 += 4;
        unsigned int v29 = v30;
        int v31 = HIBYTE(v30) & 0xF;
        uint64_t result = 67;
        uint64_t v32 = (int *)a2;
        switch(v31)
        {
          case 0:
            goto LABEL_61;
          case 1:
            uint64_t v32 = (int *)a3;
            goto LABEL_61;
          case 2:
            uint64_t v32 = (int *)a4;
            goto LABEL_61;
          case 15:
            uint64_t v32 = (int *)a5;
LABEL_61:
            int v33 = (unsigned __int16)v29 >> 3;
            unsigned int v34 = (BYTE2(v29) + 1) >> 3;
            if (v31 == v27)
            {
              if (v33 == v23 - 1)
              {
                if (v24 && (v10 & 1) == 0) {
                  return 64;
                }
                uint64_t v10 = v10 | 1;
                *uint64_t v32 = v33;
              }
              else if (v33 != v22 + v23 || v24 && (v10 & 1) != 0)
              {
                return 64;
              }
              int v28 = v32[1];
              v32[1] = v28 + v34;
              int v24 = 1;
              *a6 = v28 + v34;
              unsigned int v22 = (BYTE2(v29) + 1) >> 3;
              int v23 = (unsigned __int16)v29 >> 3;
              uint64_t result = v10;
              if (!--v25) {
                return result;
              }
            }
            else
            {
              if (v32[1]) {
                return 64;
              }
              *uint64_t v32 = v33;
              v32[1] = v34;
              unsigned int v22 = (BYTE2(v29) + 1) >> 3;
              int v27 = v31;
              *a6 = v34;
              int v23 = (unsigned __int16)v29 >> 3;
              uint64_t result = v10;
              if (!--v25) {
                return result;
              }
            }
            break;
          default:
            return result;
        }
      }
    }
    return v10;
  }
}

uint64_t getDFDComponentInfoUnpacked(uint64_t result, _DWORD *a2, unsigned int *a3)
{
  unsigned int v3 = (*(_DWORD *)(result + 8) >> 18) - 6;
  *a2 = 0;
  if (v3 >= 4)
  {
    LODWORD(v4) = v3 >> 2;
    if (v4 <= 1) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v4;
    }
    unsigned int v5 = (unsigned int *)(result + 28);
    int v6 = -1;
    do
    {
      while (1)
      {
        unsigned int v7 = *v5;
        v5 += 4;
        unsigned int v8 = (BYTE2(v7) + 1) >> 3;
        int v9 = HIBYTE(v7) & 0xF;
        if (v9 == v6) {
          break;
        }
        ++*a2;
        int v6 = v9;
        *a3 = v8;
        if (!--v4) {
          return result;
        }
      }
      *a3 += v8;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t getDFDNumComponents(uint64_t a1)
{
  unsigned int v1 = (*(_DWORD *)(a1 + 8) >> 18) - 6;
  if (v1 < 4) {
    return 0;
  }
  unsigned int v3 = v1 >> 2;
  if (v3 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v4 >= 9)
  {
    if ((v4 & 7) != 0) {
      uint64_t v8 = v4 & 7;
    }
    else {
      uint64_t v8 = 8;
    }
    uint64_t v5 = v4 - v8;
    int v9 = (const float *)(a1 + 92);
    uint64_t v10 = v8 - v4;
    *(void *)&unsigned long long v11 = -1;
    *((void *)&v11 + 1) = -1;
    int32x4_t v12 = 0uLL;
    int32x4_t v13 = 0uLL;
    do
    {
      int v14 = v9 - 16;
      unsigned long long v15 = (unsigned __int128)vld4q_f32(v14);
      unsigned long long v16 = (unsigned __int128)vld4q_f32(v9);
      unsigned long long v17 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v15, 0x18uLL) & __PAIR128__(0xFFFFFF0FFFFFFF0FLL, 0xFFFFFF0FFFFFFF0FLL);
      int32x4_t v18 = (int32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v17, 0xCuLL);
      unsigned long long v11 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v16, 0x18uLL) & __PAIR128__(0xFFFFFF0FFFFFFF0FLL, 0xFFFFFF0FFFFFFF0FLL);
      int32x4_t v12 = vsubq_s32(v12, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v17, v18)));
      int32x4_t v13 = vsubq_s32(v13, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32((int32x4_t)v11, (int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v11, 0xCuLL))));
      v9 += 32;
      v10 += 8;
    }
    while (v10);
    LODWORD(v6) = vaddvq_s32(vaddq_s32(v13, v12));
    int v7 = HIDWORD(v11);
  }
  else
  {
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    int v7 = -1;
  }
  uint64_t v19 = a1 + 16 * v5 + 28;
  uint64_t v20 = v5 - v4;
  do
  {
    int v21 = *(unsigned char *)(v19 + 3) & 0xF;
    if (v21 == v7) {
      uint64_t v6 = v6;
    }
    else {
      uint64_t v6 = (v6 + 1);
    }
    v19 += 16;
    int v7 = v21;
  }
  while (!__CFADD__(v20++, 1));
  return v6;
}

uint64_t recreateBytesPlane0FromSampleInfo(_DWORD *a1, unsigned int *a2)
{
  if (*a1 < 0x2Cu) {
    return 64;
  }
  unsigned int v3 = (a1[2] >> 18) - 6;
  if (v3 > 0x103 || *a1 != ((4 * v3) & 0x7FFFFFF0) + 28) {
    return 64;
  }
  uint64_t v5 = malloc_type_malloc(v3 & 0xFFFFFFFC, 0x100004052888210uLL);
  memset(v5, 255, v3 & 0xFFFFFFFC);
  if (v3 >= 4)
  {
    uint64_t v8 = 0;
    unsigned int v6 = 0;
    int v9 = a1 + 1;
    unsigned int v10 = v3 >> 2;
    if (v3 >> 2 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    do
    {
      uint64_t v12 = 0;
      int v13 = (unsigned __int16)v9[4 * v8 + 6];
      while (v13 != *((_DWORD *)v5 + v12))
      {
        if (v11 == ++v12)
        {
          LODWORD(v12) = v11;
          break;
        }
      }
      if (v12 == v10)
      {
        v6 += BYTE2(v9[4 * v8 + 6]) + 1;
        *((_DWORD *)v5 + v8) = v13;
      }
      ++v8;
    }
    while (v8 != v11);
  }
  else
  {
    unsigned int v6 = 0;
  }
  free(v5);
  *a2 = v6 >> 3;
  return 1;
}

char *vk2dfd(int a1)
{
  uint64_t result = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a1 > 1000287999)
  {
    switch(a1)
    {
      case 1000288000:
        unsigned int v6 = 13;
        int v7 = 3;
        goto LABEL_16;
      case 1000288001:
        unsigned int v6 = 13;
        int v7 = 3;
        goto LABEL_20;
      case 1000288002:
        unsigned int v6 = 13;
        int v7 = 3;
        goto LABEL_24;
      case 1000288003:
        unsigned int v6 = 13;
        int v7 = 4;
LABEL_16:
        int v9 = 3;
        int v10 = 3;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288004:
        unsigned int v6 = 13;
        int v7 = 4;
LABEL_20:
        int v9 = 3;
        int v10 = 3;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288005:
        unsigned int v6 = 13;
        int v7 = 4;
LABEL_24:
        int v9 = 3;
        int v10 = 3;
        int v11 = 6;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288006:
        unsigned int v6 = 13;
        int v7 = 4;
        int v9 = 4;
        int v10 = 3;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288007:
        unsigned int v6 = 13;
        int v7 = 4;
        int v9 = 4;
        int v10 = 3;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288008:
        unsigned int v6 = 13;
        int v7 = 4;
        int v9 = 4;
        int v10 = 3;
        int v11 = 6;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288009:
        unsigned int v6 = 13;
        int v7 = 4;
        goto LABEL_40;
      case 1000288010:
        unsigned int v6 = 13;
        int v7 = 4;
        goto LABEL_44;
      case 1000288011:
        unsigned int v6 = 13;
        int v7 = 4;
        goto LABEL_48;
      case 1000288012:
        unsigned int v6 = 13;
        int v7 = 5;
LABEL_40:
        int v9 = 4;
        int v10 = 4;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288013:
        unsigned int v6 = 13;
        int v7 = 5;
LABEL_44:
        int v9 = 4;
        int v10 = 4;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288014:
        unsigned int v6 = 13;
        int v7 = 5;
LABEL_48:
        int v9 = 4;
        int v10 = 4;
        int v11 = 6;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288015:
        unsigned int v6 = 13;
        int v7 = 5;
        int v9 = 5;
        int v10 = 4;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288016:
        unsigned int v6 = 13;
        int v7 = 5;
        int v9 = 5;
        int v10 = 4;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288017:
        unsigned int v6 = 13;
        int v7 = 5;
        int v9 = 5;
        int v10 = 4;
        int v11 = 6;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288018:
        unsigned int v6 = 13;
        int v7 = 5;
        goto LABEL_64;
      case 1000288019:
        unsigned int v6 = 13;
        int v7 = 5;
        goto LABEL_68;
      case 1000288020:
        unsigned int v6 = 13;
        int v7 = 5;
        goto LABEL_72;
      case 1000288021:
        unsigned int v6 = 13;
        int v7 = 6;
LABEL_64:
        int v9 = 5;
        int v10 = 5;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288022:
        unsigned int v6 = 13;
        int v7 = 6;
LABEL_68:
        int v9 = 5;
        int v10 = 5;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288023:
        unsigned int v6 = 13;
        int v7 = 6;
LABEL_72:
        int v9 = 5;
        int v10 = 5;
        int v11 = 6;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288024:
        unsigned int v6 = 13;
        int v7 = 6;
        int v9 = 6;
        int v10 = 5;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288025:
        unsigned int v6 = 13;
        int v7 = 6;
        int v9 = 6;
        int v10 = 5;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288026:
        unsigned int v6 = 13;
        int v7 = 6;
        int v9 = 6;
        int v10 = 5;
        int v11 = 6;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288027:
        unsigned int v6 = 13;
        int v7 = 6;
        int v9 = 6;
        int v10 = 6;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288028:
        unsigned int v6 = 13;
        int v7 = 6;
        int v9 = 6;
        int v10 = 6;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 1000288029:
        unsigned int v6 = 13;
        int v7 = 6;
        int v9 = 6;
        int v10 = 6;
        int v11 = 6;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      default:
        if (a1 == 1000340000)
        {
          uint64_t v8 = &xmmword_1889AAEE0;
        }
        else
        {
          if (a1 != 1000340001) {
            return result;
          }
          uint64_t v8 = &xmmword_18898C3A0;
        }
LABEL_96:
        long long v35 = *v8;
        uint64_t v12 = &xmmword_1889BCEE0;
LABEL_203:
        long long v34 = *v12;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 4;
LABEL_204:
        int v24 = 0;
LABEL_205:
        uint64_t result = (char *)createDFDPacked(0, v5, (int32x4_t *)v3, (uint64_t)v4, v24);
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        *(void *)&long long v35 = 1;
        *(void *)&long long v34 = 0x400000004;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 2;
        goto LABEL_204;
      case 2:
        uint64_t v8 = &xmmword_1889BCE8C;
        goto LABEL_96;
      case 3:
        uint64_t v8 = &xmmword_1889AD780;
        goto LABEL_96;
      case 4:
        DWORD2(v35) = 0;
        uint64_t v13 = 0x100000002;
        goto LABEL_99;
      case 5:
        DWORD2(v35) = 2;
        uint64_t v13 = 0x100000000;
LABEL_99:
        *(void *)&long long v35 = v13;
        DWORD2(v34) = 5;
        *(void *)&long long v34 = 0x600000005;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 3;
        goto LABEL_204;
      case 6:
        int v14 = &xmmword_1889BCE8C;
        goto LABEL_102;
      case 7:
        int v14 = &xmmword_1889AD780;
LABEL_102:
        long long v35 = *v14;
        uint64_t v12 = &xmmword_1889BCEA0;
        goto LABEL_203;
      case 8:
        long long v35 = xmmword_1889AAEE0;
        uint64_t v12 = &xmmword_1889BCEB0;
        goto LABEL_203;
      case 9:
        int v15 = 1;
        goto LABEL_133;
      case 10:
        int v15 = 1;
        goto LABEL_137;
      case 11:
        int v15 = 1;
        goto LABEL_141;
      case 12:
        int v15 = 1;
        goto LABEL_145;
      case 13:
        int v15 = 1;
        goto LABEL_149;
      case 14:
        int v15 = 1;
        goto LABEL_153;
      case 15:
        int v15 = 1;
        goto LABEL_157;
      case 16:
        int v15 = 2;
        goto LABEL_133;
      case 17:
        int v15 = 2;
        goto LABEL_137;
      case 18:
        int v15 = 2;
        goto LABEL_141;
      case 19:
        int v15 = 2;
        goto LABEL_145;
      case 20:
        int v15 = 2;
        goto LABEL_149;
      case 21:
        int v15 = 2;
        goto LABEL_153;
      case 22:
        int v15 = 2;
        goto LABEL_157;
      case 23:
        int v15 = 3;
        goto LABEL_133;
      case 24:
        int v15 = 3;
        goto LABEL_137;
      case 25:
        int v15 = 3;
        goto LABEL_141;
      case 26:
        int v15 = 3;
        goto LABEL_145;
      case 27:
        int v15 = 3;
        goto LABEL_149;
      case 28:
        int v15 = 3;
        goto LABEL_153;
      case 29:
        int v15 = 3;
        goto LABEL_157;
      case 30:
        int v15 = 3;
        goto LABEL_161;
      case 31:
        int v15 = 3;
        goto LABEL_165;
      case 32:
        int v15 = 3;
        goto LABEL_169;
      case 33:
        int v15 = 3;
        goto LABEL_173;
      case 34:
        int v15 = 3;
        goto LABEL_177;
      case 35:
        int v15 = 3;
        goto LABEL_181;
      case 36:
        int v15 = 3;
        goto LABEL_185;
      case 37:
        int v15 = 4;
LABEL_133:
        int v16 = 1;
        unsigned int v17 = 0;
        int v18 = 0;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 38:
        int v15 = 4;
LABEL_137:
        int v16 = 1;
        unsigned int v17 = 0;
        int v18 = 1;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 39:
        int v15 = 4;
LABEL_141:
        int v16 = 1;
        unsigned int v17 = 0;
        int v18 = 2;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 40:
        int v15 = 4;
LABEL_145:
        int v16 = 1;
        unsigned int v17 = 0;
        int v18 = 3;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 41:
        int v15 = 4;
LABEL_149:
        int v16 = 1;
        unsigned int v17 = 0;
        int v18 = 4;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 42:
        int v15 = 4;
LABEL_153:
        int v16 = 1;
        unsigned int v17 = 0;
        int v18 = 5;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 43:
        int v15 = 4;
LABEL_157:
        int v16 = 1;
        unsigned int v17 = 0;
        int v18 = 8;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 44:
        int v15 = 4;
LABEL_161:
        int v16 = 1;
        unsigned int v17 = 1;
        int v18 = 0;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 45:
        int v15 = 4;
LABEL_165:
        int v16 = 1;
        unsigned int v17 = 1;
        int v18 = 1;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 46:
        int v15 = 4;
LABEL_169:
        int v16 = 1;
        unsigned int v17 = 1;
        int v18 = 2;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 47:
        int v15 = 4;
LABEL_173:
        int v16 = 1;
        unsigned int v17 = 1;
        int v18 = 3;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 48:
        int v15 = 4;
LABEL_177:
        int v16 = 1;
        unsigned int v17 = 1;
        int v18 = 4;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 49:
        int v15 = 4;
LABEL_181:
        int v16 = 1;
        unsigned int v17 = 1;
        int v18 = 5;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 50:
        int v15 = 4;
LABEL_185:
        int v16 = 1;
        unsigned int v17 = 1;
        int v18 = 8;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 51:
        long long v35 = xmmword_18898C3A0;
        uint64_t v12 = &xmmword_1889BCEC0;
        goto LABEL_203;
      case 52:
        long long v35 = xmmword_18898C3A0;
        uint64_t v19 = &xmmword_1889BCEC0;
        goto LABEL_209;
      case 53:
        long long v35 = xmmword_18898C3A0;
        uint64_t v20 = &xmmword_1889BCEC0;
        goto LABEL_212;
      case 54:
        long long v35 = xmmword_18898C3A0;
        int v21 = &xmmword_1889BCEC0;
        goto LABEL_215;
      case 55:
        long long v35 = xmmword_18898C3A0;
        unsigned int v22 = &xmmword_1889BCEC0;
        goto LABEL_218;
      case 56:
        long long v35 = xmmword_18898C3A0;
        int v23 = &xmmword_1889BCEC0;
        goto LABEL_221;
      case 57:
        long long v34 = xmmword_1889BCEC0;
        long long v35 = xmmword_18898C3A0;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 4;
        int v24 = 8;
        goto LABEL_205;
      case 58:
        uint64_t v25 = &xmmword_1889AAEE0;
        goto LABEL_202;
      case 59:
        int v26 = &xmmword_1889AAEE0;
        goto LABEL_208;
      case 60:
        int v27 = &xmmword_1889AAEE0;
        goto LABEL_211;
      case 61:
        int v28 = &xmmword_1889AAEE0;
        goto LABEL_214;
      case 62:
        unsigned int v29 = &xmmword_1889AAEE0;
        goto LABEL_217;
      case 63:
        unsigned int v30 = &xmmword_1889AAEE0;
        goto LABEL_220;
      case 64:
        uint64_t v25 = &xmmword_18898C3A0;
LABEL_202:
        long long v35 = *v25;
        uint64_t v12 = &xmmword_1889BCED0;
        goto LABEL_203;
      case 65:
        int v26 = &xmmword_18898C3A0;
LABEL_208:
        long long v35 = *v26;
        uint64_t v19 = &xmmword_1889BCED0;
LABEL_209:
        long long v34 = *v19;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 4;
        int v24 = 1;
        goto LABEL_205;
      case 66:
        int v27 = &xmmword_18898C3A0;
LABEL_211:
        long long v35 = *v27;
        uint64_t v20 = &xmmword_1889BCED0;
LABEL_212:
        long long v34 = *v20;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 4;
        int v24 = 2;
        goto LABEL_205;
      case 67:
        int v28 = &xmmword_18898C3A0;
LABEL_214:
        long long v35 = *v28;
        int v21 = &xmmword_1889BCED0;
LABEL_215:
        long long v34 = *v21;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 4;
        int v24 = 3;
        goto LABEL_205;
      case 68:
        unsigned int v29 = &xmmword_18898C3A0;
LABEL_217:
        long long v35 = *v29;
        unsigned int v22 = &xmmword_1889BCED0;
LABEL_218:
        long long v34 = *v22;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 4;
        int v24 = 4;
        goto LABEL_205;
      case 69:
        unsigned int v30 = &xmmword_18898C3A0;
LABEL_220:
        long long v35 = *v30;
        int v23 = &xmmword_1889BCED0;
LABEL_221:
        long long v34 = *v23;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 4;
        int v24 = 5;
        goto LABEL_205;
      case 70:
        int v15 = 1;
        goto LABEL_244;
      case 71:
        int v15 = 1;
        goto LABEL_248;
      case 72:
        int v15 = 1;
        goto LABEL_252;
      case 73:
        int v15 = 1;
        goto LABEL_256;
      case 74:
        int v15 = 1;
        goto LABEL_260;
      case 75:
        int v15 = 1;
        goto LABEL_264;
      case 76:
        int v15 = 1;
        goto LABEL_268;
      case 77:
        int v15 = 2;
        goto LABEL_244;
      case 78:
        int v15 = 2;
        goto LABEL_248;
      case 79:
        int v15 = 2;
        goto LABEL_252;
      case 80:
        int v15 = 2;
        goto LABEL_256;
      case 81:
        int v15 = 2;
        goto LABEL_260;
      case 82:
        int v15 = 2;
        goto LABEL_264;
      case 83:
        int v15 = 2;
        goto LABEL_268;
      case 84:
        int v15 = 3;
        goto LABEL_244;
      case 85:
        int v15 = 3;
        goto LABEL_248;
      case 86:
        int v15 = 3;
        goto LABEL_252;
      case 87:
        int v15 = 3;
        goto LABEL_256;
      case 88:
        int v15 = 3;
        goto LABEL_260;
      case 89:
        int v15 = 3;
        goto LABEL_264;
      case 90:
        int v15 = 3;
        goto LABEL_268;
      case 91:
        int v15 = 4;
LABEL_244:
        int v16 = 2;
        unsigned int v17 = 0;
        int v18 = 0;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 92:
        int v15 = 4;
LABEL_248:
        int v16 = 2;
        unsigned int v17 = 0;
        int v18 = 1;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 93:
        int v15 = 4;
LABEL_252:
        int v16 = 2;
        unsigned int v17 = 0;
        int v18 = 2;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 94:
        int v15 = 4;
LABEL_256:
        int v16 = 2;
        unsigned int v17 = 0;
        int v18 = 3;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 95:
        int v15 = 4;
LABEL_260:
        int v16 = 2;
        unsigned int v17 = 0;
        int v18 = 4;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 96:
        int v15 = 4;
LABEL_264:
        int v16 = 2;
        unsigned int v17 = 0;
        int v18 = 5;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 97:
        int v15 = 4;
LABEL_268:
        int v16 = 2;
        unsigned int v17 = 0;
        int v18 = 6;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 98:
        int v15 = 1;
        goto LABEL_281;
      case 99:
        int v15 = 1;
        goto LABEL_285;
      case 100:
        int v15 = 1;
        goto LABEL_289;
      case 101:
        int v15 = 2;
        goto LABEL_281;
      case 102:
        int v15 = 2;
        goto LABEL_285;
      case 103:
        int v15 = 2;
        goto LABEL_289;
      case 104:
        int v15 = 3;
        goto LABEL_281;
      case 105:
        int v15 = 3;
        goto LABEL_285;
      case 106:
        int v15 = 3;
        goto LABEL_289;
      case 107:
        int v15 = 4;
LABEL_281:
        int v16 = 4;
        unsigned int v17 = 0;
        int v18 = 4;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 108:
        int v15 = 4;
LABEL_285:
        int v16 = 4;
        unsigned int v17 = 0;
        int v18 = 5;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 109:
        int v15 = 4;
LABEL_289:
        int v16 = 4;
        unsigned int v17 = 0;
        int v18 = 6;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 110:
        int v15 = 1;
        goto LABEL_302;
      case 111:
        int v15 = 1;
        goto LABEL_306;
      case 112:
        int v15 = 1;
        goto LABEL_310;
      case 113:
        int v15 = 2;
        goto LABEL_302;
      case 114:
        int v15 = 2;
        goto LABEL_306;
      case 115:
        int v15 = 2;
        goto LABEL_310;
      case 116:
        int v15 = 3;
        goto LABEL_302;
      case 117:
        int v15 = 3;
        goto LABEL_306;
      case 118:
        int v15 = 3;
        goto LABEL_310;
      case 119:
        int v15 = 4;
LABEL_302:
        int v16 = 8;
        unsigned int v17 = 0;
        int v18 = 4;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 120:
        int v15 = 4;
LABEL_306:
        int v16 = 8;
        unsigned int v17 = 0;
        int v18 = 5;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 121:
        int v15 = 4;
LABEL_310:
        int v16 = 8;
        unsigned int v17 = 0;
        int v18 = 6;
        return (char *)createDFDUnpacked(0, v15, v16, v17, v18);
      case 122:
        DWORD2(v35) = 2;
        *(void *)&long long v35 = 0x100000000;
        DWORD2(v34) = 10;
        *(void *)&long long v34 = 0xB0000000BLL;
        unsigned int v3 = &v34;
        uint64_t v4 = &v35;
        int v5 = 3;
        int v24 = 7;
        goto LABEL_205;
      case 123:
        LODWORD(v35) = 0;
        LODWORD(v34) = 0;
        unsigned int v3 = &v35;
        uint64_t v4 = &v34;
        int v5 = 6;
        int v24 = 7;
        goto LABEL_205;
      case 124:
        int v31 = 16;
        int v32 = 0;
        int v33 = 2;
        return createDFDDepthStencil(v31, v32, v33);
      case 125:
        int v31 = 24;
        goto LABEL_320;
      case 126:
        int v31 = 32;
LABEL_320:
        int v32 = 0;
        int v33 = 4;
        return createDFDDepthStencil(v31, v32, v33);
      case 127:
        int v31 = 0;
        int v32 = 8;
        int v33 = 1;
        return createDFDDepthStencil(v31, v32, v33);
      case 128:
        int v31 = 16;
        int v32 = 8;
        int v33 = 3;
        return createDFDDepthStencil(v31, v32, v33);
      case 129:
        int v31 = 24;
        int v32 = 8;
        int v33 = 4;
        return createDFDDepthStencil(v31, v32, v33);
      case 130:
        int v31 = 32;
        int v32 = 8;
        int v33 = 5;
        return createDFDDepthStencil(v31, v32, v33);
      case 131:
        unsigned int v6 = 0;
        goto LABEL_455;
      case 132:
        unsigned int v6 = 0;
        goto LABEL_464;
      case 133:
        unsigned int v6 = 1;
        goto LABEL_455;
      case 134:
        unsigned int v6 = 1;
        goto LABEL_464;
      case 135:
        unsigned int v6 = 2;
        goto LABEL_455;
      case 136:
        unsigned int v6 = 2;
        goto LABEL_464;
      case 137:
        unsigned int v6 = 3;
        goto LABEL_455;
      case 138:
        unsigned int v6 = 3;
        goto LABEL_464;
      case 139:
        unsigned int v6 = 4;
        goto LABEL_455;
      case 140:
        unsigned int v6 = 4;
        goto LABEL_363;
      case 141:
        unsigned int v6 = 5;
        goto LABEL_455;
      case 142:
        unsigned int v6 = 5;
        goto LABEL_363;
      case 143:
        unsigned int v6 = 6;
        int v7 = 4;
        int v9 = 4;
        int v10 = 1;
        int v11 = 7;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 144:
        unsigned int v6 = 6;
        int v7 = 4;
LABEL_423:
        int v9 = 4;
        int v10 = 1;
        int v11 = 6;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 145:
        unsigned int v6 = 7;
        goto LABEL_455;
      case 146:
        unsigned int v6 = 7;
        goto LABEL_464;
      case 147:
        unsigned int v6 = 8;
        goto LABEL_455;
      case 148:
        unsigned int v6 = 8;
        goto LABEL_464;
      case 149:
        unsigned int v6 = 9;
        goto LABEL_455;
      case 150:
        unsigned int v6 = 9;
        goto LABEL_464;
      case 151:
        unsigned int v6 = 10;
        goto LABEL_455;
      case 152:
        unsigned int v6 = 10;
        goto LABEL_464;
      case 153:
        unsigned int v6 = 11;
        goto LABEL_455;
      case 154:
        unsigned int v6 = 11;
        goto LABEL_363;
      case 155:
        unsigned int v6 = 12;
        goto LABEL_455;
      case 156:
        unsigned int v6 = 12;
LABEL_363:
        int v7 = 4;
        int v9 = 4;
        int v10 = 1;
        int v11 = 1;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 157:
        unsigned int v6 = 13;
LABEL_455:
        int v7 = 4;
        goto LABEL_456;
      case 158:
        unsigned int v6 = 13;
LABEL_464:
        int v7 = 4;
        goto LABEL_465;
      case 159:
        unsigned int v6 = 13;
        int v7 = 5;
LABEL_456:
        int v9 = 4;
        int v10 = 1;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 160:
        unsigned int v6 = 13;
        int v7 = 5;
LABEL_465:
        int v9 = 4;
        int v10 = 1;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 161:
        unsigned int v6 = 13;
        int v7 = 5;
        goto LABEL_383;
      case 162:
        unsigned int v6 = 13;
        int v7 = 5;
        goto LABEL_387;
      case 163:
        unsigned int v6 = 13;
        int v7 = 6;
        goto LABEL_383;
      case 164:
        unsigned int v6 = 13;
        int v7 = 6;
        goto LABEL_387;
      case 165:
        unsigned int v6 = 13;
        int v7 = 6;
        goto LABEL_391;
      case 166:
        unsigned int v6 = 13;
        int v7 = 6;
        goto LABEL_395;
      case 167:
        unsigned int v6 = 13;
        int v7 = 8;
        goto LABEL_383;
      case 168:
        unsigned int v6 = 13;
        int v7 = 8;
        goto LABEL_387;
      case 169:
        unsigned int v6 = 13;
        int v7 = 8;
        goto LABEL_391;
      case 170:
        unsigned int v6 = 13;
        int v7 = 8;
        goto LABEL_395;
      case 171:
        unsigned int v6 = 13;
        int v7 = 8;
        goto LABEL_399;
      case 172:
        unsigned int v6 = 13;
        int v7 = 8;
        goto LABEL_403;
      case 173:
        unsigned int v6 = 13;
        int v7 = 10;
LABEL_383:
        int v9 = 5;
        int v10 = 1;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 174:
        unsigned int v6 = 13;
        int v7 = 10;
LABEL_387:
        int v9 = 5;
        int v10 = 1;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 175:
        unsigned int v6 = 13;
        int v7 = 10;
LABEL_391:
        int v9 = 6;
        int v10 = 1;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 176:
        unsigned int v6 = 13;
        int v7 = 10;
LABEL_395:
        int v9 = 6;
        int v10 = 1;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 177:
        unsigned int v6 = 13;
        int v7 = 10;
LABEL_399:
        int v9 = 8;
        int v10 = 1;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 178:
        unsigned int v6 = 13;
        int v7 = 10;
LABEL_403:
        int v9 = 8;
        int v10 = 1;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 179:
        unsigned int v6 = 13;
        int v7 = 10;
        goto LABEL_409;
      case 180:
        unsigned int v6 = 13;
        int v7 = 10;
        goto LABEL_413;
      case 181:
        unsigned int v6 = 13;
        int v7 = 12;
LABEL_409:
        int v9 = 10;
        int v10 = 1;
        int v11 = 0;
        break;
      case 182:
        unsigned int v6 = 13;
        int v7 = 12;
LABEL_413:
        int v9 = 10;
        int v10 = 1;
        int v11 = 8;
        break;
      case 183:
        unsigned int v6 = 13;
        int v7 = 12;
        int v9 = 12;
        int v10 = 1;
        int v11 = 0;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      case 184:
        unsigned int v6 = 13;
        int v7 = 12;
        int v9 = 12;
        int v10 = 1;
        int v11 = 8;
        return createDFDCompressed(v6, v7, v9, v10, v11);
      default:
        switch(a1)
        {
          case 1000066000:
            unsigned int v6 = 13;
            int v7 = 4;
            goto LABEL_423;
          case 1000066001:
            unsigned int v6 = 13;
            int v7 = 5;
            goto LABEL_423;
          case 1000066002:
            unsigned int v6 = 13;
            int v7 = 5;
            goto LABEL_433;
          case 1000066003:
            unsigned int v6 = 13;
            int v7 = 6;
            goto LABEL_433;
          case 1000066004:
            unsigned int v6 = 13;
            int v7 = 6;
            goto LABEL_437;
          case 1000066005:
            unsigned int v6 = 13;
            int v7 = 8;
            goto LABEL_433;
          case 1000066006:
            unsigned int v6 = 13;
            int v7 = 8;
            goto LABEL_437;
          case 1000066007:
            unsigned int v6 = 13;
            int v7 = 8;
            goto LABEL_441;
          case 1000066008:
            unsigned int v6 = 13;
            int v7 = 10;
LABEL_433:
            int v9 = 5;
            int v10 = 1;
            int v11 = 6;
            return createDFDCompressed(v6, v7, v9, v10, v11);
          case 1000066009:
            unsigned int v6 = 13;
            int v7 = 10;
LABEL_437:
            int v9 = 6;
            int v10 = 1;
            int v11 = 6;
            return createDFDCompressed(v6, v7, v9, v10, v11);
          case 1000066010:
            unsigned int v6 = 13;
            int v7 = 10;
LABEL_441:
            int v9 = 8;
            int v10 = 1;
            int v11 = 6;
            return createDFDCompressed(v6, v7, v9, v10, v11);
          case 1000066011:
            unsigned int v6 = 13;
            int v7 = 10;
            goto LABEL_446;
          case 1000066012:
            unsigned int v6 = 13;
            int v7 = 12;
LABEL_446:
            int v9 = 10;
            int v10 = 1;
            int v11 = 6;
            break;
          case 1000066013:
            unsigned int v6 = 13;
            int v7 = 12;
            int v9 = 12;
            int v10 = 1;
            int v11 = 6;
            break;
          default:
            switch(a1)
            {
              case 1000054000:
                unsigned int v6 = 15;
                int v7 = 8;
                goto LABEL_456;
              case 1000054001:
                unsigned int v6 = 15;
                goto LABEL_455;
              case 1000054002:
                unsigned int v6 = 16;
                int v7 = 8;
                goto LABEL_456;
              case 1000054003:
                unsigned int v6 = 16;
                goto LABEL_455;
              case 1000054004:
                unsigned int v6 = 15;
                goto LABEL_462;
              case 1000054005:
                unsigned int v6 = 15;
                goto LABEL_464;
              case 1000054006:
                unsigned int v6 = 16;
LABEL_462:
                int v7 = 8;
                goto LABEL_465;
              case 1000054007:
                unsigned int v6 = 16;
                goto LABEL_464;
              default:
                return result;
            }
        }
        return createDFDCompressed(v6, v7, v9, v10, v11);
    }
    return createDFDCompressed(v6, v7, v9, v10, v11);
  }
  return result;
}

uint64_t ktxFileStream_construct(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = 11;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0;
      *(void *)(a1 + 64) = a2;
      *(void *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 56) = 1;
      *(void *)a1 = ktxFileStream_read;
      *(void *)(a1 + 8) = ktxFileStream_skip;
      *(void *)(a1 + 16) = ktxFileStream_write;
      *(void *)(a1 + 24) = ktxFileStream_getpos;
      *(void *)(a1 + 32) = ktxFileStream_setpos;
      *(void *)(a1 + 40) = ktxFileStream_getsize;
      *(void *)(a1 + 48) = ktxFileStream_destruct;
      *(unsigned char *)(a1 + 96) = a3;
    }
  }
  return result;
}

uint64_t ktxFileStream_read(uint64_t a1, void *__ptr, size_t a3)
{
  uint64_t result = 11;
  if (a1 && __ptr)
  {
    if (fread(__ptr, 1uLL, a3, *(FILE **)(a1 + 64)) == a3)
    {
      uint64_t result = 0;
      *(void *)(a1 + 88) += a3;
    }
    else if (feof(*(FILE **)(a1 + 64)))
    {
      return 7;
    }
    else
    {
      return 5;
    }
  }
  return result;
}

uint64_t ktxFileStream_skip(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return 11;
  }
  if (a2)
  {
    unsigned int v4 = 1;
    while (getc(*(FILE **)(a1 + 64)) != -1)
    {
      unint64_t v5 = v4++;
      if (v5 >= a2) {
        goto LABEL_6;
      }
    }
    if (feof(*(FILE **)(a1 + 64))) {
      return 7;
    }
    else {
      return 5;
    }
  }
  else
  {
LABEL_6:
    uint64_t result = 0;
    *(void *)(a1 + 88) += a2;
  }
  return result;
}

uint64_t ktxFileStream_write(uint64_t a1, void *__ptr, size_t __size, size_t __nitems)
{
  uint64_t v4 = 11;
  if (!a1 || !__ptr) {
    return v4;
  }
  if (fwrite(__ptr, __size, __nitems, *(FILE **)(a1 + 64)) == __nitems) {
    return 0;
  }
  uint64_t v4 = 4;
  if (*__error() == 27) {
    return v4;
  }
  if (*__error() == 84) {
    return 4;
  }
  else {
    return 8;
  }
}

uint64_t ktxFileStream_getpos(uint64_t a1, off_t *a2)
{
  uint64_t result = 11;
  if (a1 && a2)
  {
    unint64_t v5 = *(FILE **)(a1 + 64);
    if (v5 == (FILE *)*MEMORY[0x1E4F143D0])
    {
      off_t v6 = *(void *)(a1 + 88);
    }
    else
    {
      off_t v6 = ftello(v5);
      if (v6 < 0)
      {
        int v7 = *__error();
        if (v7 == 29) {
          return 2;
        }
        if (v7 == 84) {
          return 4;
        }
      }
    }
    uint64_t result = 0;
    *a2 = v6;
  }
  return result;
}

uint64_t ktxFileStream_setpos(uint64_t a1, off_t a2)
{
  if (!a1) {
    return 11;
  }
  if (*(void *)(a1 + 64) == *MEMORY[0x1E4F143D0])
  {
    if (a2 <= *(void *)(a1 + 88))
    {
      return 2;
    }
    else
    {
      unint64_t v5 = *(uint64_t (**)(void))(a1 + 8);
      return v5();
    }
  }
  else
  {
    off_t v6 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, off_t *))(a1 + 40))(a1, &v6);
    if (!result)
    {
      if (v6 >= a2) {
        return (fseeko(*(FILE **)(a1 + 64), a2, 0) >> 31) & 6;
      }
      else {
        return 10;
      }
    }
  }
  return result;
}

uint64_t ktxFileStream_getsize(uint64_t a1, off_t *a2)
{
  uint64_t result = 11;
  if (a1 && a2)
  {
    memset(&v7, 0, sizeof(v7));
    fflush(*(FILE **)(a1 + 64));
    int v5 = fileno(*(FILE **)(a1 + 64));
    if (fstat(v5, &v7) < 0)
    {
      if (*__error() == 84) {
        return 4;
      }
      else {
        return 5;
      }
    }
    else
    {
      int v6 = v7.st_mode & 0xF000;
      uint64_t result = 2;
      if (v6 != 4096 && v6 != 49152)
      {
        if ((v7.st_mode & 0x2000) != 0)
        {
          return 10;
        }
        else
        {
          uint64_t result = 0;
          *a2 = v7.st_size;
        }
      }
    }
  }
  return result;
}

uint64_t ktxFileStream_destruct(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 96)) {
    uint64_t result = fclose(*(FILE **)(result + 64));
  }
  *(void *)(v1 + 64) = 0;
  return result;
}

void *ktxHashList_Construct(void *result)
{
  *uint64_t result = 0;
  return result;
}

void *ktxHashList_ConstructCopy(void *result, uint64_t a2)
{
  *uint64_t result = 0;
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t)result;
    do
    {
      uint64_t result = (void *)ktxHashList_AddKVPair(v3, *(char **)(v2 + 8), *(_DWORD *)(v2 + 16), *(const void **)(v2 + 24));
      uint64_t v2 = *(void *)(v2 + 48);
    }
    while (v2);
  }
  return result;
}

uint64_t ktxHashList_AddKVPair(uint64_t a1, char *__s, unsigned int a3, const void *a4)
{
  uint64_t result = 11;
  if (a1 && __s && (!a3 || a4))
  {
    int v9 = strlen(__s);
    if (!v9) {
      return 11;
    }
    size_t v10 = (v9 + 1);
    int v11 = (char *)malloc_type_malloc(a3 + v10 + 88, 0xAFB9C282uLL);
    uint64_t v12 = v11 + 88;
    *((void *)v11 + 1) = v11 + 88;
    *(_DWORD *)int v11 = v10;
    memcpy(v11 + 88, __s, v10);
    *((_DWORD *)v11 + 4) = a3;
    if (a3)
    {
      *((void *)v11 + 3) = &v12[v10];
      memcpy(&v12[v10], a4, a3);
      uint64_t v12 = (char *)*((void *)v11 + 1);
      LODWORD(v10) = *(_DWORD *)v11;
    }
    else
    {
      *((void *)v11 + 3) = 0;
    }
    uint64_t v13 = v11 + 32;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 9) = v12;
    unsigned int v14 = v10 - 1;
    *((_DWORD *)v11 + 20) = v10 - 1;
    if (*(void *)a1)
    {
      *(void *)(*(void *)(*(void *)(*(void *)a1 + 32) + 24) + 16) = v11;
      *((void *)v11 + 5) = *(void *)(*(void *)(*(void *)a1 + 32) + 24)
                           - *(void *)(*(void *)(*(void *)a1 + 32) + 32);
      *(void *)(*(void *)(*(void *)a1 + 32) + 24) = v13;
      int v15 = *(_DWORD **)(*(void *)a1 + 32);
    }
    else
    {
      *(void *)a1 = v11;
      *((void *)v11 + 5) = 0;
      *(void *)(*(void *)a1 + 32) = malloc_type_malloc(0x40uLL, 0x10200405F856B24uLL);
      int v16 = *(_OWORD **)(*(void *)a1 + 32);
      if (!v16) {
        goto LABEL_56;
      }
      v16[2] = 0u;
      v16[3] = 0u;
      *int v16 = 0u;
      v16[1] = 0u;
      *(void *)(*(void *)(*(void *)a1 + 32) + 24) = *(void *)a1 + 32;
      uint64_t v17 = *(void *)(*(void *)a1 + 32);
      *(void *)(v17 + 8) = 0x500000020;
      *(void *)(v17 + 32) = 32;
      **(void **)(*(void *)a1 + 32) = malloc_type_malloc(0x200uLL, 0x1020040EDED9539uLL);
      int v18 = **(_OWORD ***)(*(void *)a1 + 32);
      if (!v18) {
        goto LABEL_56;
      }
      v18[30] = 0u;
      v18[31] = 0u;
      v18[28] = 0u;
      v18[29] = 0u;
      v18[26] = 0u;
      v18[27] = 0u;
      v18[24] = 0u;
      v18[25] = 0u;
      v18[22] = 0u;
      v18[23] = 0u;
      v18[20] = 0u;
      v18[21] = 0u;
      v18[18] = 0u;
      v18[19] = 0u;
      v18[16] = 0u;
      v18[17] = 0u;
      v18[14] = 0u;
      v18[15] = 0u;
      v18[12] = 0u;
      v18[13] = 0u;
      v18[10] = 0u;
      v18[11] = 0u;
      v18[8] = 0u;
      v18[9] = 0u;
      v18[6] = 0u;
      v18[7] = 0u;
      v18[4] = 0u;
      v18[5] = 0u;
      v18[2] = 0u;
      uint64_t v18[3] = 0u;
      _OWORD *v18 = 0u;
      v18[1] = 0u;
      int v15 = *(_DWORD **)(*(void *)a1 + 32);
      v15[14] = -1609490463;
      unsigned int v14 = *(_DWORD *)v11 - 1;
      uint64_t v12 = (char *)*((void *)v11 + 1);
    }
    int v19 = -17973521;
    unsigned int v20 = -1640531527;
    ++v15[4];
    *((void *)v11 + 4) = v15;
    *((_DWORD *)v11 + 21) = -17973521;
    if (v14 < 0xC)
    {
      int v22 = -1640531527;
      unsigned int v21 = v14;
    }
    else
    {
      unsigned int v21 = v14;
      int v22 = -1640531527;
      do
      {
        int v23 = v20 + v12[4] + (v12[5] << 8) + (v12[6] << 16) + (v12[7] << 24);
        unsigned int v24 = v12[8] + (v12[9] << 8) + (v12[10] << 16) + v19 + (v12[11] << 24);
        int v25 = (v22 + *v12 + (v12[1] << 8) + (v12[2] << 16) + (v12[3] << 24) - (v23 + v24)) ^ (v24 >> 13);
        unsigned int v26 = (v23 - v24 - v25) ^ (v25 << 8);
        unsigned int v27 = (v24 - v25 - v26) ^ (v26 >> 13);
        int v28 = (v25 - v26 - v27) ^ (v27 >> 12);
        unsigned int v29 = (v26 - v27 - v28) ^ (v28 << 16);
        unsigned int v30 = (v27 - v28 - v29) ^ (v29 >> 5);
        int v22 = (v28 - v29 - v30) ^ (v30 >> 3);
        unsigned int v20 = (v29 - v30 - v22) ^ (v22 << 10);
        int v19 = (v30 - v22 - v20) ^ (v20 >> 15);
        *((_DWORD *)v11 + 21) = v19;
        v12 += 12;
        v21 -= 12;
      }
      while (v21 > 0xB);
    }
    unsigned int v31 = v19 + v14;
    *((_DWORD *)v11 + 21) = v31;
    switch(v21)
    {
      case 1u:
        goto LABEL_32;
      case 2u:
        goto LABEL_31;
      case 3u:
        goto LABEL_30;
      case 4u:
        goto LABEL_29;
      case 5u:
        goto LABEL_28;
      case 6u:
        goto LABEL_27;
      case 7u:
        goto LABEL_26;
      case 8u:
        goto LABEL_25;
      case 9u:
        goto LABEL_24;
      case 0xAu:
        goto LABEL_23;
      case 0xBu:
        v31 += v12[10] << 24;
        *((_DWORD *)v11 + 21) = v31;
LABEL_23:
        v31 += v12[9] << 16;
        *((_DWORD *)v11 + 21) = v31;
LABEL_24:
        v31 += v12[8] << 8;
        *((_DWORD *)v11 + 21) = v31;
LABEL_25:
        v20 += v12[7] << 24;
LABEL_26:
        v20 += v12[6] << 16;
LABEL_27:
        v20 += v12[5] << 8;
LABEL_28:
        v20 += v12[4];
LABEL_29:
        v22 += v12[3] << 24;
LABEL_30:
        v22 += v12[2] << 16;
LABEL_31:
        v22 += v12[1] << 8;
LABEL_32:
        v22 += *v12;
        break;
      default:
        break;
    }
    int v32 = (v22 - v20 - v31) ^ (v31 >> 13);
    unsigned int v33 = (v20 - v31 - v32) ^ (v32 << 8);
    unsigned int v34 = (v31 - v32 - v33) ^ (v33 >> 13);
    int v35 = (v32 - v33 - v34) ^ (v34 >> 12);
    unsigned int v36 = (v33 - v34 - v35) ^ (v35 << 16);
    unsigned int v37 = (v34 - v35 - v36) ^ (v36 >> 5);
    int v38 = (v35 - v36 - v37) ^ (v37 >> 3);
    unsigned int v39 = (v37 - v38 - ((v36 - v37 - v38) ^ (v38 << 10))) ^ (((v36 - v37 - v38) ^ (v38 << 10)) >> 15);
    *((_DWORD *)v11 + 21) = v39;
    uint64_t v40 = *(void *)(*(void *)a1 + 32);
    uint64_t v41 = v39 & (*(_DWORD *)(v40 + 8) - 1);
    uint64_t v42 = 16 * v41;
    uint64_t v43 = *(void *)v40 + v42;
    ++*(_DWORD *)(v43 + 8);
    uint64_t v44 = *(void *)v43;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 8) = v44;
    uint64_t v45 = **(void **)(*(void *)a1 + 32);
    uint64_t v46 = *(void *)(v45 + v42);
    if (v46)
    {
      *(void *)(v46 + 24) = v13;
      uint64_t v45 = **(void **)(*(void *)a1 + 32);
    }
    uint64_t v47 = 16 * v41;
    *(void *)(v45 + v47) = v13;
    uint64_t v48 = **(void **)(*(void *)a1 + 32) + v47;
    if (*(_DWORD *)(v48 + 8) < (10 * *(_DWORD *)(v48 + 12) + 10) || v15[13] == 1) {
      return 0;
    }
    unsigned int v49 = malloc_type_malloc(16 * (2 * v15[2]), 0x1020040EDED9539uLL);
    if (v49)
    {
      int v50 = v49;
      bzero(v49, 16 * (2 * *(_DWORD *)(*(void *)v13 + 8)));
      uint64_t v51 = *(void *)v13;
      unsigned int v52 = *(_DWORD *)(*(void *)v13 + 16);
      uint64_t v53 = *(unsigned int *)(*(void *)v13 + 8);
      int v54 = *(_DWORD *)(*(void *)v13 + 12) + 1;
      unsigned int v55 = 2 * v53 - 1;
      if ((v55 & v52) != 0) {
        unsigned int v56 = (v52 >> (*(unsigned char *)(*(void *)v13 + 12) + 1)) + 1;
      }
      else {
        unsigned int v56 = v52 >> (*(unsigned char *)(*(void *)v13 + 12) + 1);
      }
      *(_DWORD *)(v51 + 40) = v56;
      *(_DWORD *)(v51 + 44) = 0;
      int v57 = *(void **)v51;
      if (v53)
      {
        int v58 = 0;
        for (uint64_t i = 0; i != v53; ++i)
        {
          uint64_t v60 = v57[2 * i];
          if (v60)
          {
            do
            {
              uint64_t v61 = *(void *)(v60 + 32);
              uint64_t v62 = *(_DWORD *)(v60 + 52) & v55;
              uint64_t v63 = (char *)&v50[4 * v62];
              unsigned int v64 = *((_DWORD *)v63 + 2) + 1;
              *((_DWORD *)v63 + 2) = v64;
              if (v64 > v56)
              {
                *(_DWORD *)(v51 + 44) = ++v58;
                v50[4 * v62 + 3] = v64 / v56;
              }
              uint64_t v65 = *(void *)v63;
              *(void *)(v60 + 24) = 0;
              *(void *)(v60 + 32) = v65;
              if (v65) {
                *(void *)(v65 + 24) = v60;
              }
              *(void *)uint64_t v63 = v60;
              uint64_t v60 = v61;
            }
            while (v61);
          }
        }
      }
      *(_DWORD *)(v51 + 8) = 2 * v53;
      *(_DWORD *)(v51 + 12) = v54;
      free(v57);
      uint64_t v66 = *(void *)v13;
      *(void *)uint64_t v66 = v50;
      if (*(_DWORD *)(v66 + 44) <= *(_DWORD *)(v66 + 16) >> 1)
      {
        uint64_t result = 0;
        *(_DWORD *)(v66 + 48) = 0;
        return result;
      }
      unsigned int v67 = *(_DWORD *)(v66 + 48) + 1;
      *(_DWORD *)(v66 + 48) = v67;
      if (v67 >= 2)
      {
        uint64_t result = 0;
        *(_DWORD *)(v66 + 52) = 1;
        return result;
      }
      return 0;
    }
LABEL_56:
    exit(-1);
  }
  return result;
}

uint64_t ktxHashList_Next(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

void ktxHashList_Destruct(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return;
  }
  uint64_t v2 = *a1;
  while (1)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = *(void *)(v2 + 48);
    uint64_t v5 = *(void *)(v1 + 32);
    if (*(_OWORD *)(v2 + 40) == 0) {
      break;
    }
    uint64_t v6 = *(void *)(v5 + 32);
    if (v2 != *(void *)(v5 + 24) - v6)
    {
      uint64_t v7 = *(void *)(v2 + 48);
      if (!v3) {
        goto LABEL_8;
      }
LABEL_7:
      *(void *)(v3 + v6 + 16) = v4;
      uint64_t v7 = v1;
      goto LABEL_8;
    }
    *(void *)(v5 + 24) = v3 + v6;
    uint64_t v7 = v4;
    if (v3) {
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v8 = *(void *)(v2 + 48);
    uint64_t v9 = *(void *)(v7 + 32);
    if (v8) {
      *(void *)(v8 + *(void *)(v9 + 32) + 8) = v3;
    }
    uint64_t v10 = *(void *)v9 + 16 * ((*(_DWORD *)(v9 + 8) - 1) & *(_DWORD *)(v2 + 84));
    --*(_DWORD *)(v10 + 8);
    if (*(void *)v10 == v2 + 32)
    {
      *(void *)uint64_t v10 = *(void *)(v2 + 64);
      uint64_t v11 = *(void *)(v2 + 56);
      if (!v11) {
        goto LABEL_13;
      }
LABEL_12:
      *(void *)(v11 + 32) = *(void *)(v2 + 64);
      goto LABEL_13;
    }
    uint64_t v11 = *(void *)(v2 + 56);
    if (v11) {
      goto LABEL_12;
    }
LABEL_13:
    uint64_t v12 = *(void *)(v2 + 64);
    if (v12) {
      *(void *)(v12 + 24) = v11;
    }
    --*(_DWORD *)(v9 + 16);
    free((void *)v2);
    uint64_t v1 = v7;
    uint64_t v2 = v4;
    if (!v4) {
      return;
    }
  }
  free(*(void **)v5);
  free(*(void **)(v1 + 32));

  free((void *)v2);
}

uint64_t ktxHashList_Create(void *a1)
{
  uint64_t v2 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  if (!v2) {
    return 13;
  }
  uint64_t v3 = v2;
  uint64_t result = 0;
  *uint64_t v3 = 0;
  *a1 = v3;
  return result;
}

uint64_t ktxHashList_CreateCopy(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  if (!v4) {
    return 13;
  }
  uint64_t v5 = (uint64_t)v4;
  for (*uint64_t v4 = 0; a2; a2 = *(void *)(a2 + 48))
    ktxHashList_AddKVPair(v5, *(char **)(a2 + 8), *(_DWORD *)(a2 + 16), *(const void **)(a2 + 24));
  uint64_t result = 0;
  *a1 = v5;
  return result;
}

void ktxHashList_Destroy(uint64_t *a1)
{
  ktxHashList_Destruct(a1);

  free(a1);
}

uint64_t ktxHashList_DeleteKVPair(uint64_t *a1, char *__s)
{
  uint64_t result = 11;
  if (!a1 || !__s) {
    return result;
  }
  if (!*a1) {
    return 0;
  }
  int v5 = -17973521;
  unsigned int v6 = -1640531527;
  unsigned int v7 = strlen(__s);
  unsigned int v8 = v7;
  if (v7 < 0xC)
  {
    int v11 = -1640531527;
    unsigned int v10 = v7;
    uint64_t v9 = __s;
  }
  else
  {
    uint64_t v9 = __s;
    unsigned int v10 = v7;
    int v11 = -1640531527;
    do
    {
      int v12 = v6 + v9[4] + (v9[5] << 8) + (v9[6] << 16) + (v9[7] << 24);
      unsigned int v13 = v5 + v9[8] + (v9[9] << 8) + (v9[10] << 16) + (v9[11] << 24);
      int v14 = (v11 + *v9 + (v9[1] << 8) + (v9[2] << 16) + (v9[3] << 24) - (v12 + v13)) ^ (v13 >> 13);
      unsigned int v15 = (v12 - v13 - v14) ^ (v14 << 8);
      unsigned int v16 = (v13 - v14 - v15) ^ (v15 >> 13);
      int v17 = (v14 - v15 - v16) ^ (v16 >> 12);
      unsigned int v18 = (v15 - v16 - v17) ^ (v17 << 16);
      unsigned int v19 = (v16 - v17 - v18) ^ (v18 >> 5);
      int v11 = (v17 - v18 - v19) ^ (v19 >> 3);
      unsigned int v6 = (v18 - v19 - v11) ^ (v11 << 10);
      int v5 = (v19 - v11 - v6) ^ (v6 >> 15);
      v9 += 12;
      v10 -= 12;
    }
    while (v10 > 0xB);
  }
  unsigned int v20 = v5 + v7;
  switch(v10)
  {
    case 1u:
      goto LABEL_22;
    case 2u:
      goto LABEL_21;
    case 3u:
      goto LABEL_20;
    case 4u:
      goto LABEL_19;
    case 5u:
      goto LABEL_18;
    case 6u:
      goto LABEL_17;
    case 7u:
      goto LABEL_16;
    case 8u:
      goto LABEL_15;
    case 9u:
      goto LABEL_14;
    case 0xAu:
      goto LABEL_13;
    case 0xBu:
      v20 += v9[10] << 24;
LABEL_13:
      v20 += v9[9] << 16;
LABEL_14:
      v20 += v9[8] << 8;
LABEL_15:
      v6 += v9[7] << 24;
LABEL_16:
      v6 += v9[6] << 16;
LABEL_17:
      v6 += v9[5] << 8;
LABEL_18:
      v6 += v9[4];
LABEL_19:
      v11 += v9[3] << 24;
LABEL_20:
      v11 += v9[2] << 16;
LABEL_21:
      v11 += v9[1] << 8;
LABEL_22:
      v11 += *v9;
      break;
    default:
      break;
  }
  int v21 = (v11 - v20 - v6) ^ (v20 >> 13);
  unsigned int v22 = (v6 - v20 - v21) ^ (v21 << 8);
  unsigned int v23 = (v20 - v21 - v22) ^ (v22 >> 13);
  int v24 = (v21 - v22 - v23) ^ (v23 >> 12);
  unsigned int v25 = (v22 - v23 - v24) ^ (v24 << 16);
  unsigned int v26 = (v23 - v24 - v25) ^ (v25 >> 5);
  int v27 = (v24 - v25 - v26) ^ (v26 >> 3);
  uint64_t v28 = *(void *)(*a1 + 32);
  unsigned int v29 = *(void **)v28;
  uint64_t v30 = *(void *)(*(void *)v28
                  + 16
                  * (((v26 - v27 - ((v25 - v26 - v27) ^ (v27 << 10))) ^ (((v25 - v26 - v27) ^ (v27 << 10)) >> 15)) & (*(_DWORD *)(v28 + 8) - 1)));
  if (!v30) {
    return 0;
  }
  uint64_t v31 = v30 - *(void *)(v28 + 32);
  if (*(_DWORD *)(v31 + 80) != v7) {
    goto LABEL_28;
  }
LABEL_27:
  if (memcmp(*(const void **)(v31 + 72), __s, v8))
  {
LABEL_28:
    while (1)
    {
      uint64_t v32 = *(void *)(v31 + 64);
      if (!v32) {
        return 0;
      }
      uint64_t v31 = v32 - *(void *)(v28 + 32);
      if (*(_DWORD *)(v31 + 80) == v8) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v33 = *(void *)(v31 + 40);
  if (!v33 && !*(void *)(v31 + 48))
  {
    free(v29);
    free(*(void **)(*a1 + 32));
    uint64_t result = 0;
    *a1 = 0;
    return result;
  }
  uint64_t v34 = *(void *)(v28 + 32);
  if (v31 == *(void *)(v28 + 24) - v34) {
    *(void *)(v28 + 24) = v33 + v34;
  }
  uint64_t v35 = *(void *)(v31 + 48);
  if (!v33)
  {
    *a1 = v35;
    uint64_t v36 = v31 + 32;
    uint64_t v37 = *(void *)(v31 + 48);
    if (!v37) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  *(void *)(v33 + *(void *)(*(void *)(*a1 + 32) + 32) + 16) = v35;
  uint64_t v35 = *a1;
  uint64_t v36 = v31 + 32;
  uint64_t v37 = *(void *)(v31 + 48);
  if (v37)
  {
LABEL_36:
    *(void *)(v37 + *(void *)(*(void *)(v35 + 32) + 32) + 8) = *(void *)(v31 + 40);
    uint64_t v35 = *a1;
  }
LABEL_37:
  uint64_t v38 = **(void **)(v35 + 32)
      + 16 * ((*(_DWORD *)(*(void *)(v35 + 32) + 8) - 1) & *(_DWORD *)(v31 + 84));
  --*(_DWORD *)(v38 + 8);
  if (*(void *)v38 == v36) {
    *(void *)uint64_t v38 = *(void *)(v31 + 64);
  }
  uint64_t v39 = *(void *)(v31 + 56);
  if (v39) {
    *(void *)(v39 + 32) = *(void *)(v31 + 64);
  }
  uint64_t v40 = *(void *)(v31 + 64);
  if (v40) {
    *(void *)(v40 + 24) = v39;
  }
  uint64_t result = 0;
  --*(_DWORD *)(*(void *)(*a1 + 32) + 16);
  return result;
}