uint64_t CAStreamBasicDescription::CAStreamBasicDescription(uint64_t result, int a2, int a3, int a4, double a5)
{
  BOOL v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  switch(a3)
  {
    case 1:
      v5 = a4 == 0;
      v6 = 41;
      v7 = 9;
      goto LABEL_18;
    case 2:
      if (a4) {
        v6 = 12;
      }
      else {
        v6 = 44;
      }
      v11 = 2 * a2;
      if (!a4) {
        v11 = 2;
      }
      v9 = v11 | 0x100000000;
      HIDWORD(v10) = 16;
      goto LABEL_24;
    case 3:
      v5 = a4 == 0;
      v6 = 3116;
      v7 = 3084;
      goto LABEL_18;
    case 4:
      if (a4) {
        v6 = 9;
      }
      else {
        v6 = 41;
      }
      v12 = 8 * a2;
      if (!a4) {
        v12 = 8;
      }
      v9 = v12 | 0x100000000;
      HIDWORD(v10) = 64;
      goto LABEL_24;
    case 5:
      v5 = a4 == 0;
      v6 = 44;
      v7 = 12;
LABEL_18:
      if (!v5) {
        v6 = v7;
      }
      v13 = 4 * a2;
      if (v5) {
        v13 = 4;
      }
      v9 = v13 | 0x100000000;
      HIDWORD(v10) = 32;
LABEL_24:
      LODWORD(v10) = a2;
      v8 = 1819304813;
      break;
    default:
      v8 = 0;
      v6 = 0;
      v9 = 0;
      a5 = 0.0;
      v10 = 0;
      break;
  }
  *(double *)result = a5;
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v6;
  *(void *)(result + 16) = v9;
  *(_DWORD *)(result + 24) = v9;
  *(void *)(result + 28) = v10;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_19D796518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D79658C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t CAStreamBasicDescription::IdentifyCommonPCMFormat(_DWORD *a1, int *a2)
{
  if (a1[2] != 1819304813) {
    return 0;
  }
  if (a1[5] != 1) {
    return 0;
  }
  unsigned int v2 = a1[6];
  if (v2 != a1[4]) {
    return 0;
  }
  unsigned int v3 = a1[8];
  if (v2 < v3 >> 3) {
    return 0;
  }
  unsigned int v4 = a1[7];
  if (!v4) {
    return 0;
  }
  unsigned int v5 = a1[3];
  if ((v5 & 0x20) == 0)
  {
    BOOL v9 = v2 == v2 / v4 * v4;
    v2 /= v4;
    if (!v9) {
      return 0;
    }
  }
  int v6 = 0;
  if ((v5 & 2) == 0 && 8 * v2 == v3)
  {
    if (v5)
    {
      if ((v5 & 0x1F84) != 0) {
        return 0;
      }
      if (v2 == 4) {
        int v6 = 1;
      }
      else {
        int v6 = 4 * (v2 == 8);
      }
    }
    else if ((v5 & 4) != 0)
    {
      int v8 = (v5 >> 7) & 0x3F;
      if (v8 == 24 && v2 == 4)
      {
        int v6 = 3;
      }
      else if (v8 || v2 != 4)
      {
        BOOL v9 = v2 == 2 && v8 == 0;
        if (v9) {
          int v6 = 2;
        }
        else {
          int v6 = 0;
        }
      }
      else
      {
        int v6 = 5;
      }
    }
    else
    {
      int v6 = 0;
    }
  }
  *a2 = v6;
  return 1;
}

uint64_t AVAudioPlayerCpp::setupAudioFile(AVAudioPlayerCpp *this)
{
  UInt32 ioDataSize = 40;
  unsigned int v2 = (_OWORD *)((char *)this + 72);
  uint64_t Property = AudioFileGetProperty(*((AudioFileID *)this + 20), 0x64666D74u, &ioDataSize, (char *)this + 72);
  if (!Property)
  {
    long long v4 = *(_OWORD *)((char *)this + 88);
    *((_OWORD *)this + 2) = *v2;
    *((_OWORD *)this + 3) = v4;
    *((void *)this + 8) = *((void *)this + 13);
    UInt32 isWritable = 0;
    if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 20), 0x6D676963u, &ioDataSize, &isWritable))
    {
      size_t v5 = ioDataSize;
      if (ioDataSize)
      {
        *((void *)this + 15) = ioDataSize;
        int v6 = malloc_type_malloc(v5, 0x2DA6F18CuLL);
        *((void *)this + 16) = v6;
        if (v6) {
          AudioFileGetProperty(*((AudioFileID *)this + 20), 0x6D676963u, &ioDataSize, v6);
        }
        else {
          *((void *)this + 15) = 0;
        }
      }
    }
    if (!AudioFileGetPropertyInfo(*((AudioFileID *)this + 20), 0x666C7374u, &ioDataSize, &isWritable)
      && ioDataSize >= 0x60)
    {
      size_t v7 = ioDataSize / 0x30uLL;
      *((_DWORD *)this + 34) = v7;
      int v8 = malloc_type_calloc(v7, 0x30uLL, 0x100004064842E6AuLL);
      *((void *)this + 18) = v8;
      if (!AudioFileGetProperty(*((AudioFileID *)this + 20), 0x666C7374u, &ioDataSize, v8))
      {
        LODWORD(v19[0]) = 0;
        UInt32 ioPropertyDataSize = 4;
        if (!AudioFormatGetProperty(0x6670666Cu, ioDataSize, *((const void **)this + 18), &ioPropertyDataSize, v19))
        {
          unsigned int v9 = LODWORD(v19[0]);
          *((_DWORD *)this + 38) = LODWORD(v19[0]);
          uint64_t v10 = *((void *)this + 18) + 48 * v9;
          uint64_t v11 = *(void *)(v10 + 32);
          long long v12 = *(_OWORD *)(v10 + 16);
          *((_OWORD *)this + 2) = *(_OWORD *)v10;
          *((_OWORD *)this + 3) = v12;
          *((void *)this + 8) = v11;
          uint64_t v13 = *(unsigned int *)(v10 + 40);
          if (v13 <= 0xFFFEFFFF && (v13 & 0xFFFEFFFF) != 0) {
            *((void *)this + 64) = [[AVAudioChannelLayout alloc] initWithLayoutTag:v13];
          }
        }
      }
    }
    UInt32 ioDataSize = 4;
    AudioFormatGetProperty(0x66646570u, 0x28u, (char *)this + 32, &ioDataSize, (char *)this + 112);
    UInt32 ioDataSize = 16;
    if (!AudioFileGetProperty(*((AudioFileID *)this + 20), 0x706E666Fu, &ioDataSize, v19))
    {
      *(_OWORD *)((char *)this + 264) = *(_OWORD *)v19;
      if (*((int *)this + 69) >= 1)
      {
        UInt32 ioDataSize = 8;
        *((void *)this + 25) = 0;
        AudioFileGetProperty(*((AudioFileID *)this + 20), 0x70636E74u, &ioDataSize, (char *)this + 200);
      }
    }
    uint64_t v14 = *((void *)this + 33);
    if (v14)
    {
      double v15 = *((double *)this + 9);
      double v16 = (double)v14 / v15;
      *((_WORD *)this + 231) = 257;
      *((void *)this + 58) = vcvtmd_s64_f64((double)v14 * (*((double *)this + 4) / v15) + 0.5);
    }
    else
    {
      v19[0] = 0.0;
      UInt32 ioDataSize = 8;
      AudioFileGetProperty(*((AudioFileID *)this + 20), 0x65647572u, &ioDataSize, v19);
      double v16 = v19[0];
    }
    *((double *)this + 31) = v16;
    if (!*((void *)this + 64)
      && !AudioFileGetPropertyInfo(*((AudioFileID *)this + 20), 0x636D6170u, &ioDataSize, &isWritable)
      && ioDataSize)
    {
      v17 = malloc_type_calloc(1uLL, ioDataSize, 0x59E107AFuLL);
      if (!AudioFileGetProperty(*((AudioFileID *)this + 20), 0x636D6170u, &ioDataSize, v17)) {
        *((void *)this + 64) = [[AVAudioChannelLayout alloc] initWithLayout:v17];
      }
      free(v17);
    }
    UInt32 ioDataSize = 8;
    if (AudioFileGetProperty(*((AudioFileID *)this + 20), 0x6C6F7564u, &ioDataSize, (char *)this + 16)) {
      *((void *)this + 2) = 0;
    }
    UInt32 ioDataSize = 4;
    AudioFileGetProperty(*((AudioFileID *)this + 20), 0x66666D74u, &ioDataSize, (char *)this + 168);
  }
  return Property;
}

void sub_19D797140(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10F0C4015DEEB49);
  _Unwind_Resume(a1);
}

void AVAudioPlayerCpp::AVAudioPlayerCpp(AVAudioPlayerCpp *this)
{
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 52) = 0;
  *((_DWORD *)this + 106) = 0;
  *((void *)this + 64) = 0;
  *((_DWORD *)this + 130) = 0;
  *(void *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 78) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *((unsigned char *)this + 444) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 120) = 0;
  *((_DWORD *)this + 126) = 0;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_OWORD *)this + 33) = 0u;
  AudioSessionCreatePrimarySession_Priv();
}

void sub_19D797234(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(const void **)(v1 + 536);
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *tryToSetPlayerSessionListener(AVAudioPlayer *a1)
{
  result = [(AVAudioPlayer *)a1 impl];
  if (!result[72])
  {
    unsigned int v3 = result;
    long long v4 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
    result = (unsigned char *)[v4 addObserver:a1 selector:sel_handleInterruption_ name:*MEMORY[0x1E4F4E838] object:*((void *)v3 + 8)];
    v3[72] = 1;
  }
  return result;
}

void populatePlayerSettings(AudioPlayerImpl *a1)
{
  v26[32] = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  localPlayer = (double *)a1->_localPlayer;
  double v3 = localPlayer[4];
  uint64_t v4 = *((unsigned int *)localPlayer + 10);
  unint64_t v5 = *((unsigned int *)localPlayer + 11);
  uint64_t v7 = *((unsigned int *)localPlayer + 15);
  uint64_t v6 = *((unsigned int *)localPlayer + 16);
  if (AudioPlayerImpl_GetProperty<unsigned int>((AVAudioPlayerCpp *)localPlayer, 1651663220, (_DWORD *)&v24 + 1))
  {
    v26[0] = @"AVFormatIDKey";
    v25[0] = [objc_alloc(NSNumber) initWithUnsignedInteger:v4];
    v26[1] = @"AVSampleRateKey";
    v25[1] = [objc_alloc(NSNumber) initWithDouble:v3];
    v26[2] = @"AVNumberOfChannelsKey";
    v25[2] = [objc_alloc(NSNumber) initWithUnsignedInteger:v7];
    if (v4 == 1819304813)
    {
      v26[3] = @"AVLinearPCMBitDepthKey";
      v25[3] = [objc_alloc(NSNumber) initWithUnsignedInteger:v6];
      v26[4] = @"AVLinearPCMIsFloatKey";
      v25[4] = [objc_alloc(NSNumber) initWithUnsignedInteger:v5 & 1];
      v26[5] = @"AVLinearPCMIsBigEndianKey";
      v25[5] = [objc_alloc(NSNumber) initWithUnsignedInteger:(v5 >> 1) & 1];
      v26[6] = @"AVLinearPCMIsNonInterleaved";
      v25[6] = [objc_alloc(NSNumber) initWithUnsignedInteger:(v5 >> 5) & 1];
      int v8 = 7;
    }
    else
    {
      int v8 = 3;
    }
    int v9 = AudioPlayerImpl_GetProperty<unsigned int>((AVAudioPlayerCpp *)a1->_localPlayer, 1718909296, &v24);
    uint64_t v10 = v24;
    if (v24) {
      int v11 = v9;
    }
    else {
      int v11 = 0;
    }
    if (v11 == 1)
    {
      v26[v8] = @"AVAudioFileTypeKey";
      v25[v8++] = [objc_alloc(NSNumber) initWithUnsignedInteger:v10];
    }
    v26[v8] = @"AVEncoderBitRateKey";
    id v12 = objc_alloc(NSNumber);
    v25[v8] = [v12 initWithUnsignedInteger:HIDWORD(v24)];
    unsigned int v13 = v8 + 1;
    uint64_t v14 = (id *)a1->_localPlayer;
    size_t v15 = [v14[64] layoutSize];
    uint64_t v16 = [v14[64] layout];
    if (v16)
    {
      if (v15)
      {
        v17 = (const void *)v16;
        v18 = malloc_type_malloc(v15, 0xBF659F05uLL);
        if (v18)
        {
          v19 = v18;
          memcpy(v18, v17, v15);
          v20 = (void *)[objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:v15];
          memcpy((void *)[v20 mutableBytes], v19, v15);
          free(v19);
          v26[v13] = @"AVChannelLayoutKey";
          v25[v13] = v20;
          unsigned int v13 = v8 + 2;
        }
      }
    }
    actualSettings = a1->_actualSettings;
    if (actualSettings) {

    }
    a1->_actualSettings = (NSDictionary *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithObjects:v25 forKeys:v26 count:v13];
    format = a1->_format;
    if (format) {

    }
    uint64_t v23 = 0;
    a1->_format = [[AVAudioFormat alloc] initWithSettings:a1->_actualSettings];
    do

    while (v13 != v23);
  }
}

uint64_t AudioPlayerImpl_GetProperty<unsigned int>(AVAudioPlayerCpp *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  if (AVAudioPlayerCpp::GetProperty(a1, a2, &v6, (const void **)&v7)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v6 == 4;
  }
  uint64_t result = v4;
  if (v4) {
    *a3 = *(_DWORD *)v7;
  }
  return result;
}

uint64_t AVAudioPlayerCpp::GetProperty(AVAudioPlayerCpp *this, int a2, unint64_t *a3, const void **a4)
{
  uint64_t result = 561017456;
  if (a2 <= 1701735795)
  {
    if (a2 <= 1667788402)
    {
      switch(a2)
      {
        case 1634951780:
          *a3 = 40;
          int v8 = (char *)this + 32;
          break;
        case 1651663220:
          *a3 = 4;
          int v8 = (char *)this + 504;
          break;
        case 1667787887:
          *a3 = [*((id *)this + 64) layoutSize];
          int v8 = (char *)[*((id *)this + 64) layout];
          break;
        default:
          return result;
      }
      goto LABEL_50;
    }
    if (a2 > 1685350764)
    {
      if (a2 != 1685350765)
      {
        if (a2 != 1685418593) {
          return result;
        }
        uint64_t outPropertyData = 0;
        uint64_t v14 = (OpaqueAudioFileID *)*((void *)this + 20);
        if (v14 && !*((void *)this + 33))
        {
          UInt32 ioDataSize = 8;
          AudioFileGetProperty(v14, 0x65647572u, &ioDataSize, &outPropertyData);
          *((void *)this + 31) = outPropertyData;
        }
        *a3 = 8;
        int v8 = (char *)this + 248;
        goto LABEL_50;
      }
      uint64_t v15 = mach_absolute_time();
      int v8 = (char *)this + 360;
      *((double *)this + 45) = (double)v15 * 0.0000000416666667;
    }
    else
    {
      if (a2 == 1667788403)
      {
        *a3 = 4;
        int v8 = (char *)this + 60;
        goto LABEL_50;
      }
      if (a2 != 1668573549) {
        return result;
      }
      double v9 = 0.0;
      if (!*((unsigned char *)this + 313))
      {
        pthread_mutex_lock(&avap_mutex);
        double v10 = *((double *)this + 4);
        AVAudioPlayerCpp::getQueueTime(this, 1);
        double v11 = *((double *)this + 41);
        if (*((unsigned char *)this + 463))
        {
          uint64_t v12 = *((void *)this + 58);
          double v13 = (double)v12;
          if (*((_DWORD *)this + 74))
          {
            double v11 = fmod(*((long double *)this + 41), v13);
          }
          else
          {
            if (v11 <= v13) {
              double v16 = *((double *)this + 41);
            }
            else {
              double v16 = (double)v12;
            }
            double v11 = fmax(v16, 0.0);
          }
        }
        pthread_mutex_unlock(&avap_mutex);
        double v9 = v11 / v10;
      }
      int v8 = (char *)this + 352;
      *((double *)this + 44) = v9;
    }
    *a3 = 8;
    goto LABEL_50;
  }
  if (a2 > 1885433375)
  {
    if (a2 > 1918989412)
    {
      if (a2 == 1918989413)
      {
        *a3 = 8;
        int v8 = (char *)this + 224;
      }
      else
      {
        if (a2 != 1987013749) {
          return result;
        }
        *a3 = 8;
        int v8 = (char *)this + 208;
      }
    }
    else if (a2 == 1885433376)
    {
      *a3 = 8;
      int v8 = (char *)this + 232;
    }
    else
    {
      if (a2 != 1886157119) {
        return result;
      }
      *a3 = 4;
      int v8 = (char *)this + 308;
    }
  }
  else if (a2 > 1718909295)
  {
    if (a2 == 1718909296)
    {
      *a3 = 4;
      int v8 = (char *)this + 168;
    }
    else
    {
      if (a2 != 1819242352) {
        return result;
      }
      *a3 = 4;
      int v8 = (char *)this + 296;
    }
  }
  else if (a2 == 1701735796)
  {
    *a3 = 4;
    int v8 = (char *)this + 376;
  }
  else
  {
    if (a2 != 1701737076) {
      return result;
    }
    *a3 = 4;
    int v8 = (char *)this + 240;
  }
LABEL_50:
  uint64_t result = 0;
  *a4 = v8;
  return result;
}

void sub_19D797990(_Unwind_Exception *a1)
{
}

uint64_t UTItoFileType(NSString *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = 1095321155;
  if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypeaiff.isa)] == NSOrderedSame) {
    return 1095321158;
  }
  if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypeaifc.isa)])
  {
    if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypewave.isa)])
    {
      if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypempeg.isa)])
      {
        if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypeappl.isa)])
        {
          if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypecore.isa)])
          {
            if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypempeg_0.isa)])
            {
              if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypeac3.isa)])
              {
                if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletypesuna.isa)])
                {
                  if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletype3gpp.isa)])
                  {
                    if ([(NSString *)a1 compare:FileTypeConstant(&cfstr_Avfiletype3gpp_0.isa)]) {
                      return 0;
                    }
                    else {
                      return 862416946;
                    }
                  }
                  else
                  {
                    return 862417008;
                  }
                }
                else
                {
                  return 1315264596;
                }
              }
              else
              {
                return 1633889587;
              }
            }
            else
            {
              return 1297106739;
            }
          }
          else
          {
            return 1667327590;
          }
        }
        else
        {
          return 1832149350;
        }
      }
      else
      {
        return 1836069990;
      }
    }
    else
    {
      return 1463899717;
    }
  }
  return v2;
}

void sub_19D797D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D797F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *CAException::what(CAException *this)
{
  return "CAException";
}

void CAException::~CAException(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x19F3ABB30);
}

void sub_19D79833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MEMORY[0x19F3ABB30](v3, 0x10B1C40D9523570);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)) {
    std::recursive_mutex::unlock(*(std::recursive_mutex **)(a1 + 16));
  }
  if (*(unsigned char *)(a1 + 8)) {
    std::recursive_mutex::unlock(*(std::recursive_mutex **)a1);
  }
  return a1;
}

void sub_19D7984D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x19F3ABB30](v9, 0x10B1C4016FEDC95);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AVAudioGenericIONodeImpl::AVAudioGenericIONodeImpl(AVAudioGenericIONodeImpl *this, BOOL a2, AVAudioEngineManualRenderingMode a3)
{
  long long v3 = xmmword_19D8B1CB0;
  int v4 = 0;
  AVAudioNodeImpl::AVAudioNodeImpl((AVAudioNodeImplBase *)this, 0, (uint64_t)&v3, 0);
}

void sub_19D7985C0(_Unwind_Exception *a1)
{
  AVAudioUnitImpl::~AVAudioUnitImpl(v1);
  _Unwind_Resume(a1);
}

void AVAudioUnitImpl::~AVAudioUnitImpl(id *this)
{
  *this = &unk_1EEFA47E0;

  this[2] = 0;

  AVAudioNodeImpl::~AVAudioNodeImpl(this);
}

{
  uint64_t vars8;

  AVAudioUnitImpl::~AVAudioUnitImpl(this);

  JUMPOUT(0x19F3ABB30);
}

void __clang_call_terminate(void *a1)
{
}

BOOL AVAudioNodeImplBase::IsPlayingImpl(AVAudioNodeImplBase *this)
{
  return *((void *)this + 1) && *((unsigned char *)this + 48) != 0;
}

uint64_t AVAudioNodeImplBase::IsSinkNode(AVAudioNodeImplBase *this)
{
  return 0;
}

uint64_t AVAudioNodeImplBase::IsAVAudioSourceNode(AVAudioNodeImplBase *this)
{
  return 0;
}

AVAudioNodeImplBase *AVAudioNodeImplBase::SetOutputRenderPipelineLatency(AVAudioNodeImplBase *this, double a2)
{
  return this;
}

double AVAudioNodeImplBase::GetProcessingLatency(AVAudioNodeImplBase *this)
{
  return *((double *)this + 11);
}

uint64_t AVAudioNodeImplBase::Clock(AVAudioNodeImplBase *this)
{
  uint64_t result = *((void *)this + 2);
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(void *)this + 424))(this);
    *((void *)this + 2) = result;
  }
  return result;
}

void AVAudioNodeImplBase::Stop(AVAudioNodeImplBase *this)
{
  (*(void (**)(AVAudioNodeImplBase *))(*(void *)this + 456))(this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    long long v3 = *(AVAudioEngineImpl **)(v2 + 8);
    AVAudioEngineImpl::NodeRenderingStateChanged(v3, this);
  }
}

void AVAudioNodeImplBase::Pause(AVAudioNodeImplBase *this)
{
  (*(void (**)(AVAudioNodeImplBase *))(*(void *)this + 448))(this);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    long long v3 = *(AVAudioEngineImpl **)(v2 + 8);
    AVAudioEngineImpl::NodeRenderingStateChanged(v3, this);
  }
}

void AVAudioNodeImplBase::Start(AVAudioNodeImplBase *this, AVAudioTime *a2)
{
  (*(void (**)(AVAudioNodeImplBase *, AVAudioTime *))(*(void *)this + 440))(this, a2);
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    int v4 = *(AVAudioEngineImpl **)(v3 + 8);
    AVAudioEngineImpl::NodeRenderingStateChanged(v4, this);
  }
}

uint64_t AVAudioNodeImplBase::IsPlaying(AVAudioNodeImplBase *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 432))();
}

uint64_t AVAudioNodeImplBase::SetManualRenderingMode(AVAudioNodeImplBase *this, unsigned int a2, AVAudioEngineManualRenderingMode a3)
{
  *((unsigned char *)this + 72) = a2;
  if (a2) {
    AVAudioEngineManualRenderingMode v4 = a3;
  }
  else {
    AVAudioEngineManualRenderingMode v4 = AVAudioEngineManualRenderingModeRealtime;
  }
  *((void *)this + 10) = v4;
  if (a3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a2;
  }
  uint64_t v6 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(void *)this + 40))(this);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 184))(v6, v5);
  *((unsigned char *)this + 49) = v5;
  return result;
}

uint64_t AVAudioNodeImpl::GetComponentDescription(AVAudioNodeImpl *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AVAudioNodeImpl *))(*(void *)this + 40))(this)
                           + 16);

  return v1();
}

uint64_t AVAudioNodeImpl::BusForElement(AVAudioNodeImpl *this, unsigned int a2)
{
  return a2;
}

uint64_t AVAudioNodeImpl::ElementForBus(AVAudioNodeImpl *this, uint64_t a2)
{
  return a2;
}

uint64_t AVAudioNodeImpl::GetAudioUnitV3(AVAudioNodeImpl *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AVAudioNodeImpl *))(*(void *)this + 40))(this)
                           + 304);

  return v1();
}

uint64_t AVAudioNodeImpl::GetAudioUnitV2(AVAudioNodeImpl *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AVAudioNodeImpl *))(*(void *)this + 40))(this)
                           + 272);

  return v1();
}

double AVAudioNodeImpl::GetDeviceLatency(AVAudioNodeImpl *this)
{
  return 0.0;
}

uint64_t AVAudioNodeImplBase::RemoveRenderCallback(AVAudioNodeImplBase *this, uint64_t a2, const AURenderCallbackStruct *a3)
{
  uint64_t v5 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(void *)this + 40))(this);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, const AURenderCallbackStruct *))(*(void *)v5 + 216);

  return v6(v5, a2, a3);
}

uint64_t AVAudioNodeImplBase::AddRenderCallback(AVAudioNodeImplBase *this, uint64_t a2, const AURenderCallbackStruct *a3)
{
  uint64_t v5 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(void *)this + 40))(this);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, const AURenderCallbackStruct *))(*(void *)v5 + 208);

  return v6(v5, a2, a3);
}

uint64_t AVAudioNodeImplBase::RemoveRenderObserver(AVAudioNodeImplBase *this, const AURenderCallbackStruct *a2)
{
  uint64_t v3 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(void *)this + 40))(this);
  AVAudioEngineManualRenderingMode v4 = *(uint64_t (**)(uint64_t, const AURenderCallbackStruct *))(*(void *)v3 + 200);

  return v4(v3, a2);
}

uint64_t AVAudioNodeImplBase::AddRenderObserver(AVAudioNodeImplBase *this, const AURenderCallbackStruct *a2)
{
  uint64_t v3 = (*(uint64_t (**)(AVAudioNodeImplBase *))(*(void *)this + 40))(this);
  AVAudioEngineManualRenderingMode v4 = *(uint64_t (**)(uint64_t, const AURenderCallbackStruct *))(*(void *)v3 + 192);

  return v4(v3, a2);
}

uint64_t AVAudioNodeImpl::SetNumberOutputs(AVAudioNodeImpl *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AVAudioNodeImpl *))(*(void *)this + 40))(this)
                           + 112);

  return v1();
}

uint64_t AVAudioNodeImpl::SetNumberInputs(AVAudioNodeImpl *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AVAudioNodeImpl *))(*(void *)this + 40))(this)
                           + 104);

  return v1();
}

uint64_t AVAudioNodeImpl::NumberOutputs(AVAudioNodeImpl *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AVAudioNodeImpl *))(*(void *)this + 40))(this)
                           + 96);

  return v1();
}

uint64_t AVAudioNodeImpl::NumberInputs(AVAudioNodeImpl *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(AVAudioNodeImpl *))(*(void *)this + 40))(this)
                           + 88);

  return v1();
}

uint64_t AVAudioNodeImpl::AUI(AVAudioNodeImpl *this)
{
  return *((void *)this + 22);
}

uint64_t AVAudioNodeImpl::AVAE_CheckNodeHasEngine(uint64_t this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(this + 168) && !*(void *)(this + 8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v1 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      uint64_t v3 = "AVAEInternal.h";
      __int16 v4 = 1024;
      int v5 = 71;
      __int16 v6 = 2080;
      uint64_t v7 = "AVAudioNodeImpl.h";
      __int16 v8 = 1024;
      int v9 = 303;
      __int16 v10 = 2080;
      double v11 = "AVAE_CheckNodeHasEngine";
      __int16 v12 = 2080;
      double v13 = "_engine != nil";
      _os_log_impl(&dword_19D794000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "_engine != nil");
  }
  return this;
}

void AVAudioGenericIONodeImpl::~AVAudioGenericIONodeImpl(id *this)
{
  AVAudioUnitImpl::~AVAudioUnitImpl(this);

  JUMPOUT(0x19F3ABB30);
}

void sub_19D7990B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D799A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_19D799BB4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL std::lock[abi:ne180100]<std::recursive_mutex,std::recursive_mutex>(std::recursive_mutex *this, std::recursive_mutex *a2)
{
  while (1)
  {
    std::recursive_mutex::lock(this);
    BOOL result = std::recursive_mutex::try_lock(a2);
    if (result) {
      break;
    }
    std::recursive_mutex::unlock(this);
    sched_yield();
    std::recursive_mutex::lock(a2);
    BOOL result = std::recursive_mutex::try_lock(this);
    if (result) {
      break;
    }
    std::recursive_mutex::unlock(a2);
    sched_yield();
  }
  return result;
}

void sub_19D799CCC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D799D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D799E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D799ED8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

void sub_19D79A0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_19D79A29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_19D79A504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_19D79A5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79A6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79A7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79A8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79AA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79AB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79ABC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79AC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D79AD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t supportsCarPlayMixableStream(void)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (isAVSystemControllerAvailable(void)::onceToken != -1) {
    dispatch_once(&isAVSystemControllerAvailable(void)::onceToken, &__block_literal_global_230);
  }
  if (!isAVSystemControllerAvailable(void)::isAvailable)
  {
    if (kAVVCScope)
    {
      uint64_t v3 = *(id *)kAVVCScope;
      if (!v3) {
        return 0;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      uint64_t v7 = "AVVCCarplayRuntimeAvailability.mm";
      __int16 v8 = 1024;
      int v9 = 21;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d CarPlay API not available", (uint8_t *)&v6, 0x12u);
    }

    return 0;
  }
  v0 = [MEMORY[0x1E4F74F60] sharedAVSystemController];
  uint64_t v1 = [v0 attributeForKey:*MEMORY[0x1E4F74B58]];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

void sub_19D79AF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t supportsCarPlayAuxStream(void)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (isAVSystemControllerAvailable(void)::onceToken != -1) {
    dispatch_once(&isAVSystemControllerAvailable(void)::onceToken, &__block_literal_global_230);
  }
  if (!isAVSystemControllerAvailable(void)::isAvailable)
  {
    if (kAVVCScope)
    {
      uint64_t v3 = *(id *)kAVVCScope;
      if (!v3) {
        return 0;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      uint64_t v7 = "AVVCCarplayRuntimeAvailability.mm";
      __int16 v8 = 1024;
      int v9 = 31;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d CarPlay API not available", (uint8_t *)&v6, 0x12u);
    }

    return 0;
  }
  v0 = [MEMORY[0x1E4F74F60] sharedAVSystemController];
  uint64_t v1 = [v0 attributeForKey:*MEMORY[0x1E4F74B30]];
  uint64_t v2 = [v1 BOOLValue];

  return v2;
}

void sub_19D79B090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z26isAVOutputContextAvailablev_block_invoke()
{
  getAVOutputContextClass();
  uint64_t result = objc_opt_class();
  isAVOutputContextAvailable(void)::wirelessSplitterModeAPIAvailable = result != 0;
  return result;
}

id getAVOutputContextClass(void)
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getAVOutputContextClass(void)::softClass;
  uint64_t v7 = getAVOutputContextClass(void)::softClass;
  if (!getAVOutputContextClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL23getAVOutputContextClassv_block_invoke;
    v3[3] = &unk_1E5965E38;
    v3[4] = &v4;
    ___ZL23getAVOutputContextClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_19D79B1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL23getAVOutputContextClassv_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!AVFoundationLibraryCore(char **)::frameworkLibrary)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    v7[2] = (void *)3221225472;
    v7[3] = ___ZL23AVFoundationLibraryCorePPc_block_invoke;
    v7[4] = &__block_descriptor_40_e5_v8__0l;
    v7[5] = v7;
    long long v8 = xmmword_1E5964668;
    uint64_t v9 = 0;
    AVFoundationLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!AVFoundationLibraryCore(char **)::frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AVFoundationLibrary()"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AVVCCarplayRuntimeAvailability.mm", 50, @"%s", v7[0]);

    goto LABEL_10;
  }
  if (v7[0]) {
    free(v7[0]);
  }
  Class result = objc_getClass("AVOutputContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"Class getAVOutputContextClass()_block_invoke"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"AVVCCarplayRuntimeAvailability.mm", 51, @"Unable to find class %s", "AVOutputContext");

LABEL_10:
    __break(1u);
  }
  getAVOutputContextClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19D79B3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23AVFoundationLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void XPC_Dictionary::~XPC_Dictionary(XPC_Dictionary *this)
{
  XPC_Object::~XPC_Object(this);

  JUMPOUT(0x19F3ABB30);
}

uint64_t GetObjectMap(void)
{
  uint64_t result = sObjectMap;
  if (!sObjectMap)
  {
    pthread_mutex_lock(&sObjectMapCreationLock);
    if (!sObjectMap) {
      operator new();
    }
    pthread_mutex_unlock(&sObjectMapCreationLock);
    return sObjectMap;
  }
  return result;
}

BOOL ObjectExists(AVVoiceController *a1)
{
  id v1 = a1;
  pthread_mutex_lock(&MapLocker::sMapLock);
  uint64_t ObjectMap = GetObjectMap();
  uint64_t v4 = ObjectMap + 8;
  uint64_t v3 = *(void **)(ObjectMap + 8);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v5 = ObjectMap + 8;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= (unint64_t)v1;
    if (v6 >= (unint64_t)v1) {
      long long v8 = v3;
    }
    else {
      long long v8 = v3 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == v4 || *(void *)(v5 + 32) > (unint64_t)v1) {
LABEL_12:
  }
    uint64_t v5 = ObjectMap + 8;
  pthread_mutex_unlock(&MapLocker::sMapLock);

  return v5 != v4;
}

void sub_19D79B764(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&MapLocker::sMapLock);

  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        uint64_t *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *uint64_t v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    double v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  double v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    double v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *uint64_t v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t getUInt32ForKey(NSDictionary *a1, NSString *a2, unsigned int *a3, int *a4)
{
  uint64_t v7 = a1;
  int v8 = a2;
  *a4 = 0;
  uint64_t v9 = [(NSDictionary *)v7 objectForKey:v8];
  if (v9)
  {
    if (objc_opt_respondsToSelector())
    {
      *a3 = [v9 unsignedIntegerValue];
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      *a4 = -66675;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

{
  uint64_t result;
  void *v7;

  *a3 = 0;
  uint64_t result = [(NSDictionary *)a1 objectForKey:@"AVLinearPCMIsBigEndianKey", a4];
  if (result)
  {
    uint64_t v7 = (void *)result;
    if (objc_opt_respondsToSelector())
    {
      *(_DWORD *)a2 = [v7 unsignedIntegerValue];
      return 1;
    }
    else
    {
      uint64_t result = 0;
      *a3 = -50;
    }
  }
  return result;
}

void sub_19D79BD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getFloat64ForKey(NSDictionary *a1, NSString *a2, double *a3, int *a4)
{
  int v6 = a1;
  uint64_t v7 = @"AVSampleRateKey";
  *(_DWORD *)a3 = 0;
  int v8 = [(NSDictionary *)v6 objectForKey:@"AVSampleRateKey"];
  if (v8)
  {
    if (objc_opt_respondsToSelector())
    {
      [v8 doubleValue];
      *a2 = v9;
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      *(_DWORD *)a3 = -66675;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_19D79BE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t asbdFromSettings(NSDictionary *a1, AudioStreamBasicDescription *a2, void *a3, double a4, objc_object *a5)
{
  uint64_t v7 = a1;
  id v8 = a3;
  v29[0] = 0;
  *(_OWORD *)&a2->mSampleRate = 0u;
  *(_OWORD *)&a2->mBytesPerPacket = 0u;
  *(void *)&a2->mBitsPerChannel = 0;
  id v9 = v8;
  unsigned int v28 = 0;
  if (getUInt32ForKey(v7, &cfstr_Avformatidkey.isa, &v28, v29))
  {
    AudioFormatID v11 = v28;
    if (!v28) {
      AudioFormatID v11 = 1936745848;
    }
  }
  else
  {
    uint64_t v12 = v29[0];
    if (v29[0]) {
      goto LABEL_57;
    }
    AudioFormatID v11 = 1819304813;
  }
  a2->AudioFormatID mFormatID = v11;
  p_AudioFormatID mFormatID = &a2->mFormatID;
  double v27 = 0.0;
  if (getFloat64ForKey(v7, (NSString *)&v27, (double *)v29, v10))
  {
    if (v27 != 0.0)
    {
      double v14 = 8000.0;
      if (v27 >= 8000.0)
      {
        double v14 = v27;
        if (v27 > 192000.0) {
          double v14 = 192000.0;
        }
      }
      goto LABEL_15;
    }
LABEL_14:
    double v14 = 16000.0;
    goto LABEL_15;
  }
  uint64_t v12 = v29[0];
  if (v29[0]) {
    goto LABEL_57;
  }
  if (*p_mFormatID == 1936745848) {
    goto LABEL_14;
  }
  [v9 speechDetectionDeviceSampleRate];
  if (v14 == 0.0) {
    double v14 = 44100.0;
  }
LABEL_15:
  a2->mSampleRate = v14;
  if (getUInt32ForKey(v7, &cfstr_Avnumberofchan.isa, &v28, v29))
  {
    UInt32 v15 = v28;
    if (v28)
    {
      if (v28 > 0x40)
      {
LABEL_18:
        uint64_t v12 = 1718449215;
        goto LABEL_57;
      }
    }
    else
    {
      UInt32 v15 = 1;
      unsigned int v28 = 1;
    }
  }
  else
  {
    uint64_t v12 = v29[0];
    if (v29[0]) {
      goto LABEL_57;
    }
    if (*p_mFormatID == 1936745848)
    {
      a2->mChannelsPerFrame = 1;
LABEL_43:
      uint64_t v12 = 0;
      a2->mFramesPerPacket = 0;
      goto LABEL_57;
    }
    unsigned int v16 = [v9 inputNumberOfChannels];
    if (v16 <= 1) {
      UInt32 v15 = 1;
    }
    else {
      UInt32 v15 = v16;
    }
  }
  a2->mChannelsPerFrame = v15;
  AudioFormatID mFormatID = a2->mFormatID;
  if (mFormatID == 1936745848) {
    goto LABEL_43;
  }
  if (mFormatID != 1819304813)
  {
    uint64_t v12 = 0;
    goto LABEL_57;
  }
  int UInt32ForKey = getUInt32ForKey(v7, &cfstr_Avlinearpcmisn.isa, &v28, v29);
  if (v28) {
    int v19 = UInt32ForKey;
  }
  else {
    int v19 = 0;
  }
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  if (v19 == 1)
  {
    mFormatFlags |= 0x20u;
    a2->AudioFormatFlags mFormatFlags = mFormatFlags;
  }
  a2->AudioFormatFlags mFormatFlags = mFormatFlags | 8;
  int v21 = getUInt32ForKey(v7, &cfstr_Avlinearpcmisf.isa, &v28, v29);
  if (v28) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  AudioFormatFlags v23 = a2->mFormatFlags;
  if (v22 == 1)
  {
    a2->AudioFormatFlags mFormatFlags = v23 | 1;
    if (getUInt32ForKey(v7, &cfstr_Avlinearpcmbit.isa, &v28, v29))
    {
      UInt32 v24 = (v28 + 7) & 0xFFFFFFF8;
      a2->mBitsPerChannel = v24;
      if (v24 - 65 < 0xFFFFFFC0) {
        goto LABEL_18;
      }
      goto LABEL_53;
    }
    uint64_t v12 = v29[0];
    if (v29[0]) {
      goto LABEL_57;
    }
    UInt32 v24 = 32;
  }
  else
  {
    a2->AudioFormatFlags mFormatFlags = v23 | 4;
    if (getUInt32ForKey(v7, &cfstr_Avlinearpcmbit.isa, &v28, v29))
    {
      UInt32 v24 = (v28 + 7) & 0xFFFFFFF8;
      a2->mBitsPerChannel = v24;
      if (v24 - 33 < 0xFFFFFFE0) {
        goto LABEL_18;
      }
      goto LABEL_53;
    }
    uint64_t v12 = v29[0];
    if (v29[0]) {
      goto LABEL_57;
    }
    UInt32 v24 = 16;
  }
  a2->mBitsPerChannel = v24;
LABEL_53:
  a2->mFramesPerPacket = 1;
  uint64_t v12 = 0;
  if ((a2->mFormatFlags & 0x20) != 0) {
    UInt32 v25 = v24 >> 3;
  }
  else {
    UInt32 v25 = (v24 >> 3) * a2->mChannelsPerFrame;
  }
  a2->mBytesPerPacket = v25;
  a2->mBytesPerFrame = v25;
LABEL_57:

  return v12;
}

void sub_19D79C1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *GetModelPathComponent(void)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (MGIsQuestionValid())
  {
    uint64_t v0 = MGGetSInt32Answer();
    if ((int)v0 >= 1)
    {
      id v1 = [NSString stringWithFormat:@"%@%d", @"AID", v0];
      goto LABEL_58;
    }
  }
  else
  {
    LODWORD(v0) = 0;
  }
  if (kAVVCScope)
  {
    uint64_t v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v10 = "AVVCUtils.mm";
    __int16 v11 = 1024;
    int v12 = 547;
    __int16 v13 = 1024;
    int v14 = v0;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Acoustic ID returned %d. Lets try the older method to load DSP graph", buf, 0x18u);
  }

LABEL_12:
  uint64_t v4 = MGGetProductType();
  int v5 = v4;
  if (v4 <= 1492264614)
  {
    if (v4 > 648163783)
    {
      if (v4 > 1064539871)
      {
        if (v4 == 1064539872)
        {
          id v1 = @"J152f";
          goto LABEL_58;
        }
        if (v4 == 1102220960)
        {
          id v1 = @"J680";
          goto LABEL_58;
        }
      }
      else
      {
        if (v4 == 648163784)
        {
          id v1 = @"J223";
          goto LABEL_58;
        }
        if (v4 == 995309656)
        {
          id v1 = @"J230k";
          goto LABEL_58;
        }
      }
    }
    else if (v4 > 463077441)
    {
      if (v4 == 463077442)
      {
        id v1 = @"J137";
        goto LABEL_58;
      }
      if (v4 == 647612397)
      {
        id v1 = @"J215";
        goto LABEL_58;
      }
    }
    else
    {
      if (v4 == 95249044)
      {
        id v1 = @"J132";
        goto LABEL_58;
      }
      if (v4 == 376943508)
      {
        id v1 = @"J327";
        goto LABEL_58;
      }
    }
    goto LABEL_50;
  }
  if (v4 <= 2799443389)
  {
    if (v4 > 2325660397)
    {
      if (v4 == 2325660398)
      {
        id v1 = @"J214k";
        goto LABEL_58;
      }
      if (v4 == 2440616150)
      {
        id v1 = @"J213";
        goto LABEL_58;
      }
      goto LABEL_50;
    }
    if (v4 != 1492264615)
    {
      if (v4 == 1568600092)
      {
        id v1 = @"J214";
        goto LABEL_58;
      }
      goto LABEL_50;
    }
LABEL_30:
    id v1 = @"J185";
    goto LABEL_58;
  }
  if (v4 <= 3273904383)
  {
    if (v4 == 2799443390)
    {
      id v1 = @"J140a";
      goto LABEL_58;
    }
    if (v4 != 3019628807) {
      goto LABEL_50;
    }
    goto LABEL_30;
  }
  if (v4 == 3273904384)
  {
    id v1 = @"J780";
    goto LABEL_58;
  }
  if (v4 == 3457645855)
  {
    id v1 = @"J140K";
    goto LABEL_58;
  }
LABEL_50:
  if (!kAVVCScope)
  {
    int v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
    goto LABEL_54;
  }
  int v6 = *(id *)kAVVCScope;
  if (v6)
  {
LABEL_54:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v10 = "AVVCUtils.mm";
      __int16 v11 = 1024;
      int v12 = 646;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Unexpected product 0x%x will not load DSP graph", buf, 0x18u);
    }
  }
  id v1 = @"???";
LABEL_58:

  return v1;
}

id GetLowercaseModelName(void)
{
  uint64_t v0 = GetModelPathComponent();
  id v1 = [v0 lowercaseString];

  return v1;
}

void sub_19D79C638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z17isDarwinOSProductv_block_invoke()
{
  uint64_t result = os_variant_is_darwinos();
  isDarwinOSProduct(void)::isDarwinOS = result;
  return result;
}

void UpdateWithHardwareDeviceNumInputChannels(unsigned int *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (isDarwinOSProduct(void)::onceToken != -1) {
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
  }
  if (isDarwinOSProduct(void)::isDarwinOS)
  {
    uint64_t v2 = MGGetProductType();
    if (v2 == 376943508)
    {
      *a1 = 10;
      return;
    }
    int v3 = v2;
    if (kAVVCScope)
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        return;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = *a1;
      int v7 = 136315906;
      id v8 = "AVVCUtils.mm";
      __int16 v9 = 1024;
      int v10 = 836;
      __int16 v11 = 1024;
      int v12 = v3;
      __int16 v13 = 1024;
      int v14 = v6;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Product 0x%x, numChannels unchanged at: %u", (uint8_t *)&v7, 0x1Eu);
    }
  }
}

__CFString *ExtractProcessNameFromString(NSString *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v12 = 0;
    uint64_t v2 = objc_msgSend(MEMORY[0x1E4F28FD8], "regularExpressionWithPattern:options:error:", @"(?<=,)(.*)(?=\\()"), 0, &v12;
    id v3 = v12;
    uint64_t v4 = objc_msgSend(v2, "firstMatchInString:options:range:", v1, 0, 0, -[NSString length](v1, "length"));
    id v5 = &stru_1EEFA9548;
    int v6 = v4;
    if (v4)
    {
      uint64_t v7 = [v4 range];
      __int16 v9 = -[NSString substringWithRange:](v1, "substringWithRange:", v7, v8);
      int v10 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
      id v5 = [v9 stringByTrimmingCharactersInSet:v10];
    }
  }
  else
  {
    id v5 = &stru_1EEFA9548;
  }

  return v5;
}

void sub_19D79C8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Get4CCFromInt(int a1)
{
  v3[4] = 0;
  v3[2] = BYTE1(a1);
  v3[3] = a1;
  v3[1] = BYTE2(a1);
  v3[0] = HIBYTE(a1);
  id v1 = [NSString stringWithCString:v3 encoding:4];

  return v1;
}

uint64_t IsPluginActivationContext(uint64_t a1)
{
  uint64_t result = 0;
  if (a1 > 1919771247)
  {
    if (a1 != 1919771248 && a1 != 1936750196)
    {
      uint64_t v3 = 1919776372;
LABEL_8:
      if (a1 != v3) {
        return result;
      }
    }
  }
  else if (a1 != 1651795060 && a1 != 1668314723)
  {
    uint64_t v3 = 1751414371;
    goto LABEL_8;
  }
  return 1;
}

uint64_t ___Z23isAudioSessionAvailablev_block_invoke()
{
  uint64_t result = objc_opt_class();
  isAudioSessionAvailable(void)::audioSessionAvailable = result != 0;
  return result;
}

void extractFirstInputPortTypeFromRouteDescription(void *a1, void **a2)
{
  id v9 = a1;
  uint64_t v3 = [v9 inputs];
  uint64_t v4 = v3;
  if (v3 && [v3 count])
  {
    id v5 = [v4 objectAtIndex:0];
    int v6 = [v5 portType];
    uint64_t v7 = [v6 copy];
    uint64_t v8 = *a2;
    *a2 = (void *)v7;
  }
}

void sub_19D79CAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *_logRouteDesc(AVAudioSessionRouteDescription *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = [(AVAudioSessionRouteDescription *)v1 inputs];
    uint64_t v4 = _logPortDesc(v3);
    id v5 = [&stru_1EEFA9548 stringByAppendingFormat:@"{ inputs: %@, ", v4];

    int v6 = [(AVAudioSessionRouteDescription *)v2 outputs];
    uint64_t v7 = _logPortDesc(v6);
    uint64_t v8 = [v5 stringByAppendingFormat:@"outputs: %@, ", v7];

    int v9 = [(AVAudioSessionRouteDescription *)v2 siriInputSource];
    int v10 = [(AVAudioSessionRouteDescription *)v2 siriRemoteInputIdentifier];
    __int16 v11 = Get4CCFromInt(v9);
    id v12 = [v8 stringByAppendingFormat:@"siriInputSource: %@, siriRemoteInputIdentifier: %@ }", v11, v10];
  }
  else
  {
    id v12 = @"null";
  }

  return v12;
}

void sub_19D79CC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D79CCF8()
{
}

__CFString *_logPortDesc(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v14 = v1;
  if (v1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v16;
      id v5 = @"[ ";
      do
      {
        uint64_t v6 = 0;
        uint64_t v7 = v5;
        do
        {
          if (*(void *)v16 != v4) {
            objc_enumerationMutation(v2);
          }
          uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8 * v6);
          int v9 = [v8 portType];
          int v10 = [v8 portName];
          __int16 v11 = [v8 UID];
          -[__CFString stringByAppendingFormat:](v7, "stringByAppendingFormat:", @"(type=%@, name=%@, UID=%@); ",
            v9,
            v10,
            v11,
            v14,
            (void)v15);
          id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();

          ++v6;
          uint64_t v7 = v5;
        }
        while (v3 != v6);
        uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v3);
    }
    else
    {
      id v5 = @"[ ";
    }

    id v12 = [(__CFString *)v5 stringByAppendingString:@"]"];
  }
  else
  {
    id v12 = @"null";
  }

  return v12;
}

void sub_19D79CECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z22IsSerializationEnabledv_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.avfoundation.avvc"];
  id v1 = [v0 objectForKey:@"enable_serialization"];

  if (v1) {
    IsSerializationEnabled(void)::enable = [v0 BOOLForKey:@"enable_serialization"];
  }
  if (kAVVCScope)
  {
    id v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_12;
    }
  }
  else
  {
    id v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "";
    uint64_t v6 = "AVVCUtils.mm";
    int v5 = 136315650;
    if (!IsSerializationEnabled(void)::enable) {
      uint64_t v4 = " NOT";
    }
    __int16 v7 = 1024;
    int v8 = 1192;
    __int16 v9 = 2080;
    int v10 = v4;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC_SERIALIZATION_POLICY_LOCK is%s enabled", (uint8_t *)&v5, 0x1Cu);
  }

LABEL_12:
}

void sub_19D79D098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ProfileMetrics(NSString *a1)
{
  id v3 = a1;
  id v1 = (void *)MEMORY[0x19F3AC180]();
  id v2 = +[AVVCMetricsManager sharedManager];
  [v2 logProfileMetrics:v3];
}

void sub_19D79D120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL ExecuteBlockOnRunLoop(__CFRunLoop *a1, dispatch_time_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
  __int16 v7 = (const void *)*MEMORY[0x1E4F1D418];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___Z21ExecuteBlockOnRunLoopP11__CFRunLoop18AVVCBlockingPolicyyU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E59651E8;
  id v8 = v5;
  id v16 = v8;
  int v17 = 1;
  __int16 v9 = v6;
  long long v15 = v9;
  CFRunLoopPerformBlock(a1, v7, block);
  CFRunLoopWakeUp(a1);
  intptr_t v10 = dispatch_semaphore_wait(v9, a2);
  if (v10)
  {
    if (kAVVCScope)
    {
      uint64_t v11 = *(id *)kAVVCScope;
      if (!v11) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v11 = MEMORY[0x1E4F14500];
      id v12 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v19 = "AVVCUtils.mm";
      __int16 v20 = 1024;
      int v21 = 1252;
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d runloop block timeout!", buf, 0x12u);
    }
  }
LABEL_9:

  return v10 != 0;
}

void sub_19D79D308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

intptr_t ___Z21ExecuteBlockOnRunLoopP11__CFRunLoop18AVVCBlockingPolicyyU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  intptr_t result = *(void *)(a1 + 40);
  if (result) {
    intptr_t result = (*(uint64_t (**)(void))(result + 16))();
  }
  if (*(_DWORD *)(a1 + 48) == 1)
  {
    id v3 = *(NSObject **)(a1 + 32);
    return dispatch_semaphore_signal(v3);
  }
  return result;
}

void CallbackBarrier(__CFRunLoop *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    id v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    id v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315394;
    intptr_t v10 = "AVVCUtils.mm";
    __int16 v11 = 1024;
    int v12 = 1263;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d waiting for any in-flight AudioQueue property change message on run loop...", (uint8_t *)&v9, 0x12u);
  }

LABEL_8:
  dispatch_time_t v4 = dispatch_time(0, 9000000000);
  if (!ExecuteBlockOnRunLoop(a1, v4, 0)) {
    goto LABEL_16;
  }
  if (kAVVCScope)
  {
    id v5 = *(id *)kAVVCScope;
    if (!v5) {
      goto LABEL_16;
    }
  }
  else
  {
    id v5 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v9 = 136315394;
    intptr_t v10 = "AVVCUtils.mm";
    __int16 v11 = 1024;
    int v12 = 1268;
    _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d CallbackBarrier: 9 second timeout!", (uint8_t *)&v9, 0x12u);
  }

LABEL_16:
  if (kAVVCScope)
  {
    __int16 v7 = *(id *)kAVVCScope;
    if (!v7) {
      return;
    }
  }
  else
  {
    __int16 v7 = MEMORY[0x1E4F14500];
    id v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315394;
    intptr_t v10 = "AVVCUtils.mm";
    __int16 v11 = 1024;
    int v12 = 1270;
    _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d received all AudioQueue property change messages on run loop.", (uint8_t *)&v9, 0x12u);
  }
}

void makeSynchronous(void *a1)
{
  id v1 = a1;
  if (v1) {
    v1[2](v1, 0);
  }
}

void sub_19D79D610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___Z20IsMetricsOwnedByAVVCv_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.avfoundation.avvc"];
  id v1 = [v0 objectForKey:@"avvc_owned_metrics"];

  if (v1) {
    IsMetricsOwnedByAVVC(void)::owned = [v0 BOOLForKey:@"avvc_owned_metrics"];
  }
  if (kAVVCScope)
  {
    id v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_12;
    }
  }
  else
  {
    id v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    dispatch_time_t v4 = "";
    id v6 = "AVVCUtils.mm";
    int v5 = 136315650;
    if (!IsMetricsOwnedByAVVC(void)::owned) {
      dispatch_time_t v4 = " NOT";
    }
    __int16 v7 = 1024;
    int v8 = 1315;
    __int16 v9 = 2080;
    intptr_t v10 = v4;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Metrics is%s owned by AVVC", (uint8_t *)&v5, 0x1Cu);
  }

LABEL_12:
}

void sub_19D79D784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

OpaqueAudioQueue *QueueIsRunning(OpaqueAudioQueue *result)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int outData = 0;
  if (result)
  {
    UInt32 ioDataSize = 4;
    OSStatus Property = AudioQueueGetProperty(result, 0x6171726Eu, &outData, &ioDataSize);
    if (!Property) {
      return (OpaqueAudioQueue *)(outData == 1);
    }
    OSStatus v2 = Property;
    if ((Property + 199999) > 0x61A7E)
    {
      if (kAVVCScope)
      {
        id v3 = *(id *)kAVVCScope;
        if (!v3) {
          return (OpaqueAudioQueue *)(outData == 1);
        }
      }
      else
      {
        id v3 = MEMORY[0x1E4F14500];
        id v6 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      *(_DWORD *)buf = 136315650;
      intptr_t v10 = "AVVCUtils.mm";
      __int16 v11 = 1024;
      int v12 = 1327;
      __int16 v13 = 1024;
      OSStatus v14 = v2;
      int v5 = "%25s:%-5d ERROR: QueueIsRunning: AudioQueueGetProperty(kAudioQueueProperty_IsRunning) (ignored) err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        id v3 = *(id *)kAVVCScope;
        if (!v3) {
          return (OpaqueAudioQueue *)(outData == 1);
        }
      }
      else
      {
        id v3 = MEMORY[0x1E4F14500];
        id v4 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      *(_DWORD *)buf = 136315650;
      intptr_t v10 = "AVVCUtils.mm";
      __int16 v11 = 1024;
      int v12 = 1327;
      __int16 v13 = 1024;
      OSStatus v14 = v2;
      int v5 = "%25s:%-5d ERROR: QueueIsRunning: AudioQueueGetProperty(kAudioQueueProperty_IsRunning) (ignored) err %d";
    }
    _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, v5, buf, 0x18u);
LABEL_17:

    return (OpaqueAudioQueue *)(outData == 1);
  }
  return result;
}

uint64_t isHACProduct(void)
{
  int v0 = MGGetBoolAnswer();
  int v1 = _os_feature_enabled_impl();
  if (v0) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  id v4 = (void *)MGCopyAnswer();
  int v5 = v4;
  if (v4)
  {
    if ([v4 isEqualToString:@"t8132"]) {
      uint64_t v3 = _os_feature_enabled_impl();
    }
    else {
      uint64_t v3 = 0;
    }
    if ([v5 isEqualToString:@"t8140"]) {
      uint64_t v3 = _os_feature_enabled_impl();
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_19D79DA24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetTrailingSilenceFromBuffer(__int16 *a1, uint64_t a2, float a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  ElapsedTime::ElapsedTime((ElapsedTime *)v34, "GetTrailingSilenceFromBuffer", 0, 0);
  if (a2 < 1)
  {
    __int16 v5 = 0;
  }
  else
  {
    __int16 v5 = 0;
    id v6 = a1;
    uint64_t v7 = a2;
    do
    {
      int v9 = *v6++;
      int v8 = v9;
      if (v9 < 0) {
        int v8 = -v8;
      }
      if ((__int16)v8 > v5) {
        __int16 v5 = v8;
      }
      --v7;
    }
    while (v7);
  }
  intptr_t v10 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.avfoundation.avvc"];
  __int16 v11 = [v10 objectForKey:@"beep_silence_threshold"];
  BOOL v12 = v11 == 0;

  if (v12)
  {
    float v14 = 0.0;
  }
  else
  {
    [v10 floatForKey:@"beep_silence_threshold"];
    float v14 = v13;
  }
  if (a2 < 1)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    id v16 = &a1[a2 - 1];
    while (1)
    {
      int v18 = *v16--;
      int v17 = v18;
      if (v18 < 0) {
        int v17 = -v17;
      }
      if (v17 > (int)(float)(v14 * (float)v5)) {
        break;
      }
      if (a2 == ++v15)
      {
        uint64_t v15 = a2;
        break;
      }
    }
  }
  if (kAVVCScope)
  {
    int v19 = *(id *)kAVVCScope;
    if (!v19) {
      goto LABEL_28;
    }
  }
  else
  {
    int v19 = MEMORY[0x1E4F14500];
    id v20 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 136316418;
    AudioFormatFlags v23 = "AVVCUtils.mm";
    __int16 v24 = 1024;
    int v25 = 1389;
    __int16 v26 = 1024;
    int v27 = (unsigned __int16)v5;
    __int16 v28 = 1024;
    int v29 = (int)(float)(v14 * (float)v5);
    __int16 v30 = 2048;
    double v31 = v14;
    __int16 v32 = 2048;
    uint64_t v33 = v15;
    _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d max: %hd, threshold %hd threshold: %f silenceFrames: %lld", (uint8_t *)&v22, 0x32u);
  }

LABEL_28:
  ElapsedTime::~ElapsedTime((ElapsedTime *)v34);
  return v15;
}

void sub_19D79DC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void ElapsedTime::ElapsedTime(ElapsedTime *this, const char *a2, const char *a3, char a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  mach_absolute_time();
  *((void *)this + 2) = __udivti3();
  *((unsigned char *)this + 152) = a4;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFTimeBase::TimeAsString((ElapsedTime *)((char *)this + 24), Current, v7);
}

void ElapsedTime::~ElapsedTime(ElapsedTime *this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  mach_absolute_time();
  uint64_t v2 = __udivti3();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFTimeBase::TimeAsString((ElapsedTime *)((char *)this + 88), Current, v4);
  if (*((void *)this + 1))
  {
    if (*((unsigned char *)this + 152))
    {
      if (kAVVCScope)
      {
        __int16 v5 = *(id *)kAVVCScope;
        if (!v5) {
          return;
        }
      }
      else
      {
        __int16 v5 = MEMORY[0x1E4F14500];
        id v6 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)this;
        int v8 = (char *)*((void *)this + 1);
        double v9 = (double)(unint64_t)(v2 - *((void *)this + 2));
        int v24 = 136316674;
        int v25 = "AVVC_Log.h";
        __int16 v26 = 1024;
        int v27 = 109;
        __int16 v28 = 2080;
        uint64_t v29 = v7;
        __int16 v30 = 2080;
        double v31 = v8;
        __int16 v32 = 2080;
        uint64_t v33 = (char *)this + 24;
        __int16 v34 = 2080;
        *(void *)&double v35 = (char *)this + 88;
        __int16 v36 = 2048;
        double v37 = v9 / 1000000.0;
        intptr_t v10 = "%25s:%-5d %s : %s : start: %s end: %s duration %.2f ms";
        __int16 v11 = v5;
        os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
LABEL_25:
        uint32_t v20 = 68;
LABEL_30:
        _os_log_impl(&dword_19D794000, v11, v12, v10, (uint8_t *)&v24, v20);
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (kAVVCScope)
    {
      __int16 v5 = *(id *)kAVVCScope;
      if (!v5) {
        return;
      }
    }
    else
    {
      __int16 v5 = MEMORY[0x1E4F14500];
      id v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)this;
      int v18 = (char *)*((void *)this + 1);
      double v19 = (double)(unint64_t)(v2 - *((void *)this + 2));
      int v24 = 136316674;
      int v25 = "AVVC_Log.h";
      __int16 v26 = 1024;
      int v27 = 113;
      __int16 v28 = 2080;
      uint64_t v29 = v17;
      __int16 v30 = 2080;
      double v31 = v18;
      __int16 v32 = 2080;
      uint64_t v33 = (char *)this + 24;
      __int16 v34 = 2080;
      *(void *)&double v35 = (char *)this + 88;
      __int16 v36 = 2048;
      double v37 = v19 / 1000000.0;
      intptr_t v10 = "%25s:%-5d %s : %s : start: %s end: %s duration %.2f ms";
      __int16 v11 = v5;
      os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_25;
    }
LABEL_31:

    return;
  }
  if (*((unsigned char *)this + 152))
  {
    if (kAVVCScope)
    {
      __int16 v5 = *(id *)kAVVCScope;
      if (!v5) {
        return;
      }
    }
    else
    {
      __int16 v5 = MEMORY[0x1E4F14500];
      id v13 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_31;
    }
    uint64_t v14 = *(void *)this;
    double v15 = (double)(unint64_t)(v2 - *((void *)this + 2));
    int v24 = 136316418;
    int v25 = "AVVC_Log.h";
    __int16 v26 = 1024;
    int v27 = 119;
    __int16 v28 = 2080;
    uint64_t v29 = v14;
    __int16 v30 = 2080;
    double v31 = (char *)this + 24;
    __int16 v32 = 2080;
    uint64_t v33 = (char *)this + 88;
    __int16 v34 = 2048;
    double v35 = v15 / 1000000.0;
    intptr_t v10 = "%25s:%-5d %s : start: %s end: %s duration %.2f ms";
    __int16 v11 = v5;
    os_log_type_t v12 = OS_LOG_TYPE_DEBUG;
LABEL_29:
    uint32_t v20 = 58;
    goto LABEL_30;
  }
  if (!kAVVCScope)
  {
    __int16 v5 = MEMORY[0x1E4F14500];
    id v21 = MEMORY[0x1E4F14500];
    goto LABEL_27;
  }
  __int16 v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_27:
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    uint64_t v22 = *(void *)this;
    double v23 = (double)(unint64_t)(v2 - *((void *)this + 2));
    int v24 = 136316418;
    int v25 = "AVVC_Log.h";
    __int16 v26 = 1024;
    int v27 = 123;
    __int16 v28 = 2080;
    uint64_t v29 = v22;
    __int16 v30 = 2080;
    double v31 = (char *)this + 24;
    __int16 v32 = 2080;
    uint64_t v33 = (char *)this + 88;
    __int16 v34 = 2048;
    double v35 = v23 / 1000000.0;
    intptr_t v10 = "%25s:%-5d %s : start: %s end: %s duration %.2f ms";
    __int16 v11 = v5;
    os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_29;
  }
}

void sub_19D79E0DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___Z29isAVSystemControllerAvailablev_block_invoke()
{
  uint64_t result = objc_opt_class();
  isAVSystemControllerAvailable(void)::isAvailable = result != 0;
  return result;
}

id GetRecordingAppsList(void)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (isAVSystemControllerAvailable(void)::onceToken != -1) {
    dispatch_once(&isAVSystemControllerAvailable(void)::onceToken, &__block_literal_global_230);
  }
  if (isAVSystemControllerAvailable(void)::isAvailable)
  {
    int v0 = [MEMORY[0x1E4F74F60] sharedAVSystemController];
    int v1 = [v0 attributeForKey:*MEMORY[0x1E4F74CA0]];

    goto LABEL_13;
  }
  if (!kAVVCScope)
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
    goto LABEL_9;
  }
  uint64_t v2 = *(id *)kAVVCScope;
  if (v2)
  {
LABEL_9:
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      id v6 = "AVVCUtils.mm";
      __int16 v7 = 1024;
      int v8 = 1411;
      _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVSystemController API not available", (uint8_t *)&v5, 0x12u);
    }
  }
  int v1 = 0;
LABEL_13:

  return v1;
}

void sub_19D79E274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL IsAnyAppRecording(void)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v0 = GetRecordingAppsList();
  if (kAVVCScope)
  {
    int v1 = *(id *)kAVVCScope;
    if (!v1) {
      goto LABEL_8;
    }
  }
  else
  {
    int v1 = MEMORY[0x1E4F14500];
    id v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315650;
    int v5 = "AVVCUtils.mm";
    __int16 v6 = 1024;
    int v7 = 1422;
    __int16 v8 = 2112;
    uint64_t v9 = v0;
    _os_log_impl(&dword_19D794000, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Apps currently recording: %@", (uint8_t *)&v4, 0x1Cu);
  }

LABEL_8:
  return v0 != 0;
}

uint64_t areNSStringsEqual(NSString *a1, NSString *a2)
{
  unint64_t v3 = a1;
  int v4 = a2;
  int v5 = v4;
  if (v3 | (unint64_t)v4)
  {
    uint64_t v6 = 0;
    if (v3 && v4) {
      uint64_t v6 = [(id)v3 isEqualToString:v4];
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_19D79E404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFTimeBase *CFTimeBase::TimeAsString(CFTimeBase *this, CFAbsoluteTime a2, char *a3)
{
  {
    CATimeUtilities::GregorianDateFromAbsoluteTime(double)::tz = (uint64_t)CFTimeZoneCopySystem();
  }
  CFGregorianDate GregorianDate = CFAbsoluteTimeGetGregorianDate(a2, (CFTimeZoneRef)CATimeUtilities::GregorianDateFromAbsoluteTime(double)::tz);
  int v6 = snprintf((char *)this, 0x40uLL, "%04d-%02d-%02d ", GregorianDate.year, (int)(*(void *)&GregorianDate.year >> 8) >> 24, (int)(*(void *)&GregorianDate.year >> 16) >> 24);
  signed int v7 = llround(GregorianDate.second * 1000000.0);
  snprintf((char *)this + v6, 64 - v6, "%02d:%02d:%02d.%06d", (int)(*(void *)&GregorianDate.year >> 24) >> 24, *(int *)&GregorianDate.month >> 24, v7 / 1000000, v7 % 1000000);
  return this;
}

void sub_19D79E538(_Unwind_Exception *a1)
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x19F3ABB30);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  int v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_19D79E654(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t AVVCPluginRecordingEngine::_asbdForClientSettings(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  v43 = a3;
  unint64_t v6 = 0;
  LODWORD(v45) = 0;
  signed int v7 = (void *)MEMORY[0x1E4F14500];
  while (1)
  {
    __int16 v8 = [v5 supportedFormats];
    BOOL v9 = [v8 count] > v6;

    if (!v9) {
      break;
    }
    if (kAVVCScope)
    {
      id v10 = *(id *)kAVVCScope;
      if (!v10) {
        goto LABEL_10;
      }
    }
    else
    {
      id v11 = v7;
      id v10 = v7;
    }
    os_log_type_t v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      id v13 = [v5 supportedFormats];
      uint64_t v14 = [v13 objectAtIndexedSubscript:v6];
      double v15 = [v14 debugDescription];
      HIDWORD(v45) = 136315906;
      v46 = "AVVCPluginRecordingEngine.mm";
      __int16 v47 = 1024;
      int v48 = 372;
      __int16 v49 = 1024;
      *(_DWORD *)v50 = v6;
      *(_WORD *)&v50[4] = 2112;
      *(void *)&v50[6] = v15;
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d supported Formats[%d] : %@ ", (uint8_t *)&v45 + 4, 0x22u);
    }
LABEL_10:
    ++v6;
  }
  id v16 = [v5 supportedFormats];
  uint64_t v17 = [v16 objectAtIndexedSubscript:0];

  if (kAVVCScope)
  {
    id v18 = *(id *)kAVVCScope;
    if (!v18) {
      goto LABEL_18;
    }
  }
  else
  {
    id v18 = (id)MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  uint32_t v20 = v18;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    id v21 = [v17 debugDescription];
    HIDWORD(v45) = 136315650;
    v46 = "AVVCPluginRecordingEngine.mm";
    __int16 v47 = 1024;
    int v48 = 378;
    __int16 v49 = 2112;
    *(void *)v50 = v21;
    _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using Format[0] : %@ ", (uint8_t *)&v45 + 4, 0x1Cu);
  }
LABEL_18:
  if (v17)
  {
    if (*(_DWORD *)([v17 streamDescription] + 8) == 1869641075) {
      goto LABEL_20;
    }
    if (*(_DWORD *)([v17 streamDescription] + 8) == 1936745848)
    {
      uint64_t v26 = [v17 streamDescription];
      long long v27 = *(_OWORD *)v26;
      long long v28 = *(_OWORD *)(v26 + 16);
      a4[4] = *(void *)(v26 + 32);
      *(_OWORD *)a4 = v27;
      *((_OWORD *)a4 + 1) = v28;
      a4[2] = 0x14000000046;
      goto LABEL_32;
    }
    if (*(_DWORD *)([v17 streamDescription] + 8) == 1819304813)
    {
LABEL_20:
      uint64_t v22 = [v17 streamDescription];
      long long v24 = *(_OWORD *)v22;
      long long v25 = *(_OWORD *)(v22 + 16);
      a4[4] = *(void *)(v22 + 32);
      *(_OWORD *)a4 = v24;
      *((_OWORD *)a4 + 1) = v25;
      goto LABEL_32;
    }
  }
  if (!kAVVCScope)
  {
    uint64_t v29 = MEMORY[0x1E4F14500];
    id v30 = MEMORY[0x1E4F14500];
    goto LABEL_28;
  }
  uint64_t v29 = *(id *)kAVVCScope;
  if (v29)
  {
LABEL_28:
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      HIDWORD(v45) = 136315394;
      v46 = "AVVCPluginRecordingEngine.mm";
      __int16 v47 = 1024;
      int v48 = 393;
      _os_log_impl(&dword_19D794000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d No Format specified.. Error", (uint8_t *)&v45 + 4, 0x12u);
    }
  }
  LODWORD(v45) = 5;
LABEL_32:
  NSString v44 = 0;
  if (getFloat64ForKey(v43, &v44, &v45, v23))
  {
    if (kAVVCScope)
    {
      double v31 = *(id *)kAVVCScope;
      if (!v31) {
        goto LABEL_47;
      }
    }
    else
    {
      double v31 = MEMORY[0x1E4F14500];
      id v32 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *a4;
      HIDWORD(v45) = 136315906;
      v46 = "AVVCPluginRecordingEngine.mm";
      __int16 v47 = 1024;
      int v48 = 399;
      __int16 v49 = 2048;
      *(void *)v50 = v44;
      *(_WORD *)&v50[8] = 2048;
      *(void *)&v50[10] = v33;
      __int16 v34 = "%25s:%-5d clientRequestedSR was:%.2f, setting to %.2f";
      double v35 = v31;
      uint32_t v36 = 38;
      goto LABEL_45;
    }
  }
  else
  {
    if (kAVVCScope)
    {
      double v31 = *(id *)kAVVCScope;
      if (!v31) {
        goto LABEL_47;
      }
    }
    else
    {
      double v31 = MEMORY[0x1E4F14500];
      id v37 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = *a4;
      HIDWORD(v45) = 136315650;
      v46 = "AVVCPluginRecordingEngine.mm";
      __int16 v47 = 1024;
      int v48 = 402;
      __int16 v49 = 2048;
      *(void *)v50 = v38;
      __int16 v34 = "%25s:%-5d clientRequestedSR was not specified, setting to %.2f";
      double v35 = v31;
      uint32_t v36 = 28;
LABEL_45:
      _os_log_impl(&dword_19D794000, v35, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)&v45 + 4, v36);
    }
  }

LABEL_47:
  (*(void (**)(uint64_t, double))(*(void *)a1 + 40))(a1, *(double *)a4);
  uint64_t v39 = LODWORD(v45);

  return v39;
}

void sub_19D79EBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::setDeviceIOBufferSizeFrames(AVVCRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCPluginRecordingEngine::getRecordRoute(uint64_t *a1, void **a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext((AVVCPluginRecordingEngine *)a1);
  uint64_t v5 = a1[47];
  id v6 = v4;
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v7 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock((std::mutex *)(v5 + 56));
  }
  if (v6)
  {
    if (objc_opt_respondsToSelector())
    {
      __int16 v8 = [v6 remoteInputDeviceName];
      uint64_t v9 = [v8 copy];
      id v10 = *(__CFString **)v5;
      *(void *)uint64_t v5 = v9;

      goto LABEL_23;
    }
    uint64_t v14 = *(__CFString **)v5;
    *(void *)uint64_t v5 = @"Error! No RemoteInputDeviceName property";

    if (kAVVCScope)
    {
      double v15 = *(id *)kAVVCScope;
      if (!v15) {
        goto LABEL_23;
      }
    }
    else
    {
      double v15 = MEMORY[0x1E4F14500];
      id v19 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315394;
      long long v28 = "AVVCRouteManager.mm";
      __int16 v29 = 1024;
      int v30 = 79;
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d active device doesn't support remoteInputDeviceName property", (uint8_t *)&v27, 0x12u);
    }

LABEL_23:
    if (objc_opt_respondsToSelector())
    {
      int v20 = [v6 deviceCategory];
      *(_DWORD *)(v5 + 8) = v20;
      if (v20 <= 1919512179)
      {
        if (v20 != 1919510644)
        {
          if (v20 == 1919511158)
          {
            id v21 = (__CFString **)&AVVoiceControllerRemoteInputJarvisRoute;
LABEL_36:
            uint64_t v22 = [NSString stringWithString:*v21];
            goto LABEL_37;
          }
LABEL_35:
          id v21 = AVVoiceControllerNoRecordRoute;
          goto LABEL_36;
        }
LABEL_30:
        id v21 = (__CFString **)&AVVoiceControllerBluetoothDoAPRoute;
        goto LABEL_36;
      }
      if (v20 == 1919512180)
      {
        uint64_t v22 = [NSString stringWithString:@"AVVCTestDevice"];
LABEL_37:
        uint64_t v17 = (__CFString *)v22;
        if (v22)
        {
          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v17 = @"No Record Route";
          double v23 = @"No Record Route";
          uint64_t v18 = 4294955512;
        }
        uint64_t v24 = [(__CFString *)v17 copy];
        long long v25 = *(void **)(v5 + 32);
        *(void *)(v5 + 32) = v24;

        goto LABEL_41;
      }
      if (v20 != 1919513718) {
        goto LABEL_35;
      }
    }
    else if (MGGetSInt32Answer() != 4 || MGGetBoolAnswer())
    {
      goto LABEL_30;
    }
    id v21 = (__CFString **)&AVVoiceControllerATVRemoteInputRoute;
    goto LABEL_36;
  }
  uint64_t v11 = [NSString stringWithString:@"No Record Route"];
  os_log_type_t v12 = *(void **)(v5 + 32);
  *(void *)(v5 + 32) = v11;

  if (!kAVVCScope)
  {
    id v13 = MEMORY[0x1E4F14500];
    id v16 = MEMORY[0x1E4F14500];
    goto LABEL_15;
  }
  id v13 = *(id *)kAVVCScope;
  if (v13)
  {
LABEL_15:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315650;
      long long v28 = "AVVCRouteManager.mm";
      __int16 v29 = 1024;
      int v30 = 71;
      __int16 v31 = 1024;
      int v32 = 2;
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::getRecordRoute : no matching device found, error : %d", (uint8_t *)&v27, 0x18u);
    }
  }
  uint64_t v17 = *(__CFString **)v5;
  *(void *)uint64_t v5 = @"Error! No Remote Device Found";
  uint64_t v18 = 2;
LABEL_41:

  if (!v7) {
    std::mutex::unlock((std::mutex *)(v5 + 56));
  }

  AVVCRouteManager::getRecordRoute(a1[47], a2);
  return v18;
}

void sub_19D79F080(_Unwind_Exception *a1)
{
  if (!v4) {
    std::mutex::unlock(v2);
  }

  _Unwind_Resume(a1);
}

id AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(AVVCPluginRecordingEngine *this)
{
  *(void *)&v17[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AVVCRouteManager::getRecordDeviceUID(*((id **)this + 47));
  unint64_t v3 = (void *)v2;
  if (*((void *)this + 35) != 1936750196)
  {
    if (!v2)
    {
      if (kAVVCScope)
      {
        uint64_t v5 = *(id *)kAVVCScope;
        if (!v5)
        {
          int v4 = 0;
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v5 = MEMORY[0x1E4F14500];
        id v10 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        id v13 = "AVVCPluginRecordingEngine.mm";
        __int16 v14 = 1024;
        int v15 = 69;
        _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d device identifier shouldn't be NULL... ", (uint8_t *)&v12, 0x12u);
      }
      int v4 = 0;
      goto LABEL_24;
    }
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_19:
        int v4 = [*((id *)this + 76) findDeviceWithIdentifier:v3];
        goto LABEL_25;
      }
    }
    else
    {
      id v6 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 136315650;
      id v13 = "AVVCPluginRecordingEngine.mm";
      __int16 v14 = 1024;
      int v15 = 72;
      __int16 v16 = 2112;
      *(void *)uint64_t v17 = v3;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d device identifier : %@", (uint8_t *)&v12, 0x1Cu);
    }

    goto LABEL_19;
  }
  int v4 = [*((id *)this + 76) findFirstBluetoothDevice];
  if (!kAVVCScope)
  {
    uint64_t v5 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
LABEL_13:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *((void *)this + 35);
      int v12 = 136315906;
      id v13 = "AVVCPluginRecordingEngine.mm";
      __int16 v14 = 1024;
      int v15 = 64;
      __int16 v16 = 1024;
      v17[0] = v8;
      LOWORD(v17[1]) = 2048;
      *(void *)((char *)&v17[1] + 2) = v4;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d finding the first device for activation mode (%{audio:4CC}d)  : %p", (uint8_t *)&v12, 0x22u);
    }
LABEL_24:

    goto LABEL_25;
  }
  uint64_t v5 = *(id *)kAVVCScope;
  if (v5) {
    goto LABEL_13;
  }
LABEL_25:

  return v4;
}

void sub_19D79F354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::getEngineType(AVVCPluginRecordingEngine *this)
{
  return 1;
}

uint64_t AVVCRecordingEngine::setupAudioQueueRecordDeviceAndUpdate(AVVCRecordingEngine *this, NSString *a2)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::getPastDataFramesAvailable(AVVCRecordingEngine *this, unsigned int *a2)
{
  return 4294967292;
}

uint64_t AVVCPluginRecordingEngine::setSessionIsRecordingFlag(AVVCPluginRecordingEngine *this)
{
  uint64_t v20 = 0;
  id v21 = &v20;
  uint64_t v22 = 0x2020000000;
  int v23 = 0;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3032000000;
  v18[3] = __Block_byref_object_copy_;
  v18[4] = __Block_byref_object_dispose_;
  id v19 = 0;
  char isSessionRecording = AVVCRecordingEngine::isSessionRecording((AVVCRecordingEngine *)this);
  unint64_t v3 = (*(void (**)(AVVCPluginRecordingEngine *, void))(*(void *)this + 64))(this, 0);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v16, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t v5 = v16;
  int v4 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3321888768;
  v9[2] = ___ZN25AVVCPluginRecordingEngine25setSessionIsRecordingFlagEv_block_invoke;
  v9[3] = &unk_1EEFA85F0;
  uint64_t v13 = v5;
  __int16 v14 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  id v6 = v3;
  char v15 = isSessionRecording;
  id v10 = v6;
  uint64_t v11 = v18;
  int v12 = &v20;
  (*(void (**)(AVVCPluginRecordingEngine *, void *, const char *))(*(void *)this + 368))(this, v9, "setSessionIsRecordingFlag");
  uint64_t v7 = *((unsigned int *)v21 + 6);

  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  _Block_object_dispose(v18, 8);
  _Block_object_dispose(&v20, 8);
  return v7;
}

void sub_19D79F578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void *std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void ___ZN25AVVCPluginRecordingEngine25setSessionIsRecordingFlagEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 56);
      if (v5)
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 72);
        uint64_t v7 = *(void **)(a1 + 32);
        uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
        id obj = *(id *)(v8 + 40);
        [v7 setRecordingFromRemoteInput:v6 error:&obj];
        objc_storeStrong((id *)(v8 + 40), obj);
        id v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        if (v9) {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v9 code];
        }
        if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
        {
          if (*(unsigned char *)(a1 + 72)) {
            unint64_t v10 = 1;
          }
          else {
            unint64_t v10 = 2;
          }
          AVVCRecordingEngine::setRecordMode(v5, v10);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_19D79F770(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_56c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
}

uint64_t AVVCPluginRecordingEngine::disposeAudioCaptures(AVVCPluginRecordingEngine *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v3 = *((void *)this + 9);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *((void *)this + 9) = 0;
  }
  return 0;
}

uint64_t AVVCPluginRecordingEngine::logAudioCaptures(AVVCPluginRecordingEngine *this, AVVCAudioCapturer *a2, AVAudioBuffer *a3, uint64_t a4)
{
  uint64_t v6 = a3;
  if (a2) {
    (*(void (**)(AVVCAudioCapturer *, AVAudioBuffer *, uint64_t))(*(void *)a2 + 24))(a2, v6, a4);
  }

  return 0;
}

void sub_19D79F8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::setupAudioCaptures(AVVCPluginRecordingEngine *this)
{
  long long v2 = *(_OWORD *)((char *)this + 40);
  v7[0] = *(_OWORD *)((char *)this + 24);
  v7[1] = v2;
  uint64_t v8 = *((void *)this + 7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Capture");
  uint64_t v3 = NewAVVCAudioCapturer();
  *((void *)this + 9) = v3;
  if (v6 < 0)
  {
    operator delete(__p);
    uint64_t v3 = *((void *)this + 9);
  }
  if (v3) {
    (*(void (**)(uint64_t, void, _OWORD *, void))(*(void *)v3 + 16))(v3, *((void *)this + 34), v7, 0);
  }
  return 0;
}

void sub_19D79F9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    char v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void AVVCPluginRecordingEngine::handleRecordInput(AVVCPluginRecordingEngine *this, AVAudioBuffer *a2, int a3, float *a4, const AudioTimeStamp *a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  if (kAVVCScope)
  {
    unint64_t v10 = *(id *)kAVVCScope;
    if (!v10) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    Float64 mSampleTime = a5->mSampleTime;
    UInt64 mHostTime = a5->mHostTime;
    int v48 = 136316162;
    __int16 v49 = "AVVCPluginRecordingEngine.mm";
    __int16 v50 = 1024;
    int v51 = 583;
    __int16 v52 = 1024;
    *(_DWORD *)v53 = a3;
    *(_WORD *)&v53[4] = 2048;
    *(void *)&v53[6] = mHostTime;
    *(_WORD *)&v53[14] = 2048;
    *(Float64 *)&v53[16] = mSampleTime;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d In AVVCPluginRecordingEngine::handleRecordInput: %u frames, hostTime : %lld, sampletime : %f", (uint8_t *)&v48, 0x2Cu);
  }

LABEL_8:
  uint64_t v14 = *((void *)this + 28);
  BOOL v15 = v14 == 6 || v14 <= 3;
  if (v15 && !*((unsigned char *)this + 253))
  {
    if (kAVVCScope)
    {
      id v22 = *(id *)kAVVCScope;
      if (!v22) {
        goto LABEL_60;
      }
    }
    else
    {
      id v22 = (id)MEMORY[0x1E4F14500];
      id v34 = MEMORY[0x1E4F14500];
    }
    uint64_t v16 = v22;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v35 = *((void *)this + 28);
      if (v35 > 6) {
        uint32_t v36 = "ILLEGAL";
      }
      else {
        uint32_t v36 = off_1E59657E8[v35];
      }
      int v47 = *((unsigned __int8 *)this + 253);
      int v48 = 136315906;
      __int16 v49 = "AVVCPluginRecordingEngine.mm";
      __int16 v50 = 1024;
      int v51 = 587;
      __int16 v52 = 2080;
      *(void *)v53 = v36;
      *(_WORD *)&v53[8] = 1024;
      *(_DWORD *)&v53[10] = v47;
      _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput: record internally stopped, so throwing away buffer. StreamState(%s). RecordCancelled(%d)", (uint8_t *)&v48, 0x22u);
    }

    goto LABEL_59;
  }
  if (v9 || v14 != 5)
  {
    uint64_t v17 = [(AVAudioBuffer *)v9 format];
    int v18 = *(_DWORD *)([v17 streamDescription] + 8);

    if (v18 != 1936745848)
    {
      if (v18 != 1869641075)
      {
        if (v18 == 1819304813)
        {
          id v19 = v9;
          uint64_t v20 = [(AVAudioBuffer *)v19 format];
          [v20 streamDescription];
          [(AVAudioBuffer *)v19 frameLength];

          id v21 = v19;
          operator new();
        }
        if (kAVVCScope)
        {
          uint64_t v16 = *(id *)kAVVCScope;
          if (!v16) {
            goto LABEL_60;
          }
        }
        else
        {
          uint64_t v16 = MEMORY[0x1E4F14500];
          id v37 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          goto LABEL_59;
        }
        int v48 = 136315650;
        __int16 v49 = "AVVCPluginRecordingEngine.mm";
        __int16 v50 = 1024;
        int v51 = 685;
        __int16 v52 = 1024;
        *(_DWORD *)v53 = v18;
        uint64_t v24 = "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput - Unsupported formatID: %u";
        long long v25 = v16;
        uint32_t v46 = 24;
        goto LABEL_55;
      }
      uint64_t v28 = v9;
      uint64_t v29 = [(AVAudioBuffer *)v28 packetDescriptions];
      uint64_t v30 = [(AVAudioBuffer *)v28 packetCount] - 1;
      __int16 v31 = (_DWORD *)(v29 + 16 * v30);
      int v32 = v31[3] + *v31;
      if (kAVVCScope)
      {
        id v33 = *(id *)kAVVCScope;
        if (!v33) {
          goto LABEL_54;
        }
      }
      else
      {
        id v33 = (id)MEMORY[0x1E4F14500];
        id v40 = MEMORY[0x1E4F14500];
      }
      v41 = v33;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        int v42 = [(AVAudioBuffer *)v28 packetCount];
        uint64_t v43 = *(void *)v31;
        int v44 = *(_DWORD *)(v29 + 16 * v30 + 8);
        int v45 = v31[3];
        int v48 = 136316674;
        __int16 v49 = "AVVCPluginRecordingEngine.mm";
        __int16 v50 = 1024;
        int v51 = 621;
        __int16 v52 = 1024;
        *(_DWORD *)v53 = v32;
        *(_WORD *)&v53[4] = 1024;
        *(_DWORD *)&v53[6] = v42;
        *(_WORD *)&v53[10] = 2048;
        *(void *)&v53[12] = v43;
        *(_WORD *)&v53[20] = 1024;
        *(_DWORD *)&v53[22] = v44;
        __int16 v54 = 1024;
        int v55 = v45;
        _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput (opus). bufferLength : %d, packetCount : %d, packetDesc.startOffset %lld, packetDesc.mVariableFramesInPacket %u, packetDesc.DataByteSize = %u", (uint8_t *)&v48, 0x34u);
      }

LABEL_54:
      operator new();
    }
    uint64_t v26 = v9;
    AVVCRecordingEngine::checkForEndpoint((AVVCRecordingEngine *)this, 0, a4);
    if (kAVVCScope)
    {
      int v27 = *(id *)kAVVCScope;
      if (!v27) {
        goto LABEL_49;
      }
    }
    else
    {
      int v27 = MEMORY[0x1E4F14500];
      id v38 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      int v48 = 136315394;
      __int16 v49 = "AVVCPluginRecordingEngine.mm";
      __int16 v50 = 1024;
      int v51 = 655;
      _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting up client buffer", (uint8_t *)&v48, 0x12u);
    }

LABEL_49:
    [(AVAudioBuffer *)v26 packetCount];
    uint64_t v39 = [(AVAudioBuffer *)v26 format];
    [v39 streamDescription];

    operator new();
  }
  if (kAVVCScope)
  {
    uint64_t v16 = *(id *)kAVVCScope;
    if (!v16) {
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4F14500];
    id v23 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    int v48 = 136315394;
    __int16 v49 = "AVVCPluginRecordingEngine.mm";
    __int16 v50 = 1024;
    int v51 = 594;
    uint64_t v24 = "%25s:%-5d AVVCPluginRecordingEngine::handleRecordInput - recordState is active, but getting nil buffer";
    long long v25 = v16;
    uint32_t v46 = 18;
LABEL_55:
    _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&v48, v46);
  }
LABEL_59:

LABEL_60:
}

void sub_19D7A0538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::getQueuePtrPropertyValue(AVVCRecordingEngine *this, unsigned int a2, void *a3, unsigned int *a4)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::getQueuePropertyValueSize(AVVCRecordingEngine *this, unsigned int a2, unsigned int *a3)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::setQueueFloat64PropertyValue(AVVCRecordingEngine *this, double a2)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::setQueueUInt32PropertyValue(AVVCRecordingEngine *this)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::getQueueFloat64PropertyValue(AVVCRecordingEngine *this, unsigned int a2, double *a3)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::getQueueUInt32PropertyValue(AVVCRecordingEngine *this, unsigned int a2, unsigned int *a3)
{
  return 4294967292;
}

double AVVCRecordingEngine::getElapsedRecordTime(AVVCRecordingEngine *this, double a2)
{
  return 0.0;
}

uint64_t AVVCPluginRecordingEngine::resetAudioEngine(AVVCPluginRecordingEngine *this)
{
  return 0;
}

void AVVCPluginRecordingEngine::updateStreamStoppedState(AVVCPluginRecordingEngine *this)
{
}

uint64_t AVVCPluginRecordingEngine::updateMeterLevels(AVVCPluginRecordingEngine *this)
{
  size_t v2 = *((unsigned int *)this + 13);
  uint64_t v3 = (float32x2_t *)*((void *)this + 38);
  if (!v3)
  {
    uint64_t v3 = (float32x2_t *)malloc_type_calloc(v2, 8uLL, 0x100004000313F17uLL);
    *((void *)this + 38) = v3;
  }
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    size_t v5 = (const float *)((char *)this + 628);
    float32x2_t v6 = vld1_dup_f32(v5);
    do
    {
      *v3++ = v6;
      --v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t AVVCPluginRecordingEngine::enableMetering(AVVCPluginRecordingEngine *this, char a2)
{
  *((unsigned char *)this + 296) = a2;
  return 0;
}

uint64_t AVVCPluginRecordingEngine::enableSiriListeningMode(AVVCPluginRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCRecordingEngine::getNumberOfChannels(AVVCRecordingEngine *this)
{
  return 4294967292;
}

__n128 AVVCPluginRecordingEngine::getRecordQueueFormat@<Q0>(AVVCPluginRecordingEngine *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 24);
  long long v3 = *(_OWORD *)((char *)this + 40);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *((void *)this + 7);
  return result;
}

uint64_t AVVCPluginRecordingEngine::destroyRecordEngine(AVVCPluginRecordingEngine *this, int a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v52, "AVVCPluginRecordingEngine::destroyRecordEngine");
  if (kAVVCScope)
  {
    id v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_43;
    }
  }
  else
  {
    id v4 = (id)MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  float32x2_t v6 = v4;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v50, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v7 = v50;
    if (v50)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v48, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      id v34 = (*(void (**)(uint64_t, void))(*(void *)v48 + 64))(v48, 0);
      switch([v34 sessionState])
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          uint64_t v8 = "Inactive";
          break;
        case 2u:
          uint64_t v8 = "InteruptedWhileRecording";
          break;
        case 3u:
          uint64_t v8 = "InteruptedWhilePlaying";
          break;
        case 4u:
          uint64_t v8 = "Deactivating";
          break;
        case 5u:
          uint64_t v8 = "Prewarming";
          break;
        case 6u:
          uint64_t v8 = "Activating";
          break;
        case 7u:
          uint64_t v8 = "Active";
          break;
        default:
          uint64_t v8 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      uint64_t v8 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v46, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    unint64_t v35 = v7;
    if (v46)
    {
      id v9 = v47;
      if (v47) {
        id v9 = (std::__shared_weak_count *)(v47->__shared_owners_ + 1);
      }
      unint64_t v10 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v46, *(unsigned int *)(v46 + 272), v9];
    }
    else
    {
      unint64_t v10 = @"(0x0) use_count:0";
    }
    id v11 = v10;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v44, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    int v12 = v44;
    if (v44)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v42, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 320))(v42);
      if (v13 > 4) {
        uint64_t v14 = "ILLEGAL";
      }
      else {
        uint64_t v14 = off_1E59657C0[v13];
      }
    }
    else
    {
      uint64_t v14 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v40, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v40)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v38, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unint64_t v15 = *(void *)(v38 + 224);
      if (v15 > 6) {
        uint64_t v16 = "ILLEGAL";
      }
      else {
        uint64_t v16 = off_1E59657E8[v15];
      }
      *(_DWORD *)buf = 136316418;
      __int16 v54 = "AVVCPluginRecordingEngine.mm";
      __int16 v55 = 1024;
      int v56 = 282;
      __int16 v57 = 2080;
      v58 = (AVVCRecordingEngine *)v8;
      __int16 v59 = 2112;
      v60 = v11;
      __int16 v61 = 2080;
      v62 = v14;
      __int16 v63 = 2080;
      v64 = v16;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      __int16 v54 = "AVVCPluginRecordingEngine.mm";
      __int16 v55 = 1024;
      int v56 = 282;
      __int16 v57 = 2080;
      v58 = (AVVCRecordingEngine *)v8;
      __int16 v59 = 2112;
      v60 = v11;
      __int16 v61 = 2080;
      v62 = v14;
      __int16 v63 = 2080;
      v64 = "unconfigured";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v12 && v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }

    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    if (v35)
    {

      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
    }
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
  }
LABEL_43:
  if (kAVVCScope)
  {
    id v17 = *(id *)kAVVCScope;
    if (!v17) {
      goto LABEL_51;
    }
  }
  else
  {
    id v17 = (id)MEMORY[0x1E4F14500];
    id v18 = MEMORY[0x1E4F14500];
  }
  id v19 = v17;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v50, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    *(_DWORD *)buf = 136315650;
    __int16 v54 = "AVVCPluginRecordingEngine.mm";
    __int16 v55 = 1024;
    int v56 = 283;
    __int16 v57 = 2048;
    v58 = v50;
    _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d (self %p)AVVCPluginRecordingEngine::destroyRecordEngine: Entering --->", buf, 0x1Cu);
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
  }

LABEL_51:
  *((unsigned char *)this + 252) = 1;
  uint64_t v20 = AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v50, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (!v20)
  {
    if (kAVVCScope)
    {
      id v22 = *(id *)kAVVCScope;
      if (!v22)
      {
LABEL_64:
        uint64_t v24 = 2;
        goto LABEL_73;
      }
    }
    else
    {
      id v22 = MEMORY[0x1E4F14500];
      id v23 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v54 = "AVVCPluginRecordingEngine.mm";
      __int16 v55 = 1024;
      int v56 = 317;
      __int16 v57 = 1024;
      LODWORD(v58) = 2;
      _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d destroyRecordEngine: device found, err : %d", buf, 0x18u);
    }

    goto LABEL_64;
  }
  if (!a2 || *((_DWORD *)this + 58) == -11785) {
    goto LABEL_70;
  }
  if (!kAVVCScope)
  {
    id v21 = (id)MEMORY[0x1E4F14500];
    id v25 = MEMORY[0x1E4F14500];
    goto LABEL_66;
  }
  id v21 = *(id *)kAVVCScope;
  if (v21)
  {
LABEL_66:
    uint64_t v26 = v21;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v54 = "AVVCPluginRecordingEngine.mm";
      __int16 v55 = 1024;
      int v56 = 295;
      _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCPluginRecordingEngine::destroyRecordEngine: about to call stopRecordingCompletionBlock - previous stop completion block didn't happen", buf, 0x12u);
    }
  }
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = ___ZN25AVVCPluginRecordingEngine19destroyRecordEngineEb_block_invoke;
  v36[3] = &__block_descriptor_36_e17_v16__0__NSError_8l;
  int v37 = 0;
  [v20 stopRecordingWithCompletionBlock:v36];
LABEL_70:
  [v20 setAudioInputBlock:0];
  if (objc_opt_respondsToSelector()) {
    [v20 setStatusChangeBlock:0];
  }
  uint64_t v24 = 0;
LABEL_73:
  if (kAVVCScope)
  {
    id v27 = *(id *)kAVVCScope;
    if (!v27) {
      goto LABEL_80;
    }
  }
  else
  {
    id v27 = (id)MEMORY[0x1E4F14500];
    id v28 = MEMORY[0x1E4F14500];
  }
  uint64_t v29 = v27;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v54 = "AVVCPluginRecordingEngine.mm";
    __int16 v55 = 1024;
    int v56 = 321;
    _os_log_impl(&dword_19D794000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCPluginRecordingEngine::destroyRecordEngine: Calling doneRecording explicitly", buf, 0x12u);
  }

LABEL_80:
  AVVCRecordingEngine::doneRecording(v50);
  AVVCRecordingEngine::setStreamState((uint64_t)this, 1);
  *((unsigned char *)this + 252) = 0;
  if (kAVVCScope)
  {
    id v30 = *(id *)kAVVCScope;
    if (!v30) {
      goto LABEL_88;
    }
  }
  else
  {
    id v30 = (id)MEMORY[0x1E4F14500];
    id v31 = MEMORY[0x1E4F14500];
  }
  int v32 = v30;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v44, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    *(_DWORD *)buf = 136315650;
    __int16 v54 = "AVVCPluginRecordingEngine.mm";
    __int16 v55 = 1024;
    int v56 = 326;
    __int16 v57 = 2048;
    v58 = v44;
    _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d (self %p)AVVCPluginRecordingEngine::destroyRecordEngine: Exiting <---", buf, 0x1Cu);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }

LABEL_88:
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }

  TraceMethod::~TraceMethod((TraceMethod *)v52);
  return v24;
}

void sub_19D7A0F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v35 && a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }

  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a14)
  {

    if (a31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a31);
    }
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }

  TraceMethod::~TraceMethod((TraceMethod *)(v36 - 184));
  _Unwind_Resume(a1);
}

void TraceMethod::TraceMethod(TraceMethod *this, const char *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  if (kAVVCScope)
  {
    long long v3 = *(id *)kAVVCScope;
    if (!v3) {
      return;
    }
  }
  else
  {
    long long v3 = MEMORY[0x1E4F14500];
    id v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)this;
    int v6 = 136315650;
    uint64_t v7 = "AVVC_Log.h";
    __int16 v8 = 1024;
    int v9 = 89;
    __int16 v10 = 2080;
    uint64_t v11 = v5;
    _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d >> %s", (uint8_t *)&v6, 0x1Cu);
  }
}

void ___ZN25AVVCPluginRecordingEngine19destroyRecordEngineEb_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (kAVVCScope)
    {
      id v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_16;
      }
    }
    else
    {
      id v4 = (id)MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    uint64_t v5 = v4;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = *(_DWORD *)(a1 + 32);
      __int16 v8 = [v3 debugDescription];
      int v10 = 136315906;
      uint64_t v11 = "AVVCPluginRecordingEngine.mm";
      __int16 v12 = 1024;
      int v13 = 304;
      __int16 v14 = 1024;
      int v15 = v7;
      __int16 v16 = 2112;
      id v17 = v8;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::destroyRecordEngine - stopRecordingWithCompletionBlock: returned error(%d) : %@ ", (uint8_t *)&v10, 0x22u);
    }
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v5 = *(id *)kAVVCScope;
      if (!v5) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      uint64_t v11 = "AVVCPluginRecordingEngine.mm";
      __int16 v12 = 1024;
      int v13 = 301;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d AVVCPluginRecordingEngine::destroyRecordEngine -- stopRecordingWithCompletionBlock: STOPPED", (uint8_t *)&v10, 0x12u);
    }
  }

LABEL_16:
}

void sub_19D7A1354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TraceMethod::~TraceMethod(TraceMethod *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    size_t v2 = *(id *)kAVVCScope;
    if (!v2) {
      return;
    }
  }
  else
  {
    size_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)this;
    int v5 = 136315650;
    id v6 = "AVVC_Log.h";
    __int16 v7 = 1024;
    int v8 = 90;
    __int16 v9 = 2080;
    uint64_t v10 = v4;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d << %s", (uint8_t *)&v5, 0x1Cu);
  }
}

uint64_t AVVCPluginRecordingEngine::stopRecording(AVVCPluginRecordingEngine *this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v41, "AVVCPluginRecordingEngine::stopRecording");
  if (kAVVCScope)
  {
    id v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_43;
    }
  }
  else
  {
    id v2 = (id)MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  uint64_t v4 = v2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v42, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v5 = *(void *)v42;
    if (*(void *)v42)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v39, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      uint64_t v26 = (*(void (**)(uint64_t, void))(*(void *)v39 + 64))(v39, 0);
      switch([v26 sessionState])
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          id v6 = "Inactive";
          break;
        case 2u:
          id v6 = "InteruptedWhileRecording";
          break;
        case 3u:
          id v6 = "InteruptedWhilePlaying";
          break;
        case 4u:
          id v6 = "Deactivating";
          break;
        case 5u:
          id v6 = "Prewarming";
          break;
        case 6u:
          id v6 = "Activating";
          break;
        case 7u:
          id v6 = "Active";
          break;
        default:
          id v6 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      id v6 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v37, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v37)
    {
      __int16 v7 = v38;
      if (v38) {
        __int16 v7 = (std::__shared_weak_count *)(v38->__shared_owners_ + 1);
      }
      int v8 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v37, *(unsigned int *)(v37 + 272), v7];
    }
    else
    {
      int v8 = @"(0x0) use_count:0";
    }
    __int16 v9 = v8;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v35, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v10 = v35;
    if (v35)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v33, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 320))(v33);
      if (v11 > 4) {
        __int16 v12 = "ILLEGAL";
      }
      else {
        __int16 v12 = off_1E59657C0[v11];
      }
    }
    else
    {
      __int16 v12 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v31, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v31)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v29, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unint64_t v13 = *(void *)(v29 + 224);
      if (v13 > 6) {
        __int16 v14 = "ILLEGAL";
      }
      else {
        __int16 v14 = off_1E59657E8[v13];
      }
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 215;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v6;
      __int16 v46 = 2112;
      int v47 = v9;
      __int16 v48 = 2080;
      __int16 v49 = v12;
      __int16 v50 = 2080;
      int v51 = v14;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 215;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v6;
      __int16 v46 = 2112;
      int v47 = v9;
      __int16 v48 = 2080;
      __int16 v49 = v12;
      __int16 v50 = 2080;
      int v51 = "unconfigured";
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v10 && v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }

    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    if (v5)
    {

      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
    }
    if (*(void *)&v42[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v42[8]);
    }
  }
LABEL_43:
  if (*((uint64_t *)this + 28) < 4)
  {
    uint64_t v15 = 0;
    goto LABEL_72;
  }
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  *(_DWORD *)&buf[24] = 0;
  __int16 v16 = AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v35, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (v16)
  {
    AVVCRecordingEngine::setStreamState((uint64_t)this, 6);
    if (kAVVCScope)
    {
      id v17 = *(id *)kAVVCScope;
      if (!v17)
      {
LABEL_56:
        *((unsigned char *)this + 252) = 1;
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v42, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        uint64_t v22 = *(void *)v42;
        id v21 = *(std::__shared_weak_count **)&v42[8];
        if (*(void *)&v42[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v42[8] + 16), 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 3321888768;
        v27[2] = ___ZN25AVVCPluginRecordingEngine13stopRecordingEv_block_invoke;
        v27[3] = &unk_1EEFA80B0;
        v27[5] = this;
        v27[6] = v22;
        id v28 = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v27[4] = buf;
        [v16 stopRecordingWithCompletionBlock:v27];
        if (v28) {
          std::__shared_weak_count::__release_weak(v28);
        }
        if (v21) {
          std::__shared_weak_count::__release_weak(v21);
        }
        goto LABEL_69;
      }
    }
    else
    {
      id v17 = MEMORY[0x1E4F14500];
      id v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v42 = 136315394;
      *(void *)&v42[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&v42[12] = 1024;
      *(_DWORD *)&v42[14] = 235;
      _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::stopRecording: mRecordIsStopping set to true", v42, 0x12u);
    }

    goto LABEL_56;
  }
  uint64_t v18 = *(void *)&buf[8];
  *(_DWORD *)(*(void *)&buf[8] + 24) = 2;
  if (!kAVVCScope)
  {
    id v19 = MEMORY[0x1E4F14500];
    id v23 = MEMORY[0x1E4F14500];
    goto LABEL_65;
  }
  id v19 = *(id *)kAVVCScope;
  if (v19)
  {
LABEL_65:
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v24 = *(_DWORD *)(v18 + 24);
      *(_DWORD *)uint64_t v42 = 136315650;
      *(void *)&v42[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&v42[12] = 1024;
      *(_DWORD *)&v42[14] = 266;
      __int16 v43 = 1024;
      int v44 = v24;
      _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecording:  No device found error :%d", v42, 0x18u);
    }

    uint64_t v18 = *(void *)&buf[8];
  }
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, *(_DWORD *)(v18 + 24), "stopRecording");
  AVVCRecordingEngine::doneRecording(v35);
LABEL_69:
  uint64_t v15 = *(unsigned int *)(*(void *)&buf[8] + 24);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Block_object_dispose(buf, 8);

LABEL_72:
  TraceMethod::~TraceMethod((TraceMethod *)v41);
  return v15;
}

void sub_19D7A1B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33,char a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v39 && a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }

  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  if (v38)
  {

    if (a33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a33);
    }
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }

  TraceMethod::~TraceMethod((TraceMethod *)&a34);
  _Unwind_Resume(a1);
}

void ___ZN25AVVCPluginRecordingEngine13stopRecordingEv_block_invoke(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    uint64_t v5 = a1[5];
    id v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      uint64_t v7 = a1[6];
      if (v7)
      {
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3321888768;
        v10[2] = ___ZN25AVVCPluginRecordingEngine13stopRecordingEv_block_invoke_120;
        v10[3] = &unk_1EEFA84A0;
        uint64_t v13 = v5;
        id v11 = v3;
        uint64_t v14 = v7;
        uint64_t v15 = v6;
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v12 = a1[4];
        (*(void (**)(uint64_t, void *, const char *))(*(void *)v7 + 368))(v7, v10, "stopRecording_block_invoke");
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }

        goto LABEL_16;
      }
    }
  }
  else
  {
    id v6 = 0;
  }
  if (kAVVCScope)
  {
    int v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    int v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    id v17 = "AVVCPluginRecordingEngine.mm";
    __int16 v18 = 1024;
    int v19 = 243;
    __int16 v20 = 2048;
    uint64_t v21 = 0;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecording: nil object encountered (eng: %p). Bailing", buf, 0x1Cu);
  }

LABEL_15:
  if (v6) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_19D7A1E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_48c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN25AVVCPluginRecordingEngine13stopRecordingEv_block_invoke_120(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 code];
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_12:
        id v11 = *(AVVCRecordingEngine **)(a1 + 56);
        uint64_t v10 = (AVVCRecordingEngine **)(a1 + 56);
        AVVCRecordingEngine::setRecordErrorStatus(v11, *(_DWORD *)(*((void *)*(v10 - 2) + 1) + 24), "stopRecording_block_invoke");
        AVVCRecordingEngine::doneRecording(*v10);
        return;
      }
    }
    else
    {
      id v3 = (id)MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    uint64_t v7 = v3;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      id v9 = [*(id *)(a1 + 32) debugDescription];
      int v14 = 136315906;
      uint64_t v15 = "AVVCPluginRecordingEngine.mm";
      __int16 v16 = 1024;
      int v17 = 256;
      __int16 v18 = 1024;
      int v19 = v8;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::stopRecordingWithCompletionBlock: returned error(%d) : %@ ", (uint8_t *)&v14, 0x22u);
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (!kAVVCScope)
  {
    uint64_t v5 = MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
    goto LABEL_14;
  }
  uint64_t v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_14:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 136315394;
      uint64_t v15 = "AVVCPluginRecordingEngine.mm";
      __int16 v16 = 1024;
      int v17 = 248;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::stopRecordingWithCompletionBlock: STOPPED", (uint8_t *)&v14, 0x12u);
    }
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if (*(void *)(v13 + 224) == 6) {
    AVVCRecordingEngine::doneRecording((AVVCRecordingEngine *)v13);
  }
  *(_DWORD *)(v4 + 628) = -1024458752;
}

void sub_19D7A20EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t AVVCPluginRecordingEngine::startRecording(AVVCPluginRecordingEngine *this)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v59 = 0;
  v60 = &v59;
  uint64_t v61 = 0x2020000000;
  int v62 = 0;
  TraceMethod::TraceMethod((TraceMethod *)v58, "AVVCPluginRecordingEngine::startRecording");
  if (kAVVCScope)
  {
    id v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_43;
    }
  }
  else
  {
    id v2 = (id)MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  uint64_t v4 = v2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v56, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v5 = v56;
    if (v56)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v54, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      uint64_t v38 = (*(void (**)(uint64_t, void))(*(void *)v54 + 64))(v54, 0);
      switch([v38 sessionState])
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          id v6 = "Inactive";
          break;
        case 2u:
          id v6 = "InteruptedWhileRecording";
          break;
        case 3u:
          id v6 = "InteruptedWhilePlaying";
          break;
        case 4u:
          id v6 = "Deactivating";
          break;
        case 5u:
          id v6 = "Prewarming";
          break;
        case 6u:
          id v6 = "Activating";
          break;
        case 7u:
          id v6 = "Active";
          break;
        default:
          id v6 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      id v6 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v52, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v52)
    {
      uint64_t v7 = v53;
      if (v53) {
        uint64_t v7 = (std::__shared_weak_count *)(v53->__shared_owners_ + 1);
      }
      int v8 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v52, *(unsigned int *)(v52 + 272), v7];
    }
    else
    {
      int v8 = @"(0x0) use_count:0";
    }
    id v9 = v8;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v50, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v10 = v50;
    if (v50)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v48, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 320))(v48);
      if (v11 > 4) {
        id v12 = "ILLEGAL";
      }
      else {
        id v12 = off_1E59657C0[v11];
      }
    }
    else
    {
      id v12 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v46, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v46)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v44, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unint64_t v13 = *(void *)(v44 + 224);
      if (v13 > 6) {
        int v14 = "ILLEGAL";
      }
      else {
        int v14 = off_1E59657E8[v13];
      }
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 115;
      __int16 v64 = 2080;
      uint64_t v65 = v6;
      __int16 v66 = 2112;
      v67 = v9;
      __int16 v68 = 2080;
      v69 = v12;
      __int16 v70 = 2080;
      v71 = v14;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
    }
    else
    {
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 115;
      __int16 v64 = 2080;
      uint64_t v65 = v6;
      __int16 v66 = 2112;
      v67 = v9;
      __int16 v68 = 2080;
      v69 = v12;
      __int16 v70 = 2080;
      v71 = "unconfigured";
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    if (v10 && v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }

    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (v5)
    {

      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
  }
LABEL_43:
  *((void *)this + 77) = 0;
  *((_DWORD *)this + 156) = 0;
  AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  uint64_t v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    uint64_t v16 = *((void *)this + 30);
    if (kAVVCScope)
    {
      id v17 = *(id *)kAVVCScope;
      if (!v17) {
        goto LABEL_55;
      }
    }
    else
    {
      id v17 = (id)MEMORY[0x1E4F14500];
      id v20 = MEMORY[0x1E4F14500];
    }
    uint64_t v21 = v17;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v56, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 128;
      __int16 v64 = 2048;
      uint64_t v65 = v56;
      __int16 v66 = 2048;
      v67 = v15;
      _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d (self %p)startRecord : using activeDevice: %p", buf, 0x26u);
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
    }

LABEL_55:
    if (kAVVCScope)
    {
      id v22 = *(id *)kAVVCScope;
      if (!v22)
      {
LABEL_62:
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        uint64_t v26 = *(void *)buf;
        id v25 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke;
        aBlock[3] = &unk_1EEFA8190;
        uint64_t v42 = v26;
        __int16 v43 = v25;
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        v41 = &v59;
        id v27 = v15;
        uint64_t v40 = v27;
        id v28 = _Block_copy(aBlock);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v29 = (void *)MEMORY[0x1E4F1C9E8];
          id v30 = [NSNumber numberWithUnsignedLongLong:v16];
          uint64_t v31 = [NSNumber numberWithInteger:*((unsigned int *)this + 62)];
          int v32 = objc_msgSend(v29, "dictionaryWithObjectsAndKeys:", v30, @"StartTime", v31, @"StartAnchorPoint", 0);

          [(__CFString *)v27 startRecordingWithSettings:v32 withCompletionBlock:v28];
        }
        else
        {
          [(__CFString *)v27 startRecordingWithCompletionBlock:v28];
        }

        if (v43) {
          std::__shared_weak_count::__release_weak(v43);
        }
        if (v25) {
          std::__shared_weak_count::__release_weak(v25);
        }
        goto LABEL_77;
      }
    }
    else
    {
      id v22 = (id)MEMORY[0x1E4F14500];
      id v23 = MEMORY[0x1E4F14500];
    }
    int v24 = v22;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 132;
      __int16 v64 = 2048;
      uint64_t v65 = (const char *)v15;
      _os_log_impl(&dword_19D794000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### calling startRecordingWithCompletionBlock on device (%p) ####", buf, 0x1Cu);
    }

    goto LABEL_62;
  }
  __int16 v18 = v60;
  *((_DWORD *)v60 + 6) = 2;
  if (kAVVCScope)
  {
    int v19 = *(id *)kAVVCScope;
    if (!v19) {
      goto LABEL_77;
    }
  }
  else
  {
    int v19 = MEMORY[0x1E4F14500];
    id v33 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    int v34 = *((_DWORD *)v18 + 6);
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 200;
    __int16 v64 = 1024;
    LODWORD(v65) = v34;
    _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordQueue:  No device found, err : %d", buf, 0x18u);
  }

LABEL_77:
  unsigned int v35 = *((_DWORD *)v60 + 6);
  if (v35)
  {
    AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, v35, "startRecording");
    AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
    uint64_t v36 = *((unsigned int *)v60 + 6);
  }
  else
  {
    uint64_t v36 = 0;
  }

  TraceMethod::~TraceMethod((TraceMethod *)v58);
  _Block_object_dispose(&v59, 8);
  return v36;
}

void sub_19D7A2968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,std::__shared_weak_count *a35,char a36)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v39 && a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }

  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  if (v38)
  {

    if (a33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a33);
    }
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }

  TraceMethod::~TraceMethod((TraceMethod *)&a36);
  _Block_object_dispose((const void *)(v40 - 208), 8);
  _Unwind_Resume(a1);
}

void ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6)
      {
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 3321888768;
        v11[2] = ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke_111;
        v11[3] = &unk_1EEFA84D8;
        id v12 = v3;
        uint64_t v14 = v6;
        uint64_t v15 = v5;
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v10 = *(_OWORD *)(a1 + 32);
        id v7 = (id)v10;
        long long v13 = v10;
        (*(void (**)(uint64_t, void *, const char *))(*(void *)v6 + 368))(v6, v11, "startRecording_block_invoke");

        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }

        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (kAVVCScope)
  {
    int v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    int v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    id v17 = "AVVCPluginRecordingEngine.mm";
    __int16 v18 = 1024;
    int v19 = 140;
    __int16 v20 = 2048;
    uint64_t v21 = 0;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d startedRecording: nil object encountered (eng: %p). Bailing", buf, 0x1Cu);
  }

LABEL_15:
  if (v5) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_19D7A2CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ___ZN25AVVCPluginRecordingEngine14startRecordingEv_block_invoke_111(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    uint64_t v4 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    if (*(void *)(*(void *)(a1 + 56) + 224) == 4)
    {
      if (kAVVCScope)
      {
        uint64_t v5 = *(id *)kAVVCScope;
        if (!v5)
        {
LABEL_32:
          AVVCRecordingEngine::startedRecording(*(AVVCRecordingEngine **)(a1 + 56));
          return;
        }
      }
      else
      {
        uint64_t v5 = MEMORY[0x1E4F14500];
        id v14 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        int v34 = "AVVCPluginRecordingEngine.mm";
        __int16 v35 = 1024;
        int v36 = 148;
        _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCPluginRecordingEngine::startRecordingWithCompletionBlock: RUNNING", buf, 0x12u);
      }

      goto LABEL_32;
    }
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_37;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v15 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      int v34 = "AVVCPluginRecordingEngine.mm";
      __int16 v35 = 1024;
      int v36 = 152;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::startRecordingWithCompletionBlock: RUNNING-PAUSED", buf, 0x12u);
    }

LABEL_37:
    if (kAVVCScope)
    {
      id v16 = *(id *)kAVVCScope;
      if (!v16) {
        return;
      }
    }
    else
    {
      id v16 = (id)MEMORY[0x1E4F14500];
      id v17 = MEMORY[0x1E4F14500];
    }
    __int16 v18 = v16;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_67;
    }
    uint64_t v19 = *(void *)(a1 + 56);
    if (v19)
    {
      (*(void (**)(void, void))(*(void *)v19 + 64))(*(void *)(a1 + 56), 0);
      uint64_t v4 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
      switch([v4 sessionState])
      {
        case 0u:
          goto LABEL_45;
        case 1u:
          __int16 v20 = "Inactive";
          break;
        case 2u:
          __int16 v20 = "InteruptedWhileRecording";
          break;
        case 3u:
          __int16 v20 = "InteruptedWhilePlaying";
          break;
        case 4u:
          __int16 v20 = "Deactivating";
          break;
        case 5u:
          __int16 v20 = "Prewarming";
          break;
        case 6u:
          __int16 v20 = "Activating";
          break;
        case 7u:
          __int16 v20 = "Active";
          break;
        default:
          __int16 v20 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_45:
      __int16 v20 = "NotConfigured";
    }
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(std::__shared_weak_count **)(a1 + 64);
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v21)
      {
        id v23 = NSString;
        uint64_t v24 = *(void *)(v21 + 272);
        uint64_t v25 = v22->__shared_owners_ + 1;
LABEL_51:
        uint64_t v26 = [v23 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v21, v24, v25];
LABEL_53:
        id v27 = v26;
        uint64_t v28 = *(void *)(a1 + 56);
        if (v28)
        {
          unsigned int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 320))(v28);
          if (v29 > 4) {
            id v30 = "ILLEGAL";
          }
          else {
            id v30 = off_1E59657C0[v29];
          }
          uint64_t v32 = *(void *)(a1 + 56);
          if (v32)
          {
            switch(*(void *)(v32 + 224))
            {
              case 0:
                uint64_t v31 = "Invalid";
                break;
              case 1:
                uint64_t v31 = "Uninitialized";
                break;
              case 2:
                uint64_t v31 = "Prepared";
                break;
              case 3:
                uint64_t v31 = "Stopped";
                break;
              case 4:
                uint64_t v31 = "Starting";
                break;
              case 5:
                uint64_t v31 = "Running";
                break;
              case 6:
                uint64_t v31 = "Stopping";
                break;
              default:
                uint64_t v31 = "ILLEGAL";
                break;
            }
          }
          else
          {
            uint64_t v31 = "unconfigured";
          }
        }
        else
        {
          id v30 = "unconfigured";
          uint64_t v31 = "unconfigured";
        }
        *(_DWORD *)buf = 136316418;
        int v34 = "AVVCPluginRecordingEngine.mm";
        __int16 v35 = 1024;
        int v36 = 153;
        __int16 v37 = 2080;
        *(void *)uint64_t v38 = v20;
        *(_WORD *)&v38[8] = 2112;
        *(void *)&v38[10] = v27;
        __int16 v39 = 2080;
        uint64_t v40 = v30;
        __int16 v41 = 2080;
        uint64_t v42 = v31;
        _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);

        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        if (v19) {

        }
LABEL_67:
        return;
      }
    }
    else if (v21)
    {
      uint64_t v25 = 0;
      id v23 = NSString;
      uint64_t v24 = *(void *)(v21 + 272);
      goto LABEL_51;
    }
    uint64_t v26 = @"(0x0) use_count:0";
    goto LABEL_53;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 code];
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 1919115630)
  {
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_20:
        AVVCRecordingEngine::setStreamState(*(void *)(a1 + 56), 6);
        uint64_t v9 = *(void *)(a1 + 56);
        *(unsigned char *)(v9 + 252) = 1;
        AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v9, *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), "startRecording_block_invoke");
        AVVCRecordingEngine::doneRecording(*(AVVCRecordingEngine **)(a1 + 56));
        goto LABEL_26;
      }
    }
    else
    {
      id v3 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v34 = "AVVCPluginRecordingEngine.mm";
      __int16 v35 = 1024;
      int v36 = 160;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d startRecordingWithCompletionBlock: Recording cancelled by plugin device. Calling didStop recording and setting audioInputBlock to nil.", buf, 0x12u);
    }

    goto LABEL_20;
  }
  if (!kAVVCScope)
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
    goto LABEL_22;
  }
  id v6 = *(id *)kAVVCScope;
  if (v6)
  {
LABEL_22:
    unsigned int v11 = v6;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      long long v13 = [*(id *)(a1 + 32) debugDescription];
      *(_DWORD *)buf = 136315906;
      int v34 = "AVVCPluginRecordingEngine.mm";
      __int16 v35 = 1024;
      int v36 = 169;
      __int16 v37 = 1024;
      *(_DWORD *)uint64_t v38 = v12;
      *(_WORD *)&v38[4] = 2112;
      *(void *)&v38[6] = v13;
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::startRecordingWithCompletionBlock: returned error(%d) : %@. Setting the audioInputBlock to nil.", buf, 0x22u);
    }
  }
  AVVCRecordingEngine::setRecordErrorStatus(*(AVVCRecordingEngine **)(a1 + 56), *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), "startRecording_block_invoke");
  AVVCRecordingEngine::setStreamState(*(void *)(a1 + 56), 3);
  AVVCRecordingEngine::startedRecording(*(AVVCRecordingEngine **)(a1 + 56));
LABEL_26:
  [*(id *)(a1 + 40) setAudioInputBlock:0];
  if (objc_opt_respondsToSelector()) {
    [*(id *)(a1 + 40) setStatusChangeBlock:0];
  }
}

void sub_19D7A3414(_Unwind_Exception *a1)
{
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v3) {

  }
  _Unwind_Resume(a1);
}

uint64_t AVVCPluginRecordingEngine::prepareRecording(AVVCRecordingEngine *this, NSDictionary *a2)
{
  uint64_t v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v6, "prepareRecording");
  uint64_t Recorder = AVVCRecordingEngine::setupASBDAndCreateRecorder(this, v3);
  if (!Recorder) {
    AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v6);

  return Recorder;
}

void sub_19D7A3528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TraceMethod::~TraceMethod((TraceMethod *)va);

  _Unwind_Resume(a1);
}

double AVVCRecordingEngine::getHWSampleRate(AVVCRecordingEngine *this)
{
  return *((double *)this + 40);
}

void AVVCPluginRecordingEngine::setHWSampleRate(AVVCPluginRecordingEngine *this, double a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *((double *)this + 40) = a2;
  *((unsigned char *)this + 328) = 0;
  if (kAVVCScope)
  {
    uint64_t v3 = *(id *)kAVVCScope;
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4F14500];
    id v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 34);
    uint64_t v6 = *((void *)this + 40);
    int v7 = *((unsigned __int8 *)this + 328);
    int v8 = 136316162;
    uint64_t v9 = "AVVCPluginRecordingEngine.mm";
    __int16 v10 = 1024;
    int v11 = 93;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setHWSampleRate() streamID(%lu) sr(%.2f) upSamp(%d)", (uint8_t *)&v8, 0x2Cu);
  }
}

uint64_t AVVCPluginRecordingEngine::Initialize(AVVCPluginRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "Initialize");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCPluginRecordingEngine::createRecordQueue(AVVCPluginRecordingEngine *this, NSDictionary *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  int v32 = 4102;
  char v33 = 1;
  long long v34 = 0u;
  long long v35 = 0u;
  kdebug_trace();
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      id v4 = *(id *)kAVVCScope;
      if (v4)
      {
        uint64_t v5 = v4;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v36, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 416;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = *(void *)v36;
          _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine(%p)::createRecordQueue -->", buf, 0x1Cu);
          if (*(void *)&v36[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v36[8]);
          }
        }
      }
    }
  }
  uint64_t v6 = AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  if (!v6)
  {
    if (kAVVCScope)
    {
      int v8 = *(id *)kAVVCScope;
      if (!v8)
      {
LABEL_27:
        uint64_t v10 = 2;
        goto LABEL_63;
      }
    }
    else
    {
      int v8 = MEMORY[0x1E4F14500];
      id v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 423;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 2;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::createRecordQueue : no matching device found, error : %d", buf, 0x18u);
    }

    goto LABEL_27;
  }
  if (kAVVCScope)
  {
    int v7 = *(id *)kAVVCScope;
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    int v7 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 427;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v6;
    _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d createRecordQueue : using device %p", buf, 0x1Cu);
  }

LABEL_19:
  uint64_t v42 = 0;
  memset(buf, 0, sizeof(buf));
  uint64_t v10 = (*(uint64_t (**)(AVVCPluginRecordingEngine *, void *, NSDictionary *, uint8_t *))(*(void *)this
                                                                                                  + 384))(this, v6, v3, buf);
  if (v10) {
    goto LABEL_63;
  }
  int v11 = [[AVAudioFormat alloc] initWithStreamDescription:buf];
  [v6 setFormat:v11];
  if (kAVVCScope)
  {
    id v12 = *(id *)kAVVCScope;
    if (!v12) {
      goto LABEL_32;
    }
  }
  else
  {
    id v12 = (id)MEMORY[0x1E4F14500];
    id v14 = MEMORY[0x1E4F14500];
  }
  uint64_t v15 = v12;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    __int16 v16 = [v6 format];
    int v17 = [v16 debugDescription];
    *(_DWORD *)int v36 = 136315906;
    *(void *)&void v36[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&v36[12] = 1024;
    *(_DWORD *)&v36[14] = 439;
    __int16 v37 = 2048;
    uint64_t v38 = v6;
    __int16 v39 = 2112;
    uint64_t v40 = v17;
    _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d createRecordQueue : setting format on active device(%p), format:%@", v36, 0x26u);
  }
LABEL_32:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t v18 = [v6 audioInputBlock];
  BOOL v19 = v18 == 0;

  if (v19)
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v36, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v21 = *(void **)v36;
    uint64_t v10 = *(void *)&v36[8];
    if (*(void *)&v36[8])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v36[8] + 16), 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
    }
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3321888768;
    v28[2] = ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke;
    v28[3] = &__block_descriptor_56_ea8_40c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e56_v32__0__AVAudioBuffer_8__AVAudioTime_16__NSDictionary_24l;
    v28[4] = this;
    v28[5] = v21;
    unsigned int v29 = (std::__shared_weak_count *)v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
    }
    [v6 setAudioInputBlock:v28];
    if (objc_opt_respondsToSelector())
    {
      objc_initWeak((id *)v36, v6);
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3321888768;
      v25[2] = ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke_132;
      v25[3] = &unk_1EEFA7EA0;
      v26[1] = v21;
      id v27 = (std::__shared_weak_count *)v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
      }
      objc_copyWeak(v26, (id *)v36);
      [v6 setStatusChangeBlock:v25];
      objc_destroyWeak(v26);
      if (v27) {
        std::__shared_weak_count::__release_weak(v27);
      }
      objc_destroyWeak((id *)v36);
    }
    *((_DWORD *)this + 64) = (*((double *)this + 3) / 320.0);
    uint64_t v22 = *((void *)this + 16);
    if (v22) {
      (*(void (**)(uint64_t, void, void))(v22 + 16))(v22, *((void *)this + 34), *(unsigned int *)&buf[8]);
    }
    AVVCRecordingEngine::populateRecordSettings((AVVCRecordingEngine *)this);
    AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
    if (v29) {
      std::__shared_weak_count::__release_weak(v29);
    }
    if (!v10) {
      goto LABEL_60;
    }
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
  }
  else
  {
    if (*((uint64_t *)this + 28) <= 1)
    {
      if (kAVVCScope)
      {
        __int16 v20 = *(id *)kAVVCScope;
        if (!v20)
        {
LABEL_59:
          uint64_t v10 = 4294955515;
          goto LABEL_60;
        }
      }
      else
      {
        __int16 v20 = MEMORY[0x1E4F14500];
        id v23 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v36 = 136315394;
        *(void *)&void v36[4] = "AVVCPluginRecordingEngine.mm";
        *(_WORD *)&v36[12] = 1024;
        *(_DWORD *)&v36[14] = 448;
        _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Record queue state does not match queue (previously assertion failure)", v36, 0x12u);
      }

      goto LABEL_59;
    }
    (*(void (**)(uint64_t))(*(void *)v30 + 136))(v30);
  }
  uint64_t v10 = 0;
LABEL_60:
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }

LABEL_63:
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v32);

  return v10;
}

void sub_19D7A3D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location)
{
  objc_destroyWeak(v35);
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  objc_destroyWeak(&location);
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }

  TraceWrapper::~TraceWrapper((TraceWrapper *)&a26);
  _Unwind_Resume(a1);
}

void ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (std::__shared_weak_count *)a1[6];
  if (!v10)
  {
    id v12 = 0;
    goto LABEL_12;
  }
  uint64_t v11 = a1[4];
  id v12 = std::__shared_weak_count::lock(v10);
  if (!v12 || (uint64_t v13 = a1[5]) == 0)
  {
LABEL_12:
    if (kAVVCScope)
    {
      uint64_t v18 = *(id *)kAVVCScope;
      if (!v18) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v18 = MEMORY[0x1E4F14500];
      id v19 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 464;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = 0;
      _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d audioInputBlock: nil object encountered (eng: %p). Bailing", buf, 0x1Cu);
    }

LABEL_19:
    if (!v12) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  if (!v7)
  {
    if (kAVVCScope)
    {
      __int16 v20 = *(id *)kAVVCScope;
      if (!v20) {
        goto LABEL_46;
      }
    }
    else
    {
      __int16 v20 = MEMORY[0x1E4F14500];
      id v22 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
LABEL_45:

      goto LABEL_46;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 480;
    id v23 = "%25s:%-5d audioInputBlock called";
    uint64_t v24 = v20;
    os_log_type_t v25 = OS_LOG_TYPE_DEBUG;
    uint32_t v26 = 18;
LABEL_44:
    _os_log_impl(&dword_19D794000, v24, v25, v23, buf, v26);
    goto LABEL_45;
  }
  id v14 = [v7 format];
  uint64_t v15 = [v14 streamDescription];

  int v16 = *(_DWORD *)(v15 + 8);
  if (v16 == 1936745848 || v16 == 1869641075)
  {
    if (kAVVCScope)
    {
      id v21 = *(id *)kAVVCScope;
      if (!v21) {
        goto LABEL_46;
      }
    }
    else
    {
      id v21 = (id)MEMORY[0x1E4F14500];
      id v27 = MEMORY[0x1E4F14500];
    }
    __int16 v20 = v21;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 473;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = [v7 packetCount];
      _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d audioInputBlock (opus / speex) called with packetcount : %d", buf, 0x18u);
    }
LABEL_36:

    goto LABEL_45;
  }
  if (v16 == 1819304813)
  {
    if (kAVVCScope)
    {
      id v17 = *(id *)kAVVCScope;
      if (!v17) {
        goto LABEL_46;
      }
    }
    else
    {
      id v17 = (id)MEMORY[0x1E4F14500];
      id v28 = MEMORY[0x1E4F14500];
    }
    __int16 v20 = v17;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 471;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = [v7 frameLength];
      _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d audioInputBlock (lpcm) called with frameLength : %d", buf, 0x18u);
    }
    goto LABEL_36;
  }
  if (!kAVVCScope)
  {
    __int16 v20 = MEMORY[0x1E4F14500];
    id v29 = MEMORY[0x1E4F14500];
    goto LABEL_42;
  }
  __int16 v20 = *(id *)kAVVCScope;
  if (v20)
  {
LABEL_42:
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_45;
    }
    uint64_t v30 = *(unsigned int *)(v15 + 8);
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "AVVCPluginRecordingEngine.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 475;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v30;
    id v23 = "%25s:%-5d audioInputBlock called with an unsupported audio format ID (%lu).";
    uint64_t v24 = v20;
    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    uint32_t v26 = 28;
    goto LABEL_44;
  }
LABEL_46:
  long long v59 = 0u;
  long long v60 = 0u;
  memset(buf, 0, sizeof(buf));
  if (v8) {
    [v8 audioTimeStamp];
  }
  if (kAVVCScope)
  {
    if ((*(unsigned char *)(kAVVCScope + 12) & 0x20) != 0)
    {
      uint64_t v31 = *(id *)kAVVCScope;
      if (v31)
      {
        int v32 = v31;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v52 = 136315650;
          v53 = "AVVCPluginRecordingEngine.mm";
          __int16 v54 = 1024;
          int v55 = 485;
          __int16 v56 = 2048;
          double v57 = *(double *)buf;
          _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: timeStamp : %f", v52, 0x1Cu);
        }
      }
    }
  }
  char v33 = [v9 objectForKey:@"Gain"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v34 = v33;
    if (v34)
    {
      long long v35 = v34;
      objc_msgSend(v34, "getBytes:range:", v13 + 636, 0, 1);
      objc_msgSend(v35, "getBytes:range:", v13 + 637, 1, 1);
      *(unsigned char *)(v13 + 638) = 1;
      *(float *)(v13 + 628) = (float)*(char *)(v11 + 637);
LABEL_83:

      goto LABEL_84;
    }
    if (kAVVCScope)
    {
      uint64_t v42 = *(id *)kAVVCScope;
      if (!v42)
      {
LABEL_82:
        *(unsigned char *)(v13 + 638) = 0;
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v42 = MEMORY[0x1E4F14500];
      id v45 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v52 = 136315394;
      v53 = "AVVCPluginRecordingEngine.mm";
      __int16 v54 = 1024;
      int v55 = 501;
      _os_log_impl(&dword_19D794000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: Nil VoiceActivity NSData", v52, 0x12u);
    }

    goto LABEL_82;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v36 = v33;
    if (v36)
    {
      [v36 doubleValue];
      float v38 = v37;
      if (kAVVCScope)
      {
        if ((*(unsigned char *)(kAVVCScope + 12) & 0x20) != 0)
        {
          __int16 v39 = *(id *)kAVVCScope;
          if (v39)
          {
            uint64_t v40 = v39;
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t v52 = 136315650;
              v53 = "AVVCPluginRecordingEngine.mm";
              __int16 v54 = 1024;
              int v55 = 510;
              __int16 v56 = 2048;
              double v57 = v38;
              _os_log_impl(&dword_19D794000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: inGain : %f", v52, 0x1Cu);
            }
          }
        }
      }
      if (v38 <= 0.0) {
        float v41 = -120.0;
      }
      else {
        float v41 = log10f(v38) * 20.0;
      }
    }
    else
    {
      float v41 = 0.0;
      if (kAVVCScope)
      {
        if ((*(unsigned char *)(kAVVCScope + 12) & 0x20) != 0)
        {
          uint64_t v43 = *(id *)kAVVCScope;
          if (v43)
          {
            uint64_t v44 = v43;
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)uint64_t v52 = 136315394;
              v53 = "AVVCPluginRecordingEngine.mm";
              __int16 v54 = 1024;
              int v55 = 513;
              _os_log_impl(&dword_19D794000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: No Gain Value", v52, 0x12u);
            }
          }
        }
      }
    }
    *(float *)(v13 + 628) = v41;
    goto LABEL_82;
  }
LABEL_84:
  int v51 = 0;
  if (*(_DWORD *)(v13 + 32) == 1936745848)
  {
    uint64_t v46 = [v9 objectForKey:@"Frame Qualities"];
    int v47 = v46;
    if (v46)
    {
      [v46 doubleValue];
      *(float *)&double v48 = v48;
      int v51 = LODWORD(v48);
    }
    else if (kAVVCScope)
    {
      if ((*(unsigned char *)(kAVVCScope + 12) & 0x20) != 0)
      {
        __int16 v49 = *(id *)kAVVCScope;
        if (v49)
        {
          uint64_t v50 = v49;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t v52 = 136315394;
            v53 = "AVVCPluginRecordingEngine.mm";
            __int16 v54 = 1024;
            int v55 = 528;
            _os_log_impl(&dword_19D794000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVCPluginRecordingEngine::audioInputBlock: No frame qualities.", v52, 0x12u);
          }
        }
      }
    }
  }
  (*(void (**)(uint64_t, id, uint64_t, int *, uint8_t *))(*(void *)v13 + 256))(v13, v7, 1, &v51, buf);

LABEL_89:
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_90:
}

void sub_19D7A4664(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke_132(uint64_t a1, int a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2 != 1919115630) {
    goto LABEL_17;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6)
  {
    id v7 = std::__shared_weak_count::lock(v6);
    id v8 = v7;
    if (v7)
    {
      id v9 = *(void **)(a1 + 40);
      if (v9)
      {
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3321888768;
        v12[2] = ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke_133;
        v12[3] = &unk_1EEFA3B40;
        v13[1] = v9;
        id v14 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        int v15 = 1919115630;
        objc_copyWeak(v13, (id *)(a1 + 32));
        (*(void (**)(void *, void *, const char *))(*(void *)v9 + 368))(v9, v12, "createRecordQueue_block_invoke");
        objc_destroyWeak(v13);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        goto LABEL_16;
      }
    }
  }
  else
  {
    id v8 = 0;
  }
  if (kAVVCScope)
  {
    uint64_t v10 = *(id *)kAVVCScope;
    if (!v10) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    id v17 = "AVVCPluginRecordingEngine.mm";
    __int16 v18 = 1024;
    int v19 = 543;
    __int16 v20 = 2048;
    uint64_t v21 = 0;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d statusChangeBlock: nil object encountered (eng: %p). Bailing", buf, 0x1Cu);
  }

LABEL_15:
  if (v8) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_17:
}

void sub_19D7A48F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  objc_destroyWeak(v17);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);

  _Unwind_Resume(a1);
}

void TraceWrapper::~TraceWrapper(TraceWrapper *this)
{
  if (*((unsigned char *)this + 4)) {
    kdebug_trace();
  }
}

void __destroy_helper_block_ea8_40c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN25AVVCPluginRecordingEngine17createRecordQueueEP12NSDictionary_block_invoke_133(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    uint64_t v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v7 = 136315650;
    id v8 = "AVVCPluginRecordingEngine.mm";
    __int16 v9 = 1024;
    int v10 = 548;
    __int16 v11 = 2048;
    uint64_t v12 = v4;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d statusChangeBlock: Recording cancelled by plugin device. Calling didStop recording and setting audioInputBlock to nil. strong_this(%p)", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_8:
  AVVCRecordingEngine::setStreamState(*(void *)(a1 + 40), 6);
  uint64_t v5 = *(void *)(a1 + 40);
  *(unsigned char *)(v5 + 252) = 1;
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v5, *(_DWORD *)(a1 + 56), "createRecordQueue_block_invoke");
  AVVCRecordingEngine::doneRecording(*(AVVCRecordingEngine **)(a1 + 40));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setAudioInputBlock:0];
  [WeakRetained setStatusChangeBlock:0];
}

void sub_19D7A4AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t AVVCPluginRecordingEngine::asbdForClientSettings(AVVCPluginRecordingEngine *this, NSDictionary *a2, CAStreamBasicDescription *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  uint64_t v6 = AVVCPluginRecordingEngine::getCurrentDeviceFromActivationContext(this);
  if (!v6)
  {
    if (kAVVCScope)
    {
      id v8 = *(id *)kAVVCScope;
      if (!v8)
      {
LABEL_10:
        uint64_t v7 = 2;
        goto LABEL_11;
      }
    }
    else
    {
      id v8 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315650;
      uint64_t v12 = "AVVCPluginRecordingEngine.mm";
      __int16 v13 = 1024;
      int v14 = 360;
      __int16 v15 = 1024;
      int v16 = 2;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCPluginRecordingEngine::createRecordQueue : no matching device found, error : %d", (uint8_t *)&v11, 0x18u);
    }

    goto LABEL_10;
  }
  uint64_t v7 = (*(uint64_t (**)(AVVCPluginRecordingEngine *, void *, NSDictionary *, CAStreamBasicDescription *))(*(void *)this + 384))(this, v6, v5, a3);
LABEL_11:

  return v7;
}

void sub_19D7A4CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCPluginRecordingEngine::~AVVCPluginRecordingEngine(id *this)
{
  AVVCPluginRecordingEngine::~AVVCPluginRecordingEngine(this);

  JUMPOUT(0x19F3ABB30);
}

{
  NSObject *v2;
  id v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  id v8 = *MEMORY[0x1E4F143B8];
  *this = &unk_1EEFA6A80;
  if (kAVVCScope)
  {
    uint64_t v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = 136315394;
    uint64_t v5 = "AVVCPluginRecordingEngine.mm";
    uint64_t v6 = 1024;
    uint64_t v7 = 53;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ~AVVCPluginRecordingEngine()", (uint8_t *)&v4, 0x12u);
  }

LABEL_8:
  AVVCRecordingEngine::~AVVCRecordingEngine((AVVCRecordingEngine *)this);
}

void AVVCPluginRecordingEngine::AVVCPluginRecordingEngine(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  AVVCRecordingEngine::AVVCRecordingEngine(a1, a2);
}

void sub_19D7A4F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7A56D0(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  _Unwind_Resume(a1);
}

void sub_19D7A5884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A5B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Block_object_dispose(&a21, 8);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a28);
  _Unwind_Resume(a1);
}

void sub_19D7A5D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Block_object_dispose(&a11, 8);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19D7A6064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);

  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19D7A64C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  _Unwind_Resume(a1);
}

void sub_19D7A6738(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19D7A6958(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19D7A6C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  _Unwind_Resume(a1);
}

void sub_19D7A6ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19D7A7108(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19D7A7398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19D7A762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19D7A77F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_19D7A7A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A7C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A7EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);
  _Unwind_Resume(a1);
}

void sub_19D7A819C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19D7A83A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_19D7A8524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A8698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A87FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A8960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A8ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A8C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A8F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);
  _Unwind_Resume(a1);
}

void sub_19D7A9200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7A9568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a26);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a12);

  _Unwind_Resume(a1);
}

void sub_19D7A9714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A9874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7A9AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);
  _Unwind_Resume(a1);
}

void sub_19D7A9D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7AA030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);
  _Unwind_Resume(a1);
}

void sub_19D7AA324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);
  _Unwind_Resume(a1);
}

void sub_19D7AA60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);
  _Unwind_Resume(a1);
}

void sub_19D7AA870(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19D7AAAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AAE10(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

void sub_19D7AB040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);

  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7AB38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7AB638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);

  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7AB9E0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va);

  _Unwind_Resume(a1);
}

void sub_19D7ABCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a26);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a10);

  _Unwind_Resume(a1);
}

void sub_19D7ABFFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);
  uint64_t v23 = va_arg(va1, void);

  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7AC360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a26);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a12);

  _Unwind_Resume(a1);
}

void sub_19D7AC620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);

  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7AC988(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7ACCE0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7ACF94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7AD2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ControllerImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ControllerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA7800;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::__shared_ptr_emplace<ControllerImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA7800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19D7ADB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

id GetAVVCSingleInstanceSemaphore(void)
{
  if (GetAVVCSingleInstanceSemaphore(void)::once != -1) {
    dispatch_once(&GetAVVCSingleInstanceSemaphore(void)::once, &__block_literal_global_142);
  }
  int v0 = (void *)gsAVVCSingleInstanceSemaphore;

  return v0;
}

void ___ZL30GetAVVCSingleInstanceSemaphorev_block_invoke()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  dispatch_semaphore_t v0 = dispatch_semaphore_create(1);
  int v1 = (void *)gsAVVCSingleInstanceSemaphore;
  gsAVVCSingleInstanceSemaphore = (uint64_t)v0;

  if (kAVVCScope)
  {
    id v2 = *(id *)kAVVCScope;
    if (!v2) {
      return;
    }
  }
  else
  {
    id v2 = (id)MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  uint64_t v4 = v2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = [(id)gsAVVCSingleInstanceSemaphore debugDescription];
    int v6 = 136315650;
    uint64_t v7 = "AVVoiceController.mm";
    __int16 v8 = 1024;
    int v9 = 117;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d [enforce 1 avvc] created gsAVVCSingleInstanceSemaphore %@", (uint8_t *)&v6, 0x1Cu);
  }
}

void sub_19D7ADD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7ADEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v23 = v22;
  objc_sync_exit(v23);

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__145(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__146(uint64_t a1)
{
}

void sub_19D7ADF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7AE45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AE520(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

unsigned char *AlertLock::AlertLock(unsigned char *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  VCLocker::VCLocker(a1, a2, 0);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  return a1;
}

void sub_19D7AE5C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ControllerImpl::getAlertQueueFromImplQueue(ControllerImpl *this)
{
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v4, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t v2 = *((void *)this + 77);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void VCLocker::~VCLocker(VCLocker *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    if ((*(unsigned char *)(kAVVCScope + 12) & 0x80) != 0)
    {
      uint64_t v2 = *(id *)kAVVCScope;
      if (v2)
      {
        id v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v4 = *(void *)(*(void *)this + 8);
          int v5 = 136315650;
          int v6 = "ControllerImpl.h";
          __int16 v7 = 1024;
          int v8 = 760;
          __int16 v9 = 2080;
          uint64_t v10 = v4;
          _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d about to unlock %s", (uint8_t *)&v5, 0x1Cu);
        }
      }
    }
  }
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

void sub_19D7AE744(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unsigned char *VCLocker::VCLocker(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = *(void *)(a2 + 8 * a3 + 536);
  a1[8] = 0;
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  if (!IsSerializationEnabled(void)::enable)
  {
    if (kAVVCScope)
    {
      if ((*(unsigned char *)(kAVVCScope + 12) & 0x80) != 0)
      {
        uint64_t v4 = *(id *)kAVVCScope;
        if (v4)
        {
          int v5 = v4;
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v6 = *(void *)(*(void *)a1 + 8);
            int v8 = 136315650;
            __int16 v9 = "ControllerImpl.h";
            __int16 v10 = 1024;
            int v11 = 755;
            __int16 v12 = 2080;
            uint64_t v13 = v6;
            _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d about to lock %s", (uint8_t *)&v8, 0x1Cu);
          }
        }
      }
    }
    a1[8] = (*(uint64_t (**)(void))(**(void **)a1 + 16))();
  }
  return a1;
}

void sub_19D7AEA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AEB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AEBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7AEDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, std::__shared_weak_count *a11, ...)
{
  va_start(va, a11);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Block_object_dispose(va, 8);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void sub_19D7AEFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AF0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AF134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7AF324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, std::__shared_weak_count *a11, ...)
{
  va_start(va, a11);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Block_object_dispose(va, 8);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void sub_19D7AF5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AF6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AF72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7AF91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, std::__shared_weak_count *a11, ...)
{
  va_start(va, a11);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Block_object_dispose(va, 8);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void sub_19D7AFBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AFC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7AFD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7AFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, std::__shared_weak_count *a11, ...)
{
  va_start(va, a11);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Block_object_dispose(va, 8);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B0400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void sub_19D7B063C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B0764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B09B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

void sub_19D7B0CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B0E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B10A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7B113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *SessionLock::SessionLock(unsigned char *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  VCLocker::VCLocker(a1, a2, 3u);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  return a1;
}

void sub_19D7B11B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7B1864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, char a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v22 = v21;

  ElapsedTime::~ElapsedTime((ElapsedTime *)&a19);
  TraceMethod::~TraceMethod((TraceMethod *)&a12);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a14);
  a9.super_class = (Class)AVVoiceController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19D7B1A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7B1FC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  VCLocker::~VCLocker((VCLocker *)va);
  _Unwind_Resume(a1);
}

void sub_19D7B21CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void sub_19D7B23D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B24F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19D7B25D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_19D7B2820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  int v11 = va_arg(va1, std::__shared_weak_count *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);

  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);
  _Unwind_Resume(a1);
}

void sub_19D7B28F8(_Unwind_Exception *a1)
{
  TraceMethod::~TraceMethod((TraceMethod *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_19D7B29E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B2A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B2B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B2EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B31D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B34B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B37E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B3B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B3D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B3FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B42C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B4574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void CAX4CCString::CAX4CCString(CAX4CCString *this, unsigned int a2)
{
  unsigned int v4 = bswap32(a2);
  *(_DWORD *)((char *)this + 1) = v4;
  uint64_t v5 = MEMORY[0x1E4F14390];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v6 = *((char *)this + 2);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v7 = *((char *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL)) {
      goto LABEL_17;
    }
LABEL_13:
    unsigned int v8 = *((char *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL)) {
        goto LABEL_17;
      }
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)((char *)this + 5) = 39;
    *(unsigned char *)this = 39;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0) {
    goto LABEL_13;
  }
LABEL_17:
  if (a2 + 199999 > 0x61A7E) {
    snprintf((char *)this, 0x10uLL, "0x%x");
  }
  else {
    snprintf((char *)this, 0x10uLL, "%d");
  }
}

void sub_19D7B4A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B4D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B53C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B57E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B5A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B5C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B5D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B5FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_19D7B60C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7B6158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7B6374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, ...)
{
  va_start(va, a12);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7B649C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B65A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7B67C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, ...)
{
  va_start(va, a12);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  TraceWrapper::~TraceWrapper((TraceWrapper *)va);

  _Unwind_Resume(a1);
}

void sub_19D7B6920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }

  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B6B1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_48c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19D7B6DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B724C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B74DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  _Unwind_Resume(a1);
}

void sub_19D7B76DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B78EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B7A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B7C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7B7CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19D7B7E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v14 - 72));
  _Unwind_Resume(a1);
}

void sub_19D7B7EE8()
{
  JUMPOUT(0x19D7B7ED0);
}

void sub_19D7B7EF4()
{
}

void sub_19D7B7F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7B7FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL AVVCTestPropertyIsSet()
{
  if (_createTestPropertyArrayIfNeeded(void)::onceToken != -1) {
    dispatch_once(&_createTestPropertyArrayIfNeeded(void)::onceToken, &__block_literal_global_762);
  }
  dispatch_semaphore_t v0 = [(id)sTestProperties objectAtIndex:0];
  uint64_t v1 = [MEMORY[0x1E4F1CA98] null];

  return v0 != v1;
}

void sub_19D7B808C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL32_createTestPropertyArrayIfNeededv_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:1];
  uint64_t v1 = (void *)sTestProperties;
  sTestProperties = v0;

  uint64_t v2 = (void *)sTestProperties;
  id v3 = [MEMORY[0x1E4F1CA98] null];
  objc_msgSend(v2, "addObject:");
}

void sub_19D7B811C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

NSObject *AVVCTestPropertyGetError()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (_createTestPropertyArrayIfNeeded(void)::onceToken != -1) {
    dispatch_once(&_createTestPropertyArrayIfNeeded(void)::onceToken, &__block_literal_global_762);
  }
  uint64_t v0 = [(id)sTestProperties objectAtIndex:0];
  uint64_t v1 = [MEMORY[0x1E4F1CA98] null];

  if (v1 == v0)
  {
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      unsigned int v4 = v0;
      if (!v3) {
        goto LABEL_21;
      }
    }
    else
    {
      id v3 = MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315650;
      int v11 = "AVVoiceController.mm";
      __int16 v12 = 1024;
      int v13 = 2089;
      __int16 v14 = 1024;
      LODWORD(v15) = 0;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Test value is NSNull at index: %d", (uint8_t *)&v10, 0x18u);
    }
    unsigned int v4 = v0;
  }
  else
  {

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {

      uint64_t v2 = v0;
      goto LABEL_23;
    }
    if (kAVVCScope)
    {
      id v5 = *(id *)kAVVCScope;
      if (!v5) {
        goto LABEL_22;
      }
    }
    else
    {
      id v5 = (id)MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    id v3 = v5;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315906;
      int v11 = "AVVoiceController.mm";
      __int16 v12 = 1024;
      int v13 = 2128;
      __int16 v14 = 2112;
      id v15 = (id)objc_opt_class();
      __int16 v16 = 1024;
      int v17 = 0;
      id v8 = v15;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Expecting property of type NSError but got type %@ at index: %d", (uint8_t *)&v10, 0x22u);
    }
    unsigned int v4 = v3;
  }

LABEL_21:
LABEL_22:

  uint64_t v2 = 0;
LABEL_23:

  return v2;
}

void sub_19D7B839C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVAudioUnitComponentImpl::~AVAudioUnitComponentImpl(AVAudioUnitComponentImpl *this)
{
  AVAudioUnitComponentImpl::~AVAudioUnitComponentImpl(this);

  JUMPOUT(0x19F3ABB30);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  *(void *)this = &unk_1EEFA6A60;
  uint64_t v2 = (const void *)*((void *)this + 13);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
  }
  id v3 = (const void *)*((void *)this + 12);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 12) = 0;
  }
  unsigned int v4 = (const void *)*((void *)this + 6);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 6) = 0;
  }
  id v5 = (const void *)*((void *)this + 7);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 7) = 0;
  }
  id v6 = (const void *)*((void *)this + 5);
  if (v6)
  {
    CFRelease(v6);
    *((void *)this + 5) = 0;
  }
  id v7 = (const void *)*((void *)this + 10);
  if (v7)
  {
    CFRelease(v7);
    *((void *)this + 10) = 0;
  }
  id v8 = (const void *)*((void *)this + 11);
  if (v8)
  {
    CFRelease(v8);
    *((void *)this + 11) = 0;
  }
  uint64_t v9 = (const void *)*((void *)this + 19);
  if (v9)
  {
    CFRelease(v9);
    *((void *)this + 19) = 0;
  }
  int v10 = (const void *)*((void *)this + 17);
  if (v10)
  {
    CFRelease(v10);
    *((void *)this + 17) = 0;
  }
  int v11 = (const void *)*((void *)this + 8);
  if (v11)
  {
    CFRelease(v11);
    *((void *)this + 8) = 0;
  }
  dispatch_release(*((dispatch_object_t *)this + 14));
}

const __CFDictionary *AVAudioUnitComponentImpl::FetchConfigurationDictionary(AudioComponent *this)
{
  uint64_t v2 = this + 17;
  CFDictionaryRef result = (const __CFDictionary *)AudioComponentCopyConfigurationInfo(this[1], this + 17);
  if (!result)
  {
    CFDictionaryRef result = *v2;
    if (*v2)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(result, @"HasCustomView");
      if (Value)
      {
        CFBooleanRef v5 = Value;
        CFTypeID v6 = CFGetTypeID(Value);
        if (v6 == CFBooleanGetTypeID()) {
          *((unsigned char *)this + 144) = CFBooleanGetValue(v5) != 0;
        }
      }
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(*v2, @"IconURL");
      if (result)
      {
        CFDictionaryRef result = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFStringRef)result, kCFURLPOSIXPathStyle, 0);
        this[19] = result;
      }
    }
  }
  *((unsigned char *)this + 132) = 1;
  return result;
}

void sub_19D7B8F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVAudioUnitComponentImpl::FetchLocalizedStandardTags(id *this)
{
  if (!this[10]) {
    this[10] = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  AudioComponentCopyTagsInfo();
}

void sub_19D7B934C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10E1C406879E566);
  _Unwind_Resume(a1);
}

void AVAudioUnitComponentImpl::AVAudioUnitComponentImpl(AVAudioUnitComponentImpl *this, AudioComponentDescription *a2, AVAudioUnitComponentManagerImpl *a3)
{
  *(void *)this = &unk_1EEFA6A60;
  *((void *)this + 1) = 0;
  long long v4 = *(_OWORD *)&a2->componentType;
  UInt32 componentFlagsMask = a2->componentFlagsMask;
  *(_OWORD *)((char *)this + 36) = 0u;
  CFTypeID v6 = (UInt32 *)((char *)this + 36);
  *((_DWORD *)this + 8) = componentFlagsMask;
  *((_OWORD *)this + 1) = v4;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(void *)((char *)this + 65) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 15) = a3;
  *((_DWORD *)this + 32) = 0;
  *((unsigned char *)this + 132) = 0;
  *((void *)this + 17) = 0;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 14) = dispatch_queue_create("AVAudioUnitComponentImplementation", 0);
  if (__PAIR64__(*((_DWORD *)this + 5), *(v6 - 5)) || *((_DWORD *)this + 6) || *((_DWORD *)this + 7))
  {
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)v6 - 1);
    *((void *)this + 1) = Next;
    if (Next)
    {
      AudioComponentGetDescription(Next, (AudioComponentDescription *)v6 - 1);
      if ((*((unsigned char *)this + 28) & 2) != 0) {
        *((unsigned char *)this + 72) = 1;
      }
      CFStringRef outName = 0;
      AudioComponentCopyName(*((AudioComponent *)this + 1), &outName);
      id v8 = (void *)[NSString stringWithString:outName];
      uint64_t v9 = [v8 rangeOfString:@":"];
      if (v10)
      {
        uint64_t v11 = v9;
        __int16 v12 = (void *)[v8 substringToIndex:v9];
        *((void *)this + 7) = objc_msgSend((id)objc_msgSend(v12, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "whitespaceCharacterSet")), "copy");
        int v13 = (void *)[v8 substringFromIndex:v11 + 1];
        id v8 = objc_msgSend(v13, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E4F28B88], "whitespaceCharacterSet"));
      }
      else
      {
        *((void *)this + 7) = [&stru_1EEFA9548 copy];
      }
      *((void *)this + 6) = [v8 copy];
      CFRelease(outName);
      if (!AudioComponentGetVersion(*((AudioComponent *)this + 1), v6)) {
        *((void *)this + 5) = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d.%d.%d", (*((int *)this + 9) >> 16), BYTE1(*((_DWORD *)this + 9)), *((_DWORD *)this + 9));
      }
      AVAudioUnitComponentImpl::FetchLocalizedStandardTags((id *)this);
    }
  }
}

void sub_19D7B9608(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10E1C406879E566);
  _Unwind_Resume(a1);
}

void QualityDetectorCreate()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_19D7B97C8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x1010C4079E387C8);
  _Unwind_Resume(a1);
}

void QualityDetectorDestroy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    MEMORY[0x19F3ABB10](v1, 0x1000C8052888210);
  }

  JUMPOUT(0x19F3ABB30);
}

void anonymous namespace'::QualityDetector::getSummedFrameQuality(_anonymous_namespace_::QualityDetector *this, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 < a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: inPastFrameCount <= mFrameHistoryLength", v7, 2u);
    }
    __break(1u);
  }
  else if (a2)
  {
    int v4 = 0;
    unsigned int v5 = *((_DWORD *)this + 11);
    uint64_t v6 = *(void *)this;
    do
    {
      v4 += *(_DWORD *)(v6 + 4 * v5);
      if (!v5) {
        unsigned int v5 = v2;
      }
      --v5;
      --a2;
    }
    while (a2);
  }
}

uint64_t CAIsDebuggerAttached(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)int v4 = 0xE00000001;
  int v5 = 1;
  pid_t v6 = getpid();
  size_t v1 = 648;
  unsigned int v3 = 0;
  sysctl(v4, 4u, v2, &v1, 0, 0);
  return (v3 >> 11) & 1;
}

void sub_19D7BA704(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x1080C40ABE71A98);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::fsort(_anonymous_namespace_ *this, float *a2, const void *a3)
{
  if (*(float *)this < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(float *)this > *a2;
  }
}

char *CAStringForOSType(unsigned int a1, char *__dst, int16x8_t a3)
{
  a3.i32[0] = bswap32(a1);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v4.i64[0] = 0x1F0000001FLL;
  v4.i64[1] = 0x1F0000001FLL;
  v5.i64[0] = 0x5F0000005FLL;
  v5.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v5, (uint32x4_t)vsraq_n_s32(v4, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  char v8 = 4;
  *(_DWORD *)__source = vmovn_s16(a3).u32[0];
  __source[4] = 0;
  strlcpy(__dst, __source, 0x18uLL);
  if (v8 < 0) {
    operator delete(*(void **)__source);
  }
  return __dst;
}

void sub_19D7BB1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL CA::Implementation::EquivalentFormatFlags(CA::Implementation *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, char a4)
{
  if (a4)
  {
    int v4 = *((_DWORD *)this + 3);
    int32x4_t v5 = *(int32x4_t *)&a2->mFormatID;
    v5.i64[1] = *((void *)this + 1);
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5)))) {
      return 1;
    }
  }
  else
  {
    int v4 = *((_DWORD *)this + 3);
  }
  if (*((_DWORD *)this + 2) != 1819304813) {
    return v4 == a2->mFormatFlags;
  }
  int v7 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) == 0) {
    int v7 = v4;
  }
  if (a3) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v7 & 0xFFFFFFBF;
  }
  unsigned int v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    int v10 = *((_DWORD *)this + 7);
    if ((v4 & 0x20) != 0) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = *((_DWORD *)this + 7);
    }
    if (v11)
    {
      unsigned int v9 = 8 * (v9 / v11);
      unsigned int v12 = *((_DWORD *)this + 8);
      int v13 = v8 | 8;
      BOOL v14 = v9 == v12;
      goto LABEL_21;
    }
    unsigned int v9 = 0;
    unsigned int v12 = *((_DWORD *)this + 8);
    int v13 = v8 | 8;
  }
  else
  {
    int v13 = v8 | 8;
    int v10 = *((_DWORD *)this + 7);
    unsigned int v12 = *((_DWORD *)this + 8);
  }
  BOOL v14 = v12 == 0;
LABEL_21:
  if (v14) {
    unsigned int v8 = v13;
  }
  BOOL v16 = (v12 & 7) == 0 && v9 == v12;
  unsigned int v17 = v8 & 0xFFFFFFEF;
  if (!v16) {
    unsigned int v17 = v8;
  }
  if (v17) {
    v17 &= ~4u;
  }
  BOOL v18 = (v17 & 8) == 0 || v12 > 8;
  int v19 = v17 & 2;
  if (v18) {
    int v19 = v17;
  }
  if (v10 == 1) {
    unsigned int v20 = v19 & 0xFFFFFFDF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (!v20) {
    unsigned int v20 = 0x80000000;
  }
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  if (a2->mFormatID != 1819304813) {
    return v20 == mFormatFlags;
  }
  AudioFormatFlags v22 = mFormatFlags & 0x7FFFFFFF;
  if ((mFormatFlags & 0x7FFFFFFF) == 0) {
    AudioFormatFlags v22 = a2->mFormatFlags;
  }
  if (a3) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v22 & 0xFFFFFFBF;
  }
  UInt32 mBytesPerFrame = a2->mBytesPerFrame;
  if (!mBytesPerFrame)
  {
    int v28 = v23 | 8;
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
LABEL_54:
    BOOL v29 = mBitsPerChannel == 0;
    goto LABEL_55;
  }
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 v26 = 1;
  }
  else {
    UInt32 v26 = a2->mChannelsPerFrame;
  }
  if (!v26)
  {
    UInt32 mBytesPerFrame = 0;
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
    int v28 = v23 | 8;
    goto LABEL_54;
  }
  UInt32 mBytesPerFrame = 8 * (mBytesPerFrame / v26);
  UInt32 mBitsPerChannel = a2->mBitsPerChannel;
  int v28 = v23 | 8;
  BOOL v29 = mBytesPerFrame == mBitsPerChannel;
LABEL_55:
  if (v29) {
    unsigned int v23 = v28;
  }
  BOOL v30 = (mBitsPerChannel & 7) == 0 && mBytesPerFrame == mBitsPerChannel;
  unsigned int v31 = v23 & 0xFFFFFFEF;
  if (!v30) {
    unsigned int v31 = v23;
  }
  if (v31) {
    v31 &= ~4u;
  }
  BOOL v32 = (v31 & 8) == 0 || mBitsPerChannel > 8;
  int v33 = v31 & 2;
  if (v32) {
    int v33 = v31;
  }
  if (mChannelsPerFrame == 1) {
    unsigned int v34 = v33 & 0xFFFFFFDF;
  }
  else {
    unsigned int v34 = v33;
  }
  if (v34) {
    AudioFormatFlags mFormatFlags = v34;
  }
  else {
    AudioFormatFlags mFormatFlags = 0x80000000;
  }
  return v20 == mFormatFlags;
}

void sub_19D7BB470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D7BB528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void XPC_Object::~XPC_Object(XPC_Object *this)
{
  XPC_Object::~XPC_Object(this);

  JUMPOUT(0x19F3ABB30);
}

{
  unsigned __int8 v1;

  *(void *)this = &unk_1EEFA3D90;
  if (*((void *)this + 1))
  {
    uint64_t v1 = atomic_load((unsigned __int8 *)this + 16);
    if (v1) {
      xpc_release(*((xpc_object_t *)this + 1));
    }
  }
}

void AVAudioUnitComponentManagerImpl::~AVAudioUnitComponentManagerImpl(AVAudioUnitComponentManagerImpl *this)
{
  AVAudioUnitComponentManagerImpl::~AVAudioUnitComponentManagerImpl(this);

  JUMPOUT(0x19F3ABB30);
}

{
  *(void *)this = &unk_1EEFA7220;
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
}

uint64_t AVAudioUnitComponentManagerInitOnce(void)
{
  return +[AVAudioUnitComponentManager privateAllocInitSingleton];
}

void sub_19D7BBA58(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7BBC3C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_19D7BBD04(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

void sub_19D7BBE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7BC22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_19D7BC3FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7BC6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7BC7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7BC884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7BC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7BC994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7BCA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7BCAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7BCB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7BCC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CADeprecated::AVVCGenericRunLoopThread::Start(CADeprecated::AVVCGenericRunLoopThread *this)
{
  *((void *)this + 20) = dispatch_semaphore_create(0);
  CADeprecated::CAPThread::Start((uint64_t)this);
  dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 20), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*((dispatch_object_t *)this + 20));
  *((void *)this + 20) = 0;
}

void CADeprecated::AVVCGenericRunLoopThread::~AVVCGenericRunLoopThread(CADeprecated::AVVCGenericRunLoopThread *this)
{
  CADeprecated::AVVCGenericRunLoopThread::~AVVCGenericRunLoopThread(this);

  JUMPOUT(0x19F3ABB30);
}

{
  const void *v1;

  *(void *)this = &unk_1EEFA7500;
  uint64_t v1 = (const void *)*((void *)this + 17);
  if (v1) {
    CFRelease(v1);
  }
}

void sub_19D7BCE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7BCF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL CADeprecated::CAMutex::IsOwnedByCurrentThread(atomic_ullong *this)
{
  unsigned int v2 = pthread_self();
  return pthread_equal(v2, (pthread_t)atomic_load_explicit(this + 2, memory_order_acquire)) != 0;
}

BOOL CADeprecated::CAMutex::IsFree(atomic_ullong *this)
{
  return atomic_load_explicit(this + 2, memory_order_acquire) == 0;
}

uint64_t CADeprecated::CAMutex::Try(CADeprecated::CAMutex *this, BOOL *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  int v4 = pthread_self();
  if (pthread_equal(v4, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)this + 2, memory_order_acquire)))
  {
    BOOL v5 = 0;
  }
  else
  {
    int v6 = pthread_mutex_trylock((pthread_mutex_t *)((char *)this + 24));
    if (v6 == 16)
    {
      BOOL v5 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    if (v6)
    {
      v10[0] = HIBYTE(v6);
      v10[1] = BYTE2(v6);
      v10[2] = BYTE1(v6);
      int v8 = v6;
      v10[3] = v6;
      void v10[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109378;
        int v12 = v8;
        __int16 v13 = 2080;
        BOOL v14 = v10;
        _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " CAMutex::Try: call to pthread_mutex_trylock failed, Error: %d (%s)", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1EEFA3DC8;
      exception[2] = v8;
    }
    atomic_store((unint64_t)v4, (unint64_t *)this + 2);
    BOOL v5 = 1;
  }
  uint64_t result = 1;
LABEL_7:
  *a2 = v5;
  return result;
}

void CADeprecated::CAMutex::Unlock(CADeprecated::CAMutex *this)
{
  unsigned int v2 = pthread_self();
  if (pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)this + 2, memory_order_acquire)))
  {
    atomic_store(0, (unint64_t *)this + 2);
    int v3 = pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
    if (v3)
    {
      int v4 = v3;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " CAMutex::Unlock: Could not unlock the mutex", buf, 2u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1EEFA3DC8;
      exception[2] = v4;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, " CAMutex::Unlock: A thread is attempting to unlock a Mutex it doesn't own", v6, 2u);
  }
}

BOOL CADeprecated::CAMutex::Lock(CADeprecated::CAMutex *this)
{
  unsigned int v2 = pthread_self();
  int v3 = pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)this + 2, memory_order_acquire));
  if (!v3)
  {
    int v4 = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
    if (v4)
    {
      int v6 = v4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v8 = 0;
        _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " CAMutex::Lock: Could not lock the mutex", v8, 2u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1EEFA3DC8;
      exception[2] = v6;
    }
    atomic_store((unint64_t)v2, (unint64_t *)this + 2);
  }
  return v3 == 0;
}

void CADeprecated::CAMutex::~CAMutex(CADeprecated::CAMutex *this)
{
  CADeprecated::CAMutex::~CAMutex(this);

  JUMPOUT(0x19F3ABB30);
}

{
  *(void *)this = &unk_1EEFA7598;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
}

CADeprecated::CAMutex *CADeprecated::CAMutex::CAMutex(CADeprecated::CAMutex *this, const char *a2)
{
  *(void *)this = &unk_1EEFA7598;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  int v3 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), 0);
  if (v3)
  {
    int v5 = v3;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v7 = 0;
      _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " CAMutex::CAMutex: Could not init the mutex", v7, 2u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1EEFA3DC8;
    exception[2] = v5;
  }
  return this;
}

uint64_t CADeprecated::CAPThread::Start(uint64_t this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (atomic_load((unint64_t *)(this + 8)))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15.__sig) = 0;
      _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " CAPThread::Start: can't start because the thread is already running", (uint8_t *)&v15, 2u);
    }
    __break(1u);
  }
  if (!atomic_load((unint64_t *)(this + 8)))
  {
    uint64_t v3 = this;
    int v4 = pthread_attr_init(&v15);
    if (v4)
    {
      int v7 = v4;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      LOWORD(v14.sched_priority) = 0;
      int v8 = MEMORY[0x1E4F14500];
      unsigned int v9 = " CAPThread::Start: Thread attributes could not be created.";
    }
    else
    {
      int v5 = pthread_attr_setdetachstate(&v15, 2);
      if (!v5)
      {
        pthread_attr_getschedparam(&v15, &v14);
        v14.sched_priority = *(_DWORD *)(v3 + 104);
        pthread_attr_setschedparam(&v15, &v14);
        if (*(unsigned char *)(v3 + 122)) {
          pthread_attr_setschedpolicy(&v15, 4);
        }
        pthread_t v13 = 0;
        int v6 = pthread_create(&v13, &v15, (void *(__cdecl *)(void *))CADeprecated::CAPThread::Entry, (void *)v3);
        if (!v6 && v13)
        {
          atomic_store((unint64_t)v13, (unint64_t *)(v3 + 8));
          return pthread_attr_destroy(&v15);
        }
        int v7 = v6;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
LABEL_22:
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &unk_1EEFA3DC8;
          exception[2] = v7;
        }
        __int16 v12 = 0;
        int v8 = MEMORY[0x1E4F14500];
        unsigned int v9 = " CAPThread::Start: Could not create a thread.";
        int v10 = (uint8_t *)&v12;
LABEL_21:
        _os_log_error_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, v9, v10, 2u);
        goto LABEL_22;
      }
      int v7 = v5;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      LOWORD(v14.sched_priority) = 0;
      int v8 = MEMORY[0x1E4F14500];
      unsigned int v9 = " CAPThread::Start: A thread could not be created in the detached state.";
    }
    int v10 = (uint8_t *)&v14;
    goto LABEL_21;
  }
  return this;
}

uint64_t CADeprecated::CAPThread::Entry(CADeprecated::CAPThread *this, CADeprecated::CAPThread *a2)
{
  kern_return_t v7;
  kern_return_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  unsigned char v12[5];
  integer_t policy_info[2];
  int v14;
  int v15;
  uint8_t buf[4];
  kern_return_t v17;
  __int16 v18;
  unsigned char *v19;
  uint64_t v20;

  unsigned int v20 = *MEMORY[0x1E4F143B8];
  atomic_store((unint64_t)pthread_self(), (unint64_t *)this + 1);
  if (*((unsigned char *)this + 40)) {
    pthread_setname_np((const char *)this + 40);
  }
  if (*((unsigned char *)this + 121))
  {
    *((unsigned char *)this + 121) = 1;
    if (atomic_load((unint64_t *)this + 1))
    {
      *(void *)policy_info = *(void *)((char *)this + 108);
      int v4 = *((unsigned __int8 *)this + 120);
      sched_param v14 = *((_DWORD *)this + 29);
      pthread_attr_t v15 = v4;
      int v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 1);
      thread_act_t v6 = pthread_mach_thread_np(v5);
      int v7 = thread_policy_set(v6, 2u, policy_info, 4u);
      int v8 = v7;
      if (v7)
      {
        v12[0] = HIBYTE(v7);
        v12[1] = BYTE2(v7);
        v12[2] = BYTE1(v7);
        v12[3] = v7;
        void v12[4] = 0;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109378;
          unsigned int v17 = v8;
          BOOL v18 = 2080;
          int v19 = v12;
          _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " CAPThread::SetTimeConstraints: thread_policy_set failed, Error: %d (%s)", buf, 0x12u);
        }
        __break(1u);
        JUMPOUT(0x19D7BD83CLL);
      }
    }
  }
  unsigned int v9 = (uint64_t (*)(void))*((void *)this + 3);
  if (v9) {
    int v10 = v9(*((void *)this + 4));
  }
  else {
    int v10 = 0;
  }
  atomic_store(0, (unint64_t *)this + 1);
  if (*((unsigned char *)this + 123)) {
    (*(void (**)(CADeprecated::CAPThread *))(*(void *)this + 8))(this);
  }
  return v10;
}

void CADeprecated::CAPThread::~CAPThread(CADeprecated::CAPThread *this)
{
}

_opaque_pthread_t *CADeprecated::CAPThread::getScheduledPriority(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  if (this)
  {
    unsigned int v2 = this;
    mach_msg_type_number_t thread_info_outCnt = 10;
    thread_inspect_t v3 = pthread_mach_thread_np(this);
    thread_info(v3, 3u, thread_info_out, &thread_info_outCnt);
    switch(v12)
    {
      case 4:
        mach_msg_type_number_t thread_info_outCnt = 4;
        thread_inspect_t v5 = pthread_mach_thread_np(v2);
        thread_info(v5, 0xCu, v10, &thread_info_outCnt);
        return (_opaque_pthread_t *)v10[1];
      case 2:
        mach_msg_type_number_t thread_info_outCnt = 5;
        thread_inspect_t v6 = pthread_mach_thread_np(v2);
        thread_info(v6, 0xBu, v9, &thread_info_outCnt);
        return (_opaque_pthread_t *)v9[1];
      case 1:
        mach_msg_type_number_t thread_info_outCnt = 5;
        thread_inspect_t v4 = pthread_mach_thread_np(v2);
        thread_info(v4, 0xAu, v8, &thread_info_outCnt);
        return (_opaque_pthread_t *)v8[1];
      default:
        return 0;
    }
  }
  return this;
}

void AVVCRecordingEngine::safeWorkSync(uint64_t a1, void *a2)
{
  thread_inspect_t v3 = a2;
  if (v3)
  {
    thread_inspect_t v5 = v3;
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      thread_inspect_t v4 = (std::recursive_mutex *)(a1 + 536);
      std::recursive_mutex::lock(v4);
      v5[2]();
      std::recursive_mutex::unlock(v4);
    }
    else
    {
      v5[2]();
    }
    thread_inspect_t v3 = v5;
  }
}

void sub_19D7BDA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::dispatchAndSafeWork(uint64_t a1, void *a2, uint64_t a3)
{
  thread_inspect_t v5 = a2;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v14, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      uint64_t v6 = v14;
      int v7 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v8 = *(NSObject **)(v6 + 528);
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3321888768;
      v9[2] = ___ZN19AVVCRecordingEngine19dispatchAndSafeWorkEU13block_pointerFvvEPKc_block_invoke;
      v9[3] = &unk_1EEFA2C08;
      uint64_t v11 = v6;
      int v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = a3;
      int v10 = v5;
      dispatch_async(v8, v9);

      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      v5[2](v5);
    }
  }
}

void sub_19D7BDBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN19AVVCRecordingEngine19dispatchAndSafeWorkEU13block_pointerFvvEPKc_block_invoke(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
  {
    thread_inspect_t v3 = 0;
    goto LABEL_10;
  }
  thread_inspect_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = a1[5]) == 0)
  {
LABEL_10:
    if (kAVVCScope)
    {
      int v8 = *(id *)kAVVCScope;
      if (!v8) {
        goto LABEL_17;
      }
    }
    else
    {
      int v8 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315650;
      int v12 = "AVVCRecordingEngine.mm";
      __int16 v13 = 1024;
      int v14 = 1107;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (engine: %p). Bailing", (uint8_t *)&v11, 0x1Cu);
    }

LABEL_17:
    if (!v3) {
      return;
    }
    goto LABEL_18;
  }
  thread_inspect_t v5 = (std::recursive_mutex *)(v4 + 536);
  std::recursive_mutex::lock((std::recursive_mutex *)(v4 + 536));
  if (*(unsigned char *)(v4 + 520))
  {
    uint64_t v6 = *(NSObject **)kAVVCScope;
    int v7 = CALog::Scope::oslog(*(id *)kAVVCScope);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      int v10 = (const char *)a1[7];
      int v11 = 136315138;
      int v12 = v10;
      _os_log_fault_impl(&dword_19D794000, v6, OS_LOG_TYPE_FAULT, "Warning: Trying to do safeWork on engine work queue while in tearDown. Caller: %s", (uint8_t *)&v11, 0xCu);
    }
  }
  (*(void (**)(void))(a1[4] + 16))();
  std::recursive_mutex::unlock(v5);
LABEL_18:
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D7BDDAC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::safeWork(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  thread_inspect_t v5 = a2;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      uint64_t v6 = (std::recursive_mutex *)(a1 + 536);
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 536));
      if (*(unsigned char *)(a1 + 520))
      {
        int v7 = *(NSObject **)kAVVCScope;
        int v8 = CALog::Scope::oslog(*(id *)kAVVCScope);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          int v9 = 136315138;
          uint64_t v10 = a3;
          _os_log_fault_impl(&dword_19D794000, v7, OS_LOG_TYPE_FAULT, "Warning: Tyring to do safeWork on engine work queue while in tearDown. Caller: %s", (uint8_t *)&v9, 0xCu);
        }
      }
      v5[2](v5);
      std::recursive_mutex::unlock(v6);
    }
    else
    {
      v5[2](v5);
    }
  }
}

void sub_19D7BDF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::cacheRecordRoute(AVVCRecordingEngine *this, NSString *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  thread_inspect_t v3 = a2;
  uint64_t v4 = [(NSString *)v3 copy];
  thread_inspect_t v5 = (void *)*((void *)this + 39);
  *((void *)this + 39) = v4;

  if (kAVVCScope)
  {
    uint64_t v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *((void *)this + 39);
    int v9 = 136315650;
    uint64_t v10 = "AVVCRecordingEngine.mm";
    __int16 v11 = 1024;
    int v12 = 550;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngine::cacheRecordRoute : %@", (uint8_t *)&v9, 0x1Cu);
  }

LABEL_8:
}

void sub_19D7BE05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::getRecordRoute()
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::resetAudioEngine(AVVCRecordingEngine *this)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::enableSiriListeningMode(AVVCRecordingEngine *this)
{
  return 4294967292;
}

uint64_t AVVCRecordingEngine::reconfigure(AVVCRecordingEngine *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v2 = (*(uint64_t (**)(AVVCRecordingEngine *, BOOL))(*(void *)this + 112))(this, *((void *)this + 28) > 3);
  if (v2)
  {
    int v3 = v2;
    if (kAVVCScope)
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *((void *)this + 34);
      int v12 = 136315906;
      __int16 v13 = "AVVCRecordingEngine.mm";
      __int16 v14 = 1024;
      int v15 = 134;
      __int16 v16 = 2048;
      uint64_t v17 = v6;
      __int16 v18 = 1024;
      int v19 = v3;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d reconfigure for streamID(%lu) failed to destroy engine (%d)", (uint8_t *)&v12, 0x22u);
    }
  }
LABEL_9:
  uint64_t v7 = (*(uint64_t (**)(AVVCRecordingEngine *, void))(*(void *)this + 88))(this, *((void *)this + 8));
  if (v7)
  {
    if (kAVVCScope)
    {
      uint64_t v8 = *(id *)kAVVCScope;
      if (!v8) {
        return v7;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *((void *)this + 34);
      int v12 = 136315906;
      __int16 v13 = "AVVCRecordingEngine.mm";
      __int16 v14 = 1024;
      int v15 = 139;
      __int16 v16 = 2048;
      uint64_t v17 = v10;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d reconfigure for streamID(%lu) failed to prepareRecording (%d)", (uint8_t *)&v12, 0x22u);
    }
  }
  return v7;
}

uint64_t AVVCRecordingEngine::updateRecordAndPlaybackRoutes(AVVCRecordingEngine *this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v46, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  id location = 0;
  if (isDarwinOSProduct(void)::onceToken != -1) {
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
  }
  if (!isDarwinOSProduct(void)::isDarwinOS)
  {
    int v2 = (*(void (**)(void *, void))(*v46 + 64))(v46, 0);
    id v5 = [v2 currentRoute];
    if (v5)
    {
      uint64_t v6 = v46[47];
      if ((*(unsigned int (**)(void *))(*v46 + 320))(v46) != 2)
      {
        uint64_t v4 = (*(uint64_t (**)(void *, id *))(*v46 + 328))(v46, &location);
        goto LABEL_52;
      }
      id v7 = v5;
      if (IsSerializationEnabled(void)::onceToken != -1) {
        dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
      }
      int v8 = IsSerializationEnabled(void)::enable;
      uint64_t v43 = (std::mutex *)(v6 + 56);
      if (!IsSerializationEnabled(void)::enable) {
        std::mutex::lock(v43);
      }
      id v9 = objc_msgSend(v7, "inputs", v43);
      if (![v9 count])
      {
        if (kAVVCScope)
        {
          uint64_t v10 = *(id *)kAVVCScope;
          if (!v10)
          {
            uint64_t v4 = 4294955501;
LABEL_48:
            __int16 v11 = @"No Record Route";
            __int16 v18 = @"No Record Route";
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v10 = MEMORY[0x1E4F14500];
          id v16 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          __int16 v49 = "AVVCRouteManager.mm";
          __int16 v50 = 1024;
          int v51 = 159;
          _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d No input routes. AQ engine couldnt find routes since VSPD is not present!", buf, 0x12u);
        }
        uint64_t v4 = 4294955501;
LABEL_47:

        goto LABEL_48;
      }
      uint64_t v10 = [v9 objectAtIndex:0];
      __int16 v11 = [v10 portType];
      if (v11)
      {

        uint64_t v4 = 0;
LABEL_49:
        uint64_t v19 = [(__CFString *)v11 copy];
        uint64_t v20 = *(void **)(v6 + 32);
        *(void *)(v6 + 32) = v19;

        if (!v8) {
          std::mutex::unlock(v44);
        }

        (*(void (**)(void *, id *))(*v46 + 328))(v46, &location);
LABEL_52:
        if (kAVVCScope)
        {
          uint64_t v21 = *(id *)kAVVCScope;
          if (!v21) {
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v21 = MEMORY[0x1E4F14500];
          id v22 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          __int16 v49 = "AVVCRecordingEngine.mm";
          __int16 v50 = 1024;
          int v51 = 1245;
          __int16 v52 = 2112;
          id v53 = location;
          _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d New Record Route  : %@", buf, 0x1Cu);
        }

LABEL_59:
        if (v4 != -11795 && v4 != 0)
        {
          uint64_t v24 = *((void *)this + 21);
          if (v24) {
            (*(void (**)(uint64_t, void))(v24 + 16))(v24, *((void *)this + 34));
          }
        }
        id v25 = v5;
        if (IsSerializationEnabled(void)::onceToken != -1) {
          dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
        }
        int v26 = IsSerializationEnabled(void)::enable;
        if (!IsSerializationEnabled(void)::enable) {
          std::mutex::lock((std::mutex *)(v6 + 56));
        }
        id v27 = [v25 outputs];
        if ([v27 count])
        {
          int v28 = [v27 objectAtIndex:0];
          BOOL v29 = [v28 portType];
          if (!v29)
          {
            if (kAVVCScope)
            {
              BOOL v30 = *(id *)kAVVCScope;
              if (!v30)
              {
LABEL_85:
                BOOL v29 = @"Unknown Playback Route";
                goto LABEL_86;
              }
            }
            else
            {
              BOOL v30 = MEMORY[0x1E4F14500];
              id v32 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              __int16 v49 = "AVVCRouteManager.mm";
              __int16 v50 = 1024;
              int v51 = 182;
              _os_log_impl(&dword_19D794000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d Nil output port!", buf, 0x12u);
            }

            goto LABEL_85;
          }
        }
        else
        {
          if (kAVVCScope)
          {
            int v28 = *(id *)kAVVCScope;
            if (!v28)
            {
              BOOL v29 = @"No Playback Route";
              goto LABEL_87;
            }
          }
          else
          {
            int v28 = MEMORY[0x1E4F14500];
            id v31 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            __int16 v49 = "AVVCRouteManager.mm";
            __int16 v50 = 1024;
            int v51 = 187;
            _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d No output routes returned!", buf, 0x12u);
          }
          BOOL v29 = @"No Playback Route";
        }
LABEL_86:

LABEL_87:
        uint64_t v33 = [(__CFString *)v29 copy];
        unsigned int v34 = *(void **)(v6 + 40);
        *(void *)(v6 + 40) = v33;

        if (!v26) {
          std::mutex::unlock((std::mutex *)(v6 + 56));
        }

        if (IsSerializationEnabled(void)::onceToken != -1) {
          dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
        }
        int v35 = IsSerializationEnabled(void)::enable;
        if (!IsSerializationEnabled(void)::enable) {
          std::mutex::lock((std::mutex *)(v6 + 56));
        }
        int v3 = (__CFString *)[*(id *)(v6 + 40) copy];
        if (!v35) {
          std::mutex::unlock((std::mutex *)(v6 + 56));
        }
        if (kAVVCScope)
        {
          id v36 = *(id *)kAVVCScope;
          if (!v36)
          {
LABEL_102:
            float v38 = (void *)[(__CFString *)v3 copy];
            __int16 v39 = (*(void (**)(void *, void))(*v46 + 64))(v46, 0);
            [v39 setPlaybackRoute:v38];

            uint64_t v40 = (void *)MEMORY[0x19F3AC180]();
            float v41 = +[AVVCMetricsManager sharedManager];
            objc_msgSend(v41, "logRecordRoute:andPlaybackRoute:reporterID:", location, v3, -[NSObject reporterID](v2, "reporterID"));

LABEL_103:

            goto LABEL_104;
          }
        }
        else
        {
          id v36 = MEMORY[0x1E4F14500];
          id v37 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          __int16 v49 = "AVVCRecordingEngine.mm";
          __int16 v50 = 1024;
          int v51 = 1258;
          __int16 v52 = 2112;
          id v53 = v3;
          _os_log_impl(&dword_19D794000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d New Playback Route: %@", buf, 0x1Cu);
        }

        goto LABEL_102;
      }
      if (kAVVCScope)
      {
        int v15 = *(id *)kAVVCScope;
        if (!v15)
        {
LABEL_46:
          uint64_t v4 = 4294955512;
          goto LABEL_47;
        }
      }
      else
      {
        int v15 = MEMORY[0x1E4F14500];
        id v17 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v49 = "AVVCRouteManager.mm";
        __int16 v50 = 1024;
        int v51 = 155;
        _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Nil port type!", buf, 0x12u);
      }

      goto LABEL_46;
    }
    if (kAVVCScope)
    {
      __int16 v13 = *(id *)kAVVCScope;
      if (!v13)
      {
LABEL_28:
        if ((*(unsigned int (**)(void *))(*v46 + 320))(v46) == 4) {
          (*(void (**)(void *, id *))(*v46 + 328))(v46, &location);
        }
        else {
          objc_storeStrong(&location, @"No Record Route");
        }
        uint64_t v4 = 4294955512;
        int v3 = @"Unknown Playback Route";
        goto LABEL_103;
      }
    }
    else
    {
      __int16 v13 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v49 = "AVVCRecordingEngine.mm";
      __int16 v50 = 1024;
      int v51 = 1218;
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d updateRecordAndPlaybackRoutes: Nil currentRoute!", buf, 0x12u);
    }

    goto LABEL_28;
  }
  if (kAVVCScope)
  {
    int v2 = *(id *)kAVVCScope;
    if (!v2)
    {
      int v3 = 0;
      uint64_t v4 = 0;
      goto LABEL_105;
    }
  }
  else
  {
    int v2 = MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v49 = "AVVCRecordingEngine.mm";
    __int16 v50 = 1024;
    int v51 = 1210;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_INFO, "%25s:%-5d updateRecordAndPlaybackRoutes: built in route !", buf, 0x12u);
  }
  int v3 = 0;
  uint64_t v4 = 0;
LABEL_104:

LABEL_105:
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  return v4;
}

void sub_19D7BEC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, void *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

id AVVCRecordingEngine::sessionManager(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x3032000000;
  uint64_t v10 = __Block_byref_object_copy__692;
  __int16 v11 = __Block_byref_object_dispose__693;
  id v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ZN19AVVCRecordingEngine14sessionManagerEPU15__autoreleasingP7NSError_block_invoke;
  v6[3] = &unk_1E5965960;
  v6[4] = &v7;
  v6[5] = a1;
  if (*(void *)(a1 + 360) == -1)
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once((dispatch_once_t *)(a1 + 360), v6);
  if (a2) {
LABEL_3:
  }
    *a2 = (id) v8[5];
LABEL_4:
  id v4 = *(id *)(a1 + 368);
  _Block_object_dispose(&v7, 8);

  return v4;
}

uint64_t __Block_byref_object_copy__692(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__693(uint64_t a1)
{
}

void ___ZN19AVVCRecordingEngine14sessionManagerEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = [AVVCContextSettings alloc];
  uint64_t v4 = *(void *)(v2 + 280);
  id v5 = AVVCRouteManager::getRecordDeviceUID(*(id **)(v2 + 376));
  uint64_t v6 = [(AVVCContextSettings *)v3 initWithMode:v4 deviceUID:v5];

  uint64_t v7 = +[AVVCSessionFactory sharedInstance];
  uint64_t v8 = *(void *)(v2 + 512);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v9 + 40);
  uint64_t v10 = [v7 sessionManagerForContext:v6 clientType:v8 error:&obj];
  objc_storeStrong((id *)(v9 + 40), obj);
  __int16 v11 = *(void **)(v2 + 368);
  *(void *)(v2 + 368) = v10;

  if (kAVVCScope)
  {
    id v12 = *(id *)kAVVCScope;
    if (!v12) {
      goto LABEL_8;
    }
  }
  else
  {
    id v12 = MEMORY[0x1E4F14500];
    id v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(v2 + 368);
    uint64_t v15 = *(void *)(v2 + 272);
    *(_DWORD *)buf = 136316162;
    __int16 v18 = "AVVCRecordingEngine.mm";
    __int16 v19 = 1024;
    int v20 = 222;
    __int16 v21 = 2048;
    uint64_t v22 = v14;
    __int16 v23 = 1024;
    int v24 = v15;
    __int16 v25 = 2048;
    uint64_t v26 = v2;
    _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cached session manager pointer (%p) for engine(%d, %p)", buf, 0x2Cu);
  }

LABEL_8:
}

void sub_19D7BF070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id AVVCRecordingEngine::audioSession(uint64_t a1, void *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x3032000000;
  uint64_t v10 = __Block_byref_object_copy__692;
  __int16 v11 = __Block_byref_object_dispose__693;
  id v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = ___ZN19AVVCRecordingEngine12audioSessionEPU15__autoreleasingP7NSError_block_invoke;
  v6[3] = &unk_1E5965960;
  v6[4] = &v7;
  v6[5] = a1;
  if (*(void *)(a1 + 344) == -1)
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once((dispatch_once_t *)(a1 + 344), v6);
  if (a2) {
LABEL_3:
  }
    *a2 = (id) v8[5];
LABEL_4:
  id v4 = *(id *)(a1 + 352);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void ___ZN19AVVCRecordingEngine12audioSessionEPU15__autoreleasingP7NSError_block_invoke(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = [AVVCContextSettings alloc];
  uint64_t v4 = *(void *)(v2 + 280);
  id v5 = AVVCRouteManager::getRecordDeviceUID(*(id **)(v2 + 376));
  uint64_t v6 = [(AVVCContextSettings *)v3 initWithMode:v4 deviceUID:v5];

  uint64_t v7 = +[AVVCSessionFactory sharedInstance];
  uint64_t v8 = *(void *)(v2 + 512);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v9 + 40);
  uint64_t v10 = [v7 sessionForContext:v6 clientType:v8 error:&obj];
  objc_storeStrong((id *)(v9 + 40), obj);
  __int16 v11 = *(void **)(v2 + 352);
  *(void *)(v2 + 352) = v10;

  if (kAVVCScope)
  {
    id v12 = *(id *)kAVVCScope;
    if (!v12) {
      goto LABEL_8;
    }
  }
  else
  {
    id v12 = MEMORY[0x1E4F14500];
    id v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(v2 + 352);
    uint64_t v15 = *(void *)(v2 + 272);
    *(_DWORD *)buf = 136316162;
    __int16 v18 = "AVVCRecordingEngine.mm";
    __int16 v19 = 1024;
    int v20 = 207;
    __int16 v21 = 2048;
    uint64_t v22 = v14;
    __int16 v23 = 1024;
    int v24 = v15;
    __int16 v25 = 2048;
    uint64_t v26 = v2;
    _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cached session pointer (%p) for engine(%d, %p)", buf, 0x2Cu);
  }

LABEL_8:
}

void sub_19D7BF368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::createRecordQueue(AVVCRecordingEngine *this, NSDictionary *a2)
{
  return 4294967292;
}

void AVVCRecordingEngine::AVVCRecordingEngine(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EEFA5BC0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 384) = 850045863;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 850045863;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  MEMORY[0x19F3AB9F0](a1 + 536);
  *(_DWORD *)(a1 + 600) = 512;
  *(void *)(a1 + 264) = 0x3FC999999999999ALL;
  uint64_t v4 = *(void **)(a1 + 288);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;

  id v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = 0;

  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  uint64_t v6 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;

  uint64_t v7 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;

  uint64_t v8 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;

  uint64_t v9 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;

  uint64_t v10 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;

  __int16 v11 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;

  id v12 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = 0;

  id v13 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = 0;

  uint64_t v14 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = 0;

  uint64_t v15 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = 0;

  id v16 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = 0;

  id v17 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = 0;

  __int16 v18 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = 0;

  __int16 v19 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = 0;

  *(_WORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  int v20 = *(void **)(a1 + 312);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;

  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 512) = a2;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 56) = 16;
  *(void *)(a1 + 48) = 0x100000002;
  *(_OWORD *)(a1 + 32) = xmmword_19D8B1CF0;
  operator new();
}

void sub_19D7BF648(_Unwind_Exception *a1)
{
  std::recursive_mutex::~recursive_mutex(v4);

  std::mutex::~mutex(v3);
  std::mutex::~mutex(v2);

  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 16);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::~AVVCRecordingEngine(AVVCRecordingEngine *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EEFA5BC0;
  uint64_t v2 = [AVVCContextSettings alloc];
  uint64_t v3 = *((void *)this + 35);
  uint64_t v4 = AVVCRouteManager::getRecordDeviceUID(*((id **)this + 47));
  id v5 = [(AVVCContextSettings *)v2 initWithMode:v3 deviceUID:v4];

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  uint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v36, [(AVVCContextSettings *)v5 activationMode]);
    uint64_t v9 = [(AVVCContextSettings *)v5 activationDeviceUID];
    *(_DWORD *)buf = 136315906;
    float v38 = "AVVCRecordingEngine.mm";
    __int16 v39 = 1024;
    int v40 = 93;
    __int16 v41 = 2080;
    uint64_t v42 = v36;
    __int16 v43 = 2112;
    uint64_t v44 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Trigger clean up of context(%s, %@)", buf, 0x26u);
  }
LABEL_8:
  uint64_t v10 = +[AVVCSessionFactory sharedInstance];
  [v10 cleanupContext:v5];

  __int16 v11 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;

  free(*((void **)this + 38));
  id v12 = (void *)*((void *)this + 39);
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;

  id v13 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;

  uint64_t v14 = (void *)*((void *)this + 12);
  *((void *)this + 12) = 0;

  uint64_t v15 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;

  id v16 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;

  id v17 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;

  __int16 v18 = (void *)*((void *)this + 17);
  *((void *)this + 17) = 0;

  __int16 v19 = (void *)*((void *)this + 13);
  *((void *)this + 1AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;

  int v20 = (void *)*((void *)this + 18);
  *((void *)this + 18) = 0;

  __int16 v21 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;

  uint64_t v22 = (void *)*((void *)this + 20);
  *((void *)this + 20) = 0;

  __int16 v23 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;

  int v24 = (void *)*((void *)this + 22);
  *((void *)this + 22) = 0;

  __int16 v25 = (void *)*((void *)this + 23);
  *((void *)this + 2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;

  uint64_t v26 = (void *)*((void *)this + 24);
  *((void *)this + 24) = 0;

  uint64_t v27 = (void *)*((void *)this + 36);
  *((void *)this + 36) = 0;

  uint64_t v28 = *((void *)this + 47);
  if (v28)
  {
    id v29 = *(id *)v28;
    *(void *)uint64_t v28 = 0;

    BOOL v30 = *(void **)(v28 + 16);
    *(void *)(v28 + 16) = 0;

    id v31 = *(void **)(v28 + 32);
    *(void *)(v28 + 32) = 0;

    id v32 = *(void **)(v28 + 40);
    *(void *)(v28 + 40) = 0;

    std::mutex::~mutex((std::mutex *)(v28 + 56));
    MEMORY[0x19F3ABB30](v28, 0x1080C40D98F9877);
  }
  *((void *)this + 47) = 0;
  if (kAVVCScope)
  {
    uint64_t v33 = *(id *)kAVVCScope;
    if (!v33) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v33 = MEMORY[0x1E4F14500];
    id v34 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    float v38 = "AVVCRecordingEngine.mm";
    __int16 v39 = 1024;
    int v40 = 122;
    _os_log_impl(&dword_19D794000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngine():~AVVCRecordingEngine() called", buf, 0x12u);
  }

LABEL_17:
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 536));

  std::mutex::~mutex((std::mutex *)this + 7);
  std::mutex::~mutex((std::mutex *)this + 6);

  int v35 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
}

void sub_19D7BFB8C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::setupASBDAndCreateRecorder(AVVCRecordingEngine *this, NSDictionary *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  ProfileMetrics(&cfstr_AvvcProfilePro_2.isa);
  if (!v3)
  {
    uint64_t v4 = (*(uint64_t (**)(AVVCRecordingEngine *, void, char *))(*(void *)this + 16))(this, 0, (char *)this + 24);
    if (v4) {
      goto LABEL_81;
    }
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_49;
      }
    }
    else
    {
      id v6 = MEMORY[0x1E4F14500];
      id v22 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      double v48 = "AVVCRecordingEngine.mm";
      __int16 v49 = 1024;
      int v50 = 155;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Settings are nil, rebuilding queue", buf, 0x12u);
    }

LABEL_49:
    if (kAVVCScope)
    {
      id v23 = *(id *)kAVVCScope;
      if (!v23) {
        goto LABEL_56;
      }
    }
    else
    {
      id v23 = (id)MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
    }
    __int16 v25 = v23;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)((char *)this + 24), (char *)buf, 0x100uLL, v26, v27);
      LODWORD(v46.var0) = 136315650;
      *(void *)((char *)&v46.var0 + 4) = "AVVCRecordingEngine.mm";
      LOWORD(v46.var2) = 1024;
      *(unsigned int *)((char *)&v46.var2 + 2) = 157;
      HIWORD(v46.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 2080;
      *(void *)&v46.var4 = buf;
      _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d prepareRecord: NEW FORMAT: %s", (uint8_t *)&v46, 0x1Cu);
    }

LABEL_56:
    LODWORD(v46.var0) = 4102;
    BYTE4(v46.var0) = 1;
    memset(&v46.var1, 0, 32);
    kdebug_trace();
    uint64_t v4 = (*(uint64_t (**)(AVVCRecordingEngine *, void))(*(void *)this + 24))(this, 0);
    TraceWrapper::~TraceWrapper((TraceWrapper *)&v46);
    if (!v4) {
      goto LABEL_80;
    }
    if ((v4 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        uint64_t v28 = *(id *)kAVVCScope;
        if (!v28) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v28 = MEMORY[0x1E4F14500];
        id v34 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_79;
      }
      LODWORD(v46.var0) = 136315650;
      *(void *)((char *)&v46.var0 + 4) = "AVVCRecordingEngine.mm";
      LOWORD(v46.var2) = 1024;
      *(unsigned int *)((char *)&v46.var2 + 2) = 163;
      HIWORD(v46.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v46.var4 = v4;
      uint64_t v33 = "%25s:%-5d ERROR: prepareRecord: createRecordQueue err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        uint64_t v28 = *(id *)kAVVCScope;
        if (!v28) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v28 = MEMORY[0x1E4F14500];
        id v32 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_79;
      }
      LODWORD(v46.var0) = 136315650;
      *(void *)((char *)&v46.var0 + 4) = "AVVCRecordingEngine.mm";
      LOWORD(v46.var2) = 1024;
      *(unsigned int *)((char *)&v46.var2 + 2) = 163;
      HIWORD(v46.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v46.var4 = v4;
      uint64_t v33 = "%25s:%-5d ERROR: prepareRecord: createRecordQueue err %d";
    }
    _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&v46, 0x18u);
LABEL_79:

    goto LABEL_80;
  }
  memset(&v46, 0, sizeof(v46));
  uint64_t v4 = (*(uint64_t (**)(AVVCRecordingEngine *, NSDictionary *, CAStreamBasicDescription *))(*(void *)this + 16))(this, v3, &v46);
  if (!v4)
  {
    if (*((double *)this + 3) == v46.var0
      && *((_DWORD *)this + 8) == v46.var1
      && *((_DWORD *)this + 9) == v46.var2
      && *((_DWORD *)this + 13) == v46.var6)
    {
      if (!*((_DWORD *)this + 58)) {
        goto LABEL_37;
      }
      if (kAVVCScope)
      {
        id v5 = *(id *)kAVVCScope;
        if (!v5)
        {
LABEL_86:
          float v38 = +[AVVCMetricsManager sharedManager];
          __int16 v39 = [NSNumber numberWithInt:*((unsigned int *)this + 58)];
          [v38 logSessionMetric:@"avvcDestroyRecordQueueOnError" value:v39 category:2 type:5 reporterID:AVVCRecordingEngine::getReporterID(this)];

          AVVCRecordingEngine::destroyRecordEngineWithRecordLock(*((AVVCRecordingEngine **)this + 18));
LABEL_37:
          uint64_t v20 = (*(uint64_t (**)(AVVCRecordingEngine *, NSDictionary *))(*(void *)this + 24))(this, v3);
          uint64_t v4 = v20;
          if (v20)
          {
            if ((v20 + 199999) >= 0x61A7F)
            {
              if (kAVVCScope)
              {
                __int16 v21 = *(id *)kAVVCScope;
                if (!v21) {
                  goto LABEL_80;
                }
              }
              else
              {
                __int16 v21 = MEMORY[0x1E4F14500];
                id v31 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                goto LABEL_71;
              }
              *(_DWORD *)buf = 136315650;
              double v48 = "AVVCRecordingEngine.mm";
              __int16 v49 = 1024;
              int v50 = 193;
              __int16 v51 = 1024;
              int v52 = v4;
              BOOL v30 = "%25s:%-5d ERROR: prepareRecord: createRecordQueue err %{audio:4CC}d";
            }
            else
            {
              if (kAVVCScope)
              {
                __int16 v21 = *(id *)kAVVCScope;
                if (!v21) {
                  goto LABEL_80;
                }
              }
              else
              {
                __int16 v21 = MEMORY[0x1E4F14500];
                id v29 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
                goto LABEL_71;
              }
              *(_DWORD *)buf = 136315650;
              double v48 = "AVVCRecordingEngine.mm";
              __int16 v49 = 1024;
              int v50 = 193;
              __int16 v51 = 1024;
              int v52 = v4;
              BOOL v30 = "%25s:%-5d ERROR: prepareRecord: createRecordQueue err %d";
            }
            _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_ERROR, v30, buf, 0x18u);
LABEL_71:
          }
LABEL_80:
          ProfileMetrics(&cfstr_AvvcProfilePro_3.isa);
          goto LABEL_81;
        }
      }
      else
      {
        id v5 = MEMORY[0x1E4F14500];
        id v36 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = *((_DWORD *)this + 58);
        *(_DWORD *)buf = 136315650;
        double v48 = "AVVCRecordingEngine.mm";
        __int16 v49 = 1024;
        int v50 = 185;
        __int16 v51 = 1024;
        int v52 = v37;
        _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d destroying engine because of record error: %d", buf, 0x18u);
      }

      goto LABEL_86;
    }
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_22;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      double v48 = "AVVCRecordingEngine.mm";
      __int16 v49 = 1024;
      int v50 = 173;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Formats differ, rebuilding queue", buf, 0x12u);
    }

LABEL_22:
    if (kAVVCScope)
    {
      id v9 = *(id *)kAVVCScope;
      if (!v9) {
        goto LABEL_29;
      }
    }
    else
    {
      id v9 = (id)MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    __int16 v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)((char *)this + 24), (char *)buf, 0x100uLL, v12, v13);
      int v40 = 136315650;
      __int16 v41 = "AVVCRecordingEngine.mm";
      __int16 v42 = 1024;
      int v43 = 175;
      __int16 v44 = 2080;
      uint64_t v45 = buf;
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d prepareRecord: CURRENT FORMAT: %s", (uint8_t *)&v40, 0x1Cu);
    }

LABEL_29:
    if (kAVVCScope)
    {
      id v14 = *(id *)kAVVCScope;
      if (!v14)
      {
LABEL_36:
        AVVCRecordingEngine::destroyRecordEngineWithRecordLock(*((AVVCRecordingEngine **)this + 18));
        long long v19 = *(_OWORD *)&v46.var3;
        *(_OWORD *)((char *)this + 24) = *(_OWORD *)&v46.var0;
        *(_OWORD *)((char *)this + 40) = v19;
        *((void *)this + 7) = *(void *)&v46.var7;
        goto LABEL_37;
      }
    }
    else
    {
      id v14 = (id)MEMORY[0x1E4F14500];
      id v15 = MEMORY[0x1E4F14500];
    }
    id v16 = v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      CAStreamBasicDescription::AsString(&v46, (char *)buf, 0x100uLL, v17, v18);
      int v40 = 136315650;
      __int16 v41 = "AVVCRecordingEngine.mm";
      __int16 v42 = 1024;
      int v43 = 176;
      __int16 v44 = 2080;
      uint64_t v45 = buf;
      _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d prepareRecord: NEW FORMAT: %s", (uint8_t *)&v40, 0x1Cu);
    }

    goto LABEL_36;
  }
LABEL_81:

  return v4;
}

void sub_19D7C0424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *CAStreamBasicDescription::AsString(CAStreamBasicDescription *this, char *a2, size_t a3, double a4, int16x8_t a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unsigned int var1 = this->var1;
  if (var1 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", (uint64_t)__p, this->var6, *(void *)&this->var0);
    goto LABEL_69;
  }
  if (var1 == 1819304813 && this->var4 == 1)
  {
    unsigned int var5 = this->var5;
    if (var5 == this->var3)
    {
      unsigned int var7 = this->var7;
      if (var5 >= var7 >> 3)
      {
        uint64_t var6 = this->var6;
        if (var6)
        {
          unsigned int var2 = this->var2;
          if ((var2 & 0x20) != 0
            || (BOOL v17 = var5 == var5 / var6 * var6, var5 /= var6, v17))
          {
            if ((var2 & 2) == 0 && 8 * var5 == var7)
            {
              if (var2)
              {
                if ((var2 & 0x1F84) == 0)
                {
                  if (var5 == 4)
                  {
                    uint64_t v14 = 1;
                    goto LABEL_168;
                  }
                  BOOL v17 = var5 == 8;
                  BOOL v56 = var5 == 8;
                  if (v17)
                  {
                    uint64_t v14 = 4 * v56;
                    goto LABEL_168;
                  }
                }
              }
              else if ((var2 & 4) != 0)
              {
                int v13 = (var2 >> 7) & 0x3F;
                if (v13 == 24 && var5 == 4)
                {
                  uint64_t v14 = 3;
LABEL_168:
                  if ((var2 & 0x20) != 0) {
                    double v57 = ", deinterleaved";
                  }
                  else {
                    double v57 = ", interleaved";
                  }
                  if (var6 <= 1) {
                    double v57 = "";
                  }
                  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", (uint64_t)__p, var6, *(void *)&this->var0, *((void *)&off_1E5964818 + v14), v57);
                  goto LABEL_69;
                }
                if (!v13 && var5 == 4)
                {
                  uint64_t v14 = 5;
                  goto LABEL_168;
                }
                if (!v13 && var5 == 2)
                {
                  uint64_t v14 = 2;
                  goto LABEL_168;
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v15 = this->var6;
  double var0 = this->var0;
  if (v15) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = var1 == 0;
  }
  if (v17 && var0 == 0.0)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz", (uint64_t)__p, 0, *(void *)&this->var0);
    goto LABEL_69;
  }
  a5.i32[0] = bswap32(var1);
  *(int8x8_t *)a5.i8 = vzip1_s8(*(int8x8_t *)a5.i8, *(int8x8_t *)&var0);
  v18.i64[0] = 0x1F0000001FLL;
  v18.i64[1] = 0x1F0000001FLL;
  v19.i64[0] = 0x5F0000005FLL;
  v19.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a5.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v19, (uint32x4_t)vsraq_n_s32(v18, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a5.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a5.i8, (int8x8_t)0x2E002E002E002ELL);
  *((unsigned char *)&v63.__r_.__value_.__s + 2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 4;
  LODWORD(v63.__r_.__value_.__l.__data_) = vmovn_s16(a5).u32[0];
  v63.__r_.__value_.__s.__data_[4] = 0;
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v61, v15, *(void *)&var0, &v63, this->var2);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  signed int v20 = this->var1;
  if (v20 <= 1819304812)
  {
    if (v20 != 1634492771 && v20 != 1634497332 && v20 != 1718378851)
    {
LABEL_75:
      caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v63, this->var7, this->var3, this->var4, this->var5);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v32 = &v61;
      }
      else {
        id v32 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
LABEL_62:
      id v34 = std::string::insert(&v63, 0, (const std::string::value_type *)v32, size);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      int64_t v59 = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      id v36 = (void *)v63.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_45:
    uint64_t v29 = this->var2;
    if ((v29 - 1) < 4 || !v29 && (v20 == 1634497332 || v20 == 1936487278 || v20 == 1936487267))
    {
      caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v63, CA::StreamDescription::AsString(void)const::kSourceBits[v29]);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v30 = &v63;
      }
      else {
        BOOL v30 = (std::string *)v63.__r_.__value_.__r.__words[0];
      }
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v31 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v31 = v63.__r_.__value_.__l.__size_;
      }
      std::string::append(&v61, (const std::string::value_type *)v30, v31);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::append(&v61, "from UNKNOWN source bit depth, ", 0x1FuLL);
    }
    caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v63, this->var4);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v32 = &v61;
    }
    else {
      id v32 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v61.__r_.__value_.__l.__size_;
    }
    goto LABEL_62;
  }
  if (v20 == 1936487278 || v20 == 1936487267) {
    goto LABEL_45;
  }
  if (v20 != 1819304813) {
    goto LABEL_75;
  }
  unsigned int v21 = this->var2;
  unsigned int v22 = this->var5;
  unsigned int v23 = v21 & 0x20;
  id v24 = "";
  if (!v22) {
    goto LABEL_37;
  }
  if ((v21 & 0x20) != 0)
  {
    unsigned int v25 = 1;
  }
  else
  {
    unsigned int v25 = this->var6;
    if (!v25)
    {
      unsigned int v23 = 0;
LABEL_37:
      double v26 = " signed";
      if ((v21 & 4) == 0) {
        double v26 = " unsigned";
      }
      if (v21) {
        int16x8_t v27 = "float";
      }
      else {
        int16x8_t v27 = "integer";
      }
      if (v21) {
        uint64_t v28 = "";
      }
      else {
        uint64_t v28 = v26;
      }
LABEL_107:
      v63.__r_.__value_.__s.__data_[0] = 0;
      if (v23) {
        int v43 = ", deinterleaved";
      }
      else {
        int v43 = "";
      }
      int v40 = "";
      __int16 v44 = "";
      goto LABEL_111;
    }
  }
  int v39 = v22 / v25;
  if (v22 / v25 < 2)
  {
    __int16 v42 = " signed";
    if ((v21 & 4) == 0) {
      __int16 v42 = " unsigned";
    }
    if (v21) {
      int16x8_t v27 = "float";
    }
    else {
      int16x8_t v27 = "integer";
    }
    if (v21) {
      uint64_t v28 = "";
    }
    else {
      uint64_t v28 = v42;
    }
    if (v25 > v22) {
      goto LABEL_107;
    }
    int v39 = 1;
    int v40 = "";
  }
  else
  {
    if ((v21 & 2) != 0) {
      int v40 = " big-endian";
    }
    else {
      int v40 = " little-endian";
    }
    __int16 v41 = " unsigned";
    if ((v21 & 4) != 0) {
      __int16 v41 = " signed";
    }
    if (v21) {
      int16x8_t v27 = "float";
    }
    else {
      int16x8_t v27 = "integer";
    }
    if (v21) {
      uint64_t v28 = "";
    }
    else {
      uint64_t v28 = v41;
    }
  }
  unsigned int v45 = this->var6;
  if ((v21 & 0x20) != 0) {
    unsigned int v46 = 1;
  }
  else {
    unsigned int v46 = this->var6;
  }
  if (v46) {
    unsigned int v46 = 8 * (v22 / v46);
  }
  if (v46 == this->var7)
  {
    v63.__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if ((v21 & 8) != 0) {
      int v47 = "";
    }
    else {
      int v47 = "un";
    }
    snprintf((char *)&v63, 0x20uLL, "%spacked in %u bytes", v47, v39);
    unsigned int v22 = this->var5;
    unsigned int v21 = this->var2;
    if (!v22)
    {
      unsigned int v48 = 0;
      unsigned int v23 = this->var2 & 0x20;
      goto LABEL_133;
    }
    unsigned int v45 = this->var6;
    unsigned int v23 = this->var2 & 0x20;
  }
  if (v23) {
    unsigned int v48 = 1;
  }
  else {
    unsigned int v48 = v45;
  }
  if (v48) {
    unsigned int v48 = 8 * (v22 / v48);
  }
LABEL_133:
  unsigned int v49 = this->var7;
  int v50 = " high-aligned";
  if ((v21 & 0x10) == 0) {
    int v50 = " low-aligned";
  }
  if ((v49 & 7) == 0 && v48 == v49) {
    __int16 v44 = "";
  }
  else {
    __int16 v44 = v50;
  }
  if (v23) {
    int v43 = ", deinterleaved";
  }
  else {
    int v43 = "";
  }
  if (v63.__r_.__value_.__s.__data_[0])
  {
    id v24 = ", ";
    goto LABEL_146;
  }
LABEL_111:
  if (*v44) {
    id v24 = ", ";
  }
LABEL_146:
  if (((v21 >> 7) & 0x3F) != 0) {
    snprintf(__str, 0x14uLL, "%u.%u");
  }
  else {
    snprintf(__str, 0x14uLL, "%u");
  }
  caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v60, __str, v40, v28, v27, v24, &v63, v44, v43);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v52 = &v61;
  }
  else {
    int v52 = (std::string *)v61.__r_.__value_.__r.__words[0];
  }
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v61.__r_.__value_.__l.__size_;
  }
  uint64_t v54 = std::string::insert(&v60, 0, (const std::string::value_type *)v52, v53);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  int64_t v59 = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    id v36 = (void *)v60.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v36);
  }
LABEL_65:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
LABEL_69:
  if (v59 >= 0) {
    int v37 = __p;
  }
  else {
    int v37 = (void **)__p[0];
  }
  strlcpy(a2, (const char *)v37, a3);
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

void sub_19D7C0C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AVVCRecordingEngine::destroyRecordEngineWithRecordLock(AVVCRecordingEngine *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v1 = (void (*)(AVVCRecordingEngine *, void))*((void *)this + 2);
    v1(this, 0);
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v2 = *(id *)kAVVCScope;
      if (!v2) {
        return;
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v3 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "AVVCRecordingEngine.mm";
      __int16 v6 = 1024;
      int v7 = 1069;
      _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d destroyRecordEngineWithRecordLockBlock is nil !", (uint8_t *)&v4, 0x12u);
    }
  }
}

uint64_t AVVCRecordingEngine::getReporterID(AVVCRecordingEngine *this)
{
  if (IsMetricsOwnedByAVVC(void)::onceToken != -1) {
    dispatch_once(&IsMetricsOwnedByAVVC(void)::onceToken, &__block_literal_global_205);
  }
  if (IsMetricsOwnedByAVVC(void)::owned) {
    +[AVVCMetricsManager sharedManager];
  }
  else {
  uint64_t v2 = (*(void (**)(AVVCRecordingEngine *, void))(*(void *)this + 64))(this, 0);
  }
  uint64_t v3 = [v2 reporterID];

  return v3;
}

void sub_19D7C0E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  int v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      int v7 = (char *)a2;
    }
    else {
      int v7 = *(char **)a2;
    }
    if (v6 >= 0) {
      size_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v8 = *(void *)(a2 + 8);
    }
    int v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_19D7C0F1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void AVVCRecordingEngine::setRecordDeviceUID(AVVCRecordingEngine *this, NSString *a2)
{
  int v7 = a2;
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock((std::mutex *)((char *)this + 56));
  }
  int v4 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;

  uint64_t v5 = [(NSString *)v7 copy];
  int v6 = (void *)*((void *)this + 2);
  *((void *)this + 2) = v5;

  if (!v3) {
    std::mutex::unlock((std::mutex *)((char *)this + 56));
  }
}

void sub_19D7C101C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::populateRecordSettings(AVVCRecordingEngine *this)
{
  v75[27] = *(id *)MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v49, "populateRecordSettings");
  memset(v75, 0, 216);
  long long v74 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v2 = @"AVFormatIDKey";
  uint64_t v72 = @"AVFormatIDKey";
  uint64_t v3 = [objc_alloc(NSNumber) initWithUnsignedInteger:*((unsigned int *)this + 8)];
  int v4 = (void *)v56;
  *(void *)&long long v56 = v3;

  objc_storeStrong((id *)&v73, @"AVSampleRateKey");
  uint64_t v5 = [objc_alloc(NSNumber) initWithDouble:*((double *)this + 3)];
  int v6 = (void *)*((void *)&v56 + 1);
  *((void *)&v56 + 1) = v5;

  objc_storeStrong((id *)&v73 + 1, @"AVNumberOfChannelsKey");
  uint64_t v7 = [objc_alloc(NSNumber) initWithUnsignedInteger:*((unsigned int *)this + 13)];
  size_t v8 = (void *)v57;
  *(void *)&long long v57 = v7;

  if (*((_DWORD *)this + 8) == 1819304813)
  {
    objc_storeStrong((id *)&v74, @"AVLinearPCMBitDepthKey");
    uint64_t v9 = [objc_alloc(NSNumber) initWithUnsignedInteger:*((unsigned int *)this + 14)];
    id v10 = (void *)*((void *)&v57 + 1);
    *((void *)&v57 + 1) = v9;

    objc_storeStrong((id *)&v74 + 1, @"AVLinearPCMIsFloatKey");
    uint64_t v11 = [objc_alloc(NSNumber) initWithUnsignedInteger:*((_DWORD *)this + 9) & 1];
    double v12 = (void *)v58;
    *(void *)&long long v58 = v11;

    objc_storeStrong(v75, @"AVLinearPCMIsBigEndianKey");
    uint64_t v13 = [objc_alloc(NSNumber) initWithUnsignedInteger:((unint64_t)*((unsigned int *)this + 9) >> 1) & 1];
    uint64_t v14 = (void *)*((void *)&v58 + 1);
    *((void *)&v58 + 1) = v13;

    objc_storeStrong(&v75[1], @"AVLinearPCMIsNonInterleaved");
    uint64_t v15 = [objc_alloc(NSNumber) initWithUnsignedInteger:((unint64_t)*((unsigned int *)this + 9) >> 5) & 1];
    id v16 = (void *)v59;
    *(void *)&long long v59 = v15;

    unsigned int v17 = 7;
  }
  else
  {
    unsigned int v17 = 3;
  }
  unsigned int v48 = 0;
  int v18 = (*(uint64_t (**)(AVVCRecordingEngine *, uint64_t, unsigned int *))(*(void *)this + 192))(this, 1936876401, &v48);
  if (!v18)
  {
    objc_storeStrong((id *)&v72 + v17, @"AVSampleRateConverterQualityKey");
    id v20 = objc_alloc(NSNumber);
    uint64_t v21 = [v20 initWithUnsignedInteger:v48];
    unsigned int v22 = (void *)*((void *)&v56 + v17);
    *((void *)&v56 + v17) = v21;

    ++v17;
    goto LABEL_13;
  }
  if (kAVVCScope)
  {
    uint32x4_t v19 = *(id *)kAVVCScope;
    if (!v19) {
      goto LABEL_13;
    }
  }
  else
  {
    uint32x4_t v19 = MEMORY[0x1E4F14500];
    id v23 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v51 = "AVVCRecordingEngine.mm";
    __int16 v52 = 1024;
    int v53 = 307;
    __int16 v54 = 1024;
    LODWORD(v55) = v18;
    _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty kAudioConverterSampleRateConverterQuality failed: %d", buf, 0x18u);
  }

LABEL_13:
  int v24 = (*(uint64_t (**)(AVVCRecordingEngine *, uint64_t, unsigned int *))(*(void *)this + 192))(this, 1633903204, &v48);
  if (v24)
  {
    if (kAVVCScope)
    {
      unsigned int v25 = *(id *)kAVVCScope;
      if (!v25) {
        goto LABEL_22;
      }
    }
    else
    {
      unsigned int v25 = MEMORY[0x1E4F14500];
      id v29 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v51 = "AVVCRecordingEngine.mm";
      __int16 v52 = 1024;
      int v53 = 317;
      __int16 v54 = 1024;
      LODWORD(v55) = v24;
      _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty kAudioConverterPropertyBitDepthHint failed: %d", buf, 0x18u);
    }
  }
  else
  {
    objc_storeStrong((id *)&v72 + v17, @"AVEncoderBitDepthHintKey");
    id v26 = objc_alloc(NSNumber);
    uint64_t v27 = [v26 initWithUnsignedInteger:v48];
    uint64_t v28 = (void *)*((void *)&v56 + v17);
    *((void *)&v56 + v17) = v27;

    ++v17;
  }
LABEL_22:
  unsigned int v47 = 0;
  int v30 = (*(uint64_t (**)(AVVCRecordingEngine *, uint64_t, unsigned int *))(*(void *)this + 224))(this, 1634820972, &v47);
  if (!v30)
  {
    unsigned int v31 = v47;
    if (v47)
    {
      if (kAVVCScope)
      {
        id v32 = *(id *)kAVVCScope;
        if (!v32) {
          goto LABEL_34;
        }
      }
      else
      {
        id v32 = MEMORY[0x1E4F14500];
        id v34 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        __int16 v51 = "AVVCRecordingEngine.mm";
        __int16 v52 = 1024;
        int v53 = 329;
        __int16 v54 = 1024;
        LODWORD(v55) = v31;
        _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty returned %d for kAudioQueueProperty_ChannelLayout property size", buf, 0x18u);
      }

LABEL_34:
      id v35 = objc_alloc(MEMORY[0x1E4F1CA58]);
      uint64_t v33 = (id) [v35 initWithCapacity:v47];
      uint64_t v36 = [v33 mutableBytes];
      int v37 = (*(uint64_t (**)(AVVCRecordingEngine *, uint64_t, uint64_t, unsigned int *))(*(void *)this + 232))(this, 1634820972, v36, &v47);
      if (v37)
      {
        if (kAVVCScope)
        {
          float v38 = *(id *)kAVVCScope;
          if (!v38) {
            goto LABEL_54;
          }
        }
        else
        {
          float v38 = MEMORY[0x1E4F14500];
          id v41 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          __int16 v51 = "AVVCRecordingEngine.mm";
          __int16 v52 = 1024;
          int v53 = 337;
          __int16 v54 = 1024;
          LODWORD(v55) = v37;
          _os_log_impl(&dword_19D794000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty kAudioQueueProperty_ChannelLayout failed: %d", buf, 0x18u);
        }

        goto LABEL_54;
      }
      if (kAVVCScope)
      {
        int v40 = *(id *)kAVVCScope;
        if (!v40)
        {
LABEL_52:
          if (v33)
          {
            objc_storeStrong((id *)&v72 + v17, @"AVChannelLayoutKey");
            objc_storeStrong((id *)&v56 + v17++, v33);
          }
          goto LABEL_54;
        }
      }
      else
      {
        int v40 = MEMORY[0x1E4F14500];
        id v42 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        __int16 v51 = "AVVCRecordingEngine.mm";
        __int16 v52 = 1024;
        int v53 = 340;
        __int16 v54 = 2048;
        uint64_t v55 = v36;
        _os_log_impl(&dword_19D794000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty returned (%p) for kAudioQueueProperty_ChannelLayout bytes", buf, 0x1Cu);
      }

      goto LABEL_52;
    }
  }
  if (kAVVCScope)
  {
    uint64_t v33 = *(id *)kAVVCScope;
    if (!v33) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v33 = MEMORY[0x1E4F14500];
    id v39 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v51 = "AVVCRecordingEngine.mm";
    __int16 v52 = 1024;
    int v53 = 325;
    __int16 v54 = 1024;
    LODWORD(v55) = v30;
    _os_log_impl(&dword_19D794000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueGetProperty property size of kAudioQueueProperty_ChannelLayout failed: %d OR property size is 0", buf, 0x18u);
  }
LABEL_54:

LABEL_55:
  uint64_t v43 = [objc_alloc(MEMORY[0x1E4F1C9E8]) initWithObjects:&v56 forKeys:&v72 count:v17];
  __int16 v44 = (void *)*((void *)this + 8);
  *((void *)this + 8) = v43;

  for (uint64_t i = 248; i != -8; i -= 8)
  for (uint64_t j = 248; j != -8; j -= 8)

  TraceMethod::~TraceMethod((TraceMethod *)v49);
}

void sub_19D7C1848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  for (uint64_t i = 248; i != -8; i -= 8)
  for (uint64_t j = 248; j != -8; j -= 8)

  TraceMethod::~TraceMethod((TraceMethod *)&a10);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStreamState(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    int v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_11;
    }
  }
  else
  {
    int v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(void *)(a1 + 224);
    if (v6 > 6) {
      uint64_t v7 = "ILLEGAL";
    }
    else {
      uint64_t v7 = off_1E59657E8[v6];
    }
    size_t v8 = off_1E59657E8[a2];
    int v9 = 136315906;
    id v10 = "AVVCRecordingEngine.mm";
    __int16 v11 = 1024;
    int v12 = 367;
    __int16 v13 = 2080;
    uint64_t v14 = v7;
    __int16 v15 = 2080;
    id v16 = v8;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStreamState (%s => %s)", (uint8_t *)&v9, 0x26u);
  }

LABEL_11:
  *(void *)(a1 + 224) = a2;
}

void AVVCRecordingEngine::setRecordErrorStatus(AVVCRecordingEngine *this, unsigned int a2, const char *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_23;
      }
    }
    else
    {
      id v6 = (id)MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    int v9 = v6;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    CAX4CCString::CAX4CCString((CAX4CCString *)v18, a2);
    unsigned int v10 = *((_DWORD *)this + 58);
    if (v10)
    {
      __int16 v11 = v17;
      CAX4CCString::CAX4CCString((CAX4CCString *)v17, v10);
    }
    else
    {
      __int16 v11 = "noErr";
    }
    *(_DWORD *)buf = 136316162;
    id v20 = "AVVCRecordingEngine.mm";
    __int16 v21 = 1024;
    int v22 = 379;
    __int16 v23 = 2080;
    int v24 = v18;
    __int16 v25 = 2080;
    id v26 = (void *)v11;
    __int16 v27 = 2080;
    uint64_t v28 = a3;
    int v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_ERROR;
    goto LABEL_21;
  }
  if (*((_DWORD *)this + 58))
  {
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_23;
      }
    }
    else
    {
      id v7 = (id)MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    int v9 = v7;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    unsigned int v15 = *((_DWORD *)this + 58);
    if (v15)
    {
      id v16 = v18;
      CAX4CCString::CAX4CCString((CAX4CCString *)v18, v15);
    }
    else
    {
      id v16 = (uint8_t *)"noErr";
    }
    *(_DWORD *)buf = 136316162;
    id v20 = "AVVCRecordingEngine.mm";
    __int16 v21 = 1024;
    int v22 = 382;
    __int16 v23 = 2080;
    int v24 = (uint8_t *)"noErr";
    __int16 v25 = 2080;
    id v26 = v16;
    __int16 v27 = 2080;
    uint64_t v28 = a3;
    int v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
LABEL_21:
    _os_log_impl(&dword_19D794000, v12, v13, "%25s:%-5d setRecordErrorStatus: '%s' Previous: '%s' Caller: %s", buf, 0x30u);
LABEL_22:
  }
LABEL_23:
  *((_DWORD *)this + 58) = a2;
}

void sub_19D7C1C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::setRecordBufferDuration(AVVCRecordingEngine *this, double a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v14, "setRecordBufferDuration");
  if (*((uint64_t *)this + 28) < 4)
  {
    if (*((double *)this + 33) == a2)
    {
LABEL_24:
      uint64_t v5 = 0;
      goto LABEL_30;
    }
    if (a2 >= 0.01)
    {
LABEL_22:
      *((double *)this + 3AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = a2;
      if (kAVVCScope)
      {
        int v4 = *(id *)kAVVCScope;
        if (!v4) {
          goto LABEL_24;
        }
      }
      else
      {
        int v4 = MEMORY[0x1E4F14500];
        id v11 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        int v12 = (const char *)*((void *)this + 33);
        *(_DWORD *)buf = 136315650;
        id v16 = "AVVCRecordingEngine.mm";
        __int16 v17 = 1024;
        int v18 = 442;
        __int16 v19 = 2048;
        id v20 = v12;
        _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d setRecordBufferDuration: duration now %.3f", buf, 0x1Cu);
      }
      uint64_t v5 = 0;
      goto LABEL_29;
    }
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_21:
        a2 = 0.01;
        goto LABEL_22;
      }
    }
    else
    {
      id v6 = MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      id v16 = "AVVCRecordingEngine.mm";
      __int16 v17 = 1024;
      int v18 = 424;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d setRecordBufferDuration: specified buffer duration too small -- setting to minimum allowed", buf, 0x12u);
    }

    goto LABEL_21;
  }
  if (!kAVVCScope)
  {
    int v4 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
    goto LABEL_11;
  }
  int v4 = *(id *)kAVVCScope;
  if (v4)
  {
LABEL_11:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      unint64_t v8 = *((void *)this + 28);
      if (v8 > 6) {
        int v9 = "ILLEGAL";
      }
      else {
        int v9 = off_1E59657E8[v8];
      }
      *(_DWORD *)buf = 136315650;
      id v16 = "AVVCRecordingEngine.mm";
      __int16 v17 = 1024;
      int v18 = 416;
      __int16 v19 = 2080;
      id v20 = v9;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d setRecordBufferDuration: Attempting to setRecordBufferDuration while record is active. Stream State(%s)", buf, 0x1Cu);
    }
    uint64_t v5 = 4294955516;
LABEL_29:

    goto LABEL_30;
  }
  uint64_t v5 = 4294955516;
LABEL_30:
  TraceMethod::~TraceMethod((TraceMethod *)v14);
  return v5;
}

void AVVCRecordingEngine::setActivationContextSettings(AVVCRecordingEngine *this, AVVCContextSettings *a2)
{
  int v9 = a2;
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock((std::mutex *)this + 6);
  }
  int v4 = [AVVCContextSettings alloc];
  uint64_t v5 = [(AVVCContextSettings *)v9 activationMode];
  id v6 = [(AVVCContextSettings *)v9 activationDeviceUID];
  uint64_t v7 = [(AVVCContextSettings *)v4 initWithMode:v5 deviceUID:v6];
  unint64_t v8 = (void *)*((void *)this + 36);
  *((void *)this + 36) = v7;

  objc_msgSend(*((id *)this + 36), "setAnnounceCallsEnabled:", -[AVVCContextSettings announceCallsEnabled](v9, "announceCallsEnabled"));
  if (!v3) {
    std::mutex::unlock((std::mutex *)this + 6);
  }
}

void sub_19D7C1FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id AVVCRecordingEngine::getActivationContextSettings(AVVCRecordingEngine *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 384);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock(v2);
  }
  int v4 = (void *)[*((id *)this + 36) copy];
  if (!v3) {
    std::mutex::unlock(v2);
  }

  return v4;
}

void sub_19D7C209C(_Unwind_Exception *exception_object)
{
  if (!v2) {
    std::mutex::unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

void AVVCRecordingEngine::setRecordMode(uint64_t a1, unint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    int v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_14;
    }
  }
  else
  {
    int v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(void *)(a1 + 336);
    if (v6 > 2) {
      uint64_t v7 = "ILLEGAL";
    }
    else {
      uint64_t v7 = off_1E5964848[v6];
    }
    if (a2 > 2) {
      unint64_t v8 = "ILLEGAL";
    }
    else {
      unint64_t v8 = off_1E5964848[a2];
    }
    int v9 = 136315906;
    id v10 = "AVVCRecordingEngine.mm";
    __int16 v11 = 1024;
    int v12 = 573;
    __int16 v13 = 2080;
    id v14 = v7;
    __int16 v15 = 2080;
    id v16 = v8;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set mRecordMode %s > %s", (uint8_t *)&v9, 0x26u);
  }

LABEL_14:
  *(void *)(a1 + 336) = a2;
}

uint64_t AVVCRecordingEngine::isSessionRecording(AVVCRecordingEngine *this)
{
  int v2 = (*(void (**)(AVVCRecordingEngine *, void))(*(void *)this + 64))(this, 0);
  unsigned int v3 = [v2 clientRequestsRecording];

  int v4 = (*(void (**)(AVVCRecordingEngine *, void))(*(void *)this + 64))(this, 0);
  int v5 = [v4 sessionState];

  if (v5 == 7) {
    unsigned int v6 = v3;
  }
  else {
    unsigned int v6 = 0;
  }
  if (*((void *)this + 28) == 5) {
    return v6;
  }
  else {
    return 0;
  }
}

void sub_19D7C22B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStartRecordCompletionAndAudioCallbackBlocks(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 copy];
  unint64_t v8 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v7;

  uint64_t v9 = [v6 copy];
  id v10 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v9;

  if (kAVVCScope)
  {
    id v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_8;
    }
  }
  else
  {
    id v11 = (id)MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  __int16 v13 = v11;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = _Block_copy(*(const void **)(a1 + 88));
    __int16 v15 = _Block_copy(*(const void **)(a1 + 104));
    int v16 = 136315906;
    uint64_t v17 = "AVVCRecordingEngine.mm";
    __int16 v18 = 1024;
    int v19 = 617;
    __int16 v20 = 2048;
    uint64_t v21 = v14;
    __int16 v22 = 2048;
    __int16 v23 = v15;
    _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStartRecordCompletionAndAudioCallbackBlocks: startCompletionBlock(%p). audioCallbackBlock(%p)", (uint8_t *)&v16, 0x26u);
  }
LABEL_8:
}

void sub_19D7C2434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStopRecordCompletionBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 96));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 623;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStopRecordCompletionBlock: stopCompletionBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C2578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setDidStopDelegateCompletionBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 112));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 629;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setDidStopDelegateCompletionBlock: didStopCompletionBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C26B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setEncoderErrorBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 120));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 635;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setEncoderErrorBlock: encoderErrorBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C27F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setSetupEndpointerBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 128));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 641;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setSetupEndpointerBlock: setupEndpointerBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C2938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setCheckForEndpointBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 136));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 647;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setCheckForEndpointBlock: checkForEndpointBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C2A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStopRecordWithRecordLockBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 152));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 653;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStopRecordWithRecordLockBlock: stopRecordWithRecordLockBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C2BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setDestroyRecordEngineWithRecordLockBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 144));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 659;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setDestroyRecordEngineWithRecordLockBlock: destroyRecordEngineWithRecordLockBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C2CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setReconfigureWithRecordLockBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 160));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 665;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setReconfigureWithRecordLockBlock: reconfigureWithRecordLockBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C2E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setStreamInvalidatedBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 168));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 671;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setStreamInvalidatedBlock: streamInvalidatedBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C2F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setHardwareConfigChangedBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 176));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 677;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setHardwareConfigChangedBlock: hardwareConfigChangedBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C30B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setBeginSessionActivateBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 184));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 683;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setBeginSessionActivateBlock: beginSessionActivateBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C31F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::setEndSessionActivateBlock(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = [v3 copy];
  id v5 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v4;

  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    id v6 = (id)MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  unint64_t v8 = v6;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = _Block_copy(*(const void **)(a1 + 192));
    int v10 = 136315650;
    id v11 = "AVVCRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 689;
    __int16 v14 = 2048;
    __int16 v15 = v9;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setEndSessionActivateBlock: endSessionActivateBlock(%p).", (uint8_t *)&v10, 0x1Cu);
  }
LABEL_8:
}

void sub_19D7C3338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::resetCompletionBlocks(AVVCRecordingEngine *this, std::__shared_weak_count *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v11, (uint64_t)this, a2);
  AVVCRecordingEngine::setStartRecordCompletionAndAudioCallbackBlocks(v11, 0, 0);
  AVVCRecordingEngine::setStopRecordCompletionBlock(v11, 0);
  AVVCRecordingEngine::setEncoderErrorBlock(v11, 0);
  AVVCRecordingEngine::setSetupEndpointerBlock(v11, 0);
  AVVCRecordingEngine::setCheckForEndpointBlock(v11, 0);
  AVVCRecordingEngine::setStopRecordWithRecordLockBlock(v11, 0);
  AVVCRecordingEngine::setDestroyRecordEngineWithRecordLockBlock(v11, 0);
  AVVCRecordingEngine::setReconfigureWithRecordLockBlock(v11, 0);
  AVVCRecordingEngine::setStreamInvalidatedBlock(v11, 0);
  AVVCRecordingEngine::setHardwareConfigChangedBlock(v11, 0);
  AVVCRecordingEngine::setBeginSessionActivateBlock(v11, 0);
  AVVCRecordingEngine::setEndSessionActivateBlock(v11, 0);
  if (!kAVVCScope)
  {
    id v2 = (id)MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
LABEL_5:
    uint64_t v4 = v2;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
LABEL_16:

      goto LABEL_17;
    }
    uint64_t v5 = v11;
    id v6 = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v5)
      {
        id v7 = NSString;
        uint64_t v8 = *(void *)(v5 + 272);
        uint64_t v9 = v6->__shared_owners_ + 1;
LABEL_11:
        int v10 = [v7 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v5, v8, v9];
LABEL_13:
        *(_DWORD *)buf = 136315650;
        __int16 v14 = "AVVCRecordingEngine.mm";
        __int16 v15 = 1024;
        int v16 = 707;
        __int16 v17 = 2112;
        __int16 v18 = v10;
        _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reset completion blocks to nil for engine[%@]", buf, 0x1Cu);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }

        goto LABEL_16;
      }
    }
    else if (v11)
    {
      uint64_t v9 = 0;
      id v7 = NSString;
      uint64_t v8 = *(void *)(v11 + 272);
      goto LABEL_11;
    }
    int v10 = @"(0x0) use_count:0";
    goto LABEL_13;
  }
  id v2 = *(id *)kAVVCScope;
  if (v2) {
    goto LABEL_5;
  }
LABEL_17:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_19D7C3574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }

  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::avvcAudioBufferReceived(AVVCRecordingEngine *this, AVVCAudioBuffer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2;
  uint64_t v7 = *((void *)this + 13);
  if (v7) {
    (*(void (**)(uint64_t, void, AVVCAudioBuffer *, uint64_t, uint64_t))(v7 + 16))(v7, *((void *)this + 34), v8, a3, a4);
  }
}

void sub_19D7C3628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::audioQueueBufferReceived(AVVCRecordingEngine *this, AudioQueueBuffer *a2)
{
}

void sub_19D7C3728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::audioBufferListReceived(AVVCRecordingEngine *this, AudioBufferList *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_19D7C38F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::myAudioQueueBufferReceived(AVVCRecordingEngine *this, MyAudioQueueBuffer *a2, uint64_t a3)
{
  a2->var11 = *((unsigned char *)this + 328);
  uint64_t v4 = [[AVVCAudioBuffer alloc] initWithAudioQueueBuffer:a2 channels:*((unsigned int *)this + 13) timeStamp:a3];
  AVVCRecordingEngine::avvcAudioBufferReceived(this, v4, 0, 1);
}

void sub_19D7C3994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::lpcmAudioQueueBufferReceivedForNonLPCMClientFormat(AVVCRecordingEngine *this, AudioQueueBuffer *a2, unint64_t a3, AudioStreamBasicDescription *a4)
{
}

void sub_19D7C3A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN19AVVCRecordingEngine34serializedUpdateStreamStoppedStateEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 168))();
}

BOOL AVVCRecordingEngine::if_running_then(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v4 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock((std::mutex *)(a1 + 448));
  }
  uint64_t v5 = *(void *)(a1 + 224);
  if (v5 >= 4)
  {
    v3[2](v3);
    goto LABEL_17;
  }
  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    id v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = *(void *)(a1 + 224);
    if (v8 > 6) {
      uint64_t v9 = "ILLEGAL";
    }
    else {
      uint64_t v9 = off_1E59657E8[v8];
    }
    int v11 = 136315650;
    __int16 v12 = "AVVCRecordingEngine.mm";
    __int16 v13 = 1024;
    int v14 = 856;
    __int16 v15 = 2080;
    int v16 = v9;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring action, since streamState is already %s", (uint8_t *)&v11, 0x1Cu);
  }

LABEL_17:
  if (!v4) {
    std::mutex::unlock((std::mutex *)(a1 + 448));
  }

  return v5 > 3;
}

void sub_19D7C3C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *AVVCRecordingEngine::stopRecord(AVVCRecordingEngine *this, char a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  switch(*((void *)this + 28))
  {
    case 0:
    case 1:
      if (kAVVCScope)
      {
        uint64_t v5 = *(id *)kAVVCScope;
        if (!v5) {
          return 4294955515;
        }
      }
      else
      {
        uint64_t v5 = MEMORY[0x1E4F14500];
        id v12 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        unint64_t v13 = *((void *)this + 28);
        if (v13 > 6) {
          int v14 = "ILLEGAL";
        }
        else {
          int v14 = off_1E59657E8[v13];
        }
        int v21 = 136315650;
        __int16 v22 = "AVVCRecordingEngine.mm";
        __int16 v23 = 1024;
        int v24 = 872;
        __int16 v25 = 2080;
        id v26 = v14;
        _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Attempt to stop on an %s stream.", (uint8_t *)&v21, 0x1Cu);
      }

      return 4294955515;
    case 2:
    case 3:
    case 6:
      if (kAVVCScope)
      {
        int v4 = *(id *)kAVVCScope;
        if (!v4) {
          return v4;
        }
      }
      else
      {
        int v4 = MEMORY[0x1E4F14500];
        id v6 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v7 = *((void *)this + 28);
        if (v7 > 6) {
          unint64_t v8 = "ILLEGAL";
        }
        else {
          unint64_t v8 = off_1E59657E8[v7];
        }
        int v21 = 136315650;
        __int16 v22 = "AVVCRecordingEngine.mm";
        __int16 v23 = 1024;
        int v24 = 879;
        __int16 v25 = 2080;
        id v26 = v8;
        _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: Attempt to stop while stream is already %s. No-op.", (uint8_t *)&v21, 0x1Cu);
      }

      return 0;
    case 4:
      if (kAVVCScope)
      {
        uint64_t v9 = *(id *)kAVVCScope;
        if (!v9) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v9 = MEMORY[0x1E4F14500];
        id v15 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 136315394;
        __int16 v22 = "AVVCRecordingEngine.mm";
        __int16 v23 = 1024;
        int v24 = 893;
        _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: Attempt to stop while stream is about to start. NotifyStartBeforeStop", (uint8_t *)&v21, 0x12u);
      }

LABEL_36:
      int v11 = 1;
      *((unsigned char *)this + 80) = 1;
      goto LABEL_42;
    case 5:
      if (!*((_DWORD *)this + 58)) {
        goto LABEL_19;
      }
      if (kAVVCScope)
      {
        int v10 = *(id *)kAVVCScope;
        if (!v10) {
          goto LABEL_41;
        }
      }
      else
      {
        int v10 = MEMORY[0x1E4F14500];
        id v16 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *((_DWORD *)this + 58);
        int v21 = 136315650;
        __int16 v22 = "AVVCRecordingEngine.mm";
        __int16 v23 = 1024;
        int v24 = 886;
        __int16 v25 = 1024;
        LODWORD(v26) = v17;
        _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: an error : %d  occurred while recording and we need to synthesize doneRecording", (uint8_t *)&v21, 0x18u);
      }

LABEL_41:
      int v11 = 1;
LABEL_42:
      *((unsigned char *)this + 25AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = a2;
      int v4 = (*(uint64_t (**)(AVVCRecordingEngine *))(*(void *)this + 104))(this);
      if (v4)
      {
        if (kAVVCScope)
        {
          __int16 v18 = *(id *)kAVVCScope;
          if (!v18)
          {
LABEL_52:
            AVVCRecordingEngine::setRecordErrorStatus(this, v4, "stopRecord");
            goto LABEL_53;
          }
        }
        else
        {
          __int16 v18 = MEMORY[0x1E4F14500];
          id v19 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          int v21 = 136315650;
          __int16 v22 = "AVVCRecordingEngine.mm";
          __int16 v23 = 1024;
          int v24 = 908;
          __int16 v25 = 1024;
          LODWORD(v26) = v4;
          _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Error stopping record engine: %d", (uint8_t *)&v21, 0x18u);
        }

        goto LABEL_52;
      }
      if (!v11) {
        return 0;
      }
LABEL_53:
      AVVCRecordingEngine::doneRecording(this);
      return v4;
    default:
LABEL_19:
      int v11 = 0;
      goto LABEL_42;
  }
}

void AVVCRecordingEngine::doneRecording(AVVCRecordingEngine *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v23, "doneRecording");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v21, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  *(void *)buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZN19AVVCRecordingEngine34serializedUpdateStreamStoppedStateEv_block_invoke;
  *(void *)&buf[24] = &__block_descriptor_40_e5_v8__0l;
  *(void *)&uint8_t buf[32] = v21;
  if (!AVVCRecordingEngine::if_running_then(v21, buf)) {
    goto LABEL_36;
  }
  (*(void (**)(uint64_t))(*(void *)v21 + 280))(v21);
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      uint64_t v2 = *(id *)kAVVCScope;
      if (v2)
      {
        id v3 = v2;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AVVCRecordingEngine.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 981;
          _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d doneRecording: resetting mRecordIsStopping and mRecordIsPrimed", buf, 0x12u);
        }
      }
    }
  }
  uint64_t v4 = v21;
  *(unsigned char *)(v21 + 252) = 0;
  (*(void (**)(uint64_t))(*(void *)v4 + 136))(v4);
  uint64_t v5 = v21;
  int v6 = *(_DWORD *)(v21 + 232);
  if (v6)
  {
    unint64_t v7 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(v21 + 232) userInfo:0];
    uint64_t v5 = v21;
  }
  else
  {
    unint64_t v7 = 0;
  }
  if (*(unsigned char *)(v5 + 80))
  {
    if (kAVVCScope)
    {
      id v8 = *(id *)kAVVCScope;
      if (!v8)
      {
LABEL_19:
        uint64_t v12 = *(void *)(v5 + 88);
        if (v12)
        {
          (*(void (**)(uint64_t, void, BOOL, void, void *))(v12 + 16))(v12, *(void *)(v5 + 272), v6 == 0, *(void *)(v5 + 224), v7);
          uint64_t v5 = v21;
        }
        *(unsigned char *)(v5 + 80) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v8 = (id)MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    int v10 = v8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = _Block_copy(*((const void **)this + 11));
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AVVCRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 993;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v11;
      *(_WORD *)&unsigned char buf[28] = 2112;
      *(void *)&buf[30] = v7;
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d doneRecording: calling mStartRecordCompletionBlock(%p) (notify start before stop). Error: %@", buf, 0x26u);
    }
    uint64_t v5 = v21;
    goto LABEL_19;
  }
LABEL_22:
  if (!kAVVCScope)
  {
    id v13 = (id)MEMORY[0x1E4F14500];
    id v14 = MEMORY[0x1E4F14500];
    goto LABEL_26;
  }
  id v13 = *(id *)kAVVCScope;
  if (v13)
  {
LABEL_26:
    id v15 = v13;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = _Block_copy(*((const void **)this + 12));
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AVVCRecordingEngine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1000;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v16;
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d calling mStopRecordCompletionBlock(%p)", buf, 0x1Cu);
    }
    uint64_t v5 = v21;
  }
  uint64_t v17 = *(void *)(v5 + 96);
  if (v17)
  {
    (*(void (**)(uint64_t, void, BOOL, void, void *))(v17 + 16))(v17, *(void *)(v5 + 272), v6 == 0, *(void *)(v5 + 224), v7);
    uint64_t v5 = v21;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 288))(v5);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 320))(v21) == 2)
  {
    __int16 v18 = +[AVVCMetricsManager sharedManager];
    [v18 resetAudioIssueDetector];

    id v19 = +[AVVCMetricsManager sharedManager];
    [v19 disposeADAM];
  }
  uint64_t v20 = *(void *)(v21 + 112);
  if (v20)
  {
    (*(void (**)(void))(v20 + 16))();
    AVVCRecordingEngine::setDidStopDelegateCompletionBlock(v21, 0);
  }

LABEL_36:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v23);
}

void sub_19D7C45AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);

  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::startedRecording(AVVCRecordingEngine *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v12, "startedRecording");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v10, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  int v2 = *(_DWORD *)(v10 + 232);
  if (v2)
  {
    id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(v10 + 232) userInfo:0];
  }
  else
  {
    AVVCRecordingEngine::setStreamState(v10, 5);
    id v3 = 0;
  }
  uint64_t v4 = (void *)v10;
  *(unsigned char *)(v10 + 80) = 0;
  if (kAVVCScope)
  {
    id v5 = *(id *)kAVVCScope;
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    id v5 = (id)MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  unint64_t v7 = v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = _Block_copy(*((const void **)this + 11));
    *(_DWORD *)buf = 136315650;
    id v14 = "AVVCRecordingEngine.mm";
    __int16 v15 = 1024;
    int v16 = 946;
    __int16 v17 = 2048;
    __int16 v18 = v8;
    _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d calling completion block(%p)", buf, 0x1Cu);
  }
  uint64_t v4 = (void *)v10;
LABEL_11:
  uint64_t v9 = v4[11];
  if (v9)
  {
    (*(void (**)(uint64_t, void, BOOL, void, void *))(v9 + 16))(v9, v4[34], v2 == 0, v4[28], v3);
    uint64_t v4 = (void *)v10;
  }
  (*(void (**)(void *))(*v4 + 288))(v4);

  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v12);
}

void sub_19D7C47F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void AVVCRecordingEngine::checkForEndpoint(AVVCRecordingEngine *this, AudioQueueBuffer *a2, float *a3)
{
  uint64_t v4 = *((void *)this + 28);
  BOOL v5 = v4 == 6 || v4 <= 3;
  if (!v5 || *((unsigned char *)this + 253))
  {
    if (*((void *)this + 17))
    {
      (*(void (**)(AVVCRecordingEngine *, double))(*(void *)this + 184))(this, *((double *)this + 3));
      if ((*(unsigned int (**)(void))(*((void *)this + 17) + 16))())
      {
        AVVCRecordingEngine::setRecordErrorStatus(this, 0xFFFFD1F3, "checkForEndpoint");
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v9, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 3321888768;
        _OWORD v7[2] = ___ZN19AVVCRecordingEngine16checkForEndpointEP16AudioQueueBufferPfj_block_invoke;
        v7[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
        uint64_t v6 = v9;
        v7[4] = v9;
        id v8 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void *, const char *))(*(void *)v6 + 360))(v6, v7, "checkForEndpoint");
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
    }
  }
}

void sub_19D7C49A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19AVVCRecordingEngine16checkForEndpointEP16AudioQueueBufferPfj_block_invoke(uint64_t a1)
{
}

void __destroy_helper_block_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void AVVCRecordingEngine::stopRecordWithRecordLock(AVVCRecordingEngine *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v1 = (void (*)(void))*((void *)this + 2);
    v1();
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v2 = *(id *)kAVVCScope;
      if (!v2) {
        return;
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v3 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      BOOL v5 = "AVVCRecordingEngine.mm";
      __int16 v6 = 1024;
      int v7 = 1057;
      _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordWithRecordLockBlock is nil !", (uint8_t *)&v4, 0x12u);
    }
  }
}

uint64_t AVVCRecordingEngine::reconfigureWithRecordLock(AVVCRecordingEngine *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      if (!v3) {
        return 0;
      }
    }
    else
    {
      id v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      __int16 v6 = "AVVCRecordingEngine.mm";
      __int16 v7 = 1024;
      int v8 = 1081;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d reconfigureWithRecordLockBlock is nil !", (uint8_t *)&v5, 0x12u);
    }

    return 0;
  }
  uint64_t v1 = (uint64_t (*)(AVVCRecordingEngine *, void))*((void *)this + 2);

  return v1(this, 0);
}

uint64_t AVVCRecordingEngine::getSessionProperties(AVVCRecordingEngine *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  int v40 = 4100;
  char v41 = 1;
  long long v42 = 0u;
  long long v43 = 0u;
  kdebug_trace();
  ElapsedTime::ElapsedTime((ElapsedTime *)v52, "getSessionProperties", 0, 0);
  TraceMethod::TraceMethod((TraceMethod *)v39, "getSessionProperties");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v37, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t v2 = (*(void (**)(uint64_t *, void))(*v37 + 64))(v37, 0);
  ProfileMetrics(&cfstr_AvvcProfilePro_0.isa);
  [v2 outputLatency];
  float v4 = v3;
  if (v4 == 0.0)
  {
    if (kAVVCScope)
    {
      int v5 = *(id *)kAVVCScope;
      if (!v5) {
        goto LABEL_9;
      }
    }
    else
    {
      int v5 = MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v45 = "AVVCRecordingEngine.mm";
      __int16 v46 = 1024;
      int v47 = 1296;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: unexpected 0.0 value for output latency", buf, 0x12u);
    }
  }
LABEL_9:
  double v7 = 0.0;
  if (MGGetSInt32Answer() == 4
    || ([v2 inputLatency], *(float *)&double v8 = v8, v7 = *(float *)&v8, *(float *)&v8 == 0.0))
  {
    if (kAVVCScope)
    {
      uint64_t v9 = *(id *)kAVVCScope;
      if (!v9) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v45 = "AVVCRecordingEngine.mm";
      __int16 v46 = 1024;
      int v47 = 1301;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: working around bad input latency value for now", buf, 0x12u);
    }
  }
LABEL_18:
  if (kAVVCScope)
  {
    int v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_25;
    }
  }
  else
  {
    int v11 = MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    unsigned int v45 = "AVVCRecordingEngine.mm";
    __int16 v46 = 1024;
    int v47 = 1303;
    __int16 v48 = 2048;
    double v49 = v7;
    __int16 v50 = 2048;
    double v51 = v4;
    _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: input HW latency: %g output HW latency: %g", buf, 0x26u);
  }

LABEL_25:
  if (MGGetSInt32Answer() == 4)
  {
    double v13 = 16000.0;
    if (MGGetSInt32Answer() != 4 || !MGGetBoolAnswer()) {
      goto LABEL_50;
    }
  }
  if ((*(unsigned int (**)(uint64_t *))(*v37 + 320))(v37) == 2)
  {
    [v2 speechDetectionDeviceSampleRate];
    double v13 = v14;
    if (kAVVCScope)
    {
      __int16 v15 = *(id *)kAVVCScope;
      if (!v15) {
        goto LABEL_42;
      }
    }
    else
    {
      __int16 v15 = MEMORY[0x1E4F14500];
      id v17 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v45 = "AVVCRecordingEngine.mm";
      __int16 v46 = 1024;
      int v47 = 1311;
      __int16 v48 = 2048;
      double v49 = v13;
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: input HW sampling rate %lf", buf, 0x1Cu);
    }

LABEL_42:
    if (v13 == 0.0) {
      goto LABEL_43;
    }
    goto LABEL_50;
  }
  if ((*(unsigned int (**)(uint64_t *))(*v37 + 320))(v37) != 1
    && (*(unsigned int (**)(uint64_t *))(*v37 + 320))(v37) != 3
    && (*(unsigned int (**)(uint64_t *))(*v37 + 320))(v37) != 4)
  {
LABEL_43:
    if (kAVVCScope)
    {
      __int16 v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_61:
        uint64_t v20 = 4294955511;
        goto LABEL_80;
      }
    }
    else
    {
      __int16 v18 = MEMORY[0x1E4F14500];
      id v25 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v45 = "AVVCRecordingEngine.mm";
      __int16 v46 = 1024;
      int v47 = 1325;
      _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d getSessionProperties: Error getting input hardware sample rate", buf, 0x12u);
    }

    goto LABEL_61;
  }
  double v13 = 16000.0;
  (*(void (**)(uint64_t *, double))(*v37 + 40))(v37, 16000.0);
  if (kAVVCScope)
  {
    int v16 = *(id *)kAVVCScope;
    if (!v16) {
      goto LABEL_50;
    }
  }
  else
  {
    int v16 = MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v45 = "AVVCRecordingEngine.mm";
    __int16 v46 = 1024;
    int v47 = 1322;
    __int16 v48 = 2048;
    double v49 = 16000.0;
    _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: plugin mode - resetting to default HW sampling rate %lf", buf, 0x1Cu);
  }

LABEL_50:
  uint64_t v20 = (*(uint64_t (**)(uint64_t *))(*v37 + 72))(v37);
  if (v20) {
    goto LABEL_80;
  }
  (*(void (**)(uint64_t *))(*v37 + 48))(v37);
  uint64_t v21 = *v37;
  if (v22 != 0.0)
  {
    if (v13 == (*(double (**)(void))(v21 + 48))())
    {
      if (kAVVCScope)
      {
        uint64_t v20 = (uint64_t)*(id *)kAVVCScope;
        if (!v20) {
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v20 = MEMORY[0x1E4F14500];
        id v31 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        unsigned int v45 = "AVVCRecordingEngine.mm";
        __int16 v46 = 1024;
        int v47 = 1370;
        _os_log_impl(&dword_19D794000, (os_log_t)v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d getSessionProperties: no change to HW rate or route -- nothing to do here", buf, 0x12u);
      }

      goto LABEL_78;
    }
    if (kAVVCScope)
    {
      id v24 = *(id *)kAVVCScope;
      if (!v24) {
        goto LABEL_69;
      }
    }
    else
    {
      id v24 = (id)MEMORY[0x1E4F14500];
      id v26 = MEMORY[0x1E4F14500];
    }
    uint64_t v27 = v24;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      double v28 = (*(double (**)(uint64_t *))(*v37 + 48))(v37);
      *(_DWORD *)buf = 136315906;
      unsigned int v45 = "AVVCRecordingEngine.mm";
      __int16 v46 = 1024;
      int v47 = 1351;
      __int16 v48 = 2048;
      double v49 = v28;
      __int16 v50 = 2048;
      double v51 = v13;
      _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: Input sample rate changed from %f to %f", buf, 0x26u);
    }

LABEL_69:
    (*(void (**)(uint64_t *, double))(*v37 + 40))(v37, v13);
    uint64_t v29 = (AVVCRecordingEngine *)v37;
    if ((v37[28] & 0xFFFFFFFFFFFFFFFELL) == 4 && v37[42] != 2)
    {
      if (kAVVCScope)
      {
        id v30 = *(id *)kAVVCScope;
        if (!v30)
        {
LABEL_87:
          AVVCRecordingEngine::setRecordErrorStatus(v29, 0xFFFFD1F5, "getSessionProperties");
          AVVCRecordingEngine::stopRecordWithRecordLock((AVVCRecordingEngine *)v37[19]);
          uint64_t v36 = v37;
          v37[3] = qword_19D8B1D00[v13 > 8000.0];
          uint64_t v20 = AVVCRecordingEngine::reconfigureWithRecordLock((AVVCRecordingEngine *)v36[20]);
          goto LABEL_79;
        }
      }
      else
      {
        id v30 = (id)MEMORY[0x1E4F14500];
        id v33 = MEMORY[0x1E4F14500];
      }
      id v34 = v30;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        double v35 = (*(double (**)(AVVCRecordingEngine *))(*(void *)v29 + 48))(v29);
        *(_DWORD *)buf = 136315906;
        unsigned int v45 = "AVVCRecordingEngine.mm";
        __int16 v46 = 1024;
        int v47 = 1360;
        __int16 v48 = 2048;
        double v49 = v35;
        __int16 v50 = 2048;
        double v51 = v13;
        _os_log_impl(&dword_19D794000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getSessionProperties: sample rate changed from %f to %f - while record is active -- stopping and reconfiguring audio", buf, 0x26u);
      }

      uint64_t v29 = (AVVCRecordingEngine *)v37;
      goto LABEL_87;
    }
LABEL_78:
    uint64_t v20 = 0;
    goto LABEL_79;
  }
  (*(void (**)(double))(v21 + 40))(v13);
  uint64_t v20 = 0;
  BOOL v23 = (*(double (**)(uint64_t *))(*v37 + 48))(v37) > 8000.0;
  v37[3] = qword_19D8B1D00[v23];
LABEL_79:
  ProfileMetrics(&cfstr_AvvcProfilePro_1.isa);
LABEL_80:

  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v39);
  ElapsedTime::~ElapsedTime((ElapsedTime *)v52);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v40);
  return v20;
}

void sub_19D7C569C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);

  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  TraceMethod::~TraceMethod((TraceMethod *)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va2);
  TraceWrapper::~TraceWrapper((TraceWrapper *)va1);
  _Unwind_Resume(a1);
}

uint64_t AVVCRecordingEngine::setSessionActive(AVVCRecordingEngine *this, uint64_t a2, BOOL *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v47 = 4099;
  char v48 = 1;
  long long v49 = 0u;
  long long v50 = 0u;
  kdebug_trace();
  ElapsedTime::ElapsedTime((ElapsedTime *)v57, "setSessionActive", "setSessionActive", 0);
  TraceMethod::TraceMethod((TraceMethod *)v46, "setSessionActive");
  *a3 = 0;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v44, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t v6 = (*(void (**)(AVVCRecordingEngine *, void))(*(void *)v44 + 64))(v44, 0);
  int v7 = [v6 sessionState];
  if (!v7)
  {
    if (kAVVCScope)
    {
      uint64_t v9 = *(id *)kAVVCScope;
      if (!v9)
      {
        uint64_t SessionProperties = 4294955515;
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4F14500];
      id v12 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v52 = "AVVCRecordingEngine.mm";
      __int16 v53 = 1024;
      int v54 = 1466;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d setSessionActive: Error! Attemtping to activate a session that is not configured", buf, 0x12u);
    }
    uint64_t SessionProperties = 4294955515;
LABEL_50:

    uint64_t v9 = 0;
    goto LABEL_78;
  }
  if (v7 > 4)
  {
    if (kAVVCScope)
    {
      id v11 = *(id *)kAVVCScope;
      if (!v11)
      {
        uint64_t v9 = 0;
        uint64_t SessionProperties = 0;
        goto LABEL_78;
      }
    }
    else
    {
      id v11 = (id)MEMORY[0x1E4F14500];
      id v18 = MEMORY[0x1E4F14500];
    }
    uint64_t v9 = v11;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = [v6 sessionState];
      if (v19 > 7) {
        uint64_t v20 = "ILLEGAL";
      }
      else {
        uint64_t v20 = off_1E59658A8[v19];
      }
      *(_DWORD *)buf = 136315650;
      __int16 v52 = "AVVCRecordingEngine.mm";
      __int16 v53 = 1024;
      int v54 = 1548;
      __int16 v55 = 2080;
      long long v56 = v20;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setSessionActive(true): session state already %s -- no-op", buf, 0x1Cu);
    }

    uint64_t SessionProperties = 0;
    goto LABEL_50;
  }
  if (kAVVCScope)
  {
    uint64_t v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F14500];
    id v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = "Activating";
    __int16 v52 = "AVVCRecordingEngine.mm";
    *(_DWORD *)buf = 136315650;
    if (a2) {
      uint64_t v14 = "Prewarming";
    }
    __int16 v53 = 1024;
    int v54 = 1472;
    __int16 v55 = 2080;
    long long v56 = v14;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: %s session ####", buf, 0x1Cu);
  }

LABEL_22:
  uint64_t v15 = *((void *)this + 23);
  if (v15) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v15, 1);
  }
  id v43 = 0;
  char v16 = [v6 activateAudioSessionWithPrewarm:a2 error:&v43];
  uint64_t v9 = v43;
  uint64_t SessionProperties = [v9 code];
  *a3 = v16 ^ 1;
  if (kAVVCScope)
  {
    uint64_t v17 = *(id *)kAVVCScope;
    if (!v17) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4F14500];
    id v21 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v52 = "AVVCRecordingEngine.mm";
    __int16 v53 = 1024;
    int v54 = 1482;
    _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setSessionActive(true): AVAudioSession:setActive has returned", buf, 0x12u);
  }

LABEL_35:
  if (SessionProperties) {
    goto LABEL_63;
  }
  if ([v6 forceGetSessionProperties])
  {
    [v6 setForceGetSessionProperties:0];
    if (kAVVCScope)
    {
      if (*(unsigned char *)(kAVVCScope + 8))
      {
        double v22 = *(id *)kAVVCScope;
        if (v22)
        {
          BOOL v23 = v22;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            __int16 v52 = "AVVCRecordingEngine.mm";
            __int16 v53 = 1024;
            int v54 = 1494;
            _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d setSessionActive(true): force of getSessionProperties requested", buf, 0x12u);
          }
        }
      }
    }
    uint64_t SessionProperties = AVVCRecordingEngine::getSessionProperties(v44);
    if (!SessionProperties) {
      goto LABEL_76;
    }
    if (kAVVCScope)
    {
      id v24 = *(id *)kAVVCScope;
      if (!v24) {
        goto LABEL_63;
      }
    }
    else
    {
      id v24 = MEMORY[0x1E4F14500];
      id v28 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v52 = "AVVCRecordingEngine.mm";
      __int16 v53 = 1024;
      int v54 = 1496;
      __int16 v55 = 1024;
      LODWORD(v56) = SessionProperties;
      _os_log_impl(&dword_19D794000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d setSessionActive(true): force of getSessionProperties requested - returned error : %d", buf, 0x18u);
    }
  }
  else
  {
    uint64_t v25 = *((void *)v44 + 47);
    long long v42 = 0;
    AVVCRouteManager::getRecordRoute(v25, &v42);
    uint64_t SessionProperties = (*(uint64_t (**)(AVVCRecordingEngine *))(*(void *)v44 + 72))(v44);
    char v41 = 0;
    AVVCRouteManager::getRecordRoute(v25, (void **)&v41);
    uint64_t v27 = v41;
    id v26 = v42;
    if (!SessionProperties)
    {
      if ([v41 isEqualToString:v42])
      {
        uint64_t SessionProperties = 0;
      }
      else
      {
        uint64_t v29 = CALog::LogObjIfEnabled(5, kAVVCScope);
        id v30 = v29;
        if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          __int16 v52 = "AVVCRecordingEngine.mm";
          __int16 v53 = 1024;
          int v54 = 1515;
          __int16 v55 = 2112;
          long long v56 = v27;
          _os_log_impl(&dword_19D794000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d setSessionActive(true): Route change when we went active: %@ -- getting properties", buf, 0x1Cu);
        }

        uint64_t SessionProperties = AVVCRecordingEngine::getSessionProperties(v44);
      }
    }
  }
LABEL_63:
  if (SessionProperties != -11795)
  {
    if (SessionProperties == 561017449)
    {
      id v31 = (void *)MEMORY[0x19F3AC180]();
      id v32 = [v6 getActiveSessionDisplayIDsAsString];
      id v33 = +[AVVCMetricsManager sharedManager];
      objc_msgSend(v33, "logSessionMetric:value:category:type:reporterID:", @"avvcActiveHigherPriorityProcessName", v32, 1, 6, objc_msgSend(v6, "reporterID"));

      uint64_t SessionProperties = 561017449;
    }
    goto LABEL_76;
  }
  if (!a2)
  {
    uint64_t SessionProperties = 4294955501;
    goto LABEL_76;
  }
  if (!kAVVCScope)
  {
    id v34 = MEMORY[0x1E4F14500];
    id v35 = MEMORY[0x1E4F14500];
    goto LABEL_72;
  }
  id v34 = *(id *)kAVVCScope;
  if (v34)
  {
LABEL_72:
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v52 = "AVVCRecordingEngine.mm";
      __int16 v53 = 1024;
      int v54 = 1533;
      __int16 v55 = 1024;
      LODWORD(v56) = -11795;
      _os_log_impl(&dword_19D794000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d setSessionActive(false): Deactivating session due to error: %d", buf, 0x18u);
    }
  }
  int v40 = v9;
  [v6 deactivateAudioSessionWithOptions:0x2000 error:&v40];
  uint64_t v36 = v40;

  uint64_t SessionProperties = 4294955501;
  uint64_t v9 = v36;
LABEL_76:
  int v37 = [v6 sessionState];
  uint64_t v38 = *((void *)this + 24);
  if (v38) {
    (*(void (**)(uint64_t, BOOL))(v38 + 16))(v38, v37 == 7);
  }
LABEL_78:

  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }

  TraceMethod::~TraceMethod((TraceMethod *)v46);
  ElapsedTime::~ElapsedTime((ElapsedTime *)v57);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v47);
  return SessionProperties;
}

void sub_19D7C5F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }

  TraceMethod::~TraceMethod((TraceMethod *)&a15);
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a27);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a17);
  _Unwind_Resume(a1);
}

id CALog::LogObjIfEnabled(int a1, uint64_t a2)
{
  if (a1 >= 6)
  {
    if (!a2 || (*(unsigned char *)(a2 + 8) & 1) == 0)
    {
      id v2 = 0;
      goto LABEL_8;
    }
  }
  else if (!a2)
  {
    id v2 = (id)MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
    goto LABEL_8;
  }
  id v2 = *(id *)a2;
LABEL_8:

  return v2;
}

NSObject *AVVCRecordingEngine::canStartKeepAliveQueue(AVVCRecordingEngine *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (isDarwinOSProduct(void)::onceToken != -1) {
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
  }
  if (isDarwinOSProduct(void)::isDarwinOS)
  {
    if (kAVVCScope)
    {
      uint64_t result = *(id *)kAVVCScope;
      id v3 = result;
      if (!result) {
        return result;
      }
    }
    else
    {
      id v3 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "AVVCRecordingEngine.mm";
      __int16 v11 = 1024;
      int v12 = 1562;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d canStartKeepAliveQueue: KeepAliveQueue not available on darwinos", (uint8_t *)&v9, 0x12u);
    }

    return 0;
  }
  else
  {
    float v4 = (*(void (**)(AVVCRecordingEngine *, void))(*(void *)this + 64))(this, 0);
    int v5 = [v4 sessionState];

    uint64_t v6 = *((void *)this + 28);
    LODWORD(result) = AVVCRouteManager::isOutputHandsFree(*((id **)this + 47));
    if (v5 == 7 && v6 == 5) {
      return result;
    }
    else {
      return 0;
    }
  }
}

void sub_19D7C61D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7C625C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7C6300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7C63AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D7C64A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7C6528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7C65B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7C6658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7C6700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7C67A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CADeprecated::CAMutex::Locker::~Locker(CADeprecated::CAMutex::Locker *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

void CADeprecated::XMachPortServicer::DispatchImpl::~DispatchImpl(CADeprecated::XMachPortServicer::DispatchImpl *this)
{
  CADeprecated::XMachPortServicer::DispatchImpl::~DispatchImpl(this);

  JUMPOUT(0x19F3ABB30);
}

{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  void block[5];

  *(void *)this = &unk_1EEFA74E0;
  id v2 = *((void *)this + 1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN12CADeprecated17XMachPortServicer12DispatchImplD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_7;
  void block[4] = this;
  dispatch_sync(v2, block);
  id v3 = *((void *)this + 2);
  if (v3) {
    dispatch_release(v3);
  }
  float v4 = *((void *)this + 1);
  if (v4) {
    dispatch_release(v4);
  }
}

void ___ZN12CADeprecated17XMachPortServicer12DispatchImplD2Ev_block_invoke(uint64_t a1)
{
}

atomic_uint *CADeprecated::XMachReceivePort::SetMachPort(atomic_uint *this)
{
  mach_port_name_t v1 = atomic_exchange(this, 0);
  if (v1)
  {
    id v2 = (ipc_space_t *)MEMORY[0x1E4F14960];
    mach_port_mod_refs(*MEMORY[0x1E4F14960], v1, 1u, -1);
    ipc_space_t v3 = *v2;
    return (atomic_uint *)mach_port_deallocate(v3, v1);
  }
  return this;
}

void CADeprecated::XMachReceivePort::~XMachReceivePort(CADeprecated::XMachReceivePort *this)
{
}

BOOL AVAudioMixingImpl::SetOcclusion(AVAudioMixingImpl *this, float a2)
{
  if (fabsf(a2) == INFINITY) {
    a2 = -100.0;
  }
  float var11 = this->var11;
  if (var11 != a2)
  {
    float v3 = 0.0;
    if (a2 < 0.0) {
      float v3 = a2;
    }
    if (a2 <= -100.0) {
      float v3 = -100.0;
    }
    this->float var11 = v3;
  }
  return var11 != a2;
}

BOOL AVAudioMixingImpl::SetObstruction(AVAudioMixingImpl *this, float a2)
{
  if (fabsf(a2) == INFINITY) {
    a2 = -100.0;
  }
  float var10 = this->var10;
  if (var10 != a2)
  {
    float v3 = 0.0;
    if (a2 < 0.0) {
      float v3 = a2;
    }
    if (a2 <= -100.0) {
      float v3 = -100.0;
    }
    this->float var10 = v3;
  }
  return var10 != a2;
}

uint64_t AVAudioMixingImpl::SetPosition(AVAudioMixingImpl *this, AVAudio3DPoint a2)
{
  if (this->var9.x == a2.x && this->var9.y == a2.y && this->var9.z == a2.z) {
    return 0;
  }
  this->var9 = a2;
  return 1;
}

BOOL AVAudioMixingImpl::SetReverbBlend(AVAudioMixingImpl *this, float a2)
{
  if (fabsf(a2) == INFINITY) {
    a2 = 0.0;
  }
  float var8 = this->var8;
  if (var8 != a2)
  {
    float v3 = 1.0;
    if (a2 < 1.0) {
      float v3 = a2;
    }
    if (a2 <= 0.0) {
      float v3 = 0.0;
    }
    this->float var8 = v3;
  }
  return var8 != a2;
}

BOOL AVAudioMixingImpl::SetRate(AVAudioMixingImpl *this, float a2)
{
  if (fabsf(a2) == INFINITY) {
    a2 = 0.5;
  }
  float var7 = this->var7;
  if (var7 != a2)
  {
    float v3 = 2.0;
    if (a2 < 2.0) {
      float v3 = a2;
    }
    if (a2 <= 0.5) {
      float v3 = 0.5;
    }
    this->float var7 = v3;
  }
  return var7 != a2;
}

uint64_t AVAudioMixingImpl::SetPointSourceInHeadMode(AVAudioMixingImpl *this, unsigned int a2)
{
  BOOL v2 = a2 >= 2 || this->var6 == a2;
  uint64_t v3 = !v2;
  if (!v2) {
    this->uint64_t var6 = a2;
  }
  return v3;
}

uint64_t AVAudioMixingImpl::SetSourceMode(AVAudioMixingImpl *this, unsigned int a2)
{
  BOOL v2 = a2 >= 4 || this->var5 == a2;
  uint64_t v3 = !v2;
  if (!v2) {
    this->unsigned int var5 = a2;
  }
  return v3;
}

uint64_t AVAudioMixingImpl::SetRenderingAlgorithm(AVAudioMixingImpl *this, unsigned int a2)
{
  BOOL v2 = a2 >= 8 || this->var4 == a2;
  uint64_t v3 = !v2;
  if (!v2) {
    this->var4 = a2;
  }
  return v3;
}

BOOL AVAudioMixingImpl::SetPan(AVAudioMixingImpl *this, float a2)
{
  if (fabsf(a2) == INFINITY) {
    a2 = -1.0;
  }
  float var3 = this->var3;
  if (var3 != a2)
  {
    float v3 = 1.0;
    if (a2 < 1.0) {
      float v3 = a2;
    }
    if (a2 <= -1.0) {
      float v3 = -1.0;
    }
    this->float var3 = v3;
  }
  return var3 != a2;
}

BOOL AVAudioMixingImpl::SetGain(AVAudioMixingImpl *this, float a2)
{
  if (fabsf(a2) == INFINITY) {
    a2 = 0.0;
  }
  float var2 = this->var2;
  if (var2 != a2)
  {
    float v3 = 100000.0;
    if (a2 < 100000.0) {
      float v3 = a2;
    }
    if (a2 <= 0.0) {
      float v3 = 0.0;
    }
    this->float var2 = v3;
  }
  return var2 != a2;
}

uint64_t AVAudioMixingImpl::GetMixerConnectionPoint(AVAudioMixingImpl *this)
{
  return 0;
}

uint64_t AVAudioMixingImpl::IsConnectedToMixer(AVAudioMixingImpl *this, AVAudioNode *a2)
{
  return 0;
}

void AVAudioMixingImpl::~AVAudioMixingImpl(AVAudioMixingImpl *this)
{
}

void sub_19D7C6F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  mach_port_name_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void sub_19D7C706C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double AudioPlayerImpl_GetProperty<double>(AVAudioPlayerCpp *a1, int a2, void *a3)
{
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  if (!AVAudioPlayerCpp::GetProperty(a1, a2, &v5, (const void **)&v6) && v5 == 8)
  {
    double result = *(double *)v6;
    *a3 = *(void *)v6;
  }
  return result;
}

void sub_19D7C791C(void *a1)
{
}

void sub_19D7C7958(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_19D7C79A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_19D7C7A04(void *a1)
{
}

void sub_19D7C7A4C(void *a1)
{
}

void sub_19D7C7A94(void *a1)
{
}

void sub_19D7C7C4C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10F0C4015DEEB49);
  _Unwind_Resume(a1);
}

void LocalPlayerHandleCallback(AVAudioPlayer *a1, int a2, uint64_t a3, unsigned int *a4)
{
  if (a2 <= 1685024356)
  {
    if (a2 == 1651076724)
    {
      int v9 = (void *)MEMORY[0x19F3AC180]();
      [(AVAudioPlayer *)a1 delegate];
      if (objc_opt_respondsToSelector())
      {
        __int16 v11 = sel_beginInterruption;
LABEL_25:
        [(AVAudioPlayer *)a1 performSelectorOnMainThread:v11 withObject:0 waitUntilDone:0];
      }
LABEL_26:
      return;
    }
    if (a2 != 1684370034 || a3 != 4) {
      return;
    }
    uint64_t v7 = [objc_alloc(NSNumber) initWithUnsignedInt:*a4];
    id v12 = (id)v7;
    id v8 = sel_decodeError_;
  }
  else
  {
    if (a2 != 1685024357)
    {
      if (a2 != 1701408372)
      {
        if (a2 == 1953723244)
        {
          tryToSetPlayerSessionListener(a1);
        }
        return;
      }
      int v9 = (void *)MEMORY[0x19F3AC180]();
      if (![(AVAudioPlayer *)a1 delegate]) {
        goto LABEL_26;
      }
      if (objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector())
      {
        if (a3 == 8)
        {
          uint64_t v10 = (void *)[NSNumber numberWithUnsignedLongLong:*(void *)a4];
          [(AVAudioPlayer *)a1 performSelectorOnMainThread:sel_endInterruptionWithFlags_ withObject:v10 waitUntilDone:0];
        }
        goto LABEL_26;
      }
      if (objc_opt_respondsToSelector())
      {
        __int16 v11 = sel_endInterruption;
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    if (a3 != 1) {
      return;
    }
    uint64_t v7 = [objc_alloc(NSNumber) initWithBool:*(unsigned char *)a4 & 1];
    id v12 = (id)v7;
    id v8 = sel_finishedPlaying_;
  }
  [(AVAudioPlayer *)a1 performSelectorOnMainThread:v8 withObject:v7 waitUntilDone:0];
}

uint64_t FileTypeConstant(NSString *a1)
{
  if (gAVFDylib)
  {
    id v2 = (id)gFileTypeNames;
  }
  else
  {
    gAVFDylib = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 1);
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    gFileTypeNames = (uint64_t)v2;
  }
  uint64_t v3 = [v2 objectForKey:a1];
  if (!v3)
  {
    float v4 = (uint64_t *)dlsym((void *)gAVFDylib, [(NSString *)a1 UTF8String]);
    uint64_t v3 = *v4;
    [(id)gFileTypeNames setObject:*v4 forKey:a1];
  }
  return v3;
}

void sub_19D7C8350(_Unwind_Exception *a1)
{
}

void sub_19D7C85B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D7C8668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void __Synchronously_block_invoke(uint64_t a1)
{
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  id v2 = *(NSObject **)(a1 + 32);

  dispatch_release(v2);
}

void sub_19D7C8AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1244(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1245(uint64_t a1)
{
}

void sub_19D7C8C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7C9248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL contextIsRemora(AVVCContextSettings *a1)
{
  uint64_t v1 = a1;
  id v2 = v1;
  if (v1) {
    BOOL v3 = [(AVVCContextSettings *)v1 activationMode] == 1919776372
  }
      || [(AVVCContextSettings *)v2 activationMode] == 1919771248;
  else {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_19D7C9368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7C96CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7C9A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7C9EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7CA06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7CA28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7CA944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7CAAF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7CAE80(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t closeFile(uint64_t result, AudioRecorderImpl *a2)
{
  if (*(void *)(result + 104))
  {
    uint64_t v2 = result;
    UInt32 outDataSize = 0;
    if (!AudioQueueGetPropertySize(*(AudioQueueRef *)(result + 112), 0x61716D63u, &outDataSize))
    {
      BOOL v3 = malloc_type_malloc(outDataSize, 0x49E54769uLL);
      if (!AudioQueueGetProperty(*(AudioQueueRef *)(v2 + 112), 0x61716D63u, v3, &outDataSize)) {
        AudioFileSetProperty(*(AudioFileID *)(v2 + 104), 0x6D676963u, outDataSize, v3);
      }
      free(v3);
    }
    double result = AudioFileClose(*(AudioFileID *)(v2 + 104));
    *(void *)(v2 + 104) = 0;
  }
  return result;
}

uint64_t stopAndDisposeRecordQueue(AVAudioRecorder *a1, AudioRecorderImpl *a2)
{
  if (!a1[7].super.isa || BYTE3(a1[11]._impl)) {
    return 0;
  }
  int v4 = (int)a2;
  BYTE3(a1[11]._impl) = 1;
  __dmb(0xBu);
  AudioQueueStop(a1[7].super.isa, 1u);
  if (v4) {
    closeFile((uint64_t)a1, v5);
  }
  AudioQueueDispose(a1[7].super.isa, 0);
  a1[7].super.isa = 0;
  a1[9].super.isa = 0;
  a1[9]._impl = 0;
  LODWORD(a1[11]._impl) = 0;
  uint64_t result = 1;
  __dmb(0xBu);
  return result;
}

void sub_19D7CB040(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CB118(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t tryToSetRecorderSessionListener(uint64_t result, AudioRecorderImpl *a2)
{
  if (!a2->var30)
  {
    uint64_t v3 = result;
    uint64_t result = objc_opt_respondsToSelector();
    if (result)
    {
      int v4 = (void *)[MEMORY[0x1E4F28EB8] defaultCenter];
      uint64_t result = [v4 addObserver:v3 selector:sel_handleInterruption_ name:*MEMORY[0x1E4F4E838] object:a2->var33];
      a2->var30 = 1;
    }
  }
  return result;
}

void sub_19D7CB1F8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CB3C4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void makeChannelAssignments(AudioRecorderImpl *a1)
{
  if (a1->var10)
  {
    id var6 = a1->var6;
    if (var6)
    {
      uint64_t v3 = [var6 count];
      if (v3)
      {
        uint64_t v4 = v3;
        UInt32 v5 = 16 * v3;
        uint64_t v6 = malloc_type_malloc(16 * v3, 0x7A73535BuLL);
        uint64_t v7 = 0;
        id v8 = v6 + 2;
        do
        {
          int v9 = (void *)[a1->var6 objectAtIndex:v7];
          *((void *)v8 - 1) = [v9 owningPortUID];
          *id v8 = [v9 channelNumber];
          v8 += 4;
          ++v7;
        }
        while (v4 != v7);
        AudioQueueSetProperty(a1->var10, 0x61716361u, v6, v5);
        free(v6);
      }
    }
  }
}

void sub_19D7CB83C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CB8D0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CB984(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CB9E0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CBA9C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CBB60(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CBC0C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CBC80(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CBD28(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t recordQueue(AVAudioRecorder *a1, AudioFileID *a2, double a3, const AudioTimeStamp *a4)
{
  if (*((unsigned char *)a2 + 186)) {
    return 0;
  }
  uint64_t result = prepareToRecordQueue(a1, a2);
  if (!result)
  {
    *(_WORD *)((char *)a2 + 185) = 257;
    if (a3 <= 0.0)
    {
      int64_t v9 = 0;
    }
    else
    {
      LODWORD(v8) = *((_DWORD *)a2 + 21);
      double v8 = (double)*(unint64_t *)&v8;
      int64_t v9 = vcvtpd_s64_f64(*((double *)a2 + 8) / v8 * a3);
    }
    a2[17] = (AudioFileID)v9;
    UInt32 v10 = *((_DWORD *)a2 + 20);
    if (v10)
    {
      LODWORD(v8) = *((_DWORD *)a2 + 21);
      UInt32 v11 = v10 * vcvtpd_u64_f64(*((double *)a2 + 8) / (double)*(unint64_t *)&v8 * 0.333);
    }
    else
    {
      UInt32 ioDataSize = 4;
      unsigned int outData = 0;
      if (AudioQueueGetProperty(a2[14], 0x786F7073u, &outData, &ioDataSize))
      {
        UInt32 v11 = 0x10000;
      }
      else if (outData > 0x10000)
      {
        UInt32 v11 = (outData + 63) & 0xFFFFFFC0;
      }
      else
      {
        UInt32 v11 = 0x10000;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = (AudioQueueBuffer **)(a2 + 25);
    while (1)
    {
      uint64_t result = AudioQueueAllocateBuffer(a2[14], v11, &v13[v12]);
      if (result) {
        break;
      }
      AudioQueueEnqueueBuffer(a2[14], v13[v12++], 0, 0);
      if (v12 == 4)
      {
        uint64_t result = AudioQueueStart(a2[14], a4);
        if (result) {
          *(_WORD *)((char *)a2 + 185) = 0;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t prepareToRecordQueue(AVAudioRecorder *a1, AudioFileID *outAudioFile)
{
  inData[32] = *(NSString **)MEMORY[0x1E4F143B8];
  if (*((unsigned char *)outAudioFile + 184)) {
    return 0;
  }
  UInt32 v5 = outAudioFile + 14;
  if (!outAudioFile[14])
  {
    inData[0] = 0;
    if ([(OpaqueAudioFileID *)outAudioFile[31] setActive:1 error:inData])
    {
      uint64_t Property = asbdFromSettingsAndFileType2((NSDictionary *)outAudioFile[2], (NSArray *)outAudioFile[6], *((_DWORD *)outAudioFile + 14), (AudioStreamBasicDescription *)(outAudioFile + 8));
      if (Property) {
        return Property;
      }
      [(OpaqueAudioFileID *)outAudioFile[31] opaqueSessionID];
      uint64_t Property = AudioQueueNewInputWithAudioSession();
      if (Property) {
        return Property;
      }
      if (*((_DWORD *)outAudioFile + 61)) {
        AudioQueueSetProperty(*v5, 0x71747070u, (char *)outAudioFile + 244, 4u);
      }
      makeChannelAssignments((AudioRecorderImpl *)outAudioFile);
      ioDataSize[0] = 40;
      uint64_t Property = AudioQueueGetProperty(outAudioFile[14], 0x61716674u, outAudioFile + 8, ioDataSize);
      if (*((unsigned char *)outAudioFile + 190))
      {
        UInt32 outDataSize = 1;
        AudioQueueSetProperty(*v5, 0x61716D65u, &outDataSize, 4u);
      }
      if (*((unsigned char *)outAudioFile + 191))
      {
        UInt32 outDataSize = 1;
        AudioQueueSetProperty(*v5, 0x71696E6Du, &outDataSize, 4u);
      }
      uint64_t v15 = (void *)[(OpaqueAudioFileID *)outAudioFile[2] objectForKey:@"AVChannelLayoutKey"];
      if (v15) {
        AudioQueueSetProperty(*v5, 0x6171636Cu, (const void *)[v15 bytes], objc_msgSend(v15, "length"));
      }
      tryToSetRecorderSessionListener((uint64_t)a1, (AudioRecorderImpl *)outAudioFile);
    }
    else
    {
      uint64_t Property = [(NSString *)inData[0] code];
    }
    if (Property) {
      return Property;
    }
  }
  if (!outAudioFile[13])
  {
    uint64_t Property = AudioFileCreateWithURL(outAudioFile[5], *((_DWORD *)outAudioFile + 14), (const AudioStreamBasicDescription *)(outAudioFile + 8), 1u, outAudioFile + 13);
    if (Property) {
      return Property;
    }
    *((unsigned char *)outAudioFile + 189) = 1;
    char v16 = (void *)[(OpaqueAudioFileID *)outAudioFile[2] objectForKey:@"AVChannelLayoutKey"];
    if (v16)
    {
      uint64_t Property = AudioFileSetProperty(outAudioFile[13], 0x636D6170u, [v16 length], (const void *)objc_msgSend(v16, "bytes"));
      if (Property) {
        return Property;
      }
    }
  }
  uint64_t v6 = (NSDictionary *)outAudioFile[2];
  if (v6 && *v5)
  {
    uint64_t v7 = [(OpaqueAudioFileID *)outAudioFile[2] objectForKey:@"AVSampleRateConverterQualityKey"];
    if (v7)
    {
      double v8 = (void *)v7;
      if (objc_opt_respondsToSelector())
      {
        int v9 = [v8 unsignedIntegerValue];
        UInt32 v10 = *v5;
        LODWORD(inData[0]) = v9;
        AudioQueueSetProperty(v10, 0x73726371u, inData, 4u);
      }
    }
    *(void *)UInt32 ioDataSize = 0;
    if (getStringForKey(v6, &cfstr_Avsamplerateco.isa, (NSString **)ioDataSize, (int *)&outDataSize))
    {
      id v11 = *(id *)ioDataSize;
      if ([*(id *)ioDataSize compare:@"AVSampleRateConverterAlgorithm_Mastering"])
      {
        if ([v11 compare:@"AVSampleRateConverterAlgorithm_Normal"])
        {
          if ([v11 compare:@"AVSampleRateConverterAlgorithm_MinimumPhase"]) {
            goto LABEL_38;
          }
          uint64_t v12 = *v5;
          int v13 = 1835626096;
        }
        else
        {
          uint64_t v12 = *v5;
          int v13 = 1852797549;
        }
      }
      else
      {
        uint64_t v12 = *v5;
        int v13 = 1650553971;
      }
      LODWORD(inData[0]) = v13;
      AudioQueueSetProperty(v12, 0x73726361u, inData, 4u);
    }
LABEL_38:
    inData[0] = 0;
    if (!getStringForKey(v6, &cfstr_Avencoderbitra.isa, inData, (int *)&outDataSize)) {
      goto LABEL_50;
    }
    uint64_t v17 = inData[0];
    if ([(NSString *)inData[0] compare:@"AVAudioBitRateStrategy_Constant"])
    {
      if ([(NSString *)v17 compare:@"AVAudioBitRateStrategy_LongTermAverage"])
      {
        if ([(NSString *)v17 compare:@"AVAudioBitRateStrategy_VariableConstrained"])
        {
          if ([(NSString *)v17 compare:@"AVAudioBitRateStrategy_Variable"] == NSOrderedSame)
          {
            id v18 = *v5;
            LODWORD(inData[0]) = 3;
            AudioQueueSetProperty(v18, 0x61636266u, inData, 4u);
            uint64_t v19 = [(NSDictionary *)v6 objectForKey:@"AVEncoderQualityForVBRKey"];
            if (v19)
            {
              uint64_t v20 = (void *)v19;
              if (objc_opt_respondsToSelector())
              {
                int v21 = [v20 unsignedIntegerValue];
                double v22 = *v5;
                LODWORD(inData[0]) = v21;
                AudioQueueSetProperty(v22, 0x76627271u, inData, 4u);
              }
            }
LABEL_51:
            uint64_t Property = 4294900621;
            uint64_t v25 = [(NSDictionary *)v6 objectForKey:@"AVEncoderQualityKey"];
            if (v25)
            {
              id v26 = (void *)v25;
              if ((objc_opt_respondsToSelector() & 1) == 0) {
                return Property;
              }
              int v27 = [v26 unsignedIntegerValue];
              id v28 = *v5;
              LODWORD(inData[0]) = v27;
              AudioQueueSetProperty(v28, 0x63647175u, inData, 4u);
            }
            uint64_t v29 = [(NSDictionary *)v6 objectForKey:@"AVEncoderBitDepthHintKey"];
            if (v29)
            {
              id v30 = (void *)v29;
              if ((objc_opt_respondsToSelector() & 1) == 0) {
                return Property;
              }
              unsigned int v31 = [v30 unsignedIntegerValue];
              if (v31 >= 0x40) {
                int v32 = 64;
              }
              else {
                int v32 = v31;
              }
              id v33 = *v5;
              LODWORD(inData[0]) = v32;
              AudioQueueSetProperty(v33, 0x61636264u, inData, 4u);
            }
            goto LABEL_60;
          }
LABEL_50:
          uint64_t Property = setBitRate((AudioRecorderImpl *)outAudioFile);
          if (Property) {
            return Property;
          }
          goto LABEL_51;
        }
        int v23 = 2;
      }
      else
      {
        int v23 = 1;
      }
    }
    else
    {
      int v23 = 0;
    }
    id v24 = outAudioFile[14];
    LODWORD(inData[0]) = v23;
    AudioQueueSetProperty(v24, 0x61636266u, inData, 4u);
    goto LABEL_50;
  }
LABEL_60:
  outAudioFile[15] = 0;
  outAudioFile[16] = 0;
  outAudioFile[17] = 0;
  *((unsigned char *)outAudioFile + 184) = 1;
  *((unsigned char *)outAudioFile + 188) = 1;
  inData[0] = (NSString *)@"AVFormatIDKey";
  *(void *)UInt32 ioDataSize = [objc_alloc(NSNumber) initWithUnsignedInteger:*((unsigned int *)outAudioFile + 18)];
  inData[1] = (NSString *)@"AVSampleRateKey";
  uint64_t v52 = [objc_alloc(NSNumber) initWithDouble:*((double *)outAudioFile + 8)];
  inData[2] = (NSString *)@"AVNumberOfChannelsKey";
  uint64_t v53 = [objc_alloc(NSNumber) initWithUnsignedInteger:*((unsigned int *)outAudioFile + 23)];
  if (*((_DWORD *)outAudioFile + 18) == 1819304813)
  {
    inData[3] = (NSString *)@"AVLinearPCMBitDepthKey";
    uint64_t v54 = [objc_alloc(NSNumber) initWithUnsignedInteger:*((unsigned int *)outAudioFile + 24)];
    inData[4] = (NSString *)@"AVLinearPCMIsFloatKey";
    uint64_t v55 = [objc_alloc(NSNumber) initWithUnsignedInteger:*((_DWORD *)outAudioFile + 19) & 1];
    inData[5] = (NSString *)@"AVLinearPCMIsBigEndianKey";
    uint64_t v56 = [objc_alloc(NSNumber) initWithUnsignedInteger:((unint64_t)*((unsigned int *)outAudioFile + 19) >> 1) & 1];
    inData[6] = (NSString *)@"AVLinearPCMIsNonInterleaved";
    uint64_t v57 = [objc_alloc(NSNumber) initWithUnsignedInteger:((unint64_t)*((unsigned int *)outAudioFile + 19) >> 5) & 1];
    unsigned int v34 = 7;
  }
  else
  {
    unsigned int v34 = 3;
  }
  if (*((_DWORD *)outAudioFile + 14))
  {
    inData[v34] = (NSString *)@"AVAudioFileTypeKey";
    *(void *)&ioDataSize[2 * v34++] = [objc_alloc(NSNumber) initWithUnsignedInteger:*((unsigned int *)outAudioFile + 14)];
  }
  id v35 = *v5;
  if (*v5)
  {
    unsigned int v49 = 0;
    UInt32 outDataSize = 4;
    if (!AudioQueueGetProperty(v35, 0x73726371u, &v49, &outDataSize))
    {
      inData[v34] = (NSString *)@"AVSampleRateConverterQualityKey";
      id v36 = objc_alloc(NSNumber);
      *(void *)&ioDataSize[2 * v34++] = [v36 initWithUnsignedInteger:v49];
    }
    int v37 = *v5;
    UInt32 outDataSize = 4;
    if (!AudioQueueGetProperty(v37, 0x62726174u, &v49, &outDataSize))
    {
      inData[v34] = (NSString *)@"AVEncoderBitRateKey";
      id v38 = objc_alloc(NSNumber);
      *(void *)&ioDataSize[2 * v34++] = [v38 initWithUnsignedInteger:v49];
    }
    id v39 = *v5;
    UInt32 outDataSize = 4;
    if (!AudioQueueGetProperty(v39, 0x61636264u, &v49, &outDataSize))
    {
      inData[v34] = (NSString *)@"AVEncoderBitDepthHintKey";
      id v40 = objc_alloc(NSNumber);
      *(void *)&ioDataSize[2 * v34++] = [v40 initWithUnsignedInteger:v49];
    }
    char v41 = *v5;
    UInt32 outDataSize = 4;
    if (!AudioQueueGetProperty(v41, 0x63647175u, &v49, &outDataSize))
    {
      inData[v34] = (NSString *)@"AVEncoderQualityKey";
      id v42 = objc_alloc(NSNumber);
      *(void *)&ioDataSize[2 * v34++] = [v42 initWithUnsignedInteger:v49];
    }
    UInt32 outDataSize = 0;
    if (!AudioQueueGetPropertySize(*v5, 0x6171636Cu, &outDataSize))
    {
      id v43 = objc_alloc(MEMORY[0x1E4F1CA58]);
      __int16 v44 = (void *)[v43 initWithLength:outDataSize];
      if (AudioQueueGetProperty(*v5, 0x6171636Cu, (void *)[v44 mutableBytes], &outDataSize))
      {
      }
      else
      {
        inData[v34] = (NSString *)@"AVChannelLayoutKey";
        *(void *)&ioDataSize[2 * v34++] = v44;
      }
    }
  }
  AudioFileID v45 = outAudioFile[3];
  if (v45) {

  }
  unint64_t v46 = 0;
  outAudioFile[3] = (AudioFileID)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithObjects:ioDataSize forKeys:inData count:v34];
  uint64_t v47 = 8 * v34;
  do
  {

    v46 += 8;
  }
  while (v47 != v46);
  AudioFileID v48 = outAudioFile[4];
  if (v48) {

  }
  uint64_t Property = 0;
  outAudioFile[4] = (AudioFileID)[[AVAudioFormat alloc] initWithSettings:outAudioFile[3]];
  return Property;
}

uint64_t getStringForKey(NSDictionary *a1, NSString *a2, NSString **a3, int *a4)
{
  *a4 = 0;
  uint64_t result = [(NSDictionary *)a1 objectForKey:a2];
  *a3 = (NSString *)result;
  if (result)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return 1;
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
      *a4 = -66675;
    }
  }
  return result;
}

uint64_t setBitRate(AudioRecorderImpl *a1)
{
  id var2 = a1->var2;
  uint64_t v3 = [var2 objectForKey:@"AVEncoderBitRateKey"];
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    if (objc_opt_respondsToSelector())
    {
      int v5 = [v4 unsignedIntegerValue];
      float var10 = a1->var10;
      int inData = v5;
      LODWORD(result) = AudioQueueSetProperty(var10, 0x62726174u, &inData, 4u);
      if (result == -66684 || result == 2003332927 || result == 1886547824) {
        return 0;
      }
      else {
        return result;
      }
    }
    return 4294900621;
  }
  uint64_t result = [var2 objectForKey:@"AVEncoderBitRatePerChannelKey"];
  if (!result) {
    return result;
  }
  UInt32 v10 = (void *)result;
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 4294900621;
  }
  int v11 = [v10 unsignedIntegerValue];
  uint64_t v12 = a1->var10;
  UInt32 v14 = a1->var8.mChannelsPerFrame * v11;
  uint64_t result = AudioQueueSetProperty(v12, 0x62726174u, &v14, 4u);
  if (result == -66684 || result == 2003332927 || result == 1886547824) {
    return 0;
  }
  return result;
}

void AudioRecorderAQInputCallback(id *a1, OpaqueAudioQueue *a2, AudioQueueBuffer *a3, const AudioTimeStamp *a4, UInt32 a5, const AudioStreamPacketDescription *a6)
{
  int v11 = (void *)MEMORY[0x19F3AC180](a1, a2, a3, a4);
  id Weak = objc_loadWeak(a1);
  if (Weak)
  {
    int v13 = Weak;
    uint64_t v14 = [Weak impl];
    uint64_t v15 = *(OpaqueAudioFileID **)(v14 + 104);
    if (!v15)
    {
LABEL_14:
      [v13 performSelectorOnMainThread:sel_stop withObject:0 waitUntilDone:0];
      goto LABEL_17;
    }
    UInt32 mAudioDataByteSize = a3->mAudioDataByteSize;
    unsigned int v17 = *(_DWORD *)(v14 + 80);
    if (v17) {
      a5 = mAudioDataByteSize / v17;
    }
    UInt32 ioNumPackets = a5;
    uint64_t v18 = *(void *)(v14 + 136);
    if (v18)
    {
      uint64_t v19 = v18 - *(void *)(v14 + 120);
      if (v19 < a5)
      {
        UInt32 ioNumPackets = v19;
        a5 = v19;
      }
    }
    if (a5)
    {
      if (AudioFileWritePackets(v15, 0, mAudioDataByteSize, a6, *(void *)(v14 + 120), &ioNumPackets, a3->mAudioData))
      {
        *(unsigned char *)(v14 + 188) = 0;
        goto LABEL_14;
      }
      uint64_t v20 = *(void *)(v14 + 120) + ioNumPackets;
      *(void *)(v14 + 120) = v20;
      uint64_t v21 = *(void *)(v14 + 136);
      if (v21 && v21 <= v20)
      {
        *(unsigned char *)(v14 + 188) = 1;
        goto LABEL_14;
      }
    }
    if (!*(unsigned char *)(v14 + 187)) {
      AudioQueueEnqueueBuffer(a2, a3, 0, 0);
    }
  }
LABEL_17:
}

void sub_19D7CCB0C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CCBA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CCC14(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CCC78(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CD054(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7CD0E4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void CallbackMessenger::CallbackMessenger(CallbackMessenger *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "CallbackMessenger Worker Thread");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    char v7 = 1;
    uint64_t v8 = 25;
    int v9 = 0;
    char v10 = 1;
    char v11 = 0;
    char v12 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v6 = __p;
    char v7 = 1;
    uint64_t v8 = 25;
    int v9 = 0;
    char v10 = 1;
    char v11 = 0;
    char v12 = 0;
  }
  uint64_t v2 = operator new(0x28uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_1EEFA7918;
  *(void *)&long long v3 = MEMORY[0x19F3AB7C0](v2 + 3, 0, &v6);
  *((void *)&v3 + 1) = v2;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v7)
  {
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19D7CD418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  id v24 = *(std::__shared_weak_count **)(v22 + 8);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

CallbackMessenger *std::unique_ptr<CallbackMessenger>::reset[abi:ne180100](CallbackMessenger **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    CallbackMessenger::~CallbackMessenger(result);
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

BOOL _AVAE_CheckNoErr(char *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    char v12 = *(id *)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (a1)
      {
        int v13 = strrchr(a1, 47);
        if (v13) {
          uint64_t v14 = v13 + 1;
        }
        else {
          uint64_t v14 = a1;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      *(_DWORD *)buf = 136316674;
      uint64_t v21 = "AVAEInternal.h";
      __int16 v22 = 1024;
      int v23 = 104;
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      __int16 v26 = 1024;
      int v27 = a2;
      __int16 v28 = 2080;
      uint64_t v29 = a3;
      __int16 v30 = 2080;
      uint64_t v31 = a4;
      __int16 v32 = 1024;
      int v33 = a5;
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    if (a6)
    {
      uint64_t v15 = (void *)MEMORY[0x1E4F28C58];
      char v16 = (void *)MEMORY[0x1E4F1C9E8];
      unsigned int v17 = [NSString stringWithUTF8String:a4];
      uint64_t v18 = objc_msgSend(v16, "dictionaryWithObjectsAndKeys:", v17, @"failed call", 0);
      *a6 = [v15 errorWithDomain:@"com.apple.coreaudio.avfaudio" code:(int)a5 userInfo:v18];
    }
    else
    {
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", a5);
    }
  }
  return a5 == 0;
}

void sub_19D7CD6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CallbackMessenger::~CallbackMessenger(CallbackMessenger *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    long long v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void ___ZL11initLoggingv_block_invoke()
{
}

CallbackMessenger *std::__shared_ptr_pointer<CallbackMessenger  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(CallbackMessenger **)(a1 + 24);
  if (result)
  {
    CallbackMessenger::~CallbackMessenger(result);
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

void std::__shared_ptr_pointer<CallbackMessenger  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::__shared_ptr_emplace<caulk::concurrent::messenger>::__on_zero_shared()
{
}

void std::__shared_ptr_emplace<caulk::concurrent::messenger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA7918;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::__shared_ptr_emplace<caulk::concurrent::messenger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA7918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    long long v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x19F3ABB30](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>(NSObject  {objcproto17OS_dispatch_queue}*,AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0 &&)::{lambda(void *)#1}::__invoke(caulk::concurrent::messenger ***a1)
{
  uint64_t v2 = a1;
  caulk::concurrent::messenger::drain(**a1);
  return std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v2);
}

void sub_19D7CD9D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AVAudioSequencerImpl::~AVAudioSequencerImpl(AVAudioSequencerImpl *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (kAVASScope)
  {
    uint64_t v2 = *(id *)kAVASScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 136315650;
    *(void *)&v7[1] = "AVAudioSequencerImpl.mm";
    __int16 v8 = 1024;
    int v9 = 92;
    __int16 v10 = 2048;
    char v11 = this;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---> this = %p", (uint8_t *)v7, 0x1Cu);
  }

LABEL_8:
  uint64_t v4 = dispatch_get_global_queue(0, 0);
  uint64_t v5 = *((void *)this + 6);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  id v6 = v4;
  operator new();
}

void sub_19D7CDC48(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

MusicTimeStamp AVAudioSequencerImpl::CurrentPosition(AVAudioSequencerImpl *this)
{
  outuint64_t Time = 0.0;
  uint64_t Time = MusicPlayerGetTime(this, &outTime);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 109, (uint64_t)"CurrentPosition", (uint64_t)"MusicPlayerGetTime(mPlayer, &theTime)", Time, 0);
  return outTime;
}

uint64_t *applesauce::dispatch::v1::async<AVAudioSequencerImpl::Stop(void)::$_0>(NSObject  {objcproto17OS_dispatch_queue}*,AVAudioSequencerImpl::Stop(void)::$_0 &&)::{lambda(void *)#1}::__invoke(caulk::concurrent::messenger ***a1)
{
  uint64_t v2 = a1;
  caulk::concurrent::messenger::drain(**a1);
  return std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v2);
}

void sub_19D7CDCEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0,std::default_delete<AVAudioSequencerImpl::~AVAudioSequencerImpl()::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

MusicTrack AVAudioSequencerImpl::GetTempoTrack(AVAudioSequencerImpl *this)
{
  MusicTrack outTrack = 0;
  uint64_t TempoTrack = MusicSequenceGetTempoTrack(this, &outTrack);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 249, (uint64_t)"GetTempoTrack", (uint64_t)"MusicSequenceGetTempoTrack(mSequence, &tempoTrack)", TempoTrack, 0);
  return outTrack;
}

Float64 AVAudioSequencerImpl::GetSecondsForBeats(AVAudioSequencerImpl *this, float a2)
{
  Float64 outSeconds = 0.0;
  uint64_t SecondsForBeats = MusicSequenceGetSecondsForBeats(this, a2, &outSeconds);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 261, (uint64_t)"GetSecondsForBeats", (uint64_t)"MusicSequenceGetSecondsForBeats(mSequence, inBeats, &theSeconds)", SecondsForBeats, 0);
  return outSeconds;
}

float AVAudioSequencerImpl::GetBeatsForSeconds(AVAudioSequencerImpl *this, Float64 a2)
{
  MusicTimeStamp outBeats = 0.0;
  uint64_t BeatsForSeconds = MusicSequenceGetBeatsForSeconds(this, a2, &outBeats);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 268, (uint64_t)"GetBeatsForSeconds", (uint64_t)"MusicSequenceGetBeatsForSeconds(mSequence, inSeconds, &theBeats)", BeatsForSeconds, 0);
  return outBeats;
}

void AVAudioSequencerImpl::UserCallback(id *this, void *a2, MusicTrack inTrack, OpaqueMusicTrack *a4, double a5, const MusicEventUserData *a6, double a7, double a8)
{
  if (this[4])
  {
    MusicSequence outSequence = 0;
    UInt32 outTrackIndex = 0;
    MusicTrackGetSequence(inTrack, &outSequence);
    if (outSequence)
    {
      if (!MusicSequenceGetTrackIndex(outSequence, inTrack, &outTrackIndex))
      {
        unint64_t v12 = outTrackIndex;
        if ([this[2] count] > v12)
        {
          int v13 = [this[2] objectAtIndexedSubscript:outTrackIndex];
          uint64_t v14 = [MEMORY[0x1E4F1C9B8] dataWithBytes:(char *)a4 + 4 length:*(unsigned int *)a4];
          uint64_t v15 = (caulk::concurrent::messenger **)this[5];
          id v16 = v13;
          id v17 = v14;
          uint64_t v18 = *v15;
          uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 64, 8);
          *(_DWORD *)(v19 + 16) = 0;
          *(void *)uint64_t v19 = &unk_1EEFA2EF0;
          *(void *)(v19 + 8) = 0;
          *(void *)(v19 + 24) = this;
          id v20 = v16;
          *(void *)(v19 + 32) = v20;
          id v21 = v17;
          *(void *)(v19 + 40) = v21;
          *(double *)(v19 + 48) = a5;
          *(void *)uint64_t v19 = &unk_1EEFA2F18;
          caulk::concurrent::messenger::enqueue(v18, (caulk::concurrent::message *)v19);
        }
      }
    }
  }
}

void sub_19D7CDF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id **caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::perform(uint64_t a1)
{
  uint64_t v2 = (id *)a1;
  (*(void (**)(void, void, void, double))(*(void *)(*(void *)(a1 + 24) + 32) + 16))(*(void *)(*(void *)(a1 + 24) + 32), *(void *)(a1 + 32), *(void *)(a1 + 40), *(double *)(a1 + 48));
  return caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_19D7CE010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::rt_cleanup::~rt_cleanup((id **)va);
  _Unwind_Resume(a1);
}

id **caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::rt_cleanup::~rt_cleanup(id **a1)
{
  uint64_t v2 = *a1;

  caulk::concurrent::message::~message((caulk::concurrent::message *)v2);
  (*(void (**)(void, id *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::~rt_message_call(id *a1)
{
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t vars8;

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

uint64_t caulk::concurrent::details::message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::perform(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, double))(*(void *)(*(void *)(a1 + 24) + 32) + 16))(*(void *)(*(void *)(a1 + 24) + 32), *(void *)(a1 + 32), *(void *)(a1 + 40), *(double *)(a1 + 48));
}

void caulk::concurrent::details::message_call<AVAudioSequencerImpl::UserCallback(void *,OpaqueMusicSequence *,OpaqueMusicTrack *,double,MusicEventUserData const*,double,double)::$_0 &>::~message_call(id *a1)
{
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t vars8;

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

void MusicTrackImpl::MusicTrackImpl(MusicTrackImpl *this, MusicTrack inTrack)
{
  this->double var0 = inTrack;
  this->unsigned int var1 = 0;
  UInt32 ioLength = 24;
  uint64_t Property = MusicTrackGetProperty(inTrack, 7u, outData, &ioLength);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 320, (uint64_t)"MusicTrackImpl", (uint64_t)"MusicTrackGetProperty(inTrack, kSequenceTrackProperty_LoopRegion, &region, &pLen)", Property, 0);
  unsigned int v4 = v8;
  BOOL v5 = v8 == -1;
  this->id var2 = v8 != -1;
  if (v5) {
    unsigned int v4 = 0;
  }
  this->float var3 = v4;
}

void sub_19D7CE288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void MusicTrackImpl::~MusicTrackImpl(MusicTrackImpl *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (kAVASScope)
  {
    uint64_t v2 = *(id *)kAVASScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v14 = "AVAudioSequencerImpl.mm";
    __int16 v15 = 1024;
    int v16 = 327;
    __int16 v17 = 2048;
    uint64_t v18 = this;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---> this = %p", buf, 0x1Cu);
  }

LABEL_8:
  MusicSequence outSequence = 0;
  if (!MusicTrackIsValid())
  {
    if (kAVASScope)
    {
      unsigned int v4 = *(id *)kAVASScope;
      if (!v4) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v14 = "AVAudioSequencerImpl.mm";
      __int16 v15 = 1024;
      int v16 = 339;
      id v6 = "%25s:%-5d Underlying track already destroyed";
      std::string::size_type v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_DEBUG;
LABEL_23:
      _os_log_impl(&dword_19D794000, v7, v8, v6, buf, 0x12u);
    }
LABEL_24:

    goto LABEL_25;
  }
  MusicTrackGetSequence(this->var0, &outSequence);
  if (outSequence)
  {
    MusicSequenceDisposeTrack(outSequence, this->var0);
    goto LABEL_25;
  }
  if (!kAVASScope)
  {
    unsigned int v4 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
LABEL_21:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v14 = "AVAudioSequencerImpl.mm";
      __int16 v15 = 1024;
      int v16 = 335;
      id v6 = "%25s:%-5d Track's sequence was NULL";
      std::string::size_type v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_INFO;
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  unsigned int v4 = *(id *)kAVASScope;
  if (v4) {
    goto LABEL_21;
  }
LABEL_25:
  if (kAVASScope)
  {
    __int16 v10 = *(id *)kAVASScope;
    if (!v10) {
      goto LABEL_32;
    }
  }
  else
  {
    __int16 v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v14 = "AVAudioSequencerImpl.mm";
    __int16 v15 = 1024;
    int v16 = 341;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d <---", buf, 0x12u);
  }

LABEL_32:
}

void sub_19D7CE55C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL MusicTrackImpl::DoSetLengthInBeats(MusicTrackImpl *this, double a2)
{
  double inData = a2;
  uint64_t v2 = MusicTrackSetProperty((MusicTrack)this, 5u, &inData, 8u);
  return _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 376, (uint64_t)"DoSetLengthInBeats", (uint64_t)"MusicTrackSetProperty(mTrack, kSequenceTrackProperty_TrackLength, &inLength, sizeof(inLength))", v2, 0);
}

double MusicTrackImpl::DoGetLengthInBeats(MusicTrackImpl *this)
{
  double outData = 0.0;
  UInt32 ioLength = 8;
  uint64_t Property = MusicTrackGetProperty((MusicTrack)this, 5u, &outData, &ioLength);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 383, (uint64_t)"DoGetLengthInBeats", (uint64_t)"MusicTrackGetProperty(mTrack, kSequenceTrackProperty_TrackLength, &length, &pLen)", Property, 0);
  return outData;
}

double MusicTrackImpl::GetLoopStart(MusicTrackImpl *this)
{
  UInt32 ioLength = 24;
  uint64_t Property = MusicTrackGetProperty((MusicTrack)this, 7u, outData, &ioLength);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 482, (uint64_t)"GetLoopStart", (uint64_t)"MusicTrackGetProperty(mTrack, kSequenceTrackProperty_LoopRegion, &region, &pLen)", Property, 0);
  return outData[0];
}

BOOL MusicTrackImpl::UseAutomatedParams(MusicTrackImpl *this, int a2)
{
  int inData = a2;
  uint64_t v2 = MusicTrackSetProperty((MusicTrack)this, 4u, &inData, 4u);
  return _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 564, (uint64_t)"UseAutomatedParams", (uint64_t)"MusicTrackSetProperty(mTrack, kSequenceTrackProperty_AutomatedParameters, &useAuto, pLen)", v2, 0);
}

BOOL MusicTrackImpl::UsesAutomatedParams(MusicTrackImpl *this)
{
  int outData = 0;
  UInt32 ioLength = 4;
  uint64_t Property = MusicTrackGetProperty((MusicTrack)this, 4u, &outData, &ioLength);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 571, (uint64_t)"UsesAutomatedParams", (uint64_t)"MusicTrackGetProperty(mTrack, kSequenceTrackProperty_AutomatedParameters, &useAuto, &pLen)", Property, 0);
  return outData != 0;
}

char *_AVAE_Check(char *result, int a2, const char *a3, const char *a4, char a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((a5 & 1) == 0)
  {
    os_log_type_t v8 = result;
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    id v9 = *(id *)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if (v8)
      {
        __int16 v10 = strrchr(v8, 47);
        if (v10) {
          id v11 = v10 + 1;
        }
        else {
          id v11 = v8;
        }
      }
      else
      {
        id v11 = 0;
      }
      *(_DWORD *)buf = 136316418;
      int v13 = "AVAEInternal.h";
      __int16 v14 = 1024;
      int v15 = 71;
      __int16 v16 = 2080;
      __int16 v17 = v11;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 2080;
      id v21 = a3;
      __int16 v22 = 2080;
      int v23 = a4;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    return (char *)objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", a4);
  }
  return result;
}

BOOL MusicTrackEventIteratorImpl::HasCurrentEvent(MusicTrackEventIteratorImpl *this)
{
  Boolean outHasCurEvent = 0;
  uint64_t HasCurrentEvent = MusicEventIteratorHasCurrentEvent((MusicEventIterator)this, &outHasCurEvent);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAudioSequencerImpl.mm", 768, (uint64_t)"HasCurrentEvent", (uint64_t)"MusicEventIteratorHasCurrentEvent(mIter, &has)", HasCurrentEvent, 0);
  return outHasCurEvent != 0;
}

void CADeprecated::RealtimeMessenger::RealtimeMessenger(uint64_t a1, dispatch_queue_t *a2)
{
  kern_return_t v5;
  kern_return_t inserted;
  NSObject *v7;
  NSObject *v8;
  uintptr_t explicit;
  NSObject *v10;
  NSObject *global_queue;
  NSObject *v12;
  NSObject *v13;
  void v14[5];
  mach_port_name_t name;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  kern_return_t v19;
  uint64_t v20;

  __int16 v20 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 8;
  *(unsigned char *)(a1 + 64) = 0;
  MEMORY[0x19F3AB9F0](a1 + 72);
  CADeprecated::XMachReceivePort::SetMachPort((atomic_uint *)a1);
  name = 0;
  unsigned int v4 = (ipc_space_t *)MEMORY[0x1E4F14960];
  id v5 = mach_port_allocate(*MEMORY[0x1E4F14960], 1u, &name);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v17 = "ret = mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &port)";
      __int16 v18 = 1024;
      int v19 = v5;
      _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ca_verify_noerr: [%s, %d]", buf, 0x12u);
    }
  }
  else
  {
    inserted = mach_port_insert_right(*v4, name, name, 0x14u);
    if (inserted)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v17 = "ret = mach_port_insert_right(mach_task_self(), port, port, MACH_MSG_TYPE_MAKE_SEND)";
        __int16 v18 = 1024;
        int v19 = inserted;
        _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ca_verify_noerr: [%s, %d]", buf, 0x12u);
      }
      mach_port_mod_refs(*v4, name, 1u, -1);
    }
    else
    {
      atomic_store(name, (unsigned int *)a1);
    }
  }
  if (!*a2)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    if (global_queue)
    {
      unint64_t v12 = global_queue;
      dispatch_retain(global_queue);
      int v13 = *a2;
      *a2 = v12;
      if (v13) {
        dispatch_release(v13);
      }
    }
    else
    {
      *a2 = 0;
    }
  }
  std::string::size_type v7 = dispatch_queue_create("RealtimeMessenger.mServiceQueue", 0);
  os_log_type_t v8 = *(NSObject **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  if (v8)
  {
    dispatch_release(v8);
    std::string::size_type v7 = *(NSObject **)(a1 + 16);
  }
  dispatch_set_target_queue(v7, *a2);
  explicit = atomic_load_explicit((atomic_uint *volatile)a1, memory_order_acquire);
  __int16 v10 = dispatch_source_create(MEMORY[0x1E4F14458], explicit, 0, *(dispatch_queue_t *)(a1 + 16));
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  v14[2] = ___ZN12CADeprecated17RealtimeMessengerC2EN10applesauce8dispatch2v15queueE_block_invoke;
  v14[3] = &__block_descriptor_tmp_1450;
  v14[4] = a1;
  dispatch_source_set_event_handler(v10, v14);
  operator new();
}

void sub_19D7CEC5C(_Unwind_Exception *a1)
{
  if (v3) {
    dispatch_release(v3);
  }
  std::recursive_mutex::~recursive_mutex(v2);
  id v6 = *((void *)v1 + 2);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *v4;
  *unsigned int v4 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  CADeprecated::XMachReceivePort::~XMachReceivePort(v1);
  _Unwind_Resume(a1);
}

void ___ZN12CADeprecated17RealtimeMessengerC2EN10applesauce8dispatch2v15queueE_block_invoke(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  msg.msgh_bits = 0;
  mach_port_t explicit = atomic_load_explicit((atomic_uint *volatile)v1, memory_order_acquire);
  msg.msgh_remote_port = 0;
  msg.msgh_local_port = explicit;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 0;
  mach_msg(&msg, 2, 0, 0x2Cu, atomic_load_explicit((atomic_uint *volatile)v1, memory_order_acquire), 0, 0);
  atomic_store(0, (unsigned __int8 *)(v1 + 64));
  CADeprecated::RealtimeMessenger::_PerformPendingMessages((CADeprecated::RealtimeMessenger *)v1);
}

void CADeprecated::RealtimeMessenger::_PerformPendingMessages(CADeprecated::RealtimeMessenger *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 72);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 72));
  while (1)
  {
    id v3 = OSAtomicDequeue((OSQueueHead *)this + 2, *((void *)this + 6));
    if (!v3) {
      break;
    }
    v3[16] = 0;
    (*(void (**)(unsigned char *))(*(void *)v3 + 16))(v3);
  }

  std::recursive_mutex::unlock(v2);
}

void sub_19D7CEDEC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void CADeprecated::RealtimeMessenger::PerformAsync(uint64_t a1, unsigned char *__new)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (__new[16])
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v4 = 136315650;
      *(void *)&v4[4] = "RealtimeMessenger.cpp";
      uint64_t v5 = 0x800000000490400;
      id v6 = __new;
      _os_log_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d RealtimeMessenger: trying to enqueue duplicate invocation on message %p", v4, 0x1Cu);
    }
  }
  else
  {
    __new[16] = 1;
    OSAtomicEnqueue((OSQueueHead *)(a1 + 32), __new, *(void *)(a1 + 48));
    if ((atomic_exchange((atomic_uchar *volatile)(a1 + 64), 1u) & 1) == 0)
    {
      *(void *)uint64_t v4 = 0x1C00000013;
      *(_DWORD *)&v4[8] = atomic_load_explicit((atomic_uint *volatile)a1, memory_order_acquire);
      id v6 = 0;
      uint64_t v5 = 0;
      mach_msg((mach_msg_header_t *)v4, 1, 0x1Cu, 0, 0, 0, 0);
    }
  }
}

uint64_t XPC_Connection::ProcessMessage(XPC_Connection *this, void *a2)
{
  if (MEMORY[0x19F3AC970](a2) == MEMORY[0x1E4F145A8])
  {
    uint64_t result = *((void *)this + 5);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = *((void *)this + 3);
    if (!result) {
      return result;
    }
  }
  uint64_t v4 = *(uint64_t (**)(void))(result + 16);

  return v4();
}

void XPC_Connection::~XPC_Connection(XPC_Connection *this)
{
  XPC_Connection::~XPC_Connection(this);

  JUMPOUT(0x19F3ABB30);
}

{
  const void *v2;
  const void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EEFA4178;
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2)
  {
    _Block_release(v2);
    *((void *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
  }
  id v3 = (const void *)*((void *)this + 5);
  if (v3)
  {
    _Block_release(v3);
    *((void *)this + 5) = 0;
  }

  XPC_Object::~XPC_Object(this);
}

uint64_t ___ZN14XPC_Connection10InitializeEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_19D7CF09C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t XPC_Connection::Finalize(uint64_t this, XPC_Connection *a2)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t AVAudioSinkNodeImpl::IsSinkNode(AVAudioSinkNodeImpl *this)
{
  return 1;
}

uint64_t AVAudioSinkNodeImpl::NumberOutputs(AVAudioSinkNodeImpl *this)
{
  return 0;
}

uint64_t AVAudioSinkNodeImpl::SetInputFormat(AVAudioSinkNodeImpl *this, unint64_t a2, AVAudioFormat *a3)
{
  uint64_t v5 = (AVAudioSinkNodeImpl *)((char *)this + 224);
  caulk::pooled_semaphore_mutex::_lock((AVAudioSinkNodeImpl *)((char *)this + 224));
  *((_DWORD *)this + 48) = [(AVAudioFormat *)a3 channelCount];
  *((_DWORD *)this + 49) = [(AVAudioFormat *)a3 streamDescription][24];
  AVAEInputCallbackClient::SetRenderABL((AVAudioSinkNodeImpl *)((char *)this + 200), *((_DWORD *)this + 48));
  if (AVAudioNodeImplBase::SetOutputFormat((AVAudioNodeImplBase *)this, 0, a3)) {
    uint64_t v6 = AVAudioNodeImplBase::SetInputFormat((AVAudioNodeImplBase *)this, 0, a3);
  }
  else {
    uint64_t v6 = 0;
  }
  caulk::pooled_semaphore_mutex::_unlock(v5);
  return v6;
}

void sub_19D7CF19C(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

double AVAEInputCallbackClient::SetRenderABL(AVAEInputCallbackClient *this, unsigned int a2)
{
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&v7, (16 * a2) | 8, &__x);
  std::vector<char>::pointer begin = v7.__begin_;
  *(_DWORD *)v7.__begin_ = a2;
  uint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
    std::vector<char>::pointer begin = v7.__begin_;
  }
  *(void *)this = begin;
  double result = *(double *)&v7.__end_;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v7.__end_;
  return result;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v4 = __n;
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  uint64_t v6 = (char *)operator new(__n);
  this->__begin_ = v6;
  this->__end_ = v6;
  std::vector<char> v7 = &v6[v4];
  this->__end_cap_.__value_ = &v6[v4];
  std::vector<char>::value_type v8 = *__x;
  do
  {
    *v6++ = v8;
    --v4;
  }
  while (v4);
  this->__end_ = v7;
  return this;
}

uint64_t AVAudioSinkNodeImpl::SetOutputFormat(AVAudioSinkNodeImpl *this, unint64_t a2, AVAudioFormat *a3)
{
  uint64_t v5 = (AVAudioSinkNodeImpl *)((char *)this + 224);
  caulk::pooled_semaphore_mutex::_lock((AVAudioSinkNodeImpl *)((char *)this + 224));
  if (!a3) {
    a3 = (AVAudioFormat *)(*(uint64_t (**)(AVAudioSinkNodeImpl *, void))(*(void *)this + 48))(this, 0);
  }
  *((_DWORD *)this + 48) = [(AVAudioFormat *)a3 channelCount];
  *((_DWORD *)this + 49) = [(AVAudioFormat *)a3 streamDescription][24];
  AVAEInputCallbackClient::SetRenderABL((AVAudioSinkNodeImpl *)((char *)this + 200), *((_DWORD *)this + 48));
  uint64_t v6 = AVAudioNodeImplBase::SetOutputFormat((AVAudioNodeImplBase *)this, 0, a3);
  caulk::pooled_semaphore_mutex::_unlock(v5);
  return v6;
}

void sub_19D7CF344(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioSinkNodeImpl::~AVAudioSinkNodeImpl(AVAudioSinkNodeImpl *this)
{
  AVAudioSinkNodeImpl::~AVAudioSinkNodeImpl(this);

  JUMPOUT(0x19F3ABB30);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EEFA59E0;
  (*(void (**)(void, void, void, void))(**((void **)this + 22) + 64))(*((void *)this + 22), 0, 0, 0);
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)this + 23, 0);

  AVAudioUnitImpl::~AVAudioUnitImpl((id *)this);
}

const void ***std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  CallbackMessenger *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *uint64_t v2 = 0;
    }
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

void sub_19D7CF75C(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 208) = v5;
    operator delete(v5);
  }
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](v2, 0);
  AVAudioUnitImpl::~AVAudioUnitImpl((id *)v1);
  MEMORY[0x19F3ABB30](v1, 0x10B1C40239C0A1DLL);
  _Unwind_Resume(a1);
}

void AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>::Set(const void **a1, void *aBlock)
{
  id v3 = (void *)*a1;
  if (v3 != aBlock)
  {
    if (v3)
    {
      _Block_release(v3);
      *a1 = 0;
    }
    if (aBlock) {
      *a1 = _Block_copy(aBlock);
    }
  }
}

void AVAudioNodeTap::TapMessage::RealtimeMessenger_Perform(AVAudioNodeTap::TapMessage *this)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  uint64_t v3 = *((void *)this + 3);
  if (!*(unsigned char *)(v3 + 54))
  {
    if (!*(unsigned char *)(v3 + 52)) {
      goto LABEL_5;
    }
    uint64_t v5 = (CADeprecated::AudioRingBuffer *)(v3 + 72);
    uint64_t v6 = v3 + 208;
    while (1)
    {
      int v7 = *(_DWORD *)(v3 + 976);
      uint64_t v8 = v6 + 24 * (v7 & 0x1F);
      int v9 = 8;
      while (*(_DWORD *)(v8 + 16) != v7)
      {
        if (!--v9) {
          goto LABEL_5;
        }
      }
      uint64_t v10 = atomic_load((unint64_t *)(v3 + 64));
      AVAudioFrameCount v11 = *(void *)(v8 + 8) - v10;
      int v12 = *(_DWORD *)(v3 + 56);
      if (v12 == 1)
      {
        *(_DWORD *)(v3 + 56) = 2;
        if (!v11) {
          goto LABEL_5;
        }
      }
      else if (v12 || *(_DWORD *)(v3 + 1064) > v11)
      {
        goto LABEL_5;
      }
      id v66 = v2;
      int v13 = *(void **)(v3 + 1056);
      if (v13)
      {
        unint64_t v14 = [v13 retainCount];
        int v15 = *(AVAudioPCMBuffer **)(v3 + 1056);
        if (v14 < 2)
        {
          if (v15) {
            goto LABEL_24;
          }
        }
        else
        {

          *(void *)(v3 + 1056) = 0;
        }
      }
      int v15 = [[AVAudioPCMBuffer alloc] initWithPCMFormat:*(void *)(v3 + 40) frameCapacity:*(unsigned int *)(v3 + 1064)];
      *(void *)(v3 + 1056) = v15;
LABEL_24:
      AVAudioFrameCount v16 = [(AVAudioPCMBuffer *)v15 frameCapacity];
      if (v16 >= v11) {
        uint64_t v17 = v11;
      }
      else {
        uint64_t v17 = v16;
      }
      [*(id *)(v3 + 1056) setFrameLength:v17];
      __int16 v18 = (_DWORD *)[*(id *)(v3 + 1056) mutableAudioBufferList];
      unsigned int v19 = [*(id *)(v3 + 1056) frameLength];
      uint64_t v20 = v10 + v19;
      uint64_t v64 = v10;
      int v21 = CADeprecated::AudioRingBuffer::CheckTimeBounds(v5, v10, v20);
      if (v21)
      {
LABEL_28:
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        __int16 v22 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "AVAudioNodeTap.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 268;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v3;
          __int16 v68 = 1024;
          int v69 = v21;
          _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Error fetching from ring buffer, this = %p, err = %d", buf, 0x22u);
        }
        goto LABEL_69;
      }
      uint64_t v63 = v6;
      if (v19)
      {
        int v23 = *(const void ***)(v3 + 176);
        int v24 = *(_DWORD *)(v3 + 188);
        uint64_t v25 = *(int *)(v3 + 192);
        int v26 = ((v25 & ((int)(v10 % v25) >> 31)) + v10 % v25) * v24;
        int v27 = ((v25 & ((int)(v20 % v25) >> 31)) + v20 % v25) * v24;
        int v28 = v27 - v26;
        if (v27 <= v26)
        {
          long long v62 = v5;
          int v36 = *(_DWORD *)(v3 + 196) - v26;
          if ((int)*v18 >= 1)
          {
            uint64_t v37 = v26;
            int v61 = *(_DWORD *)(v3 + 196) - v26;
            size_t v38 = v36;
            unsigned int v39 = *v18 + 1;
            uint64_t v40 = 4;
            char v41 = *(uint64_t **)(v3 + 176);
            do
            {
              uint64_t v42 = *v41++;
              memcpy(*(void **)&v18[v40], (const void *)(v42 + v37), v38);
              v40 += 4;
              --v39;
            }
            while (v39 > 1);
            int v36 = v61;
            if ((int)*v18 >= 1)
            {
              id v43 = (uint64_t *)(v18 + 4);
              unsigned int v44 = *v18 + 1;
              do
              {
                uint64_t v45 = *v43;
                v43 += 2;
                unint64_t v46 = (void *)(v45 + v38);
                uint64_t v47 = *v23++;
                memcpy(v46, v47, v27);
                --v44;
              }
              while (v44 > 1);
            }
          }
          int v28 = v36 + v27;
          uint64_t v5 = v62;
        }
        else
        {
          if ((int)*v18 < 1) {
            goto LABEL_49;
          }
          uint64_t v29 = v5;
          uint64_t v30 = v26;
          uint64_t v31 = (void **)(v18 + 4);
          unsigned int v32 = *v18 + 1;
          do
          {
            uint64_t v34 = *v31;
            v31 += 2;
            int v33 = v34;
            uint64_t v35 = (uint64_t)*v23++;
            memcpy(v33, (const void *)(v35 + v30), v28);
            --v32;
          }
          while (v32 > 1);
          uint64_t v5 = v29;
        }
      }
      else
      {
        int v28 = 0;
      }
      if ((int)*v18 >= 1)
      {
        AudioFileID v48 = v18 + 3;
        unsigned int v49 = *v18 + 1;
        do
        {
          *AudioFileID v48 = v28;
          v48 += 4;
          --v49;
        }
        while (v49 > 1);
      }
LABEL_49:
      int v21 = CADeprecated::AudioRingBuffer::CheckTimeBounds(v5, v64, v20);
      uint64_t v6 = v63;
      if (v21) {
        goto LABEL_28;
      }
      int v50 = 0;
      while (1)
      {
        unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v3 + 984), memory_order_acquire);
        if ((explicit & 1) == 0)
        {
          double v52 = *(double *)(v3 + 992);
          uint64_t v53 = *(void *)(v3 + 1000);
          double v54 = *(double *)(v3 + 1008);
          int v55 = *(_DWORD *)(v3 + 1048);
          if (explicit == atomic_load_explicit((atomic_ullong *volatile)(v3 + 984), memory_order_acquire)) {
            break;
          }
        }
        if (++v50 == 5)
        {
          sched_yield();
          int v50 = 0;
        }
      }
      int v70 = 1;
      *(double *)buf = (double)v64;
      [*(id *)(v3 + 40) sampleRate];
      int v58 = v70;
      if ((~v70 & 7) != 0 && (~v55 & 3) == 0 && (v70 & 3) != 0)
      {
        if ((v70 & 4) != 0)
        {
          double v57 = *(double *)&buf[16];
          if ((v70 & 2) == 0) {
            goto LABEL_74;
          }
        }
        else
        {
          double v57 = 1.0;
          if ((v55 & 4) == 0)
          {
            if ((v70 & 2) != 0) {
              goto LABEL_65;
            }
LABEL_74:
            *(void *)&buf[8] = (unint64_t)((double)v53 + (*(double *)buf - v52) * (v57 * 24000000.0 / v56));
            if (v58)
            {
LABEL_67:
              int v70 = v58 | 3;
              goto LABEL_68;
            }
LABEL_66:
            double v57 = v52 + round(v56 / (v57 * 24000000.0) * (double)(*(void *)&buf[8] - v53));
            *(double *)buf = v57;
            goto LABEL_67;
          }
          int v58 = v70 | 4;
          *(double *)&uint8_t buf[16] = v54;
          double v57 = v54;
          if ((v70 & 2) == 0) {
            goto LABEL_74;
          }
        }
LABEL_65:
        if (v58) {
          goto LABEL_67;
        }
        goto LABEL_66;
      }
LABEL_68:
      +[AVAudioTime timeWithAudioTimeStamp:sampleRate:](AVAudioTime, "timeWithAudioTimeStamp:sampleRate:", buf, v56, v57);
      (*(void (**)(void))(*(void *)(v3 + 16) + 16))();
LABEL_69:
      atomic_store(v64 + [*(id *)(v3 + 1056) frameLength], (unint64_t *)(v3 + 64));
      id v2 = v66;
      if (!*(unsigned char *)(v3 + 52)) {
        goto LABEL_5;
      }
    }
  }
  id v65 = v2;
  _Block_release(*(const void **)(v3 + 16));

  std::vector<char>::size_type v4 = *(void **)(v3 + 1200);
  if (v4)
  {
    *(void *)(v3 + 1208) = v4;
    operator delete(v4);
  }
  CADeprecated::AudioRingBuffer::~AudioRingBuffer((CADeprecated::AudioRingBuffer *)(v3 + 72));
  MEMORY[0x19F3ABB30](v3, 0x10F0C402021B9A6);
  id v2 = v65;
LABEL_5:
}

void sub_19D7CFE6C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AVAudioNodeTap::TapMessage::~TapMessage(AVAudioNodeTap::TapMessage *this)
{
}

uint64_t AVAudioNodeTap::AVAudioNodeTap(uint64_t a1, uint64_t a2, int a3, int a4, void *aBlock)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = _Block_copy(aBlock);
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 36));
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 256;
  *(unsigned char *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 56) = 2;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = &unk_1EEFA74C0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  bzero((void *)(a1 + 192), 0x314uLL);
  *(_WORD *)(a1 + 980) = 1;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_DWORD *)(a1 + 1064) = a4;
  *(void *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = 1;
  *(_DWORD *)(a1 + 1128) = 0;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1176) = 0;
  *(unsigned char *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = &unk_1EEFA7608;
  *(void *)(a1 + 1192) = a1;
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 1200), 8uLL, &__x);
  **(_DWORD **)(a1 + 1200) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 1224));
  return a1;
}

void sub_19D7CFFC8(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 1208) = v5;
    operator delete(v5);
  }
  CADeprecated::AudioRingBuffer::~AudioRingBuffer(v2);
  _Unwind_Resume(a1);
}

uint64_t AVAudioNodeTap::Uninitialize(uint64_t this)
{
  if (*(unsigned char *)(this + 52))
  {
    uint64_t v1 = this;
    uint64_t v2 = this + 24;
    uint64_t v3 = (caulk::pooled_semaphore_mutex *)(this + 1224);
    while (1)
    {
      uint64_t v4 = v2;
      char v5 = 1;
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v2);
      if (caulk::pooled_semaphore_mutex::try_lock(v3))
      {
        uint64_t v4 = 0;
        char v5 = 0;
        std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v4);
        goto LABEL_8;
      }
      std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v4);
      sched_yield();
      uint64_t v4 = (uint64_t)v3;
      char v5 = 1;
      caulk::pooled_semaphore_mutex::_lock(v3);
      if (caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(v2)) {
        break;
      }
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v4);
      sched_yield();
    }
    uint64_t v4 = 0;
    char v5 = 0;
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v4);
LABEL_8:
    CADeprecated::RealtimeMessenger::_PerformPendingMessages((CADeprecated::RealtimeMessenger *)AVAudioEngineImpl::sMessenger);
    *(_DWORD *)(v1 + 56) = 1;
    AVAEInputCallbackClient::SetRenderABL((AVAEInputCallbackClient *)(v1 + 1200), 0);
    CADeprecated::AudioRingBuffer::Deallocate((CADeprecated::AudioRingBuffer *)(v1 + 72));

    *(void *)(v1 + 1056) = 0;
    *(void *)(v1 + 40) = 0;
    *(unsigned char *)(v1 + 52) = 0;
    caulk::pooled_semaphore_mutex::_unlock(v3);
    return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v2);
  }
  return this;
}

void sub_19D7D010C(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v2);
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(uint64_t a1)
{
  uint64_t result = (uint64_t)pthread_self();
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)a1, memory_order_acquire);
  if (result)
  {
    if (explicit) {
      BOOL v4 = result == explicit;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4) {
      goto LABEL_11;
    }
  }
  else if (explicit)
  {
LABEL_11:
    _os_assert_log();
    _os_crash();
    __break(1u);
LABEL_12:
    atomic_store(0, (unint64_t *)a1);
    return caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 12));
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5 <= 0)
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  int v6 = v5 - 1;
  *(_DWORD *)(a1 + 8) = v6;
  if (!v6) {
    goto LABEL_12;
  }
  return result;
}

pthread_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(uint64_t a1)
{
  pthread_t result = pthread_self();
  unint64_t v3 = (unint64_t)result;
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)a1, memory_order_acquire);
  if (result)
  {
    if (explicit) {
      BOOL v5 = result == (pthread_t)explicit;
    }
    else {
      BOOL v5 = 0;
    }
    if (!v5) {
      goto LABEL_9;
    }
  }
  else if (explicit)
  {
LABEL_9:
    pthread_t result = (pthread_t)caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 12));
    atomic_store(v3, (unint64_t *)a1);
    int v6 = 1;
    goto LABEL_10;
  }
  int v6 = *(_DWORD *)(a1 + 8) + 1;
LABEL_10:
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

uint64_t std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*(void *)a1);
  }
  return a1;
}

uint64_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  unint64_t v3 = (unint64_t)v2;
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)a1, memory_order_acquire);
  if (v2)
  {
    if (explicit) {
      BOOL v5 = v2 == (pthread_t)explicit;
    }
    else {
      BOOL v5 = 0;
    }
    if (!v5) {
      goto LABEL_9;
    }
LABEL_7:
    ++*(_DWORD *)(a1 + 8);
    return 1;
  }
  if (!explicit) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t result = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 12));
  if (result)
  {
    atomic_store(v3, (unint64_t *)a1);
    uint64_t result = 1;
    *(_DWORD *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  }
  return a1;
}

uint64_t AVAudioNodeTap::Initialize(uint64_t this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(this + 52))
  {
    uint64_t v1 = (void *)this;
    pthread_t v2 = (caulk::pooled_semaphore_mutex *)(this + 1224);
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 1224));
    unint64_t v3 = (void *)(*(uint64_t (**)(void, void, void))(*(void *)*v1 + 40))(*v1, 0, *((unsigned int *)v1 + 2));
    v1[5] = v3;
    if (!v3)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      BOOL v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        uint64_t v29 = "AVAEInternal.h";
        __int16 v30 = 1024;
        int v31 = 71;
        __int16 v32 = 2080;
        int v33 = "AVAudioNodeTap.mm";
        __int16 v34 = 1024;
        int v35 = 58;
        __int16 v36 = 2080;
        uint64_t v37 = "Initialize";
        __int16 v38 = 2080;
        unsigned int v39 = "nil != _format";
        _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nil != _format");
      unint64_t v3 = (void *)v1[5];
    }
    *((_DWORD *)v1 + 12) = [v3 channelCount];
    id v5 = (id)v1[5];
    double v6 = *(double *)[(id)v1[5] streamDescription];
    int v7 = (double *)[(id)v1[5] streamDescription];
    unsigned int v8 = (v6 * 0.1);
    double v9 = *v7 * 0.4;
    unsigned int v10 = v9;
    unsigned int v11 = *((_DWORD *)v1 + 266);
    if (v11 < v8 || (unsigned int v8 = v9, v11 > v10)) {
      *((_DWORD *)v1 + 266) = v8;
    }
    if ([(id)v1[5] isInterleaved]) {
      int v12 = 1;
    }
    else {
      int v12 = [(id)v1[5] channelCount];
    }
    int v13 = *(_DWORD *)([(id)v1[5] streamDescription] + 24);
    CADeprecated::AudioRingBuffer::Deallocate((CADeprecated::AudioRingBuffer *)(v1 + 9));
    *((_DWORD *)v1 + 46) = v12;
    *((_DWORD *)v1 + 47) = v13;
    int v14 = 4 * v10 * v13;
    *((_DWORD *)v1 + 48) = 4 * v10;
    *((_DWORD *)v1 + 49) = v14;
    size_t v15 = ((v14 + 8) * v12);
    AVAudioFrameCount v16 = (char *)malloc_type_malloc(v15, 0x7C51E058uLL);
    uint64_t v17 = v16;
    if (v15) {
      BOOL v18 = v16 == 0;
    }
    else {
      BOOL v18 = 0;
    }
    if (v18)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v27 = std::bad_alloc::bad_alloc(exception);
    }
    bzero(v16, v15);
    v1[22] = v17;
    if (v12 > 0)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *((unsigned int *)v1 + 49);
      int v21 = &v17[8 * v12];
      do
      {
        *(void *)(v1[22] + 8 * v19) = v21;
        v21 += v20;
        ++v19;
      }
      while (v12 != v19);
    }
    for (uint64_t i = 0; i != 96; i += 3)
    {
      int v23 = &v1[i];
      v23[26] = 0;
      v23[27] = 0;
      *((_DWORD *)v23 + 56) = 0;
    }
    uint64_t v24 = 0;
    *((_DWORD *)v1 + 244) = 0;
    *((unsigned char *)v1 + 980) = 1;
    do
    {
      uint64_t v25 = &v1[v24];
      v25[26] = 0;
      v25[27] = 0;
      *((_DWORD *)v25 + 56) = 0;
      v24 += 3;
    }
    while (v24 != 96);
    *((_DWORD *)v1 + 244) = 0;
    *((unsigned char *)v1 + 980) = 1;
    v1[132] = 0;
    *((_DWORD *)v1 + 14) = 0;
    *((_WORD *)v1 + 26) = 257;
    *((unsigned char *)v1 + 1144) = 1;
    *((_DWORD *)v1 + 282) = 0;
    v1[144] = 0;
    v1[142] = *(void *)[(id)v1[5] streamDescription];
    AVAEInputCallbackClient::SetRenderABL((AVAEInputCallbackClient *)(v1 + 150), [(id)v1[5] channelCount]);
    return caulk::pooled_semaphore_mutex::_unlock(v2);
  }
  return this;
}

void sub_19D7D06C0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AVAudioNodeTap::RenderCallback(AVAudioNodeTap *this, _DWORD *a2, unsigned int *a3, const AudioTimeStamp *a4, UInt32 a5, const AudioBufferList *a6, AudioBufferList *a7)
{
  int v13 = (int)a4;
  if (a3)
  {
    unsigned int v17 = a3[14];
    int v7 = v17 & 6;
    uint64_t v8 = *((void *)a3 + 1);
    double v9 = *((double *)a3 + 2);
    if (*((unsigned char *)this + 1144))
    {
      *((void *)this + 144) = 0;
      *((unsigned char *)this + 1144) = 0;
LABEL_4:
      double v10 = *(double *)a3 + *((double *)this + 144);
      v7 |= 1u;
LABEL_5:
      *((double *)this + 134) = v10;
      *((void *)this + 135) = v8;
      *((double *)this + 136) = v9;
      *((_DWORD *)this + 282) = v7;
      *((_DWORD *)this + 290) = a5;
      goto LABEL_6;
    }
    int v38 = *((_DWORD *)this + 282);
    if (!v38) {
      goto LABEL_4;
    }
    double v39 = *((double *)this + 134);
    double v40 = vabdd_f64(*(double *)a3 + *((double *)this + 144), v39 + (double)*((int *)this + 290));
    double v41 = 2.22044605e-16;
    if (v40 >= 1.0) {
      double v41 = v40 * 2.22044605e-16;
    }
    if (v40 <= v41) {
      goto LABEL_4;
    }
    if ((v17 & 2) == 0 || (*((_DWORD *)this + 282) & 3) != 3)
    {
      if (CAIsDebuggerAttached()) {
        __asm { SVC             0 }
      }
LABEL_41:
      *((double *)this + 144) = v10 - *(double *)a3;
      if (v7) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    if ((v17 & 4) == 0)
    {
      double v42 = 1.0;
      if ((v38 & 4) == 0)
      {
LABEL_38:
        double v10 = v39 + round(*((double *)this + 142) / (v42 * 24000000.0) * (double)(v8 - *((void *)this + 135)));
        v7 |= 3u;
        goto LABEL_41;
      }
      int v7 = v17 & 2 | 4;
      double v9 = *((double *)this + 136);
    }
    double v42 = v9;
    goto LABEL_38;
  }
LABEL_6:
  v106 = (char *)this + 24;
  int v18 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 24);
  char v107 = v18;
  if (!v18
    || (*((_DWORD *)this + 14) - 1) < 2
    || (*a2 & 0x108) != 8
    || *((_DWORD *)this + 2) != v13
    || !*((unsigned char *)this + 52))
  {
    return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v106);
  }
  int64_t v19 = (uint64_t)v10;
  if (*((unsigned char *)this + 53))
  {
    atomic_store(v19, (unint64_t *)this + 8);
    *((unsigned char *)this + 5AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
    if (*((_DWORD *)this + 266) <= a5) {
      *((_DWORD *)this + 266) = 2 * a5;
    }
  }
  if (a5)
  {
    uint64_t v20 = *((unsigned int *)this + 48);
    if (v20 >= a5)
    {
      uint64_t v21 = v19 + a5;
      int v22 = *((_DWORD *)this + 244);
      if (*((void *)this + 3 * (v22 & 0x1F) + 27) > v19 || *((unsigned char *)this + 980) && *((unsigned char *)this + 981))
      {
        int v23 = (char *)this + 24 * ((v22 + 1) & 0x1F);
        *((void *)v23 + 26) = v19;
        *((void *)v23 + 27) = v19;
        *((_DWORD *)v23 + 56) = v22 + 1;
        int v24 = v22;
        atomic_compare_exchange_strong((atomic_uint *volatile)this + 244, (unsigned int *)&v24, v22 + 1);
        if (v24 != v22) {
          *((_DWORD *)this + 244) = v24;
        }
        *((unsigned char *)this + 980) = 0;
      }
      else if (v21 - *((void *)this + 3 * (v22 & 0x1F) + 26) > v20)
      {
        uint64_t v47 = v21 - v20;
        uint64_t v48 = *((void *)this + 3 * (v22 & 0x1F) + 27);
        if (v47 > v48) {
          uint64_t v48 = v47;
        }
        unsigned int v49 = (char *)this + 24 * ((v22 + 1) & 0x1F);
        *((void *)v49 + 26) = v47;
        *((void *)v49 + 27) = v48;
        *((_DWORD *)v49 + 56) = v22 + 1;
        int v50 = v22;
        atomic_compare_exchange_strong((atomic_uint *volatile)this + 244, (unsigned int *)&v50, v22 + 1);
        if (v50 != v22) {
          *((_DWORD *)this + 244) = v50;
        }
      }
      uint64_t v25 = (char *)this + 72;
      int v26 = (void **)*((void *)this + 22);
      uint64_t v27 = *((void *)this + 3 * (*((_DWORD *)this + 244) & 0x1F) + 27);
      uint64_t v28 = *((int *)this + 48);
      int v30 = *((_DWORD *)this + 46);
      int v29 = *((_DWORD *)this + 47);
      if (v27 >= v19)
      {
        int v32 = ((v28 & ((int)(v19 % v28) >> 31)) + v19 % v28) * v29;
      }
      else
      {
        int v31 = ((v28 & ((int)(v27 % v28) >> 31)) + v27 % v28) * v29;
        int v32 = ((v28 & ((int)(v19 % v28) >> 31)) + v19 % v28) * v29;
        if (v32 <= v31)
        {
          if (v30 >= 1)
          {
            int v101 = ((v28 & ((int)(v19 % v28) >> 31)) + v19 % v28) * v29;
            uint64_t v104 = v19 + a5;
            uint64_t v51 = v31;
            size_t v52 = *((_DWORD *)this + 49) - v31;
            int v99 = *((_DWORD *)this + 46);
            unsigned int v53 = v30 + 1;
            double v54 = (uint64_t *)*((void *)this + 22);
            do
            {
              uint64_t v55 = *v54++;
              bzero((void *)(v55 + v51), v52);
              --v53;
            }
            while (v53 > 1);
            int v32 = v101;
            unsigned int v56 = v99 + 1;
            double v57 = v26;
            do
            {
              int v58 = *v57++;
              bzero(v58, v101);
              --v56;
            }
            while (v56 > 1);
            int64_t v19 = (uint64_t)v10;
            uint64_t v21 = v104;
            uint64_t v25 = (char *)this + 72;
          }
        }
        else if (v30 >= 1)
        {
          int v100 = ((v28 & ((int)(v19 % v28) >> 31)) + v19 % v28) * v29;
          uint64_t v103 = v19 + a5;
          uint64_t v33 = v31;
          size_t v34 = v32 - v31;
          unsigned int v35 = v30 + 1;
          __int16 v36 = (uint64_t *)*((void *)this + 22);
          do
          {
            uint64_t v37 = *v36++;
            bzero((void *)(v37 + v33), v34);
            --v35;
          }
          while (v35 > 1);
          int64_t v19 = (uint64_t)v10;
          uint64_t v21 = v103;
          int v32 = v100;
          uint64_t v25 = (char *)this + 72;
        }
      }
      uint64_t v59 = *((int *)this + 48);
      int v60 = ((v59 & ((int)(v21 % v59) >> 31)) + v21 % v59) * *((_DWORD *)this + 47);
      uint64_t v61 = *((void *)this + 25);
      if (v60 <= v32)
      {
        if (!v61)
        {
          if ((int)a6->mNumberBuffers >= 1)
          {
            int v102 = ((v59 & ((int)(v21 % v59) >> 31)) + v21 % v59) * *((_DWORD *)this + 47);
            uint64_t v105 = v21;
            uint64_t v87 = v32;
            size_t v88 = *((_DWORD *)this + 49) - v32;
            unsigned int v89 = a6->mNumberBuffers + 1;
            uint64_t v90 = 16;
            v91 = v26;
            do
            {
              uint64_t v92 = (uint64_t)*v91++;
              memcpy((void *)(v92 + v87), *(const void **)((char *)&a6->mNumberBuffers + v90), v88);
              v90 += 16;
              --v89;
            }
            while (v89 > 1);
            UInt32 mNumberBuffers = a6->mNumberBuffers;
            uint64_t v21 = v105;
            if ((int)a6->mNumberBuffers >= 1)
            {
              p_mData = &a6->mBuffers[0].mData;
              unsigned int v95 = mNumberBuffers + 1;
              do
              {
                v97 = *v26++;
                v96 = v97;
                v98 = (char *)*p_mData;
                p_mData += 2;
                memcpy(v96, &v98[v88], v102);
                --v95;
              }
              while (v95 > 1);
            }
          }
          goto LABEL_61;
        }
        UInt32 v63 = v59 - v19 % v59 - (v59 & ((int)(v19 % v59) >> 31));
        CADeprecated::AudioRingBuffer::ConvertAndStore((uint64_t)v25, v32, a6, 0, v63);
        int v32 = 0;
        int v62 = v63 * *((_DWORD *)this + 36);
        a5 = (*((_DWORD *)this + 48) & ((int)(v21 % *((int *)this + 48)) >> 31)) + v21 % *((int *)this + 48);
      }
      else
      {
        if (!v61)
        {
          UInt32 v80 = a6->mNumberBuffers;
          if ((int)a6->mNumberBuffers >= 1)
          {
            size_t v81 = v60 - v32;
            v82 = (const void **)&a6->mBuffers[0].mData;
            unsigned int v83 = v80 + 1;
            do
            {
              uint64_t v84 = (uint64_t)*v26++;
              v85 = (void *)(v84 + v32);
              v86 = *v82;
              v82 += 2;
              memcpy(v85, v86, v81);
              --v83;
            }
            while (v83 > 1);
          }
          goto LABEL_61;
        }
        int v62 = 0;
      }
      CADeprecated::AudioRingBuffer::ConvertAndStore((uint64_t)v25, v32, a6, v62, a5);
LABEL_61:
      int v64 = *((_DWORD *)this + 244);
      id v65 = (char *)this + 24 * ((v64 + 1) & 0x1F) + 208;
      *(void *)id v65 = *((void *)this + 3 * (v64 & 0x1F) + 26);
      *((void *)v65 + 1) = v21;
      *((_DWORD *)v65 + 4) = v64 + 1;
      int v66 = v64;
      atomic_compare_exchange_strong((atomic_uint *volatile)this + 244, (unsigned int *)&v66, v64 + 1);
      if (v66 != v64) {
        *((_DWORD *)this + 244) = v66;
      }
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)this + 123, 1uLL, memory_order_acquire);
  *((double *)this + 124) = v10;
  *((void *)this + 125) = v8;
  *((double *)this + 126) = v9;
  long long v67 = v109;
  *(_OWORD *)((char *)this + 1016) = v108;
  *(_OWORD *)((char *)this + 1032) = v67;
  *((_DWORD *)this + 262) = v7;
  atomic_fetch_add_explicit((atomic_ullong *volatile)this + 123, 1uLL, memory_order_release);
  int v68 = *((_DWORD *)this + 244);
  int v69 = (char *)this + 24 * (v68 & 0x1F);
  int64_t v70 = *((unsigned int *)this + 266);
  uint64_t v71 = (int64_t *)(v69 + 208);
  uint64_t v72 = (int64_t *)(v69 + 216);
  long long v73 = v69 + 224;
  int v74 = 8;
  while (1)
  {
    int64_t v75 = *v71;
    int64_t v76 = *v72;
    if (*v73 == v68) {
      break;
    }
    if (!--v74) {
      return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v106);
    }
  }
  int64_t v77 = atomic_load((unint64_t *)this + 8);
  if (v77 + v70 < v75 || v77 > v76)
  {
    atomic_store(v75, (unint64_t *)this + 8);
    int64_t v77 = v75;
  }
  if (v76 - v77 >= v70 && !*((unsigned char *)this + 1184)) {
    CADeprecated::RealtimeMessenger::PerformAsync(AVAudioEngineImpl::sMessenger, (unsigned char *)this + 1168);
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v106);
}

void sub_19D7D0D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *GetAudioFormatGetPropertyProc(void)
{
  uint64_t result = (void *)GetAudioFormatGetPropertyProc(void)::proc;
  if (!GetAudioFormatGetPropertyProc(void)::proc)
  {
    uint64_t v1 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 1);
    if (v1)
    {
      uint64_t result = dlsym(v1, "AudioFormatGetProperty");
      GetAudioFormatGetPropertyProc(void)::proc = (uint64_t)result;
    }
    else
    {
      return (void *)GetAudioFormatGetPropertyProc(void)::proc;
    }
  }
  return result;
}

uint64_t AVVCExternalDeviceRecordingEngine::getRecordRoute(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void *)(a1 + 376);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v5 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock((std::mutex *)(v4 + 56));
  }
  uint64_t v6 = [NSString stringWithString:@"ExternalDeviceInput"];
  int v7 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = v6;

  if (!v5) {
    std::mutex::unlock((std::mutex *)(v4 + 56));
  }
  AVVCRouteManager::getRecordRoute(*(void *)(a1 + 376), a2);
  return 0;
}

void sub_19D7D1264(_Unwind_Exception *exception_object)
{
  if (!v2) {
    std::mutex::unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AVVCExternalDeviceRecordingEngine::getEngineType(AVVCExternalDeviceRecordingEngine *this)
{
  return 3;
}

uint64_t AVVCExternalDeviceRecordingEngine::setSessionIsRecordingFlag(AVVCExternalDeviceRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "setSessionIsRecordingFlag");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::disposeAudioCaptures(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::logAudioCaptures()
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::setupAudioCaptures(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

void AVVCExternalDeviceRecordingEngine::updateStreamStoppedState(AVVCExternalDeviceRecordingEngine *this)
{
}

uint64_t AVVCExternalDeviceRecordingEngine::updateMeterLevels(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::enableMetering(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::enableSiriListeningMode(AVVCExternalDeviceRecordingEngine *this)
{
  return 0;
}

__n128 AVVCExternalDeviceRecordingEngine::getRecordQueueFormat@<Q0>(AVVCExternalDeviceRecordingEngine *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 24);
  long long v3 = *(_OWORD *)((char *)this + 40);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *((void *)this + 7);
  return result;
}

uint64_t AVVCExternalDeviceRecordingEngine::destroyRecordEngine(AVVCExternalDeviceRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "destroyRecordingEngine");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::stopRecording(AVVCExternalDeviceRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "stopRecording");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::startRecording(AVVCExternalDeviceRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "startRecording");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::prepareRecording(AVVCExternalDeviceRecordingEngine *this, NSDictionary *a2)
{
  TraceMethod::TraceMethod((TraceMethod *)v4, "prepareRecoding");
  AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
  TraceMethod::~TraceMethod((TraceMethod *)v4);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::Initialize(AVVCExternalDeviceRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "Initialize");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCExternalDeviceRecordingEngine::asbdForClientSettings(AVVCExternalDeviceRecordingEngine *this, NSDictionary *a2, CAStreamBasicDescription *a3)
{
  return 0;
}

void AVVCExternalDeviceRecordingEngine::~AVVCExternalDeviceRecordingEngine(AVVCRecordingEngine *this)
{
  AVVCExternalDeviceRecordingEngine::~AVVCExternalDeviceRecordingEngine(this);

  JUMPOUT(0x19F3ABB30);
}

{
  unsigned char v2[8];

  *(void *)this = &unk_1EEFA7240;
  TraceMethod::TraceMethod((TraceMethod *)v2, "~AVVCExternalDeviceRecordingEngine");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  AVVCRecordingEngine::~AVVCRecordingEngine(this);
}

void AVVCExternalDeviceRecordingEngine::AVVCExternalDeviceRecordingEngine(uint64_t a1, uint64_t a2)
{
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(a1[1]);
    int v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void AVVCRecordingEngineMap::AVVCRecordingEngineMap(AVVCRecordingEngineMap *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  MEMORY[0x19F3AB9F0]((char *)this + 24);
  if (kAVVCScope)
  {
    uint64_t v1 = *(id *)kAVVCScope;
    if (!v1) {
      return;
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
    id v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    uint64_t v4 = "AVVCRecordingEngineMap.mm";
    __int16 v5 = 1024;
    int v6 = 14;
    _os_log_impl(&dword_19D794000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngineMap::AVVCRecordingEngineMap() Created new Engine Map", (uint8_t *)&v3, 0x12u);
  }
}

void sub_19D7D16A8(_Unwind_Exception *exception_object)
{
}

void AVVCRecordingEngineMap::~AVVCRecordingEngineMap(AVVCRecordingEngineMap *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    id v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    id v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    __int16 v5 = "AVVCRecordingEngineMap.mm";
    __int16 v6 = 1024;
    int v7 = 19;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngineMap::~AVVCRecordingEngineMap() Destroyed Engine Map", (uint8_t *)&v4, 0x12u);
  }

LABEL_8:
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 24));
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(*((void **)this + 1));
}

void AVVCRecordingEngineMap::findEngine(AVVCRecordingEngineMap *this, uint64_t a2, unint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  __int16 v6 = (std::recursive_mutex *)(a2 + 24);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v7 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::recursive_mutex::lock(v6);
  }
  double v10 = *(void **)(a2 + 8);
  double v9 = (void *)(a2 + 8);
  uint64_t v8 = v10;
  if (!v10) {
    goto LABEL_16;
  }
  unsigned int v11 = v9;
  do
  {
    unint64_t v12 = v8[4];
    BOOL v13 = v12 >= a3;
    if (v12 >= a3) {
      int v14 = v8;
    }
    else {
      int v14 = v8 + 1;
    }
    if (v13) {
      unsigned int v11 = v8;
    }
    uint64_t v8 = (void *)*v14;
  }
  while (*v14);
  if (v11 == v9 || v11[4] > a3)
  {
LABEL_16:
    if (kAVVCScope)
    {
      size_t v15 = *(id *)kAVVCScope;
      if (!v15)
      {
LABEL_23:
        *(void *)this = 0;
        *((void *)this + 1) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      size_t v15 = MEMORY[0x1E4F14500];
      id v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315650;
      uint64_t v20 = "AVVCRecordingEngineMap.mm";
      __int16 v21 = 1024;
      int v22 = 39;
      __int16 v23 = 2048;
      unint64_t v24 = a3;
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No recording engine found for stream(%lu)", (uint8_t *)&v19, 0x1Cu);
    }

    goto LABEL_23;
  }
  uint64_t v18 = v11[5];
  uint64_t v17 = v11[6];
  *(void *)this = v18;
  *((void *)this + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_24:
  if (!v7) {
    std::recursive_mutex::unlock(v6);
  }
}

void AVVCRecordingEngineMap::findEngine(std::__shared_weak_count **this, NSString *a2, void *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  unsigned int v44 = (std::recursive_mutex *)(a2 + 3);
  int v47 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::recursive_mutex::lock(v44);
  }
  if (v5 && [v5 length])
  {
    uint64_t v8 = (NSString *)*a2;
    __int16 v6 = a2 + 1;
    int v7 = v8;
    if (v8 != v6)
    {
      uint64_t v45 = (AVVCRecordingEngineMap *)this;
      while (kAVVCScope)
      {
        id v9 = *(id *)kAVVCScope;
        if (v9) {
          goto LABEL_13;
        }
LABEL_27:
        unint64_t v24 = AVVCRouteManager::getRecordDeviceUID(*((id **)v7[5] + 47));
        int v25 = [v5 isEqualToString:v24];

        if (v25)
        {
          if (kAVVCScope)
          {
            id v33 = *(id *)kAVVCScope;
            if (!v33) {
              goto LABEL_63;
            }
          }
          else
          {
            id v33 = (id)MEMORY[0x1E4F14500];
            id v35 = MEMORY[0x1E4F14500];
          }
          __int16 v36 = v33;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v37 = (*(uint64_t (**)(NSString))(*(void *)v7[5] + 320))(v7[5]);
            if (v37 > 4) {
              int v38 = "ILLEGAL";
            }
            else {
              int v38 = off_1E59657C0[v37];
            }
            Get4CCFromInt(*((_DWORD *)v7[5] + 70));
            double v40 = (__CFString *)objc_claimAutoreleasedReturnValue();
            double v41 = AVVCRouteManager::getRecordDeviceUID(*((id **)v7[5] + 47));
            double v42 = (const char *)v7[4];
            *(_DWORD *)buf = 136316418;
            *(void *)&uint8_t buf[4] = "AVVCRecordingEngineMap.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 64;
            __int16 v49 = 2080;
            int v50 = v38;
            __int16 v51 = 2112;
            size_t v52 = v40;
            __int16 v53 = 2112;
            id v54 = v41;
            __int16 v55 = 2048;
            unsigned int v56 = v42;
            _os_log_impl(&dword_19D794000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found matching engine of type(%s) for activation mode(%@) and deviceUID(%@) with streamHandle(%lu)", buf, 0x3Au);

            this = (std::__shared_weak_count **)v45;
          }

LABEL_63:
          *this = (std::__shared_weak_count *)v7[5];
          id v43 = (std::__shared_weak_count *)v7[6];
          this[1] = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_65;
        }
        int v26 = (NSString *)v7[1];
        if (v26)
        {
          do
          {
            uint64_t v27 = v26;
            int v26 = (NSString *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            uint64_t v27 = (NSString *)v7[2];
            BOOL v28 = *v27 == v7;
            int v7 = v27;
          }
          while (!v28);
        }
        int v7 = v27;
        if (v27 == v6) {
          goto LABEL_34;
        }
      }
      double v10 = (void *)MEMORY[0x1E4F14500];
      id v11 = MEMORY[0x1E4F14500];
      id v9 = v10;
LABEL_13:
      unint64_t v12 = v9;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
LABEL_26:

        goto LABEL_27;
      }
      int v14 = (const char *)v7[4];
      BOOL v13 = v7[5];
      size_t v15 = (std::__shared_weak_count *)v7[6];
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v13)
        {
          id v16 = NSString;
          uint64_t v17 = v13[34];
          uint64_t v18 = v15->__shared_owners_ + 1;
LABEL_19:
          int v19 = [v16 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v13, v17, v18];
LABEL_21:
          uint64_t v20 = v19;
          AVVCRouteManager::getRecordDeviceUID(*((id **)v7[5] + 47));
          id v21 = (id)objc_claimAutoreleasedReturnValue();
          unsigned int v22 = (*(uint64_t (**)(NSString))(*(void *)v7[5] + 320))(v7[5]);
          __int16 v23 = "ILLEGAL";
          if (v22 <= 4) {
            __int16 v23 = off_1E59657C0[v22];
          }
          *(_DWORD *)buf = 136316418;
          *(void *)&uint8_t buf[4] = "AVVCRecordingEngineMap.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 62;
          __int16 v49 = 2048;
          int v50 = v14;
          __int16 v51 = 2112;
          size_t v52 = v20;
          __int16 v53 = 2112;
          id v54 = v21;
          __int16 v55 = 2080;
          unsigned int v56 = v23;
          _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Iterating through EngineMap. AVVCStreamHandle(%lu). AVVCRecordEngine[%@]. DeviceUID(%@). EngineType(%s)", buf, 0x3Au);

          this = (std::__shared_weak_count **)v45;
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }

          goto LABEL_26;
        }
      }
      else if (v13)
      {
        uint64_t v18 = 0;
        id v16 = NSString;
        uint64_t v17 = v13[34];
        goto LABEL_19;
      }
      int v19 = @"(0x0) use_count:0";
      goto LABEL_21;
    }
LABEL_34:
    if (kAVVCScope)
    {
      int v29 = *(id *)kAVVCScope;
      if (!v29)
      {
LABEL_51:
        *this = 0;
        this[1] = 0;
        goto LABEL_65;
      }
    }
    else
    {
      int v29 = MEMORY[0x1E4F14500];
      id v34 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AVVCRecordingEngineMap.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 68;
      __int16 v49 = 2112;
      int v50 = (const char *)v5;
      _os_log_impl(&dword_19D794000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No matching plugin engine found for deviceUUID: %@", buf, 0x1Cu);
    }

    goto LABEL_51;
  }
  AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)this, (uint64_t)a2, 1uLL);
  if (!*this)
  {
    AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)buf, (uint64_t)a2, 2uLL);
    int v30 = this[1];
    uint64_t v31 = *(void *)buf;
    *(_OWORD *)this = *(_OWORD *)buf;
    if (v30)
    {
      uint64_t v46 = v31;
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      uint64_t v31 = v46;
    }
    if (!v31)
    {
      if (kAVVCScope)
      {
        int v32 = *(id *)kAVVCScope;
        if (!v32) {
          goto LABEL_65;
        }
      }
      else
      {
        int v32 = MEMORY[0x1E4F14500];
        id v39 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AVVCRecordingEngineMap.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 55;
        _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No matching engine found for nil deviceUUID", buf, 0x12u);
      }
    }
  }
LABEL_65:
  if (!v47) {
    std::recursive_mutex::unlock(v44);
  }
}

void sub_19D7D1F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  if (!a19) {
    std::recursive_mutex::unlock(a12);
  }

  _Unwind_Resume(a1);
}

void AVVCRecordingEngineMap::insertEngine(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  __int16 v6 = (std::recursive_mutex *)(a1 + 3);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v7 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::recursive_mutex::lock(v6);
  }
  id v9 = (uint64_t *)(a1 + 1);
  uint64_t v8 = a1[1];
  if (v8)
  {
    double v10 = (uint64_t *)(a1 + 1);
    do
    {
      unint64_t v11 = v8[4];
      BOOL v12 = v11 >= a2;
      if (v11 >= a2) {
        BOOL v13 = v8;
      }
      else {
        BOOL v13 = v8 + 1;
      }
      if (v12) {
        double v10 = v8;
      }
      uint64_t v8 = (void *)*v13;
    }
    while (*v13);
    if (v10 != v9 && v10[4] <= a2)
    {
      if (kAVVCScope)
      {
        id v14 = *(id *)kAVVCScope;
        if (!v14) {
          goto LABEL_32;
        }
      }
      else
      {
        id v14 = (id)MEMORY[0x1E4F14500];
        id v15 = MEMORY[0x1E4F14500];
      }
      id v16 = v14;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
LABEL_31:

LABEL_32:
        std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::erase(a1, v10);
        goto LABEL_33;
      }
      uint64_t v17 = v10[5];
      uint64_t v18 = (std::__shared_weak_count *)v10[6];
      id v39 = v18;
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v17)
        {
          int v19 = NSString;
          uint64_t v20 = *(void *)(v17 + 272);
          uint64_t v21 = v18->__shared_owners_ + 1;
LABEL_26:
          unsigned int v22 = [v19 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v17, v20, v21];
LABEL_28:
          *(_DWORD *)buf = 136315906;
          double v42 = "AVVCRecordingEngineMap.mm";
          __int16 v43 = 1024;
          int v44 = 77;
          __int16 v45 = 2112;
          uint64_t v46 = v22;
          __int16 v47 = 2048;
          unint64_t v48 = a2;
          _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing engine[%@] for stream(%llu) from the map", buf, 0x26u);
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }

          goto LABEL_31;
        }
      }
      else if (v17)
      {
        uint64_t v21 = 0;
        int v19 = NSString;
        uint64_t v20 = *(void *)(v17 + 272);
        goto LABEL_26;
      }
      unsigned int v22 = @"(0x0) use_count:0";
      goto LABEL_28;
    }
  }
LABEL_33:
  long long v40 = *a3;
  if (*((void *)a3 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a3 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v23 = (uint64_t *)*v9;
  unint64_t v24 = (uint64_t *)(a1 + 1);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v24 = v23;
        unint64_t v25 = v23[4];
        if (v25 <= a2) {
          break;
        }
        __int16 v23 = (uint64_t *)*v24;
        id v9 = v24;
        if (!*v24) {
          goto LABEL_42;
        }
      }
      if (v25 >= a2) {
        break;
      }
      __int16 v23 = (uint64_t *)v24[1];
      if (!v23)
      {
        id v9 = v24 + 1;
        goto LABEL_42;
      }
    }
    BOOL v28 = (std::__shared_weak_count *)*((void *)&v40 + 1);
  }
  else
  {
LABEL_42:
    int v26 = (char *)operator new(0x38uLL);
    *((void *)v26 + 4) = a2;
    *(_OWORD *)(v26 + 40) = v40;
    *(void *)int v26 = 0;
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 2) = v24;
    *id v9 = (uint64_t)v26;
    uint64_t v27 = (void *)**a1;
    if (v27)
    {
      *a1 = v27;
      int v26 = (char *)*v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v26);
    a1[2] = (void *)((char *)a1[2] + 1);
    BOOL v28 = 0;
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (!kAVVCScope)
  {
    id v29 = (id)MEMORY[0x1E4F14500];
    id v30 = MEMORY[0x1E4F14500];
LABEL_52:
    uint64_t v31 = v29;
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
LABEL_63:

      goto LABEL_64;
    }
    uint64_t v32 = *(void *)a3;
    id v33 = (std::__shared_weak_count *)*((void *)a3 + 1);
    if (v33)
    {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v32)
      {
        id v34 = NSString;
        uint64_t v35 = *(void *)(v32 + 272);
        uint64_t v36 = v33->__shared_owners_ + 1;
LABEL_58:
        unsigned int v37 = [v34 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v32, v35, v36];
LABEL_60:
        int v38 = a1[2];
        *(_DWORD *)buf = 136316162;
        double v42 = "AVVCRecordingEngineMap.mm";
        __int16 v43 = 1024;
        int v44 = 81;
        __int16 v45 = 2112;
        uint64_t v46 = v37;
        __int16 v47 = 2048;
        unint64_t v48 = a2;
        __int16 v49 = 2048;
        int v50 = v38;
        _os_log_impl(&dword_19D794000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Added engine[%@] for stream(%llu) to the map of size %ld", buf, 0x30u);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }

        goto LABEL_63;
      }
    }
    else if (v32)
    {
      uint64_t v36 = 0;
      id v34 = NSString;
      uint64_t v35 = *(void *)(v32 + 272);
      goto LABEL_58;
    }
    unsigned int v37 = @"(0x0) use_count:0";
    goto LABEL_60;
  }
  id v29 = *(id *)kAVVCScope;
  if (v29) {
    goto LABEL_52;
  }
LABEL_64:
  if (!v7) {
    std::recursive_mutex::unlock(v6);
  }
}

void sub_19D7D2460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }

  if (!v15) {
    std::recursive_mutex::unlock(v13);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  id v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      int v4 = v3;
      id v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    id v5 = a2;
    do
    {
      int v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      id v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  int v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, a2);
  uint64_t v8 = (std::__shared_weak_count *)a2[6];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }

  operator delete(a2);
}

void AVVCRecordingEngineMap::removeEngine(AVVCRecordingEngineMap *this, unint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v4 = (std::recursive_mutex *)((char *)this + 24);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v5 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::recursive_mutex::lock(v4);
  }
  BOOL v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    int v7 = (uint64_t *)((char *)this + 8);
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        double v10 = v6;
      }
      else {
        double v10 = v6 + 1;
      }
      if (v9) {
        int v7 = v6;
      }
      BOOL v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 != (uint64_t *)((char *)this + 8) && v7[4] <= a2)
    {
      uint64_t v14 = v7[5];
      BOOL v13 = (std::__shared_weak_count *)v7[6];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (kAVVCScope)
      {
        id v15 = *(id *)kAVVCScope;
        if (!v15)
        {
LABEL_44:
          std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::erase((uint64_t **)this, v7);
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          goto LABEL_23;
        }
      }
      else
      {
        id v15 = (id)MEMORY[0x1E4F14500];
        id v16 = MEMORY[0x1E4F14500];
      }
      uint64_t v17 = v15;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
LABEL_43:

        goto LABEL_44;
      }
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v14)
        {
          uint64_t v18 = NSString;
          uint64_t v19 = *(void *)(v14 + 272);
          uint64_t v20 = v13->__shared_owners_ + 1;
LABEL_38:
          uint64_t v21 = [v18 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v14, v19, v20];
LABEL_40:
          *(_DWORD *)buf = 136315906;
          __int16 v23 = "AVVCRecordingEngineMap.mm";
          __int16 v24 = 1024;
          int v25 = 91;
          __int16 v26 = 2112;
          uint64_t v27 = v21;
          __int16 v28 = 2048;
          unint64_t v29 = a2;
          _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing engine[%@] for stream(%llu) from the map", buf, 0x26u);
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }

          goto LABEL_43;
        }
      }
      else if (v14)
      {
        uint64_t v20 = 0;
        uint64_t v18 = NSString;
        uint64_t v19 = *(void *)(v14 + 272);
        goto LABEL_38;
      }
      uint64_t v21 = @"(0x0) use_count:0";
      goto LABEL_40;
    }
  }
  if (kAVVCScope)
  {
    unint64_t v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v11 = MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    __int16 v23 = "AVVCRecordingEngineMap.mm";
    __int16 v24 = 1024;
    int v25 = 95;
    __int16 v26 = 2048;
    uint64_t v27 = (__CFString *)a2;
    _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine for streamID(%llu) not found", buf, 0x1Cu);
  }

LABEL_23:
  if (!v5) {
    std::recursive_mutex::unlock(v4);
  }
}

void sub_19D7D2848(_Unwind_Exception *a1)
{
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);

    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
  }
  if (!v4) {
    std::recursive_mutex::unlock(v1);
  }
  _Unwind_Resume(a1);
}

void AVVCRecordingEngineMap::for_each_engine(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v5 = (std::recursive_mutex *)(a1 + 3);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v6 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable)
  {
    std::recursive_mutex::lock(v5);
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
  }
  int v7 = IsSerializationEnabled(void)::enable;
  int v20 = v6;
  if (IsSerializationEnabled(void)::enable) {
    unint64_t v8 = dispatch_group_create();
  }
  else {
    unint64_t v8 = 0;
  }
  unint64_t v11 = (void *)*a1;
  double v10 = a1 + 1;
  BOOL v9 = v11;
  if (v11 != v10)
  {
    do
    {
      uint64_t v13 = v9[5];
      id v12 = (std::__shared_weak_count *)v9[6];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7) {
        dispatch_group_enter(v8);
      }
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3321888768;
      v27[2] = ___ZN22AVVCRecordingEngineMap15for_each_engineENSt3__18functionIFvNS0_10shared_ptrI19AVVCRecordingEngineEEEEEPKc_block_invoke;
      v27[3] = &unk_1EEFA8B68;
      std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::__value_func[abi:ne180100]((uint64_t)v29, a2);
      v29[4] = v13;
      uint64_t v30 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v31 = v7;
      __int16 v28 = v8;
      (*(void (**)(uint64_t, void *, const char *))(*(void *)v13 + 360))(v13, v27, "for_each_engine");

      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](v29);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v14 = (void *)v9[1];
      if (v14)
      {
        do
        {
          id v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          id v15 = (void *)v9[2];
          BOOL v16 = *v15 == (void)v9;
          BOOL v9 = v15;
        }
        while (!v16);
      }
      BOOL v9 = v15;
    }
    while (v15 != v10);
  }
  if (v7 && dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v17 = CALog::LogObjIfEnabled(1, kAVVCScope);
    uint64_t v18 = v17;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      unsigned int v22 = "AVVCRecordingEngineMap.mm";
      __int16 v23 = 1024;
      int v24 = 132;
      __int16 v25 = 2080;
      __int16 v26 = a3;
      _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC_TIMEOUT occurred : for_each_engine : EngineDispatchGroup timed out! Caller: %s", buf, 0x1Cu);
    }

    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      unsigned int v22 = a3;
      _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ASSERTION FAILURE: AVVC_TIMEOUT occurred : for_each_engine timed out! Caller: %s", buf, 0xCu);
    }
    __break(1u);
  }
  else
  {

    if (!v20) {
      std::recursive_mutex::unlock(v5);
    }
  }
}

void sub_19D7D2BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }

  if (!a13) {
    std::recursive_mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

void ___ZN22AVVCRecordingEngineMap15for_each_engineENSt3__18functionIFvNS0_10shared_ptrI19AVVCRecordingEngineEEEEEPKc_block_invoke(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 72);
  int v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(unsigned char *)(a1 + 88)) {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_19D7D2CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *__destroy_helper_block_ea8_40c65_ZTSNSt3__18functionIFvNS_10shared_ptrI19AVVCRecordingEngineEEEEE72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

uint64_t __copy_helper_block_ea8_40c65_ZTSNSt3__18functionIFvNS_10shared_ptrI19AVVCRecordingEngineEEEEE72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void AVVCRecordingEngineMap::listEngines(AVVCRecordingEngineMap *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  __int16 v25 = (std::recursive_mutex *)((char *)this + 24);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v26 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::recursive_mutex::lock(v25);
  }
  if (*((void *)this + 2))
  {
    uint64_t v4 = *(char **)this;
    id v2 = (char *)this + 8;
    uint64_t v3 = v4;
    if (v4 != v2)
    {
      while (1)
      {
        if (kAVVCScope)
        {
          id v5 = *(id *)kAVVCScope;
          if (!v5) {
            goto LABEL_25;
          }
        }
        else
        {
          int v6 = (void *)MEMORY[0x1E4F14500];
          id v7 = MEMORY[0x1E4F14500];
          id v5 = v6;
        }
        unint64_t v8 = v5;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          break;
        }
LABEL_24:

LABEL_25:
        int v20 = (char *)*((void *)v3 + 1);
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            int v20 = *(char **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (char *)*((void *)v3 + 2);
            BOOL v22 = *(void *)v21 == (void)v3;
            uint64_t v3 = v21;
          }
          while (!v22);
        }
        uint64_t v3 = v21;
        if (v21 == v2) {
          goto LABEL_39;
        }
      }
      uint64_t v9 = *((void *)v3 + 5);
      double v10 = (std::__shared_weak_count *)*((void *)v3 + 6);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v9)
        {
          unint64_t v11 = NSString;
          uint64_t v12 = *(void *)(v9 + 272);
          uint64_t v13 = v10->__shared_owners_ + 1;
LABEL_17:
          uint64_t v14 = [v11 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v9, v12, v13];
LABEL_19:
          id v15 = v14;
          unsigned int v16 = (*(uint64_t (**)(void))(**((void **)v3 + 5) + 320))(*((void *)v3 + 5));
          uint64_t v17 = "ILLEGAL";
          if (v16 <= 4) {
            uint64_t v17 = off_1E59657C0[v16];
          }
          uint64_t v18 = *((void *)v3 + 4);
          uint64_t v19 = AVVCRouteManager::getRecordDeviceUID(*(id **)(*((void *)v3 + 5) + 376));
          *(_DWORD *)buf = 136316418;
          __int16 v28 = "AVVCRecordingEngineMap.mm";
          __int16 v29 = 1024;
          int v30 = 147;
          __int16 v31 = 2112;
          uint64_t v32 = v15;
          __int16 v33 = 2080;
          id v34 = v17;
          __int16 v35 = 2048;
          uint64_t v36 = v18;
          __int16 v37 = 2112;
          int v38 = v19;
          _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine[%@] type(%s) stream(%llu) deviceUID(%@)", buf, 0x3Au);

          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }

          goto LABEL_24;
        }
      }
      else if (v9)
      {
        uint64_t v13 = 0;
        unint64_t v11 = NSString;
        uint64_t v12 = *(void *)(v9 + 272);
        goto LABEL_17;
      }
      uint64_t v14 = @"(0x0) use_count:0";
      goto LABEL_19;
    }
  }
  else
  {
    if (kAVVCScope)
    {
      __int16 v23 = *(id *)kAVVCScope;
      if (!v23) {
        goto LABEL_39;
      }
    }
    else
    {
      __int16 v23 = MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v28 = "AVVCRecordingEngineMap.mm";
      __int16 v29 = 1024;
      int v30 = 142;
      _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Empty Engine Map", buf, 0x12u);
    }
  }
LABEL_39:
  if (!v26) {
    std::recursive_mutex::unlock(v25);
  }
}

void sub_19D7D31F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::recursive_mutex *a13, int a14, int a15)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }

  if (!a15) {
    std::recursive_mutex::unlock(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t AUGraphParser::TraverseGraphNodes(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t result = std::function<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(*(void *)(a5 + 24), a3, a4);
  if (!result)
  {
    double v10 = (void *)(a3 + 72);
    unint64_t v11 = (uint64_t *)(a3 + 80);
    if (a1 == 1) {
      unint64_t v11 = (uint64_t *)(a3 + 56);
    }
    uint64_t v12 = *v11;
    if (a1 == 1) {
      double v10 = (void *)(a3 + 48);
    }
    unint64_t v13 = (unint64_t)(v12 - *v10) >> 3;
    if ((int)v13 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v14 = 0;
      BOOL v15 = 1;
      do
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 24))(a3, a1, v14);
        if (v16)
        {
          uint64_t v19 = 0;
          int v20 = -1;
          uint64_t v21 = 0;
          int v22 = -1;
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a3 + 32))(a3, a1, v14, &v19) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            uint64_t v17 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              id v24 = "AVAEInternal.h";
              __int16 v25 = 1024;
              int v26 = 71;
              __int16 v27 = 2080;
              __int16 v28 = "AVAudioEngineGraph.mm";
              __int16 v29 = 1024;
              int v30 = 89;
              __int16 v31 = 2080;
              uint64_t v32 = "TraverseGraphNodes";
              __int16 v33 = 2080;
              id v34 = "inCurrNode.GetConnection(inDirection, bus, conn)";
              _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inCurrNode.GetConnection(inDirection, bus, conn)");
          }
          int v18 = a2
              ? AUGraphParser::TraverseGraphNodes(a1, 1, v16, &v19, a5)
              : std::function<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(*(void *)(a5 + 24), v16, (uint64_t)&v19);
          if (v18 == 1) {
            break;
          }
        }
        uint64_t v14 = (v14 + 1);
        BOOL v15 = (int)v14 < (int)v13;
      }
      while (v13 != v14);
    }
    return v15;
  }
  return result;
}

uint64_t std::function<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, a2, &v4);
}

uint64_t AUGraphParser::TraverseGraphNodesBFS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = std::function<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(*(void *)(a4 + 24), a2, a3);
  if (!v7)
  {
    uint64_t v28 = (uint64_t)&v28;
    __int16 v29 = &v28;
    uint64_t v30 = 0;
    AUGraphNodeBase::GetValidConnections(a2, a1, &v28);
    if (v30 == 1)
    {
      unint64_t v8 = v29;
      uint64_t v9 = 4;
      if (a1 == 1) {
        uint64_t v9 = 2;
      }
      uint64_t v10 = v29[v9];
      if (!v10)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        unint64_t v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          uint64_t v32 = "AVAEInternal.h";
          __int16 v33 = 1024;
          int v34 = 71;
          __int16 v35 = 2080;
          uint64_t v36 = "AVAudioEngineGraph.mm";
          __int16 v37 = 1024;
          int v38 = 123;
          __int16 v39 = 2080;
          long long v40 = "TraverseGraphNodesBFS";
          __int16 v41 = 2080;
          double v42 = "connNode";
          _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "connNode");
        unint64_t v8 = v29;
      }
      uint64_t v7 = AUGraphParser::TraverseGraphNodesBFS(a1, v10, v8 + 2, a4);
    }
    else
    {
      uint64_t v12 = v29;
      if (v29 == &v28)
      {
LABEL_49:
        uint64_t v7 = 0;
      }
      else
      {
        do
        {
          if (a1 == 1) {
            uint64_t v13 = 2;
          }
          else {
            uint64_t v13 = 4;
          }
          uint64_t v14 = v12[v13];
          if (!v14)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            BOOL v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              uint64_t v32 = "AVAEInternal.h";
              __int16 v33 = 1024;
              int v34 = 71;
              __int16 v35 = 2080;
              uint64_t v36 = "AVAudioEngineGraph.mm";
              __int16 v37 = 1024;
              int v38 = 131;
              __int16 v39 = 2080;
              long long v40 = "TraverseGraphNodesBFS";
              __int16 v41 = 2080;
              double v42 = "connNode";
              _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "connNode");
          }
          if (std::function<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(*(void *)(a4 + 24), v14, (uint64_t)(v12 + 2)) == 1)
          {
LABEL_51:
            uint64_t v7 = 1;
            goto LABEL_52;
          }
          uint64_t v12 = (uint64_t *)v12[1];
        }
        while (v12 != &v28);
        uint64_t v16 = v29;
        if (v29 == &v28) {
          goto LABEL_49;
        }
        while (2)
        {
          if (a1 == 1) {
            uint64_t v17 = 2;
          }
          else {
            uint64_t v17 = 4;
          }
          uint64_t v18 = v16[v17];
          if (!v18)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            uint64_t v19 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              uint64_t v32 = "AVAEInternal.h";
              __int16 v33 = 1024;
              int v34 = 71;
              __int16 v35 = 2080;
              uint64_t v36 = "AVAudioEngineGraph.mm";
              __int16 v37 = 1024;
              int v38 = 144;
              __int16 v39 = 2080;
              long long v40 = "TraverseGraphNodesBFS";
              __int16 v41 = 2080;
              double v42 = "connNodeFirst";
              _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "connNodeFirst");
          }
          uint64_t v25 = (uint64_t)&v25;
          int v26 = &v25;
          uint64_t v27 = 0;
          AUGraphNodeBase::GetValidConnections(v18, a1, &v25);
          for (uint64_t i = v26; i != &v25; uint64_t i = (uint64_t *)i[1])
          {
            if (a1 == 1) {
              uint64_t v21 = 2;
            }
            else {
              uint64_t v21 = 4;
            }
            uint64_t v22 = i[v21];
            if (!v22)
            {
              if (AVAudioEngineLogCategory(void)::once != -1) {
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
              }
              __int16 v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316418;
                uint64_t v32 = "AVAEInternal.h";
                __int16 v33 = 1024;
                int v34 = 71;
                __int16 v35 = 2080;
                uint64_t v36 = "AVAudioEngineGraph.mm";
                __int16 v37 = 1024;
                int v38 = 151;
                __int16 v39 = 2080;
                long long v40 = "TraverseGraphNodesBFS";
                __int16 v41 = 2080;
                double v42 = "connNodeSecond";
                _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
              }
              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "connNodeSecond");
            }
            if (AUGraphParser::TraverseGraphNodesBFS(a1, v22, i + 2, a4) == 1)
            {
              std::__list_imp<AUGraphConnection>::clear(&v25);
              goto LABEL_51;
            }
          }
          std::__list_imp<AUGraphConnection>::clear(&v25);
          uint64_t v7 = 0;
          uint64_t v16 = (uint64_t *)v16[1];
          if (v16 != &v28) {
            continue;
          }
          break;
        }
      }
    }
LABEL_52:
    std::__list_imp<AUGraphConnection>::clear(&v28);
  }
  return v7;
}

void sub_19D7D3B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__list_imp<AUGraphConnection>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__list_imp<AUGraphConnection>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t AUGraphParser::TraverseMIDIGraphNodes(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 256))(*(void *)(a1 + 24)) != 1635085673
    || (uint64_t result = std::function<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(*(void *)(a2 + 24), a1, 0), !result))
  {
    uint64_t v5 = *(void *)(a1 + 112);
    if (!v5) {
      return 0;
    }
    uint64_t result = AUGraphParser::TraverseMIDIGraphNodes(v5, a2);
    if (result != 1) {
      return 0;
    }
  }
  return result;
}

void std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]()
{
}

void *AUGraphParser::GetNodeConnectionsToMixer(uint64_t a1, void *a2, unsigned char *a3)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  int v10 = 0;
  uint64_t v9 = a3;
  std::__list_imp<AUGraphConnection>::clear(a2);
  if (a3) {
    *a3 = 0;
  }
  char v8 = 0;
  int v6 = operator new(0x30uLL);
  *int v6 = &unk_1EEFA7748;
  v6[1] = &v10;
  v6[2] = a1;
  v6[3] = &v8;
  v6[4] = a2;
  v6[5] = &v9;
  v11[3] = v6;
  AUGraphParser::TraverseGraphNodes(0, 1, a1, 0, (uint64_t)v11);
  return std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](v11);
}

void sub_19D7D3D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0,std::allocator<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::operator()(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t v6 = *(void *)&v5[**(_DWORD **)(a1 + 8) != 0];
    if (v6 && (v6 == *(void *)(a1 + 16) || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 112))(v6))) {
      **(unsigned char **)(a1 + 24) = 0;
    }
    uint64_t v7 = (unsigned char **)(a1 + 24);
    if (**(unsigned char **)(a1 + 24)) {
      return 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 120))(a2))
    {
      char v8 = *(uint64_t **)(a1 + 32);
      uint64_t v9 = operator new(0x30uLL);
      long long v10 = v5[1];
      v9[1] = *v5;
      v9[2] = v10;
      uint64_t v11 = *v8;
      *(void *)uint64_t v9 = *v8;
      *((void *)v9 + 1) = v8;
      *(void *)(v11 + 8) = v9;
      *char v8 = (uint64_t)v9;
      ++v8[2];
      uint64_t result = 2;
LABEL_13:
      **uint64_t v7 = 1;
      return result;
    }
  }
  else if (**(unsigned char **)(a1 + 24))
  {
    return 0;
  }
  if (**(void **)(a1 + 40))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 128))(a2);
    if (!result) {
      return result;
    }
    uint64_t result = 0;
    uint64_t v7 = *(unsigned char ***)(a1 + 40);
    goto LABEL_13;
  }
  return 0;
}

__n128 std::__function::__func<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0,std::allocator<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA7748;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0,std::allocator<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EEFA7748;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0,std::allocator<AUGraphParser::GetNodeConnectionsToMixer(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::list<AUGraphConnection> &,BOOL *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::~__func()
{
}

void AUGraphParser::InformNodesAboutMixerConnection(uint64_t a1, uint64_t a2, NSError **a3)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  int v13 = 1;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
  }
  else {
    char v7 = 0;
  }
  if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 345, "InformNodesAboutMixerConnection", "inMixerConn.destNode && inMixerConn.destNode->IsMixerNode()", v7, 4294967246, a3))
  {
    uint64_t v12 = *(void *)(a2 + 16);
    int v11 = *(_DWORD *)(a2 + 24);
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v9 = v10;
    char v8 = operator new(0x28uLL);
    *char v8 = &unk_1EEFA3138;
    v8[1] = &v12;
    v8[2] = &v11;
    v8[3] = &v13;
    v8[4] = &v9;
    v14[3] = v8;
    AUGraphParser::TraverseGraphNodes(1, 1, a1, 0, (uint64_t)v14);
    std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](v14);
    std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(v10[0]);
  }
}

void sub_19D7D4158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(a4);
  _Unwind_Resume(a1);
}

uint64_t _AVAE_CheckAndReturnErr(char *a1, int a2, const char *a3, const char *a4, char a5, uint64_t a6, NSError **a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a5) {
    return 0;
  }
  uint64_t v7 = a6;
  if (AVAudioEngineLogCategory(void)::once != -1) {
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
  }
  int v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    if (a1)
    {
      uint64_t v14 = strrchr(a1, 47);
      if (v14) {
        BOOL v15 = v14 + 1;
      }
      else {
        BOOL v15 = a1;
      }
    }
    else
    {
      BOOL v15 = 0;
    }
    *(_DWORD *)buf = 136316418;
    uint64_t v18 = "AVAEInternal.h";
    __int16 v19 = 1024;
    int v20 = 83;
    __int16 v21 = 2080;
    uint64_t v22 = v15;
    __int16 v23 = 1024;
    int v24 = a2;
    __int16 v25 = 2080;
    int v26 = a3;
    __int16 v27 = 2080;
    uint64_t v28 = a4;
    _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  if (a7) {
    *a7 = (NSError *)objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.avfaudio", (int)v7, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSString, "stringWithUTF8String:", a4), @"false condition", 0));
  }
  else {
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", a4);
  }
  return v7;
}

void std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t std::__function::__func<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::operator()(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 120))(v6))
      {
        **(void **)(a1 + 8) = *(void *)(v5 + 16);
        uint64_t v7 = (_DWORD *)(v5 + 24);
LABEL_5:
        **(_DWORD **)(a1 + 16) = *v7;
        goto LABEL_18;
      }
      if (**(_DWORD **)(a1 + 24) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v11 = *(void **)(v8 + 8);
        uint64_t v9 = (void *)(v8 + 8);
        long long v10 = v11;
        if (v11)
        {
          unint64_t v12 = *(void *)(v5 + 16);
          int v13 = v9;
          do
          {
            unint64_t v14 = v10[4];
            BOOL v15 = v14 >= v12;
            if (v14 >= v12) {
              uint64_t v16 = v10;
            }
            else {
              uint64_t v16 = v10 + 1;
            }
            if (v15) {
              int v13 = v10;
            }
            long long v10 = (void *)*v16;
          }
          while (*v16);
          if (v13 != v9 && v12 >= v13[4])
          {
            **(void **)(a1 + 8) = v13[5];
            uint64_t v7 = v13 + 6;
            goto LABEL_5;
          }
        }
      }
    }
  }
LABEL_18:
  if (**(_DWORD **)(a1 + 24) == 1 && (int)((*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3) >= 2)
  {
    uint64_t v17 = *(uint64_t ***)(a1 + 32);
    uint64_t v18 = **(void **)(a1 + 8);
    int v19 = **(_DWORD **)(a1 + 16);
    __int16 v21 = v17 + 1;
    int v20 = v17[1];
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v22 = (uint64_t **)v20;
          unint64_t v23 = v20[4];
          if (v23 <= a2) {
            break;
          }
          int v20 = *v22;
          __int16 v21 = v22;
          if (!*v22) {
            goto LABEL_28;
          }
        }
        if (v23 >= a2) {
          break;
        }
        int v20 = v22[1];
        if (!v20)
        {
          __int16 v21 = v22 + 1;
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v22 = v17 + 1;
LABEL_28:
      int v24 = operator new(0x38uLL);
      v24[4] = a2;
      v24[5] = v18;
      *((_DWORD *)v24 + 12) = v19;
      *int v24 = 0;
      v24[1] = 0;
      v24[2] = v22;
      *__int16 v21 = v24;
      __int16 v25 = (uint64_t *)**v17;
      if (v25)
      {
        NSObject *v17 = v25;
        int v26 = *v21;
      }
      else
      {
        int v26 = v24;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v17[1], v26);
      v17[2] = (uint64_t *)((char *)v17[2] + 1);
    }
  }
  uint64_t v27 = **(void **)(a1 + 8);
  if (v27 && **(_DWORD **)(a1 + 16) != -1) {
    (*(void (**)(void, void))(**(void **)(a2 + 24) + 368))(*(void *)(a2 + 24), *(void *)(v27 + 16));
  }
  return 0;
}

__n128 std::__function::__func<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3138;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3138;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerConnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::~__func()
{
}

void *AUGraphParser::InformNodesAboutMixerDisconnection(uint64_t a1, uint64_t a2, NSError **a3)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    char v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
  }
  else {
    char v7 = 0;
  }
  __n128 result = (void *)_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 391, "InformNodesAboutMixerDisconnection", "inMixerConn.destNode && inMixerConn.destNode->IsMixerNode()", v7, 4294967246, a3);
  if (!result)
  {
    v9[0] = &unk_1EEFA3258;
    v9[1] = a2;
    v9[3] = v9;
    AUGraphParser::TraverseGraphNodes(1, 1, a1, 0, (uint64_t)v9);
    return std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_19D7D4774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::operator()(uint64_t a1, void **a2)
{
  if (!((unsigned int (*)(void **))(*a2)[15])(a2) || *(void ***)(*(void *)(a1 + 8) + 16) == a2) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t std::__function::__func<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA3258;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA3258;
  result[1] = v3;
  return result;
}

void std::__function::__func<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0,std::allocator<AUGraphParser::InformNodesAboutMixerDisconnection(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,AUGraphConnection &,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection*)>::~__func()
{
}

BOOL AUGraphParser::IsNodeConnectedToTarget(uint64_t a1, uint64_t a2, void *a3)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  if (*a3 == a3[1]) {
    return 0;
  }
  char v4 = 0;
  v5[0] = &unk_1EEFA30A8;
  v5[1] = a3;
  v5[2] = &v4;
  v5[3] = v5;
  AUGraphParser::TraverseGraphNodes(a1, 1, a2, 0, (uint64_t)v5);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](v5);
  return v4 != 0;
}

void sub_19D7D4980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0,std::allocator<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void ***)(a1 + 8);
  uint64_t v2 = *(void **)(*(void *)(a1 + 8) + 8);
  while (v3 != v2)
  {
    if (*v3 == a2) {
      goto LABEL_6;
    }
    ++v3;
  }
  uint64_t v3 = *(void **)(*(void *)(a1 + 8) + 8);
LABEL_6:
  if (v2 == v3) {
    return 0;
  }
  char v4 = *(unsigned char **)(a1 + 16);
  uint64_t result = 1;
  *char v4 = 1;
  return result;
}

__n128 std::__function::__func<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0,std::allocator<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA30A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0,std::allocator<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA30A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0,std::allocator<AUGraphParser::IsNodeConnectedToTarget(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,std::vector<AUGraphNodeBaseV3*> const&)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t AUGraphParser::InitializeNode(AUGraphParser *this, const AVAudioEngineGraph *a2, AUGraphNodeBaseV3 *a3, int a4)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  int v7 = (int)a3;
  v6[0] = this;
  v6[1] = &v7;
  if (a4)
  {
    v8[0] = &unk_1EEFA2F40;
    v8[1] = v6;
    v8[3] = v8;
    AUGraphParser::TraverseMIDIGraphNodes((uint64_t)a2, (uint64_t)v8);
    std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](v8);
  }
  return AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0::operator()((uint64_t)v6, (uint64_t)a2);
}

void sub_19D7D4B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a2 + 24) + 48)) {
    goto LABEL_2;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 36);
  if (v7 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 152))(a2))
  {
    if (*(unsigned char *)(*(void *)(a2 + 24) + 48))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        long long v10 = "AVAEInternal.h";
        __int16 v11 = 1024;
        int v12 = 104;
        __int16 v13 = 2080;
        unint64_t v14 = "AVAudioEngineGraph.mm";
        __int16 v15 = 1024;
        int v16 = 438;
        __int16 v17 = 2080;
        uint64_t v18 = "operator()";
        __int16 v19 = 2080;
        int v20 = "inGraph.PerformCommand(theNode, AVAudioEngineGraph::kAUSetPropertyMaximumFramesPerSlice, &maxFrames, sizeof(maxFrames))";
        __int16 v21 = 1024;
        int v22 = -10849;
        _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", 4294956447);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 248))(a2, v7);
    }
  }
  uint64_t result = AVAudioEngineGraph::PerformCommand(*(void *)a1, (void *)a2, 3, 0, 0);
  if (!result)
  {
LABEL_2:
    int v4 = **(_DWORD **)(a1 + 8);
    uint64_t result = 0;
    if ((v4 & 0x3F) != 0)
    {
      if ((v4 & 0x20) != 0) {
        int v6 = **(_DWORD **)(a1 + 8) & 0x1F;
      }
      else {
        int v6 = *(_DWORD *)(a2 + 32) | **(_DWORD **)(a1 + 8) & 0x3F;
      }
      *(_DWORD *)(a2 + 32) = v6;
    }
    else
    {
      *(_DWORD *)(a2 + 32) = 0;
    }
  }
  return result;
}

uint64_t AVAudioEngineGraph::PerformCommand(uint64_t a1, void *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  switch(a3)
  {
    case 3:
      if (*(unsigned char *)(a2[3] + 48)) {
        return 0;
      }
      uint64_t v14 = (*(uint64_t (**)(void *))(*a2 + 184))(a2);
      if (v14)
      {
        uint64_t v8 = v14;
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        int v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = a2[2];
          AUGraphNodeBase::DescAsString((AUGraphNodeBase *)__p, a2[3]);
          if (v25 >= 0) {
            uint64_t v18 = __p;
          }
          else {
            uint64_t v18 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136316418;
          *(void *)&uint8_t buf[4] = "AVAudioEngineGraph.mm";
          __int16 v27 = 1024;
          int v28 = 3322;
          __int16 v29 = 2048;
          uint64_t v30 = a1;
          __int16 v31 = 2048;
          uint64_t v32 = v17;
          __int16 v33 = 2080;
          int v34 = v18;
          __int16 v35 = 1024;
          int v36 = v8;
          _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d graph@%p: couldn't initialize node@%p {%s}, error %d", buf, 0x36u);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
        }
        return v8;
      }
      uint64_t v23 = *(AUGraphSequencerInterface **)(a1 + 80);
      if (v23) {
        AUGraphSequencerInterface::NodeStateChanged(v23, (void **)a2, 1u, v15);
      }
      return 0;
    case 4:
      if (*(unsigned char *)(a2[3] + 48)
        && (!*(unsigned char *)(a1 + 185) || ((*(uint64_t (**)(void *))(*a2 + 128))(a2) & 1) == 0))
      {
        __int16 v19 = *(AUGraphSequencerInterface **)(a1 + 80);
        if (v19) {
          AUGraphSequencerInterface::NodeStateChanged(v19, (void **)a2, 2u, (AudioComponentDescription *)a4);
        }
        (*(void (**)(void *))(*a2 + 192))(a2);
      }
      return 0;
    case 5:
      (*(void (**)(void))(*(void *)a2[3] + 88))(a2[3]);
      return 0;
    case 6:
      if (!(*(unsigned int (**)(void *))(*a2 + 128))(a2)) {
        return 4294967246;
      }
      __int16 v21 = *(uint64_t (**)(void *))(*a2 + 224);
      int v22 = a2;
      return v21(v22);
    case 7:
      if ((*(unsigned int (**)(void *))(*a2 + 128))(a2))
      {
        __int16 v21 = *(uint64_t (**)(void *))(*a2 + 232);
        int v22 = a2;
        return v21(v22);
      }
      else
      {
        return 4294967246;
      }
    case 8:
    case 9:
      uint64_t v8 = 4294967246;
      if (!a4 || a5 != 32) {
        return v8;
      }
      BOOL v9 = a3 == 8;
      int v10 = *(_DWORD *)(a4 + 8);
      *(void *)buf = *(void *)a4;
      *(_DWORD *)&buf[8] = v10;
      (*(void (**)(void, BOOL, void, unsigned char *))(**(void **)(a4 + 16) + 256))(*(void *)(a4 + 16), v9, *(unsigned int *)(a4 + 24), buf);
      int v12 = *(AUGraphSequencerInterface **)(a1 + 80);
      char v13 = !v9;
      if (!v12) {
        char v13 = 1;
      }
      if ((v13 & 1) == 0) {
        AUGraphSequencerInterface::NodeStateChanged(v12, *(void ***)(a4 + 16), 0x8001u, v11);
      }
      return 0;
    default:
      return 0;
  }
}

void AUGraphSequencerInterface::NodeStateChanged(AUGraphSequencerInterface *this, void **a2, unsigned int a3, AudioComponentDescription *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 3)) {
    return;
  }
  uint64_t v7 = (void **)*((void *)this + 4);
  if (v7)
  {
    if (v7 != a2) {
      return;
    }
    uint64_t v8 = 0;
    BOOL v9 = 0;
    int v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    if (a3 != 4)
    {
      uint64_t v18 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 185))
      {
        uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(*(AVAudioEngineGraph **)this, *(AVAudioNodeImplBase **)(v18 + 24));
        if (a3 != 32769
          || !NodeFromMap
          || *(unsigned char *)(v18 + 184) && !((unsigned int (*)(void **))(*a2)[15])(a2))
        {
          return;
        }
      }
      else
      {
        if (a3 != 1) {
          return;
        }
        int v20 = *(_DWORD *)(*(uint64_t (**)(void *))(*a2[3] + 256))(a2[3]);
        BOOL v21 = v20 == 1635086953 || v20 == 1635085685;
        if (!v21 || !*((unsigned char *)a2[3] + 48)) {
          return;
        }
      }
    }
    uint64_t v28 = 0;
    if (AUGraphSequencerInterface::GetDefaultMusicDevice((AVAudioNodeImplBase ***)this, (unint64_t)&v28, 0, a4)|| !v28)
    {
      return;
    }
    if (!*((void *)this + 4))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      int v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        uint64_t v30 = "AVAEInternal.h";
        __int16 v31 = 1024;
        int v32 = 71;
        __int16 v33 = 2080;
        int v34 = "AVAudioEngineGraph.mm";
        __int16 v35 = 1024;
        int v36 = 4551;
        __int16 v37 = 2080;
        int v38 = "NodeStateChanged";
        __int16 v39 = 2080;
        long long v40 = "GetMusicDeviceNode()";
        _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "GetMusicDeviceNode()");
    }
    uint64_t v8 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(1uLL);
    *uint64_t v8 = 4;
    BOOL v9 = v8 + 1;
    int v10 = (char *)&v8[v13];
    uint64_t v11 = v28;
  }
  if (!(a3 >> 15) && *((void ***)this + 4) == a2)
  {
    if (v9 >= (unsigned int *)v10)
    {
      uint64_t v22 = v9 - v8;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62) {
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v10 - (char *)v8;
      if (v24 >> 1 > v23) {
        unint64_t v23 = v24 >> 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25) {
        unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(v25);
      }
      int v26 = (unsigned int *)(v25 + 4 * v22);
      *int v26 = a3;
      uint64_t v14 = v26 + 1;
      while (v9 != v8)
      {
        unsigned int v27 = *--v9;
        *--int v26 = v27;
      }
      if (v8) {
        operator delete(v8);
      }
      uint64_t v8 = v26;
      goto LABEL_20;
    }
    *v9++ = a3;
  }
  uint64_t v14 = v9;
LABEL_20:
  if (v8 == v14)
  {
    uint64_t v8 = v14;
  }
  else
  {
    if (!v11)
    {
      uint64_t v15 = *((void *)this + 4);
      if (!v15)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        int v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316418;
          uint64_t v30 = "AVAEInternal.h";
          __int16 v31 = 1024;
          int v32 = 71;
          __int16 v33 = 2080;
          int v34 = "AVAudioEngineGraph.mm";
          __int16 v35 = 1024;
          int v36 = 4572;
          __int16 v37 = 2080;
          int v38 = "NodeStateChanged";
          __int16 v39 = 2080;
          long long v40 = "GetMusicDeviceNode()";
          _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "GetMusicDeviceNode()");
        uint64_t v15 = *((void *)this + 4);
      }
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v15 + 24) + 224))(*(void *)(v15 + 24));
    }
    if (**((void **)this + 3))
    {
      uint64_t v17 = v8;
      do
        (**((void (***)(void, uint64_t, void))this + 3))(*(void *)(*((void *)this + 3) + 8), v11, *v17++);
      while (v17 != v14);
    }
    if (a3 == 3 && *((void ***)this + 4) == a2) {
      *((void *)this + 4) = 0;
    }
  }
  if (v8) {
    operator delete(v8);
  }
}

void sub_19D7D56A8(_Unwind_Exception *exception_object)
{
}

uint64_t AVAudioEngineGraph::GetNodeFromMap(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2)
{
  if (!AVAudioEngineGraph::IsNodeInGraph(this, a2)) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  uint64_t v7 = *(void **)(v4 + 8);
  uint64_t v5 = (void *)(v4 + 8);
  int v6 = v7;
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v8 = v5;
  do
  {
    unint64_t v9 = v6[4];
    BOOL v10 = v9 >= (unint64_t)a2;
    if (v9 >= (unint64_t)a2) {
      uint64_t v11 = v6;
    }
    else {
      uint64_t v11 = v6 + 1;
    }
    if (v10) {
      uint64_t v8 = v6;
    }
    int v6 = (void *)*v11;
  }
  while (*v11);
  if (v8 == v5 || v8[4] > (unint64_t)a2) {
LABEL_13:
  }
    uint64_t v8 = v5;
  return v8[5];
}

uint64_t AUGraphSequencerInterface::GetDefaultMusicDevice(AVAudioNodeImplBase ***this, unint64_t a2, unint64_t a3, AudioComponentDescription *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2 | a3)
  {
    if (a2) {
      *(void *)a2 = 0;
    }
    if (a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
    }
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      __int16 v19 = 2080;
      *(void *)int v20 = "AVAudioEngineGraph.mm";
      *(_WORD *)&v20[8] = 1024;
      *(_DWORD *)&v20[10] = 4653;
      __int16 v21 = 2080;
      uint64_t v22 = "GetDefaultMusicDevice";
      __int16 v23 = 2080;
      uint64_t v24 = "outUnit || outDesc";
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "outUnit || outDesc");
  }
  uint64_t v8 = *this;
  unint64_t v9 = (std::recursive_mutex *)((char *)**this + 112);
  std::recursive_mutex::lock(v9);
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v8, v8[3]);
  if (NodeFromMap)
  {
    uint64_t v17 = 0;
    *(void *)buf = &unk_1EEFA3648;
    *(void *)&buf[8] = &v17;
    *(void *)&v20[4] = buf;
    AUGraphParser::TraverseGraphNodes(1, 1, NodeFromMap, 0, (uint64_t)buf);
    std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](buf);
    uint64_t v11 = v17;
    this[4] = (AVAudioNodeImplBase **)v17;
    if (v11)
    {
      if (a2) {
        *(void *)a2 = (*(uint64_t (**)(void))(**(void **)(v11 + 24) + 224))(*(void *)(v11 + 24));
      }
      if (a3)
      {
        uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v17 + 24) + 256))(*(void *)(v17 + 24));
        long long v13 = *(_OWORD *)v12;
        *(_DWORD *)(a3 + 16) = *(_DWORD *)(v12 + 16);
        *(_OWORD *)a3 = v13;
      }
    }
    uint64_t v14 = 0;
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4668;
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Can't retrieve source node to play sequence because there is no output node!", buf, 0x12u);
    }
    uint64_t v14 = 4294956420;
  }
  std::recursive_mutex::unlock(v9);
  return v14;
}

void sub_19D7D5A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::recursive_mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

uint64_t std::__function::__func<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0,std::allocator<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a2 + 24) + 256))(*(void *)(a2 + 24));
  if (v4 != 1635086953 && v4 != 1635085685) {
    return 0;
  }
  **(void **)(a1 + 8) = a2;
  return 1;
}

uint64_t std::__function::__func<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0,std::allocator<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA3648;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0,std::allocator<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA3648;
  result[1] = v3;
  return result;
}

void std::__function::__func<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0,std::allocator<AUGraphSequencerInterface::GetDefaultMusicDevice(void *,OpaqueAudioComponentInstance **,AudioComponentDescription *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

BOOL AVAudioEngineGraph::IsNodeInGraph(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = *(void **)(v2 + 8);
  uint64_t v3 = (void *)(v2 + 8);
  int v4 = v5;
  if (!v5) {
    goto LABEL_14;
  }
  int v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (v8) {
      int v6 = v4;
    }
    int v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > (unint64_t)a2) {
LABEL_14:
  }
    int v6 = v3;
  return v6 != v3;
}

BOOL std::__function::__func<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1,std::allocator<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  return AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0::operator()(*(void *)(a1 + 8), a2) != 0;
}

uint64_t std::__function::__func<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1,std::allocator<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA2F40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1,std::allocator<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA2F40;
  result[1] = v3;
  return result;
}

void std::__function::__func<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1,std::allocator<AUGraphParser::InitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

void *AUGraphParser::UninitializeNode(AUGraphParser *this, const AVAudioEngineGraph *a2, AUGraphNodeBaseV3 *a3)
{
  int v3 = (int)a3;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  uint64_t result = (void *)AVAudioEngineGraph::PerformCommand((uint64_t)this, a2, 4, 0, 0);
  if (result)
  {
    unint64_t v7 = result;
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    BOOL v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 467;
      __int16 v11 = 2080;
      uint64_t v12 = "UninitializeNode";
      __int16 v13 = 2080;
      uint64_t v14 = "inGraph.PerformCommand(node, AVAudioEngineGraph::kAUUninitialize, NULL, 0)";
      __int16 v15 = 1024;
      int v16 = (int)v7;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v7);
  }
  *((_DWORD *)a2 + 8) = 0;
  if (v3)
  {
    *(void *)buf = &unk_1EEFA2F88;
    *(void *)&buf[8] = this;
    *(void *)&uint8_t buf[16] = &v9;
    *(void *)&buf[24] = buf;
    AUGraphParser::TraverseMIDIGraphNodes((uint64_t)a2, (uint64_t)buf);
    return std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](buf);
  }
  return result;
}

void sub_19D7D5ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0,std::allocator<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = *(void *)(a2 + 128); i != *(void *)(a2 + 136); i += 8)
  {
    if (*(void *)i && *(unsigned char *)(*(void *)(*(void *)i + 24) + 48)) {
      return 1;
    }
  }
  uint64_t v5 = AVAudioEngineGraph::PerformCommand(*(void *)(a1 + 8), (void *)a2, 4, 0, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    unint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      uint64_t v12 = "AVAEInternal.h";
      __int16 v13 = 1024;
      int v14 = 104;
      __int16 v15 = 2080;
      int v16 = "AVAudioEngineGraph.mm";
      __int16 v17 = 1024;
      int v18 = 477;
      __int16 v19 = 2080;
      int v20 = "operator()";
      __int16 v21 = 2080;
      uint64_t v22 = "inGraph.PerformCommand(midiNode, AVAudioEngineGraph::kAUUninitialize, NULL, 0)";
      __int16 v23 = 1024;
      int v24 = v6;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v6);
  }
  int v8 = **(_DWORD **)(a1 + 16);
  uint64_t result = 0;
  if ((v8 & 0x3F) != 0)
  {
    if ((v8 & 0x20) != 0) {
      int v10 = **(_DWORD **)(a1 + 16) & 0x1F;
    }
    else {
      int v10 = *(_DWORD *)(a2 + 32) | **(_DWORD **)(a1 + 16) & 0x3F;
    }
    *(_DWORD *)(a2 + 32) = v10;
  }
  else
  {
    *(_DWORD *)(a2 + 32) = 0;
  }
  return result;
}

__n128 std::__function::__func<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0,std::allocator<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA2F88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0,std::allocator<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA2F88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0,std::allocator<AUGraphParser::UninitializeNode(AVAudioEngineGraph const&,AUGraphNodeBaseV3 &,unsigned int,BOOL)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t AUGraphParser::InitializeNodeChain(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  unsigned int v9 = 0;
  int v10 = a4;
  unint64_t v7 = operator new(0x20uLL);
  *unint64_t v7 = &unk_1EEFA2FD0;
  v7[1] = &v10;
  _OWORD v7[2] = a1;
  _DWORD v7[3] = &v9;
  v11[3] = v7;
  AUGraphParser::TraverseGraphNodes(a2, 1, a3, 0, (uint64_t)v11);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](v11);
  return v9;
}

void sub_19D7D6218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL std::__function::__func<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0,std::allocator<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AVAudioEngineGraph *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (**(_DWORD **)(a1 + 8) != 1) {
    goto LABEL_15;
  }
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_15;
  }
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(*(AVAudioEngineGraph **)(a1 + 16), *(AVAudioNodeImplBase **)(*(void *)(a1 + 16) + 16));
  if (!NodeFromMap) {
    goto LABEL_15;
  }
  uint64_t v5 = NodeFromMap;
  uint64_t v6 = *((void *)a2 + 1);
  if (((*(uint64_t (**)(uint64_t))(*(void *)NodeFromMap + 136))(NodeFromMap) & 1) != 0
    || !v6
    || (v7 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v5 + 24) + 72))(*(void *)(v5 + 24), 0), int v8 = (void *)(*(uint64_t (**)(void, void))(**((void **)a2 + 3) + 48))(*((void *)a2 + 3), *(unsigned int *)(v6 + 8)), v7)&& ([v7 sampleRate], v9 > 0.0)&& objc_msgSend(v7, "channelCount")&& (objc_msgSend(v8, "sampleRate"), v11 = v10, objc_msgSend(v7, "sampleRate"), v11 == v12))
  {
LABEL_15:
    int v15 = AUGraphParser::InitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)**(unsigned int **)(a1 + 8), **(_DWORD **)(a1 + 8) == 2);
    **(_DWORD **)(a1 + 24) = v15;
    return v15 != 0;
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    __int16 v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315906;
      __int16 v17 = "AVAudioEngineGraph.mm";
      __int16 v18 = 1024;
      int v19 = 504;
      __int16 v20 = 2080;
      uint64_t v21 = objc_msgSend((id)objc_msgSend(v7, "description"), "UTF8String");
      __int16 v22 = 2080;
      uint64_t v23 = objc_msgSend((id)objc_msgSend(v8, "description"), "UTF8String");
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error, formats don't match! Input HW format: %s, tap format: %s", (uint8_t *)&v16, 0x26u);
    }
    **(_DWORD **)(a1 + 24) = -10868;
    return 1;
  }
}

__n128 std::__function::__func<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0,std::allocator<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA2FD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0,std::allocator<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EEFA2FD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0,std::allocator<AUGraphParser::InitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &,unsigned int)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

void *AUGraphParser::UninitializeNodeChain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  int v4 = a2;
  v5[0] = &unk_1EEFA3018;
  v5[1] = &v4;
  v5[2] = a1;
  v5[3] = v5;
  AUGraphParser::TraverseGraphNodes(a2, 1, a3, 0, (uint64_t)v5);
  return std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](v5);
}

void sub_19D7D65C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, const AVAudioEngineGraph *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if ((*(unsigned int (**)(const AVAudioEngineGraph *))(*(void *)a2 + 112))(a2)
    && (v5 ? (BOOL v6 = **(_DWORD **)(a1 + 8) == 1) : (BOOL v6 = 0),
        v6 && (int)((*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3) >= 1))
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = (*(uint64_t (**)(const AVAudioEngineGraph *, void, uint64_t))(*(void *)a2 + 24))(a2, 0, v7);
      if (v8)
      {
        if (v8 != *(void *)(v5 + 16) && (*(unsigned char *)(v8 + 32) & 2) != 0) {
          return 2;
        }
      }
      uint64_t v7 = (v7 + 1);
      if ((int)v7 >= (int)((*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3)) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    AUGraphParser::UninitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)1);
    return 0;
  }
}

__n128 std::__function::__func<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::UninitializeNodeChain(AVAudioEngineGraph const&,EDirection,ERecursion,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  unsigned int v44 = 0;
  *a3 = 0;
  if (!AVAudioEngineGraph::IsNodeInGraph(a1, *(AVAudioNodeImplBase **)(a2 + 24)))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int buf = 136316418;
      id v54 = "AVAEInternal.h";
      __int16 v55 = 1024;
      int v56 = 71;
      __int16 v57 = 2080;
      *(void *)int v58 = "AVAudioEngineGraph.mm";
      *(_WORD *)&char v58[8] = 1024;
      *(_DWORD *)&v58[10] = 554;
      __int16 v59 = 2080;
      int v60 = "InitializeActiveNodesInOutputChain";
      __int16 v61 = 2080;
      int v62 = "inGraph.IsNodeInGraph(inNode.NodeImpl())";
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inGraph.IsNodeInGraph(inNode.NodeImpl())");
  }
  uint64_t v41 = (uint64_t)&v41;
  double v42 = &v41;
  uint64_t v43 = 0;
  AUGraphNodeBase::GetValidConnections(a2, 0, &v41);
  std::string __p = &unk_1EEFA32A0;
  int v50 = &v41;
  uint64_t v51 = a2;
  p_p = &__p;
  if (!std::function<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()((uint64_t)&__p, a2, 0))
  {
    uint64_t v22 = (*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3;
    if ((int)v22 < 1)
    {
LABEL_48:
      uint64_t v26 = (*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3;
      if ((int)v26 >= 1)
      {
        uint64_t v27 = 0;
        do
        {
          uint64_t v28 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 24))(a2, 0, v27);
          if (v28)
          {
            __int16 v45 = 0;
            LODWORD(v46) = -1;
            uint64_t v47 = 0;
            int v48 = -1;
            if (((*(uint64_t (**)(uint64_t, void, uint64_t, void **))(*(void *)a2 + 32))(a2, 0, v27, &v45) & 1) == 0)
            {
              if (AVAudioEngineLogCategory(void)::once != -1) {
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
              }
              __int16 v29 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                int buf = 136316418;
                id v54 = "AVAEInternal.h";
                __int16 v55 = 1024;
                int v56 = 71;
                __int16 v57 = 2080;
                *(void *)int v58 = "AVAudioEngineGraph.mm";
                *(_WORD *)&char v58[8] = 1024;
                *(_DWORD *)&v58[10] = 215;
                __int16 v59 = 2080;
                int v60 = "TraverseGraphNodesWithLookback";
                __int16 v61 = 2080;
                int v62 = "inCurrNode.GetConnection(otherDirection, bus, conn)";
                _os_log_impl(&dword_19D794000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
              }
              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inCurrNode.GetConnection(otherDirection, bus, conn)");
            }
            if (AUGraphParser::TraverseGraphNodes(0, 1, v28, (uint64_t)&v45, (uint64_t)&__p) == 1) {
              break;
            }
          }
          uint64_t v27 = (v27 + 1);
        }
        while (v26 != v27);
      }
    }
    else
    {
      uint64_t v23 = 0;
      while (1)
      {
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 1, v23);
        if (v24)
        {
          __int16 v45 = 0;
          LODWORD(v46) = -1;
          uint64_t v47 = 0;
          int v48 = -1;
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 32))(a2, 1, v23, &v45) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            uint64_t v25 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              int buf = 136316418;
              id v54 = "AVAEInternal.h";
              __int16 v55 = 1024;
              int v56 = 71;
              __int16 v57 = 2080;
              *(void *)int v58 = "AVAudioEngineGraph.mm";
              *(_WORD *)&char v58[8] = 1024;
              *(_DWORD *)&v58[10] = 183;
              __int16 v59 = 2080;
              int v60 = "TraverseGraphNodesWithLookback";
              __int16 v61 = 2080;
              int v62 = "inCurrNode.GetConnection(inDirection, bus, conn)";
              _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inCurrNode.GetConnection(inDirection, bus, conn)");
          }
          if (AUGraphParser::TraverseGraphNodes(1, 1, v24, (uint64_t)&v45, (uint64_t)&__p) == 1) {
            break;
          }
        }
        uint64_t v23 = (v23 + 1);
        if (v22 == v23) {
          goto LABEL_48;
        }
      }
    }
  }
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](&__p);
  std::__list_imp<AUGraphConnection>::clear(&v41);
  uint64_t v40 = 0;
  uint64_t v41 = (uint64_t)&v41;
  int v39 = -1;
  __int16 v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  double v42 = &v41;
  uint64_t v43 = 0;
  AUGraphParser::GetNodeConnectionsToMixer(a2, &v41, 0);
  BOOL v6 = operator new(0x40uLL);
  *BOOL v6 = &unk_1EEFA32E8;
  v6[1] = &v40;
  void v6[2] = &v39;
  v6[3] = &v41;
  v6[4] = a2;
  v6[5] = a1;
  void v6[6] = &v45;
  v6[7] = &__p;
  *(void *)&v58[4] = v6;
  AUGraphParser::TraverseGraphNodes(1, 1, a2, 0, (uint64_t)&buf);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](&buf);
  uint64_t v8 = (uint64_t *)v45;
  uint64_t v7 = v46;
  if (v45 == v46)
  {
LABEL_20:
    __int16 v13 = (uint64_t *)__p;
    int v32 = v50;
    if (__p != v50)
    {
      while (1)
      {
        uint64_t v14 = *v13;
        char v38 = 1;
        uint64_t v35 = (uint64_t)&v35;
        int v36 = &v35;
        uint64_t v37 = 0;
        char v34 = 0;
        AUGraphParser::GetNodeConnectionsToMixer(v14, &v35, &v34);
        if (v34)
        {
          char v38 = 0;
        }
        else
        {
          for (uint64_t i = v36; i != &v35; uint64_t i = (uint64_t *)i[1])
          {
            AUGraphParser::PrepareForDisconnection(a1, (const AVAudioEngineGraph *)i[4], 0, v15, v16);
            uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection(a1, *(AVAudioNodeImplBase **)(i[4] + 24), *((unsigned int *)i + 10), 0);
            if (Disconnection)
            {
              if (AVAudioEngineLogCategory(void)::once != -1) {
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
              }
              __int16 v20 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                int buf = 136316674;
                id v54 = "AVAEInternal.h";
                __int16 v55 = 1024;
                int v56 = 104;
                __int16 v57 = 2080;
                *(void *)int v58 = "AVAudioEngineGraph.mm";
                *(_WORD *)&char v58[8] = 1024;
                *(_DWORD *)&v58[10] = 719;
                __int16 v59 = 2080;
                int v60 = "InitializeActiveNodesInOutputChain";
                __int16 v61 = 2080;
                int v62 = "inGraph.MakeDisconnection(mixerConn.destNode->NodeImpl(), mixerConn.destBus)";
                __int16 v63 = 1024;
                int v64 = Disconnection;
                _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
              }
              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", Disconnection);
            }
            else
            {
              AVAudioEngineGraph::AddPendingConnection((uint64_t)a1, 0, (uint64_t)(i + 2), 0);
              uint64_t v21 = i[4];
              if (!*(unsigned char *)(*(void *)(v21 + 24) + 48))
              {
                unsigned int v44 = AUGraphParser::InitializeNodeChain((uint64_t)a1, 0, v21, 2);
                if (v44) {
                  goto LABEL_60;
                }
              }
            }
          }
        }
        __int16 v17 = operator new(0x20uLL);
        void *v17 = &unk_1EEFA3378;
        v17[1] = &v38;
        v17[2] = a1;
        v17[3] = &v44;
        *(void *)&v58[4] = v17;
        AUGraphParser::TraverseGraphNodes(0, 1, v14, 0, (uint64_t)&buf);
        std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](&buf);
        if (v44) {
          break;
        }
        std::__list_imp<AUGraphConnection>::clear(&v35);
        if (++v13 == v32) {
          goto LABEL_61;
        }
      }
LABEL_60:
      std::__list_imp<AUGraphConnection>::clear(&v35);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v9 = *v8;
      if ((AVAudioEngineGraph::IsValidSourceNode((uint64_t)a1, *v8) & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        double v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          int buf = 136316418;
          id v54 = "AVAEInternal.h";
          __int16 v55 = 1024;
          int v56 = 71;
          __int16 v57 = 2080;
          *(void *)int v58 = "AVAudioEngineGraph.mm";
          *(_WORD *)&char v58[8] = 1024;
          *(_DWORD *)&v58[10] = 662;
          __int16 v59 = 2080;
          int v60 = "InitializeActiveNodesInOutputChain";
          __int16 v61 = 2080;
          int v62 = "inGraph.IsValidSourceNode(*startNode)";
          _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inGraph.IsValidSourceNode(*startNode)");
      }
      LODWORD(v35) = 2;
      uint64_t v11 = *((void *)a1 + 2);
      if (v11 && *(void *)(v9 + 24) == v11) {
        LODWORD(v35) = 3;
      }
      double v12 = operator new(0x20uLL);
      *double v12 = &unk_1EEFA3330;
      v12[1] = &v44;
      v12[2] = a1;
      v12[3] = &v35;
      *(void *)&v58[4] = v12;
      AUGraphParser::TraverseGraphNodes(0, 1, v9, 0, (uint64_t)&buf);
      std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](&buf);
      if (v44) {
        break;
      }
      *a3 = 1;
      if (++v8 == v7) {
        goto LABEL_20;
      }
    }
  }
LABEL_61:
  uint64_t v30 = v44;
  std::__list_imp<AUGraphConnection>::clear(&v41);
  if (__p)
  {
    int v50 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v45)
  {
    uint64_t v46 = (uint64_t *)v45;
    operator delete(v45);
  }
  return v30;
}

void sub_19D7D71C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
}

uint64_t AVAudioEngineGraph::IsValidSourceNode(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a2 + 24) + 256))(*(void *)(a2 + 24));
  if (v4 == 1635084142 || v4 == 1635086951) {
    return 1;
  }
  int v6 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(a2 + 24) + 256))(*(void *)(a2 + 24));
  if (v6 == 1635085685 || v6 == 1635086953) {
    return 1;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  if (v9)
  {
    if (v10 == v9) {
      return 1;
    }
  }
  uint64_t v11 = *(uint64_t (**)(void))(*(void *)v10 + 408);

  return v11();
}

uint64_t AUGraphParser::PrepareForDisconnection(AUGraphParser *this, const AVAudioEngineGraph *a2, NSError **a3, unsigned int a4, NSError **a5)
{
  char IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph((uint64_t)this, (uint64_t)a2);
  uint64_t result = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1128, "PrepareForDisconnection", "inGraph.IsNodeInGraph(&inDestNode)", IsNodeInGraph, 4294967246, a3);
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(const AVAudioEngineGraph *))(*(void *)a2 + 120))(a2);
    if ((result & 1) == 0)
    {
      uint64_t v10 = AVAudioEngineGraph::PerformCommand((uint64_t)this, a2, 4, 0, 0);
      return _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1134, "PrepareForDisconnection", "inGraph.PerformCommand(inDestNode, AVAudioEngineGraph::kAUUninitialize, NULL, 0)", v10, a3);
    }
  }
  return result;
}

uint64_t AVAudioEngineGraph::MakeDisconnection(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2, uint64_t a3, NSError **a4)
{
  char IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph(this, a2);
  uint64_t v9 = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3963, "MakeDisconnection", "IsNodeInGraph(inDestImpl)", IsNodeInGraph, 4294967246, a4);
  if (!v9)
  {
    uint64_t NodeFromMap = (const AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, a2);
    uint64_t v9 = (*(uint64_t (**)(const AVAudioEngineGraph *, uint64_t, uint64_t))(*(void *)NodeFromMap + 24))(NodeFromMap, 1, a3);
    if (v9)
    {
      if ((*(unsigned int (**)(const AVAudioEngineGraph *))(*(void *)NodeFromMap + 120))(NodeFromMap))
      {
        uint64_t v16 = 0;
        LODWORD(v17) = -1;
        uint64_t v18 = 0;
        int v19 = -1;
        char v12 = (*(uint64_t (**)(const AVAudioEngineGraph *, uint64_t, uint64_t, uint64_t *))(*(void *)NodeFromMap
                                                                                                 + 32))(NodeFromMap, 1, a3, &v16);
        _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3978, "MakeDisconnection", "true == graphNodeDest->GetConnection(kUpstream, inDestBus, mixerConn)", v12, 4294967246, a4);
        AUGraphParser::InformNodesAboutMixerDisconnection(v9, (uint64_t)&v16, a4);
      }
      else
      {
        uint64_t v16 = (uint64_t)&v16;
        __int16 v17 = &v16;
        uint64_t v18 = 0;
        AUGraphParser::GetNodeConnectionsToMixer((uint64_t)NodeFromMap, &v16, 0);
        for (uint64_t i = v17; i != &v16; uint64_t i = (uint64_t *)i[1])
          AUGraphParser::InformNodesAboutMixerDisconnection(v9, (uint64_t)(i + 2), a4);
        std::__list_imp<AUGraphConnection>::clear(&v16);
      }
      uint64_t v9 = *(unsigned __int8 *)(*((void *)NodeFromMap + 3) + 48);
      AUGraphParser::PrepareForDisconnection(this, NodeFromMap, a4, v13, v14);
      uint64_t v16 = 0;
      LODWORD(v17) = -1;
      uint64_t v18 = 0;
      int v19 = -1;
      (*(void (**)(const AVAudioEngineGraph *, uint64_t, uint64_t, uint64_t *))(*(void *)NodeFromMap + 32))(NodeFromMap, 1, a3, &v16);
      uint64_t v20 = v16;
      int v21 = (int)v17;
      (*(void (**)(void))(*(void *)v18 + 256))();
      if (v9)
      {
        uint64_t v9 = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 3, 0, 0);
        _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4000, "MakeDisconnection", "err = PerformCommand(*graphNodeDest, kAUInitialize, NULL, 0)", v9, a4);
      }
    }
  }
  return v9;
}

void sub_19D7D7754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 AVAudioEngineGraph::AddPendingConnection(uint64_t a1, int a2, uint64_t a3, NSError **a4)
{
  if (*(void *)a3) {
    BOOL v7 = *(_DWORD *)(a3 + 8) == -1;
  }
  else {
    BOOL v7 = 1;
  }
  char v9 = !v7 && *(void *)(a3 + 16) != 0 && *(_DWORD *)(a3 + 24) != -1;
  if (_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3728, "AddPendingConnection", "inConn.IsSrcAndDestValid()", v9, 4294967246, a4))return result; {
  if (a2)
  }
    uint64_t v11 = 160;
  else {
    uint64_t v11 = 136;
  }
  if (a2) {
    char v12 = (uint64_t *)(a1 + 160);
  }
  else {
    char v12 = (uint64_t *)(a1 + 136);
  }
  unsigned int v13 = (uint64_t *)v12[1];
  if (v13 == v12)
  {
LABEL_33:
    uint64_t v18 = operator new(0x30uLL);
    __n128 result = *(__n128 *)a3;
    long long v19 = *(_OWORD *)(a3 + 16);
    v18[1] = *(_OWORD *)a3;
    v18[2] = v19;
    uint64_t v20 = *(void *)(a1 + v11);
    *(void *)uint64_t v18 = v20;
    *((void *)v18 + 1) = v12;
    *(void *)(v20 + 8) = v18;
    *(void *)(a1 + v11) = v18;
    ++v12[2];
    return result;
  }
  char v14 = 0;
  do
  {
    if (*(void *)a3 == v13[2])
    {
      uint64_t v15 = *(void *)(a3 + 16);
      if (*(_DWORD *)(a3 + 8) == *((_DWORD *)v13 + 6))
      {
        if (v15 == v13[4] && *(_DWORD *)(a3 + 24) == *((_DWORD *)v13 + 10)) {
          return result;
        }
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a3 + 16);
    }
    if (v13[4] != v15 || *((_DWORD *)v13 + 10) != *(_DWORD *)(a3 + 24))
    {
      unsigned int v13 = (uint64_t *)v13[1];
      continue;
    }
LABEL_27:
    if (v14)
    {
      uint64_t v16 = *v13;
      __int16 v17 = (uint64_t *)v13[1];
      *(void *)(v16 + 8) = v17;
      *(void *)v13[1] = v16;
      --v12[2];
      operator delete(v13);
      char v14 = 1;
      unsigned int v13 = v17;
    }
    else
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)((char *)v13 + 28) = *(_OWORD *)(a3 + 12);
      *((__n128 *)v13 + 1) = result;
      unsigned int v13 = (uint64_t *)v13[1];
      char v14 = 1;
    }
  }
  while (v13 != v12);
  if ((v14 & 1) == 0) {
    goto LABEL_33;
  }
  return result;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, const AVAudioEngineGraph *a2)
{
  if (**(unsigned char **)(a1 + 8))
  {
    AUGraphParser::UninitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)1);
  }
  else
  {
    if (*(unsigned char *)(*((void *)a2 + 3) + 48)) {
      return 2;
    }
    uint64_t v3 = 1;
    int v4 = AUGraphParser::InitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)2, 1);
    **(_DWORD **)(a1 + 24) = v4;
    if (v4) {
      return v3;
    }
  }
  return 0;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

BOOL _AVAE_CheckNoErr(char *a1, int a2, const char *a3, const char *a4, uint64_t a5, NSError **a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    char v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      if (a1)
      {
        unsigned int v13 = strrchr(a1, 47);
        if (v13) {
          char v14 = v13 + 1;
        }
        else {
          char v14 = a1;
        }
      }
      else
      {
        char v14 = 0;
      }
      *(_DWORD *)int buf = 136316674;
      __int16 v17 = "AVAEInternal.h";
      __int16 v18 = 1024;
      int v19 = 104;
      __int16 v20 = 2080;
      int v21 = v14;
      __int16 v22 = 1024;
      int v23 = a2;
      __int16 v24 = 2080;
      uint64_t v25 = a3;
      __int16 v26 = 2080;
      uint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a5;
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    if (a6) {
      *a6 = (NSError *)objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.avfaudio", (int)a5, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", objc_msgSend(NSString, "stringWithUTF8String:", a4), @"failed call", 0));
    }
    else {
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", a5);
    }
  }
  return a5 == 0;
}

BOOL AVAudioEngineGraph::IsNodeInGraph(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = *(void **)(v2 + 8);
  uint64_t v3 = (void *)(v2 + 8);
  int v4 = v5;
  if (!v5) {
    goto LABEL_14;
  }
  unint64_t v6 = *(void *)(a2 + 24);
  BOOL v7 = v3;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      BOOL v7 = v4;
    }
    int v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v3 || v6 < v7[4]) {
LABEL_14:
  }
    BOOL v7 = v3;
  return v7 != v3;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, const AVAudioEngineGraph *a2)
{
  if ((*((unsigned char *)a2 + 32) & 4) == 0) {
    return 2;
  }
  int v4 = AUGraphParser::InitializeNode(*(AUGraphParser **)(a1 + 16), a2, (AUGraphNodeBaseV3 *)**(unsigned int **)(a1 + 24), 1);
  **(_DWORD **)(a1 + 8) = v4;
  return v4 != 0;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v48 = *a3;
  if (!*a3) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6 && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 120))(v6))
  {
    **(void **)(a1 + 8) = *(void *)(v5 + 16);
    **(_DWORD **)(a1 + 16) = *(_DWORD *)(v5 + 24);
  }
  uint64_t v7 = **(void **)(a1 + 8);
  if (v7 && **(_DWORD **)(a1 + 16) != -1)
  {
    (*(void (**)(void, void))(**(void **)(a2 + 24) + 368))(*(void *)(a2 + 24), *(void *)(v7 + 16));
  }
  else
  {
LABEL_8:
    uint64_t v8 = *(void *)(a1 + 24);
    for (uint64_t i = *(void *)(v8 + 8); i != v8; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v10 = *(void *)(i + 32);
      if (!v10 || ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 120))(v10) & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316418;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 71;
          __int16 v51 = 2080;
          *(void *)size_t v52 = "AVAudioEngineGraph.mm";
          *(_WORD *)&char v52[8] = 1024;
          *(_DWORD *)&v52[10] = 613;
          __int16 v53 = 2080;
          id v54 = "operator()";
          __int16 v55 = 2080;
          int v56 = "conn.destNode && conn.destNode->IsMixerNode()";
          _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "conn.destNode && conn.destNode->IsMixerNode()");
      }
      (*(void (**)(void, void, void))(**(void **)(a2 + 24) + 368))(*(void *)(a2 + 24), *(void *)(*(void *)(i + 32) + 16), *(unsigned int *)(i + 40));
    }
  }
  *(_DWORD *)(a2 + 32) |= 4u;
  uint64_t v12 = a1;
  if (v48) {
    BOOL v13 = *(void *)(a1 + 32) == a2;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    uint64_t v14 = *(void *)(v48 + 16);
    if (v14)
    {
      unsigned int v15 = *(_DWORD *)(v14 + 36);
      uint64_t v16 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v14 + 24) + 48))(*(void *)(v14 + 24), 0);
      if (v16) {
        [v16 sampleRate];
      }
      else {
        double v17 = -1.0;
      }
      AUGraphNodeBase::CalculateMaxFrames((AUGraphNodeBase *)a2, v15, v17);
      uint64_t v12 = a1;
    }
  }
  *(void *)int buf = &unk_1EEFA3840;
  *(void *)&buf[8] = a2;
  *(void *)&uint8_t v52[4] = buf;
  AUGraphParser::TraverseMIDIGraphNodes(a2, (uint64_t)buf);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](buf);
  int IsValidSourceNode = AVAudioEngineGraph::IsValidSourceNode(*(void *)(v12 + 40), a2);
  int v19 = *(void **)(a2 + 48);
  __int16 v20 = *(void **)(a2 + 56);
  if (v19 == v20)
  {
    int v21 = 0;
  }
  else
  {
    int v21 = 0;
    do
    {
      if (*v19++) {
        ++v21;
      }
    }
    while (v19 != v20);
  }
  uint64_t v23 = a1;
  if (IsValidSourceNode)
  {
    if (v21)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      __int16 v24 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 71;
        __int16 v51 = 2080;
        *(void *)size_t v52 = "AVAudioEngineGraph.mm";
        *(_WORD *)&char v52[8] = 1024;
        *(_DWORD *)&v52[10] = 646;
        __int16 v53 = 2080;
        id v54 = "operator()";
        __int16 v55 = 2080;
        int v56 = "0 == inCurrNode.NumberOfValidConnections(kUpstream)";
        _os_log_impl(&dword_19D794000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "0 == inCurrNode.NumberOfValidConnections(kUpstream)");
      uint64_t v23 = a1;
    }
    uint64_t v25 = *(void ***)(v23 + 48);
    uint64_t v27 = (uint64_t *)v25[1];
    unint64_t v26 = (unint64_t)v25[2];
    if ((unint64_t)v27 >= v26)
    {
      uint64_t v28 = ((char *)v27 - (unsigned char *)*v25) >> 3;
      if ((unint64_t)(v28 + 1) >> 61) {
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v26 - (void)*v25;
      uint64_t v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
        uint64_t v30 = v28 + 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      if (v31) {
        unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v31);
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t v40 = (uint64_t *)(v31 + 8 * v28);
      unint64_t v41 = v31 + 8 * v32;
      *uint64_t v40 = a2;
      char v34 = v40 + 1;
      uint64_t v43 = (char *)*v25;
      double v42 = (char *)v25[1];
      if (v42 == *v25) {
        goto LABEL_68;
      }
      do
      {
        uint64_t v44 = *((void *)v42 - 1);
        v42 -= 8;
        *--uint64_t v40 = v44;
      }
      while (v42 != v43);
LABEL_67:
      double v42 = (char *)*v25;
LABEL_68:
      *uint64_t v25 = v40;
      v25[1] = v34;
      v25[2] = (void *)v41;
      if (v42) {
        operator delete(v42);
      }
      goto LABEL_70;
    }
    goto LABEL_51;
  }
  if (!v21)
  {
    uint64_t v25 = *(void ***)(a1 + 56);
    uint64_t v27 = (uint64_t *)v25[1];
    unint64_t v33 = (unint64_t)v25[2];
    if ((unint64_t)v27 >= v33)
    {
      uint64_t v35 = ((char *)v27 - (unsigned char *)*v25) >> 3;
      if ((unint64_t)(v35 + 1) >> 61) {
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = v33 - (void)*v25;
      uint64_t v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
        uint64_t v37 = v35 + 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v38);
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v40 = (uint64_t *)(v38 + 8 * v35);
      unint64_t v41 = v38 + 8 * v39;
      *uint64_t v40 = a2;
      char v34 = v40 + 1;
      __int16 v45 = (char *)*v25;
      double v42 = (char *)v25[1];
      if (v42 == *v25) {
        goto LABEL_68;
      }
      do
      {
        uint64_t v46 = *((void *)v42 - 1);
        v42 -= 8;
        *--uint64_t v40 = v46;
      }
      while (v42 != v45);
      goto LABEL_67;
    }
LABEL_51:
    *uint64_t v27 = a2;
    char v34 = v27 + 1;
LABEL_70:
    v25[1] = v34;
  }
  return 0;
}

void sub_19D7D835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *a2)
{
  *((_DWORD *)a2 + 8) |= 4u;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(v3 + 36);
  uint64_t v5 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v3 + 24) + 48))(*(void *)(v3 + 24), 0);
  if (v5) {
    [v5 sampleRate];
  }
  else {
    double v6 = -1.0;
  }
  AUGraphNodeBase::CalculateMaxFrames(a2, v4, v6);
  return 0;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA3840;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA3840;
  result[1] = v3;
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA32E8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EEFA32E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  long long v4 = *a3;
  if (*a3)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (*(void *)(v5 + 16))
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6 != v5)
      {
        uint64_t v7 = *v4;
        int v8 = *((_DWORD *)v4 + 2);
        uint64_t v9 = v4[2];
        int v10 = *((_DWORD *)v4 + 6);
        while (v7 != *(void *)(v6 + 16)
             || v8 != *(_DWORD *)(v6 + 24)
             || v9 != *(void *)(v6 + 32)
             || v10 != *(_DWORD *)(v6 + 40))
        {
          uint64_t v6 = *(void *)(v6 + 8);
          if (v6 == v5) {
            goto LABEL_10;
          }
        }
        if (v5 != v6) {
          return 1;
        }
      }
    }
  }
LABEL_10:
  a2[8] = 0;
  if (*(_DWORD **)(a1 + 16) == a2) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 152))(a2);
  if (result)
  {
    uint64_t result = 0;
    a2[9] = 0;
  }
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA32A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA32A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInOutputChain(AVAudioEngineGraph &,ETraversalMode,AUGraphNodeBaseV3 &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t AUGraphParser::InitializeActiveNodesInInputChain(AVAudioNodeImplBase **this, AVAudioEngineGraph *a2, AUGraphNodeBaseV3 *a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t NodeFromMap = (AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
  if (NodeFromMap) {
    BOOL v6 = NodeFromMap == a2;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 775;
      __int16 v85 = 2080;
      v86 = "InitializeActiveNodesInInputChain";
      __int16 v87 = 2080;
      size_t v88 = "inGraph.GetInputNode() && (&inNode == inGraph.GetInputNode())";
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inGraph.GetInputNode() && (&inNode == inGraph.GetInputNode())");
  }
  int v8 = (char *)(this + 20);
  for (uint64_t i = this[21]; i != (AVAudioNodeImplBase *)v8; uint64_t i = (AVAudioNodeImplBase *)*((void *)i + 1))
  {
    uint64_t v10 = *((void *)i + 4);
    if (v10) {
      *(_DWORD *)(v10 + 32) = 0;
    }
    AVAudioEngineGraph::MakeVirtualConnection((AVAudioEngineGraph *)this, (uint64_t)i + 16);
  }
  size_t v81 = &v81;
  v82 = (void **)&v81;
  uint64_t v83 = 0;
  v78 = 0;
  v79 = 0;
  uint64_t v80 = 0;
  char v77 = 0;
  AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
  this[12] = this[11];
  uint64_t v11 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
  if (v11)
  {
    uint64_t v12 = v11;
    std::string __p = 0;
    BOOL v13 = operator new(0x30uLL);
    *BOOL v13 = &unk_1EEFA30F0;
    v13[1] = &v77;
    id v13[2] = &__p;
    v13[3] = &v78;
    v13[4] = this;
    v13[5] = this + 11;
    *(void *)&buf[24] = v13;
    AUGraphParser::TraverseGraphNodes(0, 1, v12, 0, (uint64_t)buf);
    std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](buf);
  }
  if (!*((unsigned char *)this + 187) && v77)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 803;
      __int16 v85 = 2080;
      v86 = "InitializeActiveNodesInInputChain";
      __int16 v87 = 2080;
      size_t v88 = "false == isInputConnToConverter";
      _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "false == isInputConnToConverter");
  }
  unsigned int v15 = (uint64_t *)v78;
  uint64_t v16 = v79;
  if (v78 != v79)
  {
    do
    {
      uint64_t v17 = *v15;
      __int16 v18 = this[3];
      if (*v15) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19 || *(AVAudioNodeImplBase **)(v17 + 24) != v18)
      {
        std::string __p = 0;
        int64_t v75 = 0;
        int64_t v76 = 0;
        uint64_t v20 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, v18);
        if (v20)
        {
          uint64_t v21 = v20;
          __int16 v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
          *(void *)__int16 v22 = v21;
          __int16 v24 = v22 + 8;
          unint64_t v26 = (char *)__p;
          uint64_t v25 = v75;
          uint64_t v27 = v22;
          if (v75 != __p)
          {
            do
            {
              uint64_t v28 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v27 - 1) = v28;
              v27 -= 8;
            }
            while (v25 != v26);
            uint64_t v25 = (char *)__p;
          }
          std::string __p = v27;
          int64_t v75 = v22 + 8;
          int64_t v76 = &v22[8 * v23];
          if (v25) {
            operator delete(v25);
          }
          int64_t v75 = v24;
        }
        *(void *)int buf = &unk_1EEFA3180;
        *(void *)&buf[8] = this;
        *(void *)&uint8_t buf[16] = &__p;
        *(void *)&buf[24] = buf;
        AUGraphParser::TraverseGraphNodes(1, 1, v17, 0, (uint64_t)buf);
        std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](buf);
        if (__p)
        {
          int64_t v75 = (char *)__p;
          operator delete(__p);
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  if (this[11] == this[12])
  {
    std::__list_imp<AUGraphConnection>::clear(this + 20);
    unint64_t v41 = (uint64_t *)v78;
    uint64_t v40 = v79;
    if (v78 != v79)
    {
      do
      {
        uint64_t v42 = *v41;
        uint64_t v43 = this[3];
        if (*v41) {
          BOOL v44 = v43 == 0;
        }
        else {
          BOOL v44 = 1;
        }
        if (v44 || *(AVAudioNodeImplBase **)(v42 + 24) != v43)
        {
          std::string __p = 0;
          int64_t v75 = 0;
          int64_t v76 = 0;
          uint64_t v45 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, v43);
          if (v45)
          {
            uint64_t v46 = v45;
            uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
            *(void *)uint64_t v47 = v46;
            __int16 v49 = v47 + 8;
            __int16 v51 = (char *)__p;
            int v50 = v75;
            size_t v52 = v47;
            if (v75 != __p)
            {
              do
              {
                uint64_t v53 = *((void *)v50 - 1);
                v50 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              while (v50 != v51);
              int v50 = (char *)__p;
            }
            std::string __p = v52;
            int64_t v75 = v47 + 8;
            int64_t v76 = &v47[8 * v48];
            if (v50) {
              operator delete(v50);
            }
            int64_t v75 = v49;
          }
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          uint64_t v70 = (uint64_t)&v70;
          uint64_t v71 = &v70;
          id v54 = operator new(0x28uLL);
          *id v54 = &unk_1EEFA31C8;
          v54[1] = &v73;
          v54[2] = this;
          v54[3] = &__p;
          v54[4] = &v70;
          *(void *)&buf[24] = v54;
          AUGraphParser::TraverseGraphNodes(1, 1, v42, 0, (uint64_t)buf);
          std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](buf);
          for (uint64_t j = v71; j != &v70; uint64_t j = (uint64_t *)j[1])
          {
            if (j[2])
            {
              if (*((_DWORD *)j + 6) != -1)
              {
                uint64_t v56 = j[4];
                if (v56)
                {
                  uint64_t v57 = *((unsigned int *)j + 10);
                  if (v57 != -1)
                  {
                    uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(v56 + 24), v57, 0);
                    if (Disconnection)
                    {
                      if (AVAudioEngineLogCategory(void)::once != -1) {
                        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
                      }
                      __int16 v59 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
                      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)int buf = 136316674;
                        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
                        *(_WORD *)&unsigned char buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 104;
                        *(_WORD *)&unsigned char buf[18] = 2080;
                        *(void *)&buf[20] = "AVAudioEngineGraph.mm";
                        *(_WORD *)&unsigned char buf[28] = 1024;
                        *(_DWORD *)&buf[30] = 876;
                        __int16 v85 = 2080;
                        v86 = "InitializeActiveNodesInInputChain";
                        __int16 v87 = 2080;
                        size_t v88 = "inGraph.MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
                        __int16 v89 = 1024;
                        int v90 = Disconnection;
                        _os_log_impl(&dword_19D794000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
                      }
                      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", Disconnection);
                    }
                    else
                    {
                      AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 1, (uint64_t)(j + 2), 0);
                    }
                  }
                }
              }
            }
          }
          std::__list_imp<AUGraphConnection>::clear(&v70);
          if (__p)
          {
            int64_t v75 = (char *)__p;
            operator delete(__p);
          }
        }
        ++v41;
      }
      while (v41 != v40);
    }
    goto LABEL_88;
  }
  std::__list_imp<AUGraphConnection>::clear(&v81);
  for (k = this[21]; k != (AVAudioNodeImplBase *)v8; k = (AVAudioNodeImplBase *)*((void *)k + 1))
  {
    uint64_t v30 = *((void *)k + 4);
    if (v30 && AUGraphParser::IsNodeConnectedToTarget(0, v30, this + 11))
    {
      AUGraphParser::PrepareForConnection((uint64_t)this, (uint64_t)k + 16);
      uint64_t Connection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, (uint64_t *)k + 2, 0);
      if (Connection)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v32 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316674;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 104;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "AVAudioEngineGraph.mm";
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = 894;
          __int16 v85 = 2080;
          v86 = "InitializeActiveNodesInInputChain";
          __int16 v87 = 2080;
          size_t v88 = "inGraph.MakeConnection(inputConn)";
          __int16 v89 = 1024;
          int v90 = Connection;
          _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", Connection);
      }
      else
      {
        unint64_t v33 = operator new(0x30uLL);
        long long v34 = *((_OWORD *)k + 2);
        v33[1] = *((_OWORD *)k + 1);
        v33[2] = v34;
        uint64_t v35 = v81;
        *(void *)unint64_t v33 = v81;
        *((void *)v33 + 1) = &v81;
        v35[1] = v33;
        size_t v81 = v33;
        ++v83;
      }
    }
  }
  for (m = v82; m != (void **)&v81; m = (void **)m[1])
    AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)(m + 2), 1, 0);
  uint64_t v37 = (void **)this[11];
  unint64_t v38 = (void **)this[12];
  if (v37 == v38)
  {
LABEL_88:
    int v60 = this[11];
    __int16 v61 = this[12];
    BOOL v62 = v60 == v61;
    if (v60 == v61) {
      __int16 v63 = 0;
    }
    else {
      __int16 v63 = AVAudioEngineGraph::InputAvailable;
    }
    if (v62) {
      int v64 = 0;
    }
    else {
      int v64 = this;
    }
    v69[0] = v63;
    v69[1] = v64;
    uint64_t v65 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v65 + 128))(v65))
    {
      (*(void (**)(uint64_t, void *))(*(void *)v65 + 280))(v65, v69);
    }
    else
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      int v66 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 104;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "AVAudioEngineGraph.mm";
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = 945;
        __int16 v85 = 2080;
        v86 = "InitializeActiveNodesInInputChain";
        __int16 v87 = 2080;
        size_t v88 = "inGraph.PerformCommand(*inGraph.GetInputNode(), AVAudioEngineGraph::kAUSetInputCallback, &rc, sizeof(rc))";
        __int16 v89 = 1024;
        int v90 = -50;
        _os_log_impl(&dword_19D794000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", 4294967246);
    }
    AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, this[11] != this[12]);
    long long v67 = (void *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
    uint64_t v39 = AVAudioEngineGraph::PerformCommand((uint64_t)this, v67, 3, 0, 0);
    goto LABEL_102;
  }
  while (1)
  {
    std::string __p = *v37;
    *(void *)int buf = &unk_1EEFA3210;
    *(void *)&buf[8] = &__p;
    *(void *)&uint8_t buf[16] = this;
    *(void *)&buf[24] = buf;
    AUGraphParser::TraverseGraphNodes(0, 0, (uint64_t)__p, 0, (uint64_t)buf);
    std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](buf);
    uint64_t v39 = AUGraphParser::InitializeNodeChain((uint64_t)this, 1, (uint64_t)__p, 1);
    if (v39) {
      break;
    }
    if (++v37 == v38) {
      goto LABEL_88;
    }
  }
  AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
  this[12] = this[11];
LABEL_102:
  if (v78)
  {
    v79 = (uint64_t *)v78;
    operator delete(v78);
  }
  std::__list_imp<AUGraphConnection>::clear(&v81);
  return v39;
}

void sub_19D7D9250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  std::__list_imp<AUGraphConnection>::clear(&a26);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::MakeVirtualConnection(AVAudioEngineGraph *a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  if (!AVAudioEngineGraph::IsNodeInGraph((uint64_t)a1, *(void *)a2)
    || (uint64_t v5 = *(void *)(a2 + 16), !AVAudioEngineGraph::IsNodeInGraph((uint64_t)a1, v5)))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    BOOL v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v23 = "AVAEInternal.h";
      __int16 v24 = 1024;
      int v25 = 71;
      __int16 v26 = 2080;
      uint64_t v27 = "AVAudioEngineGraph.mm";
      __int16 v28 = 1024;
      int v29 = 3932;
      __int16 v30 = 2080;
      unint64_t v31 = "MakeVirtualConnection";
      __int16 v32 = 2080;
      unint64_t v33 = "IsNodeInGraph(conn.srcNode) && IsNodeInGraph(conn.destNode)";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(conn.srcNode) && IsNodeInGraph(conn.destNode)");
    uint64_t v4 = *(void *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
  }
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(a1, *(AVAudioNodeImplBase **)(v4 + 24));
  uint64_t v8 = AVAudioEngineGraph::GetNodeFromMap(a1, *(AVAudioNodeImplBase **)(v5 + 24));
  uint64_t v18 = 0;
  int v19 = -1;
  uint64_t v20 = 0;
  int v21 = -1;
  (*(void (**)(uint64_t, void, void, uint64_t *))(*(void *)NodeFromMap + 32))(NodeFromMap, 0, *(unsigned int *)(a2 + 8), &v18);
  if (v20
    && (*(void *)a2 != v18 || *(_DWORD *)(a2 + 8) != v19 || *(void *)(a2 + 16) != v20 || *(_DWORD *)(a2 + 24) != v21))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v23 = "AVAEInternal.h";
      __int16 v24 = 1024;
      int v25 = 71;
      __int16 v26 = 2080;
      uint64_t v27 = "AVAudioEngineGraph.mm";
      __int16 v28 = 1024;
      int v29 = 3942;
      __int16 v30 = 2080;
      unint64_t v31 = "MakeVirtualConnection";
      __int16 v32 = 2080;
      unint64_t v33 = "srcCurrConn.destNode == NULL || srcCurrConn == conn";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "srcCurrConn.destNode == NULL || srcCurrConn == conn");
  }
  uint64_t v14 = 0;
  int v15 = -1;
  uint64_t v16 = 0;
  int v17 = -1;
  (*(void (**)(uint64_t, uint64_t, void, uint64_t *))(*(void *)v8 + 32))(v8, 1, *(unsigned int *)(a2 + 24), &v14);
  if (v14
    && (*(void *)a2 != v14 || *(_DWORD *)(a2 + 8) != v15 || *(void *)(a2 + 16) != v16 || *(_DWORD *)(a2 + 24) != v17))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v23 = "AVAEInternal.h";
      __int16 v24 = 1024;
      int v25 = 71;
      __int16 v26 = 2080;
      uint64_t v27 = "AVAudioEngineGraph.mm";
      __int16 v28 = 1024;
      int v29 = 3947;
      __int16 v30 = 2080;
      unint64_t v31 = "MakeVirtualConnection";
      __int16 v32 = 2080;
      unint64_t v33 = "destCurrConn.srcNode == NULL || destCurrConn == conn";
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "destCurrConn.srcNode == NULL || destCurrConn == conn");
  }
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = (unsigned int *)(a2 + 8);
  (*(void (**)(uint64_t, void, void, uint64_t, void))(*(void *)NodeFromMap + 56))(NodeFromMap, 0, v12, v8, v11[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v8 + 56))(v8, 1, v11[4], NodeFromMap, *v11);
}

uint64_t AUGraphParser::PrepareForConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void **)(a2 + 16);
  if (!*(void *)a2 || !AVAudioEngineGraph::IsNodeInGraph(a1, *(void *)a2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    BOOL v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v22 = "AVAEInternal.h";
      __int16 v23 = 1024;
      int v24 = 71;
      __int16 v25 = 2080;
      __int16 v26 = "AVAudioEngineGraph.mm";
      __int16 v27 = 1024;
      int v28 = 1100;
      __int16 v29 = 2080;
      __int16 v30 = "PrepareForConnection";
      __int16 v31 = 2080;
      __int16 v32 = "srcNode && inGraph.IsNodeInGraph(srcNode)";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "srcNode && inGraph.IsNodeInGraph(srcNode)");
  }
  if (!v5 || !AVAudioEngineGraph::IsNodeInGraph(a1, (uint64_t)v5))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v22 = "AVAEInternal.h";
      __int16 v23 = 1024;
      int v24 = 71;
      __int16 v25 = 2080;
      __int16 v26 = "AVAudioEngineGraph.mm";
      __int16 v27 = 1024;
      int v28 = 1101;
      __int16 v29 = 2080;
      __int16 v30 = "PrepareForConnection";
      __int16 v31 = 2080;
      __int16 v32 = "destNode && inGraph.IsNodeInGraph(destNode)";
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "destNode && inGraph.IsNodeInGraph(destNode)");
  }
  uint64_t v17 = 0;
  int v18 = -1;
  uint64_t v19 = 0;
  int v20 = -1;
  (*(void (**)(uint64_t, void, void, uint64_t *))(*(void *)v4 + 32))(v4, 0, *(unsigned int *)(a2 + 8), &v17);
  if (v19
    && (*(void *)a2 != v17 || *(_DWORD *)(a2 + 8) != v18 || *(void *)(a2 + 16) != v19 || *(_DWORD *)(a2 + 24) != v20))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v22 = "AVAEInternal.h";
      __int16 v23 = 1024;
      int v24 = 71;
      __int16 v25 = 2080;
      __int16 v26 = "AVAudioEngineGraph.mm";
      __int16 v27 = 1024;
      int v28 = 1107;
      __int16 v29 = 2080;
      __int16 v30 = "PrepareForConnection";
      __int16 v31 = 2080;
      __int16 v32 = "srcCurrConn.destNode == NULL || srcCurrConn == inConn";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "srcCurrConn.destNode == NULL || srcCurrConn == inConn");
  }
  uint64_t v13 = 0;
  int v14 = -1;
  uint64_t v15 = 0;
  int v16 = -1;
  (*(void (**)(void *, uint64_t, void, uint64_t *))(*v5 + 32))(v5, 1, *(unsigned int *)(a2 + 24), &v13);
  if (v13
    && (*(void *)a2 != v13 || *(_DWORD *)(a2 + 8) != v14 || *(void *)(a2 + 16) != v15 || *(_DWORD *)(a2 + 24) != v16))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v22 = "AVAEInternal.h";
      __int16 v23 = 1024;
      int v24 = 71;
      __int16 v25 = 2080;
      __int16 v26 = "AVAudioEngineGraph.mm";
      __int16 v27 = 1024;
      int v28 = 1111;
      __int16 v29 = 2080;
      __int16 v30 = "PrepareForConnection";
      __int16 v31 = 2080;
      __int16 v32 = "destCurrConn.srcNode == NULL || destCurrConn == inConn";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "destCurrConn.srcNode == NULL || destCurrConn == inConn");
  }
  uint64_t result = (*(uint64_t (**)(void *))(*v5 + 120))(v5);
  if ((result & 1) == 0)
  {
    uint64_t result = AVAudioEngineGraph::PerformCommand(a1, v5, 4, 0, 0);
    uint64_t v11 = result;
    if (result)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      unsigned int v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        __int16 v22 = "AVAEInternal.h";
        __int16 v23 = 1024;
        int v24 = 104;
        __int16 v25 = 2080;
        __int16 v26 = "AVAudioEngineGraph.mm";
        __int16 v27 = 1024;
        int v28 = 1116;
        __int16 v29 = 2080;
        __int16 v30 = "PrepareForConnection";
        __int16 v31 = 2080;
        __int16 v32 = "inGraph.PerformCommand(*destNode, AVAudioEngineGraph::kAUUninitialize, NULL, 0)";
        __int16 v33 = 1024;
        int v34 = v11;
        _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      return objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v11);
    }
  }
  return result;
}

uint64_t AVAudioEngineGraph::MakeConnection(AVAudioEngineGraph *a1, uint64_t *a2, NSError **a3)
{
  uint64_t v4 = *a2;
  if (*a2) {
    uint64_t v4 = *(void *)(v4 + 24);
  }
  uint64_t v5 = a2[2];
  if (v5) {
    BOOL v6 = *(AVAudioNodeImplBase **)(v5 + 24);
  }
  else {
    BOOL v6 = 0;
  }
  return AVAudioEngineGraph::MakeConnection(a1, (AVAudioNodeImplBase *)v4, v6, *((_DWORD *)a2 + 2), *((unsigned int *)a2 + 6), a3);
}

void AVAudioEngineGraph::RemovePendingConnection(uint64_t a1, int a2, uint64_t a3, int a4, NSError **a5)
{
  if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3782, "RemovePendingConnection", "inConn.srcNode || inConn.destNode", (*(void *)a3 | *(void *)(a3 + 16)) != 0, 4294967246, a5))
  {
    uint64_t v9 = a2 ? a1 + 160 : a1 + 136;
    uint64_t v10 = *(uint64_t **)(v9 + 8);
    if (v10 != (uint64_t *)v9)
    {
      do
      {
        if (a4 == 1)
        {
          if (*(void *)a3 == v10[2])
          {
            uint64_t v11 = *(void *)(a3 + 16);
            if (*(_DWORD *)(a3 + 8) == *((_DWORD *)v10 + 6))
            {
              if (v11 == v10[4] && *(_DWORD *)(a3 + 24) == *((_DWORD *)v10 + 10)) {
                char v12 = 1;
              }
              else {
LABEL_18:
              }
                char v12 = 0;
              uint64_t v13 = *v10;
              int v14 = (uint64_t *)v10[1];
              *(void *)(v13 + 8) = v14;
              *(void *)v10[1] = v13;
              --*(void *)(v9 + 16);
              operator delete(v10);
              if (v12) {
                return;
              }
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(a3 + 16);
          }
          if (v10[4] == v11 && *((_DWORD *)v10 + 10) == *(_DWORD *)(a3 + 24)) {
            goto LABEL_18;
          }
        }
        else if (v10[2] == *(void *)a3 || v10[4] == *(void *)(a3 + 16))
        {
          goto LABEL_18;
        }
        int v14 = (uint64_t *)v10[1];
LABEL_22:
        uint64_t v10 = v14;
      }
      while (v14 != (uint64_t *)v9);
    }
  }
}

uint64_t AVAudioEngineGraph::SetNodesToPullEnabled(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 128) != a2)
  {
    char v2 = a2;
    uint64_t v3 = this;
    if (*(unsigned char *)(this + 184))
    {
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(this + 112);
      *(unsigned char *)(v3 + 128) = v2;
      return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v3 + 112);
    }
    else
    {
      *(unsigned char *)(this + 128) = a2;
    }
  }
  return this;
}

uint64_t AVAudioEngineGraph::InputAvailable(AVAudioEngineGraph *this, void *a2, unsigned int *a3, const AudioTimeStamp *a4, uint64_t a5, unsigned int a6, AudioBufferList *a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = (char *)this + 112;
  int v9 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 112);
  char v36 = v9;
  if (!v9) {
    goto LABEL_34;
  }
  if (!*((unsigned char *)this + 128)) {
    goto LABEL_34;
  }
  uint64_t v10 = (void *)*((void *)this + 11);
  __int16 v33 = (void *)*((void *)this + 12);
  if (v10 == v33) {
    goto LABEL_34;
  }
  while (1)
  {
    uint64_t v11 = (void *)*v10;
    char v12 = (*(uint64_t (**)(void))(*(void *)*v10 + 144))(*v10);
    if ((v12 & 1) == 0)
    {
      int v14 = (unsigned int *)v11[1];
      if (v14)
      {
        int v15 = 1;
      }
      else
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        int v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316418;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          __int16 v38 = 1024;
          int v39 = 71;
          __int16 v40 = 2080;
          unint64_t v41 = "AVAudioEngineGraph.mm";
          __int16 v42 = 1024;
          int v43 = 3636;
          __int16 v44 = 2080;
          uint64_t v45 = "InputAvailable";
          __int16 v46 = 2080;
          uint64_t v47 = "isSink || tap != nullptr";
          _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "isSink || tap != nullptr");
LABEL_14:
        int v15 = 0;
        int v14 = 0;
      }
      uint64_t v17 = (const AudioBufferList **)(v14 + 300);
      int v16 = 4;
      goto LABEL_16;
    }
    uint64_t v13 = v11[3];
    if (!v13) {
      goto LABEL_14;
    }
    int v14 = 0;
    int v15 = 0;
    int v16 = *(_DWORD *)(v13 + 196);
    uint64_t v17 = (const AudioBufferList **)(v13 + 200);
LABEL_16:
    int v34 = 0;
    *(void *)int buf = v17 + 3;
    int v19 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v17 + 3));
    buf[8] = v19;
    if (!v19) {
      goto LABEL_31;
    }
    int v20 = *v17;
    uint64_t mNumberBuffers = (*v17)->mNumberBuffers;
    if (mNumberBuffers != (unint64_t)((char *)v17[1] - (char *)*v17 - 8) >> 4) {
      __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
    }
    if (!mNumberBuffers) {
      goto LABEL_31;
    }
    uint64_t v22 = 0;
    uint64_t v23 = 16 * mNumberBuffers;
    do
    {
      int v24 = (char *)v20 + v22;
      *((_DWORD *)v24 + 2) = 1;
      *((_DWORD *)v24 + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v16 * a5;
      *((void *)v24 + 2) = 0;
      v22 += 16;
    }
    while (v23 != v22);
    uint64_t v25 = (*(uint64_t (**)(void *))(*v11 + 296))(v11);
    if (v15) {
      uint64_t v26 = v14[2];
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = (*(uint64_t (**)(void *))(*v11 + 304))(v11);
    if ((*(unsigned int (**)(uint64_t, int *, unsigned int *, uint64_t, uint64_t, const AudioBufferList *, uint64_t))(v25 + 16))(v25, &v34, a3, a5, v26, v20, v27))
    {
      goto LABEL_33;
    }
    uint64_t v29 = v20->mNumberBuffers;
    if (v29) {
      break;
    }
LABEL_29:
    if ((v12 & 1) == 0)
    {
      v34 |= 8u;
      AVAudioNodeTap::RenderCallback((AVAudioNodeTap *)v14, &v34, a3, (const AudioTimeStamp *)v14[2], a5, v20, v28);
    }
LABEL_31:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
    if (++v10 == v33) {
      goto LABEL_34;
    }
  }
  p_mData = &v20->mBuffers[0].mData;
  while (*p_mData)
  {
    p_mData += 2;
    if (!--v29) {
      goto LABEL_29;
    }
  }
LABEL_33:
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
LABEL_34:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v35);
  return 0;
}

void sub_19D7DA45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  if (*a3)
  {
    if (*(void *)v3 == **(void **)(a1 + 8))
    {
      uint64_t v6 = *(void *)(v3 + 16);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        *(void *)int buf = &unk_1EEFA37F8;
        *(void *)&buf[8] = v7;
        *(void *)&void v12[4] = buf;
        AUGraphParser::TraverseGraphNodes(0, 1, v6, 0, (uint64_t)buf);
        std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](buf);
        uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection(*(AVAudioEngineGraph **)(a1 + 16), *(AVAudioNodeImplBase **)(*(void *)(v3 + 16) + 24), *(unsigned int *)(v3 + 24), 0);
        if (Disconnection)
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          int v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316674;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 104;
            __int16 v11 = 2080;
            *(void *)char v12 = "AVAudioEngineGraph.mm";
            *(_WORD *)&unsigned char v12[8] = 1024;
            *(_DWORD *)&v12[10] = 916;
            __int16 v13 = 2080;
            int v14 = "operator()";
            __int16 v15 = 2080;
            int v16 = "inGraph.MakeDisconnection(inPrevConn->destNode->NodeImpl(), inPrevConn->destBus)";
            __int16 v17 = 1024;
            int v18 = Disconnection;
            _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", Disconnection);
        }
        else
        {
          AVAudioEngineGraph::AddPendingConnection(*(void *)(a1 + 16), 1, v3, 0);
        }
      }
    }
  }
  return 0;
}

void sub_19D7DA698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, const AVAudioEngineGraph *a2)
{
  return 0;
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA37F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA37F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1},std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2::operator() const(AUGraphNodeBaseV3 &,AUGraphConnection *)::{lambda(AUGraphNodeBaseV3 &,AUGraphConnection *)#1}>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3210;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3210;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t AVAudioEngineGraph::MakeConnection(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2, AVAudioNodeImplBase *a3, int a4, uint64_t a5, NSError **a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v29 = a6;
  char IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph(this, a3);
  _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3852, "MakeConnection", "IsNodeInGraph(inDestImpl)", IsNodeInGraph, 4294967246, a6);
  if (a2)
  {
    char v13 = AVAudioEngineGraph::IsNodeInGraph(this, a2);
    _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3854, "MakeConnection", "IsNodeInGraph(inSrcImpl)", v13, 4294967246, a6);
    uint64_t NodeFromMap = (void *)AVAudioEngineGraph::GetNodeFromMap(this, a2);
    __int16 v15 = (const AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, a3);
    int v24 = NodeFromMap;
    int v25 = a4;
    uint64_t v26 = v15;
    int v27 = a5;
    int v16 = *(unsigned __int8 *)(*((void *)v15 + 3) + 48);
    AUGraphParser::PrepareForDisconnection(this, v15, 0, v17, v18);
    uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection(this, a3, a5, a6);
    if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3875, "MakeConnection", "err = MakeDisconnection(inDestImpl, inDestBus, outErr)", Disconnection, a6))
    {
      uint64_t Disconnection = AVAudioEngineGraph::PerformCommand((uint64_t)this, v15, 8, (uint64_t)&v24, 32);
      unsigned int v28 = Disconnection;
      if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3879, "MakeConnection", "err = PerformCommand(*graphNodeDest, kAUMakeConnection, &connection, sizeof(connection))", Disconnection, a6))
      {
        if (!(*(unsigned int (**)(const AVAudioEngineGraph *))(*(void *)v15 + 120))(v15))
        {
          uint64_t v30 = (uint64_t)&v30;
          __int16 v31 = &v30;
          uint64_t v32 = 0;
          AUGraphParser::GetNodeConnectionsToMixer((uint64_t)v15, &v30, 0);
          for (uint64_t i = v31; i != &v30; uint64_t i = (uint64_t *)i[1])
            AUGraphParser::InformNodesAboutMixerConnection((uint64_t)NodeFromMap, (uint64_t)(i + 2), a6);
          std::__list_imp<AUGraphConnection>::clear(&v30);
          if (!v16) {
            return Disconnection;
          }
          goto LABEL_7;
        }
        uint64_t v30 = 0;
        LODWORD(v31) = -1;
        uint64_t v32 = 0;
        LODWORD(v3AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = -1;
        (*(void (**)(const AVAudioEngineGraph *, uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 32))(v15, 1, a5, &v30);
        AUGraphParser::InformNodesAboutMixerConnection((uint64_t)NodeFromMap, (uint64_t)&v30, a6);
      }
    }
    if (!v16) {
      return Disconnection;
    }
LABEL_7:
    uint64_t Disconnection = AVAudioEngineGraph::PerformCommand((uint64_t)this, v15, 3, 0, 0);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3900, "MakeConnection", "err = PerformCommand(*graphNodeDest, kAUInitialize, NULL, 0)", Disconnection, a6);
    if (!Disconnection)
    {
      uint64_t v20 = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 3, 0, 0);
      unsigned int v28 = v20;
      _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3902, "MakeConnection", "err = PerformCommand(*graphNodeSrc, kAUInitialize, NULL, 0)", v20, a6);
      int v21 = operator new(0x20uLL);
      *int v21 = &unk_1EEFA3570;
      v21[1] = &v28;
      v21[2] = this;
      v21[3] = &v29;
      __int16 v33 = v21;
      AUGraphParser::TraverseMIDIGraphNodes((uint64_t)NodeFromMap, (uint64_t)&v30);
      std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](&v30);
      return v28;
    }
    return Disconnection;
  }

  return AVAudioEngineGraph::MakeDisconnection(this, a3, a5, a6);
}

void sub_19D7DABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__list_imp<AUGraphConnection>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0,std::allocator<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v3 = AVAudioEngineGraph::PerformCommand(*(void *)(a1 + 16), a2, 3, 0, 0);
  **(_DWORD **)(a1 + 8) = v3;
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 3905, "operator()", "err = PerformCommand(midiInput, kAUInitialize, nullptr, 0)", v3, **(NSError ****)(a1 + 24));
  return 0;
}

__n128 std::__function::__func<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0,std::allocator<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0,std::allocator<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3570;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0,std::allocator<AVAudioEngineGraph::MakeConnection(AVAudioNodeImplBase *,AVAudioNodeImplBase *,unsigned int,unsigned int,NSError **)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AVAudioEngineGraph *a2, _OWORD **a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = **(AVAudioEngineGraph ***)(a1 + 8);
  if (v6 == a2 || !v6 && AUGraphParser::IsNodeConnectedToTarget(0, (uint64_t)a2, *(void **)(a1 + 24)))
  {
    if (!*(unsigned char *)(*((void *)a2 + 3) + 48))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        int v21 = "AVAEInternal.h";
        __int16 v22 = 1024;
        int v23 = 71;
        __int16 v24 = 2080;
        int v25 = "AVAudioEngineGraph.mm";
        __int16 v26 = 1024;
        int v27 = 846;
        __int16 v28 = 2080;
        uint64_t v29 = "operator()";
        __int16 v30 = 2080;
        __int16 v31 = "inNodeUpstream.IsInitialized()";
        _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inNodeUpstream.IsInitialized()");
    }
    **(void **)(a1 + 8) = a2;
    if (v5)
    {
      uint64_t v8 = *(uint64_t **)(a1 + 32);
      int v9 = operator new(0x30uLL);
      long long v10 = v5[1];
      v9[1] = *v5;
      v9[2] = v10;
      *((void *)v9 + 1) = v8;
      uint64_t v11 = *v8;
      *(void *)int v9 = *v8;
      *(void *)(v11 + 8) = v9;
      *uint64_t v8 = (uint64_t)v9;
      ++v8[2];
    }
    return 2;
  }
  else
  {
    char v13 = *(AUGraphParser **)(a1 + 16);
    uint64_t v14 = *((void *)v13 + 2);
    if (v14) {
      BOOL v15 = *((void *)a2 + 3) == v14;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15)
    {
      if (v5)
      {
        int v16 = *(uint64_t **)(a1 + 32);
        unsigned int v17 = operator new(0x30uLL);
        uint64_t result = 0;
        long long v18 = v5[1];
        v17[1] = *v5;
        v17[2] = v18;
        *((void *)v17 + 1) = v16;
        uint64_t v19 = *v16;
        *(void *)unsigned int v17 = *v16;
        *(void *)(v19 + 8) = v17;
        *int v16 = (uint64_t)v17;
        ++v16[2];
        return result;
      }
    }
    else
    {
      AUGraphParser::UninitializeNode(v13, a2, 0);
    }
    return 0;
  }
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA31C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EEFA31C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2)
{
  if (AUGraphParser::IsNodeConnectedToTarget(0, a2, *(void **)(a1 + 16))) {
    return 2;
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 32) = 1;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0,std::allocator<AUGraphParser::InitializeActiveNodesInInputChain(AVAudioEngineGraph &,AUGraphNodeBaseV3 &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t std::__function::__func<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0,std::allocator<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3&,AUGraphConnection *)>::operator()(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t v5 = *a3;
  if (*(_DWORD *)(*(uint64_t (**)(void))(*(void *)a2[3] + 256))(a2[3]) == 1635083875
    && ((*(uint64_t (**)(void))(*(void *)a2[3] + 408))(a2[3]) & 1) == 0
    && ((*(uint64_t (**)(void *))(*a2 + 144))(a2) & 1) == 0)
  {
    **(unsigned char **)(a1 + 8) = 1;
  }
  int v6 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6 | 1;
  int v7 = v6 & 2;
  if (v5) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t v9 = *v5;
    if (*v5)
    {
      unsigned int v10 = *(_DWORD *)(v9 + 36);
      uint64_t v11 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v9 + 24) + 48))(*(void *)(v9 + 24), 0);
      if (v11) {
        [v11 sampleRate];
      }
      else {
        double v12 = -1.0;
      }
      AUGraphNodeBase::CalculateMaxFrames((AUGraphNodeBase *)a2, v10, v12);
    }
  }
  if (a2[1] || (*(unsigned int (**)(void *))(*a2 + 144))(a2)) {
    **(void **)(a1 + 16) = a2;
  }
  char v13 = (void *)a2[9];
  uint64_t v14 = (void *)a2[10];
  if (v13 == v14) {
    goto LABEL_24;
  }
  int v15 = 0;
  do
  {
    if (*v13++) {
      ++v15;
    }
  }
  while (v13 != v14);
  if (!v15)
  {
LABEL_24:
    unsigned int v17 = *(void ***)(a1 + 24);
    uint64_t v19 = v17[1];
    unint64_t v18 = (unint64_t)v17[2];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = ((char *)v19 - (unsigned char *)*v17) >> 3;
      if ((unint64_t)(v21 + 1) >> 61) {
        goto LABEL_70;
      }
      uint64_t v22 = v18 - (void)*v17;
      uint64_t v23 = v22 >> 2;
      if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
        uint64_t v23 = v21 + 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v24);
      }
      else {
        uint64_t v25 = 0;
      }
      __int16 v26 = (void *)(v24 + 8 * v21);
      unint64_t v27 = v24 + 8 * v25;
      *__int16 v26 = a2;
      uint64_t v20 = v26 + 1;
      uint64_t v29 = (char *)*v17;
      __int16 v28 = (char *)v17[1];
      if (v28 != *v17)
      {
        do
        {
          uint64_t v30 = *((void *)v28 - 1);
          v28 -= 8;
          *--__int16 v26 = v30;
        }
        while (v28 != v29);
        __int16 v28 = (char *)*v17;
      }
      _OWORD *v17 = v26;
      v17[1] = v20;
      v17[2] = (void *)v27;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      void *v19 = a2;
      uint64_t v20 = v19 + 1;
    }
    v17[1] = v20;
    uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 24);
    if (v31) {
      BOOL v32 = a2[3] == v31;
    }
    else {
      BOOL v32 = 0;
    }
    if (v32) {
      goto LABEL_68;
    }
    __int16 v33 = *(uint64_t **)(a1 + 16);
    uint64_t v34 = *v33;
    if (!*v33) {
      goto LABEL_68;
    }
    uint64_t v35 = *(char ***)(a1 + 40);
    char v36 = *v35;
    uint64_t v37 = v35[1];
    if (*v35 == v37)
    {
LABEL_49:
      __int16 v38 = v35[1];
    }
    else
    {
      __int16 v38 = *v35;
      while (*(void *)v38 != v34)
      {
        v38 += 8;
        if (v38 == v37) {
          goto LABEL_49;
        }
      }
    }
    if (v37 != v38) {
      goto LABEL_68;
    }
    unint64_t v39 = (unint64_t)v35[2];
    if ((unint64_t)v37 < v39)
    {
      *(void *)uint64_t v37 = v34;
      __int16 v40 = v37 + 8;
LABEL_67:
      v35[1] = v40;
LABEL_68:
      **(void **)(a1 + 16) = 0;
      return 0;
    }
    uint64_t v41 = (v37 - v36) >> 3;
    if (!((unint64_t)(v41 + 1) >> 61))
    {
      uint64_t v42 = v39 - (void)v36;
      uint64_t v43 = v42 >> 2;
      if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
        uint64_t v43 = v41 + 1;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v44)
      {
        unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v44);
        uint64_t v34 = *v33;
      }
      else
      {
        uint64_t v45 = 0;
      }
      __int16 v46 = (char *)(v44 + 8 * v41);
      unint64_t v47 = v44 + 8 * v45;
      *(void *)__int16 v46 = v34;
      __int16 v40 = v46 + 8;
      __int16 v49 = *v35;
      uint64_t v48 = v35[1];
      if (v48 != *v35)
      {
        do
        {
          uint64_t v50 = *((void *)v48 - 1);
          v48 -= 8;
          *((void *)v46 - 1) = v50;
          v46 -= 8;
        }
        while (v48 != v49);
        uint64_t v48 = *v35;
      }
      *uint64_t v35 = v46;
      v35[1] = v40;
      v35[2] = (char *)v47;
      if (v48) {
        operator delete(v48);
      }
      goto LABEL_67;
    }
LABEL_70:
    std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
  }
  return 0;
}

__n128 std::__function::__func<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0,std::allocator<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3&,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA30F0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0,std::allocator<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3&,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EEFA30F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0,std::allocator<AUGraphParser::DetermineTappedNodesToPull(AVAudioEngineGraph &,std::vector<AUGraphNodeBaseV3 *> &,BOOL &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3&,AUGraphConnection *)>::~__func()
{
}

void AUGraphParser::UpdateGraphAttributes(AVAudioNodeImplBase **this, AVAudioEngineGraph *a2)
{
  v42[4] = *MEMORY[0x1E4F143B8];
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
  uint64_t v41 = NodeFromMap;
  if (NodeFromMap | AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]))
  {
    this[8] = this[7];
    uint64_t v4 = this[1];
    int v7 = *(void **)v4;
    uint64_t v5 = (void *)((char *)v4 + 8);
    int v6 = v7;
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v6[5];
        *(void *)(v8 + 40) = 0;
        *(_DWORD *)(v8 + 32) &= ~4u;
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
            unsigned int v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            unsigned int v10 = (void *)v6[2];
            BOOL v11 = *v10 == (void)v6;
            int v6 = v10;
          }
          while (!v11);
        }
        int v6 = v10;
      }
      while (v10 != v5);
    }
    if (NodeFromMap)
    {
      double v12 = (char *)operator new(8uLL);
      *(void *)double v12 = NodeFromMap;
      char v13 = v12 + 8;
    }
    else
    {
      double v12 = 0;
      char v13 = 0;
    }
    int v15 = this[11];
    uint64_t v14 = this[12];
    if (v15 == v14 || (uint64_t v16 = v14 - v15, v16 < 1))
    {
      uint64_t v23 = v12;
    }
    else
    {
      uint64_t v17 = v16 >> 3;
      uint64_t v18 = v13 - v12;
      uint64_t v19 = (v13 - v12) >> 3;
      unint64_t v20 = v19 + (v16 >> 3);
      if (v20 >> 61) {
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      }
      if (v18 >> 2 > v20) {
        unint64_t v20 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v21);
      }
      uint64_t v22 = &v12[v18 & 0xFFFFFFFFFFFFFFF8];
      uint64_t v23 = (char *)(v21 + 8 * v19);
      unint64_t v24 = &v23[8 * v17];
      uint64_t v25 = 8 * v17;
      __int16 v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v15;
        int v15 = (AVAudioNodeImplBase *)((char *)v15 + 8);
        *(void *)__int16 v26 = v27;
        v26 += 8;
        v25 -= 8;
      }
      while (v25);
      if (v13 != v12)
      {
        uint64_t v28 = 8 * v19;
        do
        {
          *(void *)(v21 + v28 - 8) = *(void *)&v12[v28 - 8];
          v28 -= 8;
        }
        while (v28);
        uint64_t v23 = (char *)v21;
      }
      size_t v29 = v13 - v22;
      if (v29) {
        memmove(v24, v22, v29);
      }
      char v13 = &v24[v29];
      if (v12) {
        operator delete(v12);
      }
    }
    if (v23 != v13)
    {
      uint64_t v30 = (uint64_t *)v23;
      do
      {
        uint64_t v31 = *v30;
        uint64_t v40 = v31;
        *(void *)(v31 + 40) = 0;
        BOOL v32 = operator new(0x20uLL);
        *BOOL v32 = &unk_1EEFA3060;
        v32[1] = &v40;
        v32[2] = &v41;
        v32[3] = this;
        v42[3] = v32;
        AUGraphParser::TraverseGraphNodes(1, 1, v31, 0, (uint64_t)v42);
        std::__function::__value_func<ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__value_func[abi:ne180100](v42);
        ++v30;
      }
      while (v30 != (uint64_t *)v13);
    }
    __int16 v33 = this[1];
    char v36 = *(void **)v33;
    uint64_t v34 = (void *)((char *)v33 + 8);
    uint64_t v35 = v36;
    if (v36 != v34)
    {
      do
      {
        uint64_t v37 = v35[5];
        (*(void (**)(void, double))(**(void **)(v37 + 24) + 392))(*(void *)(v37 + 24), *(double *)(v37 + 40));
        *(_DWORD *)(v37 + 32) &= ~4u;
        __int16 v38 = (void *)v35[1];
        if (v38)
        {
          do
          {
            unint64_t v39 = v38;
            __int16 v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            unint64_t v39 = (void *)v35[2];
            BOOL v11 = *v39 == (void)v35;
            uint64_t v35 = v39;
          }
          while (!v11);
        }
        uint64_t v35 = v39;
      }
      while (v39 != v34);
    }
    if (v23) {
      operator delete(v23);
    }
  }
}

void sub_19D7DB804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t std::__function::__func<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0,std::allocator<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a2 + 32);
  if (*(void *)a3)
  {
    uint64_t v6 = *(void *)(*(void *)a3 + 16);
    if (v6)
    {
      double v7 = (*(double (**)(void))(**(void **)(v6 + 24) + 384))(*(void *)(v6 + 24))
         + *(double *)(v6 + 40);
      if ((v5 & 4) != 0)
      {
        if (*(double *)(a2 + 40) >= v7) {
          double v7 = *(double *)(a2 + 40);
        }
      }
      else
      {
        double v7 = fmax(v7, 0.0);
      }
      *(double *)(a2 + 40) = v7;
    }
  }
  if (**(void **)(a1 + 8) == **(void **)(a1 + 16))
  {
    int v8 = v5 & 4;
    if (AVAudioEngineGraph::IsValidSourceNode(*(void *)(a1 + 24), a2) && v8 == 0)
    {
      unsigned int v10 = *(void **)(a2 + 48);
      BOOL v11 = *(void **)(a2 + 56);
      if (v10 != v11)
      {
        int v12 = 0;
        do
        {
          if (*v10++) {
            ++v12;
          }
        }
        while (v10 != v11);
        if (v12)
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          uint64_t v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            BOOL v32 = "AVAEInternal.h";
            __int16 v33 = 1024;
            int v34 = 71;
            __int16 v35 = 2080;
            char v36 = "AVAudioEngineGraph.mm";
            __int16 v37 = 1024;
            int v38 = 1067;
            __int16 v39 = 2080;
            uint64_t v40 = "operator()";
            __int16 v41 = 2080;
            uint64_t v42 = "0 == inCurrNode.NumberOfValidConnections(kUpstream)";
            _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "0 == inCurrNode.NumberOfValidConnections(kUpstream)");
        }
      }
      int v15 = *(void **)(a1 + 24);
      uint64_t v17 = (uint64_t *)v15[8];
      unint64_t v16 = v15[9];
      if ((unint64_t)v17 >= v16)
      {
        uint64_t v19 = v15[7];
        uint64_t v20 = ((uint64_t)v17 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v16 - v19;
        uint64_t v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
          uint64_t v22 = v20 + 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23) {
          unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v23);
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = (uint64_t *)(v23 + 8 * v20);
        unint64_t v26 = v23 + 8 * v24;
        *uint64_t v25 = a2;
        uint64_t v18 = v25 + 1;
        uint64_t v28 = (char *)v15[7];
        uint64_t v27 = (char *)v15[8];
        if (v27 != v28)
        {
          do
          {
            uint64_t v29 = *((void *)v27 - 1);
            v27 -= 8;
            *--uint64_t v25 = v29;
          }
          while (v27 != v28);
          uint64_t v27 = (char *)v15[7];
        }
        v15[7] = v25;
        v15[8] = v18;
        v15[9] = v26;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        uint64_t *v17 = a2;
        uint64_t v18 = v17 + 1;
      }
      v15[8] = v18;
    }
  }
  *(_DWORD *)(a2 + 32) |= 4u;
  return 0;
}

__n128 std::__function::__func<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0,std::allocator<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3060;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0,std::allocator<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3060;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0,std::allocator<AUGraphParser::UpdateGraphAttributes(AVAudioEngineGraph &)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

void AVAEGraphStateTracker::CancelTimers(AVAEGraphStateTracker *this)
{
  uint64_t v2 = (AVAEDispatchQueueTimer *)*((void *)this + 2);
  if (v2) {
    AVAEDispatchQueueTimer::CancelTimer(v2);
  }
  long long v3 = (AVAEDispatchQueueTimer *)*((void *)this + 3);
  if (v3)
  {
    AVAEDispatchQueueTimer::CancelTimer(v3);
  }
}

AVAEDispatchQueueTimer **std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100](AVAEDispatchQueueTimer **result, AVAEDispatchQueueTimer *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    AVAEDispatchQueueTimer::CancelTimer(v2);
    std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)v2 + 3);
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

void AVAEDispatchQueueTimer::CancelTimer(AVAEDispatchQueueTimer *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    if (*((unsigned char *)this + 56))
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      v5[2] = ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke;
      v5[3] = &__block_descriptor_40_e14_v16__0___v___8l;
      v5[4] = this;
      long long v3 = dispatch_semaphore_create(0);
      dispatch_retain(v3);
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 0x40000000;
      void v6[2] = __Synchronously_block_invoke;
      v6[3] = &__block_descriptor_tmp_1187;
      v6[4] = v3;
      ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke((uint64_t)v5, (uint64_t)v6);
      dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v3);
    }
    else
    {
      dispatch_source_cancel(v2);
    }
    if (*((unsigned char *)this + 16) && *((unsigned char *)this + 56))
    {
      *((unsigned char *)this + 16) = 0;
      uint64_t v4 = *((void *)this + 6);
      if (v4) {
        std::function<void ()(BOOL)>::operator()(v4, 0);
      }
    }
    dispatch_release(*((dispatch_object_t *)this + 1));
    *((void *)this + 1) = 0;
    *((unsigned char *)this + 16) = 0;
  }
}

void *std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(NSObject **)(v2 + 8);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke_2;
  handler[3] = &unk_1E5965A18;
  handler[4] = a2;
  dispatch_source_set_cancel_handler(v3, handler);
  dispatch_source_cancel(*(dispatch_source_t *)(v2 + 8));
}

uint64_t std::function<void ()(BOOL)>::operator()(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t ___ZN22AVAEDispatchQueueTimer11CancelTimerEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t AVAEGraphStateTracker::GraphHasActiveSource(AVAEGraphStateTracker *this)
{
  if (*((void *)this + 11) != *((void *)this + 12)) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 7);
  uint64_t v3 = *((void *)this + 8);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v4 = v2 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 - 8) + 24) + 432))(*(void *)(*(void *)(v4 - 8) + 24));
    if (result) {
      break;
    }
    BOOL v5 = v4 == v3;
    v4 += 8;
  }
  while (!v5);
  return result;
}

void AVAEDispatchQueueTimer::StartTimer(uint64_t a1, char a2, void *a3, double a4, double a5)
{
  v21[3] = *MEMORY[0x1E4F143B8];
  AVAEDispatchQueueTimer::CancelTimer((AVAEDispatchQueueTimer *)a1);
  *(unsigned char *)(a1 + 16) = 1;
  unsigned int v10 = (void *)a3[3];
  if (v10)
  {
    if (v10 == a3)
    {
      uint64_t v20 = v19;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v19);
    }
    else
    {
      uint64_t v20 = (void *)(*(uint64_t (**)(void *))(*v10 + 16))(v10);
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v11 = a1 + 24;
  if ((void *)(a1 + 24) != v19)
  {
    int v12 = v20;
    uint64_t v13 = *(void *)(a1 + 48);
    if (v20 == v19)
    {
      if (v13 == v11)
      {
        (*(void (**)(void *, void *))(v19[0] + 24))(v19, v21);
        (*(void (**)(void *))(*v20 + 32))(v20);
        uint64_t v20 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v19);
        (*(void (**)(void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48));
        *(void *)(a1 + 48) = 0;
        uint64_t v20 = v19;
        (*(void (**)(void *, uint64_t))(v21[0] + 24))(v21, a1 + 24);
        (*(void (**)(void *))(v21[0] + 32))(v21);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v19[0] + 24))(v19, a1 + 24);
        (*(void (**)(void *))(*v20 + 32))(v20);
        uint64_t v20 = *(void **)(a1 + 48);
      }
      *(void *)(a1 + 48) = v11;
    }
    else if (v13 == v11)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 24))(a1 + 24, v19);
      (*(void (**)(void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48));
      *(void *)(a1 + 48) = v20;
      uint64_t v20 = v19;
    }
    else
    {
      uint64_t v20 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v12;
    }
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v19);
  *(unsigned char *)(a1 + 56) = a2;
  uint64_t v14 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)a1);
  *(void *)(a1 + 8) = v14;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = ___ZN22AVAEDispatchQueueTimer10StartTimerEddbNSt3__18functionIFvbEEE_block_invoke;
  handler[3] = &__block_descriptor_40_e5_v8__0l;
  handler[4] = a1;
  dispatch_source_set_event_handler(v14, handler);
  dispatch_activate(*(dispatch_object_t *)(a1 + 8));
  if (a5 <= 0.0) {
    uint64_t v15 = -1;
  }
  else {
    uint64_t v15 = (unint64_t)(a5 * 1000000000.0);
  }
  unint64_t v16 = *(NSObject **)(a1 + 8);
  dispatch_time_t v17 = dispatch_time(0, (uint64_t)(a4 * 1000000000.0));
  dispatch_source_set_timer(v16, v17, v15, 0x1312D00uLL);
}

void sub_19D7DC394(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_1,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_1>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(AVAEGraphStateTracker ***)(a1 + 8);
  uint64_t v2 = (std::recursive_mutex *)(*(void *)*v1 + 112);
  if (std::recursive_mutex::try_lock(v2))
  {
    uint64_t v3 = *v1;
    if (*((unsigned char *)*v1 + 208)
      && *((unsigned char *)v3 + 184)
      && !*((unsigned char *)v3 + 187)
      && (AVAEGraphStateTracker::GraphHasActiveSource(v3) & 1) == 0)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
      {
        int v5 = 136315650;
        uint64_t v6 = "AVAudioEngineGraph.mm";
        __int16 v7 = 1024;
        int v8 = 1245;
        __int16 v9 = 2048;
        uint64_t v10 = 0x404E000000000000;
        _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAudioEngine (auto shutdown mode): left running idle for %.f s, stopping!", (uint8_t *)&v5, 0x1Cu);
      }
      AVAudioEngineGraph::Stop((AVAudioNodeImplBase **)*v1, 0);
    }
    AVAEDispatchQueueTimer::CancelTimer(v1[3]);
    std::recursive_mutex::unlock(v2);
  }
}

void sub_19D7DC4F4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::Stop(AVAudioNodeImplBase **this, NSError **a2)
{
  uint64_t v4 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v4);
  if (*((unsigned char *)this + 184)) {
    uint64_t v5 = AVAudioEngineGraph::_Stop(this, a2);
  }
  else {
    uint64_t v5 = 0;
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_19D7DC570(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::_Stop(AVAudioNodeImplBase **this, NSError **a2)
{
  uint64_t v4 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v4);
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
  uint64_t v6 = 3;
  if (!NodeFromMap) {
    uint64_t v6 = 2;
  }
  uint64_t v7 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[v6]);
  uint64_t v8 = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1584, "_Stop", "ioNode != NULL", v7 != 0, 4294967246, a2);
  *((unsigned char *)this + 232) = *((unsigned char *)this + 187) ^ 1;
  if (v7)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 128))(v7)) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 232))(v7);
    }
    else {
      uint64_t v9 = 4294967246;
    }
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1592, "_Stop", "(err = PerformCommand(*ioNode, kAUStopIO, NULL, 0))", v9, a2);
  }
  else
  {
    uint64_t v9 = v8;
  }
  uint64_t v10 = this[1];
  uint64_t v13 = *(void **)v10;
  uint64_t v11 = (void *)((char *)v10 + 8);
  int v12 = v13;
  if (v13 != v11)
  {
    do
    {
      uint64_t v14 = (void *)v12[5];
      if (*(unsigned char *)(v14[3] + 48)) {
        (*(void (**)(void *))(*v14 + 216))(v14);
      }
      uint64_t v15 = (void *)v12[1];
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v16 = (void *)v12[2];
          BOOL v17 = *v16 == (void)v12;
          int v12 = v16;
        }
        while (!v17);
      }
      int v12 = v16;
    }
    while (v16 != v11);
  }
  *((unsigned char *)this + 184) = 0;
  AVAudioEngineGraph::MonitorState((AVAudioEngineGraph *)this);
  std::recursive_mutex::unlock(v4);
  return v9;
}

void sub_19D7DC758(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::MonitorState(AVAudioEngineGraph *this)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (AVAEGraphStateTracker **)((char *)this + 216);
  if (*((unsigned char *)this + 187))
  {
    uint64_t v2 = (uint64_t *)((char *)this + 216);
    std::unique_ptr<AVAEGraphStateTracker>::reset[abi:ne180100](v2, 0);
  }
  else
  {
    uint64_t v3 = *v1;
    if (!*v1) {
      operator new();
    }
    uint64_t v4 = *(AVAEGraphStateTracker **)v3;
    if (!*(unsigned char *)(*(void *)v3 + 184)
      || *((unsigned char *)v4 + 187)
      || AVAEGraphStateTracker::GraphHasActiveSource(v4))
    {
      AVAEGraphStateTracker::CancelTimers(v3);
    }
    else
    {
      uint64_t v5 = *((void *)v3 + 2);
      if (!v5) {
        operator new();
      }
      if (!*(void *)(v5 + 8))
      {
        double v6 = 120.0;
        if (*(unsigned char *)(*(void *)v3 + 208)) {
          double v6 = 30.0;
        }
        v9[0] = &unk_1EEFA35B8;
        v9[1] = v3;
        v9[3] = v9;
        AVAEDispatchQueueTimer::StartTimer(v5, 0, v9, v6, v6);
        std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v9);
      }
      if (*(unsigned char *)(*(void *)v3 + 208))
      {
        uint64_t v7 = *((void *)v3 + 3);
        if (!v7) {
          operator new();
        }
        if (!*(void *)(v7 + 8))
        {
          v8[0] = &unk_1EEFA3600;
          v8[1] = v3;
          v8[3] = v8;
          AVAEDispatchQueueTimer::StartTimer(v7, 0, v8, 60.0, 0.05);
          std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v8);
        }
      }
    }
  }
}

void sub_19D7DCA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AVAEGraphStateTracker>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    AVAEGraphStateTracker::CancelTimers((AVAEGraphStateTracker *)v2);
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((AVAEDispatchQueueTimer **)(v2 + 16), 0);
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((AVAEDispatchQueueTimer **)(v2 + 24), 0);
    dispatch_sync(*(dispatch_queue_t *)(v2 + 8), &__block_literal_global_1724);
    dispatch_release(*(dispatch_object_t *)(v2 + 8));
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((AVAEDispatchQueueTimer **)(v2 + 24), 0);
    std::unique_ptr<AVAEDispatchQueueTimer>::reset[abi:ne180100]((AVAEDispatchQueueTimer **)(v2 + 16), 0);
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

uint64_t std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_1,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_1>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA3600;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_1,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_1>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA3600;
  result[1] = v3;
  return result;
}

void std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_1,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_1>,void ()(BOOL)>::~__func()
{
}

uint64_t ___ZN22AVAEDispatchQueueTimer10StartTimerEddbNSt3__18functionIFvbEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 16) = 0;
  uint64_t result = *(void *)(v1 + 48);
  if (result) {
    return std::function<void ()(BOOL)>::operator()(result, 1);
  }
  return result;
}

void std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_0,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_0>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  if (AVAudioEngineLogCategory(void)::once != -1) {
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
  }
  uint64_t v2 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = 0x403E000000000000;
    if (!*(unsigned char *)(*(void *)v1 + 208)) {
      uint64_t v3 = 0x405E000000000000;
    }
    int v4 = 136315650;
    uint64_t v5 = "AVAudioEngineGraph.mm";
    __int16 v6 = 1024;
    int v7 = 1232;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAudioEngine: left running idle for %.f s", (uint8_t *)&v4, 0x1Cu);
  }
}

uint64_t std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_0,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_0>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA35B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_0,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA35B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AVAEGraphStateTracker::StartTimers(void)::$_0,std::allocator<AVAEGraphStateTracker::StartTimers(void)::$_0>,void ()(BOOL)>::~__func()
{
}

uint64_t AVAudioEngineGraph::Initialize(AVAudioEngineGraph *this, NSError **a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v4 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v4);
  if (*((unsigned char *)this + 185))
  {
    uint64_t active = 0;
    goto LABEL_108;
  }
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 2));
  uint64_t v7 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
  __int16 v8 = (_DWORD *)v7;
  char v64 = 0;
  if (*((unsigned char *)this + 187))
  {
    if (!v7)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      uint64_t v10 = "outputNode != nullptr";
      if (!os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      *(_DWORD *)int buf = 136316418;
      int v66 = "AVAEInternal.h";
      __int16 v67 = 1024;
      int v68 = 71;
      __int16 v69 = 2080;
      uint64_t v70 = "AVAudioEngineGraph.mm";
      __int16 v71 = 1024;
      int v11 = 1320;
LABEL_16:
      int v72 = v11;
      __int16 v73 = 2080;
      int v74 = "Initialize";
      __int16 v75 = 2080;
      int64_t v76 = v10;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
LABEL_17:
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", v10);
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  if (!(NodeFromMap | v7))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    uint64_t v10 = "inputNode != nullptr || outputNode != nullptr";
    if (!os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)int buf = 136316418;
    int v66 = "AVAEInternal.h";
    __int16 v67 = 1024;
    int v68 = 71;
    __int16 v69 = 2080;
    uint64_t v70 = "AVAudioEngineGraph.mm";
    __int16 v71 = 1024;
    int v11 = 1322;
    goto LABEL_16;
  }
  if (v7)
  {
LABEL_11:
    char v12 = 0;
    goto LABEL_19;
  }
LABEL_18:
  char v12 = 1;
  uint64_t v7 = NodeFromMap;
LABEL_19:
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 240))(v7);
  if ((v12 & 1) == 0
    && (!(*(unsigned int (**)(_DWORD *))(*(void *)v8 + 152))(v8)
     || (*(unsigned int (**)(_DWORD *))(*(void *)v8 + 128))(v8)))
  {
    v8[9] = v13;
  }
  if (NodeFromMap
    && (!(*(unsigned int (**)(uint64_t))(*(void *)NodeFromMap + 152))(NodeFromMap)
     || (*(unsigned int (**)(uint64_t))(*(void *)NodeFromMap + 128))(NodeFromMap)))
  {
    *(_DWORD *)(NodeFromMap + 36) = v13;
  }
  if (v12) {
    goto LABEL_28;
  }
  (*(void (**)(_DWORD *, void, void))(*(void *)v8 + 200))(v8, *((unsigned __int8 *)this + 187), *((void *)this + 24));
  uint64_t active = AVAudioEngineGraph::PerformCommand((uint64_t)this, v8, 3, 0, 0);
  if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1348, "Initialize", "err = PerformCommand(*outputNode, kAUInitialize, NULL, 0)", active, a2))goto LABEL_106; {
  int v33 = (*(uint64_t (**)(_DWORD *))(*(void *)v8 + 240))(v8);
  }
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)v8 + 152))(v8)
    || (*(unsigned int (**)(_DWORD *))(*(void *)v8 + 128))(v8))
  {
    v8[9] = v33;
  }
  if (NodeFromMap
    && (!(*(unsigned int (**)(uint64_t))(*(void *)NodeFromMap + 152))(NodeFromMap)
     || (*(unsigned int (**)(uint64_t))(*(void *)NodeFromMap + 128))(NodeFromMap)))
  {
    *(_DWORD *)(NodeFromMap + 36) = v33;
  }
  uint64_t v34 = (*(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)v8 + 24))(v8, 1, 0);
  uint64_t v35 = v34;
  if (!v34
    || !(*(unsigned int (**)(uint64_t))(*(void *)v34 + 120))(v34)
    || *((unsigned char *)this + 186)
    && (char v36 = (void *)(*(uint64_t (**)(void, void))(**((void **)v8 + 3) + 72))(*((void *)v8 + 3), 0), (v37 = v36) != 0)&& ([v36 sampleRate], v38 > 0.0)&& objc_msgSend(v37, "channelCount"))
  {
LABEL_28:
    uint64_t active = 0;
  }
  else
  {
    __int16 v39 = (void *)(*(uint64_t (**)(void, void))(**((void **)v8 + 3) + 48))(*((void *)v8 + 3), 0);
    uint64_t v40 = v39;
    char v42 = v39 && ([v39 sampleRate], v41 > 0.0) && objc_msgSend(v40, "channelCount") != 0;
    uint64_t active = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1361, "Initialize", "IsFormatSampleRateAndChannelCountValid(outputHWFormat)", v42, 4294956421, a2);
    if (active) {
      goto LABEL_107;
    }
    int v60 = [AVAudioFormat alloc];
    [v40 sampleRate];
    __int16 v61 = -[AVAudioFormat initStandardFormatWithSampleRate:channels:](v60, "initStandardFormatWithSampleRate:channels:", 2);
    uint64_t active = AVAudioEngineGraph::_Connect((AVAudioNodeImplBase **)this, *(AVAudioNodeImplBase **)(v35 + 24), *((AVAudioNodeImplBase **)v8 + 3), 0, 0, v61);
    BOOL v62 = _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1369, "Initialize", "err = _Connect(connNode->NodeImpl(), outputNode->NodeImpl(), 0, 0, format)", active, a2);

    if (!v62) {
      goto LABEL_106;
    }
    *((unsigned char *)this + 186) = 0;
  }
  std::__list_imp<AUGraphConnection>::clear((void *)this + 17);
  std::__list_imp<AUGraphConnection>::clear((void *)this + 20);
  uint64_t v14 = (void *)*((void *)this + 1);
  BOOL v17 = (void *)*v14;
  uint64_t v15 = v14 + 1;
  unint64_t v16 = v17;
  if (v17 != v15)
  {
    do
    {
      uint64_t v18 = (_DWORD *)v16[5];
      v18[8] = 0;
      (*(void (**)(_DWORD *, void, void))(*(void *)v18 + 200))(v18, *((unsigned __int8 *)this + 187), *((void *)this + 24));
      uint64_t v19 = (void *)v16[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v16[2];
          BOOL v21 = *v20 == (void)v16;
          unint64_t v16 = v20;
        }
        while (!v21);
      }
      unint64_t v16 = v20;
    }
    while (v20 != v15);
  }
  uint64_t v22 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
  if (v22)
  {
    uint64_t active = AUGraphParser::InitializeActiveNodesInOutputChain(this, v22, &v64);
    if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1393, "Initialize", "err = AUGraphParser::InitializeActiveNodesInOutputChain(ThisGraph, kOutputChainOptimizedTraversal, *GetOutputNode(), isOutputChainActive)", active, a2))goto LABEL_106; {
    if (!*(unsigned char *)(*(void *)(AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3)) + 24)
    }
                   + 48))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      unint64_t v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        int v66 = "AVAEInternal.h";
        __int16 v67 = 1024;
        int v68 = 71;
        __int16 v69 = 2080;
        uint64_t v70 = "AVAudioEngineGraph.mm";
        __int16 v71 = 1024;
        int v72 = 1396;
        __int16 v73 = 2080;
        int v74 = "Initialize";
        __int16 v75 = 2080;
        int64_t v76 = "GetOutputNode()->IsInitialized()";
        _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "GetOutputNode()->IsInitialized()");
    }
  }
  uint64_t v24 = (AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 2));
  if (!v24) {
    goto LABEL_52;
  }
  uint64_t active = AUGraphParser::InitializeActiveNodesInInputChain((AVAudioNodeImplBase **)this, v24, v25);
  if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1401, "Initialize", "err = AUGraphParser::InitializeActiveNodesInInputChain(ThisGraph, *GetInputNode())", active, a2))
  {
    if (!*(unsigned char *)(*(void *)(AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 2)) + 24)
                   + 48))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      unint64_t v26 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        int v66 = "AVAEInternal.h";
        __int16 v67 = 1024;
        int v68 = 71;
        __int16 v69 = 2080;
        uint64_t v70 = "AVAudioEngineGraph.mm";
        __int16 v71 = 1024;
        int v72 = 1405;
        __int16 v73 = 2080;
        int v74 = "Initialize";
        __int16 v75 = 2080;
        int64_t v76 = "GetInputNode()->IsInitialized()";
        _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "GetInputNode()->IsInitialized()");
    }
LABEL_52:
    uint64_t v27 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
    if (v27 && (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v27 + 24))(v27, 1, 0))
    {
      uint64_t v28 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
      uint64_t v29 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v28 + 24) + 48))(*(void *)(v28 + 24), 0);
      uint64_t v30 = v29;
      char v32 = v29 && ([v29 sampleRate], v31 > 0.0) && objc_msgSend(v30, "channelCount") != 0;
      uint64_t active = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1412, "Initialize", "IsFormatSampleRateAndChannelCountValid(outputHWFormat)", v32, 4294956421, a2);
      if (active) {
        goto LABEL_107;
      }
    }
    uint64_t v43 = (AVAudioNodeImplBase *)*((void *)this + 2);
    if (AVAudioEngineGraph::GetNodeFromMap(this, v43))
    {
      if (*((void *)this + 11) != *((void *)this + 12))
      {
LABEL_80:
        uint64_t v45 = AVAudioEngineGraph::GetNodeFromMap(this, v43);
        __int16 v46 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v45 + 24) + 72))(*(void *)(v45 + 24), 0);
        unint64_t v47 = v46;
        char v49 = v46
           && ([v46 sampleRate], v48 > 0.0)
           && [v47 channelCount] != 0;
        uint64_t active = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1419, "Initialize", "IsFormatSampleRateAndChannelCountValid(inputHWFormat)", v49, 4294956421, a2);
        if (active) {
          goto LABEL_107;
        }
        goto LABEL_85;
      }
      uint64_t v44 = AVAudioEngineGraph::GetNodeFromMap(this, v43);
      if ((*(uint64_t (**)(uint64_t, void, void))(*(void *)v44 + 24))(v44, 0, 0))
      {
        uint64_t v43 = (AVAudioNodeImplBase *)*((void *)this + 2);
        goto LABEL_80;
      }
    }
LABEL_85:
    uint64_t v50 = (void *)*((void *)this + 1);
    uint64_t v53 = (void *)*v50;
    __int16 v51 = v50 + 1;
    size_t v52 = v53;
    if (v53 != v51)
    {
      do
      {
        uint64_t v54 = v52[5];
        if (((*(uint64_t (**)(uint64_t))(*(void *)v54 + 128))(v54) & 1) == 0
          && (*(unsigned char *)(v54 + 32) & 3) == 0)
        {
          uint64_t v55 = AVAudioEngineGraph::PerformCommand((uint64_t)this, (void *)v54, 4, 0, 0);
          if (v55)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            uint64_t v56 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136316674;
              int v66 = "AVAEInternal.h";
              __int16 v67 = 1024;
              int v68 = 104;
              __int16 v69 = 2080;
              uint64_t v70 = "AVAudioEngineGraph.mm";
              __int16 v71 = 1024;
              int v72 = 1430;
              __int16 v73 = 2080;
              int v74 = "Initialize";
              __int16 v75 = 2080;
              int64_t v76 = "PerformCommand(*graphNode, kAUUninitialize, NULL, 0)";
              __int16 v77 = 1024;
              int v78 = v55;
              _os_log_impl(&dword_19D794000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v55);
          }
        }
        uint64_t v57 = (void *)v52[1];
        if (v57)
        {
          do
          {
            int v58 = v57;
            uint64_t v57 = (void *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            int v58 = (void *)v52[2];
            BOOL v21 = *v58 == (void)v52;
            size_t v52 = v58;
          }
          while (!v21);
        }
        size_t v52 = v58;
      }
      while (v58 != v51);
    }
    AVAudioEngineGraph::RemoveInactiveInternalNodes((AVAudioNode *)this);
    AUGraphParser::UpdateGraphAttributes((AVAudioNodeImplBase **)this, v59);
    if (!active)
    {
      *((unsigned char *)this + 185) = 1;
      goto LABEL_108;
    }
LABEL_107:
    AVAudioEngineGraph::_Uninitialize((AVAudioNodeImplBase **)this, a2);
    goto LABEL_108;
  }
LABEL_106:
  if (active || !*((unsigned char *)this + 185)) {
    goto LABEL_107;
  }
LABEL_108:
  std::recursive_mutex::unlock(v4);
  return active;
}

void sub_19D7DDAD0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::_Connect(AVAudioNodeImplBase **this, AVAudioNodeImplBase *a2, AVAudioNodeImplBase *a3, uint64_t a4, uint64_t a5, AVAudioFormat *a6)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    [(AVAudioFormat *)a6 sampleRate];
    if (v12 <= 0.0 || ![(AVAudioFormat *)a6 channelCount])
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      int v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        int buf = 136316418;
        char v107 = "AVAEInternal.h";
        __int16 v108 = 1024;
        int v109 = 71;
        __int16 v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        __int16 v112 = 1024;
        int v113 = 2161;
        __int16 v114 = 2080;
        v115 = "_Connect";
        __int16 v116 = 2080;
        v117 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsFormatSampleRateAndChannelCountValid(format)");
    }
  }
  uint64_t v14 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v14);
  v86 = v14;
  if (!AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)this, a2)
    || !AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)this, a3))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int buf = 136316418;
      char v107 = "AVAEInternal.h";
      __int16 v108 = 1024;
      int v109 = 71;
      __int16 v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      __int16 v112 = 1024;
      int v113 = 2171;
      __int16 v114 = 2080;
      v115 = "_Connect";
      __int16 v116 = 2080;
      v117 = "IsNodeInGraph(inSrcImpl) && IsNodeInGraph(inDestImpl)";
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inSrcImpl) && IsNodeInGraph(inDestImpl)");
  }
  __int16 v85 = a6;
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, a2);
  BOOL v17 = (AVAudioNodeImplBase **)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, a3);
  uint64_t v105 = v17;
  uint64_t v103 = 0;
  unsigned int v104 = -1;
  uint64_t v99 = NodeFromMap;
  int v100 = a4;
  int v101 = v17;
  int v102 = a5;
  if (!(*(unsigned int (**)(AVAudioNodeImplBase *))(*(void *)a2 + 104))(a2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v18 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int buf = 136316418;
      char v107 = "AVAEInternal.h";
      __int16 v108 = 1024;
      int v109 = 71;
      __int16 v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      __int16 v112 = 1024;
      int v113 = 2186;
      __int16 v114 = 2080;
      v115 = "_Connect";
      __int16 v116 = 2080;
      v117 = "inSrcImpl->NumberOutputs() > 0";
      _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inSrcImpl->NumberOutputs() > 0");
  }
  if (!(*(unsigned int (**)(AVAudioNodeImplBase *))(*(void *)a3 + 96))(a3)
    && ((*((uint64_t (**)(AVAudioNodeImplBase **))*v17 + 12))(v17) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v19 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int buf = 136316418;
      char v107 = "AVAEInternal.h";
      __int16 v108 = 1024;
      int v109 = 71;
      __int16 v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      __int16 v112 = 1024;
      int v113 = 2188;
      __int16 v114 = 2080;
      v115 = "_Connect";
      __int16 v116 = 2080;
      v117 = "inDestImpl->NumberInputs() > 0 || graphNodeDest->CanResizeNumberOfInputs()";
      _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inDestImpl->NumberInputs() > 0 || graphNodeDest->CanResizeNumberOfInputs()");
  }
  if (!*((unsigned char *)this + 186))
  {
    if (v17)
    {
      uint64_t v20 = this[3];
      if (v20)
      {
        if (v17[3] == v20)
        {
          int v21 = (*(uint64_t (**)(uint64_t))(*(void *)NodeFromMap + 120))(NodeFromMap) ^ 1;
          if (!a6) {
            LOBYTE(v21) = 1;
          }
          if ((v21 & 1) == 0) {
            *((unsigned char *)this + 186) = 1;
          }
        }
      }
    }
  }
  if ((AVAudioNodeImplBase **)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)NodeFromMap + 24))(NodeFromMap, 0, a4) == v17&& (*((uint64_t (**)(AVAudioNodeImplBase **, uint64_t, uint64_t))*v17 + 3))(v17, 1, a5) == NodeFromMap&& (!a6|| [(AVAudioFormat *)a6 isEqual:(*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)a2 + 48))(a2, a4)]))
  {
    uint64_t updated = 0;
    goto LABEL_200;
  }
  v82 = a3;
  std::string __p = 0;
  v97 = 0;
  unint64_t v98 = 0;
  int v24 = *(unsigned __int8 *)(*(void *)(NodeFromMap + 24) + 48);
  int v25 = *((unsigned __int8 *)v17[3] + 48);
  uint64_t v93 = (uint64_t)&v93;
  v94 = &v93;
  uint64_t v95 = 0;
  uint64_t v90 = (uint64_t)&v90;
  uint64_t v91 = &v90;
  uint64_t v92 = 0;
  int v87 = 2;
  unsigned int v88 = a5;
  int v83 = v24;
  int v84 = v25;
  if (!*((unsigned char *)this + 185) || !(v24 | v25)) {
    goto LABEL_89;
  }
  if (v24)
  {
    if ((*(unsigned char *)(NodeFromMap + 32) & 2) != 0)
    {
      char v89 = 0;
      AUGraphParser::GetNodeConnectionsToMixer(NodeFromMap, &v93, &v89);
      if (v95) {
        BOOL v26 = v89 == 0;
      }
      else {
        BOOL v26 = 0;
      }
      int v27 = v26;
      if (!*((unsigned char *)this + 184))
      {
        if (v27) {
          int v29 = 2;
        }
        else {
          int v29 = 1;
        }
LABEL_57:
        int v87 = v29;
        BOOL IsNodeConnectedToTarget = AUGraphParser::IsNodeConnectedToTarget(0, NodeFromMap, this + 11);
        BOOL v31 = IsNodeConnectedToTarget;
        if (!v84)
        {
          if (!IsNodeConnectedToTarget) {
            goto LABEL_89;
          }
LABEL_88:
          AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
          goto LABEL_89;
        }
        goto LABEL_62;
      }
      if ((v27 & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v28 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          int buf = 136316418;
          char v107 = "AVAEInternal.h";
          __int16 v108 = 1024;
          int v109 = 71;
          __int16 v110 = 2080;
          v111 = "AVAudioEngineGraph.mm";
          __int16 v112 = 1024;
          int v113 = 2236;
          __int16 v114 = 2080;
          v115 = "_Connect";
          __int16 v116 = 2080;
          v117 = "!srcNodeMixerConns.empty() && !isSrcNodeConnectedToIONode";
          _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "!srcNodeMixerConns.empty() && !isSrcNodeConnectedToIONode");
      }
    }
    int v29 = 2;
    goto LABEL_57;
  }
  int v87 = 2;
  if (!v25) {
    goto LABEL_89;
  }
  BOOL v31 = 0;
LABEL_62:
  if (((_BYTE)v17[4] & 2) != 0 && ((*((uint64_t (**)(AVAudioNodeImplBase **))*v17 + 15))(v17) & 1) == 0)
  {
    char v89 = 0;
    AUGraphParser::GetNodeConnectionsToMixer((uint64_t)v17, &v90, &v89);
    if (v92) {
      BOOL v32 = v89 == 0;
    }
    else {
      BOOL v32 = 0;
    }
    int v33 = v32;
    if (*((unsigned char *)this + 184))
    {
      if ((v33 & 1) == 0)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v34 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          int buf = 136316418;
          char v107 = "AVAEInternal.h";
          __int16 v108 = 1024;
          int v109 = 71;
          __int16 v110 = 2080;
          v111 = "AVAudioEngineGraph.mm";
          __int16 v112 = 1024;
          int v113 = 2253;
          __int16 v114 = 2080;
          v115 = "_Connect";
          __int16 v116 = 2080;
          v117 = "!destNodeMixerConns.empty() && !isDestNodeConnectedToIONode";
          _os_log_impl(&dword_19D794000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "!destNodeMixerConns.empty() && !isDestNodeConnectedToIONode");
      }
    }
    else
    {
      BOOL v26 = v33 == 0;
      int v36 = v87;
      if (v26) {
        int v36 = 1;
      }
      int v87 = v36;
    }
  }
  if (AUGraphParser::IsNodeConnectedToTarget(0, (uint64_t)v17, this + 11) || v31) {
    goto LABEL_88;
  }
LABEL_89:
  __int16 v37 = v94;
  if (v94 != &v93)
  {
    while (1)
    {
      AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)v37[4], 0, v22, v23);
      uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(v37[4] + 24), *((unsigned int *)v37 + 10), 0);
      if (Disconnection) {
        break;
      }
      __int16 v37 = (uint64_t *)v37[1];
      if (v37 == &v93) {
        goto LABEL_92;
      }
    }
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    unint64_t v47 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int buf = 136316674;
      char v107 = "AVAEInternal.h";
      __int16 v108 = 1024;
      int v109 = 104;
      __int16 v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      __int16 v112 = 1024;
      int v113 = 2274;
      __int16 v114 = 2080;
      v115 = "_Connect";
      __int16 v116 = 2080;
      v117 = "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
      __int16 v118 = 1024;
      int v119 = Disconnection;
      _os_log_impl(&dword_19D794000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
    }
    goto LABEL_170;
  }
LABEL_92:
  for (uint64_t i = v91; i != &v90; uint64_t i = (uint64_t *)i[1])
  {
    AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)i[4], 0, v22, v23);
    uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(i[4] + 24), *((unsigned int *)i + 10), 0);
    if (Disconnection)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      double v48 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        int buf = 136316674;
        char v107 = "AVAEInternal.h";
        __int16 v108 = 1024;
        int v109 = 104;
        __int16 v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        __int16 v112 = 1024;
        int v113 = 2280;
        __int16 v114 = 2080;
        v115 = "_Connect";
        __int16 v116 = 2080;
        v117 = "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
        __int16 v118 = 1024;
        int v119 = Disconnection;
        _os_log_impl(&dword_19D794000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
      }
      goto LABEL_170;
    }
  }
  uint64_t v42 = AVAudioEngineGraph::PerformCommand((uint64_t)this, (void *)NodeFromMap, 4, 0, 0);
  if (v42)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v43 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int buf = 136316674;
      char v107 = "AVAEInternal.h";
      __int16 v108 = 1024;
      int v109 = 104;
      __int16 v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      __int16 v112 = 1024;
      int v113 = 2286;
      __int16 v114 = 2080;
      v115 = "_Connect";
      __int16 v116 = 2080;
      v117 = "PerformCommand(*graphNodeSrc, kAUUninitialize, NULL, 0)";
      __int16 v118 = 1024;
      int v119 = v42;
      _os_log_impl(&dword_19D794000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v42);
  }
  AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)v17, 0, v40, v41);
  uint64_t v44 = (*((uint64_t (**)(AVAudioNodeImplBase **, uint64_t, void))*v17 + 3))(v17, 1, a5);
  if (v44)
  {
    uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, a3, a5, 0);
    if (Disconnection)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v45 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        int buf = 136316674;
        char v107 = "AVAEInternal.h";
        __int16 v108 = 1024;
        int v109 = 104;
        __int16 v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        __int16 v112 = 1024;
        int v113 = 2297;
        __int16 v114 = 2080;
        v115 = "_Connect";
        __int16 v116 = 2080;
        __int16 v46 = "err = MakeDisconnection(inDestImpl, inDestBus)";
LABEL_169:
        v117 = v46;
        __int16 v118 = 1024;
        int v119 = Disconnection;
        _os_log_impl(&dword_19D794000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
        goto LABEL_170;
      }
      goto LABEL_170;
    }
    char v49 = 0;
    if (*((unsigned char *)this + 185))
    {
      uint64_t v50 = 0;
      __int16 v51 = 0;
      if (v84)
      {
        char v49 = (AVAudioEngineGraph **)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
        uint64_t v50 = (char *)&v49[v52];
        *char v49 = (AVAudioEngineGraph *)v44;
        __int16 v51 = v49 + 1;
        std::string __p = v49;
        v97 = v49 + 1;
        unint64_t v98 = (unint64_t)v50;
      }
    }
    else
    {
      uint64_t v50 = 0;
      __int16 v51 = 0;
    }
  }
  else
  {
    char v49 = 0;
    uint64_t v50 = 0;
    __int16 v51 = 0;
  }
  if (!(*(unsigned int (**)(uint64_t, void, uint64_t, AVAudioEngineGraph **))(*(void *)NodeFromMap + 40))(NodeFromMap, 0, a4, &v103))goto LABEL_133; {
  AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, v103, 0, v53, v54);
  }
  uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *((AVAudioNodeImplBase **)v103 + 3), v104, 0);
  if (Disconnection)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v45 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int buf = 136316674;
      char v107 = "AVAEInternal.h";
      __int16 v108 = 1024;
      int v109 = 104;
      __int16 v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      __int16 v112 = 1024;
      int v113 = 2308;
      __int16 v114 = 2080;
      v115 = "_Connect";
      __int16 v116 = 2080;
      __int16 v46 = "err = MakeDisconnection(graphNodeSrcCurrConnPoint.node->NodeImpl(), graphNodeSrcCurrConnPoint.bus)";
      goto LABEL_169;
    }
LABEL_170:
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", Disconnection);
    int v66 = 0;
    goto LABEL_171;
  }
  if (*((unsigned char *)this + 185))
  {
    uint64_t v55 = v17;
    if (v83)
    {
      if (v51 >= (AVAudioEngineGraph **)v50)
      {
        uint64_t v76 = v51 - v49;
        unint64_t v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 61) {
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        }
        if ((v50 - (char *)v49) >> 2 > v77) {
          unint64_t v77 = (v50 - (char *)v49) >> 2;
        }
        if ((unint64_t)(v50 - (char *)v49) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v77;
        }
        if (v78) {
          unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v78);
        }
        else {
          uint64_t v79 = 0;
        }
        uint64_t v80 = (AVAudioEngineGraph **)(v78 + 8 * v76);
        *uint64_t v80 = v103;
        uint64_t v56 = v80 + 1;
        if (v51 != v49)
        {
          do
          {
            size_t v81 = *--v51;
            *--uint64_t v80 = v81;
          }
          while (v51 != v49);
          char v49 = (AVAudioEngineGraph **)__p;
        }
        std::string __p = v80;
        v97 = v56;
        unint64_t v98 = v78 + 8 * v79;
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *__int16 v51 = v103;
        uint64_t v56 = v51 + 1;
      }
      v97 = v56;
      uint64_t v55 = v105;
    }
  }
  else
  {
LABEL_133:
    uint64_t v55 = v17;
  }
  if ((*((unsigned int (**)(AVAudioNodeImplBase **))*v55 + 12))(v55)
    && (*(unsigned int (**)(AVAudioNodeImplBase *))(*(void *)v55[3] + 96))(v55[3]) <= v88)
  {
    (*(void (**)(AVAudioNodeImplBase *, void))(*(void *)v55[3] + 112))(v55[3], v88 + 1);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)NodeFromMap + 104))(NodeFromMap)
    && (*(unsigned int (**)(void))(**(void **)(NodeFromMap + 24) + 104))(*(void *)(NodeFromMap + 24)) <= a4)
  {
    (*(void (**)(void, void))(**(void **)(NodeFromMap + 24) + 120))(*(void *)(NodeFromMap + 24), (a4 + 1));
  }
  if ((*((unsigned int (**)(AVAudioNodeImplBase **))*v55 + 17))(v55) && *((unsigned char *)this + 185))
  {
    uint64_t v57 = (*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)v82 + 72))(v82, v88);
    if (v85)
    {
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2329, "_Connect", "[format isEqual:dstFormat]", [(AVAudioFormat *)v85 isEqual:v57]);
    }
    else if ((objc_msgSend((id)(*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)a2 + 48))(a2, a4), "isEqual:", v57) & 1) == 0)
    {
      char v75 = (*(uint64_t (**)(AVAudioNodeImplBase *, void, uint64_t))(*(void *)a2 + 64))(a2, a4, v57);
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2333, "_Connect", "inSrcImpl->SetOutputFormat(inSrcBus, dstFormat)", v75);
    }
  }
  else if (v85)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)NodeFromMap + 136))(NodeFromMap)
      && *((unsigned char *)this + 185))
    {
      int v58 = (void *)(*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)a2 + 48))(a2, a4);
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2338, "_Connect", "[srcFormat isEqual:format]", [v58 isEqual:v85]);
      char v59 = (*(uint64_t (**)(AVAudioNodeImplBase *, void, void *))(*(void *)v82 + 80))(v82, v88, v58);
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2339, "_Connect", "inDestImpl->SetInputFormat(inDestBus, srcFormat)", v59);
    }
    else
    {
      if ((*(unsigned int (**)(AVAudioNodeImplBase *, void, AVAudioFormat *))(*(void *)a2 + 64))(a2, a4, v85))
      {
        char v60 = (*(uint64_t (**)(AVAudioNodeImplBase *, void, AVAudioFormat *))(*(void *)v82 + 80))(v82, v88, v85);
      }
      else
      {
        char v60 = 0;
      }
      _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2341, "_Connect", "inSrcImpl->SetOutputFormat(inSrcBus, format) && inDestImpl->SetInputFormat(inDestBus, format)", v60);
    }
  }
  else
  {
    uint64_t v61 = (*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)a2 + 48))(a2, a4);
    char v62 = (*(uint64_t (**)(AVAudioNodeImplBase *, void, uint64_t))(*(void *)v82 + 80))(v82, v88, v61);
    _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2346, "_Connect", "inDestImpl->SetInputFormat(inDestBus, srcFormat)", v62);
  }
  uint64_t v63 = *(void *)(NodeFromMap + 112);
  if (v63)
  {
    char v64 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v63 + 24) + 48))(*(void *)(v63 + 24), 0);
    if ((objc_msgSend(v64, "isEqual:", (*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)a2 + 48))(a2, 0)) & 1) == 0)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v65 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        int buf = 136316418;
        char v107 = "AVAEInternal.h";
        __int16 v108 = 1024;
        int v109 = 71;
        __int16 v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        __int16 v112 = 1024;
        int v113 = 2352;
        __int16 v114 = 2080;
        v115 = "_Connect";
        __int16 v116 = 2080;
        v117 = "[midiInputImpl->GetOutputFormat(0) isEqual:inSrcImpl->GetOutputFormat(0)]";
        _os_log_impl(&dword_19D794000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "[midiInputImpl->GetOutputFormat(0) isEqual:inSrcImpl->GetOutputFormat(0)]");
    }
  }
  if (*((unsigned char *)this + 185)
    && *((unsigned char *)v55[3] + 48)
    && (*((unsigned int (**)(AVAudioNodeImplBase **))*v55 + 15))(v55)
    && ((_BYTE)v55[4] & 2) != 0)
  {
    AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)&v99, 0);
  }
  else
  {
    AUGraphParser::PrepareForConnection((uint64_t)this, (uint64_t)&v99);
    uint64_t Disconnection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(NodeFromMap + 24), v17[3], a4, v88, 0);
    if (Disconnection)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v45 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        int buf = 136316674;
        char v107 = "AVAEInternal.h";
        __int16 v108 = 1024;
        int v109 = 104;
        __int16 v110 = 2080;
        v111 = "AVAudioEngineGraph.mm";
        __int16 v112 = 1024;
        int v113 = 2372;
        __int16 v114 = 2080;
        v115 = "_Connect";
        __int16 v116 = 2080;
        __int16 v46 = "err = MakeConnection(currentConn)";
        goto LABEL_169;
      }
      goto LABEL_170;
    }
    if (*((unsigned char *)this + 185))
    {
      AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 0, (uint64_t)&v99, 1, 0);
      AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)&v99, 1, 0);
      int v66 = 1;
      if (!v84 && v83) {
        std::vector<AUGraphNodeBaseV3 *>::push_back[abi:ne180100](&__p, &v105);
      }
      goto LABEL_171;
    }
  }
  int v66 = 1;
LABEL_171:
  for (uint64_t j = v94; j != &v93; uint64_t j = (uint64_t *)j[1])
  {
    if (NodeFromMap == j[2]) {
      int v68 = v66;
    }
    else {
      int v68 = 0;
    }
    if (v68 != 1 || *((_DWORD *)j + 6) != a4) {
      AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)(j + 2), 0);
    }
  }
  uint64_t v70 = v91;
  if (v91 != &v90)
  {
    __int16 v71 = v105;
    do
    {
      if (v71 == (AVAudioNodeImplBase **)v70[4])
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        int v72 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          int buf = 136316418;
          char v107 = "AVAEInternal.h";
          __int16 v108 = 1024;
          int v109 = 71;
          __int16 v110 = 2080;
          v111 = "AVAudioEngineGraph.mm";
          __int16 v112 = 1024;
          int v113 = 2398;
          __int16 v114 = 2080;
          v115 = "_Connect";
          __int16 v116 = 2080;
          v117 = "graphNodeDest != conn.destNode";
          _os_log_impl(&dword_19D794000, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)&buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "graphNodeDest != conn.destNode");
      }
      AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)(v70 + 2), 0);
      uint64_t v70 = (uint64_t *)v70[1];
    }
    while (v70 != &v90);
  }
  uint64_t updated = AVAudioEngineGraph::UpdateGraphAfterReconfig((AVAudioEngineGraph *)this, (uint64_t **)&__p, v87);
  if (updated)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    __int16 v73 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      int buf = 136316674;
      char v107 = "AVAEInternal.h";
      __int16 v108 = 1024;
      int v109 = 104;
      __int16 v110 = 2080;
      v111 = "AVAudioEngineGraph.mm";
      __int16 v112 = 1024;
      int v113 = 2404;
      __int16 v114 = 2080;
      v115 = "_Connect";
      __int16 v116 = 2080;
      v117 = "err = UpdateGraphAfterReconfig(&disjointNodes, graphTraversalMode)";
      __int16 v118 = 1024;
      int v119 = updated;
      _os_log_impl(&dword_19D794000, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", (uint8_t *)&buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", updated);
  }
  AVAudioEngineGraph::RemoveInactiveInternalNodes((AVAudioNode *)this);
  std::__list_imp<AUGraphConnection>::clear(&v90);
  std::__list_imp<AUGraphConnection>::clear(&v93);
  if (__p)
  {
    v97 = __p;
    operator delete(__p);
  }
  uint64_t v14 = v86;
LABEL_200:
  std::recursive_mutex::unlock(v14);
  return updated;
}

void sub_19D7DF6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::recursive_mutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  std::recursive_mutex::unlock(a15);
  _Unwind_Resume(a1);
}

AVAudioNode *AVAudioEngineGraph::RemoveInactiveInternalNodes(AVAudioNode *this)
{
  isa = (id *)this[2].super.isa;
  if (isa != this[2]._impl)
  {
    uint64_t v2 = (AVAudioEngineGraph *)this;
    while (1)
    {
      uint64_t v3 = (AVAudioNode *)*isa;
      this = (AVAudioNode *)AVAudioEngineGraph::GetNodeFromMap(v2, (AVAudioNodeImplBase *)[*isa impl]);
      if (!this) {
        goto LABEL_13;
      }
      if (!*((unsigned char *)this[1]._impl + 48))
      {
        uint64_t v5 = this[3].super.isa;
        impl = this[3]._impl;
        if (v5 == impl) {
          break;
        }
        int v7 = 0;
        do
        {
          if (*v5++) {
            ++v7;
          }
        }
        while (v5 != impl);
        if (!v7) {
          break;
        }
      }
      ++isa;
      int v4 = (id *)*((void *)v2 + 5);
LABEL_16:
      if (isa == v4) {
        return this;
      }
    }
    AVAudioEngineGraph::RemoveNode((uint64_t ***)v2, v3, 0);
LABEL_13:
    this = v3;
    uint64_t v9 = (id *)*((void *)v2 + 5);
    int64_t v10 = (char *)v9 - (char *)(isa + 1);
    if (v9 != isa + 1) {
      this = (AVAudioNode *)memmove(isa, isa + 1, (char *)v9 - (char *)(isa + 1));
    }
    int v4 = (id *)((char *)isa + v10);
    *((void *)v2 + 5) = (char *)isa + v10;
    goto LABEL_16;
  }
  return this;
}

uint64_t AVAudioEngineGraph::_Uninitialize(AVAudioNodeImplBase **this, NSError **a2)
{
  int v4 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v4);
  uint64_t v5 = AVAudioEngineGraph::Stop(this, a2);
  __int16 v6 = this[1];
  uint64_t v9 = *(void **)v6;
  int v7 = (void *)((char *)v6 + 8);
  __int16 v8 = v9;
  if (v9 == v7)
  {
    uint64_t Connection = v5;
  }
  else
  {
    do
    {
      uint64_t Connection = AVAudioEngineGraph::PerformCommand((uint64_t)this, (void *)v8[5], 4, 0, 0);
      _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1473, "_Uninitialize", "(err = PerformCommand(*graphNode, kAUUninitialize, NULL, 0))", Connection, a2);
      int v11 = (void *)v8[1];
      if (v11)
      {
        do
        {
          double v12 = v11;
          int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          double v12 = (void *)v8[2];
          BOOL v13 = *v12 == (void)v8;
          __int16 v8 = v12;
        }
        while (!v13);
      }
      __int16 v8 = v12;
    }
    while (v12 != v7);
  }
  for (uint64_t i = (AVAudioNodeImplBase **)this[18]; i != this + 17; uint64_t i = (AVAudioNodeImplBase **)i[1])
  {
    uint64_t Connection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, (uint64_t *)i + 2, a2);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1480, "_Uninitialize", "(err = MakeConnection(conn, outErr))", Connection, a2);
  }
  for (uint64_t j = (AVAudioNodeImplBase **)this[21]; j != this + 20; uint64_t j = (AVAudioNodeImplBase **)j[1])
  {
    uint64_t Connection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, (uint64_t *)j + 2, a2);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1483, "_Uninitialize", "(err = MakeConnection(conn, outErr))", Connection, a2);
  }
  std::__list_imp<AUGraphConnection>::clear(this + 17);
  std::__list_imp<AUGraphConnection>::clear(this + 20);
  *((unsigned char *)this + 185) = 0;
  uint64_t NodeFromMap = (void *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
  if (NodeFromMap)
  {
    uint64_t Connection = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 4, 0, 0);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1495, "_Uninitialize", "(err = PerformCommand(*GetOutputNode(), kAUUninitialize, NULL, 0))", Connection, a2);
  }
  BOOL v17 = (void *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
  if (v17)
  {
    uint64_t Connection = AVAudioEngineGraph::PerformCommand((uint64_t)this, v17, 4, 0, 0);
    _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1497, "_Uninitialize", "(err = PerformCommand(*GetInputNode(), kAUUninitialize, NULL, 0))", Connection, a2);
  }
  std::recursive_mutex::unlock(v4);
  return Connection;
}

void sub_19D7DFA88(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::RemoveNode(uint64_t ***this, AVAudioNode *a2, NSError **a3)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  uint64_t updated = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1694, "RemoveNode", "nil != inAVNode", a2 != 0, 4294967246, a3);
  if (updated) {
    return updated;
  }
  int v100 = (std::recursive_mutex *)(*this + 14);
  std::recursive_mutex::lock(v100);
  int v7 = [(AVAudioNode *)a2 impl];
  char IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph((AVAudioEngineGraph *)this, v7);
  uint64_t updated = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1702, "RemoveNode", "IsNodeInGraph(inImpl)", IsNodeInGraph, 4294967246, a3);
  uint64_t v99 = v7;
  if (updated) {
    goto LABEL_170;
  }
  uint64_t NodeFromMap = (void *)AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, v7);
  if ((*(unsigned int (**)(void *))(*NodeFromMap + 128))(NodeFromMap))
  {
    char v11 = !*((unsigned char *)this + 184) && *(unsigned char *)(NodeFromMap[3] + 48) == 0;
    uint64_t updated = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1720, "RemoveNode", "!IsRunning() && !graphNode->IsInitialized()", v11, 4294967246, a3);
    if (updated) {
      goto LABEL_170;
    }
  }
  if (((NodeFromMap[7] - NodeFromMap[6]) & 0x7FFFFFFF8) == 0
    && ((NodeFromMap[10] - NodeFromMap[9]) & 0x7FFFFFFF8) == 0
    && !NodeFromMap[14]
    && NodeFromMap[16] == NodeFromMap[17])
  {
    if (*((unsigned char *)this + 185)
      && (*(void *)int buf = NodeFromMap,
          *(_DWORD *)&buf[8] = 0,
          *(void *)&uint8_t buf[16] = NodeFromMap,
          *(_DWORD *)&buf[24] = 0,
          AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 0, (uint64_t)buf, 2, a3),
          AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)buf, 2, a3),
          a3)
      && [(NSError *)*a3 code])
    {
      uint64_t updated = [(NSError *)*a3 code];
    }
    else
    {
      v96 = (AUGraphSequencerInterface *)this[10];
      if (v96) {
        AUGraphSequencerInterface::NodeStateChanged(v96, (void **)NodeFromMap, 3u, v10);
      }
      std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(this[1], (unint64_t)v7);
      (*(void (**)(void *))(*NodeFromMap + 8))(NodeFromMap);
      uint64_t updated = 0;
    }
    goto LABEL_170;
  }
  int v12 = *(unsigned __int8 *)(NodeFromMap[3] + 48);
  __dst = 0;
  __int16 v116 = 0;
  unint64_t v117 = 0;
  uint64_t v112 = (uint64_t)&v112;
  int v113 = &v112;
  uint64_t v114 = 0;
  int v109 = 0;
  __int16 v110 = 0;
  uint64_t v111 = 0;
  uint64_t v106 = (uint64_t)&v106;
  std::string __p = &v106;
  uint64_t v108 = 0;
  uint64_t v103 = (uint64_t)&v103;
  unsigned int v104 = &v103;
  uint64_t v105 = 0;
  AUGraphNodeBase::GetValidConnections((uint64_t)NodeFromMap, 1, &v106);
  AUGraphNodeBase::GetValidConnections((uint64_t)NodeFromMap, 0, &v103);
  int v98 = 2;
  if (!*((unsigned char *)this + 185) || !v12) {
    goto LABEL_36;
  }
  int v13 = *((_DWORD *)NodeFromMap + 8);
  if ((v13 & 3) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v14 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v119 = 1024;
      int v120 = 1775;
      __int16 v121 = 2080;
      v122 = "RemoveNode";
      __int16 v123 = 2080;
      v124 = "(graphNode->IsNodeState(kAUGraphNodeState_InInputChain) || graphNode->IsNodeState(kAUGraphNodeState_InOutputChain))";
      _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "(graphNode->IsNodeState(kAUGraphNodeState_InInputChain) || graphNode->IsNodeState(kAUGraphNodeState_InOutputChain))");
    int v13 = *((_DWORD *)NodeFromMap + 8);
  }
  if ((v13 & 2) == 0) {
    goto LABEL_21;
  }
  buf[0] = 0;
  AUGraphParser::GetNodeConnectionsToMixer((uint64_t)NodeFromMap, &v112, buf);
  if (v114) {
    BOOL v16 = buf[0] == 0;
  }
  else {
    BOOL v16 = 0;
  }
  int v17 = v16;
  if (*((unsigned char *)this + 184))
  {
    uint64_t updated = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1782, "RemoveNode", "!nodeMixerConns.empty() && !hasDirectConnToIONode", v17, 4294967246, a3);
    if (updated) {
      goto LABEL_166;
    }
LABEL_21:
    int v15 = 2;
    goto LABEL_34;
  }
  if (v17) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }
LABEL_34:
  int v98 = v15;
  if (AUGraphParser::IsNodeConnectedToTarget(0, (uint64_t)NodeFromMap, this + 11)) {
    AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
  }
LABEL_36:
  uint64_t v97 = NodeFromMap[14];
  if (v97)
  {
    *(void *)int buf = NodeFromMap[14];
    *(void *)&buf[8] = NodeFromMap;
    *(void *)&uint8_t buf[16] = 0;
    *(_DWORD *)&buf[24] = 0;
    (*(void (**)(void *, unsigned char *))(*NodeFromMap + 360))(NodeFromMap, buf);
  }
  if (*(_DWORD *)(*(uint64_t (**)(void))(*(void *)NodeFromMap[3] + 256))(NodeFromMap[3]) == 1635085673)
  {
    if (v97) {
      std::vector<AUGraphNodeBaseV3 *>::__assign_with_size[abi:ne180100]<AUGraphNodeBaseV3 **,AUGraphNodeBaseV3 **>(&v109, (char *)NodeFromMap[16], (char *)NodeFromMap[17], (uint64_t)(NodeFromMap[17] - NodeFromMap[16]) >> 3);
    }
    uint64_t v20 = (uint64_t *)NodeFromMap[16];
    int v21 = (uint64_t *)NodeFromMap[17];
    while (v20 != v21)
    {
      uint64_t v22 = *v20;
      *(void *)int buf = NodeFromMap;
      *(void *)&buf[8] = v22;
      *(void *)&uint8_t buf[16] = 0;
      *(_DWORD *)&buf[24] = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v22 + 360))(v22, buf);
      ++v20;
    }
  }
  int v102 = NodeFromMap;
  unint64_t v23 = v113;
  if (v113 != &v112)
  {
    int v24 = "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus, outErr)";
    do
    {
      AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)v23[4], a3, v18, v19);
      uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(v23[4] + 24), *((unsigned int *)v23 + 10), a3);
      if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1822, "RemoveNode", v24, Disconnection, a3))goto LABEL_160; {
      if (v102 == (void *)v23[2])
      }
      {
        uint64_t v26 = v108;
        if (v108)
        {
          int v27 = v24;
          uint64_t v28 = (void **)__p;
          uint64_t v29 = *((void *)__p + 2);
          int v30 = *((_DWORD *)__p + 6);
          BOOL v31 = (AVAudioNodeImplBase **)*((void *)__p + 4);
          uint64_t v32 = *((unsigned int *)__p + 10);
          uint64_t v33 = *(void *)__p;
          *(void *)(v33 + 8) = *((void *)__p + 1);
          *v28[1] = v33;
          uint64_t v108 = v26 - 1;
          operator delete(v28);
          uint64_t v34 = v23[4];
          int v35 = *((_DWORD *)v23 + 10);
          *(void *)int buf = v29;
          *(_DWORD *)&buf[8] = v30;
          *(void *)&uint8_t buf[16] = v34;
          *(_DWORD *)&buf[24] = v35;
          AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)buf, a3);
          AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)v31, a3, v36, v37);
          uint64_t v38 = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, v31[3], v32, a3);
          int v24 = v27;
          if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1838, "RemoveNode", "err = MakeDisconnection(currSrcConn.destNode->NodeImpl(), currSrcConn.destBus, outErr)", v38, a3))goto LABEL_160; {
        }
          }
      }
      else
      {
        AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)(v23 + 2), a3);
      }
      unint64_t v23 = (uint64_t *)v23[1];
    }
    while (v23 != &v112);
  }
  uint64_t v39 = AVAudioEngineGraph::PerformCommand((uint64_t)this, v102, 4, 0, 0);
  _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1844, "RemoveNode", "err = PerformCommand(*graphNode, kAUUninitialize, NULL, 0)", v39, a3);
  uint64_t Connection = _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4023, "DisconnectInactiveNode", "false == inNode->IsInitialized()", *(unsigned char *)(v102[3] + 48) == 0, 4294967246, a3);
  if (!Connection)
  {
    __int16 v116 = 0;
    *(void *)int buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v127 = (uint64_t)&v127;
    v128 = &v127;
    uint64_t v129 = 0;
    AUGraphNodeBase::GetValidConnections((uint64_t)v102, 1, (uint64_t *)buf);
    AUGraphNodeBase::GetValidConnections((uint64_t)v102, 0, &v127);
    if (*(void *)&buf[16] | v129)
    {
      uint64_t v43 = (AVAudioEngineGraph *)this;
      uint64_t v44 = *(void *)&buf[8];
      if (*(unsigned char **)&buf[8] == buf)
      {
        __int16 v46 = 0;
        uint64_t Connection = 0;
LABEL_77:
        uint64_t v55 = v128;
        if (v128 == &v127)
        {
          uint64_t v56 = v46;
LABEL_98:
          if (*(void *)&buf[16] == v129)
          {
            uint64_t v65 = *(void *)&buf[8];
            if (*(unsigned char **)&buf[8] != buf)
            {
              int v66 = v128;
              do
              {
                uint64_t Connection = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(*(void *)(v65 + 16) + 24), *(AVAudioNodeImplBase **)(v66[4] + 24), *(_DWORD *)(v65 + 24), *((unsigned int *)v66 + 10), a3);
                if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4068, "DisconnectInactiveNode", "err = MakeConnection(itInp->srcNode->NodeImpl(), itOut->destNode->NodeImpl(), itInp->srcBus, itOut->destBus, outErr)", Connection, a3))break; {
                __int16 v67 = (char *)__dst;
                }
                if (__dst == v56)
                {
                  int v68 = __dst;
                }
                else
                {
                  int v68 = __dst;
                  while (*v68 != *(void *)(v65 + 16))
                  {
                    if (++v68 == (void *)v56)
                    {
                      int v68 = v56;
                      break;
                    }
                  }
                }
                if (v56 != (char *)(v68 + 1)) {
                  memmove(v68, v68 + 1, v56 - (char *)(v68 + 1));
                }
                __int16 v69 = v56 - 8;
                if (v67 != v56 - 8)
                {
                  uint64_t v70 = 8 * (((char *)v68 - v67) >> 3) + 8 * ((v56 - (char *)(v68 + 1)) >> 3);
                  while (*(void *)v67 != v66[4])
                  {
                    v67 += 8;
                    v70 -= 8;
                    if (!v70)
                    {
                      __int16 v67 = v56 - 8;
                      break;
                    }
                  }
                }
                int64_t v71 = v69 - (v67 + 8);
                if (v69 != v67 + 8) {
                  memmove(v67, v67 + 8, v69 - (v67 + 8));
                }
                uint64_t v56 = &v67[v71];
                __int16 v116 = &v67[v71];
                uint64_t v65 = *(void *)(v65 + 8);
                int v66 = (uint64_t *)v66[1];
                this = (uint64_t ***)v43;
              }
              while ((unsigned char *)v65 != buf);
            }
          }
        }
        else
        {
          while (1)
          {
            AUGraphParser::PrepareForDisconnection((AUGraphParser *)this, (const AVAudioEngineGraph *)v55[4], 0, v41, v42);
            uint64_t Connection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(v55[4] + 24), *((unsigned int *)v55 + 10), a3);
            if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4053, "DisconnectInactiveNode", "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus, outErr)", Connection, a3))break; {
            if ((unint64_t)v46 >= v117)
            }
            {
              uint64_t v57 = (char *)__dst;
              uint64_t v58 = (v46 - (unsigned char *)__dst) >> 3;
              unint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61) {
                std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v60 = v117 - (void)__dst;
              if ((uint64_t)(v117 - (void)__dst) >> 2 > v59) {
                unint64_t v59 = v60 >> 2;
              }
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v59;
              }
              if (v61) {
                unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v61);
              }
              else {
                uint64_t v62 = 0;
              }
              uint64_t v63 = (char *)(v61 + 8 * v58);
              *(void *)uint64_t v63 = v55[4];
              uint64_t v56 = v63 + 8;
              if (v46 != v57)
              {
                do
                {
                  uint64_t v64 = *((void *)v46 - 1);
                  v46 -= 8;
                  *((void *)v63 - 1) = v64;
                  v63 -= 8;
                }
                while (v46 != v57);
                __int16 v46 = (char *)__dst;
              }
              __dst = v63;
              __int16 v116 = v56;
              unint64_t v117 = v61 + 8 * v62;
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)__int16 v46 = v55[4];
              uint64_t v56 = v46 + 8;
            }
            __int16 v116 = v56;
            uint64_t v55 = (uint64_t *)v55[1];
            __int16 v46 = v56;
            if (v55 == &v127) {
              goto LABEL_98;
            }
          }
        }
      }
      else
      {
        uint64_t v45 = 0;
        while (1)
        {
          uint64_t Connection = AVAudioEngineGraph::MakeDisconnection((AVAudioEngineGraph *)this, *(AVAudioNodeImplBase **)(*(void *)(v44 + 32) + 24), *(unsigned int *)(v44 + 40), a3);
          if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 4044, "DisconnectInactiveNode", "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus, outErr)", Connection, a3))break; {
          if ((unint64_t)v45 >= v117)
          }
          {
            unint64_t v47 = (char *)__dst;
            uint64_t v48 = (v45 - (unsigned char *)__dst) >> 3;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 61) {
              std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v50 = v117 - (void)__dst;
            if ((uint64_t)(v117 - (void)__dst) >> 2 > v49) {
              unint64_t v49 = v50 >> 2;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51) {
              unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v51);
            }
            else {
              uint64_t v52 = 0;
            }
            unsigned int v53 = (char *)(v51 + 8 * v48);
            *(void *)unsigned int v53 = *(void *)(v44 + 16);
            __int16 v46 = v53 + 8;
            if (v45 != v47)
            {
              do
              {
                uint64_t v54 = *((void *)v45 - 1);
                v45 -= 8;
                *((void *)v53 - 1) = v54;
                v53 -= 8;
              }
              while (v45 != v47);
              uint64_t v45 = (char *)__dst;
            }
            __dst = v53;
            __int16 v116 = v46;
            unint64_t v117 = v51 + 8 * v52;
            if (v45) {
              operator delete(v45);
            }
          }
          else
          {
            *(void *)uint64_t v45 = *(void *)(v44 + 16);
            __int16 v46 = v45 + 8;
          }
          __int16 v116 = v46;
          uint64_t v44 = *(void *)(v44 + 8);
          uint64_t v45 = v46;
          if ((unsigned char *)v44 == buf) {
            goto LABEL_77;
          }
        }
      }
    }
    else
    {
      uint64_t Connection = 0;
    }
    std::__list_imp<AUGraphConnection>::clear(&v127);
    std::__list_imp<AUGraphConnection>::clear(buf);
  }
  if (!_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1847, "RemoveNode", "err = DisconnectInactiveNode(graphNode, true , disjointNodes, outErr)", Connection, a3))goto LABEL_160; {
  __int16 v73 = (void **)v102;
  }
  if (!*((unsigned char *)this + 185)) {
    goto LABEL_157;
  }
  char v74 = 0;
  uint64_t v75 = 0;
  uint64_t v127 = 0x100000000;
  do
  {
    int v76 = *((_DWORD *)&v127 + v75);
    char v101 = v74;
    *(void *)int buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0;
    AVAudioEngineGraph::GetPendingConnection((uint64_t)this, v76, (uint64_t)v73, buf);
    for (uint64_t i = *(void *)&buf[8]; (unsigned char *)i != buf; uint64_t i = *(void *)(i + 8))
    {
      char v78 = *(void *)(i + 16) && *(_DWORD *)(i + 24) != -1 && *(void *)(i + 32) && *(_DWORD *)(i + 40) != -1;
      if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1860, "RemoveNode", "conn.IsSrcAndDestValid()", v78, 4294967246, a3))
      {
        if (v73 == *(void ***)(i + 16))
        {
          if (!v108) {
            goto LABEL_146;
          }
          uint64_t v84 = *((void *)__p + 2);
          unsigned int v85 = *((_DWORD *)__p + 6);
          if ((*(uint64_t (**)(uint64_t, void, void))(*(void *)v84 + 24))(v84, 0, v85)
            || (*(uint64_t (**)(void, uint64_t, void))(**(void **)(i + 32) + 24))(*(void *)(i + 32), 1, *(unsigned int *)(i + 40)))
          {
            char v86 = 0;
          }
          else
          {
            *(void *)(i + 16) = v84;
            *(_DWORD *)(i + 24) = v85;
            char v86 = 1;
          }
          int v87 = (void **)__p;
          uint64_t v88 = *(void *)__p;
          *(void *)(v88 + 8) = *((void *)__p + 1);
          *v87[1] = v88;
          --v108;
          operator delete(v87);
          __int16 v73 = (void **)v102;
          if ((v86 & 1) == 0) {
            goto LABEL_146;
          }
        }
        else
        {
          if (_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1884, "RemoveNode", "graphNode == conn.destNode", v73 == *(void ***)(i + 32), 4294967246, a3))continue; {
          if (!v105)
          }
            goto LABEL_146;
          uint64_t v79 = *((void *)v104 + 4);
          uint64_t v80 = *((unsigned int *)v104 + 10);
          if ((*(uint64_t (**)(void, void, void))(**(void **)(i + 16) + 24))(*(void *)(i + 16), 0, *(unsigned int *)(i + 24))|| (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v79 + 24))(v79, 1, v80))
          {
            int v81 = 0;
          }
          else
          {
            *(void *)(i + 32) = v79;
            *(_DWORD *)(i + 40) = v80;
            int v81 = 1;
          }
          v82 = (void **)v104;
          uint64_t v83 = *(void *)v104;
          *(void *)(v83 + 8) = *((void *)v104 + 1);
          *v82[1] = v83;
          --v105;
          operator delete(v82);
          __int16 v73 = (void **)v102;
          if (!v81)
          {
LABEL_146:
            AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, v76, i + 16, 1, a3);
            continue;
          }
        }
        if (v76 || ((*(uint64_t (**)(void))(**(void **)(i + 32) + 120))(*(void *)(i + 32)) & 1) != 0)
        {
          AVAudioEngineGraph::AddPendingConnection((uint64_t)this, v76, i + 16, a3);
        }
        else
        {
          AUGraphParser::PrepareForConnection((uint64_t)this, i + 16);
          uint64_t v89 = AVAudioEngineGraph::MakeConnection((AVAudioEngineGraph *)this, (uint64_t *)(i + 16), a3);
          _AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1912, "RemoveNode", "err = MakeConnection(conn, outErr)", v89, a3);
        }
      }
    }
    std::__list_imp<AUGraphConnection>::clear(buf);
    char v74 = 1;
    uint64_t v75 = 1;
  }
  while ((v101 & 1) == 0);
  if (v97
    && *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(v97 + 24) + 256))(*(void *)(v97 + 24)) == 1635085673)
  {
    uint64_t v90 = (uint64_t *)v109;
    uint64_t v91 = v110;
    while (v90 != v91)
    {
      uint64_t v92 = *v90;
      *(void *)int buf = v97;
      *(void *)&buf[8] = v92;
      *(void *)&uint8_t buf[16] = 0;
      *(_DWORD *)&buf[24] = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v92 + 352))(v92, buf);
      ++v90;
    }
  }
LABEL_157:
  uint64_t v93 = (AUGraphSequencerInterface *)this[10];
  if (v93) {
    AUGraphSequencerInterface::NodeStateChanged(v93, v73, 3u, v72);
  }
  std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(this[1], (unint64_t)v99);
  ((void (*)(void **))(*v73)[1])(v73);
LABEL_160:
  uint64_t updated = AVAudioEngineGraph::UpdateGraphAfterReconfig((AVAudioEngineGraph *)this, (uint64_t **)&__dst, v98);
  if (updated)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    v94 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316674;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v119 = 1024;
      int v120 = 1940;
      __int16 v121 = 2080;
      v122 = "RemoveNode";
      __int16 v123 = 2080;
      v124 = "err = UpdateGraphAfterReconfig(&disjointNodes, graphTraversalMode)";
      __int16 v125 = 1024;
      int v126 = updated;
      _os_log_impl(&dword_19D794000, v94, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", updated);
  }
LABEL_166:
  std::__list_imp<AUGraphConnection>::clear(&v103);
  std::__list_imp<AUGraphConnection>::clear(&v106);
  if (v109) {
    operator delete(v109);
  }
  std::__list_imp<AUGraphConnection>::clear(&v112);
  if (__dst)
  {
    __int16 v116 = (char *)__dst;
    operator delete(__dst);
  }
LABEL_170:
  std::recursive_mutex::unlock(v100);
  return updated;
}

void sub_19D7E0BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::recursive_mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33)
{
}

void std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(uint64_t **a1, unint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v5 = v4;
    __int16 v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      __int16 v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      int64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          int64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        int v12 = v5;
        do
        {
          char v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          int v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

void *std::vector<AUGraphNodeBaseV3 *>::__assign_with_size[abi:ne180100]<AUGraphNodeBaseV3 **,AUGraphNodeBaseV3 **>(void *result, char *__src, char *a3, unint64_t a4)
{
  __int16 v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 >> 61) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61) {
LABEL_23:
    }
      std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v11);
    uint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    _OWORD v7[2] = &result[v12];
    size_t v13 = a3 - v6;
    if (v13) {
      uint64_t result = memmove(result, v6, v13);
    }
    uint64_t v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v14 = (void **)(result + 1);
  int v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 3;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    unsigned int v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  int v17 = &__src[8 * v16];
  if (v15 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v15 - v9);
    uint64_t v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    unsigned int v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v14 = &v9[v13];
  return result;
}

_OWORD *AVAudioEngineGraph::GetPendingConnection(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t result = std::__list_imp<AUGraphConnection>::clear(a4);
  if (a2) {
    uint64_t v9 = a1 + 160;
  }
  else {
    uint64_t v9 = a1 + 136;
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (v10 != v9)
  {
    unint64_t v11 = (_OWORD *)*a4;
    uint64_t v12 = *(void *)(a3 + 24);
    uint64_t v13 = a4[2];
    do
    {
      if (v12 == *(void *)(*(void *)(v10 + 16) + 24) || v12 == *(void *)(*(void *)(v10 + 32) + 24))
      {
        uint64_t result = operator new(0x30uLL);
        long long v14 = *(_OWORD *)(v10 + 32);
        result[1] = *(_OWORD *)(v10 + 16);
        result[2] = v14;
        *(void *)uint64_t result = v11;
        *((void *)result + 1) = a4;
        *((void *)v11 + 1) = result;
        *a4 = result;
        a4[2] = ++v13;
        unint64_t v11 = result;
      }
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while (v10 != v9);
  }
  return result;
}

uint64_t AVAudioEngineGraph::UpdateGraphAfterReconfig(AVAudioEngineGraph *this, uint64_t **a2, int a3)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 185)) {
    return 0;
  }
  if (a2)
  {
    uint64_t v5 = *a2;
    __int16 v6 = a2[1];
    if (*a2 != v6)
    {
      do
      {
        uint64_t v7 = *v5;
        memset(buf, 0, 24);
        std::string __p = 0;
        p_p = 0;
        unint64_t v88 = 0;
        uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 2));
        uint64_t v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
        *uint64_t v9 = NodeFromMap;
        unint64_t v11 = v9 + 1;
        uint64_t v13 = *(char **)buf;
        uint64_t v12 = *(char **)&buf[8];
        long long v14 = v9;
        if (*(void *)&buf[8] != *(void *)buf)
        {
          do
          {
            uint64_t v15 = *((void *)v12 - 1);
            v12 -= 8;
            *--long long v14 = v15;
          }
          while (v12 != v13);
          uint64_t v12 = *(char **)buf;
        }
        *(void *)int buf = v14;
        *(void *)&buf[8] = v9 + 1;
        *(void *)&uint8_t buf[16] = &v9[v10];
        if (v12) {
          operator delete(v12);
        }
        *(void *)&buf[8] = v11;
        uint64_t v16 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
        uint64_t v17 = v16;
        unsigned int v18 = p_p;
        if ((unint64_t)p_p >= v88)
        {
          uint64_t v20 = (p_p - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v20 + 1) >> 61) {
            std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v21 = (uint64_t)(v88 - (void)__p) >> 2;
          if (v21 <= v20 + 1) {
            unint64_t v21 = v20 + 1;
          }
          if (v88 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          int v24 = (uint64_t *)(v22 + 8 * v20);
          *int v24 = v17;
          uint64_t v19 = (char *)(v24 + 1);
          uint64_t v26 = (char *)__p;
          int v25 = p_p;
          if (p_p != __p)
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *--int v24 = v27;
            }
            while (v25 != v26);
            int v25 = (char *)__p;
          }
          std::string __p = v24;
          p_p = v19;
          unint64_t v88 = v22 + 8 * v23;
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(void *)p_p = v16;
          uint64_t v19 = v18 + 8;
        }
        p_p = v19;
        if (!AUGraphParser::IsNodeConnectedToTarget(1, v7, buf)
          && !AUGraphParser::IsNodeConnectedToTarget(0, v7, &__p))
        {
          AUGraphParser::UninitializeNodeChain((uint64_t)this, 1, v7);
          AUGraphParser::UninitializeNodeChain((uint64_t)this, 0, v7);
        }
        if (__p)
        {
          p_p = (char *)__p;
          operator delete(__p);
        }
        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        ++v5;
      }
      while (v5 != v6);
    }
  }
  uint64_t v28 = (char *)this + 160;
  for (uint64_t i = *((void *)this + 21); (char *)i != v28; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v30 = *(void *)(i + 32);
    if (v30) {
      *(_DWORD *)(v30 + 32) = 0;
    }
    AVAudioEngineGraph::MakeVirtualConnection(this, i + 16);
  }
  BOOL v31 = (AVAudioNodeImplBase *)*((void *)this + 3);
  uint64_t v32 = AVAudioEngineGraph::GetNodeFromMap(this, v31);
  if (a3 == 2 && v32)
  {
    uint64_t v33 = *((void *)this + 18);
    std::string __p = &__p;
    p_p = (char *)&__p;
    unint64_t v88 = 0;
    if ((AVAudioEngineGraph *)v33 == (AVAudioEngineGraph *)((char *)this + 136))
    {
      uint64_t v83 = &v83;
      uint64_t v84 = (void **)&v83;
      uint64_t v85 = 0;
    }
    else
    {
      uint64_t v34 = 1;
      int v35 = &__p;
      do
      {
        unsigned int v36 = operator new(0x30uLL);
        long long v37 = *(_OWORD *)(v33 + 32);
        v36[1] = *(_OWORD *)(v33 + 16);
        v36[2] = v37;
        *(void *)unsigned int v36 = v35;
        *((void *)v36 + 1) = &__p;
        v35[1] = v36;
        std::string __p = v36;
        unint64_t v88 = v34;
        uint64_t v33 = *(void *)(v33 + 8);
        ++v34;
        int v35 = (void **)v36;
      }
      while ((AVAudioEngineGraph *)v33 != (AVAudioEngineGraph *)((char *)this + 136));
      uint64_t v38 = p_p;
      uint64_t v83 = &v83;
      uint64_t v84 = (void **)&v83;
      uint64_t v85 = 0;
      if (p_p != (char *)&__p)
      {
        while (1)
        {
          uint64_t v39 = (uint64_t *)(v38 + 16);
          if (!*((void *)v38 + 2)
            || (uint64_t v40 = *((void *)v38 + 4)) == 0
            || ((*(uint64_t (**)(uint64_t))(*(void *)v40 + 120))(v40) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            unsigned int v41 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136316418;
              *(void *)&uint8_t buf[4] = "AVAEInternal.h";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 71;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "AVAudioEngineGraph.mm";
              __int16 v90 = 1024;
              int v91 = 4185;
              __int16 v92 = 2080;
              uint64_t v93 = "UpdateGraphAfterReconfig";
              __int16 v94 = 2080;
              uint64_t v95 = "conn.srcNode && conn.destNode && conn.destNode->IsMixerNode()";
              _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "conn.srcNode && conn.destNode && conn.destNode->IsMixerNode()");
          }
          uint64_t v42 = (void *)*((void *)v38 + 4);
          if (*(unsigned char *)(v42[3] + 48))
          {
            if ((*(unsigned int (**)(void *))(*v42 + 96))(v42))
            {
              unsigned int v43 = *((_DWORD *)v38 + 10);
              if (v43 >= (*(unsigned int (**)(void))(**(void **)(*((void *)v38 + 4) + 24) + 96))(*(void *)(*((void *)v38 + 4) + 24))) {
                (*(void (**)(void, void))(**(void **)(*((void *)v38 + 4) + 24) + 112))(*(void *)(*((void *)v38 + 4) + 24), (*((_DWORD *)v38 + 10) + 1));
              }
            }
            if ((*(unsigned int (**)(void))(*(void *)*v39 + 104))())
            {
              unsigned int v44 = *((_DWORD *)v38 + 6);
              if (v44 >= (*(unsigned int (**)(void))(**(void **)(*((void *)v38 + 2) + 24) + 104))(*(void *)(*((void *)v38 + 2) + 24))) {
                (*(void (**)(void, void))(**(void **)(*((void *)v38 + 2) + 24) + 120))(*(void *)(*((void *)v38 + 2) + 24), (*((_DWORD *)v38 + 6) + 1));
              }
            }
            uint64_t v45 = (void *)(*(uint64_t (**)(void, void))(**(void **)(*((void *)v38 + 2) + 24) + 48))(*(void *)(*((void *)v38 + 2) + 24), *((unsigned int *)v38 + 6));
            if ((objc_msgSend(v45, "isEqual:", (*(uint64_t (**)(void, void))(**(void **)(*((void *)v38 + 4) + 24) + 72))(*(void *)(*((void *)v38 + 4) + 24), *((unsigned int *)v38 + 10))) & 1) == 0&& ((*(uint64_t (**)(void))(**((void **)v38 + 4) + 136))(*((void *)v38 + 4)) & 1) == 0)
            {
              (*(void (**)(void, void, void *))(**(void **)(*((void *)v38 + 4) + 24) + 80))(*(void *)(*((void *)v38 + 4) + 24), *((unsigned int *)v38 + 10), v45);
            }
            __int16 v46 = (AUGraphNodeBase *)*((void *)v38 + 2);
            uint64_t v47 = *((void *)v38 + 4);
            unsigned int v48 = *(_DWORD *)(v47 + 36);
            unint64_t v49 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v47 + 24) + 48))(*(void *)(v47 + 24), 0);
            if (v49) {
              [v49 sampleRate];
            }
            else {
              double v50 = -1.0;
            }
            AUGraphNodeBase::CalculateMaxFrames(v46, v48, v50);
            char v82 = 0;
            uint64_t active = AUGraphParser::InitializeActiveNodesInOutputChain(this, *v39, &v82);
            if (active)
            {
              if (AVAudioEngineLogCategory(void)::once != -1) {
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
              }
              uint64_t v52 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136316674;
                *(void *)&uint8_t buf[4] = "AVAEInternal.h";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = "AVAudioEngineGraph.mm";
                __int16 v90 = 1024;
                int v91 = 4216;
                __int16 v92 = 2080;
                uint64_t v93 = "UpdateGraphAfterReconfig";
                __int16 v94 = 2080;
                unsigned int v53 = "AUGraphParser::InitializeActiveNodesInOutputChain(ThisGraph, kOutputChainFullTraversal, *conn.srcN"
                      "ode, isChainActive)";
                goto LABEL_70;
              }
              goto LABEL_71;
            }
            if (v82) {
              break;
            }
          }
LABEL_72:
          uint64_t v38 = (char *)*((void *)v38 + 1);
          if (v38 == (char *)&__p) {
            goto LABEL_131;
          }
        }
        std::__list_imp<AUGraphConnection>::clear(&v83);
        for (uint64_t j = (char *)*((void *)this + 21); ; uint64_t j = (char *)*((void *)j + 1))
        {
          if (j == v28)
          {
            for (k = v84; k != (void **)&v83; k = (void **)k[1])
              AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)(k + 2), 1, 0);
            AUGraphParser::PrepareForConnection((uint64_t)this, (uint64_t)(v38 + 16));
            uint64_t active = AVAudioEngineGraph::MakeConnection(this, (uint64_t *)v38 + 2, 0);
            if (active)
            {
              if (AVAudioEngineLogCategory(void)::once != -1) {
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
              }
              uint64_t v52 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136316674;
                *(void *)&uint8_t buf[4] = "AVAEInternal.h";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = "AVAudioEngineGraph.mm";
                __int16 v90 = 1024;
                int v91 = 4241;
                __int16 v92 = 2080;
                uint64_t v93 = "UpdateGraphAfterReconfig";
                __int16 v94 = 2080;
                unsigned int v53 = "MakeConnection(conn)";
LABEL_70:
                uint64_t v95 = v53;
                __int16 v96 = 1024;
                int v97 = active;
                _os_log_impl(&dword_19D794000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
              }
LABEL_71:
              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", active);
            }
            else
            {
              AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 0, (uint64_t)(v38 + 16), 1, 0);
            }
            goto LABEL_72;
          }
          uint64_t v55 = *((void *)j + 4);
          if (v55 && (*(unsigned char *)(v55 + 32) & 2) != 0)
          {
            uint64_t v56 = (void **)(j + 16);
            AUGraphParser::PrepareForConnection((uint64_t)this, (uint64_t)(j + 16));
            uint64_t Connection = AVAudioEngineGraph::MakeConnection(this, (uint64_t *)j + 2, 0);
            if (Connection)
            {
              if (AVAudioEngineLogCategory(void)::once != -1) {
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
              }
              uint64_t v58 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136316674;
                *(void *)&uint8_t buf[4] = "AVAEInternal.h";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = "AVAudioEngineGraph.mm";
                __int16 v90 = 1024;
                int v91 = 4226;
                __int16 v92 = 2080;
                uint64_t v93 = "UpdateGraphAfterReconfig";
                __int16 v94 = 2080;
                unint64_t v59 = "MakeConnection(inputConn)";
                goto LABEL_95;
              }
              goto LABEL_96;
            }
            uint64_t v60 = operator new(0x30uLL);
            long long v61 = *((_OWORD *)j + 2);
            v60[1] = *(_OWORD *)v56;
            v60[2] = v61;
            uint64_t v62 = v83;
            *(void *)uint64_t v60 = v83;
            *((void *)v60 + 1) = &v83;
            v62[1] = v60;
            uint64_t v83 = v60;
            ++v85;
            uint64_t v63 = AVAudioEngineGraph::PerformCommand((uint64_t)this, *v56, 3, 0, 0);
            if (v63)
            {
              if (AVAudioEngineLogCategory(void)::once != -1) {
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
              }
              uint64_t v64 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136316674;
                *(void *)&uint8_t buf[4] = "AVAEInternal.h";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = "AVAudioEngineGraph.mm";
                __int16 v90 = 1024;
                int v91 = 4230;
                __int16 v92 = 2080;
                uint64_t v93 = "UpdateGraphAfterReconfig";
                __int16 v94 = 2080;
                uint64_t v95 = "PerformCommand(*inputConn.srcNode, kAUInitialize, NULL, 0)";
                __int16 v96 = 1024;
                int v97 = v63;
                _os_log_impl(&dword_19D794000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
              }
              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v63);
            }
            uint64_t Connection = AVAudioEngineGraph::PerformCommand((uint64_t)this, *((void **)j + 4), 3, 0, 0);
            if (Connection)
            {
              if (AVAudioEngineLogCategory(void)::once != -1) {
                dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
              }
              uint64_t v58 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
              if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136316674;
                *(void *)&uint8_t buf[4] = "AVAEInternal.h";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 104;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = "AVAudioEngineGraph.mm";
                __int16 v90 = 1024;
                int v91 = 4231;
                __int16 v92 = 2080;
                uint64_t v93 = "UpdateGraphAfterReconfig";
                __int16 v94 = 2080;
                unint64_t v59 = "PerformCommand(*inputConn.destNode, kAUInitialize, NULL, 0)";
LABEL_95:
                uint64_t v95 = v59;
                __int16 v96 = 1024;
                int v97 = Connection;
                _os_log_impl(&dword_19D794000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
              }
LABEL_96:
              objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", Connection);
              continue;
            }
          }
        }
      }
    }
LABEL_131:
    std::__list_imp<AUGraphConnection>::clear(&v83);
    std::__list_imp<AUGraphConnection>::clear(&__p);
    goto LABEL_132;
  }
  uint64_t v66 = AVAudioEngineGraph::GetNodeFromMap(this, v31);
  if (a3 != 1 || !v66) {
    goto LABEL_132;
  }
  for (m = (void *)*((void *)this + 18); m != (void *)((char *)this + 136); m = (void *)m[1])
  {
    uint64_t v68 = AVAudioEngineGraph::MakeConnection(this, m + 2, 0);
    if (v68)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      __int16 v69 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 104;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "AVAudioEngineGraph.mm";
        __int16 v90 = 1024;
        int v91 = 4249;
        __int16 v92 = 2080;
        uint64_t v93 = "UpdateGraphAfterReconfig";
        __int16 v94 = 2080;
        uint64_t v95 = "MakeConnection(conn)";
        __int16 v96 = 1024;
        int v97 = v68;
        _os_log_impl(&dword_19D794000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v68);
    }
  }
  for (uint64_t n = *((void *)this + 21); (char *)n != v28; uint64_t n = *(void *)(n + 8))
  {
    uint64_t v71 = AVAudioEngineGraph::MakeConnection(this, (uint64_t *)(n + 16), 0);
    if (v71)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      int v72 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 104;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "AVAudioEngineGraph.mm";
        __int16 v90 = 1024;
        int v91 = 4252;
        __int16 v92 = 2080;
        uint64_t v93 = "UpdateGraphAfterReconfig";
        __int16 v94 = 2080;
        uint64_t v95 = "MakeConnection(conn)";
        __int16 v96 = 1024;
        int v97 = v71;
        _os_log_impl(&dword_19D794000, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v71);
    }
  }
  std::__list_imp<AUGraphConnection>::clear((void *)this + 17);
  std::__list_imp<AUGraphConnection>::clear((void *)this + 20);
  uint64_t v73 = AVAudioEngineGraph::GetNodeFromMap(this, *((AVAudioNodeImplBase **)this + 3));
  uint64_t v74 = AUGraphParser::InitializeActiveNodesInOutputChain(this, v73, &__p);
  if (!v74)
  {
LABEL_132:
    int v76 = (AVAudioNodeImplBase *)*((void *)this + 2);
    if (AVAudioEngineGraph::GetNodeFromMap(this, v76))
    {
      unint64_t v77 = (AVAudioEngineGraph *)AVAudioEngineGraph::GetNodeFromMap(this, v76);
      uint64_t v74 = AUGraphParser::InitializeActiveNodesInInputChain((AVAudioNodeImplBase **)this, v77, v78);
      if (v74)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v80 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316674;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 104;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "AVAudioEngineGraph.mm";
          __int16 v90 = 1024;
          int v91 = 4270;
          __int16 v92 = 2080;
          uint64_t v93 = "UpdateGraphAfterReconfig";
          __int16 v94 = 2080;
          uint64_t v95 = "err = AUGraphParser::InitializeActiveNodesInInputChain(ThisGraph, *GetInputNode())";
          __int16 v96 = 1024;
          int v97 = v74;
          _os_log_impl(&dword_19D794000, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v74);
        return v74;
      }
    }
    else
    {
      AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
      *((void *)this + 12) = *((void *)this + 11);
    }
    AUGraphParser::UpdateGraphAttributes((AVAudioNodeImplBase **)this, v79);
    AVAudioEngineGraph::MonitorState(this);
    return 0;
  }
  if (AVAudioEngineLogCategory(void)::once != -1) {
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
  }
  uint64_t v75 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136316674;
    *(void *)&uint8_t buf[4] = "AVAEInternal.h";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 104;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = "AVAudioEngineGraph.mm";
    __int16 v90 = 1024;
    int v91 = 4260;
    __int16 v92 = 2080;
    uint64_t v93 = "UpdateGraphAfterReconfig";
    __int16 v94 = 2080;
    uint64_t v95 = "err = AUGraphParser::InitializeActiveNodesInOutputChain(ThisGraph, inTraversalMode, *GetOutputNode(), isChainActive)";
    __int16 v96 = 1024;
    int v97 = v74;
    _os_log_impl(&dword_19D794000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
  }
  objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v74);
  return v74;
}

void sub_19D7E20EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
}

void std::vector<AUGraphNodeBaseV3 *>::push_back[abi:ne180100](void **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((char *)v5 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (void *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    *uint64_t v12 = *a2;
    __int16 v6 = v12 + 1;
    uint64_t v15 = (char *)*a1;
    long long v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--uint64_t v12 = v16;
      }
      while (v14 != v15);
      long long v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    __int16 v6 = v5 + 1;
  }
  a1[1] = v6;
}

void AVAudioEngineGraph::Start(AVAudioNodeImplBase **this, NSError **a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a2) {
    *a2 = 0;
  }
  unint64_t v4 = (std::recursive_mutex *)((char *)*this + 112);
  std::recursive_mutex::lock(v4);
  if (!*((unsigned char *)this + 184))
  {
    uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
    uint64_t v6 = 3;
    if (!NodeFromMap) {
      uint64_t v6 = 2;
    }
    uint64_t v7 = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[v6]);
    if (!v7)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        uint64_t v19 = "AVAEInternal.h";
        __int16 v20 = 1024;
        int v21 = 71;
        __int16 v22 = 2080;
        uint64_t v23 = "AVAudioEngineGraph.mm";
        __int16 v24 = 1024;
        int v25 = 1533;
        __int16 v26 = 2080;
        uint64_t v27 = "Start";
        __int16 v28 = 2080;
        uint64_t v29 = "ioNode != NULL";
        _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "ioNode != NULL");
    }
    if (AVAudioEngineGraph::Initialize((AVAudioEngineGraph *)this, a2)) {
      goto LABEL_28;
    }
    uint64_t v9 = this[1];
    uint64_t v12 = *(void **)v9;
    unint64_t v10 = (void *)((char *)v9 + 8);
    uint64_t v11 = v12;
    if (v12 != v10)
    {
      do
      {
        unint64_t v13 = (void *)v11[5];
        if (*(unsigned char *)(v13[3] + 48)) {
          (*(void (**)(void *))(*v13 + 208))(v13);
        }
        long long v14 = (void *)v11[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            long long v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v11[2];
            BOOL v16 = *v15 == (void)v11;
            uint64_t v11 = v15;
          }
          while (!v16);
        }
        uint64_t v11 = v15;
      }
      while (v15 != v10);
    }
    uint64_t v17 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 128))(v7)
        ? (*(uint64_t (**)(uint64_t))(*(void *)v7 + 224))(v7)
        : 4294967246;
    if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1549, "Start", "err = PerformCommand(*ioNode, kAUStartIO, NULL, 0)", v17, a2))
    {
      *((unsigned char *)this + 184) = 1;
      AVAudioEngineGraph::MonitorState((AVAudioEngineGraph *)this);
    }
    if (v17 || !*((unsigned char *)this + 184)) {
LABEL_28:
    }
      AVAudioEngineGraph::_Stop(this, a2);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_19D7E252C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::AddNode(AVAudioEngineGraph *this, AVAudioNode *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    unint64_t v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136316418;
      *(void *)&buf[1] = "AVAEInternal.h";
      __int16 v16 = 1024;
      *(_DWORD *)uint64_t v17 = 71;
      *(_WORD *)&v17[4] = 2080;
      *(void *)&v17[6] = "AVAudioEngineGraph.mm";
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = 1629;
      *(_WORD *)&v19[4] = 2080;
      *(void *)&v19[6] = "AddNode";
      __int16 v20 = 2080;
      int v21 = "nil != inAVNode";
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nil != inAVNode");
  }
  uint64_t v5 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v5);
  uint64_t v6 = [(AVAudioNode *)a2 impl];
  if (!v6
    || (uint64_t v7 = [(AVAudioNode *)a2 impl],
        *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v7 + 256))(v7) == 1635086197))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136316418;
      *(void *)&buf[1] = "AVAEInternal.h";
      __int16 v16 = 1024;
      *(_DWORD *)uint64_t v17 = 71;
      *(_WORD *)&v17[4] = 2080;
      *(void *)&v17[6] = "AVAudioEngineGraph.mm";
      __int16 v18 = 1024;
      *(_DWORD *)uint64_t v19 = 1634;
      *(_WORD *)&v19[4] = 2080;
      *(void *)&v19[6] = "AddNode";
      __int16 v20 = 2080;
      int v21 = "inImpl != nil && !IsIONode(inAVNode)";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", (uint8_t *)buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inImpl != nil && !IsIONode(inAVNode)");
  }
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v6))
  {
    uint64_t v9 = [(AVAudioNode *)a2 impl];
    unint64_t v10 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v9 + 256))(v9);
    if (v10[1] != 1836281964 && *v10 != 1635085688)
    {
      uint64_t v12 = [(AVAudioNode *)a2 impl];
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v12 + 256))(v12) == 1635085673) {
        operator new();
      }
      unint64_t v13 = [(AVAudioNode *)a2 impl];
      if ((*(unsigned int (**)(void *))(*(void *)v13 + 408))(v13)) {
        operator new();
      }
      long long v14 = [(AVAudioNode *)a2 impl];
      if ((*(unsigned int (**)(void *))(*(void *)v14 + 416))(v14)) {
        operator new();
      }
      operator new();
    }
    operator new();
  }
  std::recursive_mutex::unlock(v5);
}

void sub_19D7E33F8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v3, 0x80C40B8603338);
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(v2);
  MEMORY[0x19F3ABB30](v2, 0x10A1C40220A4F1BLL);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__emplace_unique_key_args<AVAudioNodeImplBase *,std::pair<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>(uint64_t *result, unint64_t a2, __n128 a3)
{
  uint64_t v3 = (uint64_t **)result;
  uint64_t v5 = (uint64_t **)(result + 1);
  unint64_t v4 = (uint64_t *)result[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= a2) {
          break;
        }
        unint64_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a2) {
        break;
      }
      unint64_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v8 = (__n128 *)operator new(0x30uLL);
    v8[2] = a3;
    return std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__insert_node_at(v3, (uint64_t)v6, v5, (uint64_t *)v8);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t AUGraphNodeBaseV3::LastRenderError(AUGraphNodeBaseV3 *this)
{
  return atomic_load((unsigned int *)this + 40);
}

uint64_t AUGraphNodeV3::InputHandler(AUGraphNodeV3 *this)
{
  return 0;
}

uint64_t AUGraphNodeV3::OutputProvider(AUGraphNodeV3 *this)
{
  return 0;
}

uint64_t AUGraphNodeBaseV3::InputBlock(AUGraphNodeBaseV3 *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (v1) {
    return *(void *)v1;
  }
  else {
    return 0;
  }
}

uint64_t AUGraphNodeBaseV3::RenderBlock(AUGraphNodeBaseV3 *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (v1) {
    return *(void *)v1;
  }
  else {
    return 0;
  }
}

uint64_t AUGraphNodeBaseV3::InputMutex(AUGraphNodeBaseV3 *this)
{
  return (uint64_t)this + 152;
}

uint64_t AUGraphNodeBase::GetLastInputCallbackStatus(AUGraphNodeBase *this)
{
  return -1;
}

uint64_t AUGraphNodeBase::RenderToABL(AUGraphNodeBase *this, unsigned int a2, AudioBufferList *a3)
{
  return 4294956448;
}

uint64_t AUGraphNodeBase::SetManualRenderingRenderCallback()
{
  return 0;
}

uint64_t AUGraphNodeBase::CanChangeMaxFrames(AUGraphNodeBase *this)
{
  return 1;
}

uint64_t AUGraphNodeBase::IsSinkNode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsVoiceIONode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsIONode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsMixerNode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::IsSplitterNode(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::CanResizeNumberOfOutputs(AUGraphNodeBase *this)
{
  return 0;
}

uint64_t AUGraphNodeBase::CanResizeNumberOfInputs(AUGraphNodeBase *this)
{
  return 0;
}

void AUGraphNodeV3::~AUGraphNodeV3(const void ***this)
{
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);

  JUMPOUT(0x19F3ABB30);
}

void AVAudioEngineGraph::AddIONode(AVAudioEngineGraph *this, AVAudioNode *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v15 = "AVAEInternal.h";
      __int16 v16 = 1024;
      int v17 = 71;
      __int16 v18 = 2080;
      uint64_t v19 = "AVAudioEngineGraph.mm";
      __int16 v20 = 1024;
      int v21 = 1665;
      __int16 v22 = 2080;
      uint64_t v23 = "AddIONode";
      __int16 v24 = 2080;
      int v25 = "nil != inAVNode";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nil != inAVNode");
  }
  unint64_t v7 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v7);
  uint64_t v8 = [(AVAudioNode *)a2 impl];
  if (!v8
    || (uint64_t v9 = [(AVAudioNode *)a2 impl],
        *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v9 + 256))(v9) != 1635086197))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    unint64_t v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v15 = "AVAEInternal.h";
      __int16 v16 = 1024;
      int v17 = 71;
      __int16 v18 = 2080;
      uint64_t v19 = "AVAudioEngineGraph.mm";
      __int16 v20 = 1024;
      int v21 = 1670;
      __int16 v22 = 2080;
      uint64_t v23 = "AddIONode";
      __int16 v24 = 2080;
      int v25 = "inImpl != nil && IsIONode(inAVNode)";
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inImpl != nil && IsIONode(inAVNode)");
  }
  if (a3) {
    uint64_t v11 = 16;
  }
  else {
    uint64_t v11 = 24;
  }
  uint64_t v12 = *(AVAudioNodeImplBase **)((char *)this + v11);
  if (v8 != v12)
  {
    if (v12 || AVAudioEngineGraph::IsNodeInGraph(this, v8))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      unint64_t v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        uint64_t v15 = "AVAEInternal.h";
        __int16 v16 = 1024;
        int v17 = 71;
        __int16 v18 = 2080;
        uint64_t v19 = "AVAudioEngineGraph.mm";
        __int16 v20 = 1024;
        int v21 = 1678;
        __int16 v22 = 2080;
        uint64_t v23 = "AddIONode";
        __int16 v24 = 2080;
        int v25 = "NULL == ioNodeImpl && !IsNodeInGraph(inImpl)";
        _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "NULL == ioNodeImpl && !IsNodeInGraph(inImpl)");
    }
    if (*((unsigned char *)this + 187)) {
      operator new();
    }
    operator new();
  }
  std::recursive_mutex::unlock(v7);
}

void sub_19D7E3BB4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v2, 0x10A1C400CDEF94BLL);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::RemoveIONode(AVAudioEngineGraph *this, AVAudioNode *a2, int a3, NSError **a4)
{
  if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1956, "RemoveIONode", "nil != inAVNode", a2 != 0, 4294967246, a4))
  {
    uint64_t v8 = (std::recursive_mutex *)(*(void *)this + 112);
    std::recursive_mutex::lock(v8);
    uint64_t v9 = [(AVAudioNode *)a2 impl];
    char IsNodeInGraph = AVAudioEngineGraph::IsNodeInGraph(this, v9);
    if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1962, "RemoveIONode", "IsNodeInGraph(inImpl)", IsNodeInGraph, 4294967246, a4))
    {
      uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v9);
      uint64_t v12 = 24;
      if (a3) {
        uint64_t v12 = 16;
      }
      char v13 = NodeFromMap == AVAudioEngineGraph::GetNodeFromMap(this, *(AVAudioNodeImplBase **)((char *)this + v12));
      _AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1967, "RemoveIONode", "(isInputNode && graphNode == GetInputNode()) || (!isInputNode && graphNode == GetOutputNode())", v13, 4294967246, a4);
      if (*((unsigned char *)this + 184)) {
        char v14 = 0;
      }
      else {
        char v14 = *((unsigned char *)this + 185) == 0;
      }
      if (!_AVAE_CheckAndReturnErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1968, "RemoveIONode", "!IsRunning() && !IsInitialized()", v14, 4294967246, a4))
      {
        uint64_t v15 = AVAudioEngineGraph::RemoveNode((uint64_t ***)this, a2, a4);
        if (_AVAE_CheckNoErr("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 1980, "RemoveIONode", "err = RemoveNode(inAVNode, outErr)", v15, a4))
        {
          if (a3)
          {
            *((void *)this + 2) = 0;
            AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
            *((void *)this + 12) = *((void *)this + 11);
          }
          else
          {
            *((void *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
          }
        }
      }
    }
    std::recursive_mutex::unlock(v8);
  }
}

void sub_19D7E3E04(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphSequencerInterface::GetOutputAudioUnit(AVAudioNodeImplBase ***this, unint64_t a2, unint64_t a3, AudioComponentDescription *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a2 | a3)
  {
    if (a2) {
      *(void *)a2 = 0;
    }
    if (a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
    }
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    unint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v16 = "AVAEInternal.h";
      __int16 v17 = 1024;
      int v18 = 71;
      __int16 v19 = 2080;
      __int16 v20 = "AVAudioEngineGraph.mm";
      __int16 v21 = 1024;
      int v22 = 4702;
      __int16 v23 = 2080;
      __int16 v24 = "GetOutputAudioUnit";
      __int16 v25 = 2080;
      uint64_t v26 = "outUnit || outDesc";
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "outUnit || outDesc");
  }
  uint64_t v8 = *this;
  uint64_t v9 = (std::recursive_mutex *)((char *)**this + 112);
  std::recursive_mutex::lock(v9);
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v8, v8[3]);
  if (!NodeFromMap)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v16 = "AVAEInternal.h";
      __int16 v17 = 1024;
      int v18 = 71;
      __int16 v19 = 2080;
      __int16 v20 = "AVAudioEngineGraph.mm";
      __int16 v21 = 1024;
      int v22 = 4715;
      __int16 v23 = 2080;
      __int16 v24 = "GetOutputAudioUnit";
      __int16 v25 = 2080;
      uint64_t v26 = "outputNode";
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "outputNode");
  }
  if (a2) {
    *(void *)a2 = (*(uint64_t (**)(void))(**(void **)(NodeFromMap + 24) + 224))(*(void *)(NodeFromMap + 24));
  }
  if (a3)
  {
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(NodeFromMap + 24) + 256))(*(void *)(NodeFromMap + 24));
    long long v13 = *(_OWORD *)v12;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v12 + 16);
    *(_OWORD *)a3 = v13;
  }
  std::recursive_mutex::unlock(v9);
  return 0;
}

void sub_19D7E4130(_Unwind_Exception *exception_object)
{
}

uint64_t AUGraphSequencerInterface::UnregisterRenderCallback(AVAudioNodeImplBase ***this, void *a2, int (*a3)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *this;
  unint64_t v7 = (std::recursive_mutex *)((char *)**this + 112);
  std::recursive_mutex::lock(v7);
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v6, v6[3]);
  if (!NodeFromMap)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      __int16 v12 = 2080;
      long long v13 = "AVAudioEngineGraph.mm";
      __int16 v14 = 1024;
      int v15 = 4639;
      __int16 v16 = 2080;
      __int16 v17 = "UnregisterRenderCallback";
      __int16 v18 = 2080;
      __int16 v19 = "outputNode";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "outputNode");
  }
  *(void *)int buf = a2;
  *(void *)&buf[8] = a3;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)NodeFromMap + 272))(NodeFromMap, buf);
  std::recursive_mutex::unlock(v7);
  return 0;
}

void sub_19D7E4310(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphSequencerInterface::RegisterRenderCallback(AVAudioNodeImplBase ***this, void *a2, int (*a3)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *this;
  unint64_t v7 = (std::recursive_mutex *)((char *)**this + 112);
  std::recursive_mutex::lock(v7);
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)v6, v6[3]);
  if (!NodeFromMap)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      __int16 v12 = 2080;
      long long v13 = "AVAudioEngineGraph.mm";
      __int16 v14 = 1024;
      int v15 = 4622;
      __int16 v16 = 2080;
      __int16 v17 = "RegisterRenderCallback";
      __int16 v18 = 2080;
      __int16 v19 = "outputNode";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "outputNode");
  }
  *(void *)int buf = a2;
  *(void *)&buf[8] = a3;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)NodeFromMap + 264))(NodeFromMap, buf);
  std::recursive_mutex::unlock(v7);
  return 0;
}

void sub_19D7E44EC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AUGraphSequencerInterface::RegisterAUStatusCallback(AUGraphSequencerInterface *this, void *a2, void (*a3)(void *, OpaqueAudioComponentInstance *, int), void *a4)
{
  unint64_t v4 = (void *)*((void *)this + 3);
  if (!v4) {
    operator new();
  }
  *unint64_t v4 = a2;
  v4[1] = a3;
  return 0;
}

uint64_t AUGraphSequencerInterface::IsGraphRunning(AUGraphSequencerInterface *this, void *a2)
{
  uint64_t v2 = *(void **)this;
  uint64_t v3 = (std::recursive_mutex *)(**(void **)this + 112);
  std::recursive_mutex::lock(v3);
  uint64_t v4 = *((unsigned __int8 *)v2 + 184);
  std::recursive_mutex::unlock(v3);
  return v4;
}

uint64_t AVAudioEngineGraph::_DisconnectInput(AVAudioEngineGraph *this, AVAudioNodeImplBase *a2, uint64_t a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v6);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, a2))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    unint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      __int16 v51 = 1024;
      *(_DWORD *)uint64_t v52 = 71;
      *(_WORD *)&uint8_t v52[4] = 2080;
      *(void *)&v52[6] = "AVAudioEngineGraph.mm";
      __int16 v53 = 1024;
      int v54 = 2686;
      __int16 v55 = 2080;
      uint64_t v56 = "_DisconnectInput";
      __int16 v57 = 2080;
      uint64_t v58 = "IsNodeInGraph(inDestImpl)";
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inDestImpl)");
  }
  uint64_t NodeFromMap = (void *)AVAudioEngineGraph::GetNodeFromMap(this, a2);
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*NodeFromMap + 24))(NodeFromMap, 1, a3);
  if (!v9)
  {
    uint64_t updated = 0;
    goto LABEL_64;
  }
  std::string __p = 0;
  unsigned int v48 = 0;
  unint64_t v49 = 0;
  int v10 = *(unsigned __int8 *)(NodeFromMap[3] + 48);
  uint64_t v44 = (uint64_t)&v44;
  uint64_t v45 = &v44;
  uint64_t v46 = 0;
  if ((*(unsigned int (**)(void *))(*NodeFromMap + 120))(NodeFromMap))
  {
    AVAudioEngineGraph::MakeDisconnection(this, a2, a3, 0);
  }
  else
  {
    int v12 = (*(uint64_t (**)(void *))(*NodeFromMap + 128))(NodeFromMap) ^ 1;
    if (!v10) {
      LOBYTE(v12) = 1;
    }
    if (v12)
    {
      int v26 = 2;
      if (*((unsigned char *)this + 185) && v10)
      {
        if ((NodeFromMap[4] & 2) != 0)
        {
          buf[0] = 0;
          AUGraphParser::GetNodeConnectionsToMixer((uint64_t)NodeFromMap, &v44, buf);
          if (v46) {
            BOOL v27 = buf[0] == 0;
          }
          else {
            BOOL v27 = 0;
          }
          int v28 = v27;
          if (*((unsigned char *)this + 184))
          {
            _AVAE_Check("/Library/Caches/com.apple.xbs/Sources/AVFAudio/Source/AVFAudio/AVAudioEngine/AVAEGraph/AVAudioEngineGraph.mm", 2734, "_DisconnectInput", "!nodeMixerConns.empty() && !hasDirectConnToIONode", v28);
          }
          else if (v28)
          {
            int v26 = 2;
          }
          else
          {
            int v26 = 1;
          }
        }
        if (AUGraphParser::IsNodeConnectedToTarget(0, (uint64_t)NodeFromMap, (void *)this + 11)) {
          AVAudioEngineGraph::SetNodesToPullEnabled((uint64_t)this, 0);
        }
      }
      int v43 = v26;
      int v35 = v45;
      if (v45 == &v44)
      {
LABEL_79:
        int v17 = v43;
        uint64_t v38 = AVAudioEngineGraph::PerformCommand((uint64_t)this, NodeFromMap, 4, 0, 0);
        if (v38)
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          uint64_t v39 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316674;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            __int16 v51 = 1024;
            *(_DWORD *)uint64_t v52 = 104;
            *(_WORD *)&uint8_t v52[4] = 2080;
            *(void *)&v52[6] = "AVAudioEngineGraph.mm";
            __int16 v53 = 1024;
            int v54 = 2761;
            __int16 v55 = 2080;
            uint64_t v56 = "_DisconnectInput";
            __int16 v57 = 2080;
            uint64_t v58 = "PerformCommand(*graphNode, kAUUninitialize, NULL, 0)";
            __int16 v59 = 1024;
            int v60 = v38;
            _os_log_impl(&dword_19D794000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v38);
        }
        uint64_t Disconnection = AVAudioEngineGraph::MakeDisconnection(this, a2, a3, 0);
        if (Disconnection)
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          unsigned int v41 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316674;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            __int16 v51 = 1024;
            *(_DWORD *)uint64_t v52 = 104;
            *(_WORD *)&uint8_t v52[4] = 2080;
            *(void *)&v52[6] = "AVAudioEngineGraph.mm";
            __int16 v53 = 1024;
            int v54 = 2764;
            __int16 v55 = 2080;
            uint64_t v56 = "_DisconnectInput";
            __int16 v57 = 2080;
            uint64_t v58 = "err = MakeDisconnection(inDestImpl, inDestBus)";
            __int16 v59 = 1024;
            int v60 = Disconnection;
            _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", Disconnection);
        }
      }
      else
      {
        while (1)
        {
          uint64_t v36 = AVAudioEngineGraph::MakeDisconnection(this, *(AVAudioNodeImplBase **)(v35[4] + 24), *((unsigned int *)v35 + 10), 0);
          if (v36) {
            break;
          }
          if (NodeFromMap == (void *)v35[4])
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            long long v37 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136316418;
              *(void *)&uint8_t buf[4] = "AVAEInternal.h";
              __int16 v51 = 1024;
              *(_DWORD *)uint64_t v52 = 71;
              *(_WORD *)&uint8_t v52[4] = 2080;
              *(void *)&v52[6] = "AVAudioEngineGraph.mm";
              __int16 v53 = 1024;
              int v54 = 2756;
              __int16 v55 = 2080;
              uint64_t v56 = "_DisconnectInput";
              __int16 v57 = 2080;
              uint64_t v58 = "graphNode != conn.destNode";
              _os_log_impl(&dword_19D794000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "graphNode != conn.destNode");
          }
          AVAudioEngineGraph::AddPendingConnection((uint64_t)this, 0, (uint64_t)(v35 + 2), 0);
          int v35 = (uint64_t *)v35[1];
          if (v35 == &v44) {
            goto LABEL_79;
          }
        }
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        int v17 = v43;
        uint64_t v42 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316674;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          __int16 v51 = 1024;
          *(_DWORD *)uint64_t v52 = 104;
          *(_WORD *)&uint8_t v52[4] = 2080;
          *(void *)&v52[6] = "AVAudioEngineGraph.mm";
          __int16 v53 = 1024;
          int v54 = 2751;
          __int16 v55 = 2080;
          uint64_t v56 = "_DisconnectInput";
          __int16 v57 = 2080;
          uint64_t v58 = "err = MakeDisconnection(conn.destNode->NodeImpl(), conn.destBus)";
          __int16 v59 = 1024;
          int v60 = v36;
          _os_log_impl(&dword_19D794000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v36);
      }
      goto LABEL_29;
    }
    if (*((unsigned char *)this + 184))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      long long v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        __int16 v51 = 1024;
        *(_DWORD *)uint64_t v52 = 71;
        *(_WORD *)&uint8_t v52[4] = 2080;
        *(void *)&v52[6] = "AVAudioEngineGraph.mm";
        __int16 v53 = 1024;
        int v54 = 2713;
        __int16 v55 = 2080;
        uint64_t v56 = "_DisconnectInput";
        __int16 v57 = 2080;
        uint64_t v58 = "!IsRunning()";
        _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "!IsRunning()");
    }
    uint64_t v14 = *((void *)this + 2);
    if (v14) {
      LODWORD(v14) = NodeFromMap[3] == v14;
    }
    AUGraphParser::UninitializeNodeChain((uint64_t)this, v14 ^ 1, v9);
    uint64_t v15 = AVAudioEngineGraph::MakeDisconnection(this, a2, a3, 0);
    if (v15)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      __int16 v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        __int16 v51 = 1024;
        *(_DWORD *)uint64_t v52 = 104;
        *(_WORD *)&uint8_t v52[4] = 2080;
        *(void *)&v52[6] = "AVAudioEngineGraph.mm";
        __int16 v53 = 1024;
        int v54 = 2718;
        __int16 v55 = 2080;
        uint64_t v56 = "_DisconnectInput";
        __int16 v57 = 2080;
        uint64_t v58 = "err = MakeDisconnection(inDestImpl, inDestBus)";
        __int16 v59 = 1024;
        int v60 = v15;
        _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v15);
    }
  }
  int v17 = 2;
LABEL_29:
  if (*((unsigned char *)this + 185))
  {
    memset(buf, 0, sizeof(buf));
    *(void *)&v52[2] = NodeFromMap;
    *(_DWORD *)&v52[10] = a3;
    AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 0, (uint64_t)buf, 1, 0);
    memset(buf, 0, sizeof(buf));
    *(void *)&v52[2] = NodeFromMap;
    *(_DWORD *)&v52[10] = a3;
    AVAudioEngineGraph::RemovePendingConnection((uint64_t)this, 1, (uint64_t)buf, 1, 0);
  }
  __int16 v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(1uLL);
  uint64_t v20 = v18;
  void *v18 = NodeFromMap;
  std::string __p = v18;
  unsigned int v48 = v18 + 1;
  unint64_t v49 = &v18[v19];
  if (v19 < 2)
  {
    uint64_t v22 = 2;
    uint64_t v23 = 8 * v19;
    if ((unint64_t)((8 * v19) >> 2) > 2) {
      uint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v29 = 0;
    unint64_t v30 = v24 + 8;
    unint64_t v31 = v24 + 8 * v25;
    *(void *)(v24 + 8) = v9;
    __int16 v21 = (void *)(v24 + 16);
    do
    {
      *(void *)(v24 + v29 * 8) = v20[v29];
      --v29;
    }
    while (v29 != -1);
    uint64_t v32 = __p;
    std::string __p = (void *)(v30 - 8);
    unsigned int v48 = v21;
    unint64_t v49 = (void *)v31;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    v18[1] = v9;
    __int16 v21 = v18 + 2;
  }
  unsigned int v48 = v21;
  uint64_t updated = AVAudioEngineGraph::UpdateGraphAfterReconfig(this, (uint64_t **)&__p, v17);
  if (updated)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v33 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316674;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      __int16 v51 = 1024;
      *(_DWORD *)uint64_t v52 = 104;
      *(_WORD *)&uint8_t v52[4] = 2080;
      *(void *)&v52[6] = "AVAudioEngineGraph.mm";
      __int16 v53 = 1024;
      int v54 = 2780;
      __int16 v55 = 2080;
      uint64_t v56 = "_DisconnectInput";
      __int16 v57 = 2080;
      uint64_t v58 = "err = UpdateGraphAfterReconfig(&disjointNodes, graphTraversalMode)";
      __int16 v59 = 1024;
      int v60 = updated;
      _os_log_impl(&dword_19D794000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", updated);
  }
  std::__list_imp<AUGraphConnection>::clear(&v44);
  if (__p)
  {
    unsigned int v48 = __p;
    operator delete(__p);
  }
LABEL_64:
  std::recursive_mutex::unlock(v6);
  return updated;
}

void sub_19D7E51D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  std::recursive_mutex::unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t std::list<AUGraphConnection>::splice(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    uint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      if (v5 == a4)
      {
        uint64_t v8 = 1;
      }
      else
      {
        uint64_t v6 = -1;
        unint64_t v7 = a4;
        do
        {
          unint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
        uint64_t v8 = v6 + 2;
      }
      *(void *)(a3 + 16) -= v8;
      *(void *)(result + 16) += v8;
    }
    uint64_t v9 = *a4;
    *(void *)(v9 + 8) = v5[1];
    *(void *)v5[1] = v9;
    uint64_t v10 = *a2;
    *(void *)(v10 + 8) = a4;
    *a4 = v10;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t AVAudioEngineGraph::ConnectMIDI(AVAudioEngineGraph *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3 || ![a3 count])
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2886;
      __int16 v98 = 2080;
      uint64_t v99 = "ConnectMIDI";
      __int16 v100 = 2080;
      char v101 = "inSourceAVNode && inDestAVNodes && inDestAVNodes.count > 0";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inSourceAVNode && inDestAVNodes && inDestAVNodes.count > 0");
  }
  uint64_t v85 = (AVAudioNodeImplBase *)[a2 impl];
  if (!v85)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2889;
      __int16 v98 = 2080;
      uint64_t v99 = "ConnectMIDI";
      __int16 v100 = 2080;
      char v101 = "inSrcImpl";
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inSrcImpl");
  }
  if (a4)
  {
    [a4 sampleRate];
    if (v11 <= 0.0 || ![a4 channelCount])
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      int v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 71;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "AVAudioEngineGraph.mm";
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = 2892;
        __int16 v98 = 2080;
        uint64_t v99 = "ConnectMIDI";
        __int16 v100 = 2080;
        char v101 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsFormatSampleRateAndChannelCountValid(format)");
    }
  }
  char v78 = (std::recursive_mutex *)(*(void *)a1 + 112);
  std::recursive_mutex::lock(v78);
  if (!AVAudioEngineGraph::IsNodeInGraph(a1, v85))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    long long v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2897;
      __int16 v98 = 2080;
      uint64_t v99 = "ConnectMIDI";
      __int16 v100 = 2080;
      char v101 = "IsNodeInGraph(inSrcImpl)";
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inSrcImpl)", v78);
  }
  uint64_t NodeFromMap = (void *)AVAudioEngineGraph::GetNodeFromMap(a1, v85);
  uint64_t v14 = (unsigned __int8 *)NodeFromMap[3];
  int v79 = v14[48];
  if (*(_DWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v14 + 256))(v14) != 1635085673)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2904;
      __int16 v98 = 2080;
      uint64_t v99 = "ConnectMIDI";
      __int16 v100 = 2080;
      char v101 = "graphNodeSrc->IsMIDIProcessorNode()";
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "graphNodeSrc->IsMIDIProcessorNode()");
  }
  std::string __p = 0;
  __int16 v94 = 0;
  unint64_t v95 = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  uint64_t v16 = [a3 countByEnumeratingWithState:&v89 objects:v96 count:16];
  int v17 = 0;
  __int16 v18 = 0;
  if (v16)
  {
    unint64_t v19 = 0;
    uint64_t v83 = *(void *)v90;
    uint64_t v80 = a5;
    do
    {
      uint64_t v84 = v16;
      for (uint64_t i = 0; i != v84; ++i)
      {
        if (*(void *)v90 != v83) {
          objc_enumerationMutation(a3);
        }
        __int16 v21 = *(void **)(*((void *)&v89 + 1) + 8 * i);
        if (!v21)
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          uint64_t v22 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "AVAudioEngineGraph.mm";
            *(_WORD *)&unsigned char buf[28] = 1024;
            *(_DWORD *)&buf[30] = 2914;
            __int16 v98 = 2080;
            uint64_t v99 = "ConnectMIDI";
            __int16 v100 = 2080;
            char v101 = "destAVNode";
            _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "destAVNode");
        }
        uint64_t v23 = (AVAudioNodeImplBase *)[v21 impl];
        if (!v23)
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          unint64_t v24 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "AVAudioEngineGraph.mm";
            *(_WORD *)&unsigned char buf[28] = 1024;
            *(_DWORD *)&buf[30] = 2917;
            __int16 v98 = 2080;
            uint64_t v99 = "ConnectMIDI";
            __int16 v100 = 2080;
            char v101 = "inDestImpl";
            _os_log_impl(&dword_19D794000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inDestImpl");
        }
        if (!AVAudioEngineGraph::IsNodeInGraph(a1, v23))
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          uint64_t v25 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "AVAudioEngineGraph.mm";
            *(_WORD *)&unsigned char buf[28] = 1024;
            *(_DWORD *)&buf[30] = 2921;
            __int16 v98 = 2080;
            uint64_t v99 = "ConnectMIDI";
            __int16 v100 = 2080;
            char v101 = "IsNodeInGraph(inDestImpl)";
            _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inDestImpl)");
        }
        uint64_t v26 = AVAudioEngineGraph::GetNodeFromMap(a1, v23);
        int v27 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(v26 + 24) + 256))(*(void *)(v26 + 24));
        if (v27 != 1635085685 && v27 != 1635086953)
        {
          int v29 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(v26 + 24) + 256))(*(void *)(v26 + 24));
          BOOL v30 = v29 == 1635085670 || v29 == 1635086957;
          if (!v30
            && *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(v26 + 24) + 256))(*(void *)(v26 + 24)) != 1635085673)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            uint64_t v42 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136316418;
              *(void *)&uint8_t buf[4] = "AVAEInternal.h";
              *(_WORD *)&uint8_t buf[12] = 1024;
              *(_DWORD *)&buf[14] = 71;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "AVAudioEngineGraph.mm";
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = 2925;
              __int16 v98 = 2080;
              uint64_t v99 = "ConnectMIDI";
              __int16 v100 = 2080;
              char v101 = "graphNodeDest->IsMusicDevice() || graphNodeDest->IsMusicEffect() || graphNodeDest->IsMIDIProcessorNode()";
              _os_log_impl(&dword_19D794000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "graphNodeDest->IsMusicDevice() || graphNodeDest->IsMusicEffect() || graphNodeDest->IsMIDIProcessorNode()");
          }
        }
        if ((unint64_t)v18 >= v19)
        {
          uint64_t v31 = v18 - v17;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61) {
            std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v19 - (void)v17) >> 2 > v32) {
            unint64_t v32 = (uint64_t)(v19 - (void)v17) >> 2;
          }
          if (v19 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          if (v33) {
            unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v33);
          }
          else {
            uint64_t v34 = 0;
          }
          int v35 = (uint64_t *)(v33 + 8 * v31);
          *int v35 = v26;
          uint64_t v36 = v35 + 1;
          while (v18 != v17)
          {
            uint64_t v37 = *--v18;
            *--int v35 = v37;
          }
          unint64_t v86 = v33 + 8 * v34;
          if (v17) {
            operator delete(v17);
          }
          int v17 = v35;
          __int16 v18 = v36;
        }
        else
        {
          unint64_t v86 = v19;
          *v18++ = v26;
        }
        uint64_t v38 = *(void **)(v26 + 112);
        if (v38)
        {
          if (v38 == NodeFromMap) {
            goto LABEL_135;
          }
          int v39 = *(unsigned __int8 *)(*(void *)(v26 + 24) + 48);
          *(void *)int buf = *(void *)(v26 + 112);
          *(void *)&buf[8] = v26;
          *(void *)&uint8_t buf[16] = 0;
          *(_DWORD *)&buf[24] = 0;
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v26 + 360))(v26, buf);
          if (*((unsigned char *)a1 + 185) && v39)
          {
            uint64_t v40 = v94;
            if ((unint64_t)v94 >= v95)
            {
              uint64_t v43 = a6;
              uint64_t v44 = (char *)__p;
              uint64_t v45 = (v94 - (unsigned char *)__p) >> 3;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61) {
                std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v47 = v95 - (void)__p;
              if ((uint64_t)(v95 - (void)__p) >> 2 > v46) {
                unint64_t v46 = v47 >> 2;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48) {
                unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v48);
              }
              else {
                uint64_t v49 = 0;
              }
              double v50 = (char *)(v48 + 8 * v45);
              *(void *)double v50 = v38;
              unsigned int v41 = v50 + 8;
              if (v40 != v44)
              {
                do
                {
                  uint64_t v51 = *((void *)v40 - 1);
                  v40 -= 8;
                  *((void *)v50 - 1) = v51;
                  v50 -= 8;
                }
                while (v40 != v44);
                uint64_t v40 = (char *)__p;
              }
              std::string __p = v50;
              unint64_t v95 = v48 + 8 * v49;
              a6 = v43;
              if (v40) {
                operator delete(v40);
              }
              a5 = v80;
            }
            else
            {
              *(void *)__int16 v94 = v38;
              unsigned int v41 = v40 + 8;
            }
            __int16 v94 = v41;
          }
        }
        uint64_t v52 = (uint64_t)a4;
        if (!a4) {
          uint64_t v52 = (*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)v23 + 48))(v23, 0);
        }
        if ((objc_msgSend((id)(*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)v85 + 48))(v85, 0), "isEqual:", v52) & 1) == 0)
        {
          uint64_t v53 = AVAudioEngineGraph::PerformCommand((uint64_t)a1, NodeFromMap, 4, 0, 0);
          if (v53)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            int v54 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136316674;
              *(void *)&uint8_t buf[4] = "AVAEInternal.h";
              *(_WORD *)&uint8_t buf[12] = 1024;
              *(_DWORD *)&buf[14] = 104;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "AVAudioEngineGraph.mm";
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = 2952;
              __int16 v98 = 2080;
              uint64_t v99 = "ConnectMIDI";
              __int16 v100 = 2080;
              char v101 = "PerformCommand(*graphNodeSrc, kAUUninitialize, NULL, 0)";
              __int16 v102 = 1024;
              int v103 = v53;
              _os_log_impl(&dword_19D794000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v53);
          }
          if (((*(uint64_t (**)(AVAudioNodeImplBase *, void, uint64_t))(*(void *)v85 + 64))(v85, 0, v52) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            __int16 v55 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136316418;
              *(void *)&uint8_t buf[4] = "AVAEInternal.h";
              *(_WORD *)&uint8_t buf[12] = 1024;
              *(_DWORD *)&buf[14] = 71;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "AVAudioEngineGraph.mm";
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = 2953;
              __int16 v98 = 2080;
              uint64_t v99 = "ConnectMIDI";
              __int16 v100 = 2080;
              char v101 = "inSrcImpl->SetOutputFormat(0, newFormat)";
              _os_log_impl(&dword_19D794000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inSrcImpl->SetOutputFormat(0, newFormat)");
          }
        }
        uint64_t v56 = NodeFromMap[14];
        if (v56)
        {
          __int16 v57 = (void *)(*(uint64_t (**)(void, void))(**(void **)(v56 + 24) + 48))(*(void *)(v56 + 24), 0);
          if ((objc_msgSend(v57, "isEqual:", (*(uint64_t (**)(AVAudioNodeImplBase *, void))(*(void *)v85 + 48))(v85, 0)) & 1) == 0)
          {
            if (AVAudioEngineLogCategory(void)::once != -1) {
              dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
            }
            uint64_t v58 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
            if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136316418;
              *(void *)&uint8_t buf[4] = "AVAEInternal.h";
              *(_WORD *)&uint8_t buf[12] = 1024;
              *(_DWORD *)&buf[14] = 71;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "AVAudioEngineGraph.mm";
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = 2958;
              __int16 v98 = 2080;
              uint64_t v99 = "ConnectMIDI";
              __int16 v100 = 2080;
              char v101 = "[midiInputImpl->GetOutputFormat(0) isEqual:inSrcImpl->GetOutputFormat(0)]";
              _os_log_impl(&dword_19D794000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
            }
            objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "[midiInputImpl->GetOutputFormat(0) isEqual:inSrcImpl->GetOutputFormat(0)]");
          }
        }
        *(void *)int buf = NodeFromMap;
        *(void *)&buf[8] = v26;
        *(void *)&uint8_t buf[16] = a5;
        *(void *)&buf[24] = a6;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v26 + 352))(v26, buf);
LABEL_135:
        unint64_t v19 = v86;
      }
      uint64_t v16 = [a3 countByEnumeratingWithState:&v89 objects:v96 count:16];
    }
    while (v16);
  }
  __int16 v59 = (uint64_t *)NodeFromMap[16];
  for (uint64_t j = (uint64_t *)NodeFromMap[17]; v59 != j; ++v59)
  {
    uint64_t v61 = *v59;
    uint64_t v62 = v17;
    if (v17 != v18)
    {
      while (*v62 != v61)
      {
        if (++v62 == v18)
        {
          uint64_t v62 = v18;
          break;
        }
      }
    }
    if (v62 == v18)
    {
      *(void *)int buf = NodeFromMap;
      *(void *)&buf[8] = v61;
      *(void *)&uint8_t buf[16] = 0;
      *(_DWORD *)&buf[24] = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v61 + 360))(v61, buf);
      if (*((unsigned char *)a1 + 185))
      {
        if (v79)
        {
          uint64_t v63 = v94;
          if ((unint64_t)v94 >= v95)
          {
            uint64_t v65 = (char *)__p;
            uint64_t v66 = (v94 - (unsigned char *)__p) >> 3;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 61) {
              std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v68 = v95 - (void)__p;
            if ((uint64_t)(v95 - (void)__p) >> 2 > v67) {
              unint64_t v67 = v68 >> 2;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v67;
            }
            if (v69) {
              unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v69);
            }
            else {
              uint64_t v70 = 0;
            }
            uint64_t v71 = (char *)(v69 + 8 * v66);
            *(void *)uint64_t v71 = v61;
            uint64_t v64 = v71 + 8;
            if (v63 != v65)
            {
              do
              {
                uint64_t v72 = *((void *)v63 - 1);
                v63 -= 8;
                *((void *)v71 - 1) = v72;
                v71 -= 8;
              }
              while (v63 != v65);
              uint64_t v63 = (char *)__p;
            }
            std::string __p = v71;
            unint64_t v95 = v69 + 8 * v70;
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *(void *)__int16 v94 = v61;
            uint64_t v64 = v63 + 8;
          }
          __int16 v94 = v64;
        }
      }
    }
  }
  if (v79)
  {
    if (!*(unsigned char *)(NodeFromMap[3] + 48))
    {
      uint64_t v73 = AVAudioEngineGraph::PerformCommand((uint64_t)a1, NodeFromMap, 3, 0, 0);
      if (v73)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v74 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316674;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          *(_WORD *)&uint8_t buf[12] = 1024;
          *(_DWORD *)&buf[14] = 104;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "AVAudioEngineGraph.mm";
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = 2979;
          __int16 v98 = 2080;
          uint64_t v99 = "ConnectMIDI";
          __int16 v100 = 2080;
          char v101 = "PerformCommand(*graphNodeSrc, kAUInitialize, NULL, 0)";
          __int16 v102 = 1024;
          int v103 = v73;
          _os_log_impl(&dword_19D794000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v73);
      }
    }
  }
  uint64_t updated = AVAudioEngineGraph::UpdateGraphAfterReconfig(a1, (uint64_t **)&__p, 1);
  if (updated)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    int v76 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316674;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 2983;
      __int16 v98 = 2080;
      uint64_t v99 = "ConnectMIDI";
      __int16 v100 = 2080;
      char v101 = "err = UpdateGraphAfterReconfig(&disjointNodes, kOutputChainFullTraversal)";
      __int16 v102 = 1024;
      int v103 = updated;
      _os_log_impl(&dword_19D794000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", updated);
  }
  AVAudioEngineGraph::RemoveInactiveInternalNodes((AVAudioNode *)a1);
  if (__p)
  {
    __int16 v94 = (char *)__p;
    operator delete(__p);
  }
  if (v17) {
    operator delete(v17);
  }
  std::recursive_mutex::unlock(v78);
  return updated;
}

void sub_19D7E6868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
}

void AVAudioEngineGraph::DisconnectMIDI(AVAudioEngineGraph *this, AVAudioNode *a2, NSArray *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [(AVAudioNode *)a2 impl];
  if (!v4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v31 = 1024;
      int v32 = 3001;
      __int16 v33 = 2080;
      uint64_t v34 = "DisconnectMIDI";
      __int16 v35 = 2080;
      uint64_t v36 = "inSrcImpl";
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inSrcImpl");
  }
  uint64_t v23 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v23);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v4))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v31 = 1024;
      int v32 = 3006;
      __int16 v33 = 2080;
      uint64_t v34 = "DisconnectMIDI";
      __int16 v35 = 2080;
      uint64_t v36 = "IsNodeInGraph(inSrcImpl)";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inSrcImpl)");
  }
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v4);
  if (*(_DWORD *)(*(uint64_t (**)(void))(**(void **)(NodeFromMap + 24) + 256))(*(void *)(NodeFromMap + 24)) != 1635085673)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v31 = 1024;
      int v32 = 3011;
      __int16 v33 = 2080;
      uint64_t v34 = "DisconnectMIDI";
      __int16 v35 = 2080;
      uint64_t v36 = "graphNodeSrc->IsMIDIProcessorNode()";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "graphNodeSrc->IsMIDIProcessorNode()");
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v9 = [(NSArray *)a3 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v26;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v26 != v10) {
          objc_enumerationMutation(a3);
        }
        int v12 = *(void **)(*((void *)&v25 + 1) + 8 * v11);
        if (!v12)
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          long long v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "AVAudioEngineGraph.mm";
            __int16 v31 = 1024;
            int v32 = 3017;
            __int16 v33 = 2080;
            uint64_t v34 = "DisconnectMIDI";
            __int16 v35 = 2080;
            uint64_t v36 = "destAVNode";
            _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "destAVNode");
        }
        uint64_t v14 = (AVAudioNodeImplBase *)[v12 impl];
        if (!v14)
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          uint64_t v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "AVAudioEngineGraph.mm";
            __int16 v31 = 1024;
            int v32 = 3020;
            __int16 v33 = 2080;
            uint64_t v34 = "DisconnectMIDI";
            __int16 v35 = 2080;
            uint64_t v36 = "inDestImpl";
            _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inDestImpl");
        }
        if (!AVAudioEngineGraph::IsNodeInGraph(this, v14))
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          uint64_t v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&buf[14] = 71;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = "AVAudioEngineGraph.mm";
            __int16 v31 = 1024;
            int v32 = 3024;
            __int16 v33 = 2080;
            uint64_t v34 = "DisconnectMIDI";
            __int16 v35 = 2080;
            uint64_t v36 = "IsNodeInGraph(inDestImpl)";
            _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inDestImpl)");
        }
        uint64_t v17 = AVAudioEngineGraph::GetNodeFromMap(this, v14);
        __int16 v18 = *(void **)(NodeFromMap + 128);
        unint64_t v19 = *(void **)(NodeFromMap + 136);
        if (v18 != v19)
        {
          uint64_t v20 = v17;
          do
          {
            if (*v18 == v20)
            {
              *(void *)int buf = NodeFromMap;
              *(void *)&buf[8] = v20;
              *(void *)&uint8_t buf[16] = 0;
              *(_DWORD *)&buf[24] = 0;
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v20 + 360))(v20, buf);
            }
            ++v18;
          }
          while (v18 != v19);
        }
        ++v11;
      }
      while (v11 != v9);
      uint64_t v9 = [(NSArray *)a3 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v9);
  }
  if (*(void *)(NodeFromMap + 128) == *(void *)(NodeFromMap + 136))
  {
    uint64_t v21 = AVAudioEngineGraph::PerformCommand((uint64_t)this, (void *)NodeFromMap, 4, 0, 0);
    if (v21)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v22 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 104;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "AVAudioEngineGraph.mm";
        __int16 v31 = 1024;
        int v32 = 3038;
        __int16 v33 = 2080;
        uint64_t v34 = "DisconnectMIDI";
        __int16 v35 = 2080;
        uint64_t v36 = "PerformCommand(*midiNode, kAUUninitialize, nullptr, 0)";
        __int16 v37 = 1024;
        int v38 = v21;
        _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v21);
    }
  }
  std::recursive_mutex::unlock(v23);
}

void sub_19D7E71E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11)
{
}

void AVAudioEngineGraph::DisconnectAllMIDIInputs(AVAudioEngineGraph *this, AVAudioNode *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v16 = "AVAEInternal.h";
      __int16 v17 = 1024;
      int v18 = 71;
      __int16 v19 = 2080;
      uint64_t v20 = "AVAudioEngineGraph.mm";
      __int16 v21 = 1024;
      int v22 = 3046;
      __int16 v23 = 2080;
      unint64_t v24 = "DisconnectAllMIDIInputs";
      __int16 v25 = 2080;
      long long v26 = "inAVNode";
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inAVNode");
  }
  uint64_t v5 = [(AVAudioNode *)a2 impl];
  if (!v5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v16 = "AVAEInternal.h";
      __int16 v17 = 1024;
      int v18 = 71;
      __int16 v19 = 2080;
      uint64_t v20 = "AVAudioEngineGraph.mm";
      __int16 v21 = 1024;
      int v22 = 3049;
      __int16 v23 = 2080;
      unint64_t v24 = "DisconnectAllMIDIInputs";
      __int16 v25 = 2080;
      long long v26 = "inImpl";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inImpl");
  }
  unint64_t v7 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v7);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v5))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v16 = "AVAEInternal.h";
      __int16 v17 = 1024;
      int v18 = 71;
      __int16 v19 = 2080;
      uint64_t v20 = "AVAudioEngineGraph.mm";
      __int16 v21 = 1024;
      int v22 = 3054;
      __int16 v23 = 2080;
      unint64_t v24 = "DisconnectAllMIDIInputs";
      __int16 v25 = 2080;
      long long v26 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inImpl)");
  }
  uint64_t NodeFromMap = (void *)AVAudioEngineGraph::GetNodeFromMap(this, v5);
  uint64_t v10 = (void *)NodeFromMap[14];
  if (v10)
  {
    v13[0] = NodeFromMap[14];
    v13[1] = NodeFromMap;
    id v13[2] = 0;
    int v14 = 0;
    (*(void (**)(void *, void *))(*NodeFromMap + 360))(NodeFromMap, v13);
    if (v10[16] == v10[17])
    {
      uint64_t v11 = AVAudioEngineGraph::PerformCommand((uint64_t)this, v10, 4, 0, 0);
      if (v11)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        int v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316674;
          uint64_t v16 = "AVAEInternal.h";
          __int16 v17 = 1024;
          int v18 = 104;
          __int16 v19 = 2080;
          uint64_t v20 = "AVAudioEngineGraph.mm";
          __int16 v21 = 1024;
          int v22 = 3066;
          __int16 v23 = 2080;
          unint64_t v24 = "DisconnectAllMIDIInputs";
          __int16 v25 = 2080;
          long long v26 = "PerformCommand(*midiNode, kAUUninitialize, nullptr, 0)";
          __int16 v27 = 1024;
          int v28 = v11;
          _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v11);
      }
    }
  }
  std::recursive_mutex::unlock(v7);
}

void sub_19D7E7700(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AVAudioEngineGraph::DisconnectAllMIDIOutputs(AVAudioEngineGraph *this, AVAudioNode *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v17 = 1024;
      int v18 = 3075;
      __int16 v19 = 2080;
      uint64_t v20 = "DisconnectAllMIDIOutputs";
      __int16 v21 = 2080;
      int v22 = "inAVNode";
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inAVNode");
  }
  uint64_t v5 = [(AVAudioNode *)a2 impl];
  if (!v5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v17 = 1024;
      int v18 = 3078;
      __int16 v19 = 2080;
      uint64_t v20 = "DisconnectAllMIDIOutputs";
      __int16 v21 = 2080;
      int v22 = "inImpl";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inImpl");
  }
  unint64_t v7 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v7);
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v5))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v17 = 1024;
      int v18 = 3083;
      __int16 v19 = 2080;
      uint64_t v20 = "DisconnectAllMIDIOutputs";
      __int16 v21 = 2080;
      int v22 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inImpl)");
  }
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v5);
  if (*(_DWORD *)(*(uint64_t (**)(void))(**(void **)(NodeFromMap + 24) + 256))(*(void *)(NodeFromMap + 24)) != 1635085673)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v17 = 1024;
      int v18 = 3090;
      __int16 v19 = 2080;
      uint64_t v20 = "DisconnectAllMIDIOutputs";
      __int16 v21 = 2080;
      int v22 = "graphNode->IsMIDIProcessorNode()";
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "graphNode->IsMIDIProcessorNode()");
  }
  uint64_t v11 = *(unint64_t **)(NodeFromMap + 128);
  int v12 = *(unint64_t **)(NodeFromMap + 136);
  while (v11 != v12)
  {
    unint64_t v13 = *v11;
    *(void *)int buf = NodeFromMap;
    *(_OWORD *)&buf[8] = v13;
    *(_DWORD *)&buf[24] = 0;
    (*(void (**)(unint64_t, unsigned char *))(*(void *)v13 + 360))(v13, buf);
    ++v11;
  }
  uint64_t v14 = AVAudioEngineGraph::PerformCommand((uint64_t)this, (void *)NodeFromMap, 4, 0, 0);
  if (v14)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316674;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 104;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAudioEngineGraph.mm";
      __int16 v17 = 1024;
      int v18 = 3099;
      __int16 v19 = 2080;
      uint64_t v20 = "DisconnectAllMIDIOutputs";
      __int16 v21 = 2080;
      int v22 = "PerformCommand(*midiNode, kAUUninitialize, nullptr, 0)";
      __int16 v23 = 1024;
      int v24 = v14;
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v14);
  }
  std::recursive_mutex::unlock(v7);
}

void sub_19D7E7D1C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

AVAudioConnectionPoint *AVAudioEngineGraph::GetInputConnectionPointForNode(AVAudioEngineGraph *this, AVAudioNode *a2, uint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      int v22 = "AVAEInternal.h";
      __int16 v23 = 1024;
      int v24 = 71;
      __int16 v25 = 2080;
      long long v26 = "AVAudioEngineGraph.mm";
      __int16 v27 = 1024;
      int v28 = 3107;
      __int16 v29 = 2080;
      BOOL v30 = "GetInputConnectionPointForNode";
      __int16 v31 = 2080;
      int v32 = "nil != inAVNode";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nil != inAVNode");
  }
  unint64_t v7 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v7);
  uint64_t v8 = [(AVAudioNode *)a2 impl];
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      int v22 = "AVAEInternal.h";
      __int16 v23 = 1024;
      int v24 = 71;
      __int16 v25 = 2080;
      long long v26 = "AVAudioEngineGraph.mm";
      __int16 v27 = 1024;
      int v28 = 3112;
      __int16 v29 = 2080;
      BOOL v30 = "GetInputConnectionPointForNode";
      __int16 v31 = 2080;
      int v32 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inImpl)");
  }
  uint64_t v10 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(void *)v8 + 240))(v8, a3);
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)NodeFromMap + 112))(NodeFromMap))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    int v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      int v22 = "AVAEInternal.h";
      __int16 v23 = 1024;
      int v24 = 71;
      __int16 v25 = 2080;
      long long v26 = "AVAudioEngineGraph.mm";
      __int16 v27 = 1024;
      int v28 = 3120;
      __int16 v29 = 2080;
      BOOL v30 = "GetInputConnectionPointForNode";
      __int16 v31 = 2080;
      int v32 = "!graphNode->IsSplitterNode()";
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "!graphNode->IsSplitterNode()");
  }
  uint64_t v19 = 0;
  unsigned int v20 = -1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)NodeFromMap + 40))(NodeFromMap, 1, v10, &v19))
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v19 + 112))(v19))
    {
      uint64_t v14 = +[AVAudioConnectionPoint connectionPointWithNode:*(void *)(v19 + 16) bus:(*(uint64_t (**)(void, void))(**(void **)(v19 + 24) + 248))(*(void *)(v19 + 24), v20)];
LABEL_31:
      uint64_t v15 = v14;
      goto LABEL_32;
    }
    uint64_t v17 = 0;
    unsigned int v18 = -1;
    if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *))(*(void *)v19 + 40))(v19, 1, 0, &v17))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 112))(v17))
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        unint64_t v13 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316418;
          int v22 = "AVAEInternal.h";
          __int16 v23 = 1024;
          int v24 = 71;
          __int16 v25 = 2080;
          long long v26 = "AVAudioEngineGraph.mm";
          __int16 v27 = 1024;
          int v28 = 3129;
          __int16 v29 = 2080;
          BOOL v30 = "GetInputConnectionPointForNode";
          __int16 v31 = 2080;
          int v32 = "!splitterConnPoint.node->IsSplitterNode()";
          _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "!splitterConnPoint.node->IsSplitterNode()");
      }
      uint64_t v14 = +[AVAudioConnectionPoint connectionPointWithNode:*(void *)(v17 + 16) bus:(*(uint64_t (**)(void, void))(**(void **)(v17 + 24) + 248))(*(void *)(v17 + 24), v18)];
      goto LABEL_31;
    }
  }
  uint64_t v15 = 0;
LABEL_32:
  std::recursive_mutex::unlock(v7);
  return v15;
}

void sub_19D7E838C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::GetOutputConnectionPointsForNode(AVAudioEngineGraph *this, AVAudioNode *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v33 = "AVAEInternal.h";
      __int16 v34 = 1024;
      int v35 = 71;
      __int16 v36 = 2080;
      __int16 v37 = "AVAudioEngineGraph.mm";
      __int16 v38 = 1024;
      int v39 = 3145;
      __int16 v40 = 2080;
      unsigned int v41 = "GetOutputConnectionPointsForNode";
      __int16 v42 = 2080;
      uint64_t v43 = "nil != inAVNode";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nil != inAVNode");
  }
  unint64_t v7 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v7);
  uint64_t v8 = [(AVAudioNode *)a2 impl];
  if (!AVAudioEngineGraph::IsNodeInGraph(this, v8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v33 = "AVAEInternal.h";
      __int16 v34 = 1024;
      int v35 = 71;
      __int16 v36 = 2080;
      __int16 v37 = "AVAudioEngineGraph.mm";
      __int16 v38 = 1024;
      int v39 = 3150;
      __int16 v40 = 2080;
      unsigned int v41 = "GetOutputConnectionPointsForNode";
      __int16 v42 = 2080;
      uint64_t v43 = "IsNodeInGraph(inImpl)";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsNodeInGraph(inImpl)");
  }
  uint64_t v10 = (*(uint64_t (**)(AVAudioNodeImplBase *, uint64_t))(*(void *)v8 + 240))(v8, a3);
  uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap(this, v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)NodeFromMap + 112))(NodeFromMap))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    int v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v33 = "AVAEInternal.h";
      __int16 v34 = 1024;
      int v35 = 71;
      __int16 v36 = 2080;
      __int16 v37 = "AVAudioEngineGraph.mm";
      __int16 v38 = 1024;
      int v39 = 3158;
      __int16 v40 = 2080;
      unsigned int v41 = "GetOutputConnectionPointsForNode";
      __int16 v42 = 2080;
      uint64_t v43 = "!graphNode->IsSplitterNode()";
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "!graphNode->IsSplitterNode()");
  }
  BOOL v30 = 0;
  unsigned int v31 = -1;
  if (!(*(unsigned int (**)(uint64_t, void, uint64_t, void **))(*(void *)NodeFromMap + 40))(NodeFromMap, 0, v10, &v30))goto LABEL_53; {
  int v13 = (*(uint64_t (**)(void *))(*v30 + 112))(v30);
  }
  uint64_t v14 = v30;
  if (!v13)
  {
    uint64_t v21 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", v30[2], (*(uint64_t (**)(void, void))(*(void *)v30[3] + 248))(v30[3], v31)));
LABEL_40:
    uint64_t v22 = v21;
    goto LABEL_41;
  }
  uint64_t v15 = (void *)v30[9];
  uint64_t v16 = (void *)v30[10];
  if (v15 == v16) {
    goto LABEL_53;
  }
  unsigned int v17 = 0;
  do
  {
    if (*v15++) {
      ++v17;
    }
  }
  while (v15 != v16);
  if (v17 != 1)
  {
    if (v17 >= 2)
    {
      uint64_t v27 = (uint64_t)&v27;
      int v28 = &v27;
      uint64_t v29 = 0;
      AUGraphNodeBase::GetValidConnectionPoints(v30, &v27);
      id v23 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      for (uint64_t i = v28; i != &v27; uint64_t i = (uint64_t *)i[1])
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)i[2] + 112))(i[2]))
        {
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          __int16 v25 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            uint64_t v33 = "AVAEInternal.h";
            __int16 v34 = 1024;
            int v35 = 71;
            __int16 v36 = 2080;
            __int16 v37 = "AVAudioEngineGraph.mm";
            __int16 v38 = 1024;
            int v39 = 3188;
            __int16 v40 = 2080;
            unsigned int v41 = "GetOutputConnectionPointsForNode";
            __int16 v42 = 2080;
            uint64_t v43 = "!connPoint.node->IsSplitterNode()";
            _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "!connPoint.node->IsSplitterNode()");
        }
        objc_msgSend(v23, "addObject:", +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", *(void *)(i[2] + 16), (*(uint64_t (**)(void, void))(**(void **)(i[2] + 24) + 248))(*(void *)(i[2] + 24), *((unsigned int *)i + 6))));
      }
      uint64_t v22 = [MEMORY[0x1E4F1C978] arrayWithArray:v23];
      std::__list_imp<AUGraphConnection>::clear(&v27);
      goto LABEL_41;
    }
LABEL_53:
    uint64_t v22 = [MEMORY[0x1E4F1C978] array];
    goto LABEL_54;
  }
  if (AVAudioEngineLogCategory(void)::once != -1) {
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
  }
  uint64_t v19 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136316418;
    uint64_t v33 = "AVAEInternal.h";
    __int16 v34 = 1024;
    int v35 = 71;
    __int16 v36 = 2080;
    __int16 v37 = "AVAudioEngineGraph.mm";
    __int16 v38 = 1024;
    int v39 = 3168;
    __int16 v40 = 2080;
    unsigned int v41 = "GetOutputConnectionPointsForNode";
    __int16 v42 = 2080;
    uint64_t v43 = "numSplitterConnections == 0 || numSplitterConnections > 1";
    _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "numSplitterConnections == 0 || numSplitterConnections > 1");
  uint64_t v27 = 0;
  LODWORD(v28) = -1;
  if ((*(unsigned int (**)(void *, void, void, uint64_t *))(*v14 + 40))(v14, 0, 0, &v27))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 112))(v27))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      unsigned int v20 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        uint64_t v33 = "AVAEInternal.h";
        __int16 v34 = 1024;
        int v35 = 71;
        __int16 v36 = 2080;
        __int16 v37 = "AVAudioEngineGraph.mm";
        __int16 v38 = 1024;
        int v39 = 3175;
        __int16 v40 = 2080;
        unsigned int v41 = "GetOutputConnectionPointsForNode";
        __int16 v42 = 2080;
        uint64_t v43 = "!splitterConnPoint.node->IsSplitterNode()";
        _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "!splitterConnPoint.node->IsSplitterNode()");
    }
    uint64_t v21 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObject:", +[AVAudioConnectionPoint connectionPointWithNode:bus:](AVAudioConnectionPoint, "connectionPointWithNode:bus:", *(void *)(v27 + 16), (*(uint64_t (**)(void, void))(**(void **)(v27 + 24) + 248))(*(void *)(v27 + 24), v28)));
    goto LABEL_40;
  }
  uint64_t v22 = 0;
LABEL_41:
  if (!v22) {
    goto LABEL_53;
  }
LABEL_54:
  std::recursive_mutex::unlock(v7);
  return v22;
}

void sub_19D7E8D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__list_imp<AUGraphConnection>::clear((uint64_t *)va);
  std::recursive_mutex::unlock(v6);
  _Unwind_Resume(a1);
}

void *AVAudioEngineGraph::ConnAsString(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)__str = 0u;
  int v6 = *(_DWORD *)(a3 + 8);
  uint64_t v7 = *(void *)a3;
  if (AVAudioEngineGraph::IsNodeInGraph(a2, *(void *)a3)) {
    uint64_t v8 = *(const void **)(v7 + 24);
  }
  else {
    uint64_t v8 = 0;
  }
  if (AVAudioEngineGraph::IsNodeInGraph(a2, v7))
  {
    AUGraphNodeBase::DescAsString((AUGraphNodeBase *)__p, *(void *)(v7 + 24));
    if (v19 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    int v10 = snprintf(__str, 0x100uLL, "(bus%d) %p, {%s} -> ", v6, v8, (const char *)v9);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    int v10 = snprintf(__str, 0x100uLL, "(bus%d) %p, {%s} -> ", v6, v8, "");
  }
  uint64_t v11 = &__str[v10];
  size_t v12 = 256 - v10;
  int v13 = *(_DWORD *)(a3 + 24);
  uint64_t v14 = *(void *)(a3 + 16);
  if (AVAudioEngineGraph::IsNodeInGraph(a2, v14)) {
    uint64_t v15 = *(const void **)(v14 + 24);
  }
  else {
    uint64_t v15 = 0;
  }
  if (AVAudioEngineGraph::IsNodeInGraph(a2, v14))
  {
    AUGraphNodeBase::DescAsString((AUGraphNodeBase *)__p, *(void *)(v14 + 24));
    if (v19 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    snprintf(v11, v12, "(bus%d) %p, {%s}", v13, v15, (const char *)v16);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    snprintf(v11, v12, "(bus%d) %p, {%s}", v13, v15, "");
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

uint64_t std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *this, const char *a3)
{
  uint64_t v5 = (void *)*((void *)this + 6);
  int v6 = (void *)*((void *)this + 7);
  if (v5 != v6)
  {
    int v7 = 0;
    do
    {
      if (*v5++) {
        ++v7;
      }
    }
    while (v5 != v6);
    if (v7) {
      goto LABEL_13;
    }
  }
  uint64_t v9 = (void *)*((void *)this + 9);
  int v10 = (void *)*((void *)this + 10);
  if (v9 != v10)
  {
    int v11 = 0;
    do
    {
      if (*v9++) {
        ++v11;
      }
    }
    while (v9 != v10);
    if (v11) {
LABEL_13:
    }
      AUGraphNodeBase::PrintNodeObject(this, **(__sFILE ***)(a1 + 8), a3);
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v14 = (void *)(v13 + 8);
  uint64_t v15 = v16;
  if (v16)
  {
    unint64_t v17 = *((void *)this + 3);
    unsigned int v18 = v14;
    do
    {
      unint64_t v19 = v15[4];
      BOOL v20 = v19 >= v17;
      if (v19 >= v17) {
        long long v21 = v15;
      }
      else {
        long long v21 = v15 + 1;
      }
      if (v20) {
        unsigned int v18 = v15;
      }
      uint64_t v15 = (void *)*v21;
    }
    while (*v21);
    if (v18 != v14 && v17 >= v18[4]) {
      std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(*(uint64_t ***)(a1 + 16), v17);
    }
  }
  return 0;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3768;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3768;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_3>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *this, const char *a3)
{
  uint64_t v5 = (void *)*((void *)this + 6);
  int v6 = (void *)*((void *)this + 7);
  if (v5 != v6)
  {
    int v7 = 0;
    do
    {
      if (*v5++) {
        ++v7;
      }
    }
    while (v5 != v6);
    if (v7) {
      goto LABEL_13;
    }
  }
  uint64_t v9 = (void *)*((void *)this + 9);
  int v10 = (void *)*((void *)this + 10);
  if (v9 != v10)
  {
    int v11 = 0;
    do
    {
      if (*v9++) {
        ++v11;
      }
    }
    while (v9 != v10);
    if (v11) {
LABEL_13:
    }
      AUGraphNodeBase::PrintNodeObject(this, **(__sFILE ***)(a1 + 8), a3);
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v14 = (void *)(v13 + 8);
  uint64_t v15 = v16;
  if (v16)
  {
    unint64_t v17 = *((void *)this + 3);
    unsigned int v18 = v14;
    do
    {
      unint64_t v19 = v15[4];
      BOOL v20 = v19 >= v17;
      if (v19 >= v17) {
        long long v21 = v15;
      }
      else {
        long long v21 = v15 + 1;
      }
      if (v20) {
        unsigned int v18 = v15;
      }
      uint64_t v15 = (void *)*v21;
    }
    while (*v21);
    if (v18 != v14 && v17 >= v18[4]) {
      std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(*(uint64_t ***)(a1 + 16), v17);
    }
  }
  return 0;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3720;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3720;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_2>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *this, const char *a3)
{
  if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    AUGraphNodeBase::PrintNodeObject(this, **(__sFILE ***)(a1 + 8), a3);
    *((_DWORD *)this + 8) |= 8u;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(*(uint64_t ***)(a1 + 16), *((void *)this + 3));
  }
  return 0;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA36D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA36D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_1>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, AUGraphNodeBase *this, const char *a3)
{
  if ((*((unsigned char *)this + 32) & 0x10) == 0)
  {
    AUGraphNodeBase::PrintNodeObject(this, **(__sFILE ***)(a1 + 8), a3);
    *((_DWORD *)this + 8) |= 0x10u;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__erase_unique<AVAudioNodeImplBase *>(*(uint64_t ***)(a1 + 16), *((void *)this + 3));
  }
  return 0;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3690;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3690;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0,std::allocator<AVAudioEngineGraph::PrintObject(__sFILE *,char const*)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

const char *CAMemoryStream::Write(CAMemoryStream *this, void *a2, const char *a3)
{
  uint64_t v3 = a3;
  if ((int)a3 >= 1)
  {
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = v6 + a3;
    if ((unint64_t)(v7 + 1) <= *((void *)this + 3))
    {
      uint64_t v8 = (char *)*((void *)this + 1);
    }
    else
    {
      uint64_t v8 = (char *)malloc_type_realloc(*((void **)this + 1), (v7 & 0xFFFFFFFFFFFFFF80) + 128, 0xB69AE6F0uLL);
      if (!v8)
      {
        fwrite("realloc failed", 0xEuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
        return (const char *)0xFFFFFFFFLL;
      }
      *((void *)this + 1) = v8;
      *((void *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = (v7 & 0xFFFFFFFFFFFFFF80) + 128;
      uint64_t v6 = *((void *)this + 2);
    }
    memcpy(&v8[v6], a2, v3);
    *((void *)this + 2) = v7;
  }
  return v3;
}

uint64_t AVAudioEngineGraph::SetManualRenderingMode(AVAudioEngineGraph *this, int a2, AVAudioEngineManualRenderingMode a3, NSError **a4)
{
  uint64_t v8 = (std::recursive_mutex *)(*(void *)this + 112);
  std::recursive_mutex::lock(v8);
  if ((((*((unsigned char *)this + 187) != 0) ^ a2) & 1) != 0 || *((void *)this + 24) != a3)
  {
    if (*((unsigned char *)this + 185))
    {
      if (!a4)
      {
        uint64_t v10 = 0;
        goto LABEL_14;
      }
      uint64_t v9 = (NSError *)[MEMORY[0x1E4F28C58] errorWithDomain:@"com.apple.coreaudio.avfaudio" code:-80801 userInfo:0];
      uint64_t v10 = 0;
      goto LABEL_12;
    }
    *((unsigned char *)this + 187) = a2;
    if (a2) {
      AVAudioEngineManualRenderingMode v11 = a3;
    }
    else {
      AVAudioEngineManualRenderingMode v11 = AVAudioEngineManualRenderingModeRealtime;
    }
    *((void *)this + 24) = v11;
  }
  uint64_t v10 = 1;
  if (a4)
  {
    uint64_t v9 = 0;
LABEL_12:
    *a4 = v9;
  }
LABEL_14:
  std::recursive_mutex::unlock(v8);
  return v10;
}

void sub_19D7E95EC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEngineGraph::RenderToABL(AVAudioNodeImplBase **this, uint64_t a2, AudioBufferList *a3, int *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v8 = -80802;
  if (*((unsigned char *)this + 187))
  {
    if (*((unsigned char *)this + 184))
    {
      uint64_t NodeFromMap = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[3]);
      if (!NodeFromMap)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316418;
          unsigned int v18 = "AVAEInternal.h";
          __int16 v19 = 1024;
          int v20 = 71;
          __int16 v21 = 2080;
          long long v22 = "AVAudioEngineGraph.mm";
          __int16 v23 = 1024;
          int v24 = 3565;
          __int16 v25 = 2080;
          long long v26 = "RenderToABL";
          __int16 v27 = 2080;
          long long v28 = "outputNode";
          _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "outputNode");
      }
      int v8 = (*(uint64_t (**)(uint64_t, uint64_t, AudioBufferList *, AVAudioNodeImplBase *))(*(void *)NodeFromMap
                                                                                                 + 168))(NodeFromMap, a2, a3, this[25]);
    }
    if (a4) {
      goto LABEL_11;
    }
  }
  else
  {
    int v8 = -80800;
    if (a4) {
LABEL_11:
    }
      *a4 = v8;
  }
  if (v8)
  {
    uint64_t result = -1;
  }
  else
  {
    uint64_t result = AVAudioEngineGraph::GetNodeFromMap((AVAudioEngineGraph *)this, this[2]);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 176))(result);
    }
  }
  if (a3)
  {
    uint64_t mNumberBuffers = a3->mNumberBuffers;
    if (mNumberBuffers)
    {
      if (v8
        || result == 1
        && (uint64_t v14 = this[8], v14 - this[7] == 8)
        && (uint64_t v15 = *((void *)v14 - 1)) != 0
        && (uint64_t v16 = this[2]) != 0
        && *(AVAudioNodeImplBase **)(v15 + 24) == v16)
      {
        p_mDataByteSize = &a3->mBuffers[0].mDataByteSize;
        do
        {
          UInt32 *p_mDataByteSize = 0;
          p_mDataByteSize += 4;
          --mNumberBuffers;
        }
        while (mNumberBuffers);
      }
      else if (a3->mBuffers[0].mDataByteSize)
      {
        this[25] = (AVAudioNodeImplBase *)((char *)this[25] + a2);
      }
    }
  }
  return result;
}

BOOL std::__function::__func<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0,std::allocator<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::operator()(uint64_t a1, void *a2)
{
  unsigned int v4 = (*(uint64_t (**)(void *))(*a2 + 368))(a2);
  if (v4)
  {
    uint64_t v5 = a2[2];
    uint64_t v6 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v6 + 16))
    {
      *(_DWORD *)uint64_t v6 = v4;
      *(void *)(v6 + 8) = v5;
    }
    else
    {
      *(void *)uint64_t v6 = v4;
      *(void *)(v6 + 8) = v5;
      *(unsigned char *)(v6 + 16) = 1;
    }
  }
  return v4 != 0;
}

uint64_t std::__function::__func<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0,std::allocator<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA37B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0,std::allocator<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA37B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0,std::allocator<AVAudioEngineGraph::LastRenderErrorInChain(AVAudioNodeImplBase *)::$_0>,ETraversalStatus ()(AUGraphNodeBaseV3 &,AUGraphConnection *)>::~__func()
{
}

uint64_t AVAudioEnvironmentNodeImpl::SetManualRenderingMode(AVAudioEnvironmentNodeImpl *this, unsigned int a2, AVAudioEngineManualRenderingMode a3)
{
  BOOL v4 = *((unsigned char *)this + 72) != 0;
  *((unsigned char *)this + 72) = a2;
  if (a2) {
    AVAudioEngineManualRenderingMode v5 = a3;
  }
  else {
    AVAudioEngineManualRenderingMode v5 = AVAudioEngineManualRenderingModeRealtime;
  }
  *((void *)this + 10) = v5;
  if (a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = a2;
  }
  uint64_t v7 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *))(*(void *)this + 40))(this);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 184))(v7, v6);
  *((unsigned char *)this + 49) = v6;
  if (v4 != (*((unsigned char *)this + 72) != 0) && !*((void *)this + 24))
  {
    return AVAudioEnvironmentNodeImpl::UpdateAutomaticOutputType(this);
  }
  return result;
}

uint64_t AVAudioEnvironmentNodeImpl::UpdateAutomaticOutputType(AVAudioEnvironmentNodeImpl *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 24)) {
    return 1;
  }
  int v12 = 3;
  if (!*((unsigned char *)this + 72) && !*((unsigned char *)this + 49))
  {
    AVAudioEngineManualRenderingMode v5 = (void *)[MEMORY[0x1E4F4E9F8] sharedInstance];
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "currentRoute"), "outputs"), "count") == 1)
    {
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "currentRoute"), "outputs"), "firstObject"), "isHeadphones"))
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315394;
          uint64_t v14 = "AVAudioEnvironmentNodeImpl.mm";
          __int16 v15 = 1024;
          int v16 = 447;
          _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting output type = headphones", buf, 0x12u);
        }
        int v3 = 1;
        goto LABEL_32;
      }
      uint64_t v9 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "currentRoute"), "outputs"), "firstObject"), "portType");
      int v10 = [v9 isEqualToString:*MEMORY[0x1E4F4E968]];
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      BOOL v11 = os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG);
      if (v10)
      {
        if (v11)
        {
          *(_DWORD *)int buf = 136315394;
          uint64_t v14 = "AVAudioEnvironmentNodeImpl.mm";
          __int16 v15 = 1024;
          int v16 = 459;
          int v3 = 2;
          _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting output type = built-in speakers", buf, 0x12u);
        }
        else
        {
          int v3 = 2;
        }
        goto LABEL_32;
      }
      if (!v11)
      {
LABEL_31:
        int v3 = 3;
LABEL_32:
        int v12 = v3;
        goto LABEL_9;
      }
      *(_DWORD *)int buf = 136315394;
      uint64_t v14 = "AVAudioEnvironmentNodeImpl.mm";
      __int16 v15 = 1024;
      int v16 = 462;
      int v8 = "%25s:%-5d setting output type = external speakers";
    }
    else
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (!os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_31;
      }
      *(_DWORD *)int buf = 136315394;
      uint64_t v14 = "AVAudioEnvironmentNodeImpl.mm";
      __int16 v15 = 1024;
      int v16 = 465;
      int v8 = "%25s:%-5d multiple outputs active, setting output type = external speakers";
    }
    _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, v8, buf, 0x12u);
    goto LABEL_31;
  }
  if (AVAudioEngineLogCategory(void)::once != -1) {
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
  }
  uint64_t v2 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v14 = "AVAudioEnvironmentNodeImpl.mm";
    __int16 v15 = 1024;
    int v16 = 561;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d manual rendering mode, setting output type = external speakers", buf, 0x12u);
  }
  int v3 = 3;
LABEL_9:
  if (v3 == *((_DWORD *)this + 50)) {
    return 1;
  }
  *((_DWORD *)this + 50) = v3;
  return (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *, uint64_t, void, void, int *, uint64_t))(*(void *)this + 144))(this, 3100, 0, 0, &v12, 4);
}

void AVAudioEnvironmentNodeImpl::~AVAudioEnvironmentNodeImpl(AVAudioEnvironmentNodeImpl *this)
{
  AVAudioEnvironmentNodeImpl::~AVAudioEnvironmentNodeImpl(this);

  JUMPOUT(0x19F3ABB30);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EEFA6C18;
  if (*((void *)this + 28))
  {
    if (*((unsigned char *)this + 256))
    {
      MEMORY[0x19F3AB850]((char *)this + 240);
      *((unsigned char *)this + 256) = 0;
    }
    caulk::semaphore::semaphore((AVAudioEnvironmentNodeImpl *)((char *)this + 240));
    *((unsigned char *)this + 256) = 1;
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 29);
    *((void *)this + 28) = 0;
    *((void *)this + 29) = 0;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    caulk::semaphore::timed_wait((AVAudioEnvironmentNodeImpl *)((char *)this + 240), -1.0);
    __dmb(9u);
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28EB8], "defaultCenter"), "removeObserver:", *((void *)this + 26));

  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*((void **)this + 40));
  caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::~lifetime_guard_base((uint64_t)this + 216);

  AVAudioUnitImpl::~AVAudioUnitImpl((id *)this);
}

uint64_t caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::~lifetime_guard_base(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)) {
      MEMORY[0x19F3AB850](a1 + 24);
    }
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    return a1;
  }
  return result;
}

void ___ZN26AVAudioEnvironmentNodeImplC2Ev_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      BOOL v4 = v3;
      AVAudioEngineManualRenderingMode v5 = *(AVAudioEnvironmentNodeImpl **)(a1 + 32);
      if (v5)
      {
        AVAudioNodeImplBase::GetAttachAndEngineLock((AVAudioNodeImplBase *)&v6, (uint64_t)v5);
        AVAudioEnvironmentNodeImpl::UpdateAutomaticOutputType(v5);
        if (v9) {
          std::recursive_mutex::unlock(v8);
        }
        if (v7) {
          std::recursive_mutex::unlock(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_19D7EA084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t AVAudioEnvironmentNodeImpl::SetMixerDistanceParameters(AVAudioEnvironmentNodeImpl *this)
{
  float v2 = *((float *)this + 87);
  float v3 = *((float *)this + 88);
  float v13 = v3;
  float v14 = v2;
  AVAudioEnvironmentNodeImpl::GetMaxAttenuation(this);
  int v15 = v4;
  if (*((_DWORD *)this + 86) == 3)
  {
    float v5 = *((float *)this + 89);
    if (v5 > 1.0 && (float)(v2 - v3) > 0.001) {
      float v14 = v3 + (float)((float)(v2 - v3) / v5);
    }
  }
  uint64_t v6 = (AVAudioEnvironmentNodeImpl *)*((void *)this + 39);
  uint64_t v7 = 1;
  if (v6 != (AVAudioEnvironmentNodeImpl *)((char *)this + 320))
  {
    do
    {
      int v8 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *, uint64_t, uint64_t, void, float *, uint64_t))(*(void *)this + 144))(this, 3010, 1, *((unsigned int *)v6 + 10), &v13, 12);
      char v9 = (AVAudioEnvironmentNodeImpl *)*((void *)v6 + 1);
      if (v9)
      {
        do
        {
          int v10 = v9;
          char v9 = *(AVAudioEnvironmentNodeImpl **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (AVAudioEnvironmentNodeImpl *)*((void *)v6 + 2);
          BOOL v11 = *(void *)v10 == (void)v6;
          uint64_t v6 = v10;
        }
        while (!v11);
      }
      uint64_t v7 = v7 & v8;
      uint64_t v6 = v10;
    }
    while (v10 != (AVAudioEnvironmentNodeImpl *)((char *)this + 320));
  }
  return v7;
}

void AVAudioEnvironmentNodeImpl::GetMaxAttenuation(AVAudioEnvironmentNodeImpl *this)
{
  float v1 = *((float *)this + 87);
  float v2 = *((float *)this + 88);
  if ((float)(v1 - v2) > 0.001)
  {
    int v3 = *((_DWORD *)this + 86);
    if (v3 == 3)
    {
      float v4 = 1.0 - *((float *)this + 89);
      if (v4 < 1.0e-10) {
        float v4 = 1.0e-10;
      }
      log10f(v4);
    }
    else if (v3 == 2)
    {
      if (v2 > 0.001) {
        log10f((float)((float)((float)(v1 - v2) * *((float *)this + 89)) / v2) + 1.0);
      }
    }
    else if (v3 == 1 && v2 > 0.001)
    {
      log10f(v1 / v2);
    }
  }
}

void __destroy_helper_block_e8_32c68_ZTSN5caulk14lifetime_guardI26AVAudioEnvironmentNodeImplvE8weak_refE(uint64_t a1)
{
  float v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_e8_32c68_ZTSN5caulk14lifetime_guardI26AVAudioEnvironmentNodeImplvE8weak_refE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL EnvironmentReverbFilterParameters::GetBypass(EnvironmentReverbFilterParameters *this)
{
  float v2 = 0.0;
  (*(void (**)(void, uint64_t, void, void, float *))(**((void **)this + 2) + 136))(*((void *)this + 2), 18, 0, 0, &v2);
  return v2 == 0.0;
}

float EnvironmentReverbFilterParameters::GetGain(EnvironmentReverbFilterParameters *this)
{
  return *(float *)(*((void *)this + 2) + 384);
}

float EnvironmentReverbFilterParameters::GetBandwidth(EnvironmentReverbFilterParameters *this)
{
  return *(float *)(*((void *)this + 2) + 388);
}

float EnvironmentReverbFilterParameters::GetFrequency(EnvironmentReverbFilterParameters *this)
{
  return *(float *)(*((void *)this + 2) + 392);
}

uint64_t EnvironmentReverbFilterParameters::GetFilterType(EnvironmentReverbFilterParameters *this)
{
  float v2 = 0.0;
  (*(void (**)(void, uint64_t, void, void, float *))(**((void **)this + 2) + 136))(*((void *)this + 2), 17, 0, 0, &v2);
  return (uint64_t)v2;
}

uint64_t EnvironmentReverbFilterParameters::SetBypass(EnvironmentReverbFilterParameters *this, int a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, void, float))(**((void **)this + 2) + 128))(*((void *)this + 2), 18, 0, 0, (float)(a2 ^ 1u));
}

uint64_t EnvironmentReverbFilterParameters::SetGain(EnvironmentReverbFilterParameters *this, float a2)
{
  float v2 = (float *)*((void *)this + 2);
  if (v2[96] == a2) {
    return 1;
  }
  float v3 = 24.0;
  if (a2 < 24.0) {
    float v3 = a2;
  }
  if (a2 <= -96.0) {
    float v4 = -96.0;
  }
  else {
    float v4 = v3;
  }
  v2[96] = v4;
  return (*(uint64_t (**)(float *, uint64_t, void, void))(*(void *)v2 + 128))(v2, 16, 0, 0);
}

uint64_t EnvironmentReverbFilterParameters::SetBandwidth(EnvironmentReverbFilterParameters *this, float a2)
{
  float v2 = (float *)*((void *)this + 2);
  if (v2[97] == a2) {
    return 1;
  }
  float v3 = 5.0;
  if (a2 < 5.0) {
    float v3 = a2;
  }
  if (a2 <= 0.05) {
    float v4 = 0.05;
  }
  else {
    float v4 = v3;
  }
  v2[97] = v4;
  return (*(uint64_t (**)(float *, uint64_t, void, void))(*(void *)v2 + 128))(v2, 15, 0, 0);
}

uint64_t EnvironmentReverbFilterParameters::SetFrequency(EnvironmentReverbFilterParameters *this, float a2)
{
  float v2 = (float *)*((void *)this + 2);
  if (v2[98] == a2) {
    return 1;
  }
  float v3 = 20000.0;
  if (a2 < 20000.0) {
    float v3 = a2;
  }
  if (a2 <= 10.0) {
    float v4 = 10.0;
  }
  else {
    float v4 = v3;
  }
  v2[98] = v4;
  return (*(uint64_t (**)(float *, uint64_t, void, void))(*(void *)v2 + 128))(v2, 14, 0, 0);
}

uint64_t EnvironmentReverbFilterParameters::SetFilterType(EnvironmentReverbFilterParameters *this, AVAudioUnitEQFilterType a2)
{
  return (*(uint64_t (**)(void, uint64_t, void, void, float))(**((void **)this + 2) + 128))(*((void *)this + 2), 17, 0, 0, (float)a2);
}

void EnvironmentReverbFilterParameters::~EnvironmentReverbFilterParameters(EnvironmentReverbFilterParameters *this)
{
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block,std::allocator<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block>>::__on_zero_shared(uint64_t a1)
{
  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(void *)(a1 + 40) + 24));
  float v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block,std::allocator<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA8EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::__shared_ptr_emplace<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block,std::allocator<caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::control_block>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA8EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AVAudioEnvironmentNodeImpl::ResetRenderingFlags(AVAudioEnvironmentNodeImpl *this)
{
  int v10 = 4;
  float v1 = (char *)*((void *)this + 39);
  float v2 = (char *)this + 320;
  if (v1 == (char *)this + 320) {
    return 1;
  }
  LODWORD(v4) = 1;
  do
  {
    int v5 = (*(uint64_t (**)(AVAudioEnvironmentNodeImpl *, uint64_t, uint64_t, void, int *, uint64_t))(*(void *)this + 144))(this, 3003, 1, *((unsigned int *)v1 + 10), &v10, 4);
    uint64_t v6 = (char *)*((void *)v1 + 1);
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = *(char **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v1 + 2);
        BOOL v8 = *(void *)v7 == (void)v1;
        float v1 = v7;
      }
      while (!v8);
    }
    uint64_t v4 = v4 & v5;
    float v1 = v7;
  }
  while (v7 != v2);
  return v4;
}

float RotateVectorByEulerAngles(float a1, float a2, float a3, AVAudio3DPoint *a4)
{
  __float2 v7 = __sincosf_stret((float)(a2 * 0.017453) * 0.5);
  __float2 v8 = __sincosf_stret((float)(a1 * 0.017453) * 0.5);
  __float2 v9 = __sincosf_stret((float)(a3 * 0.017453) * 0.5);
  float v10 = (float)(v9.__sinval * (float)(v8.__cosval * v7.__cosval))
      - (float)(v9.__cosval * (float)(v8.__sinval * v7.__sinval));
  float v11 = (float)(v8.__sinval * (float)(v7.__cosval * v9.__sinval))
      + (float)((float)(v7.__sinval * v9.__cosval) * v8.__cosval);
  float v12 = (float)(v8.__cosval * (float)-(float)(v9.__sinval * v7.__sinval))
      + (float)((float)(v7.__cosval * v9.__cosval) * v8.__sinval);
  float v13 = (float)(v9.__sinval * (float)(v8.__sinval * v7.__sinval))
      + (float)(v9.__cosval * (float)(v8.__cosval * v7.__cosval));
  float v14 = -v12;
  float v15 = -v10;
  float v16 = sqrtf((float)((float)((float)(v11 * v11) + (float)(v13 * v13)) + (float)(v12 * v12)) + (float)(v10 * v10));
  if (v16 == 0.0)
  {
    float v18 = (float)(v9.__sinval * (float)(v8.__sinval * v7.__sinval))
        + (float)(v9.__cosval * (float)(v8.__cosval * v7.__cosval));
  }
  else
  {
    float v17 = 1.0 / v16;
    float v18 = v13 * (float)(1.0 / v16);
    float v11 = v11 * v17;
    float v14 = v17 * v14;
    float v15 = v17 * v15;
  }
  float y = a4->y;
  float z = a4->z;
  float v21 = (float)((float)((float)(v18 * 0.0) - (float)(v11 * a4->x)) - (float)(v14 * y)) - (float)(v15 * z);
  float v22 = (float)((float)((float)(v11 * 0.0) + (float)(v18 * a4->x)) + (float)(v14 * z)) - (float)(v15 * y);
  float v23 = (float)((float)((float)(v18 * y) - (float)(v11 * z)) + (float)(v14 * 0.0)) + (float)(v15 * a4->x);
  float v24 = (float)((float)((float)(v11 * y) + (float)(v18 * z)) - (float)(v14 * a4->x)) + (float)(v15 * 0.0);
  float v25 = (float)((float)((float)(v13 * v22) - (float)(v21 * v11)) - (float)(v23 * v15)) + (float)(v24 * v14);
  float v26 = (float)((float)((float)(v15 * v22) - (float)(v21 * v14)) + (float)(v23 * v13)) - (float)(v24 * v11);
  float result = (float)((float)((float)-(float)(v14 * v22) - (float)(v21 * v15)) + (float)(v23 * v11)) + (float)(v24 * v13);
  a4->x = v25;
  a4->float y = v26;
  a4->float z = result;
  return result;
}

void sub_19D7EAA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EAD0C(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_19D7EAEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7EB034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EB144(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19D7EB204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7EB468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  float v10 = v9;

  a9.super_class = (Class)AVAudioDeviceTest;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19D7EB518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7EB6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z26AVAudioDeviceTestClientLogv_block_invoke()
{
}

void sub_19D7EB928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EBB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EBCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EC07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EC228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EC3C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EC760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7ECC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7ECF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19D7ED1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19D7ED410(_Unwind_Exception *a1)
{
  float v3 = v2;

  _Unwind_Resume(a1);
}

void sub_19D7EDBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EE040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7EE180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVAudioConverterImpl::FillComplexProc(AVAudioConverterImpl *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  if (!*((unsigned char *)a5 + 64))
  {
    __float2 v9 = a5[6];
    if (v9) {

    }
    a5[6] = (AudioStreamPacketDescription *)((uint64_t (*)(void))a5[7][1].mStartOffset)();
    *((unsigned char *)a5 + 64) = 1;
    a5[6] = 0;
  }
  *(_DWORD *)a2 = 0;
  return 0;
}

uint64_t AVAudioConverterImpl::getInt32List(AudioConverterRef *this, AudioConverterPropertyID a2, int a3)
{
  UInt32 outSize = 0;
  Boolean outWritable = 0;
  if (AudioConverterGetPropertyInfo(*this, a2, &outSize, &outWritable)) {
    return 0;
  }
  uint64_t v6 = (unsigned int *)malloc_type_calloc(1uLL, outSize, 0xB0FF10F4uLL);
  if (AudioConverterGetProperty(*this, a2, &outSize, v6))
  {
    free(v6);
    return 0;
  }
  UInt32 v9 = outSize >> 2;
  LODWORD(v28) = outSize >> 2;
  HIDWORD(v28) = outSize;
  float v10 = 0;
  if (outSize >= 4)
  {
    float v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    if (v9 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v9;
    }
    do
    {
      if (a3) {
        uint64_t v16 = v6[v14];
      }
      else {
        uint64_t v16 = (int)v6[v14];
      }
      uint64_t v17 = objc_msgSend(NSNumber, "numberWithInteger:", v16, v28);
      uint64_t v18 = v17;
      if ((unint64_t)v12 >= v13)
      {
        uint64_t v19 = v12 - v10;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v13 - (void)v10) >> 2 > v20) {
          unint64_t v20 = (uint64_t)(v13 - (void)v10) >> 2;
        }
        if (v13 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        float v23 = (uint64_t *)(v21 + 8 * v19);
        *float v23 = v18;
        float v11 = v23 + 1;
        while (v12 != v10)
        {
          uint64_t v24 = *--v12;
          *--float v23 = v24;
        }
        unint64_t v13 = v21 + 8 * v22;
        if (v10) {
          operator delete(v10);
        }
        float v10 = v23;
      }
      else
      {
        *float v12 = v17;
        float v11 = v12 + 1;
      }
      ++v14;
      float v12 = v11;
    }
    while (v14 != v15);
  }
  else
  {
    float v11 = 0;
  }
  free(v6);
  uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v10 count:v11 - v10];
  if (HIDWORD(v28) >= 4)
  {
    unint64_t v25 = 0;
    unsigned int v26 = v28;
    if (v28 <= 1) {
      unsigned int v26 = 1;
    }
    uint64_t v27 = 8 * v26;
    do
    {

      v25 += 8;
    }
    while (v27 != v25);
  }
  else if (!v10)
  {
    return v7;
  }
  operator delete(v10);
  return v7;
}

void sub_19D7EF09C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7EF784(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10A0C40A8DF87D0);
  _Unwind_Resume(a1);
}

uint64_t AVAudioConverterImpl::getRateList(AudioConverterRef *this, AudioConverterPropertyID a2, int a3)
{
  UInt32 outSize = 0;
  Boolean outWritable = 0;
  if (AudioConverterGetPropertyInfo(*this, a2, &outSize, &outWritable)) {
    return 0;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, outSize, 0x88D87671uLL);
  if (AudioConverterGetProperty(*this, a2, &outSize, v6))
  {
    free(v6);
    return 0;
  }
  UInt32 v9 = outSize >> 4;
  UInt32 v28 = outSize >> 4;
  UInt32 v29 = outSize;
  float v10 = 0;
  if (outSize >= 0x10)
  {
    float v12 = 0;
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    if (v9 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v9;
    }
    do
    {
      double v16 = *((double *)v6 + 2 * v14);
      if (a3) {
        uint64_t v17 = [NSNumber numberWithDouble:v16];
      }
      else {
        uint64_t v17 = [NSNumber numberWithInteger:(uint64_t)v16];
      }
      uint64_t v18 = v17;
      if ((unint64_t)v12 >= v13)
      {
        uint64_t v19 = v12 - v10;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61) {
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v13 - (void)v10) >> 2 > v20) {
          unint64_t v20 = (uint64_t)(v13 - (void)v10) >> 2;
        }
        if (v13 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        float v23 = (uint64_t *)(v21 + 8 * v19);
        *float v23 = v18;
        float v11 = v23 + 1;
        while (v12 != v10)
        {
          uint64_t v24 = *--v12;
          *--float v23 = v24;
        }
        unint64_t v13 = v21 + 8 * v22;
        if (v10) {
          operator delete(v10);
        }
        float v10 = v23;
      }
      else
      {
        *float v12 = v17;
        float v11 = v12 + 1;
      }
      ++v14;
      float v12 = v11;
    }
    while (v14 != v15);
  }
  else
  {
    float v11 = 0;
  }
  free(v6);
  uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v10 count:v11 - v10];
  if (v29 >= 0x10)
  {
    unint64_t v25 = 0;
    unsigned int v26 = v28;
    if (v28 <= 1) {
      unsigned int v26 = 1;
    }
    uint64_t v27 = 8 * v26;
    do
    {

      v25 += 8;
    }
    while (v27 != v25);
  }
  else if (!v10)
  {
    return v7;
  }
  operator delete(v10);
  return v7;
}

void sub_19D7EF9EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void CACFDictionary::AddBool(__CFDictionary **this, const __CFString *key)
{
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t v7 = v4;
  char v8 = 1;
  if (v4) {
    CFRetain(v4);
  }
  if (*((unsigned char *)this + 9))
  {
    int v5 = *this;
    if (v4) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      CFDictionarySetValue(v5, key, v4);
    }
  }
  CACFBoolean::~CACFBoolean((CACFBoolean *)&v7);
}

void sub_19D7EFC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CACFBoolean::~CACFBoolean(CACFBoolean *this)
{
  if (*((unsigned char *)this + 8))
  {
    float v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void CACFNumber::~CACFNumber(CACFNumber *this)
{
  if (*((unsigned char *)this + 8))
  {
    float v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void CACFDictionary::AddUInt32(CFMutableDictionaryRef *this, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v6 = v5;
  char v7 = 1;
  if (*((unsigned char *)this + 9) && v5 && *this) {
    CFDictionarySetValue(*this, a2, v5);
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v6);
}

void sub_19D7EFD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void CACFDictionary::AddFloat32(CFMutableDictionaryRef *this, const __CFString *a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v6 = v5;
  char v7 = 1;
  if (*((unsigned char *)this + 9) && v5 && *this) {
    CFDictionarySetValue(*this, a2, v5);
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v6);
}

void sub_19D7EFE00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void sub_19D7EFFFC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19D7F0118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7F02A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7F04F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7F074C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z37AudioDataAnalysisManagerLibraryLoaderv_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0) {
    goto LABEL_5;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    float v3 = dlerror();
    _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
  uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v0)
  {
LABEL_5:
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerCreate");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioDataAnalysisManagerDispose");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerReset");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerUpdateReportingSessions");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerCreateNodePCM");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRemoveNode");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerInitialize");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerIsSessionInitialized");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = dlsym(v0, "AudioDataAnalysisManagerProcessAudio");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSPL");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerProcessEnvSoundClass");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerRegisterDeviceInfo");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetDeviceConnectionState");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerStartServices");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    AudioDataAnalysisManagerLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v1 = dlerror();
    int v2 = 136315138;
    float v3 = v1;
    _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v2, 0xCu);
  }
}

void sub_19D7F1000(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Block_object_dispose((const void *)(v2 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19D7F13DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFNumberRef v5 = result;
    if (a4 >> 61) {
      std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
    }
    float result = operator new(8 * a4);
    char v8 = result;
    *CFNumberRef v5 = result;
    v5[1] = result;
    v5[2] = &result[a4];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      float result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_19D7F1488(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_48c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_ea8_48c39_ZTSNSt3__16vectorIxNS_9allocatorIxEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = (void *)(a1 + 48);
  v2[2] = 0;
  return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v2, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke()
{
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  float result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    float result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

void sub_19D7F1C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7F1ED4(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

void sub_19D7F2B48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19D7F2DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_19D7F2E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D7F2EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7F2F9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19D7F3264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7F3634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19D7F3850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_19D7F3FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_19D7F445C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7F4508(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10F1C40976EDA9DLL);
  _Unwind_Resume(a1);
}

uint64_t AVAudioStereoMixingImpl::SetPan(AVAudioStereoMixingImpl *this, float a2)
{
  if (fabsf(a2) == INFINITY) {
    a2 = -1.0;
  }
  if (*((float *)this + 5) == a2) {
    return 0;
  }
  float v2 = 1.0;
  if (a2 < 1.0) {
    float v2 = a2;
  }
  if (a2 <= -1.0) {
    float v3 = -1.0;
  }
  else {
    float v3 = v2;
  }
  *((float *)this + 5) = v3;
  uint64_t v4 = *(uint64_t (**)(__n128))(*(void *)[*((id *)this + 9) impl] + 128);
  v5.n128_f32[0] = v3;

  return v4(v5);
}

uint64_t AVAudioStereoMixingImpl::SetGain(AVAudioStereoMixingImpl *this, float a2)
{
  if (fabsf(a2) == INFINITY) {
    a2 = 0.0;
  }
  if (*((float *)this + 4) == a2) {
    return 0;
  }
  float v2 = 100000.0;
  if (a2 < 100000.0) {
    float v2 = a2;
  }
  if (a2 <= 0.0) {
    float v3 = 0.0;
  }
  else {
    float v3 = v2;
  }
  *((float *)this + 4) = v3;
  uint64_t v4 = *(uint64_t (**)(__n128))(*(void *)[*((id *)this + 9) impl] + 128);
  v5.n128_f32[0] = v3;

  return v4(v5);
}

AVAudioConnectionPoint *AVAudioStereoMixingImpl::GetMixerConnectionPoint(id *this)
{
  uint64_t v2 = [this[9] impl];
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 248))(v2, *((unsigned int *)this + 16));
  id v4 = this[9];

  return +[AVAudioConnectionPoint connectionPointWithNode:v4 bus:v3];
}

BOOL AVAudioStereoMixingImpl::IsConnectedToMixer(AVAudioNode **this, AVAudioNode *a2, int a3)
{
  return this[9] == a2 && *((_DWORD *)this + 16) == a3;
}

void AVAudioStereoMixingImpl::~AVAudioStereoMixingImpl(AVAudioStereoMixingImpl *this)
{
  *(void *)this = &unk_1EEFA6800;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  JUMPOUT(0x19F3ABB30);
}

{
  *(void *)this = &unk_1EEFA6800;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
}

uint64_t AUGraphNodeBase::RemoveRenderObserver(AUGraphNodeBase *this, const AURenderCallbackStruct *a2)
{
  return (*(uint64_t (**)(void, const AURenderCallbackStruct *))(**((void **)this + 3) + 176))(*((void *)this + 3), a2);
}

uint64_t AUGraphNodeBase::AddRenderObserver(AUGraphNodeBase *this, const AURenderCallbackStruct *a2)
{
  return (*(uint64_t (**)(void, const AURenderCallbackStruct *))(**((void **)this + 3) + 168))(*((void *)this + 3), a2);
}

uint64_t AUGraphNodeBase::ConnectInput(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  char v7 = *(void **)a4;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  size_t v9 = (void **)v8;
  uint64_t v10 = *(unsigned int *)(a4 + 8);
  if (a2)
  {
    if (!v7)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      float v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        uint64_t v17 = "AVAEInternal.h";
        __int16 v18 = 1024;
        int v19 = 71;
        __int16 v20 = 2080;
        unint64_t v21 = "AVAEGraphNode.mm";
        __int16 v22 = 1024;
        int v23 = 227;
        __int16 v24 = 2080;
        unint64_t v25 = "ConnectInput";
        __int16 v26 = 2080;
        uint64_t v27 = "nullptr != srcNode";
        _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nullptr != srcNode");
    }
    (*(void (**)(void *, void, uint64_t, void **, uint64_t))(*v7 + 56))(v7, 0, v10, v9, a3);
    ((void (*)(void **, uint64_t, uint64_t, void *, uint64_t))(*v9)[7])(v9, 1, a3, v7, v10);
    return (*(uint64_t (**)(void))(*v9[3] + 272))();
  }
  else
  {
    uint64_t v13 = *(void *)(v8 + 24);
    if (v7) {
      uint64_t v14 = v7[3];
    }
    else {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 280))(v13, a3, v14, v10);
    uint64_t result = ((uint64_t (*)(void **, uint64_t, uint64_t))(*v9)[9])(v9, 1, a3);
    if (v7)
    {
      uint64_t v15 = *(uint64_t (**)(void *, void, uint64_t, void **, uint64_t))(*v7 + 64);
      return v15(v7, 0, v10, v9, a3);
    }
  }
  return result;
}

uint64_t AUGraphNodeBase::SetAUMaxFramesPerSlice(AUGraphNodeBase *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3))
                           + 160);

  return v1();
}

uint64_t AUGraphNodeBase::GetAUMaxFramesPerSlice(AUGraphNodeBase *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3))
                           + 152);

  return v1();
}

uint64_t AUGraphNodeBase::StopIO(AUGraphNodeBase *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3))
                           + 296);

  return v1();
}

uint64_t AUGraphNodeBase::StartIO(AUGraphNodeBase *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3))
                           + 288);

  return v1();
}

uint64_t AUGraphNodeBase::NodeDidStop(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 52))
    {
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v1 + 24);
      *(_DWORD *)(v1 + 56) = 1;
      return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1 + 24);
    }
  }
  return this;
}

uint64_t AUGraphNodeBase::NodeWillStart(uint64_t this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(this + 8);
  if (v1)
  {
    if (!*(unsigned char *)(v1 + 52))
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v2 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        CFNumberRef v6 = "AVAEInternal.h";
        __int16 v7 = 1024;
        int v8 = 71;
        __int16 v9 = 2080;
        uint64_t v10 = "AVAudioNodeTap.mm";
        __int16 v11 = 1024;
        int v12 = 129;
        __int16 v13 = 2080;
        uint64_t v14 = "Start";
        __int16 v15 = 2080;
        double v16 = "_initialized";
        _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "_initialized");
    }
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v1 + 24);
    uint64_t v3 = 0;
    *(_DWORD *)(v1 + 56) = 0;
    do
    {
      uint64_t v4 = v1 + v3;
      *(void *)(v4 + 208) = 0;
      *(void *)(v4 + 216) = 0;
      *(_DWORD *)(v4 + 224) = 0;
      v3 += 24;
    }
    while (v3 != 768);
    *(_DWORD *)(v1 + 976) = 0;
    *(unsigned char *)(v1 + 980) = 1;
    *(unsigned char *)(v1 + 5AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1;
    *(unsigned char *)(v1 + 1144) = 1;
    *(_DWORD *)(v1 + 1128) = 0;
    *(void *)(v1 + 1152) = 0;
    return caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(v1 + 24);
  }
  return this;
}

void sub_19D7F4F2C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AUGraphNodeBase::SetManualRenderingMode(AUGraphNodeBase *this, uint64_t a2, AVAudioEngineManualRenderingMode a3)
{
  return (*(uint64_t (**)(void, uint64_t, AVAudioEngineManualRenderingMode))(**((void **)this + 3) + 288))(*((void *)this + 3), a2, a3);
}

uint64_t AUGraphNodeBase::Uninitialize(AUGraphNodeBase *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    AVAudioNodeTap::Uninitialize(v2);
  }
  (*(void (**)(void))(**((void **)this + 3) + 336))(*((void *)this + 3));
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3))
                           + 32);

  return v3();
}

uint64_t AUGraphNodeBase::Initialize(AUGraphNodeBase *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  if (!v3)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4) {
      AVAudioNodeTap::Initialize(v4);
    }
    (*(void (**)(void))(**((void **)this + 3) + 328))(*((void *)this + 3));
  }
  return v3;
}

void AUGraphNodeBase::DestroyRecordingTap(AUGraphNodeBase *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    *((void *)this + 1) = 0;
    __dmb(0xBu);
    AVAudioNodeTap::Uninitialize(v1);
    *(unsigned char *)(v1 + 54) = 1;
    uint64_t v2 = AVAudioEngineImpl::sMessenger;
    CADeprecated::RealtimeMessenger::PerformAsync(v2, (unsigned char *)(v1 + 1168));
  }
}

void AUGraphNodeBase::CreateRecordingTap(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    int v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v14 = "AVAEInternal.h";
      __int16 v15 = 1024;
      int v16 = 71;
      __int16 v17 = 2080;
      __int16 v18 = "AVAEGraphNode.mm";
      __int16 v19 = 1024;
      int v20 = 451;
      __int16 v21 = 2080;
      __int16 v22 = "CreateRecordingTap";
      __int16 v23 = 2080;
      __int16 v24 = "nil != callbackBlock";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nil != callbackBlock");
  }
  if (*(void *)(a1 + 8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    __int16 v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v14 = "AVAEInternal.h";
      __int16 v15 = 1024;
      int v16 = 71;
      __int16 v17 = 2080;
      __int16 v18 = "AVAEGraphNode.mm";
      __int16 v19 = 1024;
      int v20 = 454;
      __int16 v21 = 2080;
      __int16 v22 = "CreateRecordingTap";
      __int16 v23 = 2080;
      __int16 v24 = "nullptr == Tap()";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nullptr == Tap()");
  }
  if (a4)
  {
    [a4 sampleRate];
    if (v10 <= 0.0 || ![a4 channelCount])
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      __int16 v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        uint64_t v14 = "AVAEInternal.h";
        __int16 v15 = 1024;
        int v16 = 71;
        __int16 v17 = 2080;
        __int16 v18 = "AVAEGraphNode.mm";
        __int16 v19 = 1024;
        int v20 = 457;
        __int16 v21 = 2080;
        __int16 v22 = "CreateRecordingTap";
        __int16 v23 = 2080;
        __int16 v24 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsFormatSampleRateAndChannelCountValid(format)");
    }
    if (((*(uint64_t (**)(void, uint64_t, void *))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24), a2, a4) & 1) == 0)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      int v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        uint64_t v14 = "AVAEInternal.h";
        __int16 v15 = 1024;
        int v16 = 71;
        __int16 v17 = 2080;
        __int16 v18 = "AVAEGraphNode.mm";
        __int16 v19 = 1024;
        int v20 = 458;
        __int16 v21 = 2080;
        __int16 v22 = "CreateRecordingTap";
        __int16 v23 = 2080;
        __int16 v24 = "NodeImpl()->SetOutputFormat(bus, format)";
        _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "NodeImpl()->SetOutputFormat(bus, format)");
    }
  }
  operator new();
}

void sub_19D7F565C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10F0C402021B9A6);
  _Unwind_Resume(a1);
}

uint64_t AUGraphNodeBase::DisconnectNode(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v3 = result + 48;
  uint64_t v4 = 72;
  if (a2 == 1) {
    uint64_t v4 = 48;
  }
  else {
    uint64_t v3 = result + 72;
  }
  uint64_t v5 = *(void *)(result + v4);
  uint64_t v6 = *(void *)(v3 + 8);
  if (v5 != v6 && a3 < (unint64_t)((v6 - v5) >> 3))
  {
    *(void *)(v5 + 8 * aAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
    __int16 v7 = *(void **)(result + v4);
    int v8 = *(void **)(v3 + 8);
    if (v7 != v8)
    {
      __int16 v9 = v8 - 1;
      do
      {
        if (*v9) {
          break;
        }
        *(void *)(v3 + 8) = v9;
      }
      while (v9-- != v7);
    }
  }
  return result;
}

uint64_t AUGraphNodeBase::DisconnectNode(uint64_t result, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    int v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v18 = "AVAEInternal.h";
      __int16 v19 = 1024;
      int v20 = 71;
      __int16 v21 = 2080;
      __int16 v22 = "AVAEGraphNode.mm";
      __int16 v23 = 1024;
      int v24 = 411;
      __int16 v25 = 2080;
      __int16 v26 = "DisconnectNode";
      __int16 v27 = 2080;
      uint64_t v28 = "inNode != nil";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inNode != nil");
  }
  uint64_t v9 = v7 + 48;
  uint64_t v10 = 72;
  if (a2 == 1) {
    uint64_t v10 = 48;
  }
  else {
    uint64_t v9 = v7 + 72;
  }
  uint64_t v11 = *(void *)(v7 + v10);
  uint64_t v12 = *(void *)(v9 + 8);
  if (v11 != v12 && a3 < (unint64_t)((v12 - v11) >> 3) && *(void *)(v11 + 8 * a3) == a4)
  {
    *(void *)(v11 + 8 * aAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
    __int16 v13 = *(void **)(v7 + v10);
    uint64_t v14 = *(void **)(v9 + 8);
    if (v13 != v14)
    {
      __int16 v15 = v14 - 1;
      do
      {
        if (*v15) {
          break;
        }
        *(void *)(v9 + 8) = v15;
      }
      while (v15-- != v13);
    }
  }
  return result;
}

void AUGraphNodeBase::AddNode(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    int v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v25 = "AVAEInternal.h";
      __int16 v26 = 1024;
      int v27 = 71;
      __int16 v28 = 2080;
      uint64_t v29 = "AVAEGraphNode.mm";
      __int16 v30 = 1024;
      int v31 = 386;
      __int16 v32 = 2080;
      long long v33 = "AddNode";
      __int16 v34 = 2080;
      long long v35 = "inNode != nil";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inNode != nil");
  }
  BOOL v9 = a2 == 1;
  if (a2 == 1) {
    uint64_t v10 = 48;
  }
  else {
    uint64_t v10 = 72;
  }
  if (v9) {
    uint64_t v11 = a1 + 48;
  }
  else {
    uint64_t v11 = a1 + 72;
  }
  uint64_t v12 = *(void **)(v11 + 8);
  uint64_t v13 = *(void *)(a1 + v10);
  for (unint64_t i = ((uint64_t)v12 - v13) >> 3; (int)i <= (int)a3; unint64_t i = ((uint64_t)v12 - v13) >> 3)
  {
    unint64_t v15 = *(void *)(v11 + 16);
    if ((unint64_t)v12 >= v15)
    {
      if ((i + 1) >> 61) {
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v15 - v13;
      uint64_t v17 = v16 >> 2;
      if (v16 >> 2 <= i + 1) {
        uint64_t v17 = i + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v18);
      }
      else {
        uint64_t v19 = 0;
      }
      int v20 = (void *)(v18 + 8 * i);
      void *v20 = 0;
      uint64_t v12 = v20 + 1;
      __int16 v21 = *(char **)(v11 + 8);
      __int16 v22 = *(char **)(a1 + v10);
      if (v21 != v22)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *--int v20 = v23;
        }
        while (v21 != v22);
        __int16 v21 = *(char **)(a1 + v10);
      }
      *(void *)(a1 + v10) = v20;
      *(void *)(v11 + 8) = v12;
      *(void *)(v11 + 16) = v18 + 8 * v19;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *v12++ = 0;
    }
    *(void *)(v11 + 8) = v12;
    uint64_t v13 = *(void *)(a1 + v10);
  }
  if (i <= a3) {
    std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
  }
  *(void *)(v13 + 8 * aAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = a4;
}

uint64_t AUGraphNodeBase::GetBusForConnectionPoint(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  *a4 = -1;
  uint64_t v4 = a1 + 72;
  uint64_t v5 = 72;
  if (a2 == 1)
  {
    uint64_t v5 = 48;
    uint64_t v4 = a1 + 48;
  }
  uint64_t v6 = *(char **)(a1 + v5);
  uint64_t v7 = *(char **)(v4 + 8);
  if (v6 == v7) {
    return 0;
  }
  int v8 = *(char **)(a1 + v5);
  while (*(void *)v8 != *a3)
  {
    v8 += 8;
    if (v8 == v7)
    {
      int v8 = v7;
      break;
    }
  }
  if (v8 == v7) {
    return 0;
  }
  *a4 = (unint64_t)(v8 - v6) >> 3;
  return 1;
}

uint64_t AUGraphNodeBase::GetConnectionPoint(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v4 = a1 + 48;
  uint64_t v5 = 48;
  if (a2 != 1)
  {
    uint64_t v5 = 72;
    uint64_t v4 = a1 + 72;
  }
  if (*(void *)(a1 + v5) == *(void *)(v4 + 8)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    int v14 = a3;
    int v12 = -1;
    uint64_t result = (*(uint64_t (**)(uint64_t, BOOL, uint64_t *, int *))(*(void *)v11 + 48))(v11, a2 != 1, &v13, &v12);
    if (result)
    {
      *a4 = v11;
      *((_DWORD *)a4 + 2) = v12;
    }
  }
  return result;
}

uint64_t AUGraphNodeBase::GetConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (a2 == 1)
  {
    *(void *)(a4 + 16) = v8;
    BOOL v9 = (_DWORD *)(a4 + 24);
  }
  else
  {
    *(void *)a4 = v8;
    BOOL v9 = (_DWORD *)(a4 + 8);
  }
  *BOOL v9 = a3;
  uint64_t v11 = 0;
  int v12 = -1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 40))(a1, a2, a3, &v11);
  if (result)
  {
    if (a2 == 1)
    {
      *(void *)a4 = v11;
      *(_DWORD *)(a4 + 8) = v12;
    }
    else
    {
      *(void *)(a4 + 16) = v11;
      *(_DWORD *)(a4 + 24) = v12;
    }
  }
  return result;
}

uint64_t AUGraphNodeBase::GetNodeForBus(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = a1 + 48;
  uint64_t v4 = 72;
  if (a2 == 1) {
    uint64_t v4 = 48;
  }
  else {
    uint64_t v3 = a1 + 72;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(a1 + v4);
  unint64_t v7 = (v5 - v6) >> 3;
  if ((int)v7 <= (int)a3) {
    return 0;
  }
  if (v7 <= a3) {
    std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v6 + 8 * a3);
}

const void ***AUGraphNodeBaseV3::DeallocateInputBlock(const void ***this)
{
  return std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](this + 15, 0);
}

uint64_t AUGraphNodeBaseV3::DestroyMIDIConnection(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*a2;
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v5 = (caulk::pooled_semaphore_mutex *)((char *)v3 + 156);
  std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>((caulk::pooled_semaphore_mutex *)((char *)v3 + 156), (caulk::pooled_semaphore_mutex *)((char *)a1 + 156));
  if (v3 != (void *)a1[14])
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v17 = "AVAEInternal.h";
      __int16 v18 = 1024;
      int v19 = 71;
      __int16 v20 = 2080;
      __int16 v21 = "AVAEGraphNode.mm";
      __int16 v22 = 1024;
      int v23 = 997;
      __int16 v24 = 2080;
      __int16 v25 = "DestroyMIDIConnection";
      __int16 v26 = 2080;
      int v27 = "midiSrc == MIDIInput()";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "midiSrc == MIDIInput()");
    uint64_t v3 = (void *)a1[14];
  }
  if (v4)
  {
    unint64_t v7 = (void *)v3[17];
    uint64_t v8 = (void *)v3[16];
    if (v8 != v7)
    {
      while (*v8 != v4)
      {
        if (++v8 == v7)
        {
          uint64_t v8 = (void *)v3[17];
          break;
        }
      }
    }
    if (v8 != v7)
    {
      BOOL v9 = v8 + 1;
      if (v8 + 1 != v7)
      {
        do
        {
          if (*v9 != v4) {
            *v8++ = *v9;
          }
          ++v9;
        }
        while (v9 != v7);
        unint64_t v7 = (void *)v3[17];
      }
    }
    if (v7 != v8) {
      v3[17] = v8;
    }
  }
  uint64_t v10 = a1[14];
  if (*(void *)(v10 + 128) == *(void *)(v10 + 136))
  {
    int v12 = *(void **)(v10 + 176);
    if (v12 && *v12)
    {
      std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100]((const void ***)(v10 + 176), 0);
      uint64_t v10 = a1[14];
    }
    unint64_t v15 = *(void **)(v10 + 184);
    uint64_t v13 = (const void ***)(v10 + 184);
    int v14 = v15;
    if (v15 && *v14) {
      std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v13, 0);
    }
  }
  a1[14] = 0;
  caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)((char *)a1 + 156));
  return caulk::pooled_semaphore_mutex::_unlock(v5);
}

void sub_19D7F6110(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v2);
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>(caulk::pooled_semaphore_mutex *this, caulk::pooled_semaphore_mutex *a2)
{
  while (1)
  {
    uint64_t v5 = this;
    char v6 = 1;
    caulk::pooled_semaphore_mutex::_lock(this);
    if (caulk::pooled_semaphore_mutex::try_lock(a2)) {
      break;
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
    uint64_t v5 = a2;
    char v6 = 1;
    caulk::pooled_semaphore_mutex::_lock(a2);
    if (caulk::pooled_semaphore_mutex::try_lock(this)) {
      break;
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
    sched_yield();
  }
  uint64_t v5 = 0;
  char v6 = 0;
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
}

void sub_19D7F61E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void ***std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *uint64_t v2 = 0;
    }
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

const void ***std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *uint64_t v2 = 0;
    }
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

uint64_t AUGraphNodeBaseV3::CreateMIDIConnection(void *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (!v4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    char v6 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      __int16 v27 = 1024;
      int v28 = 71;
      __int16 v29 = 2080;
      __int16 v30 = "AVAEGraphNode.mm";
      __int16 v31 = 1024;
      int v32 = 964;
      __int16 v33 = 2080;
      __int16 v34 = "CreateMIDIConnection";
      __int16 v35 = 2080;
      uint64_t v36 = "midiSrc != nullptr";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "midiSrc != nullptr");
  }
  unint64_t v7 = (caulk::pooled_semaphore_mutex *)((char *)v4 + 156);
  std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>((caulk::pooled_semaphore_mutex *)((char *)v4 + 156), (caulk::pooled_semaphore_mutex *)((char *)a1 + 156));
  a1[14] = v4;
  if (v5)
  {
    uint64_t v8 = (uint64_t *)v4[16];
    BOOL v9 = (uint64_t *)v4[17];
    uint64_t v10 = v8;
    if (v8 != v9)
    {
      while (*v10 != v5)
      {
        if (++v10 == v9)
        {
          uint64_t v10 = (uint64_t *)v4[17];
          break;
        }
      }
    }
    if (v10 == v9)
    {
      unint64_t v11 = v4[18];
      if ((unint64_t)v9 >= v11)
      {
        uint64_t v13 = v9 - v8;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v11 - (void)v8;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        __int16 v18 = (uint64_t *)(v16 + 8 * v13);
        unint64_t v19 = v16 + 8 * v17;
        uint64_t *v18 = v5;
        int v12 = v18 + 1;
        __int16 v21 = (char *)v4[16];
        __int16 v20 = (char *)v4[17];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *--__int16 v18 = v22;
          }
          while (v20 != v21);
          __int16 v20 = (char *)v4[16];
        }
        v4[16] = v18;
        v4[17] = v12;
        v4[18] = v19;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *BOOL v9 = v5;
        int v12 = v9 + 1;
      }
      v4[17] = v12;
      uint64_t v4 = (void *)a1[14];
    }
  }
  __int16 v25 = v4;
  uint64_t v23 = *(unsigned int *)(a2 + 24);
  if (v23 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(void *)int buf = &v25;
  ((void (*)(unsigned char *, uint64_t))off_1EEFA8F60[v23])(buf, a2 + 16);
  caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)((char *)a1 + 156));
  return caulk::pooled_semaphore_mutex::_unlock(v7);
}

void sub_19D7F65A8(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v2);
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
}

const void ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AUGraphNodeBaseV3::CreateMIDIConnection(AUGraphMIDIConnection const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,int({block_pointer})(long long,unsigned char,long,unsigned char const*),int({block_pointer})(long long,unsigned char,MIDIEventList const*)> const&>(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t result = (const void ***)(v4 + 176);
  char v6 = *(void **)(v4 + 176);
  if (v6 && *v6)
  {
    uint64_t result = std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](result, 0);
    uint64_t v4 = *v3;
  }
  unint64_t v7 = (void *)*a2;
  uint64_t v10 = *(void **)(v4 + 184);
  BOOL v9 = (const void ***)(v4 + 184);
  uint64_t v8 = v10;
  if (v10) {
    uint64_t v8 = (void *)*v8;
  }
  if (v8 != v7)
  {
    if (v7) {
      operator new();
    }
    return std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v9, 0);
  }
  return result;
}

void sub_19D7F6854(_Unwind_Exception *exception_object)
{
}

const void ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AUGraphNodeBaseV3::CreateMIDIConnection(AUGraphMIDIConnection const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,int({block_pointer})(long long,unsigned char,long,unsigned char const*),int({block_pointer})(long long,unsigned char,MIDIEventList const*)> const&>(uint64_t **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (void *)*a2;
  unint64_t v7 = *(void **)(v3 + 176);
  char v6 = (const void ***)(v3 + 176);
  uint64_t v5 = v7;
  if (v7) {
    uint64_t v5 = (void *)*v5;
  }
  if (v5 != v4)
  {
    if (v4) {
      operator new();
    }
    std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](v6, 0);
  }
  uint64_t result = (const void ***)(*v2 + 184);
  if (*result && **result)
  {
    return std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](result, 0);
  }
  return result;
}

void sub_19D7F6A98(_Unwind_Exception *exception_object)
{
}

uint64_t AUGraphNodeBaseV3::AllocateInputBlock(AUGraphNodeBaseV3 *this)
{
  uint64_t result = (*(uint64_t (**)(AUGraphNodeBaseV3 *))(*(void *)this + 304))(this);
  if (!result)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL19CopyInnerInputBlockP17AUGraphNodeBaseV3_block_invoke;
    aBlock[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
    void aBlock[4] = this;
    _Block_copy(aBlock);
    operator new();
  }
  return result;
}

void sub_19D7F6C00(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t ___ZL19CopyInnerInputBlockP17AUGraphNodeBaseV3_block_invoke(uint64_t a1, unsigned int *a2, AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t v24 = 0;
  unsigned int v25 = -1;
  if ((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), 1, a5, &v24))
  {
    uint64_t v11 = v24;
    uint64_t v12 = v25;
    uint64_t v22 = v24 + 156;
    char v23 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v24 + 156));
    if (v23)
    {
      uint64_t v13 = *(AUGraphMIDINodeV3 **)(v11 + 112);
      if (v13) {
        AUGraphMIDINodeV3::RenderMIDI(v13, a2, a3, a4, v12, a6);
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 296))(v11);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 304))(v11);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, unsigned int *, AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *, uint64_t))(v14 + 16))(v14, a2, a3, a4, v12, a6, v15);
      atomic_store(v17, (unsigned int *)(v11 + 160));
      if (!v17)
      {
        __int16 v18 = *(unsigned int **)(v11 + 8);
        if (v18)
        {
          if (a2) {
            int v19 = *a2 | 8;
          }
          else {
            int v19 = 8;
          }
          int v21 = v19;
          AVAudioNodeTap::RenderCallback((AVAudioNodeTap *)v18, &v21, (unsigned int *)a3, (const AudioTimeStamp *)v18[2], a4, a6, v16);
        }
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = 4294956433;
      atomic_store(0xFFFFD591, (unsigned int *)(*(void *)(a1 + 32) + 160));
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v22);
  }
  else
  {
    uint64_t v17 = 4294956420;
    atomic_store(0xFFFFD584, (unsigned int *)(*(void *)(a1 + 32) + 160));
  }
  return v17;
}

void sub_19D7F6E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17AUGraphNodeBaseV318AllocateInputBlockEv_block_invoke(uint64_t a1, uint64_t a2)
{
  char v6 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 288))(*(void *)(a1 + 40));
  char v7 = caulk::pooled_semaphore_mutex::try_lock(v6);
  if (v7)
  {
    uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
  }
  else
  {
    uint64_t v4 = 4294956433;
    atomic_store(0xFFFFD591, (unsigned int *)(*(void *)(a1 + 40) + 160));
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v6);
  return v4;
}

void sub_19D7F6EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AUGraphMIDINodeV3::RenderMIDI(AUGraphMIDINodeV3 *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t v12 = (AUGraphMIDINodeV3 *)*((void *)this + 14);
  if (!v12 || (uint64_t result = AUGraphMIDINodeV3::RenderMIDI(v12, a2, a3, a4, a5, a6), !result))
  {
    UInt64 mHostTime = a3->mHostTime;
    if (*((void *)this + 21) == mHostTime)
    {
      return 0;
    }
    else
    {
      uint64_t v15 = (*(uint64_t (**)(AUGraphMIDINodeV3 *))(*(void *)this + 296))(this);
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *, void))(v15 + 16))(v15, a2, a3, a4, a5, a6, 0);
      *((void *)this + 21) = mHostTime;
    }
  }
  return result;
}

uint64_t AUGraphNodeBaseV3::ConnectInput(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = (caulk::pooled_semaphore_mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 288))(a1);
  BOOL v9 = v8;
  uint64_t v10 = *a4;
  if (*a4)
  {
    uint64_t v11 = (caulk::pooled_semaphore_mutex *)(v10 + 156);
    std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>((caulk::pooled_semaphore_mutex *)(v10 + 156), v8);
    if (a2) {
      (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);
    }
    AUGraphNodeBase::ConnectInput(a1, a2, a3, (uint64_t)a4);
    caulk::pooled_semaphore_mutex::_unlock(v9);
    return caulk::pooled_semaphore_mutex::_unlock(v11);
  }
  else
  {
    caulk::pooled_semaphore_mutex::_lock(v8);
    if (a2) {
      (*(void (**)(uint64_t))(*(void *)a1 + 312))(a1);
    }
    AUGraphNodeBase::ConnectInput(a1, a2, a3, (uint64_t)a4);
    return caulk::pooled_semaphore_mutex::_unlock(v9);
  }
}

void sub_19D7F7120(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

void AUGraphNodeBaseV3::DestroyRecordingTap(AUGraphNodeBaseV3 *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    uint64_t v3 = (AUGraphNodeBaseV3 *)((char *)this + 156);
    caulk::pooled_semaphore_mutex::_lock((AUGraphNodeBaseV3 *)((char *)this + 156));
    *((void *)this + 1) = 0;
    caulk::pooled_semaphore_mutex::_unlock(v3);
    AVAudioNodeTap::Uninitialize(v1);
    *(unsigned char *)(v1 + 54) = 1;
    uint64_t v4 = AVAudioEngineImpl::sMessenger;
    CADeprecated::RealtimeMessenger::PerformAsync(v4, (unsigned char *)(v1 + 1168));
  }
}

void AUGraphNodeBaseV3::CreateRecordingTap(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v8 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v13 = "AVAEInternal.h";
      __int16 v14 = 1024;
      int v15 = 71;
      __int16 v16 = 2080;
      uint64_t v17 = "AVAEGraphNode.mm";
      __int16 v18 = 1024;
      int v19 = 825;
      __int16 v20 = 2080;
      int v21 = "CreateRecordingTap";
      __int16 v22 = 2080;
      char v23 = "nil != callbackBlock";
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nil != callbackBlock");
  }
  if (*(void *)(a1 + 8))
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    BOOL v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v13 = "AVAEInternal.h";
      __int16 v14 = 1024;
      int v15 = 71;
      __int16 v16 = 2080;
      uint64_t v17 = "AVAEGraphNode.mm";
      __int16 v18 = 1024;
      int v19 = 828;
      __int16 v20 = 2080;
      int v21 = "CreateRecordingTap";
      __int16 v22 = 2080;
      char v23 = "nullptr == Tap()";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nullptr == Tap()");
  }
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 156));
  if (a4)
  {
    [a4 sampleRate];
    if (v10 <= 0.0 || ![a4 channelCount])
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        uint64_t v13 = "AVAEInternal.h";
        __int16 v14 = 1024;
        int v15 = 71;
        __int16 v16 = 2080;
        uint64_t v17 = "AVAEGraphNode.mm";
        __int16 v18 = 1024;
        int v19 = 834;
        __int16 v20 = 2080;
        int v21 = "CreateRecordingTap";
        __int16 v22 = 2080;
        char v23 = "IsFormatSampleRateAndChannelCountValid(format)";
        _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "IsFormatSampleRateAndChannelCountValid(format)");
    }
    if (((*(uint64_t (**)(void, uint64_t, void *))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24), a2, a4) & 1) == 0)[MEMORY[0x1E4F1CA00] raise:@"com.apple.coreaudio.avfaudio" format:@"Failed to set output format on node to tap"]; {
  }
    }
  operator new();
}

void sub_19D7F765C(_Unwind_Exception *a1)
{
  caulk::pooled_semaphore_mutex::_unlock(v1);
  _Unwind_Resume(a1);
}

const void ***AUGraphNodeIOV3::SetOutputProvider(uint64_t a1, const void ***a2)
{
  uint64_t result = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  if (result != a2)
  {
    uint64_t v5 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    (*(void (**)(void))(v5 + 344))();
    if (a2) {
      operator new();
    }
    return std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)(a1 + 168), 0);
  }
  return result;
}

void sub_19D7F78F0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

const void ***AUGraphNodeIOV3::DeallocateInputBlock(AUGraphNodeIOV3 *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if ((*(unsigned int (**)(void))(v2 + 336))())
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v3 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      char v6 = "AVAEInternal.h";
      __int16 v7 = 1024;
      int v8 = 71;
      __int16 v9 = 2080;
      double v10 = "AVAEGraphNode.mm";
      __int16 v11 = 1024;
      int v12 = 1074;
      __int16 v13 = 2080;
      __int16 v14 = "DeallocateInputBlock";
      __int16 v15 = 2080;
      __int16 v16 = "false == AUI().IsRunning()";
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "false == AUI().IsRunning()");
  }
  (*(void (**)(AUGraphNodeIOV3 *, void))(*(void *)this + 384))(this, 0);
  return std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)this + 15, 0);
}

uint64_t AUGraphNodeIOV3::LastRenderError(AUGraphNodeIOV3 *this)
{
  uint64_t result = atomic_load((unsigned int *)this + 40);
  if (!result)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
    unsigned int v5 = 0;
    int v4 = 4;
    (*(void (**)(uint64_t, uint64_t, void, void, unsigned int *, int *))(*(void *)v3 + 240))(v3, 22, 0, 0, &v5, &v4);
    return v5;
  }
  return result;
}

const void ***AUGraphNodeIOV3::DeallocateInputHandler(AUGraphNodeIOV3 *this)
{
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  (*(void (**)(void))(v2 + 352))();

  return std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100]((const void ***)this + 22, 0);
}

const void ***std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *uint64_t v2 = 0;
    }
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

uint64_t AUGraphNodeIOV3::AllocateInputHandler(AUGraphNodeIOV3 *this, const AURenderCallbackStruct *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a2->inputProc)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v3 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      char v6 = "AVAEInternal.h";
      __int16 v7 = 1024;
      int v8 = 71;
      __int16 v9 = 2080;
      double v10 = "AVAEGraphNode.mm";
      __int16 v11 = 1024;
      int v12 = 1098;
      __int16 v13 = 2080;
      __int16 v14 = "AllocateInputHandler";
      __int16 v15 = 2080;
      __int16 v16 = "inRenderCallback.inputProc";
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inRenderCallback.inputProc");
  }
  uint64_t result = (*(uint64_t (**)(AUGraphNodeIOV3 *))(*(void *)this + 328))(this);
  if (!result) {
    operator new();
  }
  return result;
}

void sub_19D7F7F4C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15AUGraphNodeIOV320AllocateInputHandlerERK22AURenderCallbackStruct_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 32))(*(void *)(a1 + 40), a2, a3, a5, a4, 0);
}

uint64_t AUGraphNodeIOV3::InputHandler(AUGraphNodeIOV3 *this)
{
  uint64_t v1 = *((void *)this + 22);
  if (v1) {
    return *(void *)v1;
  }
  else {
    return 0;
  }
}

uint64_t AUGraphNodeIOV3::OutputProvider(AUGraphNodeIOV3 *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (v1) {
    return *(void *)v1;
  }
  else {
    return 0;
  }
}

uint64_t AUGraphNodeIOV3::AllocateInputBlock(AUGraphNodeIOV3 *this)
{
  AUGraphNodeBaseV3::AllocateInputBlock(this);
  uint64_t result = (*(uint64_t (**)(AUGraphNodeIOV3 *))(*(void *)this + 320))(this);
  if (!result)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZN15AUGraphNodeIOV318AllocateInputBlockEv_block_invoke;
    v3[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
    v3[4] = this;
    return (*(uint64_t (**)(AUGraphNodeIOV3 *, void *))(*(void *)this + 384))(this, v3);
  }
  return result;
}

uint64_t ___ZN15AUGraphNodeIOV318AllocateInputBlockEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))((*(uint64_t (**)(void))(**(void **)(a1 + 32) + 304))(*(void *)(a1 + 32))
                           + 16);

  return v1();
}

uint64_t AUGraphNodeIOV3::SetInputCallback(AUGraphNodeIOV3 *this, const AURenderCallbackStruct *a2)
{
  uint64_t v2 = *(void *)this;
  if (a2->inputProc) {
    return (*(uint64_t (**)(void))(v2 + 336))();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 344))();
  }
}

uint64_t AUGraphNodeIOV3::CanChangeMaxFrames(AUGraphNodeIOV3 *this)
{
  return 0;
}

BOOL AUGraphNodeIOV3::IsVoiceIONode(AUGraphNodeIOV3 *this)
{
  uint64_t v1 = (_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 256))(*((void *)this + 3));
  return *v1 == 1635086197 && v1[1] == 1987078511 && v1[2] == 1634758764;
}

BOOL AUGraphNodeIOV3::IsIONode(AUGraphNodeIOV3 *this)
{
  return *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 256))(*((void *)this + 3)) == 1635086197;
}

void AUGraphNodeIOV3::~AUGraphNodeIOV3(const void ***this)
{
  AUGraphNodeIOV3::~AUGraphNodeIOV3(this);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t vars8;

  *this = (const void **)&unk_1EEFA42F0;
  AUGraphNodeIOV3::DeallocateInputBlock((AUGraphNodeIOV3 *)this);
  ((void (*)(const void ***))(*this)[43])(this);
  std::unique_ptr<AVAEBlock<void({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long)>>::reset[abi:ne180100](this + 22, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](this + 21, 0);

  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);
}

void AUGraphNodeBaseV3::~AUGraphNodeBaseV3(const void ***this)
{
  *this = (const void **)&unk_1EEFA4B50;
  uint64_t v2 = this + 13;
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100](this + 13, 0);
  ((void (*)(const void ***))(*this)[47])(this);
  uint64_t v3 = this[16];
  if (v3)
  {
    this[17] = v3;
    operator delete(v3);
  }
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100](this + 15, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](this + 12, 0);

  AUGraphNodeBase::~AUGraphNodeBase((AUGraphNodeBase *)this);
}

const void ***std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *,int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *))>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *uint64_t v2 = 0;
    }
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

void AUGraphNodeBase::~AUGraphNodeBase(AUGraphNodeBase *this)
{
  *(void *)this = &unk_1EEFA41C0;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    *((void *)this + 1) = 0;
    __dmb(0xBu);
    AVAudioNodeTap::Uninitialize(v2);
    *(unsigned char *)(v2 + 54) = 1;
    CADeprecated::RealtimeMessenger::PerformAsync(AVAudioEngineImpl::sMessenger, (unsigned char *)(v2 + 1168));
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
}

const void ***AUGraphNodeGenericIOV3::SetManualRenderingInputBlock(uint64_t a1, const void ***a2)
{
  uint64_t result = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1);
  if (result != a2)
  {
    v5[0] = GenericInputNodeRenderCallback;
    v5[1] = a1;
    (*(void (**)(void, void, void *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), 0, v5);
    uint64_t result = std::unique_ptr<AVAEBlock<AudioBufferList const*({block_pointer})>>::reset[abi:ne180100]((const void ***)(a1 + 192), 0);
    if (a2) {
      operator new();
    }
  }
  return result;
}

void sub_19D7F8634(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

const void ***std::unique_ptr<AVAEBlock<AudioBufferList const*({block_pointer})(unsigned int)>>::reset[abi:ne180100](const void ***result, const void **a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    if (*v2)
    {
      _Block_release(*v2);
      *uint64_t v2 = 0;
    }
    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

uint64_t GenericInputNodeRenderCallback(unsigned int *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  (*(void (**)(unsigned int *, void, const AudioTimeStamp *))(*(void *)a1 + 400))(a1, 0, a3);
  if ((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 392))(a1))
  {
    uint64_t v9 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 392))(a1);
    double v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v9, a5);
    if (v10 && (uint64_t v11 = *v10, v11) && v10[3] == a6->mBuffers[0].mDataByteSize)
    {
      if (v11 != a6->mNumberBuffers)
      {
        uint64_t result = 4294967246;
        goto LABEL_14;
      }
      p_mData = &a6->mBuffers[0].mData;
      __int16 v13 = (void **)(v10 + 4);
      do
      {
        *p_mData = *v13;
        *(p_mData - 1) = *(v13 - 1);
        p_mData += 2;
        v13 += 2;
        --v11;
      }
      while (v11);
    }
    else
    {
      (*(void (**)(unsigned int *, uint64_t))(*(void *)a1 + 400))(a1, 1);
      if (a6->mNumberBuffers)
      {
        unint64_t v14 = 0;
        __int16 v15 = &a6->mBuffers[0].mData;
        do
        {
          bzero(*v15, *((unsigned int *)v15 - 1));
          ++v14;
          v15 += 2;
        }
        while (v14 < a6->mNumberBuffers);
      }
    }
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 4294956420;
  }
LABEL_14:
  atomic_store(result, a1 + 40);
  return result;
}

uint64_t AUGraphNodeGenericIOV3::SetLastInputCallbackStatus(uint64_t this, AVAudioEngineManualRenderingStatus a2)
{
  *(void *)(this + 200) = a2;
  return this;
}

uint64_t AUGraphNodeGenericIOV3::ManualRenderingInputBlock(AUGraphNodeGenericIOV3 *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (v1) {
    return *(void *)v1;
  }
  else {
    return 0;
  }
}

uint64_t AUGraphNodeGenericIOV3::AllocateInputBlock(AUGraphNodeGenericIOV3 *this)
{
  AUGraphNodeBaseV3::AllocateInputBlock(this);
  uint64_t result = (*(uint64_t (**)(AUGraphNodeGenericIOV3 *))(*(void *)this + 320))(this);
  if (!result)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZN22AUGraphNodeGenericIOV318AllocateInputBlockEv_block_invoke;
    v3[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
    v3[4] = this;
    return (*(uint64_t (**)(AUGraphNodeGenericIOV3 *, void *))(*(void *)this + 384))(this, v3);
  }
  return result;
}

uint64_t ___ZN22AUGraphNodeGenericIOV318AllocateInputBlockEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = *(unsigned int **)(a1 + 32);
  __int16 v13 = v12 + 40;
  uint64_t v14 = (*(uint64_t (**)(unsigned int *))(*(void *)v12 + 296))(v12);
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 304))();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 16))(v14, a2, a3, a4, a5, a6, v15);
  atomic_store(result, v13);
  return result;
}

uint64_t AUGraphNodeGenericIOV3::GetLastInputCallbackStatus(AUGraphNodeGenericIOV3 *this)
{
  return *((void *)this + 25);
}

uint64_t AUGraphNodeGenericIOV3::RenderToABL(AUGraphNodeGenericIOV3 *this, uint64_t a2, AudioBufferList *a3, uint64_t a4)
{
  if (!a3) {
    return 4294967246;
  }
  if (!a3->mNumberBuffers) {
    return 4294967246;
  }
  int v10 = 0;
  v8[0] = (double)a4;
  int v9 = 1;
  uint64_t v6 = (*(uint64_t (**)(AUGraphNodeGenericIOV3 *))(*(void *)this + 320))(this);
  return (*(uint64_t (**)(uint64_t, int *, double *, uint64_t, void, AudioBufferList *))(v6 + 16))(v6, &v10, v8, a2, 0, a3);
}

BOOL AUGraphNodeGenericIOV3::SetManualRenderingRenderCallback(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 184)) {
    return 0;
  }
  if ((objc_msgSend(a2, "isEqual:", (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), 0)) & 1) != 0&& (*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1) == a3)
  {
    return 1;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1) != a3) {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 408))(a1, 0);
  }
  if ((*(unsigned int (**)(void, void, void *))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), 0, a2))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 408))(a1, a3);
    return 1;
  }
  if (AVAudioEngineLogCategory(void)::once != -1) {
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
  }
  __int16 v7 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  BOOL result = os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v8 = 136315650;
    int v9 = "AVAEGraphNode.mm";
    __int16 v10 = 1024;
    int v11 = 1459;
    __int16 v12 = 2080;
    uint64_t v13 = objc_msgSend((id)objc_msgSend(a2, "description"), "UTF8String");
    _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting manual rendering mode input PCM format on input node! %s", (uint8_t *)&v8, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t AUGraphNodeGenericIOV3::CanChangeMaxFrames(AUGraphNodeGenericIOV3 *this)
{
  return *((unsigned __int8 *)this + 184);
}

void AUGraphNodeGenericIOV3::~AUGraphNodeGenericIOV3(const void ***this)
{
  AUGraphNodeGenericIOV3::~AUGraphNodeGenericIOV3(this);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t vars8;

  *this = (const void **)&unk_1EEFA6468;
  AUGraphNodeGenericIOV3::SetManualRenderingInputBlock((uint64_t)this, 0);
  std::unique_ptr<AVAEBlock<AudioBufferList const*({block_pointer})>>::reset[abi:ne180100](this + 24, 0);

  AUGraphNodeIOV3::~AUGraphNodeIOV3(this);
}

uint64_t AUGraphMIDINodeV3::Uninitialize(AUGraphMIDINodeV3 *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AUGraphNodeBase::Uninitialize(this);
  uint64_t v3 = *(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if ((int)[(id)(*(uint64_t (**)(void))(v3 + 304))() hostMIDIProtocol] <= 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    int v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      __int16 v7 = "AVAEInternal.h";
      __int16 v8 = 1024;
      int v9 = 71;
      __int16 v10 = 2080;
      int v11 = "AVAEGraphNode.mm";
      __int16 v12 = 1024;
      int v13 = 1291;
      __int16 v14 = 2080;
      uint64_t v15 = "Uninitialize";
      __int16 v16 = 2080;
      uint64_t v17 = "AUI().GetHostMIDIProtocol() > 0";
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "AUI().GetHostMIDIProtocol() > 0");
  }
  AUGraphMIDINodeV3::SetMIDIOutputEventListBlock((const void ***)this, 0);
  return v2;
}

const void ***AUGraphMIDINodeV3::SetMIDIOutputEventListBlock(const void ***result, const void **a2)
{
  int v4 = result + 12;
  uint64_t v3 = result[12];
  if (v3) {
    uint64_t v3 = (const void **)*v3;
  }
  if (v3 != a2)
  {
    uint64_t v5 = *(void *)(*((uint64_t (**)(const void **))*result[3] + 5))(result[3]);
    [(id)(*(uint64_t (**)(void))(v5 + 304))() setMIDIOutputEventListBlock:0];
    if (a2) {
      operator new();
    }
    return std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](v4, 0);
  }
  return result;
}

void sub_19D7F9180(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void AUGraphMIDINodeV3::Initialize(AUGraphMIDINodeV3 *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 40))(*((void *)this + 3));
  if ((int)[(id)(*(uint64_t (**)(void))(v2 + 304))() hostMIDIProtocol] <= 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v3 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "AVAEGraphNode.mm";
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 1276;
      *(_WORD *)&unsigned char buf[34] = 2080;
      *(void *)&buf[36] = "Initialize";
      *(_WORD *)&buf[44] = 2080;
      *(void *)&buf[46] = "AUI().GetHostMIDIProtocol() > 0";
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "AUI().GetHostMIDIProtocol() > 0");
  }
  if (MEMORY[0x1E4F1E770])
  {
    int v4 = (void *)*((void *)this + 12);
    if (!v4 || !*v4)
    {
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 3221225472;
      void v5[2] = ___ZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEv_block_invoke;
      v5[3] = &__block_descriptor_40_e61_i28__0q8C16r__MIDIEventList_iI_1_MIDIEventPacket_QI_64I____20l;
      v5[4] = this;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = ___ZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEv_block_invoke_2;
      *(void *)&buf[24] = &unk_1E5964A78;
      *(void *)&uint8_t buf[32] = v5;
      *(void *)&unsigned char buf[40] = this;
      AUGraphMIDINodeV3::SetMIDIOutputEventListBlock((const void ***)this, (const void **)buf);
    }
  }
  operator new();
}

void sub_19D7F9598(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEv_block_invoke(uint64_t a1, uint64_t a2, char a3, _DWORD *a4)
{
  v17[96] = *MEMORY[0x1E4F143B8];
  char v6 = a3;
  uint64_t v7 = a2;
  __int16 v8 = _ZN5caulk16inplace_functionIFvPKN4MIDI16LegacyPacketListEELm48ELm8ENS_23inplace_function_detail6vtableEE16k_wrapper_vtableIZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EE;
  v9.n128_u64[0] = a1 + 32;
  v9.n128_u64[1] = (unint64_t)&v7;
  __int16 v10 = &v6;
  __n128 v12 = v9;
  int v13 = &v6;
  __int16 v14 = &unk_1EEFA7718;
  int v11 = &caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::empty;
  uint64_t v15 = _ZN5caulk16inplace_functionIFvPKN4MIDI16LegacyPacketListEELm48ELm8ENS_23inplace_function_detail6vtableEE16k_wrapper_vtableIZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EE;
  _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EENS0_7wrapperIT_EEENUlPvSD_E0_8__invokeESD_SD_(v16, &v12);
  bzero(v17, 0x300uLL);
  MIDI::MIDIPacketList_Deliverer::operator()((uint64_t)&v14, a4);
  __int16 v14 = &unk_1EEFA7718;
  ((void (*)(__n128 *))v15[3])(v16);
  ((void (*)(__n128 *))v8[3])(&v9);
  return 0;
}

void sub_19D7F96E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v8 = *(void **)(a1 + 40);
  __n128 v9 = (uint64_t *)v8[16];
  __int16 v10 = (uint64_t *)v8[17];
  if (v9 != v10)
  {
    do
    {
      uint64_t v11 = *v9++;
      uint64_t v12 = *(void *)(*(uint64_t (**)(void))(**(void **)(v11 + 24) + 40))(*(void *)(v11 + 24));
      uint64_t v13 = (*(uint64_t (**)(void))(v12 + 328))();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v13, a2, a3, a4);
    }
    while (v9 != v10);
    __int16 v8 = *(void **)(a1 + 40);
  }
  __int16 v14 = (uint64_t *)v8[23];
  if (v14)
  {
    uint64_t v15 = *v14;
    if (*v14) {
      goto LABEL_9;
    }
  }
  __int16 v16 = (void *)v8[22];
  if (v16 && *v16)
  {
    uint64_t v15 = *(void *)(a1 + 32);
LABEL_9:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(v15, a2, a3, a4);
  }
  return 0;
}

uint64_t MIDI::MIDIPacketList_Deliverer::operator()(uint64_t a1, _DWORD *a2)
{
  __src[1] = *MEMORY[0x1E4F143B8];
  uint64_t v62 = *(void *)(a1 + 8);
  (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(&v63, a1 + 16);
  int v65 = 0;
  uint64_t v64 = &v66;
  uint64_t v53 = a2;
  if (*a2 == 2)
  {
    if (!a2[1]) {
      return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
    }
    int v25 = 0;
    uint64_t v26 = (uint64_t)(a2 + 2);
    uint64_t v49 = a1 + 64;
LABEL_77:
    int v52 = v25;
    uint64_t v27 = *(unsigned int *)(v26 + 8);
    uint64_t v58 = (_DWORD *)(v26 + 12);
    uint64_t v59 = v27;
    uint64_t v51 = v26;
    uint64_t v60 = *(void *)v26;
    uint64_t v61 = 0;
    while (1)
    {
      uint64_t v56 = 0;
      unint64_t v57 = 0;
      uint64_t v55 = 0;
      if (!MIDI::EventList::PacketReader::read((uint64_t *)&v58, &v57, &v55))
      {
        uint64_t v26 = v51 + 4 * *(unsigned int *)(v51 + 8) + 12;
        int v25 = v52 + 1;
        if ((v52 + 1) >= v53[1]) {
          return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
        }
        goto LABEL_77;
      }
      __src[0] = v57;
      uint64_t v28 = v55;
      if (((1 << (v55 >> 28)) & 0xA02F) != 0) {
        break;
      }
      if (v55 >> 28 == 4)
      {
        unsigned int v30 = BYTE3(v55) & 0xF | 0x20;
        unsigned int v31 = HIDWORD(v55);
        switch(BYTE2(v55) >> 4)
        {
          case 2:
          case 3:
            uint64_t v33 = v49 + 48 * (BYTE3(v55) & 0xF);
            unint64_t v34 = ((unint64_t)v55 >> 16) & 0xF;
            __int16 v35 = (unsigned __int8 *)(v33 + 3 * v34);
            unsigned int v36 = (v55 >> 8) & 0x7F;
            unsigned int v37 = v55 & 0x7F;
            if ((v55 & 0x100000) != 0) {
              int v38 = 2;
            }
            else {
              int v38 = 1;
            }
            if (v38 == *v35 && v36 == v35[1])
            {
              int v39 = v34 | 0xB0;
              if (v37 == *(unsigned __int8 *)(v33 + 3 * v34 + 2))
              {
                int v40 = (v30 << 24) | (v39 << 16);
                goto LABEL_99;
              }
            }
            else
            {
              int v39 = v34 | 0xB0;
            }
            unint64_t v50 = ((unint64_t)v55 >> 16) & 0xF;
            if ((v55 & 0x100000) != 0) {
              int v41 = 25344;
            }
            else {
              int v41 = 25856;
            }
            int v40 = (v30 << 24) | (v39 << 16);
            unsigned int v42 = (v55 >> 8) & 0x7F;
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v40 | v41 | v36, 0, (uint64_t)&v62, __src);
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v40 | (v41 - 256) | v37, 0, (uint64_t)&v62, __src);
            *__int16 v35 = v38;
            uint64_t v43 = v33 + 3 * v50;
            *(unsigned char *)(v43 + 1) = v42;
            *(unsigned char *)(v43 + 2) = v37;
LABEL_99:
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v40 | (v31 >> 25) | 0x600, 0, (uint64_t)&v62, __src);
            int v44 = (v31 >> 18) & 0x7F;
            if (!v44) {
              continue;
            }
            unsigned int v29 = 0;
            uint64_t v28 = v44 | v40 | 0x2600u;
            break;
          case 8:
          case 9:
          case 10:
          case 11:
            unsigned int v29 = 0;
            int v32 = BYTE2(v55) >> 4 == 9;
            if (HIDWORD(v55) >> 25) {
              int v32 = HIDWORD(v55) >> 25;
            }
            uint64_t v28 = v32 | (BYTE2(v55) << 16) | (v30 << 24) | v55 & 0x7F00;
            break;
          case 12:
            unsigned int v45 = v30 << 24;
            int v46 = BYTE2(v55) << 16;
            if (v55)
            {
              int v47 = (v46 - 0x100000) | (v30 << 24);
              MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>((v46 - 0x100000) & 0xFFFFFF80 | (v30 << 24) | (HIDWORD(v55) >> 8) & 0x7F, 0, (uint64_t)&v62, __src);
              MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v47 | v31 & 0x7F | 0x2000, 0, (uint64_t)&v62, __src);
            }
            unsigned int v29 = 0;
            uint64_t v28 = HIWORD(v31) & 0x7F00 | v45 | v46;
            break;
          case 13:
            unsigned int v29 = 0;
            uint64_t v28 = (BYTE2(v55) << 16) | (v30 << 24) | (HIDWORD(v55) >> 25 << 8);
            break;
          case 14:
            unsigned int v29 = 0;
            uint64_t v28 = (HIDWORD(v55) >> 10) & 0x7F00 | (BYTE2(v55) << 16) | (v30 << 24) | (HIDWORD(v55) >> 25);
            break;
          default:
            continue;
        }
LABEL_81:
        MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v28, v29, (uint64_t)&v62, __src);
      }
    }
    unsigned int v29 = HIDWORD(v55);
    goto LABEL_81;
  }
  if (*a2 != 1) {
    std::terminate();
  }
  if (a2[1])
  {
    unsigned int v4 = 0;
    uint64_t v5 = a2 + 2;
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v58 = v5 + 3;
      uint64_t v59 = v6;
      uint64_t v60 = *(void *)v5;
      uint64_t v61 = 0;
      while (1)
      {
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        if (!MIDI::EventList::PacketReader::read((uint64_t *)&v58, &v54, &v55)) {
          break;
        }
        uint64_t v7 = v54;
        unsigned int v8 = v55;
        unsigned int v9 = v55 >> 28;
        if (v55 >> 28 == 3)
        {
          unint64_t v13 = ((unint64_t)v55 >> 16) & 0xF;
          if (v13 <= 6 && BYTE2(v55) <= 0x3Fu)
          {
            unint64_t v57 = _byteswap_uint64(__PAIR64__(v55, HIDWORD(v55)));
            if ((v55 & 0x200000) != 0)
            {
              size_t v10 = 0;
              if (!v13) {
                goto LABEL_45;
              }
LABEL_44:
              memcpy((char *)__src + v10, (char *)&v57 + 2, ((unint64_t)v55 >> 16) & 0xF);
              v10 += (v13 - 1) + 1;
              goto LABEL_45;
            }
            LOBYTE(__src[0]) = -16;
            size_t v10 = 1;
            if (v13) {
              goto LABEL_44;
            }
LABEL_45:
            if ((((v8 >> 20) + 3) & 2) != 0) {
              *((unsigned char *)__src + v10++) = -9;
            }
            unint64_t v11 = (unint64_t)v64;
            if (v65)
            {
              uint64_t v20 = *((unsigned __int16 *)v64 + 4);
              if (*(void *)v64 == v7 && *((unsigned __int8 *)v64 + v20 + 9) != 247 && LOBYTE(__src[0]) != 240)
              {
                if ((char *)v64 + v10 + v20 + 10 > (char *)__src) {
                  goto LABEL_63;
                }
                goto LABEL_60;
              }
              unint64_t v11 = ((unint64_t)v64 + v20 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            }
            if (v11 + v10 + 10 > (unint64_t)__src) {
              goto LABEL_63;
            }
            uint64_t v20 = 0;
            ++v65;
            *(void *)unint64_t v11 = v7;
            *(_WORD *)(v11 + 8) = 0;
LABEL_60:
            int v21 = (unsigned char *)(v11 + v20 + 10);
            __int16 v22 = __src;
            switch(v10)
            {
              case 0uLL:
                break;
              case 1uLL:
                goto LABEL_69;
              case 2uLL:
                goto LABEL_68;
              case 3uLL:
                goto LABEL_67;
              case 4uLL:
LABEL_66:
                *v21++ = __src[0];
                __int16 v22 = (uint64_t *)((char *)__src + 1);
LABEL_67:
                char v23 = *(unsigned char *)v22;
                __int16 v22 = (uint64_t *)((char *)v22 + 1);
                *v21++ = v23;
LABEL_68:
                char v24 = *(unsigned char *)v22;
                __int16 v22 = (uint64_t *)((char *)v22 + 1);
                *v21++ = v24;
LABEL_69:
                *int v21 = *(unsigned char *)v22;
                break;
              default:
LABEL_70:
                memmove(v21, __src, v10);
                break;
            }
            *(_WORD *)(v11 + 8) += v10;
LABEL_72:
            uint64_t v64 = (int *)v11;
          }
        }
        else if (v9 == 2)
        {
          int v14 = v55 & 0xE00000;
          LOBYTE(__src[0]) = BYTE2(v55);
          BYTE1(__src[0]) = BYTE1(v55) & 0x7F;
          if ((v55 & 0xE00000) == 0xC00000) {
            size_t v15 = 2;
          }
          else {
            size_t v15 = 3;
          }
          if (v14 != 12582912) {
            BYTE2(__src[0]) = v55 & 0x7F;
          }
          unint64_t v16 = (unint64_t)v64;
          if (v65)
          {
            uint64_t v17 = *((unsigned __int16 *)v64 + 4);
            if (*(void *)v64 == v54 && BYTE2(v55) != 240 && *((unsigned __int8 *)v64 + v17 + 9) != 247)
            {
              if ((char *)v64 + v15 + v17 + 10 > (char *)__src) {
                goto LABEL_39;
              }
              goto LABEL_41;
            }
            unint64_t v16 = ((unint64_t)v64 + v17 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v16 + v15 + 10 > (unint64_t)__src)
          {
LABEL_39:
            unint64_t v16 = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet((uint64_t)&v62, v54, (char *)__src, v15);
            goto LABEL_55;
          }
          uint64_t v17 = 0;
          ++v65;
          *(void *)unint64_t v16 = v54;
          *(_WORD *)(v16 + 8) = 0;
LABEL_41:
          uint64_t v18 = (unsigned char *)(v16 + v17 + 10);
          if (v14 == 12582912)
          {
            int v19 = __src;
          }
          else
          {
            *v18++ = __src[0];
            int v19 = (uint64_t *)((char *)__src + 1);
          }
          unsigned char *v18 = *(unsigned char *)v19;
          v18[1] = *((unsigned char *)v19 + 1);
          *(_WORD *)(v16 + 8) += v15;
LABEL_55:
          uint64_t v64 = (int *)v16;
        }
        else if (v9 == 1 && BYTE2(v55) >= 0xF0u && ((0x22B1uLL >> (BYTE2(v55) + 16)) & 1) == 0)
        {
          size_t v10 = MIDI::system_message_size::sizes[BYTE2(v55) - 240];
          LOBYTE(__src[0]) = BYTE2(v55);
          if (((0xDD40uLL >> (BYTE2(v55) + 16)) & 1) == 0)
          {
            BYTE1(__src[0]) = BYTE1(v55) & 0x7F;
            if (BYTE2(v55) == 242) {
              BYTE2(__src[0]) = v55 & 0x7F;
            }
          }
          unint64_t v11 = (unint64_t)v64;
          if (v65)
          {
            uint64_t v12 = *((unsigned __int16 *)v64 + 4);
            if (*(void *)v64 == v54 && BYTE2(v55) != 240 && *((unsigned __int8 *)v64 + v12 + 9) != 247)
            {
              if ((char *)v64 + v12 + v10 + 10 <= (char *)__src) {
                goto LABEL_65;
              }
LABEL_63:
              unint64_t v11 = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet((uint64_t)&v62, v7, (char *)__src, v10);
              goto LABEL_72;
            }
            unint64_t v11 = ((unint64_t)v64 + v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v11 + v10 + 10 <= (unint64_t)__src)
          {
            uint64_t v12 = 0;
            ++v65;
            *(void *)unint64_t v11 = v54;
            *(_WORD *)(v11 + 8) = 0;
LABEL_65:
            int v21 = (unsigned char *)(v11 + v12 + 10);
            __int16 v22 = __src;
            switch((int)v10)
            {
              case 1:
                goto LABEL_69;
              case 2:
                goto LABEL_68;
              case 3:
                goto LABEL_67;
              case 4:
                goto LABEL_66;
              default:
                goto LABEL_70;
            }
          }
          goto LABEL_63;
        }
      }
      v5 += v5[2] + 3;
      ++v4;
    }
    while (v4 < v53[1]);
  }
  return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
}

void sub_19D7FA058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

uint64_t MIDI::MIDIPacketList_Deliverer::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return (**(uint64_t (***)(uint64_t, uint64_t *))(a1 + 8))(a1 + 16, &v3);
}

void MIDI::MIDIPacketList_Deliverer::~MIDIPacketList_Deliverer(MIDI::MIDIPacketList_Deliverer *this)
{
  *(void *)this = &unk_1EEFA7718;
  (*(void (**)(char *))(*((void *)this + 1) + 24))((char *)this + 16);

  JUMPOUT(0x19F3ABB30);
}

{
  *(void *)this = &unk_1EEFA7718;
  (*(void (**)(char *))(*((void *)this + 1) + 24))((char *)this + 16);
}

uint64_t MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 64))
  {
    uint64_t v3 = a1 + 64;
    (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v3);
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 68;
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1 + 8);
  return a1;
}

uint64_t MIDI::EventList::PacketReader::read(uint64_t *a1, void *a2, _DWORD *a3)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[3];
  if (v4 >= v3) {
    return 0;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = (unsigned int *)(*a1 + 4 * v4);
  unint64_t v7 = *v6;
  unint64_t v8 = v4 + MIDI::UniversalPacket::word_sizes[v7 >> 28];
  if (v8 > v3) {
    return 0;
  }
  *a2 = a1[2];
  switch((uint64_t)(v5 + 4 * v8 - (void)v6) >> 2)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      *a3++ = v7;
      unsigned int v10 = v6[1];
      ++v6;
      LODWORD(v7) = v10;
LABEL_6:
      *a3++ = v7;
      unsigned int v11 = v6[1];
      ++v6;
      LODWORD(v7) = v11;
LABEL_7:
      *a3++ = v7;
      LODWORD(v7) = v6[1];
LABEL_8:
      *a3 = v7;
LABEL_9:
      a1[3] = v8;
      uint64_t result = 1;
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

uint64_t MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v6 = BYTE2(result);
  unsigned int v7 = result >> 28;
  if (result >> 28 == 3)
  {
    size_t v14 = WORD1(result) & 0xF;
    if (v14 > 6 || BYTE2(result) > 0x3Fu) {
      return result;
    }
    unsigned int v15 = (result >> 20) + 3;
    v31[0] = bswap32(result);
    v31[1] = bswap32(a2);
    if ((result & 0x200000) != 0)
    {
      size_t v8 = 0;
      if (!v14) {
        goto LABEL_39;
      }
    }
    else
    {
      unsigned __int8 __src = -16;
      size_t v8 = 1;
      if (!v14)
      {
LABEL_39:
        if ((v15 & 2) != 0) {
          *(&__src + v8++) = -9;
        }
        uint64_t v24 = *a4;
        unint64_t v10 = *(void *)(a3 + 56);
        unint64_t v25 = a3 + 1088;
        int v26 = *(_DWORD *)(a3 + 64);
        if (v26)
        {
          uint64_t v27 = *(unsigned __int16 *)(v10 + 8);
          if (*(void *)v10 == v24 && *(unsigned __int8 *)(v27 + v10 + 9) != 247 && __src != 240)
          {
            if (v10 + v8 + v27 + 10 <= v25) {
              goto LABEL_54;
            }
            goto LABEL_52;
          }
          unint64_t v10 = (v10 + v27 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v10 + v8 + 10 <= v25)
        {
          LODWORD(v27) = 0;
          *(_DWORD *)(a3 + 64) = v26 + 1;
          *(void *)unint64_t v10 = v24;
          *(_WORD *)(v10 + 8) = 0;
LABEL_54:
          uint64_t result = v10 + v27 + 10;
          p_src = &__src;
          switch(v8)
          {
            case 0uLL:
              break;
            case 1uLL:
              goto LABEL_64;
            case 2uLL:
              goto LABEL_63;
            case 3uLL:
              goto LABEL_62;
            case 4uLL:
LABEL_61:
              p_src = (unsigned __int8 *)&v33;
              *(unsigned char *)result++ = __src;
LABEL_62:
              char v29 = *p_src++;
              *(unsigned char *)result++ = v29;
LABEL_63:
              char v30 = *p_src++;
              *(unsigned char *)result++ = v30;
LABEL_64:
              *(unsigned char *)uint64_t result = *p_src;
              break;
            default:
LABEL_65:
              uint64_t result = (uint64_t)memmove((void *)result, &__src, v8);
              break;
          }
          *(_WORD *)(v10 + 8) += v8;
          goto LABEL_67;
        }
LABEL_52:
        uint64_t result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v24, (char *)&__src, v8);
LABEL_58:
        unint64_t v10 = result;
LABEL_67:
        *(void *)(a3 + 56) = v10;
        return result;
      }
    }
    memcpy(&__src + v8, (char *)v31 + 2, v14);
    v8 += (v14 - 1) + 1;
    goto LABEL_39;
  }
  if (v7 == 2)
  {
    int v16 = result & 0xE00000;
    unsigned __int8 __src = BYTE2(result);
    char v33 = BYTE1(result) & 0x7F;
    if ((result & 0xE00000) == 0xC00000) {
      size_t v17 = 2;
    }
    else {
      size_t v17 = 3;
    }
    if (v16 != 12582912) {
      char v34 = result & 0x7F;
    }
    uint64_t v18 = *a4;
    uint64_t result = *(void *)(a3 + 56);
    unint64_t v19 = a3 + 1088;
    int v20 = *(_DWORD *)(a3 + 64);
    if (v20)
    {
      uint64_t v21 = *(unsigned __int16 *)(result + 8);
      if (*(void *)result == v18 && v6 != 240 && *(unsigned __int8 *)(v21 + result + 9) != 247)
      {
        if (result + v17 + v21 + 10 <= v19) {
          goto LABEL_35;
        }
        goto LABEL_33;
      }
      uint64_t result = (result + v21 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (result + v17 + 10 <= v19)
    {
      LODWORD(v21) = 0;
      *(_DWORD *)(a3 + 64) = v20 + 1;
      *(void *)uint64_t result = v18;
      *(_WORD *)(result + 8) = 0;
LABEL_35:
      __int16 v22 = (unsigned __int8 *)(result + v21 + 10);
      if (v16 == 12582912)
      {
        char v23 = &__src;
      }
      else
      {
        char v23 = (unsigned __int8 *)&v33;
        *__int16 v22 = __src;
        __int16 v22 = (unsigned __int8 *)(result + v21 + 11);
      }
      *__int16 v22 = *v23;
      v22[1] = v23[1];
      *(_WORD *)(result + 8) += v17;
      goto LABEL_49;
    }
LABEL_33:
    uint64_t result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v18, (char *)&__src, v17);
LABEL_49:
    *(void *)(a3 + 56) = result;
    return result;
  }
  if (v7 == 1 && BYTE2(result) >= 0xF0u && ((0x22B1uLL >> (BYTE2(result) + 16)) & 1) == 0)
  {
    size_t v8 = MIDI::system_message_size::sizes[BYTE2(result) - 240];
    unsigned __int8 __src = BYTE2(result);
    if (((0xDD40uLL >> (BYTE2(result) + 16)) & 1) == 0)
    {
      char v33 = BYTE1(result) & 0x7F;
      if (BYTE2(result) == 242) {
        char v34 = result & 0x7F;
      }
    }
    uint64_t v9 = *a4;
    unint64_t v10 = *(void *)(a3 + 56);
    unint64_t v11 = a3 + 1088;
    int v12 = *(_DWORD *)(a3 + 64);
    if (v12)
    {
      uint64_t v13 = *(unsigned __int16 *)(v10 + 8);
      if (*(void *)v10 == v9 && BYTE2(result) != 240 && *(unsigned __int8 *)(v13 + v10 + 9) != 247)
      {
        if (v10 + v13 + v8 + 10 <= v11) {
          goto LABEL_60;
        }
LABEL_57:
        uint64_t result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v9, (char *)&__src, v8);
        goto LABEL_58;
      }
      unint64_t v10 = (v10 + v13 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (v10 + v8 + 10 <= v11)
    {
      LODWORD(v1AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
      *(_DWORD *)(a3 + 64) = v12 + 1;
      *(void *)unint64_t v10 = v9;
      *(_WORD *)(v10 + 8) = 0;
LABEL_60:
      uint64_t result = v10 + v13 + 10;
      p_src = &__src;
      switch((int)v8)
      {
        case 1:
          goto LABEL_64;
        case 2:
          goto LABEL_63;
        case 3:
          goto LABEL_62;
        case 4:
          goto LABEL_61;
        default:
          goto LABEL_65;
      }
    }
    goto LABEL_57;
  }
  return result;
}

uint64_t MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  if (*(_DWORD *)(a1 + 64)
    && (uint64_t v16 = a1 + 64,
        (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v16),
        *(_DWORD *)(a1 + 64) = 0,
        uint64_t v8 = a1 + 68,
        a1 + 68 + a4 + 10 <= a1 + 1088))
  {
    *(_DWORD *)(a1 + 64) = 1;
    *(void *)(a1 + 68) = a2;
    *(_WORD *)(a1 + 76) = 0;
    uint64_t v9 = (char *)(a1 + 78);
    __int16 v10 = 0;
    switch(a4)
    {
      case 0uLL:
        break;
      case 1uLL:
        goto LABEL_8;
      case 2uLL:
        goto LABEL_7;
      case 3uLL:
        goto LABEL_6;
      case 4uLL:
        char v11 = *a3++;
        uint64_t v9 = (char *)(a1 + 79);
        *(unsigned char *)(a1 + 78) = v11;
LABEL_6:
        char v12 = *a3++;
        *v9++ = v12;
LABEL_7:
        char v13 = *a3++;
        *v9++ = v13;
LABEL_8:
        *uint64_t v9 = *a3;
        __int16 v10 = *(_WORD *)(a1 + 76);
        break;
      default:
        if (a4) {
          memmove(v9, a3, a4);
        }
        __int16 v10 = 0;
        break;
    }
    *(_WORD *)(a1 + 76) = v10 + a4;
  }
  else
  {
    MIDI::LegacyPacketList::create();
    uint64_t v16 = v15;
    (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v16);
    std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&v15);
    uint64_t v8 = a1 + 68;
    *(void *)(a1 + 56) = a1 + 68;
    *(_DWORD *)(a1 + 64) = 0;
    std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&v15);
  }
  return v8;
}

void sub_19D7FA8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1) {
    return (uint64_t *)MIDI::LegacyPacketListDeleter::operator()();
  }
  return result;
}

void caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::vtable(void)::{lambda(void *,MIDI::LegacyPacketList const*&&)#1}::__invoke()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EENS0_7wrapperIT_EEENUlPvSD_E0_8__invokeESD_SD_(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EENS0_7wrapperIT_EEENUlPvSD_E_8__invokeESD_SD_(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZN17AUGraphMIDINodeV332AllocateMIDIOutputEventListBlockEvEUb_E3__3EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESD_SE_(uint64_t result, unsigned int **a2)
{
  uint64_t v2 = *a2;
  if (**a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = 0;
    unint64_t v5 = (unint64_t)(v2 + 1);
    do
    {
      int v6 = *(uint64_t **)(**(void **)v3 + 176);
      if (v6) {
        uint64_t v7 = *v6;
      }
      else {
        uint64_t v7 = 0;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, void, void, void, unint64_t))(v7 + 16))(v7, **(void **)(v3 + 8), **(unsigned __int8 **)(v3 + 16), *(unsigned __int16 *)(v5 + 8), v5 + 10);
      unint64_t v5 = (v5 + 10 + *(unsigned __int16 *)(v5 + 8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

void AUGraphMIDINodeV3::~AUGraphMIDINodeV3(const void ***this)
{
  AUGraphMIDINodeV3::~AUGraphMIDINodeV3(this);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t vars8;

  *this = (const void **)&unk_1EEFA49C0;
  AUGraphMIDINodeV3::SetMIDIOutputEventListBlock(this, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,MIDIEventList const*)>>::reset[abi:ne180100](this + 23, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(long long,unsigned char,long,unsigned char const*)>>::reset[abi:ne180100](this + 22, 0);

  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);
}

void AUGraphSourceNodeV3::AllocateInputBlock(AUGraphSourceNodeV3 *this)
{
  uint64_t v1 = *(void **)(*((void *)this + 3) + 184);
  if (v1) {
    uint64_t v1 = (void *)*v1;
  }
  uint64_t v2 = MEMORY[0x1E4F143A8];
  uint64_t v3 = 3221225472;
  unsigned int v4 = ___ZN19AUGraphSourceNodeV318AllocateInputBlockEv_block_invoke;
  unint64_t v5 = &unk_1E59649F0;
  int v6 = v1;
  uint64_t v7 = this;
  operator new();
}

void sub_19D7FABC8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19AUGraphSourceNodeV318AllocateInputBlockEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  atomic_store(result, (unsigned int *)(v1 + 160));
  return result;
}

void AUGraphSourceNodeV3::~AUGraphSourceNodeV3(const void ***this)
{
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);

  JUMPOUT(0x19F3ABB30);
}

uint64_t AUGraphMultiBusNode::AllocateInputBlock(AUGraphMultiBusNode *this)
{
  uint64_t result = (*(uint64_t (**)(AUGraphMultiBusNode *))(*(void *)this + 304))(this);
  if (!result)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL19CopyInnerInputBlockP17AUGraphNodeBaseV3_block_invoke;
    aBlock[3] = &__block_descriptor_40_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
    void aBlock[4] = this;
    _Block_copy(aBlock);
    operator new();
  }
  return result;
}

void sub_19D7FAD94(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19AUGraphMultiBusNode18AllocateInputBlockEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t result = caulk::concurrent::details::lf_read_sync_write_impl::begin_access((caulk::concurrent::details::lf_read_sync_write_impl *)(v7 + 216));
  if (*(unsigned char *)(v7 + 216 + result + 8))
  {
    uint64_t v9 = *(void *)(v7 + 24 * result + 232);
    if (a5 >= (*(void *)(v7 + 24 * result + 240) - v9) >> 3) {
      std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
    }
    char v11 = *(caulk::pooled_semaphore_mutex **)(v9 + 8 * a5);
    char v12 = caulk::pooled_semaphore_mutex::try_lock(v11);
    if (v12)
    {
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      uint64_t v10 = 4294956433;
      atomic_store(0xFFFFD591, (unsigned int *)(*(void *)(a1 + 40) + 160));
    }
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v11);
    caulk::concurrent::details::lf_read_sync_write_impl::end_access((caulk::concurrent::details::lf_read_sync_write_impl *)(v7 + 216));
    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19D7FAEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  caulk::concurrent::details::lf_read_sync_write_impl::end_access(v9);
  _Unwind_Resume(a1);
}

uint64_t AUGraphMultiBusNode::InputMutex(AUGraphMultiBusNode *this)
{
  return (uint64_t)this + 152;
}

uint64_t AUGraphMultiBusNode::ConnectInput(os_unfair_lock_s *a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v8 = (caulk::concurrent::details::lf_read_sync_write_impl *)&a1[54];
  uint64_t result = caulk::concurrent::details::lf_read_sync_write_impl::begin_access((caulk::concurrent::details::lf_read_sync_write_impl *)&a1[54]);
  if (!*((unsigned char *)&a1[56]._os_unfair_lock_opaque + result)) {
    goto LABEL_19;
  }
  size_t v17 = a4;
  uint64_t v10 = a1 + 58;
  uint64_t v11 = *(void *)&a1[6 * result + 60]._os_unfair_lock_opaque
      - *(void *)&a1[6 * result + 58]._os_unfair_lock_opaque;
  caulk::concurrent::details::lf_read_sync_write_impl::end_access(v8);
  if (a3 >= (unint64_t)(v11 >> 3))
  {
    v18[0] = v8;
    v18[1] = 0;
    v18[2] = a1 + 55;
    char v19 = 1;
    os_unfair_lock_lock(a1 + 55);
    int v20 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate(v8);
    BOOL v21 = v20 == 0;
    char v12 = (void *)caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::mutator::copy_previous((uint64_t)v18);
    if (a3 >= (unint64_t)((uint64_t)(v12[1] - *v12) >> 3)) {
      operator new();
    }
    caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::mutator::~mutator((uint64_t)v18);
  }
  uint64_t result = caulk::concurrent::details::lf_read_sync_write_impl::begin_access(v8);
  if (*((unsigned char *)&a1[56]._os_unfair_lock_opaque + result))
  {
    uint64_t v13 = *(void *)&v10[6 * result]._os_unfair_lock_opaque;
    if (a3 >= (unint64_t)((*(void *)&v10[6 * result + 2]._os_unfair_lock_opaque - v13) >> 3)) {
      std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
    }
    size_t v14 = *(caulk::pooled_semaphore_mutex **)(v13 + 8 * a3);
    uint64_t v15 = *v17;
    if (*v17)
    {
      uint64_t v16 = (caulk::pooled_semaphore_mutex *)(v15 + 156);
      std::lock[abi:ne180100]<caulk::pooled_semaphore_mutex,caulk::pooled_semaphore_mutex>((caulk::pooled_semaphore_mutex *)(v15 + 156), v14);
      if (a2) {
        (*(void (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 312))(a1);
      }
      AUGraphNodeBase::ConnectInput((uint64_t)a1, a2, a3, (uint64_t)v17);
      caulk::pooled_semaphore_mutex::_unlock(v14);
      caulk::pooled_semaphore_mutex::_unlock(v16);
    }
    else
    {
      caulk::pooled_semaphore_mutex::_lock(v14);
      if (a2) {
        (*(void (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 312))(a1);
      }
      AUGraphNodeBase::ConnectInput((uint64_t)a1, a2, a3, (uint64_t)v17);
      caulk::pooled_semaphore_mutex::_unlock(v14);
    }
    return caulk::concurrent::details::lf_read_sync_write_impl::end_access(v8);
  }
  else
  {
LABEL_19:
    __break(1u);
  }
  return result;
}

void sub_19D7FB218(_Unwind_Exception *a1)
{
  caulk::concurrent::details::lf_read_sync_write_impl::end_access(v1);
  _Unwind_Resume(a1);
}

void sub_19D7FB270(void *a1)
{
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::mutator::copy_previous(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if (*(unsigned char *)(*(void *)result + v2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = v1 + 24 * v2;
    int v6 = *(unsigned char **)(v4 + 16);
    unint64_t v5 = *(unsigned char **)(v4 + 24);
    int64_t v7 = v5 - v6;
    if (v5 == v6)
    {
      uint64_t v10 = 0;
      long long v11 = 0uLL;
    }
    else
    {
      if (v7 < 0) {
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v7 >> 3);
      uint64_t v10 = &v8[8 * v9];
      memmove(v8, v6, v7);
      *(void *)&long long v11 = v8;
      *((void *)&v11 + 1) = &v8[8 * (v7 >> 3)];
      uint64_t v1 = *(void *)v3;
    }
    uint64_t v12 = *(unsigned int *)(v3 + 36);
    uint64_t v13 = v1 + 24 * v12 + 16;
    if (*(unsigned char *)(v1 + 8 + v12))
    {
      size_t v14 = *(void **)v13;
      if (*(void *)v13)
      {
        *(void *)(v1 + 24 * v12 + 24) = v14;
        long long v15 = v11;
        operator delete(v14);
        long long v11 = v15;
      }
    }
    else
    {
      *(unsigned char *)(v1 + 8 + v12) = 1;
    }
    *(_OWORD *)uint64_t v13 = v11;
    *(void *)(v13 + 16) = v10;
    *(void *)(v3 + 8) = v13;
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::mutator::~mutator(uint64_t a1)
{
  uint64_t v2 = *(caulk::concurrent::details::lf_read_sync_write_impl **)a1;
  if (v2)
  {
    if (*(void *)(a1 + 8))
    {
      caulk::concurrent::details::lf_read_sync_write_impl::end_mutate(v2);
      uint64_t v3 = *(caulk::concurrent::details::lf_read_sync_write_impl **)a1;
      uint64_t v4 = *(unsigned int *)(a1 + 32);
      *(unsigned char *)(*(void *)a1 + v4 + 8) = 0;
      unint64_t v5 = (char *)v3 + 24 * v4;
      uint64_t v8 = (void *)*((void *)v5 + 2);
      int64_t v7 = v5 + 16;
      int v6 = v8;
      if (v8)
      {
        *((void *)v7 + 1) = v6;
        operator delete(v6);
      }
    }
  }
  if (*(unsigned char *)(a1 + 24)) {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
  }
  return a1;
}

BOOL AUGraphMultiBusNode::IsMixerNode(AUGraphMultiBusNode *this)
{
  uint64_t v1 = (_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 256))(*((void *)this + 3));
  return *v1 == 1635085688 && v1[1] != 1836281964;
}

BOOL AUGraphMultiBusNode::IsSplitterNode(AUGraphMultiBusNode *this)
{
  uint64_t v1 = (_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 3) + 256))(*((void *)this + 3));
  return *v1 == 1635085688 && v1[1] == 1836281964;
}

uint64_t AUGraphMultiBusNode::CanResizeNumberOfOutputs(AUGraphMultiBusNode *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 112))();
}

uint64_t AUGraphMultiBusNode::CanResizeNumberOfInputs(AUGraphMultiBusNode *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 120))();
}

uint64_t AUGraphMultiBusNode::DisconnectNode(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2 == 1) {
    uint64_t v3 = 48;
  }
  else {
    uint64_t v3 = 72;
  }
  if (a2 == 1) {
    uint64_t v4 = result + 48;
  }
  else {
    uint64_t v4 = result + 72;
  }
  uint64_t v5 = *(void *)(result + v3);
  uint64_t v6 = *(void *)(v4 + 8);
  if (v5 != v6)
  {
    unint64_t v8 = (v6 - v5) >> 3;
    if (v8 > a3)
    {
      uint64_t v9 = result;
      if (a2 == 1) {
        uint64_t v10 = 168;
      }
      else {
        uint64_t v10 = 192;
      }
      if (a2 == 1) {
        uint64_t v11 = result + 168;
      }
      else {
        uint64_t v11 = result + 192;
      }
      if (v8 != (uint64_t)(*(void *)(v11 + 8) - *(void *)(result + v10)) >> 2)
      {
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        uint64_t v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316418;
          BOOL v21 = "AVAEInternal.h";
          __int16 v22 = 1024;
          int v23 = 71;
          __int16 v24 = 2080;
          unint64_t v25 = "AVAEGraphNode.mm";
          __int16 v26 = 1024;
          int v27 = 1728;
          __int16 v28 = 2080;
          char v29 = "DisconnectNode";
          __int16 v30 = 2080;
          unsigned int v31 = "nodeBussesVec.size() == nodeVec.size()";
          _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
        }
        uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nodeBussesVec.size() == nodeVec.size()");
        uint64_t v5 = *(void *)(v9 + v3);
        unint64_t v8 = (*(void *)(v4 + 8) - v5) >> 3;
      }
      if (v8 <= a3) {
        std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)(v5 + 8 * aAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
      uint64_t v13 = *(void *)(v11 + 8);
      uint64_t v14 = *(void *)(v9 + v10);
      if (a3 >= (unint64_t)((v13 - v14) >> 2)) {
        std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
      }
      *(_DWORD *)(v14 + 4 * aAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = -1;
      long long v15 = *(void **)(v9 + v3);
      uint64_t v16 = *(void **)(v4 + 8);
      if (v15 != v16)
      {
        uint64_t v17 = v13 - 4;
        uint64_t v18 = v16 - 1;
        do
        {
          if (*v18) {
            break;
          }
          *(void *)(v4 + 8) = v18;
          *(void *)(v11 + 8) = v17;
          v17 -= 4;
        }
        while (v18-- != v15);
      }
    }
  }
  return result;
}

uint64_t AUGraphMultiBusNode::DisconnectNode(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v8 = (void *)result;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      int v23 = "AVAEInternal.h";
      __int16 v24 = 1024;
      int v25 = 71;
      __int16 v26 = 2080;
      int v27 = "AVAEGraphNode.mm";
      __int16 v28 = 1024;
      int v29 = 1691;
      __int16 v30 = 2080;
      unsigned int v31 = "DisconnectNode";
      __int16 v32 = 2080;
      char v33 = "inNode != nil";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inNode != nil");
  }
  if (a2 == 1)
  {
    uint64_t v11 = v8 + 6;
    uint64_t v10 = (void *)v8[6];
    uint64_t v13 = v8 + 7;
    uint64_t v12 = (void *)v8[7];
    if (v10 == v12) {
      return result;
    }
    uint64_t v14 = v8 + 21;
  }
  else
  {
    uint64_t v11 = v8 + 9;
    uint64_t v10 = (void *)v8[9];
    uint64_t v13 = v8 + 10;
    uint64_t v12 = (void *)v8[10];
    if (v10 == v12) {
      return result;
    }
    uint64_t v14 = v8 + 24;
  }
  unint64_t v15 = (uint64_t)(v14[1] - *v14) >> 2;
  if (v15 != v12 - v10)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      int v23 = "AVAEInternal.h";
      __int16 v24 = 1024;
      int v25 = 71;
      __int16 v26 = 2080;
      int v27 = "AVAEGraphNode.mm";
      __int16 v28 = 1024;
      int v29 = 1698;
      __int16 v30 = 2080;
      unsigned int v31 = "DisconnectNode";
      __int16 v32 = 2080;
      char v33 = "nodeBussesVec.size() == nodeVec.size()";
      _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    uint64_t result = objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nodeBussesVec.size() == nodeVec.size()");
    uint64_t v12 = (void *)*v13;
    uint64_t v10 = (void *)*v11;
    unint64_t v15 = (uint64_t)(*v13 - *v11) >> 3;
  }
  if (v12 != v10)
  {
    uint64_t v17 = 0;
    unsigned int v18 = 1;
    while (v10[v17] != a4 || *(_DWORD *)(*v14 + 4 * v17) != a5)
    {
      uint64_t v17 = v18;
      if (v15 <= v18++) {
        goto LABEL_25;
      }
    }
    v10[v17] = 0;
    *(_DWORD *)(*v14 + 4 * v17) = -1;
    uint64_t v10 = (void *)*v11;
    uint64_t v12 = (void *)*v13;
LABEL_25:
    if (v10 != v12)
    {
      int v20 = v12 - 1;
      do
      {
        if (*v20) {
          break;
        }
        *uint64_t v13 = v20;
        v14[1] -= 4;
      }
      while (v20-- != v10);
    }
  }
  return result;
}

char *AUGraphMultiBusNode::AddNode(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      int v40 = "AVAEInternal.h";
      __int16 v41 = 1024;
      int v42 = 71;
      __int16 v43 = 2080;
      int v44 = "AVAEGraphNode.mm";
      __int16 v45 = 1024;
      int v46 = 1661;
      __int16 v47 = 2080;
      unint64_t v48 = "AddNode";
      __int16 v49 = 2080;
      unint64_t v50 = "inNode != nil";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "inNode != nil");
  }
  if (a2 == 1) {
    uint64_t v10 = 48;
  }
  else {
    uint64_t v10 = 72;
  }
  if (a2 == 1) {
    uint64_t v11 = a1 + 48;
  }
  else {
    uint64_t v11 = a1 + 72;
  }
  uint64_t v12 = *(void **)(v11 + 8);
  uint64_t v13 = *(void *)(a1 + v10);
  for (unint64_t i = ((uint64_t)v12 - v13) >> 3; (int)i <= (int)a3; unint64_t i = ((uint64_t)v12 - v13) >> 3)
  {
    unint64_t v15 = *(void *)(v11 + 16);
    if ((unint64_t)v12 >= v15)
    {
      if ((i + 1) >> 61) {
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v15 - v13;
      uint64_t v17 = v16 >> 2;
      if (v16 >> 2 <= i + 1) {
        uint64_t v17 = i + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v18);
      }
      else {
        uint64_t v19 = 0;
      }
      int v20 = (void *)(v18 + 8 * i);
      void *v20 = 0;
      uint64_t v12 = v20 + 1;
      BOOL v21 = *(char **)(v11 + 8);
      __int16 v22 = *(char **)(a1 + v10);
      if (v21 != v22)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *--int v20 = v23;
        }
        while (v21 != v22);
        BOOL v21 = *(char **)(a1 + v10);
      }
      *(void *)(a1 + v10) = v20;
      *(void *)(v11 + 8) = v12;
      *(void *)(v11 + 16) = v18 + 8 * v19;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *v12++ = 0;
    }
    *(void *)(v11 + 8) = v12;
    uint64_t v13 = *(void *)(a1 + v10);
  }
  if (i <= a3) {
    std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
  }
  *(void *)(v13 + 8 * aAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = a4;
  BOOL v24 = a2 == 1;
  if (a2 == 1) {
    uint64_t v25 = 168;
  }
  else {
    uint64_t v25 = 192;
  }
  if (v24) {
    uint64_t v26 = a1 + 168;
  }
  else {
    uint64_t v26 = a1 + 192;
  }
  int v27 = *(char **)(v26 + 8);
  uint64_t result = *(char **)(a1 + v25);
  for (j = (v27 - result) >> 2; (int)j <= (int)a3; int v27 = v31)
  {
    unint64_t v30 = *(void *)(v26 + 16);
    if ((unint64_t)v27 >= v30)
    {
      unint64_t v32 = j + 1;
      if ((j + 1) >> 62) {
        std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = v30 - (void)result;
      if (v33 >> 1 > v32) {
        unint64_t v32 = v33 >> 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<EExtAudioGraphNodeState>>(v34);
        int v27 = *(char **)(v26 + 8);
        uint64_t result = *(char **)(a1 + v25);
      }
      else
      {
        uint64_t v35 = 0;
      }
      unsigned int v36 = (char *)(v34 + 4 * j);
      *(_DWORD *)unsigned int v36 = -1;
      unsigned int v31 = v36 + 4;
      while (v27 != result)
      {
        int v37 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v36 - 1) = v37;
        v36 -= 4;
      }
      *(void *)(a1 + v25) = v36;
      *(void *)(v26 + 8) = v31;
      *(void *)(v26 + 16) = v34 + 4 * v35;
      if (result)
      {
        operator delete(result);
        uint64_t result = *(char **)(a1 + v25);
      }
      else
      {
        uint64_t result = v36;
      }
    }
    else
    {
      *(_DWORD *)int v27 = -1;
      unsigned int v31 = v27 + 4;
    }
    *(void *)(v26 + 8) = v31;
    unint64_t j = (v31 - result) >> 2;
  }
  if (j <= a3) {
    std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
  }
  *(_DWORD *)&result[4 * a3] = a5;
  return result;
}

uint64_t AUGraphMultiBusNode::GetBusForConnectionPoint(uint64_t *a1, int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *a4 = -1;
  if (a2 == 1)
  {
    int64_t v7 = a1 + 6;
    uint64_t v6 = a1[6];
    uint64_t v9 = a1 + 7;
    uint64_t v8 = a1[7];
    if (v6 != v8)
    {
      uint64_t v10 = a1 + 21;
      goto LABEL_6;
    }
    return 0;
  }
  int64_t v7 = a1 + 9;
  uint64_t v6 = a1[9];
  uint64_t v9 = a1 + 10;
  uint64_t v8 = a1[10];
  if (v6 == v8) {
    return 0;
  }
  uint64_t v10 = a1 + 24;
LABEL_6:
  unint64_t v11 = (uint64_t)(v10[1] - *v10) >> 2;
  if (v11 != (v8 - v6) >> 3)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      uint64_t v17 = "AVAEInternal.h";
      __int16 v18 = 1024;
      int v19 = 71;
      __int16 v20 = 2080;
      BOOL v21 = "AVAEGraphNode.mm";
      __int16 v22 = 1024;
      int v23 = 1645;
      __int16 v24 = 2080;
      uint64_t v25 = "GetBusForConnectionPoint";
      __int16 v26 = 2080;
      int v27 = "nodeBussesVec.size() == nodeVec.size()";
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nodeBussesVec.size() == nodeVec.size()");
    uint64_t v8 = *v9;
    uint64_t v6 = *v7;
    unint64_t v11 = (*v9 - *v7) >> 3;
  }
  if (v8 == v6) {
    return 0;
  }
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  while (*(void *)a3 != *(void *)(v6 + 8 * v13) || *(_DWORD *)(a3 + 8) != *(_DWORD *)(*v10 + 4 * v13))
  {
    uint64_t v13 = ++v14;
    if (v11 <= v14) {
      return 0;
    }
  }
  *a4 = v14;
  return 1;
}

uint64_t AUGraphMultiBusNode::GetConnectionPoint(uint64_t a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v4 = a1 + 48;
  uint64_t v5 = 72;
  if (a2 == 1) {
    uint64_t v5 = 48;
  }
  else {
    uint64_t v4 = a1 + 72;
  }
  if (*(void *)(a1 + v5) == *(void *)(v4 + 8)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result)
  {
    uint64_t v11 = result;
    if (a2 == 1) {
      uint64_t v12 = 168;
    }
    else {
      uint64_t v12 = 192;
    }
    if (a2 == 1) {
      uint64_t v13 = a1 + 168;
    }
    else {
      uint64_t v13 = a1 + 192;
    }
    uint64_t v14 = *(void *)(a1 + v12);
    unint64_t v15 = (*(void *)(v13 + 8) - v14) >> 2;
    if (v15 < a3 + 1)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      uint64_t v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        int v19 = "AVAEInternal.h";
        __int16 v20 = 1024;
        int v21 = 71;
        __int16 v22 = 2080;
        int v23 = "AVAEGraphNode.mm";
        __int16 v24 = 1024;
        int v25 = 1627;
        __int16 v26 = 2080;
        int v27 = "GetConnectionPoint";
        __int16 v28 = 2080;
        int v29 = "nodeBussesVec.size() >= (inBus + 1)";
        _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nodeBussesVec.size() >= (inBus + 1)");
      uint64_t v14 = *(void *)(a1 + v12);
      unint64_t v15 = (*(void *)(v13 + 8) - v14) >> 2;
    }
    if (v15 <= a3) {
      std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
    }
    int v17 = *(_DWORD *)(v14 + 4 * a3);
    *a4 = v11;
    *((_DWORD *)a4 + 2) = v17;
    return 1;
  }
  return result;
}

uint64_t AUGraphMultiBusNode::GetConnection(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = a3;
  int v6 = a2;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if (a2 == 1)
  {
    *(void *)(a4 + 16) = a1;
    *(_DWORD *)(a4 + 24) = a3;
    uint64_t v8 = a1 + 6;
  }
  else
  {
    *(void *)a4 = a1;
    *(_DWORD *)(a4 + 8) = a3;
    uint64_t v8 = a1 + 9;
  }
  if (*v8 == v8[1]) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 24))(a1, a2, a3);
  if (result)
  {
    uint64_t v10 = result;
    if (v6 == 1) {
      uint64_t v11 = 21;
    }
    else {
      uint64_t v11 = 24;
    }
    if (v6 == 1) {
      uint64_t v12 = a1 + 21;
    }
    else {
      uint64_t v12 = a1 + 24;
    }
    uint64_t v13 = a1[v11];
    unint64_t v14 = (v12[1] - v13) >> 2;
    if (v14 < v5 + 1)
    {
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      unint64_t v15 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316418;
        int v19 = "AVAEInternal.h";
        __int16 v20 = 1024;
        int v21 = 71;
        __int16 v22 = 2080;
        int v23 = "AVAEGraphNode.mm";
        __int16 v24 = 1024;
        int v25 = 1595;
        __int16 v26 = 2080;
        int v27 = "GetConnection";
        __int16 v28 = 2080;
        int v29 = "nodeBussesVec.size() >= (inBus + 1)";
        _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nodeBussesVec.size() >= (inBus + 1)");
      uint64_t v13 = a1[v11];
      unint64_t v14 = (v12[1] - v13) >> 2;
    }
    if (v14 <= v5) {
      std::vector<AUGraphNodeBaseV3 *>::__throw_out_of_range[abi:ne180100]();
    }
    int v16 = *(_DWORD *)(v13 + 4 * v5);
    if (v6 == 1)
    {
      *(void *)a4 = v10;
      int v17 = (_DWORD *)(a4 + 8);
    }
    else
    {
      *(void *)(a4 + 16) = v10;
      int v17 = (_DWORD *)(a4 + 24);
    }
    _DWORD *v17 = v16;
    return 1;
  }
  return result;
}

void AUGraphMultiBusNode::~AUGraphMultiBusNode(os_unfair_lock_s *this)
{
  AUGraphMultiBusNode::~AUGraphMultiBusNode(this);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  const void *v5;
  int64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void v12[3];
  char v13;
  int v14;
  BOOL v15;

  *(void *)&this->_os_unfair_lock_opaque = &unk_1EEFA5460;
  v12[0] = this + 54;
  v12[1] = 0;
  v12[2] = this + 55;
  uint64_t v13 = 1;
  os_unfair_lock_lock(this + 55);
  unint64_t v14 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((caulk::concurrent::details::lf_read_sync_write_impl *)&this[54]);
  unint64_t v15 = v14 == 0;
  uint64_t v2 = caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::mutator::copy_previous((uint64_t)v12);
  uint64_t v3 = (void *)v2;
  unsigned int v5 = *(const void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  int v6 = v4 - *(void *)v2;
  if (v4 == *(void *)v2)
  {
    *(void *)(v2 + 8) = *(void *)v2;
    caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::mutator::~mutator((uint64_t)v12);
  }
  else
  {
    if (v6 < 0) {
      std::vector<EExtAudioGraphNodeState>::__throw_length_error[abi:ne180100]();
    }
    int64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<AUGraphNodeBaseV3 *>>(v6 >> 3);
    memmove(v7, v5, v6);
    v3[1] = *v3;
    caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::mutator::~mutator((uint64_t)v12);
    uint64_t v8 = 8 * (v6 >> 3);
    uint64_t v9 = v7;
    do
    {
      if (*v9) {
        MEMORY[0x19F3ABB30](*v9, 0x1000C4052888210);
      }
      ++v9;
      v8 -= 8;
    }
    while (v8);
    if (v7) {
      operator delete(v7);
    }
  }
  caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::~lf_read_synchronized_write((uint64_t)&this[54]);
  uint64_t v10 = *(void **)&this[48]._os_unfair_lock_opaque;
  if (v10)
  {
    *(void *)&this[50]._os_unfair_lock_opaque = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)&this[42]._os_unfair_lock_opaque;
  if (v11)
  {
    *(void *)&this[44]._os_unfair_lock_opaque = v11;
    operator delete(v11);
  }
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3((const void ***)this);
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<caulk::pooled_semaphore_mutex *>>::~lf_read_synchronized_write(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      operator delete(v2);
    }
  }
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3)
    {
      *(void *)(a1 + 48) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void *AUGraphNodeBase::DescAsString(AUGraphNodeBase *this, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  uint64_t v3 = (const AudioComponentDescription *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 256))(a2);
  unsigned int v5 = AudioComponentDescriptionAsString(v3, (char *)v7, v4);
  return std::string::basic_string[abi:ne180100]<0>(this, v5);
}

_OWORD *AUGraphNodeBase::GetValidConnections(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = std::__list_imp<AUGraphConnection>::clear(a3);
  uint64_t v7 = 80;
  if (a2 == 1) {
    uint64_t v7 = 56;
  }
  uint64_t v8 = 72;
  if (a2 == 1) {
    uint64_t v8 = 48;
  }
  unint64_t v9 = *(void *)(a1 + v7) - *(void *)(a1 + v8);
  *(void *)&long long v14 = 0;
  DWORD2(v14) = -1;
  unint64_t v10 = v9 >> 3;
  *(void *)&long long v15 = 0;
  DWORD2(v15) = -1;
  if ((int)(v9 >> 3) >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t result = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)a1 + 32))(a1, a2, v11, &v14);
      if (result)
      {
        uint64_t result = operator new(0x30uLL);
        long long v12 = v15;
        result[1] = v14;
        result[2] = v12;
        uint64_t v13 = *a3;
        *(void *)uint64_t result = *a3;
        *((void *)result + 1) = a3;
        *(void *)(v13 + 8) = result;
        *a3 = (uint64_t)result;
        ++a3[2];
      }
      uint64_t v11 = (v11 + 1);
    }
    while (v10 != v11);
  }
  return result;
}

_OWORD *AUGraphNodeBase::GetValidConnectionPoints(void *a1, uint64_t *a2)
{
  uint64_t result = std::__list_imp<AUGraphConnection>::clear(a2);
  uint64_t v5 = (a1[10] - a1[9]) >> 3;
  *(void *)&long long v8 = 0;
  DWORD2(v8) = -1;
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t result = (_OWORD *)(*(uint64_t (**)(void *, void, uint64_t, long long *))(*a1 + 40))(a1, 0, v6, &v8);
      if (result)
      {
        uint64_t result = operator new(0x20uLL);
        result[1] = v8;
        uint64_t v7 = *a2;
        *(void *)uint64_t result = *a2;
        *((void *)result + 1) = a2;
        *(void *)(v7 + 8) = result;
        *a2 = (uint64_t)result;
        ++a2[2];
      }
      uint64_t v6 = (v6 + 1);
    }
    while (v5 != v6);
  }
  return result;
}

void *AUGraphNodeBase::CalculateMaxFrames(AUGraphNodeBase *this, unsigned int a2, double a3)
{
  uint64_t result = (void *)(*(uint64_t (**)(AUGraphNodeBase *))(*(void *)this + 152))(this);
  if (result)
  {
    if (a3 > 0.0
      && (uint64_t result = (void *)(*(uint64_t (**)(void, void))(**((void **)this + 3) + 48))(*((void *)this + 3), 0)) != 0&& (uint64_t result = (void *)[result sampleRate], v7 > 0.0))
    {
      if (v7 != a3) {
        a2 = (vcvtpd_u64_f64(v7 * (double)a2 / a3) & 0xFFFFFFE0) + 32;
      }
    }
    else
    {
      a2 = 0;
    }
    *((_DWORD *)this + 9) = a2;
  }
  return result;
}

void AUGraphNodeBase::PrintNodeObject(AUGraphNodeBase *this, __sFILE *a2, const char *a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int16x8_t v4 = (void *)(*(uint64_t (**)(AUGraphNodeBase *, __sFILE *, const char *))(*(void *)this + 16))(this, a2, a3);
  uint64_t v5 = (const void *)v4[3];
  AUGraphNodeBase::DescAsString((AUGraphNodeBase *)__p, (uint64_t)v5);
  if ((SBYTE7(v44) & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (*(unsigned char *)(v4[3] + 48)) {
    double v7 = "I";
  }
  else {
    double v7 = "U";
  }
  fprintf(a2, "\n\t node %p {%s}, '%s'\n", v5, (const char *)v6, v7);
  if (SBYTE7(v44) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = v4[6];
  if (((unint64_t)(v4[7] - v8) >> 3))
  {
    fprintf(a2, "\t\t inputs = %d\n", (unint64_t)(v4[7] - v8) >> 3);
    if ((int)((v4[7] - v4[6]) >> 3) >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v39 = 0;
        int v40 = -1;
        uint64_t v41 = 0;
        int v42 = -1;
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t *))(*v4 + 32))(v4, 1, v9, &v39);
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v44 = 0u;
        memset(&v38, 0, sizeof(v38));
        unint64_t v10 = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)v4[3] + 72))(v4[3], v9);
        if (v10)
        {
          uint64_t v11 = [v10 streamDescription];
          long long v12 = *(_OWORD *)(v11 + 16);
          *(_OWORD *)&v38.double var0 = *(_OWORD *)v11;
          *(_OWORD *)&v38.float var3 = v12;
          *(void *)&v38.float var7 = *(void *)(v11 + 32);
        }
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v4[3] + 40))(v4[3]);
        int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 72))(v13, 1, v9);
        int v17 = v40;
        uint64_t v18 = v39;
        if (v39)
        {
          int v19 = *(const void **)(v39 + 24);
          AUGraphNodeBase::DescAsString((AUGraphNodeBase *)v36, (uint64_t)v19);
          if (v37 >= 0) {
            __int16 v20 = (const char *)v36;
          }
          else {
            __int16 v20 = (const char *)v36[0];
          }
        }
        else
        {
          int v19 = 0;
          __int16 v20 = "";
        }
        CAStreamBasicDescription::AsString(&v38, (char *)__p, 0x80uLL, v15, v16);
        fprintf(a2, "\t\t\t (bus%d, en%d) <- (bus%d) %p, {%s}, [%s]\n", v9, v14, v17, v19, v20, (const char *)__p);
        if (v18 && v37 < 0) {
          operator delete(v36[0]);
        }
        ++v9;
      }
      while (v9 < (int)((v4[7] - v4[6]) >> 3));
    }
  }
  uint64_t v21 = v4[9];
  if (((unint64_t)(v4[10] - v21) >> 3))
  {
    fprintf(a2, "\t\t outputs = %d\n", (unint64_t)(v4[10] - v21) >> 3);
    if ((int)((v4[10] - v4[9]) >> 3) >= 1)
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v39 = 0;
        int v40 = -1;
        uint64_t v41 = 0;
        int v42 = -1;
        (*(void (**)(void *, void, uint64_t, uint64_t *))(*v4 + 32))(v4, 0, v22, &v39);
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v44 = 0u;
        memset(&v38, 0, sizeof(v38));
        int v23 = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)v4[3] + 48))(v4[3], v22);
        if (v23)
        {
          uint64_t v24 = [v23 streamDescription];
          long long v25 = *(_OWORD *)(v24 + 16);
          *(_OWORD *)&v38.double var0 = *(_OWORD *)v24;
          *(_OWORD *)&v38.float var3 = v25;
          *(void *)&v38.float var7 = *(void *)(v24 + 32);
        }
        uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v4[3] + 40))(v4[3]);
        int v27 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v26 + 72))(v26, 0, v22);
        int v30 = v42;
        uint64_t v31 = v41;
        if (v41)
        {
          unint64_t v32 = *(const void **)(v41 + 24);
          AUGraphNodeBase::DescAsString((AUGraphNodeBase *)v34, (uint64_t)v32);
          if (v35 >= 0) {
            uint64_t v33 = (const char *)v34;
          }
          else {
            uint64_t v33 = (const char *)v34[0];
          }
        }
        else
        {
          unint64_t v32 = 0;
          uint64_t v33 = "";
        }
        CAStreamBasicDescription::AsString(&v38, (char *)__p, 0x100uLL, v28, v29);
        fprintf(a2, "\t\t\t (bus%d, en%d) -> (bus%d) %p, {%s}, [%s]\n", v22, v27, v30, v32, v33, (const char *)__p);
        if (v31)
        {
          if (v35 < 0) {
            operator delete(v34[0]);
          }
        }
        ++v22;
      }
      while (v22 < (int)((v4[10] - v4[9]) >> 3));
    }
  }
}

void sub_19D7FCF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void AUGraphNodeBaseV3::AUGraphNodeBaseV3(AUGraphNodeBaseV3 *this, AVAudioNode *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EEFA41C0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a2;
  uint64_t v3 = [(AVAudioNode *)a2 impl];
  *((void *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v3;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  if (*((void *)this + 2))
  {
    if (v3) {
      goto LABEL_14;
    }
  }
  else
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    int16x8_t v4 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316418;
      double v7 = "AVAEInternal.h";
      __int16 v8 = 1024;
      int v9 = 71;
      __int16 v10 = 2080;
      uint64_t v11 = "AVAEGraphNode.mm";
      __int16 v12 = 1024;
      int v13 = 141;
      __int16 v14 = 2080;
      double v15 = "AUGraphNodeBase";
      __int16 v16 = 2080;
      int v17 = "nil != _avNode";
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nil != _avNode");
    if (*((void *)this + 3))
    {
LABEL_14:
      *((_OWORD *)this + 6) = 0u;
      *(void *)this = &unk_1EEFA4B50;
      *((_OWORD *)this + 7) = 0u;
      *((_OWORD *)this + 8) = 0u;
      *((void *)this + 18) = 0;
      caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUGraphNodeBaseV3 *)((char *)this + 152));
      caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((AUGraphNodeBaseV3 *)((char *)this + 156));
      *((_DWORD *)this + 40) = 0;
      operator new();
    }
  }
  if (AVAudioEngineLogCategory(void)::once != -1) {
    dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
  }
  uint64_t v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
  if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136316418;
    double v7 = "AVAEInternal.h";
    __int16 v8 = 1024;
    int v9 = 71;
    __int16 v10 = 2080;
    uint64_t v11 = "AVAEGraphNode.mm";
    __int16 v12 = 1024;
    int v13 = 142;
    __int16 v14 = 2080;
    double v15 = "AUGraphNodeBase";
    __int16 v16 = 2080;
    int v17 = "nullptr != _avNodeImpl";
    _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
  }
  objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "nullptr != _avNodeImpl");
  goto LABEL_14;
}

void sub_19D7FD3EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  int16x8_t v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN17AUGraphSinkNodeV319AllocateRenderBlockEv_block_invoke(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  uint64_t v3 = a1[6];
  if (!result) {
    uint64_t result = (*(uint64_t (**)(void))(a1[5] + 16))();
  }
  atomic_store(result, (unsigned int *)(v3 + 160));
  return result;
}

uint64_t AUGraphSinkNodeV3::IsSinkNode(AUGraphSinkNodeV3 *this)
{
  return 1;
}

void AUGraphSinkNodeV3::~AUGraphSinkNodeV3(const void ***this)
{
  AUGraphNodeBaseV3::~AUGraphNodeBaseV3(this);

  JUMPOUT(0x19F3ABB30);
}

void sub_19D7FD5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7FD648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7FD6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7FD790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7FD848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___Z36AVAudioDeviceTestServicePulseToneLogv_block_invoke()
{
}

void PulseTone::PulseTone(PulseTone *this, double a2, double a3, double a4, int a5, double a6, double a7, double a8, double a9)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)this = 0;
  *((void *)this + 2) = 0;
  *((double *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = a3;
  *((void *)this + 5) = 0;
  *((double *)this + 9) = a2;
  *((unsigned char *)this + 80) = 0;
  double v11 = fmax(a6, 1.0);
  double v12 = fmin(a8, v11);
  double v13 = 0.0;
  if (v12 != 0.0) {
    double v13 = a2 / (1000.0 / v12);
  }
  *((double *)this + 8) = v13;
  if (a5) {
    int v14 = a5;
  }
  else {
    int v14 = -1;
  }
  *((_DWORD *)this + 1AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v14;
  *((_DWORD *)this + 14) = (int)(a2 / (1000.0 / v11));
  if (a7 == 0.0) {
    int v15 = 0;
  }
  else {
    int v15 = (int)(a2 / (1000.0 / a7));
  }
  *((_DWORD *)this + 15) = v15;
  double v16 = fmax(a9, 0.0);
  if (v16 == 0.0) {
    int v17 = 0;
  }
  else {
    int v17 = (int)(a2 / (-1000.0 / v16));
  }
  *((_DWORD *)this + 12) = v17;
  float v18 = a4 * 0.05;
  float v19 = __exp10f(v18);
  double v20 = v19;
  if (v19 > 1.0)
  {
    if (AVAudioDeviceTestServicePulseToneLog(void)::once != -1) {
      dispatch_once(&AVAudioDeviceTestServicePulseToneLog(void)::once, &__block_literal_global_2789);
    }
    uint64_t v21 = *(id *)AVAudioDeviceTestServicePulseToneLog(void)::category;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315650;
      int v23 = "PulseTone.mm";
      __int16 v24 = 1024;
      int v25 = 142;
      __int16 v26 = 2048;
      double v27 = v20;
      _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Playing tone above amplitude of 1.0. { amplitude=%f }", (uint8_t *)&v22, 0x1Cu);
    }
  }
  *((double *)this + 4) = v20;
  *((double *)this + 1) = (*((double *)this + 8) + (double)*((int *)this + 14)) / a2;
}

void sub_19D7FDB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D7FDC10(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19D7FDD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7FDE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7FDF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7FDFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D7FE090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D7FE144(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

uint64_t AVAudioMixerNodeImpl::ConnectInput(AVAudioNodeImplBase *this, uint64_t a2, AVAudioNodeImplBase *a3, uint64_t a4)
{
  return 1;
}

void AVAudioMixerNodeImpl::~AVAudioMixerNodeImpl(id *this)
{
  AVAudioUnitImpl::~AVAudioUnitImpl(this);

  JUMPOUT(0x19F3ABB30);
}

void sub_19D7FE41C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10F1C4021999281);
  _Unwind_Resume(a1);
}

void CADeprecated::CAGuard::Locker::~Locker(CADeprecated::CAGuard::Locker *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

AVAudioTime *AVAudioClockImpl::CurrentTime(atomic_ullong *this)
{
  int v2 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v3 = (long long *)(this + 3);
  while (1)
  {
    unint64_t explicit = atomic_load_explicit(this + 2, memory_order_acquire);
    if ((explicit & 1) == 0)
    {
      long long v5 = v3[1];
      long long v8 = *v3;
      long long v9 = v5;
      long long v6 = v3[3];
      long long v10 = v3[2];
      long long v11 = v6;
      if (explicit == atomic_load_explicit(this + 2, memory_order_acquire)) {
        break;
      }
    }
    if (++v2 == 5)
    {
      sched_yield();
      int v2 = 0;
    }
  }
  return +[AVAudioTime timeWithAudioTimeStamp:&v8 sampleRate:*((double *)this + 1)];
}

void *AVAudioClockImpl::StreamFormatListener(void *this, void *a2, OpaqueAudioComponentInstance *a3, int a4, int a5)
{
  if (a4 == 2 && !a5)
  {
    long long v5 = this;
    this = objc_msgSend((id)(*(uint64_t (**)(void, void, uint64_t))(*(void *)*this + 56))(*this, 0, 1), "sampleRate");
    v5[1] = v6;
  }
  return this;
}

uint64_t AVAudioClockImpl::RenderCallback(AVAudioClockImpl *this, _DWORD *a2, unsigned int *a3, const AudioTimeStamp *a4, unsigned int a5, unsigned int a6, AudioBufferList *a7, double a8, double a9)
{
  if ((*a2 & 4) != 0)
  {
    atomic_store(a5, (unsigned int *)this + 22);
    atomic_fetch_add_explicit((atomic_ullong *volatile)this + 2, 1uLL, memory_order_acquire);
    long long v15 = *(_OWORD *)a3;
    long long v16 = *((_OWORD *)a3 + 1);
    long long v17 = *((_OWORD *)a3 + 2);
    *(_OWORD *)((char *)this + 72) = *((_OWORD *)a3 + 3);
    *(_OWORD *)((char *)this + 56) = v17;
    *(_OWORD *)((char *)this + 40) = v16;
    *(_OWORD *)((char *)this + 24) = v15;
    atomic_fetch_add_explicit((atomic_ullong *volatile)this + 2, 1uLL, memory_order_release);
    if (*((unsigned char *)this + 104))
    {
      uint64_t v18 = *((void *)this + 12);
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 80))(v18);
      }
    }
  }
  else if ((*a2 & 8) != 0)
  {
    unsigned int v9 = a3[14];
    if (v9)
    {
      double v10 = *((double *)this + 1);
      if (v10 > 0.0)
      {
        double v11 = *(double *)a3 + (double)a5;
        unint64_t v12 = 3;
        if ((~v9 & 3) == 0)
        {
          if ((v9 & 4) != 0)
          {
            a9 = *((double *)a3 + 2);
            double v14 = a9 * 24000000.0;
            int v13 = 7;
          }
          else
          {
            int v13 = 3;
            double v14 = 24000000.0;
          }
          unint64_t v12 = (unint64_t)((double)*((uint64_t *)a3 + 1) + (v11 - *(double *)a3) * (v14 / v10));
          goto LABEL_15;
        }
        if ((v9 & 2) == 0)
        {
          int v13 = 1;
LABEL_15:
          atomic_fetch_add_explicit((atomic_ullong *volatile)this + 2, 1uLL, memory_order_acquire);
          *((double *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v11;
          *((void *)this + 4) = v12;
          *((double *)this + 5) = a9;
          *((_OWORD *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v20;
          *((_OWORD *)this + 4) = v21;
          *((_DWORD *)this + 20) = v13;
          atomic_fetch_add_explicit((atomic_ullong *volatile)this + 2, 1uLL, memory_order_release);
        }
      }
    }
  }
  return 0;
}

void sub_19D7FE9D4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x1020C40C17CD2A5);
  _Unwind_Resume(a1);
}

void ___ZN14MIDIPlayerImpl4stopEv_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  int v2 = *(const void **)(a1 + 32);

  _Block_release(v2);
}

uint64_t MIDIPlayerImpl::finishLoad(MIDIPlayerImpl *this, NSURL *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  AUGraph outGraph = 0;
  uint64_t AUGraph = MusicSequenceGetAUGraph(this->var2, &outGraph);
  if (AUGraph)
  {
    uint64_t v4 = AUGraph;
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    long long v5 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316674;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      __int16 v49 = 1024;
      int v50 = 104;
      __int16 v51 = 2080;
      long long v52 = "AVMIDIPlayer.mm";
      __int16 v53 = 1024;
      int v54 = 324;
      __int16 v55 = 2080;
      long long v56 = "finishLoad";
      __int16 v57 = 2080;
      long long v58 = "MusicSequenceGetAUGraph(mSequence, &graph)";
      __int16 v59 = 1024;
      int v60 = v4;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v4);
  }
  uint64_t v6 = outGraph;
  UInt32 ioLength = 4096;
  double inData = *(double *)&a2;
  UInt32 outNumberOfNodes = 0;
  uint64_t v7 = AUGraphOpen(outGraph);
  if (v7)
  {
    uint64_t v8 = v7;
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    unsigned int v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316674;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      __int16 v49 = 1024;
      int v50 = 104;
      __int16 v51 = 2080;
      long long v52 = "AVMIDIPlayer.mm";
      __int16 v53 = 1024;
      int v54 = 460;
      __int16 v55 = 2080;
      long long v56 = "SetUpGraph";
      __int16 v57 = 2080;
      long long v58 = "AUGraphOpen(inGraph)";
      __int16 v59 = 1024;
      int v60 = v8;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v8);
  }
  uint64_t NodeCount = AUGraphGetNodeCount(v6, &outNumberOfNodes);
  if (NodeCount)
  {
    uint64_t v11 = NodeCount;
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    unint64_t v12 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316674;
      *(void *)&uint8_t buf[4] = "AVAEInternal.h";
      __int16 v49 = 1024;
      int v50 = 104;
      __int16 v51 = 2080;
      long long v52 = "AVMIDIPlayer.mm";
      __int16 v53 = 1024;
      int v54 = 462;
      __int16 v55 = 2080;
      long long v56 = "SetUpGraph";
      __int16 v57 = 2080;
      long long v58 = "AUGraphGetNodeCount (inGraph, &nodeCount)";
      __int16 v59 = 1024;
      int v60 = v11;
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v11);
  }
  if (outNumberOfNodes)
  {
    UInt32 v13 = 0;
    while (1)
    {
      AUNode outNode = 0;
      uint64_t IndNode = AUGraphGetIndNode(v6, v13, &outNode);
      if (IndNode)
      {
        uint64_t v15 = IndNode;
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        long long v16 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316674;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          __int16 v49 = 1024;
          int v50 = 104;
          __int16 v51 = 2080;
          long long v52 = "AVMIDIPlayer.mm";
          __int16 v53 = 1024;
          int v54 = 467;
          __int16 v55 = 2080;
          long long v56 = "SetUpGraph";
          __int16 v57 = 2080;
          long long v58 = "AUGraphGetIndNode(inGraph, i, &node)";
          __int16 v59 = 1024;
          int v60 = v15;
          _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v15);
      }
      AudioUnit outAudioUnit = 0;
      UInt32 outDataSize = 0;
      Boolean outWritable = 0;
      uint64_t v17 = AUGraphNodeInfo(v6, outNode, &outDescription, &outAudioUnit);
      if (v17)
      {
        uint64_t v18 = v17;
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        float v19 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316674;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          __int16 v49 = 1024;
          int v50 = 104;
          __int16 v51 = 2080;
          long long v52 = "AVMIDIPlayer.mm";
          __int16 v53 = 1024;
          int v54 = 473;
          __int16 v55 = 2080;
          long long v56 = "SetUpGraph";
          __int16 v57 = 2080;
          long long v58 = "AUGraphNodeInfo(inGraph, node, &desc, &unit)";
          __int16 v59 = 1024;
          int v60 = v18;
          _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v18);
      }
      if (inData != 0.0
        && outDescription.componentType == 1635085685
        && !AudioUnitGetPropertyInfo(outAudioUnit, 0x44Cu, 0, 0, &outDataSize, &outWritable))
      {
        if (outWritable)
        {
          uint64_t result = AudioUnitSetProperty(outAudioUnit, 0x44Cu, 0, 0, &inData, 8u);
          if (result) {
            break;
          }
        }
      }
      uint64_t v21 = AudioUnitSetProperty(outAudioUnit, 0xEu, 0, 0, &ioLength, 4u);
      if (v21)
      {
        uint64_t v22 = v21;
        if (AVAudioEngineLogCategory(void)::once != -1) {
          dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
        }
        int v23 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
        if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316674;
          *(void *)&uint8_t buf[4] = "AVAEInternal.h";
          __int16 v49 = 1024;
          int v50 = 104;
          __int16 v51 = 2080;
          long long v52 = "AVMIDIPlayer.mm";
          __int16 v53 = 1024;
          int v54 = 497;
          __int16 v55 = 2080;
          long long v56 = "SetUpGraph";
          __int16 v57 = 2080;
          long long v58 = "AudioUnitSetProperty (unit, kAudioUnitProperty_MaximumFramesPerSlice, kAudioUnitScope_Global, 0, &numFra"
                "mes, sizeof(numFrames))";
          __int16 v59 = 1024;
          int v60 = v22;
          _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
        }
        objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v22);
      }
      if (++v13 >= outNumberOfNodes) {
        goto LABEL_45;
      }
    }
  }
  else
  {
LABEL_45:
    uint64_t v24 = AUGraphInitialize(v6);
    if (v24)
    {
      uint64_t v25 = v24;
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      __int16 v26 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        __int16 v49 = 1024;
        int v50 = 104;
        __int16 v51 = 2080;
        long long v52 = "AVMIDIPlayer.mm";
        __int16 v53 = 1024;
        int v54 = 500;
        __int16 v55 = 2080;
        long long v56 = "SetUpGraph";
        __int16 v57 = 2080;
        long long v58 = "AUGraphInitialize(inGraph)";
        __int16 v59 = 1024;
        int v60 = v25;
        _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v25);
    }
    LODWORD(outAudioUnit) = 0;
    uint64_t TrackCount = MusicSequenceGetTrackCount(this->var2, (UInt32 *)&outAudioUnit);
    if (TrackCount)
    {
      uint64_t v28 = TrackCount;
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      int16x8_t v29 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        __int16 v49 = 1024;
        int v50 = 104;
        __int16 v51 = 2080;
        long long v52 = "AVMIDIPlayer.mm";
        __int16 v53 = 1024;
        int v54 = 332;
        __int16 v55 = 2080;
        long long v56 = "finishLoad";
        __int16 v57 = 2080;
        long long v58 = "MusicSequenceGetTrackCount(mSequence, &trackCount)";
        __int16 v59 = 1024;
        int v60 = v28;
        _os_log_impl(&dword_19D794000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v28);
    }
    if (outAudioUnit)
    {
      UInt32 v30 = 0;
      double v31 = 0.0;
      do
      {
        *(void *)&outDescription.componentType = 0;
        MusicSequenceGetIndTrack(this->var2, v30, (MusicTrack *)&outDescription);
        double inData = 0.0;
        UInt32 ioLength = 8;
        uint64_t Property = MusicTrackGetProperty(*(MusicTrack *)&outDescription.componentType, 5u, &inData, &ioLength);
        if (Property)
        {
          uint64_t v33 = Property;
          if (AVAudioEngineLogCategory(void)::once != -1) {
            dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
          }
          unint64_t v34 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
          if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316674;
            *(void *)&uint8_t buf[4] = "AVAEInternal.h";
            __int16 v49 = 1024;
            int v50 = 104;
            __int16 v51 = 2080;
            long long v52 = "AVMIDIPlayer.mm";
            __int16 v53 = 1024;
            int v54 = 338;
            __int16 v55 = 2080;
            long long v56 = "finishLoad";
            __int16 v57 = 2080;
            long long v58 = "MusicTrackGetProperty(track, kSequenceTrackProperty_TrackLength, &length, &plength)";
            __int16 v59 = 1024;
            int v60 = v33;
            _os_log_impl(&dword_19D794000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
          }
          objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v33);
        }
        if (inData > v31) {
          double v31 = inData;
        }
        ++v30;
      }
      while (v30 < outAudioUnit);
    }
    else
    {
      double v31 = 0.0;
    }
    this->float var3 = v31;
    uint64_t v35 = MusicSequenceSetUserCallback(this->var2, (MusicSequenceUserCallback)MIDIPlayerImpl::userCallback, this);
    if (v35)
    {
      uint64_t v36 = v35;
      if (AVAudioEngineLogCategory(void)::once != -1) {
        dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
      }
      char v37 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
      if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136316674;
        *(void *)&uint8_t buf[4] = "AVAEInternal.h";
        __int16 v49 = 1024;
        int v50 = 104;
        __int16 v51 = 2080;
        long long v52 = "AVMIDIPlayer.mm";
        __int16 v53 = 1024;
        int v54 = 344;
        __int16 v55 = 2080;
        long long v56 = "finishLoad";
        __int16 v57 = 2080;
        long long v58 = "MusicSequenceSetUserCallback(mSequence, userCallback, this)";
        __int16 v59 = 1024;
        int v60 = v36;
        _os_log_impl(&dword_19D794000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d [%s:%d:%s: (%s): error %d", buf, 0x3Cu);
      }
      objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"error %d", v36);
    }
    *(void *)int buf = 0;
    uint64_t result = MusicSequenceGetIndTrack(this->var2, 0, (MusicTrack *)buf);
    if (!result)
    {
      *(void *)&outDescription.componentType = 0x8600000001;
      return MusicTrackNewUserEvent(*(MusicTrack *)buf, v31, (const MusicEventUserData *)&outDescription);
    }
  }
  return result;
}

void MIDIPlayerImpl::userCallback(MIDIPlayerImpl *this, void *a2, OpaqueMusicSequence *a3, OpaqueMusicTrack *a4, double a5, const MusicEventUserData *a6, double a7, double a8)
{
  if (*(_DWORD *)a4 == 1 && *((unsigned __int8 *)a4 + 4) == 134)
  {
    id var4 = this->var4;
    if (var4)
    {
      unsigned int var1 = this->var1;
      this->id var4 = 0;
      unsigned int var5 = this->var5;
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = ___ZN14MIDIPlayerImpl12userCallbackEPvP19OpaqueMusicSequenceP16OpaqueMusicTrackdPK18MusicEventUserDatadd_block_invoke;
      v11[3] = &unk_1E5965A60;
      void v11[4] = var4;
      void v11[5] = var1;
      dispatch_async(var5, v11);
    }
  }
}

void ___ZN14MIDIPlayerImpl12userCallbackEPvP19OpaqueMusicSequenceP16OpaqueMusicTrackdPK18MusicEventUserDatadd_block_invoke(uint64_t a1)
{
  MusicPlayerStop(*(MusicPlayer *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  int v2 = *(const void **)(a1 + 32);

  _Block_release(v2);
}

void sub_19D800C18(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_19D800F98(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    id v3 = v2;
    __cxa_end_catch();
    JUMPOUT(0x19D800F0CLL);
  }
  _Unwind_Resume(exception_object);
}

void AVVCKeepAliveImpl_AudioQueue::~AVVCKeepAliveImpl_AudioQueue(AVVCKeepAliveImpl_AudioQueue *this)
{
  AVVCKeepAliveImpl_AudioQueue::~AVVCKeepAliveImpl_AudioQueue(this);

  JUMPOUT(0x19F3ABB30);
}

{
  NSObject *v1;
  id v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EEFA6DF8;
  if (kAVVCScope)
  {
    uint64_t v1 = *(id *)kAVVCScope;
    if (!v1) {
      return;
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
    int v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = 136315394;
    uint64_t v4 = "AVVCKeepAliveImpl_AudioQueue.mm";
    long long v5 = 1024;
    uint64_t v6 = 137;
    _os_log_impl(&dword_19D794000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCKeepAliveImpl_AudioQueue destroyed", (uint8_t *)&v3, 0x12u);
  }
}

OpaqueAudioQueue *AVVCKeepAliveImpl_AudioQueue::destroy(AVVCKeepAliveImpl_AudioQueue *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v9, "_destroyKeepAliveQueue");
  int v2 = (OpaqueAudioQueue *)*((void *)this + 1);
  if (!v2) {
    goto LABEL_18;
  }
  *((void *)this + 1) = 0;
  ElapsedTime::ElapsedTime((ElapsedTime *)v16, "destroy", "_destroyKeepAliveQueue : AudioQueueStop", 0);
  OSStatus v3 = AudioQueueStop(v2, 1u);
  if (v3)
  {
    if (kAVVCScope)
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      uint64_t v11 = "AVVCKeepAliveImpl_AudioQueue.mm";
      __int16 v12 = 1024;
      int v13 = 128;
      __int16 v14 = 1024;
      OSStatus v15 = v3;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d _destroyKeepAliveQueue, AudioQueueDispose returned error : %d", buf, 0x18u);
    }
  }
LABEL_10:
  ElapsedTime::~ElapsedTime((ElapsedTime *)v16);
  int v2 = (OpaqueAudioQueue *)AudioQueueDispose(v2, 0);
  if (v2)
  {
    if (kAVVCScope)
    {
      uint64_t v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v6 = MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v16 = 136315650;
      uint64_t v17 = "AVVCKeepAliveImpl_AudioQueue.mm";
      __int16 v18 = 1024;
      int v19 = 131;
      __int16 v20 = 1024;
      int v21 = (int)v2;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d _destroyKeepAliveQueue, AudioQueueDispose returned error : %d", v16, 0x18u);
    }
  }
LABEL_18:
  TraceMethod::~TraceMethod((TraceMethod *)v9);
  return v2;
}

void sub_19D8013A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t AVVCKeepAliveImpl_AudioQueue::stop(AVVCKeepAliveImpl_AudioQueue *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v5, "stopKeepAliveQueue");
  if (kAVVCScope)
  {
    int v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    int v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315394;
    id v7 = "AVVCKeepAliveImpl_AudioQueue.mm";
    __int16 v8 = 1024;
    int v9 = 112;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d About to stop keepAliveQueue", buf, 0x12u);
  }

LABEL_8:
  AVVCKeepAliveImpl_AudioQueue::keepHardwareActive(this, 0);
  TraceMethod::~TraceMethod((TraceMethod *)v5);
  return 0;
}

void sub_19D8014E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void AVVCKeepAliveImpl_AudioQueue::keepHardwareActive(AVVCKeepAliveImpl_AudioQueue *this, int a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  ElapsedTime::ElapsedTime((ElapsedTime *)v47, "keepHardwareActive", 0, 0);
  TraceMethod::TraceMethod((TraceMethod *)v32, "keepHardwareActive");
  if (kAVVCScope)
  {
    uint64_t v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "false";
    int v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
    *(_DWORD *)int buf = 136315650;
    if (a2) {
      uint64_t v6 = "true";
    }
    __int16 v41 = 1024;
    int v42 = 61;
    __int16 v43 = 2080;
    long long v44 = v6;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d keep-alive _keepHardwareActive: %s", buf, 0x1Cu);
  }

LABEL_10:
  if (!*((void *)this + 1))
  {
    if (kAVVCScope)
    {
      int v9 = *(id *)kAVVCScope;
      if (!v9) {
        goto LABEL_78;
      }
    }
    else
    {
      int v9 = MEMORY[0x1E4F14500];
      id v15 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_77;
    }
    *(_DWORD *)int buf = 136315394;
    int v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
    __int16 v41 = 1024;
    int v42 = 94;
    long long v16 = "%25s:%-5d keep-alive keepHardwareActive: queue is null -- noop";
    uint64_t v17 = v9;
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
    uint32_t v19 = 18;
    goto LABEL_76;
  }
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "keepHardwareActive", "keepHardwareActive: queue running check", 0);
  unsigned int v7 = QueueIsRunning(*((OpaqueAudioQueue **)this + 1));
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  if (kAVVCScope)
  {
    __int16 v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_25;
    }
  }
  else
  {
    __int16 v8 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = "FALSE";
    if (a2) {
      uint64_t v11 = "TRUE";
    }
    int v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
    __int16 v41 = 1024;
    int v42 = 71;
    __int16 v12 = "Running";
    *(_DWORD *)int buf = 136315906;
    long long v44 = v11;
    __int16 v43 = 2080;
    if (!v7) {
      __int16 v12 = "Not Running";
    }
    __int16 v45 = 2080;
    long long v46 = v12;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC keep-alive state : makeActive - %s : QueueRuning - %s", buf, 0x26u);
  }

LABEL_25:
  if (((a2 ^ 1 | v7) & 1) == 0)
  {
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "keepHardwareActive", "mKeepAliveQueue: AudioQueueStart", 0);
    OSStatus v13 = AudioQueueStart(*((AudioQueueRef *)this + 1), 0);
    if (v13)
    {
      if (kAVVCScope)
      {
        __int16 v14 = *(id *)kAVVCScope;
        if (!v14) {
          goto LABEL_61;
        }
      }
      else
      {
        __int16 v14 = MEMORY[0x1E4F14500];
        id v20 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      *(_DWORD *)uint64_t v33 = 136315650;
      unint64_t v34 = "AVVCKeepAliveImpl_AudioQueue.mm";
      __int16 v35 = 1024;
      int v36 = 79;
      __int16 v37 = 1024;
      OSStatus v38 = v13;
      int v21 = "%25s:%-5d AVVC started keep-alive queue but failed (%d)";
      uint64_t v22 = v14;
      os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (kAVVCScope)
      {
        __int16 v14 = *(id *)kAVVCScope;
        if (!v14) {
          goto LABEL_61;
        }
      }
      else
      {
        __int16 v14 = MEMORY[0x1E4F14500];
        id v24 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_60;
      }
      *(_DWORD *)uint64_t v33 = 136315650;
      unint64_t v34 = "AVVCKeepAliveImpl_AudioQueue.mm";
      __int16 v35 = 1024;
      int v36 = 81;
      __int16 v37 = 1024;
      OSStatus v38 = 0;
      int v21 = "%25s:%-5d AVVC started keep-alive queue (%d)";
      uint64_t v22 = v14;
      os_log_type_t v23 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl(&dword_19D794000, v22, v23, v21, v33, 0x18u);
    goto LABEL_60;
  }
  if (a2 & 1) != 0 || ((v7 ^ 1)) {
    goto LABEL_78;
  }
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "keepHardwareActive", "mKeepAliveQueue: AudioQueueStop", 0);
  OSStatus v13 = AudioQueueStop(*((AudioQueueRef *)this + 1), 1u);
  if (v13)
  {
    if (kAVVCScope)
    {
      __int16 v14 = *(id *)kAVVCScope;
      if (!v14) {
        goto LABEL_61;
      }
    }
    else
    {
      __int16 v14 = MEMORY[0x1E4F14500];
      id v25 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v33 = 136315650;
      unint64_t v34 = "AVVCKeepAliveImpl_AudioQueue.mm";
      __int16 v35 = 1024;
      int v36 = 87;
      __int16 v37 = 1024;
      OSStatus v38 = v13;
      __int16 v26 = "%25s:%-5d AVVC stopped keep-alive queue but failed (%d)";
      double v27 = v14;
      os_log_type_t v28 = OS_LOG_TYPE_ERROR;
LABEL_59:
      _os_log_impl(&dword_19D794000, v27, v28, v26, v33, 0x18u);
      goto LABEL_60;
    }
    goto LABEL_60;
  }
  if (!kAVVCScope)
  {
    __int16 v14 = MEMORY[0x1E4F14500];
    id v29 = MEMORY[0x1E4F14500];
LABEL_57:
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v33 = 136315650;
      unint64_t v34 = "AVVCKeepAliveImpl_AudioQueue.mm";
      __int16 v35 = 1024;
      int v36 = 89;
      __int16 v37 = 1024;
      OSStatus v38 = 0;
      __int16 v26 = "%25s:%-5d AVVC stopped keep-alive queue (%d)";
      double v27 = v14;
      os_log_type_t v28 = OS_LOG_TYPE_DEBUG;
      goto LABEL_59;
    }
LABEL_60:

    goto LABEL_61;
  }
  __int16 v14 = *(id *)kAVVCScope;
  if (v14) {
    goto LABEL_57;
  }
LABEL_61:
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  if (v13)
  {
    if ((v13 + 199999) > 0x61A7E)
    {
      if (kAVVCScope)
      {
        int v9 = *(id *)kAVVCScope;
        if (!v9) {
          goto LABEL_78;
        }
      }
      else
      {
        int v9 = MEMORY[0x1E4F14500];
        id v31 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_77;
      }
      *(_DWORD *)int buf = 136315650;
      int v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
      __int16 v41 = 1024;
      int v42 = 91;
      __int16 v43 = 1024;
      LODWORD(v44) = v13;
      long long v16 = "%25s:%-5d ERROR: _keepHardwareActive: AudioQueueStart/Stop err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        int v9 = *(id *)kAVVCScope;
        if (!v9) {
          goto LABEL_78;
        }
      }
      else
      {
        int v9 = MEMORY[0x1E4F14500];
        id v30 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_77;
      }
      *(_DWORD *)int buf = 136315650;
      int v40 = "AVVCKeepAliveImpl_AudioQueue.mm";
      __int16 v41 = 1024;
      int v42 = 91;
      __int16 v43 = 1024;
      LODWORD(v44) = v13;
      long long v16 = "%25s:%-5d ERROR: _keepHardwareActive: AudioQueueStart/Stop err %d";
    }
    uint64_t v17 = v9;
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
    uint32_t v19 = 24;
LABEL_76:
    _os_log_impl(&dword_19D794000, v17, v18, v16, buf, v19);
LABEL_77:
  }
LABEL_78:
  TraceMethod::~TraceMethod((TraceMethod *)v32);
  ElapsedTime::~ElapsedTime((ElapsedTime *)v47);
}

void sub_19D801BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t AVVCKeepAliveImpl_AudioQueue::start(AVVCKeepAliveImpl_AudioQueue *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v5, "startKeepAliveQueue");
  if (kAVVCScope)
  {
    int v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    int v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315394;
    unsigned int v7 = "AVVCKeepAliveImpl_AudioQueue.mm";
    __int16 v8 = 1024;
    int v9 = 103;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d About to start keepAliveQueue", buf, 0x12u);
  }

LABEL_8:
  AVVCKeepAliveImpl_AudioQueue::keepHardwareActive(this, 1);
  TraceMethod::~TraceMethod((TraceMethod *)v5);
  return 0;
}

void sub_19D801CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t AVVCKeepAliveImpl_AudioQueue::create(AudioQueueRef *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  ElapsedTime::ElapsedTime((ElapsedTime *)v25, "create", 0, 0);
  TraceMethod::TraceMethod((TraceMethod *)v17, "createKeepAliveQueue");
  int v2 = this + 1;
  if (!this[1])
  {
    if (kAVVCScope)
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "AVVCKeepAliveImpl_AudioQueue.mm";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 36;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating keepAliveQueue", (uint8_t *)&buf, 0x12u);
    }

LABEL_10:
    *(void *)&buf.UInt32 mBitsPerChannel = 16;
    buf.mSampleRate = 16000.0;
    *(_OWORD *)&buf.AudioFormatID mFormatID = xmmword_19D8B1CF0;
    *(void *)&buf.UInt32 mBytesPerFrame = 0x100000002;
    uint64_t v6 = AudioQueueNewOutput(&buf, (AudioQueueOutputCallback)AQOutputCallback, this, 0, 0, 0, this + 1);
    uint64_t v3 = v6;
    if (v6)
    {
      if ((v6 + 199999) > 0x61A7E)
      {
        if (kAVVCScope)
        {
          unsigned int v7 = *(id *)kAVVCScope;
          if (!v7) {
            goto LABEL_41;
          }
        }
        else
        {
          unsigned int v7 = MEMORY[0x1E4F14500];
          id v10 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        *(_DWORD *)os_log_type_t v18 = 136315650;
        uint32_t v19 = "AVVCKeepAliveImpl_AudioQueue.mm";
        __int16 v20 = 1024;
        int v21 = 42;
        __int16 v22 = 1024;
        LODWORD(v2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v3;
        int v9 = "%25s:%-5d ERROR: createKeepAliveQueue: AudioQueueNewOutput err %{audio:4CC}d";
      }
      else
      {
        if (kAVVCScope)
        {
          unsigned int v7 = *(id *)kAVVCScope;
          if (!v7) {
            goto LABEL_41;
          }
        }
        else
        {
          unsigned int v7 = MEMORY[0x1E4F14500];
          id v8 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        *(_DWORD *)os_log_type_t v18 = 136315650;
        uint32_t v19 = "AVVCKeepAliveImpl_AudioQueue.mm";
        __int16 v20 = 1024;
        int v21 = 42;
        __int16 v22 = 1024;
        LODWORD(v2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v3;
        int v9 = "%25s:%-5d ERROR: createKeepAliveQueue: AudioQueueNewOutput err %d";
      }
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, v9, v18, 0x18u);
    }
    else
    {
      uint64_t v3 = AudioQueueSetProperty(*v2, 0x63756964u, &AudioQueueProperty_KeepAliveQueueClientName, 8u);
      if (v3)
      {
        if (kAVVCScope)
        {
          unsigned int v7 = *(id *)kAVVCScope;
          if (!v7) {
            goto LABEL_41;
          }
        }
        else
        {
          unsigned int v7 = MEMORY[0x1E4F14500];
          id v11 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        *(_DWORD *)os_log_type_t v18 = 136315650;
        uint32_t v19 = "AVVCKeepAliveImpl_AudioQueue.mm";
        __int16 v20 = 1024;
        int v21 = 49;
        __int16 v22 = 2112;
        os_log_type_t v23 = @"AVVoiceController_KeepAliveQueue";
        __int16 v12 = "%25s:%-5d FAILED _createKeepAliveQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
        OSStatus v13 = v7;
        os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      }
      else
      {
        if (kAVVCScope)
        {
          unsigned int v7 = *(id *)kAVVCScope;
          if (!v7) {
            goto LABEL_41;
          }
        }
        else
        {
          unsigned int v7 = MEMORY[0x1E4F14500];
          id v15 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_40;
        }
        *(_DWORD *)os_log_type_t v18 = 136315650;
        uint32_t v19 = "AVVCKeepAliveImpl_AudioQueue.mm";
        __int16 v20 = 1024;
        int v21 = 51;
        __int16 v22 = 2112;
        os_log_type_t v23 = @"AVVoiceController_KeepAliveQueue";
        __int16 v12 = "%25s:%-5d _createKeepAliveQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
        OSStatus v13 = v7;
        os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl(&dword_19D794000, v13, v14, v12, v18, 0x1Cu);
    }
LABEL_40:

    goto LABEL_41;
  }
  uint64_t v3 = 0;
LABEL_41:
  TraceMethod::~TraceMethod((TraceMethod *)v17);
  ElapsedTime::~ElapsedTime((ElapsedTime *)v25);
  return v3;
}

void sub_19D802120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  _Unwind_Resume(a1);
}

id AVVCRouteManager::getRecordDeviceUID(id *this)
{
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  if (IsSerializationEnabled(void)::enable)
  {
    id v2 = this[2];
  }
  else
  {
    uint64_t v3 = (std::mutex *)(this + 7);
    std::mutex::lock((std::mutex *)(this + 7));
    id v2 = this[2];
    std::mutex::unlock(v3);
  }

  return v2;
}

void AVVCRouteManager::getRecordRoute(uint64_t a1, void **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 56);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v5 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock(v4);
  }
  uint64_t v6 = [*(id *)(a1 + 32) copy];
  uint64_t v7 = *a2;
  *a2 = (void *)v6;

  if (!v5)
  {
    std::mutex::unlock(v4);
  }
}

void sub_19D802288(_Unwind_Exception *exception_object)
{
  if (!v2) {
    std::mutex::unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AVVCRouteManager::isOutputHandsFree(id *this)
{
  int v2 = (std::mutex *)(this + 7);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock(v2);
  }
  if (([this[5] isEqualToString:*MEMORY[0x1E4F4E960]] & 1) == 0
    && ([this[5] isEqualToString:*MEMORY[0x1E4F4E968]] & 1) == 0
    && ([this[5] isEqualToString:*MEMORY[0x1E4F4E988]] & 1) == 0)
  {
    uint64_t v4 = [this[5] isEqualToString:*MEMORY[0x1E4F4E9A8]] ^ 1;
    if (v3) {
      return v4;
    }
    goto LABEL_9;
  }
  uint64_t v4 = 0;
  if (!v3) {
LABEL_9:
  }
    std::mutex::unlock(v2);
  return v4;
}

void sub_19D802384(_Unwind_Exception *exception_object)
{
  if (!v2) {
    std::mutex::unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AVVCRouteManager::isOutputWiredHeadset(id *this)
{
  int v2 = (std::mutex *)(this + 7);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v3 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock(v2);
  }
  uint64_t v4 = [this[5] isEqualToString:*MEMORY[0x1E4F4E988]];
  if (!v3) {
    std::mutex::unlock(v2);
  }
  return v4;
}

void sub_19D80242C(_Unwind_Exception *exception_object)
{
  if (!v2) {
    std::mutex::unlock(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PlatformUtilities_iOS::GetProductType(PlatformUtilities_iOS *this)
{
  if (PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck == 1) {
    return PlatformUtilities_iOS::GetProductType(void)::sType;
  }
  PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck = 1;
  uint64_t v2 = MGGetProductType();
  if (v2 <= 2144123135)
  {
    if (v2 > 1309571157)
    {
      if (v2 > 1701146936)
      {
        if (v2 <= 2021146988)
        {
          if (v2 > 1834147426)
          {
            if (v2 <= 1895344377)
            {
              if (v2 == 1834147427) {
                goto LABEL_277;
              }
              if (v2 != 1868379043)
              {
                if (v2 == 1878257790)
                {
                  uint64_t result = 75;
                  goto LABEL_409;
                }
                goto LABEL_408;
              }
              goto LABEL_191;
            }
            if (v2 == 1895344378)
            {
              uint64_t result = 80;
              goto LABEL_409;
            }
            if (v2 == 1990293942)
            {
              uint64_t result = 128;
              goto LABEL_409;
            }
            uint64_t v6 = 2001966017;
LABEL_263:
            if (v2 != v6) {
              goto LABEL_408;
            }
            goto LABEL_264;
          }
          if (v2 <= 1737882205)
          {
            switch(v2)
            {
              case 1701146937:
                uint64_t result = 43;
                goto LABEL_409;
              case 1721691077:
                uint64_t result = 16;
                goto LABEL_409;
              case 1733600853:
                uint64_t result = 116;
                goto LABEL_409;
            }
            goto LABEL_408;
          }
          if (v2 == 1737882206)
          {
            uint64_t result = 104;
            goto LABEL_409;
          }
          if (v2 != 1744899922)
          {
            if (v2 == 1756509290)
            {
              uint64_t result = 132;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
          goto LABEL_321;
        }
        if (v2 <= 2081274471)
        {
          if (v2 > 2048538370)
          {
            switch(v2)
            {
              case 2048538371:
                uint64_t result = 54;
                goto LABEL_409;
              case 2078329141:
                uint64_t result = 29;
                goto LABEL_409;
              case 2080700391:
                uint64_t result = 40;
                goto LABEL_409;
            }
            goto LABEL_408;
          }
          if (v2 == 2021146989)
          {
            uint64_t result = 18;
            goto LABEL_409;
          }
          if (v2 == 2023824667) {
            goto LABEL_191;
          }
          if (v2 != 2032616841) {
            goto LABEL_408;
          }
          goto LABEL_326;
        }
        if (v2 <= 2103978417)
        {
          if (v2 == 2081274472) {
            goto LABEL_314;
          }
          if (v2 == 2085054105)
          {
            uint64_t result = 146;
            goto LABEL_409;
          }
          if (v2 != 2089455188) {
            goto LABEL_408;
          }
LABEL_161:
          uint64_t result = 95;
          goto LABEL_409;
        }
        if (v2 != 2103978418)
        {
          if (v2 == 2132302344)
          {
            uint64_t result = 136;
            goto LABEL_409;
          }
          uint64_t v9 = 2141052862;
          goto LABEL_320;
        }
LABEL_332:
        uint64_t result = 86;
        goto LABEL_409;
      }
      if (v2 > 1419435330)
      {
        if (v2 <= 1559256612)
        {
          if (v2 > 1517755654)
          {
            switch(v2)
            {
              case 1517755655:
                uint64_t result = 150;
                goto LABEL_409;
              case 1540760353:
                uint64_t result = 5;
                goto LABEL_409;
              case 1549248876:
                uint64_t result = 151;
                goto LABEL_409;
            }
          }
          else
          {
            switch(v2)
            {
              case 1419435331:
                uint64_t result = 130;
                goto LABEL_409;
              case 1429914406:
                uint64_t result = 23;
                goto LABEL_409;
              case 1434404433:
                uint64_t result = 17;
                goto LABEL_409;
            }
          }
          goto LABEL_408;
        }
        if (v2 <= 1608945769)
        {
          switch(v2)
          {
            case 1559256613:
              uint64_t result = 49;
              goto LABEL_409;
            case 1573906122:
              uint64_t result = 126;
              goto LABEL_409;
            case 1602181456:
              uint64_t result = 142;
              goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 == 1608945770)
        {
          uint64_t result = 169;
          goto LABEL_409;
        }
        if (v2 != 1625227434)
        {
          if (v2 == 1644180312)
          {
            uint64_t result = 133;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
LABEL_329:
        uint64_t result = 94;
        goto LABEL_409;
      }
      if (v2 > 1373516432)
      {
        if (v2 > 1408738133)
        {
          switch(v2)
          {
            case 1408738134:
              uint64_t result = 138;
              goto LABEL_409;
            case 1412429328:
              uint64_t result = 59;
              goto LABEL_409;
            case 1415625992:
              uint64_t result = 124;
              goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 != 1373516433)
        {
          if (v2 == 1380747801)
          {
            uint64_t result = 115;
            goto LABEL_409;
          }
          if (v2 == 1402208364)
          {
            uint64_t result = 118;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_191;
      }
      if (v2 <= 1353145732)
      {
        if (v2 == 1309571158)
        {
          uint64_t result = 129;
          goto LABEL_409;
        }
        if (v2 == 1325975682)
        {
          uint64_t result = 61;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      if (v2 != 1353145733)
      {
        if (v2 != 1364038516)
        {
          if (v2 == 1371389549)
          {
            uint64_t result = 27;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_313;
      }
LABEL_264:
      uint64_t result = 82;
      goto LABEL_409;
    }
    if (v2 > 676119127)
    {
      if (v2 <= 1060988940)
      {
        if (v2 <= 776033018)
        {
          if (v2 <= 698697054)
          {
            if (v2 == 676119128)
            {
              uint64_t result = 134;
              goto LABEL_409;
            }
            if (v2 == 689804742)
            {
              uint64_t result = 34;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
          if (v2 != 698697055)
          {
            if (v2 != 746003606)
            {
              if (v2 != 761631964) {
                goto LABEL_408;
              }
              goto LABEL_327;
            }
            goto LABEL_277;
          }
LABEL_313:
          uint64_t result = 171;
          goto LABEL_409;
        }
        if (v2 <= 896202453)
        {
          if (v2 == 776033019)
          {
            uint64_t result = 51;
            goto LABEL_409;
          }
          if (v2 == 810906663) {
            goto LABEL_136;
          }
          uint64_t v4 = 820711327;
          goto LABEL_311;
        }
        if (v2 == 896202454)
        {
          uint64_t result = 65;
          goto LABEL_409;
        }
        if (v2 != 910181310)
        {
          uint64_t v8 = 952317141;
          goto LABEL_254;
        }
LABEL_326:
        uint64_t result = 25;
        goto LABEL_409;
      }
      if (v2 <= 1234705394)
      {
        if (v2 > 1114644380)
        {
          if (v2 == 1114644381)
          {
            uint64_t result = 76;
            goto LABEL_409;
          }
          if (v2 != 1119807502)
          {
            if (v2 == 1169082144)
            {
              uint64_t result = 31;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
LABEL_272:
          uint64_t result = 45;
          goto LABEL_409;
        }
        switch(v2)
        {
          case 1060988941:
            uint64_t result = 9;
            goto LABEL_409;
          case 1085318934:
            uint64_t result = 119;
            goto LABEL_409;
          case 1110205732:
            uint64_t result = 42;
            goto LABEL_409;
        }
LABEL_408:
        uint64_t result = 0;
        goto LABEL_409;
      }
      if (v2 > 1293446024)
      {
        if (v2 != 1293446025)
        {
          if (v2 == 1294429942)
          {
            uint64_t result = 135;
            goto LABEL_409;
          }
          uint64_t v3 = 1302273958;
          goto LABEL_289;
        }
        goto LABEL_332;
      }
      if (v2 == 1234705395)
      {
        uint64_t result = 113;
        goto LABEL_409;
      }
      if (v2 != 1280441783)
      {
        if (v2 == 1280909812)
        {
          uint64_t result = 140;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
    }
    else
    {
      if (v2 > 262180326)
      {
        if (v2 > 358923951)
        {
          if (v2 > 445396641)
          {
            if (v2 == 445396642)
            {
              uint64_t result = 105;
              goto LABEL_409;
            }
            if (v2 == 502329937)
            {
              uint64_t result = 22;
              goto LABEL_409;
            }
            if (v2 != 551446205) {
              goto LABEL_408;
            }
            goto LABEL_272;
          }
          if (v2 == 358923952)
          {
            uint64_t result = 114;
            goto LABEL_409;
          }
          if (v2 != 363237283)
          {
            if (v2 == 425046865)
            {
              uint64_t result = 145;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
          goto LABEL_321;
        }
        if (v2 <= 341800272)
        {
          switch(v2)
          {
            case 262180327:
              uint64_t result = 111;
              goto LABEL_409;
            case 337183581:
              uint64_t result = 11;
              goto LABEL_409;
            case 340218669:
              uint64_t result = 99;
              goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 != 341800273)
        {
          if (v2 == 344862120)
          {
            uint64_t result = 103;
            goto LABEL_409;
          }
          if (v2 == 355234908)
          {
            uint64_t result = 117;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_264;
      }
      if (v2 <= 88647036)
      {
        if (v2 <= 40511011)
        {
          if (v2 == 23433786)
          {
            uint64_t result = 55;
            goto LABEL_409;
          }
          if (v2 == 33245053)
          {
            uint64_t result = 62;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 == 40511012)
        {
          uint64_t result = 122;
          goto LABEL_409;
        }
        if (v2 == 42878382)
        {
          uint64_t result = 12;
          goto LABEL_409;
        }
        if (v2 != 79936591) {
          goto LABEL_408;
        }
        goto LABEL_171;
      }
      if (v2 > 173258741)
      {
        if (v2 == 173258742)
        {
          uint64_t result = 53;
          goto LABEL_409;
        }
        if (v2 != 228444038)
        {
          uint64_t v7 = 253148925;
          goto LABEL_238;
        }
        goto LABEL_325;
      }
      if (v2 == 88647037) {
        goto LABEL_331;
      }
      if (v2 == 133314240)
      {
        uint64_t result = 38;
        goto LABEL_409;
      }
      if (v2 != 157833461) {
        goto LABEL_408;
      }
    }
    uint64_t result = 72;
    goto LABEL_409;
  }
  if (v2 > 3215673113)
  {
    if (v2 > 3707345670)
    {
      if (v2 <= 3885279869)
      {
        if (v2 <= 3819635029)
        {
          if (v2 <= 3743999267)
          {
            switch(v2)
            {
              case 3707345671:
                goto LABEL_272;
              case 3711192744:
                uint64_t result = 78;
                goto LABEL_409;
              case 3742999858:
                uint64_t result = 147;
                goto LABEL_409;
            }
            goto LABEL_408;
          }
          if (v2 == 3743999268)
          {
            uint64_t result = 24;
            goto LABEL_409;
          }
          if (v2 == 3767261006)
          {
            uint64_t result = 141;
            goto LABEL_409;
          }
          uint64_t v6 = 3801472101;
          goto LABEL_263;
        }
        if (v2 <= 3863625341)
        {
          switch(v2)
          {
            case 3819635030:
              uint64_t result = 148;
              goto LABEL_409;
            case 3825599860:
              uint64_t result = 20;
              goto LABEL_409;
            case 3856877970:
              uint64_t result = 98;
              goto LABEL_409;
          }
          goto LABEL_408;
        }
        if (v2 != 3863625342)
        {
          if (v2 == 3865897231)
          {
            uint64_t result = 73;
            goto LABEL_409;
          }
          if (v2 == 3865922942)
          {
            uint64_t result = 50;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
LABEL_328:
        uint64_t result = 87;
        goto LABEL_409;
      }
      if (v2 > 4067129263)
      {
        if (v2 > 4232256924)
        {
          switch(v2)
          {
            case 4232256925:
              uint64_t result = 102;
              goto LABEL_409;
            case 4240173202:
              uint64_t result = 2;
              goto LABEL_409;
            case 4242862982:
              uint64_t result = 74;
              goto LABEL_409;
          }
        }
        else
        {
          switch(v2)
          {
            case 4067129264:
              uint64_t result = 127;
              goto LABEL_409;
            case 4172444931:
              uint64_t result = 120;
              goto LABEL_409;
            case 4201643249:
              uint64_t result = 33;
              goto LABEL_409;
          }
        }
        goto LABEL_408;
      }
      if (v2 > 3953847431)
      {
        switch(v2)
        {
          case 3953847432:
            uint64_t result = 149;
            goto LABEL_409;
          case 4025247511:
            uint64_t result = 121;
            goto LABEL_409;
          case 4055323051:
            uint64_t result = 52;
            goto LABEL_409;
        }
        goto LABEL_408;
      }
      if (v2 == 3885279870)
      {
        uint64_t result = 30;
        goto LABEL_409;
      }
      if (v2 != 3933865620)
      {
        if (v2 == 3933982784)
        {
          uint64_t result = 47;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      goto LABEL_321;
    }
    if (v2 > 3540156651)
    {
      if (v2 <= 3637438249)
      {
        if (v2 > 3585085678)
        {
          if (v2 == 3585085679)
          {
            uint64_t result = 10;
            goto LABEL_409;
          }
          if (v2 != 3599094683)
          {
            uint64_t v5 = 3636345305;
LABEL_217:
            if (v2 != v5) {
              goto LABEL_408;
            }
            goto LABEL_295;
          }
          goto LABEL_328;
        }
        if (v2 == 3540156652)
        {
          uint64_t result = 85;
          goto LABEL_409;
        }
        if (v2 != 3543203160)
        {
          if (v2 == 3571532206)
          {
            uint64_t result = 139;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
LABEL_321:
        uint64_t result = 170;
        goto LABEL_409;
      }
      if (v2 > 3670339450)
      {
        if (v2 != 3670339451)
        {
          if (v2 != 3677894691)
          {
            if (v2 == 3683904382)
            {
              uint64_t result = 125;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
          goto LABEL_330;
        }
        goto LABEL_321;
      }
      if (v2 == 3637438250)
      {
        uint64_t result = 46;
        goto LABEL_409;
      }
      if (v2 != 3645319985)
      {
        if (v2 == 3663011141)
        {
          uint64_t result = 144;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
LABEL_325:
      uint64_t result = 66;
      goto LABEL_409;
    }
    if (v2 > 3348380075)
    {
      if (v2 > 3402870383)
      {
        if (v2 == 3402870384)
        {
          uint64_t result = 64;
          goto LABEL_409;
        }
        if (v2 != 3417429877)
        {
          if (v2 == 3455223061)
          {
            uint64_t result = 77;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_313;
      }
      if (v2 == 3348380076)
      {
        uint64_t result = 4;
        goto LABEL_409;
      }
      if (v2 != 3361025853)
      {
        if (v2 == 3397214291)
        {
          uint64_t result = 68;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      goto LABEL_161;
    }
    if (v2 > 3228373940)
    {
      if (v2 != 3228373941)
      {
        if (v2 == 3242623367)
        {
          uint64_t result = 15;
          goto LABEL_409;
        }
        if (v2 == 3300281076)
        {
          uint64_t result = 48;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      goto LABEL_329;
    }
    if (v2 == 3215673114)
    {
      uint64_t result = 69;
      goto LABEL_409;
    }
    uint64_t v9 = 3217792190;
LABEL_320:
    if (v2 != v9) {
      goto LABEL_408;
    }
    goto LABEL_321;
  }
  if (v2 <= 2673319455)
  {
    if (v2 > 2385671068)
    {
      if (v2 <= 2516717267)
      {
        if (v2 <= 2454275342)
        {
          if (v2 != 2385671069)
          {
            if (v2 == 2418348558)
            {
              uint64_t result = 123;
              goto LABEL_409;
            }
            if (v2 == 2445473385)
            {
              uint64_t result = 112;
              goto LABEL_409;
            }
            goto LABEL_408;
          }
LABEL_304:
          uint64_t result = 44;
          goto LABEL_409;
        }
        if (v2 == 2454275343)
        {
          uint64_t result = 57;
          goto LABEL_409;
        }
        if (v2 == 2458172802) {
          goto LABEL_295;
        }
        uint64_t v7 = 2468178735;
LABEL_238:
        if (v2 == v7)
        {
          uint64_t result = 108;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      if (v2 <= 2628394913)
      {
        if (v2 == 2516717268) {
          goto LABEL_303;
        }
        if (v2 == 2614323575) {
          goto LABEL_304;
        }
        if (v2 != 2622433984) {
          goto LABEL_408;
        }
LABEL_136:
        uint64_t result = 88;
        goto LABEL_409;
      }
      if (v2 == 2628394914) {
        goto LABEL_277;
      }
      if (v2 != 2634105757)
      {
        if (v2 == 2644487444)
        {
          uint64_t result = 84;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
LABEL_330:
      uint64_t result = 92;
      goto LABEL_409;
    }
    if (v2 > 2262113698)
    {
      if (v2 <= 2309863437)
      {
        if (v2 != 2262113699)
        {
          if (v2 == 2270970153)
          {
            uint64_t result = 21;
            goto LABEL_409;
          }
          uint64_t v3 = 2288107369;
LABEL_289:
          if (v2 == v3)
          {
            uint64_t result = 96;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
LABEL_171:
        uint64_t result = 70;
        goto LABEL_409;
      }
      if (v2 == 2309863438)
      {
        uint64_t result = 35;
        goto LABEL_409;
      }
      if (v2 == 2311900306)
      {
        uint64_t result = 14;
        goto LABEL_409;
      }
      uint64_t v8 = 2336512887;
LABEL_254:
      if (v2 == v8)
      {
        uint64_t result = 109;
        goto LABEL_409;
      }
      goto LABEL_408;
    }
    if (v2 > 2159747552)
    {
      if (v2 == 2159747553)
      {
        uint64_t result = 26;
        goto LABEL_409;
      }
      if (v2 != 2162679683)
      {
        uint64_t v5 = 2236272848;
        goto LABEL_217;
      }
LABEL_314:
      uint64_t result = 110;
      goto LABEL_409;
    }
    if (v2 == 2144123136) {
      goto LABEL_313;
    }
    uint64_t v4 = 2158787296;
LABEL_311:
    if (v2 == v4)
    {
      uint64_t result = 63;
      goto LABEL_409;
    }
    goto LABEL_408;
  }
  if (v2 > 2940697644)
  {
    if (v2 <= 3101941569)
    {
      if (v2 <= 2979575959)
      {
        switch(v2)
        {
          case 2940697645:
            uint64_t result = 36;
            goto LABEL_409;
          case 2941181571:
            uint64_t result = 39;
            goto LABEL_409;
          case 2943112657:
            uint64_t result = 137;
            goto LABEL_409;
        }
        goto LABEL_408;
      }
      if (v2 == 2979575960)
      {
        uint64_t result = 143;
        goto LABEL_409;
      }
      if (v2 == 3001488778)
      {
        uint64_t result = 32;
        goto LABEL_409;
      }
      if (v2 != 3054476161) {
        goto LABEL_408;
      }
LABEL_277:
      uint64_t result = 91;
      goto LABEL_409;
    }
    if (v2 <= 3184375230)
    {
      if (v2 != 3101941570)
      {
        if (v2 != 3128362815)
        {
          if (v2 == 3133873109)
          {
            uint64_t result = 56;
            goto LABEL_409;
          }
          goto LABEL_408;
        }
        goto LABEL_313;
      }
LABEL_191:
      uint64_t result = 90;
      goto LABEL_409;
    }
    if (v2 != 3184375231)
    {
      if (v2 != 3196158497)
      {
        if (v2 == 3196805751)
        {
          uint64_t result = 7;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
LABEL_295:
      uint64_t result = 81;
      goto LABEL_409;
    }
LABEL_331:
    uint64_t result = 71;
    goto LABEL_409;
  }
  if (v2 > 2781508712)
  {
    if (v2 <= 2823174121)
    {
      switch(v2)
      {
        case 2781508713:
          uint64_t result = 6;
          goto LABEL_409;
        case 2793418701:
          uint64_t result = 19;
          goto LABEL_409;
        case 2797549163:
          uint64_t result = 101;
          goto LABEL_409;
      }
      goto LABEL_408;
    }
    if (v2 != 2823174122)
    {
      if (v2 != 2880863278)
      {
        if (v2 == 2903084588)
        {
          uint64_t result = 79;
          goto LABEL_409;
        }
        goto LABEL_408;
      }
      goto LABEL_272;
    }
LABEL_327:
    uint64_t result = 97;
    goto LABEL_409;
  }
  if (v2 > 2722529671)
  {
    switch(v2)
    {
      case 2722529672:
        uint64_t result = 28;
        goto LABEL_409;
      case 2730762296:
        uint64_t result = 100;
        goto LABEL_409;
      case 2751865418:
        uint64_t result = 131;
        goto LABEL_409;
    }
    goto LABEL_408;
  }
  if (v2 == 2673319456)
  {
LABEL_303:
    uint64_t result = 67;
    goto LABEL_409;
  }
  if (v2 == 2688879999)
  {
    uint64_t result = 37;
    goto LABEL_409;
  }
  if (v2 != 2702125347) {
    goto LABEL_408;
  }
  uint64_t result = 3;
LABEL_409:
  PlatformUtilities_iOS::GetProductType(void)::sType = result;
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19D803B4C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x19F3ABAB0](v1);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x19F3AB940](v23, a1);
  if (v23[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_29;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v25 = v16;
        int64_t v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      __int16 v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(void *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0) {
        operator delete(__b.__locale_);
      }
      if (v21 != v16) {
        goto LABEL_29;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x19F3AB950](v23);
  return a1;
}

void sub_19D803E10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x19F3AB950](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19D803DE4);
}

void sub_19D803E7C(_Unwind_Exception *a1)
{
}

void *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(void *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  int v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a2 + 88);
    unint64_t v6 = *(void *)(a2 + 48);
    if (v5 < v6)
    {
      *(void *)(a2 + 88) = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      size_t v4 = 0;
      *((unsigned char *)__dst + 2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (const void **)(a2 + 16);
    unint64_t v5 = *(void *)(a2 + 32);
  }
  int v8 = *v7;
  size_t v4 = v5 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *uint64_t v2 = v11;
    uint64_t v2 = v11;
  }
  else
  {
    *((unsigned char *)__dst + 2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v4;
    if (!v4) {
      goto LABEL_16;
    }
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((unsigned char *)v2 + v4) = 0;
  return __dst;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3ABAB0](a1 + 128);
  return a1;
}

uint64_t *std::unique_ptr<PulseTone>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {

    JUMPOUT(0x19F3ABB30);
  }
  return result;
}

void sub_19D8043D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D804520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D804680(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;

  _Unwind_Resume(a1);
}

void ___Z27AVAudioDeviceTestServiceLogv_block_invoke()
{
}

void sub_19D804A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D805000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_19D8052E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D8057FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D805A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D805C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id generateAudioSelfTestError(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (AVAudioDeviceTestServiceLog(void)::once != -1) {
    dispatch_once(&AVAudioDeviceTestServiceLog(void)::once, &__block_literal_global_3382);
  }
  uint64_t v2 = *(id *)AVAudioDeviceTestServiceLog(void)::category;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315650;
    unint64_t v6 = "AVAudioDeviceTestService.mm";
    __int16 v7 = 1024;
    int v8 = 163;
    __int16 v9 = 2048;
    uint64_t v10 = a1;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d error code %li", (uint8_t *)&v5, 0x1Cu);
  }
  uint64_t v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F281F8] code:a1 userInfo:0];

  return v3;
}

void sub_19D806060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void *std::vector<float>::vector(void *a1, uint64_t a2, int *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    uint64_t v6 = 4 * a2;
    __int16 v7 = operator new(4 * a2);
    *a1 = v7;
    a1[1] = v7;
    int v8 = &v7[a2];
    a1[2] = v8;
    int v9 = *a3;
    do
    {
      *v7++ = v9;
      v6 -= 4;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_19D8064B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_19D806794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)AVAudioDeviceTestService;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19D806B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_19D806D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D8071E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D807D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D8081C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D8083C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D8086FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D808904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D808AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D808EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D808FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D8096C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D8097EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D809EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D80A41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D80AA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_19D80ACD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D80B238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__objc2_meth_list *AVAudioDeviceTestServiceSignPost(void)
{
  p_opt_class_meths = &OBJC_PROTOCOL___AVAudioMixing.opt_class_meths;
  {
    p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___AVAudioMixing + 48);
    if (v3)
    {
      AVAudioDeviceTestServiceSignPost(void)::global = (uint64_t)os_log_create("com.apple.avfaudio", "adtssp");
      p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___AVAudioMixing + 48);
    }
  }
  uint64_t v1 = p_opt_class_meths[60];

  return v1;
}

uint64_t TonePlaybackSignpostID(void)
{
  {
    uint64_t v1 = AVAudioDeviceTestServiceSignPost();
    os_signpost_id_t v2 = os_signpost_id_generate(v1);

    TonePlaybackSignpostID(void)::spid = v2;
  }
  return TonePlaybackSignpostID(void)::spid;
}

void sub_19D80C20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_19D80C760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D80C86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D80D7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  _Block_object_dispose((const void *)(v63 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_19D80DA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D80DAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D80DB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D80DC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3466(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3467(uint64_t a1)
{
}

void sub_19D80DED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D80DFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D80E41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D80E7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D810DA8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *exc_bufa, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a2)
  {

    _Block_object_dispose((const void *)(v66 - 224), 8);
    _Block_object_dispose(&a39, 8);

    if (a2 == 2)
    {
      id v68 = objc_begin_catch(a1);
      if (AVAudioDeviceTestServiceLog(void)::once != -1) {
        dispatch_once(&AVAudioDeviceTestServiceLog(void)::once, &__block_literal_global_3382);
      }
      unint64_t v69 = *(id *)AVAudioDeviceTestServiceLog(void)::category;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        uint64_t v70 = generateAudioSelfTestError(-7);
        uint64_t v71 = [v70 code];
        *(_DWORD *)(v66 - 224) = 136315906;
        STACK[0x224] = (unint64_t)"AVAudioDeviceTestService.mm";
        *(_WORD *)(v66 - 212) = 1024;
        LODWORD(STACK[0x22E]) = 838;
        *(_WORD *)(v66 - 206) = 2112;
        STACK[0x234] = (unint64_t)v68;
        *(_WORD *)(v66 - 196) = 2048;
        STACK[0x23E] = v71;
        _os_log_impl(&dword_19D794000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d exception (%@) with test error (%li)", (uint8_t *)(v66 - 224), 0x26u);
      }
      uint64_t v72 = generateAudioSelfTestError(-7);
      (*(void (**)(uint64_t, void, void *))(a19 + 16))(a19, 0, v72);

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(a1);
    }
    JUMPOUT(0x19D8106ACLL);
  }
  _Unwind_Resume(a1);
}

void *___ZL36getMSNMonitorBeginExceptionSymbolLocv_block_invoke(uint64_t a1)
{
  os_signpost_id_t v2 = MediaSafetyNetLibrary();
  uint64_t result = dlsym(v2, "MSNMonitorBeginException");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMSNMonitorBeginExceptionSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MediaSafetyNetLibrary(void)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!MediaSafetyNetLibraryCore(char **)::frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    int v4[2] = (void *)3221225472;
    v4[3] = ___ZL25MediaSafetyNetLibraryCorePPc_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5964DD8;
    uint64_t v6 = 0;
    MediaSafetyNetLibraryCore(char **)::frameworkLibrarfloat y = _sl_dlopen();
  }
  uint64_t v0 = (void *)MediaSafetyNetLibraryCore(char **)::frameworkLibrary;
  if (!MediaSafetyNetLibraryCore(char **)::frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"void *MediaSafetyNetLibrary()"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVAudioDeviceTestService.mm", 46, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_19D8119FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_19D811B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D811D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D811EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D812174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D81262C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Block_object_dispose((const void *)(v13 - 176), 8);
  _Unwind_Resume(a1);
}

void *___ZL34getMSNMonitorEndExceptionSymbolLocv_block_invoke(uint64_t a1)
{
  os_signpost_id_t v2 = MediaSafetyNetLibrary();
  uint64_t result = dlsym(v2, "MSNMonitorEndException");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMSNMonitorEndExceptionSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19D81297C(_Unwind_Exception *a1)
{
  objc_sync_exit(v4);

  _Unwind_Resume(a1);
}

uint64_t ___ZL25MediaSafetyNetLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaSafetyNetLibraryCore(char **)::frameworkLibrarfloat y = result;
  return result;
}

void sub_19D812BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D812DF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_19D8134FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_19D813768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D813A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D815024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_19D815570(_Unwind_Exception *a1)
{
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 32));
  _Unwind_Resume(a1);
}

void sub_19D81568C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D815774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVAudioUnitMIDIInstrumentImpl::SendMIDIEvent(AVAudioUnitMIDIInstrumentImpl *this, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v13[0] = a5 | a2;
  v13[1] = a3;
  id v13[2] = a4;
  uint64_t v9 = (*(uint64_t (**)(AVAudioUnitMIDIInstrumentImpl *))(*(void *)this + 40))(this);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, unsigned char *))(*(void *)v9 + 136))(v9, 0, 0, a5, 3, v13);
  if ((v10 & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      uint64_t v15 = "AVAudioUnitMIDIInstrument.mm";
      __int16 v16 = 1024;
      int v17 = 49;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 1024;
      int v21 = a5;
      __int16 v22 = 1024;
      int v23 = a3;
      __int16 v24 = 1024;
      int v25 = a4;
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Unable to send midi event status(%d), channel(%d), param1(%d), param2(%d)\n", buf, 0x2Au);
    }
  }
  return v10;
}

void sub_19D816E04(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

uint64_t AVAudioUnitMIDIInstrumentImpl::SendProgramChange(AVAudioUnitMIDIInstrumentImpl *this, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if ((AVAudioUnitMIDIInstrumentImpl::SendMIDIEvent(this, 176, 0, a3, a5) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v9 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      BOOL v14 = "AVAEInternal.h";
      __int16 v15 = 1024;
      int v16 = 71;
      __int16 v17 = 2080;
      __int16 v18 = "AVAudioUnitMIDIInstrument.mm";
      __int16 v19 = 1024;
      int v20 = 66;
      __int16 v21 = 2080;
      __int16 v22 = "SendProgramChange";
      __int16 v23 = 2080;
      __int16 v24 = "true == SendMIDIEvent(kMIDIMessage_ControlChange, 0, bankMSB, 0, channel)";
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "true == SendMIDIEvent(kMIDIMessage_ControlChange, 0, bankMSB, 0, channel)");
  }
  if ((AVAudioUnitMIDIInstrumentImpl::SendMIDIEvent(this, 176, 31, a4, a5) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v10 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      BOOL v14 = "AVAEInternal.h";
      __int16 v15 = 1024;
      int v16 = 71;
      __int16 v17 = 2080;
      __int16 v18 = "AVAudioUnitMIDIInstrument.mm";
      __int16 v19 = 1024;
      int v20 = 67;
      __int16 v21 = 2080;
      __int16 v22 = "SendProgramChange";
      __int16 v23 = 2080;
      __int16 v24 = "true == SendMIDIEvent(kMIDIMessage_ControlChange, bankSelectLSBParam1, bankLSB, 0, channel)";
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "true == SendMIDIEvent(kMIDIMessage_ControlChange, bankSelectLSBParam1, bankLSB, 0, channel)");
  }
  if ((AVAudioUnitMIDIInstrumentImpl::SendMIDIEvent(this, 192, a2, 0, a5) & 1) == 0)
  {
    if (AVAudioEngineLogCategory(void)::once != -1) {
      dispatch_once(&AVAudioEngineLogCategory(void)::once, &__block_literal_global_8600);
    }
    uint64_t v11 = *(NSObject **)AVAudioEngineLogCategory(void)::category;
    if (os_log_type_enabled(*(os_log_t *)AVAudioEngineLogCategory(void)::category, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      BOOL v14 = "AVAEInternal.h";
      __int16 v15 = 1024;
      int v16 = 71;
      __int16 v17 = 2080;
      __int16 v18 = "AVAudioUnitMIDIInstrument.mm";
      __int16 v19 = 1024;
      int v20 = 68;
      __int16 v21 = 2080;
      __int16 v22 = "SendProgramChange";
      __int16 v23 = 2080;
      __int16 v24 = "true == SendMIDIEvent(kMIDIMessage_PatchChange, programID, 0, 0, channel)";
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d required condition is false: [%s:%d:%s: (%s)]", buf, 0x36u);
    }
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", @"com.apple.coreaudio.avfaudio", @"required condition is false: %s", "true == SendMIDIEvent(kMIDIMessage_PatchChange, programID, 0, 0, channel)");
  }
  return 1;
}

void AVAudioUnitMIDIInstrumentImpl::~AVAudioUnitMIDIInstrumentImpl(id *this)
{
  AVAudioUnitImpl::~AVAudioUnitImpl(this);

  JUMPOUT(0x19F3ABB30);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  uint64_t v4 = (char *)operator new(__n);
  this->__begin_ = v4;
  long long v5 = &v4[__n];
  this->__end_cap_.__value_ = &v4[__n];
  bzero(v4, __n);
  this->__end_ = v5;
  return this;
}

uint64_t std::optional<CA::BufferList>::operator=[abi:ne180100]<CA::BufferList,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_19D817964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL anonymous namespace'::isPCMFormat(_DWORD *a1)
{
  int v1 = a1[2];
  int v2 = a1[5];
  BOOL v3 = v1 == 1819304813 && v2 == 1;
  if (!v3)
  {
    if ((v1 == 1970037111 || v1 == 1634492791) && v2 == 1)
    {
      int v5 = a1[6];
      if (v5 == a1[4]) {
        return a1[8] <= (8 * v5) && a1[7] != 0;
      }
    }
    return 0;
  }
  unsigned int v8 = a1[6];
  if (v8 != a1[4]) {
    return 0;
  }
  unsigned int v9 = a1[8];
  if (v8 < v9 >> 3) {
    return 0;
  }
  unsigned int v10 = a1[7];
  if (!v10) {
    return 0;
  }
  int v11 = a1[3];
  if ((v11 & 0x20) == 0)
  {
    BOOL v3 = v8 == v8 / v10 * v10;
    v8 /= v10;
    if (!v3) {
      return 0;
    }
  }
  BOOL result = 1;
  if ((v11 & 3) == 1 && 8 * v8 == v9 && (v11 & 0x1F84) != 0) {
    return 0;
  }
  return result;
}

void sub_19D81804C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioBuffers::Prepare(CA::AudioBuffers *this)
{
  uint64_t result = ExtendedAudioBufferList_Prepare();
  if (!result)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
  }
  return result;
}

void sub_19D8180C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__objc2_meth_list *gAVAudioBufferLog(void)
{
  p_opt_class_meths = &OBJC_PROTOCOL___AVAudioMixing.opt_class_meths;
  {
    p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___AVAudioMixing + 48);
    if (v2)
    {
      gAVAudioBufferLog(void)::global = (uint64_t)os_log_create("com.apple.avfaudio", "AVAB");
      p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___AVAudioMixing + 48);
    }
  }
  return p_opt_class_meths[64];
}

uint64_t anonymous namespace'::getPCMFormat(_DWORD *a1)
{
  int v1 = a1[3];
  if (v1)
  {
    if (a1[8] == 32) {
      return 0;
    }
    else {
      return 3;
    }
  }
  else
  {
    unsigned int v2 = a1[6];
    if (!v2) {
      return 3;
    }
    if ((v1 & 0x20) != 0)
    {
      unsigned int v3 = 1;
    }
    else
    {
      unsigned int v3 = a1[7];
      if (!v3) {
        return 3;
      }
    }
    int v5 = v2 / v3;
    if (v5 == 2) {
      unsigned int v6 = 1;
    }
    else {
      unsigned int v6 = 3;
    }
    if (v5 == 4) {
      return 2;
    }
    else {
      return v6;
    }
  }
}

void sub_19D819D94(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10B1C4016FEDC95);
  _Unwind_Resume(a1);
}

void sub_19D819E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D819F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D819FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D81A97C(_Unwind_Exception *a1)
{
  AVAudioUnitImpl::~AVAudioUnitImpl(v1);
  MEMORY[0x19F3ABB30](v1, 0x10B1C40A067855ELL);
  _Unwind_Resume(a1);
}

BOOL NBandEQFilterParametersForBand::GetBypass(NBandEQFilterParametersForBand *this)
{
  uint64_t v1 = (*((_DWORD *)this + 6) + 1000);
  float v3 = 0.0;
  (*(void (**)(void, uint64_t, void, void, float *))(**((void **)this + 2) + 128))(*((void *)this + 2), v1, 0, 0, &v3);
  return v3 != 0.0;
}

float NBandEQFilterParametersForBand::GetGain(NBandEQFilterParametersForBand *this)
{
  uint64_t v1 = (*((_DWORD *)this + 6) + 4000);
  float v3 = 0.0;
  (*(void (**)(void, uint64_t, void, void, float *))(**((void **)this + 2) + 128))(*((void *)this + 2), v1, 0, 0, &v3);
  return v3;
}

float NBandEQFilterParametersForBand::GetBandwidth(NBandEQFilterParametersForBand *this)
{
  uint64_t v1 = (*((_DWORD *)this + 6) + 5000);
  float v3 = 0.0;
  (*(void (**)(void, uint64_t, void, void, float *))(**((void **)this + 2) + 128))(*((void *)this + 2), v1, 0, 0, &v3);
  return v3;
}

float NBandEQFilterParametersForBand::GetFrequency(NBandEQFilterParametersForBand *this)
{
  uint64_t v1 = (*((_DWORD *)this + 6) + 3000);
  float v3 = 0.0;
  (*(void (**)(void, uint64_t, void, void, float *))(**((void **)this + 2) + 128))(*((void *)this + 2), v1, 0, 0, &v3);
  return v3;
}

uint64_t NBandEQFilterParametersForBand::GetFilterType(NBandEQFilterParametersForBand *this)
{
  uint64_t v1 = (*((_DWORD *)this + 6) + 2000);
  float v3 = 0.0;
  (*(void (**)(void, uint64_t, void, void, float *))(**((void **)this + 2) + 128))(*((void *)this + 2), v1, 0, 0, &v3);
  return (uint64_t)v3;
}

uint64_t NBandEQFilterParametersForBand::SetBypass(NBandEQFilterParametersForBand *this, unsigned int a2)
{
  return (*(uint64_t (**)(void, void, void, void, float))(**((void **)this + 2) + 120))(*((void *)this + 2), (*((_DWORD *)this + 6) + 1000), 0, 0, (float)a2);
}

uint64_t NBandEQFilterParametersForBand::SetGain(NBandEQFilterParametersForBand *this, float a2)
{
  return (*(uint64_t (**)(void, void, void, void, float))(**((void **)this + 2) + 120))(*((void *)this + 2), (*((_DWORD *)this + 6) + 4000), 0, 0, a2);
}

uint64_t NBandEQFilterParametersForBand::SetBandwidth(NBandEQFilterParametersForBand *this, float a2)
{
  return (*(uint64_t (**)(void, void, void, void, float))(**((void **)this + 2) + 120))(*((void *)this + 2), (*((_DWORD *)this + 6) + 5000), 0, 0, a2);
}

uint64_t NBandEQFilterParametersForBand::SetFrequency(NBandEQFilterParametersForBand *this, float a2)
{
  return (*(uint64_t (**)(void, void, void, void, float))(**((void **)this + 2) + 120))(*((void *)this + 2), (*((_DWORD *)this + 6) + 3000), 0, 0, a2);
}

uint64_t NBandEQFilterParametersForBand::SetFilterType(NBandEQFilterParametersForBand *this, AVAudioUnitEQFilterType a2)
{
  return (*(uint64_t (**)(void, void, void, void, float))(**((void **)this + 2) + 120))(*((void *)this + 2), (*((_DWORD *)this + 6) + 2000), 0, 0, (float)a2);
}

void NBandEQFilterParametersForBand::~NBandEQFilterParametersForBand(NBandEQFilterParametersForBand *this)
{
}

void AVAudioUnitEQImpl::~AVAudioUnitEQImpl(id *this)
{
  AVAudioUnitEQImpl::~AVAudioUnitEQImpl(this);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t vars8;

  *this = &unk_1EEFA5248;

  AVAudioUnitImpl::~AVAudioUnitImpl(this);
}

NSData *AVAudioFormatImpl::setMagicCookie(NSData *this, NSData *a2)
{
  isa = (NSData *)this[1].super.isa;
  if (isa != a2)
  {
    float v3 = this;

    v3[1].super.isa = (Class)a2;
    return a2;
  }
  return this;
}

Class ___ZL17AudioSessionClassv_block_invoke()
{
  Class result = NSClassFromString(&cfstr_Avaudiosession_0.isa);
  AudioSessionClass(void)::gAudioSessionClass = (uint64_t)result;
  return result;
}

uint64_t AVAudioSourceNodeImpl::IsAVAudioSourceNode(AVAudioSourceNodeImpl *this)
{
  return 1;
}

uint64_t AVAudioSourceNodeImpl::NumberInputs(AVAudioSourceNodeImpl *this)
{
  return 0;
}

uint64_t AVAudioSourceNodeImpl::SetInputFormat(AVAudioSourceNodeImpl *this, unint64_t a2, AVAudioFormat *a3)
{
  *((void *)this + 24) = a3;
  if (a3) {
    return AVAudioNodeImplBase::SetInputFormat((AVAudioNodeImplBase *)this, 0, a3);
  }
  else {
    return 1;
  }
}

uint64_t AVAudioSourceNodeImpl::SetOutputFormat(AVAudioNodeImplBase *this, unint64_t a2, AVAudioFormat *a3)
{
  if (*((void *)this + 24) || (uint64_t result = AVAudioNodeImplBase::SetInputFormat(this, 0, a3), result))
  {
    return AVAudioNodeImplBase::SetOutputFormat(this, 0, a3);
  }
  return result;
}

void AVAudioSourceNodeImpl::~AVAudioSourceNodeImpl(AVAudioSourceNodeImpl *this)
{
  AVAudioSourceNodeImpl::~AVAudioSourceNodeImpl(this);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EEFA6288;
  (*(void (**)(void, uint64_t, void, void))(**((void **)this + 22) + 64))(*((void *)this + 22), 1, 0, 0);
  std::unique_ptr<AVAEBlock<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>>::reset[abi:ne180100]((const void ***)this + 23, 0);

  AVAudioUnitImpl::~AVAudioUnitImpl((id *)this);
}

void sub_19D81C9B0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10B1C40AECC1445);
  _Unwind_Resume(a1);
}

void AVAudioSourceNodeImpl::AVAudioSourceNodeImpl(AVAudioNodeImplBase *a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)AudioStreamBasicDescription buf = xmmword_19D8B1D40;
  int v2 = 0;
  AVAudioNodeImpl::AVAudioNodeImpl(a1, 0, (uint64_t)buf, 0);
}

void sub_19D81CC30(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v2, 0x80C40B8603338);
  AVAudioUnitImpl::~AVAudioUnitImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19D81CD18(_Unwind_Exception *a1)
{
  MEMORY[0x19F3ABB30](v1, 0x10B1C40AECC1445);
  _Unwind_Resume(a1);
}

id AVVCAudioQueueRecordingEngine::setDeviceIOBufferSizeFrames(AudioQueueRef *this, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  ElapsedTime::ElapsedTime((ElapsedTime *)v26, "setDeviceIOBufferSizeFrames", "setDeviceIOBufferSizeFrames", 0);
  int inData = a2;
  uint64_t v4 = (*((void (**)(AudioQueueRef *, void))*this + 8))(this, 0);
  uint64_t v5 = [v4 siriInputSource];

  BOOL v6 = IsAnyAppRecording();
  BOOL v7 = v6;
  char v8 = v5 != 1936290660 || v6;
  if ((v8 & 1) == 0)
  {
    id v9 = (id)AudioQueueSetProperty(this[76], 0x64766266u, &inData, 4u);
    if (kAVVCScope)
    {
      unsigned int v10 = *(id *)kAVVCScope;
      if (!v10)
      {
LABEL_19:
        if (!v9) {
          *((_DWORD *)this + 150) = inData;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v10 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      int v20 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v21 = 1024;
      int v22 = 1015;
      __int16 v23 = 1024;
      *(_DWORD *)__int16 v24 = inData;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = v9;
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setDeviceIOBufferSizeFrames: AudioQueueSetProperty(kAudioQueueProperty_DeviceBufferSizeFrames) : %u err : %d", buf, 0x1Eu);
    }

    goto LABEL_19;
  }
  if (kAVVCScope)
  {
    id v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_21;
    }
  }
  else
  {
    id v9 = (id)MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  uint64_t v12 = v9;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = Get4CCFromInt(v5);
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    int v20 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v21 = 1024;
    int v22 = 1021;
    __int16 v23 = 2112;
    *(void *)__int16 v24 = v13;
    *(_WORD *)&v24[8] = 1024;
    BOOL v25 = v7;
    _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setDeviceIOBufferSizeFrames: Not setting DeviceBufferSizeFrames. siri input source: %@, isAnyAppRecording: %d", buf, 0x22u);
  }
  id v9 = 0;
LABEL_21:
  if (kAVVCScope)
  {
    __int16 v15 = *(id *)kAVVCScope;
    if (!v15) {
      goto LABEL_28;
    }
  }
  else
  {
    __int16 v15 = MEMORY[0x1E4F14500];
    id v16 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    int v20 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v21 = 1024;
    int v22 = 1024;
    __int16 v23 = 1024;
    *(_DWORD *)__int16 v24 = inData;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v9;
    _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d setDeviceIOBufferSizeFrames: %u err : %d", buf, 0x1Eu);
  }

LABEL_28:
  ElapsedTime::~ElapsedTime((ElapsedTime *)v26);
  return v9;
}

void sub_19D81D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  ElapsedTime::~ElapsedTime((ElapsedTime *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::getRecordRoute(uint64_t a1, void **a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  AVVCRouteManager::getRecordRoute(*(void *)(a1 + 376), a2);
  uint64_t result = [*a2 isEqualToString:@"No Record Route"];
  if (result)
  {
    if (kAVVCScope)
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        return 4294955512;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      BOOL v7 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v8 = 1024;
      int v9 = 2034;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCAudioQueueRecordingEngine::getRecordRoute : Cached record route is nil!", (uint8_t *)&v6, 0x12u);
    }

    return 4294955512;
  }
  return result;
}

uint64_t AVVCAudioQueueRecordingEngine::getEngineType(AVVCAudioQueueRecordingEngine *this)
{
  return 2;
}

uint64_t AVVCAudioQueueRecordingEngine::setupAudioQueueRecordDeviceAndUpdate(AVVCAudioQueueRecordingEngine *this, NSString *a2)
{
  return 0;
}

void AVVCAudioQueueRecordingEngine::UpdateRecordDeviceOnQueue(AVVCAudioQueueRecordingEngine *this, NSString *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int inData = a2;
  uint64_t v3 = (OpaqueAudioQueue *)*((void *)this + 76);
  if (!v3) {
    goto LABEL_17;
  }
  OSStatus v4 = AudioQueueSetProperty(v3, 0x61716364u, &inData, 8u);
  if (kAVVCScope)
  {
    id v5 = *(id *)kAVVCScope;
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    id v5 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    id v11 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v12 = 1024;
    int v13 = 1972;
    __int16 v14 = 2112;
    __int16 v15 = inData;
    _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d UpdateRecordDeviceOnQueue : AudioQueueSetProperty(kAudioQueueProperty_CurrentDevice) - %@", buf, 0x1Cu);
  }

LABEL_9:
  if (v4)
  {
    if (kAVVCScope)
    {
      BOOL v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_17;
      }
    }
    else
    {
      BOOL v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      id v11 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v12 = 1024;
      int v13 = 1974;
      __int16 v14 = 1024;
      LODWORD(v15) = v4;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d UpdateRecordDeviceOnQueue: AudioQueueSetProperty(kAudioQueueProperty_CurrentDevice - %d)", buf, 0x18u);
    }
  }
LABEL_17:
}

void sub_19D81D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getPastDataFramesAvailable(AVVCAudioQueueRecordingEngine *this, unsigned int *outData)
{
  uint64_t result = (OpaqueAudioQueue *)*((void *)this + 76);
  if (result)
  {
    UInt32 ioDataSize = 4;
    return (OpaqueAudioQueue *)AudioQueueGetProperty(result, 0x71706261u, outData, &ioDataSize);
  }
  return result;
}

uint64_t AVVCAudioQueueRecordingEngine::setSessionIsRecordingFlag(AVVCRecordingEngine *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int isSessionRecording = AVVCRecordingEngine::isSessionRecording(this);
  uint64_t v3 = (*(uint64_t (**)(AVVCRecordingEngine *, void))(*(void *)this + 144))(this, isSessionRecording ^ 1u);
  if (v3)
  {
    if (kAVVCScope)
    {
      OSStatus v4 = *(id *)kAVVCScope;
      if (!v4) {
        return v3;
      }
    }
    else
    {
      OSStatus v4 = MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315906;
      int v9 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v10 = 1024;
      int v11 = 1932;
      __int16 v12 = 1024;
      int v13 = isSessionRecording ^ 1;
      __int16 v14 = 1024;
      int v15 = v3;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d setSessionIsRecordingFlag: Failed at enableSiriListeningMode(%u) with error: %d", (uint8_t *)&v8, 0x1Eu);
    }
  }
  else
  {
    uint64_t v5 = 1;
    if (!isSessionRecording) {
      uint64_t v5 = 2;
    }
    *((void *)this + 42) = v5;
  }
  return v3;
}

uint64_t AVVCAudioQueueRecordingEngine::disposeAudioCaptures(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v3 = *((void *)this + 9);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *((void *)this + 9) = 0;
  }
  uint64_t v4 = *((void *)this + 106);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    uint64_t v5 = *((void *)this + 106);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *((void *)this + 106) = 0;
  }
  return 0;
}

uint64_t AVVCAudioQueueRecordingEngine::logAudioCaptures(AVVCAudioQueueRecordingEngine *this, AVVCAudioCapturer *a2, AVAudioBuffer *a3)
{
  uint64_t v4 = a3;
  if (a2) {
    (*(void (**)(AVVCAudioCapturer *, AVAudioBuffer *, void))(*(void *)a2 + 24))(a2, v4, 0);
  }

  return 0;
}

void sub_19D81D704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::setupAudioCaptures(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v2 = (_DWORD *)((char *)this + 616);
  uint64_t v27 = *((void *)this + 81);
  long long v3 = *(_OWORD *)((char *)this + 632);
  v26[0] = *(_OWORD *)((char *)this + 616);
  v26[1] = v3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Capture");
  uint64_t v4 = NewAVVCAudioCapturer();
  *((void *)this + 9) = v4;
  if (v25 < 0)
  {
    operator delete(__p);
    uint64_t v4 = *((void *)this + 9);
  }
  if (v4) {
    (*(void (**)(uint64_t, void, _OWORD *, void))(*(void *)v4 + 16))(v4, *((void *)this + 34), v26, 0);
  }
  if (isDarwinOSProduct(void)::onceToken != -1) {
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
  }
  if (isDarwinOSProduct(void)::isDarwinOS && *((void *)this + 34) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "Capture-DSPOut");
    uint64_t v5 = NewAVVCAudioCapturer();
    *((void *)this + 106) = v5;
    if (v23 < 0)
    {
      operator delete(v22);
      if (!*((void *)this + 106)) {
        return 0;
      }
    }
    else if (!v5)
    {
      return 0;
    }
    LODWORD(v20[0]) = 0;
    if (CAStreamBasicDescription::IdentifyCommonPCMFormat(v2, (int *)v20) && LODWORD(v20[0]) == 1)
    {
      uint64_t v6 = 1;
    }
    else
    {
      LODWORD(v20[0]) = 0;
      unsigned __int8 v7 = CAStreamBasicDescription::IdentifyCommonPCMFormat(v2, (int *)v20);
      if ((v7 & (LODWORD(v20[0]) == 2)) != 0) {
        uint64_t v6 = 3;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    int v8 = [[AVAudioChannelLayout alloc] initWithLayoutTag:9633794];
    int v9 = [[AVAudioFormat alloc] initWithCommonFormat:v6 sampleRate:0 interleaved:v8 channelLayout:*((double *)this + 3)];
    uint64_t v10 = [(AVAudioFormat *)v9 streamDescription];
    long long v11 = *(_OWORD *)v10;
    long long v12 = *(_OWORD *)(v10 + 16);
    uint64_t v21 = *(void *)(v10 + 32);
    v20[0] = v11;
    v20[1] = v12;
    int v13 = [[AVAudioFormat alloc] initWithCommonFormat:v6 sampleRate:1 interleaved:v8 channelLayout:*((double *)this + 3)];
    uint64_t v14 = [(AVAudioFormat *)v13 streamDescription];
    long long v15 = *(_OWORD *)v14;
    long long v16 = *(_OWORD *)(v14 + 16);
    uint64_t v19 = *(void *)(v14 + 32);
    v18[0] = v15;
    v18[1] = v16;
    (*(void (**)(void, void, _OWORD *, _OWORD *))(**((void **)this + 106) + 16))(*((void *)this + 106), *((void *)this + 34), v20, v18);
  }
  return 0;
}

void sub_19D81D95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::handleAudioInput(AVVCAudioQueueRecordingEngine *this, OpaqueAudioQueue *a2, AudioQueueBuffer *a3, const AudioTimeStamp *a4, unsigned int a5, const AudioStreamPacketDescription *a6)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add_explicit((atomic_uint *volatile)this + 167, 0xFFFFFFFF, memory_order_relaxed);
  int v7 = *((_DWORD *)this + 161);
  UInt32 mAudioDataByteSize = a3->mAudioDataByteSize;
  int v9 = *((_DWORD *)this + 162);
  if (!*((unsigned char *)this + 880)) {
    goto LABEL_19;
  }
  int inInputDataProcUserData = 4108;
  char inInputDataProcUserData_4 = 0;
  long long v78 = 0u;
  long long v79 = 0u;
  uint64_t v10 = kdebug_trace();
  long long v11 = (void *)MEMORY[0x19F3AC180](v10);
  long long v12 = +[AVVCMetricsManager sharedManager];
  [v12 logProfileMetrics:@"AVVC_PROFILE_Prop_FirstBufferReceived"];

  int v13 = +[AVVCMetricsManager sharedManager];
  id v14 = (id)[v13 retrieveProfileMetrics];

  long long v15 = +[AVVCMetricsManager sharedManager];
  [v15 resetProfileMetrics];

  uint64_t v16 = mach_absolute_time();
  UInt64 v17 = *((void *)this + 86);
  UInt64 mHostTime = a4->mHostTime;
  uint64_t v19 = __udivti3();
  if (mHostTime >= v17) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = -v19;
  }
  uint64_t v21 = __udivti3();
  if (v16 >= v17) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = -v21;
  }
  double v23 = (double)v20 / 1000000.0;
  int v72 = v7;
  if (!kAVVCScope)
  {
    id v24 = (id)MEMORY[0x1E4F14500];
    id v25 = MEMORY[0x1E4F14500];
LABEL_12:
    uint64_t v26 = v24;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&outOutputData, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      uint64_t mSampleTime = (uint64_t)a4->mSampleTime;
      *(_DWORD *)AudioStreamBasicDescription buf = 136317186;
      UInt64 v28 = a4->mHostTime;
      uint64_t v29 = *((void *)this + 86);
      *(void *)&uint8_t buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1578;
      __int16 v81 = 2048;
      Float64 v82 = *(double *)&outOutputData.mNumberBuffers;
      __int16 v83 = 2048;
      uint64_t v84 = v16;
      __int16 v85 = 2048;
      UInt64 v86 = v28;
      LOWORD(v87[0]) = 2048;
      *(void *)((char *)v87 + 2) = mSampleTime;
      HIWORD(v87[2]) = 2048;
      *(void *)&v87[3] = v29;
      __int16 v88 = 2048;
      double v89 = (double)v22 / 1000000.0;
      __int16 v90 = 2048;
      *(double *)&long long v91 = (double)v20 / 1000000.0;
      _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (%p) - First callback from AQ -  Now:(ht: %lld), BuffStartTime:(ht: %lld st: %lld), SiriRequestedStartTime:(ht: %lld). Now-SiriRequestedStartTime: %0.6f ms, BuffStartTime-SiriRequestedStartTime: %0.6f ms.", buf, 0x58u);
      if (*(void *)&outOutputData.mBuffers[0].mNumberChannels) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&outOutputData.mBuffers[0].mNumberChannels);
      }
    }

    goto LABEL_16;
  }
  id v24 = *(id *)kAVVCScope;
  if (v24) {
    goto LABEL_12;
  }
LABEL_16:
  id v30 = (void *)MEMORY[0x19F3AC180]();
  mach_absolute_time();
  uint64_t v31 = __udivti3();
  uint64_t ReporterID = AVVCRecordingEngine::getReporterID((AVVCRecordingEngine *)this);
  uint64_t v33 = +[AVVCMetricsManager sharedManager];
  unint64_t v34 = NSNumber;
  __int16 v35 = +[AVVCMetricsManager sharedManager];
  int v36 = objc_msgSend(v34, "numberWithDouble:", (float)((float)(unint64_t)(v31 - objc_msgSend(v35, "callToStartRecordHostTime")) / 1000000.0));
  [v33 logSessionMetric:@"avvcStartRecordTime" value:v36 category:2 type:1 reporterID:ReporterID];

  if (*((void *)this + 35) == 1987012963)
  {
    __int16 v37 = +[AVVCMetricsManager sharedManager];
    OSStatus v38 = [NSNumber numberWithDouble:v23];
    [v37 logSessionMetric:@"avvcVoiceTriggerToRecordTime" value:v38 category:2 type:1 reporterID:ReporterID];
  }
  *((unsigned char *)this + 880) = 0;
  TraceWrapper::~TraceWrapper((TraceWrapper *)&inInputDataProcUserData);
  int v7 = v72;
LABEL_19:
  unsigned int v39 = ((v9 + 7) >> 3) * v7;
  *(void *)inNumberPCMFrames = mAudioDataByteSize / v39;
  if (kAVVCScope)
  {
    id v40 = *(id *)kAVVCScope;
    if (!v40) {
      goto LABEL_26;
    }
  }
  else
  {
    id v40 = (id)MEMORY[0x1E4F14500];
    id v41 = MEMORY[0x1E4F14500];
  }
  int v42 = v40;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    Float64 v43 = a4->mSampleTime;
    UInt64 v44 = a4->mHostTime;
    UInt32 v45 = a3->mAudioDataByteSize;
    int v46 = *((_DWORD *)this + 167);
    *(_DWORD *)AudioStreamBasicDescription buf = 136316674;
    *(void *)&uint8_t buf[4] = "AVVCAudioQueueRecordingEngine.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1598;
    __int16 v81 = 2048;
    Float64 v82 = v43;
    __int16 v83 = 2048;
    uint64_t v84 = v44;
    __int16 v85 = 2048;
    UInt64 v86 = mAudioDataByteSize / v39;
    LOWORD(v87[0]) = 1024;
    *(_DWORD *)((char *)v87 + 2) = v45;
    HIWORD(v87[1]) = 1024;
    v87[2] = v46;
    _os_log_impl(&dword_19D794000, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: sample time: %f, host time %llu, %llu frames (%d bytes), %d buffers enqueued", buf, 0x3Cu);
  }

LABEL_26:
  uint64_t v47 = *((void *)this + 28);
  if (v47 != 6 && v47 > 3 || *((unsigned char *)this + 253))
  {
    if (v39 > mAudioDataByteSize)
    {
      if (v47 != 5) {
        return;
      }
      if (kAVVCScope)
      {
        uint64_t v48 = *(id *)kAVVCScope;
        if (!v48) {
          return;
        }
      }
      else
      {
        uint64_t v48 = MEMORY[0x1E4F14500];
        id v54 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "AVVCAudioQueueRecordingEngine.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1608;
        __int16 v55 = "%25s:%-5d handleRecordAQInput: throwing away zero-length buffer";
        long long v56 = v48;
        os_log_type_t v57 = OS_LOG_TYPE_ERROR;
LABEL_49:
        _os_log_impl(&dword_19D794000, v56, v57, v55, buf, 0x12u);
        goto LABEL_78;
      }
      goto LABEL_78;
    }
    *((void *)this + 84) += *(void *)inNumberPCMFrames;
    objc_msgSend(*((id *)this + 99), "setFrameLength:");
    memcpy(*(void **)([*((id *)this + 99) mutableAudioBufferList] + 16), a3->mAudioData, a3->mAudioDataByteSize);
    __int16 v49 = (void *)*((void *)this + 103);
    if (!v49 || !*((void *)this + 104))
    {
LABEL_65:
      (*(void (**)(AVVCAudioQueueRecordingEngine *, void, void, void))(*(void *)this + 272))(this, *((void *)this + 9), *((void *)this + 99), 0);
      (*(void (**)(AVVCAudioQueueRecordingEngine *, void, void, void))(*(void *)this + 272))(this, *((void *)this + 106), *((void *)this + 105), 0);
      if (*((_DWORD *)this + 8) == 1819304813)
      {
        if (*((void *)this + 97))
        {
          TraceMethod::TraceMethod((TraceMethod *)&inInputDataProcUserData, "DeinterleaveAudio");
          operator new[]();
        }
        uint64_t v64 = *((void *)this + 100);
        if (v64) {
          *(_DWORD *)uint64_t v64 = 1;
        }
        if (*((void *)this + 103) && *((void *)this + 104))
        {
          uint64_t v65 = [*((id *)this + 105) audioBufferList];
          uint64_t v66 = v65;
          *(_DWORD *)uint64_t v64 = *((_DWORD *)this + 13);
          *(_DWORD *)(v64 + 8) = 1;
          *(_DWORD *)(v64 + 12) = *(_DWORD *)(v65 + 12);
          unint64_t v67 = (void *)*((void *)this + 101);
          *(void *)(v64 + 16) = v67;
          memcpy(v67, *(const void **)(v66 + 16), *(unsigned int *)(v66 + 12));
          if (*((_DWORD *)this + 13) >= 2u)
          {
            *(_DWORD *)(v64 + 24) = 1;
            size_t v68 = *(unsigned int *)(v66 + 28);
            *(_DWORD *)(v64 + 28) = v68;
            unint64_t v69 = (void *)(*((void *)this + 101) + *(unsigned int *)(v66 + 12));
            *(void *)(v64 + 32) = v69;
            memcpy(v69, *(const void **)(v66 + 32), v68);
          }
          AVVCRecordingEngine::audioBufferListReceived((AVVCRecordingEngine *)this, (AudioBufferList *)v64);
        }
        AVVCRecordingEngine::audioQueueBufferReceived((AVVCRecordingEngine *)this, a3);
      }
      AVVCRecordingEngine::lpcmAudioQueueBufferReceivedForNonLPCMClientFormat((AVVCRecordingEngine *)this, a3, a4->mHostTime, (AudioStreamBasicDescription *)((char *)this + 616));
    }
    uint64_t v50 = *((void *)this + 105);
    id v75 = 0;
    uint64_t v51 = [v49 renderOffline:*(void *)inNumberPCMFrames toBuffer:v50 error:&v75];
    id v52 = v75;
    if (v51)
    {
      if (kAVVCScope)
      {
        id v53 = *(id *)kAVVCScope;
        if (!v53) {
          goto LABEL_64;
        }
      }
      else
      {
        id v53 = (id)MEMORY[0x1E4F14500];
        id v60 = MEMORY[0x1E4F14500];
      }
      uint64_t v61 = v53;
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        if (v52)
        {
          uint64_t v62 = [v52 description];
        }
        else
        {
          uint64_t v62 = &stru_1EEFA9548;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        *(void *)&uint8_t buf[4] = "AVVCAudioQueueRecordingEngine.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1634;
        __int16 v81 = 2112;
        Float64 v82 = *(double *)&v62;
        _os_log_impl(&dword_19D794000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d handleRecordAQInput: Error in AVAudioEngine renderOffline : %@", buf, 0x1Cu);
        if (v52) {
      }
        }
    }
    else
    {
      if (kAVVCScope)
      {
        id v59 = *(id *)kAVVCScope;
        if (!v59) {
          goto LABEL_64;
        }
      }
      else
      {
        id v59 = (id)MEMORY[0x1E4F14500];
        id v63 = MEMORY[0x1E4F14500];
      }
      uint64_t v61 = v59;
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "AVVCAudioQueueRecordingEngine.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1632;
        _os_log_impl(&dword_19D794000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d handleRecordAQInput: AVAudioEngine renderOffline returned SUCCESS", buf, 0x12u);
      }
    }

LABEL_64:
    goto LABEL_65;
  }
  if (!kAVVCScope)
  {
    uint64_t v48 = MEMORY[0x1E4F14500];
    id v58 = MEMORY[0x1E4F14500];
LABEL_47:
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "AVVCAudioQueueRecordingEngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1602;
      __int16 v55 = "%25s:%-5d handleRecordAQInput: record internally stopped, so throwing away buffer";
      long long v56 = v48;
      os_log_type_t v57 = OS_LOG_TYPE_DEBUG;
      goto LABEL_49;
    }
LABEL_78:

    return;
  }
  uint64_t v48 = *(id *)kAVVCScope;
  if (v48) {
    goto LABEL_47;
  }
}

void sub_19D81F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (v68 && a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a64);
  }

  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  if (v64)
  {

    if (a55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a55);
    }
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }

  _Unwind_Resume(a1);
}

void ___ZN29AVVCAudioQueueRecordingEngine16handleAudioInputEP16OpaqueAudioQueueP16AudioQueueBufferPK14AudioTimeStampjPK28AudioStreamPacketDescription_block_invoke(uint64_t a1)
{
}

void ___ZN29AVVCAudioQueueRecordingEngine16handleAudioInputEP16OpaqueAudioQueueP16AudioQueueBufferPK14AudioTimeStampjPK28AudioStreamPacketDescription_block_invoke_153(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    long long v3 = 0;
    goto LABEL_6;
  }
  long long v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 32)) == 0)
  {
LABEL_6:
    if (kAVVCScope)
    {
      uint64_t v5 = *(id *)kAVVCScope;
      if (!v5) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315650;
      int v8 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v9 = 1024;
      int v10 = 1859;
      __int16 v11 = 2048;
      uint64_t v12 = 0;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (engine: %p). Bailing", (uint8_t *)&v7, 0x1Cu);
    }

LABEL_13:
    if (!v3) {
      return;
    }
    goto LABEL_14;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 104))(v4);
LABEL_14:
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D81FAF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t RecordEncoderInputDataProc(OpaqueAudioConverter *a1, unsigned int *a2, AudioBufferList *a3, AudioStreamPacketDescription **a4, _DWORD *a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)a5;
  int v10 = a5[6];
  int v11 = a5[4];
  unsigned int v12 = a5[3] * v10;
  unsigned int v13 = v11 - v10;
  if (kAVVCScope)
  {
    id v14 = *(id *)kAVVCScope;
    if (!v14) {
      goto LABEL_8;
    }
  }
  else
  {
    id v14 = MEMORY[0x1E4F14500];
    id v15 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *a2;
    *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
    unint64_t v32 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v33 = 1024;
    int v34 = 1527;
    __int16 v35 = 1024;
    LODWORD(v36) = v16;
    WORD2(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 6) = v11 - v10;
    WORD5(v36) = 1024;
    HIDWORD(v36) = v12;
    _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d RecordEncoderInputDataProc: ENTRY: *ioNumberDataPackets passed in: %u, packets remaining: %u, bytes already consumed: %u", buf, 0x24u);
  }

LABEL_8:
  a3->mBuffers[0].mData = (void *)(*(void *)(v9 + 8) + v12);
  a3->mBuffers[0].UInt32 mDataByteSize = a5[3] * v13;
  a3->mBuffers[0].mNumberChannels = a5[2];
  if (a4) {
    *a4 = *(AudioStreamPacketDescription **)(v9 + 40);
  }
  if (!v11)
  {
    if (kAVVCScope)
    {
      __int16 v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_25:
        a3->mBuffers[0].UInt32 mDataByteSize = 0;
        *a2 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      __int16 v18 = MEMORY[0x1E4F14500];
      id v22 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unint64_t v32 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v33 = 1024;
      int v34 = 1537;
      _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d RecordEncoderInputDataProc: End of stream -- handing back zero size buffer", buf, 0x12u);
    }

    goto LABEL_25;
  }
  if (kAVVCScope)
  {
    UInt64 v17 = *(id *)kAVVCScope;
    if (!v17) {
      goto LABEL_26;
    }
  }
  else
  {
    UInt64 v17 = MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    mData = a3->mBuffers[0].mData;
    UInt32 mDataByteSize = a3->mBuffers[0].mDataByteSize;
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    unint64_t v32 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v33 = 1024;
    int v34 = 1543;
    __int16 v35 = 2048;
    *(void *)&long long v36 = mData;
    WORD4(v36) = 1024;
    *(_DWORD *)((char *)&v36 + 10) = mDataByteSize;
    _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d RecordEncoderInputDataProc: Handing back ioData buffer %p of size %u", buf, 0x22u);
  }

LABEL_26:
  *a2 = v13;
  unsigned int v23 = a5[6] + v13;
  a5[6] = v23;
  if (v23 > a5[4])
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: packetsRead <= packetsAvailable!", buf, 2u);
    }
    __break(1u);
  }
  if (v11 != v10 || v11 == 0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = 1802723939;
  }
  if (kAVVCScope)
  {
    if ((*(unsigned char *)(kAVVCScope + 12) & 8) != 0)
    {
      id v26 = *(id *)kAVVCScope;
      if (v26)
      {
        uint64_t v27 = v26;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          int v28 = *a2;
          CAX4CCString::CAX4CCString((CAX4CCString *)v30, v25);
          *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
          unint64_t v32 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v33 = 1024;
          int v34 = 1554;
          __int16 v35 = 1024;
          LODWORD(v36) = v28;
          WORD2(v36) = 2080;
          *(void *)((char *)&v36 + 6) = v30;
          _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d RecordEncoderInputDataProc: EXIT: *ioNumberDataPackets passed back out: %u, status: %s", buf, 0x22u);
        }
      }
    }
  }
  return v25;
}

void sub_19D81FF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::handleRecordQueuePropertyListener(AVVCAudioQueueRecordingEngine *this, OpaqueAudioQueue *a2, int a3)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v97, "handleRecordQueuePropertyListener");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v95, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (*((uint64_t *)this + 28) <= 1)
  {
    uint64_t v5 = &AudioDataAnalysisManagerLibraryLoader(void)::libSym;
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_14:
        if (kAVVCScope)
        {
          id v10 = *(id *)kAVVCScope;
          if (!v10) {
            goto LABEL_227;
          }
        }
        else
        {
          id v10 = (id)MEMORY[0x1E4F14500];
          id v11 = MEMORY[0x1E4F14500];
        }
        unsigned int v12 = v10;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v98, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
          unsigned int v13 = v98;
          if (v98)
          {
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v93, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
            (*(void (**)(uint64_t, void))(*(void *)v93 + 64))(v93, 0);
            uint64_t v5 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue();
            switch([v5 sessionState])
            {
              case 0u:
                goto LABEL_25;
              case 1u:
                id v14 = "Inactive";
                break;
              case 2u:
                id v14 = "InteruptedWhileRecording";
                break;
              case 3u:
                id v14 = "InteruptedWhilePlaying";
                break;
              case 4u:
                id v14 = "Deactivating";
                break;
              case 5u:
                id v14 = "Prewarming";
                break;
              case 6u:
                id v14 = "Activating";
                break;
              case 7u:
                id v14 = "Active";
                break;
              default:
                id v14 = "ILLEGAL";
                break;
            }
          }
          else
          {
LABEL_25:
            id v14 = "NotConfigured";
          }
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v91, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
          if (v91)
          {
            UInt64 v17 = v92;
            if (v92) {
              UInt64 v17 = (std::__shared_weak_count *)(v92->__shared_owners_ + 1);
            }
            __int16 v18 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v91, *(unsigned int *)(v91 + 272), v17];
          }
          else
          {
            __int16 v18 = @"(0x0) use_count:0";
          }
          id v19 = v18;
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v89, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
          uint64_t v20 = v89;
          if (v89)
          {
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v87, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
            unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 320))(v87);
            if (v21 > 4) {
              id v22 = "ILLEGAL";
            }
            else {
              id v22 = off_1E59657C0[v21];
            }
          }
          else
          {
            id v22 = "unconfigured";
          }
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v85, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
          if (v85)
          {
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v83, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
            unint64_t v33 = *(void *)(v83 + 224);
            if (v33 > 6) {
              int v34 = "ILLEGAL";
            }
            else {
              int v34 = off_1E59657E8[v33];
            }
            *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
            char v101 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v102 = 1024;
            int v103 = 1445;
            __int16 v104 = 2080;
            uint64_t v105 = v14;
            __int16 v106 = 2112;
            char v107 = v19;
            __int16 v108 = 2080;
            int v109 = v22;
            __int16 v110 = 2080;
            uint64_t v111 = v34;
            _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
            if (v84) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v84);
            }
          }
          else
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
            char v101 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v102 = 1024;
            int v103 = 1445;
            __int16 v104 = 2080;
            uint64_t v105 = v14;
            __int16 v106 = 2112;
            char v107 = v19;
            __int16 v108 = 2080;
            int v109 = v22;
            __int16 v110 = 2080;
            uint64_t v111 = "unconfigured";
            _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
          }
          if (v86) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v86);
          }
          if (v20 && v88) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v88);
          }
          if (v90) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v90);
          }

          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
          if (v13)
          {

            if (v94) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v94);
            }
          }
          if (v99) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v99);
          }
        }
        goto LABEL_227;
      }
    }
    else
    {
      id v6 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      char v101 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v102 = 1024;
      int v103 = 1444;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d handleRecordAQPropertyChange: queue already destroyed -- noop", buf, 0x12u);
    }

    goto LABEL_14;
  }
  if (a3 == 1902343781)
  {
    UInt32 ioDataSize = 4;
    unsigned int outData = 0;
    OSStatus Property = AudioQueueGetProperty(*((AudioQueueRef *)this + 76), 0x71637665u, &outData, &ioDataSize);
    if (kAVVCScope)
    {
      id v16 = *(id *)kAVVCScope;
      if (!v16) {
        goto LABEL_43;
      }
    }
    else
    {
      id v16 = (id)MEMORY[0x1E4F14500];
      id v26 = MEMORY[0x1E4F14500];
    }
    uint64_t v27 = v16;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v98, outData);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      char v101 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v102 = 1024;
      int v103 = 1483;
      __int16 v104 = 2080;
      uint64_t v105 = (const char *)&v98;
      _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Record Listener: Converter error: %s", buf, 0x1Cu);
    }

LABEL_43:
    if (kAVVCScope)
    {
      id v28 = *(id *)kAVVCScope;
      if (!v28)
      {
LABEL_145:
        if (!Property && !*((unsigned char *)this + 760))
        {
          uint64_t v55 = *((void *)this + 15);
          if (v55) {
            (*(void (**)(uint64_t, void))(v55 + 16))(v55, outData);
          }
          *((unsigned char *)this + 760) = 1;
        }
        goto LABEL_227;
      }
    }
    else
    {
      id v28 = (id)MEMORY[0x1E4F14500];
      id v29 = MEMORY[0x1E4F14500];
    }
    id v30 = v28;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v98, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      uint64_t v31 = v98;
      if (v98)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v93, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        uint64_t v74 = (*(void (**)(uint64_t, void))(*(void *)v93 + 64))(v93, 0);
        switch([v74 sessionState])
        {
          case 0u:
            goto LABEL_111;
          case 1u:
            unint64_t v32 = "Inactive";
            break;
          case 2u:
            unint64_t v32 = "InteruptedWhileRecording";
            break;
          case 3u:
            unint64_t v32 = "InteruptedWhilePlaying";
            break;
          case 4u:
            unint64_t v32 = "Deactivating";
            break;
          case 5u:
            unint64_t v32 = "Prewarming";
            break;
          case 6u:
            unint64_t v32 = "Activating";
            break;
          case 7u:
            unint64_t v32 = "Active";
            break;
          default:
            unint64_t v32 = "ILLEGAL";
            break;
        }
      }
      else
      {
LABEL_111:
        unint64_t v32 = "NotConfigured";
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v75, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      if (v75)
      {
        uint64_t v47 = v76;
        if (v76) {
          uint64_t v47 = (std::__shared_weak_count *)(v76->__shared_owners_ + 1);
        }
        uint64_t v48 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v75, *(unsigned int *)(v75 + 272), v47];
      }
      else
      {
        uint64_t v48 = @"(0x0) use_count:0";
      }
      __int16 v49 = v48;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v89, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      uint64_t v50 = v89;
      if (v89)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v87, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        unsigned int v51 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 320))(v87);
        if (v51 > 4) {
          id v52 = "ILLEGAL";
        }
        else {
          id v52 = off_1E59657C0[v51];
        }
      }
      else
      {
        id v52 = "unconfigured";
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v85, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      if (v85)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v83, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        unint64_t v53 = *(void *)(v83 + 224);
        if (v53 > 6) {
          id v54 = "ILLEGAL";
        }
        else {
          id v54 = off_1E59657E8[v53];
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        char v101 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v102 = 1024;
        int v103 = 1484;
        __int16 v104 = 2080;
        uint64_t v105 = v32;
        __int16 v106 = 2112;
        char v107 = v49;
        __int16 v108 = 2080;
        int v109 = v52;
        __int16 v110 = 2080;
        uint64_t v111 = v54;
        _os_log_impl(&dword_19D794000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
        if (v84) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v84);
        }
      }
      else
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        char v101 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v102 = 1024;
        int v103 = 1484;
        __int16 v104 = 2080;
        uint64_t v105 = v32;
        __int16 v106 = 2112;
        char v107 = v49;
        __int16 v108 = 2080;
        int v109 = v52;
        __int16 v110 = 2080;
        uint64_t v111 = "unconfigured";
        _os_log_impl(&dword_19D794000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      }
      if (v86) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v86);
      }
      if (v50 && v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }
      if (v90) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
      }

      if (v76) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v76);
      }
      if (v31)
      {

        if (v94) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v94);
        }
      }
      if (v99) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v99);
      }
    }
    goto LABEL_145;
  }
  if (a3 != 1634824814) {
    goto LABEL_227;
  }
  unsigned int v7 = QueueIsRunning(*((OpaqueAudioQueue **)this + 76));
  if (kAVVCScope)
  {
    int v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_79;
    }
  }
  else
  {
    int v8 = MEMORY[0x1E4F14500];
    id v23 = MEMORY[0x1E4F14500];
  }
  int v8 = v8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v98, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    unint64_t v24 = *((void *)this + 28);
    uint64_t v25 = v24 > 6 ? "ILLEGAL" : off_1E59657E8[v24];
    *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
    char v101 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v102 = 1024;
    int v103 = 1453;
    __int16 v104 = 2048;
    uint64_t v105 = v98;
    __int16 v106 = 2080;
    char v107 = (__CFString *)v25;
    __int16 v108 = 1024;
    LODWORD(v109) = v7;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d handleRecordQueuePropertyListener (%p): Stream State: %s. AQ Running: %d", buf, 0x2Cu);
    if (v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v99);
    }
  }

LABEL_79:
  if (!v7)
  {
    kdebug_trace();
    if (kAVVCScope)
    {
      if (*(unsigned char *)(kAVVCScope + 8))
      {
        uint64_t v37 = *(id *)kAVVCScope;
        if (v37)
        {
          OSStatus v38 = v37;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            char v101 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v102 = 1024;
            int v103 = 1468;
            _os_log_impl(&dword_19D794000, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Record Listener: STOPPED", buf, 0x12u);
          }
        }
      }
    }
    if (kAVVCScope)
    {
      id v39 = *(id *)kAVVCScope;
      if (!v39)
      {
LABEL_196:
        if (*((void *)this + 28) == 6)
        {
          *((_DWORD *)this + 167) = 0;
          *((unsigned char *)this + 684) = 0;
          AVVCRecordingEngine::doneRecording(v95);
        }
        goto LABEL_227;
      }
    }
    else
    {
      id v39 = (id)MEMORY[0x1E4F14500];
      id v43 = MEMORY[0x1E4F14500];
    }
    UInt64 v44 = v39;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v98, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      UInt32 v45 = v98;
      if (v98)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v93, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        int v8 = (*(void (**)(uint64_t, void))(*(void *)v93 + 64))(v93, 0);
        switch([v8 sessionState])
        {
          case 0u:
            goto LABEL_162;
          case 1u:
            int v46 = "Inactive";
            break;
          case 2u:
            int v46 = "InteruptedWhileRecording";
            break;
          case 3u:
            int v46 = "InteruptedWhilePlaying";
            break;
          case 4u:
            int v46 = "Deactivating";
            break;
          case 5u:
            int v46 = "Prewarming";
            break;
          case 6u:
            int v46 = "Activating";
            break;
          case 7u:
            int v46 = "Active";
            break;
          default:
            int v46 = "ILLEGAL";
            break;
        }
      }
      else
      {
LABEL_162:
        int v46 = "NotConfigured";
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v79, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      if (v79)
      {
        id v60 = v80;
        if (v80) {
          id v60 = (std::__shared_weak_count *)(v80->__shared_owners_ + 1);
        }
        uint64_t v61 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v79, *(unsigned int *)(v79 + 272), v60];
      }
      else
      {
        uint64_t v61 = @"(0x0) use_count:0";
      }
      uint64_t v62 = v61;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v89, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      uint64_t v63 = v89;
      if (v89)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v87, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        unsigned int v64 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 320))(v87);
        if (v64 > 4) {
          uint64_t v65 = "ILLEGAL";
        }
        else {
          uint64_t v65 = off_1E59657C0[v64];
        }
      }
      else
      {
        uint64_t v65 = "unconfigured";
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v85, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      if (v85)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v83, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        unint64_t v66 = *(void *)(v83 + 224);
        if (v66 > 6) {
          unint64_t v67 = "ILLEGAL";
        }
        else {
          unint64_t v67 = off_1E59657E8[v66];
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        char v101 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v102 = 1024;
        int v103 = 1469;
        __int16 v104 = 2080;
        uint64_t v105 = v46;
        __int16 v106 = 2112;
        char v107 = v62;
        __int16 v108 = 2080;
        int v109 = v65;
        __int16 v110 = 2080;
        uint64_t v111 = v67;
        _os_log_impl(&dword_19D794000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
        if (v84) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v84);
        }
      }
      else
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        char v101 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v102 = 1024;
        int v103 = 1469;
        __int16 v104 = 2080;
        uint64_t v105 = v46;
        __int16 v106 = 2112;
        char v107 = v62;
        __int16 v108 = 2080;
        int v109 = v65;
        __int16 v110 = 2080;
        uint64_t v111 = "unconfigured";
        _os_log_impl(&dword_19D794000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      }
      if (v86) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v86);
      }
      if (v63 && v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }
      if (v90) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
      }

      if (v80) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v80);
      }
      if (v45)
      {

        if (v94) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v94);
        }
      }
      if (v99) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v99);
      }
    }
    goto LABEL_196;
  }
  if (*((void *)this + 28) == 4)
  {
    kdebug_trace();
    if (kAVVCScope)
    {
      if (*(unsigned char *)(kAVVCScope + 8))
      {
        __int16 v35 = *(id *)kAVVCScope;
        if (v35)
        {
          long long v36 = v35;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            char v101 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v102 = 1024;
            int v103 = 1458;
            _os_log_impl(&dword_19D794000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Record Listener: RUNNING", buf, 0x12u);
          }
        }
      }
    }
    AVVCRecordingEngine::startedRecording(v95);
  }
  else
  {
    if (kAVVCScope)
    {
      if (*(unsigned char *)(kAVVCScope + 8))
      {
        id v40 = *(id *)kAVVCScope;
        if (v40)
        {
          id v41 = v40;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            char v101 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v102 = 1024;
            int v103 = 1462;
            _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Record Listener: RUNNING-PAUSED", buf, 0x12u);
          }
        }
      }
    }
    if (kAVVCScope)
    {
      id v42 = *(id *)kAVVCScope;
      if (!v42) {
        goto LABEL_227;
      }
    }
    else
    {
      id v42 = (id)MEMORY[0x1E4F14500];
      id v56 = MEMORY[0x1E4F14500];
    }
    os_log_type_t v57 = v42;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v98, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      id v58 = v98;
      if (v98)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v93, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        int v8 = (*(void (**)(uint64_t, void))(*(void *)v93 + 64))(v93, 0);
        switch([v8 sessionState])
        {
          case 0u:
            goto LABEL_198;
          case 1u:
            id v59 = "Inactive";
            break;
          case 2u:
            id v59 = "InteruptedWhileRecording";
            break;
          case 3u:
            id v59 = "InteruptedWhilePlaying";
            break;
          case 4u:
            id v59 = "Deactivating";
            break;
          case 5u:
            id v59 = "Prewarming";
            break;
          case 6u:
            id v59 = "Activating";
            break;
          case 7u:
            id v59 = "Active";
            break;
          default:
            id v59 = "ILLEGAL";
            break;
        }
      }
      else
      {
LABEL_198:
        id v59 = "NotConfigured";
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v81, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      engineToString(v81, (uint64_t)v82);
      uint64_t v68 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v89, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      uint64_t v69 = v89;
      if (v89)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v87, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        unsigned int v70 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 320))(v87);
        if (v70 > 4) {
          uint64_t v71 = "ILLEGAL";
        }
        else {
          uint64_t v71 = off_1E59657C0[v70];
        }
      }
      else
      {
        uint64_t v71 = "unconfigured";
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v85, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      if (v85)
      {
        std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v83, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
        unint64_t v72 = *(void *)(v83 + 224);
        if (v72 > 6) {
          uint64_t v73 = "ILLEGAL";
        }
        else {
          uint64_t v73 = off_1E59657E8[v72];
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        char v101 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v102 = 1024;
        int v103 = 1463;
        __int16 v104 = 2080;
        uint64_t v105 = v59;
        __int16 v106 = 2112;
        char v107 = v68;
        __int16 v108 = 2080;
        int v109 = v71;
        __int16 v110 = 2080;
        uint64_t v111 = v73;
        _os_log_impl(&dword_19D794000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
        if (v84) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v84);
        }
      }
      else
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        char v101 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v102 = 1024;
        int v103 = 1463;
        __int16 v104 = 2080;
        uint64_t v105 = v59;
        __int16 v106 = 2112;
        char v107 = v68;
        __int16 v108 = 2080;
        int v109 = v71;
        __int16 v110 = 2080;
        uint64_t v111 = "unconfigured";
        _os_log_impl(&dword_19D794000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      }
      if (v86) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v86);
      }
      if (v69 && v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }
      if (v90) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
      }

      if (v82) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v82);
      }
      if (v58)
      {

        if (v94) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v94);
        }
      }
      if (v99) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v99);
      }
    }
  }
LABEL_227:
  if (v96) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v96);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v97);
}

void sub_19D8212DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33,char a34)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v38 && a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }

  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v37)
  {

    if (a31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a31);
    }
  }
  id v41 = *(std::__shared_weak_count **)(v39 - 184);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }

  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  TraceMethod::~TraceMethod((TraceMethod *)&a34);
  _Unwind_Resume(a1);
}

__CFString *engineToString(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2) {
      uint64_t v3 = *(void *)(a2 + 8) + 1;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", a1, *(unsigned int *)(a1 + 272), v3];
  }
  else
  {
    uint64_t v4 = @"(0x0) use_count:0";
  }
  return v4;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getQueuePtrPropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, void *a3, unsigned int *a4)
{
  uint64_t result = (OpaqueAudioQueue *)*((void *)this + 76);
  if (result) {
    return (OpaqueAudioQueue *)AudioQueueGetProperty(result, a2, a3, a4);
  }
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getQueuePropertyValueSize(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, unsigned int *a3)
{
  uint64_t result = (OpaqueAudioQueue *)*((void *)this + 76);
  if (result) {
    return (OpaqueAudioQueue *)AudioQueueGetPropertySize(result, a2, a3);
  }
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::setQueueFloat64PropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, double a3)
{
  double inData = a3;
  uint64_t result = (OpaqueAudioQueue *)*((void *)this + 76);
  if (result) {
    return (OpaqueAudioQueue *)AudioQueueSetProperty(result, a2, &inData, 8u);
  }
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::setQueueUInt32PropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, int a3)
{
  int inData = a3;
  uint64_t result = (OpaqueAudioQueue *)*((void *)this + 76);
  if (result) {
    return (OpaqueAudioQueue *)AudioQueueSetProperty(result, a2, &inData, 4u);
  }
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getQueueFloat64PropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, double *a3)
{
  uint64_t result = (OpaqueAudioQueue *)*((void *)this + 76);
  if (result)
  {
    UInt32 ioDataSize = 8;
    return (OpaqueAudioQueue *)AudioQueueGetProperty(result, a2, a3, &ioDataSize);
  }
  return result;
}

OpaqueAudioQueue *AVVCAudioQueueRecordingEngine::getQueueUInt32PropertyValue(AVVCAudioQueueRecordingEngine *this, AudioQueuePropertyID a2, unsigned int *a3)
{
  uint64_t result = (OpaqueAudioQueue *)*((void *)this + 76);
  if (result)
  {
    UInt32 ioDataSize = 4;
    return (OpaqueAudioQueue *)AudioQueueGetProperty(result, a2, a3, &ioDataSize);
  }
  return result;
}

double AVVCAudioQueueRecordingEngine::getElapsedRecordTime(AVVCAudioQueueRecordingEngine *this, double a2)
{
  return (double)*((unint64_t *)this + 84) / a2;
}

uint64_t AVVCAudioQueueRecordingEngine::resetAudioEngine(AudioQueueRef *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v6, "resetAudioEngine");
  if (kAVVCScope)
  {
    uint64_t v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v8 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v9 = 1024;
    int v10 = 1946;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d doneRecording: resetting record queue", buf, 0x12u);
  }

LABEL_8:
  if (this[76])
  {
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "resetAudioEngine", "resetAudioEngine:mRecordQueue: AudioQueueReset", 0);
    uint64_t v4 = AudioQueueReset(this[76]);
    ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  }
  else
  {
    uint64_t v4 = 0;
  }
  TraceMethod::~TraceMethod((TraceMethod *)v6);
  return v4;
}

void sub_19D821964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::updateStreamStoppedState(AVVCAudioQueueRecordingEngine *this)
{
  if (*((void *)this + 76)) {
    uint64_t v1 = 3;
  }
  else {
    uint64_t v1 = 1;
  }
  AVVCRecordingEngine::setStreamState((uint64_t)this, v1);
}

uint64_t AVVCAudioQueueRecordingEngine::updateMeterLevels(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((unsigned int *)this + 13);
  uint64_t v3 = (void *)*((void *)this + 38);
  if (!v3)
  {
    uint64_t v3 = malloc_type_calloc(*((unsigned int *)this + 13), 8uLL, 0x100004000313F17uLL);
    *((void *)this + 38) = v3;
  }
  if (!*((unsigned char *)this + 296)
    || ((uint64_t v4 = (OpaqueAudioQueue *)*((void *)this + 76)) != 0 ? (v5 = v3 == 0) : (v5 = 1), v5))
  {
    uint64_t v6 = 4294900625;
    if (kAVVCScope)
    {
      unsigned int v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_18;
      }
    }
    else
    {
      unsigned int v7 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *((unsigned __int8 *)this + 296);
      BOOL v11 = *((void *)this + 76) != 0;
      BOOL v12 = *((void *)this + 38) != 0;
      UInt32 v16 = 136316162;
      UInt64 v17 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v18 = 1024;
      int v19 = 1315;
      __int16 v20 = 1024;
      int v21 = v10;
      __int16 v22 = 1024;
      BOOL v23 = v11;
      __int16 v24 = 1024;
      BOOL v25 = v12;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCAudioQueueRecordingEngine::updateMeterLevels: not fetching meter levels because one of them is untrue! mMeteringEnabled(%d), mRecordQueue(%d), mRecordMeters(%d)", (uint8_t *)&v16, 0x24u);
    }
  }
  else
  {
    UInt32 v16 = 8 * v2;
    uint64_t Property = AudioQueueGetProperty(v4, 0x61716D64u, v3, &v16);
    uint64_t v6 = Property;
    if (!Property) {
      return v6;
    }
  }
LABEL_18:
  if (kAVVCScope)
  {
    unsigned int v13 = *(id *)kAVVCScope;
    if (!v13)
    {
      if (!v2) {
        return v6;
      }
LABEL_21:
      memset_pattern16(*((void **)this + 38), &unk_19D8B1E80, 8 * v2);
      return v6;
    }
  }
  else
  {
    unsigned int v13 = MEMORY[0x1E4F14500];
    id v15 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    UInt32 v16 = 136315650;
    UInt64 v17 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v18 = 1024;
    int v19 = 1318;
    __int16 v20 = 1024;
    int v21 = v6;
    _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCAudioQueueRecordingEngine::updateMeterLevels: Error! In fetching meter levels. Sending 'no signal'. Error(%d)", (uint8_t *)&v16, 0x18u);
  }

  if (v2) {
    goto LABEL_21;
  }
  return v6;
}

NSObject *AVVCAudioQueueRecordingEngine::enableMetering(AVVCAudioQueueRecordingEngine *this, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v23, "enableMetering");
  uint64_t v4 = (OpaqueAudioQueue *)*((void *)this + 76);
  if (v4)
  {
    int inData = a2;
    BOOL v5 = AudioQueueSetProperty(v4, 0x61716D65u, &inData, 4u);
    uint64_t v6 = v5;
    if (!v5)
    {
LABEL_25:
      if (!a2) {
        goto LABEL_42;
      }
      int inData = 1;
      BOOL v12 = AudioQueueSetProperty(*((AudioQueueRef *)this + 76), 0x71696E6Du, &inData, 4u);
      uint64_t v6 = v12;
      if (!v12) {
        goto LABEL_42;
      }
      if ((v12 + 199999) < 0x61A7F)
      {
        if (kAVVCScope)
        {
          unsigned int v13 = *(id *)kAVVCScope;
          if (!v13) {
            goto LABEL_42;
          }
        }
        else
        {
          unsigned int v13 = MEMORY[0x1E4F14500];
          id v14 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          BOOL v25 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v26 = 1024;
          int v27 = 1283;
          __int16 v28 = 1024;
          int v29 = (int)v6;
          id v15 = "%25s:%-5d ERROR: enableMetering: AudioQueueSetProperty(kAudioQueueProperty_InstantaneousMetering) err %d";
LABEL_40:
          _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, v15, buf, 0x18u);
          goto LABEL_41;
        }
        goto LABEL_41;
      }
      if (kAVVCScope)
      {
        unsigned int v13 = *(id *)kAVVCScope;
        if (!v13) {
          goto LABEL_42;
        }
      }
      else
      {
        unsigned int v13 = MEMORY[0x1E4F14500];
        id v16 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        BOOL v25 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v26 = 1024;
        int v27 = 1283;
        __int16 v28 = 1024;
        int v29 = (int)v6;
        id v15 = "%25s:%-5d ERROR: enableMetering: AudioQueueSetProperty(kAudioQueueProperty_InstantaneousMetering) err %{audio:4CC}d";
        goto LABEL_40;
      }
LABEL_41:

      goto LABEL_42;
    }
    if ((v5 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        unsigned int v7 = *(id *)kAVVCScope;
        if (!v7) {
          goto LABEL_25;
        }
      }
      else
      {
        unsigned int v7 = MEMORY[0x1E4F14500];
        id v11 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      BOOL v25 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v26 = 1024;
      int v27 = 1279;
      __int16 v28 = 1024;
      int v29 = (int)v6;
      int v10 = "%25s:%-5d ERROR: enableMetering: AudioQueueSetProperty(kAudioQueueProperty_EnableLevelMetering) err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        unsigned int v7 = *(id *)kAVVCScope;
        if (!v7) {
          goto LABEL_25;
        }
      }
      else
      {
        unsigned int v7 = MEMORY[0x1E4F14500];
        id v9 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      BOOL v25 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v26 = 1024;
      int v27 = 1279;
      __int16 v28 = 1024;
      int v29 = (int)v6;
      int v10 = "%25s:%-5d ERROR: enableMetering: AudioQueueSetProperty(kAudioQueueProperty_EnableLevelMetering) err %d";
    }
    _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, v10, buf, 0x18u);
LABEL_24:

    goto LABEL_25;
  }
  if (kAVVCScope)
  {
    uint64_t v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
    id v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    BOOL v25 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v26 = 1024;
    int v27 = 1286;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCAudioQueueRecordingEngine: Record queue does not exist to enable metering. Caching, and will enable during prepare", buf, 0x12u);
  }

  uint64_t v6 = 0;
LABEL_42:
  if (v6) {
    char v17 = 0;
  }
  else {
    char v17 = a2;
  }
  *((unsigned char *)this + 296) = v17;
  if (kAVVCScope)
  {
    __int16 v18 = *(id *)kAVVCScope;
    if (!v18) {
      goto LABEL_52;
    }
  }
  else
  {
    __int16 v18 = MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *((unsigned __int8 *)this + 296);
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    BOOL v25 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v26 = 1024;
    int v27 = 1289;
    __int16 v28 = 1024;
    int v29 = v20;
    _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCAudioQueueRecordingEngine: Enable Metering?: %d", buf, 0x18u);
  }

LABEL_52:
  TraceMethod::~TraceMethod((TraceMethod *)v23);
  return v6;
}

void sub_19D822038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::enableSiriListeningMode(AudioQueueRef *this, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int inData = a2;
  TraceMethod::TraceMethod((TraceMethod *)v5, "enableSiriListeningMode");
  if (this[76] && this[64] == (AudioQueueRef)1)
  {
    ElapsedTime::ElapsedTime((ElapsedTime *)v7, "enableSiriListeningMode", "AudioQueueSetProperty : kAudioQueueProperty_EnableSiriListening", 0);
    uint64_t v3 = AudioQueueSetProperty(this[76], 0x6C73746Eu, &inData, 4u);
    ElapsedTime::~ElapsedTime((ElapsedTime *)v7);
  }
  else
  {
    uint64_t v3 = 0;
  }
  TraceMethod::~TraceMethod((TraceMethod *)v5);
  return v3;
}

void sub_19D822124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::resetRecordBuffersEnqueued(uint64_t this)
{
  *(_DWORD *)(this + 668) = 0;
  return this;
}

uint64_t AVVCAudioQueueRecordingEngine::getNumberOfChannels(AVVCAudioQueueRecordingEngine *this)
{
  return *((unsigned int *)this + 170);
}

__n128 AVVCAudioQueueRecordingEngine::getRecordQueueFormat@<Q0>(AVVCAudioQueueRecordingEngine *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = *((void *)this + 81);
  __n128 result = *(__n128 *)((char *)this + 616);
  long long v3 = *(_OWORD *)((char *)this + 632);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void AVVCAudioQueueRecordingEngine::destroyRecordEngine(AVVCAudioQueueRecordingEngine *this, int a2)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  int v88 = 4119;
  char v89 = 1;
  long long v90 = 0u;
  long long v91 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v87, "destroyRecordEngine");
  if (kAVVCScope)
  {
    id v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_43;
    }
  }
  else
  {
    id v4 = (id)MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  uint64_t v6 = v4;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v85, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    unsigned int v7 = v85;
    if (v85)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v83, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unint64_t v72 = (*(void (**)(uint64_t, void))(*(void *)v83 + 64))(v83, 0);
      switch([v72 sessionState])
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          uint64_t v8 = "Inactive";
          break;
        case 2u:
          uint64_t v8 = "InteruptedWhileRecording";
          break;
        case 3u:
          uint64_t v8 = "InteruptedWhilePlaying";
          break;
        case 4u:
          uint64_t v8 = "Deactivating";
          break;
        case 5u:
          uint64_t v8 = "Prewarming";
          break;
        case 6u:
          uint64_t v8 = "Activating";
          break;
        case 7u:
          uint64_t v8 = "Active";
          break;
        default:
          uint64_t v8 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      uint64_t v8 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v81, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v81)
    {
      id v9 = v82;
      if (v82) {
        id v9 = (std::__shared_weak_count *)(v82->__shared_owners_ + 1);
      }
      int v10 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v81, *(unsigned int *)(v81 + 272), v9];
    }
    else
    {
      int v10 = @"(0x0) use_count:0";
    }
    id v11 = v10;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v79, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v12 = v79;
    if (v79)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v77, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v77 + 320))(v77);
      if (v13 > 4) {
        id v14 = "ILLEGAL";
      }
      else {
        id v14 = off_1E59657C0[v13];
      }
    }
    else
    {
      id v14 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v75, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v75)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v73, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unint64_t v15 = *(void *)(v73 + 224);
      if (v15 > 6) {
        id v16 = "ILLEGAL";
      }
      else {
        id v16 = off_1E59657E8[v15];
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v94 = 1024;
      int v95 = 1156;
      __int16 v96 = 2080;
      int v97 = v8;
      __int16 v98 = 2112;
      uint64_t v99 = v11;
      __int16 v100 = 2080;
      char v101 = v14;
      __int16 v102 = 2080;
      int v103 = v16;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
    }
    else
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v94 = 1024;
      int v95 = 1156;
      __int16 v96 = 2080;
      int v97 = v8;
      __int16 v98 = 2112;
      uint64_t v99 = v11;
      __int16 v100 = 2080;
      char v101 = v14;
      __int16 v102 = 2080;
      int v103 = "unconfigured";
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    if (v12 && v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    if (v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
    }

    if (v82) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    }
    if (v7)
    {

      if (v84) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v84);
      }
    }
    if (v86) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v86);
    }
  }
LABEL_43:
  if (kAVVCScope)
  {
    id v17 = *(id *)kAVVCScope;
    if (!v17) {
      goto LABEL_50;
    }
  }
  else
  {
    id v17 = (id)MEMORY[0x1E4F14500];
    id v18 = MEMORY[0x1E4F14500];
  }
  id v19 = v17;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v94 = 1024;
    int v95 = 1157;
    _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling destroyRecordEngine", buf, 0x12u);
  }

LABEL_50:
  if (!*((void *)this + 76))
  {
LABEL_155:
    TraceMethod::~TraceMethod((TraceMethod *)v87);
    TraceWrapper::~TraceWrapper((TraceWrapper *)&v88);
    return;
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v85, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  int v20 = (OpaqueAudioQueue *)*((void *)this + 76);
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      id v21 = *(id *)kAVVCScope;
      if (v21)
      {
        __int16 v22 = v21;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v94 = 1024;
          int v95 = 1163;
          _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine: mRecordIsStopping set to true", buf, 0x12u);
        }
      }
    }
  }
  *((unsigned char *)this + 252) = 1;
  AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
  *((void *)this + 76) = 0;
  if (a2)
  {
    int v23 = *((_DWORD *)this + 58);
    if (v23 != -11790 && v23 != -11785)
    {
      if (kAVVCScope)
      {
        if (*(unsigned char *)(kAVVCScope + 8))
        {
          id v31 = *(id *)kAVVCScope;
          if (v31)
          {
            unint64_t v32 = v31;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
              __int16 v94 = 1024;
              int v95 = 1170;
              _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine: about to call AudioQueueStop(..., true)", buf, 0x12u);
            }
          }
        }
      }
      ElapsedTime::ElapsedTime((ElapsedTime *)buf, "destroyRecordEngine", "queue : AudioQueueStop", 0);
      OSStatus v33 = AudioQueueStop(v20, 1u);
      ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
      if (kAVVCScope)
      {
        id v34 = *(id *)kAVVCScope;
        if (!v34) {
          goto LABEL_127;
        }
      }
      else
      {
        id v34 = (id)MEMORY[0x1E4F14500];
        id v48 = MEMORY[0x1E4F14500];
      }
      __int16 v49 = v34;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v50 = " but failed";
        *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
        uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
        int v95 = 1178;
        __int16 v96 = 2080;
        __int16 v94 = 1024;
        if (!v33) {
          uint64_t v50 = "";
        }
        int v97 = v50;
        __int16 v98 = 1024;
        LODWORD(v99) = v33;
        _os_log_impl(&dword_19D794000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC stopped record queue%s (%d)", buf, 0x22u);
      }

LABEL_127:
      if (!v33) {
        goto LABEL_174;
      }
      if ((v33 + 199999) >= 0x61A7F)
      {
        if (kAVVCScope)
        {
          id v65 = *(id *)kAVVCScope;
          if (!v65)
          {
LABEL_174:
            if (kAVVCScope)
            {
              if (*(unsigned char *)(kAVVCScope + 8))
              {
                id v70 = *(id *)kAVVCScope;
                if (v70)
                {
                  uint64_t v71 = v70;
                  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                    uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
                    __int16 v94 = 1024;
                    int v95 = 1181;
                    _os_log_impl(&dword_19D794000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine:  calling doneRecording by hand", buf, 0x12u);
                  }
                }
              }
            }
            AVVCRecordingEngine::doneRecording(v85);
LABEL_62:
            AudioQueueRemovePropertyListener(v20, 0x6171726Eu, (AudioQueuePropertyListenerProc)AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc, (char *)this + 864);
            AudioQueueRemovePropertyListener(v20, 0x71637665u, (AudioQueuePropertyListenerProc)AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc, (char *)this + 864);
            __int16 v24 = (std::__shared_weak_count *)*((void *)this + 109);
            *((_OWORD *)this + 54) = 0u;
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            if (kAVVCScope)
            {
              id v25 = *(id *)kAVVCScope;
              if (!v25) {
                goto LABEL_72;
              }
            }
            else
            {
              id v25 = (id)MEMORY[0x1E4F14500];
              id v26 = MEMORY[0x1E4F14500];
            }
            int v27 = v25;
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
              __int16 v94 = 1024;
              int v95 = 1196;
              _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d destroyRecordEngine: about to call AudioQueueDispose(..., true)", buf, 0x12u);
            }

LABEL_72:
            ElapsedTime::ElapsedTime((ElapsedTime *)buf, "destroyRecordEngine", "destroyRecordEngine: AudioQueueDispose", 0);
            OSStatus v28 = AudioQueueDispose(v20, 1u);
            ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
            if (!v28) {
              goto LABEL_97;
            }
            if ((v28 + 199999) >= 0x61A7F)
            {
              if (kAVVCScope)
              {
                id v30 = *(id *)kAVVCScope;
                if (!v30)
                {
LABEL_97:
                  CallbackBarrier(*(__CFRunLoop **)(*((void *)this + 96) + 128));
                  AVVCRecordingEngine::setStreamState((uint64_t)this, 1);
                  uint64_t v39 = *((void *)this + 82);
                  if (v39) {
                    MEMORY[0x19F3ABB10](v39, 0x20C8093837F09);
                  }
                  *((void *)this + 82) = 0;
                  if (kAVVCScope)
                  {
                    if (*(unsigned char *)(kAVVCScope + 8))
                    {
                      id v40 = *(id *)kAVVCScope;
                      if (v40)
                      {
                        id v41 = v40;
                        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                          uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
                          __int16 v94 = 1024;
                          int v95 = 1212;
                          _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine: mRecordIsStopping set to false", buf, 0x12u);
                        }
                      }
                    }
                  }
                  *((unsigned char *)this + 252) = 0;
                  *((_DWORD *)this + 167) = 0;
                  *((unsigned char *)this + 684) = 0;
                  if (*((void *)this + 97))
                  {
                    if (kAVVCScope)
                    {
                      if (*(unsigned char *)(kAVVCScope + 8))
                      {
                        id v42 = *(id *)kAVVCScope;
                        if (v42)
                        {
                          id v43 = v42;
                          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                            uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
                            __int16 v94 = 1024;
                            int v95 = 1219;
                            _os_log_impl(&dword_19D794000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyRecordEngine: about to destroy audio converter", buf, 0x12u);
                          }
                        }
                      }
                    }
                    OSStatus v44 = AudioConverterDispose(*((AudioConverterRef *)this + 97));
                    OSStatus v45 = v44;
                    if (*((_DWORD *)this + 58) != -11785)
                    {
                      if (v44)
                      {
                        if ((v44 + 199999) < 0x61A7F)
                        {
                          if (kAVVCScope)
                          {
                            id v46 = *(id *)kAVVCScope;
                            if (!v46) {
                              goto LABEL_140;
                            }
                          }
                          else
                          {
                            id v46 = (id)MEMORY[0x1E4F14500];
                            id v52 = MEMORY[0x1E4F14500];
                          }
                          unint64_t v53 = v46;
                          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                            uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
                            __int16 v94 = 1024;
                            int v95 = 1222;
                            __int16 v96 = 1024;
                            LODWORD(v97) = v45;
                            id v54 = "%25s:%-5d ERROR: destroyRecordEngine: AudioConverterDispose err %d";
LABEL_138:
                            _os_log_impl(&dword_19D794000, v53, OS_LOG_TYPE_ERROR, v54, buf, 0x18u);
                            goto LABEL_139;
                          }
                          goto LABEL_139;
                        }
                        if (kAVVCScope)
                        {
                          id v47 = *(id *)kAVVCScope;
                          if (!v47) {
                            goto LABEL_140;
                          }
                        }
                        else
                        {
                          id v47 = (id)MEMORY[0x1E4F14500];
                          id v55 = MEMORY[0x1E4F14500];
                        }
                        unint64_t v53 = v47;
                        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                          uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
                          __int16 v94 = 1024;
                          int v95 = 1222;
                          __int16 v96 = 1024;
                          LODWORD(v97) = v45;
                          id v54 = "%25s:%-5d ERROR: destroyRecordEngine: AudioConverterDispose err %{audio:4CC}d";
                          goto LABEL_138;
                        }
LABEL_139:
                      }
                    }
                  }
LABEL_140:
                  *((void *)this + 97) = 0;
                  id v56 = (void *)*((void *)this + 105);
                  *((void *)this + 105) = 0;

                  os_log_type_t v57 = (void *)*((void *)this + 101);
                  if (v57)
                  {
                    free(v57);
                    *((void *)this + 101) = 0;
                  }
                  uint64_t v58 = *((void *)this + 100);
                  if (v58)
                  {
                    MEMORY[0x19F3ABB10](v58, 0x1000C8077774924);
                    *((void *)this + 100) = 0;
                  }
                  id v59 = (void *)*((void *)this + 99);
                  *((void *)this + 99) = 0;

                  if (!*((void *)this + 104)) {
                    goto LABEL_153;
                  }
                  if (kAVVCScope)
                  {
                    id v60 = *(id *)kAVVCScope;
                    if (!v60)
                    {
LABEL_152:
                      [*((id *)this + 103) stop];
                      [*((id *)this + 103) detachNode:*((void *)this + 104)];
                      uint64_t v63 = (void *)*((void *)this + 104);
                      *((void *)this + 104) = 0;

LABEL_153:
                      unsigned int v64 = (void *)*((void *)this + 103);
                      *((void *)this + 10AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;

                      if (v86) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v86);
                      }
                      goto LABEL_155;
                    }
                  }
                  else
                  {
                    id v60 = (id)MEMORY[0x1E4F14500];
                    id v61 = MEMORY[0x1E4F14500];
                  }
                  uint64_t v62 = v60;
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                    uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
                    __int16 v94 = 1024;
                    int v95 = 1243;
                    _os_log_impl(&dword_19D794000, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Deleting old DSPGraph...", buf, 0x12u);
                  }

                  goto LABEL_152;
                }
              }
              else
              {
                id v30 = (id)MEMORY[0x1E4F14500];
                id v38 = MEMORY[0x1E4F14500];
              }
              long long v36 = v30;
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
                __int16 v94 = 1024;
                int v95 = 1201;
                __int16 v96 = 1024;
                LODWORD(v97) = v28;
                uint64_t v37 = "%25s:%-5d ERROR: destroyRecordEngine: AudioQueueDispose err %{audio:4CC}d";
                goto LABEL_95;
              }
            }
            else
            {
              if (kAVVCScope)
              {
                id v29 = *(id *)kAVVCScope;
                if (!v29) {
                  goto LABEL_97;
                }
              }
              else
              {
                id v29 = (id)MEMORY[0x1E4F14500];
                id v35 = MEMORY[0x1E4F14500];
              }
              long long v36 = v29;
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
                __int16 v94 = 1024;
                int v95 = 1201;
                __int16 v96 = 1024;
                LODWORD(v97) = v28;
                uint64_t v37 = "%25s:%-5d ERROR: destroyRecordEngine: AudioQueueDispose err %d";
LABEL_95:
                _os_log_impl(&dword_19D794000, v36, OS_LOG_TYPE_ERROR, v37, buf, 0x18u);
              }
            }

            goto LABEL_97;
          }
        }
        else
        {
          id v65 = (id)MEMORY[0x1E4F14500];
          id v69 = MEMORY[0x1E4F14500];
        }
        unint64_t v67 = v65;
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v94 = 1024;
          int v95 = 1180;
          __int16 v96 = 1024;
          LODWORD(v97) = v33;
          uint64_t v68 = "%25s:%-5d ERROR: destroyRecordEngine: AudioQueueStop err %{audio:4CC}d";
          goto LABEL_172;
        }
      }
      else
      {
        if (kAVVCScope)
        {
          id v51 = *(id *)kAVVCScope;
          if (!v51) {
            goto LABEL_174;
          }
        }
        else
        {
          id v51 = (id)MEMORY[0x1E4F14500];
          id v66 = MEMORY[0x1E4F14500];
        }
        unint64_t v67 = v51;
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          uint64_t v93 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v94 = 1024;
          int v95 = 1180;
          __int16 v96 = 1024;
          LODWORD(v97) = v33;
          uint64_t v68 = "%25s:%-5d ERROR: destroyRecordEngine: AudioQueueStop err %d";
LABEL_172:
          _os_log_impl(&dword_19D794000, v67, OS_LOG_TYPE_ERROR, v68, buf, 0x18u);
        }
      }

      goto LABEL_174;
    }
  }
  if (!QueueIsRunning(v20))
  {
    AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
    goto LABEL_62;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)AudioStreamBasicDescription buf = 0;
    _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: queue was running when destroyed but not asked to stop", buf, 2u);
  }
  __break(1u);
}

void sub_19D823108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,char a27,int a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  TraceMethod::~TraceMethod((TraceMethod *)&a27);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a29);
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc(AVVCAudioQueueRecordingEngine *this, void *a2, OpaqueAudioQueue *a3)
{
  int v3 = (int)a3;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    uint64_t v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    int v23 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v24 = 1024;
    int v25 = 166;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioQueueRecordPropertyListenerProc called ", buf, 0x12u);
  }

LABEL_8:
  TraceMethod::TraceMethod((TraceMethod *)v21, "AudioQueueRecordPropertyListenerProc");
  id v9 = *(void **)this;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!kAVVCScope)
  {
    id v10 = (id)MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
LABEL_14:
    uint64_t v12 = v10;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
LABEL_25:

      goto LABEL_26;
    }
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v9)
      {
        unsigned int v13 = NSString;
        uint64_t v14 = v9[34];
        uint64_t v15 = v8->__shared_owners_ + 1;
LABEL_20:
        id v16 = [v13 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v9, v14, v15];
LABEL_22:
        *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
        int v23 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v24 = 1024;
        int v25 = 171;
        __int16 v26 = 2112;
        int v27 = v16;
        __int16 v28 = 2048;
        id v29 = a2;
        __int16 v30 = 1024;
        int v31 = v3;
        _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioQueueRecordPropertyListenerProc: Engine[%@] Queue(%p) Property(%d)", buf, 0x2Cu);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }

        goto LABEL_25;
      }
    }
    else if (v9)
    {
      uint64_t v15 = 0;
      unsigned int v13 = NSString;
      uint64_t v14 = v9[34];
      goto LABEL_20;
    }
    id v16 = @"(0x0) use_count:0";
    goto LABEL_22;
  }
  id v10 = *(id *)kAVVCScope;
  if (v10) {
    goto LABEL_14;
  }
LABEL_26:
  if (v9)
  {
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3321888768;
    v17[2] = ___ZN29AVVCAudioQueueRecordingEngine36AudioQueueRecordPropertyListenerProcEPvP16OpaqueAudioQueuej_block_invoke;
    v17[3] = &__block_descriptor_60_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
    v17[4] = v9;
    id v18 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v19 = a2;
    int v20 = v3;
    (*(void (**)(void *, void *, const char *))(*v9 + 368))(v9, v17, "AudioQueueRecordPropertyListenerProc");
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v21);
}

void sub_19D823540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }

  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN29AVVCAudioQueueRecordingEngine36AudioQueueRecordPropertyListenerProcEPvP16OpaqueAudioQueuej_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 32) + 240))(*(void *)(a1 + 32), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56));
}

uint64_t AVVCAudioQueueRecordingEngine::stopRecording(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v36, "stopRecording");
  if (kAVVCScope)
  {
    id v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_43;
    }
  }
  else
  {
    id v2 = (id)MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  id v4 = v2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v49, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v5 = v49;
    if (v49)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v34, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      int v23 = (*(void (**)(uint64_t, void))(*(void *)v34 + 64))(v34, 0);
      switch([v23 sessionState])
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          uint64_t v6 = "Inactive";
          break;
        case 2u:
          uint64_t v6 = "InteruptedWhileRecording";
          break;
        case 3u:
          uint64_t v6 = "InteruptedWhilePlaying";
          break;
        case 4u:
          uint64_t v6 = "Deactivating";
          break;
        case 5u:
          uint64_t v6 = "Prewarming";
          break;
        case 6u:
          uint64_t v6 = "Activating";
          break;
        case 7u:
          uint64_t v6 = "Active";
          break;
        default:
          uint64_t v6 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      uint64_t v6 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v32, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v32)
    {
      id v7 = v33;
      if (v33) {
        id v7 = (std::__shared_weak_count *)(v33->__shared_owners_ + 1);
      }
      uint64_t v8 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v32, *(unsigned int *)(v32 + 272), v7];
    }
    else
    {
      uint64_t v8 = @"(0x0) use_count:0";
    }
    id v9 = v8;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v10 = v30;
    if (v30)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 320))(v28);
      if (v11 > 4) {
        uint64_t v12 = "ILLEGAL";
      }
      else {
        uint64_t v12 = off_1E59657C0[v11];
      }
    }
    else
    {
      uint64_t v12 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v26, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v26)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v24, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unint64_t v13 = *(void *)(v24 + 224);
      if (v13 > 6) {
        uint64_t v14 = "ILLEGAL";
      }
      else {
        uint64_t v14 = off_1E59657E8[v13];
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      id v38 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v39 = 1024;
      int v40 = 1122;
      __int16 v41 = 2080;
      id v42 = v6;
      __int16 v43 = 2112;
      OSStatus v44 = v9;
      __int16 v45 = 2080;
      id v46 = v12;
      __int16 v47 = 2080;
      id v48 = v14;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
    }
    else
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      id v38 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v39 = 1024;
      int v40 = 1122;
      __int16 v41 = 2080;
      id v42 = v6;
      __int16 v43 = 2112;
      OSStatus v44 = v9;
      __int16 v45 = 2080;
      id v46 = v12;
      __int16 v47 = 2080;
      id v48 = "unconfigured";
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v10 && v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }

    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v5)
    {

      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
    }
    if ((void)v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v50);
    }
  }
LABEL_43:
  if (*((void *)this + 76))
  {
    if (kAVVCScope)
    {
      if (*(unsigned char *)(kAVVCScope + 8))
      {
        uint64_t v15 = *(id *)kAVVCScope;
        if (v15)
        {
          id v16 = v15;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            id v38 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v39 = 1024;
            int v40 = 1131;
            _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d stopRecordQueue: mRecordIsStopping set to true", buf, 0x12u);
          }
        }
      }
    }
    *((unsigned char *)this + 252) = 1;
    AVVCRecordingEngine::setStreamState((uint64_t)this, 6);
    LODWORD(v49) = 4105;
    BYTE4(v49) = 1;
    long long v50 = 0u;
    long long v51 = 0u;
    kdebug_trace();
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "stopRecording", "mRecordQueue : AudioQueueStop", 0);
    uint64_t v17 = AudioQueueStop(*((AudioQueueRef *)this + 76), 1u);
    ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
    TraceWrapper::~TraceWrapper((TraceWrapper *)&v49);
    if (kAVVCScope)
    {
      id v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_60:
        *((unsigned char *)this + 880) = 1;
        goto LABEL_61;
      }
    }
    else
    {
      id v18 = (id)MEMORY[0x1E4F14500];
      id v19 = MEMORY[0x1E4F14500];
    }
    int v20 = v18;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v49, v17);
      id v21 = " but failed";
      id v38 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v39 = 1024;
      int v40 = 1142;
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      if (!v17) {
        id v21 = "";
      }
      __int16 v41 = 2080;
      id v42 = v21;
      __int16 v43 = 2080;
      OSStatus v44 = (__CFString *)&v49;
      _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordQueue: AudioQueueStop%s err(%s)", buf, 0x26u);
    }

    goto LABEL_60;
  }
  uint64_t v17 = 0;
LABEL_61:
  TraceMethod::~TraceMethod((TraceMethod *)v36);
  return v17;
}

void sub_19D823BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  TraceMethod::~TraceMethod((TraceMethod *)&a26);
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::startRecording(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v77, "startRecording");
  if (kAVVCScope)
  {
    id v3 = *(id *)kAVVCScope;
    if (!v3) {
      goto LABEL_43;
    }
  }
  else
  {
    id v3 = (id)MEMORY[0x1E4F14500];
    id v4 = MEMORY[0x1E4F14500];
  }
  uint64_t v5 = v3;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v61, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v6 = v61;
    if ((void)v61)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v75, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      uint64_t v1 = (*(void (**)(uint64_t, void))(*(void *)v75 + 64))(v75, 0);
      switch([v1 sessionState])
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          id v7 = "Inactive";
          break;
        case 2u:
          id v7 = "InteruptedWhileRecording";
          break;
        case 3u:
          id v7 = "InteruptedWhilePlaying";
          break;
        case 4u:
          id v7 = "Deactivating";
          break;
        case 5u:
          id v7 = "Prewarming";
          break;
        case 6u:
          id v7 = "Activating";
          break;
        case 7u:
          id v7 = "Active";
          break;
        default:
          id v7 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      id v7 = "NotConfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v73, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v73)
    {
      uint64_t v8 = v74;
      if (v74) {
        uint64_t v8 = (std::__shared_weak_count *)(v74->__shared_owners_ + 1);
      }
      id v9 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v73, *(unsigned int *)(v73 + 272), v8];
    }
    else
    {
      id v9 = @"(0x0) use_count:0";
    }
    uint64_t v10 = v9;
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v58, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v11 = v58;
    if (v58)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v71, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 320))(v71);
      if (v12 > 4) {
        unint64_t v13 = "ILLEGAL";
      }
      else {
        unint64_t v13 = off_1E59657C0[v12];
      }
    }
    else
    {
      unint64_t v13 = "unconfigured";
    }
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v69, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    if (v69)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v67, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
      unint64_t v14 = *(void *)(v67 + 224);
      if (v14 > 6) {
        uint64_t v15 = "ILLEGAL";
      }
      else {
        uint64_t v15 = off_1E59657E8[v14];
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v80 = 1024;
      int v81 = 1033;
      __int16 v82 = 2080;
      uint64_t v83 = v7;
      __int16 v84 = 2112;
      uint64_t v85 = (const char *)v10;
      __int16 v86 = 2080;
      uint64_t v87 = v13;
      __int16 v88 = 2080;
      char v89 = v15;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
      if (v68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v68);
      }
    }
    else
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
      uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v80 = 1024;
      int v81 = 1033;
      __int16 v82 = 2080;
      uint64_t v83 = v7;
      __int16 v84 = 2112;
      uint64_t v85 = (const char *)v10;
      __int16 v86 = 2080;
      uint64_t v87 = v13;
      __int16 v88 = 2080;
      char v89 = "unconfigured";
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
    }
    if (v70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    }
    if (v11 && v72) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    }
    if ((void)v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
    }

    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    if (v6)
    {

      if (v76) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v76);
      }
    }
    if (*((void *)&v61 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v61 + 1));
    }
  }
LABEL_43:
  if (*((void *)this + 28) != 4)
  {
    if (kAVVCScope)
    {
      uint64_t v26 = *(id *)kAVVCScope;
      if (!v26) {
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v26 = MEMORY[0x1E4F14500];
      id v27 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v80 = 1024;
      int v81 = 1036;
      _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioQueue startRecording: record state already started or stopping -- no-op", buf, 0x12u);
    }

    goto LABEL_66;
  }
  id v16 = +[AVVCMetricsManager sharedManager];
  int v17 = [v16 resetAudioIssueDetector];

  if (v17)
  {
LABEL_66:
    TraceMethod::~TraceMethod((TraceMethod *)v77);
    return;
  }
  id v18 = +[AVVCMetricsManager sharedManager];
  uint64_t v66 = *((void *)this + 81);
  long long v19 = *(_OWORD *)((char *)this + 632);
  v65[0] = *(_OWORD *)((char *)this + 616);
  v65[1] = v19;
  [v18 setADAMFormat:v65 numFrames:*((unsigned int *)this + 204)];

  OSStatus v20 = 0;
  *((unsigned char *)this + 760) = 0;
  if (*((unsigned char *)this + 684))
  {
LABEL_91:
    uint64_t v34 = (const char *)*((void *)this + 30);
    uint64_t v35 = mach_absolute_time();
    if (v20) {
      goto LABEL_138;
    }
    uint64_t v36 = v35;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    if (v34)
    {
      if (kAVVCScope)
      {
        id v37 = *(id *)kAVVCScope;
        if (!v37)
        {
LABEL_103:
          *(void *)&long long v61 = 0;
          *((void *)&v61 + 1) = v34;
          long long v62 = 0u;
          long long v63 = 0u;
          *(void *)&long long v64 = 0;
          DWORD2(v64) = 2;
          __int16 v41 = (const AudioTimeStamp *)&v61;
          uint64_t v42 = (uint64_t)v34;
          goto LABEL_109;
        }
      }
      else
      {
        id v37 = (id)MEMORY[0x1E4F14500];
        id v39 = MEMORY[0x1E4F14500];
      }
      int v40 = v37;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v80 = 1024;
        int v81 = 1077;
        __int16 v82 = 2048;
        uint64_t v83 = v34;
        _os_log_impl(&dword_19D794000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d #### Starting record queue at time %llu ####", buf, 0x1Cu);
      }

      goto LABEL_103;
    }
    if (kAVVCScope)
    {
      id v38 = *(id *)kAVVCScope;
      if (!v38)
      {
LABEL_108:
        uint64_t v42 = mach_absolute_time();
        __int16 v41 = 0;
LABEL_109:
        *((void *)this + 86) = v42;
        if (kAVVCScope)
        {
          id v45 = *(id *)kAVVCScope;
          if (!v45)
          {
LABEL_120:
            LODWORD(v58) = 4103;
            BYTE4(v58) = 1;
            long long v59 = 0u;
            long long v60 = 0u;
            kdebug_trace();
            ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startRecording", "startRecording : AudioQueueStart", 0);
            ProfileMetrics(&cfstr_AvvcProfilePro_12.isa);
            OSStatus v20 = AudioQueueStart(*((AudioQueueRef *)this + 76), v41);
            ProfileMetrics(&cfstr_AvvcProfilePro_13.isa);
            ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
            TraceWrapper::~TraceWrapper((TraceWrapper *)&v58);
            if (v20)
            {
              if ((v20 + 199999) >= 0x61A7F)
              {
                if (kAVVCScope)
                {
                  id v51 = *(id *)kAVVCScope;
                  if (!v51) {
                    goto LABEL_137;
                  }
                }
                else
                {
                  id v51 = (id)MEMORY[0x1E4F14500];
                  id v55 = MEMORY[0x1E4F14500];
                }
                unint64_t v53 = v51;
                if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_136;
                }
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
                __int16 v80 = 1024;
                int v81 = 1097;
                __int16 v82 = 1024;
                LODWORD(v8AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v20;
                id v54 = "%25s:%-5d ERROR: startRecordQueue: AudioQueueStart err %{audio:4CC}d";
              }
              else
              {
                if (kAVVCScope)
                {
                  id v50 = *(id *)kAVVCScope;
                  if (!v50) {
                    goto LABEL_137;
                  }
                }
                else
                {
                  id v50 = (id)MEMORY[0x1E4F14500];
                  id v52 = MEMORY[0x1E4F14500];
                }
                unint64_t v53 = v50;
                if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                {
LABEL_136:

LABEL_137:
                  *((void *)this + 30) = 0;
LABEL_138:
                  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, v20, "startRecording");
                  AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
                  if (v20 == -66671) {
                    (*(void (**)(AVVCAudioQueueRecordingEngine *, void))(*(void *)this + 112))(this, 0);
                  }
                  goto LABEL_66;
                }
                *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
                uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
                __int16 v80 = 1024;
                int v81 = 1097;
                __int16 v82 = 1024;
                LODWORD(v8AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v20;
                id v54 = "%25s:%-5d ERROR: startRecordQueue: AudioQueueStart err %d";
              }
              _os_log_impl(&dword_19D794000, v53, OS_LOG_TYPE_ERROR, v54, buf, 0x18u);
              goto LABEL_136;
            }
            *((void *)this + 30) = 0;
            goto LABEL_66;
          }
        }
        else
        {
          id v45 = (id)MEMORY[0x1E4F14500];
          id v46 = MEMORY[0x1E4F14500];
        }
        __int16 v47 = v45;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          id v48 = "past";
          uint64_t v49 = (const char *)*((void *)this + 86);
          *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
          uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
          if ((unint64_t)v34 > v36) {
            id v48 = "future";
          }
          __int16 v80 = 1024;
          int v81 = 1085;
          __int16 v82 = 2080;
          uint64_t v83 = "";
          if (!v34) {
            id v48 = "immediate";
          }
          __int16 v84 = 2080;
          uint64_t v85 = v48;
          __int16 v86 = 2048;
          uint64_t v87 = v49;
          _os_log_impl(&dword_19D794000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC starting record queue%s at (%s) hosttime (%lld) ", buf, 0x30u);
        }

        goto LABEL_120;
      }
    }
    else
    {
      id v38 = (id)MEMORY[0x1E4F14500];
      id v43 = MEMORY[0x1E4F14500];
    }
    OSStatus v44 = v38;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v80 = 1024;
      int v81 = 1074;
      _os_log_impl(&dword_19D794000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d #### Starting record queue immediately ####", buf, 0x12u);
    }

    goto LABEL_108;
  }
  if (*((void *)this + 28) == 5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      id v56 = MEMORY[0x1E4F14500];
      os_log_type_t v57 = " ASSERTION FAILED: attempting to prime record queue while queue is running";
LABEL_144:
      _os_log_error_impl(&dword_19D794000, v56, OS_LOG_TYPE_ERROR, v57, buf, 2u);
    }
  }
  else
  {
    if (!*((_DWORD *)this + 167))
    {
      if (kAVVCScope)
      {
        if (*(unsigned char *)(kAVVCScope + 8))
        {
          id v21 = *(id *)kAVVCScope;
          if (v21)
          {
            __int16 v22 = v21;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              int v23 = *((_DWORD *)this + 166);
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
              __int16 v80 = 1024;
              int v81 = 1053;
              __int16 v82 = 1024;
              LODWORD(v8AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v23;
              _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d startRecordQueue: enqueing %d buffers", buf, 0x18u);
            }
          }
        }
      }
      if (!*((_DWORD *)this + 166))
      {
LABEL_58:
        OSStatus v20 = 0;
LABEL_90:
        *((unsigned char *)this + 684) = v20 == 0;
        goto LABEL_91;
      }
      uint64_t v24 = 0;
      while (1)
      {
        OSStatus v25 = AudioQueueEnqueueBuffer(*((AudioQueueRef *)this + 76), *(AudioQueueBufferRef *)(*((void *)this + 82) + 8 * v24), 0, 0);
        OSStatus v20 = v25;
        if (v25) {
          break;
        }
        atomic_fetch_add_explicit((atomic_uint *volatile)this + 167, 1u, memory_order_relaxed);
        if (++v24 >= (unint64_t)*((unsigned int *)this + 166)) {
          goto LABEL_58;
        }
      }
      if ((v25 + 199999) >= 0x61A7F)
      {
        if (kAVVCScope)
        {
          id v29 = *(id *)kAVVCScope;
          if (!v29) {
            goto LABEL_89;
          }
        }
        else
        {
          id v29 = (id)MEMORY[0x1E4F14500];
          id v33 = MEMORY[0x1E4F14500];
        }
        int v31 = v29;
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          goto LABEL_88;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v80 = 1024;
        int v81 = 1056;
        __int16 v82 = 1024;
        LODWORD(v8AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v20;
        uint64_t v32 = "%25s:%-5d ERROR: startRecordQueue: AudioQueueEnqueueBuffer err %{audio:4CC}d";
      }
      else
      {
        if (kAVVCScope)
        {
          id v28 = *(id *)kAVVCScope;
          if (!v28) {
            goto LABEL_89;
          }
        }
        else
        {
          id v28 = (id)MEMORY[0x1E4F14500];
          id v30 = MEMORY[0x1E4F14500];
        }
        int v31 = v28;
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
LABEL_88:

LABEL_89:
          ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startRecording", "startRecording:AudioQueueReset", 0);
          AudioQueueReset(*((AudioQueueRef *)this + 76));
          *((_DWORD *)this + 167) = 0;
          ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
          goto LABEL_90;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        uint64_t v79 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v80 = 1024;
        int v81 = 1056;
        __int16 v82 = 1024;
        LODWORD(v8AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v20;
        uint64_t v32 = "%25s:%-5d ERROR: startRecordQueue: AudioQueueEnqueueBuffer err %d";
      }
      _os_log_impl(&dword_19D794000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x18u);
      goto LABEL_88;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)AudioStreamBasicDescription buf = 0;
      id v56 = MEMORY[0x1E4F14500];
      os_log_type_t v57 = " ASSERTION FAILED: some buffers already enqueued!";
      goto LABEL_144;
    }
  }
  __break(1u);
}

void sub_19D8249BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,int a41,char a42)
{
}

uint64_t AVVCAudioQueueRecordingEngine::prepareRecording(AVVCAudioQueueRecordingEngine *this, NSDictionary *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v21, "prepareRecording");
  uint64_t Recorder = AVVCRecordingEngine::setupASBDAndCreateRecorder((AVVCRecordingEngine *)this, v3);
  uint64_t v5 = Recorder;
  if (Recorder == -66680)
  {
    uint64_t v5 = 4294955506;
    goto LABEL_38;
  }
  if (!Recorder)
  {
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_11;
      }
    }
    else
    {
      id v6 = (id)MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    uint64_t v8 = v6;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = AVVCRouteManager::getRecordDeviceUID(*((id **)this + 47));
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      int v23 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v24 = 1024;
      int v25 = 980;
      __int16 v26 = 2112;
      id v27 = v9;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device is built in device (%@)- update channel count", buf, 0x1Cu);
    }
LABEL_11:
    uint64_t v5 = AVVCAudioQueueRecordingEngine::setupDSPGraph(this);
    if (v5) {
      goto LABEL_38;
    }
    uint64_t v10 = *((void *)this + 103);
    if (v10 && *((void *)this + 104)) {
      *((_DWORD *)this + 9) |= 0x20u;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 0;
    if (CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)buf)
      && *(_DWORD *)buf == 1)
    {
      uint64_t v11 = 1;
      if (!v10)
      {
LABEL_25:
        if ((*((unsigned char *)this + 36) & 0x20) != 0) {
          int v17 = *((_DWORD *)this + 161);
        }
        else {
          int v17 = 0;
        }
        if (*((void *)this + 103) && *((void *)this + 104)) {
          v17 += 2;
        }
        if (v17)
        {
          uint64_t v18 = *((void *)this + 100);
          if (v18)
          {
            MEMORY[0x19F3ABB10](v18, 0x1000C8077774924);
            *((void *)this + 100) = 0;
          }
          long long v19 = (void *)*((void *)this + 101);
          if (v19)
          {
            free(v19);
            *((void *)this + 101) = 0;
          }
          operator new[]();
        }
        AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
        uint64_t v5 = 0;
        goto LABEL_38;
      }
    }
    else
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 0;
      unsigned __int8 v12 = CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)buf);
      if ((v12 & (*(_DWORD *)buf == 2)) != 0) {
        uint64_t v11 = 3;
      }
      else {
        uint64_t v11 = 0;
      }
      if (!v10) {
        goto LABEL_25;
      }
    }
    if (*((void *)this + 104))
    {
      unint64_t v13 = [[AVAudioChannelLayout alloc] initWithLayoutTag:9633794];
      unint64_t v14 = [[AVAudioFormat alloc] initWithCommonFormat:v11 sampleRate:0 interleaved:v13 channelLayout:*((double *)this + 3)];
      uint64_t v15 = [[AVAudioPCMBuffer alloc] initWithPCMFormat:v14 frameCapacity:*((unsigned int *)this + 204)];
      id v16 = (void *)*((void *)this + 105);
      *((void *)this + 105) = v15;
    }
    goto LABEL_25;
  }
LABEL_38:
  TraceMethod::~TraceMethod((TraceMethod *)v21);

  return v5;
}

void sub_19D824E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCAudioQueueRecordingEngine::setupDSPGraph(AVVCAudioQueueRecordingEngine *this)
{
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  if (isDarwinOSProduct(void)::onceToken != -1) {
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
  }
  if (isDarwinOSProduct(void)::isDarwinOS) {
    BOOL v2 = *((void *)this + 34) == 1;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    if (*((void *)this + 104))
    {
      id v4 = (void *)*((void *)this + 103);
      if (v4)
      {
        [v4 stop];
        if (kAVVCScope)
        {
          uint64_t v5 = *(id *)kAVVCScope;
          if (!v5) {
            goto LABEL_39;
          }
        }
        else
        {
          uint64_t v5 = MEMORY[0x1E4F14500];
          id v19 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v162 = 1024;
          int v163 = 781;
          _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC - Graph is already setup. Starting and stopping the engine/dsp", buf, 0x12u);
        }

LABEL_39:
        OSStatus v20 = (void *)*((void *)this + 103);
        id v153 = 0;
        char v21 = [v20 startAndReturnError:&v153];
        id v8 = v153;
        if (v21) {
          goto LABEL_23;
        }
        if (kAVVCScope)
        {
          id v22 = *(id *)kAVVCScope;
          if (!v22)
          {
LABEL_67:
            uint64_t v9 = [v8 code];
            goto LABEL_179;
          }
        }
        else
        {
          id v22 = (id)MEMORY[0x1E4F14500];
          id v32 = MEMORY[0x1E4F14500];
        }
        id v33 = v22;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = [v8 description];
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v162 = 1024;
          int v163 = 783;
          __int16 v164 = 2112;
          v165 = v34;
          _os_log_impl(&dword_19D794000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC - failed to restart AVAudioEngine: %@", buf, 0x1Cu);
        }
        goto LABEL_67;
      }
    }
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_28;
      }
    }
    else
    {
      id v6 = (id)MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    uint64_t v11 = v6;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v162 = 1024;
      int v163 = 791;
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC - Setting up DSPGraph", buf, 0x12u);
    }

LABEL_28:
    long long v151 = xmmword_19D8B1DC0;
    int v152 = 0;
    unsigned __int8 v12 = [[AVAudioUnitEffect alloc] initWithAudioComponentDescription:&v151];
    unint64_t v13 = (void *)*((void *)this + 104);
    *((void *)this + 104) = v12;

    if (*((void *)this + 104))
    {
      unint64_t v14 = GetModelPathComponent();
      uint64_t v15 = [@"/System/Library/Audio/Tunings/<UPPERCASE_MODEL>/AVVC/<LOWERCASE_MODEL>_mic_voice_recognition.dspg" stringByReplacingOccurrencesOfString:@"<UPPERCASE_MODEL>" withString:v14];

      id v16 = GetLowercaseModelName();
      v143 = [v15 stringByReplacingOccurrencesOfString:@"<LOWERCASE_MODEL>" withString:v16];

      int inData = v143;
      if (kAVVCScope)
      {
        id v17 = *(id *)kAVVCScope;
        if (!v17) {
          goto LABEL_47;
        }
      }
      else
      {
        id v17 = (id)MEMORY[0x1E4F14500];
        id v23 = MEMORY[0x1E4F14500];
      }
      __int16 v24 = v17;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v162 = 1024;
        int v163 = 814;
        __int16 v164 = 2112;
        v165 = v143;
        _os_log_impl(&dword_19D794000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d dspGraphFilepath: %@", buf, 0x1Cu);
      }

LABEL_47:
      uint64_t v9 = AudioUnitSetProperty((AudioUnit)[*((id *)this + 104) audioUnit], 0x64737067u, 0, 0, &inData, 8u);
      if (v9)
      {
        if (kAVVCScope)
        {
          int v25 = *(id *)kAVVCScope;
          if (!v25)
          {
            id v8 = 0;
LABEL_178:

            goto LABEL_179;
          }
        }
        else
        {
          int v25 = MEMORY[0x1E4F14500];
          id v30 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v162 = 1024;
          int v163 = 817;
          __int16 v164 = 1024;
          LODWORD(v165) = v9;
          _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to setup DSPGraph text file: %d", buf, 0x18u);
        }
        id v8 = 0;
LABEL_177:

        goto LABEL_178;
      }
      __int16 v26 = GetModelPathComponent();
      id v27 = [@"/System/Library/Audio/Tunings/<UPPERCASE_MODEL>/AVVC/<LOWERCASE_MODEL>_mic_voice_recognition.propstrip" stringByReplacingOccurrencesOfString:@"<UPPERCASE_MODEL>" withString:v26];

      uint64_t v28 = GetLowercaseModelName();
      int v25 = [v27 stringByReplacingOccurrencesOfString:@"<LOWERCASE_MODEL>" withString:v28];

      if (kAVVCScope)
      {
        id v29 = *(id *)kAVVCScope;
        if (!v29) {
          goto LABEL_72;
        }
      }
      else
      {
        id v29 = (id)MEMORY[0x1E4F14500];
        id v35 = MEMORY[0x1E4F14500];
      }
      uint64_t v36 = v29;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v162 = 1024;
        int v163 = 823;
        __int16 v164 = 2112;
        v165 = v25;
        _os_log_impl(&dword_19D794000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d dspGraphFilepath: %@", buf, 0x1Cu);
      }

LABEL_72:
      uint64_t v149 = 0;
      id v37 = (void *)MEMORY[0x1E4F1C9E8];
      id v38 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v25];
      id v148 = 0;
      uint64_t v39 = [v37 dictionaryWithContentsOfURL:v38 error:&v148];
      id v8 = v148;

      uint64_t v149 = v39;
      if (!v8) {
        goto LABEL_80;
      }
      if (kAVVCScope)
      {
        id v40 = *(id *)kAVVCScope;
        if (!v40) {
          goto LABEL_80;
        }
      }
      else
      {
        id v40 = (id)MEMORY[0x1E4F14500];
        id v41 = MEMORY[0x1E4F14500];
      }
      uint64_t v42 = v40;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        id v43 = [v8 description];
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v162 = 1024;
        int v163 = 826;
        __int16 v164 = 2112;
        v165 = v43;
        _os_log_impl(&dword_19D794000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to read contents of DSPGraph AUStrip file: %@", buf, 0x1Cu);
      }
LABEL_80:
      uint64_t v9 = AudioUnitSetProperty((AudioUnit)[*((id *)this + 104) audioUnit], 0x70727370u, 0, 0, &v149, 8u);
      if (v9)
      {
        if (kAVVCScope)
        {
          OSStatus v44 = *(id *)kAVVCScope;
          if (!v44) {
            goto LABEL_177;
          }
        }
        else
        {
          OSStatus v44 = MEMORY[0x1E4F14500];
          id v49 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v162 = 1024;
          int v163 = 830;
          __int16 v164 = 1024;
          LODWORD(v165) = v9;
          _os_log_impl(&dword_19D794000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to setup DSPGraph AUStrip file: %d", buf, 0x18u);
        }
        goto LABEL_176;
      }
      id v45 = GetModelPathComponent();
      id v46 = [@"/System/Library/Audio/Tunings/<UPPERCASE_MODEL>/AVVC/<LOWERCASE_MODEL>_mic_voice_recognition.austrip" stringByReplacingOccurrencesOfString:@"<UPPERCASE_MODEL>" withString:v45];

      __int16 v47 = GetLowercaseModelName();
      OSStatus v44 = [v46 stringByReplacingOccurrencesOfString:@"<LOWERCASE_MODEL>" withString:v47];

      if (kAVVCScope)
      {
        id v48 = *(id *)kAVVCScope;
        if (!v48) {
          goto LABEL_94;
        }
      }
      else
      {
        id v48 = (id)MEMORY[0x1E4F14500];
        id v50 = MEMORY[0x1E4F14500];
      }
      id v51 = v48;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        v161 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v162 = 1024;
        int v163 = 836;
        __int16 v164 = 2112;
        v165 = v44;
        _os_log_impl(&dword_19D794000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d dspGraphFilepath: %@", buf, 0x1Cu);
      }

LABEL_94:
      uint64_t v147 = 0;
      id v52 = (void *)MEMORY[0x1E4F1C9E8];
      unint64_t v53 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v44];
      id v146 = v8;
      uint64_t v54 = [v52 dictionaryWithContentsOfURL:v53 error:&v146];
      id v55 = v146;

      id v8 = v55;
      uint64_t v147 = v54;
      if (v55)
      {
        id v56 = CALog::LogObjIfEnabled(1, kAVVCScope);
        os_log_type_t v57 = v56;
        if (v56)
        {
          uint64_t v58 = v56;
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            long long v59 = [v55 description];
            *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
            v161 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v162 = 1024;
            int v163 = 839;
            __int16 v164 = 2112;
            v165 = v59;
            _os_log_impl(&dword_19D794000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to read contents of DSPGraph AUStrip file: %@", buf, 0x1Cu);
          }
        }
      }
      uint64_t v9 = AudioUnitSetProperty((AudioUnit)[*((id *)this + 104) audioUnit], 0x61757370u, 0, 0, &v147, 8u);
      if (v9)
      {
        long long v60 = CALog::LogObjIfEnabled(1, kAVVCScope);
        long long v61 = (AVAudioChannelLayout *)v60;
        if (v60 && os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v162 = 1024;
          int v163 = 843;
          __int16 v164 = 1024;
          LODWORD(v165) = v9;
          _os_log_impl(&dword_19D794000, &v61->super, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to setup DSPGraph AUStrip file: %d", buf, 0x18u);
        }
        goto LABEL_175;
      }
      long long v61 = [[AVAudioChannelLayout alloc] initWithLayoutTag:*((_DWORD *)this + 161) | 0x930000u];
      long long v62 = [[AVAudioChannelLayout alloc] initWithLayoutTag:9633794];
      *(_DWORD *)AudioStreamBasicDescription buf = 0;
      if (CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)buf)
        && *(_DWORD *)buf == 1)
      {
        uint64_t v63 = 1;
      }
      else
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 0;
        unsigned __int8 v64 = CAStreamBasicDescription::IdentifyCommonPCMFormat((_DWORD *)this + 154, (int *)buf);
        if ((v64 & (*(_DWORD *)buf == 2)) != 0) {
          uint64_t v63 = 3;
        }
        else {
          uint64_t v63 = 0;
        }
      }
      v138 = v62;
      v141 = [[AVAudioFormat alloc] initWithCommonFormat:v63 sampleRate:1 interleaved:v61 channelLayout:*((double *)this + 3)];
      v142 = [[AVAudioFormat alloc] initWithCommonFormat:v63 sampleRate:0 interleaved:v62 channelLayout:*((double *)this + 3)];
      v140 = [[AVAudioFormat alloc] initWithCommonFormat:1 sampleRate:0 interleaved:v61 channelLayout:*((double *)this + 3)];
      v139 = [[AVAudioFormat alloc] initWithCommonFormat:1 sampleRate:0 interleaved:v62 channelLayout:*((double *)this + 3)];
      double v65 = *((double *)this + 33);
      double v66 = *((double *)this + 3);
      uint64_t v67 = objc_alloc_init(AVAudioEngine);
      uint64_t v68 = (void *)*((void *)this + 103);
      *((void *)this + 10AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v67;

      uint64_t v69 = CALog::LogObjIfEnabled(5, kAVVCScope);
      id v70 = v69;
      if (v69)
      {
        uint64_t v71 = v69;
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          v161 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v162 = 1024;
          int v163 = 870;
          _os_log_impl(&dword_19D794000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: AVAudioEngine EnableManualRenderingMode Offline", buf, 0x12u);
        }
      }
      unint64_t v72 = (void *)*((void *)this + 103);
      v145[5] = v8;
      objc_msgSend(v72, "enableManualRenderingMode:format:maximumFrameCount:error:", 0, v142);
      id v73 = v8;

      if (v73)
      {
        uint64_t v74 = CALog::LogObjIfEnabled(1, kAVVCScope);
        uint64_t v75 = v74;
        if (v74)
        {
          int v76 = v74;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            uint64_t v77 = [v73 description];
            *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
            v161 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v162 = 1024;
            int v163 = 873;
            __int16 v164 = 2112;
            v165 = v77;
            _os_log_impl(&dword_19D794000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC: Failed to EnableManualRenderingMode on AVAudioEngine: %@", buf, 0x1Cu);
          }
        }

        uint64_t v78 = [v73 code];
      }
      else
      {
        uint64_t v79 = CALog::LogObjIfEnabled(5, kAVVCScope);
        __int16 v80 = v79;
        if (v79)
        {
          int v81 = v79;
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            v161 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v162 = 1024;
            int v163 = 877;
            _os_log_impl(&dword_19D794000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: AVAudioEngine SetManualRenderingInputPCMFormat", buf, 0x12u);
          }
        }
        __int16 v82 = [*((id *)this + 103) inputNode];
        v145[0] = MEMORY[0x1E4F143A8];
        v145[1] = 3221225472;
        v145[2] = ___ZN29AVVCAudioQueueRecordingEngine13setupDSPGraphEv_block_invoke;
        v145[3] = &__block_descriptor_40_e49_r__AudioBufferList_I_1_AudioBuffer_II_v___12__0I8l;
        v145[4] = this;
        char v83 = [v82 setManualRenderingInputPCMFormat:v141 inputBlock:v145];

        if ((v83 & 1) == 0)
        {
          __int16 v84 = CALog::LogObjIfEnabled(1, kAVVCScope);
          uint64_t v85 = v84;
          if (v84)
          {
            __int16 v86 = v84;
            if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              v161 = "AVVCAudioQueueRecordingEngine.mm";
              __int16 v162 = 1024;
              int v163 = 893;
              _os_log_impl(&dword_19D794000, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC: failed to set AVAudioEngine input rendering block", buf, 0x12u);
            }
          }
        }
        uint64_t v87 = CALog::LogObjIfEnabled(5, kAVVCScope);
        __int16 v88 = v87;
        if (v87)
        {
          char v89 = v87;
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            v161 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v162 = 1024;
            int v163 = 897;
            _os_log_impl(&dword_19D794000, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: Making AVAudioEngine node connections", buf, 0x12u);
          }
        }
        [*((id *)this + 103) attachNode:*((void *)this + 104)];
        uint64_t v90 = (void *)*((void *)this + 103);
        long long v91 = [v90 inputNode];
        [v90 connect:v91 to:*((void *)this + 104) format:v140];

        uint64_t v92 = (void *)*((void *)this + 103);
        uint64_t v93 = *((void *)this + 104);
        __int16 v94 = [v92 outputNode];
        [v92 connect:v93 to:v94 format:v139];

        int v95 = CALog::LogObjIfEnabled(5, kAVVCScope);
        __int16 v96 = v95;
        if (v95)
        {
          int v97 = v95;
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
          {
            CAStreamBasicDescription::AsString((CAStreamBasicDescription *)((char *)this + 24), (char *)buf, 0x100uLL, v98, v99);
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v156 = 1024;
            int v157 = 903;
            __int16 v158 = 2080;
            v159 = buf;
            _os_log_impl(&dword_19D794000, v97, OS_LOG_TYPE_DEBUG, "%25s:%-5d mRecordASBD = %s", v154, 0x1Cu);
          }
        }
        __int16 v100 = CALog::LogObjIfEnabled(5, kAVVCScope);
        char v101 = v100;
        if (v100)
        {
          __int16 v102 = v100;
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v156 = 1024;
            int v157 = 904;
            __int16 v158 = 1024;
            LODWORD(v159) = (v65 * v66);
            _os_log_impl(&dword_19D794000, v102, OS_LOG_TYPE_DEBUG, "%25s:%-5d numFrames = %d", v154, 0x18u);
          }
        }
        int v103 = CALog::LogObjIfEnabled(5, kAVVCScope);
        uint64_t v104 = v103;
        if (v103)
        {
          uint64_t v105 = v103;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
          {
            id v106 = [(AVAudioFormat *)v141 description];
            uint64_t v107 = [v106 UTF8String];
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v156 = 1024;
            int v157 = 905;
            __int16 v158 = 2080;
            v159 = (uint8_t *)v107;
            _os_log_impl(&dword_19D794000, v105, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAE input format = %s", v154, 0x1Cu);
          }
        }

        __int16 v108 = CALog::LogObjIfEnabled(5, kAVVCScope);
        int v109 = v108;
        if (v108)
        {
          __int16 v110 = v108;
          if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
          {
            id v111 = [(AVAudioFormat *)v142 description];
            uint64_t v112 = [v111 UTF8String];
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v156 = 1024;
            int v157 = 906;
            __int16 v158 = 2080;
            v159 = (uint8_t *)v112;
            _os_log_impl(&dword_19D794000, v110, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVAE output format = %s", v154, 0x1Cu);
          }
        }

        int v113 = CALog::LogObjIfEnabled(5, kAVVCScope);
        uint64_t v114 = v113;
        if (v113)
        {
          v115 = v113;
          if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
          {
            id v116 = [(AVAudioFormat *)v140 description];
            uint64_t v117 = [v116 UTF8String];
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v156 = 1024;
            int v157 = 907;
            __int16 v158 = 2080;
            v159 = (uint8_t *)v117;
            _os_log_impl(&dword_19D794000, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d DSPGraph input format = %s", v154, 0x1Cu);
          }
        }

        __int16 v118 = CALog::LogObjIfEnabled(5, kAVVCScope);
        __int16 v119 = v118;
        if (v118)
        {
          int v120 = v118;
          if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
          {
            id v121 = [(AVAudioFormat *)v139 description];
            uint64_t v122 = [v121 UTF8String];
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v156 = 1024;
            int v157 = 908;
            __int16 v158 = 2080;
            v159 = (uint8_t *)v122;
            _os_log_impl(&dword_19D794000, v120, OS_LOG_TYPE_DEBUG, "%25s:%-5d DSPGraph output format = %s", v154, 0x1Cu);
          }
        }

        __int16 v123 = CALog::LogObjIfEnabled(5, kAVVCScope);
        v124 = v123;
        if (v123)
        {
          __int16 v125 = v123;
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEBUG))
          {
            id v126 = [*((id *)this + 103) description];
            uint64_t v127 = [v126 UTF8String];
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v156 = 1024;
            int v157 = 911;
            __int16 v158 = 2080;
            v159 = (uint8_t *)v127;
            _os_log_impl(&dword_19D794000, v125, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: Starting AVAudioEngine with desc = %s", v154, 0x1Cu);
          }
        }

        v128 = (void *)*((void *)this + 103);
        id v144 = 0;
        char v129 = [v128 startAndReturnError:&v144];
        id v73 = v144;
        if (v129)
        {
          uint64_t v130 = CALog::LogObjIfEnabled(5, kAVVCScope);
          v131 = v130;
          if (v130)
          {
            v132 = v130;
            if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)v154 = 136315394;
              v155 = "AVVCAudioQueueRecordingEngine.mm";
              __int16 v156 = 1024;
              int v157 = 918;
              _os_log_impl(&dword_19D794000, v132, OS_LOG_TYPE_DEBUG, "%25s:%-5d Done setting up DSPGraph", v154, 0x12u);
            }
          }
          uint64_t v9 = 0;
          goto LABEL_174;
        }
        v133 = CALog::LogObjIfEnabled(1, kAVVCScope);
        v134 = v133;
        if (v133)
        {
          v135 = v133;
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            v136 = [v73 description];
            *(_DWORD *)v154 = 136315650;
            v155 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v156 = 1024;
            int v157 = 914;
            __int16 v158 = 2112;
            v159 = v136;
            _os_log_impl(&dword_19D794000, v135, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC: Failed to start AVAudioEngine: %@", v154, 0x1Cu);
          }
        }

        uint64_t v78 = [v73 code];
      }
      uint64_t v9 = v78;
LABEL_174:

      id v8 = v73;
LABEL_175:

LABEL_176:
      goto LABEL_177;
    }
    if (kAVVCScope)
    {
      uint64_t v18 = *(id *)kAVVCScope;
      if (!v18)
      {
LABEL_62:
        id v8 = 0;
        uint64_t v9 = 4294956421;
        goto LABEL_179;
      }
    }
    else
    {
      uint64_t v18 = MEMORY[0x1E4F14500];
      id v31 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v162 = 1024;
      int v163 = 808;
      _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to instantiate AUDSPGraph", buf, 0x12u);
    }

    goto LABEL_62;
  }
  if (!kAVVCScope)
  {
    id v3 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
    goto LABEL_19;
  }
  id v3 = *(id *)kAVVCScope;
  if (v3)
  {
LABEL_19:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      v161 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v162 = 1024;
      int v163 = 770;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_INFO, "%25s:%-5d AVVC - Cannot use DSP Graph. ", buf, 0x12u);
    }
  }
  id v8 = 0;
LABEL_23:
  uint64_t v9 = 0;
LABEL_179:

  return v9;
}

void sub_19D82656C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint8_t buf,int a38,int a39,__int16 a40,__int16 a41,__int16 a42,__int16 a43)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN29AVVCAudioQueueRecordingEngine13setupDSPGraphEv_block_invoke(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v3 + 856))
  {
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_14:
        *(unsigned char *)(v3 + 856) = 1;
        return [*(id *)(v3 + 792) audioBufferList];
      }
    }
    else
    {
      id v6 = MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315650;
      uint64_t v11 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v12 = 1024;
      int v13 = 880;
      __int16 v14 = 1024;
      int v15 = a2;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC: AVAudioEngine input rendering block call with numFrames: %d", (uint8_t *)&v10, 0x18u);
    }

    goto LABEL_14;
  }
  int v4 = *(_DWORD *)(v3 + 860);
  if (v4 < 19)
  {
    *(_DWORD *)(v3 + 860) = v4 + 1;
  }
  else
  {
    *(_DWORD *)(v3 + 860) = 0;
    if (kAVVCScope)
    {
      uint64_t v5 = *(id *)kAVVCScope;
      if (!v5) {
        return [*(id *)(v3 + 792) audioBufferList];
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315650;
      uint64_t v11 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v12 = 1024;
      int v13 = 885;
      __int16 v14 = 1024;
      int v15 = a2;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVVC: AVAudioEngine input rendering block call with numFrames: %d", (uint8_t *)&v10, 0x18u);
    }
  }
  return [*(id *)(v3 + 792) audioBufferList];
}

void AVVCAudioQueueRecordingEngine::setHWSampleRate(AVVCAudioQueueRecordingEngine *this, double a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *((double *)this + 40) = a2;
  *((unsigned char *)this + 328) = a2 < 16000.0;
  if (kAVVCScope)
  {
    uint64_t v3 = *(id *)kAVVCScope;
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4F14500];
    id v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)this + 34);
    uint64_t v6 = *((void *)this + 40);
    int v7 = *((unsigned __int8 *)this + 328);
    int v8 = 136316162;
    uint64_t v9 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v10 = 1024;
    int v11 = 252;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setHWSampleRate() streamID(%lu) sr(%.2f) upSamp(%d)", (uint8_t *)&v8, 0x2Cu);
  }
}

uint64_t AVVCAudioQueueRecordingEngine::Initialize(AVVCAudioQueueRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "Initialize");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCAudioQueueRecordingEngine::createRecordQueue(AVVCAudioQueueRecordingEngine *this, NSDictionary *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  int v94 = 4102;
  char v95 = 1;
  long long v96 = 0u;
  long long v97 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v93, "createRecordQueue");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v91, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (*((void *)this + 76))
  {
    if (*((uint64_t *)this + 28) > 1)
    {
      (*(void (**)(uint64_t))(*(void *)v91 + 136))(v91);
      uint64_t v9 = 0;
      goto LABEL_188;
    }
    if (kAVVCScope)
    {
      id v4 = *(id *)kAVVCScope;
      if (!v4)
      {
LABEL_21:
        uint64_t v9 = 4294955515;
        goto LABEL_188;
      }
    }
    else
    {
      id v4 = MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      id v106 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v107 = 1024;
      int v108 = 345;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Record engine state does not match queue (previously assertion failure)", buf, 0x12u);
    }

    goto LABEL_21;
  }
  uint64_t v5 = *((unsigned int *)this + 8);
  long long v6 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&inFormat.mSampleRate = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&inFormat.mBytesPerPacket = v6;
  *(void *)&inFormat.UInt32 mBitsPerChannel = *((void *)this + 7);
  inFormat.AudioFormatID mFormatID = 1819304813;
  unsigned int v89 = *((_DWORD *)this + 13);
  if (isDarwinOSProduct(void)::onceToken != -1) {
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
  }
  if (isDarwinOSProduct(void)::isDarwinOS && *((void *)this + 34) == 1) {
    UpdateWithHardwareDeviceNumInputChannels(&v89);
  }
  if (v5 != 1819304813)
  {
    inFormat.mSampleRate = *((Float64 *)this + 3);
    *(void *)&inFormat.AudioFormatID mFormatID = 0x96C70636DLL;
    inFormat.mBytesPerPacket = 4 * v89;
    inFormat.mFramesPerPacket = 1;
    inFormat.UInt32 mBytesPerFrame = 4 * v89;
    inFormat.UInt32 mChannelsPerFrame = v89;
    inFormat.UInt32 mBitsPerChannel = 32;
    goto LABEL_25;
  }
  if ((inFormat.mFormatFlags & 0x20) != 0)
  {
    UInt32 mChannelsPerFrame = 1;
    goto LABEL_23;
  }
  UInt32 mChannelsPerFrame = inFormat.mChannelsPerFrame;
  if (inFormat.mChannelsPerFrame)
  {
LABEL_23:
    UInt32 v8 = inFormat.mBytesPerFrame / mChannelsPerFrame;
    goto LABEL_24;
  }
  UInt32 v8 = (inFormat.mBitsPerChannel + 7) >> 3;
LABEL_24:
  inFormat.UInt32 mChannelsPerFrame = v89;
  inFormat.mFramesPerPacket = 1;
  inFormat.UInt32 mBytesPerFrame = v8 * v89;
  inFormat.mFormatFlags &= ~0x20u;
  inFormat.mBytesPerPacket = v8 * v89;
LABEL_25:
  if (kAVVCScope)
  {
    id v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_32;
    }
  }
  else
  {
    id v11 = (id)MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  uint64_t v13 = v11;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CAStreamBasicDescription::AsString((CAStreamBasicDescription *)&inFormat, (char *)buf, 0x100uLL, v14, v15);
    LODWORD(v104.mSampleRate) = 136315650;
    *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
    LOWORD(v104.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 383;
    HIWORD(v104.mBytesPerPacket) = 2080;
    *(void *)&v104.mFramesPerPacket = buf;
    _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Record Queue Format: %s", (uint8_t *)&v104, 0x1Cu);
  }

LABEL_32:
  uint64_t v16 = *((void *)this + 35);
  if (v16 == 1768764005 || v16 == 1768780647) {
    unsigned int v18 = 4;
  }
  else {
    unsigned int v18 = 4100;
  }
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      id v19 = *(id *)kAVVCScope;
      if (v19)
      {
        OSStatus v20 = v19;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v104.mSampleRate) = 136315906;
          *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
          LOWORD(v104.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 396;
          HIWORD(v104.mBytesPerPacket) = 1024;
          v104.mFramesPerPacket = v18;
          LOWORD(v104.mBytesPerFrame) = 2080;
          *(void *)((char *)&v104.mBytesPerFrame + 2) = "With";
          _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating queue with flags 0x%x. %s runloops", (uint8_t *)&v104, 0x22u);
        }
      }
    }
  }
  char v21 = *(__CFRunLoop **)(*((void *)this + 96) + 128);
  uint64_t v23 = v91;
  id v22 = v92;
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v24 = (AudioQueueRef *)((char *)this + 608);
  *((void *)this + 108) = v23;
  int v25 = (std::__shared_weak_count *)*((void *)this + 109);
  *((void *)this + 109) = v22;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = AudioQueueNewInput(&inFormat, (AudioQueueInputCallback)AVVCAudioQueueRecordingEngine::AudioQueueRecordInputCallback, (char *)this + 864, v21, 0, v18, (AudioQueueRef *)this + 76);
  uint64_t v9 = v26;
  if (v26)
  {
    if ((v26 + 199999) < 0x61A7F)
    {
      if (kAVVCScope)
      {
        id v27 = *(id *)kAVVCScope;
        if (!v27) {
          goto LABEL_188;
        }
      }
      else
      {
        id v27 = MEMORY[0x1E4F14500];
        id v30 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v104.mSampleRate) = 136315650;
        *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v104.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 406;
        HIWORD(v104.mBytesPerPacket) = 1024;
        v104.mFramesPerPacket = v9;
        _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueNewInput err %d", (uint8_t *)&v104, 0x18u);
      }
LABEL_66:

      goto LABEL_188;
    }
    if (kAVVCScope)
    {
      id v27 = *(id *)kAVVCScope;
      if (!v27) {
        goto LABEL_188;
      }
    }
    else
    {
      id v27 = MEMORY[0x1E4F14500];
      id v31 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v104.mSampleRate) = 136315650;
      *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v104.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 406;
      HIWORD(v104.mBytesPerPacket) = 1024;
      v104.mFramesPerPacket = v9;
      _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueNewInput err %{audio:4CC}d", (uint8_t *)&v104, 0x18u);
    }
    goto LABEL_66;
  }
  if (AudioQueueSetProperty(*v24, 0x63756964u, &AudioQueueProperty_RecordQueueClientName, 8u))
  {
    if (kAVVCScope)
    {
      id v28 = *(id *)kAVVCScope;
      if (!v28) {
        goto LABEL_79;
      }
    }
    else
    {
      id v28 = (id)MEMORY[0x1E4F14500];
      id v32 = MEMORY[0x1E4F14500];
    }
    id v33 = v28;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v104.mSampleRate) = 136315650;
      *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v104.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 414;
      HIWORD(v104.mBytesPerPacket) = 2112;
      *(void *)&v104.mFramesPerPacket = @"AVVoiceController_RecordQueue";
      uint64_t v34 = "%25s:%-5d FAILED createRecordQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
      id v35 = v33;
      os_log_type_t v36 = OS_LOG_TYPE_ERROR;
LABEL_77:
      _os_log_impl(&dword_19D794000, v35, v36, v34, (uint8_t *)&v104, 0x1Cu);
      goto LABEL_78;
    }
    goto LABEL_78;
  }
  if (!kAVVCScope)
  {
    id v29 = (id)MEMORY[0x1E4F14500];
    id v37 = MEMORY[0x1E4F14500];
LABEL_75:
    id v33 = v29;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v104.mSampleRate) = 136315650;
      *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v104.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 416;
      HIWORD(v104.mBytesPerPacket) = 2112;
      *(void *)&v104.mFramesPerPacket = @"AVVoiceController_RecordQueue";
      uint64_t v34 = "%25s:%-5d createRecordQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
      id v35 = v33;
      os_log_type_t v36 = OS_LOG_TYPE_DEBUG;
      goto LABEL_77;
    }
LABEL_78:

    goto LABEL_79;
  }
  id v29 = *(id *)kAVVCScope;
  if (v29) {
    goto LABEL_75;
  }
LABEL_79:
  int inData = 127;
  uint64_t v38 = AudioQueueSetProperty(*v24, 0x73726371u, &inData, 4u);
  uint64_t v9 = v38;
  if (v38)
  {
    if ((v38 + 199999) < 0x61A7F)
    {
      if (kAVVCScope)
      {
        uint64_t v39 = *(id *)kAVVCScope;
        if (!v39) {
          goto LABEL_188;
        }
      }
      else
      {
        uint64_t v39 = MEMORY[0x1E4F14500];
        id v44 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v104.mSampleRate) = 136315650;
        *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v104.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 450;
        HIWORD(v104.mBytesPerPacket) = 1024;
        v104.mFramesPerPacket = v9;
        _os_log_impl(&dword_19D794000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueSetProperty(kAudioConverterSampleRateConverterQuality, Max) err %d", (uint8_t *)&v104, 0x18u);
      }
LABEL_98:

      goto LABEL_188;
    }
    if (kAVVCScope)
    {
      uint64_t v39 = *(id *)kAVVCScope;
      if (!v39) {
        goto LABEL_188;
      }
    }
    else
    {
      uint64_t v39 = MEMORY[0x1E4F14500];
      id v45 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v104.mSampleRate) = 136315650;
      *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v104.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 450;
      HIWORD(v104.mBytesPerPacket) = 1024;
      v104.mFramesPerPacket = v9;
      _os_log_impl(&dword_19D794000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueSetProperty(kAudioConverterSampleRateConverterQuality, Max) err %{audio:4CC}d", (uint8_t *)&v104, 0x18u);
    }
    goto LABEL_98;
  }
  UInt32 ioDataSize = 40;
  uint64_t Property = AudioQueueGetProperty(*v24, 0x61716674u, &inFormat, &ioDataSize);
  uint64_t v9 = Property;
  if (!Property)
  {
    *((void *)this + 81) = *(void *)&inFormat.mBitsPerChannel;
    long long v42 = *(_OWORD *)&inFormat.mBytesPerPacket;
    *(_OWORD *)((char *)this + 616) = *(_OWORD *)&inFormat.mSampleRate;
    *(_OWORD *)((char *)this + 632) = v42;
    unsigned int outData = 0;
    UInt32 ioDataSize = 4;
    AudioQueueGetProperty(*((AudioQueueRef *)this + 76), 0x61716463u, &outData, &ioDataSize);
    if (kAVVCScope)
    {
      id v43 = *(id *)kAVVCScope;
      if (!v43) {
        goto LABEL_110;
      }
    }
    else
    {
      id v43 = (id)MEMORY[0x1E4F14500];
      id v46 = MEMORY[0x1E4F14500];
    }
    __int16 v47 = v43;
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v104.mSampleRate) = 136315650;
      *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v104.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 464;
      HIWORD(v104.mBytesPerPacket) = 1024;
      v104.mFramesPerPacket = outData;
      _os_log_impl(&dword_19D794000, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d AQGetProperty - kAudioQueueDeviceProperty_NumberChannels returned : %u", (uint8_t *)&v104, 0x18u);
    }

LABEL_110:
    *((_DWORD *)this + 170) = outData;
    OSStatus v48 = AudioQueueAddPropertyListener(*((AudioQueueRef *)this + 76), 0x6171726Eu, (AudioQueuePropertyListenerProc)AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc, (char *)this + 864);
    unsigned int v49 = v48;
    if (!v48) {
      goto LABEL_134;
    }
    if ((v48 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        id v53 = *(id *)kAVVCScope;
        if (!v53)
        {
LABEL_134:
          OSStatus v58 = AudioQueueAddPropertyListener(*v24, 0x71637665u, (AudioQueuePropertyListenerProc)AVVCAudioQueueRecordingEngine::AudioQueueRecordPropertyListenerProc, (char *)this + 864);
          unsigned int v59 = v58;
          if (!v58) {
            goto LABEL_150;
          }
          if ((v58 + 199999) >= 0x61A7F)
          {
            if (kAVVCScope)
            {
              id v61 = *(id *)kAVVCScope;
              if (!v61)
              {
LABEL_150:
                (*(void (**)(AVVCAudioQueueRecordingEngine *, void))(*(void *)this + 152))(this, *((unsigned __int8 *)this + 296));
                *((_DWORD *)this + 204) = 0;
                if (AVVCAudioQueueRecordingEngine::ShouldUseAudioConverter(this, (const AudioStreamBasicDescription *)((char *)this + 24)))
                {
                  AudioStreamBasicDescription v104 = inFormat;
                  AVVCAudioQueueRecordingEngine::createAudioConverter(this, (CAStreamBasicDescription *)&v104, v3, (unsigned int *)this + 204);
                  uint64_t v9 = v66;
                  if (v66)
                  {
                    if (kAVVCScope)
                    {
                      uint64_t v67 = *(id *)kAVVCScope;
                      if (!v67)
                      {
LABEL_187:
                        AVVCRecordingEngine::destroyRecordEngineWithRecordLock(*((AVVCRecordingEngine **)this + 18));
                        goto LABEL_188;
                      }
                    }
                    else
                    {
                      uint64_t v67 = MEMORY[0x1E4F14500];
                      id v84 = MEMORY[0x1E4F14500];
                    }
                    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)double v98 = 136315650;
                      int16x8_t v99 = "AVVCAudioQueueRecordingEngine.mm";
                      __int16 v100 = 1024;
                      int v101 = 482;
                      __int16 v102 = 1024;
                      int v103 = v9;
                      _os_log_impl(&dword_19D794000, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d createRecordQueue: createAudioConverter error: %d. Destroying record queue.", v98, 0x18u);
                    }

                    goto LABEL_187;
                  }
                }
                else
                {
                  *((_DWORD *)this + 204) = (*((double *)this + 33) * *((double *)this + 3));
                  if (kAVVCScope)
                  {
                    id v68 = *(id *)kAVVCScope;
                    if (!v68) {
                      goto LABEL_162;
                    }
                  }
                  else
                  {
                    id v68 = (id)MEMORY[0x1E4F14500];
                    id v69 = MEMORY[0x1E4F14500];
                  }
                  id v70 = v68;
                  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(v104.mSampleRate) = 136315394;
                    *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                    LOWORD(v104.mFormatFlags) = 1024;
                    *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 489;
                    _os_log_impl(&dword_19D794000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioConverter is not created.. reason: requested channels is 1 or requested interleaved audio or non-lpcm is requested", (uint8_t *)&v104, 0x12u);
                  }
                }
LABEL_162:
                uint64_t v71 = *((void *)this + 16);
                if (v71) {
                  (*(void (**)(uint64_t, void, uint64_t))(v71 + 16))(v71, *((void *)this + 34), v5);
                }
                if (kAVVCScope)
                {
                  id v72 = *(id *)kAVVCScope;
                  if (!v72) {
                    goto LABEL_171;
                  }
                }
                else
                {
                  id v72 = (id)MEMORY[0x1E4F14500];
                  id v73 = MEMORY[0x1E4F14500];
                }
                uint64_t v74 = v72;
                if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
                {
                  unsigned int v75 = *((_DWORD *)this + 204);
                  uint64_t v76 = *((void *)this + 33);
                  LODWORD(v104.mSampleRate) = 136315906;
                  *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                  LOWORD(v104.mFormatFlags) = 1024;
                  *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 495;
                  HIWORD(v104.mBytesPerPacket) = 1024;
                  v104.mFramesPerPacket = v75;
                  LOWORD(v104.mBytesPerFrame) = 2048;
                  *(void *)((char *)&v104.mBytesPerFrame + 2) = v76;
                  _os_log_impl(&dword_19D794000, v74, OS_LOG_TYPE_DEBUG, "%25s:%-5d FrameCapacity: %d. Buffer duration: %f s", (uint8_t *)&v104, 0x22u);
                }

LABEL_171:
                AVVCRecordingEngine::populateRecordSettings((AVVCRecordingEngine *)this);
                unsigned int v77 = (1.0 / *((double *)this + 33));
                if (v77 <= 0x10) {
                  unsigned int v77 = 16;
                }
                *((_DWORD *)this + 166) = v77;
                UInt32 v78 = *((_DWORD *)this + 204) / inFormat.mFramesPerPacket * inFormat.mBytesPerPacket;
                if (kAVVCScope)
                {
                  id v79 = *(id *)kAVVCScope;
                  if (!v79) {
                    goto LABEL_180;
                  }
                }
                else
                {
                  id v79 = (id)MEMORY[0x1E4F14500];
                  id v80 = MEMORY[0x1E4F14500];
                }
                int v81 = v79;
                if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
                {
                  unsigned int v82 = *((_DWORD *)this + 166);
                  LODWORD(v104.mSampleRate) = 136315906;
                  *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
                  LOWORD(v104.mFormatFlags) = 1024;
                  *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 513;
                  HIWORD(v104.mBytesPerPacket) = 1024;
                  v104.mFramesPerPacket = v82;
                  LOWORD(v104.mBytesPerFrame) = 1024;
                  *(UInt32 *)((char *)&v104.mBytesPerFrame + 2) = v78;
                  _os_log_impl(&dword_19D794000, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d createRecordQueue: creating %u queue buffers %u bytes each", (uint8_t *)&v104, 0x1Eu);
                }

LABEL_180:
                uint64_t v83 = *((void *)this + 82);
                if (v83) {
                  MEMORY[0x19F3ABB10](v83, 0x20C8093837F09);
                }
                operator new[]();
              }
            }
            else
            {
              id v61 = (id)MEMORY[0x1E4F14500];
              id v65 = MEMORY[0x1E4F14500];
            }
            uint64_t v63 = v61;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v104.mSampleRate) = 136315650;
              *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
              LOWORD(v104.mFormatFlags) = 1024;
              *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 471;
              HIWORD(v104.mBytesPerPacket) = 1024;
              v104.mFramesPerPacket = v59;
              unsigned __int8 v64 = "%25s:%-5d ERROR: createRecordQueue: AudioQueueAddPropertyListener(kAudioQueueProperty_ConverterError"
                    ") err %{audio:4CC}d";
              goto LABEL_148;
            }
          }
          else
          {
            if (kAVVCScope)
            {
              id v60 = *(id *)kAVVCScope;
              if (!v60) {
                goto LABEL_150;
              }
            }
            else
            {
              id v60 = (id)MEMORY[0x1E4F14500];
              id v62 = MEMORY[0x1E4F14500];
            }
            uint64_t v63 = v60;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v104.mSampleRate) = 136315650;
              *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
              LOWORD(v104.mFormatFlags) = 1024;
              *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 471;
              HIWORD(v104.mBytesPerPacket) = 1024;
              v104.mFramesPerPacket = v59;
              unsigned __int8 v64 = "%25s:%-5d ERROR: createRecordQueue: AudioQueueAddPropertyListener(kAudioQueueProperty_ConverterError) err %d";
LABEL_148:
              _os_log_impl(&dword_19D794000, v63, OS_LOG_TYPE_ERROR, v64, (uint8_t *)&v104, 0x18u);
            }
          }

          goto LABEL_150;
        }
      }
      else
      {
        id v53 = (id)MEMORY[0x1E4F14500];
        id v57 = MEMORY[0x1E4F14500];
      }
      id v55 = v53;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v104.mSampleRate) = 136315650;
        *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v104.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 469;
        HIWORD(v104.mBytesPerPacket) = 1024;
        v104.mFramesPerPacket = v49;
        id v56 = "%25s:%-5d ERROR: createRecordQueue: AudioQueueAddPropertyListener(kAudioQueueProperty_IsRunning) err %{audio:4CC}d";
        goto LABEL_132;
      }
    }
    else
    {
      if (kAVVCScope)
      {
        id v50 = *(id *)kAVVCScope;
        if (!v50) {
          goto LABEL_134;
        }
      }
      else
      {
        id v50 = (id)MEMORY[0x1E4F14500];
        id v54 = MEMORY[0x1E4F14500];
      }
      id v55 = v50;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v104.mSampleRate) = 136315650;
        *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v104.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 469;
        HIWORD(v104.mBytesPerPacket) = 1024;
        v104.mFramesPerPacket = v49;
        id v56 = "%25s:%-5d ERROR: createRecordQueue: AudioQueueAddPropertyListener(kAudioQueueProperty_IsRunning) err %d";
LABEL_132:
        _os_log_impl(&dword_19D794000, v55, OS_LOG_TYPE_ERROR, v56, (uint8_t *)&v104, 0x18u);
      }
    }

    goto LABEL_134;
  }
  if ((Property + 199999) < 0x61A7F)
  {
    if (kAVVCScope)
    {
      id v41 = *(id *)kAVVCScope;
      if (!v41) {
        goto LABEL_188;
      }
    }
    else
    {
      id v41 = MEMORY[0x1E4F14500];
      id v51 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v104.mSampleRate) = 136315650;
      *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v104.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 455;
      HIWORD(v104.mBytesPerPacket) = 1024;
      v104.mFramesPerPacket = v9;
      _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueGetProperty(StreamDescription) err %d", (uint8_t *)&v104, 0x18u);
    }
LABEL_118:

    goto LABEL_188;
  }
  if (!kAVVCScope)
  {
    id v41 = MEMORY[0x1E4F14500];
    id v52 = MEMORY[0x1E4F14500];
LABEL_120:
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v104.mSampleRate) = 136315650;
      *(void *)((char *)&v104.mSampleRate + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v104.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&v104.mFormatFlags + 2) = 455;
      HIWORD(v104.mBytesPerPacket) = 1024;
      v104.mFramesPerPacket = v9;
      _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createRecordQueue: AudioQueueGetProperty(StreamDescription) err %{audio:4CC}d", (uint8_t *)&v104, 0x18u);
    }
    goto LABEL_118;
  }
  id v41 = *(id *)kAVVCScope;
  if (v41) {
    goto LABEL_120;
  }
LABEL_188:
  if (v92) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v92);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v93);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v94);

  return v9;
}

void sub_19D8280F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,char a27,int a28,char a29)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  TraceMethod::~TraceMethod((TraceMethod *)&a27);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a29);

  _Unwind_Resume(a1);
}

BOOL AVVCAudioQueueRecordingEngine::ShouldUseAudioConverter(AVVCAudioQueueRecordingEngine *this, const AudioStreamBasicDescription *a2)
{
  if (a2->mFormatID != 1819304813) {
    return 1;
  }
  if ((a2->mFormatFlags & 0x20) == 0) {
    return 0;
  }
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  if (mChannelsPerFrame != 2) {
    return mChannelsPerFrame > 1;
  }
  if (isDarwinOSProduct(void)::onceToken != -1)
  {
    uint64_t v5 = this;
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
    this = v5;
  }
  if (isDarwinOSProduct(void)::isDarwinOS) {
    BOOL v3 = *((void *)this + 34) == 1;
  }
  else {
    BOOL v3 = 0;
  }
  return !v3;
}

void AVVCAudioQueueRecordingEngine::createAudioConverter(AVVCAudioQueueRecordingEngine *this, CAStreamBasicDescription *a2, NSDictionary *a3, unsigned int *a4)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  int v7 = a3;
  if (kAVVCScope)
  {
    id v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    id v8 = (id)MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  id v10 = v8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    long long v151 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v152 = 1024;
    int v153 = 633;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: INITIAL AUDIOCONVERTER OUTPUT FORMAT:", buf, 0x12u);
  }

LABEL_8:
  if (kAVVCScope)
  {
    id v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_15;
    }
  }
  else
  {
    id v11 = (id)MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  uint64_t v13 = v11;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    CAStreamBasicDescription::AsString((CAStreamBasicDescription *)((char *)this + 24), (char *)buf, 0x100uLL, v14, v15);
    LODWORD(v148.var0) = 136315650;
    *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
    LOWORD(v148.var2) = 1024;
    *(unsigned int *)((char *)&v148.var2 + 2) = 635;
    HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 2080;
    *(void *)&v148.unsigned int var4 = buf;
    _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", (uint8_t *)&v148, 0x1Cu);
  }

LABEL_15:
  long long v16 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v16;
  *(void *)&inDestinationFormat.UInt32 mBitsPerChannel = *((void *)this + 7);
  if (*((void *)this + 103) && *((void *)this + 104))
  {
    if (kAVVCScope)
    {
      id v17 = *(id *)kAVVCScope;
      if (!v17) {
        goto LABEL_24;
      }
    }
    else
    {
      id v17 = (id)MEMORY[0x1E4F14500];
      id v18 = MEMORY[0x1E4F14500];
    }
    id v19 = v17;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      CAStreamBasicDescription::AsString(a2, (char *)buf, 0x100uLL, v20, v21);
      LODWORD(v148.var0) = 136315650;
      *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 639;
      HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 2080;
      *(void *)&v148.unsigned int var4 = buf;
      _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d inASBD : %s", (uint8_t *)&v148, 0x1Cu);
    }

LABEL_24:
    UInt32 var6 = a2->var6;
    if ((inDestinationFormat.mFormatFlags & 0x20) != 0)
    {
      UInt32 mChannelsPerFrame = 1;
    }
    else
    {
      UInt32 mChannelsPerFrame = inDestinationFormat.mChannelsPerFrame;
      if (!inDestinationFormat.mChannelsPerFrame)
      {
        UInt32 v24 = (inDestinationFormat.mBitsPerChannel + 7) >> 3;
LABEL_29:
        inDestinationFormat.UInt32 mBytesPerFrame = v24;
        inDestinationFormat.UInt32 mChannelsPerFrame = var6;
        inDestinationFormat.mBytesPerPacket = v24;
        inDestinationFormat.mFramesPerPacket = 1;
        inDestinationFormat.mFormatFlags |= 0x20u;
        goto LABEL_30;
      }
    }
    UInt32 v24 = inDestinationFormat.mBytesPerFrame / mChannelsPerFrame;
    goto LABEL_29;
  }
LABEL_30:
  int v25 = (AudioConverterRef *)((char *)this + 776);
  OSStatus v26 = AudioConverterNew((const AudioStreamBasicDescription *)a2, &inDestinationFormat, (AudioConverterRef *)this + 97);
  unsigned int v27 = v26;
  if (v26)
  {
    if ((v26 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        id v28 = *(id *)kAVVCScope;
        if (!v28) {
          goto LABEL_307;
        }
      }
      else
      {
        id v28 = MEMORY[0x1E4F14500];
        id v35 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v148.var0) = 136315650;
        *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 644;
        HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
        v148.unsigned int var4 = v27;
        _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAudioConverter: AudioConverterNew err %{audio:4CC}d", (uint8_t *)&v148, 0x18u);
      }
    }
    else
    {
      if (kAVVCScope)
      {
        id v28 = *(id *)kAVVCScope;
        if (!v28) {
          goto LABEL_307;
        }
      }
      else
      {
        id v28 = MEMORY[0x1E4F14500];
        id v34 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v148.var0) = 136315650;
        *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 644;
        HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
        v148.unsigned int var4 = v27;
        _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAudioConverter: AudioConverterNew err %d", (uint8_t *)&v148, 0x18u);
      }
    }
    goto LABEL_320;
  }
  id v29 = v7;
  id v30 = v29;
  *(_DWORD *)v142 = 0;
  if (v29 && *v25)
  {
    unsigned int inPropertyData = 0;
    if (getUInt32ForKey(v29, &cfstr_Avsamplerateco_0.isa, &inPropertyData, (int *)v142))
    {
      OSStatus v31 = AudioConverterSetProperty(*v25, 0x73726371u, 4u, &inPropertyData);
      unsigned int v32 = v31;
      *(_DWORD *)v142 = v31;
      if (!v31) {
        goto LABEL_67;
      }
      if ((v31 + 199999) < 0x61A7F)
      {
        if (kAVVCScope)
        {
          id v33 = *(id *)kAVVCScope;
          if (!v33) {
            goto LABEL_67;
          }
        }
        else
        {
          id v33 = MEMORY[0x1E4F14500];
          id v36 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v148.var0) = 136315650;
          *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
          LOWORD(v148.var2) = 1024;
          *(unsigned int *)((char *)&v148.var2 + 2) = 602;
          HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
          v148.unsigned int var4 = v32;
          id v37 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterSampleRateConverterQuality err %d";
LABEL_65:
          _os_log_impl(&dword_19D794000, v33, OS_LOG_TYPE_ERROR, v37, (uint8_t *)&v148, 0x18u);
          goto LABEL_66;
        }
        goto LABEL_66;
      }
      if (kAVVCScope)
      {
        id v33 = *(id *)kAVVCScope;
        if (!v33) {
          goto LABEL_67;
        }
      }
      else
      {
        id v33 = MEMORY[0x1E4F14500];
        id v38 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v148.var0) = 136315650;
        *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 602;
        HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
        v148.unsigned int var4 = v32;
        id v37 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterSampleRateConverterQuality err %{audio:4CC}d";
        goto LABEL_65;
      }
LABEL_66:

      goto LABEL_67;
    }
    if (*(_DWORD *)v142) {
      goto LABEL_124;
    }
LABEL_67:
    if (getUInt32ForKey(v30, &cfstr_Avencoderbitra_0.isa, &inPropertyData, (int *)v142))
    {
      OSStatus v39 = AudioConverterSetProperty(*v25, 0x62726174u, 4u, &inPropertyData);
      unsigned int v40 = v39;
      *(_DWORD *)v142 = v39;
      if (!v39) {
        goto LABEL_98;
      }
      if ((v39 + 199999) < 0x61A7F)
      {
        if (kAVVCScope)
        {
          id v41 = *(id *)kAVVCScope;
          if (!v41) {
            goto LABEL_98;
          }
        }
        else
        {
          id v41 = MEMORY[0x1E4F14500];
          id v48 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v148.var0) = 136315650;
          *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
          LOWORD(v148.var2) = 1024;
          *(unsigned int *)((char *)&v148.var2 + 2) = 607;
          HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
          v148.unsigned int var4 = v40;
          _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterEncodeBitRate err %d", (uint8_t *)&v148, 0x18u);
        }
LABEL_88:

        goto LABEL_98;
      }
      if (kAVVCScope)
      {
        id v41 = *(id *)kAVVCScope;
        if (!v41) {
          goto LABEL_98;
        }
      }
      else
      {
        id v41 = MEMORY[0x1E4F14500];
        id v49 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v148.var0) = 136315650;
        *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 607;
        HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
        v148.unsigned int var4 = v40;
        _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterEncodeBitRate err %{audio:4CC}d", (uint8_t *)&v148, 0x18u);
      }
      goto LABEL_88;
    }
    if (*(_DWORD *)v142) {
      goto LABEL_124;
    }
    if (!getUInt32ForKey(v30, &cfstr_Avencoderbitra_1.isa, &inPropertyData, (int *)v142))
    {
      if (*(_DWORD *)v142) {
        goto LABEL_124;
      }
LABEL_98:
      if (!getUInt32ForKey(v30, &cfstr_Avencoderbitde.isa, &inPropertyData, (int *)v142))
      {
        if (*(_DWORD *)v142) {
          goto LABEL_124;
        }
        goto LABEL_117;
      }
      OSStatus v50 = AudioConverterSetProperty(*v25, 0x61636264u, 4u, &inPropertyData);
      unsigned int v51 = v50;
      *(_DWORD *)v142 = v50;
      if (!v50)
      {
LABEL_117:
        if (getUInt32ForKey(v30, &cfstr_Avencoderquali.isa, &inPropertyData, (int *)v142))
        {
          OSStatus v56 = AudioConverterSetProperty(*v25, 0x63647175u, 4u, &inPropertyData);
          unsigned int v57 = v56;
          *(_DWORD *)v142 = v56;
          if (!v56) {
            goto LABEL_136;
          }
          if ((v56 + 199999) < 0x61A7F)
          {
            if (kAVVCScope)
            {
              OSStatus v58 = *(id *)kAVVCScope;
              if (!v58) {
                goto LABEL_136;
              }
            }
            else
            {
              OSStatus v58 = MEMORY[0x1E4F14500];
              id v59 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v148.var0) = 136315650;
              *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
              LOWORD(v148.var2) = 1024;
              *(unsigned int *)((char *)&v148.var2 + 2) = 625;
              HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
              v148.unsigned int var4 = v57;
              id v60 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterCodecQuality err %d";
LABEL_134:
              _os_log_impl(&dword_19D794000, v58, OS_LOG_TYPE_ERROR, v60, (uint8_t *)&v148, 0x18u);
              goto LABEL_135;
            }
            goto LABEL_135;
          }
          if (kAVVCScope)
          {
            OSStatus v58 = *(id *)kAVVCScope;
            if (!v58) {
              goto LABEL_136;
            }
          }
          else
          {
            OSStatus v58 = MEMORY[0x1E4F14500];
            id v61 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v148.var0) = 136315650;
            *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
            LOWORD(v148.var2) = 1024;
            *(unsigned int *)((char *)&v148.var2 + 2) = 625;
            HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
            v148.unsigned int var4 = v57;
            id v60 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterCodecQuality err %{audio:4CC}d";
            goto LABEL_134;
          }
LABEL_135:

          goto LABEL_136;
        }
        if (!*(_DWORD *)v142) {
          goto LABEL_136;
        }
LABEL_124:

LABEL_307:
        return;
      }
      if ((v50 + 199999) >= 0x61A7F)
      {
        if (kAVVCScope)
        {
          id v52 = *(id *)kAVVCScope;
          if (!v52) {
            goto LABEL_117;
          }
        }
        else
        {
          id v52 = MEMORY[0x1E4F14500];
          id v55 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
          goto LABEL_116;
        }
        LODWORD(v148.var0) = 136315650;
        *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 620;
        HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
        v148.unsigned int var4 = v51;
        id v54 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterPropertyBitDepthHint err %{audio:4CC}d";
      }
      else
      {
        if (kAVVCScope)
        {
          id v52 = *(id *)kAVVCScope;
          if (!v52) {
            goto LABEL_117;
          }
        }
        else
        {
          id v52 = MEMORY[0x1E4F14500];
          id v53 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
          goto LABEL_116;
        }
        LODWORD(v148.var0) = 136315650;
        *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 620;
        HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
        v148.unsigned int var4 = v51;
        id v54 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterPropertyBitDepthHint err %d";
      }
      _os_log_impl(&dword_19D794000, v52, OS_LOG_TYPE_ERROR, v54, (uint8_t *)&v148, 0x18u);
LABEL_116:

      goto LABEL_117;
    }
    unsigned int outPropertyData = *((_DWORD *)this + 13) * inPropertyData;
    OSStatus v42 = AudioConverterSetProperty(*((AudioConverterRef *)this + 97), 0x62726174u, 4u, &outPropertyData);
    unsigned int v43 = v42;
    *(_DWORD *)v142 = v42;
    if (!v42) {
      goto LABEL_98;
    }
    unsigned int v44 = v42 + 199999;
    id v45 = CALog::LogObjIfEnabled(1, kAVVCScope);
    id v46 = v45;
    if (v44 >= 0x61A7F)
    {
      if (!v45 || !os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        goto LABEL_97;
      }
      LODWORD(v148.var0) = 136315650;
      *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 613;
      HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v148.unsigned int var4 = v43;
      __int16 v47 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterEncodeBitRate err %{audio:4CC}d";
    }
    else
    {
      if (!v45 || !os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        goto LABEL_97;
      }
      LODWORD(v148.var0) = 136315650;
      *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 613;
      HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v148.unsigned int var4 = v43;
      __int16 v47 = "%25s:%-5d ERROR: configureRecordConverterFromSettings: kAudioConverterEncodeBitRate err %d";
    }
    _os_log_impl(&dword_19D794000, v46, OS_LOG_TYPE_ERROR, v47, (uint8_t *)&v148, 0x18u);
LABEL_97:

    goto LABEL_98;
  }
LABEL_136:

  unsigned int inPropertyData = 0;
  unsigned int v62 = (*((double *)this + 33) * *((double *)this + 3));
  if (kAVVCScope)
  {
    id v63 = *(id *)kAVVCScope;
    if (!v63) {
      goto LABEL_143;
    }
  }
  else
  {
    id v63 = (id)MEMORY[0x1E4F14500];
    id v64 = MEMORY[0x1E4F14500];
  }
  id v65 = v63;
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v66 = *((void *)this + 33);
    uint64_t v67 = *((void *)this + 3);
    LODWORD(v148.var0) = 136316162;
    *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
    LOWORD(v148.var2) = 1024;
    *(unsigned int *)((char *)&v148.var2 + 2) = 656;
    HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 2048;
    *(void *)&v148.unsigned int var4 = v66;
    LOWORD(v148.var6) = 2048;
    *(void *)((char *)&v148.var6 + 2) = v67;
    HIWORD(v148.var8) = 1024;
    unsigned int v149 = v62;
    _os_log_impl(&dword_19D794000, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: initial frames per buffer = dur %.2f * sr %.2f = %u", (uint8_t *)&v148, 0x2Cu);
  }

LABEL_143:
  id v68 = (double *)((char *)this + 24);
  if (*((_DWORD *)this + 8) != 1936745848) {
    goto LABEL_200;
  }
  *(_DWORD *)v142 = 3;
  OSStatus v69 = AudioConverterSetProperty(*v25, 0x73656378u, 4u, v142);
  unsigned int v70 = v69;
  if (v69)
  {
    if ((v69 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        id v28 = *(id *)kAVVCScope;
        if (!v28) {
          goto LABEL_307;
        }
      }
      else
      {
        id v28 = MEMORY[0x1E4F14500];
        id v76 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_320;
      }
      LODWORD(v148.var0) = 136315650;
      *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 662;
      HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v148.unsigned int var4 = v70;
      unsigned int v75 = "%25s:%-5d ERROR: createAudioConverter: AudioConverterSetProperty(kAudioCodecPropertySpeexEncodeComplexity) e"
            "rr %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        id v28 = *(id *)kAVVCScope;
        if (!v28) {
          goto LABEL_307;
        }
      }
      else
      {
        id v28 = MEMORY[0x1E4F14500];
        id v74 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_320;
      }
      LODWORD(v148.var0) = 136315650;
      *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 662;
      HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v148.unsigned int var4 = v70;
      unsigned int v75 = "%25s:%-5d ERROR: createAudioConverter: AudioConverterSetProperty(kAudioCodecPropertySpeexEncodeComplexity) err %d";
    }
    _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_ERROR, v75, (uint8_t *)&v148, 0x18u);
    goto LABEL_320;
  }
  unsigned int outPropertyData = 0;
  unsigned int inPropertyData = 4;
  if (AudioConverterGetProperty(*v25, 0x61667070u, &inPropertyData, &outPropertyData))
  {
    if (*v68 == 8000.0) {
      unsigned int v71 = 160;
    }
    else {
      unsigned int v71 = 320;
    }
    unsigned int outPropertyData = v71;
  }
  else
  {
    unsigned int v71 = outPropertyData;
  }
  unsigned int v72 = v62 / v71 * v71;
  *((_DWORD *)this + 11) = v72;
  if (v62 == v62 - v72)
  {
    if (kAVVCScope)
    {
      id v73 = *(id *)kAVVCScope;
      if (!v73)
      {
LABEL_174:
        unsigned int v72 = *((_DWORD *)this + 11);
        goto LABEL_175;
      }
    }
    else
    {
      id v73 = (id)MEMORY[0x1E4F14500];
      id v77 = MEMORY[0x1E4F14500];
    }
    UInt32 v78 = v73;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      uint64_t v79 = *((void *)this + 33);
      LODWORD(v148.var0) = 136315906;
      *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 674;
      HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v148.unsigned int var4 = v62;
      LOWORD(v148.var5) = 2048;
      *(void *)((char *)&v148.var5 + 2) = v79;
      _os_log_impl(&dword_19D794000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d createAudioConverter: corrupted values??? framesPerBuffer = %u, mRecordBufferDuratiouint64_t n = %f", (uint8_t *)&v148, 0x22u);
    }

    goto LABEL_174;
  }
LABEL_175:
  if (v72)
  {
    if (v72 >= 0xC81) {
      *((_DWORD *)this + 11) = v72 >> 1;
    }
    if (kAVVCScope)
    {
      id v80 = *(id *)kAVVCScope;
      if (!v80) {
        goto LABEL_185;
      }
    }
    else
    {
      id v80 = (id)MEMORY[0x1E4F14500];
      id v81 = MEMORY[0x1E4F14500];
    }
    unsigned int v82 = v80;
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v83 = *((_DWORD *)this + 11);
      LODWORD(v148.var0) = 136315650;
      *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 680;
      HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v148.unsigned int var4 = v83;
      _os_log_impl(&dword_19D794000, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: setting audio converter format to %u frames per packet", (uint8_t *)&v148, 0x18u);
    }

LABEL_185:
    OSStatus v84 = AudioConverterSetProperty(*v25, 0x6F666D74u, 0x28u, (char *)this + 24);
    unsigned int v86 = v84;
    if (v84)
    {
      if ((v84 + 199999) >= 0x61A7F)
      {
        if (kAVVCScope)
        {
          id v28 = *(id *)kAVVCScope;
          if (!v28) {
            goto LABEL_307;
          }
        }
        else
        {
          id v28 = MEMORY[0x1E4F14500];
          id v137 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          goto LABEL_320;
        }
        LODWORD(v148.var0) = 136315650;
        *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 682;
        HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
        v148.unsigned int var4 = v86;
        v136 = "%25s:%-5d ERROR: createAudioConverter: AudioConverterSetProperty(kAudioCodecPropertyCurrentOutputFormat) "
               "err %{audio:4CC}d";
      }
      else
      {
        if (kAVVCScope)
        {
          id v28 = *(id *)kAVVCScope;
          if (!v28) {
            goto LABEL_307;
          }
        }
        else
        {
          id v28 = MEMORY[0x1E4F14500];
          id v135 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
          goto LABEL_320;
        }
        LODWORD(v148.var0) = 136315650;
        *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
        LOWORD(v148.var2) = 1024;
        *(unsigned int *)((char *)&v148.var2 + 2) = 682;
        HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
        v148.unsigned int var4 = v86;
        v136 = "%25s:%-5d ERROR: createAudioConverter: AudioConverterSetProperty(kAudioCodecPropertyCurrentOutputFormat) err %d";
      }
      _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_ERROR, v136, (uint8_t *)&v148, 0x18u);
LABEL_320:

      goto LABEL_307;
    }
    LODWORD(v85) = outPropertyData;
    unsigned int v87 = (*((double *)this + 3) / (double)v85);
    *((_DWORD *)this + 64) = v87;
    if (kAVVCScope)
    {
      id v88 = *(id *)kAVVCScope;
      if (!v88) {
        goto LABEL_200;
      }
    }
    else
    {
      id v88 = (id)MEMORY[0x1E4F14500];
      id v89 = MEMORY[0x1E4F14500];
    }
    uint64_t v90 = v88;
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v148.var0) = 136315650;
      *(void *)((char *)&v148.var0 + 4) = "AVVCAudioQueueRecordingEngine.mm";
      LOWORD(v148.var2) = 1024;
      *(unsigned int *)((char *)&v148.var2 + 2) = 686;
      HIWORD(v148.varAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1024;
      v148.unsigned int var4 = v87;
      _os_log_impl(&dword_19D794000, v90, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: %u atomic blocks per second", (uint8_t *)&v148, 0x18u);
    }

LABEL_200:
    memset(&v148, 0, sizeof(v148));
    unsigned int inPropertyData = 40;
    AudioConverterGetProperty(*v25, 0x61636F64u, &inPropertyData, &v148);
    if (v148.var0 != 0.0 && inDestinationFormat.mSampleRate != 0.0 && v148.var0 != inDestinationFormat.mSampleRate
      || v148.var1 && inDestinationFormat.mFormatID && v148.var1 != inDestinationFormat.mFormatID
      || v148.var3 && inDestinationFormat.mBytesPerPacket && v148.var3 != inDestinationFormat.mBytesPerPacket
      || v148.var4 && inDestinationFormat.mFramesPerPacket && v148.var4 != inDestinationFormat.mFramesPerPacket
      || v148.var5 && inDestinationFormat.mBytesPerFrame && v148.var5 != inDestinationFormat.mBytesPerFrame
      || v148.var6 && inDestinationFormat.mChannelsPerFrame && v148.var6 != inDestinationFormat.mChannelsPerFrame
      || v148.var7 && inDestinationFormat.mBitsPerChannel && v148.var7 != inDestinationFormat.mBitsPerChannel
      || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v148, &inDestinationFormat, (const AudioStreamBasicDescription *)1, 1))
    {
      if (kAVVCScope)
      {
        id v91 = *(id *)kAVVCScope;
        if (!v91) {
          goto LABEL_230;
        }
      }
      else
      {
        id v91 = (id)MEMORY[0x1E4F14500];
        id v92 = MEMORY[0x1E4F14500];
      }
      uint64_t v93 = v91;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v142 = 136315394;
        v143 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v144 = 1024;
        int v145 = 694;
        _os_log_impl(&dword_19D794000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d kAudioConverterCurrentOutputStreamDescription ASBD's are different !! ", v142, 0x12u);
      }
    }
LABEL_230:
    if (*((_DWORD *)this + 8) == 1819304813
      || (long long v94 = *(_OWORD *)&v148.var3,
          *(_OWORD *)id v68 = *(_OWORD *)&v148.var0,
          *(_OWORD *)((char *)this + 40) = v94,
          *((void *)this + 7) = *(void *)&v148.var7,
          *((_DWORD *)this + 8) != 1936745848))
    {
      *((_DWORD *)this + 64) = (*((double *)this + 3) / (double)v62);
    }
    unsigned int var4 = v148.var4;
    unsigned int v138 = 2100;
    unsigned int outPropertyData = v148.var3;
    unsigned int inPropertyData = 4;
    OSStatus Property = AudioConverterGetProperty(*v25, 0x6D6F6273u, &inPropertyData, &v138);
    if (Property)
    {
      if (kAVVCScope)
      {
        id v97 = *(id *)kAVVCScope;
        if (!v97) {
          goto LABEL_248;
        }
      }
      else
      {
        id v97 = (id)MEMORY[0x1E4F14500];
        id v99 = MEMORY[0x1E4F14500];
      }
      __int16 v100 = v97;
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v142 = 136315650;
        v143 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v144 = 1024;
        int v145 = 719;
        __int16 v146 = 1024;
        LODWORD(v147) = Property;
        int v101 = "%25s:%-5d createAudioConverter: AudioConverterGetProperty(kAudioConverterPropertyMinimumOutputBufferSize)"
               " returned status %d";
LABEL_246:
        _os_log_impl(&dword_19D794000, v100, OS_LOG_TYPE_DEBUG, v101, v142, 0x18u);
      }
    }
    else
    {
      if (kAVVCScope)
      {
        id v98 = *(id *)kAVVCScope;
        if (!v98)
        {
LABEL_248:
          if (v62 == v62 % var4) {
            unsigned int v103 = 1;
          }
          else {
            unsigned int v103 = v62 / var4 * var4;
          }
          *((_DWORD *)this + 196) = v103 / v148.var4 + 1;
          if (kAVVCScope)
          {
            id v104 = *(id *)kAVVCScope;
            if (!v104) {
              goto LABEL_258;
            }
          }
          else
          {
            id v104 = (id)MEMORY[0x1E4F14500];
            id v105 = MEMORY[0x1E4F14500];
          }
          id v106 = v104;
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v144 = 1024;
            int v145 = 727;
            __int16 v146 = 1024;
            LODWORD(v147) = v103;
            _os_log_impl(&dword_19D794000, v106, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: final framesPerBuffer: %u", v142, 0x18u);
          }

LABEL_258:
          if (kAVVCScope)
          {
            id v107 = *(id *)kAVVCScope;
            if (!v107) {
              goto LABEL_265;
            }
          }
          else
          {
            id v107 = (id)MEMORY[0x1E4F14500];
            id v108 = MEMORY[0x1E4F14500];
          }
          uint64_t v109 = v107;
          if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
          {
            int v110 = *((_DWORD *)this + 196);
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v144 = 1024;
            int v145 = 728;
            __int16 v146 = 1024;
            LODWORD(v147) = v110;
            _os_log_impl(&dword_19D794000, v109, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: mConvertPacketCount: %u", v142, 0x18u);
          }

LABEL_265:
          if (!outPropertyData)
          {
            unsigned int inPropertyData = 4;
            OSStatus v112 = AudioConverterGetProperty(*v25, 0x786F7073u, &inPropertyData, &outPropertyData);
            OSStatus v113 = v112;
            if (v112)
            {
              unsigned int v114 = v112 + 199999;
              v115 = CALog::LogObjIfEnabled(1, kAVVCScope);
              id v116 = v115;
              if (v114 >= 0x61A7F)
              {
                if (v115)
                {
                  v134 = v115;
                  if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v142 = 136315650;
                    v143 = "AVVCAudioQueueRecordingEngine.mm";
                    __int16 v144 = 1024;
                    int v145 = 735;
                    __int16 v146 = 1024;
                    LODWORD(v147) = v113;
                    _os_log_impl(&dword_19D794000, v134, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAudioConverter: AudioConverterGetProperty(MaximumOutputPacketSize) err %{audio:4CC}d", v142, 0x18u);
                  }
                }
              }
              else if (v115)
              {
                uint64_t v117 = v115;
                if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v142 = 136315650;
                  v143 = "AVVCAudioQueueRecordingEngine.mm";
                  __int16 v144 = 1024;
                  int v145 = 735;
                  __int16 v146 = 1024;
                  LODWORD(v147) = v113;
                  _os_log_impl(&dword_19D794000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAudioConverter: AudioConverterGetProperty(MaximumOutputPacketSize) err %d", v142, 0x18u);
                }
              }
              goto LABEL_307;
            }
          }
          if (kAVVCScope)
          {
            id v111 = *(id *)kAVVCScope;
            if (!v111) {
              goto LABEL_280;
            }
          }
          else
          {
            id v111 = (id)MEMORY[0x1E4F14500];
            id v118 = MEMORY[0x1E4F14500];
          }
          __int16 v119 = v111;
          if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v144 = 1024;
            int v145 = 742;
            __int16 v146 = 1024;
            LODWORD(v147) = outPropertyData;
            _os_log_impl(&dword_19D794000, v119, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: outputSizePerPacket: %u", v142, 0x18u);
          }

LABEL_280:
          if ((v148.var2 & 0x20) != 0) {
            unsigned int v120 = v148.var6;
          }
          else {
            unsigned int v120 = 1;
          }
          unsigned int v121 = outPropertyData * *((_DWORD *)this + 196) * v120;
          if (v138 > v121) {
            unsigned int v121 = v138;
          }
          *((_DWORD *)this + 197) = v121;
          if (kAVVCScope)
          {
            id v122 = *(id *)kAVVCScope;
            if (!v122) {
              goto LABEL_292;
            }
          }
          else
          {
            id v122 = (id)MEMORY[0x1E4F14500];
            id v123 = MEMORY[0x1E4F14500];
          }
          v124 = v122;
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEBUG))
          {
            int v125 = *((_DWORD *)this + 197);
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v144 = 1024;
            int v145 = 753;
            __int16 v146 = 1024;
            LODWORD(v147) = v125;
            _os_log_impl(&dword_19D794000, v124, OS_LOG_TYPE_DEBUG, "%25s:%-5d createAudioConverter: mConvertAudioCapacity %u bytes", v142, 0x18u);
          }

LABEL_292:
          if (kAVVCScope)
          {
            id v126 = *(id *)kAVVCScope;
            if (!v126) {
              goto LABEL_299;
            }
          }
          else
          {
            id v126 = (id)MEMORY[0x1E4F14500];
            id v127 = MEMORY[0x1E4F14500];
          }
          v128 = v126;
          if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v142 = 136315394;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v144 = 1024;
            int v145 = 755;
            _os_log_impl(&dword_19D794000, v128, OS_LOG_TYPE_DEBUG, "%25s:%-5d FINAL RECORD FORMAT:", v142, 0x12u);
          }

LABEL_299:
          if (kAVVCScope)
          {
            id v129 = *(id *)kAVVCScope;
            if (!v129)
            {
LABEL_306:
              *a4 = v103;
              goto LABEL_307;
            }
          }
          else
          {
            id v129 = (id)MEMORY[0x1E4F14500];
            id v130 = MEMORY[0x1E4F14500];
          }
          v131 = v129;
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
          {
            CAStreamBasicDescription::AsString(&v148, (char *)buf, 0x100uLL, v132, v133);
            *(_DWORD *)v142 = 136315650;
            v143 = "AVVCAudioQueueRecordingEngine.mm";
            __int16 v144 = 1024;
            int v145 = 756;
            __int16 v146 = 2080;
            uint64_t v147 = buf;
            _os_log_impl(&dword_19D794000, v131, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", v142, 0x1Cu);
          }

          goto LABEL_306;
        }
      }
      else
      {
        id v98 = (id)MEMORY[0x1E4F14500];
        id v102 = MEMORY[0x1E4F14500];
      }
      __int16 v100 = v98;
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v142 = 136315650;
        v143 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v144 = 1024;
        int v145 = 716;
        __int16 v146 = 1024;
        LODWORD(v147) = v138;
        int v101 = "%25s:%-5d createAudioConverter: encoded audio needs minimum of %u bytes per output buffer";
        goto LABEL_246;
      }
    }

    goto LABEL_248;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LOWORD(v148.var0) = 0;
    _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ASSERTION FAILURE: mFramesPerPacket cannot be zero!", (uint8_t *)&v148, 2u);
  }
  __break(1u);
}

void sub_19D829C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::AudioQueueRecordInputCallback(AVVCAudioQueueRecordingEngine *this, void *a2, OpaqueAudioQueue *a3, AudioQueueBuffer *a4, const AudioTimeStamp *a5, uint64_t a6, const AudioStreamPacketDescription *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    uint64_t v13 = *(id *)kAVVCScope;
    if (!v13) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4F14500];
    id v14 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    int v17 = 136315394;
    id v18 = "AVVCAudioQueueRecordingEngine.mm";
    __int16 v19 = 1024;
    int v20 = 152;
    _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioQueueRecordInputCallback called ", (uint8_t *)&v17, 0x12u);
  }

LABEL_8:
  uint64_t v15 = *(void *)this;
  long long v16 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15) {
    (*(void (**)(uint64_t, void *, OpaqueAudioQueue *, AudioQueueBuffer *, const AudioTimeStamp *, uint64_t))(*(void *)v15 + 248))(v15, a2, a3, a4, a5, a6);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_19D829E10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AVVCAudioQueueRecordingEngine::asbdForClientSettings(AVVCAudioQueueRecordingEngine *this, NSDictionary *a2, AudioStreamBasicDescription *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  long long v6 = (*(void (**)(AVVCAudioQueueRecordingEngine *, void))(*(void *)this + 64))(this, 0);
  [v6 speechDetectionDeviceSampleRate];
  double v8 = v7;

  if (v8 != 0.0)
  {
    (*(void (**)(AVVCAudioQueueRecordingEngine *, double))(*(void *)this + 40))(this, v8);
    if (!v5)
    {
      v34[1] = 1;
      UpdateWithHardwareDeviceNumInputChannels(&v34[1]);
      uint64_t v15 = 0;
      unsigned int v16 = v34[1];
      a3->mSampleRate = 16000.0;
      *(_OWORD *)&a3->AudioFormatID mFormatID = xmmword_19D8B1DD0;
      a3->UInt32 mBytesPerFrame = 0;
      a3->unsigned int mChannelsPerFrame = v16;
      *(void *)&a3->UInt32 mBitsPerChannel = 0;
      goto LABEL_63;
    }
    id v10 = (NSDictionary *)[(NSDictionary *)v5 mutableCopy];
    double v33 = 16000.0;
    if (getFloat64ForKey(v10, (NSString *)&v33, (double *)v34, v11))
    {
      double v12 = v33;
      if (v33 < 16000.0)
      {
        if (kAVVCScope)
        {
          uint64_t v13 = *(id *)kAVVCScope;
          if (!v13)
          {
LABEL_31:
            double v33 = 16000.0;
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v13 = MEMORY[0x1E4F14500];
          id v19 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v34[1] = 136315650;
          id v35 = "AVVCAudioQueueRecordingEngine.mm";
          __int16 v36 = 1024;
          int v37 = 301;
          __int16 v38 = 2048;
          double v39 = v12;
          _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d clientRequestedSR was:%.2f, setting to 16000.00", (uint8_t *)&v34[1], 0x1Cu);
        }

        goto LABEL_31;
      }
      if (kAVVCScope)
      {
        int v17 = *(id *)kAVVCScope;
        if (!v17)
        {
LABEL_36:
          uint64_t v21 = objc_msgSend(NSNumber, "numberWithDouble:", v33, *(void *)&v33);
          [(NSDictionary *)v10 setObject:v21 forKeyedSubscript:@"AVSampleRateKey"];

          id v22 = (*(void (**)(AVVCAudioQueueRecordingEngine *, void))(*(void *)this + 64))(this, 0);
          uint64_t v15 = asbdFromSettings(v10, a3, v22, v24, v23);
          v34[0] = v15;
          if (isDarwinOSProduct(void)::onceToken != -1) {
            dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
          }
          if (!isDarwinOSProduct(void)::isDarwinOS || *((void *)this + 34) != 1)
          {
LABEL_46:
            if (!v15)
            {
LABEL_62:

              goto LABEL_63;
            }
            if ((v15 + 199999) > 0x61A7E)
            {
              if (kAVVCScope)
              {
                id v28 = *(id *)kAVVCScope;
                if (!v28) {
                  goto LABEL_62;
                }
              }
              else
              {
                id v28 = MEMORY[0x1E4F14500];
                id v31 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
                goto LABEL_61;
              }
              v34[1] = 136315650;
              id v35 = "AVVCAudioQueueRecordingEngine.mm";
              __int16 v36 = 1024;
              int v37 = 329;
              __int16 v38 = 1024;
              LODWORD(v39) = v15;
              id v30 = "%25s:%-5d ERROR: setupRecordQueue: asbdFromSettings err %{audio:4CC}d";
            }
            else
            {
              if (kAVVCScope)
              {
                id v28 = *(id *)kAVVCScope;
                if (!v28) {
                  goto LABEL_62;
                }
              }
              else
              {
                id v28 = MEMORY[0x1E4F14500];
                id v29 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
                goto LABEL_61;
              }
              v34[1] = 136315650;
              id v35 = "AVVCAudioQueueRecordingEngine.mm";
              __int16 v36 = 1024;
              int v37 = 329;
              __int16 v38 = 1024;
              LODWORD(v39) = v15;
              id v30 = "%25s:%-5d ERROR: setupRecordQueue: asbdFromSettings err %d";
            }
            _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&v34[1], 0x18u);
LABEL_61:

            uint64_t v15 = v34[0];
            goto LABEL_62;
          }
          unsigned int mFormatFlags = a3->mFormatFlags;
          if ((mFormatFlags & 0x20) != 0)
          {
            unsigned int mChannelsPerFrame = 1;
          }
          else
          {
            unsigned int mChannelsPerFrame = a3->mChannelsPerFrame;
            if (!mChannelsPerFrame)
            {
              unsigned int v27 = (a3->mBitsPerChannel + 7) >> 3;
LABEL_45:
              a3->UInt32 mBytesPerFrame = v27;
              a3->unsigned int mChannelsPerFrame = 2;
              a3->mBytesPerPacket = v27;
              a3->mFramesPerPacket = 1;
              a3->unsigned int mFormatFlags = mFormatFlags | 0x20;
              goto LABEL_46;
            }
          }
          unsigned int v27 = a3->mBytesPerFrame / mChannelsPerFrame;
          goto LABEL_45;
        }
      }
      else
      {
        int v17 = MEMORY[0x1E4F14500];
        id v20 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v34[1] = 136315650;
        id v35 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v36 = 1024;
        int v37 = 305;
        __int16 v38 = 2048;
        double v39 = v12;
        _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d clientRequestedSR was:%.2f", (uint8_t *)&v34[1], 0x1Cu);
      }
    }
    else
    {
      if (kAVVCScope)
      {
        int v17 = *(id *)kAVVCScope;
        if (!v17) {
          goto LABEL_36;
        }
      }
      else
      {
        int v17 = MEMORY[0x1E4F14500];
        id v18 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v34[1] = 136315394;
        id v35 = "AVVCAudioQueueRecordingEngine.mm";
        __int16 v36 = 1024;
        int v37 = 309;
        _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d clientRequestedSR was not specified, setting to 16000.00", (uint8_t *)&v34[1], 0x12u);
      }
    }

    goto LABEL_36;
  }
  if (!kAVVCScope)
  {
    id v9 = MEMORY[0x1E4F14500];
    id v14 = MEMORY[0x1E4F14500];
    goto LABEL_12;
  }
  id v9 = *(id *)kAVVCScope;
  if (v9)
  {
LABEL_12:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v34[1] = 136315394;
      id v35 = "AVVCAudioQueueRecordingEngine.mm";
      __int16 v36 = 1024;
      int v37 = 269;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error getting input hardware sample rate", (uint8_t *)&v34[1], 0x12u);
    }
  }
  uint64_t v15 = 4294955511;
LABEL_63:

  return v15;
}

void sub_19D82A430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AVVCAudioQueueRecordingEngine::~AVVCAudioQueueRecordingEngine(AVVCAudioQueueRecordingEngine *this)
{
  AVVCAudioQueueRecordingEngine::~AVVCAudioQueueRecordingEngine(this);

  JUMPOUT(0x19F3ABB30);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unsigned char v5[8];

  *(void *)this = &unk_1EEFA7020;
  TraceMethod::TraceMethod((TraceMethod *)v5, "~AVVCAudioQueueRecordingEngine");
  *((void *)this + 96) = 0;
  BOOL v2 = (void *)*((void *)this + 104);
  *((void *)this + 104) = 0;

  [*((id *)this + 103) stop];
  BOOL v3 = (void *)*((void *)this + 103);
  *((void *)this + 10AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;

  TraceMethod::~TraceMethod((TraceMethod *)v5);
  id v4 = (std::__shared_weak_count *)*((void *)this + 109);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  AVVCRecordingEngine::~AVVCRecordingEngine((AVVCRecordingEngine *)this);
}

void CADeprecated::AudioRingBuffer::~AudioRingBuffer(CADeprecated::AudioRingBuffer *this)
{
  CADeprecated::AudioRingBuffer::~AudioRingBuffer(this);

  JUMPOUT(0x19F3ABB30);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EEFA74C0;
  CADeprecated::AudioRingBuffer::Deallocate(this);
  BOOL v2 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v2) {
    MEMORY[0x19F3ABB30](v2, 0x1080C404ACF7207);
  }
  BOOL v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    MEMORY[0x19F3ABB30](v3, 0x1080C404ACF7207);
  }
}

OpaqueAudioConverter *CADeprecated::AudioRingBuffer::Deallocate(CADeprecated::AudioRingBuffer *this)
{
  BOOL v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    free(v2);
    *((void *)this + 1AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
  }
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  __n128 result = (OpaqueAudioConverter *)*((void *)this + 16);
  if (result)
  {
    __n128 result = (OpaqueAudioConverter *)AudioConverterDispose(result);
    *((void *)this + 16) = 0;
  }
  return result;
}

uint64_t CADeprecated::AudioRingBuffer::ConvertAndStore(uint64_t this, int a2, const AudioBufferList *a3, int a4, UInt32 inNumberPCMFrames)
{
  if (inNumberPCMFrames)
  {
    long long v6 = *(const AudioBufferList **)(this + 96);
    uint64_t mNumberBuffers = v6->mNumberBuffers;
    if (mNumberBuffers)
    {
      UInt32 v8 = *(_DWORD *)(this + 72) * inNumberPCMFrames;
      p_mData = &v6->mBuffers[0].mData;
      id v10 = &a3->mBuffers[0].mData;
      do
      {
        id v11 = (char *)*v10;
        v10 += 2;
        *p_mData = &v11[a4];
        *((_DWORD *)p_mData - 1) = v8;
        p_mData += 2;
        --mNumberBuffers;
      }
      while (mNumberBuffers);
    }
    double v12 = *(AudioBufferList **)(this + 88);
    uint64_t v13 = v12->mNumberBuffers;
    if (v13)
    {
      UInt32 v14 = *(_DWORD *)(this + 32) * inNumberPCMFrames;
      uint64_t v15 = *(uint64_t **)(this + 104);
      unsigned int v16 = &v12->mBuffers[0].mData;
      do
      {
        uint64_t v17 = *v15++;
        *unsigned int v16 = (void *)(v17 + a2);
        *((_DWORD *)v16 - 1) = v14;
        v16 += 2;
        --v13;
      }
      while (v13);
    }
    return AudioConverterConvertComplexBuffer(*(AudioConverterRef *)(this + 128), inNumberPCMFrames, v6, v12);
  }
  return this;
}

uint64_t CADeprecated::AudioRingBuffer::CheckTimeBounds(CADeprecated::AudioRingBuffer *this, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)this + 226);
  id v4 = (char *)this + 24 * (v3 & 0x1F);
  uint64_t v5 = (uint64_t *)(v4 + 136);
  long long v6 = (uint64_t *)(v4 + 144);
  double v7 = v4 + 152;
  int v8 = 8;
  while (1)
  {
    uint64_t v9 = *v5;
    uint64_t v10 = *v6;
    if (*v7 == v3) {
      break;
    }
    if (!--v8) {
      return 4;
    }
  }
  if (v10 > a2) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = 2;
  }
  if (v10 >= a3) {
    unsigned int v12 = 0;
  }
  if (v9 >= a3) {
    int v13 = -2;
  }
  else {
    int v13 = -1;
  }
  if (v10 >= a3) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 3;
  }
  if (v9 > a2) {
    return v14;
  }
  else {
    return v12;
  }
}

uint64_t AVVCHACRecordingEngine::getRecordRoute(uint64_t a1, void **a2)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::getEngineType(AVVCHACRecordingEngine *this)
{
  return 4;
}

uint64_t AVVCHACRecordingEngine::setSessionIsRecordingFlag(AVVCHACRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "setSessionIsRecordingFlag");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCHACRecordingEngine::disposeAudioCaptures(AVVCHACRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::logAudioCaptures()
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::setupAudioCaptures(AVVCHACRecordingEngine *this)
{
  return 0;
}

void AVVCHACRecordingEngine::updateStreamStoppedState(AVVCHACRecordingEngine *this)
{
}

uint64_t AVVCHACRecordingEngine::updateMeterLevels(AVVCHACRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::enableMetering(AVVCHACRecordingEngine *this)
{
  return 0;
}

uint64_t AVVCHACRecordingEngine::enableSiriListeningMode(AVVCHACRecordingEngine *this)
{
  return 0;
}

__n128 AVVCHACRecordingEngine::getRecordQueueFormat@<Q0>(AVVCHACRecordingEngine *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 24);
  long long v3 = *(_OWORD *)((char *)this + 40);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *((void *)this + 7);
  return result;
}

uint64_t AVVCHACRecordingEngine::destroyRecordEngine(AVVCHACRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v4, "destroyRecordingEngine");
  uint64_t v2 = (*(uint64_t (**)(AVVCHACRecordingEngine *))(*(void *)this + 104))(this);
  TraceMethod::~TraceMethod((TraceMethod *)v4);
  return v2;
}

void sub_19D82A8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCHACRecordingEngine::stopRecording(AVVCRecordingEngine *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)&v5, "stopRecording");
  ElapsedTime::ElapsedTime((ElapsedTime *)v6, "stopRecording", "stopRecording : StopIsolatedAudio", 0);
  StopIsolatedAudio();
  ElapsedTime::~ElapsedTime((ElapsedTime *)v6);
  AVVCRecordingEngine::doneRecording(this);
  if (*((unsigned char *)this + 633))
  {
    *((unsigned char *)this + 63AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
    uint64_t v2 = +[AVVoiceTriggerClient sharedInstance];
    id v3 = (id)[v2 activateSecureSession:0];
  }
  *((unsigned char *)this + 632) = 1;
  TraceMethod::~TraceMethod((TraceMethod *)&v5);
  return 0;
}

void sub_19D82A9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TraceMethod::~TraceMethod((TraceMethod *)&a9);
  _Unwind_Resume(a1);
}

uint64_t AVVCHACRecordingEngine::startRecording(AVVCHACRecordingEngine *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v15, "startRecording");
  uint64_t v2 = *((void *)this + 30);
  uint64_t v3 = mach_absolute_time();
  if (v2 > v3)
  {
    if (kAVVCScope)
    {
      id v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_11;
      }
    }
    else
    {
      id v4 = MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      uint64_t v17 = "AVVCHACRecordingEngine.mm";
      __int16 v18 = 1024;
      int v19 = 129;
      __int16 v20 = 2048;
      uint64_t v21 = (const char *)v2;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Recording from future hosttime (%lld) is not supported. Resetting hosttime to 0", buf, 0x1Cu);
    }

    goto LABEL_11;
  }
  if (v2)
  {
    int v5 = 0;
    uint64_t v6 = v2;
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v6 = mach_absolute_time();
  int v5 = 1;
LABEL_12:
  *((void *)this + 78) = v6;
  if (!kAVVCScope)
  {
    int v8 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
LABEL_17:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = "past";
      uint64_t v12 = *((void *)this + 78);
      if (v2 > v3) {
        id v11 = "future";
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      uint64_t v17 = "AVVCHACRecordingEngine.mm";
      __int16 v18 = 1024;
      int v19 = 141;
      if (v5) {
        id v11 = "immediate";
      }
      __int16 v20 = 2080;
      uint64_t v21 = v11;
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC starting HAC record (%s) hosttime (%lld) ", buf, 0x26u);
    }

    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_24;
  }
  int v8 = *(id *)kAVVCScope;
  if (v8) {
    goto LABEL_17;
  }
  if (!v5)
  {
LABEL_15:
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startRecording", "startRecording : StartIsolatedAudioAtTime()", 0);
    uint64_t started = StartIsolatedAudioAtTime();
    goto LABEL_25;
  }
LABEL_24:
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startRecording", "startRecording : StartIsolatedAudio()", 0);
  uint64_t started = StartIsolatedAudio();
LABEL_25:
  uint64_t v13 = started;
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  *((void *)this + 30) = 0;
  if (v13)
  {
    AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, v13, "startRecording");
    AVVCRecordingEngine::setStreamState((uint64_t)this, 3);
  }
  else
  {
    AVVCRecordingEngine::startedRecording((AVVCRecordingEngine *)this);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v15);
  return v13;
}

void sub_19D82AC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCHACRecordingEngine::prepareRecording(AVVCHACRecordingEngine *this, NSDictionary *a2)
{
  TraceMethod::TraceMethod((TraceMethod *)v6, "prepareRecoding");
  if (*((void *)this + 35) == 1684628340)
  {
    *((unsigned char *)this + 63AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1;
    uint64_t v3 = +[AVVoiceTriggerClient sharedInstance];
    id v4 = (id)[v3 activateSecureSession:1];
  }
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)this, 0, "prepareRecording");
  AVVCRecordingEngine::setStreamState((uint64_t)this, 2);
  TraceMethod::~TraceMethod((TraceMethod *)v6);
  return 0;
}

void sub_19D82AD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t AVVCHACRecordingEngine::Initialize(AVVCHACRecordingEngine *this)
{
  TraceMethod::TraceMethod((TraceMethod *)v2, "Initialize");
  TraceMethod::~TraceMethod((TraceMethod *)v2);
  return 0;
}

uint64_t AVVCHACRecordingEngine::asbdForClientSettings(AVVCHACRecordingEngine *this, NSDictionary *a2, CAStreamBasicDescription *a3)
{
  return 0;
}

void AVVCHACRecordingEngine::~AVVCHACRecordingEngine(AVVCHACRecordingEngine *this)
{
  AVVCHACRecordingEngine::~AVVCHACRecordingEngine(this);

  JUMPOUT(0x19F3ABB30);
}

{
  void *v2;
  unsigned char v3[8];

  *(void *)this = &unk_1EEFA2D60;
  TraceMethod::TraceMethod((TraceMethod *)v3, "~AVVCHACRecordingEngine");
  uint64_t v2 = (void *)*((void *)this + 77);
  *((void *)this + 77) = 0;

  *((void *)this + 76) = 0;
  TraceMethod::~TraceMethod((TraceMethod *)v3);

  AVVCRecordingEngine::~AVVCRecordingEngine((AVVCRecordingEngine *)this);
}

void AVVCHACRecordingEngine::Impl::AVVCHACRecordingEngineAudioLapseCallback(AVVCHACRecordingEngine::Impl *this, uint64_t a2, void *a3)
{
  int v3 = (int)this;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v9, *(void *)(a2 + 8), *(std::__shared_weak_count **)(a2 + 16));
  uint64_t v4 = v9;
  int v5 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3321888768;
  void v6[2] = ___ZN22AVVCHACRecordingEngine16handleAudioLapseEi_block_invoke;
  v6[3] = &__block_descriptor_52_ea8_32c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
  v6[4] = v4;
  id v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = v3;
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v4 + 368))(v4, v6, "handleAudioLapse");
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_19D82AF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  __int16 v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22AVVCHACRecordingEngine16handleAudioLapseEi_block_invoke(uint64_t a1)
{
  *(void *)&v20[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (v4)
      {
        if (kAVVCScope)
        {
          id v5 = *(id *)kAVVCScope;
          if (!v5)
          {
LABEL_24:
            uint64_t v13 = *(void *)(v4 + 224);
            if (v13 >= 4 && v13 != 6)
            {
              AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v4, *(_DWORD *)(a1 + 48), "handleAudioLapse_block_invoke");
              (*(void (**)(uint64_t))(*(void *)v4 + 104))(v4);
              AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v4, 0, "handleAudioLapse_block_invoke");
            }
            goto LABEL_29;
          }
        }
        else
        {
          id v5 = (id)MEMORY[0x1E4F14500];
          id v8 = MEMORY[0x1E4F14500];
        }
        uint64_t v9 = v5;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          int v10 = *(_DWORD *)(a1 + 48);
          unint64_t v11 = *(void *)(v4 + 224);
          if (v11 > 6) {
            uint64_t v12 = "ILLEGAL";
          }
          else {
            uint64_t v12 = off_1E59657E8[v11];
          }
          int v15 = 136315906;
          uint64_t v16 = "AVVCHACRecordingEngine.mm";
          __int16 v17 = 1024;
          int v18 = 277;
          __int16 v19 = 1024;
          v20[0] = v10;
          LOWORD(v20[1]) = 2080;
          *(void *)((char *)&v20[1] + 2) = v12;
          _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCHACRecordingEngine::handleAudioLapse: status(%d) streamState(%s)", (uint8_t *)&v15, 0x22u);
        }

        goto LABEL_24;
      }
    }
  }
  else
  {
    int v3 = 0;
  }
  if (kAVVCScope)
  {
    uint64_t v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v15 = 136315650;
    uint64_t v16 = "AVVCHACRecordingEngine.mm";
    __int16 v17 = 1024;
    int v18 = 276;
    __int16 v19 = 2048;
    *(void *)__int16 v20 = 0;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (engine: %p). Bailing", (uint8_t *)&v15, 0x1Cu);
  }

LABEL_15:
  if (v3) {
LABEL_29:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D82B220(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AVVCHACRecordingEngine::Impl::AVVCHACRecordingEngineAudioAvailabilityCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a3 + 632))
  {
    LODWORD(v32) = 4108;
    BYTE4(v32) = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    kdebug_trace();
    uint64_t v6 = mach_absolute_time();
    uint64_t v7 = *(void *)(a3 + 624);
    uint64_t v8 = __udivti3();
    if (a1 >= v7) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = -v8;
    }
    uint64_t v10 = __udivti3();
    if (v6 >= v7) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = -v10;
    }
    if (kAVVCScope)
    {
      id v12 = *(id *)kAVVCScope;
      if (!v12)
      {
LABEL_19:
        TraceWrapper::~TraceWrapper((TraceWrapper *)&v32);
        goto LABEL_24;
      }
    }
    else
    {
      id v12 = (id)MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    int v15 = v12;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *(void *)(a3 + 8), *(std::__shared_weak_count **)(a3 + 16));
      *(_DWORD *)AudioStreamBasicDescription buf = 136317186;
      uint64_t v16 = *(void *)(a3 + 624);
      *(void *)&uint8_t buf[4] = "AVVCHACRecordingEngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 223;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v30;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = v6;
      *(_WORD *)&buf[38] = 2048;
      uint64_t v36 = a1;
      *(_WORD *)int v37 = 2048;
      *(void *)&v37[2] = a2;
      *(_WORD *)&v37[10] = 2048;
      uint64_t v38 = v16;
      __int16 v39 = 2048;
      double v40 = (double)v11 / 1000000.0;
      __int16 v41 = 2048;
      double v42 = (double)v9 / 1000000.0;
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HAC (%p) - First callback -  Now:(ht: %lld), BuffStartTime:(ht: %lld st: %lld), SiriRequestedStartTime:(ht: %lld). Now-SiriRequestedStartTime: %0.6f ms, BuffStartTime-SiriRequestedStartTime: %0.6f ms.", buf, 0x58u);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }

    goto LABEL_19;
  }
  if (kAVVCScope)
  {
    uint64_t v13 = *(id *)kAVVCScope;
    if (!v13) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4F14500];
    id v17 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    *(void *)&uint8_t buf[4] = "AVVCHACRecordingEngine.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 226;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = a1;
    *(_WORD *)&unsigned char buf[28] = 2048;
    *(void *)&buf[30] = a2;
    _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d timestamp received (h: %lld, s: %lld)", buf, 0x26u);
  }

LABEL_24:
  uint64_t v18 = *(void *)(a3 + 224);
  if ((v18 == 6 || v18 <= 3) && !*(unsigned char *)(a3 + 253))
  {
    if (kAVVCScope)
    {
      id v24 = *(id *)kAVVCScope;
      if (!v24)
      {
LABEL_58:
        *(unsigned char *)(a3 + 632) = 0;
        return;
      }
    }
    else
    {
      id v24 = (id)MEMORY[0x1E4F14500];
      id v25 = MEMORY[0x1E4F14500];
    }
    OSStatus v26 = v24;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v27 = *(void *)(a3 + 224);
      if (v27 > 6) {
        id v28 = "ILLEGAL";
      }
      else {
        id v28 = off_1E59657E8[v27];
      }
      int v29 = *(unsigned __int8 *)(a3 + 253);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
      *(void *)&uint8_t buf[4] = "AVVCHACRecordingEngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 231;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v28;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v29;
      _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d record internally stopped, so throwing away buffer. StreamState(%s). RecordCancelled(%d)", buf, 0x22u);
    }

    goto LABEL_58;
  }
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "handleInput", "AVVCHACRecordingEngine : RequestIsolatedAudio", *(unsigned char *)(a3 + 632) == 0);
  if (*(unsigned char *)(a3 + 632)) {
    *(unsigned char *)(a3 + 632) = 0;
  }
  int v19 = RequestIsolatedAudio();
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
  if (!v19)
  {
    [*(id *)(a3 + 616) setTimeStamp:a1];
    AVVCRecordingEngine::avvcAudioBufferReceived((AVVCRecordingEngine *)a3, *(AVVCAudioBuffer **)(a3 + 616), 1, 1);
    return;
  }
  if (!kAVVCScope)
  {
    __int16 v20 = MEMORY[0x1E4F14500];
    id v21 = MEMORY[0x1E4F14500];
    goto LABEL_35;
  }
  __int16 v20 = *(id *)kAVVCScope;
  if (v20)
  {
LABEL_35:
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "AVVCHACRecordingEngine.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 248;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v19;
      _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVCHACRecordingEngine::handleInput request error: %d", buf, 0x18u);
    }
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v32, *(void *)(a3 + 8), *(std::__shared_weak_count **)(a3 + 16));
  uint64_t v22 = v32;
  uint64_t v23 = (std::__shared_weak_count *)v33;
  if ((void)v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)AudioStreamBasicDescription buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3321888768;
  *(void *)&uint8_t buf[16] = ___ZN22AVVCHACRecordingEngine11handleInputE18CoreAudioTimestamp_block_invoke;
  *(void *)&buf[24] = &__block_descriptor_60_ea8_40c44_ZTSNSt3__18weak_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
  *(void *)&uint8_t buf[32] = a3;
  uint64_t v36 = v22;
  *(void *)int v37 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)&v37[8] = v19;
  (*(void (**)(uint64_t, unsigned char *, const char *))(*(void *)v22 + 368))(v22, buf, "handleInput");
  if (*(void *)v37) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v37);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  if ((void)v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33);
  }
}

void sub_19D82B7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a12);
  _Unwind_Resume(a1);
}

void ___ZN22AVVCHACRecordingEngine11handleInputE18CoreAudioTimestamp_block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
  {
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  int v3 = *(AVVCRecordingEngine **)(a1 + 32);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4 || (id v5 = *(AVVCRecordingEngine **)(a1 + 40)) == 0)
  {
LABEL_10:
    if (kAVVCScope)
    {
      uint64_t v8 = *(id *)kAVVCScope;
      if (!v8) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315650;
      uint64_t v11 = "AVVCHACRecordingEngine.mm";
      __int16 v12 = 1024;
      int v13 = 253;
      __int16 v14 = 2048;
      uint64_t v15 = 0;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (engine: %p). Bailing", (uint8_t *)&v10, 0x1Cu);
    }

LABEL_17:
    if (!v4) {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v6 = *((void *)v5 + 28);
  if (v6 >= 4 && v6 != 6)
  {
    AVVCRecordingEngine::setRecordErrorStatus(v3, *(_DWORD *)(a1 + 56), "handleInput_block_invoke");
    (*(void (**)(AVVCRecordingEngine *))(*(void *)v5 + 104))(v5);
    AVVCRecordingEngine::setRecordErrorStatus(v5, 0, "handleInput_block_invoke");
  }
LABEL_18:
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_19D82B9C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AVVCHACRecordingEngine::AVVCHACRecordingEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  AVVCRecordingEngine::AVVCRecordingEngine(a1, a2);
}

void sub_19D82BC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a10);
  TraceMethod::~TraceMethod((TraceMethod *)&a9);

  AVVCRecordingEngine::~AVVCRecordingEngine((AVVCRecordingEngine *)v10);
  _Unwind_Resume(a1);
}

void sub_19D82BE50(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19D82BF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___Z36_AVLoadSpeechSynthesisImplementationv_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F28B50] bundleWithPath:@"/System/Library/PrivateFrameworks/TextToSpeech.framework"];
  if (([v0 isLoaded] & 1) == 0)
  {
    id v3 = 0;
    int v1 = [v0 loadAndReturnError:&v3];
    id v2 = v3;
    if (v1) {
      objc_msgSend((id)objc_msgSend(v0, "principalClass"), "initialize");
    }
    if (v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 138412290;
        id v5 = v2;
        _os_log_fault_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Could not load AXSpeechImplementation: %@", buf, 0xCu);
      }
    }
  }
}

void sub_19D82C118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D82C32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D82C5B4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19D82C7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19D82CB0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19D82CCEC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19D82CE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::donePlaying(uint64_t this)
{
  if (*(unsigned char *)(this + 314))
  {
    *(_OWORD *)(this + 320) = 0u;
    *(_OWORD *)(this + 336) = 0u;
  }
  if (*(_DWORD *)(this + 308))
  {
    *(_DWORD *)(this + 308) = 0;
    *(unsigned char *)(this + 305) = 0;
    if (*(void *)(this + 488))
    {
      int v1 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(this + 496);
      if (v1) {
        return v1(*(void *)(this + 488), 1685024357, 1, this + 440);
      }
    }
  }
  return this;
}

OpaqueAudioQueue *AVAudioPlayerCpp::disposeQueue(AVAudioPlayerCpp *this, int a2)
{
  __n128 result = (OpaqueAudioQueue *)*((void *)this + 22);
  if (result)
  {
    AudioQueueRemovePropertyListener(result, 0x6171726Eu, (AudioQueuePropertyListenerProc)AudioPlayerAQPropertyListenerProc, this);
    AudioQueueRemovePropertyListener(*((AudioQueueRef *)this + 22), 0x71637665u, (AudioQueuePropertyListenerProc)AudioPlayerAQPropertyListenerProc, this);
    *((unsigned char *)this + 312) = 1;
    __dmb(0xBu);
    id v5 = (OpaqueAudioQueue *)*((void *)this + 22);
    *((void *)this + 22) = 0;
    *((void *)this + 50) = 0;
    *((void *)this + 51) = 0;
    *((void *)this + 49) = 0;
    __dmb(0xBu);
    *((unsigned char *)this + 315) = 0;
    *((_WORD *)this + 152) = 0;
    *((_DWORD *)this + 77) = 0;
    *((unsigned char *)this + 307) = 0;
    *((unsigned char *)this + 312) = 0;
    *((void *)this + 40) = 0;
    *((void *)this + 42) = 0;
    __dmb(0xBu);
    pthread_mutex_unlock(&avap_mutex);
    if (a2) {
      AudioQueueStop(v5, 1u);
    }
    AudioQueueDispose(v5, 0);
    return (OpaqueAudioQueue *)pthread_mutex_lock(&avap_mutex);
  }
  return result;
}

void sub_19D82D084(_Unwind_Exception *a1)
{
}

void AVAudioPlayerCpp::freeChannelAssignments(AVAudioPlayerCpp *this)
{
  id v2 = (void *)*((void *)this + 66);
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)this + 130);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(const void **)(*((void *)this + 66) + v4);
        if (v6)
        {
          CFRelease(v6);
          unint64_t v3 = *((unsigned int *)this + 130);
        }
        v4 += 16;
      }
      id v2 = (void *)*((void *)this + 66);
    }
    free(v2);
    *((void *)this + 66) = 0;
  }
}

uint64_t AudioPlayerAQPropertyListenerProc(uint64_t a1, OpaqueAudioQueue *a2, int a3)
{
  pthread_mutex_lock(&avap_mutex);
  if (a3 == 1902343781)
  {
    if (*(void *)(a1 + 488))
    {
      if (*(void *)(a1 + 496))
      {
        UInt32 ioDataSize = 4;
        int outData = 0;
        if (!AudioQueueGetProperty(a2, 0x71637665u, &outData, &ioDataSize)) {
          (*(void (**)(void, uint64_t, uint64_t, int *))(a1 + 496))(*(void *)(a1 + 488), 1684370034, 4, &outData);
        }
      }
    }
  }
  else if (a3 == 1634824814 && !*(unsigned char *)(a1 + 443))
  {
    UInt32 ioDataSize = 4;
    int outData = 0;
    AudioQueueGetProperty(*(AudioQueueRef *)(a1 + 176), 0x6171726Eu, &outData, &ioDataSize);
    if (!outData && !*(unsigned char *)(a1 + 460)) {
      AVAudioPlayerCpp::donePlaying(a1);
    }
  }
  return pthread_mutex_unlock(&avap_mutex);
}

void sub_19D82D210(_Unwind_Exception *a1)
{
}

uint64_t AVAudioPlayerCpp::DoAction(AudioQueueRef *this, int a2, uint64_t a3, double *a4)
{
  uint64_t v5 = 560030580;
  if (a2 <= 1886545263)
  {
    if (a2 != 1885435251)
    {
      if (a2 == 1886151028)
      {
        if (a3 == 8)
        {
          double v6 = *a4;
          v13.uint64_t mSampleTime = 0.0;
          memset(&v13.mRateScalar, 0, 48);
          v13.UInt64 mHostTime = (unint64_t)(v6 * 24000000.0);
          v13.mFlags = 2;
          pthread_mutex_lock(&avap_mutex);
          uint64_t v5 = AVAudioPlayerCpp::playQueue((AVAudioPlayerCpp *)this, &v13);
          pthread_mutex_unlock(&avap_mutex);
          return v5;
        }
      }
      else
      {
        if (a2 != 1886151033) {
          return v5;
        }
        if (!a3)
        {
          pthread_mutex_lock(&avap_mutex);
          if (*((unsigned char *)this + 460))
          {
            AudioSessionSetActive_Priv();
            AVAudioPlayerCpp::disposeQueue((AVAudioPlayerCpp *)this, 1);
            *((_WORD *)this + 230) = 0;
          }
          uint64_t v5 = AVAudioPlayerCpp::playQueue((AVAudioPlayerCpp *)this, 0);
          pthread_mutex_unlock(&avap_mutex);
          return v5;
        }
      }
      return 561211770;
    }
    if (a3) {
      return 561211770;
    }
    pthread_mutex_lock(&avap_mutex);
    if (*((unsigned char *)this + 307))
    {
      AVAudioPlayerCpp::getQueueTime((AVAudioPlayerCpp *)this, 1);
      AudioQueuePause(this[22]);
      *((_DWORD *)this + 77) = 0;
      *((unsigned char *)this + 307) = 0;
    }
    pthread_mutex_unlock(&avap_mutex);
    return 0;
  }
  if (a2 == 1970302324)
  {
    if (a3) {
      return 561211770;
    }
    if (*((unsigned char *)this + 313)) {
      return 0;
    }
    pthread_mutex_lock(&avap_mutex);
    uint64_t v7 = *((unsigned int *)this + 15);
    uint64_t v8 = this[48];
    if (!v8)
    {
      uint64_t v8 = (OpaqueAudioQueue *)malloc_type_calloc(*((unsigned int *)this + 15), 8uLL, 0x100004000313F17uLL);
      this[48] = v8;
    }
    id v9 = this[22];
    if (v9 && *((_DWORD *)this + 94))
    {
      LODWORD(v13.mSampleTime) = 8 * v7;
      if (!AudioQueueGetProperty(v9, 0x61716D64u, v8, (UInt32 *)&v13) || !v7) {
        goto LABEL_39;
      }
      AudioQueueRef v10 = this[48];
      size_t v11 = 8 * v7;
    }
    else
    {
      if (!v7)
      {
LABEL_39:
        pthread_mutex_unlock(&avap_mutex);
        return 0;
      }
      size_t v11 = 8 * v7;
      AudioQueueRef v10 = v8;
    }
    memset_pattern16(v10, &unk_19D8B1E80, v11);
    goto LABEL_39;
  }
  if (a2 == 1937010544)
  {
    if (a3) {
      return 561211770;
    }
    pthread_mutex_lock(&avap_mutex);
    if (*((unsigned char *)this + 305))
    {
      AVAudioPlayerCpp::getQueueTime((AVAudioPlayerCpp *)this, 1);
      this[43] = this[41];
    }
    AVAudioPlayerCpp::disposeQueue((AVAudioPlayerCpp *)this, 1);
    pthread_mutex_unlock(&avap_mutex);
    return 0;
  }
  if (a2 != 1886545264) {
    return v5;
  }
  if (a3) {
    return 561211770;
  }
  pthread_mutex_lock(&avap_mutex);
  if (*((unsigned char *)this + 460))
  {
    AudioSessionSetActive_Priv();
    AVAudioPlayerCpp::disposeQueue((AVAudioPlayerCpp *)this, 1);
    *((_WORD *)this + 230) = 0;
  }
  uint64_t v5 = AVAudioPlayerCpp::prepareToPlayQueue((AVAudioPlayerCpp *)this);
  pthread_mutex_unlock(&avap_mutex);
  return v5;
}

void sub_19D82D530(_Unwind_Exception *a1)
{
}

double AVAudioPlayerCpp::getQueueTime(AVAudioPlayerCpp *this, int a2)
{
  unint64_t v3 = (OpaqueAudioQueue *)*((void *)this + 22);
  if (v3)
  {
    if (*((unsigned char *)this + 307))
    {
      if (!AudioQueueGetCurrentTime(v3, 0, &v12, 0))
      {
        double mSampleTime = v12.mSampleTime;
        *((void *)this + 40) = *(void *)&v12.mSampleTime;
        if (a2)
        {
          double v6 = *((double *)this + 43);
          double v7 = fmax(mSampleTime - *((double *)this + 42) + v6, 0.0);
          *((double *)this + 41) = v7;
          if (*((unsigned char *)this + 463))
          {
            double v8 = (double)*((uint64_t *)this + 58);
            *((long double *)this + 4AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = fmod(fmax(v6, 0.0), v8);
            if (*((_DWORD *)this + 74) || v6 >= v8)
            {
              double v10 = fmod(v7, v8);
            }
            else
            {
              if (v7 <= v8) {
                double v9 = v7;
              }
              else {
                double v9 = v8;
              }
              double v10 = fmax(v9, 0.0);
            }
            *((double *)this + 41) = v10;
          }
        }
      }
    }
  }
  return *((double *)this + 40);
}

uint64_t AVAudioPlayerCpp::playQueue(AVAudioPlayerCpp *this, const AudioTimeStamp *a2)
{
  if (*((unsigned char *)this + 307)) {
    return 0;
  }
  if (*((unsigned char *)this + 305))
  {
    double v5 = *((double *)this + 42);
    Queueuint64_t Time = AVAudioPlayerCpp::getQueueTime(this, 0);
    *((double *)this + 42) = QueueTime;
    if (!*((unsigned char *)this + 306))
    {
      double v7 = QueueTime - v5 + *((double *)this + 43);
      *((double *)this + 4AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v7;
      *((double *)this + 41) = v7;
    }
  }
  uint64_t v2 = AVAudioPlayerCpp::prepareToPlayQueue(this);
  if (!v2)
  {
    *((unsigned char *)this + 306) = 0;
    AudioQueueParameterValue v8 = *((double *)this + 26);
    AudioQueueSetParameter(*((AudioQueueRef *)this + 22), 1u, v8);
    AudioQueueParameterValue v9 = *((double *)this + 29);
    AudioQueueSetParameter(*((AudioQueueRef *)this + 22), 0xDu, v9);
    AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x715F7470u, (char *)this + 240, 4u);
    if (*((_DWORD *)this + 60))
    {
      int inData = 1953064047;
      AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x71747061u, &inData, 4u);
      AudioQueueParameterValue v10 = *((double *)this + 28);
      AudioQueueSetParameter(*((AudioQueueRef *)this + 22), 2u, v10);
    }
    *((unsigned char *)this + 305) = 1;
    *((_DWORD *)this + 77) = 1;
    *((unsigned char *)this + 307) = 1;
    unsigned int v11 = atomic_load((unsigned int *)this + 106);
    pthread_mutex_unlock(&avap_mutex);
    uint64_t v2 = AudioQueueStart(*((AudioQueueRef *)this + 22), a2);
    pthread_mutex_lock(&avap_mutex);
    if (v2)
    {
      *((unsigned char *)this + 305) = 0;
      *((_DWORD *)this + 77) = 0;
      *((unsigned char *)this + 307) = 0;
      return v2;
    }
    if (!v11) {
      AVAudioPlayerCpp::flushQueue((uint64_t)this);
    }
    return 0;
  }
  return v2;
}

void sub_19D82D844(_Unwind_Exception *a1)
{
}

uint64_t AVAudioPlayerCpp::prepareToPlayQueue(AVAudioPlayerCpp *this)
{
  uint64_t v2 = AVAudioPlayerCpp::allocAudioQueue(this);
  if (!v2)
  {
    *((void *)this + 41) = *((void *)this + 43);
    if (*((unsigned char *)this + 304))
    {
      return 0;
    }
    else
    {
      if (*((_DWORD *)this + 10) != 1819304813)
      {
        ioDataSize[0] = 4;
        ioDataSize[1] = 0;
        AudioQueueGetProperty(*((AudioQueueRef *)this + 22), 0x6171726Eu, &ioDataSize[1], ioDataSize);
        if (!ioDataSize[1])
        {
          while (1)
          {
            int v9 = *((_DWORD *)this + 10);
            *(void *)UInt32 ioDataSize = 0;
            FindCodecs(v9, &ioDataSize[1], ioDataSize, v4, v5);
            if (!ioDataSize[1])
            {
LABEL_34:
              uint64_t v18 = (OpaqueAudioQueue *)*((void *)this + 22);
              ioDataSize[1] = 1;
              AudioQueueSetProperty(v18, 0x61716370u, &ioDataSize[1], 4u);
              goto LABEL_7;
            }
            UInt32 outNumberOfFramesPrepared = 0;
            if (!AudioQueuePrime(*((AudioQueueRef *)this + 22), 0, &outNumberOfFramesPrepared)) {
              break;
            }
            int v12 = *((_DWORD *)this + 10);
            *(void *)UInt32 ioDataSize = 0;
            FindCodecs(v12, &ioDataSize[1], ioDataSize, v10, v11);
            if (!ioDataSize[1] || ioDataSize[0]) {
              goto LABEL_34;
            }
            if (!*((void *)this + 18) || *((_DWORD *)this + 38) >= *((_DWORD *)this + 34)) {
              return 1718449215;
            }
            AVAudioPlayerCpp::disposeQueue(this, 0);
            uint64_t v13 = *((void *)this + 18);
            unsigned int v14 = *((_DWORD *)this + 38) + 1;
            *((_DWORD *)this + 38) = v14;
            uint64_t v15 = (long long *)(v13 + 48 * v14);
            long long v17 = *v15;
            long long v16 = v15[1];
            *((void *)this + 8) = *((void *)v15 + 4);
            *((_OWORD *)this + 2) = v17;
            *((_OWORD *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v16;
            AVAudioPlayerCpp::allocAudioQueue(this);
          }
          pthread_mutex_unlock(&avap_mutex);
          AudioQueueReset(*((AudioQueueRef *)this + 22));
          pthread_mutex_lock(&avap_mutex);
        }
      }
LABEL_7:
      if (!*((unsigned char *)this + 305) && !*((unsigned char *)this + 444)) {
        AVAudioPlayerCpp::setPlaybackFramePos(this, vcvtmd_s64_f64(*((double *)this + 41)), 1);
      }
      if (!*((unsigned char *)this + 460)) {
        *((_DWORD *)this + 75) = 0;
      }
      *((void *)this + 52) = 0;
      *((_DWORD *)this + 64) = 0;
      *((_WORD *)this + 157) = 256;
      atomic_store(0, (unsigned int *)this + 106);
      uint64_t v6 = *((void *)this + 2);
      *((_WORD *)this + 220) = 1;
      *((void *)this + 24) = *((void *)this + 23);
      *((unsigned char *)this + 442) = 1;
      if (v6) {
        AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x716C646Eu, (char *)this + 16, 8u);
      }
      uint64_t v7 = 392;
      while (1)
      {
        atomic_fetch_add((atomic_uint *volatile)this + 106, 1u);
        AVAudioPlayerCpp::AQOutputCallbackCore((uint64_t)this, *((AudioQueueRef *)this + 22), *(AudioQueueBufferRef *)((char *)this + v7));
        if (*((_DWORD *)this + 64))
        {
          *((unsigned char *)this + 442) = 0;
          AVAudioPlayerCpp::disposeQueue(this, 0);
          return *((unsigned int *)this + 64);
        }
        if (!atomic_load((unsigned int *)this + 106))
        {
          *(_WORD *)((char *)this + 441) = 0;
          AVAudioPlayerCpp::disposeQueue(this, 0);
          return 2003334207;
        }
        if (*((unsigned char *)this + 314)) {
          break;
        }
        v7 += 8;
        if (v7 == 416) {
          goto LABEL_23;
        }
      }
      *((void *)this + 56) = *(void *)((char *)this + v7);
LABEL_23:
      *((unsigned char *)this + 442) = 0;
      ioDataSize[1] = 1024;
      uint64_t v2 = AudioQueuePrime(*((AudioQueueRef *)this + 22), 0, &ioDataSize[1]);
      if (v2)
      {
        AVAudioPlayerCpp::disposeQueue(this, 0);
      }
      else
      {
        *((unsigned char *)this + 304) = 1;
        if (*((unsigned char *)this + 305)) {
          *((double *)this + 42) = AVAudioPlayerCpp::getQueueTime(this, 0);
        }
      }
    }
  }
  return v2;
}

void sub_19D82DB58(_Unwind_Exception *a1)
{
}

uint64_t AVAudioPlayerCpp::flushQueue(uint64_t this)
{
  if (!*(unsigned char *)(this + 312))
  {
    uint64_t v1 = this;
    AudioQueueFlush(*(AudioQueueRef *)(this + 176));
    *(unsigned char *)(v1 + 312) = 1;
    __dmb(0xBu);
    pthread_mutex_unlock(&avap_mutex);
    AudioQueueStop(*(AudioQueueRef *)(v1 + 176), 0);
    return pthread_mutex_lock(&avap_mutex);
  }
  return this;
}

void sub_19D82DBD8(_Unwind_Exception *a1)
{
}

uint64_t AVAudioPlayerCpp::allocAudioQueue(AVAudioPlayerCpp *this)
{
  uint64_t v1 = (AudioQueueRef *)((char *)this + 176);
  if (!*((void *)this + 22))
  {
    pthread_once(&gHaveInitializedAVAudio, (void (*)(void))initAVAudio);
    AudioSessionSetActive_Priv();
    pthread_mutex_unlock(&avap_mutex);
    uint64_t v2 = AudioQueueNewOutputWithAudioSession();
    pthread_mutex_lock(&avap_mutex);
    if (v2) {
      return v2;
    }
    if (*((void *)this + 46) && *v1) {
      AudioQueueSetProperty(*v1, 0x61716364u, (char *)this + 368, 8u);
    }
    uint64_t v4 = (void *)*((void *)this + 64);
    if (v4) {
      AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x6171636Cu, (const void *)[*((id *)this + 64) layout], objc_msgSend(v4, "layoutSize"));
    }
    AVAudioPlayerCpp::makeChannelAssignments(this);
    double v5 = *((double *)this + 4);
    unsigned int v7 = *((_DWORD *)this + 13);
    int v6 = *((_DWORD *)this + 14);
    if (v7 <= 1) {
      unsigned int v7 = 1;
    }
    double v8 = v5 / (double)v7;
    *((_DWORD *)this + 120) = vcvtpd_u64_f64(((double)*((int *)this + 68) / v5 + 0.025) * v8);
    if (v6)
    {
      UInt32 v9 = v6 * vcvtmd_u64_f64(v5 * 0.333 + 0.5);
      *((_DWORD *)this + 119) = v6 * v7;
      goto LABEL_22;
    }
    unsigned int v10 = *((_DWORD *)this + 12);
    if (v10)
    {
      *((_DWORD *)this + 119) = v10;
    }
    else
    {
      UInt32 ioDataSize = 4;
      if (AudioFileGetProperty(*((AudioFileID *)this + 20), 0x706B7562u, &ioDataSize, (char *)this + 476))
      {
        UInt32 v9 = 0x8000;
        goto LABEL_22;
      }
      unsigned int v10 = *((_DWORD *)this + 119);
    }
    unsigned int v11 = vcvtmd_u64_f64(v8 * 0.333 * (double)v10 + 0.5);
    if (v10 <= v11) {
      unsigned int v10 = v11;
    }
    if (v10 <= 0x400) {
      UInt32 v9 = 1024;
    }
    else {
      UInt32 v9 = v10;
    }
LABEL_22:
    int v12 = *((_DWORD *)this + 12);
    uint64_t v13 = (void *)((char *)this + 392);
    for (uint64_t i = 392; i != 416; i += 8)
    {
      uint64_t v15 = (OpaqueAudioQueue *)*((void *)this + 22);
      if (v12) {
        uint64_t Buffer = AudioQueueAllocateBuffer(v15, v9, (AudioQueueBufferRef *)((char *)this + i));
      }
      else {
        uint64_t Buffer = AudioQueueAllocateBufferWithPacketDescriptions(v15, v9, 0x200u, (AudioQueueBufferRef *)((char *)this + i));
      }
      uint64_t v2 = Buffer;
      if (Buffer)
      {
        int v19 = *v1;
        *uint64_t v1 = 0;
        v13[1] = 0;
        id v13[2] = 0;
        *uint64_t v13 = 0;
        __dmb(0xBu);
        pthread_mutex_unlock(&avap_mutex);
        AudioQueueDispose(v19, 1u);
        pthread_mutex_lock(&avap_mutex);
        return v2;
      }
    }
    AudioQueueAddPropertyListener(*((AudioQueueRef *)this + 22), 0x6171726Eu, (AudioQueuePropertyListenerProc)AudioPlayerAQPropertyListenerProc, this);
    AudioQueueAddPropertyListener(*((AudioQueueRef *)this + 22), 0x71637665u, (AudioQueuePropertyListenerProc)AudioPlayerAQPropertyListenerProc, this);
    if (*((_DWORD *)this + 94))
    {
      int inData = 1;
      AudioQueueSetProperty(*v1, 0x61716D65u, &inData, 4u);
    }
    if (*((void *)this + 61))
    {
      long long v17 = (void (*)(void))*((void *)this + 62);
      if (v17) {
        v17();
      }
    }
    uint64_t v18 = (const void *)*((void *)this + 16);
    if (v18) {
      AudioQueueSetProperty(*((AudioQueueRef *)this + 22), 0x61716D63u, v18, *((_DWORD *)this + 30));
    }
    if (*((void *)this + 67)) {
      AVAudioPlayerCpp::applySTSLabelToQueueIfPossible(this);
    }
  }
  return 0;
}

void sub_19D82DF3C(_Unwind_Exception *a1)
{
}

double AVAudioPlayerCpp::setPlaybackFramePos(AVAudioPlayerCpp *this, uint64_t a2, int a3)
{
  uint64_t v3 = a2;
  if (a3 && *((unsigned char *)this + 463) && *((void *)this + 58) - a2 < *((unsigned int *)this + 13)) {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *((unsigned int *)this + 13);
  uint64_t v6 = v3 / v5;
  *((void *)this + 2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v3 / v5;
  uint64_t v7 = *((int *)this + 68) + (uint64_t)(int)(v3 % v5);
  *((void *)this + 35) = v7;
  if (*((_DWORD *)this + 28))
  {
    if (v6 >= 1)
    {
      uint64_t outPropertyData = v6;
      UInt32 ioDataSize = 16;
      OSStatus Property = AudioFileGetProperty(*((AudioFileID *)this + 20), 0x706B726Cu, &ioDataSize, &outPropertyData);
      uint64_t v7 = *((void *)this + 35);
      if (!Property)
      {
        uint64_t v9 = v13;
        *((void *)this + 23) -= v13;
        v7 += v9 * *((unsigned int *)this + 13);
        *((void *)this + 35) = v7;
      }
    }
  }
  *((void *)this + 36) = v7;
  double result = (double)v3;
  *((double *)this + 4AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = (double)v3;
  return result;
}

uint64_t AVAudioPlayerCpp::AQOutputCallbackCore(uint64_t this, AudioQueueRef inAQ, AudioQueueBufferRef inBuffer)
{
  if (!*(unsigned char *)(this + 312))
  {
    if (inBuffer)
    {
      uint64_t v5 = this;
      if (*(AudioQueueRef *)(this + 176) == inAQ)
      {
        uint64_t v6 = 0;
        atomic_fetch_add((atomic_uint *volatile)(this + 424), 0xFFFFFFFF);
        *(_DWORD *)(this + 256) = 0;
        while (*(AudioQueueBufferRef *)(this + 8 * v6 + 392) != inBuffer)
        {
          if (++v6 == 3)
          {
            LODWORD(v6) = 0;
            break;
          }
        }
        if (!*(unsigned char *)(this + 314)
          || *(AudioQueueBufferRef *)(this + 416) != inBuffer
          || (*(void *)(this + 416) = 0,
              this = AVAudioPlayerCpp::loopLogic((AVAudioPlayerCpp *)this),
              (this & 1) == 0))
        {
          if (!*(unsigned char *)(v5 + 441))
          {
            unsigned int v8 = *(_DWORD *)(v5 + 48);
            if (v8)
            {
              while (1)
              {
                mAudioDataBytesCapacitfloat y = inBuffer->mAudioDataBytesCapacity;
                UInt32 v10 = inBuffer->mAudioDataBytesCapacity / v8;
                UInt32 ioNumPackets = v10;
                UInt32 ioNumBytes = mAudioDataBytesCapacity;
                if (*(unsigned char *)(v5 + 444) && *(_DWORD *)(v5 + 480) < v10) {
                  UInt32 ioNumPackets = *(_DWORD *)(v5 + 480);
                }
                this = AudioFileReadPacketData(*(AudioFileID *)(v5 + 160), 0, &ioNumBytes, 0, *(void *)(v5 + 184), &ioNumPackets, inBuffer->mAudioData);
                int v11 = this;
                if (this != -39)
                {
                  if (this) {
                    break;
                  }
                }
                UInt32 v12 = ioNumPackets;
                uint64_t v13 = *(void *)(v5 + 184) + ioNumPackets;
                *(void *)(v5 + 184) = v13;
                if (v12)
                {
                  int v30 = *(_DWORD *)(v5 + 52);
                  inBuffer->UInt32 mAudioDataByteSize = ioNumBytes;
                  if (*(unsigned char *)(v5 + 315))
                  {
                    uint64_t v31 = v30 * v12;
                    uint64_t v32 = *(void *)(v5 + 288);
                    uint64_t v33 = v32 - v31;
                    if (v32 >= v31)
                    {
                      UInt32 v34 = v31;
                    }
                    else
                    {
                      uint64_t v33 = 0;
                      UInt32 v34 = *(void *)(v5 + 288);
                    }
                    *(void *)(v5 + 288) = v33;
                  }
                  else
                  {
                    UInt32 v34 = 0;
                  }
                  id v35 = (UInt32 *)(v5 + 4 * v6 + 428);
                  *id v35 = v34;
                  inBuffer->mUserData = v35;
                  if (*(_DWORD *)(v5 + 276))
                  {
                    uint64_t v36 = *(void *)(v5 + 200);
                    if (v13 >= v36) {
                      UInt32 v37 = *(_DWORD *)(v5 + 276);
                    }
                    else {
                      UInt32 v37 = 0;
                    }
                    if (v36) {
                      UInt32 v38 = v37;
                    }
                    else {
                      UInt32 v38 = 0;
                    }
                  }
                  else
                  {
                    UInt32 v38 = 0;
                  }
                  this = AudioQueueEnqueueBufferWithParameters(inAQ, inBuffer, 0, 0, v34, v38, 0, 0, 0, 0);
                  goto LABEL_86;
                }
                this = AVAudioPlayerCpp::loopLogic((AVAudioPlayerCpp *)v5);
                if (this) {
                  goto LABEL_32;
                }
                unsigned int v8 = *(_DWORD *)(v5 + 48);
              }
            }
            else
            {
              long long v17 = (UInt32 *)(v5 + 4 * v6 + 428);
              while (1)
              {
                mPacketDescriptions = inBuffer->mPacketDescriptions;
                UInt32 v19 = inBuffer->mAudioDataBytesCapacity;
                mPacketDescriptionCapacitfloat y = inBuffer->mPacketDescriptionCapacity;
                UInt32 ioNumPackets = mPacketDescriptionCapacity;
                UInt32 ioNumBytes = v19;
                if (*(unsigned char *)(v5 + 444) && *(_DWORD *)(v5 + 480) < mPacketDescriptionCapacity) {
                  UInt32 ioNumPackets = *(_DWORD *)(v5 + 480);
                }
                this = AudioFileReadPacketData(*(AudioFileID *)(v5 + 160), 0, &ioNumBytes, mPacketDescriptions, *(void *)(v5 + 184), &ioNumPackets, inBuffer->mAudioData);
                int v11 = this;
                if (this != -39 && this != 0) {
                  break;
                }
                UInt32 v22 = ioNumPackets;
                uint64_t v23 = *(void *)(v5 + 184) + ioNumPackets;
                *(void *)(v5 + 184) = v23;
                if (v22)
                {
                  unsigned int v24 = *(_DWORD *)(v5 + 52) * v22;
                  inBuffer->UInt32 mAudioDataByteSize = ioNumBytes;
                  inBuffer->UInt32 mPacketDescriptionCount = v22;
                  if (*(unsigned char *)(v5 + 315))
                  {
                    uint64_t v25 = *(void *)(v5 + 288);
                    uint64_t v26 = v25 - v24;
                    if (v25 >= v24)
                    {
                      UInt32 v27 = v24;
                    }
                    else
                    {
                      uint64_t v26 = 0;
                      UInt32 v27 = *(void *)(v5 + 288);
                    }
                    *(void *)(v5 + 288) = v26;
                  }
                  else
                  {
                    UInt32 v27 = 0;
                  }
                  UInt32 *v17 = v27;
                  inBuffer->mUserData = v17;
                  if (*(_DWORD *)(v5 + 276) && (uint64_t v28 = *(void *)(v5 + 200)) != 0) {
                    UInt32 v29 = v23 >= v28 ? *(_DWORD *)(v5 + 276) : 0;
                  }
                  else {
                    UInt32 v29 = 0;
                  }
                  if (*(_DWORD *)(v5 + 112) || !v29 || v29 + v27 <= v24)
                  {
                    this = AudioQueueEnqueueBufferWithParameters(inAQ, inBuffer, v22, mPacketDescriptions, v27, v29, 0, 0, 0, 0);
LABEL_86:
                    *(_DWORD *)(v5 + 256) = this;
                    if (!this)
                    {
                      *(void *)(v5 + 416) = inBuffer;
                      atomic_fetch_add((atomic_uint *volatile)(v5 + 424), 1u);
                    }
                    goto LABEL_32;
                  }
                }
                this = AVAudioPlayerCpp::loopLogic((AVAudioPlayerCpp *)v5);
                if (this) {
                  goto LABEL_32;
                }
              }
            }
            goto LABEL_32;
          }
          if (v6 || (this = AVAudioPlayerCpp::loopLogic((AVAudioPlayerCpp *)v5), (this & 1) == 0))
          {
            UInt32 v7 = *(AudioQueueBufferRef *)(v5 + 448) == inBuffer ? *(_DWORD *)(v5 + 276) : 0;
            if (*(_DWORD *)(v5 + 48))
            {
              UInt32 mPacketDescriptionCount = 0;
              uint64_t v15 = 0;
            }
            else
            {
              UInt32 mPacketDescriptionCount = inBuffer->mPacketDescriptionCount;
              uint64_t v15 = inBuffer->mPacketDescriptions;
            }
            this = AudioQueueEnqueueBufferWithParameters(inAQ, inBuffer, mPacketDescriptionCount, v15, *(_DWORD *)inBuffer->mUserData, v7, 0, 0, 0, 0);
            *(_DWORD *)(v5 + 256) = this;
            if (!this)
            {
              *(void *)(v5 + 416) = inBuffer;
              atomic_fetch_add((atomic_uint *volatile)(v5 + 424), 1u);
LABEL_41:
              if (!*(void *)(v5 + 288)) {
                *(unsigned char *)(v5 + 315) = 0;
              }
              return this;
            }
          }
        }
        int v11 = 0;
LABEL_32:
        if (!atomic_load((unsigned int *)(v5 + 424)))
        {
          if (v11 && v11 != -39 || *(_DWORD *)(v5 + 256)) {
            *(unsigned char *)(v5 + 440) = 0;
          }
          if (*(unsigned char *)(v5 + 307) && *(_DWORD *)(v5 + 256) != 560030580) {
            this = AVAudioPlayerCpp::flushQueue(v5);
          }
        }
        goto LABEL_41;
      }
    }
  }
  return this;
}

void sub_19D82E418(_Unwind_Exception *a1)
{
  if (!*(void *)(v1 + 288)) {
    *(unsigned char *)(v1 + 315) = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t AVAudioPlayerCpp::loopLogic(AVAudioPlayerCpp *this)
{
  if (!*((unsigned char *)this + 463))
  {
    uint64_t outPropertyData = 0;
    UInt32 ioDataSize = 8;
    if (!AudioFileGetProperty(*((AudioFileID *)this + 20), 0x70636E74u, &ioDataSize, &outPropertyData))
    {
      *((void *)this + 58) = outPropertyData * *((unsigned int *)this + 13);
      *((unsigned char *)this + 46AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1;
    }
  }
  if (!*((unsigned char *)this + 442))
  {
    int v6 = *((_DWORD *)this + 74);
    int v3 = *((_DWORD *)this + 75);
    if ((v6 & 0x80000000) == 0 && v3 >= v6) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t result = 0;
    *((_DWORD *)this + 75) = v3 + 1;
    goto LABEL_17;
  }
  if (!*((unsigned char *)this + 441) && !*((void *)this + 24))
  {
    if (atomic_load((unsigned int *)this + 106))
    {
      uint64_t result = 1;
      *((unsigned char *)this + 314) = 1;
      *((unsigned char *)this + 441) = 1;
      return result;
    }
    AVAudioPlayerCpp::donePlaying((uint64_t)this);
    return 1;
  }
  int v2 = *((_DWORD *)this + 74);
  int v3 = *((_DWORD *)this + 75);
  if (v2 < 0 || v3 < v2) {
    goto LABEL_16;
  }
  if (atomic_load((unsigned int *)this + 106))
  {
LABEL_13:
    uint64_t result = 1;
    *((unsigned char *)this + 314) = 1;
    *((unsigned char *)this + 440) = 1;
    if (!*((unsigned char *)this + 307)) {
      return result;
    }
    AVAudioPlayerCpp::flushQueue((uint64_t)this);
    return 1;
  }
  uint64_t result = 0;
LABEL_17:
  *((void *)this + 2AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
  uint64_t v7 = *((int *)this + 68);
  *((void *)this + 35) = v7;
  *((void *)this + 36) = v7;
  *((_WORD *)this + 157) = 256;
  return result;
}

uint64_t FindCodecs(int a1, _DWORD *a2, _DWORD *a3, unsigned int *a4, unsigned int *a5)
{
  UInt32 outPropertyDataSize = 0;
  int inSpecifier = a1;
  *a2 = 0;
  *a3 = 0;
  uint64_t result = AudioFormatGetPropertyInfo(0x61766465u, 4u, &inSpecifier, &outPropertyDataSize);
  if (!result)
  {
    if (outPropertyDataSize) {
      operator new[]();
    }
  }
  return result;
}

uint64_t AVAudioPlayerCpp::makeChannelAssignments(AVAudioPlayerCpp *this)
{
  int v2 = (OpaqueAudioQueue *)*((void *)this + 22);
  if (v2 && (int v3 = *((_DWORD *)this + 130)) != 0) {
    return AudioQueueSetProperty(v2, 0x61716361u, *((const void **)this + 66), 16 * v3);
  }
  else {
    return 0;
  }
}

void AVAudioPlayerCpp::applySTSLabelToQueueIfPossible(AVAudioPlayerCpp *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v2 = (OpaqueAudioQueue *)*((void *)this + 22);
  if (v2)
  {
    uint64_t inData = *((void *)this + 67);
    OSStatus v3 = AudioQueueSetProperty(v2, 0x7374736Cu, &inData, 8u);
    if (v3)
    {
      OSStatus v4 = v3;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *((void *)this + 22);
        *(_DWORD *)AudioStreamBasicDescription buf = 134218496;
        unsigned int v8 = this;
        __int16 v9 = 2048;
        uint64_t v10 = v5;
        __int16 v11 = 1024;
        OSStatus v12 = v4;
        _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "player@0x%p failed to set label on audioqueue 0x%p: %d", buf, 0x1Cu);
      }
    }
  }
}

uint64_t AudioPlayerAQOutputCallback(uint64_t a1, OpaqueAudioQueue *a2, AudioQueueBuffer *a3)
{
  return pthread_mutex_unlock(&avap_mutex);
}

void sub_19D82E81C(_Unwind_Exception *a1)
{
}

uint64_t AVAudioPlayerCpp::SetProperty(uint64_t this, int a2, uint64_t a3, double *a4)
{
  uint64_t v4 = this;
  if (a2 > 1885433375)
  {
    if (a2 > 1987013748)
    {
      if (a2 == 1987013749)
      {
        if (a3 != 8) {
          return this;
        }
        if (*(double *)(this + 208) == *a4) {
          return this;
        }
        *(double *)(this + 208) = *a4;
        if (*(unsigned char *)(this + 313)) {
          return this;
        }
        pthread_mutex_lock(&avap_mutex);
        UInt32 v19 = *(OpaqueAudioQueue **)(v4 + 176);
        if (v19)
        {
          AudioQueueParameterValue v20 = *(double *)(v4 + 208);
          AudioQueueSetParameter(v19, 1u, v20);
        }
      }
      else
      {
        if (a2 != 1987015284) {
          return this;
        }
        if (a3 != 8) {
          return this;
        }
        if (*(double *)(this + 216) == *a4) {
          return this;
        }
        *(double *)(this + 216) = *a4;
        if (*(unsigned char *)(this + 313)) {
          return this;
        }
        pthread_mutex_lock(&avap_mutex);
        __int16 v9 = *(OpaqueAudioQueue **)(v4 + 176);
        if (v9)
        {
          AudioQueueParameterValue v10 = *(double *)(v4 + 216);
          AudioQueueSetParameter(v9, 4u, v10);
        }
      }
    }
    else
    {
      if (a2 != 1885433376)
      {
        if (a2 == 1918989413 && a3 == 8 && *(double *)(this + 224) != *a4)
        {
          *(double *)(this + 224) = *a4;
          if (!*(unsigned char *)(this + 313))
          {
            pthread_mutex_lock(&avap_mutex);
            AudioQueueSetProperty(*(AudioQueueRef *)(v4 + 176), 0x715F7470u, (const void *)(v4 + 240), 4u);
            uint64_t v7 = *(OpaqueAudioQueue **)(v4 + 176);
            if (v7 && *(_DWORD *)(v4 + 240))
            {
              LODWORD(inData) = 1953064047;
              AudioQueueSetProperty(v7, 0x71747061u, &inData, 4u);
              AudioQueueParameterValue v8 = *(double *)(v4 + 224);
              AudioQueueSetParameter(*(AudioQueueRef *)(v4 + 176), 2u, v8);
            }
            return pthread_mutex_unlock(&avap_mutex);
          }
        }
        return this;
      }
      if (a3 != 8) {
        return this;
      }
      if (*(double *)(this + 232) == *a4) {
        return this;
      }
      *(double *)(this + 232) = *a4;
      if (*(unsigned char *)(this + 313)) {
        return this;
      }
      pthread_mutex_lock(&avap_mutex);
      uint64_t v13 = *(OpaqueAudioQueue **)(v4 + 176);
      if (v13)
      {
        AudioQueueParameterValue v14 = *(double *)(v4 + 232);
        AudioQueueSetParameter(v13, 0xDu, v14);
      }
    }
    return pthread_mutex_unlock(&avap_mutex);
  }
  if (a2 > 1701737075)
  {
    if (a2 == 1701737076)
    {
      if (a3 == 4)
      {
        int v15 = *(_DWORD *)a4 != 0;
        long long v16 = (_DWORD *)(this + 240);
        if (*(_DWORD *)(this + 240) != v15)
        {
          *(_DWORD *)(this + 240) = v15;
          if (!*(unsigned char *)(this + 313))
          {
            pthread_mutex_lock(&avap_mutex);
            AudioQueueSetProperty(*(AudioQueueRef *)(v4 + 176), 0x715F7470u, (const void *)(v4 + 240), 4u);
            long long v17 = *(OpaqueAudioQueue **)(v4 + 176);
            if (v17 && *v16)
            {
              LODWORD(inData) = 1953064047;
              AudioQueueSetProperty(v17, 0x71747061u, &inData, 4u);
              AudioQueueParameterValue v18 = *(double *)(v4 + 224);
              AudioQueueSetParameter(*(AudioQueueRef *)(v4 + 176), 2u, v18);
            }
            return pthread_mutex_unlock(&avap_mutex);
          }
        }
      }
    }
    else if (a2 == 1819242352 && a3 == 4)
    {
      *(_DWORD *)(this + 296) = *(_DWORD *)a4;
    }
  }
  else if (a2 == 1668573549)
  {
    if (a3 == 8 && !*(unsigned char *)(this + 313))
    {
      double v11 = *a4;
      pthread_mutex_lock(&avap_mutex);
      if (v11 < 0.0) {
        double v11 = 0.0;
      }
      double v12 = *(double *)(v4 + 248);
      if (v11 > v12)
      {
        if (!*(unsigned char *)(v4 + 462))
        {
          uint64_t inData = 0;
          UInt32 ioDataSize = 8;
          if (AudioFileGetProperty(*(AudioFileID *)(v4 + 160), 0x70636E74u, &ioDataSize, &inData))
          {
            double v12 = *(double *)(v4 + 248);
          }
          else
          {
            double v12 = (double)(inData * *(unsigned int *)(v4 + 52)) / *(double *)(v4 + 32);
            *(double *)(v4 + 248) = v12;
            *(unsigned char *)(v4 + 462) = 1;
          }
        }
        if (v11 > v12) {
          double v11 = v12;
        }
      }
      int v21 = *(unsigned __int8 *)(v4 + 304);
      int v22 = *(unsigned __int8 *)(v4 + 305);
      if (v22 | v21)
      {
        if (*(unsigned char *)(v4 + 307))
        {
          *(unsigned char *)(v4 + 44AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1;
          if (v22)
          {
            *(unsigned char *)(v4 + 312) = 1;
            __dmb(0xBu);
            AVAudioPlayerCpp::getQueueTime((AVAudioPlayerCpp *)v4, 1);
            pthread_mutex_unlock(&avap_mutex);
            OSStatus v23 = AudioQueueStop(*(AudioQueueRef *)(v4 + 176), 1u);
            OSStatus v24 = v23;
            if (!v23) {
              OSStatus v24 = AudioQueueReset(*(AudioQueueRef *)(v4 + 176));
            }
            pthread_mutex_lock(&avap_mutex);
            if (!v23)
            {
              atomic_store(0, (unsigned int *)(v4 + 424));
              if (!v24)
              {
                *(_WORD *)(v4 + 314) = 0;
                *(_DWORD *)(v4 + 308) = 0;
                *(_DWORD *)(v4 + 304) = 0x10000;
                *(unsigned char *)(v4 + 312) = 0;
                *(void *)(v4 + 328) = *(void *)(v4 + 344);
                *(void *)(v4 + 320) = 0;
                *(void *)(v4 + 336) = 0;
                __dmb(0xBu);
              }
            }
          }
          AVAudioPlayerCpp::setPlaybackFramePos((AVAudioPlayerCpp *)v4, vcvtmd_s64_f64(v11 * *(double *)(v4 + 32) + 0.5), 0);
          *(void *)(v4 + 328) = *(void *)(v4 + 344);
          *(unsigned char *)(v4 + 444) = 1;
          int v25 = AVAudioPlayerCpp::playQueue((AVAudioPlayerCpp *)v4, 0);
          *(_WORD *)(v4 + 44AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
          if (v25) {
            AVAudioPlayerCpp::donePlaying(v4);
          }
        }
        else
        {
          AVAudioPlayerCpp::setPlaybackFramePos((AVAudioPlayerCpp *)v4, vcvtmd_s64_f64(v11 * *(double *)(v4 + 32) + 0.5), v21 != 0);
          *(void *)(v4 + 328) = *(void *)(v4 + 344);
          *(unsigned char *)(v4 + 304) = 0;
          *(unsigned char *)(v4 + 312) = 1;
          pthread_mutex_unlock(&avap_mutex);
          AudioQueueReset(*(AudioQueueRef *)(v4 + 176));
          pthread_mutex_lock(&avap_mutex);
          *(unsigned char *)(v4 + 312) = 0;
          *(unsigned char *)(v4 + 444) = 1;
          AVAudioPlayerCpp::prepareToPlayQueue((AVAudioPlayerCpp *)v4);
          *(unsigned char *)(v4 + 444) = 0;
        }
      }
      else
      {
        AVAudioPlayerCpp::setPlaybackFramePos((AVAudioPlayerCpp *)v4, vcvtmd_s64_f64(v11 * *(double *)(v4 + 32) + 0.5), 0);
        *(void *)(v4 + 328) = *(void *)(v4 + 344);
      }
      return pthread_mutex_unlock(&avap_mutex);
    }
  }
  else if (a2 == 1701735796 && a3 == 4)
  {
    int v5 = *(_DWORD *)a4 != 0;
    if (*(_DWORD *)(this + 376) != v5 && !*(unsigned char *)(this + 313))
    {
      pthread_mutex_lock(&avap_mutex);
      int v6 = *(OpaqueAudioQueue **)(v4 + 176);
      if (!v6 || (LODWORD(inData) = v5, !AudioQueueSetProperty(v6, 0x61716D65u, &inData, 4u))) {
        *(_DWORD *)(v4 + 376) = v5;
      }
      return pthread_mutex_unlock(&avap_mutex);
    }
  }
  return this;
}

void sub_19D82EE2C(_Unwind_Exception *a1)
{
}

CFDataRef AudioPlayerAFGetSizeProc(const __CFData **a1)
{
  CFDataRef result = *a1;
  if (result) {
    return (const __CFData *)CFDataGetLength(result);
  }
  return result;
}

uint64_t AudioPlayerAFReadProc(CFDataRef *a1, uint64_t a2, unsigned int a3, void *a4, unsigned int *a5)
{
  CFDataRef v6 = *a1;
  if (*a1)
  {
    CFIndex Length = CFDataGetLength(*a1);
    if (a2 < 0)
    {
      a3 = 0;
      uint64_t result = 4294967256;
    }
    else if (Length <= a2)
    {
      a3 = 0;
      uint64_t result = 4294967257;
    }
    else
    {
      if (Length - a2 < a3) {
        a3 = Length - a2;
      }
      BytePtr = CFDataGetBytePtr(v6);
      memcpy(a4, &BytePtr[a2], a3);
      uint64_t result = 0;
    }
  }
  else
  {
    a3 = 0;
    uint64_t result = 4294967246;
  }
  *a5 = a3;
  return result;
}

void sub_19D82F174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void MyAudioQueueBuffer::~MyAudioQueueBuffer(MyAudioQueueBuffer *this)
{
  unsigned int var5 = this->var5;
  if (var5) {
    MEMORY[0x19F3ABB10](var5, 0x1000C80451B5BE8);
  }
  unsigned int var1 = this->var1;
  if (var1) {
    MEMORY[0x19F3ABB10](var1, 0x1000C8077774924);
  }
}

void MyAudioQueueBuffer::MyAudioQueueBuffer(MyAudioQueueBuffer *this, unsigned int a2, unsigned int a3)
{
  this->double var0 = a2;
  this->unsigned int var1 = 0;
  this->id var2 = 0;
  this->float var3 = 0;
  this->unsigned int var4 = a3;
  this->unsigned int var5 = 0;
  this->UInt32 var6 = 0;
  *(_WORD *)&this->float var8 = 0;
  this->float var10 = 0;
  if (a2) {
    operator new[]();
  }
  if (a3) {
    operator new[]();
  }
  *(void *)&this->var7.UInt32 mBitsPerChannel = 0;
  *(_OWORD *)&this->var7.mBytesPerPacket = 0u;
  *(_OWORD *)&this->var7.mSampleRate = 0u;
}

void sub_19D82F658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D82F818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D82F944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D82FCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D830528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D8306DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D83084C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D830AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D830C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D830D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19D8310EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<std::unique_lock<std::recursive_mutex>,std::unique_lock<std::recursive_mutex>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19D831468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*v21);
  caulk::details::lifetime_guard_base<AVAudioEnvironmentNodeImpl>::~lifetime_guard_base(v19);
  AVAudioUnitImpl::~AVAudioUnitImpl(v18);
  MEMORY[0x19F3ABB30](v18, 0x10B1C403D80C735);
  _Unwind_Resume(a1);
}

void ControllerImpl::~ControllerImpl(ControllerImpl *this)
{
  ControllerImpl::~ControllerImpl(this);

  JUMPOUT(0x19F3ABB30);
}

{
  NSObject *v2;
  id v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  int v24;
  char v25;
  long long v26;
  long long v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  uint64_t v32 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EEFA4158;
  OSStatus v24 = 4118;
  int v25 = 1;
  uint64_t v26 = 0u;
  UInt32 v27 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)&v23, "~ControllerImpl");
  if (kAVVCScope)
  {
    int v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    int v2 = MEMORY[0x1E4F14500];
    OSStatus v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    UInt32 v29 = "ControllerImpl.mm";
    int v30 = 1024;
    uint64_t v31 = 428;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ControllerImpl::Entering Dealloc", buf, 0x12u);
  }

LABEL_8:
  *(_DWORD *)AudioStreamBasicDescription buf = 1;
  uint64_t v4 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 1, buf);
  int v5 = v4[5];
  v4[5] = 0;

  *(_DWORD *)AudioStreamBasicDescription buf = 2;
  CFDataRef v6 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 2, buf);
  uint64_t v7 = v6[5];
  void v6[5] = 0;

  *(_DWORD *)AudioStreamBasicDescription buf = 3;
  AudioQueueParameterValue v8 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 3, buf);
  __int16 v9 = v8[5];
  void v8[5] = 0;

  AudioQueueParameterValue v10 = (void *)*((void *)this + 75);
  *((void *)this + 75) = 0;

  double v11 = (void *)*((void *)this + 3);
  *((void *)this + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;

  double v12 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;

  ControllerImpl::deleteRecordingEngines(this);
  [*((id *)this + 58) invalidatePlugins];
  *((void *)this + 71) = 0;
  uint64_t v13 = *((void *)this + 24);
  *(unsigned char *)(v13 + 144) = 1;
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(v13 + 136));
  CFRunLoopWakeUp(*(CFRunLoopRef *)(v13 + 128));
  *((void *)this + 24) = 0;
  if (kAVVCScope)
  {
    AudioQueueParameterValue v14 = *(id *)kAVVCScope;
    if (!v14) {
      goto LABEL_15;
    }
  }
  else
  {
    AudioQueueParameterValue v14 = MEMORY[0x1E4F14500];
    int v15 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    UInt32 v29 = "ControllerImpl.mm";
    int v30 = 1024;
    uint64_t v31 = 451;
    _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d QueueRunLoop stopped", buf, 0x12u);
  }

LABEL_15:
  objc_storeWeak((id *)this + 21, 0);
  for (uint64_t i = 536; i != 568; i += 8)
  {
    long long v17 = *(void *)((char *)this + i);
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    *(void *)((char *)this + i) = 0;
  }
  +[AVVCMetricsManager destroySharedManager];
  AudioQueueParameterValue v18 = +[AVVCSessionFactory sharedInstance];
  [v18 releasePrimarySessionManager];

  if (kAVVCScope)
  {
    uint64_t v19 = *(id *)kAVVCScope;
    if (!v19) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v19 = MEMORY[0x1E4F14500];
    AudioQueueParameterValue v20 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    UInt32 v29 = "ControllerImpl.mm";
    int v30 = 1024;
    uint64_t v31 = 477;
    _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ControllerImpl::Exiting Dealloc", buf, 0x12u);
  }

LABEL_26:
  TraceMethod::~TraceMethod((TraceMethod *)&v23);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v24);

  int v21 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table((uint64_t)this + 480);

  objc_destroyWeak((id *)this + 52);
  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*((void **)this + 38));
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(*((void **)this + 35));

  objc_destroyWeak((id *)this + 21);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 104));
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 40));

  int v22 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_19D831948(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  CFDataRef v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        CFDataRef v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        CFDataRef v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    __int16 v9 = operator new(0x30uLL);
    unsigned char v9[8] = *a3;
    *((void *)v9 + 5) = 0;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void ControllerImpl::deleteRecordingEngines(ControllerImpl *this)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 72);
  OSStatus v3 = (std::__shared_weak_count *)*((void *)this + 73);
  if (!v3)
  {
    if (!v2) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v2)
  {
LABEL_7:
    v4[0] = &unk_1EEFA3A20;
    v4[3] = v4;
    AVVCRecordingEngineMap::for_each_engine((void *)v2, (uint64_t)v4, "deleteRecordingEngines");
    std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](v4);
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (!IsSerializationEnabled(void)::enable)
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 24));
      std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(*(void **)(v2 + 8));
      *(void *)uint64_t v2 = v2 + 8;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + 8) = 0;
      std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 24));
      if (!v3) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<AVVCRecordingEngine>>>>::destroy(*(void **)(v2 + 8));
    *(void *)uint64_t v2 = v2 + 8;
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 8) = 0;
    if (v3) {
LABEL_11:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_12:
    *((void *)this + 59) = 0;
    return;
  }
  *((void *)this + 59) = 0;

  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D831B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      OSStatus v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(*a1);
    std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void std::__function::__func<ControllerImpl::deleteRecordingEngines(void)::$_0,std::allocator<ControllerImpl::deleteRecordingEngines(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  AVVCRecordingEngine::resetCompletionBlocks(*(AVVCRecordingEngine **)(v3 + 8), *(std::__shared_weak_count **)(v3 + 16));
  *(unsigned char *)(v3 + 520) = 1;
  if (kAVVCScope)
  {
    uint64_t v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315650;
    uint64_t v7 = "AVVCRecordingEngine.mm";
    __int16 v8 = 1024;
    int v9 = 1089;
    __int16 v10 = 1024;
    int v11 = 1;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVCRecordingEngine::setAVVCTeardownCompleted(%d)", (uint8_t *)&v6, 0x18u);
  }

LABEL_8:
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_19D831DA4(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<ControllerImpl::deleteRecordingEngines(void)::$_0,std::allocator<ControllerImpl::deleteRecordingEngines(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EEFA3A20;
}

void *std::__function::__func<ControllerImpl::deleteRecordingEngines(void)::$_0,std::allocator<ControllerImpl::deleteRecordingEngines(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EEFA3A20;
  return result;
}

void std::__function::__func<ControllerImpl::deleteRecordingEngines(void)::$_0,std::allocator<ControllerImpl::deleteRecordingEngines(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
}

void ControllerImpl::enableMiniDucking(ControllerImpl *this, uint64_t a2)
{
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v10, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v8, *((void *)this + 72), *((std::__shared_weak_count **)this + 73), 1uLL);
  if (v8)
  {
    uint64_t v4 = AVVCRecordingEngine::getActivationContextSettings(v8);
    id v5 = v4;
    if (v4) {
      uint64_t v6 = [v4 announceCallsEnabled];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
  [v7 shouldEnableMiniDucking:a2 withOptions:v6];

  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_19D831F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void ControllerImpl::_lookupEngineForStreamID(ControllerImpl *this, uint64_t a2, std::__shared_weak_count *a3, unint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (a2)
  {
    AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)v8, a2, a4);
    *(_OWORD *)this = *(_OWORD *)v8;
    goto LABEL_12;
  }
  if (kAVVCScope)
  {
    uint64_t v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int16 v8 = 136315394;
    *(void *)&void v8[4] = "ControllerImpl.mm";
    *(_WORD *)&v8[12] = 1024;
    *(_DWORD *)&v8[14] = 4117;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", v8, 0x12u);
  }

LABEL_12:
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
}

void sub_19D832074(_Unwind_Exception *exception_object)
{
}

id ControllerImpl::sessionManagerForStreamID(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    id v7 = +[AVVCSessionFactory sharedInstance];
    uint64_t v6 = [v7 sessionManagerForContext:0 clientType:*(void *)(a1 + 184) error:a3];

    goto LABEL_15;
  }
  int v5 = a2;
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v11, *(void *)(a1 + 576), *(std::__shared_weak_count **)(a1 + 584), a2);
  if (v11)
  {
    uint64_t v6 = (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 64))(v11, a3);
    goto LABEL_13;
  }
  if (!kAVVCScope)
  {
    __int16 v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
    goto LABEL_9;
  }
  __int16 v8 = *(id *)kAVVCScope;
  if (v8)
  {
LABEL_9:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      AudioQueueParameterValue v14 = "ControllerImpl.mm";
      __int16 v15 = 1024;
      int v16 = 230;
      __int16 v17 = 1024;
      int v18 = v5;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d audioSessionForStreamID(%d) couldn't find engine, returning nil", buf, 0x18u);
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
LABEL_15:

  return v6;
}

void sub_19D832238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ControllerImpl::audioSessionForStreamID(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    id v7 = +[AVVCSessionFactory sharedInstance];
    uint64_t v6 = [v7 sessionForContext:0 clientType:*(void *)(a1 + 184) error:a3];

    goto LABEL_15;
  }
  int v5 = a2;
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v11, *(void *)(a1 + 576), *(std::__shared_weak_count **)(a1 + 584), a2);
  if (v11)
  {
    uint64_t v6 = (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 56))(v11, a3);
    goto LABEL_13;
  }
  if (!kAVVCScope)
  {
    __int16 v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
    goto LABEL_9;
  }
  __int16 v8 = *(id *)kAVVCScope;
  if (v8)
  {
LABEL_9:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      AudioQueueParameterValue v14 = "ControllerImpl.mm";
      __int16 v15 = 1024;
      int v16 = 210;
      __int16 v17 = 1024;
      int v18 = v5;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d audioSessionForStreamID(%d) couldn't find engine, returning nil", buf, 0x18u);
    }
  }
  uint64_t v6 = 0;
LABEL_13:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
LABEL_15:

  return v6;
}

void sub_19D83240C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AVVCRecordingEngineMap>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AVVCRecordingEngineMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA7838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::__shared_ptr_emplace<AVVCRecordingEngineMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA7838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ControllerImpl::setStartAlertMode(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    uint64_t v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2 - 1) > 3) {
      uint64_t v6 = "Silent";
    }
    else {
      uint64_t v6 = off_1E5965700[a2 - 1];
    }
    int v8 = 136315650;
    id v9 = "ControllerImpl.h";
    __int16 v10 = 1024;
    int v11 = 331;
    __int16 v12 = 2080;
    uint64_t v13 = v6;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d setStartAlertMode: %s", (uint8_t *)&v8, 0x1Cu);
  }

LABEL_11:
  if (*(_DWORD *)(a1 + 320) != a2)
  {
    *(_DWORD *)(a1 + 320) = a2;
    if (!a2)
    {
      if (*(int *)(a1 + 360) >= 200) {
        int v7 = 200;
      }
      else {
        int v7 = *(_DWORD *)(a1 + 360);
      }
      ControllerImpl::setAlertQueueState(a1, v7);
    }
  }
}

void ControllerImpl::setStopAlertMode(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    uint64_t v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2 - 1) > 3) {
      uint64_t v6 = "Silent";
    }
    else {
      uint64_t v6 = off_1E5965700[a2 - 1];
    }
    int v8 = 136315650;
    id v9 = "ControllerImpl.h";
    __int16 v10 = 1024;
    int v11 = 338;
    __int16 v12 = 2080;
    uint64_t v13 = v6;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d setStopAlertMode: %s", (uint8_t *)&v8, 0x1Cu);
  }

LABEL_11:
  if (*(_DWORD *)(a1 + 324) != a2)
  {
    *(_DWORD *)(a1 + 324) = a2;
    if (!a2)
    {
      if (*(int *)(a1 + 360) >= 200) {
        int v7 = 200;
      }
      else {
        int v7 = *(_DWORD *)(a1 + 360);
      }
      ControllerImpl::setAlertQueueState(a1, v7);
    }
  }
}

void ControllerImpl::setStopWithErrorAlertMode(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    uint64_t v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2 - 1) > 3) {
      uint64_t v6 = "Silent";
    }
    else {
      uint64_t v6 = off_1E5965700[a2 - 1];
    }
    int v8 = 136315650;
    id v9 = "ControllerImpl.h";
    __int16 v10 = 1024;
    int v11 = 345;
    __int16 v12 = 2080;
    uint64_t v13 = v6;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d setStopWithErrorAlertMode: %s", (uint8_t *)&v8, 0x1Cu);
  }

LABEL_11:
  if (*(_DWORD *)(a1 + 328) != a2)
  {
    *(_DWORD *)(a1 + 328) = a2;
    if (!a2)
    {
      if (*(int *)(a1 + 360) >= 200) {
        int v7 = 200;
      }
      else {
        int v7 = *(_DWORD *)(a1 + 360);
      }
      ControllerImpl::setAlertQueueState(a1, v7);
    }
  }
}

void ControllerImpl::setAlertQueueState(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    uint64_t v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    switch(a2)
    {
      case 200:
        uint64_t v6 = "stopped";
        break;
      case 201:
        uint64_t v6 = "primed";
        break;
      case 202:
        uint64_t v6 = "stopping";
        break;
      case 203:
        uint64_t v6 = "started";
        break;
      case 204:
        uint64_t v6 = "running";
        break;
      default:
        uint64_t v6 = "ILLEGAL";
        if (!a2) {
          uint64_t v6 = "uninit";
        }
        break;
    }
    int v7 = 136315650;
    int v8 = "ControllerImpl.h";
    __int16 v9 = 1024;
    int v10 = 546;
    __int16 v11 = 2080;
    __int16 v12 = v6;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d alert queue state => %s", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_17:
  *(_DWORD *)(a1 + 360) = a2;
}

void MyMutex::~MyMutex(MyMutex *this)
{
  CADeprecated::CAMutex::~CAMutex(this);

  JUMPOUT(0x19F3ABB30);
}

uint64_t CADeprecated::AVVCGenericRunLoopThread::Entry(dispatch_semaphore_t *this, void *a2)
{
  CFAbsoluteTime Current = CFRunLoopGetCurrent();
  v7.versiouint64_t n = 0;
  v7.info = this;
  memset(&v7.retain, 0, 56);
  v7.perform = (void (__cdecl *)(void *))CADeprecated::AVVCGenericRunLoopThread::PerformSource;
  uint64_t v4 = CFRunLoopSourceCreate(0, 0, &v7);
  this[17] = (dispatch_semaphore_t)v4;
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D418];
  CFRunLoopAddSource(Current, v4, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  this[16] = (dispatch_semaphore_t)Current;
  dispatch_semaphore_signal(this[20]);
  while (!*((unsigned char *)this + 144))
    CFRunLoopRunInMode(v5, 504911233.0, 1u);
  return 0;
}

void ControllerImpl::ControllerImpl(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EEFA4158;
  a1[3] = 0;
  a1[4] = 0;
  MEMORY[0x19F3AB9F0](a1 + 5);
  MEMORY[0x19F3AB9F0](a1 + 13);
  a1[21] = 0;
  a1[22] = 0;
  operator new();
}

void sub_19D833508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::recursive_mutex *a9, id *location, std::recursive_mutex *a11, void *a12)
{
  __int16 v15 = *(std::__shared_weak_count **)(v12 + 584);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::~__hash_table(v12 + 480);

  objc_destroyWeak((id *)(v12 + 416));
  std::__tree<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::__map_value_compare<AUGraphNodeBaseV3 *,std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>,std::less<AUGraphNodeBaseV3 *>,true>,std::allocator<std::__value_type<AUGraphNodeBaseV3 *,std::pair<AUGraphNodeBaseV3 *,unsigned int>>>>::destroy(*(void **)(v12 + 304));
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::destroy(*(void **)(v12 + 280));

  objc_destroyWeak(location);
  std::recursive_mutex::~recursive_mutex(a9);
  std::recursive_mutex::~recursive_mutex(a11);

  int v16 = *(std::__shared_weak_count **)(v12 + 16);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

void ControllerImpl::deactivateSessionForListening(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, int a6, void *a7)
{
  id v13 = a2;
  id v14 = a7;
  int v32 = 4124;
  char v33 = 1;
  long long v34 = 0u;
  long long v35 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v31, "deactivateSessionForListening");
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2020000000;
  v30[3] = a3;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v28, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  uint64_t v15 = v28;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3321888768;
  _OWORD v18[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke;
  void v18[3] = &unk_1EEFA8C40;
  uint64_t v22 = a1;
  uint64_t v23 = v28;
  OSStatus v24 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = a6;
  int v21 = v30;
  uint64_t v25 = a5;
  id v16 = v14;
  id v20 = v16;
  char v27 = a4;
  id v17 = v13;
  id v19 = v17;
  ControllerImpl::safeWork(v15, v18, (uint64_t)"deactivateSessionForListening");

  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Block_object_dispose(v30, 8);
  TraceMethod::~TraceMethod((TraceMethod *)v31);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v32);
}

void sub_19D8338D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, ...)
{
  va_start(va, a15);

  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Block_object_dispose(va, 8);
  TraceMethod::~TraceMethod((TraceMethod *)(v17 - 128));
  TraceWrapper::~TraceWrapper((TraceWrapper *)(v17 - 120));

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SessionLock::SessionLock(v69, v2, v4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = *(_DWORD *)(a1 + 88);
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (ControllerImpl::audioSessionForStreamIDIsPrimary((ControllerImpl *)v7, v8))
    {
      __int16 v9 = *(void **)(v7 + 576);
      int v10 = *(std::__shared_weak_count **)(v7 + 584);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9)
      {
        *(void *)AudioStreamBasicDescription buf = &unk_1EEFA3498;
        *(void *)&v72[4] = buf;
        AVVCRecordingEngineMap::for_each_engine(v9, (uint64_t)buf, "switchRecordModeOnDeactivate");
        std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](buf);
      }
      if (v10)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        int v10 = 0;
      }
    }
    else
    {
      ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)buf, *(void *)(v7 + 576), *(std::__shared_weak_count **)(v7 + 584), v8);
      uint64_t v11 = *(void *)buf;
      if (*(void *)buf)
      {
        uint64_t v12 = (*(void (**)(void, void))(**(void **)buf + 64))(*(void *)buf, 0);
        [v12 setClientRequestsRecording:0];

        (*(void (**)(uint64_t))(*(void *)v11 + 288))(v11);
        int v10 = 0;
      }
      else
      {
        int v10 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    uint64_t v6 = v10;
    int v5 = *(_DWORD *)(a1 + 88);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 80);
    unint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    id v16 = ControllerImpl::sessionManagerForStreamID(v13, v15, 0);
    int v17 = [v16 getSessionActivationOptions];

    if (v14)
    {
      if (kAVVCScope)
      {
        if (*(unsigned char *)(kAVVCScope + 8))
        {
          int v21 = *(id *)kAVVCScope;
          if (v21)
          {
            uint64_t v22 = v21;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 527;
              _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d setNoResumeOnDeactivate(FALSE): will notify others on deactivation", buf, 0x12u);
            }
          }
        }
      }
      uint64_t v20 = v17 | 1u;
    }
    else
    {
      if (kAVVCScope)
      {
        if (*(unsigned char *)(kAVVCScope + 8))
        {
          int v18 = *(id *)kAVVCScope;
          if (v18)
          {
            id v19 = v18;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 523;
              _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d setNoResumeOnDeactivate(TRUE): will not notify others on deactivation", buf, 0x12u);
            }
          }
        }
      }
      uint64_t v20 = v17 & 0xFFFFFFFE;
    }
    uint64_t v23 = ControllerImpl::sessionManagerForStreamID(v13, v15, 0);
    [v23 setSessionActivationOptions:v20];
  }
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v67, *(void *)(*(void *)(a1 + 64) + 576), *(std::__shared_weak_count **)(*(void *)(a1 + 64) + 584), *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  unint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v66 = v6;
  ControllerImpl::sessionManagerForStreamID(v3, v24, (uint64_t)&v66);
  id v25 = (id)objc_claimAutoreleasedReturnValue();
  int v26 = v66;

  if (v26 || !v25)
  {
    if (kAVVCScope)
    {
      char v33 = *(id *)kAVVCScope;
      if (!v33) {
        goto LABEL_61;
      }
    }
    else
    {
      char v33 = MEMORY[0x1E4F14500];
      id v34 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 580;
      __int16 v71 = 2112;
      *(void *)unsigned int v72 = v26;
      _os_log_impl(&dword_19D794000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d deactivateSessionForListening() returned error(%@)", buf, 0x1Cu);
    }

LABEL_61:
    long long v35 = *(int8x8_t **)(a1 + 64);
    int8x8_t v36 = v35[61];
    if (v36)
    {
      uint64_t v37 = *(void *)(*(void *)(a1 + 48) + 8);
      unint64_t v38 = *(void *)(v37 + 24);
      uint8x8_t v39 = (uint8x8_t)vcnt_s8(v36);
      v39.i16[0] = vaddlv_u8(v39);
      if (v39.u32[0] > 1uLL)
      {
        unint64_t v40 = *(void *)(v37 + 24);
        if (v38 >= *(void *)&v36) {
          unint64_t v40 = v38 % *(void *)&v36;
        }
      }
      else
      {
        unint64_t v40 = (*(void *)&v36 - 1) & v38;
      }
      __int16 v41 = *(void **)(*(void *)&v35[60] + 8 * v40);
      if (v41)
      {
        for (uint64_t i = (void *)*v41; i; uint64_t i = (void *)*i)
        {
          unint64_t v43 = i[1];
          if (v38 == v43)
          {
            if (i[2] == v38)
            {
              *(void *)(v37 + 24) = 0;
              uint64_t v50 = ControllerImpl::sessionManagerForStreamID(v3, 0, 0);

              id v25 = (id)v50;
              goto LABEL_39;
            }
          }
          else
          {
            if (v39.u32[0] > 1uLL)
            {
              if (v43 >= *(void *)&v36) {
                v43 %= *(void *)&v36;
              }
            }
            else
            {
              v43 &= *(void *)&v36 - 1;
            }
            if (v43 != v40) {
              break;
            }
          }
        }
      }
    }
    if (kAVVCScope)
    {
      unsigned int v44 = *(id *)kAVVCScope;
      if (!v44)
      {
LABEL_84:
        uint64_t v47 = *(void *)(a1 + 64);
        id v48 = *(void **)(a1 + 40);
        BOOL v49 = v48 != 0;
        v63[0] = MEMORY[0x1E4F143A8];
        v63[1] = 3221225472;
        v63[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_121;
        v63[3] = &unk_1E5965BC0;
        id v65 = v48;
        id v64 = v26;
        ControllerImpl::safeNotifyAlwaysAsync(v47, v49, v63);

        goto LABEL_85;
      }
    }
    else
    {
      unsigned int v44 = MEMORY[0x1E4F14500];
      id v45 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 586;
      __int16 v71 = 2048;
      *(void *)unsigned int v72 = v46;
      _os_log_impl(&dword_19D794000, v44, OS_LOG_TYPE_DEFAULT, "%25s:%-5d StreamID(%lu) is not associated with primary session, noop", buf, 0x1Cu);
    }

    goto LABEL_84;
  }
LABEL_39:
  uint64_t v28 = v67;
  char v27 = v68;
  if (v68) {
    atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 3321888768;
  id v52 = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2;
  id v53 = &unk_1EEFA8D58;
  char v62 = *(unsigned char *)(a1 + 92);
  uint64_t v57 = *(void *)(a1 + 48);
  uint64_t v58 = v28;
  id v59 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v25 = v25;
  uint64_t v30 = *(void *)(a1 + 64);
  UInt32 v29 = *(std::__shared_weak_count **)(a1 + 72);
  id v54 = v25;
  uint64_t v60 = v30;
  id v61 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v56 = *(id *)(a1 + 40);
  id v55 = *(id *)(a1 + 32);
  uint64_t v31 = v51;
  int v32 = v31;
  if (v28) {
    (*(void (**)(uint64_t, void *, const char *))(*(void *)v28 + 360))(v28, v31, "AVVCDoSafeOrSynchronousWork");
  }
  else {
    v52((uint64_t)v31);
  }

  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }

  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }

  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
LABEL_85:

  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }

  VCLocker::~VCLocker((VCLocker *)v69);
}

void sub_19D834140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }

  VCLocker::~VCLocker((VCLocker *)(v32 - 144));
  _Unwind_Resume(a1);
}

void ControllerImpl::safeWork(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v5 = a2;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      uint64_t v6 = (std::recursive_mutex *)(a1 + 104);
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 104));
      if (*(unsigned char *)(a1 + 520))
      {
        uint64_t v7 = *(NSObject **)kAVVCScope;
        unint64_t v8 = CALog::Scope::oslog(*(id *)kAVVCScope);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          int v9 = 136315138;
          uint64_t v10 = a3;
          _os_log_fault_impl(&dword_19D794000, v7, OS_LOG_TYPE_FAULT, "Warning: Tyring to do safeWork on impl work queue while in tearDown. Caller: %s", (uint8_t *)&v9, 0xCu);
        }
      }
      v5[2](v5);
      std::recursive_mutex::unlock(v6);
    }
    else
    {
      v5[2](v5);
    }
  }
}

void sub_19D834394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 72);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_121(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void ControllerImpl::safeNotifyAlwaysAsync(uint64_t a1, int a2, void *a3)
{
  int v5 = a3;
  if (v5 && a2)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (std::recursive_mutex *)(a1 + 40);
    std::recursive_mutex::lock(v6);
    v7[2]();
    std::recursive_mutex::unlock(v6);
    int v5 = v7;
  }
}

void sub_19D834474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::recursive_mutex::unlock(v10);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if ((!*(unsigned char *)(a1 + 96) || *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) && *(void *)(a1 + 64))
  {
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      if (!v3) {
        goto LABEL_35;
      }
    }
    else
    {
      id v3 = (id)MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    int v5 = v3;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
LABEL_34:

      goto LABEL_35;
    }
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      uint64_t v1 = (*(void (**)(void, void))(*(void *)v6 + 64))(*(void *)(a1 + 64), 0);
      switch([v1 sessionState])
      {
        case 0u:
          goto LABEL_12;
        case 1u:
          uint64_t v7 = "Inactive";
          break;
        case 2u:
          uint64_t v7 = "InteruptedWhileRecording";
          break;
        case 3u:
          uint64_t v7 = "InteruptedWhilePlaying";
          break;
        case 4u:
          uint64_t v7 = "Deactivating";
          break;
        case 5u:
          uint64_t v7 = "Prewarming";
          break;
        case 6u:
          uint64_t v7 = "Activating";
          break;
        case 7u:
          uint64_t v7 = "Active";
          break;
        default:
          uint64_t v7 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_12:
      uint64_t v7 = "NotConfigured";
    }
    uint64_t v8 = *(void *)(a1 + 64);
    int v9 = *(std::__shared_weak_count **)(a1 + 72);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v8)
      {
        uint64_t v10 = NSString;
        uint64_t v11 = *(void *)(v8 + 272);
        uint64_t v12 = v9->__shared_owners_ + 1;
LABEL_18:
        uint64_t v13 = [v10 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v8, v11, v12];
LABEL_20:
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)(a1 + 64);
        if (v15)
        {
          unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 320))(v15);
          if (v16 > 4) {
            int v17 = "ILLEGAL";
          }
          else {
            int v17 = off_1E59657C0[v16];
          }
          uint64_t v19 = *(void *)(a1 + 64);
          if (v19)
          {
            switch(*(void *)(v19 + 224))
            {
              case 0:
                int v18 = "Invalid";
                break;
              case 1:
                int v18 = "Uninitialized";
                break;
              case 2:
                int v18 = "Prepared";
                break;
              case 3:
                int v18 = "Stopped";
                break;
              case 4:
                int v18 = "Starting";
                break;
              case 5:
                int v18 = "Running";
                break;
              case 6:
                int v18 = "Stopping";
                break;
              default:
                int v18 = "ILLEGAL";
                break;
            }
          }
          else
          {
            int v18 = "unconfigured";
          }
        }
        else
        {
          int v17 = "unconfigured";
          int v18 = "unconfigured";
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
        unsigned int v70 = "ControllerImpl.mm";
        __int16 v71 = 1024;
        int v72 = 599;
        __int16 v73 = 2080;
        id v74 = v7;
        __int16 v75 = 2112;
        id v76 = v14;
        __int16 v77 = 2080;
        UInt32 v78 = v17;
        __int16 v79 = 2080;
        id v80 = v18;
        _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);

        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        if (v6) {

        }
        goto LABEL_34;
      }
    }
    else if (v8)
    {
      uint64_t v12 = 0;
      uint64_t v10 = NSString;
      uint64_t v11 = *(void *)(v8 + 272);
      goto LABEL_18;
    }
    uint64_t v13 = @"(0x0) use_count:0";
    goto LABEL_20;
  }
LABEL_35:
  if (![*(id *)(a1 + 32) sessionState])
  {
    if (kAVVCScope)
    {
      int v21 = *(id *)kAVVCScope;
      if (!v21)
      {
LABEL_52:
        uint64_t v31 = *(void *)(a1 + 80);
        uint64_t v32 = *(void **)(a1 + 48);
        BOOL v33 = v32 != 0;
        v67[0] = MEMORY[0x1E4F143A8];
        v67[1] = 3221225472;
        v67[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_124;
        v67[3] = &unk_1E5965A18;
        id v68 = v32;
        ControllerImpl::safeNotifyAlwaysAsync(v31, v33, v67);

        return;
      }
    }
    else
    {
      int v21 = MEMORY[0x1E4F14500];
      id v30 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v70 = "ControllerImpl.mm";
      __int16 v71 = 1024;
      int v72 = 607;
      _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d deactivateSessionForListening: Error! Attemtping to deactivate a session that is not configured.", buf, 0x12u);
    }

    goto LABEL_52;
  }
  if ((int)[*(id *)(a1 + 32) sessionState] < 5)
  {
    uint64_t v22 = *(void *)(a1 + 64);
    uint64_t v23 = *(void *)(a1 + 80);
    unint64_t v24 = *(std::__shared_weak_count **)(a1 + 88);
    v54[0] = v23;
    v54[1] = (uint64_t)v24;
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v23 = *(void *)(a1 + 80);
      id v25 = *(std::__shared_weak_count **)(a1 + 88);
    }
    else
    {
      id v25 = 0;
    }
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3321888768;
    v49[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_3;
    v49[3] = &unk_1EEFA8430;
    uint64_t v52 = v23;
    id v53 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v34 = v22 != 0;
    id v50 = *(id *)(a1 + 40);
    long long v46 = *(_OWORD *)(a1 + 48);
    id v35 = (id)v46;
    long long v51 = v46;
    AVVCDoSafeOrSynchronousWork<std::shared_ptr<ControllerImpl>>(v34, v54, v49);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }

    int8x8_t v36 = v53;
    if (v53) {
      goto LABEL_79;
    }
  }
  else
  {
    if ([*(id *)(a1 + 32) isPrimary])
    {
      if (kAVVCScope)
      {
        uint64_t v20 = *(id *)kAVVCScope;
        if (!v20)
        {
LABEL_64:
          [*(id *)(a1 + 32) setSessionState:4];
          uint64_t v38 = *(void *)(a1 + 64);
          uint8x8_t v39 = *(std::__shared_weak_count **)(a1 + 88);
          v66[0] = *(void *)(a1 + 80);
          v66[1] = (uint64_t)v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v61[0] = MEMORY[0x1E4F143A8];
          v61[1] = 3321888768;
          v61[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_126;
          v61[3] = &unk_1EEFA8430;
          id v40 = *(id *)(a1 + 40);
          uint64_t v42 = *(void *)(a1 + 80);
          __int16 v41 = *(std::__shared_weak_count **)(a1 + 88);
          id v62 = v40;
          uint64_t v64 = v42;
          id v65 = v41;
          if (v41) {
            atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v47 = *(_OWORD *)(a1 + 48);
          id v43 = (id)v47;
          long long v63 = v47;
          AVVCDoSafeOrSynchronousWork<std::shared_ptr<ControllerImpl>>(v38 != 0, v66, v61);
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }

          if (v65) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v65);
          }

          return;
        }
      }
      else
      {
        uint64_t v20 = MEMORY[0x1E4F14500];
        id v37 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unsigned int v70 = "ControllerImpl.mm";
        __int16 v71 = 1024;
        int v72 = 617;
        _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: Deactivating session with notify ####", buf, 0x12u);
      }

      goto LABEL_64;
    }
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v27 = *(void *)(a1 + 80);
    uint64_t v28 = *(std::__shared_weak_count **)(a1 + 88);
    v60[0] = v27;
    v60[1] = (uint64_t)v28;
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v27 = *(void *)(a1 + 80);
      UInt32 v29 = *(std::__shared_weak_count **)(a1 + 88);
    }
    else
    {
      UInt32 v29 = 0;
    }
    v55[0] = MEMORY[0x1E4F143A8];
    v55[1] = 3321888768;
    v55[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_132;
    v55[3] = &unk_1EEFA8430;
    uint64_t v58 = v27;
    id v59 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v44 = v26 != 0;
    id v56 = *(id *)(a1 + 40);
    long long v48 = *(_OWORD *)(a1 + 48);
    id v45 = (id)v48;
    long long v57 = v48;
    AVVCDoSafeOrSynchronousWork<std::shared_ptr<ControllerImpl>>(v44, v60, v55);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }

    int8x8_t v36 = v59;
    if (v59) {
LABEL_79:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
}

void sub_19D834CC4(_Unwind_Exception *a1)
{
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v3) {

  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_64c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_64c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[11];
  result[10] = a2[10];
  result[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_124(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11781 userInfo:0];
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_19D834EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_126(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 56);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2_128;
  v24[3] = &unk_1E5965B28;
  objc_copyWeak(&v25, &location);
  ControllerImpl::safeNotify(v2, (uint64_t)"beginAudioSessionActivate", v24);
  ControllerImpl::stopKeepAliveQueue(*(ControllerImpl **)(*(void *)(a1 + 56) + 8), *(std::__shared_weak_count **)(*(void *)(a1 + 56) + 16));
  uint64_t v3 = *(void *)(a1 + 56);
  if (!*(_DWORD *)(v3 + 364))
  {
    if (!ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v3))
    {
LABEL_37:
      int v14 = ControllerImpl::deactivateSession(*(ControllerImpl **)(a1 + 56), *(AVVoiceController **)(a1 + 32), (uint64_t)"deactivateSessionForListening1", *(const char **)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
      goto LABEL_38;
    }
    if (kAVVCScope)
    {
      if (*(unsigned char *)(kAVVCScope + 8))
      {
        int v5 = *(id *)kAVVCScope;
        if (v5)
        {
          uint64_t v6 = v5;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            BOOL v34 = "ControllerImpl.mm";
            __int16 v35 = 1024;
            int v36 = 636;
            _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d deactivateSessionForListening: resetting alert queue", buf, 0x12u);
          }
        }
      }
    }
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "deactivateSessionForListening_block_invoke", "deactivateSessionForListening:AudioQueueReset", 0);
    AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue(*(ControllerImpl **)(a1 + 56));
    OSStatus v8 = AudioQueueReset(AlertQueueFromImplQueue);
    OSStatus v9 = v8;
    if (!v8)
    {
LABEL_36:
      ControllerImpl::setAlertQueueState(*(void *)(a1 + 56), 200);
      ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
      goto LABEL_37;
    }
    if ((v8 + 199999) > 0x61A7E)
    {
      if (kAVVCScope)
      {
        uint64_t v10 = *(id *)kAVVCScope;
        if (!v10) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v10 = MEMORY[0x1E4F14500];
        id v17 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      *(_DWORD *)uint64_t v27 = 136315650;
      uint64_t v28 = "ControllerImpl.mm";
      __int16 v29 = 1024;
      int v30 = 639;
      __int16 v31 = 1024;
      OSStatus v32 = v9;
      unsigned int v16 = "%25s:%-5d ERROR: setSessionActive(false): ignoring AudioQueueReset err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        uint64_t v10 = *(id *)kAVVCScope;
        if (!v10) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v10 = MEMORY[0x1E4F14500];
        id v15 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      *(_DWORD *)uint64_t v27 = 136315650;
      uint64_t v28 = "ControllerImpl.mm";
      __int16 v29 = 1024;
      int v30 = 639;
      __int16 v31 = 1024;
      OSStatus v32 = v9;
      unsigned int v16 = "%25s:%-5d ERROR: setSessionActive(false): ignoring AudioQueueReset err %d";
    }
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, v16, v27, 0x18u);
LABEL_35:

    goto LABEL_36;
  }
  if (!kAVVCScope)
  {
    id v4 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
    goto LABEL_18;
  }
  id v4 = *(id *)kAVVCScope;
  if (v4)
  {
LABEL_18:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 56) + 364);
      if (v12 > 3) {
        uint64_t v13 = "ILLEGAL";
      }
      else {
        uint64_t v13 = off_1E5965738[v12];
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      BOOL v34 = "ControllerImpl.mm";
      __int16 v35 = 1024;
      int v36 = 646;
      __int16 v37 = 2080;
      uint64_t v38 = v13;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d deactivateSessionForListening: alert state %s -- deactivating session in alertFinished", buf, 0x1Cu);
    }
  }
  ControllerImpl::notifyAlertFinished(*(ControllerImpl **)(a1 + 56), *(AVVoiceController **)(a1 + 32));
  int v14 = 0;
LABEL_38:
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void **)(a1 + 40);
  BOOL v20 = v19 != 0;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_131;
  v21[3] = &unk_1E5964EC8;
  int v23 = v14;
  id v22 = v19;
  ControllerImpl::safeNotifyAlwaysAsync(v18, v20, v21);

  objc_destroyWeak(&v25);
  objc_destroyWeak(&location);
}

void sub_19D83534C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void AVVCDoSafeOrSynchronousWork<std::shared_ptr<ControllerImpl>>(int a1, uint64_t *a2, void *a3)
{
  int v5 = a3;
  if (v5)
  {
    if (a1) {
      ControllerImpl::safeWork(*a2, v5, (uint64_t)"AVVCDoSafeOrSynchronousWork");
    }
    else {
      v5[2](v5);
    }
  }
}

void sub_19D835410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_132(uint64_t a1)
{
  uint64_t v1 = a1;
  int v2 = ControllerImpl::deactivateSession(*(ControllerImpl **)(a1 + 56), *(AVVoiceController **)(a1 + 32), (uint64_t)"deactivateSessionForListening1", *(const char **)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  uint64_t v3 = *(void *)(v1 + 56);
  id v4 = *(void **)(v1 + 40);
  LODWORD(v1) = v4 != 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2_133;
  v5[3] = &unk_1E5964EC8;
  int v7 = v2;
  id v6 = v4;
  ControllerImpl::safeNotifyAlwaysAsync(v3, v1, v5);
}

void sub_19D8354E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_3(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(const char **)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v4 = (AVVoiceController *)*(id *)(a1 + 32);
  if (kAVVCScope)
  {
    id v5 = *(id *)kAVVCScope;
    if (!v5) {
      goto LABEL_12;
    }
  }
  else
  {
    id v5 = (id)MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  int v7 = v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&location, *(void *)(v2 + 8), *(std::__shared_weak_count **)(v2 + 16));
    unsigned int SessionState = ControllerImpl::getSessionState((ControllerImpl *)location, (unint64_t)v3);
    if (SessionState > 7) {
      OSStatus v9 = "ILLEGAL";
    }
    else {
      OSStatus v9 = off_1E59658A8[SessionState];
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 856;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = "deactivateSessionForListening2";
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v9;
    _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s - setSessionActive(false): session state already %s -- forcing deactivation", buf, 0x26u);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }

LABEL_12:
  ControllerImpl::setSessionState(v2, 4, (unint64_t)v3);
  objc_initWeak(&location, v4);
  *(void *)AudioStreamBasicDescription buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl35forceDeactivateSessionAndFixupStateEP17AVVoiceControlleriPKcm_block_invoke;
  *(void *)&buf[24] = &unk_1E5965B28;
  objc_copyWeak((id *)&buf[32], &location);
  ControllerImpl::safeNotify(v2, (uint64_t)"beginAudioSessionActivate", buf);
  int v10 = ControllerImpl::deactivateSession((ControllerImpl *)v2, v4, (uint64_t)"deactivateSessionForListening2", v3);
  objc_destroyWeak((id *)&buf[32]);
  objc_destroyWeak(&location);

  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void **)(a1 + 40);
  BOOL v13 = v12 != 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_4;
  v14[3] = &unk_1E5964EC8;
  int v16 = v10;
  id v15 = v12;
  ControllerImpl::safeNotifyAlwaysAsync(v11, v13, v14);
}

void sub_19D835794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_4(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:v2 userInfo:0];
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19D83587C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::getSessionState(ControllerImpl *this, unint64_t a2)
{
  uint64_t v2 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, a2, 0);
  uint64_t v3 = [v2 sessionState];

  return v3;
}

void sub_19D8358CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::setSessionState(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    id v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_11;
    }
  }
  else
  {
    id v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 7) {
      OSStatus v8 = "ILLEGAL";
    }
    else {
      OSStatus v8 = off_1E59658A8[a2];
    }
    int v10 = 136315906;
    uint64_t v11 = "ControllerImpl.h";
    __int16 v12 = 1024;
    int v13 = 369;
    __int16 v14 = 1024;
    int v15 = a3;
    __int16 v16 = 2080;
    id v17 = v8;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d session state(streamID %d) => %s", (uint8_t *)&v10, 0x22u);
  }

LABEL_11:
  OSStatus v9 = ControllerImpl::sessionManagerForStreamID(a1, a3, 0);
  [v9 setSessionState:a2];
}

void sub_19D835A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl35forceDeactivateSessionAndFixupStateEP17AVVoiceControlleriPKcm_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained beginAudioSessionActivate:0];
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v3 = *(id *)kAVVCScope;
      if (!v3) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      id v6 = "ControllerImpl.mm";
      __int16 v7 = 1024;
      int v8 = 862;
      __int16 v9 = 2048;
      uint64_t v10 = 0;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D835B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::safeNotify(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v5 = a3;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      id v6 = (std::recursive_mutex *)(a1 + 40);
      std::recursive_mutex::lock(v6);
      v5[2](v5);
      std::recursive_mutex::unlock(v6);
      goto LABEL_14;
    }
    if (kAVVCScope)
    {
      __int16 v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_13:
        v5[2](v5);
        goto LABEL_14;
      }
    }
    else
    {
      __int16 v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315650;
      uint64_t v10 = "ControllerImpl.mm";
      __int16 v11 = 1024;
      int v12 = 4457;
      __int16 v13 = 2080;
      uint64_t v14 = a2;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling %s synchronously", (uint8_t *)&v9, 0x1Cu);
    }

    goto LABEL_13;
  }
LABEL_14:
}

void sub_19D835CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::deactivateSession(ControllerImpl *this, AVVoiceController *a2, uint64_t a3, const char *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  val = a2;
  int v40 = 4112;
  char v41 = 1;
  long long v42 = 0u;
  long long v43 = 0u;
  kdebug_trace();
  uint64_t v34 = 0;
  __int16 v35 = &v34;
  uint64_t v36 = 0x3032000000;
  __int16 v37 = __Block_byref_object_copy__5561;
  uint64_t v38 = __Block_byref_object_dispose__5562;
  id v39 = 0;
  uint64_t SessionState = ControllerImpl::getSessionState(this, (unint64_t)a4);
  __int16 v7 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, (unint64_t)a4, 0);
  int v8 = [v7 getSessionActivationOptions];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN14ControllerImpl17deactivateSessionEP17AVVoiceControlleriPKcm_block_invoke;
  aBlock[3] = &unk_1E5965880;
  id v9 = v7;
  int v33 = v8;
  id v31 = v9;
  OSStatus v32 = &v34;
  uint64_t v10 = _Block_copy(aBlock);
  if (kAVVCScope)
  {
    id v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_8;
    }
  }
  else
  {
    id v11 = (id)MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  __int16 v13 = v11;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = ControllerImpl::audioSessionForStreamID((uint64_t)this, (unint64_t)a4, 0);
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    id v54 = "ControllerImpl.mm";
    __int16 v55 = 1024;
    int v56 = 881;
    __int16 v57 = 2048;
    uint64_t v58 = v14;
    __int16 v59 = 2048;
    id v60 = v9;
    _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d deactivate session (%p) (session mananger (%p))", buf, 0x26u);
  }
LABEL_8:
  kdebug_trace();
  ElapsedTime::ElapsedTime((ElapsedTime *)buf, "deactivateSession", "AVAudioSessionDeactivate", 0);
  uint64_t v15 = +[AVVCMetricsManager sharedManager];
  char v16 = [v15 measureElapseTimeForMetric:@"SetSessionInactiveTime" block:v10];

  if (v16) {
    goto LABEL_9;
  }
  uint64_t v17 = [(id)v35[5] code];
  if (!v17) {
    goto LABEL_9;
  }
  if (kAVVCScope)
  {
    id v18 = *(id *)kAVVCScope;
    if (!v18) {
      goto LABEL_18;
    }
  }
  else
  {
    id v18 = (id)MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  uint64_t v20 = v18;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v44, v17);
    *(_DWORD *)id v45 = 136315906;
    long long v46 = "ControllerImpl.mm";
    __int16 v47 = 1024;
    int v48 = 888;
    __int16 v49 = 2080;
    uint64_t v50 = a3;
    __int16 v51 = 2080;
    uint64_t v52 = v44;
    _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: %s setActive:FALSE withOptions: err %s", v45, 0x26u);
  }

LABEL_18:
  if (v17 == 560030580)
  {
LABEL_9:
    ControllerImpl::setSessionState((uint64_t)this, 1, (unint64_t)a4);
LABEL_31:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear((void *)this + 60);
    uint64_t v17 = 0;
    goto LABEL_32;
  }
  if (v17 == 1836282486)
  {
    ControllerImpl::setSessionState((uint64_t)this, 0, (unint64_t)a4);
    if (kAVVCScope)
    {
      int v21 = *(id *)kAVVCScope;
      if (!v21) {
        goto LABEL_31;
      }
    }
    else
    {
      int v21 = MEMORY[0x1E4F14500];
      id v23 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id v45 = 136315650;
      long long v46 = "ControllerImpl.mm";
      __int16 v47 = 1024;
      int v48 = 897;
      __int16 v49 = 2080;
      uint64_t v50 = a3;
      _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: %s - error AVAudioSessionErrorCodeMediaServicesFailed ####", v45, 0x1Cu);
    }

    goto LABEL_31;
  }
  ControllerImpl::setSessionState((uint64_t)this, SessionState, (unint64_t)a4);
  if (kAVVCScope)
  {
    id v22 = *(id *)kAVVCScope;
    if (!v22) {
      goto LABEL_32;
    }
  }
  else
  {
    id v22 = MEMORY[0x1E4F14500];
    id v25 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id v45 = 136315650;
    long long v46 = "ControllerImpl.mm";
    __int16 v47 = 1024;
    int v48 = 893;
    __int16 v49 = 2080;
    uint64_t v50 = a3;
    _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: %s - error ####", v45, 0x1Cu);
  }

LABEL_32:
  kdebug_trace();
  if (ControllerImpl::audioSessionForStreamIDIsPrimary(this, (unint64_t)a4))
  {
    objc_initWeak((id *)v45, val);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = ___ZN14ControllerImpl17deactivateSessionEP17AVVoiceControlleriPKcm_block_invoke_146;
    v28[3] = &unk_1E5965B28;
    objc_copyWeak(&v29, (id *)v45);
    ControllerImpl::safeNotify((uint64_t)this, (uint64_t)"endAudioSessionActivate", v28);
    objc_destroyWeak(&v29);
    objc_destroyWeak((id *)v45);
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)buf);

  _Block_object_dispose(&v34, 8);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v40);

  return v17;
}

void sub_19D836320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  ElapsedTime::~ElapsedTime((ElapsedTime *)&a43);
  _Block_object_dispose(&a24, 8);

  TraceWrapper::~TraceWrapper((TraceWrapper *)&a30);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5561(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5562(uint64_t a1)
{
}

uint64_t ___ZN14ControllerImpl17deactivateSessionEP17AVVoiceControlleriPKcm_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = [v2 setActive:0 withOptions:v1 error:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

BOOL ControllerImpl::audioSessionForStreamIDIsPrimary(ControllerImpl *this, unint64_t a2)
{
  uint64_t v2 = ControllerImpl::audioSessionForStreamID((uint64_t)this, a2, 0);
  uint64_t v3 = [MEMORY[0x1E4F4E9F8] sharedInstance];
  BOOL v4 = v2 == v3;

  return v4;
}

void sub_19D836508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl17deactivateSessionEP17AVVoiceControlleriPKcm_block_invoke_146(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained endAudioSessionActivate:0];
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v3 = *(id *)kAVVCScope;
      if (!v3) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      id v6 = "ControllerImpl.mm";
      __int16 v7 = 1024;
      int v8 = 919;
      __int16 v9 = 2048;
      uint64_t v10 = 0;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D836624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2_133(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:v2 userInfo:0];
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19D8366C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_2_128(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained beginAudioSessionActivate:0];
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v3 = *(id *)kAVVCScope;
      if (!v3) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      id v6 = "ControllerImpl.mm";
      __int16 v7 = 1024;
      int v8 = 627;
      __int16 v9 = 2048;
      uint64_t v10 = 0;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D8367E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::stopKeepAliveQueue(ControllerImpl *this, std::__shared_weak_count *a2)
{
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v4, (uint64_t)this, a2);
  uint64_t v2 = +[AVVCKeepAliveManager sharedManager];
  [v2 stopWithCompletion:0];

  uint64_t v3 = +[AVVCKeepAliveManager sharedManager];
  [v3 destroyWithCompletion:0];

  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_19D836874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v11 = v10;

  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void ControllerImpl::notifyAlertFinished(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v3 = a2;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v15, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t v4 = v15;
  int v5 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AlertLock::AlertLock(v14, (uint64_t)v4, v5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = *((_DWORD *)v15 + 51);
  if (v6)
  {
    __int16 v7 = (void *)*((void *)v15 + 26);
    int v8 = (void *)*((void *)v15 + 49);
    objc_initWeak(&location, v3);
    __int16 v9 = v15;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = ___ZN14ControllerImpl19notifyAlertFinishedEP17AVVoiceController_block_invoke;
    v10[3] = &unk_1E5965058;
    objc_copyWeak(v11, &location);
    int v12 = v6;
    v11[1] = v7;
    v11[2] = v8;
    ControllerImpl::safeNotify((uint64_t)v9, (uint64_t)"notifyAlertFinished", v10);
    ControllerImpl::alertFinished(v15, v3);
    objc_destroyWeak(v11);
    objc_destroyWeak(&location);
  }
  VCLocker::~VCLocker((VCLocker *)v14);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_19D8369E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  VCLocker::~VCLocker((VCLocker *)&a19);
  id v23 = *(std::__shared_weak_count **)(v21 - 56);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptionsU13block_pointerFvP7NSErrorE_block_invoke_131(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:v2 userInfo:0];
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19D836AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19notifyAlertFinishedEP17AVVoiceController_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = [[AVVCAlertInformation alloc] initWithAlertType:*(unsigned int *)(a1 + 56) mode:*(void *)(a1 + 40) endTime:*(void *)(a1 + 48)];
    [WeakRetained alertPlaybackFinishedWithSettings:v3];
  }
  else
  {
    if (kAVVCScope)
    {
      id v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      id v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      __int16 v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 2608;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D836BFC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void ControllerImpl::alertFinished(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v31, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  TraceMethod::TraceMethod((TraceMethod *)v30, "alertFinished");
  if (kAVVCScope)
  {
    id v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    id v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    uint64_t v34 = "ControllerImpl.mm";
    __int16 v35 = 1024;
    int v36 = 2549;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d alertFinished", buf, 0x12u);
  }

LABEL_8:
  ControllerImpl::setAlertState((uint64_t)this, 0);
  if (*((int *)this + 90) > 201)
  {
    __int16 v7 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
    if ([v7 sessionState] != 4)
    {
LABEL_60:

      if (ControllerImpl::getAlertQueueFromImplQueue(this)) {
        int v25 = 200;
      }
      else {
        int v25 = 0;
      }
      ControllerImpl::setAlertQueueState((uint64_t)this, v25);
      *((_DWORD *)this + 51) = 0;
      *((void *)this + 26) = 0;
      goto LABEL_64;
    }
    uint64_t v8 = v31;
    int v9 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SessionLock::SessionLock(v29, v8, v9);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (kAVVCScope)
    {
      __int16 v10 = *(id *)kAVVCScope;
      if (!v10) {
        goto LABEL_28;
      }
    }
    else
    {
      __int16 v10 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v34 = "ControllerImpl.mm";
      __int16 v35 = 1024;
      int v36 = 2566;
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d alertFinished: deactivating session -- finishing the job", buf, 0x12u);
    }

LABEL_28:
    uint64_t v15 = [v7 sessionState];
    id v28 = 0;
    char v16 = objc_msgSend(v7, "setActive:withOptions:error:", 0, objc_msgSend(v7, "getSessionActivationOptions"), &v28);
    id v17 = v28;
    id v18 = v17;
    if (v16)
    {
      [v7 setSessionState:1];
LABEL_59:
      objc_initWeak((id *)buf, v3);
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      _OWORD v26[2] = ___ZN14ControllerImpl13alertFinishedEP17AVVoiceController_block_invoke;
      v26[3] = &unk_1E5965B28;
      objc_copyWeak(&v27, (id *)buf);
      ControllerImpl::safeNotify((uint64_t)this, (uint64_t)"endAudioSessionActivate", v26);
      objc_destroyWeak(&v27);
      objc_destroyWeak((id *)buf);

      VCLocker::~VCLocker((VCLocker *)v29);
      goto LABEL_60;
    }
    int v19 = [v17 code];
    int v20 = v19;
    if (v19)
    {
      if ((v19 + 199999) <= 0x61A7E)
      {
        if (kAVVCScope)
        {
          uint64_t v21 = *(id *)kAVVCScope;
          if (!v21) {
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v21 = MEMORY[0x1E4F14500];
          id v22 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          uint64_t v34 = "ControllerImpl.mm";
          __int16 v35 = 1024;
          int v36 = 2573;
          __int16 v37 = 1024;
          LODWORD(v38) = v20;
          id v23 = "%25s:%-5d ERROR: alertFinished: setActive:FALSE withOptions: err %d";
LABEL_55:
          _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_ERROR, v23, buf, 0x18u);
          goto LABEL_56;
        }
        goto LABEL_56;
      }
      if (kAVVCScope)
      {
        uint64_t v21 = *(id *)kAVVCScope;
        if (!v21) {
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v21 = MEMORY[0x1E4F14500];
        id v24 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        uint64_t v34 = "ControllerImpl.mm";
        __int16 v35 = 1024;
        int v36 = 2573;
        __int16 v37 = 1024;
        LODWORD(v38) = v20;
        id v23 = "%25s:%-5d ERROR: alertFinished: setActive:FALSE withOptions: err %{audio:4CC}d";
        goto LABEL_55;
      }
LABEL_56:
    }
LABEL_57:
    if (v20 != 560030580) {
      [v7 setSessionState:v15];
    }
    goto LABEL_59;
  }
  if (!kAVVCScope)
  {
    int v6 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
    goto LABEL_21;
  }
  int v6 = *(id *)kAVVCScope;
  if (v6)
  {
LABEL_21:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *((_DWORD *)this + 90);
      switch(v12)
      {
        case 200:
          __int16 v13 = "stopped";
          break;
        case 201:
          __int16 v13 = "primed";
          break;
        case 202:
          __int16 v13 = "stopping";
          break;
        case 203:
          __int16 v13 = "started";
          break;
        case 204:
          __int16 v13 = "running";
          break;
        default:
          if (v12) {
            __int16 v13 = "ILLEGAL";
          }
          else {
            __int16 v13 = "uninit";
          }
          break;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      uint64_t v34 = "ControllerImpl.mm";
      __int16 v35 = 1024;
      int v36 = 2554;
      __int16 v37 = 2080;
      uint64_t v38 = v13;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d alertFinished: state = %s -- not priming alert", buf, 0x1Cu);
    }
  }
  if (*((_DWORD *)this + 90) != 201) {
    ControllerImpl::setAlertQueueState((uint64_t)this, 200);
  }
LABEL_64:
  TraceMethod::~TraceMethod((TraceMethod *)v30);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
}

void sub_19D8371DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, std::__shared_weak_count *a20,id location)
{
  VCLocker::~VCLocker((VCLocker *)&a16);
  TraceMethod::~TraceMethod((TraceMethod *)&a18);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  _Unwind_Resume(a1);
}

void ControllerImpl::setAlertState(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    id v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    id v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = off_1E5965738[a2];
    int v7 = 136315650;
    uint64_t v8 = "ControllerImpl.h";
    __int16 v9 = 1024;
    int v10 = 545;
    __int16 v11 = 2080;
    int v12 = v6;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d alert state => %s", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_8:
  *(_DWORD *)(a1 + 364) = a2;
}

void ___ZN14ControllerImpl13alertFinishedEP17AVVoiceController_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained endAudioSessionActivate:0];
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v3 = *(id *)kAVVCScope;
      if (!v3) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      int v6 = "ControllerImpl.mm";
      __int16 v7 = 1024;
      int v8 = 2585;
      __int16 v9 = 2048;
      uint64_t v10 = 0;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D83748C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0,std::allocator<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  id v4 = (*(void (**)(uint64_t, void))(*(void *)v3 + 56))(v3, 0);
  int v5 = [MEMORY[0x1E4F4E9F8] sharedInstance];

  if (v4 == v5)
  {
    int v6 = (*(void (**)(uint64_t, void))(*(void *)v3 + 64))(v3, 0);
    [v6 setClientRequestsRecording:0];

    (*(void (**)(uint64_t))(*(void *)v3 + 288))(v3);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_19D8375C0(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0,std::allocator<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EEFA3498;
}

void *std::__function::__func<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0,std::allocator<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EEFA3498;
  return result;
}

void std::__function::__func<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0,std::allocator<ControllerImpl::switchRecordModeOnDeactivate(unsigned long,NSError * {__autoreleasing}*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptions_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  char v6 = *(unsigned char *)(a1 + 76);
  uint64_t v7 = *(void *)(a1 + 64);
  int v8 = *(_DWORD *)(a1 + 72);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptions_block_invoke_2;
  v12[3] = &unk_1E5964EF0;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v13 = v3;
  uint64_t v14 = v9;
  id v11 = v3;
  ControllerImpl::deactivateSessionForListening(v4, v10, v5, v6, v7, v8, v12);
}

void sub_19D837734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29deactivateSessionForListeningEP17AVVoiceControllermbm23AVVCDeactivationOptions_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3) {
    LODWORD(vAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = [v3 code];
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  uint64_t v4 = *(NSObject **)(a1 + 32);
  if (v4) {
    dispatch_semaphore_signal(v4);
  }
}

void sub_19D8377B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::handlePluginDidPublishDevice(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (kAVVCScope)
  {
    id v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    id v8 = (id)MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  uint64_t v10 = v8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [v7 deviceIdentifier];
    int v12 = 136316162;
    id v13 = "ControllerImpl.mm";
    __int16 v14 = 1024;
    int v15 = 723;
    __int16 v16 = 2048;
    id v17 = v6;
    __int16 v18 = 2048;
    id v19 = v7;
    __int16 v20 = 2112;
    uint64_t v21 = v11;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d handlePluginDidPublishDevice notification for plugin(%p), device(%p), deviceID(%@)", (uint8_t *)&v12, 0x30u);
  }
LABEL_8:
}

void sub_19D837918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::_removeEngineFromMap(uint64_t a1, void *a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v30, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  int v12 = *(NSString **)(v30 + 576);
  id v13 = *(std::__shared_weak_count **)(v30 + 584);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12)
  {
    if (v10) {
      AVVCRecordingEngineMap::findEngine((std::__shared_weak_count **)buf, v12, v10);
    }
    else {
      AVVCRecordingEngineMap::findEngine((AVVCRecordingEngineMap *)buf, (uint64_t)v12, a3);
    }
    uint64_t v16 = *(void *)buf;
    int v15 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)buf)
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3321888768;
      _OWORD v20[2] = ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke;
      v20[3] = &unk_1EEFA79F0;
      uint64_t v23 = a1;
      uint64_t v24 = *(void *)buf;
      int v25 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = v30;
      id v27 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      id v28 = v12;
      id v29 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      id v21 = v9;
      uint64_t v22 = v11;
      (*(void (**)(uint64_t, void *, const char *))(*(void *)v16 + 360))(v16, v20, "_removeEngineFromMap");

      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
LABEL_38:
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      goto LABEL_40;
    }
    if (kAVVCScope)
    {
      id v17 = *(id *)kAVVCScope;
      if (!v17)
      {
LABEL_36:
        if (v11) {
          v11[2](v11);
        }
        goto LABEL_38;
      }
    }
    else
    {
      id v17 = MEMORY[0x1E4F14500];
      id v19 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4253;
      __int16 v33 = 2048;
      unint64_t v34 = a3;
      _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Engine for streamID(%llu) not found.", buf, 0x1Cu);
    }

    goto LABEL_36;
  }
  if (!kAVVCScope)
  {
    __int16 v14 = MEMORY[0x1E4F14500];
    id v18 = MEMORY[0x1E4F14500];
    goto LABEL_27;
  }
  __int16 v14 = *(id *)kAVVCScope;
  if (v14)
  {
LABEL_27:
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4239;
      _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
    }
  }
  if (v11) {
    v11[2](v11);
  }
LABEL_40:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
}

void sub_19D837CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    if (!v27)
    {
LABEL_4:
      if (a24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a24);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_4;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  goto LABEL_4;
}

void ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 272);
  if (!kAVVCScope)
  {
    id v4 = (id)MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
LABEL_5:
    id v6 = v4;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
LABEL_16:

      goto LABEL_17;
    }
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v7)
      {
        id v9 = NSString;
        uint64_t v10 = *(void *)(v7 + 272);
        uint64_t v11 = v8->__shared_owners_ + 1;
LABEL_11:
        int v12 = [v9 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v7, v10, v11];
LABEL_13:
        *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
        unint64_t v34 = "ControllerImpl.mm";
        __int16 v35 = 1024;
        int v36 = 4260;
        __int16 v37 = 2112;
        uint64_t v38 = v12;
        __int16 v39 = 2048;
        uint64_t v40 = v3;
        _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d removeEngineFromMapWithStreamID: engine[%@] stream(%llu) ", buf, 0x26u);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }

        goto LABEL_16;
      }
    }
    else if (v7)
    {
      uint64_t v11 = 0;
      id v9 = NSString;
      uint64_t v10 = *(void *)(v7 + 272);
      goto LABEL_11;
    }
    int v12 = @"(0x0) use_count:0";
    goto LABEL_13;
  }
  id v4 = *(id *)kAVVCScope;
  if (v4) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 224);
  if (v13 < 4) {
    goto LABEL_26;
  }
  if (!kAVVCScope)
  {
    __int16 v14 = MEMORY[0x1E4F14500];
    id v15 = MEMORY[0x1E4F14500];
    goto LABEL_22;
  }
  __int16 v14 = *(id *)kAVVCScope;
  if (v14)
  {
LABEL_22:
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unint64_t v34 = "ControllerImpl.mm";
      __int16 v35 = 1024;
      int v36 = 4265;
      _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopping recording here, engine's remote device has been disconnected.", buf, 0x12u);
    }
  }
  AVVCRecordingEngine::setRecordErrorStatus(*(AVVCRecordingEngine **)(a1 + 56), 0xFFFFD1F1, "_removeEngineFromMap_block_invoke");
LABEL_26:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v31, *(void *)(v2 + 8), *(std::__shared_weak_count **)(v2 + 16));
  RecordLock::RecordLock(buf, v31, v32);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  (*(void (**)(void, BOOL))(**(void **)(a1 + 56) + 112))(*(void *)(a1 + 56), v13 > 3);
  VCLocker::~VCLocker((VCLocker *)buf);
  AVVCRecordingEngine::resetCompletionBlocks(*(AVVCRecordingEngine **)(*(void *)(a1 + 56) + 8), *(std::__shared_weak_count **)(*(void *)(a1 + 56) + 16));
  uint64_t v16 = *(void *)(a1 + 72);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3321888768;
  v22[2] = ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke_362;
  v22[3] = &unk_1EEFA8CB0;
  uint64_t v18 = *(void *)(a1 + 88);
  id v17 = *(std::__shared_weak_count **)(a1 + 96);
  uint64_t v25 = v2;
  uint64_t v26 = v18;
  id v27 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = v3;
  id v19 = *(id *)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 72);
  __int16 v20 = *(std::__shared_weak_count **)(a1 + 80);
  id v23 = v19;
  uint64_t v29 = v21;
  uint64_t v30 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v24 = *(id *)(a1 + 40);
  ControllerImpl::safeWork(v16, v22, (uint64_t)"_removeEngineFromMap_block_invoke");

  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }

  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_19D838104(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE88c50_ZTSNSt3__110shared_ptrI22AVVCRecordingEngineMapEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[10];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  id v4 = (std::__shared_weak_count *)a1[8];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *__copy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE88c50_ZTSNSt3__110shared_ptrI22AVVCRecordingEngineMapEE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[12];
  result[11] = a2[11];
  result[12] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

unsigned char *RecordLock::RecordLock(unsigned char *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  VCLocker::VCLocker(a1, a2, 1u);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  return a1;
}

void sub_19D838274(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke_362(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  AVVCRecordingEngineMap::removeEngine(*(AVVCRecordingEngineMap **)(a1 + 56), *(void *)(a1 + 72));
  uint64_t v3 = *(void *)(a1 + 72);
  if (!v3 || *(void *)(v2 + 472) == v3) {
    *(void *)(v2 + 472) = 0;
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 80);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke_2;
  v6[3] = &unk_1E5965080;
  objc_copyWeak(v7, &location);
  v7[1] = *(id *)(a1 + 72);
  ControllerImpl::safeNotify(v4, (uint64_t)"notifyStreamInvalidated", v6);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_19D838384(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c50_ZTSNSt3__110shared_ptrI22AVVCRecordingEngineMapEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_56c50_ZTSNSt3__110shared_ptrI22AVVCRecordingEngineMapEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[11];
  result[10] = a2[10];
  result[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl20_removeEngineFromMapEP17AVVoiceControllermP8NSStringU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained notifyStreamInvalidated:*(void *)(a1 + 40)];
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 4282;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D838538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::configureAlerts(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v10, "configureAlerts");
  ElapsedTime::ElapsedTime((ElapsedTime *)v11, "configureAlerts", 0, 0);
  int v9 = 1;
  uint64_t v4 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 1, &v9);
  uint64_t v5 = ControllerImpl::setupAlert((uint64_t)this, v3, 1, v4[5]);
  if (!v5)
  {
    int v9 = 2;
    int v6 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 2, &v9);
    uint64_t v5 = ControllerImpl::setupAlert((uint64_t)this, v3, 2, v6[5]);
    if (!v5)
    {
      int v9 = 3;
      uint64_t v7 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 34, 3, &v9);
      uint64_t v5 = ControllerImpl::setupAlert((uint64_t)this, v3, 3, v7[5]);
    }
  }
  ElapsedTime::~ElapsedTime((ElapsedTime *)v11);
  TraceMethod::~TraceMethod((TraceMethod *)v10);

  return v5;
}

void sub_19D838694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  ElapsedTime::~ElapsedTime((ElapsedTime *)va1);
  TraceMethod::~TraceMethod((TraceMethod *)va);

  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::setupAlert(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  int v93 = a3;
  ExtAudioFileRef outExtAudioFile = 0;
  UInt32 ioPropertyDataSize = 0;
  inuint64_t Buffer = 0;
  uint64_t v90 = 0;
  uint64_t v88 = 0;
  memset(outPropertyData, 0, sizeof(outPropertyData));
  TraceMethod::TraceMethod((TraceMethod *)v86, "setupAlert");
  if (isDarwinOSProduct(void)::onceToken != -1) {
    dispatch_once(&isDarwinOSProduct(void)::onceToken, &__block_literal_global_160);
  }
  if (isDarwinOSProduct(void)::isDarwinOS)
  {
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  if (!a4)
  {
    if (kAVVCScope)
    {
      id v15 = *(id *)kAVVCScope;
      if (!v15)
      {
LABEL_19:
        uint64_t v8 = 4294967246;
        goto LABEL_5;
      }
    }
    else
    {
      id v15 = MEMORY[0x1E4F14500];
      id v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2162;
      _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d setupAlert: NULL alert URL", buf, 0x12u);
    }

    goto LABEL_19;
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(v95, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  id v10 = a4;
  uint64_t v11 = [v10 absoluteString];
  int v12 = [v11 isEqualToString:@"/System/Library/PrivateFrameworks/AssistantServices.framework/jbl_begin_sae.caf"];

  if (!v12) {
    goto LABEL_41;
  }
  uint64_t v13 = (int *)(a1 + 384);
  if (!*(_DWORD *)(a1 + 384))
  {
    id v17 = [MEMORY[0x1E4F28B50] mainBundle];
    uint64_t v18 = [v17 pathForResource:@"siri_activation" ofType:@"plist"];

    id v19 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithContentsOfFile:v18];
    __int16 v20 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v10, *MEMORY[0x1E4F18A00], v19, *MEMORY[0x1E4F18A10], 0);
    int SystemSoundIDWithOptions = AudioServicesCreateSystemSoundIDWithOptions();
    if (!SystemSoundIDWithOptions)
    {
      if (kAVVCScope)
      {
        uint64_t v25 = *(id *)kAVVCScope;
        if (!v25) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v25 = MEMORY[0x1E4F14500];
        id v27 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = *v13;
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        __int16 v100 = "ControllerImpl.mm";
        LOWORD(v101) = 1024;
        *(_DWORD *)((char *)&v101 + 2) = 1608;
        WORD3(v101) = 1024;
        DWORD2(v101) = v28;
        _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d createSAESystemSound: mSAESystemSoundID(%u)", buf, 0x18u);
      }

      goto LABEL_40;
    }
    if (kAVVCScope)
    {
      uint64_t v22 = *(id *)kAVVCScope;
      if (!v22)
      {
LABEL_35:
        *uint64_t v13 = 0;
LABEL_40:

        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v22 = MEMORY[0x1E4F14500];
      id v26 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 1605;
      WORD3(v101) = 1024;
      DWORD2(v101) = SystemSoundIDWithOptions;
      _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d createSAESystemSound: AudioServicesCreateSystemSoundIDWithOptions: Failed to create SAE sonics+haptics system sound. err(%d)", buf, 0x18u);
    }

    goto LABEL_35;
  }
  if (kAVVCScope)
  {
    __int16 v14 = *(id *)kAVVCScope;
    if (!v14) {
      goto LABEL_41;
    }
  }
  else
  {
    __int16 v14 = MEMORY[0x1E4F14500];
    id v23 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *v13;
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    __int16 v100 = "ControllerImpl.mm";
    LOWORD(v101) = 1024;
    *(_DWORD *)((char *)&v101 + 2) = 1594;
    WORD3(v101) = 1024;
    DWORD2(v101) = v24;
    _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d createSAESystemSound: SystemSoundID was already created. mSAESystemSoundID(%u)", buf, 0x18u);
  }

LABEL_41:
  if (*(void *)&v96[4]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v96[4]);
  }
  id v29 = v7;
  TraceMethod::TraceMethod((TraceMethod *)v95, "createAlertQueue");
  if (ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1))
  {
    uint64_t v8 = 0;
    goto LABEL_69;
  }
  *(void *)(a1 + 216) = 0x40CF400000000000;
  *(_OWORD *)(a1 + 224) = xmmword_19D8B1CF0;
  *(void *)(a1 + 240) = 0x100000002;
  *(_DWORD *)(a1 + 248) = 16;
  uint64_t v30 = *(__CFRunLoop **)(*(void *)(a1 + 192) + 128);
  AudioQueueRef outAQ = 0;
  uint64_t v31 = AudioQueueNewOutput((const AudioStreamBasicDescription *)(a1 + 216), (AudioQueueOutputCallback)ControllerImpl::AlertAQOutputCallback, v29, v30, 0, 0, &outAQ);
  uint64_t v8 = v31;
  if (v31)
  {
    if ((v31 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        OSStatus v32 = *(id *)kAVVCScope;
        if (!v32) {
          goto LABEL_68;
        }
      }
      else
      {
        OSStatus v32 = MEMORY[0x1E4F14500];
        id v36 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        goto LABEL_67;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2045;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      __int16 v35 = "%25s:%-5d ERROR: createAlertQueue: AudioQueueNewOutput err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        OSStatus v32 = *(id *)kAVVCScope;
        if (!v32) {
          goto LABEL_68;
        }
      }
      else
      {
        OSStatus v32 = MEMORY[0x1E4F14500];
        id v34 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
LABEL_67:

LABEL_68:
        ControllerImpl::setAlertQueueState(a1, 0);
        goto LABEL_69;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2045;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      __int16 v35 = "%25s:%-5d ERROR: createAlertQueue: AudioQueueNewOutput err %d";
    }
    _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_ERROR, v35, buf, 0x18u);
    goto LABEL_67;
  }
  ControllerImpl::setAlertQueueFromImplQueue((ControllerImpl *)a1, outAQ);
  ControllerImpl::setAlertQueueState(a1, 200);
  if (AudioQueueSetProperty(outAQ, 0x63756964u, &AudioQueueProperty_AlertQueueClientName, 8u))
  {
    if (kAVVCScope)
    {
      __int16 v33 = *(id *)kAVVCScope;
      if (!v33) {
        goto LABEL_120;
      }
    }
    else
    {
      __int16 v33 = MEMORY[0x1E4F14500];
      id v50 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2058;
      WORD3(v101) = 2112;
      *((void *)&v101 + 1) = @"AVVoiceController_AlertQueue";
      __int16 v51 = "%25s:%-5d FAILED createAlertQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
      uint64_t v52 = v33;
      os_log_type_t v53 = OS_LOG_TYPE_ERROR;
LABEL_118:
      _os_log_impl(&dword_19D794000, v52, v53, v51, buf, 0x1Cu);
      goto LABEL_119;
    }
    goto LABEL_119;
  }
  if (!kAVVCScope)
  {
    __int16 v33 = MEMORY[0x1E4F14500];
    id v54 = MEMORY[0x1E4F14500];
LABEL_116:
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2060;
      WORD3(v101) = 2112;
      *((void *)&v101 + 1) = @"AVVoiceController_AlertQueue";
      __int16 v51 = "%25s:%-5d createAlertQueue : AudioQueueSetProperty(kAudioQueueProperty_ClientUID) - %@";
      uint64_t v52 = v33;
      os_log_type_t v53 = OS_LOG_TYPE_DEBUG;
      goto LABEL_118;
    }
LABEL_119:

    goto LABEL_120;
  }
  __int16 v33 = *(id *)kAVVCScope;
  if (v33) {
    goto LABEL_116;
  }
LABEL_120:
  uint64_t v55 = AudioQueueAddPropertyListener(outAQ, 0x6171726Eu, (AudioQueuePropertyListenerProc)ControllerImpl::AlertAQPropertyListenerProc, v29);
  uint64_t v8 = v55;
  if (!v55)
  {
    *(_DWORD *)(a1 + 204) = 0;
    goto LABEL_69;
  }
  if ((v55 + 199999) < 0x61A7F)
  {
    if (kAVVCScope)
    {
      int v56 = *(id *)kAVVCScope;
      if (!v56) {
        goto LABEL_69;
      }
    }
    else
    {
      int v56 = MEMORY[0x1E4F14500];
      id v63 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2064;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      _os_log_impl(&dword_19D794000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAlertQueue: AudioQueueAddPropertyListener err %d", buf, 0x18u);
    }
LABEL_146:

    goto LABEL_69;
  }
  if (!kAVVCScope)
  {
    int v56 = MEMORY[0x1E4F14500];
    id v64 = MEMORY[0x1E4F14500];
LABEL_148:
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2064;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      _os_log_impl(&dword_19D794000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: createAlertQueue: AudioQueueAddPropertyListener err %{audio:4CC}d", buf, 0x18u);
    }
    goto LABEL_146;
  }
  int v56 = *(id *)kAVVCScope;
  if (v56) {
    goto LABEL_148;
  }
LABEL_69:
  TraceMethod::~TraceMethod((TraceMethod *)v95);

  if (v8)
  {
LABEL_70:
    if (inBuffer)
    {
      AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
      AudioQueueFreeBuffer(AlertQueueFromImplQueue, inBuffer);
    }
    std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v93, &v93)[5] = 0;
    goto LABEL_107;
  }
  uint64_t v38 = ExtAudioFileOpenURL((CFURLRef)v10, &outExtAudioFile);
  uint64_t v8 = v38;
  if (v38)
  {
    if ((v38 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        __int16 v39 = *(id *)kAVVCScope;
        if (!v39) {
          goto LABEL_100;
        }
      }
      else
      {
        __int16 v39 = MEMORY[0x1E4F14500];
        id v47 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        goto LABEL_99;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2178;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      long long v46 = "%25s:%-5d ERROR: setupAlert: ExtAudioFileOpenURL err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        __int16 v39 = *(id *)kAVVCScope;
        if (!v39) {
          goto LABEL_100;
        }
      }
      else
      {
        __int16 v39 = MEMORY[0x1E4F14500];
        id v45 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
LABEL_99:

LABEL_100:
        CFStringRef v48 = CFURLGetString((CFURLRef)v10);
        CFStringGetCString(v48, (char *)buf, 1024, 0x600u);
        if (kAVVCScope)
        {
          uint64_t v41 = *(id *)kAVVCScope;
          if (!v41) {
            goto LABEL_107;
          }
        }
        else
        {
          uint64_t v41 = MEMORY[0x1E4F14500];
          id v49 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v95 = 136315650;
          *(void *)long long v96 = "ControllerImpl.mm";
          *(_WORD *)&v96[8] = 1024;
          *(_DWORD *)&v96[10] = 2182;
          __int16 v97 = 2080;
          id v98 = buf;
          _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d setupAlert: Failed to load alert '%s'", v95, 0x1Cu);
        }
LABEL_106:

        goto LABEL_107;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2178;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      long long v46 = "%25s:%-5d ERROR: setupAlert: ExtAudioFileOpenURL err %d";
    }
    _os_log_impl(&dword_19D794000, v39, OS_LOG_TYPE_ERROR, v46, buf, 0x18u);
    goto LABEL_99;
  }
  UInt32 ioPropertyDataSize = 40;
  uint64_t Property = ExtAudioFileGetProperty(outExtAudioFile, 0x66666D74u, &ioPropertyDataSize, outPropertyData);
  uint64_t v8 = Property;
  if (Property)
  {
    if ((Property + 199999) < 0x61A7F)
    {
      if (kAVVCScope)
      {
        uint64_t v41 = *(id *)kAVVCScope;
        if (!v41) {
          goto LABEL_107;
        }
      }
      else
      {
        uint64_t v41 = MEMORY[0x1E4F14500];
        id v61 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        __int16 v100 = "ControllerImpl.mm";
        LOWORD(v101) = 1024;
        *(_DWORD *)((char *)&v101 + 2) = 2188;
        WORD3(v101) = 1024;
        DWORD2(v101) = v8;
        _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileGetProperty(kExtAudioFileProperty_FileDataFormat) err %d", buf, 0x18u);
      }
      goto LABEL_106;
    }
    if (kAVVCScope)
    {
      uint64_t v41 = *(id *)kAVVCScope;
      if (!v41) {
        goto LABEL_107;
      }
    }
    else
    {
      uint64_t v41 = MEMORY[0x1E4F14500];
      id v62 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2188;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileGetProperty(kExtAudioFileProperty_FileDataFormat) err %{audio:4CC}d", buf, 0x18u);
    }
    goto LABEL_106;
  }
  uint64_t v42 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, (const void *)(a1 + 216));
  uint64_t v8 = v42;
  if (v42)
  {
    unsigned int v43 = v42 + 199999;
    BOOL v44 = CALog::LogObjIfEnabled(1, kAVVCScope);
    uint64_t v41 = v44;
    if (v43 >= 0x61A7F)
    {
      if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        __int16 v100 = "ControllerImpl.mm";
        LOWORD(v101) = 1024;
        *(_DWORD *)((char *)&v101 + 2) = 2195;
        WORD3(v101) = 1024;
        DWORD2(v101) = v8;
        _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileSetProperty(kExtAudioFileProperty_ClientDataFormat) err %{audio:4CC}d", buf, 0x18u);
      }
    }
    else if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2195;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileSetProperty(kExtAudioFileProperty_ClientDataFormat) err %d", buf, 0x18u);
    }
    goto LABEL_106;
  }
  UInt32 ioPropertyDataSize = 8;
  uint64_t v57 = ExtAudioFileGetProperty(outExtAudioFile, 0x2366726Du, &ioPropertyDataSize, &v90);
  uint64_t v8 = v57;
  if (v57)
  {
    unsigned int v58 = v57 + 199999;
    __int16 v59 = CALog::LogObjIfEnabled(1, kAVVCScope);
    id v60 = v59;
    if (v58 < 0x61A7F)
    {
      if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        __int16 v100 = "ControllerImpl.mm";
        LOWORD(v101) = 1024;
        *(_DWORD *)((char *)&v101 + 2) = 2201;
        WORD3(v101) = 1024;
        DWORD2(v101) = v8;
        _os_log_impl(&dword_19D794000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileGetProperty err %d", buf, 0x18u);
      }
LABEL_188:

      goto LABEL_189;
    }
    if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2201;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      UInt32 v78 = "%25s:%-5d ERROR: setupAlert: ExtAudioFileGetProperty err %{audio:4CC}d";
LABEL_180:
      _os_log_impl(&dword_19D794000, v60, OS_LOG_TYPE_ERROR, v78, buf, 0x18u);
      goto LABEL_181;
    }
    goto LABEL_181;
  }
  int v65 = v93;
  if (std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v93, &v93)[5])
  {
    if (*(_DWORD *)(a1 + 204) == v65)
    {
      uint64_t v66 = CALog::LogObjIfEnabled(6, kAVVCScope);
      uint64_t v67 = v66;
      if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        __int16 v100 = "ControllerImpl.mm";
        LOWORD(v101) = 1024;
        *(_DWORD *)((char *)&v101 + 2) = 2207;
        _os_log_impl(&dword_19D794000, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d setupAlert: resetting alert queue", buf, 0x12u);
      }

      ElapsedTime::ElapsedTime((ElapsedTime *)buf, "setupAlert", "AudioQueueReset : mAlertQueue", 0);
      id v68 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
      AudioQueueReset(v68);
      ControllerImpl::setAlertQueueState(a1, 200);
      ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
    }
    OSStatus v69 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
    unsigned int v70 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v65, &v93);
    AudioQueueFreeBuffer(v69, (AudioQueueBufferRef)v70[5]);
    std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v65, &v93)[5] = 0;
  }
  uint64_t v71 = (uint64_t)(*(double *)(a1 + 216) * (double)v90 / *(double *)outPropertyData);
  uint64_t v90 = v71;
  int v72 = *(_DWORD *)(a1 + 240);
  __int16 v73 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
  UInt32 v74 = v72 * v71;
  uint64_t v75 = AudioQueueAllocateBuffer(v73, v74, &inBuffer);
  uint64_t v8 = v75;
  if (v75)
  {
    unsigned int v76 = v75 + 199999;
    __int16 v77 = CALog::LogObjIfEnabled(1, kAVVCScope);
    id v60 = v77;
    if (v76 < 0x61A7F)
    {
      if (v77 && os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        __int16 v100 = "ControllerImpl.mm";
        LOWORD(v101) = 1024;
        *(_DWORD *)((char *)&v101 + 2) = 2224;
        WORD3(v101) = 1024;
        DWORD2(v101) = v8;
        _os_log_impl(&dword_19D794000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: AudioQueueAllocateBuffer err %d", buf, 0x18u);
      }
      goto LABEL_188;
    }
    if (v77 && os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v100 = "ControllerImpl.mm";
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = 2224;
      WORD3(v101) = 1024;
      DWORD2(v101) = v8;
      UInt32 v78 = "%25s:%-5d ERROR: setupAlert: AudioQueueAllocateBuffer err %{audio:4CC}d";
      goto LABEL_180;
    }
LABEL_181:

    goto LABEL_70;
  }
  int v79 = *(_DWORD *)(a1 + 244);
  *(_DWORD *)AudioStreamBasicDescription buf = 1;
  HIDWORD(v100) = v79;
  LODWORD(v101) = v74;
  *(void *)((char *)&v101 + 4) = inBuffer->mAudioData;
  LODWORD(outAQ) = v90;
  uint64_t v80 = ExtAudioFileRead(outExtAudioFile, (UInt32 *)&outAQ, (AudioBufferList *)buf);
  uint64_t v8 = v80;
  if (v80)
  {
    unsigned int v82 = v80 + 199999;
    unsigned int v83 = CALog::LogObjIfEnabled(1, kAVVCScope);
    id v60 = v83;
    if (v82 >= 0x61A7F)
    {
      if (v83 && os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)char v95 = 136315650;
        *(void *)long long v96 = "ControllerImpl.mm";
        *(_WORD *)&v96[8] = 1024;
        *(_DWORD *)&v96[10] = 2238;
        __int16 v97 = 1024;
        LODWORD(v98) = v8;
        _os_log_impl(&dword_19D794000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileRead err %{audio:4CC}d", v95, 0x18u);
      }
    }
    else if (v83 && os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v95 = 136315650;
      *(void *)long long v96 = "ControllerImpl.mm";
      *(_WORD *)&v96[8] = 1024;
      *(_DWORD *)&v96[10] = 2238;
      __int16 v97 = 1024;
      LODWORD(v98) = v8;
      _os_log_impl(&dword_19D794000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: setupAlert: ExtAudioFileRead err %d", v95, 0x18u);
    }
    goto LABEL_188;
  }
  uint64_t v84 = outAQ;
  AudioQueueBufferRef v85 = inBuffer;
  inBuffer->UInt32 mAudioDataByteSize = *(_DWORD *)(a1 + 240) * outAQ;
  if (v65 == 1)
  {
    *(void *)(a1 + 256) = v84;
    *(void *)(a1 + 264) = GetTrailingSilenceFromBuffer((__int16 *)v85->mAudioData, v84, v81);
    AudioQueueBufferRef v85 = inBuffer;
  }
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), v65, &v93)[5] = (uint64_t *)v85;
LABEL_189:
  if (v8) {
    goto LABEL_70;
  }
LABEL_107:
  if (outExtAudioFile) {
    ExtAudioFileDispose(outExtAudioFile);
  }
LABEL_5:
  TraceMethod::~TraceMethod((TraceMethod *)v86);

  return v8;
}

void sub_19D8399B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint8_t buf,int a32,int a33,__int16 a34)
{
  TraceMethod::~TraceMethod((TraceMethod *)&a14);

  _Unwind_Resume(a1);
}

void ControllerImpl::setAlertQueueFromImplQueue(ControllerImpl *this, OpaqueAudioQueue *a2)
{
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v8, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t v4 = *(__CFRunLoop **)(*((void *)this + 24) + 128);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  void v5[2] = ___ZN14ControllerImpl26setAlertQueueFromImplQueueEP16OpaqueAudioQueue_block_invoke;
  v5[3] = &__block_descriptor_56_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE_e5_v8__0l;
  void v5[4] = v8;
  int v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v7 = a2;
  ExecuteBlockOnRunLoop(v4, 0xFFFFFFFFFFFFFFFFLL, v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_19D839BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  id v17 = *(std::__shared_weak_count **)(v15 - 24);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void ControllerImpl::AlertAQPropertyListenerProc(ControllerImpl *this, void *a2, OpaqueAudioQueue *a3)
{
  int v3 = (int)a3;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  TraceMethod::TraceMethod((TraceMethod *)v24, "AlertAQPropertyListenerProc");
  int v6 = this;
  id v7 = (AVVoiceController *)v6;
  if (v6)
  {
    [(ControllerImpl *)v6 impl];
    if (v22)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(void *)(v22 + 8), *(std::__shared_weak_count **)(v22 + 16));
      if (IsSerializationEnabled(void)::onceToken != -1) {
        dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
      }
      if (IsSerializationEnabled(void)::enable)
      {
        uint64_t v8 = *(void *)(*(void *)buf + 192);
        unint64_t v9 = atomic_load((unint64_t *)(v8 + 8));
        if (!v9 || (pthread_t v10 = pthread_self(), v11 = atomic_load((unint64_t *)(v8 + 8)), v10 != (pthread_t)v11)) {
          __assert_rtn("getAlertQueueFromRunLoop", "ControllerImpl.h", 509, "implSP->getAudioQueueRunLoop()->IsCurrentThread() && \"This code must run only on the AQ runloop thread\"");
        }
      }
      uint64_t v12 = *(void *)(v22 + 616);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (v12 && ObjectExists(v7))
      {
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 3321888768;
        v16[2] = ___ZN14ControllerImpl27AlertAQPropertyListenerProcEPvP16OpaqueAudioQueuej_block_invoke;
        __n128 v16[3] = &unk_1EEFA82E0;
        uint64_t v13 = v22;
        uint64_t v18 = v22;
        id v19 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v17 = v7;
        __int16 v20 = a2;
        int v21 = v3;
        ControllerImpl::dispatchAndSafeWork(v13, v16, (uint64_t)"AlertAQPropertyListenerProc");

        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        goto LABEL_23;
      }
    }
  }
  else
  {
    uint64_t v22 = 0;
    id v23 = 0;
  }
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      __int16 v14 = *(id *)kAVVCScope;
      if (v14)
      {
        uint64_t v15 = v14;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2634;
          _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: impl or queue is NULL or object is being destroyed -- noop", buf, 0x12u);
        }
      }
    }
  }
LABEL_23:
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }

  TraceMethod::~TraceMethod((TraceMethod *)v24);
}

void sub_19D839E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, ...)
{
  va_start(va, a12);

  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl27AlertAQPropertyListenerProcEPvP16OpaqueAudioQueuej_block_invoke(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  unsigned int v2 = *(_DWORD *)(a1 + 64);
  int v3 = (AVVoiceController *)*(id *)(a1 + 32);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v33, *(void *)(v1 + 8), *(std::__shared_weak_count **)(v1 + 16));
  TraceMethod::TraceMethod((TraceMethod *)v32, "handleAlertAQPropertyChange");
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (v4)
      {
        uint64_t v5 = v4;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          int v6 = *(_DWORD *)(v1 + 360);
          switch(v6)
          {
            case 200:
              id v7 = "stopped";
              break;
            case 201:
              id v7 = "primed";
              break;
            case 202:
              id v7 = "stopping";
              break;
            case 203:
              id v7 = "started";
              break;
            case 204:
              id v7 = "running";
              break;
            default:
              if (v6) {
                id v7 = "ILLEGAL";
              }
              else {
                id v7 = "uninit";
              }
              break;
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          __int16 v37 = "ControllerImpl.mm";
          __int16 v38 = 1024;
          int v39 = 2651;
          __int16 v40 = 2080;
          uint64_t v41 = (uint8_t *)v7;
          _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: mAlertQueueState = %s", buf, 0x1Cu);
        }
      }
    }
  }
  if (!*(unsigned char *)(v1 + 408))
  {
    uint64_t v9 = v33;
    pthread_t v10 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AlertLock::AlertLock(v31, v9, v10);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (kAVVCScope)
    {
      unint64_t v11 = *(id *)kAVVCScope;
      if (!v11) {
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v11 = MEMORY[0x1E4F14500];
      id v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(_DWORD *)(v1 + 360);
      switch(v14)
      {
        case 200:
          uint64_t v15 = "stopped";
          break;
        case 201:
          uint64_t v15 = "primed";
          break;
        case 202:
          uint64_t v15 = "stopping";
          break;
        case 203:
          uint64_t v15 = "started";
          break;
        case 204:
          uint64_t v15 = "running";
          break;
        default:
          if (v14) {
            uint64_t v15 = "ILLEGAL";
          }
          else {
            uint64_t v15 = "uninit";
          }
          break;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v37 = "ControllerImpl.mm";
      __int16 v38 = 1024;
      int v39 = 2657;
      __int16 v40 = 2080;
      uint64_t v41 = (uint8_t *)v15;
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Alert Listener: mAlertQueueState = %s", buf, 0x1Cu);
    }

LABEL_44:
    id v16 = ControllerImpl::sessionManagerForStreamID(v1, 0, 0);
    int v17 = [v16 sessionState];

    if (v2 != 1634824814)
    {
      if (kAVVCScope)
      {
        id v21 = *(id *)kAVVCScope;
        if (!v21) {
          goto LABEL_55;
        }
      }
      else
      {
        id v21 = (id)MEMORY[0x1E4F14500];
        id v22 = MEMORY[0x1E4F14500];
      }
      id v23 = v21;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v35, v2);
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        __int16 v37 = "ControllerImpl.mm";
        __int16 v38 = 1024;
        int v39 = 2706;
        __int16 v40 = 2080;
        uint64_t v41 = v35;
        _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: unhandled inID %s", buf, 0x1Cu);
      }

      goto LABEL_55;
    }
    AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v1);
    unsigned int v19 = QueueIsRunning(AlertQueueFromImplQueue);
    if (kAVVCScope)
    {
      __int16 v20 = *(id *)kAVVCScope;
      if (!v20) {
        goto LABEL_63;
      }
    }
    else
    {
      __int16 v20 = MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v37 = "ControllerImpl.mm";
      __int16 v38 = 1024;
      int v39 = 2667;
      __int16 v40 = 1024;
      LODWORD(v41) = v19;
      _os_log_impl(&dword_19D794000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Alert Listener: RUNNING = %d", buf, 0x18u);
    }

LABEL_63:
    if (v19)
    {
      if (v17 == 2)
      {
        if (kAVVCScope)
        {
          uint64_t v25 = *(id *)kAVVCScope;
          if (!v25) {
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t v25 = MEMORY[0x1E4F14500];
          id v28 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          __int16 v37 = "ControllerImpl.mm";
          __int16 v38 = 1024;
          int v39 = 2672;
          _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: session was interrupted!  Doing nothing here", buf, 0x12u);
        }
        goto LABEL_93;
      }
      if (*(_DWORD *)(v1 + 360) == 204)
      {
        if (!kAVVCScope) {
          goto LABEL_55;
        }
        if ((*(unsigned char *)(kAVVCScope + 8) & 1) == 0) {
          goto LABEL_55;
        }
        id v27 = *(id *)kAVVCScope;
        if (!v27) {
          goto LABEL_55;
        }
        uint64_t v25 = v27;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          __int16 v37 = "ControllerImpl.mm";
          __int16 v38 = 1024;
          int v39 = 2677;
          _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: state already kAlertQueueRunning.  Doing nothing here", buf, 0x12u);
        }
LABEL_93:

        goto LABEL_55;
      }
      ControllerImpl::setAlertQueueState(v1, 204);
      ControllerImpl::alertStarted((ControllerImpl *)v1, v3);
LABEL_55:
      VCLocker::~VCLocker((VCLocker *)v31);
      goto LABEL_56;
    }
    if ((int)ControllerImpl::getSessionState((ControllerImpl *)v1, 0) <= 4)
    {
      if (kAVVCScope)
      {
        uint64_t v25 = *(id *)kAVVCScope;
        if (!v25) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v25 = MEMORY[0x1E4F14500];
        id v29 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        __int16 v37 = "ControllerImpl.mm";
        __int16 v38 = 1024;
        int v39 = 2686;
        _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Alert Listener: Session is inactive, alertFinishedPlayback already synthesized in deactivateSession.", buf, 0x12u);
      }
      goto LABEL_93;
    }
    if (*(_DWORD *)(v1 + 360) != 203 || v17 == 2)
    {
      *(void *)(v1 + 208) = 2;
      ControllerImpl::notifyAlertFinished((ControllerImpl *)v1, v3);
      goto LABEL_55;
    }
    if (kAVVCScope)
    {
      uint64_t v26 = *(id *)kAVVCScope;
      if (!v26)
      {
LABEL_98:
        ControllerImpl::alertStarted((ControllerImpl *)v1, v3);
        ControllerImpl::setAlertQueueState(v1, 204);
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v26 = MEMORY[0x1E4F14500];
      id v30 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      __int16 v37 = "ControllerImpl.mm";
      __int16 v38 = 1024;
      int v39 = 2690;
      _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: queue reports stopped on first IsRunning prop notification -- treat this like a regular start", buf, 0x12u);
    }

    goto LABEL_98;
  }
  if (kAVVCScope)
  {
    uint64_t v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    __int16 v37 = "ControllerImpl.mm";
    __int16 v38 = 1024;
    int v39 = 2653;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alert Listener: in the middle of priming alert queue:  Doing nothing.  [THIS IS NEW BEHAVIOR]", buf, 0x12u);
  }

LABEL_56:
  TraceMethod::~TraceMethod((TraceMethod *)v32);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
}

void sub_19D83A698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, std::__shared_weak_count *a14)
{
  VCLocker::~VCLocker((VCLocker *)&a10);
  TraceMethod::~TraceMethod((TraceMethod *)&a12);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }

  _Unwind_Resume(a1);
}

void ControllerImpl::dispatchAndSafeWork(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v14, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      uint64_t v6 = v14;
      id v7 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(NSObject **)(v6 + 32);
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3321888768;
      v9[2] = ___ZN14ControllerImpl19dispatchAndSafeWorkEU13block_pointerFvvEPKc_block_invoke;
      v9[3] = &unk_1EEFA2BD0;
      uint64_t v11 = v6;
      id v12 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = a3;
      pthread_t v10 = v5;
      dispatch_async(v8, v9);

      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      v5[2](v5);
    }
  }
}

void sub_19D83A87C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19dispatchAndSafeWorkEU13block_pointerFvvEPKc_block_invoke(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
  {
    int v3 = 0;
    goto LABEL_10;
  }
  int v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = a1[5]) == 0)
  {
LABEL_10:
    if (kAVVCScope)
    {
      uint64_t v8 = *(id *)kAVVCScope;
      if (!v8) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315650;
      id v12 = "ControllerImpl.mm";
      __int16 v13 = 1024;
      int v14 = 4354;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (impl: %p). Bailing", (uint8_t *)&v11, 0x1Cu);
    }

LABEL_17:
    if (!v3) {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v5 = (std::recursive_mutex *)(v4 + 104);
  std::recursive_mutex::lock((std::recursive_mutex *)(v4 + 104));
  if (*(unsigned char *)(v4 + 520))
  {
    uint64_t v6 = *(NSObject **)kAVVCScope;
    id v7 = CALog::Scope::oslog(*(id *)kAVVCScope);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      pthread_t v10 = (const char *)a1[7];
      int v11 = 136315138;
      id v12 = v10;
      _os_log_fault_impl(&dword_19D794000, v6, OS_LOG_TYPE_FAULT, "Warning: Trying to do safeWork on impl work queue while in tearDown. Caller: %s", (uint8_t *)&v11, 0xCu);
    }
  }
  (*(void (**)(void))(a1[4] + 16))();
  std::recursive_mutex::unlock(v5);
LABEL_18:
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D83AA44(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ControllerImpl::alertStarted(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v3 = a2;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v60, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  TraceMethod::TraceMethod((TraceMethod *)v59, "alertStarted");
  ControllerImpl::setAlertState((uint64_t)this, 2);
  if (*((_DWORD *)this + 51) == 1 && !*((unsigned char *)this + 409))
  {
    ControllerImpl::_getCurrentRecordingEngine(&v57, (uint64_t)this, *((void *)this + 59), 0, (uint64_t)"alertStarted");
    uint64_t v6 = v57;
    if (v57 && *(void *)(v57 + 224) == 4)
    {
      if (*((_DWORD *)this + 80) != 2)
      {
LABEL_103:
        v53[0] = MEMORY[0x1E4F143A8];
        v53[1] = 3321888768;
        v53[2] = ___ZN14ControllerImpl12alertStartedEP17AVVoiceController_block_invoke;
        v53[3] = &__block_descriptor_64_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
        v53[4] = v60;
        id v54 = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __int16 v13 = v58;
        uint64_t v55 = v6;
        int v56 = v58;
        if (v58) {
          atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void *, const char *))(*(void *)v6 + 360))(v6, v53, "alertStarted");
        if (v56) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v56);
        }
        if (v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        }
        goto LABEL_111;
      }
      if (*((_DWORD *)this + 90) != 204)
      {
        if (kAVVCScope)
        {
          if (*(unsigned char *)(kAVVCScope + 8))
          {
            int v14 = *(id *)kAVVCScope;
            if (v14)
            {
              pthread_t v10 = v14;
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)id v62 = 136315394;
                *(void *)&v62[4] = "ControllerImpl.mm";
                *(_WORD *)&v62[12] = 1024;
                *(_DWORD *)&v62[14] = 2447;
                __int16 v15 = "%25s:%-5d calculateAlertTimes: alert queue already stopped -- using current time as end time";
                uint64_t v16 = v10;
                os_log_type_t v17 = OS_LOG_TYPE_DEBUG;
                uint32_t v18 = 18;
LABEL_61:
                _os_log_impl(&dword_19D794000, v16, v17, v15, v62, v18);
                goto LABEL_62;
              }
              goto LABEL_62;
            }
          }
        }
LABEL_63:
        *((void *)this + 49) = mach_absolute_time();
        if (kAVVCScope)
        {
          id v27 = *(id *)kAVVCScope;
          if (!v27)
          {
LABEL_71:
            uint64_t v35 = *((void *)this + 49);
            ControllerImpl::_getCurrentRecordingEngine(v62, (uint64_t)this, *((void *)this + 59), 0, (uint64_t)"calculateRecordStartTime");
            uint64_t v36 = *(void *)v62;
            if (!*(void *)v62)
            {
              if (kAVVCScope)
              {
                __int16 v38 = *(id *)kAVVCScope;
                if (!v38) {
                  goto LABEL_101;
                }
              }
              else
              {
                __int16 v38 = MEMORY[0x1E4F14500];
                id v52 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf.mSampleTime) = 136315394;
                *(void *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 1003;
                CFStringRef v48 = "%25s:%-5d calculateRecordStartTime: Error, current recording engine is nil!";
                id v49 = v38;
                os_log_type_t v50 = OS_LOG_TYPE_ERROR;
                uint32_t v51 = 18;
                goto LABEL_99;
              }
LABEL_100:

              goto LABEL_101;
            }
            if (*(void *)(*(void *)v62 + 240))
            {
              if (kAVVCScope)
              {
                __int16 v37 = *(id *)kAVVCScope;
                if (!v37) {
                  goto LABEL_83;
                }
              }
              else
              {
                __int16 v37 = MEMORY[0x1E4F14500];
                id v39 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf.mSampleTime) = 136315394;
                *(void *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
                WORD2(buf.mHostTime) = 1024;
                *(_DWORD *)((char *)&buf.mHostTime + 6) = 1007;
                _os_log_impl(&dword_19D794000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d WARNING: startRecordingAtTime:error was used without 'silent' start alert", (uint8_t *)&buf, 0x12u);
              }
            }
LABEL_83:
            double v40 = (double)*((uint64_t *)this + 33) * 24000000.0 / *((double *)this + 27);
            *(void *)(v36 + 240) = (v35 - (uint64_t)v40) & ~((v35 - (uint64_t)v40) >> 63);
            if (kAVVCScope)
            {
              uint64_t v41 = *(id *)kAVVCScope;
              if (!v41) {
                goto LABEL_90;
              }
            }
            else
            {
              uint64_t v41 = MEMORY[0x1E4F14500];
              id v42 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v43 = __udivti3();
              LODWORD(buf.mSampleTime) = 136315650;
              *(void *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 1015;
              WORD1(buf.mRateScalar) = 2048;
              *(double *)((char *)&buf.mRateScalar + 4) = (double)(unint64_t)v43 / 1000000000.0;
              _os_log_impl(&dword_19D794000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d calculateRecordStartTime: host time for start of record: %.3f seconds", (uint8_t *)&buf, 0x1Cu);
            }

LABEL_90:
            uint64_t v44 = mach_absolute_time();
            uint64_t v45 = *(void *)(v36 + 240);
            if (kAVVCScope)
            {
              __int16 v38 = *(id *)kAVVCScope;
              if (!v38)
              {
LABEL_101:
                if (*(void *)&v62[8]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v62[8]);
                }
                goto LABEL_103;
              }
            }
            else
            {
              __int16 v38 = MEMORY[0x1E4F14500];
              id v46 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v47 = *(void *)(v36 + 240) - *((void *)this + 49);
              LODWORD(buf.mSampleTime) = 136315906;
              *(void *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
              WORD2(buf.mHostTime) = 1024;
              *(_DWORD *)((char *)&buf.mHostTime + 6) = 1019;
              WORD1(buf.mRateScalar) = 2048;
              *(void *)((char *)&buf.mRateScalar + 4) = v47;
              WORD2(buf.mWordClockTime) = 2048;
              *(UInt64 *)((char *)&buf.mWordClockTime + 6) = fmax((double)(uint64_t)(v45 - v44) * 0.0000000416666667, 0.0);
              CFStringRef v48 = "%25s:%-5d this is %lld ticks beyond alert end (%.6f seconds in the future)";
              id v49 = v38;
              os_log_type_t v50 = OS_LOG_TYPE_DEFAULT;
              uint32_t v51 = 38;
LABEL_99:
              _os_log_impl(&dword_19D794000, v49, v50, v48, (uint8_t *)&buf, v51);
              goto LABEL_100;
            }
            goto LABEL_100;
          }
        }
        else
        {
          id v27 = MEMORY[0x1E4F14500];
          id v33 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = *((void *)this + 49);
          *(_DWORD *)id v62 = 136315650;
          *(void *)&v62[4] = "ControllerImpl.mm";
          *(_WORD *)&v62[12] = 1024;
          *(_DWORD *)&v62[14] = 2481;
          __int16 v63 = 2048;
          uint64_t v64 = v34;
          id v30 = "%25s:%-5d calculateAlertTimes: host time for (already-passed) end of alert: %llu";
          goto LABEL_69;
        }
        goto LABEL_70;
      }
      AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue(this);
      Currentuint64_t Time = AudioQueueGetCurrentTime(AlertQueueFromImplQueue, 0, &buf, 0);
      OSStatus v9 = CurrentTime;
      if (CurrentTime)
      {
        if ((CurrentTime + 199999) <= 0x61A7E)
        {
          if (kAVVCScope)
          {
            pthread_t v10 = *(id *)kAVVCScope;
            if (!v10) {
              goto LABEL_63;
            }
          }
          else
          {
            pthread_t v10 = MEMORY[0x1E4F14500];
            id v31 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id v62 = 136315650;
            *(void *)&v62[4] = "ControllerImpl.mm";
            *(_WORD *)&v62[12] = 1024;
            *(_DWORD *)&v62[14] = 2452;
            __int16 v63 = 1024;
            LODWORD(v64) = v9;
            __int16 v15 = "%25s:%-5d ERROR: calculateAlertTimes: AudioQueueGetCurrentTime err %d";
LABEL_60:
            uint64_t v16 = v10;
            os_log_type_t v17 = OS_LOG_TYPE_ERROR;
            uint32_t v18 = 24;
            goto LABEL_61;
          }
          goto LABEL_62;
        }
        if (kAVVCScope)
        {
          pthread_t v10 = *(id *)kAVVCScope;
          if (!v10) {
            goto LABEL_63;
          }
        }
        else
        {
          pthread_t v10 = MEMORY[0x1E4F14500];
          id v32 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)id v62 = 136315650;
          *(void *)&v62[4] = "ControllerImpl.mm";
          *(_WORD *)&v62[12] = 1024;
          *(_DWORD *)&v62[14] = 2452;
          __int16 v63 = 1024;
          LODWORD(v64) = v9;
          __int16 v15 = "%25s:%-5d ERROR: calculateAlertTimes: AudioQueueGetCurrentTime err %{audio:4CC}d";
          goto LABEL_60;
        }
LABEL_62:

        goto LABEL_63;
      }
      float v19 = (double)*((uint64_t *)this + 32) - buf.mSampleTime;
      float v20 = v19 / *((double *)this + 27);
      *((void *)this + 49) = buf.mHostTime + (unint64_t)(v20 * 24000000.0);
      if (kAVVCScope)
      {
        id v21 = *(id *)kAVVCScope;
        if (!v21) {
          goto LABEL_48;
        }
      }
      else
      {
        id v21 = (id)MEMORY[0x1E4F14500];
        id v22 = MEMORY[0x1E4F14500];
      }
      id v23 = v21;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = *((void *)this + 49);
        mach_absolute_time();
        uint64_t v25 = __udivti3();
        if (v25 >= 0) {
          unint64_t v26 = v25;
        }
        else {
          unint64_t v26 = -v25;
        }
        *(_DWORD *)id v62 = 136315906;
        *(void *)&v62[4] = "ControllerImpl.mm";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 2470;
        __int16 v63 = 2048;
        uint64_t v64 = v24;
        __int16 v65 = 2048;
        double v66 = (double)v26 * 0.000000001;
        _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d calculateAlertTimes: host time for end of alert: %llu (%.6f seconds in future)", v62, 0x26u);
      }

LABEL_48:
      *((void *)this + 47) = (unint64_t)((double)*((unint64_t *)this + 49)
                                                + (double)*((uint64_t *)this + 32) * -24000000.0 / *((double *)this + 27));
      if (kAVVCScope)
      {
        id v27 = *(id *)kAVVCScope;
        if (!v27) {
          goto LABEL_71;
        }
      }
      else
      {
        id v27 = MEMORY[0x1E4F14500];
        id v28 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = *((void *)this + 47);
        *(_DWORD *)id v62 = 136315650;
        *(void *)&v62[4] = "ControllerImpl.mm";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 2476;
        __int16 v63 = 2048;
        uint64_t v64 = v29;
        id v30 = "%25s:%-5d calculateAlertTimes: host time for start of alert: %llu";
LABEL_69:
        _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_DEFAULT, v30, v62, 0x1Cu);
      }
LABEL_70:

      goto LABEL_71;
    }
    if (kAVVCScope)
    {
      int v11 = *(id *)kAVVCScope;
      if (!v11)
      {
LABEL_29:
        __int16 v13 = v58;
LABEL_111:
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        goto LABEL_10;
      }
    }
    else
    {
      int v11 = MEMORY[0x1E4F14500];
      id v12 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 2535;
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d alertStarted: record state != kRecordStarting -- noop", (uint8_t *)&buf, 0x12u);
    }

    goto LABEL_29;
  }
  if (kAVVCScope)
  {
    uint64_t v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.mSampleTime) = 136315394;
    *(void *)((char *)&buf.mSampleTime + 4) = "ControllerImpl.mm";
    WORD2(buf.mHostTime) = 1024;
    *(_DWORD *)((char *)&buf.mHostTime + 6) = 2539;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d alertStarted: not playing start alert -- noop", (uint8_t *)&buf, 0x12u);
  }

LABEL_10:
  TraceMethod::~TraceMethod((TraceMethod *)v59);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
}

void sub_19D83B50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  TraceMethod::~TraceMethod((TraceMethod *)&a20);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }

  _Unwind_Resume(a1);
}

void ControllerImpl::_getCurrentRecordingEngine(void *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = *(void *)(a2 + 576);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 584);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7)
  {
    if (kAVVCScope)
    {
      OSStatus v9 = *(id *)kAVVCScope;
      if (!v9) {
        goto LABEL_24;
      }
    }
    else
    {
      OSStatus v9 = MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v14 = 136315394;
      *(void *)&void v14[4] = "ControllerImpl.mm";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 4090;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", v14, 0x12u);
    }
    goto LABEL_23;
  }
  if (a3)
  {
    ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)v14, *(void *)(a2 + 576), *(std::__shared_weak_count **)(a2 + 584), a3);
    *(_OWORD *)a1 = *(_OWORD *)v14;
    goto LABEL_24;
  }
  if (a4)
  {
    if (kAVVCScope)
    {
      OSStatus v9 = *(id *)kAVVCScope;
      if (!v9) {
        goto LABEL_24;
      }
    }
    else
    {
      OSStatus v9 = MEMORY[0x1E4F14500];
      id v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v14 = 136315394;
      *(void *)&void v14[4] = "ControllerImpl.mm";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 4099;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid streamID. Session is not active", v14, 0x12u);
    }
LABEL_23:

    goto LABEL_24;
  }
  int v11 = *(NSObject **)kAVVCScope;
  id v12 = CALog::Scope::oslog(*(id *)kAVVCScope);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int v14 = 136315394;
    *(void *)&void v14[4] = "_getCurrentRecordingEngine";
    *(_WORD *)&v14[12] = 2080;
    *(void *)&v14[14] = a5;
    _os_log_fault_impl(&dword_19D794000, v11, OS_LOG_TYPE_FAULT, "%s Likely ambiguous AVVC V2 use case detected. Must pass streamID here: %s !", v14, 0x16u);
  }

LABEL_24:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_19D83B7E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14ControllerImpl12alertStartedEP17AVVoiceController_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RecordLock::RecordLock(v4, v2, v3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 96))(*(void *)(a1 + 48))) {
    AVVCRecordingEngine::startedRecording(*(AVVCRecordingEngine **)(a1 + 48));
  }
  VCLocker::~VCLocker((VCLocker *)v4);
}

void sub_19D83B894(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_32c42_ZTSNSt3__110shared_ptrI14ControllerImplEE48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ___ZN14ControllerImpl26setAlertQueueFromImplQueueEP16OpaqueAudioQueue_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 616) = *(void *)(result + 48);
  return result;
}

void ControllerImpl::cleanup(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v49, "cleanup");
  uint64_t v4 = v3;
  TraceMethod::TraceMethod((TraceMethod *)v60, "destroyAlertQueue");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v58, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  id v5 = v58;
  uint64_t v6 = v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AlertLock::AlertLock(v57, (uint64_t)v5, v6);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue(this);
  ControllerImpl::setAlertQueueFromImplQueue(this, 0);
  *(_DWORD *)AudioTimeStamp buf = 1;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 37, 1, buf)[5] = 0;
  *(_DWORD *)AudioTimeStamp buf = 2;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 37, 2, buf)[5] = 0;
  *(_DWORD *)AudioTimeStamp buf = 3;
  std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)this + 37, 3, buf)[5] = 0;
  if (AlertQueueFromImplQueue)
  {
    if (*((int *)this + 91) < 1)
    {
      ControllerImpl::setAlertQueueState((uint64_t)this, 200);
      goto LABEL_22;
    }
    if (kAVVCScope)
    {
      uint64_t v8 = *(id *)kAVVCScope;
      if (!v8)
      {
LABEL_19:
        int v11 = v58;
        int v12 = *((_DWORD *)v58 + 51);
        if (v12)
        {
          id v13 = (void *)*((void *)v58 + 26);
          int v14 = (void *)*((void *)v58 + 49);
          objc_initWeak((id *)buf, v4);
          uint64_t v15 = v58;
          uint64_t v51 = MEMORY[0x1E4F143A8];
          uint64_t v52 = 3221225472;
          os_log_type_t v53 = ___ZN14ControllerImpl17destroyAlertQueueEP17AVVoiceController_block_invoke;
          id v54 = &unk_1E5965058;
          objc_copyWeak(v55, (id *)buf);
          int v56 = v12;
          v55[1] = v13;
          v55[2] = v14;
          ControllerImpl::safeNotify((uint64_t)v15, (uint64_t)"destroyAlertQueue: alert finished", &v51);
          objc_destroyWeak(v55);
          objc_destroyWeak((id *)buf);
          int v11 = v58;
        }
        ControllerImpl::alertFinished(v11, v4);
LABEL_22:
        if (kAVVCScope)
        {
          if (*(unsigned char *)(kAVVCScope + 8))
          {
            uint64_t v16 = *(id *)kAVVCScope;
            if (v16)
            {
              os_log_type_t v17 = v16;
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2408;
                _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyAlertQueue: calling AudioQueueStop", buf, 0x12u);
              }
            }
          }
        }
        ElapsedTime::ElapsedTime((ElapsedTime *)buf, "destroyAlertQueue", "destroyAlertQueue : AudioQueueStop", 0);
        OSStatus v18 = AudioQueueStop(AlertQueueFromImplQueue, 1u);
        ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
        if (kAVVCScope)
        {
          float v19 = *(id *)kAVVCScope;
          if (!v19) {
            goto LABEL_37;
          }
        }
        else
        {
          float v19 = MEMORY[0x1E4F14500];
          id v20 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = " but failed";
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_DWORD *)&buf[14] = 2415;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(_WORD *)&unsigned char buf[12] = 1024;
          if (!v18) {
            id v21 = "";
          }
          *(void *)&buf[20] = v21;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = v18;
          _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC stopped alert queue%s (%d)", buf, 0x22u);
        }

LABEL_37:
        if (*((unsigned char *)this + 521) || !v18)
        {
LABEL_54:
          if (kAVVCScope)
          {
            if (*(unsigned char *)(kAVVCScope + 8))
            {
              unint64_t v26 = *(id *)kAVVCScope;
              if (v26)
              {
                id v27 = v26;
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)AudioTimeStamp buf = 136315394;
                  *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2421;
                  _os_log_impl(&dword_19D794000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyAlertQueue: removing queue listener", buf, 0x12u);
                }
              }
            }
          }
          AudioQueueRemovePropertyListener(AlertQueueFromImplQueue, 0x6171726Eu, (AudioQueuePropertyListenerProc)ControllerImpl::AlertAQPropertyListenerProc, v4);
          if (kAVVCScope)
          {
            if (*(unsigned char *)(kAVVCScope + 8))
            {
              id v28 = *(id *)kAVVCScope;
              if (v28)
              {
                uint64_t v29 = v28;
                if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)AudioTimeStamp buf = 136315394;
                  *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2426;
                  _os_log_impl(&dword_19D794000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d destroyAlertQueue: calling AudioQueueDispose", buf, 0x12u);
                }
              }
            }
          }
          id v30 = v58;
          id v31 = v59;
          if (v59)
          {
            atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          VCUnlocker::VCUnlocker(v50, (uint64_t)v30, 0);
          if (v31)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          OSStatus v32 = AudioQueueDispose(AlertQueueFromImplQueue, 0);
          OSStatus v33 = v32;
          if (!v32) {
            goto LABEL_86;
          }
          if ((v32 + 199999) >= 0x61A7F)
          {
            if (kAVVCScope)
            {
              uint64_t v34 = *(id *)kAVVCScope;
              if (!v34) {
                goto LABEL_86;
              }
            }
            else
            {
              uint64_t v34 = MEMORY[0x1E4F14500];
              id v37 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
              goto LABEL_85;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2429;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v33;
            uint64_t v36 = "%25s:%-5d ERROR: destroyAlertQueue: AudioQueueDispose err %{audio:4CC}d";
          }
          else
          {
            if (kAVVCScope)
            {
              uint64_t v34 = *(id *)kAVVCScope;
              if (!v34) {
                goto LABEL_86;
              }
            }
            else
            {
              uint64_t v34 = MEMORY[0x1E4F14500];
              id v35 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
LABEL_85:

LABEL_86:
              VCUnlocker::~VCUnlocker((VCUnlocker *)v50);
              CallbackBarrier(*(__CFRunLoop **)(*((void *)this + 24) + 128));
              ControllerImpl::setAlertQueueState((uint64_t)this, 0);
              goto LABEL_87;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2429;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v33;
            uint64_t v36 = "%25s:%-5d ERROR: destroyAlertQueue: AudioQueueDispose err %d";
          }
          _os_log_impl(&dword_19D794000, v34, OS_LOG_TYPE_ERROR, v36, buf, 0x18u);
          goto LABEL_85;
        }
        if ((v18 + 199999) >= 0x61A7F)
        {
          if (kAVVCScope)
          {
            id v22 = *(id *)kAVVCScope;
            if (!v22) {
              goto LABEL_54;
            }
          }
          else
          {
            id v22 = MEMORY[0x1E4F14500];
            id v25 = MEMORY[0x1E4F14500];
          }
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            goto LABEL_53;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2418;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v18;
          uint64_t v24 = "%25s:%-5d ERROR: destroyAlertQueue: AudioQueueStop() err %{audio:4CC}d";
        }
        else
        {
          if (kAVVCScope)
          {
            id v22 = *(id *)kAVVCScope;
            if (!v22) {
              goto LABEL_54;
            }
          }
          else
          {
            id v22 = MEMORY[0x1E4F14500];
            id v23 = MEMORY[0x1E4F14500];
          }
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            goto LABEL_53;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2418;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v18;
          uint64_t v24 = "%25s:%-5d ERROR: destroyAlertQueue: AudioQueueStop() err %d";
        }
        _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_ERROR, v24, buf, 0x18u);
LABEL_53:

        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2388;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d detected unfinished alert, queue up alertFinished", buf, 0x12u);
    }

    goto LABEL_19;
  }
  if (*((_DWORD *)this + 90)) {
    goto LABEL_87;
  }
  if (kAVVCScope)
  {
    OSStatus v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_87;
    }
  }
  else
  {
    OSStatus v9 = MEMORY[0x1E4F14500];
    id v46 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2383;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Alert queue NULL but state != Uninitialized", buf, 0x12u);
  }

LABEL_87:
  VCLocker::~VCLocker((VCLocker *)v57);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v60);

  if (*((_DWORD *)this + 96))
  {
    if (kAVVCScope)
    {
      __int16 v38 = *(id *)kAVVCScope;
      if (!v38)
      {
LABEL_97:
        AudioServicesDisposeSystemSoundID(*((_DWORD *)this + 96));
        *((_DWORD *)this + 96) = 0;
        goto LABEL_98;
      }
    }
    else
    {
      __int16 v38 = MEMORY[0x1E4F14500];
      id v39 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      int v40 = *((_DWORD *)this + 96);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1620;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v40;
      _os_log_impl(&dword_19D794000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d disposeSAESystemSound: mSAESystemSoundID(%u)", buf, 0x18u);
    }

    goto LABEL_97;
  }
LABEL_98:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v47, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  RecordLock::RecordLock(buf, v47, v48);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  uint64_t v41 = +[AVVCKeepAliveManager sharedManager];
  [v41 destroyWithCompletion:0];

  VCLocker::~VCLocker((VCLocker *)buf);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v51, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  uint64_t v42 = v51;
  uint64_t v43 = *(void **)(v51 + 576);
  uint64_t v44 = *(std::__shared_weak_count **)(v51 + 584);
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v43)
  {
    uint64_t v45 = v52;
    if (v52) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)AudioTimeStamp buf = &unk_1EEFA3450;
    *(void *)&buf[8] = v42;
    *(void *)&uint8_t buf[16] = v45;
    *(void *)&buf[24] = buf;
    AVVCRecordingEngineMap::for_each_engine(v43, (uint64_t)buf, "cleanupRecordEngines");
    std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](buf);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v49);
}

void sub_19D83C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,char a29,id location)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(&location);
  VCLocker::~VCLocker((VCLocker *)&a25);
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  TraceMethod::~TraceMethod((TraceMethod *)&a29);

  TraceMethod::~TraceMethod((TraceMethod *)&a11);
  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  id v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RecordLock::RecordLock(v6, v4, v5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  (*(void (**)(void *, BOOL))(*v3 + 112))(v3, v3[28] > 3);
  VCLocker::~VCLocker((VCLocker *)v6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_19D83C548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  VCLocker::~VCLocker((VCLocker *)&a9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EEFA3450;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1EEFA3450;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func(void *a1)
{
  *a1 = &unk_1EEFA3450;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x19F3ABB30);
}

void *std::__function::__func<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0,std::allocator<ControllerImpl::cleanupRecordEngines(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func(void *a1)
{
  *a1 = &unk_1EEFA3450;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void ___ZN14ControllerImpl17destroyAlertQueueEP17AVVoiceController_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = [[AVVCAlertInformation alloc] initWithAlertType:*(unsigned int *)(a1 + 56) mode:*(void *)(a1 + 40) endTime:*(void *)(a1 + 48)];
    [WeakRetained alertPlaybackFinishedWithSettings:v3];
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 2395;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D83C848(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void VCUnlocker::~VCUnlocker(VCUnlocker *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 8))
  {
    if (kAVVCScope)
    {
      uint64_t v2 = *(id *)kAVVCScope;
      if (!v2)
      {
LABEL_9:
        (*(void (**)(void))(**(void **)this + 16))();
        return;
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v3 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(*(void *)this + 8);
      int v5 = 136315650;
      int v6 = "ControllerImpl.h";
      __int16 v7 = 1024;
      int v8 = 806;
      __int16 v9 = 2080;
      uint64_t v10 = v4;
      _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d unlocker about to relock %s", (uint8_t *)&v5, 0x1Cu);
    }

    goto LABEL_9;
  }
}

void sub_19D83C99C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void VCUnlocker::VCUnlocker(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = *(void *)(a2 + 8 * a3 + 536);
  a1[8] = 0;
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  if (!IsSerializationEnabled(void)::enable)
  {
    if (kAVVCScope)
    {
      uint64_t v4 = *(id *)kAVVCScope;
      if (!v4)
      {
LABEL_11:
        if ((*(uint64_t (**)(void))(**(void **)a1 + 48))())
        {
          (*(void (**)(void))(**(void **)a1 + 24))();
          a1[8] = 1;
        }
        else
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            LOWORD(v7) = 0;
            _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: Unlocker attempted to unlock a mutex not owned by the current thread!", (uint8_t *)&v7, 2u);
          }
          __break(1u);
        }
        return;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(*(void *)a1 + 8);
      int v7 = 136315650;
      int v8 = "ControllerImpl.h";
      __int16 v9 = 1024;
      int v10 = 798;
      __int16 v11 = 2080;
      uint64_t v12 = v6;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d unlocker about to unlock %s", (uint8_t *)&v7, 0x1Cu);
    }

    goto LABEL_11;
  }
}

void ControllerImpl::getPlaybackRoute(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v16, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  v14[3] = __Block_byref_object_copy__5561;
  void v14[4] = __Block_byref_object_dispose__5562;
  id v15 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3321888768;
  v8[2] = ___ZN14ControllerImpl16getPlaybackRouteEmU13block_pointerFvP8NSStringE_block_invoke;
  v8[3] = &unk_1EEFA8350;
  uint64_t v6 = v16;
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a2;
  int v10 = v14;
  id v7 = v5;
  id v9 = v7;
  ControllerImpl::safeWork(v6, v8, (uint64_t)"getPlaybackRoute");

  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Block_object_dispose(v14, 8);

  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_19D83CCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Block_object_dispose(&a19, 8);

  id v27 = *(std::__shared_weak_count **)(v25 - 40);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl16getPlaybackRouteEmU13block_pointerFvP8NSStringE_block_invoke(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = ControllerImpl::sessionManagerForStreamID(a1[6], a1[8], 0);
  id v3 = [v2 playbackRoute];
  uint64_t v4 = [v3 copy];
  uint64_t v5 = *(void *)(a1[5] + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (kAVVCScope)
  {
    id v7 = *(id *)kAVVCScope;
    if (!v7) {
      goto LABEL_8;
    }
  }
  else
  {
    id v7 = MEMORY[0x1E4F14500];
    id v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(*(void *)(a1[5] + 8) + 40);
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    float v19 = "ControllerImpl.mm";
    __int16 v20 = 1024;
    int v21 = 828;
    __int16 v22 = 2112;
    uint64_t v23 = v9;
    _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getPlaybackRoute: %@", buf, 0x1Cu);
  }

LABEL_8:
  uint64_t v10 = a1[6];
  uint64_t v11 = (void *)a1[4];
  BOOL v12 = v11 != 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = ___ZN14ControllerImpl16getPlaybackRouteEmU13block_pointerFvP8NSStringE_block_invoke_140;
  v15[3] = &unk_1E5964F40;
  id v13 = v11;
  uint64_t v14 = a1[5];
  id v16 = v13;
  uint64_t v17 = v14;
  ControllerImpl::safeNotifyAlwaysAsync(v10, v12, v15);
}

void sub_19D83CECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl16getPlaybackRouteEmU13block_pointerFvP8NSStringE_block_invoke_140(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void ___ZN14ControllerImpl16getPlaybackRouteEPU8__strongP8NSStringm_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN14ControllerImpl16getPlaybackRouteEPU8__strongP8NSStringm_block_invoke_2;
  v8[3] = &unk_1E5964F68;
  uint64_t v6 = a1[6];
  id v9 = v3;
  uint64_t v10 = v6;
  id v7 = v3;
  ControllerImpl::getPlaybackRoute(v4, v5, v8);
}

void sub_19D83CFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl16getPlaybackRouteEPU8__strongP8NSStringm_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = [v3 copy];
    uint64_t v5 = *(void ***)(a1 + 40);
    uint64_t v6 = *v5;
    *uint64_t v5 = (void *)v4;
  }
  id v7 = *(NSObject **)(a1 + 32);
  if (v7) {
    dispatch_semaphore_signal(v7);
  }

  return MEMORY[0x1F41817F8]();
}

void sub_19D83D054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::setEndpointerDelegate(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v26, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  id WeakRetained = objc_loadWeakRetained((id *)v26 + 52);
  LOBYTE(a1) = WeakRetained == v8;

  if (a1) {
    goto LABEL_25;
  }
  ControllerImpl::waitForAllStopRecordCompletion(v26, v7);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3321888768;
  v22[2] = ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke;
  v22[3] = &unk_1EEFA7D50;
  uint64_t v10 = v26;
  uint64_t v24 = v26;
  uint64_t v25 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v23 = v8;
  ControllerImpl::safeNotifySync((uint64_t)v10, (uint64_t)"set endpointer delegate", v22);
  id v11 = objc_loadWeakRetained((id *)v26 + 52);
  BOOL v12 = v11 == 0;

  if (!v12)
  {
    id v13 = v26;
    uint64_t v14 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3321888768;
    _OWORD v20[2] = ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke_149;
    v20[3] = &__block_descriptor_48_ea8_32c39_ZTSNSt3__18weak_ptrI14ControllerImplEE_e5_v8__0l;
    void v20[4] = v13;
    int v21 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    ControllerImpl::safeNotify((uint64_t)v13, (uint64_t)"endpointer reset", v20);
    id v15 = objc_loadWeakRetained((id *)v26 + 52);
    *((unsigned char *)v26 + 424) = objc_opt_respondsToSelector() & 1;

    if (kAVVCScope)
    {
      id v16 = *(id *)kAVVCScope;
      if (!v16)
      {
LABEL_19:
        ControllerImpl::setupEndpointer(v26, a4);
        if (v21) {
          std::__shared_weak_count::__release_weak(v21);
        }
        if (v14) {
          std::__shared_weak_count::__release_weak(v14);
        }
        goto LABEL_23;
      }
    }
    else
    {
      id v16 = MEMORY[0x1E4F14500];
      id v17 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      BOOL v18 = *((unsigned char *)v26 + 424) == 0;
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v29 = "ControllerImpl.mm";
      if (v18) {
        float v19 = "external";
      }
      else {
        float v19 = "internal Speex";
      }
      __int16 v30 = 1024;
      int v31 = 955;
      __int16 v32 = 2080;
      OSStatus v33 = v19;
      _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d #### setEndpointerDelegate: using %s endpointer ####", buf, 0x1Cu);
    }

    goto LABEL_19;
  }
LABEL_23:

  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
LABEL_25:
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_19D83D35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }

  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }

  _Unwind_Resume(a1);
}

void ControllerImpl::waitForAllStopRecordCompletion(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = *((void *)this + 72);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      if (!*(void *)(v4 + 16)) {
        goto LABEL_34;
      }
    }
    else
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(v4 + 24));
      uint64_t v6 = *(void *)(v4 + 16);
      std::recursive_mutex::unlock((std::recursive_mutex *)(v4 + 24));
      if (!v6) {
        goto LABEL_34;
      }
    }
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_17;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v22 = (uint64_t)"ControllerImpl.mm";
      __int16 v23 = 1024;
      int v24 = 1416;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d waitForAllStopRecordCompletion: wait for all didStops to be delivered to the client", buf, 0x12u);
    }

LABEL_17:
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v18, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v10 = v18;
    id v9 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v20[0] = &unk_1EEFA3528;
    v20[1] = v10;
    _OWORD v20[2] = v9;
    v20[3] = v20;
    AVVCRecordingEngineMap::for_each_engine((void *)v4, (uint64_t)v20, "waitForAllStopRecordCompletion");
    std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](v20);
    id v11 = *((void *)this + 22);
    if (!v11) {
      goto LABEL_32;
    }
    dispatch_time_t v12 = dispatch_time(0, 3000000000);
    if (!dispatch_group_wait(v11, v12))
    {
LABEL_31:
      id v17 = (void *)*((void *)this + 22);
      *((void *)this + 22) = 0;

LABEL_32:
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      goto LABEL_34;
    }
    if (kAVVCScope)
    {
      id v13 = *(id *)kAVVCScope;
      if (!v13)
      {
LABEL_28:
        id v15 = *(NSObject **)kAVVCScope;
        id v16 = CALog::Scope::oslog(*(id *)kAVVCScope);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)AudioTimeStamp buf = 134217984;
          uint64_t v22 = 0x4008000000000000;
          _os_log_fault_impl(&dword_19D794000, v15, OS_LOG_TYPE_FAULT, "DelegateDispatchGroup timed out after %f seconds", buf, 0xCu);
        }

        goto LABEL_31;
      }
    }
    else
    {
      id v13 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v22 = (uint64_t)"ControllerImpl.mm";
      __int16 v23 = 1024;
      int v24 = 4336;
      __int16 v25 = 2048;
      uint64_t v26 = 0x4008000000000000;
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d DelegateDispatchGroup timed out after %f seconds", buf, 0x1Cu);
    }

    goto LABEL_28;
  }
LABEL_34:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_19D83D6F8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

id ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 40) + 416), *(id *)(a1 + 32));
}

void ControllerImpl::safeNotifySync(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  if (v5)
  {
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      uint64_t v6 = (std::recursive_mutex *)(a1 + 40);
      std::recursive_mutex::lock(v6);
      v5[2](v5);
      std::recursive_mutex::unlock(v6);
      goto LABEL_14;
    }
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_13:
        v5[2](v5);
        goto LABEL_14;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315650;
      uint64_t v10 = "ControllerImpl.mm";
      __int16 v11 = 1024;
      int v12 = 4476;
      __int16 v13 = 2080;
      uint64_t v14 = a2;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling %s synchronously", (uint8_t *)&v9, 0x1Cu);
    }

    goto LABEL_13;
  }
LABEL_14:
}

void sub_19D83D8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl21setEndpointerDelegateEP17AVVoiceControllerPU21objcproto10Endpointer11objc_objectm_block_invoke_149(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    id v3 = 0;
    goto LABEL_6;
  }
  id v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 32)) == 0)
  {
LABEL_6:
    if (kAVVCScope)
    {
      uint64_t v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v6 = MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315650;
      int v9 = "ControllerImpl.mm";
      __int16 v10 = 1024;
      int v11 = 950;
      __int16 v12 = 2048;
      uint64_t v13 = 0;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (impl: %p). Bailing", (uint8_t *)&v8, 0x1Cu);
    }

LABEL_13:
    if (!v3) {
      return;
    }
    goto LABEL_14;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 416));
  [WeakRetained reset];

LABEL_14:
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D83DA18(_Unwind_Exception *a1)
{
  id v3 = v2;

  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ControllerImpl::setupEndpointer(ControllerImpl *this, unint64_t a2)
{
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v18, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::_getCurrentRecordingEngine(&v16, (uint64_t)this, a2, 0, (uint64_t)"setupEndpointer");
  int v4 = *((_DWORD *)this + 107);
  long long v8 = *((_OWORD *)this + 27);
  uint64_t v5 = *((void *)this + 56);
  id WeakRetained = objc_loadWeakRetained((id *)(v18 + 416));
  if (WeakRetained)
  {
    uint64_t v7 = v16;

    if (v7)
    {
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 3321888768;
      v9[2] = ___ZN14ControllerImpl15setupEndpointerEm_block_invoke;
      v9[3] = &__block_descriptor_92_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE_e5_v8__0l;
      void v9[4] = v7;
      __int16 v10 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = v18;
      __int16 v12 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v15 = v4;
      long long v13 = v8;
      uint64_t v14 = v5;
      (*(void (**)(uint64_t, void *, const char *))(*(void *)v7 + 360))(v7, v9, "setupEndpointer");
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_19D83DBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  int v21 = *(std::__shared_weak_count **)(v19 - 56);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14ControllerImpl15setupEndpointerEm_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 256);
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x5812000000;
  v15[3] = __Block_byref_object_copy__154;
  void v15[4] = __Block_byref_object_dispose__155;
  v15[5] = 0;
  uint64_t v3 = *(void *)(v1 + 56);
  long long v4 = *(_OWORD *)(v1 + 40);
  long long v16 = *(_OWORD *)(v1 + 24);
  long long v17 = v4;
  uint64_t v18 = v3;
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  uint64_t v7 = v5;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = *(void *)(a1 + 48);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3321888768;
  v9[2] = ___ZN14ControllerImpl15setupEndpointerEm_block_invoke_157;
  v9[3] = &unk_1EEFA3C20;
  void v9[5] = v5;
  __int16 v10 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  void v9[4] = v15;
  int v8 = *(_DWORD *)(a1 + 88);
  int v13 = v2;
  int v14 = v8;
  long long v11 = *(_OWORD *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 80);
  ControllerImpl::safeNotify(v7, (uint64_t)"setup endpointer", v9);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Block_object_dispose(v15, 8);
}

void sub_19D83DD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE48c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

__n128 __Block_byref_object_copy__154(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN14ControllerImpl15setupEndpointerEm_block_invoke_157(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    long long v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      if (v4)
      {
        if (kAVVCScope)
        {
          uint64_t v5 = *(id *)kAVVCScope;
          if (!v5)
          {
LABEL_21:
            if (*(_DWORD *)(a1 + 80))
            {
              id WeakRetained = objc_loadWeakRetained((id *)(v4 + 416));
              char v10 = objc_opt_respondsToSelector();

              id v11 = objc_loadWeakRetained((id *)(v4 + 416));
              uint64_t v12 = v11;
              int v13 = (double *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
              if (v10) {
                [v11 configureWithASBD:v13 andFrameRate:*(unsigned int *)(a1 + 80)];
              }
              else {
                [v11 configureWithSampleRate:*(unsigned int *)(a1 + 80) andFrameRate:*v13];
              }
            }
            id v14 = objc_loadWeakRetained((id *)(v4 + 416));
            int v15 = v14;
            if (*(_DWORD *)(a1 + 84) == 1) {
              uint64_t v16 = 1;
            }
            else {
              uint64_t v16 = 2;
            }
            [v14 setEndpointMode:v16];

            id v17 = objc_loadWeakRetained((id *)(v4 + 416));
            [v17 setStartWaitTime:*(double *)(a1 + 56)];

            id v18 = objc_loadWeakRetained((id *)(v4 + 416));
            [v18 setInterspeechWaitTime:*(double *)(a1 + 64)];

            id v19 = objc_loadWeakRetained((id *)(v4 + 416));
            [v19 setEndWaitTime:*(double *)(a1 + 72)];

            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v5 = MEMORY[0x1E4F14500];
          id v8 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          int v20 = 136315394;
          int v21 = "ControllerImpl.mm";
          __int16 v22 = 1024;
          int v23 = 980;
          _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d setupEndpointer: configuring SR and wait times", (uint8_t *)&v20, 0x12u);
        }

        goto LABEL_21;
      }
    }
  }
  else
  {
    long long v3 = 0;
  }
  if (kAVVCScope)
  {
    uint64_t v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v20 = 136315650;
    int v21 = "ControllerImpl.mm";
    __int16 v22 = 1024;
    int v23 = 979;
    __int16 v24 = 2048;
    uint64_t v25 = 0;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (impl: %p). Bailing", (uint8_t *)&v20, 0x1Cu);
  }

LABEL_15:
  if (v3) {
LABEL_30:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D83E0A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c39_ZTSNSt3__18weak_ptrI14ControllerImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3321888768;
  *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl30configureDelegateDispatchGroupENSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke;
  *(void *)&buf[24] = &__block_descriptor_56_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
  *(void *)&uint8_t buf[32] = v4;
  uint64_t v16 = v3;
  id v17 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v5 = AVVCRecordingEngine::if_running_then(v3, buf);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v5)
  {
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_26;
      }
    }
    else
    {
      id v6 = (id)MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    id v8 = v6;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
LABEL_25:

LABEL_26:
      AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(v3 + 152));
      goto LABEL_27;
    }
    if (v2)
    {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v3)
      {
        int v9 = NSString;
        uint64_t v10 = *(void *)(v3 + 272);
        uint64_t v11 = v2->__shared_owners_ + 1;
LABEL_20:
        uint64_t v12 = [v9 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v3, v10, v11];
LABEL_22:
        int v13 = v12;
        uint64_t v14 = *(void *)(v3 + 272);
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1422;
        *(_WORD *)&unsigned char buf[18] = 2112;
        *(void *)&buf[20] = v13;
        *(_WORD *)&unsigned char buf[28] = 2048;
        *(void *)&buf[30] = v14;
        _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Interrupting recording on engine[%@] with streamID(%llu)", buf, 0x26u);

        if (v2) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v2);
        }

        goto LABEL_25;
      }
    }
    else if (v3)
    {
      uint64_t v11 = 0;
      int v9 = NSString;
      uint64_t v10 = *(void *)(v3 + 272);
      goto LABEL_20;
    }
    uint64_t v12 = @"(0x0) use_count:0";
    goto LABEL_22;
  }
LABEL_27:
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_19D83E360(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30configureDelegateDispatchGroupENSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 176);
  if (!v3)
  {
    dispatch_group_t v4 = dispatch_group_create();
    BOOL v5 = *(void **)(v2 + 176);
    *(void *)(v2 + 176) = v4;

    uint64_t v3 = *(NSObject **)(v2 + 176);
  }
  dispatch_group_enter(v3);
  uint64_t v6 = *(void *)(a1 + 40);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  id v7[2] = ___ZN14ControllerImpl30configureDelegateDispatchGroupENSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_2;
  _DWORD v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v2;
  AVVCRecordingEngine::setDidStopDelegateCompletionBlock(v6, v7);
}

void ___ZN14ControllerImpl30configureDelegateDispatchGroupENSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 176);
  if (v1) {
    dispatch_group_leave(v1);
  }
}

void std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EEFA3528;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1EEFA3528;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func(void *a1)
{
  *a1 = &unk_1EEFA3528;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x19F3ABB30);
}

void *std::__function::__func<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0,std::allocator<ControllerImpl::waitForAllStopRecordCompletion(AVVoiceController *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func(void *a1)
{
  *a1 = &unk_1EEFA3528;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void ControllerImpl::configureAlertModeFromModeAndEngine(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  TraceMethod::TraceMethod((TraceMethod *)v23, "configureAlertModeFromModeAndEngine");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v21, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  if (*a3) {
    goto LABEL_11;
  }
  if (!kAVVCScope)
  {
    id v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
    goto LABEL_6;
  }
  id v8 = *(id *)kAVVCScope;
  if (v8)
  {
LABEL_6:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v25 = "ControllerImpl.mm";
      __int16 v26 = 1024;
      int v27 = 1030;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d configureAlertModeFromModeAndEngine: Nil recording engine. Abandon ship!", buf, 0x12u);
    }
  }
  if (v7) {
    v7[2](v7, 4294955515);
  }
LABEL_11:
  uint64_t v10 = *a3;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3321888768;
  id v13[2] = ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEEU13block_pointerFviE_block_invoke;
  unsigned char v13[3] = &unk_1EEFA8A50;
  uint64_t v15 = a1;
  uint64_t v16 = v10;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  id v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v21;
  id v19 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = a2;
  uint64_t v12 = v7;
  uint64_t v14 = v12;
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v10 + 360))(v10, v13, "configureAlertModeFromModeAndEngine");

  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v23);
}

void sub_19D83E854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  TraceMethod::~TraceMethod((TraceMethod *)(v22 - 88));

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEEU13block_pointerFviE_block_invoke(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  if (!AVVCRouteManager::isOutputWiredHeadset(*(id **)(*(void *)(a1 + 48) + 376)))
  {
    uint64_t v4 = (id *)kAVVCScope;
    if (!*(void *)(*(void *)(a1 + 48) + 240)) {
      goto LABEL_14;
    }
    if (kAVVCScope)
    {
      BOOL v5 = *(id *)kAVVCScope;
      if (!v5) {
        goto LABEL_26;
      }
    }
    else
    {
      BOOL v5 = MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      OSStatus v33 = "ControllerImpl.mm";
      __int16 v34 = 1024;
      int v35 = 1044;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: record start time was set -- check for ZLL", buf, 0x12u);
    }

LABEL_26:
    int v31 = 0;
    uint64_t v11 = +[AVVoiceTriggerClient sharedInstance];
    uint64_t v12 = v11;
    if (v11)
    {
      int v13 = [v11 voiceTriggerPastDataFramesAvailable];
      int v31 = v13;
    }
    else
    {
      BOOL v14 = (*(uint64_t (**)(void, int *))(**(void **)(a1 + 48) + 296))(*(void *)(a1 + 48), &v31) == 0;
      int v13 = v31;
      if (!v14) {
        goto LABEL_33;
      }
    }
    if (v13)
    {
      if (kAVVCScope)
      {
        uint64_t v15 = *(id *)kAVVCScope;
        if (!v15) {
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v15 = MEMORY[0x1E4F14500];
        id v16 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
LABEL_45:

LABEL_46:
        char v9 = 1;
        goto LABEL_47;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      OSStatus v33 = "ControllerImpl.mm";
      __int16 v34 = 1024;
      int v35 = 1060;
      __int16 v36 = 1024;
      LODWORD(v37) = v13;
      id v17 = "%25s:%-5d configureAlertModeFromModeAndEngine: ZLL query - back frames: %u";
      uint64_t v18 = v15;
      uint32_t v19 = 24;
LABEL_44:
      _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      goto LABEL_45;
    }
LABEL_33:
    if (!supportsCarPlayAuxStream())
    {
      char v9 = 0;
LABEL_47:

      goto LABEL_48;
    }
    if (kAVVCScope)
    {
      uint64_t v15 = *(id *)kAVVCScope;
      if (!v15) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v15 = MEMORY[0x1E4F14500];
      id v20 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_45;
    }
    uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 240);
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    OSStatus v33 = "ControllerImpl.mm";
    __int16 v34 = 1024;
    int v35 = 1066;
    __int16 v36 = 2048;
    uint64_t v37 = v21;
    id v17 = "%25s:%-5d configureAlertModeFromModeAndEngine: CarPlay supports ZLL. recordStartTime : %llu";
    uint64_t v18 = v15;
    uint32_t v19 = 28;
    goto LABEL_44;
  }
  if (!kAVVCScope)
  {
    uint64_t v3 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
    goto LABEL_10;
  }
  uint64_t v3 = *(id *)kAVVCScope;
  if (v3)
  {
LABEL_10:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      OSStatus v33 = "ControllerImpl.mm";
      __int16 v34 = 1024;
      int v35 = 1039;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d configureAlertModeFromModeAndEngine: Wired headset output - disable ZLL", buf, 0x12u);
    }
  }
  *(void *)(*(void *)(a1 + 48) + 240) = 0;
  uint64_t v4 = (id *)kAVVCScope;
LABEL_14:
  if (!v4)
  {
    id v7 = MEMORY[0x1E4F14500];
    id v8 = MEMORY[0x1E4F14500];
    goto LABEL_18;
  }
  id v7 = *v4;
  if (v7)
  {
LABEL_18:
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      OSStatus v33 = "ControllerImpl.mm";
      __int16 v34 = 1024;
      int v35 = 1078;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: record start time not set", buf, 0x12u);
    }
  }
  char v9 = 0;
LABEL_48:
  char isOutputHandsFree = AVVCRouteManager::isOutputHandsFree(*(id **)(*(void *)(a1 + 48) + 376));
  uint64_t v23 = *(void *)(a1 + 64);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  v25[2] = ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEEU13block_pointerFviE_block_invoke_163;
  v25[3] = &unk_1E5964FB8;
  uint64_t v24 = *(void *)(a1 + 80);
  uint64_t v27 = v2;
  uint64_t v28 = v24;
  char v29 = isOutputHandsFree;
  char v30 = v9;
  id v26 = *(id *)(a1 + 32);
  ControllerImpl::safeWork(v23, v25, (uint64_t)"configureAlertModeFromModeAndEngine_block_invoke");
}

void sub_19D83ED2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(void *result, void *a2)
{
  uint64_t v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[9];
  result[8] = a2[8];
  result[9] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEEU13block_pointerFviE_block_invoke_163(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 <= 1768764004)
  {
    if (v2 <= 1684628339)
    {
      if (v2 <= 1651795059)
      {
        if (v2 != 1635087471)
        {
          uint64_t v4 = 1651794544;
          goto LABEL_34;
        }
LABEL_41:
        if (kAVVCScope)
        {
          id v10 = *(id *)kAVVCScope;
          if (!v10) {
            goto LABEL_78;
          }
        }
        else
        {
          id v10 = MEMORY[0x1E4F14500];
          id v19 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v20 = *(void *)(a1 + 48);
          id v49 = "ControllerImpl.mm";
          int v48 = 136315650;
          if (v20 == 1635087471) {
            uint64_t v21 = "Auto";
          }
          else {
            uint64_t v21 = "Post-Voice";
          }
          __int16 v50 = 1024;
          int v51 = 1294;
          __int16 v52 = 2080;
          os_log_type_t v53 = v21;
          _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: %s", (uint8_t *)&v48, 0x1Cu);
        }
        goto LABEL_77;
      }
      if (v2 == 1651795060) {
        goto LABEL_59;
      }
      uint64_t v7 = 1668314723;
      goto LABEL_25;
    }
    if (v2 <= 1752132964)
    {
      if (v2 != 1684628340)
      {
        uint64_t v7 = 1751414371;
LABEL_25:
        if (v2 != v7) {
          goto LABEL_68;
        }
        goto LABEL_38;
      }
      goto LABEL_35;
    }
    if (v2 != 1752132965)
    {
      if (v2 != 1752396914) {
        goto LABEL_68;
      }
      if (kAVVCScope)
      {
        char v9 = *(id *)kAVVCScope;
        if (!v9)
        {
LABEL_151:
          if (*(void *)(v3 + 336) == -1) {
            LODWORD(v8) = 0;
          }
          else {
            LODWORD(v8) = *(void *)(v3 + 336);
          }
          if (*(void *)(v3 + 344) == -1) {
            LODWORD(v17) = 0;
          }
          else {
            LODWORD(v17) = *(void *)(v3 + 344);
          }
          if (*(void *)(v3 + 352) == -1) {
            LODWORD(v5) = 0;
          }
          else {
            LODWORD(v5) = *(void *)(v3 + 352);
          }
          goto LABEL_87;
        }
      }
      else
      {
        char v9 = MEMORY[0x1E4F14500];
        id v45 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v48 = 136315394;
        id v49 = "ControllerImpl.mm";
        __int16 v50 = 1024;
        int v51 = 1314;
        _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: VoiceTriggerTraining", (uint8_t *)&v48, 0x12u);
      }

      goto LABEL_151;
    }
LABEL_44:
    if (kAVVCScope)
    {
      uint64_t v12 = *(id *)kAVVCScope;
      if (!v12) {
        goto LABEL_119;
      }
    }
    else
    {
      uint64_t v12 = MEMORY[0x1E4F14500];
      id v37 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      int v48 = 136315394;
      id v49 = "ControllerImpl.mm";
      __int16 v50 = 1024;
      int v51 = 1268;
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: HomeButtonPress/UIButtonPress", (uint8_t *)&v48, 0x12u);
    }

LABEL_119:
    char v38 = MGGetBoolAnswer();
    if (kAVVCScope)
    {
      id v39 = *(id *)kAVVCScope;
      if (!v39) {
        goto LABEL_128;
      }
    }
    else
    {
      id v39 = MEMORY[0x1E4F14500];
      id v40 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = "handsFree";
      int v42 = *(unsigned __int8 *)(a1 + 56);
      id v49 = "ControllerImpl.mm";
      int v48 = 136315650;
      if (!v42) {
        uint64_t v41 = "built-in speaker";
      }
      __int16 v50 = 1024;
      int v51 = 1273;
      __int16 v52 = 2080;
      os_log_type_t v53 = v41;
      _os_log_impl(&dword_19D794000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: %s", (uint8_t *)&v48, 0x1Cu);
    }

LABEL_128:
    if ((v38 & 1) == 0 && !*(unsigned char *)(a1 + 57))
    {
      if (kAVVCScope)
      {
        id v10 = *(id *)kAVVCScope;
        if (!v10) {
          goto LABEL_78;
        }
      }
      else
      {
        id v10 = MEMORY[0x1E4F14500];
        id v47 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        int v48 = 136315394;
        id v49 = "ControllerImpl.mm";
        __int16 v50 = 1024;
        int v51 = 1275;
        _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: no vibrator support and no ZLL", (uint8_t *)&v48, 0x12u);
      }
      goto LABEL_77;
    }
    uint64_t v8 = *(void *)(v3 + 336);
    if (v8 != -1) {
      goto LABEL_169;
    }
    int v43 = *(unsigned __int8 *)(a1 + 57);
    if (*(unsigned char *)(a1 + 56))
    {
      if (!*(unsigned char *)(a1 + 57))
      {
        LODWORD(v8) = 2;
        goto LABEL_169;
      }
      int v43 = 1;
    }
    LODWORD(v8) = v43 == 0;
LABEL_169:
    uint64_t v17 = *(void *)(v3 + 344);
    if (v17 == -1)
    {
      if (*(unsigned char *)(a1 + 56)) {
        LODWORD(v17) = 2;
      }
      else {
        LODWORD(v17) = 1;
      }
    }
    uint64_t v5 = *(void *)(v3 + 352);
    if (v5 == -1)
    {
      if (*(unsigned char *)(a1 + 56)) {
        LODWORD(v5) = 2;
      }
      else {
        LODWORD(v5) = 1;
      }
    }
    goto LABEL_87;
  }
  if (v2 <= 1969840751)
  {
    if (v2 > 1886352243)
    {
      if (v2 == 1886352244) {
        goto LABEL_41;
      }
      uint64_t v7 = 1936750196;
      goto LABEL_25;
    }
    if (v2 == 1768764005)
    {
LABEL_35:
      if (kAVVCScope)
      {
        id v10 = *(id *)kAVVCScope;
        if (!v10) {
          goto LABEL_78;
        }
      }
      else
      {
        id v10 = MEMORY[0x1E4F14500];
        id v13 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        BOOL v14 = "Wired/BT ButtonPress";
        uint64_t v15 = *(void *)(a1 + 48);
        if (v15 == 1684628340) {
          BOOL v14 = "Dictation";
        }
        id v49 = "ControllerImpl.mm";
        int v48 = 136315650;
        if (v15 == 1768764005) {
          BOOL v14 = "iMessageGestureToHead";
        }
        __int16 v50 = 1024;
        int v51 = 1338;
        __int16 v52 = 2080;
        os_log_type_t v53 = v14;
        _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: %s", (uint8_t *)&v48, 0x1Cu);
      }
LABEL_77:

LABEL_78:
      if (*(void *)(v3 + 336) == -1) {
        LODWORD(v8) = 2;
      }
      else {
        LODWORD(v8) = *(void *)(v3 + 336);
      }
      if (*(void *)(v3 + 344) == -1) {
        LODWORD(v17) = 2;
      }
      else {
        LODWORD(v17) = *(void *)(v3 + 344);
      }
      if (*(void *)(v3 + 352) == -1) {
        LODWORD(v5) = 2;
      }
      else {
        LODWORD(v5) = *(void *)(v3 + 352);
      }
      goto LABEL_87;
    }
    if (v2 != 1768780647) {
      goto LABEL_68;
    }
    LODWORD(v5) = *(_DWORD *)(v3 + 328);
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_139:
        LODWORD(v8) = 0;
        LODWORD(v17) = 2;
        goto LABEL_87;
      }
    }
    else
    {
      id v6 = MEMORY[0x1E4F14500];
      id v44 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v48 = 136315394;
      id v49 = "ControllerImpl.mm";
      __int16 v50 = 1024;
      int v51 = 1328;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: iMessage", (uint8_t *)&v48, 0x12u);
    }

    goto LABEL_139;
  }
  if (v2 > 1987012962)
  {
    if (v2 != 1987012963)
    {
      uint64_t v4 = 2003329648;
LABEL_34:
      if (v2 == v4) {
        goto LABEL_35;
      }
LABEL_68:
      if (kAVVCScope)
      {
        uint64_t v18 = *(id *)kAVVCScope;
        if (!v18)
        {
LABEL_167:
          LODWORD(v5) = 2;
          LODWORD(v17) = 2;
          LODWORD(v8) = 2;
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t v18 = MEMORY[0x1E4F14500];
        id v46 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v48 = 136315394;
        id v49 = "ControllerImpl.mm";
        __int16 v50 = 1024;
        int v51 = 1346;
        _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: default", (uint8_t *)&v48, 0x12u);
      }

      goto LABEL_167;
    }
LABEL_38:
    if (kAVVCScope)
    {
      uint64_t v11 = *(id *)kAVVCScope;
      if (!v11)
      {
LABEL_59:
        if (*(void *)(v3 + 336) == -1) {
          LODWORD(v8) = 0;
        }
        else {
          LODWORD(v8) = *(void *)(v3 + 336);
        }
        if (*(void *)(v3 + 344) == -1) {
          LODWORD(v17) = 2;
        }
        else {
          LODWORD(v17) = *(void *)(v3 + 344);
        }
        if (*(void *)(v3 + 352) == -1) {
          LODWORD(v5) = 2;
        }
        else {
          LODWORD(v5) = *(void *)(v3 + 352);
        }
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v11 = MEMORY[0x1E4F14500];
      id v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v48 = 136315394;
      id v49 = "ControllerImpl.mm";
      __int16 v50 = 1024;
      int v51 = 1308;
      _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertModeFromModeAndEngine: Built-In/BT/CarPlay Voice Activation", (uint8_t *)&v48, 0x12u);
    }

    goto LABEL_59;
  }
  if (v2 == 1969840752) {
    goto LABEL_44;
  }
  if (v2 != 1986357346) {
    goto LABEL_68;
  }
  uint64_t v8 = *(void *)(v3 + 336);
  if (v8 == -1) {
    LODWORD(v8) = 2 * (*(unsigned char *)(a1 + 57) == 0);
  }
  if (*(void *)(v3 + 344) == -1) {
    LODWORD(v17) = 2;
  }
  else {
    LODWORD(v17) = *(void *)(v3 + 344);
  }
  if (*(void *)(v3 + 352) == -1) {
    LODWORD(v5) = 2;
  }
  else {
    LODWORD(v5) = *(void *)(v3 + 352);
  }
LABEL_87:
  ControllerImpl::setStartAlertMode(v3, v8);
  ControllerImpl::setStopAlertMode(v3, v17);
  ControllerImpl::setStopWithErrorAlertMode(v3, v5);
  if (kAVVCScope)
  {
    uint64_t v22 = *(id *)kAVVCScope;
    if (!v22) {
      goto LABEL_112;
    }
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4F14500];
    id v23 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v24 = *(_DWORD *)(v3 + 320) - 1;
    if (v24 > 3) {
      uint64_t v25 = "Silent";
    }
    else {
      uint64_t v25 = off_1E5965700[v24];
    }
    unint64_t v26 = *(void *)(v3 + 336);
    if (v26 > 4) {
      uint64_t v27 = "No Override";
    }
    else {
      uint64_t v27 = off_1E59656D8[v26];
    }
    unsigned int v28 = *(_DWORD *)(v3 + 324) - 1;
    if (v28 > 3) {
      char v29 = "Silent";
    }
    else {
      char v29 = off_1E5965700[v28];
    }
    unint64_t v30 = *(void *)(v3 + 344);
    if (v30 > 4) {
      int v31 = "No Override";
    }
    else {
      int v31 = off_1E59656D8[v30];
    }
    unsigned int v32 = *(_DWORD *)(v3 + 328) - 1;
    if (v32 > 3) {
      OSStatus v33 = "Silent";
    }
    else {
      OSStatus v33 = off_1E5965700[v32];
    }
    unint64_t v34 = *(void *)(v3 + 352);
    if (v34 > 4) {
      int v35 = "No Override";
    }
    else {
      int v35 = off_1E59656D8[v34];
    }
    int v48 = 136316930;
    id v49 = "ControllerImpl.mm";
    __int16 v50 = 1024;
    int v51 = 1356;
    __int16 v52 = 2080;
    os_log_type_t v53 = v25;
    __int16 v54 = 2080;
    uint64_t v55 = v27;
    __int16 v56 = 2080;
    uint64_t v57 = v29;
    __int16 v58 = 2080;
    __int16 v59 = v31;
    __int16 v60 = 2080;
    id v61 = v33;
    __int16 v62 = 2080;
    __int16 v63 = v35;
    _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d configureAlertModeFromModeAndEngine: [final alert modes, overrides] : Start[%s, %s], Stop[%s, %s], StopWError[%s, %s])", (uint8_t *)&v48, 0x4Eu);
  }

LABEL_112:
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  id v6 = (std::__shared_weak_count *)a1[8];
  v11[0] = a1[7];
  v11[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_2;
  v8[3] = &unk_1E5964FE0;
  uint64_t v10 = a1[4];
  id v7 = v3;
  id v9 = v7;
  ControllerImpl::configureAlertModeFromModeAndEngine(v4, v5, v11, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19D83F900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }

  _Unwind_Resume(a1);
}

NSObject *___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_2(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  uint64_t result = *(NSObject **)(a1 + 32);
  if (result) {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void ControllerImpl::stopRunningEngines(ControllerImpl *this, AVVoiceController *a2, int a3, unsigned int a4)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  uint64_t v8 = (void *)*((void *)this + 72);
  id v9 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8)
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v11, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v10 = 0x100000000;
    if (!a3) {
      uint64_t v10 = 0;
    }
    v13[0] = &unk_1EEFA3408;
    v13[1] = v10 | a4;
    unsigned char v13[3] = v13;
    AVVCRecordingEngineMap::for_each_engine(v8, (uint64_t)v13, "stopRunningEngines");
    std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](v13);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_19D83FA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0,std::allocator<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (*(uint64_t *)(v3 + 224) < 4) {
    goto LABEL_15;
  }
  if (!kAVVCScope)
  {
    id v5 = (id)MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
    goto LABEL_6;
  }
  id v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_6:
    id v7 = v5;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if (v2)
      {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = NSString;
        uint64_t v9 = *(void *)(v3 + 272);
        uint64_t v10 = v2->__shared_owners_ + 1;
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v8 = NSString;
        uint64_t v9 = *(void *)(v3 + 272);
      }
      id v11 = [v8 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v3, v9, v10];
      uint64_t v12 = *(void *)(v3 + 272);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      BOOL v14 = "ControllerImpl.mm";
      __int16 v15 = 1024;
      int v16 = 1385;
      __int16 v17 = 2112;
      id v18 = v11;
      __int16 v19 = 2048;
      uint64_t v20 = v12;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Interrupting recording on engine[%@] with streamID(%llu)", buf, 0x26u);

      if (v2) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
    }
  }
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v3, *(_DWORD *)(a1 + 8), "operator()");
  AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(v3 + 152));
LABEL_15:
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_19D83FC54(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0,std::allocator<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EEFA3408;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0,std::allocator<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA3408;
  result[1] = v3;
  return result;
}

void std::__function::__func<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0,std::allocator<ControllerImpl::stopRunningEngines(AVVoiceController *,BOOL,int)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
}

void std::__function::__func<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0,std::allocator<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(AVVCRecordingEngine **)a2;
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!v3 || *((void *)v3 + 28) != 5) {
    goto LABEL_14;
  }
  id v11 = 0;
  (*(void (**)(AVVCRecordingEngine *, NSString **))(*(void *)v3 + 328))(v3, &v11);
  if ((areNSStringsEqual(v11, **(NSString ***)(a1 + 8)) & 1) == 0)
  {
    id v5 = AVVCRecordingEngine::getActivationContextSettings(v3);
    int v6 = [v5 announceCallsEnabled];

    if (v6)
    {
      if (kAVVCScope)
      {
        id v7 = *(id *)kAVVCScope;
        if (!v7)
        {
LABEL_12:
          AVVCRecordingEngine::stopRecordWithRecordLock(*((AVVCRecordingEngine **)v3 + 19));
          goto LABEL_13;
        }
      }
      else
      {
        id v7 = (id)MEMORY[0x1E4F14500];
        id v8 = MEMORY[0x1E4F14500];
      }
      uint64_t v9 = v7;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *((void *)v3 + 34);
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        id v13 = "ControllerImpl.mm";
        __int16 v14 = 1024;
        int v15 = 1454;
        __int16 v16 = 2048;
        uint64_t v17 = v10;
        _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopping the recording on stream(%lu) due to a category change", buf, 0x1Cu);
      }

      goto LABEL_12;
    }
  }
LABEL_13:

LABEL_14:
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_19D83FEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0,std::allocator<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA34E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0,std::allocator<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA34E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0,std::allocator<ControllerImpl::stopRecordingOnCategoryChange(AVVoiceController *,NSDictionary const*)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
}

void ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURLU13block_pointerFviE_block_invoke(uint64_t a1)
{
  TraceMethod::TraceMethod((TraceMethod *)v21, "setAlertURL");
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = v2;
    int v4 = ControllerImpl::setupAlert(*(void *)(a1 + 56), *(void **)(a1 + 40), *(_DWORD *)(a1 + 72), v3);
  }
  else
  {
    unsigned int v5 = *(_DWORD *)(a1 + 72) - 1;
    if (v5 > 2) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *((void *)&off_1E5965720 + v5);
    }
    id v3 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v6];
    int v4 = ControllerImpl::setupAlert(*(void *)(a1 + 56), *(void **)(a1 + 40), *(_DWORD *)(a1 + 72), v3);
  }
  int v7 = v4;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(v8 + 280);
  if (v9)
  {
    int v10 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      while (1)
      {
        uint64_t v11 = v9;
        int v12 = *(_DWORD *)(v9 + 32);
        if (v10 >= v12) {
          break;
        }
        uint64_t v9 = *(void *)v11;
        id v13 = (uint64_t **)v11;
        if (!*(void *)v11) {
          goto LABEL_16;
        }
      }
      if (v12 >= v10) {
        break;
      }
      uint64_t v9 = *(void *)(v11 + 8);
      if (!v9)
      {
        id v13 = (uint64_t **)(v11 + 8);
        goto LABEL_16;
      }
    }
  }
  else
  {
    id v13 = (uint64_t **)(v8 + 280);
    uint64_t v11 = v8 + 280;
LABEL_16:
    __int16 v14 = operator new(0x30uLL);
    char v14[8] = *(_DWORD *)(a1 + 72);
    *((void *)v14 + 5) = 0;
    std::__tree<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::__map_value_compare<AVAudioNodeImplBase *,std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>,std::less<AVAudioNodeImplBase *>,true>,std::allocator<std::__value_type<AVAudioNodeImplBase *,AUGraphNodeBaseV3 *>>>::__insert_node_at((uint64_t **)(v8 + 272), v11, v13, (uint64_t *)v14);
    uint64_t v11 = (uint64_t)v14;
  }
  objc_storeStrong((id *)(v11 + 40), v3);
  uint64_t v15 = *(void *)(a1 + 56);
  if (*(_DWORD *)(v15 + 360) == 201)
  {
    ControllerImpl::setAlertQueueState(*(void *)(a1 + 56), 200);
    uint64_t v15 = *(void *)(a1 + 56);
  }
  __int16 v16 = *(void **)(a1 + 48);
  BOOL v17 = v16 != 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  _OWORD v18[2] = ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURLU13block_pointerFviE_block_invoke_2;
  void v18[3] = &unk_1E5964EC8;
  id v19 = v16;
  int v20 = v7;
  ControllerImpl::safeNotifyAlwaysAsync(v15, v17, v18);

  TraceMethod::~TraceMethod((TraceMethod *)v21);
}

void sub_19D840180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);

  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURLU13block_pointerFviE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t ControllerImpl::setAlertURL(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  id v13[2] = ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURL_block_invoke;
  unsigned char v13[3] = &unk_1E5965008;
  uint64_t v17 = a1;
  id v9 = v7;
  id v14 = v9;
  int v18 = a3;
  id v10 = v8;
  id v15 = v10;
  __int16 v16 = &v19;
  makeSynchronous(v13);
  uint64_t v11 = *((unsigned int *)v20 + 6);

  _Block_object_dispose(&v19, 8);
  return v11;
}

void sub_19D8402D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURL_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(_DWORD *)(a1 + 64);
  unsigned int v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  v17[2] = ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURL_block_invoke_2;
  v17[3] = &unk_1E5964FE0;
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v18 = v3;
  uint64_t v19 = v7;
  id v9 = v3;
  id v10 = v5;
  id v11 = v6;
  int v12 = v17;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v27, *(void *)(v8 + 8), *(std::__shared_weak_count **)(v8 + 16));
  uint64_t v13 = v27;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3321888768;
  _OWORD v20[2] = ___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURLU13block_pointerFviE_block_invoke;
  v20[3] = &unk_1EEFA8628;
  id v14 = v11;
  int v26 = v4;
  id v21 = v14;
  uint64_t v24 = v27;
  uint64_t v25 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v15 = v10;
  id v22 = v15;
  __int16 v16 = v12;
  id v23 = v16;
  ControllerImpl::safeWork(v13, v20, (uint64_t)"setAlertURL");

  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }

  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_19D8404A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }

  char v29 = *(std::__shared_weak_count **)(v27 - 72);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }

  _Unwind_Resume(a1);
}

NSObject *___ZN14ControllerImpl11setAlertURLEP17AVVoiceController16AVVoiceAlertTypeP5NSURL_block_invoke_2(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  uint64_t result = *(NSObject **)(a1 + 32);
  if (result) {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void ControllerImpl::VibeAlertCompletionProc(ControllerImpl *this, void *a2, AVVoiceController *a3)
{
  int v4 = (int)this;
  v87[3] = *(std::__shared_weak_count **)MEMORY[0x1E4F143B8];
  unsigned int v5 = a2;
  int v65 = 4129;
  char v66 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v64, "VibeAlertCompletionProc");
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      uint64_t v6 = *(id *)kAVVCScope;
      if (v6)
      {
        uint64_t v7 = v6;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2782;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v4;
          _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d VibeAlertCompletionProc: SSID %u done", buf, 0x18u);
        }
      }
    }
  }
  if (v5)
  {
    [(AVVoiceController *)v5 impl];
    if (v62 && ObjectExists(v5))
    {
      ProfileMetrics(&cfstr_AvvcProfilePro_11.isa);
      ControllerImpl::setAlertState((uint64_t)v62, 0);
      if (v4 > 1403)
      {
        if ((v4 - 1405) >= 2)
        {
          if (v4 != 1404)
          {
LABEL_13:
            if (kAVVCScope)
            {
              uint64_t v8 = *(id *)kAVVCScope;
              if (!v8)
              {
LABEL_123:
                int v51 = v62;
                *((_DWORD *)v62 + 51) = 0;
                *((void *)v51 + 26) = 0;
                goto LABEL_124;
              }
            }
            else
            {
              uint64_t v8 = MEMORY[0x1E4F14500];
              id v22 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2843;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v4;
              _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d VibeAlertCompletionProc: notified for other ssID %d -- no-op", buf, 0x18u);
            }

            goto LABEL_123;
          }
LABEL_29:
          uint64_t v13 = v5;
          LODWORD(v69) = 4131;
          BYTE4(v69) = 0;
          long long v70 = 0u;
          long long v71 = 0u;
          kdebug_trace();
          TraceMethod::TraceMethod((TraceMethod *)&v80, "vibeStartAlertFinished");
          ControllerImpl::_getCurrentRecordingEngine(&v82, (uint64_t)v62, (unint64_t)a3, 0, (uint64_t)"vibeStartAlertFinished");
          id v14 = v82;
          if (v82)
          {
            *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3321888768;
            *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl22vibeStartAlertFinishedEP17AVVoiceControllerm_block_invoke;
            *(void *)&buf[24] = &__block_descriptor_56_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
            *(void *)&uint8_t buf[32] = v62;
            unsigned int v86 = v82;
            id v15 = v83;
            v87[0] = v83;
            if (v83) {
              atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(const char *, unsigned char *, const char *))(*(void *)v14 + 360))(v14, buf, "vibeStartAlertFinished");
            if (v87[0]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v87[0]);
            }
            goto LABEL_106;
          }
          if (kAVVCScope)
          {
            uint64_t v19 = *(id *)kAVVCScope;
            if (!v19)
            {
LABEL_105:
              id v15 = v83;
LABEL_106:
              if (v15) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v15);
              }
              TraceMethod::~TraceMethod((TraceMethod *)&v80);
              TraceWrapper::~TraceWrapper((TraceWrapper *)&v69);

              int v40 = *((_DWORD *)v62 + 51);
              if (v40)
              {
                uint64_t v41 = (void *)*((void *)v62 + 26);
                int v42 = (void *)*((void *)v62 + 49);
                objc_initWeak((id *)buf, v13);
                int v43 = v62;
                v59[0] = MEMORY[0x1E4F143A8];
                v59[1] = 3221225472;
                v59[2] = ___ZN14ControllerImpl23VibeAlertCompletionProcEjP17AVVoiceControllerm_block_invoke;
                v59[3] = &unk_1E5965058;
                objc_copyWeak(v60, (id *)buf);
                int v61 = v40;
                v60[1] = v41;
                uint64_t v60[2] = v42;
                ControllerImpl::safeNotify((uint64_t)v43, (uint64_t)"haptic alertPlaybackFinishedWithSettings", v59);
                objc_destroyWeak(v60);
                objc_destroyWeak((id *)buf);
              }
              goto LABEL_123;
            }
          }
          else
          {
            uint64_t v19 = MEMORY[0x1E4F14500];
            id v39 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2720;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = a3;
            _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d vibeStartAlertFinished: Could not find engine for streamID(%lu)", buf, 0x1Cu);
          }

          goto LABEL_105;
        }
      }
      else if ((v4 - 1111) >= 2)
      {
        if (v4 != 1110) {
          goto LABEL_13;
        }
        goto LABEL_29;
      }
      id v11 = v5;
      TraceMethod::TraceMethod((TraceMethod *)v84, "vibeStopAlertFinished");
      if (kAVVCScope)
      {
        id v12 = *(id *)kAVVCScope;
        if (!v12) {
          goto LABEL_81;
        }
      }
      else
      {
        id v12 = (id)MEMORY[0x1E4F14500];
        id v16 = MEMORY[0x1E4F14500];
      }
      uint64_t v17 = v12;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        ControllerImpl::_getCurrentRecordingEngine(&v69, (uint64_t)v62, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
        uint64_t v54 = v69;
        if (v69)
        {
          ControllerImpl::_getCurrentRecordingEngine(&v82, (uint64_t)v62, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
          __int16 v52 = (*(void (**)(const char *, void))(*(void *)v82 + 64))(v82, 0);
          switch([v52 sessionState])
          {
            case 0u:
              goto LABEL_42;
            case 1u:
              id v18 = "Inactive";
              break;
            case 2u:
              id v18 = "InteruptedWhileRecording";
              break;
            case 3u:
              id v18 = "InteruptedWhilePlaying";
              break;
            case 4u:
              id v18 = "Deactivating";
              break;
            case 5u:
              id v18 = "Prewarming";
              break;
            case 6u:
              id v18 = "Activating";
              break;
            case 7u:
              id v18 = "Active";
              break;
            default:
              id v18 = "ILLEGAL";
              break;
          }
        }
        else
        {
LABEL_42:
          id v18 = "NotConfigured";
        }
        ControllerImpl::_getCurrentRecordingEngine(&v80, (uint64_t)v62, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
        if (v80)
        {
          if (v81) {
            uint64_t v20 = v81->__shared_owners_ + 1;
          }
          else {
            uint64_t v20 = 0;
          }
          id v21 = [NSString stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v80, *(unsigned int *)(v80 + 272), v20];
        }
        else
        {
          id v21 = @"(0x0) use_count:0";
        }
        uint64_t v55 = v21;
        os_log_type_t v53 = v11;
        ControllerImpl::_getCurrentRecordingEngine(&v78, (uint64_t)v62, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
        uint64_t v23 = v78;
        if (v78)
        {
          ControllerImpl::_getCurrentRecordingEngine(&v76, (uint64_t)v62, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
          unsigned int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 320))(v76);
          if (v24 > 4) {
            uint64_t v25 = "ILLEGAL";
          }
          else {
            uint64_t v25 = off_1E59657C0[v24];
          }
        }
        else
        {
          uint64_t v25 = "unconfigured";
        }
        ControllerImpl::_getCurrentRecordingEngine(&v74, (uint64_t)v62, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
        if (v74)
        {
          ControllerImpl::_getCurrentRecordingEngine(&location, (uint64_t)v62, (unint64_t)a3, 0, (uint64_t)"vibeStopAlertFinished");
          unint64_t v26 = *((void *)location + 28);
          if (v26 > 6) {
            uint64_t v27 = "ILLEGAL";
          }
          else {
            uint64_t v27 = off_1E59657E8[v26];
          }
          *(_DWORD *)AudioTimeStamp buf = 136316418;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2747;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v18;
          *(_WORD *)&unsigned char buf[28] = 2112;
          *(void *)&buf[30] = v55;
          *(_WORD *)&unsigned char buf[38] = 2080;
          unsigned int v86 = v25;
          LOWORD(v87[0]) = 2080;
          *(std::__shared_weak_count **)((char *)v87 + 2) = (std::__shared_weak_count *)v27;
          _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
          if (v73) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v73);
          }
        }
        else
        {
          *(_DWORD *)AudioTimeStamp buf = 136316418;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2747;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v18;
          *(_WORD *)&unsigned char buf[28] = 2112;
          *(void *)&buf[30] = v55;
          *(_WORD *)&unsigned char buf[38] = 2080;
          unsigned int v86 = v25;
          LOWORD(v87[0]) = 2080;
          *(std::__shared_weak_count **)((char *)v87 + 2) = (std::__shared_weak_count *)"unconfigured";
          _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);
        }
        id v11 = v53;
        if (v75) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v75);
        }
        if (v23 && v77) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v77);
        }
        if (v79) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v79);
        }

        if (v81) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v81);
        }
        if (v54)
        {

          if (v83) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v83);
          }
        }
        if ((void)v70) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v70);
        }
      }
LABEL_81:
      if (ControllerImpl::getSessionState(v62, (unint64_t)a3) != 4) {
        goto LABEL_121;
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v78, *((void *)v62 + 1), *((std::__shared_weak_count **)v62 + 2));
      SessionLock::SessionLock(&v69, v78, v79);
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
      if (kAVVCScope)
      {
        unsigned int v28 = *(id *)kAVVCScope;
        if (!v28) {
          goto LABEL_91;
        }
      }
      else
      {
        unsigned int v28 = MEMORY[0x1E4F14500];
        id v29 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2752;
        _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d vibeStopAlertFinished: deactivating session -- finishing the job", buf, 0x12u);
      }

LABEL_91:
      uint64_t SessionState = ControllerImpl::getSessionState(v62, (unint64_t)a3);
      int v31 = ControllerImpl::sessionManagerForStreamID((uint64_t)v62, 0, 0);
      unsigned int v32 = [v31 getSessionActivationOptions];
      id v74 = 0;
      char v33 = [v31 setActive:0 withOptions:v32 error:&v74];
      id v34 = v74;
      int v35 = v34;
      if (v33)
      {
        ControllerImpl::setSessionState((uint64_t)v62, 1, (unint64_t)a3);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear((void *)v62 + 60);
LABEL_120:
        objc_initWeak(&location, v11);
        *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl21vibeStopAlertFinishedEP17AVVoiceControllerm_block_invoke;
        *(void *)&buf[24] = &unk_1E5965B28;
        objc_copyWeak((id *)&buf[32], &location);
        ControllerImpl::safeNotify((uint64_t)v62, (uint64_t)"endAudioSessionActivate", buf);
        objc_destroyWeak((id *)&buf[32]);
        objc_destroyWeak(&location);

        VCLocker::~VCLocker((VCLocker *)&v69);
LABEL_121:
        TraceMethod::~TraceMethod((TraceMethod *)v84);

        int v47 = *((_DWORD *)v62 + 51);
        if (v47)
        {
          int v48 = (void *)*((void *)v62 + 26);
          id v49 = (void *)*((void *)v62 + 49);
          objc_initWeak((id *)buf, v11);
          __int16 v50 = v62;
          v56[0] = MEMORY[0x1E4F143A8];
          v56[1] = 3221225472;
          v56[2] = ___ZN14ControllerImpl23VibeAlertCompletionProcEjP17AVVoiceControllerm_block_invoke_249;
          v56[3] = &unk_1E5965058;
          objc_copyWeak(v57, (id *)buf);
          int v58 = v47;
          v57[1] = v48;
          v57[2] = v49;
          ControllerImpl::safeNotify((uint64_t)v50, (uint64_t)"haptic alertPlaybackFinishedWithSettings", v56);
          objc_destroyWeak(v57);
          objc_destroyWeak((id *)buf);
        }
        goto LABEL_123;
      }
      int v36 = [v34 code];
      int v37 = v36;
      if (v36)
      {
        if ((v36 + 199999) <= 0x61A7E)
        {
          if (kAVVCScope)
          {
            char v38 = *(id *)kAVVCScope;
            if (!v38) {
              goto LABEL_118;
            }
          }
          else
          {
            char v38 = MEMORY[0x1E4F14500];
            id v44 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2759;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v37;
            id v45 = "%25s:%-5d ERROR: vibeStopAlertFinished: setActive:FALSE withOptions: err %d";
LABEL_116:
            _os_log_impl(&dword_19D794000, v38, OS_LOG_TYPE_ERROR, v45, buf, 0x18u);
            goto LABEL_117;
          }
          goto LABEL_117;
        }
        if (kAVVCScope)
        {
          char v38 = *(id *)kAVVCScope;
          if (!v38) {
            goto LABEL_118;
          }
        }
        else
        {
          char v38 = MEMORY[0x1E4F14500];
          id v46 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2759;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v37;
          id v45 = "%25s:%-5d ERROR: vibeStopAlertFinished: setActive:FALSE withOptions: err %{audio:4CC}d";
          goto LABEL_116;
        }
LABEL_117:
      }
LABEL_118:
      if (v37 != 560030580) {
        ControllerImpl::setSessionState((uint64_t)v62, SessionState, (unint64_t)a3);
      }
      goto LABEL_120;
    }
  }
  else
  {
    __int16 v62 = 0;
    __int16 v63 = 0;
  }
  if (kAVVCScope)
  {
    id v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_124;
    }
  }
  else
  {
    id v9 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2786;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d VibeAlertCompletionProc -> called after object destroyed -- ignoring call", buf, 0x12u);
  }

LABEL_124:
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v64);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&v65);
}

void sub_19D8412D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,id location,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  if (v54)
  {
    uint64_t v57 = *(std::__shared_weak_count **)(v55 - 240);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
  }
  int v58 = *(std::__shared_weak_count **)(v55 - 224);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }

  if (*(void *)(v55 - 208)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v55 - 208));
  }
  if (a15)
  {

    __int16 v59 = *(std::__shared_weak_count **)(v55 - 192);
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }

  TraceMethod::~TraceMethod((TraceMethod *)(v55 - 184));
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  TraceMethod::~TraceMethod((TraceMethod *)&a35);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a37);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23VibeAlertCompletionProcEjP17AVVoiceControllerm_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = [[AVVCAlertInformation alloc] initWithAlertType:*(unsigned int *)(a1 + 56) mode:*(void *)(a1 + 40) endTime:*(void *)(a1 + 48)];
    [WeakRetained alertPlaybackFinishedWithSettings:v3];
  }
  else
  {
    if (kAVVCScope)
    {
      int v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      int v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 2809;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D841620(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl23VibeAlertCompletionProcEjP17AVVoiceControllerm_block_invoke_249(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = [[AVVCAlertInformation alloc] initWithAlertType:*(unsigned int *)(a1 + 56) mode:*(void *)(a1 + 40) endTime:*(void *)(a1 + 48)];
    [WeakRetained alertPlaybackFinishedWithSettings:v3];
  }
  else
  {
    if (kAVVCScope)
    {
      int v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      int v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 2834;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D841778(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl21vibeStopAlertFinishedEP17AVVoiceControllerm_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained endAudioSessionActivate:0];
  }
  else
  {
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      if (!v3) {
        goto LABEL_10;
      }
    }
    else
    {
      id v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      int v6 = "ControllerImpl.mm";
      __int16 v7 = 1024;
      int v8 = 2770;
      __int16 v9 = 2048;
      uint64_t v10 = 0;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D8418AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22vibeStartAlertFinishedEP17AVVoiceControllerm_block_invoke(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!kAVVCScope)
  {
    id v4 = (id)MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
LABEL_5:
    int v6 = v4;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
LABEL_31:

      goto LABEL_32;
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      uint64_t v1 = (*(void (**)(void, void))(*(void *)v7 + 64))(*(void *)(a1 + 40), 0);
      switch([v1 sessionState])
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          int v8 = "Inactive";
          break;
        case 2u:
          int v8 = "InteruptedWhileRecording";
          break;
        case 3u:
          int v8 = "InteruptedWhilePlaying";
          break;
        case 4u:
          int v8 = "Deactivating";
          break;
        case 5u:
          int v8 = "Prewarming";
          break;
        case 6u:
          int v8 = "Activating";
          break;
        case 7u:
          int v8 = "Active";
          break;
        default:
          int v8 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      int v8 = "NotConfigured";
    }
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 48);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v9)
      {
        uint64_t v11 = NSString;
        uint64_t v12 = *(void *)(v9 + 272);
        uint64_t v13 = v10->__shared_owners_ + 1;
LABEL_15:
        id v14 = [v11 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v9, v12, v13];
LABEL_17:
        id v15 = v14;
        uint64_t v16 = *(void *)(a1 + 40);
        if (v16)
        {
          unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 320))(v16);
          if (v17 > 4) {
            id v18 = "ILLEGAL";
          }
          else {
            id v18 = off_1E59657C0[v17];
          }
          uint64_t v20 = *(void *)(a1 + 40);
          if (v20)
          {
            switch(*(void *)(v20 + 224))
            {
              case 0:
                uint64_t v19 = "Invalid";
                break;
              case 1:
                uint64_t v19 = "Uninitialized";
                break;
              case 2:
                uint64_t v19 = "Prepared";
                break;
              case 3:
                uint64_t v19 = "Stopped";
                break;
              case 4:
                uint64_t v19 = "Starting";
                break;
              case 5:
                uint64_t v19 = "Running";
                break;
              case 6:
                uint64_t v19 = "Stopping";
                break;
              default:
                uint64_t v19 = "ILLEGAL";
                break;
            }
          }
          else
          {
            uint64_t v19 = "unconfigured";
          }
        }
        else
        {
          id v18 = "unconfigured";
          uint64_t v19 = "unconfigured";
        }
        *(_DWORD *)AudioTimeStamp buf = 136316418;
        unsigned int v28 = "ControllerImpl.mm";
        __int16 v29 = 1024;
        int v30 = 2726;
        __int16 v31 = 2080;
        unsigned int v32 = v8;
        __int16 v33 = 2112;
        id v34 = v15;
        __int16 v35 = 2080;
        int v36 = v18;
        __int16 v37 = 2080;
        char v38 = v19;
        _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);

        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (v7) {

        }
        goto LABEL_31;
      }
    }
    else if (v9)
    {
      uint64_t v13 = 0;
      uint64_t v11 = NSString;
      uint64_t v12 = *(void *)(v9 + 272);
      goto LABEL_15;
    }
    id v14 = @"(0x0) use_count:0";
    goto LABEL_17;
  }
  id v4 = *(id *)kAVVCScope;
  if (v4) {
    goto LABEL_5;
  }
LABEL_32:
  if (*(void *)(*(void *)(a1 + 40) + 224) == 4)
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v25, *(void *)(v3 + 8), *(std::__shared_weak_count **)(v3 + 16));
    RecordLock::RecordLock(buf, v25, v26);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    uint64_t v21 = *(void *)(a1 + 40);
    if (v21)
    {
      int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 96))(v21);
      VCLocker::~VCLocker((VCLocker *)buf);
      if (v22) {
        AVVCRecordingEngine::startedRecording(*(AVVCRecordingEngine **)(a1 + 40));
      }
    }
    else
    {
      VCLocker::~VCLocker((VCLocker *)buf);
    }
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v23 = *(id *)kAVVCScope;
      if (!v23) {
        return;
      }
    }
    else
    {
      uint64_t v23 = MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      unsigned int v28 = "ControllerImpl.mm";
      __int16 v29 = 1024;
      int v30 = 2739;
      _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d vibeStartAlertFinished: record state != kRecordStarting -- noop", buf, 0x12u);
    }
  }
}

void sub_19D841D70(_Unwind_Exception *a1)
{
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v3) {

  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29playHapticAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
  {
    id v5 = 0;
    goto LABEL_8;
  }
  id v4 = std::__shared_weak_count::lock(v3);
  id v5 = v4;
  if (!v4)
  {
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (WeakRetained && v6)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3321888768;
    uint64_t v11[2] = ___ZN14ControllerImpl29playHapticAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke_189;
    id v11[3] = &unk_1EEFA82E0;
    uint64_t v13 = v6;
    id v14 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v16 = *(_DWORD *)(a1 + 64);
    id v7 = WeakRetained;
    uint64_t v8 = *(void *)(a1 + 56);
    id v12 = v7;
    uint64_t v15 = v8;
    ControllerImpl::dispatchAndSafeWork(v6, v11, (uint64_t)"playHapticAlertWithCompletion_block_invoke");

    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    goto LABEL_17;
  }
LABEL_9:
  if (kAVVCScope)
  {
    uint64_t v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    id v18 = "ControllerImpl.mm";
    __int16 v19 = 1024;
    int v20 = 1732;
    __int16 v21 = 2048;
    id v22 = WeakRetained;
    __int16 v23 = 2048;
    uint64_t v24 = v6;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_16:
  if (v5) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_19D842004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);

  _Unwind_Resume(a1);
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void ___ZN14ControllerImpl29playHapticAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke_189(uint64_t a1)
{
}

void ___ZN14ControllerImpl37playHapticWithBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
  {
    id v5 = 0;
    goto LABEL_8;
  }
  id v4 = std::__shared_weak_count::lock(v3);
  id v5 = v4;
  if (!v4)
  {
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (WeakRetained && v6)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3321888768;
    uint64_t v11[2] = ___ZN14ControllerImpl37playHapticWithBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke_214;
    id v11[3] = &unk_1EEFA82E0;
    uint64_t v13 = v6;
    id v14 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v16 = *(_DWORD *)(a1 + 64);
    id v7 = WeakRetained;
    uint64_t v8 = *(void *)(a1 + 56);
    id v12 = v7;
    uint64_t v15 = v8;
    ControllerImpl::dispatchAndSafeWork(v6, v11, (uint64_t)"playHapticWithBeepAlertWithCompletion_block_invoke");

    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    goto LABEL_17;
  }
LABEL_9:
  if (kAVVCScope)
  {
    uint64_t v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    id v18 = "ControllerImpl.mm";
    __int16 v19 = 1024;
    int v20 = 1843;
    __int16 v21 = 2048;
    id v22 = WeakRetained;
    __int16 v23 = 2048;
    uint64_t v24 = v6;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_16:
  if (v5) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_19D84226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl37playHapticWithBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke_214(uint64_t a1)
{
}

void ControllerImpl::primeAlertQueue(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v48 = a2;
  TraceMethod::TraceMethod((TraceMethod *)v47, "primeAlertQueue");
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      id v4 = *(id *)kAVVCScope;
      if (v4)
      {
        id v5 = v4;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          int v6 = *(_DWORD *)(a1 + 204);
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          __int16 v56 = "ControllerImpl.mm";
          __int16 v57 = 1024;
          int v58 = 2079;
          __int16 v59 = 1024;
          *(_DWORD *)__int16 v60 = v2;
          *(_WORD *)&v60[4] = 1024;
          *(_DWORD *)&v60[6] = v6;
          _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: type %d (current is %d)", buf, 0x1Eu);
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 408))
  {
    if (!ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1))
    {
      ControllerImpl::setAlertQueueState(a1, 0);
      if (kAVVCScope)
      {
        id v22 = *(id *)kAVVCScope;
        if (!v22) {
          goto LABEL_128;
        }
      }
      else
      {
        id v22 = MEMORY[0x1E4F14500];
        id v27 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        __int16 v56 = "ControllerImpl.mm";
        __int16 v57 = 1024;
        int v58 = 2088;
        _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d primeAlertQueue: queue is NULL -- returning", buf, 0x12u);
      }

      goto LABEL_128;
    }
    if (*(_DWORD *)(a1 + 360) == 201 && *(_DWORD *)(a1 + 204) == v2)
    {
      if (!kAVVCScope) {
        goto LABEL_116;
      }
      if ((*(unsigned char *)(kAVVCScope + 8) & 1) == 0) {
        goto LABEL_116;
      }
      uint64_t v11 = *(id *)kAVVCScope;
      if (!v11) {
        goto LABEL_116;
      }
      id v12 = v11;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        __int16 v56 = "ControllerImpl.mm";
        __int16 v57 = 1024;
        int v58 = 2137;
        _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: no-op", buf, 0x12u);
      }
LABEL_115:

LABEL_116:
      *(unsigned char *)(a1 + 408) = 0;
LABEL_128:
      TraceMethod::~TraceMethod((TraceMethod *)v47);
      return;
    }
    *(unsigned char *)(a1 + 408) = 1;
    if (kAVVCScope)
    {
      if (*(unsigned char *)(kAVVCScope + 8))
      {
        uint64_t v13 = *(id *)kAVVCScope;
        if (v13)
        {
          id v14 = v13;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            int v15 = *(_DWORD *)(a1 + 204);
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            __int16 v56 = "ControllerImpl.mm";
            __int16 v57 = 1024;
            int v58 = 2094;
            __int16 v59 = 1024;
            *(_DWORD *)__int16 v60 = v2;
            *(_WORD *)&v60[4] = 1024;
            *(_DWORD *)&v60[6] = v15;
            _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: type %d (current is %d)", buf, 0x1Eu);
          }
        }
      }
    }
    AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
    if (QueueIsRunning(AlertQueueFromImplQueue))
    {
      if (kAVVCScope)
      {
        if (*(unsigned char *)(kAVVCScope + 8))
        {
          unsigned int v17 = *(id *)kAVVCScope;
          if (v17)
          {
            id v18 = v17;
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              __int16 v56 = "ControllerImpl.mm";
              __int16 v57 = 1024;
              int v58 = 2099;
              _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: sync-stopping active alert queue", buf, 0x12u);
            }
          }
        }
      }
      ControllerImpl::setAlertQueueState(a1, 202);
      __int16 v19 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
      OSStatus v20 = AudioQueueStop(v19, 1u);
      if (kAVVCScope)
      {
        __int16 v21 = *(id *)kAVVCScope;
        if (!v21) {
          goto LABEL_59;
        }
      }
      else
      {
        __int16 v21 = MEMORY[0x1E4F14500];
        id v28 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v29 = " but failed";
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        __int16 v56 = "ControllerImpl.mm";
        int v58 = 2103;
        __int16 v59 = 2080;
        __int16 v57 = 1024;
        if (!v20) {
          __int16 v29 = "";
        }
        *(void *)__int16 v60 = v29;
        *(_WORD *)&unsigned char v60[8] = 1024;
        OSStatus v61 = v20;
        _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC stopped alert queue%s (%d)", buf, 0x22u);
      }

LABEL_59:
      if (v20)
      {
        if ((v20 + 199999) >= 0x61A7F)
        {
          if (kAVVCScope)
          {
            int v30 = *(id *)kAVVCScope;
            if (!v30) {
              goto LABEL_85;
            }
          }
          else
          {
            int v30 = MEMORY[0x1E4F14500];
            id v46 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            __int16 v56 = "ControllerImpl.mm";
            __int16 v57 = 1024;
            int v58 = 2105;
            __int16 v59 = 1024;
            *(_DWORD *)__int16 v60 = v20;
            _os_log_impl(&dword_19D794000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: primeAlertQueue: ignoring AudioQueueStop err %{audio:4CC}d", buf, 0x18u);
          }
        }
        else
        {
          if (kAVVCScope)
          {
            int v30 = *(id *)kAVVCScope;
            if (!v30) {
              goto LABEL_85;
            }
          }
          else
          {
            int v30 = MEMORY[0x1E4F14500];
            id v33 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            __int16 v56 = "ControllerImpl.mm";
            __int16 v57 = 1024;
            int v58 = 2105;
            __int16 v59 = 1024;
            *(_DWORD *)__int16 v60 = v20;
            _os_log_impl(&dword_19D794000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: primeAlertQueue: ignoring AudioQueueStop err %d", buf, 0x18u);
          }
        }
      }
LABEL_85:
      if (v2 == 1 && *(_DWORD *)(a1 + 320) != 2)
      {
        if (kAVVCScope)
        {
          if (*(unsigned char *)(kAVVCScope + 8))
          {
            uint64_t v39 = *(id *)kAVVCScope;
            if (v39)
            {
              int v40 = v39;
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                __int16 v56 = "ControllerImpl.mm";
                __int16 v57 = 1024;
                int v58 = 2119;
                _os_log_impl(&dword_19D794000, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: silent/haptic alert: not queueing a buffer", buf, 0x12u);
              }
            }
          }
        }
      }
      else
      {
        __int16 v35 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
        int v36 = std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(a1 + 296), (int)v2, &v48);
        OSStatus v37 = AudioQueueEnqueueBuffer(v35, (AudioQueueBufferRef)v36[5], 0, 0);
        OSStatus v38 = v37;
        if (v37)
        {
          if ((v37 + 199999) >= 0x61A7F)
          {
            if (kAVVCScope)
            {
              uint64_t v2 = *(id *)kAVVCScope;
              if (!v2)
              {
LABEL_110:
                *(_DWORD *)(a1 + 204) = v2;
                if (!kAVVCScope) {
                  goto LABEL_116;
                }
                if ((*(unsigned char *)(kAVVCScope + 8) & 1) == 0) {
                  goto LABEL_116;
                }
                id v44 = *(id *)kAVVCScope;
                if (!v44) {
                  goto LABEL_116;
                }
                id v12 = v44;
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
                {
                  int v45 = *(_DWORD *)(a1 + 204);
                  *(_DWORD *)AudioTimeStamp buf = 136315650;
                  __int16 v56 = "ControllerImpl.mm";
                  __int16 v57 = 1024;
                  int v58 = 2134;
                  __int16 v59 = 1024;
                  *(_DWORD *)__int16 v60 = v45;
                  _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: done. current is now %d", buf, 0x18u);
                }
                goto LABEL_115;
              }
            }
            else
            {
              uint64_t v2 = MEMORY[0x1E4F14500];
              id v43 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              __int16 v56 = "ControllerImpl.mm";
              __int16 v57 = 1024;
              int v58 = 2125;
              __int16 v59 = 1024;
              *(_DWORD *)__int16 v60 = v38;
              int v42 = "%25s:%-5d ERROR: primeAlertQueue: AudioQueueEnqueueBuffer err %{audio:4CC}d";
              goto LABEL_108;
            }
          }
          else
          {
            if (kAVVCScope)
            {
              uint64_t v2 = *(id *)kAVVCScope;
              if (!v2) {
                goto LABEL_110;
              }
            }
            else
            {
              uint64_t v2 = MEMORY[0x1E4F14500];
              id v41 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              __int16 v56 = "ControllerImpl.mm";
              __int16 v57 = 1024;
              int v58 = 2125;
              __int16 v59 = 1024;
              *(_DWORD *)__int16 v60 = v38;
              int v42 = "%25s:%-5d ERROR: primeAlertQueue: AudioQueueEnqueueBuffer err %d";
LABEL_108:
              _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_ERROR, v42, buf, 0x18u);
            }
          }

          LODWORD(v2) = 0;
          goto LABEL_110;
        }
      }
      ControllerImpl::setAlertQueueState(a1, 201);
      goto LABEL_110;
    }
    ControllerImpl::setAlertQueueState(a1, 200);
    ElapsedTime::ElapsedTime((ElapsedTime *)buf, "primeAlertQueue", "AudioQueueReset : mAlertQueue", 0);
    __int16 v23 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)a1);
    OSStatus v24 = AudioQueueReset(v23);
    OSStatus v25 = v24;
    if (!v24)
    {
LABEL_84:
      ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
      goto LABEL_85;
    }
    if ((v24 + 199999) >= 0x61A7F)
    {
      if (kAVVCScope)
      {
        unint64_t v26 = *(id *)kAVVCScope;
        if (!v26) {
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v26 = MEMORY[0x1E4F14500];
        id v34 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        goto LABEL_83;
      }
      *(_DWORD *)id v49 = 136315650;
      __int16 v50 = "ControllerImpl.mm";
      __int16 v51 = 1024;
      int v52 = 2113;
      __int16 v53 = 1024;
      OSStatus v54 = v25;
      unsigned int v32 = "%25s:%-5d ERROR: primeAlertQueue: ignoring AudioQueueReset err %{audio:4CC}d";
    }
    else
    {
      if (kAVVCScope)
      {
        unint64_t v26 = *(id *)kAVVCScope;
        if (!v26) {
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v26 = MEMORY[0x1E4F14500];
        id v31 = MEMORY[0x1E4F14500];
      }
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        goto LABEL_83;
      }
      *(_DWORD *)id v49 = 136315650;
      __int16 v50 = "ControllerImpl.mm";
      __int16 v51 = 1024;
      int v52 = 2113;
      __int16 v53 = 1024;
      OSStatus v54 = v25;
      unsigned int v32 = "%25s:%-5d ERROR: primeAlertQueue: ignoring AudioQueueReset err %d";
    }
    _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_ERROR, v32, v49, 0x18u);
LABEL_83:

    LODWORD(v2) = v48;
    goto LABEL_84;
  }
  if (*(_DWORD *)(a1 + 204) == v2)
  {
    if (kAVVCScope)
    {
      if (*(unsigned char *)(kAVVCScope + 8))
      {
        id v7 = *(id *)kAVVCScope;
        if (v7)
        {
          uint64_t v8 = v7;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            int v9 = *(_DWORD *)(a1 + 360);
            switch(v9)
            {
              case 200:
                id v10 = "stopped";
                break;
              case 201:
                id v10 = "primed";
                break;
              case 202:
                id v10 = "stopping";
                break;
              case 203:
                id v10 = "started";
                break;
              case 204:
                id v10 = "running";
                break;
              default:
                if (v9) {
                  id v10 = "ILLEGAL";
                }
                else {
                  id v10 = "uninit";
                }
                break;
            }
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            __int16 v56 = "ControllerImpl.mm";
            __int16 v57 = 1024;
            int v58 = 2083;
            __int16 v59 = 2080;
            *(void *)__int16 v60 = v10;
            _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d primeAlertQueue: alert queue state '%s'.  reentrant or multi-threaded call -- returning", buf, 0x1Cu);
          }
        }
      }
    }
    goto LABEL_128;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)AudioTimeStamp buf = 0;
    _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ASSERTION FAILED: re-entrant request for different alert type", buf, 2u);
  }
  __break(1u);
}

void sub_19D842DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN14ControllerImpl29playAQBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviEb_block_invoke(uint64_t a1, int a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  void v5[2] = ___ZN14ControllerImpl29playAQBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviEb_block_invoke_2;
  v5[3] = &unk_1EEFA8270;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  int v10 = a2;
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  id v4 = *(std::__shared_weak_count **)(a1 + 56);
  int v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v6 = *(id *)(a1 + 32);
  ControllerImpl::safeWork(v3, v5, (uint64_t)"playAQBeepAlertWithCompletion_block_invoke");

  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_19D842EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl15startAlertQueueEU13block_pointerFviE_block_invoke(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!kAVVCScope)
  {
    id v3 = (id)MEMORY[0x1E4F14500];
    id v4 = MEMORY[0x1E4F14500];
LABEL_5:
    id v5 = v3;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
LABEL_31:

      return;
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      uint64_t v1 = (*(void (**)(void, void))(*(void *)v6 + 64))(*(void *)(a1 + 32), 0);
      switch([v1 sessionState])
      {
        case 0u:
          goto LABEL_9;
        case 1u:
          uint64_t v7 = "Inactive";
          break;
        case 2u:
          uint64_t v7 = "InteruptedWhileRecording";
          break;
        case 3u:
          uint64_t v7 = "InteruptedWhilePlaying";
          break;
        case 4u:
          uint64_t v7 = "Deactivating";
          break;
        case 5u:
          uint64_t v7 = "Prewarming";
          break;
        case 6u:
          uint64_t v7 = "Activating";
          break;
        case 7u:
          uint64_t v7 = "Active";
          break;
        default:
          uint64_t v7 = "ILLEGAL";
          break;
      }
    }
    else
    {
LABEL_9:
      uint64_t v7 = "NotConfigured";
    }
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = *(std::__shared_weak_count **)(a1 + 40);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v8)
      {
        int v10 = NSString;
        uint64_t v11 = *(void *)(v8 + 272);
        uint64_t v12 = v9->__shared_owners_ + 1;
LABEL_15:
        uint64_t v13 = [v10 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v8, v11, v12];
LABEL_17:
        id v14 = v13;
        uint64_t v15 = *(void *)(a1 + 32);
        if (v15)
        {
          unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 320))(v15);
          if (v16 > 4) {
            unsigned int v17 = "ILLEGAL";
          }
          else {
            unsigned int v17 = off_1E59657C0[v16];
          }
          uint64_t v19 = *(void *)(a1 + 32);
          if (v19)
          {
            switch(*(void *)(v19 + 224))
            {
              case 0:
                id v18 = "Invalid";
                break;
              case 1:
                id v18 = "Uninitialized";
                break;
              case 2:
                id v18 = "Prepared";
                break;
              case 3:
                id v18 = "Stopped";
                break;
              case 4:
                id v18 = "Starting";
                break;
              case 5:
                id v18 = "Running";
                break;
              case 6:
                id v18 = "Stopping";
                break;
              default:
                id v18 = "ILLEGAL";
                break;
            }
          }
          else
          {
            id v18 = "unconfigured";
          }
        }
        else
        {
          unsigned int v17 = "unconfigured";
          id v18 = "unconfigured";
        }
        *(_DWORD *)AudioTimeStamp buf = 136316418;
        __int16 v21 = "ControllerImpl.mm";
        __int16 v22 = 1024;
        int v23 = 2276;
        __int16 v24 = 2080;
        OSStatus v25 = v7;
        __int16 v26 = 2112;
        id v27 = v14;
        __int16 v28 = 2080;
        __int16 v29 = v17;
        __int16 v30 = 2080;
        id v31 = v18;
        _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d session state (%s), rec-engine [%@], rec-engine type (%s), stream state (%s)", buf, 0x3Au);

        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        if (v6) {

        }
        goto LABEL_31;
      }
    }
    else if (v8)
    {
      uint64_t v12 = 0;
      int v10 = NSString;
      uint64_t v11 = *(void *)(v8 + 272);
      goto LABEL_15;
    }
    uint64_t v13 = @"(0x0) use_count:0";
    goto LABEL_17;
  }
  id v3 = *(id *)kAVVCScope;
  if (v3) {
    goto LABEL_5;
  }
}

void sub_19D843260(_Unwind_Exception *a1)
{
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v3) {

  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl15startAlertQueueEU13block_pointerFviE_block_invoke_230(void *a1)
{
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = *(_DWORD *)(a1[6] + 232);
  return (*(uint64_t (**)(void, void))(a1[4] + 16))(a1[4], *(unsigned int *)(*(void *)(a1[5] + 8) + 24));
}

void __destroy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ___ZN14ControllerImpl29playAQBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviEb_block_invoke_2(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_DWORD *)(a1 + 64);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (kAVVCScope)
    {
      uint64_t v2 = *(id *)kAVVCScope;
      if (!v2)
      {
LABEL_10:
        ControllerImpl::primeAlertQueue(*(void *)(a1 + 48), 1);
        ControllerImpl::setAlertState(*(void *)(a1 + 48), 0);
        return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v3 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 136315394;
      uint64_t v6 = "ControllerImpl.mm";
      __int16 v7 = 1024;
      int v8 = 1893;
      _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert playback failed -- attempting to re-prime", (uint8_t *)&v5, 0x12u);
    }

    goto LABEL_10;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ControllerImpl::playAlert(uint64_t a1, void *a2, int a3, AVVoiceController *a4, void *a5)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  id v139 = a2;
  id v140 = a5;
  int v145 = 4107;
  char v146 = 0;
  long long v147 = 0u;
  long long v148 = 0u;
  kdebug_trace();
  TraceMethod::TraceMethod((TraceMethod *)v144, "playAlert");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v142, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  uint64_t v8 = v142;
  uint64_t v9 = v143;
  if (v143) {
    atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AlertLock::AlertLock(v141, v8, v9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      int v10 = *(id *)kAVVCScope;
      if (v10)
      {
        uint64_t v11 = v10;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1988;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = a3;
          _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alertType = %d, primeFirst=true", buf, 0x18u);
        }
      }
    }
  }
  ProfileMetrics(&cfstr_AvvcProfilePro_10.isa);
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(void *)(v142 + 8), *(std::__shared_weak_count **)(v142 + 16));
  switch(a3)
  {
    case 3:
      int v12 = *(_DWORD *)(*(void *)buf + 328);
      break;
    case 2:
      int v12 = *(_DWORD *)(*(void *)buf + 324);
      break;
    case 1:
      int v12 = *(_DWORD *)(*(void *)buf + 320);
      break;
    default:
      int v12 = 0;
      break;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  switch(v12)
  {
    case 0:
      uint64_t v13 = v142;
      id v14 = v139;
      uint64_t v15 = (void (**)(id, void))v140;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v149, *(void *)(v13 + 8), *(std::__shared_weak_count **)(v13 + 16));
      ControllerImpl::setAlertState(v149, 2);
      uint64_t v16 = v149;
      *(_DWORD *)(v149 + 204) = a3;
      *(void *)(v16 + 208) = 0;
      switch(a3)
      {
        case 1:
          if (kAVVCScope)
          {
            unsigned int v17 = *(id *)kAVVCScope;
            if (!v17)
            {
              uint64_t v18 = 1404;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v17 = MEMORY[0x1E4F14500];
            id v51 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1639;
            _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: silent start - fake a SS completion callback", buf, 0x12u);
          }
          uint64_t v18 = 1404;
          break;
        case 2:
          if (kAVVCScope)
          {
            unsigned int v17 = *(id *)kAVVCScope;
            if (!v17)
            {
              uint64_t v18 = 1405;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v17 = MEMORY[0x1E4F14500];
            id v50 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1643;
            _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: silent stop - fake a SS completion callback", buf, 0x12u);
          }
          uint64_t v18 = 1405;
          break;
        case 3:
          if (kAVVCScope)
          {
            unsigned int v17 = *(id *)kAVVCScope;
            if (!v17)
            {
              uint64_t v18 = 1406;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v17 = MEMORY[0x1E4F14500];
            id v52 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1647;
            _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: silent stop - fake a SS completion callback", buf, 0x12u);
          }
          uint64_t v18 = 1406;
          break;
        default:
          uint64_t v18 = 0;
          goto LABEL_116;
      }

LABEL_116:
      ControllerImpl::VibeAlertCompletionProc((ControllerImpl *)v18, v14, a4);
      v15[2](v15, 0);
      if (v150) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v150);
      }
      goto LABEL_118;
    case 1:
      uint64_t v29 = v142;
      id v14 = v139;
      uint64_t v15 = (void (**)(id, void))v140;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v149, *(void *)(v29 + 8), *(std::__shared_weak_count **)(v29 + 16));
      int v30 = *(_DWORD *)(v29 + 204);
      if (!v30 || v30 == a3) {
        goto LABEL_148;
      }
      if (v30 == 2)
      {
        if (kAVVCScope)
        {
          id v31 = *(id *)kAVVCScope;
          if (!v31) {
            goto LABEL_147;
          }
        }
        else
        {
          id v31 = MEMORY[0x1E4F14500];
          id v60 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          int v61 = *(_DWORD *)(v29 + 204);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1669;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v61;
          _os_log_impl(&dword_19D794000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert %d already in progress -- stop it now", buf, 0x18u);
        }
      }
      else
      {
        if (v30 != 3) {
          goto LABEL_148;
        }
        if (kAVVCScope)
        {
          id v31 = *(id *)kAVVCScope;
          if (!v31) {
            goto LABEL_147;
          }
        }
        else
        {
          id v31 = MEMORY[0x1E4F14500];
          id v58 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          int v59 = *(_DWORD *)(v29 + 204);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1673;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v59;
          _os_log_impl(&dword_19D794000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert %d already in progress -- stop it now", buf, 0x18u);
        }
      }

LABEL_147:
      AudioServicesStopSystemSound();
LABEL_148:
      ControllerImpl::setAlertState(v149, 2);
      uint64_t v62 = v149;
      *(_DWORD *)(v149 + 204) = a3;
      *(void *)(v62 + 208) = 1;
      switch(a3)
      {
        case 3:
          if (kAVVCScope)
          {
            __int16 v63 = *(id *)kAVVCScope;
            if (!v63)
            {
              uint64_t v64 = 1406;
              goto LABEL_174;
            }
          }
          else
          {
            __int16 v63 = MEMORY[0x1E4F14500];
            id v66 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1696;
            _os_log_impl(&dword_19D794000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: haptic alert stop", buf, 0x12u);
          }
          uint64_t v64 = 1406;
          break;
        case 2:
          if (kAVVCScope)
          {
            __int16 v63 = *(id *)kAVVCScope;
            if (!v63)
            {
              uint64_t v64 = 1405;
              goto LABEL_174;
            }
          }
          else
          {
            __int16 v63 = MEMORY[0x1E4F14500];
            id v65 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1692;
            _os_log_impl(&dword_19D794000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: haptic alert stop", buf, 0x12u);
          }
          uint64_t v64 = 1405;
          break;
        case 1:
          if (kAVVCScope)
          {
            __int16 v63 = *(id *)kAVVCScope;
            if (!v63)
            {
              uint64_t v64 = 1404;
              goto LABEL_174;
            }
          }
          else
          {
            __int16 v63 = MEMORY[0x1E4F14500];
            id v67 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1688;
            _os_log_impl(&dword_19D794000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: haptic alert start", buf, 0x12u);
          }
          uint64_t v64 = 1404;
          break;
        default:
          uint64_t v64 = 0;
          goto LABEL_174;
      }

LABEL_174:
      if (kAVVCScope)
      {
        long long v68 = *(id *)kAVVCScope;
        if (!v68) {
          goto LABEL_181;
        }
      }
      else
      {
        long long v68 = MEMORY[0x1E4F14500];
        id v69 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1701;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v64;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = 1;
        _os_log_impl(&dword_19D794000, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: calling AudioServicesPlaySystemSoundWithOptions with sound ID %u and flags %x", buf, 0x1Eu);
      }

LABEL_181:
      CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      LOWORD(v166) = 257;
      CACFDictionary::AddUInt32(&theDict, (const __CFString *)*MEMORY[0x1E4F18A18], 0);
      CACFDictionary::AddUInt32(&theDict, (const __CFString *)*MEMORY[0x1E4F18A20], 1);
      *(_DWORD *)AudioTimeStamp buf = 1;
      long long v70 = objc_msgSend(std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(v149 + 272), 1, buf)[5], "absoluteString");
      int v71 = [v70 isEqualToString:@"/System/Library/PrivateFrameworks/AssistantServices.framework/jbl_begin_sae.caf"];

      if (v71)
      {
        int v72 = [MEMORY[0x1E4F28B50] mainBundle];
        __int16 v73 = [v72 pathForResource:@"siri_activation" ofType:@"plist"];

        id v74 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithContentsOfFile:v73];
        uint64_t v75 = v74;
        if (BYTE1(v166) && v74 && theDict) {
          CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F18A48], v74);
        }
      }
      if (a3 == 1)
      {
        AudioServicesPlaySystemSoundWithOptions();
        ControllerImpl::VibeAlertCompletionProc((ControllerImpl *)v64, v14, a4);
      }
      else
      {
        objc_initWeak(location, v14);
        uint64_t v76 = v149;
        __int16 v77 = (std::__shared_weak_count *)v150;
        if (v150) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v150 + 16), 1uLL, memory_order_relaxed);
        }
        *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3321888768;
        *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl29playHapticAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke;
        *(void *)&buf[24] = &unk_1EEFA3BB0;
        objc_copyWeak((id *)&buf[32], location);
        double v175 = *(double *)&v76;
        *(void *)&long long v176 = v77;
        if (v77) {
          atomic_fetch_add_explicit(&v77->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        int v177 = v64;
        *((void *)&v176 + 1) = a4;
        AudioServicesPlaySystemSoundWithOptions();
        if ((void)v176) {
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v176);
        }
        objc_destroyWeak((id *)&buf[32]);
        if (v77) {
          std::__shared_weak_count::__release_weak(v77);
        }
        objc_destroyWeak(location);
      }
      v15[2](v15, 0);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
      if (v150) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v150);
      }
LABEL_118:

      goto LABEL_327;
    case 2:
      uint64_t v22 = v142;
      id v23 = v139;
      __int16 v24 = (void (**)(id, void))v140;
      uint64_t v159 = 0;
      v160 = &v159;
      uint64_t v161 = 0x2020000000;
      int v162 = 0;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v157, *(void *)(v22 + 8), *(std::__shared_weak_count **)(v22 + 16));
      *(void *)(v157 + 208) = 2;
      if (kAVVCScope)
      {
        OSStatus v25 = *(id *)kAVVCScope;
        if (!v25) {
          goto LABEL_60;
        }
      }
      else
      {
        OSStatus v25 = MEMORY[0x1E4F14500];
        id v34 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1871;
        _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: using alert queue to play beep", buf, 0x12u);
      }

LABEL_60:
      ControllerImpl::setAlertState(v157, 1);
      ControllerImpl::primeAlertQueue(v157, a3);
      *((_DWORD *)v160 + 6) = v35;
      if (v35)
      {
        if (kAVVCScope)
        {
          int v36 = *(id *)kAVVCScope;
          if (!v36)
          {
LABEL_94:
            v24[2](v24, *((unsigned int *)v160 + 6));
LABEL_324:
            if (v158) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v158);
            }
            _Block_object_dispose(&v159, 8);

            goto LABEL_327;
          }
        }
        else
        {
          int v36 = MEMORY[0x1E4F14500];
          id v48 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          int v49 = *((_DWORD *)v160 + 6);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1903;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v49;
          _os_log_impl(&dword_19D794000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d playAlert: Some Error occured! Not calling startAlertQueue() : %d", buf, 0x18u);
        }

        goto LABEL_94;
      }
      uint64_t v149 = MEMORY[0x1E4F143A8];
      uint64_t v150 = 3321888768;
      long long v151 = ___ZN14ControllerImpl29playAQBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviEb_block_invoke;
      __int16 v152 = &unk_1EEFA8010;
      uint64_t v37 = v157;
      uint64_t v155 = v157;
      __int16 v156 = v158;
      if (v158) {
        atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v154 = &v159;
      int v153 = v24;
      OSStatus v38 = &v149;
      TraceMethod::TraceMethod((TraceMethod *)v173, "startAlertQueue");
      ControllerImpl::_getCurrentRecordingEngine(&v171, v37, *(void *)(v37 + 472), 0, (uint64_t)"startAlertQueue");
      uint64_t v39 = v171;
      if (v171)
      {
        CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)MEMORY[0x1E4F143A8];
        uint64_t v166 = 3321888768;
        v167 = ___ZN14ControllerImpl15startAlertQueueEU13block_pointerFviE_block_invoke;
        v168 = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
        uint64_t v169 = v171;
        v170 = v172;
        if (v172) {
          atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, CFMutableDictionaryRef *, const char *))(*(void *)v39 + 360))(v39, &theDict, "startAlertQueue");
        if (v170) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v170);
        }
      }
      if (ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v37))
      {
        if (*(_DWORD *)(v37 + 204))
        {
          if (*(_DWORD *)(v37 + 360) == 201)
          {
            int v40 = ControllerImpl::sessionManagerForStreamID(v37, 0, 0);
            [v40 deviceGain];
            *(_DWORD *)(v37 + 404) = v41;

            AlertQueueFromImplQueue = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v37);
            AudioQueueSetParameter(AlertQueueFromImplQueue, 1u, *(float *)(v37 + 400) * *(float *)(v37 + 404));
            ControllerImpl::setAlertQueueState(v37, 203);
            if (kAVVCScope)
            {
              if (*(unsigned char *)(kAVVCScope + 8))
              {
                id v43 = *(id *)kAVVCScope;
                if (v43)
                {
                  id v44 = v43;
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)AudioTimeStamp buf = 136315394;
                    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 2319;
                    _os_log_impl(&dword_19D794000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d startAlertQueue: calling AudioQueueStart", buf, 0x12u);
                  }
                }
              }
            }
            ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startAlertQueue", "mAlertQueue : AudioQueueStart", 0);
            int v45 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v37);
            uint64_t v46 = AudioQueueStart(v45, 0);
            ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
            if (kAVVCScope)
            {
              int v47 = *(id *)kAVVCScope;
              if (!v47) {
                goto LABEL_125;
              }
            }
            else
            {
              int v47 = MEMORY[0x1E4F14500];
              id v53 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              OSStatus v54 = " but failed";
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_DWORD *)&buf[14] = 2325;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(_WORD *)&unsigned char buf[12] = 1024;
              if (!v46) {
                OSStatus v54 = "";
              }
              *(void *)&buf[20] = v54;
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = v46;
              _os_log_impl(&dword_19D794000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC started alert queue%s (%d)", buf, 0x22u);
            }

LABEL_125:
            if (v46)
            {
              if ((v46 + 199999) >= 0x61A7F)
              {
                if (kAVVCScope)
                {
                  uint64_t v55 = *(id *)kAVVCScope;
                  if (!v55) {
                    goto LABEL_319;
                  }
                }
                else
                {
                  uint64_t v55 = MEMORY[0x1E4F14500];
                  id v128 = MEMORY[0x1E4F14500];
                }
                if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_318;
                }
                *(_DWORD *)AudioTimeStamp buf = 136315650;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2326;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v46;
                id v127 = "%25s:%-5d ERROR: startAlertQueue: AudioQueueStart err %{audio:4CC}d";
              }
              else
              {
                if (kAVVCScope)
                {
                  uint64_t v55 = *(id *)kAVVCScope;
                  if (!v55) {
                    goto LABEL_319;
                  }
                }
                else
                {
                  uint64_t v55 = MEMORY[0x1E4F14500];
                  id v126 = MEMORY[0x1E4F14500];
                }
                if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_318;
                }
                *(_DWORD *)AudioTimeStamp buf = 136315650;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2326;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v46;
                id v127 = "%25s:%-5d ERROR: startAlertQueue: AudioQueueStart err %d";
              }
              goto LABEL_317;
            }
            ElapsedTime::ElapsedTime((ElapsedTime *)buf, "startAlertQueue", "mAlertQueue : AudioQueueStop", 0);
            __int16 v56 = (OpaqueAudioQueue *)ControllerImpl::getAlertQueueFromImplQueue((ControllerImpl *)v37);
            uint64_t v46 = AudioQueueStop(v56, 0);
            ElapsedTime::~ElapsedTime((ElapsedTime *)buf);
            if (kAVVCScope)
            {
              __int16 v57 = *(id *)kAVVCScope;
              if (!v57) {
                goto LABEL_210;
              }
            }
            else
            {
              __int16 v57 = MEMORY[0x1E4F14500];
              id v79 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v80 = " but failed";
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_DWORD *)&buf[14] = 2338;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(_WORD *)&unsigned char buf[12] = 1024;
              if (!v46) {
                uint64_t v80 = "";
              }
              *(void *)&buf[20] = v80;
              *(_WORD *)&unsigned char buf[28] = 1024;
              *(_DWORD *)&buf[30] = v46;
              _os_log_impl(&dword_19D794000, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVC stopped alert queue%s (%d)", buf, 0x22u);
            }

LABEL_210:
            if (!v46)
            {
LABEL_319:
              v151((uint64_t)v38, v46);
              goto LABEL_320;
            }
            if ((v46 + 199999) >= 0x61A7F)
            {
              if (kAVVCScope)
              {
                uint64_t v55 = *(id *)kAVVCScope;
                if (!v55) {
                  goto LABEL_319;
                }
              }
              else
              {
                uint64_t v55 = MEMORY[0x1E4F14500];
                id v131 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                goto LABEL_318;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2340;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v46;
              id v127 = "%25s:%-5d ERROR: startAlertQueue: AudioQueueStop(async) err %{audio:4CC}d";
            }
            else
            {
              if (kAVVCScope)
              {
                uint64_t v55 = *(id *)kAVVCScope;
                if (!v55) {
                  goto LABEL_319;
                }
              }
              else
              {
                uint64_t v55 = MEMORY[0x1E4F14500];
                id v130 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
                goto LABEL_318;
              }
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2340;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v46;
              id v127 = "%25s:%-5d ERROR: startAlertQueue: AudioQueueStop(async) err %d";
            }
LABEL_317:
            _os_log_impl(&dword_19D794000, v55, OS_LOG_TYPE_ERROR, v127, buf, 0x18u);
LABEL_318:

            goto LABEL_319;
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)AudioTimeStamp buf = 0;
            double v132 = MEMORY[0x1E4F14500];
            goto LABEL_334;
          }
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)AudioTimeStamp buf = 0;
          double v132 = MEMORY[0x1E4F14500];
LABEL_334:
          _os_log_error_impl(&dword_19D794000, v132, OS_LOG_TYPE_ERROR, " ASSERTION FAILED: no alert buffer is enqueued!", buf, 2u);
        }
        __break(1u);
        return;
      }
      location[0] = 0;
      location[1] = location;
      location[2] = (id)0x2020000000;
      int v164 = 0;
      if (v39)
      {
        *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 3321888768;
        *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl15startAlertQueueEU13block_pointerFviE_block_invoke_230;
        *(void *)&buf[24] = &unk_1EEFA8048;
        double v175 = COERCE_DOUBLE(location);
        *(void *)&long long v176 = v39;
        *((void *)&v176 + 1) = v172;
        if (v172) {
          atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)&uint8_t buf[32] = v38;
        (*(void (**)(uint64_t, unsigned char *, const char *))(*(void *)v39 + 360))(v39, buf, "startAlertQueue");

        if (*((void *)&v176 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v176 + 1));
        }
        goto LABEL_310;
      }
      if (kAVVCScope)
      {
        uint64_t v78 = *(id *)kAVVCScope;
        if (!v78)
        {
LABEL_309:
          v151((uint64_t)v38, -6789);
LABEL_310:
          _Block_object_dispose(location, 8);
LABEL_320:
          if (v172) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v172);
          }
          TraceMethod::~TraceMethod((TraceMethod *)v173);

          if (v156) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v156);
          }
          goto LABEL_324;
        }
      }
      else
      {
        uint64_t v78 = MEMORY[0x1E4F14500];
        id v129 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2283;
        _os_log_impl(&dword_19D794000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d getRecordErrorStatus: Current recording engine is nil!", buf, 0x12u);
      }

      goto LABEL_309;
    case 3:
      uint64_t v26 = v142;
      id val = v139;
      v136 = (ControllerImpl *)v140;
      if (!_os_feature_enabled_impl())
      {
        uint64_t v32 = 4294955516;
        goto LABEL_295;
      }
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v149, *(void *)(v26 + 8), *(std::__shared_weak_count **)(v26 + 16));
      int v27 = *(_DWORD *)(v26 + 204);
      if (!v27 || v27 == a3) {
        goto LABEL_224;
      }
      if (v27 == 2)
      {
        if (kAVVCScope)
        {
          __int16 v28 = *(id *)kAVVCScope;
          if (!v28) {
            goto LABEL_223;
          }
        }
        else
        {
          __int16 v28 = MEMORY[0x1E4F14500];
          id v83 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          int v84 = *(_DWORD *)(v26 + 204);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1760;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v84;
          _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert %d already in progress -- stop it now", buf, 0x18u);
        }
      }
      else
      {
        if (v27 != 3) {
          goto LABEL_224;
        }
        if (kAVVCScope)
        {
          __int16 v28 = *(id *)kAVVCScope;
          if (!v28) {
            goto LABEL_223;
          }
        }
        else
        {
          __int16 v28 = MEMORY[0x1E4F14500];
          id v81 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          int v82 = *(_DWORD *)(v26 + 204);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1764;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v82;
          _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: alert %d already in progress -- stop it now", buf, 0x18u);
        }
      }

LABEL_223:
      AudioServicesStopSystemSound();
LABEL_224:
      ControllerImpl::setAlertState(v149, 2);
      uint64_t v85 = v149;
      *(_DWORD *)(v149 + 204) = a3;
      *(void *)(v85 + 208) = 3;
      switch(a3)
      {
        case 3:
          if (kAVVCScope)
          {
            unsigned int v86 = *(id *)kAVVCScope;
            if (!v86)
            {
              int v87 = 1112;
              goto LABEL_236;
            }
          }
          else
          {
            unsigned int v86 = MEMORY[0x1E4F14500];
            id v90 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1786;
            _os_log_impl(&dword_19D794000, v86, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: HapticWithBeep alert stop", buf, 0x12u);
          }
          int v89 = 1112;
          break;
        case 2:
          if (kAVVCScope)
          {
            unsigned int v86 = *(id *)kAVVCScope;
            if (!v86)
            {
              int v87 = 1111;
              goto LABEL_236;
            }
          }
          else
          {
            unsigned int v86 = MEMORY[0x1E4F14500];
            id v88 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1782;
            _os_log_impl(&dword_19D794000, v86, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: HapticWithBeep alert stop", buf, 0x12u);
          }
          int v89 = 1111;
          break;
        case 1:
          if (kAVVCScope)
          {
            unsigned int v86 = *(id *)kAVVCScope;
            if (!v86)
            {
              int v87 = 1110;
LABEL_236:
              unsigned int v135 = v87;
              goto LABEL_251;
            }
          }
          else
          {
            unsigned int v86 = MEMORY[0x1E4F14500];
            id v91 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1778;
            _os_log_impl(&dword_19D794000, v86, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: HapticWithBeep alert start", buf, 0x12u);
          }
          int v89 = 1110;
          break;
        default:
          unsigned int v135 = 0;
          goto LABEL_251;
      }
      unsigned int v135 = v89;

LABEL_251:
      *(_DWORD *)AudioTimeStamp buf = 1;
      id v92 = objc_msgSend(std::__tree<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::__map_value_compare<AVVoiceAlertType,std::__value_type<AVVoiceAlertType,NSURL * {__strong}>,std::less<AVVoiceAlertType>,true>,std::allocator<std::__value_type<AVVoiceAlertType,NSURL * {__strong}>>>::__emplace_unique_key_args<AVVoiceAlertType,std::piecewise_construct_t const&,std::tuple<AVVoiceAlertType&&>,std::tuple<>>((uint64_t **)(v149 + 272), 1, buf)[5], "absoluteString");
      if ([v92 isEqualToString:@"/System/Library/PrivateFrameworks/AssistantServices.framework/jbl_begin_sae.caf"])BOOL v93 = *(_DWORD *)(v26 + 384) != 0; {
      else
      }
        BOOL v93 = 0;

      CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      LOWORD(v166) = 257;
      CFStringRef v94 = (const __CFString *)*MEMORY[0x1E4F18A18];
      if (v93)
      {
        CACFDictionary::AddUInt32(&theDict, v94, 1110);
        if (a3 == 1)
        {
          if (kAVVCScope)
          {
            char v95 = *(id *)kAVVCScope;
            if (!v95) {
              goto LABEL_291;
            }
          }
          else
          {
            char v95 = MEMORY[0x1E4F14500];
            id v123 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
          {
            int v124 = *(_DWORD *)(v26 + 384);
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1831;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v124;
            _os_log_impl(&dword_19D794000, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: calling AudioServicesPlaySystemSoundWithOptions for SAE with sound ID %u", buf, 0x18u);
          }
LABEL_290:

LABEL_291:
          AudioServicesPlaySystemSoundWithOptions();
          ControllerImpl::VibeAlertCompletionProc((ControllerImpl *)v135, val, a4);
          goto LABEL_292;
        }
        goto LABEL_274;
      }
      CACFDictionary::AddUInt32(&theDict, v94, 0);
      CACFDictionary::AddUInt32(&theDict, (const __CFString *)*MEMORY[0x1E4F18A20], 0);
      int16x8_t v133 = ControllerImpl::sessionManagerForStreamID(v26, (unint64_t)a4, 0);
      [v133 deviceGain];
      *(_DWORD *)(v26 + 404) = v96;
      [v133 outputVolume];
      float v98 = v97;
      float v99 = (float)(*(float *)(v26 + 400) * *(float *)(v26 + 404)) * v98;
      if (kAVVCScope)
      {
        __int16 v100 = *(id *)kAVVCScope;
        if (!v100) {
          goto LABEL_266;
        }
      }
      else
      {
        __int16 v100 = MEMORY[0x1E4F14500];
        id v101 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
      {
        double v102 = *(float *)(v26 + 404);
        double v103 = *(float *)(v26 + 400);
        *(_DWORD *)AudioTimeStamp buf = 136316418;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1815;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(double *)&buf[20] = v102;
        *(_WORD *)&unsigned char buf[28] = 2048;
        *(double *)&buf[30] = v103;
        *(_WORD *)&unsigned char buf[38] = 2048;
        double v175 = v98;
        LOWORD(v176) = 2048;
        *(double *)((char *)&v176 + 2) = v99;
        _os_log_impl(&dword_19D794000, v100, OS_LOG_TYPE_DEFAULT, "%25s:%-5d playAlert: volume is %f %f %f, %f", buf, 0x3Au);
      }

LABEL_266:
      CACFDictionary::AddFloat32(&theDict, (const __CFString *)*MEMORY[0x1E4F18A50], v99);
      id v104 = (void *)MEMORY[0x1E4F1C9E8];
      id v105 = [NSNumber numberWithFloat:0.0];
      id v106 = [NSNumber numberWithFloat:0.0];
      v134 = objc_msgSend(v104, "dictionaryWithObjectsAndKeys:", v105, @"StartTime", @"Tap", @"Type", v106, @"Amplitude", 0);

      id v107 = (void *)MEMORY[0x1E4F1C9E8];
      LODWORD(v108) = 1036831949;
      uint64_t v109 = [NSNumber numberWithFloat:v108];
      LODWORD(v110) = 1.0;
      id v111 = [NSNumber numberWithFloat:v110];
      OSStatus v112 = objc_msgSend(v107, "dictionaryWithObjectsAndKeys:", v109, @"StartTime", @"Tap", @"Type", v111, @"Amplitude", 0);

      OSStatus v113 = (void *)MEMORY[0x1E4F1C9E8];
      LODWORD(v114) = 1050253722;
      v115 = [NSNumber numberWithFloat:v114];
      id v116 = [NSNumber numberWithFloat:0.0];
      uint64_t v117 = objc_msgSend(v113, "dictionaryWithObjectsAndKeys:", v115, @"StartTime", @"Tap", @"Type", v116, @"Amplitude", 0);

      id v118 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v134, v112, v117, 0);
      __int16 v119 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v118, @"Atoms", 0);
      unsigned int v120 = v119;
      if (BYTE1(v166) && v119 && theDict) {
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E4F18A48], v119);
      }

      if (a3 == 1)
      {
        if (kAVVCScope)
        {
          char v95 = *(id *)kAVVCScope;
          if (!v95) {
            goto LABEL_291;
          }
        }
        else
        {
          char v95 = MEMORY[0x1E4F14500];
          id v125 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1835;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v135;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = 0;
          _os_log_impl(&dword_19D794000, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d playAlert: calling AudioServicesPlaySystemSoundWithOptions with sound ID %u and flags %x", buf, 0x1Eu);
        }
        goto LABEL_290;
      }
LABEL_274:
      objc_initWeak(location, val);
      uint64_t v121 = v149;
      id v122 = (std::__shared_weak_count *)v150;
      if (v150) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v150 + 16), 1uLL, memory_order_relaxed);
      }
      *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3321888768;
      *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl37playHapticWithBeepAlertWithCompletionEP17AVVoiceController16AVVoiceAlertTypemU13block_pointerFviE_block_invoke;
      *(void *)&buf[24] = &unk_1EEFA3BB0;
      objc_copyWeak((id *)&buf[32], location);
      double v175 = *(double *)&v121;
      *(void *)&long long v176 = v122;
      if (v122) {
        atomic_fetch_add_explicit(&v122->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v177 = v135;
      *((void *)&v176 + 1) = a4;
      AudioServicesPlaySystemSoundWithOptions();
      if ((void)v176) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v176);
      }
      objc_destroyWeak((id *)&buf[32]);
      if (v122) {
        std::__shared_weak_count::__release_weak(v122);
      }
      objc_destroyWeak(location);
LABEL_292:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
      if (v150) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v150);
      }
      uint64_t v32 = 0;
LABEL_295:
      (*((void (**)(ControllerImpl *, uint64_t))v136 + 2))(v136, v32);

LABEL_327:
      VCLocker::~VCLocker((VCLocker *)v141);
      if (v143) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v143);
      }
      TraceMethod::~TraceMethod((TraceMethod *)v144);
      TraceWrapper::~TraceWrapper((TraceWrapper *)&v145);

      return;
    case 4:
      uint64_t v19 = v142;
      OSStatus v20 = (void (**)(id, uint64_t))v140;
      std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v149, *(void *)(v19 + 8), *(std::__shared_weak_count **)(v19 + 16));
      if (kAVVCScope)
      {
        __int16 v21 = *(id *)kAVVCScope;
        if (!v21) {
          goto LABEL_53;
        }
      }
      else
      {
        __int16 v21 = MEMORY[0x1E4F14500];
        id v33 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1976;
        _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d playAlert: Cannot play Beep via System Sounds", buf, 0x12u);
      }

LABEL_53:
      v20[2](v20, 4294955516);
      if (v150) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v150);
      }

      goto LABEL_327;
    default:
      goto LABEL_327;
  }
}

void sub_19D8454DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,id location,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&location, 8);
  if (a60) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a60);
  }
  TraceMethod::~TraceMethod((TraceMethod *)&a61);

  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a42);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a44);
  }
  _Block_object_dispose(&a45, 8);

  VCLocker::~VCLocker((VCLocker *)&a24);
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a27);
  }
  TraceMethod::~TraceMethod((TraceMethod *)&a28);
  TraceWrapper::~TraceWrapper((TraceWrapper *)&a30);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl9playAlertEP17AVVoiceController16AVVoiceAlertTypebm_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(_DWORD *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(AVVoiceController **)(a1 + 56);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZN14ControllerImpl9playAlertEP17AVVoiceController16AVVoiceAlertTypebm_block_invoke_2;
  v10[3] = &unk_1E5964FE0;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v11 = v3;
  uint64_t v12 = v7;
  id v9 = v3;
  ControllerImpl::playAlert(v5, v8, v4, v6, v10);
}

void sub_19D8459B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

NSObject *___ZN14ControllerImpl9playAlertEP17AVVoiceController16AVVoiceAlertTypebm_block_invoke_2(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  uint64_t result = *(NSObject **)(a1 + 32);
  if (result) {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (kAVVCScope)
    {
      uint64_t v2 = *(id *)kAVVCScope;
      if (!v2)
      {
LABEL_12:
        [WeakRetained startpointDetected];
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 2869;
      _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling startpointDetected synchronously", (uint8_t *)&v6, 0x12u);
    }

    goto LABEL_12;
  }
  if (kAVVCScope)
  {
    id v3 = *(id *)kAVVCScope;
    if (!v3) {
      goto LABEL_17;
    }
  }
  else
  {
    id v3 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315650;
    uint64_t v7 = "ControllerImpl.mm";
    __int16 v8 = 1024;
    int v9 = 2868;
    __int16 v10 = 2048;
    uint64_t v11 = 0;
    _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
  }

LABEL_17:
}

void sub_19D845B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke_252(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_12:
        [WeakRetained interspeechPointDetectedAtTime:*(double *)(a1 + 40)];
        goto LABEL_17;
      }
    }
    else
    {
      id v3 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315394;
      __int16 v8 = "ControllerImpl.mm";
      __int16 v9 = 1024;
      int v10 = 2879;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling interspeechPointDetected synchronously ", (uint8_t *)&v7, 0x12u);
    }

    goto LABEL_12;
  }
  if (kAVVCScope)
  {
    id v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_17;
    }
  }
  else
  {
    id v4 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315650;
    __int16 v8 = "ControllerImpl.mm";
    __int16 v9 = 1024;
    int v10 = 2878;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_17:
}

void sub_19D845D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke_254(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_12:
        [WeakRetained endpointDetectedAtTime:*(double *)(a1 + 40)];
        goto LABEL_17;
      }
    }
    else
    {
      id v3 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315394;
      __int16 v8 = "ControllerImpl.mm";
      __int16 v9 = 1024;
      int v10 = 2897;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling endpointDetected synchronously", (uint8_t *)&v7, 0x12u);
    }

    goto LABEL_12;
  }
  if (kAVVCScope)
  {
    id v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_17;
    }
  }
  else
  {
    id v4 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315650;
    __int16 v8 = "ControllerImpl.mm";
    __int16 v9 = 1024;
    int v10 = 2896;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v7, 0x1Cu);
  }

LABEL_17:
}

void sub_19D845EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::startKeepAliveQueue(uint64_t a1, std::__shared_weak_count *this, AVVCRecordingEngine **a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v7, a1, this);
  if (AVVCRecordingEngine::canStartKeepAliveQueue(*a3))
  {
    id v4 = +[AVVCKeepAliveManager sharedManager];
    [v4 createWithCompletion:0];

    id v5 = +[AVVCKeepAliveManager sharedManager];
    [v5 startWithCompletion:0];
LABEL_9:

    goto LABEL_10;
  }
  if (!kAVVCScope)
  {
    id v5 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
LABEL_7:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v10 = "ControllerImpl.mm";
      __int16 v11 = 1024;
      int v12 = 2923;
      _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d KeepAliveQueue will NOT be started since output is NOT hands free OR stream is NOT Running OR session is inactive", buf, 0x12u);
    }
    goto LABEL_9;
  }
  id v5 = *(id *)kAVVCScope;
  if (v5) {
    goto LABEL_7;
  }
LABEL_10:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_19D846038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void ControllerImpl::handleInterruptStart(ControllerImpl *this, AVVoiceController *a2, AVAudioSession *a3, NSDictionary *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id val = a2;
  uint64_t v7 = a3;
  __int16 v8 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v61, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::audioSessionForStreamID((uint64_t)this, 0, 0);
  __int16 v9 = (AVAudioSession *)objc_claimAutoreleasedReturnValue();

  if (kAVVCScope)
  {
    int v10 = *(id *)kAVVCScope;
    if (!v10) {
      goto LABEL_10;
    }
  }
  else
  {
    int v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    int v12 = "aux";
    *(_DWORD *)&buf[14] = 2949;
    __int16 v64 = 2080;
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    if (v9 == v7) {
      int v12 = "primary";
    }
    *(void *)id v65 = v12;
    *(_WORD *)&v65[8] = 2048;
    *(void *)&v65[10] = v7;
    __int16 v66 = 2112;
    id v67 = v8;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Interruption beginning for %s session (%p) info: %@", buf, 0x30u);
  }

LABEL_10:
  if (v9 == v7)
  {
    unsigned int SessionState = ControllerImpl::getSessionState(this, 0);
    uint64_t v13 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
    if (SessionState >= 5) {
      goto LABEL_41;
    }
    uint64_t v15 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
    unsigned int v16 = [v15 getSessionActivationOptions];

    if (kAVVCScope)
    {
      unsigned int v17 = *(id *)kAVVCScope;
      if (!v17) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v17 = MEMORY[0x1E4F14500];
      id v19 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2971;
      __int16 v64 = 1024;
      *(_DWORD *)id v65 = v16;
      _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   We think our session was not active.  Make sure it isn't. deactivating session with options : %d", buf, 0x18u);
    }

LABEL_25:
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v58, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    SessionLock::SessionLock(v60, v58, v59);
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    id v57 = 0;
    char v20 = [v13 setActive:0 withOptions:v16 error:&v57];
    id v21 = v57;
    if (v21) {
      char v22 = v20;
    }
    else {
      char v22 = 1;
    }
    if (v22) {
      goto LABEL_38;
    }
    if (kAVVCScope)
    {
      id v23 = *(id *)kAVVCScope;
      if (!v23)
      {
LABEL_38:
        if (SessionState >= 3) {
          ControllerImpl::setSessionState((uint64_t)this, 2, 0);
        }

        VCLocker::~VCLocker((VCLocker *)v60);
LABEL_41:
        int v27 = (void *)MEMORY[0x19F3AC180]();
        __int16 v28 = [(NSDictionary *)v8 objectForKey:*MEMORY[0x1E4F4E880]];
        uint64_t v29 = ExtractProcessNameFromString(v28);

        if (v29 && [v29 length])
        {
          int v30 = +[AVVCMetricsManager sharedManager];
          [v30 logSessionMetric:@"avvcInterruptingProcessName" value:v29 category:1 type:6 reporterID:[(AVAudioSession *)v7 reporterID]];
        }
        else
        {
          if (kAVVCScope)
          {
            int v30 = *(id *)kAVVCScope;
            if (!v30)
            {
LABEL_51:

              ControllerImpl::stopKeepAliveQueue(*((ControllerImpl **)this + 1), *((std::__shared_weak_count **)this + 2));
              v60[0] = 0;
              uint64_t v32 = (void *)*((void *)this + 72);
              id v33 = (std::__shared_weak_count *)*((void *)this + 73);
              if (v33) {
                atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v32)
              {
                *(void *)AudioTimeStamp buf = &unk_1EEFA33C0;
                *(void *)&buf[8] = v60;
                *(void *)&v65[4] = buf;
                AVVCRecordingEngineMap::for_each_engine(v32, (uint64_t)buf, "isAnyEngineActive");
                std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](buf);
              }
              int v34 = v60[0];
              if (v33) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v33);
              }
              if (v34)
              {
                if (kAVVCScope)
                {
                  int v35 = *(id *)kAVVCScope;
                  if (!v35)
                  {
LABEL_68:
                    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v55, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
                    SessionLock::SessionLock(buf, v55, v56);
                    if (v56) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
                    }
                    ControllerImpl::setSessionState((uint64_t)this, 2, 0);
                    VCLocker::~VCLocker((VCLocker *)buf);
                    objc_initWeak(v38, val);
                    uint64_t v39 = v61;
                    v52[0] = MEMORY[0x1E4F143A8];
                    v52[1] = 3221225472;
                    v52[2] = ___ZN14ControllerImpl20handleInterruptStartEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke;
                    v52[3] = &unk_1E59650A8;
                    objc_copyWeak(&v54, (id *)buf);
                    int v40 = v8;
                    id v53 = v40;
                    ControllerImpl::safeNotify(v39, (uint64_t)"beginRecordInterruptionWithContext", v52);
                    int v41 = [(NSDictionary *)v40 objectForKey:*MEMORY[0x1E4F4E850]];
                    LODWORD(v40) = [v41 unsignedIntValue];

                    if (v40 == 6) {
                      unsigned int v42 = -11796;
                    }
                    else {
                      unsigned int v42 = -11786;
                    }
                    ControllerImpl::stopRunningEngines(this, val, 0, v42);

                    objc_destroyWeak(&v54);
                    objc_destroyWeak((id *)buf);
LABEL_81:
                    v46[0] = MEMORY[0x1E4F143A8];
                    v46[1] = 3321888768;
                    v46[2] = ___ZN14ControllerImpl20handleInterruptStartEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke_258;
                    v46[3] = &unk_1EEFA7D50;
                    uint64_t v44 = v61;
                    uint64_t v48 = v61;
                    int v49 = v62;
                    if (v62) {
                      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    int v47 = val;
                    ControllerImpl::safeWork(v44, v46, (uint64_t)"handleInterruptStart");

                    if (v49) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
                    }
                    goto LABEL_85;
                  }
                }
                else
                {
                  int v35 = MEMORY[0x1E4F14500];
                  id v37 = MEMORY[0x1E4F14500];
                }
                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)AudioTimeStamp buf = 136315394;
                  *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3009;
                  _os_log_impl(&dword_19D794000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d   Record was active", buf, 0x12u);
                }

                goto LABEL_68;
              }
              if (kAVVCScope)
              {
                int v36 = *(id *)kAVVCScope;
                if (!v36)
                {
LABEL_78:
                  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v50, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
                  SessionLock::SessionLock(buf, v50, v51);
                  if (v51) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
                  }
                  ControllerImpl::setSessionState((uint64_t)this, 1, 0);
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear((void *)this + 60);
                  VCLocker::~VCLocker((VCLocker *)buf);
                  goto LABEL_81;
                }
              }
              else
              {
                int v36 = MEMORY[0x1E4F14500];
                id v43 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3033;
                _os_log_impl(&dword_19D794000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d   Nothing active", buf, 0x12u);
              }

              goto LABEL_78;
            }
          }
          else
          {
            int v30 = MEMORY[0x1E4F14500];
            id v31 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3001;
            _os_log_impl(&dword_19D794000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d handleInterruptStart: AVAudioSessionInterruptorNameKey nil or empty string. Please check !!", buf, 0x12u);
          }
        }

        goto LABEL_51;
      }
    }
    else
    {
      id v23 = (id)MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
    }
    OSStatus v25 = v23;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = [v21 localizedDescription];
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2979;
      __int16 v64 = 1024;
      *(_DWORD *)id v65 = 0;
      *(_WORD *)&v65[4] = 2112;
      *(void *)&v65[6] = v26;
      _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d deactivating session returned  : %d - error - %@", buf, 0x22u);
    }
    goto LABEL_38;
  }
  if (!kAVVCScope)
  {
    uint64_t v13 = MEMORY[0x1E4F14500];
    id v18 = MEMORY[0x1E4F14500];
LABEL_19:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2955;
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d   Interrupt for aux session unexpected", buf, 0x12u);
    }
LABEL_85:

    goto LABEL_86;
  }
  uint64_t v13 = *(id *)kAVVCScope;
  if (v13) {
    goto LABEL_19;
  }
LABEL_86:
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
}

void sub_19D84695C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  VCLocker::~VCLocker((VCLocker *)&a31);
  OSStatus v38 = *(std::__shared_weak_count **)(v36 - 168);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20handleInterruptStartEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained beginRecordInterruptionWithContext:*(void *)(a1 + 32)];
  }
  else
  {
    if (kAVVCScope)
    {
      id v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      id v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 3018;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D846BC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20handleInterruptStartEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke_258(uint64_t a1)
{
}

void std::__function::__func<ControllerImpl::isAnyEngineActive(void)::$_0,std::allocator<ControllerImpl::isAnyEngineActive(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  id v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (*(uint64_t *)(v4 + 224) >= 4) {
    atomic_fetch_add_explicit(*(atomic_uint *volatile *)(a1 + 8), 1u, memory_order_relaxed);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::__function::__func<ControllerImpl::isAnyEngineActive(void)::$_0,std::allocator<ControllerImpl::isAnyEngineActive(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EEFA33C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ControllerImpl::isAnyEngineActive(void)::$_0,std::allocator<ControllerImpl::isAnyEngineActive(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EEFA33C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ControllerImpl::isAnyEngineActive(void)::$_0,std::allocator<ControllerImpl::isAnyEngineActive(void)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
}

void ControllerImpl::handleInterruptStop(ControllerImpl *this, AVVoiceController *a2, AVAudioSession *a3, NSDictionary *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  __int16 v8 = a3;
  int v9 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v19, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::audioSessionForStreamID((uint64_t)this, 0, 0);
  __int16 v10 = (AVAudioSession *)objc_claimAutoreleasedReturnValue();

  if (kAVVCScope)
  {
    uint64_t v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    char v22 = "ControllerImpl.mm";
    __int16 v23 = 1024;
    uint64_t v13 = "aux";
    int v24 = 3057;
    __int16 v25 = 2080;
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    if (v10 == v8) {
      uint64_t v13 = "primary";
    }
    uint64_t v26 = v13;
    __int16 v27 = 2048;
    __int16 v28 = v8;
    __int16 v29 = 2112;
    int v30 = v9;
    _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Interruption ending for %s session (%p) info: %@", buf, 0x30u);
  }

LABEL_10:
  if (v10 == v8)
  {
    objc_initWeak((id *)buf, v7);
    uint64_t v15 = v19;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = ___ZN14ControllerImpl19handleInterruptStopEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke;
    v17[3] = &unk_1E5965B28;
    objc_copyWeak(&v18, (id *)buf);
    ControllerImpl::safeNotify(v15, (uint64_t)"endRecordInterruption", v17);
    objc_destroyWeak(&v18);
    objc_destroyWeak((id *)buf);
    goto LABEL_19;
  }
  if (kAVVCScope)
  {
    id v14 = *(id *)kAVVCScope;
    if (!v14) {
      goto LABEL_19;
    }
  }
  else
  {
    id v14 = MEMORY[0x1E4F14500];
    id v16 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    char v22 = "ControllerImpl.mm";
    __int16 v23 = 1024;
    int v24 = 3063;
    _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d   Interrupt for aux session unexpected", buf, 0x12u);
  }

LABEL_19:
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_19D846F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19handleInterruptStopEP17AVVoiceControllerP14AVAudioSessionP12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained endRecordInterruption];
  }
  else
  {
    if (kAVVCScope)
    {
      uint64_t v3 = *(id *)kAVVCScope;
      if (!v3) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v3 = MEMORY[0x1E4F14500];
      id v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      int v6 = "ControllerImpl.mm";
      __int16 v7 = 1024;
      int v8 = 3070;
      __int16 v9 = 2048;
      uint64_t v10 = 0;
      _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v5, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D8470A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::handleRouteChange(ControllerImpl *this, AVVoiceController *a2, AVAudioSession *a3, NSDictionary *a4)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  double v97 = a2;
  __int16 v7 = a3;
  float v98 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v111, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  ControllerImpl::audioSessionForStreamID((uint64_t)this, 0, 0);
  int v8 = (AVAudioSession *)objc_claimAutoreleasedReturnValue();

  if (kAVVCScope)
  {
    __int16 v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_10;
    }
  }
  else
  {
    __int16 v9 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = "aux";
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3082;
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    if (v8 == v7) {
      uint64_t v11 = "primary";
    }
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v11;
    *(_WORD *)&unsigned char buf[28] = 2048;
    *(void *)&buf[30] = v7;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Route Change for %s session (%p)", buf, 0x26u);
  }

LABEL_10:
  if (v8 == v7)
  {
    int SessionState = ControllerImpl::getSessionState(this, 0);
    if (SessionState < 7)
    {
      uint64_t v13 = 0;
      CFStringRef v94 = 0;
    }
    else
    {
      ControllerImpl::_getCurrentRecordingEngine(buf, (uint64_t)this, *((void *)this + 59), 1, (uint64_t)"handleRouteChange");
      uint64_t v13 = *(void *)buf;
      CFStringRef v94 = *(std::__shared_weak_count **)&buf[8];
    }
    int v96 = [(NSDictionary *)v98 objectForKey:*MEMORY[0x1E4F4E9C8]];
    char v95 = [(NSDictionary *)v98 objectForKey:*MEMORY[0x1E4F4E9C0]];
    if (v96)
    {
      unint64_t v15 = [v96 unsignedIntegerValue];
      uint64_t v90 = v13;
      switch(v15)
      {
        case 1uLL:
        case 2uLL:
        case 4uLL:
          goto LABEL_54;
        case 3uLL:
          *(void *)id v118 = 0;
          id v16 = [(NSDictionary *)v98 objectForKey:@"AVAudioSessionRouteChangeCurrentRouteKey"];
          extractFirstInputPortTypeFromRouteDescription(v16, (void **)v118);
          unsigned int v17 = (void *)*((void *)this + 72);
          id v18 = (std::__shared_weak_count *)*((void *)this + 73);
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v17)
          {
            *(void *)AudioTimeStamp buf = &unk_1EEFA34E0;
            *(void *)&buf[8] = v118;
            *(void *)&buf[24] = buf;
            AVVCRecordingEngineMap::for_each_engine(v17, (uint64_t)buf, "stopRecordingOnCategoryChange");
            std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](buf);
            goto LABEL_77;
          }
          if (kAVVCScope)
          {
            uint64_t v31 = *(id *)kAVVCScope;
            if (!v31) {
              goto LABEL_77;
            }
          }
          else
          {
            uint64_t v31 = MEMORY[0x1E4F14500];
            id v48 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1462;
            _os_log_impl(&dword_19D794000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
          }

LABEL_77:
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }

          if (SessionState > 6)
          {
            int v49 = ControllerImpl::audioSessionForStreamID((uint64_t)this, 0, 0);
            uint64_t v50 = [v49 category];
            if (([v50 isEqualToString:*MEMORY[0x1E4F4E7F0]] & 1) == 0)
            {
              id v51 = CALog::LogObjIfEnabled(2, kAVVCScope);
              id v52 = v51;
              if (v51 && os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3165;
                _os_log_impl(&dword_19D794000, v52, OS_LOG_TYPE_DEFAULT, "%25s:%-5d New route Category is not ours!", buf, 0x12u);
              }
            }
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v105, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
            SessionLock::SessionLock(v118, v105, v106);
            if (v106) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v106);
            }
            if (v90)
            {
              id v53 = (*(void (**)(uint64_t, void))(*(void *)v90 + 64))(v90, 0);
              int v54 = [v53 forceGetSessionProperties];

              if (v54)
              {
                uint64_t v55 = CALog::LogObjIfEnabled(5, kAVVCScope);
                __int16 v56 = v55;
                if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)AudioTimeStamp buf = 136315394;
                  *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3171;
                  _os_log_impl(&dword_19D794000, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d We were waiting for a route change -- Re-checking properties", buf, 0x12u);
                }

                id v57 = (*(void (**)(uint64_t, void))(*(void *)v90 + 64))(v90, 0);
                [v57 setForceGetSessionProperties:0];

                v103[0] = MEMORY[0x1E4F143A8];
                v103[1] = 3321888768;
                v103[2] = ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke_262;
                v103[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
                v103[4] = v90;
                id v104 = v94;
                if (v94) {
                  atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                (*(void (**)(uint64_t, void *))(*(void *)v90 + 376))(v90, v103);
                if (v104) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v104);
                }
                goto LABEL_111;
              }
              __int16 v64 = CALog::LogObjIfEnabled(6, kAVVCScope);
              __int16 v63 = v64;
              if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3179;
                _os_log_impl(&dword_19D794000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change reason: category change - ignoring", buf, 0x12u);
              }
            }
            else
            {
              uint64_t v62 = CALog::LogObjIfEnabled(1, kAVVCScope);
              __int16 v63 = v62;
              if (v62 && os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3183;
                _os_log_impl(&dword_19D794000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d Nil Engine! Could not get session properties", buf, 0x12u);
              }
            }

LABEL_111:
            VCLocker::~VCLocker((VCLocker *)v118);

            goto LABEL_177;
          }
          uint64_t v58 = CALog::LogObjIfEnabled(6, kAVVCScope);
          uint64_t v19 = v58;
          if (v58)
          {
            int v59 = v58;
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
            {
              int v60 = ControllerImpl::getSessionState(this, 0);
              uint64_t v61 = "not (yet) active";
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_DWORD *)AudioTimeStamp buf = 136315650;
              if ((v60 & 0xFFFFFFFE) == 2) {
                uint64_t v61 = "interrupted";
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3188;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v61;
              _os_log_impl(&dword_19D794000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category change came in while we were %s -- ignoring", buf, 0x1Cu);
            }
          }
          goto LABEL_33;
        case 8uLL:
          char v22 = v97;
          __int16 v23 = v98;
          ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)v118, *((void *)this + 72), *((std::__shared_weak_count **)this + 73), 1uLL);
          uint64_t v24 = *(void *)v118;
          if (!*(void *)v118 || *(void *)(*(void *)v118 + 224) != 5) {
            goto LABEL_153;
          }
          v115 = 0;
          (*(void (**)(void, NSString **))(**(void **)v118 + 328))(*(void *)v118, &v115);
          uint64_t v117 = 0;
          __int16 v25 = [(NSDictionary *)v23 objectForKey:@"AVAudioSessionRouteChangeCurrentRouteKey"];
          extractFirstInputPortTypeFromRouteDescription(v25, (void **)&v117);
          int v26 = areNSStringsEqual(v115, (NSString *)*MEMORY[0x1E4F4E978]);
          __int16 v27 = v117;
          if (!v26 || !areNSStringsEqual(v117, (NSString *)*MEMORY[0x1E4F4E950])) {
            goto LABEL_152;
          }
          if (kAVVCScope)
          {
            id v28 = *(id *)kAVVCScope;
            if (!v28) {
              goto LABEL_151;
            }
          }
          else
          {
            id v28 = (id)MEMORY[0x1E4F14500];
            id v72 = MEMORY[0x1E4F14500];
          }
          __int16 v73 = v28;
          if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
          {
            uint64_t v74 = *(void *)(v24 + 272);
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1490;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v74;
            _os_log_impl(&dword_19D794000, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordingOnRouteConfigurationChange: Route has changed from CarAudio to MicrophoneBuiltIn while stream(%lu) engine is running! Stopping the recording.", buf, 0x1Cu);
          }

LABEL_151:
          AVVCRecordingEngine::stopRecordWithRecordLock(*(AVVCRecordingEngine **)(v24 + 152));
LABEL_152:

LABEL_153:
          if (*(void *)&v118[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v118[8]);
          }

          if (SessionState > 6)
          {
            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v101, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
            SessionLock::SessionLock(v118, v101, v102);
            if (v102) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v102);
            }
            if (v90)
            {
              uint64_t v75 = (*(void (**)(uint64_t, void))(*(void *)v90 + 64))(v90, 0);
              int v76 = [v75 forceGetSessionProperties];

              if (v76)
              {
                __int16 v77 = CALog::LogObjIfEnabled(5, kAVVCScope);
                uint64_t v78 = v77;
                if (v77 && os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)AudioTimeStamp buf = 136315394;
                  *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3206;
                  _os_log_impl(&dword_19D794000, v78, OS_LOG_TYPE_DEBUG, "%25s:%-5d We were waiting for a route change -- Re-checking properties", buf, 0x12u);
                }

                id v79 = (*(void (**)(uint64_t, void))(*(void *)v90 + 64))(v90, 0);
                [v79 setForceGetSessionProperties:0];

                v99[0] = MEMORY[0x1E4F143A8];
                v99[1] = 3321888768;
                v99[2] = ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke_265;
                v99[3] = &__block_descriptor_48_ea8_32c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
                v99[4] = v90;
                __int16 v100 = v94;
                if (v94) {
                  atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                (*(void (**)(uint64_t, void *))(*(void *)v90 + 376))(v90, v99);
                if (v100) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v100);
                }
              }
            }
            else
            {
              id v81 = CALog::LogObjIfEnabled(1, kAVVCScope);
              int v82 = v81;
              if (v81 && os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioTimeStamp buf = 136315394;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3215;
                _os_log_impl(&dword_19D794000, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d Nil Engine! Could not get session properties", buf, 0x12u);
              }
            }
            int v71 = (VCLocker *)v118;
            goto LABEL_176;
          }
          uint64_t v80 = CALog::LogObjIfEnabled(6, kAVVCScope);
          uint64_t v19 = v80;
          if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3219;
            _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route change reason: route configuration change - ignoring", buf, 0x12u);
          }
          goto LABEL_33;
        default:
          if (kAVVCScope)
          {
            id v21 = *(id *)kAVVCScope;
            if (!v21) {
              goto LABEL_54;
            }
          }
          else
          {
            id v21 = MEMORY[0x1E4F14500];
            id v29 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            if (v15 > 8) {
              int v30 = "Illegal";
            }
            else {
              int v30 = off_1E5965758[v15];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3114;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v15;
            *(_WORD *)&buf[24] = 2080;
            *(void *)&buf[26] = v30;
            _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route change reason : [%d] = %s", buf, 0x22u);
          }

LABEL_54:
          int v89 = v97;
          id v92 = v95;
          std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v115, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
          if (kAVVCScope)
          {
            uint64_t v32 = *(id *)kAVVCScope;
            if (!v32) {
              goto LABEL_61;
            }
          }
          else
          {
            uint64_t v32 = MEMORY[0x1E4F14500];
            id v33 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4142;
            _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d _invalidateStreamWhenDeviceUnavailable()", buf, 0x12u);
          }

LABEL_61:
          int v34 = ControllerImpl::sessionManagerForStreamID((uint64_t)v115, 0, 0);
          int v35 = [v34 currentRoute];
          id v91 = [v35 inputs];
          id v88 = [v35 siriRemoteInputIdentifier];
          char v36 = [v34 isSessionOutputInWirelessSplitterMode];
          id v37 = [v92 inputs];
          uint64_t v38 = [v37 count];

          uint64_t v39 = [v91 count];
          *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 3321888768;
          *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescription_block_invoke;
          *(void *)&buf[24] = &unk_1EEFA8890;
          id v123 = v115;
          int v124 = v116;
          if (v116) {
            atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          id v40 = v92;
          char v126 = v36;
          *(void *)&uint8_t buf[32] = v40;
          uint64_t v125 = v39;
          int v41 = v89;
          uint64_t v121 = v41;
          id v42 = v88;
          id v122 = v42;
          id v43 = _Block_copy(buf);
          uint64_t v44 = v43;
          if (v38 != 1)
          {
            (*((void (**)(void *))v43 + 2))(v43);
            goto LABEL_119;
          }
          uint64_t v117 = 0;
          double v114 = 0;
          extractFirstInputPortTypeFromRouteDescription(v35, (void **)&v117);
          extractFirstInputPortTypeFromRouteDescription(v40, (void **)&v114);
          int v45 = v117;
          if (areNSStringsEqual(v114, v117)) {
            goto LABEL_118;
          }
          unint64_t v113 = 0;
          uint64_t v46 = v115[72];
          int v47 = (std::__shared_weak_count *)v115[73];
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v87 = v47;
          if (v46)
          {
            *(void *)id v118 = &unk_1EEFA9050;
            *(void *)&v118[8] = &v114;
            *(void *)&v118[16] = &v113;
            __int16 v119 = v118;
            AVVCRecordingEngineMap::for_each_engine(v46, (uint64_t)v118, "_invalidateStreamWhenDeviceUnavailable");
            std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](v118);
            goto LABEL_116;
          }
          if (kAVVCScope)
          {
            oslog = *(id *)kAVVCScope;
            if (!oslog) {
              goto LABEL_116;
            }
          }
          else
          {
            oslog = MEMORY[0x1E4F14500];
            id v65 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)id v118 = 136315394;
            *(void *)&v118[4] = "ControllerImpl.mm";
            *(_WORD *)&v118[12] = 1024;
            *(_DWORD *)&v118[14] = 4219;
            _os_log_impl(&dword_19D794000, oslog, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", v118, 0x12u);
          }

LABEL_116:
          ControllerImpl::_removeEngineFromMap((uint64_t)v115, v41, v113, 0, v44);
          if (v87) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v87);
          }
LABEL_118:

LABEL_119:
          if (v124) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v124);
          }

          if (v116) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v116);
          }

          if (SessionState > 6 && *((void *)this + 59) && v90)
          {
            if (kAVVCScope)
            {
              __int16 v66 = *(id *)kAVVCScope;
              if (!v66) {
                goto LABEL_140;
              }
            }
            else
            {
              __int16 v66 = MEMORY[0x1E4F14500];
              id v70 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3125;
              _os_log_impl(&dword_19D794000, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route really changed -- Re-checking properties", buf, 0x12u);
            }
LABEL_140:

            std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v109, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
            SessionLock::SessionLock(buf, v109, v110);
            if (v110) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v110);
            }
            v107[0] = MEMORY[0x1E4F143A8];
            v107[1] = 3321888768;
            v107[2] = ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke;
            v107[3] = &__block_descriptor_56_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE_e5_v8__0l;
            v107[4] = this;
            v107[5] = v90;
            double v108 = v94;
            if (v94) {
              atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, void *))(*(void *)v90 + 376))(v90, v107);
            if (v108) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v108);
            }
            int v71 = (VCLocker *)buf;
LABEL_176:
            VCLocker::~VCLocker(v71);
            goto LABEL_177;
          }
          if (kAVVCScope)
          {
            id v67 = *(id *)kAVVCScope;
            if (!v67)
            {
LABEL_136:
              id v69 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
              [v69 setForceGetSessionProperties:1];

              goto LABEL_177;
            }
          }
          else
          {
            id v67 = MEMORY[0x1E4F14500];
            id v68 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3148;
            _os_log_impl(&dword_19D794000, v67, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route really changed but session not-yet-active/interrupted -- set flag to check properties when we are active", buf, 0x12u);
          }

          goto LABEL_136;
      }
    }
    if (kAVVCScope)
    {
      uint64_t v19 = *(id *)kAVVCScope;
      if (!v19) {
        goto LABEL_177;
      }
    }
    else
    {
      uint64_t v19 = MEMORY[0x1E4F14500];
      id v20 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3225;
      _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route change reason was NULL", buf, 0x12u);
    }
LABEL_33:

LABEL_177:
    int v83 = MGGetSInt32Answer();
    int v84 = MGGetBoolAnswer();
    if (v83 == 7) {
      int v85 = 1;
    }
    else {
      int v85 = v84;
    }
    if (v85 == 1) {
      ControllerImpl::stopRunningEngines(this, v97, 1, 0xFFFFD1F5);
    }

    if (v94) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v94);
    }
    goto LABEL_184;
  }
  if (kAVVCScope)
  {
    id v12 = *(id *)kAVVCScope;
    if (!v12) {
      goto LABEL_184;
    }
  }
  else
  {
    id v12 = MEMORY[0x1E4F14500];
    id v14 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3087;
    _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d   Route change for aux session unexpected", buf, 0x12u);
  }

LABEL_184:
  if (v112) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v112);
  }
}

void sub_19D848534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  VCLocker::~VCLocker((VCLocker *)(v52 - 240));

  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int SessionProperties = AVVCRecordingEngine::getSessionProperties(*(AVVCRecordingEngine **)(a1 + 40));
  uint64_t v4 = 2;
  if (SessionProperties > -11786)
  {
    if (SessionProperties != -11782)
    {
      if (SessionProperties != -11785) {
        goto LABEL_11;
      }
      uint64_t v4 = 0;
    }
    goto LABEL_10;
  }
  if (SessionProperties == -11796 || SessionProperties == -11786) {
LABEL_10:
  }
    ControllerImpl::setSessionState(v2, v4, 0);
LABEL_11:
  uint64_t v6 = *(void *)(a1 + 40);
  TraceMethod::TraceMethod((TraceMethod *)v37, "getSessionProperties_HWConfig");
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v35, *(void *)(v6 + 8), *(std::__shared_weak_count **)(v6 + 16));
  if ((*(unsigned int (**)(AVVCRecordingEngine *))(*(void *)v35 + 72))(v35)) {
    goto LABEL_12;
  }
  if (MGGetSInt32Answer() == 4 && (MGGetBoolAnswer() & 1) == 0)
  {
    id v10 = v35;
    BOOL v11 = (*(double (**)(AVVCRecordingEngine *))(*(void *)v35 + 48))(v35) > 8000.0;
    (*(void (**)(AVVCRecordingEngine *, double))(*(void *)v10 + 40))(v10, *(double *)&qword_19D8B1D00[v11]);
    goto LABEL_12;
  }
  uint64_t v7 = *((void *)v35 + 47);
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  int v8 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock((std::mutex *)(v7 + 56));
  }
  if ([*(id *)(v7 + 32) isEqualToString:*MEMORY[0x1E4F4E990]])
  {
    unsigned int v9 = 4;
    goto LABEL_47;
  }
  if ([*(id *)(v7 + 32) isEqualToString:*MEMORY[0x1E4F4E940]])
  {
    unsigned int v9 = 5;
    goto LABEL_47;
  }
  if (![*(id *)(v7 + 32) isEqualToString:*MEMORY[0x1E4F4E950]])
  {
    if ([*(id *)(v7 + 32) isEqualToString:*MEMORY[0x1E4F4E978]])
    {
      if (kAVVCScope)
      {
        id v12 = *(id *)kAVVCScope;
        if (!v12) {
          goto LABEL_46;
        }
      }
      else
      {
        id v12 = MEMORY[0x1E4F14500];
        id v13 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        uint64_t v39 = "AVVCRouteManager.mm";
        __int16 v40 = 1024;
        int v41 = 211;
        _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d getSessionProperties_HWConfig: car audio route", buf, 0x12u);
      }
    }
    else
    {
      if (![*(id *)(v7 + 32) isEqualToString:@"No Record Route"])
      {
LABEL_46:
        unsigned int v9 = 15;
        goto LABEL_47;
      }
      if (kAVVCScope)
      {
        id v12 = *(id *)kAVVCScope;
        if (!v12) {
          goto LABEL_46;
        }
      }
      else
      {
        id v12 = MEMORY[0x1E4F14500];
        id v14 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        uint64_t v39 = "AVVCRouteManager.mm";
        __int16 v40 = 1024;
        int v41 = 216;
        _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d getSessionProperties_HWConfig: unhandled audio route", buf, 0x12u);
      }
    }

    goto LABEL_46;
  }
  if ([*(id *)(v7 + 40) compare:*MEMORY[0x1E4F4E968]]) {
    unsigned int v9 = 3;
  }
  else {
    unsigned int v9 = 2;
  }
LABEL_47:
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      unint64_t v15 = *(id *)kAVVCScope;
      if (v15)
      {
        id v16 = v15;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          if (v9 - 2 >= 3)
          {
            unsigned int v17 = "Other";
            if (v9 == 5) {
              unsigned int v17 = "BT Headset/Headphones";
            }
          }
          else
          {
            unsigned int v17 = off_1E5964B98[v9 - 2];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v39 = "AVVCRouteManager.mm";
          __int16 v40 = 1024;
          int v41 = 224;
          __int16 v42 = 2080;
          *(void *)id v43 = v17;
          _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Hardware config: %s", buf, 0x1Cu);
        }
      }
    }
  }
  if (kAVVCScope)
  {
    id v18 = *(id *)kAVVCScope;
    if (!v18) {
      goto LABEL_64;
    }
  }
  else
  {
    id v18 = MEMORY[0x1E4F14500];
    id v19 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    uint64_t v39 = "AVVCRouteManager.mm";
    __int16 v40 = 1024;
    int v41 = 226;
    __int16 v42 = 1024;
    *(_DWORD *)id v43 = 0;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v20;
    __int16 v44 = 1024;
    unsigned int v45 = v9;
    _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d forceUpdate: %d, old config: %d newConfig: %d", buf, 0x24u);
  }

LABEL_64:
  int v21 = *(_DWORD *)(v7 + 24);
  if (v9 == v21)
  {
    int v22 = 0;
    if (v8) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v9 >= 4 && v21 < (int)v9 || (int v22 = 0, v9 <= 3) && v21 >= 4) {
    int v22 = 1;
  }
  *(_DWORD *)(v7 + 24) = v9;
  if (!v8) {
LABEL_73:
  }
    std::mutex::unlock((std::mutex *)(v7 + 56));
LABEL_74:
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  if (IsSerializationEnabled(void)::enable)
  {
    uint64_t v23 = *(unsigned int *)(v7 + 24);
  }
  else
  {
    std::mutex::lock((std::mutex *)(v7 + 56));
    uint64_t v23 = *(unsigned int *)(v7 + 24);
    std::mutex::unlock((std::mutex *)(v7 + 56));
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
  }
  int v24 = IsSerializationEnabled(void)::enable;
  if (!IsSerializationEnabled(void)::enable) {
    std::mutex::lock((std::mutex *)(v7 + 56));
  }
  if (v23 <= 0xF)
  {
    float v25 = 1.0;
    if (((1 << v23) & 0x802E) != 0)
    {
LABEL_84:
      *(float *)(v7 + 48) = v25;
      goto LABEL_85;
    }
    if (v23 == 4)
    {
      float v25 = 0.717;
      if (kAVVCScope)
      {
        if (*(unsigned char *)(kAVVCScope + 8))
        {
          uint64_t v31 = *(id *)kAVVCScope;
          if (v31)
          {
            log = v31;
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              uint64_t v39 = "AVVCRouteManager.mm";
              __int16 v40 = 1024;
              int v41 = 260;
              _os_log_impl(&dword_19D794000, log, OS_LOG_TYPE_DEBUG, "%25s:%-5d GetDeviceGainForHWConfig: using wired headset - reducing alert volume by 3dB", buf, 0x12u);
            }
          }
        }
      }
      goto LABEL_84;
    }
  }
LABEL_85:
  if (!v24) {
    std::mutex::unlock((std::mutex *)(v7 + 56));
  }
  if (IsSerializationEnabled(void)::onceToken != -1) {
    dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
  }
  if (IsSerializationEnabled(void)::enable)
  {
    int v26 = *(_DWORD *)(v7 + 48);
  }
  else
  {
    std::mutex::lock((std::mutex *)(v7 + 56));
    int v26 = *(_DWORD *)(v7 + 48);
    std::mutex::unlock((std::mutex *)(v7 + 56));
  }
  __int16 v27 = (*(void (**)(AVVCRecordingEngine *, void))(*(void *)v35 + 64))(v35, 0);
  LODWORD(v28) = v26;
  [v27 setDeviceGain:v28];

  if (!v22) {
    goto LABEL_109;
  }
  id v29 = v35;
  if (*((void *)v35 + 42) != 1) {
    goto LABEL_109;
  }
  if (!kAVVCScope)
  {
    int v30 = MEMORY[0x1E4F14500];
    id v32 = MEMORY[0x1E4F14500];
    goto LABEL_105;
  }
  int v30 = *(id *)kAVVCScope;
  if (v30)
  {
LABEL_105:
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v39 = "AVVCRecordingEngine.mm";
      __int16 v40 = 1024;
      int v41 = 1430;
      _os_log_impl(&dword_19D794000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d getSessionProperties_HWConfig: HW config changed (not in response to client) -- stopping record", buf, 0x12u);
    }

    id v29 = v35;
  }
  AVVCRecordingEngine::setRecordErrorStatus(v29, 0xFFFFD1F5, "getSessionProperties_HWConfig");
  AVVCRecordingEngine::stopRecordWithRecordLock(*((AVVCRecordingEngine **)v35 + 19));
LABEL_109:
  if (v9 != v21)
  {
    uint64_t v33 = *(void *)(v6 + 176);
    if (v33) {
      (*(void (**)(uint64_t, uint64_t))(v33 + 16))(v33, v23);
    }
  }
LABEL_12:
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  TraceMethod::~TraceMethod((TraceMethod *)v37);
}

void sub_19D849088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  TraceMethod::~TraceMethod((TraceMethod *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke_262(uint64_t a1)
{
  return AVVCRecordingEngine::getSessionProperties(*(AVVCRecordingEngine **)(a1 + 32));
}

uint64_t ___ZN14ControllerImpl17handleRouteChangeEP17AVVoiceControllerP14AVAudioSessionPK12NSDictionary_block_invoke_265(uint64_t a1)
{
  return AVVCRecordingEngine::getSessionProperties(*(AVVCRecordingEngine **)(a1 + 32));
}

void ___ZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescription_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3321888768;
  id v7[2] = ___ZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescription_block_invoke_2;
  _DWORD v7[3] = &unk_1EEFA88C8;
  id v3 = *(id *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 72);
  id v8 = v3;
  uint64_t v6 = *(void *)(a1 + 56);
  int v5 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v11 = v4;
  uint64_t v12 = v6;
  id v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  ControllerImpl::safeWork(v2, v7, (uint64_t)"_invalidateStreamWhenDeviceUnavailable_block_invoke");

  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_19D8491E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }

  _Unwind_Resume(a1);
}

void std::__function::__func<ControllerImpl::_invalidateStreamWhenDeviceUnavailable(AVVoiceController *,AVAudioSessionRouteDescription *)::$_0,std::allocator<ControllerImpl::_invalidateStreamWhenDeviceUnavailable(AVVoiceController *,AVAudioSessionRouteDescription *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v3 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  int v5 = 0;
  (*(void (**)(void *, NSString **))(*v4 + 328))(v4, &v5);
  if (areNSStringsEqual(v5, **(NSString ***)(a1 + 8))) {
    **(void **)(a1 + 16) = v4[34];
  }

  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_19D8492B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<ControllerImpl::_invalidateStreamWhenDeviceUnavailable(AVVoiceController *,AVAudioSessionRouteDescription *)::$_0,std::allocator<ControllerImpl::_invalidateStreamWhenDeviceUnavailable(AVVoiceController *,AVAudioSessionRouteDescription *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA9050;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ControllerImpl::_invalidateStreamWhenDeviceUnavailable(AVVoiceController *,AVAudioSessionRouteDescription *)::$_0,std::allocator<ControllerImpl::_invalidateStreamWhenDeviceUnavailable(AVVoiceController *,AVAudioSessionRouteDescription *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA9050;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ControllerImpl::_invalidateStreamWhenDeviceUnavailable(AVVoiceController *,AVAudioSessionRouteDescription *)::$_0,std::allocator<ControllerImpl::_invalidateStreamWhenDeviceUnavailable(AVVoiceController *,AVAudioSessionRouteDescription *)::$_0>,void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__func()
{
}

void ___ZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescription_block_invoke_2(uint64_t a1)
{
  void v17[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) siriRemoteInputIdentifier];
  if ([v2 length] && !*(unsigned char *)(a1 + 80))
  {
    uint64_t v6 = *(void *)(a1 + 56);

    if (v6 == 1)
    {
      uint64_t v7 = *(void *)(a1 + 64);
      id v8 = *(void **)(a1 + 40);
      id v11 = [*(id *)(a1 + 32) siriRemoteInputIdentifier];
      ControllerImpl::_removeEngineFromMap(v7, v8, 0, v11, &__block_literal_global_352);

      return;
    }
  }
  else
  {
  }
  if ([*(id *)(a1 + 48) length] && *(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void **)(v3 + 576);
    int v5 = *(std::__shared_weak_count **)(v3 + 584);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v12 = 0;
    if (v4)
    {
      v17[0] = &unk_1EEFA3A68;
      v17[1] = a1 + 48;
      v17[2] = &v12;
      v17[3] = v17;
      AVVCRecordingEngineMap::for_each_engine(v4, (uint64_t)v17, "_invalidateStreamWhenDeviceUnavailable_block_invoke");
      std::__function::__value_func<void ()(std::shared_ptr<AVVCRecordingEngine>)>::~__value_func[abi:ne180100](v17);
      ControllerImpl::_removeEngineFromMap(*(void *)(a1 + 64), *(void **)(a1 + 40), v12, 0, &__block_literal_global_355);
      goto LABEL_21;
    }
    if (kAVVCScope)
    {
      id v9 = *(id *)kAVVCScope;
      if (!v9)
      {
LABEL_21:
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        return;
      }
    }
    else
    {
      id v9 = MEMORY[0x1E4F14500];
      id v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      char v14 = "ControllerImpl.mm";
      __int16 v15 = 1024;
      int v16 = 4187;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
    }

    goto LABEL_21;
  }
}

void sub_19D8495A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescriptionEUb_EUb0_E3__6NS_9allocatorIS7_EEFvNS_10shared_ptrI19AVVCRecordingEngineEEEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v3)
  {
    int v5 = AVVCRouteManager::getRecordDeviceUID(*(id **)(v3 + 376));
    char v6 = [v5 isEqualToString:**(void **)(a1 + 8)];

    if ((v6 & 1) == 0) {
      **(void **)(a1 + 16) = *(void *)(v3 + 272);
    }
  }
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_19D84968C(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

__n128 _ZNKSt3__110__function6__funcIZZZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescriptionEUb_EUb0_E3__6NS_9allocatorIS7_EEFvNS_10shared_ptrI19AVVCRecordingEngineEEEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EEFA3A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescriptionEUb_EUb0_E3__6NS_9allocatorIS7_EEFvNS_10shared_ptrI19AVVCRecordingEngineEEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EEFA3A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZZN14ControllerImpl38_invalidateStreamWhenDeviceUnavailableEP17AVVoiceControllerP30AVAudioSessionRouteDescriptionEUb_EUb0_E3__6NS_9allocatorIS7_EEFvNS_10shared_ptrI19AVVCRecordingEngineEEEED0Ev()
{
}

void ControllerImpl::handleServerDeath(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v34, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (kAVVCScope)
  {
    uint64_t v4 = *(id *)kAVVCScope;
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v5 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    uint64_t v38 = "ControllerImpl.mm";
    __int16 v39 = 1024;
    int v40 = 3258;
    _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Server died!", buf, 0x12u);
  }

LABEL_8:
  *((unsigned char *)this + 521) = 1;
  if (ControllerImpl::getSessionState(this, 0)) {
    goto LABEL_16;
  }
  if (kAVVCScope)
  {
    char v6 = *(id *)kAVVCScope;
    if (!v6) {
      goto LABEL_16;
    }
  }
  else
  {
    char v6 = MEMORY[0x1E4F14500];
    id v7 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    uint64_t v38 = "ControllerImpl.mm";
    __int16 v39 = 1024;
    int v40 = 3266;
    _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ControllerImpl::handleServerDeath: session is not configured", buf, 0x12u);
  }

LABEL_16:
  if (kAVVCScope)
  {
    id v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_23;
    }
  }
  else
  {
    id v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    uint64_t v38 = "ControllerImpl.mm";
    __int16 v39 = 1024;
    int v40 = 3271;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d ControllerImpl::handleServerDeath: Destroying internal state for later rebuild", buf, 0x12u);
  }

LABEL_23:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v31, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  SessionLock::SessionLock(v33, v31, v32);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  id v10 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
  objc_msgSend(v10, "setForceGetSessionProperties:", objc_msgSend(v10, "sessionState") != 7);
  [v10 setSessionState:0];
  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::clear((void *)this + 60);
  id v11 = +[AVVCSessionFactory sharedInstance];
  unint64_t v12 = [v11 auxSessionManagers];

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v13 = v12;
  uint64_t v14 = [v13 countByEnumeratingWithState:&v27 objects:v36 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v28 != v15) {
          objc_enumerationMutation(v13);
        }
        unsigned int v17 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        objc_msgSend(v17, "setForceGetSessionProperties:", objc_msgSend(v17, "sessionState") != 7);
        [v17 setSessionState:0];
      }
      uint64_t v14 = [v13 countByEnumeratingWithState:&v27 objects:v36 count:16];
    }
    while (v14);
  }

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v25, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  SessionUnlocker::SessionUnlocker(buf, v25, v26);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  ControllerImpl::stopRunningEngines(this, v3, 0, 0xFFFFD1F7);
  VCUnlocker::~VCUnlocker((VCUnlocker *)buf);
  ControllerImpl::cleanup(this, v3);
  int v18 = MGGetSInt32Answer();
  char v19 = MGGetBoolAnswer();
  if (v18 == 7) {
    char v20 = 1;
  }
  else {
    char v20 = v19;
  }
  if ((v20 & 1) == 0)
  {
    int v21 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
    int v22 = [v21 isMiniDuckingEnabled];

    if (v22)
    {
      if (kAVVCScope)
      {
        uint64_t v23 = *(id *)kAVVCScope;
        if (!v23)
        {
LABEL_46:
          ControllerImpl::enableMiniDucking(this, 0);
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v23 = MEMORY[0x1E4F14500];
        id v24 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        uint64_t v38 = "ControllerImpl.mm";
        __int16 v39 = 1024;
        int v40 = 188;
        _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Resetting miniducking", buf, 0x12u);
      }

      goto LABEL_46;
    }
  }
LABEL_47:

  VCLocker::~VCLocker((VCLocker *)v33);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
}

void sub_19D849C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  VCLocker::~VCLocker((VCLocker *)&a21);
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }

  _Unwind_Resume(a1);
}

unsigned char *SessionUnlocker::SessionUnlocker(unsigned char *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  VCUnlocker::VCUnlocker(a1, a2, 3u);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  return a1;
}

void sub_19D849D20(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ControllerImpl::handleServerReset(ControllerImpl *this, AVVoiceController *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v23, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  if (kAVVCScope)
  {
    uint64_t v3 = *(id *)kAVVCScope;
    if (!v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4F14500];
    id v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    long long v27 = "ControllerImpl.mm";
    __int16 v28 = 1024;
    int v29 = 3307;
    _os_log_impl(&dword_19D794000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVVoiceController -> Server reset after death", buf, 0x12u);
  }

LABEL_8:
  *((unsigned char *)this + 521) = 0;
  if (kAVVCScope)
  {
    id v5 = *(id *)kAVVCScope;
    if (!v5) {
      goto LABEL_15;
    }
  }
  else
  {
    id v5 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    long long v27 = "ControllerImpl.mm";
    __int16 v28 = 1024;
    int v29 = 3311;
    _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d ControllerImpl::handleServerReset: restoring activation context and resetting session properties", buf, 0x12u);
  }

LABEL_15:
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v21, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
  SessionLock::SessionLock(buf, v21, v22);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  *((void *)this + 66) = 0;
  id v7 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
  [v7 setupOneTimeSessionSettingsForClient:*((void *)this + 23)];
  id v8 = +[AVVCSessionFactory sharedInstance];
  id v9 = [v8 auxSessionManagers];

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v10 = v9;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v18 != v12) {
          objc_enumerationMutation(v10);
        }
        objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * i), "setupOneTimeSessionSettingsForClient:", *((void *)this + 23), (void)v17);
      }
      uint64_t v11 = [v10 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v11);
  }

  uint64_t v14 = (void *)MEMORY[0x19F3AC180]();
  uint64_t v15 = +[AVVCMetricsManager sharedManager];
  int v16 = ControllerImpl::sessionManagerForStreamID((uint64_t)this, 0, 0);
  objc_msgSend(v15, "updateWithReporterID:", objc_msgSend(v16, "reporterID"));

  VCLocker::~VCLocker((VCLocker *)buf);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_19D84A034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  VCLocker::~VCLocker((VCLocker *)(v23 - 96));
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(a1);
}

void ControllerImpl::setContext(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v21, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  uint64_t v10 = v21;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  v14[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke;
  v14[3] = &unk_1EEFA87E8;
  uint64_t v18 = a1;
  uint64_t v19 = v21;
  long long v20 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v11 = v9;
  id v17 = v11;
  id v12 = v8;
  id v15 = v12;
  id v13 = v7;
  id v16 = v13;
  ControllerImpl::safeWork(v10, v14, (uint64_t)"setContext");

  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_19D84A214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 64);
  if (!*(unsigned char *)(v2 + 520))
  {
    uint64_t v6 = *(void *)(a1 + 56);
    *(void *)id v122 = [*(id *)(a1 + 32) activationMode];
    [*(id *)(*(void *)(a1 + 64) + 464) setParentVoiceController:*(void *)(a1 + 40)];
    uint64_t v147 = 0;
    long long v148 = &v147;
    uint64_t v149 = 0x2020000000;
    int v150 = 0;
    id v7 = *(id *)(a1 + 32);
    int v8 = [v7 activationMode];
    if ([v7 activationMode] == 1987012963 || objc_msgSend(v7, "activationMode") == 1752396914)
    {
      id v9 = ControllerImpl::sessionManagerForStreamID(v6, 0, 0);
      char v10 = [v9 isCurrentInputBuiltInMic];

      if ((v10 & 1) != 0 || ![v7 announceCallsEnabled])
      {
        int v12 = 1;
      }
      else
      {
        id v11 = ControllerImpl::sessionManagerForStreamID(v6, 0, 0);
        int v12 = objc_msgSend(v11, "predictIfMicrophoneShouldBeUsedForActivationMode:", objc_msgSend(v7, "activationMode"));

        if (kAVVCScope)
        {
          id v13 = *(id *)kAVVCScope;
          if (!v13) {
            goto LABEL_25;
          }
        }
        else
        {
          id v13 = (id)MEMORY[0x1E4F14500];
          id v20 = MEMORY[0x1E4F14500];
        }
        uint64_t v21 = v13;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = Get4CCFromInt(v8);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3449;
          __int16 v160 = 2112;
          *(void *)uint64_t v161 = v22;
          _os_log_impl(&dword_19D794000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: Announce Calls case for activation mode (%@)", buf, 0x1Cu);
        }
      }
LABEL_25:
      if ((v12 & isHACProduct()) == 1 && *(void *)(v6 + 184) == 1)
      {
        if (kAVVCScope)
        {
          uint64_t v23 = *(id *)kAVVCScope;
          if (!v23)
          {
LABEL_49:
            id v27 = 0;
            LODWORD(v26) = 0;
            int v15 = 4;
            goto LABEL_131;
          }
        }
        else
        {
          uint64_t v23 = MEMORY[0x1E4F14500];
          id v30 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3455;
          _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: HAC engine selected", buf, 0x12u);
        }

        goto LABEL_49;
      }
      if (kAVVCScope)
      {
        id v24 = *(id *)kAVVCScope;
        if (!v24) {
          goto LABEL_37;
        }
      }
      else
      {
        id v24 = MEMORY[0x1E4F14500];
        id v25 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3462;
        _os_log_impl(&dword_19D794000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: AQ engine selected", buf, 0x12u);
      }

LABEL_37:
      if (kAVVCScope)
      {
        int v26 = *(id *)kAVVCScope;
        if (!v26)
        {
          id v27 = 0;
LABEL_44:
          int v15 = 2;
LABEL_131:
          uint64_t v14 = v27;
LABEL_132:

          id v5 = v14;
          int v150 = (int)v26;
          __int16 v66 = v148;
          if (*((_DWORD *)v148 + 6))
          {
            if (kAVVCScope)
            {
              id v67 = *(id *)kAVVCScope;
              if (!v67)
              {
LABEL_143:
                uint64_t v73 = *(void *)(a1 + 64);
                uint64_t v74 = *(void **)(a1 + 48);
                BOOL v75 = v74 != 0;
                v144[0] = MEMORY[0x1E4F143A8];
                v144[1] = 3221225472;
                v144[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_272;
                v144[3] = &unk_1E5964F40;
                id v145 = v74;
                char v146 = &v147;
                ControllerImpl::safeNotifyAlwaysAsync(v73, v75, v144);

LABEL_187:
                _Block_object_dispose(&v147, 8);
                goto LABEL_188;
              }
            }
            else
            {
              id v67 = (id)MEMORY[0x1E4F14500];
              id v69 = MEMORY[0x1E4F14500];
            }
            id v70 = v67;
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              int v71 = *((_DWORD *)v66 + 6);
              id v72 = Get4CCFromInt(v122[0]);
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3663;
              __int16 v160 = 1024;
              *(_DWORD *)uint64_t v161 = v71;
              *(_WORD *)&v161[4] = 2112;
              *(void *)&v161[6] = v72;
              _os_log_impl(&dword_19D794000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: returned error - %d for activation mode(%@)", buf, 0x22u);
            }
            goto LABEL_143;
          }
          if (kAVVCScope)
          {
            id v68 = *(id *)kAVVCScope;
            if (!v68) {
              goto LABEL_148;
            }
          }
          else
          {
            id v68 = (id)MEMORY[0x1E4F14500];
            id v76 = MEMORY[0x1E4F14500];
          }
          __int16 v77 = v68;
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v78 = off_1E59657C0[v15];
            id v79 = Get4CCFromInt(v122[0]);
            int v80 = [*(id *)(a1 + 32) announceCallsEnabled];
            *(_DWORD *)AudioTimeStamp buf = 136316162;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3669;
            __int16 v160 = 2080;
            *(void *)uint64_t v161 = v78;
            *(_WORD *)&v161[8] = 2112;
            *(void *)&v161[10] = v79;
            __int16 v162 = 1024;
            LODWORD(v16AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v80;
            _os_log_impl(&dword_19D794000, v77, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext: Selected engine (%s) for activation mode (%@) with announceCallsEnabled(%d)", buf, 0x2Cu);
          }
LABEL_148:
          uint64_t v81 = *(void *)(a1 + 64);
          int v82 = *(AVVCRecordingEngineMap **)(v81 + 576);
          int v83 = *(std::__shared_weak_count **)(v81 + 584);
          if (v83) {
            atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AVVCRecordingEngineMap::listEngines(v82);
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 3321888768;
          aBlock[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_273;
          aBlock[3] = &unk_1EEFA7FD8;
          int v84 = *(std::__shared_weak_count **)(a1 + 72);
          uint64_t v142 = *(void *)(a1 + 64);
          v143 = v84;
          if (v84) {
            atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          id v140 = *(id *)(a1 + 48);
          v141 = &v147;
          int v85 = _Block_copy(aBlock);
          int v86 = isHACProduct();
          if (v15 == 4) {
            int v87 = v86;
          }
          else {
            int v87 = 0;
          }
          if (v87 == 1)
          {
            ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)buf, *(void *)(*(void *)(a1 + 64) + 576), *(std::__shared_weak_count **)(*(void *)(a1 + 64) + 584), 0x8001uLL);
            long long v88 = *(_OWORD *)buf;
            goto LABEL_172;
          }
          int v89 = v85;
          uint64_t v90 = *(void *)(a1 + 64);
          id v91 = v5;
          id v92 = *(NSString **)(v90 + 576);
          BOOL v93 = *(std::__shared_weak_count **)(v90 + 584);
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v92)
          {
            int v85 = v89;
            AVVCRecordingEngineMap::findEngine((std::__shared_weak_count **)buf, v92, v91);
            long long v94 = *(_OWORD *)buf;
LABEL_169:
            long long v120 = v94;
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }

            long long v88 = v120;
LABEL_172:
            long long v97 = v88;
            if ((void)v88)
            {
              v123[0] = MEMORY[0x1E4F143A8];
              v123[1] = 3321888768;
              v123[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_287;
              v123[3] = &unk_1EEFA8CE8;
              long long v127 = v88;
              if (*((void *)&v88 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v88 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v128 = *(void *)v122;
              id v124 = *(id *)(a1 + 32);
              float v98 = v5;
              uint64_t v100 = *(void *)(a1 + 64);
              float v99 = *(std::__shared_weak_count **)(a1 + 72);
              uint64_t v125 = v98;
              uint64_t v129 = v100;
              id v130 = v99;
              if (v99) {
                atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              id v126 = v85;
              (*(void (**)(void, void *, const char *))(*(void *)v97 + 360))(v97, v123, "setContext_block_invoke");

              if (v130) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v130);
              }

              uint64_t v101 = (std::__shared_weak_count *)*((void *)&v127 + 1);
              if (!*((void *)&v127 + 1)) {
                goto LABEL_181;
              }
              goto LABEL_180;
            }
            uint64_t v103 = *(void *)(a1 + 64);
            double v102 = *(std::__shared_weak_count **)(a1 + 72);
            uint64_t v121 = v102;
            id v104 = v85;
            if (v102)
            {
              atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v105 = *(void *)(a1 + 64);
              double v102 = *(std::__shared_weak_count **)(a1 + 72);
            }
            else
            {
              uint64_t v105 = *(void *)(a1 + 64);
            }
            id v106 = *(void **)(a1 + 40);
            v131[0] = MEMORY[0x1E4F143A8];
            v131[1] = 3321888768;
            double v132 = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_278;
            int16x8_t v133 = &unk_1EEFA3920;
            uint64_t v137 = v105;
            unsigned int v138 = v102;
            if (v102) {
              atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            id v135 = *(id *)(a1 + 48);
            id v134 = *(id *)(a1 + 32);
            id v136 = v104;
            id v117 = v106;
            id v118 = v5;
            __int16 v119 = v131;
            *(void *)uint64_t v155 = 0;
            __int16 v156 = v155;
            uint64_t v157 = 0x2020000000;
            uint64_t v158 = 0;
            if (v15 == 3)
            {
              double v108 = operator new(0x278uLL);
              v108[1] = 0;
              v108[2] = 0;
              *double v108 = &unk_1EEFA78E0;
              AVVCExternalDeviceRecordingEngine::AVVCExternalDeviceRecordingEngine((uint64_t)(v108 + 3), *(void *)(v103 + 184));
            }
            if (v15 == 1)
            {
              id v107 = operator new(0x298uLL);
              v107[1] = 0;
              v107[2] = 0;
              *id v107 = &unk_1EEFA7870;
              AVVCPluginRecordingEngine::AVVCPluginRecordingEngine((uint64_t)(v107 + 3), *(void *)(v103 + 184), *(void **)(v103 + 464));
            }
            int v85 = v104;
            int v109 = isHACProduct() ^ 1;
            if (v15 != 4) {
              LOBYTE(v109) = 1;
            }
            if ((v109 & 1) == 0)
            {
              double v110 = operator new(0x298uLL);
              v110[1] = 0;
              v110[2] = 0;
              *double v110 = &unk_1EEFA3888;
              AVVCHACRecordingEngine::AVVCHACRecordingEngine((uint64_t)(v110 + 3), *(void *)(v103 + 184));
            }
            if (v15 == 2)
            {
              *((void *)v156 + AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 1;
              uint64_t v111 = operator new(0x390uLL);
              v111[1] = 0;
              v111[2] = 0;
              void *v111 = &unk_1EEFA78A8;
              AVVCRecordingEngine::AVVCRecordingEngine((uint64_t)(v111 + 3), *(void *)(v103 + 184));
            }
            if (kAVVCScope)
            {
              OSStatus v112 = *(id *)kAVVCScope;
              unint64_t v113 = v117;
              if (!v112) {
                goto LABEL_224;
              }
            }
            else
            {
              OSStatus v112 = MEMORY[0x1E4F14500];
              id v115 = MEMORY[0x1E4F14500];
              unint64_t v113 = v117;
            }
            if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3824;
              _os_log_impl(&dword_19D794000, v112, OS_LOG_TYPE_ERROR, "%25s:%-5d _createRecordingEngineWithParameters : Fatal Error! Invalid engine type!", buf, 0x12u);
            }

LABEL_224:
            *(void *)AudioTimeStamp buf = 0;
            *(void *)&buf[8] = 0;
            v132((uint64_t)v119, (uint64_t *)buf);
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            _Block_object_dispose(v155, 8);

            if (v121) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v121);
            }

            uint64_t v101 = v138;
            if (!v138) {
              goto LABEL_181;
            }
LABEL_180:
            std::__shared_weak_count::__release_shared[abi:ne180100](v101);
LABEL_181:
            if (*((void *)&v97 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v97 + 1));
            }

            if (v143) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v143);
            }
            if (v83) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v83);
            }
            goto LABEL_187;
          }
          int v85 = v89;
          if (kAVVCScope)
          {
            char v95 = *(id *)kAVVCScope;
            if (!v95)
            {
LABEL_168:
              long long v94 = 0uLL;
              goto LABEL_169;
            }
          }
          else
          {
            char v95 = MEMORY[0x1E4F14500];
            id v96 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4130;
            _os_log_impl(&dword_19D794000, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
          }

          goto LABEL_168;
        }
      }
      else
      {
        int v26 = MEMORY[0x1E4F14500];
        id v28 = MEMORY[0x1E4F14500];
      }
      int v26 = v26;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = Get4CCFromInt(v8);
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3479;
        __int16 v160 = 2112;
        *(void *)uint64_t v161 = v29;
        *(_WORD *)&v161[8] = 2112;
        *(void *)&v161[10] = 0;
        _os_log_impl(&dword_19D794000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: %@ requested. ignoring the device id and use built in device - %@. ", buf, 0x26u);
      }
      id v27 = 0;
      LODWORD(v26) = 0;
      goto LABEL_44;
    }
    if ([v7 activationMode] == 1886352244)
    {
      if (kAVVCScope)
      {
        uint64_t v14 = *(id *)kAVVCScope;
        if (!v14)
        {
          int v15 = 0;
LABEL_60:
          LODWORD(v26) = -50;
          goto LABEL_132;
        }
      }
      else
      {
        uint64_t v14 = MEMORY[0x1E4F14500];
        id v35 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3484;
        _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext: ERROR! No recording engine associated with device for post/auto activation context", buf, 0x12u);
      }

      int v15 = 0;
      uint64_t v14 = 0;
      goto LABEL_60;
    }
    if ([v7 activationMode] == 1684108899)
    {
      id v16 = [v7 activationDeviceUID];
      if (v16)
      {
        id v17 = [v7 activationDeviceUID];
        int v18 = [v17 isEqualToString:&stru_1EEFA9548];

        if (!v18)
        {
          id v27 = [v7 activationDeviceUID];
          LODWORD(v26) = 0;
          int v15 = 3;
          goto LABEL_131;
        }
      }
      if (kAVVCScope)
      {
        id v19 = *(id *)kAVVCScope;
        if (!v19) {
          goto LABEL_119;
        }
      }
      else
      {
        id v19 = (id)MEMORY[0x1E4F14500];
        id v39 = MEMORY[0x1E4F14500];
      }
      int v40 = v19;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = Get4CCFromInt(v8);
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3493;
        __int16 v160 = 2112;
        *(void *)uint64_t v161 = v41;
        _os_log_impl(&dword_19D794000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: Darwin activation (%@) requested with nil deviceUUID", buf, 0x1Cu);
      }
      goto LABEL_119;
    }
    if (IsPluginActivationContext([v7 activationMode]))
    {
      uint64_t v31 = [v7 activationDeviceUID];
      if (v31)
      {
        id v32 = [v7 activationDeviceUID];
        int v33 = [v32 isEqualToString:&stru_1EEFA9548];

        if (!v33)
        {
          id v27 = [v7 activationDeviceUID];
          __int16 v44 = CALog::LogObjIfEnabled(3, kAVVCScope);
          int v26 = v44;
          if (v44)
          {
            unsigned int v45 = v44;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v46 = Get4CCFromInt(v8);
              *(_DWORD *)AudioTimeStamp buf = 136315906;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3513;
              __int16 v160 = 2112;
              *(void *)uint64_t v161 = v46;
              *(_WORD *)&v161[8] = 2112;
              *(void *)&v161[10] = v27;
              _os_log_impl(&dword_19D794000, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: Plugin activation (%@) requested with deviceUUID - %@. ", buf, 0x26u);
            }
          }

          LODWORD(v26) = 0;
          int v15 = 1;
          goto LABEL_131;
        }
      }
      if (kAVVCScope)
      {
        uint64_t v34 = *(id *)kAVVCScope;
        if (!v34)
        {
LABEL_118:

LABEL_119:
          id v27 = 0;
          int v15 = 0;
          LODWORD(v26) = -50;
          goto LABEL_131;
        }
      }
      else
      {
        uint64_t v34 = MEMORY[0x1E4F14500];
        id v59 = MEMORY[0x1E4F14500];
      }
      uint64_t v34 = v34;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        int v60 = Get4CCFromInt(v8);
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3504;
        __int16 v160 = 2112;
        *(void *)uint64_t v161 = v60;
        _os_log_impl(&dword_19D794000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: Plugin activation (%@) requested with nil deviceUUID", buf, 0x1Cu);
      }
      goto LABEL_118;
    }
    *(void *)uint64_t v155 = 1936289391;
    unsigned __int8 v154 = 0;
    uint64_t v36 = [v7 activationMode];
    uint64_t v37 = v36;
    id v153 = 0;
    if (v36 <= 1969840751)
    {
      if (v36 != 1684628340)
      {
        uint64_t v38 = 1752132965;
        goto LABEL_72;
      }
    }
    else if (v36 != 1969840752)
    {
      if (v36 == 1986357346)
      {
        int v114 = supportsCarPlayAuxStream();
        __int16 v42 = (id *)kAVVCScope;
        if (v114)
        {
LABEL_74:
          if (v42)
          {
            id v43 = *v42;
            if (!v43)
            {
LABEL_86:
              id v48 = ControllerImpl::sessionManagerForStreamID(v6, 0, 0);
              [v48 getSiriInputSource:v155 withIdentifier:&v153 withIsMicrophoneCheck:&v154 forActivationMode:v37];

              if (kAVVCScope)
              {
                id v49 = *(id *)kAVVCScope;
                if (!v49) {
                  goto LABEL_94;
                }
              }
              else
              {
                id v49 = (id)MEMORY[0x1E4F14500];
                id v50 = MEMORY[0x1E4F14500];
              }
              id v51 = v49;
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v52 = Get4CCFromInt(v155[0]);
                *(_DWORD *)AudioTimeStamp buf = 136316162;
                *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 712;
                __int16 v160 = 2112;
                *(void *)uint64_t v161 = v52;
                *(_WORD *)&v161[8] = 2112;
                *(void *)&v161[10] = v153;
                __int16 v162 = 1024;
                LODWORD(v16AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v154;
                _os_log_impl(&dword_19D794000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getDeviceUIDForHomeOrBluetoothButtonActivation: siriInputSource(%@), siriRemoteInputIdentifier(%@), isMicrophoneBuiltIn(%d)", buf, 0x2Cu);
              }
              goto LABEL_93;
            }
          }
          else
          {
            id v43 = MEMORY[0x1E4F14500];
            id v47 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 707;
            _os_log_impl(&dword_19D794000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getDeviceUIDForHomeOrBluetoothButtonActivation: Context is ambiguous", buf, 0x12u);
          }

          goto LABEL_86;
        }
        goto LABEL_217;
      }
      uint64_t v38 = 2003329648;
LABEL_72:
      if (v36 == v38) {
        goto LABEL_73;
      }
      __int16 v42 = (id *)kAVVCScope;
LABEL_217:
      if (v42)
      {
        id v51 = *v42;
        if (!v51)
        {
LABEL_94:
          id v27 = v153;
          if (*(uint64_t *)v155 > 1936290659)
          {
            if (*(void *)v155 != 1936290660)
            {
              if (*(void *)v155 == 1936679529)
              {
                int v15 = 1;
                goto LABEL_123;
              }
              goto LABEL_113;
            }
          }
          else
          {
            if (*(void *)v155 == 1936024681)
            {
              if (*(void *)(v6 + 184) == 1) {
                int v15 = 3;
              }
              else {
                int v15 = 2;
              }
              goto LABEL_123;
            }
            if (*(void *)v155 != 1936286822)
            {
LABEL_113:
              int v15 = 2;
              goto LABEL_123;
            }
          }
          int v53 = v154;
          int v54 = isHACProduct() ^ 1;
          if (!v53) {
            LOBYTE(v54) = 1;
          }
          if ((v54 & 1) != 0 || *(void *)(v6 + 184) != 1)
          {
            id v57 = CALog::LogObjIfEnabled(3, kAVVCScope);
            uint64_t v58 = v57;
            if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315394;
              *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3600;
              _os_log_impl(&dword_19D794000, v58, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: AQ engine selected", buf, 0x12u);
            }

            goto LABEL_113;
          }
          uint64_t v55 = CALog::LogObjIfEnabled(3, kAVVCScope);
          __int16 v56 = v55;
          if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3594;
            _os_log_impl(&dword_19D794000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: HAC engine selected", buf, 0x12u);
          }

          int v15 = 4;
LABEL_123:
          if (kAVVCScope)
          {
            id v61 = *(id *)kAVVCScope;
            if (!v61)
            {
LABEL_130:
              LODWORD(v26) = 0;
              goto LABEL_131;
            }
          }
          else
          {
            id v61 = (id)MEMORY[0x1E4F14500];
            id v62 = MEMORY[0x1E4F14500];
          }
          __int16 v63 = v61;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v64 = Get4CCFromInt(v8);
            id v65 = off_1E59657A0[v15 - 1];
            *(_DWORD *)AudioTimeStamp buf = 136316162;
            *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3618;
            __int16 v160 = 2112;
            *(void *)uint64_t v161 = v64;
            *(_WORD *)&v161[8] = 2112;
            *(void *)&v161[10] = v27;
            __int16 v162 = 2080;
            int v163 = v65;
            _os_log_impl(&dword_19D794000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext:getEngineTypeAndDeviceIDToUse: ActivationMode (%@) requested with deviceUUID (%@). Selected EngineType (%s)", buf, 0x30u);
          }
          goto LABEL_130;
        }
      }
      else
      {
        id v51 = MEMORY[0x1E4F14500];
        id v116 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 715;
        _os_log_impl(&dword_19D794000, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getDeviceUIDForHomeOrBluetoothButtonActivation: Context is not ambiguous", buf, 0x12u);
      }
LABEL_93:

      goto LABEL_94;
    }
LABEL_73:
    __int16 v42 = (id *)kAVVCScope;
    goto LABEL_74;
  }
  uint64_t v3 = *(void **)(a1 + 48);
  BOOL v4 = v3 != 0;
  v151[0] = MEMORY[0x1E4F143A8];
  v151[1] = 3221225472;
  v151[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_2;
  v151[3] = &unk_1E5965A18;
  __int16 v152 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v2, v4, v151);
  id v5 = v152;
LABEL_188:
}

void sub_19D84BB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11780 userInfo:0];
  (*(void (**)(uint64_t, void, void))(v1 + 16))(v1, 0, 0);
}

void sub_19D84BEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_272(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) userInfo:0];
  (*(void (**)(uint64_t, void, void))(v1 + 16))(v1, 0, 0);
}

void sub_19D84BF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_273(void *a1, void **a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (*a2) {
    goto LABEL_10;
  }
  if (kAVVCScope)
  {
    id v5 = *(id *)kAVVCScope;
    if (!v5) {
      goto LABEL_9;
    }
  }
  else
  {
    id v5 = MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    id v20 = "ControllerImpl.mm";
    __int16 v21 = 1024;
    int v22 = 3677;
    _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d setContext: Engine lookup returned nil!", buf, 0x12u);
  }

LABEL_9:
  uint64_t v3 = *a2;
  if (!*a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v7 = v3[34];
  uint64_t v8 = (*(unsigned int (**)(void *))(*v3 + 320))(v3);
LABEL_11:
  uint64_t v9 = a1[6];
  char v10 = (void *)a1[4];
  BOOL v11 = v10 != 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_274;
  v14[3] = &unk_1E59650D0;
  id v12 = v10;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  uint64_t v13 = a1[5];
  id v15 = v12;
  uint64_t v16 = v13;
  ControllerImpl::safeNotifyAlwaysAsync(v9, v11, v14);
}

void sub_19D84C15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_278(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3321888768;
    uint64_t v11[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_3;
    id v11[3] = &unk_1EEFA8708;
    BOOL v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v14 = v3;
    id v15 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v5 = *(id *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 56);
    id v6 = *(std::__shared_weak_count **)(a1 + 64);
    id v12 = v5;
    uint64_t v16 = v7;
    uint64_t v17 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v13 = *(id *)(a1 + 48);
    (*(void (**)(uint64_t, void *, const char *))(*(void *)v3 + 360))(v3, v11, "setContext_block_invoke");

    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }

    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void **)(a1 + 40);
    BOOL v10 = v9 != 0;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    _OWORD v18[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_2_279;
    void v18[3] = &unk_1E5965A18;
    id v19 = v9;
    ControllerImpl::safeNotifyAlwaysAsync(v8, v10, v18);
  }
}

void sub_19D84C31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_287(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(v2 + 280) = *(void *)(a1 + 72);
  AVVCRecordingEngine::setActivationContextSettings((AVVCRecordingEngine *)v2, *(AVVCContextSettings **)(a1 + 32));
  if (!kAVVCScope)
  {
    id v3 = (id)MEMORY[0x1E4F14500];
    id v4 = MEMORY[0x1E4F14500];
LABEL_5:
    id v5 = v3;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
LABEL_19:

      goto LABEL_20;
    }
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v6)
      {
        uint64_t v8 = NSString;
        uint64_t v9 = *(void *)(v6 + 272);
        uint64_t v10 = v7->__shared_owners_ + 1;
LABEL_11:
        BOOL v11 = [v8 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v6, v9, v10];
LABEL_13:
        id v12 = v11;
        unsigned int v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 320))(*(void *)(a1 + 56));
        if (v13 > 4) {
          uint64_t v14 = "ILLEGAL";
        }
        else {
          uint64_t v14 = off_1E59657C0[v13];
        }
        id v15 = Get4CCFromInt(*(_DWORD *)(a1 + 72));
        uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 272);
        uint64_t v17 = *(void *)(a1 + 40);
        *(_DWORD *)AudioTimeStamp buf = 136316674;
        id v27 = "ControllerImpl.mm";
        __int16 v28 = 1024;
        int v29 = 3746;
        __int16 v30 = 2112;
        uint64_t v31 = v12;
        __int16 v32 = 2080;
        int v33 = v14;
        __int16 v34 = 2112;
        id v35 = v15;
        __int16 v36 = 2112;
        uint64_t v37 = v17;
        __int16 v38 = 2048;
        uint64_t v39 = v16;
        _os_log_impl(&dword_19D794000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found matching engine[%@] of type(%s) for activation mode(%@) and deviceUID(%@) with streamHandle(%lu)", buf, 0x44u);

        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }

        goto LABEL_19;
      }
    }
    else if (v6)
    {
      uint64_t v10 = 0;
      uint64_t v8 = NSString;
      uint64_t v9 = *(void *)(v6 + 272);
      goto LABEL_11;
    }
    BOOL v11 = @"(0x0) use_count:0";
    goto LABEL_13;
  }
  id v3 = *(id *)kAVVCScope;
  if (v3) {
    goto LABEL_5;
  }
LABEL_20:
  uint64_t v18 = *(void *)(a1 + 80);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3321888768;
  v22[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_288;
  v22[3] = &unk_1EEFA7CB0;
  id v19 = *(id *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 56);
  id v20 = *(std::__shared_weak_count **)(a1 + 64);
  id v23 = v19;
  uint64_t v24 = v21;
  id v25 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ControllerImpl::safeWork(v18, v22, (uint64_t)"setContext_block_invoke");
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_19D84C638(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE80c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[11];
  result[10] = a2[10];
  result[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_288(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19D84C770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  AVVCRecordingEngine::setRecordDeviceUID(*(AVVCRecordingEngine **)(*(void *)(a1 + 64) + 376), *(NSString **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(v2 + 280) = *(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 108))
  {
    *(void *)(v2 + 272) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3321888768;
    v28[2] = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_293;
    v28[3] = &unk_1EEFA7A60;
    uint64_t v4 = *(void *)(a1 + 88);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
    uint64_t v33 = v4;
    __int16 v34 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v31 = *(id *)(a1 + 48);
    id v5 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 72);
    id v29 = v5;
    uint64_t v35 = v7;
    __int16 v36 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(a1 + 56);
    int v38 = *(_DWORD *)(a1 + 104);
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v32 = v8;
    uint64_t v37 = v9;
    id v30 = *(id *)(a1 + 32);
    ControllerImpl::safeWork(v4, v28, (uint64_t)"_createRecordingEngineWithParameters_block_invoke");

    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }

    uint64_t v10 = v34;
    if (!v34) {
      return;
    }
LABEL_33:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    return;
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(void *)(v2 + 272);
  if (kAVVCScope)
  {
    id v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_29;
    }
  }
  else
  {
    id v11 = (id)MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  unsigned int v13 = v11;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(unsigned int *)(a1 + 104);
    if (v14 > 4) {
      id v15 = "ILLEGAL";
    }
    else {
      id v15 = off_1E59657C0[v14];
    }
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 72);
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v16)
      {
        uint64_t v18 = NSString;
        uint64_t v19 = *(void *)(v16 + 272);
        uint64_t v20 = v17->__shared_owners_ + 1;
LABEL_23:
        uint64_t v21 = [v18 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v16, v19, v20];
LABEL_25:
        int v22 = v21;
        id v23 = Get4CCFromInt(*(_DWORD *)(a1 + 80));
        uint64_t v24 = *(void *)(a1 + 32);
        uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
        *(_DWORD *)AudioTimeStamp buf = 136316674;
        __int16 v42 = "ControllerImpl.mm";
        __int16 v43 = 1024;
        int v44 = 3838;
        __int16 v45 = 2080;
        uint64_t v46 = v15;
        __int16 v47 = 2112;
        id v48 = v22;
        __int16 v49 = 2112;
        id v50 = v23;
        __int16 v51 = 2112;
        uint64_t v52 = v24;
        __int16 v53 = 2048;
        uint64_t v54 = v25;
        _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext: Reusing (%s) engine[%@] for activation mode(%@) and deviceUID(%@) with streamHandle(%lu)", buf, 0x44u);

        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }

        goto LABEL_28;
      }
    }
    else if (v16)
    {
      uint64_t v20 = 0;
      uint64_t v18 = NSString;
      uint64_t v19 = *(void *)(v16 + 272);
      goto LABEL_23;
    }
    uint64_t v21 = @"(0x0) use_count:0";
    goto LABEL_25;
  }
LABEL_28:

LABEL_29:
  uint64_t v26 = *(void *)(a1 + 48);
  if (v26)
  {
    id v27 = *(std::__shared_weak_count **)(a1 + 72);
    uint64_t v39 = *(void *)(a1 + 64);
    uint64_t v40 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(v26 + 16))(v26, &v39);
    uint64_t v10 = v40;
    if (v40) {
      goto LABEL_33;
    }
  }
}

void sub_19D84CB08(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_64c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE88c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_64c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE88c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[12];
  result[11] = a2[11];
  result[12] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_293(uint64_t a1)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 64);
  if (!*(unsigned char *)(v2 + 520))
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 80);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v8 = v5;
    objc_initWeak(&location, v8);
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v85, *(void *)(v2 + 8), *(std::__shared_weak_count **)(v2 + 16));
    uint64_t v9 = v85;
    uint64_t v10 = (std::__shared_weak_count *)v86;
    if (v86)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 16), 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke;
    aBlock[3] = &unk_1EEFA7DC0;
    objc_copyWeak(v94, &location);
    v94[1] = v9;
    char v95 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = _Block_copy(aBlock);
    int v85 = (void *)MEMORY[0x1E4F143A8];
    uint64_t v86 = 3321888768;
    int v87 = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_305;
    long long v88 = &unk_1EEFA8548;
    objc_copyWeak(v89, &location);
    v89[1] = v9;
    uint64_t v90 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    id v91 = v7;
    id v92 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = _Block_copy(&v85);
    v80[0] = MEMORY[0x1E4F143A8];
    v80[1] = 3321888768;
    v80[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_309;
    v80[3] = &unk_1EEFA8548;
    objc_copyWeak(v81, &location);
    v81[1] = v9;
    int v82 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v83 = v7;
    int v84 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v27 = _Block_copy(v80);
    AVVCRecordingEngine::setStartRecordCompletionAndAudioCallbackBlocks((uint64_t)v7, v26, v25);
    AVVCRecordingEngine::setStopRecordCompletionBlock((uint64_t)v7, v27);
    if ((*(unsigned int (**)(void *))(*v7 + 320))(v7) == 2)
    {
      v77[0] = MEMORY[0x1E4F143A8];
      v77[1] = 3321888768;
      v77[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_312;
      v77[3] = &unk_1EEFA7E30;
      objc_copyWeak(v78, &location);
      v78[1] = v9;
      id v79 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      AVVCRecordingEngine::setEncoderErrorBlock((uint64_t)v7, v77);
      if (v79) {
        std::__shared_weak_count::__release_weak(v79);
      }
      objc_destroyWeak(v78);
    }
    if ((*(unsigned int (**)(void *))(*v7 + 320))(v7) == 2)
    {
      uint64_t v70 = MEMORY[0x1E4F143A8];
      uint64_t v71 = 3321888768;
      id v72 = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_317;
      uint64_t v73 = &unk_1EEFA7D88;
      objc_copyWeak(&v74, &location);
      BOOL v75 = v9;
      id v76 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      if ((*(unsigned int (**)(void *))(*v7 + 320))(v7) != 1) {
        goto LABEL_36;
      }
      uint64_t v70 = MEMORY[0x1E4F143A8];
      uint64_t v71 = 3321888768;
      id v72 = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_322;
      uint64_t v73 = &unk_1EEFA7D88;
      objc_copyWeak(&v74, &location);
      BOOL v75 = v9;
      id v76 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
    }
    AVVCRecordingEngine::setSetupEndpointerBlock((uint64_t)v7, &v70);
    if (v76) {
      std::__shared_weak_count::__release_weak(v76);
    }
    objc_destroyWeak(&v74);
LABEL_36:
    v67[0] = MEMORY[0x1E4F143A8];
    v67[1] = 3321888768;
    v67[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_323;
    v67[3] = &unk_1EEFA3B08;
    objc_copyWeak(v68, &location);
    v68[1] = v9;
    id v69 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngine::setCheckForEndpointBlock((uint64_t)v7, v67);
    v62[0] = MEMORY[0x1E4F143A8];
    v62[1] = 3321888768;
    v62[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_327;
    v62[3] = &unk_1EEFA8580;
    objc_copyWeak(v63, &location);
    v63[1] = v9;
    __int16 v64 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    id v65 = v7;
    __int16 v66 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngine::setStopRecordWithRecordLockBlock((uint64_t)v7, v62);
    v57[0] = MEMORY[0x1E4F143A8];
    v57[1] = 3321888768;
    v57[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_331;
    id v57[3] = &unk_1EEFA8580;
    objc_copyWeak(v58, &location);
    v58[1] = v9;
    id v59 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v60 = v7;
    id v61 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngine::setDestroyRecordEngineWithRecordLockBlock((uint64_t)v7, v57);
    v52[0] = MEMORY[0x1E4F143A8];
    v52[1] = 3321888768;
    v52[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_332;
    v52[3] = &unk_1EEFA8580;
    objc_copyWeak(v53, &location);
    v53[1] = v9;
    uint64_t v54 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v55 = v7;
    __int16 v56 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngine::setReconfigureWithRecordLockBlock((uint64_t)v7, v52);
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3321888768;
    v49[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_333;
    v49[3] = &unk_1EEFA7E68;
    objc_copyWeak(v50, &location);
    v50[1] = v9;
    __int16 v51 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngine::setStreamInvalidatedBlock((uint64_t)v7, v49);
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3321888768;
    v46[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_339;
    v46[3] = &unk_1EEFA7E30;
    objc_copyWeak(v47, &location);
    v47[1] = v9;
    id v48 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngine::setHardwareConfigChangedBlock((uint64_t)v7, v46);
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 3321888768;
    v43[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_342;
    v43[3] = &unk_1EEFA7DF8;
    objc_copyWeak(v44, &location);
    v44[1] = v9;
    __int16 v45 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngine::setBeginSessionActivateBlock((uint64_t)v7, v43);
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3321888768;
    v40[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_347;
    v40[3] = &unk_1EEFA7DF8;
    objc_copyWeak(v41, &location);
    v41[1] = v9;
    __int16 v42 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngine::setEndSessionActivateBlock((uint64_t)v7, v40);
    if (kAVVCScope)
    {
      id v11 = *(id *)kAVVCScope;
      if (!v11) {
        goto LABEL_70;
      }
    }
    else
    {
      id v11 = (id)MEMORY[0x1E4F14500];
      id v12 = MEMORY[0x1E4F14500];
    }
    unsigned int v13 = v11;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v14 = NSString;
        uint64_t v15 = v7[34];
        uint64_t v16 = v6->__shared_owners_ + 1;
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v14 = NSString;
        uint64_t v15 = v7[34];
      }
      id v17 = [v14 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v7, v15, v16];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      float v98 = "ControllerImpl.mm";
      __int16 v99 = 1024;
      int v100 = 4031;
      __int16 v101 = 2112;
      id v102 = v17;
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configured completion blocks for engine[%@]", buf, 0x1Cu);

      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
LABEL_70:
    if (v42) {
      std::__shared_weak_count::__release_weak(v42);
    }
    objc_destroyWeak(v41);
    if (v45) {
      std::__shared_weak_count::__release_weak(v45);
    }
    objc_destroyWeak(v44);
    if (v48) {
      std::__shared_weak_count::__release_weak(v48);
    }
    objc_destroyWeak(v47);
    if (v51) {
      std::__shared_weak_count::__release_weak(v51);
    }
    objc_destroyWeak(v50);
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    if (v54) {
      std::__shared_weak_count::__release_weak(v54);
    }
    objc_destroyWeak(v53);
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    if (v59) {
      std::__shared_weak_count::__release_weak(v59);
    }
    objc_destroyWeak(v58);
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
    if (v64) {
      std::__shared_weak_count::__release_weak(v64);
    }
    objc_destroyWeak(v63);
    if (v69) {
      std::__shared_weak_count::__release_weak(v69);
    }
    objc_destroyWeak(v68);

    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
    if (v82) {
      std::__shared_weak_count::__release_weak(v82);
    }
    objc_destroyWeak(v81);

    if (v92) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v92);
    }
    if (v90) {
      std::__shared_weak_count::__release_weak(v90);
    }
    objc_destroyWeak(v89);

    if (v95) {
      std::__shared_weak_count::__release_weak(v95);
    }
    objc_destroyWeak(v94);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    objc_destroyWeak(&location);

    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v18 = *(void **)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 64);
    unint64_t v21 = *(void *)(*(void *)(v19 + 8) + 24);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3321888768;
    v28[2] = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_2;
    v28[3] = &unk_1EEFA7980;
    int v22 = *(std::__shared_weak_count **)(a1 + 72);
    uint64_t v32 = v20;
    uint64_t v33 = v22;
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = *(void *)(a1 + 56);
    }
    uint64_t v24 = *(void *)(a1 + 80);
    id v23 = *(std::__shared_weak_count **)(a1 + 88);
    uint64_t v31 = v19;
    uint64_t v34 = v24;
    uint64_t v35 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v37 = *(_DWORD *)(a1 + 104);
    uint64_t v36 = *(void *)(a1 + 96);
    id v29 = *(id *)(a1 + 40);
    id v30 = *(id *)(a1 + 48);
    ControllerImpl::_removeEngineFromMap(v20, v18, v21, 0, v28);

    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    uint64_t v4 = v33;
    if (v33) {
      goto LABEL_4;
    }
    return;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    (*(void (**)(uint64_t, uint64_t *))(v3 + 16))(v3, &v38);
    uint64_t v4 = v39;
    if (v39) {
LABEL_4:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_19D84D858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *a13, id *a14, id *a15, id *a16, id *a17, id *a18, id *a19, id *location,void *a21,void *a22,void *a23)
{
  if (STACK[0x310]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x310]);
  }
  objc_destroyWeak(v24);

  if (STACK[0x390]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x390]);
  }
  if (STACK[0x380]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x380]);
  }
  objc_destroyWeak(location);

  if (STACK[0x3D8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3D8]);
  }
  if (STACK[0x3C8]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3C8]);
  }
  objc_destroyWeak(a19);

  id v29 = *(std::__shared_weak_count **)(v27 - 176);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  objc_destroyWeak(a18);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  objc_destroyWeak((id *)(v27 - 168));

  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE80c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE80c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[11];
  result[10] = a2[10];
  result[11] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_2(uint64_t a1)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3321888768;
  void v6[2] = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_3;
  v6[3] = &unk_1EEFA7980;
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v10 = v3;
  id v11 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v12 = v5;
  unsigned int v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = *(_DWORD *)(a1 + 96);
  uint64_t v14 = *(void *)(a1 + 88);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  ControllerImpl::safeWork(v3, v6, (uint64_t)"_createRecordingEngineWithParameters_block_invoke");

  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_19D84DC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE72c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_3(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void *)(a1 + 72);
    id v7 = *(std::__shared_weak_count **)(a1 + 80);
  }
  else
  {
    id v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3321888768;
  id v17 = ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_4;
  uint64_t v18 = &unk_1EEFA89A8;
  int v24 = *(_DWORD *)(a1 + 96);
  uint64_t v21 = v8;
  int v22 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *(void *)(a1 + 88);
  id v19 = *(id *)(a1 + 32);
  long long v15 = *(_OWORD *)(a1 + 40);
  id v9 = (id)v15;
  long long v20 = v15;
  uint64_t v10 = v16;
  id v11 = *(void ***)(v3 + 576);
  uint64_t v12 = *(std::__shared_weak_count **)(v3 + 584);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11)
  {
    *(void *)AudioTimeStamp buf = v6;
    *(void *)&buf[8] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AVVCRecordingEngineMap::insertEngine(v11, v4, (long long *)buf);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    if (kAVVCScope)
    {
      unsigned int v13 = *(id *)kAVVCScope;
      if (!v13) {
        goto LABEL_22;
      }
    }
    else
    {
      unsigned int v13 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4041;
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Engine Map does not exist", buf, 0x12u);
    }
  }
LABEL_22:
  v17((uint64_t)v10);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }

  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_19D84DF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }

  if (a20)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
    if (!v21)
    {
LABEL_7:
      if (!v20) {
LABEL_12:
      }
        _Unwind_Resume(a1);
LABEL_11:
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      goto LABEL_12;
    }
  }
  else if (!v21)
  {
    goto LABEL_7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (!v20) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void ___ZN14ControllerImpl36_createRecordingEngineWithParametersENSt3__110shared_ptrIS_EEP17AVVoiceControllerN19AVVCRecordingEngine10EngineTypeEP8NSStringlU13block_pointerFvNS1_IS5_EEE_block_invoke_4(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!kAVVCScope)
  {
    id v2 = (id)MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
LABEL_5:
    unint64_t v4 = v2;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
LABEL_19:

      goto LABEL_20;
    }
    uint64_t v5 = *(unsigned int *)(a1 + 80);
    if (v5 > 4) {
      uint64_t v6 = "ILLEGAL";
    }
    else {
      uint64_t v6 = off_1E59657C0[v5];
    }
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v7)
      {
        id v9 = NSString;
        uint64_t v10 = *(void *)(v7 + 272);
        uint64_t v11 = v8->__shared_owners_ + 1;
LABEL_14:
        uint64_t v12 = [v9 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v7, v10, v11];
LABEL_16:
        unsigned int v13 = v12;
        id v14 = Get4CCFromInt(*(_DWORD *)(a1 + 72));
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        *(_DWORD *)AudioTimeStamp buf = 136316674;
        int v22 = "ControllerImpl.mm";
        __int16 v23 = 1024;
        int v24 = 3858;
        __int16 v25 = 2080;
        uint64_t v26 = v6;
        __int16 v27 = 2112;
        __int16 v28 = v13;
        __int16 v29 = 2112;
        id v30 = v14;
        __int16 v31 = 2112;
        uint64_t v32 = v15;
        __int16 v33 = 2048;
        uint64_t v34 = v16;
        _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setContext: Created new (%s) engine[%@] for activation mode(%@) and deviceUID(%@) with streamHandle(%lu)", buf, 0x44u);

        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }

        goto LABEL_19;
      }
    }
    else if (v7)
    {
      uint64_t v11 = 0;
      id v9 = NSString;
      uint64_t v10 = *(void *)(v7 + 272);
      goto LABEL_14;
    }
    uint64_t v12 = @"(0x0) use_count:0";
    goto LABEL_16;
  }
  id v2 = *(id *)kAVVCScope;
  if (v2) {
    goto LABEL_5;
  }
LABEL_20:
  uint64_t v17 = *(void *)(a1 + 40);
  if (v17)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 56);
    long long v20 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(v17 + 16))(v17, &v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
}

void sub_19D84E258(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 48);
  if (v11)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 40);
      if (WeakRetained && v13)
      {
        id v14 = (id *)(v13 + 168);
        id v15 = objc_loadWeakRetained(v14);

        if (!v15) {
          goto LABEL_20;
        }
        id v16 = objc_loadWeakRetained(v14);
        int v17 = objc_opt_respondsToSelector() & a4;

        if (v17 != 1)
        {
LABEL_27:
          id v23 = objc_loadWeakRetained(v14);
          int v24 = objc_opt_respondsToSelector();

          if ((v24 & a5) != 0)
          {
            if (kAVVCScope)
            {
              __int16 v25 = *(id *)kAVVCScope;
              if (!v25)
              {
LABEL_35:
                id v27 = objc_loadWeakRetained(v14);
                [v27 voiceControllerAudioCallback:WeakRetained forStream:a2 buffer:v9];

                goto LABEL_20;
              }
            }
            else
            {
              __int16 v25 = MEMORY[0x1E4F14500];
              id v26 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              int v28 = 136315394;
              __int16 v29 = "ControllerImpl.mm";
              __int16 v30 = 1024;
              int v31 = 3888;
              _os_log_impl(&dword_19D794000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling (v2) voiceControllerAudioCallback:forStream:buffer:", (uint8_t *)&v28, 0x12u);
            }

            goto LABEL_35;
          }
LABEL_20:
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          goto LABEL_21;
        }
        if (kAVVCScope)
        {
          uint64_t v18 = *(id *)kAVVCScope;
          if (!v18)
          {
LABEL_26:
            id v22 = objc_loadWeakRetained(v14);
            [v22 voiceControllerLPCMAudioCallback:WeakRetained forStream:a2 buffer:v9];

            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v18 = MEMORY[0x1E4F14500];
          id v21 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          int v28 = 136315394;
          __int16 v29 = "ControllerImpl.mm";
          __int16 v30 = 1024;
          int v31 = 3884;
          _os_log_impl(&dword_19D794000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d calling (v2) voiceControllerLPCMAudioCallback:forStream:buffer:", (uint8_t *)&v28, 0x12u);
        }

        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  if (kAVVCScope)
  {
    uint64_t v19 = *(id *)kAVVCScope;
    if (!v19) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v19 = MEMORY[0x1E4F14500];
    id v20 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    int v28 = 136315906;
    __int16 v29 = "ControllerImpl.mm";
    __int16 v30 = 1024;
    int v31 = 3880;
    __int16 v32 = 2048;
    id v33 = WeakRetained;
    __int16 v34 = 2048;
    uint64_t v35 = v13;
    _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", (uint8_t *)&v28, 0x26u);
  }

LABEL_19:
  if (v12) {
    goto LABEL_20;
  }
LABEL_21:
}

void sub_19D84E5D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_305(uint64_t a1)
{
  *(void *)&v19[9] = *MEMORY[0x1E4F143B8];
  id v2 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (WeakRetained && v6)
  {
    uint64_t v7 = (void *)MEMORY[0x19F3AC180]();
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(void **)(v8 + 272);
    int v11 = *(_DWORD *)(v8 + 232);
    v17[0] = (AVVCRecordingEngine *)v8;
    v17[1] = (AVVCRecordingEngine *)v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    ControllerImpl::startKeepAliveQueue(*(void *)(v6 + 8), *(std::__shared_weak_count **)(v6 + 16), v17);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
    }
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_307;
    v14[3] = &unk_1E5965148;
    objc_copyWeak(v15, v2);
    v15[1] = v10;
    int v16 = v11;
    ControllerImpl::safeNotify(v6, (uint64_t)"beganRecording", v14);
    objc_destroyWeak(v15);
    *(_DWORD *)AudioTimeStamp buf = 4115;
    LOBYTE(v19[0]) = 0;
    memset(&v19[1], 0, 32);
    kdebug_trace();
    TraceWrapper::~TraceWrapper((TraceWrapper *)buf);
    goto LABEL_20;
  }
LABEL_12:
  if (kAVVCScope)
  {
    uint64_t v12 = *(id *)kAVVCScope;
    if (!v12) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F14500];
    id v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)uint64_t v19 = "ControllerImpl.mm";
    LOWORD(v19[2]) = 1024;
    *(_DWORD *)((char *)&v19[2] + 2) = 3896;
    HIWORD(v19[3]) = 2048;
    *(void *)&v19[4] = WeakRetained;
    LOWORD(v19[6]) = 2048;
    *(void *)((char *)&v19[6] + 2) = v6;
    _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_19:
  if (v5) {
LABEL_20:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_19D84E878(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_309(uint64_t a1)
{
  *(void *)&v17[9] = *MEMORY[0x1E4F143B8];
  id v2 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
  {
LABEL_7:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (WeakRetained && v6)
  {
    uint64_t v7 = (void *)MEMORY[0x19F3AC180]();
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void **)(v8 + 272);
    int v10 = *(_DWORD *)(v8 + 232);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    id v13[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_311;
    unsigned char v13[3] = &unk_1E5965148;
    objc_copyWeak(v14, v2);
    v14[1] = v9;
    int v15 = v10;
    ControllerImpl::safeNotify(v6, (uint64_t)"finishedRecording", v13);
    objc_destroyWeak(v14);
    *(_DWORD *)AudioTimeStamp buf = 4116;
    LOBYTE(v17[0]) = 0;
    memset(&v17[1], 0, 32);
    kdebug_trace();
    TraceWrapper::~TraceWrapper((TraceWrapper *)buf);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    int v11 = *(id *)kAVVCScope;
    if (!v11) {
      goto LABEL_15;
    }
  }
  else
  {
    int v11 = MEMORY[0x1E4F14500];
    id v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)int v17 = "ControllerImpl.mm";
    LOWORD(v17[2]) = 1024;
    *(_DWORD *)((char *)&v17[2] + 2) = 3922;
    HIWORD(v17[3]) = 2048;
    *(void *)&void v17[4] = WeakRetained;
    LOWORD(v17[6]) = 2048;
    *(void *)((char *)&v17[6] + 2) = v6;
    _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_15:
  if (v5) {
    goto LABEL_16;
  }
LABEL_17:
}

void sub_19D84EAE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_312(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
  {
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (WeakRetained && v7)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_314;
    v10[3] = &unk_1E5965170;
    id v11 = WeakRetained;
    int v12 = a2;
    ControllerImpl::safeNotify(v7, (uint64_t)"encodeError", v10);

LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    uint64_t v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    id v14 = "ControllerImpl.mm";
    __int16 v15 = 1024;
    int v16 = 3948;
    __int16 v17 = 2048;
    id v18 = WeakRetained;
    __int16 v19 = 2048;
    uint64_t v20 = v7;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_15:
  if (v6) {
    goto LABEL_16;
  }
LABEL_17:
}

void sub_19D84ECDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_317(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v7)
  {
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
  {
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (WeakRetained && v9)
  {
    id v10 = objc_loadWeakRetained((id *)(v9 + 416));

    if (a3 == 1936745848 && !v10)
    {
      id v11 = objc_alloc_init(SpeexEndpointer);
      ControllerImpl::setEndpointerDelegate(v9, WeakRetained, v11, a2);
    }
    goto LABEL_18;
  }
LABEL_10:
  if (kAVVCScope)
  {
    int v12 = *(id *)kAVVCScope;
    if (!v12) {
      goto LABEL_17;
    }
  }
  else
  {
    int v12 = MEMORY[0x1E4F14500];
    id v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315906;
    __int16 v15 = "ControllerImpl.mm";
    __int16 v16 = 1024;
    int v17 = 3958;
    __int16 v18 = 2048;
    id v19 = WeakRetained;
    __int16 v20 = 2048;
    uint64_t v21 = v9;
    _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", (uint8_t *)&v14, 0x26u);
  }

LABEL_17:
  if (v8) {
LABEL_18:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_19D84EEA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_322(uint64_t a1, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
  {
    uint64_t v6 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
  {
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = *(ControllerImpl **)(a1 + 40);
  if (WeakRetained && v7)
  {
    ControllerImpl::setupEndpointer(v7, a2);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    uint64_t v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    int v10 = 136315906;
    id v11 = "ControllerImpl.mm";
    __int16 v12 = 1024;
    int v13 = 3966;
    __int16 v14 = 2048;
    id v15 = WeakRetained;
    __int16 v16 = 2048;
    int v17 = v7;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", (uint8_t *)&v10, 0x26u);
  }

LABEL_15:
  if (v6) {
    goto LABEL_16;
  }
LABEL_17:
}

void sub_19D84F024(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

BOOL ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_323(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v11 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v11)
  {
    __int16 v12 = 0;
    goto LABEL_23;
  }
  __int16 v12 = std::__shared_weak_count::lock(v11);
  if (!v12)
  {
LABEL_23:
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  uint64_t v13 = *(void *)(a1 + 40);
  if (!WeakRetained || !v13)
  {
LABEL_24:
    if (kAVVCScope)
    {
      id v23 = *(id *)kAVVCScope;
      if (!v23) {
        goto LABEL_31;
      }
    }
    else
    {
      id v23 = MEMORY[0x1E4F14500];
      id v24 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3972;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = WeakRetained;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = v13;
      _os_log_impl(&dword_19D794000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
    }

LABEL_31:
    BOOL v25 = 0;
    BOOL v26 = 0;
    if (!v12) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  id v14 = WeakRetained;
  if (kAVVCScope)
  {
    if ((*(unsigned char *)(kAVVCScope + 12) & 0x20) != 0)
    {
      id v15 = *(id *)kAVVCScope;
      if (v15)
      {
        __int16 v16 = v15;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2855;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = a2;
          _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d checkForEndpoint entered: inBuffer %p", buf, 0x1Cu);
        }
      }
    }
  }
  id v17 = objc_loadWeakRetained((id *)(v13 + 416));
  BOOL v18 = v17 == 0;

  if (v18) {
    goto LABEL_38;
  }
  if (*(unsigned char *)(v13 + 424))
  {
    id v19 = objc_loadWeakRetained((id *)(v13 + 416));
    [v19 getStatus:a3 count:a4];
  }
  id v20 = objc_loadWeakRetained((id *)(v13 + 416));
  int v21 = [v20 getStatus:a2];

  if (v21 == 1)
  {
    if (!*(unsigned char *)(v13 + 425) || *(_DWORD *)(v13 + 428) == 2)
    {
      *(unsigned char *)(v13 + 425) = 1;
      objc_initWeak((id *)&v33, v14);
      *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke;
      *(void *)&buf[24] = &unk_1E5965B28;
      objc_copyWeak((id *)&buf[32], (id *)&v33);
      ControllerImpl::safeNotify(v13, (uint64_t)"startpointDetected", buf);
      objc_destroyWeak((id *)&buf[32]);
      objc_destroyWeak((id *)&v33);
    }
    goto LABEL_38;
  }
  if (v21 == 2)
  {
    if (*(_DWORD *)(v13 + 428) == 2)
    {
      objc_initWeak((id *)&v33, v14);
      *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke_252;
      *(void *)&buf[24] = &unk_1E5965080;
      objc_copyWeak((id *)&buf[32], (id *)&v33);
      double v38 = a5;
      ControllerImpl::safeNotify(v13, (uint64_t)"interspeechPointDetected", buf);
      objc_destroyWeak((id *)&buf[32]);
      objc_destroyWeak((id *)&v33);
    }
    goto LABEL_38;
  }
  if (v21 != 3 || *(unsigned char *)(v13 + 426))
  {
LABEL_38:
    BOOL v25 = 0;
    goto LABEL_39;
  }
  if (*(unsigned char *)(v13 + 425)) {
    goto LABEL_52;
  }
  if (kAVVCScope)
  {
    uint64_t v22 = *(id *)kAVVCScope;
    if (!v22) {
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4F14500];
    id v30 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2887;
    _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d #### AVVoiceController: Detected end point but NO START POINT ####", buf, 0x12u);
  }

LABEL_52:
  *(unsigned char *)(v13 + 426) = 1;
  BOOL v25 = *(unsigned char *)(v13 + 427) != 0;
  if (*(unsigned char *)(v13 + 427))
  {
    if (kAVVCScope)
    {
      int v31 = *(id *)kAVVCScope;
      if (!v31) {
        goto LABEL_60;
      }
    }
    else
    {
      int v31 = MEMORY[0x1E4F14500];
      id v32 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2891;
      _os_log_impl(&dword_19D794000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d checkForEndpoint: auto-stopping record", buf, 0x12u);
    }
  }
LABEL_60:
  objc_initWeak((id *)&v33, v14);
  *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl16checkForEndpointEP17AVVoiceControllerP16AudioQueueBufferPfjd_block_invoke_254;
  *(void *)&buf[24] = &unk_1E5965080;
  objc_copyWeak((id *)&buf[32], (id *)&v33);
  double v38 = a5;
  ControllerImpl::safeNotify(v13, (uint64_t)"endpointDetected", buf);
  objc_destroyWeak((id *)&buf[32]);
  objc_destroyWeak((id *)&v33);
LABEL_39:
  if (kAVVCScope)
  {
    if ((*(unsigned char *)(kAVVCScope + 12) & 0x20) != 0)
    {
      id v27 = *(id *)kAVVCScope;
      if (v27)
      {
        int v28 = v27;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          int v33 = 136315394;
          __int16 v34 = "ControllerImpl.mm";
          __int16 v35 = 1024;
          int v36 = 2906;
          _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d checkForEndpoint exiting", (uint8_t *)&v33, 0x12u);
        }
      }
    }
  }

LABEL_46:
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  BOOL v26 = v25;
LABEL_47:

  return v26;
}

void sub_19D84F64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(&a9);

  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

NSObject *___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_327(uint64_t a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  uint64_t v7 = v6;
  if (!v6)
  {
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (WeakRetained && v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    RecordLock::RecordLock(&v14, v8, v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    id v9 = AVVCRecordingEngine::stopRecord(*(AVVCRecordingEngine **)(a1 + 56), a2);
    VCLocker::~VCLocker((VCLocker *)&v14);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    __int16 v12 = v9;
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    int v10 = *(id *)kAVVCScope;
    if (!v10) {
      goto LABEL_15;
    }
  }
  else
  {
    int v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315906;
    id v15 = "ControllerImpl.mm";
    __int16 v16 = 1024;
    int v17 = 3977;
    __int16 v18 = 2048;
    id v19 = WeakRetained;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", (uint8_t *)&v14, 0x26u);
  }

LABEL_15:
  id v9 = 0;
  __int16 v12 = 0;
  if (v7) {
    goto LABEL_16;
  }
LABEL_17:

  return v12;
}

void sub_19D84F864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  VCLocker::~VCLocker((VCLocker *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_331(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  uint64_t v7 = v6;
  if (!v6)
  {
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (WeakRetained && v8)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    RecordLock::RecordLock(&v14, v8, v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 112))(*(void *)(a1 + 56), a2);
    VCLocker::~VCLocker((VCLocker *)&v14);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v12 = v9;
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    int v10 = *(id *)kAVVCScope;
    if (!v10) {
      goto LABEL_15;
    }
  }
  else
  {
    int v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315906;
    id v15 = "ControllerImpl.mm";
    __int16 v16 = 1024;
    int v17 = 3984;
    __int16 v18 = 2048;
    id v19 = WeakRetained;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", (uint8_t *)&v14, 0x26u);
  }

LABEL_15:
  uint64_t v9 = 0;
  uint64_t v12 = 0;
  if (v7) {
    goto LABEL_16;
  }
LABEL_17:

  return v12;
}

void sub_19D84FA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  VCLocker::~VCLocker((VCLocker *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);

  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_332(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  unint64_t v4 = std::__shared_weak_count::lock(v3);
  uint64_t v5 = v4;
  if (!v4)
  {
LABEL_7:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (WeakRetained && v6)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    RecordLock::RecordLock(&v12, v6, v4);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
    VCLocker::~VCLocker((VCLocker *)&v12);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    uint64_t v10 = v7;
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    uint64_t v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    int v12 = 136315906;
    uint64_t v13 = "ControllerImpl.mm";
    __int16 v14 = 1024;
    int v15 = 3991;
    __int16 v16 = 2048;
    id v17 = WeakRetained;
    __int16 v18 = 2048;
    uint64_t v19 = v6;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", (uint8_t *)&v12, 0x26u);
  }

LABEL_15:
  uint64_t v7 = 0;
  uint64_t v10 = 0;
  if (v5) {
    goto LABEL_16;
  }
LABEL_17:

  return v10;
}

void sub_19D84FC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  VCLocker::~VCLocker((VCLocker *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_333(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v6)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7)
  {
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (WeakRetained && v8)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    uint64_t v11[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_335;
    id v11[3] = &unk_1E5965080;
    objc_copyWeak(v12, v4);
    v12[1] = a2;
    ControllerImpl::safeNotify(v8, (uint64_t)"streamInvalidated", v11);
    objc_destroyWeak(v12);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    id v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    id v9 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v14 = "ControllerImpl.mm";
    __int16 v15 = 1024;
    int v16 = 3998;
    __int16 v17 = 2048;
    id v18 = WeakRetained;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_15:
  if (v7) {
    goto LABEL_16;
  }
LABEL_17:
}

void sub_19D84FE3C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_339(uint64_t a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v6)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7)
  {
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (WeakRetained && v8)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    uint64_t v11[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_341;
    id v11[3] = &unk_1E5965198;
    objc_copyWeak(&v12, v4);
    int v13 = a2;
    ControllerImpl::safeNotify(v8, (uint64_t)"hardwareConfigChanged", v11);
    objc_destroyWeak(&v12);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    id v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    id v9 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v15 = "ControllerImpl.mm";
    __int16 v16 = 1024;
    int v17 = 4007;
    __int16 v18 = 2048;
    id v19 = WeakRetained;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_15:
  if (v7) {
    goto LABEL_16;
  }
LABEL_17:
}

void sub_19D85002C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_342(uint64_t a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v6)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7)
  {
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (WeakRetained && v8)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    uint64_t v11[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_343;
    id v11[3] = &unk_1E59651C0;
    objc_copyWeak(&v12, v4);
    char v13 = a2;
    ControllerImpl::safeNotify(v8, (uint64_t)"beginAudioSessionActivate", v11);
    objc_destroyWeak(&v12);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    id v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    id v9 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v15 = "ControllerImpl.mm";
    __int16 v16 = 1024;
    int v17 = 4015;
    __int16 v18 = 2048;
    id v19 = WeakRetained;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_15:
  if (v7) {
    goto LABEL_16;
  }
LABEL_17:
}

void sub_19D85021C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_347(uint64_t a1, char a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v6)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  if (!v7)
  {
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (WeakRetained && v8)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    uint64_t v11[2] = ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_348;
    id v11[3] = &unk_1E59651C0;
    objc_copyWeak(&v12, v4);
    char v13 = a2;
    ControllerImpl::safeNotify(v8, (uint64_t)"endAudioSessionActivate", v11);
    objc_destroyWeak(&v12);
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_17;
  }
LABEL_8:
  if (kAVVCScope)
  {
    id v9 = *(id *)kAVVCScope;
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    id v9 = MEMORY[0x1E4F14500];
    id v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    __int16 v15 = "ControllerImpl.mm";
    __int16 v16 = 1024;
    int v17 = 4023;
    __int16 v18 = 2048;
    id v19 = WeakRetained;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p, impl: %p). Bailing", buf, 0x26u);
  }

LABEL_15:
  if (v7) {
    goto LABEL_16;
  }
LABEL_17:
}

void sub_19D85040C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_348(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained endAudioSessionActivate:*(unsigned __int8 *)(a1 + 40)];
  }
  else
  {
    if (kAVVCScope)
    {
      unint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 4025;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D850544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_343(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained beginAudioSessionActivate:*(unsigned __int8 *)(a1 + 40)];
  }
  else
  {
    if (kAVVCScope)
    {
      unint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 4017;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D85066C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_341(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained hardwareConfigChanged:*(unsigned int *)(a1 + 40)];
  }
  else
  {
    if (kAVVCScope)
    {
      unint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 4009;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D850794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_335(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained notifyStreamInvalidated:*(void *)(a1 + 40)];
  }
  else
  {
    if (kAVVCScope)
    {
      unint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 4000;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D8508BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c39_ZTSNSt3__18weak_ptrI14ControllerImplEE56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_ea8_40c39_ZTSNSt3__18weak_ptrI14ControllerImplEE56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_314(uint64_t a1)
{
  return [*(id *)(a1 + 32) encodeError:*(unsigned int *)(a1 + 40)];
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_311(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained finishedRecording:*(void *)(a1 + 40) status:*(unsigned int *)(a1 + 48)];
  }
  else
  {
    if (kAVVCScope)
    {
      unint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 3927;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D850A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32_configureEngineCompletionBlocksEP17AVVoiceControllerNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke_307(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained beganRecording:*(void *)(a1 + 40) status:*(unsigned int *)(a1 + 48)];
  }
  else
  {
    if (kAVVCScope)
    {
      unint64_t v4 = *(id *)kAVVCScope;
      if (!v4) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v4 = MEMORY[0x1E4F14500];
      id v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "ControllerImpl.mm";
      __int16 v8 = 1024;
      int v9 = 3905;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d nil object encountered (avvc: %p). Bailing", (uint8_t *)&v6, 0x1Cu);
    }
  }
LABEL_10:
}

void sub_19D850BA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AVVCAudioQueueRecordingEngine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AVVCAudioQueueRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA78A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::__shared_ptr_emplace<AVVCAudioQueueRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA78A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AVVCHACRecordingEngine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AVVCHACRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA3888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::__shared_ptr_emplace<AVVCHACRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA3888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AVVCExternalDeviceRecordingEngine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AVVCExternalDeviceRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA78E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::__shared_ptr_emplace<AVVCExternalDeviceRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA78E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AVVCPluginRecordingEngine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AVVCPluginRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA7870;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x19F3ABB30);
}

void std::__shared_ptr_emplace<AVVCPluginRecordingEngine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EEFA7870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_2_279(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11780 userInfo:0];
  (*(void (**)(uint64_t, void, void))(v1 + 16))(v1, 0, 0);
}

void sub_19D850EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_3(uint64_t a1)
{
  AVVCRecordingEngine::setActivationContextSettings(*(AVVCRecordingEngine **)(a1 + 48), *(AVVCContextSettings **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 64);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3321888768;
  void v6[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_4;
  v6[3] = &unk_1EEFA7CB0;
  id v3 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  id v7 = v3;
  uint64_t v8 = v5;
  int v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ControllerImpl::safeWork(v2, v6, (uint64_t)"setContext_block_invoke");
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_19D850F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_4(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  id v3 = (std::__shared_weak_count *)a1[6];
  uint64_t v5 = v4;
  int v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19D85100C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsU13block_pointerFvm14AVVCStreamTypeP7NSErrorE_block_invoke_274(void *a1)
{
  uint64_t v1 = a1[6];
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[4];
  id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(*(void *)(a1[5] + 8) + 24) userInfo:0];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v3, v1, v2);
}

void sub_19D8510B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::setContext(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000;
  int v25 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  id v15[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsPmP14AVVCStreamType_block_invoke;
  v15[3] = &unk_1E5965120;
  uint64_t v19 = a1;
  id v11 = v9;
  id v16 = v11;
  id v12 = v10;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  id v17 = v12;
  __int16 v18 = &v22;
  makeSynchronous(v15);
  uint64_t v13 = *((unsigned int *)v23 + 6);

  _Block_object_dispose(&v22, 8);
  return v13;
}

void sub_19D8511DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsPmP14AVVCStreamType_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsPmP14AVVCStreamType_block_invoke_2;
  v9[3] = &unk_1E59650F8;
  long long v12 = *(_OWORD *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v10 = v3;
  uint64_t v11 = v6;
  id v8 = v3;
  ControllerImpl::setContext(v7, v4, v5, v9);
}

void sub_19D8512C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl10setContextEP17AVVoiceControllerP19AVVCContextSettingsPmP14AVVCStreamType_block_invoke_2(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = (void *)a1[6];
  if (v8) {
    *id v8 = a2;
  }
  id v9 = (void *)a1[7];
  if (v9) {
    *id v9 = a3;
  }
  id v11 = v7;
  if (v7) {
    LODWORD(v7) = [v7 code];
  }
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = v7;
  id v10 = a1[4];
  if (v10) {
    dispatch_semaphore_signal(v10);
  }
}

void sub_19D851364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::safeWorkSync(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v5 = v3;
    if (IsSerializationEnabled(void)::onceToken != -1) {
      dispatch_once(&IsSerializationEnabled(void)::onceToken, &__block_literal_global_193);
    }
    if (IsSerializationEnabled(void)::enable)
    {
      id v4 = (std::recursive_mutex *)(a1 + 104);
      std::recursive_mutex::lock(v4);
      v5[2]();
      std::recursive_mutex::unlock(v4);
    }
    else
    {
      v5[2]();
    }
    id v3 = v5;
  }
}

void sub_19D851430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::safeAllQueuesBarrier(ControllerImpl *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (kAVVCScope)
  {
    uint64_t v2 = *(id *)kAVVCScope;
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
    id v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    id v23 = "ControllerImpl.mm";
    __int16 v24 = 1024;
    int v25 = 4516;
    _os_log_impl(&dword_19D794000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d before barrier", buf, 0x12u);
  }

LABEL_8:
  id v4 = dispatch_group_create();
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 4);
  if (v6)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = this;
    dispatch_group_async(v4, v6, block);
  }
  id v7 = *((void *)this + 3);
  if (v7)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    _OWORD v20[2] = ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke_368;
    v20[3] = &__block_descriptor_40_e5_v8__0l;
    void v20[4] = this;
    dispatch_group_async(v5, v7, v20);
  }
  id v8 = +[AVVCKeepAliveManager sharedManager];
  id v9 = [v8 getDispatchQueue];

  if (v9)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    _OWORD v18[2] = ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke_369;
    void v18[3] = &unk_1E5965AD8;
    dispatch_queue_t v19 = v9;
    dispatch_group_async(v5, v19, v18);
  }
  if (dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL))
  {
    id v16 = CALog::LogObjIfEnabled(1, kAVVCScope);
    id v17 = v16;
    if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      id v23 = "ControllerImpl.mm";
      __int16 v24 = 1024;
      int v25 = 4544;
      _os_log_impl(&dword_19D794000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AVVC_TIMEOUT occurred : safeAllQueuesBarrier timed out!", buf, 0x12u);
    }

    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)AudioTimeStamp buf = 0;
      _os_log_error_impl(&dword_19D794000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, " ASSERTION FAILURE: AVVC_TIMEOUT occurred : safeAllQueuesBarrier timed out!", buf, 2u);
    }
    __break(1u);
  }
  if (kAVVCScope)
  {
    id v10 = *(id *)kAVVCScope;
    if (!v10) {
      goto LABEL_22;
    }
  }
  else
  {
    id v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    id v23 = "ControllerImpl.mm";
    __int16 v24 = 1024;
    int v25 = 4548;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d after barrier", buf, 0x12u);
  }

LABEL_22:
  long long v12 = *((void *)this + 4);
  if (v12) {
    dispatch_resume(v12);
  }
  uint64_t v13 = *((void *)this + 3);
  if (v13) {
    dispatch_resume(v13);
  }
  if (v9) {
    dispatch_resume(v9);
  }
  if (kAVVCScope)
  {
    __int16 v14 = *(id *)kAVVCScope;
    if (!v14) {
      goto LABEL_35;
    }
  }
  else
  {
    __int16 v14 = MEMORY[0x1E4F14500];
    id v15 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    id v23 = "ControllerImpl.mm";
    __int16 v24 = 1024;
    int v25 = 4564;
    _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d after resume", buf, 0x12u);
  }

LABEL_35:
}

void sub_19D851894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 32));
  if (kAVVCScope)
  {
    uint64_t v1 = *(id *)kAVVCScope;
    if (!v1) {
      return;
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
    id v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    id v4 = "ControllerImpl.mm";
    __int16 v5 = 1024;
    int v6 = 4522;
    _os_log_impl(&dword_19D794000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mWorkQueue barrier", (uint8_t *)&v3, 0x12u);
  }
}

void ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke_368(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 24));
  if (kAVVCScope)
  {
    uint64_t v1 = *(id *)kAVVCScope;
    if (!v1) {
      return;
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
    id v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    id v4 = "ControllerImpl.mm";
    __int16 v5 = 1024;
    int v6 = 4529;
    _os_log_impl(&dword_19D794000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mClientNotificationQueue barrier", (uint8_t *)&v3, 0x12u);
  }
}

void ___ZN14ControllerImpl20safeAllQueuesBarrierEv_block_invoke_369(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  dispatch_suspend(*(dispatch_object_t *)(a1 + 32));
  if (kAVVCScope)
  {
    uint64_t v1 = *(id *)kAVVCScope;
    if (!v1) {
      return;
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F14500];
    id v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    id v4 = "ControllerImpl.mm";
    __int16 v5 = 1024;
    int v6 = 4538;
    _os_log_impl(&dword_19D794000, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d keepAliveDispatchQueue barrier", (uint8_t *)&v3, 0x12u);
  }
}

void ControllerImpl::prepareRecordForStream(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  mach_absolute_time();
  uint64_t v7 = __udivti3();
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v18, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  uint64_t v8 = v18;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  uint64_t v11[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke;
  id v11[3] = &unk_1EEFA8778;
  uint64_t v14 = a1;
  id v9 = v5;
  id v12 = v9;
  uint64_t v15 = v8;
  id v16 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v10 = v6;
  id v13 = v10;
  uint64_t v17 = v7;
  ControllerImpl::safeWork(v8, v11, (uint64_t)"prepareRecordForStream");

  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }

  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_19D851CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }

  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 56);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v41, *(void *)(v2 + 576), *(std::__shared_weak_count **)(v2 + 584), [*(id *)(a1 + 32) streamID]);
  uint64_t v3 = v41;
  if (!v41)
  {
    if (kAVVCScope)
    {
      id v5 = *(id *)kAVVCScope;
      if (!v5)
      {
LABEL_16:
        uint64_t v15 = *(void *)(a1 + 56);
        id v16 = *(void **)(a1 + 40);
        BOOL v17 = v16 != 0;
        v38[0] = MEMORY[0x1E4F143A8];
        v38[1] = 3221225472;
        v38[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_370;
        v38[3] = &unk_1E5965BC0;
        id v40 = v16;
        id v39 = *(id *)(a1 + 32);
        ControllerImpl::safeNotifyAlwaysAsync(v15, v17, v38);

        uint64_t v18 = v42;
        goto LABEL_33;
      }
    }
    else
    {
      id v5 = (id)MEMORY[0x1E4F14500];
      id v12 = MEMORY[0x1E4F14500];
    }
    id v13 = v5;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = [*(id *)(a1 + 32) streamID];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v44 = "ControllerImpl.mm";
      __int16 v45 = 1024;
      int v46 = 4581;
      __int16 v47 = 2048;
      uint64_t v48 = v14;
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d prepareRecordForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_16;
  }
  if (!kAVVCScope)
  {
    id v4 = (id)MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
    goto LABEL_9;
  }
  id v4 = *(id *)kAVVCScope;
  if (v4)
  {
LABEL_9:
    uint64_t v7 = v4;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = v42;
      if (v42)
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        id v9 = NSString;
        uint64_t v10 = *(void *)(v3 + 272);
        uint64_t v11 = v8->__shared_owners_ + 1;
      }
      else
      {
        uint64_t v11 = 0;
        id v9 = NSString;
        uint64_t v10 = *(void *)(v3 + 272);
      }
      id v19 = [v9 stringWithFormat:@"(%p) streamID: %d, use_count:%ld", v3, v10, v11];
      unsigned int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 320))(v3);
      if (v20 > 4) {
        uint64_t v21 = "ILLEGAL";
      }
      else {
        uint64_t v21 = off_1E59657C0[v20];
      }
      uint64_t v22 = [*(id *)(a1 + 32) streamID];
      id v23 = Get4CCFromInt(*(_DWORD *)(v3 + 280));
      *(_DWORD *)AudioTimeStamp buf = 136316418;
      int v44 = "ControllerImpl.mm";
      __int16 v45 = 1024;
      int v46 = 4588;
      __int16 v47 = 2112;
      uint64_t v48 = (uint64_t)v19;
      __int16 v49 = 2080;
      id v50 = v21;
      __int16 v51 = 2048;
      uint64_t v52 = v22;
      __int16 v53 = 2112;
      uint64_t v54 = v23;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d prepareRecordForStream: Found engine[%@] of type(%s) for streamID(%lu), with activation mode(%@)", buf, 0x3Au);

      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3321888768;
  int v29[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_371;
  v29[3] = &unk_1EEFA3C58;
  uint64_t v32 = v2;
  uint64_t v33 = v3;
  uint64_t v18 = v42;
  __int16 v34 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v24 = *(id *)(a1 + 32);
  uint64_t v26 = *(void *)(a1 + 56);
  int v25 = *(std::__shared_weak_count **)(a1 + 64);
  id v30 = v24;
  uint64_t v35 = v26;
  int v36 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v27 = *(id *)(a1 + 40);
  uint64_t v28 = *(void *)(a1 + 72);
  id v31 = v27;
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v3 + 360))(v3, v29, "prepareRecordForStream_block_invoke");

  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }

  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
LABEL_33:
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_19D852178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_370(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = [*(id *)(a1 + 32) streamID];
  id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 16))(v1, v2, 0);
}

void sub_19D85229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_371(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v2 = *(AVVCRecordingEngine **)(a1 + 56);
  [*(id *)(a1 + 32) recordBufferDuration];
  int v5 = AVVCRecordingEngine::setRecordBufferDuration(v2, v4);
  if (v5)
  {
    int v6 = v5;
    if (kAVVCScope)
    {
      uint64_t v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_17:
        uint64_t v15 = *(void *)(a1 + 72);
        id v16 = *(void **)(a1 + 40);
        BOOL v17 = v16 != 0;
        v60[0] = MEMORY[0x1E4F143A8];
        v60[1] = 3221225472;
        uint64_t v60[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_372;
        id v60[3] = &unk_1E59651E8;
        id v62 = v16;
        id v61 = *(id *)(a1 + 32);
        int v63 = v6;
        ControllerImpl::safeNotifyAlwaysAsync(v15, v17, v60);

        return;
      }
    }
    else
    {
      uint64_t v7 = MEMORY[0x1E4F14500];
      id v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4593;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d prepareRecordForStream: Failed to setRecordBufferDuration", buf, 0x12u);
    }

    goto LABEL_17;
  }
  uint64_t v8 = *(void *)(a1 + 72);
  id v9 = *(std::__shared_weak_count **)(a1 + 80);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RecordLock::RecordLock(v59, v8, v9);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = [*(id *)(a1 + 32) avAudioSettings];
  int v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 88))(v10, v11);

  if (v12)
  {
    if (kAVVCScope)
    {
      id v13 = *(id *)kAVVCScope;
      if (!v13)
      {
LABEL_34:
        uint64_t v24 = *(void *)(a1 + 72);
        int v25 = *(void **)(a1 + 40);
        BOOL v26 = v25 != 0;
        v55[0] = MEMORY[0x1E4F143A8];
        v55[1] = 3221225472;
        v55[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_373;
        id v55[3] = &unk_1E59651E8;
        id v57 = v25;
        id v56 = *(id *)(a1 + 32);
        int v58 = v12;
        ControllerImpl::safeNotifyAlwaysAsync(v24, v26, v55);

        VCLocker::~VCLocker((VCLocker *)v59);
        return;
      }
    }
    else
    {
      id v13 = MEMORY[0x1E4F14500];
      id v23 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4605;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      _os_log_impl(&dword_19D794000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d prepareRecordForStream: Error in prepareRecording: %d", buf, 0x18u);
    }

    goto LABEL_34;
  }
  VCLocker::~VCLocker((VCLocker *)v59);
  int v18 = [*(id *)(a1 + 32) deviceBufferFrameSize];
  if (v18) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = *(void *)(v3 + 184) == 1;
  }
  if (v19) {
    int v20 = 512;
  }
  else {
    int v20 = v18;
  }
  if (v20) {
    (*(void (**)(void))(**(void **)(a1 + 56) + 352))(*(void *)(a1 + 56));
  }
  int v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 152))(*(void *)(a1 + 56), [*(id *)(a1 + 32) meteringEnabled]);
  if (!v21)
  {
    int v27 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56));
    uint64_t ReporterID = AVVCRecordingEngine::getReporterID(*(AVVCRecordingEngine **)(a1 + 56));
    uint64_t v29 = *(void *)(a1 + 56);
    uint64_t v30 = *(void *)(v29 + 280);
    long long v31 = *(_OWORD *)(v29 + 40);
    *(_OWORD *)AudioTimeStamp buf = *(_OWORD *)(v29 + 24);
    *(_OWORD *)&uint8_t buf[16] = v31;
    uint64_t v65 = *(void *)(v29 + 56);
    mach_absolute_time();
    uint64_t v32 = __udivti3();
    uint64_t v33 = *(void *)(a1 + 88);
    __int16 v34 = +[AVVCMetricsManager sharedManager];
    uint64_t v35 = [NSNumber numberWithDouble:(float)((float)(unint64_t)(v32 - v33) / 1000000.0)];
    [v34 logSingleMetric:@"avvcPrepareRecordTime" value:v35 category:8 type:5 reporterID:ReporterID];

    int v36 = +[AVVCMetricsManager sharedManager];
    uint64_t v37 = [NSNumber numberWithInteger:v30];
    [v36 logSingleMetric:@"avvcActivationContext" value:v37 category:8 type:5 reporterID:ReporterID];

    double v38 = +[AVVCMetricsManager sharedManager];
    v49[0] = *(_OWORD *)buf;
    v49[1] = *(_OWORD *)&buf[16];
    uint64_t v50 = v65;
    [v38 logRecordAudioFormat:v49 reporterID:ReporterID];

    uint64_t v39 = *(void *)(a1 + 72);
    id v40 = *(void **)(a1 + 40);
    LODWORD(ReporterID) = v40 != 0;
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 3221225472;
    v45[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_2;
    v45[3] = &unk_1E59651E8;
    id v47 = v40;
    id v46 = *(id *)(a1 + 32);
    int v48 = v27;
    ControllerImpl::safeNotifyAlwaysAsync(v39, ReporterID, v45);

    return;
  }
  if (!kAVVCScope)
  {
    uint64_t v22 = MEMORY[0x1E4F14500];
    id v41 = MEMORY[0x1E4F14500];
    goto LABEL_37;
  }
  uint64_t v22 = *(id *)kAVVCScope;
  if (v22)
  {
LABEL_37:
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4625;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v21;
      _os_log_impl(&dword_19D794000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d prepareRecordForStream: Error in enableMetering: %d", buf, 0x18u);
    }
  }
  uint64_t v42 = *(void *)(a1 + 72);
  __int16 v43 = *(void **)(a1 + 40);
  BOOL v44 = v43 != 0;
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 3221225472;
  void v51[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_374;
  v51[3] = &unk_1E59651E8;
  id v53 = v43;
  id v52 = *(id *)(a1 + 32);
  int v54 = v21;
  ControllerImpl::safeNotifyAlwaysAsync(v42, v44, v51);
}

void sub_19D8529B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE72c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(void *result, void *a2)
{
  uint64_t v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[10];
  result[9] = a2[9];
  result[10] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_372(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(a1 + 48) userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void))(v2 + 16))(v2, v3, 0);
}

void sub_19D852B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_373(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(a1 + 48) userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void))(v2 + 16))(v2, v3, 0);
}

void sub_19D852C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_374(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(a1 + 48) userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void))(v2 + 16))(v2, v3, 0);
}

void sub_19D852CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettingsU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(int *)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:v4 userInfo:0];
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t, BOOL))(v2 + 16))(v2, v3, v4 == 0);
  if (v4)
  {
  }
}

void sub_19D852DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v10) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t ControllerImpl::prepareRecordForStream(ControllerImpl *this, AVVoiceController *a2, AVVCPrepareRecordSettings *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  uint64_t v16 = 0;
  BOOL v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  uint64_t v11[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettings_block_invoke;
  id v11[3] = &unk_1E5965238;
  uint64_t v15 = this;
  uint64_t v7 = v5;
  int v12 = v7;
  uint64_t v8 = v6;
  id v13 = v8;
  id v14 = &v16;
  makeSynchronous(v11);
  uint64_t v9 = *((unsigned int *)v17 + 6);

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_19D852EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettings_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[5];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettings_block_invoke_2;
  v8[3] = &unk_1E5965210;
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  id v9 = v3;
  uint64_t v10 = v5;
  id v7 = v3;
  ControllerImpl::prepareRecordForStream(v6, v4, v8);
}

void sub_19D852F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl22prepareRecordForStreamEP17AVVoiceControllerP25AVVCPrepareRecordSettings_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v7 = v5;
  if (v5) {
    LODWORD(v5) = [v5 code];
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v5;
  uint64_t v6 = *(NSObject **)(a1 + 32);
  if (v6) {
    dispatch_semaphore_signal(v6);
  }
}

void sub_19D853018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::startRecordForStream(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  id v59 = a2;
  id v11 = a3;
  id v12 = a4;
  id v58 = a5;
  id v13 = a6;
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      id v14 = *(id *)kAVVCScope;
      if (v14)
      {
        uint64_t v15 = v14;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = [v11 streamID];
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4678;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v16;
          _os_log_impl(&dword_19D794000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d startRecordForStream streamID(%lu)", buf, 0x1Cu);
        }
      }
    }
  }
  BOOL v17 = +[AVVCMetricsManager sharedManager];
  mach_absolute_time();
  [v17 setCallToStartRecordHostTime:__udivti3()];

  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v84, *(void *)(a1 + 576), *(std::__shared_weak_count **)(a1 + 584), [v11 streamID]);
  uint64_t v18 = v84;
  if (!v84)
  {
    if (kAVVCScope)
    {
      id v21 = *(id *)kAVVCScope;
      if (!v21)
      {
LABEL_36:
        if (!v12) {
          goto LABEL_48;
        }
        int v36 = *(NSObject **)(a1 + 24);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke;
        block[3] = &unk_1E5965BC0;
        uint64_t v37 = &v83;
        id v83 = v12;
        double v38 = &v82;
        id v82 = v11;
        dispatch_async(v36, block);
        goto LABEL_47;
      }
    }
    else
    {
      id v21 = (id)MEMORY[0x1E4F14500];
      id v33 = MEMORY[0x1E4F14500];
    }
    __int16 v34 = v21;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = [v11 streamID];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4687;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v35;
      _os_log_impl(&dword_19D794000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_36;
  }
  uint64_t v19 = *(void *)(v84 + 224);
  if (v19 <= 1)
  {
    if (kAVVCScope)
    {
      id v20 = *(id *)kAVVCScope;
      if (!v20) {
        goto LABEL_42;
      }
    }
    else
    {
      id v20 = (id)MEMORY[0x1E4F14500];
      id v39 = MEMORY[0x1E4F14500];
    }
    id v40 = v20;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = [v11 streamID];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4697;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v41;
      _os_log_impl(&dword_19D794000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Attempt to start stream(%ld) without calling prepare.", buf, 0x1Cu);
    }

LABEL_42:
    if (!v12) {
      goto LABEL_48;
    }
    uint64_t v42 = *(NSObject **)(a1 + 24);
    v77[0] = MEMORY[0x1E4F143A8];
    v77[1] = 3321888768;
    v77[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_380;
    v77[3] = &unk_1EEFA8120;
    uint64_t v37 = (id *)v79;
    v79[0] = v12;
    double v38 = &v78;
    id v78 = v11;
    v79[1] = v18;
    int v80 = v85;
    if (v85) {
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_async(v42, v77);
    __int16 v43 = v80;
    if (!v80) {
      goto LABEL_47;
    }
LABEL_46:
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
LABEL_47:

    goto LABEL_48;
  }
  if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    if (kAVVCScope)
    {
      id v22 = *(id *)kAVVCScope;
      if (!v22) {
        goto LABEL_59;
      }
    }
    else
    {
      id v22 = (id)MEMORY[0x1E4F14500];
      id v44 = MEMORY[0x1E4F14500];
    }
    __int16 v45 = v22;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = [v11 streamID];
      unint64_t v47 = *(void *)(v18 + 224);
      if (v47 > 6) {
        int v48 = "ILLEGAL";
      }
      else {
        int v48 = off_1E59657E8[v47];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4707;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v46;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v48;
      _os_log_impl(&dword_19D794000, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d startRecordForStream: Attempt to start stream(%ld) while stream is already %s. No-op.", buf, 0x26u);
    }

LABEL_59:
    if (v12)
    {
      __int16 v49 = *(NSObject **)(a1 + 24);
      v73[0] = MEMORY[0x1E4F143A8];
      v73[1] = 3321888768;
      v73[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_383;
      v73[3] = &unk_1EEFA8120;
      uint64_t v37 = (id *)v75;
      v75[0] = v12;
      double v38 = &v74;
      id v74 = v11;
      v75[1] = v18;
      id v76 = v85;
      if (v85) {
        atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_async(v49, v73);
      __int16 v43 = v76;
      if (!v76) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    goto LABEL_48;
  }
  *(void *)(v18 + 240) = [v11 startHostTime];
  *(_DWORD *)(v18 + 248) = [v11 startAnchorPoint];
  *(void *)(a1 + 344) = -1;
  *(void *)(a1 + 352) = -1;
  *(void *)(a1 + 336) = -1;
  *(void *)(a1 + 336) = [v11 startAlert];
  *(void *)(a1 + 344) = [v11 stopAlert];
  *(void *)(a1 + 352) = [v11 stopOnErrorAlert];
  *(unsigned char *)(a1 + 592) = 1;
  AVVCRecordingEngine::setStreamState(v18, 4);
  id v23 = (*(void (**)(uint64_t, void))(*(void *)v18 + 64))(v18, 0);
  BOOL v24 = [v23 sessionState] == 7;

  if (!v24)
  {
    unsigned int v31 = 0;
    goto LABEL_75;
  }
  uint64_t v25 = *(void *)(v18 + 280);
  BOOL v26 = v85;
  if (v85) {
    atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v86 = 0;
  int v87 = &v86;
  uint64_t v88 = 0x2020000000;
  int v89 = 0;
  *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3321888768;
  *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl35configureAlertModeFromModeAndEngineElNSt3__110shared_ptrI19AVVCRecordingEngineEE_block_invoke;
  *(void *)&buf[24] = &unk_1EEFA83C0;
  id v91 = (uint64_t *)a1;
  uint64_t v92 = v25;
  uint64_t v93 = v18;
  long long v94 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&unsigned char buf[32] = &v86;
  id v57 = v13;
  makeSynchronous(buf);
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
  _Block_object_dispose(&v86, 8);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  *(unsigned char *)(a1 + 409) = 0;
  uint64_t v27 = *(void *)(v18 + 272);
  BOOL v28 = *(_DWORD *)(a1 + 360) != 201;
  id v29 = v59;
  uint64_t v86 = 0;
  int v87 = &v86;
  uint64_t v88 = 0x2020000000;
  int v89 = 0;
  *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl9playAlertEP17AVVoiceController16AVVoiceAlertTypebm_block_invoke;
  *(void *)&buf[24] = &unk_1E5965030;
  uint64_t v92 = a1;
  id v30 = v29;
  LODWORD(v94) = 1;
  BYTE4(v94) = v28;
  uint64_t v93 = v27;
  *(void *)&unsigned char buf[32] = v30;
  id v91 = &v86;
  makeSynchronous(buf);
  unsigned int v31 = *((_DWORD *)v87 + 6);

  id v13 = v57;
  _Block_object_dispose(&v86, 8);

  if (!v31)
  {
    LOBYTE(v24) = 1;
    goto LABEL_75;
  }
  if (!kAVVCScope)
  {
    uint64_t v32 = MEMORY[0x1E4F14500];
    id v50 = MEMORY[0x1E4F14500];
LABEL_66:
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4757;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v31;
      _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR in startRecordForStream, failed at playAlert: %d", buf, 0x18u);
    }
    goto LABEL_68;
  }
  uint64_t v32 = *(id *)kAVVCScope;
  if (v32) {
    goto LABEL_66;
  }
LABEL_68:

  if (v12)
  {
    AVVCRecordingEngine::setStreamState(v18, 3);
    __int16 v51 = *(NSObject **)(a1 + 24);
    v67[0] = MEMORY[0x1E4F143A8];
    v67[1] = 3321888768;
    v67[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_384;
    v67[3] = &unk_1EEFA82A8;
    id v69 = v12;
    id v68 = v11;
    uint64_t v70 = v18;
    uint64_t v71 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v72 = v31;
    dispatch_async(v51, v67);
    if (v71) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v71);
    }
  }
  LOBYTE(v24) = 0;
LABEL_75:
  AVVCRecordingEngine::setRecordErrorStatus((AVVCRecordingEngine *)v18, v31, "startRecordForStream");
  (*(void (**)(uint64_t))(*(void *)v18 + 264))(v18);
  *(unsigned char *)(v18 + 200) = *(unsigned char *)(a1 + 424);
  (*(void (**)(uint64_t))(*(void *)v18 + 288))(v18);
  if (!v24)
  {
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v65, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
    RecordLock::RecordLock(buf, v65, v66);
    if (v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    }
    unsigned int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 96))(v18);
    VCLocker::~VCLocker((VCLocker *)buf);
  }
  if (!v31) {
    goto LABEL_48;
  }
  if (kAVVCScope)
  {
    id v52 = *(id *)kAVVCScope;
    if (!v52) {
      goto LABEL_87;
    }
  }
  else
  {
    id v52 = (id)MEMORY[0x1E4F14500];
    id v53 = MEMORY[0x1E4F14500];
  }
  int v54 = v52;
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
  {
    uint64_t v55 = [v11 streamID];
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4794;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v55;
    *(_WORD *)&unsigned char buf[28] = 1024;
    *(_DWORD *)&buf[30] = v31;
    _os_log_impl(&dword_19D794000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Error in startRecording for stream(%lu): %d", buf, 0x22u);
  }

LABEL_87:
  if (v12)
  {
    id v56 = *(NSObject **)(a1 + 24);
    v60[0] = MEMORY[0x1E4F143A8];
    v60[1] = 3321888768;
    uint64_t v60[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_388;
    id v60[3] = &unk_1EEFA82A8;
    uint64_t v37 = (id *)v62;
    v62[0] = v12;
    double v38 = &v61;
    id v61 = v11;
    v62[1] = v18;
    int v63 = v85;
    if (v85) {
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v64 = v31;
    dispatch_async(v56, v60);
    __int16 v43 = v63;
    if (!v63) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_48:
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
}

void sub_19D853B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 232);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = [*(id *)(a1 + 32) streamID];
  id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, void))(v1 + 16))(v1, v2, 0, 0);
}

void sub_19D853D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_380(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 224);
  id v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11781 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(v2 + 16))(v2, v3, 0, v4);
}

void sub_19D853E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_383(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v2 + 16);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 224);

  return v4(v2, v3, 1, v5, 0);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_384(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 224);
  id v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(a1 + 64) userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(v2 + 16))(v2, v3, 0, v4);
}

void sub_19D853F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorEU13block_pointerFv16AVVoiceAlertType14AVVCAlertStateS6_EU13block_pointerFvmP15AVVCAudioBufferE_block_invoke_388(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 224);
  id v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(a1 + 64) userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(v2 + 16))(v2, v3, 0, v4);
}

void sub_19D853FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::startRecordForStream(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      id v10 = *(id *)kAVVCScope;
      if (v10)
      {
        id v11 = v10;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4814;
          __int16 v25 = 2048;
          uint64_t v26 = [v8 streamID];
          _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d startRecordForStream streamID(%lu)", buf, 0x1Cu);
        }
      }
    }
  }
  id v12 = +[AVVCMetricsManager sharedManager];
  mach_absolute_time();
  [v12 setCallToStartRecordHostTime:__udivti3()];

  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  uint64_t v13 = *(void *)buf;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3321888768;
  v17[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke;
  v17[3] = &unk_1EEFA87E8;
  uint64_t v21 = a1;
  id v14 = v8;
  id v18 = v14;
  uint64_t v22 = v13;
  id v23 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
  }
  id v15 = v9;
  id v20 = v15;
  id v16 = v7;
  id v19 = v16;
  ControllerImpl::safeWork(v13, v17, (uint64_t)"startRecordForStream");

  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }

  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
}

void sub_19D85422C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v25, *(void *)(*(void *)(a1 + 56) + 576), *(std::__shared_weak_count **)(*(void *)(a1 + 56) + 584), [*(id *)(a1 + 32) streamID]);
  uint64_t v2 = v25;
  if (!v25)
  {
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_20;
      }
    }
    else
    {
      id v7 = (id)MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    id v9 = v7;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = [*(id *)(a1 + 32) streamID];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      BOOL v28 = "ControllerImpl.mm";
      __int16 v29 = 1024;
      int v30 = 4825;
      __int16 v31 = 2048;
      uint64_t v32 = v10;
      _os_log_impl(&dword_19D794000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

LABEL_20:
    uint64_t v11 = *(void *)(a1 + 64);
    id v12 = *(void **)(a1 + 48);
    BOOL v13 = v12 != 0;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_389;
    v22[3] = &unk_1E5965BC0;
    id v24 = v12;
    id v23 = *(id *)(a1 + 32);
    ControllerImpl::safeNotifyAlwaysAsync(v11, v13, v22);

    uint64_t v3 = v26;
    if (!v26) {
      return;
    }
    goto LABEL_11;
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  id v14[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2;
  v14[3] = &unk_1EEFA8B30;
  uint64_t v3 = v26;
  uint64_t v18 = v25;
  id v19 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v4 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 64);
  id v5 = *(std::__shared_weak_count **)(a1 + 72);
  id v15 = v4;
  uint64_t v20 = v6;
  uint64_t v21 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v17 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 40);
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v2 + 360))(v2, v14, "startRecordForStream_block_invoke");

  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }

  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v3) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D854584(_Unwind_Exception *a1)
{
  id v4 = *(std::__shared_weak_count **)(v2 - 88);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_389(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = [*(id *)(a1 + 32) streamID];
  id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, void))(v1 + 16))(v1, v2, 0, 0);
}

void sub_19D854688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 56) + 224);
  if (v2 <= 1)
  {
    if (kAVVCScope)
    {
      id v3 = *(id *)kAVVCScope;
      if (!v3)
      {
LABEL_16:
        id v9 = *(void **)(a1 + 48);
        uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 224);
        uint64_t v11 = *(void *)(a1 + 72);
        BOOL v12 = v9 != 0;
        v48[0] = MEMORY[0x1E4F143A8];
        v48[1] = 3221225472;
        v48[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_390;
        v48[3] = &unk_1E5965260;
        id v50 = v9;
        id v49 = *(id *)(a1 + 32);
        uint64_t v51 = v10;
        ControllerImpl::safeNotifyAlwaysAsync(v11, v12, v48);

        return;
      }
    }
    else
    {
      id v3 = (id)MEMORY[0x1E4F14500];
      id v6 = MEMORY[0x1E4F14500];
    }
    id v7 = v3;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = [*(id *)(a1 + 32) streamID];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v54 = "ControllerImpl.mm";
      __int16 v55 = 1024;
      int v56 = 4834;
      __int16 v57 = 2048;
      uint64_t v58 = v8;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Attempt to start stream(%ld) without calling prepare.", buf, 0x1Cu);
    }

    goto LABEL_16;
  }
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    if (kAVVCScope)
    {
      id v4 = *(id *)kAVVCScope;
      if (!v4)
      {
LABEL_36:
        uint64_t v32 = *(void **)(a1 + 48);
        uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 224);
        uint64_t v34 = *(void *)(a1 + 72);
        BOOL v35 = v32 != 0;
        v44[0] = MEMORY[0x1E4F143A8];
        v44[1] = 3221225472;
        id v44[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_391;
        v44[3] = &unk_1E5965260;
        id v46 = v32;
        id v45 = *(id *)(a1 + 32);
        uint64_t v47 = v33;
        ControllerImpl::safeNotifyAlwaysAsync(v34, v35, v44);

        return;
      }
    }
    else
    {
      id v4 = (id)MEMORY[0x1E4F14500];
      id v13 = MEMORY[0x1E4F14500];
    }
    id v14 = v4;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [*(id *)(a1 + 32) streamID];
      unint64_t v16 = *(void *)(*(void *)(a1 + 56) + 224);
      if (v16 > 6) {
        id v17 = "ILLEGAL";
      }
      else {
        id v17 = off_1E59657E8[v16];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      int v54 = "ControllerImpl.mm";
      __int16 v55 = 1024;
      int v56 = 4843;
      __int16 v57 = 2048;
      uint64_t v58 = v15;
      __int16 v59 = 2080;
      int v60 = v17;
      _os_log_impl(&dword_19D794000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d startRecordForStream: Attempt to start stream(%ld) while stream is already %s. No-op.", buf, 0x26u);
    }

    goto LABEL_36;
  }
  if (!kAVVCScope)
  {
    id v5 = (id)MEMORY[0x1E4F14500];
    id v18 = MEMORY[0x1E4F14500];
    goto LABEL_22;
  }
  id v5 = *(id *)kAVVCScope;
  if (v5)
  {
LABEL_22:
    id v19 = v5;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void, void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56), 0);
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void, void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56), 0);
      uint64_t v21 = (char *)(id)objc_claimAutoreleasedReturnValue();
      uint64_t v22 = *(void *)(a1 + 56);
      CAX4CCString::CAX4CCString((CAX4CCString *)v52, *(_DWORD *)(v22 + 280));
      id v23 = AVVCRouteManager::getRecordDeviceUID(*(id **)(*(void *)(a1 + 56) + 376));
      *(_DWORD *)AudioTimeStamp buf = 136316674;
      int v54 = "ControllerImpl.mm";
      __int16 v55 = 1024;
      int v56 = 4857;
      __int16 v57 = 2048;
      uint64_t v58 = (uint64_t)v20;
      __int16 v59 = 2048;
      int v60 = v21;
      __int16 v61 = 2048;
      uint64_t v62 = v22;
      __int16 v63 = 2080;
      unsigned int v64 = v52;
      __int16 v65 = 2112;
      uint64_t v66 = v23;
      _os_log_impl(&dword_19D794000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d session (%p) and session mananger (%p) used for engine (%p) with context(%s, %@)", buf, 0x44u);
    }
  }
  uint64_t v24 = *(void *)(a1 + 56);
  *(void *)(v24 + 240) = [*(id *)(a1 + 32) startHostTime];
  uint64_t v25 = *(void *)(a1 + 56);
  *(_DWORD *)(v25 + 248) = [*(id *)(a1 + 32) startAnchorPoint];
  uint64_t v26 = *(void *)(a1 + 56);
  *(unsigned char *)(v26 + 25AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = 0;
  AVVCRecordingEngine::setStreamState(v26, 4);
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3321888768;
  v36[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_392;
  v36[3] = &unk_1EEFA8AF8;
  uint64_t v28 = *(void *)(a1 + 72);
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v40 = v28;
  uint64_t v41 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v29 = *(id *)(a1 + 32);
  uint64_t v31 = *(void *)(a1 + 56);
  int v30 = *(std::__shared_weak_count **)(a1 + 64);
  id v37 = v29;
  uint64_t v42 = v31;
  __int16 v43 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v39 = *(id *)(a1 + 48);
  id v38 = *(id *)(a1 + 40);
  ControllerImpl::safeWork(v28, v36, (uint64_t)"startRecordForStream_block_invoke");

  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }

  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
}

void sub_19D854C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_390(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11781 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(v2 + 16))(v2, v3, 0, v4);
}

void sub_19D854DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_391(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v2 + 16);
  uint64_t v5 = *(void *)(a1 + 48);

  return v4(v2, v3, 1, v5, 0);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_392(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 56) + 592) = 0;
  if (([*(id *)(a1 + 32) skipAlert] & 1) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 56);
    v2[43] = -1;
    v2[44] = -1;
    v2[42] = -1;
    uint64_t v3 = *(void *)(a1 + 56);
    *(void *)(v3 + 336) = [*(id *)(a1 + 32) startAlert];
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(v4 + 344) = [*(id *)(a1 + 32) stopAlert];
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(v5 + 352) = [*(id *)(a1 + 32) stopOnErrorAlert];
  }
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(unsigned char *)(v6 + 424);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  uint64_t v11[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_393;
  id v11[3] = &unk_1EEFA8BA0;
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v15 = v9;
  unint64_t v16 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(void *)(a1 + 56);
  }
  char v19 = v7;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v17 = v6;
  id v18 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v12 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 40);
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v9 + 360))(v9, v11, "startRecordForStream_block_invoke");

  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_19D854FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_393(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3;
  aBlock[3] = &unk_1EEFA8858;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v30 = *(void *)(a1 + 56);
  uint64_t v31 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v34 = *(unsigned char *)(a1 + 88);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v32 = *(void *)(a1 + 72);
  uint64_t v33 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (id *)(a1 + 32);
  id v28 = *(id *)(a1 + 32);
  id v29 = *(id *)(a1 + 48);
  uint64_t v5 = (void (**)(void *, void))_Block_copy(aBlock);
  if ([*v4 skipAlert])
  {
    if (kAVVCScope)
    {
      uint64_t v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v6 = MEMORY[0x1E4F14500];
      id v15 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v36 = "ControllerImpl.mm";
      __int16 v37 = 1024;
      int v38 = 4980;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d startRecordForStream: Skipping alert playback and continuing to startRecord", buf, 0x12u);
    }

    goto LABEL_22;
  }
  char v7 = (*(void (**)(void, void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56), 0);
  BOOL v8 = [v7 sessionState] == 7;

  if (!v8)
  {
LABEL_22:
    v5[2](v5, 0);
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(v9 + 272);
  uint64_t v10 = *(void *)(v9 + 280);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3321888768;
  void v16[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_399;
  __n128 v16[3] = &unk_1EEFA7B08;
  uint64_t v13 = *(void *)(a1 + 72);
  id v12 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v21 = v13;
  uint64_t v22 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(void *)(a1 + 56);
  }
  uint64_t v23 = v10;
  uint64_t v24 = v9;
  id v14 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v25 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v17 = *(id *)(a1 + 40);
  uint64_t v26 = v11;
  id v19 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 32);
  id v20 = v5;
  ControllerImpl::safeWork(v13, v16, (uint64_t)"startRecordForStream_block_invoke");

  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
LABEL_23:

  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
}

void sub_19D855314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }

  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3(uint64_t a1, char a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AVVCRecordingEngine::setRecordErrorStatus(*(AVVCRecordingEngine **)(a1 + 48), 0, "startRecordForStream_block_invoke");
  (*(void (**)(void))(**(void **)(a1 + 48) + 264))();
  (*(void (**)(void))(**(void **)(a1 + 48) + 288))();
  uint64_t v4 = *(void *)(a1 + 48);
  *(unsigned char *)(v4 + 200) = *(unsigned char *)(a1 + 80);
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 72);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RecordLock::RecordLock(buf, v5, v6);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 96))(*(void *)(a1 + 48));
    VCLocker::~VCLocker((VCLocker *)buf);
    if (v7)
    {
      if (kAVVCScope)
      {
        id v8 = *(id *)kAVVCScope;
        if (!v8)
        {
LABEL_16:
          id v18 = *(void **)(a1 + 40);
          uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 224);
          uint64_t v20 = *(void *)(a1 + 64);
          BOOL v21 = v18 != 0;
          v25[0] = MEMORY[0x1E4F143A8];
          v25[1] = 3221225472;
          v25[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_395;
          v25[3] = &unk_1E5965288;
          v27[0] = v18;
          id v26 = *(id *)(a1 + 32);
          v27[1] = v19;
          int v28 = v7;
          ControllerImpl::safeNotifyAlwaysAsync(v20, v21, v25);
          uint64_t v13 = (id *)v27;
          id v14 = &v26;
          goto LABEL_17;
        }
      }
      else
      {
        id v8 = (id)MEMORY[0x1E4F14500];
        id v15 = MEMORY[0x1E4F14500];
      }
      unint64_t v16 = v8;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = [*(id *)(a1 + 32) streamID];
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        uint64_t v30 = "ControllerImpl.mm";
        __int16 v31 = 1024;
        int v32 = 4918;
        __int16 v33 = 2048;
        uint64_t v34 = v17;
        __int16 v35 = 1024;
        int v36 = v7;
        _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Error in startRecording for stream(%lu): %d", buf, 0x22u);
      }

      goto LABEL_16;
    }
    uint64_t v4 = *(void *)(a1 + 48);
  }
  uint64_t v9 = *(void *)(v4 + 224);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void **)(a1 + 40);
  BOOL v12 = v11 != 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_396;
  v22[3] = &unk_1E5965260;
  v24[0] = v11;
  id v23 = *(id *)(a1 + 32);
  v24[1] = v9;
  ControllerImpl::safeNotifyAlwaysAsync(v10, v12, v22);
  uint64_t v13 = (id *)v24;
  id v14 = &v23;
LABEL_17:
}

void sub_19D8556EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_399(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 96);
  v21[0] = *(void *)(a1 + 88);
  v21[1] = (uint64_t)v4;
  uint64_t v5 = v2;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void *)(a1 + 64);
  }
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  uint64_t v11[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_400;
  id v11[3] = &unk_1EEFA7A28;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 104);
  id v12 = v7;
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 96);
  uint64_t v18 = v8;
  uint64_t v19 = v10;
  uint64_t v20 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v14 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 56);
  ControllerImpl::configureAlertModeFromModeAndEngine(v2, v3, v21, v11);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }

  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_19D8558B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }

  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE88c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_64c42_ZTSNSt3__110shared_ptrI14ControllerImplEE88c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(void *result, void *a2)
{
  uint64_t v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[12];
  result[11] = a2[11];
  result[12] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_400(uint64_t a1)
{
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2020000000;
  char v18 = 0;
  uint64_t v2 = *(void *)(a1 + 64);
  *(unsigned char *)(v2 + 409) = 0;
  uint64_t v3 = *(void **)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3321888768;
  v8[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3_401;
  v8[3] = &unk_1EEFA8C78;
  uint64_t v4 = *(AVVoiceController **)(a1 + 80);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 88);
  id v14 = v5;
  uint64_t v6 = v2;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(void *)(a1 + 64);
  }
  id v7 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v10 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  id v12 = v17;
  id v11 = *(id *)(a1 + 56);
  ControllerImpl::playAlert(v2, v3, 1, v4, v8);

  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Block_object_dispose(v17, 8);
}

void sub_19D855AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Block_object_dispose((const void *)(v20 - 64), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3_401(uint64_t a1, int a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    uint64_t v5 = *(void *)(a1 + 64);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    id v12[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_406;
    v12[3] = &unk_1E5964F40;
    id v6 = *(id *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    id v13 = v6;
    uint64_t v14 = v7;
    (*(void (**)(uint64_t, void *, const char *))(*(void *)v5 + 360))(v5, v12, "startRecordForStream_block_invoke");

    return;
  }
  if (!kAVVCScope)
  {
    uint64_t v4 = MEMORY[0x1E4F14500];
    id v8 = MEMORY[0x1E4F14500];
    goto LABEL_7;
  }
  uint64_t v4 = *(id *)kAVVCScope;
  if (v4)
  {
LABEL_7:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v24 = "ControllerImpl.mm";
      __int16 v25 = 1024;
      int v26 = 4957;
      __int16 v27 = 1024;
      int v28 = a2;
      _os_log_impl(&dword_19D794000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR in startRecordForStream, failed at playAlert: %d", buf, 0x18u);
    }
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3321888768;
  id v15[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_402;
  v15[3] = &unk_1EEFA8970;
  uint64_t v10 = *(void *)(a1 + 64);
  id v9 = *(std::__shared_weak_count **)(a1 + 72);
  uint64_t v18 = v10;
  uint64_t v19 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v11 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v20 = *(void *)(a1 + 80);
  BOOL v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v17 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 32);
  int v22 = a2;
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v10 + 360))(v10, v15, "startRecordForStream_block_invoke");

  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_19D855DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_402(uint64_t a1)
{
  AVVCRecordingEngine::setStreamState(*(void *)(a1 + 48), 3);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 224);
  uint64_t v4 = *(void *)(a1 + 64);
  BOOL v5 = v2 != 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_403;
  v6[3] = &unk_1E5965288;
  id v8 = v2;
  id v7 = *(id *)(a1 + 32);
  uint64_t v9 = v3;
  int v10 = *(_DWORD *)(a1 + 80);
  ControllerImpl::safeNotifyAlwaysAsync(v4, v5, v6);
}

void sub_19D855F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_406(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_403(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(a1 + 56) userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(v2 + 16))(v2, v3, 0, v4);
}

void sub_19D855FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_395(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(a1 + 56) userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(v2 + 16))(v2, v3, 0, v4);
}

void sub_19D856084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettingsU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2_396(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) streamID];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v2 + 16);
  uint64_t v5 = *(void *)(a1 + 48);

  return v4(v2, v3, 1, v5, 0);
}

uint64_t ControllerImpl::startRecordForStream(ControllerImpl *this, AVVoiceController *a2, AVVCStartRecordSettings *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  uint64_t v16 = 0;
  id v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  uint64_t v11[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettings_block_invoke;
  id v11[3] = &unk_1E5965238;
  uint64_t v15 = this;
  id v7 = v5;
  id v12 = v7;
  id v8 = v6;
  id v13 = v8;
  uint64_t v14 = &v16;
  makeSynchronous(v11);
  uint64_t v9 = *((unsigned int *)v17 + 6);

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_19D8561E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettings_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettings_block_invoke_2;
  v9[3] = &unk_1E59652B0;
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  id v10 = v3;
  uint64_t v11 = v6;
  id v8 = v3;
  ControllerImpl::startRecordForStream(v7, v4, v5, v9);
}

void sub_19D8562C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl20startRecordForStreamEP17AVVoiceControllerP23AVVCStartRecordSettings_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a5;
  id v8 = v6;
  if (v6) {
    LODWORD(v6) = [v6 code];
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  if (v7) {
    dispatch_semaphore_signal(v7);
  }
}

void sub_19D856340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ControllerImpl::stopRecordForStream(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      uint64_t v9 = *(id *)kAVVCScope;
      if (v9)
      {
        id v10 = v9;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5009;
          __int16 v19 = 2048;
          uint64_t v20 = a3;
          _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d stopRecordForStream streamID(%lu)", buf, 0x1Cu);
        }
      }
    }
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3321888768;
  id v13[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke;
  unsigned char v13[3] = &unk_1EEFA7FA0;
  uint64_t v11 = *(void *)buf;
  uint64_t v15 = *(void *)buf;
  uint64_t v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = a3;
  id v12 = v8;
  id v14 = v12;
  ControllerImpl::safeWork(v11, v13, (uint64_t)"stopRecordForStream");

  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
}

void sub_19D856510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v25, *(void *)(*(void *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(void *)(a1 + 40) + 584), *(void *)(a1 + 56));
  uint64_t v2 = v25;
  if (!v25)
  {
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_20;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 56);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v28 = "ControllerImpl.mm";
      __int16 v29 = 1024;
      int v30 = 5016;
      __int16 v31 = 2048;
      uint64_t v32 = v9;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Cannot find recording engine for streamID(%lu). Failing.", buf, 0x1Cu);
    }

LABEL_20:
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    BOOL v12 = v10 != 0;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_417;
    v22[3] = &unk_1E5965A60;
    id v13 = v10;
    uint64_t v14 = *(void *)(a1 + 56);
    id v23 = v13;
    uint64_t v24 = v14;
    ControllerImpl::safeNotifyAlwaysAsync(v11, v12, v22);

    uint64_t v4 = v26;
    if (!v26) {
      return;
    }
    goto LABEL_11;
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3321888768;
  id v15[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2;
  v15[3] = &unk_1EEFA8660;
  id v3 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = v26;
  uint64_t v19 = v2;
  uint64_t v20 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  id v16 = v5;
  uint64_t v21 = v6;
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v2 + 360))(v2, v15, "stopRecordForStream_block_invoke");

  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v4) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_19D8567E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (*(void *)(v23 - 88)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v23 - 88));
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_417(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, void))(v1 + 16))(v1, v2, 0, 0);
}

void sub_19D8568B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  RecordLock::RecordLock(v47, v2, v3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(v4 + 224);
  switch(v5)
  {
    case 0:
    case 1:
      if (kAVVCScope)
      {
        id v7 = *(id *)kAVVCScope;
        if (!v7)
        {
LABEL_33:
          uint64_t v21 = *(void **)(a1 + 32);
          uint64_t v22 = *(void *)(a1 + 40);
          BOOL v23 = v21 != 0;
          id v13 = v46;
          v46[0] = MEMORY[0x1E4F143A8];
          v46[1] = 3221225472;
          v46[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_418;
          v46[3] = &unk_1E59652D8;
          id v24 = v21;
          uint64_t v25 = *(void *)(a1 + 72);
          void v46[4] = v24;
          v46[5] = v25;
          v46[6] = v5;
          ControllerImpl::safeNotifyAlwaysAsync(v22, v23, v46);
          goto LABEL_34;
        }
      }
      else
      {
        id v7 = MEMORY[0x1E4F14500];
        id v19 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = "ILLEGAL";
        if (v5 == 1) {
          uint64_t v20 = "Uninitialized";
        }
        id v49 = "ControllerImpl.mm";
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        if (!v5) {
          uint64_t v20 = "Invalid";
        }
        __int16 v50 = 1024;
        int v51 = 5034;
        __int16 v52 = 2080;
        id v53 = (void *)v20;
        _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Attempt to stop on an %s stream.", buf, 0x1Cu);
      }

      goto LABEL_33;
    case 2:
    case 3:
    case 6:
      if (kAVVCScope)
      {
        uint64_t v6 = *(id *)kAVVCScope;
        if (!v6) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v6 = MEMORY[0x1E4F14500];
        id v8 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = off_1E5965820[v5 - 2];
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        id v49 = "ControllerImpl.mm";
        __int16 v50 = 1024;
        int v51 = 5044;
        __int16 v52 = 2080;
        id v53 = v9;
        _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: Attempt to stop while stream is already %s. No-op.", buf, 0x1Cu);
      }

LABEL_16:
      id v10 = *(void **)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      BOOL v12 = v10 != 0;
      id v13 = v45;
      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 3221225472;
      v45[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_419;
      v45[3] = &unk_1E59652D8;
      id v14 = v10;
      uint64_t v15 = *(void *)(a1 + 72);
      void v45[4] = v14;
      v45[5] = v15;
      v45[6] = v5;
      ControllerImpl::safeNotifyAlwaysAsync(v11, v12, v45);
LABEL_34:

      VCLocker::~VCLocker((VCLocker *)v47);
      return;
    case 4:
      if (kAVVCScope)
      {
        id v16 = *(id *)kAVVCScope;
        if (!v16) {
          goto LABEL_39;
        }
      }
      else
      {
        id v16 = MEMORY[0x1E4F14500];
        id v26 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        id v49 = "ControllerImpl.mm";
        __int16 v50 = 1024;
        int v51 = 5061;
        _os_log_impl(&dword_19D794000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: Attempt to stop while stream is about to start. NotifyStartBeforeStop", buf, 0x12u);
      }

LABEL_39:
      int v18 = 1;
      *(unsigned char *)(*(void *)(a1 + 56) + 80) = 1;
      goto LABEL_45;
    case 5:
      if (!*(_DWORD *)(v4 + 232)) {
        goto LABEL_24;
      }
      if (kAVVCScope)
      {
        id v17 = *(id *)kAVVCScope;
        if (!v17) {
          goto LABEL_44;
        }
      }
      else
      {
        id v17 = (id)MEMORY[0x1E4F14500];
        id v27 = MEMORY[0x1E4F14500];
      }
      int v28 = v17;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = *(_DWORD *)(*(void *)(a1 + 56) + 232);
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        id v49 = "ControllerImpl.mm";
        __int16 v50 = 1024;
        int v51 = 5054;
        __int16 v52 = 1024;
        LODWORD(v5AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v29;
        _os_log_impl(&dword_19D794000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d stopRecordForStream: an error : %d  occurred while recording and we need to synthesize doneRecording", buf, 0x18u);
      }

LABEL_44:
      int v18 = 1;
LABEL_45:
      int v30 = *(unsigned char **)(a1 + 56);
      v30[253] = 1;
      unsigned int v31 = (*(uint64_t (**)(unsigned char *))(*(void *)v30 + 104))(v30);
      if (v31)
      {
        if (kAVVCScope)
        {
          uint64_t v32 = *(id *)kAVVCScope;
          if (!v32)
          {
LABEL_55:
            AVVCRecordingEngine::setRecordErrorStatus(*(AVVCRecordingEngine **)(a1 + 56), v31, "stopRecordForStream_block_invoke");
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v32 = MEMORY[0x1E4F14500];
          id v33 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          id v49 = "ControllerImpl.mm";
          __int16 v50 = 1024;
          int v51 = 5076;
          __int16 v52 = 1024;
          LODWORD(v5AVVCRecordingEngine::setStreamState((uint64_t)this, 3) = v31;
          _os_log_impl(&dword_19D794000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d stopRecordForStream: Error stopping record engine: %d", buf, 0x18u);
        }

        goto LABEL_55;
      }
      if (!v18) {
        goto LABEL_57;
      }
LABEL_56:
      AVVCRecordingEngine::doneRecording(*(AVVCRecordingEngine **)(a1 + 56));
LABEL_57:
      VCLocker::~VCLocker((VCLocker *)v47);
      uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 224);
      __int16 v35 = *(void **)(a1 + 32);
      uint64_t v36 = *(void *)(a1 + 40);
      BOOL v37 = v35 != 0;
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      v40[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_421;
      v40[3] = &unk_1E5965300;
      id v38 = v35;
      uint64_t v39 = *(void *)(a1 + 72);
      id v41 = v38;
      uint64_t v42 = v39;
      unsigned int v44 = v31;
      uint64_t v43 = v34;
      ControllerImpl::safeNotifyAlwaysAsync(v36, v37, v40);

      return;
    default:
LABEL_24:
      int v18 = 0;
      goto LABEL_45;
  }
}

void sub_19D856EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  VCLocker::~VCLocker((VCLocker *)(v28 - 112));
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14ControllerImplEE56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14ControllerImplEE56c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_418(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11781 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(v1 + 16))(v1, v2, 0, v3);
}

void sub_19D857058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_419(void *a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void, void))(a1[4] + 16))(a1[4], a1[5], 1, a1[6], 0);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_421(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  BOOL v3 = *(_DWORD *)(a1 + 56) == 0;
  uint64_t v4 = *(void *)(a1 + 48);
  objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", *MEMORY[0x1E4F28760]);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t))(v1 + 16))(v1, v2, v3, v4);
}

void sub_19D857124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::stopRecordForStream(ControllerImpl *this, AVVoiceController *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllerm_block_invoke;
  v9[3] = &unk_1E5965328;
  BOOL v12 = this;
  uint64_t v6 = v5;
  uint64_t v13 = a3;
  id v10 = v6;
  uint64_t v11 = &v14;
  makeSynchronous(v9);
  uint64_t v7 = *((unsigned int *)v15 + 6);

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_19D85720C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllerm_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllerm_block_invoke_2;
  v9[3] = &unk_1E59652B0;
  uint64_t v7 = (void *)a1[4];
  uint64_t v6 = a1[5];
  id v10 = v3;
  uint64_t v11 = v6;
  id v8 = v3;
  ControllerImpl::stopRecordForStream(v4, v7, v5, v9);
}

void sub_19D8572DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19stopRecordForStreamEP17AVVoiceControllerm_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v7 code];
  uint64_t v6 = *(NSObject **)(a1 + 32);
  if (v6) {
    dispatch_semaphore_signal(v6);
  }
}

void sub_19D857354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v25, *(void *)(*(void *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(void *)(a1 + 40) + 584), *(void *)(a1 + 56));
  uint64_t v2 = v25;
  if (!v25)
  {
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_20;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 56);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v28 = "ControllerImpl.mm";
      __int16 v29 = 1024;
      int v30 = 5121;
      __int16 v31 = 2048;
      uint64_t v32 = v9;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d getCurrentStreamState: Cannot find recording engine for streamID(%lu).", buf, 0x1Cu);
    }

LABEL_20:
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    BOOL v12 = v10 != 0;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    v22[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_425;
    v22[3] = &unk_1E5965A60;
    id v13 = v10;
    uint64_t v14 = *(void *)(a1 + 56);
    id v23 = v13;
    uint64_t v24 = v14;
    ControllerImpl::safeNotifyAlwaysAsync(v11, v12, v22);

    id v3 = v26;
    if (!v26) {
      return;
    }
    goto LABEL_11;
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3321888768;
  id v15[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2;
  v15[3] = &unk_1EEFA8698;
  id v3 = v26;
  uint64_t v17 = v25;
  int v18 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  id v16 = v5;
  uint64_t v21 = v6;
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v2 + 360))(v2, v15, "getCurrentStreamStateForStream_block_invoke");

  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v3) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D8575F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (*(void *)(v23 - 88)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v23 - 88));
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_425(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void, void))(v1 + 16))(v1, v2, 0, 0);
}

void sub_19D8576CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_2(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[5] + 224);
  uint64_t v4 = a1[7];
  BOOL v5 = v2 != 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3;
  v8[3] = &unk_1E59652D8;
  id v6 = v2;
  uint64_t v7 = a1[9];
  id v9 = v6;
  uint64_t v10 = v7;
  uint64_t v11 = v3;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v5, v8);
}

void sub_19D857790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19AVVCRecordingEngineEE56c42_ZTSNSt3__110shared_ptrI14ControllerImplEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke_3(void *a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void, void))(a1[4] + 16))(a1[4], a1[5], 1, a1[6], 0);
}

uint64_t ControllerImpl::getCurrentStreamStateForStream(ControllerImpl *this, AVVoiceController *a2, uint64_t a3)
{
  BOOL v5 = a2;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  uint64_t v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllerm_block_invoke;
  v9[3] = &unk_1E5965328;
  BOOL v12 = this;
  uint64_t v13 = a3;
  uint64_t v10 = v5;
  uint64_t v11 = &v14;
  id v6 = v5;
  makeSynchronous(v9);
  uint64_t v7 = v15[3];

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_19D857910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Block_object_dispose((const void *)(v14 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllerm_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = a1[6];
  uint64_t v4 = a1[7];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  uint64_t v11[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllerm_block_invoke_2;
  id v11[3] = &unk_1E59652B0;
  uint64_t v6 = a1[5];
  id v12 = v3;
  uint64_t v13 = v6;
  id v7 = v3;
  id v8 = v11;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v19, *(void *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  id v14[2] = ___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllermU13block_pointerFvmb15AVVCStreamStateP7NSErrorE_block_invoke;
  v14[3] = &unk_1EEFA7FA0;
  uint64_t v9 = v19;
  uint64_t v16 = v19;
  uint64_t v17 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v4;
  uint64_t v10 = v8;
  id v15 = v10;
  ControllerImpl::safeWork(v9, v14, (uint64_t)"getCurrentStreamStateForStream");

  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_19D857A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }

  _Unwind_Resume(a1);
}

NSObject *___ZN14ControllerImpl30getCurrentStreamStateForStreamEP17AVVoiceControllerm_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a4;
  __n128 result = *(NSObject **)(a1 + 32);
  if (result) {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v24, *(void *)(*(void *)(a1 + 40) + 576), *(std::__shared_weak_count **)(*(void *)(a1 + 40) + 584), *(void *)(a1 + 56));
  uint64_t v2 = v24;
  if (!v24)
  {
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_20;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      id v27 = "ControllerImpl.mm";
      __int16 v28 = 1024;
      int v29 = 5156;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d getRecordBufferDurationForStream: Nil recording engine", buf, 0x12u);
    }

LABEL_20:
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    BOOL v11 = v9 != 0;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    uint64_t v21[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_428;
    v21[3] = &unk_1E5965A60;
    id v12 = v9;
    uint64_t v13 = *(void *)(a1 + 56);
    id v22 = v12;
    uint64_t v23 = v13;
    ControllerImpl::safeNotifyAlwaysAsync(v10, v11, v21);

    id v3 = v25;
    if (!v25) {
      return;
    }
    goto LABEL_11;
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  id v14[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_2;
  v14[3] = &unk_1EEFA8698;
  id v3 = v25;
  uint64_t v16 = v24;
  uint64_t v17 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  id v15 = v5;
  uint64_t v20 = v6;
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v2 + 360))(v2, v14, "getRecordBufferDurationForStream_block_invoke");

  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v3) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_19D857D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (*(void *)(v23 - 72)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v23 - 72));
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_428(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 16))(v1, v2, 0.0);
}

void sub_19D857E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_2(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  double v3 = *(double *)(v2 + 24);
  if (v3 == 0.0 || (unsigned int v4 = *(_DWORD *)(v2 + 256)) == 0)
  {
    double v6 = *(double *)(v2 + 264);
    goto LABEL_14;
  }
  if (*(_DWORD *)(v2 + 32) != 1936745848 || (int v5 = *(_DWORD *)(v2 + 44), v5 == 1600) || v5 == 3200)
  {
    double v6 = (float)(1.0 / (float)v4);
    if (kAVVCScope)
    {
      id v7 = *(id *)kAVVCScope;
      if (!v7) {
        goto LABEL_14;
      }
    }
    else
    {
      id v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&double v9 = *(unsigned int *)(v2 + 256);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v24 = "AVVCRecordingEngine.mm";
      __int16 v25 = 1024;
      int v26 = 462;
      __int16 v27 = 2048;
      double v28 = v9;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getRecordBufferDuration: choice 2 mRecordBasePacketsPerSecond (%lu)", buf, 0x1Cu);
    }
LABEL_13:

    goto LABEL_14;
  }
  double v6 = (double)(2 * v5) / v3;
  if (!kAVVCScope)
  {
    id v7 = MEMORY[0x1E4F14500];
    id v17 = MEMORY[0x1E4F14500];
LABEL_26:
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&double v18 = *(unsigned int *)(v2 + 256);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v24 = "AVVCRecordingEngine.mm";
      __int16 v25 = 1024;
      int v26 = 458;
      __int16 v27 = 2048;
      double v28 = v18;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getRecordBufferDuration: choice 1 mRecordBasePacketsPerSecond (%lu)", buf, 0x1Cu);
    }
    goto LABEL_13;
  }
  id v7 = *(id *)kAVVCScope;
  if (v7) {
    goto LABEL_26;
  }
LABEL_14:
  if (kAVVCScope)
  {
    uint64_t v10 = *(id *)kAVVCScope;
    if (!v10) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4F14500];
    id v11 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    uint64_t v24 = "AVVCRecordingEngine.mm";
    __int16 v25 = 1024;
    int v26 = 469;
    __int16 v27 = 2048;
    double v28 = v6;
    _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d getRecordBufferDuration: returning %.3f seconds", buf, 0x1Cu);
  }

LABEL_21:
  uint64_t v12 = a1[7];
  uint64_t v13 = (void *)a1[4];
  BOOL v14 = v13 != 0;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  double v19[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_3;
  void v19[3] = &unk_1E59652D8;
  id v15 = v13;
  uint64_t v16 = a1[9];
  id v20 = v15;
  uint64_t v21 = v16;
  double v22 = v6;
  ControllerImpl::safeNotifyAlwaysAsync(v12, v14, v19);
}

void sub_19D858158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke_3(double *a1)
{
  uint64_t v1 = *((void *)a1 + 4);
  uint64_t v2 = *((void *)a1 + 5);
  double v3 = a1[6];
  id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:0 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 16))(v1, v2, v3);
}

void sub_19D858200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double ControllerImpl::getRecordBufferDurationForStream(ControllerImpl *this, uint64_t a2)
{
  uint64_t v5 = 0;
  double v6 = (double *)&v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  int v4[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEm_block_invoke;
  v4[3] = &unk_1E5965378;
  void v4[5] = this;
  v4[6] = a2;
  v4[4] = &v5;
  makeSynchronous(v4);
  double v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19D8582C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl32getRecordBufferDurationForStreamEm_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = a1[5];
  uint64_t v4 = a1[6];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  uint64_t v11[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEm_block_invoke_2;
  id v11[3] = &unk_1E5965350;
  uint64_t v6 = a1[4];
  id v12 = v3;
  uint64_t v13 = v6;
  id v7 = v3;
  uint64_t v8 = v11;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v19, *(void *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  id v14[2] = ___ZN14ControllerImpl32getRecordBufferDurationForStreamEmU13block_pointerFvmdP7NSErrorE_block_invoke;
  v14[3] = &unk_1EEFA7FA0;
  uint64_t v9 = v19;
  uint64_t v16 = v19;
  id v17 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v4;
  uint64_t v10 = v8;
  id v15 = v10;
  ControllerImpl::safeWork(v9, v14, (uint64_t)"getRecordBufferDurationForStream");

  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_19D85842C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  __int16 v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }

  _Unwind_Resume(a1);
}

NSObject *___ZN14ControllerImpl32getRecordBufferDurationForStreamEm_block_invoke_2(uint64_t a1, double a2)
{
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  __n128 result = *(NSObject **)(a1 + 32);
  if (result) {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void ControllerImpl::configureAlertBehaviorForStream(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (kAVVCScope)
  {
    if (*(unsigned char *)(kAVVCScope + 8))
    {
      id v10 = *(id *)kAVVCScope;
      if (v10)
      {
        id v11 = v10;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5190;
          __int16 v22 = 2048;
          uint64_t v23 = [v8 streamID];
          _os_log_impl(&dword_19D794000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d configureAlertBehaviorForStream completion streamID(%lu)", buf, 0x1Cu);
        }
      }
    }
  }
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
  uint64_t v12 = *(void *)buf;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3321888768;
  id v15[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke;
  v15[3] = &unk_1EEFA8468;
  uint64_t v18 = a1;
  id v13 = v8;
  id v16 = v13;
  uint64_t v19 = v12;
  id v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
  }
  id v14 = v9;
  id v17 = v14;
  ControllerImpl::safeWork(v12, v15, (uint64_t)"configureAlertBehaviorForStream");

  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }

  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
}

void sub_19D85867C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v27, *(void *)(v2 + 576), *(std::__shared_weak_count **)(v2 + 584), [*(id *)(a1 + 32) streamID]);
  uint64_t v3 = v27;
  if (!v27)
  {
    if (kAVVCScope)
    {
      id v10 = *(id *)kAVVCScope;
      if (!v10) {
        goto LABEL_20;
      }
    }
    else
    {
      id v10 = (id)MEMORY[0x1E4F14500];
      id v11 = MEMORY[0x1E4F14500];
    }
    uint64_t v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = [*(id *)(a1 + 32) streamID];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v30 = "ControllerImpl.mm";
      __int16 v31 = 1024;
      int v32 = 5197;
      __int16 v33 = 2048;
      uint64_t v34 = v13;
      _os_log_impl(&dword_19D794000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d startRecordForStream: Cannot find recording engine for streamID(%lu). Failing.", buf, 0x1Cu);
    }

LABEL_20:
    uint64_t v14 = *(void *)(a1 + 56);
    id v15 = *(void **)(a1 + 40);
    BOOL v16 = v15 != 0;
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_432;
    v25[3] = &unk_1E5965A18;
    id v26 = v15;
    ControllerImpl::safeNotifyAlwaysAsync(v14, v16, v25);

    id v8 = v28;
    if (!v28) {
      return;
    }
    goto LABEL_11;
  }
  uint64_t v4 = *(void **)(a1 + 56);
  v4[43] = -1;
  v4[44] = -1;
  v4[42] = -1;
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(v5 + 336) = [*(id *)(a1 + 32) startAlert];
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(v6 + 344) = [*(id *)(a1 + 32) stopAlert];
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(v7 + 352) = [*(id *)(a1 + 32) stopOnErrorAlert];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3321888768;
  v17[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_2;
  void v17[3] = &unk_1EEFA8AC0;
  uint64_t v20 = v2;
  uint64_t v21 = v3;
  id v8 = v28;
  __int16 v22 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v9 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v24 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v19 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 32);
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v3 + 360))(v3, v17, "configureAlertBehaviorForStream_block_invoke");

  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v8) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_19D8589D8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 88);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_432(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_19D858AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (*(void (**)(void, void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56), 0);
  BOOL v4 = [v3 sessionState] == 7;

  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(v5 + 280);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  uint64_t v11[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_3;
  id v11[3] = &unk_1EEFA8D20;
  BOOL v20 = v4;
  uint64_t v14 = v2;
  uint64_t v15 = v6;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v16 = v5;
  id v17 = v7;
  uint64_t v9 = v8;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(void *)(a1 + 72);
  }
  id v10 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v18 = v9;
  id v19 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v13 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  ControllerImpl::safeWork(v8, v11, (uint64_t)"configureAlertBehaviorForStream_block_invoke");

  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_19D858C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_3(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 96))
  {
    if (kAVVCScope)
    {
      id v6 = *(id *)kAVVCScope;
      if (!v6)
      {
LABEL_17:
        uint64_t v10 = *(void *)(a1 + 80);
        id v11 = *(void **)(a1 + 40);
        BOOL v12 = v11 != 0;
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        id v13[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_435;
        unsigned char v13[3] = &unk_1E5965A18;
        id v14 = v11;
        ControllerImpl::safeNotifyAlwaysAsync(v10, v12, v13);

        return;
      }
    }
    else
    {
      id v6 = (id)MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    uint64_t v8 = v6;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = [*(id *)(a1 + 32) streamID];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v21 = "ControllerImpl.mm";
      __int16 v22 = 1024;
      int v23 = 5234;
      __int16 v24 = 2048;
      uint64_t v25 = v9;
      _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d configureAlertBehaviorForStream: session not active so can't config alerts for streamID(%lu)", buf, 0x1Cu);
    }

    goto LABEL_17;
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 72);
  v19[0] = *(void *)(a1 + 64);
  v19[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3321888768;
  id v15[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_4;
  v15[3] = &unk_1EEFA7C78;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v16 = *(id *)(a1 + 40);
  ControllerImpl::configureAlertModeFromModeAndEngine(v2, v3, v19, v15);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_19D858EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_4(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  BOOL v5 = v3 != 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_5;
  v6[3] = &unk_1E5964EC8;
  id v7 = v3;
  int v8 = a2;
  ControllerImpl::safeNotifyAlwaysAsync(v4, v5, v6);
}

void sub_19D858F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_435(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11782 userInfo:0];
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_19D859028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettingsU13block_pointerFvP7NSErrorE_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:*(int *)(a1 + 40) userInfo:0];
  (*(void (**)(uint64_t))(v1 + 16))(v1);
}

void sub_19D8590B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ControllerImpl::configureAlertBehaviorForStream(ControllerImpl *this, AVVoiceController *a2, AVVCConfigureAlertBehaviorSettings *a3)
{
  BOOL v5 = a2;
  id v6 = a3;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  int v19 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  uint64_t v11[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettings_block_invoke;
  id v11[3] = &unk_1E5965238;
  uint64_t v15 = this;
  id v7 = v5;
  BOOL v12 = v7;
  int v8 = v6;
  id v13 = v8;
  id v14 = &v16;
  makeSynchronous(v11);
  uint64_t v9 = *((unsigned int *)v17 + 6);

  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_19D8591C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettings_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[4];
  BOOL v5 = (void *)a1[5];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettings_block_invoke_2;
  v9[3] = &unk_1E5964EF0;
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  id v10 = v3;
  uint64_t v11 = v6;
  id v8 = v3;
  ControllerImpl::configureAlertBehaviorForStream(v7, v4, v5, v9);
}

void sub_19D8592A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl31configureAlertBehaviorForStreamEP17AVVoiceControllerP34AVVCConfigureAlertBehaviorSettings_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3) {
    LODWORD(vAVVCRecordingEngine::setStreamState((uint64_t)this, 3) = [v3 code];
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;
  uint64_t v4 = *(NSObject **)(a1 + 32);
  if (v4) {
    dispatch_semaphore_signal(v4);
  }
}

void sub_19D859320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19getAVVCSessionStateEmU13block_pointerFvm16AVVCSessionStateP7NSErrorE_block_invoke(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v2 = ControllerImpl::sessionManagerForStreamID(a1[5], a1[7], 0);
  id v3 = v2;
  if (!v2)
  {
    if (kAVVCScope)
    {
      uint64_t v7 = *(id *)kAVVCScope;
      if (!v7)
      {
LABEL_12:
        id v5 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
        uint64_t v6 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v7 = MEMORY[0x1E4F14500];
      id v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a1[7];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v21 = "ControllerImpl.mm";
      __int16 v22 = 1024;
      int v23 = 5316;
      __int16 v24 = 2048;
      uint64_t v25 = v9;
      _os_log_impl(&dword_19D794000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: Cannot find sessionManager for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_12;
  }
  unsigned int v4 = [v2 sessionState] - 1;
  if (v4 > 6)
  {
    uint64_t v6 = 0;
    id v5 = 0;
  }
  else
  {
    id v5 = 0;
    uint64_t v6 = qword_19D8B1FC0[v4];
  }
LABEL_13:
  id v10 = (void *)a1[4];
  uint64_t v11 = a1[5];
  BOOL v12 = v10 != 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  id v15[2] = ___ZN14ControllerImpl19getAVVCSessionStateEmU13block_pointerFvm16AVVCSessionStateP7NSErrorE_block_invoke_444;
  v15[3] = &unk_1E59653A0;
  id v13 = v10;
  uint64_t v18 = a1[7];
  uint64_t v19 = v6;
  id v16 = v5;
  id v17 = v13;
  id v14 = v5;
  ControllerImpl::safeNotifyAlwaysAsync(v11, v12, v15);
}

void sub_19D859540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14ControllerImpl19getAVVCSessionStateEmU13block_pointerFvm16AVVCSessionStateP7NSErrorE_block_invoke_444(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16))(a1[5], a1[6], a1[7], a1[4]);
}

uint64_t ControllerImpl::getAVVCSessionState(ControllerImpl *this, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  int v4[2] = ___ZN14ControllerImpl19getAVVCSessionStateEm_block_invoke;
  v4[3] = &unk_1E5965378;
  void v4[5] = this;
  v4[6] = a2;
  v4[4] = &v5;
  makeSynchronous(v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_19D859634(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl19getAVVCSessionStateEm_block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = a1[5];
  uint64_t v4 = a1[6];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  uint64_t v11[2] = ___ZN14ControllerImpl19getAVVCSessionStateEm_block_invoke_2;
  id v11[3] = &unk_1E59653C8;
  uint64_t v6 = a1[4];
  id v12 = v3;
  uint64_t v13 = v6;
  id v7 = v3;
  uint64_t v8 = v11;
  std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v19, *(void *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  id v14[2] = ___ZN14ControllerImpl19getAVVCSessionStateEmU13block_pointerFvm16AVVCSessionStateP7NSErrorE_block_invoke;
  v14[3] = &unk_1EEFA7FA0;
  uint64_t v9 = v19;
  uint64_t v16 = v19;
  id v17 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v4;
  id v10 = v8;
  id v15 = v10;
  ControllerImpl::safeWork(v9, v14, (uint64_t)"getAVVCSessionState");

  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_19D85979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }

  _Unwind_Resume(a1);
}

NSObject *___ZN14ControllerImpl19getAVVCSessionStateEm_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
  __n128 result = *(NSObject **)(a1 + 32);
  if (result) {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void ___ZN14ControllerImpl12checkSessionEP17AVVoiceControllermb_block_invoke(uint64_t a1)
{
  uint64_t v2 = (*(void (**)(void, void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56), 0);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (int)[v2 sessionState] < 5;

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = AVVCRecordingEngine::setSessionActive(*(AVVCRecordingEngine **)(a1 + 56), *(unsigned __int8 *)(a1 + 72), (BOOL *)(*(void *)(*(void *)(a1 + 48) + 8)+ 24));
  }
}

void sub_19D85989C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v28, *(void *)(*(void *)(a1 + 56) + 576), *(std::__shared_weak_count **)(*(void *)(a1 + 56) + 584), *(void *)(a1 + 72));
  uint64_t v3 = v28;
  if (!v28)
  {
    if (kAVVCScope)
    {
      uint64_t v6 = *(id *)kAVVCScope;
      if (!v6) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v6 = MEMORY[0x1E4F14500];
      id v7 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 72);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      __int16 v31 = "ControllerImpl.mm";
      __int16 v32 = 1024;
      int v33 = 5427;
      __int16 v34 = 2048;
      uint64_t v35 = v8;
      _os_log_impl(&dword_19D794000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Cannot find recording engine for streamID(%lu). Bailing.", buf, 0x1Cu);
    }

LABEL_20:
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = *(void **)(a1 + 40);
    BOOL v11 = v10 != 0;
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_449;
    v25[3] = &unk_1E5965A60;
    id v12 = v10;
    uint64_t v13 = *(void *)(a1 + 72);
    id v26 = v12;
    uint64_t v27 = v13;
    ControllerImpl::safeNotifyAlwaysAsync(v9, v11, v25);

    uint64_t v4 = v29;
    if (!v29) {
      return;
    }
    goto LABEL_11;
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  id v14[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_2;
  v14[3] = &unk_1EEFA8D90;
  uint64_t v17 = v2;
  uint64_t v18 = v28;
  uint64_t v4 = v29;
  uint64_t v19 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v21 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = *(void *)(a1 + 72);
  char v23 = *(unsigned char *)(a1 + 80);
  id v16 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  char v24 = *(unsigned char *)(a1 + 81);
  (*(void (**)(uint64_t, void *, const char *))(*(void *)v3 + 360))(v3, v14, "activateAudioSessionForStream_block_invoke");

  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v4) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_19D859B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (*(void *)(v27 - 88)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v27 - 88));
  }
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_449(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F28760] code:-11793 userInfo:0];
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 16))(v1, v2, 0);
}

void sub_19D859C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_2(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = AVVCRecordingEngine::getActivationContextSettings(*(AVVCRecordingEngine **)(a1 + 56));
  uint64_t v4 = [v3 activationMode];
  uint64_t v5 = [v3 activationDeviceUID];
  if (v5) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v4 == 1986357346;
  }
  if (v6)
  {
    uint64_t v5 = AVVCRouteManager::getRecordDeviceUID(*(id **)(*(void *)(a1 + 56) + 376));
  }
  if (![v3 announceCallsEnabled])
  {
    uint64_t v8 = 0;
    goto LABEL_17;
  }
  if (!kAVVCScope)
  {
    id v7 = (id)MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
    goto LABEL_13;
  }
  id v7 = *(id *)kAVVCScope;
  if (v7)
  {
LABEL_13:
    id v10 = v7;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v31, v4);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v33 = "ControllerImpl.mm";
      __int16 v34 = 1024;
      int v35 = 5461;
      __int16 v36 = 2080;
      BOOL v37 = v31;
      _os_log_impl(&dword_19D794000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Announce option set for %s activation mode", buf, 0x1Cu);
    }
  }
  uint64_t v8 = 1;
LABEL_17:
  uint64_t v11 = *(void *)(a1 + 72);
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3321888768;
  v17[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_450;
  void v17[3] = &unk_1EEFA7B78;
  uint64_t v21 = v2;
  id v12 = v5;
  id v18 = v12;
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v22 = v4;
  uint64_t v23 = v14;
  char v24 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(void *)(a1 + 56);
  id v15 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 88);
  uint64_t v26 = v16;
  uint64_t v27 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v29 = *(unsigned char *)(a1 + 96);
  id v20 = *(id *)(a1 + 40);
  uint64_t v28 = v8;
  id v19 = *(id *)(a1 + 32);
  char v30 = *(unsigned char *)(a1 + 97);
  ControllerImpl::safeWork(v11, v17, (uint64_t)"activateAudioSessionForStream_block_invoke");

  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_19D859EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_450(uint64_t a1)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  BOOL v3 = *(void *)(a1 + 32) == 0;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9E8]);
  uint64_t v5 = [NSNumber numberWithInteger:*(void *)(a1 + 64)];
  if (v3) {
    uint64_t v6 = objc_msgSend(v4, "initWithObjectsAndKeys:", v5, @"activation trigger", 0);
  }
  else {
    uint64_t v6 = objc_msgSend(v4, "initWithObjectsAndKeys:", v5, @"activation trigger", *(void *)(a1 + 32), @"activation device uid", 0);
  }
  id v7 = (void *)v6;

  objc_storeStrong((id *)(*(void *)(a1 + 72) + 456), v7);
  if (kAVVCScope)
  {
    uint64_t v8 = *(id *)kAVVCScope;
    if (!v8) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F14500];
    id v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 88);
    uint64_t v11 = *(void *)(v2 + 456);
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5482;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v10;
    *(_WORD *)&unsigned char buf[28] = 2112;
    *(void *)&buf[30] = v11;
    _os_log_impl(&dword_19D794000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d About to activate audio session for stream(%lu). Current context: %@", buf, 0x26u);
  }

LABEL_11:
  uint64_t v123 = 0;
  id v124 = &v123;
  uint64_t v125 = 0x2020000000;
  int v126 = 0;
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 80);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SessionLock::SessionLock(v122, v12, v13);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v118 = 0;
  __int16 v119 = &v118;
  uint64_t v120 = 0x2020000000;
  char v121 = 0;
  v105[0] = MEMORY[0x1E4F143A8];
  v105[1] = 3321888768;
  v105[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_451;
  v105[3] = &unk_1EEFA7B40;
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = *(void *)(a1 + 96);
  char v117 = *(unsigned char *)(a1 + 120);
  uint64_t v110 = v14;
  uint64_t v111 = v15;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 104);
  OSStatus v112 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v108 = &v123;
  id v17 = v7;
  uint64_t v19 = *(void *)(a1 + 72);
  id v18 = *(std::__shared_weak_count **)(a1 + 80);
  id v106 = v17;
  uint64_t v113 = v19;
  int v114 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v107 = *(id *)(a1 + 48);
  int v109 = &v118;
  uint64_t v20 = *(void *)(a1 + 112);
  uint64_t v115 = *(void *)(a1 + 64);
  uint64_t v116 = v20;
  (*(void (**)(uint64_t, void *))(*(void *)v15 + 376))(v15, v105);
  if (!*((unsigned char *)v119 + 24))
  {
    uint64_t v21 = *(void *)(a1 + 72);
    *(void *)(v21 + 528) = *(void *)(a1 + 64);
    uint64_t v22 = *(std::__shared_weak_count **)(a1 + 80);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SessionUnlocker::SessionUnlocker(v104, v21, v22);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    uint64_t v23 = *(void *)(a1 + 72);
    unint64_t v24 = *(void *)(a1 + 88);
    char v25 = *(unsigned char *)(a1 + 120);
    uint64_t v26 = (AVVoiceController *)*(id *)(a1 + 40);
    TraceMethod::TraceMethod((TraceMethod *)v145, "checkSession");
    std::shared_ptr<AVVCRecordingEngine>::shared_ptr[abi:ne180100]<AVVCRecordingEngine,void>(&v143, *(void *)(v23 + 8), *(std::__shared_weak_count **)(v23 + 16));
    uint64_t v139 = 0;
    id v140 = &v139;
    uint64_t v141 = 0x2020000000;
    int v142 = 0;
    uint64_t v135 = 0;
    id v136 = &v135;
    uint64_t v137 = 0x2020000000;
    char v138 = 0;
    uint64_t v131 = 0;
    double v132 = &v131;
    uint64_t v133 = 0x2020000000;
    char v134 = 0;
    ControllerImpl::_lookupEngineForStreamID((ControllerImpl *)&v129, *((void *)v143 + 72), *((std::__shared_weak_count **)v143 + 73), v24);
    uint64_t v27 = v129;
    if (v129)
    {
      uint64_t v28 = v143;
      char v29 = v144;
      if (v144) {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SessionLock::SessionLock(v128, (uint64_t)v28, v29);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      uint64_t v30 = *((void *)v143 + 59);
      *((void *)v143 + 59) = v24;
      *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3321888768;
      *(void *)&uint8_t buf[16] = ___ZN14ControllerImpl12checkSessionEP17AVVoiceControllermb_block_invoke;
      *(void *)&buf[24] = &unk_1EEFA2C78;
      *(void *)&unsigned char buf[32] = &v131;
      __int16 v31 = v130;
      uint64_t v149 = v27;
      int v150 = v130;
      if (v130) {
        atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v151 = v25;
      uint64_t v147 = &v139;
      long long v148 = &v135;
      (*(void (**)(AVVCRecordingEngine *, unsigned char *))(*(void *)v27 + 376))(v27, buf);
      if (*((unsigned char *)v136 + 24) || *((_DWORD *)v140 + 6) || !*((unsigned char *)v132 + 24))
      {
        *((void *)v143 + 59) = v30;
LABEL_34:
        if (*((_DWORD *)v140 + 6) == -11795) {
          *((void *)v143 + 59) = 0;
        }
        if (v150) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v150);
        }
        VCLocker::~VCLocker((VCLocker *)v128);
        if (*((_DWORD *)v140 + 6)
          || (+[AVVCKeepAliveManager sharedManager],
              __int16 v34 = objc_claimAutoreleasedReturnValue(),
              BOOL v35 = v34 == 0,
              v34,
              v35)
          || *((_DWORD *)v143 + 90)
          || (int v32 = ControllerImpl::configureAlerts(v143, v26), (*((_DWORD *)v140 + 6) = v32) == 0))
        {
          int v32 = *((_DWORD *)v140 + 6);
        }
LABEL_52:
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        _Block_object_dispose(&v131, 8);
        _Block_object_dispose(&v135, 8);
        _Block_object_dispose(&v139, 8);
        if (v144) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v144);
        }
        TraceMethod::~TraceMethod((TraceMethod *)v145);

        BOOL v37 = v124;
        *((_DWORD *)v124 + 6) = v32;
        if (!v32)
        {
          char v39 = *(unsigned char *)(a1 + 121);
          if (v39) {
            BOOL v40 = *(unsigned char *)(a1 + 120) == 0;
          }
          else {
            BOOL v40 = 0;
          }
          v90[0] = MEMORY[0x1E4F143A8];
          v90[1] = 3321888768;
          v90[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_2_458;
          v90[3] = &unk_1EEFA8BD8;
          uint64_t v49 = *(void *)(a1 + 96);
          int v48 = *(std::__shared_weak_count **)(a1 + 104);
          uint64_t v93 = v49;
          long long v94 = v48;
          if (v48)
          {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            char v39 = *(unsigned char *)(a1 + 121);
          }
          char v98 = v39;
          BOOL v99 = v40;
          uint64_t v51 = *(void *)(a1 + 72);
          __int16 v50 = *(std::__shared_weak_count **)(a1 + 80);
          uint64_t v92 = &v123;
          uint64_t v95 = v51;
          id v96 = v50;
          if (v50) {
            atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          id v52 = *(id *)(a1 + 48);
          uint64_t v53 = *(void *)(a1 + 88);
          id v91 = v52;
          uint64_t v97 = v53;
          (*(void (**)(uint64_t, void *, const char *))(*(void *)v49 + 360))(v49, v90, "activateAudioSessionForStream_block_invoke");

          if (v96) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v96);
          }
          if (v94) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v94);
          }
          goto LABEL_76;
        }
        if (kAVVCScope)
        {
          uint64_t v38 = *(id *)kAVVCScope;
          if (!v38)
          {
LABEL_66:
            uint64_t v43 = *(void *)(a1 + 72);
            unsigned int v44 = *(void **)(a1 + 48);
            BOOL v45 = v44 != 0;
            v100[0] = MEMORY[0x1E4F143A8];
            v100[1] = 3221225472;
            v100[2] = ___ZN14ControllerImpl29activateAudioSessionForStreamEP17AVVoiceControllermbbU13block_pointerFvmbP7NSErrorE_block_invoke_457;
            v100[3] = &unk_1E59653F0;
            id v46 = v44;
            uint64_t v47 = *(void *)(a1 + 88);
            id v101 = v46;
            id v102 = &v123;
            uint64_t v103 = v47;
            ControllerImpl::safeNotifyAlwaysAsync(v43, v45, v100);

LABEL_76:
            VCUnlocker::~VCUnlocker((VCUnlocker *)v104);
            goto LABEL_77;
          }
        }
        else
        {
          uint64_t v38 = MEMORY[0x1E4F14500];
          id v41 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          int v42 = *((_DWORD *)v37 + 6);
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5572;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v42;
          _os_log_impl(&dword_19D794000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d activateAudioSessionForStream ERROR: Failed checkSession at setAudioSessionActive OSStatus(%d).", buf, 0x18u);
        }

        goto LABEL_66;
      }
      uint64_t v54 = (*(void (**)(AVVCRecordingEngine *, void))(*(void *)v27 + 64))(v27, 0);
      uint64_t v55 = [v54 isPrimary];

      int v56 = v143;
      if (!v55)
      {
LABEL_158:
        v127[0] = v27;
        v127[1] = (AVVCRecordingEngine *)v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        ControllerImpl::startKeepAliveQueue(*((void *)v56 + 1), *((std::__shared_weak_count **)v56 + 2), v127);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        goto LABEL_34;
      }
      int8x8_t v57 = *(int8x8_t *)((char *)v143 + 488);
      unint64_t v88 = (unint64_t)v57;
      if (v57)
      {
        uint8x8_t v58 = (uint8x8_t)vcnt_s8(v57);
        v58.i16[0] = vaddlv_u8(v58);
        if (v58.u32[0] > 1uLL)
        {
          uint64_t v55 = v24;
          if (v24 >= *(void *)&v57) {
            uint64_t v55 = v24 % *(void *)&v57;
          }
        }
        else
        {
          uint64_t v55 = (*(void *)&v57 - 1) & v24;
        }
        __int16 v59 = *(void **)(*((void *)v143 + 60) + 8 * v55);
        if (v59)
        {
          for (uint64_t i = (void *)*v59; i; uint64_t i = (void *)*i)
          {
            unint64_t v61 = i[1];
            if (v61 == v24)
            {
              if (i[2] == v24) {
                goto LABEL_158;
              }
            }
            else
            {
              if (v58.u32[0] > 1uLL)
              {
                if (v61 >= v88) {
                  v61 %= v88;
                }
              }
              else
              {
                v61 &= v88 - 1;
              }
              if (v61 != v55) {
                break;
              }
            }
          }
        }
      }
      uint64_t v62 = operator new(0x18uLL);
      void *v62 = 0;
      v62[1] = v24;
      int v87 = v62;
      void v62[2] = v24;
      float v63 = (float)(unint64_t)(*((void *)v56 + 63) + 1);
      float v64 = *((float *)v56 + 128);
      unint64_t v65 = v88;
      if (v88 && (float)(v64 * (float)v88) >= v63)
      {
LABEL_148:
        uint64_t v82 = *((void *)v56 + 60);
        id v83 = *(void **)(v82 + 8 * v55);
        if (v83)
        {
          *int v87 = *v83;
          uint64_t v84 = v87;
        }
        else
        {
          *int v87 = *((void *)v56 + 62);
          *((void *)v56 + 62) = v87;
          *(void *)(v82 + 8 * v55) = (char *)v56 + 496;
          if (!*v87)
          {
LABEL_157:
            ++*((void *)v56 + 63);
            int v56 = v143;
            goto LABEL_158;
          }
          unint64_t v85 = *(void *)(*v87 + 8);
          if ((v65 & (v65 - 1)) != 0)
          {
            if (v85 >= v65) {
              v85 %= v65;
            }
          }
          else
          {
            v85 &= v65 - 1;
          }
          id v83 = (void *)(*((void *)v56 + 60) + 8 * v85);
          uint64_t v84 = v87;
        }
        *id v83 = v84;
        goto LABEL_157;
      }
      BOOL v66 = 1;
      if (v88 >= 3) {
        BOOL v66 = (v88 & (v88 - 1)) != 0;
      }
      unint64_t v67 = v66 | (2 * v88);
      unint64_t v68 = vcvtps_u32_f32(v63 / v64);
      if (v67 <= v68) {
        int8x8_t prime = (int8x8_t)v68;
      }
      else {
        int8x8_t prime = (int8x8_t)v67;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      int8x8_t v89 = *(int8x8_t *)((char *)v56 + 488);
      if (*(void *)&prime > *(void *)&v89) {
        goto LABEL_113;
      }
      if (*(void *)&prime >= *(void *)&v89)
      {
        unint64_t v65 = *((void *)v56 + 61);
      }
      else
      {
        unint64_t v76 = vcvtps_u32_f32((float)*((unint64_t *)v56 + 63) / *((float *)v56 + 128));
        if (*(void *)&v89 < 3uLL || (uint8x8_t v77 = (uint8x8_t)vcnt_s8(v89), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
        {
          unint64_t v76 = std::__next_prime(v76);
        }
        else
        {
          uint64_t v78 = 1 << -(char)__clz(v76 - 1);
          if (v76 >= 2) {
            unint64_t v76 = v78;
          }
        }
        if (*(void *)&prime <= v76) {
          int8x8_t prime = (int8x8_t)v76;
        }
        if (*(void *)&prime >= *(void *)&v89)
        {
          unint64_t v65 = *((void *)v56 + 61);
        }
        else
        {
          if (prime)
          {
LABEL_113:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v70 = operator new(8 * *(void *)&prime);
            uint64_t v71 = (void *)*((void *)v56 + 60);
            *((void *)v56 + 60) = v70;
            if (v71) {
              operator delete(v71);
            }
            uint64_t v72 = 0;
            *((int8x8_t *)v56 + 61) = prime;
            do
              *(void *)(*((void *)v56 + 60) + 8 * v72++) = 0;
            while (*(void *)&prime != v72);
            uint64_t v73 = (void *)*((void *)v56 + 62);
            if (v73)
            {
              unint64_t v74 = v73[1];
              uint8x8_t v75 = (uint8x8_t)vcnt_s8(prime);
              v75.i16[0] = vaddlv_u8(v75);
              if (v75.u32[0] > 1uLL)
              {
                if (v74 >= *(void *)&prime) {
                  v74 %= *(void *)&prime;
                }
              }
              else
              {
                v74 &= *(void *)&prime - 1;
              }
              *(void *)(*((void *)v56 + 60) + 8 * v74) = (char *)v56 + 496;
              id v79 = (void *)*v73;
              if (*v73)
              {
                do
                {
                  unint64_t v80 = v79[1];
                  if (v75.u32[0] > 1uLL)
                  {
                    if (v80 >= *(void *)&prime) {
                      v80 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v80 &= *(void *)&prime - 1;
                  }
                  if (v80 != v74)
                  {
                    uint64_t v81 = *((void *)v56 + 60);
                    if (!*(void *)(v81 + 8 * v80))
                    {
                      *(void *)(v81 + 8 * v80) = v73;
                      goto LABEL_139;
                    }
                    *uint64_t v73 = *v79;
                    void *v79 = **(void **)(*((void *)v56 + 60) + 8 * v80);
                    **(void **)(*((void *)v56 + 60) + 8 * v80) = v79;
                    id v79 = v73;
                  }
                  unint64_t v80 = v74;
LABEL_139:
                  uint64_t v73 = v79;
                  id v79 = (void *)*v79;
                  unint64_t v74 = v80;
                }
                while (v79);
              }
            }
            unint64_t v65 = (unint64_t)prime;
            goto LABEL_143;
          }
          uint64_t v86 = (void *)*((void *)v56 + 60);
          *((void *)v56 + 60) = 0;
          if (v86) {
            operator delete(v86);
          }
          unint64_t v65 = 0;
          *((void *)v56 + 61) = 0;
        }
      }
LABEL_143:
      if ((v65 & (v65 - 1)) != 0)
      {
        if (v24 >= v65) {
          uint64_t v55 = v24 % v65;
        }
        else {
          uint64_t v55 = v24;
        }
      }
      else
      {
        uint64_t v55 = (v65 - 1) & v24;
      }
      goto LABEL_148;
    }
    if (kAVVCScope)
    {
      int v33 = *(id *)kAVVCScope;
      if (!v33)
      {
LABEL_51:
        int v32 = -11793;
        __int16 v31 = v130;
        goto LABEL_52;
      }
    }
    else
    {
      int v33 = MEMORY[0x1E4F14500];
      id v36 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "ControllerImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5359;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v24;
      _os_log_impl(&dword_19D794000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d checkSession: Cannot find recording engine for streamID(%lu). Returning.", buf, 0x1Cu);
    }

    goto LABEL_51;
  }
LABEL_77:

  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }

  if (v112) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v112);
  }
  _Block_object_dispose(&v118, 8);
  VCLocker::~VCLocker((VCLocker *)v122);
  _Block_object_dispose(&v123, 8);
}